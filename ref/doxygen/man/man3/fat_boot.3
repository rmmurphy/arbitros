.TH "fat_boot" 3 "Sun Mar 2 2014" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fat_boot \- 
.PP
Boot sector for a FAT12/FAT16 volume\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SdFatStructs\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "uint8_t \fBjump\fP [3]"
.br
.ti -1c
.RI "char \fBoemId\fP [8]"
.br
.ti -1c
.RI "uint16_t \fBbytesPerSector\fP"
.br
.ti -1c
.RI "uint8_t \fBsectorsPerCluster\fP"
.br
.ti -1c
.RI "uint16_t \fBreservedSectorCount\fP"
.br
.ti -1c
.RI "uint8_t \fBfatCount\fP"
.br
.ti -1c
.RI "uint16_t \fBrootDirEntryCount\fP"
.br
.ti -1c
.RI "uint16_t \fBtotalSectors16\fP"
.br
.ti -1c
.RI "uint8_t \fBmediaType\fP"
.br
.ti -1c
.RI "uint16_t \fBsectorsPerFat16\fP"
.br
.ti -1c
.RI "uint16_t \fBsectorsPerTrack\fP"
.br
.ti -1c
.RI "uint16_t \fBheadCount\fP"
.br
.ti -1c
.RI "uint32_t \fBhidddenSectors\fP"
.br
.ti -1c
.RI "uint32_t \fBtotalSectors32\fP"
.br
.ti -1c
.RI "uint8_t \fBdriveNumber\fP"
.br
.ti -1c
.RI "uint8_t \fBreserved1\fP"
.br
.ti -1c
.RI "uint8_t \fBbootSignature\fP"
.br
.ti -1c
.RI "uint32_t \fBvolumeSerialNumber\fP"
.br
.ti -1c
.RI "char \fBvolumeLabel\fP [11]"
.br
.ti -1c
.RI "char \fBfileSystemType\fP [8]"
.br
.ti -1c
.RI "uint8_t \fBbootCode\fP [448]"
.br
.ti -1c
.RI "uint8_t \fBbootSectorSig0\fP"
.br
.ti -1c
.RI "uint8_t \fBbootSectorSig1\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Boot sector for a FAT12/FAT16 volume\&. 
.SH "Field Documentation"
.PP 
.SS "uint8_t bootCode[448]"
X86 boot code 
.SS "uint8_t bootSectorSig0"
must be 0X55 
.SS "uint8_t bootSectorSig1"
must be 0XAA 
.SS "uint8_t bootSignature"
0X29 if next three fields are valid 
.SS "uint16_t bytesPerSector"
The size of a hardware sector\&. Valid decimal values for this field are 512, 1024, 2048, and 4096\&. For most disks used in the United States, the value of this field is 512\&. 
.SS "uint8_t driveNumber"
Related to the BIOS physical drive number\&. Floppy drives are identified as 0x00 and physical hard disks are identified as 0x80, regardless of the number of physical disk drives\&. Typically, this value is set prior to issuing an INT 13h BIOS call to specify the device to access\&. The value is only relevant if the device is a boot device\&. 
.SS "uint8_t fatCount"
The number of copies of the FAT on the volume\&. The value of this field is always 2\&. 
.SS "char fileSystemType[8]"
A field with a value of either FAT, FAT12 or FAT16, depending on the disk format\&. 
.SS "uint16_t headCount"
Number of heads for interrupt 0x13\&. Not used otherwise\&. 
.SS "uint32_t hidddenSectors"
Count of hidden sectors preceding the partition that contains this FAT volume\&. This field is generally only relevant for media visible on interrupt 0x13\&. 
.SS "uint8_t jump[3]"
The first three bytes of the boot sector must be valid, executable x 86-based CPU instructions\&. This includes a jump instruction that skips the next nonexecutable bytes\&. 
.SS "uint8_t mediaType"
This dates back to the old MS-DOS 1\&.x media determination and is no longer usually used for anything\&. 0xF8 is the standard value for fixed (nonremovable) media\&. For removable media, 0xF0 is frequently used\&. Legal values are 0xF0 or 0xF8-0xFF\&. 
.SS "char oemId[8]"
This is typically a string of characters that identifies the operating system that formatted the volume\&. 
.SS "uint8_t reserved1"
used by Windows NT - should be zero for FAT 
.SS "uint16_t reservedSectorCount"
The number of sectors preceding the start of the first FAT, including the boot sector\&. The value of this field is always 1\&. 
.SS "uint16_t rootDirEntryCount"
For FAT12 and FAT16 volumes, this field contains the count of 32-byte directory entries in the root directory\&. For FAT32 volumes, this field must be set to 0\&. For FAT12 and FAT16 volumes, this value should always specify a count that when multiplied by 32 results in a multiple of bytesPerSector\&. FAT16 volumes should use the value 512\&. 
.SS "uint8_t sectorsPerCluster"
Number of sectors per allocation unit\&. This value must be a power of 2 that is greater than 0\&. The legal values are 1, 2, 4, 8, 16, 32, 64, and 128\&. 128 should be avoided\&. 
.SS "uint16_t sectorsPerFat16"
Count of sectors occupied by one FAT on FAT12/FAT16 volumes\&. On FAT32 volumes this field must be 0, and sectorsPerFat32 contains the FAT size count\&. 
.SS "uint16_t sectorsPerTrack"
Sectors per track for interrupt 0x13\&. Not used otherwise\&. 
.SS "uint16_t totalSectors16"
This field is the old 16-bit total count of sectors on the volume\&. This count includes the count of all sectors in all four regions of the volume\&. This field can be 0; if it is 0, then totalSectors32 must be nonzero\&. For FAT32 volumes, this field must be 0\&. For FAT12 and FAT16 volumes, this field contains the sector count, and totalSectors32 is 0 if the total sector count fits (is less than 0x10000)\&. 
.SS "uint32_t totalSectors32"
This field is the new 32-bit total count of sectors on the volume\&. This count includes the count of all sectors in all four regions of the volume\&. This field can be 0; if it is 0, then totalSectors16 must be nonzero\&. 
.SS "char volumeLabel[11]"
A field once used to store the volume label\&. The volume label is now stored as a special file in the root directory\&. 
.SS "uint32_t volumeSerialNumber"
A random serial number created when formatting a disk, which helps to distinguish between disks\&. Usually generated by combining date and time\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
