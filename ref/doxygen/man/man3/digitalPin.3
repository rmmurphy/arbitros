.TH "DigitalPin< PinNumber >" 3 "Sun Mar 2 2014" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DigitalPin< PinNumber > \- 
.PP
Fast AVR digital port I/O\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DigitalPin\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDigitalPin\fP ()"
.br
.ti -1c
.RI "\fBDigitalPin\fP (bool pinMode)"
.br
.ti -1c
.RI "\fBDigitalPin\fP (bool mode, bool level)"
.br
.ti -1c
.RI "\fBDigitalPin\fP & \fBoperator=\fP (bool value) \fB__attribute__\fP((always_inline))"
.br
.ti -1c
.RI "\fBoperator bool\fP () const \fB__attribute__\fP((always_inline))"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void config(bool mode"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void high()"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void low()"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void mode(bool pinMode)"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) bool read() const "
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void toggle()"
.br
.ti -1c
.RI "\fB__attribute__\fP ((always_inline)) void write(bool value)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "bool \fBlevel\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<uint8_t PinNumber>class DigitalPin< PinNumber >"
Fast AVR digital port I/O\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBDigitalPin\fP ()\fC [inline]\fP"
Constructor 
.SS "\fBDigitalPin\fP (boolpinMode)\fC [inline]\fP, \fC [explicit]\fP"
Constructor 
.PP
\fBParameters:\fP
.RS 4
\fIpinMode\fP if true set output mode else input mode\&. 
.RE
.PP

.SS "\fBDigitalPin\fP (boolmode, boollevel)\fC [inline]\fP"
Constructor 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP If true set output mode else input mode 
.br
\fIlevel\fP If mode is output, set level high/low\&. If mode is input, enable or disable the pin's 20K pullup\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "__attribute__ ((always_inline))\fC [inline]\fP"
set pin configuration 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP If true set output mode else input mode 
.br
\fIlevel\fP If mode is output, set level high/low\&. If mode is input, enable or disable the pin's 20K pullup\&. 
.RE
.PP

.SS "__attribute__ ((always_inline))\fC [inline]\fP"
Set pin level high if output mode or enable 20K pullup if input mode\&. 
.SS "__attribute__ ((always_inline))\fC [inline]\fP"
Set pin level low if output mode or disable 20K pullup if input mode\&. 
.SS "__attribute__ ((always_inline))\fC [inline]\fP"
Set pin mode 
.PP
\fBParameters:\fP
.RS 4
\fIpinMode\fP if true set output mode else input mode\&.
.RE
.PP
mode() does not enable or disable the 20K pullup for input mode\&. 
.SS "__attribute__ ((always_inline)) const\fC [inline]\fP"
\fBReturns:\fP
.RS 4
Pin's level 
.RE
.PP

.SS "__attribute__ ((always_inline))\fC [inline]\fP"
toggle a pin
.PP
If the pin is in output mode toggle the pin's level\&. If the pin is in input mode toggle the state of the 20K pullup\&. 
.SS "__attribute__ ((always_inline))\fC [inline]\fP"
Write the pin's level\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP If true set the pin's level high else set the pin's level low\&. 
.RE
.PP

.SS "operator bool () const\fC [inline]\fP"
Parenthesis operator 
.PP
\fBReturns:\fP
.RS 4
Pin's level 
.RE
.PP

.SS "\fBDigitalPin\fP& operator= (boolvalue)\fC [inline]\fP"
Asignment operator 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP If true set the pin's level high else set the pin's level low\&.
.RE
.PP
\fBReturns:\fP
.RS 4
This \fBDigitalPin\fP instance\&. 
.RE
.PP

.SH "Field Documentation"
.PP 
.SS "bool level"
\fBInitial value:\fP
.PP
.nf
{
    fastPinConfig(PinNumber, mode, level)
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
