.TH "SdFile" 3 "Sun Mar 2 2014" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SdFile \- 
.PP
\fBSdBaseFile\fP with \fBPrint\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SdFile\&.h>\fP
.PP
Inherits \fBSdBaseFile\fP, and \fBPrint\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSdFile\fP (const char *\fBname\fP, uint8_t oflag)"
.br
.ti -1c
.RI "bool \fBgetWriteError\fP ()"
.br
.ti -1c
.RI "void \fBclearWriteError\fP ()"
.br
.ti -1c
.RI "size_t \fBwrite\fP (uint8_t b)"
.br
.ti -1c
.RI "int \fBwrite\fP (const char *str)"
.br
.ti -1c
.RI "int \fBwrite\fP (const void *buf, size_t nbyte)"
.br
.ti -1c
.RI "void \fBwrite_P\fP (\fBPGM_P\fP str)"
.br
.ti -1c
.RI "void \fBwriteln_P\fP (\fBPGM_P\fP str)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
\fBSdBaseFile\fP with \fBPrint\fP\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSdFile\fP (const char *path, uint8_toflag)"
Create a file object and open it in the current working directory\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP A path with a valid 8\&.3 DOS name for a file to be opened\&.
.br
\fIoflag\fP Values for \fIoflag\fP are constructed by a bitwise-inclusive OR of open flags\&. see \fBSdBaseFile::open(SdBaseFile*, const char*, uint8_t)\fP\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void clearWriteError ()\fC [inline]\fP"
Set writeError to zero 
.SS "bool getWriteError ()\fC [inline]\fP"
\fBReturns:\fP
.RS 4
value of writeError 
.RE
.PP

.SS "size_t write (uint8_tb)\fC [virtual]\fP"
Write a byte to a file\&. Required by the Arduino \fBPrint\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP the byte to be written\&. Use getWriteError to check for errors\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 for success and 0 for failure\&. 
.RE
.PP

.PP
Implements \fBPrint\fP\&.
.SS "int write (const char *str)"
Write a string to a file\&. Used by the Arduino \fBPrint\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Pointer to the string\&. Use getWriteError to check for errors\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
count of characters written for success or -1 for failure\&. 
.RE
.PP

.SS "int write (const void *buf, size_tnbyte)"
Write data to an open file\&.
.PP
\fBNote:\fP
.RS 4
Data is moved to the cache but may not be written to the storage device until \fBsync()\fP is called\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIbuf\fP Pointer to the location of the data to be written\&.
.br
\fInbyte\fP Number of bytes to write\&.
.RE
.PP
\fBReturns:\fP
.RS 4
For success \fBwrite()\fP returns the number of bytes written, always \fInbyte\fP\&. If an error occurs, \fBwrite()\fP returns -1\&. Possible errors include \fBwrite()\fP is called before a file has been opened, write is called for a read-only file, device is full, a corrupt file system or an I/O error\&. 
.RE
.PP

.SS "void write_P (\fBPGM_P\fPstr)"
Write a PROGMEM string to a file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Pointer to the PROGMEM string\&. Use getWriteError to check for errors\&. 
.RE
.PP

.SS "void writeln_P (\fBPGM_P\fPstr)"
Write a PROGMEM string followed by CR/LF to a file\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP Pointer to the PROGMEM string\&. Use getWriteError to check for errors\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
