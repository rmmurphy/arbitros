.TH "C:/arbitros/trunk/libraries/sd/SdFat/SdFatConfig.h" 3 "Sun Mar 2 2014" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/arbitros/trunk/libraries/sd/SdFat/SdFatConfig.h \- 
.PP
configuration definitions  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUSE_SEPARATE_FAT_CACHE\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_MULTI_BLOCK_SD_IO\fP   1"
.br
.ti -1c
.RI "#define \fBUSE_ARDUINO_SPI_LIBRARY\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_NATIVE_MK20DX128_SPI\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_NATIVE_SAM3X_SPI\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_SD_CRC\fP   1"
.br
.ti -1c
.RI "#define \fBUSE_MULTIPLE_CARDS\fP   0"
.br
.ti -1c
.RI "#define \fBDESTRUCTOR_CLOSES_FILE\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_SERIAL_FOR_STD_OUT\fP   0"
.br
.ti -1c
.RI "#define \fBENDL_CALLS_FLUSH\fP   0"
.br
.ti -1c
.RI "#define \fBALLOW_DEPRECATED_FUNCTIONS\fP   0"
.br
.ti -1c
.RI "#define \fBFAT12_SUPPORT\fP   0"
.br
.ti -1c
.RI "#define \fBSPI_SD_INIT_RATE\fP   11"
.br
.ti -1c
.RI "#define \fBMEGA_SOFT_SPI\fP   0"
.br
.ti -1c
.RI "#define \fBLEONARDO_SOFT_SPI\fP   0"
.br
.ti -1c
.RI "#define \fBUSE_SOFTWARE_SPI\fP   0"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "uint8_t const \fBSOFT_SPI_CS_PIN\fP = 10"
.br
.ti -1c
.RI "uint8_t const \fBSOFT_SPI_MOSI_PIN\fP = 11"
.br
.ti -1c
.RI "uint8_t const \fBSOFT_SPI_MISO_PIN\fP = 12"
.br
.ti -1c
.RI "uint8_t const \fBSOFT_SPI_SCK_PIN\fP = 13"
.br
.in -1c
.SH "Detailed Description"
.PP 
configuration definitions 


.SH "Macro Definition Documentation"
.PP 
.SS "#define ALLOW_DEPRECATED_FUNCTIONS   0"
Allow use of deprecated functions if ALLOW_DEPRECATED_FUNCTIONS is nonzero 
.SS "#define DESTRUCTOR_CLOSES_FILE   0"
Set DESTRUCTOR_CLOSES_FILE nonzero to close a file in its destructor\&.
.PP
Causes use of lots of heap in ARM\&. 
.SS "#define ENDL_CALLS_FLUSH   0"
Call flush for endl if ENDL_CALLS_FLUSH is nonzero
.PP
The standard for iostreams is to call flush\&. This is very costly for \fBSdFat\fP\&. Each call to flush causes 2048 bytes of I/O to the SD\&.
.PP
\fBSdFat\fP has a single 512 byte buffer for SD I/O so it must write the current data block to the SD, read the directory block from the SD, update the directory entry, write the directory block to the SD and read the data block back into the buffer\&.
.PP
The SD flash memory controller is not designed for this many rewrites so performance may be reduced by more than a factor of 100\&.
.PP
If ENDL_CALLS_FLUSH is zero, you must call flush and/or close to force all data to be written to the SD\&. 
.SS "#define FAT12_SUPPORT   0"
Allow FAT12 volumes if FAT12_SUPPORT is nonzero\&. FAT12 has not been well tested\&. 
.SS "#define LEONARDO_SOFT_SPI   0"
Define LEONARDO_SOFT_SPI nonzero to use software SPI on Leonardo Arduinos\&. Default pins used are SS 10, MOSI 11, MISO 12, and SCK 13\&. Edit Software Spi pins to change pin numbers\&.
.PP
LEONARDO_SOFT_SPI allows an unmodified Adafruit GPS Shield to be used on Leonardo Arduinos\&. Software SPI works well with GPS Shield V1\&.1 but many SD cards will fail with GPS Shield V1\&.0\&. 
.SS "#define MEGA_SOFT_SPI   0"
Define MEGA_SOFT_SPI nonzero to use software SPI on Mega Arduinos\&. Default pins used are SS 10, MOSI 11, MISO 12, and SCK 13\&. Edit Software Spi pins to change pin numbers\&.
.PP
MEGA_SOFT_SPI allows an unmodified Adafruit GPS Shield to be used on Mega Arduinos\&. Software SPI works well with GPS Shield V1\&.1 but many SD cards will fail with GPS Shield V1\&.0\&. 
.SS "#define SPI_SD_INIT_RATE   11"
SPI init rate for SD initialization commands\&. Must be 10 (F_CPU/64) or greater 
.SS "#define USE_ARDUINO_SPI_LIBRARY   0"
Force use of Arduino Standard SPI library if USE_ARDUINO_SPI_LIBRARY is nonzero\&. 
.SS "#define USE_MULTI_BLOCK_SD_IO   1"
Don't use mult-block read/write on small AVR boards 
.SS "#define USE_MULTIPLE_CARDS   0"
To use multiple SD cards set USE_MULTIPLE_CARDS nonzero\&.
.PP
Using multiple cards costs 400 - 500 bytes of flash\&.
.PP
Each card requires about 550 bytes of SRAM so use of a Mega is recommended\&. 
.SS "#define USE_NATIVE_MK20DX128_SPI   0"
Use native SPI on Teensy 3\&.0 if USE_NATIVE_MK20DX128-SPI is nonzero\&. 
.SS "#define USE_NATIVE_SAM3X_SPI   0"
Use fast SAM3X SPI library if USE_NATIVE_SAM3X_SPI is nonzero\&. 
.SS "#define USE_SD_CRC   1"
To enable SD card CRC checking set USE_SD_CRC nonzero\&.
.PP
Set USE_SD_CRC to 1 to use a smaller slower CRC-CCITT function\&.
.PP
Set USE_SD_CRC to 2 to used a larger faster table driven CRC-CCITT function\&. 
.SS "#define USE_SEPARATE_FAT_CACHE   0"
Set USE_SEPARATE_FAT_CACHE nonzero to use a second 512 byte cache for FAT table entries\&. Improves performance for large writes that are not a multiple of 512 bytes\&. 
.SS "#define USE_SERIAL_FOR_STD_OUT   0"
For AVR
.PP
Set nonzero to use Serial (the \fBHardwareSerial\fP class) for error messages and output from print functions like ls()\&.
.PP
If USE_SERIAL_FOR_STD_OUT is zero, a small non-interrupt driven class is used to output messages to serial port zero\&. This allows an alternate Serial library like SerialPort to be used with \fBSdFat\fP\&.
.PP
You can redirect stdOut with \fBSdFat::setStdOut(Print* stream)\fP and get the current stream with \fBSdFat::stdOut()\fP\&. 
.SS "#define USE_SOFTWARE_SPI   0"
Set USE_SOFTWARE_SPI nonzero to always use software SPI on AVR\&. 
.SH "Variable Documentation"
.PP 
.SS "uint8_t const SOFT_SPI_CS_PIN = 10"
Default Software SPI chip select pin 
.SS "uint8_t const SOFT_SPI_MISO_PIN = 12"
Software SPI Master In Slave Out pin 
.SS "uint8_t const SOFT_SPI_MOSI_PIN = 11"
Software SPI Master Out Slave In pin 
.SS "uint8_t const SOFT_SPI_SCK_PIN = 13"
Software SPI Clock pin 
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
