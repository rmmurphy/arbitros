
primusEval.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001716c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000044a  00802000  0001716c  00017200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000382  0080244a  0080244a  0001764a  2**0
                  ALLOC
  3 .stab         000052d4  00000000  00000000  0001764c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001624  00000000  00000000  0001c920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00001b78  00000000  00000000  0001df48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00032787  00000000  00000000  0001fac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000799a  00000000  00000000  00052247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cf54  00000000  00000000  00059be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000081b8  00000000  00000000  00066b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000d572  00000000  00000000  0006ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002a1b6  00000000  00000000  0007c262  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020a8  00000000  00000000  000a6418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__ctors_end>
       4:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
       8:	0c 94 ce 29 	jmp	0x539c	; 0x539c <__vector_2>
       c:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__vector_3>
      10:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__vector_4>
      14:	0c 94 ec 2d 	jmp	0x5bd8	; 0x5bd8 <__vector_5>
      18:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__vector_6>
      1c:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_7>
      20:	0c 94 aa 22 	jmp	0x4554	; 0x4554 <__vector_8>
      24:	0c 94 f5 22 	jmp	0x45ea	; 0x45ea <__vector_9>
      28:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      2c:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      30:	0c 94 80 4d 	jmp	0x9b00	; 0x9b00 <__vector_12>
      34:	0c 94 4b 4d 	jmp	0x9a96	; 0x9a96 <__vector_13>
      38:	0c 94 4b 41 	jmp	0x8296	; 0x8296 <__vector_14>
      3c:	0c 94 51 40 	jmp	0x80a2	; 0x80a2 <__vector_15>
      40:	0c 94 5f 40 	jmp	0x80be	; 0x80be <__vector_16>
      44:	0c 94 9a 40 	jmp	0x8134	; 0x8134 <__vector_17>
      48:	0c 94 d5 40 	jmp	0x81aa	; 0x81aa <__vector_18>
      4c:	0c 94 10 41 	jmp	0x8220	; 0x8220 <__vector_19>
      50:	0c 94 fc 41 	jmp	0x83f8	; 0x83f8 <__vector_20>
      54:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      58:	0c 94 86 41 	jmp	0x830c	; 0x830c <__vector_22>
      5c:	0c 94 c1 41 	jmp	0x8382	; 0x8382 <__vector_23>
      60:	0c 94 8a 32 	jmp	0x6514	; 0x6514 <__vector_24>
      64:	0c 94 f5 52 	jmp	0xa5ea	; 0xa5ea <__vector_25>
      68:	0c 94 2b 53 	jmp	0xa656	; 0xa656 <__vector_26>
      6c:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      70:	0c 94 61 53 	jmp	0xa6c2	; 0xa6c2 <__vector_28>
      74:	0c 94 97 53 	jmp	0xa72e	; 0xa72e <__vector_29>
      78:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      7c:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      80:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      84:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      88:	0c 94 52 29 	jmp	0x52a4	; 0x52a4 <__vector_34>
      8c:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__vector_35>
      90:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      94:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      98:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      9c:	0c 94 be 20 	jmp	0x417c	; 0x417c <__vector_39>
      a0:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__vector_40>
      a4:	0c 94 3c 21 	jmp	0x4278	; 0x4278 <__vector_41>
      a8:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__vector_42>
      ac:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__vector_43>
      b0:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__vector_44>
      b4:	0c 94 54 4e 	jmp	0x9ca8	; 0x9ca8 <__vector_45>
      b8:	0c 94 1f 4e 	jmp	0x9c3e	; 0x9c3e <__vector_46>
      bc:	0c 94 fb 44 	jmp	0x89f6	; 0x89f6 <__vector_47>
      c0:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      c4:	0c 94 0f 44 	jmp	0x881e	; 0x881e <__vector_49>
      c8:	0c 94 4a 44 	jmp	0x8894	; 0x8894 <__vector_50>
      cc:	0c 94 85 44 	jmp	0x890a	; 0x890a <__vector_51>
      d0:	0c 94 c0 44 	jmp	0x8980	; 0x8980 <__vector_52>
      d4:	0c 94 ac 45 	jmp	0x8b58	; 0x8b58 <__vector_53>
      d8:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      dc:	0c 94 36 45 	jmp	0x8a6c	; 0x8a6c <__vector_55>
      e0:	0c 94 71 45 	jmp	0x8ae2	; 0x8ae2 <__vector_56>
      e4:	0c 94 fa 32 	jmp	0x65f4	; 0x65f4 <__vector_57>
      e8:	0c 94 a5 54 	jmp	0xa94a	; 0xa94a <__vector_58>
      ec:	0c 94 db 54 	jmp	0xa9b6	; 0xa9b6 <__vector_59>
      f0:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
      f4:	0c 94 11 55 	jmp	0xaa22	; 0xaa22 <__vector_61>
      f8:	0c 94 47 55 	jmp	0xaa8e	; 0xaa8e <__vector_62>
      fc:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     100:	0c 94 4a 2a 	jmp	0x5494	; 0x5494 <__vector_64>
     104:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__vector_65>
     108:	0c 94 d6 28 	jmp	0x51ac	; 0x51ac <__vector_66>
     10c:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__vector_67>
     110:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     114:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     118:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     11c:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__vector_71>
     120:	0c 94 01 20 	jmp	0x4002	; 0x4002 <__vector_72>
     124:	0c 94 40 20 	jmp	0x4080	; 0x4080 <__vector_73>
     128:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <__vector_74>
     12c:	0c 94 ea 4d 	jmp	0x9bd4	; 0x9bd4 <__vector_75>
     130:	0c 94 b5 4d 	jmp	0x9b6a	; 0x9b6a <__vector_76>
     134:	0c 94 23 43 	jmp	0x8646	; 0x8646 <__vector_77>
     138:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     13c:	0c 94 37 42 	jmp	0x846e	; 0x846e <__vector_79>
     140:	0c 94 72 42 	jmp	0x84e4	; 0x84e4 <__vector_80>
     144:	0c 94 ad 42 	jmp	0x855a	; 0x855a <__vector_81>
     148:	0c 94 e8 42 	jmp	0x85d0	; 0x85d0 <__vector_82>
     14c:	0c 94 d4 43 	jmp	0x87a8	; 0x87a8 <__vector_83>
     150:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     154:	0c 94 5e 43 	jmp	0x86bc	; 0x86bc <__vector_85>
     158:	0c 94 99 43 	jmp	0x8732	; 0x8732 <__vector_86>
     15c:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__vector_87>
     160:	0c 94 cd 53 	jmp	0xa79a	; 0xa79a <__vector_88>
     164:	0c 94 03 54 	jmp	0xa806	; 0xa806 <__vector_89>
     168:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     16c:	0c 94 39 54 	jmp	0xa872	; 0xa872 <__vector_91>
     170:	0c 94 6f 54 	jmp	0xa8de	; 0xa8de <__vector_92>
     174:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     178:	0c 94 32 2d 	jmp	0x5a64	; 0x5a64 <__vector_94>
     17c:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__vector_95>
     180:	0c 94 be 2b 	jmp	0x577c	; 0x577c <__vector_96>
     184:	0c 94 fc 2b 	jmp	0x57f8	; 0x57f8 <__vector_97>
     188:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <__vector_98>
     18c:	0c 94 78 2c 	jmp	0x58f0	; 0x58f0 <__vector_99>
     190:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__vector_100>
     194:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__vector_101>
     198:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     19c:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     1a0:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <__vector_104>
     1a4:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <__vector_105>
     1a8:	0c 94 be 4e 	jmp	0x9d7c	; 0x9d7c <__vector_106>
     1ac:	0c 94 89 4e 	jmp	0x9d12	; 0x9d12 <__vector_107>
     1b0:	0c 94 d3 46 	jmp	0x8da6	; 0x8da6 <__vector_108>
     1b4:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     1b8:	0c 94 e7 45 	jmp	0x8bce	; 0x8bce <__vector_110>
     1bc:	0c 94 22 46 	jmp	0x8c44	; 0x8c44 <__vector_111>
     1c0:	0c 94 5d 46 	jmp	0x8cba	; 0x8cba <__vector_112>
     1c4:	0c 94 98 46 	jmp	0x8d30	; 0x8d30 <__vector_113>
     1c8:	0c 94 84 47 	jmp	0x8f08	; 0x8f08 <__vector_114>
     1cc:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     1d0:	0c 94 0e 47 	jmp	0x8e1c	; 0x8e1c <__vector_116>
     1d4:	0c 94 49 47 	jmp	0x8e92	; 0x8e92 <__vector_117>
     1d8:	0c 94 32 33 	jmp	0x6664	; 0x6664 <__vector_118>
     1dc:	0c 94 7d 55 	jmp	0xaafa	; 0xaafa <__vector_119>
     1e0:	0c 94 b3 55 	jmp	0xab66	; 0xab66 <__vector_120>
     1e4:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>
     1e8:	0c 94 e9 55 	jmp	0xabd2	; 0xabd2 <__vector_122>
     1ec:	0c 94 1f 56 	jmp	0xac3e	; 0xac3e <__vector_123>
     1f0:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__bad_interrupt>

000001f4 <__c.4344>:
     1f4:	1b 63 00                                            .c.

000001f7 <_ZZN10SdBaseFile10make83NameEPKcPhPS1_E3__c>:
     1f7:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000207 <__c.4813>:
     207:	49 6e 76 61 6c 69 64 20 74 6f 6b 65 6e 20 73 69     Invalid token si
     217:	7a 65 0a 0d 00                                      ze...

0000021c <__c.4815>:
     21c:	49 6e 76 61 6c 69 64 20 6e 75 6d 62 65 72 20 6f     Invalid number o
     22c:	66 20 74 6f 6b 65 6e 73 0a 0d 00                    f tokens...

00000237 <__c.4817>:
     237:	73 63 74 00                                         sct.

0000023b <__c.4822>:
     23b:	68 65 6c 70 00                                      help.

00000240 <__c.4824>:
     240:	73 64 6c 00                                         sdl.

00000244 <__c.4826>:
     244:	64 65 76 00                                         dev.

00000248 <__c.4828>:
     248:	74 6f 70 00                                         top.

0000024c <__c.4830>:
     24c:	6c 73 00                                            ls.

0000024f <__c.4832>:
     24f:	72 6d 00                                            rm.

00000252 <__c.4834>:
     252:	2d 72 00                                            -r.

00000255 <__c.4836>:
     255:	72 6d 64 69 72 00                                   rmdir.

0000025b <__c.4838>:
     25b:	6d 6b 64 69 72 00                                   mkdir.

00000261 <__c.4840>:
     261:	63 64 00                                            cd.

00000264 <__c.4843>:
     264:	2f 00                                               /.

00000266 <__c.4845>:
     266:	68 65 61 64 00                                      head.

0000026b <__c.4847>:
     26b:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

00000279 <__c.4688>:
     279:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     289:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     299:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     2a9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     2b9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

000002c6 <__c.4690>:
     2c6:	7c 20 43 6f 6d 6d 61 6e 64 20 7c 20 20 20 20 20     | Command |     
     2d6:	41 72 67 75 6d 65 6e 74 73 20 20 20 20 20 7c 20     Arguments     | 
     2e6:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 65 73                  Des
     2f6:	63 72 69 70 74 69 6f 6e 20 20 20 20 20 20 20 20     cription        
     306:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000313 <__c.4692>:
     313:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     323:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d     --------------|-
     333:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     343:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     353:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00000360 <__c.4694>:
     360:	7c 20 73 64 6c 20 20 20 20 20 7c 20 3c 61 72 67     | sdl     | <arg
     370:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     380:	53 65 74 20 74 68 65 20 64 65 62 75 67 20 6c 65     Set the debug le
     390:	76 65 6c 2c 20 77 68 65 72 65 20 3c 61 72 67 31     vel, where <arg1
     3a0:	3e 20 3d 20 20 20 20 20 20 7c 0a 0d 00              > =      |...

000003ad <__c.4696>:
     3ad:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     3bd:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     3cd:	30 2c 31 2c 32 20 28 6c 6f 77 2c 20 6d 65 64 2c     0,1,2 (low, med,
     3dd:	20 68 69 67 68 29 20 20 20 20 20 20 20 20 20 20      high)          
     3ed:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000003fa <__c.4698>:
     3fa:	7c 20 64 65 76 20 20 20 20 20 7c 20 20 20 20 20     | dev     |     
     40a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     41a:	52 65 74 75 72 6e 73 20 61 20 6c 69 73 74 20 6f     Returns a list o
     42a:	66 20 61 63 74 69 76 65 20 64 72 69 76 65 72 73     f active drivers
     43a:	2e 20 20 20 20 20 20 20 20 7c 0a 0d 00              .        |...

00000447 <__c.4700>:
     447:	7c 20 74 6f 70 20 20 20 20 20 7c 20 20 20 20 20     | top     |     
     457:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     467:	44 69 73 70 6c 61 79 73 20 73 79 73 74 65 6d 20     Displays system 
     477:	73 74 61 74 69 73 74 69 63 73 2e 20 20 20 20 20     statistics.     
     487:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000494 <__c.4702>:
     494:	7c 20 6c 73 20 20 20 20 20 20 7c 20 3c 61 72 67     | ls      | <arg
     4a4:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     4b4:	44 69 73 70 6c 61 79 73 20 74 68 65 20 63 6f 6e     Displays the con
     4c4:	74 65 6e 74 73 20 6f 66 20 64 69 72 20 3c 61 72     tents of dir <ar
     4d4:	67 31 3e 2e 20 20 20 20 20 7c 0a 0d 00              g1>.     |...

000004e1 <__c.4704>:
     4e1:	7c 20 63 64 20 20 20 20 20 20 7c 20 3c 61 72 67     | cd      | <arg
     4f1:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     501:	43 68 61 6e 67 65 20 74 6f 20 64 69 72 20 3c 61     Change to dir <a
     511:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     521:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000052e <__c.4706>:
     52e:	7c 20 72 6d 20 20 20 20 20 20 7c 20 3c 61 72 67     | rm      | <arg
     53e:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     54e:	52 65 6d 6f 76 65 20 61 20 66 69 6c 65 20 3c 61     Remove a file <a
     55e:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     56e:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000057b <__c.4708>:
     57b:	7c 20 72 6d 64 69 72 20 20 20 7c 20 3c 61 72 67     | rmdir   | <arg
     58b:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     59b:	52 65 6d 6f 76 65 20 61 20 64 69 72 65 63 74 6f     Remove a directo
     5ab:	72 79 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ry.             
     5bb:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000005c8 <__c.4710>:
     5c8:	7c 20 6d 6b 64 69 72 20 20 20 7c 20 3c 61 72 67     | mkdir   | <arg
     5d8:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     5e8:	43 72 65 61 74 65 20 61 20 64 69 72 65 63 74 6f     Create a directo
     5f8:	72 79 20 3c 61 72 67 31 3e 2e 20 20 20 20 20 20     ry <arg1>.      
     608:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000615 <__c.4712>:
     615:	7c 20 74 6f 75 63 68 20 20 20 7c 20 3c 61 72 67     | touch   | <arg
     625:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     635:	43 72 65 61 74 65 20 66 69 6c 65 20 3c 61 72 67     Create file <arg
     645:	31 3e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     1>.             
     655:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000662 <__c.4714>:
     662:	7c 20 68 65 61 64 20 20 20 20 7c 20 3c 61 72 67     | head    | <arg
     672:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     682:	50 72 69 6e 74 73 20 61 20 66 69 6c 65 20 3c 61     Prints a file <a
     692:	72 67 31 3e 20 74 6f 20 74 68 65 20 74 65 72 6d     rg1> to the term
     6a2:	69 6e 61 6c 2e 20 20 20 20 7c 0a 0d 00              inal.    |...

000006af <__c.4716>:
     6af:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     6bf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d     --------------'-
     6cf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6df:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6ef:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000006fc <__c.4725>:
     6fc:	49 6e 76 61 6c 69 64 20 4c 65 76 65 6c 0a 0d 00     Invalid Level...

0000070c <__c.4727>:
     70c:	54 68 65 20 27 45 6e 74 65 72 27 20 62 75 74 74     The 'Enter' butt
     71c:	6f 6e 20 77 69 6c 6c 20 65 6e 61 62 6c 65 2f 64     on will enable/d
     72c:	69 73 61 62 6c 65 20 61 20 64 65 62 75 67 67 69     isable a debuggi
     73c:	6e 67 20 73 65 73 73 69 6f 6e 2e 20 50 72 65 73     ng session. Pres
     74c:	73 20 27 45 6e 74 65 72 27 20 74 6f 20 62 65 67     s 'Enter' to beg
     75c:	69 6e 2e 2e 2e 0a 0d 00                             in......

00000764 <__c.4737>:
     764:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     774:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     784:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     794:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a     --------------..
     7a4:	0d 00                                               ..

000007a6 <__c.4739>:
     7a6:	7c 20 20 20 44 72 69 76 65 72 20 4e 61 6d 65 20     |   Driver Name 
     7b6:	20 20 7c 20 4d 61 6a 6f 72 20 4e 75 6d 62 65 72       | Major Number
     7c6:	20 7c 20 4d 69 6e 6f 72 20 4e 75 6d 62 65 72 7c      | Minor Number|
     7d6:	20 23 20 6f 66 20 48 61 6e 64 6c 65 73 20 7c 0a      # of Handles |.
     7e6:	0d 00                                               ..

000007e8 <__c.4741>:
     7e8:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     7f8:	2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --|-------------
     808:	2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c     -|-------------|
     818:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a     --------------|.
     828:	0d 00                                               ..

0000082a <__c.4743>:
     82a:	7c 20 25 31 36 73 7c 20 25 32 64 20 20 20 20 20     | %16s| %2d     
     83a:	20 20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20           | %2d     
     84a:	20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20 20          | %2d      
     85a:	20 20 20 20 20 7c 0a 0d 00                               |...

00000863 <__c.4748>:
     863:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     873:	2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --'-------------
     883:	2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27     -'-------------'
     893:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a     --------------'.
     8a3:	0d 00                                               ..

000008a5 <__c.4765>:
     8a5:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     .---------.-----
     8b5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     ----------.-----
     8c5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00           ----------....

000008d3 <__c.4767>:
     8d3:	7c 20 53 65 63 74 69 6f 6e 20 7c 20 20 20 20 41     | Section |    A
     8e3:	64 64 72 65 73 73 20 20 20 20 7c 20 20 20 53 69     ddress    |   Si
     8f3:	7a 65 20 42 79 74 65 73 20 20 7c 0a 0d 00           ze Bytes  |...

00000901 <__c.4769>:
     901:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     911:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     ----------|-----
     921:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00           ----------|...

0000092f <__c.4771>:
     92f:	7c 20 20 20 2e 64 61 74 61 20 7c 20 20 20 20 20     |   .data |     
     93f:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     94f:	0a 0d 00                                            ...

00000952 <__c.4773>:
     952:	7c 20 20 20 20 2e 62 73 73 20 7c 20 20 20 20 20     |    .bss |     
     962:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     972:	0a 0d 00                                            ...

00000975 <__c.4775>:
     975:	7c 20 20 20 2e 68 65 61 70 20 7c 20 20 20 20 20     |   .heap |     
     985:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     995:	0a 0d 00                                            ...

00000998 <__c.4777>:
     998:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     9a8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     9b8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

000009c6 <__c.4779>:
     9c6:	7c 55 73 65 64 20 52 41 4d 20 7c 20 20 20 20 20     |Used RAM |     
     9d6:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     9e6:	20 7c 0a 0d 00                                       |...

000009eb <__c.4781>:
     9eb:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     9fb:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     a0b:	25 25 20 7c 0a 0d 00                                %% |...

00000a12 <__c.4783>:
     a12:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     a22:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     a32:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000a40 <__c.4785>:
     a40:	7c 46 72 65 65 20 52 41 4d 20 7c 20 20 20 20 20     |Free RAM |     
     a50:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     a60:	20 7c 0a 0d 00                                       |...

00000a65 <__c.4787>:
     a65:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     a75:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     a85:	25 25 20 7c 0a 0d 00                                %% |...

00000a8c <__c.4789>:
     a8c:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     a9c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     aac:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000aba <__c.4791>:
     aba:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     aca:	31 20 6d 69 6e 75 74 65 20 20 7c 20 25 31 32 2e     1 minute  | %12.
     ada:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

00000ae3 <__c.4793>:
     ae3:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     af3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     b03:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000b11 <__c.4795>:
     b11:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     b21:	35 20 6d 69 6e 75 74 65 73 20 7c 20 25 31 32 2e     5 minutes | %12.
     b31:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

00000b3a <__c.4797>:
     b3a:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     b4a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     b5a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000b68 <__c.4680>:
     b68:	0d 0a 50 72 65 73 73 20 27 45 6e 74 65 72 27 20     ..Press 'Enter' 
     b78:	74 6f 20 72 65 73 75 6d 65 2c 20 27 71 27 20 74     to resume, 'q' t
     b88:	6f 20 73 74 6f 70 2e 0a 0d 00                       o stop....

00000b92 <__c.4700>:
     b92:	5b 25 30 32 64 3a 00                                [%02d:.

00000b99 <__c.4702>:
     b99:	5b 25 32 64 3a 00                                   [%2d:.

00000b9f <__c.4704>:
     b9f:	25 30 32 64 3a 00                                   %02d:.

00000ba5 <__c.4706>:
     ba5:	25 32 64 3a 00                                      %2d:.

00000baa <__c.4708>:
     baa:	25 30 32 64 3a 00                                   %02d:.

00000bb0 <__c.4710>:
     bb0:	25 32 64 3a 00                                      %2d:.

00000bb5 <__c.4712>:
     bb5:	25 30 30 33 64 5d 20 20 00                          %003d]  .

00000bbe <__c.4714>:
     bbe:	25 30 33 64 5d 20 20 00                             %03d]  .

00000bc6 <__c.4716>:
     bc6:	25 33 64 5d 20 20 00                                %3d]  .

00000bcd <__c.4068>:
     bcd:	61 72 62 5f 73 79 73 54 69 6d 65 72 53 74 61 72     arb_sysTimerStar
     bdd:	74 20 66 61 69 6c 65 64 20 77 69 74 68 20 25 64     t failed with %d
     bed:	2e 0a 0d 00                                         ....

00000bf1 <__c.4506>:
     bf1:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     c01:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     c11:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     c21:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     c31:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00000c3e <__c.4508>:
     c3e:	7c 20 43 6f 6d 6d 61 6e 64 20 7c 20 20 20 20 20     | Command |     
     c4e:	41 72 67 75 6d 65 6e 74 73 20 20 20 20 20 7c 20     Arguments     | 
     c5e:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 65 73                  Des
     c6e:	63 72 69 70 74 69 6f 6e 20 20 20 20 20 20 20 20     cription        
     c7e:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000c8b <__c.4510>:
     c8b:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     c9b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d     --------------|-
     cab:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     cbb:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     ccb:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00000cd8 <__c.4512>:
     cd8:	7c 20 75 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | ult     |     
     ce8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     cf8:	50 65 72 66 6f 72 6d 73 20 61 20 55 41 52 54 20     Performs a UART 
     d08:	6c 6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20     loopback test.  
     d18:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000d25 <__c.4514>:
     d25:	7c 20 74 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | tlt     |     
     d35:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     d45:	50 65 72 66 6f 72 6d 73 20 61 20 54 57 49 20 6c     Performs a TWI l
     d55:	6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20 20     oopback test.   
     d65:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000d72 <__c.4516>:
     d72:	7c 20 74 67 74 20 20 20 20 20 7c 20 20 20 20 20     | tgt     |     
     d82:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     d92:	50 65 72 66 6f 72 6d 73 20 61 20 74 65 73 74 20     Performs a test 
     da2:	75 73 69 6e 67 20 61 20 74 69 6d 65 72 20 61 6e     using a timer an
     db2:	64 20 32 20 67 70 69 6f 73 7c 0a 0d 00              d 2 gpios|...

00000dbf <__c.4518>:
     dbf:	7c 20 73 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | slt     |     
     dcf:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     ddf:	50 65 72 66 6f 72 6d 73 20 61 20 53 50 49 20 6c     Performs a SPI l
     def:	6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20 20     oopback test.   
     dff:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000e0c <__c.4520>:
     e0c:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     e1c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d     --------------'-
     e2c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e3c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e4c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00000e59 <__c.4408>:
     e59:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     e69:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e79:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e89:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e99:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00000ea6 <__c.4410>:
     ea6:	7c 20 20 20 20 20 20 20 20 54 65 73 74 20 20 20     |        Test   
     eb6:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
     ec6:	44 65 73 63 72 69 70 74 69 6f 6e 20 20 20 20 20     Description     
     ed6:	20 20 20 20 20 7c 20 20 20 20 20 20 20 53 65 74          |       Set
     ee6:	75 70 20 20 20 20 20 20 20 7c 0a 0d 00              up       |...

00000ef3 <__c.4412>:
     ef3:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     f03:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
     f13:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     f23:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
     f33:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00000f40 <__c.4414>:
     f40:	7c 20 55 41 52 54 20 6c 6f 6f 70 62 61 63 6b 20     | UART loopback 
     f50:	74 65 73 74 20 7c 20 4c 6f 6f 70 73 20 62 61 63     test | Loops bac
     f60:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
     f70:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
     f80:	69 6e 73 20 50 45 36 20 20 7c 0a 0d 00              ins PE6  |...

00000f8d <__c.4416>:
     f8d:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
     f9d:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
     fad:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
     fbd:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 45 37 2e 20     orm- | and PE7. 
     fcd:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000fda <__c.4418>:
     fda:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
     fea:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
     ffa:	61 64 73 20 75 73 69 6e 67 20 55 41 52 54 36 2c     ads using UART6,
    100a:	20 74 77 6f 20 7c 20 20 20 20 20 20 20 20 20 20      two |          
    101a:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001027 <__c.4420>:
    1027:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1037:	20 20 20 20 20 7c 20 44 4d 41 27 73 2c 20 61 6e          | DMA's, an
    1047:	64 20 74 77 6f 20 6d 61 69 6c 62 6f 78 20 6d 6f     d two mailbox mo
    1057:	64 75 6c 65 73 7c 20 20 20 20 20 20 20 20 20 20     dules|          
    1067:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001074 <__c.4422>:
    1074:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    1084:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1094:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    10a4:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    10b4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000010c1 <__c.4424>:
    10c1:	7c 20 54 57 49 20 6c 6f 6f 70 62 61 63 6b 20 74     | TWI loopback t
    10d1:	65 73 74 20 20 7c 20 4c 6f 6f 70 73 20 62 61 63     est  | Loops bac
    10e1:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
    10f1:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
    1101:	69 6e 73 20 50 44 30 20 20 7c 0a 0d 00              ins PD0  |...

0000110e <__c.4426>:
    110e:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    111e:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
    112e:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
    113e:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 45 30 20 61     orm- | and PE0 a
    114e:	73 20 77 65 6c 6c 20 61 73 7c 0a 0d 00              s well as|...

0000115b <__c.4428>:
    115b:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    116b:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
    117b:	61 64 73 20 75 73 69 6e 67 20 54 57 49 32 2c 20     ads using TWI2, 
    118b:	54 57 49 33 20 7c 20 70 69 6e 73 20 50 44 31 20     TWI3 | pins PD1 
    119b:	61 6e 64 20 50 45 31 2e 20 7c 0a 0d 00              and PE1. |...

000011a8 <__c.4430>:
    11a8:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    11b8:	20 20 20 20 20 7c 20 61 6e 64 20 74 77 6f 20 6d          | and two m
    11c8:	61 69 6c 62 6f 78 20 6d 6f 64 75 6c 65 73 2e 20     ailbox modules. 
    11d8:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    11e8:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000011f5 <__c.4432>:
    11f5:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    1205:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1215:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1225:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1235:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00001242 <__c.4434>:
    1242:	7c 20 53 50 49 20 6c 6f 6f 70 62 61 63 6b 20 74     | SPI loopback t
    1252:	65 73 74 20 20 7c 20 4c 6f 6f 70 73 20 62 61 63     est  | Loops bac
    1262:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
    1272:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
    1282:	69 6e 73 20 50 46 35 20 20 7c 0a 0d 00              ins PF5  |...

0000128f <__c.4436>:
    128f:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    129f:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
    12af:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
    12bf:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 46 36 2e 20     orm- | and PF6. 
    12cf:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000012dc <__c.4438>:
    12dc:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    12ec:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
    12fc:	61 64 73 20 75 73 69 6e 67 20 53 50 49 32 20 20     ads using SPI2  
    130c:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    131c:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001329 <__c.4440>:
    1329:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1339:	20 20 20 20 20 7c 20 61 6e 64 20 74 77 6f 20 6d          | and two m
    1349:	61 69 6c 62 6f 78 20 6d 6f 64 75 6c 65 73 2e 20     ailbox modules. 
    1359:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    1369:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001376 <__c.4442>:
    1376:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    1386:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1396:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    13a6:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    13b6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000013c3 <__c.4444>:
    13c3:	53 65 6c 65 63 74 20 6e 75 6d 62 65 72 20 6f 66     Select number of
    13d3:	20 74 72 69 61 6c 73 20 28 30 3c 2d 3e 31 30 30      trials (0<->100
    13e3:	30 30 29 2c 20 70 72 65 73 73 20 65 6e 74 65 72     00), press enter
    13f3:	2d 3e 20 00                                         -> .

000013f7 <__c.4446>:
    13f7:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

00001405 <__c.4448>:
    1405:	45 6e 74 65 72 20 74 68 65 20 74 65 73 74 20 6d     Enter the test m
    1415:	65 73 73 61 67 65 2d 3e 20 00                       essage-> .

0000141f <__c.4450>:
    141f:	4d 65 73 73 61 67 65 20 74 6f 6f 20 62 69 67 20     Message too big 
    142f:	66 6f 72 20 6d 61 69 6c 62 6f 78 2e 0a 0d 00        for mailbox....

0000143e <__c.4455>:
    143e:	0a 0d 00                                            ...

00001441 <__c.4460>:
    1441:	54 65 73 74 20 66 69 6e 69 73 68 65 64 2e 20 52     Test finished. R
    1451:	65 63 65 69 76 65 64 20 25 64 20 6f 75 74 20 6f     eceived %d out o
    1461:	66 20 25 64 20 6d 65 73 73 61 67 65 73 20 77 69     f %d messages wi
    1471:	74 68 20 25 64 20 65 72 72 6f 72 73 2e 0a 0d 00     th %d errors....

00001481 <__c.4473>:
    1481:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
    1491:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    14a1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    14b1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    14c1:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

000014ce <__c.4475>:
    14ce:	7c 20 20 20 20 20 20 20 20 54 65 73 74 20 20 20     |        Test   
    14de:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    14ee:	44 65 73 63 72 69 70 74 69 6f 6e 20 20 20 20 20     Description     
    14fe:	20 20 20 20 20 7c 20 20 20 20 20 20 20 53 65 74          |       Set
    150e:	75 70 20 20 20 20 20 20 20 7c 0a 0d 00              up       |...

0000151b <__c.4477>:
    151b:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
    152b:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    153b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    154b:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    155b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00001568 <__c.4479>:
    1568:	7c 20 54 69 6d 65 72 2f 47 50 49 4f 20 74 65 73     | Timer/GPIO tes
    1578:	74 20 20 20 20 7c 20 45 6e 61 62 6c 65 73 20 54     t    | Enables T
    1588:	49 4d 45 52 5f 31 20 77 68 69 63 68 20 67 6f 65     IMER_1 which goe
    1598:	73 20 6f 66 66 7c 20 43 6f 6e 6e 65 63 74 20 70     s off| Connect p
    15a8:	69 6e 73 20 50 48 33 20 20 7c 0a 0d 00              ins PH3  |...

000015b5 <__c.4481>:
    15b5:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    15c5:	20 20 20 20 20 7c 20 61 74 20 61 20 6f 6e 65 20          | at a one 
    15d5:	73 65 63 6f 6e 64 20 72 61 74 65 2e 20 54 68 65     second rate. The
    15e5:	20 20 20 20 20 7c 20 61 6e 64 20 50 48 34 2e 20          | and PH4. 
    15f5:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001602 <__c.4483>:
    1602:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1612:	20 20 20 20 20 7c 20 74 69 6d 65 72 20 74 6f 67          | timer tog
    1622:	67 6c 65 73 20 47 50 49 4f 5f 32 20 77 68 69 63     gles GPIO_2 whic
    1632:	68 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20     h    |          
    1642:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000164f <__c.4485>:
    164f:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    165f:	20 20 20 20 20 7c 20 63 61 75 73 65 73 20 61 6e          | causes an
    166f:	20 69 6e 74 65 72 72 75 70 74 20 6f 6e 20 47 50      interrupt on GP
    167f:	49 4f 5f 31 2e 7c 20 20 20 20 20 20 20 20 20 20     IO_1.|          
    168f:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000169c <__c.4487>:
    169c:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    16ac:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    16bc:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    16cc:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    16dc:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000016e9 <__c.4489>:
    16e9:	53 65 6c 65 63 74 20 6e 75 6d 62 65 72 20 6f 66     Select number of
    16f9:	20 74 72 69 61 6c 73 20 28 30 3c 2d 3e 31 30 30      trials (0<->100
    1709:	30 30 29 2c 20 70 72 65 73 73 20 65 6e 74 65 72     00), press enter
    1719:	2d 3e 20 00                                         -> .

0000171d <__c.4491>:
    171d:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

0000172b <__c.4494>:
    172b:	54 69 6d 65 72 20 69 6e 74 65 72 72 75 70 74 2e     Timer interrupt.
    173b:	2e 2e 0a 0d 00                                      .....

00001740 <__c.4499>:
    1740:	54 65 73 74 20 66 69 6e 69 73 68 65 64 2e 0a 0d     Test finished...
	...

00001751 <__c.1905>:
    1751:	6e 61 6e 00                                         nan.

00001755 <__c.1903>:
    1755:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
    1765:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
    1775:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
    1785:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
    1795:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
    17a5:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
    17b5:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
    17c5:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
    17d5:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
    17e5:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
    17f5:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
    1805:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
    1815:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
    1825:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
    1835:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
    1845:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00001854 <__ctors_start>:
    1854:	d5 5f       	subi	r29, 0xF5	; 245
    1856:	67 79       	andi	r22, 0x97	; 151

00001858 <__ctors_end>:
    1858:	11 24       	eor	r1, r1
    185a:	1f be       	out	0x3f, r1	; 63
    185c:	cf ef       	ldi	r28, 0xFF	; 255
    185e:	df e3       	ldi	r29, 0x3F	; 63
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	00 e0       	ldi	r16, 0x00	; 0
    1866:	0c bf       	out	0x3c, r16	; 60
    1868:	18 be       	out	0x38, r1	; 56
    186a:	19 be       	out	0x39, r1	; 57
    186c:	1a be       	out	0x3a, r1	; 58
    186e:	1b be       	out	0x3b, r1	; 59

00001870 <__do_copy_data>:
    1870:	14 e2       	ldi	r17, 0x24	; 36
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b0 e2       	ldi	r27, 0x20	; 32
    1876:	ec e6       	ldi	r30, 0x6C	; 108
    1878:	f1 e7       	ldi	r31, 0x71	; 113
    187a:	01 e0       	ldi	r16, 0x01	; 1
    187c:	0b bf       	out	0x3b, r16	; 59
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <__do_copy_data+0x14>
    1880:	07 90       	elpm	r0, Z+
    1882:	0d 92       	st	X+, r0
    1884:	aa 34       	cpi	r26, 0x4A	; 74
    1886:	b1 07       	cpc	r27, r17
    1888:	d9 f7       	brne	.-10     	; 0x1880 <__do_copy_data+0x10>
    188a:	1b be       	out	0x3b, r1	; 59

0000188c <__do_clear_bss>:
    188c:	17 e2       	ldi	r17, 0x27	; 39
    188e:	aa e4       	ldi	r26, 0x4A	; 74
    1890:	b4 e2       	ldi	r27, 0x24	; 36
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <.do_clear_bss_start>

00001894 <.do_clear_bss_loop>:
    1894:	1d 92       	st	X+, r1

00001896 <.do_clear_bss_start>:
    1896:	ac 3c       	cpi	r26, 0xCC	; 204
    1898:	b1 07       	cpc	r27, r17
    189a:	e1 f7       	brne	.-8      	; 0x1894 <.do_clear_bss_loop>

0000189c <__do_global_ctors>:
    189c:	18 e1       	ldi	r17, 0x18	; 24
    189e:	c8 e5       	ldi	r28, 0x58	; 88
    18a0:	d8 e1       	ldi	r29, 0x18	; 24
    18a2:	00 e0       	ldi	r16, 0x00	; 0
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <__do_global_ctors+0x16>
    18a6:	22 97       	sbiw	r28, 0x02	; 2
    18a8:	01 09       	sbc	r16, r1
    18aa:	fe 01       	movw	r30, r28
    18ac:	0b bf       	out	0x3b, r16	; 59
    18ae:	0e 94 b0 b8 	call	0x17160	; 0x17160 <__tablejump_elpm__>
    18b2:	c4 35       	cpi	r28, 0x54	; 84
    18b4:	d1 07       	cpc	r29, r17
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	08 07       	cpc	r16, r24
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <__do_global_ctors+0xa>
    18bc:	1b be       	out	0x3b, r1	; 59
    18be:	0e 94 c3 89 	call	0x11386	; 0x11386 <main>
    18c2:	0c 94 e6 b5 	jmp	0x16bcc	; 0x16bcc <exit>

000018c6 <__bad_interrupt>:
    18c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000018ca <__lshrdi3>:
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	60 97       	sbiw	r28, 0x10	; 16
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	00 23       	and	r16, r16
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <__lshrdi3+0x1e>
    18e6:	5a c0       	rjmp	.+180    	; 0x199c <__lshrdi3+0xd2>
    18e8:	29 87       	std	Y+9, r18	; 0x09
    18ea:	3a 87       	std	Y+10, r19	; 0x0a
    18ec:	4b 87       	std	Y+11, r20	; 0x0b
    18ee:	5c 87       	std	Y+12, r21	; 0x0c
    18f0:	6d 87       	std	Y+13, r22	; 0x0d
    18f2:	7e 87       	std	Y+14, r23	; 0x0e
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
    18f6:	98 8b       	std	Y+16, r25	; 0x10
    18f8:	80 e2       	ldi	r24, 0x20	; 32
    18fa:	80 1b       	sub	r24, r16
    18fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    18fe:	5e 85       	ldd	r21, Y+14	; 0x0e
    1900:	6f 85       	ldd	r22, Y+15	; 0x0f
    1902:	78 89       	ldd	r23, Y+16	; 0x10
    1904:	18 16       	cp	r1, r24
    1906:	b4 f0       	brlt	.+44     	; 0x1934 <__lshrdi3+0x6a>
    1908:	1d 82       	std	Y+5, r1	; 0x05
    190a:	1e 82       	std	Y+6, r1	; 0x06
    190c:	1f 82       	std	Y+7, r1	; 0x07
    190e:	18 86       	std	Y+8, r1	; 0x08
    1910:	99 27       	eor	r25, r25
    1912:	87 fd       	sbrc	r24, 7
    1914:	90 95       	com	r25
    1916:	90 95       	com	r25
    1918:	81 95       	neg	r24
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <__lshrdi3+0x5c>
    191e:	76 95       	lsr	r23
    1920:	67 95       	ror	r22
    1922:	57 95       	ror	r21
    1924:	47 95       	ror	r20
    1926:	8a 95       	dec	r24
    1928:	d2 f7       	brpl	.-12     	; 0x191e <__lshrdi3+0x54>
    192a:	49 83       	std	Y+1, r20	; 0x01
    192c:	5a 83       	std	Y+2, r21	; 0x02
    192e:	6b 83       	std	Y+3, r22	; 0x03
    1930:	7c 83       	std	Y+4, r23	; 0x04
    1932:	2c c0       	rjmp	.+88     	; 0x198c <__lshrdi3+0xc2>
    1934:	6a 01       	movw	r12, r20
    1936:	7b 01       	movw	r14, r22
    1938:	00 2e       	mov	r0, r16
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <__lshrdi3+0x7a>
    193c:	f6 94       	lsr	r15
    193e:	e7 94       	ror	r14
    1940:	d7 94       	ror	r13
    1942:	c7 94       	ror	r12
    1944:	0a 94       	dec	r0
    1946:	d2 f7       	brpl	.-12     	; 0x193c <__lshrdi3+0x72>
    1948:	cd 82       	std	Y+5, r12	; 0x05
    194a:	de 82       	std	Y+6, r13	; 0x06
    194c:	ef 82       	std	Y+7, r14	; 0x07
    194e:	f8 86       	std	Y+8, r15	; 0x08
    1950:	6a 01       	movw	r12, r20
    1952:	7b 01       	movw	r14, r22
    1954:	04 c0       	rjmp	.+8      	; 0x195e <__lshrdi3+0x94>
    1956:	cc 0c       	add	r12, r12
    1958:	dd 1c       	adc	r13, r13
    195a:	ee 1c       	adc	r14, r14
    195c:	ff 1c       	adc	r15, r15
    195e:	8a 95       	dec	r24
    1960:	d2 f7       	brpl	.-12     	; 0x1956 <__lshrdi3+0x8c>
    1962:	d7 01       	movw	r26, r14
    1964:	c6 01       	movw	r24, r12
    1966:	49 85       	ldd	r20, Y+9	; 0x09
    1968:	5a 85       	ldd	r21, Y+10	; 0x0a
    196a:	6b 85       	ldd	r22, Y+11	; 0x0b
    196c:	7c 85       	ldd	r23, Y+12	; 0x0c
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <__lshrdi3+0xae>
    1970:	76 95       	lsr	r23
    1972:	67 95       	ror	r22
    1974:	57 95       	ror	r21
    1976:	47 95       	ror	r20
    1978:	0a 95       	dec	r16
    197a:	d2 f7       	brpl	.-12     	; 0x1970 <__lshrdi3+0xa6>
    197c:	84 2b       	or	r24, r20
    197e:	95 2b       	or	r25, r21
    1980:	a6 2b       	or	r26, r22
    1982:	b7 2b       	or	r27, r23
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	ab 83       	std	Y+3, r26	; 0x03
    198a:	bc 83       	std	Y+4, r27	; 0x04
    198c:	29 81       	ldd	r18, Y+1	; 0x01
    198e:	3a 81       	ldd	r19, Y+2	; 0x02
    1990:	4b 81       	ldd	r20, Y+3	; 0x03
    1992:	5c 81       	ldd	r21, Y+4	; 0x04
    1994:	6d 81       	ldd	r22, Y+5	; 0x05
    1996:	7e 81       	ldd	r23, Y+6	; 0x06
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	98 85       	ldd	r25, Y+8	; 0x08
    199c:	60 96       	adiw	r28, 0x10	; 16
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	08 95       	ret

000019b2 <consoleClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error consoleClose( t_DEVHANDLE t_handle)
{
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	0f 92       	push	r0
    19ba:	0f 92       	push	r0
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    19c4:	80 91 4a 24 	lds	r24, 0x244A
    19c8:	90 91 4b 24 	lds	r25, 0x244B
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers--;
    19d2:	80 91 52 24 	lds	r24, 0x2452
    19d6:	81 50       	subi	r24, 0x01	; 1
    19d8:	80 93 52 24 	sts	0x2452, r24

   /*------------------------------------------------------------------------*
    * If there are no more handles attached to this driver than disable the
    * receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 0)
    19dc:	88 23       	and	r24, r24
    19de:	41 f4       	brne	.+16     	; 0x19f0 <consoleClose+0x3e>
   {

      t_uErr = hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    19e0:	80 91 53 24 	lds	r24, 0x2453
    19e4:	90 91 54 24 	lds	r25, 0x2454
    19e8:	0e 94 8b 56 	call	0xad16	; 0xad16 <hal_disableUartRxInt>

      if( t_uErr < 0)
    19ec:	87 fd       	sbrc	r24, 7
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <consoleClose+0x42>
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error consoleClose( t_DEVHANDLE t_handle)
{
   t_uartError t_uErr;
   t_error t_err = ARB_PASSED;
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <consoleClose+0x44>
   {

      t_uErr = hal_disableUartRxInt( gt_consoleDev.t_uHandle);

      if( t_uErr < 0)
         t_err = ARB_HAL_ERROR;
    19f4:	16 ef       	ldi	r17, 0xF6	; 246
   }/*End if( gt_consoleDev.c_numUsers == 0)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    19f6:	20 91 4a 24 	lds	r18, 0x244A
    19fa:	30 91 4b 24 	lds	r19, 0x244B
    19fe:	c9 01       	movw	r24, r18
    1a00:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return t_err;

}/*End consoleClose*/
    1a04:	81 2f       	mov	r24, r17
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	08 95       	ret

00001a12 <consoleOpen>:
   }

}/*End rxComplete*/

static t_error consoleOpen( t_DEVHANDLE t_handle)
{
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	0f 92       	push	r0
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_txMutex,
    1a24:	80 91 4c 24 	lds	r24, 0x244C
    1a28:	90 91 4d 24 	lds	r25, 0x244D
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers++;
    1a32:	80 91 52 24 	lds	r24, 0x2452
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	80 93 52 24 	sts	0x2452, r24

   /*------------------------------------------------------------------------*
    * If there is at least one user-space handle attached to this driver
    * than enable the receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 1)
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	41 f4       	brne	.+16     	; 0x1a50 <consoleOpen+0x3e>
   {

      t_uErr = hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1a40:	80 91 53 24 	lds	r24, 0x2453
    1a44:	90 91 54 24 	lds	r25, 0x2454
    1a48:	0e 94 55 56 	call	0xacaa	; 0xacaa <hal_enableUartRxInt>

      if( t_uErr < 0)
    1a4c:	87 fd       	sbrc	r24, 7
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <consoleOpen+0x42>

static t_error consoleOpen( t_DEVHANDLE t_handle)
{

   t_uartError t_uErr;
   t_error t_err = ARB_PASSED;
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <consoleOpen+0x44>
   {

      t_uErr = hal_enableUartRxInt( gt_consoleDev.t_uHandle);

      if( t_uErr < 0)
         t_err = ARB_HAL_ERROR;
    1a54:	16 ef       	ldi	r17, 0xF6	; 246
   }/*End if( gt_consoleDev.c_numUsers == 1)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_txMutex);
    1a56:	20 91 4c 24 	lds	r18, 0x244C
    1a5a:	30 91 4d 24 	lds	r19, 0x244D
    1a5e:	c9 01       	movw	r24, r18
    1a60:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return t_err;

}/*End consoleOpen*/
    1a64:	81 2f       	mov	r24, r17
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	08 95       	ret

00001a72 <consoleWrite>:
}/*End consoleRead*/

static int16_t consoleWrite( t_DEVHANDLE t_handle,
                             int8_t *pc_buff,
                             uint16_t s_size)
{
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <consoleWrite+0x6>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	8a 83       	std	Y+2, r24	; 0x02
    1a7e:	9b 83       	std	Y+3, r25	; 0x03
   /*------------------------------------------------------------------------*
    * A call to this function can occur within an interrupt, therefore 
    * mutual exclusion is performed by disabling interrupts for a brief
    * period of time.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
    1a80:	8f b7       	in	r24, 0x3f	; 63
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	f8 94       	cli

   s_numBytes = hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1a86:	80 91 53 24 	lds	r24, 0x2453
    1a8a:	90 91 54 24 	lds	r25, 0x2454
    1a8e:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <hal_uartWriteBlock>


   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	9f bf       	out	0x3f, r25	; 63
    * mutual exclusion is performed by disabling interrupts for a brief
    * period of time.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();

   s_numBytes = hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1a96:	28 2f       	mov	r18, r24
    1a98:	33 27       	eor	r19, r19
    1a9a:	27 fd       	sbrc	r18, 7
    1a9c:	30 95       	com	r19
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();

   return s_numBytes;

}/*End consoleWrite*/
    1a9e:	93 2f       	mov	r25, r19
    1aa0:	23 96       	adiw	r28, 0x03	; 3
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <consoleIoctl>:

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	aa 97       	sbiw	r28, 0x2a	; 42
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	89 a7       	lds	r24, 0x79
    1ac8:	9a a7       	lds	r25, 0x7a
    1aca:	69 01       	movw	r12, r18
    1acc:	7a 01       	movw	r14, r20
   t_consoleTokHndl *pt_tokens = NULL;
   int8_t *pc_rxBuffPtr = NULL;
   uint16_t s_size = 0;
   int8_t ac_buff[40];

   switch( (t_consoleCmd)s_command)
    1ace:	64 30       	cpi	r22, 0x04	; 4
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <consoleIoctl+0x28>
    1ad2:	b9 c0       	rjmp	.+370    	; 0x1c46 <consoleIoctl+0x19a>
    1ad4:	65 30       	cpi	r22, 0x05	; 5
    1ad6:	58 f4       	brcc	.+22     	; 0x1aee <consoleIoctl+0x42>
    1ad8:	61 30       	cpi	r22, 0x01	; 1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <consoleIoctl+0x32>
    1adc:	f5 c0       	rjmp	.+490    	; 0x1cc8 <consoleIoctl+0x21c>
    1ade:	61 30       	cpi	r22, 0x01	; 1
    1ae0:	c8 f0       	brcs	.+50     	; 0x1b14 <consoleIoctl+0x68>
    1ae2:	62 30       	cpi	r22, 0x02	; 2
    1ae4:	19 f1       	breq	.+70     	; 0x1b2c <consoleIoctl+0x80>
    1ae6:	63 30       	cpi	r22, 0x03	; 3
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <consoleIoctl+0x40>
    1aea:	9d c1       	rjmp	.+826    	; 0x1e26 <consoleIoctl+0x37a>
    1aec:	28 c0       	rjmp	.+80     	; 0x1b3e <consoleIoctl+0x92>
    1aee:	67 30       	cpi	r22, 0x07	; 7
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <consoleIoctl+0x48>
    1af2:	1f c1       	rjmp	.+574    	; 0x1d32 <consoleIoctl+0x286>
    1af4:	68 30       	cpi	r22, 0x08	; 8
    1af6:	38 f4       	brcc	.+14     	; 0x1b06 <consoleIoctl+0x5a>
    1af8:	65 30       	cpi	r22, 0x05	; 5
    1afa:	09 f4       	brne	.+2      	; 0x1afe <consoleIoctl+0x52>
    1afc:	e9 c0       	rjmp	.+466    	; 0x1cd0 <consoleIoctl+0x224>
    1afe:	66 30       	cpi	r22, 0x06	; 6
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <consoleIoctl+0x58>
    1b02:	91 c1       	rjmp	.+802    	; 0x1e26 <consoleIoctl+0x37a>
    1b04:	f2 c0       	rjmp	.+484    	; 0x1cea <consoleIoctl+0x23e>
    1b06:	68 30       	cpi	r22, 0x08	; 8
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <consoleIoctl+0x60>
    1b0a:	36 c1       	rjmp	.+620    	; 0x1d78 <consoleIoctl+0x2cc>
    1b0c:	69 30       	cpi	r22, 0x09	; 9
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <consoleIoctl+0x66>
    1b10:	8a c1       	rjmp	.+788    	; 0x1e26 <consoleIoctl+0x37a>
    1b12:	40 c1       	rjmp	.+640    	; 0x1d94 <consoleIoctl+0x2e8>
   {
      case CONSOLE_GET_RX_BUFFER_SIZE:

         i_return = (int32_t)utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    1b14:	80 91 50 24 	lds	r24, 0x2450
    1b18:	90 91 51 24 	lds	r25, 0x2451
    1b1c:	0e 94 05 a1 	call	0x1420a	; 0x1420a <utl_getBufferSize>
    1b20:	6c 01       	movw	r12, r24
    1b22:	ee 24       	eor	r14, r14
    1b24:	d7 fc       	sbrc	r13, 7
    1b26:	e0 94       	com	r14
    1b28:	fe 2c       	mov	r15, r14

      break;/*End case CONSOLE_GET_RX_BUFFER_SIZE:*/
    1b2a:	8e c1       	rjmp	.+796    	; 0x1e48 <consoleIoctl+0x39c>

      case CONSOLE_GET_BAUD_RATE:

         i_return = (int32_t)hal_uartGetBaudRate( gt_consoleDev.t_uHandle);
    1b2c:	80 91 53 24 	lds	r24, 0x2453
    1b30:	90 91 54 24 	lds	r25, 0x2454
    1b34:	0e 94 5d 58 	call	0xb0ba	; 0xb0ba <hal_uartGetBaudRate>
    1b38:	6b 01       	movw	r12, r22
    1b3a:	7c 01       	movw	r14, r24

      break;/*End case CONSOLE_GET_BAUD_RATE:*/
    1b3c:	85 c1       	rjmp	.+778    	; 0x1e48 <consoleIoctl+0x39c>
      case CONSOLE_PARSE_CMD_LINE:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxMutex,
    1b3e:	80 91 4a 24 	lds	r24, 0x244A
    1b42:	90 91 4b 24 	lds	r25, 0x244B
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
         pt_tokens = (t_consoleTokHndl *)((uint16_t)i_arguments);

         /*------------------------------------------------------------------*
          * Wait for data to be available in the RX buffer.
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxBlockingSem,
    1b4c:	80 91 4e 24 	lds	r24, 0x244E
    1b50:	90 91 4f 24 	lds	r25, 0x244F
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Get the head location of the RX buffer...
          *------------------------------------------------------------------*/
         pc_rxBuffPtr = utl_getBufferPtr( gt_consoleDev.t_rxBuffer);
    1b5a:	80 91 50 24 	lds	r24, 0x2450
    1b5e:	90 91 51 24 	lds	r25, 0x2451
    1b62:	0e 94 19 a1 	call	0x14232	; 0x14232 <utl_getBufferPtr>
    1b66:	8c 01       	movw	r16, r24
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
                                               pt_tokens->ac_tok,
    1b68:	76 01       	movw	r14, r12
         /*------------------------------------------------------------------*
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
    1b6a:	50 e7       	ldi	r21, 0x70	; 112
    1b6c:	c5 2e       	mov	r12, r21
    1b6e:	d1 2c       	mov	r13, r1
    1b70:	ce 0c       	add	r12, r14
    1b72:	df 1c       	adc	r13, r15
static t_consoleError drv_parseMessage( int8_t *pc_cbuff,
                                        int8_t ac_tok[][CONSOLE_MAX_TOKEN_SIZE],
                                        uint8_t *pc_tokenCount)
{
   int8_t *pc_nextLoc      = NULL;
   int8_t c_bytesRemaining = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    1b74:	80 91 50 24 	lds	r24, 0x2450
    1b78:	90 91 51 24 	lds	r25, 0x2451
    1b7c:	0e 94 05 a1 	call	0x1420a	; 0x1420a <utl_getBufferSize>
    * char. If it exits for another reason, the returned ptr will contain the
    * location of the last character in the buffer i.e. a NULL ptr, '\0', '\n',
    * or whatever is there when reaching the max size.
    *------------------------------------------------------------------------*/
   pc_nextLoc = pc_cbuff;
   (*pc_tokenCount) = 0;
    1b80:	d6 01       	movw	r26, r12
    1b82:	1c 92       	st	X, r1
   do
   {
      pc_nextLoc = drv_strTok( pc_nextLoc,
                               &ac_tok[(*pc_tokenCount)][0],
    1b84:	f6 01       	movw	r30, r12
    1b86:	20 81       	ld	r18, Z
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	44 e0       	ldi	r20, 0x04	; 4
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	4a 95       	dec	r20
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <consoleIoctl+0xe0>
    *------------------------------------------------------------------------*/
   pc_nextLoc = pc_cbuff;
   (*pc_tokenCount) = 0;
   do
   {
      pc_nextLoc = drv_strTok( pc_nextLoc,
    1b94:	2e 0d       	add	r18, r14
    1b96:	3f 1d       	adc	r19, r15
    1b98:	a8 01       	movw	r20, r16
    1b9a:	f9 01       	movw	r30, r18
                           int8_t *pc_out,
                           int8_t c_delim,
                           int8_t *pc_bytesRemaining,
                           int8_t *pc_tokenSize)
{
   int8_t c_tokenSizeCount = 0;
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0a c0       	rjmp	.+20     	; 0x1bb4 <consoleIoctl+0x108>
   while( (*pc_in != CONSOLE_RETURN_CHAR)
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
    1ba0:	61 93       	st	Z+, r22
      pc_in++;
      c_tokenSizeCount++;
    1ba2:	69 2f       	mov	r22, r25
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255

      /*---------------------------------------------------------------------*
       * Do we have room to insert the NULL character at the end of the
       * sequence?
       *---------------------------------------------------------------------*/
      if( c_tokenSizeCount == CONSOLE_MAX_TOKEN_SIZE)
    1ba6:	60 31       	cpi	r22, 0x10	; 16
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <consoleIoctl+0x106>
      {
         /*------------------------------------------------------------------*
          * Add one to the count in order to trigger the error condition.
          *------------------------------------------------------------------*/
         c_tokenSizeCount++;
    1baa:	9e 5f       	subi	r25, 0xFE	; 254
         *pc_tokenSize = c_tokenSizeCount;
         return NULL;
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	10 e0       	ldi	r17, 0x00	; 0
    1bb0:	19 c0       	rjmp	.+50     	; 0x1be4 <consoleIoctl+0x138>
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
      pc_in++;
      c_tokenSizeCount++;
    1bb2:	96 2f       	mov	r25, r22
      if( c_tokenSizeCount == CONSOLE_MAX_TOKEN_SIZE)
      {
         /*------------------------------------------------------------------*
          * Add one to the count in order to trigger the error condition.
          *------------------------------------------------------------------*/
         c_tokenSizeCount++;
    1bb4:	8a 01       	movw	r16, r20

   /*------------------------------------------------------------------------*
    * Search for delimiting character, if not found stop at max string size
    * carriage return, or NULL char.
    *------------------------------------------------------------------------*/
   while( (*pc_in != CONSOLE_RETURN_CHAR)
    1bb6:	da 01       	movw	r26, r20
    1bb8:	6c 91       	ld	r22, X
    1bba:	4f 5f       	subi	r20, 0xFF	; 255
    1bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbe:	6d 30       	cpi	r22, 0x0D	; 13
    1bc0:	41 f0       	breq	.+16     	; 0x1bd2 <consoleIoctl+0x126>
       && (*pc_in != '\0')
    1bc2:	66 23       	and	r22, r22
    1bc4:	31 f0       	breq	.+12     	; 0x1bd2 <consoleIoctl+0x126>
       && (*pc_in != c_delim)
    1bc6:	60 32       	cpi	r22, 0x20	; 32
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <consoleIoctl+0x122>
    * tokens, index the pointer to the next character so that we are starting
    * at the first character of the next token on the next call into this
    * function.
    *------------------------------------------------------------------------*/
   if( *pc_in == c_delim)
      pc_in++;
    1bca:	8a 01       	movw	r16, r20
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <consoleIoctl+0x126>
    * carriage return, or NULL char.
    *------------------------------------------------------------------------*/
   while( (*pc_in != CONSOLE_RETURN_CHAR)
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
    1bce:	98 17       	cp	r25, r24
    1bd0:	3c f3       	brlt	.-50     	; 0x1ba0 <consoleIoctl+0xf4>

   /*------------------------------------------------------------------------*
    * Replace 'ending' character (either c_delim, '\n', '\0' or the character
    * at (c_maxSize) with null character).
    *------------------------------------------------------------------------*/
   pc_out[c_tokenSizeCount] = '\0';
    1bd2:	e9 2f       	mov	r30, r25
    1bd4:	ff 27       	eor	r31, r31
    1bd6:	e7 fd       	sbrc	r30, 7
    1bd8:	f0 95       	com	r31
    1bda:	e2 0f       	add	r30, r18
    1bdc:	f3 1f       	adc	r31, r19
    1bde:	10 82       	st	Z, r1

   c_tokenSizeCount++;
    1be0:	9f 5f       	subi	r25, 0xFF	; 255
    * Since we are extracting a token decrement *pc_maxSize by the number of
    * characters stored in pc_out. An addition 1 is subtracted for the
    * 'exit' character as well since its not included in the original s_count
    * value.
    *------------------------------------------------------------------------*/
   (*pc_bytesRemaining) = (*pc_bytesRemaining) - c_tokenSizeCount;
    1be2:	89 1b       	sub	r24, r25
      pc_nextLoc = drv_strTok( pc_nextLoc,
                               &ac_tok[(*pc_tokenCount)][0],
                               ' ',
                               &c_bytesRemaining,
                               &c_tokenSize);
      (*pc_tokenCount)++;
    1be4:	f6 01       	movw	r30, r12
    1be6:	20 81       	ld	r18, Z
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	20 83       	st	Z, r18
      if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)
    1bec:	28 30       	cpi	r18, 0x08	; 8
    1bee:	78 f4       	brcc	.+30     	; 0x1c0e <consoleIoctl+0x162>
         /*------------------------------------------------------------------*
          * Error too many tokens....
          *------------------------------------------------------------------*/
         return CONSOLE_TOO_MANY_TOKENS;
      }/*End if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)*/
      else if( c_tokenSize > CONSOLE_MAX_TOKEN_SIZE)
    1bf0:	91 31       	cpi	r25, 0x11	; 17
    1bf2:	7c f4       	brge	.+30     	; 0x1c12 <consoleIoctl+0x166>
      }

      if( t_err < 0)
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
    1bf4:	d8 01       	movw	r26, r16
    1bf6:	9c 91       	ld	r25, X
   && (c_bytesRemaining > 0));
    1bf8:	9a 30       	cpi	r25, 0x0A	; 10
    1bfa:	69 f0       	breq	.+26     	; 0x1c16 <consoleIoctl+0x16a>
      }

      if( t_err < 0)
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
    1bfc:	99 23       	and	r25, r25
    1bfe:	59 f0       	breq	.+22     	; 0x1c16 <consoleIoctl+0x16a>
    1c00:	01 15       	cp	r16, r1
    1c02:	11 05       	cpc	r17, r1
    1c04:	41 f0       	breq	.+16     	; 0x1c16 <consoleIoctl+0x16a>
   && (c_bytesRemaining > 0));
    1c06:	18 16       	cp	r1, r24
    1c08:	0c f4       	brge	.+2      	; 0x1c0c <consoleIoctl+0x160>
    1c0a:	bc cf       	rjmp	.-136    	; 0x1b84 <consoleIoctl+0xd8>
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <consoleIoctl+0x16a>
      if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)
      {
         /*------------------------------------------------------------------*
          * Error too many tokens....
          *------------------------------------------------------------------*/
         return CONSOLE_TOO_MANY_TOKENS;
    1c0e:	8a ef       	ldi	r24, 0xFA	; 250
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <consoleIoctl+0x16c>
      else if( c_tokenSize > CONSOLE_MAX_TOKEN_SIZE)
      {
         /*------------------------------------------------------------------*
          * Error token too large....
          *------------------------------------------------------------------*/
         return CONSOLE_TOKEN_TOO_LARGE;
    1c12:	8b ef       	ldi	r24, 0xFB	; 251
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <consoleIoctl+0x16c>
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
   && (c_bytesRemaining > 0));

   return CONSOLE_PASSED;
    1c16:	80 e0       	ldi	r24, 0x00	; 0
         /*------------------------------------------------------------------*
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
    1c18:	c8 2e       	mov	r12, r24
    1c1a:	dd 24       	eor	r13, r13
    1c1c:	c7 fc       	sbrc	r12, 7
    1c1e:	d0 94       	com	r13
    1c20:	ed 2c       	mov	r14, r13
    1c22:	fd 2c       	mov	r15, r13
         /*------------------------------------------------------------------*
          * In order to treat the buffer as if its linear (when using the ioctl
          * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers
          * each time we read its contents.
          *------------------------------------------------------------------*/
         ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1c24:	80 91 50 24 	lds	r24, 0x2450
    1c28:	90 91 51 24 	lds	r25, 0x2451
    1c2c:	0e 94 6d a2 	call	0x144da	; 0x144da <ult_resetBuffer>

         hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1c30:	80 91 53 24 	lds	r24, 0x2453
    1c34:	90 91 54 24 	lds	r25, 0x2454
    1c38:	0e 94 55 56 	call	0xacaa	; 0xacaa <hal_enableUartRxInt>

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_rxMutex);
    1c3c:	80 91 4a 24 	lds	r24, 0x244A
    1c40:	90 91 4b 24 	lds	r25, 0x244B
    1c44:	ed c0       	rjmp	.+474    	; 0x1e20 <consoleIoctl+0x374>
      case CONSOLE_DISPLAY_PROMPT:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1c46:	80 91 4c 24 	lds	r24, 0x244C
    1c4a:	90 91 4d 24 	lds	r25, 0x244D
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Set the background color and repaint the entire screen
          *------------------------------------------------------------------*/
         s_size = sprintf( (char *)ac_buff, 
    1c54:	ed b7       	in	r30, 0x3d	; 61
    1c56:	fe b7       	in	r31, 0x3e	; 62
    1c58:	3a 97       	sbiw	r30, 0x0a	; 10
    1c5a:	ed bf       	out	0x3d, r30	; 61
    1c5c:	fe bf       	out	0x3e, r31	; 62
    1c5e:	31 96       	adiw	r30, 0x01	; 1
    1c60:	8e 01       	movw	r16, r28
    1c62:	0f 5f       	subi	r16, 0xFF	; 255
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	ad b7       	in	r26, 0x3d	; 61
    1c68:	be b7       	in	r27, 0x3e	; 62
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	0d 93       	st	X+, r16
    1c6e:	1c 93       	st	X, r17
    1c70:	12 97       	sbiw	r26, 0x02	; 2
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e2       	ldi	r25, 0x20	; 32
    1c76:	82 83       	std	Z+2, r24	; 0x02
    1c78:	93 83       	std	Z+3, r25	; 0x03
    1c7a:	80 91 56 24 	lds	r24, 0x2456
    1c7e:	99 27       	eor	r25, r25
    1c80:	87 fd       	sbrc	r24, 7
    1c82:	90 95       	com	r25
    1c84:	84 83       	std	Z+4, r24	; 0x04
    1c86:	95 83       	std	Z+5, r25	; 0x05
    1c88:	88 e5       	ldi	r24, 0x58	; 88
    1c8a:	94 e2       	ldi	r25, 0x24	; 36
    1c8c:	86 83       	std	Z+6, r24	; 0x06
    1c8e:	97 83       	std	Z+7, r25	; 0x07
    1c90:	80 91 57 24 	lds	r24, 0x2457
    1c94:	99 27       	eor	r25, r25
    1c96:	87 fd       	sbrc	r24, 7
    1c98:	90 95       	com	r25
    1c9a:	80 87       	std	Z+8, r24	; 0x08
    1c9c:	91 87       	std	Z+9, r25	; 0x09
    1c9e:	0e 94 a4 b7 	call	0x16f48	; 0x16f48 <sprintf>
    1ca2:	ac 01       	movw	r20, r24
                           "\e[1;3%cm[%s]#\e[1;3%cm ",
                           gt_consoleDev.c_cmdPromptColor,
                           gt_consoleDev.ac_dirName,
                           gt_consoleDev.c_fgColor);

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1ca4:	80 91 53 24 	lds	r24, 0x2453
    1ca8:	90 91 54 24 	lds	r25, 0x2454
    1cac:	ed b7       	in	r30, 0x3d	; 61
    1cae:	fe b7       	in	r31, 0x3e	; 62
    1cb0:	3a 96       	adiw	r30, 0x0a	; 10
    1cb2:	ed bf       	out	0x3d, r30	; 61
    1cb4:	fe bf       	out	0x3e, r31	; 62
    1cb6:	b8 01       	movw	r22, r16
    1cb8:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <hal_uartWriteBlock>
                             s_size);

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    1cbc:	80 91 4c 24 	lds	r24, 0x244C
    1cc0:	90 91 4d 24 	lds	r25, 0x244D
    1cc4:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
   int32_t i_return = (int32_t)CONSOLE_PASSED;
    1cc8:	cc 24       	eor	r12, r12
    1cca:	dd 24       	eor	r13, r13
    1ccc:	76 01       	movw	r14, r12
         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);

      break;/*End case CONSOLE_DISPLAY_PROMPT:*/
    1cce:	bc c0       	rjmp	.+376    	; 0x1e48 <consoleIoctl+0x39c>
      case CONSOLE_SET_PROMPT:
      {
         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1cd0:	80 91 4c 24 	lds	r24, 0x244C
    1cd4:	90 91 4d 24 	lds	r25, 0x244D
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         char *pc_name = (char *)((uint16_t)i_arguments);
         sprintf( gt_consoleDev.ac_dirName, "%s", pc_name);
    1cde:	88 e5       	ldi	r24, 0x58	; 88
    1ce0:	94 e2       	ldi	r25, 0x24	; 36
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	0e 94 28 b7 	call	0x16e50	; 0x16e50 <strcpy>
    1ce8:	e9 cf       	rjmp	.-46     	; 0x1cbc <consoleIoctl+0x210>
      case CONSOLE_RESET_TERMINAL:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1cea:	80 91 4c 24 	lds	r24, 0x244C
    1cee:	90 91 4d 24 	lds	r25, 0x244D
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Reset the terminal to its default settings...
          *------------------------------------------------------------------*/
         s_size = sprintf_P((char *)ac_buff, PSTR("\ec"));
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <consoleIoctl+0x24e>
    1cfa:	0f 92       	push	r0
    1cfc:	8e 01       	movw	r16, r28
    1cfe:	0f 5f       	subi	r16, 0xFF	; 255
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	ad b7       	in	r26, 0x3d	; 61
    1d04:	be b7       	in	r27, 0x3e	; 62
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	0d 93       	st	X+, r16
    1d0a:	1c 93       	st	X, r17
    1d0c:	12 97       	sbiw	r26, 0x02	; 2
    1d0e:	84 ef       	ldi	r24, 0xF4	; 244
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	13 96       	adiw	r26, 0x03	; 3
    1d14:	8d 93       	st	X+, r24
    1d16:	9c 93       	st	X, r25
    1d18:	14 97       	sbiw	r26, 0x04	; 4
    1d1a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    1d1e:	ac 01       	movw	r20, r24

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1d20:	80 91 53 24 	lds	r24, 0x2453
    1d24:	90 91 54 24 	lds	r25, 0x2454
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	c2 cf       	rjmp	.-124    	; 0x1cb6 <consoleIoctl+0x20a>
      case CONSOLE_SET_BG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1d32:	80 91 4c 24 	lds	r24, 0x244C
    1d36:	90 91 4d 24 	lds	r25, 0x244D
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1d40:	d7 01       	movw	r26, r14
    1d42:	c6 01       	movw	r24, r12
    1d44:	c0 97       	sbiw	r24, 0x30	; 48
    1d46:	a1 09       	sbc	r26, r1
    1d48:	b1 09       	sbc	r27, r1
    1d4a:	88 30       	cpi	r24, 0x08	; 8
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	a1 05       	cpc	r26, r1
    1d50:	b1 05       	cpc	r27, r1
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <consoleIoctl+0x2aa>
    1d54:	59 c0       	rjmp	.+178    	; 0x1e08 <consoleIoctl+0x35c>
         else
         {
            /*---------------------------------------------------------------*
             * Set the background color and repaint the entire screen
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <consoleIoctl+0x2ac>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <consoleIoctl+0x2ae>
    1d5a:	ed b7       	in	r30, 0x3d	; 61
    1d5c:	fe b7       	in	r31, 0x3e	; 62
    1d5e:	31 96       	adiw	r30, 0x01	; 1
    1d60:	8e 01       	movw	r16, r28
    1d62:	0f 5f       	subi	r16, 0xFF	; 255
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	ad b7       	in	r26, 0x3d	; 61
    1d68:	be b7       	in	r27, 0x3e	; 62
    1d6a:	11 96       	adiw	r26, 0x01	; 1
    1d6c:	0d 93       	st	X+, r16
    1d6e:	1c 93       	st	X, r17
    1d70:	12 97       	sbiw	r26, 0x02	; 2
    1d72:	87 e1       	ldi	r24, 0x17	; 23
    1d74:	90 e2       	ldi	r25, 0x20	; 32
    1d76:	31 c0       	rjmp	.+98     	; 0x1dda <consoleIoctl+0x32e>

      break;/*End case CONSOLE_SET_BG_COLOR:*/

      case CONSOLE_SET_PROMPT_COLOR:

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1d78:	da 01       	movw	r26, r20
    1d7a:	c9 01       	movw	r24, r18
    1d7c:	c0 97       	sbiw	r24, 0x30	; 48
    1d7e:	a1 09       	sbc	r26, r1
    1d80:	b1 09       	sbc	r27, r1
    1d82:	88 30       	cpi	r24, 0x08	; 8
    1d84:	91 05       	cpc	r25, r1
    1d86:	a1 05       	cpc	r26, r1
    1d88:	b1 05       	cpc	r27, r1
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <consoleIoctl+0x2e2>
    1d8c:	55 c0       	rjmp	.+170    	; 0x1e38 <consoleIoctl+0x38c>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_cmdPromptColor = (int8_t)i_arguments;
    1d8e:	20 93 56 24 	sts	0x2456, r18
    1d92:	9a cf       	rjmp	.-204    	; 0x1cc8 <consoleIoctl+0x21c>
      case CONSOLE_SET_FG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1d94:	80 91 4c 24 	lds	r24, 0x244C
    1d98:	90 91 4d 24 	lds	r25, 0x244D
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1da2:	d7 01       	movw	r26, r14
    1da4:	c6 01       	movw	r24, r12
    1da6:	c0 97       	sbiw	r24, 0x30	; 48
    1da8:	a1 09       	sbc	r26, r1
    1daa:	b1 09       	sbc	r27, r1
    1dac:	88 30       	cpi	r24, 0x08	; 8
    1dae:	91 05       	cpc	r25, r1
    1db0:	a1 05       	cpc	r26, r1
    1db2:	b1 05       	cpc	r27, r1
    1db4:	48 f5       	brcc	.+82     	; 0x1e08 <consoleIoctl+0x35c>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_fgColor = (int8_t)i_arguments;
    1db6:	c0 92 57 24 	sts	0x2457, r12
            /*---------------------------------------------------------------*
             * Set the foreground color...
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <consoleIoctl+0x310>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <consoleIoctl+0x312>
    1dbe:	ed b7       	in	r30, 0x3d	; 61
    1dc0:	fe b7       	in	r31, 0x3e	; 62
    1dc2:	31 96       	adiw	r30, 0x01	; 1
    1dc4:	8e 01       	movw	r16, r28
    1dc6:	0f 5f       	subi	r16, 0xFF	; 255
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	ad b7       	in	r26, 0x3d	; 61
    1dcc:	be b7       	in	r27, 0x3e	; 62
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	0d 93       	st	X+, r16
    1dd2:	1c 93       	st	X, r17
    1dd4:	12 97       	sbiw	r26, 0x02	; 2
    1dd6:	82 e2       	ldi	r24, 0x22	; 34
    1dd8:	90 e2       	ldi	r25, 0x20	; 32
    1dda:	82 83       	std	Z+2, r24	; 0x02
    1ddc:	93 83       	std	Z+3, r25	; 0x03
    1dde:	c4 82       	std	Z+4, r12	; 0x04
    1de0:	15 82       	std	Z+5, r1	; 0x05
    1de2:	0e 94 a4 b7 	call	0x16f48	; 0x16f48 <sprintf>
    1de6:	ac 01       	movw	r20, r24
                              "\e[1;3%cm", 
                              (char)i_arguments);

            hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1de8:	80 91 53 24 	lds	r24, 0x2453
    1dec:	90 91 54 24 	lds	r25, 0x2454
    1df0:	ed b7       	in	r30, 0x3d	; 61
    1df2:	fe b7       	in	r31, 0x3e	; 62
    1df4:	36 96       	adiw	r30, 0x06	; 6
    1df6:	ed bf       	out	0x3d, r30	; 61
    1df8:	fe bf       	out	0x3e, r31	; 62
    1dfa:	b8 01       	movw	r22, r16
    1dfc:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <hal_uartWriteBlock>

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
   int32_t i_return = (int32_t)CONSOLE_PASSED;
    1e00:	cc 24       	eor	r12, r12
    1e02:	dd 24       	eor	r13, r13
    1e04:	76 01       	movw	r14, r12
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <consoleIoctl+0x36c>
         arb_wait( gt_consoleDev.t_txMutex,
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
    1e08:	29 ef       	ldi	r18, 0xF9	; 249
    1e0a:	c2 2e       	mov	r12, r18
    1e0c:	2f ef       	ldi	r18, 0xFF	; 255
    1e0e:	d2 2e       	mov	r13, r18
    1e10:	2f ef       	ldi	r18, 0xFF	; 255
    1e12:	e2 2e       	mov	r14, r18
    1e14:	2f ef       	ldi	r18, 0xFF	; 255
    1e16:	f2 2e       	mov	r15, r18
         }

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    1e18:	80 91 4c 24 	lds	r24, 0x244C
    1e1c:	90 91 4d 24 	lds	r25, 0x244D
    1e20:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

      break;/*End case CONSOLE_SET_FG_COLOR:*/
    1e24:	11 c0       	rjmp	.+34     	; 0x1e48 <consoleIoctl+0x39c>

      default:

         i_return = (int32_t)CONSOLE_INVALID_CMD;
    1e26:	9d ef       	ldi	r25, 0xFD	; 253
    1e28:	c9 2e       	mov	r12, r25
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	d9 2e       	mov	r13, r25
    1e2e:	9f ef       	ldi	r25, 0xFF	; 255
    1e30:	e9 2e       	mov	r14, r25
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	f9 2e       	mov	r15, r25
    1e36:	08 c0       	rjmp	.+16     	; 0x1e48 <consoleIoctl+0x39c>

      case CONSOLE_SET_PROMPT_COLOR:

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
    1e38:	89 ef       	ldi	r24, 0xF9	; 249
    1e3a:	c8 2e       	mov	r12, r24
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	d8 2e       	mov	r13, r24
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	e8 2e       	mov	r14, r24
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	f8 2e       	mov	r15, r24

   }/*End switch( (t_consoleCmd)s_command)*/

   return i_return;

}/*End consoleIoctl*/
    1e48:	b6 01       	movw	r22, r12
    1e4a:	c7 01       	movw	r24, r14
    1e4c:	aa 96       	adiw	r28, 0x2a	; 42
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	08 95       	ret

00001e64 <rxComplete>:
   return CONSOLE_PASSED;

}/*End usr_parseMessage*/

static void rxComplete( uint16_t s_byte)
{
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	ec 01       	movw	r28, r24
   uint16_t s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    1e6e:	80 91 50 24 	lds	r24, 0x2450
    1e72:	90 91 51 24 	lds	r25, 0x2451
    1e76:	0e 94 f1 a0 	call	0x141e2	; 0x141e2 <utl_getBufferFullLevel>
    1e7a:	8c 01       	movw	r16, r24
   uint16_t s_bufferSize  = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    1e7c:	80 91 50 24 	lds	r24, 0x2450
    1e80:	90 91 51 24 	lds	r25, 0x2451
    1e84:	0e 94 05 a1 	call	0x1420a	; 0x1420a <utl_getBufferSize>

   gt_consoleDev.b_rxActive = true;
    1e88:	21 e0       	ldi	r18, 0x01	; 1
    1e8a:	20 93 55 24 	sts	0x2455, r18

   /*------------------------------------------------------------------------*
    * If a backspace has been entered, erase the bytes in the buffer until
    * there is no longer any more data available.
    *------------------------------------------------------------------------*/
   if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))
    1e8e:	cf 37       	cpi	r28, 0x7F	; 127
    1e90:	d1 05       	cpc	r29, r1
    1e92:	89 f4       	brne	.+34     	; 0x1eb6 <rxComplete+0x52>
    1e94:	01 15       	cp	r16, r1
    1e96:	11 05       	cpc	r17, r1
    1e98:	a9 f1       	breq	.+106    	; 0x1f04 <rxComplete+0xa0>
   {
      /*---------------------------------------------------------------------*
       * Echo back received byte- in this case the backspace character.
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    1e9a:	80 91 53 24 	lds	r24, 0x2453
    1e9e:	90 91 54 24 	lds	r25, 0x2454
    1ea2:	6f e7       	ldi	r22, 0x7F	; 127
    1ea4:	0e 94 b8 56 	call	0xad70	; 0xad70 <hal_uartWriteByte>
                         s_byte);

      /*---------------------------------------------------------------------*
       * Remove the last byte in the buffer...
       *---------------------------------------------------------------------*/
      utl_buffEraseTailByte( gt_consoleDev.t_rxBuffer);
    1ea8:	80 91 50 24 	lds	r24, 0x2450
    1eac:	90 91 51 24 	lds	r25, 0x2451
    1eb0:	0e 94 ea a1 	call	0x143d4	; 0x143d4 <utl_buffEraseTailByte>
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <rxComplete+0xd0>

   }/*End if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))*/
   else if( s_byte == CONSOLE_RETURN_CHAR)
    1eb6:	cd 30       	cpi	r28, 0x0D	; 13
    1eb8:	d1 05       	cpc	r29, r1
    1eba:	21 f5       	brne	.+72     	; 0x1f04 <rxComplete+0xa0>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    1ebc:	80 91 53 24 	lds	r24, 0x2453
    1ec0:	90 91 54 24 	lds	r25, 0x2454
    1ec4:	6d e0       	ldi	r22, 0x0D	; 13
    1ec6:	0e 94 b8 56 	call	0xad70	; 0xad70 <hal_uartWriteByte>
                         s_byte);

      /*------------------------------------------------------------------*
       * Write new line character out uart interface
       *------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    1eca:	80 91 53 24 	lds	r24, 0x2453
    1ece:	90 91 54 24 	lds	r25, 0x2454
    1ed2:	6a e0       	ldi	r22, 0x0A	; 10
    1ed4:	0e 94 b8 56 	call	0xad70	; 0xad70 <hal_uartWriteByte>
                         '\n');

      gt_consoleDev.b_rxActive = false;
    1ed8:	10 92 55 24 	sts	0x2455, r1

      /*------------------------------------------------------------------*
       * Disable the receive interrupt until the data has been handled.
       *------------------------------------------------------------------*/
      hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    1edc:	80 91 53 24 	lds	r24, 0x2453
    1ee0:	90 91 54 24 	lds	r25, 0x2454
    1ee4:	0e 94 8b 56 	call	0xad16	; 0xad16 <hal_disableUartRxInt>

      /*------------------------------------------------------------------*
       * Add a the NULL character to the end of the buffer - this is for
       * data parsing purposes only.
       *------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    1ee8:	80 91 50 24 	lds	r24, 0x2450
    1eec:	90 91 51 24 	lds	r25, 0x2451
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	0e 94 2d a1 	call	0x1425a	; 0x1425a <utl_writeByte>

      /*------------------------------------------------------------------*
       * Signal any waiting threads that a carriage return has been
       * received.
       *------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxBlockingSem);
    1ef6:	80 91 4e 24 	lds	r24, 0x244E
    1efa:	90 91 4f 24 	lds	r25, 0x244F
    1efe:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
    1f02:	18 c0       	rjmp	.+48     	; 0x1f34 <rxComplete+0xd0>


   }/*End else if( c_byte == CONSOLE_BACKSPACE_CHAR)*/
   else if( (s_bufferLevel < (s_bufferSize - 1)) && (s_byte !=
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	08 17       	cp	r16, r24
    1f08:	19 07       	cpc	r17, r25
    1f0a:	a0 f4       	brcc	.+40     	; 0x1f34 <rxComplete+0xd0>
    1f0c:	cf 37       	cpi	r28, 0x7F	; 127
    1f0e:	d1 05       	cpc	r29, r1
    1f10:	89 f0       	breq	.+34     	; 0x1f34 <rxComplete+0xd0>
   CONSOLE_BACKSPACE_CHAR) && (s_byte != 27)) /*Leave room for NULL char*/
    1f12:	cb 31       	cpi	r28, 0x1B	; 27
    1f14:	d1 05       	cpc	r29, r1
    1f16:	71 f0       	breq	.+28     	; 0x1f34 <rxComplete+0xd0>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte....
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    1f18:	80 91 53 24 	lds	r24, 0x2453
    1f1c:	90 91 54 24 	lds	r25, 0x2454
    1f20:	6c 2f       	mov	r22, r28
    1f22:	0e 94 b8 56 	call	0xad70	; 0xad70 <hal_uartWriteByte>

      /*---------------------------------------------------------------------*
       * Fill RX buffer with received bytes until the buffer is full
       * leaving room for the insertion of the NULL character.
       *---------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    1f26:	80 91 50 24 	lds	r24, 0x2450
    1f2a:	90 91 51 24 	lds	r25, 0x2451
    1f2e:	6c 2f       	mov	r22, r28
    1f30:	0e 94 2d a1 	call	0x1425a	; 0x1425a <utl_writeByte>
                     s_byte);

   }

}/*End rxComplete*/
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <consoleRead>:
}/*End consoleOpen*/

static int16_t consoleRead( t_DEVHANDLE t_handle,
                            int8_t *pc_buff,
                            uint16_t s_size)
{
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	0f 92       	push	r0
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	6b 01       	movw	r12, r22
    1f5c:	7a 01       	movw	r14, r20
   int16_t s_bufferLevel = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    1f5e:	80 91 4a 24 	lds	r24, 0x244A
    1f62:	90 91 4b 24 	lds	r25, 0x244B
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Wait for data to be available in the RX buffer.
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxBlockingSem,
    1f6c:	80 91 4e 24 	lds	r24, 0x244E
    1f70:	90 91 4f 24 	lds	r25, 0x244F
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Level plus an extra NULL character.
    *------------------------------------------------------------------------*/
   s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    1f7a:	80 91 50 24 	lds	r24, 0x2450
    1f7e:	90 91 51 24 	lds	r25, 0x2451
    1f82:	0e 94 f1 a0 	call	0x141e2	; 0x141e2 <utl_getBufferFullLevel>
    1f86:	8c 01       	movw	r16, r24
   /*------------------------------------------------------------------------*
    * Can the user-space buffer hold all the data plus the NULL character?
    *------------------------------------------------------------------------*/
   if( s_bufferLevel > s_size)
   {
      ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1f88:	80 91 50 24 	lds	r24, 0x2450
    1f8c:	90 91 51 24 	lds	r25, 0x2451
   s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);

   /*------------------------------------------------------------------------*
    * Can the user-space buffer hold all the data plus the NULL character?
    *------------------------------------------------------------------------*/
   if( s_bufferLevel > s_size)
    1f90:	e0 16       	cp	r14, r16
    1f92:	f1 06       	cpc	r15, r17
    1f94:	88 f4       	brcc	.+34     	; 0x1fb8 <consoleRead+0x7a>
   {
      ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1f96:	0e 94 6d a2 	call	0x144da	; 0x144da <ult_resetBuffer>

      hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1f9a:	80 91 53 24 	lds	r24, 0x2453
    1f9e:	90 91 54 24 	lds	r25, 0x2454
    1fa2:	0e 94 55 56 	call	0xacaa	; 0xacaa <hal_enableUartRxInt>

      /*---------------------------------------------------------------------*
       * Release the lock
       *---------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxMutex);
    1fa6:	80 91 4a 24 	lds	r24, 0x244A
    1faa:	90 91 4b 24 	lds	r25, 0x244B
    1fae:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
    1fb2:	04 ef       	ldi	r16, 0xF4	; 244
    1fb4:	1f ef       	ldi	r17, 0xFF	; 255
    1fb6:	16 c0       	rjmp	.+44     	; 0x1fe4 <consoleRead+0xa6>
      return (int16_t)ARB_READ_ERROR;

   }/*End if( s_bufferLevel > s_size)*/

   utl_readBlock( gt_consoleDev.t_rxBuffer,
    1fb8:	b6 01       	movw	r22, r12
    1fba:	a8 01       	movw	r20, r16
    1fbc:	0e 94 14 a2 	call	0x14428	; 0x14428 <utl_readBlock>
   /*------------------------------------------------------------------------*
    * In order to treat the buffer as if its linear (when using the ioctl
    * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers each
    * time we read its contents.
    *------------------------------------------------------------------------*/
   ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1fc0:	80 91 50 24 	lds	r24, 0x2450
    1fc4:	90 91 51 24 	lds	r25, 0x2451
    1fc8:	0e 94 6d a2 	call	0x144da	; 0x144da <ult_resetBuffer>

   hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1fcc:	80 91 53 24 	lds	r24, 0x2453
    1fd0:	90 91 54 24 	lds	r25, 0x2454
    1fd4:	0e 94 55 56 	call	0xacaa	; 0xacaa <hal_enableUartRxInt>

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    1fd8:	80 91 4a 24 	lds	r24, 0x244A
    1fdc:	90 91 4b 24 	lds	r25, 0x244B
    1fe0:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return s_bufferLevel;

}/*End consoleRead*/
    1fe4:	c8 01       	movw	r24, r16
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	08 95       	ret

00001ffc <drv_consoleInit>:
   return t_err;

}/*End consoleClose*/

t_error drv_consoleInit( t_consoleSetup t_setup)
{
    1ffc:	af 92       	push	r10
    1ffe:	bf 92       	push	r11
    2000:	cf 92       	push	r12
    2002:	df 92       	push	r13
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	64 97       	sbiw	r28, 0x14	; 20
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	4f 87       	std	Y+15, r20	; 0x0f
    201c:	58 8b       	std	Y+16, r21	; 0x10
    201e:	69 8b       	std	Y+17, r22	; 0x11
    2020:	7a 8b       	std	Y+18, r23	; 0x12
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	9c 8b       	std	Y+20, r25	; 0x14
    * Global Inline functions
    *------------------------------------------------------------------------*/
   static inline t_deviceId __attribute__((always_inline))
   arb_createDevId( uint8_t c_major, uint8_t c_minor)
   {
      return( ((uint16_t)c_major << 8) | (uint16_t)c_minor);
    2026:	79 2f       	mov	r23, r25
   t_uartConfig t_uConf;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "consoleDevice0",
    2028:	8b e2       	ldi	r24, 0x2B	; 43
    202a:	90 e2       	ldi	r25, 0x20	; 32
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	4c e3       	ldi	r20, 0x3C	; 60
    2030:	50 e2       	ldi	r21, 0x20	; 32
    2032:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <arb_registerDevice>
    2036:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum, 0),
                               &gt_consoleDevOps);

   if( t_err < 0)
    2038:	87 fd       	sbrc	r24, 7
    203a:	b6 c0       	rjmp	.+364    	; 0x21a8 <drv_consoleInit+0x1ac>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxMutex = arb_semaphoreCreate( MUTEX);
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
    2042:	80 93 4a 24 	sts	0x244A, r24
    2046:	90 93 4b 24 	sts	0x244B, r25

   if( gt_consoleDev.t_rxMutex < 0)
    204a:	80 91 4a 24 	lds	r24, 0x244A
    204e:	90 91 4b 24 	lds	r25, 0x244B
    2052:	97 ff       	sbrs	r25, 7
    2054:	06 c0       	rjmp	.+12     	; 0x2062 <drv_consoleInit+0x66>
   {
      t_err = (t_error)gt_consoleDev.t_rxMutex;
    2056:	80 91 4a 24 	lds	r24, 0x244A
    205a:	90 91 4b 24 	lds	r25, 0x244B
    205e:	18 2f       	mov	r17, r24
      goto failed2;
    2060:	9f c0       	rjmp	.+318    	; 0x21a0 <drv_consoleInit+0x1a4>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. We will use this semaphore for
    * signaling the user-space program when the RX buffer has data.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBlockingSem = arb_semaphoreCreate( COUNTING);
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
    2068:	80 93 4e 24 	sts	0x244E, r24
    206c:	90 93 4f 24 	sts	0x244F, r25

   if( gt_consoleDev.t_rxBlockingSem < 0)
    2070:	80 91 4e 24 	lds	r24, 0x244E
    2074:	90 91 4f 24 	lds	r25, 0x244F
    2078:	97 ff       	sbrs	r25, 7
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <drv_consoleInit+0x8c>
   {
      t_err = (t_error)gt_consoleDev.t_rxBlockingSem;
    207c:	80 91 4e 24 	lds	r24, 0x244E
    2080:	90 91 4f 24 	lds	r25, 0x244F
    2084:	18 2f       	mov	r17, r24
      goto failed3;
    2086:	85 c0       	rjmp	.+266    	; 0x2192 <drv_consoleInit+0x196>
   }/*End if( gt_consoleDev.t_rxBlockingSem < 0)*/

   /*------------------------------------------------------------------------*
    * Grab handle to console UART
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_uHandle = hal_requestUartChannel( t_setup.c_uartId);
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	0e 94 90 58 	call	0xb120	; 0xb120 <hal_requestUartChannel>
    208e:	80 93 53 24 	sts	0x2453, r24
    2092:	90 93 54 24 	sts	0x2454, r25
   if( gt_consoleDev.t_uHandle < 0)
    2096:	80 91 53 24 	lds	r24, 0x2453
    209a:	90 91 54 24 	lds	r25, 0x2454
    209e:	97 fd       	sbrc	r25, 7
    20a0:	70 c0       	rjmp	.+224    	; 0x2182 <drv_consoleInit+0x186>
   {
      t_err = ARB_HAL_ERROR;
      goto failed4;
   }

   t_uConf.t_comMd = ASYNC;
    20a2:	19 82       	std	Y+1, r1	; 0x01
   t_uConf.t_charSz = CHAR_8BIT;
    20a4:	83 e0       	ldi	r24, 0x03	; 3
    20a6:	8a 83       	std	Y+2, r24	; 0x02
   t_uConf.t_parityMd = NO_PARITY;
    20a8:	1b 82       	std	Y+3, r1	; 0x03
   t_uConf.t_stopBitMd = ONE_STOP_BIT;
    20aa:	1c 82       	std	Y+4, r1	; 0x04
   t_uConf.i_baudRate = t_setup.i_baudRate;
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	98 89       	ldd	r25, Y+16	; 0x10
    20b0:	a9 89       	ldd	r26, Y+17	; 0x11
    20b2:	ba 89       	ldd	r27, Y+18	; 0x12
    20b4:	8d 83       	std	Y+5, r24	; 0x05
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	af 83       	std	Y+7, r26	; 0x07
    20ba:	b8 87       	std	Y+8, r27	; 0x08
   t_uConf.b_enRxDma = false;
    20bc:	1a 86       	std	Y+10, r1	; 0x0a
   t_uConf.b_enTxDma = false;
    20be:	19 86       	std	Y+9, r1	; 0x09
   t_uConf.pf_rxCallBack = &rxComplete;
    20c0:	82 e3       	ldi	r24, 0x32	; 50
    20c2:	9f e0       	ldi	r25, 0x0F	; 15
    20c4:	8b 87       	std	Y+11, r24	; 0x0b
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
   /*------------------------------------------------------------------------*
    * By setting the tx call-back to NULL, all data transfers over the uart
    * are performed "in-place".
    *------------------------------------------------------------------------*/
   t_uConf.pf_txCallBack = NULL;
    20c8:	1d 86       	std	Y+13, r1	; 0x0d
    20ca:	1e 86       	std	Y+14, r1	; 0x0e

   /*------------------------------------------------------------------------*
    * Configure console UART
    *------------------------------------------------------------------------*/
   if( hal_configureUartChannel( gt_consoleDev.t_uHandle,
    20cc:	80 91 53 24 	lds	r24, 0x2453
    20d0:	90 91 54 24 	lds	r25, 0x2454
    20d4:	aa 24       	eor	r10, r10
    20d6:	63 e0       	ldi	r22, 0x03	; 3
    20d8:	b6 2e       	mov	r11, r22
    20da:	cc 24       	eor	r12, r12
    20dc:	dd 24       	eor	r13, r13
    20de:	ed 80       	ldd	r14, Y+5	; 0x05
    20e0:	fe 80       	ldd	r15, Y+6	; 0x06
    20e2:	0f 81       	ldd	r16, Y+7	; 0x07
    20e4:	18 85       	ldd	r17, Y+8	; 0x08
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    20ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    20ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    20f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    20f2:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <hal_configureUartChannel>
    20f6:	87 fd       	sbrc	r24, 7
    20f8:	39 c0       	rjmp	.+114    	; 0x216c <drv_consoleInit+0x170>
   /*------------------------------------------------------------------------*
    * Allocate RX buffer of size = A*B1, where A = the max number of
    * possible tokens, B = the size of each token including a terminating
    * character, and 1 byte for the character that ends the string.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBuffer = utl_createBuffer( CONSOLE_MAX_TOKENS*
    20fa:	81 e7       	ldi	r24, 0x71	; 113
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 85 a2 	call	0x1450a	; 0x1450a <utl_createBuffer>
    2102:	80 93 50 24 	sts	0x2450, r24
    2106:	90 93 51 24 	sts	0x2451, r25
   CONSOLE_MAX_TOKEN_SIZE + 1);
   if( gt_consoleDev.t_rxBuffer < 0)
    210a:	80 91 50 24 	lds	r24, 0x2450
    210e:	90 91 51 24 	lds	r25, 0x2451
    2112:	97 fd       	sbrc	r25, 7
    2114:	2d c0       	rjmp	.+90     	; 0x2170 <drv_consoleInit+0x174>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_txMutex = arb_semaphoreCreate( MUTEX);
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
    211c:	80 93 4c 24 	sts	0x244C, r24
    2120:	90 93 4d 24 	sts	0x244D, r25

   if( gt_consoleDev.t_txMutex < 0)
    2124:	80 91 4c 24 	lds	r24, 0x244C
    2128:	90 91 4d 24 	lds	r25, 0x244D
    212c:	97 ff       	sbrs	r25, 7
    212e:	0c c0       	rjmp	.+24     	; 0x2148 <drv_consoleInit+0x14c>
   {
      t_err = (t_error)gt_consoleDev.t_txMutex;
    2130:	80 91 4c 24 	lds	r24, 0x244C
    2134:	90 91 4d 24 	lds	r25, 0x244D
    2138:	18 2f       	mov	r17, r24

   return ARB_PASSED;

failed6:

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);
    213a:	80 91 50 24 	lds	r24, 0x2450
    213e:	90 91 51 24 	lds	r25, 0x2451
    2142:	0e 94 d4 a2 	call	0x145a8	; 0x145a8 <utl_destroyBuffer>
    2146:	15 c0       	rjmp	.+42     	; 0x2172 <drv_consoleInit+0x176>
   }/*End if( gt_consoleDev.t_txMutex < 0)*/

   /*------------------------------------------------------------------------*
    * We don't have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers = 0;
    2148:	10 92 52 24 	sts	0x2452, r1
   /*------------------------------------------------------------------------*
    * This variable is used as a means of blocking the TX register empty
    * interrupt from sending a byte of data out of the uart interface while
    * the driver is currently receiving data over the user interface.
    *------------------------------------------------------------------------*/
   gt_consoleDev.b_rxActive = false;
    214c:	10 92 55 24 	sts	0x2455, r1

   /*------------------------------------------------------------------------*
    * Set the default colors...
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_cmdPromptColor = CONSOLE_GREEN;
    2150:	82 e3       	ldi	r24, 0x32	; 50
    2152:	80 93 56 24 	sts	0x2456, r24
   gt_consoleDev.c_fgColor = CONSOLE_WHITE;
    2156:	87 e3       	ldi	r24, 0x37	; 55
    2158:	80 93 57 24 	sts	0x2457, r24

   /*------------------------------------------------------------------------*
    * Set the default prompt working directory.
    *------------------------------------------------------------------------*/
   sprintf( gt_consoleDev.ac_dirName, "/");
    215c:	88 e5       	ldi	r24, 0x58	; 88
    215e:	94 e2       	ldi	r25, 0x24	; 36
    2160:	6a e3       	ldi	r22, 0x3A	; 58
    2162:	70 e2       	ldi	r23, 0x20	; 32
    2164:	0e 94 28 b7 	call	0x16e50	; 0x16e50 <strcpy>

   return ARB_PASSED;
    2168:	10 e0       	ldi	r17, 0x00	; 0
    216a:	1e c0       	rjmp	.+60     	; 0x21a8 <drv_consoleInit+0x1ac>
    * Configure console UART
    *------------------------------------------------------------------------*/
   if( hal_configureUartChannel( gt_consoleDev.t_uHandle,
                                 t_uConf) < 0)
   {
      t_err = ARB_HAL_ERROR;
    216c:	16 ef       	ldi	r17, 0xF6	; 246
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <drv_consoleInit+0x176>
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBuffer = utl_createBuffer( CONSOLE_MAX_TOKENS*
   CONSOLE_MAX_TOKEN_SIZE + 1);
   if( gt_consoleDev.t_rxBuffer < 0)
   {
      t_err = ARB_OUT_OF_HEAP;
    2170:	1f ef       	ldi	r17, 0xFF	; 255

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);

failed5:

   hal_releaseUartChannel( gt_consoleDev.t_uHandle);
    2172:	20 91 53 24 	lds	r18, 0x2453
    2176:	30 91 54 24 	lds	r19, 0x2454
    217a:	c9 01       	movw	r24, r18
    217c:	0e 94 f5 59 	call	0xb3ea	; 0xb3ea <hal_releaseUartChannel>
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <drv_consoleInit+0x188>
    * Grab handle to console UART
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_uHandle = hal_requestUartChannel( t_setup.c_uartId);
   if( gt_consoleDev.t_uHandle < 0)
   {
      t_err = ARB_HAL_ERROR;
    2182:	16 ef       	ldi	r17, 0xF6	; 246

   hal_releaseUartChannel( gt_consoleDev.t_uHandle);

failed4:

   arb_semaphoreDestroy( gt_consoleDev.t_rxBlockingSem);
    2184:	20 91 4e 24 	lds	r18, 0x244E
    2188:	30 91 4f 24 	lds	r19, 0x244F
    218c:	c9 01       	movw	r24, r18
    218e:	0e 94 56 99 	call	0x132ac	; 0x132ac <arb_semaphoreDestroy>

failed3:

   arb_semaphoreDestroy( gt_consoleDev.t_rxMutex);
    2192:	20 91 4a 24 	lds	r18, 0x244A
    2196:	30 91 4b 24 	lds	r19, 0x244B
    219a:	c9 01       	movw	r24, r18
    219c:	0e 94 56 99 	call	0x132ac	; 0x132ac <arb_semaphoreDestroy>

failed2:

   arb_destroyDevice( "consoleDevice0");
    21a0:	8b e2       	ldi	r24, 0x2B	; 43
    21a2:	90 e2       	ldi	r25, 0x20	; 32
    21a4:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <arb_destroyDevice>

failed1:

   return t_err;

}/*End drv_consoleInit*/
    21a8:	81 2f       	mov	r24, r17
    21aa:	64 96       	adiw	r28, 0x14	; 20
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	bf 90       	pop	r11
    21c2:	af 90       	pop	r10
    21c4:	08 95       	ret

000021c6 <sdClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_error sdClose( t_DEVHANDLE t_dev)
{
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	0f 92       	push	r0
    21d0:	0f 92       	push	r0
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    21da:	09 81       	ldd	r16, Y+1	; 0x01
    21dc:	1a 81       	ldd	r17, Y+2	; 0x02
   bool b_status;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    21de:	80 91 68 24 	lds	r24, 0x2468
    21e2:	90 91 69 24 	lds	r25, 0x2469
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   gt_sdDev.c_numUsers--;
    21ec:	80 91 6c 24 	lds	r24, 0x246C
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	80 93 6c 24 	sts	0x246C, r24

   b_status = sd_close( pt_dev->pv_privateData);
    21f6:	f8 01       	movw	r30, r16
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	0e 94 ca 78 	call	0xf194	; 0xf194 <sd_close>
   if( b_status == true)
    2200:	88 23       	and	r24, r24
    2202:	19 f0       	breq	.+6      	; 0x220a <sdClose+0x44>
   {
      pt_dev->pv_privateData = NULL;
    2204:	f8 01       	movw	r30, r16
    2206:	12 82       	std	Z+2, r1	; 0x02
    2208:	13 82       	std	Z+3, r1	; 0x03
   }

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    220a:	80 91 68 24 	lds	r24, 0x2468
    220e:	90 91 69 24 	lds	r25, 0x2469
    2212:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return ARB_PASSED;

}/*End sdClose*/
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	08 95       	ret

00002226 <sdIoctl>:
}/*End sdOpen*/

int32_t sdIoctl( t_DEVHANDLE t_dev,
                 uint16_t s_command,
                 int32_t  i_arguments)
{
    2226:	8f 92       	push	r8
    2228:	9f 92       	push	r9
    222a:	af 92       	push	r10
    222c:	bf 92       	push	r11
    222e:	cf 92       	push	r12
    2230:	df 92       	push	r13
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	1f 93       	push	r17
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	0f 92       	push	r0
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	16 2f       	mov	r17, r22
    224a:	49 01       	movw	r8, r18
    224c:	5a 01       	movw	r10, r20
   int32_t i_return = (int32_t)ARB_PASSED;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    224e:	c9 80       	ldd	r12, Y+1	; 0x01
    2250:	da 80       	ldd	r13, Y+2	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    2252:	80 91 68 24 	lds	r24, 0x2468
    2256:	90 91 69 24 	lds	r25, 0x2469
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   switch( (t_sdCmd)s_command)
    2260:	15 30       	cpi	r17, 0x05	; 5
    2262:	79 f1       	breq	.+94     	; 0x22c2 <sdIoctl+0x9c>
    2264:	16 30       	cpi	r17, 0x06	; 6
    2266:	88 f4       	brcc	.+34     	; 0x228a <sdIoctl+0x64>
    2268:	12 30       	cpi	r17, 0x02	; 2
    226a:	09 f4       	brne	.+2      	; 0x226e <sdIoctl+0x48>
    226c:	48 c0       	rjmp	.+144    	; 0x22fe <sdIoctl+0xd8>
    226e:	13 30       	cpi	r17, 0x03	; 3
    2270:	30 f4       	brcc	.+12     	; 0x227e <sdIoctl+0x58>
    2272:	11 23       	and	r17, r17
    2274:	d1 f0       	breq	.+52     	; 0x22aa <sdIoctl+0x84>
    2276:	11 30       	cpi	r17, 0x01	; 1
    2278:	09 f0       	breq	.+2      	; 0x227c <sdIoctl+0x56>
    227a:	56 c0       	rjmp	.+172    	; 0x2328 <sdIoctl+0x102>
    227c:	1f c0       	rjmp	.+62     	; 0x22bc <sdIoctl+0x96>
    227e:	13 30       	cpi	r17, 0x03	; 3
    2280:	a9 f1       	breq	.+106    	; 0x22ec <sdIoctl+0xc6>
    2282:	14 30       	cpi	r17, 0x04	; 4
    2284:	09 f0       	breq	.+2      	; 0x2288 <sdIoctl+0x62>
    2286:	50 c0       	rjmp	.+160    	; 0x2328 <sdIoctl+0x102>
    2288:	36 c0       	rjmp	.+108    	; 0x22f6 <sdIoctl+0xd0>
    228a:	18 30       	cpi	r17, 0x08	; 8
    228c:	e9 f0       	breq	.+58     	; 0x22c8 <sdIoctl+0xa2>
    228e:	19 30       	cpi	r17, 0x09	; 9
    2290:	30 f4       	brcc	.+12     	; 0x229e <sdIoctl+0x78>
    2292:	16 30       	cpi	r17, 0x06	; 6
    2294:	09 f1       	breq	.+66     	; 0x22d8 <sdIoctl+0xb2>
    2296:	17 30       	cpi	r17, 0x07	; 7
    2298:	09 f0       	breq	.+2      	; 0x229c <sdIoctl+0x76>
    229a:	46 c0       	rjmp	.+140    	; 0x2328 <sdIoctl+0x102>
    229c:	21 c0       	rjmp	.+66     	; 0x22e0 <sdIoctl+0xba>
    229e:	19 30       	cpi	r17, 0x09	; 9
    22a0:	b9 f0       	breq	.+46     	; 0x22d0 <sdIoctl+0xaa>
    22a2:	1a 30       	cpi	r17, 0x0A	; 10
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <sdIoctl+0x82>
    22a6:	40 c0       	rjmp	.+128    	; 0x2328 <sdIoctl+0x102>
    22a8:	37 c0       	rjmp	.+110    	; 0x2318 <sdIoctl+0xf2>
   {
      case SD_INIT:
         if( sd_init( gt_sdDev.t_spiHndl) == false)
    22aa:	80 91 6a 24 	lds	r24, 0x246A
    22ae:	90 91 6b 24 	lds	r25, 0x246B
    22b2:	0e 94 e3 77 	call	0xefc6	; 0xefc6 <sd_init>
    22b6:	88 23       	and	r24, r24
    22b8:	f1 f4       	brne	.+60     	; 0x22f6 <sdIoctl+0xd0>
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <sdIoctl+0x114>
            i_return = (int32_t)SD_CARD_INIT_FAILED;
      break;/*End case SD_INIT:*/

      case SD_RMDASHR:
         if( sd_rmDashR( ) == false)
    22bc:	0e 94 16 79 	call	0xf22c	; 0xf22c <sd_rmDashR>
    22c0:	12 c0       	rjmp	.+36     	; 0x22e6 <sdIoctl+0xc0>
      case SD_CARD_INFO:

      break;/*End case SD_CARD_INFO:*/

      case SD_LS:
         sd_ls();
    22c2:	0e 94 e4 78 	call	0xf1c8	; 0xf1c8 <sd_ls>
    22c6:	17 c0       	rjmp	.+46     	; 0x22f6 <sdIoctl+0xd0>
      break;/*End case SD_LS:*/

      case SD_RM:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_remove( pc_filename) == false)
    22c8:	c4 01       	movw	r24, r8
    22ca:	0e 94 10 79 	call	0xf220	; 0xf220 <sd_remove>
    22ce:	0b c0       	rjmp	.+22     	; 0x22e6 <sdIoctl+0xc0>
      break;/*End case SD_RM:*/

      case SD_CD:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_chdir( pc_filename) == false)
    22d0:	c4 01       	movw	r24, r8
    22d2:	0e 94 ea 78 	call	0xf1d4	; 0xf1d4 <sd_chdir>
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <sdIoctl+0xc0>
      break;/*End case SD_CD:*/

      case SD_MKDIR:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_mkdir( pc_filename) == false)
    22d8:	c4 01       	movw	r24, r8
    22da:	0e 94 f1 78 	call	0xf1e2	; 0xf1e2 <sd_mkdir>
    22de:	03 c0       	rjmp	.+6      	; 0x22e6 <sdIoctl+0xc0>
      break;/*End  case SD_MKDIR:*/

      case SD_RMDIR:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_rmdir( pc_filename) == false)
    22e0:	c4 01       	movw	r24, r8
    22e2:	0e 94 0a 79 	call	0xf214	; 0xf214 <sd_rmdir>
    22e6:	88 23       	and	r24, r24
    22e8:	31 f4       	brne	.+12     	; 0x22f6 <sdIoctl+0xd0>
    22ea:	30 c0       	rjmp	.+96     	; 0x234c <sdIoctl+0x126>

      case SD_REWIND:
         /*------------------------------------------------------------------*
          * Set the position of the file back to the beginning.
          *------------------------------------------------------------------*/
         sd_rewind( pt_dev->pv_privateData);
    22ec:	f6 01       	movw	r30, r12
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	0e 94 5c 79 	call	0xf2b8	; 0xf2b8 <sd_rewind>

int32_t sdIoctl( t_DEVHANDLE t_dev,
                 uint16_t s_command,
                 int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    22f6:	cc 24       	eor	r12, r12
    22f8:	dd 24       	eor	r13, r13
    22fa:	76 01       	movw	r14, r12
      case SD_REWIND:
         /*------------------------------------------------------------------*
          * Set the position of the file back to the beginning.
          *------------------------------------------------------------------*/
         sd_rewind( pt_dev->pv_privateData);
      break;/*End case SD_REWIND:*/
    22fc:	2f c0       	rjmp	.+94     	; 0x235c <sdIoctl+0x136>

      case SD_ERASE:
         /*------------------------------------------------------------------*
          * ERASE the contents of the file.
          *------------------------------------------------------------------*/
         i_return = sd_truncate( pt_dev->pv_privateData, 0);
    22fe:	f6 01       	movw	r30, r12
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	50 e0       	ldi	r21, 0x00	; 0
    2308:	ba 01       	movw	r22, r20
    230a:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <sd_truncate>
    230e:	c8 2e       	mov	r12, r24
    2310:	dd 24       	eor	r13, r13
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
      break;
    2316:	22 c0       	rjmp	.+68     	; 0x235c <sdIoctl+0x136>

      case SD_GET_SIZE:
         i_return = sd_fileSize( pt_dev->pv_privateData);
    2318:	f6 01       	movw	r30, r12
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	0e 94 56 79 	call	0xf2ac	; 0xf2ac <sd_fileSize>
    2322:	6b 01       	movw	r12, r22
    2324:	7c 01       	movw	r14, r24
      break;
    2326:	1a c0       	rjmp	.+52     	; 0x235c <sdIoctl+0x136>

      default:
         i_return = (int32_t)ARB_INVALID_CMD;
    2328:	2b ef       	ldi	r18, 0xFB	; 251
    232a:	c2 2e       	mov	r12, r18
    232c:	2f ef       	ldi	r18, 0xFF	; 255
    232e:	d2 2e       	mov	r13, r18
    2330:	2f ef       	ldi	r18, 0xFF	; 255
    2332:	e2 2e       	mov	r14, r18
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	f2 2e       	mov	r15, r18
    2338:	11 c0       	rjmp	.+34     	; 0x235c <sdIoctl+0x136>

   switch( (t_sdCmd)s_command)
   {
      case SD_INIT:
         if( sd_init( gt_sdDev.t_spiHndl) == false)
            i_return = (int32_t)SD_CARD_INIT_FAILED;
    233a:	9e ef       	ldi	r25, 0xFE	; 254
    233c:	c9 2e       	mov	r12, r25
    233e:	9f ef       	ldi	r25, 0xFF	; 255
    2340:	d9 2e       	mov	r13, r25
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	e9 2e       	mov	r14, r25
    2346:	9f ef       	ldi	r25, 0xFF	; 255
    2348:	f9 2e       	mov	r15, r25
    234a:	08 c0       	rjmp	.+16     	; 0x235c <sdIoctl+0x136>

      case SD_RMDIR:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_rmdir( pc_filename) == false)
            i_return = (int32_t)SD_OPERATION_FAILED;
    234c:	8d ef       	ldi	r24, 0xFD	; 253
    234e:	c8 2e       	mov	r12, r24
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	d8 2e       	mov	r13, r24
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	e8 2e       	mov	r14, r24
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	f8 2e       	mov	r15, r24
   }/*End switch( (t_sdCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    235c:	80 91 68 24 	lds	r24, 0x2468
    2360:	90 91 69 24 	lds	r25, 0x2469
    2364:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return i_return;

}/*End sdIoctl*/
    2368:	b6 01       	movw	r22, r12
    236a:	c7 01       	movw	r24, r14
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
    237e:	bf 90       	pop	r11
    2380:	af 90       	pop	r10
    2382:	9f 90       	pop	r9
    2384:	8f 90       	pop	r8
    2386:	08 95       	ret

00002388 <sdWrite>:
}/*End sdRead*/

static int16_t sdWrite( t_DEVHANDLE t_dev,
                        int8_t *pc_buff,
                        uint16_t s_size)
{
    2388:	8f 92       	push	r8
    238a:	9f 92       	push	r9
    238c:	af 92       	push	r10
    238e:	bf 92       	push	r11
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ff 92       	push	r15
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	0f 92       	push	r0
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	4b 01       	movw	r8, r22
    23ac:	5a 01       	movw	r10, r20
   int16_t s_bufferLevel = 0;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    23ae:	c9 80       	ldd	r12, Y+1	; 0x01
    23b0:	da 80       	ldd	r13, Y+2	; 0x02
   uint8_t c_retries = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    23b2:	80 91 68 24 	lds	r24, 0x2468
    23b6:	90 91 69 24 	lds	r25, 0x2469
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   if( pt_dev->pv_privateData != NULL)
    23c0:	f6 01       	movw	r30, r12
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	d1 f0       	breq	.+52     	; 0x23fe <sdWrite+0x76>
    23ca:	35 e0       	ldi	r19, 0x05	; 5
    23cc:	f3 2e       	mov	r15, r19
   {
      do
      {

         s_bufferLevel = (int16_t)sd_write( gt_sdDev.t_spiHndl,
    23ce:	80 91 6a 24 	lds	r24, 0x246A
    23d2:	90 91 6b 24 	lds	r25, 0x246B
    23d6:	f6 01       	movw	r30, r12
    23d8:	62 81       	ldd	r22, Z+2	; 0x02
    23da:	73 81       	ldd	r23, Z+3	; 0x03
    23dc:	a4 01       	movw	r20, r8
    23de:	95 01       	movw	r18, r10
    23e0:	0e 94 1b 79 	call	0xf236	; 0xf236 <sd_write>
    23e4:	8b 01       	movw	r16, r22
    23e6:	9c 01       	movw	r18, r24
                                            pt_dev->pv_privateData,
                                            (uint8_t *)pc_buff,
                                            s_size);

         if( s_bufferLevel < 0)
    23e8:	77 ff       	sbrs	r23, 7
    23ea:	0b c0       	rjmp	.+22     	; 0x2402 <sdWrite+0x7a>
         {
            sd_init( gt_sdDev.t_spiHndl);
    23ec:	80 91 6a 24 	lds	r24, 0x246A
    23f0:	90 91 6b 24 	lds	r25, 0x246B
    23f4:	0e 94 e3 77 	call	0xefc6	; 0xefc6 <sd_init>
    23f8:	fa 94       	dec	r15
            //arb_sleep(1);
         }

         c_retries++;

      }while( (s_bufferLevel < 0) && (c_retries < SD_MAX_RDWR_RETRIES));
    23fa:	49 f7       	brne	.-46     	; 0x23ce <sdWrite+0x46>
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <sdWrite+0x7a>

static int16_t sdWrite( t_DEVHANDLE t_dev,
                        int8_t *pc_buff,
                        uint16_t s_size)
{
   int16_t s_bufferLevel = 0;
    23fe:	00 e0       	ldi	r16, 0x00	; 0
    2400:	10 e0       	ldi	r17, 0x00	; 0
   }/*End if( pt_dev->pv_privateData != NULL)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2402:	80 91 68 24 	lds	r24, 0x2468
    2406:	90 91 69 24 	lds	r25, 0x2469
    240a:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return s_bufferLevel;

}/*End sdWrite*/
    240e:	c8 01       	movw	r24, r16
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ff 90       	pop	r15
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
    2422:	bf 90       	pop	r11
    2424:	af 90       	pop	r10
    2426:	9f 90       	pop	r9
    2428:	8f 90       	pop	r8
    242a:	08 95       	ret

0000242c <sdRead>:
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static int16_t sdRead( t_DEVHANDLE t_dev,
                       int8_t *pc_buff,
                       uint16_t s_size)
{
    242c:	8f 92       	push	r8
    242e:	9f 92       	push	r9
    2430:	af 92       	push	r10
    2432:	bf 92       	push	r11
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ff 92       	push	r15
    243a:	0f 93       	push	r16
    243c:	1f 93       	push	r17
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	0f 92       	push	r0
    2444:	0f 92       	push	r0
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	4b 01       	movw	r8, r22
    2450:	5a 01       	movw	r10, r20
   int16_t s_bufferLevel = 0;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    2452:	c9 80       	ldd	r12, Y+1	; 0x01
    2454:	da 80       	ldd	r13, Y+2	; 0x02
   uint8_t c_retries = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    2456:	80 91 68 24 	lds	r24, 0x2468
    245a:	90 91 69 24 	lds	r25, 0x2469
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   if( pt_dev->pv_privateData != NULL)
    2464:	f6 01       	movw	r30, r12
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	d1 f0       	breq	.+52     	; 0x24a2 <sdRead+0x76>
    246e:	45 e0       	ldi	r20, 0x05	; 5
    2470:	f4 2e       	mov	r15, r20
   {

      do
      {

         s_bufferLevel = (int16_t)sd_read( gt_sdDev.t_spiHndl,
    2472:	80 91 6a 24 	lds	r24, 0x246A
    2476:	90 91 6b 24 	lds	r25, 0x246B
    247a:	f6 01       	movw	r30, r12
    247c:	62 81       	ldd	r22, Z+2	; 0x02
    247e:	73 81       	ldd	r23, Z+3	; 0x03
    2480:	a4 01       	movw	r20, r8
    2482:	95 01       	movw	r18, r10
    2484:	0e 94 38 79 	call	0xf270	; 0xf270 <sd_read>
    2488:	8b 01       	movw	r16, r22
    248a:	9c 01       	movw	r18, r24
                                           pt_dev->pv_privateData,
                                           (uint8_t *)pc_buff,
                                           s_size);

         if( s_bufferLevel < 0)
    248c:	77 ff       	sbrs	r23, 7
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <sdRead+0x7a>
         {
            sd_init( gt_sdDev.t_spiHndl);
    2490:	80 91 6a 24 	lds	r24, 0x246A
    2494:	90 91 6b 24 	lds	r25, 0x246B
    2498:	0e 94 e3 77 	call	0xefc6	; 0xefc6 <sd_init>
    249c:	fa 94       	dec	r15
            //arb_sleep(1);
         }

         c_retries++;

      }while( (s_bufferLevel < 0) && (c_retries < SD_MAX_RDWR_RETRIES));
    249e:	49 f7       	brne	.-46     	; 0x2472 <sdRead+0x46>
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <sdRead+0x7a>
 *---------------------------------------------------------------------------*/
static int16_t sdRead( t_DEVHANDLE t_dev,
                       int8_t *pc_buff,
                       uint16_t s_size)
{
   int16_t s_bufferLevel = 0;
    24a2:	00 e0       	ldi	r16, 0x00	; 0
    24a4:	10 e0       	ldi	r17, 0x00	; 0
   }/*End if( pt_dev->pv_privateData != NULL)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    24a6:	80 91 68 24 	lds	r24, 0x2468
    24aa:	90 91 69 24 	lds	r25, 0x2469
    24ae:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return s_bufferLevel;

}/*End sdRead*/
    24b2:	c8 01       	movw	r24, r16
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	ff 90       	pop	r15
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	bf 90       	pop	r11
    24c8:	af 90       	pop	r10
    24ca:	9f 90       	pop	r9
    24cc:	8f 90       	pop	r8
    24ce:	08 95       	ret

000024d0 <sdOpen>:
   return s_bufferLevel;

}/*End sdWrite*/

t_error sdOpen( t_DEVHANDLE t_dev)
{
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	0f 92       	push	r0
    24da:	0f 92       	push	r0
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    24e4:	80 91 68 24 	lds	r24, 0x2468
    24e8:	90 91 69 24 	lds	r25, 0x2469
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   pt_dev = (t_devHandle *)t_dev;
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	80 93 6e 24 	sts	0x246E, r24
    24fa:	90 93 6f 24 	sts	0x246F, r25

   if( gt_sdDev.c_numUsers == 0)
    24fe:	80 91 6c 24 	lds	r24, 0x246C
    2502:	88 23       	and	r24, r24
    2504:	41 f4       	brne	.+16     	; 0x2516 <sdOpen+0x46>
   {
      if( sd_begin( gt_sdDev.t_spiHndl) == false)
    2506:	80 91 6a 24 	lds	r24, 0x246A
    250a:	90 91 6b 24 	lds	r25, 0x246B
    250e:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <sd_begin>
    2512:	88 23       	and	r24, r24
    2514:	b1 f1       	breq	.+108    	; 0x2582 <sdOpen+0xb2>
         goto failed;
      }

   }/*End if( gt_sdDev.c_numUsers == 1)*/

   pc_filename = (char *)pt_dev->pv_privateData;
    2516:	00 91 6e 24 	lds	r16, 0x246E
    251a:	10 91 6f 24 	lds	r17, 0x246F
    251e:	f8 01       	movw	r30, r16
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	93 81       	ldd	r25, Z+3	; 0x03
    2524:	80 93 70 24 	sts	0x2470, r24
    2528:	90 93 71 24 	sts	0x2471, r25

   if( pc_filename != NULL)
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	e1 f0       	breq	.+56     	; 0x2568 <sdOpen+0x98>
   {
      uint8_t c_flags = 0;

      if( pt_dev->c_flags & ARB_O_READ)
    2530:	24 81       	ldd	r18, Z+4	; 0x04

   pc_filename = (char *)pt_dev->pv_privateData;

   if( pc_filename != NULL)
   {
      uint8_t c_flags = 0;
    2532:	62 2f       	mov	r22, r18
    2534:	61 70       	andi	r22, 0x01	; 1

      if( pt_dev->c_flags & ARB_O_READ)
         c_flags |= SD_FILE_READ;
      if( pt_dev->c_flags & ARB_O_WRITE)
    2536:	21 fd       	sbrc	r18, 1
         c_flags |= SD_FILE_WRITE;
    2538:	62 60       	ori	r22, 0x02	; 2
      if( pt_dev->c_flags & ARB_O_APPEND)
    253a:	22 fd       	sbrc	r18, 2
         c_flags |= SD_FILE_APPEND;
    253c:	64 60       	ori	r22, 0x04	; 4
      if( pt_dev->c_flags & ARB_O_SYNC)
    253e:	23 fd       	sbrc	r18, 3
         c_flags |= SD_FILE_SYNC;
    2540:	68 60       	ori	r22, 0x08	; 8
      if( pt_dev->c_flags & ARB_O_TRUNC)
    2542:	24 fd       	sbrc	r18, 4
         c_flags |= SD_FILE_TRUNC;
    2544:	60 61       	ori	r22, 0x10	; 16
      if( pt_dev->c_flags & ARB_O_AT_END)
    2546:	25 fd       	sbrc	r18, 5
         c_flags |= SD_FILE_AT_END;
    2548:	60 62       	ori	r22, 0x20	; 32
      if( pt_dev->c_flags & ARB_O_CREAT)
    254a:	26 fd       	sbrc	r18, 6
         c_flags |= SD_FILE_CREAT;
    254c:	60 64       	ori	r22, 0x40	; 64

      pt_dev->pv_privateData = sd_open( pc_filename, c_flags);
    254e:	0e 94 f6 77 	call	0xefec	; 0xefec <sd_open>
    2552:	f8 01       	movw	r30, r16
    2554:	82 83       	std	Z+2, r24	; 0x02
    2556:	93 83       	std	Z+3, r25	; 0x03
      if( pt_dev->pv_privateData == NULL)
    2558:	e0 91 6e 24 	lds	r30, 0x246E
    255c:	f0 91 6f 24 	lds	r31, 0x246F
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f0       	breq	.+26     	; 0x2582 <sdOpen+0xb2>
         t_err = ARB_OPEN_ERROR;
         goto failed;
      }
   }

   gt_sdDev.c_numUsers++;
    2568:	80 91 6c 24 	lds	r24, 0x246C
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	80 93 6c 24 	sts	0x246C, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2572:	80 91 68 24 	lds	r24, 0x2468
    2576:	90 91 69 24 	lds	r25, 0x2469
    257a:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return ARB_PASSED;
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <sdOpen+0xc0>
failed:

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2582:	80 91 68 24 	lds	r24, 0x2468
    2586:	90 91 69 24 	lds	r25, 0x2469
    258a:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return t_err;
    258e:	80 ef       	ldi	r24, 0xF0	; 240

}/*End sdOpen*/
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <drv_sdInit>:
   return ARB_PASSED;

}/*End sdClose*/

t_error drv_sdInit( t_sdSetup t_setup)
{
    259e:	df 92       	push	r13
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	28 97       	sbiw	r28, 0x08	; 8
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	f6 2e       	mov	r15, r22
    25b8:	e7 2e       	mov	r14, r23
    25ba:	d8 2e       	mov	r13, r24
    25bc:	79 2f       	mov	r23, r25
   t_error t_err = ARB_PASSED;
   t_spiConfig t_sConf;
   static t_spiError t_sErr;

   memset( (void *)&gt_sdDev, 0, sizeof(t_sdDev));
    25be:	85 e0       	ldi	r24, 0x05	; 5
    25c0:	e8 e6       	ldi	r30, 0x68	; 104
    25c2:	f4 e2       	ldi	r31, 0x24	; 36
    25c4:	df 01       	movw	r26, r30
    25c6:	1d 92       	st	X+, r1
    25c8:	8a 95       	dec	r24
    25ca:	e9 f7       	brne	.-6      	; 0x25c6 <drv_sdInit+0x28>

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "sdDevice0",
    25cc:	86 e4       	ldi	r24, 0x46	; 70
    25ce:	90 e2       	ldi	r25, 0x20	; 32
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	40 e5       	ldi	r20, 0x50	; 80
    25d4:	50 e2       	ldi	r21, 0x20	; 32
    25d6:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <arb_registerDevice>
    25da:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum,
                               0),
                               &gat_sdDevOps);

   if( t_err < 0)
    25dc:	87 fd       	sbrc	r24, 7
    25de:	4e c0       	rjmp	.+156    	; 0x267c <drv_sdInit+0xde>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the sd port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_sdDev.t_mutex = arb_semaphoreCreate( MUTEX);
    25e0:	82 e0       	ldi	r24, 0x02	; 2
    25e2:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
    25e6:	80 93 68 24 	sts	0x2468, r24
    25ea:	90 93 69 24 	sts	0x2469, r25

   if( gt_sdDev.t_mutex < 0)
    25ee:	80 91 68 24 	lds	r24, 0x2468
    25f2:	90 91 69 24 	lds	r25, 0x2469
    25f6:	97 ff       	sbrs	r25, 7
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <drv_sdInit+0x68>
   {
      t_err = (t_error)gt_sdDev.t_mutex;
    25fa:	80 91 68 24 	lds	r24, 0x2468
    25fe:	90 91 69 24 	lds	r25, 0x2469
    2602:	18 2f       	mov	r17, r24
      goto failed2;
    2604:	37 c0       	rjmp	.+110    	; 0x2674 <drv_sdInit+0xd6>

   /*------------------------------------------------------------------------*
    * Request access to the spi port required for controlling this particular
    * sd card.
    *------------------------------------------------------------------------*/
   t_sConf.b_enDma    = false;
    2606:	18 86       	std	Y+8, r1	; 0x08
   t_sConf.i_baudRate = 800000;     /*Set the baud rate low until initialized*/
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	95 e3       	ldi	r25, 0x35	; 53
    260c:	ac e0       	ldi	r26, 0x0C	; 12
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	38 2f       	mov	r19, r24
    2612:	8c 83       	std	Y+4, r24	; 0x04
    2614:	9d 83       	std	Y+5, r25	; 0x05
    2616:	ae 83       	std	Y+6, r26	; 0x06
    2618:	bf 83       	std	Y+7, r27	; 0x07
   t_sConf.t_spiMd    = SPI_MODE_0;
    261a:	19 82       	std	Y+1, r1	; 0x01
   t_sConf.t_spiOp    = SPI_MASTER;
    261c:	1a 82       	std	Y+2, r1	; 0x02
   t_sConf.t_spiOrder = SPI_MSB_FIRST;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	8b 83       	std	Y+3, r24	; 0x03

   t_sErr = hal_configureSpiChannel( t_setup.t_spiChan,
    2622:	8f 2d       	mov	r24, r15
    2624:	00 e0       	ldi	r16, 0x00	; 0
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	21 e0       	ldi	r18, 0x01	; 1
    262a:	4d 81       	ldd	r20, Y+5	; 0x05
    262c:	5e 81       	ldd	r21, Y+6	; 0x06
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <hal_configureSpiChannel>
    2636:	80 93 6d 24 	sts	0x246D, r24
                                     t_sConf);
   if( t_sErr < 0)
    263a:	87 fd       	sbrc	r24, 7
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <drv_sdInit+0xc8>
      t_err = ARB_HAL_ERROR;
      goto failed3;

   }/*End if( t_sErr < 0)*/

   gt_sdDev.t_spiHndl = hal_requestSpiChannel( t_setup.t_spiChan,
    263e:	8f 2d       	mov	r24, r15
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	70 e0       	ldi	r23, 0x00	; 0
    2644:	4e 2d       	mov	r20, r14
    2646:	2d 2d       	mov	r18, r13
    2648:	0e 94 bb 3b 	call	0x7776	; 0x7776 <hal_requestSpiChannel>
    264c:	80 93 6a 24 	sts	0x246A, r24
    2650:	90 93 6b 24 	sts	0x246B, r25
                                               NULL,
                                               t_setup.t_csPort,
                                               t_setup.t_csPin);
   if( gt_sdDev.t_spiHndl < 0)
    2654:	80 91 6a 24 	lds	r24, 0x246A
    2658:	90 91 6b 24 	lds	r25, 0x246B
    265c:	97 fd       	sbrc	r25, 7
    265e:	03 c0       	rjmp	.+6      	; 0x2666 <drv_sdInit+0xc8>
   }/*End if( t_sErr < 0)*/

   /*------------------------------------------------------------------------*
    * We don't have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_sdDev.c_numUsers = 0;
    2660:	10 92 6c 24 	sts	0x246C, r1

   return ARB_PASSED;
    2664:	0b c0       	rjmp	.+22     	; 0x267c <drv_sdInit+0xde>

failed3:

   arb_semaphoreDestroy( gt_sdDev.t_mutex);
    2666:	80 91 68 24 	lds	r24, 0x2468
    266a:	90 91 69 24 	lds	r25, 0x2469
    266e:	0e 94 56 99 	call	0x132ac	; 0x132ac <arb_semaphoreDestroy>
    2672:	16 ef       	ldi	r17, 0xF6	; 246

failed2:

   arb_destroyDevice( "sdDevice0");
    2674:	86 e4       	ldi	r24, 0x46	; 70
    2676:	90 e2       	ldi	r25, 0x20	; 32
    2678:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <arb_destroyDevice>

failed1:

   return t_err;

}/*End drv_sdInit*/
    267c:	81 2f       	mov	r24, r17
    267e:	28 96       	adiw	r28, 0x08	; 8
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	ff 90       	pop	r15
    268e:	ef 90       	pop	r14
    2690:	df 90       	pop	r13
    2692:	08 95       	ret

00002694 <signalClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_error signalClose( t_DEVHANDLE t_devHandle)
{
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	0f 92       	push	r0
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    26a4:	80 91 72 24 	lds	r24, 0x2472
    26a8:	90 91 73 24 	lds	r25, 0x2473
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   gt_signalDev.c_numUsers--;
    26b2:	80 91 79 24 	lds	r24, 0x2479
    26b6:	81 50       	subi	r24, 0x01	; 1
    26b8:	80 93 79 24 	sts	0x2479, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    26bc:	80 91 72 24 	lds	r24, 0x2472
    26c0:	90 91 73 24 	lds	r25, 0x2473
    26c4:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return ARB_PASSED;

}/*End signalClose*/
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <signalIoctl>:
}/*End signalOpen*/

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	0f 92       	push	r0
    26e4:	0f 92       	push	r0
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	16 2f       	mov	r17, r22
   int32_t i_return = (int32_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    26f0:	80 91 72 24 	lds	r24, 0x2472
    26f4:	90 91 73 24 	lds	r25, 0x2473
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   switch( (t_signalCmd)s_command)
    26fe:	15 30       	cpi	r17, 0x05	; 5
    2700:	09 f4       	brne	.+2      	; 0x2704 <signalIoctl+0x30>
    2702:	ea c3       	rjmp	.+2004   	; 0x2ed8 <signalIoctl+0x804>
    2704:	16 30       	cpi	r17, 0x06	; 6
    2706:	a0 f4       	brcc	.+40     	; 0x2730 <signalIoctl+0x5c>
    2708:	12 30       	cpi	r17, 0x02	; 2
    270a:	09 f4       	brne	.+2      	; 0x270e <signalIoctl+0x3a>
    270c:	bd c1       	rjmp	.+890    	; 0x2a88 <signalIoctl+0x3b4>
    270e:	13 30       	cpi	r17, 0x03	; 3
    2710:	38 f4       	brcc	.+14     	; 0x2720 <signalIoctl+0x4c>
    2712:	11 23       	and	r17, r17
    2714:	31 f1       	breq	.+76     	; 0x2762 <signalIoctl+0x8e>
    2716:	11 30       	cpi	r17, 0x01	; 1
    2718:	11 f0       	breq	.+4      	; 0x271e <signalIoctl+0x4a>
    271a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <signalIoctl+0x11a4>
    271e:	ed c0       	rjmp	.+474    	; 0x28fa <signalIoctl+0x226>
    2720:	13 30       	cpi	r17, 0x03	; 3
    2722:	09 f4       	brne	.+2      	; 0x2726 <signalIoctl+0x52>
    2724:	6d c2       	rjmp	.+1242   	; 0x2c00 <signalIoctl+0x52c>
    2726:	14 30       	cpi	r17, 0x04	; 4
    2728:	11 f0       	breq	.+4      	; 0x272e <signalIoctl+0x5a>
    272a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <signalIoctl+0x11a4>
    272e:	24 c3       	rjmp	.+1608   	; 0x2d78 <signalIoctl+0x6a4>
    2730:	18 30       	cpi	r17, 0x08	; 8
    2732:	09 f4       	brne	.+2      	; 0x2736 <signalIoctl+0x62>
    2734:	e1 c5       	rjmp	.+3010   	; 0x32f8 <signalIoctl+0xc24>
    2736:	19 30       	cpi	r17, 0x09	; 9
    2738:	40 f4       	brcc	.+16     	; 0x274a <signalIoctl+0x76>
    273a:	16 30       	cpi	r17, 0x06	; 6
    273c:	09 f4       	brne	.+2      	; 0x2740 <signalIoctl+0x6c>
    273e:	7c c4       	rjmp	.+2296   	; 0x3038 <signalIoctl+0x964>
    2740:	17 30       	cpi	r17, 0x07	; 7
    2742:	11 f0       	breq	.+4      	; 0x2748 <signalIoctl+0x74>
    2744:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <signalIoctl+0x11a4>
    2748:	27 c5       	rjmp	.+2638   	; 0x3198 <signalIoctl+0xac4>
    274a:	1a 30       	cpi	r17, 0x0A	; 10
    274c:	09 f4       	brne	.+2      	; 0x2750 <signalIoctl+0x7c>
    274e:	34 c7       	rjmp	.+3688   	; 0x35b8 <signalIoctl+0xee4>
    2750:	1a 30       	cpi	r17, 0x0A	; 10
    2752:	08 f4       	brcc	.+2      	; 0x2756 <signalIoctl+0x82>
    2754:	81 c6       	rjmp	.+3330   	; 0x3458 <signalIoctl+0xd84>
    2756:	1b 30       	cpi	r17, 0x0B	; 11
    2758:	11 f0       	breq	.+4      	; 0x275e <signalIoctl+0x8a>
    275a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <signalIoctl+0x11a4>
    275e:	0c 94 8c 1b 	jmp	0x3718	; 0x3718 <signalIoctl+0x1044>
   {
      case RED_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    2762:	80 91 75 24 	lds	r24, 0x2475
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2766:	90 91 74 24 	lds	r25, 0x2474
    276a:	95 30       	cpi	r25, 0x05	; 5
    276c:	09 f4       	brne	.+2      	; 0x2770 <signalIoctl+0x9c>
    276e:	71 c0       	rjmp	.+226    	; 0x2852 <signalIoctl+0x17e>
    2770:	96 30       	cpi	r25, 0x06	; 6
    2772:	a0 f4       	brcc	.+40     	; 0x279c <signalIoctl+0xc8>
    2774:	92 30       	cpi	r25, 0x02	; 2
    2776:	09 f4       	brne	.+2      	; 0x277a <signalIoctl+0xa6>
    2778:	42 c0       	rjmp	.+132    	; 0x27fe <signalIoctl+0x12a>
    277a:	93 30       	cpi	r25, 0x03	; 3
    277c:	38 f4       	brcc	.+14     	; 0x278c <signalIoctl+0xb8>
    277e:	99 23       	and	r25, r25
    2780:	11 f1       	breq	.+68     	; 0x27c6 <signalIoctl+0xf2>
    2782:	91 30       	cpi	r25, 0x01	; 1
    2784:	11 f0       	breq	.+4      	; 0x278a <signalIoctl+0xb6>
    2786:	0c 94 45 1c 	jmp	0x388a	; 0x388a <signalIoctl+0x11b6>
    278a:	2b c0       	rjmp	.+86     	; 0x27e2 <signalIoctl+0x10e>
    278c:	93 30       	cpi	r25, 0x03	; 3
    278e:	09 f4       	brne	.+2      	; 0x2792 <signalIoctl+0xbe>
    2790:	44 c0       	rjmp	.+136    	; 0x281a <signalIoctl+0x146>
    2792:	94 30       	cpi	r25, 0x04	; 4
    2794:	11 f0       	breq	.+4      	; 0x279a <signalIoctl+0xc6>
    2796:	0c 94 45 1c 	jmp	0x388a	; 0x388a <signalIoctl+0x11b6>
    279a:	4d c0       	rjmp	.+154    	; 0x2836 <signalIoctl+0x162>
    279c:	98 30       	cpi	r25, 0x08	; 8
    279e:	09 f4       	brne	.+2      	; 0x27a2 <signalIoctl+0xce>
    27a0:	82 c0       	rjmp	.+260    	; 0x28a6 <signalIoctl+0x1d2>
    27a2:	99 30       	cpi	r25, 0x09	; 9
    27a4:	40 f4       	brcc	.+16     	; 0x27b6 <signalIoctl+0xe2>
    27a6:	96 30       	cpi	r25, 0x06	; 6
    27a8:	09 f4       	brne	.+2      	; 0x27ac <signalIoctl+0xd8>
    27aa:	61 c0       	rjmp	.+194    	; 0x286e <signalIoctl+0x19a>
    27ac:	97 30       	cpi	r25, 0x07	; 7
    27ae:	11 f0       	breq	.+4      	; 0x27b4 <signalIoctl+0xe0>
    27b0:	0c 94 45 1c 	jmp	0x388a	; 0x388a <signalIoctl+0x11b6>
    27b4:	6a c0       	rjmp	.+212    	; 0x288a <signalIoctl+0x1b6>
    27b6:	99 30       	cpi	r25, 0x09	; 9
    27b8:	09 f4       	brne	.+2      	; 0x27bc <signalIoctl+0xe8>
    27ba:	83 c0       	rjmp	.+262    	; 0x28c2 <signalIoctl+0x1ee>
    27bc:	9a 30       	cpi	r25, 0x0A	; 10
    27be:	11 f0       	breq	.+4      	; 0x27c4 <signalIoctl+0xf0>
    27c0:	0c 94 45 1c 	jmp	0x388a	; 0x388a <signalIoctl+0x11b6>
    27c4:	8c c0       	rjmp	.+280    	; 0x28de <signalIoctl+0x20a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    27c6:	90 91 00 06 	lds	r25, 0x0600
    27ca:	98 23       	and	r25, r24
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <signalIoctl+0xfe>
    27ce:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <signalIoctl+0x11be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    27d2:	e0 e0       	ldi	r30, 0x00	; 0
    27d4:	f6 e0       	ldi	r31, 0x06	; 6
    27d6:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    27d8:	cc 24       	eor	r12, r12
    27da:	dd 24       	eor	r13, r13
    27dc:	76 01       	movw	r14, r12
    27de:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    27e2:	90 91 20 06 	lds	r25, 0x0620
    27e6:	98 23       	and	r25, r24
    27e8:	11 f4       	brne	.+4      	; 0x27ee <signalIoctl+0x11a>
    27ea:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <signalIoctl+0x11c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    27ee:	e0 e2       	ldi	r30, 0x20	; 32
    27f0:	f6 e0       	ldi	r31, 0x06	; 6
    27f2:	86 83       	std	Z+6, r24	; 0x06
    27f4:	cc 24       	eor	r12, r12
    27f6:	dd 24       	eor	r13, r13
    27f8:	76 01       	movw	r14, r12
    27fa:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    27fe:	90 91 40 06 	lds	r25, 0x0640
    2802:	98 23       	and	r25, r24
    2804:	11 f4       	brne	.+4      	; 0x280a <signalIoctl+0x136>
    2806:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <signalIoctl+0x11ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    280a:	e0 e4       	ldi	r30, 0x40	; 64
    280c:	f6 e0       	ldi	r31, 0x06	; 6
    280e:	86 83       	std	Z+6, r24	; 0x06
    2810:	cc 24       	eor	r12, r12
    2812:	dd 24       	eor	r13, r13
    2814:	76 01       	movw	r14, r12
    2816:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    281a:	90 91 60 06 	lds	r25, 0x0660
    281e:	98 23       	and	r25, r24
    2820:	11 f4       	brne	.+4      	; 0x2826 <signalIoctl+0x152>
    2822:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <signalIoctl+0x11d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    2826:	e0 e6       	ldi	r30, 0x60	; 96
    2828:	f6 e0       	ldi	r31, 0x06	; 6
    282a:	86 83       	std	Z+6, r24	; 0x06
    282c:	cc 24       	eor	r12, r12
    282e:	dd 24       	eor	r13, r13
    2830:	76 01       	movw	r14, r12
    2832:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2836:	90 91 80 06 	lds	r25, 0x0680
    283a:	98 23       	and	r25, r24
    283c:	11 f4       	brne	.+4      	; 0x2842 <signalIoctl+0x16e>
    283e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <signalIoctl+0x11de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    2842:	e0 e8       	ldi	r30, 0x80	; 128
    2844:	f6 e0       	ldi	r31, 0x06	; 6
    2846:	86 83       	std	Z+6, r24	; 0x06
    2848:	cc 24       	eor	r12, r12
    284a:	dd 24       	eor	r13, r13
    284c:	76 01       	movw	r14, r12
    284e:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2852:	90 91 a0 06 	lds	r25, 0x06A0
    2856:	98 23       	and	r25, r24
    2858:	11 f4       	brne	.+4      	; 0x285e <signalIoctl+0x18a>
    285a:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <signalIoctl+0x11e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    285e:	e0 ea       	ldi	r30, 0xA0	; 160
    2860:	f6 e0       	ldi	r31, 0x06	; 6
    2862:	86 83       	std	Z+6, r24	; 0x06
    2864:	cc 24       	eor	r12, r12
    2866:	dd 24       	eor	r13, r13
    2868:	76 01       	movw	r14, r12
    286a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    286e:	90 91 e0 06 	lds	r25, 0x06E0
    2872:	98 23       	and	r25, r24
    2874:	11 f4       	brne	.+4      	; 0x287a <signalIoctl+0x1a6>
    2876:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <signalIoctl+0x11ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    287a:	e0 ee       	ldi	r30, 0xE0	; 224
    287c:	f6 e0       	ldi	r31, 0x06	; 6
    287e:	86 83       	std	Z+6, r24	; 0x06
    2880:	cc 24       	eor	r12, r12
    2882:	dd 24       	eor	r13, r13
    2884:	76 01       	movw	r14, r12
    2886:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    288a:	90 91 00 07 	lds	r25, 0x0700
    288e:	98 23       	and	r25, r24
    2890:	11 f4       	brne	.+4      	; 0x2896 <signalIoctl+0x1c2>
    2892:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <signalIoctl+0x11f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    2896:	e0 e0       	ldi	r30, 0x00	; 0
    2898:	f7 e0       	ldi	r31, 0x07	; 7
    289a:	86 83       	std	Z+6, r24	; 0x06
    289c:	cc 24       	eor	r12, r12
    289e:	dd 24       	eor	r13, r13
    28a0:	76 01       	movw	r14, r12
    28a2:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    28a6:	90 91 20 07 	lds	r25, 0x0720
    28aa:	98 23       	and	r25, r24
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <signalIoctl+0x1de>
    28ae:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <signalIoctl+0x11fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    28b2:	e0 e2       	ldi	r30, 0x20	; 32
    28b4:	f7 e0       	ldi	r31, 0x07	; 7
    28b6:	86 83       	std	Z+6, r24	; 0x06
    28b8:	cc 24       	eor	r12, r12
    28ba:	dd 24       	eor	r13, r13
    28bc:	76 01       	movw	r14, r12
    28be:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    28c2:	90 91 c0 07 	lds	r25, 0x07C0
    28c6:	98 23       	and	r25, r24
    28c8:	11 f4       	brne	.+4      	; 0x28ce <signalIoctl+0x1fa>
    28ca:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <signalIoctl+0x1206>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    28ce:	e0 ec       	ldi	r30, 0xC0	; 192
    28d0:	f7 e0       	ldi	r31, 0x07	; 7
    28d2:	86 83       	std	Z+6, r24	; 0x06
    28d4:	cc 24       	eor	r12, r12
    28d6:	dd 24       	eor	r13, r13
    28d8:	76 01       	movw	r14, r12
    28da:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    28de:	90 91 e0 07 	lds	r25, 0x07E0
    28e2:	98 23       	and	r25, r24
    28e4:	11 f4       	brne	.+4      	; 0x28ea <signalIoctl+0x216>
    28e6:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <signalIoctl+0x120e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    28ea:	e0 ee       	ldi	r30, 0xE0	; 224
    28ec:	f7 e0       	ldi	r31, 0x07	; 7
    28ee:	86 83       	std	Z+6, r24	; 0x06
    28f0:	cc 24       	eor	r12, r12
    28f2:	dd 24       	eor	r13, r13
    28f4:	76 01       	movw	r14, r12
    28f6:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case RED_LED_ON:*/

      case RED_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    28fa:	80 91 75 24 	lds	r24, 0x2475
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    28fe:	90 91 74 24 	lds	r25, 0x2474
    2902:	95 30       	cpi	r25, 0x05	; 5
    2904:	09 f4       	brne	.+2      	; 0x2908 <signalIoctl+0x234>
    2906:	71 c0       	rjmp	.+226    	; 0x29ea <signalIoctl+0x316>
    2908:	96 30       	cpi	r25, 0x06	; 6
    290a:	a0 f4       	brcc	.+40     	; 0x2934 <signalIoctl+0x260>
    290c:	92 30       	cpi	r25, 0x02	; 2
    290e:	09 f4       	brne	.+2      	; 0x2912 <signalIoctl+0x23e>
    2910:	42 c0       	rjmp	.+132    	; 0x2996 <signalIoctl+0x2c2>
    2912:	93 30       	cpi	r25, 0x03	; 3
    2914:	38 f4       	brcc	.+14     	; 0x2924 <signalIoctl+0x250>
    2916:	99 23       	and	r25, r25
    2918:	11 f1       	breq	.+68     	; 0x295e <signalIoctl+0x28a>
    291a:	91 30       	cpi	r25, 0x01	; 1
    291c:	11 f0       	breq	.+4      	; 0x2922 <signalIoctl+0x24e>
    291e:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <signalIoctl+0x1216>
    2922:	2b c0       	rjmp	.+86     	; 0x297a <signalIoctl+0x2a6>
    2924:	93 30       	cpi	r25, 0x03	; 3
    2926:	09 f4       	brne	.+2      	; 0x292a <signalIoctl+0x256>
    2928:	44 c0       	rjmp	.+136    	; 0x29b2 <signalIoctl+0x2de>
    292a:	94 30       	cpi	r25, 0x04	; 4
    292c:	11 f0       	breq	.+4      	; 0x2932 <signalIoctl+0x25e>
    292e:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <signalIoctl+0x1216>
    2932:	4d c0       	rjmp	.+154    	; 0x29ce <signalIoctl+0x2fa>
    2934:	98 30       	cpi	r25, 0x08	; 8
    2936:	09 f4       	brne	.+2      	; 0x293a <signalIoctl+0x266>
    2938:	80 c0       	rjmp	.+256    	; 0x2a3a <signalIoctl+0x366>
    293a:	99 30       	cpi	r25, 0x09	; 9
    293c:	40 f4       	brcc	.+16     	; 0x294e <signalIoctl+0x27a>
    293e:	96 30       	cpi	r25, 0x06	; 6
    2940:	09 f4       	brne	.+2      	; 0x2944 <signalIoctl+0x270>
    2942:	61 c0       	rjmp	.+194    	; 0x2a06 <signalIoctl+0x332>
    2944:	97 30       	cpi	r25, 0x07	; 7
    2946:	11 f0       	breq	.+4      	; 0x294c <signalIoctl+0x278>
    2948:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <signalIoctl+0x1216>
    294c:	69 c0       	rjmp	.+210    	; 0x2a20 <signalIoctl+0x34c>
    294e:	99 30       	cpi	r25, 0x09	; 9
    2950:	09 f4       	brne	.+2      	; 0x2954 <signalIoctl+0x280>
    2952:	80 c0       	rjmp	.+256    	; 0x2a54 <signalIoctl+0x380>
    2954:	9a 30       	cpi	r25, 0x0A	; 10
    2956:	11 f0       	breq	.+4      	; 0x295c <signalIoctl+0x288>
    2958:	0c 94 75 1c 	jmp	0x38ea	; 0x38ea <signalIoctl+0x1216>
    295c:	88 c0       	rjmp	.+272    	; 0x2a6e <signalIoctl+0x39a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    295e:	90 91 00 06 	lds	r25, 0x0600
    2962:	98 23       	and	r25, r24
    2964:	11 f4       	brne	.+4      	; 0x296a <signalIoctl+0x296>
    2966:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <signalIoctl+0x121e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    296a:	e0 e0       	ldi	r30, 0x00	; 0
    296c:	f6 e0       	ldi	r31, 0x06	; 6
    296e:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    2970:	cc 24       	eor	r12, r12
    2972:	dd 24       	eor	r13, r13
    2974:	76 01       	movw	r14, r12
    2976:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    297a:	90 91 20 06 	lds	r25, 0x0620
    297e:	98 23       	and	r25, r24
    2980:	11 f4       	brne	.+4      	; 0x2986 <signalIoctl+0x2b2>
    2982:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <signalIoctl+0x1226>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    2986:	e0 e2       	ldi	r30, 0x20	; 32
    2988:	f6 e0       	ldi	r31, 0x06	; 6
    298a:	85 83       	std	Z+5, r24	; 0x05
    298c:	cc 24       	eor	r12, r12
    298e:	dd 24       	eor	r13, r13
    2990:	76 01       	movw	r14, r12
    2992:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2996:	90 91 40 06 	lds	r25, 0x0640
    299a:	98 23       	and	r25, r24
    299c:	11 f4       	brne	.+4      	; 0x29a2 <signalIoctl+0x2ce>
    299e:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <signalIoctl+0x122e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    29a2:	e0 e4       	ldi	r30, 0x40	; 64
    29a4:	f6 e0       	ldi	r31, 0x06	; 6
    29a6:	85 83       	std	Z+5, r24	; 0x05
    29a8:	cc 24       	eor	r12, r12
    29aa:	dd 24       	eor	r13, r13
    29ac:	76 01       	movw	r14, r12
    29ae:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    29b2:	90 91 60 06 	lds	r25, 0x0660
    29b6:	98 23       	and	r25, r24
    29b8:	11 f4       	brne	.+4      	; 0x29be <signalIoctl+0x2ea>
    29ba:	0c 94 85 1c 	jmp	0x390a	; 0x390a <signalIoctl+0x1236>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    29be:	e0 e6       	ldi	r30, 0x60	; 96
    29c0:	f6 e0       	ldi	r31, 0x06	; 6
    29c2:	85 83       	std	Z+5, r24	; 0x05
    29c4:	cc 24       	eor	r12, r12
    29c6:	dd 24       	eor	r13, r13
    29c8:	76 01       	movw	r14, r12
    29ca:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    29ce:	90 91 80 06 	lds	r25, 0x0680
    29d2:	98 23       	and	r25, r24
    29d4:	11 f4       	brne	.+4      	; 0x29da <signalIoctl+0x306>
    29d6:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <signalIoctl+0x123e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    29da:	e0 e8       	ldi	r30, 0x80	; 128
    29dc:	f6 e0       	ldi	r31, 0x06	; 6
    29de:	85 83       	std	Z+5, r24	; 0x05
    29e0:	cc 24       	eor	r12, r12
    29e2:	dd 24       	eor	r13, r13
    29e4:	76 01       	movw	r14, r12
    29e6:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    29ea:	90 91 a0 06 	lds	r25, 0x06A0
    29ee:	98 23       	and	r25, r24
    29f0:	11 f4       	brne	.+4      	; 0x29f6 <signalIoctl+0x322>
    29f2:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <signalIoctl+0x1246>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    29f6:	e0 ea       	ldi	r30, 0xA0	; 160
    29f8:	f6 e0       	ldi	r31, 0x06	; 6
    29fa:	85 83       	std	Z+5, r24	; 0x05
    29fc:	cc 24       	eor	r12, r12
    29fe:	dd 24       	eor	r13, r13
    2a00:	76 01       	movw	r14, r12
    2a02:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2a06:	90 91 e0 06 	lds	r25, 0x06E0
    2a0a:	98 23       	and	r25, r24
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <signalIoctl+0x33c>
    2a0e:	89 c7       	rjmp	.+3858   	; 0x3922 <signalIoctl+0x124e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    2a10:	e0 ee       	ldi	r30, 0xE0	; 224
    2a12:	f6 e0       	ldi	r31, 0x06	; 6
    2a14:	85 83       	std	Z+5, r24	; 0x05
    2a16:	cc 24       	eor	r12, r12
    2a18:	dd 24       	eor	r13, r13
    2a1a:	76 01       	movw	r14, r12
    2a1c:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2a20:	90 91 00 07 	lds	r25, 0x0700
    2a24:	98 23       	and	r25, r24
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <signalIoctl+0x356>
    2a28:	80 c7       	rjmp	.+3840   	; 0x392a <signalIoctl+0x1256>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    2a2a:	e0 e0       	ldi	r30, 0x00	; 0
    2a2c:	f7 e0       	ldi	r31, 0x07	; 7
    2a2e:	85 83       	std	Z+5, r24	; 0x05
    2a30:	cc 24       	eor	r12, r12
    2a32:	dd 24       	eor	r13, r13
    2a34:	76 01       	movw	r14, r12
    2a36:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2a3a:	90 91 20 07 	lds	r25, 0x0720
    2a3e:	98 23       	and	r25, r24
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <signalIoctl+0x370>
    2a42:	77 c7       	rjmp	.+3822   	; 0x3932 <signalIoctl+0x125e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    2a44:	e0 e2       	ldi	r30, 0x20	; 32
    2a46:	f7 e0       	ldi	r31, 0x07	; 7
    2a48:	85 83       	std	Z+5, r24	; 0x05
    2a4a:	cc 24       	eor	r12, r12
    2a4c:	dd 24       	eor	r13, r13
    2a4e:	76 01       	movw	r14, r12
    2a50:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2a54:	90 91 c0 07 	lds	r25, 0x07C0
    2a58:	98 23       	and	r25, r24
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <signalIoctl+0x38a>
    2a5c:	6e c7       	rjmp	.+3804   	; 0x393a <signalIoctl+0x1266>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    2a5e:	e0 ec       	ldi	r30, 0xC0	; 192
    2a60:	f7 e0       	ldi	r31, 0x07	; 7
    2a62:	85 83       	std	Z+5, r24	; 0x05
    2a64:	cc 24       	eor	r12, r12
    2a66:	dd 24       	eor	r13, r13
    2a68:	76 01       	movw	r14, r12
    2a6a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2a6e:	90 91 e0 07 	lds	r25, 0x07E0
    2a72:	98 23       	and	r25, r24
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <signalIoctl+0x3a4>
    2a76:	65 c7       	rjmp	.+3786   	; 0x3942 <signalIoctl+0x126e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    2a78:	e0 ee       	ldi	r30, 0xE0	; 224
    2a7a:	f7 e0       	ldi	r31, 0x07	; 7
    2a7c:	85 83       	std	Z+5, r24	; 0x05
    2a7e:	cc 24       	eor	r12, r12
    2a80:	dd 24       	eor	r13, r13
    2a82:	76 01       	movw	r14, r12
    2a84:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case RED_LED_OFF:*/

      case RED_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    2a88:	80 91 75 24 	lds	r24, 0x2475
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2a8c:	90 91 74 24 	lds	r25, 0x2474
    2a90:	95 30       	cpi	r25, 0x05	; 5
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <signalIoctl+0x3c2>
    2a94:	67 c0       	rjmp	.+206    	; 0x2b64 <signalIoctl+0x490>
    2a96:	96 30       	cpi	r25, 0x06	; 6
    2a98:	88 f4       	brcc	.+34     	; 0x2abc <signalIoctl+0x3e8>
    2a9a:	92 30       	cpi	r25, 0x02	; 2
    2a9c:	e1 f1       	breq	.+120    	; 0x2b16 <signalIoctl+0x442>
    2a9e:	93 30       	cpi	r25, 0x03	; 3
    2aa0:	30 f4       	brcc	.+12     	; 0x2aae <signalIoctl+0x3da>
    2aa2:	99 23       	and	r25, r25
    2aa4:	f1 f0       	breq	.+60     	; 0x2ae2 <signalIoctl+0x40e>
    2aa6:	91 30       	cpi	r25, 0x01	; 1
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <signalIoctl+0x3d8>
    2aaa:	4f c7       	rjmp	.+3742   	; 0x394a <signalIoctl+0x1276>
    2aac:	27 c0       	rjmp	.+78     	; 0x2afc <signalIoctl+0x428>
    2aae:	93 30       	cpi	r25, 0x03	; 3
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <signalIoctl+0x3e0>
    2ab2:	3e c0       	rjmp	.+124    	; 0x2b30 <signalIoctl+0x45c>
    2ab4:	94 30       	cpi	r25, 0x04	; 4
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <signalIoctl+0x3e6>
    2ab8:	48 c7       	rjmp	.+3728   	; 0x394a <signalIoctl+0x1276>
    2aba:	47 c0       	rjmp	.+142    	; 0x2b4a <signalIoctl+0x476>
    2abc:	98 30       	cpi	r25, 0x08	; 8
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <signalIoctl+0x3ee>
    2ac0:	78 c0       	rjmp	.+240    	; 0x2bb2 <signalIoctl+0x4de>
    2ac2:	99 30       	cpi	r25, 0x09	; 9
    2ac4:	38 f4       	brcc	.+14     	; 0x2ad4 <signalIoctl+0x400>
    2ac6:	96 30       	cpi	r25, 0x06	; 6
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <signalIoctl+0x3f8>
    2aca:	59 c0       	rjmp	.+178    	; 0x2b7e <signalIoctl+0x4aa>
    2acc:	97 30       	cpi	r25, 0x07	; 7
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <signalIoctl+0x3fe>
    2ad0:	3c c7       	rjmp	.+3704   	; 0x394a <signalIoctl+0x1276>
    2ad2:	62 c0       	rjmp	.+196    	; 0x2b98 <signalIoctl+0x4c4>
    2ad4:	99 30       	cpi	r25, 0x09	; 9
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <signalIoctl+0x406>
    2ad8:	79 c0       	rjmp	.+242    	; 0x2bcc <signalIoctl+0x4f8>
    2ada:	9a 30       	cpi	r25, 0x0A	; 10
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <signalIoctl+0x40c>
    2ade:	35 c7       	rjmp	.+3690   	; 0x394a <signalIoctl+0x1276>
    2ae0:	82 c0       	rjmp	.+260    	; 0x2be6 <signalIoctl+0x512>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2ae2:	90 91 00 06 	lds	r25, 0x0600
    2ae6:	98 23       	and	r25, r24
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <signalIoctl+0x418>
    2aea:	33 c7       	rjmp	.+3686   	; 0x3952 <signalIoctl+0x127e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    2aec:	e0 e0       	ldi	r30, 0x00	; 0
    2aee:	f6 e0       	ldi	r31, 0x06	; 6
    2af0:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    2af2:	cc 24       	eor	r12, r12
    2af4:	dd 24       	eor	r13, r13
    2af6:	76 01       	movw	r14, r12
    2af8:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2afc:	90 91 20 06 	lds	r25, 0x0620
    2b00:	98 23       	and	r25, r24
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <signalIoctl+0x432>
    2b04:	2a c7       	rjmp	.+3668   	; 0x395a <signalIoctl+0x1286>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    2b06:	e0 e2       	ldi	r30, 0x20	; 32
    2b08:	f6 e0       	ldi	r31, 0x06	; 6
    2b0a:	87 83       	std	Z+7, r24	; 0x07
    2b0c:	cc 24       	eor	r12, r12
    2b0e:	dd 24       	eor	r13, r13
    2b10:	76 01       	movw	r14, r12
    2b12:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2b16:	90 91 40 06 	lds	r25, 0x0640
    2b1a:	98 23       	and	r25, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <signalIoctl+0x44c>
    2b1e:	21 c7       	rjmp	.+3650   	; 0x3962 <signalIoctl+0x128e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    2b20:	e0 e4       	ldi	r30, 0x40	; 64
    2b22:	f6 e0       	ldi	r31, 0x06	; 6
    2b24:	87 83       	std	Z+7, r24	; 0x07
    2b26:	cc 24       	eor	r12, r12
    2b28:	dd 24       	eor	r13, r13
    2b2a:	76 01       	movw	r14, r12
    2b2c:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2b30:	90 91 60 06 	lds	r25, 0x0660
    2b34:	98 23       	and	r25, r24
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <signalIoctl+0x466>
    2b38:	18 c7       	rjmp	.+3632   	; 0x396a <signalIoctl+0x1296>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    2b3a:	e0 e6       	ldi	r30, 0x60	; 96
    2b3c:	f6 e0       	ldi	r31, 0x06	; 6
    2b3e:	87 83       	std	Z+7, r24	; 0x07
    2b40:	cc 24       	eor	r12, r12
    2b42:	dd 24       	eor	r13, r13
    2b44:	76 01       	movw	r14, r12
    2b46:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2b4a:	90 91 80 06 	lds	r25, 0x0680
    2b4e:	98 23       	and	r25, r24
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <signalIoctl+0x480>
    2b52:	0f c7       	rjmp	.+3614   	; 0x3972 <signalIoctl+0x129e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    2b54:	e0 e8       	ldi	r30, 0x80	; 128
    2b56:	f6 e0       	ldi	r31, 0x06	; 6
    2b58:	87 83       	std	Z+7, r24	; 0x07
    2b5a:	cc 24       	eor	r12, r12
    2b5c:	dd 24       	eor	r13, r13
    2b5e:	76 01       	movw	r14, r12
    2b60:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2b64:	90 91 a0 06 	lds	r25, 0x06A0
    2b68:	98 23       	and	r25, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <signalIoctl+0x49a>
    2b6c:	06 c7       	rjmp	.+3596   	; 0x397a <signalIoctl+0x12a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    2b6e:	e0 ea       	ldi	r30, 0xA0	; 160
    2b70:	f6 e0       	ldi	r31, 0x06	; 6
    2b72:	87 83       	std	Z+7, r24	; 0x07
    2b74:	cc 24       	eor	r12, r12
    2b76:	dd 24       	eor	r13, r13
    2b78:	76 01       	movw	r14, r12
    2b7a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2b7e:	90 91 e0 06 	lds	r25, 0x06E0
    2b82:	98 23       	and	r25, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <signalIoctl+0x4b4>
    2b86:	fd c6       	rjmp	.+3578   	; 0x3982 <signalIoctl+0x12ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    2b88:	e0 ee       	ldi	r30, 0xE0	; 224
    2b8a:	f6 e0       	ldi	r31, 0x06	; 6
    2b8c:	87 83       	std	Z+7, r24	; 0x07
    2b8e:	cc 24       	eor	r12, r12
    2b90:	dd 24       	eor	r13, r13
    2b92:	76 01       	movw	r14, r12
    2b94:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2b98:	90 91 00 07 	lds	r25, 0x0700
    2b9c:	98 23       	and	r25, r24
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <signalIoctl+0x4ce>
    2ba0:	f4 c6       	rjmp	.+3560   	; 0x398a <signalIoctl+0x12b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    2ba2:	e0 e0       	ldi	r30, 0x00	; 0
    2ba4:	f7 e0       	ldi	r31, 0x07	; 7
    2ba6:	87 83       	std	Z+7, r24	; 0x07
    2ba8:	cc 24       	eor	r12, r12
    2baa:	dd 24       	eor	r13, r13
    2bac:	76 01       	movw	r14, r12
    2bae:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2bb2:	90 91 20 07 	lds	r25, 0x0720
    2bb6:	98 23       	and	r25, r24
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <signalIoctl+0x4e8>
    2bba:	eb c6       	rjmp	.+3542   	; 0x3992 <signalIoctl+0x12be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    2bbc:	e0 e2       	ldi	r30, 0x20	; 32
    2bbe:	f7 e0       	ldi	r31, 0x07	; 7
    2bc0:	87 83       	std	Z+7, r24	; 0x07
    2bc2:	cc 24       	eor	r12, r12
    2bc4:	dd 24       	eor	r13, r13
    2bc6:	76 01       	movw	r14, r12
    2bc8:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2bcc:	90 91 c0 07 	lds	r25, 0x07C0
    2bd0:	98 23       	and	r25, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <signalIoctl+0x502>
    2bd4:	e2 c6       	rjmp	.+3524   	; 0x399a <signalIoctl+0x12c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    2bd6:	e0 ec       	ldi	r30, 0xC0	; 192
    2bd8:	f7 e0       	ldi	r31, 0x07	; 7
    2bda:	87 83       	std	Z+7, r24	; 0x07
    2bdc:	cc 24       	eor	r12, r12
    2bde:	dd 24       	eor	r13, r13
    2be0:	76 01       	movw	r14, r12
    2be2:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2be6:	90 91 e0 07 	lds	r25, 0x07E0
    2bea:	98 23       	and	r25, r24
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <signalIoctl+0x51c>
    2bee:	d9 c6       	rjmp	.+3506   	; 0x39a2 <signalIoctl+0x12ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    2bf0:	e0 ee       	ldi	r30, 0xE0	; 224
    2bf2:	f7 e0       	ldi	r31, 0x07	; 7
    2bf4:	87 83       	std	Z+7, r24	; 0x07
    2bf6:	cc 24       	eor	r12, r12
    2bf8:	dd 24       	eor	r13, r13
    2bfa:	76 01       	movw	r14, r12
    2bfc:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case RED_LED_TOGGLE:*/

      case GREEN_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    2c00:	80 91 77 24 	lds	r24, 0x2477
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2c04:	90 91 74 24 	lds	r25, 0x2474
    2c08:	95 30       	cpi	r25, 0x05	; 5
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <signalIoctl+0x53a>
    2c0c:	67 c0       	rjmp	.+206    	; 0x2cdc <signalIoctl+0x608>
    2c0e:	96 30       	cpi	r25, 0x06	; 6
    2c10:	88 f4       	brcc	.+34     	; 0x2c34 <signalIoctl+0x560>
    2c12:	92 30       	cpi	r25, 0x02	; 2
    2c14:	e1 f1       	breq	.+120    	; 0x2c8e <signalIoctl+0x5ba>
    2c16:	93 30       	cpi	r25, 0x03	; 3
    2c18:	30 f4       	brcc	.+12     	; 0x2c26 <signalIoctl+0x552>
    2c1a:	99 23       	and	r25, r25
    2c1c:	f1 f0       	breq	.+60     	; 0x2c5a <signalIoctl+0x586>
    2c1e:	91 30       	cpi	r25, 0x01	; 1
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <signalIoctl+0x550>
    2c22:	c3 c6       	rjmp	.+3462   	; 0x39aa <signalIoctl+0x12d6>
    2c24:	27 c0       	rjmp	.+78     	; 0x2c74 <signalIoctl+0x5a0>
    2c26:	93 30       	cpi	r25, 0x03	; 3
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <signalIoctl+0x558>
    2c2a:	3e c0       	rjmp	.+124    	; 0x2ca8 <signalIoctl+0x5d4>
    2c2c:	94 30       	cpi	r25, 0x04	; 4
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <signalIoctl+0x55e>
    2c30:	bc c6       	rjmp	.+3448   	; 0x39aa <signalIoctl+0x12d6>
    2c32:	47 c0       	rjmp	.+142    	; 0x2cc2 <signalIoctl+0x5ee>
    2c34:	98 30       	cpi	r25, 0x08	; 8
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <signalIoctl+0x566>
    2c38:	78 c0       	rjmp	.+240    	; 0x2d2a <signalIoctl+0x656>
    2c3a:	99 30       	cpi	r25, 0x09	; 9
    2c3c:	38 f4       	brcc	.+14     	; 0x2c4c <signalIoctl+0x578>
    2c3e:	96 30       	cpi	r25, 0x06	; 6
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <signalIoctl+0x570>
    2c42:	59 c0       	rjmp	.+178    	; 0x2cf6 <signalIoctl+0x622>
    2c44:	97 30       	cpi	r25, 0x07	; 7
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <signalIoctl+0x576>
    2c48:	b0 c6       	rjmp	.+3424   	; 0x39aa <signalIoctl+0x12d6>
    2c4a:	62 c0       	rjmp	.+196    	; 0x2d10 <signalIoctl+0x63c>
    2c4c:	99 30       	cpi	r25, 0x09	; 9
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <signalIoctl+0x57e>
    2c50:	79 c0       	rjmp	.+242    	; 0x2d44 <signalIoctl+0x670>
    2c52:	9a 30       	cpi	r25, 0x0A	; 10
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <signalIoctl+0x584>
    2c56:	a9 c6       	rjmp	.+3410   	; 0x39aa <signalIoctl+0x12d6>
    2c58:	82 c0       	rjmp	.+260    	; 0x2d5e <signalIoctl+0x68a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2c5a:	90 91 00 06 	lds	r25, 0x0600
    2c5e:	98 23       	and	r25, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <signalIoctl+0x590>
    2c62:	a7 c6       	rjmp	.+3406   	; 0x39b2 <signalIoctl+0x12de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    2c64:	e0 e0       	ldi	r30, 0x00	; 0
    2c66:	f6 e0       	ldi	r31, 0x06	; 6
    2c68:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    2c6a:	cc 24       	eor	r12, r12
    2c6c:	dd 24       	eor	r13, r13
    2c6e:	76 01       	movw	r14, r12
    2c70:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2c74:	90 91 20 06 	lds	r25, 0x0620
    2c78:	98 23       	and	r25, r24
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <signalIoctl+0x5aa>
    2c7c:	9e c6       	rjmp	.+3388   	; 0x39ba <signalIoctl+0x12e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    2c7e:	e0 e2       	ldi	r30, 0x20	; 32
    2c80:	f6 e0       	ldi	r31, 0x06	; 6
    2c82:	86 83       	std	Z+6, r24	; 0x06
    2c84:	cc 24       	eor	r12, r12
    2c86:	dd 24       	eor	r13, r13
    2c88:	76 01       	movw	r14, r12
    2c8a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2c8e:	90 91 40 06 	lds	r25, 0x0640
    2c92:	98 23       	and	r25, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <signalIoctl+0x5c4>
    2c96:	95 c6       	rjmp	.+3370   	; 0x39c2 <signalIoctl+0x12ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    2c98:	e0 e4       	ldi	r30, 0x40	; 64
    2c9a:	f6 e0       	ldi	r31, 0x06	; 6
    2c9c:	86 83       	std	Z+6, r24	; 0x06
    2c9e:	cc 24       	eor	r12, r12
    2ca0:	dd 24       	eor	r13, r13
    2ca2:	76 01       	movw	r14, r12
    2ca4:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2ca8:	90 91 60 06 	lds	r25, 0x0660
    2cac:	98 23       	and	r25, r24
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <signalIoctl+0x5de>
    2cb0:	8c c6       	rjmp	.+3352   	; 0x39ca <signalIoctl+0x12f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    2cb2:	e0 e6       	ldi	r30, 0x60	; 96
    2cb4:	f6 e0       	ldi	r31, 0x06	; 6
    2cb6:	86 83       	std	Z+6, r24	; 0x06
    2cb8:	cc 24       	eor	r12, r12
    2cba:	dd 24       	eor	r13, r13
    2cbc:	76 01       	movw	r14, r12
    2cbe:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2cc2:	90 91 80 06 	lds	r25, 0x0680
    2cc6:	98 23       	and	r25, r24
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <signalIoctl+0x5f8>
    2cca:	83 c6       	rjmp	.+3334   	; 0x39d2 <signalIoctl+0x12fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    2ccc:	e0 e8       	ldi	r30, 0x80	; 128
    2cce:	f6 e0       	ldi	r31, 0x06	; 6
    2cd0:	86 83       	std	Z+6, r24	; 0x06
    2cd2:	cc 24       	eor	r12, r12
    2cd4:	dd 24       	eor	r13, r13
    2cd6:	76 01       	movw	r14, r12
    2cd8:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2cdc:	90 91 a0 06 	lds	r25, 0x06A0
    2ce0:	98 23       	and	r25, r24
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <signalIoctl+0x612>
    2ce4:	7a c6       	rjmp	.+3316   	; 0x39da <signalIoctl+0x1306>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    2ce6:	e0 ea       	ldi	r30, 0xA0	; 160
    2ce8:	f6 e0       	ldi	r31, 0x06	; 6
    2cea:	86 83       	std	Z+6, r24	; 0x06
    2cec:	cc 24       	eor	r12, r12
    2cee:	dd 24       	eor	r13, r13
    2cf0:	76 01       	movw	r14, r12
    2cf2:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2cf6:	90 91 e0 06 	lds	r25, 0x06E0
    2cfa:	98 23       	and	r25, r24
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <signalIoctl+0x62c>
    2cfe:	71 c6       	rjmp	.+3298   	; 0x39e2 <signalIoctl+0x130e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    2d00:	e0 ee       	ldi	r30, 0xE0	; 224
    2d02:	f6 e0       	ldi	r31, 0x06	; 6
    2d04:	86 83       	std	Z+6, r24	; 0x06
    2d06:	cc 24       	eor	r12, r12
    2d08:	dd 24       	eor	r13, r13
    2d0a:	76 01       	movw	r14, r12
    2d0c:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2d10:	90 91 00 07 	lds	r25, 0x0700
    2d14:	98 23       	and	r25, r24
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <signalIoctl+0x646>
    2d18:	68 c6       	rjmp	.+3280   	; 0x39ea <signalIoctl+0x1316>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    2d1a:	e0 e0       	ldi	r30, 0x00	; 0
    2d1c:	f7 e0       	ldi	r31, 0x07	; 7
    2d1e:	86 83       	std	Z+6, r24	; 0x06
    2d20:	cc 24       	eor	r12, r12
    2d22:	dd 24       	eor	r13, r13
    2d24:	76 01       	movw	r14, r12
    2d26:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2d2a:	90 91 20 07 	lds	r25, 0x0720
    2d2e:	98 23       	and	r25, r24
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <signalIoctl+0x660>
    2d32:	5f c6       	rjmp	.+3262   	; 0x39f2 <signalIoctl+0x131e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    2d34:	e0 e2       	ldi	r30, 0x20	; 32
    2d36:	f7 e0       	ldi	r31, 0x07	; 7
    2d38:	86 83       	std	Z+6, r24	; 0x06
    2d3a:	cc 24       	eor	r12, r12
    2d3c:	dd 24       	eor	r13, r13
    2d3e:	76 01       	movw	r14, r12
    2d40:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2d44:	90 91 c0 07 	lds	r25, 0x07C0
    2d48:	98 23       	and	r25, r24
    2d4a:	09 f4       	brne	.+2      	; 0x2d4e <signalIoctl+0x67a>
    2d4c:	56 c6       	rjmp	.+3244   	; 0x39fa <signalIoctl+0x1326>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    2d4e:	e0 ec       	ldi	r30, 0xC0	; 192
    2d50:	f7 e0       	ldi	r31, 0x07	; 7
    2d52:	86 83       	std	Z+6, r24	; 0x06
    2d54:	cc 24       	eor	r12, r12
    2d56:	dd 24       	eor	r13, r13
    2d58:	76 01       	movw	r14, r12
    2d5a:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2d5e:	90 91 e0 07 	lds	r25, 0x07E0
    2d62:	98 23       	and	r25, r24
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <signalIoctl+0x694>
    2d66:	4d c6       	rjmp	.+3226   	; 0x3a02 <signalIoctl+0x132e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    2d68:	e0 ee       	ldi	r30, 0xE0	; 224
    2d6a:	f7 e0       	ldi	r31, 0x07	; 7
    2d6c:	86 83       	std	Z+6, r24	; 0x06
    2d6e:	cc 24       	eor	r12, r12
    2d70:	dd 24       	eor	r13, r13
    2d72:	76 01       	movw	r14, r12
    2d74:	0c 94 84 1e 	jmp	0x3d08	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case GREEN_LED_ON:*/

      case GREEN_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    2d78:	80 91 77 24 	lds	r24, 0x2477
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2d7c:	90 91 74 24 	lds	r25, 0x2474
    2d80:	95 30       	cpi	r25, 0x05	; 5
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <signalIoctl+0x6b2>
    2d84:	61 c0       	rjmp	.+194    	; 0x2e48 <signalIoctl+0x774>
    2d86:	96 30       	cpi	r25, 0x06	; 6
    2d88:	80 f4       	brcc	.+32     	; 0x2daa <signalIoctl+0x6d6>
    2d8a:	92 30       	cpi	r25, 0x02	; 2
    2d8c:	c9 f1       	breq	.+114    	; 0x2e00 <signalIoctl+0x72c>
    2d8e:	93 30       	cpi	r25, 0x03	; 3
    2d90:	30 f4       	brcc	.+12     	; 0x2d9e <signalIoctl+0x6ca>
    2d92:	99 23       	and	r25, r25
    2d94:	e9 f0       	breq	.+58     	; 0x2dd0 <signalIoctl+0x6fc>
    2d96:	91 30       	cpi	r25, 0x01	; 1
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <signalIoctl+0x6c8>
    2d9a:	37 c6       	rjmp	.+3182   	; 0x3a0a <signalIoctl+0x1336>
    2d9c:	25 c0       	rjmp	.+74     	; 0x2de8 <signalIoctl+0x714>
    2d9e:	93 30       	cpi	r25, 0x03	; 3
    2da0:	d9 f1       	breq	.+118    	; 0x2e18 <signalIoctl+0x744>
    2da2:	94 30       	cpi	r25, 0x04	; 4
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <signalIoctl+0x6d4>
    2da6:	31 c6       	rjmp	.+3170   	; 0x3a0a <signalIoctl+0x1336>
    2da8:	43 c0       	rjmp	.+134    	; 0x2e30 <signalIoctl+0x75c>
    2daa:	98 30       	cpi	r25, 0x08	; 8
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <signalIoctl+0x6dc>
    2dae:	70 c0       	rjmp	.+224    	; 0x2e90 <signalIoctl+0x7bc>
    2db0:	99 30       	cpi	r25, 0x09	; 9
    2db2:	38 f4       	brcc	.+14     	; 0x2dc2 <signalIoctl+0x6ee>
    2db4:	96 30       	cpi	r25, 0x06	; 6
    2db6:	09 f4       	brne	.+2      	; 0x2dba <signalIoctl+0x6e6>
    2db8:	53 c0       	rjmp	.+166    	; 0x2e60 <signalIoctl+0x78c>
    2dba:	97 30       	cpi	r25, 0x07	; 7
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <signalIoctl+0x6ec>
    2dbe:	25 c6       	rjmp	.+3146   	; 0x3a0a <signalIoctl+0x1336>
    2dc0:	5b c0       	rjmp	.+182    	; 0x2e78 <signalIoctl+0x7a4>
    2dc2:	99 30       	cpi	r25, 0x09	; 9
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <signalIoctl+0x6f4>
    2dc6:	70 c0       	rjmp	.+224    	; 0x2ea8 <signalIoctl+0x7d4>
    2dc8:	9a 30       	cpi	r25, 0x0A	; 10
    2dca:	09 f0       	breq	.+2      	; 0x2dce <signalIoctl+0x6fa>
    2dcc:	1e c6       	rjmp	.+3132   	; 0x3a0a <signalIoctl+0x1336>
    2dce:	78 c0       	rjmp	.+240    	; 0x2ec0 <signalIoctl+0x7ec>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2dd0:	90 91 00 06 	lds	r25, 0x0600
    2dd4:	98 23       	and	r25, r24
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <signalIoctl+0x706>
    2dd8:	1c c6       	rjmp	.+3128   	; 0x3a12 <signalIoctl+0x133e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    2dda:	e0 e0       	ldi	r30, 0x00	; 0
    2ddc:	f6 e0       	ldi	r31, 0x06	; 6
    2dde:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    2de0:	cc 24       	eor	r12, r12
    2de2:	dd 24       	eor	r13, r13
    2de4:	76 01       	movw	r14, r12
    2de6:	90 c7       	rjmp	.+3872   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2de8:	90 91 20 06 	lds	r25, 0x0620
    2dec:	98 23       	and	r25, r24
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <signalIoctl+0x71e>
    2df0:	14 c6       	rjmp	.+3112   	; 0x3a1a <signalIoctl+0x1346>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    2df2:	e0 e2       	ldi	r30, 0x20	; 32
    2df4:	f6 e0       	ldi	r31, 0x06	; 6
    2df6:	85 83       	std	Z+5, r24	; 0x05
    2df8:	cc 24       	eor	r12, r12
    2dfa:	dd 24       	eor	r13, r13
    2dfc:	76 01       	movw	r14, r12
    2dfe:	84 c7       	rjmp	.+3848   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2e00:	90 91 40 06 	lds	r25, 0x0640
    2e04:	98 23       	and	r25, r24
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <signalIoctl+0x736>
    2e08:	0c c6       	rjmp	.+3096   	; 0x3a22 <signalIoctl+0x134e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    2e0a:	e0 e4       	ldi	r30, 0x40	; 64
    2e0c:	f6 e0       	ldi	r31, 0x06	; 6
    2e0e:	85 83       	std	Z+5, r24	; 0x05
    2e10:	cc 24       	eor	r12, r12
    2e12:	dd 24       	eor	r13, r13
    2e14:	76 01       	movw	r14, r12
    2e16:	78 c7       	rjmp	.+3824   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2e18:	90 91 60 06 	lds	r25, 0x0660
    2e1c:	98 23       	and	r25, r24
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <signalIoctl+0x74e>
    2e20:	04 c6       	rjmp	.+3080   	; 0x3a2a <signalIoctl+0x1356>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    2e22:	e0 e6       	ldi	r30, 0x60	; 96
    2e24:	f6 e0       	ldi	r31, 0x06	; 6
    2e26:	85 83       	std	Z+5, r24	; 0x05
    2e28:	cc 24       	eor	r12, r12
    2e2a:	dd 24       	eor	r13, r13
    2e2c:	76 01       	movw	r14, r12
    2e2e:	6c c7       	rjmp	.+3800   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2e30:	90 91 80 06 	lds	r25, 0x0680
    2e34:	98 23       	and	r25, r24
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <signalIoctl+0x766>
    2e38:	fc c5       	rjmp	.+3064   	; 0x3a32 <signalIoctl+0x135e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    2e3a:	e0 e8       	ldi	r30, 0x80	; 128
    2e3c:	f6 e0       	ldi	r31, 0x06	; 6
    2e3e:	85 83       	std	Z+5, r24	; 0x05
    2e40:	cc 24       	eor	r12, r12
    2e42:	dd 24       	eor	r13, r13
    2e44:	76 01       	movw	r14, r12
    2e46:	60 c7       	rjmp	.+3776   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2e48:	90 91 a0 06 	lds	r25, 0x06A0
    2e4c:	98 23       	and	r25, r24
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <signalIoctl+0x77e>
    2e50:	f4 c5       	rjmp	.+3048   	; 0x3a3a <signalIoctl+0x1366>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    2e52:	e0 ea       	ldi	r30, 0xA0	; 160
    2e54:	f6 e0       	ldi	r31, 0x06	; 6
    2e56:	85 83       	std	Z+5, r24	; 0x05
    2e58:	cc 24       	eor	r12, r12
    2e5a:	dd 24       	eor	r13, r13
    2e5c:	76 01       	movw	r14, r12
    2e5e:	54 c7       	rjmp	.+3752   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2e60:	90 91 e0 06 	lds	r25, 0x06E0
    2e64:	98 23       	and	r25, r24
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <signalIoctl+0x796>
    2e68:	ec c5       	rjmp	.+3032   	; 0x3a42 <signalIoctl+0x136e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    2e6a:	e0 ee       	ldi	r30, 0xE0	; 224
    2e6c:	f6 e0       	ldi	r31, 0x06	; 6
    2e6e:	85 83       	std	Z+5, r24	; 0x05
    2e70:	cc 24       	eor	r12, r12
    2e72:	dd 24       	eor	r13, r13
    2e74:	76 01       	movw	r14, r12
    2e76:	48 c7       	rjmp	.+3728   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2e78:	90 91 00 07 	lds	r25, 0x0700
    2e7c:	98 23       	and	r25, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <signalIoctl+0x7ae>
    2e80:	e4 c5       	rjmp	.+3016   	; 0x3a4a <signalIoctl+0x1376>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    2e82:	e0 e0       	ldi	r30, 0x00	; 0
    2e84:	f7 e0       	ldi	r31, 0x07	; 7
    2e86:	85 83       	std	Z+5, r24	; 0x05
    2e88:	cc 24       	eor	r12, r12
    2e8a:	dd 24       	eor	r13, r13
    2e8c:	76 01       	movw	r14, r12
    2e8e:	3c c7       	rjmp	.+3704   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2e90:	90 91 20 07 	lds	r25, 0x0720
    2e94:	98 23       	and	r25, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <signalIoctl+0x7c6>
    2e98:	dc c5       	rjmp	.+3000   	; 0x3a52 <signalIoctl+0x137e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    2e9a:	e0 e2       	ldi	r30, 0x20	; 32
    2e9c:	f7 e0       	ldi	r31, 0x07	; 7
    2e9e:	85 83       	std	Z+5, r24	; 0x05
    2ea0:	cc 24       	eor	r12, r12
    2ea2:	dd 24       	eor	r13, r13
    2ea4:	76 01       	movw	r14, r12
    2ea6:	30 c7       	rjmp	.+3680   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2ea8:	90 91 c0 07 	lds	r25, 0x07C0
    2eac:	98 23       	and	r25, r24
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <signalIoctl+0x7de>
    2eb0:	d4 c5       	rjmp	.+2984   	; 0x3a5a <signalIoctl+0x1386>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    2eb2:	e0 ec       	ldi	r30, 0xC0	; 192
    2eb4:	f7 e0       	ldi	r31, 0x07	; 7
    2eb6:	85 83       	std	Z+5, r24	; 0x05
    2eb8:	cc 24       	eor	r12, r12
    2eba:	dd 24       	eor	r13, r13
    2ebc:	76 01       	movw	r14, r12
    2ebe:	24 c7       	rjmp	.+3656   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2ec0:	90 91 e0 07 	lds	r25, 0x07E0
    2ec4:	98 23       	and	r25, r24
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <signalIoctl+0x7f6>
    2ec8:	cc c5       	rjmp	.+2968   	; 0x3a62 <signalIoctl+0x138e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    2eca:	e0 ee       	ldi	r30, 0xE0	; 224
    2ecc:	f7 e0       	ldi	r31, 0x07	; 7
    2ece:	85 83       	std	Z+5, r24	; 0x05
    2ed0:	cc 24       	eor	r12, r12
    2ed2:	dd 24       	eor	r13, r13
    2ed4:	76 01       	movw	r14, r12
    2ed6:	18 c7       	rjmp	.+3632   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case GREEN_LED_OFF:*/

      case GREEN_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    2ed8:	80 91 77 24 	lds	r24, 0x2477
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2edc:	90 91 74 24 	lds	r25, 0x2474
    2ee0:	95 30       	cpi	r25, 0x05	; 5
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <signalIoctl+0x812>
    2ee4:	61 c0       	rjmp	.+194    	; 0x2fa8 <signalIoctl+0x8d4>
    2ee6:	96 30       	cpi	r25, 0x06	; 6
    2ee8:	80 f4       	brcc	.+32     	; 0x2f0a <signalIoctl+0x836>
    2eea:	92 30       	cpi	r25, 0x02	; 2
    2eec:	c9 f1       	breq	.+114    	; 0x2f60 <signalIoctl+0x88c>
    2eee:	93 30       	cpi	r25, 0x03	; 3
    2ef0:	30 f4       	brcc	.+12     	; 0x2efe <signalIoctl+0x82a>
    2ef2:	99 23       	and	r25, r25
    2ef4:	e9 f0       	breq	.+58     	; 0x2f30 <signalIoctl+0x85c>
    2ef6:	91 30       	cpi	r25, 0x01	; 1
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <signalIoctl+0x828>
    2efa:	b7 c5       	rjmp	.+2926   	; 0x3a6a <signalIoctl+0x1396>
    2efc:	25 c0       	rjmp	.+74     	; 0x2f48 <signalIoctl+0x874>
    2efe:	93 30       	cpi	r25, 0x03	; 3
    2f00:	d9 f1       	breq	.+118    	; 0x2f78 <signalIoctl+0x8a4>
    2f02:	94 30       	cpi	r25, 0x04	; 4
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <signalIoctl+0x834>
    2f06:	b1 c5       	rjmp	.+2914   	; 0x3a6a <signalIoctl+0x1396>
    2f08:	43 c0       	rjmp	.+134    	; 0x2f90 <signalIoctl+0x8bc>
    2f0a:	98 30       	cpi	r25, 0x08	; 8
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <signalIoctl+0x83c>
    2f0e:	70 c0       	rjmp	.+224    	; 0x2ff0 <signalIoctl+0x91c>
    2f10:	99 30       	cpi	r25, 0x09	; 9
    2f12:	38 f4       	brcc	.+14     	; 0x2f22 <signalIoctl+0x84e>
    2f14:	96 30       	cpi	r25, 0x06	; 6
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <signalIoctl+0x846>
    2f18:	53 c0       	rjmp	.+166    	; 0x2fc0 <signalIoctl+0x8ec>
    2f1a:	97 30       	cpi	r25, 0x07	; 7
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <signalIoctl+0x84c>
    2f1e:	a5 c5       	rjmp	.+2890   	; 0x3a6a <signalIoctl+0x1396>
    2f20:	5b c0       	rjmp	.+182    	; 0x2fd8 <signalIoctl+0x904>
    2f22:	99 30       	cpi	r25, 0x09	; 9
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <signalIoctl+0x854>
    2f26:	70 c0       	rjmp	.+224    	; 0x3008 <signalIoctl+0x934>
    2f28:	9a 30       	cpi	r25, 0x0A	; 10
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <signalIoctl+0x85a>
    2f2c:	9e c5       	rjmp	.+2876   	; 0x3a6a <signalIoctl+0x1396>
    2f2e:	78 c0       	rjmp	.+240    	; 0x3020 <signalIoctl+0x94c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2f30:	90 91 00 06 	lds	r25, 0x0600
    2f34:	98 23       	and	r25, r24
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <signalIoctl+0x866>
    2f38:	9c c5       	rjmp	.+2872   	; 0x3a72 <signalIoctl+0x139e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    2f3a:	e0 e0       	ldi	r30, 0x00	; 0
    2f3c:	f6 e0       	ldi	r31, 0x06	; 6
    2f3e:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    2f40:	cc 24       	eor	r12, r12
    2f42:	dd 24       	eor	r13, r13
    2f44:	76 01       	movw	r14, r12
    2f46:	e0 c6       	rjmp	.+3520   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2f48:	90 91 20 06 	lds	r25, 0x0620
    2f4c:	98 23       	and	r25, r24
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <signalIoctl+0x87e>
    2f50:	94 c5       	rjmp	.+2856   	; 0x3a7a <signalIoctl+0x13a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    2f52:	e0 e2       	ldi	r30, 0x20	; 32
    2f54:	f6 e0       	ldi	r31, 0x06	; 6
    2f56:	87 83       	std	Z+7, r24	; 0x07
    2f58:	cc 24       	eor	r12, r12
    2f5a:	dd 24       	eor	r13, r13
    2f5c:	76 01       	movw	r14, r12
    2f5e:	d4 c6       	rjmp	.+3496   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2f60:	90 91 40 06 	lds	r25, 0x0640
    2f64:	98 23       	and	r25, r24
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <signalIoctl+0x896>
    2f68:	8c c5       	rjmp	.+2840   	; 0x3a82 <signalIoctl+0x13ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    2f6a:	e0 e4       	ldi	r30, 0x40	; 64
    2f6c:	f6 e0       	ldi	r31, 0x06	; 6
    2f6e:	87 83       	std	Z+7, r24	; 0x07
    2f70:	cc 24       	eor	r12, r12
    2f72:	dd 24       	eor	r13, r13
    2f74:	76 01       	movw	r14, r12
    2f76:	c8 c6       	rjmp	.+3472   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2f78:	90 91 60 06 	lds	r25, 0x0660
    2f7c:	98 23       	and	r25, r24
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <signalIoctl+0x8ae>
    2f80:	84 c5       	rjmp	.+2824   	; 0x3a8a <signalIoctl+0x13b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    2f82:	e0 e6       	ldi	r30, 0x60	; 96
    2f84:	f6 e0       	ldi	r31, 0x06	; 6
    2f86:	87 83       	std	Z+7, r24	; 0x07
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
    2f8c:	76 01       	movw	r14, r12
    2f8e:	bc c6       	rjmp	.+3448   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2f90:	90 91 80 06 	lds	r25, 0x0680
    2f94:	98 23       	and	r25, r24
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <signalIoctl+0x8c6>
    2f98:	7c c5       	rjmp	.+2808   	; 0x3a92 <signalIoctl+0x13be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    2f9a:	e0 e8       	ldi	r30, 0x80	; 128
    2f9c:	f6 e0       	ldi	r31, 0x06	; 6
    2f9e:	87 83       	std	Z+7, r24	; 0x07
    2fa0:	cc 24       	eor	r12, r12
    2fa2:	dd 24       	eor	r13, r13
    2fa4:	76 01       	movw	r14, r12
    2fa6:	b0 c6       	rjmp	.+3424   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2fa8:	90 91 a0 06 	lds	r25, 0x06A0
    2fac:	98 23       	and	r25, r24
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <signalIoctl+0x8de>
    2fb0:	74 c5       	rjmp	.+2792   	; 0x3a9a <signalIoctl+0x13c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    2fb2:	e0 ea       	ldi	r30, 0xA0	; 160
    2fb4:	f6 e0       	ldi	r31, 0x06	; 6
    2fb6:	87 83       	std	Z+7, r24	; 0x07
    2fb8:	cc 24       	eor	r12, r12
    2fba:	dd 24       	eor	r13, r13
    2fbc:	76 01       	movw	r14, r12
    2fbe:	a4 c6       	rjmp	.+3400   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2fc0:	90 91 e0 06 	lds	r25, 0x06E0
    2fc4:	98 23       	and	r25, r24
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <signalIoctl+0x8f6>
    2fc8:	6c c5       	rjmp	.+2776   	; 0x3aa2 <signalIoctl+0x13ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    2fca:	e0 ee       	ldi	r30, 0xE0	; 224
    2fcc:	f6 e0       	ldi	r31, 0x06	; 6
    2fce:	87 83       	std	Z+7, r24	; 0x07
    2fd0:	cc 24       	eor	r12, r12
    2fd2:	dd 24       	eor	r13, r13
    2fd4:	76 01       	movw	r14, r12
    2fd6:	98 c6       	rjmp	.+3376   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2fd8:	90 91 00 07 	lds	r25, 0x0700
    2fdc:	98 23       	and	r25, r24
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <signalIoctl+0x90e>
    2fe0:	64 c5       	rjmp	.+2760   	; 0x3aaa <signalIoctl+0x13d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    2fe2:	e0 e0       	ldi	r30, 0x00	; 0
    2fe4:	f7 e0       	ldi	r31, 0x07	; 7
    2fe6:	87 83       	std	Z+7, r24	; 0x07
    2fe8:	cc 24       	eor	r12, r12
    2fea:	dd 24       	eor	r13, r13
    2fec:	76 01       	movw	r14, r12
    2fee:	8c c6       	rjmp	.+3352   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2ff0:	90 91 20 07 	lds	r25, 0x0720
    2ff4:	98 23       	and	r25, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <signalIoctl+0x926>
    2ff8:	5c c5       	rjmp	.+2744   	; 0x3ab2 <signalIoctl+0x13de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    2ffa:	e0 e2       	ldi	r30, 0x20	; 32
    2ffc:	f7 e0       	ldi	r31, 0x07	; 7
    2ffe:	87 83       	std	Z+7, r24	; 0x07
    3000:	cc 24       	eor	r12, r12
    3002:	dd 24       	eor	r13, r13
    3004:	76 01       	movw	r14, r12
    3006:	80 c6       	rjmp	.+3328   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3008:	90 91 c0 07 	lds	r25, 0x07C0
    300c:	98 23       	and	r25, r24
    300e:	09 f4       	brne	.+2      	; 0x3012 <signalIoctl+0x93e>
    3010:	54 c5       	rjmp	.+2728   	; 0x3aba <signalIoctl+0x13e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    3012:	e0 ec       	ldi	r30, 0xC0	; 192
    3014:	f7 e0       	ldi	r31, 0x07	; 7
    3016:	87 83       	std	Z+7, r24	; 0x07
    3018:	cc 24       	eor	r12, r12
    301a:	dd 24       	eor	r13, r13
    301c:	76 01       	movw	r14, r12
    301e:	74 c6       	rjmp	.+3304   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3020:	90 91 e0 07 	lds	r25, 0x07E0
    3024:	98 23       	and	r25, r24
    3026:	09 f4       	brne	.+2      	; 0x302a <signalIoctl+0x956>
    3028:	4c c5       	rjmp	.+2712   	; 0x3ac2 <signalIoctl+0x13ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    302a:	e0 ee       	ldi	r30, 0xE0	; 224
    302c:	f7 e0       	ldi	r31, 0x07	; 7
    302e:	87 83       	std	Z+7, r24	; 0x07
    3030:	cc 24       	eor	r12, r12
    3032:	dd 24       	eor	r13, r13
    3034:	76 01       	movw	r14, r12
    3036:	68 c6       	rjmp	.+3280   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case GREEN_LED_TOGGLE:*/

      case YELLOW_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    3038:	80 91 76 24 	lds	r24, 0x2476
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    303c:	90 91 74 24 	lds	r25, 0x2474
    3040:	95 30       	cpi	r25, 0x05	; 5
    3042:	09 f4       	brne	.+2      	; 0x3046 <signalIoctl+0x972>
    3044:	61 c0       	rjmp	.+194    	; 0x3108 <signalIoctl+0xa34>
    3046:	96 30       	cpi	r25, 0x06	; 6
    3048:	80 f4       	brcc	.+32     	; 0x306a <signalIoctl+0x996>
    304a:	92 30       	cpi	r25, 0x02	; 2
    304c:	c9 f1       	breq	.+114    	; 0x30c0 <signalIoctl+0x9ec>
    304e:	93 30       	cpi	r25, 0x03	; 3
    3050:	30 f4       	brcc	.+12     	; 0x305e <signalIoctl+0x98a>
    3052:	99 23       	and	r25, r25
    3054:	e9 f0       	breq	.+58     	; 0x3090 <signalIoctl+0x9bc>
    3056:	91 30       	cpi	r25, 0x01	; 1
    3058:	09 f0       	breq	.+2      	; 0x305c <signalIoctl+0x988>
    305a:	37 c5       	rjmp	.+2670   	; 0x3aca <signalIoctl+0x13f6>
    305c:	25 c0       	rjmp	.+74     	; 0x30a8 <signalIoctl+0x9d4>
    305e:	93 30       	cpi	r25, 0x03	; 3
    3060:	d9 f1       	breq	.+118    	; 0x30d8 <signalIoctl+0xa04>
    3062:	94 30       	cpi	r25, 0x04	; 4
    3064:	09 f0       	breq	.+2      	; 0x3068 <signalIoctl+0x994>
    3066:	31 c5       	rjmp	.+2658   	; 0x3aca <signalIoctl+0x13f6>
    3068:	43 c0       	rjmp	.+134    	; 0x30f0 <signalIoctl+0xa1c>
    306a:	98 30       	cpi	r25, 0x08	; 8
    306c:	09 f4       	brne	.+2      	; 0x3070 <signalIoctl+0x99c>
    306e:	70 c0       	rjmp	.+224    	; 0x3150 <signalIoctl+0xa7c>
    3070:	99 30       	cpi	r25, 0x09	; 9
    3072:	38 f4       	brcc	.+14     	; 0x3082 <signalIoctl+0x9ae>
    3074:	96 30       	cpi	r25, 0x06	; 6
    3076:	09 f4       	brne	.+2      	; 0x307a <signalIoctl+0x9a6>
    3078:	53 c0       	rjmp	.+166    	; 0x3120 <signalIoctl+0xa4c>
    307a:	97 30       	cpi	r25, 0x07	; 7
    307c:	09 f0       	breq	.+2      	; 0x3080 <signalIoctl+0x9ac>
    307e:	25 c5       	rjmp	.+2634   	; 0x3aca <signalIoctl+0x13f6>
    3080:	5b c0       	rjmp	.+182    	; 0x3138 <signalIoctl+0xa64>
    3082:	99 30       	cpi	r25, 0x09	; 9
    3084:	09 f4       	brne	.+2      	; 0x3088 <signalIoctl+0x9b4>
    3086:	70 c0       	rjmp	.+224    	; 0x3168 <signalIoctl+0xa94>
    3088:	9a 30       	cpi	r25, 0x0A	; 10
    308a:	09 f0       	breq	.+2      	; 0x308e <signalIoctl+0x9ba>
    308c:	1e c5       	rjmp	.+2620   	; 0x3aca <signalIoctl+0x13f6>
    308e:	78 c0       	rjmp	.+240    	; 0x3180 <signalIoctl+0xaac>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3090:	90 91 00 06 	lds	r25, 0x0600
    3094:	98 23       	and	r25, r24
    3096:	09 f4       	brne	.+2      	; 0x309a <signalIoctl+0x9c6>
    3098:	1c c5       	rjmp	.+2616   	; 0x3ad2 <signalIoctl+0x13fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    309a:	e0 e0       	ldi	r30, 0x00	; 0
    309c:	f6 e0       	ldi	r31, 0x06	; 6
    309e:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    30a0:	cc 24       	eor	r12, r12
    30a2:	dd 24       	eor	r13, r13
    30a4:	76 01       	movw	r14, r12
    30a6:	30 c6       	rjmp	.+3168   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    30a8:	90 91 20 06 	lds	r25, 0x0620
    30ac:	98 23       	and	r25, r24
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <signalIoctl+0x9de>
    30b0:	14 c5       	rjmp	.+2600   	; 0x3ada <signalIoctl+0x1406>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    30b2:	e0 e2       	ldi	r30, 0x20	; 32
    30b4:	f6 e0       	ldi	r31, 0x06	; 6
    30b6:	86 83       	std	Z+6, r24	; 0x06
    30b8:	cc 24       	eor	r12, r12
    30ba:	dd 24       	eor	r13, r13
    30bc:	76 01       	movw	r14, r12
    30be:	24 c6       	rjmp	.+3144   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    30c0:	90 91 40 06 	lds	r25, 0x0640
    30c4:	98 23       	and	r25, r24
    30c6:	09 f4       	brne	.+2      	; 0x30ca <signalIoctl+0x9f6>
    30c8:	0c c5       	rjmp	.+2584   	; 0x3ae2 <signalIoctl+0x140e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    30ca:	e0 e4       	ldi	r30, 0x40	; 64
    30cc:	f6 e0       	ldi	r31, 0x06	; 6
    30ce:	86 83       	std	Z+6, r24	; 0x06
    30d0:	cc 24       	eor	r12, r12
    30d2:	dd 24       	eor	r13, r13
    30d4:	76 01       	movw	r14, r12
    30d6:	18 c6       	rjmp	.+3120   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    30d8:	90 91 60 06 	lds	r25, 0x0660
    30dc:	98 23       	and	r25, r24
    30de:	09 f4       	brne	.+2      	; 0x30e2 <signalIoctl+0xa0e>
    30e0:	04 c5       	rjmp	.+2568   	; 0x3aea <signalIoctl+0x1416>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    30e2:	e0 e6       	ldi	r30, 0x60	; 96
    30e4:	f6 e0       	ldi	r31, 0x06	; 6
    30e6:	86 83       	std	Z+6, r24	; 0x06
    30e8:	cc 24       	eor	r12, r12
    30ea:	dd 24       	eor	r13, r13
    30ec:	76 01       	movw	r14, r12
    30ee:	0c c6       	rjmp	.+3096   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    30f0:	90 91 80 06 	lds	r25, 0x0680
    30f4:	98 23       	and	r25, r24
    30f6:	09 f4       	brne	.+2      	; 0x30fa <signalIoctl+0xa26>
    30f8:	fc c4       	rjmp	.+2552   	; 0x3af2 <signalIoctl+0x141e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    30fa:	e0 e8       	ldi	r30, 0x80	; 128
    30fc:	f6 e0       	ldi	r31, 0x06	; 6
    30fe:	86 83       	std	Z+6, r24	; 0x06
    3100:	cc 24       	eor	r12, r12
    3102:	dd 24       	eor	r13, r13
    3104:	76 01       	movw	r14, r12
    3106:	00 c6       	rjmp	.+3072   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    3108:	90 91 a0 06 	lds	r25, 0x06A0
    310c:	98 23       	and	r25, r24
    310e:	09 f4       	brne	.+2      	; 0x3112 <signalIoctl+0xa3e>
    3110:	f4 c4       	rjmp	.+2536   	; 0x3afa <signalIoctl+0x1426>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    3112:	e0 ea       	ldi	r30, 0xA0	; 160
    3114:	f6 e0       	ldi	r31, 0x06	; 6
    3116:	86 83       	std	Z+6, r24	; 0x06
    3118:	cc 24       	eor	r12, r12
    311a:	dd 24       	eor	r13, r13
    311c:	76 01       	movw	r14, r12
    311e:	f4 c5       	rjmp	.+3048   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3120:	90 91 e0 06 	lds	r25, 0x06E0
    3124:	98 23       	and	r25, r24
    3126:	09 f4       	brne	.+2      	; 0x312a <signalIoctl+0xa56>
    3128:	ec c4       	rjmp	.+2520   	; 0x3b02 <signalIoctl+0x142e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    312a:	e0 ee       	ldi	r30, 0xE0	; 224
    312c:	f6 e0       	ldi	r31, 0x06	; 6
    312e:	86 83       	std	Z+6, r24	; 0x06
    3130:	cc 24       	eor	r12, r12
    3132:	dd 24       	eor	r13, r13
    3134:	76 01       	movw	r14, r12
    3136:	e8 c5       	rjmp	.+3024   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    3138:	90 91 00 07 	lds	r25, 0x0700
    313c:	98 23       	and	r25, r24
    313e:	09 f4       	brne	.+2      	; 0x3142 <signalIoctl+0xa6e>
    3140:	e4 c4       	rjmp	.+2504   	; 0x3b0a <signalIoctl+0x1436>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    3142:	e0 e0       	ldi	r30, 0x00	; 0
    3144:	f7 e0       	ldi	r31, 0x07	; 7
    3146:	86 83       	std	Z+6, r24	; 0x06
    3148:	cc 24       	eor	r12, r12
    314a:	dd 24       	eor	r13, r13
    314c:	76 01       	movw	r14, r12
    314e:	dc c5       	rjmp	.+3000   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3150:	90 91 20 07 	lds	r25, 0x0720
    3154:	98 23       	and	r25, r24
    3156:	09 f4       	brne	.+2      	; 0x315a <signalIoctl+0xa86>
    3158:	dc c4       	rjmp	.+2488   	; 0x3b12 <signalIoctl+0x143e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    315a:	e0 e2       	ldi	r30, 0x20	; 32
    315c:	f7 e0       	ldi	r31, 0x07	; 7
    315e:	86 83       	std	Z+6, r24	; 0x06
    3160:	cc 24       	eor	r12, r12
    3162:	dd 24       	eor	r13, r13
    3164:	76 01       	movw	r14, r12
    3166:	d0 c5       	rjmp	.+2976   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3168:	90 91 c0 07 	lds	r25, 0x07C0
    316c:	98 23       	and	r25, r24
    316e:	09 f4       	brne	.+2      	; 0x3172 <signalIoctl+0xa9e>
    3170:	d4 c4       	rjmp	.+2472   	; 0x3b1a <signalIoctl+0x1446>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    3172:	e0 ec       	ldi	r30, 0xC0	; 192
    3174:	f7 e0       	ldi	r31, 0x07	; 7
    3176:	86 83       	std	Z+6, r24	; 0x06
    3178:	cc 24       	eor	r12, r12
    317a:	dd 24       	eor	r13, r13
    317c:	76 01       	movw	r14, r12
    317e:	c4 c5       	rjmp	.+2952   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3180:	90 91 e0 07 	lds	r25, 0x07E0
    3184:	98 23       	and	r25, r24
    3186:	09 f4       	brne	.+2      	; 0x318a <signalIoctl+0xab6>
    3188:	cc c4       	rjmp	.+2456   	; 0x3b22 <signalIoctl+0x144e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    318a:	e0 ee       	ldi	r30, 0xE0	; 224
    318c:	f7 e0       	ldi	r31, 0x07	; 7
    318e:	86 83       	std	Z+6, r24	; 0x06
    3190:	cc 24       	eor	r12, r12
    3192:	dd 24       	eor	r13, r13
    3194:	76 01       	movw	r14, r12
    3196:	b8 c5       	rjmp	.+2928   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_ON:*/

      case YELLOW_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    3198:	80 91 76 24 	lds	r24, 0x2476
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    319c:	90 91 74 24 	lds	r25, 0x2474
    31a0:	95 30       	cpi	r25, 0x05	; 5
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <signalIoctl+0xad2>
    31a4:	61 c0       	rjmp	.+194    	; 0x3268 <signalIoctl+0xb94>
    31a6:	96 30       	cpi	r25, 0x06	; 6
    31a8:	80 f4       	brcc	.+32     	; 0x31ca <signalIoctl+0xaf6>
    31aa:	92 30       	cpi	r25, 0x02	; 2
    31ac:	c9 f1       	breq	.+114    	; 0x3220 <signalIoctl+0xb4c>
    31ae:	93 30       	cpi	r25, 0x03	; 3
    31b0:	30 f4       	brcc	.+12     	; 0x31be <signalIoctl+0xaea>
    31b2:	99 23       	and	r25, r25
    31b4:	e9 f0       	breq	.+58     	; 0x31f0 <signalIoctl+0xb1c>
    31b6:	91 30       	cpi	r25, 0x01	; 1
    31b8:	09 f0       	breq	.+2      	; 0x31bc <signalIoctl+0xae8>
    31ba:	b7 c4       	rjmp	.+2414   	; 0x3b2a <signalIoctl+0x1456>
    31bc:	25 c0       	rjmp	.+74     	; 0x3208 <signalIoctl+0xb34>
    31be:	93 30       	cpi	r25, 0x03	; 3
    31c0:	d9 f1       	breq	.+118    	; 0x3238 <signalIoctl+0xb64>
    31c2:	94 30       	cpi	r25, 0x04	; 4
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <signalIoctl+0xaf4>
    31c6:	b1 c4       	rjmp	.+2402   	; 0x3b2a <signalIoctl+0x1456>
    31c8:	43 c0       	rjmp	.+134    	; 0x3250 <signalIoctl+0xb7c>
    31ca:	98 30       	cpi	r25, 0x08	; 8
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <signalIoctl+0xafc>
    31ce:	70 c0       	rjmp	.+224    	; 0x32b0 <signalIoctl+0xbdc>
    31d0:	99 30       	cpi	r25, 0x09	; 9
    31d2:	38 f4       	brcc	.+14     	; 0x31e2 <signalIoctl+0xb0e>
    31d4:	96 30       	cpi	r25, 0x06	; 6
    31d6:	09 f4       	brne	.+2      	; 0x31da <signalIoctl+0xb06>
    31d8:	53 c0       	rjmp	.+166    	; 0x3280 <signalIoctl+0xbac>
    31da:	97 30       	cpi	r25, 0x07	; 7
    31dc:	09 f0       	breq	.+2      	; 0x31e0 <signalIoctl+0xb0c>
    31de:	a5 c4       	rjmp	.+2378   	; 0x3b2a <signalIoctl+0x1456>
    31e0:	5b c0       	rjmp	.+182    	; 0x3298 <signalIoctl+0xbc4>
    31e2:	99 30       	cpi	r25, 0x09	; 9
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <signalIoctl+0xb14>
    31e6:	70 c0       	rjmp	.+224    	; 0x32c8 <signalIoctl+0xbf4>
    31e8:	9a 30       	cpi	r25, 0x0A	; 10
    31ea:	09 f0       	breq	.+2      	; 0x31ee <signalIoctl+0xb1a>
    31ec:	9e c4       	rjmp	.+2364   	; 0x3b2a <signalIoctl+0x1456>
    31ee:	78 c0       	rjmp	.+240    	; 0x32e0 <signalIoctl+0xc0c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    31f0:	90 91 00 06 	lds	r25, 0x0600
    31f4:	98 23       	and	r25, r24
    31f6:	09 f4       	brne	.+2      	; 0x31fa <signalIoctl+0xb26>
    31f8:	9c c4       	rjmp	.+2360   	; 0x3b32 <signalIoctl+0x145e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    31fa:	e0 e0       	ldi	r30, 0x00	; 0
    31fc:	f6 e0       	ldi	r31, 0x06	; 6
    31fe:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    3200:	cc 24       	eor	r12, r12
    3202:	dd 24       	eor	r13, r13
    3204:	76 01       	movw	r14, r12
    3206:	80 c5       	rjmp	.+2816   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    3208:	90 91 20 06 	lds	r25, 0x0620
    320c:	98 23       	and	r25, r24
    320e:	09 f4       	brne	.+2      	; 0x3212 <signalIoctl+0xb3e>
    3210:	94 c4       	rjmp	.+2344   	; 0x3b3a <signalIoctl+0x1466>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    3212:	e0 e2       	ldi	r30, 0x20	; 32
    3214:	f6 e0       	ldi	r31, 0x06	; 6
    3216:	85 83       	std	Z+5, r24	; 0x05
    3218:	cc 24       	eor	r12, r12
    321a:	dd 24       	eor	r13, r13
    321c:	76 01       	movw	r14, r12
    321e:	74 c5       	rjmp	.+2792   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3220:	90 91 40 06 	lds	r25, 0x0640
    3224:	98 23       	and	r25, r24
    3226:	09 f4       	brne	.+2      	; 0x322a <signalIoctl+0xb56>
    3228:	8c c4       	rjmp	.+2328   	; 0x3b42 <signalIoctl+0x146e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    322a:	e0 e4       	ldi	r30, 0x40	; 64
    322c:	f6 e0       	ldi	r31, 0x06	; 6
    322e:	85 83       	std	Z+5, r24	; 0x05
    3230:	cc 24       	eor	r12, r12
    3232:	dd 24       	eor	r13, r13
    3234:	76 01       	movw	r14, r12
    3236:	68 c5       	rjmp	.+2768   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    3238:	90 91 60 06 	lds	r25, 0x0660
    323c:	98 23       	and	r25, r24
    323e:	09 f4       	brne	.+2      	; 0x3242 <signalIoctl+0xb6e>
    3240:	84 c4       	rjmp	.+2312   	; 0x3b4a <signalIoctl+0x1476>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    3242:	e0 e6       	ldi	r30, 0x60	; 96
    3244:	f6 e0       	ldi	r31, 0x06	; 6
    3246:	85 83       	std	Z+5, r24	; 0x05
    3248:	cc 24       	eor	r12, r12
    324a:	dd 24       	eor	r13, r13
    324c:	76 01       	movw	r14, r12
    324e:	5c c5       	rjmp	.+2744   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3250:	90 91 80 06 	lds	r25, 0x0680
    3254:	98 23       	and	r25, r24
    3256:	09 f4       	brne	.+2      	; 0x325a <signalIoctl+0xb86>
    3258:	7c c4       	rjmp	.+2296   	; 0x3b52 <signalIoctl+0x147e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    325a:	e0 e8       	ldi	r30, 0x80	; 128
    325c:	f6 e0       	ldi	r31, 0x06	; 6
    325e:	85 83       	std	Z+5, r24	; 0x05
    3260:	cc 24       	eor	r12, r12
    3262:	dd 24       	eor	r13, r13
    3264:	76 01       	movw	r14, r12
    3266:	50 c5       	rjmp	.+2720   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    3268:	90 91 a0 06 	lds	r25, 0x06A0
    326c:	98 23       	and	r25, r24
    326e:	09 f4       	brne	.+2      	; 0x3272 <signalIoctl+0xb9e>
    3270:	74 c4       	rjmp	.+2280   	; 0x3b5a <signalIoctl+0x1486>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    3272:	e0 ea       	ldi	r30, 0xA0	; 160
    3274:	f6 e0       	ldi	r31, 0x06	; 6
    3276:	85 83       	std	Z+5, r24	; 0x05
    3278:	cc 24       	eor	r12, r12
    327a:	dd 24       	eor	r13, r13
    327c:	76 01       	movw	r14, r12
    327e:	44 c5       	rjmp	.+2696   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3280:	90 91 e0 06 	lds	r25, 0x06E0
    3284:	98 23       	and	r25, r24
    3286:	09 f4       	brne	.+2      	; 0x328a <signalIoctl+0xbb6>
    3288:	6c c4       	rjmp	.+2264   	; 0x3b62 <signalIoctl+0x148e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    328a:	e0 ee       	ldi	r30, 0xE0	; 224
    328c:	f6 e0       	ldi	r31, 0x06	; 6
    328e:	85 83       	std	Z+5, r24	; 0x05
    3290:	cc 24       	eor	r12, r12
    3292:	dd 24       	eor	r13, r13
    3294:	76 01       	movw	r14, r12
    3296:	38 c5       	rjmp	.+2672   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    3298:	90 91 00 07 	lds	r25, 0x0700
    329c:	98 23       	and	r25, r24
    329e:	09 f4       	brne	.+2      	; 0x32a2 <signalIoctl+0xbce>
    32a0:	64 c4       	rjmp	.+2248   	; 0x3b6a <signalIoctl+0x1496>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    32a2:	e0 e0       	ldi	r30, 0x00	; 0
    32a4:	f7 e0       	ldi	r31, 0x07	; 7
    32a6:	85 83       	std	Z+5, r24	; 0x05
    32a8:	cc 24       	eor	r12, r12
    32aa:	dd 24       	eor	r13, r13
    32ac:	76 01       	movw	r14, r12
    32ae:	2c c5       	rjmp	.+2648   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    32b0:	90 91 20 07 	lds	r25, 0x0720
    32b4:	98 23       	and	r25, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <signalIoctl+0xbe6>
    32b8:	5c c4       	rjmp	.+2232   	; 0x3b72 <signalIoctl+0x149e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    32ba:	e0 e2       	ldi	r30, 0x20	; 32
    32bc:	f7 e0       	ldi	r31, 0x07	; 7
    32be:	85 83       	std	Z+5, r24	; 0x05
    32c0:	cc 24       	eor	r12, r12
    32c2:	dd 24       	eor	r13, r13
    32c4:	76 01       	movw	r14, r12
    32c6:	20 c5       	rjmp	.+2624   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    32c8:	90 91 c0 07 	lds	r25, 0x07C0
    32cc:	98 23       	and	r25, r24
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <signalIoctl+0xbfe>
    32d0:	54 c4       	rjmp	.+2216   	; 0x3b7a <signalIoctl+0x14a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    32d2:	e0 ec       	ldi	r30, 0xC0	; 192
    32d4:	f7 e0       	ldi	r31, 0x07	; 7
    32d6:	85 83       	std	Z+5, r24	; 0x05
    32d8:	cc 24       	eor	r12, r12
    32da:	dd 24       	eor	r13, r13
    32dc:	76 01       	movw	r14, r12
    32de:	14 c5       	rjmp	.+2600   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    32e0:	90 91 e0 07 	lds	r25, 0x07E0
    32e4:	98 23       	and	r25, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <signalIoctl+0xc16>
    32e8:	4c c4       	rjmp	.+2200   	; 0x3b82 <signalIoctl+0x14ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    32ea:	e0 ee       	ldi	r30, 0xE0	; 224
    32ec:	f7 e0       	ldi	r31, 0x07	; 7
    32ee:	85 83       	std	Z+5, r24	; 0x05
    32f0:	cc 24       	eor	r12, r12
    32f2:	dd 24       	eor	r13, r13
    32f4:	76 01       	movw	r14, r12
    32f6:	08 c5       	rjmp	.+2576   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_OFF:*/

      case YELLOW_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    32f8:	80 91 76 24 	lds	r24, 0x2476
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    32fc:	90 91 74 24 	lds	r25, 0x2474
    3300:	95 30       	cpi	r25, 0x05	; 5
    3302:	09 f4       	brne	.+2      	; 0x3306 <signalIoctl+0xc32>
    3304:	61 c0       	rjmp	.+194    	; 0x33c8 <signalIoctl+0xcf4>
    3306:	96 30       	cpi	r25, 0x06	; 6
    3308:	80 f4       	brcc	.+32     	; 0x332a <signalIoctl+0xc56>
    330a:	92 30       	cpi	r25, 0x02	; 2
    330c:	c9 f1       	breq	.+114    	; 0x3380 <signalIoctl+0xcac>
    330e:	93 30       	cpi	r25, 0x03	; 3
    3310:	30 f4       	brcc	.+12     	; 0x331e <signalIoctl+0xc4a>
    3312:	99 23       	and	r25, r25
    3314:	e9 f0       	breq	.+58     	; 0x3350 <signalIoctl+0xc7c>
    3316:	91 30       	cpi	r25, 0x01	; 1
    3318:	09 f0       	breq	.+2      	; 0x331c <signalIoctl+0xc48>
    331a:	37 c4       	rjmp	.+2158   	; 0x3b8a <signalIoctl+0x14b6>
    331c:	25 c0       	rjmp	.+74     	; 0x3368 <signalIoctl+0xc94>
    331e:	93 30       	cpi	r25, 0x03	; 3
    3320:	d9 f1       	breq	.+118    	; 0x3398 <signalIoctl+0xcc4>
    3322:	94 30       	cpi	r25, 0x04	; 4
    3324:	09 f0       	breq	.+2      	; 0x3328 <signalIoctl+0xc54>
    3326:	31 c4       	rjmp	.+2146   	; 0x3b8a <signalIoctl+0x14b6>
    3328:	43 c0       	rjmp	.+134    	; 0x33b0 <signalIoctl+0xcdc>
    332a:	98 30       	cpi	r25, 0x08	; 8
    332c:	09 f4       	brne	.+2      	; 0x3330 <signalIoctl+0xc5c>
    332e:	70 c0       	rjmp	.+224    	; 0x3410 <signalIoctl+0xd3c>
    3330:	99 30       	cpi	r25, 0x09	; 9
    3332:	38 f4       	brcc	.+14     	; 0x3342 <signalIoctl+0xc6e>
    3334:	96 30       	cpi	r25, 0x06	; 6
    3336:	09 f4       	brne	.+2      	; 0x333a <signalIoctl+0xc66>
    3338:	53 c0       	rjmp	.+166    	; 0x33e0 <signalIoctl+0xd0c>
    333a:	97 30       	cpi	r25, 0x07	; 7
    333c:	09 f0       	breq	.+2      	; 0x3340 <signalIoctl+0xc6c>
    333e:	25 c4       	rjmp	.+2122   	; 0x3b8a <signalIoctl+0x14b6>
    3340:	5b c0       	rjmp	.+182    	; 0x33f8 <signalIoctl+0xd24>
    3342:	99 30       	cpi	r25, 0x09	; 9
    3344:	09 f4       	brne	.+2      	; 0x3348 <signalIoctl+0xc74>
    3346:	70 c0       	rjmp	.+224    	; 0x3428 <signalIoctl+0xd54>
    3348:	9a 30       	cpi	r25, 0x0A	; 10
    334a:	09 f0       	breq	.+2      	; 0x334e <signalIoctl+0xc7a>
    334c:	1e c4       	rjmp	.+2108   	; 0x3b8a <signalIoctl+0x14b6>
    334e:	78 c0       	rjmp	.+240    	; 0x3440 <signalIoctl+0xd6c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3350:	90 91 00 06 	lds	r25, 0x0600
    3354:	98 23       	and	r25, r24
    3356:	09 f4       	brne	.+2      	; 0x335a <signalIoctl+0xc86>
    3358:	1c c4       	rjmp	.+2104   	; 0x3b92 <signalIoctl+0x14be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    335a:	e0 e0       	ldi	r30, 0x00	; 0
    335c:	f6 e0       	ldi	r31, 0x06	; 6
    335e:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    3360:	cc 24       	eor	r12, r12
    3362:	dd 24       	eor	r13, r13
    3364:	76 01       	movw	r14, r12
    3366:	d0 c4       	rjmp	.+2464   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    3368:	90 91 20 06 	lds	r25, 0x0620
    336c:	98 23       	and	r25, r24
    336e:	09 f4       	brne	.+2      	; 0x3372 <signalIoctl+0xc9e>
    3370:	14 c4       	rjmp	.+2088   	; 0x3b9a <signalIoctl+0x14c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    3372:	e0 e2       	ldi	r30, 0x20	; 32
    3374:	f6 e0       	ldi	r31, 0x06	; 6
    3376:	87 83       	std	Z+7, r24	; 0x07
    3378:	cc 24       	eor	r12, r12
    337a:	dd 24       	eor	r13, r13
    337c:	76 01       	movw	r14, r12
    337e:	c4 c4       	rjmp	.+2440   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3380:	90 91 40 06 	lds	r25, 0x0640
    3384:	98 23       	and	r25, r24
    3386:	09 f4       	brne	.+2      	; 0x338a <signalIoctl+0xcb6>
    3388:	0c c4       	rjmp	.+2072   	; 0x3ba2 <signalIoctl+0x14ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    338a:	e0 e4       	ldi	r30, 0x40	; 64
    338c:	f6 e0       	ldi	r31, 0x06	; 6
    338e:	87 83       	std	Z+7, r24	; 0x07
    3390:	cc 24       	eor	r12, r12
    3392:	dd 24       	eor	r13, r13
    3394:	76 01       	movw	r14, r12
    3396:	b8 c4       	rjmp	.+2416   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    3398:	90 91 60 06 	lds	r25, 0x0660
    339c:	98 23       	and	r25, r24
    339e:	09 f4       	brne	.+2      	; 0x33a2 <signalIoctl+0xcce>
    33a0:	04 c4       	rjmp	.+2056   	; 0x3baa <signalIoctl+0x14d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    33a2:	e0 e6       	ldi	r30, 0x60	; 96
    33a4:	f6 e0       	ldi	r31, 0x06	; 6
    33a6:	87 83       	std	Z+7, r24	; 0x07
    33a8:	cc 24       	eor	r12, r12
    33aa:	dd 24       	eor	r13, r13
    33ac:	76 01       	movw	r14, r12
    33ae:	ac c4       	rjmp	.+2392   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    33b0:	90 91 80 06 	lds	r25, 0x0680
    33b4:	98 23       	and	r25, r24
    33b6:	09 f4       	brne	.+2      	; 0x33ba <signalIoctl+0xce6>
    33b8:	fc c3       	rjmp	.+2040   	; 0x3bb2 <signalIoctl+0x14de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    33ba:	e0 e8       	ldi	r30, 0x80	; 128
    33bc:	f6 e0       	ldi	r31, 0x06	; 6
    33be:	87 83       	std	Z+7, r24	; 0x07
    33c0:	cc 24       	eor	r12, r12
    33c2:	dd 24       	eor	r13, r13
    33c4:	76 01       	movw	r14, r12
    33c6:	a0 c4       	rjmp	.+2368   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    33c8:	90 91 a0 06 	lds	r25, 0x06A0
    33cc:	98 23       	and	r25, r24
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <signalIoctl+0xcfe>
    33d0:	f4 c3       	rjmp	.+2024   	; 0x3bba <signalIoctl+0x14e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    33d2:	e0 ea       	ldi	r30, 0xA0	; 160
    33d4:	f6 e0       	ldi	r31, 0x06	; 6
    33d6:	87 83       	std	Z+7, r24	; 0x07
    33d8:	cc 24       	eor	r12, r12
    33da:	dd 24       	eor	r13, r13
    33dc:	76 01       	movw	r14, r12
    33de:	94 c4       	rjmp	.+2344   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    33e0:	90 91 e0 06 	lds	r25, 0x06E0
    33e4:	98 23       	and	r25, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <signalIoctl+0xd16>
    33e8:	ec c3       	rjmp	.+2008   	; 0x3bc2 <signalIoctl+0x14ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    33ea:	e0 ee       	ldi	r30, 0xE0	; 224
    33ec:	f6 e0       	ldi	r31, 0x06	; 6
    33ee:	87 83       	std	Z+7, r24	; 0x07
    33f0:	cc 24       	eor	r12, r12
    33f2:	dd 24       	eor	r13, r13
    33f4:	76 01       	movw	r14, r12
    33f6:	88 c4       	rjmp	.+2320   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    33f8:	90 91 00 07 	lds	r25, 0x0700
    33fc:	98 23       	and	r25, r24
    33fe:	09 f4       	brne	.+2      	; 0x3402 <signalIoctl+0xd2e>
    3400:	e4 c3       	rjmp	.+1992   	; 0x3bca <signalIoctl+0x14f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    3402:	e0 e0       	ldi	r30, 0x00	; 0
    3404:	f7 e0       	ldi	r31, 0x07	; 7
    3406:	87 83       	std	Z+7, r24	; 0x07
    3408:	cc 24       	eor	r12, r12
    340a:	dd 24       	eor	r13, r13
    340c:	76 01       	movw	r14, r12
    340e:	7c c4       	rjmp	.+2296   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3410:	90 91 20 07 	lds	r25, 0x0720
    3414:	98 23       	and	r25, r24
    3416:	09 f4       	brne	.+2      	; 0x341a <signalIoctl+0xd46>
    3418:	dc c3       	rjmp	.+1976   	; 0x3bd2 <signalIoctl+0x14fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    341a:	e0 e2       	ldi	r30, 0x20	; 32
    341c:	f7 e0       	ldi	r31, 0x07	; 7
    341e:	87 83       	std	Z+7, r24	; 0x07
    3420:	cc 24       	eor	r12, r12
    3422:	dd 24       	eor	r13, r13
    3424:	76 01       	movw	r14, r12
    3426:	70 c4       	rjmp	.+2272   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3428:	90 91 c0 07 	lds	r25, 0x07C0
    342c:	98 23       	and	r25, r24
    342e:	09 f4       	brne	.+2      	; 0x3432 <signalIoctl+0xd5e>
    3430:	d4 c3       	rjmp	.+1960   	; 0x3bda <signalIoctl+0x1506>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    3432:	e0 ec       	ldi	r30, 0xC0	; 192
    3434:	f7 e0       	ldi	r31, 0x07	; 7
    3436:	87 83       	std	Z+7, r24	; 0x07
    3438:	cc 24       	eor	r12, r12
    343a:	dd 24       	eor	r13, r13
    343c:	76 01       	movw	r14, r12
    343e:	64 c4       	rjmp	.+2248   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3440:	90 91 e0 07 	lds	r25, 0x07E0
    3444:	98 23       	and	r25, r24
    3446:	09 f4       	brne	.+2      	; 0x344a <signalIoctl+0xd76>
    3448:	cc c3       	rjmp	.+1944   	; 0x3be2 <signalIoctl+0x150e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    344a:	e0 ee       	ldi	r30, 0xE0	; 224
    344c:	f7 e0       	ldi	r31, 0x07	; 7
    344e:	87 83       	std	Z+7, r24	; 0x07
    3450:	cc 24       	eor	r12, r12
    3452:	dd 24       	eor	r13, r13
    3454:	76 01       	movw	r14, r12
    3456:	58 c4       	rjmp	.+2224   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_TOGGLE:*/

      case ALL_LEDS_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    3458:	80 91 78 24 	lds	r24, 0x2478
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    345c:	90 91 74 24 	lds	r25, 0x2474
    3460:	95 30       	cpi	r25, 0x05	; 5
    3462:	09 f4       	brne	.+2      	; 0x3466 <signalIoctl+0xd92>
    3464:	61 c0       	rjmp	.+194    	; 0x3528 <signalIoctl+0xe54>
    3466:	96 30       	cpi	r25, 0x06	; 6
    3468:	80 f4       	brcc	.+32     	; 0x348a <signalIoctl+0xdb6>
    346a:	92 30       	cpi	r25, 0x02	; 2
    346c:	c9 f1       	breq	.+114    	; 0x34e0 <signalIoctl+0xe0c>
    346e:	93 30       	cpi	r25, 0x03	; 3
    3470:	30 f4       	brcc	.+12     	; 0x347e <signalIoctl+0xdaa>
    3472:	99 23       	and	r25, r25
    3474:	e9 f0       	breq	.+58     	; 0x34b0 <signalIoctl+0xddc>
    3476:	91 30       	cpi	r25, 0x01	; 1
    3478:	09 f0       	breq	.+2      	; 0x347c <signalIoctl+0xda8>
    347a:	b7 c3       	rjmp	.+1902   	; 0x3bea <signalIoctl+0x1516>
    347c:	25 c0       	rjmp	.+74     	; 0x34c8 <signalIoctl+0xdf4>
    347e:	93 30       	cpi	r25, 0x03	; 3
    3480:	d9 f1       	breq	.+118    	; 0x34f8 <signalIoctl+0xe24>
    3482:	94 30       	cpi	r25, 0x04	; 4
    3484:	09 f0       	breq	.+2      	; 0x3488 <signalIoctl+0xdb4>
    3486:	b1 c3       	rjmp	.+1890   	; 0x3bea <signalIoctl+0x1516>
    3488:	43 c0       	rjmp	.+134    	; 0x3510 <signalIoctl+0xe3c>
    348a:	98 30       	cpi	r25, 0x08	; 8
    348c:	09 f4       	brne	.+2      	; 0x3490 <signalIoctl+0xdbc>
    348e:	70 c0       	rjmp	.+224    	; 0x3570 <signalIoctl+0xe9c>
    3490:	99 30       	cpi	r25, 0x09	; 9
    3492:	38 f4       	brcc	.+14     	; 0x34a2 <signalIoctl+0xdce>
    3494:	96 30       	cpi	r25, 0x06	; 6
    3496:	09 f4       	brne	.+2      	; 0x349a <signalIoctl+0xdc6>
    3498:	53 c0       	rjmp	.+166    	; 0x3540 <signalIoctl+0xe6c>
    349a:	97 30       	cpi	r25, 0x07	; 7
    349c:	09 f0       	breq	.+2      	; 0x34a0 <signalIoctl+0xdcc>
    349e:	a5 c3       	rjmp	.+1866   	; 0x3bea <signalIoctl+0x1516>
    34a0:	5b c0       	rjmp	.+182    	; 0x3558 <signalIoctl+0xe84>
    34a2:	99 30       	cpi	r25, 0x09	; 9
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <signalIoctl+0xdd4>
    34a6:	70 c0       	rjmp	.+224    	; 0x3588 <signalIoctl+0xeb4>
    34a8:	9a 30       	cpi	r25, 0x0A	; 10
    34aa:	09 f0       	breq	.+2      	; 0x34ae <signalIoctl+0xdda>
    34ac:	9e c3       	rjmp	.+1852   	; 0x3bea <signalIoctl+0x1516>
    34ae:	78 c0       	rjmp	.+240    	; 0x35a0 <signalIoctl+0xecc>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    34b0:	90 91 00 06 	lds	r25, 0x0600
    34b4:	98 23       	and	r25, r24
    34b6:	09 f4       	brne	.+2      	; 0x34ba <signalIoctl+0xde6>
    34b8:	9c c3       	rjmp	.+1848   	; 0x3bf2 <signalIoctl+0x151e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    34ba:	e0 e0       	ldi	r30, 0x00	; 0
    34bc:	f6 e0       	ldi	r31, 0x06	; 6
    34be:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    34c0:	cc 24       	eor	r12, r12
    34c2:	dd 24       	eor	r13, r13
    34c4:	76 01       	movw	r14, r12
    34c6:	20 c4       	rjmp	.+2112   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    34c8:	90 91 20 06 	lds	r25, 0x0620
    34cc:	98 23       	and	r25, r24
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <signalIoctl+0xdfe>
    34d0:	94 c3       	rjmp	.+1832   	; 0x3bfa <signalIoctl+0x1526>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    34d2:	e0 e2       	ldi	r30, 0x20	; 32
    34d4:	f6 e0       	ldi	r31, 0x06	; 6
    34d6:	86 83       	std	Z+6, r24	; 0x06
    34d8:	cc 24       	eor	r12, r12
    34da:	dd 24       	eor	r13, r13
    34dc:	76 01       	movw	r14, r12
    34de:	14 c4       	rjmp	.+2088   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    34e0:	90 91 40 06 	lds	r25, 0x0640
    34e4:	98 23       	and	r25, r24
    34e6:	09 f4       	brne	.+2      	; 0x34ea <signalIoctl+0xe16>
    34e8:	8c c3       	rjmp	.+1816   	; 0x3c02 <signalIoctl+0x152e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    34ea:	e0 e4       	ldi	r30, 0x40	; 64
    34ec:	f6 e0       	ldi	r31, 0x06	; 6
    34ee:	86 83       	std	Z+6, r24	; 0x06
    34f0:	cc 24       	eor	r12, r12
    34f2:	dd 24       	eor	r13, r13
    34f4:	76 01       	movw	r14, r12
    34f6:	08 c4       	rjmp	.+2064   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    34f8:	90 91 60 06 	lds	r25, 0x0660
    34fc:	98 23       	and	r25, r24
    34fe:	09 f4       	brne	.+2      	; 0x3502 <signalIoctl+0xe2e>
    3500:	84 c3       	rjmp	.+1800   	; 0x3c0a <signalIoctl+0x1536>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    3502:	e0 e6       	ldi	r30, 0x60	; 96
    3504:	f6 e0       	ldi	r31, 0x06	; 6
    3506:	86 83       	std	Z+6, r24	; 0x06
    3508:	cc 24       	eor	r12, r12
    350a:	dd 24       	eor	r13, r13
    350c:	76 01       	movw	r14, r12
    350e:	fc c3       	rjmp	.+2040   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3510:	90 91 80 06 	lds	r25, 0x0680
    3514:	98 23       	and	r25, r24
    3516:	09 f4       	brne	.+2      	; 0x351a <signalIoctl+0xe46>
    3518:	7c c3       	rjmp	.+1784   	; 0x3c12 <signalIoctl+0x153e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    351a:	e0 e8       	ldi	r30, 0x80	; 128
    351c:	f6 e0       	ldi	r31, 0x06	; 6
    351e:	86 83       	std	Z+6, r24	; 0x06
    3520:	cc 24       	eor	r12, r12
    3522:	dd 24       	eor	r13, r13
    3524:	76 01       	movw	r14, r12
    3526:	f0 c3       	rjmp	.+2016   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    3528:	90 91 a0 06 	lds	r25, 0x06A0
    352c:	98 23       	and	r25, r24
    352e:	09 f4       	brne	.+2      	; 0x3532 <signalIoctl+0xe5e>
    3530:	74 c3       	rjmp	.+1768   	; 0x3c1a <signalIoctl+0x1546>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    3532:	e0 ea       	ldi	r30, 0xA0	; 160
    3534:	f6 e0       	ldi	r31, 0x06	; 6
    3536:	86 83       	std	Z+6, r24	; 0x06
    3538:	cc 24       	eor	r12, r12
    353a:	dd 24       	eor	r13, r13
    353c:	76 01       	movw	r14, r12
    353e:	e4 c3       	rjmp	.+1992   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3540:	90 91 e0 06 	lds	r25, 0x06E0
    3544:	98 23       	and	r25, r24
    3546:	09 f4       	brne	.+2      	; 0x354a <signalIoctl+0xe76>
    3548:	6c c3       	rjmp	.+1752   	; 0x3c22 <signalIoctl+0x154e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    354a:	e0 ee       	ldi	r30, 0xE0	; 224
    354c:	f6 e0       	ldi	r31, 0x06	; 6
    354e:	86 83       	std	Z+6, r24	; 0x06
    3550:	cc 24       	eor	r12, r12
    3552:	dd 24       	eor	r13, r13
    3554:	76 01       	movw	r14, r12
    3556:	d8 c3       	rjmp	.+1968   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    3558:	90 91 00 07 	lds	r25, 0x0700
    355c:	98 23       	and	r25, r24
    355e:	09 f4       	brne	.+2      	; 0x3562 <signalIoctl+0xe8e>
    3560:	64 c3       	rjmp	.+1736   	; 0x3c2a <signalIoctl+0x1556>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    3562:	e0 e0       	ldi	r30, 0x00	; 0
    3564:	f7 e0       	ldi	r31, 0x07	; 7
    3566:	86 83       	std	Z+6, r24	; 0x06
    3568:	cc 24       	eor	r12, r12
    356a:	dd 24       	eor	r13, r13
    356c:	76 01       	movw	r14, r12
    356e:	cc c3       	rjmp	.+1944   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3570:	90 91 20 07 	lds	r25, 0x0720
    3574:	98 23       	and	r25, r24
    3576:	09 f4       	brne	.+2      	; 0x357a <signalIoctl+0xea6>
    3578:	5c c3       	rjmp	.+1720   	; 0x3c32 <signalIoctl+0x155e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    357a:	e0 e2       	ldi	r30, 0x20	; 32
    357c:	f7 e0       	ldi	r31, 0x07	; 7
    357e:	86 83       	std	Z+6, r24	; 0x06
    3580:	cc 24       	eor	r12, r12
    3582:	dd 24       	eor	r13, r13
    3584:	76 01       	movw	r14, r12
    3586:	c0 c3       	rjmp	.+1920   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3588:	90 91 c0 07 	lds	r25, 0x07C0
    358c:	98 23       	and	r25, r24
    358e:	09 f4       	brne	.+2      	; 0x3592 <signalIoctl+0xebe>
    3590:	54 c3       	rjmp	.+1704   	; 0x3c3a <signalIoctl+0x1566>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    3592:	e0 ec       	ldi	r30, 0xC0	; 192
    3594:	f7 e0       	ldi	r31, 0x07	; 7
    3596:	86 83       	std	Z+6, r24	; 0x06
    3598:	cc 24       	eor	r12, r12
    359a:	dd 24       	eor	r13, r13
    359c:	76 01       	movw	r14, r12
    359e:	b4 c3       	rjmp	.+1896   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    35a0:	90 91 e0 07 	lds	r25, 0x07E0
    35a4:	98 23       	and	r25, r24
    35a6:	09 f4       	brne	.+2      	; 0x35aa <signalIoctl+0xed6>
    35a8:	4c c3       	rjmp	.+1688   	; 0x3c42 <signalIoctl+0x156e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    35aa:	e0 ee       	ldi	r30, 0xE0	; 224
    35ac:	f7 e0       	ldi	r31, 0x07	; 7
    35ae:	86 83       	std	Z+6, r24	; 0x06
    35b0:	cc 24       	eor	r12, r12
    35b2:	dd 24       	eor	r13, r13
    35b4:	76 01       	movw	r14, r12
    35b6:	a8 c3       	rjmp	.+1872   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_ON:*/

      case ALL_LEDS_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    35b8:	80 91 78 24 	lds	r24, 0x2478
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    35bc:	90 91 74 24 	lds	r25, 0x2474
    35c0:	95 30       	cpi	r25, 0x05	; 5
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <signalIoctl+0xef2>
    35c4:	61 c0       	rjmp	.+194    	; 0x3688 <signalIoctl+0xfb4>
    35c6:	96 30       	cpi	r25, 0x06	; 6
    35c8:	80 f4       	brcc	.+32     	; 0x35ea <signalIoctl+0xf16>
    35ca:	92 30       	cpi	r25, 0x02	; 2
    35cc:	c9 f1       	breq	.+114    	; 0x3640 <signalIoctl+0xf6c>
    35ce:	93 30       	cpi	r25, 0x03	; 3
    35d0:	30 f4       	brcc	.+12     	; 0x35de <signalIoctl+0xf0a>
    35d2:	99 23       	and	r25, r25
    35d4:	e9 f0       	breq	.+58     	; 0x3610 <signalIoctl+0xf3c>
    35d6:	91 30       	cpi	r25, 0x01	; 1
    35d8:	09 f0       	breq	.+2      	; 0x35dc <signalIoctl+0xf08>
    35da:	37 c3       	rjmp	.+1646   	; 0x3c4a <signalIoctl+0x1576>
    35dc:	25 c0       	rjmp	.+74     	; 0x3628 <signalIoctl+0xf54>
    35de:	93 30       	cpi	r25, 0x03	; 3
    35e0:	d9 f1       	breq	.+118    	; 0x3658 <signalIoctl+0xf84>
    35e2:	94 30       	cpi	r25, 0x04	; 4
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <signalIoctl+0xf14>
    35e6:	31 c3       	rjmp	.+1634   	; 0x3c4a <signalIoctl+0x1576>
    35e8:	43 c0       	rjmp	.+134    	; 0x3670 <signalIoctl+0xf9c>
    35ea:	98 30       	cpi	r25, 0x08	; 8
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <signalIoctl+0xf1c>
    35ee:	70 c0       	rjmp	.+224    	; 0x36d0 <signalIoctl+0xffc>
    35f0:	99 30       	cpi	r25, 0x09	; 9
    35f2:	38 f4       	brcc	.+14     	; 0x3602 <signalIoctl+0xf2e>
    35f4:	96 30       	cpi	r25, 0x06	; 6
    35f6:	09 f4       	brne	.+2      	; 0x35fa <signalIoctl+0xf26>
    35f8:	53 c0       	rjmp	.+166    	; 0x36a0 <signalIoctl+0xfcc>
    35fa:	97 30       	cpi	r25, 0x07	; 7
    35fc:	09 f0       	breq	.+2      	; 0x3600 <signalIoctl+0xf2c>
    35fe:	25 c3       	rjmp	.+1610   	; 0x3c4a <signalIoctl+0x1576>
    3600:	5b c0       	rjmp	.+182    	; 0x36b8 <signalIoctl+0xfe4>
    3602:	99 30       	cpi	r25, 0x09	; 9
    3604:	09 f4       	brne	.+2      	; 0x3608 <signalIoctl+0xf34>
    3606:	70 c0       	rjmp	.+224    	; 0x36e8 <signalIoctl+0x1014>
    3608:	9a 30       	cpi	r25, 0x0A	; 10
    360a:	09 f0       	breq	.+2      	; 0x360e <signalIoctl+0xf3a>
    360c:	1e c3       	rjmp	.+1596   	; 0x3c4a <signalIoctl+0x1576>
    360e:	78 c0       	rjmp	.+240    	; 0x3700 <signalIoctl+0x102c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3610:	90 91 00 06 	lds	r25, 0x0600
    3614:	98 23       	and	r25, r24
    3616:	09 f4       	brne	.+2      	; 0x361a <signalIoctl+0xf46>
    3618:	1c c3       	rjmp	.+1592   	; 0x3c52 <signalIoctl+0x157e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    361a:	e0 e0       	ldi	r30, 0x00	; 0
    361c:	f6 e0       	ldi	r31, 0x06	; 6
    361e:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    3620:	cc 24       	eor	r12, r12
    3622:	dd 24       	eor	r13, r13
    3624:	76 01       	movw	r14, r12
    3626:	70 c3       	rjmp	.+1760   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    3628:	90 91 20 06 	lds	r25, 0x0620
    362c:	98 23       	and	r25, r24
    362e:	09 f4       	brne	.+2      	; 0x3632 <signalIoctl+0xf5e>
    3630:	14 c3       	rjmp	.+1576   	; 0x3c5a <signalIoctl+0x1586>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    3632:	e0 e2       	ldi	r30, 0x20	; 32
    3634:	f6 e0       	ldi	r31, 0x06	; 6
    3636:	85 83       	std	Z+5, r24	; 0x05
    3638:	cc 24       	eor	r12, r12
    363a:	dd 24       	eor	r13, r13
    363c:	76 01       	movw	r14, r12
    363e:	64 c3       	rjmp	.+1736   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3640:	90 91 40 06 	lds	r25, 0x0640
    3644:	98 23       	and	r25, r24
    3646:	09 f4       	brne	.+2      	; 0x364a <signalIoctl+0xf76>
    3648:	0c c3       	rjmp	.+1560   	; 0x3c62 <signalIoctl+0x158e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    364a:	e0 e4       	ldi	r30, 0x40	; 64
    364c:	f6 e0       	ldi	r31, 0x06	; 6
    364e:	85 83       	std	Z+5, r24	; 0x05
    3650:	cc 24       	eor	r12, r12
    3652:	dd 24       	eor	r13, r13
    3654:	76 01       	movw	r14, r12
    3656:	58 c3       	rjmp	.+1712   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    3658:	90 91 60 06 	lds	r25, 0x0660
    365c:	98 23       	and	r25, r24
    365e:	09 f4       	brne	.+2      	; 0x3662 <signalIoctl+0xf8e>
    3660:	04 c3       	rjmp	.+1544   	; 0x3c6a <signalIoctl+0x1596>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    3662:	e0 e6       	ldi	r30, 0x60	; 96
    3664:	f6 e0       	ldi	r31, 0x06	; 6
    3666:	85 83       	std	Z+5, r24	; 0x05
    3668:	cc 24       	eor	r12, r12
    366a:	dd 24       	eor	r13, r13
    366c:	76 01       	movw	r14, r12
    366e:	4c c3       	rjmp	.+1688   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3670:	90 91 80 06 	lds	r25, 0x0680
    3674:	98 23       	and	r25, r24
    3676:	09 f4       	brne	.+2      	; 0x367a <signalIoctl+0xfa6>
    3678:	fc c2       	rjmp	.+1528   	; 0x3c72 <signalIoctl+0x159e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    367a:	e0 e8       	ldi	r30, 0x80	; 128
    367c:	f6 e0       	ldi	r31, 0x06	; 6
    367e:	85 83       	std	Z+5, r24	; 0x05
    3680:	cc 24       	eor	r12, r12
    3682:	dd 24       	eor	r13, r13
    3684:	76 01       	movw	r14, r12
    3686:	40 c3       	rjmp	.+1664   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    3688:	90 91 a0 06 	lds	r25, 0x06A0
    368c:	98 23       	and	r25, r24
    368e:	09 f4       	brne	.+2      	; 0x3692 <signalIoctl+0xfbe>
    3690:	f4 c2       	rjmp	.+1512   	; 0x3c7a <signalIoctl+0x15a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    3692:	e0 ea       	ldi	r30, 0xA0	; 160
    3694:	f6 e0       	ldi	r31, 0x06	; 6
    3696:	85 83       	std	Z+5, r24	; 0x05
    3698:	cc 24       	eor	r12, r12
    369a:	dd 24       	eor	r13, r13
    369c:	76 01       	movw	r14, r12
    369e:	34 c3       	rjmp	.+1640   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    36a0:	90 91 e0 06 	lds	r25, 0x06E0
    36a4:	98 23       	and	r25, r24
    36a6:	09 f4       	brne	.+2      	; 0x36aa <signalIoctl+0xfd6>
    36a8:	ec c2       	rjmp	.+1496   	; 0x3c82 <signalIoctl+0x15ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    36aa:	e0 ee       	ldi	r30, 0xE0	; 224
    36ac:	f6 e0       	ldi	r31, 0x06	; 6
    36ae:	85 83       	std	Z+5, r24	; 0x05
    36b0:	cc 24       	eor	r12, r12
    36b2:	dd 24       	eor	r13, r13
    36b4:	76 01       	movw	r14, r12
    36b6:	28 c3       	rjmp	.+1616   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    36b8:	90 91 00 07 	lds	r25, 0x0700
    36bc:	98 23       	and	r25, r24
    36be:	09 f4       	brne	.+2      	; 0x36c2 <signalIoctl+0xfee>
    36c0:	e4 c2       	rjmp	.+1480   	; 0x3c8a <signalIoctl+0x15b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    36c2:	e0 e0       	ldi	r30, 0x00	; 0
    36c4:	f7 e0       	ldi	r31, 0x07	; 7
    36c6:	85 83       	std	Z+5, r24	; 0x05
    36c8:	cc 24       	eor	r12, r12
    36ca:	dd 24       	eor	r13, r13
    36cc:	76 01       	movw	r14, r12
    36ce:	1c c3       	rjmp	.+1592   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    36d0:	90 91 20 07 	lds	r25, 0x0720
    36d4:	98 23       	and	r25, r24
    36d6:	09 f4       	brne	.+2      	; 0x36da <signalIoctl+0x1006>
    36d8:	dc c2       	rjmp	.+1464   	; 0x3c92 <signalIoctl+0x15be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    36da:	e0 e2       	ldi	r30, 0x20	; 32
    36dc:	f7 e0       	ldi	r31, 0x07	; 7
    36de:	85 83       	std	Z+5, r24	; 0x05
    36e0:	cc 24       	eor	r12, r12
    36e2:	dd 24       	eor	r13, r13
    36e4:	76 01       	movw	r14, r12
    36e6:	10 c3       	rjmp	.+1568   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    36e8:	90 91 c0 07 	lds	r25, 0x07C0
    36ec:	98 23       	and	r25, r24
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <signalIoctl+0x101e>
    36f0:	d4 c2       	rjmp	.+1448   	; 0x3c9a <signalIoctl+0x15c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    36f2:	e0 ec       	ldi	r30, 0xC0	; 192
    36f4:	f7 e0       	ldi	r31, 0x07	; 7
    36f6:	85 83       	std	Z+5, r24	; 0x05
    36f8:	cc 24       	eor	r12, r12
    36fa:	dd 24       	eor	r13, r13
    36fc:	76 01       	movw	r14, r12
    36fe:	04 c3       	rjmp	.+1544   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3700:	90 91 e0 07 	lds	r25, 0x07E0
    3704:	98 23       	and	r25, r24
    3706:	09 f4       	brne	.+2      	; 0x370a <signalIoctl+0x1036>
    3708:	cc c2       	rjmp	.+1432   	; 0x3ca2 <signalIoctl+0x15ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    370a:	e0 ee       	ldi	r30, 0xE0	; 224
    370c:	f7 e0       	ldi	r31, 0x07	; 7
    370e:	85 83       	std	Z+5, r24	; 0x05
    3710:	cc 24       	eor	r12, r12
    3712:	dd 24       	eor	r13, r13
    3714:	76 01       	movw	r14, r12
    3716:	f8 c2       	rjmp	.+1520   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_OFF:*/

      case ALL_LEDS_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    3718:	80 91 78 24 	lds	r24, 0x2478
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    371c:	90 91 74 24 	lds	r25, 0x2474
    3720:	95 30       	cpi	r25, 0x05	; 5
    3722:	09 f4       	brne	.+2      	; 0x3726 <signalIoctl+0x1052>
    3724:	61 c0       	rjmp	.+194    	; 0x37e8 <signalIoctl+0x1114>
    3726:	96 30       	cpi	r25, 0x06	; 6
    3728:	80 f4       	brcc	.+32     	; 0x374a <signalIoctl+0x1076>
    372a:	92 30       	cpi	r25, 0x02	; 2
    372c:	c9 f1       	breq	.+114    	; 0x37a0 <signalIoctl+0x10cc>
    372e:	93 30       	cpi	r25, 0x03	; 3
    3730:	30 f4       	brcc	.+12     	; 0x373e <signalIoctl+0x106a>
    3732:	99 23       	and	r25, r25
    3734:	e9 f0       	breq	.+58     	; 0x3770 <signalIoctl+0x109c>
    3736:	91 30       	cpi	r25, 0x01	; 1
    3738:	09 f0       	breq	.+2      	; 0x373c <signalIoctl+0x1068>
    373a:	b7 c2       	rjmp	.+1390   	; 0x3caa <signalIoctl+0x15d6>
    373c:	25 c0       	rjmp	.+74     	; 0x3788 <signalIoctl+0x10b4>
    373e:	93 30       	cpi	r25, 0x03	; 3
    3740:	d9 f1       	breq	.+118    	; 0x37b8 <signalIoctl+0x10e4>
    3742:	94 30       	cpi	r25, 0x04	; 4
    3744:	09 f0       	breq	.+2      	; 0x3748 <signalIoctl+0x1074>
    3746:	b1 c2       	rjmp	.+1378   	; 0x3caa <signalIoctl+0x15d6>
    3748:	43 c0       	rjmp	.+134    	; 0x37d0 <signalIoctl+0x10fc>
    374a:	98 30       	cpi	r25, 0x08	; 8
    374c:	09 f4       	brne	.+2      	; 0x3750 <signalIoctl+0x107c>
    374e:	70 c0       	rjmp	.+224    	; 0x3830 <signalIoctl+0x115c>
    3750:	99 30       	cpi	r25, 0x09	; 9
    3752:	38 f4       	brcc	.+14     	; 0x3762 <signalIoctl+0x108e>
    3754:	96 30       	cpi	r25, 0x06	; 6
    3756:	09 f4       	brne	.+2      	; 0x375a <signalIoctl+0x1086>
    3758:	53 c0       	rjmp	.+166    	; 0x3800 <signalIoctl+0x112c>
    375a:	97 30       	cpi	r25, 0x07	; 7
    375c:	09 f0       	breq	.+2      	; 0x3760 <signalIoctl+0x108c>
    375e:	a5 c2       	rjmp	.+1354   	; 0x3caa <signalIoctl+0x15d6>
    3760:	5b c0       	rjmp	.+182    	; 0x3818 <signalIoctl+0x1144>
    3762:	99 30       	cpi	r25, 0x09	; 9
    3764:	09 f4       	brne	.+2      	; 0x3768 <signalIoctl+0x1094>
    3766:	70 c0       	rjmp	.+224    	; 0x3848 <signalIoctl+0x1174>
    3768:	9a 30       	cpi	r25, 0x0A	; 10
    376a:	09 f0       	breq	.+2      	; 0x376e <signalIoctl+0x109a>
    376c:	9e c2       	rjmp	.+1340   	; 0x3caa <signalIoctl+0x15d6>
    376e:	78 c0       	rjmp	.+240    	; 0x3860 <signalIoctl+0x118c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3770:	90 91 00 06 	lds	r25, 0x0600
    3774:	98 23       	and	r25, r24
    3776:	09 f4       	brne	.+2      	; 0x377a <signalIoctl+0x10a6>
    3778:	9c c2       	rjmp	.+1336   	; 0x3cb2 <signalIoctl+0x15de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    377a:	e0 e0       	ldi	r30, 0x00	; 0
    377c:	f6 e0       	ldi	r31, 0x06	; 6
    377e:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    3780:	cc 24       	eor	r12, r12
    3782:	dd 24       	eor	r13, r13
    3784:	76 01       	movw	r14, r12
    3786:	c0 c2       	rjmp	.+1408   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    3788:	90 91 20 06 	lds	r25, 0x0620
    378c:	98 23       	and	r25, r24
    378e:	09 f4       	brne	.+2      	; 0x3792 <signalIoctl+0x10be>
    3790:	94 c2       	rjmp	.+1320   	; 0x3cba <signalIoctl+0x15e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    3792:	e0 e2       	ldi	r30, 0x20	; 32
    3794:	f6 e0       	ldi	r31, 0x06	; 6
    3796:	87 83       	std	Z+7, r24	; 0x07
    3798:	cc 24       	eor	r12, r12
    379a:	dd 24       	eor	r13, r13
    379c:	76 01       	movw	r14, r12
    379e:	b4 c2       	rjmp	.+1384   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    37a0:	90 91 40 06 	lds	r25, 0x0640
    37a4:	98 23       	and	r25, r24
    37a6:	09 f4       	brne	.+2      	; 0x37aa <signalIoctl+0x10d6>
    37a8:	8c c2       	rjmp	.+1304   	; 0x3cc2 <signalIoctl+0x15ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    37aa:	e0 e4       	ldi	r30, 0x40	; 64
    37ac:	f6 e0       	ldi	r31, 0x06	; 6
    37ae:	87 83       	std	Z+7, r24	; 0x07
    37b0:	cc 24       	eor	r12, r12
    37b2:	dd 24       	eor	r13, r13
    37b4:	76 01       	movw	r14, r12
    37b6:	a8 c2       	rjmp	.+1360   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    37b8:	90 91 60 06 	lds	r25, 0x0660
    37bc:	98 23       	and	r25, r24
    37be:	09 f4       	brne	.+2      	; 0x37c2 <signalIoctl+0x10ee>
    37c0:	84 c2       	rjmp	.+1288   	; 0x3cca <signalIoctl+0x15f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    37c2:	e0 e6       	ldi	r30, 0x60	; 96
    37c4:	f6 e0       	ldi	r31, 0x06	; 6
    37c6:	87 83       	std	Z+7, r24	; 0x07
    37c8:	cc 24       	eor	r12, r12
    37ca:	dd 24       	eor	r13, r13
    37cc:	76 01       	movw	r14, r12
    37ce:	9c c2       	rjmp	.+1336   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    37d0:	90 91 80 06 	lds	r25, 0x0680
    37d4:	98 23       	and	r25, r24
    37d6:	09 f4       	brne	.+2      	; 0x37da <signalIoctl+0x1106>
    37d8:	7c c2       	rjmp	.+1272   	; 0x3cd2 <signalIoctl+0x15fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    37da:	e0 e8       	ldi	r30, 0x80	; 128
    37dc:	f6 e0       	ldi	r31, 0x06	; 6
    37de:	87 83       	std	Z+7, r24	; 0x07
    37e0:	cc 24       	eor	r12, r12
    37e2:	dd 24       	eor	r13, r13
    37e4:	76 01       	movw	r14, r12
    37e6:	90 c2       	rjmp	.+1312   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    37e8:	90 91 a0 06 	lds	r25, 0x06A0
    37ec:	98 23       	and	r25, r24
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <signalIoctl+0x111e>
    37f0:	74 c2       	rjmp	.+1256   	; 0x3cda <signalIoctl+0x1606>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    37f2:	e0 ea       	ldi	r30, 0xA0	; 160
    37f4:	f6 e0       	ldi	r31, 0x06	; 6
    37f6:	87 83       	std	Z+7, r24	; 0x07
    37f8:	cc 24       	eor	r12, r12
    37fa:	dd 24       	eor	r13, r13
    37fc:	76 01       	movw	r14, r12
    37fe:	84 c2       	rjmp	.+1288   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3800:	90 91 e0 06 	lds	r25, 0x06E0
    3804:	98 23       	and	r25, r24
    3806:	09 f4       	brne	.+2      	; 0x380a <signalIoctl+0x1136>
    3808:	6c c2       	rjmp	.+1240   	; 0x3ce2 <signalIoctl+0x160e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    380a:	e0 ee       	ldi	r30, 0xE0	; 224
    380c:	f6 e0       	ldi	r31, 0x06	; 6
    380e:	87 83       	std	Z+7, r24	; 0x07
    3810:	cc 24       	eor	r12, r12
    3812:	dd 24       	eor	r13, r13
    3814:	76 01       	movw	r14, r12
    3816:	78 c2       	rjmp	.+1264   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    3818:	90 91 00 07 	lds	r25, 0x0700
    381c:	98 23       	and	r25, r24
    381e:	09 f4       	brne	.+2      	; 0x3822 <signalIoctl+0x114e>
    3820:	64 c2       	rjmp	.+1224   	; 0x3cea <signalIoctl+0x1616>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    3822:	e0 e0       	ldi	r30, 0x00	; 0
    3824:	f7 e0       	ldi	r31, 0x07	; 7
    3826:	87 83       	std	Z+7, r24	; 0x07
    3828:	cc 24       	eor	r12, r12
    382a:	dd 24       	eor	r13, r13
    382c:	76 01       	movw	r14, r12
    382e:	6c c2       	rjmp	.+1240   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3830:	90 91 20 07 	lds	r25, 0x0720
    3834:	98 23       	and	r25, r24
    3836:	09 f4       	brne	.+2      	; 0x383a <signalIoctl+0x1166>
    3838:	5c c2       	rjmp	.+1208   	; 0x3cf2 <signalIoctl+0x161e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    383a:	e0 e2       	ldi	r30, 0x20	; 32
    383c:	f7 e0       	ldi	r31, 0x07	; 7
    383e:	87 83       	std	Z+7, r24	; 0x07
    3840:	cc 24       	eor	r12, r12
    3842:	dd 24       	eor	r13, r13
    3844:	76 01       	movw	r14, r12
    3846:	60 c2       	rjmp	.+1216   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3848:	90 91 c0 07 	lds	r25, 0x07C0
    384c:	98 23       	and	r25, r24
    384e:	09 f4       	brne	.+2      	; 0x3852 <signalIoctl+0x117e>
    3850:	54 c2       	rjmp	.+1192   	; 0x3cfa <signalIoctl+0x1626>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    3852:	e0 ec       	ldi	r30, 0xC0	; 192
    3854:	f7 e0       	ldi	r31, 0x07	; 7
    3856:	87 83       	std	Z+7, r24	; 0x07
    3858:	cc 24       	eor	r12, r12
    385a:	dd 24       	eor	r13, r13
    385c:	76 01       	movw	r14, r12
    385e:	54 c2       	rjmp	.+1192   	; 0x3d08 <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3860:	90 91 e0 07 	lds	r25, 0x07E0
    3864:	98 23       	and	r25, r24
    3866:	09 f4       	brne	.+2      	; 0x386a <signalIoctl+0x1196>
    3868:	4c c2       	rjmp	.+1176   	; 0x3d02 <signalIoctl+0x162e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    386a:	e0 ee       	ldi	r30, 0xE0	; 224
    386c:	f7 e0       	ldi	r31, 0x07	; 7
    386e:	87 83       	std	Z+7, r24	; 0x07
    3870:	cc 24       	eor	r12, r12
    3872:	dd 24       	eor	r13, r13
    3874:	76 01       	movw	r14, r12
    3876:	48 c2       	rjmp	.+1168   	; 0x3d08 <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_TOGGLE:*/

      default:

         i_return = (int32_t)ARB_INVALID_CMD;
    3878:	8b ef       	ldi	r24, 0xFB	; 251
    387a:	c8 2e       	mov	r12, r24
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	d8 2e       	mov	r13, r24
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	e8 2e       	mov	r14, r24
    3884:	8f ef       	ldi	r24, 0xFF	; 255
    3886:	f8 2e       	mov	r15, r24
    3888:	3f c2       	rjmp	.+1150   	; 0x3d08 <signalIoctl+0x1634>

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
    388a:	cc 24       	eor	r12, r12
    388c:	dd 24       	eor	r13, r13
    388e:	76 01       	movw	r14, r12
    3890:	3b c2       	rjmp	.+1142   	; 0x3d08 <signalIoctl+0x1634>
    3892:	cc 24       	eor	r12, r12
    3894:	dd 24       	eor	r13, r13
    3896:	76 01       	movw	r14, r12
    3898:	37 c2       	rjmp	.+1134   	; 0x3d08 <signalIoctl+0x1634>
    389a:	cc 24       	eor	r12, r12
    389c:	dd 24       	eor	r13, r13
    389e:	76 01       	movw	r14, r12
    38a0:	33 c2       	rjmp	.+1126   	; 0x3d08 <signalIoctl+0x1634>
    38a2:	cc 24       	eor	r12, r12
    38a4:	dd 24       	eor	r13, r13
    38a6:	76 01       	movw	r14, r12
    38a8:	2f c2       	rjmp	.+1118   	; 0x3d08 <signalIoctl+0x1634>
    38aa:	cc 24       	eor	r12, r12
    38ac:	dd 24       	eor	r13, r13
    38ae:	76 01       	movw	r14, r12
    38b0:	2b c2       	rjmp	.+1110   	; 0x3d08 <signalIoctl+0x1634>
    38b2:	cc 24       	eor	r12, r12
    38b4:	dd 24       	eor	r13, r13
    38b6:	76 01       	movw	r14, r12
    38b8:	27 c2       	rjmp	.+1102   	; 0x3d08 <signalIoctl+0x1634>
    38ba:	cc 24       	eor	r12, r12
    38bc:	dd 24       	eor	r13, r13
    38be:	76 01       	movw	r14, r12
    38c0:	23 c2       	rjmp	.+1094   	; 0x3d08 <signalIoctl+0x1634>
    38c2:	cc 24       	eor	r12, r12
    38c4:	dd 24       	eor	r13, r13
    38c6:	76 01       	movw	r14, r12
    38c8:	1f c2       	rjmp	.+1086   	; 0x3d08 <signalIoctl+0x1634>
    38ca:	cc 24       	eor	r12, r12
    38cc:	dd 24       	eor	r13, r13
    38ce:	76 01       	movw	r14, r12
    38d0:	1b c2       	rjmp	.+1078   	; 0x3d08 <signalIoctl+0x1634>
    38d2:	cc 24       	eor	r12, r12
    38d4:	dd 24       	eor	r13, r13
    38d6:	76 01       	movw	r14, r12
    38d8:	17 c2       	rjmp	.+1070   	; 0x3d08 <signalIoctl+0x1634>
    38da:	cc 24       	eor	r12, r12
    38dc:	dd 24       	eor	r13, r13
    38de:	76 01       	movw	r14, r12
    38e0:	13 c2       	rjmp	.+1062   	; 0x3d08 <signalIoctl+0x1634>
    38e2:	cc 24       	eor	r12, r12
    38e4:	dd 24       	eor	r13, r13
    38e6:	76 01       	movw	r14, r12
    38e8:	0f c2       	rjmp	.+1054   	; 0x3d08 <signalIoctl+0x1634>
    38ea:	cc 24       	eor	r12, r12
    38ec:	dd 24       	eor	r13, r13
    38ee:	76 01       	movw	r14, r12
    38f0:	0b c2       	rjmp	.+1046   	; 0x3d08 <signalIoctl+0x1634>
    38f2:	cc 24       	eor	r12, r12
    38f4:	dd 24       	eor	r13, r13
    38f6:	76 01       	movw	r14, r12
    38f8:	07 c2       	rjmp	.+1038   	; 0x3d08 <signalIoctl+0x1634>
    38fa:	cc 24       	eor	r12, r12
    38fc:	dd 24       	eor	r13, r13
    38fe:	76 01       	movw	r14, r12
    3900:	03 c2       	rjmp	.+1030   	; 0x3d08 <signalIoctl+0x1634>
    3902:	cc 24       	eor	r12, r12
    3904:	dd 24       	eor	r13, r13
    3906:	76 01       	movw	r14, r12
    3908:	ff c1       	rjmp	.+1022   	; 0x3d08 <signalIoctl+0x1634>
    390a:	cc 24       	eor	r12, r12
    390c:	dd 24       	eor	r13, r13
    390e:	76 01       	movw	r14, r12
    3910:	fb c1       	rjmp	.+1014   	; 0x3d08 <signalIoctl+0x1634>
    3912:	cc 24       	eor	r12, r12
    3914:	dd 24       	eor	r13, r13
    3916:	76 01       	movw	r14, r12
    3918:	f7 c1       	rjmp	.+1006   	; 0x3d08 <signalIoctl+0x1634>
    391a:	cc 24       	eor	r12, r12
    391c:	dd 24       	eor	r13, r13
    391e:	76 01       	movw	r14, r12
    3920:	f3 c1       	rjmp	.+998    	; 0x3d08 <signalIoctl+0x1634>
    3922:	cc 24       	eor	r12, r12
    3924:	dd 24       	eor	r13, r13
    3926:	76 01       	movw	r14, r12
    3928:	ef c1       	rjmp	.+990    	; 0x3d08 <signalIoctl+0x1634>
    392a:	cc 24       	eor	r12, r12
    392c:	dd 24       	eor	r13, r13
    392e:	76 01       	movw	r14, r12
    3930:	eb c1       	rjmp	.+982    	; 0x3d08 <signalIoctl+0x1634>
    3932:	cc 24       	eor	r12, r12
    3934:	dd 24       	eor	r13, r13
    3936:	76 01       	movw	r14, r12
    3938:	e7 c1       	rjmp	.+974    	; 0x3d08 <signalIoctl+0x1634>
    393a:	cc 24       	eor	r12, r12
    393c:	dd 24       	eor	r13, r13
    393e:	76 01       	movw	r14, r12
    3940:	e3 c1       	rjmp	.+966    	; 0x3d08 <signalIoctl+0x1634>
    3942:	cc 24       	eor	r12, r12
    3944:	dd 24       	eor	r13, r13
    3946:	76 01       	movw	r14, r12
    3948:	df c1       	rjmp	.+958    	; 0x3d08 <signalIoctl+0x1634>
    394a:	cc 24       	eor	r12, r12
    394c:	dd 24       	eor	r13, r13
    394e:	76 01       	movw	r14, r12
    3950:	db c1       	rjmp	.+950    	; 0x3d08 <signalIoctl+0x1634>
    3952:	cc 24       	eor	r12, r12
    3954:	dd 24       	eor	r13, r13
    3956:	76 01       	movw	r14, r12
    3958:	d7 c1       	rjmp	.+942    	; 0x3d08 <signalIoctl+0x1634>
    395a:	cc 24       	eor	r12, r12
    395c:	dd 24       	eor	r13, r13
    395e:	76 01       	movw	r14, r12
    3960:	d3 c1       	rjmp	.+934    	; 0x3d08 <signalIoctl+0x1634>
    3962:	cc 24       	eor	r12, r12
    3964:	dd 24       	eor	r13, r13
    3966:	76 01       	movw	r14, r12
    3968:	cf c1       	rjmp	.+926    	; 0x3d08 <signalIoctl+0x1634>
    396a:	cc 24       	eor	r12, r12
    396c:	dd 24       	eor	r13, r13
    396e:	76 01       	movw	r14, r12
    3970:	cb c1       	rjmp	.+918    	; 0x3d08 <signalIoctl+0x1634>
    3972:	cc 24       	eor	r12, r12
    3974:	dd 24       	eor	r13, r13
    3976:	76 01       	movw	r14, r12
    3978:	c7 c1       	rjmp	.+910    	; 0x3d08 <signalIoctl+0x1634>
    397a:	cc 24       	eor	r12, r12
    397c:	dd 24       	eor	r13, r13
    397e:	76 01       	movw	r14, r12
    3980:	c3 c1       	rjmp	.+902    	; 0x3d08 <signalIoctl+0x1634>
    3982:	cc 24       	eor	r12, r12
    3984:	dd 24       	eor	r13, r13
    3986:	76 01       	movw	r14, r12
    3988:	bf c1       	rjmp	.+894    	; 0x3d08 <signalIoctl+0x1634>
    398a:	cc 24       	eor	r12, r12
    398c:	dd 24       	eor	r13, r13
    398e:	76 01       	movw	r14, r12
    3990:	bb c1       	rjmp	.+886    	; 0x3d08 <signalIoctl+0x1634>
    3992:	cc 24       	eor	r12, r12
    3994:	dd 24       	eor	r13, r13
    3996:	76 01       	movw	r14, r12
    3998:	b7 c1       	rjmp	.+878    	; 0x3d08 <signalIoctl+0x1634>
    399a:	cc 24       	eor	r12, r12
    399c:	dd 24       	eor	r13, r13
    399e:	76 01       	movw	r14, r12
    39a0:	b3 c1       	rjmp	.+870    	; 0x3d08 <signalIoctl+0x1634>
    39a2:	cc 24       	eor	r12, r12
    39a4:	dd 24       	eor	r13, r13
    39a6:	76 01       	movw	r14, r12
    39a8:	af c1       	rjmp	.+862    	; 0x3d08 <signalIoctl+0x1634>
    39aa:	cc 24       	eor	r12, r12
    39ac:	dd 24       	eor	r13, r13
    39ae:	76 01       	movw	r14, r12
    39b0:	ab c1       	rjmp	.+854    	; 0x3d08 <signalIoctl+0x1634>
    39b2:	cc 24       	eor	r12, r12
    39b4:	dd 24       	eor	r13, r13
    39b6:	76 01       	movw	r14, r12
    39b8:	a7 c1       	rjmp	.+846    	; 0x3d08 <signalIoctl+0x1634>
    39ba:	cc 24       	eor	r12, r12
    39bc:	dd 24       	eor	r13, r13
    39be:	76 01       	movw	r14, r12
    39c0:	a3 c1       	rjmp	.+838    	; 0x3d08 <signalIoctl+0x1634>
    39c2:	cc 24       	eor	r12, r12
    39c4:	dd 24       	eor	r13, r13
    39c6:	76 01       	movw	r14, r12
    39c8:	9f c1       	rjmp	.+830    	; 0x3d08 <signalIoctl+0x1634>
    39ca:	cc 24       	eor	r12, r12
    39cc:	dd 24       	eor	r13, r13
    39ce:	76 01       	movw	r14, r12
    39d0:	9b c1       	rjmp	.+822    	; 0x3d08 <signalIoctl+0x1634>
    39d2:	cc 24       	eor	r12, r12
    39d4:	dd 24       	eor	r13, r13
    39d6:	76 01       	movw	r14, r12
    39d8:	97 c1       	rjmp	.+814    	; 0x3d08 <signalIoctl+0x1634>
    39da:	cc 24       	eor	r12, r12
    39dc:	dd 24       	eor	r13, r13
    39de:	76 01       	movw	r14, r12
    39e0:	93 c1       	rjmp	.+806    	; 0x3d08 <signalIoctl+0x1634>
    39e2:	cc 24       	eor	r12, r12
    39e4:	dd 24       	eor	r13, r13
    39e6:	76 01       	movw	r14, r12
    39e8:	8f c1       	rjmp	.+798    	; 0x3d08 <signalIoctl+0x1634>
    39ea:	cc 24       	eor	r12, r12
    39ec:	dd 24       	eor	r13, r13
    39ee:	76 01       	movw	r14, r12
    39f0:	8b c1       	rjmp	.+790    	; 0x3d08 <signalIoctl+0x1634>
    39f2:	cc 24       	eor	r12, r12
    39f4:	dd 24       	eor	r13, r13
    39f6:	76 01       	movw	r14, r12
    39f8:	87 c1       	rjmp	.+782    	; 0x3d08 <signalIoctl+0x1634>
    39fa:	cc 24       	eor	r12, r12
    39fc:	dd 24       	eor	r13, r13
    39fe:	76 01       	movw	r14, r12
    3a00:	83 c1       	rjmp	.+774    	; 0x3d08 <signalIoctl+0x1634>
    3a02:	cc 24       	eor	r12, r12
    3a04:	dd 24       	eor	r13, r13
    3a06:	76 01       	movw	r14, r12
    3a08:	7f c1       	rjmp	.+766    	; 0x3d08 <signalIoctl+0x1634>
    3a0a:	cc 24       	eor	r12, r12
    3a0c:	dd 24       	eor	r13, r13
    3a0e:	76 01       	movw	r14, r12
    3a10:	7b c1       	rjmp	.+758    	; 0x3d08 <signalIoctl+0x1634>
    3a12:	cc 24       	eor	r12, r12
    3a14:	dd 24       	eor	r13, r13
    3a16:	76 01       	movw	r14, r12
    3a18:	77 c1       	rjmp	.+750    	; 0x3d08 <signalIoctl+0x1634>
    3a1a:	cc 24       	eor	r12, r12
    3a1c:	dd 24       	eor	r13, r13
    3a1e:	76 01       	movw	r14, r12
    3a20:	73 c1       	rjmp	.+742    	; 0x3d08 <signalIoctl+0x1634>
    3a22:	cc 24       	eor	r12, r12
    3a24:	dd 24       	eor	r13, r13
    3a26:	76 01       	movw	r14, r12
    3a28:	6f c1       	rjmp	.+734    	; 0x3d08 <signalIoctl+0x1634>
    3a2a:	cc 24       	eor	r12, r12
    3a2c:	dd 24       	eor	r13, r13
    3a2e:	76 01       	movw	r14, r12
    3a30:	6b c1       	rjmp	.+726    	; 0x3d08 <signalIoctl+0x1634>
    3a32:	cc 24       	eor	r12, r12
    3a34:	dd 24       	eor	r13, r13
    3a36:	76 01       	movw	r14, r12
    3a38:	67 c1       	rjmp	.+718    	; 0x3d08 <signalIoctl+0x1634>
    3a3a:	cc 24       	eor	r12, r12
    3a3c:	dd 24       	eor	r13, r13
    3a3e:	76 01       	movw	r14, r12
    3a40:	63 c1       	rjmp	.+710    	; 0x3d08 <signalIoctl+0x1634>
    3a42:	cc 24       	eor	r12, r12
    3a44:	dd 24       	eor	r13, r13
    3a46:	76 01       	movw	r14, r12
    3a48:	5f c1       	rjmp	.+702    	; 0x3d08 <signalIoctl+0x1634>
    3a4a:	cc 24       	eor	r12, r12
    3a4c:	dd 24       	eor	r13, r13
    3a4e:	76 01       	movw	r14, r12
    3a50:	5b c1       	rjmp	.+694    	; 0x3d08 <signalIoctl+0x1634>
    3a52:	cc 24       	eor	r12, r12
    3a54:	dd 24       	eor	r13, r13
    3a56:	76 01       	movw	r14, r12
    3a58:	57 c1       	rjmp	.+686    	; 0x3d08 <signalIoctl+0x1634>
    3a5a:	cc 24       	eor	r12, r12
    3a5c:	dd 24       	eor	r13, r13
    3a5e:	76 01       	movw	r14, r12
    3a60:	53 c1       	rjmp	.+678    	; 0x3d08 <signalIoctl+0x1634>
    3a62:	cc 24       	eor	r12, r12
    3a64:	dd 24       	eor	r13, r13
    3a66:	76 01       	movw	r14, r12
    3a68:	4f c1       	rjmp	.+670    	; 0x3d08 <signalIoctl+0x1634>
    3a6a:	cc 24       	eor	r12, r12
    3a6c:	dd 24       	eor	r13, r13
    3a6e:	76 01       	movw	r14, r12
    3a70:	4b c1       	rjmp	.+662    	; 0x3d08 <signalIoctl+0x1634>
    3a72:	cc 24       	eor	r12, r12
    3a74:	dd 24       	eor	r13, r13
    3a76:	76 01       	movw	r14, r12
    3a78:	47 c1       	rjmp	.+654    	; 0x3d08 <signalIoctl+0x1634>
    3a7a:	cc 24       	eor	r12, r12
    3a7c:	dd 24       	eor	r13, r13
    3a7e:	76 01       	movw	r14, r12
    3a80:	43 c1       	rjmp	.+646    	; 0x3d08 <signalIoctl+0x1634>
    3a82:	cc 24       	eor	r12, r12
    3a84:	dd 24       	eor	r13, r13
    3a86:	76 01       	movw	r14, r12
    3a88:	3f c1       	rjmp	.+638    	; 0x3d08 <signalIoctl+0x1634>
    3a8a:	cc 24       	eor	r12, r12
    3a8c:	dd 24       	eor	r13, r13
    3a8e:	76 01       	movw	r14, r12
    3a90:	3b c1       	rjmp	.+630    	; 0x3d08 <signalIoctl+0x1634>
    3a92:	cc 24       	eor	r12, r12
    3a94:	dd 24       	eor	r13, r13
    3a96:	76 01       	movw	r14, r12
    3a98:	37 c1       	rjmp	.+622    	; 0x3d08 <signalIoctl+0x1634>
    3a9a:	cc 24       	eor	r12, r12
    3a9c:	dd 24       	eor	r13, r13
    3a9e:	76 01       	movw	r14, r12
    3aa0:	33 c1       	rjmp	.+614    	; 0x3d08 <signalIoctl+0x1634>
    3aa2:	cc 24       	eor	r12, r12
    3aa4:	dd 24       	eor	r13, r13
    3aa6:	76 01       	movw	r14, r12
    3aa8:	2f c1       	rjmp	.+606    	; 0x3d08 <signalIoctl+0x1634>
    3aaa:	cc 24       	eor	r12, r12
    3aac:	dd 24       	eor	r13, r13
    3aae:	76 01       	movw	r14, r12
    3ab0:	2b c1       	rjmp	.+598    	; 0x3d08 <signalIoctl+0x1634>
    3ab2:	cc 24       	eor	r12, r12
    3ab4:	dd 24       	eor	r13, r13
    3ab6:	76 01       	movw	r14, r12
    3ab8:	27 c1       	rjmp	.+590    	; 0x3d08 <signalIoctl+0x1634>
    3aba:	cc 24       	eor	r12, r12
    3abc:	dd 24       	eor	r13, r13
    3abe:	76 01       	movw	r14, r12
    3ac0:	23 c1       	rjmp	.+582    	; 0x3d08 <signalIoctl+0x1634>
    3ac2:	cc 24       	eor	r12, r12
    3ac4:	dd 24       	eor	r13, r13
    3ac6:	76 01       	movw	r14, r12
    3ac8:	1f c1       	rjmp	.+574    	; 0x3d08 <signalIoctl+0x1634>
    3aca:	cc 24       	eor	r12, r12
    3acc:	dd 24       	eor	r13, r13
    3ace:	76 01       	movw	r14, r12
    3ad0:	1b c1       	rjmp	.+566    	; 0x3d08 <signalIoctl+0x1634>
    3ad2:	cc 24       	eor	r12, r12
    3ad4:	dd 24       	eor	r13, r13
    3ad6:	76 01       	movw	r14, r12
    3ad8:	17 c1       	rjmp	.+558    	; 0x3d08 <signalIoctl+0x1634>
    3ada:	cc 24       	eor	r12, r12
    3adc:	dd 24       	eor	r13, r13
    3ade:	76 01       	movw	r14, r12
    3ae0:	13 c1       	rjmp	.+550    	; 0x3d08 <signalIoctl+0x1634>
    3ae2:	cc 24       	eor	r12, r12
    3ae4:	dd 24       	eor	r13, r13
    3ae6:	76 01       	movw	r14, r12
    3ae8:	0f c1       	rjmp	.+542    	; 0x3d08 <signalIoctl+0x1634>
    3aea:	cc 24       	eor	r12, r12
    3aec:	dd 24       	eor	r13, r13
    3aee:	76 01       	movw	r14, r12
    3af0:	0b c1       	rjmp	.+534    	; 0x3d08 <signalIoctl+0x1634>
    3af2:	cc 24       	eor	r12, r12
    3af4:	dd 24       	eor	r13, r13
    3af6:	76 01       	movw	r14, r12
    3af8:	07 c1       	rjmp	.+526    	; 0x3d08 <signalIoctl+0x1634>
    3afa:	cc 24       	eor	r12, r12
    3afc:	dd 24       	eor	r13, r13
    3afe:	76 01       	movw	r14, r12
    3b00:	03 c1       	rjmp	.+518    	; 0x3d08 <signalIoctl+0x1634>
    3b02:	cc 24       	eor	r12, r12
    3b04:	dd 24       	eor	r13, r13
    3b06:	76 01       	movw	r14, r12
    3b08:	ff c0       	rjmp	.+510    	; 0x3d08 <signalIoctl+0x1634>
    3b0a:	cc 24       	eor	r12, r12
    3b0c:	dd 24       	eor	r13, r13
    3b0e:	76 01       	movw	r14, r12
    3b10:	fb c0       	rjmp	.+502    	; 0x3d08 <signalIoctl+0x1634>
    3b12:	cc 24       	eor	r12, r12
    3b14:	dd 24       	eor	r13, r13
    3b16:	76 01       	movw	r14, r12
    3b18:	f7 c0       	rjmp	.+494    	; 0x3d08 <signalIoctl+0x1634>
    3b1a:	cc 24       	eor	r12, r12
    3b1c:	dd 24       	eor	r13, r13
    3b1e:	76 01       	movw	r14, r12
    3b20:	f3 c0       	rjmp	.+486    	; 0x3d08 <signalIoctl+0x1634>
    3b22:	cc 24       	eor	r12, r12
    3b24:	dd 24       	eor	r13, r13
    3b26:	76 01       	movw	r14, r12
    3b28:	ef c0       	rjmp	.+478    	; 0x3d08 <signalIoctl+0x1634>
    3b2a:	cc 24       	eor	r12, r12
    3b2c:	dd 24       	eor	r13, r13
    3b2e:	76 01       	movw	r14, r12
    3b30:	eb c0       	rjmp	.+470    	; 0x3d08 <signalIoctl+0x1634>
    3b32:	cc 24       	eor	r12, r12
    3b34:	dd 24       	eor	r13, r13
    3b36:	76 01       	movw	r14, r12
    3b38:	e7 c0       	rjmp	.+462    	; 0x3d08 <signalIoctl+0x1634>
    3b3a:	cc 24       	eor	r12, r12
    3b3c:	dd 24       	eor	r13, r13
    3b3e:	76 01       	movw	r14, r12
    3b40:	e3 c0       	rjmp	.+454    	; 0x3d08 <signalIoctl+0x1634>
    3b42:	cc 24       	eor	r12, r12
    3b44:	dd 24       	eor	r13, r13
    3b46:	76 01       	movw	r14, r12
    3b48:	df c0       	rjmp	.+446    	; 0x3d08 <signalIoctl+0x1634>
    3b4a:	cc 24       	eor	r12, r12
    3b4c:	dd 24       	eor	r13, r13
    3b4e:	76 01       	movw	r14, r12
    3b50:	db c0       	rjmp	.+438    	; 0x3d08 <signalIoctl+0x1634>
    3b52:	cc 24       	eor	r12, r12
    3b54:	dd 24       	eor	r13, r13
    3b56:	76 01       	movw	r14, r12
    3b58:	d7 c0       	rjmp	.+430    	; 0x3d08 <signalIoctl+0x1634>
    3b5a:	cc 24       	eor	r12, r12
    3b5c:	dd 24       	eor	r13, r13
    3b5e:	76 01       	movw	r14, r12
    3b60:	d3 c0       	rjmp	.+422    	; 0x3d08 <signalIoctl+0x1634>
    3b62:	cc 24       	eor	r12, r12
    3b64:	dd 24       	eor	r13, r13
    3b66:	76 01       	movw	r14, r12
    3b68:	cf c0       	rjmp	.+414    	; 0x3d08 <signalIoctl+0x1634>
    3b6a:	cc 24       	eor	r12, r12
    3b6c:	dd 24       	eor	r13, r13
    3b6e:	76 01       	movw	r14, r12
    3b70:	cb c0       	rjmp	.+406    	; 0x3d08 <signalIoctl+0x1634>
    3b72:	cc 24       	eor	r12, r12
    3b74:	dd 24       	eor	r13, r13
    3b76:	76 01       	movw	r14, r12
    3b78:	c7 c0       	rjmp	.+398    	; 0x3d08 <signalIoctl+0x1634>
    3b7a:	cc 24       	eor	r12, r12
    3b7c:	dd 24       	eor	r13, r13
    3b7e:	76 01       	movw	r14, r12
    3b80:	c3 c0       	rjmp	.+390    	; 0x3d08 <signalIoctl+0x1634>
    3b82:	cc 24       	eor	r12, r12
    3b84:	dd 24       	eor	r13, r13
    3b86:	76 01       	movw	r14, r12
    3b88:	bf c0       	rjmp	.+382    	; 0x3d08 <signalIoctl+0x1634>
    3b8a:	cc 24       	eor	r12, r12
    3b8c:	dd 24       	eor	r13, r13
    3b8e:	76 01       	movw	r14, r12
    3b90:	bb c0       	rjmp	.+374    	; 0x3d08 <signalIoctl+0x1634>
    3b92:	cc 24       	eor	r12, r12
    3b94:	dd 24       	eor	r13, r13
    3b96:	76 01       	movw	r14, r12
    3b98:	b7 c0       	rjmp	.+366    	; 0x3d08 <signalIoctl+0x1634>
    3b9a:	cc 24       	eor	r12, r12
    3b9c:	dd 24       	eor	r13, r13
    3b9e:	76 01       	movw	r14, r12
    3ba0:	b3 c0       	rjmp	.+358    	; 0x3d08 <signalIoctl+0x1634>
    3ba2:	cc 24       	eor	r12, r12
    3ba4:	dd 24       	eor	r13, r13
    3ba6:	76 01       	movw	r14, r12
    3ba8:	af c0       	rjmp	.+350    	; 0x3d08 <signalIoctl+0x1634>
    3baa:	cc 24       	eor	r12, r12
    3bac:	dd 24       	eor	r13, r13
    3bae:	76 01       	movw	r14, r12
    3bb0:	ab c0       	rjmp	.+342    	; 0x3d08 <signalIoctl+0x1634>
    3bb2:	cc 24       	eor	r12, r12
    3bb4:	dd 24       	eor	r13, r13
    3bb6:	76 01       	movw	r14, r12
    3bb8:	a7 c0       	rjmp	.+334    	; 0x3d08 <signalIoctl+0x1634>
    3bba:	cc 24       	eor	r12, r12
    3bbc:	dd 24       	eor	r13, r13
    3bbe:	76 01       	movw	r14, r12
    3bc0:	a3 c0       	rjmp	.+326    	; 0x3d08 <signalIoctl+0x1634>
    3bc2:	cc 24       	eor	r12, r12
    3bc4:	dd 24       	eor	r13, r13
    3bc6:	76 01       	movw	r14, r12
    3bc8:	9f c0       	rjmp	.+318    	; 0x3d08 <signalIoctl+0x1634>
    3bca:	cc 24       	eor	r12, r12
    3bcc:	dd 24       	eor	r13, r13
    3bce:	76 01       	movw	r14, r12
    3bd0:	9b c0       	rjmp	.+310    	; 0x3d08 <signalIoctl+0x1634>
    3bd2:	cc 24       	eor	r12, r12
    3bd4:	dd 24       	eor	r13, r13
    3bd6:	76 01       	movw	r14, r12
    3bd8:	97 c0       	rjmp	.+302    	; 0x3d08 <signalIoctl+0x1634>
    3bda:	cc 24       	eor	r12, r12
    3bdc:	dd 24       	eor	r13, r13
    3bde:	76 01       	movw	r14, r12
    3be0:	93 c0       	rjmp	.+294    	; 0x3d08 <signalIoctl+0x1634>
    3be2:	cc 24       	eor	r12, r12
    3be4:	dd 24       	eor	r13, r13
    3be6:	76 01       	movw	r14, r12
    3be8:	8f c0       	rjmp	.+286    	; 0x3d08 <signalIoctl+0x1634>
    3bea:	cc 24       	eor	r12, r12
    3bec:	dd 24       	eor	r13, r13
    3bee:	76 01       	movw	r14, r12
    3bf0:	8b c0       	rjmp	.+278    	; 0x3d08 <signalIoctl+0x1634>
    3bf2:	cc 24       	eor	r12, r12
    3bf4:	dd 24       	eor	r13, r13
    3bf6:	76 01       	movw	r14, r12
    3bf8:	87 c0       	rjmp	.+270    	; 0x3d08 <signalIoctl+0x1634>
    3bfa:	cc 24       	eor	r12, r12
    3bfc:	dd 24       	eor	r13, r13
    3bfe:	76 01       	movw	r14, r12
    3c00:	83 c0       	rjmp	.+262    	; 0x3d08 <signalIoctl+0x1634>
    3c02:	cc 24       	eor	r12, r12
    3c04:	dd 24       	eor	r13, r13
    3c06:	76 01       	movw	r14, r12
    3c08:	7f c0       	rjmp	.+254    	; 0x3d08 <signalIoctl+0x1634>
    3c0a:	cc 24       	eor	r12, r12
    3c0c:	dd 24       	eor	r13, r13
    3c0e:	76 01       	movw	r14, r12
    3c10:	7b c0       	rjmp	.+246    	; 0x3d08 <signalIoctl+0x1634>
    3c12:	cc 24       	eor	r12, r12
    3c14:	dd 24       	eor	r13, r13
    3c16:	76 01       	movw	r14, r12
    3c18:	77 c0       	rjmp	.+238    	; 0x3d08 <signalIoctl+0x1634>
    3c1a:	cc 24       	eor	r12, r12
    3c1c:	dd 24       	eor	r13, r13
    3c1e:	76 01       	movw	r14, r12
    3c20:	73 c0       	rjmp	.+230    	; 0x3d08 <signalIoctl+0x1634>
    3c22:	cc 24       	eor	r12, r12
    3c24:	dd 24       	eor	r13, r13
    3c26:	76 01       	movw	r14, r12
    3c28:	6f c0       	rjmp	.+222    	; 0x3d08 <signalIoctl+0x1634>
    3c2a:	cc 24       	eor	r12, r12
    3c2c:	dd 24       	eor	r13, r13
    3c2e:	76 01       	movw	r14, r12
    3c30:	6b c0       	rjmp	.+214    	; 0x3d08 <signalIoctl+0x1634>
    3c32:	cc 24       	eor	r12, r12
    3c34:	dd 24       	eor	r13, r13
    3c36:	76 01       	movw	r14, r12
    3c38:	67 c0       	rjmp	.+206    	; 0x3d08 <signalIoctl+0x1634>
    3c3a:	cc 24       	eor	r12, r12
    3c3c:	dd 24       	eor	r13, r13
    3c3e:	76 01       	movw	r14, r12
    3c40:	63 c0       	rjmp	.+198    	; 0x3d08 <signalIoctl+0x1634>
    3c42:	cc 24       	eor	r12, r12
    3c44:	dd 24       	eor	r13, r13
    3c46:	76 01       	movw	r14, r12
    3c48:	5f c0       	rjmp	.+190    	; 0x3d08 <signalIoctl+0x1634>
    3c4a:	cc 24       	eor	r12, r12
    3c4c:	dd 24       	eor	r13, r13
    3c4e:	76 01       	movw	r14, r12
    3c50:	5b c0       	rjmp	.+182    	; 0x3d08 <signalIoctl+0x1634>
    3c52:	cc 24       	eor	r12, r12
    3c54:	dd 24       	eor	r13, r13
    3c56:	76 01       	movw	r14, r12
    3c58:	57 c0       	rjmp	.+174    	; 0x3d08 <signalIoctl+0x1634>
    3c5a:	cc 24       	eor	r12, r12
    3c5c:	dd 24       	eor	r13, r13
    3c5e:	76 01       	movw	r14, r12
    3c60:	53 c0       	rjmp	.+166    	; 0x3d08 <signalIoctl+0x1634>
    3c62:	cc 24       	eor	r12, r12
    3c64:	dd 24       	eor	r13, r13
    3c66:	76 01       	movw	r14, r12
    3c68:	4f c0       	rjmp	.+158    	; 0x3d08 <signalIoctl+0x1634>
    3c6a:	cc 24       	eor	r12, r12
    3c6c:	dd 24       	eor	r13, r13
    3c6e:	76 01       	movw	r14, r12
    3c70:	4b c0       	rjmp	.+150    	; 0x3d08 <signalIoctl+0x1634>
    3c72:	cc 24       	eor	r12, r12
    3c74:	dd 24       	eor	r13, r13
    3c76:	76 01       	movw	r14, r12
    3c78:	47 c0       	rjmp	.+142    	; 0x3d08 <signalIoctl+0x1634>
    3c7a:	cc 24       	eor	r12, r12
    3c7c:	dd 24       	eor	r13, r13
    3c7e:	76 01       	movw	r14, r12
    3c80:	43 c0       	rjmp	.+134    	; 0x3d08 <signalIoctl+0x1634>
    3c82:	cc 24       	eor	r12, r12
    3c84:	dd 24       	eor	r13, r13
    3c86:	76 01       	movw	r14, r12
    3c88:	3f c0       	rjmp	.+126    	; 0x3d08 <signalIoctl+0x1634>
    3c8a:	cc 24       	eor	r12, r12
    3c8c:	dd 24       	eor	r13, r13
    3c8e:	76 01       	movw	r14, r12
    3c90:	3b c0       	rjmp	.+118    	; 0x3d08 <signalIoctl+0x1634>
    3c92:	cc 24       	eor	r12, r12
    3c94:	dd 24       	eor	r13, r13
    3c96:	76 01       	movw	r14, r12
    3c98:	37 c0       	rjmp	.+110    	; 0x3d08 <signalIoctl+0x1634>
    3c9a:	cc 24       	eor	r12, r12
    3c9c:	dd 24       	eor	r13, r13
    3c9e:	76 01       	movw	r14, r12
    3ca0:	33 c0       	rjmp	.+102    	; 0x3d08 <signalIoctl+0x1634>
    3ca2:	cc 24       	eor	r12, r12
    3ca4:	dd 24       	eor	r13, r13
    3ca6:	76 01       	movw	r14, r12
    3ca8:	2f c0       	rjmp	.+94     	; 0x3d08 <signalIoctl+0x1634>
    3caa:	cc 24       	eor	r12, r12
    3cac:	dd 24       	eor	r13, r13
    3cae:	76 01       	movw	r14, r12
    3cb0:	2b c0       	rjmp	.+86     	; 0x3d08 <signalIoctl+0x1634>
    3cb2:	cc 24       	eor	r12, r12
    3cb4:	dd 24       	eor	r13, r13
    3cb6:	76 01       	movw	r14, r12
    3cb8:	27 c0       	rjmp	.+78     	; 0x3d08 <signalIoctl+0x1634>
    3cba:	cc 24       	eor	r12, r12
    3cbc:	dd 24       	eor	r13, r13
    3cbe:	76 01       	movw	r14, r12
    3cc0:	23 c0       	rjmp	.+70     	; 0x3d08 <signalIoctl+0x1634>
    3cc2:	cc 24       	eor	r12, r12
    3cc4:	dd 24       	eor	r13, r13
    3cc6:	76 01       	movw	r14, r12
    3cc8:	1f c0       	rjmp	.+62     	; 0x3d08 <signalIoctl+0x1634>
    3cca:	cc 24       	eor	r12, r12
    3ccc:	dd 24       	eor	r13, r13
    3cce:	76 01       	movw	r14, r12
    3cd0:	1b c0       	rjmp	.+54     	; 0x3d08 <signalIoctl+0x1634>
    3cd2:	cc 24       	eor	r12, r12
    3cd4:	dd 24       	eor	r13, r13
    3cd6:	76 01       	movw	r14, r12
    3cd8:	17 c0       	rjmp	.+46     	; 0x3d08 <signalIoctl+0x1634>
    3cda:	cc 24       	eor	r12, r12
    3cdc:	dd 24       	eor	r13, r13
    3cde:	76 01       	movw	r14, r12
    3ce0:	13 c0       	rjmp	.+38     	; 0x3d08 <signalIoctl+0x1634>
    3ce2:	cc 24       	eor	r12, r12
    3ce4:	dd 24       	eor	r13, r13
    3ce6:	76 01       	movw	r14, r12
    3ce8:	0f c0       	rjmp	.+30     	; 0x3d08 <signalIoctl+0x1634>
    3cea:	cc 24       	eor	r12, r12
    3cec:	dd 24       	eor	r13, r13
    3cee:	76 01       	movw	r14, r12
    3cf0:	0b c0       	rjmp	.+22     	; 0x3d08 <signalIoctl+0x1634>
    3cf2:	cc 24       	eor	r12, r12
    3cf4:	dd 24       	eor	r13, r13
    3cf6:	76 01       	movw	r14, r12
    3cf8:	07 c0       	rjmp	.+14     	; 0x3d08 <signalIoctl+0x1634>
    3cfa:	cc 24       	eor	r12, r12
    3cfc:	dd 24       	eor	r13, r13
    3cfe:	76 01       	movw	r14, r12
    3d00:	03 c0       	rjmp	.+6      	; 0x3d08 <signalIoctl+0x1634>
    3d02:	cc 24       	eor	r12, r12
    3d04:	dd 24       	eor	r13, r13
    3d06:	76 01       	movw	r14, r12
   }/*End switch( (t_signalCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    3d08:	80 91 72 24 	lds	r24, 0x2472
    3d0c:	90 91 73 24 	lds	r25, 0x2473
    3d10:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return i_return;

}/*End signalIoctl*/
    3d14:	b6 01       	movw	r22, r12
    3d16:	c7 01       	movw	r24, r14
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	cf 90       	pop	r12
    3d2a:	08 95       	ret

00003d2c <signalOpen>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
t_error signalOpen( t_DEVHANDLE t_devHandle)
{
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	0f 92       	push	r0
    3d32:	0f 92       	push	r0
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    3d3c:	80 91 72 24 	lds	r24, 0x2472
    3d40:	90 91 73 24 	lds	r25, 0x2473
    3d44:	60 e0       	ldi	r22, 0x00	; 0
    3d46:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
             0);

   gt_signalDev.c_numUsers++;
    3d4a:	80 91 79 24 	lds	r24, 0x2479
    3d4e:	8f 5f       	subi	r24, 0xFF	; 255
    3d50:	80 93 79 24 	sts	0x2479, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    3d54:	80 91 72 24 	lds	r24, 0x2472
    3d58:	90 91 73 24 	lds	r25, 0x2473
    3d5c:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>

   return ARB_PASSED;

}/*End signalOpen*/
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	df 91       	pop	r29
    3d68:	cf 91       	pop	r28
    3d6a:	08 95       	ret

00003d6c <drv_signalInit>:
   return ARB_PASSED;

}/*End signalClose*/

t_error drv_signalInit( t_signalSetup t_setup)
{
    3d6c:	0f 93       	push	r16
    3d6e:	1f 93       	push	r17
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	2a 97       	sbiw	r28, 0x0a	; 10
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	14 2f       	mov	r17, r20
    3d80:	4e 83       	std	Y+6, r20	; 0x06
    3d82:	5f 83       	std	Y+7, r21	; 0x07
    3d84:	68 87       	std	Y+8, r22	; 0x08
    3d86:	79 87       	std	Y+9, r23	; 0x09
    3d88:	8a 87       	std	Y+10, r24	; 0x0a
    3d8a:	78 2f       	mov	r23, r24
   int8_t c_index;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "signalDevice0",
    3d8c:	8a e5       	ldi	r24, 0x5A	; 90
    3d8e:	90 e2       	ldi	r25, 0x20	; 32
    3d90:	60 e0       	ldi	r22, 0x00	; 0
    3d92:	48 e6       	ldi	r20, 0x68	; 104
    3d94:	50 e2       	ldi	r21, 0x20	; 32
    3d96:	0e 94 fb 84 	call	0x109f6	; 0x109f6 <arb_registerDevice>
    3d9a:	08 2f       	mov	r16, r24
                               arb_createDevId( t_setup.c_majorNum,
                               0),
                               &gat_signalDevOps);

   if( t_err < 0)
    3d9c:	87 fd       	sbrc	r24, 7
    3d9e:	bd c0       	rjmp	.+378    	; 0x3f1a <drv_signalInit+0x1ae>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_signalDev.t_mutex = arb_semaphoreCreate( MUTEX);
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
    3da6:	80 93 72 24 	sts	0x2472, r24
    3daa:	90 93 73 24 	sts	0x2473, r25

   if( gt_signalDev.t_mutex < 0)
    3dae:	20 91 72 24 	lds	r18, 0x2472
    3db2:	30 91 73 24 	lds	r19, 0x2473
    3db6:	37 ff       	sbrs	r19, 7
    3db8:	06 c0       	rjmp	.+12     	; 0x3dc6 <drv_signalInit+0x5a>
   {
      t_err = (t_error)gt_signalDev.t_mutex;
    3dba:	80 91 72 24 	lds	r24, 0x2472
    3dbe:	90 91 73 24 	lds	r25, 0x2473
    3dc2:	08 2f       	mov	r16, r24
      goto failed2;
    3dc4:	a4 c0       	rjmp	.+328    	; 0x3f0e <drv_signalInit+0x1a2>
   }/*End if( gt_signalDev.t_mutex < 0)*/

   /*------------------------------------------------------------------------*
    * We dont have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_signalDev.c_numUsers = 0;
    3dc6:	10 92 79 24 	sts	0x2479, r1

   /*------------------------------------------------------------------------*
    * Configure the pins that control the led's...
    *------------------------------------------------------------------------*/
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
    3dca:	10 93 74 24 	sts	0x2474, r17
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
      t_setup.ac_ledPins[c_index];
    3dce:	3f 81       	ldd	r19, Y+7	; 0x07
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
    3dd0:	30 93 75 24 	sts	0x2475, r19
      t_setup.ac_ledPins[c_index];
    3dd4:	88 85       	ldd	r24, Y+8	; 0x08
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
    3dd6:	80 93 76 24 	sts	0x2476, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
    3dda:	38 2b       	or	r19, r24
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
      t_setup.ac_ledPins[c_index];
    3ddc:	89 85       	ldd	r24, Y+9	; 0x09
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
    3dde:	80 93 77 24 	sts	0x2477, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
    3de2:	38 2b       	or	r19, r24
    3de4:	30 93 78 24 	sts	0x2478, r19
   }

   t_conf.c_inputMask    = 0;
    3de8:	19 82       	std	Y+1, r1	; 0x01
   t_conf.c_outputMask   = gt_signalDev.c_allLedMask;
    3dea:	3a 83       	std	Y+2, r19	; 0x02
   t_conf.b_setOutputLow = false;
    3dec:	1b 82       	std	Y+3, r1	; 0x03
   t_conf.t_outConf      = TOTEM;
    3dee:	1d 82       	std	Y+5, r1	; 0x05

   if( hal_configureGpioPort( t_setup.c_signalPort, t_conf) < 0)
    3df0:	81 2f       	mov	r24, r17
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	5c 81       	ldd	r21, Y+4	; 0x04
    3df8:	60 e0       	ldi	r22, 0x00	; 0
    3dfa:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
    3dfe:	87 fd       	sbrc	r24, 7
    3e00:	7f c0       	rjmp	.+254    	; 0x3f00 <drv_signalInit+0x194>
   }

   /*------------------------------------------------------------------------*
    * Make sure the LED's are off - logic high is off...
    *------------------------------------------------------------------------*/
   hal_gpioOn( gt_signalDev.c_signalPort,
    3e02:	80 91 78 24 	lds	r24, 0x2478
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    3e06:	90 91 74 24 	lds	r25, 0x2474
    3e0a:	95 30       	cpi	r25, 0x05	; 5
    3e0c:	09 f4       	brne	.+2      	; 0x3e10 <drv_signalInit+0xa4>
    3e0e:	4d c0       	rjmp	.+154    	; 0x3eaa <drv_signalInit+0x13e>
    3e10:	96 30       	cpi	r25, 0x06	; 6
    3e12:	80 f4       	brcc	.+32     	; 0x3e34 <drv_signalInit+0xc8>
    3e14:	92 30       	cpi	r25, 0x02	; 2
    3e16:	89 f1       	breq	.+98     	; 0x3e7a <drv_signalInit+0x10e>
    3e18:	93 30       	cpi	r25, 0x03	; 3
    3e1a:	30 f4       	brcc	.+12     	; 0x3e28 <drv_signalInit+0xbc>
    3e1c:	99 23       	and	r25, r25
    3e1e:	e9 f0       	breq	.+58     	; 0x3e5a <drv_signalInit+0xee>
    3e20:	91 30       	cpi	r25, 0x01	; 1
    3e22:	09 f0       	breq	.+2      	; 0x3e26 <drv_signalInit+0xba>
    3e24:	79 c0       	rjmp	.+242    	; 0x3f18 <drv_signalInit+0x1ac>
    3e26:	21 c0       	rjmp	.+66     	; 0x3e6a <drv_signalInit+0xfe>
    3e28:	93 30       	cpi	r25, 0x03	; 3
    3e2a:	79 f1       	breq	.+94     	; 0x3e8a <drv_signalInit+0x11e>
    3e2c:	94 30       	cpi	r25, 0x04	; 4
    3e2e:	09 f0       	breq	.+2      	; 0x3e32 <drv_signalInit+0xc6>
    3e30:	73 c0       	rjmp	.+230    	; 0x3f18 <drv_signalInit+0x1ac>
    3e32:	33 c0       	rjmp	.+102    	; 0x3e9a <drv_signalInit+0x12e>
    3e34:	98 30       	cpi	r25, 0x08	; 8
    3e36:	09 f4       	brne	.+2      	; 0x3e3a <drv_signalInit+0xce>
    3e38:	4d c0       	rjmp	.+154    	; 0x3ed4 <drv_signalInit+0x168>
    3e3a:	99 30       	cpi	r25, 0x09	; 9
    3e3c:	38 f4       	brcc	.+14     	; 0x3e4c <drv_signalInit+0xe0>
    3e3e:	96 30       	cpi	r25, 0x06	; 6
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <drv_signalInit+0xd8>
    3e42:	3a c0       	rjmp	.+116    	; 0x3eb8 <drv_signalInit+0x14c>
    3e44:	97 30       	cpi	r25, 0x07	; 7
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <drv_signalInit+0xde>
    3e48:	67 c0       	rjmp	.+206    	; 0x3f18 <drv_signalInit+0x1ac>
    3e4a:	3d c0       	rjmp	.+122    	; 0x3ec6 <drv_signalInit+0x15a>
    3e4c:	99 30       	cpi	r25, 0x09	; 9
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <drv_signalInit+0xe6>
    3e50:	48 c0       	rjmp	.+144    	; 0x3ee2 <drv_signalInit+0x176>
    3e52:	9a 30       	cpi	r25, 0x0A	; 10
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <drv_signalInit+0xec>
    3e56:	60 c0       	rjmp	.+192    	; 0x3f18 <drv_signalInit+0x1ac>
    3e58:	4b c0       	rjmp	.+150    	; 0x3ef0 <drv_signalInit+0x184>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3e5a:	90 91 00 06 	lds	r25, 0x0600
    3e5e:	98 23       	and	r25, r24
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <drv_signalInit+0xf8>
    3e62:	5a c0       	rjmp	.+180    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    3e64:	e0 e0       	ldi	r30, 0x00	; 0
    3e66:	f6 e0       	ldi	r31, 0x06	; 6
    3e68:	49 c0       	rjmp	.+146    	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    3e6a:	90 91 20 06 	lds	r25, 0x0620
    3e6e:	98 23       	and	r25, r24
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <drv_signalInit+0x108>
    3e72:	52 c0       	rjmp	.+164    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    3e74:	e0 e2       	ldi	r30, 0x20	; 32
    3e76:	f6 e0       	ldi	r31, 0x06	; 6
    3e78:	41 c0       	rjmp	.+130    	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3e7a:	90 91 40 06 	lds	r25, 0x0640
    3e7e:	98 23       	and	r25, r24
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <drv_signalInit+0x118>
    3e82:	4a c0       	rjmp	.+148    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    3e84:	e0 e4       	ldi	r30, 0x40	; 64
    3e86:	f6 e0       	ldi	r31, 0x06	; 6
    3e88:	39 c0       	rjmp	.+114    	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    3e8a:	90 91 60 06 	lds	r25, 0x0660
    3e8e:	98 23       	and	r25, r24
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <drv_signalInit+0x128>
    3e92:	42 c0       	rjmp	.+132    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    3e94:	e0 e6       	ldi	r30, 0x60	; 96
    3e96:	f6 e0       	ldi	r31, 0x06	; 6
    3e98:	31 c0       	rjmp	.+98     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3e9a:	90 91 80 06 	lds	r25, 0x0680
    3e9e:	98 23       	and	r25, r24
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <drv_signalInit+0x138>
    3ea2:	3a c0       	rjmp	.+116    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    3ea4:	e0 e8       	ldi	r30, 0x80	; 128
    3ea6:	f6 e0       	ldi	r31, 0x06	; 6
    3ea8:	29 c0       	rjmp	.+82     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    3eaa:	90 91 a0 06 	lds	r25, 0x06A0
    3eae:	98 23       	and	r25, r24
    3eb0:	99 f1       	breq	.+102    	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    3eb2:	e0 ea       	ldi	r30, 0xA0	; 160
    3eb4:	f6 e0       	ldi	r31, 0x06	; 6
    3eb6:	22 c0       	rjmp	.+68     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3eb8:	90 91 e0 06 	lds	r25, 0x06E0
    3ebc:	98 23       	and	r25, r24
    3ebe:	61 f1       	breq	.+88     	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    3ec0:	e0 ee       	ldi	r30, 0xE0	; 224
    3ec2:	f6 e0       	ldi	r31, 0x06	; 6
    3ec4:	1b c0       	rjmp	.+54     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    3ec6:	90 91 00 07 	lds	r25, 0x0700
    3eca:	98 23       	and	r25, r24
    3ecc:	29 f1       	breq	.+74     	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    3ece:	e0 e0       	ldi	r30, 0x00	; 0
    3ed0:	f7 e0       	ldi	r31, 0x07	; 7
    3ed2:	14 c0       	rjmp	.+40     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3ed4:	90 91 20 07 	lds	r25, 0x0720
    3ed8:	98 23       	and	r25, r24
    3eda:	f1 f0       	breq	.+60     	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    3edc:	e0 e2       	ldi	r30, 0x20	; 32
    3ede:	f7 e0       	ldi	r31, 0x07	; 7
    3ee0:	0d c0       	rjmp	.+26     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3ee2:	90 91 c0 07 	lds	r25, 0x07C0
    3ee6:	98 23       	and	r25, r24
    3ee8:	b9 f0       	breq	.+46     	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    3eea:	e0 ec       	ldi	r30, 0xC0	; 192
    3eec:	f7 e0       	ldi	r31, 0x07	; 7
    3eee:	06 c0       	rjmp	.+12     	; 0x3efc <drv_signalInit+0x190>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3ef0:	90 91 e0 07 	lds	r25, 0x07E0
    3ef4:	98 23       	and	r25, r24
    3ef6:	81 f0       	breq	.+32     	; 0x3f18 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    3ef8:	e0 ee       	ldi	r30, 0xE0	; 224
    3efa:	f7 e0       	ldi	r31, 0x07	; 7
    3efc:	85 83       	std	Z+5, r24	; 0x05
    3efe:	0c c0       	rjmp	.+24     	; 0x3f18 <drv_signalInit+0x1ac>

   return ARB_PASSED;

failed3:

   arb_semaphoreDestroy( gt_signalDev.t_mutex);
    3f00:	80 91 72 24 	lds	r24, 0x2472
    3f04:	90 91 73 24 	lds	r25, 0x2473
    3f08:	0e 94 56 99 	call	0x132ac	; 0x132ac <arb_semaphoreDestroy>
   t_conf.b_setOutputLow = false;
   t_conf.t_outConf      = TOTEM;

   if( hal_configureGpioPort( t_setup.c_signalPort, t_conf) < 0)
   {
      t_err = ARB_HAL_ERROR;
    3f0c:	06 ef       	ldi	r16, 0xF6	; 246

   arb_semaphoreDestroy( gt_signalDev.t_mutex);

failed2:

   arb_destroyDevice( "signalDevice0");
    3f0e:	8a e5       	ldi	r24, 0x5A	; 90
    3f10:	90 e2       	ldi	r25, 0x20	; 32
    3f12:	0e 94 9c 85 	call	0x10b38	; 0x10b38 <arb_destroyDevice>
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <drv_signalInit+0x1ae>
    * Make sure the LED's are off - logic high is off...
    *------------------------------------------------------------------------*/
   hal_gpioOn( gt_signalDev.c_signalPort,
               gt_signalDev.c_allLedMask);

   return ARB_PASSED;
    3f18:	00 e0       	ldi	r16, 0x00	; 0

failed1:

   return t_err;

}/*End drv_signalInit*/
    3f1a:	80 2f       	mov	r24, r16
    3f1c:	2a 96       	adiw	r28, 0x0a	; 10
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	08 95       	ret

00003f2c <adc_findChannelElement>:
   return t_linkHndl;

}/*End createChanHandle*/

static t_chanHandle *adc_findChannelElement( t_chanId t_id)
{
    3f2c:	cf 93       	push	r28
    3f2e:	df 93       	push	r29
    3f30:	0f 92       	push	r0
    3f32:	0f 92       	push	r0
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the ADC channel with an ID of t_id
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_adcChanList, s_count)
    3f38:	e0 91 72 20 	lds	r30, 0x2072
    3f3c:	f0 91 73 20 	lds	r31, 0x2073
    3f40:	22 81       	ldd	r18, Z+2	; 0x02
    3f42:	33 81       	ldd	r19, Z+3	; 0x03
    3f44:	e0 91 72 20 	lds	r30, 0x2072
    3f48:	f0 91 73 20 	lds	r31, 0x2073
    3f4c:	0c c0       	rjmp	.+24     	; 0x3f66 <adc_findChannelElement+0x3a>
   {
      pt_element = (t_chanHandle *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    3f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f50:	fa 81       	ldd	r31, Y+2	; 0x02
    3f52:	01 90       	ld	r0, Z+
    3f54:	f0 81       	ld	r31, Z
    3f56:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    3f58:	91 81       	ldd	r25, Z+1	; 0x01
    3f5a:	98 17       	cp	r25, r24
    3f5c:	69 f0       	breq	.+26     	; 0x3f78 <adc_findChannelElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the ADC channel with an ID of t_id
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_adcChanList, s_count)
    3f5e:	21 50       	subi	r18, 0x01	; 1
    3f60:	30 40       	sbci	r19, 0x00	; 0
    3f62:	e9 81       	ldd	r30, Y+1	; 0x01
    3f64:	fa 81       	ldd	r31, Y+2	; 0x02
    3f66:	40 85       	ldd	r20, Z+8	; 0x08
    3f68:	51 85       	ldd	r21, Z+9	; 0x09
    3f6a:	49 83       	std	Y+1, r20	; 0x01
    3f6c:	5a 83       	std	Y+2, r21	; 0x02
    3f6e:	12 16       	cp	r1, r18
    3f70:	13 06       	cpc	r1, r19
    3f72:	6c f3       	brlt	.-38     	; 0x3f4e <adc_findChannelElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open ADC
    * channel list.
    *------------------------------------------------------------------------*/
   return NULL;
    3f74:	e0 e0       	ldi	r30, 0x00	; 0
    3f76:	f0 e0       	ldi	r31, 0x00	; 0

}/*End adc_findChannelElement*/
    3f78:	cf 01       	movw	r24, r30
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	08 95       	ret

00003f84 <__vector_71>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
ISR( ADCA_CH0_vect)
{
    3f84:	1f 92       	push	r1
    3f86:	0f 92       	push	r0
    3f88:	0f b6       	in	r0, 0x3f	; 63
    3f8a:	0f 92       	push	r0
    3f8c:	08 b6       	in	r0, 0x38	; 56
    3f8e:	0f 92       	push	r0
    3f90:	09 b6       	in	r0, 0x39	; 57
    3f92:	0f 92       	push	r0
    3f94:	0b b6       	in	r0, 0x3b	; 59
    3f96:	0f 92       	push	r0
    3f98:	11 24       	eor	r1, r1
    3f9a:	2f 93       	push	r18
    3f9c:	3f 93       	push	r19
    3f9e:	4f 93       	push	r20
    3fa0:	5f 93       	push	r21
    3fa2:	6f 93       	push	r22
    3fa4:	7f 93       	push	r23
    3fa6:	8f 93       	push	r24
    3fa8:	9f 93       	push	r25
    3faa:	af 93       	push	r26
    3fac:	bf 93       	push	r27
    3fae:	ef 93       	push	r30
    3fb0:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN0);
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    3fb8:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	59 f0       	breq	.+22     	; 0x3fd4 <__vector_71+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH0.RES;
    3fbe:	20 91 24 02 	lds	r18, 0x0224
    3fc2:	30 91 25 02 	lds	r19, 0x0225
    3fc6:	24 83       	std	Z+4, r18	; 0x04
    3fc8:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3fca:	06 80       	ldd	r0, Z+6	; 0x06
    3fcc:	f7 81       	ldd	r31, Z+7	; 0x07
    3fce:	e0 2d       	mov	r30, r0
    3fd0:	c9 01       	movw	r24, r18
    3fd2:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3fd4:	ff 91       	pop	r31
    3fd6:	ef 91       	pop	r30
    3fd8:	bf 91       	pop	r27
    3fda:	af 91       	pop	r26
    3fdc:	9f 91       	pop	r25
    3fde:	8f 91       	pop	r24
    3fe0:	7f 91       	pop	r23
    3fe2:	6f 91       	pop	r22
    3fe4:	5f 91       	pop	r21
    3fe6:	4f 91       	pop	r20
    3fe8:	3f 91       	pop	r19
    3fea:	2f 91       	pop	r18
    3fec:	0f 90       	pop	r0
    3fee:	0b be       	out	0x3b, r0	; 59
    3ff0:	0f 90       	pop	r0
    3ff2:	09 be       	out	0x39, r0	; 57
    3ff4:	0f 90       	pop	r0
    3ff6:	08 be       	out	0x38, r0	; 56
    3ff8:	0f 90       	pop	r0
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	0f 90       	pop	r0
    3ffe:	1f 90       	pop	r1
    4000:	18 95       	reti

00004002 <__vector_72>:

ISR( ADCA_CH1_vect)
{
    4002:	1f 92       	push	r1
    4004:	0f 92       	push	r0
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	0f 92       	push	r0
    400a:	08 b6       	in	r0, 0x38	; 56
    400c:	0f 92       	push	r0
    400e:	09 b6       	in	r0, 0x39	; 57
    4010:	0f 92       	push	r0
    4012:	0b b6       	in	r0, 0x3b	; 59
    4014:	0f 92       	push	r0
    4016:	11 24       	eor	r1, r1
    4018:	2f 93       	push	r18
    401a:	3f 93       	push	r19
    401c:	4f 93       	push	r20
    401e:	5f 93       	push	r21
    4020:	6f 93       	push	r22
    4022:	7f 93       	push	r23
    4024:	8f 93       	push	r24
    4026:	9f 93       	push	r25
    4028:	af 93       	push	r26
    402a:	bf 93       	push	r27
    402c:	ef 93       	push	r30
    402e:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN1);
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    4036:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	59 f0       	breq	.+22     	; 0x4052 <__vector_72+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH1.RES;
    403c:	20 91 2c 02 	lds	r18, 0x022C
    4040:	30 91 2d 02 	lds	r19, 0x022D
    4044:	24 83       	std	Z+4, r18	; 0x04
    4046:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    4048:	06 80       	ldd	r0, Z+6	; 0x06
    404a:	f7 81       	ldd	r31, Z+7	; 0x07
    404c:	e0 2d       	mov	r30, r0
    404e:	c9 01       	movw	r24, r18
    4050:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    4052:	ff 91       	pop	r31
    4054:	ef 91       	pop	r30
    4056:	bf 91       	pop	r27
    4058:	af 91       	pop	r26
    405a:	9f 91       	pop	r25
    405c:	8f 91       	pop	r24
    405e:	7f 91       	pop	r23
    4060:	6f 91       	pop	r22
    4062:	5f 91       	pop	r21
    4064:	4f 91       	pop	r20
    4066:	3f 91       	pop	r19
    4068:	2f 91       	pop	r18
    406a:	0f 90       	pop	r0
    406c:	0b be       	out	0x3b, r0	; 59
    406e:	0f 90       	pop	r0
    4070:	09 be       	out	0x39, r0	; 57
    4072:	0f 90       	pop	r0
    4074:	08 be       	out	0x38, r0	; 56
    4076:	0f 90       	pop	r0
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	0f 90       	pop	r0
    407c:	1f 90       	pop	r1
    407e:	18 95       	reti

00004080 <__vector_73>:

ISR( ADCA_CH2_vect)
{
    4080:	1f 92       	push	r1
    4082:	0f 92       	push	r0
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	0f 92       	push	r0
    4088:	08 b6       	in	r0, 0x38	; 56
    408a:	0f 92       	push	r0
    408c:	09 b6       	in	r0, 0x39	; 57
    408e:	0f 92       	push	r0
    4090:	0b b6       	in	r0, 0x3b	; 59
    4092:	0f 92       	push	r0
    4094:	11 24       	eor	r1, r1
    4096:	2f 93       	push	r18
    4098:	3f 93       	push	r19
    409a:	4f 93       	push	r20
    409c:	5f 93       	push	r21
    409e:	6f 93       	push	r22
    40a0:	7f 93       	push	r23
    40a2:	8f 93       	push	r24
    40a4:	9f 93       	push	r25
    40a6:	af 93       	push	r26
    40a8:	bf 93       	push	r27
    40aa:	ef 93       	push	r30
    40ac:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN2);
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    40b4:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    40b6:	00 97       	sbiw	r24, 0x00	; 0
    40b8:	59 f0       	breq	.+22     	; 0x40d0 <__vector_73+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH2.RES;
    40ba:	20 91 34 02 	lds	r18, 0x0234
    40be:	30 91 35 02 	lds	r19, 0x0235
    40c2:	24 83       	std	Z+4, r18	; 0x04
    40c4:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    40c6:	06 80       	ldd	r0, Z+6	; 0x06
    40c8:	f7 81       	ldd	r31, Z+7	; 0x07
    40ca:	e0 2d       	mov	r30, r0
    40cc:	c9 01       	movw	r24, r18
    40ce:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    40d0:	ff 91       	pop	r31
    40d2:	ef 91       	pop	r30
    40d4:	bf 91       	pop	r27
    40d6:	af 91       	pop	r26
    40d8:	9f 91       	pop	r25
    40da:	8f 91       	pop	r24
    40dc:	7f 91       	pop	r23
    40de:	6f 91       	pop	r22
    40e0:	5f 91       	pop	r21
    40e2:	4f 91       	pop	r20
    40e4:	3f 91       	pop	r19
    40e6:	2f 91       	pop	r18
    40e8:	0f 90       	pop	r0
    40ea:	0b be       	out	0x3b, r0	; 59
    40ec:	0f 90       	pop	r0
    40ee:	09 be       	out	0x39, r0	; 57
    40f0:	0f 90       	pop	r0
    40f2:	08 be       	out	0x38, r0	; 56
    40f4:	0f 90       	pop	r0
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	0f 90       	pop	r0
    40fa:	1f 90       	pop	r1
    40fc:	18 95       	reti

000040fe <__vector_74>:

ISR( ADCA_CH3_vect)
{
    40fe:	1f 92       	push	r1
    4100:	0f 92       	push	r0
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	0f 92       	push	r0
    4106:	08 b6       	in	r0, 0x38	; 56
    4108:	0f 92       	push	r0
    410a:	09 b6       	in	r0, 0x39	; 57
    410c:	0f 92       	push	r0
    410e:	0b b6       	in	r0, 0x3b	; 59
    4110:	0f 92       	push	r0
    4112:	11 24       	eor	r1, r1
    4114:	2f 93       	push	r18
    4116:	3f 93       	push	r19
    4118:	4f 93       	push	r20
    411a:	5f 93       	push	r21
    411c:	6f 93       	push	r22
    411e:	7f 93       	push	r23
    4120:	8f 93       	push	r24
    4122:	9f 93       	push	r25
    4124:	af 93       	push	r26
    4126:	bf 93       	push	r27
    4128:	ef 93       	push	r30
    412a:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN3);
    412c:	83 e0       	ldi	r24, 0x03	; 3
    412e:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    4132:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    4134:	00 97       	sbiw	r24, 0x00	; 0
    4136:	59 f0       	breq	.+22     	; 0x414e <__vector_74+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH3.RES;
    4138:	20 91 3c 02 	lds	r18, 0x023C
    413c:	30 91 3d 02 	lds	r19, 0x023D
    4140:	24 83       	std	Z+4, r18	; 0x04
    4142:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    4144:	06 80       	ldd	r0, Z+6	; 0x06
    4146:	f7 81       	ldd	r31, Z+7	; 0x07
    4148:	e0 2d       	mov	r30, r0
    414a:	c9 01       	movw	r24, r18
    414c:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    414e:	ff 91       	pop	r31
    4150:	ef 91       	pop	r30
    4152:	bf 91       	pop	r27
    4154:	af 91       	pop	r26
    4156:	9f 91       	pop	r25
    4158:	8f 91       	pop	r24
    415a:	7f 91       	pop	r23
    415c:	6f 91       	pop	r22
    415e:	5f 91       	pop	r21
    4160:	4f 91       	pop	r20
    4162:	3f 91       	pop	r19
    4164:	2f 91       	pop	r18
    4166:	0f 90       	pop	r0
    4168:	0b be       	out	0x3b, r0	; 59
    416a:	0f 90       	pop	r0
    416c:	09 be       	out	0x39, r0	; 57
    416e:	0f 90       	pop	r0
    4170:	08 be       	out	0x38, r0	; 56
    4172:	0f 90       	pop	r0
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	0f 90       	pop	r0
    4178:	1f 90       	pop	r1
    417a:	18 95       	reti

0000417c <__vector_39>:

ISR( ADCB_CH0_vect)
{
    417c:	1f 92       	push	r1
    417e:	0f 92       	push	r0
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	0f 92       	push	r0
    4184:	08 b6       	in	r0, 0x38	; 56
    4186:	0f 92       	push	r0
    4188:	09 b6       	in	r0, 0x39	; 57
    418a:	0f 92       	push	r0
    418c:	0b b6       	in	r0, 0x3b	; 59
    418e:	0f 92       	push	r0
    4190:	11 24       	eor	r1, r1
    4192:	2f 93       	push	r18
    4194:	3f 93       	push	r19
    4196:	4f 93       	push	r20
    4198:	5f 93       	push	r21
    419a:	6f 93       	push	r22
    419c:	7f 93       	push	r23
    419e:	8f 93       	push	r24
    41a0:	9f 93       	push	r25
    41a2:	af 93       	push	r26
    41a4:	bf 93       	push	r27
    41a6:	ef 93       	push	r30
    41a8:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN0);
    41aa:	84 e0       	ldi	r24, 0x04	; 4
    41ac:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    41b0:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    41b2:	00 97       	sbiw	r24, 0x00	; 0
    41b4:	59 f0       	breq	.+22     	; 0x41cc <__vector_39+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH0.RES;
    41b6:	20 91 64 02 	lds	r18, 0x0264
    41ba:	30 91 65 02 	lds	r19, 0x0265
    41be:	24 83       	std	Z+4, r18	; 0x04
    41c0:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    41c2:	06 80       	ldd	r0, Z+6	; 0x06
    41c4:	f7 81       	ldd	r31, Z+7	; 0x07
    41c6:	e0 2d       	mov	r30, r0
    41c8:	c9 01       	movw	r24, r18
    41ca:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    41cc:	ff 91       	pop	r31
    41ce:	ef 91       	pop	r30
    41d0:	bf 91       	pop	r27
    41d2:	af 91       	pop	r26
    41d4:	9f 91       	pop	r25
    41d6:	8f 91       	pop	r24
    41d8:	7f 91       	pop	r23
    41da:	6f 91       	pop	r22
    41dc:	5f 91       	pop	r21
    41de:	4f 91       	pop	r20
    41e0:	3f 91       	pop	r19
    41e2:	2f 91       	pop	r18
    41e4:	0f 90       	pop	r0
    41e6:	0b be       	out	0x3b, r0	; 59
    41e8:	0f 90       	pop	r0
    41ea:	09 be       	out	0x39, r0	; 57
    41ec:	0f 90       	pop	r0
    41ee:	08 be       	out	0x38, r0	; 56
    41f0:	0f 90       	pop	r0
    41f2:	0f be       	out	0x3f, r0	; 63
    41f4:	0f 90       	pop	r0
    41f6:	1f 90       	pop	r1
    41f8:	18 95       	reti

000041fa <__vector_40>:

ISR( ADCB_CH1_vect)
{
    41fa:	1f 92       	push	r1
    41fc:	0f 92       	push	r0
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	0f 92       	push	r0
    4202:	08 b6       	in	r0, 0x38	; 56
    4204:	0f 92       	push	r0
    4206:	09 b6       	in	r0, 0x39	; 57
    4208:	0f 92       	push	r0
    420a:	0b b6       	in	r0, 0x3b	; 59
    420c:	0f 92       	push	r0
    420e:	11 24       	eor	r1, r1
    4210:	2f 93       	push	r18
    4212:	3f 93       	push	r19
    4214:	4f 93       	push	r20
    4216:	5f 93       	push	r21
    4218:	6f 93       	push	r22
    421a:	7f 93       	push	r23
    421c:	8f 93       	push	r24
    421e:	9f 93       	push	r25
    4220:	af 93       	push	r26
    4222:	bf 93       	push	r27
    4224:	ef 93       	push	r30
    4226:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN1);
    4228:	85 e0       	ldi	r24, 0x05	; 5
    422a:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    422e:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    4230:	00 97       	sbiw	r24, 0x00	; 0
    4232:	59 f0       	breq	.+22     	; 0x424a <__vector_40+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH1.RES;
    4234:	20 91 6c 02 	lds	r18, 0x026C
    4238:	30 91 6d 02 	lds	r19, 0x026D
    423c:	24 83       	std	Z+4, r18	; 0x04
    423e:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    4240:	06 80       	ldd	r0, Z+6	; 0x06
    4242:	f7 81       	ldd	r31, Z+7	; 0x07
    4244:	e0 2d       	mov	r30, r0
    4246:	c9 01       	movw	r24, r18
    4248:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    424a:	ff 91       	pop	r31
    424c:	ef 91       	pop	r30
    424e:	bf 91       	pop	r27
    4250:	af 91       	pop	r26
    4252:	9f 91       	pop	r25
    4254:	8f 91       	pop	r24
    4256:	7f 91       	pop	r23
    4258:	6f 91       	pop	r22
    425a:	5f 91       	pop	r21
    425c:	4f 91       	pop	r20
    425e:	3f 91       	pop	r19
    4260:	2f 91       	pop	r18
    4262:	0f 90       	pop	r0
    4264:	0b be       	out	0x3b, r0	; 59
    4266:	0f 90       	pop	r0
    4268:	09 be       	out	0x39, r0	; 57
    426a:	0f 90       	pop	r0
    426c:	08 be       	out	0x38, r0	; 56
    426e:	0f 90       	pop	r0
    4270:	0f be       	out	0x3f, r0	; 63
    4272:	0f 90       	pop	r0
    4274:	1f 90       	pop	r1
    4276:	18 95       	reti

00004278 <__vector_41>:

ISR( ADCB_CH2_vect)
{
    4278:	1f 92       	push	r1
    427a:	0f 92       	push	r0
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	0f 92       	push	r0
    4280:	08 b6       	in	r0, 0x38	; 56
    4282:	0f 92       	push	r0
    4284:	09 b6       	in	r0, 0x39	; 57
    4286:	0f 92       	push	r0
    4288:	0b b6       	in	r0, 0x3b	; 59
    428a:	0f 92       	push	r0
    428c:	11 24       	eor	r1, r1
    428e:	2f 93       	push	r18
    4290:	3f 93       	push	r19
    4292:	4f 93       	push	r20
    4294:	5f 93       	push	r21
    4296:	6f 93       	push	r22
    4298:	7f 93       	push	r23
    429a:	8f 93       	push	r24
    429c:	9f 93       	push	r25
    429e:	af 93       	push	r26
    42a0:	bf 93       	push	r27
    42a2:	ef 93       	push	r30
    42a4:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN2);
    42a6:	86 e0       	ldi	r24, 0x06	; 6
    42a8:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    42ac:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    42ae:	00 97       	sbiw	r24, 0x00	; 0
    42b0:	59 f0       	breq	.+22     	; 0x42c8 <__vector_41+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH2.RES;
    42b2:	20 91 74 02 	lds	r18, 0x0274
    42b6:	30 91 75 02 	lds	r19, 0x0275
    42ba:	24 83       	std	Z+4, r18	; 0x04
    42bc:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    42be:	06 80       	ldd	r0, Z+6	; 0x06
    42c0:	f7 81       	ldd	r31, Z+7	; 0x07
    42c2:	e0 2d       	mov	r30, r0
    42c4:	c9 01       	movw	r24, r18
    42c6:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    42c8:	ff 91       	pop	r31
    42ca:	ef 91       	pop	r30
    42cc:	bf 91       	pop	r27
    42ce:	af 91       	pop	r26
    42d0:	9f 91       	pop	r25
    42d2:	8f 91       	pop	r24
    42d4:	7f 91       	pop	r23
    42d6:	6f 91       	pop	r22
    42d8:	5f 91       	pop	r21
    42da:	4f 91       	pop	r20
    42dc:	3f 91       	pop	r19
    42de:	2f 91       	pop	r18
    42e0:	0f 90       	pop	r0
    42e2:	0b be       	out	0x3b, r0	; 59
    42e4:	0f 90       	pop	r0
    42e6:	09 be       	out	0x39, r0	; 57
    42e8:	0f 90       	pop	r0
    42ea:	08 be       	out	0x38, r0	; 56
    42ec:	0f 90       	pop	r0
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	0f 90       	pop	r0
    42f2:	1f 90       	pop	r1
    42f4:	18 95       	reti

000042f6 <__vector_42>:

ISR( ADCB_CH3_vect)
{
    42f6:	1f 92       	push	r1
    42f8:	0f 92       	push	r0
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	0f 92       	push	r0
    42fe:	08 b6       	in	r0, 0x38	; 56
    4300:	0f 92       	push	r0
    4302:	09 b6       	in	r0, 0x39	; 57
    4304:	0f 92       	push	r0
    4306:	0b b6       	in	r0, 0x3b	; 59
    4308:	0f 92       	push	r0
    430a:	11 24       	eor	r1, r1
    430c:	2f 93       	push	r18
    430e:	3f 93       	push	r19
    4310:	4f 93       	push	r20
    4312:	5f 93       	push	r21
    4314:	6f 93       	push	r22
    4316:	7f 93       	push	r23
    4318:	8f 93       	push	r24
    431a:	9f 93       	push	r25
    431c:	af 93       	push	r26
    431e:	bf 93       	push	r27
    4320:	ef 93       	push	r30
    4322:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN3);
    4324:	87 e0       	ldi	r24, 0x07	; 7
    4326:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <adc_findChannelElement>
    432a:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	59 f0       	breq	.+22     	; 0x4346 <__vector_42+0x50>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH3.RES;
    4330:	20 91 7c 02 	lds	r18, 0x027C
    4334:	30 91 7d 02 	lds	r19, 0x027D
    4338:	24 83       	std	Z+4, r18	; 0x04
    433a:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    433c:	06 80       	ldd	r0, Z+6	; 0x06
    433e:	f7 81       	ldd	r31, Z+7	; 0x07
    4340:	e0 2d       	mov	r30, r0
    4342:	c9 01       	movw	r24, r18
    4344:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    4346:	ff 91       	pop	r31
    4348:	ef 91       	pop	r30
    434a:	bf 91       	pop	r27
    434c:	af 91       	pop	r26
    434e:	9f 91       	pop	r25
    4350:	8f 91       	pop	r24
    4352:	7f 91       	pop	r23
    4354:	6f 91       	pop	r22
    4356:	5f 91       	pop	r21
    4358:	4f 91       	pop	r20
    435a:	3f 91       	pop	r19
    435c:	2f 91       	pop	r18
    435e:	0f 90       	pop	r0
    4360:	0b be       	out	0x3b, r0	; 59
    4362:	0f 90       	pop	r0
    4364:	09 be       	out	0x39, r0	; 57
    4366:	0f 90       	pop	r0
    4368:	08 be       	out	0x38, r0	; 56
    436a:	0f 90       	pop	r0
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	0f 90       	pop	r0
    4370:	1f 90       	pop	r1
    4372:	18 95       	reti

00004374 <hal_getCpuFreq>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
uint32_t hal_getCpuFreq( void)
{
   return gt_clocks.i_cpuClock;
    4374:	60 91 7b 27 	lds	r22, 0x277B
    4378:	70 91 7c 27 	lds	r23, 0x277C
}
    437c:	80 91 7d 27 	lds	r24, 0x277D
    4380:	90 91 7e 27 	lds	r25, 0x277E
    4384:	08 95       	ret

00004386 <hal_setCpuFreq>:

t_clocksError hal_setCpuFreq( uint32_t i_clockRate)
{
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
   /*------------------------------------------------------------------------*  
    * Enable internal 32 MHz ring oscillator and wait until it's stable.
    *------------------------------------------------------------------------*/   
   OSC.CTRL   = OSC_RC32MEN_bm; 
    438a:	22 e0       	ldi	r18, 0x02	; 2
    438c:	20 93 50 00 	sts	0x0050, r18
   
   CCP        = CCP_IOREG_gc;
    4390:	28 ed       	ldi	r18, 0xD8	; 216
    4392:	24 bf       	out	0x34, r18	; 52
   CLK.PSCTRL = CLK_PSADIV_1_gc;
    4394:	e0 e4       	ldi	r30, 0x40	; 64
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	11 82       	std	Z+1, r1	; 0x01
   CLK.PSCTRL |= CLK_PSBCDIV_1_1_gc;
    439a:	20 91 41 00 	lds	r18, 0x0041
    439e:	21 83       	std	Z+1, r18	; 0x01

   while ( (OSC.STATUS & OSC_RC32MRDY_bm ) == 0);
    43a0:	20 91 51 00 	lds	r18, 0x0051
    43a4:	21 ff       	sbrs	r18, 1
    43a6:	fc cf       	rjmp	.-8      	; 0x43a0 <hal_setCpuFreq+0x1a>

   CCP      = CCP_IOREG_gc;
    43a8:	28 ed       	ldi	r18, 0xD8	; 216
    43aa:	24 bf       	out	0x34, r18	; 52
   CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    43ac:	21 e0       	ldi	r18, 0x01	; 1
    43ae:	20 93 40 00 	sts	0x0040, r18
   OSC.CTRL &= ~OSC_RC2MEN_bm;
    43b2:	20 91 50 00 	lds	r18, 0x0050
    43b6:	2e 7f       	andi	r18, 0xFE	; 254
    43b8:	20 93 50 00 	sts	0x0050, r18

   gt_clocks.i_cpuClock = i_clockRate;
    43bc:	80 93 7b 27 	sts	0x277B, r24
    43c0:	90 93 7c 27 	sts	0x277C, r25
    43c4:	a0 93 7d 27 	sts	0x277D, r26
    43c8:	b0 93 7e 27 	sts	0x277E, r27

   return CLOCKS_PASSED;

}/*End hal_setCpuFreq*/
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	08 95       	ret

000043d0 <findDmaIntElement>:
   return DMA_PASSED;

}/*End hal_configureDmaController*/

static t_dmaIntHndl *findDmaIntElement( t_dmaIntId t_id)
{
    43d0:	cf 93       	push	r28
    43d2:	df 93       	push	r29
    43d4:	0f 92       	push	r0
    43d6:	0f 92       	push	r0
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    43dc:	e0 91 87 20 	lds	r30, 0x2087
    43e0:	f0 91 88 20 	lds	r31, 0x2088
    43e4:	22 81       	ldd	r18, Z+2	; 0x02
    43e6:	33 81       	ldd	r19, Z+3	; 0x03
    43e8:	e0 91 87 20 	lds	r30, 0x2087
    43ec:	f0 91 88 20 	lds	r31, 0x2088
    43f0:	0c c0       	rjmp	.+24     	; 0x440a <findDmaIntElement+0x3a>
   {
      pt_element = (t_dmaIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    43f2:	e9 81       	ldd	r30, Y+1	; 0x01
    43f4:	fa 81       	ldd	r31, Y+2	; 0x02
    43f6:	01 90       	ld	r0, Z+
    43f8:	f0 81       	ld	r31, Z
    43fa:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    43fc:	90 81       	ld	r25, Z
    43fe:	98 17       	cp	r25, r24
    4400:	69 f0       	breq	.+26     	; 0x441c <findDmaIntElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    4402:	21 50       	subi	r18, 0x01	; 1
    4404:	30 40       	sbci	r19, 0x00	; 0
    4406:	e9 81       	ldd	r30, Y+1	; 0x01
    4408:	fa 81       	ldd	r31, Y+2	; 0x02
    440a:	40 85       	ldd	r20, Z+8	; 0x08
    440c:	51 85       	ldd	r21, Z+9	; 0x09
    440e:	49 83       	std	Y+1, r20	; 0x01
    4410:	5a 83       	std	Y+2, r21	; 0x02
    4412:	12 16       	cp	r1, r18
    4414:	13 06       	cpc	r1, r19
    4416:	6c f3       	brlt	.-38     	; 0x43f2 <findDmaIntElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open DMA
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;
    4418:	e0 e0       	ldi	r30, 0x00	; 0
    441a:	f0 e0       	ldi	r31, 0x00	; 0

}/*End findDmaIntElement*/
    441c:	cf 01       	movw	r24, r30
    441e:	0f 90       	pop	r0
    4420:	0f 90       	pop	r0
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	08 95       	ret

00004428 <__vector_6>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( DMA_CH0_vect)
{
    4428:	1f 92       	push	r1
    442a:	0f 92       	push	r0
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	0f 92       	push	r0
    4430:	08 b6       	in	r0, 0x38	; 56
    4432:	0f 92       	push	r0
    4434:	09 b6       	in	r0, 0x39	; 57
    4436:	0f 92       	push	r0
    4438:	0b b6       	in	r0, 0x3b	; 59
    443a:	0f 92       	push	r0
    443c:	11 24       	eor	r1, r1
    443e:	2f 93       	push	r18
    4440:	3f 93       	push	r19
    4442:	4f 93       	push	r20
    4444:	5f 93       	push	r21
    4446:	6f 93       	push	r22
    4448:	7f 93       	push	r23
    444a:	8f 93       	push	r24
    444c:	9f 93       	push	r25
    444e:	af 93       	push	r26
    4450:	bf 93       	push	r27
    4452:	ef 93       	push	r30
    4454:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH0.CTRLB & DMA_CH_ERRIF_bm)
    4456:	e0 e0       	ldi	r30, 0x00	; 0
    4458:	f1 e0       	ldi	r31, 0x01	; 1
    445a:	80 91 11 01 	lds	r24, 0x0111
    445e:	85 ff       	sbrs	r24, 5
    4460:	06 c0       	rjmp	.+12     	; 0x446e <__vector_6+0x46>
   {
      DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    4462:	80 91 11 01 	lds	r24, 0x0111
    4466:	80 62       	ori	r24, 0x20	; 32
    4468:	81 8b       	std	Z+17, r24	; 0x11
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN0_TR_ERROR);
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	05 c0       	rjmp	.+10     	; 0x4478 <__vector_6+0x50>
   }
   else
   {
      DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    446e:	80 91 11 01 	lds	r24, 0x0111
    4472:	80 61       	ori	r24, 0x10	; 16
    4474:	81 8b       	std	Z+17, r24	; 0x11
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN0_TR_COMP);
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <findDmaIntElement>

   }

   if( pt_iElement != NULL)
    447c:	00 97       	sbiw	r24, 0x00	; 0
    447e:	41 f0       	breq	.+16     	; 0x4490 <__vector_6+0x68>
   {
      if( pt_iElement->pf_funPtr != NULL)
    4480:	dc 01       	movw	r26, r24
    4482:	11 96       	adiw	r26, 0x01	; 1
    4484:	ed 91       	ld	r30, X+
    4486:	fc 91       	ld	r31, X
    4488:	12 97       	sbiw	r26, 0x02	; 2
    448a:	30 97       	sbiw	r30, 0x00	; 0
    448c:	09 f0       	breq	.+2      	; 0x4490 <__vector_6+0x68>
         pt_iElement->pf_funPtr();
    448e:	19 95       	eicall
   }

}/*End ISR( DMA_CH0_vect)*/
    4490:	ff 91       	pop	r31
    4492:	ef 91       	pop	r30
    4494:	bf 91       	pop	r27
    4496:	af 91       	pop	r26
    4498:	9f 91       	pop	r25
    449a:	8f 91       	pop	r24
    449c:	7f 91       	pop	r23
    449e:	6f 91       	pop	r22
    44a0:	5f 91       	pop	r21
    44a2:	4f 91       	pop	r20
    44a4:	3f 91       	pop	r19
    44a6:	2f 91       	pop	r18
    44a8:	0f 90       	pop	r0
    44aa:	0b be       	out	0x3b, r0	; 59
    44ac:	0f 90       	pop	r0
    44ae:	09 be       	out	0x39, r0	; 57
    44b0:	0f 90       	pop	r0
    44b2:	08 be       	out	0x38, r0	; 56
    44b4:	0f 90       	pop	r0
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	0f 90       	pop	r0
    44ba:	1f 90       	pop	r1
    44bc:	18 95       	reti

000044be <__vector_7>:

ISR( DMA_CH1_vect)
{
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	08 b6       	in	r0, 0x38	; 56
    44c8:	0f 92       	push	r0
    44ca:	09 b6       	in	r0, 0x39	; 57
    44cc:	0f 92       	push	r0
    44ce:	0b b6       	in	r0, 0x3b	; 59
    44d0:	0f 92       	push	r0
    44d2:	11 24       	eor	r1, r1
    44d4:	2f 93       	push	r18
    44d6:	3f 93       	push	r19
    44d8:	4f 93       	push	r20
    44da:	5f 93       	push	r21
    44dc:	6f 93       	push	r22
    44de:	7f 93       	push	r23
    44e0:	8f 93       	push	r24
    44e2:	9f 93       	push	r25
    44e4:	af 93       	push	r26
    44e6:	bf 93       	push	r27
    44e8:	ef 93       	push	r30
    44ea:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH1.CTRLB & DMA_CH_ERRIF_bm)
    44ec:	e0 e0       	ldi	r30, 0x00	; 0
    44ee:	f1 e0       	ldi	r31, 0x01	; 1
    44f0:	80 91 21 01 	lds	r24, 0x0121
    44f4:	85 ff       	sbrs	r24, 5
    44f6:	06 c0       	rjmp	.+12     	; 0x4504 <__vector_7+0x46>
   {
      DMA.CH1.CTRLB |= DMA_CH_ERRIF_bm;
    44f8:	80 91 21 01 	lds	r24, 0x0121
    44fc:	80 62       	ori	r24, 0x20	; 32
    44fe:	81 a3       	lds	r24, 0x51
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN1_TR_ERROR);
    4500:	83 e0       	ldi	r24, 0x03	; 3
    4502:	05 c0       	rjmp	.+10     	; 0x450e <__vector_7+0x50>
   }
   else
   {
      DMA.CH1.CTRLB |= DMA_CH_TRNIF_bm;
    4504:	80 91 21 01 	lds	r24, 0x0121
    4508:	80 61       	ori	r24, 0x10	; 16
    450a:	81 a3       	lds	r24, 0x51
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN1_TR_COMP);
    450c:	82 e0       	ldi	r24, 0x02	; 2
    450e:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <findDmaIntElement>

   }

   if( pt_iElement != NULL)
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	41 f0       	breq	.+16     	; 0x4526 <__vector_7+0x68>
   {
      if( pt_iElement->pf_funPtr != NULL)
    4516:	dc 01       	movw	r26, r24
    4518:	11 96       	adiw	r26, 0x01	; 1
    451a:	ed 91       	ld	r30, X+
    451c:	fc 91       	ld	r31, X
    451e:	12 97       	sbiw	r26, 0x02	; 2
    4520:	30 97       	sbiw	r30, 0x00	; 0
    4522:	09 f0       	breq	.+2      	; 0x4526 <__vector_7+0x68>
         pt_iElement->pf_funPtr();
    4524:	19 95       	eicall
   }

}/*End ISR( DMA_CH1_vect)*/
    4526:	ff 91       	pop	r31
    4528:	ef 91       	pop	r30
    452a:	bf 91       	pop	r27
    452c:	af 91       	pop	r26
    452e:	9f 91       	pop	r25
    4530:	8f 91       	pop	r24
    4532:	7f 91       	pop	r23
    4534:	6f 91       	pop	r22
    4536:	5f 91       	pop	r21
    4538:	4f 91       	pop	r20
    453a:	3f 91       	pop	r19
    453c:	2f 91       	pop	r18
    453e:	0f 90       	pop	r0
    4540:	0b be       	out	0x3b, r0	; 59
    4542:	0f 90       	pop	r0
    4544:	09 be       	out	0x39, r0	; 57
    4546:	0f 90       	pop	r0
    4548:	08 be       	out	0x38, r0	; 56
    454a:	0f 90       	pop	r0
    454c:	0f be       	out	0x3f, r0	; 63
    454e:	0f 90       	pop	r0
    4550:	1f 90       	pop	r1
    4552:	18 95       	reti

00004554 <__vector_8>:

ISR( DMA_CH2_vect)
{
    4554:	1f 92       	push	r1
    4556:	0f 92       	push	r0
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	0f 92       	push	r0
    455c:	08 b6       	in	r0, 0x38	; 56
    455e:	0f 92       	push	r0
    4560:	09 b6       	in	r0, 0x39	; 57
    4562:	0f 92       	push	r0
    4564:	0b b6       	in	r0, 0x3b	; 59
    4566:	0f 92       	push	r0
    4568:	11 24       	eor	r1, r1
    456a:	2f 93       	push	r18
    456c:	3f 93       	push	r19
    456e:	4f 93       	push	r20
    4570:	5f 93       	push	r21
    4572:	6f 93       	push	r22
    4574:	7f 93       	push	r23
    4576:	8f 93       	push	r24
    4578:	9f 93       	push	r25
    457a:	af 93       	push	r26
    457c:	bf 93       	push	r27
    457e:	ef 93       	push	r30
    4580:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH2.CTRLB & DMA_CH_ERRIF_bm)
    4582:	e0 e0       	ldi	r30, 0x00	; 0
    4584:	f1 e0       	ldi	r31, 0x01	; 1
    4586:	80 91 31 01 	lds	r24, 0x0131
    458a:	85 ff       	sbrs	r24, 5
    458c:	06 c0       	rjmp	.+12     	; 0x459a <__vector_8+0x46>
   {
      DMA.CH2.CTRLB |= DMA_CH_ERRIF_bm;
    458e:	80 91 31 01 	lds	r24, 0x0131
    4592:	80 62       	ori	r24, 0x20	; 32
    4594:	81 ab       	sts	0x51, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN2_TR_ERROR);
    4596:	85 e0       	ldi	r24, 0x05	; 5
    4598:	05 c0       	rjmp	.+10     	; 0x45a4 <__vector_8+0x50>
   }
   else
   {
      DMA.CH2.CTRLB |= DMA_CH_TRNIF_bm;
    459a:	80 91 31 01 	lds	r24, 0x0131
    459e:	80 61       	ori	r24, 0x10	; 16
    45a0:	81 ab       	sts	0x51, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN2_TR_COMP);
    45a2:	84 e0       	ldi	r24, 0x04	; 4
    45a4:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <findDmaIntElement>

   }

   if( pt_iElement != NULL)
    45a8:	00 97       	sbiw	r24, 0x00	; 0
    45aa:	41 f0       	breq	.+16     	; 0x45bc <__vector_8+0x68>
   {
      if( pt_iElement->pf_funPtr != NULL)
    45ac:	dc 01       	movw	r26, r24
    45ae:	11 96       	adiw	r26, 0x01	; 1
    45b0:	ed 91       	ld	r30, X+
    45b2:	fc 91       	ld	r31, X
    45b4:	12 97       	sbiw	r26, 0x02	; 2
    45b6:	30 97       	sbiw	r30, 0x00	; 0
    45b8:	09 f0       	breq	.+2      	; 0x45bc <__vector_8+0x68>
         pt_iElement->pf_funPtr();
    45ba:	19 95       	eicall
   }

}/*End ISR( DMA_CH2_vect)*/
    45bc:	ff 91       	pop	r31
    45be:	ef 91       	pop	r30
    45c0:	bf 91       	pop	r27
    45c2:	af 91       	pop	r26
    45c4:	9f 91       	pop	r25
    45c6:	8f 91       	pop	r24
    45c8:	7f 91       	pop	r23
    45ca:	6f 91       	pop	r22
    45cc:	5f 91       	pop	r21
    45ce:	4f 91       	pop	r20
    45d0:	3f 91       	pop	r19
    45d2:	2f 91       	pop	r18
    45d4:	0f 90       	pop	r0
    45d6:	0b be       	out	0x3b, r0	; 59
    45d8:	0f 90       	pop	r0
    45da:	09 be       	out	0x39, r0	; 57
    45dc:	0f 90       	pop	r0
    45de:	08 be       	out	0x38, r0	; 56
    45e0:	0f 90       	pop	r0
    45e2:	0f be       	out	0x3f, r0	; 63
    45e4:	0f 90       	pop	r0
    45e6:	1f 90       	pop	r1
    45e8:	18 95       	reti

000045ea <__vector_9>:

ISR( DMA_CH3_vect)
{
    45ea:	1f 92       	push	r1
    45ec:	0f 92       	push	r0
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	0f 92       	push	r0
    45f2:	08 b6       	in	r0, 0x38	; 56
    45f4:	0f 92       	push	r0
    45f6:	09 b6       	in	r0, 0x39	; 57
    45f8:	0f 92       	push	r0
    45fa:	0b b6       	in	r0, 0x3b	; 59
    45fc:	0f 92       	push	r0
    45fe:	11 24       	eor	r1, r1
    4600:	2f 93       	push	r18
    4602:	3f 93       	push	r19
    4604:	4f 93       	push	r20
    4606:	5f 93       	push	r21
    4608:	6f 93       	push	r22
    460a:	7f 93       	push	r23
    460c:	8f 93       	push	r24
    460e:	9f 93       	push	r25
    4610:	af 93       	push	r26
    4612:	bf 93       	push	r27
    4614:	ef 93       	push	r30
    4616:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH3.CTRLB & DMA_CH_ERRIF_bm)
    4618:	80 91 41 01 	lds	r24, 0x0141
    461c:	85 ff       	sbrs	r24, 5
    461e:	07 c0       	rjmp	.+14     	; 0x462e <__vector_9+0x44>
   {
      DMA.CH3.CTRLB |= DMA_CH_ERRIF_bm;
    4620:	80 91 41 01 	lds	r24, 0x0141
    4624:	80 62       	ori	r24, 0x20	; 32
    4626:	80 93 41 01 	sts	0x0141, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN3_TR_ERROR);
    462a:	87 e0       	ldi	r24, 0x07	; 7
    462c:	06 c0       	rjmp	.+12     	; 0x463a <__vector_9+0x50>
   }
   else
   {
      DMA.CH3.CTRLB |= DMA_CH_TRNIF_bm;
    462e:	80 91 41 01 	lds	r24, 0x0141
    4632:	80 61       	ori	r24, 0x10	; 16
    4634:	80 93 41 01 	sts	0x0141, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN3_TR_COMP);
    4638:	86 e0       	ldi	r24, 0x06	; 6
    463a:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <findDmaIntElement>

   }

   if( pt_iElement != NULL)
    463e:	00 97       	sbiw	r24, 0x00	; 0
    4640:	41 f0       	breq	.+16     	; 0x4652 <__vector_9+0x68>
   {
      if( pt_iElement->pf_funPtr != NULL)
    4642:	dc 01       	movw	r26, r24
    4644:	11 96       	adiw	r26, 0x01	; 1
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	12 97       	sbiw	r26, 0x02	; 2
    464c:	30 97       	sbiw	r30, 0x00	; 0
    464e:	09 f0       	breq	.+2      	; 0x4652 <__vector_9+0x68>
         pt_iElement->pf_funPtr();
    4650:	19 95       	eicall
   }

}/*End ISR( DMA_CH3_vect)*/
    4652:	ff 91       	pop	r31
    4654:	ef 91       	pop	r30
    4656:	bf 91       	pop	r27
    4658:	af 91       	pop	r26
    465a:	9f 91       	pop	r25
    465c:	8f 91       	pop	r24
    465e:	7f 91       	pop	r23
    4660:	6f 91       	pop	r22
    4662:	5f 91       	pop	r21
    4664:	4f 91       	pop	r20
    4666:	3f 91       	pop	r19
    4668:	2f 91       	pop	r18
    466a:	0f 90       	pop	r0
    466c:	0b be       	out	0x3b, r0	; 59
    466e:	0f 90       	pop	r0
    4670:	09 be       	out	0x39, r0	; 57
    4672:	0f 90       	pop	r0
    4674:	08 be       	out	0x38, r0	; 56
    4676:	0f 90       	pop	r0
    4678:	0f be       	out	0x3f, r0	; 63
    467a:	0f 90       	pop	r0
    467c:	1f 90       	pop	r1
    467e:	18 95       	reti

00004680 <hal_requestDmaInterrupt>:
}/*End createDmaHandle*/

t_dmaError hal_requestDmaInterrupt( t_DMAHNDL t_handle,
                                    t_dmaIntType  t_type,
                                    void (*pf_funPtr)( void))
{
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	27 97       	sbiw	r28, 0x07	; 7
    4696:	cd bf       	out	0x3d, r28	; 61
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	8e 83       	std	Y+6, r24	; 0x06
    469c:	9f 83       	std	Y+7, r25	; 0x07
    469e:	06 2f       	mov	r16, r22
    46a0:	6a 01       	movw	r12, r20
   t_dmaIntHndl *pt_iElement;
   t_dmaChan *pt_dElement;
   t_dmaIntId t_intId;
   t_LINKHNDL t_linkHndl;

   HAL_BEGIN_CRITICAL(); //Disable interrupts
    46a2:	8f b7       	in	r24, 0x3f	; 63
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    46a8:	ee 81       	ldd	r30, Y+6	; 0x06
    46aa:	ff 81       	ldd	r31, Y+7	; 0x07
    46ac:	80 91 95 20 	lds	r24, 0x2095
    46b0:	90 91 96 20 	lds	r25, 0x2096
    46b4:	24 81       	ldd	r18, Z+4	; 0x04
    46b6:	35 81       	ldd	r19, Z+5	; 0x05
    46b8:	28 17       	cp	r18, r24
    46ba:	39 07       	cpc	r19, r25
    46bc:	21 f0       	breq	.+8      	; 0x46c6 <hal_requestDmaInterrupt+0x46>
   {
      HAL_END_CRITICAL();//Enable interrupts
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_HANDLE;
    46c2:	8e ef       	ldi	r24, 0xFE	; 254
    46c4:	51 c0       	rjmp	.+162    	; 0x4768 <hal_requestDmaInterrupt+0xe8>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    46c6:	ee 81       	ldd	r30, Y+6	; 0x06
    46c8:	ff 81       	ldd	r31, Y+7	; 0x07

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    46ca:	e0 80       	ld	r14, Z
    46cc:	f1 80       	ldd	r15, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Use the dma module id and interrupt type as an index into the list
       * of possible interrupts.
       *---------------------------------------------------------------------*/
      t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;
    46ce:	d7 01       	movw	r26, r14
    46d0:	1c 91       	ld	r17, X
    46d2:	16 0f       	add	r17, r22

      /*---------------------------------------------------------------------*
       * Is the requested interrupt within a valid range?
       *---------------------------------------------------------------------*/
      if( (t_intId < DMA_CHAN0_TR_COMP) || (t_intId > DMA_CHAN3_TR_ERROR))
    46d4:	18 30       	cpi	r17, 0x08	; 8
    46d6:	20 f0       	brcs	.+8      	; 0x46e0 <hal_requestDmaInterrupt+0x60>
      {
         HAL_END_CRITICAL();//Enable interrupts
    46d8:	89 81       	ldd	r24, Y+1	; 0x01
    46da:	8f bf       	out	0x3f, r24	; 63
         return DMA_INVALID_INT_TYPE;
    46dc:	8b ef       	ldi	r24, 0xFB	; 251
    46de:	44 c0       	rjmp	.+136    	; 0x4768 <hal_requestDmaInterrupt+0xe8>
      }

      pt_iElement = findDmaIntElement( t_intId);
    46e0:	81 2f       	mov	r24, r17
    46e2:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <findDmaIntElement>

      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_iElement == NULL) /*No*/
    46e6:	00 97       	sbiw	r24, 0x00	; 0
    46e8:	e1 f5       	brne	.+120    	; 0x4762 <hal_requestDmaInterrupt+0xe2>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA interrupt information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaIntHndl));
    46ea:	83 e0       	ldi	r24, 0x03	; 3
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    46f2:	8a 83       	std	Y+2, r24	; 0x02
    46f4:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    46f6:	8a 81       	ldd	r24, Y+2	; 0x02
    46f8:	9b 81       	ldd	r25, Y+3	; 0x03
    46fa:	97 fd       	sbrc	r25, 7
    46fc:	0c c0       	rjmp	.+24     	; 0x4716 <hal_requestDmaInterrupt+0x96>
   }

   /*------------------------------------------------------------------------*
    * Add the DMA interrupt link onto the list open DMA interrupt.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_dmaIntHndlList,
    46fe:	80 91 87 20 	lds	r24, 0x2087
    4702:	90 91 88 20 	lds	r25, 0x2088
    4706:	6a 81       	ldd	r22, Y+2	; 0x02
    4708:	7b 81       	ldd	r23, Y+3	; 0x03
    470a:	41 e0       	ldi	r20, 0x01	; 1
    470c:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    4710:	8a 81       	ldd	r24, Y+2	; 0x02
    4712:	9b 81       	ldd	r25, Y+3	; 0x03
    4714:	02 c0       	rjmp	.+4      	; 0x471a <hal_requestDmaInterrupt+0x9a>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaIntHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)DMA_OUT_OF_HEAP;
    4716:	8f ef       	ldi	r24, 0xFF	; 255
    4718:	9f ef       	ldi	r25, 0xFF	; 255
      if( pt_iElement == NULL) /*No*/
      {
         /*------------------------------------------------------------------*
          * Allocate a new link member for this particular DMA interrupt.
          *------------------------------------------------------------------*/
         t_linkHndl = createIntHandle();
    471a:	8c 83       	std	Y+4, r24	; 0x04
    471c:	9d 83       	std	Y+5, r25	; 0x05
         if( t_linkHndl < 0)
    471e:	8c 81       	ldd	r24, Y+4	; 0x04
    4720:	9d 81       	ldd	r25, Y+5	; 0x05
    4722:	97 ff       	sbrs	r25, 7
    4724:	04 c0       	rjmp	.+8      	; 0x472e <hal_requestDmaInterrupt+0xae>
         {
            HAL_END_CRITICAL();//Enable interrupts
    4726:	89 81       	ldd	r24, Y+1	; 0x01
    4728:	8f bf       	out	0x3f, r24	; 63
            return DMA_OUT_OF_HEAP;
    472a:	8f ef       	ldi	r24, 0xFF	; 255
    472c:	1d c0       	rjmp	.+58     	; 0x4768 <hal_requestDmaInterrupt+0xe8>

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the DMA
          * interrupt information is being stored.
          *------------------------------------------------------------------*/
         pt_iElement = (t_dmaIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    472e:	ec 81       	ldd	r30, Y+4	; 0x04
    4730:	fd 81       	ldd	r31, Y+5	; 0x05
    4732:	01 90       	ld	r0, Z+
    4734:	f0 81       	ld	r31, Z
    4736:	e0 2d       	mov	r30, r0

         pt_iElement->t_id      = t_intId;
    4738:	10 83       	st	Z, r17
         pt_iElement->pf_funPtr = pf_funPtr;
    473a:	c1 82       	std	Z+1, r12	; 0x01
    473c:	d2 82       	std	Z+2, r13	; 0x02

         /*------------------------------------------------------------------*
          * Keep track of the number of interrupts attached to this channel.
          *------------------------------------------------------------------*/
         pt_dElement->c_intCount++;
    473e:	f7 01       	movw	r30, r14
    4740:	82 81       	ldd	r24, Z+2	; 0x02
    4742:	8f 5f       	subi	r24, 0xFF	; 255
    4744:	82 83       	std	Z+2, r24	; 0x02
    4746:	03 80       	ldd	r0, Z+3	; 0x03
    4748:	f4 81       	ldd	r31, Z+4	; 0x04
    474a:	e0 2d       	mov	r30, r0

         /*------------------------------------------------------------------*
          * Enable interrupt.
          *------------------------------------------------------------------*/
         if( t_type == DMA_TRANSFER_COMPLETE)
            pt_dElement->pt_dma->CTRLB |= DMA_CH_TRNINTLVL_gm;
    474c:	81 81       	ldd	r24, Z+1	; 0x01
         pt_dElement->c_intCount++;

         /*------------------------------------------------------------------*
          * Enable interrupt.
          *------------------------------------------------------------------*/
         if( t_type == DMA_TRANSFER_COMPLETE)
    474e:	00 23       	and	r16, r16
    4750:	11 f4       	brne	.+4      	; 0x4756 <hal_requestDmaInterrupt+0xd6>
            pt_dElement->pt_dma->CTRLB |= DMA_CH_TRNINTLVL_gm;
    4752:	83 60       	ori	r24, 0x03	; 3
    4754:	01 c0       	rjmp	.+2      	; 0x4758 <hal_requestDmaInterrupt+0xd8>
         else
            pt_dElement->pt_dma->CTRLB |= DMA_CH_ERRINTLVL_gm;
    4756:	8c 60       	ori	r24, 0x0C	; 12
    4758:	81 83       	std	Z+1, r24	; 0x01
         return DMA_INTERRUPT_OPEN;
      }

   }

   HAL_END_CRITICAL();//Enable interrupts
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	8f bf       	out	0x3f, r24	; 63

   return DMA_PASSED;
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	03 c0       	rjmp	.+6      	; 0x4768 <hal_requestDmaInterrupt+0xe8>
            pt_dElement->pt_dma->CTRLB |= DMA_CH_ERRINTLVL_gm;

      }/*End if( pt_iElement == NULL)*/
      else /*Yes*/
      {
         HAL_END_CRITICAL();//Enable interrupts
    4762:	89 81       	ldd	r24, Y+1	; 0x01
    4764:	8f bf       	out	0x3f, r24	; 63
         return DMA_INTERRUPT_OPEN;
    4766:	8a ef       	ldi	r24, 0xFA	; 250

   HAL_END_CRITICAL();//Enable interrupts

   return DMA_PASSED;

}/*End hal_requestDmaInterrupt*/
    4768:	27 96       	adiw	r28, 0x07	; 7
    476a:	cd bf       	out	0x3d, r28	; 61
    476c:	de bf       	out	0x3e, r29	; 62
    476e:	df 91       	pop	r29
    4770:	cf 91       	pop	r28
    4772:	1f 91       	pop	r17
    4774:	0f 91       	pop	r16
    4776:	ff 90       	pop	r15
    4778:	ef 90       	pop	r14
    477a:	df 90       	pop	r13
    477c:	cf 90       	pop	r12
    477e:	08 95       	ret

00004780 <hal_requestDmaChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular dma module
 *---------------------------------------------------------------------------*/
t_DMAHNDL hal_requestDmaChannel( void)
{
    4780:	1f 93       	push	r17
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	25 97       	sbiw	r28, 0x05	; 5
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	de bf       	out	0x3e, r29	; 62

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4790:	8f b7       	in	r24, 0x3f	; 63
    4792:	89 83       	std	Y+1, r24	; 0x01
    4794:	f8 94       	cli

   if( gb_configureDmaController == true)
    4796:	80 91 a3 20 	lds	r24, 0x20A3
    479a:	88 23       	and	r24, r24
    479c:	d9 f0       	breq	.+54     	; 0x47d4 <hal_requestDmaChannel+0x54>

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    479e:	8f b7       	in	r24, 0x3f	; 63
    47a0:	8a 83       	std	Y+2, r24	; 0x02
    47a2:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Disable module
    *------------------------------------------------------------------------*/
   DMA.CTRL &= ~DMA_ENABLE_bm;
    47a4:	80 91 00 01 	lds	r24, 0x0100
    47a8:	8f 77       	andi	r24, 0x7F	; 127
    47aa:	80 93 00 01 	sts	0x0100, r24
   }

   /*------------------------------------------------------------------------*
    * Apply configuration
    *------------------------------------------------------------------------*/
   DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm ) |
    47ae:	80 91 00 01 	lds	r24, 0x0100
    47b2:	83 7f       	andi	r24, 0xF3	; 243
    47b4:	80 93 00 01 	sts	0x0100, r24
   (DMA_DBUFMODE_t)t_conf.t_buffMode;
   DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm ) |
    47b8:	80 91 00 01 	lds	r24, 0x0100
    47bc:	83 60       	ori	r24, 0x03	; 3
    47be:	80 93 00 01 	sts	0x0100, r24
   (DMA_PRIMODE_t)t_conf.t_chanPriority;

   /*------------------------------------------------------------------------*
    * Enable module
    *------------------------------------------------------------------------*/
   DMA.CTRL |= DMA_ENABLE_bm;
    47c2:	80 91 00 01 	lds	r24, 0x0100
    47c6:	80 68       	ori	r24, 0x80	; 128
    47c8:	80 93 00 01 	sts	0x0100, r24

   HAL_END_CRITICAL();//Enable interrupts
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	8f bf       	out	0x3f, r24	; 63
      t_cntrlConf.t_chanPriority = CHAN_0_1_2_3;

      if( hal_configureDmaController( t_cntrlConf) < 0)
         exit(0); /*This should not happen*/

      gb_configureDmaController = false;
    47d0:	10 92 a3 20 	sts	0x20A3, r1

/*---------------------------------------------------------------------------*
 * Request access to a particular dma module
 *---------------------------------------------------------------------------*/
t_DMAHNDL hal_requestDmaChannel( void)
{
    47d4:	44 e0       	ldi	r20, 0x04	; 4
    47d6:	50 e0       	ldi	r21, 0x00	; 0
    47d8:	10 e0       	ldi	r17, 0x00	; 0
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA channel list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaChanList, s_count)
    47da:	e0 91 95 20 	lds	r30, 0x2095
    47de:	f0 91 96 20 	lds	r31, 0x2096
    47e2:	82 81       	ldd	r24, Z+2	; 0x02
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	e0 91 95 20 	lds	r30, 0x2095
    47ea:	f0 91 96 20 	lds	r31, 0x2096
    47ee:	0b c0       	rjmp	.+22     	; 0x4806 <hal_requestDmaChannel+0x86>
   {
      pt_element = (t_dmaChan *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    47f0:	ea 81       	ldd	r30, Y+2	; 0x02
    47f2:	fb 81       	ldd	r31, Y+3	; 0x03
    47f4:	01 90       	ld	r0, Z+
    47f6:	f0 81       	ld	r31, Z
    47f8:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    47fa:	20 81       	ld	r18, Z
    47fc:	21 17       	cp	r18, r17
    47fe:	59 f0       	breq	.+22     	; 0x4816 <hal_requestDmaChannel+0x96>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA channel list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaChanList, s_count)
    4800:	01 97       	sbiw	r24, 0x01	; 1
    4802:	ea 81       	ldd	r30, Y+2	; 0x02
    4804:	fb 81       	ldd	r31, Y+3	; 0x03
    4806:	20 85       	ldd	r18, Z+8	; 0x08
    4808:	31 85       	ldd	r19, Z+9	; 0x09
    480a:	2a 83       	std	Y+2, r18	; 0x02
    480c:	3b 83       	std	Y+3, r19	; 0x03
    480e:	18 16       	cp	r1, r24
    4810:	19 06       	cpc	r1, r25
    4812:	74 f3       	brlt	.-36     	; 0x47f0 <hal_requestDmaChannel+0x70>
    4814:	07 c0       	rjmp	.+14     	; 0x4824 <hal_requestDmaChannel+0xa4>
    * Search for next available DMA channel.
    *------------------------------------------------------------------------*/
   for( t_chanId = DMA_CHAN_0; t_chanId <= DMA_CHAN_3; t_chanId+=2)
   {
      pt_dmaChan = findDmaChanElement( t_chanId);
      if( pt_dmaChan == NULL) /*Not open*/
    4816:	30 97       	sbiw	r30, 0x00	; 0
    4818:	29 f0       	breq	.+10     	; 0x4824 <hal_requestDmaChannel+0xa4>
   }

   /*------------------------------------------------------------------------*
    * Search for next available DMA channel.
    *------------------------------------------------------------------------*/
   for( t_chanId = DMA_CHAN_0; t_chanId <= DMA_CHAN_3; t_chanId+=2)
    481a:	1e 5f       	subi	r17, 0xFE	; 254
    481c:	41 50       	subi	r20, 0x01	; 1
    481e:	50 40       	sbci	r21, 0x00	; 0
    4820:	e1 f6       	brne	.-72     	; 0x47da <hal_requestDmaChannel+0x5a>
    4822:	4f c0       	rjmp	.+158    	; 0x48c2 <hal_requestDmaChannel+0x142>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA channel information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaChan));
    4824:	85 e0       	ldi	r24, 0x05	; 5
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    482c:	8a 83       	std	Y+2, r24	; 0x02
    482e:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    4830:	8a 81       	ldd	r24, Y+2	; 0x02
    4832:	9b 81       	ldd	r25, Y+3	; 0x03
    4834:	97 fd       	sbrc	r25, 7
    4836:	2d c0       	rjmp	.+90     	; 0x4892 <hal_requestDmaChannel+0x112>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the DMA channel
    * information is being stored.
    *------------------------------------------------------------------------*/
   pt_element = (t_dmaChan *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    4838:	ea 81       	ldd	r30, Y+2	; 0x02
    483a:	fb 81       	ldd	r31, Y+3	; 0x03
    483c:	01 90       	ld	r0, Z+
    483e:	f0 81       	ld	r31, Z
    4840:	e0 2d       	mov	r30, r0

   pt_element->b_validConfig = false;
    4842:	11 82       	std	Z+1, r1	; 0x01
   pt_element->t_id          = t_id;
    4844:	10 83       	st	Z, r17
   pt_element->c_intCount    = 0;
    4846:	12 82       	std	Z+2, r1	; 0x02

   switch( t_id)
    4848:	12 30       	cpi	r17, 0x02	; 2
    484a:	69 f0       	breq	.+26     	; 0x4866 <hal_requestDmaChannel+0xe6>
    484c:	13 30       	cpi	r17, 0x03	; 3
    484e:	18 f4       	brcc	.+6      	; 0x4856 <hal_requestDmaChannel+0xd6>
    4850:	11 23       	and	r17, r17
    4852:	31 f0       	breq	.+12     	; 0x4860 <hal_requestDmaChannel+0xe0>
    4854:	12 c0       	rjmp	.+36     	; 0x487a <hal_requestDmaChannel+0xfa>
    4856:	14 30       	cpi	r17, 0x04	; 4
    4858:	49 f0       	breq	.+18     	; 0x486c <hal_requestDmaChannel+0xec>
    485a:	16 30       	cpi	r17, 0x06	; 6
    485c:	71 f4       	brne	.+28     	; 0x487a <hal_requestDmaChannel+0xfa>
    485e:	09 c0       	rjmp	.+18     	; 0x4872 <hal_requestDmaChannel+0xf2>
   {
      case DMA_CHAN_0:
         pt_element->pt_dma = &DMA.CH0;
    4860:	80 e1       	ldi	r24, 0x10	; 16
    4862:	91 e0       	ldi	r25, 0x01	; 1
    4864:	08 c0       	rjmp	.+16     	; 0x4876 <hal_requestDmaChannel+0xf6>
      break;

      case DMA_CHAN_1:
         pt_element->pt_dma = &DMA.CH1;
    4866:	80 e2       	ldi	r24, 0x20	; 32
    4868:	91 e0       	ldi	r25, 0x01	; 1
    486a:	05 c0       	rjmp	.+10     	; 0x4876 <hal_requestDmaChannel+0xf6>
      break;

      case DMA_CHAN_2:
         pt_element->pt_dma = &DMA.CH2;
    486c:	80 e3       	ldi	r24, 0x30	; 48
    486e:	91 e0       	ldi	r25, 0x01	; 1
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <hal_requestDmaChannel+0xf6>
      break;

      case DMA_CHAN_3:
         pt_element->pt_dma = &DMA.CH3;
    4872:	80 e4       	ldi	r24, 0x40	; 64
    4874:	91 e0       	ldi	r25, 0x01	; 1
    4876:	83 83       	std	Z+3, r24	; 0x03
    4878:	94 83       	std	Z+4, r25	; 0x04
   }/*End switch( t_chanId)*/

   /*------------------------------------------------------------------------*
    * Add the DMA channel link onto the list open channels.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_dmaChanList,
    487a:	80 91 95 20 	lds	r24, 0x2095
    487e:	90 91 96 20 	lds	r25, 0x2096
    4882:	6a 81       	ldd	r22, Y+2	; 0x02
    4884:	7b 81       	ldd	r23, Y+3	; 0x03
    4886:	41 e0       	ldi	r20, 0x01	; 1
    4888:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	9b 81       	ldd	r25, Y+3	; 0x03
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <hal_requestDmaChannel+0x116>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaChan));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)DMA_OUT_OF_HEAP;
    4892:	8f ef       	ldi	r24, 0xFF	; 255
    4894:	9f ef       	ldi	r25, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_dmaChan == NULL) /*Yes*/
   {
      t_linkHndl = createDmaHandle( t_chanId);
    4896:	8c 83       	std	Y+4, r24	; 0x04
    4898:	9d 83       	std	Y+5, r25	; 0x05
      if( t_linkHndl < 0)
    489a:	8c 81       	ldd	r24, Y+4	; 0x04
    489c:	9d 81       	ldd	r25, Y+5	; 0x05
    489e:	97 ff       	sbrs	r25, 7
    48a0:	05 c0       	rjmp	.+10     	; 0x48ac <hal_requestDmaChannel+0x12c>
      {
         HAL_END_CRITICAL();//Enable interrupts
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	8f bf       	out	0x3f, r24	; 63
         return (t_DMAHNDL)DMA_OUT_OF_HEAP;
    48a6:	8f ef       	ldi	r24, 0xFF	; 255
    48a8:	9f ef       	ldi	r25, 0xFF	; 255
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <hal_requestDmaChannel+0x134>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_DMAHNDL)DMA_NO_CHANNELS_OPEN;
   }

   HAL_END_CRITICAL();//Enable interrupts
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	8f bf       	out	0x3f, r24	; 63

   return (t_DMAHNDL)t_linkHndl;
    48b0:	8c 81       	ldd	r24, Y+4	; 0x04
    48b2:	9d 81       	ldd	r25, Y+5	; 0x05

}/*End hal_requestDmaChannel*/
    48b4:	25 96       	adiw	r28, 0x05	; 5
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	de bf       	out	0x3e, r29	; 62
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	1f 91       	pop	r17
    48c0:	08 95       	ret
      }/*End if( t_linkHndl < 0)*/

   }
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	8f bf       	out	0x3f, r24	; 63
      return (t_DMAHNDL)DMA_NO_CHANNELS_OPEN;
    48c6:	89 ef       	ldi	r24, 0xF9	; 249
    48c8:	9f ef       	ldi	r25, 0xFF	; 255
    48ca:	f4 cf       	rjmp	.-24     	; 0x48b4 <hal_requestDmaChannel+0x134>

000048cc <hal_releaseDmaChannel>:
   return (t_DMAHNDL)t_linkHndl;

}/*End hal_requestDmaChannel*/

t_dmaError hal_releaseDmaChannel( t_DMAHNDL t_handle)
{
    48cc:	af 92       	push	r10
    48ce:	bf 92       	push	r11
    48d0:	cf 92       	push	r12
    48d2:	df 92       	push	r13
    48d4:	ef 92       	push	r14
    48d6:	ff 92       	push	r15
    48d8:	0f 93       	push	r16
    48da:	1f 93       	push	r17
    48dc:	cf 93       	push	r28
    48de:	df 93       	push	r29
    48e0:	00 d0       	rcall	.+0      	; 0x48e2 <hal_releaseDmaChannel+0x16>
    48e2:	cd b7       	in	r28, 0x3d	; 61
    48e4:	de b7       	in	r29, 0x3e	; 62
    48e6:	8a 83       	std	Y+2, r24	; 0x02
    48e8:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    48ea:	8f b7       	in	r24, 0x3f	; 63
    48ec:	89 83       	std	Y+1, r24	; 0x01
    48ee:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    48f0:	ea 81       	ldd	r30, Y+2	; 0x02
    48f2:	fb 81       	ldd	r31, Y+3	; 0x03
    48f4:	80 91 95 20 	lds	r24, 0x2095
    48f8:	90 91 96 20 	lds	r25, 0x2096
    48fc:	24 81       	ldd	r18, Z+4	; 0x04
    48fe:	35 81       	ldd	r19, Z+5	; 0x05
    4900:	28 17       	cp	r18, r24
    4902:	39 07       	cpc	r19, r25
    4904:	21 f0       	breq	.+8      	; 0x490e <hal_releaseDmaChannel+0x42>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_HANDLE;
    490a:	8e ef       	ldi	r24, 0xFE	; 254
    490c:	8a c0       	rjmp	.+276    	; 0x4a22 <hal_releaseDmaChannel+0x156>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    490e:	ea 81       	ldd	r30, Y+2	; 0x02
    4910:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    4912:	00 81       	ld	r16, Z
    4914:	11 81       	ldd	r17, Z+1	; 0x01
    4916:	82 e0       	ldi	r24, 0x02	; 2
    4918:	a8 2e       	mov	r10, r24
    491a:	b1 2c       	mov	r11, r1
       * 't_linkHndl' has been deleted information about the next position on
       * the list is lost.  This issue is resolved by using a previous ptr to
       * change 't_linkHndl' back to a valid location once an item has been
       * removed.
       *---------------------------------------------------------------------*/
      for( t_type = DMA_TRANSFER_COMPLETE; t_type <= DMA_TRANSFER_ERROR;
    491c:	ff 24       	eor	r15, r15
      {
         /*------------------------------------------------------------------*
          * Use the DMA channel id and interrupt type as an index into the
          * list of possible interrupts.
          *------------------------------------------------------------------*/
         t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;
    491e:	d8 01       	movw	r26, r16
    4920:	ec 90       	ld	r14, X
    4922:	ef 0c       	add	r14, r15

         /*------------------------------------------------------------------*
          * Search the DMA interrupt list for the requested ID
          *------------------------------------------------------------------*/
         UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    4924:	e0 91 87 20 	lds	r30, 0x2087
    4928:	f0 91 88 20 	lds	r31, 0x2088
    492c:	c2 80       	ldd	r12, Z+2	; 0x02
    492e:	d3 80       	ldd	r13, Z+3	; 0x03
    4930:	e0 91 87 20 	lds	r30, 0x2087
    4934:	f0 91 88 20 	lds	r31, 0x2088
    4938:	3a c0       	rjmp	.+116    	; 0x49ae <hal_releaseDmaChannel+0xe2>
         {
            pt_iElement = (t_dmaIntHndl *)
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    493a:	e0 91 7e 24 	lds	r30, 0x247E
    493e:	f0 91 7f 24 	lds	r31, 0x247F
         /*------------------------------------------------------------------*
          * Search the DMA interrupt list for the requested ID
          *------------------------------------------------------------------*/
         UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
         {
            pt_iElement = (t_dmaIntHndl *)
    4942:	a0 81       	ld	r26, Z
    4944:	b1 81       	ldd	r27, Z+1	; 0x01
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
            t_prevLinkHndl = UTL_GET_PREV_LINK( t_linkHndl);
    4946:	e0 91 7e 24 	lds	r30, 0x247E
    494a:	f0 91 7f 24 	lds	r31, 0x247F
    494e:	82 85       	ldd	r24, Z+10	; 0x0a
    4950:	93 85       	ldd	r25, Z+11	; 0x0b
    4952:	80 93 7c 24 	sts	0x247C, r24
    4956:	90 93 7d 24 	sts	0x247D, r25
            if( pt_iElement->t_id == t_intId)
    495a:	8c 91       	ld	r24, X
    495c:	8e 15       	cp	r24, r14
    495e:	01 f5       	brne	.+64     	; 0x49a0 <hal_releaseDmaChannel+0xd4>
            {
               pt_dElement->c_intCount--;
    4960:	f8 01       	movw	r30, r16
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	81 50       	subi	r24, 0x01	; 1
    4966:	82 83       	std	Z+2, r24	; 0x02
    4968:	03 80       	ldd	r0, Z+3	; 0x03
    496a:	f4 81       	ldd	r31, Z+4	; 0x04
    496c:	e0 2d       	mov	r30, r0
               if( t_type == DMA_TRANSFER_COMPLETE)
                  pt_dElement->pt_dma->CTRLB &= ~DMA_CH_TRNINTLVL_gm;
    496e:	81 81       	ldd	r24, Z+1	; 0x01
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
            t_prevLinkHndl = UTL_GET_PREV_LINK( t_linkHndl);
            if( pt_iElement->t_id == t_intId)
            {
               pt_dElement->c_intCount--;
               if( t_type == DMA_TRANSFER_COMPLETE)
    4970:	ff 20       	and	r15, r15
    4972:	11 f4       	brne	.+4      	; 0x4978 <hal_releaseDmaChannel+0xac>
                  pt_dElement->pt_dma->CTRLB &= ~DMA_CH_TRNINTLVL_gm;
    4974:	8c 7f       	andi	r24, 0xFC	; 252
    4976:	01 c0       	rjmp	.+2      	; 0x497a <hal_releaseDmaChannel+0xae>
               else
                  pt_dElement->pt_dma->CTRLB &= ~DMA_CH_ERRINTLVL_gm;
    4978:	83 7f       	andi	r24, 0xF3	; 243
    497a:	81 83       	std	Z+1, r24	; 0x01

               t_lErr = utl_destroyLink( gt_dmaIntHndlList,
    497c:	80 91 87 20 	lds	r24, 0x2087
    4980:	90 91 88 20 	lds	r25, 0x2088
    4984:	60 91 7e 24 	lds	r22, 0x247E
    4988:	70 91 7f 24 	lds	r23, 0x247F
    498c:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                                         t_linkHndl);

               t_linkHndl = t_prevLinkHndl;
    4990:	80 91 7c 24 	lds	r24, 0x247C
    4994:	90 91 7d 24 	lds	r25, 0x247D
    4998:	80 93 7e 24 	sts	0x247E, r24
    499c:	90 93 7f 24 	sts	0x247F, r25
         t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;

         /*------------------------------------------------------------------*
          * Search the DMA interrupt list for the requested ID
          *------------------------------------------------------------------*/
         UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    49a0:	08 94       	sec
    49a2:	c1 08       	sbc	r12, r1
    49a4:	d1 08       	sbc	r13, r1
    49a6:	e0 91 7e 24 	lds	r30, 0x247E
    49aa:	f0 91 7f 24 	lds	r31, 0x247F
    49ae:	80 85       	ldd	r24, Z+8	; 0x08
    49b0:	91 85       	ldd	r25, Z+9	; 0x09
    49b2:	80 93 7e 24 	sts	0x247E, r24
    49b6:	90 93 7f 24 	sts	0x247F, r25
    49ba:	1c 14       	cp	r1, r12
    49bc:	1d 04       	cpc	r1, r13
    49be:	0c f4       	brge	.+2      	; 0x49c2 <hal_releaseDmaChannel+0xf6>
    49c0:	bc cf       	rjmp	.-136    	; 0x493a <hal_releaseDmaChannel+0x6e>
       * the list is lost.  This issue is resolved by using a previous ptr to
       * change 't_linkHndl' back to a valid location once an item has been
       * removed.
       *---------------------------------------------------------------------*/
      for( t_type = DMA_TRANSFER_COMPLETE; t_type <= DMA_TRANSFER_ERROR;
      t_type++)
    49c2:	f3 94       	inc	r15
    49c4:	08 94       	sec
    49c6:	a1 08       	sbc	r10, r1
    49c8:	b1 08       	sbc	r11, r1
       * 't_linkHndl' has been deleted information about the next position on
       * the list is lost.  This issue is resolved by using a previous ptr to
       * change 't_linkHndl' back to a valid location once an item has been
       * removed.
       *---------------------------------------------------------------------*/
      for( t_type = DMA_TRANSFER_COMPLETE; t_type <= DMA_TRANSFER_ERROR;
    49ca:	a1 14       	cp	r10, r1
    49cc:	b1 04       	cpc	r11, r1
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <hal_releaseDmaChannel+0x106>
    49d0:	a6 cf       	rjmp	.-180    	; 0x491e <hal_releaseDmaChannel+0x52>
      t_type++)*/

      /*---------------------------------------------------------------------*
       * Disable the channel.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    49d2:	d8 01       	movw	r26, r16
    49d4:	13 96       	adiw	r26, 0x03	; 3
    49d6:	ed 91       	ld	r30, X+
    49d8:	fc 91       	ld	r31, X
    49da:	14 97       	sbiw	r26, 0x04	; 4
    49dc:	80 81       	ld	r24, Z
    49de:	8f 77       	andi	r24, 0x7F	; 127
    49e0:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Reset all registers to default values
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    49e2:	13 96       	adiw	r26, 0x03	; 3
    49e4:	ed 91       	ld	r30, X+
    49e6:	fc 91       	ld	r31, X
    49e8:	14 97       	sbiw	r26, 0x04	; 4
    49ea:	80 81       	ld	r24, Z
    49ec:	8f 77       	andi	r24, 0x7F	; 127
    49ee:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA |= DMA_CH_RESET_bm;
    49f0:	13 96       	adiw	r26, 0x03	; 3
    49f2:	ed 91       	ld	r30, X+
    49f4:	fc 91       	ld	r31, X
    49f6:	14 97       	sbiw	r26, 0x04	; 4
    49f8:	80 81       	ld	r24, Z
    49fa:	80 64       	ori	r24, 0x40	; 64
    49fc:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_RESET_bm;
    49fe:	13 96       	adiw	r26, 0x03	; 3
    4a00:	ed 91       	ld	r30, X+
    4a02:	fc 91       	ld	r31, X
    4a04:	14 97       	sbiw	r26, 0x04	; 4
    4a06:	80 81       	ld	r24, Z
    4a08:	8f 7b       	andi	r24, 0xBF	; 191
    4a0a:	80 83       	st	Z, r24

      t_lErr = utl_destroyLink( gt_dmaChanList,
    4a0c:	80 91 95 20 	lds	r24, 0x2095
    4a10:	90 91 96 20 	lds	r25, 0x2096
    4a14:	6a 81       	ldd	r22, Y+2	; 0x02
    4a16:	7b 81       	ldd	r23, Y+3	; 0x03
    4a18:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                                (t_LINKHNDL)t_handle);

   }

   HAL_END_CRITICAL();//Enable interrupts
    4a1c:	89 81       	ldd	r24, Y+1	; 0x01
    4a1e:	8f bf       	out	0x3f, r24	; 63

   return DMA_PASSED;
    4a20:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_releaseDmaChannel*/
    4a22:	23 96       	adiw	r28, 0x03	; 3
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	df 91       	pop	r29
    4a2a:	cf 91       	pop	r28
    4a2c:	1f 91       	pop	r17
    4a2e:	0f 91       	pop	r16
    4a30:	ff 90       	pop	r15
    4a32:	ef 90       	pop	r14
    4a34:	df 90       	pop	r13
    4a36:	cf 90       	pop	r12
    4a38:	bf 90       	pop	r11
    4a3a:	af 90       	pop	r10
    4a3c:	08 95       	ret

00004a3e <hal_getDmaTransferCount>:
   return s_status;

}/*End hal_getDmaStatus*/

uint16_t hal_getDmaTransferCount( t_DMAHNDL t_handle)
{
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	0f 92       	push	r0
    4a44:	0f 92       	push	r0
    4a46:	cd b7       	in	r28, 0x3d	; 61
    4a48:	de b7       	in	r29, 0x3e	; 62
    4a4a:	89 83       	std	Y+1, r24	; 0x01
    4a4c:	9a 83       	std	Y+2, r25	; 0x02
   uint16_t s_count = 0;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a50:	fa 81       	ldd	r31, Y+2	; 0x02
    4a52:	80 91 95 20 	lds	r24, 0x2095
    4a56:	90 91 96 20 	lds	r25, 0x2096
    4a5a:	24 81       	ldd	r18, Z+4	; 0x04
    4a5c:	35 81       	ldd	r19, Z+5	; 0x05
    4a5e:	28 17       	cp	r18, r24
    4a60:	39 07       	cpc	r19, r25
    4a62:	59 f4       	brne	.+22     	; 0x4a7a <hal_getDmaTransferCount+0x3c>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    4a64:	e9 81       	ldd	r30, Y+1	; 0x01
    4a66:	fa 81       	ldd	r31, Y+2	; 0x02

      s_count = pt_dElement->pt_dma->TRFCNT;
    4a68:	01 90       	ld	r0, Z+
    4a6a:	f0 81       	ld	r31, Z
    4a6c:	e0 2d       	mov	r30, r0
    4a6e:	03 80       	ldd	r0, Z+3	; 0x03
    4a70:	f4 81       	ldd	r31, Z+4	; 0x04
    4a72:	e0 2d       	mov	r30, r0
    4a74:	84 81       	ldd	r24, Z+4	; 0x04
    4a76:	95 81       	ldd	r25, Z+5	; 0x05

   }

   return s_count;
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <hal_getDmaTransferCount+0x40>
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
   {
      return (int16_t)DMA_INVALID_HANDLE;
    4a7a:	8e ef       	ldi	r24, 0xFE	; 254
    4a7c:	9f ef       	ldi	r25, 0xFF	; 255

   }

   return s_count;

}/*End hal_getDmaTransferCount*/
    4a7e:	0f 90       	pop	r0
    4a80:	0f 90       	pop	r0
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	08 95       	ret

00004a88 <hal_configureDmaChannel>:

t_dmaError hal_configureDmaChannel( t_DMAHNDL t_handle,
                                    t_dmaChanConfig t_conf)
{
    4a88:	af 92       	push	r10
    4a8a:	bf 92       	push	r11
    4a8c:	cf 92       	push	r12
    4a8e:	df 92       	push	r13
    4a90:	ef 92       	push	r14
    4a92:	ff 92       	push	r15
    4a94:	0f 93       	push	r16
    4a96:	1f 93       	push	r17
    4a98:	cf 93       	push	r28
    4a9a:	df 93       	push	r29
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	61 97       	sbiw	r28, 0x11	; 17
    4aa2:	cd bf       	out	0x3d, r28	; 61
    4aa4:	de bf       	out	0x3e, r29	; 62
    4aa6:	8a 83       	std	Y+2, r24	; 0x02
    4aa8:	9b 83       	std	Y+3, r25	; 0x03
    4aaa:	ac 82       	std	Y+4, r10	; 0x04
    4aac:	bd 82       	std	Y+5, r11	; 0x05
    4aae:	ce 82       	std	Y+6, r12	; 0x06
    4ab0:	df 82       	std	Y+7, r13	; 0x07
    4ab2:	8e 2d       	mov	r24, r14
    4ab4:	e8 86       	std	Y+8, r14	; 0x08
    4ab6:	9f 2d       	mov	r25, r15
    4ab8:	f9 86       	std	Y+9, r15	; 0x09
    4aba:	e0 2f       	mov	r30, r16
    4abc:	0a 87       	std	Y+10, r16	; 0x0a
    4abe:	f1 2f       	mov	r31, r17
    4ac0:	1b 87       	std	Y+11, r17	; 0x0b
    4ac2:	2c 87       	std	Y+12, r18	; 0x0c
    4ac4:	3d 87       	std	Y+13, r19	; 0x0d
    4ac6:	24 2f       	mov	r18, r20
    4ac8:	4e 87       	std	Y+14, r20	; 0x0e
    4aca:	f5 2e       	mov	r15, r21
    4acc:	5f 87       	std	Y+15, r21	; 0x0f
    4ace:	e6 2e       	mov	r14, r22
    4ad0:	68 8b       	std	Y+16, r22	; 0x10
    4ad2:	37 2f       	mov	r19, r23
    4ad4:	79 8b       	std	Y+17, r23	; 0x11

   }

   HAL_END_CRITICAL();//Enable interrupts

   return DMA_PASSED;
    4ad6:	8f 01       	movw	r16, r30
    4ad8:	cc 84       	ldd	r12, Y+12	; 0x0c
    4ada:	dd 84       	ldd	r13, Y+13	; 0x0d
    4adc:	b9 01       	movw	r22, r18

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4ade:	2f b7       	in	r18, 0x3f	; 63
    4ae0:	29 83       	std	Y+1, r18	; 0x01
    4ae2:	f8 94       	cli

   if( (t_conf.t_srcAddDir < FIXED) || (t_conf.t_srcAddDir >
    4ae4:	83 30       	cpi	r24, 0x03	; 3
    4ae6:	10 f4       	brcc	.+4      	; 0x4aec <hal_configureDmaChannel+0x64>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return DMA_INVALID_ADDRESS_MODE;
   }

   if( (t_conf.t_destAddDir< FIXED) || (t_conf.t_destAddDir >
    4ae8:	93 30       	cpi	r25, 0x03	; 3
    4aea:	20 f0       	brcs	.+8      	; 0x4af4 <hal_configureDmaChannel+0x6c>
   DECREMENT))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4aec:	89 81       	ldd	r24, Y+1	; 0x01
    4aee:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_ADDRESS_MODE;
    4af0:	86 ef       	ldi	r24, 0xF6	; 246
    4af2:	ec c0       	rjmp	.+472    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   if( (t_conf.t_srcAddReload < NO_RELOAD) || (t_conf.t_srcAddReload >
    4af4:	04 30       	cpi	r16, 0x04	; 4
    4af6:	10 f4       	brcc	.+4      	; 0x4afc <hal_configureDmaChannel+0x74>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return DMA_INVALID_ADD_RELOAD_MODE;
   }

   if( (t_conf.t_destAddReload < NO_RELOAD) || (t_conf.t_destAddReload >
    4af8:	14 30       	cpi	r17, 0x04	; 4
    4afa:	20 f0       	brcs	.+8      	; 0x4b04 <hal_configureDmaChannel+0x7c>
   RELOAD_END_OF_TRANSACTION))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
    4afe:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_ADD_RELOAD_MODE;
    4b00:	85 ef       	ldi	r24, 0xF5	; 245
    4b02:	e4 c0       	rjmp	.+456    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   if( t_conf.s_blockSize == 0)
    4b04:	c1 14       	cp	r12, r1
    4b06:	d1 04       	cpc	r13, r1
    4b08:	21 f4       	brne	.+8      	; 0x4b12 <hal_configureDmaChannel+0x8a>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_BLOCK_SIZE;
    4b0e:	84 ef       	ldi	r24, 0xF4	; 244
    4b10:	dd c0       	rjmp	.+442    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   if( (t_conf.t_burstMode < ONE_BYTE) || (t_conf.t_burstMode >
    4b12:	64 30       	cpi	r22, 0x04	; 4
    4b14:	20 f0       	brcs	.+8      	; 0x4b1e <hal_configureDmaChannel+0x96>
   EIGHT_BYTE))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4b16:	89 81       	ldd	r24, Y+1	; 0x01
    4b18:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_BURST_MODE;
    4b1a:	83 ef       	ldi	r24, 0xF3	; 243
    4b1c:	d7 c0       	rjmp	.+430    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   if( (t_conf.t_transferType < BLOCK) || (t_conf.t_transferType >
    4b1e:	21 e0       	ldi	r18, 0x01	; 1
    4b20:	25 17       	cp	r18, r21
    4b22:	20 f4       	brcc	.+8      	; 0x4b2c <hal_configureDmaChannel+0xa4>
   SINGLE_SHOT))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_TRANSFER_TYPE;
    4b28:	82 ef       	ldi	r24, 0xF2	; 242
    4b2a:	d0 c0       	rjmp	.+416    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   if( (t_conf.t_triggerSrc < SOFTWARE) || (t_conf.t_triggerSrc >
    4b2c:	2f ea       	ldi	r18, 0xAF	; 175
    4b2e:	2e 15       	cp	r18, r14
    4b30:	20 f4       	brcc	.+8      	; 0x4b3a <hal_configureDmaChannel+0xb2>
   UART8_DATA_REG_EMPTY))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_TRIGGER_SOURCE;
    4b36:	81 ef       	ldi	r24, 0xF1	; 241
    4b38:	c9 c0       	rjmp	.+402    	; 0x4ccc <hal_configureDmaChannel+0x244>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    4b3c:	fb 81       	ldd	r31, Y+3	; 0x03
    4b3e:	20 91 95 20 	lds	r18, 0x2095
    4b42:	30 91 96 20 	lds	r19, 0x2096
    4b46:	44 81       	ldd	r20, Z+4	; 0x04
    4b48:	55 81       	ldd	r21, Z+5	; 0x05
    4b4a:	42 17       	cp	r20, r18
    4b4c:	53 07       	cpc	r21, r19
    4b4e:	21 f0       	breq	.+8      	; 0x4b58 <hal_configureDmaChannel+0xd0>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_HANDLE;
    4b54:	8e ef       	ldi	r24, 0xFE	; 254
    4b56:	ba c0       	rjmp	.+372    	; 0x4ccc <hal_configureDmaChannel+0x244>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    4b58:	ea 81       	ldd	r30, Y+2	; 0x02
    4b5a:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    4b5c:	01 90       	ld	r0, Z+
    4b5e:	f0 81       	ld	r31, Z
    4b60:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    4b62:	a3 81       	ldd	r26, Z+3	; 0x03
    4b64:	b4 81       	ldd	r27, Z+4	; 0x04
    4b66:	2c 91       	ld	r18, X
    4b68:	2f 77       	andi	r18, 0x7F	; 127
    4b6a:	2c 93       	st	X, r18
      pc_dst = (int8_t *)&t_conf.pi_destAddress;

      /*---------------------------------------------------------------------*
       * Apply configuration
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->SRCADDR0 = (uint16_t)pc_src[0];
    4b6c:	a3 81       	ldd	r26, Z+3	; 0x03
    4b6e:	b4 81       	ldd	r27, Z+4	; 0x04
    4b70:	2c 81       	ldd	r18, Y+4	; 0x04
    4b72:	18 96       	adiw	r26, 0x08	; 8
    4b74:	2c 93       	st	X, r18
      pt_dElement->pt_dma->SRCADDR1 = (uint16_t)pc_src[1];
    4b76:	a3 81       	ldd	r26, Z+3	; 0x03
    4b78:	b4 81       	ldd	r27, Z+4	; 0x04
    4b7a:	2d 81       	ldd	r18, Y+5	; 0x05
    4b7c:	19 96       	adiw	r26, 0x09	; 9
    4b7e:	2c 93       	st	X, r18

      /*---------------------------------------------------------------------*
       * Todo...this will need to be fixed if someone is attempting to 
       * access memory outside of a 16-bit memory range...
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->SRCADDR2 = 0;//(uint16_t)pc_src[2];
    4b80:	a3 81       	ldd	r26, Z+3	; 0x03
    4b82:	b4 81       	ldd	r27, Z+4	; 0x04
    4b84:	1a 96       	adiw	r26, 0x0a	; 10
    4b86:	1c 92       	st	X, r1

      pt_dElement->pt_dma->DESTADDR0 = (uint16_t)pc_dst[0];
    4b88:	a3 81       	ldd	r26, Z+3	; 0x03
    4b8a:	b4 81       	ldd	r27, Z+4	; 0x04
    4b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    4b8e:	1c 96       	adiw	r26, 0x0c	; 12
    4b90:	2c 93       	st	X, r18
      pt_dElement->pt_dma->DESTADDR1 = (uint16_t)pc_dst[1];
    4b92:	a3 81       	ldd	r26, Z+3	; 0x03
    4b94:	b4 81       	ldd	r27, Z+4	; 0x04
    4b96:	2f 81       	ldd	r18, Y+7	; 0x07
    4b98:	1d 96       	adiw	r26, 0x0d	; 13
    4b9a:	2c 93       	st	X, r18

      /*---------------------------------------------------------------------*
       * Todo...this will need to be fixed if someone is attempting to 
       * access memory outside of a 16-bit memory range...
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->DESTADDR2 = 0;//(uint16_t)pc_dst[2];
    4b9c:	a3 81       	ldd	r26, Z+3	; 0x03
    4b9e:	b4 81       	ldd	r27, Z+4	; 0x04
    4ba0:	1e 96       	adiw	r26, 0x0e	; 14
    4ba2:	1c 92       	st	X, r1

      /*---------------------------------------------------------------------*
       * Configure the direction
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_SRCDIR_gm;
    4ba4:	a3 81       	ldd	r26, Z+3	; 0x03
    4ba6:	b4 81       	ldd	r27, Z+4	; 0x04
    4ba8:	12 96       	adiw	r26, 0x02	; 2
    4baa:	2c 91       	ld	r18, X
    4bac:	12 97       	sbiw	r26, 0x02	; 2
    4bae:	2f 7c       	andi	r18, 0xCF	; 207
    4bb0:	12 96       	adiw	r26, 0x02	; 2
    4bb2:	2c 93       	st	X, r18
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_srcAddDir << 4);
    4bb4:	a3 81       	ldd	r26, Z+3	; 0x03
    4bb6:	b4 81       	ldd	r27, Z+4	; 0x04
    4bb8:	12 96       	adiw	r26, 0x02	; 2
    4bba:	2c 91       	ld	r18, X
    4bbc:	12 97       	sbiw	r26, 0x02	; 2
    4bbe:	82 95       	swap	r24
    4bc0:	80 7f       	andi	r24, 0xF0	; 240
    4bc2:	82 2b       	or	r24, r18
    4bc4:	12 96       	adiw	r26, 0x02	; 2
    4bc6:	8c 93       	st	X, r24

      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_DESTDIR_gm;
    4bc8:	a3 81       	ldd	r26, Z+3	; 0x03
    4bca:	b4 81       	ldd	r27, Z+4	; 0x04
    4bcc:	12 96       	adiw	r26, 0x02	; 2
    4bce:	8c 91       	ld	r24, X
    4bd0:	12 97       	sbiw	r26, 0x02	; 2
    4bd2:	8c 7f       	andi	r24, 0xFC	; 252
    4bd4:	12 96       	adiw	r26, 0x02	; 2
    4bd6:	8c 93       	st	X, r24
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_destAddDir << 0);
    4bd8:	a3 81       	ldd	r26, Z+3	; 0x03
    4bda:	b4 81       	ldd	r27, Z+4	; 0x04
    4bdc:	12 96       	adiw	r26, 0x02	; 2
    4bde:	8c 91       	ld	r24, X
    4be0:	12 97       	sbiw	r26, 0x02	; 2
    4be2:	89 2b       	or	r24, r25
    4be4:	12 96       	adiw	r26, 0x02	; 2
    4be6:	8c 93       	st	X, r24

      /*---------------------------------------------------------------------*
       * Configure whether or not to reload.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_SRCRELOAD_gm;
    4be8:	a3 81       	ldd	r26, Z+3	; 0x03
    4bea:	b4 81       	ldd	r27, Z+4	; 0x04
    4bec:	12 96       	adiw	r26, 0x02	; 2
    4bee:	8c 91       	ld	r24, X
    4bf0:	12 97       	sbiw	r26, 0x02	; 2
    4bf2:	8f 73       	andi	r24, 0x3F	; 63
    4bf4:	12 96       	adiw	r26, 0x02	; 2
    4bf6:	8c 93       	st	X, r24
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_srcAddReload << 6);
    4bf8:	a3 81       	ldd	r26, Z+3	; 0x03
    4bfa:	b4 81       	ldd	r27, Z+4	; 0x04
    4bfc:	12 96       	adiw	r26, 0x02	; 2
    4bfe:	8c 91       	ld	r24, X
    4c00:	12 97       	sbiw	r26, 0x02	; 2
    4c02:	02 95       	swap	r16
    4c04:	00 0f       	add	r16, r16
    4c06:	00 0f       	add	r16, r16
    4c08:	00 7c       	andi	r16, 0xC0	; 192
    4c0a:	08 2b       	or	r16, r24
    4c0c:	12 96       	adiw	r26, 0x02	; 2
    4c0e:	0c 93       	st	X, r16

      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_DESTRELOAD_gm;
    4c10:	a3 81       	ldd	r26, Z+3	; 0x03
    4c12:	b4 81       	ldd	r27, Z+4	; 0x04
    4c14:	12 96       	adiw	r26, 0x02	; 2
    4c16:	8c 91       	ld	r24, X
    4c18:	12 97       	sbiw	r26, 0x02	; 2
    4c1a:	83 7f       	andi	r24, 0xF3	; 243
    4c1c:	12 96       	adiw	r26, 0x02	; 2
    4c1e:	8c 93       	st	X, r24
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_destAddReload << 2);
    4c20:	a3 81       	ldd	r26, Z+3	; 0x03
    4c22:	b4 81       	ldd	r27, Z+4	; 0x04
    4c24:	12 96       	adiw	r26, 0x02	; 2
    4c26:	8c 91       	ld	r24, X
    4c28:	12 97       	sbiw	r26, 0x02	; 2
    4c2a:	11 0f       	add	r17, r17
    4c2c:	11 0f       	add	r17, r17
    4c2e:	18 2b       	or	r17, r24
    4c30:	12 96       	adiw	r26, 0x02	; 2
    4c32:	1c 93       	st	X, r17

      /*---------------------------------------------------------------------*
       * Configure the block size
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->TRFCNT = t_conf.s_blockSize;
    4c34:	a3 81       	ldd	r26, Z+3	; 0x03
    4c36:	b4 81       	ldd	r27, Z+4	; 0x04
    4c38:	14 96       	adiw	r26, 0x04	; 4
    4c3a:	cd 92       	st	X+, r12
    4c3c:	dc 92       	st	X, r13
    4c3e:	15 97       	sbiw	r26, 0x05	; 5

      /*---------------------------------------------------------------------*
       * Configure the channel transfer mode.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_BURSTLEN_gm;
    4c40:	a3 81       	ldd	r26, Z+3	; 0x03
    4c42:	b4 81       	ldd	r27, Z+4	; 0x04
    4c44:	8c 91       	ld	r24, X
    4c46:	8c 7f       	andi	r24, 0xFC	; 252
    4c48:	8c 93       	st	X, r24
      pt_dElement->pt_dma->CTRLA |= t_conf.t_burstMode;
    4c4a:	a3 81       	ldd	r26, Z+3	; 0x03
    4c4c:	b4 81       	ldd	r27, Z+4	; 0x04
    4c4e:	8c 91       	ld	r24, X
    4c50:	86 2b       	or	r24, r22
    4c52:	8c 93       	st	X, r24

      /*---------------------------------------------------------------------*
       * Configure repeat mode
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_REPEAT_bm;
    4c54:	a3 81       	ldd	r26, Z+3	; 0x03
    4c56:	b4 81       	ldd	r27, Z+4	; 0x04
    4c58:	8c 91       	ld	r24, X
    4c5a:	8f 7d       	andi	r24, 0xDF	; 223
    4c5c:	8c 93       	st	X, r24
      pt_dElement->pt_dma->REPCNT = 0;
    4c5e:	a3 81       	ldd	r26, Z+3	; 0x03
    4c60:	b4 81       	ldd	r27, Z+4	; 0x04
    4c62:	16 96       	adiw	r26, 0x06	; 6
    4c64:	1c 92       	st	X, r1
    4c66:	a3 81       	ldd	r26, Z+3	; 0x03
    4c68:	b4 81       	ldd	r27, Z+4	; 0x04
      if( t_conf.c_repeatCount > 0)
    4c6a:	17 16       	cp	r1, r23
    4c6c:	4c f4       	brge	.+18     	; 0x4c80 <hal_configureDmaChannel+0x1f8>
      {
         /*Fixed number of repeats*/
         pt_dElement->pt_dma->CTRLA |= DMA_CH_REPEAT_bm;
    4c6e:	8c 91       	ld	r24, X
    4c70:	80 62       	ori	r24, 0x20	; 32
    4c72:	8c 93       	st	X, r24
         pt_dElement->pt_dma->REPCNT = t_conf.c_repeatCount;
    4c74:	a3 81       	ldd	r26, Z+3	; 0x03
    4c76:	b4 81       	ldd	r27, Z+4	; 0x04
    4c78:	16 96       	adiw	r26, 0x06	; 6
    4c7a:	7c 93       	st	X, r23
    4c7c:	16 97       	sbiw	r26, 0x06	; 6
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <hal_configureDmaChannel+0x202>

      }
      else if( t_conf.c_repeatCount < 0)
    4c80:	77 23       	and	r23, r23
    4c82:	19 f0       	breq	.+6      	; 0x4c8a <hal_configureDmaChannel+0x202>
      {
         /*Infinite repeat*/
         pt_dElement->pt_dma->CTRLA |= DMA_CH_REPEAT_bm;
    4c84:	8c 91       	ld	r24, X
    4c86:	80 62       	ori	r24, 0x20	; 32
    4c88:	8c 93       	st	X, r24
      }

      /*---------------------------------------------------------------------*
       * Configure the data transfer type
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_SINGLE_bm;
    4c8a:	a3 81       	ldd	r26, Z+3	; 0x03
    4c8c:	b4 81       	ldd	r27, Z+4	; 0x04
    4c8e:	8c 91       	ld	r24, X
    4c90:	8b 7f       	andi	r24, 0xFB	; 251
    4c92:	8c 93       	st	X, r24
      pt_dElement->pt_dma->CTRLA |= t_conf.t_transferType << 2;
    4c94:	a3 81       	ldd	r26, Z+3	; 0x03
    4c96:	b4 81       	ldd	r27, Z+4	; 0x04
    4c98:	8c 91       	ld	r24, X
    4c9a:	ff 0c       	add	r15, r15
    4c9c:	ff 0c       	add	r15, r15
    4c9e:	f8 2a       	or	r15, r24
    4ca0:	fc 92       	st	X, r15

      /*---------------------------------------------------------------------*
       * Configure the DMA trigger source
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->TRIGSRC &= ~DMA_CH_TRIGSRC_gm;
    4ca2:	a3 81       	ldd	r26, Z+3	; 0x03
    4ca4:	b4 81       	ldd	r27, Z+4	; 0x04
    4ca6:	13 96       	adiw	r26, 0x03	; 3
    4ca8:	8c 91       	ld	r24, X
    4caa:	13 97       	sbiw	r26, 0x03	; 3
    4cac:	13 96       	adiw	r26, 0x03	; 3
    4cae:	1c 92       	st	X, r1
      pt_dElement->pt_dma->TRIGSRC |= t_conf.t_triggerSrc;
    4cb0:	a3 81       	ldd	r26, Z+3	; 0x03
    4cb2:	b4 81       	ldd	r27, Z+4	; 0x04
    4cb4:	13 96       	adiw	r26, 0x03	; 3
    4cb6:	8c 91       	ld	r24, X
    4cb8:	13 97       	sbiw	r26, 0x03	; 3
    4cba:	8e 29       	or	r24, r14
    4cbc:	13 96       	adiw	r26, 0x03	; 3
    4cbe:	8c 93       	st	X, r24
    4cc0:	13 97       	sbiw	r26, 0x03	; 3

      pt_dElement->b_validConfig = true;
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	81 83       	std	Z+1, r24	; 0x01

   }

   HAL_END_CRITICAL();//Enable interrupts
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
    4cc8:	8f bf       	out	0x3f, r24	; 63

   return DMA_PASSED;
    4cca:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_configureDmaChannel*/
    4ccc:	61 96       	adiw	r28, 0x11	; 17
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	ff 90       	pop	r15
    4cdc:	ef 90       	pop	r14
    4cde:	df 90       	pop	r13
    4ce0:	cf 90       	pop	r12
    4ce2:	bf 90       	pop	r11
    4ce4:	af 90       	pop	r10
    4ce6:	08 95       	ret

00004ce8 <hal_getDmaChannelId>:

/*------------------------------------------------------------------------*
   * Returns the channel Id for a particular DMA pointed to by 't_handle'.
   *------------------------------------------------------------------------*/
t_dmaChanId hal_getDmaChannelId( t_DMAHNDL t_handle)
{
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	0f 92       	push	r0
    4cee:	0f 92       	push	r0
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	89 83       	std	Y+1, r24	; 0x01
    4cf6:	9a 83       	std	Y+2, r25	; 0x02
   volatile t_dmaChan *pt_dElement;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    4cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    4cfc:	80 91 95 20 	lds	r24, 0x2095
    4d00:	90 91 96 20 	lds	r25, 0x2096
    4d04:	24 81       	ldd	r18, Z+4	; 0x04
    4d06:	35 81       	ldd	r19, Z+5	; 0x05
    4d08:	28 17       	cp	r18, r24
    4d0a:	39 07       	cpc	r19, r25
    4d0c:	39 f4       	brne	.+14     	; 0x4d1c <hal_getDmaChannelId+0x34>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the DMA
    * channel information is being stored.
    *------------------------------------------------------------------------*/
   pt_dElement = (t_dmaChan *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    4d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    4d10:	fa 81       	ldd	r31, Y+2	; 0x02

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the DMA
    * channel information is being stored.
    *------------------------------------------------------------------------*/
   pt_dElement = (t_dmaChan *)
    4d12:	01 90       	ld	r0, Z+
    4d14:	f0 81       	ld	r31, Z
    4d16:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   return pt_dElement->t_id;
    4d18:	80 81       	ld	r24, Z
    4d1a:	01 c0       	rjmp	.+2      	; 0x4d1e <hal_getDmaChannelId+0x36>
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
   {
      return (int16_t)DMA_INVALID_HANDLE;
    4d1c:	8e ef       	ldi	r24, 0xFE	; 254
   pt_dElement = (t_dmaChan *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   return pt_dElement->t_id;

}/*End hal_getDmaChannelId*/
    4d1e:	0f 90       	pop	r0
    4d20:	0f 90       	pop	r0
    4d22:	df 91       	pop	r29
    4d24:	cf 91       	pop	r28
    4d26:	08 95       	ret

00004d28 <hal_dmaEnableChannel>:
   return DMA_PASSED;

}/*End hal_clearDmaIntStatus*/

t_dmaError hal_dmaEnableChannel( t_DMAHNDL t_handle)
{
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	00 d0       	rcall	.+0      	; 0x4d2e <hal_dmaEnableChannel+0x6>
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	8a 83       	std	Y+2, r24	; 0x02
    4d34:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4d36:	8f b7       	in	r24, 0x3f	; 63
    4d38:	89 83       	std	Y+1, r24	; 0x01
    4d3a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    4d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    4d40:	80 91 95 20 	lds	r24, 0x2095
    4d44:	90 91 96 20 	lds	r25, 0x2096
    4d48:	24 81       	ldd	r18, Z+4	; 0x04
    4d4a:	35 81       	ldd	r19, Z+5	; 0x05
    4d4c:	28 17       	cp	r18, r24
    4d4e:	39 07       	cpc	r19, r25
    4d50:	21 f0       	breq	.+8      	; 0x4d5a <hal_dmaEnableChannel+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
    4d54:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_HANDLE;
    4d56:	8e ef       	ldi	r24, 0xFE	; 254
    4d58:	0e c0       	rjmp	.+28     	; 0x4d76 <hal_dmaEnableChannel+0x4e>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    4d5a:	ea 81       	ldd	r30, Y+2	; 0x02
    4d5c:	fb 81       	ldd	r31, Y+3	; 0x03

      /*---------------------------------------------------------------------*
       * Enable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA |= DMA_CH_ENABLE_bm;
    4d5e:	01 90       	ld	r0, Z+
    4d60:	f0 81       	ld	r31, Z
    4d62:	e0 2d       	mov	r30, r0
    4d64:	03 80       	ldd	r0, Z+3	; 0x03
    4d66:	f4 81       	ldd	r31, Z+4	; 0x04
    4d68:	e0 2d       	mov	r30, r0
    4d6a:	80 81       	ld	r24, Z
    4d6c:	80 68       	ori	r24, 0x80	; 128
    4d6e:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	8f bf       	out	0x3f, r24	; 63

   return DMA_PASSED;
    4d74:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_dmaEnableChannel*/
    4d76:	23 96       	adiw	r28, 0x03	; 3
    4d78:	cd bf       	out	0x3d, r28	; 61
    4d7a:	de bf       	out	0x3e, r29	; 62
    4d7c:	df 91       	pop	r29
    4d7e:	cf 91       	pop	r28
    4d80:	08 95       	ret

00004d82 <hal_dmaDisableChannel>:

t_dmaError hal_dmaDisableChannel( t_DMAHNDL t_handle)
{
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	00 d0       	rcall	.+0      	; 0x4d88 <hal_dmaDisableChannel+0x6>
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
    4d8c:	8a 83       	std	Y+2, r24	; 0x02
    4d8e:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4d90:	8f b7       	in	r24, 0x3f	; 63
    4d92:	89 83       	std	Y+1, r24	; 0x01
    4d94:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4d96:	ea 81       	ldd	r30, Y+2	; 0x02
    4d98:	fb 81       	ldd	r31, Y+3	; 0x03
    4d9a:	80 91 95 20 	lds	r24, 0x2095
    4d9e:	90 91 96 20 	lds	r25, 0x2096
    4da2:	24 81       	ldd	r18, Z+4	; 0x04
    4da4:	35 81       	ldd	r19, Z+5	; 0x05
    4da6:	28 17       	cp	r18, r24
    4da8:	39 07       	cpc	r19, r25
    4daa:	21 f0       	breq	.+8      	; 0x4db4 <hal_dmaDisableChannel+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	8f bf       	out	0x3f, r24	; 63
      return DMA_INVALID_HANDLE;
    4db0:	8e ef       	ldi	r24, 0xFE	; 254
    4db2:	0e c0       	rjmp	.+28     	; 0x4dd0 <hal_dmaDisableChannel+0x4e>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    4db4:	ea 81       	ldd	r30, Y+2	; 0x02
    4db6:	fb 81       	ldd	r31, Y+3	; 0x03

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    4db8:	01 90       	ld	r0, Z+
    4dba:	f0 81       	ld	r31, Z
    4dbc:	e0 2d       	mov	r30, r0
    4dbe:	03 80       	ldd	r0, Z+3	; 0x03
    4dc0:	f4 81       	ldd	r31, Z+4	; 0x04
    4dc2:	e0 2d       	mov	r30, r0
    4dc4:	80 81       	ld	r24, Z
    4dc6:	8f 77       	andi	r24, 0x7F	; 127
    4dc8:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    4dca:	89 81       	ldd	r24, Y+1	; 0x01
    4dcc:	8f bf       	out	0x3f, r24	; 63

   return DMA_PASSED;
    4dce:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_dmaDisableChannel*/
    4dd0:	23 96       	adiw	r28, 0x03	; 3
    4dd2:	cd bf       	out	0x3d, r28	; 61
    4dd4:	de bf       	out	0x3e, r29	; 62
    4dd6:	df 91       	pop	r29
    4dd8:	cf 91       	pop	r28
    4dda:	08 95       	ret

00004ddc <findGpioIntElement>:
   }

}/*End ISR( PORTR_INT1_vect)*/

static t_gpioIntHndl *findGpioIntElement( t_portIntId t_id)
{
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	0f 92       	push	r0
    4de2:	0f 92       	push	r0
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the GPIO interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_gpioHndlList, s_count)
    4de8:	e0 91 a4 20 	lds	r30, 0x20A4
    4dec:	f0 91 a5 20 	lds	r31, 0x20A5
    4df0:	22 81       	ldd	r18, Z+2	; 0x02
    4df2:	33 81       	ldd	r19, Z+3	; 0x03
    4df4:	e0 91 a4 20 	lds	r30, 0x20A4
    4df8:	f0 91 a5 20 	lds	r31, 0x20A5
    4dfc:	0c c0       	rjmp	.+24     	; 0x4e16 <findGpioIntElement+0x3a>
   {
      pt_element = (t_gpioIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    4dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    4e00:	fa 81       	ldd	r31, Y+2	; 0x02
    4e02:	01 90       	ld	r0, Z+
    4e04:	f0 81       	ld	r31, Z
    4e06:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    4e08:	90 81       	ld	r25, Z
    4e0a:	98 17       	cp	r25, r24
    4e0c:	69 f0       	breq	.+26     	; 0x4e28 <findGpioIntElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the GPIO interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_gpioHndlList, s_count)
    4e0e:	21 50       	subi	r18, 0x01	; 1
    4e10:	30 40       	sbci	r19, 0x00	; 0
    4e12:	e9 81       	ldd	r30, Y+1	; 0x01
    4e14:	fa 81       	ldd	r31, Y+2	; 0x02
    4e16:	40 85       	ldd	r20, Z+8	; 0x08
    4e18:	51 85       	ldd	r21, Z+9	; 0x09
    4e1a:	49 83       	std	Y+1, r20	; 0x01
    4e1c:	5a 83       	std	Y+2, r21	; 0x02
    4e1e:	12 16       	cp	r1, r18
    4e20:	13 06       	cpc	r1, r19
    4e22:	6c f3       	brlt	.-38     	; 0x4dfe <findGpioIntElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open GPIO
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;
    4e24:	e0 e0       	ldi	r30, 0x00	; 0
    4e26:	f0 e0       	ldi	r31, 0x00	; 0

}/*End findGpioIntElement*/
    4e28:	cf 01       	movw	r24, r30
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	08 95       	ret

00004e34 <createIntHandle>:
 * This function is called the very first time a user-space application
 * requests an interrupt for a given pin on a port. The driver only allows
 * two pins mapped to interrupts for the given port.
 *---------------------------------------------------------------------------*/
static t_LINKHNDL createIntHandle( void)
{
    4e34:	cf 93       	push	r28
    4e36:	df 93       	push	r29
    4e38:	0f 92       	push	r0
    4e3a:	0f 92       	push	r0
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA interrupt information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_gpioIntHndl));
    4e40:	84 e0       	ldi	r24, 0x04	; 4
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    4e48:	89 83       	std	Y+1, r24	; 0x01
    4e4a:	9a 83       	std	Y+2, r25	; 0x02

   if( t_linkHndl < 0)
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	97 fd       	sbrc	r25, 7
    4e52:	0c c0       	rjmp	.+24     	; 0x4e6c <createIntHandle+0x38>
   }

   /*------------------------------------------------------------------------*
    * Add the GPIO interrupt link onto the list open GPIO interrupts.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_gpioHndlList,
    4e54:	80 91 a4 20 	lds	r24, 0x20A4
    4e58:	90 91 a5 20 	lds	r25, 0x20A5
    4e5c:	69 81       	ldd	r22, Y+1	; 0x01
    4e5e:	7a 81       	ldd	r23, Y+2	; 0x02
    4e60:	41 e0       	ldi	r20, 0x01	; 1
    4e62:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6a:	02 c0       	rjmp	.+4      	; 0x4e70 <createIntHandle+0x3c>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_gpioIntHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)GPIO_OUT_OF_HEAP;
    4e6c:	8e ef       	ldi	r24, 0xFE	; 254
    4e6e:	9f ef       	ldi	r25, 0xFF	; 255
                           t_linkHndl,
                           true);

   return t_linkHndl;

}/*End createIntHandle*/
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	df 91       	pop	r29
    4e76:	cf 91       	pop	r28
    4e78:	08 95       	ret

00004e7a <confInt>:

static t_LINKHNDL confInt( PORT_t *pt_port,
                           t_intConf *pt_intConf,
                           t_portIntId t_int0,
                           t_portIntId t_int1)
{
    4e7a:	cf 92       	push	r12
    4e7c:	df 92       	push	r13
    4e7e:	ef 92       	push	r14
    4e80:	ff 92       	push	r15
    4e82:	0f 93       	push	r16
    4e84:	1f 93       	push	r17
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
    4e8a:	0f 92       	push	r0
    4e8c:	0f 92       	push	r0
    4e8e:	cd b7       	in	r28, 0x3d	; 61
    4e90:	de b7       	in	r29, 0x3e	; 62
    4e92:	8c 01       	movw	r16, r24
    4e94:	7b 01       	movw	r14, r22
    4e96:	c4 2e       	mov	r12, r20
    4e98:	d2 2e       	mov	r13, r18

   /*------------------------------------------------------------------------*
    * Make sure the user-space application is attempting to attach one pin
    * and one pin ONLY to one of the two port interrupts.
    *------------------------------------------------------------------------*/
   switch( pt_intConf->c_pin)
    4e9a:	db 01       	movw	r26, r22
    4e9c:	8c 91       	ld	r24, X
    4e9e:	88 30       	cpi	r24, 0x08	; 8
    4ea0:	c1 f0       	breq	.+48     	; 0x4ed2 <confInt+0x58>
    4ea2:	89 30       	cpi	r24, 0x09	; 9
    4ea4:	48 f4       	brcc	.+18     	; 0x4eb8 <confInt+0x3e>
    4ea6:	81 30       	cpi	r24, 0x01	; 1
    4ea8:	08 f4       	brcc	.+2      	; 0x4eac <confInt+0x32>
    4eaa:	26 c1       	rjmp	.+588    	; 0x50f8 <confInt+0x27e>
    4eac:	83 30       	cpi	r24, 0x03	; 3
    4eae:	88 f0       	brcs	.+34     	; 0x4ed2 <confInt+0x58>
    4eb0:	84 30       	cpi	r24, 0x04	; 4
    4eb2:	09 f0       	breq	.+2      	; 0x4eb6 <confInt+0x3c>
    4eb4:	21 c1       	rjmp	.+578    	; 0x50f8 <confInt+0x27e>
    4eb6:	0d c0       	rjmp	.+26     	; 0x4ed2 <confInt+0x58>
    4eb8:	80 32       	cpi	r24, 0x20	; 32
    4eba:	59 f0       	breq	.+22     	; 0x4ed2 <confInt+0x58>
    4ebc:	81 32       	cpi	r24, 0x21	; 33
    4ebe:	20 f4       	brcc	.+8      	; 0x4ec8 <confInt+0x4e>
    4ec0:	80 31       	cpi	r24, 0x10	; 16
    4ec2:	09 f0       	breq	.+2      	; 0x4ec6 <confInt+0x4c>
    4ec4:	19 c1       	rjmp	.+562    	; 0x50f8 <confInt+0x27e>
    4ec6:	05 c0       	rjmp	.+10     	; 0x4ed2 <confInt+0x58>
    4ec8:	80 34       	cpi	r24, 0x40	; 64
    4eca:	19 f0       	breq	.+6      	; 0x4ed2 <confInt+0x58>
    4ecc:	80 38       	cpi	r24, 0x80	; 128
    4ece:	09 f0       	breq	.+2      	; 0x4ed2 <confInt+0x58>
    4ed0:	13 c1       	rjmp	.+550    	; 0x50f8 <confInt+0x27e>
   }/*End switch( pt_intConf->c_pin)*/

   /*------------------------------------------------------------------------*
    * Make sure the requested pin is configured as an input
    *------------------------------------------------------------------------*/
   if( pt_port->DIR & pt_intConf->c_pin)
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	90 81       	ld	r25, Z
    4ed6:	98 23       	and	r25, r24
    4ed8:	09 f0       	breq	.+2      	; 0x4edc <confInt+0x62>
    4eda:	11 c1       	rjmp	.+546    	; 0x50fe <confInt+0x284>
   else
   {
      /*---------------------------------------------------------------------*
       * Search the list and see if there is an active handle for interrupt 0.
       *---------------------------------------------------------------------*/
      pt_int0Hndl = findGpioIntElement( t_int0);
    4edc:	8c 2d       	mov	r24, r12
    4ede:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>

      if( pt_int0Hndl == NULL) /*No Active handle*/
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <confInt+0x6e>
    4ee6:	80 c0       	rjmp	.+256    	; 0x4fe8 <confInt+0x16e>
      {

         /*------------------------------------------------------------------*
          * Create the new interrupt handle.
          *------------------------------------------------------------------*/
         t_linkHndl = createIntHandle();
    4ee8:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <createIntHandle>
    4eec:	89 83       	std	Y+1, r24	; 0x01
    4eee:	9a 83       	std	Y+2, r25	; 0x02

         if( t_linkHndl < 0)
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef4:	97 fd       	sbrc	r25, 7
    4ef6:	09 c1       	rjmp	.+530    	; 0x510a <confInt+0x290>
            /*----------------------------------------------------------------*
             * Get a ptr to the link's element- which is the area where the
             * GPIO interrupt information is being stored.
             *----------------------------------------------------------------*/
            pt_int0Hndl = (t_gpioIntHndl *)
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    4ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    4efa:	fa 81       	ldd	r31, Y+2	; 0x02
         {
            /*----------------------------------------------------------------*
             * Get a ptr to the link's element- which is the area where the
             * GPIO interrupt information is being stored.
             *----------------------------------------------------------------*/
            pt_int0Hndl = (t_gpioIntHndl *)
    4efc:	01 90       	ld	r0, Z+
    4efe:	f0 81       	ld	r31, Z
    4f00:	e0 2d       	mov	r30, r0
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
            pt_int0Hndl->t_id      = t_int0;
    4f02:	c0 82       	st	Z, r12
            pt_int0Hndl->c_pin     = pt_intConf->c_pin;
    4f04:	d7 01       	movw	r26, r14
    4f06:	8c 91       	ld	r24, X
    4f08:	81 83       	std	Z+1, r24	; 0x01
            pt_int0Hndl->pf_funPtr = pt_intConf->pf_funPtr;
    4f0a:	12 96       	adiw	r26, 0x02	; 2
    4f0c:	8d 91       	ld	r24, X+
    4f0e:	9c 91       	ld	r25, X
    4f10:	13 97       	sbiw	r26, 0x03	; 3
    4f12:	82 83       	std	Z+2, r24	; 0x02
    4f14:	93 83       	std	Z+3, r25	; 0x03
         }

         switch( pt_intConf->c_pin)
    4f16:	8c 91       	ld	r24, X
    4f18:	88 30       	cpi	r24, 0x08	; 8
    4f1a:	99 f1       	breq	.+102    	; 0x4f82 <confInt+0x108>
    4f1c:	89 30       	cpi	r24, 0x09	; 9
    4f1e:	40 f4       	brcc	.+16     	; 0x4f30 <confInt+0xb6>
    4f20:	82 30       	cpi	r24, 0x02	; 2
    4f22:	e9 f0       	breq	.+58     	; 0x4f5e <confInt+0xe4>
    4f24:	84 30       	cpi	r24, 0x04	; 4
    4f26:	21 f1       	breq	.+72     	; 0x4f70 <confInt+0xf6>
    4f28:	81 30       	cpi	r24, 0x01	; 1
    4f2a:	09 f0       	breq	.+2      	; 0x4f2e <confInt+0xb4>
    4f2c:	55 c0       	rjmp	.+170    	; 0x4fd8 <confInt+0x15e>
    4f2e:	0e c0       	rjmp	.+28     	; 0x4f4c <confInt+0xd2>
    4f30:	80 32       	cpi	r24, 0x20	; 32
    4f32:	c9 f1       	breq	.+114    	; 0x4fa6 <confInt+0x12c>
    4f34:	81 32       	cpi	r24, 0x21	; 33
    4f36:	20 f4       	brcc	.+8      	; 0x4f40 <confInt+0xc6>
    4f38:	80 31       	cpi	r24, 0x10	; 16
    4f3a:	09 f0       	breq	.+2      	; 0x4f3e <confInt+0xc4>
    4f3c:	4d c0       	rjmp	.+154    	; 0x4fd8 <confInt+0x15e>
    4f3e:	2a c0       	rjmp	.+84     	; 0x4f94 <confInt+0x11a>
    4f40:	80 34       	cpi	r24, 0x40	; 64
    4f42:	d1 f1       	breq	.+116    	; 0x4fb8 <confInt+0x13e>
    4f44:	80 38       	cpi	r24, 0x80	; 128
    4f46:	09 f0       	breq	.+2      	; 0x4f4a <confInt+0xd0>
    4f48:	47 c0       	rjmp	.+142    	; 0x4fd8 <confInt+0x15e>
    4f4a:	3f c0       	rjmp	.+126    	; 0x4fca <confInt+0x150>
         {
            case PIN_0:
               pt_port->PIN0CTRL |= pt_intConf->t_inSense;
    4f4c:	f8 01       	movw	r30, r16
    4f4e:	80 89       	ldd	r24, Z+16	; 0x10
    4f50:	d7 01       	movw	r26, r14
    4f52:	11 96       	adiw	r26, 0x01	; 1
    4f54:	9c 91       	ld	r25, X
    4f56:	11 97       	sbiw	r26, 0x01	; 1
    4f58:	89 2b       	or	r24, r25
    4f5a:	80 8b       	std	Z+16, r24	; 0x10
            break;
    4f5c:	3d c0       	rjmp	.+122    	; 0x4fd8 <confInt+0x15e>

            case PIN_1:
               pt_port->PIN1CTRL |= pt_intConf->t_inSense;
    4f5e:	f8 01       	movw	r30, r16
    4f60:	81 89       	ldd	r24, Z+17	; 0x11
    4f62:	d7 01       	movw	r26, r14
    4f64:	11 96       	adiw	r26, 0x01	; 1
    4f66:	9c 91       	ld	r25, X
    4f68:	11 97       	sbiw	r26, 0x01	; 1
    4f6a:	89 2b       	or	r24, r25
    4f6c:	81 8b       	std	Z+17, r24	; 0x11
            break;
    4f6e:	34 c0       	rjmp	.+104    	; 0x4fd8 <confInt+0x15e>

            case PIN_2:
               pt_port->PIN2CTRL |= pt_intConf->t_inSense;
    4f70:	f8 01       	movw	r30, r16
    4f72:	82 89       	ldd	r24, Z+18	; 0x12
    4f74:	d7 01       	movw	r26, r14
    4f76:	11 96       	adiw	r26, 0x01	; 1
    4f78:	9c 91       	ld	r25, X
    4f7a:	11 97       	sbiw	r26, 0x01	; 1
    4f7c:	89 2b       	or	r24, r25
    4f7e:	82 8b       	std	Z+18, r24	; 0x12
            break;
    4f80:	2b c0       	rjmp	.+86     	; 0x4fd8 <confInt+0x15e>

            case PIN_3:
               pt_port->PIN3CTRL |= pt_intConf->t_inSense;
    4f82:	f8 01       	movw	r30, r16
    4f84:	83 89       	ldd	r24, Z+19	; 0x13
    4f86:	d7 01       	movw	r26, r14
    4f88:	11 96       	adiw	r26, 0x01	; 1
    4f8a:	9c 91       	ld	r25, X
    4f8c:	11 97       	sbiw	r26, 0x01	; 1
    4f8e:	89 2b       	or	r24, r25
    4f90:	83 8b       	std	Z+19, r24	; 0x13
            break;
    4f92:	22 c0       	rjmp	.+68     	; 0x4fd8 <confInt+0x15e>

            case PIN_4:
               pt_port->PIN4CTRL |= pt_intConf->t_inSense;
    4f94:	f8 01       	movw	r30, r16
    4f96:	84 89       	ldd	r24, Z+20	; 0x14
    4f98:	d7 01       	movw	r26, r14
    4f9a:	11 96       	adiw	r26, 0x01	; 1
    4f9c:	9c 91       	ld	r25, X
    4f9e:	11 97       	sbiw	r26, 0x01	; 1
    4fa0:	89 2b       	or	r24, r25
    4fa2:	84 8b       	std	Z+20, r24	; 0x14
            break;
    4fa4:	19 c0       	rjmp	.+50     	; 0x4fd8 <confInt+0x15e>

            case PIN_5:
               pt_port->PIN5CTRL |= pt_intConf->t_inSense;
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	85 89       	ldd	r24, Z+21	; 0x15
    4faa:	d7 01       	movw	r26, r14
    4fac:	11 96       	adiw	r26, 0x01	; 1
    4fae:	9c 91       	ld	r25, X
    4fb0:	11 97       	sbiw	r26, 0x01	; 1
    4fb2:	89 2b       	or	r24, r25
    4fb4:	85 8b       	std	Z+21, r24	; 0x15
            break;
    4fb6:	10 c0       	rjmp	.+32     	; 0x4fd8 <confInt+0x15e>

            case PIN_6:
               pt_port->PIN6CTRL |= pt_intConf->t_inSense;
    4fb8:	f8 01       	movw	r30, r16
    4fba:	86 89       	ldd	r24, Z+22	; 0x16
    4fbc:	d7 01       	movw	r26, r14
    4fbe:	11 96       	adiw	r26, 0x01	; 1
    4fc0:	9c 91       	ld	r25, X
    4fc2:	11 97       	sbiw	r26, 0x01	; 1
    4fc4:	89 2b       	or	r24, r25
    4fc6:	86 8b       	std	Z+22, r24	; 0x16
            break;
    4fc8:	07 c0       	rjmp	.+14     	; 0x4fd8 <confInt+0x15e>

            case PIN_7:
               pt_port->PIN7CTRL |= pt_intConf->t_inSense;
    4fca:	f8 01       	movw	r30, r16
    4fcc:	87 89       	ldd	r24, Z+23	; 0x17
    4fce:	d7 01       	movw	r26, r14
    4fd0:	11 96       	adiw	r26, 0x01	; 1
    4fd2:	9c 91       	ld	r25, X
    4fd4:	89 2b       	or	r24, r25
    4fd6:	87 8b       	std	Z+23, r24	; 0x17
         }/*End switch( pt_intConf->c_pin)*/

         /*------------------------------------------------------------------*
          * This value must match that set in the PMIC control register
          *------------------------------------------------------------------*/
         pt_port->INTCTRL  |= PORT_INT0LVL_HI_gc;
    4fd8:	f8 01       	movw	r30, r16
    4fda:	81 85       	ldd	r24, Z+9	; 0x09
    4fdc:	83 60       	ori	r24, 0x03	; 3
    4fde:	81 87       	std	Z+9, r24	; 0x09
         pt_port->INT0MASK = pt_intConf->c_pin;
    4fe0:	d7 01       	movw	r26, r14
    4fe2:	8c 91       	ld	r24, X
    4fe4:	82 87       	std	Z+10, r24	; 0x0a
    4fe6:	85 c0       	rjmp	.+266    	; 0x50f2 <confInt+0x278>

         /*---------------------------------------------------------------*
          * Search the list and see if there is an active handle for
          * interrupt 1.
          *---------------------------------------------------------------*/
         pt_int1Hndl = findGpioIntElement( t_int1);
    4fe8:	8d 2d       	mov	r24, r13
    4fea:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>

         if( pt_int1Hndl == NULL) /*No Active handle*/
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <confInt+0x17a>
    4ff2:	88 c0       	rjmp	.+272    	; 0x5104 <confInt+0x28a>
         {

            /*---------------------------------------------------------------*
             * Create the new interrupt handle.
             *---------------------------------------------------------------*/
            t_linkHndl = createIntHandle();
    4ff4:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <createIntHandle>
    4ff8:	89 83       	std	Y+1, r24	; 0x01
    4ffa:	9a 83       	std	Y+2, r25	; 0x02

            if( t_linkHndl < 0)
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    5000:	97 fd       	sbrc	r25, 7
    5002:	83 c0       	rjmp	.+262    	; 0x510a <confInt+0x290>
               /*-------------------------------------------------------------*
                * Get a ptr to the link's element- which is the area where the
                * GPIO interrupt information is being stored.
                *-------------------------------------------------------------*/
               pt_int1Hndl = (t_gpioIntHndl *)
               UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    5004:	e9 81       	ldd	r30, Y+1	; 0x01
    5006:	fa 81       	ldd	r31, Y+2	; 0x02
            {
               /*-------------------------------------------------------------*
                * Get a ptr to the link's element- which is the area where the
                * GPIO interrupt information is being stored.
                *-------------------------------------------------------------*/
               pt_int1Hndl = (t_gpioIntHndl *)
    5008:	01 90       	ld	r0, Z+
    500a:	f0 81       	ld	r31, Z
    500c:	e0 2d       	mov	r30, r0
               UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
               pt_int1Hndl->t_id      = t_int1;
    500e:	d0 82       	st	Z, r13
               pt_int1Hndl->c_pin     = pt_intConf->c_pin;
    5010:	d7 01       	movw	r26, r14
    5012:	8c 91       	ld	r24, X
    5014:	81 83       	std	Z+1, r24	; 0x01
               pt_int1Hndl->pf_funPtr = pt_intConf->pf_funPtr;
    5016:	12 96       	adiw	r26, 0x02	; 2
    5018:	8d 91       	ld	r24, X+
    501a:	9c 91       	ld	r25, X
    501c:	13 97       	sbiw	r26, 0x03	; 3
    501e:	82 83       	std	Z+2, r24	; 0x02
    5020:	93 83       	std	Z+3, r25	; 0x03
            }

            switch( pt_intConf->c_pin)
    5022:	8c 91       	ld	r24, X
    5024:	88 30       	cpi	r24, 0x08	; 8
    5026:	99 f1       	breq	.+102    	; 0x508e <confInt+0x214>
    5028:	89 30       	cpi	r24, 0x09	; 9
    502a:	40 f4       	brcc	.+16     	; 0x503c <confInt+0x1c2>
    502c:	82 30       	cpi	r24, 0x02	; 2
    502e:	e9 f0       	breq	.+58     	; 0x506a <confInt+0x1f0>
    5030:	84 30       	cpi	r24, 0x04	; 4
    5032:	21 f1       	breq	.+72     	; 0x507c <confInt+0x202>
    5034:	81 30       	cpi	r24, 0x01	; 1
    5036:	09 f0       	breq	.+2      	; 0x503a <confInt+0x1c0>
    5038:	55 c0       	rjmp	.+170    	; 0x50e4 <confInt+0x26a>
    503a:	0e c0       	rjmp	.+28     	; 0x5058 <confInt+0x1de>
    503c:	80 32       	cpi	r24, 0x20	; 32
    503e:	c9 f1       	breq	.+114    	; 0x50b2 <confInt+0x238>
    5040:	81 32       	cpi	r24, 0x21	; 33
    5042:	20 f4       	brcc	.+8      	; 0x504c <confInt+0x1d2>
    5044:	80 31       	cpi	r24, 0x10	; 16
    5046:	09 f0       	breq	.+2      	; 0x504a <confInt+0x1d0>
    5048:	4d c0       	rjmp	.+154    	; 0x50e4 <confInt+0x26a>
    504a:	2a c0       	rjmp	.+84     	; 0x50a0 <confInt+0x226>
    504c:	80 34       	cpi	r24, 0x40	; 64
    504e:	d1 f1       	breq	.+116    	; 0x50c4 <confInt+0x24a>
    5050:	80 38       	cpi	r24, 0x80	; 128
    5052:	09 f0       	breq	.+2      	; 0x5056 <confInt+0x1dc>
    5054:	47 c0       	rjmp	.+142    	; 0x50e4 <confInt+0x26a>
    5056:	3f c0       	rjmp	.+126    	; 0x50d6 <confInt+0x25c>
            {
               case PIN_0:
                  pt_port->PIN0CTRL |= pt_intConf->t_inSense;
    5058:	f8 01       	movw	r30, r16
    505a:	80 89       	ldd	r24, Z+16	; 0x10
    505c:	d7 01       	movw	r26, r14
    505e:	11 96       	adiw	r26, 0x01	; 1
    5060:	9c 91       	ld	r25, X
    5062:	11 97       	sbiw	r26, 0x01	; 1
    5064:	89 2b       	or	r24, r25
    5066:	80 8b       	std	Z+16, r24	; 0x10
               break;
    5068:	3d c0       	rjmp	.+122    	; 0x50e4 <confInt+0x26a>

               case PIN_1:
                  pt_port->PIN1CTRL |= pt_intConf->t_inSense;
    506a:	f8 01       	movw	r30, r16
    506c:	81 89       	ldd	r24, Z+17	; 0x11
    506e:	d7 01       	movw	r26, r14
    5070:	11 96       	adiw	r26, 0x01	; 1
    5072:	9c 91       	ld	r25, X
    5074:	11 97       	sbiw	r26, 0x01	; 1
    5076:	89 2b       	or	r24, r25
    5078:	81 8b       	std	Z+17, r24	; 0x11
               break;
    507a:	34 c0       	rjmp	.+104    	; 0x50e4 <confInt+0x26a>

               case PIN_2:
                  pt_port->PIN2CTRL |= pt_intConf->t_inSense;
    507c:	f8 01       	movw	r30, r16
    507e:	82 89       	ldd	r24, Z+18	; 0x12
    5080:	d7 01       	movw	r26, r14
    5082:	11 96       	adiw	r26, 0x01	; 1
    5084:	9c 91       	ld	r25, X
    5086:	11 97       	sbiw	r26, 0x01	; 1
    5088:	89 2b       	or	r24, r25
    508a:	82 8b       	std	Z+18, r24	; 0x12
               break;
    508c:	2b c0       	rjmp	.+86     	; 0x50e4 <confInt+0x26a>

               case PIN_3:
                  pt_port->PIN3CTRL |= pt_intConf->t_inSense;
    508e:	f8 01       	movw	r30, r16
    5090:	83 89       	ldd	r24, Z+19	; 0x13
    5092:	d7 01       	movw	r26, r14
    5094:	11 96       	adiw	r26, 0x01	; 1
    5096:	9c 91       	ld	r25, X
    5098:	11 97       	sbiw	r26, 0x01	; 1
    509a:	89 2b       	or	r24, r25
    509c:	83 8b       	std	Z+19, r24	; 0x13
               break;
    509e:	22 c0       	rjmp	.+68     	; 0x50e4 <confInt+0x26a>

               case PIN_4:
                  pt_port->PIN4CTRL |= pt_intConf->t_inSense;
    50a0:	f8 01       	movw	r30, r16
    50a2:	84 89       	ldd	r24, Z+20	; 0x14
    50a4:	d7 01       	movw	r26, r14
    50a6:	11 96       	adiw	r26, 0x01	; 1
    50a8:	9c 91       	ld	r25, X
    50aa:	11 97       	sbiw	r26, 0x01	; 1
    50ac:	89 2b       	or	r24, r25
    50ae:	84 8b       	std	Z+20, r24	; 0x14
               break;
    50b0:	19 c0       	rjmp	.+50     	; 0x50e4 <confInt+0x26a>

               case PIN_5:
                  pt_port->PIN5CTRL |= pt_intConf->t_inSense;
    50b2:	f8 01       	movw	r30, r16
    50b4:	85 89       	ldd	r24, Z+21	; 0x15
    50b6:	d7 01       	movw	r26, r14
    50b8:	11 96       	adiw	r26, 0x01	; 1
    50ba:	9c 91       	ld	r25, X
    50bc:	11 97       	sbiw	r26, 0x01	; 1
    50be:	89 2b       	or	r24, r25
    50c0:	85 8b       	std	Z+21, r24	; 0x15
               break;
    50c2:	10 c0       	rjmp	.+32     	; 0x50e4 <confInt+0x26a>

               case PIN_6:
                  pt_port->PIN6CTRL |= pt_intConf->t_inSense;
    50c4:	f8 01       	movw	r30, r16
    50c6:	86 89       	ldd	r24, Z+22	; 0x16
    50c8:	d7 01       	movw	r26, r14
    50ca:	11 96       	adiw	r26, 0x01	; 1
    50cc:	9c 91       	ld	r25, X
    50ce:	11 97       	sbiw	r26, 0x01	; 1
    50d0:	89 2b       	or	r24, r25
    50d2:	86 8b       	std	Z+22, r24	; 0x16
               break;
    50d4:	07 c0       	rjmp	.+14     	; 0x50e4 <confInt+0x26a>

               case PIN_7:
                  pt_port->PIN7CTRL |= pt_intConf->t_inSense;
    50d6:	f8 01       	movw	r30, r16
    50d8:	87 89       	ldd	r24, Z+23	; 0x17
    50da:	d7 01       	movw	r26, r14
    50dc:	11 96       	adiw	r26, 0x01	; 1
    50de:	9c 91       	ld	r25, X
    50e0:	89 2b       	or	r24, r25
    50e2:	87 8b       	std	Z+23, r24	; 0x17
            }/*End switch( pt_intConf->c_pin)*/

            /*---------------------------------------------------------------*
             * This value must match that set in the PMIC control register
             *---------------------------------------------------------------*/
            pt_port->INTCTRL |= PORT_INT1LVL_HI_gc;
    50e4:	f8 01       	movw	r30, r16
    50e6:	81 85       	ldd	r24, Z+9	; 0x09
    50e8:	8c 60       	ori	r24, 0x0C	; 12
    50ea:	81 87       	std	Z+9, r24	; 0x09
            pt_port->INT1MASK = pt_intConf->c_pin;
    50ec:	d7 01       	movw	r26, r14
    50ee:	8c 91       	ld	r24, X
    50f0:	83 87       	std	Z+11, r24	; 0x0b
         }
      }

   }/*End if( t_err == GPIO_PASSED)*/

   return t_linkHndl;
    50f2:	89 81       	ldd	r24, Y+1	; 0x01
    50f4:	9a 81       	ldd	r25, Y+2	; 0x02
    50f6:	0b c0       	rjmp	.+22     	; 0x510e <confInt+0x294>
      case PIN_7:
      break;

      default:

         return (t_LINKHNDL)GPIO_INVALID_PIN; /*Illegal pin configuration*/
    50f8:	8f ef       	ldi	r24, 0xFF	; 255
    50fa:	9f ef       	ldi	r25, 0xFF	; 255
    50fc:	08 c0       	rjmp	.+16     	; 0x510e <confInt+0x294>

   /*------------------------------------------------------------------------*
    * Make sure the requested pin is configured as an input
    *------------------------------------------------------------------------*/
   if( pt_port->DIR & pt_intConf->c_pin)
      return (t_LINKHNDL)GPIO_PIN_IS_OUTPUT;
    50fe:	8a ef       	ldi	r24, 0xFA	; 250
    5100:	9f ef       	ldi	r25, 0xFF	; 255
    5102:	05 c0       	rjmp	.+10     	; 0x510e <confInt+0x294>
         {
            /*---------------------------------------------------------------*
             * Handles have already been created for int 0 and int 1 on this
             * port.
             *---------------------------------------------------------------*/
            return (t_LINKHNDL)GPIO_INTS_MAPPED;
    5104:	89 ef       	ldi	r24, 0xF9	; 249
    5106:	9f ef       	ldi	r25, 0xFF	; 255
    5108:	02 c0       	rjmp	.+4      	; 0x510e <confInt+0x294>
             * Create the new interrupt handle.
             *---------------------------------------------------------------*/
            t_linkHndl = createIntHandle();

            if( t_linkHndl < 0)
               return (t_LINKHNDL)GPIO_OUT_OF_HEAP;
    510a:	8e ef       	ldi	r24, 0xFE	; 254
    510c:	9f ef       	ldi	r25, 0xFF	; 255

   }/*End if( t_err == GPIO_PASSED)*/

   return t_linkHndl;

}/*End confInt*/
    510e:	0f 90       	pop	r0
    5110:	0f 90       	pop	r0
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	ff 90       	pop	r15
    511c:	ef 90       	pop	r14
    511e:	df 90       	pop	r13
    5120:	cf 90       	pop	r12
    5122:	08 95       	ret

00005124 <confPort>:

}/*End createIntHandle*/

static void confPort( PORT_t *pt_port,
                      t_gpioConf *pt_conf)
{
    5124:	fc 01       	movw	r30, r24
    5126:	db 01       	movw	r26, r22

   /*------------------------------------------------------------------------*
    * Set the output configuration for the given pins
    *------------------------------------------------------------------------*/
   if( pt_conf->c_outputMask > 0) /*Are there any output pins?*/
    5128:	11 96       	adiw	r26, 0x01	; 1
    512a:	8c 91       	ld	r24, X
    512c:	11 97       	sbiw	r26, 0x01	; 1
    512e:	88 23       	and	r24, r24
    5130:	09 f1       	breq	.+66     	; 0x5174 <confPort+0x50>
   {

      /*---------------------------------------------------------------------*
       * Set the output pins to the required initial value
       *---------------------------------------------------------------------*/
      if( pt_conf->b_setOutputLow)
    5132:	12 96       	adiw	r26, 0x02	; 2
    5134:	9c 91       	ld	r25, X
    5136:	12 97       	sbiw	r26, 0x02	; 2
    5138:	99 23       	and	r25, r25
    513a:	11 f0       	breq	.+4      	; 0x5140 <confPort+0x1c>
      {
         pt_port->OUTCLR = pt_conf->c_outputMask;
    513c:	86 83       	std	Z+6, r24	; 0x06
    513e:	01 c0       	rjmp	.+2      	; 0x5142 <confPort+0x1e>
      }
      else
         pt_port->OUTSET = pt_conf->c_outputMask;
    5140:	85 83       	std	Z+5, r24	; 0x05

      pt_port->DIRSET = pt_conf->c_outputMask;
    5142:	11 96       	adiw	r26, 0x01	; 1
    5144:	8c 91       	ld	r24, X
    5146:	11 97       	sbiw	r26, 0x01	; 1
    5148:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Use the pin mask register as a means of setting a large group
       * of pins to the same value.
       *---------------------------------------------------------------------*/
      PORTCFG.MPCMASK = pt_conf->c_outputMask;
    514a:	11 96       	adiw	r26, 0x01	; 1
    514c:	8c 91       	ld	r24, X
    514e:	11 97       	sbiw	r26, 0x01	; 1
    5150:	80 93 b0 00 	sts	0x00B0, r24
      /*---------------------------------------------------------------------*
       * Writing to any one of the pins in the port configuration register
       * will trigger all the port configuration registers to be written with
       * the value contained in the pin mask register.
       *---------------------------------------------------------------------*/
      switch( pt_conf->t_outConf)
    5154:	14 96       	adiw	r26, 0x04	; 4
    5156:	8c 91       	ld	r24, X
    5158:	14 97       	sbiw	r26, 0x04	; 4
    515a:	81 30       	cpi	r24, 0x01	; 1
    515c:	29 f0       	breq	.+10     	; 0x5168 <confPort+0x44>
    515e:	81 30       	cpi	r24, 0x01	; 1
    5160:	40 f0       	brcs	.+16     	; 0x5172 <confPort+0x4e>
    5162:	82 30       	cpi	r24, 0x02	; 2
    5164:	31 f4       	brne	.+12     	; 0x5172 <confPort+0x4e>
    5166:	02 c0       	rjmp	.+4      	; 0x516c <confPort+0x48>
         case TOTEM:
            pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
         break; /*End case TOTEM:*/

         case WIREDOR:
            pt_port->PIN0CTRL = PORT_OPC_WIREDOR_gc;
    5168:	80 e2       	ldi	r24, 0x20	; 32
    516a:	01 c0       	rjmp	.+2      	; 0x516e <confPort+0x4a>
         break; /*End case WIREDOR:*/

         case WIREDAND:
            pt_port->PIN0CTRL = PORT_OPC_WIREDAND_gc;
    516c:	88 e2       	ldi	r24, 0x28	; 40
    516e:	80 8b       	std	Z+16, r24	; 0x10
         break; /*End case WIREDAND:*/
    5170:	01 c0       	rjmp	.+2      	; 0x5174 <confPort+0x50>

         default:
           pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
    5172:	10 8a       	std	Z+16, r1	; 0x10
   }/*End if( pt_conf->c_outputMask > 0)*/

   /*------------------------------------------------------------------------*
    * Set the pull configuration for the given input pins
    *------------------------------------------------------------------------*/
   if( pt_conf->c_inputMask > 0) /*Are there any input pins?*/
    5174:	8c 91       	ld	r24, X
    5176:	88 23       	and	r24, r24
    5178:	c1 f0       	breq	.+48     	; 0x51aa <confPort+0x86>
   {

      /*---------------------------------------------------------------------*
       * Interruptible pins are not allowed until an interrupt is requested.
       *---------------------------------------------------------------------*/
      pt_port->INTCTRL = PORT_INT0LVL_OFF_gc;
    517a:	11 86       	std	Z+9, r1	; 0x09

      pt_port->DIRCLR = pt_conf->c_inputMask;
    517c:	8c 91       	ld	r24, X
    517e:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Use the pin mask register as a means of setting a large group of
       * pins to the same value.
       *---------------------------------------------------------------------*/
      PORTCFG.MPCMASK = pt_conf->c_inputMask;
    5180:	8c 91       	ld	r24, X
    5182:	80 93 b0 00 	sts	0x00B0, r24

      switch( pt_conf->t_inConf)
    5186:	13 96       	adiw	r26, 0x03	; 3
    5188:	8c 91       	ld	r24, X
    518a:	13 97       	sbiw	r26, 0x03	; 3
    518c:	84 30       	cpi	r24, 0x04	; 4
    518e:	29 f0       	breq	.+10     	; 0x519a <confPort+0x76>
    5190:	85 30       	cpi	r24, 0x05	; 5
    5192:	29 f0       	breq	.+10     	; 0x519e <confPort+0x7a>
    5194:	83 30       	cpi	r24, 0x03	; 3
    5196:	41 f4       	brne	.+16     	; 0x51a8 <confPort+0x84>
    5198:	04 c0       	rjmp	.+8      	; 0x51a2 <confPort+0x7e>
      {
         case PULLDOWN:
            pt_port->PIN0CTRL = PORT_OPC_PULLDOWN_gc;
    519a:	80 e1       	ldi	r24, 0x10	; 16
    519c:	03 c0       	rjmp	.+6      	; 0x51a4 <confPort+0x80>
         break; /*End case TOTEM:*/

         case PULLUP:
            pt_port->PIN0CTRL = PORT_OPC_PULLUP_gc;
    519e:	88 e1       	ldi	r24, 0x18	; 24
    51a0:	01 c0       	rjmp	.+2      	; 0x51a4 <confPort+0x80>
         break; /*End case WIREDOR:*/

         case BUSKEEPER:
            pt_port->PIN0CTRL = PORT_OPC_BUSKEEPER_gc;
    51a2:	88 e0       	ldi	r24, 0x08	; 8
    51a4:	80 8b       	std	Z+16, r24	; 0x10
    51a6:	08 95       	ret
         break;/*End case BUSKEEPER:*/

         default:
            pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
    51a8:	10 8a       	std	Z+16, r1	; 0x10
    51aa:	08 95       	ret

000051ac <__vector_66>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( PORTA_INT0_vect)
{
    51ac:	1f 92       	push	r1
    51ae:	0f 92       	push	r0
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	0f 92       	push	r0
    51b4:	08 b6       	in	r0, 0x38	; 56
    51b6:	0f 92       	push	r0
    51b8:	09 b6       	in	r0, 0x39	; 57
    51ba:	0f 92       	push	r0
    51bc:	0b b6       	in	r0, 0x3b	; 59
    51be:	0f 92       	push	r0
    51c0:	11 24       	eor	r1, r1
    51c2:	2f 93       	push	r18
    51c4:	3f 93       	push	r19
    51c6:	4f 93       	push	r20
    51c8:	5f 93       	push	r21
    51ca:	6f 93       	push	r22
    51cc:	7f 93       	push	r23
    51ce:	8f 93       	push	r24
    51d0:	9f 93       	push	r25
    51d2:	af 93       	push	r26
    51d4:	bf 93       	push	r27
    51d6:	ef 93       	push	r30
    51d8:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTA_INT0);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    51e0:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    51e2:	00 97       	sbiw	r24, 0x00	; 0
    51e4:	51 f0       	breq	.+20     	; 0x51fa <__vector_66+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    51e6:	12 96       	adiw	r26, 0x02	; 2
    51e8:	ed 91       	ld	r30, X+
    51ea:	fc 91       	ld	r31, X
    51ec:	13 97       	sbiw	r26, 0x03	; 3
    51ee:	30 97       	sbiw	r30, 0x00	; 0
    51f0:	21 f0       	breq	.+8      	; 0x51fa <__vector_66+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTA,
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	11 96       	adiw	r26, 0x01	; 1
    51f6:	6c 91       	ld	r22, X
    51f8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTA_INT0_vect)*/
    51fa:	ff 91       	pop	r31
    51fc:	ef 91       	pop	r30
    51fe:	bf 91       	pop	r27
    5200:	af 91       	pop	r26
    5202:	9f 91       	pop	r25
    5204:	8f 91       	pop	r24
    5206:	7f 91       	pop	r23
    5208:	6f 91       	pop	r22
    520a:	5f 91       	pop	r21
    520c:	4f 91       	pop	r20
    520e:	3f 91       	pop	r19
    5210:	2f 91       	pop	r18
    5212:	0f 90       	pop	r0
    5214:	0b be       	out	0x3b, r0	; 59
    5216:	0f 90       	pop	r0
    5218:	09 be       	out	0x39, r0	; 57
    521a:	0f 90       	pop	r0
    521c:	08 be       	out	0x38, r0	; 56
    521e:	0f 90       	pop	r0
    5220:	0f be       	out	0x3f, r0	; 63
    5222:	0f 90       	pop	r0
    5224:	1f 90       	pop	r1
    5226:	18 95       	reti

00005228 <__vector_67>:

ISR( PORTA_INT1_vect)
{
    5228:	1f 92       	push	r1
    522a:	0f 92       	push	r0
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	0f 92       	push	r0
    5230:	08 b6       	in	r0, 0x38	; 56
    5232:	0f 92       	push	r0
    5234:	09 b6       	in	r0, 0x39	; 57
    5236:	0f 92       	push	r0
    5238:	0b b6       	in	r0, 0x3b	; 59
    523a:	0f 92       	push	r0
    523c:	11 24       	eor	r1, r1
    523e:	2f 93       	push	r18
    5240:	3f 93       	push	r19
    5242:	4f 93       	push	r20
    5244:	5f 93       	push	r21
    5246:	6f 93       	push	r22
    5248:	7f 93       	push	r23
    524a:	8f 93       	push	r24
    524c:	9f 93       	push	r25
    524e:	af 93       	push	r26
    5250:	bf 93       	push	r27
    5252:	ef 93       	push	r30
    5254:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTA_INT1);
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    525c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	51 f0       	breq	.+20     	; 0x5276 <__vector_67+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5262:	12 96       	adiw	r26, 0x02	; 2
    5264:	ed 91       	ld	r30, X+
    5266:	fc 91       	ld	r31, X
    5268:	13 97       	sbiw	r26, 0x03	; 3
    526a:	30 97       	sbiw	r30, 0x00	; 0
    526c:	21 f0       	breq	.+8      	; 0x5276 <__vector_67+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTA,
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	11 96       	adiw	r26, 0x01	; 1
    5272:	6c 91       	ld	r22, X
    5274:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTA_INT1_vect)*/
    5276:	ff 91       	pop	r31
    5278:	ef 91       	pop	r30
    527a:	bf 91       	pop	r27
    527c:	af 91       	pop	r26
    527e:	9f 91       	pop	r25
    5280:	8f 91       	pop	r24
    5282:	7f 91       	pop	r23
    5284:	6f 91       	pop	r22
    5286:	5f 91       	pop	r21
    5288:	4f 91       	pop	r20
    528a:	3f 91       	pop	r19
    528c:	2f 91       	pop	r18
    528e:	0f 90       	pop	r0
    5290:	0b be       	out	0x3b, r0	; 59
    5292:	0f 90       	pop	r0
    5294:	09 be       	out	0x39, r0	; 57
    5296:	0f 90       	pop	r0
    5298:	08 be       	out	0x38, r0	; 56
    529a:	0f 90       	pop	r0
    529c:	0f be       	out	0x3f, r0	; 63
    529e:	0f 90       	pop	r0
    52a0:	1f 90       	pop	r1
    52a2:	18 95       	reti

000052a4 <__vector_34>:

ISR( PORTB_INT0_vect)
{
    52a4:	1f 92       	push	r1
    52a6:	0f 92       	push	r0
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	0f 92       	push	r0
    52ac:	08 b6       	in	r0, 0x38	; 56
    52ae:	0f 92       	push	r0
    52b0:	09 b6       	in	r0, 0x39	; 57
    52b2:	0f 92       	push	r0
    52b4:	0b b6       	in	r0, 0x3b	; 59
    52b6:	0f 92       	push	r0
    52b8:	11 24       	eor	r1, r1
    52ba:	2f 93       	push	r18
    52bc:	3f 93       	push	r19
    52be:	4f 93       	push	r20
    52c0:	5f 93       	push	r21
    52c2:	6f 93       	push	r22
    52c4:	7f 93       	push	r23
    52c6:	8f 93       	push	r24
    52c8:	9f 93       	push	r25
    52ca:	af 93       	push	r26
    52cc:	bf 93       	push	r27
    52ce:	ef 93       	push	r30
    52d0:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTB_INT0);
    52d2:	82 e0       	ldi	r24, 0x02	; 2
    52d4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    52d8:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    52da:	00 97       	sbiw	r24, 0x00	; 0
    52dc:	51 f0       	breq	.+20     	; 0x52f2 <__vector_34+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    52de:	12 96       	adiw	r26, 0x02	; 2
    52e0:	ed 91       	ld	r30, X+
    52e2:	fc 91       	ld	r31, X
    52e4:	13 97       	sbiw	r26, 0x03	; 3
    52e6:	30 97       	sbiw	r30, 0x00	; 0
    52e8:	21 f0       	breq	.+8      	; 0x52f2 <__vector_34+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTB,
    52ea:	81 e0       	ldi	r24, 0x01	; 1
    52ec:	11 96       	adiw	r26, 0x01	; 1
    52ee:	6c 91       	ld	r22, X
    52f0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTB_INT0_vect)*/
    52f2:	ff 91       	pop	r31
    52f4:	ef 91       	pop	r30
    52f6:	bf 91       	pop	r27
    52f8:	af 91       	pop	r26
    52fa:	9f 91       	pop	r25
    52fc:	8f 91       	pop	r24
    52fe:	7f 91       	pop	r23
    5300:	6f 91       	pop	r22
    5302:	5f 91       	pop	r21
    5304:	4f 91       	pop	r20
    5306:	3f 91       	pop	r19
    5308:	2f 91       	pop	r18
    530a:	0f 90       	pop	r0
    530c:	0b be       	out	0x3b, r0	; 59
    530e:	0f 90       	pop	r0
    5310:	09 be       	out	0x39, r0	; 57
    5312:	0f 90       	pop	r0
    5314:	08 be       	out	0x38, r0	; 56
    5316:	0f 90       	pop	r0
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	0f 90       	pop	r0
    531c:	1f 90       	pop	r1
    531e:	18 95       	reti

00005320 <__vector_35>:

ISR( PORTB_INT1_vect)
{
    5320:	1f 92       	push	r1
    5322:	0f 92       	push	r0
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	0f 92       	push	r0
    5328:	08 b6       	in	r0, 0x38	; 56
    532a:	0f 92       	push	r0
    532c:	09 b6       	in	r0, 0x39	; 57
    532e:	0f 92       	push	r0
    5330:	0b b6       	in	r0, 0x3b	; 59
    5332:	0f 92       	push	r0
    5334:	11 24       	eor	r1, r1
    5336:	2f 93       	push	r18
    5338:	3f 93       	push	r19
    533a:	4f 93       	push	r20
    533c:	5f 93       	push	r21
    533e:	6f 93       	push	r22
    5340:	7f 93       	push	r23
    5342:	8f 93       	push	r24
    5344:	9f 93       	push	r25
    5346:	af 93       	push	r26
    5348:	bf 93       	push	r27
    534a:	ef 93       	push	r30
    534c:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTB_INT1);
    534e:	83 e0       	ldi	r24, 0x03	; 3
    5350:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5354:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5356:	00 97       	sbiw	r24, 0x00	; 0
    5358:	51 f0       	breq	.+20     	; 0x536e <__vector_35+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    535a:	12 96       	adiw	r26, 0x02	; 2
    535c:	ed 91       	ld	r30, X+
    535e:	fc 91       	ld	r31, X
    5360:	13 97       	sbiw	r26, 0x03	; 3
    5362:	30 97       	sbiw	r30, 0x00	; 0
    5364:	21 f0       	breq	.+8      	; 0x536e <__vector_35+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTB,
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	11 96       	adiw	r26, 0x01	; 1
    536a:	6c 91       	ld	r22, X
    536c:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTB_INT1_vect)*/
    536e:	ff 91       	pop	r31
    5370:	ef 91       	pop	r30
    5372:	bf 91       	pop	r27
    5374:	af 91       	pop	r26
    5376:	9f 91       	pop	r25
    5378:	8f 91       	pop	r24
    537a:	7f 91       	pop	r23
    537c:	6f 91       	pop	r22
    537e:	5f 91       	pop	r21
    5380:	4f 91       	pop	r20
    5382:	3f 91       	pop	r19
    5384:	2f 91       	pop	r18
    5386:	0f 90       	pop	r0
    5388:	0b be       	out	0x3b, r0	; 59
    538a:	0f 90       	pop	r0
    538c:	09 be       	out	0x39, r0	; 57
    538e:	0f 90       	pop	r0
    5390:	08 be       	out	0x38, r0	; 56
    5392:	0f 90       	pop	r0
    5394:	0f be       	out	0x3f, r0	; 63
    5396:	0f 90       	pop	r0
    5398:	1f 90       	pop	r1
    539a:	18 95       	reti

0000539c <__vector_2>:

ISR( PORTC_INT0_vect)
{
    539c:	1f 92       	push	r1
    539e:	0f 92       	push	r0
    53a0:	0f b6       	in	r0, 0x3f	; 63
    53a2:	0f 92       	push	r0
    53a4:	08 b6       	in	r0, 0x38	; 56
    53a6:	0f 92       	push	r0
    53a8:	09 b6       	in	r0, 0x39	; 57
    53aa:	0f 92       	push	r0
    53ac:	0b b6       	in	r0, 0x3b	; 59
    53ae:	0f 92       	push	r0
    53b0:	11 24       	eor	r1, r1
    53b2:	2f 93       	push	r18
    53b4:	3f 93       	push	r19
    53b6:	4f 93       	push	r20
    53b8:	5f 93       	push	r21
    53ba:	6f 93       	push	r22
    53bc:	7f 93       	push	r23
    53be:	8f 93       	push	r24
    53c0:	9f 93       	push	r25
    53c2:	af 93       	push	r26
    53c4:	bf 93       	push	r27
    53c6:	ef 93       	push	r30
    53c8:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( (uint8_t)PORTC_INT0);
    53ca:	84 e0       	ldi	r24, 0x04	; 4
    53cc:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    53d0:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    53d2:	00 97       	sbiw	r24, 0x00	; 0
    53d4:	51 f0       	breq	.+20     	; 0x53ea <__vector_2+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    53d6:	12 96       	adiw	r26, 0x02	; 2
    53d8:	ed 91       	ld	r30, X+
    53da:	fc 91       	ld	r31, X
    53dc:	13 97       	sbiw	r26, 0x03	; 3
    53de:	30 97       	sbiw	r30, 0x00	; 0
    53e0:	21 f0       	breq	.+8      	; 0x53ea <__vector_2+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTC,
    53e2:	82 e0       	ldi	r24, 0x02	; 2
    53e4:	11 96       	adiw	r26, 0x01	; 1
    53e6:	6c 91       	ld	r22, X
    53e8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTC_INT0_vect)*/
    53ea:	ff 91       	pop	r31
    53ec:	ef 91       	pop	r30
    53ee:	bf 91       	pop	r27
    53f0:	af 91       	pop	r26
    53f2:	9f 91       	pop	r25
    53f4:	8f 91       	pop	r24
    53f6:	7f 91       	pop	r23
    53f8:	6f 91       	pop	r22
    53fa:	5f 91       	pop	r21
    53fc:	4f 91       	pop	r20
    53fe:	3f 91       	pop	r19
    5400:	2f 91       	pop	r18
    5402:	0f 90       	pop	r0
    5404:	0b be       	out	0x3b, r0	; 59
    5406:	0f 90       	pop	r0
    5408:	09 be       	out	0x39, r0	; 57
    540a:	0f 90       	pop	r0
    540c:	08 be       	out	0x38, r0	; 56
    540e:	0f 90       	pop	r0
    5410:	0f be       	out	0x3f, r0	; 63
    5412:	0f 90       	pop	r0
    5414:	1f 90       	pop	r1
    5416:	18 95       	reti

00005418 <__vector_3>:

ISR( PORTC_INT1_vect)
{
    5418:	1f 92       	push	r1
    541a:	0f 92       	push	r0
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	0f 92       	push	r0
    5420:	08 b6       	in	r0, 0x38	; 56
    5422:	0f 92       	push	r0
    5424:	09 b6       	in	r0, 0x39	; 57
    5426:	0f 92       	push	r0
    5428:	0b b6       	in	r0, 0x3b	; 59
    542a:	0f 92       	push	r0
    542c:	11 24       	eor	r1, r1
    542e:	2f 93       	push	r18
    5430:	3f 93       	push	r19
    5432:	4f 93       	push	r20
    5434:	5f 93       	push	r21
    5436:	6f 93       	push	r22
    5438:	7f 93       	push	r23
    543a:	8f 93       	push	r24
    543c:	9f 93       	push	r25
    543e:	af 93       	push	r26
    5440:	bf 93       	push	r27
    5442:	ef 93       	push	r30
    5444:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTC_INT1);
    5446:	85 e0       	ldi	r24, 0x05	; 5
    5448:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    544c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    544e:	00 97       	sbiw	r24, 0x00	; 0
    5450:	51 f0       	breq	.+20     	; 0x5466 <__vector_3+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5452:	12 96       	adiw	r26, 0x02	; 2
    5454:	ed 91       	ld	r30, X+
    5456:	fc 91       	ld	r31, X
    5458:	13 97       	sbiw	r26, 0x03	; 3
    545a:	30 97       	sbiw	r30, 0x00	; 0
    545c:	21 f0       	breq	.+8      	; 0x5466 <__vector_3+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTC,
    545e:	82 e0       	ldi	r24, 0x02	; 2
    5460:	11 96       	adiw	r26, 0x01	; 1
    5462:	6c 91       	ld	r22, X
    5464:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTC_INT1_vect)*/
    5466:	ff 91       	pop	r31
    5468:	ef 91       	pop	r30
    546a:	bf 91       	pop	r27
    546c:	af 91       	pop	r26
    546e:	9f 91       	pop	r25
    5470:	8f 91       	pop	r24
    5472:	7f 91       	pop	r23
    5474:	6f 91       	pop	r22
    5476:	5f 91       	pop	r21
    5478:	4f 91       	pop	r20
    547a:	3f 91       	pop	r19
    547c:	2f 91       	pop	r18
    547e:	0f 90       	pop	r0
    5480:	0b be       	out	0x3b, r0	; 59
    5482:	0f 90       	pop	r0
    5484:	09 be       	out	0x39, r0	; 57
    5486:	0f 90       	pop	r0
    5488:	08 be       	out	0x38, r0	; 56
    548a:	0f 90       	pop	r0
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	0f 90       	pop	r0
    5490:	1f 90       	pop	r1
    5492:	18 95       	reti

00005494 <__vector_64>:

ISR( PORTD_INT0_vect)
{
    5494:	1f 92       	push	r1
    5496:	0f 92       	push	r0
    5498:	0f b6       	in	r0, 0x3f	; 63
    549a:	0f 92       	push	r0
    549c:	08 b6       	in	r0, 0x38	; 56
    549e:	0f 92       	push	r0
    54a0:	09 b6       	in	r0, 0x39	; 57
    54a2:	0f 92       	push	r0
    54a4:	0b b6       	in	r0, 0x3b	; 59
    54a6:	0f 92       	push	r0
    54a8:	11 24       	eor	r1, r1
    54aa:	2f 93       	push	r18
    54ac:	3f 93       	push	r19
    54ae:	4f 93       	push	r20
    54b0:	5f 93       	push	r21
    54b2:	6f 93       	push	r22
    54b4:	7f 93       	push	r23
    54b6:	8f 93       	push	r24
    54b8:	9f 93       	push	r25
    54ba:	af 93       	push	r26
    54bc:	bf 93       	push	r27
    54be:	ef 93       	push	r30
    54c0:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTD_INT0);
    54c2:	86 e0       	ldi	r24, 0x06	; 6
    54c4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    54c8:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    54ca:	00 97       	sbiw	r24, 0x00	; 0
    54cc:	51 f0       	breq	.+20     	; 0x54e2 <__vector_64+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    54ce:	12 96       	adiw	r26, 0x02	; 2
    54d0:	ed 91       	ld	r30, X+
    54d2:	fc 91       	ld	r31, X
    54d4:	13 97       	sbiw	r26, 0x03	; 3
    54d6:	30 97       	sbiw	r30, 0x00	; 0
    54d8:	21 f0       	breq	.+8      	; 0x54e2 <__vector_64+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTD,
    54da:	83 e0       	ldi	r24, 0x03	; 3
    54dc:	11 96       	adiw	r26, 0x01	; 1
    54de:	6c 91       	ld	r22, X
    54e0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTD_INT0_vect)*/
    54e2:	ff 91       	pop	r31
    54e4:	ef 91       	pop	r30
    54e6:	bf 91       	pop	r27
    54e8:	af 91       	pop	r26
    54ea:	9f 91       	pop	r25
    54ec:	8f 91       	pop	r24
    54ee:	7f 91       	pop	r23
    54f0:	6f 91       	pop	r22
    54f2:	5f 91       	pop	r21
    54f4:	4f 91       	pop	r20
    54f6:	3f 91       	pop	r19
    54f8:	2f 91       	pop	r18
    54fa:	0f 90       	pop	r0
    54fc:	0b be       	out	0x3b, r0	; 59
    54fe:	0f 90       	pop	r0
    5500:	09 be       	out	0x39, r0	; 57
    5502:	0f 90       	pop	r0
    5504:	08 be       	out	0x38, r0	; 56
    5506:	0f 90       	pop	r0
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	0f 90       	pop	r0
    550c:	1f 90       	pop	r1
    550e:	18 95       	reti

00005510 <__vector_65>:

ISR( PORTD_INT1_vect)
{
    5510:	1f 92       	push	r1
    5512:	0f 92       	push	r0
    5514:	0f b6       	in	r0, 0x3f	; 63
    5516:	0f 92       	push	r0
    5518:	08 b6       	in	r0, 0x38	; 56
    551a:	0f 92       	push	r0
    551c:	09 b6       	in	r0, 0x39	; 57
    551e:	0f 92       	push	r0
    5520:	0b b6       	in	r0, 0x3b	; 59
    5522:	0f 92       	push	r0
    5524:	11 24       	eor	r1, r1
    5526:	2f 93       	push	r18
    5528:	3f 93       	push	r19
    552a:	4f 93       	push	r20
    552c:	5f 93       	push	r21
    552e:	6f 93       	push	r22
    5530:	7f 93       	push	r23
    5532:	8f 93       	push	r24
    5534:	9f 93       	push	r25
    5536:	af 93       	push	r26
    5538:	bf 93       	push	r27
    553a:	ef 93       	push	r30
    553c:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTD_INT1);
    553e:	87 e0       	ldi	r24, 0x07	; 7
    5540:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5544:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5546:	00 97       	sbiw	r24, 0x00	; 0
    5548:	51 f0       	breq	.+20     	; 0x555e <__vector_65+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    554a:	12 96       	adiw	r26, 0x02	; 2
    554c:	ed 91       	ld	r30, X+
    554e:	fc 91       	ld	r31, X
    5550:	13 97       	sbiw	r26, 0x03	; 3
    5552:	30 97       	sbiw	r30, 0x00	; 0
    5554:	21 f0       	breq	.+8      	; 0x555e <__vector_65+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTD,
    5556:	83 e0       	ldi	r24, 0x03	; 3
    5558:	11 96       	adiw	r26, 0x01	; 1
    555a:	6c 91       	ld	r22, X
    555c:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTD_INT1_vect)*/
    555e:	ff 91       	pop	r31
    5560:	ef 91       	pop	r30
    5562:	bf 91       	pop	r27
    5564:	af 91       	pop	r26
    5566:	9f 91       	pop	r25
    5568:	8f 91       	pop	r24
    556a:	7f 91       	pop	r23
    556c:	6f 91       	pop	r22
    556e:	5f 91       	pop	r21
    5570:	4f 91       	pop	r20
    5572:	3f 91       	pop	r19
    5574:	2f 91       	pop	r18
    5576:	0f 90       	pop	r0
    5578:	0b be       	out	0x3b, r0	; 59
    557a:	0f 90       	pop	r0
    557c:	09 be       	out	0x39, r0	; 57
    557e:	0f 90       	pop	r0
    5580:	08 be       	out	0x38, r0	; 56
    5582:	0f 90       	pop	r0
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	0f 90       	pop	r0
    5588:	1f 90       	pop	r1
    558a:	18 95       	reti

0000558c <__vector_43>:

ISR( PORTE_INT0_vect)
{
    558c:	1f 92       	push	r1
    558e:	0f 92       	push	r0
    5590:	0f b6       	in	r0, 0x3f	; 63
    5592:	0f 92       	push	r0
    5594:	08 b6       	in	r0, 0x38	; 56
    5596:	0f 92       	push	r0
    5598:	09 b6       	in	r0, 0x39	; 57
    559a:	0f 92       	push	r0
    559c:	0b b6       	in	r0, 0x3b	; 59
    559e:	0f 92       	push	r0
    55a0:	11 24       	eor	r1, r1
    55a2:	2f 93       	push	r18
    55a4:	3f 93       	push	r19
    55a6:	4f 93       	push	r20
    55a8:	5f 93       	push	r21
    55aa:	6f 93       	push	r22
    55ac:	7f 93       	push	r23
    55ae:	8f 93       	push	r24
    55b0:	9f 93       	push	r25
    55b2:	af 93       	push	r26
    55b4:	bf 93       	push	r27
    55b6:	ef 93       	push	r30
    55b8:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTE_INT0);
    55ba:	88 e0       	ldi	r24, 0x08	; 8
    55bc:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    55c0:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    55c2:	00 97       	sbiw	r24, 0x00	; 0
    55c4:	51 f0       	breq	.+20     	; 0x55da <__vector_43+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    55c6:	12 96       	adiw	r26, 0x02	; 2
    55c8:	ed 91       	ld	r30, X+
    55ca:	fc 91       	ld	r31, X
    55cc:	13 97       	sbiw	r26, 0x03	; 3
    55ce:	30 97       	sbiw	r30, 0x00	; 0
    55d0:	21 f0       	breq	.+8      	; 0x55da <__vector_43+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTE,
    55d2:	84 e0       	ldi	r24, 0x04	; 4
    55d4:	11 96       	adiw	r26, 0x01	; 1
    55d6:	6c 91       	ld	r22, X
    55d8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTE_INT0_vect)*/
    55da:	ff 91       	pop	r31
    55dc:	ef 91       	pop	r30
    55de:	bf 91       	pop	r27
    55e0:	af 91       	pop	r26
    55e2:	9f 91       	pop	r25
    55e4:	8f 91       	pop	r24
    55e6:	7f 91       	pop	r23
    55e8:	6f 91       	pop	r22
    55ea:	5f 91       	pop	r21
    55ec:	4f 91       	pop	r20
    55ee:	3f 91       	pop	r19
    55f0:	2f 91       	pop	r18
    55f2:	0f 90       	pop	r0
    55f4:	0b be       	out	0x3b, r0	; 59
    55f6:	0f 90       	pop	r0
    55f8:	09 be       	out	0x39, r0	; 57
    55fa:	0f 90       	pop	r0
    55fc:	08 be       	out	0x38, r0	; 56
    55fe:	0f 90       	pop	r0
    5600:	0f be       	out	0x3f, r0	; 63
    5602:	0f 90       	pop	r0
    5604:	1f 90       	pop	r1
    5606:	18 95       	reti

00005608 <__vector_44>:

ISR( PORTE_INT1_vect)
{
    5608:	1f 92       	push	r1
    560a:	0f 92       	push	r0
    560c:	0f b6       	in	r0, 0x3f	; 63
    560e:	0f 92       	push	r0
    5610:	08 b6       	in	r0, 0x38	; 56
    5612:	0f 92       	push	r0
    5614:	09 b6       	in	r0, 0x39	; 57
    5616:	0f 92       	push	r0
    5618:	0b b6       	in	r0, 0x3b	; 59
    561a:	0f 92       	push	r0
    561c:	11 24       	eor	r1, r1
    561e:	2f 93       	push	r18
    5620:	3f 93       	push	r19
    5622:	4f 93       	push	r20
    5624:	5f 93       	push	r21
    5626:	6f 93       	push	r22
    5628:	7f 93       	push	r23
    562a:	8f 93       	push	r24
    562c:	9f 93       	push	r25
    562e:	af 93       	push	r26
    5630:	bf 93       	push	r27
    5632:	ef 93       	push	r30
    5634:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTE_INT1);
    5636:	89 e0       	ldi	r24, 0x09	; 9
    5638:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    563c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	51 f0       	breq	.+20     	; 0x5656 <__vector_44+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5642:	12 96       	adiw	r26, 0x02	; 2
    5644:	ed 91       	ld	r30, X+
    5646:	fc 91       	ld	r31, X
    5648:	13 97       	sbiw	r26, 0x03	; 3
    564a:	30 97       	sbiw	r30, 0x00	; 0
    564c:	21 f0       	breq	.+8      	; 0x5656 <__vector_44+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTE,
    564e:	84 e0       	ldi	r24, 0x04	; 4
    5650:	11 96       	adiw	r26, 0x01	; 1
    5652:	6c 91       	ld	r22, X
    5654:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTE_INT1_vect)*/
    5656:	ff 91       	pop	r31
    5658:	ef 91       	pop	r30
    565a:	bf 91       	pop	r27
    565c:	af 91       	pop	r26
    565e:	9f 91       	pop	r25
    5660:	8f 91       	pop	r24
    5662:	7f 91       	pop	r23
    5664:	6f 91       	pop	r22
    5666:	5f 91       	pop	r21
    5668:	4f 91       	pop	r20
    566a:	3f 91       	pop	r19
    566c:	2f 91       	pop	r18
    566e:	0f 90       	pop	r0
    5670:	0b be       	out	0x3b, r0	; 59
    5672:	0f 90       	pop	r0
    5674:	09 be       	out	0x39, r0	; 57
    5676:	0f 90       	pop	r0
    5678:	08 be       	out	0x38, r0	; 56
    567a:	0f 90       	pop	r0
    567c:	0f be       	out	0x3f, r0	; 63
    567e:	0f 90       	pop	r0
    5680:	1f 90       	pop	r1
    5682:	18 95       	reti

00005684 <__vector_104>:

ISR( PORTF_INT0_vect)
{
    5684:	1f 92       	push	r1
    5686:	0f 92       	push	r0
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	0f 92       	push	r0
    568c:	08 b6       	in	r0, 0x38	; 56
    568e:	0f 92       	push	r0
    5690:	09 b6       	in	r0, 0x39	; 57
    5692:	0f 92       	push	r0
    5694:	0b b6       	in	r0, 0x3b	; 59
    5696:	0f 92       	push	r0
    5698:	11 24       	eor	r1, r1
    569a:	2f 93       	push	r18
    569c:	3f 93       	push	r19
    569e:	4f 93       	push	r20
    56a0:	5f 93       	push	r21
    56a2:	6f 93       	push	r22
    56a4:	7f 93       	push	r23
    56a6:	8f 93       	push	r24
    56a8:	9f 93       	push	r25
    56aa:	af 93       	push	r26
    56ac:	bf 93       	push	r27
    56ae:	ef 93       	push	r30
    56b0:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTF_INT0);
    56b2:	8a e0       	ldi	r24, 0x0A	; 10
    56b4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    56b8:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    56ba:	00 97       	sbiw	r24, 0x00	; 0
    56bc:	51 f0       	breq	.+20     	; 0x56d2 <__vector_104+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    56be:	12 96       	adiw	r26, 0x02	; 2
    56c0:	ed 91       	ld	r30, X+
    56c2:	fc 91       	ld	r31, X
    56c4:	13 97       	sbiw	r26, 0x03	; 3
    56c6:	30 97       	sbiw	r30, 0x00	; 0
    56c8:	21 f0       	breq	.+8      	; 0x56d2 <__vector_104+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTF,
    56ca:	85 e0       	ldi	r24, 0x05	; 5
    56cc:	11 96       	adiw	r26, 0x01	; 1
    56ce:	6c 91       	ld	r22, X
    56d0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTF_INT0_vect)*/
    56d2:	ff 91       	pop	r31
    56d4:	ef 91       	pop	r30
    56d6:	bf 91       	pop	r27
    56d8:	af 91       	pop	r26
    56da:	9f 91       	pop	r25
    56dc:	8f 91       	pop	r24
    56de:	7f 91       	pop	r23
    56e0:	6f 91       	pop	r22
    56e2:	5f 91       	pop	r21
    56e4:	4f 91       	pop	r20
    56e6:	3f 91       	pop	r19
    56e8:	2f 91       	pop	r18
    56ea:	0f 90       	pop	r0
    56ec:	0b be       	out	0x3b, r0	; 59
    56ee:	0f 90       	pop	r0
    56f0:	09 be       	out	0x39, r0	; 57
    56f2:	0f 90       	pop	r0
    56f4:	08 be       	out	0x38, r0	; 56
    56f6:	0f 90       	pop	r0
    56f8:	0f be       	out	0x3f, r0	; 63
    56fa:	0f 90       	pop	r0
    56fc:	1f 90       	pop	r1
    56fe:	18 95       	reti

00005700 <__vector_105>:

ISR( PORTF_INT1_vect)
{
    5700:	1f 92       	push	r1
    5702:	0f 92       	push	r0
    5704:	0f b6       	in	r0, 0x3f	; 63
    5706:	0f 92       	push	r0
    5708:	08 b6       	in	r0, 0x38	; 56
    570a:	0f 92       	push	r0
    570c:	09 b6       	in	r0, 0x39	; 57
    570e:	0f 92       	push	r0
    5710:	0b b6       	in	r0, 0x3b	; 59
    5712:	0f 92       	push	r0
    5714:	11 24       	eor	r1, r1
    5716:	2f 93       	push	r18
    5718:	3f 93       	push	r19
    571a:	4f 93       	push	r20
    571c:	5f 93       	push	r21
    571e:	6f 93       	push	r22
    5720:	7f 93       	push	r23
    5722:	8f 93       	push	r24
    5724:	9f 93       	push	r25
    5726:	af 93       	push	r26
    5728:	bf 93       	push	r27
    572a:	ef 93       	push	r30
    572c:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTF_INT1);
    572e:	8b e0       	ldi	r24, 0x0B	; 11
    5730:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5734:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	51 f0       	breq	.+20     	; 0x574e <__vector_105+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    573a:	12 96       	adiw	r26, 0x02	; 2
    573c:	ed 91       	ld	r30, X+
    573e:	fc 91       	ld	r31, X
    5740:	13 97       	sbiw	r26, 0x03	; 3
    5742:	30 97       	sbiw	r30, 0x00	; 0
    5744:	21 f0       	breq	.+8      	; 0x574e <__vector_105+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTF,
    5746:	85 e0       	ldi	r24, 0x05	; 5
    5748:	11 96       	adiw	r26, 0x01	; 1
    574a:	6c 91       	ld	r22, X
    574c:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTF_INT1_vect)*/
    574e:	ff 91       	pop	r31
    5750:	ef 91       	pop	r30
    5752:	bf 91       	pop	r27
    5754:	af 91       	pop	r26
    5756:	9f 91       	pop	r25
    5758:	8f 91       	pop	r24
    575a:	7f 91       	pop	r23
    575c:	6f 91       	pop	r22
    575e:	5f 91       	pop	r21
    5760:	4f 91       	pop	r20
    5762:	3f 91       	pop	r19
    5764:	2f 91       	pop	r18
    5766:	0f 90       	pop	r0
    5768:	0b be       	out	0x3b, r0	; 59
    576a:	0f 90       	pop	r0
    576c:	09 be       	out	0x39, r0	; 57
    576e:	0f 90       	pop	r0
    5770:	08 be       	out	0x38, r0	; 56
    5772:	0f 90       	pop	r0
    5774:	0f be       	out	0x3f, r0	; 63
    5776:	0f 90       	pop	r0
    5778:	1f 90       	pop	r1
    577a:	18 95       	reti

0000577c <__vector_96>:

ISR( PORTH_INT0_vect)
{
    577c:	1f 92       	push	r1
    577e:	0f 92       	push	r0
    5780:	0f b6       	in	r0, 0x3f	; 63
    5782:	0f 92       	push	r0
    5784:	08 b6       	in	r0, 0x38	; 56
    5786:	0f 92       	push	r0
    5788:	09 b6       	in	r0, 0x39	; 57
    578a:	0f 92       	push	r0
    578c:	0b b6       	in	r0, 0x3b	; 59
    578e:	0f 92       	push	r0
    5790:	11 24       	eor	r1, r1
    5792:	2f 93       	push	r18
    5794:	3f 93       	push	r19
    5796:	4f 93       	push	r20
    5798:	5f 93       	push	r21
    579a:	6f 93       	push	r22
    579c:	7f 93       	push	r23
    579e:	8f 93       	push	r24
    57a0:	9f 93       	push	r25
    57a2:	af 93       	push	r26
    57a4:	bf 93       	push	r27
    57a6:	ef 93       	push	r30
    57a8:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTH_INT0);
    57aa:	8c e0       	ldi	r24, 0x0C	; 12
    57ac:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    57b0:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    57b2:	00 97       	sbiw	r24, 0x00	; 0
    57b4:	51 f0       	breq	.+20     	; 0x57ca <__vector_96+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    57b6:	12 96       	adiw	r26, 0x02	; 2
    57b8:	ed 91       	ld	r30, X+
    57ba:	fc 91       	ld	r31, X
    57bc:	13 97       	sbiw	r26, 0x03	; 3
    57be:	30 97       	sbiw	r30, 0x00	; 0
    57c0:	21 f0       	breq	.+8      	; 0x57ca <__vector_96+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTH,
    57c2:	86 e0       	ldi	r24, 0x06	; 6
    57c4:	11 96       	adiw	r26, 0x01	; 1
    57c6:	6c 91       	ld	r22, X
    57c8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTH_INT0_vect)*/
    57ca:	ff 91       	pop	r31
    57cc:	ef 91       	pop	r30
    57ce:	bf 91       	pop	r27
    57d0:	af 91       	pop	r26
    57d2:	9f 91       	pop	r25
    57d4:	8f 91       	pop	r24
    57d6:	7f 91       	pop	r23
    57d8:	6f 91       	pop	r22
    57da:	5f 91       	pop	r21
    57dc:	4f 91       	pop	r20
    57de:	3f 91       	pop	r19
    57e0:	2f 91       	pop	r18
    57e2:	0f 90       	pop	r0
    57e4:	0b be       	out	0x3b, r0	; 59
    57e6:	0f 90       	pop	r0
    57e8:	09 be       	out	0x39, r0	; 57
    57ea:	0f 90       	pop	r0
    57ec:	08 be       	out	0x38, r0	; 56
    57ee:	0f 90       	pop	r0
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	0f 90       	pop	r0
    57f4:	1f 90       	pop	r1
    57f6:	18 95       	reti

000057f8 <__vector_97>:

ISR( PORTH_INT1_vect)
{
    57f8:	1f 92       	push	r1
    57fa:	0f 92       	push	r0
    57fc:	0f b6       	in	r0, 0x3f	; 63
    57fe:	0f 92       	push	r0
    5800:	08 b6       	in	r0, 0x38	; 56
    5802:	0f 92       	push	r0
    5804:	09 b6       	in	r0, 0x39	; 57
    5806:	0f 92       	push	r0
    5808:	0b b6       	in	r0, 0x3b	; 59
    580a:	0f 92       	push	r0
    580c:	11 24       	eor	r1, r1
    580e:	2f 93       	push	r18
    5810:	3f 93       	push	r19
    5812:	4f 93       	push	r20
    5814:	5f 93       	push	r21
    5816:	6f 93       	push	r22
    5818:	7f 93       	push	r23
    581a:	8f 93       	push	r24
    581c:	9f 93       	push	r25
    581e:	af 93       	push	r26
    5820:	bf 93       	push	r27
    5822:	ef 93       	push	r30
    5824:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTH_INT1);
    5826:	8d e0       	ldi	r24, 0x0D	; 13
    5828:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    582c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    582e:	00 97       	sbiw	r24, 0x00	; 0
    5830:	51 f0       	breq	.+20     	; 0x5846 <__vector_97+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5832:	12 96       	adiw	r26, 0x02	; 2
    5834:	ed 91       	ld	r30, X+
    5836:	fc 91       	ld	r31, X
    5838:	13 97       	sbiw	r26, 0x03	; 3
    583a:	30 97       	sbiw	r30, 0x00	; 0
    583c:	21 f0       	breq	.+8      	; 0x5846 <__vector_97+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTH,
    583e:	86 e0       	ldi	r24, 0x06	; 6
    5840:	11 96       	adiw	r26, 0x01	; 1
    5842:	6c 91       	ld	r22, X
    5844:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTH_INT1_vect)*/
    5846:	ff 91       	pop	r31
    5848:	ef 91       	pop	r30
    584a:	bf 91       	pop	r27
    584c:	af 91       	pop	r26
    584e:	9f 91       	pop	r25
    5850:	8f 91       	pop	r24
    5852:	7f 91       	pop	r23
    5854:	6f 91       	pop	r22
    5856:	5f 91       	pop	r21
    5858:	4f 91       	pop	r20
    585a:	3f 91       	pop	r19
    585c:	2f 91       	pop	r18
    585e:	0f 90       	pop	r0
    5860:	0b be       	out	0x3b, r0	; 59
    5862:	0f 90       	pop	r0
    5864:	09 be       	out	0x39, r0	; 57
    5866:	0f 90       	pop	r0
    5868:	08 be       	out	0x38, r0	; 56
    586a:	0f 90       	pop	r0
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	0f 90       	pop	r0
    5870:	1f 90       	pop	r1
    5872:	18 95       	reti

00005874 <__vector_98>:

ISR( PORTJ_INT0_vect)
{
    5874:	1f 92       	push	r1
    5876:	0f 92       	push	r0
    5878:	0f b6       	in	r0, 0x3f	; 63
    587a:	0f 92       	push	r0
    587c:	08 b6       	in	r0, 0x38	; 56
    587e:	0f 92       	push	r0
    5880:	09 b6       	in	r0, 0x39	; 57
    5882:	0f 92       	push	r0
    5884:	0b b6       	in	r0, 0x3b	; 59
    5886:	0f 92       	push	r0
    5888:	11 24       	eor	r1, r1
    588a:	2f 93       	push	r18
    588c:	3f 93       	push	r19
    588e:	4f 93       	push	r20
    5890:	5f 93       	push	r21
    5892:	6f 93       	push	r22
    5894:	7f 93       	push	r23
    5896:	8f 93       	push	r24
    5898:	9f 93       	push	r25
    589a:	af 93       	push	r26
    589c:	bf 93       	push	r27
    589e:	ef 93       	push	r30
    58a0:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTJ_INT0);
    58a2:	8e e0       	ldi	r24, 0x0E	; 14
    58a4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    58a8:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    58aa:	00 97       	sbiw	r24, 0x00	; 0
    58ac:	51 f0       	breq	.+20     	; 0x58c2 <__vector_98+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    58ae:	12 96       	adiw	r26, 0x02	; 2
    58b0:	ed 91       	ld	r30, X+
    58b2:	fc 91       	ld	r31, X
    58b4:	13 97       	sbiw	r26, 0x03	; 3
    58b6:	30 97       	sbiw	r30, 0x00	; 0
    58b8:	21 f0       	breq	.+8      	; 0x58c2 <__vector_98+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTJ,
    58ba:	87 e0       	ldi	r24, 0x07	; 7
    58bc:	11 96       	adiw	r26, 0x01	; 1
    58be:	6c 91       	ld	r22, X
    58c0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTJ_INT0_vect)*/
    58c2:	ff 91       	pop	r31
    58c4:	ef 91       	pop	r30
    58c6:	bf 91       	pop	r27
    58c8:	af 91       	pop	r26
    58ca:	9f 91       	pop	r25
    58cc:	8f 91       	pop	r24
    58ce:	7f 91       	pop	r23
    58d0:	6f 91       	pop	r22
    58d2:	5f 91       	pop	r21
    58d4:	4f 91       	pop	r20
    58d6:	3f 91       	pop	r19
    58d8:	2f 91       	pop	r18
    58da:	0f 90       	pop	r0
    58dc:	0b be       	out	0x3b, r0	; 59
    58de:	0f 90       	pop	r0
    58e0:	09 be       	out	0x39, r0	; 57
    58e2:	0f 90       	pop	r0
    58e4:	08 be       	out	0x38, r0	; 56
    58e6:	0f 90       	pop	r0
    58e8:	0f be       	out	0x3f, r0	; 63
    58ea:	0f 90       	pop	r0
    58ec:	1f 90       	pop	r1
    58ee:	18 95       	reti

000058f0 <__vector_99>:

ISR( PORTJ_INT1_vect)
{
    58f0:	1f 92       	push	r1
    58f2:	0f 92       	push	r0
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	0f 92       	push	r0
    58f8:	08 b6       	in	r0, 0x38	; 56
    58fa:	0f 92       	push	r0
    58fc:	09 b6       	in	r0, 0x39	; 57
    58fe:	0f 92       	push	r0
    5900:	0b b6       	in	r0, 0x3b	; 59
    5902:	0f 92       	push	r0
    5904:	11 24       	eor	r1, r1
    5906:	2f 93       	push	r18
    5908:	3f 93       	push	r19
    590a:	4f 93       	push	r20
    590c:	5f 93       	push	r21
    590e:	6f 93       	push	r22
    5910:	7f 93       	push	r23
    5912:	8f 93       	push	r24
    5914:	9f 93       	push	r25
    5916:	af 93       	push	r26
    5918:	bf 93       	push	r27
    591a:	ef 93       	push	r30
    591c:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTJ_INT1);
    591e:	8f e0       	ldi	r24, 0x0F	; 15
    5920:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5924:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5926:	00 97       	sbiw	r24, 0x00	; 0
    5928:	51 f0       	breq	.+20     	; 0x593e <__vector_99+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    592a:	12 96       	adiw	r26, 0x02	; 2
    592c:	ed 91       	ld	r30, X+
    592e:	fc 91       	ld	r31, X
    5930:	13 97       	sbiw	r26, 0x03	; 3
    5932:	30 97       	sbiw	r30, 0x00	; 0
    5934:	21 f0       	breq	.+8      	; 0x593e <__vector_99+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTJ,
    5936:	87 e0       	ldi	r24, 0x07	; 7
    5938:	11 96       	adiw	r26, 0x01	; 1
    593a:	6c 91       	ld	r22, X
    593c:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTJ_INT1_vect)*/
    593e:	ff 91       	pop	r31
    5940:	ef 91       	pop	r30
    5942:	bf 91       	pop	r27
    5944:	af 91       	pop	r26
    5946:	9f 91       	pop	r25
    5948:	8f 91       	pop	r24
    594a:	7f 91       	pop	r23
    594c:	6f 91       	pop	r22
    594e:	5f 91       	pop	r21
    5950:	4f 91       	pop	r20
    5952:	3f 91       	pop	r19
    5954:	2f 91       	pop	r18
    5956:	0f 90       	pop	r0
    5958:	0b be       	out	0x3b, r0	; 59
    595a:	0f 90       	pop	r0
    595c:	09 be       	out	0x39, r0	; 57
    595e:	0f 90       	pop	r0
    5960:	08 be       	out	0x38, r0	; 56
    5962:	0f 90       	pop	r0
    5964:	0f be       	out	0x3f, r0	; 63
    5966:	0f 90       	pop	r0
    5968:	1f 90       	pop	r1
    596a:	18 95       	reti

0000596c <__vector_100>:

ISR( PORTK_INT0_vect)
{
    596c:	1f 92       	push	r1
    596e:	0f 92       	push	r0
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	0f 92       	push	r0
    5974:	08 b6       	in	r0, 0x38	; 56
    5976:	0f 92       	push	r0
    5978:	09 b6       	in	r0, 0x39	; 57
    597a:	0f 92       	push	r0
    597c:	0b b6       	in	r0, 0x3b	; 59
    597e:	0f 92       	push	r0
    5980:	11 24       	eor	r1, r1
    5982:	2f 93       	push	r18
    5984:	3f 93       	push	r19
    5986:	4f 93       	push	r20
    5988:	5f 93       	push	r21
    598a:	6f 93       	push	r22
    598c:	7f 93       	push	r23
    598e:	8f 93       	push	r24
    5990:	9f 93       	push	r25
    5992:	af 93       	push	r26
    5994:	bf 93       	push	r27
    5996:	ef 93       	push	r30
    5998:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTK_INT0);
    599a:	80 e1       	ldi	r24, 0x10	; 16
    599c:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    59a0:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    59a2:	00 97       	sbiw	r24, 0x00	; 0
    59a4:	51 f0       	breq	.+20     	; 0x59ba <__vector_100+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    59a6:	12 96       	adiw	r26, 0x02	; 2
    59a8:	ed 91       	ld	r30, X+
    59aa:	fc 91       	ld	r31, X
    59ac:	13 97       	sbiw	r26, 0x03	; 3
    59ae:	30 97       	sbiw	r30, 0x00	; 0
    59b0:	21 f0       	breq	.+8      	; 0x59ba <__vector_100+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTK,
    59b2:	88 e0       	ldi	r24, 0x08	; 8
    59b4:	11 96       	adiw	r26, 0x01	; 1
    59b6:	6c 91       	ld	r22, X
    59b8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTK_INT0_vect)*/
    59ba:	ff 91       	pop	r31
    59bc:	ef 91       	pop	r30
    59be:	bf 91       	pop	r27
    59c0:	af 91       	pop	r26
    59c2:	9f 91       	pop	r25
    59c4:	8f 91       	pop	r24
    59c6:	7f 91       	pop	r23
    59c8:	6f 91       	pop	r22
    59ca:	5f 91       	pop	r21
    59cc:	4f 91       	pop	r20
    59ce:	3f 91       	pop	r19
    59d0:	2f 91       	pop	r18
    59d2:	0f 90       	pop	r0
    59d4:	0b be       	out	0x3b, r0	; 59
    59d6:	0f 90       	pop	r0
    59d8:	09 be       	out	0x39, r0	; 57
    59da:	0f 90       	pop	r0
    59dc:	08 be       	out	0x38, r0	; 56
    59de:	0f 90       	pop	r0
    59e0:	0f be       	out	0x3f, r0	; 63
    59e2:	0f 90       	pop	r0
    59e4:	1f 90       	pop	r1
    59e6:	18 95       	reti

000059e8 <__vector_101>:

ISR( PORTK_INT1_vect)
{
    59e8:	1f 92       	push	r1
    59ea:	0f 92       	push	r0
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	0f 92       	push	r0
    59f0:	08 b6       	in	r0, 0x38	; 56
    59f2:	0f 92       	push	r0
    59f4:	09 b6       	in	r0, 0x39	; 57
    59f6:	0f 92       	push	r0
    59f8:	0b b6       	in	r0, 0x3b	; 59
    59fa:	0f 92       	push	r0
    59fc:	11 24       	eor	r1, r1
    59fe:	2f 93       	push	r18
    5a00:	3f 93       	push	r19
    5a02:	4f 93       	push	r20
    5a04:	5f 93       	push	r21
    5a06:	6f 93       	push	r22
    5a08:	7f 93       	push	r23
    5a0a:	8f 93       	push	r24
    5a0c:	9f 93       	push	r25
    5a0e:	af 93       	push	r26
    5a10:	bf 93       	push	r27
    5a12:	ef 93       	push	r30
    5a14:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTK_INT1);
    5a16:	81 e1       	ldi	r24, 0x11	; 17
    5a18:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5a1c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5a1e:	00 97       	sbiw	r24, 0x00	; 0
    5a20:	51 f0       	breq	.+20     	; 0x5a36 <__vector_101+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5a22:	12 96       	adiw	r26, 0x02	; 2
    5a24:	ed 91       	ld	r30, X+
    5a26:	fc 91       	ld	r31, X
    5a28:	13 97       	sbiw	r26, 0x03	; 3
    5a2a:	30 97       	sbiw	r30, 0x00	; 0
    5a2c:	21 f0       	breq	.+8      	; 0x5a36 <__vector_101+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTK,
    5a2e:	88 e0       	ldi	r24, 0x08	; 8
    5a30:	11 96       	adiw	r26, 0x01	; 1
    5a32:	6c 91       	ld	r22, X
    5a34:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTK_INT1_vect)*/
    5a36:	ff 91       	pop	r31
    5a38:	ef 91       	pop	r30
    5a3a:	bf 91       	pop	r27
    5a3c:	af 91       	pop	r26
    5a3e:	9f 91       	pop	r25
    5a40:	8f 91       	pop	r24
    5a42:	7f 91       	pop	r23
    5a44:	6f 91       	pop	r22
    5a46:	5f 91       	pop	r21
    5a48:	4f 91       	pop	r20
    5a4a:	3f 91       	pop	r19
    5a4c:	2f 91       	pop	r18
    5a4e:	0f 90       	pop	r0
    5a50:	0b be       	out	0x3b, r0	; 59
    5a52:	0f 90       	pop	r0
    5a54:	09 be       	out	0x39, r0	; 57
    5a56:	0f 90       	pop	r0
    5a58:	08 be       	out	0x38, r0	; 56
    5a5a:	0f 90       	pop	r0
    5a5c:	0f be       	out	0x3f, r0	; 63
    5a5e:	0f 90       	pop	r0
    5a60:	1f 90       	pop	r1
    5a62:	18 95       	reti

00005a64 <__vector_94>:

ISR( PORTQ_INT0_vect)
{
    5a64:	1f 92       	push	r1
    5a66:	0f 92       	push	r0
    5a68:	0f b6       	in	r0, 0x3f	; 63
    5a6a:	0f 92       	push	r0
    5a6c:	08 b6       	in	r0, 0x38	; 56
    5a6e:	0f 92       	push	r0
    5a70:	09 b6       	in	r0, 0x39	; 57
    5a72:	0f 92       	push	r0
    5a74:	0b b6       	in	r0, 0x3b	; 59
    5a76:	0f 92       	push	r0
    5a78:	11 24       	eor	r1, r1
    5a7a:	2f 93       	push	r18
    5a7c:	3f 93       	push	r19
    5a7e:	4f 93       	push	r20
    5a80:	5f 93       	push	r21
    5a82:	6f 93       	push	r22
    5a84:	7f 93       	push	r23
    5a86:	8f 93       	push	r24
    5a88:	9f 93       	push	r25
    5a8a:	af 93       	push	r26
    5a8c:	bf 93       	push	r27
    5a8e:	ef 93       	push	r30
    5a90:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTQ_INT0);
    5a92:	82 e1       	ldi	r24, 0x12	; 18
    5a94:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5a98:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5a9a:	00 97       	sbiw	r24, 0x00	; 0
    5a9c:	51 f0       	breq	.+20     	; 0x5ab2 <__vector_94+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5a9e:	12 96       	adiw	r26, 0x02	; 2
    5aa0:	ed 91       	ld	r30, X+
    5aa2:	fc 91       	ld	r31, X
    5aa4:	13 97       	sbiw	r26, 0x03	; 3
    5aa6:	30 97       	sbiw	r30, 0x00	; 0
    5aa8:	21 f0       	breq	.+8      	; 0x5ab2 <__vector_94+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTQ,
    5aaa:	89 e0       	ldi	r24, 0x09	; 9
    5aac:	11 96       	adiw	r26, 0x01	; 1
    5aae:	6c 91       	ld	r22, X
    5ab0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTQ_INT0_vect)*/
    5ab2:	ff 91       	pop	r31
    5ab4:	ef 91       	pop	r30
    5ab6:	bf 91       	pop	r27
    5ab8:	af 91       	pop	r26
    5aba:	9f 91       	pop	r25
    5abc:	8f 91       	pop	r24
    5abe:	7f 91       	pop	r23
    5ac0:	6f 91       	pop	r22
    5ac2:	5f 91       	pop	r21
    5ac4:	4f 91       	pop	r20
    5ac6:	3f 91       	pop	r19
    5ac8:	2f 91       	pop	r18
    5aca:	0f 90       	pop	r0
    5acc:	0b be       	out	0x3b, r0	; 59
    5ace:	0f 90       	pop	r0
    5ad0:	09 be       	out	0x39, r0	; 57
    5ad2:	0f 90       	pop	r0
    5ad4:	08 be       	out	0x38, r0	; 56
    5ad6:	0f 90       	pop	r0
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	0f 90       	pop	r0
    5adc:	1f 90       	pop	r1
    5ade:	18 95       	reti

00005ae0 <__vector_95>:

ISR( PORTQ_INT1_vect)
{
    5ae0:	1f 92       	push	r1
    5ae2:	0f 92       	push	r0
    5ae4:	0f b6       	in	r0, 0x3f	; 63
    5ae6:	0f 92       	push	r0
    5ae8:	08 b6       	in	r0, 0x38	; 56
    5aea:	0f 92       	push	r0
    5aec:	09 b6       	in	r0, 0x39	; 57
    5aee:	0f 92       	push	r0
    5af0:	0b b6       	in	r0, 0x3b	; 59
    5af2:	0f 92       	push	r0
    5af4:	11 24       	eor	r1, r1
    5af6:	2f 93       	push	r18
    5af8:	3f 93       	push	r19
    5afa:	4f 93       	push	r20
    5afc:	5f 93       	push	r21
    5afe:	6f 93       	push	r22
    5b00:	7f 93       	push	r23
    5b02:	8f 93       	push	r24
    5b04:	9f 93       	push	r25
    5b06:	af 93       	push	r26
    5b08:	bf 93       	push	r27
    5b0a:	ef 93       	push	r30
    5b0c:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTQ_INT1);
    5b0e:	83 e1       	ldi	r24, 0x13	; 19
    5b10:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5b14:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5b16:	00 97       	sbiw	r24, 0x00	; 0
    5b18:	51 f0       	breq	.+20     	; 0x5b2e <__vector_95+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5b1a:	12 96       	adiw	r26, 0x02	; 2
    5b1c:	ed 91       	ld	r30, X+
    5b1e:	fc 91       	ld	r31, X
    5b20:	13 97       	sbiw	r26, 0x03	; 3
    5b22:	30 97       	sbiw	r30, 0x00	; 0
    5b24:	21 f0       	breq	.+8      	; 0x5b2e <__vector_95+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTQ,
    5b26:	89 e0       	ldi	r24, 0x09	; 9
    5b28:	11 96       	adiw	r26, 0x01	; 1
    5b2a:	6c 91       	ld	r22, X
    5b2c:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTQ_INT1_vect)*/
    5b2e:	ff 91       	pop	r31
    5b30:	ef 91       	pop	r30
    5b32:	bf 91       	pop	r27
    5b34:	af 91       	pop	r26
    5b36:	9f 91       	pop	r25
    5b38:	8f 91       	pop	r24
    5b3a:	7f 91       	pop	r23
    5b3c:	6f 91       	pop	r22
    5b3e:	5f 91       	pop	r21
    5b40:	4f 91       	pop	r20
    5b42:	3f 91       	pop	r19
    5b44:	2f 91       	pop	r18
    5b46:	0f 90       	pop	r0
    5b48:	0b be       	out	0x3b, r0	; 59
    5b4a:	0f 90       	pop	r0
    5b4c:	09 be       	out	0x39, r0	; 57
    5b4e:	0f 90       	pop	r0
    5b50:	08 be       	out	0x38, r0	; 56
    5b52:	0f 90       	pop	r0
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	0f 90       	pop	r0
    5b58:	1f 90       	pop	r1
    5b5a:	18 95       	reti

00005b5c <__vector_4>:

ISR( PORTR_INT0_vect)
{
    5b5c:	1f 92       	push	r1
    5b5e:	0f 92       	push	r0
    5b60:	0f b6       	in	r0, 0x3f	; 63
    5b62:	0f 92       	push	r0
    5b64:	08 b6       	in	r0, 0x38	; 56
    5b66:	0f 92       	push	r0
    5b68:	09 b6       	in	r0, 0x39	; 57
    5b6a:	0f 92       	push	r0
    5b6c:	0b b6       	in	r0, 0x3b	; 59
    5b6e:	0f 92       	push	r0
    5b70:	11 24       	eor	r1, r1
    5b72:	2f 93       	push	r18
    5b74:	3f 93       	push	r19
    5b76:	4f 93       	push	r20
    5b78:	5f 93       	push	r21
    5b7a:	6f 93       	push	r22
    5b7c:	7f 93       	push	r23
    5b7e:	8f 93       	push	r24
    5b80:	9f 93       	push	r25
    5b82:	af 93       	push	r26
    5b84:	bf 93       	push	r27
    5b86:	ef 93       	push	r30
    5b88:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTR_INT0);
    5b8a:	84 e1       	ldi	r24, 0x14	; 20
    5b8c:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5b90:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5b92:	00 97       	sbiw	r24, 0x00	; 0
    5b94:	51 f0       	breq	.+20     	; 0x5baa <__vector_4+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5b96:	12 96       	adiw	r26, 0x02	; 2
    5b98:	ed 91       	ld	r30, X+
    5b9a:	fc 91       	ld	r31, X
    5b9c:	13 97       	sbiw	r26, 0x03	; 3
    5b9e:	30 97       	sbiw	r30, 0x00	; 0
    5ba0:	21 f0       	breq	.+8      	; 0x5baa <__vector_4+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTR,
    5ba2:	8a e0       	ldi	r24, 0x0A	; 10
    5ba4:	11 96       	adiw	r26, 0x01	; 1
    5ba6:	6c 91       	ld	r22, X
    5ba8:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTR_INT0_vect)*/
    5baa:	ff 91       	pop	r31
    5bac:	ef 91       	pop	r30
    5bae:	bf 91       	pop	r27
    5bb0:	af 91       	pop	r26
    5bb2:	9f 91       	pop	r25
    5bb4:	8f 91       	pop	r24
    5bb6:	7f 91       	pop	r23
    5bb8:	6f 91       	pop	r22
    5bba:	5f 91       	pop	r21
    5bbc:	4f 91       	pop	r20
    5bbe:	3f 91       	pop	r19
    5bc0:	2f 91       	pop	r18
    5bc2:	0f 90       	pop	r0
    5bc4:	0b be       	out	0x3b, r0	; 59
    5bc6:	0f 90       	pop	r0
    5bc8:	09 be       	out	0x39, r0	; 57
    5bca:	0f 90       	pop	r0
    5bcc:	08 be       	out	0x38, r0	; 56
    5bce:	0f 90       	pop	r0
    5bd0:	0f be       	out	0x3f, r0	; 63
    5bd2:	0f 90       	pop	r0
    5bd4:	1f 90       	pop	r1
    5bd6:	18 95       	reti

00005bd8 <__vector_5>:

ISR( PORTR_INT1_vect)
{
    5bd8:	1f 92       	push	r1
    5bda:	0f 92       	push	r0
    5bdc:	0f b6       	in	r0, 0x3f	; 63
    5bde:	0f 92       	push	r0
    5be0:	08 b6       	in	r0, 0x38	; 56
    5be2:	0f 92       	push	r0
    5be4:	09 b6       	in	r0, 0x39	; 57
    5be6:	0f 92       	push	r0
    5be8:	0b b6       	in	r0, 0x3b	; 59
    5bea:	0f 92       	push	r0
    5bec:	11 24       	eor	r1, r1
    5bee:	2f 93       	push	r18
    5bf0:	3f 93       	push	r19
    5bf2:	4f 93       	push	r20
    5bf4:	5f 93       	push	r21
    5bf6:	6f 93       	push	r22
    5bf8:	7f 93       	push	r23
    5bfa:	8f 93       	push	r24
    5bfc:	9f 93       	push	r25
    5bfe:	af 93       	push	r26
    5c00:	bf 93       	push	r27
    5c02:	ef 93       	push	r30
    5c04:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTR_INT1);
    5c06:	85 e1       	ldi	r24, 0x15	; 21
    5c08:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <findGpioIntElement>
    5c0c:	dc 01       	movw	r26, r24

   if( pt_intHndl != NULL)
    5c0e:	00 97       	sbiw	r24, 0x00	; 0
    5c10:	51 f0       	breq	.+20     	; 0x5c26 <__vector_5+0x4e>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5c12:	12 96       	adiw	r26, 0x02	; 2
    5c14:	ed 91       	ld	r30, X+
    5c16:	fc 91       	ld	r31, X
    5c18:	13 97       	sbiw	r26, 0x03	; 3
    5c1a:	30 97       	sbiw	r30, 0x00	; 0
    5c1c:	21 f0       	breq	.+8      	; 0x5c26 <__vector_5+0x4e>
         pt_intHndl->pf_funPtr( GPIO_PORTR,
    5c1e:	8a e0       	ldi	r24, 0x0A	; 10
    5c20:	11 96       	adiw	r26, 0x01	; 1
    5c22:	6c 91       	ld	r22, X
    5c24:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTR_INT1_vect)*/
    5c26:	ff 91       	pop	r31
    5c28:	ef 91       	pop	r30
    5c2a:	bf 91       	pop	r27
    5c2c:	af 91       	pop	r26
    5c2e:	9f 91       	pop	r25
    5c30:	8f 91       	pop	r24
    5c32:	7f 91       	pop	r23
    5c34:	6f 91       	pop	r22
    5c36:	5f 91       	pop	r21
    5c38:	4f 91       	pop	r20
    5c3a:	3f 91       	pop	r19
    5c3c:	2f 91       	pop	r18
    5c3e:	0f 90       	pop	r0
    5c40:	0b be       	out	0x3b, r0	; 59
    5c42:	0f 90       	pop	r0
    5c44:	09 be       	out	0x39, r0	; 57
    5c46:	0f 90       	pop	r0
    5c48:	08 be       	out	0x38, r0	; 56
    5c4a:	0f 90       	pop	r0
    5c4c:	0f be       	out	0x3f, r0	; 63
    5c4e:	0f 90       	pop	r0
    5c50:	1f 90       	pop	r1
    5c52:	18 95       	reti

00005c54 <hal_configureGpioPort>:

}/*End confInt*/

t_gpioError hal_configureGpioPort( t_gpioPort t_port,
                                   t_gpioConf t_conf)
{
    5c54:	cf 93       	push	r28
    5c56:	df 93       	push	r29
    5c58:	00 d0       	rcall	.+0      	; 0x5c5a <hal_configureGpioPort+0x6>
    5c5a:	00 d0       	rcall	.+0      	; 0x5c5c <hal_configureGpioPort+0x8>
    5c5c:	cd b7       	in	r28, 0x3d	; 61
    5c5e:	de b7       	in	r29, 0x3e	; 62
    5c60:	2a 83       	std	Y+2, r18	; 0x02
    5c62:	3b 83       	std	Y+3, r19	; 0x03
    5c64:	4c 83       	std	Y+4, r20	; 0x04
    5c66:	5d 83       	std	Y+5, r21	; 0x05
    5c68:	6e 83       	std	Y+6, r22	; 0x06

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    5c6a:	9f b7       	in	r25, 0x3f	; 63
    5c6c:	99 83       	std	Y+1, r25	; 0x01
    5c6e:	f8 94       	cli

   switch( t_port)
    5c70:	85 30       	cpi	r24, 0x05	; 5
    5c72:	69 f1       	breq	.+90     	; 0x5cce <hal_configureGpioPort+0x7a>
    5c74:	86 30       	cpi	r24, 0x06	; 6
    5c76:	70 f4       	brcc	.+28     	; 0x5c94 <hal_configureGpioPort+0x40>
    5c78:	82 30       	cpi	r24, 0x02	; 2
    5c7a:	01 f1       	breq	.+64     	; 0x5cbc <hal_configureGpioPort+0x68>
    5c7c:	83 30       	cpi	r24, 0x03	; 3
    5c7e:	28 f4       	brcc	.+10     	; 0x5c8a <hal_configureGpioPort+0x36>
    5c80:	88 23       	and	r24, r24
    5c82:	b1 f0       	breq	.+44     	; 0x5cb0 <hal_configureGpioPort+0x5c>
    5c84:	81 30       	cpi	r24, 0x01	; 1
    5c86:	d9 f5       	brne	.+118    	; 0x5cfe <hal_configureGpioPort+0xaa>
    5c88:	16 c0       	rjmp	.+44     	; 0x5cb6 <hal_configureGpioPort+0x62>
    5c8a:	83 30       	cpi	r24, 0x03	; 3
    5c8c:	d1 f0       	breq	.+52     	; 0x5cc2 <hal_configureGpioPort+0x6e>
    5c8e:	84 30       	cpi	r24, 0x04	; 4
    5c90:	b1 f5       	brne	.+108    	; 0x5cfe <hal_configureGpioPort+0xaa>
    5c92:	1a c0       	rjmp	.+52     	; 0x5cc8 <hal_configureGpioPort+0x74>
    5c94:	88 30       	cpi	r24, 0x08	; 8
    5c96:	21 f1       	breq	.+72     	; 0x5ce0 <hal_configureGpioPort+0x8c>
    5c98:	89 30       	cpi	r24, 0x09	; 9
    5c9a:	28 f4       	brcc	.+10     	; 0x5ca6 <hal_configureGpioPort+0x52>
    5c9c:	86 30       	cpi	r24, 0x06	; 6
    5c9e:	d1 f0       	breq	.+52     	; 0x5cd4 <hal_configureGpioPort+0x80>
    5ca0:	87 30       	cpi	r24, 0x07	; 7
    5ca2:	69 f5       	brne	.+90     	; 0x5cfe <hal_configureGpioPort+0xaa>
    5ca4:	1a c0       	rjmp	.+52     	; 0x5cda <hal_configureGpioPort+0x86>
    5ca6:	89 30       	cpi	r24, 0x09	; 9
    5ca8:	f1 f0       	breq	.+60     	; 0x5ce6 <hal_configureGpioPort+0x92>
    5caa:	8a 30       	cpi	r24, 0x0A	; 10
    5cac:	41 f5       	brne	.+80     	; 0x5cfe <hal_configureGpioPort+0xaa>
    5cae:	1e c0       	rjmp	.+60     	; 0x5cec <hal_configureGpioPort+0x98>
   {
      case GPIO_PORTA:

         confPort( &PORTA,
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	96 e0       	ldi	r25, 0x06	; 6
    5cb4:	1d c0       	rjmp	.+58     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTA:*/

      case GPIO_PORTB:

         confPort( &PORTB,
    5cb6:	80 e2       	ldi	r24, 0x20	; 32
    5cb8:	96 e0       	ldi	r25, 0x06	; 6
    5cba:	1a c0       	rjmp	.+52     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTB:*/

      case GPIO_PORTC:

         confPort( &PORTC,
    5cbc:	80 e4       	ldi	r24, 0x40	; 64
    5cbe:	96 e0       	ldi	r25, 0x06	; 6
    5cc0:	17 c0       	rjmp	.+46     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTC:*/

      case GPIO_PORTD:

         confPort( &PORTD,
    5cc2:	80 e6       	ldi	r24, 0x60	; 96
    5cc4:	96 e0       	ldi	r25, 0x06	; 6
    5cc6:	14 c0       	rjmp	.+40     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTD:*/

      case GPIO_PORTE:

         confPort( &PORTE,
    5cc8:	80 e8       	ldi	r24, 0x80	; 128
    5cca:	96 e0       	ldi	r25, 0x06	; 6
    5ccc:	11 c0       	rjmp	.+34     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTE:*/

      case GPIO_PORTF:

         confPort( &PORTF,
    5cce:	80 ea       	ldi	r24, 0xA0	; 160
    5cd0:	96 e0       	ldi	r25, 0x06	; 6
    5cd2:	0e c0       	rjmp	.+28     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTF:*/

      case GPIO_PORTH:

         confPort( &PORTH,
    5cd4:	80 ee       	ldi	r24, 0xE0	; 224
    5cd6:	96 e0       	ldi	r25, 0x06	; 6
    5cd8:	0b c0       	rjmp	.+22     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTH:*/

      case GPIO_PORTJ:

         confPort( &PORTJ,
    5cda:	80 e0       	ldi	r24, 0x00	; 0
    5cdc:	97 e0       	ldi	r25, 0x07	; 7
    5cde:	08 c0       	rjmp	.+16     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTJ:*/

      case GPIO_PORTK:

         confPort( &PORTK,
    5ce0:	80 e2       	ldi	r24, 0x20	; 32
    5ce2:	97 e0       	ldi	r25, 0x07	; 7
    5ce4:	05 c0       	rjmp	.+10     	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTK:*/

      case GPIO_PORTQ:

         confPort( &PORTQ,
    5ce6:	80 ec       	ldi	r24, 0xC0	; 192
    5ce8:	97 e0       	ldi	r25, 0x07	; 7
    5cea:	02 c0       	rjmp	.+4      	; 0x5cf0 <hal_configureGpioPort+0x9c>

      break;/*End case GPIO_PORTQ:*/

      case GPIO_PORTR:

         confPort( &PORTR,
    5cec:	80 ee       	ldi	r24, 0xE0	; 224
    5cee:	97 e0       	ldi	r25, 0x07	; 7
    5cf0:	be 01       	movw	r22, r28
    5cf2:	6e 5f       	subi	r22, 0xFE	; 254
    5cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf6:	0e 94 92 28 	call	0x5124	; 0x5124 <confPort>
}/*End confInt*/

t_gpioError hal_configureGpioPort( t_gpioPort t_port,
                                   t_gpioConf t_conf)
{
   t_gpioError t_err = GPIO_PASSED;
    5cfa:	80 e0       	ldi	r24, 0x00	; 0
      case GPIO_PORTR:

         confPort( &PORTR,
                   &t_conf);

      break;/*End case GPIO_PORTR:*/
    5cfc:	01 c0       	rjmp	.+2      	; 0x5d00 <hal_configureGpioPort+0xac>

      default:
         t_err = GPIO_INVALID_CMD;
    5cfe:	8c ef       	ldi	r24, 0xFC	; 252
      break;

   }/*End switch( t_port)*/

   HAL_END_CRITICAL();//Enable interrupts
    5d00:	99 81       	ldd	r25, Y+1	; 0x01
    5d02:	9f bf       	out	0x3f, r25	; 63

   return t_err;

}/*End hal_configureGpioPort*/
    5d04:	26 96       	adiw	r28, 0x06	; 6
    5d06:	cd bf       	out	0x3d, r28	; 61
    5d08:	de bf       	out	0x3e, r29	; 62
    5d0a:	df 91       	pop	r29
    5d0c:	cf 91       	pop	r28
    5d0e:	08 95       	ret

00005d10 <hal_requestGpioInt>:

t_GPIOHNDL hal_requestGpioInt( t_gpioPort t_port,
                               t_intConf  t_conf)
{
    5d10:	cf 93       	push	r28
    5d12:	df 93       	push	r29
    5d14:	cd b7       	in	r28, 0x3d	; 61
    5d16:	de b7       	in	r29, 0x3e	; 62
    5d18:	27 97       	sbiw	r28, 0x07	; 7
    5d1a:	cd bf       	out	0x3d, r28	; 61
    5d1c:	de bf       	out	0x3e, r29	; 62
    5d1e:	4c 83       	std	Y+4, r20	; 0x04
    5d20:	5d 83       	std	Y+5, r21	; 0x05
    5d22:	6e 83       	std	Y+6, r22	; 0x06
    5d24:	7f 83       	std	Y+7, r23	; 0x07

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    5d26:	9f b7       	in	r25, 0x3f	; 63
    5d28:	99 83       	std	Y+1, r25	; 0x01
    5d2a:	f8 94       	cli

   switch( t_port)
    5d2c:	85 30       	cpi	r24, 0x05	; 5
    5d2e:	09 f4       	brne	.+2      	; 0x5d32 <hal_requestGpioInt+0x22>
    5d30:	4c c0       	rjmp	.+152    	; 0x5dca <hal_requestGpioInt+0xba>
    5d32:	86 30       	cpi	r24, 0x06	; 6
    5d34:	80 f4       	brcc	.+32     	; 0x5d56 <hal_requestGpioInt+0x46>
    5d36:	82 30       	cpi	r24, 0x02	; 2
    5d38:	81 f1       	breq	.+96     	; 0x5d9a <hal_requestGpioInt+0x8a>
    5d3a:	83 30       	cpi	r24, 0x03	; 3
    5d3c:	30 f4       	brcc	.+12     	; 0x5d4a <hal_requestGpioInt+0x3a>
    5d3e:	88 23       	and	r24, r24
    5d40:	e1 f0       	breq	.+56     	; 0x5d7a <hal_requestGpioInt+0x6a>
    5d42:	81 30       	cpi	r24, 0x01	; 1
    5d44:	09 f0       	breq	.+2      	; 0x5d48 <hal_requestGpioInt+0x38>
    5d46:	79 c0       	rjmp	.+242    	; 0x5e3a <hal_requestGpioInt+0x12a>
    5d48:	20 c0       	rjmp	.+64     	; 0x5d8a <hal_requestGpioInt+0x7a>
    5d4a:	83 30       	cpi	r24, 0x03	; 3
    5d4c:	71 f1       	breq	.+92     	; 0x5daa <hal_requestGpioInt+0x9a>
    5d4e:	84 30       	cpi	r24, 0x04	; 4
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <hal_requestGpioInt+0x44>
    5d52:	73 c0       	rjmp	.+230    	; 0x5e3a <hal_requestGpioInt+0x12a>
    5d54:	32 c0       	rjmp	.+100    	; 0x5dba <hal_requestGpioInt+0xaa>
    5d56:	88 30       	cpi	r24, 0x08	; 8
    5d58:	09 f4       	brne	.+2      	; 0x5d5c <hal_requestGpioInt+0x4c>
    5d5a:	4f c0       	rjmp	.+158    	; 0x5dfa <hal_requestGpioInt+0xea>
    5d5c:	89 30       	cpi	r24, 0x09	; 9
    5d5e:	30 f4       	brcc	.+12     	; 0x5d6c <hal_requestGpioInt+0x5c>
    5d60:	86 30       	cpi	r24, 0x06	; 6
    5d62:	d9 f1       	breq	.+118    	; 0x5dda <hal_requestGpioInt+0xca>
    5d64:	87 30       	cpi	r24, 0x07	; 7
    5d66:	09 f0       	breq	.+2      	; 0x5d6a <hal_requestGpioInt+0x5a>
    5d68:	68 c0       	rjmp	.+208    	; 0x5e3a <hal_requestGpioInt+0x12a>
    5d6a:	3f c0       	rjmp	.+126    	; 0x5dea <hal_requestGpioInt+0xda>
    5d6c:	89 30       	cpi	r24, 0x09	; 9
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <hal_requestGpioInt+0x62>
    5d70:	4c c0       	rjmp	.+152    	; 0x5e0a <hal_requestGpioInt+0xfa>
    5d72:	8a 30       	cpi	r24, 0x0A	; 10
    5d74:	09 f0       	breq	.+2      	; 0x5d78 <hal_requestGpioInt+0x68>
    5d76:	61 c0       	rjmp	.+194    	; 0x5e3a <hal_requestGpioInt+0x12a>
    5d78:	50 c0       	rjmp	.+160    	; 0x5e1a <hal_requestGpioInt+0x10a>
   {
      case GPIO_PORTA:

         t_linkHndl = confInt( &PORTA,
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
    5d7c:	96 e0       	ldi	r25, 0x06	; 6
    5d7e:	be 01       	movw	r22, r28
    5d80:	6c 5f       	subi	r22, 0xFC	; 252
    5d82:	7f 4f       	sbci	r23, 0xFF	; 255
    5d84:	40 e0       	ldi	r20, 0x00	; 0
    5d86:	21 e0       	ldi	r18, 0x01	; 1
    5d88:	4f c0       	rjmp	.+158    	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTA:*/

      case GPIO_PORTB:

         t_linkHndl = confInt( &PORTB,
    5d8a:	80 e2       	ldi	r24, 0x20	; 32
    5d8c:	96 e0       	ldi	r25, 0x06	; 6
    5d8e:	be 01       	movw	r22, r28
    5d90:	6c 5f       	subi	r22, 0xFC	; 252
    5d92:	7f 4f       	sbci	r23, 0xFF	; 255
    5d94:	42 e0       	ldi	r20, 0x02	; 2
    5d96:	23 e0       	ldi	r18, 0x03	; 3
    5d98:	47 c0       	rjmp	.+142    	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTB:*/

      case GPIO_PORTC:

         t_linkHndl = confInt( &PORTC,
    5d9a:	80 e4       	ldi	r24, 0x40	; 64
    5d9c:	96 e0       	ldi	r25, 0x06	; 6
    5d9e:	be 01       	movw	r22, r28
    5da0:	6c 5f       	subi	r22, 0xFC	; 252
    5da2:	7f 4f       	sbci	r23, 0xFF	; 255
    5da4:	44 e0       	ldi	r20, 0x04	; 4
    5da6:	25 e0       	ldi	r18, 0x05	; 5
    5da8:	3f c0       	rjmp	.+126    	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTC:*/

      case GPIO_PORTD:

         t_linkHndl = confInt( &PORTD,
    5daa:	80 e6       	ldi	r24, 0x60	; 96
    5dac:	96 e0       	ldi	r25, 0x06	; 6
    5dae:	be 01       	movw	r22, r28
    5db0:	6c 5f       	subi	r22, 0xFC	; 252
    5db2:	7f 4f       	sbci	r23, 0xFF	; 255
    5db4:	46 e0       	ldi	r20, 0x06	; 6
    5db6:	27 e0       	ldi	r18, 0x07	; 7
    5db8:	37 c0       	rjmp	.+110    	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTD:*/

      case GPIO_PORTE:

         t_linkHndl = confInt( &PORTE,
    5dba:	80 e8       	ldi	r24, 0x80	; 128
    5dbc:	96 e0       	ldi	r25, 0x06	; 6
    5dbe:	be 01       	movw	r22, r28
    5dc0:	6c 5f       	subi	r22, 0xFC	; 252
    5dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc4:	48 e0       	ldi	r20, 0x08	; 8
    5dc6:	29 e0       	ldi	r18, 0x09	; 9
    5dc8:	2f c0       	rjmp	.+94     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTE:*/

      case GPIO_PORTF:

         t_linkHndl = confInt( &PORTF,
    5dca:	80 ea       	ldi	r24, 0xA0	; 160
    5dcc:	96 e0       	ldi	r25, 0x06	; 6
    5dce:	be 01       	movw	r22, r28
    5dd0:	6c 5f       	subi	r22, 0xFC	; 252
    5dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd4:	4a e0       	ldi	r20, 0x0A	; 10
    5dd6:	2b e0       	ldi	r18, 0x0B	; 11
    5dd8:	27 c0       	rjmp	.+78     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTF:*/

      case GPIO_PORTH:

         t_linkHndl = confInt( &PORTH,
    5dda:	80 ee       	ldi	r24, 0xE0	; 224
    5ddc:	96 e0       	ldi	r25, 0x06	; 6
    5dde:	be 01       	movw	r22, r28
    5de0:	6c 5f       	subi	r22, 0xFC	; 252
    5de2:	7f 4f       	sbci	r23, 0xFF	; 255
    5de4:	4c e0       	ldi	r20, 0x0C	; 12
    5de6:	2d e0       	ldi	r18, 0x0D	; 13
    5de8:	1f c0       	rjmp	.+62     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTH:*/

      case GPIO_PORTJ:

         t_linkHndl = confInt( &PORTJ,
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	97 e0       	ldi	r25, 0x07	; 7
    5dee:	be 01       	movw	r22, r28
    5df0:	6c 5f       	subi	r22, 0xFC	; 252
    5df2:	7f 4f       	sbci	r23, 0xFF	; 255
    5df4:	4e e0       	ldi	r20, 0x0E	; 14
    5df6:	2f e0       	ldi	r18, 0x0F	; 15
    5df8:	17 c0       	rjmp	.+46     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTJ:*/

      case GPIO_PORTK:

         t_linkHndl = confInt( &PORTK,
    5dfa:	80 e2       	ldi	r24, 0x20	; 32
    5dfc:	97 e0       	ldi	r25, 0x07	; 7
    5dfe:	be 01       	movw	r22, r28
    5e00:	6c 5f       	subi	r22, 0xFC	; 252
    5e02:	7f 4f       	sbci	r23, 0xFF	; 255
    5e04:	40 e1       	ldi	r20, 0x10	; 16
    5e06:	21 e1       	ldi	r18, 0x11	; 17
    5e08:	0f c0       	rjmp	.+30     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTK:*/

      case GPIO_PORTQ:

         t_linkHndl = confInt( &PORTQ,
    5e0a:	80 ec       	ldi	r24, 0xC0	; 192
    5e0c:	97 e0       	ldi	r25, 0x07	; 7
    5e0e:	be 01       	movw	r22, r28
    5e10:	6c 5f       	subi	r22, 0xFC	; 252
    5e12:	7f 4f       	sbci	r23, 0xFF	; 255
    5e14:	42 e1       	ldi	r20, 0x12	; 18
    5e16:	23 e1       	ldi	r18, 0x13	; 19
    5e18:	07 c0       	rjmp	.+14     	; 0x5e28 <hal_requestGpioInt+0x118>

      break;/*End case GPIO_PORTQ:*/

      case GPIO_PORTR:

         t_linkHndl = confInt( &PORTR,
    5e1a:	80 ee       	ldi	r24, 0xE0	; 224
    5e1c:	97 e0       	ldi	r25, 0x07	; 7
    5e1e:	be 01       	movw	r22, r28
    5e20:	6c 5f       	subi	r22, 0xFC	; 252
    5e22:	7f 4f       	sbci	r23, 0xFF	; 255
    5e24:	44 e1       	ldi	r20, 0x14	; 20
    5e26:	25 e1       	ldi	r18, 0x15	; 21
    5e28:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <confInt>
    5e2c:	8a 83       	std	Y+2, r24	; 0x02
    5e2e:	9b 83       	std	Y+3, r25	; 0x03

      break;

   }/*End switch( t_port)*/

   HAL_END_CRITICAL();//Enable interrupts
    5e30:	89 81       	ldd	r24, Y+1	; 0x01
    5e32:	8f bf       	out	0x3f, r24	; 63

   return (t_GPIOHNDL)t_linkHndl;
    5e34:	8a 81       	ldd	r24, Y+2	; 0x02
    5e36:	9b 81       	ldd	r25, Y+3	; 0x03
    5e38:	04 c0       	rjmp	.+8      	; 0x5e42 <hal_requestGpioInt+0x132>

      break;/*End case GPIO_PORTR:*/

      default:

         HAL_END_CRITICAL();//Enable interrupts
    5e3a:	89 81       	ldd	r24, Y+1	; 0x01
    5e3c:	8f bf       	out	0x3f, r24	; 63
         return (t_GPIOHNDL)GPIO_INVALID_CMD;
    5e3e:	8c ef       	ldi	r24, 0xFC	; 252
    5e40:	9f ef       	ldi	r25, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return (t_GPIOHNDL)t_linkHndl;

}/*End hal_requestGpioInt*/
    5e42:	27 96       	adiw	r28, 0x07	; 7
    5e44:	cd bf       	out	0x3d, r28	; 61
    5e46:	de bf       	out	0x3e, r29	; 62
    5e48:	df 91       	pop	r29
    5e4a:	cf 91       	pop	r28
    5e4c:	08 95       	ret

00005e4e <hal_initThreadStack>:
                          t_parameters t_parms,
                          t_arguments t_args,
                          uint8_t *pc_stackPtr,
                          uint16_t s_endOfStackAdd,
                          uint16_t *ps_sP)
{
    5e4e:	ef 92       	push	r14
    5e50:	ff 92       	push	r15
    5e52:	0f 93       	push	r16
    5e54:	1f 93       	push	r17
    5e56:	cf 93       	push	r28
    5e58:	df 93       	push	r29
    5e5a:	e7 01       	movw	r28, r14
   /*------------------------------------------------------------------------*
    * Make sure the stack pointer is pointing to the address of the thread's
    * call back function..for some reason we need to shift this address left
    * by 8
    *------------------------------------------------------------------------*/
   i_funAdd = (uint32_t)((uint16_t)pt_function);
    5e5c:	a0 e0       	ldi	r26, 0x00	; 0
    5e5e:	b0 e0       	ldi	r27, 0x00	; 0
   i_funAdd = i_funAdd << 8;
    5e60:	ba 2f       	mov	r27, r26
    5e62:	a9 2f       	mov	r26, r25
    5e64:	98 2f       	mov	r25, r24
    5e66:	88 27       	eor	r24, r24

   *pc_stackPtr = i_funAdd & 0x000000FF;
    5e68:	f9 01       	movw	r30, r18
    5e6a:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 8) & 0x000000FF;
    5e6c:	31 97       	sbiw	r30, 0x01	; 1
    5e6e:	90 83       	st	Z, r25
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 16) & 0x000000FF;
    5e70:	f9 01       	movw	r30, r18
    5e72:	32 97       	sbiw	r30, 0x02	; 2
    5e74:	a0 83       	st	Z, r26
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 24) & 0x000000FF;
    5e76:	f9 01       	movw	r30, r18
    5e78:	33 97       	sbiw	r30, 0x03	; 3
    5e7a:	10 82       	st	Z, r1
   /*------------------------------------------------------------------------*
    * Initialize the rest of the data on the stack so that the context
    * restore function works properly when we call this thread for the first
    * time.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = 0x00; /*r0*/
    5e7c:	f9 01       	movw	r30, r18
    5e7e:	34 97       	sbiw	r30, 0x04	; 4
    5e80:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x80; /*SREG with interrupts enabled*/
    5e82:	f9 01       	movw	r30, r18
    5e84:	35 97       	sbiw	r30, 0x05	; 5
    5e86:	80 e8       	ldi	r24, 0x80	; 128
    5e88:	80 83       	st	Z, r24
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r1*/
    5e8a:	f9 01       	movw	r30, r18
    5e8c:	36 97       	sbiw	r30, 0x06	; 6
    5e8e:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r2*/
    5e90:	f9 01       	movw	r30, r18
    5e92:	37 97       	sbiw	r30, 0x07	; 7
    5e94:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r3*/
    5e96:	f9 01       	movw	r30, r18
    5e98:	38 97       	sbiw	r30, 0x08	; 8
    5e9a:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r4*/
    5e9c:	f9 01       	movw	r30, r18
    5e9e:	39 97       	sbiw	r30, 0x09	; 9
    5ea0:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r5*/
    5ea2:	f9 01       	movw	r30, r18
    5ea4:	3a 97       	sbiw	r30, 0x0a	; 10
    5ea6:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r6*/
    5ea8:	f9 01       	movw	r30, r18
    5eaa:	3b 97       	sbiw	r30, 0x0b	; 11
    5eac:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r7*/
    5eae:	f9 01       	movw	r30, r18
    5eb0:	3c 97       	sbiw	r30, 0x0c	; 12
    5eb2:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r8*/
    5eb4:	f9 01       	movw	r30, r18
    5eb6:	3d 97       	sbiw	r30, 0x0d	; 13
    5eb8:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r9*/
    5eba:	f9 01       	movw	r30, r18
    5ebc:	3e 97       	sbiw	r30, 0x0e	; 14
    5ebe:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r10*/
    5ec0:	f9 01       	movw	r30, r18
    5ec2:	3f 97       	sbiw	r30, 0x0f	; 15
    5ec4:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r11*/
    5ec6:	f9 01       	movw	r30, r18
    5ec8:	70 97       	sbiw	r30, 0x10	; 16
    5eca:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r12*/
    5ecc:	f9 01       	movw	r30, r18
    5ece:	71 97       	sbiw	r30, 0x11	; 17
    5ed0:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r13*/
    5ed2:	f9 01       	movw	r30, r18
    5ed4:	72 97       	sbiw	r30, 0x12	; 18
    5ed6:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r14*/
    5ed8:	f9 01       	movw	r30, r18
    5eda:	73 97       	sbiw	r30, 0x13	; 19
    5edc:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r15*/
    5ede:	f9 01       	movw	r30, r18
    5ee0:	74 97       	sbiw	r30, 0x14	; 20
    5ee2:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r16*/
    5ee4:	f9 01       	movw	r30, r18
    5ee6:	75 97       	sbiw	r30, 0x15	; 21
    5ee8:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r17*/
    5eea:	f9 01       	movw	r30, r18
    5eec:	76 97       	sbiw	r30, 0x16	; 22
    5eee:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r18*/
    5ef0:	f9 01       	movw	r30, r18
    5ef2:	77 97       	sbiw	r30, 0x17	; 23
    5ef4:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r19*/
    5ef6:	f9 01       	movw	r30, r18
    5ef8:	78 97       	sbiw	r30, 0x18	; 24
    5efa:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r20*/
    5efc:	f9 01       	movw	r30, r18
    5efe:	79 97       	sbiw	r30, 0x19	; 25
    5f00:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r21*/
    5f02:	f9 01       	movw	r30, r18
    5f04:	7a 97       	sbiw	r30, 0x1a	; 26
    5f06:	10 82       	st	Z, r1
   pc_stackPtr--;
   /*------------------------------------------------------------------------*
    * Function parameters are stored from left to right starting with CPU
    * register 25 and ending at CPU register 8.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = (uint8_t)t_args;         /*r22*/
    5f08:	f9 01       	movw	r30, r18
    5f0a:	7b 97       	sbiw	r30, 0x1b	; 27
    5f0c:	40 83       	st	Z, r20
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(t_args >> 8);  /*r23*/
    5f0e:	f9 01       	movw	r30, r18
    5f10:	7c 97       	sbiw	r30, 0x1c	; 28
    5f12:	50 83       	st	Z, r21
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)t_parms;        /*r24*/
    5f14:	f9 01       	movw	r30, r18
    5f16:	7d 97       	sbiw	r30, 0x1d	; 29
    5f18:	60 83       	st	Z, r22
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(t_parms >> 8); /*r25*/
    5f1a:	f9 01       	movw	r30, r18
    5f1c:	7e 97       	sbiw	r30, 0x1e	; 30
    5f1e:	70 83       	st	Z, r23
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r26*/
    5f20:	f9 01       	movw	r30, r18
    5f22:	7f 97       	sbiw	r30, 0x1f	; 31
    5f24:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r27*/
    5f26:	f9 01       	movw	r30, r18
    5f28:	b0 97       	sbiw	r30, 0x20	; 32
    5f2a:	10 82       	st	Z, r1
   /*------------------------------------------------------------------------*
    * Since the stack frame pointer (Y registers) is another way of reading
    * and writing to the stack by the compiler, we need to make sure it is
    * assigned to the starting location (end of stack) of the stack.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = (uint8_t)s_endOfStackAdd;        /*r28*/
    5f2c:	f9 01       	movw	r30, r18
    5f2e:	b1 97       	sbiw	r30, 0x21	; 33
    5f30:	00 83       	st	Z, r16
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(s_endOfStackAdd >> 8); /*r29*/
    5f32:	f9 01       	movw	r30, r18
    5f34:	b2 97       	sbiw	r30, 0x22	; 34
    5f36:	10 83       	st	Z, r17
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r30*/
    5f38:	f9 01       	movw	r30, r18
    5f3a:	b3 97       	sbiw	r30, 0x23	; 35
    5f3c:	10 82       	st	Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r31*/
    5f3e:	f9 01       	movw	r30, r18
    5f40:	b4 97       	sbiw	r30, 0x24	; 36
    5f42:	10 82       	st	Z, r1
   pc_stackPtr--;
    5f44:	25 52       	subi	r18, 0x25	; 37
    5f46:	30 40       	sbci	r19, 0x00	; 0

   /*------------------------------------------------------------------------*
    * Save the stack pointer
    *------------------------------------------------------------------------*/
   *ps_sP = (uint16_t)pc_stackPtr;
    5f48:	28 83       	st	Y, r18
    5f4a:	39 83       	std	Y+1, r19	; 0x01

    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	1f 91       	pop	r17
    5f52:	0f 91       	pop	r16
    5f54:	ff 90       	pop	r15
    5f56:	ef 90       	pop	r14
    5f58:	08 95       	ret

00005f5a <hal_configureIntLevel>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void hal_configureIntLevel(t_pmicLevel t_level)
{
   PMIC.CTRL |= t_level;
    5f5a:	e0 ea       	ldi	r30, 0xA0	; 160
    5f5c:	f0 e0       	ldi	r31, 0x00	; 0
    5f5e:	92 81       	ldd	r25, Z+2	; 0x02
    5f60:	98 2b       	or	r25, r24
    5f62:	92 83       	std	Z+2, r25	; 0x02
}/*End hal_configureIntLevel*/
    5f64:	08 95       	ret

00005f66 <processSpiInterrupt>:

}/*End processSlaveSpiChipSelectInt*/

static void processSpiInterrupt( t_spiChanHndl *pt_chanHndl,
                                 t_spiUserHndl *pt_activeUser)
{
    5f66:	0f 93       	push	r16
    5f68:	1f 93       	push	r17
    5f6a:	cf 93       	push	r28
    5f6c:	df 93       	push	r29
    5f6e:	8c 01       	movw	r16, r24
    5f70:	db 01       	movw	r26, r22

    if( pt_chanHndl->t_spiOp == SPI_MASTER)
    5f72:	ec 01       	movw	r28, r24
    5f74:	8e 81       	ldd	r24, Y+6	; 0x06
    5f76:	88 23       	and	r24, r24
    5f78:	09 f0       	breq	.+2      	; 0x5f7c <processSpiInterrupt+0x16>
    5f7a:	d4 c0       	rjmp	.+424    	; 0x6124 <processSpiInterrupt+0x1be>
/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static bool updateBuffersMast( t_spiUserHndl *pt_handle)
{
    int8_t *pc_rxBuf = pt_handle->pc_rxData;
    5f7c:	14 96       	adiw	r26, 0x04	; 4
    5f7e:	8d 91       	ld	r24, X+
    5f80:	9c 91       	ld	r25, X
    5f82:	15 97       	sbiw	r26, 0x05	; 5
    int8_t *pc_txBuf = pt_handle->pc_txData;
    5f84:	12 96       	adiw	r26, 0x02	; 2
    5f86:	cd 91       	ld	r28, X+
    5f88:	dc 91       	ld	r29, X
    5f8a:	13 97       	sbiw	r26, 0x03	; 3
    5f8c:	1c 96       	adiw	r26, 0x0c	; 12
    5f8e:	ed 91       	ld	r30, X+
    5f90:	fc 91       	ld	r31, X
    5f92:	1d 97       	sbiw	r26, 0x0d	; 13
    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
   {
       pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5f94:	07 80       	ldd	r0, Z+7	; 0x07
    5f96:	f0 85       	ldd	r31, Z+8	; 0x08
    5f98:	e0 2d       	mov	r30, r0
    uint16_t *ps_bufIndex = &pt_handle->s_bufIndex;

    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
    5f9a:	20 e2       	ldi	r18, 0x20	; 32
    5f9c:	8e 3c       	cpi	r24, 0xCE	; 206
    5f9e:	92 07       	cpc	r25, r18
    5fa0:	49 f0       	breq	.+18     	; 0x5fb4 <processSpiInterrupt+0x4e>
   {
       pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5fa2:	23 81       	ldd	r18, Z+3	; 0x03
    5fa4:	18 96       	adiw	r26, 0x08	; 8
    5fa6:	ed 91       	ld	r30, X+
    5fa8:	fc 91       	ld	r31, X
    5faa:	19 97       	sbiw	r26, 0x09	; 9
    5fac:	e8 0f       	add	r30, r24
    5fae:	f9 1f       	adc	r31, r25
    5fb0:	20 83       	st	Z, r18
    5fb2:	03 c0       	rjmp	.+6      	; 0x5fba <processSpiInterrupt+0x54>
    }
   else
      pc_rxBuf[0] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5fb4:	83 81       	ldd	r24, Z+3	; 0x03
    5fb6:	80 93 ce 20 	sts	0x20CE, r24

   (*ps_bufIndex)++;
    5fba:	18 96       	adiw	r26, 0x08	; 8
    5fbc:	2d 91       	ld	r18, X+
    5fbe:	3c 91       	ld	r19, X
    5fc0:	19 97       	sbiw	r26, 0x09	; 9
    5fc2:	2f 5f       	subi	r18, 0xFF	; 255
    5fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc6:	18 96       	adiw	r26, 0x08	; 8
    5fc8:	2d 93       	st	X+, r18
    5fca:	3c 93       	st	X, r19
    5fcc:	19 97       	sbiw	r26, 0x09	; 9

    /*------------------------------------------------------------------------*
     * Is there more data that needs to be tx'd?
     *------------------------------------------------------------------------*/
    if( (*ps_bufIndex) < pt_handle->s_bufLength)
    5fce:	16 96       	adiw	r26, 0x06	; 6
    5fd0:	8d 91       	ld	r24, X+
    5fd2:	9c 91       	ld	r25, X
    5fd4:	17 97       	sbiw	r26, 0x07	; 7
    5fd6:	28 17       	cp	r18, r24
    5fd8:	39 07       	cpc	r19, r25
    5fda:	80 f4       	brcc	.+32     	; 0x5ffc <processSpiInterrupt+0x96>
    5fdc:	1c 96       	adiw	r26, 0x0c	; 12
    5fde:	ed 91       	ld	r30, X+
    5fe0:	fc 91       	ld	r31, X
    5fe2:	1d 97       	sbiw	r26, 0x0d	; 13
    {
      if( pc_txBuf != (int8_t *)&gc_tempBuf)
           pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[(*ps_bufIndex)];
    5fe4:	07 80       	ldd	r0, Z+7	; 0x07
    5fe6:	f0 85       	ldd	r31, Z+8	; 0x08
    5fe8:	e0 2d       	mov	r30, r0
    /*------------------------------------------------------------------------*
     * Is there more data that needs to be tx'd?
     *------------------------------------------------------------------------*/
    if( (*ps_bufIndex) < pt_handle->s_bufLength)
    {
      if( pc_txBuf != (int8_t *)&gc_tempBuf)
    5fea:	40 e2       	ldi	r20, 0x20	; 32
    5fec:	ce 3c       	cpi	r28, 0xCE	; 206
    5fee:	d4 07       	cpc	r29, r20
    5ff0:	11 f0       	breq	.+4      	; 0x5ff6 <processSpiInterrupt+0x90>
           pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[(*ps_bufIndex)];
    5ff2:	c2 0f       	add	r28, r18
    5ff4:	d3 1f       	adc	r29, r19
      else
         pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[0];
    5ff6:	88 81       	ld	r24, Y
    5ff8:	83 83       	std	Z+3, r24	; 0x03
    5ffa:	1e c1       	rjmp	.+572    	; 0x6238 <processSpiInterrupt+0x2d2>
        {

          /*---------------------------------------------------------------*
           * Release spi channel
           *---------------------------------------------------------------*/
          if( pt_activeUser->b_enCs == true)
    5ffc:	50 96       	adiw	r26, 0x10	; 16
    5ffe:	8c 91       	ld	r24, X
    6000:	50 97       	sbiw	r26, 0x10	; 16
    6002:	88 23       	and	r24, r24
    6004:	09 f4       	brne	.+2      	; 0x6008 <processSpiInterrupt+0xa2>
    6006:	7d c0       	rjmp	.+250    	; 0x6102 <processSpiInterrupt+0x19c>
          {
             hal_gpioOn( pt_activeUser->t_csPort,
    6008:	1b 96       	adiw	r26, 0x0b	; 11
    600a:	8c 91       	ld	r24, X
    600c:	1b 97       	sbiw	r26, 0x0b	; 11
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    600e:	1a 96       	adiw	r26, 0x0a	; 10
    6010:	9c 91       	ld	r25, X
    6012:	1a 97       	sbiw	r26, 0x0a	; 10
    6014:	95 30       	cpi	r25, 0x05	; 5
    6016:	09 f4       	brne	.+2      	; 0x601a <processSpiInterrupt+0xb4>
    6018:	4a c0       	rjmp	.+148    	; 0x60ae <processSpiInterrupt+0x148>
    601a:	96 30       	cpi	r25, 0x06	; 6
    601c:	80 f4       	brcc	.+32     	; 0x603e <processSpiInterrupt+0xd8>
    601e:	92 30       	cpi	r25, 0x02	; 2
    6020:	81 f1       	breq	.+96     	; 0x6082 <processSpiInterrupt+0x11c>
    6022:	93 30       	cpi	r25, 0x03	; 3
    6024:	30 f4       	brcc	.+12     	; 0x6032 <processSpiInterrupt+0xcc>
    6026:	99 23       	and	r25, r25
    6028:	e1 f0       	breq	.+56     	; 0x6062 <processSpiInterrupt+0xfc>
    602a:	91 30       	cpi	r25, 0x01	; 1
    602c:	09 f0       	breq	.+2      	; 0x6030 <processSpiInterrupt+0xca>
    602e:	69 c0       	rjmp	.+210    	; 0x6102 <processSpiInterrupt+0x19c>
    6030:	20 c0       	rjmp	.+64     	; 0x6072 <processSpiInterrupt+0x10c>
    6032:	93 30       	cpi	r25, 0x03	; 3
    6034:	71 f1       	breq	.+92     	; 0x6092 <processSpiInterrupt+0x12c>
    6036:	94 30       	cpi	r25, 0x04	; 4
    6038:	09 f0       	breq	.+2      	; 0x603c <processSpiInterrupt+0xd6>
    603a:	63 c0       	rjmp	.+198    	; 0x6102 <processSpiInterrupt+0x19c>
    603c:	31 c0       	rjmp	.+98     	; 0x60a0 <processSpiInterrupt+0x13a>
    603e:	98 30       	cpi	r25, 0x08	; 8
    6040:	09 f4       	brne	.+2      	; 0x6044 <processSpiInterrupt+0xde>
    6042:	4a c0       	rjmp	.+148    	; 0x60d8 <processSpiInterrupt+0x172>
    6044:	99 30       	cpi	r25, 0x09	; 9
    6046:	30 f4       	brcc	.+12     	; 0x6054 <processSpiInterrupt+0xee>
    6048:	96 30       	cpi	r25, 0x06	; 6
    604a:	c1 f1       	breq	.+112    	; 0x60bc <processSpiInterrupt+0x156>
    604c:	97 30       	cpi	r25, 0x07	; 7
    604e:	09 f0       	breq	.+2      	; 0x6052 <processSpiInterrupt+0xec>
    6050:	58 c0       	rjmp	.+176    	; 0x6102 <processSpiInterrupt+0x19c>
    6052:	3b c0       	rjmp	.+118    	; 0x60ca <processSpiInterrupt+0x164>
    6054:	99 30       	cpi	r25, 0x09	; 9
    6056:	09 f4       	brne	.+2      	; 0x605a <processSpiInterrupt+0xf4>
    6058:	46 c0       	rjmp	.+140    	; 0x60e6 <processSpiInterrupt+0x180>
    605a:	9a 30       	cpi	r25, 0x0A	; 10
    605c:	09 f0       	breq	.+2      	; 0x6060 <processSpiInterrupt+0xfa>
    605e:	51 c0       	rjmp	.+162    	; 0x6102 <processSpiInterrupt+0x19c>
    6060:	49 c0       	rjmp	.+146    	; 0x60f4 <processSpiInterrupt+0x18e>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    6062:	90 91 00 06 	lds	r25, 0x0600
    6066:	98 23       	and	r25, r24
    6068:	09 f4       	brne	.+2      	; 0x606c <processSpiInterrupt+0x106>
    606a:	4b c0       	rjmp	.+150    	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    606c:	e0 e0       	ldi	r30, 0x00	; 0
    606e:	f6 e0       	ldi	r31, 0x06	; 6
    6070:	47 c0       	rjmp	.+142    	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    6072:	90 91 20 06 	lds	r25, 0x0620
    6076:	98 23       	and	r25, r24
    6078:	09 f4       	brne	.+2      	; 0x607c <processSpiInterrupt+0x116>
    607a:	43 c0       	rjmp	.+134    	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    607c:	e0 e2       	ldi	r30, 0x20	; 32
    607e:	f6 e0       	ldi	r31, 0x06	; 6
    6080:	3f c0       	rjmp	.+126    	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    6082:	90 91 40 06 	lds	r25, 0x0640
    6086:	98 23       	and	r25, r24
    6088:	09 f4       	brne	.+2      	; 0x608c <processSpiInterrupt+0x126>
    608a:	3b c0       	rjmp	.+118    	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    608c:	e0 e4       	ldi	r30, 0x40	; 64
    608e:	f6 e0       	ldi	r31, 0x06	; 6
    6090:	37 c0       	rjmp	.+110    	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    6092:	90 91 60 06 	lds	r25, 0x0660
    6096:	98 23       	and	r25, r24
    6098:	a1 f1       	breq	.+104    	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    609a:	e0 e6       	ldi	r30, 0x60	; 96
    609c:	f6 e0       	ldi	r31, 0x06	; 6
    609e:	30 c0       	rjmp	.+96     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    60a0:	90 91 80 06 	lds	r25, 0x0680
    60a4:	98 23       	and	r25, r24
    60a6:	69 f1       	breq	.+90     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    60a8:	e0 e8       	ldi	r30, 0x80	; 128
    60aa:	f6 e0       	ldi	r31, 0x06	; 6
    60ac:	29 c0       	rjmp	.+82     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    60ae:	90 91 a0 06 	lds	r25, 0x06A0
    60b2:	98 23       	and	r25, r24
    60b4:	31 f1       	breq	.+76     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    60b6:	e0 ea       	ldi	r30, 0xA0	; 160
    60b8:	f6 e0       	ldi	r31, 0x06	; 6
    60ba:	22 c0       	rjmp	.+68     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    60bc:	90 91 e0 06 	lds	r25, 0x06E0
    60c0:	98 23       	and	r25, r24
    60c2:	f9 f0       	breq	.+62     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    60c4:	e0 ee       	ldi	r30, 0xE0	; 224
    60c6:	f6 e0       	ldi	r31, 0x06	; 6
    60c8:	1b c0       	rjmp	.+54     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    60ca:	90 91 00 07 	lds	r25, 0x0700
    60ce:	98 23       	and	r25, r24
    60d0:	c1 f0       	breq	.+48     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    60d2:	e0 e0       	ldi	r30, 0x00	; 0
    60d4:	f7 e0       	ldi	r31, 0x07	; 7
    60d6:	14 c0       	rjmp	.+40     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    60d8:	90 91 20 07 	lds	r25, 0x0720
    60dc:	98 23       	and	r25, r24
    60de:	89 f0       	breq	.+34     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    60e0:	e0 e2       	ldi	r30, 0x20	; 32
    60e2:	f7 e0       	ldi	r31, 0x07	; 7
    60e4:	0d c0       	rjmp	.+26     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    60e6:	90 91 c0 07 	lds	r25, 0x07C0
    60ea:	98 23       	and	r25, r24
    60ec:	51 f0       	breq	.+20     	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    60ee:	e0 ec       	ldi	r30, 0xC0	; 192
    60f0:	f7 e0       	ldi	r31, 0x07	; 7
    60f2:	06 c0       	rjmp	.+12     	; 0x6100 <processSpiInterrupt+0x19a>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    60f4:	90 91 e0 07 	lds	r25, 0x07E0
    60f8:	98 23       	and	r25, r24
    60fa:	19 f0       	breq	.+6      	; 0x6102 <processSpiInterrupt+0x19c>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    60fc:	e0 ee       	ldi	r30, 0xE0	; 224
    60fe:	f7 e0       	ldi	r31, 0x07	; 7
    6100:	85 83       	std	Z+5, r24	; 0x05

          /*---------------------------------------------------------------*
           * Execute the call-back function, returning the rx buffer and
           * the size of the data.
           *---------------------------------------------------------------*/
          if( pt_activeUser->pf_funPtr != NULL)
    6102:	ed 91       	ld	r30, X+
    6104:	fc 91       	ld	r31, X
    6106:	11 97       	sbiw	r26, 0x01	; 1
    6108:	30 97       	sbiw	r30, 0x00	; 0
    610a:	49 f0       	breq	.+18     	; 0x611e <processSpiInterrupt+0x1b8>
            pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    610c:	18 96       	adiw	r26, 0x08	; 8
    610e:	6d 91       	ld	r22, X+
    6110:	7c 91       	ld	r23, X
    6112:	19 97       	sbiw	r26, 0x09	; 9
    6114:	14 96       	adiw	r26, 0x04	; 4
    6116:	8d 91       	ld	r24, X+
    6118:	9c 91       	ld	r25, X
    611a:	15 97       	sbiw	r26, 0x05	; 5
    611c:	19 95       	eicall
                                           pt_activeUser->s_bufIndex);

          /*---------------------------------------------------------------*
           * Release the spi bus.
           *---------------------------------------------------------------*/
          pt_chanHndl->b_busLocked = false;
    611e:	e8 01       	movw	r28, r16
    6120:	19 86       	std	Y+9, r1	; 0x09
    6122:	8a c0       	rjmp	.+276    	; 0x6238 <processSpiInterrupt+0x2d2>
    {
       /*------------------------------------------------------------------*
        * Is the chip select low for this device? Fill data buffer until
        * the chip select goes high.
        *------------------------------------------------------------------*/
       if( hal_isGpioHigh( pt_activeUser->t_csPort,
    6124:	1b 96       	adiw	r26, 0x0b	; 11
    6126:	9c 91       	ld	r25, X
    6128:	1b 97       	sbiw	r26, 0x0b	; 11
   }/*End hal_gpioOff*/

   static inline bool __attribute__ ( (always_inline)) hal_isGpioHigh(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      switch( t_port)
    612a:	1a 96       	adiw	r26, 0x0a	; 10
    612c:	8c 91       	ld	r24, X
    612e:	1a 97       	sbiw	r26, 0x0a	; 10
    6130:	85 30       	cpi	r24, 0x05	; 5
    6132:	69 f1       	breq	.+90     	; 0x618e <processSpiInterrupt+0x228>
    6134:	86 30       	cpi	r24, 0x06	; 6
    6136:	70 f4       	brcc	.+28     	; 0x6154 <processSpiInterrupt+0x1ee>
    6138:	82 30       	cpi	r24, 0x02	; 2
    613a:	01 f1       	breq	.+64     	; 0x617c <processSpiInterrupt+0x216>
    613c:	83 30       	cpi	r24, 0x03	; 3
    613e:	28 f4       	brcc	.+10     	; 0x614a <processSpiInterrupt+0x1e4>
    6140:	88 23       	and	r24, r24
    6142:	b1 f0       	breq	.+44     	; 0x6170 <processSpiInterrupt+0x20a>
    6144:	81 30       	cpi	r24, 0x01	; 1
    6146:	b9 f5       	brne	.+110    	; 0x61b6 <processSpiInterrupt+0x250>
    6148:	16 c0       	rjmp	.+44     	; 0x6176 <processSpiInterrupt+0x210>
    614a:	83 30       	cpi	r24, 0x03	; 3
    614c:	d1 f0       	breq	.+52     	; 0x6182 <processSpiInterrupt+0x21c>
    614e:	84 30       	cpi	r24, 0x04	; 4
    6150:	91 f5       	brne	.+100    	; 0x61b6 <processSpiInterrupt+0x250>
    6152:	1a c0       	rjmp	.+52     	; 0x6188 <processSpiInterrupt+0x222>
    6154:	88 30       	cpi	r24, 0x08	; 8
    6156:	21 f1       	breq	.+72     	; 0x61a0 <processSpiInterrupt+0x23a>
    6158:	89 30       	cpi	r24, 0x09	; 9
    615a:	28 f4       	brcc	.+10     	; 0x6166 <processSpiInterrupt+0x200>
    615c:	86 30       	cpi	r24, 0x06	; 6
    615e:	d1 f0       	breq	.+52     	; 0x6194 <processSpiInterrupt+0x22e>
    6160:	87 30       	cpi	r24, 0x07	; 7
    6162:	49 f5       	brne	.+82     	; 0x61b6 <processSpiInterrupt+0x250>
    6164:	1a c0       	rjmp	.+52     	; 0x619a <processSpiInterrupt+0x234>
    6166:	89 30       	cpi	r24, 0x09	; 9
    6168:	f1 f0       	breq	.+60     	; 0x61a6 <processSpiInterrupt+0x240>
    616a:	8a 30       	cpi	r24, 0x0A	; 10
    616c:	21 f5       	brne	.+72     	; 0x61b6 <processSpiInterrupt+0x250>
    616e:	1e c0       	rjmp	.+60     	; 0x61ac <processSpiInterrupt+0x246>
      {
         case GPIO_PORTA:

            return (bool)(PORTA.IN & c_pin);
    6170:	80 91 08 06 	lds	r24, 0x0608
    6174:	1d c0       	rjmp	.+58     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTA:*/

         case GPIO_PORTB:

            return (bool)(PORTB.IN & c_pin);
    6176:	80 91 28 06 	lds	r24, 0x0628
    617a:	1a c0       	rjmp	.+52     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTB:*/

         case GPIO_PORTC:

            return (bool)(PORTC.IN & c_pin);
    617c:	80 91 48 06 	lds	r24, 0x0648
    6180:	17 c0       	rjmp	.+46     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTC:*/

         case GPIO_PORTD:

            return (bool)(PORTD.IN & c_pin);
    6182:	80 91 68 06 	lds	r24, 0x0668
    6186:	14 c0       	rjmp	.+40     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTD:*/

         case GPIO_PORTE:

            return (bool)(PORTE.IN & c_pin);
    6188:	80 91 88 06 	lds	r24, 0x0688
    618c:	11 c0       	rjmp	.+34     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTE:*/

         case GPIO_PORTF:

            return (bool)(PORTF.IN & c_pin);
    618e:	80 91 a8 06 	lds	r24, 0x06A8
    6192:	0e c0       	rjmp	.+28     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTF:*/

         case GPIO_PORTH:

            return (bool)(PORTH.IN & c_pin);
    6194:	80 91 e8 06 	lds	r24, 0x06E8
    6198:	0b c0       	rjmp	.+22     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTH:*/

         case GPIO_PORTJ:

            return (bool)(PORTJ.IN & c_pin);
    619a:	80 91 08 07 	lds	r24, 0x0708
    619e:	08 c0       	rjmp	.+16     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTJ:*/

         case GPIO_PORTK:

            return (bool)(PORTK.IN & c_pin);
    61a0:	80 91 28 07 	lds	r24, 0x0728
    61a4:	05 c0       	rjmp	.+10     	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTK:*/

         case GPIO_PORTQ:

            return (bool)(PORTQ.IN & c_pin);
    61a6:	80 91 c8 07 	lds	r24, 0x07C8
    61aa:	02 c0       	rjmp	.+4      	; 0x61b0 <processSpiInterrupt+0x24a>

         break;/*End case GPIO_PORTQ:*/

         case GPIO_PORTR:

            return (bool)(PORTR.IN & c_pin);
    61ac:	80 91 e8 07 	lds	r24, 0x07E8
    61b0:	89 23       	and	r24, r25
    61b2:	09 f0       	breq	.+2      	; 0x61b6 <processSpiInterrupt+0x250>
    61b4:	41 c0       	rjmp	.+130    	; 0x6238 <processSpiInterrupt+0x2d2>

}/*End updateBuffersMast*/

static bool updateBuffersSlave( t_spiUserHndl *pt_handle)
{
    int8_t *pc_rxBuf = pt_handle->pc_rxData;
    61b6:	14 96       	adiw	r26, 0x04	; 4
    61b8:	8d 91       	ld	r24, X+
    61ba:	9c 91       	ld	r25, X
    61bc:	15 97       	sbiw	r26, 0x05	; 5
    int8_t *pc_txBuf = pt_handle->pc_txData;
    61be:	12 96       	adiw	r26, 0x02	; 2
    61c0:	2d 91       	ld	r18, X+
    61c2:	3c 91       	ld	r19, X
    61c4:	13 97       	sbiw	r26, 0x03	; 3
    61c6:	1c 96       	adiw	r26, 0x0c	; 12
    61c8:	ed 91       	ld	r30, X+
    61ca:	fc 91       	ld	r31, X
    61cc:	1d 97       	sbiw	r26, 0x0d	; 13
    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
   {
      pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    61ce:	07 80       	ldd	r0, Z+7	; 0x07
    61d0:	f0 85       	ldd	r31, Z+8	; 0x08
    61d2:	e0 2d       	mov	r30, r0
    uint16_t *ps_bufIndex = &pt_handle->s_bufIndex;

    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
    61d4:	d0 e2       	ldi	r29, 0x20	; 32
    61d6:	8e 3c       	cpi	r24, 0xCE	; 206
    61d8:	9d 07       	cpc	r25, r29
    61da:	49 f0       	breq	.+18     	; 0x61ee <processSpiInterrupt+0x288>
   {
      pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    61dc:	43 81       	ldd	r20, Z+3	; 0x03
    61de:	18 96       	adiw	r26, 0x08	; 8
    61e0:	ed 91       	ld	r30, X+
    61e2:	fc 91       	ld	r31, X
    61e4:	19 97       	sbiw	r26, 0x09	; 9
    61e6:	e8 0f       	add	r30, r24
    61e8:	f9 1f       	adc	r31, r25
    61ea:	40 83       	st	Z, r20
    61ec:	03 c0       	rjmp	.+6      	; 0x61f4 <processSpiInterrupt+0x28e>
   }
   else
      pc_rxBuf[0] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    61ee:	83 81       	ldd	r24, Z+3	; 0x03
    61f0:	80 93 ce 20 	sts	0x20CE, r24
    61f4:	1c 96       	adiw	r26, 0x0c	; 12
    61f6:	ed 91       	ld	r30, X+
    61f8:	fc 91       	ld	r31, X
    61fa:	1d 97       	sbiw	r26, 0x0d	; 13

   if( pc_txBuf != (int8_t *)&gc_tempBuf)
    61fc:	40 e2       	ldi	r20, 0x20	; 32
    61fe:	2e 3c       	cpi	r18, 0xCE	; 206
    6200:	34 07       	cpc	r19, r20
    6202:	59 f0       	breq	.+22     	; 0x621a <processSpiInterrupt+0x2b4>
        pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[(*ps_bufIndex)];
    6204:	c7 81       	ldd	r28, Z+7	; 0x07
    6206:	d0 85       	ldd	r29, Z+8	; 0x08
    6208:	18 96       	adiw	r26, 0x08	; 8
    620a:	ed 91       	ld	r30, X+
    620c:	fc 91       	ld	r31, X
    620e:	19 97       	sbiw	r26, 0x09	; 9
    6210:	e2 0f       	add	r30, r18
    6212:	f3 1f       	adc	r31, r19
    6214:	80 81       	ld	r24, Z
    6216:	8b 83       	std	Y+3, r24	; 0x03
    6218:	06 c0       	rjmp	.+12     	; 0x6226 <processSpiInterrupt+0x2c0>
   else
      pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[0];
    621a:	07 80       	ldd	r0, Z+7	; 0x07
    621c:	f0 85       	ldd	r31, Z+8	; 0x08
    621e:	e0 2d       	mov	r30, r0
    6220:	e9 01       	movw	r28, r18
    6222:	88 81       	ld	r24, Y
    6224:	83 83       	std	Z+3, r24	; 0x03

   (*ps_bufIndex)++;
    6226:	18 96       	adiw	r26, 0x08	; 8
    6228:	8d 91       	ld	r24, X+
    622a:	9c 91       	ld	r25, X
    622c:	19 97       	sbiw	r26, 0x09	; 9
    622e:	01 96       	adiw	r24, 0x01	; 1
    6230:	18 96       	adiw	r26, 0x08	; 8
    6232:	8d 93       	st	X+, r24
    6234:	9c 93       	st	X, r25
    6236:	19 97       	sbiw	r26, 0x09	; 9

       }

    }

}/*End processSpiInterrupt*/
    6238:	df 91       	pop	r29
    623a:	cf 91       	pop	r28
    623c:	1f 91       	pop	r17
    623e:	0f 91       	pop	r16
    6240:	08 95       	ret

00006242 <findSpiElement>:
   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIF_INT_vect)*/

static t_spiChanHndl *findSpiElement( t_spiChanId t_id)
{
    6242:	cf 93       	push	r28
    6244:	df 93       	push	r29
    6246:	0f 92       	push	r0
    6248:	0f 92       	push	r0
    624a:	cd b7       	in	r28, 0x3d	; 61
    624c:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the spi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_spiChanHndlList, s_count)
    624e:	e0 91 c0 20 	lds	r30, 0x20C0
    6252:	f0 91 c1 20 	lds	r31, 0x20C1
    6256:	22 81       	ldd	r18, Z+2	; 0x02
    6258:	33 81       	ldd	r19, Z+3	; 0x03
    625a:	e0 91 c0 20 	lds	r30, 0x20C0
    625e:	f0 91 c1 20 	lds	r31, 0x20C1
    6262:	0c c0       	rjmp	.+24     	; 0x627c <findSpiElement+0x3a>
   {
      pt_element = (t_spiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    6264:	e9 81       	ldd	r30, Y+1	; 0x01
    6266:	fa 81       	ldd	r31, Y+2	; 0x02
    6268:	01 90       	ld	r0, Z+
    626a:	f0 81       	ld	r31, Z
    626c:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    626e:	90 81       	ld	r25, Z
    6270:	98 17       	cp	r25, r24
    6272:	69 f0       	breq	.+26     	; 0x628e <findSpiElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the spi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_spiChanHndlList, s_count)
    6274:	21 50       	subi	r18, 0x01	; 1
    6276:	30 40       	sbci	r19, 0x00	; 0
    6278:	e9 81       	ldd	r30, Y+1	; 0x01
    627a:	fa 81       	ldd	r31, Y+2	; 0x02
    627c:	40 85       	ldd	r20, Z+8	; 0x08
    627e:	51 85       	ldd	r21, Z+9	; 0x09
    6280:	49 83       	std	Y+1, r20	; 0x01
    6282:	5a 83       	std	Y+2, r21	; 0x02
    6284:	12 16       	cp	r1, r18
    6286:	13 06       	cpc	r1, r19
    6288:	6c f3       	brlt	.-38     	; 0x6264 <findSpiElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open spi module
    * list.
    *------------------------------------------------------------------------*/
   return NULL;
    628a:	e0 e0       	ldi	r30, 0x00	; 0
    628c:	f0 e0       	ldi	r31, 0x00	; 0

}/*End findSpiElement*/
    628e:	cf 01       	movw	r24, r30
    6290:	0f 90       	pop	r0
    6292:	0f 90       	pop	r0
    6294:	df 91       	pop	r29
    6296:	cf 91       	pop	r28
    6298:	08 95       	ret

0000629a <processMasterSpiRxDmaInt>:

}/*End updateBuffersSlave*/

static void processMasterSpiRxDmaInt( t_spiChanHndl *pt_chanHndl,
                                      t_spiUserHndl *pt_activeUser)
{
    629a:	0f 93       	push	r16
    629c:	1f 93       	push	r17
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	8c 01       	movw	r16, r24
    62a4:	eb 01       	movw	r28, r22
    *------------------------------------------------------------------------*/

   /*------------------------------------------------------------------------*
    * Was this a transaction issued by a call to 'hal_spiWriteBlock'?
    *------------------------------------------------------------------------*/
   if( pt_activeUser->pc_rxData == (int8_t *)&gc_tempBuf) /*Yes*/
    62a6:	8c 81       	ldd	r24, Y+4	; 0x04
    62a8:	9d 81       	ldd	r25, Y+5	; 0x05
    62aa:	20 e2       	ldi	r18, 0x20	; 32
    62ac:	8e 3c       	cpi	r24, 0xCE	; 206
    62ae:	92 07       	cpc	r25, r18
    62b0:	19 f4       	brne	.+6      	; 0x62b8 <processMasterSpiRxDmaInt+0x1e>
   {
      /*---------------------------------------------------------------------*
       * Receive buffer was fixed...
       *---------------------------------------------------------------------*/
      pt_activeUser->s_bufIndex = 1;
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	05 c0       	rjmp	.+10     	; 0x62c2 <processMasterSpiRxDmaInt+0x28>
   }
   else /*No*/
   {
      pt_activeUser->s_bufIndex =
      hal_getDmaTransferCount( pt_chanHndl->t_rxDmaHndl);
    62b8:	f8 01       	movw	r30, r16
    62ba:	80 89       	ldd	r24, Z+16	; 0x10
    62bc:	91 89       	ldd	r25, Z+17	; 0x11
    62be:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <hal_getDmaTransferCount>
       *---------------------------------------------------------------------*/
      pt_activeUser->s_bufIndex = 1;
   }
   else /*No*/
   {
      pt_activeUser->s_bufIndex =
    62c2:	88 87       	std	Y+8, r24	; 0x08
    62c4:	99 87       	std	Y+9, r25	; 0x09
   }

   /*------------------------------------------------------------------------*
    * Release spi channel
    *------------------------------------------------------------------------*/
    if( pt_activeUser->b_enCs == true)
    62c6:	88 89       	ldd	r24, Y+16	; 0x10
    62c8:	88 23       	and	r24, r24
    62ca:	09 f4       	brne	.+2      	; 0x62ce <processMasterSpiRxDmaInt+0x34>
    62cc:	79 c0       	rjmp	.+242    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
   {
      hal_gpioOn( pt_activeUser->t_csPort,
    62ce:	8b 85       	ldd	r24, Y+11	; 0x0b
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    62d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d2:	95 30       	cpi	r25, 0x05	; 5
    62d4:	09 f4       	brne	.+2      	; 0x62d8 <processMasterSpiRxDmaInt+0x3e>
    62d6:	4a c0       	rjmp	.+148    	; 0x636c <processMasterSpiRxDmaInt+0xd2>
    62d8:	96 30       	cpi	r25, 0x06	; 6
    62da:	80 f4       	brcc	.+32     	; 0x62fc <processMasterSpiRxDmaInt+0x62>
    62dc:	92 30       	cpi	r25, 0x02	; 2
    62de:	81 f1       	breq	.+96     	; 0x6340 <processMasterSpiRxDmaInt+0xa6>
    62e0:	93 30       	cpi	r25, 0x03	; 3
    62e2:	30 f4       	brcc	.+12     	; 0x62f0 <processMasterSpiRxDmaInt+0x56>
    62e4:	99 23       	and	r25, r25
    62e6:	e1 f0       	breq	.+56     	; 0x6320 <processMasterSpiRxDmaInt+0x86>
    62e8:	91 30       	cpi	r25, 0x01	; 1
    62ea:	09 f0       	breq	.+2      	; 0x62ee <processMasterSpiRxDmaInt+0x54>
    62ec:	69 c0       	rjmp	.+210    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
    62ee:	20 c0       	rjmp	.+64     	; 0x6330 <processMasterSpiRxDmaInt+0x96>
    62f0:	93 30       	cpi	r25, 0x03	; 3
    62f2:	71 f1       	breq	.+92     	; 0x6350 <processMasterSpiRxDmaInt+0xb6>
    62f4:	94 30       	cpi	r25, 0x04	; 4
    62f6:	09 f0       	breq	.+2      	; 0x62fa <processMasterSpiRxDmaInt+0x60>
    62f8:	63 c0       	rjmp	.+198    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
    62fa:	31 c0       	rjmp	.+98     	; 0x635e <processMasterSpiRxDmaInt+0xc4>
    62fc:	98 30       	cpi	r25, 0x08	; 8
    62fe:	09 f4       	brne	.+2      	; 0x6302 <processMasterSpiRxDmaInt+0x68>
    6300:	4a c0       	rjmp	.+148    	; 0x6396 <processMasterSpiRxDmaInt+0xfc>
    6302:	99 30       	cpi	r25, 0x09	; 9
    6304:	30 f4       	brcc	.+12     	; 0x6312 <processMasterSpiRxDmaInt+0x78>
    6306:	96 30       	cpi	r25, 0x06	; 6
    6308:	c1 f1       	breq	.+112    	; 0x637a <processMasterSpiRxDmaInt+0xe0>
    630a:	97 30       	cpi	r25, 0x07	; 7
    630c:	09 f0       	breq	.+2      	; 0x6310 <processMasterSpiRxDmaInt+0x76>
    630e:	58 c0       	rjmp	.+176    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
    6310:	3b c0       	rjmp	.+118    	; 0x6388 <processMasterSpiRxDmaInt+0xee>
    6312:	99 30       	cpi	r25, 0x09	; 9
    6314:	09 f4       	brne	.+2      	; 0x6318 <processMasterSpiRxDmaInt+0x7e>
    6316:	46 c0       	rjmp	.+140    	; 0x63a4 <processMasterSpiRxDmaInt+0x10a>
    6318:	9a 30       	cpi	r25, 0x0A	; 10
    631a:	09 f0       	breq	.+2      	; 0x631e <processMasterSpiRxDmaInt+0x84>
    631c:	51 c0       	rjmp	.+162    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
    631e:	49 c0       	rjmp	.+146    	; 0x63b2 <processMasterSpiRxDmaInt+0x118>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    6320:	90 91 00 06 	lds	r25, 0x0600
    6324:	98 23       	and	r25, r24
    6326:	09 f4       	brne	.+2      	; 0x632a <processMasterSpiRxDmaInt+0x90>
    6328:	4b c0       	rjmp	.+150    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    632a:	e0 e0       	ldi	r30, 0x00	; 0
    632c:	f6 e0       	ldi	r31, 0x06	; 6
    632e:	47 c0       	rjmp	.+142    	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    6330:	90 91 20 06 	lds	r25, 0x0620
    6334:	98 23       	and	r25, r24
    6336:	09 f4       	brne	.+2      	; 0x633a <processMasterSpiRxDmaInt+0xa0>
    6338:	43 c0       	rjmp	.+134    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    633a:	e0 e2       	ldi	r30, 0x20	; 32
    633c:	f6 e0       	ldi	r31, 0x06	; 6
    633e:	3f c0       	rjmp	.+126    	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    6340:	90 91 40 06 	lds	r25, 0x0640
    6344:	98 23       	and	r25, r24
    6346:	09 f4       	brne	.+2      	; 0x634a <processMasterSpiRxDmaInt+0xb0>
    6348:	3b c0       	rjmp	.+118    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    634a:	e0 e4       	ldi	r30, 0x40	; 64
    634c:	f6 e0       	ldi	r31, 0x06	; 6
    634e:	37 c0       	rjmp	.+110    	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    6350:	90 91 60 06 	lds	r25, 0x0660
    6354:	98 23       	and	r25, r24
    6356:	a1 f1       	breq	.+104    	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    6358:	e0 e6       	ldi	r30, 0x60	; 96
    635a:	f6 e0       	ldi	r31, 0x06	; 6
    635c:	30 c0       	rjmp	.+96     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    635e:	90 91 80 06 	lds	r25, 0x0680
    6362:	98 23       	and	r25, r24
    6364:	69 f1       	breq	.+90     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    6366:	e0 e8       	ldi	r30, 0x80	; 128
    6368:	f6 e0       	ldi	r31, 0x06	; 6
    636a:	29 c0       	rjmp	.+82     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    636c:	90 91 a0 06 	lds	r25, 0x06A0
    6370:	98 23       	and	r25, r24
    6372:	31 f1       	breq	.+76     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    6374:	e0 ea       	ldi	r30, 0xA0	; 160
    6376:	f6 e0       	ldi	r31, 0x06	; 6
    6378:	22 c0       	rjmp	.+68     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    637a:	90 91 e0 06 	lds	r25, 0x06E0
    637e:	98 23       	and	r25, r24
    6380:	f9 f0       	breq	.+62     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    6382:	e0 ee       	ldi	r30, 0xE0	; 224
    6384:	f6 e0       	ldi	r31, 0x06	; 6
    6386:	1b c0       	rjmp	.+54     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    6388:	90 91 00 07 	lds	r25, 0x0700
    638c:	98 23       	and	r25, r24
    638e:	c1 f0       	breq	.+48     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    6390:	e0 e0       	ldi	r30, 0x00	; 0
    6392:	f7 e0       	ldi	r31, 0x07	; 7
    6394:	14 c0       	rjmp	.+40     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    6396:	90 91 20 07 	lds	r25, 0x0720
    639a:	98 23       	and	r25, r24
    639c:	89 f0       	breq	.+34     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    639e:	e0 e2       	ldi	r30, 0x20	; 32
    63a0:	f7 e0       	ldi	r31, 0x07	; 7
    63a2:	0d c0       	rjmp	.+26     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    63a4:	90 91 c0 07 	lds	r25, 0x07C0
    63a8:	98 23       	and	r25, r24
    63aa:	51 f0       	breq	.+20     	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    63ac:	e0 ec       	ldi	r30, 0xC0	; 192
    63ae:	f7 e0       	ldi	r31, 0x07	; 7
    63b0:	06 c0       	rjmp	.+12     	; 0x63be <processMasterSpiRxDmaInt+0x124>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    63b2:	90 91 e0 07 	lds	r25, 0x07E0
    63b6:	98 23       	and	r25, r24
    63b8:	19 f0       	breq	.+6      	; 0x63c0 <processMasterSpiRxDmaInt+0x126>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    63ba:	e0 ee       	ldi	r30, 0xE0	; 224
    63bc:	f7 e0       	ldi	r31, 0x07	; 7
    63be:	85 83       	std	Z+5, r24	; 0x05
   }

   /*------------------------------------------------------------------------*
    * Disable the DMA channel.
    *------------------------------------------------------------------------*/
   hal_dmaDisableChannel( pt_chanHndl->t_rxDmaHndl);
    63c0:	f8 01       	movw	r30, r16
    63c2:	80 89       	ldd	r24, Z+16	; 0x10
    63c4:	91 89       	ldd	r25, Z+17	; 0x11
    63c6:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <hal_dmaDisableChannel>

   /*------------------------------------------------------------------------*
    * Execute the call-back function, returning the rx buffer and
    * the size of the data.
    *------------------------------------------------------------------------*/
    if( pt_activeUser->pf_funPtr != NULL)
    63ca:	e8 81       	ld	r30, Y
    63cc:	f9 81       	ldd	r31, Y+1	; 0x01
    63ce:	30 97       	sbiw	r30, 0x00	; 0
    63d0:	29 f0       	breq	.+10     	; 0x63dc <processMasterSpiRxDmaInt+0x142>
      pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    63d2:	68 85       	ldd	r22, Y+8	; 0x08
    63d4:	79 85       	ldd	r23, Y+9	; 0x09
    63d6:	8c 81       	ldd	r24, Y+4	; 0x04
    63d8:	9d 81       	ldd	r25, Y+5	; 0x05
    63da:	19 95       	eicall
                                    pt_activeUser->s_bufIndex);

   /*------------------------------------------------------------------------*
    * Release the spi bus.
    *------------------------------------------------------------------------*/
    pt_chanHndl->b_busLocked = false;
    63dc:	f8 01       	movw	r30, r16
    63de:	11 86       	std	Z+9, r1	; 0x09

   pt_activeUser->s_bufIndex = 0;
    63e0:	18 86       	std	Y+8, r1	; 0x08
    63e2:	19 86       	std	Y+9, r1	; 0x09

}/*End processMasterSpiRxDmaInt*/
    63e4:	df 91       	pop	r29
    63e6:	cf 91       	pop	r28
    63e8:	1f 91       	pop	r17
    63ea:	0f 91       	pop	r16
    63ec:	08 95       	ret

000063ee <masterSpiFRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    63ee:	83 e0       	ldi	r24, 0x03	; 3
    63f0:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    63f4:	00 97       	sbiw	r24, 0x00	; 0
    63f6:	29 f0       	breq	.+10     	; 0x6402 <masterSpiFRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    63f8:	fc 01       	movw	r30, r24
    63fa:	62 85       	ldd	r22, Z+10	; 0x0a
    63fc:	73 85       	ldd	r23, Z+11	; 0x0b
    63fe:	0e 94 4d 31 	call	0x629a	; 0x629a <processMasterSpiRxDmaInt>
    6402:	08 95       	ret

00006404 <masterSpiERxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    6404:	82 e0       	ldi	r24, 0x02	; 2
    6406:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    640a:	00 97       	sbiw	r24, 0x00	; 0
    640c:	29 f0       	breq	.+10     	; 0x6418 <masterSpiERxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    640e:	fc 01       	movw	r30, r24
    6410:	62 85       	ldd	r22, Z+10	; 0x0a
    6412:	73 85       	ldd	r23, Z+11	; 0x0b
    6414:	0e 94 4d 31 	call	0x629a	; 0x629a <processMasterSpiRxDmaInt>
    6418:	08 95       	ret

0000641a <masterSpiDRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    641a:	81 e0       	ldi	r24, 0x01	; 1
    641c:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	29 f0       	breq	.+10     	; 0x642e <masterSpiDRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    6424:	fc 01       	movw	r30, r24
    6426:	62 85       	ldd	r22, Z+10	; 0x0a
    6428:	73 85       	ldd	r23, Z+11	; 0x0b
    642a:	0e 94 4d 31 	call	0x629a	; 0x629a <processMasterSpiRxDmaInt>
    642e:	08 95       	ret

00006430 <masterSpiCRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    6436:	00 97       	sbiw	r24, 0x00	; 0
    6438:	29 f0       	breq	.+10     	; 0x6444 <masterSpiCRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    643a:	fc 01       	movw	r30, r24
    643c:	62 85       	ldd	r22, Z+10	; 0x0a
    643e:	73 85       	ldd	r23, Z+11	; 0x0b
    6440:	0e 94 4d 31 	call	0x629a	; 0x629a <processMasterSpiRxDmaInt>
    6444:	08 95       	ret

00006446 <processSlaveSpiChipSelectInt.isra.0>:

   pt_activeUser->s_bufIndex = 0;

}/*End processMasterSpiRxDmaInt*/

static void processSlaveSpiChipSelectInt( t_spiChanHndl *pt_chanHndl,
    6446:	0f 93       	push	r16
    6448:	1f 93       	push	r17
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	8c 01       	movw	r16, r24
                                          t_spiUserHndl *pt_activeUser)
{
   pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;
    6450:	fc 01       	movw	r30, r24
    6452:	c2 85       	ldd	r28, Z+10	; 0x0a
    6454:	d3 85       	ldd	r29, Z+11	; 0x0b

   /*------------------------------------------------------------------------*
    * Is the DMA enabled?
    *------------------------------------------------------------------------*/
   if( pt_chanHndl->t_rxDmaHndl > 0)
    6456:	80 89       	ldd	r24, Z+16	; 0x10
    6458:	91 89       	ldd	r25, Z+17	; 0x11
    645a:	18 16       	cp	r1, r24
    645c:	19 06       	cpc	r1, r25
    645e:	ac f4       	brge	.+42     	; 0x648a <processSlaveSpiChipSelectInt.isra.0+0x44>
   {
      /*---------------------------------------------------------------------*
       * Was this a transaction issued by a call to 'hal_spiWriteBlock'?
       *---------------------------------------------------------------------*/
      if( pt_activeUser->pc_rxData == (int8_t *)&gc_tempBuf) /*Yes*/
    6460:	8c 81       	ldd	r24, Y+4	; 0x04
    6462:	9d 81       	ldd	r25, Y+5	; 0x05
    6464:	f0 e2       	ldi	r31, 0x20	; 32
    6466:	8e 3c       	cpi	r24, 0xCE	; 206
    6468:	9f 07       	cpc	r25, r31
    646a:	31 f4       	brne	.+12     	; 0x6478 <processSlaveSpiChipSelectInt.isra.0+0x32>
      {
         pt_activeUser->s_bufIndex =
         hal_getDmaTransferCount( pt_chanHndl->t_rxDmaHndl);
    646c:	f8 01       	movw	r30, r16
    646e:	80 89       	ldd	r24, Z+16	; 0x10
    6470:	91 89       	ldd	r25, Z+17	; 0x11
    6472:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <hal_getDmaTransferCount>
    6476:	02 c0       	rjmp	.+4      	; 0x647c <processSlaveSpiChipSelectInt.isra.0+0x36>
      }
      else
         pt_activeUser->s_bufIndex = 1;
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	88 87       	std	Y+8, r24	; 0x08
    647e:	99 87       	std	Y+9, r25	; 0x09

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      hal_dmaDisableChannel( pt_chanHndl->t_rxDmaHndl);
    6480:	f8 01       	movw	r30, r16
    6482:	80 89       	ldd	r24, Z+16	; 0x10
    6484:	91 89       	ldd	r25, Z+17	; 0x11
    6486:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <hal_dmaDisableChannel>
   }/*End if( pt_chanHndl->t_rxDmaHndl > 0)*/

   /*------------------------------------------------------------------------*
    * Release the spi bus.
    *------------------------------------------------------------------------*/
   if( pt_activeUser->s_bufIndex > 0)
    648a:	68 85       	ldd	r22, Y+8	; 0x08
    648c:	79 85       	ldd	r23, Y+9	; 0x09
    648e:	61 15       	cp	r22, r1
    6490:	71 05       	cpc	r23, r1
    6492:	59 f0       	breq	.+22     	; 0x64aa <processSlaveSpiChipSelectInt.isra.0+0x64>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       if( pt_activeUser->pf_funPtr != NULL)
    6494:	e8 81       	ld	r30, Y
    6496:	f9 81       	ldd	r31, Y+1	; 0x01
    6498:	30 97       	sbiw	r30, 0x00	; 0
    649a:	19 f0       	breq	.+6      	; 0x64a2 <processSlaveSpiChipSelectInt.isra.0+0x5c>
         pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    649c:	8c 81       	ldd	r24, Y+4	; 0x04
    649e:	9d 81       	ldd	r25, Y+5	; 0x05
    64a0:	19 95       	eicall
                                       pt_activeUser->s_bufIndex);

      /*---------------------------------------------------------------------*
       * Release the spi bus.
       *---------------------------------------------------------------------*/
      pt_chanHndl->b_busLocked = false;
    64a2:	f8 01       	movw	r30, r16
    64a4:	11 86       	std	Z+9, r1	; 0x09
      pt_activeUser->s_bufIndex = 0;
    64a6:	18 86       	std	Y+8, r1	; 0x08
    64a8:	19 86       	std	Y+9, r1	; 0x09

   }/*End if( pt_activeUser->s_bufIndex > 0)*/

}/*End processSlaveSpiChipSelectInt*/
    64aa:	df 91       	pop	r29
    64ac:	cf 91       	pop	r28
    64ae:	1f 91       	pop	r17
    64b0:	0f 91       	pop	r16
    64b2:	08 95       	ret

000064b4 <slaveSpiFChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    64b4:	83 e0       	ldi	r24, 0x03	; 3
    64b6:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    64ba:	00 97       	sbiw	r24, 0x00	; 0
    64bc:	31 f0       	breq	.+12     	; 0x64ca <slaveSpiFChipSelectInt+0x16>
    64be:	fc 01       	movw	r30, r24
    64c0:	26 81       	ldd	r18, Z+6	; 0x06
    64c2:	21 30       	cpi	r18, 0x01	; 1
    64c4:	11 f4       	brne	.+4      	; 0x64ca <slaveSpiFChipSelectInt+0x16>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    64c6:	0e 94 23 32 	call	0x6446	; 0x6446 <processSlaveSpiChipSelectInt.isra.0>
    64ca:	08 95       	ret

000064cc <slaveSpiEChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    64cc:	82 e0       	ldi	r24, 0x02	; 2
    64ce:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    64d2:	00 97       	sbiw	r24, 0x00	; 0
    64d4:	31 f0       	breq	.+12     	; 0x64e2 <slaveSpiEChipSelectInt+0x16>
    64d6:	fc 01       	movw	r30, r24
    64d8:	26 81       	ldd	r18, Z+6	; 0x06
    64da:	21 30       	cpi	r18, 0x01	; 1
    64dc:	11 f4       	brne	.+4      	; 0x64e2 <slaveSpiEChipSelectInt+0x16>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    64de:	0e 94 23 32 	call	0x6446	; 0x6446 <processSlaveSpiChipSelectInt.isra.0>
    64e2:	08 95       	ret

000064e4 <slaveSpiDChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    64e4:	81 e0       	ldi	r24, 0x01	; 1
    64e6:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    64ea:	00 97       	sbiw	r24, 0x00	; 0
    64ec:	31 f0       	breq	.+12     	; 0x64fa <slaveSpiDChipSelectInt+0x16>
    64ee:	fc 01       	movw	r30, r24
    64f0:	26 81       	ldd	r18, Z+6	; 0x06
    64f2:	21 30       	cpi	r18, 0x01	; 1
    64f4:	11 f4       	brne	.+4      	; 0x64fa <slaveSpiDChipSelectInt+0x16>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    64f6:	0e 94 23 32 	call	0x6446	; 0x6446 <processSlaveSpiChipSelectInt.isra.0>
    64fa:	08 95       	ret

000064fc <slaveSpiCChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    64fc:	80 e0       	ldi	r24, 0x00	; 0
    64fe:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    6502:	00 97       	sbiw	r24, 0x00	; 0
    6504:	31 f0       	breq	.+12     	; 0x6512 <slaveSpiCChipSelectInt+0x16>
    6506:	fc 01       	movw	r30, r24
    6508:	26 81       	ldd	r18, Z+6	; 0x06
    650a:	21 30       	cpi	r18, 0x01	; 1
    650c:	11 f4       	brne	.+4      	; 0x6512 <slaveSpiCChipSelectInt+0x16>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    650e:	0e 94 23 32 	call	0x6446	; 0x6446 <processSlaveSpiChipSelectInt.isra.0>
    6512:	08 95       	ret

00006514 <__vector_24>:
   }/*End if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))*/

}/*End slaveSpiFChipSelectInt*/

ISR( SPIC_INT_vect)
{
    6514:	1f 92       	push	r1
    6516:	0f 92       	push	r0
    6518:	0f b6       	in	r0, 0x3f	; 63
    651a:	0f 92       	push	r0
    651c:	08 b6       	in	r0, 0x38	; 56
    651e:	0f 92       	push	r0
    6520:	09 b6       	in	r0, 0x39	; 57
    6522:	0f 92       	push	r0
    6524:	0b b6       	in	r0, 0x3b	; 59
    6526:	0f 92       	push	r0
    6528:	11 24       	eor	r1, r1
    652a:	2f 93       	push	r18
    652c:	3f 93       	push	r19
    652e:	4f 93       	push	r20
    6530:	5f 93       	push	r21
    6532:	6f 93       	push	r22
    6534:	7f 93       	push	r23
    6536:	8f 93       	push	r24
    6538:	9f 93       	push	r25
    653a:	af 93       	push	r26
    653c:	bf 93       	push	r27
    653e:	ef 93       	push	r30
    6540:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    6542:	80 e0       	ldi	r24, 0x00	; 0
    6544:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    6548:	00 97       	sbiw	r24, 0x00	; 0
    654a:	29 f0       	breq	.+10     	; 0x6556 <__vector_24+0x42>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    654c:	fc 01       	movw	r30, r24
    654e:	62 85       	ldd	r22, Z+10	; 0x0a
    6550:	73 85       	ldd	r23, Z+11	; 0x0b
    6552:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIC_INT_vect)*/
    6556:	ff 91       	pop	r31
    6558:	ef 91       	pop	r30
    655a:	bf 91       	pop	r27
    655c:	af 91       	pop	r26
    655e:	9f 91       	pop	r25
    6560:	8f 91       	pop	r24
    6562:	7f 91       	pop	r23
    6564:	6f 91       	pop	r22
    6566:	5f 91       	pop	r21
    6568:	4f 91       	pop	r20
    656a:	3f 91       	pop	r19
    656c:	2f 91       	pop	r18
    656e:	0f 90       	pop	r0
    6570:	0b be       	out	0x3b, r0	; 59
    6572:	0f 90       	pop	r0
    6574:	09 be       	out	0x39, r0	; 57
    6576:	0f 90       	pop	r0
    6578:	08 be       	out	0x38, r0	; 56
    657a:	0f 90       	pop	r0
    657c:	0f be       	out	0x3f, r0	; 63
    657e:	0f 90       	pop	r0
    6580:	1f 90       	pop	r1
    6582:	18 95       	reti

00006584 <__vector_87>:

ISR( SPID_INT_vect)
{
    6584:	1f 92       	push	r1
    6586:	0f 92       	push	r0
    6588:	0f b6       	in	r0, 0x3f	; 63
    658a:	0f 92       	push	r0
    658c:	08 b6       	in	r0, 0x38	; 56
    658e:	0f 92       	push	r0
    6590:	09 b6       	in	r0, 0x39	; 57
    6592:	0f 92       	push	r0
    6594:	0b b6       	in	r0, 0x3b	; 59
    6596:	0f 92       	push	r0
    6598:	11 24       	eor	r1, r1
    659a:	2f 93       	push	r18
    659c:	3f 93       	push	r19
    659e:	4f 93       	push	r20
    65a0:	5f 93       	push	r21
    65a2:	6f 93       	push	r22
    65a4:	7f 93       	push	r23
    65a6:	8f 93       	push	r24
    65a8:	9f 93       	push	r25
    65aa:	af 93       	push	r26
    65ac:	bf 93       	push	r27
    65ae:	ef 93       	push	r30
    65b0:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    65b8:	00 97       	sbiw	r24, 0x00	; 0
    65ba:	29 f0       	breq	.+10     	; 0x65c6 <__vector_87+0x42>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    65bc:	fc 01       	movw	r30, r24
    65be:	62 85       	ldd	r22, Z+10	; 0x0a
    65c0:	73 85       	ldd	r23, Z+11	; 0x0b
    65c2:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPID_INT_vect)*/
    65c6:	ff 91       	pop	r31
    65c8:	ef 91       	pop	r30
    65ca:	bf 91       	pop	r27
    65cc:	af 91       	pop	r26
    65ce:	9f 91       	pop	r25
    65d0:	8f 91       	pop	r24
    65d2:	7f 91       	pop	r23
    65d4:	6f 91       	pop	r22
    65d6:	5f 91       	pop	r21
    65d8:	4f 91       	pop	r20
    65da:	3f 91       	pop	r19
    65dc:	2f 91       	pop	r18
    65de:	0f 90       	pop	r0
    65e0:	0b be       	out	0x3b, r0	; 59
    65e2:	0f 90       	pop	r0
    65e4:	09 be       	out	0x39, r0	; 57
    65e6:	0f 90       	pop	r0
    65e8:	08 be       	out	0x38, r0	; 56
    65ea:	0f 90       	pop	r0
    65ec:	0f be       	out	0x3f, r0	; 63
    65ee:	0f 90       	pop	r0
    65f0:	1f 90       	pop	r1
    65f2:	18 95       	reti

000065f4 <__vector_57>:

ISR( SPIE_INT_vect)
{
    65f4:	1f 92       	push	r1
    65f6:	0f 92       	push	r0
    65f8:	0f b6       	in	r0, 0x3f	; 63
    65fa:	0f 92       	push	r0
    65fc:	08 b6       	in	r0, 0x38	; 56
    65fe:	0f 92       	push	r0
    6600:	09 b6       	in	r0, 0x39	; 57
    6602:	0f 92       	push	r0
    6604:	0b b6       	in	r0, 0x3b	; 59
    6606:	0f 92       	push	r0
    6608:	11 24       	eor	r1, r1
    660a:	2f 93       	push	r18
    660c:	3f 93       	push	r19
    660e:	4f 93       	push	r20
    6610:	5f 93       	push	r21
    6612:	6f 93       	push	r22
    6614:	7f 93       	push	r23
    6616:	8f 93       	push	r24
    6618:	9f 93       	push	r25
    661a:	af 93       	push	r26
    661c:	bf 93       	push	r27
    661e:	ef 93       	push	r30
    6620:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    6622:	82 e0       	ldi	r24, 0x02	; 2
    6624:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    6628:	00 97       	sbiw	r24, 0x00	; 0
    662a:	29 f0       	breq	.+10     	; 0x6636 <__vector_57+0x42>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    662c:	fc 01       	movw	r30, r24
    662e:	62 85       	ldd	r22, Z+10	; 0x0a
    6630:	73 85       	ldd	r23, Z+11	; 0x0b
    6632:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIE_INT_vect)*/
    6636:	ff 91       	pop	r31
    6638:	ef 91       	pop	r30
    663a:	bf 91       	pop	r27
    663c:	af 91       	pop	r26
    663e:	9f 91       	pop	r25
    6640:	8f 91       	pop	r24
    6642:	7f 91       	pop	r23
    6644:	6f 91       	pop	r22
    6646:	5f 91       	pop	r21
    6648:	4f 91       	pop	r20
    664a:	3f 91       	pop	r19
    664c:	2f 91       	pop	r18
    664e:	0f 90       	pop	r0
    6650:	0b be       	out	0x3b, r0	; 59
    6652:	0f 90       	pop	r0
    6654:	09 be       	out	0x39, r0	; 57
    6656:	0f 90       	pop	r0
    6658:	08 be       	out	0x38, r0	; 56
    665a:	0f 90       	pop	r0
    665c:	0f be       	out	0x3f, r0	; 63
    665e:	0f 90       	pop	r0
    6660:	1f 90       	pop	r1
    6662:	18 95       	reti

00006664 <__vector_118>:

ISR( SPIF_INT_vect)
{
    6664:	1f 92       	push	r1
    6666:	0f 92       	push	r0
    6668:	0f b6       	in	r0, 0x3f	; 63
    666a:	0f 92       	push	r0
    666c:	08 b6       	in	r0, 0x38	; 56
    666e:	0f 92       	push	r0
    6670:	09 b6       	in	r0, 0x39	; 57
    6672:	0f 92       	push	r0
    6674:	0b b6       	in	r0, 0x3b	; 59
    6676:	0f 92       	push	r0
    6678:	11 24       	eor	r1, r1
    667a:	2f 93       	push	r18
    667c:	3f 93       	push	r19
    667e:	4f 93       	push	r20
    6680:	5f 93       	push	r21
    6682:	6f 93       	push	r22
    6684:	7f 93       	push	r23
    6686:	8f 93       	push	r24
    6688:	9f 93       	push	r25
    668a:	af 93       	push	r26
    668c:	bf 93       	push	r27
    668e:	ef 93       	push	r30
    6690:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    6692:	83 e0       	ldi	r24, 0x03	; 3
    6694:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   if( pt_chanHndl != NULL)
    6698:	00 97       	sbiw	r24, 0x00	; 0
    669a:	29 f0       	breq	.+10     	; 0x66a6 <__vector_118+0x42>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    669c:	fc 01       	movw	r30, r24
    669e:	62 85       	ldd	r22, Z+10	; 0x0a
    66a0:	73 85       	ldd	r23, Z+11	; 0x0b
    66a2:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIF_INT_vect)*/
    66a6:	ff 91       	pop	r31
    66a8:	ef 91       	pop	r30
    66aa:	bf 91       	pop	r27
    66ac:	af 91       	pop	r26
    66ae:	9f 91       	pop	r25
    66b0:	8f 91       	pop	r24
    66b2:	7f 91       	pop	r23
    66b4:	6f 91       	pop	r22
    66b6:	5f 91       	pop	r21
    66b8:	4f 91       	pop	r20
    66ba:	3f 91       	pop	r19
    66bc:	2f 91       	pop	r18
    66be:	0f 90       	pop	r0
    66c0:	0b be       	out	0x3b, r0	; 59
    66c2:	0f 90       	pop	r0
    66c4:	09 be       	out	0x39, r0	; 57
    66c6:	0f 90       	pop	r0
    66c8:	08 be       	out	0x38, r0	; 56
    66ca:	0f 90       	pop	r0
    66cc:	0f be       	out	0x3f, r0	; 63
    66ce:	0f 90       	pop	r0
    66d0:	1f 90       	pop	r1
    66d2:	18 95       	reti

000066d4 <hal_spiConfCallBack>:
}/*End createSpiUserHandle*/

t_spiError hal_spiConfCallBack( t_SPIHNDL t_handle,
                                  void (*pf_funPtr)( int8_t *pc_data,
                                                     uint16_t s_length))
{
    66d4:	cf 93       	push	r28
    66d6:	df 93       	push	r29
    66d8:	00 d0       	rcall	.+0      	; 0x66da <hal_spiConfCallBack+0x6>
    66da:	cd b7       	in	r28, 0x3d	; 61
    66dc:	de b7       	in	r29, 0x3e	; 62
    66de:	8a 83       	std	Y+2, r24	; 0x02
    66e0:	9b 83       	std	Y+3, r25	; 0x03
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    66e2:	8f b7       	in	r24, 0x3f	; 63
    66e4:	89 83       	std	Y+1, r24	; 0x01
    66e6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    66e8:	ea 81       	ldd	r30, Y+2	; 0x02
    66ea:	fb 81       	ldd	r31, Y+3	; 0x03
    66ec:	80 91 b2 20 	lds	r24, 0x20B2
    66f0:	90 91 b3 20 	lds	r25, 0x20B3
    66f4:	24 81       	ldd	r18, Z+4	; 0x04
    66f6:	35 81       	ldd	r19, Z+5	; 0x05
    66f8:	28 17       	cp	r18, r24
    66fa:	39 07       	cpc	r19, r25
    66fc:	21 f0       	breq	.+8      	; 0x6706 <hal_spiConfCallBack+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    66fe:	89 81       	ldd	r24, Y+1	; 0x01
    6700:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_HANDLE;
    6702:	8e ef       	ldi	r24, 0xFE	; 254
    6704:	15 c0       	rjmp	.+42     	; 0x6730 <hal_spiConfCallBack+0x5c>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    6706:	ea 81       	ldd	r30, Y+2	; 0x02
    6708:	fb 81       	ldd	r31, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    670a:	01 90       	ld	r0, Z+
    670c:	f0 81       	ld	r31, Z
    670e:	e0 2d       	mov	r30, r0
   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;

   if( pt_spiChanHndl->b_busLocked == true)
    6710:	a4 85       	ldd	r26, Z+12	; 0x0c
    6712:	b5 85       	ldd	r27, Z+13	; 0x0d
    6714:	19 96       	adiw	r26, 0x09	; 9
    6716:	8c 91       	ld	r24, X
    6718:	19 97       	sbiw	r26, 0x09	; 9
    671a:	88 23       	and	r24, r24
    671c:	21 f0       	breq	.+8      	; 0x6726 <hal_spiConfCallBack+0x52>
   {
      HAL_END_CRITICAL();//Enable interrupts
    671e:	89 81       	ldd	r24, Y+1	; 0x01
    6720:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    6722:	84 ef       	ldi	r24, 0xF4	; 244
    6724:	05 c0       	rjmp	.+10     	; 0x6730 <hal_spiConfCallBack+0x5c>
   }

   pt_spiUserHndl->pf_funPtr = pf_funPtr;
    6726:	60 83       	st	Z, r22
    6728:	71 83       	std	Z+1, r23	; 0x01

   HAL_END_CRITICAL();//Enable interrupts
    672a:	89 81       	ldd	r24, Y+1	; 0x01
    672c:	8f bf       	out	0x3f, r24	; 63

   return SPI_PASSED;
    672e:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiConfCallBack*/
    6730:	23 96       	adiw	r28, 0x03	; 3
    6732:	cd bf       	out	0x3d, r28	; 61
    6734:	de bf       	out	0x3e, r29	; 62
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	08 95       	ret

0000673c <hal_spiSetChipSelect>:

t_spiError hal_spiSetChipSelect( t_SPIHNDL t_handle,
                                 t_spiCsCntl t_csCntl)
{
    673c:	cf 93       	push	r28
    673e:	df 93       	push	r29
    6740:	00 d0       	rcall	.+0      	; 0x6742 <hal_spiSetChipSelect+0x6>
    6742:	cd b7       	in	r28, 0x3d	; 61
    6744:	de b7       	in	r29, 0x3e	; 62
    6746:	8a 83       	std	Y+2, r24	; 0x02
    6748:	9b 83       	std	Y+3, r25	; 0x03
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    674a:	8f b7       	in	r24, 0x3f	; 63
    674c:	89 83       	std	Y+1, r24	; 0x01
    674e:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6750:	ea 81       	ldd	r30, Y+2	; 0x02
    6752:	fb 81       	ldd	r31, Y+3	; 0x03
    6754:	80 91 b2 20 	lds	r24, 0x20B2
    6758:	90 91 b3 20 	lds	r25, 0x20B3
    675c:	24 81       	ldd	r18, Z+4	; 0x04
    675e:	35 81       	ldd	r19, Z+5	; 0x05
    6760:	28 17       	cp	r18, r24
    6762:	39 07       	cpc	r19, r25
    6764:	21 f0       	breq	.+8      	; 0x676e <hal_spiSetChipSelect+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    6766:	89 81       	ldd	r24, Y+1	; 0x01
    6768:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_HANDLE;
    676a:	8e ef       	ldi	r24, 0xFE	; 254
    676c:	2e c1       	rjmp	.+604    	; 0x69ca <hal_spiSetChipSelect+0x28e>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    676e:	ea 81       	ldd	r30, Y+2	; 0x02
    6770:	fb 81       	ldd	r31, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6772:	01 90       	ld	r0, Z+
    6774:	f0 81       	ld	r31, Z
    6776:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6778:	24 85       	ldd	r18, Z+12	; 0x0c
    677a:	35 85       	ldd	r19, Z+13	; 0x0d

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    677c:	d9 01       	movw	r26, r18
    677e:	19 96       	adiw	r26, 0x09	; 9
    6780:	8c 91       	ld	r24, X
    6782:	19 97       	sbiw	r26, 0x09	; 9
    6784:	88 23       	and	r24, r24
    6786:	59 f0       	breq	.+22     	; 0x679e <hal_spiSetChipSelect+0x62>
    6788:	1a 96       	adiw	r26, 0x0a	; 10
    678a:	8d 91       	ld	r24, X+
    678c:	9c 91       	ld	r25, X
    678e:	1b 97       	sbiw	r26, 0x0b	; 11
    6790:	8e 17       	cp	r24, r30
    6792:	9f 07       	cpc	r25, r31
    6794:	21 f0       	breq	.+8      	; 0x679e <hal_spiSetChipSelect+0x62>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6796:	89 81       	ldd	r24, Y+1	; 0x01
    6798:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    679a:	84 ef       	ldi	r24, 0xF4	; 244
    679c:	16 c1       	rjmp	.+556    	; 0x69ca <hal_spiSetChipSelect+0x28e>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    679e:	d9 01       	movw	r26, r18
    67a0:	17 96       	adiw	r26, 0x07	; 7
    67a2:	8d 91       	ld	r24, X+
    67a4:	9c 91       	ld	r25, X
    67a6:	18 97       	sbiw	r26, 0x08	; 8
    67a8:	dc 01       	movw	r26, r24
    67aa:	11 96       	adiw	r26, 0x01	; 1
    67ac:	1c 92       	st	X, r1
    67ae:	11 97       	sbiw	r26, 0x01	; 1

   /*------------------------------------------------------------------------*
    * Chip select is active low.
    *------------------------------------------------------------------------*/
   if( t_csCntl == SPI_CS_EN)
    67b0:	66 23       	and	r22, r22
    67b2:	09 f0       	breq	.+2      	; 0x67b6 <hal_spiSetChipSelect+0x7a>
    67b4:	8c c0       	rjmp	.+280    	; 0x68ce <hal_spiSetChipSelect+0x192>
   {

      /*---------------------------------------------------------------------*
       * Lock access to the bus until the transaction is finished
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    67b6:	81 e0       	ldi	r24, 0x01	; 1
    67b8:	d9 01       	movw	r26, r18
    67ba:	19 96       	adiw	r26, 0x09	; 9
    67bc:	8c 93       	st	X, r24
    67be:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    67c0:	1a 96       	adiw	r26, 0x0a	; 10
    67c2:	ed 93       	st	X+, r30
    67c4:	fc 93       	st	X, r31
    67c6:	1b 97       	sbiw	r26, 0x0b	; 11

      hal_gpioOff( pt_spiUserHndl->t_csPort,
    67c8:	83 85       	ldd	r24, Z+11	; 0x0b
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    67ca:	92 85       	ldd	r25, Z+10	; 0x0a
    67cc:	95 30       	cpi	r25, 0x05	; 5
    67ce:	09 f4       	brne	.+2      	; 0x67d2 <hal_spiSetChipSelect+0x96>
    67d0:	4d c0       	rjmp	.+154    	; 0x686c <hal_spiSetChipSelect+0x130>
    67d2:	96 30       	cpi	r25, 0x06	; 6
    67d4:	80 f4       	brcc	.+32     	; 0x67f6 <hal_spiSetChipSelect+0xba>
    67d6:	92 30       	cpi	r25, 0x02	; 2
    67d8:	89 f1       	breq	.+98     	; 0x683c <hal_spiSetChipSelect+0x100>
    67da:	93 30       	cpi	r25, 0x03	; 3
    67dc:	30 f4       	brcc	.+12     	; 0x67ea <hal_spiSetChipSelect+0xae>
    67de:	99 23       	and	r25, r25
    67e0:	e9 f0       	breq	.+58     	; 0x681c <hal_spiSetChipSelect+0xe0>
    67e2:	91 30       	cpi	r25, 0x01	; 1
    67e4:	09 f0       	breq	.+2      	; 0x67e8 <hal_spiSetChipSelect+0xac>
    67e6:	ee c0       	rjmp	.+476    	; 0x69c4 <hal_spiSetChipSelect+0x288>
    67e8:	21 c0       	rjmp	.+66     	; 0x682c <hal_spiSetChipSelect+0xf0>
    67ea:	93 30       	cpi	r25, 0x03	; 3
    67ec:	79 f1       	breq	.+94     	; 0x684c <hal_spiSetChipSelect+0x110>
    67ee:	94 30       	cpi	r25, 0x04	; 4
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <hal_spiSetChipSelect+0xb8>
    67f2:	e8 c0       	rjmp	.+464    	; 0x69c4 <hal_spiSetChipSelect+0x288>
    67f4:	33 c0       	rjmp	.+102    	; 0x685c <hal_spiSetChipSelect+0x120>
    67f6:	98 30       	cpi	r25, 0x08	; 8
    67f8:	09 f4       	brne	.+2      	; 0x67fc <hal_spiSetChipSelect+0xc0>
    67fa:	50 c0       	rjmp	.+160    	; 0x689c <hal_spiSetChipSelect+0x160>
    67fc:	99 30       	cpi	r25, 0x09	; 9
    67fe:	38 f4       	brcc	.+14     	; 0x680e <hal_spiSetChipSelect+0xd2>
    6800:	96 30       	cpi	r25, 0x06	; 6
    6802:	09 f4       	brne	.+2      	; 0x6806 <hal_spiSetChipSelect+0xca>
    6804:	3b c0       	rjmp	.+118    	; 0x687c <hal_spiSetChipSelect+0x140>
    6806:	97 30       	cpi	r25, 0x07	; 7
    6808:	09 f0       	breq	.+2      	; 0x680c <hal_spiSetChipSelect+0xd0>
    680a:	dc c0       	rjmp	.+440    	; 0x69c4 <hal_spiSetChipSelect+0x288>
    680c:	3f c0       	rjmp	.+126    	; 0x688c <hal_spiSetChipSelect+0x150>
    680e:	99 30       	cpi	r25, 0x09	; 9
    6810:	09 f4       	brne	.+2      	; 0x6814 <hal_spiSetChipSelect+0xd8>
    6812:	4c c0       	rjmp	.+152    	; 0x68ac <hal_spiSetChipSelect+0x170>
    6814:	9a 30       	cpi	r25, 0x0A	; 10
    6816:	09 f0       	breq	.+2      	; 0x681a <hal_spiSetChipSelect+0xde>
    6818:	d5 c0       	rjmp	.+426    	; 0x69c4 <hal_spiSetChipSelect+0x288>
    681a:	50 c0       	rjmp	.+160    	; 0x68bc <hal_spiSetChipSelect+0x180>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    681c:	90 91 00 06 	lds	r25, 0x0600
    6820:	98 23       	and	r25, r24
    6822:	09 f4       	brne	.+2      	; 0x6826 <hal_spiSetChipSelect+0xea>
    6824:	cf c0       	rjmp	.+414    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    6826:	e0 e0       	ldi	r30, 0x00	; 0
    6828:	f6 e0       	ldi	r31, 0x06	; 6
    682a:	4f c0       	rjmp	.+158    	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    682c:	90 91 20 06 	lds	r25, 0x0620
    6830:	98 23       	and	r25, r24
    6832:	09 f4       	brne	.+2      	; 0x6836 <hal_spiSetChipSelect+0xfa>
    6834:	c7 c0       	rjmp	.+398    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    6836:	e0 e2       	ldi	r30, 0x20	; 32
    6838:	f6 e0       	ldi	r31, 0x06	; 6
    683a:	47 c0       	rjmp	.+142    	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    683c:	90 91 40 06 	lds	r25, 0x0640
    6840:	98 23       	and	r25, r24
    6842:	09 f4       	brne	.+2      	; 0x6846 <hal_spiSetChipSelect+0x10a>
    6844:	bf c0       	rjmp	.+382    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    6846:	e0 e4       	ldi	r30, 0x40	; 64
    6848:	f6 e0       	ldi	r31, 0x06	; 6
    684a:	3f c0       	rjmp	.+126    	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    684c:	90 91 60 06 	lds	r25, 0x0660
    6850:	98 23       	and	r25, r24
    6852:	09 f4       	brne	.+2      	; 0x6856 <hal_spiSetChipSelect+0x11a>
    6854:	b7 c0       	rjmp	.+366    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    6856:	e0 e6       	ldi	r30, 0x60	; 96
    6858:	f6 e0       	ldi	r31, 0x06	; 6
    685a:	37 c0       	rjmp	.+110    	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    685c:	90 91 80 06 	lds	r25, 0x0680
    6860:	98 23       	and	r25, r24
    6862:	09 f4       	brne	.+2      	; 0x6866 <hal_spiSetChipSelect+0x12a>
    6864:	af c0       	rjmp	.+350    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    6866:	e0 e8       	ldi	r30, 0x80	; 128
    6868:	f6 e0       	ldi	r31, 0x06	; 6
    686a:	2f c0       	rjmp	.+94     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    686c:	90 91 a0 06 	lds	r25, 0x06A0
    6870:	98 23       	and	r25, r24
    6872:	09 f4       	brne	.+2      	; 0x6876 <hal_spiSetChipSelect+0x13a>
    6874:	a7 c0       	rjmp	.+334    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    6876:	e0 ea       	ldi	r30, 0xA0	; 160
    6878:	f6 e0       	ldi	r31, 0x06	; 6
    687a:	27 c0       	rjmp	.+78     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    687c:	90 91 e0 06 	lds	r25, 0x06E0
    6880:	98 23       	and	r25, r24
    6882:	09 f4       	brne	.+2      	; 0x6886 <hal_spiSetChipSelect+0x14a>
    6884:	9f c0       	rjmp	.+318    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    6886:	e0 ee       	ldi	r30, 0xE0	; 224
    6888:	f6 e0       	ldi	r31, 0x06	; 6
    688a:	1f c0       	rjmp	.+62     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    688c:	90 91 00 07 	lds	r25, 0x0700
    6890:	98 23       	and	r25, r24
    6892:	09 f4       	brne	.+2      	; 0x6896 <hal_spiSetChipSelect+0x15a>
    6894:	97 c0       	rjmp	.+302    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    6896:	e0 e0       	ldi	r30, 0x00	; 0
    6898:	f7 e0       	ldi	r31, 0x07	; 7
    689a:	17 c0       	rjmp	.+46     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    689c:	90 91 20 07 	lds	r25, 0x0720
    68a0:	98 23       	and	r25, r24
    68a2:	09 f4       	brne	.+2      	; 0x68a6 <hal_spiSetChipSelect+0x16a>
    68a4:	8f c0       	rjmp	.+286    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    68a6:	e0 e2       	ldi	r30, 0x20	; 32
    68a8:	f7 e0       	ldi	r31, 0x07	; 7
    68aa:	0f c0       	rjmp	.+30     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    68ac:	90 91 c0 07 	lds	r25, 0x07C0
    68b0:	98 23       	and	r25, r24
    68b2:	09 f4       	brne	.+2      	; 0x68b6 <hal_spiSetChipSelect+0x17a>
    68b4:	87 c0       	rjmp	.+270    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    68b6:	e0 ec       	ldi	r30, 0xC0	; 192
    68b8:	f7 e0       	ldi	r31, 0x07	; 7
    68ba:	07 c0       	rjmp	.+14     	; 0x68ca <hal_spiSetChipSelect+0x18e>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    68bc:	90 91 e0 07 	lds	r25, 0x07E0
    68c0:	98 23       	and	r25, r24
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <hal_spiSetChipSelect+0x18a>
    68c4:	7f c0       	rjmp	.+254    	; 0x69c4 <hal_spiSetChipSelect+0x288>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    68c6:	e0 ee       	ldi	r30, 0xE0	; 224
    68c8:	f7 e0       	ldi	r31, 0x07	; 7
    68ca:	86 83       	std	Z+6, r24	; 0x06
    68cc:	7b c0       	rjmp	.+246    	; 0x69c4 <hal_spiSetChipSelect+0x288>
   else
   {
      /*---------------------------------------------------------------------*
       * Release bus lock.
       *---------------------------------------------------------------------*/
      hal_gpioOn( pt_spiUserHndl->t_csPort,
    68ce:	83 85       	ldd	r24, Z+11	; 0x0b
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    68d0:	92 85       	ldd	r25, Z+10	; 0x0a
    68d2:	95 30       	cpi	r25, 0x05	; 5
    68d4:	09 f4       	brne	.+2      	; 0x68d8 <hal_spiSetChipSelect+0x19c>
    68d6:	4a c0       	rjmp	.+148    	; 0x696c <hal_spiSetChipSelect+0x230>
    68d8:	96 30       	cpi	r25, 0x06	; 6
    68da:	80 f4       	brcc	.+32     	; 0x68fc <hal_spiSetChipSelect+0x1c0>
    68dc:	92 30       	cpi	r25, 0x02	; 2
    68de:	81 f1       	breq	.+96     	; 0x6940 <hal_spiSetChipSelect+0x204>
    68e0:	93 30       	cpi	r25, 0x03	; 3
    68e2:	30 f4       	brcc	.+12     	; 0x68f0 <hal_spiSetChipSelect+0x1b4>
    68e4:	99 23       	and	r25, r25
    68e6:	e1 f0       	breq	.+56     	; 0x6920 <hal_spiSetChipSelect+0x1e4>
    68e8:	91 30       	cpi	r25, 0x01	; 1
    68ea:	09 f0       	breq	.+2      	; 0x68ee <hal_spiSetChipSelect+0x1b2>
    68ec:	69 c0       	rjmp	.+210    	; 0x69c0 <hal_spiSetChipSelect+0x284>
    68ee:	20 c0       	rjmp	.+64     	; 0x6930 <hal_spiSetChipSelect+0x1f4>
    68f0:	93 30       	cpi	r25, 0x03	; 3
    68f2:	71 f1       	breq	.+92     	; 0x6950 <hal_spiSetChipSelect+0x214>
    68f4:	94 30       	cpi	r25, 0x04	; 4
    68f6:	09 f0       	breq	.+2      	; 0x68fa <hal_spiSetChipSelect+0x1be>
    68f8:	63 c0       	rjmp	.+198    	; 0x69c0 <hal_spiSetChipSelect+0x284>
    68fa:	31 c0       	rjmp	.+98     	; 0x695e <hal_spiSetChipSelect+0x222>
    68fc:	98 30       	cpi	r25, 0x08	; 8
    68fe:	09 f4       	brne	.+2      	; 0x6902 <hal_spiSetChipSelect+0x1c6>
    6900:	4a c0       	rjmp	.+148    	; 0x6996 <hal_spiSetChipSelect+0x25a>
    6902:	99 30       	cpi	r25, 0x09	; 9
    6904:	30 f4       	brcc	.+12     	; 0x6912 <hal_spiSetChipSelect+0x1d6>
    6906:	96 30       	cpi	r25, 0x06	; 6
    6908:	c1 f1       	breq	.+112    	; 0x697a <hal_spiSetChipSelect+0x23e>
    690a:	97 30       	cpi	r25, 0x07	; 7
    690c:	09 f0       	breq	.+2      	; 0x6910 <hal_spiSetChipSelect+0x1d4>
    690e:	58 c0       	rjmp	.+176    	; 0x69c0 <hal_spiSetChipSelect+0x284>
    6910:	3b c0       	rjmp	.+118    	; 0x6988 <hal_spiSetChipSelect+0x24c>
    6912:	99 30       	cpi	r25, 0x09	; 9
    6914:	09 f4       	brne	.+2      	; 0x6918 <hal_spiSetChipSelect+0x1dc>
    6916:	46 c0       	rjmp	.+140    	; 0x69a4 <hal_spiSetChipSelect+0x268>
    6918:	9a 30       	cpi	r25, 0x0A	; 10
    691a:	09 f0       	breq	.+2      	; 0x691e <hal_spiSetChipSelect+0x1e2>
    691c:	51 c0       	rjmp	.+162    	; 0x69c0 <hal_spiSetChipSelect+0x284>
    691e:	49 c0       	rjmp	.+146    	; 0x69b2 <hal_spiSetChipSelect+0x276>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    6920:	90 91 00 06 	lds	r25, 0x0600
    6924:	98 23       	and	r25, r24
    6926:	09 f4       	brne	.+2      	; 0x692a <hal_spiSetChipSelect+0x1ee>
    6928:	4b c0       	rjmp	.+150    	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    692a:	e0 e0       	ldi	r30, 0x00	; 0
    692c:	f6 e0       	ldi	r31, 0x06	; 6
    692e:	47 c0       	rjmp	.+142    	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    6930:	90 91 20 06 	lds	r25, 0x0620
    6934:	98 23       	and	r25, r24
    6936:	09 f4       	brne	.+2      	; 0x693a <hal_spiSetChipSelect+0x1fe>
    6938:	43 c0       	rjmp	.+134    	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    693a:	e0 e2       	ldi	r30, 0x20	; 32
    693c:	f6 e0       	ldi	r31, 0x06	; 6
    693e:	3f c0       	rjmp	.+126    	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    6940:	90 91 40 06 	lds	r25, 0x0640
    6944:	98 23       	and	r25, r24
    6946:	09 f4       	brne	.+2      	; 0x694a <hal_spiSetChipSelect+0x20e>
    6948:	3b c0       	rjmp	.+118    	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    694a:	e0 e4       	ldi	r30, 0x40	; 64
    694c:	f6 e0       	ldi	r31, 0x06	; 6
    694e:	37 c0       	rjmp	.+110    	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    6950:	90 91 60 06 	lds	r25, 0x0660
    6954:	98 23       	and	r25, r24
    6956:	a1 f1       	breq	.+104    	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    6958:	e0 e6       	ldi	r30, 0x60	; 96
    695a:	f6 e0       	ldi	r31, 0x06	; 6
    695c:	30 c0       	rjmp	.+96     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    695e:	90 91 80 06 	lds	r25, 0x0680
    6962:	98 23       	and	r25, r24
    6964:	69 f1       	breq	.+90     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    6966:	e0 e8       	ldi	r30, 0x80	; 128
    6968:	f6 e0       	ldi	r31, 0x06	; 6
    696a:	29 c0       	rjmp	.+82     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    696c:	90 91 a0 06 	lds	r25, 0x06A0
    6970:	98 23       	and	r25, r24
    6972:	31 f1       	breq	.+76     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    6974:	e0 ea       	ldi	r30, 0xA0	; 160
    6976:	f6 e0       	ldi	r31, 0x06	; 6
    6978:	22 c0       	rjmp	.+68     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    697a:	90 91 e0 06 	lds	r25, 0x06E0
    697e:	98 23       	and	r25, r24
    6980:	f9 f0       	breq	.+62     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    6982:	e0 ee       	ldi	r30, 0xE0	; 224
    6984:	f6 e0       	ldi	r31, 0x06	; 6
    6986:	1b c0       	rjmp	.+54     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    6988:	90 91 00 07 	lds	r25, 0x0700
    698c:	98 23       	and	r25, r24
    698e:	c1 f0       	breq	.+48     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    6990:	e0 e0       	ldi	r30, 0x00	; 0
    6992:	f7 e0       	ldi	r31, 0x07	; 7
    6994:	14 c0       	rjmp	.+40     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    6996:	90 91 20 07 	lds	r25, 0x0720
    699a:	98 23       	and	r25, r24
    699c:	89 f0       	breq	.+34     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    699e:	e0 e2       	ldi	r30, 0x20	; 32
    69a0:	f7 e0       	ldi	r31, 0x07	; 7
    69a2:	0d c0       	rjmp	.+26     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    69a4:	90 91 c0 07 	lds	r25, 0x07C0
    69a8:	98 23       	and	r25, r24
    69aa:	51 f0       	breq	.+20     	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    69ac:	e0 ec       	ldi	r30, 0xC0	; 192
    69ae:	f7 e0       	ldi	r31, 0x07	; 7
    69b0:	06 c0       	rjmp	.+12     	; 0x69be <hal_spiSetChipSelect+0x282>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    69b2:	90 91 e0 07 	lds	r25, 0x07E0
    69b6:	98 23       	and	r25, r24
    69b8:	19 f0       	breq	.+6      	; 0x69c0 <hal_spiSetChipSelect+0x284>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    69ba:	e0 ee       	ldi	r30, 0xE0	; 224
    69bc:	f7 e0       	ldi	r31, 0x07	; 7
    69be:	85 83       	std	Z+5, r24	; 0x05
                  pt_spiUserHndl->c_csPin);

      pt_spiChanHndl->b_busLocked = false;
    69c0:	f9 01       	movw	r30, r18
    69c2:	11 86       	std	Z+9, r1	; 0x09
   }

   HAL_END_CRITICAL();//Enable interrupts
    69c4:	89 81       	ldd	r24, Y+1	; 0x01
    69c6:	8f bf       	out	0x3f, r24	; 63

   return SPI_PASSED;
    69c8:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiSetChipSelect*/
    69ca:	23 96       	adiw	r28, 0x03	; 3
    69cc:	cd bf       	out	0x3d, r28	; 61
    69ce:	de bf       	out	0x3e, r29	; 62
    69d0:	df 91       	pop	r29
    69d2:	cf 91       	pop	r28
    69d4:	08 95       	ret

000069d6 <hal_spiReadByte>:
 * Read a single character from a particular spi device pointed to by
 * 't_handle'
 *---------------------------------------------------------------------------*/
t_spiError hal_spiReadByte( t_SPIHNDL t_handle,
                            int8_t *pc_rxChar)
{
    69d6:	cf 93       	push	r28
    69d8:	df 93       	push	r29
    69da:	00 d0       	rcall	.+0      	; 0x69dc <hal_spiReadByte+0x6>
    69dc:	cd b7       	in	r28, 0x3d	; 61
    69de:	de b7       	in	r29, 0x3e	; 62
    69e0:	8a 83       	std	Y+2, r24	; 0x02
    69e2:	9b 83       	std	Y+3, r25	; 0x03
   uint8_t c_status;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    69e4:	8f b7       	in	r24, 0x3f	; 63
    69e6:	89 83       	std	Y+1, r24	; 0x01
    69e8:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    69ea:	ea 81       	ldd	r30, Y+2	; 0x02
    69ec:	fb 81       	ldd	r31, Y+3	; 0x03
    69ee:	80 91 b2 20 	lds	r24, 0x20B2
    69f2:	90 91 b3 20 	lds	r25, 0x20B3
    69f6:	24 81       	ldd	r18, Z+4	; 0x04
    69f8:	35 81       	ldd	r19, Z+5	; 0x05
    69fa:	28 17       	cp	r18, r24
    69fc:	39 07       	cpc	r19, r25
    69fe:	21 f0       	breq	.+8      	; 0x6a08 <hal_spiReadByte+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    6a00:	89 81       	ldd	r24, Y+1	; 0x01
    6a02:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_HANDLE;
    6a04:	8e ef       	ldi	r24, 0xFE	; 254
    6a06:	32 c0       	rjmp	.+100    	; 0x6a6c <hal_spiReadByte+0x96>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    6a08:	ea 81       	ldd	r30, Y+2	; 0x02
    6a0a:	fb 81       	ldd	r31, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6a0c:	20 81       	ld	r18, Z
    6a0e:	31 81       	ldd	r19, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6a10:	d9 01       	movw	r26, r18
    6a12:	1c 96       	adiw	r26, 0x0c	; 12
    6a14:	ed 91       	ld	r30, X+
    6a16:	fc 91       	ld	r31, X
    6a18:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    6a1a:	81 85       	ldd	r24, Z+9	; 0x09
    6a1c:	88 23       	and	r24, r24
    6a1e:	49 f0       	breq	.+18     	; 0x6a32 <hal_spiReadByte+0x5c>
    6a20:	82 85       	ldd	r24, Z+10	; 0x0a
    6a22:	93 85       	ldd	r25, Z+11	; 0x0b
    6a24:	82 17       	cp	r24, r18
    6a26:	93 07       	cpc	r25, r19
    6a28:	21 f0       	breq	.+8      	; 0x6a32 <hal_spiReadByte+0x5c>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6a2a:	89 81       	ldd	r24, Y+1	; 0x01
    6a2c:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    6a2e:	84 ef       	ldi	r24, 0xF4	; 244
    6a30:	1d c0       	rjmp	.+58     	; 0x6a6c <hal_spiReadByte+0x96>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6a32:	a7 81       	ldd	r26, Z+7	; 0x07
    6a34:	b0 85       	ldd	r27, Z+8	; 0x08
    6a36:	11 96       	adiw	r26, 0x01	; 1
    6a38:	1c 92       	st	X, r1

   /*------------------------------------------------------------------------*
    * Lock bus access
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->b_busLocked = true;
    6a3a:	81 e0       	ldi	r24, 0x01	; 1
    6a3c:	81 87       	std	Z+9, r24	; 0x09
   pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    6a3e:	22 87       	std	Z+10, r18	; 0x0a
    6a40:	33 87       	std	Z+11, r19	; 0x0b

   HAL_END_CRITICAL();//Enable interrupts
    6a42:	89 81       	ldd	r24, Y+1	; 0x01
    6a44:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Read status register to clear any pending transactions
    *------------------------------------------------------------------------*/
   c_status = pt_spiChanHndl->pt_spi->STATUS;
    6a46:	a7 81       	ldd	r26, Z+7	; 0x07
    6a48:	b0 85       	ldd	r27, Z+8	; 0x08
    6a4a:	12 96       	adiw	r26, 0x02	; 2
    6a4c:	8c 91       	ld	r24, X
    6a4e:	12 97       	sbiw	r26, 0x02	; 2

   /*------------------------------------------------------------------------*
    * Transmit a character of dummy data so that we can grab data out of the
    * rx buffer.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->DATA = 0xFF;
    6a50:	8f ef       	ldi	r24, 0xFF	; 255
    6a52:	13 96       	adiw	r26, 0x03	; 3
    6a54:	8c 93       	st	X, r24
    6a56:	13 97       	sbiw	r26, 0x03	; 3

   /*------------------------------------------------------------------------*
    * Wait for the data to clear the register
    *------------------------------------------------------------------------*/
   while( !(pt_spiChanHndl->pt_spi->STATUS & SPI_IF_bm));
    6a58:	07 80       	ldd	r0, Z+7	; 0x07
    6a5a:	f0 85       	ldd	r31, Z+8	; 0x08
    6a5c:	e0 2d       	mov	r30, r0
    6a5e:	82 81       	ldd	r24, Z+2	; 0x02
    6a60:	87 ff       	sbrs	r24, 7
    6a62:	fd cf       	rjmp	.-6      	; 0x6a5e <hal_spiReadByte+0x88>

   /*------------------------------------------------------------------------*
    * Read new data
    *------------------------------------------------------------------------*/
   *pc_rxChar = pt_spiChanHndl->pt_spi->DATA;
    6a64:	83 81       	ldd	r24, Z+3	; 0x03
    6a66:	fb 01       	movw	r30, r22
    6a68:	80 83       	st	Z, r24

   return SPI_PASSED;
    6a6a:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiReadByte*/
    6a6c:	23 96       	adiw	r28, 0x03	; 3
    6a6e:	cd bf       	out	0x3d, r28	; 61
    6a70:	de bf       	out	0x3e, r29	; 62
    6a72:	df 91       	pop	r29
    6a74:	cf 91       	pop	r28
    6a76:	08 95       	ret

00006a78 <hal_spiWriteByte>:
 * Write a single character to a particular spi device pointed to by
 * 't_handle'
 *---------------------------------------------------------------------------*/
t_spiError hal_spiWriteByte( t_SPIHNDL t_handle,
                                     int8_t c_txChar)
{
    6a78:	cf 93       	push	r28
    6a7a:	df 93       	push	r29
    6a7c:	00 d0       	rcall	.+0      	; 0x6a7e <hal_spiWriteByte+0x6>
    6a7e:	cd b7       	in	r28, 0x3d	; 61
    6a80:	de b7       	in	r29, 0x3e	; 62
    6a82:	8a 83       	std	Y+2, r24	; 0x02
    6a84:	9b 83       	std	Y+3, r25	; 0x03
   uint8_t c_temp;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6a86:	8f b7       	in	r24, 0x3f	; 63
    6a88:	89 83       	std	Y+1, r24	; 0x01
    6a8a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6a8c:	ea 81       	ldd	r30, Y+2	; 0x02
    6a8e:	fb 81       	ldd	r31, Y+3	; 0x03
    6a90:	80 91 b2 20 	lds	r24, 0x20B2
    6a94:	90 91 b3 20 	lds	r25, 0x20B3
    6a98:	24 81       	ldd	r18, Z+4	; 0x04
    6a9a:	35 81       	ldd	r19, Z+5	; 0x05
    6a9c:	28 17       	cp	r18, r24
    6a9e:	39 07       	cpc	r19, r25
    6aa0:	21 f0       	breq	.+8      	; 0x6aaa <hal_spiWriteByte+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    6aa2:	89 81       	ldd	r24, Y+1	; 0x01
    6aa4:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_HANDLE;
    6aa6:	8e ef       	ldi	r24, 0xFE	; 254
    6aa8:	30 c0       	rjmp	.+96     	; 0x6b0a <hal_spiWriteByte+0x92>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    6aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    6aac:	fb 81       	ldd	r31, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6aae:	20 81       	ld	r18, Z
    6ab0:	31 81       	ldd	r19, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6ab2:	d9 01       	movw	r26, r18
    6ab4:	1c 96       	adiw	r26, 0x0c	; 12
    6ab6:	ed 91       	ld	r30, X+
    6ab8:	fc 91       	ld	r31, X
    6aba:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    6abc:	81 85       	ldd	r24, Z+9	; 0x09
    6abe:	88 23       	and	r24, r24
    6ac0:	49 f0       	breq	.+18     	; 0x6ad4 <hal_spiWriteByte+0x5c>
    6ac2:	82 85       	ldd	r24, Z+10	; 0x0a
    6ac4:	93 85       	ldd	r25, Z+11	; 0x0b
    6ac6:	82 17       	cp	r24, r18
    6ac8:	93 07       	cpc	r25, r19
    6aca:	21 f0       	breq	.+8      	; 0x6ad4 <hal_spiWriteByte+0x5c>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6acc:	89 81       	ldd	r24, Y+1	; 0x01
    6ace:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    6ad0:	84 ef       	ldi	r24, 0xF4	; 244
    6ad2:	1b c0       	rjmp	.+54     	; 0x6b0a <hal_spiWriteByte+0x92>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6ad4:	87 81       	ldd	r24, Z+7	; 0x07
    6ad6:	90 85       	ldd	r25, Z+8	; 0x08
    6ad8:	dc 01       	movw	r26, r24
    6ada:	11 96       	adiw	r26, 0x01	; 1
    6adc:	1c 92       	st	X, r1

   /*------------------------------------------------------------------------*
    * Lock bus access
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->b_busLocked = true;
    6ade:	81 e0       	ldi	r24, 0x01	; 1
    6ae0:	81 87       	std	Z+9, r24	; 0x09
   pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    6ae2:	22 87       	std	Z+10, r18	; 0x0a
    6ae4:	33 87       	std	Z+11, r19	; 0x0b

   HAL_END_CRITICAL();//Enable interrupts
    6ae6:	89 81       	ldd	r24, Y+1	; 0x01
    6ae8:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Read status register to clear any pending transactions
    *------------------------------------------------------------------------*/
   c_temp = pt_spiChanHndl->pt_spi->STATUS;
    6aea:	a7 81       	ldd	r26, Z+7	; 0x07
    6aec:	b0 85       	ldd	r27, Z+8	; 0x08
    6aee:	12 96       	adiw	r26, 0x02	; 2
    6af0:	8c 91       	ld	r24, X
    6af2:	12 97       	sbiw	r26, 0x02	; 2

   /*------------------------------------------------------------------------*
    * Transmit a character of dummy data so that we can grab data out of the
    * rx buffer.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->DATA = (uint8_t)c_txChar;
    6af4:	13 96       	adiw	r26, 0x03	; 3
    6af6:	6c 93       	st	X, r22
    6af8:	13 97       	sbiw	r26, 0x03	; 3

   /*------------------------------------------------------------------------*
    * Wait for the data to clear the register
    *------------------------------------------------------------------------*/
   while( !(pt_spiChanHndl->pt_spi->STATUS & SPI_IF_bm));
    6afa:	07 80       	ldd	r0, Z+7	; 0x07
    6afc:	f0 85       	ldd	r31, Z+8	; 0x08
    6afe:	e0 2d       	mov	r30, r0
    6b00:	82 81       	ldd	r24, Z+2	; 0x02
    6b02:	87 ff       	sbrs	r24, 7
    6b04:	fd cf       	rjmp	.-6      	; 0x6b00 <hal_spiWriteByte+0x88>

   /*------------------------------------------------------------------------*
    * Read new data
    *------------------------------------------------------------------------*/
   c_temp = pt_spiChanHndl->pt_spi->DATA;
    6b06:	83 81       	ldd	r24, Z+3	; 0x03

   return SPI_PASSED;
    6b08:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiWriteByte*/
    6b0a:	23 96       	adiw	r28, 0x03	; 3
    6b0c:	cd bf       	out	0x3d, r28	; 61
    6b0e:	de bf       	out	0x3e, r29	; 62
    6b10:	df 91       	pop	r29
    6b12:	cf 91       	pop	r28
    6b14:	08 95       	ret

00006b16 <hal_spiSetBaudRate>:

t_spiError hal_spiSetBaudRate( t_SPIHNDL t_handle,
                               uint32_t i_baudRate)
{
    6b16:	8f 92       	push	r8
    6b18:	9f 92       	push	r9
    6b1a:	af 92       	push	r10
    6b1c:	bf 92       	push	r11
    6b1e:	cf 92       	push	r12
    6b20:	df 92       	push	r13
    6b22:	ef 92       	push	r14
    6b24:	ff 92       	push	r15
    6b26:	0f 93       	push	r16
    6b28:	1f 93       	push	r17
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	00 d0       	rcall	.+0      	; 0x6b30 <hal_spiSetBaudRate+0x1a>
    6b30:	cd b7       	in	r28, 0x3d	; 61
    6b32:	de b7       	in	r29, 0x3e	; 62
    6b34:	8a 83       	std	Y+2, r24	; 0x02
    6b36:	9b 83       	std	Y+3, r25	; 0x03
    6b38:	4a 01       	movw	r8, r20
    6b3a:	5b 01       	movw	r10, r22
   uint8_t c_doubleClock = 0;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6b3c:	8f b7       	in	r24, 0x3f	; 63
    6b3e:	89 83       	std	Y+1, r24	; 0x01
    6b40:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6b42:	ea 81       	ldd	r30, Y+2	; 0x02
    6b44:	fb 81       	ldd	r31, Y+3	; 0x03
    6b46:	20 91 b2 20 	lds	r18, 0x20B2
    6b4a:	30 91 b3 20 	lds	r19, 0x20B3
    6b4e:	84 81       	ldd	r24, Z+4	; 0x04
    6b50:	95 81       	ldd	r25, Z+5	; 0x05
    6b52:	82 17       	cp	r24, r18
    6b54:	93 07       	cpc	r25, r19
    6b56:	21 f0       	breq	.+8      	; 0x6b60 <hal_spiSetBaudRate+0x4a>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    6b58:	89 81       	ldd	r24, Y+1	; 0x01
    6b5a:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_HANDLE;
    6b5c:	8e ef       	ldi	r24, 0xFE	; 254
    6b5e:	4e c1       	rjmp	.+668    	; 0x6dfc <hal_spiSetBaudRate+0x2e6>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    6b60:	ea 81       	ldd	r30, Y+2	; 0x02
    6b62:	fb 81       	ldd	r31, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6b64:	01 90       	ld	r0, Z+
    6b66:	f0 81       	ld	r31, Z
    6b68:	e0 2d       	mov	r30, r0
    6b6a:	04 85       	ldd	r16, Z+12	; 0x0c
    6b6c:	15 85       	ldd	r17, Z+13	; 0x0d

   if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6b6e:	d8 01       	movw	r26, r16
    6b70:	16 96       	adiw	r26, 0x06	; 6
    6b72:	8c 91       	ld	r24, X
    6b74:	16 97       	sbiw	r26, 0x06	; 6
    6b76:	88 23       	and	r24, r24
    6b78:	49 f4       	brne	.+18     	; 0x6b8c <hal_spiSetBaudRate+0x76>
      i_maxSpiFreq = (hal_getCpuFreq() >> 1);
    6b7a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6b7e:	6b 01       	movw	r12, r22
    6b80:	7c 01       	movw	r14, r24
    6b82:	f6 94       	lsr	r15
    6b84:	e7 94       	ror	r14
    6b86:	d7 94       	ror	r13
    6b88:	c7 94       	ror	r12
    6b8a:	0b c0       	rjmp	.+22     	; 0x6ba2 <hal_spiSetBaudRate+0x8c>
   else
      i_maxSpiFreq = (hal_getCpuFreq() >> 2);
    6b8c:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6b90:	6b 01       	movw	r12, r22
    6b92:	7c 01       	movw	r14, r24
    6b94:	52 e0       	ldi	r21, 0x02	; 2
    6b96:	f6 94       	lsr	r15
    6b98:	e7 94       	ror	r14
    6b9a:	d7 94       	ror	r13
    6b9c:	c7 94       	ror	r12
    6b9e:	5a 95       	dec	r21
    6ba0:	d1 f7       	brne	.-12     	; 0x6b96 <hal_spiSetBaudRate+0x80>

   if( (i_baudRate < (hal_getCpuFreq() >> 7)) ||
    6ba2:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	47 e0       	ldi	r20, 0x07	; 7
    6bac:	b6 95       	lsr	r27
    6bae:	a7 95       	ror	r26
    6bb0:	97 95       	ror	r25
    6bb2:	87 95       	ror	r24
    6bb4:	4a 95       	dec	r20
    6bb6:	d1 f7       	brne	.-12     	; 0x6bac <hal_spiSetBaudRate+0x96>
    6bb8:	88 16       	cp	r8, r24
    6bba:	99 06       	cpc	r9, r25
    6bbc:	aa 06       	cpc	r10, r26
    6bbe:	bb 06       	cpc	r11, r27
    6bc0:	28 f0       	brcs	.+10     	; 0x6bcc <hal_spiSetBaudRate+0xb6>
    6bc2:	c8 14       	cp	r12, r8
    6bc4:	d9 04       	cpc	r13, r9
    6bc6:	ea 04       	cpc	r14, r10
    6bc8:	fb 04       	cpc	r15, r11
    6bca:	20 f4       	brcc	.+8      	; 0x6bd4 <hal_spiSetBaudRate+0xbe>
       (i_baudRate > i_maxSpiFreq))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6bcc:	89 81       	ldd	r24, Y+1	; 0x01
    6bce:	8f bf       	out	0x3f, r24	; 63
      return SPI_INVALID_BAUD_RATE;
    6bd0:	8c ef       	ldi	r24, 0xFC	; 252
    6bd2:	14 c1       	rjmp	.+552    	; 0x6dfc <hal_spiSetBaudRate+0x2e6>
   }

   /*------------------------------------------------------------------------*
    * Find the clock divider closest to the requested baud rate.
    *------------------------------------------------------------------------*/
   if( (i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    6bd4:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6bd8:	dc 01       	movw	r26, r24
    6bda:	cb 01       	movw	r24, r22
    6bdc:	37 e0       	ldi	r19, 0x07	; 7
    6bde:	b6 95       	lsr	r27
    6be0:	a7 95       	ror	r26
    6be2:	97 95       	ror	r25
    6be4:	87 95       	ror	r24
    6be6:	3a 95       	dec	r19
    6be8:	d1 f7       	brne	.-12     	; 0x6bde <hal_spiSetBaudRate+0xc8>
    6bea:	88 16       	cp	r8, r24
    6bec:	99 06       	cpc	r9, r25
    6bee:	aa 06       	cpc	r10, r26
    6bf0:	bb 06       	cpc	r11, r27
    6bf2:	18 f1       	brcs	.+70     	; 0x6c3a <hal_spiSetBaudRate+0x124>
       (i_baudRate < (hal_getCpuFreq() >> 6)))
    6bf4:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6bf8:	dc 01       	movw	r26, r24
    6bfa:	cb 01       	movw	r24, r22
    6bfc:	26 e0       	ldi	r18, 0x06	; 6
    6bfe:	b6 95       	lsr	r27
    6c00:	a7 95       	ror	r26
    6c02:	97 95       	ror	r25
    6c04:	87 95       	ror	r24
    6c06:	2a 95       	dec	r18
    6c08:	d1 f7       	brne	.-12     	; 0x6bfe <hal_spiSetBaudRate+0xe8>
   }

   /*------------------------------------------------------------------------*
    * Find the clock divider closest to the requested baud rate.
    *------------------------------------------------------------------------*/
   if( (i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    6c0a:	88 16       	cp	r8, r24
    6c0c:	99 06       	cpc	r9, r25
    6c0e:	aa 06       	cpc	r10, r26
    6c10:	bb 06       	cpc	r11, r27
    6c12:	98 f4       	brcc	.+38     	; 0x6c3a <hal_spiSetBaudRate+0x124>
       (i_baudRate < (hal_getCpuFreq() >> 6)))
   {
      t_clockDivision = SPI_PRESCALER_DIV128_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    6c14:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6c18:	dc 01       	movw	r26, r24
    6c1a:	cb 01       	movw	r24, r22
    6c1c:	f7 e0       	ldi	r31, 0x07	; 7
    6c1e:	b6 95       	lsr	r27
    6c20:	a7 95       	ror	r26
    6c22:	97 95       	ror	r25
    6c24:	87 95       	ror	r24
    6c26:	fa 95       	dec	r31
    6c28:	d1 f7       	brne	.-12     	; 0x6c1e <hal_spiSetBaudRate+0x108>
    6c2a:	f8 01       	movw	r30, r16
    6c2c:	81 83       	std	Z+1, r24	; 0x01
    6c2e:	92 83       	std	Z+2, r25	; 0x02
    6c30:	a3 83       	std	Z+3, r26	; 0x03
    6c32:	b4 83       	std	Z+4, r27	; 0x04
{
   t_spiChanHndl *pt_spiChanHndl;
   t_spiUserHndl *pt_spiUserHndl;
   uint32_t i_maxSpiFreq;
   SPI_PRESCALER_t t_clockDivision;
   uint8_t c_doubleClock = 0;
    6c34:	80 e0       	ldi	r24, 0x00	; 0
    * Find the clock divider closest to the requested baud rate.
    *------------------------------------------------------------------------*/
   if( (i_baudRate >= (hal_getCpuFreq() >> 7)) &&
       (i_baudRate < (hal_getCpuFreq() >> 6)))
   {
      t_clockDivision = SPI_PRESCALER_DIV128_gc;
    6c36:	93 e0       	ldi	r25, 0x03	; 3
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    6c38:	b3 c0       	rjmp	.+358    	; 0x6da0 <hal_spiSetBaudRate+0x28a>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    6c3a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6c3e:	dc 01       	movw	r26, r24
    6c40:	cb 01       	movw	r24, r22
    6c42:	e6 e0       	ldi	r30, 0x06	; 6
    6c44:	b6 95       	lsr	r27
    6c46:	a7 95       	ror	r26
    6c48:	97 95       	ror	r25
    6c4a:	87 95       	ror	r24
    6c4c:	ea 95       	dec	r30
    6c4e:	d1 f7       	brne	.-12     	; 0x6c44 <hal_spiSetBaudRate+0x12e>
    6c50:	88 16       	cp	r8, r24
    6c52:	99 06       	cpc	r9, r25
    6c54:	aa 06       	cpc	r10, r26
    6c56:	bb 06       	cpc	r11, r27
    6c58:	18 f1       	brcs	.+70     	; 0x6ca0 <hal_spiSetBaudRate+0x18a>
            (i_baudRate < (hal_getCpuFreq() >> 4)))
    6c5a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6c5e:	dc 01       	movw	r26, r24
    6c60:	cb 01       	movw	r24, r22
    6c62:	54 e0       	ldi	r21, 0x04	; 4
    6c64:	b6 95       	lsr	r27
    6c66:	a7 95       	ror	r26
    6c68:	97 95       	ror	r25
    6c6a:	87 95       	ror	r24
    6c6c:	5a 95       	dec	r21
    6c6e:	d1 f7       	brne	.-12     	; 0x6c64 <hal_spiSetBaudRate+0x14e>
       (i_baudRate < (hal_getCpuFreq() >> 6)))
   {
      t_clockDivision = SPI_PRESCALER_DIV128_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    6c70:	88 16       	cp	r8, r24
    6c72:	99 06       	cpc	r9, r25
    6c74:	aa 06       	cpc	r10, r26
    6c76:	bb 06       	cpc	r11, r27
    6c78:	98 f4       	brcc	.+38     	; 0x6ca0 <hal_spiSetBaudRate+0x18a>
            (i_baudRate < (hal_getCpuFreq() >> 4)))
   {
      t_clockDivision = SPI_PRESCALER_DIV64_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    6c7a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6c7e:	dc 01       	movw	r26, r24
    6c80:	cb 01       	movw	r24, r22
    6c82:	46 e0       	ldi	r20, 0x06	; 6
    6c84:	b6 95       	lsr	r27
    6c86:	a7 95       	ror	r26
    6c88:	97 95       	ror	r25
    6c8a:	87 95       	ror	r24
    6c8c:	4a 95       	dec	r20
    6c8e:	d1 f7       	brne	.-12     	; 0x6c84 <hal_spiSetBaudRate+0x16e>
    6c90:	f8 01       	movw	r30, r16
    6c92:	81 83       	std	Z+1, r24	; 0x01
    6c94:	92 83       	std	Z+2, r25	; 0x02
    6c96:	a3 83       	std	Z+3, r26	; 0x03
    6c98:	b4 83       	std	Z+4, r27	; 0x04
{
   t_spiChanHndl *pt_spiChanHndl;
   t_spiUserHndl *pt_spiUserHndl;
   uint32_t i_maxSpiFreq;
   SPI_PRESCALER_t t_clockDivision;
   uint8_t c_doubleClock = 0;
    6c9a:	80 e0       	ldi	r24, 0x00	; 0
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 6)) &&
            (i_baudRate < (hal_getCpuFreq() >> 4)))
   {
      t_clockDivision = SPI_PRESCALER_DIV64_gc;
    6c9c:	92 e0       	ldi	r25, 0x02	; 2
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    6c9e:	80 c0       	rjmp	.+256    	; 0x6da0 <hal_spiSetBaudRate+0x28a>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    6ca0:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6ca4:	dc 01       	movw	r26, r24
    6ca6:	cb 01       	movw	r24, r22
    6ca8:	34 e0       	ldi	r19, 0x04	; 4
    6caa:	b6 95       	lsr	r27
    6cac:	a7 95       	ror	r26
    6cae:	97 95       	ror	r25
    6cb0:	87 95       	ror	r24
    6cb2:	3a 95       	dec	r19
    6cb4:	d1 f7       	brne	.-12     	; 0x6caa <hal_spiSetBaudRate+0x194>
    6cb6:	88 16       	cp	r8, r24
    6cb8:	99 06       	cpc	r9, r25
    6cba:	aa 06       	cpc	r10, r26
    6cbc:	bb 06       	cpc	r11, r27
    6cbe:	18 f1       	brcs	.+70     	; 0x6d06 <hal_spiSetBaudRate+0x1f0>
            (i_baudRate < (hal_getCpuFreq() >> 2)))
    6cc0:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6cc4:	dc 01       	movw	r26, r24
    6cc6:	cb 01       	movw	r24, r22
    6cc8:	22 e0       	ldi	r18, 0x02	; 2
    6cca:	b6 95       	lsr	r27
    6ccc:	a7 95       	ror	r26
    6cce:	97 95       	ror	r25
    6cd0:	87 95       	ror	r24
    6cd2:	2a 95       	dec	r18
    6cd4:	d1 f7       	brne	.-12     	; 0x6cca <hal_spiSetBaudRate+0x1b4>
            (i_baudRate < (hal_getCpuFreq() >> 4)))
   {
      t_clockDivision = SPI_PRESCALER_DIV64_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    6cd6:	88 16       	cp	r8, r24
    6cd8:	99 06       	cpc	r9, r25
    6cda:	aa 06       	cpc	r10, r26
    6cdc:	bb 06       	cpc	r11, r27
    6cde:	98 f4       	brcc	.+38     	; 0x6d06 <hal_spiSetBaudRate+0x1f0>
            (i_baudRate < (hal_getCpuFreq() >> 2)))
   {
      t_clockDivision = SPI_PRESCALER_DIV16_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    6ce0:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6ce4:	dc 01       	movw	r26, r24
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	f4 e0       	ldi	r31, 0x04	; 4
    6cea:	b6 95       	lsr	r27
    6cec:	a7 95       	ror	r26
    6cee:	97 95       	ror	r25
    6cf0:	87 95       	ror	r24
    6cf2:	fa 95       	dec	r31
    6cf4:	d1 f7       	brne	.-12     	; 0x6cea <hal_spiSetBaudRate+0x1d4>
    6cf6:	f8 01       	movw	r30, r16
    6cf8:	81 83       	std	Z+1, r24	; 0x01
    6cfa:	92 83       	std	Z+2, r25	; 0x02
    6cfc:	a3 83       	std	Z+3, r26	; 0x03
    6cfe:	b4 83       	std	Z+4, r27	; 0x04
{
   t_spiChanHndl *pt_spiChanHndl;
   t_spiUserHndl *pt_spiUserHndl;
   uint32_t i_maxSpiFreq;
   SPI_PRESCALER_t t_clockDivision;
   uint8_t c_doubleClock = 0;
    6d00:	80 e0       	ldi	r24, 0x00	; 0
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 4)) &&
            (i_baudRate < (hal_getCpuFreq() >> 2)))
   {
      t_clockDivision = SPI_PRESCALER_DIV16_gc;
    6d02:	91 e0       	ldi	r25, 0x01	; 1
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    6d04:	4d c0       	rjmp	.+154    	; 0x6da0 <hal_spiSetBaudRate+0x28a>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    6d06:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6d0a:	dc 01       	movw	r26, r24
    6d0c:	cb 01       	movw	r24, r22
    6d0e:	e2 e0       	ldi	r30, 0x02	; 2
    6d10:	b6 95       	lsr	r27
    6d12:	a7 95       	ror	r26
    6d14:	97 95       	ror	r25
    6d16:	87 95       	ror	r24
    6d18:	ea 95       	dec	r30
    6d1a:	d1 f7       	brne	.-12     	; 0x6d10 <hal_spiSetBaudRate+0x1fa>
    6d1c:	88 16       	cp	r8, r24
    6d1e:	99 06       	cpc	r9, r25
    6d20:	aa 06       	cpc	r10, r26
    6d22:	bb 06       	cpc	r11, r27
    6d24:	f0 f0       	brcs	.+60     	; 0x6d62 <hal_spiSetBaudRate+0x24c>
            (i_baudRate < (hal_getCpuFreq() >> 1)))
    6d26:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6d2a:	dc 01       	movw	r26, r24
    6d2c:	cb 01       	movw	r24, r22
    6d2e:	b6 95       	lsr	r27
    6d30:	a7 95       	ror	r26
    6d32:	97 95       	ror	r25
    6d34:	87 95       	ror	r24
            (i_baudRate < (hal_getCpuFreq() >> 2)))
   {
      t_clockDivision = SPI_PRESCALER_DIV16_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    6d36:	88 16       	cp	r8, r24
    6d38:	99 06       	cpc	r9, r25
    6d3a:	aa 06       	cpc	r10, r26
    6d3c:	bb 06       	cpc	r11, r27
    6d3e:	88 f4       	brcc	.+34     	; 0x6d62 <hal_spiSetBaudRate+0x24c>
            (i_baudRate < (hal_getCpuFreq() >> 1)))
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6d40:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6d44:	dc 01       	movw	r26, r24
    6d46:	cb 01       	movw	r24, r22
    6d48:	42 e0       	ldi	r20, 0x02	; 2
    6d4a:	b6 95       	lsr	r27
    6d4c:	a7 95       	ror	r26
    6d4e:	97 95       	ror	r25
    6d50:	87 95       	ror	r24
    6d52:	4a 95       	dec	r20
    6d54:	d1 f7       	brne	.-12     	; 0x6d4a <hal_spiSetBaudRate+0x234>
    6d56:	f8 01       	movw	r30, r16
    6d58:	81 83       	std	Z+1, r24	; 0x01
    6d5a:	92 83       	std	Z+2, r25	; 0x02
    6d5c:	a3 83       	std	Z+3, r26	; 0x03
    6d5e:	b4 83       	std	Z+4, r27	; 0x04
    6d60:	1d c0       	rjmp	.+58     	; 0x6d9c <hal_spiSetBaudRate+0x286>
   }
   else
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6d62:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    6d66:	dc 01       	movw	r26, r24
    6d68:	cb 01       	movw	r24, r22
    6d6a:	32 e0       	ldi	r19, 0x02	; 2
    6d6c:	b6 95       	lsr	r27
    6d6e:	a7 95       	ror	r26
    6d70:	97 95       	ror	r25
    6d72:	87 95       	ror	r24
    6d74:	3a 95       	dec	r19
    6d76:	d1 f7       	brne	.-12     	; 0x6d6c <hal_spiSetBaudRate+0x256>
    6d78:	f8 01       	movw	r30, r16
    6d7a:	81 83       	std	Z+1, r24	; 0x01
    6d7c:	92 83       	std	Z+2, r25	; 0x02
    6d7e:	a3 83       	std	Z+3, r26	; 0x03
    6d80:	b4 83       	std	Z+4, r27	; 0x04
      c_doubleClock = 0;
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6d82:	26 81       	ldd	r18, Z+6	; 0x06
    6d84:	22 23       	and	r18, r18
    6d86:	51 f4       	brne	.+20     	; 0x6d9c <hal_spiSetBaudRate+0x286>
      {
         pt_spiChanHndl->i_baudRate *=2;
    6d88:	88 0f       	add	r24, r24
    6d8a:	99 1f       	adc	r25, r25
    6d8c:	aa 1f       	adc	r26, r26
    6d8e:	bb 1f       	adc	r27, r27
    6d90:	81 83       	std	Z+1, r24	; 0x01
    6d92:	92 83       	std	Z+2, r25	; 0x02
    6d94:	a3 83       	std	Z+3, r26	; 0x03
    6d96:	b4 83       	std	Z+4, r27	; 0x04
         c_doubleClock = SPI_CLK2X_bm;
    6d98:	80 e8       	ldi	r24, 0x80	; 128
    6d9a:	01 c0       	rjmp	.+2      	; 0x6d9e <hal_spiSetBaudRate+0x288>
   }
   else
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
      c_doubleClock = 0;
    6d9c:	80 e0       	ldi	r24, 0x00	; 0
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
   }
   else
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
    6d9e:	90 e0       	ldi	r25, 0x00	; 0
   }

   /*------------------------------------------------------------------------*
    * Disable the spi channel.
    *------------------------------------------------------------------------*/
    pt_spiChanHndl->pt_spi->CTRL &= ~SPI_ENABLE_bm;
    6da0:	d8 01       	movw	r26, r16
    6da2:	17 96       	adiw	r26, 0x07	; 7
    6da4:	ed 91       	ld	r30, X+
    6da6:	fc 91       	ld	r31, X
    6da8:	18 97       	sbiw	r26, 0x08	; 8
    6daa:	20 81       	ld	r18, Z
    6dac:	2f 7b       	andi	r18, 0xBF	; 191
    6dae:	20 83       	st	Z, r18

   /*------------------------------------------------------------------------*
    * Configure the spi baud rate.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->CTRL &= ~(SPI_PRESCALER_gm << SPI_PRESCALER_gp);
    6db0:	17 96       	adiw	r26, 0x07	; 7
    6db2:	ed 91       	ld	r30, X+
    6db4:	fc 91       	ld	r31, X
    6db6:	18 97       	sbiw	r26, 0x08	; 8
    6db8:	20 81       	ld	r18, Z
    6dba:	2c 7f       	andi	r18, 0xFC	; 252
    6dbc:	20 83       	st	Z, r18
   pt_spiChanHndl->pt_spi->CTRL |= t_clockDivision;
    6dbe:	17 96       	adiw	r26, 0x07	; 7
    6dc0:	ed 91       	ld	r30, X+
    6dc2:	fc 91       	ld	r31, X
    6dc4:	18 97       	sbiw	r26, 0x08	; 8
    6dc6:	20 81       	ld	r18, Z
    6dc8:	29 2b       	or	r18, r25
    6dca:	20 83       	st	Z, r18
   pt_spiChanHndl->pt_spi->CTRL &= ~SPI_CLK2X_bm;
    6dcc:	17 96       	adiw	r26, 0x07	; 7
    6dce:	ed 91       	ld	r30, X+
    6dd0:	fc 91       	ld	r31, X
    6dd2:	18 97       	sbiw	r26, 0x08	; 8
    6dd4:	90 81       	ld	r25, Z
    6dd6:	9f 77       	andi	r25, 0x7F	; 127
    6dd8:	90 83       	st	Z, r25
   pt_spiChanHndl->pt_spi->CTRL |= c_doubleClock;
    6dda:	17 96       	adiw	r26, 0x07	; 7
    6ddc:	ed 91       	ld	r30, X+
    6dde:	fc 91       	ld	r31, X
    6de0:	18 97       	sbiw	r26, 0x08	; 8
    6de2:	90 81       	ld	r25, Z
    6de4:	98 2b       	or	r25, r24
    6de6:	90 83       	st	Z, r25

   /*------------------------------------------------------------------------*
    * Enable the spi channel.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->CTRL |= SPI_ENABLE_bm;
    6de8:	17 96       	adiw	r26, 0x07	; 7
    6dea:	ed 91       	ld	r30, X+
    6dec:	fc 91       	ld	r31, X
    6dee:	18 97       	sbiw	r26, 0x08	; 8
    6df0:	80 81       	ld	r24, Z
    6df2:	80 64       	ori	r24, 0x40	; 64
    6df4:	80 83       	st	Z, r24

   HAL_END_CRITICAL();//Enable interrupts
    6df6:	89 81       	ldd	r24, Y+1	; 0x01
    6df8:	8f bf       	out	0x3f, r24	; 63

   return SPI_PASSED;
    6dfa:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiSetBaudRate*/
    6dfc:	23 96       	adiw	r28, 0x03	; 3
    6dfe:	cd bf       	out	0x3d, r28	; 61
    6e00:	de bf       	out	0x3e, r29	; 62
    6e02:	df 91       	pop	r29
    6e04:	cf 91       	pop	r28
    6e06:	1f 91       	pop	r17
    6e08:	0f 91       	pop	r16
    6e0a:	ff 90       	pop	r15
    6e0c:	ef 90       	pop	r14
    6e0e:	df 90       	pop	r13
    6e10:	cf 90       	pop	r12
    6e12:	bf 90       	pop	r11
    6e14:	af 90       	pop	r10
    6e16:	9f 90       	pop	r9
    6e18:	8f 90       	pop	r8
    6e1a:	08 95       	ret

00006e1c <hal_spiReadBlock>:

t_spiError hal_spiReadBlock( t_SPIHNDL t_handle,
                             bool b_enCs,
                             int8_t *pc_rxBuffer,
                             uint16_t s_numBytes)
{
    6e1c:	2f 92       	push	r2
    6e1e:	3f 92       	push	r3
    6e20:	4f 92       	push	r4
    6e22:	5f 92       	push	r5
    6e24:	6f 92       	push	r6
    6e26:	7f 92       	push	r7
    6e28:	8f 92       	push	r8
    6e2a:	9f 92       	push	r9
    6e2c:	af 92       	push	r10
    6e2e:	bf 92       	push	r11
    6e30:	cf 92       	push	r12
    6e32:	df 92       	push	r13
    6e34:	ef 92       	push	r14
    6e36:	ff 92       	push	r15
    6e38:	0f 93       	push	r16
    6e3a:	1f 93       	push	r17
    6e3c:	cf 93       	push	r28
    6e3e:	df 93       	push	r29
    6e40:	cd b7       	in	r28, 0x3d	; 61
    6e42:	de b7       	in	r29, 0x3e	; 62
    6e44:	63 97       	sbiw	r28, 0x13	; 19
    6e46:	cd bf       	out	0x3d, r28	; 61
    6e48:	de bf       	out	0x3e, r29	; 62
    6e4a:	88 8b       	std	Y+16, r24	; 0x10
    6e4c:	99 8b       	std	Y+17, r25	; 0x11
    6e4e:	66 2e       	mov	r6, r22
    6e50:	4a 8b       	std	Y+18, r20	; 0x12
    6e52:	5b 8b       	std	Y+19, r21	; 0x13
    6e54:	19 01       	movw	r2, r18
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6e56:	e8 89       	ldd	r30, Y+16	; 0x10
    6e58:	f9 89       	ldd	r31, Y+17	; 0x11
    6e5a:	80 91 b2 20 	lds	r24, 0x20B2
    6e5e:	90 91 b3 20 	lds	r25, 0x20B3
    6e62:	24 81       	ldd	r18, Z+4	; 0x04
    6e64:	35 81       	ldd	r19, Z+5	; 0x05
    6e66:	28 17       	cp	r18, r24
    6e68:	39 07       	cpc	r19, r25
    6e6a:	09 f0       	breq	.+2      	; 0x6e6e <hal_spiReadBlock+0x52>
    6e6c:	53 c1       	rjmp	.+678    	; 0x7114 <hal_spiReadBlock+0x2f8>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    6e6e:	e8 89       	ldd	r30, Y+16	; 0x10
    6e70:	f9 89       	ldd	r31, Y+17	; 0x11

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6e72:	40 80       	ld	r4, Z
    6e74:	51 80       	ldd	r5, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6e76:	d2 01       	movw	r26, r4
    6e78:	1c 96       	adiw	r26, 0x0c	; 12
    6e7a:	8d 90       	ld	r8, X+
    6e7c:	9c 90       	ld	r9, X
    6e7e:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6e80:	8f b7       	in	r24, 0x3f	; 63
    6e82:	89 83       	std	Y+1, r24	; 0x01
    6e84:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    6e86:	f4 01       	movw	r30, r8
    6e88:	81 85       	ldd	r24, Z+9	; 0x09
    6e8a:	88 23       	and	r24, r24
    6e8c:	49 f0       	breq	.+18     	; 0x6ea0 <hal_spiReadBlock+0x84>
    6e8e:	82 85       	ldd	r24, Z+10	; 0x0a
    6e90:	93 85       	ldd	r25, Z+11	; 0x0b
    6e92:	84 15       	cp	r24, r4
    6e94:	95 05       	cpc	r25, r5
    6e96:	21 f0       	breq	.+8      	; 0x6ea0 <hal_spiReadBlock+0x84>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6e98:	89 81       	ldd	r24, Y+1	; 0x01
    6e9a:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    6e9c:	84 ef       	ldi	r24, 0xF4	; 244
    6e9e:	3d c1       	rjmp	.+634    	; 0x711a <hal_spiReadBlock+0x2fe>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    6ea0:	81 e0       	ldi	r24, 0x01	; 1
    6ea2:	d4 01       	movw	r26, r8
    6ea4:	19 96       	adiw	r26, 0x09	; 9
    6ea6:	8c 93       	st	X, r24
    6ea8:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    6eaa:	1a 96       	adiw	r26, 0x0a	; 10
    6eac:	4d 92       	st	X+, r4
    6eae:	5c 92       	st	X, r5
    6eb0:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    6eb2:	89 81       	ldd	r24, Y+1	; 0x01
    6eb4:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      gc_tempBuf = 0xFF;
    6eb6:	8f ef       	ldi	r24, 0xFF	; 255
    6eb8:	80 93 ce 20 	sts	0x20CE, r24
      pt_spiUserHndl->pc_txData   = (int8_t *)&gc_tempBuf;
    6ebc:	8e ec       	ldi	r24, 0xCE	; 206
    6ebe:	90 e2       	ldi	r25, 0x20	; 32
    6ec0:	f2 01       	movw	r30, r4
    6ec2:	82 83       	std	Z+2, r24	; 0x02
    6ec4:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = pc_rxBuffer;
    6ec6:	8a 89       	ldd	r24, Y+18	; 0x12
    6ec8:	9b 89       	ldd	r25, Y+19	; 0x13
    6eca:	84 83       	std	Z+4, r24	; 0x04
    6ecc:	95 83       	std	Z+5, r25	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    6ece:	26 82       	std	Z+6, r2	; 0x06
    6ed0:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_rxDmaHndl > 0)
    6ed2:	50 96       	adiw	r26, 0x10	; 16
    6ed4:	8d 91       	ld	r24, X+
    6ed6:	9c 91       	ld	r25, X
    6ed8:	51 97       	sbiw	r26, 0x11	; 17
    6eda:	17 96       	adiw	r26, 0x07	; 7
    6edc:	ed 91       	ld	r30, X+
    6ede:	fc 91       	ld	r31, X
    6ee0:	18 97       	sbiw	r26, 0x08	; 8
    6ee2:	18 16       	cp	r1, r24
    6ee4:	19 06       	cpc	r1, r25
    6ee6:	0c f0       	brlt	.+2      	; 0x6eea <hal_spiReadBlock+0xce>
    6ee8:	7a c0       	rjmp	.+244    	; 0x6fde <hal_spiReadBlock+0x1c2>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6eea:	11 82       	std	Z+1, r1	; 0x01
    6eec:	ec 91       	ld	r30, X
    6eee:	e1 50       	subi	r30, 0x01	; 1
    6ef0:	e3 30       	cpi	r30, 0x03	; 3
    6ef2:	28 f4       	brcc	.+10     	; 0x6efe <hal_spiReadBlock+0xe2>
    6ef4:	f0 e0       	ldi	r31, 0x00	; 0
    6ef6:	e1 53       	subi	r30, 0x31	; 49
    6ef8:	ff 4d       	sbci	r31, 0xDF	; 223
    6efa:	60 81       	ld	r22, Z
    6efc:	01 c0       	rjmp	.+2      	; 0x6f00 <hal_spiReadBlock+0xe4>

         switch( pt_spiChanHndl->t_id)
    6efe:	6a e4       	ldi	r22, 0x4A	; 74
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( (pt_spiChanHndl->t_spiOp == SPI_MASTER) &&
    6f00:	d4 01       	movw	r26, r8
    6f02:	16 96       	adiw	r26, 0x06	; 6
    6f04:	2c 91       	ld	r18, X
    6f06:	16 97       	sbiw	r26, 0x06	; 6
    6f08:	f2 01       	movw	r30, r4
    6f0a:	82 81       	ldd	r24, Z+2	; 0x02
    6f0c:	93 81       	ldd	r25, Z+3	; 0x03
    6f0e:	22 23       	and	r18, r18
    6f10:	29 f4       	brne	.+10     	; 0x6f1c <hal_spiReadBlock+0x100>
    6f12:	f0 e2       	ldi	r31, 0x20	; 32
    6f14:	8e 3c       	cpi	r24, 0xCE	; 206
    6f16:	9f 07       	cpc	r25, r31
    6f18:	09 f0       	breq	.+2      	; 0x6f1c <hal_spiReadBlock+0x100>
            !(pt_spiUserHndl->pc_txData == (int8_t *)&gc_tempBuf))
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[1];
    6f1a:	01 96       	adiw	r24, 0x01	; 1
         else
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[0];
    6f1c:	8a 83       	std	Y+2, r24	; 0x02
    6f1e:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    6f20:	d4 01       	movw	r26, r8
    6f22:	17 96       	adiw	r26, 0x07	; 7
    6f24:	8d 91       	ld	r24, X+
    6f26:	9c 91       	ld	r25, X
    6f28:	18 97       	sbiw	r26, 0x08	; 8
    6f2a:	03 96       	adiw	r24, 0x03	; 3
    6f2c:	8c 83       	std	Y+4, r24	; 0x04
    6f2e:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    6f30:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    6f32:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    6f34:	81 e0       	ldi	r24, 0x01	; 1
    6f36:	88 87       	std	Y+8, r24	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    6f38:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6f3a:	22 23       	and	r18, r18
    6f3c:	29 f4       	brne	.+10     	; 0x6f48 <hal_spiReadBlock+0x12c>
            t_chanConf.s_blockSize = s_numBytes - 1;
    6f3e:	c1 01       	movw	r24, r2
    6f40:	01 97       	sbiw	r24, 0x01	; 1
    6f42:	8a 87       	std	Y+10, r24	; 0x0a
    6f44:	9b 87       	std	Y+11, r25	; 0x0b
    6f46:	02 c0       	rjmp	.+4      	; 0x6f4c <hal_spiReadBlock+0x130>
         else
            t_chanConf.s_blockSize = s_numBytes;
    6f48:	2a 86       	std	Y+10, r2	; 0x0a
    6f4a:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
    6f4c:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    6f4e:	77 24       	eor	r7, r7
    6f50:	73 94       	inc	r7
    6f52:	7d 86       	std	Y+13, r7	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    6f54:	6e 87       	std	Y+14, r22	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    6f56:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    6f58:	f4 01       	movw	r30, r8
    6f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    6f5c:	97 85       	ldd	r25, Z+15	; 0x0f
    6f5e:	aa 80       	ldd	r10, Y+2	; 0x02
    6f60:	bb 80       	ldd	r11, Y+3	; 0x03
    6f62:	cc 80       	ldd	r12, Y+4	; 0x04
    6f64:	dd 80       	ldd	r13, Y+5	; 0x05
    6f66:	ee 80       	ldd	r14, Y+6	; 0x06
    6f68:	ff 80       	ldd	r15, Y+7	; 0x07
    6f6a:	08 85       	ldd	r16, Y+8	; 0x08
    6f6c:	19 85       	ldd	r17, Y+9	; 0x09
    6f6e:	2a 85       	ldd	r18, Y+10	; 0x0a
    6f70:	3b 85       	ldd	r19, Y+11	; 0x0b
    6f72:	40 e0       	ldi	r20, 0x00	; 0
    6f74:	51 e0       	ldi	r21, 0x01	; 1
    6f76:	70 e0       	ldi	r23, 0x00	; 0
    6f78:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    6f7c:	d4 01       	movw	r26, r8
    6f7e:	1e 96       	adiw	r26, 0x0e	; 14
    6f80:	8d 91       	ld	r24, X+
    6f82:	9c 91       	ld	r25, X
    6f84:	1f 97       	sbiw	r26, 0x0f	; 15
    6f86:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    6f8a:	f4 01       	movw	r30, r8
    6f8c:	87 81       	ldd	r24, Z+7	; 0x07
    6f8e:	90 85       	ldd	r25, Z+8	; 0x08
    6f90:	03 96       	adiw	r24, 0x03	; 3
    6f92:	8a 83       	std	Y+2, r24	; 0x02
    6f94:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    6f96:	8a 89       	ldd	r24, Y+18	; 0x12
    6f98:	9b 89       	ldd	r25, Y+19	; 0x13
    6f9a:	8c 83       	std	Y+4, r24	; 0x04
    6f9c:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
         t_chanConf.t_destAddDir    = INCREMENT;
    6f9e:	7f 82       	std	Y+7, r7	; 0x07
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    6fa0:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    6fa2:	79 86       	std	Y+9, r7	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
    6fa4:	2a 86       	std	Y+10, r2	; 0x0a
    6fa6:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
         t_chanConf.t_transferType  = SINGLE_SHOT;
         t_chanConf.t_triggerSrc    = t_trigger;
         t_chanConf.c_repeatCount   = 0;

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    6fa8:	80 89       	ldd	r24, Z+16	; 0x10
    6faa:	91 89       	ldd	r25, Z+17	; 0x11
    6fac:	aa 80       	ldd	r10, Y+2	; 0x02
    6fae:	bb 80       	ldd	r11, Y+3	; 0x03
    6fb0:	cc 80       	ldd	r12, Y+4	; 0x04
    6fb2:	dd 80       	ldd	r13, Y+5	; 0x05
    6fb4:	ee 80       	ldd	r14, Y+6	; 0x06
    6fb6:	ff 24       	eor	r15, r15
    6fb8:	f3 94       	inc	r15
    6fba:	00 e0       	ldi	r16, 0x00	; 0
    6fbc:	11 e0       	ldi	r17, 0x01	; 1
    6fbe:	2a 85       	ldd	r18, Y+10	; 0x0a
    6fc0:	3b 85       	ldd	r19, Y+11	; 0x0b
    6fc2:	4c 85       	ldd	r20, Y+12	; 0x0c
    6fc4:	5d 85       	ldd	r21, Y+13	; 0x0d
    6fc6:	6e 85       	ldd	r22, Y+14	; 0x0e
    6fc8:	7f 85       	ldd	r23, Y+15	; 0x0f
    6fca:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    6fce:	d4 01       	movw	r26, r8
    6fd0:	50 96       	adiw	r26, 0x10	; 16
    6fd2:	8d 91       	ld	r24, X+
    6fd4:	9c 91       	ld	r25, X
    6fd6:	51 97       	sbiw	r26, 0x11	; 17
    6fd8:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>
    6fdc:	02 c0       	rjmp	.+4      	; 0x6fe2 <hal_spiReadBlock+0x1c6>

      }/*End if( pt_spiChanHndl->t_rxDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    6fde:	83 e0       	ldi	r24, 0x03	; 3
    6fe0:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6fe2:	f4 01       	movw	r30, r8
    6fe4:	86 81       	ldd	r24, Z+6	; 0x06
    6fe6:	88 23       	and	r24, r24
    6fe8:	09 f0       	breq	.+2      	; 0x6fec <hal_spiReadBlock+0x1d0>
    6fea:	96 c0       	rjmp	.+300    	; 0x7118 <hal_spiReadBlock+0x2fc>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    6fec:	d2 01       	movw	r26, r4
    6fee:	18 96       	adiw	r26, 0x08	; 8
    6ff0:	1d 92       	st	X+, r1
    6ff2:	1c 92       	st	X, r1
    6ff4:	19 97       	sbiw	r26, 0x09	; 9
         pt_spiUserHndl->b_enCs = b_enCs;
    6ff6:	50 96       	adiw	r26, 0x10	; 16
    6ff8:	6c 92       	st	X, r6
    6ffa:	50 97       	sbiw	r26, 0x10	; 16

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    6ffc:	66 20       	and	r6, r6
    6ffe:	09 f4       	brne	.+2      	; 0x7002 <hal_spiReadBlock+0x1e6>
    7000:	7d c0       	rjmp	.+250    	; 0x70fc <hal_spiReadBlock+0x2e0>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    7002:	1b 96       	adiw	r26, 0x0b	; 11
    7004:	8c 91       	ld	r24, X
    7006:	1b 97       	sbiw	r26, 0x0b	; 11
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    7008:	1a 96       	adiw	r26, 0x0a	; 10
    700a:	9c 91       	ld	r25, X
    700c:	1a 97       	sbiw	r26, 0x0a	; 10
    700e:	95 30       	cpi	r25, 0x05	; 5
    7010:	09 f4       	brne	.+2      	; 0x7014 <hal_spiReadBlock+0x1f8>
    7012:	4a c0       	rjmp	.+148    	; 0x70a8 <hal_spiReadBlock+0x28c>
    7014:	96 30       	cpi	r25, 0x06	; 6
    7016:	80 f4       	brcc	.+32     	; 0x7038 <hal_spiReadBlock+0x21c>
    7018:	92 30       	cpi	r25, 0x02	; 2
    701a:	81 f1       	breq	.+96     	; 0x707c <hal_spiReadBlock+0x260>
    701c:	93 30       	cpi	r25, 0x03	; 3
    701e:	30 f4       	brcc	.+12     	; 0x702c <hal_spiReadBlock+0x210>
    7020:	99 23       	and	r25, r25
    7022:	e1 f0       	breq	.+56     	; 0x705c <hal_spiReadBlock+0x240>
    7024:	91 30       	cpi	r25, 0x01	; 1
    7026:	09 f0       	breq	.+2      	; 0x702a <hal_spiReadBlock+0x20e>
    7028:	69 c0       	rjmp	.+210    	; 0x70fc <hal_spiReadBlock+0x2e0>
    702a:	20 c0       	rjmp	.+64     	; 0x706c <hal_spiReadBlock+0x250>
    702c:	93 30       	cpi	r25, 0x03	; 3
    702e:	71 f1       	breq	.+92     	; 0x708c <hal_spiReadBlock+0x270>
    7030:	94 30       	cpi	r25, 0x04	; 4
    7032:	09 f0       	breq	.+2      	; 0x7036 <hal_spiReadBlock+0x21a>
    7034:	63 c0       	rjmp	.+198    	; 0x70fc <hal_spiReadBlock+0x2e0>
    7036:	31 c0       	rjmp	.+98     	; 0x709a <hal_spiReadBlock+0x27e>
    7038:	98 30       	cpi	r25, 0x08	; 8
    703a:	09 f4       	brne	.+2      	; 0x703e <hal_spiReadBlock+0x222>
    703c:	4a c0       	rjmp	.+148    	; 0x70d2 <hal_spiReadBlock+0x2b6>
    703e:	99 30       	cpi	r25, 0x09	; 9
    7040:	30 f4       	brcc	.+12     	; 0x704e <hal_spiReadBlock+0x232>
    7042:	96 30       	cpi	r25, 0x06	; 6
    7044:	c1 f1       	breq	.+112    	; 0x70b6 <hal_spiReadBlock+0x29a>
    7046:	97 30       	cpi	r25, 0x07	; 7
    7048:	09 f0       	breq	.+2      	; 0x704c <hal_spiReadBlock+0x230>
    704a:	58 c0       	rjmp	.+176    	; 0x70fc <hal_spiReadBlock+0x2e0>
    704c:	3b c0       	rjmp	.+118    	; 0x70c4 <hal_spiReadBlock+0x2a8>
    704e:	99 30       	cpi	r25, 0x09	; 9
    7050:	09 f4       	brne	.+2      	; 0x7054 <hal_spiReadBlock+0x238>
    7052:	46 c0       	rjmp	.+140    	; 0x70e0 <hal_spiReadBlock+0x2c4>
    7054:	9a 30       	cpi	r25, 0x0A	; 10
    7056:	09 f0       	breq	.+2      	; 0x705a <hal_spiReadBlock+0x23e>
    7058:	51 c0       	rjmp	.+162    	; 0x70fc <hal_spiReadBlock+0x2e0>
    705a:	49 c0       	rjmp	.+146    	; 0x70ee <hal_spiReadBlock+0x2d2>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    705c:	90 91 00 06 	lds	r25, 0x0600
    7060:	98 23       	and	r25, r24
    7062:	09 f4       	brne	.+2      	; 0x7066 <hal_spiReadBlock+0x24a>
    7064:	4b c0       	rjmp	.+150    	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    7066:	e0 e0       	ldi	r30, 0x00	; 0
    7068:	f6 e0       	ldi	r31, 0x06	; 6
    706a:	47 c0       	rjmp	.+142    	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    706c:	90 91 20 06 	lds	r25, 0x0620
    7070:	98 23       	and	r25, r24
    7072:	09 f4       	brne	.+2      	; 0x7076 <hal_spiReadBlock+0x25a>
    7074:	43 c0       	rjmp	.+134    	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    7076:	e0 e2       	ldi	r30, 0x20	; 32
    7078:	f6 e0       	ldi	r31, 0x06	; 6
    707a:	3f c0       	rjmp	.+126    	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    707c:	90 91 40 06 	lds	r25, 0x0640
    7080:	98 23       	and	r25, r24
    7082:	09 f4       	brne	.+2      	; 0x7086 <hal_spiReadBlock+0x26a>
    7084:	3b c0       	rjmp	.+118    	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    7086:	e0 e4       	ldi	r30, 0x40	; 64
    7088:	f6 e0       	ldi	r31, 0x06	; 6
    708a:	37 c0       	rjmp	.+110    	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    708c:	90 91 60 06 	lds	r25, 0x0660
    7090:	98 23       	and	r25, r24
    7092:	a1 f1       	breq	.+104    	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    7094:	e0 e6       	ldi	r30, 0x60	; 96
    7096:	f6 e0       	ldi	r31, 0x06	; 6
    7098:	30 c0       	rjmp	.+96     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    709a:	90 91 80 06 	lds	r25, 0x0680
    709e:	98 23       	and	r25, r24
    70a0:	69 f1       	breq	.+90     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    70a2:	e0 e8       	ldi	r30, 0x80	; 128
    70a4:	f6 e0       	ldi	r31, 0x06	; 6
    70a6:	29 c0       	rjmp	.+82     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    70a8:	90 91 a0 06 	lds	r25, 0x06A0
    70ac:	98 23       	and	r25, r24
    70ae:	31 f1       	breq	.+76     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    70b0:	e0 ea       	ldi	r30, 0xA0	; 160
    70b2:	f6 e0       	ldi	r31, 0x06	; 6
    70b4:	22 c0       	rjmp	.+68     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    70b6:	90 91 e0 06 	lds	r25, 0x06E0
    70ba:	98 23       	and	r25, r24
    70bc:	f9 f0       	breq	.+62     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    70be:	e0 ee       	ldi	r30, 0xE0	; 224
    70c0:	f6 e0       	ldi	r31, 0x06	; 6
    70c2:	1b c0       	rjmp	.+54     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    70c4:	90 91 00 07 	lds	r25, 0x0700
    70c8:	98 23       	and	r25, r24
    70ca:	c1 f0       	breq	.+48     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    70cc:	e0 e0       	ldi	r30, 0x00	; 0
    70ce:	f7 e0       	ldi	r31, 0x07	; 7
    70d0:	14 c0       	rjmp	.+40     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    70d2:	90 91 20 07 	lds	r25, 0x0720
    70d6:	98 23       	and	r25, r24
    70d8:	89 f0       	breq	.+34     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    70da:	e0 e2       	ldi	r30, 0x20	; 32
    70dc:	f7 e0       	ldi	r31, 0x07	; 7
    70de:	0d c0       	rjmp	.+26     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    70e0:	90 91 c0 07 	lds	r25, 0x07C0
    70e4:	98 23       	and	r25, r24
    70e6:	51 f0       	breq	.+20     	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    70e8:	e0 ec       	ldi	r30, 0xC0	; 192
    70ea:	f7 e0       	ldi	r31, 0x07	; 7
    70ec:	06 c0       	rjmp	.+12     	; 0x70fa <hal_spiReadBlock+0x2de>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    70ee:	90 91 e0 07 	lds	r25, 0x07E0
    70f2:	98 23       	and	r25, r24
    70f4:	19 f0       	breq	.+6      	; 0x70fc <hal_spiReadBlock+0x2e0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    70f6:	e0 ee       	ldi	r30, 0xE0	; 224
    70f8:	f7 e0       	ldi	r31, 0x07	; 7
    70fa:	86 83       	std	Z+6, r24	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pt_spiUserHndl->pc_txData[0];
    70fc:	f4 01       	movw	r30, r8
    70fe:	27 81       	ldd	r18, Z+7	; 0x07
    7100:	30 85       	ldd	r19, Z+8	; 0x08
    7102:	f2 01       	movw	r30, r4
    7104:	a2 81       	ldd	r26, Z+2	; 0x02
    7106:	b3 81       	ldd	r27, Z+3	; 0x03
    7108:	8c 91       	ld	r24, X
    710a:	d9 01       	movw	r26, r18
    710c:	13 96       	adiw	r26, 0x03	; 3
    710e:	8c 93       	st	X, r24
    7110:	13 97       	sbiw	r26, 0x03	; 3
    7112:	02 c0       	rjmp	.+4      	; 0x7118 <hal_spiReadBlock+0x2fc>
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
   false)
   {
      return SPI_INVALID_HANDLE;
    7114:	8e ef       	ldi	r24, 0xFE	; 254
    7116:	01 c0       	rjmp	.+2      	; 0x711a <hal_spiReadBlock+0x2fe>

       }/*End if( pt_spiChanHndl->t_spiOp == SPI_MASTER)*/

   }

   return SPI_PASSED;
    7118:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiReadBlock*/
    711a:	63 96       	adiw	r28, 0x13	; 19
    711c:	cd bf       	out	0x3d, r28	; 61
    711e:	de bf       	out	0x3e, r29	; 62
    7120:	df 91       	pop	r29
    7122:	cf 91       	pop	r28
    7124:	1f 91       	pop	r17
    7126:	0f 91       	pop	r16
    7128:	ff 90       	pop	r15
    712a:	ef 90       	pop	r14
    712c:	df 90       	pop	r13
    712e:	cf 90       	pop	r12
    7130:	bf 90       	pop	r11
    7132:	af 90       	pop	r10
    7134:	9f 90       	pop	r9
    7136:	8f 90       	pop	r8
    7138:	7f 90       	pop	r7
    713a:	6f 90       	pop	r6
    713c:	5f 90       	pop	r5
    713e:	4f 90       	pop	r4
    7140:	3f 90       	pop	r3
    7142:	2f 90       	pop	r2
    7144:	08 95       	ret

00007146 <hal_spiWriteBlock>:

t_spiError hal_spiWriteBlock( t_SPIHNDL t_handle,
                              bool b_enCs,
                              int8_t *pc_txBuffer,
                              uint16_t s_numBytes)
{
    7146:	2f 92       	push	r2
    7148:	3f 92       	push	r3
    714a:	4f 92       	push	r4
    714c:	5f 92       	push	r5
    714e:	6f 92       	push	r6
    7150:	7f 92       	push	r7
    7152:	8f 92       	push	r8
    7154:	9f 92       	push	r9
    7156:	af 92       	push	r10
    7158:	bf 92       	push	r11
    715a:	cf 92       	push	r12
    715c:	df 92       	push	r13
    715e:	ef 92       	push	r14
    7160:	ff 92       	push	r15
    7162:	0f 93       	push	r16
    7164:	1f 93       	push	r17
    7166:	cf 93       	push	r28
    7168:	df 93       	push	r29
    716a:	cd b7       	in	r28, 0x3d	; 61
    716c:	de b7       	in	r29, 0x3e	; 62
    716e:	63 97       	sbiw	r28, 0x13	; 19
    7170:	cd bf       	out	0x3d, r28	; 61
    7172:	de bf       	out	0x3e, r29	; 62
    7174:	88 8b       	std	Y+16, r24	; 0x10
    7176:	99 8b       	std	Y+17, r25	; 0x11
    7178:	46 2e       	mov	r4, r22
    717a:	4a 8b       	std	Y+18, r20	; 0x12
    717c:	5b 8b       	std	Y+19, r21	; 0x13
    717e:	19 01       	movw	r2, r18
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    7180:	e8 89       	ldd	r30, Y+16	; 0x10
    7182:	f9 89       	ldd	r31, Y+17	; 0x11
    7184:	80 91 b2 20 	lds	r24, 0x20B2
    7188:	90 91 b3 20 	lds	r25, 0x20B3
    718c:	24 81       	ldd	r18, Z+4	; 0x04
    718e:	35 81       	ldd	r19, Z+5	; 0x05
    7190:	28 17       	cp	r18, r24
    7192:	39 07       	cpc	r19, r25
    7194:	09 f0       	breq	.+2      	; 0x7198 <hal_spiWriteBlock+0x52>
    7196:	4b c1       	rjmp	.+662    	; 0x742e <hal_spiWriteBlock+0x2e8>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    7198:	e8 89       	ldd	r30, Y+16	; 0x10
    719a:	f9 89       	ldd	r31, Y+17	; 0x11

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    719c:	60 80       	ld	r6, Z
    719e:	71 80       	ldd	r7, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    71a0:	d3 01       	movw	r26, r6
    71a2:	1c 96       	adiw	r26, 0x0c	; 12
    71a4:	8d 90       	ld	r8, X+
    71a6:	9c 90       	ld	r9, X
    71a8:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    71aa:	8f b7       	in	r24, 0x3f	; 63
    71ac:	89 83       	std	Y+1, r24	; 0x01
    71ae:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    71b0:	f4 01       	movw	r30, r8
    71b2:	81 85       	ldd	r24, Z+9	; 0x09
    71b4:	88 23       	and	r24, r24
    71b6:	49 f0       	breq	.+18     	; 0x71ca <hal_spiWriteBlock+0x84>
    71b8:	82 85       	ldd	r24, Z+10	; 0x0a
    71ba:	93 85       	ldd	r25, Z+11	; 0x0b
    71bc:	86 15       	cp	r24, r6
    71be:	97 05       	cpc	r25, r7
    71c0:	21 f0       	breq	.+8      	; 0x71ca <hal_spiWriteBlock+0x84>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    71c2:	89 81       	ldd	r24, Y+1	; 0x01
    71c4:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    71c6:	84 ef       	ldi	r24, 0xF4	; 244
    71c8:	35 c1       	rjmp	.+618    	; 0x7434 <hal_spiWriteBlock+0x2ee>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    71ca:	81 e0       	ldi	r24, 0x01	; 1
    71cc:	d4 01       	movw	r26, r8
    71ce:	19 96       	adiw	r26, 0x09	; 9
    71d0:	8c 93       	st	X, r24
    71d2:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    71d4:	1a 96       	adiw	r26, 0x0a	; 10
    71d6:	6d 92       	st	X+, r6
    71d8:	7c 92       	st	X, r7
    71da:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    71dc:	89 81       	ldd	r24, Y+1	; 0x01
    71de:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      gc_tempBuf = 0xFF;
    71e0:	8f ef       	ldi	r24, 0xFF	; 255
    71e2:	80 93 ce 20 	sts	0x20CE, r24
      pt_spiUserHndl->pc_txData   = pc_txBuffer;
    71e6:	8a 89       	ldd	r24, Y+18	; 0x12
    71e8:	9b 89       	ldd	r25, Y+19	; 0x13
    71ea:	f3 01       	movw	r30, r6
    71ec:	82 83       	std	Z+2, r24	; 0x02
    71ee:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = (int8_t *)&gc_tempBuf;
    71f0:	8e ec       	ldi	r24, 0xCE	; 206
    71f2:	90 e2       	ldi	r25, 0x20	; 32
    71f4:	84 83       	std	Z+4, r24	; 0x04
    71f6:	95 83       	std	Z+5, r25	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    71f8:	26 82       	std	Z+6, r2	; 0x06
    71fa:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_txDmaHndl > 0)
    71fc:	1e 96       	adiw	r26, 0x0e	; 14
    71fe:	8d 91       	ld	r24, X+
    7200:	9c 91       	ld	r25, X
    7202:	1f 97       	sbiw	r26, 0x0f	; 15
    7204:	17 96       	adiw	r26, 0x07	; 7
    7206:	ed 91       	ld	r30, X+
    7208:	fc 91       	ld	r31, X
    720a:	18 97       	sbiw	r26, 0x08	; 8
    720c:	18 16       	cp	r1, r24
    720e:	19 06       	cpc	r1, r25
    7210:	0c f0       	brlt	.+2      	; 0x7214 <hal_spiWriteBlock+0xce>
    7212:	7a c0       	rjmp	.+244    	; 0x7308 <hal_spiWriteBlock+0x1c2>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    7214:	11 82       	std	Z+1, r1	; 0x01
    7216:	ec 91       	ld	r30, X
    7218:	e1 50       	subi	r30, 0x01	; 1
    721a:	e3 30       	cpi	r30, 0x03	; 3
    721c:	28 f4       	brcc	.+10     	; 0x7228 <hal_spiWriteBlock+0xe2>
    721e:	f0 e0       	ldi	r31, 0x00	; 0
    7220:	ee 52       	subi	r30, 0x2E	; 46
    7222:	ff 4d       	sbci	r31, 0xDF	; 223
    7224:	60 81       	ld	r22, Z
    7226:	01 c0       	rjmp	.+2      	; 0x722a <hal_spiWriteBlock+0xe4>

         switch( pt_spiChanHndl->t_id)
    7228:	6a e4       	ldi	r22, 0x4A	; 74
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    722a:	d4 01       	movw	r26, r8
    722c:	16 96       	adiw	r26, 0x06	; 6
    722e:	2c 91       	ld	r18, X
    7230:	16 97       	sbiw	r26, 0x06	; 6
    7232:	22 23       	and	r18, r18
    7234:	31 f4       	brne	.+12     	; 0x7242 <hal_spiWriteBlock+0xfc>
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
    7236:	8a 89       	ldd	r24, Y+18	; 0x12
    7238:	9b 89       	ldd	r25, Y+19	; 0x13
    723a:	01 96       	adiw	r24, 0x01	; 1
    723c:	8a 83       	std	Y+2, r24	; 0x02
    723e:	9b 83       	std	Y+3, r25	; 0x03
    7240:	04 c0       	rjmp	.+8      	; 0x724a <hal_spiWriteBlock+0x104>
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
    7242:	ea 89       	ldd	r30, Y+18	; 0x12
    7244:	fb 89       	ldd	r31, Y+19	; 0x13
    7246:	ea 83       	std	Y+2, r30	; 0x02
    7248:	fb 83       	std	Y+3, r31	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    724a:	d4 01       	movw	r26, r8
    724c:	17 96       	adiw	r26, 0x07	; 7
    724e:	8d 91       	ld	r24, X+
    7250:	9c 91       	ld	r25, X
    7252:	18 97       	sbiw	r26, 0x08	; 8
    7254:	03 96       	adiw	r24, 0x03	; 3
    7256:	8c 83       	std	Y+4, r24	; 0x04
    7258:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    725a:	81 e0       	ldi	r24, 0x01	; 1
    725c:	8e 83       	std	Y+6, r24	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    725e:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    7260:	88 87       	std	Y+8, r24	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    7262:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7264:	22 23       	and	r18, r18
    7266:	29 f4       	brne	.+10     	; 0x7272 <hal_spiWriteBlock+0x12c>
            t_chanConf.s_blockSize     = s_numBytes - 1;
    7268:	c1 01       	movw	r24, r2
    726a:	01 97       	sbiw	r24, 0x01	; 1
    726c:	8a 87       	std	Y+10, r24	; 0x0a
    726e:	9b 87       	std	Y+11, r25	; 0x0b
    7270:	02 c0       	rjmp	.+4      	; 0x7276 <hal_spiWriteBlock+0x130>
         else
            t_chanConf.s_blockSize     = s_numBytes;
    7272:	2a 86       	std	Y+10, r2	; 0x0a
    7274:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
    7276:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7278:	55 24       	eor	r5, r5
    727a:	53 94       	inc	r5
    727c:	5d 86       	std	Y+13, r5	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    727e:	6e 87       	std	Y+14, r22	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7280:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    7282:	f4 01       	movw	r30, r8
    7284:	86 85       	ldd	r24, Z+14	; 0x0e
    7286:	97 85       	ldd	r25, Z+15	; 0x0f
    7288:	aa 80       	ldd	r10, Y+2	; 0x02
    728a:	bb 80       	ldd	r11, Y+3	; 0x03
    728c:	cc 80       	ldd	r12, Y+4	; 0x04
    728e:	dd 80       	ldd	r13, Y+5	; 0x05
    7290:	ee 80       	ldd	r14, Y+6	; 0x06
    7292:	ff 80       	ldd	r15, Y+7	; 0x07
    7294:	08 85       	ldd	r16, Y+8	; 0x08
    7296:	19 85       	ldd	r17, Y+9	; 0x09
    7298:	2a 85       	ldd	r18, Y+10	; 0x0a
    729a:	3b 85       	ldd	r19, Y+11	; 0x0b
    729c:	40 e0       	ldi	r20, 0x00	; 0
    729e:	51 e0       	ldi	r21, 0x01	; 1
    72a0:	70 e0       	ldi	r23, 0x00	; 0
    72a2:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    72a6:	d4 01       	movw	r26, r8
    72a8:	1e 96       	adiw	r26, 0x0e	; 14
    72aa:	8d 91       	ld	r24, X+
    72ac:	9c 91       	ld	r25, X
    72ae:	1f 97       	sbiw	r26, 0x0f	; 15
    72b0:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    72b4:	f4 01       	movw	r30, r8
    72b6:	87 81       	ldd	r24, Z+7	; 0x07
    72b8:	90 85       	ldd	r25, Z+8	; 0x08
    72ba:	03 96       	adiw	r24, 0x03	; 3
    72bc:	8a 83       	std	Y+2, r24	; 0x02
    72be:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)pt_spiUserHndl->pc_rxData;
    72c0:	d3 01       	movw	r26, r6
    72c2:	14 96       	adiw	r26, 0x04	; 4
    72c4:	8d 91       	ld	r24, X+
    72c6:	9c 91       	ld	r25, X
    72c8:	15 97       	sbiw	r26, 0x05	; 5
    72ca:	8c 83       	std	Y+4, r24	; 0x04
    72cc:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    72ce:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    72d0:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    72d2:	59 86       	std	Y+9, r5	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
    72d4:	2a 86       	std	Y+10, r2	; 0x0a
    72d6:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
         t_chanConf.t_transferType  = SINGLE_SHOT;
         t_chanConf.t_triggerSrc    = t_trigger;
         t_chanConf.c_repeatCount   = 0;

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    72d8:	80 89       	ldd	r24, Z+16	; 0x10
    72da:	91 89       	ldd	r25, Z+17	; 0x11
    72dc:	aa 80       	ldd	r10, Y+2	; 0x02
    72de:	bb 80       	ldd	r11, Y+3	; 0x03
    72e0:	cc 80       	ldd	r12, Y+4	; 0x04
    72e2:	dd 80       	ldd	r13, Y+5	; 0x05
    72e4:	ee 24       	eor	r14, r14
    72e6:	ff 80       	ldd	r15, Y+7	; 0x07
    72e8:	00 e0       	ldi	r16, 0x00	; 0
    72ea:	11 e0       	ldi	r17, 0x01	; 1
    72ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    72ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    72f0:	4c 85       	ldd	r20, Y+12	; 0x0c
    72f2:	5d 85       	ldd	r21, Y+13	; 0x0d
    72f4:	6e 85       	ldd	r22, Y+14	; 0x0e
    72f6:	7f 85       	ldd	r23, Y+15	; 0x0f
    72f8:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    72fc:	f4 01       	movw	r30, r8
    72fe:	80 89       	ldd	r24, Z+16	; 0x10
    7300:	91 89       	ldd	r25, Z+17	; 0x11
    7302:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>
    7306:	02 c0       	rjmp	.+4      	; 0x730c <hal_spiWriteBlock+0x1c6>

      }/*End if( pt_spiChanHndl->t_txDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    7308:	83 e0       	ldi	r24, 0x03	; 3
    730a:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    730c:	d4 01       	movw	r26, r8
    730e:	16 96       	adiw	r26, 0x06	; 6
    7310:	8c 91       	ld	r24, X
    7312:	16 97       	sbiw	r26, 0x06	; 6
    7314:	88 23       	and	r24, r24
    7316:	09 f0       	breq	.+2      	; 0x731a <hal_spiWriteBlock+0x1d4>
    7318:	8c c0       	rjmp	.+280    	; 0x7432 <hal_spiWriteBlock+0x2ec>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    731a:	f3 01       	movw	r30, r6
    731c:	10 86       	std	Z+8, r1	; 0x08
    731e:	11 86       	std	Z+9, r1	; 0x09
         pt_spiUserHndl->b_enCs = b_enCs;
    7320:	40 8a       	std	Z+16, r4	; 0x10

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    7322:	44 20       	and	r4, r4
    7324:	09 f4       	brne	.+2      	; 0x7328 <hal_spiWriteBlock+0x1e2>
    7326:	79 c0       	rjmp	.+242    	; 0x741a <hal_spiWriteBlock+0x2d4>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    7328:	83 85       	ldd	r24, Z+11	; 0x0b
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    732a:	92 85       	ldd	r25, Z+10	; 0x0a
    732c:	95 30       	cpi	r25, 0x05	; 5
    732e:	09 f4       	brne	.+2      	; 0x7332 <hal_spiWriteBlock+0x1ec>
    7330:	4a c0       	rjmp	.+148    	; 0x73c6 <hal_spiWriteBlock+0x280>
    7332:	96 30       	cpi	r25, 0x06	; 6
    7334:	80 f4       	brcc	.+32     	; 0x7356 <hal_spiWriteBlock+0x210>
    7336:	92 30       	cpi	r25, 0x02	; 2
    7338:	81 f1       	breq	.+96     	; 0x739a <hal_spiWriteBlock+0x254>
    733a:	93 30       	cpi	r25, 0x03	; 3
    733c:	30 f4       	brcc	.+12     	; 0x734a <hal_spiWriteBlock+0x204>
    733e:	99 23       	and	r25, r25
    7340:	e1 f0       	breq	.+56     	; 0x737a <hal_spiWriteBlock+0x234>
    7342:	91 30       	cpi	r25, 0x01	; 1
    7344:	09 f0       	breq	.+2      	; 0x7348 <hal_spiWriteBlock+0x202>
    7346:	69 c0       	rjmp	.+210    	; 0x741a <hal_spiWriteBlock+0x2d4>
    7348:	20 c0       	rjmp	.+64     	; 0x738a <hal_spiWriteBlock+0x244>
    734a:	93 30       	cpi	r25, 0x03	; 3
    734c:	71 f1       	breq	.+92     	; 0x73aa <hal_spiWriteBlock+0x264>
    734e:	94 30       	cpi	r25, 0x04	; 4
    7350:	09 f0       	breq	.+2      	; 0x7354 <hal_spiWriteBlock+0x20e>
    7352:	63 c0       	rjmp	.+198    	; 0x741a <hal_spiWriteBlock+0x2d4>
    7354:	31 c0       	rjmp	.+98     	; 0x73b8 <hal_spiWriteBlock+0x272>
    7356:	98 30       	cpi	r25, 0x08	; 8
    7358:	09 f4       	brne	.+2      	; 0x735c <hal_spiWriteBlock+0x216>
    735a:	4a c0       	rjmp	.+148    	; 0x73f0 <hal_spiWriteBlock+0x2aa>
    735c:	99 30       	cpi	r25, 0x09	; 9
    735e:	30 f4       	brcc	.+12     	; 0x736c <hal_spiWriteBlock+0x226>
    7360:	96 30       	cpi	r25, 0x06	; 6
    7362:	c1 f1       	breq	.+112    	; 0x73d4 <hal_spiWriteBlock+0x28e>
    7364:	97 30       	cpi	r25, 0x07	; 7
    7366:	09 f0       	breq	.+2      	; 0x736a <hal_spiWriteBlock+0x224>
    7368:	58 c0       	rjmp	.+176    	; 0x741a <hal_spiWriteBlock+0x2d4>
    736a:	3b c0       	rjmp	.+118    	; 0x73e2 <hal_spiWriteBlock+0x29c>
    736c:	99 30       	cpi	r25, 0x09	; 9
    736e:	09 f4       	brne	.+2      	; 0x7372 <hal_spiWriteBlock+0x22c>
    7370:	46 c0       	rjmp	.+140    	; 0x73fe <hal_spiWriteBlock+0x2b8>
    7372:	9a 30       	cpi	r25, 0x0A	; 10
    7374:	09 f0       	breq	.+2      	; 0x7378 <hal_spiWriteBlock+0x232>
    7376:	51 c0       	rjmp	.+162    	; 0x741a <hal_spiWriteBlock+0x2d4>
    7378:	49 c0       	rjmp	.+146    	; 0x740c <hal_spiWriteBlock+0x2c6>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    737a:	90 91 00 06 	lds	r25, 0x0600
    737e:	98 23       	and	r25, r24
    7380:	09 f4       	brne	.+2      	; 0x7384 <hal_spiWriteBlock+0x23e>
    7382:	4b c0       	rjmp	.+150    	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    7384:	e0 e0       	ldi	r30, 0x00	; 0
    7386:	f6 e0       	ldi	r31, 0x06	; 6
    7388:	47 c0       	rjmp	.+142    	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    738a:	90 91 20 06 	lds	r25, 0x0620
    738e:	98 23       	and	r25, r24
    7390:	09 f4       	brne	.+2      	; 0x7394 <hal_spiWriteBlock+0x24e>
    7392:	43 c0       	rjmp	.+134    	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    7394:	e0 e2       	ldi	r30, 0x20	; 32
    7396:	f6 e0       	ldi	r31, 0x06	; 6
    7398:	3f c0       	rjmp	.+126    	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    739a:	90 91 40 06 	lds	r25, 0x0640
    739e:	98 23       	and	r25, r24
    73a0:	09 f4       	brne	.+2      	; 0x73a4 <hal_spiWriteBlock+0x25e>
    73a2:	3b c0       	rjmp	.+118    	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    73a4:	e0 e4       	ldi	r30, 0x40	; 64
    73a6:	f6 e0       	ldi	r31, 0x06	; 6
    73a8:	37 c0       	rjmp	.+110    	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    73aa:	90 91 60 06 	lds	r25, 0x0660
    73ae:	98 23       	and	r25, r24
    73b0:	a1 f1       	breq	.+104    	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    73b2:	e0 e6       	ldi	r30, 0x60	; 96
    73b4:	f6 e0       	ldi	r31, 0x06	; 6
    73b6:	30 c0       	rjmp	.+96     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    73b8:	90 91 80 06 	lds	r25, 0x0680
    73bc:	98 23       	and	r25, r24
    73be:	69 f1       	breq	.+90     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    73c0:	e0 e8       	ldi	r30, 0x80	; 128
    73c2:	f6 e0       	ldi	r31, 0x06	; 6
    73c4:	29 c0       	rjmp	.+82     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    73c6:	90 91 a0 06 	lds	r25, 0x06A0
    73ca:	98 23       	and	r25, r24
    73cc:	31 f1       	breq	.+76     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    73ce:	e0 ea       	ldi	r30, 0xA0	; 160
    73d0:	f6 e0       	ldi	r31, 0x06	; 6
    73d2:	22 c0       	rjmp	.+68     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    73d4:	90 91 e0 06 	lds	r25, 0x06E0
    73d8:	98 23       	and	r25, r24
    73da:	f9 f0       	breq	.+62     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    73dc:	e0 ee       	ldi	r30, 0xE0	; 224
    73de:	f6 e0       	ldi	r31, 0x06	; 6
    73e0:	1b c0       	rjmp	.+54     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    73e2:	90 91 00 07 	lds	r25, 0x0700
    73e6:	98 23       	and	r25, r24
    73e8:	c1 f0       	breq	.+48     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    73ea:	e0 e0       	ldi	r30, 0x00	; 0
    73ec:	f7 e0       	ldi	r31, 0x07	; 7
    73ee:	14 c0       	rjmp	.+40     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    73f0:	90 91 20 07 	lds	r25, 0x0720
    73f4:	98 23       	and	r25, r24
    73f6:	89 f0       	breq	.+34     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    73f8:	e0 e2       	ldi	r30, 0x20	; 32
    73fa:	f7 e0       	ldi	r31, 0x07	; 7
    73fc:	0d c0       	rjmp	.+26     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    73fe:	90 91 c0 07 	lds	r25, 0x07C0
    7402:	98 23       	and	r25, r24
    7404:	51 f0       	breq	.+20     	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    7406:	e0 ec       	ldi	r30, 0xC0	; 192
    7408:	f7 e0       	ldi	r31, 0x07	; 7
    740a:	06 c0       	rjmp	.+12     	; 0x7418 <hal_spiWriteBlock+0x2d2>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    740c:	90 91 e0 07 	lds	r25, 0x07E0
    7410:	98 23       	and	r25, r24
    7412:	19 f0       	breq	.+6      	; 0x741a <hal_spiWriteBlock+0x2d4>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    7414:	e0 ee       	ldi	r30, 0xE0	; 224
    7416:	f7 e0       	ldi	r31, 0x07	; 7
    7418:	86 83       	std	Z+6, r24	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pc_txBuffer[0];
    741a:	d4 01       	movw	r26, r8
    741c:	17 96       	adiw	r26, 0x07	; 7
    741e:	ed 91       	ld	r30, X+
    7420:	fc 91       	ld	r31, X
    7422:	18 97       	sbiw	r26, 0x08	; 8
    7424:	aa 89       	ldd	r26, Y+18	; 0x12
    7426:	bb 89       	ldd	r27, Y+19	; 0x13
    7428:	8c 91       	ld	r24, X
    742a:	83 83       	std	Z+3, r24	; 0x03
    742c:	02 c0       	rjmp	.+4      	; 0x7432 <hal_spiWriteBlock+0x2ec>
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
   false)
   {
      return SPI_INVALID_HANDLE;
    742e:	8e ef       	ldi	r24, 0xFE	; 254
    7430:	01 c0       	rjmp	.+2      	; 0x7434 <hal_spiWriteBlock+0x2ee>

       }/*End if( pt_spiChanHndl->t_spiOp == SPI_MASTER)*/

   }

   return SPI_PASSED;
    7432:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiWriteBlock*/
    7434:	63 96       	adiw	r28, 0x13	; 19
    7436:	cd bf       	out	0x3d, r28	; 61
    7438:	de bf       	out	0x3e, r29	; 62
    743a:	df 91       	pop	r29
    743c:	cf 91       	pop	r28
    743e:	1f 91       	pop	r17
    7440:	0f 91       	pop	r16
    7442:	ff 90       	pop	r15
    7444:	ef 90       	pop	r14
    7446:	df 90       	pop	r13
    7448:	cf 90       	pop	r12
    744a:	bf 90       	pop	r11
    744c:	af 90       	pop	r10
    744e:	9f 90       	pop	r9
    7450:	8f 90       	pop	r8
    7452:	7f 90       	pop	r7
    7454:	6f 90       	pop	r6
    7456:	5f 90       	pop	r5
    7458:	4f 90       	pop	r4
    745a:	3f 90       	pop	r3
    745c:	2f 90       	pop	r2
    745e:	08 95       	ret

00007460 <hal_spiReadWrite>:
t_spiError hal_spiReadWrite( t_SPIHNDL t_handle,
                             bool b_enCs,
                             int8_t *pc_txBuffer,
                             int8_t *pc_rxBuffer,
                             uint16_t s_numBytes)
{
    7460:	2f 92       	push	r2
    7462:	3f 92       	push	r3
    7464:	4f 92       	push	r4
    7466:	5f 92       	push	r5
    7468:	6f 92       	push	r6
    746a:	7f 92       	push	r7
    746c:	8f 92       	push	r8
    746e:	9f 92       	push	r9
    7470:	af 92       	push	r10
    7472:	bf 92       	push	r11
    7474:	cf 92       	push	r12
    7476:	df 92       	push	r13
    7478:	ef 92       	push	r14
    747a:	ff 92       	push	r15
    747c:	0f 93       	push	r16
    747e:	1f 93       	push	r17
    7480:	cf 93       	push	r28
    7482:	df 93       	push	r29
    7484:	cd b7       	in	r28, 0x3d	; 61
    7486:	de b7       	in	r29, 0x3e	; 62
    7488:	65 97       	sbiw	r28, 0x15	; 21
    748a:	cd bf       	out	0x3d, r28	; 61
    748c:	de bf       	out	0x3e, r29	; 62
    748e:	88 8b       	std	Y+16, r24	; 0x10
    7490:	99 8b       	std	Y+17, r25	; 0x11
    7492:	46 2e       	mov	r4, r22
    7494:	4a 8b       	std	Y+18, r20	; 0x12
    7496:	5b 8b       	std	Y+19, r21	; 0x13
    7498:	2c 8b       	std	Y+20, r18	; 0x14
    749a:	3d 8b       	std	Y+21, r19	; 0x15
    749c:	18 01       	movw	r2, r16
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    749e:	e8 89       	ldd	r30, Y+16	; 0x10
    74a0:	f9 89       	ldd	r31, Y+17	; 0x11
    74a2:	20 91 b2 20 	lds	r18, 0x20B2
    74a6:	30 91 b3 20 	lds	r19, 0x20B3
    74aa:	84 81       	ldd	r24, Z+4	; 0x04
    74ac:	95 81       	ldd	r25, Z+5	; 0x05
    74ae:	82 17       	cp	r24, r18
    74b0:	93 07       	cpc	r25, r19
    74b2:	09 f0       	breq	.+2      	; 0x74b6 <hal_spiReadWrite+0x56>
    74b4:	47 c1       	rjmp	.+654    	; 0x7744 <hal_spiReadWrite+0x2e4>
   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    74b6:	e8 89       	ldd	r30, Y+16	; 0x10
    74b8:	f9 89       	ldd	r31, Y+17	; 0x11

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    74ba:	60 80       	ld	r6, Z
    74bc:	71 80       	ldd	r7, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    74be:	d3 01       	movw	r26, r6
    74c0:	1c 96       	adiw	r26, 0x0c	; 12
    74c2:	8d 90       	ld	r8, X+
    74c4:	9c 90       	ld	r9, X
    74c6:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    74c8:	8f b7       	in	r24, 0x3f	; 63
    74ca:	89 83       	std	Y+1, r24	; 0x01
    74cc:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    74ce:	f4 01       	movw	r30, r8
    74d0:	81 85       	ldd	r24, Z+9	; 0x09
    74d2:	88 23       	and	r24, r24
    74d4:	49 f0       	breq	.+18     	; 0x74e8 <hal_spiReadWrite+0x88>
    74d6:	82 85       	ldd	r24, Z+10	; 0x0a
    74d8:	93 85       	ldd	r25, Z+11	; 0x0b
    74da:	86 15       	cp	r24, r6
    74dc:	97 05       	cpc	r25, r7
    74de:	21 f0       	breq	.+8      	; 0x74e8 <hal_spiReadWrite+0x88>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    74e0:	89 81       	ldd	r24, Y+1	; 0x01
    74e2:	8f bf       	out	0x3f, r24	; 63
      return SPI_BUSY; /*Yes*/
    74e4:	84 ef       	ldi	r24, 0xF4	; 244
    74e6:	31 c1       	rjmp	.+610    	; 0x774a <hal_spiReadWrite+0x2ea>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    74e8:	81 e0       	ldi	r24, 0x01	; 1
    74ea:	d4 01       	movw	r26, r8
    74ec:	19 96       	adiw	r26, 0x09	; 9
    74ee:	8c 93       	st	X, r24
    74f0:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    74f2:	1a 96       	adiw	r26, 0x0a	; 10
    74f4:	6d 92       	st	X+, r6
    74f6:	7c 92       	st	X, r7
    74f8:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    74fa:	89 81       	ldd	r24, Y+1	; 0x01
    74fc:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->pc_txData   = pc_txBuffer;
    74fe:	8a 89       	ldd	r24, Y+18	; 0x12
    7500:	9b 89       	ldd	r25, Y+19	; 0x13
    7502:	f3 01       	movw	r30, r6
    7504:	82 83       	std	Z+2, r24	; 0x02
    7506:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = pc_rxBuffer;
    7508:	ac 89       	ldd	r26, Y+20	; 0x14
    750a:	bd 89       	ldd	r27, Y+21	; 0x15
    750c:	a4 83       	std	Z+4, r26	; 0x04
    750e:	b5 83       	std	Z+5, r27	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    7510:	26 82       	std	Z+6, r2	; 0x06
    7512:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_txDmaHndl > 0)
    7514:	f4 01       	movw	r30, r8
    7516:	86 85       	ldd	r24, Z+14	; 0x0e
    7518:	97 85       	ldd	r25, Z+15	; 0x0f
    751a:	07 80       	ldd	r0, Z+7	; 0x07
    751c:	f0 85       	ldd	r31, Z+8	; 0x08
    751e:	e0 2d       	mov	r30, r0
    7520:	18 16       	cp	r1, r24
    7522:	19 06       	cpc	r1, r25
    7524:	0c f0       	brlt	.+2      	; 0x7528 <hal_spiReadWrite+0xc8>
    7526:	75 c0       	rjmp	.+234    	; 0x7612 <hal_spiReadWrite+0x1b2>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    7528:	11 82       	std	Z+1, r1	; 0x01
    752a:	d4 01       	movw	r26, r8
    752c:	ec 91       	ld	r30, X
    752e:	e1 50       	subi	r30, 0x01	; 1
    7530:	e3 30       	cpi	r30, 0x03	; 3
    7532:	28 f4       	brcc	.+10     	; 0x753e <hal_spiReadWrite+0xde>
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	eb 52       	subi	r30, 0x2B	; 43
    7538:	ff 4d       	sbci	r31, 0xDF	; 223
    753a:	60 81       	ld	r22, Z
    753c:	01 c0       	rjmp	.+2      	; 0x7540 <hal_spiReadWrite+0xe0>

         switch( pt_spiChanHndl->t_id)
    753e:	6a e4       	ldi	r22, 0x4A	; 74
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7540:	f4 01       	movw	r30, r8
    7542:	26 81       	ldd	r18, Z+6	; 0x06
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
    7544:	8a 89       	ldd	r24, Y+18	; 0x12
    7546:	9b 89       	ldd	r25, Y+19	; 0x13
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7548:	22 23       	and	r18, r18
    754a:	09 f4       	brne	.+2      	; 0x754e <hal_spiReadWrite+0xee>
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
    754c:	01 96       	adiw	r24, 0x01	; 1
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
    754e:	8a 83       	std	Y+2, r24	; 0x02
    7550:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    7552:	d4 01       	movw	r26, r8
    7554:	17 96       	adiw	r26, 0x07	; 7
    7556:	8d 91       	ld	r24, X+
    7558:	9c 91       	ld	r25, X
    755a:	18 97       	sbiw	r26, 0x08	; 8
    755c:	03 96       	adiw	r24, 0x03	; 3
    755e:	8c 83       	std	Y+4, r24	; 0x04
    7560:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    7562:	81 e0       	ldi	r24, 0x01	; 1
    7564:	8e 83       	std	Y+6, r24	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    7566:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    7568:	88 87       	std	Y+8, r24	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    756a:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    756c:	22 23       	and	r18, r18
    756e:	29 f4       	brne	.+10     	; 0x757a <hal_spiReadWrite+0x11a>
            t_chanConf.s_blockSize     = s_numBytes - 1;
    7570:	c1 01       	movw	r24, r2
    7572:	01 97       	sbiw	r24, 0x01	; 1
    7574:	8a 87       	std	Y+10, r24	; 0x0a
    7576:	9b 87       	std	Y+11, r25	; 0x0b
    7578:	02 c0       	rjmp	.+4      	; 0x757e <hal_spiReadWrite+0x11e>
         else
            t_chanConf.s_blockSize     = s_numBytes;
    757a:	2a 86       	std	Y+10, r2	; 0x0a
    757c:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
    757e:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7580:	55 24       	eor	r5, r5
    7582:	53 94       	inc	r5
    7584:	5d 86       	std	Y+13, r5	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7586:	6e 87       	std	Y+14, r22	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7588:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    758a:	f4 01       	movw	r30, r8
    758c:	86 85       	ldd	r24, Z+14	; 0x0e
    758e:	97 85       	ldd	r25, Z+15	; 0x0f
    7590:	aa 80       	ldd	r10, Y+2	; 0x02
    7592:	bb 80       	ldd	r11, Y+3	; 0x03
    7594:	cc 80       	ldd	r12, Y+4	; 0x04
    7596:	dd 80       	ldd	r13, Y+5	; 0x05
    7598:	ee 80       	ldd	r14, Y+6	; 0x06
    759a:	ff 80       	ldd	r15, Y+7	; 0x07
    759c:	08 85       	ldd	r16, Y+8	; 0x08
    759e:	19 85       	ldd	r17, Y+9	; 0x09
    75a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    75a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    75a4:	40 e0       	ldi	r20, 0x00	; 0
    75a6:	51 e0       	ldi	r21, 0x01	; 1
    75a8:	70 e0       	ldi	r23, 0x00	; 0
    75aa:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    75ae:	d4 01       	movw	r26, r8
    75b0:	1e 96       	adiw	r26, 0x0e	; 14
    75b2:	8d 91       	ld	r24, X+
    75b4:	9c 91       	ld	r25, X
    75b6:	1f 97       	sbiw	r26, 0x0f	; 15
    75b8:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    75bc:	f4 01       	movw	r30, r8
    75be:	87 81       	ldd	r24, Z+7	; 0x07
    75c0:	90 85       	ldd	r25, Z+8	; 0x08
    75c2:	03 96       	adiw	r24, 0x03	; 3
    75c4:	8a 83       	std	Y+2, r24	; 0x02
    75c6:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    75c8:	8c 89       	ldd	r24, Y+20	; 0x14
    75ca:	9d 89       	ldd	r25, Y+21	; 0x15
    75cc:	8c 83       	std	Y+4, r24	; 0x04
    75ce:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    75d0:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = INCREMENT;
    75d2:	5f 82       	std	Y+7, r5	; 0x07
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    75d4:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    75d6:	59 86       	std	Y+9, r5	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
    75d8:	2a 86       	std	Y+10, r2	; 0x0a
    75da:	3b 86       	std	Y+11, r3	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
         t_chanConf.t_transferType  = SINGLE_SHOT;
         t_chanConf.t_triggerSrc    = t_trigger;
         t_chanConf.c_repeatCount   = 0;

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    75dc:	80 89       	ldd	r24, Z+16	; 0x10
    75de:	91 89       	ldd	r25, Z+17	; 0x11
    75e0:	aa 80       	ldd	r10, Y+2	; 0x02
    75e2:	bb 80       	ldd	r11, Y+3	; 0x03
    75e4:	cc 80       	ldd	r12, Y+4	; 0x04
    75e6:	dd 80       	ldd	r13, Y+5	; 0x05
    75e8:	ee 24       	eor	r14, r14
    75ea:	ff 24       	eor	r15, r15
    75ec:	f3 94       	inc	r15
    75ee:	00 e0       	ldi	r16, 0x00	; 0
    75f0:	11 e0       	ldi	r17, 0x01	; 1
    75f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    75f4:	3b 85       	ldd	r19, Y+11	; 0x0b
    75f6:	4c 85       	ldd	r20, Y+12	; 0x0c
    75f8:	5d 85       	ldd	r21, Y+13	; 0x0d
    75fa:	6e 85       	ldd	r22, Y+14	; 0x0e
    75fc:	7f 85       	ldd	r23, Y+15	; 0x0f
    75fe:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    7602:	d4 01       	movw	r26, r8
    7604:	50 96       	adiw	r26, 0x10	; 16
    7606:	8d 91       	ld	r24, X+
    7608:	9c 91       	ld	r25, X
    760a:	51 97       	sbiw	r26, 0x11	; 17
    760c:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>
    7610:	02 c0       	rjmp	.+4      	; 0x7616 <hal_spiReadWrite+0x1b6>

      }/*End if( pt_spiChanHndl->t_txDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    7612:	83 e0       	ldi	r24, 0x03	; 3
    7614:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7616:	f4 01       	movw	r30, r8
    7618:	86 81       	ldd	r24, Z+6	; 0x06
    761a:	88 23       	and	r24, r24
    761c:	09 f0       	breq	.+2      	; 0x7620 <hal_spiReadWrite+0x1c0>
    761e:	94 c0       	rjmp	.+296    	; 0x7748 <hal_spiReadWrite+0x2e8>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    7620:	d3 01       	movw	r26, r6
    7622:	18 96       	adiw	r26, 0x08	; 8
    7624:	1d 92       	st	X+, r1
    7626:	1c 92       	st	X, r1
    7628:	19 97       	sbiw	r26, 0x09	; 9
         pt_spiUserHndl->b_enCs = b_enCs;
    762a:	50 96       	adiw	r26, 0x10	; 16
    762c:	4c 92       	st	X, r4
    762e:	50 97       	sbiw	r26, 0x10	; 16

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    7630:	44 20       	and	r4, r4
    7632:	09 f4       	brne	.+2      	; 0x7636 <hal_spiReadWrite+0x1d6>
    7634:	7d c0       	rjmp	.+250    	; 0x7730 <hal_spiReadWrite+0x2d0>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    7636:	1b 96       	adiw	r26, 0x0b	; 11
    7638:	8c 91       	ld	r24, X
    763a:	1b 97       	sbiw	r26, 0x0b	; 11
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    763c:	1a 96       	adiw	r26, 0x0a	; 10
    763e:	9c 91       	ld	r25, X
    7640:	1a 97       	sbiw	r26, 0x0a	; 10
    7642:	95 30       	cpi	r25, 0x05	; 5
    7644:	09 f4       	brne	.+2      	; 0x7648 <hal_spiReadWrite+0x1e8>
    7646:	4a c0       	rjmp	.+148    	; 0x76dc <hal_spiReadWrite+0x27c>
    7648:	96 30       	cpi	r25, 0x06	; 6
    764a:	80 f4       	brcc	.+32     	; 0x766c <hal_spiReadWrite+0x20c>
    764c:	92 30       	cpi	r25, 0x02	; 2
    764e:	81 f1       	breq	.+96     	; 0x76b0 <hal_spiReadWrite+0x250>
    7650:	93 30       	cpi	r25, 0x03	; 3
    7652:	30 f4       	brcc	.+12     	; 0x7660 <hal_spiReadWrite+0x200>
    7654:	99 23       	and	r25, r25
    7656:	e1 f0       	breq	.+56     	; 0x7690 <hal_spiReadWrite+0x230>
    7658:	91 30       	cpi	r25, 0x01	; 1
    765a:	09 f0       	breq	.+2      	; 0x765e <hal_spiReadWrite+0x1fe>
    765c:	69 c0       	rjmp	.+210    	; 0x7730 <hal_spiReadWrite+0x2d0>
    765e:	20 c0       	rjmp	.+64     	; 0x76a0 <hal_spiReadWrite+0x240>
    7660:	93 30       	cpi	r25, 0x03	; 3
    7662:	71 f1       	breq	.+92     	; 0x76c0 <hal_spiReadWrite+0x260>
    7664:	94 30       	cpi	r25, 0x04	; 4
    7666:	09 f0       	breq	.+2      	; 0x766a <hal_spiReadWrite+0x20a>
    7668:	63 c0       	rjmp	.+198    	; 0x7730 <hal_spiReadWrite+0x2d0>
    766a:	31 c0       	rjmp	.+98     	; 0x76ce <hal_spiReadWrite+0x26e>
    766c:	98 30       	cpi	r25, 0x08	; 8
    766e:	09 f4       	brne	.+2      	; 0x7672 <hal_spiReadWrite+0x212>
    7670:	4a c0       	rjmp	.+148    	; 0x7706 <hal_spiReadWrite+0x2a6>
    7672:	99 30       	cpi	r25, 0x09	; 9
    7674:	30 f4       	brcc	.+12     	; 0x7682 <hal_spiReadWrite+0x222>
    7676:	96 30       	cpi	r25, 0x06	; 6
    7678:	c1 f1       	breq	.+112    	; 0x76ea <hal_spiReadWrite+0x28a>
    767a:	97 30       	cpi	r25, 0x07	; 7
    767c:	09 f0       	breq	.+2      	; 0x7680 <hal_spiReadWrite+0x220>
    767e:	58 c0       	rjmp	.+176    	; 0x7730 <hal_spiReadWrite+0x2d0>
    7680:	3b c0       	rjmp	.+118    	; 0x76f8 <hal_spiReadWrite+0x298>
    7682:	99 30       	cpi	r25, 0x09	; 9
    7684:	09 f4       	brne	.+2      	; 0x7688 <hal_spiReadWrite+0x228>
    7686:	46 c0       	rjmp	.+140    	; 0x7714 <hal_spiReadWrite+0x2b4>
    7688:	9a 30       	cpi	r25, 0x0A	; 10
    768a:	09 f0       	breq	.+2      	; 0x768e <hal_spiReadWrite+0x22e>
    768c:	51 c0       	rjmp	.+162    	; 0x7730 <hal_spiReadWrite+0x2d0>
    768e:	49 c0       	rjmp	.+146    	; 0x7722 <hal_spiReadWrite+0x2c2>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    7690:	90 91 00 06 	lds	r25, 0x0600
    7694:	98 23       	and	r25, r24
    7696:	09 f4       	brne	.+2      	; 0x769a <hal_spiReadWrite+0x23a>
    7698:	4b c0       	rjmp	.+150    	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    769a:	e0 e0       	ldi	r30, 0x00	; 0
    769c:	f6 e0       	ldi	r31, 0x06	; 6
    769e:	47 c0       	rjmp	.+142    	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    76a0:	90 91 20 06 	lds	r25, 0x0620
    76a4:	98 23       	and	r25, r24
    76a6:	09 f4       	brne	.+2      	; 0x76aa <hal_spiReadWrite+0x24a>
    76a8:	43 c0       	rjmp	.+134    	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    76aa:	e0 e2       	ldi	r30, 0x20	; 32
    76ac:	f6 e0       	ldi	r31, 0x06	; 6
    76ae:	3f c0       	rjmp	.+126    	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    76b0:	90 91 40 06 	lds	r25, 0x0640
    76b4:	98 23       	and	r25, r24
    76b6:	09 f4       	brne	.+2      	; 0x76ba <hal_spiReadWrite+0x25a>
    76b8:	3b c0       	rjmp	.+118    	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    76ba:	e0 e4       	ldi	r30, 0x40	; 64
    76bc:	f6 e0       	ldi	r31, 0x06	; 6
    76be:	37 c0       	rjmp	.+110    	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    76c0:	90 91 60 06 	lds	r25, 0x0660
    76c4:	98 23       	and	r25, r24
    76c6:	a1 f1       	breq	.+104    	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    76c8:	e0 e6       	ldi	r30, 0x60	; 96
    76ca:	f6 e0       	ldi	r31, 0x06	; 6
    76cc:	30 c0       	rjmp	.+96     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    76ce:	90 91 80 06 	lds	r25, 0x0680
    76d2:	98 23       	and	r25, r24
    76d4:	69 f1       	breq	.+90     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    76d6:	e0 e8       	ldi	r30, 0x80	; 128
    76d8:	f6 e0       	ldi	r31, 0x06	; 6
    76da:	29 c0       	rjmp	.+82     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    76dc:	90 91 a0 06 	lds	r25, 0x06A0
    76e0:	98 23       	and	r25, r24
    76e2:	31 f1       	breq	.+76     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    76e4:	e0 ea       	ldi	r30, 0xA0	; 160
    76e6:	f6 e0       	ldi	r31, 0x06	; 6
    76e8:	22 c0       	rjmp	.+68     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    76ea:	90 91 e0 06 	lds	r25, 0x06E0
    76ee:	98 23       	and	r25, r24
    76f0:	f9 f0       	breq	.+62     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    76f2:	e0 ee       	ldi	r30, 0xE0	; 224
    76f4:	f6 e0       	ldi	r31, 0x06	; 6
    76f6:	1b c0       	rjmp	.+54     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    76f8:	90 91 00 07 	lds	r25, 0x0700
    76fc:	98 23       	and	r25, r24
    76fe:	c1 f0       	breq	.+48     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    7700:	e0 e0       	ldi	r30, 0x00	; 0
    7702:	f7 e0       	ldi	r31, 0x07	; 7
    7704:	14 c0       	rjmp	.+40     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    7706:	90 91 20 07 	lds	r25, 0x0720
    770a:	98 23       	and	r25, r24
    770c:	89 f0       	breq	.+34     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    770e:	e0 e2       	ldi	r30, 0x20	; 32
    7710:	f7 e0       	ldi	r31, 0x07	; 7
    7712:	0d c0       	rjmp	.+26     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    7714:	90 91 c0 07 	lds	r25, 0x07C0
    7718:	98 23       	and	r25, r24
    771a:	51 f0       	breq	.+20     	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    771c:	e0 ec       	ldi	r30, 0xC0	; 192
    771e:	f7 e0       	ldi	r31, 0x07	; 7
    7720:	06 c0       	rjmp	.+12     	; 0x772e <hal_spiReadWrite+0x2ce>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    7722:	90 91 e0 07 	lds	r25, 0x07E0
    7726:	98 23       	and	r25, r24
    7728:	19 f0       	breq	.+6      	; 0x7730 <hal_spiReadWrite+0x2d0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    772a:	e0 ee       	ldi	r30, 0xE0	; 224
    772c:	f7 e0       	ldi	r31, 0x07	; 7
    772e:	86 83       	std	Z+6, r24	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pc_txBuffer[0];
    7730:	d4 01       	movw	r26, r8
    7732:	17 96       	adiw	r26, 0x07	; 7
    7734:	ed 91       	ld	r30, X+
    7736:	fc 91       	ld	r31, X
    7738:	18 97       	sbiw	r26, 0x08	; 8
    773a:	aa 89       	ldd	r26, Y+18	; 0x12
    773c:	bb 89       	ldd	r27, Y+19	; 0x13
    773e:	8c 91       	ld	r24, X
    7740:	83 83       	std	Z+3, r24	; 0x03
    7742:	02 c0       	rjmp	.+4      	; 0x7748 <hal_spiReadWrite+0x2e8>
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
   false)
   {
      return SPI_INVALID_HANDLE;
    7744:	8e ef       	ldi	r24, 0xFE	; 254
    7746:	01 c0       	rjmp	.+2      	; 0x774a <hal_spiReadWrite+0x2ea>

      }/*End if( pt_spiChanHndl->t_spiOp == SPI_MASTER)*/

   }

   return SPI_PASSED;
    7748:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_spiReadWrite*/
    774a:	65 96       	adiw	r28, 0x15	; 21
    774c:	cd bf       	out	0x3d, r28	; 61
    774e:	de bf       	out	0x3e, r29	; 62
    7750:	df 91       	pop	r29
    7752:	cf 91       	pop	r28
    7754:	1f 91       	pop	r17
    7756:	0f 91       	pop	r16
    7758:	ff 90       	pop	r15
    775a:	ef 90       	pop	r14
    775c:	df 90       	pop	r13
    775e:	cf 90       	pop	r12
    7760:	bf 90       	pop	r11
    7762:	af 90       	pop	r10
    7764:	9f 90       	pop	r9
    7766:	8f 90       	pop	r8
    7768:	7f 90       	pop	r7
    776a:	6f 90       	pop	r6
    776c:	5f 90       	pop	r5
    776e:	4f 90       	pop	r4
    7770:	3f 90       	pop	r3
    7772:	2f 90       	pop	r2
    7774:	08 95       	ret

00007776 <hal_requestSpiChannel>:
t_SPIHNDL hal_requestSpiChannel( t_spiChanId t_chanId,
                                 void (*pf_funPtr)( int8_t *pc_data,
                                                    uint16_t s_length),
                                 t_gpioPort t_csPort,
                                 uint8_t c_csPin)
{
    7776:	4f 92       	push	r4
    7778:	5f 92       	push	r5
    777a:	6f 92       	push	r6
    777c:	7f 92       	push	r7
    777e:	8f 92       	push	r8
    7780:	9f 92       	push	r9
    7782:	bf 92       	push	r11
    7784:	cf 92       	push	r12
    7786:	df 92       	push	r13
    7788:	ef 92       	push	r14
    778a:	ff 92       	push	r15
    778c:	0f 93       	push	r16
    778e:	1f 93       	push	r17
    7790:	cf 93       	push	r28
    7792:	df 93       	push	r29
    7794:	cd b7       	in	r28, 0x3d	; 61
    7796:	de b7       	in	r29, 0x3e	; 62
    7798:	28 97       	sbiw	r28, 0x08	; 8
    779a:	cd bf       	out	0x3d, r28	; 61
    779c:	de bf       	out	0x3e, r29	; 62
    779e:	b8 2e       	mov	r11, r24
    77a0:	4b 01       	movw	r8, r22
    77a2:	e4 2e       	mov	r14, r20
    77a4:	f2 2e       	mov	r15, r18
   static t_LINKHNDL t_linkHndl;
   t_gpioConf t_conf;
   t_gpioError t_gErr;
   t_intConf t_csIntConf;

   t_csIntConf.pf_funPtr = NULL;
    77a6:	44 24       	eor	r4, r4
    77a8:	55 24       	eor	r5, r5
    77aa:	32 01       	movw	r6, r4

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    77ac:	8f b7       	in	r24, 0x3f	; 63
    77ae:	89 83       	std	Y+1, r24	; 0x01
    77b0:	f8 94       	cli

   if( (t_chanId < SPI_1) ||
    77b2:	83 e0       	ldi	r24, 0x03	; 3
    77b4:	8b 15       	cp	r24, r11
    77b6:	28 f4       	brcc	.+10     	; 0x77c2 <hal_requestSpiChannel+0x4c>
        (t_chanId > SPI_4))
   {
      HAL_END_CRITICAL();//Enable interrupts
    77b8:	89 81       	ldd	r24, Y+1	; 0x01
    77ba:	8f bf       	out	0x3f, r24	; 63
      return (t_SPIHNDL)SPI_INVALID_MODULE;
    77bc:	8b ef       	ldi	r24, 0xFB	; 251
    77be:	9f ef       	ldi	r25, 0xFF	; 255
    77c0:	3c c1       	rjmp	.+632    	; 0x7a3a <hal_requestSpiChannel+0x2c4>
   }

   if( (c_csPin < PIN_0) ||
    77c2:	82 2f       	mov	r24, r18
    77c4:	81 50       	subi	r24, 0x01	; 1
    77c6:	87 ff       	sbrs	r24, 7
    77c8:	05 c0       	rjmp	.+10     	; 0x77d4 <hal_requestSpiChannel+0x5e>
       (c_csPin > PIN_7))
   {
      HAL_END_CRITICAL();//Enable interrupts
    77ca:	89 81       	ldd	r24, Y+1	; 0x01
    77cc:	8f bf       	out	0x3f, r24	; 63
      return (t_SPIHNDL)SPI_INVALID_PIN;
    77ce:	87 ef       	ldi	r24, 0xF7	; 247
    77d0:	9f ef       	ldi	r25, 0xFF	; 255
    77d2:	33 c1       	rjmp	.+614    	; 0x7a3a <hal_requestSpiChannel+0x2c4>
   }

   if( (t_csPort < GPIO_PORTA) ||
    77d4:	ea e0       	ldi	r30, 0x0A	; 10
    77d6:	e4 17       	cp	r30, r20
    77d8:	28 f4       	brcc	.+10     	; 0x77e4 <hal_requestSpiChannel+0x6e>
       (t_csPort > GPIO_PORTR))
   {
      HAL_END_CRITICAL();//Enable interrupts
    77da:	89 81       	ldd	r24, Y+1	; 0x01
    77dc:	8f bf       	out	0x3f, r24	; 63
      return (t_SPIHNDL)SPI_INVALID_PORT;
    77de:	86 ef       	ldi	r24, 0xF6	; 246
    77e0:	9f ef       	ldi	r25, 0xFF	; 255
    77e2:	2b c1       	rjmp	.+598    	; 0x7a3a <hal_requestSpiChannel+0x2c4>
   }

   /*------------------------------------------------------------------------*
    * Grab the handle associated with this channel ID.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = findSpiElement( t_chanId);
    77e4:	8b 2d       	mov	r24, r11
    77e6:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>
    77ea:	6c 01       	movw	r12, r24

   /*------------------------------------------------------------------------*
    * Has a spi channel been configured?
    *------------------------------------------------------------------------*/
   if( pt_spiChanHndl != NULL) /*Yes*/
    77ec:	00 97       	sbiw	r24, 0x00	; 0
    77ee:	09 f4       	brne	.+2      	; 0x77f2 <hal_requestSpiChannel+0x7c>
    77f0:	19 c1       	rjmp	.+562    	; 0x7a24 <hal_requestSpiChannel+0x2ae>
   {
      /*---------------------------------------------------------------------*
       * In slave operation there can be only one reader.
       *---------------------------------------------------------------------*/
      if( (pt_spiChanHndl->t_spiOp == SPI_SLAVE) &&
    77f2:	fc 01       	movw	r30, r24
    77f4:	86 81       	ldd	r24, Z+6	; 0x06
    77f6:	81 30       	cpi	r24, 0x01	; 1
    77f8:	41 f4       	brne	.+16     	; 0x780a <hal_requestSpiChannel+0x94>
    77fa:	85 81       	ldd	r24, Z+5	; 0x05
    77fc:	88 23       	and	r24, r24
    77fe:	29 f0       	breq	.+10     	; 0x780a <hal_requestSpiChannel+0x94>
          (pt_spiChanHndl->c_numUsers > 0))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7800:	89 81       	ldd	r24, Y+1	; 0x01
    7802:	8f bf       	out	0x3f, r24	; 63
         return (t_SPIHNDL)SPI_ONLY_ONE_SLAVE;
    7804:	83 ef       	ldi	r24, 0xF3	; 243
    7806:	9f ef       	ldi	r25, 0xFF	; 255
    7808:	18 c1       	rjmp	.+560    	; 0x7a3a <hal_requestSpiChannel+0x2c4>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to the user connected to particular spi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiUserHndl));
    780a:	81 e1       	ldi	r24, 0x11	; 17
    780c:	90 e0       	ldi	r25, 0x00	; 0
    780e:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    7812:	8a 83       	std	Y+2, r24	; 0x02
    7814:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    7816:	8a 81       	ldd	r24, Y+2	; 0x02
    7818:	9b 81       	ldd	r25, Y+3	; 0x03
    781a:	97 fd       	sbrc	r25, 7
    781c:	0c c0       	rjmp	.+24     	; 0x7836 <hal_requestSpiChannel+0xc0>
   }

   /*------------------------------------------------------------------------*
    * Add the spi module link onto the list open spi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_spiUserHndlList,
    781e:	80 91 b2 20 	lds	r24, 0x20B2
    7822:	90 91 b3 20 	lds	r25, 0x20B3
    7826:	6a 81       	ldd	r22, Y+2	; 0x02
    7828:	7b 81       	ldd	r23, Y+3	; 0x03
    782a:	41 e0       	ldi	r20, 0x01	; 1
    782c:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    7830:	8a 81       	ldd	r24, Y+2	; 0x02
    7832:	9b 81       	ldd	r25, Y+3	; 0x03
    7834:	02 c0       	rjmp	.+4      	; 0x783a <hal_requestSpiChannel+0xc4>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiUserHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)SPI_OUT_OF_HEAP;
    7836:	8f ef       	ldi	r24, 0xFF	; 255
    7838:	9f ef       	ldi	r25, 0xFF	; 255

      /*---------------------------------------------------------------------*
       * Allocated memory for the link (and element) that contains information
       * specific to the user connected to particular spi module
       *---------------------------------------------------------------------*/
      t_linkHndl = createSpiUserHandle();
    783a:	80 93 80 24 	sts	0x2480, r24
    783e:	90 93 81 24 	sts	0x2481, r25
      if( t_linkHndl < 0)
    7842:	80 91 80 24 	lds	r24, 0x2480
    7846:	90 91 81 24 	lds	r25, 0x2481
    784a:	97 ff       	sbrs	r25, 7
    784c:	05 c0       	rjmp	.+10     	; 0x7858 <hal_requestSpiChannel+0xe2>
      {
         HAL_END_CRITICAL();//Enable interrupts
    784e:	89 81       	ldd	r24, Y+1	; 0x01
    7850:	8f bf       	out	0x3f, r24	; 63
         return (t_SPIHNDL)SPI_OUT_OF_HEAP;
    7852:	8f ef       	ldi	r24, 0xFF	; 255
    7854:	9f ef       	ldi	r25, 0xFF	; 255
    7856:	f1 c0       	rjmp	.+482    	; 0x7a3a <hal_requestSpiChannel+0x2c4>

      }

      pt_spiUserHndl = (t_spiUserHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);
    7858:	e0 91 80 24 	lds	r30, 0x2480
    785c:	f0 91 81 24 	lds	r31, 0x2481
         HAL_END_CRITICAL();//Enable interrupts
         return (t_SPIHNDL)SPI_OUT_OF_HEAP;

      }

      pt_spiUserHndl = (t_spiUserHndl *)
    7860:	00 81       	ld	r16, Z
    7862:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

      /*---------------------------------------------------------------------*
       * Make sure all the elements of the spi user handle are reset.
       *---------------------------------------------------------------------*/
      memset( (void *)pt_spiUserHndl, 0, sizeof( t_spiUserHndl));
    7864:	81 e1       	ldi	r24, 0x11	; 17
    7866:	f8 01       	movw	r30, r16
    7868:	11 92       	st	Z+, r1
    786a:	8a 95       	dec	r24
    786c:	e9 f7       	brne	.-6      	; 0x7868 <hal_requestSpiChannel+0xf2>

      /*---------------------------------------------------------------------*
       * Keep track of how many users are attached to this spi.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->c_numUsers++;
    786e:	f6 01       	movw	r30, r12
    7870:	85 81       	ldd	r24, Z+5	; 0x05
    7872:	8f 5f       	subi	r24, 0xFF	; 255
    7874:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Keep track of the spi channel associated with this user handle.
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->pt_spiChanHndl = pt_spiChanHndl;
    7876:	f8 01       	movw	r30, r16
    7878:	c4 86       	std	Z+12, r12	; 0x0c
    787a:	d5 86       	std	Z+13, r13	; 0x0d

      /*---------------------------------------------------------------------*
       * Store the chip select location.
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->t_csPort    = t_csPort;
    787c:	e2 86       	std	Z+10, r14	; 0x0a
      pt_spiUserHndl->c_csPin     = c_csPin;
    787e:	f3 86       	std	Z+11, r15	; 0x0b

      pt_spiUserHndl->s_bufIndex  = 0;
    7880:	10 86       	std	Z+8, r1	; 0x08
    7882:	11 86       	std	Z+9, r1	; 0x09
      pt_spiUserHndl->s_bufLength = 0;
    7884:	16 82       	std	Z+6, r1	; 0x06
    7886:	17 82       	std	Z+7, r1	; 0x07
      pt_spiUserHndl->pc_txData   = NULL;
    7888:	12 82       	std	Z+2, r1	; 0x02
    788a:	13 82       	std	Z+3, r1	; 0x03
      pt_spiUserHndl->pc_rxData   = NULL;
    788c:	14 82       	std	Z+4, r1	; 0x04
    788e:	15 82       	std	Z+5, r1	; 0x05

      pt_spiUserHndl->pf_funPtr   = pf_funPtr;
    7890:	80 82       	st	Z, r8
    7892:	91 82       	std	Z+1, r9	; 0x01

      /*---------------------------------------------------------------------*
       * Configure the chip-select pin register.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_SLAVE)
    7894:	f6 01       	movw	r30, r12
    7896:	86 81       	ldd	r24, Z+6	; 0x06
    7898:	81 30       	cpi	r24, 0x01	; 1
    789a:	21 f5       	brne	.+72     	; 0x78e4 <hal_requestSpiChannel+0x16e>
      {

         pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    789c:	02 87       	std	Z+10, r16	; 0x0a
    789e:	13 87       	std	Z+11, r17	; 0x0b
         t_conf.c_inputMask  = c_csPin;
    78a0:	fc 82       	std	Y+4, r15	; 0x04
         t_conf.c_outputMask = 0;
    78a2:	1d 82       	std	Y+5, r1	; 0x05

         /*------------------------------------------------------------------*
          * Configure chip select interrupt - allows the slave to know when
          * it has finished receiving data.
          *------------------------------------------------------------------*/
         t_csIntConf.c_pin = c_csPin;
    78a4:	4f 2c       	mov	r4, r15
         t_csIntConf.t_inSense = GPIO_RISING;
    78a6:	55 24       	eor	r5, r5
    78a8:	53 94       	inc	r5

         switch( t_chanId)
    78aa:	f2 e0       	ldi	r31, 0x02	; 2
    78ac:	bf 16       	cp	r11, r31
    78ae:	81 f0       	breq	.+32     	; 0x78d0 <hal_requestSpiChannel+0x15a>
    78b0:	83 e0       	ldi	r24, 0x03	; 3
    78b2:	b8 16       	cp	r11, r24
    78b4:	91 f0       	breq	.+36     	; 0x78da <hal_requestSpiChannel+0x164>
    78b6:	e1 e0       	ldi	r30, 0x01	; 1
    78b8:	be 16       	cp	r11, r30
    78ba:	29 f0       	breq	.+10     	; 0x78c6 <hal_requestSpiChannel+0x150>
         {
            case SPI_1:
               t_csIntConf.pf_funPtr = &slaveSpiCChipSelectInt;
    78bc:	8e e7       	ldi	r24, 0x7E	; 126
    78be:	68 2e       	mov	r6, r24
    78c0:	82 e3       	ldi	r24, 0x32	; 50
    78c2:	78 2e       	mov	r7, r24
            break;
    78c4:	11 c0       	rjmp	.+34     	; 0x78e8 <hal_requestSpiChannel+0x172>

            case SPI_2:
               t_csIntConf.pf_funPtr = &slaveSpiDChipSelectInt;
    78c6:	b2 e7       	ldi	r27, 0x72	; 114
    78c8:	6b 2e       	mov	r6, r27
    78ca:	b2 e3       	ldi	r27, 0x32	; 50
    78cc:	7b 2e       	mov	r7, r27
            break;
    78ce:	0c c0       	rjmp	.+24     	; 0x78e8 <hal_requestSpiChannel+0x172>

            case SPI_3:
               t_csIntConf.pf_funPtr = &slaveSpiEChipSelectInt;
    78d0:	a6 e6       	ldi	r26, 0x66	; 102
    78d2:	6a 2e       	mov	r6, r26
    78d4:	a2 e3       	ldi	r26, 0x32	; 50
    78d6:	7a 2e       	mov	r7, r26
            break;
    78d8:	07 c0       	rjmp	.+14     	; 0x78e8 <hal_requestSpiChannel+0x172>

            case SPI_4:
               t_csIntConf.pf_funPtr = &slaveSpiFChipSelectInt;
    78da:	fa e5       	ldi	r31, 0x5A	; 90
    78dc:	6f 2e       	mov	r6, r31
    78de:	f2 e3       	ldi	r31, 0x32	; 50
    78e0:	7f 2e       	mov	r7, r31
            break;
    78e2:	02 c0       	rjmp	.+4      	; 0x78e8 <hal_requestSpiChannel+0x172>
         }/*End switch( t_chanId)*/

      }
      else
      {
         t_conf.c_inputMask  = 0;
    78e4:	1c 82       	std	Y+4, r1	; 0x04
         t_conf.c_outputMask = c_csPin;
    78e6:	fd 82       	std	Y+5, r15	; 0x05
      }

      t_conf.t_inConf  = TOTEM;
    78e8:	1f 82       	std	Y+7, r1	; 0x07
      t_conf.t_outConf = TOTEM;
    78ea:	18 86       	std	Y+8, r1	; 0x08
      t_gErr = hal_configureGpioPort( t_csPort, t_conf);
    78ec:	8e 2d       	mov	r24, r14
    78ee:	2c 81       	ldd	r18, Y+4	; 0x04
    78f0:	3d 81       	ldd	r19, Y+5	; 0x05
    78f2:	4e 81       	ldd	r20, Y+6	; 0x06
    78f4:	50 e0       	ldi	r21, 0x00	; 0
    78f6:	60 e0       	ldi	r22, 0x00	; 0
    78f8:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>

      if( pt_spiChanHndl->t_spiOp == SPI_SLAVE)
    78fc:	f6 01       	movw	r30, r12
    78fe:	86 81       	ldd	r24, Z+6	; 0x06
    7900:	81 30       	cpi	r24, 0x01	; 1
    7902:	41 f4       	brne	.+16     	; 0x7914 <hal_requestSpiChannel+0x19e>
      {
         pt_spiUserHndl->t_csIntHndl =
         hal_requestGpioInt( t_csPort, t_csIntConf);
    7904:	8e 2d       	mov	r24, r14
    7906:	b3 01       	movw	r22, r6
    7908:	a2 01       	movw	r20, r4
    790a:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <hal_requestGpioInt>
      t_conf.t_outConf = TOTEM;
      t_gErr = hal_configureGpioPort( t_csPort, t_conf);

      if( pt_spiChanHndl->t_spiOp == SPI_SLAVE)
      {
         pt_spiUserHndl->t_csIntHndl =
    790e:	f8 01       	movw	r30, r16
    7910:	86 87       	std	Z+14, r24	; 0x0e
    7912:	97 87       	std	Z+15, r25	; 0x0f
         hal_requestGpioInt( t_csPort, t_csIntConf);
      }

      if( pt_spiUserHndl->t_csIntHndl < 0)
    7914:	f8 01       	movw	r30, r16
    7916:	86 85       	ldd	r24, Z+14	; 0x0e
    7918:	97 85       	ldd	r25, Z+15	; 0x0f
    791a:	97 fd       	sbrc	r25, 7
    791c:	83 c0       	rjmp	.+262    	; 0x7a24 <hal_requestSpiChannel+0x2ae>
      }

      /*---------------------------------------------------------------------*
       * Chip select high...
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    791e:	f6 01       	movw	r30, r12
    7920:	86 81       	ldd	r24, Z+6	; 0x06
    7922:	88 23       	and	r24, r24
    7924:	09 f0       	breq	.+2      	; 0x7928 <hal_requestSpiChannel+0x1b2>
    7926:	83 c0       	rjmp	.+262    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    7928:	f5 e0       	ldi	r31, 0x05	; 5
    792a:	ef 16       	cp	r14, r31
    792c:	09 f4       	brne	.+2      	; 0x7930 <hal_requestSpiChannel+0x1ba>
    792e:	4f c0       	rjmp	.+158    	; 0x79ce <hal_requestSpiChannel+0x258>
    7930:	fe 15       	cp	r31, r14
    7932:	80 f0       	brcs	.+32     	; 0x7954 <hal_requestSpiChannel+0x1de>
    7934:	82 e0       	ldi	r24, 0x02	; 2
    7936:	e8 16       	cp	r14, r24
    7938:	99 f1       	breq	.+102    	; 0x79a0 <hal_requestSpiChannel+0x22a>
    793a:	8e 15       	cp	r24, r14
    793c:	20 f0       	brcs	.+8      	; 0x7946 <hal_requestSpiChannel+0x1d0>
    793e:	e1 e0       	ldi	r30, 0x01	; 1
    7940:	ee 16       	cp	r14, r30
    7942:	f1 f4       	brne	.+60     	; 0x7980 <hal_requestSpiChannel+0x20a>
    7944:	25 c0       	rjmp	.+74     	; 0x7990 <hal_requestSpiChannel+0x21a>
    7946:	f3 e0       	ldi	r31, 0x03	; 3
    7948:	ef 16       	cp	r14, r31
    794a:	91 f1       	breq	.+100    	; 0x79b0 <hal_requestSpiChannel+0x23a>
    794c:	84 e0       	ldi	r24, 0x04	; 4
    794e:	e8 16       	cp	r14, r24
    7950:	b9 f4       	brne	.+46     	; 0x7980 <hal_requestSpiChannel+0x20a>
    7952:	36 c0       	rjmp	.+108    	; 0x79c0 <hal_requestSpiChannel+0x24a>
    7954:	e8 e0       	ldi	r30, 0x08	; 8
    7956:	ee 16       	cp	r14, r30
    7958:	09 f4       	brne	.+2      	; 0x795c <hal_requestSpiChannel+0x1e6>
    795a:	4e c0       	rjmp	.+156    	; 0x79f8 <hal_requestSpiChannel+0x282>
    795c:	ee 15       	cp	r30, r14
    795e:	40 f0       	brcs	.+16     	; 0x7970 <hal_requestSpiChannel+0x1fa>
    7960:	f6 e0       	ldi	r31, 0x06	; 6
    7962:	ef 16       	cp	r14, r31
    7964:	09 f4       	brne	.+2      	; 0x7968 <hal_requestSpiChannel+0x1f2>
    7966:	3a c0       	rjmp	.+116    	; 0x79dc <hal_requestSpiChannel+0x266>
    7968:	87 e0       	ldi	r24, 0x07	; 7
    796a:	e8 16       	cp	r14, r24
    796c:	49 f4       	brne	.+18     	; 0x7980 <hal_requestSpiChannel+0x20a>
    796e:	3d c0       	rjmp	.+122    	; 0x79ea <hal_requestSpiChannel+0x274>
    7970:	e9 e0       	ldi	r30, 0x09	; 9
    7972:	ee 16       	cp	r14, r30
    7974:	09 f4       	brne	.+2      	; 0x7978 <hal_requestSpiChannel+0x202>
    7976:	47 c0       	rjmp	.+142    	; 0x7a06 <hal_requestSpiChannel+0x290>
    7978:	fa e0       	ldi	r31, 0x0A	; 10
    797a:	ef 16       	cp	r14, r31
    797c:	09 f4       	brne	.+2      	; 0x7980 <hal_requestSpiChannel+0x20a>
    797e:	4a c0       	rjmp	.+148    	; 0x7a14 <hal_requestSpiChannel+0x29e>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    7980:	80 91 00 06 	lds	r24, 0x0600
    7984:	8f 21       	and	r24, r15
    7986:	09 f4       	brne	.+2      	; 0x798a <hal_requestSpiChannel+0x214>
    7988:	52 c0       	rjmp	.+164    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    798a:	e0 e0       	ldi	r30, 0x00	; 0
    798c:	f6 e0       	ldi	r31, 0x06	; 6
    798e:	48 c0       	rjmp	.+144    	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    7990:	80 91 20 06 	lds	r24, 0x0620
    7994:	8f 21       	and	r24, r15
    7996:	09 f4       	brne	.+2      	; 0x799a <hal_requestSpiChannel+0x224>
    7998:	4a c0       	rjmp	.+148    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    799a:	e0 e2       	ldi	r30, 0x20	; 32
    799c:	f6 e0       	ldi	r31, 0x06	; 6
    799e:	40 c0       	rjmp	.+128    	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    79a0:	80 91 40 06 	lds	r24, 0x0640
    79a4:	8f 21       	and	r24, r15
    79a6:	09 f4       	brne	.+2      	; 0x79aa <hal_requestSpiChannel+0x234>
    79a8:	42 c0       	rjmp	.+132    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    79aa:	e0 e4       	ldi	r30, 0x40	; 64
    79ac:	f6 e0       	ldi	r31, 0x06	; 6
    79ae:	38 c0       	rjmp	.+112    	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    79b0:	80 91 60 06 	lds	r24, 0x0660
    79b4:	8f 21       	and	r24, r15
    79b6:	09 f4       	brne	.+2      	; 0x79ba <hal_requestSpiChannel+0x244>
    79b8:	3a c0       	rjmp	.+116    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    79ba:	e0 e6       	ldi	r30, 0x60	; 96
    79bc:	f6 e0       	ldi	r31, 0x06	; 6
    79be:	30 c0       	rjmp	.+96     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    79c0:	80 91 80 06 	lds	r24, 0x0680
    79c4:	8f 21       	and	r24, r15
    79c6:	99 f1       	breq	.+102    	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    79c8:	e0 e8       	ldi	r30, 0x80	; 128
    79ca:	f6 e0       	ldi	r31, 0x06	; 6
    79cc:	29 c0       	rjmp	.+82     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    79ce:	80 91 a0 06 	lds	r24, 0x06A0
    79d2:	8f 21       	and	r24, r15
    79d4:	61 f1       	breq	.+88     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    79d6:	e0 ea       	ldi	r30, 0xA0	; 160
    79d8:	f6 e0       	ldi	r31, 0x06	; 6
    79da:	22 c0       	rjmp	.+68     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    79dc:	80 91 e0 06 	lds	r24, 0x06E0
    79e0:	8f 21       	and	r24, r15
    79e2:	29 f1       	breq	.+74     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    79e4:	e0 ee       	ldi	r30, 0xE0	; 224
    79e6:	f6 e0       	ldi	r31, 0x06	; 6
    79e8:	1b c0       	rjmp	.+54     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    79ea:	80 91 00 07 	lds	r24, 0x0700
    79ee:	8f 21       	and	r24, r15
    79f0:	f1 f0       	breq	.+60     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    79f2:	e0 e0       	ldi	r30, 0x00	; 0
    79f4:	f7 e0       	ldi	r31, 0x07	; 7
    79f6:	14 c0       	rjmp	.+40     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    79f8:	80 91 20 07 	lds	r24, 0x0720
    79fc:	8f 21       	and	r24, r15
    79fe:	b9 f0       	breq	.+46     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    7a00:	e0 e2       	ldi	r30, 0x20	; 32
    7a02:	f7 e0       	ldi	r31, 0x07	; 7
    7a04:	0d c0       	rjmp	.+26     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    7a06:	80 91 c0 07 	lds	r24, 0x07C0
    7a0a:	8f 21       	and	r24, r15
    7a0c:	81 f0       	breq	.+32     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    7a0e:	e0 ec       	ldi	r30, 0xC0	; 192
    7a10:	f7 e0       	ldi	r31, 0x07	; 7
    7a12:	06 c0       	rjmp	.+12     	; 0x7a20 <hal_requestSpiChannel+0x2aa>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    7a14:	80 91 e0 07 	lds	r24, 0x07E0
    7a18:	8f 21       	and	r24, r15
    7a1a:	49 f0       	breq	.+18     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    7a1c:	e0 ee       	ldi	r30, 0xE0	; 224
    7a1e:	f7 e0       	ldi	r31, 0x07	; 7
    7a20:	f5 82       	std	Z+5, r15	; 0x05
    7a22:	05 c0       	rjmp	.+10     	; 0x7a2e <hal_requestSpiChannel+0x2b8>
      }

   }/*End if( pt_spiChanHndl != NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    7a24:	89 81       	ldd	r24, Y+1	; 0x01
    7a26:	8f bf       	out	0x3f, r24	; 63
      return (t_SPIHNDL)SPI_NO_CONFIG;
    7a28:	8d ef       	ldi	r24, 0xFD	; 253
    7a2a:	9f ef       	ldi	r25, 0xFF	; 255
    7a2c:	06 c0       	rjmp	.+12     	; 0x7a3a <hal_requestSpiChannel+0x2c4>
   }

   HAL_END_CRITICAL();//Enable interrupts
    7a2e:	89 81       	ldd	r24, Y+1	; 0x01
    7a30:	8f bf       	out	0x3f, r24	; 63

   return (t_SPIHNDL)t_linkHndl;
    7a32:	80 91 80 24 	lds	r24, 0x2480
    7a36:	90 91 81 24 	lds	r25, 0x2481

}/*End hal_requestSpiChannel*/
    7a3a:	28 96       	adiw	r28, 0x08	; 8
    7a3c:	cd bf       	out	0x3d, r28	; 61
    7a3e:	de bf       	out	0x3e, r29	; 62
    7a40:	df 91       	pop	r29
    7a42:	cf 91       	pop	r28
    7a44:	1f 91       	pop	r17
    7a46:	0f 91       	pop	r16
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	df 90       	pop	r13
    7a4e:	cf 90       	pop	r12
    7a50:	bf 90       	pop	r11
    7a52:	9f 90       	pop	r9
    7a54:	8f 90       	pop	r8
    7a56:	7f 90       	pop	r7
    7a58:	6f 90       	pop	r6
    7a5a:	5f 90       	pop	r5
    7a5c:	4f 90       	pop	r4
    7a5e:	08 95       	ret

00007a60 <hal_configureSpiChannel>:

}/*End hal_releaseSpiChannel*/

t_spiError hal_configureSpiChannel( t_spiChanId t_chanId,
                                    t_spiConfig t_conf)
{
    7a60:	3f 92       	push	r3
    7a62:	4f 92       	push	r4
    7a64:	5f 92       	push	r5
    7a66:	6f 92       	push	r6
    7a68:	7f 92       	push	r7
    7a6a:	8f 92       	push	r8
    7a6c:	9f 92       	push	r9
    7a6e:	af 92       	push	r10
    7a70:	bf 92       	push	r11
    7a72:	cf 92       	push	r12
    7a74:	df 92       	push	r13
    7a76:	ef 92       	push	r14
    7a78:	ff 92       	push	r15
    7a7a:	0f 93       	push	r16
    7a7c:	1f 93       	push	r17
    7a7e:	cf 93       	push	r28
    7a80:	df 93       	push	r29
    7a82:	cd b7       	in	r28, 0x3d	; 61
    7a84:	de b7       	in	r29, 0x3e	; 62
    7a86:	60 97       	sbiw	r28, 0x10	; 16
    7a88:	cd bf       	out	0x3d, r28	; 61
    7a8a:	de bf       	out	0x3e, r29	; 62
    7a8c:	68 2e       	mov	r6, r24
    7a8e:	40 2e       	mov	r4, r16
    7a90:	09 87       	std	Y+9, r16	; 0x09
    7a92:	71 2e       	mov	r7, r17
    7a94:	1a 87       	std	Y+10, r17	; 0x0a
    7a96:	52 2e       	mov	r5, r18
    7a98:	2b 87       	std	Y+11, r18	; 0x0b
    7a9a:	3c 87       	std	Y+12, r19	; 0x0c
    7a9c:	4d 87       	std	Y+13, r20	; 0x0d
    7a9e:	5e 87       	std	Y+14, r21	; 0x0e
    7aa0:	6f 87       	std	Y+15, r22	; 0x0f
    7aa2:	37 2e       	mov	r3, r23
    7aa4:	78 8b       	std	Y+16, r23	; 0x10

   }

   HAL_END_CRITICAL();//Enable interrupts

   return SPI_PASSED;
    7aa6:	8c 84       	ldd	r8, Y+12	; 0x0c
    7aa8:	9d 84       	ldd	r9, Y+13	; 0x0d
    7aaa:	ae 84       	ldd	r10, Y+14	; 0x0e
    7aac:	bf 84       	ldd	r11, Y+15	; 0x0f

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    7aae:	8f b7       	in	r24, 0x3f	; 63
    7ab0:	89 83       	std	Y+1, r24	; 0x01
    7ab2:	f8 94       	cli

   pt_spiChanHndl = findSpiElement( (uint8_t)t_chanId);
    7ab4:	86 2d       	mov	r24, r6
    7ab6:	0e 94 21 31 	call	0x6242	; 0x6242 <findSpiElement>

   /*------------------------------------------------------------------------*
    * Has this particular spi channel already been configured?
    *------------------------------------------------------------------------*/
   if( pt_spiChanHndl != NULL) /*Yes*/
    7aba:	00 97       	sbiw	r24, 0x00	; 0
    7abc:	21 f0       	breq	.+8      	; 0x7ac6 <hal_configureSpiChannel+0x66>
   {
      HAL_END_CRITICAL();//Enable interrupts
    7abe:	89 81       	ldd	r24, Y+1	; 0x01
    7ac0:	8f bf       	out	0x3f, r24	; 63
      return SPI_MODULE_CON;
    7ac2:	85 ef       	ldi	r24, 0xF5	; 245
    7ac4:	ad c2       	rjmp	.+1370   	; 0x8020 <hal_configureSpiChannel+0x5c0>
   }
   else /*No*/
   {

      if( (t_chanId < SPI_1) ||
    7ac6:	23 e0       	ldi	r18, 0x03	; 3
    7ac8:	26 15       	cp	r18, r6
    7aca:	20 f4       	brcc	.+8      	; 0x7ad4 <hal_configureSpiChannel+0x74>
          (t_chanId > SPI_4))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7acc:	89 81       	ldd	r24, Y+1	; 0x01
    7ace:	8f bf       	out	0x3f, r24	; 63
         return SPI_INVALID_MODULE;
    7ad0:	8b ef       	ldi	r24, 0xFB	; 251
    7ad2:	a6 c2       	rjmp	.+1356   	; 0x8020 <hal_configureSpiChannel+0x5c0>
      }

      if( (t_conf.t_spiMd < SPI_MODE_0) ||
    7ad4:	83 e0       	ldi	r24, 0x03	; 3
    7ad6:	80 17       	cp	r24, r16
    7ad8:	20 f4       	brcc	.+8      	; 0x7ae2 <hal_configureSpiChannel+0x82>
          (t_conf.t_spiMd > SPI_MODE_3))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7ada:	89 81       	ldd	r24, Y+1	; 0x01
    7adc:	8f bf       	out	0x3f, r24	; 63
         return SPI_INVALID_MODE;
    7ade:	8a ef       	ldi	r24, 0xFA	; 250
    7ae0:	9f c2       	rjmp	.+1342   	; 0x8020 <hal_configureSpiChannel+0x5c0>
      }

      if( (t_conf.t_spiOp < SPI_MASTER) ||
    7ae2:	a1 e0       	ldi	r26, 0x01	; 1
    7ae4:	a1 17       	cp	r26, r17
    7ae6:	20 f4       	brcc	.+8      	; 0x7af0 <hal_configureSpiChannel+0x90>
          (t_conf.t_spiOp > SPI_SLAVE))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7ae8:	89 81       	ldd	r24, Y+1	; 0x01
    7aea:	8f bf       	out	0x3f, r24	; 63
         return SPI_INVALID_OP;
    7aec:	89 ef       	ldi	r24, 0xF9	; 249
    7aee:	98 c2       	rjmp	.+1328   	; 0x8020 <hal_configureSpiChannel+0x5c0>
      }

      if( (t_conf.t_spiOrder < SPI_LSB_FIRST) ||
    7af0:	b1 e0       	ldi	r27, 0x01	; 1
    7af2:	b5 15       	cp	r27, r5
    7af4:	20 f4       	brcc	.+8      	; 0x7afe <hal_configureSpiChannel+0x9e>
          (t_conf.t_spiOrder > SPI_MSB_FIRST))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7af6:	89 81       	ldd	r24, Y+1	; 0x01
    7af8:	8f bf       	out	0x3f, r24	; 63
         return SPI_INVALID_ORDER;
    7afa:	88 ef       	ldi	r24, 0xF8	; 248
    7afc:	91 c2       	rjmp	.+1314   	; 0x8020 <hal_configureSpiChannel+0x5c0>
      }

      if( t_conf.t_spiOp == SPI_MASTER)
    7afe:	11 23       	and	r17, r17
    7b00:	49 f4       	brne	.+18     	; 0x7b14 <hal_configureSpiChannel+0xb4>
         i_maxSpiFreq = (hal_getCpuFreq() >> 1);
    7b02:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7b06:	6b 01       	movw	r12, r22
    7b08:	7c 01       	movw	r14, r24
    7b0a:	f6 94       	lsr	r15
    7b0c:	e7 94       	ror	r14
    7b0e:	d7 94       	ror	r13
    7b10:	c7 94       	ror	r12
    7b12:	0b c0       	rjmp	.+22     	; 0x7b2a <hal_configureSpiChannel+0xca>
      else
         i_maxSpiFreq = (hal_getCpuFreq() >> 2);
    7b14:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7b18:	6b 01       	movw	r12, r22
    7b1a:	7c 01       	movw	r14, r24
    7b1c:	e2 e0       	ldi	r30, 0x02	; 2
    7b1e:	f6 94       	lsr	r15
    7b20:	e7 94       	ror	r14
    7b22:	d7 94       	ror	r13
    7b24:	c7 94       	ror	r12
    7b26:	ea 95       	dec	r30
    7b28:	d1 f7       	brne	.-12     	; 0x7b1e <hal_configureSpiChannel+0xbe>

      if( (t_conf.i_baudRate < (hal_getCpuFreq() >> 7)) ||
    7b2a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7b2e:	dc 01       	movw	r26, r24
    7b30:	cb 01       	movw	r24, r22
    7b32:	57 e0       	ldi	r21, 0x07	; 7
    7b34:	b6 95       	lsr	r27
    7b36:	a7 95       	ror	r26
    7b38:	97 95       	ror	r25
    7b3a:	87 95       	ror	r24
    7b3c:	5a 95       	dec	r21
    7b3e:	d1 f7       	brne	.-12     	; 0x7b34 <hal_configureSpiChannel+0xd4>
    7b40:	88 16       	cp	r8, r24
    7b42:	99 06       	cpc	r9, r25
    7b44:	aa 06       	cpc	r10, r26
    7b46:	bb 06       	cpc	r11, r27
    7b48:	28 f0       	brcs	.+10     	; 0x7b54 <hal_configureSpiChannel+0xf4>
    7b4a:	c8 14       	cp	r12, r8
    7b4c:	d9 04       	cpc	r13, r9
    7b4e:	ea 04       	cpc	r14, r10
    7b50:	fb 04       	cpc	r15, r11
    7b52:	20 f4       	brcc	.+8      	; 0x7b5c <hal_configureSpiChannel+0xfc>
          (t_conf.i_baudRate > i_maxSpiFreq))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7b54:	89 81       	ldd	r24, Y+1	; 0x01
    7b56:	8f bf       	out	0x3f, r24	; 63
         return SPI_INVALID_BAUD_RATE;
    7b58:	8c ef       	ldi	r24, 0xFC	; 252
    7b5a:	62 c2       	rjmp	.+1220   	; 0x8020 <hal_configureSpiChannel+0x5c0>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular spi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiChanHndl));
    7b5c:	82 e1       	ldi	r24, 0x12	; 18
    7b5e:	90 e0       	ldi	r25, 0x00	; 0
    7b60:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    7b64:	8a 83       	std	Y+2, r24	; 0x02
    7b66:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    7b68:	8a 81       	ldd	r24, Y+2	; 0x02
    7b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    7b6c:	97 fd       	sbrc	r25, 7
    7b6e:	0c c0       	rjmp	.+24     	; 0x7b88 <hal_configureSpiChannel+0x128>
   }

   /*------------------------------------------------------------------------*
    * Add the spi module link onto the list open spi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_spiChanHndlList,
    7b70:	80 91 c0 20 	lds	r24, 0x20C0
    7b74:	90 91 c1 20 	lds	r25, 0x20C1
    7b78:	6a 81       	ldd	r22, Y+2	; 0x02
    7b7a:	7b 81       	ldd	r23, Y+3	; 0x03
    7b7c:	41 e0       	ldi	r20, 0x01	; 1
    7b7e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    7b82:	8a 81       	ldd	r24, Y+2	; 0x02
    7b84:	9b 81       	ldd	r25, Y+3	; 0x03
    7b86:	02 c0       	rjmp	.+4      	; 0x7b8c <hal_configureSpiChannel+0x12c>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiChanHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)SPI_OUT_OF_HEAP;
    7b88:	8f ef       	ldi	r24, 0xFF	; 255
    7b8a:	9f ef       	ldi	r25, 0xFF	; 255
      {
         HAL_END_CRITICAL();//Enable interrupts
         return SPI_INVALID_BAUD_RATE;
      }

      t_linkHndl = createSpiHandle();
    7b8c:	80 93 82 24 	sts	0x2482, r24
    7b90:	90 93 83 24 	sts	0x2483, r25

      if( t_linkHndl < 0)
    7b94:	80 91 82 24 	lds	r24, 0x2482
    7b98:	90 91 83 24 	lds	r25, 0x2483
    7b9c:	97 ff       	sbrs	r25, 7
    7b9e:	03 c0       	rjmp	.+6      	; 0x7ba6 <hal_configureSpiChannel+0x146>
      {
         HAL_END_CRITICAL();//Enable interrupts
    7ba0:	89 81       	ldd	r24, Y+1	; 0x01
    7ba2:	8f bf       	out	0x3f, r24	; 63
    7ba4:	3c c2       	rjmp	.+1144   	; 0x801e <hal_configureSpiChannel+0x5be>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the spi
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl = (t_spiChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);
    7ba6:	e0 91 82 24 	lds	r30, 0x2482
    7baa:	f0 91 83 24 	lds	r31, 0x2483

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the spi
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl = (t_spiChanHndl *)
    7bae:	c0 80       	ld	r12, Z
    7bb0:	d1 80       	ldd	r13, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

      /*---------------------------------------------------------------------*
       * Make sure all the elements of the spi channel handle are reset.
       *---------------------------------------------------------------------*/
      memset( (void *)pt_spiChanHndl, 0, sizeof( t_spiChanHndl));
    7bb2:	82 e1       	ldi	r24, 0x12	; 18
    7bb4:	f6 01       	movw	r30, r12
    7bb6:	11 92       	st	Z+, r1
    7bb8:	8a 95       	dec	r24
    7bba:	e9 f7       	brne	.-6      	; 0x7bb6 <hal_configureSpiChannel+0x156>

      /*---------------------------------------------------------------------*
       * Keep track of the link address so that it can be 'destroyed' at a
       * later time.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->t_linkHndl = t_linkHndl;
    7bbc:	80 91 82 24 	lds	r24, 0x2482
    7bc0:	90 91 83 24 	lds	r25, 0x2483
    7bc4:	d6 01       	movw	r26, r12
    7bc6:	1c 96       	adiw	r26, 0x0c	; 12
    7bc8:	8d 93       	st	X+, r24
    7bca:	9c 93       	st	X, r25
    7bcc:	1d 97       	sbiw	r26, 0x0d	; 13

      switch( t_chanId)
    7bce:	b2 e0       	ldi	r27, 0x02	; 2
    7bd0:	6b 16       	cp	r6, r27
    7bd2:	e1 f0       	breq	.+56     	; 0x7c0c <hal_configureSpiChannel+0x1ac>
    7bd4:	e3 e0       	ldi	r30, 0x03	; 3
    7bd6:	6e 16       	cp	r6, r30
    7bd8:	29 f1       	breq	.+74     	; 0x7c24 <hal_configureSpiChannel+0x1c4>
    7bda:	f1 e0       	ldi	r31, 0x01	; 1
    7bdc:	6f 16       	cp	r6, r31
    7bde:	61 f0       	breq	.+24     	; 0x7bf8 <hal_configureSpiChannel+0x198>
      {
         case SPI_1:

            pt_spiChanHndl->pt_spi = &SPIC;
    7be0:	80 ec       	ldi	r24, 0xC0	; 192
    7be2:	98 e0       	ldi	r25, 0x08	; 8
    7be4:	d6 01       	movw	r26, r12
    7be6:	17 96       	adiw	r26, 0x07	; 7
    7be8:	8d 93       	st	X+, r24
    7bea:	9c 93       	st	X, r25
    7bec:	18 97       	sbiw	r26, 0x08	; 8
            t_spiPort = GPIO_PORTC;
            pf_dmaCallback = &masterSpiCRxDmaInt;
    7bee:	08 e1       	ldi	r16, 0x18	; 24
    7bf0:	12 e3       	ldi	r17, 0x32	; 50
      switch( t_chanId)
      {
         case SPI_1:

            pt_spiChanHndl->pt_spi = &SPIC;
            t_spiPort = GPIO_PORTC;
    7bf2:	42 e0       	ldi	r20, 0x02	; 2
    7bf4:	f4 2e       	mov	r15, r20
            pf_dmaCallback = &masterSpiCRxDmaInt;

         break;
    7bf6:	1f c0       	rjmp	.+62     	; 0x7c36 <hal_configureSpiChannel+0x1d6>

         case SPI_2:

            pt_spiChanHndl->pt_spi = &SPID;
    7bf8:	80 ec       	ldi	r24, 0xC0	; 192
    7bfa:	99 e0       	ldi	r25, 0x09	; 9
    7bfc:	f6 01       	movw	r30, r12
    7bfe:	87 83       	std	Z+7, r24	; 0x07
    7c00:	90 87       	std	Z+8, r25	; 0x08
            t_spiPort = GPIO_PORTD;
            pf_dmaCallback = &masterSpiDRxDmaInt;
    7c02:	0d e0       	ldi	r16, 0x0D	; 13
    7c04:	12 e3       	ldi	r17, 0x32	; 50
         break;

         case SPI_2:

            pt_spiChanHndl->pt_spi = &SPID;
            t_spiPort = GPIO_PORTD;
    7c06:	33 e0       	ldi	r19, 0x03	; 3
    7c08:	f3 2e       	mov	r15, r19
            pf_dmaCallback = &masterSpiDRxDmaInt;

         break;
    7c0a:	15 c0       	rjmp	.+42     	; 0x7c36 <hal_configureSpiChannel+0x1d6>

         case SPI_3:

            pt_spiChanHndl->pt_spi = &SPIE;
    7c0c:	80 ec       	ldi	r24, 0xC0	; 192
    7c0e:	9a e0       	ldi	r25, 0x0A	; 10
    7c10:	d6 01       	movw	r26, r12
    7c12:	17 96       	adiw	r26, 0x07	; 7
    7c14:	8d 93       	st	X+, r24
    7c16:	9c 93       	st	X, r25
    7c18:	18 97       	sbiw	r26, 0x08	; 8
            t_spiPort = GPIO_PORTE;
            pf_dmaCallback = &masterSpiERxDmaInt;
    7c1a:	02 e0       	ldi	r16, 0x02	; 2
    7c1c:	12 e3       	ldi	r17, 0x32	; 50
         break;

         case SPI_3:

            pt_spiChanHndl->pt_spi = &SPIE;
            t_spiPort = GPIO_PORTE;
    7c1e:	24 e0       	ldi	r18, 0x04	; 4
    7c20:	f2 2e       	mov	r15, r18
            pf_dmaCallback = &masterSpiERxDmaInt;

         break;
    7c22:	09 c0       	rjmp	.+18     	; 0x7c36 <hal_configureSpiChannel+0x1d6>

         case SPI_4:

            pt_spiChanHndl->pt_spi = &SPIF;
    7c24:	80 ec       	ldi	r24, 0xC0	; 192
    7c26:	9b e0       	ldi	r25, 0x0B	; 11
    7c28:	f6 01       	movw	r30, r12
    7c2a:	87 83       	std	Z+7, r24	; 0x07
    7c2c:	90 87       	std	Z+8, r25	; 0x08
            t_spiPort = GPIO_PORTF;
            pf_dmaCallback = &masterSpiFRxDmaInt;
    7c2e:	07 ef       	ldi	r16, 0xF7	; 247
    7c30:	11 e3       	ldi	r17, 0x31	; 49
         break;

         case SPI_4:

            pt_spiChanHndl->pt_spi = &SPIF;
            t_spiPort = GPIO_PORTF;
    7c32:	a5 e0       	ldi	r26, 0x05	; 5
    7c34:	fa 2e       	mov	r15, r26
      }/*End switch( t_chanId)*/

      /*---------------------------------------------------------------------*
       * Is DMA being used for tx and rx transactions?
       *---------------------------------------------------------------------*/
      if( t_conf.b_enDma == true)
    7c36:	33 20       	and	r3, r3
    7c38:	09 f4       	brne	.+2      	; 0x7c3c <hal_configureSpiChannel+0x1dc>
    7c3a:	7a c0       	rjmp	.+244    	; 0x7d30 <hal_configureSpiChannel+0x2d0>
      {

         pt_spiChanHndl->t_rxDmaHndl = hal_requestDmaChannel();
    7c3c:	0e 94 c0 23 	call	0x4780	; 0x4780 <hal_requestDmaChannel>
    7c40:	d6 01       	movw	r26, r12
    7c42:	50 96       	adiw	r26, 0x10	; 16
    7c44:	8d 93       	st	X+, r24
    7c46:	9c 93       	st	X, r25
    7c48:	51 97       	sbiw	r26, 0x11	; 17
         if( pt_spiChanHndl->t_rxDmaHndl  < 0)
    7c4a:	50 96       	adiw	r26, 0x10	; 16
    7c4c:	8d 91       	ld	r24, X+
    7c4e:	9c 91       	ld	r25, X
    7c50:	51 97       	sbiw	r26, 0x11	; 17
    7c52:	97 ff       	sbrs	r25, 7
    7c54:	15 c0       	rjmp	.+42     	; 0x7c80 <hal_configureSpiChannel+0x220>
         {
            utl_destroyLink( gt_spiChanHndlList,
    7c56:	80 91 c0 20 	lds	r24, 0x20C0
    7c5a:	90 91 c1 20 	lds	r25, 0x20C1
    7c5e:	60 91 82 24 	lds	r22, 0x2482
    7c62:	70 91 83 24 	lds	r23, 0x2483
    7c66:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                             t_linkHndl);

            HAL_END_CRITICAL();//Enable interrupts
    7c6a:	89 81       	ldd	r24, Y+1	; 0x01
    7c6c:	8f bf       	out	0x3f, r24	; 63
            if( pt_spiChanHndl->t_rxDmaHndl == DMA_NO_CHANNELS_OPEN)
    7c6e:	f6 01       	movw	r30, r12
    7c70:	80 89       	ldd	r24, Z+16	; 0x10
    7c72:	91 89       	ldd	r25, Z+17	; 0x11
    7c74:	ff ef       	ldi	r31, 0xFF	; 255
    7c76:	89 3f       	cpi	r24, 0xF9	; 249
    7c78:	9f 07       	cpc	r25, r31
    7c7a:	09 f0       	breq	.+2      	; 0x7c7e <hal_configureSpiChannel+0x21e>
    7c7c:	d0 c1       	rjmp	.+928    	; 0x801e <hal_configureSpiChannel+0x5be>
    7c7e:	28 c0       	rjmp	.+80     	; 0x7cd0 <hal_configureSpiChannel+0x270>
            else
               return (t_SPIHNDL)SPI_OUT_OF_HEAP;

         }/*End if( pt_spiChanHndl->t_rxDmaHndl  < 0)*/

         pt_spiChanHndl->t_txDmaHndl = hal_requestDmaChannel();
    7c80:	0e 94 c0 23 	call	0x4780	; 0x4780 <hal_requestDmaChannel>
    7c84:	d6 01       	movw	r26, r12
    7c86:	1e 96       	adiw	r26, 0x0e	; 14
    7c88:	8d 93       	st	X+, r24
    7c8a:	9c 93       	st	X, r25
    7c8c:	1f 97       	sbiw	r26, 0x0f	; 15
         if( pt_spiChanHndl->t_txDmaHndl  < 0)
    7c8e:	1e 96       	adiw	r26, 0x0e	; 14
    7c90:	8d 91       	ld	r24, X+
    7c92:	9c 91       	ld	r25, X
    7c94:	1f 97       	sbiw	r26, 0x0f	; 15
    7c96:	97 ff       	sbrs	r25, 7
    7c98:	1d c0       	rjmp	.+58     	; 0x7cd4 <hal_configureSpiChannel+0x274>
         {
            utl_destroyLink( gt_spiChanHndlList,
    7c9a:	80 91 c0 20 	lds	r24, 0x20C0
    7c9e:	90 91 c1 20 	lds	r25, 0x20C1
    7ca2:	60 91 82 24 	lds	r22, 0x2482
    7ca6:	70 91 83 24 	lds	r23, 0x2483
    7caa:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                             t_linkHndl);
            hal_releaseDmaChannel( pt_spiChanHndl->t_rxDmaHndl);
    7cae:	f6 01       	movw	r30, r12
    7cb0:	80 89       	ldd	r24, Z+16	; 0x10
    7cb2:	91 89       	ldd	r25, Z+17	; 0x11
    7cb4:	0e 94 66 24 	call	0x48cc	; 0x48cc <hal_releaseDmaChannel>

            HAL_END_CRITICAL();//Enable interrupts
    7cb8:	89 81       	ldd	r24, Y+1	; 0x01
    7cba:	8f bf       	out	0x3f, r24	; 63
            if( pt_spiChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
    7cbc:	d6 01       	movw	r26, r12
    7cbe:	1e 96       	adiw	r26, 0x0e	; 14
    7cc0:	8d 91       	ld	r24, X+
    7cc2:	9c 91       	ld	r25, X
    7cc4:	1f 97       	sbiw	r26, 0x0f	; 15
    7cc6:	bf ef       	ldi	r27, 0xFF	; 255
    7cc8:	89 3f       	cpi	r24, 0xF9	; 249
    7cca:	9b 07       	cpc	r25, r27
    7ccc:	09 f0       	breq	.+2      	; 0x7cd0 <hal_configureSpiChannel+0x270>
    7cce:	a7 c1       	rjmp	.+846    	; 0x801e <hal_configureSpiChannel+0x5be>
               return (t_SPIHNDL)SPI_NO_DMA;
    7cd0:	81 ef       	ldi	r24, 0xF1	; 241
    7cd2:	a6 c1       	rjmp	.+844    	; 0x8020 <hal_configureSpiChannel+0x5c0>
          * For master operation with DMA use a transaction complete signal
          * for knowing when the burst has finished. For slave operations,
          * burst complete is signaled via the chip select pin transitioning
          * from low to high.
          *------------------------------------------------------------------*/
         if( t_conf.t_spiOp == SPI_MASTER)
    7cd4:	77 20       	and	r7, r7
    7cd6:	39 f4       	brne	.+14     	; 0x7ce6 <hal_configureSpiChannel+0x286>
         {
            hal_requestDmaInterrupt( pt_spiChanHndl->t_rxDmaHndl,
    7cd8:	f6 01       	movw	r30, r12
    7cda:	80 89       	ldd	r24, Z+16	; 0x10
    7cdc:	91 89       	ldd	r25, Z+17	; 0x11
    7cde:	60 e0       	ldi	r22, 0x00	; 0
    7ce0:	a8 01       	movw	r20, r16
    7ce2:	0e 94 40 23 	call	0x4680	; 0x4680 <hal_requestDmaInterrupt>
         }/*End if( t_conf.t_spiOp == SPI_MASTER)*/

         /*------------------------------------------------------------------*
          * Make sure the read DMA channel has higher priority than the write.
          *------------------------------------------------------------------*/
         if( hal_getDmaChannelId( pt_spiChanHndl->t_rxDmaHndl) >
    7ce6:	d6 01       	movw	r26, r12
    7ce8:	50 96       	adiw	r26, 0x10	; 16
    7cea:	8d 91       	ld	r24, X+
    7cec:	9c 91       	ld	r25, X
    7cee:	51 97       	sbiw	r26, 0x11	; 17
    7cf0:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <hal_getDmaChannelId>
    7cf4:	18 2f       	mov	r17, r24
             hal_getDmaChannelId( pt_spiChanHndl->t_txDmaHndl))
    7cf6:	f6 01       	movw	r30, r12
    7cf8:	26 85       	ldd	r18, Z+14	; 0x0e
    7cfa:	37 85       	ldd	r19, Z+15	; 0x0f
    7cfc:	c9 01       	movw	r24, r18
    7cfe:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <hal_getDmaChannelId>
         }/*End if( t_conf.t_spiOp == SPI_MASTER)*/

         /*------------------------------------------------------------------*
          * Make sure the read DMA channel has higher priority than the write.
          *------------------------------------------------------------------*/
         if( hal_getDmaChannelId( pt_spiChanHndl->t_rxDmaHndl) >
    7d02:	81 17       	cp	r24, r17
    7d04:	a8 f4       	brcc	.+42     	; 0x7d30 <hal_configureSpiChannel+0x2d0>
            t_DMAHNDL t_temp;

            /*---------------------------------------------------------------*
             * Swap handles...
             *---------------------------------------------------------------*/
            t_temp = pt_spiChanHndl->t_rxDmaHndl;
    7d06:	d6 01       	movw	r26, r12
    7d08:	50 96       	adiw	r26, 0x10	; 16
    7d0a:	8d 91       	ld	r24, X+
    7d0c:	9c 91       	ld	r25, X
    7d0e:	51 97       	sbiw	r26, 0x11	; 17
    7d10:	8a 83       	std	Y+2, r24	; 0x02
    7d12:	9b 83       	std	Y+3, r25	; 0x03
            pt_spiChanHndl->t_rxDmaHndl = pt_spiChanHndl->t_txDmaHndl;
    7d14:	1e 96       	adiw	r26, 0x0e	; 14
    7d16:	8d 91       	ld	r24, X+
    7d18:	9c 91       	ld	r25, X
    7d1a:	1f 97       	sbiw	r26, 0x0f	; 15
    7d1c:	50 96       	adiw	r26, 0x10	; 16
    7d1e:	8d 93       	st	X+, r24
    7d20:	9c 93       	st	X, r25
    7d22:	51 97       	sbiw	r26, 0x11	; 17
            pt_spiChanHndl->t_txDmaHndl = t_temp;
    7d24:	8a 81       	ldd	r24, Y+2	; 0x02
    7d26:	9b 81       	ldd	r25, Y+3	; 0x03
    7d28:	1e 96       	adiw	r26, 0x0e	; 14
    7d2a:	8d 93       	st	X+, r24
    7d2c:	9c 93       	st	X, r25
    7d2e:	1f 97       	sbiw	r26, 0x0f	; 15
      }/*End if( t_conf.b_enDma == true)*/

      /*---------------------------------------------------------------------*
       * Find the clock divider closest to the requested baud rate.
       *---------------------------------------------------------------------*/
      if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    7d30:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7d34:	dc 01       	movw	r26, r24
    7d36:	cb 01       	movw	r24, r22
    7d38:	f7 e0       	ldi	r31, 0x07	; 7
    7d3a:	b6 95       	lsr	r27
    7d3c:	a7 95       	ror	r26
    7d3e:	97 95       	ror	r25
    7d40:	87 95       	ror	r24
    7d42:	fa 95       	dec	r31
    7d44:	d1 f7       	brne	.-12     	; 0x7d3a <hal_configureSpiChannel+0x2da>
    7d46:	88 16       	cp	r8, r24
    7d48:	99 06       	cpc	r9, r25
    7d4a:	aa 06       	cpc	r10, r26
    7d4c:	bb 06       	cpc	r11, r27
    7d4e:	10 f1       	brcs	.+68     	; 0x7d94 <hal_configureSpiChannel+0x334>
          (t_conf.i_baudRate < (hal_getCpuFreq() >> 6)))
    7d50:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7d54:	dc 01       	movw	r26, r24
    7d56:	cb 01       	movw	r24, r22
    7d58:	e6 e0       	ldi	r30, 0x06	; 6
    7d5a:	b6 95       	lsr	r27
    7d5c:	a7 95       	ror	r26
    7d5e:	97 95       	ror	r25
    7d60:	87 95       	ror	r24
    7d62:	ea 95       	dec	r30
    7d64:	d1 f7       	brne	.-12     	; 0x7d5a <hal_configureSpiChannel+0x2fa>
      }/*End if( t_conf.b_enDma == true)*/

      /*---------------------------------------------------------------------*
       * Find the clock divider closest to the requested baud rate.
       *---------------------------------------------------------------------*/
      if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    7d66:	88 16       	cp	r8, r24
    7d68:	99 06       	cpc	r9, r25
    7d6a:	aa 06       	cpc	r10, r26
    7d6c:	bb 06       	cpc	r11, r27
    7d6e:	90 f4       	brcc	.+36     	; 0x7d94 <hal_configureSpiChannel+0x334>
          (t_conf.i_baudRate < (hal_getCpuFreq() >> 6)))
      {
         t_clockDivision = SPI_PRESCALER_DIV128_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    7d70:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7d74:	dc 01       	movw	r26, r24
    7d76:	cb 01       	movw	r24, r22
    7d78:	57 e0       	ldi	r21, 0x07	; 7
    7d7a:	b6 95       	lsr	r27
    7d7c:	a7 95       	ror	r26
    7d7e:	97 95       	ror	r25
    7d80:	87 95       	ror	r24
    7d82:	5a 95       	dec	r21
    7d84:	d1 f7       	brne	.-12     	; 0x7d7a <hal_configureSpiChannel+0x31a>
    7d86:	f6 01       	movw	r30, r12
    7d88:	81 83       	std	Z+1, r24	; 0x01
    7d8a:	92 83       	std	Z+2, r25	; 0x02
    7d8c:	a3 83       	std	Z+3, r26	; 0x03
    7d8e:	b4 83       	std	Z+4, r27	; 0x04
       * Find the clock divider closest to the requested baud rate.
       *---------------------------------------------------------------------*/
      if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 7)) &&
          (t_conf.i_baudRate < (hal_getCpuFreq() >> 6)))
      {
         t_clockDivision = SPI_PRESCALER_DIV128_gc;
    7d90:	13 e0       	ldi	r17, 0x03	; 3
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    7d92:	b0 c0       	rjmp	.+352    	; 0x7ef4 <hal_configureSpiChannel+0x494>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    7d94:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7d98:	dc 01       	movw	r26, r24
    7d9a:	cb 01       	movw	r24, r22
    7d9c:	46 e0       	ldi	r20, 0x06	; 6
    7d9e:	b6 95       	lsr	r27
    7da0:	a7 95       	ror	r26
    7da2:	97 95       	ror	r25
    7da4:	87 95       	ror	r24
    7da6:	4a 95       	dec	r20
    7da8:	d1 f7       	brne	.-12     	; 0x7d9e <hal_configureSpiChannel+0x33e>
    7daa:	88 16       	cp	r8, r24
    7dac:	99 06       	cpc	r9, r25
    7dae:	aa 06       	cpc	r10, r26
    7db0:	bb 06       	cpc	r11, r27
    7db2:	10 f1       	brcs	.+68     	; 0x7df8 <hal_configureSpiChannel+0x398>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 4)))
    7db4:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7db8:	dc 01       	movw	r26, r24
    7dba:	cb 01       	movw	r24, r22
    7dbc:	34 e0       	ldi	r19, 0x04	; 4
    7dbe:	b6 95       	lsr	r27
    7dc0:	a7 95       	ror	r26
    7dc2:	97 95       	ror	r25
    7dc4:	87 95       	ror	r24
    7dc6:	3a 95       	dec	r19
    7dc8:	d1 f7       	brne	.-12     	; 0x7dbe <hal_configureSpiChannel+0x35e>
          (t_conf.i_baudRate < (hal_getCpuFreq() >> 6)))
      {
         t_clockDivision = SPI_PRESCALER_DIV128_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    7dca:	88 16       	cp	r8, r24
    7dcc:	99 06       	cpc	r9, r25
    7dce:	aa 06       	cpc	r10, r26
    7dd0:	bb 06       	cpc	r11, r27
    7dd2:	90 f4       	brcc	.+36     	; 0x7df8 <hal_configureSpiChannel+0x398>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 4)))
      {
         t_clockDivision = SPI_PRESCALER_DIV64_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    7dd4:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7dd8:	dc 01       	movw	r26, r24
    7dda:	cb 01       	movw	r24, r22
    7ddc:	26 e0       	ldi	r18, 0x06	; 6
    7dde:	b6 95       	lsr	r27
    7de0:	a7 95       	ror	r26
    7de2:	97 95       	ror	r25
    7de4:	87 95       	ror	r24
    7de6:	2a 95       	dec	r18
    7de8:	d1 f7       	brne	.-12     	; 0x7dde <hal_configureSpiChannel+0x37e>
    7dea:	f6 01       	movw	r30, r12
    7dec:	81 83       	std	Z+1, r24	; 0x01
    7dee:	92 83       	std	Z+2, r25	; 0x02
    7df0:	a3 83       	std	Z+3, r26	; 0x03
    7df2:	b4 83       	std	Z+4, r27	; 0x04
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 6)) &&
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 4)))
      {
         t_clockDivision = SPI_PRESCALER_DIV64_gc;
    7df4:	12 e0       	ldi	r17, 0x02	; 2
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    7df6:	7e c0       	rjmp	.+252    	; 0x7ef4 <hal_configureSpiChannel+0x494>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    7df8:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7dfc:	dc 01       	movw	r26, r24
    7dfe:	cb 01       	movw	r24, r22
    7e00:	04 e0       	ldi	r16, 0x04	; 4
    7e02:	b6 95       	lsr	r27
    7e04:	a7 95       	ror	r26
    7e06:	97 95       	ror	r25
    7e08:	87 95       	ror	r24
    7e0a:	0a 95       	dec	r16
    7e0c:	d1 f7       	brne	.-12     	; 0x7e02 <hal_configureSpiChannel+0x3a2>
    7e0e:	88 16       	cp	r8, r24
    7e10:	99 06       	cpc	r9, r25
    7e12:	aa 06       	cpc	r10, r26
    7e14:	bb 06       	cpc	r11, r27
    7e16:	10 f1       	brcs	.+68     	; 0x7e5c <hal_configureSpiChannel+0x3fc>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 2)))
    7e18:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7e1c:	dc 01       	movw	r26, r24
    7e1e:	cb 01       	movw	r24, r22
    7e20:	12 e0       	ldi	r17, 0x02	; 2
    7e22:	b6 95       	lsr	r27
    7e24:	a7 95       	ror	r26
    7e26:	97 95       	ror	r25
    7e28:	87 95       	ror	r24
    7e2a:	1a 95       	dec	r17
    7e2c:	d1 f7       	brne	.-12     	; 0x7e22 <hal_configureSpiChannel+0x3c2>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 4)))
      {
         t_clockDivision = SPI_PRESCALER_DIV64_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    7e2e:	88 16       	cp	r8, r24
    7e30:	99 06       	cpc	r9, r25
    7e32:	aa 06       	cpc	r10, r26
    7e34:	bb 06       	cpc	r11, r27
    7e36:	90 f4       	brcc	.+36     	; 0x7e5c <hal_configureSpiChannel+0x3fc>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 2)))
      {
         t_clockDivision = SPI_PRESCALER_DIV16_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    7e38:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	cb 01       	movw	r24, r22
    7e40:	f4 e0       	ldi	r31, 0x04	; 4
    7e42:	b6 95       	lsr	r27
    7e44:	a7 95       	ror	r26
    7e46:	97 95       	ror	r25
    7e48:	87 95       	ror	r24
    7e4a:	fa 95       	dec	r31
    7e4c:	d1 f7       	brne	.-12     	; 0x7e42 <hal_configureSpiChannel+0x3e2>
    7e4e:	f6 01       	movw	r30, r12
    7e50:	81 83       	std	Z+1, r24	; 0x01
    7e52:	92 83       	std	Z+2, r25	; 0x02
    7e54:	a3 83       	std	Z+3, r26	; 0x03
    7e56:	b4 83       	std	Z+4, r27	; 0x04
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 4)) &&
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 2)))
      {
         t_clockDivision = SPI_PRESCALER_DIV16_gc;
    7e58:	11 e0       	ldi	r17, 0x01	; 1
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    7e5a:	4c c0       	rjmp	.+152    	; 0x7ef4 <hal_configureSpiChannel+0x494>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    7e5c:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7e60:	dc 01       	movw	r26, r24
    7e62:	cb 01       	movw	r24, r22
    7e64:	e2 e0       	ldi	r30, 0x02	; 2
    7e66:	b6 95       	lsr	r27
    7e68:	a7 95       	ror	r26
    7e6a:	97 95       	ror	r25
    7e6c:	87 95       	ror	r24
    7e6e:	ea 95       	dec	r30
    7e70:	d1 f7       	brne	.-12     	; 0x7e66 <hal_configureSpiChannel+0x406>
    7e72:	88 16       	cp	r8, r24
    7e74:	99 06       	cpc	r9, r25
    7e76:	aa 06       	cpc	r10, r26
    7e78:	bb 06       	cpc	r11, r27
    7e7a:	f8 f0       	brcs	.+62     	; 0x7eba <hal_configureSpiChannel+0x45a>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 1)))
    7e7c:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7e80:	dc 01       	movw	r26, r24
    7e82:	cb 01       	movw	r24, r22
    7e84:	b6 95       	lsr	r27
    7e86:	a7 95       	ror	r26
    7e88:	97 95       	ror	r25
    7e8a:	87 95       	ror	r24
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 2)))
      {
         t_clockDivision = SPI_PRESCALER_DIV16_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    7e8c:	88 16       	cp	r8, r24
    7e8e:	99 06       	cpc	r9, r25
    7e90:	aa 06       	cpc	r10, r26
    7e92:	bb 06       	cpc	r11, r27
    7e94:	90 f4       	brcc	.+36     	; 0x7eba <hal_configureSpiChannel+0x45a>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 1)))
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    7e96:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7e9a:	dc 01       	movw	r26, r24
    7e9c:	cb 01       	movw	r24, r22
    7e9e:	42 e0       	ldi	r20, 0x02	; 2
    7ea0:	b6 95       	lsr	r27
    7ea2:	a7 95       	ror	r26
    7ea4:	97 95       	ror	r25
    7ea6:	87 95       	ror	r24
    7ea8:	4a 95       	dec	r20
    7eaa:	d1 f7       	brne	.-12     	; 0x7ea0 <hal_configureSpiChannel+0x440>
    7eac:	f6 01       	movw	r30, r12
    7eae:	81 83       	std	Z+1, r24	; 0x01
    7eb0:	92 83       	std	Z+2, r25	; 0x02
    7eb2:	a3 83       	std	Z+3, r26	; 0x03
    7eb4:	b4 83       	std	Z+4, r27	; 0x04
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 2)) &&
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 1)))
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
    7eb6:	10 e0       	ldi	r17, 0x00	; 0
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    7eb8:	1d c0       	rjmp	.+58     	; 0x7ef4 <hal_configureSpiChannel+0x494>
      }
      else
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    7eba:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    7ebe:	dc 01       	movw	r26, r24
    7ec0:	cb 01       	movw	r24, r22
    7ec2:	32 e0       	ldi	r19, 0x02	; 2
    7ec4:	b6 95       	lsr	r27
    7ec6:	a7 95       	ror	r26
    7ec8:	97 95       	ror	r25
    7eca:	87 95       	ror	r24
    7ecc:	3a 95       	dec	r19
    7ece:	d1 f7       	brne	.-12     	; 0x7ec4 <hal_configureSpiChannel+0x464>
    7ed0:	f6 01       	movw	r30, r12
    7ed2:	81 83       	std	Z+1, r24	; 0x01
    7ed4:	92 83       	std	Z+2, r25	; 0x02
    7ed6:	a3 83       	std	Z+3, r26	; 0x03
    7ed8:	b4 83       	std	Z+4, r27	; 0x04
         c_doubleClock = 0;
         if( t_conf.t_spiOp == SPI_MASTER)
    7eda:	77 20       	and	r7, r7
    7edc:	a1 f4       	brne	.+40     	; 0x7f06 <hal_configureSpiChannel+0x4a6>
         {
            pt_spiChanHndl->i_baudRate *=2;
    7ede:	88 0f       	add	r24, r24
    7ee0:	99 1f       	adc	r25, r25
    7ee2:	aa 1f       	adc	r26, r26
    7ee4:	bb 1f       	adc	r27, r27
    7ee6:	81 83       	std	Z+1, r24	; 0x01
    7ee8:	92 83       	std	Z+2, r25	; 0x02
    7eea:	a3 83       	std	Z+3, r26	; 0x03
    7eec:	b4 83       	std	Z+4, r27	; 0x04
            c_doubleClock = SPI_CLK2X_bm;
    7eee:	00 e8       	ldi	r16, 0x80	; 128
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
      }
      else
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
    7ef0:	10 e0       	ldi	r17, 0x00	; 0
    7ef2:	03 c0       	rjmp	.+6      	; 0x7efa <hal_configureSpiChannel+0x49a>
      }

      /*---------------------------------------------------------------------*
       * Configure the pins the SPI will use.
       *---------------------------------------------------------------------*/
      if( t_conf.t_spiOp == SPI_MASTER)
    7ef4:	77 20       	and	r7, r7
    7ef6:	41 f4       	brne	.+16     	; 0x7f08 <hal_configureSpiChannel+0x4a8>
    7ef8:	00 e0       	ldi	r16, 0x00	; 0
      {
         t_gConf.c_inputMask        = PIN_6;
    7efa:	80 e4       	ldi	r24, 0x40	; 64
    7efc:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.c_outputMask       = PIN_4|PIN_5|PIN_7;
    7efe:	80 eb       	ldi	r24, 0xB0	; 176
    7f00:	8d 83       	std	Y+5, r24	; 0x05
         t_gConf.b_setOutputLow     = false;
    7f02:	1e 82       	std	Y+6, r1	; 0x06
    7f04:	07 c0       	rjmp	.+14     	; 0x7f14 <hal_configureSpiChannel+0x4b4>
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
      }
      else
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
    7f06:	10 e0       	ldi	r17, 0x00	; 0
         t_gConf.c_outputMask       = PIN_4|PIN_5|PIN_7;
         t_gConf.b_setOutputLow     = false;
      }/*End if( t_conf.t_spiOp == SPI_MASTER)*/
      else
      {
         t_gConf.c_inputMask    = PIN_4|PIN_5|PIN_7;
    7f08:	80 eb       	ldi	r24, 0xB0	; 176
    7f0a:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.c_outputMask   = PIN_6;
    7f0c:	80 e4       	ldi	r24, 0x40	; 64
    7f0e:	8d 83       	std	Y+5, r24	; 0x05
         t_gConf.b_setOutputLow = false;
    7f10:	1e 82       	std	Y+6, r1	; 0x06
    7f12:	00 e0       	ldi	r16, 0x00	; 0
      }

      t_gConf.t_inConf  = PULLUP;
    7f14:	85 e0       	ldi	r24, 0x05	; 5
    7f16:	8f 83       	std	Y+7, r24	; 0x07
      t_gConf.t_outConf = TOTEM;
    7f18:	18 86       	std	Y+8, r1	; 0x08

      t_gErr = hal_configureGpioPort( t_spiPort, t_gConf);
    7f1a:	8f 2d       	mov	r24, r15
    7f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    7f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    7f20:	4e 81       	ldd	r20, Y+6	; 0x06
    7f22:	55 e0       	ldi	r21, 0x05	; 5
    7f24:	60 e0       	ldi	r22, 0x00	; 0
    7f26:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>

      /*---------------------------------------------------------------------*
       * Reset this particular spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL = 0;
    7f2a:	d6 01       	movw	r26, r12
    7f2c:	17 96       	adiw	r26, 0x07	; 7
    7f2e:	ed 91       	ld	r30, X+
    7f30:	fc 91       	ld	r31, X
    7f32:	18 97       	sbiw	r26, 0x08	; 8
    7f34:	10 82       	st	Z, r1

      /*---------------------------------------------------------------------*
       * Configure the spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL |= t_clockDivision;
    7f36:	17 96       	adiw	r26, 0x07	; 7
    7f38:	ed 91       	ld	r30, X+
    7f3a:	fc 91       	ld	r31, X
    7f3c:	18 97       	sbiw	r26, 0x08	; 8
    7f3e:	80 81       	ld	r24, Z
    7f40:	81 2b       	or	r24, r17
    7f42:	80 83       	st	Z, r24

      pt_spiChanHndl->pt_spi->CTRL |= c_doubleClock;
    7f44:	17 96       	adiw	r26, 0x07	; 7
    7f46:	ed 91       	ld	r30, X+
    7f48:	fc 91       	ld	r31, X
    7f4a:	18 97       	sbiw	r26, 0x08	; 8
    7f4c:	80 81       	ld	r24, Z
    7f4e:	80 2b       	or	r24, r16
    7f50:	80 83       	st	Z, r24

      if( t_conf.t_spiOp == SPI_MASTER)
    7f52:	77 20       	and	r7, r7
    7f54:	39 f4       	brne	.+14     	; 0x7f64 <hal_configureSpiChannel+0x504>
         pt_spiChanHndl->pt_spi->CTRL |= SPI_MASTER_bm;
    7f56:	17 96       	adiw	r26, 0x07	; 7
    7f58:	ed 91       	ld	r30, X+
    7f5a:	fc 91       	ld	r31, X
    7f5c:	18 97       	sbiw	r26, 0x08	; 8
    7f5e:	80 81       	ld	r24, Z
    7f60:	80 61       	ori	r24, 0x10	; 16
    7f62:	80 83       	st	Z, r24

      if( t_conf.t_spiOrder == SPI_LSB_FIRST)
    7f64:	55 20       	and	r5, r5
    7f66:	41 f4       	brne	.+16     	; 0x7f78 <hal_configureSpiChannel+0x518>
         pt_spiChanHndl->pt_spi->CTRL |= SPI_DORD_bm;
    7f68:	d6 01       	movw	r26, r12
    7f6a:	17 96       	adiw	r26, 0x07	; 7
    7f6c:	ed 91       	ld	r30, X+
    7f6e:	fc 91       	ld	r31, X
    7f70:	18 97       	sbiw	r26, 0x08	; 8
    7f72:	80 81       	ld	r24, Z
    7f74:	80 62       	ori	r24, 0x20	; 32
    7f76:	80 83       	st	Z, r24

      pt_spiChanHndl->pt_spi->CTRL |= (t_conf.t_spiMd << 2);
    7f78:	d6 01       	movw	r26, r12
    7f7a:	17 96       	adiw	r26, 0x07	; 7
    7f7c:	ed 91       	ld	r30, X+
    7f7e:	fc 91       	ld	r31, X
    7f80:	18 97       	sbiw	r26, 0x08	; 8
    7f82:	80 81       	ld	r24, Z
    7f84:	44 0c       	add	r4, r4
    7f86:	44 0c       	add	r4, r4
    7f88:	48 2a       	or	r4, r24
    7f8a:	40 82       	st	Z, r4

      /*---------------------------------------------------------------------*
       * Store the channel ID.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->t_id = t_chanId;
    7f8c:	6c 92       	st	X, r6

      /*---------------------------------------------------------------------*
       * Number users attached at this time.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->c_numUsers = 0;
    7f8e:	15 96       	adiw	r26, 0x05	; 5
    7f90:	1c 92       	st	X, r1
    7f92:	15 97       	sbiw	r26, 0x05	; 5

      /*---------------------------------------------------------------------*
       * Store the operational mode for this particular spi channel.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->t_spiOp = t_conf.t_spiOp;
    7f94:	16 96       	adiw	r26, 0x06	; 6
    7f96:	7c 92       	st	X, r7
    7f98:	16 97       	sbiw	r26, 0x06	; 6

      /*---------------------------------------------------------------------*
       * No transactions in progress.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->b_busLocked = false;
    7f9a:	19 96       	adiw	r26, 0x09	; 9
    7f9c:	1c 92       	st	X, r1
    7f9e:	19 97       	sbiw	r26, 0x09	; 9
    7fa0:	17 96       	adiw	r26, 0x07	; 7
    7fa2:	ed 91       	ld	r30, X+
    7fa4:	fc 91       	ld	r31, X
    7fa6:	18 97       	sbiw	r26, 0x08	; 8

      /*---------------------------------------------------------------------*
       * Enable spi interrupts for block devices that aren't configured for
       * dma operation.
       *---------------------------------------------------------------------*/
      if( t_conf.b_enDma == true)
    7fa8:	33 20       	and	r3, r3
    7faa:	11 f0       	breq	.+4      	; 0x7fb0 <hal_configureSpiChannel+0x550>
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    7fac:	11 82       	std	Z+1, r1	; 0x01
    7fae:	02 c0       	rjmp	.+4      	; 0x7fb4 <hal_configureSpiChannel+0x554>
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    7fb0:	83 e0       	ldi	r24, 0x03	; 3
    7fb2:	81 83       	std	Z+1, r24	; 0x01
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    7fb4:	b4 e0       	ldi	r27, 0x04	; 4
    7fb6:	fb 16       	cp	r15, r27
    7fb8:	b1 f0       	breq	.+44     	; 0x7fe6 <hal_configureSpiChannel+0x586>
    7fba:	e5 e0       	ldi	r30, 0x05	; 5
    7fbc:	fe 16       	cp	r15, r30
    7fbe:	d9 f0       	breq	.+54     	; 0x7ff6 <hal_configureSpiChannel+0x596>
    7fc0:	f3 e0       	ldi	r31, 0x03	; 3
    7fc2:	ff 16       	cp	r15, r31
    7fc4:	41 f0       	breq	.+16     	; 0x7fd6 <hal_configureSpiChannel+0x576>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    7fc6:	80 91 40 06 	lds	r24, 0x0640
    7fca:	84 ff       	sbrs	r24, 4
    7fcc:	1c c0       	rjmp	.+56     	; 0x8006 <hal_configureSpiChannel+0x5a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    7fce:	80 e1       	ldi	r24, 0x10	; 16
    7fd0:	e0 e4       	ldi	r30, 0x40	; 64
    7fd2:	f6 e0       	ldi	r31, 0x06	; 6
    7fd4:	17 c0       	rjmp	.+46     	; 0x8004 <hal_configureSpiChannel+0x5a4>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    7fd6:	80 91 60 06 	lds	r24, 0x0660
    7fda:	84 ff       	sbrs	r24, 4
    7fdc:	14 c0       	rjmp	.+40     	; 0x8006 <hal_configureSpiChannel+0x5a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    7fde:	80 e1       	ldi	r24, 0x10	; 16
    7fe0:	e0 e6       	ldi	r30, 0x60	; 96
    7fe2:	f6 e0       	ldi	r31, 0x06	; 6
    7fe4:	0f c0       	rjmp	.+30     	; 0x8004 <hal_configureSpiChannel+0x5a4>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    7fe6:	80 91 80 06 	lds	r24, 0x0680
    7fea:	84 ff       	sbrs	r24, 4
    7fec:	0c c0       	rjmp	.+24     	; 0x8006 <hal_configureSpiChannel+0x5a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    7fee:	80 e1       	ldi	r24, 0x10	; 16
    7ff0:	e0 e8       	ldi	r30, 0x80	; 128
    7ff2:	f6 e0       	ldi	r31, 0x06	; 6
    7ff4:	07 c0       	rjmp	.+14     	; 0x8004 <hal_configureSpiChannel+0x5a4>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    7ff6:	80 91 a0 06 	lds	r24, 0x06A0
    7ffa:	84 ff       	sbrs	r24, 4
    7ffc:	04 c0       	rjmp	.+8      	; 0x8006 <hal_configureSpiChannel+0x5a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    7ffe:	80 e1       	ldi	r24, 0x10	; 16
    8000:	e0 ea       	ldi	r30, 0xA0	; 160
    8002:	f6 e0       	ldi	r31, 0x06	; 6
    8004:	85 83       	std	Z+5, r24	; 0x05
                  PIN_4);

      /*---------------------------------------------------------------------*
       * Enable the spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL |= SPI_ENABLE_bm;
    8006:	d6 01       	movw	r26, r12
    8008:	17 96       	adiw	r26, 0x07	; 7
    800a:	ed 91       	ld	r30, X+
    800c:	fc 91       	ld	r31, X
    800e:	18 97       	sbiw	r26, 0x08	; 8
    8010:	80 81       	ld	r24, Z
    8012:	80 64       	ori	r24, 0x40	; 64
    8014:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    8016:	89 81       	ldd	r24, Y+1	; 0x01
    8018:	8f bf       	out	0x3f, r24	; 63

   return SPI_PASSED;
    801a:	80 e0       	ldi	r24, 0x00	; 0
    801c:	01 c0       	rjmp	.+2      	; 0x8020 <hal_configureSpiChannel+0x5c0>

            HAL_END_CRITICAL();//Enable interrupts
            if( pt_spiChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
               return (t_SPIHNDL)SPI_NO_DMA;
            else
               return (t_SPIHNDL)SPI_OUT_OF_HEAP;
    801e:	8f ef       	ldi	r24, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return SPI_PASSED;

}/*End hal_configureSpiChannel*/
    8020:	60 96       	adiw	r28, 0x10	; 16
    8022:	cd bf       	out	0x3d, r28	; 61
    8024:	de bf       	out	0x3e, r29	; 62
    8026:	df 91       	pop	r29
    8028:	cf 91       	pop	r28
    802a:	1f 91       	pop	r17
    802c:	0f 91       	pop	r16
    802e:	ff 90       	pop	r15
    8030:	ef 90       	pop	r14
    8032:	df 90       	pop	r13
    8034:	cf 90       	pop	r12
    8036:	bf 90       	pop	r11
    8038:	af 90       	pop	r10
    803a:	9f 90       	pop	r9
    803c:	8f 90       	pop	r8
    803e:	7f 90       	pop	r7
    8040:	6f 90       	pop	r6
    8042:	5f 90       	pop	r5
    8044:	4f 90       	pop	r4
    8046:	3f 90       	pop	r3
    8048:	08 95       	ret

0000804a <findTimerIntElement>:
   }

}/*End ISR( TCF1_OVF_vect)*/

static t_timerIntHndl *findTimerIntElement( t_timerIntId t_id)
{
    804a:	cf 93       	push	r28
    804c:	df 93       	push	r29
    804e:	0f 92       	push	r0
    8050:	0f 92       	push	r0
    8052:	cd b7       	in	r28, 0x3d	; 61
    8054:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerIntHndlList, s_count)
    8056:	e0 91 e6 20 	lds	r30, 0x20E6
    805a:	f0 91 e7 20 	lds	r31, 0x20E7
    805e:	22 81       	ldd	r18, Z+2	; 0x02
    8060:	33 81       	ldd	r19, Z+3	; 0x03
    8062:	e0 91 e6 20 	lds	r30, 0x20E6
    8066:	f0 91 e7 20 	lds	r31, 0x20E7
    806a:	0c c0       	rjmp	.+24     	; 0x8084 <findTimerIntElement+0x3a>
   {
      pt_element = (t_timerIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    806c:	e9 81       	ldd	r30, Y+1	; 0x01
    806e:	fa 81       	ldd	r31, Y+2	; 0x02
    8070:	01 90       	ld	r0, Z+
    8072:	f0 81       	ld	r31, Z
    8074:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    8076:	90 81       	ld	r25, Z
    8078:	98 17       	cp	r25, r24
    807a:	69 f0       	breq	.+26     	; 0x8096 <findTimerIntElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerIntHndlList, s_count)
    807c:	21 50       	subi	r18, 0x01	; 1
    807e:	30 40       	sbci	r19, 0x00	; 0
    8080:	e9 81       	ldd	r30, Y+1	; 0x01
    8082:	fa 81       	ldd	r31, Y+2	; 0x02
    8084:	40 85       	ldd	r20, Z+8	; 0x08
    8086:	51 85       	ldd	r21, Z+9	; 0x09
    8088:	49 83       	std	Y+1, r20	; 0x01
    808a:	5a 83       	std	Y+2, r21	; 0x02
    808c:	12 16       	cp	r1, r18
    808e:	13 06       	cpc	r1, r19
    8090:	6c f3       	brlt	.-38     	; 0x806c <findTimerIntElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open Timer
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;
    8092:	e0 e0       	ldi	r30, 0x00	; 0
    8094:	f0 e0       	ldi	r31, 0x00	; 0

}/*End findTimerIntElement*/
    8096:	cf 01       	movw	r24, r30
    8098:	0f 90       	pop	r0
    809a:	0f 90       	pop	r0
    809c:	df 91       	pop	r29
    809e:	cf 91       	pop	r28
    80a0:	08 95       	ret

000080a2 <__vector_15>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( TCC0_ERR_vect)
{
    80a2:	1f 92       	push	r1
    80a4:	0f 92       	push	r0
    80a6:	0f b6       	in	r0, 0x3f	; 63
    80a8:	0f 92       	push	r0
    80aa:	08 b6       	in	r0, 0x38	; 56
    80ac:	0f 92       	push	r0
    80ae:	11 24       	eor	r1, r1

}/*End ISR( TCC0_ERR_vect)*/
    80b0:	0f 90       	pop	r0
    80b2:	08 be       	out	0x38, r0	; 56
    80b4:	0f 90       	pop	r0
    80b6:	0f be       	out	0x3f, r0	; 63
    80b8:	0f 90       	pop	r0
    80ba:	1f 90       	pop	r1
    80bc:	18 95       	reti

000080be <__vector_16>:

ISR( TCC0_CCA_vect)
{
    80be:	1f 92       	push	r1
    80c0:	0f 92       	push	r0
    80c2:	0f b6       	in	r0, 0x3f	; 63
    80c4:	0f 92       	push	r0
    80c6:	08 b6       	in	r0, 0x38	; 56
    80c8:	0f 92       	push	r0
    80ca:	09 b6       	in	r0, 0x39	; 57
    80cc:	0f 92       	push	r0
    80ce:	0b b6       	in	r0, 0x3b	; 59
    80d0:	0f 92       	push	r0
    80d2:	11 24       	eor	r1, r1
    80d4:	2f 93       	push	r18
    80d6:	3f 93       	push	r19
    80d8:	4f 93       	push	r20
    80da:	5f 93       	push	r21
    80dc:	6f 93       	push	r22
    80de:	7f 93       	push	r23
    80e0:	8f 93       	push	r24
    80e2:	9f 93       	push	r25
    80e4:	af 93       	push	r26
    80e6:	bf 93       	push	r27
    80e8:	ef 93       	push	r30
    80ea:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_A);
    80ec:	80 e0       	ldi	r24, 0x00	; 0
    80ee:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    80f2:	00 97       	sbiw	r24, 0x00	; 0
    80f4:	41 f0       	breq	.+16     	; 0x8106 <__vector_16+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    80f6:	dc 01       	movw	r26, r24
    80f8:	11 96       	adiw	r26, 0x01	; 1
    80fa:	ed 91       	ld	r30, X+
    80fc:	fc 91       	ld	r31, X
    80fe:	12 97       	sbiw	r26, 0x02	; 2
    8100:	30 97       	sbiw	r30, 0x00	; 0
    8102:	09 f0       	breq	.+2      	; 0x8106 <__vector_16+0x48>
         pt_intHndl->pf_funPtr();
    8104:	19 95       	eicall
   }

}/*End ISR( TCC0_CCA_vect)*/
    8106:	ff 91       	pop	r31
    8108:	ef 91       	pop	r30
    810a:	bf 91       	pop	r27
    810c:	af 91       	pop	r26
    810e:	9f 91       	pop	r25
    8110:	8f 91       	pop	r24
    8112:	7f 91       	pop	r23
    8114:	6f 91       	pop	r22
    8116:	5f 91       	pop	r21
    8118:	4f 91       	pop	r20
    811a:	3f 91       	pop	r19
    811c:	2f 91       	pop	r18
    811e:	0f 90       	pop	r0
    8120:	0b be       	out	0x3b, r0	; 59
    8122:	0f 90       	pop	r0
    8124:	09 be       	out	0x39, r0	; 57
    8126:	0f 90       	pop	r0
    8128:	08 be       	out	0x38, r0	; 56
    812a:	0f 90       	pop	r0
    812c:	0f be       	out	0x3f, r0	; 63
    812e:	0f 90       	pop	r0
    8130:	1f 90       	pop	r1
    8132:	18 95       	reti

00008134 <__vector_17>:

ISR( TCC0_CCB_vect)
{
    8134:	1f 92       	push	r1
    8136:	0f 92       	push	r0
    8138:	0f b6       	in	r0, 0x3f	; 63
    813a:	0f 92       	push	r0
    813c:	08 b6       	in	r0, 0x38	; 56
    813e:	0f 92       	push	r0
    8140:	09 b6       	in	r0, 0x39	; 57
    8142:	0f 92       	push	r0
    8144:	0b b6       	in	r0, 0x3b	; 59
    8146:	0f 92       	push	r0
    8148:	11 24       	eor	r1, r1
    814a:	2f 93       	push	r18
    814c:	3f 93       	push	r19
    814e:	4f 93       	push	r20
    8150:	5f 93       	push	r21
    8152:	6f 93       	push	r22
    8154:	7f 93       	push	r23
    8156:	8f 93       	push	r24
    8158:	9f 93       	push	r25
    815a:	af 93       	push	r26
    815c:	bf 93       	push	r27
    815e:	ef 93       	push	r30
    8160:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_B);
    8162:	81 e0       	ldi	r24, 0x01	; 1
    8164:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8168:	00 97       	sbiw	r24, 0x00	; 0
    816a:	41 f0       	breq	.+16     	; 0x817c <__vector_17+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    816c:	dc 01       	movw	r26, r24
    816e:	11 96       	adiw	r26, 0x01	; 1
    8170:	ed 91       	ld	r30, X+
    8172:	fc 91       	ld	r31, X
    8174:	12 97       	sbiw	r26, 0x02	; 2
    8176:	30 97       	sbiw	r30, 0x00	; 0
    8178:	09 f0       	breq	.+2      	; 0x817c <__vector_17+0x48>
         pt_intHndl->pf_funPtr();
    817a:	19 95       	eicall
   }

}/*End ISR( TCC0_CCB_vect)*/
    817c:	ff 91       	pop	r31
    817e:	ef 91       	pop	r30
    8180:	bf 91       	pop	r27
    8182:	af 91       	pop	r26
    8184:	9f 91       	pop	r25
    8186:	8f 91       	pop	r24
    8188:	7f 91       	pop	r23
    818a:	6f 91       	pop	r22
    818c:	5f 91       	pop	r21
    818e:	4f 91       	pop	r20
    8190:	3f 91       	pop	r19
    8192:	2f 91       	pop	r18
    8194:	0f 90       	pop	r0
    8196:	0b be       	out	0x3b, r0	; 59
    8198:	0f 90       	pop	r0
    819a:	09 be       	out	0x39, r0	; 57
    819c:	0f 90       	pop	r0
    819e:	08 be       	out	0x38, r0	; 56
    81a0:	0f 90       	pop	r0
    81a2:	0f be       	out	0x3f, r0	; 63
    81a4:	0f 90       	pop	r0
    81a6:	1f 90       	pop	r1
    81a8:	18 95       	reti

000081aa <__vector_18>:

ISR( TCC0_CCC_vect)
{
    81aa:	1f 92       	push	r1
    81ac:	0f 92       	push	r0
    81ae:	0f b6       	in	r0, 0x3f	; 63
    81b0:	0f 92       	push	r0
    81b2:	08 b6       	in	r0, 0x38	; 56
    81b4:	0f 92       	push	r0
    81b6:	09 b6       	in	r0, 0x39	; 57
    81b8:	0f 92       	push	r0
    81ba:	0b b6       	in	r0, 0x3b	; 59
    81bc:	0f 92       	push	r0
    81be:	11 24       	eor	r1, r1
    81c0:	2f 93       	push	r18
    81c2:	3f 93       	push	r19
    81c4:	4f 93       	push	r20
    81c6:	5f 93       	push	r21
    81c8:	6f 93       	push	r22
    81ca:	7f 93       	push	r23
    81cc:	8f 93       	push	r24
    81ce:	9f 93       	push	r25
    81d0:	af 93       	push	r26
    81d2:	bf 93       	push	r27
    81d4:	ef 93       	push	r30
    81d6:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_C);
    81d8:	82 e0       	ldi	r24, 0x02	; 2
    81da:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    81de:	00 97       	sbiw	r24, 0x00	; 0
    81e0:	41 f0       	breq	.+16     	; 0x81f2 <__vector_18+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    81e2:	dc 01       	movw	r26, r24
    81e4:	11 96       	adiw	r26, 0x01	; 1
    81e6:	ed 91       	ld	r30, X+
    81e8:	fc 91       	ld	r31, X
    81ea:	12 97       	sbiw	r26, 0x02	; 2
    81ec:	30 97       	sbiw	r30, 0x00	; 0
    81ee:	09 f0       	breq	.+2      	; 0x81f2 <__vector_18+0x48>
         pt_intHndl->pf_funPtr();
    81f0:	19 95       	eicall
   }

}/*End ISR( TCC0_CCC_vect)*/
    81f2:	ff 91       	pop	r31
    81f4:	ef 91       	pop	r30
    81f6:	bf 91       	pop	r27
    81f8:	af 91       	pop	r26
    81fa:	9f 91       	pop	r25
    81fc:	8f 91       	pop	r24
    81fe:	7f 91       	pop	r23
    8200:	6f 91       	pop	r22
    8202:	5f 91       	pop	r21
    8204:	4f 91       	pop	r20
    8206:	3f 91       	pop	r19
    8208:	2f 91       	pop	r18
    820a:	0f 90       	pop	r0
    820c:	0b be       	out	0x3b, r0	; 59
    820e:	0f 90       	pop	r0
    8210:	09 be       	out	0x39, r0	; 57
    8212:	0f 90       	pop	r0
    8214:	08 be       	out	0x38, r0	; 56
    8216:	0f 90       	pop	r0
    8218:	0f be       	out	0x3f, r0	; 63
    821a:	0f 90       	pop	r0
    821c:	1f 90       	pop	r1
    821e:	18 95       	reti

00008220 <__vector_19>:

ISR( TCC0_CCD_vect)
{
    8220:	1f 92       	push	r1
    8222:	0f 92       	push	r0
    8224:	0f b6       	in	r0, 0x3f	; 63
    8226:	0f 92       	push	r0
    8228:	08 b6       	in	r0, 0x38	; 56
    822a:	0f 92       	push	r0
    822c:	09 b6       	in	r0, 0x39	; 57
    822e:	0f 92       	push	r0
    8230:	0b b6       	in	r0, 0x3b	; 59
    8232:	0f 92       	push	r0
    8234:	11 24       	eor	r1, r1
    8236:	2f 93       	push	r18
    8238:	3f 93       	push	r19
    823a:	4f 93       	push	r20
    823c:	5f 93       	push	r21
    823e:	6f 93       	push	r22
    8240:	7f 93       	push	r23
    8242:	8f 93       	push	r24
    8244:	9f 93       	push	r25
    8246:	af 93       	push	r26
    8248:	bf 93       	push	r27
    824a:	ef 93       	push	r30
    824c:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_D);
    824e:	83 e0       	ldi	r24, 0x03	; 3
    8250:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8254:	00 97       	sbiw	r24, 0x00	; 0
    8256:	41 f0       	breq	.+16     	; 0x8268 <__vector_19+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8258:	dc 01       	movw	r26, r24
    825a:	11 96       	adiw	r26, 0x01	; 1
    825c:	ed 91       	ld	r30, X+
    825e:	fc 91       	ld	r31, X
    8260:	12 97       	sbiw	r26, 0x02	; 2
    8262:	30 97       	sbiw	r30, 0x00	; 0
    8264:	09 f0       	breq	.+2      	; 0x8268 <__vector_19+0x48>
         pt_intHndl->pf_funPtr();
    8266:	19 95       	eicall
   }

}/*End ISR( TCC0_CCD_vect)*/
    8268:	ff 91       	pop	r31
    826a:	ef 91       	pop	r30
    826c:	bf 91       	pop	r27
    826e:	af 91       	pop	r26
    8270:	9f 91       	pop	r25
    8272:	8f 91       	pop	r24
    8274:	7f 91       	pop	r23
    8276:	6f 91       	pop	r22
    8278:	5f 91       	pop	r21
    827a:	4f 91       	pop	r20
    827c:	3f 91       	pop	r19
    827e:	2f 91       	pop	r18
    8280:	0f 90       	pop	r0
    8282:	0b be       	out	0x3b, r0	; 59
    8284:	0f 90       	pop	r0
    8286:	09 be       	out	0x39, r0	; 57
    8288:	0f 90       	pop	r0
    828a:	08 be       	out	0x38, r0	; 56
    828c:	0f 90       	pop	r0
    828e:	0f be       	out	0x3f, r0	; 63
    8290:	0f 90       	pop	r0
    8292:	1f 90       	pop	r1
    8294:	18 95       	reti

00008296 <__vector_14>:

ISR( TCC0_OVF_vect)//, ISR_NAKED)
{
    8296:	1f 92       	push	r1
    8298:	0f 92       	push	r0
    829a:	0f b6       	in	r0, 0x3f	; 63
    829c:	0f 92       	push	r0
    829e:	08 b6       	in	r0, 0x38	; 56
    82a0:	0f 92       	push	r0
    82a2:	09 b6       	in	r0, 0x39	; 57
    82a4:	0f 92       	push	r0
    82a6:	0b b6       	in	r0, 0x3b	; 59
    82a8:	0f 92       	push	r0
    82aa:	11 24       	eor	r1, r1
    82ac:	2f 93       	push	r18
    82ae:	3f 93       	push	r19
    82b0:	4f 93       	push	r20
    82b2:	5f 93       	push	r21
    82b4:	6f 93       	push	r22
    82b6:	7f 93       	push	r23
    82b8:	8f 93       	push	r24
    82ba:	9f 93       	push	r25
    82bc:	af 93       	push	r26
    82be:	bf 93       	push	r27
    82c0:	ef 93       	push	r30
    82c2:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_OVERFLOW);
    82c4:	84 e0       	ldi	r24, 0x04	; 4
    82c6:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    82ca:	00 97       	sbiw	r24, 0x00	; 0
    82cc:	41 f0       	breq	.+16     	; 0x82de <__vector_14+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    82ce:	dc 01       	movw	r26, r24
    82d0:	11 96       	adiw	r26, 0x01	; 1
    82d2:	ed 91       	ld	r30, X+
    82d4:	fc 91       	ld	r31, X
    82d6:	12 97       	sbiw	r26, 0x02	; 2
    82d8:	30 97       	sbiw	r30, 0x00	; 0
    82da:	09 f0       	breq	.+2      	; 0x82de <__vector_14+0x48>
         pt_intHndl->pf_funPtr();
    82dc:	19 95       	eicall
   }

}/*End ISR( TCC0_OVF_vect)*/
    82de:	ff 91       	pop	r31
    82e0:	ef 91       	pop	r30
    82e2:	bf 91       	pop	r27
    82e4:	af 91       	pop	r26
    82e6:	9f 91       	pop	r25
    82e8:	8f 91       	pop	r24
    82ea:	7f 91       	pop	r23
    82ec:	6f 91       	pop	r22
    82ee:	5f 91       	pop	r21
    82f0:	4f 91       	pop	r20
    82f2:	3f 91       	pop	r19
    82f4:	2f 91       	pop	r18
    82f6:	0f 90       	pop	r0
    82f8:	0b be       	out	0x3b, r0	; 59
    82fa:	0f 90       	pop	r0
    82fc:	09 be       	out	0x39, r0	; 57
    82fe:	0f 90       	pop	r0
    8300:	08 be       	out	0x38, r0	; 56
    8302:	0f 90       	pop	r0
    8304:	0f be       	out	0x3f, r0	; 63
    8306:	0f 90       	pop	r0
    8308:	1f 90       	pop	r1
    830a:	18 95       	reti

0000830c <__vector_22>:

ISR( TCC1_CCA_vect)
{
    830c:	1f 92       	push	r1
    830e:	0f 92       	push	r0
    8310:	0f b6       	in	r0, 0x3f	; 63
    8312:	0f 92       	push	r0
    8314:	08 b6       	in	r0, 0x38	; 56
    8316:	0f 92       	push	r0
    8318:	09 b6       	in	r0, 0x39	; 57
    831a:	0f 92       	push	r0
    831c:	0b b6       	in	r0, 0x3b	; 59
    831e:	0f 92       	push	r0
    8320:	11 24       	eor	r1, r1
    8322:	2f 93       	push	r18
    8324:	3f 93       	push	r19
    8326:	4f 93       	push	r20
    8328:	5f 93       	push	r21
    832a:	6f 93       	push	r22
    832c:	7f 93       	push	r23
    832e:	8f 93       	push	r24
    8330:	9f 93       	push	r25
    8332:	af 93       	push	r26
    8334:	bf 93       	push	r27
    8336:	ef 93       	push	r30
    8338:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_COMP_A);
    833a:	85 e0       	ldi	r24, 0x05	; 5
    833c:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8340:	00 97       	sbiw	r24, 0x00	; 0
    8342:	41 f0       	breq	.+16     	; 0x8354 <__vector_22+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8344:	dc 01       	movw	r26, r24
    8346:	11 96       	adiw	r26, 0x01	; 1
    8348:	ed 91       	ld	r30, X+
    834a:	fc 91       	ld	r31, X
    834c:	12 97       	sbiw	r26, 0x02	; 2
    834e:	30 97       	sbiw	r30, 0x00	; 0
    8350:	09 f0       	breq	.+2      	; 0x8354 <__vector_22+0x48>
         pt_intHndl->pf_funPtr();
    8352:	19 95       	eicall
   }

}/*End ISR( TCC1_CCA_vect)*/
    8354:	ff 91       	pop	r31
    8356:	ef 91       	pop	r30
    8358:	bf 91       	pop	r27
    835a:	af 91       	pop	r26
    835c:	9f 91       	pop	r25
    835e:	8f 91       	pop	r24
    8360:	7f 91       	pop	r23
    8362:	6f 91       	pop	r22
    8364:	5f 91       	pop	r21
    8366:	4f 91       	pop	r20
    8368:	3f 91       	pop	r19
    836a:	2f 91       	pop	r18
    836c:	0f 90       	pop	r0
    836e:	0b be       	out	0x3b, r0	; 59
    8370:	0f 90       	pop	r0
    8372:	09 be       	out	0x39, r0	; 57
    8374:	0f 90       	pop	r0
    8376:	08 be       	out	0x38, r0	; 56
    8378:	0f 90       	pop	r0
    837a:	0f be       	out	0x3f, r0	; 63
    837c:	0f 90       	pop	r0
    837e:	1f 90       	pop	r1
    8380:	18 95       	reti

00008382 <__vector_23>:

ISR( TCC1_CCB_vect)
{
    8382:	1f 92       	push	r1
    8384:	0f 92       	push	r0
    8386:	0f b6       	in	r0, 0x3f	; 63
    8388:	0f 92       	push	r0
    838a:	08 b6       	in	r0, 0x38	; 56
    838c:	0f 92       	push	r0
    838e:	09 b6       	in	r0, 0x39	; 57
    8390:	0f 92       	push	r0
    8392:	0b b6       	in	r0, 0x3b	; 59
    8394:	0f 92       	push	r0
    8396:	11 24       	eor	r1, r1
    8398:	2f 93       	push	r18
    839a:	3f 93       	push	r19
    839c:	4f 93       	push	r20
    839e:	5f 93       	push	r21
    83a0:	6f 93       	push	r22
    83a2:	7f 93       	push	r23
    83a4:	8f 93       	push	r24
    83a6:	9f 93       	push	r25
    83a8:	af 93       	push	r26
    83aa:	bf 93       	push	r27
    83ac:	ef 93       	push	r30
    83ae:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_COMP_B);
    83b0:	86 e0       	ldi	r24, 0x06	; 6
    83b2:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    83b6:	00 97       	sbiw	r24, 0x00	; 0
    83b8:	41 f0       	breq	.+16     	; 0x83ca <__vector_23+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    83ba:	dc 01       	movw	r26, r24
    83bc:	11 96       	adiw	r26, 0x01	; 1
    83be:	ed 91       	ld	r30, X+
    83c0:	fc 91       	ld	r31, X
    83c2:	12 97       	sbiw	r26, 0x02	; 2
    83c4:	30 97       	sbiw	r30, 0x00	; 0
    83c6:	09 f0       	breq	.+2      	; 0x83ca <__vector_23+0x48>
         pt_intHndl->pf_funPtr();
    83c8:	19 95       	eicall
   }

}/*End ISR( TCC1_CCB_vect)*/
    83ca:	ff 91       	pop	r31
    83cc:	ef 91       	pop	r30
    83ce:	bf 91       	pop	r27
    83d0:	af 91       	pop	r26
    83d2:	9f 91       	pop	r25
    83d4:	8f 91       	pop	r24
    83d6:	7f 91       	pop	r23
    83d8:	6f 91       	pop	r22
    83da:	5f 91       	pop	r21
    83dc:	4f 91       	pop	r20
    83de:	3f 91       	pop	r19
    83e0:	2f 91       	pop	r18
    83e2:	0f 90       	pop	r0
    83e4:	0b be       	out	0x3b, r0	; 59
    83e6:	0f 90       	pop	r0
    83e8:	09 be       	out	0x39, r0	; 57
    83ea:	0f 90       	pop	r0
    83ec:	08 be       	out	0x38, r0	; 56
    83ee:	0f 90       	pop	r0
    83f0:	0f be       	out	0x3f, r0	; 63
    83f2:	0f 90       	pop	r0
    83f4:	1f 90       	pop	r1
    83f6:	18 95       	reti

000083f8 <__vector_20>:

ISR( TCC1_OVF_vect)
{
    83f8:	1f 92       	push	r1
    83fa:	0f 92       	push	r0
    83fc:	0f b6       	in	r0, 0x3f	; 63
    83fe:	0f 92       	push	r0
    8400:	08 b6       	in	r0, 0x38	; 56
    8402:	0f 92       	push	r0
    8404:	09 b6       	in	r0, 0x39	; 57
    8406:	0f 92       	push	r0
    8408:	0b b6       	in	r0, 0x3b	; 59
    840a:	0f 92       	push	r0
    840c:	11 24       	eor	r1, r1
    840e:	2f 93       	push	r18
    8410:	3f 93       	push	r19
    8412:	4f 93       	push	r20
    8414:	5f 93       	push	r21
    8416:	6f 93       	push	r22
    8418:	7f 93       	push	r23
    841a:	8f 93       	push	r24
    841c:	9f 93       	push	r25
    841e:	af 93       	push	r26
    8420:	bf 93       	push	r27
    8422:	ef 93       	push	r30
    8424:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_OVERFLOW);
    8426:	89 e0       	ldi	r24, 0x09	; 9
    8428:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    842c:	00 97       	sbiw	r24, 0x00	; 0
    842e:	41 f0       	breq	.+16     	; 0x8440 <__vector_20+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8430:	dc 01       	movw	r26, r24
    8432:	11 96       	adiw	r26, 0x01	; 1
    8434:	ed 91       	ld	r30, X+
    8436:	fc 91       	ld	r31, X
    8438:	12 97       	sbiw	r26, 0x02	; 2
    843a:	30 97       	sbiw	r30, 0x00	; 0
    843c:	09 f0       	breq	.+2      	; 0x8440 <__vector_20+0x48>
         pt_intHndl->pf_funPtr();
    843e:	19 95       	eicall
   }

}/*End ISR( TCC1_OVF_vect)*/
    8440:	ff 91       	pop	r31
    8442:	ef 91       	pop	r30
    8444:	bf 91       	pop	r27
    8446:	af 91       	pop	r26
    8448:	9f 91       	pop	r25
    844a:	8f 91       	pop	r24
    844c:	7f 91       	pop	r23
    844e:	6f 91       	pop	r22
    8450:	5f 91       	pop	r21
    8452:	4f 91       	pop	r20
    8454:	3f 91       	pop	r19
    8456:	2f 91       	pop	r18
    8458:	0f 90       	pop	r0
    845a:	0b be       	out	0x3b, r0	; 59
    845c:	0f 90       	pop	r0
    845e:	09 be       	out	0x39, r0	; 57
    8460:	0f 90       	pop	r0
    8462:	08 be       	out	0x38, r0	; 56
    8464:	0f 90       	pop	r0
    8466:	0f be       	out	0x3f, r0	; 63
    8468:	0f 90       	pop	r0
    846a:	1f 90       	pop	r1
    846c:	18 95       	reti

0000846e <__vector_79>:

ISR( TCD0_CCA_vect)
{
    846e:	1f 92       	push	r1
    8470:	0f 92       	push	r0
    8472:	0f b6       	in	r0, 0x3f	; 63
    8474:	0f 92       	push	r0
    8476:	08 b6       	in	r0, 0x38	; 56
    8478:	0f 92       	push	r0
    847a:	09 b6       	in	r0, 0x39	; 57
    847c:	0f 92       	push	r0
    847e:	0b b6       	in	r0, 0x3b	; 59
    8480:	0f 92       	push	r0
    8482:	11 24       	eor	r1, r1
    8484:	2f 93       	push	r18
    8486:	3f 93       	push	r19
    8488:	4f 93       	push	r20
    848a:	5f 93       	push	r21
    848c:	6f 93       	push	r22
    848e:	7f 93       	push	r23
    8490:	8f 93       	push	r24
    8492:	9f 93       	push	r25
    8494:	af 93       	push	r26
    8496:	bf 93       	push	r27
    8498:	ef 93       	push	r30
    849a:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_A);
    849c:	8a e0       	ldi	r24, 0x0A	; 10
    849e:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    84a2:	00 97       	sbiw	r24, 0x00	; 0
    84a4:	41 f0       	breq	.+16     	; 0x84b6 <__vector_79+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    84a6:	dc 01       	movw	r26, r24
    84a8:	11 96       	adiw	r26, 0x01	; 1
    84aa:	ed 91       	ld	r30, X+
    84ac:	fc 91       	ld	r31, X
    84ae:	12 97       	sbiw	r26, 0x02	; 2
    84b0:	30 97       	sbiw	r30, 0x00	; 0
    84b2:	09 f0       	breq	.+2      	; 0x84b6 <__vector_79+0x48>
         pt_intHndl->pf_funPtr();
    84b4:	19 95       	eicall
   }

}/*End ISR( TCD0_CCA_vect)*/
    84b6:	ff 91       	pop	r31
    84b8:	ef 91       	pop	r30
    84ba:	bf 91       	pop	r27
    84bc:	af 91       	pop	r26
    84be:	9f 91       	pop	r25
    84c0:	8f 91       	pop	r24
    84c2:	7f 91       	pop	r23
    84c4:	6f 91       	pop	r22
    84c6:	5f 91       	pop	r21
    84c8:	4f 91       	pop	r20
    84ca:	3f 91       	pop	r19
    84cc:	2f 91       	pop	r18
    84ce:	0f 90       	pop	r0
    84d0:	0b be       	out	0x3b, r0	; 59
    84d2:	0f 90       	pop	r0
    84d4:	09 be       	out	0x39, r0	; 57
    84d6:	0f 90       	pop	r0
    84d8:	08 be       	out	0x38, r0	; 56
    84da:	0f 90       	pop	r0
    84dc:	0f be       	out	0x3f, r0	; 63
    84de:	0f 90       	pop	r0
    84e0:	1f 90       	pop	r1
    84e2:	18 95       	reti

000084e4 <__vector_80>:

ISR( TCD0_CCB_vect)
{
    84e4:	1f 92       	push	r1
    84e6:	0f 92       	push	r0
    84e8:	0f b6       	in	r0, 0x3f	; 63
    84ea:	0f 92       	push	r0
    84ec:	08 b6       	in	r0, 0x38	; 56
    84ee:	0f 92       	push	r0
    84f0:	09 b6       	in	r0, 0x39	; 57
    84f2:	0f 92       	push	r0
    84f4:	0b b6       	in	r0, 0x3b	; 59
    84f6:	0f 92       	push	r0
    84f8:	11 24       	eor	r1, r1
    84fa:	2f 93       	push	r18
    84fc:	3f 93       	push	r19
    84fe:	4f 93       	push	r20
    8500:	5f 93       	push	r21
    8502:	6f 93       	push	r22
    8504:	7f 93       	push	r23
    8506:	8f 93       	push	r24
    8508:	9f 93       	push	r25
    850a:	af 93       	push	r26
    850c:	bf 93       	push	r27
    850e:	ef 93       	push	r30
    8510:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_B);
    8512:	8b e0       	ldi	r24, 0x0B	; 11
    8514:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8518:	00 97       	sbiw	r24, 0x00	; 0
    851a:	41 f0       	breq	.+16     	; 0x852c <__vector_80+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    851c:	dc 01       	movw	r26, r24
    851e:	11 96       	adiw	r26, 0x01	; 1
    8520:	ed 91       	ld	r30, X+
    8522:	fc 91       	ld	r31, X
    8524:	12 97       	sbiw	r26, 0x02	; 2
    8526:	30 97       	sbiw	r30, 0x00	; 0
    8528:	09 f0       	breq	.+2      	; 0x852c <__vector_80+0x48>
         pt_intHndl->pf_funPtr();
    852a:	19 95       	eicall
   }

}/*End ISR( TCD0_CCB_vect)*/
    852c:	ff 91       	pop	r31
    852e:	ef 91       	pop	r30
    8530:	bf 91       	pop	r27
    8532:	af 91       	pop	r26
    8534:	9f 91       	pop	r25
    8536:	8f 91       	pop	r24
    8538:	7f 91       	pop	r23
    853a:	6f 91       	pop	r22
    853c:	5f 91       	pop	r21
    853e:	4f 91       	pop	r20
    8540:	3f 91       	pop	r19
    8542:	2f 91       	pop	r18
    8544:	0f 90       	pop	r0
    8546:	0b be       	out	0x3b, r0	; 59
    8548:	0f 90       	pop	r0
    854a:	09 be       	out	0x39, r0	; 57
    854c:	0f 90       	pop	r0
    854e:	08 be       	out	0x38, r0	; 56
    8550:	0f 90       	pop	r0
    8552:	0f be       	out	0x3f, r0	; 63
    8554:	0f 90       	pop	r0
    8556:	1f 90       	pop	r1
    8558:	18 95       	reti

0000855a <__vector_81>:

ISR( TCD0_CCC_vect)
{
    855a:	1f 92       	push	r1
    855c:	0f 92       	push	r0
    855e:	0f b6       	in	r0, 0x3f	; 63
    8560:	0f 92       	push	r0
    8562:	08 b6       	in	r0, 0x38	; 56
    8564:	0f 92       	push	r0
    8566:	09 b6       	in	r0, 0x39	; 57
    8568:	0f 92       	push	r0
    856a:	0b b6       	in	r0, 0x3b	; 59
    856c:	0f 92       	push	r0
    856e:	11 24       	eor	r1, r1
    8570:	2f 93       	push	r18
    8572:	3f 93       	push	r19
    8574:	4f 93       	push	r20
    8576:	5f 93       	push	r21
    8578:	6f 93       	push	r22
    857a:	7f 93       	push	r23
    857c:	8f 93       	push	r24
    857e:	9f 93       	push	r25
    8580:	af 93       	push	r26
    8582:	bf 93       	push	r27
    8584:	ef 93       	push	r30
    8586:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_C);
    8588:	8c e0       	ldi	r24, 0x0C	; 12
    858a:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    858e:	00 97       	sbiw	r24, 0x00	; 0
    8590:	41 f0       	breq	.+16     	; 0x85a2 <__vector_81+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8592:	dc 01       	movw	r26, r24
    8594:	11 96       	adiw	r26, 0x01	; 1
    8596:	ed 91       	ld	r30, X+
    8598:	fc 91       	ld	r31, X
    859a:	12 97       	sbiw	r26, 0x02	; 2
    859c:	30 97       	sbiw	r30, 0x00	; 0
    859e:	09 f0       	breq	.+2      	; 0x85a2 <__vector_81+0x48>
         pt_intHndl->pf_funPtr();
    85a0:	19 95       	eicall
   }

}/*End ISR( TCD0_CCC_vect)*/
    85a2:	ff 91       	pop	r31
    85a4:	ef 91       	pop	r30
    85a6:	bf 91       	pop	r27
    85a8:	af 91       	pop	r26
    85aa:	9f 91       	pop	r25
    85ac:	8f 91       	pop	r24
    85ae:	7f 91       	pop	r23
    85b0:	6f 91       	pop	r22
    85b2:	5f 91       	pop	r21
    85b4:	4f 91       	pop	r20
    85b6:	3f 91       	pop	r19
    85b8:	2f 91       	pop	r18
    85ba:	0f 90       	pop	r0
    85bc:	0b be       	out	0x3b, r0	; 59
    85be:	0f 90       	pop	r0
    85c0:	09 be       	out	0x39, r0	; 57
    85c2:	0f 90       	pop	r0
    85c4:	08 be       	out	0x38, r0	; 56
    85c6:	0f 90       	pop	r0
    85c8:	0f be       	out	0x3f, r0	; 63
    85ca:	0f 90       	pop	r0
    85cc:	1f 90       	pop	r1
    85ce:	18 95       	reti

000085d0 <__vector_82>:

ISR( TCD0_CCD_vect)
{
    85d0:	1f 92       	push	r1
    85d2:	0f 92       	push	r0
    85d4:	0f b6       	in	r0, 0x3f	; 63
    85d6:	0f 92       	push	r0
    85d8:	08 b6       	in	r0, 0x38	; 56
    85da:	0f 92       	push	r0
    85dc:	09 b6       	in	r0, 0x39	; 57
    85de:	0f 92       	push	r0
    85e0:	0b b6       	in	r0, 0x3b	; 59
    85e2:	0f 92       	push	r0
    85e4:	11 24       	eor	r1, r1
    85e6:	2f 93       	push	r18
    85e8:	3f 93       	push	r19
    85ea:	4f 93       	push	r20
    85ec:	5f 93       	push	r21
    85ee:	6f 93       	push	r22
    85f0:	7f 93       	push	r23
    85f2:	8f 93       	push	r24
    85f4:	9f 93       	push	r25
    85f6:	af 93       	push	r26
    85f8:	bf 93       	push	r27
    85fa:	ef 93       	push	r30
    85fc:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_D);
    85fe:	8d e0       	ldi	r24, 0x0D	; 13
    8600:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8604:	00 97       	sbiw	r24, 0x00	; 0
    8606:	41 f0       	breq	.+16     	; 0x8618 <__vector_82+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8608:	dc 01       	movw	r26, r24
    860a:	11 96       	adiw	r26, 0x01	; 1
    860c:	ed 91       	ld	r30, X+
    860e:	fc 91       	ld	r31, X
    8610:	12 97       	sbiw	r26, 0x02	; 2
    8612:	30 97       	sbiw	r30, 0x00	; 0
    8614:	09 f0       	breq	.+2      	; 0x8618 <__vector_82+0x48>
         pt_intHndl->pf_funPtr();
    8616:	19 95       	eicall
   }

}/*End ISR( TCD0_CCD_vect)*/
    8618:	ff 91       	pop	r31
    861a:	ef 91       	pop	r30
    861c:	bf 91       	pop	r27
    861e:	af 91       	pop	r26
    8620:	9f 91       	pop	r25
    8622:	8f 91       	pop	r24
    8624:	7f 91       	pop	r23
    8626:	6f 91       	pop	r22
    8628:	5f 91       	pop	r21
    862a:	4f 91       	pop	r20
    862c:	3f 91       	pop	r19
    862e:	2f 91       	pop	r18
    8630:	0f 90       	pop	r0
    8632:	0b be       	out	0x3b, r0	; 59
    8634:	0f 90       	pop	r0
    8636:	09 be       	out	0x39, r0	; 57
    8638:	0f 90       	pop	r0
    863a:	08 be       	out	0x38, r0	; 56
    863c:	0f 90       	pop	r0
    863e:	0f be       	out	0x3f, r0	; 63
    8640:	0f 90       	pop	r0
    8642:	1f 90       	pop	r1
    8644:	18 95       	reti

00008646 <__vector_77>:

ISR( TCD0_OVF_vect)
{
    8646:	1f 92       	push	r1
    8648:	0f 92       	push	r0
    864a:	0f b6       	in	r0, 0x3f	; 63
    864c:	0f 92       	push	r0
    864e:	08 b6       	in	r0, 0x38	; 56
    8650:	0f 92       	push	r0
    8652:	09 b6       	in	r0, 0x39	; 57
    8654:	0f 92       	push	r0
    8656:	0b b6       	in	r0, 0x3b	; 59
    8658:	0f 92       	push	r0
    865a:	11 24       	eor	r1, r1
    865c:	2f 93       	push	r18
    865e:	3f 93       	push	r19
    8660:	4f 93       	push	r20
    8662:	5f 93       	push	r21
    8664:	6f 93       	push	r22
    8666:	7f 93       	push	r23
    8668:	8f 93       	push	r24
    866a:	9f 93       	push	r25
    866c:	af 93       	push	r26
    866e:	bf 93       	push	r27
    8670:	ef 93       	push	r30
    8672:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_OVERFLOW);
    8674:	8e e0       	ldi	r24, 0x0E	; 14
    8676:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    867a:	00 97       	sbiw	r24, 0x00	; 0
    867c:	41 f0       	breq	.+16     	; 0x868e <__vector_77+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    867e:	dc 01       	movw	r26, r24
    8680:	11 96       	adiw	r26, 0x01	; 1
    8682:	ed 91       	ld	r30, X+
    8684:	fc 91       	ld	r31, X
    8686:	12 97       	sbiw	r26, 0x02	; 2
    8688:	30 97       	sbiw	r30, 0x00	; 0
    868a:	09 f0       	breq	.+2      	; 0x868e <__vector_77+0x48>
         pt_intHndl->pf_funPtr();
    868c:	19 95       	eicall
   }

}/*End ISR( TCD0_OVF_vect)*/
    868e:	ff 91       	pop	r31
    8690:	ef 91       	pop	r30
    8692:	bf 91       	pop	r27
    8694:	af 91       	pop	r26
    8696:	9f 91       	pop	r25
    8698:	8f 91       	pop	r24
    869a:	7f 91       	pop	r23
    869c:	6f 91       	pop	r22
    869e:	5f 91       	pop	r21
    86a0:	4f 91       	pop	r20
    86a2:	3f 91       	pop	r19
    86a4:	2f 91       	pop	r18
    86a6:	0f 90       	pop	r0
    86a8:	0b be       	out	0x3b, r0	; 59
    86aa:	0f 90       	pop	r0
    86ac:	09 be       	out	0x39, r0	; 57
    86ae:	0f 90       	pop	r0
    86b0:	08 be       	out	0x38, r0	; 56
    86b2:	0f 90       	pop	r0
    86b4:	0f be       	out	0x3f, r0	; 63
    86b6:	0f 90       	pop	r0
    86b8:	1f 90       	pop	r1
    86ba:	18 95       	reti

000086bc <__vector_85>:

ISR( TCD1_CCA_vect)
{
    86bc:	1f 92       	push	r1
    86be:	0f 92       	push	r0
    86c0:	0f b6       	in	r0, 0x3f	; 63
    86c2:	0f 92       	push	r0
    86c4:	08 b6       	in	r0, 0x38	; 56
    86c6:	0f 92       	push	r0
    86c8:	09 b6       	in	r0, 0x39	; 57
    86ca:	0f 92       	push	r0
    86cc:	0b b6       	in	r0, 0x3b	; 59
    86ce:	0f 92       	push	r0
    86d0:	11 24       	eor	r1, r1
    86d2:	2f 93       	push	r18
    86d4:	3f 93       	push	r19
    86d6:	4f 93       	push	r20
    86d8:	5f 93       	push	r21
    86da:	6f 93       	push	r22
    86dc:	7f 93       	push	r23
    86de:	8f 93       	push	r24
    86e0:	9f 93       	push	r25
    86e2:	af 93       	push	r26
    86e4:	bf 93       	push	r27
    86e6:	ef 93       	push	r30
    86e8:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_COMP_A);
    86ea:	8f e0       	ldi	r24, 0x0F	; 15
    86ec:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    86f0:	00 97       	sbiw	r24, 0x00	; 0
    86f2:	41 f0       	breq	.+16     	; 0x8704 <__vector_85+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    86f4:	dc 01       	movw	r26, r24
    86f6:	11 96       	adiw	r26, 0x01	; 1
    86f8:	ed 91       	ld	r30, X+
    86fa:	fc 91       	ld	r31, X
    86fc:	12 97       	sbiw	r26, 0x02	; 2
    86fe:	30 97       	sbiw	r30, 0x00	; 0
    8700:	09 f0       	breq	.+2      	; 0x8704 <__vector_85+0x48>
         pt_intHndl->pf_funPtr();
    8702:	19 95       	eicall
   }

}/*End ISR( TCD1_CCA_vect)*/
    8704:	ff 91       	pop	r31
    8706:	ef 91       	pop	r30
    8708:	bf 91       	pop	r27
    870a:	af 91       	pop	r26
    870c:	9f 91       	pop	r25
    870e:	8f 91       	pop	r24
    8710:	7f 91       	pop	r23
    8712:	6f 91       	pop	r22
    8714:	5f 91       	pop	r21
    8716:	4f 91       	pop	r20
    8718:	3f 91       	pop	r19
    871a:	2f 91       	pop	r18
    871c:	0f 90       	pop	r0
    871e:	0b be       	out	0x3b, r0	; 59
    8720:	0f 90       	pop	r0
    8722:	09 be       	out	0x39, r0	; 57
    8724:	0f 90       	pop	r0
    8726:	08 be       	out	0x38, r0	; 56
    8728:	0f 90       	pop	r0
    872a:	0f be       	out	0x3f, r0	; 63
    872c:	0f 90       	pop	r0
    872e:	1f 90       	pop	r1
    8730:	18 95       	reti

00008732 <__vector_86>:

ISR( TCD1_CCB_vect)
{
    8732:	1f 92       	push	r1
    8734:	0f 92       	push	r0
    8736:	0f b6       	in	r0, 0x3f	; 63
    8738:	0f 92       	push	r0
    873a:	08 b6       	in	r0, 0x38	; 56
    873c:	0f 92       	push	r0
    873e:	09 b6       	in	r0, 0x39	; 57
    8740:	0f 92       	push	r0
    8742:	0b b6       	in	r0, 0x3b	; 59
    8744:	0f 92       	push	r0
    8746:	11 24       	eor	r1, r1
    8748:	2f 93       	push	r18
    874a:	3f 93       	push	r19
    874c:	4f 93       	push	r20
    874e:	5f 93       	push	r21
    8750:	6f 93       	push	r22
    8752:	7f 93       	push	r23
    8754:	8f 93       	push	r24
    8756:	9f 93       	push	r25
    8758:	af 93       	push	r26
    875a:	bf 93       	push	r27
    875c:	ef 93       	push	r30
    875e:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_COMP_B);
    8760:	80 e1       	ldi	r24, 0x10	; 16
    8762:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8766:	00 97       	sbiw	r24, 0x00	; 0
    8768:	41 f0       	breq	.+16     	; 0x877a <__vector_86+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    876a:	dc 01       	movw	r26, r24
    876c:	11 96       	adiw	r26, 0x01	; 1
    876e:	ed 91       	ld	r30, X+
    8770:	fc 91       	ld	r31, X
    8772:	12 97       	sbiw	r26, 0x02	; 2
    8774:	30 97       	sbiw	r30, 0x00	; 0
    8776:	09 f0       	breq	.+2      	; 0x877a <__vector_86+0x48>
         pt_intHndl->pf_funPtr();
    8778:	19 95       	eicall
   }

}/*End ISR( TCD1_CCB_vect)*/
    877a:	ff 91       	pop	r31
    877c:	ef 91       	pop	r30
    877e:	bf 91       	pop	r27
    8780:	af 91       	pop	r26
    8782:	9f 91       	pop	r25
    8784:	8f 91       	pop	r24
    8786:	7f 91       	pop	r23
    8788:	6f 91       	pop	r22
    878a:	5f 91       	pop	r21
    878c:	4f 91       	pop	r20
    878e:	3f 91       	pop	r19
    8790:	2f 91       	pop	r18
    8792:	0f 90       	pop	r0
    8794:	0b be       	out	0x3b, r0	; 59
    8796:	0f 90       	pop	r0
    8798:	09 be       	out	0x39, r0	; 57
    879a:	0f 90       	pop	r0
    879c:	08 be       	out	0x38, r0	; 56
    879e:	0f 90       	pop	r0
    87a0:	0f be       	out	0x3f, r0	; 63
    87a2:	0f 90       	pop	r0
    87a4:	1f 90       	pop	r1
    87a6:	18 95       	reti

000087a8 <__vector_83>:

ISR( TCD1_OVF_vect)
{
    87a8:	1f 92       	push	r1
    87aa:	0f 92       	push	r0
    87ac:	0f b6       	in	r0, 0x3f	; 63
    87ae:	0f 92       	push	r0
    87b0:	08 b6       	in	r0, 0x38	; 56
    87b2:	0f 92       	push	r0
    87b4:	09 b6       	in	r0, 0x39	; 57
    87b6:	0f 92       	push	r0
    87b8:	0b b6       	in	r0, 0x3b	; 59
    87ba:	0f 92       	push	r0
    87bc:	11 24       	eor	r1, r1
    87be:	2f 93       	push	r18
    87c0:	3f 93       	push	r19
    87c2:	4f 93       	push	r20
    87c4:	5f 93       	push	r21
    87c6:	6f 93       	push	r22
    87c8:	7f 93       	push	r23
    87ca:	8f 93       	push	r24
    87cc:	9f 93       	push	r25
    87ce:	af 93       	push	r26
    87d0:	bf 93       	push	r27
    87d2:	ef 93       	push	r30
    87d4:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_OVERFLOW);
    87d6:	83 e1       	ldi	r24, 0x13	; 19
    87d8:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    87dc:	00 97       	sbiw	r24, 0x00	; 0
    87de:	41 f0       	breq	.+16     	; 0x87f0 <__vector_83+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    87e0:	dc 01       	movw	r26, r24
    87e2:	11 96       	adiw	r26, 0x01	; 1
    87e4:	ed 91       	ld	r30, X+
    87e6:	fc 91       	ld	r31, X
    87e8:	12 97       	sbiw	r26, 0x02	; 2
    87ea:	30 97       	sbiw	r30, 0x00	; 0
    87ec:	09 f0       	breq	.+2      	; 0x87f0 <__vector_83+0x48>
         pt_intHndl->pf_funPtr();
    87ee:	19 95       	eicall
   }

}/*End ISR( TCD1_OVF_vect)*/
    87f0:	ff 91       	pop	r31
    87f2:	ef 91       	pop	r30
    87f4:	bf 91       	pop	r27
    87f6:	af 91       	pop	r26
    87f8:	9f 91       	pop	r25
    87fa:	8f 91       	pop	r24
    87fc:	7f 91       	pop	r23
    87fe:	6f 91       	pop	r22
    8800:	5f 91       	pop	r21
    8802:	4f 91       	pop	r20
    8804:	3f 91       	pop	r19
    8806:	2f 91       	pop	r18
    8808:	0f 90       	pop	r0
    880a:	0b be       	out	0x3b, r0	; 59
    880c:	0f 90       	pop	r0
    880e:	09 be       	out	0x39, r0	; 57
    8810:	0f 90       	pop	r0
    8812:	08 be       	out	0x38, r0	; 56
    8814:	0f 90       	pop	r0
    8816:	0f be       	out	0x3f, r0	; 63
    8818:	0f 90       	pop	r0
    881a:	1f 90       	pop	r1
    881c:	18 95       	reti

0000881e <__vector_49>:

ISR( TCE0_CCA_vect)
{
    881e:	1f 92       	push	r1
    8820:	0f 92       	push	r0
    8822:	0f b6       	in	r0, 0x3f	; 63
    8824:	0f 92       	push	r0
    8826:	08 b6       	in	r0, 0x38	; 56
    8828:	0f 92       	push	r0
    882a:	09 b6       	in	r0, 0x39	; 57
    882c:	0f 92       	push	r0
    882e:	0b b6       	in	r0, 0x3b	; 59
    8830:	0f 92       	push	r0
    8832:	11 24       	eor	r1, r1
    8834:	2f 93       	push	r18
    8836:	3f 93       	push	r19
    8838:	4f 93       	push	r20
    883a:	5f 93       	push	r21
    883c:	6f 93       	push	r22
    883e:	7f 93       	push	r23
    8840:	8f 93       	push	r24
    8842:	9f 93       	push	r25
    8844:	af 93       	push	r26
    8846:	bf 93       	push	r27
    8848:	ef 93       	push	r30
    884a:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_A);
    884c:	84 e1       	ldi	r24, 0x14	; 20
    884e:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8852:	00 97       	sbiw	r24, 0x00	; 0
    8854:	41 f0       	breq	.+16     	; 0x8866 <__vector_49+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8856:	dc 01       	movw	r26, r24
    8858:	11 96       	adiw	r26, 0x01	; 1
    885a:	ed 91       	ld	r30, X+
    885c:	fc 91       	ld	r31, X
    885e:	12 97       	sbiw	r26, 0x02	; 2
    8860:	30 97       	sbiw	r30, 0x00	; 0
    8862:	09 f0       	breq	.+2      	; 0x8866 <__vector_49+0x48>
         pt_intHndl->pf_funPtr();
    8864:	19 95       	eicall
   }

}/*End ISR( TCE0_CCA_vect)*/
    8866:	ff 91       	pop	r31
    8868:	ef 91       	pop	r30
    886a:	bf 91       	pop	r27
    886c:	af 91       	pop	r26
    886e:	9f 91       	pop	r25
    8870:	8f 91       	pop	r24
    8872:	7f 91       	pop	r23
    8874:	6f 91       	pop	r22
    8876:	5f 91       	pop	r21
    8878:	4f 91       	pop	r20
    887a:	3f 91       	pop	r19
    887c:	2f 91       	pop	r18
    887e:	0f 90       	pop	r0
    8880:	0b be       	out	0x3b, r0	; 59
    8882:	0f 90       	pop	r0
    8884:	09 be       	out	0x39, r0	; 57
    8886:	0f 90       	pop	r0
    8888:	08 be       	out	0x38, r0	; 56
    888a:	0f 90       	pop	r0
    888c:	0f be       	out	0x3f, r0	; 63
    888e:	0f 90       	pop	r0
    8890:	1f 90       	pop	r1
    8892:	18 95       	reti

00008894 <__vector_50>:

ISR( TCE0_CCB_vect)
{
    8894:	1f 92       	push	r1
    8896:	0f 92       	push	r0
    8898:	0f b6       	in	r0, 0x3f	; 63
    889a:	0f 92       	push	r0
    889c:	08 b6       	in	r0, 0x38	; 56
    889e:	0f 92       	push	r0
    88a0:	09 b6       	in	r0, 0x39	; 57
    88a2:	0f 92       	push	r0
    88a4:	0b b6       	in	r0, 0x3b	; 59
    88a6:	0f 92       	push	r0
    88a8:	11 24       	eor	r1, r1
    88aa:	2f 93       	push	r18
    88ac:	3f 93       	push	r19
    88ae:	4f 93       	push	r20
    88b0:	5f 93       	push	r21
    88b2:	6f 93       	push	r22
    88b4:	7f 93       	push	r23
    88b6:	8f 93       	push	r24
    88b8:	9f 93       	push	r25
    88ba:	af 93       	push	r26
    88bc:	bf 93       	push	r27
    88be:	ef 93       	push	r30
    88c0:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_B);
    88c2:	85 e1       	ldi	r24, 0x15	; 21
    88c4:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    88c8:	00 97       	sbiw	r24, 0x00	; 0
    88ca:	41 f0       	breq	.+16     	; 0x88dc <__vector_50+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    88cc:	dc 01       	movw	r26, r24
    88ce:	11 96       	adiw	r26, 0x01	; 1
    88d0:	ed 91       	ld	r30, X+
    88d2:	fc 91       	ld	r31, X
    88d4:	12 97       	sbiw	r26, 0x02	; 2
    88d6:	30 97       	sbiw	r30, 0x00	; 0
    88d8:	09 f0       	breq	.+2      	; 0x88dc <__vector_50+0x48>
         pt_intHndl->pf_funPtr();
    88da:	19 95       	eicall
   }

}/*End ISR( TCE0_CCB_vect)*/
    88dc:	ff 91       	pop	r31
    88de:	ef 91       	pop	r30
    88e0:	bf 91       	pop	r27
    88e2:	af 91       	pop	r26
    88e4:	9f 91       	pop	r25
    88e6:	8f 91       	pop	r24
    88e8:	7f 91       	pop	r23
    88ea:	6f 91       	pop	r22
    88ec:	5f 91       	pop	r21
    88ee:	4f 91       	pop	r20
    88f0:	3f 91       	pop	r19
    88f2:	2f 91       	pop	r18
    88f4:	0f 90       	pop	r0
    88f6:	0b be       	out	0x3b, r0	; 59
    88f8:	0f 90       	pop	r0
    88fa:	09 be       	out	0x39, r0	; 57
    88fc:	0f 90       	pop	r0
    88fe:	08 be       	out	0x38, r0	; 56
    8900:	0f 90       	pop	r0
    8902:	0f be       	out	0x3f, r0	; 63
    8904:	0f 90       	pop	r0
    8906:	1f 90       	pop	r1
    8908:	18 95       	reti

0000890a <__vector_51>:

ISR( TCE0_CCC_vect)
{
    890a:	1f 92       	push	r1
    890c:	0f 92       	push	r0
    890e:	0f b6       	in	r0, 0x3f	; 63
    8910:	0f 92       	push	r0
    8912:	08 b6       	in	r0, 0x38	; 56
    8914:	0f 92       	push	r0
    8916:	09 b6       	in	r0, 0x39	; 57
    8918:	0f 92       	push	r0
    891a:	0b b6       	in	r0, 0x3b	; 59
    891c:	0f 92       	push	r0
    891e:	11 24       	eor	r1, r1
    8920:	2f 93       	push	r18
    8922:	3f 93       	push	r19
    8924:	4f 93       	push	r20
    8926:	5f 93       	push	r21
    8928:	6f 93       	push	r22
    892a:	7f 93       	push	r23
    892c:	8f 93       	push	r24
    892e:	9f 93       	push	r25
    8930:	af 93       	push	r26
    8932:	bf 93       	push	r27
    8934:	ef 93       	push	r30
    8936:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_C);
    8938:	86 e1       	ldi	r24, 0x16	; 22
    893a:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    893e:	00 97       	sbiw	r24, 0x00	; 0
    8940:	41 f0       	breq	.+16     	; 0x8952 <__vector_51+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8942:	dc 01       	movw	r26, r24
    8944:	11 96       	adiw	r26, 0x01	; 1
    8946:	ed 91       	ld	r30, X+
    8948:	fc 91       	ld	r31, X
    894a:	12 97       	sbiw	r26, 0x02	; 2
    894c:	30 97       	sbiw	r30, 0x00	; 0
    894e:	09 f0       	breq	.+2      	; 0x8952 <__vector_51+0x48>
         pt_intHndl->pf_funPtr();
    8950:	19 95       	eicall
   }

}/*End ISR( TCE0_CCC_vect)*/
    8952:	ff 91       	pop	r31
    8954:	ef 91       	pop	r30
    8956:	bf 91       	pop	r27
    8958:	af 91       	pop	r26
    895a:	9f 91       	pop	r25
    895c:	8f 91       	pop	r24
    895e:	7f 91       	pop	r23
    8960:	6f 91       	pop	r22
    8962:	5f 91       	pop	r21
    8964:	4f 91       	pop	r20
    8966:	3f 91       	pop	r19
    8968:	2f 91       	pop	r18
    896a:	0f 90       	pop	r0
    896c:	0b be       	out	0x3b, r0	; 59
    896e:	0f 90       	pop	r0
    8970:	09 be       	out	0x39, r0	; 57
    8972:	0f 90       	pop	r0
    8974:	08 be       	out	0x38, r0	; 56
    8976:	0f 90       	pop	r0
    8978:	0f be       	out	0x3f, r0	; 63
    897a:	0f 90       	pop	r0
    897c:	1f 90       	pop	r1
    897e:	18 95       	reti

00008980 <__vector_52>:

ISR( TCE0_CCD_vect)
{
    8980:	1f 92       	push	r1
    8982:	0f 92       	push	r0
    8984:	0f b6       	in	r0, 0x3f	; 63
    8986:	0f 92       	push	r0
    8988:	08 b6       	in	r0, 0x38	; 56
    898a:	0f 92       	push	r0
    898c:	09 b6       	in	r0, 0x39	; 57
    898e:	0f 92       	push	r0
    8990:	0b b6       	in	r0, 0x3b	; 59
    8992:	0f 92       	push	r0
    8994:	11 24       	eor	r1, r1
    8996:	2f 93       	push	r18
    8998:	3f 93       	push	r19
    899a:	4f 93       	push	r20
    899c:	5f 93       	push	r21
    899e:	6f 93       	push	r22
    89a0:	7f 93       	push	r23
    89a2:	8f 93       	push	r24
    89a4:	9f 93       	push	r25
    89a6:	af 93       	push	r26
    89a8:	bf 93       	push	r27
    89aa:	ef 93       	push	r30
    89ac:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_D);
    89ae:	87 e1       	ldi	r24, 0x17	; 23
    89b0:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    89b4:	00 97       	sbiw	r24, 0x00	; 0
    89b6:	41 f0       	breq	.+16     	; 0x89c8 <__vector_52+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    89b8:	dc 01       	movw	r26, r24
    89ba:	11 96       	adiw	r26, 0x01	; 1
    89bc:	ed 91       	ld	r30, X+
    89be:	fc 91       	ld	r31, X
    89c0:	12 97       	sbiw	r26, 0x02	; 2
    89c2:	30 97       	sbiw	r30, 0x00	; 0
    89c4:	09 f0       	breq	.+2      	; 0x89c8 <__vector_52+0x48>
         pt_intHndl->pf_funPtr();
    89c6:	19 95       	eicall
   }

}/*End ISR( TCE0_CCD_vect)*/
    89c8:	ff 91       	pop	r31
    89ca:	ef 91       	pop	r30
    89cc:	bf 91       	pop	r27
    89ce:	af 91       	pop	r26
    89d0:	9f 91       	pop	r25
    89d2:	8f 91       	pop	r24
    89d4:	7f 91       	pop	r23
    89d6:	6f 91       	pop	r22
    89d8:	5f 91       	pop	r21
    89da:	4f 91       	pop	r20
    89dc:	3f 91       	pop	r19
    89de:	2f 91       	pop	r18
    89e0:	0f 90       	pop	r0
    89e2:	0b be       	out	0x3b, r0	; 59
    89e4:	0f 90       	pop	r0
    89e6:	09 be       	out	0x39, r0	; 57
    89e8:	0f 90       	pop	r0
    89ea:	08 be       	out	0x38, r0	; 56
    89ec:	0f 90       	pop	r0
    89ee:	0f be       	out	0x3f, r0	; 63
    89f0:	0f 90       	pop	r0
    89f2:	1f 90       	pop	r1
    89f4:	18 95       	reti

000089f6 <__vector_47>:

ISR( TCE0_OVF_vect)
{
    89f6:	1f 92       	push	r1
    89f8:	0f 92       	push	r0
    89fa:	0f b6       	in	r0, 0x3f	; 63
    89fc:	0f 92       	push	r0
    89fe:	08 b6       	in	r0, 0x38	; 56
    8a00:	0f 92       	push	r0
    8a02:	09 b6       	in	r0, 0x39	; 57
    8a04:	0f 92       	push	r0
    8a06:	0b b6       	in	r0, 0x3b	; 59
    8a08:	0f 92       	push	r0
    8a0a:	11 24       	eor	r1, r1
    8a0c:	2f 93       	push	r18
    8a0e:	3f 93       	push	r19
    8a10:	4f 93       	push	r20
    8a12:	5f 93       	push	r21
    8a14:	6f 93       	push	r22
    8a16:	7f 93       	push	r23
    8a18:	8f 93       	push	r24
    8a1a:	9f 93       	push	r25
    8a1c:	af 93       	push	r26
    8a1e:	bf 93       	push	r27
    8a20:	ef 93       	push	r30
    8a22:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_OVERFLOW);
    8a24:	88 e1       	ldi	r24, 0x18	; 24
    8a26:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8a2a:	00 97       	sbiw	r24, 0x00	; 0
    8a2c:	41 f0       	breq	.+16     	; 0x8a3e <__vector_47+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8a2e:	dc 01       	movw	r26, r24
    8a30:	11 96       	adiw	r26, 0x01	; 1
    8a32:	ed 91       	ld	r30, X+
    8a34:	fc 91       	ld	r31, X
    8a36:	12 97       	sbiw	r26, 0x02	; 2
    8a38:	30 97       	sbiw	r30, 0x00	; 0
    8a3a:	09 f0       	breq	.+2      	; 0x8a3e <__vector_47+0x48>
         pt_intHndl->pf_funPtr();
    8a3c:	19 95       	eicall
   }

}/*End ISR( TCE0_OVF_vect)*/
    8a3e:	ff 91       	pop	r31
    8a40:	ef 91       	pop	r30
    8a42:	bf 91       	pop	r27
    8a44:	af 91       	pop	r26
    8a46:	9f 91       	pop	r25
    8a48:	8f 91       	pop	r24
    8a4a:	7f 91       	pop	r23
    8a4c:	6f 91       	pop	r22
    8a4e:	5f 91       	pop	r21
    8a50:	4f 91       	pop	r20
    8a52:	3f 91       	pop	r19
    8a54:	2f 91       	pop	r18
    8a56:	0f 90       	pop	r0
    8a58:	0b be       	out	0x3b, r0	; 59
    8a5a:	0f 90       	pop	r0
    8a5c:	09 be       	out	0x39, r0	; 57
    8a5e:	0f 90       	pop	r0
    8a60:	08 be       	out	0x38, r0	; 56
    8a62:	0f 90       	pop	r0
    8a64:	0f be       	out	0x3f, r0	; 63
    8a66:	0f 90       	pop	r0
    8a68:	1f 90       	pop	r1
    8a6a:	18 95       	reti

00008a6c <__vector_55>:

ISR( TCE1_CCA_vect)
{
    8a6c:	1f 92       	push	r1
    8a6e:	0f 92       	push	r0
    8a70:	0f b6       	in	r0, 0x3f	; 63
    8a72:	0f 92       	push	r0
    8a74:	08 b6       	in	r0, 0x38	; 56
    8a76:	0f 92       	push	r0
    8a78:	09 b6       	in	r0, 0x39	; 57
    8a7a:	0f 92       	push	r0
    8a7c:	0b b6       	in	r0, 0x3b	; 59
    8a7e:	0f 92       	push	r0
    8a80:	11 24       	eor	r1, r1
    8a82:	2f 93       	push	r18
    8a84:	3f 93       	push	r19
    8a86:	4f 93       	push	r20
    8a88:	5f 93       	push	r21
    8a8a:	6f 93       	push	r22
    8a8c:	7f 93       	push	r23
    8a8e:	8f 93       	push	r24
    8a90:	9f 93       	push	r25
    8a92:	af 93       	push	r26
    8a94:	bf 93       	push	r27
    8a96:	ef 93       	push	r30
    8a98:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_COMP_A);
    8a9a:	89 e1       	ldi	r24, 0x19	; 25
    8a9c:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8aa0:	00 97       	sbiw	r24, 0x00	; 0
    8aa2:	41 f0       	breq	.+16     	; 0x8ab4 <__vector_55+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8aa4:	dc 01       	movw	r26, r24
    8aa6:	11 96       	adiw	r26, 0x01	; 1
    8aa8:	ed 91       	ld	r30, X+
    8aaa:	fc 91       	ld	r31, X
    8aac:	12 97       	sbiw	r26, 0x02	; 2
    8aae:	30 97       	sbiw	r30, 0x00	; 0
    8ab0:	09 f0       	breq	.+2      	; 0x8ab4 <__vector_55+0x48>
         pt_intHndl->pf_funPtr();
    8ab2:	19 95       	eicall
   }

}/*End ISR( TCE1_CCA_vect)*/
    8ab4:	ff 91       	pop	r31
    8ab6:	ef 91       	pop	r30
    8ab8:	bf 91       	pop	r27
    8aba:	af 91       	pop	r26
    8abc:	9f 91       	pop	r25
    8abe:	8f 91       	pop	r24
    8ac0:	7f 91       	pop	r23
    8ac2:	6f 91       	pop	r22
    8ac4:	5f 91       	pop	r21
    8ac6:	4f 91       	pop	r20
    8ac8:	3f 91       	pop	r19
    8aca:	2f 91       	pop	r18
    8acc:	0f 90       	pop	r0
    8ace:	0b be       	out	0x3b, r0	; 59
    8ad0:	0f 90       	pop	r0
    8ad2:	09 be       	out	0x39, r0	; 57
    8ad4:	0f 90       	pop	r0
    8ad6:	08 be       	out	0x38, r0	; 56
    8ad8:	0f 90       	pop	r0
    8ada:	0f be       	out	0x3f, r0	; 63
    8adc:	0f 90       	pop	r0
    8ade:	1f 90       	pop	r1
    8ae0:	18 95       	reti

00008ae2 <__vector_56>:

ISR( TCE1_CCB_vect)
{
    8ae2:	1f 92       	push	r1
    8ae4:	0f 92       	push	r0
    8ae6:	0f b6       	in	r0, 0x3f	; 63
    8ae8:	0f 92       	push	r0
    8aea:	08 b6       	in	r0, 0x38	; 56
    8aec:	0f 92       	push	r0
    8aee:	09 b6       	in	r0, 0x39	; 57
    8af0:	0f 92       	push	r0
    8af2:	0b b6       	in	r0, 0x3b	; 59
    8af4:	0f 92       	push	r0
    8af6:	11 24       	eor	r1, r1
    8af8:	2f 93       	push	r18
    8afa:	3f 93       	push	r19
    8afc:	4f 93       	push	r20
    8afe:	5f 93       	push	r21
    8b00:	6f 93       	push	r22
    8b02:	7f 93       	push	r23
    8b04:	8f 93       	push	r24
    8b06:	9f 93       	push	r25
    8b08:	af 93       	push	r26
    8b0a:	bf 93       	push	r27
    8b0c:	ef 93       	push	r30
    8b0e:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_COMP_B);
    8b10:	8a e1       	ldi	r24, 0x1A	; 26
    8b12:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8b16:	00 97       	sbiw	r24, 0x00	; 0
    8b18:	41 f0       	breq	.+16     	; 0x8b2a <__vector_56+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8b1a:	dc 01       	movw	r26, r24
    8b1c:	11 96       	adiw	r26, 0x01	; 1
    8b1e:	ed 91       	ld	r30, X+
    8b20:	fc 91       	ld	r31, X
    8b22:	12 97       	sbiw	r26, 0x02	; 2
    8b24:	30 97       	sbiw	r30, 0x00	; 0
    8b26:	09 f0       	breq	.+2      	; 0x8b2a <__vector_56+0x48>
         pt_intHndl->pf_funPtr();
    8b28:	19 95       	eicall
   }

}/*End ISR( TCE1_CCB_vect)*/
    8b2a:	ff 91       	pop	r31
    8b2c:	ef 91       	pop	r30
    8b2e:	bf 91       	pop	r27
    8b30:	af 91       	pop	r26
    8b32:	9f 91       	pop	r25
    8b34:	8f 91       	pop	r24
    8b36:	7f 91       	pop	r23
    8b38:	6f 91       	pop	r22
    8b3a:	5f 91       	pop	r21
    8b3c:	4f 91       	pop	r20
    8b3e:	3f 91       	pop	r19
    8b40:	2f 91       	pop	r18
    8b42:	0f 90       	pop	r0
    8b44:	0b be       	out	0x3b, r0	; 59
    8b46:	0f 90       	pop	r0
    8b48:	09 be       	out	0x39, r0	; 57
    8b4a:	0f 90       	pop	r0
    8b4c:	08 be       	out	0x38, r0	; 56
    8b4e:	0f 90       	pop	r0
    8b50:	0f be       	out	0x3f, r0	; 63
    8b52:	0f 90       	pop	r0
    8b54:	1f 90       	pop	r1
    8b56:	18 95       	reti

00008b58 <__vector_53>:

ISR( TCE1_OVF_vect)
{
    8b58:	1f 92       	push	r1
    8b5a:	0f 92       	push	r0
    8b5c:	0f b6       	in	r0, 0x3f	; 63
    8b5e:	0f 92       	push	r0
    8b60:	08 b6       	in	r0, 0x38	; 56
    8b62:	0f 92       	push	r0
    8b64:	09 b6       	in	r0, 0x39	; 57
    8b66:	0f 92       	push	r0
    8b68:	0b b6       	in	r0, 0x3b	; 59
    8b6a:	0f 92       	push	r0
    8b6c:	11 24       	eor	r1, r1
    8b6e:	2f 93       	push	r18
    8b70:	3f 93       	push	r19
    8b72:	4f 93       	push	r20
    8b74:	5f 93       	push	r21
    8b76:	6f 93       	push	r22
    8b78:	7f 93       	push	r23
    8b7a:	8f 93       	push	r24
    8b7c:	9f 93       	push	r25
    8b7e:	af 93       	push	r26
    8b80:	bf 93       	push	r27
    8b82:	ef 93       	push	r30
    8b84:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_OVERFLOW);
    8b86:	8d e1       	ldi	r24, 0x1D	; 29
    8b88:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8b8c:	00 97       	sbiw	r24, 0x00	; 0
    8b8e:	41 f0       	breq	.+16     	; 0x8ba0 <__vector_53+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8b90:	dc 01       	movw	r26, r24
    8b92:	11 96       	adiw	r26, 0x01	; 1
    8b94:	ed 91       	ld	r30, X+
    8b96:	fc 91       	ld	r31, X
    8b98:	12 97       	sbiw	r26, 0x02	; 2
    8b9a:	30 97       	sbiw	r30, 0x00	; 0
    8b9c:	09 f0       	breq	.+2      	; 0x8ba0 <__vector_53+0x48>
         pt_intHndl->pf_funPtr();
    8b9e:	19 95       	eicall
   }

}/*End ISR( TCE1_OVF_vect)*/
    8ba0:	ff 91       	pop	r31
    8ba2:	ef 91       	pop	r30
    8ba4:	bf 91       	pop	r27
    8ba6:	af 91       	pop	r26
    8ba8:	9f 91       	pop	r25
    8baa:	8f 91       	pop	r24
    8bac:	7f 91       	pop	r23
    8bae:	6f 91       	pop	r22
    8bb0:	5f 91       	pop	r21
    8bb2:	4f 91       	pop	r20
    8bb4:	3f 91       	pop	r19
    8bb6:	2f 91       	pop	r18
    8bb8:	0f 90       	pop	r0
    8bba:	0b be       	out	0x3b, r0	; 59
    8bbc:	0f 90       	pop	r0
    8bbe:	09 be       	out	0x39, r0	; 57
    8bc0:	0f 90       	pop	r0
    8bc2:	08 be       	out	0x38, r0	; 56
    8bc4:	0f 90       	pop	r0
    8bc6:	0f be       	out	0x3f, r0	; 63
    8bc8:	0f 90       	pop	r0
    8bca:	1f 90       	pop	r1
    8bcc:	18 95       	reti

00008bce <__vector_110>:

ISR( TCF0_CCA_vect)
{
    8bce:	1f 92       	push	r1
    8bd0:	0f 92       	push	r0
    8bd2:	0f b6       	in	r0, 0x3f	; 63
    8bd4:	0f 92       	push	r0
    8bd6:	08 b6       	in	r0, 0x38	; 56
    8bd8:	0f 92       	push	r0
    8bda:	09 b6       	in	r0, 0x39	; 57
    8bdc:	0f 92       	push	r0
    8bde:	0b b6       	in	r0, 0x3b	; 59
    8be0:	0f 92       	push	r0
    8be2:	11 24       	eor	r1, r1
    8be4:	2f 93       	push	r18
    8be6:	3f 93       	push	r19
    8be8:	4f 93       	push	r20
    8bea:	5f 93       	push	r21
    8bec:	6f 93       	push	r22
    8bee:	7f 93       	push	r23
    8bf0:	8f 93       	push	r24
    8bf2:	9f 93       	push	r25
    8bf4:	af 93       	push	r26
    8bf6:	bf 93       	push	r27
    8bf8:	ef 93       	push	r30
    8bfa:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_A);
    8bfc:	8e e1       	ldi	r24, 0x1E	; 30
    8bfe:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8c02:	00 97       	sbiw	r24, 0x00	; 0
    8c04:	41 f0       	breq	.+16     	; 0x8c16 <__vector_110+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8c06:	dc 01       	movw	r26, r24
    8c08:	11 96       	adiw	r26, 0x01	; 1
    8c0a:	ed 91       	ld	r30, X+
    8c0c:	fc 91       	ld	r31, X
    8c0e:	12 97       	sbiw	r26, 0x02	; 2
    8c10:	30 97       	sbiw	r30, 0x00	; 0
    8c12:	09 f0       	breq	.+2      	; 0x8c16 <__vector_110+0x48>
         pt_intHndl->pf_funPtr();
    8c14:	19 95       	eicall
   }

}/*End ISR( TCF0_CCA_vect)*/
    8c16:	ff 91       	pop	r31
    8c18:	ef 91       	pop	r30
    8c1a:	bf 91       	pop	r27
    8c1c:	af 91       	pop	r26
    8c1e:	9f 91       	pop	r25
    8c20:	8f 91       	pop	r24
    8c22:	7f 91       	pop	r23
    8c24:	6f 91       	pop	r22
    8c26:	5f 91       	pop	r21
    8c28:	4f 91       	pop	r20
    8c2a:	3f 91       	pop	r19
    8c2c:	2f 91       	pop	r18
    8c2e:	0f 90       	pop	r0
    8c30:	0b be       	out	0x3b, r0	; 59
    8c32:	0f 90       	pop	r0
    8c34:	09 be       	out	0x39, r0	; 57
    8c36:	0f 90       	pop	r0
    8c38:	08 be       	out	0x38, r0	; 56
    8c3a:	0f 90       	pop	r0
    8c3c:	0f be       	out	0x3f, r0	; 63
    8c3e:	0f 90       	pop	r0
    8c40:	1f 90       	pop	r1
    8c42:	18 95       	reti

00008c44 <__vector_111>:

ISR( TCF0_CCB_vect)
{
    8c44:	1f 92       	push	r1
    8c46:	0f 92       	push	r0
    8c48:	0f b6       	in	r0, 0x3f	; 63
    8c4a:	0f 92       	push	r0
    8c4c:	08 b6       	in	r0, 0x38	; 56
    8c4e:	0f 92       	push	r0
    8c50:	09 b6       	in	r0, 0x39	; 57
    8c52:	0f 92       	push	r0
    8c54:	0b b6       	in	r0, 0x3b	; 59
    8c56:	0f 92       	push	r0
    8c58:	11 24       	eor	r1, r1
    8c5a:	2f 93       	push	r18
    8c5c:	3f 93       	push	r19
    8c5e:	4f 93       	push	r20
    8c60:	5f 93       	push	r21
    8c62:	6f 93       	push	r22
    8c64:	7f 93       	push	r23
    8c66:	8f 93       	push	r24
    8c68:	9f 93       	push	r25
    8c6a:	af 93       	push	r26
    8c6c:	bf 93       	push	r27
    8c6e:	ef 93       	push	r30
    8c70:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_B);
    8c72:	8f e1       	ldi	r24, 0x1F	; 31
    8c74:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8c78:	00 97       	sbiw	r24, 0x00	; 0
    8c7a:	41 f0       	breq	.+16     	; 0x8c8c <__vector_111+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8c7c:	dc 01       	movw	r26, r24
    8c7e:	11 96       	adiw	r26, 0x01	; 1
    8c80:	ed 91       	ld	r30, X+
    8c82:	fc 91       	ld	r31, X
    8c84:	12 97       	sbiw	r26, 0x02	; 2
    8c86:	30 97       	sbiw	r30, 0x00	; 0
    8c88:	09 f0       	breq	.+2      	; 0x8c8c <__vector_111+0x48>
         pt_intHndl->pf_funPtr();
    8c8a:	19 95       	eicall
   }

}/*End ISR( TCF0_CCB_vect)*/
    8c8c:	ff 91       	pop	r31
    8c8e:	ef 91       	pop	r30
    8c90:	bf 91       	pop	r27
    8c92:	af 91       	pop	r26
    8c94:	9f 91       	pop	r25
    8c96:	8f 91       	pop	r24
    8c98:	7f 91       	pop	r23
    8c9a:	6f 91       	pop	r22
    8c9c:	5f 91       	pop	r21
    8c9e:	4f 91       	pop	r20
    8ca0:	3f 91       	pop	r19
    8ca2:	2f 91       	pop	r18
    8ca4:	0f 90       	pop	r0
    8ca6:	0b be       	out	0x3b, r0	; 59
    8ca8:	0f 90       	pop	r0
    8caa:	09 be       	out	0x39, r0	; 57
    8cac:	0f 90       	pop	r0
    8cae:	08 be       	out	0x38, r0	; 56
    8cb0:	0f 90       	pop	r0
    8cb2:	0f be       	out	0x3f, r0	; 63
    8cb4:	0f 90       	pop	r0
    8cb6:	1f 90       	pop	r1
    8cb8:	18 95       	reti

00008cba <__vector_112>:

ISR( TCF0_CCC_vect)
{
    8cba:	1f 92       	push	r1
    8cbc:	0f 92       	push	r0
    8cbe:	0f b6       	in	r0, 0x3f	; 63
    8cc0:	0f 92       	push	r0
    8cc2:	08 b6       	in	r0, 0x38	; 56
    8cc4:	0f 92       	push	r0
    8cc6:	09 b6       	in	r0, 0x39	; 57
    8cc8:	0f 92       	push	r0
    8cca:	0b b6       	in	r0, 0x3b	; 59
    8ccc:	0f 92       	push	r0
    8cce:	11 24       	eor	r1, r1
    8cd0:	2f 93       	push	r18
    8cd2:	3f 93       	push	r19
    8cd4:	4f 93       	push	r20
    8cd6:	5f 93       	push	r21
    8cd8:	6f 93       	push	r22
    8cda:	7f 93       	push	r23
    8cdc:	8f 93       	push	r24
    8cde:	9f 93       	push	r25
    8ce0:	af 93       	push	r26
    8ce2:	bf 93       	push	r27
    8ce4:	ef 93       	push	r30
    8ce6:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_C);
    8ce8:	80 e2       	ldi	r24, 0x20	; 32
    8cea:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8cee:	00 97       	sbiw	r24, 0x00	; 0
    8cf0:	41 f0       	breq	.+16     	; 0x8d02 <__vector_112+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8cf2:	dc 01       	movw	r26, r24
    8cf4:	11 96       	adiw	r26, 0x01	; 1
    8cf6:	ed 91       	ld	r30, X+
    8cf8:	fc 91       	ld	r31, X
    8cfa:	12 97       	sbiw	r26, 0x02	; 2
    8cfc:	30 97       	sbiw	r30, 0x00	; 0
    8cfe:	09 f0       	breq	.+2      	; 0x8d02 <__vector_112+0x48>
         pt_intHndl->pf_funPtr();
    8d00:	19 95       	eicall
   }

}/*End ISR( TCF0_CCC_vect)*/
    8d02:	ff 91       	pop	r31
    8d04:	ef 91       	pop	r30
    8d06:	bf 91       	pop	r27
    8d08:	af 91       	pop	r26
    8d0a:	9f 91       	pop	r25
    8d0c:	8f 91       	pop	r24
    8d0e:	7f 91       	pop	r23
    8d10:	6f 91       	pop	r22
    8d12:	5f 91       	pop	r21
    8d14:	4f 91       	pop	r20
    8d16:	3f 91       	pop	r19
    8d18:	2f 91       	pop	r18
    8d1a:	0f 90       	pop	r0
    8d1c:	0b be       	out	0x3b, r0	; 59
    8d1e:	0f 90       	pop	r0
    8d20:	09 be       	out	0x39, r0	; 57
    8d22:	0f 90       	pop	r0
    8d24:	08 be       	out	0x38, r0	; 56
    8d26:	0f 90       	pop	r0
    8d28:	0f be       	out	0x3f, r0	; 63
    8d2a:	0f 90       	pop	r0
    8d2c:	1f 90       	pop	r1
    8d2e:	18 95       	reti

00008d30 <__vector_113>:

ISR( TCF0_CCD_vect)
{
    8d30:	1f 92       	push	r1
    8d32:	0f 92       	push	r0
    8d34:	0f b6       	in	r0, 0x3f	; 63
    8d36:	0f 92       	push	r0
    8d38:	08 b6       	in	r0, 0x38	; 56
    8d3a:	0f 92       	push	r0
    8d3c:	09 b6       	in	r0, 0x39	; 57
    8d3e:	0f 92       	push	r0
    8d40:	0b b6       	in	r0, 0x3b	; 59
    8d42:	0f 92       	push	r0
    8d44:	11 24       	eor	r1, r1
    8d46:	2f 93       	push	r18
    8d48:	3f 93       	push	r19
    8d4a:	4f 93       	push	r20
    8d4c:	5f 93       	push	r21
    8d4e:	6f 93       	push	r22
    8d50:	7f 93       	push	r23
    8d52:	8f 93       	push	r24
    8d54:	9f 93       	push	r25
    8d56:	af 93       	push	r26
    8d58:	bf 93       	push	r27
    8d5a:	ef 93       	push	r30
    8d5c:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_D);
    8d5e:	81 e2       	ldi	r24, 0x21	; 33
    8d60:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8d64:	00 97       	sbiw	r24, 0x00	; 0
    8d66:	41 f0       	breq	.+16     	; 0x8d78 <__vector_113+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8d68:	dc 01       	movw	r26, r24
    8d6a:	11 96       	adiw	r26, 0x01	; 1
    8d6c:	ed 91       	ld	r30, X+
    8d6e:	fc 91       	ld	r31, X
    8d70:	12 97       	sbiw	r26, 0x02	; 2
    8d72:	30 97       	sbiw	r30, 0x00	; 0
    8d74:	09 f0       	breq	.+2      	; 0x8d78 <__vector_113+0x48>
         pt_intHndl->pf_funPtr();
    8d76:	19 95       	eicall
   }

}/*End ISR( TCF0_CCD_vect)*/
    8d78:	ff 91       	pop	r31
    8d7a:	ef 91       	pop	r30
    8d7c:	bf 91       	pop	r27
    8d7e:	af 91       	pop	r26
    8d80:	9f 91       	pop	r25
    8d82:	8f 91       	pop	r24
    8d84:	7f 91       	pop	r23
    8d86:	6f 91       	pop	r22
    8d88:	5f 91       	pop	r21
    8d8a:	4f 91       	pop	r20
    8d8c:	3f 91       	pop	r19
    8d8e:	2f 91       	pop	r18
    8d90:	0f 90       	pop	r0
    8d92:	0b be       	out	0x3b, r0	; 59
    8d94:	0f 90       	pop	r0
    8d96:	09 be       	out	0x39, r0	; 57
    8d98:	0f 90       	pop	r0
    8d9a:	08 be       	out	0x38, r0	; 56
    8d9c:	0f 90       	pop	r0
    8d9e:	0f be       	out	0x3f, r0	; 63
    8da0:	0f 90       	pop	r0
    8da2:	1f 90       	pop	r1
    8da4:	18 95       	reti

00008da6 <__vector_108>:

ISR( TCF0_OVF_vect)
{
    8da6:	1f 92       	push	r1
    8da8:	0f 92       	push	r0
    8daa:	0f b6       	in	r0, 0x3f	; 63
    8dac:	0f 92       	push	r0
    8dae:	08 b6       	in	r0, 0x38	; 56
    8db0:	0f 92       	push	r0
    8db2:	09 b6       	in	r0, 0x39	; 57
    8db4:	0f 92       	push	r0
    8db6:	0b b6       	in	r0, 0x3b	; 59
    8db8:	0f 92       	push	r0
    8dba:	11 24       	eor	r1, r1
    8dbc:	2f 93       	push	r18
    8dbe:	3f 93       	push	r19
    8dc0:	4f 93       	push	r20
    8dc2:	5f 93       	push	r21
    8dc4:	6f 93       	push	r22
    8dc6:	7f 93       	push	r23
    8dc8:	8f 93       	push	r24
    8dca:	9f 93       	push	r25
    8dcc:	af 93       	push	r26
    8dce:	bf 93       	push	r27
    8dd0:	ef 93       	push	r30
    8dd2:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_OVERFLOW);
    8dd4:	82 e2       	ldi	r24, 0x22	; 34
    8dd6:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8dda:	00 97       	sbiw	r24, 0x00	; 0
    8ddc:	41 f0       	breq	.+16     	; 0x8dee <__vector_108+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8dde:	dc 01       	movw	r26, r24
    8de0:	11 96       	adiw	r26, 0x01	; 1
    8de2:	ed 91       	ld	r30, X+
    8de4:	fc 91       	ld	r31, X
    8de6:	12 97       	sbiw	r26, 0x02	; 2
    8de8:	30 97       	sbiw	r30, 0x00	; 0
    8dea:	09 f0       	breq	.+2      	; 0x8dee <__vector_108+0x48>
         pt_intHndl->pf_funPtr();
    8dec:	19 95       	eicall
   }

}/*End ISR( TCF0_OVF_vect)*/
    8dee:	ff 91       	pop	r31
    8df0:	ef 91       	pop	r30
    8df2:	bf 91       	pop	r27
    8df4:	af 91       	pop	r26
    8df6:	9f 91       	pop	r25
    8df8:	8f 91       	pop	r24
    8dfa:	7f 91       	pop	r23
    8dfc:	6f 91       	pop	r22
    8dfe:	5f 91       	pop	r21
    8e00:	4f 91       	pop	r20
    8e02:	3f 91       	pop	r19
    8e04:	2f 91       	pop	r18
    8e06:	0f 90       	pop	r0
    8e08:	0b be       	out	0x3b, r0	; 59
    8e0a:	0f 90       	pop	r0
    8e0c:	09 be       	out	0x39, r0	; 57
    8e0e:	0f 90       	pop	r0
    8e10:	08 be       	out	0x38, r0	; 56
    8e12:	0f 90       	pop	r0
    8e14:	0f be       	out	0x3f, r0	; 63
    8e16:	0f 90       	pop	r0
    8e18:	1f 90       	pop	r1
    8e1a:	18 95       	reti

00008e1c <__vector_116>:

ISR( TCF1_CCA_vect)
{
    8e1c:	1f 92       	push	r1
    8e1e:	0f 92       	push	r0
    8e20:	0f b6       	in	r0, 0x3f	; 63
    8e22:	0f 92       	push	r0
    8e24:	08 b6       	in	r0, 0x38	; 56
    8e26:	0f 92       	push	r0
    8e28:	09 b6       	in	r0, 0x39	; 57
    8e2a:	0f 92       	push	r0
    8e2c:	0b b6       	in	r0, 0x3b	; 59
    8e2e:	0f 92       	push	r0
    8e30:	11 24       	eor	r1, r1
    8e32:	2f 93       	push	r18
    8e34:	3f 93       	push	r19
    8e36:	4f 93       	push	r20
    8e38:	5f 93       	push	r21
    8e3a:	6f 93       	push	r22
    8e3c:	7f 93       	push	r23
    8e3e:	8f 93       	push	r24
    8e40:	9f 93       	push	r25
    8e42:	af 93       	push	r26
    8e44:	bf 93       	push	r27
    8e46:	ef 93       	push	r30
    8e48:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_COMP_A);
    8e4a:	83 e2       	ldi	r24, 0x23	; 35
    8e4c:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8e50:	00 97       	sbiw	r24, 0x00	; 0
    8e52:	41 f0       	breq	.+16     	; 0x8e64 <__vector_116+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8e54:	dc 01       	movw	r26, r24
    8e56:	11 96       	adiw	r26, 0x01	; 1
    8e58:	ed 91       	ld	r30, X+
    8e5a:	fc 91       	ld	r31, X
    8e5c:	12 97       	sbiw	r26, 0x02	; 2
    8e5e:	30 97       	sbiw	r30, 0x00	; 0
    8e60:	09 f0       	breq	.+2      	; 0x8e64 <__vector_116+0x48>
         pt_intHndl->pf_funPtr();
    8e62:	19 95       	eicall
   }

}/*End ISR( TCF1_CCA_vect)*/
    8e64:	ff 91       	pop	r31
    8e66:	ef 91       	pop	r30
    8e68:	bf 91       	pop	r27
    8e6a:	af 91       	pop	r26
    8e6c:	9f 91       	pop	r25
    8e6e:	8f 91       	pop	r24
    8e70:	7f 91       	pop	r23
    8e72:	6f 91       	pop	r22
    8e74:	5f 91       	pop	r21
    8e76:	4f 91       	pop	r20
    8e78:	3f 91       	pop	r19
    8e7a:	2f 91       	pop	r18
    8e7c:	0f 90       	pop	r0
    8e7e:	0b be       	out	0x3b, r0	; 59
    8e80:	0f 90       	pop	r0
    8e82:	09 be       	out	0x39, r0	; 57
    8e84:	0f 90       	pop	r0
    8e86:	08 be       	out	0x38, r0	; 56
    8e88:	0f 90       	pop	r0
    8e8a:	0f be       	out	0x3f, r0	; 63
    8e8c:	0f 90       	pop	r0
    8e8e:	1f 90       	pop	r1
    8e90:	18 95       	reti

00008e92 <__vector_117>:

ISR( TCF1_CCB_vect)
{
    8e92:	1f 92       	push	r1
    8e94:	0f 92       	push	r0
    8e96:	0f b6       	in	r0, 0x3f	; 63
    8e98:	0f 92       	push	r0
    8e9a:	08 b6       	in	r0, 0x38	; 56
    8e9c:	0f 92       	push	r0
    8e9e:	09 b6       	in	r0, 0x39	; 57
    8ea0:	0f 92       	push	r0
    8ea2:	0b b6       	in	r0, 0x3b	; 59
    8ea4:	0f 92       	push	r0
    8ea6:	11 24       	eor	r1, r1
    8ea8:	2f 93       	push	r18
    8eaa:	3f 93       	push	r19
    8eac:	4f 93       	push	r20
    8eae:	5f 93       	push	r21
    8eb0:	6f 93       	push	r22
    8eb2:	7f 93       	push	r23
    8eb4:	8f 93       	push	r24
    8eb6:	9f 93       	push	r25
    8eb8:	af 93       	push	r26
    8eba:	bf 93       	push	r27
    8ebc:	ef 93       	push	r30
    8ebe:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_COMP_B);
    8ec0:	84 e2       	ldi	r24, 0x24	; 36
    8ec2:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8ec6:	00 97       	sbiw	r24, 0x00	; 0
    8ec8:	41 f0       	breq	.+16     	; 0x8eda <__vector_117+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8eca:	dc 01       	movw	r26, r24
    8ecc:	11 96       	adiw	r26, 0x01	; 1
    8ece:	ed 91       	ld	r30, X+
    8ed0:	fc 91       	ld	r31, X
    8ed2:	12 97       	sbiw	r26, 0x02	; 2
    8ed4:	30 97       	sbiw	r30, 0x00	; 0
    8ed6:	09 f0       	breq	.+2      	; 0x8eda <__vector_117+0x48>
         pt_intHndl->pf_funPtr();
    8ed8:	19 95       	eicall
   }

}/*End ISR( TCF1_CCB_vect)*/
    8eda:	ff 91       	pop	r31
    8edc:	ef 91       	pop	r30
    8ede:	bf 91       	pop	r27
    8ee0:	af 91       	pop	r26
    8ee2:	9f 91       	pop	r25
    8ee4:	8f 91       	pop	r24
    8ee6:	7f 91       	pop	r23
    8ee8:	6f 91       	pop	r22
    8eea:	5f 91       	pop	r21
    8eec:	4f 91       	pop	r20
    8eee:	3f 91       	pop	r19
    8ef0:	2f 91       	pop	r18
    8ef2:	0f 90       	pop	r0
    8ef4:	0b be       	out	0x3b, r0	; 59
    8ef6:	0f 90       	pop	r0
    8ef8:	09 be       	out	0x39, r0	; 57
    8efa:	0f 90       	pop	r0
    8efc:	08 be       	out	0x38, r0	; 56
    8efe:	0f 90       	pop	r0
    8f00:	0f be       	out	0x3f, r0	; 63
    8f02:	0f 90       	pop	r0
    8f04:	1f 90       	pop	r1
    8f06:	18 95       	reti

00008f08 <__vector_114>:

ISR( TCF1_OVF_vect)
{
    8f08:	1f 92       	push	r1
    8f0a:	0f 92       	push	r0
    8f0c:	0f b6       	in	r0, 0x3f	; 63
    8f0e:	0f 92       	push	r0
    8f10:	08 b6       	in	r0, 0x38	; 56
    8f12:	0f 92       	push	r0
    8f14:	09 b6       	in	r0, 0x39	; 57
    8f16:	0f 92       	push	r0
    8f18:	0b b6       	in	r0, 0x3b	; 59
    8f1a:	0f 92       	push	r0
    8f1c:	11 24       	eor	r1, r1
    8f1e:	2f 93       	push	r18
    8f20:	3f 93       	push	r19
    8f22:	4f 93       	push	r20
    8f24:	5f 93       	push	r21
    8f26:	6f 93       	push	r22
    8f28:	7f 93       	push	r23
    8f2a:	8f 93       	push	r24
    8f2c:	9f 93       	push	r25
    8f2e:	af 93       	push	r26
    8f30:	bf 93       	push	r27
    8f32:	ef 93       	push	r30
    8f34:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_OVERFLOW);
    8f36:	87 e2       	ldi	r24, 0x27	; 39
    8f38:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

   if( pt_intHndl != NULL)
    8f3c:	00 97       	sbiw	r24, 0x00	; 0
    8f3e:	41 f0       	breq	.+16     	; 0x8f50 <__vector_114+0x48>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8f40:	dc 01       	movw	r26, r24
    8f42:	11 96       	adiw	r26, 0x01	; 1
    8f44:	ed 91       	ld	r30, X+
    8f46:	fc 91       	ld	r31, X
    8f48:	12 97       	sbiw	r26, 0x02	; 2
    8f4a:	30 97       	sbiw	r30, 0x00	; 0
    8f4c:	09 f0       	breq	.+2      	; 0x8f50 <__vector_114+0x48>
         pt_intHndl->pf_funPtr();
    8f4e:	19 95       	eicall
   }

}/*End ISR( TCF1_OVF_vect)*/
    8f50:	ff 91       	pop	r31
    8f52:	ef 91       	pop	r30
    8f54:	bf 91       	pop	r27
    8f56:	af 91       	pop	r26
    8f58:	9f 91       	pop	r25
    8f5a:	8f 91       	pop	r24
    8f5c:	7f 91       	pop	r23
    8f5e:	6f 91       	pop	r22
    8f60:	5f 91       	pop	r21
    8f62:	4f 91       	pop	r20
    8f64:	3f 91       	pop	r19
    8f66:	2f 91       	pop	r18
    8f68:	0f 90       	pop	r0
    8f6a:	0b be       	out	0x3b, r0	; 59
    8f6c:	0f 90       	pop	r0
    8f6e:	09 be       	out	0x39, r0	; 57
    8f70:	0f 90       	pop	r0
    8f72:	08 be       	out	0x38, r0	; 56
    8f74:	0f 90       	pop	r0
    8f76:	0f be       	out	0x3f, r0	; 63
    8f78:	0f 90       	pop	r0
    8f7a:	1f 90       	pop	r1
    8f7c:	18 95       	reti

00008f7e <hal_requestTimerInterrupt>:
}/*End createTimerHandle*/

t_timerError hal_requestTimerInterrupt( t_TIMERHNDL t_handle,
                                        t_compType t_type,
                                        void (*pf_funPtr)( void))
{
    8f7e:	cf 92       	push	r12
    8f80:	df 92       	push	r13
    8f82:	ef 92       	push	r14
    8f84:	ff 92       	push	r15
    8f86:	0f 93       	push	r16
    8f88:	1f 93       	push	r17
    8f8a:	cf 93       	push	r28
    8f8c:	df 93       	push	r29
    8f8e:	cd b7       	in	r28, 0x3d	; 61
    8f90:	de b7       	in	r29, 0x3e	; 62
    8f92:	27 97       	sbiw	r28, 0x07	; 7
    8f94:	cd bf       	out	0x3d, r28	; 61
    8f96:	de bf       	out	0x3e, r29	; 62
    8f98:	8e 83       	std	Y+6, r24	; 0x06
    8f9a:	9f 83       	std	Y+7, r25	; 0x07
    8f9c:	06 2f       	mov	r16, r22
    8f9e:	6a 01       	movw	r12, r20

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    8fa0:	8f b7       	in	r24, 0x3f	; 63
    8fa2:	89 83       	std	Y+1, r24	; 0x01
    8fa4:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    8fa6:	ee 81       	ldd	r30, Y+6	; 0x06
    8fa8:	ff 81       	ldd	r31, Y+7	; 0x07
    8faa:	80 91 f4 20 	lds	r24, 0x20F4
    8fae:	90 91 f5 20 	lds	r25, 0x20F5
    8fb2:	24 81       	ldd	r18, Z+4	; 0x04
    8fb4:	35 81       	ldd	r19, Z+5	; 0x05
    8fb6:	28 17       	cp	r18, r24
    8fb8:	39 07       	cpc	r19, r25
    8fba:	21 f0       	breq	.+8      	; 0x8fc4 <hal_requestTimerInterrupt+0x46>
   {
      HAL_END_CRITICAL();//Enable interrupts
    8fbc:	89 81       	ldd	r24, Y+1	; 0x01
    8fbe:	8f bf       	out	0x3f, r24	; 63
      return TIMER_INVALID_HANDLE;
    8fc0:	8b ef       	ldi	r24, 0xFB	; 251
    8fc2:	a5 c0       	rjmp	.+330    	; 0x910e <hal_requestTimerInterrupt+0x190>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    8fc4:	ee 81       	ldd	r30, Y+6	; 0x06
    8fc6:	ff 81       	ldd	r31, Y+7	; 0x07

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8fc8:	e0 80       	ld	r14, Z
    8fca:	f1 80       	ldd	r15, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Use the timer module id and interrrupt type as an index into the list
       * of possible interrupts.
       *---------------------------------------------------------------------*/
      t_intId = (t_timerIntId)pt_timerHndl->t_id + (t_timerIntId)t_type;
    8fcc:	d7 01       	movw	r26, r14
    8fce:	1c 91       	ld	r17, X
    8fd0:	16 0f       	add	r17, r22

      if( (t_intId == TIMER_2_NA_C) || (t_intId == TIMER_2_NA_D) ||
    8fd2:	81 2f       	mov	r24, r17
    8fd4:	87 50       	subi	r24, 0x07	; 7
    8fd6:	82 30       	cpi	r24, 0x02	; 2
    8fd8:	70 f0       	brcs	.+28     	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
    8fda:	11 31       	cpi	r17, 0x11	; 17
    8fdc:	61 f0       	breq	.+24     	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
          (t_intId == TIMER_4_NA_C) || (t_intId == TIMER_4_NA_D) ||
    8fde:	12 31       	cpi	r17, 0x12	; 18
    8fe0:	51 f0       	breq	.+20     	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
    8fe2:	1b 31       	cpi	r17, 0x1B	; 27
    8fe4:	41 f0       	breq	.+16     	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
          (t_intId == TIMER_6_NA_C) || (t_intId == TIMER_6_NA_D) ||
    8fe6:	1c 31       	cpi	r17, 0x1C	; 28
    8fe8:	31 f0       	breq	.+12     	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
    8fea:	15 32       	cpi	r17, 0x25	; 37
    8fec:	21 f0       	breq	.+8      	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
          (t_intId == TIMER_8_NA_C) || (t_intId == TIMER_8_NA_D) ||
    8fee:	16 32       	cpi	r17, 0x26	; 38
    8ff0:	11 f0       	breq	.+4      	; 0x8ff6 <hal_requestTimerInterrupt+0x78>
          (t_intId < TIMER_1_COMP_A) || (t_intId > TIMER_8_OVERFLOW))
    8ff2:	18 32       	cpi	r17, 0x28	; 40
    8ff4:	20 f0       	brcs	.+8      	; 0x8ffe <hal_requestTimerInterrupt+0x80>
      {
         HAL_END_CRITICAL();//Enable interrupts
    8ff6:	89 81       	ldd	r24, Y+1	; 0x01
    8ff8:	8f bf       	out	0x3f, r24	; 63
         return TIMER_INVALID_COMP;
    8ffa:	8a ef       	ldi	r24, 0xFA	; 250
    8ffc:	88 c0       	rjmp	.+272    	; 0x910e <hal_requestTimerInterrupt+0x190>
      }

      pt_timerIntHndl = findTimerIntElement( t_intId);
    8ffe:	81 2f       	mov	r24, r17
    9000:	0e 94 25 40 	call	0x804a	; 0x804a <findTimerIntElement>

      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_timerIntHndl == NULL) /*No*/
    9004:	00 97       	sbiw	r24, 0x00	; 0
    9006:	09 f0       	breq	.+2      	; 0x900a <hal_requestTimerInterrupt+0x8c>
    9008:	7b c0       	rjmp	.+246    	; 0x9100 <hal_requestTimerInterrupt+0x182>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the Timer interrupt information 
    * will be stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerIntHndl));
    900a:	83 e0       	ldi	r24, 0x03	; 3
    900c:	90 e0       	ldi	r25, 0x00	; 0
    900e:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    9012:	8a 83       	std	Y+2, r24	; 0x02
    9014:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    9016:	8a 81       	ldd	r24, Y+2	; 0x02
    9018:	9b 81       	ldd	r25, Y+3	; 0x03
    901a:	97 fd       	sbrc	r25, 7
    901c:	0c c0       	rjmp	.+24     	; 0x9036 <hal_requestTimerInterrupt+0xb8>
   }

   /*------------------------------------------------------------------------*
    * Add the Timer interrupt link onto the list open Timer interrupts.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_timerIntHndlList,
    901e:	80 91 e6 20 	lds	r24, 0x20E6
    9022:	90 91 e7 20 	lds	r25, 0x20E7
    9026:	6a 81       	ldd	r22, Y+2	; 0x02
    9028:	7b 81       	ldd	r23, Y+3	; 0x03
    902a:	41 e0       	ldi	r20, 0x01	; 1
    902c:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    9030:	8a 81       	ldd	r24, Y+2	; 0x02
    9032:	9b 81       	ldd	r25, Y+3	; 0x03
    9034:	02 c0       	rjmp	.+4      	; 0x903a <hal_requestTimerInterrupt+0xbc>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerIntHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)TIMER_OUT_OF_HEAP;
    9036:	8f ef       	ldi	r24, 0xFF	; 255
    9038:	9f ef       	ldi	r25, 0xFF	; 255
      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_timerIntHndl == NULL) /*No*/
      {
         t_linkHndl = createIntHandle();
    903a:	8c 83       	std	Y+4, r24	; 0x04
    903c:	9d 83       	std	Y+5, r25	; 0x05
         if( t_linkHndl < 0)
    903e:	8c 81       	ldd	r24, Y+4	; 0x04
    9040:	9d 81       	ldd	r25, Y+5	; 0x05
    9042:	97 ff       	sbrs	r25, 7
    9044:	04 c0       	rjmp	.+8      	; 0x904e <hal_requestTimerInterrupt+0xd0>
         {
            HAL_END_CRITICAL();//Enable interrupts
    9046:	89 81       	ldd	r24, Y+1	; 0x01
    9048:	8f bf       	out	0x3f, r24	; 63
            return TIMER_OUT_OF_HEAP;
    904a:	8f ef       	ldi	r24, 0xFF	; 255
    904c:	60 c0       	rjmp	.+192    	; 0x910e <hal_requestTimerInterrupt+0x190>
         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the Timer 
          * interrupt information is being stored.
          *------------------------------------------------------------------*/
         pt_timerIntHndl = (t_timerIntHndl *)
         UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);
    904e:	ec 81       	ldd	r30, Y+4	; 0x04
    9050:	fd 81       	ldd	r31, Y+5	; 0x05

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the Timer 
          * interrupt information is being stored.
          *------------------------------------------------------------------*/
         pt_timerIntHndl = (t_timerIntHndl *)
    9052:	01 90       	ld	r0, Z+
    9054:	f0 81       	ld	r31, Z
    9056:	e0 2d       	mov	r30, r0
         UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

         pt_timerIntHndl->t_id = t_intId;
    9058:	10 83       	st	Z, r17
         pt_timerIntHndl->pf_funPtr = pf_funPtr;
    905a:	c1 82       	std	Z+1, r12	; 0x01
    905c:	d2 82       	std	Z+2, r13	; 0x02

         /*------------------------------------------------------------------*
          * Keep track of how many interrupts this handle has open.
          *------------------------------------------------------------------*/
         pt_timerHndl->c_intCount++;
    905e:	f7 01       	movw	r30, r14
    9060:	82 81       	ldd	r24, Z+2	; 0x02
    9062:	8f 5f       	subi	r24, 0xFF	; 255
    9064:	82 83       	std	Z+2, r24	; 0x02

         if( t_type == OVERFLOW)
    9066:	04 30       	cpi	r16, 0x04	; 4
    9068:	71 f4       	brne	.+28     	; 0x9086 <hal_requestTimerInterrupt+0x108>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    906a:	04 80       	ldd	r0, Z+4	; 0x04
    906c:	f5 81       	ldd	r31, Z+5	; 0x05
    906e:	e0 2d       	mov	r30, r0
    9070:	30 97       	sbiw	r30, 0x00	; 0
    9072:	29 f4       	brne	.+10     	; 0x907e <hal_requestTimerInterrupt+0x100>
               pt_timerHndl->pt_timer0->INTCTRLA |= TC_OVFINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLA |= TC_OVFINTLVL_HI_gc;
    9074:	d7 01       	movw	r26, r14
    9076:	16 96       	adiw	r26, 0x06	; 6
    9078:	ed 91       	ld	r30, X+
    907a:	fc 91       	ld	r31, X
    907c:	17 97       	sbiw	r26, 0x07	; 7
    907e:	86 81       	ldd	r24, Z+6	; 0x06
    9080:	83 60       	ori	r24, 0x03	; 3
    9082:	86 83       	std	Z+6, r24	; 0x06
    9084:	41 c0       	rjmp	.+130    	; 0x9108 <hal_requestTimerInterrupt+0x18a>

         }/*End if( t_type == OVERFLOW)*/
         else if( t_type == COMPAREA)
    9086:	00 23       	and	r16, r16
    9088:	69 f4       	brne	.+26     	; 0x90a4 <hal_requestTimerInterrupt+0x126>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    908a:	04 80       	ldd	r0, Z+4	; 0x04
    908c:	f5 81       	ldd	r31, Z+5	; 0x05
    908e:	e0 2d       	mov	r30, r0
    9090:	30 97       	sbiw	r30, 0x00	; 0
    9092:	29 f4       	brne	.+10     	; 0x909e <hal_requestTimerInterrupt+0x120>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCAINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCAINTLVL_HI_gc;
    9094:	d7 01       	movw	r26, r14
    9096:	16 96       	adiw	r26, 0x06	; 6
    9098:	ed 91       	ld	r30, X+
    909a:	fc 91       	ld	r31, X
    909c:	17 97       	sbiw	r26, 0x07	; 7
    909e:	87 81       	ldd	r24, Z+7	; 0x07
    90a0:	83 60       	ori	r24, 0x03	; 3
    90a2:	0e c0       	rjmp	.+28     	; 0x90c0 <hal_requestTimerInterrupt+0x142>

         }
         else if( t_type == COMPAREB)
    90a4:	01 30       	cpi	r16, 0x01	; 1
    90a6:	71 f4       	brne	.+28     	; 0x90c4 <hal_requestTimerInterrupt+0x146>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    90a8:	04 80       	ldd	r0, Z+4	; 0x04
    90aa:	f5 81       	ldd	r31, Z+5	; 0x05
    90ac:	e0 2d       	mov	r30, r0
    90ae:	30 97       	sbiw	r30, 0x00	; 0
    90b0:	29 f4       	brne	.+10     	; 0x90bc <hal_requestTimerInterrupt+0x13e>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCBINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCBINTLVL_HI_gc;
    90b2:	d7 01       	movw	r26, r14
    90b4:	16 96       	adiw	r26, 0x06	; 6
    90b6:	ed 91       	ld	r30, X+
    90b8:	fc 91       	ld	r31, X
    90ba:	17 97       	sbiw	r26, 0x07	; 7
    90bc:	87 81       	ldd	r24, Z+7	; 0x07
    90be:	8c 60       	ori	r24, 0x0C	; 12
    90c0:	87 83       	std	Z+7, r24	; 0x07
    90c2:	22 c0       	rjmp	.+68     	; 0x9108 <hal_requestTimerInterrupt+0x18a>
         }
         else if( t_type == COMPAREC)
    90c4:	02 30       	cpi	r16, 0x02	; 2
    90c6:	69 f4       	brne	.+26     	; 0x90e2 <hal_requestTimerInterrupt+0x164>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    90c8:	04 80       	ldd	r0, Z+4	; 0x04
    90ca:	f5 81       	ldd	r31, Z+5	; 0x05
    90cc:	e0 2d       	mov	r30, r0
    90ce:	30 97       	sbiw	r30, 0x00	; 0
    90d0:	29 f4       	brne	.+10     	; 0x90dc <hal_requestTimerInterrupt+0x15e>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCCINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCCINTLVL_HI_gc;
    90d2:	d7 01       	movw	r26, r14
    90d4:	16 96       	adiw	r26, 0x06	; 6
    90d6:	ed 91       	ld	r30, X+
    90d8:	fc 91       	ld	r31, X
    90da:	17 97       	sbiw	r26, 0x07	; 7
    90dc:	87 81       	ldd	r24, Z+7	; 0x07
    90de:	80 63       	ori	r24, 0x30	; 48
    90e0:	ef cf       	rjmp	.-34     	; 0x90c0 <hal_requestTimerInterrupt+0x142>
         }
         else if( t_type == COMPARED)
    90e2:	03 30       	cpi	r16, 0x03	; 3
    90e4:	89 f4       	brne	.+34     	; 0x9108 <hal_requestTimerInterrupt+0x18a>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    90e6:	04 80       	ldd	r0, Z+4	; 0x04
    90e8:	f5 81       	ldd	r31, Z+5	; 0x05
    90ea:	e0 2d       	mov	r30, r0
    90ec:	30 97       	sbiw	r30, 0x00	; 0
    90ee:	29 f4       	brne	.+10     	; 0x90fa <hal_requestTimerInterrupt+0x17c>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCDINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCDINTLVL_HI_gc;
    90f0:	d7 01       	movw	r26, r14
    90f2:	16 96       	adiw	r26, 0x06	; 6
    90f4:	ed 91       	ld	r30, X+
    90f6:	fc 91       	ld	r31, X
    90f8:	17 97       	sbiw	r26, 0x07	; 7
    90fa:	87 81       	ldd	r24, Z+7	; 0x07
    90fc:	80 6c       	ori	r24, 0xC0	; 192
    90fe:	e0 cf       	rjmp	.-64     	; 0x90c0 <hal_requestTimerInterrupt+0x142>
         }

      }/*End if( pt_timerIntHndl == NULL)*/
      else /*Yes*/
      {
         HAL_END_CRITICAL();//Enable interrupts
    9100:	89 81       	ldd	r24, Y+1	; 0x01
    9102:	8f bf       	out	0x3f, r24	; 63
         return TIMER_INTERRUPT_OPEN;
    9104:	89 ef       	ldi	r24, 0xF9	; 249
    9106:	03 c0       	rjmp	.+6      	; 0x910e <hal_requestTimerInterrupt+0x190>
      }

   }/*End if( pt_timerHndl != NULL)*/

   HAL_END_CRITICAL();//Enable interrupts
    9108:	89 81       	ldd	r24, Y+1	; 0x01
    910a:	8f bf       	out	0x3f, r24	; 63

   return TIMER_PASSED;
    910c:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_requestTimerInterrupt*/
    910e:	27 96       	adiw	r28, 0x07	; 7
    9110:	cd bf       	out	0x3d, r28	; 61
    9112:	de bf       	out	0x3e, r29	; 62
    9114:	df 91       	pop	r29
    9116:	cf 91       	pop	r28
    9118:	1f 91       	pop	r17
    911a:	0f 91       	pop	r16
    911c:	ff 90       	pop	r15
    911e:	ef 90       	pop	r14
    9120:	df 90       	pop	r13
    9122:	cf 90       	pop	r12
    9124:	08 95       	ret

00009126 <hal_requestTimer>:

/*---------------------------------------------------------------------------*
 * Request access to a particular timer module
 *---------------------------------------------------------------------------*/
t_TIMERHNDL hal_requestTimer( t_timerModId t_id)
{
    9126:	1f 93       	push	r17
    9128:	cf 93       	push	r28
    912a:	df 93       	push	r29
    912c:	cd b7       	in	r28, 0x3d	; 61
    912e:	de b7       	in	r29, 0x3e	; 62
    9130:	25 97       	sbiw	r28, 0x05	; 5
    9132:	cd bf       	out	0x3d, r28	; 61
    9134:	de bf       	out	0x3e, r29	; 62
    9136:	18 2f       	mov	r17, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9138:	8f b7       	in	r24, 0x3f	; 63
    913a:	89 83       	std	Y+1, r24	; 0x01
    913c:	f8 94       	cli

   if( (t_id < TIMER_1) || (t_id > TIMER_8))
    913e:	14 32       	cpi	r17, 0x24	; 36
    9140:	28 f0       	brcs	.+10     	; 0x914c <hal_requestTimer+0x26>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9142:	89 81       	ldd	r24, Y+1	; 0x01
    9144:	8f bf       	out	0x3f, r24	; 63
      return (t_TIMERHNDL)TIMER_INVALID_MODULE;
    9146:	8c ef       	ldi	r24, 0xFC	; 252
    9148:	9f ef       	ldi	r25, 0xFF	; 255
    914a:	93 c0       	rjmp	.+294    	; 0x9272 <hal_requestTimer+0x14c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerHndlList, s_count)
    914c:	e0 91 f4 20 	lds	r30, 0x20F4
    9150:	f0 91 f5 20 	lds	r31, 0x20F5
    9154:	82 81       	ldd	r24, Z+2	; 0x02
    9156:	93 81       	ldd	r25, Z+3	; 0x03
    9158:	e0 91 f4 20 	lds	r30, 0x20F4
    915c:	f0 91 f5 20 	lds	r31, 0x20F5
    9160:	0b c0       	rjmp	.+22     	; 0x9178 <hal_requestTimer+0x52>
   {
      pt_element = (t_timerModHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    9162:	ea 81       	ldd	r30, Y+2	; 0x02
    9164:	fb 81       	ldd	r31, Y+3	; 0x03
    9166:	01 90       	ld	r0, Z+
    9168:	f0 81       	ld	r31, Z
    916a:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    916c:	20 81       	ld	r18, Z
    916e:	21 17       	cp	r18, r17
    9170:	59 f0       	breq	.+22     	; 0x9188 <hal_requestTimer+0x62>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerHndlList, s_count)
    9172:	01 97       	sbiw	r24, 0x01	; 1
    9174:	ea 81       	ldd	r30, Y+2	; 0x02
    9176:	fb 81       	ldd	r31, Y+3	; 0x03
    9178:	20 85       	ldd	r18, Z+8	; 0x08
    917a:	31 85       	ldd	r19, Z+9	; 0x09
    917c:	2a 83       	std	Y+2, r18	; 0x02
    917e:	3b 83       	std	Y+3, r19	; 0x03
    9180:	18 16       	cp	r1, r24
    9182:	19 06       	cpc	r1, r25
    9184:	74 f3       	brlt	.-36     	; 0x9162 <hal_requestTimer+0x3c>
    9186:	03 c0       	rjmp	.+6      	; 0x918e <hal_requestTimer+0x68>
   pt_timerHndl = findTimerElement( t_id);

   /*------------------------------------------------------------------------*
    * Has this timer already been opened?
    *------------------------------------------------------------------------*/
   if( pt_timerHndl == NULL) /*No*/
    9188:	30 97       	sbiw	r30, 0x00	; 0
    918a:	09 f0       	breq	.+2      	; 0x918e <hal_requestTimer+0x68>
    918c:	69 c0       	rjmp	.+210    	; 0x9260 <hal_requestTimer+0x13a>
   t_linkedListError t_err;

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the Timer information will be stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerModHndl));
    918e:	88 e0       	ldi	r24, 0x08	; 8
    9190:	90 e0       	ldi	r25, 0x00	; 0
    9192:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    9196:	8a 83       	std	Y+2, r24	; 0x02
    9198:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    919a:	8a 81       	ldd	r24, Y+2	; 0x02
    919c:	9b 81       	ldd	r25, Y+3	; 0x03
    919e:	97 fd       	sbrc	r25, 7
    91a0:	0c c0       	rjmp	.+24     	; 0x91ba <hal_requestTimer+0x94>
   }

   /*------------------------------------------------------------------------*
    * Add the Timer link onto the list open Timers.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_timerHndlList,
    91a2:	80 91 f4 20 	lds	r24, 0x20F4
    91a6:	90 91 f5 20 	lds	r25, 0x20F5
    91aa:	6a 81       	ldd	r22, Y+2	; 0x02
    91ac:	7b 81       	ldd	r23, Y+3	; 0x03
    91ae:	41 e0       	ldi	r20, 0x01	; 1
    91b0:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    91b4:	8a 81       	ldd	r24, Y+2	; 0x02
    91b6:	9b 81       	ldd	r25, Y+3	; 0x03
    91b8:	02 c0       	rjmp	.+4      	; 0x91be <hal_requestTimer+0x98>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerModHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)TIMER_OUT_OF_HEAP;
    91ba:	8f ef       	ldi	r24, 0xFF	; 255
    91bc:	9f ef       	ldi	r25, 0xFF	; 255
    * Has this timer already been opened?
    *------------------------------------------------------------------------*/
   if( pt_timerHndl == NULL) /*No*/
   {

      t_linkHndl = createTimerHandle();
    91be:	8c 83       	std	Y+4, r24	; 0x04
    91c0:	9d 83       	std	Y+5, r25	; 0x05
      if( t_linkHndl < 0)
    91c2:	8c 81       	ldd	r24, Y+4	; 0x04
    91c4:	9d 81       	ldd	r25, Y+5	; 0x05
    91c6:	97 ff       	sbrs	r25, 7
    91c8:	05 c0       	rjmp	.+10     	; 0x91d4 <hal_requestTimer+0xae>
      {
         HAL_END_CRITICAL();//Enable interrupts
    91ca:	89 81       	ldd	r24, Y+1	; 0x01
    91cc:	8f bf       	out	0x3f, r24	; 63
         return (t_TIMERHNDL)TIMER_OUT_OF_HEAP;
    91ce:	8f ef       	ldi	r24, 0xFF	; 255
    91d0:	9f ef       	ldi	r25, 0xFF	; 255
    91d2:	4f c0       	rjmp	.+158    	; 0x9272 <hal_requestTimer+0x14c>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    91d4:	ec 81       	ldd	r30, Y+4	; 0x04
    91d6:	fd 81       	ldd	r31, Y+5	; 0x05
    91d8:	01 90       	ld	r0, Z+
    91da:	f0 81       	ld	r31, Z
    91dc:	e0 2d       	mov	r30, r0

      pt_timerHndl->b_validConfig = false;
    91de:	11 82       	std	Z+1, r1	; 0x01

      pt_timerHndl->t_id = t_id;
    91e0:	10 83       	st	Z, r17

      /*---------------------------------------------------------------------*
       * Clock isn't configured until configureTimer gets called.
       *---------------------------------------------------------------------*/
      pt_timerHndl->t_clockSelection = TC_CLKSEL_OFF_gc;
    91e2:	13 82       	std	Z+3, r1	; 0x03

      /*---------------------------------------------------------------------*
       * No interrupts opened against this handle.
       *---------------------------------------------------------------------*/
      pt_timerHndl->c_intCount = 0;
    91e4:	12 82       	std	Z+2, r1	; 0x02

      switch( t_id)
    91e6:	1f 30       	cpi	r17, 0x0F	; 15
    91e8:	01 f1       	breq	.+64     	; 0x922a <hal_requestTimer+0x104>
    91ea:	10 31       	cpi	r17, 0x10	; 16
    91ec:	38 f4       	brcc	.+14     	; 0x91fc <hal_requestTimer+0xd6>
    91ee:	15 30       	cpi	r17, 0x05	; 5
    91f0:	a1 f0       	breq	.+40     	; 0x921a <hal_requestTimer+0xf4>
    91f2:	1a 30       	cpi	r17, 0x0A	; 10
    91f4:	b9 f0       	breq	.+46     	; 0x9224 <hal_requestTimer+0xfe>
    91f6:	11 23       	and	r17, r17
    91f8:	69 f0       	breq	.+26     	; 0x9214 <hal_requestTimer+0xee>
    91fa:	37 c0       	rjmp	.+110    	; 0x926a <hal_requestTimer+0x144>
    91fc:	19 31       	cpi	r17, 0x19	; 25
    91fe:	e9 f0       	breq	.+58     	; 0x923a <hal_requestTimer+0x114>
    9200:	1a 31       	cpi	r17, 0x1A	; 26
    9202:	18 f4       	brcc	.+6      	; 0x920a <hal_requestTimer+0xe4>
    9204:	14 31       	cpi	r17, 0x14	; 20
    9206:	89 f5       	brne	.+98     	; 0x926a <hal_requestTimer+0x144>
    9208:	15 c0       	rjmp	.+42     	; 0x9234 <hal_requestTimer+0x10e>
    920a:	1e 31       	cpi	r17, 0x1E	; 30
    920c:	d9 f0       	breq	.+54     	; 0x9244 <hal_requestTimer+0x11e>
    920e:	13 32       	cpi	r17, 0x23	; 35
    9210:	61 f5       	brne	.+88     	; 0x926a <hal_requestTimer+0x144>
    9212:	1f c0       	rjmp	.+62     	; 0x9252 <hal_requestTimer+0x12c>
      {
         case TIMER_1:

            pt_timerHndl->pt_timer0 = &TCC0;
    9214:	80 e0       	ldi	r24, 0x00	; 0
    9216:	98 e0       	ldi	r25, 0x08	; 8
    9218:	17 c0       	rjmp	.+46     	; 0x9248 <hal_requestTimer+0x122>

         break;

         case TIMER_2:

            pt_timerHndl->pt_timer0 = NULL;
    921a:	14 82       	std	Z+4, r1	; 0x04
    921c:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCC1;
    921e:	80 e4       	ldi	r24, 0x40	; 64
    9220:	98 e0       	ldi	r25, 0x08	; 8
    9222:	1b c0       	rjmp	.+54     	; 0x925a <hal_requestTimer+0x134>

         break;

         case TIMER_3:

            pt_timerHndl->pt_timer0 = &TCD0;
    9224:	80 e0       	ldi	r24, 0x00	; 0
    9226:	99 e0       	ldi	r25, 0x09	; 9
    9228:	0f c0       	rjmp	.+30     	; 0x9248 <hal_requestTimer+0x122>

         break;

         case TIMER_4:

            pt_timerHndl->pt_timer0 = NULL;
    922a:	14 82       	std	Z+4, r1	; 0x04
    922c:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCD1;
    922e:	80 e4       	ldi	r24, 0x40	; 64
    9230:	99 e0       	ldi	r25, 0x09	; 9
    9232:	13 c0       	rjmp	.+38     	; 0x925a <hal_requestTimer+0x134>

         break;

         case TIMER_5:

            pt_timerHndl->pt_timer0 = &TCE0;
    9234:	80 e0       	ldi	r24, 0x00	; 0
    9236:	9a e0       	ldi	r25, 0x0A	; 10
    9238:	07 c0       	rjmp	.+14     	; 0x9248 <hal_requestTimer+0x122>

         break;

         case TIMER_6:

            pt_timerHndl->pt_timer0 = NULL;
    923a:	14 82       	std	Z+4, r1	; 0x04
    923c:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCE1;
    923e:	80 e4       	ldi	r24, 0x40	; 64
    9240:	9a e0       	ldi	r25, 0x0A	; 10
    9242:	0b c0       	rjmp	.+22     	; 0x925a <hal_requestTimer+0x134>

         break;

         case TIMER_7:

            pt_timerHndl->pt_timer0 = &TCF0;
    9244:	80 e0       	ldi	r24, 0x00	; 0
    9246:	9b e0       	ldi	r25, 0x0B	; 11
    9248:	84 83       	std	Z+4, r24	; 0x04
    924a:	95 83       	std	Z+5, r25	; 0x05
            pt_timerHndl->pt_timer1 = NULL;
    924c:	16 82       	std	Z+6, r1	; 0x06
    924e:	17 82       	std	Z+7, r1	; 0x07

         break;
    9250:	0c c0       	rjmp	.+24     	; 0x926a <hal_requestTimer+0x144>

         case TIMER_8:

            pt_timerHndl->pt_timer0 = NULL;
    9252:	14 82       	std	Z+4, r1	; 0x04
    9254:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCF1;
    9256:	80 e4       	ldi	r24, 0x40	; 64
    9258:	9b e0       	ldi	r25, 0x0B	; 11
    925a:	86 83       	std	Z+6, r24	; 0x06
    925c:	97 83       	std	Z+7, r25	; 0x07

         break;
    925e:	05 c0       	rjmp	.+10     	; 0x926a <hal_requestTimer+0x144>
      }/*End switch( t_id)*/

   }/*End if( pt_timerHndl == NULL)*/
   else /*Yes*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    9260:	89 81       	ldd	r24, Y+1	; 0x01
    9262:	8f bf       	out	0x3f, r24	; 63
      return (t_TIMERHNDL)TIMER_MODULE_OPEN;
    9264:	87 ef       	ldi	r24, 0xF7	; 247
    9266:	9f ef       	ldi	r25, 0xFF	; 255
    9268:	04 c0       	rjmp	.+8      	; 0x9272 <hal_requestTimer+0x14c>
   }

   HAL_END_CRITICAL();//Enable interrupts
    926a:	89 81       	ldd	r24, Y+1	; 0x01
    926c:	8f bf       	out	0x3f, r24	; 63

   return (t_TIMERHNDL)t_linkHndl;
    926e:	8c 81       	ldd	r24, Y+4	; 0x04
    9270:	9d 81       	ldd	r25, Y+5	; 0x05

}/*End hal_requestTimer*/
    9272:	25 96       	adiw	r28, 0x05	; 5
    9274:	cd bf       	out	0x3d, r28	; 61
    9276:	de bf       	out	0x3e, r29	; 62
    9278:	df 91       	pop	r29
    927a:	cf 91       	pop	r28
    927c:	1f 91       	pop	r17
    927e:	08 95       	ret

00009280 <hal_configureTimer>:

}/*End hal_releaseTimer*/

t_timerError hal_configureTimer( t_TIMERHNDL t_handle,
                                 t_timerConfig t_conf)
{
    9280:	6f 92       	push	r6
    9282:	7f 92       	push	r7
    9284:	9f 92       	push	r9
    9286:	af 92       	push	r10
    9288:	bf 92       	push	r11
    928a:	cf 92       	push	r12
    928c:	df 92       	push	r13
    928e:	ef 92       	push	r14
    9290:	ff 92       	push	r15
    9292:	0f 93       	push	r16
    9294:	1f 93       	push	r17
    9296:	cf 93       	push	r28
    9298:	df 93       	push	r29
    929a:	cd b7       	in	r28, 0x3d	; 61
    929c:	de b7       	in	r29, 0x3e	; 62
    929e:	67 97       	sbiw	r28, 0x17	; 23
    92a0:	cd bf       	out	0x3d, r28	; 61
    92a2:	de bf       	out	0x3e, r29	; 62
    92a4:	88 8b       	std	Y+16, r24	; 0x10
    92a6:	99 8b       	std	Y+17, r25	; 0x11
    92a8:	d2 2e       	mov	r13, r18
    92aa:	2a 8b       	std	Y+18, r18	; 0x12
    92ac:	e3 2e       	mov	r14, r19
    92ae:	3b 8b       	std	Y+19, r19	; 0x13
    92b0:	4c 8b       	std	Y+20, r20	; 0x14
    92b2:	5d 8b       	std	Y+21, r21	; 0x15
    92b4:	6e 8b       	std	Y+22, r22	; 0x16
    92b6:	7f 8b       	std	Y+23, r23	; 0x17
   t_timerModHndl *pt_timerHndl;
   int32_t i_topTicks = 0;
   uint16_t as_divisor[7] = {1,2,4,8,64,256,1024};
    92b8:	de 01       	movw	r26, r28
    92ba:	12 96       	adiw	r26, 0x02	; 2
    92bc:	e8 ed       	ldi	r30, 0xD8	; 216
    92be:	f0 e2       	ldi	r31, 0x20	; 32
    92c0:	8e e0       	ldi	r24, 0x0E	; 14
    92c2:	01 90       	ld	r0, Z+
    92c4:	0d 92       	st	X+, r0
    92c6:	81 50       	subi	r24, 0x01	; 1
    92c8:	e1 f7       	brne	.-8      	; 0x92c2 <hal_configureTimer+0x42>

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    92ca:	8f b7       	in	r24, 0x3f	; 63
    92cc:	89 83       	std	Y+1, r24	; 0x01
    92ce:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    92d0:	e8 89       	ldd	r30, Y+16	; 0x10
    92d2:	f9 89       	ldd	r31, Y+17	; 0x11
    92d4:	80 91 f4 20 	lds	r24, 0x20F4
    92d8:	90 91 f5 20 	lds	r25, 0x20F5
    92dc:	24 81       	ldd	r18, Z+4	; 0x04
    92de:	35 81       	ldd	r19, Z+5	; 0x05
    92e0:	28 17       	cp	r18, r24
    92e2:	39 07       	cpc	r19, r25
    92e4:	21 f0       	breq	.+8      	; 0x92ee <hal_configureTimer+0x6e>
   {
      HAL_END_CRITICAL();//Enable interrupts
    92e6:	89 81       	ldd	r24, Y+1	; 0x01
    92e8:	8f bf       	out	0x3f, r24	; 63
      return TIMER_INVALID_HANDLE;
    92ea:	8b ef       	ldi	r24, 0xFB	; 251
    92ec:	e9 c0       	rjmp	.+466    	; 0x94c0 <hal_configureTimer+0x240>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    92ee:	e8 89       	ldd	r30, Y+16	; 0x10
    92f0:	f9 89       	ldd	r31, Y+17	; 0x11

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    92f2:	00 81       	ld	r16, Z
    92f4:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( (t_conf.t_mode < NORMAL) || (t_conf.t_mode > DUAL_SLOPE_BOTTOM)
    92f6:	26 e0       	ldi	r18, 0x06	; 6
    92f8:	2d 15       	cp	r18, r13
    92fa:	18 f0       	brcs	.+6      	; 0x9302 <hal_configureTimer+0x82>
          || (t_conf.t_mode == UNDEFINED))
    92fc:	82 e0       	ldi	r24, 0x02	; 2
    92fe:	d8 16       	cp	r13, r24
    9300:	21 f4       	brne	.+8      	; 0x930a <hal_configureTimer+0x8a>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9302:	89 81       	ldd	r24, Y+1	; 0x01
    9304:	8f bf       	out	0x3f, r24	; 63
         return TIMER_INVALID_WF_MODE;
    9306:	86 ef       	ldi	r24, 0xF6	; 246
    9308:	db c0       	rjmp	.+438    	; 0x94c0 <hal_configureTimer+0x240>
      }

      if( (t_conf.t_dir < DIRECTION_UP) || (t_conf.t_dir > DIRECTION_DOWN))
    930a:	a1 e0       	ldi	r26, 0x01	; 1
    930c:	ae 15       	cp	r26, r14
    930e:	20 f4       	brcc	.+8      	; 0x9318 <hal_configureTimer+0x98>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9310:	89 81       	ldd	r24, Y+1	; 0x01
    9312:	8f bf       	out	0x3f, r24	; 63
         return TIMER_INVALID_DIR;
    9314:	85 ef       	ldi	r24, 0xF5	; 245
    9316:	d4 c0       	rjmp	.+424    	; 0x94c0 <hal_configureTimer+0x240>
       * Find a clock divisor that gives enough resolution for the requested
       * period.
       *---------------------------------------------------------------------*/
      for( c_index = 0; c_index < 7; c_index++)
      {
         i_topTicks = (int32_t)(((float)F_CPU*t_conf.f_period) /
    9318:	6c 89       	ldd	r22, Y+20	; 0x14
    931a:	7d 89       	ldd	r23, Y+21	; 0x15
    931c:	8e 89       	ldd	r24, Y+22	; 0x16
    931e:	9f 89       	ldd	r25, Y+23	; 0x17
    9320:	20 e0       	ldi	r18, 0x00	; 0
    9322:	34 e2       	ldi	r19, 0x24	; 36
    9324:	44 ef       	ldi	r20, 0xF4	; 244
    9326:	5b e4       	ldi	r21, 0x4B	; 75
    9328:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    932c:	c6 2e       	mov	r12, r22
    932e:	b7 2e       	mov	r11, r23
    9330:	a8 2e       	mov	r10, r24
    9332:	99 2e       	mov	r9, r25
    9334:	62 e0       	ldi	r22, 0x02	; 2
    9336:	66 2e       	mov	r6, r22
    9338:	71 2c       	mov	r7, r1
    933a:	6c 0e       	add	r6, r28
    933c:	7d 1e       	adc	r7, r29
    933e:	ff 24       	eor	r15, r15
         as_divisor[c_index]);
    9340:	f3 01       	movw	r30, r6
    9342:	61 91       	ld	r22, Z+
    9344:	71 91       	ld	r23, Z+
    9346:	3f 01       	movw	r6, r30
       * Find a clock divisor that gives enough resolution for the requested
       * period.
       *---------------------------------------------------------------------*/
      for( c_index = 0; c_index < 7; c_index++)
      {
         i_topTicks = (int32_t)(((float)F_CPU*t_conf.f_period) /
    9348:	80 e0       	ldi	r24, 0x00	; 0
    934a:	90 e0       	ldi	r25, 0x00	; 0
    934c:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    9350:	9b 01       	movw	r18, r22
    9352:	ac 01       	movw	r20, r24
    9354:	8c 2d       	mov	r24, r12
    9356:	9b 2d       	mov	r25, r11
    9358:	aa 2d       	mov	r26, r10
    935a:	b9 2d       	mov	r27, r9
    935c:	bc 01       	movw	r22, r24
    935e:	cd 01       	movw	r24, r26
    9360:	0e 94 b0 ae 	call	0x15d60	; 0x15d60 <__divsf3>
    9364:	0e 94 52 af 	call	0x15ea4	; 0x15ea4 <__fixsfsi>
    9368:	ab 01       	movw	r20, r22
    936a:	bc 01       	movw	r22, r24
         as_divisor[c_index]);

         if( i_topTicks < MAX_TIMER_RANGE)
    936c:	4f 3f       	cpi	r20, 0xFF	; 255
    936e:	ff e7       	ldi	r31, 0x7F	; 127
    9370:	5f 07       	cpc	r21, r31
    9372:	f0 e0       	ldi	r31, 0x00	; 0
    9374:	6f 07       	cpc	r22, r31
    9376:	f0 e0       	ldi	r31, 0x00	; 0
    9378:	7f 07       	cpc	r23, r31
    937a:	24 f0       	brlt	.+8      	; 0x9384 <hal_configureTimer+0x104>

      /*---------------------------------------------------------------------*
       * Find a clock divisor that gives enough resolution for the requested
       * period.
       *---------------------------------------------------------------------*/
      for( c_index = 0; c_index < 7; c_index++)
    937c:	f3 94       	inc	r15
    937e:	27 e0       	ldi	r18, 0x07	; 7
    9380:	f2 16       	cp	r15, r18
    9382:	f1 f6       	brne	.-68     	; 0x9340 <hal_configureTimer+0xc0>
         if( i_topTicks < MAX_TIMER_RANGE)
            break;

      }/*End for( c_index = 0; c_index < 7; c_index++)*/

      switch( as_divisor[c_index])
    9384:	ef 2d       	mov	r30, r15
    9386:	f0 e0       	ldi	r31, 0x00	; 0
    9388:	ee 0f       	add	r30, r30
    938a:	ff 1f       	adc	r31, r31
    938c:	ec 0f       	add	r30, r28
    938e:	fd 1f       	adc	r31, r29
    9390:	82 81       	ldd	r24, Z+2	; 0x02
    9392:	93 81       	ldd	r25, Z+3	; 0x03
    9394:	88 30       	cpi	r24, 0x08	; 8
    9396:	91 05       	cpc	r25, r1
    9398:	09 f1       	breq	.+66     	; 0x93dc <hal_configureTimer+0x15c>
    939a:	89 30       	cpi	r24, 0x09	; 9
    939c:	91 05       	cpc	r25, r1
    939e:	50 f4       	brcc	.+20     	; 0x93b4 <hal_configureTimer+0x134>
    93a0:	82 30       	cpi	r24, 0x02	; 2
    93a2:	91 05       	cpc	r25, r1
    93a4:	a9 f0       	breq	.+42     	; 0x93d0 <hal_configureTimer+0x150>
    93a6:	84 30       	cpi	r24, 0x04	; 4
    93a8:	91 05       	cpc	r25, r1
    93aa:	a1 f0       	breq	.+40     	; 0x93d4 <hal_configureTimer+0x154>
    93ac:	81 30       	cpi	r24, 0x01	; 1
    93ae:	91 05       	cpc	r25, r1
    93b0:	09 f5       	brne	.+66     	; 0x93f4 <hal_configureTimer+0x174>
    93b2:	0c c0       	rjmp	.+24     	; 0x93cc <hal_configureTimer+0x14c>
    93b4:	a1 e0       	ldi	r26, 0x01	; 1
    93b6:	80 30       	cpi	r24, 0x00	; 0
    93b8:	9a 07       	cpc	r25, r26
    93ba:	a1 f0       	breq	.+40     	; 0x93e4 <hal_configureTimer+0x164>
    93bc:	b4 e0       	ldi	r27, 0x04	; 4
    93be:	80 30       	cpi	r24, 0x00	; 0
    93c0:	9b 07       	cpc	r25, r27
    93c2:	b1 f0       	breq	.+44     	; 0x93f0 <hal_configureTimer+0x170>
    93c4:	80 34       	cpi	r24, 0x40	; 64
    93c6:	91 05       	cpc	r25, r1
    93c8:	a9 f4       	brne	.+42     	; 0x93f4 <hal_configureTimer+0x174>
    93ca:	0a c0       	rjmp	.+20     	; 0x93e0 <hal_configureTimer+0x160>
      {
         case 1:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV1_gc;
    93cc:	81 e0       	ldi	r24, 0x01	; 1
    93ce:	03 c0       	rjmp	.+6      	; 0x93d6 <hal_configureTimer+0x156>
         break;

         case 2:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV2_gc;
    93d0:	82 e0       	ldi	r24, 0x02	; 2
    93d2:	09 c0       	rjmp	.+18     	; 0x93e6 <hal_configureTimer+0x166>
         break;

         case 4:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV4_gc;
    93d4:	83 e0       	ldi	r24, 0x03	; 3
    93d6:	f8 01       	movw	r30, r16
    93d8:	83 83       	std	Z+3, r24	; 0x03
         break;
    93da:	10 c0       	rjmp	.+32     	; 0x93fc <hal_configureTimer+0x17c>

         case 8:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV8_gc;
    93dc:	84 e0       	ldi	r24, 0x04	; 4
    93de:	03 c0       	rjmp	.+6      	; 0x93e6 <hal_configureTimer+0x166>
         break;

         case 64:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV64_gc;
    93e0:	85 e0       	ldi	r24, 0x05	; 5
    93e2:	f9 cf       	rjmp	.-14     	; 0x93d6 <hal_configureTimer+0x156>
         break;

         case 256:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV256_gc;
    93e4:	86 e0       	ldi	r24, 0x06	; 6
    93e6:	d8 01       	movw	r26, r16
    93e8:	13 96       	adiw	r26, 0x03	; 3
    93ea:	8c 93       	st	X, r24
    93ec:	13 97       	sbiw	r26, 0x03	; 3
         break;
    93ee:	06 c0       	rjmp	.+12     	; 0x93fc <hal_configureTimer+0x17c>

         case 1024:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV1024_gc;
    93f0:	87 e0       	ldi	r24, 0x07	; 7
    93f2:	f1 cf       	rjmp	.-30     	; 0x93d6 <hal_configureTimer+0x156>
         break;

         default:

            HAL_END_CRITICAL();//Enable interrupts
    93f4:	89 81       	ldd	r24, Y+1	; 0x01
    93f6:	8f bf       	out	0x3f, r24	; 63
            return TIMER_INVALID_PERIOD;
    93f8:	84 ef       	ldi	r24, 0xF4	; 244
    93fa:	62 c0       	rjmp	.+196    	; 0x94c0 <hal_configureTimer+0x240>
      }/*End switch( as_divisor[c_index])*/

      /*---------------------------------------------------------------------*
       * Which timer is being used?
       *---------------------------------------------------------------------*/
      if( pt_timerHndl->pt_timer0 != NULL)
    93fc:	d8 01       	movw	r26, r16
    93fe:	14 96       	adiw	r26, 0x04	; 4
    9400:	ed 91       	ld	r30, X+
    9402:	fc 91       	ld	r31, X
    9404:	15 97       	sbiw	r26, 0x05	; 5
    9406:	30 97       	sbiw	r30, 0x00	; 0
    9408:	11 f1       	breq	.+68     	; 0x944e <hal_configureTimer+0x1ce>
      {
         /*------------------------------------------------------------------*
          * Reset the timer module
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    940a:	80 81       	ld	r24, Z
    940c:	80 7f       	andi	r24, 0xF0	; 240
    940e:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLA |= TC_CLKSEL_OFF_gc;
    9410:	14 96       	adiw	r26, 0x04	; 4
    9412:	ed 91       	ld	r30, X+
    9414:	fc 91       	ld	r31, X
    9416:	15 97       	sbiw	r26, 0x05	; 5
    9418:	80 81       	ld	r24, Z
    941a:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLFSET = TC_CMD_RESET_gc;
    941c:	14 96       	adiw	r26, 0x04	; 4
    941e:	ed 91       	ld	r30, X+
    9420:	fc 91       	ld	r31, X
    9422:	15 97       	sbiw	r26, 0x05	; 5
    9424:	8c e0       	ldi	r24, 0x0C	; 12
    9426:	81 87       	std	Z+9, r24	; 0x09

         /*------------------------------------------------------------------*
          * Set the waveform generation mode
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->CTRLB &= ~TC0_WGMODE_gm;
    9428:	14 96       	adiw	r26, 0x04	; 4
    942a:	ed 91       	ld	r30, X+
    942c:	fc 91       	ld	r31, X
    942e:	15 97       	sbiw	r26, 0x05	; 5
    9430:	81 81       	ldd	r24, Z+1	; 0x01
    9432:	88 7f       	andi	r24, 0xF8	; 248
    9434:	81 83       	std	Z+1, r24	; 0x01
         pt_timerHndl->pt_timer0->CTRLB |= (TC_WGMODE_t)t_conf.t_mode;
    9436:	14 96       	adiw	r26, 0x04	; 4
    9438:	ed 91       	ld	r30, X+
    943a:	fc 91       	ld	r31, X
    943c:	15 97       	sbiw	r26, 0x05	; 5
    943e:	81 81       	ldd	r24, Z+1	; 0x01
    9440:	8d 29       	or	r24, r13
    9442:	81 83       	std	Z+1, r24	; 0x01

         /*------------------------------------------------------------------*
          * Set the clock period
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->PER = i_topTicks;
    9444:	14 96       	adiw	r26, 0x04	; 4
    9446:	ed 91       	ld	r30, X+
    9448:	fc 91       	ld	r31, X
    944a:	15 97       	sbiw	r26, 0x05	; 5
    944c:	26 c0       	rjmp	.+76     	; 0x949a <hal_configureTimer+0x21a>
      else
      {
         /*------------------------------------------------------------------*
          * Reset the timer module
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    944e:	d8 01       	movw	r26, r16
    9450:	16 96       	adiw	r26, 0x06	; 6
    9452:	ed 91       	ld	r30, X+
    9454:	fc 91       	ld	r31, X
    9456:	17 97       	sbiw	r26, 0x07	; 7
    9458:	80 81       	ld	r24, Z
    945a:	80 7f       	andi	r24, 0xF0	; 240
    945c:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLA |= TC_CLKSEL_OFF_gc;
    945e:	16 96       	adiw	r26, 0x06	; 6
    9460:	ed 91       	ld	r30, X+
    9462:	fc 91       	ld	r31, X
    9464:	17 97       	sbiw	r26, 0x07	; 7
    9466:	80 81       	ld	r24, Z
    9468:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLFSET = TC_CMD_RESET_gc;
    946a:	16 96       	adiw	r26, 0x06	; 6
    946c:	ed 91       	ld	r30, X+
    946e:	fc 91       	ld	r31, X
    9470:	17 97       	sbiw	r26, 0x07	; 7
    9472:	8c e0       	ldi	r24, 0x0C	; 12
    9474:	81 87       	std	Z+9, r24	; 0x09

         /*------------------------------------------------------------------*
          * Set the waveform generation mode
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->CTRLB &= ~TC0_WGMODE_gm;
    9476:	16 96       	adiw	r26, 0x06	; 6
    9478:	ed 91       	ld	r30, X+
    947a:	fc 91       	ld	r31, X
    947c:	17 97       	sbiw	r26, 0x07	; 7
    947e:	81 81       	ldd	r24, Z+1	; 0x01
    9480:	88 7f       	andi	r24, 0xF8	; 248
    9482:	81 83       	std	Z+1, r24	; 0x01
         pt_timerHndl->pt_timer1->CTRLB |= (TC_WGMODE_t)t_conf.t_mode;
    9484:	16 96       	adiw	r26, 0x06	; 6
    9486:	ed 91       	ld	r30, X+
    9488:	fc 91       	ld	r31, X
    948a:	17 97       	sbiw	r26, 0x07	; 7
    948c:	81 81       	ldd	r24, Z+1	; 0x01
    948e:	8d 29       	or	r24, r13
    9490:	81 83       	std	Z+1, r24	; 0x01

         /*------------------------------------------------------------------*
          * Set the clock period
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->PER = i_topTicks;
    9492:	16 96       	adiw	r26, 0x06	; 6
    9494:	ed 91       	ld	r30, X+
    9496:	fc 91       	ld	r31, X
    9498:	17 97       	sbiw	r26, 0x07	; 7
    949a:	46 a3       	lds	r20, 0x56
    949c:	57 a3       	lds	r21, 0x57
    949e:	14 96       	adiw	r26, 0x04	; 4
    94a0:	ed 91       	ld	r30, X+
    94a2:	fc 91       	ld	r31, X
    94a4:	15 97       	sbiw	r26, 0x05	; 5

         /*------------------------------------------------------------------*
          * Set the clock direction.
          *------------------------------------------------------------------*/
         if( t_conf.t_dir == DIRECTION_DOWN)
    94a6:	b1 e0       	ldi	r27, 0x01	; 1
    94a8:	eb 16       	cp	r14, r27
    94aa:	11 f4       	brne	.+4      	; 0x94b0 <hal_configureTimer+0x230>
            pt_timerHndl->pt_timer0->CTRLFSET = TC1_DIR_bm;
    94ac:	e1 86       	std	Z+9, r14	; 0x09
    94ae:	02 c0       	rjmp	.+4      	; 0x94b4 <hal_configureTimer+0x234>
         else
            pt_timerHndl->pt_timer0->CTRLFCLR = TC1_DIR_bm;
    94b0:	81 e0       	ldi	r24, 0x01	; 1
    94b2:	80 87       	std	Z+8, r24	; 0x08
      }

      pt_timerHndl->b_validConfig = true;
    94b4:	81 e0       	ldi	r24, 0x01	; 1
    94b6:	f8 01       	movw	r30, r16
    94b8:	81 83       	std	Z+1, r24	; 0x01

   }

   HAL_END_CRITICAL();//Enable interrupts
    94ba:	89 81       	ldd	r24, Y+1	; 0x01
    94bc:	8f bf       	out	0x3f, r24	; 63

   return TIMER_PASSED;
    94be:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_configureTimer*/
    94c0:	67 96       	adiw	r28, 0x17	; 23
    94c2:	cd bf       	out	0x3d, r28	; 61
    94c4:	de bf       	out	0x3e, r29	; 62
    94c6:	df 91       	pop	r29
    94c8:	cf 91       	pop	r28
    94ca:	1f 91       	pop	r17
    94cc:	0f 91       	pop	r16
    94ce:	ff 90       	pop	r15
    94d0:	ef 90       	pop	r14
    94d2:	df 90       	pop	r13
    94d4:	cf 90       	pop	r12
    94d6:	bf 90       	pop	r11
    94d8:	af 90       	pop	r10
    94da:	9f 90       	pop	r9
    94dc:	7f 90       	pop	r7
    94de:	6f 90       	pop	r6
    94e0:	08 95       	ret

000094e2 <hal_startTimer>:

t_timerError hal_startTimer( t_TIMERHNDL t_handle)
{
    94e2:	cf 93       	push	r28
    94e4:	df 93       	push	r29
    94e6:	00 d0       	rcall	.+0      	; 0x94e8 <hal_startTimer+0x6>
    94e8:	cd b7       	in	r28, 0x3d	; 61
    94ea:	de b7       	in	r29, 0x3e	; 62
    94ec:	8a 83       	std	Y+2, r24	; 0x02
    94ee:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    94f0:	8f b7       	in	r24, 0x3f	; 63
    94f2:	89 83       	std	Y+1, r24	; 0x01
    94f4:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    94f6:	ea 81       	ldd	r30, Y+2	; 0x02
    94f8:	fb 81       	ldd	r31, Y+3	; 0x03
    94fa:	80 91 f4 20 	lds	r24, 0x20F4
    94fe:	90 91 f5 20 	lds	r25, 0x20F5
    9502:	24 81       	ldd	r18, Z+4	; 0x04
    9504:	35 81       	ldd	r19, Z+5	; 0x05
    9506:	28 17       	cp	r18, r24
    9508:	39 07       	cpc	r19, r25
    950a:	21 f0       	breq	.+8      	; 0x9514 <hal_startTimer+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    950c:	89 81       	ldd	r24, Y+1	; 0x01
    950e:	8f bf       	out	0x3f, r24	; 63
      return TIMER_INVALID_HANDLE;
    9510:	8b ef       	ldi	r24, 0xFB	; 251
    9512:	24 c0       	rjmp	.+72     	; 0x955c <hal_startTimer+0x7a>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    9514:	ea 81       	ldd	r30, Y+2	; 0x02
    9516:	fb 81       	ldd	r31, Y+3	; 0x03

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    9518:	01 90       	ld	r0, Z+
    951a:	f0 81       	ld	r31, Z
    951c:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->b_validConfig == false)
    951e:	81 81       	ldd	r24, Z+1	; 0x01
    9520:	88 23       	and	r24, r24
    9522:	21 f4       	brne	.+8      	; 0x952c <hal_startTimer+0x4a>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9524:	89 81       	ldd	r24, Y+1	; 0x01
    9526:	8f bf       	out	0x3f, r24	; 63
         return TIMER_NO_CONFIG;
    9528:	83 ef       	ldi	r24, 0xF3	; 243
    952a:	18 c0       	rjmp	.+48     	; 0x955c <hal_startTimer+0x7a>
      }

      if( pt_timerHndl->pt_timer0 != NULL)
    952c:	a4 81       	ldd	r26, Z+4	; 0x04
    952e:	b5 81       	ldd	r27, Z+5	; 0x05
    9530:	10 97       	sbiw	r26, 0x00	; 0
    9532:	31 f0       	breq	.+12     	; 0x9540 <hal_startTimer+0x5e>
      {
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    9534:	8c 91       	ld	r24, X
    9536:	80 7f       	andi	r24, 0xF0	; 240
    9538:	8c 93       	st	X, r24
         pt_timerHndl->pt_timer0->CTRLA |= pt_timerHndl->t_clockSelection;
    953a:	a4 81       	ldd	r26, Z+4	; 0x04
    953c:	b5 81       	ldd	r27, Z+5	; 0x05
    953e:	07 c0       	rjmp	.+14     	; 0x954e <hal_startTimer+0x6c>
      }
      else
      {
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    9540:	a6 81       	ldd	r26, Z+6	; 0x06
    9542:	b7 81       	ldd	r27, Z+7	; 0x07
    9544:	8c 91       	ld	r24, X
    9546:	80 7f       	andi	r24, 0xF0	; 240
    9548:	8c 93       	st	X, r24
         pt_timerHndl->pt_timer1->CTRLA |= pt_timerHndl->t_clockSelection;
    954a:	a6 81       	ldd	r26, Z+6	; 0x06
    954c:	b7 81       	ldd	r27, Z+7	; 0x07
    954e:	8c 91       	ld	r24, X
    9550:	93 81       	ldd	r25, Z+3	; 0x03
    9552:	89 2b       	or	r24, r25
    9554:	8c 93       	st	X, r24
      }

   }/*End if( pt_timerHndl != NULL)*/

   HAL_END_CRITICAL();//Enable interrupts
    9556:	89 81       	ldd	r24, Y+1	; 0x01
    9558:	8f bf       	out	0x3f, r24	; 63

   return TIMER_PASSED;
    955a:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_startTimer*/
    955c:	23 96       	adiw	r28, 0x03	; 3
    955e:	cd bf       	out	0x3d, r28	; 61
    9560:	de bf       	out	0x3e, r29	; 62
    9562:	df 91       	pop	r29
    9564:	cf 91       	pop	r28
    9566:	08 95       	ret

00009568 <hal_stopTimer>:

t_timerError hal_stopTimer( t_TIMERHNDL t_handle)
{
    9568:	cf 93       	push	r28
    956a:	df 93       	push	r29
    956c:	00 d0       	rcall	.+0      	; 0x956e <hal_stopTimer+0x6>
    956e:	cd b7       	in	r28, 0x3d	; 61
    9570:	de b7       	in	r29, 0x3e	; 62
    9572:	8a 83       	std	Y+2, r24	; 0x02
    9574:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9576:	8f b7       	in	r24, 0x3f	; 63
    9578:	89 83       	std	Y+1, r24	; 0x01
    957a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    957c:	ea 81       	ldd	r30, Y+2	; 0x02
    957e:	fb 81       	ldd	r31, Y+3	; 0x03
    9580:	80 91 f4 20 	lds	r24, 0x20F4
    9584:	90 91 f5 20 	lds	r25, 0x20F5
    9588:	24 81       	ldd	r18, Z+4	; 0x04
    958a:	35 81       	ldd	r19, Z+5	; 0x05
    958c:	28 17       	cp	r18, r24
    958e:	39 07       	cpc	r19, r25
    9590:	21 f0       	breq	.+8      	; 0x959a <hal_stopTimer+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9592:	89 81       	ldd	r24, Y+1	; 0x01
    9594:	8f bf       	out	0x3f, r24	; 63
      return TIMER_INVALID_HANDLE;
    9596:	8b ef       	ldi	r24, 0xFB	; 251
    9598:	1d c0       	rjmp	.+58     	; 0x95d4 <hal_stopTimer+0x6c>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    959a:	ea 81       	ldd	r30, Y+2	; 0x02
    959c:	fb 81       	ldd	r31, Y+3	; 0x03

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    959e:	01 90       	ld	r0, Z+
    95a0:	f0 81       	ld	r31, Z
    95a2:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    95a4:	a4 81       	ldd	r26, Z+4	; 0x04
    95a6:	b5 81       	ldd	r27, Z+5	; 0x05
    95a8:	10 97       	sbiw	r26, 0x00	; 0
    95aa:	39 f0       	breq	.+14     	; 0x95ba <hal_stopTimer+0x52>
      {
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    95ac:	8c 91       	ld	r24, X
    95ae:	80 7f       	andi	r24, 0xF0	; 240
    95b0:	8c 93       	st	X, r24
         pt_timerHndl->pt_timer0->CTRLA |= TC_CLKSEL_OFF_gc;
    95b2:	04 80       	ldd	r0, Z+4	; 0x04
    95b4:	f5 81       	ldd	r31, Z+5	; 0x05
    95b6:	e0 2d       	mov	r30, r0
    95b8:	08 c0       	rjmp	.+16     	; 0x95ca <hal_stopTimer+0x62>
      }
      else
      {
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    95ba:	a6 81       	ldd	r26, Z+6	; 0x06
    95bc:	b7 81       	ldd	r27, Z+7	; 0x07
    95be:	8c 91       	ld	r24, X
    95c0:	80 7f       	andi	r24, 0xF0	; 240
    95c2:	8c 93       	st	X, r24
         pt_timerHndl->pt_timer1->CTRLA |= TC_CLKSEL_OFF_gc;
    95c4:	06 80       	ldd	r0, Z+6	; 0x06
    95c6:	f7 81       	ldd	r31, Z+7	; 0x07
    95c8:	e0 2d       	mov	r30, r0
    95ca:	80 81       	ld	r24, Z
    95cc:	80 83       	st	Z, r24
      }

   }

   HAL_END_CRITICAL();//Enable interrupts
    95ce:	89 81       	ldd	r24, Y+1	; 0x01
    95d0:	8f bf       	out	0x3f, r24	; 63

   return TIMER_PASSED;
    95d2:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_stopTimer*/
    95d4:	23 96       	adiw	r28, 0x03	; 3
    95d6:	cd bf       	out	0x3d, r28	; 61
    95d8:	de bf       	out	0x3e, r29	; 62
    95da:	df 91       	pop	r29
    95dc:	cf 91       	pop	r28
    95de:	08 95       	ret

000095e0 <hal_getTimerCount>:

int32_t hal_getTimerCount( t_TIMERHNDL t_handle)
{
    95e0:	0f 93       	push	r16
    95e2:	1f 93       	push	r17
    95e4:	cf 93       	push	r28
    95e6:	df 93       	push	r29
    95e8:	0f 92       	push	r0
    95ea:	0f 92       	push	r0
    95ec:	cd b7       	in	r28, 0x3d	; 61
    95ee:	de b7       	in	r29, 0x3e	; 62
    95f0:	89 83       	std	Y+1, r24	; 0x01
    95f2:	9a 83       	std	Y+2, r25	; 0x02
   int32_t i_count;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    95f4:	e9 81       	ldd	r30, Y+1	; 0x01
    95f6:	fa 81       	ldd	r31, Y+2	; 0x02
    95f8:	80 91 f4 20 	lds	r24, 0x20F4
    95fc:	90 91 f5 20 	lds	r25, 0x20F5
    9600:	24 81       	ldd	r18, Z+4	; 0x04
    9602:	35 81       	ldd	r19, Z+5	; 0x05
    9604:	28 17       	cp	r18, r24
    9606:	39 07       	cpc	r19, r25
    9608:	b1 f4       	brne	.+44     	; 0x9636 <hal_getTimerCount+0x56>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    960a:	e9 81       	ldd	r30, Y+1	; 0x01
    960c:	fa 81       	ldd	r31, Y+2	; 0x02

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    960e:	01 90       	ld	r0, Z+
    9610:	f0 81       	ld	r31, Z
    9612:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    9614:	a4 81       	ldd	r26, Z+4	; 0x04
    9616:	b5 81       	ldd	r27, Z+5	; 0x05
    9618:	10 97       	sbiw	r26, 0x00	; 0
    961a:	29 f0       	breq	.+10     	; 0x9626 <hal_getTimerCount+0x46>
      {
         i_count = pt_timerHndl->pt_timer0->CNT;
    961c:	90 96       	adiw	r26, 0x20	; 32
    961e:	0d 91       	ld	r16, X+
    9620:	1c 91       	ld	r17, X
    9622:	91 97       	sbiw	r26, 0x21	; 33
    9624:	05 c0       	rjmp	.+10     	; 0x9630 <hal_getTimerCount+0x50>
      }
      else
      {
         i_count = pt_timerHndl->pt_timer1->CNT;
    9626:	06 80       	ldd	r0, Z+6	; 0x06
    9628:	f7 81       	ldd	r31, Z+7	; 0x07
    962a:	e0 2d       	mov	r30, r0
    962c:	00 a1       	lds	r16, 0x40
    962e:	11 a1       	lds	r17, 0x41
    9630:	20 e0       	ldi	r18, 0x00	; 0
    9632:	30 e0       	ldi	r19, 0x00	; 0
    9634:	04 c0       	rjmp	.+8      	; 0x963e <hal_getTimerCount+0x5e>
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
   {
      return (int32_t)TIMER_INVALID_HANDLE;
    9636:	0b ef       	ldi	r16, 0xFB	; 251
    9638:	1f ef       	ldi	r17, 0xFF	; 255
    963a:	2f ef       	ldi	r18, 0xFF	; 255
    963c:	3f ef       	ldi	r19, 0xFF	; 255

   }

   return i_count;

}/*End hal_getTimerCount*/
    963e:	b8 01       	movw	r22, r16
    9640:	c9 01       	movw	r24, r18
    9642:	0f 90       	pop	r0
    9644:	0f 90       	pop	r0
    9646:	df 91       	pop	r29
    9648:	cf 91       	pop	r28
    964a:	1f 91       	pop	r17
    964c:	0f 91       	pop	r16
    964e:	08 95       	ret

00009650 <hal_getIntStatus>:

}/*End hal_getCompareValue*/

int16_t hal_getIntStatus( t_TIMERHNDL t_handle,
                          t_compType   t_type)
{
    9650:	cf 93       	push	r28
    9652:	df 93       	push	r29
    9654:	0f 92       	push	r0
    9656:	0f 92       	push	r0
    9658:	cd b7       	in	r28, 0x3d	; 61
    965a:	de b7       	in	r29, 0x3e	; 62
    965c:	89 83       	std	Y+1, r24	; 0x01
    965e:	9a 83       	std	Y+2, r25	; 0x02
   t_timerModHndl *pt_timerHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    9660:	e9 81       	ldd	r30, Y+1	; 0x01
    9662:	fa 81       	ldd	r31, Y+2	; 0x02
    9664:	80 91 f4 20 	lds	r24, 0x20F4
    9668:	90 91 f5 20 	lds	r25, 0x20F5
    966c:	24 81       	ldd	r18, Z+4	; 0x04
    966e:	35 81       	ldd	r19, Z+5	; 0x05
    9670:	28 17       	cp	r18, r24
    9672:	39 07       	cpc	r19, r25
    9674:	09 f0       	breq	.+2      	; 0x9678 <hal_getIntStatus+0x28>
    9676:	44 c0       	rjmp	.+136    	; 0x9700 <hal_getIntStatus+0xb0>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    9678:	e9 81       	ldd	r30, Y+1	; 0x01
    967a:	fa 81       	ldd	r31, Y+2	; 0x02

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    967c:	a0 81       	ld	r26, Z
    967e:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    9680:	14 96       	adiw	r26, 0x04	; 4
    9682:	ed 91       	ld	r30, X+
    9684:	fc 91       	ld	r31, X
    9686:	15 97       	sbiw	r26, 0x05	; 5
    9688:	30 97       	sbiw	r30, 0x00	; 0
    968a:	c1 f0       	breq	.+48     	; 0x96bc <hal_getIntStatus+0x6c>
      {
         switch( t_type)
    968c:	62 30       	cpi	r22, 0x02	; 2
    968e:	61 f0       	breq	.+24     	; 0x96a8 <hal_getIntStatus+0x58>
    9690:	63 30       	cpi	r22, 0x03	; 3
    9692:	28 f4       	brcc	.+10     	; 0x969e <hal_getIntStatus+0x4e>
    9694:	66 23       	and	r22, r22
    9696:	e9 f0       	breq	.+58     	; 0x96d2 <hal_getIntStatus+0x82>
    9698:	61 30       	cpi	r22, 0x01	; 1
    969a:	a9 f5       	brne	.+106    	; 0x9706 <hal_getIntStatus+0xb6>
    969c:	23 c0       	rjmp	.+70     	; 0x96e4 <hal_getIntStatus+0x94>
    969e:	63 30       	cpi	r22, 0x03	; 3
    96a0:	41 f0       	breq	.+16     	; 0x96b2 <hal_getIntStatus+0x62>
    96a2:	64 30       	cpi	r22, 0x04	; 4
    96a4:	81 f5       	brne	.+96     	; 0x9706 <hal_getIntStatus+0xb6>
    96a6:	27 c0       	rjmp	.+78     	; 0x96f6 <hal_getIntStatus+0xa6>
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
               (int16_t)TC0_CCBIF_bm);
            break;

            case COMPAREC:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    96a8:	84 85       	ldd	r24, Z+12	; 0x0c
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	80 74       	andi	r24, 0x40	; 64
    96ae:	90 70       	andi	r25, 0x00	; 0
    96b0:	2c c0       	rjmp	.+88     	; 0x970a <hal_getIntStatus+0xba>
               (int16_t)TC0_CCCIF_bm);
            break;

            case COMPARED:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    96b2:	84 85       	ldd	r24, Z+12	; 0x0c
    96b4:	90 e0       	ldi	r25, 0x00	; 0
    96b6:	80 78       	andi	r24, 0x80	; 128
    96b8:	90 70       	andi	r25, 0x00	; 0
    96ba:	27 c0       	rjmp	.+78     	; 0x970a <hal_getIntStatus+0xba>
         }/*End switch( t_type)*/

      }
      else
      {
         switch( t_type)
    96bc:	61 30       	cpi	r22, 0x01	; 1
    96be:	71 f0       	breq	.+28     	; 0x96dc <hal_getIntStatus+0x8c>
    96c0:	61 30       	cpi	r22, 0x01	; 1
    96c2:	18 f0       	brcs	.+6      	; 0x96ca <hal_getIntStatus+0x7a>
    96c4:	64 30       	cpi	r22, 0x04	; 4
    96c6:	f9 f4       	brne	.+62     	; 0x9706 <hal_getIntStatus+0xb6>
    96c8:	12 c0       	rjmp	.+36     	; 0x96ee <hal_getIntStatus+0x9e>
         {
            case COMPAREA:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    96ca:	16 96       	adiw	r26, 0x06	; 6
    96cc:	ed 91       	ld	r30, X+
    96ce:	fc 91       	ld	r31, X
    96d0:	17 97       	sbiw	r26, 0x07	; 7
    96d2:	84 85       	ldd	r24, Z+12	; 0x0c
    96d4:	90 e0       	ldi	r25, 0x00	; 0
    96d6:	80 71       	andi	r24, 0x10	; 16
    96d8:	90 70       	andi	r25, 0x00	; 0
    96da:	17 c0       	rjmp	.+46     	; 0x970a <hal_getIntStatus+0xba>
               (int16_t)TC1_CCAIF_bm);
            break;

            case COMPAREB:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    96dc:	16 96       	adiw	r26, 0x06	; 6
    96de:	ed 91       	ld	r30, X+
    96e0:	fc 91       	ld	r31, X
    96e2:	17 97       	sbiw	r26, 0x07	; 7
    96e4:	84 85       	ldd	r24, Z+12	; 0x0c
    96e6:	90 e0       	ldi	r25, 0x00	; 0
    96e8:	80 72       	andi	r24, 0x20	; 32
    96ea:	90 70       	andi	r25, 0x00	; 0
    96ec:	0e c0       	rjmp	.+28     	; 0x970a <hal_getIntStatus+0xba>
               (int16_t)TC1_CCBIF_bm);
            break;

            case OVERFLOW:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    96ee:	16 96       	adiw	r26, 0x06	; 6
    96f0:	ed 91       	ld	r30, X+
    96f2:	fc 91       	ld	r31, X
    96f4:	17 97       	sbiw	r26, 0x07	; 7
    96f6:	84 85       	ldd	r24, Z+12	; 0x0c
    96f8:	90 e0       	ldi	r25, 0x00	; 0
    96fa:	81 70       	andi	r24, 0x01	; 1
    96fc:	90 70       	andi	r25, 0x00	; 0
    96fe:	05 c0       	rjmp	.+10     	; 0x970a <hal_getIntStatus+0xba>
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
   {
      return (int16_t)TIMER_INVALID_HANDLE;
    9700:	8b ef       	ldi	r24, 0xFB	; 251
    9702:	9f ef       	ldi	r25, 0xFF	; 255
    9704:	02 c0       	rjmp	.+4      	; 0x970a <hal_getIntStatus+0xba>
         }/*End switch( t_type)*/
      }

   }

   return (int16_t)TIMER_INVALID_COMP;
    9706:	8a ef       	ldi	r24, 0xFA	; 250
    9708:	9f ef       	ldi	r25, 0xFF	; 255

}/*End hal_getIntStatus*/
    970a:	0f 90       	pop	r0
    970c:	0f 90       	pop	r0
    970e:	df 91       	pop	r29
    9710:	cf 91       	pop	r28
    9712:	08 95       	ret

00009714 <hal_slaveInterrupt>:
   }/*End else if (c_busStatus & TWI_MASTER_RIF_bm)*/

}/*End hal_masterInterrupt*/

static void hal_slaveInterrupt( volatile t_twiChanHndl *pt_handle)
{
    9714:	0f 93       	push	r16
    9716:	1f 93       	push	r17
    9718:	cf 93       	push	r28
    971a:	df 93       	push	r29
    971c:	0f 92       	push	r0
    971e:	cd b7       	in	r28, 0x3d	; 61
    9720:	de b7       	in	r29, 0x3e	; 62
    9722:	8c 01       	movw	r16, r24
   volatile uint8_t c_busStatus = 0;
    9724:	19 82       	std	Y+1, r1	; 0x01
   volatile uint16_t *ps_wrPtr  = NULL;
   int8_t c_temp       = 0;

   c_busStatus = pt_handle->pt_slave->STATUS;
    9726:	dc 01       	movw	r26, r24
    9728:	19 96       	adiw	r26, 0x09	; 9
    972a:	ed 91       	ld	r30, X+
    972c:	fc 91       	ld	r31, X
    972e:	1a 97       	sbiw	r26, 0x0a	; 10
    9730:	82 81       	ldd	r24, Z+2	; 0x02
    9732:	89 83       	std	Y+1, r24	; 0x01
   ps_wrPtr    = &pt_handle->s_bufIndex;

   if( c_busStatus & TWI_SLAVE_BUSERR_bm) /*Bus error*/
    9734:	89 81       	ldd	r24, Y+1	; 0x01
    9736:	82 ff       	sbrs	r24, 2
    9738:	02 c0       	rjmp	.+4      	; 0x973e <hal_slaveInterrupt+0x2a>
   {
      pt_handle->t_status = TWI_BUS_ERROR;
    973a:	82 e0       	ldi	r24, 0x02	; 2
    973c:	2e c0       	rjmp	.+92     	; 0x979a <hal_slaveInterrupt+0x86>
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);

   }/*End if( c_busStatus & TWI_SLAVE_BUSERR_bm)*/
   else if( c_busStatus & TWI_SLAVE_COLL_bm) /*Bus collision*/
    973e:	89 81       	ldd	r24, Y+1	; 0x01
    9740:	83 ff       	sbrs	r24, 3
    9742:	11 c0       	rjmp	.+34     	; 0x9766 <hal_slaveInterrupt+0x52>
   {
      pt_handle->t_status = TWI_COLLISION;
    9744:	89 e0       	ldi	r24, 0x09	; 9
    9746:	f8 01       	movw	r30, r16
    9748:	86 83       	std	Z+6, r24	; 0x06

      /*---------------------------------------------------------------------*
       * Signal that the transaction has finished...
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
    974a:	83 85       	ldd	r24, Z+11	; 0x0b
    974c:	94 85       	ldd	r25, Z+12	; 0x0c
    974e:	00 97       	sbiw	r24, 0x00	; 0
    9750:	09 f4       	brne	.+2      	; 0x9754 <hal_slaveInterrupt+0x40>
    9752:	86 c0       	rjmp	.+268    	; 0x9860 <hal_slaveInterrupt+0x14c>
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    9754:	03 84       	ldd	r0, Z+11	; 0x0b
    9756:	f4 85       	ldd	r31, Z+12	; 0x0c
    9758:	e0 2d       	mov	r30, r0
    975a:	d8 01       	movw	r26, r16
    975c:	16 96       	adiw	r26, 0x06	; 6
    975e:	8c 91       	ld	r24, X
    9760:	60 e0       	ldi	r22, 0x00	; 0
    9762:	19 95       	eicall
    9764:	7d c0       	rjmp	.+250    	; 0x9860 <hal_slaveInterrupt+0x14c>

   }/*End else if( c_busStatus & TWI_SLAVE_COLL_bm)*/
   else if( (c_busStatus & TWI_SLAVE_APIF_bm) &&
    9766:	89 81       	ldd	r24, Y+1	; 0x01
    9768:	86 ff       	sbrs	r24, 6
    976a:	0b c0       	rjmp	.+22     	; 0x9782 <hal_slaveInterrupt+0x6e>
    976c:	89 81       	ldd	r24, Y+1	; 0x01
    976e:	80 ff       	sbrs	r24, 0
    9770:	08 c0       	rjmp	.+16     	; 0x9782 <hal_slaveInterrupt+0x6e>
            (c_busStatus & TWI_SLAVE_AP_bm)) /*Address match*/
   {
      pt_handle->t_status = TWI_TRANSACTION_BUSY;
    9772:	f8 01       	movw	r30, r16
    9774:	16 82       	std	Z+6, r1	; 0x06

      /*---------------------------------------------------------------------*
       * The buffer index is used during slave mode to keep track of how many
       * bytes have been read/written to and from the master device.
       *---------------------------------------------------------------------*/
      (*ps_wrPtr) = 0;
    9776:	11 8a       	std	Z+17, r1	; 0x11
    9778:	12 8a       	std	Z+18, r1	; 0x12

      /*---------------------------------------------------------------------*
       * Send ACK, and wait for another interrupt...
       *---------------------------------------------------------------------*/
      pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    977a:	01 84       	ldd	r0, Z+9	; 0x09
    977c:	f2 85       	ldd	r31, Z+10	; 0x0a
    977e:	e0 2d       	mov	r30, r0
    9780:	6d c0       	rjmp	.+218    	; 0x985c <hal_slaveInterrupt+0x148>
   }
   else if( c_busStatus & TWI_SLAVE_APIF_bm) /*Stop*/
    9782:	89 81       	ldd	r24, Y+1	; 0x01
    9784:	86 ff       	sbrs	r24, 6
    9786:	18 c0       	rjmp	.+48     	; 0x97b8 <hal_slaveInterrupt+0xa4>
   {
      /*---------------------------------------------------------------------*
       * Clear APIF...
       *---------------------------------------------------------------------*/
      pt_handle->pt_slave->STATUS = c_busStatus | TWI_SLAVE_APIF_bm;
    9788:	d8 01       	movw	r26, r16
    978a:	19 96       	adiw	r26, 0x09	; 9
    978c:	ed 91       	ld	r30, X+
    978e:	fc 91       	ld	r31, X
    9790:	1a 97       	sbiw	r26, 0x0a	; 10
    9792:	89 81       	ldd	r24, Y+1	; 0x01
    9794:	80 64       	ori	r24, 0x40	; 64
    9796:	82 83       	std	Z+2, r24	; 0x02

      pt_handle->t_status = TWI_TRANS_COMPLETE;
    9798:	84 e0       	ldi	r24, 0x04	; 4
    979a:	16 96       	adiw	r26, 0x06	; 6
    979c:	8c 93       	st	X, r24
    979e:	16 97       	sbiw	r26, 0x06	; 6

      /*---------------------------------------------------------------------*
       * Signal that the transaction has finished...
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
    97a0:	1b 96       	adiw	r26, 0x0b	; 11
    97a2:	8d 91       	ld	r24, X+
    97a4:	9c 91       	ld	r25, X
    97a6:	1c 97       	sbiw	r26, 0x0c	; 12
    97a8:	00 97       	sbiw	r24, 0x00	; 0
    97aa:	09 f4       	brne	.+2      	; 0x97ae <hal_slaveInterrupt+0x9a>
    97ac:	59 c0       	rjmp	.+178    	; 0x9860 <hal_slaveInterrupt+0x14c>
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    97ae:	1b 96       	adiw	r26, 0x0b	; 11
    97b0:	ed 91       	ld	r30, X+
    97b2:	fc 91       	ld	r31, X
    97b4:	1c 97       	sbiw	r26, 0x0c	; 12
    97b6:	d2 cf       	rjmp	.-92     	; 0x975c <hal_slaveInterrupt+0x48>

   }/*End else if( c_busStatus & TWI_SLAVE_APIF_bm)*/
   else if( c_busStatus & TWI_SLAVE_DIF_bm) /*Data interrupt?*/
    97b8:	89 81       	ldd	r24, Y+1	; 0x01
    97ba:	87 ff       	sbrs	r24, 7
    97bc:	51 c0       	rjmp	.+162    	; 0x9860 <hal_slaveInterrupt+0x14c>
   {
      /*---------------------------------------------------------------------*
       * Is the master requesting a read operation?
       *---------------------------------------------------------------------*/
      if( c_busStatus & TWI_SLAVE_DIR_bm) /*Master reading from slave...*/
    97be:	89 81       	ldd	r24, Y+1	; 0x01
    97c0:	81 ff       	sbrs	r24, 1
    97c2:	37 c0       	rjmp	.+110    	; 0x9832 <hal_slaveInterrupt+0x11e>
      {

         /*------------------------------------------------------------------*
          * Have we sent at least 1 byte and received a NACK from the master?
          *------------------------------------------------------------------*/
         if( ((*ps_wrPtr) > 0) && (pt_handle->pt_slave->STATUS &
    97c4:	f8 01       	movw	r30, r16
    97c6:	81 89       	ldd	r24, Z+17	; 0x11
    97c8:	92 89       	ldd	r25, Z+18	; 0x12
    97ca:	00 97       	sbiw	r24, 0x00	; 0
    97cc:	69 f0       	breq	.+26     	; 0x97e8 <hal_slaveInterrupt+0xd4>
    97ce:	01 84       	ldd	r0, Z+9	; 0x09
    97d0:	f2 85       	ldd	r31, Z+10	; 0x0a
    97d2:	e0 2d       	mov	r30, r0
    97d4:	82 81       	ldd	r24, Z+2	; 0x02
    97d6:	84 ff       	sbrs	r24, 4
    97d8:	07 c0       	rjmp	.+14     	; 0x97e8 <hal_slaveInterrupt+0xd4>
         TWI_SLAVE_RXACK_bm))
         {
            /*---------------------------------------------------------------*
             * Transaction finished...
             *---------------------------------------------------------------*/
            pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    97da:	d8 01       	movw	r26, r16
    97dc:	19 96       	adiw	r26, 0x09	; 9
    97de:	ed 91       	ld	r30, X+
    97e0:	fc 91       	ld	r31, X
    97e2:	1a 97       	sbiw	r26, 0x0a	; 10
    97e4:	82 e0       	ldi	r24, 0x02	; 2
    97e6:	3b c0       	rjmp	.+118    	; 0x985e <hal_slaveInterrupt+0x14a>
         }
         else
         {
            pt_handle->t_status = TWI_SLAVE_READ;
    97e8:	88 e0       	ldi	r24, 0x08	; 8
    97ea:	f8 01       	movw	r30, r16
    97ec:	86 83       	std	Z+6, r24	; 0x06

            /*---------------------------------------------------------------*
             * Signal that the transaction has finished...
             *---------------------------------------------------------------*/
            if( pt_handle->pf_transComplete != NULL)
    97ee:	83 85       	ldd	r24, Z+11	; 0x0b
    97f0:	94 85       	ldd	r25, Z+12	; 0x0c
    97f2:	00 97       	sbiw	r24, 0x00	; 0
    97f4:	a9 f1       	breq	.+106    	; 0x9860 <hal_slaveInterrupt+0x14c>
            {
               c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    97f6:	03 84       	ldd	r0, Z+11	; 0x0b
    97f8:	f4 85       	ldd	r31, Z+12	; 0x0c
    97fa:	e0 2d       	mov	r30, r0
    97fc:	d8 01       	movw	r26, r16
    97fe:	16 96       	adiw	r26, 0x06	; 6
    9800:	8c 91       	ld	r24, X
    9802:	60 e0       	ldi	r22, 0x00	; 0
    9804:	19 95       	eicall

               pt_handle->pt_slave->DATA = c_temp;
    9806:	d8 01       	movw	r26, r16
    9808:	19 96       	adiw	r26, 0x09	; 9
    980a:	ed 91       	ld	r30, X+
    980c:	fc 91       	ld	r31, X
    980e:	1a 97       	sbiw	r26, 0x0a	; 10
    9810:	84 83       	std	Z+4, r24	; 0x04

               /*------------------------------------------------------------*
                * Let the master know data is available...
                *------------------------------------------------------------*/
               pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    9812:	19 96       	adiw	r26, 0x09	; 9
    9814:	ed 91       	ld	r30, X+
    9816:	fc 91       	ld	r31, X
    9818:	1a 97       	sbiw	r26, 0x0a	; 10
    981a:	83 e0       	ldi	r24, 0x03	; 3
    981c:	81 83       	std	Z+1, r24	; 0x01

               /*------------------------------------------------------------*
                * Keep track of how much data we have sent to the master during
                * this transaction...
                *------------------------------------------------------------*/
               (*ps_wrPtr)++;
    981e:	51 96       	adiw	r26, 0x11	; 17
    9820:	8d 91       	ld	r24, X+
    9822:	9c 91       	ld	r25, X
    9824:	52 97       	sbiw	r26, 0x12	; 18
    9826:	01 96       	adiw	r24, 0x01	; 1
    9828:	51 96       	adiw	r26, 0x11	; 17
    982a:	8d 93       	st	X+, r24
    982c:	9c 93       	st	X, r25
    982e:	52 97       	sbiw	r26, 0x12	; 18
    9830:	17 c0       	rjmp	.+46     	; 0x9860 <hal_slaveInterrupt+0x14c>

      }/*End if( c_busStatus & TWI_SLAVE_DIR_bm)*/
      else /*Master writing to slave...*/
      {

         pt_handle->t_status = TWI_SLAVE_WRITE;
    9832:	87 e0       	ldi	r24, 0x07	; 7
    9834:	f8 01       	movw	r30, r16
    9836:	86 83       	std	Z+6, r24	; 0x06

         /*------------------------------------------------------------------*
          * Signal that the transaction has finished...
          *------------------------------------------------------------------*/
         if( pt_handle->pf_transComplete != NULL)
    9838:	83 85       	ldd	r24, Z+11	; 0x0b
    983a:	94 85       	ldd	r25, Z+12	; 0x0c
    983c:	00 97       	sbiw	r24, 0x00	; 0
    983e:	49 f0       	breq	.+18     	; 0x9852 <hal_slaveInterrupt+0x13e>
         {
            c_temp = pt_handle->pf_transComplete( pt_handle->t_status,
    9840:	23 85       	ldd	r18, Z+11	; 0x0b
    9842:	34 85       	ldd	r19, Z+12	; 0x0c
    9844:	86 81       	ldd	r24, Z+6	; 0x06
            pt_handle->pt_slave->DATA);
    9846:	a1 85       	ldd	r26, Z+9	; 0x09
    9848:	b2 85       	ldd	r27, Z+10	; 0x0a
    984a:	14 96       	adiw	r26, 0x04	; 4
    984c:	6c 91       	ld	r22, X
         /*------------------------------------------------------------------*
          * Signal that the transaction has finished...
          *------------------------------------------------------------------*/
         if( pt_handle->pf_transComplete != NULL)
         {
            c_temp = pt_handle->pf_transComplete( pt_handle->t_status,
    984e:	f9 01       	movw	r30, r18
    9850:	19 95       	eicall
         }

         /*------------------------------------------------------------------*
          * Send ACK to master...
          *------------------------------------------------------------------*/
         pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    9852:	d8 01       	movw	r26, r16
    9854:	19 96       	adiw	r26, 0x09	; 9
    9856:	ed 91       	ld	r30, X+
    9858:	fc 91       	ld	r31, X
    985a:	1a 97       	sbiw	r26, 0x0a	; 10
    985c:	83 e0       	ldi	r24, 0x03	; 3
    985e:	81 83       	std	Z+1, r24	; 0x01

      }

   }/*End else if( c_busStatus & TWI_SLAVE_DIF_bm)*/

}/*End hal_slaveInterrupt*/
    9860:	0f 90       	pop	r0
    9862:	df 91       	pop	r29
    9864:	cf 91       	pop	r28
    9866:	1f 91       	pop	r17
    9868:	0f 91       	pop	r16
    986a:	08 95       	ret

0000986c <findTwiElement>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIS_vect)*/

static t_twiChanHndl *findTwiElement( t_twiChanId t_id)
{
    986c:	cf 93       	push	r28
    986e:	df 93       	push	r29
    9870:	0f 92       	push	r0
    9872:	0f 92       	push	r0
    9874:	cd b7       	in	r28, 0x3d	; 61
    9876:	de b7       	in	r29, 0x3e	; 62
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the twi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_twiChanHndlList, s_count)
    9878:	e0 91 36 21 	lds	r30, 0x2136
    987c:	f0 91 37 21 	lds	r31, 0x2137
    9880:	22 81       	ldd	r18, Z+2	; 0x02
    9882:	33 81       	ldd	r19, Z+3	; 0x03
    9884:	e0 91 36 21 	lds	r30, 0x2136
    9888:	f0 91 37 21 	lds	r31, 0x2137
    988c:	0c c0       	rjmp	.+24     	; 0x98a6 <findTwiElement+0x3a>
   {
      pt_element = (t_twiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    988e:	e9 81       	ldd	r30, Y+1	; 0x01
    9890:	fa 81       	ldd	r31, Y+2	; 0x02
    9892:	01 90       	ld	r0, Z+
    9894:	f0 81       	ld	r31, Z
    9896:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    9898:	90 81       	ld	r25, Z
    989a:	98 17       	cp	r25, r24
    989c:	69 f0       	breq	.+26     	; 0x98b8 <findTwiElement+0x4c>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the twi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_twiChanHndlList, s_count)
    989e:	21 50       	subi	r18, 0x01	; 1
    98a0:	30 40       	sbci	r19, 0x00	; 0
    98a2:	e9 81       	ldd	r30, Y+1	; 0x01
    98a4:	fa 81       	ldd	r31, Y+2	; 0x02
    98a6:	40 85       	ldd	r20, Z+8	; 0x08
    98a8:	51 85       	ldd	r21, Z+9	; 0x09
    98aa:	49 83       	std	Y+1, r20	; 0x01
    98ac:	5a 83       	std	Y+2, r21	; 0x02
    98ae:	12 16       	cp	r1, r18
    98b0:	13 06       	cpc	r1, r19
    98b2:	6c f3       	brlt	.-38     	; 0x988e <findTwiElement+0x22>

   /*------------------------------------------------------------------------*
    * If we make it this far the ID has not been found in the open twi module
    * list.
    *------------------------------------------------------------------------*/
   return NULL;
    98b4:	e0 e0       	ldi	r30, 0x00	; 0
    98b6:	f0 e0       	ldi	r31, 0x00	; 0

}/*End findTwiElement*/
    98b8:	cf 01       	movw	r24, r30
    98ba:	0f 90       	pop	r0
    98bc:	0f 90       	pop	r0
    98be:	df 91       	pop	r29
    98c0:	cf 91       	pop	r28
    98c2:	08 95       	ret

000098c4 <hal_masterInterrupt>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void hal_masterInterrupt( volatile t_twiChanHndl *pt_handle)
{
    98c4:	ef 92       	push	r14
    98c6:	ff 92       	push	r15
    98c8:	0f 93       	push	r16
    98ca:	1f 93       	push	r17
    98cc:	cf 93       	push	r28
    98ce:	df 93       	push	r29
    98d0:	cd b7       	in	r28, 0x3d	; 61
    98d2:	de b7       	in	r29, 0x3e	; 62
    98d4:	6c 97       	sbiw	r28, 0x1c	; 28
    98d6:	cd bf       	out	0x3d, r28	; 61
    98d8:	de bf       	out	0x3e, r29	; 62
    98da:	8c 01       	movw	r16, r24
   volatile uint8_t c_busStatus = 0;
    98dc:	19 82       	std	Y+1, r1	; 0x01
   volatile uint8_t *pc_data     = NULL;
   volatile uint16_t s_length   = 0;
    98de:	1a 82       	std	Y+2, r1	; 0x02
    98e0:	1b 82       	std	Y+3, r1	; 0x03
   volatile uint16_t *ps_wrPtr  = NULL;

   c_busStatus = pt_handle->pt_master->STATUS;
    98e2:	dc 01       	movw	r26, r24
    98e4:	17 96       	adiw	r26, 0x07	; 7
    98e6:	ed 91       	ld	r30, X+
    98e8:	fc 91       	ld	r31, X
    98ea:	18 97       	sbiw	r26, 0x08	; 8
    98ec:	83 81       	ldd	r24, Z+3	; 0x03
    98ee:	89 83       	std	Y+1, r24	; 0x01
   pc_data     = pt_handle->pc_data;
    98f0:	1d 96       	adiw	r26, 0x0d	; 13
    98f2:	ed 90       	ld	r14, X+
    98f4:	fc 90       	ld	r15, X
    98f6:	1e 97       	sbiw	r26, 0x0e	; 14
   s_length    = pt_handle->s_length;
    98f8:	1f 96       	adiw	r26, 0x0f	; 15
    98fa:	8d 91       	ld	r24, X+
    98fc:	9c 91       	ld	r25, X
    98fe:	50 97       	sbiw	r26, 0x10	; 16
    9900:	8a 83       	std	Y+2, r24	; 0x02
    9902:	9b 83       	std	Y+3, r25	; 0x03
   ps_wrPtr   = &pt_handle->s_bufIndex;

   /*------------------------------------------------------------------------*
    * Check bus status
    *------------------------------------------------------------------------*/
   if( c_busStatus & TWI_MASTER_ARBLOST_bm) /*Arbitration lost*/
    9904:	89 81       	ldd	r24, Y+1	; 0x01
    9906:	83 ff       	sbrs	r24, 3
    9908:	13 c0       	rjmp	.+38     	; 0x9930 <hal_masterInterrupt+0x6c>
   {

      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    990a:	17 96       	adiw	r26, 0x07	; 7
    990c:	ed 91       	ld	r30, X+
    990e:	fc 91       	ld	r31, X
    9910:	18 97       	sbiw	r26, 0x08	; 8
    9912:	83 e0       	ldi	r24, 0x03	; 3
    9914:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    9916:	17 96       	adiw	r26, 0x07	; 7
    9918:	ed 91       	ld	r30, X+
    991a:	fc 91       	ld	r31, X
    991c:	18 97       	sbiw	r26, 0x08	; 8
    991e:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Clear interrupt flag and set the status of the bus back to idle...
       *---------------------------------------------------------------------*/
      pt_handle->pt_master->STATUS = c_busStatus | TWI_MASTER_ARBLOST_bm;
    9920:	17 96       	adiw	r26, 0x07	; 7
    9922:	ed 91       	ld	r30, X+
    9924:	fc 91       	ld	r31, X
    9926:	18 97       	sbiw	r26, 0x08	; 8
    9928:	99 81       	ldd	r25, Y+1	; 0x01
    992a:	98 60       	ori	r25, 0x08	; 8
    992c:	93 83       	std	Z+3, r25	; 0x03
    992e:	a6 c0       	rjmp	.+332    	; 0x9a7c <hal_masterInterrupt+0x1b8>
      pt_handle->t_status          = TWI_ARB_LOST;


   }/*End if( (c_busStatus & TWI_MASTER_ARBLOST_bm)*/
   else if( c_busStatus & TWI_MASTER_BUSERR_bm) /*Bus error*/
    9930:	89 81       	ldd	r24, Y+1	; 0x01
    9932:	82 ff       	sbrs	r24, 2
    9934:	22 c0       	rjmp	.+68     	; 0x997a <hal_masterInterrupt+0xb6>
   {
      pt_handle->t_lastIntTime = arb_sysTimeNow();
    9936:	ce 01       	movw	r24, r28
    9938:	04 96       	adiw	r24, 0x04	; 4
    993a:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>
    993e:	d8 01       	movw	r26, r16
    9940:	53 96       	adiw	r26, 0x13	; 19
    9942:	fe 01       	movw	r30, r28
    9944:	34 96       	adiw	r30, 0x04	; 4
    9946:	89 e1       	ldi	r24, 0x19	; 25
    9948:	01 90       	ld	r0, Z+
    994a:	0d 92       	st	X+, r0
    994c:	81 50       	subi	r24, 0x01	; 1
    994e:	e1 f7       	brne	.-8      	; 0x9948 <hal_masterInterrupt+0x84>
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    9950:	d8 01       	movw	r26, r16
    9952:	17 96       	adiw	r26, 0x07	; 7
    9954:	ed 91       	ld	r30, X+
    9956:	fc 91       	ld	r31, X
    9958:	18 97       	sbiw	r26, 0x08	; 8
    995a:	83 e0       	ldi	r24, 0x03	; 3
    995c:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    995e:	17 96       	adiw	r26, 0x07	; 7
    9960:	ed 91       	ld	r30, X+
    9962:	fc 91       	ld	r31, X
    9964:	18 97       	sbiw	r26, 0x08	; 8
    9966:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Clear interrupt flag and set the status of the bus back to idle...
       *---------------------------------------------------------------------*/
      pt_handle->pt_master->STATUS = c_busStatus | TWI_MASTER_ARBLOST_bm;
    9968:	17 96       	adiw	r26, 0x07	; 7
    996a:	ed 91       	ld	r30, X+
    996c:	fc 91       	ld	r31, X
    996e:	18 97       	sbiw	r26, 0x08	; 8
    9970:	89 81       	ldd	r24, Y+1	; 0x01
    9972:	88 60       	ori	r24, 0x08	; 8
    9974:	83 83       	std	Z+3, r24	; 0x03
      pt_handle->t_status          = TWI_BUS_ERROR;
    9976:	82 e0       	ldi	r24, 0x02	; 2
    9978:	81 c0       	rjmp	.+258    	; 0x9a7c <hal_masterInterrupt+0x1b8>

   }/*End else if( c_busStatus & TWI_MASTER_BUSERR_bm)*/
   else if( c_busStatus & TWI_MASTER_RXACK_bm) /*Nack from slave...*/
    997a:	89 81       	ldd	r24, Y+1	; 0x01
    997c:	84 ff       	sbrs	r24, 4
    997e:	0e c0       	rjmp	.+28     	; 0x999c <hal_masterInterrupt+0xd8>
   {
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    9980:	d8 01       	movw	r26, r16
    9982:	17 96       	adiw	r26, 0x07	; 7
    9984:	ed 91       	ld	r30, X+
    9986:	fc 91       	ld	r31, X
    9988:	18 97       	sbiw	r26, 0x08	; 8
    998a:	83 e0       	ldi	r24, 0x03	; 3
    998c:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    998e:	17 96       	adiw	r26, 0x07	; 7
    9990:	ed 91       	ld	r30, X+
    9992:	fc 91       	ld	r31, X
    9994:	18 97       	sbiw	r26, 0x08	; 8
    9996:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->t_status         = TWI_NACK_RECEIVED;
    9998:	81 e0       	ldi	r24, 0x01	; 1
    999a:	70 c0       	rjmp	.+224    	; 0x9a7c <hal_masterInterrupt+0x1b8>

   }/*End else if( c_busStatus & TWI_MASTER_RXACK_bm)*/
   else if (c_busStatus & TWI_MASTER_WIF_bm) /*Master write interrupt*/
    999c:	89 81       	ldd	r24, Y+1	; 0x01
    999e:	86 ff       	sbrs	r24, 6
    99a0:	2e c0       	rjmp	.+92     	; 0x99fe <hal_masterInterrupt+0x13a>
   {
      pt_handle->t_lastIntTime = arb_sysTimeNow();
    99a2:	ce 01       	movw	r24, r28
    99a4:	04 96       	adiw	r24, 0x04	; 4
    99a6:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>
    99aa:	f8 01       	movw	r30, r16
    99ac:	73 96       	adiw	r30, 0x13	; 19
    99ae:	de 01       	movw	r26, r28
    99b0:	14 96       	adiw	r26, 0x04	; 4
    99b2:	89 e1       	ldi	r24, 0x19	; 25
    99b4:	0d 90       	ld	r0, X+
    99b6:	01 92       	st	Z+, r0
    99b8:	81 50       	subi	r24, 0x01	; 1
    99ba:	e1 f7       	brne	.-8      	; 0x99b4 <hal_masterInterrupt+0xf0>

      if( (*ps_wrPtr) < s_length)
    99bc:	f8 01       	movw	r30, r16
    99be:	21 89       	ldd	r18, Z+17	; 0x11
    99c0:	32 89       	ldd	r19, Z+18	; 0x12
    99c2:	8a 81       	ldd	r24, Y+2	; 0x02
    99c4:	9b 81       	ldd	r25, Y+3	; 0x03
    99c6:	28 17       	cp	r18, r24
    99c8:	39 07       	cpc	r19, r25
    99ca:	98 f4       	brcc	.+38     	; 0x99f2 <hal_masterInterrupt+0x12e>
      {
         pt_handle->pt_master->DATA = pc_data[*ps_wrPtr];
    99cc:	27 81       	ldd	r18, Z+7	; 0x07
    99ce:	30 85       	ldd	r19, Z+8	; 0x08
    99d0:	01 88       	ldd	r0, Z+17	; 0x11
    99d2:	f2 89       	ldd	r31, Z+18	; 0x12
    99d4:	e0 2d       	mov	r30, r0
    99d6:	ee 0d       	add	r30, r14
    99d8:	ff 1d       	adc	r31, r15
    99da:	80 81       	ld	r24, Z
    99dc:	d9 01       	movw	r26, r18
    99de:	16 96       	adiw	r26, 0x06	; 6
    99e0:	8c 93       	st	X, r24
    99e2:	16 97       	sbiw	r26, 0x06	; 6
         (*ps_wrPtr)++;
    99e4:	f8 01       	movw	r30, r16
    99e6:	81 89       	ldd	r24, Z+17	; 0x11
    99e8:	92 89       	ldd	r25, Z+18	; 0x12
    99ea:	01 96       	adiw	r24, 0x01	; 1
    99ec:	81 8b       	std	Z+17, r24	; 0x11
    99ee:	92 8b       	std	Z+18, r25	; 0x12
    99f0:	48 c0       	rjmp	.+144    	; 0x9a82 <hal_masterInterrupt+0x1be>

      }/*End if( (*ps_wrPtr) < s_length)*/
      else /*Transaction finished...*/
      {
         pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    99f2:	d8 01       	movw	r26, r16
    99f4:	07 80       	ldd	r0, Z+7	; 0x07
    99f6:	f0 85       	ldd	r31, Z+8	; 0x08
    99f8:	e0 2d       	mov	r30, r0
    99fa:	83 e0       	ldi	r24, 0x03	; 3
    99fc:	38 c0       	rjmp	.+112    	; 0x9a6e <hal_masterInterrupt+0x1aa>
         pt_handle->t_status         = TWI_TRANS_COMPLETE;

      }

   }/*End else if (c_busStatus & TWI_MASTER_WIF_bm)*/
   else if (c_busStatus & TWI_MASTER_RIF_bm) /*Master read interrupt*/
    99fe:	89 81       	ldd	r24, Y+1	; 0x01
    9a00:	87 ff       	sbrs	r24, 7
    9a02:	3f c0       	rjmp	.+126    	; 0x9a82 <hal_masterInterrupt+0x1be>
   {

      pt_handle->t_lastIntTime = arb_sysTimeNow();
    9a04:	ce 01       	movw	r24, r28
    9a06:	04 96       	adiw	r24, 0x04	; 4
    9a08:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>
    9a0c:	f8 01       	movw	r30, r16
    9a0e:	73 96       	adiw	r30, 0x13	; 19
    9a10:	de 01       	movw	r26, r28
    9a12:	14 96       	adiw	r26, 0x04	; 4
    9a14:	89 e1       	ldi	r24, 0x19	; 25
    9a16:	0d 90       	ld	r0, X+
    9a18:	01 92       	st	Z+, r0
    9a1a:	81 50       	subi	r24, 0x01	; 1
    9a1c:	e1 f7       	brne	.-8      	; 0x9a16 <hal_masterInterrupt+0x152>

      /*---------------------------------------------------------------------*
       * Store data if there is room in the buffer...
       *---------------------------------------------------------------------*/
      if( (*ps_wrPtr) < s_length)
    9a1e:	f8 01       	movw	r30, r16
    9a20:	21 89       	ldd	r18, Z+17	; 0x11
    9a22:	32 89       	ldd	r19, Z+18	; 0x12
    9a24:	8a 81       	ldd	r24, Y+2	; 0x02
    9a26:	9b 81       	ldd	r25, Y+3	; 0x03
    9a28:	28 17       	cp	r18, r24
    9a2a:	39 07       	cpc	r19, r25
    9a2c:	d8 f4       	brcc	.+54     	; 0x9a64 <hal_masterInterrupt+0x1a0>
      {
         pc_data[*ps_wrPtr] = pt_handle->pt_master->DATA;
    9a2e:	01 88       	ldd	r0, Z+17	; 0x11
    9a30:	f2 89       	ldd	r31, Z+18	; 0x12
    9a32:	e0 2d       	mov	r30, r0
    9a34:	ee 0d       	add	r30, r14
    9a36:	ff 1d       	adc	r31, r15
    9a38:	d8 01       	movw	r26, r16
    9a3a:	17 96       	adiw	r26, 0x07	; 7
    9a3c:	8d 91       	ld	r24, X+
    9a3e:	9c 91       	ld	r25, X
    9a40:	18 97       	sbiw	r26, 0x08	; 8
    9a42:	dc 01       	movw	r26, r24
    9a44:	16 96       	adiw	r26, 0x06	; 6
    9a46:	8c 91       	ld	r24, X
    9a48:	16 97       	sbiw	r26, 0x06	; 6
    9a4a:	80 83       	st	Z, r24
         (*ps_wrPtr)++;
    9a4c:	f8 01       	movw	r30, r16
    9a4e:	81 89       	ldd	r24, Z+17	; 0x11
    9a50:	92 89       	ldd	r25, Z+18	; 0x12
    9a52:	01 96       	adiw	r24, 0x01	; 1
    9a54:	81 8b       	std	Z+17, r24	; 0x11
    9a56:	92 8b       	std	Z+18, r25	; 0x12

         /*------------------------------------------------------------------*
          * We still need to read more data out of the slave...
          *------------------------------------------------------------------*/
         pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    9a58:	07 80       	ldd	r0, Z+7	; 0x07
    9a5a:	f0 85       	ldd	r31, Z+8	; 0x08
    9a5c:	e0 2d       	mov	r30, r0
    9a5e:	82 e0       	ldi	r24, 0x02	; 2
    9a60:	82 83       	std	Z+2, r24	; 0x02
    9a62:	0f c0       	rjmp	.+30     	; 0x9a82 <hal_masterInterrupt+0x1be>

      }/*End if( (*ps_wrPtr) < s_length)*/
      else
      {
         pt_handle->pt_master->CTRLC = TWI_MASTER_ACKACT_bm |
    9a64:	d8 01       	movw	r26, r16
    9a66:	07 80       	ldd	r0, Z+7	; 0x07
    9a68:	f0 85       	ldd	r31, Z+8	; 0x08
    9a6a:	e0 2d       	mov	r30, r0
    9a6c:	87 e0       	ldi	r24, 0x07	; 7
    9a6e:	82 83       	std	Z+2, r24	; 0x02
         TWI_MASTER_CMD_STOP_gc;
         pt_handle->pt_master->CTRLC = TWI_MASTER_ACKACT_bm |
    9a70:	17 96       	adiw	r26, 0x07	; 7
    9a72:	ed 91       	ld	r30, X+
    9a74:	fc 91       	ld	r31, X
    9a76:	18 97       	sbiw	r26, 0x08	; 8
    9a78:	82 83       	std	Z+2, r24	; 0x02
         TWI_MASTER_CMD_STOP_gc;
         pt_handle->t_status = TWI_TRANS_COMPLETE;
    9a7a:	84 e0       	ldi	r24, 0x04	; 4
    9a7c:	16 96       	adiw	r26, 0x06	; 6
    9a7e:	8c 93       	st	X, r24
    9a80:	16 97       	sbiw	r26, 0x06	; 6

      }

   }/*End else if (c_busStatus & TWI_MASTER_RIF_bm)*/

}/*End hal_masterInterrupt*/
    9a82:	6c 96       	adiw	r28, 0x1c	; 28
    9a84:	cd bf       	out	0x3d, r28	; 61
    9a86:	de bf       	out	0x3e, r29	; 62
    9a88:	df 91       	pop	r29
    9a8a:	cf 91       	pop	r28
    9a8c:	1f 91       	pop	r17
    9a8e:	0f 91       	pop	r16
    9a90:	ff 90       	pop	r15
    9a92:	ef 90       	pop	r14
    9a94:	08 95       	ret

00009a96 <__vector_13>:
   }/*End else if( c_busStatus & TWI_SLAVE_DIF_bm)*/

}/*End hal_slaveInterrupt*/

ISR( TWIC_TWIM_vect)
{
    9a96:	1f 92       	push	r1
    9a98:	0f 92       	push	r0
    9a9a:	0f b6       	in	r0, 0x3f	; 63
    9a9c:	0f 92       	push	r0
    9a9e:	08 b6       	in	r0, 0x38	; 56
    9aa0:	0f 92       	push	r0
    9aa2:	09 b6       	in	r0, 0x39	; 57
    9aa4:	0f 92       	push	r0
    9aa6:	0b b6       	in	r0, 0x3b	; 59
    9aa8:	0f 92       	push	r0
    9aaa:	11 24       	eor	r1, r1
    9aac:	2f 93       	push	r18
    9aae:	3f 93       	push	r19
    9ab0:	4f 93       	push	r20
    9ab2:	5f 93       	push	r21
    9ab4:	6f 93       	push	r22
    9ab6:	7f 93       	push	r23
    9ab8:	8f 93       	push	r24
    9aba:	9f 93       	push	r25
    9abc:	af 93       	push	r26
    9abe:	bf 93       	push	r27
    9ac0:	ef 93       	push	r30
    9ac2:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_1);
    9ac4:	80 e0       	ldi	r24, 0x00	; 0
    9ac6:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9aca:	00 97       	sbiw	r24, 0x00	; 0
    9acc:	11 f0       	breq	.+4      	; 0x9ad2 <__vector_13+0x3c>
   {
      hal_masterInterrupt( pt_handle);
    9ace:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIC_TWIM_vect)*/
    9ad2:	ff 91       	pop	r31
    9ad4:	ef 91       	pop	r30
    9ad6:	bf 91       	pop	r27
    9ad8:	af 91       	pop	r26
    9ada:	9f 91       	pop	r25
    9adc:	8f 91       	pop	r24
    9ade:	7f 91       	pop	r23
    9ae0:	6f 91       	pop	r22
    9ae2:	5f 91       	pop	r21
    9ae4:	4f 91       	pop	r20
    9ae6:	3f 91       	pop	r19
    9ae8:	2f 91       	pop	r18
    9aea:	0f 90       	pop	r0
    9aec:	0b be       	out	0x3b, r0	; 59
    9aee:	0f 90       	pop	r0
    9af0:	09 be       	out	0x39, r0	; 57
    9af2:	0f 90       	pop	r0
    9af4:	08 be       	out	0x38, r0	; 56
    9af6:	0f 90       	pop	r0
    9af8:	0f be       	out	0x3f, r0	; 63
    9afa:	0f 90       	pop	r0
    9afc:	1f 90       	pop	r1
    9afe:	18 95       	reti

00009b00 <__vector_12>:

ISR(TWIC_TWIS_vect)
{
    9b00:	1f 92       	push	r1
    9b02:	0f 92       	push	r0
    9b04:	0f b6       	in	r0, 0x3f	; 63
    9b06:	0f 92       	push	r0
    9b08:	08 b6       	in	r0, 0x38	; 56
    9b0a:	0f 92       	push	r0
    9b0c:	09 b6       	in	r0, 0x39	; 57
    9b0e:	0f 92       	push	r0
    9b10:	0b b6       	in	r0, 0x3b	; 59
    9b12:	0f 92       	push	r0
    9b14:	11 24       	eor	r1, r1
    9b16:	2f 93       	push	r18
    9b18:	3f 93       	push	r19
    9b1a:	4f 93       	push	r20
    9b1c:	5f 93       	push	r21
    9b1e:	6f 93       	push	r22
    9b20:	7f 93       	push	r23
    9b22:	8f 93       	push	r24
    9b24:	9f 93       	push	r25
    9b26:	af 93       	push	r26
    9b28:	bf 93       	push	r27
    9b2a:	ef 93       	push	r30
    9b2c:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_1);
    9b2e:	80 e0       	ldi	r24, 0x00	; 0
    9b30:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9b34:	00 97       	sbiw	r24, 0x00	; 0
    9b36:	11 f0       	breq	.+4      	; 0x9b3c <__vector_12+0x3c>
   {
      hal_slaveInterrupt( pt_handle);
    9b38:	0e 94 8a 4b 	call	0x9714	; 0x9714 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR(TWIC_TWIS_vect)*/
    9b3c:	ff 91       	pop	r31
    9b3e:	ef 91       	pop	r30
    9b40:	bf 91       	pop	r27
    9b42:	af 91       	pop	r26
    9b44:	9f 91       	pop	r25
    9b46:	8f 91       	pop	r24
    9b48:	7f 91       	pop	r23
    9b4a:	6f 91       	pop	r22
    9b4c:	5f 91       	pop	r21
    9b4e:	4f 91       	pop	r20
    9b50:	3f 91       	pop	r19
    9b52:	2f 91       	pop	r18
    9b54:	0f 90       	pop	r0
    9b56:	0b be       	out	0x3b, r0	; 59
    9b58:	0f 90       	pop	r0
    9b5a:	09 be       	out	0x39, r0	; 57
    9b5c:	0f 90       	pop	r0
    9b5e:	08 be       	out	0x38, r0	; 56
    9b60:	0f 90       	pop	r0
    9b62:	0f be       	out	0x3f, r0	; 63
    9b64:	0f 90       	pop	r0
    9b66:	1f 90       	pop	r1
    9b68:	18 95       	reti

00009b6a <__vector_76>:

ISR( TWID_TWIM_vect)
{
    9b6a:	1f 92       	push	r1
    9b6c:	0f 92       	push	r0
    9b6e:	0f b6       	in	r0, 0x3f	; 63
    9b70:	0f 92       	push	r0
    9b72:	08 b6       	in	r0, 0x38	; 56
    9b74:	0f 92       	push	r0
    9b76:	09 b6       	in	r0, 0x39	; 57
    9b78:	0f 92       	push	r0
    9b7a:	0b b6       	in	r0, 0x3b	; 59
    9b7c:	0f 92       	push	r0
    9b7e:	11 24       	eor	r1, r1
    9b80:	2f 93       	push	r18
    9b82:	3f 93       	push	r19
    9b84:	4f 93       	push	r20
    9b86:	5f 93       	push	r21
    9b88:	6f 93       	push	r22
    9b8a:	7f 93       	push	r23
    9b8c:	8f 93       	push	r24
    9b8e:	9f 93       	push	r25
    9b90:	af 93       	push	r26
    9b92:	bf 93       	push	r27
    9b94:	ef 93       	push	r30
    9b96:	ff 93       	push	r31
    t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_2);
    9b98:	81 e0       	ldi	r24, 0x01	; 1
    9b9a:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9b9e:	00 97       	sbiw	r24, 0x00	; 0
    9ba0:	11 f0       	breq	.+4      	; 0x9ba6 <__vector_76+0x3c>
   {
      hal_masterInterrupt( pt_handle);
    9ba2:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIM_vect)*/
    9ba6:	ff 91       	pop	r31
    9ba8:	ef 91       	pop	r30
    9baa:	bf 91       	pop	r27
    9bac:	af 91       	pop	r26
    9bae:	9f 91       	pop	r25
    9bb0:	8f 91       	pop	r24
    9bb2:	7f 91       	pop	r23
    9bb4:	6f 91       	pop	r22
    9bb6:	5f 91       	pop	r21
    9bb8:	4f 91       	pop	r20
    9bba:	3f 91       	pop	r19
    9bbc:	2f 91       	pop	r18
    9bbe:	0f 90       	pop	r0
    9bc0:	0b be       	out	0x3b, r0	; 59
    9bc2:	0f 90       	pop	r0
    9bc4:	09 be       	out	0x39, r0	; 57
    9bc6:	0f 90       	pop	r0
    9bc8:	08 be       	out	0x38, r0	; 56
    9bca:	0f 90       	pop	r0
    9bcc:	0f be       	out	0x3f, r0	; 63
    9bce:	0f 90       	pop	r0
    9bd0:	1f 90       	pop	r1
    9bd2:	18 95       	reti

00009bd4 <__vector_75>:

ISR( TWID_TWIS_vect)
{
    9bd4:	1f 92       	push	r1
    9bd6:	0f 92       	push	r0
    9bd8:	0f b6       	in	r0, 0x3f	; 63
    9bda:	0f 92       	push	r0
    9bdc:	08 b6       	in	r0, 0x38	; 56
    9bde:	0f 92       	push	r0
    9be0:	09 b6       	in	r0, 0x39	; 57
    9be2:	0f 92       	push	r0
    9be4:	0b b6       	in	r0, 0x3b	; 59
    9be6:	0f 92       	push	r0
    9be8:	11 24       	eor	r1, r1
    9bea:	2f 93       	push	r18
    9bec:	3f 93       	push	r19
    9bee:	4f 93       	push	r20
    9bf0:	5f 93       	push	r21
    9bf2:	6f 93       	push	r22
    9bf4:	7f 93       	push	r23
    9bf6:	8f 93       	push	r24
    9bf8:	9f 93       	push	r25
    9bfa:	af 93       	push	r26
    9bfc:	bf 93       	push	r27
    9bfe:	ef 93       	push	r30
    9c00:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_2);
    9c02:	81 e0       	ldi	r24, 0x01	; 1
    9c04:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9c08:	00 97       	sbiw	r24, 0x00	; 0
    9c0a:	11 f0       	breq	.+4      	; 0x9c10 <__vector_75+0x3c>
   {
      hal_slaveInterrupt( pt_handle);
    9c0c:	0e 94 8a 4b 	call	0x9714	; 0x9714 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIS_vect)*/
    9c10:	ff 91       	pop	r31
    9c12:	ef 91       	pop	r30
    9c14:	bf 91       	pop	r27
    9c16:	af 91       	pop	r26
    9c18:	9f 91       	pop	r25
    9c1a:	8f 91       	pop	r24
    9c1c:	7f 91       	pop	r23
    9c1e:	6f 91       	pop	r22
    9c20:	5f 91       	pop	r21
    9c22:	4f 91       	pop	r20
    9c24:	3f 91       	pop	r19
    9c26:	2f 91       	pop	r18
    9c28:	0f 90       	pop	r0
    9c2a:	0b be       	out	0x3b, r0	; 59
    9c2c:	0f 90       	pop	r0
    9c2e:	09 be       	out	0x39, r0	; 57
    9c30:	0f 90       	pop	r0
    9c32:	08 be       	out	0x38, r0	; 56
    9c34:	0f 90       	pop	r0
    9c36:	0f be       	out	0x3f, r0	; 63
    9c38:	0f 90       	pop	r0
    9c3a:	1f 90       	pop	r1
    9c3c:	18 95       	reti

00009c3e <__vector_46>:

ISR( TWIE_TWIM_vect)
{
    9c3e:	1f 92       	push	r1
    9c40:	0f 92       	push	r0
    9c42:	0f b6       	in	r0, 0x3f	; 63
    9c44:	0f 92       	push	r0
    9c46:	08 b6       	in	r0, 0x38	; 56
    9c48:	0f 92       	push	r0
    9c4a:	09 b6       	in	r0, 0x39	; 57
    9c4c:	0f 92       	push	r0
    9c4e:	0b b6       	in	r0, 0x3b	; 59
    9c50:	0f 92       	push	r0
    9c52:	11 24       	eor	r1, r1
    9c54:	2f 93       	push	r18
    9c56:	3f 93       	push	r19
    9c58:	4f 93       	push	r20
    9c5a:	5f 93       	push	r21
    9c5c:	6f 93       	push	r22
    9c5e:	7f 93       	push	r23
    9c60:	8f 93       	push	r24
    9c62:	9f 93       	push	r25
    9c64:	af 93       	push	r26
    9c66:	bf 93       	push	r27
    9c68:	ef 93       	push	r30
    9c6a:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_3);
    9c6c:	82 e0       	ldi	r24, 0x02	; 2
    9c6e:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9c72:	00 97       	sbiw	r24, 0x00	; 0
    9c74:	11 f0       	breq	.+4      	; 0x9c7a <__vector_46+0x3c>
   {
      hal_masterInterrupt( pt_handle);
    9c76:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIM_vect)*/
    9c7a:	ff 91       	pop	r31
    9c7c:	ef 91       	pop	r30
    9c7e:	bf 91       	pop	r27
    9c80:	af 91       	pop	r26
    9c82:	9f 91       	pop	r25
    9c84:	8f 91       	pop	r24
    9c86:	7f 91       	pop	r23
    9c88:	6f 91       	pop	r22
    9c8a:	5f 91       	pop	r21
    9c8c:	4f 91       	pop	r20
    9c8e:	3f 91       	pop	r19
    9c90:	2f 91       	pop	r18
    9c92:	0f 90       	pop	r0
    9c94:	0b be       	out	0x3b, r0	; 59
    9c96:	0f 90       	pop	r0
    9c98:	09 be       	out	0x39, r0	; 57
    9c9a:	0f 90       	pop	r0
    9c9c:	08 be       	out	0x38, r0	; 56
    9c9e:	0f 90       	pop	r0
    9ca0:	0f be       	out	0x3f, r0	; 63
    9ca2:	0f 90       	pop	r0
    9ca4:	1f 90       	pop	r1
    9ca6:	18 95       	reti

00009ca8 <__vector_45>:

ISR( TWIE_TWIS_vect)
{
    9ca8:	1f 92       	push	r1
    9caa:	0f 92       	push	r0
    9cac:	0f b6       	in	r0, 0x3f	; 63
    9cae:	0f 92       	push	r0
    9cb0:	08 b6       	in	r0, 0x38	; 56
    9cb2:	0f 92       	push	r0
    9cb4:	09 b6       	in	r0, 0x39	; 57
    9cb6:	0f 92       	push	r0
    9cb8:	0b b6       	in	r0, 0x3b	; 59
    9cba:	0f 92       	push	r0
    9cbc:	11 24       	eor	r1, r1
    9cbe:	2f 93       	push	r18
    9cc0:	3f 93       	push	r19
    9cc2:	4f 93       	push	r20
    9cc4:	5f 93       	push	r21
    9cc6:	6f 93       	push	r22
    9cc8:	7f 93       	push	r23
    9cca:	8f 93       	push	r24
    9ccc:	9f 93       	push	r25
    9cce:	af 93       	push	r26
    9cd0:	bf 93       	push	r27
    9cd2:	ef 93       	push	r30
    9cd4:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_3);
    9cd6:	82 e0       	ldi	r24, 0x02	; 2
    9cd8:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9cdc:	00 97       	sbiw	r24, 0x00	; 0
    9cde:	11 f0       	breq	.+4      	; 0x9ce4 <__vector_45+0x3c>
   {
      hal_slaveInterrupt( pt_handle);
    9ce0:	0e 94 8a 4b 	call	0x9714	; 0x9714 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIS_vect)*/
    9ce4:	ff 91       	pop	r31
    9ce6:	ef 91       	pop	r30
    9ce8:	bf 91       	pop	r27
    9cea:	af 91       	pop	r26
    9cec:	9f 91       	pop	r25
    9cee:	8f 91       	pop	r24
    9cf0:	7f 91       	pop	r23
    9cf2:	6f 91       	pop	r22
    9cf4:	5f 91       	pop	r21
    9cf6:	4f 91       	pop	r20
    9cf8:	3f 91       	pop	r19
    9cfa:	2f 91       	pop	r18
    9cfc:	0f 90       	pop	r0
    9cfe:	0b be       	out	0x3b, r0	; 59
    9d00:	0f 90       	pop	r0
    9d02:	09 be       	out	0x39, r0	; 57
    9d04:	0f 90       	pop	r0
    9d06:	08 be       	out	0x38, r0	; 56
    9d08:	0f 90       	pop	r0
    9d0a:	0f be       	out	0x3f, r0	; 63
    9d0c:	0f 90       	pop	r0
    9d0e:	1f 90       	pop	r1
    9d10:	18 95       	reti

00009d12 <__vector_107>:

ISR( TWIF_TWIM_vect)
{
    9d12:	1f 92       	push	r1
    9d14:	0f 92       	push	r0
    9d16:	0f b6       	in	r0, 0x3f	; 63
    9d18:	0f 92       	push	r0
    9d1a:	08 b6       	in	r0, 0x38	; 56
    9d1c:	0f 92       	push	r0
    9d1e:	09 b6       	in	r0, 0x39	; 57
    9d20:	0f 92       	push	r0
    9d22:	0b b6       	in	r0, 0x3b	; 59
    9d24:	0f 92       	push	r0
    9d26:	11 24       	eor	r1, r1
    9d28:	2f 93       	push	r18
    9d2a:	3f 93       	push	r19
    9d2c:	4f 93       	push	r20
    9d2e:	5f 93       	push	r21
    9d30:	6f 93       	push	r22
    9d32:	7f 93       	push	r23
    9d34:	8f 93       	push	r24
    9d36:	9f 93       	push	r25
    9d38:	af 93       	push	r26
    9d3a:	bf 93       	push	r27
    9d3c:	ef 93       	push	r30
    9d3e:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_4);
    9d40:	83 e0       	ldi	r24, 0x03	; 3
    9d42:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9d46:	00 97       	sbiw	r24, 0x00	; 0
    9d48:	11 f0       	breq	.+4      	; 0x9d4e <__vector_107+0x3c>
   {
      hal_masterInterrupt( pt_handle);
    9d4a:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIM_vect)*/
    9d4e:	ff 91       	pop	r31
    9d50:	ef 91       	pop	r30
    9d52:	bf 91       	pop	r27
    9d54:	af 91       	pop	r26
    9d56:	9f 91       	pop	r25
    9d58:	8f 91       	pop	r24
    9d5a:	7f 91       	pop	r23
    9d5c:	6f 91       	pop	r22
    9d5e:	5f 91       	pop	r21
    9d60:	4f 91       	pop	r20
    9d62:	3f 91       	pop	r19
    9d64:	2f 91       	pop	r18
    9d66:	0f 90       	pop	r0
    9d68:	0b be       	out	0x3b, r0	; 59
    9d6a:	0f 90       	pop	r0
    9d6c:	09 be       	out	0x39, r0	; 57
    9d6e:	0f 90       	pop	r0
    9d70:	08 be       	out	0x38, r0	; 56
    9d72:	0f 90       	pop	r0
    9d74:	0f be       	out	0x3f, r0	; 63
    9d76:	0f 90       	pop	r0
    9d78:	1f 90       	pop	r1
    9d7a:	18 95       	reti

00009d7c <__vector_106>:

ISR( TWIF_TWIS_vect)
{
    9d7c:	1f 92       	push	r1
    9d7e:	0f 92       	push	r0
    9d80:	0f b6       	in	r0, 0x3f	; 63
    9d82:	0f 92       	push	r0
    9d84:	08 b6       	in	r0, 0x38	; 56
    9d86:	0f 92       	push	r0
    9d88:	09 b6       	in	r0, 0x39	; 57
    9d8a:	0f 92       	push	r0
    9d8c:	0b b6       	in	r0, 0x3b	; 59
    9d8e:	0f 92       	push	r0
    9d90:	11 24       	eor	r1, r1
    9d92:	2f 93       	push	r18
    9d94:	3f 93       	push	r19
    9d96:	4f 93       	push	r20
    9d98:	5f 93       	push	r21
    9d9a:	6f 93       	push	r22
    9d9c:	7f 93       	push	r23
    9d9e:	8f 93       	push	r24
    9da0:	9f 93       	push	r25
    9da2:	af 93       	push	r26
    9da4:	bf 93       	push	r27
    9da6:	ef 93       	push	r30
    9da8:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_4);
    9daa:	83 e0       	ldi	r24, 0x03	; 3
    9dac:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   if( pt_handle != NULL)
    9db0:	00 97       	sbiw	r24, 0x00	; 0
    9db2:	11 f0       	breq	.+4      	; 0x9db8 <__vector_106+0x3c>
   {
      hal_slaveInterrupt( pt_handle);
    9db4:	0e 94 8a 4b 	call	0x9714	; 0x9714 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIS_vect)*/
    9db8:	ff 91       	pop	r31
    9dba:	ef 91       	pop	r30
    9dbc:	bf 91       	pop	r27
    9dbe:	af 91       	pop	r26
    9dc0:	9f 91       	pop	r25
    9dc2:	8f 91       	pop	r24
    9dc4:	7f 91       	pop	r23
    9dc6:	6f 91       	pop	r22
    9dc8:	5f 91       	pop	r21
    9dca:	4f 91       	pop	r20
    9dcc:	3f 91       	pop	r19
    9dce:	2f 91       	pop	r18
    9dd0:	0f 90       	pop	r0
    9dd2:	0b be       	out	0x3b, r0	; 59
    9dd4:	0f 90       	pop	r0
    9dd6:	09 be       	out	0x39, r0	; 57
    9dd8:	0f 90       	pop	r0
    9dda:	08 be       	out	0x38, r0	; 56
    9ddc:	0f 90       	pop	r0
    9dde:	0f be       	out	0x3f, r0	; 63
    9de0:	0f 90       	pop	r0
    9de2:	1f 90       	pop	r1
    9de4:	18 95       	reti

00009de6 <hal_requestTwiChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular twi module
 *---------------------------------------------------------------------------*/
t_TWIHNDL hal_requestTwiChannel( t_twiChanId t_chanId)
{
    9de6:	1f 93       	push	r17
    9de8:	cf 93       	push	r28
    9dea:	df 93       	push	r29
    9dec:	cd b7       	in	r28, 0x3d	; 61
    9dee:	de b7       	in	r29, 0x3e	; 62
    9df0:	25 97       	sbiw	r28, 0x05	; 5
    9df2:	cd bf       	out	0x3d, r28	; 61
    9df4:	de bf       	out	0x3e, r29	; 62
    9df6:	18 2f       	mov	r17, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9df8:	8f b7       	in	r24, 0x3f	; 63
    9dfa:	89 83       	std	Y+1, r24	; 0x01
    9dfc:	f8 94       	cli

   if( (t_chanId < TWI_1) || (t_chanId > TWI_4))
    9dfe:	14 30       	cpi	r17, 0x04	; 4
    9e00:	28 f0       	brcs	.+10     	; 0x9e0c <hal_requestTwiChannel+0x26>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9e02:	89 81       	ldd	r24, Y+1	; 0x01
    9e04:	8f bf       	out	0x3f, r24	; 63
      return (t_TWIHNDL)TWI_INVALID_CHAN;
    9e06:	8b ef       	ldi	r24, 0xFB	; 251
    9e08:	9f ef       	ldi	r25, 0xFF	; 255
    9e0a:	3a c0       	rjmp	.+116    	; 0x9e80 <hal_requestTwiChannel+0x9a>
   }

   pt_twiChanHndl = findTwiElement( t_chanId);
    9e0c:	81 2f       	mov	r24, r17
    9e0e:	0e 94 36 4c 	call	0x986c	; 0x986c <findTwiElement>

   /*------------------------------------------------------------------------*
    * Is this channel available?
    *------------------------------------------------------------------------*/
   if( pt_twiChanHndl == NULL) /*Yes*/
    9e12:	00 97       	sbiw	r24, 0x00	; 0
    9e14:	89 f5       	brne	.+98     	; 0x9e78 <hal_requestTwiChannel+0x92>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular twi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_twiChanHndl));
    9e16:	8c e2       	ldi	r24, 0x2C	; 44
    9e18:	90 e0       	ldi	r25, 0x00	; 0
    9e1a:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    9e1e:	8a 83       	std	Y+2, r24	; 0x02
    9e20:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    9e22:	8a 81       	ldd	r24, Y+2	; 0x02
    9e24:	9b 81       	ldd	r25, Y+3	; 0x03
    9e26:	97 fd       	sbrc	r25, 7
    9e28:	0c c0       	rjmp	.+24     	; 0x9e42 <hal_requestTwiChannel+0x5c>
   }

   /*------------------------------------------------------------------------*
    * Add the twi module link onto the list open twi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_twiChanHndlList,
    9e2a:	80 91 36 21 	lds	r24, 0x2136
    9e2e:	90 91 37 21 	lds	r25, 0x2137
    9e32:	6a 81       	ldd	r22, Y+2	; 0x02
    9e34:	7b 81       	ldd	r23, Y+3	; 0x03
    9e36:	41 e0       	ldi	r20, 0x01	; 1
    9e38:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    9e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e40:	02 c0       	rjmp	.+4      	; 0x9e46 <hal_requestTwiChannel+0x60>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_twiChanHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)TWI_OUT_OF_HEAP;
    9e42:	8f ef       	ldi	r24, 0xFF	; 255
    9e44:	9f ef       	ldi	r25, 0xFF	; 255
    * Is this channel available?
    *------------------------------------------------------------------------*/
   if( pt_twiChanHndl == NULL) /*Yes*/
   {

      t_linkHndl = createTwiHandle();
    9e46:	8c 83       	std	Y+4, r24	; 0x04
    9e48:	9d 83       	std	Y+5, r25	; 0x05
      if( t_linkHndl < 0)
    9e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    9e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    9e4e:	97 ff       	sbrs	r25, 7
    9e50:	05 c0       	rjmp	.+10     	; 0x9e5c <hal_requestTwiChannel+0x76>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9e52:	89 81       	ldd	r24, Y+1	; 0x01
    9e54:	8f bf       	out	0x3f, r24	; 63
         return (t_TWIHNDL)TWI_OUT_OF_HEAP;
    9e56:	8f ef       	ldi	r24, 0xFF	; 255
    9e58:	9f ef       	ldi	r25, 0xFF	; 255
    9e5a:	12 c0       	rjmp	.+36     	; 0x9e80 <hal_requestTwiChannel+0x9a>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    9e5c:	ec 81       	ldd	r30, Y+4	; 0x04
    9e5e:	fd 81       	ldd	r31, Y+5	; 0x05
    9e60:	01 90       	ld	r0, Z+
    9e62:	f0 81       	ld	r31, Z
    9e64:	e0 2d       	mov	r30, r0

      pt_twiChanHndl->b_validConfig = false;
    9e66:	11 82       	std	Z+1, r1	; 0x01
      pt_twiChanHndl->t_id          = t_chanId;
    9e68:	10 83       	st	Z, r17
      pt_twiChanHndl->t_status      = TWI_IDLE;
    9e6a:	85 e0       	ldi	r24, 0x05	; 5
    9e6c:	86 83       	std	Z+6, r24	; 0x06
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_TWIHNDL)TWI_CHAN_UNAVAILABLE;
   }

   HAL_END_CRITICAL();//Enable interrupts
    9e6e:	89 81       	ldd	r24, Y+1	; 0x01
    9e70:	8f bf       	out	0x3f, r24	; 63

   return (t_TWIHNDL)t_linkHndl;
    9e72:	8c 81       	ldd	r24, Y+4	; 0x04
    9e74:	9d 81       	ldd	r25, Y+5	; 0x05
    9e76:	04 c0       	rjmp	.+8      	; 0x9e80 <hal_requestTwiChannel+0x9a>
      pt_twiChanHndl->t_status      = TWI_IDLE;

   }/*End if( pt_twiChanHndl == NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    9e78:	89 81       	ldd	r24, Y+1	; 0x01
    9e7a:	8f bf       	out	0x3f, r24	; 63
      return (t_TWIHNDL)TWI_CHAN_UNAVAILABLE;
    9e7c:	8d ef       	ldi	r24, 0xFD	; 253
    9e7e:	9f ef       	ldi	r25, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return (t_TWIHNDL)t_linkHndl;

}/*End hal_requestTwiChannel*/
    9e80:	25 96       	adiw	r28, 0x05	; 5
    9e82:	cd bf       	out	0x3d, r28	; 61
    9e84:	de bf       	out	0x3e, r29	; 62
    9e86:	df 91       	pop	r29
    9e88:	cf 91       	pop	r28
    9e8a:	1f 91       	pop	r17
    9e8c:	08 95       	ret

00009e8e <hal_configureTwiChannel>:

}/*End hal_releaseTwiChannel*/

t_twiError hal_configureTwiChannel( t_TWIHNDL t_handle,
                                    t_twiConfig t_conf)
{
    9e8e:	ef 92       	push	r14
    9e90:	ff 92       	push	r15
    9e92:	0f 93       	push	r16
    9e94:	1f 93       	push	r17
    9e96:	cf 93       	push	r28
    9e98:	df 93       	push	r29
    9e9a:	cd b7       	in	r28, 0x3d	; 61
    9e9c:	de b7       	in	r29, 0x3e	; 62
    9e9e:	60 97       	sbiw	r28, 0x10	; 16
    9ea0:	cd bf       	out	0x3d, r28	; 61
    9ea2:	de bf       	out	0x3e, r29	; 62
    9ea4:	8f 83       	std	Y+7, r24	; 0x07
    9ea6:	98 87       	std	Y+8, r25	; 0x08
    9ea8:	f0 2e       	mov	r15, r16
    9eaa:	09 87       	std	Y+9, r16	; 0x09
    9eac:	1a 87       	std	Y+10, r17	; 0x0a
    9eae:	2b 87       	std	Y+11, r18	; 0x0b
    9eb0:	3c 87       	std	Y+12, r19	; 0x0c
    9eb2:	4d 87       	std	Y+13, r20	; 0x0d
    9eb4:	e5 2e       	mov	r14, r21
    9eb6:	5e 87       	std	Y+14, r21	; 0x0e
    9eb8:	6f 87       	std	Y+15, r22	; 0x0f
    9eba:	78 8b       	std	Y+16, r23	; 0x10

   /*------------------------------------------------------------------------*
    * We are going to be configuring registers and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9ebc:	8f b7       	in	r24, 0x3f	; 63
    9ebe:	89 83       	std	Y+1, r24	; 0x01
    9ec0:	f8 94       	cli

   if( (t_conf.t_mode < TWI_MASTER) || (t_conf.t_mode > TWI_SLAVE))
    9ec2:	81 e0       	ldi	r24, 0x01	; 1
    9ec4:	80 17       	cp	r24, r16
    9ec6:	20 f4       	brcc	.+8      	; 0x9ed0 <hal_configureTwiChannel+0x42>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9ec8:	89 81       	ldd	r24, Y+1	; 0x01
    9eca:	8f bf       	out	0x3f, r24	; 63
      return TWI_INVALID_MODE;
    9ecc:	8a ef       	ldi	r24, 0xFA	; 250
    9ece:	f7 c0       	rjmp	.+494    	; 0xa0be <hal_configureTwiChannel+0x230>
   }

   if( (t_conf.t_mode == TWI_SLAVE) && 
    9ed0:	a1 e0       	ldi	r26, 0x01	; 1
    9ed2:	0a 17       	cp	r16, r26
    9ed4:	31 f4       	brne	.+12     	; 0x9ee2 <hal_configureTwiChannel+0x54>
    9ed6:	57 ff       	sbrs	r21, 7
    9ed8:	04 c0       	rjmp	.+8      	; 0x9ee2 <hal_configureTwiChannel+0x54>
       (t_conf.c_slaveAddress > TWI_MAX_SLAVE_ADDRESS))
   {
      HAL_END_CRITICAL();//Enable interrupts
    9eda:	89 81       	ldd	r24, Y+1	; 0x01
    9edc:	8f bf       	out	0x3f, r24	; 63
      return TWI_INVALID_SLAVE_ADDR;
    9ede:	89 ef       	ldi	r24, 0xF9	; 249
    9ee0:	ee c0       	rjmp	.+476    	; 0xa0be <hal_configureTwiChannel+0x230>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a twi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_twiChanHndlList) == false)
    9ee2:	ef 81       	ldd	r30, Y+7	; 0x07
    9ee4:	f8 85       	ldd	r31, Y+8	; 0x08
    9ee6:	80 91 36 21 	lds	r24, 0x2136
    9eea:	90 91 37 21 	lds	r25, 0x2137
    9eee:	24 81       	ldd	r18, Z+4	; 0x04
    9ef0:	35 81       	ldd	r19, Z+5	; 0x05
    9ef2:	28 17       	cp	r18, r24
    9ef4:	39 07       	cpc	r19, r25
    9ef6:	21 f0       	breq	.+8      	; 0x9f00 <hal_configureTwiChannel+0x72>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9ef8:	89 81       	ldd	r24, Y+1	; 0x01
    9efa:	8f bf       	out	0x3f, r24	; 63
      return TWI_INVALID_HANDLE;
    9efc:	8e ef       	ldi	r24, 0xFE	; 254
    9efe:	df c0       	rjmp	.+446    	; 0xa0be <hal_configureTwiChannel+0x230>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    9f00:	ef 81       	ldd	r30, Y+7	; 0x07
    9f02:	f8 85       	ldd	r31, Y+8	; 0x08
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
    9f04:	00 81       	ld	r16, Z
    9f06:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Configure the output pins the TWI will use.
       *---------------------------------------------------------------------*/
      if( t_conf.t_mode == TWI_MASTER)
    9f08:	ff 20       	and	r15, r15
    9f0a:	39 f4       	brne	.+14     	; 0x9f1a <hal_configureTwiChannel+0x8c>
      {
         t_gConf.c_inputMask    = 0;
    9f0c:	1a 82       	std	Y+2, r1	; 0x02
         t_gConf.c_outputMask   = PIN_0 | PIN_1;
    9f0e:	83 e0       	ldi	r24, 0x03	; 3
    9f10:	8b 83       	std	Y+3, r24	; 0x03
         t_gConf.b_setOutputLow = true;
    9f12:	81 e0       	ldi	r24, 0x01	; 1
    9f14:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.t_outConf      = TOTEM;
    9f16:	1e 82       	std	Y+6, r1	; 0x06
    9f18:	07 c0       	rjmp	.+14     	; 0x9f28 <hal_configureTwiChannel+0x9a>
      }
      else
      {
         t_gConf.c_inputMask    = PIN_0 | PIN_1;
    9f1a:	83 e0       	ldi	r24, 0x03	; 3
    9f1c:	8a 83       	std	Y+2, r24	; 0x02
         t_gConf.c_outputMask   = 0;
    9f1e:	1b 82       	std	Y+3, r1	; 0x03
         t_gConf.b_setOutputLow = true;
    9f20:	81 e0       	ldi	r24, 0x01	; 1
    9f22:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.t_inConf       = PULLUP;
    9f24:	85 e0       	ldi	r24, 0x05	; 5
    9f26:	8d 83       	std	Y+5, r24	; 0x05
      }

      switch( pt_twiChanHndl->t_id)
    9f28:	f8 01       	movw	r30, r16
    9f2a:	80 81       	ld	r24, Z
    9f2c:	81 30       	cpi	r24, 0x01	; 1
    9f2e:	89 f0       	breq	.+34     	; 0x9f52 <hal_configureTwiChannel+0xc4>
    9f30:	81 30       	cpi	r24, 0x01	; 1
    9f32:	28 f0       	brcs	.+10     	; 0x9f3e <hal_configureTwiChannel+0xb0>
    9f34:	82 30       	cpi	r24, 0x02	; 2
    9f36:	c1 f0       	breq	.+48     	; 0x9f68 <hal_configureTwiChannel+0xda>
    9f38:	83 30       	cpi	r24, 0x03	; 3
    9f3a:	89 f5       	brne	.+98     	; 0x9f9e <hal_configureTwiChannel+0x110>
    9f3c:	1f c0       	rjmp	.+62     	; 0x9f7c <hal_configureTwiChannel+0xee>
      {
         case TWI_1:

            pt_twiChanHndl->pt_master = &TWIC.MASTER;
    9f3e:	81 e8       	ldi	r24, 0x81	; 129
    9f40:	94 e0       	ldi	r25, 0x04	; 4
    9f42:	87 83       	std	Z+7, r24	; 0x07
    9f44:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWIC.SLAVE;
    9f46:	88 e8       	ldi	r24, 0x88	; 136
    9f48:	94 e0       	ldi	r25, 0x04	; 4
    9f4a:	81 87       	std	Z+9, r24	; 0x09
    9f4c:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_gConf);
    9f4e:	82 e0       	ldi	r24, 0x02	; 2
    9f50:	1f c0       	rjmp	.+62     	; 0x9f90 <hal_configureTwiChannel+0x102>

         break;

         case TWI_2:

            pt_twiChanHndl->pt_master = &TWID.MASTER;
    9f52:	81 e9       	ldi	r24, 0x91	; 145
    9f54:	94 e0       	ldi	r25, 0x04	; 4
    9f56:	f8 01       	movw	r30, r16
    9f58:	87 83       	std	Z+7, r24	; 0x07
    9f5a:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWID.SLAVE;
    9f5c:	88 e9       	ldi	r24, 0x98	; 152
    9f5e:	94 e0       	ldi	r25, 0x04	; 4
    9f60:	81 87       	std	Z+9, r24	; 0x09
    9f62:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_gConf);
    9f64:	83 e0       	ldi	r24, 0x03	; 3
    9f66:	14 c0       	rjmp	.+40     	; 0x9f90 <hal_configureTwiChannel+0x102>

         break;

         case TWI_3:

            pt_twiChanHndl->pt_master = &TWIE.MASTER;
    9f68:	81 ea       	ldi	r24, 0xA1	; 161
    9f6a:	94 e0       	ldi	r25, 0x04	; 4
    9f6c:	87 83       	std	Z+7, r24	; 0x07
    9f6e:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWIE.SLAVE;
    9f70:	88 ea       	ldi	r24, 0xA8	; 168
    9f72:	94 e0       	ldi	r25, 0x04	; 4
    9f74:	81 87       	std	Z+9, r24	; 0x09
    9f76:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_gConf);
    9f78:	84 e0       	ldi	r24, 0x04	; 4
    9f7a:	0a c0       	rjmp	.+20     	; 0x9f90 <hal_configureTwiChannel+0x102>

         break;

         case TWI_4:

            pt_twiChanHndl->pt_master = &TWIF.MASTER;
    9f7c:	81 eb       	ldi	r24, 0xB1	; 177
    9f7e:	94 e0       	ldi	r25, 0x04	; 4
    9f80:	f8 01       	movw	r30, r16
    9f82:	87 83       	std	Z+7, r24	; 0x07
    9f84:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWIF.SLAVE;
    9f86:	88 eb       	ldi	r24, 0xB8	; 184
    9f88:	94 e0       	ldi	r25, 0x04	; 4
    9f8a:	81 87       	std	Z+9, r24	; 0x09
    9f8c:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_gConf);
    9f8e:	85 e0       	ldi	r24, 0x05	; 5
    9f90:	2a 81       	ldd	r18, Y+2	; 0x02
    9f92:	3b 81       	ldd	r19, Y+3	; 0x03
    9f94:	4c 81       	ldd	r20, Y+4	; 0x04
    9f96:	5d 81       	ldd	r21, Y+5	; 0x05
    9f98:	6e 81       	ldd	r22, Y+6	; 0x06
    9f9a:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>

         break;

      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
    9f9e:	d8 01       	movw	r26, r16
    9fa0:	17 96       	adiw	r26, 0x07	; 7
    9fa2:	ed 91       	ld	r30, X+
    9fa4:	fc 91       	ld	r31, X
    9fa6:	18 97       	sbiw	r26, 0x08	; 8

}/*End createTwiHandle*/

static void hal_resetTwiMaster( TWI_MASTER_t *pt_master)
{
   pt_master->ADDR   = 0;
    9fa8:	15 82       	std	Z+5, r1	; 0x05
   pt_master->BAUD   = 0;
    9faa:	14 82       	std	Z+4, r1	; 0x04
   pt_master->CTRLA  = 0;
    9fac:	10 82       	st	Z, r1
   pt_master->CTRLB  = 0;
    9fae:	11 82       	std	Z+1, r1	; 0x01
   pt_master->CTRLC  = 0;
    9fb0:	12 82       	std	Z+2, r1	; 0x02
   pt_master->DATA   = 0;
    9fb2:	16 82       	std	Z+6, r1	; 0x06
   pt_master->STATUS = 0;
    9fb4:	13 82       	std	Z+3, r1	; 0x03
         break;

      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
      hal_resetTwiSlave( (TWI_SLAVE_t *)pt_twiChanHndl->pt_slave);
    9fb6:	19 96       	adiw	r26, 0x09	; 9
    9fb8:	ed 91       	ld	r30, X+
    9fba:	fc 91       	ld	r31, X
    9fbc:	1a 97       	sbiw	r26, 0x0a	; 10

}/*End hal_resetTwiMaster*/

static void hal_resetTwiSlave( TWI_SLAVE_t *pt_slave)
{
   pt_slave->ADDR     = 0;
    9fbe:	13 82       	std	Z+3, r1	; 0x03
   pt_slave->ADDRMASK = 0;
    9fc0:	15 82       	std	Z+5, r1	; 0x05
   pt_slave->CTRLA    = 0;
    9fc2:	10 82       	st	Z, r1
   pt_slave->CTRLB    = 0;
    9fc4:	11 82       	std	Z+1, r1	; 0x01
   pt_slave->DATA     = 0;
    9fc6:	14 82       	std	Z+4, r1	; 0x04
   pt_slave->STATUS   = 0;
    9fc8:	12 82       	std	Z+2, r1	; 0x02
      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
      hal_resetTwiSlave( (TWI_SLAVE_t *)pt_twiChanHndl->pt_slave);

      if( t_conf.t_mode == TWI_MASTER)
    9fca:	ff 20       	and	r15, r15
    9fcc:	e1 f5       	brne	.+120    	; 0xa046 <hal_configureTwiChannel+0x1b8>
          * Calculate the baud register setting which is defined in the users
          * manual. Where s_twmbr can range from 0 to 255, representing a max
          * frequency of getCpuFreq() / 5 and min frequency of getCpuFreq() /
          * 520.
          *------------------------------------------------------------------*/
         s_twmbr = (hal_getCpuFreq() / (2*t_conf.i_baud)) - 5;
    9fce:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    9fd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    9fd4:	3b 85       	ldd	r19, Y+11	; 0x0b
    9fd6:	4c 85       	ldd	r20, Y+12	; 0x0c
    9fd8:	5d 85       	ldd	r21, Y+13	; 0x0d
    9fda:	22 0f       	add	r18, r18
    9fdc:	33 1f       	adc	r19, r19
    9fde:	44 1f       	adc	r20, r20
    9fe0:	55 1f       	adc	r21, r21
    9fe2:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
    9fe6:	79 01       	movw	r14, r18

         if( (s_twmbr <= 0) || (s_twmbr > 255))
    9fe8:	c9 01       	movw	r24, r18
    9fea:	06 97       	sbiw	r24, 0x06	; 6
    9fec:	8f 3f       	cpi	r24, 0xFF	; 255
    9fee:	91 05       	cpc	r25, r1
    9ff0:	20 f0       	brcs	.+8      	; 0x9ffa <hal_configureTwiChannel+0x16c>
         {
            HAL_END_CRITICAL();//Enable interrupts
    9ff2:	89 81       	ldd	r24, Y+1	; 0x01
    9ff4:	8f bf       	out	0x3f, r24	; 63
            return TWI_INVALID_BAUD_RATE;
    9ff6:	8c ef       	ldi	r24, 0xFC	; 252
    9ff8:	62 c0       	rjmp	.+196    	; 0xa0be <hal_configureTwiChannel+0x230>
         }

         /*------------------------------------------------------------------*
          * We are not using the slave channel.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave = NULL;
    9ffa:	f8 01       	movw	r30, r16
    9ffc:	11 86       	std	Z+9, r1	; 0x09
    9ffe:	12 86       	std	Z+10, r1	; 0x0a
         //}/*End if( t_conf.b_mastPolling == false)*/

         /*------------------------------------------------------------------*
          * Enable master mode.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
    a000:	07 80       	ldd	r0, Z+7	; 0x07
    a002:	f0 85       	ldd	r31, Z+8	; 0x08
    a004:	e0 2d       	mov	r30, r0
    a006:	80 81       	ld	r24, Z
    a008:	88 60       	ori	r24, 0x08	; 8
    a00a:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Configure the baud rate.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->BAUD = s_twmbr;
    a00c:	d8 01       	movw	r26, r16
    a00e:	17 96       	adiw	r26, 0x07	; 7
    a010:	ed 91       	ld	r30, X+
    a012:	fc 91       	ld	r31, X
    a014:	18 97       	sbiw	r26, 0x08	; 8
          * Calculate the baud register setting which is defined in the users
          * manual. Where s_twmbr can range from 0 to 255, representing a max
          * frequency of getCpuFreq() / 5 and min frequency of getCpuFreq() /
          * 520.
          *------------------------------------------------------------------*/
         s_twmbr = (hal_getCpuFreq() / (2*t_conf.i_baud)) - 5;
    a016:	c9 01       	movw	r24, r18
    a018:	05 97       	sbiw	r24, 0x05	; 5
         pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;

         /*------------------------------------------------------------------*
          * Configure the baud rate.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->BAUD = s_twmbr;
    a01a:	84 83       	std	Z+4, r24	; 0x04

         /*------------------------------------------------------------------*
          * Configure the state of the bus.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    a01c:	17 96       	adiw	r26, 0x07	; 7
    a01e:	ed 91       	ld	r30, X+
    a020:	fc 91       	ld	r31, X
    a022:	18 97       	sbiw	r26, 0x08	; 8
    a024:	81 e0       	ldi	r24, 0x01	; 1
    a026:	83 83       	std	Z+3, r24	; 0x03

         /*------------------------------------------------------------------*
          * Back calculate the 'true' baud by taking the reverse of the
          * equation used to calculate s_twmbr.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->i_baudRate = (uint32_t)(hal_getCpuFreq() /
    a028:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
         ((uint16_t)2*((uint16_t)s_twmbr + (uint16_t)5)));
    a02c:	97 01       	movw	r18, r14
    a02e:	22 0f       	add	r18, r18
    a030:	33 1f       	adc	r19, r19

         /*------------------------------------------------------------------*
          * Back calculate the 'true' baud by taking the reverse of the
          * equation used to calculate s_twmbr.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->i_baudRate = (uint32_t)(hal_getCpuFreq() /
    a032:	40 e0       	ldi	r20, 0x00	; 0
    a034:	50 e0       	ldi	r21, 0x00	; 0
    a036:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
    a03a:	f8 01       	movw	r30, r16
    a03c:	22 83       	std	Z+2, r18	; 0x02
    a03e:	33 83       	std	Z+3, r19	; 0x03
    a040:	44 83       	std	Z+4, r20	; 0x04
    a042:	55 83       	std	Z+5, r21	; 0x05
    a044:	34 c0       	rjmp	.+104    	; 0xa0ae <hal_configureTwiChannel+0x220>
      {

         /*------------------------------------------------------------------*
          * We are not using the master channel.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master = NULL;
    a046:	d8 01       	movw	r26, r16
    a048:	17 96       	adiw	r26, 0x07	; 7
    a04a:	1d 92       	st	X+, r1
    a04c:	1c 92       	st	X, r1
    a04e:	18 97       	sbiw	r26, 0x08	; 8

         /*------------------------------------------------------------------*
          * Configure high level interrupts.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_INTLVL_HI_gc;
    a050:	19 96       	adiw	r26, 0x09	; 9
    a052:	ed 91       	ld	r30, X+
    a054:	fc 91       	ld	r31, X
    a056:	1a 97       	sbiw	r26, 0x0a	; 10
    a058:	80 81       	ld	r24, Z
    a05a:	80 6c       	ori	r24, 0xC0	; 192
    a05c:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Enable data and stop interrupts.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_DIEN_bm;
    a05e:	19 96       	adiw	r26, 0x09	; 9
    a060:	ed 91       	ld	r30, X+
    a062:	fc 91       	ld	r31, X
    a064:	1a 97       	sbiw	r26, 0x0a	; 10
    a066:	80 81       	ld	r24, Z
    a068:	80 62       	ori	r24, 0x20	; 32
    a06a:	80 83       	st	Z, r24
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_APIEN_bm;
    a06c:	19 96       	adiw	r26, 0x09	; 9
    a06e:	ed 91       	ld	r30, X+
    a070:	fc 91       	ld	r31, X
    a072:	1a 97       	sbiw	r26, 0x0a	; 10
    a074:	80 81       	ld	r24, Z
    a076:	80 61       	ori	r24, 0x10	; 16
    a078:	80 83       	st	Z, r24
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_PIEN_bm;
    a07a:	19 96       	adiw	r26, 0x09	; 9
    a07c:	ed 91       	ld	r30, X+
    a07e:	fc 91       	ld	r31, X
    a080:	1a 97       	sbiw	r26, 0x0a	; 10
    a082:	80 81       	ld	r24, Z
    a084:	84 60       	ori	r24, 0x04	; 4
    a086:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Enable slave mode.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_ENABLE_bm;
    a088:	19 96       	adiw	r26, 0x09	; 9
    a08a:	ed 91       	ld	r30, X+
    a08c:	fc 91       	ld	r31, X
    a08e:	1a 97       	sbiw	r26, 0x0a	; 10
    a090:	80 81       	ld	r24, Z
    a092:	88 60       	ori	r24, 0x08	; 8
    a094:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Set the slave address.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->ADDR =  t_conf.c_slaveAddress << 1;
    a096:	19 96       	adiw	r26, 0x09	; 9
    a098:	ed 91       	ld	r30, X+
    a09a:	fc 91       	ld	r31, X
    a09c:	1a 97       	sbiw	r26, 0x0a	; 10
    a09e:	ee 0c       	add	r14, r14
    a0a0:	e3 82       	std	Z+3, r14	; 0x03

         /*------------------------------------------------------------------*
          * Store the call-back function
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pf_transComplete = t_conf.pf_transComplete;
    a0a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    a0a4:	98 89       	ldd	r25, Y+16	; 0x10
    a0a6:	1b 96       	adiw	r26, 0x0b	; 11
    a0a8:	8d 93       	st	X+, r24
    a0aa:	9c 93       	st	X, r25
    a0ac:	1c 97       	sbiw	r26, 0x0c	; 12
      }

      /*---------------------------------------------------------------------*
       * Reset the bus status.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl->t_status = TWI_IDLE;
    a0ae:	85 e0       	ldi	r24, 0x05	; 5
    a0b0:	f8 01       	movw	r30, r16
    a0b2:	86 83       	std	Z+6, r24	; 0x06

      /*---------------------------------------------------------------------*
       * Configuration completed.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl->b_validConfig = true;
    a0b4:	81 e0       	ldi	r24, 0x01	; 1
    a0b6:	81 83       	std	Z+1, r24	; 0x01

   }

   HAL_END_CRITICAL();//Enable interrupts
    a0b8:	89 81       	ldd	r24, Y+1	; 0x01
    a0ba:	8f bf       	out	0x3f, r24	; 63

   return TWI_PASSED;
    a0bc:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_configureTwiChannel*/
    a0be:	60 96       	adiw	r28, 0x10	; 16
    a0c0:	cd bf       	out	0x3d, r28	; 61
    a0c2:	de bf       	out	0x3e, r29	; 62
    a0c4:	df 91       	pop	r29
    a0c6:	cf 91       	pop	r28
    a0c8:	1f 91       	pop	r17
    a0ca:	0f 91       	pop	r16
    a0cc:	ff 90       	pop	r15
    a0ce:	ef 90       	pop	r14
    a0d0:	08 95       	ret

0000a0d2 <hal_twiMasterWrite>:
t_twiError hal_twiMasterWrite( t_TWIHNDL t_handle,
                               uint8_t *pc_data,
                               uint16_t s_length,
                               uint8_t c_slaveAdd,
                               int8_t c_numRetries)
{
    a0d2:	2f 92       	push	r2
    a0d4:	3f 92       	push	r3
    a0d6:	4f 92       	push	r4
    a0d8:	5f 92       	push	r5
    a0da:	6f 92       	push	r6
    a0dc:	7f 92       	push	r7
    a0de:	8f 92       	push	r8
    a0e0:	9f 92       	push	r9
    a0e2:	af 92       	push	r10
    a0e4:	bf 92       	push	r11
    a0e6:	cf 92       	push	r12
    a0e8:	df 92       	push	r13
    a0ea:	ef 92       	push	r14
    a0ec:	ff 92       	push	r15
    a0ee:	0f 93       	push	r16
    a0f0:	1f 93       	push	r17
    a0f2:	cf 93       	push	r28
    a0f4:	df 93       	push	r29
    a0f6:	cd b7       	in	r28, 0x3d	; 61
    a0f8:	de b7       	in	r29, 0x3e	; 62
    a0fa:	e8 97       	sbiw	r28, 0x38	; 56
    a0fc:	cd bf       	out	0x3d, r28	; 61
    a0fe:	de bf       	out	0x3e, r29	; 62
    a100:	8e 8f       	std	Y+30, r24	; 0x1e
    a102:	9f 8f       	std	Y+31, r25	; 0x1f
    a104:	1b 01       	movw	r2, r22
    a106:	2a 01       	movw	r4, r20
    a108:	f0 2e       	mov	r15, r16
   volatile int32_t i_deltaUsec;
   
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a twi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_twiChanHndlList) == 
    a10a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    a10c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    a10e:	40 91 36 21 	lds	r20, 0x2136
    a112:	50 91 37 21 	lds	r21, 0x2137
    a116:	84 81       	ldd	r24, Z+4	; 0x04
    a118:	95 81       	ldd	r25, Z+5	; 0x05
    a11a:	84 17       	cp	r24, r20
    a11c:	95 07       	cpc	r25, r21
    a11e:	09 f0       	breq	.+2      	; 0xa122 <hal_twiMasterWrite+0x50>
    a120:	b9 c0       	rjmp	.+370    	; 0xa294 <hal_twiMasterWrite+0x1c2>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    a122:	ee 8d       	ldd	r30, Y+30	; 0x1e
    a124:	ff 8d       	ldd	r31, Y+31	; 0x1f
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
    a126:	00 81       	ld	r16, Z
    a128:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Is this handle opened against a master twi?
       *---------------------------------------------------------------------*/
      if( pt_twiChanHndl->pt_master != NULL)
    a12a:	d8 01       	movw	r26, r16
    a12c:	17 96       	adiw	r26, 0x07	; 7
    a12e:	8d 91       	ld	r24, X+
    a130:	9c 91       	ld	r25, X
    a132:	18 97       	sbiw	r26, 0x08	; 8
    a134:	00 97       	sbiw	r24, 0x00	; 0
    a136:	09 f4       	brne	.+2      	; 0xa13a <hal_twiMasterWrite+0x68>
    a138:	af c0       	rjmp	.+350    	; 0xa298 <hal_twiMasterWrite+0x1c6>
      {
         
         pt_twiChanHndl->t_status = TWI_TRANSACTION_BUSY;
    a13a:	16 96       	adiw	r26, 0x06	; 6
    a13c:	1c 92       	st	X, r1
    a13e:	16 97       	sbiw	r26, 0x06	; 6
            /*---------------------------------------------------------------*
             * Begin write operation by copying the slave address into this
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;
    a140:	e2 2e       	mov	r14, r18
    a142:	ee 0c       	add	r14, r14
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pc_data    = pc_data;
            pt_twiChanHndl->s_length   = s_length;
            pt_twiChanHndl->s_bufIndex = 0;

            pt_twiChanHndl->t_lastIntTime = arb_sysTimeNow();
    a144:	f3 e1       	ldi	r31, 0x13	; 19
    a146:	6f 2e       	mov	r6, r31
    a148:	71 2c       	mov	r7, r1
    a14a:	60 0e       	add	r6, r16
    a14c:	71 1e       	adc	r7, r17
                   * Reset the module so that we can recover from the locked
                   * bus condition...
                   *---------------------------------------------------------*/
                  pt_twiChanHndl->pt_master->CTRLA &= ~TWI_MASTER_ENABLE_bm;
                  pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
                  pt_twiChanHndl->t_status = TWI_BUS_LOCKED;
    a14e:	8a e0       	ldi	r24, 0x0A	; 10
    a150:	d8 2e       	mov	r13, r24

                  pt_twiChanHndl->pt_master->STATUS = 
    a152:	cc 24       	eor	r12, r12
    a154:	c3 94       	inc	r12

               i_deltaUsec = t_currTime.i_usec - pt_twiChanHndl->t_lastIntTime.
               i_usec;

               if( i_deltaUsec < 0)
                  i_deltaUsec = TWI_BUS_RESET_TIMEOUT;
    a156:	90 e2       	ldi	r25, 0x20	; 32
    a158:	89 2e       	mov	r8, r25
    a15a:	91 ea       	ldi	r25, 0xA1	; 161
    a15c:	99 2e       	mov	r9, r25
    a15e:	97 e0       	ldi	r25, 0x07	; 7
    a160:	a9 2e       	mov	r10, r25
    a162:	b1 2c       	mov	r11, r1

         /*------------------------------------------------------------------*
          * Keep retrying the transaction until it completes, or hits the
          * timeout condition.
          *------------------------------------------------------------------*/
         while( (pt_twiChanHndl->t_status != TWI_TRANS_COMPLETE) &&
    a164:	90 c0       	rjmp	.+288    	; 0xa286 <hal_twiMasterWrite+0x1b4>
         {

            /*---------------------------------------------------------------*
             * Wait for the bus to become available...
             *---------------------------------------------------------------*/
            while( !((pt_twiChanHndl->pt_master->STATUS & 
    a166:	d8 01       	movw	r26, r16
    a168:	17 96       	adiw	r26, 0x07	; 7
    a16a:	ed 91       	ld	r30, X+
    a16c:	fc 91       	ld	r31, X
    a16e:	18 97       	sbiw	r26, 0x08	; 8
    a170:	83 81       	ldd	r24, Z+3	; 0x03
    a172:	83 70       	andi	r24, 0x03	; 3
    a174:	81 30       	cpi	r24, 0x01	; 1
    a176:	b9 f7       	brne	.-18     	; 0xa166 <hal_twiMasterWrite+0x94>

            /*---------------------------------------------------------------*
             * Store the address and length of the data buffer this particular
             * twi is accessing.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pc_data    = pc_data;
    a178:	1d 96       	adiw	r26, 0x0d	; 13
    a17a:	2d 92       	st	X+, r2
    a17c:	3c 92       	st	X, r3
    a17e:	1e 97       	sbiw	r26, 0x0e	; 14
            pt_twiChanHndl->s_length   = s_length;
    a180:	1f 96       	adiw	r26, 0x0f	; 15
    a182:	4d 92       	st	X+, r4
    a184:	5c 92       	st	X, r5
    a186:	50 97       	sbiw	r26, 0x10	; 16
            pt_twiChanHndl->s_bufIndex = 0;
    a188:	51 96       	adiw	r26, 0x11	; 17
    a18a:	1d 92       	st	X+, r1
    a18c:	1c 92       	st	X, r1
    a18e:	52 97       	sbiw	r26, 0x12	; 18

            pt_twiChanHndl->t_lastIntTime = arb_sysTimeNow();
    a190:	ce 01       	movw	r24, r28
    a192:	80 96       	adiw	r24, 0x20	; 32
    a194:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>
    a198:	f3 01       	movw	r30, r6
    a19a:	de 01       	movw	r26, r28
    a19c:	90 96       	adiw	r26, 0x20	; 32
    a19e:	89 e1       	ldi	r24, 0x19	; 25
    a1a0:	0d 90       	ld	r0, X+
    a1a2:	01 92       	st	Z+, r0
    a1a4:	81 50       	subi	r24, 0x01	; 1
    a1a6:	e1 f7       	brne	.-8      	; 0xa1a0 <hal_twiMasterWrite+0xce>
            /*---------------------------------------------------------------*
             * Begin write operation by copying the slave address into this
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;
    a1a8:	d8 01       	movw	r26, r16
    a1aa:	17 96       	adiw	r26, 0x07	; 7
    a1ac:	ed 91       	ld	r30, X+
    a1ae:	fc 91       	ld	r31, X
    a1b0:	18 97       	sbiw	r26, 0x08	; 8
    a1b2:	e5 82       	std	Z+5, r14	; 0x05

            while( !((pt_twiChanHndl->pt_master->STATUS & 
    a1b4:	5d c0       	rjmp	.+186    	; 0xa270 <hal_twiMasterWrite+0x19e>
            TWI_MASTER_BUSSTATE_gm) == TWI_MASTER_BUSSTATE_IDLE_gc))
            {

               hal_masterInterrupt( pt_twiChanHndl);
    a1b6:	c8 01       	movw	r24, r16
    a1b8:	0e 94 62 4c 	call	0x98c4	; 0x98c4 <hal_masterInterrupt>

               t_currTime = arb_sysTimeNow();
    a1bc:	ce 01       	movw	r24, r28
    a1be:	05 96       	adiw	r24, 0x05	; 5
    a1c0:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>

               i_deltaUsec = t_currTime.i_usec - pt_twiChanHndl->t_lastIntTime.
    a1c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a1c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a1c8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    a1ca:	bd 8d       	ldd	r27, Y+29	; 0x1d
    a1cc:	f8 01       	movw	r30, r16
    a1ce:	40 a5       	lds	r20, 0x60
    a1d0:	51 a5       	lds	r21, 0x61
    a1d2:	62 a5       	lds	r22, 0x62
    a1d4:	73 a5       	lds	r23, 0x63
    a1d6:	84 1b       	sub	r24, r20
    a1d8:	95 0b       	sbc	r25, r21
    a1da:	a6 0b       	sbc	r26, r22
    a1dc:	b7 0b       	sbc	r27, r23
    a1de:	89 83       	std	Y+1, r24	; 0x01
    a1e0:	9a 83       	std	Y+2, r25	; 0x02
    a1e2:	ab 83       	std	Y+3, r26	; 0x03
    a1e4:	bc 83       	std	Y+4, r27	; 0x04
               i_usec;

               if( i_deltaUsec < 0)
    a1e6:	89 81       	ldd	r24, Y+1	; 0x01
    a1e8:	9a 81       	ldd	r25, Y+2	; 0x02
    a1ea:	ab 81       	ldd	r26, Y+3	; 0x03
    a1ec:	bc 81       	ldd	r27, Y+4	; 0x04
    a1ee:	b7 ff       	sbrs	r27, 7
    a1f0:	04 c0       	rjmp	.+8      	; 0xa1fa <hal_twiMasterWrite+0x128>
                  i_deltaUsec = TWI_BUS_RESET_TIMEOUT;
    a1f2:	89 82       	std	Y+1, r8	; 0x01
    a1f4:	9a 82       	std	Y+2, r9	; 0x02
    a1f6:	ab 82       	std	Y+3, r10	; 0x03
    a1f8:	bc 82       	std	Y+4, r11	; 0x04

               if( i_deltaUsec >= 1000000)
    a1fa:	89 81       	ldd	r24, Y+1	; 0x01
    a1fc:	9a 81       	ldd	r25, Y+2	; 0x02
    a1fe:	ab 81       	ldd	r26, Y+3	; 0x03
    a200:	bc 81       	ldd	r27, Y+4	; 0x04
    a202:	80 34       	cpi	r24, 0x40	; 64
    a204:	f2 e4       	ldi	r31, 0x42	; 66
    a206:	9f 07       	cpc	r25, r31
    a208:	ff e0       	ldi	r31, 0x0F	; 15
    a20a:	af 07       	cpc	r26, r31
    a20c:	f0 e0       	ldi	r31, 0x00	; 0
    a20e:	bf 07       	cpc	r27, r31
    a210:	64 f0       	brlt	.+24     	; 0xa22a <hal_twiMasterWrite+0x158>
                  i_deltaUsec -= 1000000;
    a212:	89 81       	ldd	r24, Y+1	; 0x01
    a214:	9a 81       	ldd	r25, Y+2	; 0x02
    a216:	ab 81       	ldd	r26, Y+3	; 0x03
    a218:	bc 81       	ldd	r27, Y+4	; 0x04
    a21a:	80 54       	subi	r24, 0x40	; 64
    a21c:	92 44       	sbci	r25, 0x42	; 66
    a21e:	af 40       	sbci	r26, 0x0F	; 15
    a220:	b0 40       	sbci	r27, 0x00	; 0
    a222:	89 83       	std	Y+1, r24	; 0x01
    a224:	9a 83       	std	Y+2, r25	; 0x02
    a226:	ab 83       	std	Y+3, r26	; 0x03
    a228:	bc 83       	std	Y+4, r27	; 0x04

               /*------------------------------------------------------------*
                * Have we encountered a bus lock condition?
                *------------------------------------------------------------*/
               if( i_deltaUsec >= TWI_BUS_RESET_TIMEOUT)
    a22a:	89 81       	ldd	r24, Y+1	; 0x01
    a22c:	9a 81       	ldd	r25, Y+2	; 0x02
    a22e:	ab 81       	ldd	r26, Y+3	; 0x03
    a230:	bc 81       	ldd	r27, Y+4	; 0x04
    a232:	80 32       	cpi	r24, 0x20	; 32
    a234:	21 ea       	ldi	r18, 0xA1	; 161
    a236:	92 07       	cpc	r25, r18
    a238:	27 e0       	ldi	r18, 0x07	; 7
    a23a:	a2 07       	cpc	r26, r18
    a23c:	20 e0       	ldi	r18, 0x00	; 0
    a23e:	b2 07       	cpc	r27, r18
    a240:	bc f0       	brlt	.+46     	; 0xa270 <hal_twiMasterWrite+0x19e>
               {
                  /*---------------------------------------------------------*
                   * Reset the module so that we can recover from the locked
                   * bus condition...
                   *---------------------------------------------------------*/
                  pt_twiChanHndl->pt_master->CTRLA &= ~TWI_MASTER_ENABLE_bm;
    a242:	d8 01       	movw	r26, r16
    a244:	17 96       	adiw	r26, 0x07	; 7
    a246:	ed 91       	ld	r30, X+
    a248:	fc 91       	ld	r31, X
    a24a:	18 97       	sbiw	r26, 0x08	; 8
    a24c:	80 81       	ld	r24, Z
    a24e:	87 7f       	andi	r24, 0xF7	; 247
    a250:	80 83       	st	Z, r24
                  pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
    a252:	17 96       	adiw	r26, 0x07	; 7
    a254:	ed 91       	ld	r30, X+
    a256:	fc 91       	ld	r31, X
    a258:	18 97       	sbiw	r26, 0x08	; 8
    a25a:	80 81       	ld	r24, Z
    a25c:	88 60       	ori	r24, 0x08	; 8
    a25e:	80 83       	st	Z, r24
                  pt_twiChanHndl->t_status = TWI_BUS_LOCKED;
    a260:	16 96       	adiw	r26, 0x06	; 6
    a262:	dc 92       	st	X, r13
    a264:	16 97       	sbiw	r26, 0x06	; 6

                  pt_twiChanHndl->pt_master->STATUS = 
    a266:	17 96       	adiw	r26, 0x07	; 7
    a268:	ed 91       	ld	r30, X+
    a26a:	fc 91       	ld	r31, X
    a26c:	18 97       	sbiw	r26, 0x08	; 8
    a26e:	c3 82       	std	Z+3, r12	; 0x03
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;

            while( !((pt_twiChanHndl->pt_master->STATUS & 
    a270:	d8 01       	movw	r26, r16
    a272:	17 96       	adiw	r26, 0x07	; 7
    a274:	ed 91       	ld	r30, X+
    a276:	fc 91       	ld	r31, X
    a278:	18 97       	sbiw	r26, 0x08	; 8
    a27a:	83 81       	ldd	r24, Z+3	; 0x03
    a27c:	83 70       	andi	r24, 0x03	; 3
    a27e:	81 30       	cpi	r24, 0x01	; 1
    a280:	09 f0       	breq	.+2      	; 0xa284 <hal_twiMasterWrite+0x1b2>
    a282:	99 cf       	rjmp	.-206    	; 0xa1b6 <hal_twiMasterWrite+0xe4>

               }/*End if( i_deltaUsec >= TWI_BUS_RESET_TIMEOUT)*/

            }

            c_numRetries--;
    a284:	fa 94       	dec	r15

         /*------------------------------------------------------------------*
          * Keep retrying the transaction until it completes, or hits the
          * timeout condition.
          *------------------------------------------------------------------*/
         while( (pt_twiChanHndl->t_status != TWI_TRANS_COMPLETE) &&
    a286:	f8 01       	movw	r30, r16
    a288:	86 81       	ldd	r24, Z+6	; 0x06
    a28a:	84 30       	cpi	r24, 0x04	; 4
    a28c:	39 f0       	breq	.+14     	; 0xa29c <hal_twiMasterWrite+0x1ca>
    a28e:	f7 fe       	sbrs	r15, 7
    a290:	6a cf       	rjmp	.-300    	; 0xa166 <hal_twiMasterWrite+0x94>
    a292:	04 c0       	rjmp	.+8      	; 0xa29c <hal_twiMasterWrite+0x1ca>
    * Is this a valid handle to a twi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_twiChanHndlList) == 
   false)
   {
      return TWI_INVALID_HANDLE;
    a294:	8e ef       	ldi	r24, 0xFE	; 254
    a296:	03 c0       	rjmp	.+6      	; 0xa29e <hal_twiMasterWrite+0x1cc>
            c_numRetries--;
         }

      }/*End if( pt_twiChanHndl->pt_master != NULL)*/
      else
         return TWI_CHAN_NOT_MASTER;
    a298:	88 ef       	ldi	r24, 0xF8	; 248
    a29a:	01 c0       	rjmp	.+2      	; 0xa29e <hal_twiMasterWrite+0x1cc>
      
   }

   return TWI_PASSED;
    a29c:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_twiMasterWrite*/
    a29e:	e8 96       	adiw	r28, 0x38	; 56
    a2a0:	cd bf       	out	0x3d, r28	; 61
    a2a2:	de bf       	out	0x3e, r29	; 62
    a2a4:	df 91       	pop	r29
    a2a6:	cf 91       	pop	r28
    a2a8:	1f 91       	pop	r17
    a2aa:	0f 91       	pop	r16
    a2ac:	ff 90       	pop	r15
    a2ae:	ef 90       	pop	r14
    a2b0:	df 90       	pop	r13
    a2b2:	cf 90       	pop	r12
    a2b4:	bf 90       	pop	r11
    a2b6:	af 90       	pop	r10
    a2b8:	9f 90       	pop	r9
    a2ba:	8f 90       	pop	r8
    a2bc:	7f 90       	pop	r7
    a2be:	6f 90       	pop	r6
    a2c0:	5f 90       	pop	r5
    a2c2:	4f 90       	pop	r4
    a2c4:	3f 90       	pop	r3
    a2c6:	2f 90       	pop	r2
    a2c8:	08 95       	ret

0000a2ca <uart1TxDmaInt>:
   }/*End if( pt_handle != NULL)*/

}/*End uart8RxDmaInt*/

static void uart1TxDmaInt( void)
{
    a2ca:	cf 93       	push	r28
    a2cc:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a2ce:	c0 91 84 24 	lds	r28, 0x2484
    a2d2:	d0 91 85 24 	lds	r29, 0x2485

   if( pt_handle != NULL)
    a2d6:	20 97       	sbiw	r28, 0x00	; 0
    a2d8:	71 f0       	breq	.+28     	; 0xa2f6 <uart1TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a2da:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a2dc:	f8 a1       	lds	r31, 0x48
    a2de:	30 97       	sbiw	r30, 0x00	; 0
    a2e0:	19 f0       	breq	.+6      	; 0xa2e8 <uart1TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a2e2:	89 89       	ldd	r24, Y+17	; 0x11
    a2e4:	9a 89       	ldd	r25, Y+18	; 0x12
    a2e6:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a2e8:	1d 86       	std	Y+13, r1	; 0x0d
    a2ea:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a2ec:	1d 8a       	std	Y+21, r1	; 0x15
    a2ee:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a2f0:	19 8a       	std	Y+17, r1	; 0x11
    a2f2:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a2f4:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart1TxDmaInt*/
    a2f6:	df 91       	pop	r29
    a2f8:	cf 91       	pop	r28
    a2fa:	08 95       	ret

0000a2fc <uart2TxDmaInt>:

static void uart2TxDmaInt( void)
{
    a2fc:	cf 93       	push	r28
    a2fe:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a300:	c0 91 86 24 	lds	r28, 0x2486
    a304:	d0 91 87 24 	lds	r29, 0x2487

   if( pt_handle != NULL)
    a308:	20 97       	sbiw	r28, 0x00	; 0
    a30a:	71 f0       	breq	.+28     	; 0xa328 <uart2TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a30c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a30e:	f8 a1       	lds	r31, 0x48
    a310:	30 97       	sbiw	r30, 0x00	; 0
    a312:	19 f0       	breq	.+6      	; 0xa31a <uart2TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a314:	89 89       	ldd	r24, Y+17	; 0x11
    a316:	9a 89       	ldd	r25, Y+18	; 0x12
    a318:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a31a:	1d 86       	std	Y+13, r1	; 0x0d
    a31c:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a31e:	1d 8a       	std	Y+21, r1	; 0x15
    a320:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a322:	19 8a       	std	Y+17, r1	; 0x11
    a324:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a326:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart2TxDmaInt*/
    a328:	df 91       	pop	r29
    a32a:	cf 91       	pop	r28
    a32c:	08 95       	ret

0000a32e <uart3TxDmaInt>:

static void uart3TxDmaInt( void)
{
    a32e:	cf 93       	push	r28
    a330:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a332:	c0 91 88 24 	lds	r28, 0x2488
    a336:	d0 91 89 24 	lds	r29, 0x2489

   if( pt_handle != NULL)
    a33a:	20 97       	sbiw	r28, 0x00	; 0
    a33c:	71 f0       	breq	.+28     	; 0xa35a <uart3TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a33e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a340:	f8 a1       	lds	r31, 0x48
    a342:	30 97       	sbiw	r30, 0x00	; 0
    a344:	19 f0       	breq	.+6      	; 0xa34c <uart3TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a346:	89 89       	ldd	r24, Y+17	; 0x11
    a348:	9a 89       	ldd	r25, Y+18	; 0x12
    a34a:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a34c:	1d 86       	std	Y+13, r1	; 0x0d
    a34e:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a350:	1d 8a       	std	Y+21, r1	; 0x15
    a352:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a354:	19 8a       	std	Y+17, r1	; 0x11
    a356:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a358:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart3TxDmaInt*/
    a35a:	df 91       	pop	r29
    a35c:	cf 91       	pop	r28
    a35e:	08 95       	ret

0000a360 <uart4TxDmaInt>:

static void uart4TxDmaInt( void)
{
    a360:	cf 93       	push	r28
    a362:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a364:	c0 91 8a 24 	lds	r28, 0x248A
    a368:	d0 91 8b 24 	lds	r29, 0x248B

   if( pt_handle != NULL)
    a36c:	20 97       	sbiw	r28, 0x00	; 0
    a36e:	71 f0       	breq	.+28     	; 0xa38c <uart4TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a370:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a372:	f8 a1       	lds	r31, 0x48
    a374:	30 97       	sbiw	r30, 0x00	; 0
    a376:	19 f0       	breq	.+6      	; 0xa37e <uart4TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a378:	89 89       	ldd	r24, Y+17	; 0x11
    a37a:	9a 89       	ldd	r25, Y+18	; 0x12
    a37c:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a37e:	1d 86       	std	Y+13, r1	; 0x0d
    a380:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a382:	1d 8a       	std	Y+21, r1	; 0x15
    a384:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a386:	19 8a       	std	Y+17, r1	; 0x11
    a388:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a38a:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart4TxDmaInt*/
    a38c:	df 91       	pop	r29
    a38e:	cf 91       	pop	r28
    a390:	08 95       	ret

0000a392 <uart5TxDmaInt>:

static void uart5TxDmaInt( void)
{
    a392:	cf 93       	push	r28
    a394:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a396:	c0 91 8c 24 	lds	r28, 0x248C
    a39a:	d0 91 8d 24 	lds	r29, 0x248D

   if( pt_handle != NULL)
    a39e:	20 97       	sbiw	r28, 0x00	; 0
    a3a0:	71 f0       	breq	.+28     	; 0xa3be <uart5TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a3a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a3a4:	f8 a1       	lds	r31, 0x48
    a3a6:	30 97       	sbiw	r30, 0x00	; 0
    a3a8:	19 f0       	breq	.+6      	; 0xa3b0 <uart5TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a3aa:	89 89       	ldd	r24, Y+17	; 0x11
    a3ac:	9a 89       	ldd	r25, Y+18	; 0x12
    a3ae:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a3b0:	1d 86       	std	Y+13, r1	; 0x0d
    a3b2:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a3b4:	1d 8a       	std	Y+21, r1	; 0x15
    a3b6:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a3b8:	19 8a       	std	Y+17, r1	; 0x11
    a3ba:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a3bc:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart5TxDmaInt*/
    a3be:	df 91       	pop	r29
    a3c0:	cf 91       	pop	r28
    a3c2:	08 95       	ret

0000a3c4 <uart6TxDmaInt>:

static void uart6TxDmaInt( void)
{
    a3c4:	cf 93       	push	r28
    a3c6:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    a3c8:	c0 91 8e 24 	lds	r28, 0x248E
    a3cc:	d0 91 8f 24 	lds	r29, 0x248F

   if( pt_handle != NULL)
    a3d0:	20 97       	sbiw	r28, 0x00	; 0
    a3d2:	71 f0       	breq	.+28     	; 0xa3f0 <uart6TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a3d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a3d6:	f8 a1       	lds	r31, 0x48
    a3d8:	30 97       	sbiw	r30, 0x00	; 0
    a3da:	19 f0       	breq	.+6      	; 0xa3e2 <uart6TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a3dc:	89 89       	ldd	r24, Y+17	; 0x11
    a3de:	9a 89       	ldd	r25, Y+18	; 0x12
    a3e0:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a3e2:	1d 86       	std	Y+13, r1	; 0x0d
    a3e4:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a3e6:	1d 8a       	std	Y+21, r1	; 0x15
    a3e8:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a3ea:	19 8a       	std	Y+17, r1	; 0x11
    a3ec:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a3ee:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart6TxDmaInt*/
    a3f0:	df 91       	pop	r29
    a3f2:	cf 91       	pop	r28
    a3f4:	08 95       	ret

0000a3f6 <uart7TxDmaInt>:

static void uart7TxDmaInt( void)
{
    a3f6:	cf 93       	push	r28
    a3f8:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    a3fa:	c0 91 90 24 	lds	r28, 0x2490
    a3fe:	d0 91 91 24 	lds	r29, 0x2491

   if( pt_handle != NULL)
    a402:	20 97       	sbiw	r28, 0x00	; 0
    a404:	71 f0       	breq	.+28     	; 0xa422 <uart7TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a406:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a408:	f8 a1       	lds	r31, 0x48
    a40a:	30 97       	sbiw	r30, 0x00	; 0
    a40c:	19 f0       	breq	.+6      	; 0xa414 <uart7TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a40e:	89 89       	ldd	r24, Y+17	; 0x11
    a410:	9a 89       	ldd	r25, Y+18	; 0x12
    a412:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a414:	1d 86       	std	Y+13, r1	; 0x0d
    a416:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a418:	1d 8a       	std	Y+21, r1	; 0x15
    a41a:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a41c:	19 8a       	std	Y+17, r1	; 0x11
    a41e:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a420:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart7TxDmaInt*/
    a422:	df 91       	pop	r29
    a424:	cf 91       	pop	r28
    a426:	08 95       	ret

0000a428 <uart8TxDmaInt>:

static void uart8TxDmaInt( void)
{
    a428:	cf 93       	push	r28
    a42a:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    a42c:	c0 91 92 24 	lds	r28, 0x2492
    a430:	d0 91 93 24 	lds	r29, 0x2493

   if( pt_handle != NULL)
    a434:	20 97       	sbiw	r28, 0x00	; 0
    a436:	71 f0       	breq	.+28     	; 0xa454 <uart8TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a438:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a43a:	f8 a1       	lds	r31, 0x48
    a43c:	30 97       	sbiw	r30, 0x00	; 0
    a43e:	19 f0       	breq	.+6      	; 0xa446 <uart8TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a440:	89 89       	ldd	r24, Y+17	; 0x11
    a442:	9a 89       	ldd	r25, Y+18	; 0x12
    a444:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a446:	1d 86       	std	Y+13, r1	; 0x0d
    a448:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a44a:	1d 8a       	std	Y+21, r1	; 0x15
    a44c:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a44e:	19 8a       	std	Y+17, r1	; 0x11
    a450:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a452:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart8TxDmaInt*/
    a454:	df 91       	pop	r29
    a456:	cf 91       	pop	r28
    a458:	08 95       	ret

0000a45a <updateRxDmaInt>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void updateRxDmaInt( t_uartChanHndl *pt_handle)
{
    a45a:	cf 93       	push	r28
    a45c:	df 93       	push	r29
    a45e:	ec 01       	movw	r28, r24
   /*------------------------------------------------------------------------*
    * Disable the DMA channel.
    *------------------------------------------------------------------------*/
   hal_dmaDisableChannel( pt_handle->t_rxDmaHndl);
    a460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a464:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <hal_dmaDisableChannel>

   pt_handle->s_rxBufIndex = hal_getDmaTransferCount( pt_handle->t_rxDmaHndl);
    a468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a46a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a46c:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <hal_getDmaTransferCount>
    a470:	8f 8b       	std	Y+23, r24	; 0x17
    a472:	98 8f       	std	Y+24, r25	; 0x18

   /*------------------------------------------------------------------------*
    * Execute the call-back function, returning the size of the data.
    *------------------------------------------------------------------------*/
	if( pt_handle->pf_rxCallBack != NULL)
    a474:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a476:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a478:	30 97       	sbiw	r30, 0x00	; 0
    a47a:	09 f0       	breq	.+2      	; 0xa47e <updateRxDmaInt+0x24>
      pt_handle->pf_rxCallBack( pt_handle->s_rxBufIndex);
    a47c:	19 95       	eicall

   /*------------------------------------------------------------------------*
    * Release the RX UART bus.
    *------------------------------------------------------------------------*/
	pt_handle->b_rxBusLocked = false;
    a47e:	1c 86       	std	Y+12, r1	; 0x0c
   pt_handle->pc_rxData = NULL;
    a480:	1f 86       	std	Y+15, r1	; 0x0f
    a482:	18 8a       	std	Y+16, r1	; 0x10
   pt_handle->s_rxBufIndex = 0;
    a484:	1f 8a       	std	Y+23, r1	; 0x17
    a486:	18 8e       	std	Y+24, r1	; 0x18
   pt_handle->s_rxBufLength = 0;
    a488:	1b 8a       	std	Y+19, r1	; 0x13
    a48a:	1c 8a       	std	Y+20, r1	; 0x14

   /*------------------------------------------------------------------------*
    * Enable RX interrupts - so that the RX channel can be used for non DMA
    * transfers.
    *------------------------------------------------------------------------*/
   pt_handle->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    a48c:	e9 85       	ldd	r30, Y+9	; 0x09
    a48e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a490:	83 81       	ldd	r24, Z+3	; 0x03
    a492:	80 63       	ori	r24, 0x30	; 48
    a494:	83 83       	std	Z+3, r24	; 0x03

}/*End updateRxDmaInt*/
    a496:	df 91       	pop	r29
    a498:	cf 91       	pop	r28
    a49a:	08 95       	ret

0000a49c <uart8RxDmaInt>:

static void uart8RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    a49c:	80 91 92 24 	lds	r24, 0x2492
    a4a0:	90 91 93 24 	lds	r25, 0x2493

   if( pt_handle != NULL)
    a4a4:	00 97       	sbiw	r24, 0x00	; 0
    a4a6:	11 f0       	breq	.+4      	; 0xa4ac <uart8RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a4a8:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a4ac:	08 95       	ret

0000a4ae <uart7RxDmaInt>:

static void uart7RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    a4ae:	80 91 90 24 	lds	r24, 0x2490
    a4b2:	90 91 91 24 	lds	r25, 0x2491

   if( pt_handle != NULL)
    a4b6:	00 97       	sbiw	r24, 0x00	; 0
    a4b8:	11 f0       	breq	.+4      	; 0xa4be <uart7RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a4ba:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a4be:	08 95       	ret

0000a4c0 <uart6RxDmaInt>:

static void uart6RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    a4c0:	80 91 8e 24 	lds	r24, 0x248E
    a4c4:	90 91 8f 24 	lds	r25, 0x248F

   if( pt_handle != NULL)
    a4c8:	00 97       	sbiw	r24, 0x00	; 0
    a4ca:	11 f0       	breq	.+4      	; 0xa4d0 <uart6RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a4cc:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a4d0:	08 95       	ret

0000a4d2 <uart5RxDmaInt>:

static void uart5RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a4d2:	80 91 8c 24 	lds	r24, 0x248C
    a4d6:	90 91 8d 24 	lds	r25, 0x248D

   if( pt_handle != NULL)
    a4da:	00 97       	sbiw	r24, 0x00	; 0
    a4dc:	11 f0       	breq	.+4      	; 0xa4e2 <uart5RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a4de:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a4e2:	08 95       	ret

0000a4e4 <uart4RxDmaInt>:

static void uart4RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a4e4:	80 91 8a 24 	lds	r24, 0x248A
    a4e8:	90 91 8b 24 	lds	r25, 0x248B

   if( pt_handle != NULL)
    a4ec:	00 97       	sbiw	r24, 0x00	; 0
    a4ee:	11 f0       	breq	.+4      	; 0xa4f4 <uart4RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a4f0:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a4f4:	08 95       	ret

0000a4f6 <uart3RxDmaInt>:

static void uart3RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a4f6:	80 91 88 24 	lds	r24, 0x2488
    a4fa:	90 91 89 24 	lds	r25, 0x2489

   if( pt_handle != NULL)
    a4fe:	00 97       	sbiw	r24, 0x00	; 0
    a500:	11 f0       	breq	.+4      	; 0xa506 <uart3RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a502:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a506:	08 95       	ret

0000a508 <uart2RxDmaInt>:

static void uart2RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a508:	80 91 86 24 	lds	r24, 0x2486
    a50c:	90 91 87 24 	lds	r25, 0x2487

   if( pt_handle != NULL)
    a510:	00 97       	sbiw	r24, 0x00	; 0
    a512:	11 f0       	breq	.+4      	; 0xa518 <uart2RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a514:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a518:	08 95       	ret

0000a51a <uart1RxDmaInt>:

static void uart1RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a51a:	80 91 84 24 	lds	r24, 0x2484
    a51e:	90 91 85 24 	lds	r25, 0x2485

   if( pt_handle != NULL)
    a522:	00 97       	sbiw	r24, 0x00	; 0
    a524:	11 f0       	breq	.+4      	; 0xa52a <uart1RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    a526:	0e 94 2d 52 	call	0xa45a	; 0xa45a <updateRxDmaInt>
    a52a:	08 95       	ret

0000a52c <updateRxBuffer>:
   pt_handle->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;

}/*End updateRxDmaInt*/

static void updateRxBuffer( t_uartChanHndl *pt_handle)
{
    a52c:	cf 93       	push	r28
    a52e:	df 93       	push	r29
    a530:	ec 01       	movw	r28, r24
	int8_t *pc_rxBuf = pt_handle->pc_rxData;
    a532:	8f 85       	ldd	r24, Y+15	; 0x0f
    a534:	98 89       	ldd	r25, Y+16	; 0x10
	uint16_t *ps_bufIndex = &pt_handle->s_rxBufIndex;

   /*------------------------------------------------------------------------*
    * Is there a block transfer being performed?
    *------------------------------------------------------------------------*/
   if( pc_rxBuf == NULL) /*No*/
    a536:	00 97       	sbiw	r24, 0x00	; 0
    a538:	51 f4       	brne	.+20     	; 0xa54e <updateRxBuffer+0x22>

      /*---------------------------------------------------------------------*
       * Execute the call-back function returning the byte in the UART
       * buffer.
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_rxCallBack != NULL)
    a53a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a53c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a53e:	30 97       	sbiw	r30, 0x00	; 0
    a540:	11 f1       	breq	.+68     	; 0xa586 <updateRxBuffer+0x5a>
         pt_handle->pf_rxCallBack( (uint16_t)pt_handle->pt_uart->DATA);
    a542:	a9 85       	ldd	r26, Y+9	; 0x09
    a544:	ba 85       	ldd	r27, Y+10	; 0x0a
    a546:	8c 91       	ld	r24, X
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	19 95       	eicall
    a54c:	1c c0       	rjmp	.+56     	; 0xa586 <updateRxBuffer+0x5a>
   else
   {
      /*---------------------------------------------------------------------*
       * Store any received bytes...
       *---------------------------------------------------------------------*/
      pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_uart->DATA;
    a54e:	e9 85       	ldd	r30, Y+9	; 0x09
    a550:	fa 85       	ldd	r31, Y+10	; 0x0a
    a552:	20 81       	ld	r18, Z
    a554:	ef 89       	ldd	r30, Y+23	; 0x17
    a556:	f8 8d       	ldd	r31, Y+24	; 0x18
    a558:	e8 0f       	add	r30, r24
    a55a:	f9 1f       	adc	r31, r25
    a55c:	20 83       	st	Z, r18
      (*ps_bufIndex)++;
    a55e:	8f 89       	ldd	r24, Y+23	; 0x17
    a560:	98 8d       	ldd	r25, Y+24	; 0x18
    a562:	01 96       	adiw	r24, 0x01	; 1
    a564:	8f 8b       	std	Y+23, r24	; 0x17
    a566:	98 8f       	std	Y+24, r25	; 0x18

      /*---------------------------------------------------------------------*
       * Is there more room in the buffer
       *---------------------------------------------------------------------*/
	   if( (*ps_bufIndex) == pt_handle->s_rxBufLength) /*No*/
    a568:	2b 89       	ldd	r18, Y+19	; 0x13
    a56a:	3c 89       	ldd	r19, Y+20	; 0x14
    a56c:	82 17       	cp	r24, r18
    a56e:	93 07       	cpc	r25, r19
    a570:	51 f4       	brne	.+20     	; 0xa586 <updateRxBuffer+0x5a>
	   {
         /*------------------------------------------------------------------*
          * Execute the call-back function returning the size of the
          * transfer.
          *------------------------------------------------------------------*/
         if( pt_handle->pf_rxCallBack != NULL)
    a572:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a574:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a576:	30 97       	sbiw	r30, 0x00	; 0
    a578:	09 f0       	breq	.+2      	; 0xa57c <updateRxBuffer+0x50>
            pt_handle->pf_rxCallBack( (*ps_bufIndex));
    a57a:	19 95       	eicall

         pc_rxBuf = NULL;
         (*ps_bufIndex) = 0;
    a57c:	1f 8a       	std	Y+23, r1	; 0x17
    a57e:	18 8e       	std	Y+24, r1	; 0x18
         pt_handle->s_rxBufLength = 0;
    a580:	1b 8a       	std	Y+19, r1	; 0x13
    a582:	1c 8a       	std	Y+20, r1	; 0x14
         pt_handle->b_rxBusLocked = false;
    a584:	1c 86       	std	Y+12, r1	; 0x0c
	   }
   }

}/*End updateRxBuffer*/
    a586:	df 91       	pop	r29
    a588:	cf 91       	pop	r28
    a58a:	08 95       	ret

0000a58c <updateTxBuffer>:

static void updateTxBuffer( t_uartChanHndl *pt_handle)
{
    a58c:	cf 93       	push	r28
    a58e:	df 93       	push	r29
    a590:	ec 01       	movw	r28, r24
	int8_t *pc_txBuf = pt_handle->pc_txData;
    a592:	8d 85       	ldd	r24, Y+13	; 0x0d
    a594:	9e 85       	ldd	r25, Y+14	; 0x0e
	uint16_t *ps_bufIndex = &pt_handle->s_txBufIndex;

   if( pc_txBuf != NULL)
    a596:	00 97       	sbiw	r24, 0x00	; 0
    a598:	29 f1       	breq	.+74     	; 0xa5e4 <updateTxBuffer+0x58>
   {
	   /*------------------------------------------------------------------------*
	    * Send the data to the UART.
	    *------------------------------------------------------------------------*/
      pt_handle->pt_uart->DATA = pc_txBuf[(*ps_bufIndex)];
    a59a:	a9 85       	ldd	r26, Y+9	; 0x09
    a59c:	ba 85       	ldd	r27, Y+10	; 0x0a
    a59e:	ed 89       	ldd	r30, Y+21	; 0x15
    a5a0:	fe 89       	ldd	r31, Y+22	; 0x16
    a5a2:	e8 0f       	add	r30, r24
    a5a4:	f9 1f       	adc	r31, r25
    a5a6:	80 81       	ld	r24, Z
    a5a8:	8c 93       	st	X, r24
      (*ps_bufIndex)++;
    a5aa:	8d 89       	ldd	r24, Y+21	; 0x15
    a5ac:	9e 89       	ldd	r25, Y+22	; 0x16
    a5ae:	01 96       	adiw	r24, 0x01	; 1
    a5b0:	8d 8b       	std	Y+21, r24	; 0x15
    a5b2:	9e 8b       	std	Y+22, r25	; 0x16

	   /*------------------------------------------------------------------------*
	    * Is the buffer empty?
	    *------------------------------------------------------------------------*/
	   if( (*ps_bufIndex) == pt_handle->s_txBufLength)
    a5b4:	29 89       	ldd	r18, Y+17	; 0x11
    a5b6:	3a 89       	ldd	r19, Y+18	; 0x12
    a5b8:	82 17       	cp	r24, r18
    a5ba:	93 07       	cpc	r25, r19
    a5bc:	99 f4       	brne	.+38     	; 0xa5e4 <updateTxBuffer+0x58>
	   {
	      /*---------------------------------------------------------------------*
          * Disable interrupts until another interrupt driven block transfer has
          * been requested.
          *---------------------------------------------------------------------*/
         pt_handle->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    a5be:	e9 85       	ldd	r30, Y+9	; 0x09
    a5c0:	fa 85       	ldd	r31, Y+10	; 0x0a
    a5c2:	83 81       	ldd	r24, Z+3	; 0x03
    a5c4:	8c 7f       	andi	r24, 0xFC	; 252
    a5c6:	83 83       	std	Z+3, r24	; 0x03

         if( pt_handle->pf_txCallBack != NULL)
    a5c8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a5ca:	f8 a1       	lds	r31, 0x48
    a5cc:	30 97       	sbiw	r30, 0x00	; 0
    a5ce:	19 f0       	breq	.+6      	; 0xa5d6 <updateTxBuffer+0x4a>
            pt_handle->pf_txCallBack( (*ps_bufIndex));
    a5d0:	8d 89       	ldd	r24, Y+21	; 0x15
    a5d2:	9e 89       	ldd	r25, Y+22	; 0x16
    a5d4:	19 95       	eicall

         /*---------------------------------------------------------------------*
          * Release the TX UART bus.
          *---------------------------------------------------------------------*/
         pt_handle->pc_txData = NULL;
    a5d6:	1d 86       	std	Y+13, r1	; 0x0d
    a5d8:	1e 86       	std	Y+14, r1	; 0x0e
         pt_handle->s_txBufIndex = 0;
    a5da:	1d 8a       	std	Y+21, r1	; 0x15
    a5dc:	1e 8a       	std	Y+22, r1	; 0x16
         pt_handle->s_txBufLength = 0;
    a5de:	19 8a       	std	Y+17, r1	; 0x11
    a5e0:	1a 8a       	std	Y+18, r1	; 0x12
         pt_handle->b_txBusLocked = false;
    a5e2:	1b 86       	std	Y+11, r1	; 0x0b
	   }

   }/*End if( pc_txBuf != NULL)*/

}/*End updateTxBuffer*/
    a5e4:	df 91       	pop	r29
    a5e6:	cf 91       	pop	r28
    a5e8:	08 95       	ret

0000a5ea <__vector_25>:
   }

}/*End uart8TxDmaInt*/

ISR( USARTC0_RXC_vect)
{
    a5ea:	1f 92       	push	r1
    a5ec:	0f 92       	push	r0
    a5ee:	0f b6       	in	r0, 0x3f	; 63
    a5f0:	0f 92       	push	r0
    a5f2:	08 b6       	in	r0, 0x38	; 56
    a5f4:	0f 92       	push	r0
    a5f6:	09 b6       	in	r0, 0x39	; 57
    a5f8:	0f 92       	push	r0
    a5fa:	0b b6       	in	r0, 0x3b	; 59
    a5fc:	0f 92       	push	r0
    a5fe:	11 24       	eor	r1, r1
    a600:	2f 93       	push	r18
    a602:	3f 93       	push	r19
    a604:	4f 93       	push	r20
    a606:	5f 93       	push	r21
    a608:	6f 93       	push	r22
    a60a:	7f 93       	push	r23
    a60c:	8f 93       	push	r24
    a60e:	9f 93       	push	r25
    a610:	af 93       	push	r26
    a612:	bf 93       	push	r27
    a614:	ef 93       	push	r30
    a616:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a618:	80 91 84 24 	lds	r24, 0x2484
    a61c:	90 91 85 24 	lds	r25, 0x2485

   if( pt_handle != NULL)
    a620:	00 97       	sbiw	r24, 0x00	; 0
    a622:	11 f0       	breq	.+4      	; 0xa628 <__vector_25+0x3e>
   {
		updateRxBuffer( pt_handle);
    a624:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC0_RXC_vect)*/
    a628:	ff 91       	pop	r31
    a62a:	ef 91       	pop	r30
    a62c:	bf 91       	pop	r27
    a62e:	af 91       	pop	r26
    a630:	9f 91       	pop	r25
    a632:	8f 91       	pop	r24
    a634:	7f 91       	pop	r23
    a636:	6f 91       	pop	r22
    a638:	5f 91       	pop	r21
    a63a:	4f 91       	pop	r20
    a63c:	3f 91       	pop	r19
    a63e:	2f 91       	pop	r18
    a640:	0f 90       	pop	r0
    a642:	0b be       	out	0x3b, r0	; 59
    a644:	0f 90       	pop	r0
    a646:	09 be       	out	0x39, r0	; 57
    a648:	0f 90       	pop	r0
    a64a:	08 be       	out	0x38, r0	; 56
    a64c:	0f 90       	pop	r0
    a64e:	0f be       	out	0x3f, r0	; 63
    a650:	0f 90       	pop	r0
    a652:	1f 90       	pop	r1
    a654:	18 95       	reti

0000a656 <__vector_26>:

ISR( USARTC0_DRE_vect)
{
    a656:	1f 92       	push	r1
    a658:	0f 92       	push	r0
    a65a:	0f b6       	in	r0, 0x3f	; 63
    a65c:	0f 92       	push	r0
    a65e:	08 b6       	in	r0, 0x38	; 56
    a660:	0f 92       	push	r0
    a662:	09 b6       	in	r0, 0x39	; 57
    a664:	0f 92       	push	r0
    a666:	0b b6       	in	r0, 0x3b	; 59
    a668:	0f 92       	push	r0
    a66a:	11 24       	eor	r1, r1
    a66c:	2f 93       	push	r18
    a66e:	3f 93       	push	r19
    a670:	4f 93       	push	r20
    a672:	5f 93       	push	r21
    a674:	6f 93       	push	r22
    a676:	7f 93       	push	r23
    a678:	8f 93       	push	r24
    a67a:	9f 93       	push	r25
    a67c:	af 93       	push	r26
    a67e:	bf 93       	push	r27
    a680:	ef 93       	push	r30
    a682:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a684:	80 91 84 24 	lds	r24, 0x2484
    a688:	90 91 85 24 	lds	r25, 0x2485

   if( pt_handle != NULL)
    a68c:	00 97       	sbiw	r24, 0x00	; 0
    a68e:	11 f0       	breq	.+4      	; 0xa694 <__vector_26+0x3e>
   {
      updateTxBuffer( pt_handle);
    a690:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC0_DRE_vect)*/
    a694:	ff 91       	pop	r31
    a696:	ef 91       	pop	r30
    a698:	bf 91       	pop	r27
    a69a:	af 91       	pop	r26
    a69c:	9f 91       	pop	r25
    a69e:	8f 91       	pop	r24
    a6a0:	7f 91       	pop	r23
    a6a2:	6f 91       	pop	r22
    a6a4:	5f 91       	pop	r21
    a6a6:	4f 91       	pop	r20
    a6a8:	3f 91       	pop	r19
    a6aa:	2f 91       	pop	r18
    a6ac:	0f 90       	pop	r0
    a6ae:	0b be       	out	0x3b, r0	; 59
    a6b0:	0f 90       	pop	r0
    a6b2:	09 be       	out	0x39, r0	; 57
    a6b4:	0f 90       	pop	r0
    a6b6:	08 be       	out	0x38, r0	; 56
    a6b8:	0f 90       	pop	r0
    a6ba:	0f be       	out	0x3f, r0	; 63
    a6bc:	0f 90       	pop	r0
    a6be:	1f 90       	pop	r1
    a6c0:	18 95       	reti

0000a6c2 <__vector_28>:

ISR( USARTC1_RXC_vect)
{
    a6c2:	1f 92       	push	r1
    a6c4:	0f 92       	push	r0
    a6c6:	0f b6       	in	r0, 0x3f	; 63
    a6c8:	0f 92       	push	r0
    a6ca:	08 b6       	in	r0, 0x38	; 56
    a6cc:	0f 92       	push	r0
    a6ce:	09 b6       	in	r0, 0x39	; 57
    a6d0:	0f 92       	push	r0
    a6d2:	0b b6       	in	r0, 0x3b	; 59
    a6d4:	0f 92       	push	r0
    a6d6:	11 24       	eor	r1, r1
    a6d8:	2f 93       	push	r18
    a6da:	3f 93       	push	r19
    a6dc:	4f 93       	push	r20
    a6de:	5f 93       	push	r21
    a6e0:	6f 93       	push	r22
    a6e2:	7f 93       	push	r23
    a6e4:	8f 93       	push	r24
    a6e6:	9f 93       	push	r25
    a6e8:	af 93       	push	r26
    a6ea:	bf 93       	push	r27
    a6ec:	ef 93       	push	r30
    a6ee:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a6f0:	80 91 86 24 	lds	r24, 0x2486
    a6f4:	90 91 87 24 	lds	r25, 0x2487

   if( pt_handle != NULL)
    a6f8:	00 97       	sbiw	r24, 0x00	; 0
    a6fa:	11 f0       	breq	.+4      	; 0xa700 <__vector_28+0x3e>
   {
		updateRxBuffer( pt_handle);
    a6fc:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC1_RXC_vect)*/
    a700:	ff 91       	pop	r31
    a702:	ef 91       	pop	r30
    a704:	bf 91       	pop	r27
    a706:	af 91       	pop	r26
    a708:	9f 91       	pop	r25
    a70a:	8f 91       	pop	r24
    a70c:	7f 91       	pop	r23
    a70e:	6f 91       	pop	r22
    a710:	5f 91       	pop	r21
    a712:	4f 91       	pop	r20
    a714:	3f 91       	pop	r19
    a716:	2f 91       	pop	r18
    a718:	0f 90       	pop	r0
    a71a:	0b be       	out	0x3b, r0	; 59
    a71c:	0f 90       	pop	r0
    a71e:	09 be       	out	0x39, r0	; 57
    a720:	0f 90       	pop	r0
    a722:	08 be       	out	0x38, r0	; 56
    a724:	0f 90       	pop	r0
    a726:	0f be       	out	0x3f, r0	; 63
    a728:	0f 90       	pop	r0
    a72a:	1f 90       	pop	r1
    a72c:	18 95       	reti

0000a72e <__vector_29>:

ISR( USARTC1_DRE_vect)
{
    a72e:	1f 92       	push	r1
    a730:	0f 92       	push	r0
    a732:	0f b6       	in	r0, 0x3f	; 63
    a734:	0f 92       	push	r0
    a736:	08 b6       	in	r0, 0x38	; 56
    a738:	0f 92       	push	r0
    a73a:	09 b6       	in	r0, 0x39	; 57
    a73c:	0f 92       	push	r0
    a73e:	0b b6       	in	r0, 0x3b	; 59
    a740:	0f 92       	push	r0
    a742:	11 24       	eor	r1, r1
    a744:	2f 93       	push	r18
    a746:	3f 93       	push	r19
    a748:	4f 93       	push	r20
    a74a:	5f 93       	push	r21
    a74c:	6f 93       	push	r22
    a74e:	7f 93       	push	r23
    a750:	8f 93       	push	r24
    a752:	9f 93       	push	r25
    a754:	af 93       	push	r26
    a756:	bf 93       	push	r27
    a758:	ef 93       	push	r30
    a75a:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a75c:	80 91 86 24 	lds	r24, 0x2486
    a760:	90 91 87 24 	lds	r25, 0x2487

   if( pt_handle != NULL)
    a764:	00 97       	sbiw	r24, 0x00	; 0
    a766:	11 f0       	breq	.+4      	; 0xa76c <__vector_29+0x3e>
   {
      updateTxBuffer( pt_handle);
    a768:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC1_DRE_vect)*/
    a76c:	ff 91       	pop	r31
    a76e:	ef 91       	pop	r30
    a770:	bf 91       	pop	r27
    a772:	af 91       	pop	r26
    a774:	9f 91       	pop	r25
    a776:	8f 91       	pop	r24
    a778:	7f 91       	pop	r23
    a77a:	6f 91       	pop	r22
    a77c:	5f 91       	pop	r21
    a77e:	4f 91       	pop	r20
    a780:	3f 91       	pop	r19
    a782:	2f 91       	pop	r18
    a784:	0f 90       	pop	r0
    a786:	0b be       	out	0x3b, r0	; 59
    a788:	0f 90       	pop	r0
    a78a:	09 be       	out	0x39, r0	; 57
    a78c:	0f 90       	pop	r0
    a78e:	08 be       	out	0x38, r0	; 56
    a790:	0f 90       	pop	r0
    a792:	0f be       	out	0x3f, r0	; 63
    a794:	0f 90       	pop	r0
    a796:	1f 90       	pop	r1
    a798:	18 95       	reti

0000a79a <__vector_88>:

ISR( USARTD0_RXC_vect)
{
    a79a:	1f 92       	push	r1
    a79c:	0f 92       	push	r0
    a79e:	0f b6       	in	r0, 0x3f	; 63
    a7a0:	0f 92       	push	r0
    a7a2:	08 b6       	in	r0, 0x38	; 56
    a7a4:	0f 92       	push	r0
    a7a6:	09 b6       	in	r0, 0x39	; 57
    a7a8:	0f 92       	push	r0
    a7aa:	0b b6       	in	r0, 0x3b	; 59
    a7ac:	0f 92       	push	r0
    a7ae:	11 24       	eor	r1, r1
    a7b0:	2f 93       	push	r18
    a7b2:	3f 93       	push	r19
    a7b4:	4f 93       	push	r20
    a7b6:	5f 93       	push	r21
    a7b8:	6f 93       	push	r22
    a7ba:	7f 93       	push	r23
    a7bc:	8f 93       	push	r24
    a7be:	9f 93       	push	r25
    a7c0:	af 93       	push	r26
    a7c2:	bf 93       	push	r27
    a7c4:	ef 93       	push	r30
    a7c6:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a7c8:	80 91 88 24 	lds	r24, 0x2488
    a7cc:	90 91 89 24 	lds	r25, 0x2489

   if( pt_handle != NULL)
    a7d0:	00 97       	sbiw	r24, 0x00	; 0
    a7d2:	11 f0       	breq	.+4      	; 0xa7d8 <__vector_88+0x3e>
   {
		updateRxBuffer( pt_handle);
    a7d4:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD0_RXC_vect)*/
    a7d8:	ff 91       	pop	r31
    a7da:	ef 91       	pop	r30
    a7dc:	bf 91       	pop	r27
    a7de:	af 91       	pop	r26
    a7e0:	9f 91       	pop	r25
    a7e2:	8f 91       	pop	r24
    a7e4:	7f 91       	pop	r23
    a7e6:	6f 91       	pop	r22
    a7e8:	5f 91       	pop	r21
    a7ea:	4f 91       	pop	r20
    a7ec:	3f 91       	pop	r19
    a7ee:	2f 91       	pop	r18
    a7f0:	0f 90       	pop	r0
    a7f2:	0b be       	out	0x3b, r0	; 59
    a7f4:	0f 90       	pop	r0
    a7f6:	09 be       	out	0x39, r0	; 57
    a7f8:	0f 90       	pop	r0
    a7fa:	08 be       	out	0x38, r0	; 56
    a7fc:	0f 90       	pop	r0
    a7fe:	0f be       	out	0x3f, r0	; 63
    a800:	0f 90       	pop	r0
    a802:	1f 90       	pop	r1
    a804:	18 95       	reti

0000a806 <__vector_89>:

ISR( USARTD0_DRE_vect)
{
    a806:	1f 92       	push	r1
    a808:	0f 92       	push	r0
    a80a:	0f b6       	in	r0, 0x3f	; 63
    a80c:	0f 92       	push	r0
    a80e:	08 b6       	in	r0, 0x38	; 56
    a810:	0f 92       	push	r0
    a812:	09 b6       	in	r0, 0x39	; 57
    a814:	0f 92       	push	r0
    a816:	0b b6       	in	r0, 0x3b	; 59
    a818:	0f 92       	push	r0
    a81a:	11 24       	eor	r1, r1
    a81c:	2f 93       	push	r18
    a81e:	3f 93       	push	r19
    a820:	4f 93       	push	r20
    a822:	5f 93       	push	r21
    a824:	6f 93       	push	r22
    a826:	7f 93       	push	r23
    a828:	8f 93       	push	r24
    a82a:	9f 93       	push	r25
    a82c:	af 93       	push	r26
    a82e:	bf 93       	push	r27
    a830:	ef 93       	push	r30
    a832:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a834:	80 91 88 24 	lds	r24, 0x2488
    a838:	90 91 89 24 	lds	r25, 0x2489

   if( pt_handle != NULL)
    a83c:	00 97       	sbiw	r24, 0x00	; 0
    a83e:	11 f0       	breq	.+4      	; 0xa844 <__vector_89+0x3e>
   {
      updateTxBuffer( pt_handle);
    a840:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD0_DRE_vect)*/
    a844:	ff 91       	pop	r31
    a846:	ef 91       	pop	r30
    a848:	bf 91       	pop	r27
    a84a:	af 91       	pop	r26
    a84c:	9f 91       	pop	r25
    a84e:	8f 91       	pop	r24
    a850:	7f 91       	pop	r23
    a852:	6f 91       	pop	r22
    a854:	5f 91       	pop	r21
    a856:	4f 91       	pop	r20
    a858:	3f 91       	pop	r19
    a85a:	2f 91       	pop	r18
    a85c:	0f 90       	pop	r0
    a85e:	0b be       	out	0x3b, r0	; 59
    a860:	0f 90       	pop	r0
    a862:	09 be       	out	0x39, r0	; 57
    a864:	0f 90       	pop	r0
    a866:	08 be       	out	0x38, r0	; 56
    a868:	0f 90       	pop	r0
    a86a:	0f be       	out	0x3f, r0	; 63
    a86c:	0f 90       	pop	r0
    a86e:	1f 90       	pop	r1
    a870:	18 95       	reti

0000a872 <__vector_91>:

ISR( USARTD1_RXC_vect)
{
    a872:	1f 92       	push	r1
    a874:	0f 92       	push	r0
    a876:	0f b6       	in	r0, 0x3f	; 63
    a878:	0f 92       	push	r0
    a87a:	08 b6       	in	r0, 0x38	; 56
    a87c:	0f 92       	push	r0
    a87e:	09 b6       	in	r0, 0x39	; 57
    a880:	0f 92       	push	r0
    a882:	0b b6       	in	r0, 0x3b	; 59
    a884:	0f 92       	push	r0
    a886:	11 24       	eor	r1, r1
    a888:	2f 93       	push	r18
    a88a:	3f 93       	push	r19
    a88c:	4f 93       	push	r20
    a88e:	5f 93       	push	r21
    a890:	6f 93       	push	r22
    a892:	7f 93       	push	r23
    a894:	8f 93       	push	r24
    a896:	9f 93       	push	r25
    a898:	af 93       	push	r26
    a89a:	bf 93       	push	r27
    a89c:	ef 93       	push	r30
    a89e:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a8a0:	80 91 8a 24 	lds	r24, 0x248A
    a8a4:	90 91 8b 24 	lds	r25, 0x248B

   if( pt_handle != NULL)
    a8a8:	00 97       	sbiw	r24, 0x00	; 0
    a8aa:	11 f0       	breq	.+4      	; 0xa8b0 <__vector_91+0x3e>
   {
		updateRxBuffer( pt_handle);
    a8ac:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD1_RXC_vect)*/
    a8b0:	ff 91       	pop	r31
    a8b2:	ef 91       	pop	r30
    a8b4:	bf 91       	pop	r27
    a8b6:	af 91       	pop	r26
    a8b8:	9f 91       	pop	r25
    a8ba:	8f 91       	pop	r24
    a8bc:	7f 91       	pop	r23
    a8be:	6f 91       	pop	r22
    a8c0:	5f 91       	pop	r21
    a8c2:	4f 91       	pop	r20
    a8c4:	3f 91       	pop	r19
    a8c6:	2f 91       	pop	r18
    a8c8:	0f 90       	pop	r0
    a8ca:	0b be       	out	0x3b, r0	; 59
    a8cc:	0f 90       	pop	r0
    a8ce:	09 be       	out	0x39, r0	; 57
    a8d0:	0f 90       	pop	r0
    a8d2:	08 be       	out	0x38, r0	; 56
    a8d4:	0f 90       	pop	r0
    a8d6:	0f be       	out	0x3f, r0	; 63
    a8d8:	0f 90       	pop	r0
    a8da:	1f 90       	pop	r1
    a8dc:	18 95       	reti

0000a8de <__vector_92>:

ISR( USARTD1_DRE_vect)
{
    a8de:	1f 92       	push	r1
    a8e0:	0f 92       	push	r0
    a8e2:	0f b6       	in	r0, 0x3f	; 63
    a8e4:	0f 92       	push	r0
    a8e6:	08 b6       	in	r0, 0x38	; 56
    a8e8:	0f 92       	push	r0
    a8ea:	09 b6       	in	r0, 0x39	; 57
    a8ec:	0f 92       	push	r0
    a8ee:	0b b6       	in	r0, 0x3b	; 59
    a8f0:	0f 92       	push	r0
    a8f2:	11 24       	eor	r1, r1
    a8f4:	2f 93       	push	r18
    a8f6:	3f 93       	push	r19
    a8f8:	4f 93       	push	r20
    a8fa:	5f 93       	push	r21
    a8fc:	6f 93       	push	r22
    a8fe:	7f 93       	push	r23
    a900:	8f 93       	push	r24
    a902:	9f 93       	push	r25
    a904:	af 93       	push	r26
    a906:	bf 93       	push	r27
    a908:	ef 93       	push	r30
    a90a:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a90c:	80 91 8a 24 	lds	r24, 0x248A
    a910:	90 91 8b 24 	lds	r25, 0x248B

   if( pt_handle != NULL)
    a914:	00 97       	sbiw	r24, 0x00	; 0
    a916:	11 f0       	breq	.+4      	; 0xa91c <__vector_92+0x3e>
   {
      updateTxBuffer( pt_handle);
    a918:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD1_DRE_vect)*/
    a91c:	ff 91       	pop	r31
    a91e:	ef 91       	pop	r30
    a920:	bf 91       	pop	r27
    a922:	af 91       	pop	r26
    a924:	9f 91       	pop	r25
    a926:	8f 91       	pop	r24
    a928:	7f 91       	pop	r23
    a92a:	6f 91       	pop	r22
    a92c:	5f 91       	pop	r21
    a92e:	4f 91       	pop	r20
    a930:	3f 91       	pop	r19
    a932:	2f 91       	pop	r18
    a934:	0f 90       	pop	r0
    a936:	0b be       	out	0x3b, r0	; 59
    a938:	0f 90       	pop	r0
    a93a:	09 be       	out	0x39, r0	; 57
    a93c:	0f 90       	pop	r0
    a93e:	08 be       	out	0x38, r0	; 56
    a940:	0f 90       	pop	r0
    a942:	0f be       	out	0x3f, r0	; 63
    a944:	0f 90       	pop	r0
    a946:	1f 90       	pop	r1
    a948:	18 95       	reti

0000a94a <__vector_58>:

ISR( USARTE0_RXC_vect)
{
    a94a:	1f 92       	push	r1
    a94c:	0f 92       	push	r0
    a94e:	0f b6       	in	r0, 0x3f	; 63
    a950:	0f 92       	push	r0
    a952:	08 b6       	in	r0, 0x38	; 56
    a954:	0f 92       	push	r0
    a956:	09 b6       	in	r0, 0x39	; 57
    a958:	0f 92       	push	r0
    a95a:	0b b6       	in	r0, 0x3b	; 59
    a95c:	0f 92       	push	r0
    a95e:	11 24       	eor	r1, r1
    a960:	2f 93       	push	r18
    a962:	3f 93       	push	r19
    a964:	4f 93       	push	r20
    a966:	5f 93       	push	r21
    a968:	6f 93       	push	r22
    a96a:	7f 93       	push	r23
    a96c:	8f 93       	push	r24
    a96e:	9f 93       	push	r25
    a970:	af 93       	push	r26
    a972:	bf 93       	push	r27
    a974:	ef 93       	push	r30
    a976:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a978:	80 91 8c 24 	lds	r24, 0x248C
    a97c:	90 91 8d 24 	lds	r25, 0x248D

   if( pt_handle != NULL)
    a980:	00 97       	sbiw	r24, 0x00	; 0
    a982:	11 f0       	breq	.+4      	; 0xa988 <__vector_58+0x3e>
   {
		updateRxBuffer( pt_handle);
    a984:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE0_RXC_vect)*/
    a988:	ff 91       	pop	r31
    a98a:	ef 91       	pop	r30
    a98c:	bf 91       	pop	r27
    a98e:	af 91       	pop	r26
    a990:	9f 91       	pop	r25
    a992:	8f 91       	pop	r24
    a994:	7f 91       	pop	r23
    a996:	6f 91       	pop	r22
    a998:	5f 91       	pop	r21
    a99a:	4f 91       	pop	r20
    a99c:	3f 91       	pop	r19
    a99e:	2f 91       	pop	r18
    a9a0:	0f 90       	pop	r0
    a9a2:	0b be       	out	0x3b, r0	; 59
    a9a4:	0f 90       	pop	r0
    a9a6:	09 be       	out	0x39, r0	; 57
    a9a8:	0f 90       	pop	r0
    a9aa:	08 be       	out	0x38, r0	; 56
    a9ac:	0f 90       	pop	r0
    a9ae:	0f be       	out	0x3f, r0	; 63
    a9b0:	0f 90       	pop	r0
    a9b2:	1f 90       	pop	r1
    a9b4:	18 95       	reti

0000a9b6 <__vector_59>:

ISR( USARTE0_DRE_vect)
{
    a9b6:	1f 92       	push	r1
    a9b8:	0f 92       	push	r0
    a9ba:	0f b6       	in	r0, 0x3f	; 63
    a9bc:	0f 92       	push	r0
    a9be:	08 b6       	in	r0, 0x38	; 56
    a9c0:	0f 92       	push	r0
    a9c2:	09 b6       	in	r0, 0x39	; 57
    a9c4:	0f 92       	push	r0
    a9c6:	0b b6       	in	r0, 0x3b	; 59
    a9c8:	0f 92       	push	r0
    a9ca:	11 24       	eor	r1, r1
    a9cc:	2f 93       	push	r18
    a9ce:	3f 93       	push	r19
    a9d0:	4f 93       	push	r20
    a9d2:	5f 93       	push	r21
    a9d4:	6f 93       	push	r22
    a9d6:	7f 93       	push	r23
    a9d8:	8f 93       	push	r24
    a9da:	9f 93       	push	r25
    a9dc:	af 93       	push	r26
    a9de:	bf 93       	push	r27
    a9e0:	ef 93       	push	r30
    a9e2:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a9e4:	80 91 8c 24 	lds	r24, 0x248C
    a9e8:	90 91 8d 24 	lds	r25, 0x248D

   if( pt_handle != NULL)
    a9ec:	00 97       	sbiw	r24, 0x00	; 0
    a9ee:	11 f0       	breq	.+4      	; 0xa9f4 <__vector_59+0x3e>
   {
      updateTxBuffer( pt_handle);
    a9f0:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE0_DRE_vect)*/
    a9f4:	ff 91       	pop	r31
    a9f6:	ef 91       	pop	r30
    a9f8:	bf 91       	pop	r27
    a9fa:	af 91       	pop	r26
    a9fc:	9f 91       	pop	r25
    a9fe:	8f 91       	pop	r24
    aa00:	7f 91       	pop	r23
    aa02:	6f 91       	pop	r22
    aa04:	5f 91       	pop	r21
    aa06:	4f 91       	pop	r20
    aa08:	3f 91       	pop	r19
    aa0a:	2f 91       	pop	r18
    aa0c:	0f 90       	pop	r0
    aa0e:	0b be       	out	0x3b, r0	; 59
    aa10:	0f 90       	pop	r0
    aa12:	09 be       	out	0x39, r0	; 57
    aa14:	0f 90       	pop	r0
    aa16:	08 be       	out	0x38, r0	; 56
    aa18:	0f 90       	pop	r0
    aa1a:	0f be       	out	0x3f, r0	; 63
    aa1c:	0f 90       	pop	r0
    aa1e:	1f 90       	pop	r1
    aa20:	18 95       	reti

0000aa22 <__vector_61>:

ISR( USARTE1_RXC_vect)
{
    aa22:	1f 92       	push	r1
    aa24:	0f 92       	push	r0
    aa26:	0f b6       	in	r0, 0x3f	; 63
    aa28:	0f 92       	push	r0
    aa2a:	08 b6       	in	r0, 0x38	; 56
    aa2c:	0f 92       	push	r0
    aa2e:	09 b6       	in	r0, 0x39	; 57
    aa30:	0f 92       	push	r0
    aa32:	0b b6       	in	r0, 0x3b	; 59
    aa34:	0f 92       	push	r0
    aa36:	11 24       	eor	r1, r1
    aa38:	2f 93       	push	r18
    aa3a:	3f 93       	push	r19
    aa3c:	4f 93       	push	r20
    aa3e:	5f 93       	push	r21
    aa40:	6f 93       	push	r22
    aa42:	7f 93       	push	r23
    aa44:	8f 93       	push	r24
    aa46:	9f 93       	push	r25
    aa48:	af 93       	push	r26
    aa4a:	bf 93       	push	r27
    aa4c:	ef 93       	push	r30
    aa4e:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    aa50:	80 91 8e 24 	lds	r24, 0x248E
    aa54:	90 91 8f 24 	lds	r25, 0x248F

   if( pt_handle != NULL)
    aa58:	00 97       	sbiw	r24, 0x00	; 0
    aa5a:	11 f0       	breq	.+4      	; 0xaa60 <__vector_61+0x3e>
   {
		updateRxBuffer( pt_handle);
    aa5c:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE1_RXC_vect)*/
    aa60:	ff 91       	pop	r31
    aa62:	ef 91       	pop	r30
    aa64:	bf 91       	pop	r27
    aa66:	af 91       	pop	r26
    aa68:	9f 91       	pop	r25
    aa6a:	8f 91       	pop	r24
    aa6c:	7f 91       	pop	r23
    aa6e:	6f 91       	pop	r22
    aa70:	5f 91       	pop	r21
    aa72:	4f 91       	pop	r20
    aa74:	3f 91       	pop	r19
    aa76:	2f 91       	pop	r18
    aa78:	0f 90       	pop	r0
    aa7a:	0b be       	out	0x3b, r0	; 59
    aa7c:	0f 90       	pop	r0
    aa7e:	09 be       	out	0x39, r0	; 57
    aa80:	0f 90       	pop	r0
    aa82:	08 be       	out	0x38, r0	; 56
    aa84:	0f 90       	pop	r0
    aa86:	0f be       	out	0x3f, r0	; 63
    aa88:	0f 90       	pop	r0
    aa8a:	1f 90       	pop	r1
    aa8c:	18 95       	reti

0000aa8e <__vector_62>:

ISR( USARTE1_DRE_vect)
{
    aa8e:	1f 92       	push	r1
    aa90:	0f 92       	push	r0
    aa92:	0f b6       	in	r0, 0x3f	; 63
    aa94:	0f 92       	push	r0
    aa96:	08 b6       	in	r0, 0x38	; 56
    aa98:	0f 92       	push	r0
    aa9a:	09 b6       	in	r0, 0x39	; 57
    aa9c:	0f 92       	push	r0
    aa9e:	0b b6       	in	r0, 0x3b	; 59
    aaa0:	0f 92       	push	r0
    aaa2:	11 24       	eor	r1, r1
    aaa4:	2f 93       	push	r18
    aaa6:	3f 93       	push	r19
    aaa8:	4f 93       	push	r20
    aaaa:	5f 93       	push	r21
    aaac:	6f 93       	push	r22
    aaae:	7f 93       	push	r23
    aab0:	8f 93       	push	r24
    aab2:	9f 93       	push	r25
    aab4:	af 93       	push	r26
    aab6:	bf 93       	push	r27
    aab8:	ef 93       	push	r30
    aaba:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    aabc:	80 91 8e 24 	lds	r24, 0x248E
    aac0:	90 91 8f 24 	lds	r25, 0x248F

   if( pt_handle != NULL)
    aac4:	00 97       	sbiw	r24, 0x00	; 0
    aac6:	11 f0       	breq	.+4      	; 0xaacc <__vector_62+0x3e>
   {
      updateTxBuffer( pt_handle);
    aac8:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE1_DRE_vect)*/
    aacc:	ff 91       	pop	r31
    aace:	ef 91       	pop	r30
    aad0:	bf 91       	pop	r27
    aad2:	af 91       	pop	r26
    aad4:	9f 91       	pop	r25
    aad6:	8f 91       	pop	r24
    aad8:	7f 91       	pop	r23
    aada:	6f 91       	pop	r22
    aadc:	5f 91       	pop	r21
    aade:	4f 91       	pop	r20
    aae0:	3f 91       	pop	r19
    aae2:	2f 91       	pop	r18
    aae4:	0f 90       	pop	r0
    aae6:	0b be       	out	0x3b, r0	; 59
    aae8:	0f 90       	pop	r0
    aaea:	09 be       	out	0x39, r0	; 57
    aaec:	0f 90       	pop	r0
    aaee:	08 be       	out	0x38, r0	; 56
    aaf0:	0f 90       	pop	r0
    aaf2:	0f be       	out	0x3f, r0	; 63
    aaf4:	0f 90       	pop	r0
    aaf6:	1f 90       	pop	r1
    aaf8:	18 95       	reti

0000aafa <__vector_119>:

ISR( USARTF0_RXC_vect)
{
    aafa:	1f 92       	push	r1
    aafc:	0f 92       	push	r0
    aafe:	0f b6       	in	r0, 0x3f	; 63
    ab00:	0f 92       	push	r0
    ab02:	08 b6       	in	r0, 0x38	; 56
    ab04:	0f 92       	push	r0
    ab06:	09 b6       	in	r0, 0x39	; 57
    ab08:	0f 92       	push	r0
    ab0a:	0b b6       	in	r0, 0x3b	; 59
    ab0c:	0f 92       	push	r0
    ab0e:	11 24       	eor	r1, r1
    ab10:	2f 93       	push	r18
    ab12:	3f 93       	push	r19
    ab14:	4f 93       	push	r20
    ab16:	5f 93       	push	r21
    ab18:	6f 93       	push	r22
    ab1a:	7f 93       	push	r23
    ab1c:	8f 93       	push	r24
    ab1e:	9f 93       	push	r25
    ab20:	af 93       	push	r26
    ab22:	bf 93       	push	r27
    ab24:	ef 93       	push	r30
    ab26:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    ab28:	80 91 90 24 	lds	r24, 0x2490
    ab2c:	90 91 91 24 	lds	r25, 0x2491

   if( pt_handle != NULL)
    ab30:	00 97       	sbiw	r24, 0x00	; 0
    ab32:	11 f0       	breq	.+4      	; 0xab38 <__vector_119+0x3e>
   {
		updateRxBuffer( pt_handle);
    ab34:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF0_RXC_vect)*/
    ab38:	ff 91       	pop	r31
    ab3a:	ef 91       	pop	r30
    ab3c:	bf 91       	pop	r27
    ab3e:	af 91       	pop	r26
    ab40:	9f 91       	pop	r25
    ab42:	8f 91       	pop	r24
    ab44:	7f 91       	pop	r23
    ab46:	6f 91       	pop	r22
    ab48:	5f 91       	pop	r21
    ab4a:	4f 91       	pop	r20
    ab4c:	3f 91       	pop	r19
    ab4e:	2f 91       	pop	r18
    ab50:	0f 90       	pop	r0
    ab52:	0b be       	out	0x3b, r0	; 59
    ab54:	0f 90       	pop	r0
    ab56:	09 be       	out	0x39, r0	; 57
    ab58:	0f 90       	pop	r0
    ab5a:	08 be       	out	0x38, r0	; 56
    ab5c:	0f 90       	pop	r0
    ab5e:	0f be       	out	0x3f, r0	; 63
    ab60:	0f 90       	pop	r0
    ab62:	1f 90       	pop	r1
    ab64:	18 95       	reti

0000ab66 <__vector_120>:

ISR( USARTF0_DRE_vect)
{
    ab66:	1f 92       	push	r1
    ab68:	0f 92       	push	r0
    ab6a:	0f b6       	in	r0, 0x3f	; 63
    ab6c:	0f 92       	push	r0
    ab6e:	08 b6       	in	r0, 0x38	; 56
    ab70:	0f 92       	push	r0
    ab72:	09 b6       	in	r0, 0x39	; 57
    ab74:	0f 92       	push	r0
    ab76:	0b b6       	in	r0, 0x3b	; 59
    ab78:	0f 92       	push	r0
    ab7a:	11 24       	eor	r1, r1
    ab7c:	2f 93       	push	r18
    ab7e:	3f 93       	push	r19
    ab80:	4f 93       	push	r20
    ab82:	5f 93       	push	r21
    ab84:	6f 93       	push	r22
    ab86:	7f 93       	push	r23
    ab88:	8f 93       	push	r24
    ab8a:	9f 93       	push	r25
    ab8c:	af 93       	push	r26
    ab8e:	bf 93       	push	r27
    ab90:	ef 93       	push	r30
    ab92:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    ab94:	80 91 90 24 	lds	r24, 0x2490
    ab98:	90 91 91 24 	lds	r25, 0x2491

   if( pt_handle != NULL)
    ab9c:	00 97       	sbiw	r24, 0x00	; 0
    ab9e:	11 f0       	breq	.+4      	; 0xaba4 <__vector_120+0x3e>
   {
      updateTxBuffer( pt_handle);
    aba0:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF0_DRE_vect)*/
    aba4:	ff 91       	pop	r31
    aba6:	ef 91       	pop	r30
    aba8:	bf 91       	pop	r27
    abaa:	af 91       	pop	r26
    abac:	9f 91       	pop	r25
    abae:	8f 91       	pop	r24
    abb0:	7f 91       	pop	r23
    abb2:	6f 91       	pop	r22
    abb4:	5f 91       	pop	r21
    abb6:	4f 91       	pop	r20
    abb8:	3f 91       	pop	r19
    abba:	2f 91       	pop	r18
    abbc:	0f 90       	pop	r0
    abbe:	0b be       	out	0x3b, r0	; 59
    abc0:	0f 90       	pop	r0
    abc2:	09 be       	out	0x39, r0	; 57
    abc4:	0f 90       	pop	r0
    abc6:	08 be       	out	0x38, r0	; 56
    abc8:	0f 90       	pop	r0
    abca:	0f be       	out	0x3f, r0	; 63
    abcc:	0f 90       	pop	r0
    abce:	1f 90       	pop	r1
    abd0:	18 95       	reti

0000abd2 <__vector_122>:

ISR( USARTF1_RXC_vect)
{
    abd2:	1f 92       	push	r1
    abd4:	0f 92       	push	r0
    abd6:	0f b6       	in	r0, 0x3f	; 63
    abd8:	0f 92       	push	r0
    abda:	08 b6       	in	r0, 0x38	; 56
    abdc:	0f 92       	push	r0
    abde:	09 b6       	in	r0, 0x39	; 57
    abe0:	0f 92       	push	r0
    abe2:	0b b6       	in	r0, 0x3b	; 59
    abe4:	0f 92       	push	r0
    abe6:	11 24       	eor	r1, r1
    abe8:	2f 93       	push	r18
    abea:	3f 93       	push	r19
    abec:	4f 93       	push	r20
    abee:	5f 93       	push	r21
    abf0:	6f 93       	push	r22
    abf2:	7f 93       	push	r23
    abf4:	8f 93       	push	r24
    abf6:	9f 93       	push	r25
    abf8:	af 93       	push	r26
    abfa:	bf 93       	push	r27
    abfc:	ef 93       	push	r30
    abfe:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    ac00:	80 91 92 24 	lds	r24, 0x2492
    ac04:	90 91 93 24 	lds	r25, 0x2493

   if( pt_handle != NULL)
    ac08:	00 97       	sbiw	r24, 0x00	; 0
    ac0a:	11 f0       	breq	.+4      	; 0xac10 <__vector_122+0x3e>
   {
		updateRxBuffer( pt_handle);
    ac0c:	0e 94 96 52 	call	0xa52c	; 0xa52c <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF1_RXC_vect)*/
    ac10:	ff 91       	pop	r31
    ac12:	ef 91       	pop	r30
    ac14:	bf 91       	pop	r27
    ac16:	af 91       	pop	r26
    ac18:	9f 91       	pop	r25
    ac1a:	8f 91       	pop	r24
    ac1c:	7f 91       	pop	r23
    ac1e:	6f 91       	pop	r22
    ac20:	5f 91       	pop	r21
    ac22:	4f 91       	pop	r20
    ac24:	3f 91       	pop	r19
    ac26:	2f 91       	pop	r18
    ac28:	0f 90       	pop	r0
    ac2a:	0b be       	out	0x3b, r0	; 59
    ac2c:	0f 90       	pop	r0
    ac2e:	09 be       	out	0x39, r0	; 57
    ac30:	0f 90       	pop	r0
    ac32:	08 be       	out	0x38, r0	; 56
    ac34:	0f 90       	pop	r0
    ac36:	0f be       	out	0x3f, r0	; 63
    ac38:	0f 90       	pop	r0
    ac3a:	1f 90       	pop	r1
    ac3c:	18 95       	reti

0000ac3e <__vector_123>:

ISR( USARTF1_DRE_vect)
{
    ac3e:	1f 92       	push	r1
    ac40:	0f 92       	push	r0
    ac42:	0f b6       	in	r0, 0x3f	; 63
    ac44:	0f 92       	push	r0
    ac46:	08 b6       	in	r0, 0x38	; 56
    ac48:	0f 92       	push	r0
    ac4a:	09 b6       	in	r0, 0x39	; 57
    ac4c:	0f 92       	push	r0
    ac4e:	0b b6       	in	r0, 0x3b	; 59
    ac50:	0f 92       	push	r0
    ac52:	11 24       	eor	r1, r1
    ac54:	2f 93       	push	r18
    ac56:	3f 93       	push	r19
    ac58:	4f 93       	push	r20
    ac5a:	5f 93       	push	r21
    ac5c:	6f 93       	push	r22
    ac5e:	7f 93       	push	r23
    ac60:	8f 93       	push	r24
    ac62:	9f 93       	push	r25
    ac64:	af 93       	push	r26
    ac66:	bf 93       	push	r27
    ac68:	ef 93       	push	r30
    ac6a:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    ac6c:	80 91 92 24 	lds	r24, 0x2492
    ac70:	90 91 93 24 	lds	r25, 0x2493

   if( pt_handle != NULL)
    ac74:	00 97       	sbiw	r24, 0x00	; 0
    ac76:	11 f0       	breq	.+4      	; 0xac7c <__vector_123+0x3e>
   {
      updateTxBuffer( pt_handle);
    ac78:	0e 94 c6 52 	call	0xa58c	; 0xa58c <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF1_DRE_vect)*/
    ac7c:	ff 91       	pop	r31
    ac7e:	ef 91       	pop	r30
    ac80:	bf 91       	pop	r27
    ac82:	af 91       	pop	r26
    ac84:	9f 91       	pop	r25
    ac86:	8f 91       	pop	r24
    ac88:	7f 91       	pop	r23
    ac8a:	6f 91       	pop	r22
    ac8c:	5f 91       	pop	r21
    ac8e:	4f 91       	pop	r20
    ac90:	3f 91       	pop	r19
    ac92:	2f 91       	pop	r18
    ac94:	0f 90       	pop	r0
    ac96:	0b be       	out	0x3b, r0	; 59
    ac98:	0f 90       	pop	r0
    ac9a:	09 be       	out	0x39, r0	; 57
    ac9c:	0f 90       	pop	r0
    ac9e:	08 be       	out	0x38, r0	; 56
    aca0:	0f 90       	pop	r0
    aca2:	0f be       	out	0x3f, r0	; 63
    aca4:	0f 90       	pop	r0
    aca6:	1f 90       	pop	r1
    aca8:	18 95       	reti

0000acaa <hal_enableUartRxInt>:
   return t_linkHndl;

}/*End createUartHandle*/

t_uartError hal_enableUartRxInt( t_UARTHNDL t_handle)
{
    acaa:	cf 93       	push	r28
    acac:	df 93       	push	r29
    acae:	00 d0       	rcall	.+0      	; 0xacb0 <hal_enableUartRxInt+0x6>
    acb0:	cd b7       	in	r28, 0x3d	; 61
    acb2:	de b7       	in	r29, 0x3e	; 62
    acb4:	8a 83       	std	Y+2, r24	; 0x02
    acb6:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    acb8:	8f b7       	in	r24, 0x3f	; 63
    acba:	89 83       	std	Y+1, r24	; 0x01
    acbc:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    acbe:	ea 81       	ldd	r30, Y+2	; 0x02
    acc0:	fb 81       	ldd	r31, Y+3	; 0x03
    acc2:	80 91 44 21 	lds	r24, 0x2144
    acc6:	90 91 45 21 	lds	r25, 0x2145
    acca:	24 81       	ldd	r18, Z+4	; 0x04
    accc:	35 81       	ldd	r19, Z+5	; 0x05
    acce:	28 17       	cp	r18, r24
    acd0:	39 07       	cpc	r19, r25
    acd2:	21 f0       	breq	.+8      	; 0xacdc <hal_enableUartRxInt+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    acd4:	89 81       	ldd	r24, Y+1	; 0x01
    acd6:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    acd8:	8e ef       	ldi	r24, 0xFE	; 254
    acda:	17 c0       	rjmp	.+46     	; 0xad0a <hal_enableUartRxInt+0x60>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    acdc:	ea 81       	ldd	r30, Y+2	; 0x02
    acde:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    ace0:	01 90       	ld	r0, Z+
    ace2:	f0 81       	ld	r31, Z
    ace4:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    ace6:	a1 85       	ldd	r26, Z+9	; 0x09
    ace8:	b2 85       	ldd	r27, Z+10	; 0x0a
    acea:	13 96       	adiw	r26, 0x03	; 3
    acec:	8c 91       	ld	r24, X
    acee:	13 97       	sbiw	r26, 0x03	; 3
    acf0:	8f 7c       	andi	r24, 0xCF	; 207
    acf2:	13 96       	adiw	r26, 0x03	; 3
    acf4:	8c 93       	st	X, r24
    acf6:	13 97       	sbiw	r26, 0x03	; 3
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    acf8:	01 84       	ldd	r0, Z+9	; 0x09
    acfa:	f2 85       	ldd	r31, Z+10	; 0x0a
    acfc:	e0 2d       	mov	r30, r0
    acfe:	83 81       	ldd	r24, Z+3	; 0x03
    ad00:	80 63       	ori	r24, 0x30	; 48
    ad02:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    ad04:	89 81       	ldd	r24, Y+1	; 0x01
    ad06:	8f bf       	out	0x3f, r24	; 63

   return UART_PASSED;
    ad08:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_enableUartRxInt*/
    ad0a:	23 96       	adiw	r28, 0x03	; 3
    ad0c:	cd bf       	out	0x3d, r28	; 61
    ad0e:	de bf       	out	0x3e, r29	; 62
    ad10:	df 91       	pop	r29
    ad12:	cf 91       	pop	r28
    ad14:	08 95       	ret

0000ad16 <hal_disableUartRxInt>:

t_uartError hal_disableUartRxInt( t_UARTHNDL t_handle)
{
    ad16:	cf 93       	push	r28
    ad18:	df 93       	push	r29
    ad1a:	00 d0       	rcall	.+0      	; 0xad1c <hal_disableUartRxInt+0x6>
    ad1c:	cd b7       	in	r28, 0x3d	; 61
    ad1e:	de b7       	in	r29, 0x3e	; 62
    ad20:	8a 83       	std	Y+2, r24	; 0x02
    ad22:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ad24:	8f b7       	in	r24, 0x3f	; 63
    ad26:	89 83       	std	Y+1, r24	; 0x01
    ad28:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    ad2a:	ea 81       	ldd	r30, Y+2	; 0x02
    ad2c:	fb 81       	ldd	r31, Y+3	; 0x03
    ad2e:	80 91 44 21 	lds	r24, 0x2144
    ad32:	90 91 45 21 	lds	r25, 0x2145
    ad36:	24 81       	ldd	r18, Z+4	; 0x04
    ad38:	35 81       	ldd	r19, Z+5	; 0x05
    ad3a:	28 17       	cp	r18, r24
    ad3c:	39 07       	cpc	r19, r25
    ad3e:	21 f0       	breq	.+8      	; 0xad48 <hal_disableUartRxInt+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    ad40:	89 81       	ldd	r24, Y+1	; 0x01
    ad42:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    ad44:	8e ef       	ldi	r24, 0xFE	; 254
    ad46:	0e c0       	rjmp	.+28     	; 0xad64 <hal_disableUartRxInt+0x4e>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    ad48:	ea 81       	ldd	r30, Y+2	; 0x02
    ad4a:	fb 81       	ldd	r31, Y+3	; 0x03

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    ad4c:	01 90       	ld	r0, Z+
    ad4e:	f0 81       	ld	r31, Z
    ad50:	e0 2d       	mov	r30, r0
    ad52:	01 84       	ldd	r0, Z+9	; 0x09
    ad54:	f2 85       	ldd	r31, Z+10	; 0x0a
    ad56:	e0 2d       	mov	r30, r0
    ad58:	83 81       	ldd	r24, Z+3	; 0x03
    ad5a:	8f 7c       	andi	r24, 0xCF	; 207
    ad5c:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    ad5e:	89 81       	ldd	r24, Y+1	; 0x01
    ad60:	8f bf       	out	0x3f, r24	; 63

   return UART_PASSED;
    ad62:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_disableUartRxInt*/
    ad64:	23 96       	adiw	r28, 0x03	; 3
    ad66:	cd bf       	out	0x3d, r28	; 61
    ad68:	de bf       	out	0x3e, r29	; 62
    ad6a:	df 91       	pop	r29
    ad6c:	cf 91       	pop	r28
    ad6e:	08 95       	ret

0000ad70 <hal_uartWriteByte>:

t_uartError hal_uartWriteByte( t_UARTHNDL t_handle,
                               uint8_t c_byte)
{
    ad70:	cf 93       	push	r28
    ad72:	df 93       	push	r29
    ad74:	00 d0       	rcall	.+0      	; 0xad76 <hal_uartWriteByte+0x6>
    ad76:	cd b7       	in	r28, 0x3d	; 61
    ad78:	de b7       	in	r29, 0x3e	; 62
    ad7a:	8a 83       	std	Y+2, r24	; 0x02
    ad7c:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ad7e:	8f b7       	in	r24, 0x3f	; 63
    ad80:	89 83       	std	Y+1, r24	; 0x01
    ad82:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    ad84:	ea 81       	ldd	r30, Y+2	; 0x02
    ad86:	fb 81       	ldd	r31, Y+3	; 0x03
    ad88:	80 91 44 21 	lds	r24, 0x2144
    ad8c:	90 91 45 21 	lds	r25, 0x2145
    ad90:	24 81       	ldd	r18, Z+4	; 0x04
    ad92:	35 81       	ldd	r19, Z+5	; 0x05
    ad94:	28 17       	cp	r18, r24
    ad96:	39 07       	cpc	r19, r25
    ad98:	21 f0       	breq	.+8      	; 0xada2 <hal_uartWriteByte+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    ad9a:	89 81       	ldd	r24, Y+1	; 0x01
    ad9c:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    ad9e:	8e ef       	ldi	r24, 0xFE	; 254
    ada0:	1a c0       	rjmp	.+52     	; 0xadd6 <hal_uartWriteByte+0x66>
   }

   pt_uartChanHndl = (t_uartChanHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    ada2:	ea 81       	ldd	r30, Y+2	; 0x02
    ada4:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      HAL_END_CRITICAL();//Enable interrupts
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    ada6:	01 90       	ld	r0, Z+
    ada8:	f0 81       	ld	r31, Z
    adaa:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_txBusLocked == true)
    adac:	83 85       	ldd	r24, Z+11	; 0x0b
    adae:	88 23       	and	r24, r24
    adb0:	21 f0       	breq	.+8      	; 0xadba <hal_uartWriteByte+0x4a>
	{
      HAL_END_CRITICAL();//Enable interrupts
    adb2:	89 81       	ldd	r24, Y+1	; 0x01
    adb4:	8f bf       	out	0x3f, r24	; 63
   	return UART_BUSY; /*Yes*/
    adb6:	81 ef       	ldi	r24, 0xF1	; 241
    adb8:	0e c0       	rjmp	.+28     	; 0xadd6 <hal_uartWriteByte+0x66>
   }

   pt_uartChanHndl->b_txBusLocked = true;
    adba:	81 e0       	ldi	r24, 0x01	; 1
    adbc:	83 87       	std	Z+11, r24	; 0x0b

   HAL_END_CRITICAL();//Enable interrupts
    adbe:	89 81       	ldd	r24, Y+1	; 0x01
    adc0:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Wait for room to become available in the TX buffer.
    *------------------------------------------------------------------------*/
   while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    adc2:	a1 85       	ldd	r26, Z+9	; 0x09
    adc4:	b2 85       	ldd	r27, Z+10	; 0x0a
    adc6:	11 96       	adiw	r26, 0x01	; 1
    adc8:	8c 91       	ld	r24, X
    adca:	11 97       	sbiw	r26, 0x01	; 1
    adcc:	85 ff       	sbrs	r24, 5
    adce:	fb cf       	rjmp	.-10     	; 0xadc6 <hal_uartWriteByte+0x56>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the UART
    * module information is being stored.
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->pt_uart->DATA = c_byte;
    add0:	6c 93       	st	X, r22

   /*------------------------------------------------------------------------*
    * Release bus lock
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->b_txBusLocked = false;
    add2:	13 86       	std	Z+11, r1	; 0x0b

   return UART_PASSED;
    add4:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_uartWriteByte*/
    add6:	23 96       	adiw	r28, 0x03	; 3
    add8:	cd bf       	out	0x3d, r28	; 61
    adda:	de bf       	out	0x3e, r29	; 62
    addc:	df 91       	pop	r29
    adde:	cf 91       	pop	r28
    ade0:	08 95       	ret

0000ade2 <hal_uartReadBlock>:
 * Read a block of data from a particular UART channel.
 *---------------------------------------------------------------------------*/
t_uartError hal_uartReadBlock( t_UARTHNDL t_handle,
								       int8_t *pc_rxBuffer,
								       uint16_t s_numBytes)
{
    ade2:	8f 92       	push	r8
    ade4:	9f 92       	push	r9
    ade6:	af 92       	push	r10
    ade8:	bf 92       	push	r11
    adea:	cf 92       	push	r12
    adec:	df 92       	push	r13
    adee:	ef 92       	push	r14
    adf0:	ff 92       	push	r15
    adf2:	0f 93       	push	r16
    adf4:	1f 93       	push	r17
    adf6:	cf 93       	push	r28
    adf8:	df 93       	push	r29
    adfa:	cd b7       	in	r28, 0x3d	; 61
    adfc:	de b7       	in	r29, 0x3e	; 62
    adfe:	61 97       	sbiw	r28, 0x11	; 17
    ae00:	cd bf       	out	0x3d, r28	; 61
    ae02:	de bf       	out	0x3e, r29	; 62
    ae04:	88 8b       	std	Y+16, r24	; 0x10
    ae06:	99 8b       	std	Y+17, r25	; 0x11
    ae08:	db 01       	movw	r26, r22

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ae0a:	8f b7       	in	r24, 0x3f	; 63
    ae0c:	89 83       	std	Y+1, r24	; 0x01
    ae0e:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    ae10:	e8 89       	ldd	r30, Y+16	; 0x10
    ae12:	f9 89       	ldd	r31, Y+17	; 0x11
    ae14:	80 91 44 21 	lds	r24, 0x2144
    ae18:	90 91 45 21 	lds	r25, 0x2145
    ae1c:	24 81       	ldd	r18, Z+4	; 0x04
    ae1e:	35 81       	ldd	r19, Z+5	; 0x05
    ae20:	28 17       	cp	r18, r24
    ae22:	39 07       	cpc	r19, r25
    ae24:	21 f0       	breq	.+8      	; 0xae2e <hal_uartReadBlock+0x4c>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    ae26:	89 81       	ldd	r24, Y+1	; 0x01
    ae28:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    ae2a:	8e ef       	ldi	r24, 0xFE	; 254
    ae2c:	5f c0       	rjmp	.+190    	; 0xaeec <hal_uartReadBlock+0x10a>
   }

   pt_uartChanHndl = (t_uartChanHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    ae2e:	e8 89       	ldd	r30, Y+16	; 0x10
    ae30:	f9 89       	ldd	r31, Y+17	; 0x11
   {
      HAL_END_CRITICAL();//Enable interrupts
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    ae32:	80 80       	ld	r8, Z
    ae34:	91 80       	ldd	r9, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_rxBusLocked == true)
    ae36:	f4 01       	movw	r30, r8
    ae38:	84 85       	ldd	r24, Z+12	; 0x0c
    ae3a:	88 23       	and	r24, r24
    ae3c:	21 f0       	breq	.+8      	; 0xae46 <hal_uartReadBlock+0x64>
	{
      HAL_END_CRITICAL();//Enable interrupts
    ae3e:	89 81       	ldd	r24, Y+1	; 0x01
    ae40:	8f bf       	out	0x3f, r24	; 63
   	return UART_BUSY; /*Yes*/
    ae42:	81 ef       	ldi	r24, 0xF1	; 241
    ae44:	53 c0       	rjmp	.+166    	; 0xaeec <hal_uartReadBlock+0x10a>
   }

   pt_uartChanHndl->b_rxBusLocked = true;
    ae46:	81 e0       	ldi	r24, 0x01	; 1
    ae48:	f4 01       	movw	r30, r8
    ae4a:	84 87       	std	Z+12, r24	; 0x0c

	/*------------------------------------------------------------------------*
    * Disable interrupts until its known whether the transaction uses DMA.
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    ae4c:	21 85       	ldd	r18, Z+9	; 0x09
    ae4e:	32 85       	ldd	r19, Z+10	; 0x0a
    ae50:	f9 01       	movw	r30, r18
    ae52:	83 81       	ldd	r24, Z+3	; 0x03
    ae54:	8f 7c       	andi	r24, 0xCF	; 207
    ae56:	83 83       	std	Z+3, r24	; 0x03

   HAL_END_CRITICAL();//Enable interrupts
    ae58:	89 81       	ldd	r24, Y+1	; 0x01
    ae5a:	8f bf       	out	0x3f, r24	; 63

   pt_uartChanHndl->pc_rxData = pc_rxBuffer;
    ae5c:	f4 01       	movw	r30, r8
    ae5e:	67 87       	std	Z+15, r22	; 0x0f
    ae60:	70 8b       	std	Z+16, r23	; 0x10
   pt_uartChanHndl->s_rxBufLength = s_numBytes;
    ae62:	43 8b       	std	Z+19, r20	; 0x13
    ae64:	54 8b       	std	Z+20, r21	; 0x14
   pt_uartChanHndl->s_rxBufIndex = 0;
    ae66:	17 8a       	std	Z+23, r1	; 0x17
    ae68:	10 8e       	std	Z+24, r1	; 0x18

	/*------------------------------------------------------------------------*
    * Does this transaction use DMA?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl->t_rxDmaHndl > 0)
    ae6a:	83 8d       	ldd	r24, Z+27	; 0x1b
    ae6c:	94 8d       	ldd	r25, Z+28	; 0x1c
    ae6e:	18 16       	cp	r1, r24
    ae70:	19 06       	cpc	r1, r25
    ae72:	ac f5       	brge	.+106    	; 0xaede <hal_uartReadBlock+0xfc>
    ae74:	80 81       	ld	r24, Z
    ae76:	83 50       	subi	r24, 0x03	; 3
    ae78:	83 31       	cpi	r24, 0x13	; 19
    ae7a:	30 f4       	brcc	.+12     	; 0xae88 <hal_uartReadBlock+0xa6>
    ae7c:	e8 2f       	mov	r30, r24
    ae7e:	f0 e0       	ldi	r31, 0x00	; 0
    ae80:	ee 5a       	subi	r30, 0xAE	; 174
    ae82:	fe 4d       	sbci	r31, 0xDE	; 222
    ae84:	60 81       	ld	r22, Z
    ae86:	01 c0       	rjmp	.+2      	; 0xae8a <hal_uartReadBlock+0xa8>
   {
      t_dmaChanConfig t_chanConf;
      t_dmaTriggerSource t_trigger;

      switch( pt_uartChanHndl->t_id)
    ae88:	6b e4       	ldi	r22, 0x4B	; 75
            t_trigger = UART1_RX_COMPLETE;
         break;

      }/*End switch( pt_uartChanHndl->t_id)*/

      t_chanConf.pi_srcAddress   = (uint32_t *)&pt_uartChanHndl->pt_uart->DATA;
    ae8a:	f4 01       	movw	r30, r8
    ae8c:	a1 84       	ldd	r10, Z+9	; 0x09
    ae8e:	b2 84       	ldd	r11, Z+10	; 0x0a
    ae90:	aa 82       	std	Y+2, r10	; 0x02
    ae92:	bb 82       	std	Y+3, r11	; 0x03
      t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    ae94:	ac 83       	std	Y+4, r26	; 0x04
    ae96:	bd 83       	std	Y+5, r27	; 0x05
      t_chanConf.t_srcAddDir     = FIXED;
    ae98:	1e 82       	std	Y+6, r1	; 0x06
      t_chanConf.t_destAddDir    = INCREMENT;
    ae9a:	81 e0       	ldi	r24, 0x01	; 1
    ae9c:	8f 83       	std	Y+7, r24	; 0x07
      t_chanConf.t_srcAddReload  = NO_RELOAD;
    ae9e:	18 86       	std	Y+8, r1	; 0x08
      t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    aea0:	89 87       	std	Y+9, r24	; 0x09
      t_chanConf.s_blockSize     = s_numBytes;
    aea2:	4a 87       	std	Y+10, r20	; 0x0a
    aea4:	5b 87       	std	Y+11, r21	; 0x0b
      t_chanConf.t_burstMode     = ONE_BYTE;
    aea6:	1c 86       	std	Y+12, r1	; 0x0c
      t_chanConf.t_transferType  = SINGLE_SHOT;
    aea8:	8d 87       	std	Y+13, r24	; 0x0d
      t_chanConf.t_triggerSrc    = t_trigger;
    aeaa:	6e 87       	std	Y+14, r22	; 0x0e
      t_chanConf.c_repeatCount   = 0;
    aeac:	1f 86       	std	Y+15, r1	; 0x0f

      hal_configureDmaChannel( pt_uartChanHndl->t_rxDmaHndl,
    aeae:	83 8d       	ldd	r24, Z+27	; 0x1b
    aeb0:	94 8d       	ldd	r25, Z+28	; 0x1c
    aeb2:	cc 80       	ldd	r12, Y+4	; 0x04
    aeb4:	dd 80       	ldd	r13, Y+5	; 0x05
    aeb6:	ee 24       	eor	r14, r14
    aeb8:	ff 24       	eor	r15, r15
    aeba:	f3 94       	inc	r15
    aebc:	00 e0       	ldi	r16, 0x00	; 0
    aebe:	11 e0       	ldi	r17, 0x01	; 1
    aec0:	2a 85       	ldd	r18, Y+10	; 0x0a
    aec2:	3b 85       	ldd	r19, Y+11	; 0x0b
    aec4:	40 e0       	ldi	r20, 0x00	; 0
    aec6:	51 e0       	ldi	r21, 0x01	; 1
    aec8:	70 e0       	ldi	r23, 0x00	; 0
    aeca:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                               t_chanConf);

      hal_dmaEnableChannel( pt_uartChanHndl->t_rxDmaHndl);
    aece:	d4 01       	movw	r26, r8
    aed0:	5b 96       	adiw	r26, 0x1b	; 27
    aed2:	8d 91       	ld	r24, X+
    aed4:	9c 91       	ld	r25, X
    aed6:	5c 97       	sbiw	r26, 0x1c	; 28
    aed8:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>
    aedc:	06 c0       	rjmp	.+12     	; 0xaeea <hal_uartReadBlock+0x108>
   else
   {
      /*---------------------------------------------------------------------*
       * Receive data via the RX complete interrupt.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    aede:	01 84       	ldd	r0, Z+9	; 0x09
    aee0:	f2 85       	ldd	r31, Z+10	; 0x0a
    aee2:	e0 2d       	mov	r30, r0
    aee4:	83 81       	ldd	r24, Z+3	; 0x03
    aee6:	80 63       	ori	r24, 0x30	; 48
    aee8:	83 83       	std	Z+3, r24	; 0x03
   }

   return UART_PASSED;
    aeea:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_uartReadBlock*/
    aeec:	61 96       	adiw	r28, 0x11	; 17
    aeee:	cd bf       	out	0x3d, r28	; 61
    aef0:	de bf       	out	0x3e, r29	; 62
    aef2:	df 91       	pop	r29
    aef4:	cf 91       	pop	r28
    aef6:	1f 91       	pop	r17
    aef8:	0f 91       	pop	r16
    aefa:	ff 90       	pop	r15
    aefc:	ef 90       	pop	r14
    aefe:	df 90       	pop	r13
    af00:	cf 90       	pop	r12
    af02:	bf 90       	pop	r11
    af04:	af 90       	pop	r10
    af06:	9f 90       	pop	r9
    af08:	8f 90       	pop	r8
    af0a:	08 95       	ret

0000af0c <hal_uartWriteBlock>:
 * Write a block of data to a particular UART channel.
 *---------------------------------------------------------------------------*/
t_uartError hal_uartWriteBlock( t_UARTHNDL t_handle,
								        int8_t *pc_txBuffer,
								        uint16_t s_numBytes)
{
    af0c:	8f 92       	push	r8
    af0e:	9f 92       	push	r9
    af10:	af 92       	push	r10
    af12:	bf 92       	push	r11
    af14:	cf 92       	push	r12
    af16:	df 92       	push	r13
    af18:	ef 92       	push	r14
    af1a:	ff 92       	push	r15
    af1c:	0f 93       	push	r16
    af1e:	1f 93       	push	r17
    af20:	cf 93       	push	r28
    af22:	df 93       	push	r29
    af24:	cd b7       	in	r28, 0x3d	; 61
    af26:	de b7       	in	r29, 0x3e	; 62
    af28:	61 97       	sbiw	r28, 0x11	; 17
    af2a:	cd bf       	out	0x3d, r28	; 61
    af2c:	de bf       	out	0x3e, r29	; 62
    af2e:	88 8b       	std	Y+16, r24	; 0x10
    af30:	99 8b       	std	Y+17, r25	; 0x11
    af32:	db 01       	movw	r26, r22

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    af34:	8f b7       	in	r24, 0x3f	; 63
    af36:	89 83       	std	Y+1, r24	; 0x01
    af38:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    af3a:	e8 89       	ldd	r30, Y+16	; 0x10
    af3c:	f9 89       	ldd	r31, Y+17	; 0x11
    af3e:	80 91 44 21 	lds	r24, 0x2144
    af42:	90 91 45 21 	lds	r25, 0x2145
    af46:	24 81       	ldd	r18, Z+4	; 0x04
    af48:	35 81       	ldd	r19, Z+5	; 0x05
    af4a:	28 17       	cp	r18, r24
    af4c:	39 07       	cpc	r19, r25
    af4e:	21 f0       	breq	.+8      	; 0xaf58 <hal_uartWriteBlock+0x4c>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    af50:	89 81       	ldd	r24, Y+1	; 0x01
    af52:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    af54:	8e ef       	ldi	r24, 0xFE	; 254
    af56:	a1 c0       	rjmp	.+322    	; 0xb09a <hal_uartWriteBlock+0x18e>
   }

   pt_uartChanHndl = (t_uartChanHndl *)
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    af58:	e8 89       	ldd	r30, Y+16	; 0x10
    af5a:	f9 89       	ldd	r31, Y+17	; 0x11
   {
      HAL_END_CRITICAL();//Enable interrupts
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    af5c:	80 80       	ld	r8, Z
    af5e:	91 80       	ldd	r9, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_txBusLocked == true)
    af60:	f4 01       	movw	r30, r8
    af62:	83 85       	ldd	r24, Z+11	; 0x0b
    af64:	88 23       	and	r24, r24
    af66:	21 f0       	breq	.+8      	; 0xaf70 <hal_uartWriteBlock+0x64>
	{
      HAL_END_CRITICAL();//Enable interrupts
    af68:	89 81       	ldd	r24, Y+1	; 0x01
    af6a:	8f bf       	out	0x3f, r24	; 63
   	return UART_BUSY; /*Yes*/
    af6c:	81 ef       	ldi	r24, 0xF1	; 241
    af6e:	95 c0       	rjmp	.+298    	; 0xb09a <hal_uartWriteBlock+0x18e>
   }

   pt_uartChanHndl->b_txBusLocked = true;
    af70:	81 e0       	ldi	r24, 0x01	; 1
    af72:	f4 01       	movw	r30, r8
    af74:	83 87       	std	Z+11, r24	; 0x0b

   pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_HI_gc;
    af76:	21 85       	ldd	r18, Z+9	; 0x09
    af78:	32 85       	ldd	r19, Z+10	; 0x0a
    af7a:	f9 01       	movw	r30, r18
    af7c:	83 81       	ldd	r24, Z+3	; 0x03
    af7e:	8c 7f       	andi	r24, 0xFC	; 252
    af80:	83 83       	std	Z+3, r24	; 0x03

   HAL_END_CRITICAL();//Enable interrupts
    af82:	89 81       	ldd	r24, Y+1	; 0x01
    af84:	8f bf       	out	0x3f, r24	; 63

   pt_uartChanHndl->pc_txData = pc_txBuffer;
    af86:	f4 01       	movw	r30, r8
    af88:	65 87       	std	Z+13, r22	; 0x0d
    af8a:	76 87       	std	Z+14, r23	; 0x0e
   pt_uartChanHndl->s_txBufLength = s_numBytes;
    af8c:	41 8b       	std	Z+17, r20	; 0x11
    af8e:	52 8b       	std	Z+18, r21	; 0x12
   pt_uartChanHndl->s_txBufIndex = 0;
    af90:	15 8a       	std	Z+21, r1	; 0x15
    af92:	16 8a       	std	Z+22, r1	; 0x16
	/*------------------------------------------------------------------------*
    * Are interrupts enabled, is this function being called from an
    * active int, or is the tx callback function not defined? If so, then
    * transmit the block of data "in-place".
    *------------------------------------------------------------------------*/
   if( (HAL_ARE_INTS_EN() == 0) ||
    af94:	0f b6       	in	r0, 0x3f	; 63
    af96:	07 fe       	sbrs	r0, 7
    af98:	1b c0       	rjmp	.+54     	; 0xafd0 <hal_uartWriteBlock+0xc4>
       (HAL_IS_ACTIVE_INT() == 1) ||
    af9a:	80 91 a0 00 	lds	r24, 0x00A0
	/*------------------------------------------------------------------------*
    * Are interrupts enabled, is this function being called from an
    * active int, or is the tx callback function not defined? If so, then
    * transmit the block of data "in-place".
    *------------------------------------------------------------------------*/
   if( (HAL_ARE_INTS_EN() == 0) ||
    af9e:	81 30       	cpi	r24, 0x01	; 1
    afa0:	b9 f0       	breq	.+46     	; 0xafd0 <hal_uartWriteBlock+0xc4>
       (HAL_IS_ACTIVE_INT() == 1) ||
    afa2:	87 8d       	ldd	r24, Z+31	; 0x1f
    afa4:	90 a1       	lds	r25, 0x40
    afa6:	00 97       	sbiw	r24, 0x00	; 0
    afa8:	91 f5       	brne	.+100    	; 0xb00e <hal_uartWriteBlock+0x102>
    afaa:	12 c0       	rjmp	.+36     	; 0xafd0 <hal_uartWriteBlock+0xc4>
      for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength; s_index++)
      {
         /*------------------------------------------------------------------*
          * Wait for room to become available in the TX buffer.
          *------------------------------------------------------------------*/
         while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    afac:	da 01       	movw	r26, r20
    afae:	11 96       	adiw	r26, 0x01	; 1
    afb0:	2c 91       	ld	r18, X
    afb2:	11 97       	sbiw	r26, 0x01	; 1
    afb4:	25 ff       	sbrs	r18, 5
    afb6:	fa cf       	rjmp	.-12     	; 0xafac <hal_uartWriteBlock+0xa0>

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the UART
          * module information is being stored.
          *------------------------------------------------------------------*/
         pt_uartChanHndl->pt_uart->DATA = pt_uartChanHndl->pc_txData[s_index];
    afb8:	d4 01       	movw	r26, r8
    afba:	1d 96       	adiw	r26, 0x0d	; 13
    afbc:	ed 91       	ld	r30, X+
    afbe:	fc 91       	ld	r31, X
    afc0:	1e 97       	sbiw	r26, 0x0e	; 14
    afc2:	e8 0f       	add	r30, r24
    afc4:	f9 1f       	adc	r31, r25
    afc6:	20 81       	ld	r18, Z
    afc8:	fa 01       	movw	r30, r20
    afca:	20 83       	st	Z, r18
       (HAL_IS_ACTIVE_INT() == 1) ||
       (pt_uartChanHndl->pf_txCallBack == NULL))
   {
      uint16_t s_index;
   
      for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength; s_index++)
    afcc:	01 96       	adiw	r24, 0x01	; 1
    afce:	02 c0       	rjmp	.+4      	; 0xafd4 <hal_uartWriteBlock+0xc8>
    * Are interrupts enabled, is this function being called from an
    * active int, or is the tx callback function not defined? If so, then
    * transmit the block of data "in-place".
    *------------------------------------------------------------------------*/
   if( (HAL_ARE_INTS_EN() == 0) ||
       (HAL_IS_ACTIVE_INT() == 1) ||
    afd0:	80 e0       	ldi	r24, 0x00	; 0
    afd2:	90 e0       	ldi	r25, 0x00	; 0
       (pt_uartChanHndl->pf_txCallBack == NULL))
   {
      uint16_t s_index;
   
      for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength; s_index++)
    afd4:	d4 01       	movw	r26, r8
    afd6:	51 96       	adiw	r26, 0x11	; 17
    afd8:	2d 91       	ld	r18, X+
    afda:	3c 91       	ld	r19, X
    afdc:	52 97       	sbiw	r26, 0x12	; 18
    afde:	82 17       	cp	r24, r18
    afe0:	93 07       	cpc	r25, r19
    afe2:	28 f4       	brcc	.+10     	; 0xafee <hal_uartWriteBlock+0xe2>
      {
         /*------------------------------------------------------------------*
          * Wait for room to become available in the TX buffer.
          *------------------------------------------------------------------*/
         while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    afe4:	19 96       	adiw	r26, 0x09	; 9
    afe6:	4d 91       	ld	r20, X+
    afe8:	5c 91       	ld	r21, X
    afea:	1a 97       	sbiw	r26, 0x0a	; 10
    afec:	df cf       	rjmp	.-66     	; 0xafac <hal_uartWriteBlock+0xa0>
         pt_uartChanHndl->pt_uart->DATA = pt_uartChanHndl->pc_txData[s_index];

      }/*End for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength;
         s_index++)*/

      if( pt_uartChanHndl->pf_txCallBack != NULL)
    afee:	d4 01       	movw	r26, r8
    aff0:	5f 96       	adiw	r26, 0x1f	; 31
    aff2:	ed 91       	ld	r30, X+
    aff4:	fc 91       	ld	r31, X
    aff6:	90 97       	sbiw	r26, 0x20	; 32
    aff8:	30 97       	sbiw	r30, 0x00	; 0
    affa:	11 f0       	breq	.+4      	; 0xb000 <hal_uartWriteBlock+0xf4>
         pt_uartChanHndl->pf_txCallBack( pt_uartChanHndl->s_txBufLength);
    affc:	c9 01       	movw	r24, r18
    affe:	19 95       	eicall

      pt_uartChanHndl->s_txBufLength = 0;
    b000:	f4 01       	movw	r30, r8
    b002:	11 8a       	std	Z+17, r1	; 0x11
    b004:	12 8a       	std	Z+18, r1	; 0x12
      pt_uartChanHndl->pc_txData = NULL;
    b006:	15 86       	std	Z+13, r1	; 0x0d
    b008:	16 86       	std	Z+14, r1	; 0x0e
      pt_uartChanHndl->b_txBusLocked = false;
    b00a:	13 86       	std	Z+11, r1	; 0x0b
    b00c:	45 c0       	rjmp	.+138    	; 0xb098 <hal_uartWriteBlock+0x18c>
   else
   {
	   /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_uartChanHndl->t_txDmaHndl > 0)
    b00e:	f4 01       	movw	r30, r8
    b010:	81 8d       	ldd	r24, Z+25	; 0x19
    b012:	92 8d       	ldd	r25, Z+26	; 0x1a
    b014:	18 16       	cp	r1, r24
    b016:	19 06       	cpc	r1, r25
    b018:	cc f5       	brge	.+114    	; 0xb08c <hal_uartWriteBlock+0x180>
    b01a:	80 81       	ld	r24, Z
    b01c:	83 50       	subi	r24, 0x03	; 3
    b01e:	83 31       	cpi	r24, 0x13	; 19
    b020:	30 f4       	brcc	.+12     	; 0xb02e <hal_uartWriteBlock+0x122>
    b022:	e8 2f       	mov	r30, r24
    b024:	f0 e0       	ldi	r31, 0x00	; 0
    b026:	eb 59       	subi	r30, 0x9B	; 155
    b028:	fe 4d       	sbci	r31, 0xDE	; 222
    b02a:	60 81       	ld	r22, Z
    b02c:	01 c0       	rjmp	.+2      	; 0xb030 <hal_uartWriteBlock+0x124>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;

         switch( pt_uartChanHndl->t_id)
    b02e:	6c e4       	ldi	r22, 0x4C	; 76
               t_trigger = UART1_DATA_REG_EMPTY;
            break;

         }/*End switch( pt_uartChanHndl->t_id)*/

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_uartChanHndl->pc_txData[0];
    b030:	aa 83       	std	Y+2, r26	; 0x02
    b032:	bb 83       	std	Y+3, r27	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_uartChanHndl->pt_uart->DATA;
    b034:	d4 01       	movw	r26, r8
    b036:	19 96       	adiw	r26, 0x09	; 9
    b038:	cc 90       	ld	r12, X
    b03a:	19 97       	sbiw	r26, 0x09	; 9
    b03c:	1a 96       	adiw	r26, 0x0a	; 10
    b03e:	dc 90       	ld	r13, X
    b040:	1a 97       	sbiw	r26, 0x0a	; 10
    b042:	cc 82       	std	Y+4, r12	; 0x04
    b044:	dd 82       	std	Y+5, r13	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    b046:	81 e0       	ldi	r24, 0x01	; 1
    b048:	8e 83       	std	Y+6, r24	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    b04a:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    b04c:	88 87       	std	Y+8, r24	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    b04e:	19 86       	std	Y+9, r1	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
    b050:	4a 87       	std	Y+10, r20	; 0x0a
    b052:	5b 87       	std	Y+11, r21	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
    b054:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    b056:	8d 87       	std	Y+13, r24	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    b058:	6e 87       	std	Y+14, r22	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    b05a:	1f 86       	std	Y+15, r1	; 0x0f

         hal_configureDmaChannel( pt_uartChanHndl->t_txDmaHndl,
    b05c:	59 96       	adiw	r26, 0x19	; 25
    b05e:	8d 91       	ld	r24, X+
    b060:	9c 91       	ld	r25, X
    b062:	5a 97       	sbiw	r26, 0x1a	; 26
    b064:	aa 80       	ldd	r10, Y+2	; 0x02
    b066:	bb 80       	ldd	r11, Y+3	; 0x03
    b068:	ee 24       	eor	r14, r14
    b06a:	e3 94       	inc	r14
    b06c:	ff 24       	eor	r15, r15
    b06e:	01 e0       	ldi	r16, 0x01	; 1
    b070:	10 e0       	ldi	r17, 0x00	; 0
    b072:	2a 85       	ldd	r18, Y+10	; 0x0a
    b074:	3b 85       	ldd	r19, Y+11	; 0x0b
    b076:	40 e0       	ldi	r20, 0x00	; 0
    b078:	51 e0       	ldi	r21, 0x01	; 1
    b07a:	70 e0       	ldi	r23, 0x00	; 0
    b07c:	0e 94 44 25 	call	0x4a88	; 0x4a88 <hal_configureDmaChannel>
                                  t_chanConf);

         hal_dmaEnableChannel( pt_uartChanHndl->t_txDmaHndl);
    b080:	f4 01       	movw	r30, r8
    b082:	81 8d       	ldd	r24, Z+25	; 0x19
    b084:	92 8d       	ldd	r25, Z+26	; 0x1a
    b086:	0e 94 94 26 	call	0x4d28	; 0x4d28 <hal_dmaEnableChannel>
    b08a:	06 c0       	rjmp	.+12     	; 0xb098 <hal_uartWriteBlock+0x18c>
      else
      {
         /*------------------------------------------------------------------*
          * Transmit data via the DRE interrupt.
          *------------------------------------------------------------------*/
         pt_uartChanHndl->pt_uart->CTRLA |= USART_DREINTLVL_HI_gc;
    b08c:	01 84       	ldd	r0, Z+9	; 0x09
    b08e:	f2 85       	ldd	r31, Z+10	; 0x0a
    b090:	e0 2d       	mov	r30, r0
    b092:	83 81       	ldd	r24, Z+3	; 0x03
    b094:	83 60       	ori	r24, 0x03	; 3
    b096:	83 83       	std	Z+3, r24	; 0x03
      }
   }

   return UART_PASSED;
    b098:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_uartWriteBlock*/
    b09a:	61 96       	adiw	r28, 0x11	; 17
    b09c:	cd bf       	out	0x3d, r28	; 61
    b09e:	de bf       	out	0x3e, r29	; 62
    b0a0:	df 91       	pop	r29
    b0a2:	cf 91       	pop	r28
    b0a4:	1f 91       	pop	r17
    b0a6:	0f 91       	pop	r16
    b0a8:	ff 90       	pop	r15
    b0aa:	ef 90       	pop	r14
    b0ac:	df 90       	pop	r13
    b0ae:	cf 90       	pop	r12
    b0b0:	bf 90       	pop	r11
    b0b2:	af 90       	pop	r10
    b0b4:	9f 90       	pop	r9
    b0b6:	8f 90       	pop	r8
    b0b8:	08 95       	ret

0000b0ba <hal_uartGetBaudRate>:

int32_t hal_uartGetBaudRate( t_UARTHNDL t_handle)
{
    b0ba:	0f 93       	push	r16
    b0bc:	1f 93       	push	r17
    b0be:	cf 93       	push	r28
    b0c0:	df 93       	push	r29
    b0c2:	00 d0       	rcall	.+0      	; 0xb0c4 <hal_uartGetBaudRate+0xa>
    b0c4:	cd b7       	in	r28, 0x3d	; 61
    b0c6:	de b7       	in	r29, 0x3e	; 62
    b0c8:	8a 83       	std	Y+2, r24	; 0x02
    b0ca:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b0cc:	8f b7       	in	r24, 0x3f	; 63
    b0ce:	89 83       	std	Y+1, r24	; 0x01
    b0d0:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b0d2:	ea 81       	ldd	r30, Y+2	; 0x02
    b0d4:	fb 81       	ldd	r31, Y+3	; 0x03
    b0d6:	80 91 44 21 	lds	r24, 0x2144
    b0da:	90 91 45 21 	lds	r25, 0x2145
    b0de:	24 81       	ldd	r18, Z+4	; 0x04
    b0e0:	35 81       	ldd	r19, Z+5	; 0x05
    b0e2:	28 17       	cp	r18, r24
    b0e4:	39 07       	cpc	r19, r25
    b0e6:	39 f0       	breq	.+14     	; 0xb0f6 <hal_uartGetBaudRate+0x3c>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b0e8:	89 81       	ldd	r24, Y+1	; 0x01
    b0ea:	8f bf       	out	0x3f, r24	; 63
      return (int32_t)UART_INVALID_HANDLE;
    b0ec:	0e ef       	ldi	r16, 0xFE	; 254
    b0ee:	1f ef       	ldi	r17, 0xFF	; 255
    b0f0:	2f ef       	ldi	r18, 0xFF	; 255
    b0f2:	3f ef       	ldi	r19, 0xFF	; 255
    b0f4:	0b c0       	rjmp	.+22     	; 0xb10c <hal_uartGetBaudRate+0x52>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    b0f6:	ea 81       	ldd	r30, Y+2	; 0x02
    b0f8:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b0fa:	01 90       	ld	r0, Z+
    b0fc:	f0 81       	ld	r31, Z
    b0fe:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
   }

   HAL_END_CRITICAL();//Enable interrupts
    b100:	89 81       	ldd	r24, Y+1	; 0x01
    b102:	8f bf       	out	0x3f, r24	; 63

   return (int32_t)pt_uartChanHndl->i_baudRate;
    b104:	01 81       	ldd	r16, Z+1	; 0x01
    b106:	12 81       	ldd	r17, Z+2	; 0x02
    b108:	23 81       	ldd	r18, Z+3	; 0x03
    b10a:	34 81       	ldd	r19, Z+4	; 0x04

}/*End hal_uartGetBaudRate*/
    b10c:	b8 01       	movw	r22, r16
    b10e:	c9 01       	movw	r24, r18
    b110:	23 96       	adiw	r28, 0x03	; 3
    b112:	cd bf       	out	0x3d, r28	; 61
    b114:	de bf       	out	0x3e, r29	; 62
    b116:	df 91       	pop	r29
    b118:	cf 91       	pop	r28
    b11a:	1f 91       	pop	r17
    b11c:	0f 91       	pop	r16
    b11e:	08 95       	ret

0000b120 <hal_requestUartChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular UART module
 *---------------------------------------------------------------------------*/
t_UARTHNDL hal_requestUartChannel( t_uartChanId t_chanId)
{
    b120:	0f 93       	push	r16
    b122:	1f 93       	push	r17
    b124:	cf 93       	push	r28
    b126:	df 93       	push	r29
    b128:	cd b7       	in	r28, 0x3d	; 61
    b12a:	de b7       	in	r29, 0x3e	; 62
    b12c:	2b 97       	sbiw	r28, 0x0b	; 11
    b12e:	cd bf       	out	0x3d, r28	; 61
    b130:	de bf       	out	0x3e, r29	; 62
    b132:	28 2f       	mov	r18, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b134:	8f b7       	in	r24, 0x3f	; 63
    b136:	89 83       	std	Y+1, r24	; 0x01
    b138:	f8 94       	cli

   if( (t_chanId < UART_1) || (t_chanId > UART_8))
    b13a:	26 31       	cpi	r18, 0x16	; 22
    b13c:	28 f0       	brcs	.+10     	; 0xb148 <hal_requestUartChannel+0x28>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b13e:	89 81       	ldd	r24, Y+1	; 0x01
    b140:	8f bf       	out	0x3f, r24	; 63
      return (t_UARTHNDL)UART_INVALID_MODULE;
    b142:	82 ef       	ldi	r24, 0xF2	; 242
    b144:	9f ef       	ldi	r25, 0xFF	; 255
    b146:	49 c1       	rjmp	.+658    	; 0xb3da <hal_requestUartChannel+0x2ba>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the UART list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_uartChanHndlList, s_count)
    b148:	e0 91 44 21 	lds	r30, 0x2144
    b14c:	f0 91 45 21 	lds	r31, 0x2145
    b150:	82 81       	ldd	r24, Z+2	; 0x02
    b152:	93 81       	ldd	r25, Z+3	; 0x03
    b154:	e0 91 44 21 	lds	r30, 0x2144
    b158:	f0 91 45 21 	lds	r31, 0x2145
    b15c:	0b c0       	rjmp	.+22     	; 0xb174 <hal_requestUartChannel+0x54>
   {
      pt_element = (t_uartChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    b15e:	ea 81       	ldd	r30, Y+2	; 0x02
    b160:	fb 81       	ldd	r31, Y+3	; 0x03
    b162:	01 90       	ld	r0, Z+
    b164:	f0 81       	ld	r31, Z
    b166:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    b168:	30 81       	ld	r19, Z
    b16a:	32 17       	cp	r19, r18
    b16c:	59 f0       	breq	.+22     	; 0xb184 <hal_requestUartChannel+0x64>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the UART list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_uartChanHndlList, s_count)
    b16e:	01 97       	sbiw	r24, 0x01	; 1
    b170:	ea 81       	ldd	r30, Y+2	; 0x02
    b172:	fb 81       	ldd	r31, Y+3	; 0x03
    b174:	40 85       	ldd	r20, Z+8	; 0x08
    b176:	51 85       	ldd	r21, Z+9	; 0x09
    b178:	4a 83       	std	Y+2, r20	; 0x02
    b17a:	5b 83       	std	Y+3, r21	; 0x03
    b17c:	18 16       	cp	r1, r24
    b17e:	19 06       	cpc	r1, r25
    b180:	74 f3       	brlt	.-36     	; 0xb15e <hal_requestUartChannel+0x3e>
    b182:	03 c0       	rjmp	.+6      	; 0xb18a <hal_requestUartChannel+0x6a>
   pt_uartChanHndl = findUartElement( t_chanId);

   /*------------------------------------------------------------------------*
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl == NULL) /*Yes*/
    b184:	30 97       	sbiw	r30, 0x00	; 0
    b186:	09 f0       	breq	.+2      	; 0xb18a <hal_requestUartChannel+0x6a>
    b188:	1f c1       	rjmp	.+574    	; 0xb3c8 <hal_requestUartChannel+0x2a8>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular UART module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_uartChanHndl));
    b18a:	81 e2       	ldi	r24, 0x21	; 33
    b18c:	90 e0       	ldi	r25, 0x00	; 0
    b18e:	2b 87       	std	Y+11, r18	; 0x0b
    b190:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    b194:	8a 83       	std	Y+2, r24	; 0x02
    b196:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    b198:	8a 81       	ldd	r24, Y+2	; 0x02
    b19a:	9b 81       	ldd	r25, Y+3	; 0x03
    b19c:	2b 85       	ldd	r18, Y+11	; 0x0b
    b19e:	97 fd       	sbrc	r25, 7
    b1a0:	0d c0       	rjmp	.+26     	; 0xb1bc <hal_requestUartChannel+0x9c>
   }

   /*------------------------------------------------------------------------*
    * Add the UART module link onto the list open UART modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_uartChanHndlList,
    b1a2:	80 91 44 21 	lds	r24, 0x2144
    b1a6:	90 91 45 21 	lds	r25, 0x2145
    b1aa:	6a 81       	ldd	r22, Y+2	; 0x02
    b1ac:	7b 81       	ldd	r23, Y+3	; 0x03
    b1ae:	41 e0       	ldi	r20, 0x01	; 1
    b1b0:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    b1b4:	8a 81       	ldd	r24, Y+2	; 0x02
    b1b6:	9b 81       	ldd	r25, Y+3	; 0x03
    b1b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    b1ba:	02 c0       	rjmp	.+4      	; 0xb1c0 <hal_requestUartChannel+0xa0>
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_uartChanHndl));

   if( t_linkHndl < 0)
   {
      return (t_LINKHNDL)UART_OUT_OF_HEAP;
    b1bc:	8f ef       	ldi	r24, 0xFF	; 255
    b1be:	9f ef       	ldi	r25, 0xFF	; 255
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl == NULL) /*Yes*/
   {

      t_linkHndl = createUartHandle();
    b1c0:	8c 83       	std	Y+4, r24	; 0x04
    b1c2:	9d 83       	std	Y+5, r25	; 0x05
      if( t_linkHndl < 0)
    b1c4:	8c 81       	ldd	r24, Y+4	; 0x04
    b1c6:	9d 81       	ldd	r25, Y+5	; 0x05
    b1c8:	97 ff       	sbrs	r25, 7
    b1ca:	05 c0       	rjmp	.+10     	; 0xb1d6 <hal_requestUartChannel+0xb6>
      {
         HAL_END_CRITICAL();//Enable interrupts
    b1cc:	89 81       	ldd	r24, Y+1	; 0x01
    b1ce:	8f bf       	out	0x3f, r24	; 63
         return (t_UARTHNDL)UART_OUT_OF_HEAP;
    b1d0:	8f ef       	ldi	r24, 0xFF	; 255
    b1d2:	9f ef       	ldi	r25, 0xFF	; 255
    b1d4:	02 c1       	rjmp	.+516    	; 0xb3da <hal_requestUartChannel+0x2ba>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    b1d6:	ec 81       	ldd	r30, Y+4	; 0x04
    b1d8:	fd 81       	ldd	r31, Y+5	; 0x05

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b1da:	00 81       	ld	r16, Z
    b1dc:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);

      pt_uartChanHndl->t_id = t_chanId;
    b1de:	f8 01       	movw	r30, r16
    b1e0:	20 83       	st	Z, r18
      pt_uartChanHndl->i_baudRate = 0;
    b1e2:	11 82       	std	Z+1, r1	; 0x01
    b1e4:	12 82       	std	Z+2, r1	; 0x02
    b1e6:	13 82       	std	Z+3, r1	; 0x03
    b1e8:	14 82       	std	Z+4, r1	; 0x04

      switch( t_chanId)
    b1ea:	29 30       	cpi	r18, 0x09	; 9
    b1ec:	09 f4       	brne	.+2      	; 0xb1f0 <hal_requestUartChannel+0xd0>
    b1ee:	68 c0       	rjmp	.+208    	; 0xb2c0 <hal_requestUartChannel+0x1a0>
    b1f0:	2a 30       	cpi	r18, 0x0A	; 10
    b1f2:	40 f4       	brcc	.+16     	; 0xb204 <hal_requestUartChannel+0xe4>
    b1f4:	23 30       	cpi	r18, 0x03	; 3
    b1f6:	81 f1       	breq	.+96     	; 0xb258 <hal_requestUartChannel+0x138>
    b1f8:	26 30       	cpi	r18, 0x06	; 6
    b1fa:	09 f4       	brne	.+2      	; 0xb1fe <hal_requestUartChannel+0xde>
    b1fc:	47 c0       	rjmp	.+142    	; 0xb28c <hal_requestUartChannel+0x16c>
    b1fe:	22 23       	and	r18, r18
    b200:	89 f0       	breq	.+34     	; 0xb224 <hal_requestUartChannel+0x104>
    b202:	e7 c0       	rjmp	.+462    	; 0xb3d2 <hal_requestUartChannel+0x2b2>
    b204:	2f 30       	cpi	r18, 0x0F	; 15
    b206:	09 f4       	brne	.+2      	; 0xb20a <hal_requestUartChannel+0xea>
    b208:	90 c0       	rjmp	.+288    	; 0xb32a <hal_requestUartChannel+0x20a>
    b20a:	20 31       	cpi	r18, 0x10	; 16
    b20c:	20 f4       	brcc	.+8      	; 0xb216 <hal_requestUartChannel+0xf6>
    b20e:	2c 30       	cpi	r18, 0x0C	; 12
    b210:	09 f0       	breq	.+2      	; 0xb214 <hal_requestUartChannel+0xf4>
    b212:	df c0       	rjmp	.+446    	; 0xb3d2 <hal_requestUartChannel+0x2b2>
    b214:	6f c0       	rjmp	.+222    	; 0xb2f4 <hal_requestUartChannel+0x1d4>
    b216:	22 31       	cpi	r18, 0x12	; 18
    b218:	09 f4       	brne	.+2      	; 0xb21c <hal_requestUartChannel+0xfc>
    b21a:	a2 c0       	rjmp	.+324    	; 0xb360 <hal_requestUartChannel+0x240>
    b21c:	25 31       	cpi	r18, 0x15	; 21
    b21e:	09 f0       	breq	.+2      	; 0xb222 <hal_requestUartChannel+0x102>
    b220:	d8 c0       	rjmp	.+432    	; 0xb3d2 <hal_requestUartChannel+0x2b2>
    b222:	b8 c0       	rjmp	.+368    	; 0xb394 <hal_requestUartChannel+0x274>
      {
         case UART_1:

            pt_uartChanHndl->pt_uart = &USARTC0;
    b224:	80 ea       	ldi	r24, 0xA0	; 160
    b226:	98 e0       	ldi	r25, 0x08	; 8
    b228:	f8 01       	movw	r30, r16
    b22a:	81 87       	std	Z+9, r24	; 0x09
    b22c:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b22e:	84 e0       	ldi	r24, 0x04	; 4
    b230:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b232:	88 e0       	ldi	r24, 0x08	; 8
    b234:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b236:	81 e0       	ldi	r24, 0x01	; 1
    b238:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b23a:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b23c:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_conf);
    b23e:	82 e0       	ldi	r24, 0x02	; 2
    b240:	24 e0       	ldi	r18, 0x04	; 4
    b242:	38 e0       	ldi	r19, 0x08	; 8
    b244:	41 e0       	ldi	r20, 0x01	; 1
    b246:	50 e0       	ldi	r21, 0x00	; 0
    b248:	60 e0       	ldi	r22, 0x00	; 0
    b24a:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart1Chan = pt_uartChanHndl;
    b24e:	00 93 84 24 	sts	0x2484, r16
    b252:	10 93 85 24 	sts	0x2485, r17

         break;
    b256:	bd c0       	rjmp	.+378    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_2:

            pt_uartChanHndl->pt_uart = &USARTC1;
    b258:	80 eb       	ldi	r24, 0xB0	; 176
    b25a:	98 e0       	ldi	r25, 0x08	; 8
    b25c:	f8 01       	movw	r30, r16
    b25e:	81 87       	std	Z+9, r24	; 0x09
    b260:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b262:	80 e4       	ldi	r24, 0x40	; 64
    b264:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b266:	80 e8       	ldi	r24, 0x80	; 128
    b268:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b26a:	81 e0       	ldi	r24, 0x01	; 1
    b26c:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b26e:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b270:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_conf);
    b272:	82 e0       	ldi	r24, 0x02	; 2
    b274:	20 e4       	ldi	r18, 0x40	; 64
    b276:	30 e8       	ldi	r19, 0x80	; 128
    b278:	41 e0       	ldi	r20, 0x01	; 1
    b27a:	50 e0       	ldi	r21, 0x00	; 0
    b27c:	60 e0       	ldi	r22, 0x00	; 0
    b27e:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart2Chan = pt_uartChanHndl;
    b282:	00 93 86 24 	sts	0x2486, r16
    b286:	10 93 87 24 	sts	0x2487, r17

         break;
    b28a:	a3 c0       	rjmp	.+326    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_3:

            pt_uartChanHndl->pt_uart = &USARTD0;
    b28c:	80 ea       	ldi	r24, 0xA0	; 160
    b28e:	99 e0       	ldi	r25, 0x09	; 9
    b290:	f8 01       	movw	r30, r16
    b292:	81 87       	std	Z+9, r24	; 0x09
    b294:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b296:	84 e0       	ldi	r24, 0x04	; 4
    b298:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b29a:	88 e0       	ldi	r24, 0x08	; 8
    b29c:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b29e:	81 e0       	ldi	r24, 0x01	; 1
    b2a0:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b2a2:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b2a4:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_conf);
    b2a6:	83 e0       	ldi	r24, 0x03	; 3
    b2a8:	24 e0       	ldi	r18, 0x04	; 4
    b2aa:	38 e0       	ldi	r19, 0x08	; 8
    b2ac:	41 e0       	ldi	r20, 0x01	; 1
    b2ae:	50 e0       	ldi	r21, 0x00	; 0
    b2b0:	60 e0       	ldi	r22, 0x00	; 0
    b2b2:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart3Chan = pt_uartChanHndl;
    b2b6:	00 93 88 24 	sts	0x2488, r16
    b2ba:	10 93 89 24 	sts	0x2489, r17

         break;
    b2be:	89 c0       	rjmp	.+274    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_4:

            pt_uartChanHndl->pt_uart = &USARTD1;
    b2c0:	80 eb       	ldi	r24, 0xB0	; 176
    b2c2:	99 e0       	ldi	r25, 0x09	; 9
    b2c4:	f8 01       	movw	r30, r16
    b2c6:	81 87       	std	Z+9, r24	; 0x09
    b2c8:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b2ca:	80 e4       	ldi	r24, 0x40	; 64
    b2cc:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b2ce:	80 e8       	ldi	r24, 0x80	; 128
    b2d0:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b2d2:	81 e0       	ldi	r24, 0x01	; 1
    b2d4:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b2d6:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b2d8:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_conf);
    b2da:	83 e0       	ldi	r24, 0x03	; 3
    b2dc:	20 e4       	ldi	r18, 0x40	; 64
    b2de:	30 e8       	ldi	r19, 0x80	; 128
    b2e0:	41 e0       	ldi	r20, 0x01	; 1
    b2e2:	50 e0       	ldi	r21, 0x00	; 0
    b2e4:	60 e0       	ldi	r22, 0x00	; 0
    b2e6:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart4Chan = pt_uartChanHndl;
    b2ea:	00 93 8a 24 	sts	0x248A, r16
    b2ee:	10 93 8b 24 	sts	0x248B, r17

         break;
    b2f2:	6f c0       	rjmp	.+222    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_5:

            pt_uartChanHndl->pt_uart = &USARTE0;
    b2f4:	80 ea       	ldi	r24, 0xA0	; 160
    b2f6:	9a e0       	ldi	r25, 0x0A	; 10
    b2f8:	f8 01       	movw	r30, r16
    b2fa:	81 87       	std	Z+9, r24	; 0x09
    b2fc:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b2fe:	84 e0       	ldi	r24, 0x04	; 4
    b300:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b302:	88 e0       	ldi	r24, 0x08	; 8
    b304:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b306:	81 e0       	ldi	r24, 0x01	; 1
    b308:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b30a:	85 e0       	ldi	r24, 0x05	; 5
    b30c:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b30e:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_conf);
    b310:	84 e0       	ldi	r24, 0x04	; 4
    b312:	24 e0       	ldi	r18, 0x04	; 4
    b314:	38 e0       	ldi	r19, 0x08	; 8
    b316:	41 e0       	ldi	r20, 0x01	; 1
    b318:	55 e0       	ldi	r21, 0x05	; 5
    b31a:	60 e0       	ldi	r22, 0x00	; 0
    b31c:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart5Chan = pt_uartChanHndl;
    b320:	00 93 8c 24 	sts	0x248C, r16
    b324:	10 93 8d 24 	sts	0x248D, r17

         break;
    b328:	54 c0       	rjmp	.+168    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_6:

            pt_uartChanHndl->pt_uart = &USARTE1;
    b32a:	80 eb       	ldi	r24, 0xB0	; 176
    b32c:	9a e0       	ldi	r25, 0x0A	; 10
    b32e:	f8 01       	movw	r30, r16
    b330:	81 87       	std	Z+9, r24	; 0x09
    b332:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b334:	80 e4       	ldi	r24, 0x40	; 64
    b336:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b338:	80 e8       	ldi	r24, 0x80	; 128
    b33a:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b33c:	81 e0       	ldi	r24, 0x01	; 1
    b33e:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b340:	85 e0       	ldi	r24, 0x05	; 5
    b342:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b344:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_conf);
    b346:	84 e0       	ldi	r24, 0x04	; 4
    b348:	20 e4       	ldi	r18, 0x40	; 64
    b34a:	30 e8       	ldi	r19, 0x80	; 128
    b34c:	41 e0       	ldi	r20, 0x01	; 1
    b34e:	55 e0       	ldi	r21, 0x05	; 5
    b350:	60 e0       	ldi	r22, 0x00	; 0
    b352:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart6Chan = pt_uartChanHndl;
    b356:	00 93 8e 24 	sts	0x248E, r16
    b35a:	10 93 8f 24 	sts	0x248F, r17

         break;
    b35e:	39 c0       	rjmp	.+114    	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_7:

            pt_uartChanHndl->pt_uart = &USARTF0;
    b360:	80 ea       	ldi	r24, 0xA0	; 160
    b362:	9b e0       	ldi	r25, 0x0B	; 11
    b364:	f8 01       	movw	r30, r16
    b366:	81 87       	std	Z+9, r24	; 0x09
    b368:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b36a:	84 e0       	ldi	r24, 0x04	; 4
    b36c:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b36e:	88 e0       	ldi	r24, 0x08	; 8
    b370:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b372:	81 e0       	ldi	r24, 0x01	; 1
    b374:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b376:	85 e0       	ldi	r24, 0x05	; 5
    b378:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b37a:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_conf);
    b37c:	24 e0       	ldi	r18, 0x04	; 4
    b37e:	38 e0       	ldi	r19, 0x08	; 8
    b380:	41 e0       	ldi	r20, 0x01	; 1
    b382:	55 e0       	ldi	r21, 0x05	; 5
    b384:	60 e0       	ldi	r22, 0x00	; 0
    b386:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart7Chan = pt_uartChanHndl;
    b38a:	00 93 90 24 	sts	0x2490, r16
    b38e:	10 93 91 24 	sts	0x2491, r17

         break;
    b392:	1f c0       	rjmp	.+62     	; 0xb3d2 <hal_requestUartChannel+0x2b2>

         case UART_8:

            pt_uartChanHndl->pt_uart = &USARTF1;
    b394:	80 eb       	ldi	r24, 0xB0	; 176
    b396:	9b e0       	ldi	r25, 0x0B	; 11
    b398:	f8 01       	movw	r30, r16
    b39a:	81 87       	std	Z+9, r24	; 0x09
    b39c:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the console will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b39e:	80 e4       	ldi	r24, 0x40	; 64
    b3a0:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b3a2:	80 e8       	ldi	r24, 0x80	; 128
    b3a4:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b3a6:	81 e0       	ldi	r24, 0x01	; 1
    b3a8:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b3aa:	85 e0       	ldi	r24, 0x05	; 5
    b3ac:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b3ae:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_conf);
    b3b0:	20 e4       	ldi	r18, 0x40	; 64
    b3b2:	30 e8       	ldi	r19, 0x80	; 128
    b3b4:	41 e0       	ldi	r20, 0x01	; 1
    b3b6:	55 e0       	ldi	r21, 0x05	; 5
    b3b8:	60 e0       	ldi	r22, 0x00	; 0
    b3ba:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
            gt_intChanMap.pt_uart8Chan = pt_uartChanHndl;
    b3be:	00 93 92 24 	sts	0x2492, r16
    b3c2:	10 93 93 24 	sts	0x2493, r17

         break;
    b3c6:	05 c0       	rjmp	.+10     	; 0xb3d2 <hal_requestUartChannel+0x2b2>
      }/*End switch( t_chanId)*/

   }/*End if( pt_uartChanHndl == NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    b3c8:	89 81       	ldd	r24, Y+1	; 0x01
    b3ca:	8f bf       	out	0x3f, r24	; 63
      return (t_UARTHNDL)UART_CHANNEL_OPEN;
    b3cc:	89 ef       	ldi	r24, 0xF9	; 249
    b3ce:	9f ef       	ldi	r25, 0xFF	; 255
    b3d0:	04 c0       	rjmp	.+8      	; 0xb3da <hal_requestUartChannel+0x2ba>
   }

   HAL_END_CRITICAL();//Enable interrupts
    b3d2:	89 81       	ldd	r24, Y+1	; 0x01
    b3d4:	8f bf       	out	0x3f, r24	; 63

   return (t_UARTHNDL)t_linkHndl;
    b3d6:	8c 81       	ldd	r24, Y+4	; 0x04
    b3d8:	9d 81       	ldd	r25, Y+5	; 0x05

}/*End hal_requestUartChannel*/
    b3da:	2b 96       	adiw	r28, 0x0b	; 11
    b3dc:	cd bf       	out	0x3d, r28	; 61
    b3de:	de bf       	out	0x3e, r29	; 62
    b3e0:	df 91       	pop	r29
    b3e2:	cf 91       	pop	r28
    b3e4:	1f 91       	pop	r17
    b3e6:	0f 91       	pop	r16
    b3e8:	08 95       	ret

0000b3ea <hal_releaseUartChannel>:

t_uartError hal_releaseUartChannel( t_UARTHNDL t_handle)
{
    b3ea:	cf 93       	push	r28
    b3ec:	df 93       	push	r29
    b3ee:	00 d0       	rcall	.+0      	; 0xb3f0 <hal_releaseUartChannel+0x6>
    b3f0:	cd b7       	in	r28, 0x3d	; 61
    b3f2:	de b7       	in	r29, 0x3e	; 62
    b3f4:	8a 83       	std	Y+2, r24	; 0x02
    b3f6:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b3f8:	8f b7       	in	r24, 0x3f	; 63
    b3fa:	89 83       	std	Y+1, r24	; 0x01
    b3fc:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b3fe:	ea 81       	ldd	r30, Y+2	; 0x02
    b400:	fb 81       	ldd	r31, Y+3	; 0x03
    b402:	80 91 44 21 	lds	r24, 0x2144
    b406:	90 91 45 21 	lds	r25, 0x2145
    b40a:	24 81       	ldd	r18, Z+4	; 0x04
    b40c:	35 81       	ldd	r19, Z+5	; 0x05
    b40e:	28 17       	cp	r18, r24
    b410:	39 07       	cpc	r19, r25
    b412:	21 f0       	breq	.+8      	; 0xb41c <hal_releaseUartChannel+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b414:	89 81       	ldd	r24, Y+1	; 0x01
    b416:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    b418:	8e ef       	ldi	r24, 0xFE	; 254
    b41a:	c7 c0       	rjmp	.+398    	; 0xb5aa <hal_releaseUartChannel+0x1c0>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    b41c:	ea 81       	ldd	r30, Y+2	; 0x02
    b41e:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b420:	01 90       	ld	r0, Z+
    b422:	f0 81       	ld	r31, Z
    b424:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b426:	a1 85       	ldd	r26, Z+9	; 0x09
    b428:	b2 85       	ldd	r27, Z+10	; 0x0a
    b42a:	13 96       	adiw	r26, 0x03	; 3
    b42c:	8c 91       	ld	r24, X
    b42e:	13 97       	sbiw	r26, 0x03	; 3
    b430:	8f 7c       	andi	r24, 0xCF	; 207
    b432:	13 96       	adiw	r26, 0x03	; 3
    b434:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    b436:	a1 85       	ldd	r26, Z+9	; 0x09
    b438:	b2 85       	ldd	r27, Z+10	; 0x0a
    b43a:	13 96       	adiw	r26, 0x03	; 3
    b43c:	8c 91       	ld	r24, X
    b43e:	13 97       	sbiw	r26, 0x03	; 3
    b440:	8c 7f       	andi	r24, 0xFC	; 252
    b442:	13 96       	adiw	r26, 0x03	; 3
    b444:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    b446:	a1 85       	ldd	r26, Z+9	; 0x09
    b448:	b2 85       	ldd	r27, Z+10	; 0x0a
    b44a:	13 96       	adiw	r26, 0x03	; 3
    b44c:	8c 91       	ld	r24, X
    b44e:	13 97       	sbiw	r26, 0x03	; 3
    b450:	83 7f       	andi	r24, 0xF3	; 243
    b452:	13 96       	adiw	r26, 0x03	; 3
    b454:	8c 93       	st	X, r24

      /*---------------------------------------------------------------------*
       * Disable and reset this UART channel.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b456:	a1 85       	ldd	r26, Z+9	; 0x09
    b458:	b2 85       	ldd	r27, Z+10	; 0x0a
    b45a:	13 96       	adiw	r26, 0x03	; 3
    b45c:	8c 91       	ld	r24, X
    b45e:	13 97       	sbiw	r26, 0x03	; 3
    b460:	8f 7c       	andi	r24, 0xCF	; 207
    b462:	13 96       	adiw	r26, 0x03	; 3
    b464:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    b466:	a1 85       	ldd	r26, Z+9	; 0x09
    b468:	b2 85       	ldd	r27, Z+10	; 0x0a
    b46a:	13 96       	adiw	r26, 0x03	; 3
    b46c:	8c 91       	ld	r24, X
    b46e:	13 97       	sbiw	r26, 0x03	; 3
    b470:	8c 7f       	andi	r24, 0xFC	; 252
    b472:	13 96       	adiw	r26, 0x03	; 3
    b474:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    b476:	a1 85       	ldd	r26, Z+9	; 0x09
    b478:	b2 85       	ldd	r27, Z+10	; 0x0a
    b47a:	13 96       	adiw	r26, 0x03	; 3
    b47c:	8c 91       	ld	r24, X
    b47e:	13 97       	sbiw	r26, 0x03	; 3
    b480:	83 7f       	andi	r24, 0xF3	; 243
    b482:	13 96       	adiw	r26, 0x03	; 3
    b484:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_RXEN_bm;
    b486:	a1 85       	ldd	r26, Z+9	; 0x09
    b488:	b2 85       	ldd	r27, Z+10	; 0x0a
    b48a:	14 96       	adiw	r26, 0x04	; 4
    b48c:	8c 91       	ld	r24, X
    b48e:	14 97       	sbiw	r26, 0x04	; 4
    b490:	8f 7e       	andi	r24, 0xEF	; 239
    b492:	14 96       	adiw	r26, 0x04	; 4
    b494:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_TXEN_bm;
    b496:	a1 85       	ldd	r26, Z+9	; 0x09
    b498:	b2 85       	ldd	r27, Z+10	; 0x0a
    b49a:	14 96       	adiw	r26, 0x04	; 4
    b49c:	8c 91       	ld	r24, X
    b49e:	14 97       	sbiw	r26, 0x04	; 4
    b4a0:	87 7f       	andi	r24, 0xF7	; 247
    b4a2:	14 96       	adiw	r26, 0x04	; 4
    b4a4:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CMODE_gm;
    b4a6:	a1 85       	ldd	r26, Z+9	; 0x09
    b4a8:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4aa:	15 96       	adiw	r26, 0x05	; 5
    b4ac:	8c 91       	ld	r24, X
    b4ae:	15 97       	sbiw	r26, 0x05	; 5
    b4b0:	8f 73       	andi	r24, 0x3F	; 63
    b4b2:	15 96       	adiw	r26, 0x05	; 5
    b4b4:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_PMODE_gm;
    b4b6:	a1 85       	ldd	r26, Z+9	; 0x09
    b4b8:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4ba:	15 96       	adiw	r26, 0x05	; 5
    b4bc:	8c 91       	ld	r24, X
    b4be:	15 97       	sbiw	r26, 0x05	; 5
    b4c0:	8f 7c       	andi	r24, 0xCF	; 207
    b4c2:	15 96       	adiw	r26, 0x05	; 5
    b4c4:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CHSIZE_gm;
    b4c6:	a1 85       	ldd	r26, Z+9	; 0x09
    b4c8:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4ca:	15 96       	adiw	r26, 0x05	; 5
    b4cc:	8c 91       	ld	r24, X
    b4ce:	15 97       	sbiw	r26, 0x05	; 5
    b4d0:	88 7f       	andi	r24, 0xF8	; 248
    b4d2:	15 96       	adiw	r26, 0x05	; 5
    b4d4:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_SBMODE_bm;
    b4d6:	a1 85       	ldd	r26, Z+9	; 0x09
    b4d8:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4da:	15 96       	adiw	r26, 0x05	; 5
    b4dc:	8c 91       	ld	r24, X
    b4de:	15 97       	sbiw	r26, 0x05	; 5
    b4e0:	87 7f       	andi	r24, 0xF7	; 247
    b4e2:	15 96       	adiw	r26, 0x05	; 5
    b4e4:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->BAUDCTRLA &= ~USART_BSEL_gm;
    b4e6:	a1 85       	ldd	r26, Z+9	; 0x09
    b4e8:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4ea:	16 96       	adiw	r26, 0x06	; 6
    b4ec:	8c 91       	ld	r24, X
    b4ee:	16 97       	sbiw	r26, 0x06	; 6
    b4f0:	16 96       	adiw	r26, 0x06	; 6
    b4f2:	1c 92       	st	X, r1
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~0x0F; /*BSEL in control B reg*/
    b4f4:	a1 85       	ldd	r26, Z+9	; 0x09
    b4f6:	b2 85       	ldd	r27, Z+10	; 0x0a
    b4f8:	17 96       	adiw	r26, 0x07	; 7
    b4fa:	8c 91       	ld	r24, X
    b4fc:	17 97       	sbiw	r26, 0x07	; 7
    b4fe:	80 7f       	andi	r24, 0xF0	; 240
    b500:	17 96       	adiw	r26, 0x07	; 7
    b502:	8c 93       	st	X, r24
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~USART_BSCALE_gm;
    b504:	a1 85       	ldd	r26, Z+9	; 0x09
    b506:	b2 85       	ldd	r27, Z+10	; 0x0a
    b508:	17 96       	adiw	r26, 0x07	; 7
    b50a:	8c 91       	ld	r24, X
    b50c:	17 97       	sbiw	r26, 0x07	; 7
    b50e:	8f 70       	andi	r24, 0x0F	; 15
    b510:	17 96       	adiw	r26, 0x07	; 7
    b512:	8c 93       	st	X, r24
    b514:	17 97       	sbiw	r26, 0x07	; 7

      switch( pt_uartChanHndl->t_id)
    b516:	80 81       	ld	r24, Z
    b518:	89 30       	cpi	r24, 0x09	; 9
    b51a:	21 f1       	breq	.+72     	; 0xb564 <hal_releaseUartChannel+0x17a>
    b51c:	8a 30       	cpi	r24, 0x0A	; 10
    b51e:	38 f4       	brcc	.+14     	; 0xb52e <hal_releaseUartChannel+0x144>
    b520:	83 30       	cpi	r24, 0x03	; 3
    b522:	b1 f0       	breq	.+44     	; 0xb550 <hal_releaseUartChannel+0x166>
    b524:	86 30       	cpi	r24, 0x06	; 6
    b526:	c9 f0       	breq	.+50     	; 0xb55a <hal_releaseUartChannel+0x170>
    b528:	88 23       	and	r24, r24
    b52a:	69 f0       	breq	.+26     	; 0xb546 <hal_releaseUartChannel+0x15c>
    b52c:	33 c0       	rjmp	.+102    	; 0xb594 <hal_releaseUartChannel+0x1aa>
    b52e:	8f 30       	cpi	r24, 0x0F	; 15
    b530:	19 f1       	breq	.+70     	; 0xb578 <hal_releaseUartChannel+0x18e>
    b532:	80 31       	cpi	r24, 0x10	; 16
    b534:	18 f4       	brcc	.+6      	; 0xb53c <hal_releaseUartChannel+0x152>
    b536:	8c 30       	cpi	r24, 0x0C	; 12
    b538:	69 f5       	brne	.+90     	; 0xb594 <hal_releaseUartChannel+0x1aa>
    b53a:	19 c0       	rjmp	.+50     	; 0xb56e <hal_releaseUartChannel+0x184>
    b53c:	82 31       	cpi	r24, 0x12	; 18
    b53e:	09 f1       	breq	.+66     	; 0xb582 <hal_releaseUartChannel+0x198>
    b540:	85 31       	cpi	r24, 0x15	; 21
    b542:	41 f5       	brne	.+80     	; 0xb594 <hal_releaseUartChannel+0x1aa>
    b544:	23 c0       	rjmp	.+70     	; 0xb58c <hal_releaseUartChannel+0x1a2>
      {
         case UART_1:
            gt_intChanMap.pt_uart1Chan = NULL;
    b546:	10 92 84 24 	sts	0x2484, r1
    b54a:	10 92 85 24 	sts	0x2485, r1
         break;
    b54e:	22 c0       	rjmp	.+68     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_2:
            gt_intChanMap.pt_uart2Chan = NULL;
    b550:	10 92 86 24 	sts	0x2486, r1
    b554:	10 92 87 24 	sts	0x2487, r1
         break;
    b558:	1d c0       	rjmp	.+58     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_3:
            gt_intChanMap.pt_uart3Chan = NULL;
    b55a:	10 92 88 24 	sts	0x2488, r1
    b55e:	10 92 89 24 	sts	0x2489, r1
         break;
    b562:	18 c0       	rjmp	.+48     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_4:
            gt_intChanMap.pt_uart4Chan = NULL;
    b564:	10 92 8a 24 	sts	0x248A, r1
    b568:	10 92 8b 24 	sts	0x248B, r1
         break;
    b56c:	13 c0       	rjmp	.+38     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_5:
            gt_intChanMap.pt_uart5Chan = NULL;
    b56e:	10 92 8c 24 	sts	0x248C, r1
    b572:	10 92 8d 24 	sts	0x248D, r1
         break;
    b576:	0e c0       	rjmp	.+28     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_6:
            gt_intChanMap.pt_uart6Chan = NULL;
    b578:	10 92 8e 24 	sts	0x248E, r1
    b57c:	10 92 8f 24 	sts	0x248F, r1
         break;
    b580:	09 c0       	rjmp	.+18     	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_7:
            gt_intChanMap.pt_uart7Chan = NULL;
    b582:	10 92 90 24 	sts	0x2490, r1
    b586:	10 92 91 24 	sts	0x2491, r1
         break;
    b58a:	04 c0       	rjmp	.+8      	; 0xb594 <hal_releaseUartChannel+0x1aa>

         case UART_8:
            gt_intChanMap.pt_uart8Chan = NULL;
    b58c:	10 92 92 24 	sts	0x2492, r1
    b590:	10 92 93 24 	sts	0x2493, r1
         break;

      }/*End switch( pt_uartChanHndl->t_id)*/

      t_lErr = utl_destroyLink( gt_uartChanHndlList,
    b594:	80 91 44 21 	lds	r24, 0x2144
    b598:	90 91 45 21 	lds	r25, 0x2145
    b59c:	6a 81       	ldd	r22, Y+2	; 0x02
    b59e:	7b 81       	ldd	r23, Y+3	; 0x03
    b5a0:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                                (t_LINKHNDL)t_handle);

   }

   HAL_END_CRITICAL();//Enable interrupts
    b5a4:	89 81       	ldd	r24, Y+1	; 0x01
    b5a6:	8f bf       	out	0x3f, r24	; 63

   return UART_PASSED;
    b5a8:	80 e0       	ldi	r24, 0x00	; 0

}/*End hal_releaseUartChannel*/
    b5aa:	23 96       	adiw	r28, 0x03	; 3
    b5ac:	cd bf       	out	0x3d, r28	; 61
    b5ae:	de bf       	out	0x3e, r29	; 62
    b5b0:	df 91       	pop	r29
    b5b2:	cf 91       	pop	r28
    b5b4:	08 95       	ret

0000b5b6 <hal_configureUartChannel>:

t_uartError hal_configureUartChannel( t_UARTHNDL t_handle,
                                      t_uartConfig t_conf)
{
    b5b6:	4f 92       	push	r4
    b5b8:	5f 92       	push	r5
    b5ba:	6f 92       	push	r6
    b5bc:	7f 92       	push	r7
    b5be:	8f 92       	push	r8
    b5c0:	9f 92       	push	r9
    b5c2:	af 92       	push	r10
    b5c4:	bf 92       	push	r11
    b5c6:	cf 92       	push	r12
    b5c8:	df 92       	push	r13
    b5ca:	ef 92       	push	r14
    b5cc:	ff 92       	push	r15
    b5ce:	0f 93       	push	r16
    b5d0:	1f 93       	push	r17
    b5d2:	cf 93       	push	r28
    b5d4:	df 93       	push	r29
    b5d6:	cd b7       	in	r28, 0x3d	; 61
    b5d8:	de b7       	in	r29, 0x3e	; 62
    b5da:	69 97       	sbiw	r28, 0x19	; 25
    b5dc:	cd bf       	out	0x3d, r28	; 61
    b5de:	de bf       	out	0x3e, r29	; 62
    b5e0:	8a 83       	std	Y+2, r24	; 0x02
    b5e2:	9b 83       	std	Y+3, r25	; 0x03
    b5e4:	ac 82       	std	Y+4, r10	; 0x04
    b5e6:	bd 82       	std	Y+5, r11	; 0x05
    b5e8:	ec 2d       	mov	r30, r12
    b5ea:	ce 82       	std	Y+6, r12	; 0x06
    b5ec:	df 82       	std	Y+7, r13	; 0x07
    b5ee:	e8 86       	std	Y+8, r14	; 0x08
    b5f0:	f9 86       	std	Y+9, r15	; 0x09
    b5f2:	0a 87       	std	Y+10, r16	; 0x0a
    b5f4:	1b 87       	std	Y+11, r17	; 0x0b
    b5f6:	2c 87       	std	Y+12, r18	; 0x0c
    b5f8:	3d 87       	std	Y+13, r19	; 0x0d
    b5fa:	4e 87       	std	Y+14, r20	; 0x0e
    b5fc:	5f 87       	std	Y+15, r21	; 0x0f
    b5fe:	68 8b       	std	Y+16, r22	; 0x10
    b600:	79 8b       	std	Y+17, r23	; 0x11

   }

   HAL_END_CRITICAL();//Enable interrupts

   return UART_PASSED;
    b602:	0b 2d       	mov	r16, r11
    b604:	1c 2d       	mov	r17, r12
    b606:	28 85       	ldd	r18, Y+8	; 0x08
    b608:	39 85       	ldd	r19, Y+9	; 0x09
    b60a:	4a 85       	ldd	r20, Y+10	; 0x0a
    b60c:	5b 85       	ldd	r21, Y+11	; 0x0b
    b60e:	2e 8b       	std	Y+22, r18	; 0x16
    b610:	3f 8b       	std	Y+23, r19	; 0x17
    b612:	48 8f       	std	Y+24, r20	; 0x18
    b614:	59 8f       	std	Y+25, r21	; 0x19

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b616:	9f b7       	in	r25, 0x3f	; 63
    b618:	99 83       	std	Y+1, r25	; 0x01
    b61a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * At this time only async mode is supported!
    *------------------------------------------------------------------------*/
   if( t_conf.t_comMd != ASYNC)
    b61c:	aa 20       	and	r10, r10
    b61e:	21 f0       	breq	.+8      	; 0xb628 <hal_configureUartChannel+0x72>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b620:	89 81       	ldd	r24, Y+1	; 0x01
    b622:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_COM_MODE;
    b624:	88 ef       	ldi	r24, 0xF8	; 248
    b626:	bc c2       	rjmp	.+1400   	; 0xbba0 <hal_configureUartChannel+0x5ea>
   }/*End if( t_conf.t_comMd != ASYNC)*/

   if( (t_conf.t_parityMd < NO_PARITY) || (t_conf.t_parityMd > ODD_PARITY))
    b628:	e3 30       	cpi	r30, 0x03	; 3
    b62a:	20 f0       	brcs	.+8      	; 0xb634 <hal_configureUartChannel+0x7e>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b62c:	89 81       	ldd	r24, Y+1	; 0x01
    b62e:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_PARITY_MODE;
    b630:	86 ef       	ldi	r24, 0xF6	; 246
    b632:	b6 c2       	rjmp	.+1388   	; 0xbba0 <hal_configureUartChannel+0x5ea>
   }/*End if( (t_conf.t_parityMd < NO_PARITY) || (t_conf.t_parityMd >
   ODD_PARITY))*/

   if( (t_conf.t_charSz < CHAR_5BIT) || (t_conf.t_charSz > CHAR_8BIT))
    b634:	04 30       	cpi	r16, 0x04	; 4
    b636:	20 f0       	brcs	.+8      	; 0xb640 <hal_configureUartChannel+0x8a>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b638:	89 81       	ldd	r24, Y+1	; 0x01
    b63a:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_CHAR_SIZE;
    b63c:	87 ef       	ldi	r24, 0xF7	; 247
    b63e:	b0 c2       	rjmp	.+1376   	; 0xbba0 <hal_configureUartChannel+0x5ea>
   }/*End if( (t_conf.t_charSz < CHAR_5BIT) || (t_conf.t_charSz > CHAR_8BIT))*/

   if( (t_conf.t_stopBitMd < ONE_STOP_BIT) || (t_conf.t_stopBitMd >
    b640:	31 e0       	ldi	r19, 0x01	; 1
    b642:	3d 15       	cp	r19, r13
    b644:	20 f4       	brcc	.+8      	; 0xb64e <hal_configureUartChannel+0x98>
   TWO_STOP_BITS))
   {
      HAL_END_CRITICAL();//Enable interrupts
    b646:	89 81       	ldd	r24, Y+1	; 0x01
    b648:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_STOPBIT_MODE;
    b64a:	85 ef       	ldi	r24, 0xF5	; 245
    b64c:	a9 c2       	rjmp	.+1362   	; 0xbba0 <hal_configureUartChannel+0x5ea>
   }/*End if( (t_conf.t_stopBitMd < ONE_STOP_BIT) || (t_conf.t_stopBitMd >
   TWO_STOP_BITS))*/

   if( ((float)t_conf.i_baudRate < ((float)hal_getCpuFreq() / 8388608.0f)) ||
    b64e:	6e 89       	ldd	r22, Y+22	; 0x16
    b650:	7f 89       	ldd	r23, Y+23	; 0x17
    b652:	88 8d       	ldd	r24, Y+24	; 0x18
    b654:	99 8d       	ldd	r25, Y+25	; 0x19
    b656:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    b65a:	6a 8b       	std	Y+18, r22	; 0x12
    b65c:	7b 8b       	std	Y+19, r23	; 0x13
    b65e:	8c 8b       	std	Y+20, r24	; 0x14
    b660:	9d 8b       	std	Y+21, r25	; 0x15
    b662:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    b666:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    b66a:	20 e0       	ldi	r18, 0x00	; 0
    b66c:	30 e0       	ldi	r19, 0x00	; 0
    b66e:	40 e0       	ldi	r20, 0x00	; 0
    b670:	54 e3       	ldi	r21, 0x34	; 52
    b672:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    b676:	9b 01       	movw	r18, r22
    b678:	ac 01       	movw	r20, r24
    b67a:	6a 89       	ldd	r22, Y+18	; 0x12
    b67c:	7b 89       	ldd	r23, Y+19	; 0x13
    b67e:	8c 89       	ldd	r24, Y+20	; 0x14
    b680:	9d 89       	ldd	r25, Y+21	; 0x15
    b682:	0e 94 ac ae 	call	0x15d58	; 0x15d58 <__cmpsf2>
    b686:	87 fd       	sbrc	r24, 7
    b688:	14 c0       	rjmp	.+40     	; 0xb6b2 <hal_configureUartChannel+0xfc>
   ((float)t_conf.i_baudRate > ((float)hal_getCpuFreq() / 16.0f)))
    b68a:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    b68e:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    b692:	20 e0       	ldi	r18, 0x00	; 0
    b694:	30 e0       	ldi	r19, 0x00	; 0
    b696:	40 e8       	ldi	r20, 0x80	; 128
    b698:	5d e3       	ldi	r21, 0x3D	; 61
    b69a:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    b69e:	9b 01       	movw	r18, r22
    b6a0:	ac 01       	movw	r20, r24
      HAL_END_CRITICAL();//Enable interrupts
      return UART_INVALID_STOPBIT_MODE;
   }/*End if( (t_conf.t_stopBitMd < ONE_STOP_BIT) || (t_conf.t_stopBitMd >
   TWO_STOP_BITS))*/

   if( ((float)t_conf.i_baudRate < ((float)hal_getCpuFreq() / 8388608.0f)) ||
    b6a2:	6a 89       	ldd	r22, Y+18	; 0x12
    b6a4:	7b 89       	ldd	r23, Y+19	; 0x13
    b6a6:	8c 89       	ldd	r24, Y+20	; 0x14
    b6a8:	9d 89       	ldd	r25, Y+21	; 0x15
    b6aa:	0e 94 83 b0 	call	0x16106	; 0x16106 <__gesf2>
    b6ae:	18 16       	cp	r1, r24
    b6b0:	24 f4       	brge	.+8      	; 0xb6ba <hal_configureUartChannel+0x104>
   ((float)t_conf.i_baudRate > ((float)hal_getCpuFreq() / 16.0f)))
   {
      HAL_END_CRITICAL();//Enable interrupts
    b6b2:	89 81       	ldd	r24, Y+1	; 0x01
    b6b4:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_BAUD_RATE;
    b6b6:	84 ef       	ldi	r24, 0xF4	; 244
    b6b8:	73 c2       	rjmp	.+1254   	; 0xbba0 <hal_configureUartChannel+0x5ea>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b6ba:	ea 81       	ldd	r30, Y+2	; 0x02
    b6bc:	fb 81       	ldd	r31, Y+3	; 0x03
    b6be:	80 91 44 21 	lds	r24, 0x2144
    b6c2:	90 91 45 21 	lds	r25, 0x2145
    b6c6:	24 81       	ldd	r18, Z+4	; 0x04
    b6c8:	35 81       	ldd	r19, Z+5	; 0x05
    b6ca:	28 17       	cp	r18, r24
    b6cc:	39 07       	cpc	r19, r25
    b6ce:	21 f0       	breq	.+8      	; 0xb6d8 <hal_configureUartChannel+0x122>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b6d0:	89 81       	ldd	r24, Y+1	; 0x01
    b6d2:	8f bf       	out	0x3f, r24	; 63
      return UART_INVALID_HANDLE;
    b6d4:	8e ef       	ldi	r24, 0xFE	; 254
    b6d6:	64 c2       	rjmp	.+1224   	; 0xbba0 <hal_configureUartChannel+0x5ea>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    b6d8:	ea 81       	ldd	r30, Y+2	; 0x02
    b6da:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b6dc:	80 80       	ld	r8, Z
    b6de:	91 80       	ldd	r9, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Disable all UART interrupts for this channel
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b6e0:	d4 01       	movw	r26, r8
    b6e2:	19 96       	adiw	r26, 0x09	; 9
    b6e4:	ed 91       	ld	r30, X+
    b6e6:	fc 91       	ld	r31, X
    b6e8:	1a 97       	sbiw	r26, 0x0a	; 10
    b6ea:	83 81       	ldd	r24, Z+3	; 0x03
    b6ec:	8f 7c       	andi	r24, 0xCF	; 207
    b6ee:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    b6f0:	19 96       	adiw	r26, 0x09	; 9
    b6f2:	ed 91       	ld	r30, X+
    b6f4:	fc 91       	ld	r31, X
    b6f6:	1a 97       	sbiw	r26, 0x0a	; 10
    b6f8:	83 81       	ldd	r24, Z+3	; 0x03
    b6fa:	8c 7f       	andi	r24, 0xFC	; 252
    b6fc:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    b6fe:	19 96       	adiw	r26, 0x09	; 9
    b700:	ed 91       	ld	r30, X+
    b702:	fc 91       	ld	r31, X
    b704:	1a 97       	sbiw	r26, 0x0a	; 10
    b706:	83 81       	ldd	r24, Z+3	; 0x03
    b708:	83 7f       	andi	r24, 0xF3	; 243
    b70a:	83 83       	std	Z+3, r24	; 0x03

      /*---------------------------------------------------------------------*
       * Disable RX and TX UARTS.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_RXEN_bm;
    b70c:	19 96       	adiw	r26, 0x09	; 9
    b70e:	ed 91       	ld	r30, X+
    b710:	fc 91       	ld	r31, X
    b712:	1a 97       	sbiw	r26, 0x0a	; 10
    b714:	84 81       	ldd	r24, Z+4	; 0x04
    b716:	8f 7e       	andi	r24, 0xEF	; 239
    b718:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_TXEN_bm;
    b71a:	19 96       	adiw	r26, 0x09	; 9
    b71c:	ed 91       	ld	r30, X+
    b71e:	fc 91       	ld	r31, X
    b720:	1a 97       	sbiw	r26, 0x0a	; 10
    b722:	84 81       	ldd	r24, Z+4	; 0x04
    b724:	87 7f       	andi	r24, 0xF7	; 247
    b726:	84 83       	std	Z+4, r24	; 0x04

      /*---------------------------------------------------------------------*
       * Reset and configure the UART mode.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CMODE_gm;
    b728:	19 96       	adiw	r26, 0x09	; 9
    b72a:	ed 91       	ld	r30, X+
    b72c:	fc 91       	ld	r31, X
    b72e:	1a 97       	sbiw	r26, 0x0a	; 10
    b730:	85 81       	ldd	r24, Z+5	; 0x05
    b732:	8f 73       	andi	r24, 0x3F	; 63
    b734:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= (t_conf.t_comMd << 6);
    b736:	19 96       	adiw	r26, 0x09	; 9
    b738:	ed 91       	ld	r30, X+
    b73a:	fc 91       	ld	r31, X
    b73c:	1a 97       	sbiw	r26, 0x0a	; 10
    b73e:	85 81       	ldd	r24, Z+5	; 0x05
    b740:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the parity mode.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_PMODE_gm;
    b742:	19 96       	adiw	r26, 0x09	; 9
    b744:	ed 91       	ld	r30, X+
    b746:	fc 91       	ld	r31, X
    b748:	1a 97       	sbiw	r26, 0x0a	; 10
    b74a:	85 81       	ldd	r24, Z+5	; 0x05
    b74c:	8f 7c       	andi	r24, 0xCF	; 207
    b74e:	85 83       	std	Z+5, r24	; 0x05
    b750:	19 96       	adiw	r26, 0x09	; 9
    b752:	ed 91       	ld	r30, X+
    b754:	fc 91       	ld	r31, X
    b756:	1a 97       	sbiw	r26, 0x0a	; 10
         case NO_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_DISABLED_gc;
         break;

         case EVEN_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_EVEN_gc;
    b758:	85 81       	ldd	r24, Z+5	; 0x05
      /*---------------------------------------------------------------------*
       * Reset and configure the parity mode.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_PMODE_gm;

      switch( t_conf.t_parityMd)
    b75a:	11 30       	cpi	r17, 0x01	; 1
    b75c:	19 f0       	breq	.+6      	; 0xb764 <hal_configureUartChannel+0x1ae>
    b75e:	12 30       	cpi	r17, 0x02	; 2
    b760:	21 f4       	brne	.+8      	; 0xb76a <hal_configureUartChannel+0x1b4>
    b762:	02 c0       	rjmp	.+4      	; 0xb768 <hal_configureUartChannel+0x1b2>
         case NO_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_DISABLED_gc;
         break;

         case EVEN_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_EVEN_gc;
    b764:	80 62       	ori	r24, 0x20	; 32
    b766:	01 c0       	rjmp	.+2      	; 0xb76a <hal_configureUartChannel+0x1b4>
         break;

         case ODD_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_ODD_gc;
    b768:	80 63       	ori	r24, 0x30	; 48
    b76a:	85 83       	std	Z+5, r24	; 0x05
      }/*End switch( t_conf.t_parityMd)*/

      /*---------------------------------------------------------------------*
       * Reset and configure the character size.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CHSIZE_gm;
    b76c:	d4 01       	movw	r26, r8
    b76e:	19 96       	adiw	r26, 0x09	; 9
    b770:	ed 91       	ld	r30, X+
    b772:	fc 91       	ld	r31, X
    b774:	1a 97       	sbiw	r26, 0x0a	; 10
    b776:	85 81       	ldd	r24, Z+5	; 0x05
    b778:	88 7f       	andi	r24, 0xF8	; 248
    b77a:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= t_conf.t_charSz;
    b77c:	19 96       	adiw	r26, 0x09	; 9
    b77e:	ed 91       	ld	r30, X+
    b780:	fc 91       	ld	r31, X
    b782:	1a 97       	sbiw	r26, 0x0a	; 10
    b784:	85 81       	ldd	r24, Z+5	; 0x05
    b786:	80 2b       	or	r24, r16
    b788:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the number of stop bits.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_SBMODE_bm;
    b78a:	19 96       	adiw	r26, 0x09	; 9
    b78c:	ed 91       	ld	r30, X+
    b78e:	fc 91       	ld	r31, X
    b790:	1a 97       	sbiw	r26, 0x0a	; 10
    b792:	85 81       	ldd	r24, Z+5	; 0x05
    b794:	87 7f       	andi	r24, 0xF7	; 247
    b796:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= (t_conf.t_stopBitMd << 3);
    b798:	19 96       	adiw	r26, 0x09	; 9
    b79a:	ed 91       	ld	r30, X+
    b79c:	fc 91       	ld	r31, X
    b79e:	1a 97       	sbiw	r26, 0x0a	; 10
    b7a0:	85 81       	ldd	r24, Z+5	; 0x05
    b7a2:	dd 0c       	add	r13, r13
    b7a4:	dd 0c       	add	r13, r13
    b7a6:	dd 0c       	add	r13, r13
    b7a8:	d8 2a       	or	r13, r24
    b7aa:	d5 82       	std	Z+5, r13	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the baud rate
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->BAUDCTRLA &= ~USART_BSEL_gm;
    b7ac:	19 96       	adiw	r26, 0x09	; 9
    b7ae:	ed 91       	ld	r30, X+
    b7b0:	fc 91       	ld	r31, X
    b7b2:	1a 97       	sbiw	r26, 0x0a	; 10
    b7b4:	86 81       	ldd	r24, Z+6	; 0x06
    b7b6:	16 82       	std	Z+6, r1	; 0x06
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~0x0F; /*BSEL in control B reg*/
    b7b8:	19 96       	adiw	r26, 0x09	; 9
    b7ba:	ed 91       	ld	r30, X+
    b7bc:	fc 91       	ld	r31, X
    b7be:	1a 97       	sbiw	r26, 0x0a	; 10
    b7c0:	87 81       	ldd	r24, Z+7	; 0x07
    b7c2:	80 7f       	andi	r24, 0xF0	; 240
    b7c4:	87 83       	std	Z+7, r24	; 0x07
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~USART_BSCALE_gm;
    b7c6:	19 96       	adiw	r26, 0x09	; 9
    b7c8:	ed 91       	ld	r30, X+
    b7ca:	fc 91       	ld	r31, X
    b7cc:	1a 97       	sbiw	r26, 0x0a	; 10
    b7ce:	87 81       	ldd	r24, Z+7	; 0x07
    b7d0:	8f 70       	andi	r24, 0x0F	; 15
    b7d2:	87 83       	std	Z+7, r24	; 0x07
       * value of BSEL and the final value BSCALE are loaded into the baud
       * rate registers and the overall error in the baud rate is minimized.
       *---------------------------------------------------------------------*/

      /*Using part 2 of equation 1*/
      f_bselPlus1 = ((float)hal_getCpuFreq() /
    b7d4:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    b7d8:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    b7dc:	6b 01       	movw	r12, r22
    b7de:	7c 01       	movw	r14, r24
      ((float)t_conf.i_baudRate*16.0f));
    b7e0:	6a 89       	ldd	r22, Y+18	; 0x12
    b7e2:	7b 89       	ldd	r23, Y+19	; 0x13
    b7e4:	8c 89       	ldd	r24, Y+20	; 0x14
    b7e6:	9d 89       	ldd	r25, Y+21	; 0x15
    b7e8:	20 e0       	ldi	r18, 0x00	; 0
    b7ea:	30 e0       	ldi	r19, 0x00	; 0
    b7ec:	40 e8       	ldi	r20, 0x80	; 128
    b7ee:	51 e4       	ldi	r21, 0x41	; 65
    b7f0:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    b7f4:	9b 01       	movw	r18, r22
    b7f6:	ac 01       	movw	r20, r24
       * value of BSEL and the final value BSCALE are loaded into the baud
       * rate registers and the overall error in the baud rate is minimized.
       *---------------------------------------------------------------------*/

      /*Using part 2 of equation 1*/
      f_bselPlus1 = ((float)hal_getCpuFreq() /
    b7f8:	c7 01       	movw	r24, r14
    b7fa:	b6 01       	movw	r22, r12
    b7fc:	0e 94 b0 ae 	call	0x15d60	; 0x15d60 <__divsf3>
    b800:	d6 2e       	mov	r13, r22
    b802:	c7 2e       	mov	r12, r23
    b804:	b8 2e       	mov	r11, r24
    b806:	a9 2e       	mov	r10, r25
      ((float)t_conf.i_baudRate*16.0f));

      if( (f_bselPlus1 - 1.0f) >= (float)BSEL_MAX_RANGE) /* Too high need to
    b808:	a6 01       	movw	r20, r12
    b80a:	95 01       	movw	r18, r10
    b80c:	85 2f       	mov	r24, r21
    b80e:	94 2f       	mov	r25, r20
    b810:	a3 2f       	mov	r26, r19
    b812:	b2 2f       	mov	r27, r18
    b814:	bc 01       	movw	r22, r24
    b816:	cd 01       	movw	r24, r26
    b818:	20 e0       	ldi	r18, 0x00	; 0
    b81a:	30 e0       	ldi	r19, 0x00	; 0
    b81c:	40 e8       	ldi	r20, 0x80	; 128
    b81e:	5f e3       	ldi	r21, 0x3F	; 63
    b820:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <__subsf3>
    b824:	76 2e       	mov	r7, r22
    b826:	67 2e       	mov	r6, r23
    b828:	58 2e       	mov	r5, r24
    b82a:	49 2e       	mov	r4, r25
    b82c:	06 2f       	mov	r16, r22
    b82e:	17 2f       	mov	r17, r23
    b830:	72 01       	movw	r14, r4
    b832:	a3 01       	movw	r20, r6
    b834:	92 01       	movw	r18, r4
    b836:	85 2f       	mov	r24, r21
    b838:	94 2f       	mov	r25, r20
    b83a:	a3 2f       	mov	r26, r19
    b83c:	b2 2f       	mov	r27, r18
    b83e:	bc 01       	movw	r22, r24
    b840:	cd 01       	movw	r24, r26
    b842:	20 e0       	ldi	r18, 0x00	; 0
    b844:	30 ef       	ldi	r19, 0xF0	; 240
    b846:	4f e7       	ldi	r20, 0x7F	; 127
    b848:	55 e4       	ldi	r21, 0x45	; 69
    b84a:	0e 94 83 b0 	call	0x16106	; 0x16106 <__gesf2>
    b84e:	87 ff       	sbrs	r24, 7
    b850:	18 c0       	rjmp	.+48     	; 0xb882 <hal_configureUartChannel+0x2cc>
    b852:	37 c0       	rjmp	.+110    	; 0xb8c2 <hal_configureUartChannel+0x30c>
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 > (float)BSEL_MAX_RANGE)
         {
            f_bselPlus1 = f_bselPlus1 / 2.0f;
    b854:	a6 01       	movw	r20, r12
    b856:	95 01       	movw	r18, r10
    b858:	85 2f       	mov	r24, r21
    b85a:	9c 2d       	mov	r25, r12
    b85c:	a3 2f       	mov	r26, r19
    b85e:	ba 2d       	mov	r27, r10
    b860:	bc 01       	movw	r22, r24
    b862:	cd 01       	movw	r24, r26
    b864:	20 e0       	ldi	r18, 0x00	; 0
    b866:	30 e0       	ldi	r19, 0x00	; 0
    b868:	40 e0       	ldi	r20, 0x00	; 0
    b86a:	5f e3       	ldi	r21, 0x3F	; 63
    b86c:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    b870:	d6 2e       	mov	r13, r22
    b872:	c7 2e       	mov	r12, r23
    b874:	b8 2e       	mov	r11, r24
    b876:	a9 2e       	mov	r10, r25
            c_bscale++;
    b878:	73 94       	inc	r7
            if( c_bscale == 7)
    b87a:	b7 e0       	ldi	r27, 0x07	; 7
    b87c:	7b 16       	cp	r7, r27
    b87e:	11 f4       	brne	.+4      	; 0xb884 <hal_configureUartChannel+0x2ce>
    b880:	11 c0       	rjmp	.+34     	; 0xb8a4 <hal_configureUartChannel+0x2ee>

      /*Using part 2 of equation 1*/
      f_bselPlus1 = ((float)hal_getCpuFreq() /
      ((float)t_conf.i_baudRate*16.0f));

      if( (f_bselPlus1 - 1.0f) >= (float)BSEL_MAX_RANGE) /* Too high need to
    b882:	77 24       	eor	r7, r7
                                                            BSCALE*/
      {
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 > (float)BSEL_MAX_RANGE)
    b884:	a6 01       	movw	r20, r12
    b886:	95 01       	movw	r18, r10
    b888:	85 2f       	mov	r24, r21
    b88a:	9c 2d       	mov	r25, r12
    b88c:	a3 2f       	mov	r26, r19
    b88e:	ba 2d       	mov	r27, r10
    b890:	bc 01       	movw	r22, r24
    b892:	cd 01       	movw	r24, r26
    b894:	20 e0       	ldi	r18, 0x00	; 0
    b896:	30 ef       	ldi	r19, 0xF0	; 240
    b898:	4f e7       	ldi	r20, 0x7F	; 127
    b89a:	55 e4       	ldi	r21, 0x45	; 69
    b89c:	0e 94 83 b0 	call	0x16106	; 0x16106 <__gesf2>
    b8a0:	18 16       	cp	r1, r24
    b8a2:	c4 f2       	brlt	.-80     	; 0xb854 <hal_configureUartChannel+0x29e>
            c_bscale++;
            if( c_bscale == 7)
               break;
         }

         s_bsel = (uint16_t)(f_bselPlus1 - 1.0f);
    b8a4:	a6 01       	movw	r20, r12
    b8a6:	95 01       	movw	r18, r10
    b8a8:	85 2f       	mov	r24, r21
    b8aa:	9c 2d       	mov	r25, r12
    b8ac:	a3 2f       	mov	r26, r19
    b8ae:	ba 2d       	mov	r27, r10
    b8b0:	bc 01       	movw	r22, r24
    b8b2:	cd 01       	movw	r24, r26
    b8b4:	20 e0       	ldi	r18, 0x00	; 0
    b8b6:	30 e0       	ldi	r19, 0x00	; 0
    b8b8:	40 e8       	ldi	r20, 0x80	; 128
    b8ba:	5f e3       	ldi	r21, 0x3F	; 63
    b8bc:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <__subsf3>
    b8c0:	5f c0       	rjmp	.+190    	; 0xb980 <hal_configureUartChannel+0x3ca>

      }/*End if( (f_bselPlus1 - 1.0f) >= BSEL_MAX_RANGE)*/
      else if( (f_bselPlus1 - 1.0f) < (float)BSEL_MAX_RANGE) /* Lower than
    b8c2:	a3 01       	movw	r20, r6
    b8c4:	92 01       	movw	r18, r4
    b8c6:	85 2f       	mov	r24, r21
    b8c8:	94 2f       	mov	r25, r20
    b8ca:	a3 2f       	mov	r26, r19
    b8cc:	b2 2f       	mov	r27, r18
    b8ce:	bc 01       	movw	r22, r24
    b8d0:	cd 01       	movw	r24, r26
    b8d2:	20 e0       	ldi	r18, 0x00	; 0
    b8d4:	30 ef       	ldi	r19, 0xF0	; 240
    b8d6:	4f e7       	ldi	r20, 0x7F	; 127
    b8d8:	55 e4       	ldi	r21, 0x45	; 69
    b8da:	0e 94 ac ae 	call	0x15d58	; 0x15d58 <__cmpsf2>
    b8de:	77 24       	eor	r7, r7
    b8e0:	87 fd       	sbrc	r24, 7
    b8e2:	18 c0       	rjmp	.+48     	; 0xb914 <hal_configureUartChannel+0x35e>
                                      t_uartConfig t_conf)
{
   t_uartChanHndl *pt_uartChanHndl;
   float f_bselPlus1 = 0.0f;
   uint32_t i_baud = 0;
   uint16_t s_bsel = 0;
    b8e4:	aa 24       	eor	r10, r10
    b8e6:	bb 24       	eor	r11, r11
    b8e8:	71 c0       	rjmp	.+226    	; 0xb9cc <hal_configureUartChannel+0x416>
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 < (float)BSEL_MAX_RANGE)
         {
            f_bselPlus1 = f_bselPlus1*2.0f;
    b8ea:	97 01       	movw	r18, r14
    b8ec:	80 2f       	mov	r24, r16
    b8ee:	91 2f       	mov	r25, r17
    b8f0:	a3 2f       	mov	r26, r19
    b8f2:	be 2d       	mov	r27, r14
    b8f4:	bc 01       	movw	r22, r24
    b8f6:	cd 01       	movw	r24, r26
    b8f8:	a7 01       	movw	r20, r14
    b8fa:	25 2f       	mov	r18, r21
    b8fc:	3b 2f       	mov	r19, r27
    b8fe:	a9 01       	movw	r20, r18
    b900:	98 01       	movw	r18, r16
    b902:	0e 94 48 ae 	call	0x15c90	; 0x15c90 <__addsf3>
    b906:	8b 01       	movw	r16, r22
    b908:	f8 2e       	mov	r15, r24
    b90a:	e9 2e       	mov	r14, r25
            c_bscale--;
    b90c:	7a 94       	dec	r7
            if( c_bscale == -7)
    b90e:	e9 ef       	ldi	r30, 0xF9	; 249
    b910:	7e 16       	cp	r7, r30
    b912:	79 f0       	breq	.+30     	; 0xb932 <hal_configureUartChannel+0x37c>
         f_bselPlus1 = f_bselPlus1 - 1.0f;

         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 < (float)BSEL_MAX_RANGE)
    b914:	97 01       	movw	r18, r14
    b916:	80 2f       	mov	r24, r16
    b918:	91 2f       	mov	r25, r17
    b91a:	a3 2f       	mov	r26, r19
    b91c:	be 2d       	mov	r27, r14
    b91e:	bc 01       	movw	r22, r24
    b920:	cd 01       	movw	r24, r26
    b922:	20 e0       	ldi	r18, 0x00	; 0
    b924:	30 ef       	ldi	r19, 0xF0	; 240
    b926:	4f e7       	ldi	r20, 0x7F	; 127
    b928:	55 e4       	ldi	r21, 0x45	; 69
    b92a:	0e 94 ac ae 	call	0x15d58	; 0x15d58 <__cmpsf2>
    b92e:	87 fd       	sbrc	r24, 7
    b930:	dc cf       	rjmp	.-72     	; 0xb8ea <hal_configureUartChannel+0x334>
            c_bscale--;
            if( c_bscale == -7)
               break;
         }

         if( f_bselPlus1 > (float)BSEL_MAX_RANGE)
    b932:	97 01       	movw	r18, r14
    b934:	80 2f       	mov	r24, r16
    b936:	91 2f       	mov	r25, r17
    b938:	a3 2f       	mov	r26, r19
    b93a:	be 2d       	mov	r27, r14
    b93c:	bc 01       	movw	r22, r24
    b93e:	cd 01       	movw	r24, r26
    b940:	20 e0       	ldi	r18, 0x00	; 0
    b942:	30 ef       	ldi	r19, 0xF0	; 240
    b944:	4f e7       	ldi	r20, 0x7F	; 127
    b946:	55 e4       	ldi	r21, 0x45	; 69
    b948:	0e 94 83 b0 	call	0x16106	; 0x16106 <__gesf2>
    b94c:	18 16       	cp	r1, r24
    b94e:	8c f4       	brge	.+34     	; 0xb972 <hal_configureUartChannel+0x3bc>
         {
            /*One step too far*/
            f_bselPlus1 /= 2.0;
    b950:	97 01       	movw	r18, r14
    b952:	80 2f       	mov	r24, r16
    b954:	91 2f       	mov	r25, r17
    b956:	a3 2f       	mov	r26, r19
    b958:	be 2d       	mov	r27, r14
    b95a:	bc 01       	movw	r22, r24
    b95c:	cd 01       	movw	r24, r26
    b95e:	20 e0       	ldi	r18, 0x00	; 0
    b960:	30 e0       	ldi	r19, 0x00	; 0
    b962:	40 e0       	ldi	r20, 0x00	; 0
    b964:	5f e3       	ldi	r21, 0x3F	; 63
    b966:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    b96a:	8b 01       	movw	r16, r22
    b96c:	f8 2e       	mov	r15, r24
    b96e:	e9 2e       	mov	r14, r25
            c_bscale++;
    b970:	73 94       	inc	r7
         }

         s_bsel = (uint16_t)f_bselPlus1;
    b972:	97 01       	movw	r18, r14
    b974:	80 2f       	mov	r24, r16
    b976:	91 2f       	mov	r25, r17
    b978:	a3 2f       	mov	r26, r19
    b97a:	be 2d       	mov	r27, r14
    b97c:	bc 01       	movw	r22, r24
    b97e:	cd 01       	movw	r24, r26
    b980:	0e 94 57 af 	call	0x15eae	; 0x15eae <__fixunssfsi>
    b984:	dc 01       	movw	r26, r24
    b986:	cb 01       	movw	r24, r22
    b988:	5c 01       	movw	r10, r24
      }/*End else if( (f_bselPlus1 - 1.0f) < (float)BSEL_MAX_RANGE)*/

      /*---------------------------------------------------------------------*
       * Calculate the baud rate error
       *---------------------------------------------------------------------*/
      if( c_bscale > 0)
    b98a:	17 14       	cp	r1, r7
    b98c:	fc f4       	brge	.+62     	; 0xb9cc <hal_configureUartChannel+0x416>
      {
          i_baud = hal_getCpuFreq() / ((uint32_t)16*((uint32_t)1 << c_bscale)*
    b98e:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    b992:	6b 01       	movw	r12, r22
    b994:	7c 01       	movw	r14, r24
          ((uint32_t)s_bsel + 1));
    b996:	c5 01       	movw	r24, r10
    b998:	a0 e0       	ldi	r26, 0x00	; 0
    b99a:	b0 e0       	ldi	r27, 0x00	; 0
    b99c:	01 96       	adiw	r24, 0x01	; 1
    b99e:	a1 1d       	adc	r26, r1
    b9a0:	b1 1d       	adc	r27, r1
      /*---------------------------------------------------------------------*
       * Calculate the baud rate error
       *---------------------------------------------------------------------*/
      if( c_bscale > 0)
      {
          i_baud = hal_getCpuFreq() / ((uint32_t)16*((uint32_t)1 << c_bscale)*
    b9a2:	20 e1       	ldi	r18, 0x10	; 16
    b9a4:	30 e0       	ldi	r19, 0x00	; 0
    b9a6:	40 e0       	ldi	r20, 0x00	; 0
    b9a8:	50 e0       	ldi	r21, 0x00	; 0
    b9aa:	07 2c       	mov	r0, r7
    b9ac:	04 c0       	rjmp	.+8      	; 0xb9b6 <hal_configureUartChannel+0x400>
    b9ae:	22 0f       	add	r18, r18
    b9b0:	33 1f       	adc	r19, r19
    b9b2:	44 1f       	adc	r20, r20
    b9b4:	55 1f       	adc	r21, r21
    b9b6:	0a 94       	dec	r0
    b9b8:	d2 f7       	brpl	.-12     	; 0xb9ae <hal_configureUartChannel+0x3f8>
    b9ba:	bc 01       	movw	r22, r24
    b9bc:	cd 01       	movw	r24, r26
    b9be:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
    b9c2:	9b 01       	movw	r18, r22
    b9c4:	ac 01       	movw	r20, r24
    b9c6:	c7 01       	movw	r24, r14
    b9c8:	b6 01       	movw	r22, r12
    b9ca:	24 c0       	rjmp	.+72     	; 0xba14 <hal_configureUartChannel+0x45e>
          ((uint32_t)s_bsel + 1));
      }
      else
      {
          i_baud = ((uint32_t)hal_getCpuFreq()) / ((((uint32_t)16*
    b9cc:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
    b9d0:	ab 01       	movw	r20, r22
    b9d2:	bc 01       	movw	r22, r24
          (uint32_t)s_bsel) / ((uint32_t)1 << -c_bscale)) + 16);
    b9d4:	85 01       	movw	r16, r10
    b9d6:	20 e0       	ldi	r18, 0x00	; 0
    b9d8:	30 e0       	ldi	r19, 0x00	; 0
          i_baud = hal_getCpuFreq() / ((uint32_t)16*((uint32_t)1 << c_bscale)*
          ((uint32_t)s_bsel + 1));
      }
      else
      {
          i_baud = ((uint32_t)hal_getCpuFreq()) / ((((uint32_t)16*
    b9da:	e4 e0       	ldi	r30, 0x04	; 4
    b9dc:	00 0f       	add	r16, r16
    b9de:	11 1f       	adc	r17, r17
    b9e0:	22 1f       	adc	r18, r18
    b9e2:	33 1f       	adc	r19, r19
    b9e4:	ea 95       	dec	r30
    b9e6:	d1 f7       	brne	.-12     	; 0xb9dc <hal_configureUartChannel+0x426>
          (uint32_t)s_bsel) / ((uint32_t)1 << -c_bscale)) + 16);
    b9e8:	87 2d       	mov	r24, r7
    b9ea:	99 27       	eor	r25, r25
    b9ec:	87 fd       	sbrc	r24, 7
    b9ee:	90 95       	com	r25
    b9f0:	90 95       	com	r25
    b9f2:	81 95       	neg	r24
    b9f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b9f6:	04 c0       	rjmp	.+8      	; 0xba00 <hal_configureUartChannel+0x44a>
    b9f8:	36 95       	lsr	r19
    b9fa:	27 95       	ror	r18
    b9fc:	17 95       	ror	r17
    b9fe:	07 95       	ror	r16
    ba00:	8a 95       	dec	r24
    ba02:	d2 f7       	brpl	.-12     	; 0xb9f8 <hal_configureUartChannel+0x442>
    ba04:	00 5f       	subi	r16, 0xF0	; 240
    ba06:	1f 4f       	sbci	r17, 0xFF	; 255
    ba08:	2f 4f       	sbci	r18, 0xFF	; 255
    ba0a:	3f 4f       	sbci	r19, 0xFF	; 255
          i_baud = hal_getCpuFreq() / ((uint32_t)16*((uint32_t)1 << c_bscale)*
          ((uint32_t)s_bsel + 1));
      }
      else
      {
          i_baud = ((uint32_t)hal_getCpuFreq()) / ((((uint32_t)16*
    ba0c:	cb 01       	movw	r24, r22
    ba0e:	ba 01       	movw	r22, r20
    ba10:	a9 01       	movw	r20, r18
    ba12:	98 01       	movw	r18, r16
    ba14:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
          (uint32_t)s_bsel) / ((uint32_t)1 << -c_bscale)) + 16);
      }

      pt_uartChanHndl->f_percentBaudError = (((float)i_baud -
    ba18:	b9 01       	movw	r22, r18
    ba1a:	ca 01       	movw	r24, r20
    ba1c:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    ba20:	2a 89       	ldd	r18, Y+18	; 0x12
    ba22:	3b 89       	ldd	r19, Y+19	; 0x13
    ba24:	4c 89       	ldd	r20, Y+20	; 0x14
    ba26:	5d 89       	ldd	r21, Y+21	; 0x15
    ba28:	0e 94 47 ae 	call	0x15c8e	; 0x15c8e <__subsf3>
      (float)t_conf.i_baudRate) / ((float)t_conf.i_baudRate))*100.0f;
    ba2c:	2a 89       	ldd	r18, Y+18	; 0x12
    ba2e:	3b 89       	ldd	r19, Y+19	; 0x13
    ba30:	4c 89       	ldd	r20, Y+20	; 0x14
    ba32:	5d 89       	ldd	r21, Y+21	; 0x15
    ba34:	0e 94 b0 ae 	call	0x15d60	; 0x15d60 <__divsf3>
    ba38:	20 e0       	ldi	r18, 0x00	; 0
    ba3a:	30 e0       	ldi	r19, 0x00	; 0
    ba3c:	48 ec       	ldi	r20, 0xC8	; 200
    ba3e:	52 e4       	ldi	r21, 0x42	; 66
    ba40:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    ba44:	dc 01       	movw	r26, r24
    ba46:	cb 01       	movw	r24, r22
      {
          i_baud = ((uint32_t)hal_getCpuFreq()) / ((((uint32_t)16*
          (uint32_t)s_bsel) / ((uint32_t)1 << -c_bscale)) + 16);
      }

      pt_uartChanHndl->f_percentBaudError = (((float)i_baud -
    ba48:	f4 01       	movw	r30, r8
    ba4a:	85 83       	std	Z+5, r24	; 0x05
    ba4c:	96 83       	std	Z+6, r25	; 0x06
    ba4e:	a7 83       	std	Z+7, r26	; 0x07
    ba50:	b0 87       	std	Z+8, r27	; 0x08
      (float)t_conf.i_baudRate) / ((float)t_conf.i_baudRate))*100.0f;

      switch( pt_uartChanHndl->t_id)
    ba52:	80 81       	ld	r24, Z
    ba54:	86 31       	cpi	r24, 0x16	; 22
    ba56:	78 f4       	brcc	.+30     	; 0xba76 <hal_configureUartChannel+0x4c0>
    ba58:	90 e0       	ldi	r25, 0x00	; 0
    ba5a:	88 0f       	add	r24, r24
    ba5c:	99 1f       	adc	r25, r25
    ba5e:	fc 01       	movw	r30, r24
    ba60:	e8 58       	subi	r30, 0x88	; 136
    ba62:	fe 4d       	sbci	r31, 0xDE	; 222
    ba64:	00 81       	ld	r16, Z
    ba66:	11 81       	ldd	r17, Z+1	; 0x01
    ba68:	8c 55       	subi	r24, 0x5C	; 92
    ba6a:	9e 4d       	sbci	r25, 0xDE	; 222
    ba6c:	dc 01       	movw	r26, r24
    ba6e:	ed 90       	ld	r14, X+
    ba70:	fc 90       	ld	r15, X
    ba72:	11 97       	sbiw	r26, 0x01	; 1
    ba74:	04 c0       	rjmp	.+8      	; 0xba7e <hal_configureUartChannel+0x4c8>
    ba76:	ee 24       	eor	r14, r14
    ba78:	ff 24       	eor	r15, r15
    ba7a:	00 e0       	ldi	r16, 0x00	; 0
    ba7c:	10 e0       	ldi	r17, 0x00	; 0
      }/*End switch( pt_uartChanHndl->t_id)*/

      /*---------------------------------------------------------------------*
       * Is DMA being used for tx or rx transactions?
       *---------------------------------------------------------------------*/
      if( t_conf.b_enRxDma == true)
    ba7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    ba80:	88 23       	and	r24, r24
    ba82:	a1 f0       	breq	.+40     	; 0xbaac <hal_configureUartChannel+0x4f6>
      {
         pt_uartChanHndl->t_rxDmaHndl = hal_requestDmaChannel();
    ba84:	0e 94 c0 23 	call	0x4780	; 0x4780 <hal_requestDmaChannel>
    ba88:	f4 01       	movw	r30, r8
    ba8a:	83 8f       	std	Z+27, r24	; 0x1b
    ba8c:	94 8f       	std	Z+28, r25	; 0x1c
         if( pt_uartChanHndl->t_rxDmaHndl  < 0)
    ba8e:	83 8d       	ldd	r24, Z+27	; 0x1b
    ba90:	94 8d       	ldd	r25, Z+28	; 0x1c
    ba92:	97 ff       	sbrs	r25, 7
    ba94:	05 c0       	rjmp	.+10     	; 0xbaa0 <hal_configureUartChannel+0x4ea>
         {
            HAL_END_CRITICAL();//Enable interrupts
    ba96:	89 81       	ldd	r24, Y+1	; 0x01
    ba98:	8f bf       	out	0x3f, r24	; 63
            if( pt_uartChanHndl->t_rxDmaHndl == DMA_NO_CHANNELS_OPEN)
    ba9a:	83 8d       	ldd	r24, Z+27	; 0x1b
    ba9c:	94 8d       	ldd	r25, Z+28	; 0x1c
    ba9e:	16 c0       	rjmp	.+44     	; 0xbacc <hal_configureUartChannel+0x516>
            else
               return UART_OUT_OF_HEAP;

         }/*End if( pt_uartChanHndl->t_rxDmaHndl  < 0)*/

         hal_requestDmaInterrupt( pt_uartChanHndl->t_rxDmaHndl,
    baa0:	83 8d       	ldd	r24, Z+27	; 0x1b
    baa2:	94 8d       	ldd	r25, Z+28	; 0x1c
    baa4:	60 e0       	ldi	r22, 0x00	; 0
    baa6:	a8 01       	movw	r20, r16
    baa8:	0e 94 40 23 	call	0x4680	; 0x4680 <hal_requestDmaInterrupt>
                                  DMA_TRANSFER_COMPLETE,
                                  pf_rxDmaCallback);

      }/*End if( t_conf.b_enRxDma == true)*/

      if( t_conf.b_enTxDma == true)
    baac:	8c 85       	ldd	r24, Y+12	; 0x0c
    baae:	88 23       	and	r24, r24
    bab0:	d1 f0       	breq	.+52     	; 0xbae6 <hal_configureUartChannel+0x530>
      {
         pt_uartChanHndl->t_txDmaHndl = hal_requestDmaChannel();
    bab2:	0e 94 c0 23 	call	0x4780	; 0x4780 <hal_requestDmaChannel>
    bab6:	f4 01       	movw	r30, r8
    bab8:	81 8f       	std	Z+25, r24	; 0x19
    baba:	92 8f       	std	Z+26, r25	; 0x1a
         if( pt_uartChanHndl->t_txDmaHndl  < 0)
    babc:	81 8d       	ldd	r24, Z+25	; 0x19
    babe:	92 8d       	ldd	r25, Z+26	; 0x1a
    bac0:	97 ff       	sbrs	r25, 7
    bac2:	0b c0       	rjmp	.+22     	; 0xbada <hal_configureUartChannel+0x524>
         {

            HAL_END_CRITICAL();//Enable interrupts
    bac4:	89 81       	ldd	r24, Y+1	; 0x01
    bac6:	8f bf       	out	0x3f, r24	; 63
            if( pt_uartChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
    bac8:	81 8d       	ldd	r24, Z+25	; 0x19
    baca:	92 8d       	ldd	r25, Z+26	; 0x1a
    bacc:	ff ef       	ldi	r31, 0xFF	; 255
    bace:	89 3f       	cpi	r24, 0xF9	; 249
    bad0:	9f 07       	cpc	r25, r31
    bad2:	09 f0       	breq	.+2      	; 0xbad6 <hal_configureUartChannel+0x520>
    bad4:	64 c0       	rjmp	.+200    	; 0xbb9e <hal_configureUartChannel+0x5e8>
               return UART_NO_DMA;
    bad6:	8a ef       	ldi	r24, 0xFA	; 250
    bad8:	63 c0       	rjmp	.+198    	; 0xbba0 <hal_configureUartChannel+0x5ea>
            else
               return UART_OUT_OF_HEAP;

         }/*End if( pt_spiChanHndl->t_txDmaHndl  < 0)*/

         hal_requestDmaInterrupt( pt_uartChanHndl->t_txDmaHndl,
    bada:	81 8d       	ldd	r24, Z+25	; 0x19
    badc:	92 8d       	ldd	r25, Z+26	; 0x1a
    bade:	60 e0       	ldi	r22, 0x00	; 0
    bae0:	a7 01       	movw	r20, r14
    bae2:	0e 94 40 23 	call	0x4680	; 0x4680 <hal_requestDmaInterrupt>
      }/*End if( t_conf.b_enTxDma == true)*/

      /*---------------------------------------------------------------------*
       * Keep track of the current baud rate for this particular UART.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->i_baudRate = t_conf.i_baudRate;
    bae6:	2e 89       	ldd	r18, Y+22	; 0x16
    bae8:	3f 89       	ldd	r19, Y+23	; 0x17
    baea:	48 8d       	ldd	r20, Y+24	; 0x18
    baec:	59 8d       	ldd	r21, Y+25	; 0x19
    baee:	d4 01       	movw	r26, r8
    baf0:	11 96       	adiw	r26, 0x01	; 1
    baf2:	2d 93       	st	X+, r18
    baf4:	3d 93       	st	X+, r19
    baf6:	4d 93       	st	X+, r20
    baf8:	5c 93       	st	X, r21
    bafa:	14 97       	sbiw	r26, 0x04	; 4

      /*---------------------------------------------------------------------*
       * Configure the baud rate generator registers
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->BAUDCTRLA = (uint8_t)s_bsel;
    bafc:	19 96       	adiw	r26, 0x09	; 9
    bafe:	ed 91       	ld	r30, X+
    bb00:	fc 91       	ld	r31, X
    bb02:	1a 97       	sbiw	r26, 0x0a	; 10
    bb04:	a6 82       	std	Z+6, r10	; 0x06
      pt_uartChanHndl->pt_uart->BAUDCTRLB = (c_bscale << USART_BSCALE0_bp) |
    bb06:	19 96       	adiw	r26, 0x09	; 9
    bb08:	ed 91       	ld	r30, X+
    bb0a:	fc 91       	ld	r31, X
    bb0c:	1a 97       	sbiw	r26, 0x0a	; 10
    bb0e:	72 94       	swap	r7
    bb10:	80 ef       	ldi	r24, 0xF0	; 240
    bb12:	78 22       	and	r7, r24
    bb14:	7b 28       	or	r7, r11
    bb16:	77 82       	std	Z+7, r7	; 0x07
      (s_bsel >> 8);

      /*---------------------------------------------------------------------*
       * Enable RX and TX UARTS.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLB |= USART_RXEN_bm;
    bb18:	19 96       	adiw	r26, 0x09	; 9
    bb1a:	ed 91       	ld	r30, X+
    bb1c:	fc 91       	ld	r31, X
    bb1e:	1a 97       	sbiw	r26, 0x0a	; 10
    bb20:	84 81       	ldd	r24, Z+4	; 0x04
    bb22:	80 61       	ori	r24, 0x10	; 16
    bb24:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLB |= USART_TXEN_bm;
    bb26:	19 96       	adiw	r26, 0x09	; 9
    bb28:	ed 91       	ld	r30, X+
    bb2a:	fc 91       	ld	r31, X
    bb2c:	1a 97       	sbiw	r26, 0x0a	; 10
    bb2e:	84 81       	ldd	r24, Z+4	; 0x04
    bb30:	88 60       	ori	r24, 0x08	; 8
    bb32:	84 83       	std	Z+4, r24	; 0x04

      /*---------------------------------------------------------------------*
       * No transactions in progress.
       *---------------------------------------------------------------------*/
		pt_uartChanHndl->b_txBusLocked = false;
    bb34:	1b 96       	adiw	r26, 0x0b	; 11
    bb36:	1c 92       	st	X, r1
    bb38:	1b 97       	sbiw	r26, 0x0b	; 11
      pt_uartChanHndl->b_rxBusLocked = false;
    bb3a:	1c 96       	adiw	r26, 0x0c	; 12
    bb3c:	1c 92       	st	X, r1
    bb3e:	1c 97       	sbiw	r26, 0x0c	; 12

      /*---------------------------------------------------------------------*
       * Buffers are only used during block transfers.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pc_rxData = NULL;
    bb40:	1f 96       	adiw	r26, 0x0f	; 15
    bb42:	1d 92       	st	X+, r1
    bb44:	1c 92       	st	X, r1
    bb46:	50 97       	sbiw	r26, 0x10	; 16
      pt_uartChanHndl->pc_txData = NULL;
    bb48:	1d 96       	adiw	r26, 0x0d	; 13
    bb4a:	1d 92       	st	X+, r1
    bb4c:	1c 92       	st	X, r1
    bb4e:	1e 97       	sbiw	r26, 0x0e	; 14
      pt_uartChanHndl->s_rxBufIndex = 0;
    bb50:	57 96       	adiw	r26, 0x17	; 23
    bb52:	1d 92       	st	X+, r1
    bb54:	1c 92       	st	X, r1
    bb56:	58 97       	sbiw	r26, 0x18	; 24
      pt_uartChanHndl->s_rxBufLength = 0;
    bb58:	53 96       	adiw	r26, 0x13	; 19
    bb5a:	1d 92       	st	X+, r1
    bb5c:	1c 92       	st	X, r1
    bb5e:	54 97       	sbiw	r26, 0x14	; 20
      pt_uartChanHndl->s_txBufIndex = 0;
    bb60:	55 96       	adiw	r26, 0x15	; 21
    bb62:	1d 92       	st	X+, r1
    bb64:	1c 92       	st	X, r1
    bb66:	56 97       	sbiw	r26, 0x16	; 22
      pt_uartChanHndl->s_txBufLength = 0;
    bb68:	51 96       	adiw	r26, 0x11	; 17
    bb6a:	1d 92       	st	X+, r1
    bb6c:	1c 92       	st	X, r1
    bb6e:	52 97       	sbiw	r26, 0x12	; 18

      /*---------------------------------------------------------------------*
       * Map the RX complete interrupt callback function.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pf_rxCallBack = t_conf.pf_rxCallBack;
    bb70:	8e 85       	ldd	r24, Y+14	; 0x0e
    bb72:	9f 85       	ldd	r25, Y+15	; 0x0f
    bb74:	5d 96       	adiw	r26, 0x1d	; 29
    bb76:	8d 93       	st	X+, r24
    bb78:	9c 93       	st	X, r25
    bb7a:	5e 97       	sbiw	r26, 0x1e	; 30
      pt_uartChanHndl->pf_txCallBack = t_conf.pf_txCallBack;
    bb7c:	88 89       	ldd	r24, Y+16	; 0x10
    bb7e:	99 89       	ldd	r25, Y+17	; 0x11
    bb80:	5f 96       	adiw	r26, 0x1f	; 31
    bb82:	8d 93       	st	X+, r24
    bb84:	9c 93       	st	X, r25
    bb86:	90 97       	sbiw	r26, 0x20	; 32

      /*---------------------------------------------------------------------*
       * Enable RX complete interrupt.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    bb88:	19 96       	adiw	r26, 0x09	; 9
    bb8a:	ed 91       	ld	r30, X+
    bb8c:	fc 91       	ld	r31, X
    bb8e:	1a 97       	sbiw	r26, 0x0a	; 10
    bb90:	83 81       	ldd	r24, Z+3	; 0x03
    bb92:	80 63       	ori	r24, 0x30	; 48
    bb94:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    bb96:	89 81       	ldd	r24, Y+1	; 0x01
    bb98:	8f bf       	out	0x3f, r24	; 63

   return UART_PASSED;
    bb9a:	80 e0       	ldi	r24, 0x00	; 0
    bb9c:	01 c0       	rjmp	.+2      	; 0xbba0 <hal_configureUartChannel+0x5ea>

            HAL_END_CRITICAL();//Enable interrupts
            if( pt_uartChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
               return UART_NO_DMA;
            else
               return UART_OUT_OF_HEAP;
    bb9e:	8f ef       	ldi	r24, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return UART_PASSED;

}/*End hal_configureUartChannel*/
    bba0:	69 96       	adiw	r28, 0x19	; 25
    bba2:	cd bf       	out	0x3d, r28	; 61
    bba4:	de bf       	out	0x3e, r29	; 62
    bba6:	df 91       	pop	r29
    bba8:	cf 91       	pop	r28
    bbaa:	1f 91       	pop	r17
    bbac:	0f 91       	pop	r16
    bbae:	ff 90       	pop	r15
    bbb0:	ef 90       	pop	r14
    bbb2:	df 90       	pop	r13
    bbb4:	cf 90       	pop	r12
    bbb6:	bf 90       	pop	r11
    bbb8:	af 90       	pop	r10
    bbba:	9f 90       	pop	r9
    bbbc:	8f 90       	pop	r8
    bbbe:	7f 90       	pop	r7
    bbc0:	6f 90       	pop	r6
    bbc2:	5f 90       	pop	r5
    bbc4:	4f 90       	pop	r4
    bbc6:	08 95       	ret

0000bbc8 <hal_requestWdAccess>:
 
/*---------------------------------------------------------------------------*
 * Request access to the watchdog timer.
 *---------------------------------------------------------------------------*/
t_WDHNDL hal_requestWdAccess( void)
{
    bbc8:	cf 93       	push	r28
    bbca:	df 93       	push	r29
    bbcc:	00 d0       	rcall	.+0      	; 0xbbce <hal_requestWdAccess+0x6>
    bbce:	cd b7       	in	r28, 0x3d	; 61
    bbd0:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    bbd2:	8f b7       	in	r24, 0x3f	; 63
    bbd4:	89 83       	std	Y+1, r24	; 0x01
    bbd6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is the watchdog available?
    *------------------------------------------------------------------------*/
   if( UTL_GET_NUM_LINKS_CONT( gt_wdAccessList) == 0)
    bbd8:	e0 91 d0 21 	lds	r30, 0x21D0
    bbdc:	f0 91 d1 21 	lds	r31, 0x21D1
    bbe0:	82 81       	ldd	r24, Z+2	; 0x02
    bbe2:	93 81       	ldd	r25, Z+3	; 0x03
    bbe4:	00 97       	sbiw	r24, 0x00	; 0
    bbe6:	11 f5       	brne	.+68     	; 0xbc2c <hal_requestWdAccess+0x64>
      
      /*---------------------------------------------------------------------*
       * Allocated memory for the link where the DMA channel information will 
       * be stored.
       *---------------------------------------------------------------------*/
      t_linkHndl = utl_createLink( sizeof(t_wdObject));
    bbe8:	85 e0       	ldi	r24, 0x05	; 5
    bbea:	90 e0       	ldi	r25, 0x00	; 0
    bbec:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
    bbf0:	8a 83       	std	Y+2, r24	; 0x02
    bbf2:	9b 83       	std	Y+3, r25	; 0x03

      if( t_linkHndl < 0)
    bbf4:	8a 81       	ldd	r24, Y+2	; 0x02
    bbf6:	9b 81       	ldd	r25, Y+3	; 0x03
    bbf8:	97 fd       	sbrc	r25, 7
    bbfa:	1d c0       	rjmp	.+58     	; 0xbc36 <hal_requestWdAccess+0x6e>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the WD 
       * timer information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    bbfc:	ea 81       	ldd	r30, Y+2	; 0x02
    bbfe:	fb 81       	ldd	r31, Y+3	; 0x03
    bc00:	01 90       	ld	r0, Z+
    bc02:	f0 81       	ld	r31, Z
    bc04:	e0 2d       	mov	r30, r0
      pt_element->b_validConfig = false;
    bc06:	10 82       	st	Z, r1
      pt_element->i_period = 0;
    bc08:	11 82       	std	Z+1, r1	; 0x01
    bc0a:	12 82       	std	Z+2, r1	; 0x02
    bc0c:	13 82       	std	Z+3, r1	; 0x03
    bc0e:	14 82       	std	Z+4, r1	; 0x04

      /*---------------------------------------------------------------------*
       * Add the DMA channel link onto the list open channels.
       *---------------------------------------------------------------------*/
      t_err = utl_insertLink( gt_wdAccessList,
    bc10:	80 91 d0 21 	lds	r24, 0x21D0
    bc14:	90 91 d1 21 	lds	r25, 0x21D1
    bc18:	6a 81       	ldd	r22, Y+2	; 0x02
    bc1a:	7b 81       	ldd	r23, Y+3	; 0x03
    bc1c:	41 e0       	ldi	r20, 0x01	; 1
    bc1e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_WDHNDL)WD_UNAVAILABLE;	
   }
    
   HAL_END_CRITICAL();//Enable interrupts
    bc22:	89 81       	ldd	r24, Y+1	; 0x01
    bc24:	8f bf       	out	0x3f, r24	; 63
   
   return (t_WDHNDL)t_linkHndl;
    bc26:	8a 81       	ldd	r24, Y+2	; 0x02
    bc28:	9b 81       	ldd	r25, Y+3	; 0x03
    bc2a:	07 c0       	rjmp	.+14     	; 0xbc3a <hal_requestWdAccess+0x72>
                              t_linkHndl,
                              true);	
   }
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
    bc2c:	89 81       	ldd	r24, Y+1	; 0x01
    bc2e:	8f bf       	out	0x3f, r24	; 63
      return (t_WDHNDL)WD_UNAVAILABLE;	
    bc30:	8d ef       	ldi	r24, 0xFD	; 253
    bc32:	9f ef       	ldi	r25, 0xFF	; 255
    bc34:	02 c0       	rjmp	.+4      	; 0xbc3a <hal_requestWdAccess+0x72>
       *---------------------------------------------------------------------*/
      t_linkHndl = utl_createLink( sizeof(t_wdObject));

      if( t_linkHndl < 0)
      {
         return (t_LINKHNDL)WD_OUT_OF_HEAP;
    bc36:	8f ef       	ldi	r24, 0xFF	; 255
    bc38:	9f ef       	ldi	r25, 0xFF	; 255
    
   HAL_END_CRITICAL();//Enable interrupts
   
   return (t_WDHNDL)t_linkHndl;

}/*End hal_requestWdAccess*/
    bc3a:	23 96       	adiw	r28, 0x03	; 3
    bc3c:	cd bf       	out	0x3d, r28	; 61
    bc3e:	de bf       	out	0x3e, r29	; 62
    bc40:	df 91       	pop	r29
    bc42:	cf 91       	pop	r28
    bc44:	08 95       	ret

0000bc46 <hal_configureWd>:
 * Configures the DMA transaction for the channel pointed to by
 * 't_handle'.
 *---------------------------------------------------------------------------*/
t_wdError hal_configureWd( t_WDHNDL t_handle,
                           t_wdConfig t_conf)
{
    bc46:	cf 93       	push	r28
    bc48:	df 93       	push	r29
    bc4a:	00 d0       	rcall	.+0      	; 0xbc4c <hal_configureWd+0x6>
    bc4c:	cd b7       	in	r28, 0x3d	; 61
    bc4e:	de b7       	in	r29, 0x3e	; 62
    bc50:	8a 83       	std	Y+2, r24	; 0x02
    bc52:	9b 83       	std	Y+3, r25	; 0x03
      
   }

   HAL_END_CRITICAL();//Enable interrupts

   return WD_PASSED;
    bc54:	ca 01       	movw	r24, r20
    bc56:	db 01       	movw	r26, r22

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    bc58:	2f b7       	in	r18, 0x3f	; 63
    bc5a:	29 83       	std	Y+1, r18	; 0x01
    bc5c:	f8 94       	cli

   if( t_conf.i_period <= 8) /*msec*/
    bc5e:	89 30       	cpi	r24, 0x09	; 9
    bc60:	91 05       	cpc	r25, r1
    bc62:	a1 05       	cpc	r26, r1
    bc64:	b1 05       	cpc	r27, r1
    bc66:	08 f4       	brcc	.+2      	; 0xbc6a <hal_configureWd+0x24>
    bc68:	47 c0       	rjmp	.+142    	; 0xbcf8 <hal_configureWd+0xb2>
    {
       t_per = WDT_PER_8CLK_gc;
    }
    else if( t_conf.i_period <= 16) /*msec*/
    bc6a:	81 31       	cpi	r24, 0x11	; 17
    bc6c:	91 05       	cpc	r25, r1
    bc6e:	a1 05       	cpc	r26, r1
    bc70:	b1 05       	cpc	r27, r1
    bc72:	08 f4       	brcc	.+2      	; 0xbc76 <hal_configureWd+0x30>
    bc74:	43 c0       	rjmp	.+134    	; 0xbcfc <hal_configureWd+0xb6>
    {
       t_per = WDT_PER_16CLK_gc;
    }
    else if( t_conf.i_period <= 32) /*msec*/
    bc76:	81 32       	cpi	r24, 0x21	; 33
    bc78:	91 05       	cpc	r25, r1
    bc7a:	a1 05       	cpc	r26, r1
    bc7c:	b1 05       	cpc	r27, r1
    bc7e:	08 f4       	brcc	.+2      	; 0xbc82 <hal_configureWd+0x3c>
    bc80:	3f c0       	rjmp	.+126    	; 0xbd00 <hal_configureWd+0xba>
    {
       t_per = WDT_PER_32CLK_gc;
    }
    else if( t_conf.i_period <= 64) /*msec*/
    bc82:	81 34       	cpi	r24, 0x41	; 65
    bc84:	91 05       	cpc	r25, r1
    bc86:	a1 05       	cpc	r26, r1
    bc88:	b1 05       	cpc	r27, r1
    bc8a:	e0 f1       	brcs	.+120    	; 0xbd04 <hal_configureWd+0xbe>
    {
       t_per = WDT_PER_64CLK_gc;
    }
    else if( t_conf.i_period <= 125) /*msec*/
    bc8c:	8e 37       	cpi	r24, 0x7E	; 126
    bc8e:	91 05       	cpc	r25, r1
    bc90:	a1 05       	cpc	r26, r1
    bc92:	b1 05       	cpc	r27, r1
    bc94:	c8 f1       	brcs	.+114    	; 0xbd08 <hal_configureWd+0xc2>
    {
       t_per = WDT_PER_128CLK_gc;
    }
    else if( t_conf.i_period <= 250) /*msec*/
    bc96:	8b 3f       	cpi	r24, 0xFB	; 251
    bc98:	91 05       	cpc	r25, r1
    bc9a:	a1 05       	cpc	r26, r1
    bc9c:	b1 05       	cpc	r27, r1
    bc9e:	b0 f1       	brcs	.+108    	; 0xbd0c <hal_configureWd+0xc6>
    {
       t_per = WDT_PER_256CLK_gc;
    }
    else if( t_conf.i_period <= 500) /*msec*/
    bca0:	85 3f       	cpi	r24, 0xF5	; 245
    bca2:	21 e0       	ldi	r18, 0x01	; 1
    bca4:	92 07       	cpc	r25, r18
    bca6:	20 e0       	ldi	r18, 0x00	; 0
    bca8:	a2 07       	cpc	r26, r18
    bcaa:	20 e0       	ldi	r18, 0x00	; 0
    bcac:	b2 07       	cpc	r27, r18
    bcae:	80 f1       	brcs	.+96     	; 0xbd10 <hal_configureWd+0xca>
    {
       t_per = WDT_PER_512CLK_gc;
    }
    else if( t_conf.i_period <= 1000) /*msec*/
    bcb0:	89 3e       	cpi	r24, 0xE9	; 233
    bcb2:	23 e0       	ldi	r18, 0x03	; 3
    bcb4:	92 07       	cpc	r25, r18
    bcb6:	20 e0       	ldi	r18, 0x00	; 0
    bcb8:	a2 07       	cpc	r26, r18
    bcba:	20 e0       	ldi	r18, 0x00	; 0
    bcbc:	b2 07       	cpc	r27, r18
    bcbe:	50 f1       	brcs	.+84     	; 0xbd14 <hal_configureWd+0xce>
    {
       t_per = WDT_PER_1KCLK_gc;
    }
    else if( t_conf.i_period <= 2000) /*msec*/
    bcc0:	81 3d       	cpi	r24, 0xD1	; 209
    bcc2:	27 e0       	ldi	r18, 0x07	; 7
    bcc4:	92 07       	cpc	r25, r18
    bcc6:	20 e0       	ldi	r18, 0x00	; 0
    bcc8:	a2 07       	cpc	r26, r18
    bcca:	20 e0       	ldi	r18, 0x00	; 0
    bccc:	b2 07       	cpc	r27, r18
    bcce:	20 f1       	brcs	.+72     	; 0xbd18 <hal_configureWd+0xd2>
    {
       t_per = WDT_PER_2KCLK_gc;
    }
    else if( t_conf.i_period <= 4000) /*msec*/
    bcd0:	81 3a       	cpi	r24, 0xA1	; 161
    bcd2:	2f e0       	ldi	r18, 0x0F	; 15
    bcd4:	92 07       	cpc	r25, r18
    bcd6:	20 e0       	ldi	r18, 0x00	; 0
    bcd8:	a2 07       	cpc	r26, r18
    bcda:	20 e0       	ldi	r18, 0x00	; 0
    bcdc:	b2 07       	cpc	r27, r18
    bcde:	f0 f0       	brcs	.+60     	; 0xbd1c <hal_configureWd+0xd6>
    {
       t_per = WDT_PER_4KCLK_gc;
    }
    else if( t_conf.i_period <= 8000) /*msec*/
    bce0:	81 34       	cpi	r24, 0x41	; 65
    bce2:	2f e1       	ldi	r18, 0x1F	; 31
    bce4:	92 07       	cpc	r25, r18
    bce6:	20 e0       	ldi	r18, 0x00	; 0
    bce8:	a2 07       	cpc	r26, r18
    bcea:	20 e0       	ldi	r18, 0x00	; 0
    bcec:	b2 07       	cpc	r27, r18
    bcee:	c0 f0       	brcs	.+48     	; 0xbd20 <hal_configureWd+0xda>
    {
       t_per = WDT_PER_8KCLK_gc;
    }
    else
    {
      HAL_END_CRITICAL();//Enable interrupts
    bcf0:	89 81       	ldd	r24, Y+1	; 0x01
    bcf2:	8f bf       	out	0x3f, r24	; 63
      return WD_INVALID_PERIOD;	
    bcf4:	8c ef       	ldi	r24, 0xFC	; 252
    bcf6:	3e c0       	rjmp	.+124    	; 0xbd74 <hal_configureWd+0x12e>
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts

   if( t_conf.i_period <= 8) /*msec*/
    {
       t_per = WDT_PER_8CLK_gc;
    bcf8:	60 e0       	ldi	r22, 0x00	; 0
    bcfa:	13 c0       	rjmp	.+38     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 16) /*msec*/
    {
       t_per = WDT_PER_16CLK_gc;
    bcfc:	64 e0       	ldi	r22, 0x04	; 4
    bcfe:	11 c0       	rjmp	.+34     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 32) /*msec*/
    {
       t_per = WDT_PER_32CLK_gc;
    bd00:	68 e0       	ldi	r22, 0x08	; 8
    bd02:	0f c0       	rjmp	.+30     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 64) /*msec*/
    {
       t_per = WDT_PER_64CLK_gc;
    bd04:	6c e0       	ldi	r22, 0x0C	; 12
    bd06:	0d c0       	rjmp	.+26     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 125) /*msec*/
    {
       t_per = WDT_PER_128CLK_gc;
    bd08:	60 e1       	ldi	r22, 0x10	; 16
    bd0a:	0b c0       	rjmp	.+22     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 250) /*msec*/
    {
       t_per = WDT_PER_256CLK_gc;
    bd0c:	64 e1       	ldi	r22, 0x14	; 20
    bd0e:	09 c0       	rjmp	.+18     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 500) /*msec*/
    {
       t_per = WDT_PER_512CLK_gc;
    bd10:	68 e1       	ldi	r22, 0x18	; 24
    bd12:	07 c0       	rjmp	.+14     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 1000) /*msec*/
    {
       t_per = WDT_PER_1KCLK_gc;
    bd14:	6c e1       	ldi	r22, 0x1C	; 28
    bd16:	05 c0       	rjmp	.+10     	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 2000) /*msec*/
    {
       t_per = WDT_PER_2KCLK_gc;
    bd18:	60 e2       	ldi	r22, 0x20	; 32
    bd1a:	03 c0       	rjmp	.+6      	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 4000) /*msec*/
    {
       t_per = WDT_PER_4KCLK_gc;
    bd1c:	64 e2       	ldi	r22, 0x24	; 36
    bd1e:	01 c0       	rjmp	.+2      	; 0xbd22 <hal_configureWd+0xdc>
    }
    else if( t_conf.i_period <= 8000) /*msec*/
    {
       t_per = WDT_PER_8KCLK_gc;
    bd20:	68 e2       	ldi	r22, 0x28	; 40
    }
    
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a watchdog timer?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_wdAccessList) == false)
    bd22:	ea 81       	ldd	r30, Y+2	; 0x02
    bd24:	fb 81       	ldd	r31, Y+3	; 0x03
    bd26:	40 91 d0 21 	lds	r20, 0x21D0
    bd2a:	50 91 d1 21 	lds	r21, 0x21D1
    bd2e:	24 81       	ldd	r18, Z+4	; 0x04
    bd30:	35 81       	ldd	r19, Z+5	; 0x05
    bd32:	24 17       	cp	r18, r20
    bd34:	35 07       	cpc	r19, r21
    bd36:	21 f0       	breq	.+8      	; 0xbd40 <hal_configureWd+0xfa>
   {
      HAL_END_CRITICAL();//Enable interrupts
    bd38:	89 81       	ldd	r24, Y+1	; 0x01
    bd3a:	8f bf       	out	0x3f, r24	; 63
      return WD_INVALID_HANDLE;
    bd3c:	8e ef       	ldi	r24, 0xFE	; 254
    bd3e:	1a c0       	rjmp	.+52     	; 0xbd74 <hal_configureWd+0x12e>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    bd40:	ea 81       	ldd	r30, Y+2	; 0x02
    bd42:	fb 81       	ldd	r31, Y+3	; 0x03
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)
    bd44:	01 90       	ld	r0, Z+
    bd46:	f0 81       	ld	r31, Z
    bd48:	e0 2d       	mov	r30, r0

      /*---------------------------------------------------------------------*
       * Reset the watchdog
       *---------------------------------------------------------------------*/
      c_temp = 0;
      CCP = CCP_IOREG_gc;
    bd4a:	28 ed       	ldi	r18, 0xD8	; 216
    bd4c:	24 bf       	out	0x34, r18	; 52
      WDT.CTRL = c_temp;
    bd4e:	10 92 80 00 	sts	0x0080, r1

      /*---------------------------------------------------------------------*
       * Configure the period
       *---------------------------------------------------------------------*/
      c_temp = (uint8_t)(WDT_ENABLE_bm | WDT_CEN_bm | t_per);
    bd52:	63 60       	ori	r22, 0x03	; 3
      CCP = CCP_IOREG_gc;
    bd54:	24 bf       	out	0x34, r18	; 52
      WDT.CTRL = c_temp;
    bd56:	60 93 80 00 	sts	0x0080, r22
 
      pt_element->i_period      = t_conf.i_period;
    bd5a:	81 83       	std	Z+1, r24	; 0x01
    bd5c:	92 83       	std	Z+2, r25	; 0x02
    bd5e:	a3 83       	std	Z+3, r26	; 0x03
    bd60:	b4 83       	std	Z+4, r27	; 0x04
      pt_element->b_validConfig = true;
    bd62:	81 e0       	ldi	r24, 0x01	; 1
    bd64:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Wait for WD to synchronize with new settings.
       *---------------------------------------------------------------------*/
      while(HAL_WD_IS_SYNC_BUSY())
    bd66:	80 91 82 00 	lds	r24, 0x0082
    bd6a:	80 fd       	sbrc	r24, 0
    bd6c:	fc cf       	rjmp	.-8      	; 0xbd66 <hal_configureWd+0x120>

      }
      
   }

   HAL_END_CRITICAL();//Enable interrupts
    bd6e:	89 81       	ldd	r24, Y+1	; 0x01
    bd70:	8f bf       	out	0x3f, r24	; 63

   return WD_PASSED;
    bd72:	80 e0       	ldi	r24, 0x00	; 0

}
    bd74:	23 96       	adiw	r28, 0x03	; 3
    bd76:	cd bf       	out	0x3d, r28	; 61
    bd78:	de bf       	out	0x3e, r29	; 62
    bd7a:	df 91       	pop	r29
    bd7c:	cf 91       	pop	r28
    bd7e:	08 95       	ret

0000bd80 <hal_wdEnable>:
   return WD_PASSED;
    
}/*End hal_wdDisable*/

t_wdError hal_wdEnable( t_WDHNDL t_handle)
{
    bd80:	cf 93       	push	r28
    bd82:	df 93       	push	r29
    bd84:	00 d0       	rcall	.+0      	; 0xbd86 <hal_wdEnable+0x6>
    bd86:	cd b7       	in	r28, 0x3d	; 61
    bd88:	de b7       	in	r29, 0x3e	; 62
    bd8a:	8a 83       	std	Y+2, r24	; 0x02
    bd8c:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    bd8e:	8f b7       	in	r24, 0x3f	; 63
    bd90:	89 83       	std	Y+1, r24	; 0x01
    bd92:	f8 94       	cli
    
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a watchdog timer?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_wdAccessList) == false)
    bd94:	ea 81       	ldd	r30, Y+2	; 0x02
    bd96:	fb 81       	ldd	r31, Y+3	; 0x03
    bd98:	80 91 d0 21 	lds	r24, 0x21D0
    bd9c:	90 91 d1 21 	lds	r25, 0x21D1
    bda0:	24 81       	ldd	r18, Z+4	; 0x04
    bda2:	35 81       	ldd	r19, Z+5	; 0x05
    bda4:	28 17       	cp	r18, r24
    bda6:	39 07       	cpc	r19, r25
    bda8:	21 f0       	breq	.+8      	; 0xbdb2 <hal_wdEnable+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    bdaa:	89 81       	ldd	r24, Y+1	; 0x01
    bdac:	8f bf       	out	0x3f, r24	; 63
      return WD_INVALID_HANDLE;
    bdae:	8e ef       	ldi	r24, 0xFE	; 254
    bdb0:	1a c0       	rjmp	.+52     	; 0xbde6 <hal_wdEnable+0x66>
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
    bdb2:	ea 81       	ldd	r30, Y+2	; 0x02
    bdb4:	fb 81       	ldd	r31, Y+3	; 0x03

      if( pt_element->b_validConfig == false)
    bdb6:	01 90       	ld	r0, Z+
    bdb8:	f0 81       	ld	r31, Z
    bdba:	e0 2d       	mov	r30, r0
    bdbc:	80 81       	ld	r24, Z
    bdbe:	88 23       	and	r24, r24
    bdc0:	21 f4       	brne	.+8      	; 0xbdca <hal_wdEnable+0x4a>
      {
         HAL_END_CRITICAL();//Enable interrupts
    bdc2:	89 81       	ldd	r24, Y+1	; 0x01
    bdc4:	8f bf       	out	0x3f, r24	; 63
         return WD_NO_CONFIG;
    bdc6:	8b ef       	ldi	r24, 0xFB	; 251
    bdc8:	0e c0       	rjmp	.+28     	; 0xbde6 <hal_wdEnable+0x66>

      /*---------------------------------------------------------------------*
       * Enable the watchdog
       *---------------------------------------------------------------------*/
      c_temp = (WDT_ENABLE_bm | WDT_CEN_bm);
      CCP = CCP_IOREG_gc;
    bdca:	88 ed       	ldi	r24, 0xD8	; 216
    bdcc:	84 bf       	out	0x34, r24	; 52
      WDT.CTRL |= c_temp;
    bdce:	80 91 80 00 	lds	r24, 0x0080
    bdd2:	83 60       	ori	r24, 0x03	; 3
    bdd4:	80 93 80 00 	sts	0x0080, r24
        
      /*---------------------------------------------------------------------*
       * Wait for WD to synchronize with new settings.
       *---------------------------------------------------------------------*/
      while(HAL_WD_IS_SYNC_BUSY())
    bdd8:	80 91 82 00 	lds	r24, 0x0082
    bddc:	80 fd       	sbrc	r24, 0
    bdde:	fc cf       	rjmp	.-8      	; 0xbdd8 <hal_wdEnable+0x58>
      {

      }		
   }
    
   HAL_END_CRITICAL();//Enable interrupts
    bde0:	89 81       	ldd	r24, Y+1	; 0x01
    bde2:	8f bf       	out	0x3f, r24	; 63

   return WD_PASSED;
    bde4:	80 e0       	ldi	r24, 0x00	; 0
    
}/*End hal_wdEnable*/
    bde6:	23 96       	adiw	r28, 0x03	; 3
    bde8:	cd bf       	out	0x3d, r28	; 61
    bdea:	de bf       	out	0x3e, r29	; 62
    bdec:	df 91       	pop	r29
    bdee:	cf 91       	pop	r28
    bdf0:	08 95       	ret

0000bdf2 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    bdf2:	08 95       	ret

0000bdf4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    bdf4:	cf 92       	push	r12
    bdf6:	df 92       	push	r13
    bdf8:	ef 92       	push	r14
    bdfa:	ff 92       	push	r15
    bdfc:	0f 93       	push	r16
    bdfe:	1f 93       	push	r17
    be00:	cf 93       	push	r28
    be02:	df 93       	push	r29
    be04:	6c 01       	movw	r12, r24
    be06:	7b 01       	movw	r14, r22
    be08:	ea 01       	movw	r28, r20
  size_t n = 0;
    be0a:	00 e0       	ldi	r16, 0x00	; 0
    be0c:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    be0e:	0e c0       	rjmp	.+28     	; 0xbe2c <_ZN5Print5writeEPKhj+0x38>
    n += write(*buffer++);
    be10:	d7 01       	movw	r26, r14
    be12:	6d 91       	ld	r22, X+
    be14:	7d 01       	movw	r14, r26
    be16:	d6 01       	movw	r26, r12
    be18:	ed 91       	ld	r30, X+
    be1a:	fc 91       	ld	r31, X
    be1c:	01 90       	ld	r0, Z+
    be1e:	f0 81       	ld	r31, Z
    be20:	e0 2d       	mov	r30, r0
    be22:	c6 01       	movw	r24, r12
    be24:	19 95       	eicall
    be26:	08 0f       	add	r16, r24
    be28:	19 1f       	adc	r17, r25
    be2a:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    be2c:	20 97       	sbiw	r28, 0x00	; 0
    be2e:	81 f7       	brne	.-32     	; 0xbe10 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    be30:	c8 01       	movw	r24, r16
    be32:	df 91       	pop	r29
    be34:	cf 91       	pop	r28
    be36:	1f 91       	pop	r17
    be38:	0f 91       	pop	r16
    be3a:	ff 90       	pop	r15
    be3c:	ef 90       	pop	r14
    be3e:	df 90       	pop	r13
    be40:	cf 90       	pop	r12
    be42:	08 95       	ret

0000be44 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    be44:	61 15       	cp	r22, r1
    be46:	71 05       	cpc	r23, r1
    be48:	89 f0       	breq	.+34     	; 0xbe6c <_ZN5Print5writeEPKc+0x28>
      return write((const uint8_t *)str, strlen(str));
    be4a:	db 01       	movw	r26, r22
    be4c:	0d 90       	ld	r0, X+
    be4e:	00 20       	and	r0, r0
    be50:	e9 f7       	brne	.-6      	; 0xbe4c <_ZN5Print5writeEPKc+0x8>
    be52:	ad 01       	movw	r20, r26
    be54:	41 50       	subi	r20, 0x01	; 1
    be56:	50 40       	sbci	r21, 0x00	; 0
    be58:	46 1b       	sub	r20, r22
    be5a:	57 0b       	sbc	r21, r23
    be5c:	dc 01       	movw	r26, r24
    be5e:	ed 91       	ld	r30, X+
    be60:	fc 91       	ld	r31, X
    be62:	02 80       	ldd	r0, Z+2	; 0x02
    be64:	f3 81       	ldd	r31, Z+3	; 0x03
    be66:	e0 2d       	mov	r30, r0
    be68:	19 95       	eicall
    be6a:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    be6c:	80 e0       	ldi	r24, 0x00	; 0
    be6e:	90 e0       	ldi	r25, 0x00	; 0
      return write((const uint8_t *)str, strlen(str));
    }
    be70:	08 95       	ret

0000be72 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    be72:	dc 01       	movw	r26, r24
    be74:	ed 91       	ld	r30, X+
    be76:	fc 91       	ld	r31, X
    be78:	01 90       	ld	r0, Z+
    be7a:	f0 81       	ld	r31, Z
    be7c:	e0 2d       	mov	r30, r0
    be7e:	19 95       	eicall
}
    be80:	08 95       	ret

0000be82 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    be82:	0f 93       	push	r16
    be84:	1f 93       	push	r17
    be86:	cf 93       	push	r28
    be88:	df 93       	push	r29
    be8a:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    be8c:	6d e0       	ldi	r22, 0x0D	; 13
    be8e:	0e 94 39 5f 	call	0xbe72	; 0xbe72 <_ZN5Print5printEc>
    be92:	ec 01       	movw	r28, r24
  n += print('\n');
    be94:	c8 01       	movw	r24, r16
    be96:	6a e0       	ldi	r22, 0x0A	; 10
    be98:	0e 94 39 5f 	call	0xbe72	; 0xbe72 <_ZN5Print5printEc>
    be9c:	8c 0f       	add	r24, r28
    be9e:	9d 1f       	adc	r25, r29
  return n;
}
    bea0:	df 91       	pop	r29
    bea2:	cf 91       	pop	r28
    bea4:	1f 91       	pop	r17
    bea6:	0f 91       	pop	r16
    bea8:	08 95       	ret

0000beaa <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    beaa:	4f 92       	push	r4
    beac:	5f 92       	push	r5
    beae:	6f 92       	push	r6
    beb0:	7f 92       	push	r7
    beb2:	af 92       	push	r10
    beb4:	bf 92       	push	r11
    beb6:	cf 92       	push	r12
    beb8:	df 92       	push	r13
    beba:	ef 92       	push	r14
    bebc:	ff 92       	push	r15
    bebe:	0f 93       	push	r16
    bec0:	1f 93       	push	r17
    bec2:	cf 93       	push	r28
    bec4:	df 93       	push	r29
    bec6:	cd b7       	in	r28, 0x3d	; 61
    bec8:	de b7       	in	r29, 0x3e	; 62
    beca:	a1 97       	sbiw	r28, 0x21	; 33
    becc:	cd bf       	out	0x3d, r28	; 61
    bece:	de bf       	out	0x3e, r29	; 62
    bed0:	5c 01       	movw	r10, r24
    bed2:	e4 2e       	mov	r14, r20
    bed4:	cb 01       	movw	r24, r22
    bed6:	f2 2e       	mov	r15, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    bed8:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    beda:	21 e0       	ldi	r18, 0x01	; 1
    bedc:	2f 15       	cp	r18, r15
    bede:	10 f0       	brcs	.+4      	; 0xbee4 <_ZN5Print11printNumberEmh+0x3a>
    bee0:	3a e0       	ldi	r19, 0x0A	; 10
    bee2:	f3 2e       	mov	r15, r19
    bee4:	21 e2       	ldi	r18, 0x21	; 33
    bee6:	c2 2e       	mov	r12, r18
    bee8:	d1 2c       	mov	r13, r1
    beea:	cc 0e       	add	r12, r28
    beec:	dd 1e       	adc	r13, r29

  do {
    unsigned long m = n;
    n /= base;
    beee:	4f 2c       	mov	r4, r15
    bef0:	55 24       	eor	r5, r5
    bef2:	66 24       	eor	r6, r6
    bef4:	77 24       	eor	r7, r7
    bef6:	03 c0       	rjmp	.+6      	; 0xbefe <_ZN5Print11printNumberEmh+0x54>
    bef8:	e0 2e       	mov	r14, r16
    befa:	51 2f       	mov	r21, r17
    befc:	c9 01       	movw	r24, r18
    befe:	6e 2d       	mov	r22, r14
    bf00:	75 2f       	mov	r23, r21
    bf02:	a3 01       	movw	r20, r6
    bf04:	92 01       	movw	r18, r4
    bf06:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
    bf0a:	89 01       	movw	r16, r18
    bf0c:	9a 01       	movw	r18, r20
    char c = m - base * n;
    bf0e:	f0 9e       	mul	r15, r16
    bf10:	80 2d       	mov	r24, r0
    bf12:	11 24       	eor	r1, r1
    bf14:	e8 1a       	sub	r14, r24
    bf16:	8e 2d       	mov	r24, r14
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    bf18:	08 94       	sec
    bf1a:	c1 08       	sbc	r12, r1
    bf1c:	d1 08       	sbc	r13, r1
    bf1e:	8a 30       	cpi	r24, 0x0A	; 10
    bf20:	10 f4       	brcc	.+4      	; 0xbf26 <_ZN5Print11printNumberEmh+0x7c>
    bf22:	80 5d       	subi	r24, 0xD0	; 208
    bf24:	01 c0       	rjmp	.+2      	; 0xbf28 <_ZN5Print11printNumberEmh+0x7e>
    bf26:	89 5c       	subi	r24, 0xC9	; 201
    bf28:	f6 01       	movw	r30, r12
    bf2a:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    bf2c:	01 15       	cp	r16, r1
    bf2e:	11 05       	cpc	r17, r1
    bf30:	21 05       	cpc	r18, r1
    bf32:	31 05       	cpc	r19, r1
    bf34:	09 f7       	brne	.-62     	; 0xbef8 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    bf36:	c5 01       	movw	r24, r10
    bf38:	b6 01       	movw	r22, r12
    bf3a:	0e 94 22 5f 	call	0xbe44	; 0xbe44 <_ZN5Print5writeEPKc>
}
    bf3e:	a1 96       	adiw	r28, 0x21	; 33
    bf40:	cd bf       	out	0x3d, r28	; 61
    bf42:	de bf       	out	0x3e, r29	; 62
    bf44:	df 91       	pop	r29
    bf46:	cf 91       	pop	r28
    bf48:	1f 91       	pop	r17
    bf4a:	0f 91       	pop	r16
    bf4c:	ff 90       	pop	r15
    bf4e:	ef 90       	pop	r14
    bf50:	df 90       	pop	r13
    bf52:	cf 90       	pop	r12
    bf54:	bf 90       	pop	r11
    bf56:	af 90       	pop	r10
    bf58:	7f 90       	pop	r7
    bf5a:	6f 90       	pop	r6
    bf5c:	5f 90       	pop	r5
    bf5e:	4f 90       	pop	r4
    bf60:	08 95       	ret

0000bf62 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    bf62:	21 15       	cp	r18, r1
    bf64:	31 05       	cpc	r19, r1
    bf66:	49 f4       	brne	.+18     	; 0xbf7a <_ZN5Print5printEmi+0x18>
    bf68:	dc 01       	movw	r26, r24
    bf6a:	ed 91       	ld	r30, X+
    bf6c:	fc 91       	ld	r31, X
    bf6e:	01 90       	ld	r0, Z+
    bf70:	f0 81       	ld	r31, Z
    bf72:	e0 2d       	mov	r30, r0
    bf74:	64 2f       	mov	r22, r20
    bf76:	19 95       	eicall
    bf78:	08 95       	ret
  else return printNumber(n, base);
    bf7a:	0e 94 55 5f 	call	0xbeaa	; 0xbeaa <_ZN5Print11printNumberEmh>
}
    bf7e:	08 95       	ret

0000bf80 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    bf80:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    bf82:	ab 01       	movw	r20, r22
    bf84:	60 e0       	ldi	r22, 0x00	; 0
    bf86:	70 e0       	ldi	r23, 0x00	; 0
    bf88:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <_ZN5Print5printEmi>
}
    bf8c:	08 95       	ret

0000bf8e <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    bf8e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    bf90:	46 2f       	mov	r20, r22
    bf92:	50 e0       	ldi	r21, 0x00	; 0
    bf94:	60 e0       	ldi	r22, 0x00	; 0
    bf96:	70 e0       	ldi	r23, 0x00	; 0
    bf98:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <_ZN5Print5printEmi>
}
    bf9c:	08 95       	ret

0000bf9e <_ZN13MinimumSerial5writeEh>:
 * Unbuffered write
 *
 * \param[in] b byte to write.
 * \return 1
 */
size_t MinimumSerial::write(uint8_t b) {
    bf9e:	86 2f       	mov	r24, r22
#ifndef ARBITROS_CMP
  while (((1 << UDRIE0) & UCSR0B) || !(UCSR0A & (1 << UDRE0))) {}
  UDR0 = b;
#else
   arb_sysPrintChar( (const char)b);
    bfa0:	0e 94 9b 8b 	call	0x11736	; 0x11736 <arb_sysPrintChar>
#endif
  return 1;
}
    bfa4:	81 e0       	ldi	r24, 0x01	; 1
    bfa6:	90 e0       	ldi	r25, 0x00	; 0
    bfa8:	08 95       	ret

0000bfaa <_GLOBAL__sub_I__ZN13MinimumSerial5beginEm>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    bfaa:	10 92 96 24 	sts	0x2496, r1
    bfae:	10 92 97 24 	sts	0x2497, r1
#include <Arduino.h>
/**
 * \class MinimumSerial
 * \brief mini serial class for the %SdFat library.
 */
class MinimumSerial : public Print {
    bfb2:	89 ef       	ldi	r24, 0xF9	; 249
    bfb4:	91 e2       	ldi	r25, 0x21	; 33
    bfb6:	80 93 94 24 	sts	0x2494, r24
    bfba:	90 93 95 24 	sts	0x2495, r25
MinimumSerial MiniSerial;
    bfbe:	08 95       	ret

0000bfc0 <_ZL18blockTransCompletePaj>:
static bool b_bTransComplete = false;

static void blockTransComplete( int8_t *pc_rxData,
                                uint16_t s_size)
{
   b_bTransComplete = true;
    bfc0:	81 e0       	ldi	r24, 0x01	; 1
    bfc2:	80 93 9a 24 	sts	0x249A, r24
}/*End blockTransComplete*/
    bfc6:	08 95       	ret

0000bfc8 <_ZL9CRC_CCITTPKhj>:
//------------------------------------------------------------------------------
#if USE_SD_CRC == 1
// slower CRC-CCITT
// uses the x^16,x^12,x^5,x^1 polynomial.
static uint16_t CRC_CCITT(const uint8_t *data, size_t n) {
  uint16_t crc = 0;
    bfc8:	fc 01       	movw	r30, r24
  for (size_t i = 0; i < n; i++) {
    bfca:	40 e0       	ldi	r20, 0x00	; 0
    bfcc:	50 e0       	ldi	r21, 0x00	; 0
//------------------------------------------------------------------------------
#if USE_SD_CRC == 1
// slower CRC-CCITT
// uses the x^16,x^12,x^5,x^1 polynomial.
static uint16_t CRC_CCITT(const uint8_t *data, size_t n) {
  uint16_t crc = 0;
    bfce:	80 e0       	ldi	r24, 0x00	; 0
    bfd0:	90 e0       	ldi	r25, 0x00	; 0
  for (size_t i = 0; i < n; i++) {
    bfd2:	25 c0       	rjmp	.+74     	; 0xc01e <_ZL9CRC_CCITTPKhj+0x56>
    crc = (uint8_t)(crc >> 8) | (crc << 8);
    bfd4:	29 2f       	mov	r18, r25
    bfd6:	30 e0       	ldi	r19, 0x00	; 0
    bfd8:	98 2f       	mov	r25, r24
    bfda:	88 27       	eor	r24, r24
    bfdc:	28 2b       	or	r18, r24
    bfde:	39 2b       	or	r19, r25
    crc ^= data[i];
    bfe0:	81 91       	ld	r24, Z+
    bfe2:	90 e0       	ldi	r25, 0x00	; 0
    bfe4:	28 27       	eor	r18, r24
    bfe6:	39 27       	eor	r19, r25
    crc ^= (uint8_t)(crc & 0xff) >> 4;
    bfe8:	82 2f       	mov	r24, r18
    bfea:	90 e0       	ldi	r25, 0x00	; 0
    bfec:	b4 e0       	ldi	r27, 0x04	; 4
    bfee:	95 95       	asr	r25
    bff0:	87 95       	ror	r24
    bff2:	ba 95       	dec	r27
    bff4:	e1 f7       	brne	.-8      	; 0xbfee <_ZL9CRC_CCITTPKhj+0x26>
    bff6:	82 27       	eor	r24, r18
    bff8:	93 27       	eor	r25, r19
    crc ^= crc << 12;
    bffa:	9c 01       	movw	r18, r24
    bffc:	32 2f       	mov	r19, r18
    bffe:	22 27       	eor	r18, r18
    c000:	32 95       	swap	r19
    c002:	30 7f       	andi	r19, 0xF0	; 240
    c004:	28 27       	eor	r18, r24
    c006:	39 27       	eor	r19, r25
    crc ^= (crc & 0xff) << 5;
    c008:	c9 01       	movw	r24, r18
    c00a:	90 70       	andi	r25, 0x00	; 0
    c00c:	b5 e0       	ldi	r27, 0x05	; 5
    c00e:	88 0f       	add	r24, r24
    c010:	99 1f       	adc	r25, r25
    c012:	ba 95       	dec	r27
    c014:	e1 f7       	brne	.-8      	; 0xc00e <_ZL9CRC_CCITTPKhj+0x46>
    c016:	82 27       	eor	r24, r18
    c018:	93 27       	eor	r25, r19
#if USE_SD_CRC == 1
// slower CRC-CCITT
// uses the x^16,x^12,x^5,x^1 polynomial.
static uint16_t CRC_CCITT(const uint8_t *data, size_t n) {
  uint16_t crc = 0;
  for (size_t i = 0; i < n; i++) {
    c01a:	4f 5f       	subi	r20, 0xFF	; 255
    c01c:	5f 4f       	sbci	r21, 0xFF	; 255
    c01e:	46 17       	cp	r20, r22
    c020:	57 07       	cpc	r21, r23
    c022:	c1 f6       	brne	.-80     	; 0xbfd4 <_ZL9CRC_CCITTPKhj+0xc>
    crc ^= (uint8_t)(crc & 0xff) >> 4;
    crc ^= crc << 12;
    crc ^= (crc & 0xff) << 5;
  }
  return crc;
}
    c024:	08 95       	ret

0000c026 <_ZL7spiSendh>:
  }
  return c_status;
}
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {
    c026:	68 2f       	mov	r22, r24

  hal_spiWriteByte( gt_spiHandle,
                    b);
    c028:	20 91 98 24 	lds	r18, 0x2498
    c02c:	30 91 99 24 	lds	r19, 0x2499
    c030:	c9 01       	movw	r24, r18
    c032:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <hal_spiWriteByte>
}
    c036:	08 95       	ret

0000c038 <_ZL6spiRecv>:
   return (unsigned long)arb_sysMsecDelta( (uint64_t)l_currTime, (uint64_t)l_prevTime);
}/*End millisDelta*/

//------------------------------------------------------------------------------
/** SPI receive a byte */
static  uint8_t spiRec() {
    c038:	cf 93       	push	r28
    c03a:	df 93       	push	r29
    c03c:	0f 92       	push	r0
    c03e:	cd b7       	in	r28, 0x3d	; 61
    c040:	de b7       	in	r29, 0x3e	; 62
  uint8_t c;
  hal_spiReadByte( gt_spiHandle,
                   (int8_t *)&c);
    c042:	80 91 98 24 	lds	r24, 0x2498
    c046:	90 91 99 24 	lds	r25, 0x2499
    c04a:	be 01       	movw	r22, r28
    c04c:	6f 5f       	subi	r22, 0xFF	; 255
    c04e:	7f 4f       	sbci	r23, 0xFF	; 255
    c050:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <hal_spiReadByte>
  return c;
}
    c054:	89 81       	ldd	r24, Y+1	; 0x01
    c056:	0f 90       	pop	r0
    c058:	df 91       	pop	r29
    c05a:	cf 91       	pop	r28
    c05c:	08 95       	ret

0000c05e <millis>:
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c05e:	0e 94 ec 9b 	call	0x137d8	; 0x137d8 <arb_sysMsecNow>
    c062:	95 2f       	mov	r25, r21
    c064:	b9 01       	movw	r22, r18
    c066:	84 2f       	mov	r24, r20

}/*End millis*/
    c068:	08 95       	ret

0000c06a <_Z11millisDeltamm>:

unsigned long millisDelta( unsigned long l_currTime,
                           unsigned long l_prevTime)
{
    c06a:	2f 92       	push	r2
    c06c:	3f 92       	push	r3
    c06e:	4f 92       	push	r4
    c070:	5f 92       	push	r5
    c072:	6f 92       	push	r6
    c074:	7f 92       	push	r7
    c076:	8f 92       	push	r8
    c078:	9f 92       	push	r9
    c07a:	af 92       	push	r10
    c07c:	bf 92       	push	r11
    c07e:	cf 92       	push	r12
    c080:	df 92       	push	r13
    c082:	ef 92       	push	r14
    c084:	ff 92       	push	r15
    c086:	0f 93       	push	r16
    c088:	1f 93       	push	r17
    c08a:	cf 93       	push	r28
    c08c:	df 93       	push	r29
    c08e:	dc 01       	movw	r26, r24
    c090:	cb 01       	movw	r24, r22
   return (unsigned long)arb_sysMsecDelta( (uint64_t)l_currTime, (uint64_t)l_prevTime);
    c092:	19 01       	movw	r2, r18
    c094:	2a 01       	movw	r4, r20
    c096:	9c 01       	movw	r18, r24
    c098:	ad 01       	movw	r20, r26
    c09a:	60 e0       	ldi	r22, 0x00	; 0
    c09c:	70 e0       	ldi	r23, 0x00	; 0
    c09e:	80 e0       	ldi	r24, 0x00	; 0
    c0a0:	90 e0       	ldi	r25, 0x00	; 0
    c0a2:	51 01       	movw	r10, r2
    c0a4:	62 01       	movw	r12, r4
    c0a6:	ee 24       	eor	r14, r14
    c0a8:	ff 24       	eor	r15, r15
    c0aa:	00 e0       	ldi	r16, 0x00	; 0
    c0ac:	10 e0       	ldi	r17, 0x00	; 0
    c0ae:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <arb_sysMsecDelta>
    c0b2:	95 2f       	mov	r25, r21
    c0b4:	b9 01       	movw	r22, r18
    c0b6:	84 2f       	mov	r24, r20
}/*End millisDelta*/
    c0b8:	df 91       	pop	r29
    c0ba:	cf 91       	pop	r28
    c0bc:	1f 91       	pop	r17
    c0be:	0f 91       	pop	r16
    c0c0:	ff 90       	pop	r15
    c0c2:	ef 90       	pop	r14
    c0c4:	df 90       	pop	r13
    c0c6:	cf 90       	pop	r12
    c0c8:	bf 90       	pop	r11
    c0ca:	af 90       	pop	r10
    c0cc:	9f 90       	pop	r9
    c0ce:	8f 90       	pop	r8
    c0d0:	7f 90       	pop	r7
    c0d2:	6f 90       	pop	r6
    c0d4:	5f 90       	pop	r5
    c0d6:	4f 90       	pop	r4
    c0d8:	3f 90       	pop	r3
    c0da:	2f 90       	pop	r2
    c0dc:	08 95       	ret

0000c0de <_ZN7Sd2Card14chipSelectHighEv>:
  digitalWrite(chipSelectPin_, HIGH);
  // insure MISO goes high impedance
  spiSend(0XFF);
#else
  hal_spiSetChipSelect( gt_spiHandle,
                        SPI_CS_DIS);
    c0de:	80 91 98 24 	lds	r24, 0x2498
    c0e2:	90 91 99 24 	lds	r25, 0x2499
    c0e6:	61 e0       	ldi	r22, 0x01	; 1
    c0e8:	0e 94 9e 33 	call	0x673c	; 0x673c <hal_spiSetChipSelect>
  spiSend(0XFF);
    c0ec:	8f ef       	ldi	r24, 0xFF	; 255
    c0ee:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
#endif
}
    c0f2:	08 95       	ret

0000c0f4 <_ZN7Sd2Card13chipSelectLowEv>:
#ifndef ARBITROS_CMP
  spiInit(spiRate_);
  digitalWrite(chipSelectPin_, LOW);
#else
  hal_spiSetChipSelect( gt_spiHandle,
                        SPI_CS_EN);
    c0f4:	80 91 98 24 	lds	r24, 0x2498
    c0f8:	90 91 99 24 	lds	r25, 0x2499
    c0fc:	60 e0       	ldi	r22, 0x00	; 0
    c0fe:	0e 94 9e 33 	call	0x673c	; 0x673c <hal_spiSetChipSelect>
#endif
}
    c102:	08 95       	ret

0000c104 <_ZN7Sd2Card8readDataEPhj>:
bool Sd2Card::readData(uint8_t *dst) {
  chipSelectLow();
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
    c104:	6f 92       	push	r6
    c106:	7f 92       	push	r7
    c108:	8f 92       	push	r8
    c10a:	9f 92       	push	r9
    c10c:	af 92       	push	r10
    c10e:	bf 92       	push	r11
    c110:	cf 92       	push	r12
    c112:	df 92       	push	r13
    c114:	ef 92       	push	r14
    c116:	ff 92       	push	r15
    c118:	0f 93       	push	r16
    c11a:	1f 93       	push	r17
    c11c:	cf 93       	push	r28
    c11e:	df 93       	push	r29
    c120:	ec 01       	movw	r28, r24
    c122:	8b 01       	movw	r16, r22
    c124:	3a 01       	movw	r6, r20
  uint16_t crc;
  // wait for start block token
  unsigned long t0 = millis();
    c126:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c12a:	6b 01       	movw	r12, r22
    c12c:	7c 01       	movw	r14, r24
  while ((status_ = spiRec()) == 0XFF) {
    c12e:	12 c0       	rjmp	.+36     	; 0xc154 <_ZN7Sd2Card8readDataEPhj+0x50>
    if ( millisDelta( millis(), t0) > SD_READ_TIMEOUT) {
    c130:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c134:	a7 01       	movw	r20, r14
    c136:	96 01       	movw	r18, r12
    c138:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c13c:	dc 01       	movw	r26, r24
    c13e:	cb 01       	movw	r24, r22
    c140:	8d 32       	cpi	r24, 0x2D	; 45
    c142:	21 e0       	ldi	r18, 0x01	; 1
    c144:	92 07       	cpc	r25, r18
    c146:	20 e0       	ldi	r18, 0x00	; 0
    c148:	a2 07       	cpc	r26, r18
    c14a:	20 e0       	ldi	r18, 0x00	; 0
    c14c:	b2 07       	cpc	r27, r18
    c14e:	10 f0       	brcs	.+4      	; 0xc154 <_ZN7Sd2Card8readDataEPhj+0x50>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c150:	81 e1       	ldi	r24, 0x11	; 17
    c152:	57 c0       	rjmp	.+174    	; 0xc202 <_ZN7Sd2Card8readDataEPhj+0xfe>
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
  uint16_t crc;
  // wait for start block token
  unsigned long t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    c154:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c158:	8b 83       	std	Y+3, r24	; 0x03
    c15a:	8f 3f       	cpi	r24, 0xFF	; 255
    c15c:	49 f3       	breq	.-46     	; 0xc130 <_ZN7Sd2Card8readDataEPhj+0x2c>
    if ( millisDelta( millis(), t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    c15e:	8e 3f       	cpi	r24, 0xFE	; 254
    c160:	11 f0       	breq	.+4      	; 0xc166 <_ZN7Sd2Card8readDataEPhj+0x62>
    c162:	8f e0       	ldi	r24, 0x0F	; 15
    c164:	4e c0       	rjmp	.+156    	; 0xc202 <_ZN7Sd2Card8readDataEPhj+0xfe>
  uint8_t c_status = 0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    c166:	0e 94 a6 9c 	call	0x1394c	; 0x1394c <arb_sysTimerEnabled>
    c16a:	88 23       	and	r24, r24
    c16c:	99 f0       	breq	.+38     	; 0xc194 <_ZN7Sd2Card8readDataEPhj+0x90>
    c16e:	0f b6       	in	r0, 0x3f	; 63
    c170:	07 fe       	sbrs	r0, 7
    c172:	10 c0       	rjmp	.+32     	; 0xc194 <_ZN7Sd2Card8readDataEPhj+0x90>
    c174:	5f c0       	rjmp	.+190    	; 0xc234 <_ZN7Sd2Card8readDataEPhj+0x130>
  {
     for( uint32_t i = 0; i < n; i++)
       hal_spiReadByte( gt_spiHandle,
                        (int8_t *)&buf[i]);
    c176:	80 91 98 24 	lds	r24, 0x2498
    c17a:	90 91 99 24 	lds	r25, 0x2499
bool Sd2Card::readData(uint8_t *dst) {
  chipSelectLow();
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
    c17e:	b8 01       	movw	r22, r16
    c180:	68 0d       	add	r22, r8
    c182:	79 1d       	adc	r23, r9
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
  {
     for( uint32_t i = 0; i < n; i++)
       hal_spiReadByte( gt_spiHandle,
                        (int8_t *)&buf[i]);
    c184:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <hal_spiReadByte>
  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
  {
     for( uint32_t i = 0; i < n; i++)
    c188:	08 94       	sec
    c18a:	81 1c       	adc	r8, r1
    c18c:	91 1c       	adc	r9, r1
    c18e:	a1 1c       	adc	r10, r1
    c190:	b1 1c       	adc	r11, r1
    c192:	06 c0       	rjmp	.+12     	; 0xc1a0 <_ZN7Sd2Card8readDataEPhj+0x9c>
  uint8_t c_status = 0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    c194:	88 24       	eor	r8, r8
    c196:	99 24       	eor	r9, r9
    c198:	54 01       	movw	r10, r8
  {
     for( uint32_t i = 0; i < n; i++)
    c19a:	63 01       	movw	r12, r6
    c19c:	ee 24       	eor	r14, r14
    c19e:	ff 24       	eor	r15, r15
    c1a0:	8c 14       	cp	r8, r12
    c1a2:	9d 04       	cpc	r9, r13
    c1a4:	ae 04       	cpc	r10, r14
    c1a6:	bf 04       	cpc	r11, r15
    c1a8:	30 f3       	brcs	.-52     	; 0xc176 <_ZN7Sd2Card8readDataEPhj+0x72>
    c1aa:	16 c0       	rjmp	.+44     	; 0xc1d8 <_ZN7Sd2Card8readDataEPhj+0xd4>
     t0 = millis();

     while( b_bTransComplete == false)
     {

        if( millisDelta( millis(), t0) > (SD_READ_TIMEOUT*5))
    c1ac:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c1b0:	a7 01       	movw	r20, r14
    c1b2:	96 01       	movw	r18, r12
    c1b4:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c1b8:	dc 01       	movw	r26, r24
    c1ba:	cb 01       	movw	r24, r22
    c1bc:	8d 3d       	cpi	r24, 0xDD	; 221
    c1be:	25 e0       	ldi	r18, 0x05	; 5
    c1c0:	92 07       	cpc	r25, r18
    c1c2:	20 e0       	ldi	r18, 0x00	; 0
    c1c4:	a2 07       	cpc	r26, r18
    c1c6:	20 e0       	ldi	r18, 0x00	; 0
    c1c8:	b2 07       	cpc	r27, r18
    c1ca:	20 f4       	brcc	.+8      	; 0xc1d4 <_ZN7Sd2Card8readDataEPhj+0xd0>
                       (int8_t *)buf,
                       (uint16_t)n);

     t0 = millis();

     while( b_bTransComplete == false)
    c1cc:	80 91 9a 24 	lds	r24, 0x249A
    c1d0:	88 23       	and	r24, r24
    c1d2:	61 f3       	breq	.-40     	; 0xc1ac <_ZN7Sd2Card8readDataEPhj+0xa8>
           break;
           c_status = 1;
        }
     }

     b_bTransComplete = false;
    c1d4:	10 92 9a 24 	sts	0x249A, r1
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if (status_ = spiRec(dst, count)) {
    c1d8:	1b 82       	std	Y+3, r1	; 0x03
    error(SD_CARD_ERROR_SPI_DMA);
    goto fail;
  }
  // get crc
  crc = (spiRec() << 8) | spiRec();
    c1da:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c1de:	88 2e       	mov	r8, r24
    c1e0:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c1e4:	c8 2e       	mov	r12, r24
#if USE_SD_CRC
  if (crc != CRC_CCITT(dst, count)) {
    c1e6:	c8 01       	movw	r24, r16
    c1e8:	b3 01       	movw	r22, r6
    c1ea:	0e 94 e4 5f 	call	0xbfc8	; 0xbfc8 <_ZL9CRC_CCITTPKhj>
  if (status_ = spiRec(dst, count)) {
    error(SD_CARD_ERROR_SPI_DMA);
    goto fail;
  }
  // get crc
  crc = (spiRec() << 8) | spiRec();
    c1ee:	58 2d       	mov	r21, r8
    c1f0:	40 e0       	ldi	r20, 0x00	; 0
    c1f2:	2c 2d       	mov	r18, r12
    c1f4:	30 e0       	ldi	r19, 0x00	; 0
    c1f6:	24 2b       	or	r18, r20
    c1f8:	35 2b       	or	r19, r21
#if USE_SD_CRC
  if (crc != CRC_CCITT(dst, count)) {
    c1fa:	28 17       	cp	r18, r24
    c1fc:	39 07       	cpc	r19, r25
    c1fe:	39 f0       	breq	.+14     	; 0xc20e <_ZN7Sd2Card8readDataEPhj+0x10a>
    c200:	8b e1       	ldi	r24, 0x1B	; 27
    c202:	89 83       	std	Y+1, r24	; 0x01

  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c204:	ce 01       	movw	r24, r28
    c206:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c20a:	80 e0       	ldi	r24, 0x00	; 0
    c20c:	04 c0       	rjmp	.+8      	; 0xc216 <_ZN7Sd2Card8readDataEPhj+0x112>
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#endif  // USE_SD_CRC

  chipSelectHigh();
    c20e:	ce 01       	movw	r24, r28
    c210:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c214:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    c216:	df 91       	pop	r29
    c218:	cf 91       	pop	r28
    c21a:	1f 91       	pop	r17
    c21c:	0f 91       	pop	r16
    c21e:	ff 90       	pop	r15
    c220:	ef 90       	pop	r14
    c222:	df 90       	pop	r13
    c224:	cf 90       	pop	r12
    c226:	bf 90       	pop	r11
    c228:	af 90       	pop	r10
    c22a:	9f 90       	pop	r9
    c22c:	8f 90       	pop	r8
    c22e:	7f 90       	pop	r7
    c230:	6f 90       	pop	r6
    c232:	08 95       	ret
  else
  {
     hal_spiReadBlock( gt_spiHandle,
                       false,
                       (int8_t *)buf,
                       (uint16_t)n);
    c234:	80 91 98 24 	lds	r24, 0x2498
    c238:	90 91 99 24 	lds	r25, 0x2499
    c23c:	60 e0       	ldi	r22, 0x00	; 0
    c23e:	a8 01       	movw	r20, r16
    c240:	93 01       	movw	r18, r6
    c242:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <hal_spiReadBlock>

     t0 = millis();
    c246:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c24a:	6b 01       	movw	r12, r22
    c24c:	7c 01       	movw	r14, r24
    c24e:	be cf       	rjmp	.-132    	; 0xc1cc <_ZN7Sd2Card8readDataEPhj+0xc8>

0000c250 <_ZN7Sd2Card8readDataEPh>:
 * \param[in] dst Pointer to the location for the data to be read.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readData(uint8_t *dst) {
    c250:	0f 93       	push	r16
    c252:	1f 93       	push	r17
    c254:	cf 93       	push	r28
    c256:	df 93       	push	r29
    c258:	ec 01       	movw	r28, r24
    c25a:	8b 01       	movw	r16, r22
  chipSelectLow();
    c25c:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_ZN7Sd2Card13chipSelectLowEv>
  return readData(dst, 512);
    c260:	ce 01       	movw	r24, r28
    c262:	b8 01       	movw	r22, r16
    c264:	40 e0       	ldi	r20, 0x00	; 0
    c266:	52 e0       	ldi	r21, 0x02	; 2
    c268:	0e 94 82 60 	call	0xc104	; 0xc104 <_ZN7Sd2Card8readDataEPhj>
}
    c26c:	df 91       	pop	r29
    c26e:	cf 91       	pop	r28
    c270:	1f 91       	pop	r17
    c272:	0f 91       	pop	r16
    c274:	08 95       	ret

0000c276 <_ZN7Sd2Card11waitNotBusyEj>:
  spiRate_ = sckRateID;
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    c276:	8f 92       	push	r8
    c278:	9f 92       	push	r9
    c27a:	af 92       	push	r10
    c27c:	bf 92       	push	r11
    c27e:	cf 92       	push	r12
    c280:	df 92       	push	r13
    c282:	ef 92       	push	r14
    c284:	ff 92       	push	r15
    c286:	6b 01       	movw	r12, r22
  unsigned long t0 = millis();
    c288:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c28c:	4b 01       	movw	r8, r22
    c28e:	5c 01       	movw	r10, r24
  while (spiRec() != 0XFF) {
    if (millisDelta( millis(), t0) >= timeoutMillis) goto fail;
    c290:	ee 24       	eor	r14, r14
    c292:	ff 24       	eor	r15, r15
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  unsigned long t0 = millis();
  while (spiRec() != 0XFF) {
    c294:	0d c0       	rjmp	.+26     	; 0xc2b0 <_ZN7Sd2Card11waitNotBusyEj+0x3a>
    if (millisDelta( millis(), t0) >= timeoutMillis) goto fail;
    c296:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c29a:	a5 01       	movw	r20, r10
    c29c:	94 01       	movw	r18, r8
    c29e:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c2a2:	dc 01       	movw	r26, r24
    c2a4:	cb 01       	movw	r24, r22
    c2a6:	8c 15       	cp	r24, r12
    c2a8:	9d 05       	cpc	r25, r13
    c2aa:	ae 05       	cpc	r26, r14
    c2ac:	bf 05       	cpc	r27, r15
    c2ae:	30 f4       	brcc	.+12     	; 0xc2bc <_ZN7Sd2Card11waitNotBusyEj+0x46>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  unsigned long t0 = millis();
  while (spiRec() != 0XFF) {
    c2b0:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c2b4:	8f 3f       	cpi	r24, 0xFF	; 255
    c2b6:	79 f7       	brne	.-34     	; 0xc296 <_ZN7Sd2Card11waitNotBusyEj+0x20>
    if (millisDelta( millis(), t0) >= timeoutMillis) goto fail;
  }
  return true;
    c2b8:	81 e0       	ldi	r24, 0x01	; 1
    c2ba:	01 c0       	rjmp	.+2      	; 0xc2be <_ZN7Sd2Card11waitNotBusyEj+0x48>

 fail:
  return false;
    c2bc:	80 e0       	ldi	r24, 0x00	; 0
}
    c2be:	ff 90       	pop	r15
    c2c0:	ef 90       	pop	r14
    c2c2:	df 90       	pop	r13
    c2c4:	cf 90       	pop	r12
    c2c6:	bf 90       	pop	r11
    c2c8:	af 90       	pop	r10
    c2ca:	9f 90       	pop	r9
    c2cc:	8f 90       	pop	r8
    c2ce:	08 95       	ret

0000c2d0 <_ZN7Sd2Card11cardCommandEhm>:
#endif  // USE_SD_CRC
//==============================================================================
// Sd2Card member functions
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    c2d0:	df 92       	push	r13
    c2d2:	ef 92       	push	r14
    c2d4:	ff 92       	push	r15
    c2d6:	0f 93       	push	r16
    c2d8:	1f 93       	push	r17
    c2da:	cf 93       	push	r28
    c2dc:	df 93       	push	r29
    c2de:	cd b7       	in	r28, 0x3d	; 61
    c2e0:	de b7       	in	r29, 0x3e	; 62
    c2e2:	2b 97       	sbiw	r28, 0x0b	; 11
    c2e4:	cd bf       	out	0x3d, r28	; 61
    c2e6:	de bf       	out	0x3e, r29	; 62
    c2e8:	7c 01       	movw	r14, r24
    c2ea:	d6 2e       	mov	r13, r22
    c2ec:	2f 83       	std	Y+7, r18	; 0x07
    c2ee:	38 87       	std	Y+8, r19	; 0x08
    c2f0:	49 87       	std	Y+9, r20	; 0x09
    c2f2:	5a 87       	std	Y+10, r21	; 0x0a
  // select card
  chipSelectLow();
    c2f4:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    c2f8:	c7 01       	movw	r24, r14
    c2fa:	6c e2       	ldi	r22, 0x2C	; 44
    c2fc:	71 e0       	ldi	r23, 0x01	; 1
    c2fe:	0e 94 3b 61 	call	0xc276	; 0xc276 <_ZN7Sd2Card11waitNotBusyEj>

  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);

#if USE_SD_CRC
  // form message
  uint8_t d[6] = {cmd | 0X40, pa[3], pa[2], pa[1], pa[0]};
    c302:	fe 01       	movw	r30, r28
    c304:	31 96       	adiw	r30, 0x01	; 1
    c306:	86 e0       	ldi	r24, 0x06	; 6
    c308:	df 01       	movw	r26, r30
    c30a:	1d 92       	st	X+, r1
    c30c:	8a 95       	dec	r24
    c30e:	e9 f7       	brne	.-6      	; 0xc30a <_ZN7Sd2Card11cardCommandEhm+0x3a>
    c310:	8d 2d       	mov	r24, r13
    c312:	80 64       	ori	r24, 0x40	; 64
    c314:	89 83       	std	Y+1, r24	; 0x01
    c316:	8a 85       	ldd	r24, Y+10	; 0x0a
    c318:	8a 83       	std	Y+2, r24	; 0x02
    c31a:	89 85       	ldd	r24, Y+9	; 0x09
    c31c:	8b 83       	std	Y+3, r24	; 0x03
    c31e:	88 85       	ldd	r24, Y+8	; 0x08
    c320:	8c 83       	std	Y+4, r24	; 0x04
    c322:	8f 81       	ldd	r24, Y+7	; 0x07
    c324:	8d 83       	std	Y+5, r24	; 0x05
//==============================================================================
#if USE_SD_CRC
// CRC functions
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
    c326:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < n; i++) {
    c328:	50 e0       	ldi	r21, 0x00	; 0
    uint8_t d = data[i];
    for (uint8_t j = 0; j < 8; j++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    c32a:	a9 e0       	ldi	r26, 0x09	; 9
// CRC functions
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    uint8_t d = data[i];
    c32c:	71 91       	ld	r23, Z+
    c32e:	68 e0       	ldi	r22, 0x08	; 8
    for (uint8_t j = 0; j < 8; j++) {
      crc <<= 1;
    c330:	44 0f       	add	r20, r20
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    c332:	84 2f       	mov	r24, r20
    c334:	90 e0       	ldi	r25, 0x00	; 0
    c336:	27 2f       	mov	r18, r23
    c338:	30 e0       	ldi	r19, 0x00	; 0
    c33a:	82 27       	eor	r24, r18
    c33c:	93 27       	eor	r25, r19
    c33e:	87 fd       	sbrc	r24, 7
    c340:	4a 27       	eor	r20, r26
      d <<= 1;
    c342:	77 0f       	add	r23, r23
    c344:	61 50       	subi	r22, 0x01	; 1
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    uint8_t d = data[i];
    for (uint8_t j = 0; j < 8; j++) {
    c346:	a1 f7       	brne	.-24     	; 0xc330 <_ZN7Sd2Card11cardCommandEhm+0x60>
#if USE_SD_CRC
// CRC functions
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    c348:	5f 5f       	subi	r21, 0xFF	; 255
    c34a:	55 30       	cpi	r21, 0x05	; 5
    c34c:	79 f7       	brne	.-34     	; 0xc32c <_ZN7Sd2Card11cardCommandEhm+0x5c>
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    }
  }
  return (crc << 1) | 1;
    c34e:	44 0f       	add	r20, r20
    c350:	41 60       	ori	r20, 0x01	; 1
#if USE_SD_CRC
  // form message
  uint8_t d[6] = {cmd | 0X40, pa[3], pa[2], pa[1], pa[0]};

  // add crc
  d[5] = CRC7(d, 5);
    c352:	4e 83       	std	Y+6, r20	; 0x06
    c354:	8e 01       	movw	r16, r28
    c356:	0f 5f       	subi	r16, 0xFF	; 255
    c358:	1f 4f       	sbci	r17, 0xFF	; 255

  // send message
  for (uint8_t k = 0; k < 6; k++) spiSend(d[k]);
    c35a:	90 e0       	ldi	r25, 0x00	; 0
    c35c:	f8 01       	movw	r30, r16
    c35e:	81 91       	ld	r24, Z+
    c360:	8f 01       	movw	r16, r30
    c362:	9b 87       	std	Y+11, r25	; 0x0b
    c364:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
    c368:	9b 85       	ldd	r25, Y+11	; 0x0b
    c36a:	9f 5f       	subi	r25, 0xFF	; 255
    c36c:	96 30       	cpi	r25, 0x06	; 6
    c36e:	b1 f7       	brne	.-20     	; 0xc35c <_ZN7Sd2Card11cardCommandEhm+0x8c>
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) spiRec();
    c370:	fc e0       	ldi	r31, 0x0C	; 12
    c372:	df 16       	cp	r13, r31
    c374:	11 f4       	brne	.+4      	; 0xc37a <_ZN7Sd2Card11cardCommandEhm+0xaa>
    c376:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>

  // add crc
  d[5] = CRC7(d, 5);

  // send message
  for (uint8_t k = 0; k < 6; k++) spiSend(d[k]);
    c37a:	00 e0       	ldi	r16, 0x00	; 0

  // skip stuff byte for stop read
  if (cmd == CMD12) spiRec();

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    c37c:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c380:	d7 01       	movw	r26, r14
    c382:	13 96       	adiw	r26, 0x03	; 3
    c384:	8c 93       	st	X, r24
    c386:	13 97       	sbiw	r26, 0x03	; 3
    c388:	87 ff       	sbrs	r24, 7
    c38a:	04 c0       	rjmp	.+8      	; 0xc394 <_ZN7Sd2Card11cardCommandEhm+0xc4>
    c38c:	0f 3f       	cpi	r16, 0xFF	; 255
    c38e:	11 f0       	breq	.+4      	; 0xc394 <_ZN7Sd2Card11cardCommandEhm+0xc4>
    c390:	0f 5f       	subi	r16, 0xFF	; 255
    c392:	f4 cf       	rjmp	.-24     	; 0xc37c <_ZN7Sd2Card11cardCommandEhm+0xac>
  return status_;
}
    c394:	2b 96       	adiw	r28, 0x0b	; 11
    c396:	cd bf       	out	0x3d, r28	; 61
    c398:	de bf       	out	0x3e, r29	; 62
    c39a:	df 91       	pop	r29
    c39c:	cf 91       	pop	r28
    c39e:	1f 91       	pop	r17
    c3a0:	0f 91       	pop	r16
    c3a2:	ff 90       	pop	r15
    c3a4:	ef 90       	pop	r14
    c3a6:	df 90       	pop	r13
    c3a8:	08 95       	ret

0000c3aa <_ZN7Sd2Card8readStopEv>:
/** End a read multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStop() {
    c3aa:	cf 93       	push	r28
    c3ac:	df 93       	push	r29
    c3ae:	ec 01       	movw	r28, r24
  chipSelectLow();
    c3b0:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_ZN7Sd2Card13chipSelectLowEv>
  if (cardCommand(CMD12, 0)) {
    c3b4:	ce 01       	movw	r24, r28
    c3b6:	6c e0       	ldi	r22, 0x0C	; 12
    c3b8:	20 e0       	ldi	r18, 0x00	; 0
    c3ba:	30 e0       	ldi	r19, 0x00	; 0
    c3bc:	a9 01       	movw	r20, r18
    c3be:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c3c2:	88 23       	and	r24, r24
    c3c4:	39 f0       	breq	.+14     	; 0xc3d4 <_ZN7Sd2Card8readStopEv+0x2a>
    c3c6:	83 e0       	ldi	r24, 0x03	; 3
    c3c8:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c3ca:	ce 01       	movw	r24, r28
    c3cc:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c3d0:	80 e0       	ldi	r24, 0x00	; 0
    c3d2:	04 c0       	rjmp	.+8      	; 0xc3dc <_ZN7Sd2Card8readStopEv+0x32>
  chipSelectLow();
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
    c3d4:	ce 01       	movw	r24, r28
    c3d6:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c3da:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    c3dc:	df 91       	pop	r29
    c3de:	cf 91       	pop	r28
    c3e0:	08 95       	ret

0000c3e2 <_ZN7Sd2Card9readStartEm>:
 * multiple block reads.  SPI chipSelect must be low for the entire sequence.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStart(uint32_t blockNumber) {
    c3e2:	cf 93       	push	r28
    c3e4:	df 93       	push	r29
    c3e6:	ec 01       	movw	r28, r24
    c3e8:	9a 01       	movw	r18, r20
    c3ea:	ab 01       	movw	r20, r22
  SD_TRACE("RS", blockNumber);
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c3ec:	8c 81       	ldd	r24, Y+4	; 0x04
    c3ee:	83 30       	cpi	r24, 0x03	; 3
    c3f0:	39 f0       	breq	.+14     	; 0xc400 <_ZN7Sd2Card9readStartEm+0x1e>
    c3f2:	89 e0       	ldi	r24, 0x09	; 9
    c3f4:	22 0f       	add	r18, r18
    c3f6:	33 1f       	adc	r19, r19
    c3f8:	44 1f       	adc	r20, r20
    c3fa:	55 1f       	adc	r21, r21
    c3fc:	8a 95       	dec	r24
    c3fe:	d1 f7       	brne	.-12     	; 0xc3f4 <_ZN7Sd2Card9readStartEm+0x12>
  if (cardCommand(CMD18, blockNumber)) {
    c400:	ce 01       	movw	r24, r28
    c402:	62 e1       	ldi	r22, 0x12	; 18
    c404:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c408:	88 23       	and	r24, r24
    c40a:	39 f0       	breq	.+14     	; 0xc41a <_ZN7Sd2Card9readStartEm+0x38>
    c40c:	85 e0       	ldi	r24, 0x05	; 5
    c40e:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c410:	ce 01       	movw	r24, r28
    c412:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c416:	80 e0       	ldi	r24, 0x00	; 0
    c418:	04 c0       	rjmp	.+8      	; 0xc422 <_ZN7Sd2Card9readStartEm+0x40>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  chipSelectHigh();
    c41a:	ce 01       	movw	r24, r28
    c41c:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c420:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    c422:	df 91       	pop	r29
    c424:	cf 91       	pop	r28
    c426:	08 95       	ret

0000c428 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readBlock(uint32_t blockNumber, uint8_t* dst) {
    c428:	cf 92       	push	r12
    c42a:	df 92       	push	r13
    c42c:	ef 92       	push	r14
    c42e:	ff 92       	push	r15
    c430:	0f 93       	push	r16
    c432:	1f 93       	push	r17
    c434:	cf 93       	push	r28
    c436:	df 93       	push	r29
    c438:	ec 01       	movw	r28, r24
    c43a:	6a 01       	movw	r12, r20
    c43c:	7b 01       	movw	r14, r22
    c43e:	89 01       	movw	r16, r18
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c440:	8c 81       	ldd	r24, Y+4	; 0x04
    c442:	83 30       	cpi	r24, 0x03	; 3
    c444:	39 f0       	breq	.+14     	; 0xc454 <_ZN7Sd2Card9readBlockEmPh+0x2c>
    c446:	e9 e0       	ldi	r30, 0x09	; 9
    c448:	cc 0c       	add	r12, r12
    c44a:	dd 1c       	adc	r13, r13
    c44c:	ee 1c       	adc	r14, r14
    c44e:	ff 1c       	adc	r15, r15
    c450:	ea 95       	dec	r30
    c452:	d1 f7       	brne	.-12     	; 0xc448 <_ZN7Sd2Card9readBlockEmPh+0x20>
  if (cardCommand(CMD17, blockNumber)) {
    c454:	ce 01       	movw	r24, r28
    c456:	61 e1       	ldi	r22, 0x11	; 17
    c458:	a7 01       	movw	r20, r14
    c45a:	96 01       	movw	r18, r12
    c45c:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c460:	88 23       	and	r24, r24
    c462:	39 f0       	breq	.+14     	; 0xc472 <_ZN7Sd2Card9readBlockEmPh+0x4a>
    c464:	84 e0       	ldi	r24, 0x04	; 4
    c466:	89 83       	std	Y+1, r24	; 0x01
    goto fail;
  }
  return readData(dst, 512);

 fail:
  chipSelectHigh();
    c468:	ce 01       	movw	r24, r28
    c46a:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c46e:	80 e0       	ldi	r24, 0x00	; 0
    c470:	06 c0       	rjmp	.+12     	; 0xc47e <_ZN7Sd2Card9readBlockEmPh+0x56>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD17, blockNumber)) {
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return readData(dst, 512);
    c472:	ce 01       	movw	r24, r28
    c474:	b8 01       	movw	r22, r16
    c476:	40 e0       	ldi	r20, 0x00	; 0
    c478:	52 e0       	ldi	r21, 0x02	; 2
    c47a:	0e 94 82 60 	call	0xc104	; 0xc104 <_ZN7Sd2Card8readDataEPhj>

 fail:
  chipSelectHigh();
  return false;
}
    c47e:	df 91       	pop	r29
    c480:	cf 91       	pop	r28
    c482:	1f 91       	pop	r17
    c484:	0f 91       	pop	r16
    c486:	ff 90       	pop	r15
    c488:	ef 90       	pop	r14
    c48a:	df 90       	pop	r13
    c48c:	cf 90       	pop	r12
    c48e:	08 95       	ret

0000c490 <_ZN7Sd2Card4initEi>:
 */

#ifndef ARBITROS_CMP
bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
#else
bool Sd2Card::init( t_SPIHNDL t_handle) {
    c490:	8f 92       	push	r8
    c492:	9f 92       	push	r9
    c494:	af 92       	push	r10
    c496:	bf 92       	push	r11
    c498:	cf 92       	push	r12
    c49a:	df 92       	push	r13
    c49c:	ef 92       	push	r14
    c49e:	ff 92       	push	r15
    c4a0:	0f 93       	push	r16
    c4a2:	1f 93       	push	r17
    c4a4:	cf 93       	push	r28
    c4a6:	df 93       	push	r29
    c4a8:	0f 92       	push	r0
    c4aa:	0f 92       	push	r0
    c4ac:	cd b7       	in	r28, 0x3d	; 61
    c4ae:	de b7       	in	r29, 0x3e	; 62
    c4b0:	8c 01       	movw	r16, r24
    c4b2:	69 83       	std	Y+1, r22	; 0x01
    c4b4:	7a 83       	std	Y+2, r23	; 0x02
#endif

  errorCode_ = type_ = 0;
    c4b6:	fc 01       	movw	r30, r24
    c4b8:	14 82       	std	Z+4, r1	; 0x04
    c4ba:	11 82       	std	Z+1, r1	; 0x01
#ifndef ARBITROS_CMP
  chipSelectPin_ = chipSelectPin;
#endif
  // 16-bit init start time allows over a minute
  unsigned long t0 = millis();
    c4bc:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
  uint32_t arg;

#ifdef ARBITROS_CMP
  gt_spiHandle = t_handle;
    c4c0:	89 81       	ldd	r24, Y+1	; 0x01
    c4c2:	9a 81       	ldd	r25, Y+2	; 0x02
    c4c4:	80 93 98 24 	sts	0x2498, r24
    c4c8:	90 93 99 24 	sts	0x2499, r25

  b_bTransComplete = false;
    c4cc:	10 92 9a 24 	sts	0x249A, r1
  hal_spiConfCallBack( gt_spiHandle,
                       &blockTransComplete);
    c4d0:	80 91 98 24 	lds	r24, 0x2498
    c4d4:	90 91 99 24 	lds	r25, 0x2499
    c4d8:	60 ee       	ldi	r22, 0xE0	; 224
    c4da:	7f e5       	ldi	r23, 0x5F	; 95
    c4dc:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <hal_spiConfCallBack>
  // set SCK rate for initialization commands
  spiRate_ = SPI_SD_INIT_RATE;
  spiInit(spiRate_);
#endif

  chipSelectHigh();
    c4e0:	c8 01       	movw	r24, r16
    c4e2:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
    c4e6:	ba e0       	ldi	r27, 0x0A	; 10
    c4e8:	cb 2e       	mov	r12, r27

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    c4ea:	8f ef       	ldi	r24, 0xFF	; 255
    c4ec:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
    c4f0:	ca 94       	dec	r12
    c4f2:	d9 f7       	brne	.-10     	; 0xc4ea <_ZN7Sd2Card4initEi+0x5a>

  // command to go idle in SPI mode
  t0 = millis();
    c4f4:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c4f8:	6b 01       	movw	r12, r22
    c4fa:	7c 01       	movw	r14, r24
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    c4fc:	12 c0       	rjmp	.+36     	; 0xc522 <_ZN7Sd2Card4initEi+0x92>
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c4fe:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c502:	a7 01       	movw	r20, r14
    c504:	96 01       	movw	r18, r12
    c506:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c50a:	dc 01       	movw	r26, r24
    c50c:	cb 01       	movw	r24, r22
    c50e:	81 3d       	cpi	r24, 0xD1	; 209
    c510:	f7 e0       	ldi	r31, 0x07	; 7
    c512:	9f 07       	cpc	r25, r31
    c514:	f0 e0       	ldi	r31, 0x00	; 0
    c516:	af 07       	cpc	r26, r31
    c518:	f0 e0       	ldi	r31, 0x00	; 0
    c51a:	bf 07       	cpc	r27, r31
    c51c:	10 f0       	brcs	.+4      	; 0xc522 <_ZN7Sd2Card4initEi+0x92>
    c51e:	81 e0       	ldi	r24, 0x01	; 1
    c520:	86 c0       	rjmp	.+268    	; 0xc62e <_ZN7Sd2Card4initEi+0x19e>
  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  // command to go idle in SPI mode
  t0 = millis();
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    c522:	c8 01       	movw	r24, r16
    c524:	60 e0       	ldi	r22, 0x00	; 0
    c526:	20 e0       	ldi	r18, 0x00	; 0
    c528:	30 e0       	ldi	r19, 0x00	; 0
    c52a:	a9 01       	movw	r20, r18
    c52c:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c530:	81 30       	cpi	r24, 0x01	; 1
    c532:	29 f7       	brne	.-54     	; 0xc4fe <_ZN7Sd2Card4initEi+0x6e>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
#if USE_SD_CRC
  if (cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    c534:	c8 01       	movw	r24, r16
    c536:	6b e3       	ldi	r22, 0x3B	; 59
    c538:	21 e0       	ldi	r18, 0x01	; 1
    c53a:	30 e0       	ldi	r19, 0x00	; 0
    c53c:	40 e0       	ldi	r20, 0x00	; 0
    c53e:	50 e0       	ldi	r21, 0x00	; 0
    c540:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c544:	81 30       	cpi	r24, 0x01	; 1
    c546:	11 f0       	breq	.+4      	; 0xc54c <_ZN7Sd2Card4initEi+0xbc>
    c548:	8a e1       	ldi	r24, 0x1A	; 26
    c54a:	71 c0       	rjmp	.+226    	; 0xc62e <_ZN7Sd2Card4initEi+0x19e>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  t0 = millis();
    c54c:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c550:	6b 01       	movw	r12, r22
    c552:	7c 01       	movw	r14, r24
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    c554:	c8 01       	movw	r24, r16
    c556:	68 e0       	ldi	r22, 0x08	; 8
    c558:	2a ea       	ldi	r18, 0xAA	; 170
    c55a:	31 e0       	ldi	r19, 0x01	; 1
    c55c:	40 e0       	ldi	r20, 0x00	; 0
    c55e:	50 e0       	ldi	r21, 0x00	; 0
    c560:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c564:	85 30       	cpi	r24, 0x05	; 5
    c566:	19 f4       	brne	.+6      	; 0xc56e <_ZN7Sd2Card4initEi+0xde>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void type(uint8_t value) {type_ = value;}
    c568:	81 e0       	ldi	r24, 0x01	; 1
    c56a:	f8 01       	movw	r30, r16
    c56c:	0b c0       	rjmp	.+22     	; 0xc584 <_ZN7Sd2Card4initEi+0xf4>
    c56e:	a4 e0       	ldi	r26, 0x04	; 4
    c570:	8a 2e       	mov	r8, r26
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    c572:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c576:	f8 01       	movw	r30, r16
    c578:	83 83       	std	Z+3, r24	; 0x03
    c57a:	8a 94       	dec	r8
    c57c:	d1 f7       	brne	.-12     	; 0xc572 <_ZN7Sd2Card4initEi+0xe2>
    if (status_ == 0XAA) {
    c57e:	8a 3a       	cpi	r24, 0xAA	; 170
    c580:	39 f4       	brne	.+14     	; 0xc590 <_ZN7Sd2Card4initEi+0x100>
    c582:	82 e0       	ldi	r24, 0x02	; 2
    c584:	84 83       	std	Z+4, r24	; 0x04
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c586:	f8 01       	movw	r30, r16
    c588:	84 81       	ldd	r24, Z+4	; 0x04
    c58a:	82 30       	cpi	r24, 0x02	; 2
    c58c:	c9 f4       	brne	.+50     	; 0xc5c0 <_ZN7Sd2Card4initEi+0x130>
    c58e:	12 c0       	rjmp	.+36     	; 0xc5b4 <_ZN7Sd2Card4initEi+0x124>
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c590:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c594:	a7 01       	movw	r20, r14
    c596:	96 01       	movw	r18, r12
    c598:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c59c:	dc 01       	movw	r26, r24
    c59e:	cb 01       	movw	r24, r22
    c5a0:	81 3d       	cpi	r24, 0xD1	; 209
    c5a2:	f7 e0       	ldi	r31, 0x07	; 7
    c5a4:	9f 07       	cpc	r25, r31
    c5a6:	f0 e0       	ldi	r31, 0x00	; 0
    c5a8:	af 07       	cpc	r26, r31
    c5aa:	f0 e0       	ldi	r31, 0x00	; 0
    c5ac:	bf 07       	cpc	r27, r31
    c5ae:	90 f2       	brcs	.-92     	; 0xc554 <_ZN7Sd2Card4initEi+0xc4>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c5b0:	82 e0       	ldi	r24, 0x02	; 2
    c5b2:	3d c0       	rjmp	.+122    	; 0xc62e <_ZN7Sd2Card4initEi+0x19e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c5b4:	c1 2c       	mov	r12, r1
    c5b6:	d1 2c       	mov	r13, r1
    c5b8:	e1 2c       	mov	r14, r1
    c5ba:	f0 e4       	ldi	r31, 0x40	; 64
    c5bc:	ff 2e       	mov	r15, r31
    c5be:	03 c0       	rjmp	.+6      	; 0xc5c6 <_ZN7Sd2Card4initEi+0x136>
    c5c0:	cc 24       	eor	r12, r12
    c5c2:	dd 24       	eor	r13, r13
    c5c4:	76 01       	movw	r14, r12

  t0 = millis();
    c5c6:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c5ca:	4b 01       	movw	r8, r22
    c5cc:	5c 01       	movw	r10, r24
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c5ce:	12 c0       	rjmp	.+36     	; 0xc5f4 <_ZN7Sd2Card4initEi+0x164>
    // check for timeout
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c5d0:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c5d4:	a5 01       	movw	r20, r10
    c5d6:	94 01       	movw	r18, r8
    c5d8:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c5dc:	dc 01       	movw	r26, r24
    c5de:	cb 01       	movw	r24, r22
    c5e0:	81 3d       	cpi	r24, 0xD1	; 209
    c5e2:	f7 e0       	ldi	r31, 0x07	; 7
    c5e4:	9f 07       	cpc	r25, r31
    c5e6:	f0 e0       	ldi	r31, 0x00	; 0
    c5e8:	af 07       	cpc	r26, r31
    c5ea:	f0 e0       	ldi	r31, 0x00	; 0
    c5ec:	bf 07       	cpc	r27, r31
    c5ee:	10 f0       	brcs	.+4      	; 0xc5f4 <_ZN7Sd2Card4initEi+0x164>
    c5f0:	8a e0       	ldi	r24, 0x0A	; 10
    c5f2:	1d c0       	rjmp	.+58     	; 0xc62e <_ZN7Sd2Card4initEi+0x19e>
  uint8_t spiRate_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c5f4:	c8 01       	movw	r24, r16
    c5f6:	67 e3       	ldi	r22, 0x37	; 55
    c5f8:	20 e0       	ldi	r18, 0x00	; 0
    c5fa:	30 e0       	ldi	r19, 0x00	; 0
    c5fc:	a9 01       	movw	r20, r18
    c5fe:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    c602:	c8 01       	movw	r24, r16
    c604:	69 e2       	ldi	r22, 0x29	; 41
    c606:	a7 01       	movw	r20, r14
    c608:	96 01       	movw	r18, r12
    c60a:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  t0 = millis();
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c60e:	88 23       	and	r24, r24
    c610:	f9 f6       	brne	.-66     	; 0xc5d0 <_ZN7Sd2Card4initEi+0x140>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c612:	f8 01       	movw	r30, r16
    c614:	84 81       	ldd	r24, Z+4	; 0x04
    c616:	82 30       	cpi	r24, 0x02	; 2
    c618:	f9 f4       	brne	.+62     	; 0xc658 <_ZN7Sd2Card4initEi+0x1c8>
    if (cardCommand(CMD58, 0)) {
    c61a:	c8 01       	movw	r24, r16
    c61c:	6a e3       	ldi	r22, 0x3A	; 58
    c61e:	20 e0       	ldi	r18, 0x00	; 0
    c620:	30 e0       	ldi	r19, 0x00	; 0
    c622:	a9 01       	movw	r20, r18
    c624:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c628:	88 23       	and	r24, r24
    c62a:	41 f0       	breq	.+16     	; 0xc63c <_ZN7Sd2Card4initEi+0x1ac>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c62c:	88 e0       	ldi	r24, 0x08	; 8
    c62e:	f8 01       	movw	r30, r16
    c630:	81 83       	std	Z+1, r24	; 0x01
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    c632:	c8 01       	movw	r24, r16
    c634:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c638:	80 e0       	ldi	r24, 0x00	; 0
    c63a:	1f c0       	rjmp	.+62     	; 0xc67a <_ZN7Sd2Card4initEi+0x1ea>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    c63c:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c640:	80 7c       	andi	r24, 0xC0	; 192
    c642:	80 3c       	cpi	r24, 0xC0	; 192
    c644:	19 f4       	brne	.+6      	; 0xc64c <_ZN7Sd2Card4initEi+0x1bc>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void type(uint8_t value) {type_ = value;}
    c646:	83 e0       	ldi	r24, 0x03	; 3
    c648:	f8 01       	movw	r30, r16
    c64a:	84 83       	std	Z+4, r24	; 0x04
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    c64c:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c650:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c654:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
  }
  chipSelectHigh();
    c658:	c8 01       	movw	r24, r16
    c65a:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
#ifndef SOFTWARE_SPI
#ifndef ARBITROS_CMP
  return setSckRate(sckRateID);
#else
     if( hal_spiSetBaudRate( gt_spiHandle, 8000000) < 0)
    c65e:	80 91 98 24 	lds	r24, 0x2498
    c662:	90 91 99 24 	lds	r25, 0x2499
    c666:	40 e0       	ldi	r20, 0x00	; 0
    c668:	52 e1       	ldi	r21, 0x12	; 18
    c66a:	6a e7       	ldi	r22, 0x7A	; 122
    c66c:	70 e0       	ldi	r23, 0x00	; 0
    c66e:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <hal_spiSetBaudRate>
 */

#ifndef ARBITROS_CMP
bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
#else
bool Sd2Card::init( t_SPIHNDL t_handle) {
    c672:	80 95       	com	r24
    c674:	88 1f       	adc	r24, r24
    c676:	88 27       	eor	r24, r24
    c678:	88 1f       	adc	r24, r24
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    c67a:	0f 90       	pop	r0
    c67c:	0f 90       	pop	r0
    c67e:	df 91       	pop	r29
    c680:	cf 91       	pop	r28
    c682:	1f 91       	pop	r17
    c684:	0f 91       	pop	r16
    c686:	ff 90       	pop	r15
    c688:	ef 90       	pop	r14
    c68a:	df 90       	pop	r13
    c68c:	cf 90       	pop	r12
    c68e:	bf 90       	pop	r11
    c690:	af 90       	pop	r10
    c692:	9f 90       	pop	r9
    c694:	8f 90       	pop	r8
    c696:	08 95       	ret

0000c698 <_ZN7Sd2Card9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    c698:	af 92       	push	r10
    c69a:	bf 92       	push	r11
    c69c:	cf 92       	push	r12
    c69e:	df 92       	push	r13
    c6a0:	ef 92       	push	r14
    c6a2:	ff 92       	push	r15
    c6a4:	0f 93       	push	r16
    c6a6:	1f 93       	push	r17
    c6a8:	cf 93       	push	r28
    c6aa:	df 93       	push	r29
    c6ac:	0f 92       	push	r0
    c6ae:	0f 92       	push	r0
    c6b0:	cd b7       	in	r28, 0x3d	; 61
    c6b2:	de b7       	in	r29, 0x3e	; 62
    c6b4:	8c 01       	movw	r16, r24
    c6b6:	e6 2e       	mov	r14, r22
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
    c6b8:	ca 01       	movw	r24, r20
    c6ba:	60 e0       	ldi	r22, 0x00	; 0
    c6bc:	72 e0       	ldi	r23, 0x02	; 2
    c6be:	49 83       	std	Y+1, r20	; 0x01
    c6c0:	5a 83       	std	Y+2, r21	; 0x02
    c6c2:	0e 94 e4 5f 	call	0xbfc8	; 0xbfc8 <_ZL9CRC_CCITTPKhj>
    c6c6:	5c 01       	movw	r10, r24
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC

  spiSend(token);
    c6c8:	8e 2d       	mov	r24, r14
    c6ca:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
  unsigned long t0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    c6ce:	0e 94 a6 9c 	call	0x1394c	; 0x1394c <arb_sysTimerEnabled>
    c6d2:	49 81       	ldd	r20, Y+1	; 0x01
    c6d4:	5a 81       	ldd	r21, Y+2	; 0x02
    c6d6:	88 23       	and	r24, r24
    c6d8:	21 f4       	brne	.+8      	; 0xc6e2 <_ZN7Sd2Card9writeDataEhPKh+0x4a>
    c6da:	6a 01       	movw	r12, r20
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    c6dc:	ee 24       	eor	r14, r14
    c6de:	ff 24       	eor	r15, r15
    c6e0:	04 c0       	rjmp	.+8      	; 0xc6ea <_ZN7Sd2Card9writeDataEhPKh+0x52>
  unsigned long t0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    c6e2:	0f b6       	in	r0, 0x3f	; 63
    c6e4:	07 fe       	sbrs	r0, 7
    c6e6:	f9 cf       	rjmp	.-14     	; 0xc6da <_ZN7Sd2Card9writeDataEhPKh+0x42>
    c6e8:	4a c0       	rjmp	.+148    	; 0xc77e <_ZN7Sd2Card9writeDataEhPKh+0xe6>
  {
    for( uint32_t i = 0; i < n; i++)
      hal_spiWriteByte( gt_spiHandle,
                        buf[i]);
    c6ea:	80 91 98 24 	lds	r24, 0x2498
    c6ee:	90 91 99 24 	lds	r25, 0x2499
    c6f2:	f6 01       	movw	r30, r12
    c6f4:	61 91       	ld	r22, Z+
    c6f6:	6f 01       	movw	r12, r30
    c6f8:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <hal_spiWriteByte>
    c6fc:	08 94       	sec
    c6fe:	e1 1c       	adc	r14, r1
    c700:	f1 1c       	adc	r15, r1
  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
  {
    for( uint32_t i = 0; i < n; i++)
    c702:	f0 e0       	ldi	r31, 0x00	; 0
    c704:	ef 16       	cp	r14, r31
    c706:	f2 e0       	ldi	r31, 0x02	; 2
    c708:	ff 06       	cpc	r15, r31
    c70a:	79 f7       	brne	.-34     	; 0xc6ea <_ZN7Sd2Card9writeDataEhPKh+0x52>
    c70c:	16 c0       	rjmp	.+44     	; 0xc73a <_ZN7Sd2Card9writeDataEhPKh+0xa2>

     t0 = millis();

     while( b_bTransComplete == false)
     {
        if(  millisDelta( millis(), t0) > (SD_WRITE_TIMEOUT*5))
    c70e:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c712:	a7 01       	movw	r20, r14
    c714:	96 01       	movw	r18, r12
    c716:	0e 94 35 60 	call	0xc06a	; 0xc06a <_Z11millisDeltamm>
    c71a:	dc 01       	movw	r26, r24
    c71c:	cb 01       	movw	r24, r22
    c71e:	89 3b       	cpi	r24, 0xB9	; 185
    c720:	2b e0       	ldi	r18, 0x0B	; 11
    c722:	92 07       	cpc	r25, r18
    c724:	20 e0       	ldi	r18, 0x00	; 0
    c726:	a2 07       	cpc	r26, r18
    c728:	20 e0       	ldi	r18, 0x00	; 0
    c72a:	b2 07       	cpc	r27, r18
    c72c:	20 f4       	brcc	.+8      	; 0xc736 <_ZN7Sd2Card9writeDataEhPKh+0x9e>
                        (int8_t *)buf,
                        (uint16_t)n);

     t0 = millis();

     while( b_bTransComplete == false)
    c72e:	80 91 9a 24 	lds	r24, 0x249A
    c732:	88 23       	and	r24, r24
    c734:	61 f3       	breq	.-40     	; 0xc70e <_ZN7Sd2Card9writeDataEhPKh+0x76>
        {
           break;
        }
     }

     b_bTransComplete = false;
    c736:	10 92 9a 24 	sts	0x249A, r1
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC

  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
    c73a:	8b 2d       	mov	r24, r11
    c73c:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
  spiSend(crc & 0XFF);
    c740:	8a 2d       	mov	r24, r10
    c742:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>

  status_ = spiRec();
    c746:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c74a:	f8 01       	movw	r30, r16
    c74c:	83 83       	std	Z+3, r24	; 0x03
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    c74e:	8f 71       	andi	r24, 0x1F	; 31
    c750:	85 30       	cpi	r24, 0x05	; 5
    c752:	39 f0       	breq	.+14     	; 0xc762 <_ZN7Sd2Card9writeDataEhPKh+0xca>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c754:	83 e1       	ldi	r24, 0x13	; 19
    c756:	81 83       	std	Z+1, r24	; 0x01
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    c758:	c8 01       	movw	r24, r16
    c75a:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c75e:	80 e0       	ldi	r24, 0x00	; 0
    c760:	01 c0       	rjmp	.+2      	; 0xc764 <_ZN7Sd2Card9writeDataEhPKh+0xcc>
  status_ = spiRec();
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
    c762:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    c764:	0f 90       	pop	r0
    c766:	0f 90       	pop	r0
    c768:	df 91       	pop	r29
    c76a:	cf 91       	pop	r28
    c76c:	1f 91       	pop	r17
    c76e:	0f 91       	pop	r16
    c770:	ff 90       	pop	r15
    c772:	ef 90       	pop	r14
    c774:	df 90       	pop	r13
    c776:	cf 90       	pop	r12
    c778:	bf 90       	pop	r11
    c77a:	af 90       	pop	r10
    c77c:	08 95       	ret
  {

     hal_spiWriteBlock( gt_spiHandle,
                        false,
                        (int8_t *)buf,
                        (uint16_t)n);
    c77e:	80 91 98 24 	lds	r24, 0x2498
    c782:	90 91 99 24 	lds	r25, 0x2499
    c786:	60 e0       	ldi	r22, 0x00	; 0
    c788:	20 e0       	ldi	r18, 0x00	; 0
    c78a:	32 e0       	ldi	r19, 0x02	; 2
    c78c:	0e 94 a3 38 	call	0x7146	; 0x7146 <hal_spiWriteBlock>

     t0 = millis();
    c790:	0e 94 2f 60 	call	0xc05e	; 0xc05e <millis>
    c794:	6b 01       	movw	r12, r22
    c796:	7c 01       	movw	r14, r24
    c798:	ca cf       	rjmp	.-108    	; 0xc72e <_ZN7Sd2Card9writeDataEhPKh+0x96>

0000c79a <_ZN7Sd2Card9writeDataEPKh>:
/** Write one data block in a multiple block write sequence
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeData(const uint8_t* src) {
    c79a:	0f 93       	push	r16
    c79c:	1f 93       	push	r17
    c79e:	cf 93       	push	r28
    c7a0:	df 93       	push	r29
    c7a2:	ec 01       	movw	r28, r24
    c7a4:	8b 01       	movw	r16, r22
  chipSelectLow();
    c7a6:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_ZN7Sd2Card13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    c7aa:	ce 01       	movw	r24, r28
    c7ac:	68 e5       	ldi	r22, 0x58	; 88
    c7ae:	72 e0       	ldi	r23, 0x02	; 2
    c7b0:	0e 94 3b 61 	call	0xc276	; 0xc276 <_ZN7Sd2Card11waitNotBusyEj>
    c7b4:	88 23       	and	r24, r24
    c7b6:	61 f0       	breq	.+24     	; 0xc7d0 <_ZN7Sd2Card9writeDataEPKh+0x36>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    c7b8:	ce 01       	movw	r24, r28
    c7ba:	6c ef       	ldi	r22, 0xFC	; 252
    c7bc:	a8 01       	movw	r20, r16
    c7be:	0e 94 4c 63 	call	0xc698	; 0xc698 <_ZN7Sd2Card9writeDataEhPKh>
    c7c2:	88 23       	and	r24, r24
    c7c4:	29 f0       	breq	.+10     	; 0xc7d0 <_ZN7Sd2Card9writeDataEPKh+0x36>
  chipSelectHigh();
    c7c6:	ce 01       	movw	r24, r28
    c7c8:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c7cc:	81 e0       	ldi	r24, 0x01	; 1
    c7ce:	06 c0       	rjmp	.+12     	; 0xc7dc <_ZN7Sd2Card9writeDataEPKh+0x42>
    c7d0:	85 e1       	ldi	r24, 0x15	; 21
    c7d2:	89 83       	std	Y+1, r24	; 0x01

 fail:
  error(SD_CARD_ERROR_WRITE_MULTIPLE);
  chipSelectHigh();
    c7d4:	ce 01       	movw	r24, r28
    c7d6:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c7da:	80 e0       	ldi	r24, 0x00	; 0
}
    c7dc:	df 91       	pop	r29
    c7de:	cf 91       	pop	r28
    c7e0:	1f 91       	pop	r17
    c7e2:	0f 91       	pop	r16
    c7e4:	08 95       	ret

0000c7e6 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    c7e6:	cf 92       	push	r12
    c7e8:	df 92       	push	r13
    c7ea:	ef 92       	push	r14
    c7ec:	ff 92       	push	r15
    c7ee:	0f 93       	push	r16
    c7f0:	1f 93       	push	r17
    c7f2:	cf 93       	push	r28
    c7f4:	df 93       	push	r29
    c7f6:	ec 01       	movw	r28, r24
    c7f8:	6a 01       	movw	r12, r20
    c7fa:	7b 01       	movw	r14, r22
    c7fc:	89 01       	movw	r16, r18
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c7fe:	8c 81       	ldd	r24, Y+4	; 0x04
    c800:	83 30       	cpi	r24, 0x03	; 3
    c802:	39 f0       	breq	.+14     	; 0xc812 <_ZN7Sd2Card10writeBlockEmPKh+0x2c>
    c804:	89 e0       	ldi	r24, 0x09	; 9
    c806:	cc 0c       	add	r12, r12
    c808:	dd 1c       	adc	r13, r13
    c80a:	ee 1c       	adc	r14, r14
    c80c:	ff 1c       	adc	r15, r15
    c80e:	8a 95       	dec	r24
    c810:	d1 f7       	brne	.-12     	; 0xc806 <_ZN7Sd2Card10writeBlockEmPKh+0x20>
  if (cardCommand(CMD24, blockNumber)) {
    c812:	ce 01       	movw	r24, r28
    c814:	68 e1       	ldi	r22, 0x18	; 24
    c816:	a7 01       	movw	r20, r14
    c818:	96 01       	movw	r18, r12
    c81a:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c81e:	88 23       	and	r24, r24
    c820:	11 f0       	breq	.+4      	; 0xc826 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    c822:	86 e0       	ldi	r24, 0x06	; 6
    c824:	1e c0       	rjmp	.+60     	; 0xc862 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    c826:	ce 01       	movw	r24, r28
    c828:	6e ef       	ldi	r22, 0xFE	; 254
    c82a:	a8 01       	movw	r20, r16
    c82c:	0e 94 4c 63 	call	0xc698	; 0xc698 <_ZN7Sd2Card9writeDataEhPKh>
    c830:	88 23       	and	r24, r24
    c832:	c1 f0       	breq	.+48     	; 0xc864 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c834:	ce 01       	movw	r24, r28
    c836:	68 e5       	ldi	r22, 0x58	; 88
    c838:	72 e0       	ldi	r23, 0x02	; 2
    c83a:	0e 94 3b 61 	call	0xc276	; 0xc276 <_ZN7Sd2Card11waitNotBusyEj>
    c83e:	88 23       	and	r24, r24
    c840:	11 f4       	brne	.+4      	; 0xc846 <_ZN7Sd2Card10writeBlockEmPKh+0x60>
    c842:	87 e1       	ldi	r24, 0x17	; 23
    c844:	0e c0       	rjmp	.+28     	; 0xc862 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    c846:	ce 01       	movw	r24, r28
    c848:	6d e0       	ldi	r22, 0x0D	; 13
    c84a:	20 e0       	ldi	r18, 0x00	; 0
    c84c:	30 e0       	ldi	r19, 0x00	; 0
    c84e:	a9 01       	movw	r20, r18
    c850:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c854:	88 23       	and	r24, r24
    c856:	21 f4       	brne	.+8      	; 0xc860 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>
    c858:	0e 94 1c 60 	call	0xc038	; 0xc038 <_ZL6spiRecv>
    c85c:	88 23       	and	r24, r24
    c85e:	79 f0       	breq	.+30     	; 0xc87e <_ZN7Sd2Card10writeBlockEmPKh+0x98>
    c860:	86 e1       	ldi	r24, 0x16	; 22
    c862:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c864:	ce 01       	movw	r24, r28
    c866:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c86a:	80 e0       	ldi	r24, 0x00	; 0
}
    c86c:	df 91       	pop	r29
    c86e:	cf 91       	pop	r28
    c870:	1f 91       	pop	r17
    c872:	0f 91       	pop	r16
    c874:	ff 90       	pop	r15
    c876:	ef 90       	pop	r14
    c878:	df 90       	pop	r13
    c87a:	cf 90       	pop	r12
    c87c:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    c87e:	ce 01       	movw	r24, r28
    c880:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c884:	81 e0       	ldi	r24, 0x01	; 1
    c886:	f2 cf       	rjmp	.-28     	; 0xc86c <_ZN7Sd2Card10writeBlockEmPKh+0x86>

0000c888 <_ZN7Sd2Card10writeStartEmm>:
 * for optimized multiple block writes.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
    c888:	8f 92       	push	r8
    c88a:	9f 92       	push	r9
    c88c:	af 92       	push	r10
    c88e:	bf 92       	push	r11
    c890:	cf 92       	push	r12
    c892:	df 92       	push	r13
    c894:	ef 92       	push	r14
    c896:	ff 92       	push	r15
    c898:	0f 93       	push	r16
    c89a:	1f 93       	push	r17
    c89c:	cf 93       	push	r28
    c89e:	df 93       	push	r29
    c8a0:	ec 01       	movw	r28, r24
    c8a2:	6a 01       	movw	r12, r20
    c8a4:	7b 01       	movw	r14, r22
    c8a6:	48 01       	movw	r8, r16
    c8a8:	59 01       	movw	r10, r18
  uint8_t spiRate_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c8aa:	67 e3       	ldi	r22, 0x37	; 55
    c8ac:	20 e0       	ldi	r18, 0x00	; 0
    c8ae:	30 e0       	ldi	r19, 0x00	; 0
    c8b0:	a9 01       	movw	r20, r18
    c8b2:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    c8b6:	ce 01       	movw	r24, r28
    c8b8:	67 e1       	ldi	r22, 0x17	; 23
    c8ba:	a5 01       	movw	r20, r10
    c8bc:	94 01       	movw	r18, r8
    c8be:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
    c8c2:	88 23       	and	r24, r24
    c8c4:	11 f0       	breq	.+4      	; 0xc8ca <_ZN7Sd2Card10writeStartEmm+0x42>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c8c6:	89 e0       	ldi	r24, 0x09	; 9
    c8c8:	13 c0       	rjmp	.+38     	; 0xc8f0 <_ZN7Sd2Card10writeStartEmm+0x68>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c8ca:	8c 81       	ldd	r24, Y+4	; 0x04
    c8cc:	83 30       	cpi	r24, 0x03	; 3
    c8ce:	39 f0       	breq	.+14     	; 0xc8de <_ZN7Sd2Card10writeStartEmm+0x56>
    c8d0:	99 e0       	ldi	r25, 0x09	; 9
    c8d2:	cc 0c       	add	r12, r12
    c8d4:	dd 1c       	adc	r13, r13
    c8d6:	ee 1c       	adc	r14, r14
    c8d8:	ff 1c       	adc	r15, r15
    c8da:	9a 95       	dec	r25
    c8dc:	d1 f7       	brne	.-12     	; 0xc8d2 <_ZN7Sd2Card10writeStartEmm+0x4a>
  if (cardCommand(CMD25, blockNumber)) {
    c8de:	ce 01       	movw	r24, r28
    c8e0:	69 e1       	ldi	r22, 0x19	; 25
    c8e2:	a7 01       	movw	r20, r14
    c8e4:	96 01       	movw	r18, r12
    c8e6:	0e 94 68 61 	call	0xc2d0	; 0xc2d0 <_ZN7Sd2Card11cardCommandEhm>
    c8ea:	88 23       	and	r24, r24
    c8ec:	39 f0       	breq	.+14     	; 0xc8fc <_ZN7Sd2Card10writeStartEmm+0x74>
    c8ee:	87 e0       	ldi	r24, 0x07	; 7
    c8f0:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c8f2:	ce 01       	movw	r24, r28
    c8f4:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c8f8:	80 e0       	ldi	r24, 0x00	; 0
    c8fa:	04 c0       	rjmp	.+8      	; 0xc904 <_ZN7Sd2Card10writeStartEmm+0x7c>
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  chipSelectHigh();
    c8fc:	ce 01       	movw	r24, r28
    c8fe:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c902:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    c904:	df 91       	pop	r29
    c906:	cf 91       	pop	r28
    c908:	1f 91       	pop	r17
    c90a:	0f 91       	pop	r16
    c90c:	ff 90       	pop	r15
    c90e:	ef 90       	pop	r14
    c910:	df 90       	pop	r13
    c912:	cf 90       	pop	r12
    c914:	bf 90       	pop	r11
    c916:	af 90       	pop	r10
    c918:	9f 90       	pop	r9
    c91a:	8f 90       	pop	r8
    c91c:	08 95       	ret

0000c91e <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStop() {
    c91e:	cf 93       	push	r28
    c920:	df 93       	push	r29
    c922:	ec 01       	movw	r28, r24
  chipSelectLow();
    c924:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_ZN7Sd2Card13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    c928:	ce 01       	movw	r24, r28
    c92a:	68 e5       	ldi	r22, 0x58	; 88
    c92c:	72 e0       	ldi	r23, 0x02	; 2
    c92e:	0e 94 3b 61 	call	0xc276	; 0xc276 <_ZN7Sd2Card11waitNotBusyEj>
    c932:	88 23       	and	r24, r24
    c934:	79 f0       	breq	.+30     	; 0xc954 <_ZN7Sd2Card9writeStopEv+0x36>
  spiSend(STOP_TRAN_TOKEN);
    c936:	8d ef       	ldi	r24, 0xFD	; 253
    c938:	0e 94 13 60 	call	0xc026	; 0xc026 <_ZL7spiSendh>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    c93c:	ce 01       	movw	r24, r28
    c93e:	68 e5       	ldi	r22, 0x58	; 88
    c940:	72 e0       	ldi	r23, 0x02	; 2
    c942:	0e 94 3b 61 	call	0xc276	; 0xc276 <_ZN7Sd2Card11waitNotBusyEj>
    c946:	88 23       	and	r24, r24
    c948:	29 f0       	breq	.+10     	; 0xc954 <_ZN7Sd2Card9writeStopEv+0x36>
  chipSelectHigh();
    c94a:	ce 01       	movw	r24, r28
    c94c:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    c950:	81 e0       	ldi	r24, 0x01	; 1
    c952:	06 c0       	rjmp	.+12     	; 0xc960 <_ZN7Sd2Card9writeStopEv+0x42>
    c954:	82 e1       	ldi	r24, 0x12	; 18
    c956:	89 83       	std	Y+1, r24	; 0x01

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
    c958:	ce 01       	movw	r24, r28
    c95a:	0e 94 6f 60 	call	0xc0de	; 0xc0de <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    c95e:	80 e0       	ldi	r24, 0x00	; 0
}
    c960:	df 91       	pop	r29
    c962:	cf 91       	pop	r28
    c964:	08 95       	ret

0000c966 <_ZL7print2uP5Printh>:
    w++;
  }
}
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(Print* pr, uint8_t v) {
    c966:	1f 93       	push	r17
    c968:	cf 93       	push	r28
    c96a:	df 93       	push	r29
    c96c:	ec 01       	movw	r28, r24
    c96e:	16 2f       	mov	r17, r22
  if (v < 10) pr->write('0');
    c970:	6a 30       	cpi	r22, 0x0A	; 10
    c972:	38 f4       	brcc	.+14     	; 0xc982 <_ZL7print2uP5Printh+0x1c>
    c974:	e8 81       	ld	r30, Y
    c976:	f9 81       	ldd	r31, Y+1	; 0x01
    c978:	01 90       	ld	r0, Z+
    c97a:	f0 81       	ld	r31, Z
    c97c:	e0 2d       	mov	r30, r0
    c97e:	60 e3       	ldi	r22, 0x30	; 48
    c980:	19 95       	eicall
  pr->print(v, DEC);
    c982:	ce 01       	movw	r24, r28
    c984:	61 2f       	mov	r22, r17
    c986:	4a e0       	ldi	r20, 0x0A	; 10
    c988:	50 e0       	ldi	r21, 0x00	; 0
    c98a:	0e 94 c7 5f 	call	0xbf8e	; 0xbf8e <_ZN5Print5printEhi>
}
    c98e:	df 91       	pop	r29
    c990:	cf 91       	pop	r28
    c992:	1f 91       	pop	r17
    c994:	08 95       	ret

0000c996 <_ZN10SdBaseFile10addClusterEv>:
SdBaseFile* SdBaseFile::cwd_ = 0;
// callback function for date/time
void (*SdBaseFile::dateTime_)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// add a cluster to a file
bool SdBaseFile::addCluster() {
    c996:	cf 93       	push	r28
    c998:	df 93       	push	r29
    c99a:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) {
    c99c:	9c 01       	movw	r18, r24
    c99e:	29 5f       	subi	r18, 0xF9	; 249
    c9a0:	3f 4f       	sbci	r19, 0xFF	; 255
    c9a2:	8d 81       	ldd	r24, Y+5	; 0x05
    c9a4:	9e 81       	ldd	r25, Y+6	; 0x06
    c9a6:	41 e0       	ldi	r20, 0x01	; 1
    c9a8:	50 e0       	ldi	r21, 0x00	; 0
    c9aa:	60 e0       	ldi	r22, 0x00	; 0
    c9ac:	70 e0       	ldi	r23, 0x00	; 0
    c9ae:	0e 94 f0 74 	call	0xe9e0	; 0xe9e0 <_ZN8SdVolume15allocContiguousEmPm>
    c9b2:	88 23       	and	r24, r24
    c9b4:	a1 f0       	breq	.+40     	; 0xc9de <_ZN10SdBaseFile10addClusterEv+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    c9b6:	8f 89       	ldd	r24, Y+23	; 0x17
    c9b8:	98 8d       	ldd	r25, Y+24	; 0x18
    c9ba:	a9 8d       	ldd	r26, Y+25	; 0x19
    c9bc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    c9be:	00 97       	sbiw	r24, 0x00	; 0
    c9c0:	a1 05       	cpc	r26, r1
    c9c2:	b1 05       	cpc	r27, r1
    c9c4:	71 f4       	brne	.+28     	; 0xc9e2 <_ZN10SdBaseFile10addClusterEv+0x4c>
    firstCluster_ = curCluster_;
    c9c6:	8f 81       	ldd	r24, Y+7	; 0x07
    c9c8:	98 85       	ldd	r25, Y+8	; 0x08
    c9ca:	a9 85       	ldd	r26, Y+9	; 0x09
    c9cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c9ce:	8f 8b       	std	Y+23, r24	; 0x17
    c9d0:	98 8f       	std	Y+24, r25	; 0x18
    c9d2:	a9 8f       	std	Y+25, r26	; 0x19
    c9d4:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    c9d6:	89 81       	ldd	r24, Y+1	; 0x01
    c9d8:	80 68       	ori	r24, 0x80	; 128
    c9da:	89 83       	std	Y+1, r24	; 0x01
    c9dc:	02 c0       	rjmp	.+4      	; 0xc9e2 <_ZN10SdBaseFile10addClusterEv+0x4c>
  }
  return true;

 fail:
  return false;
    c9de:	80 e0       	ldi	r24, 0x00	; 0
    c9e0:	01 c0       	rjmp	.+2      	; 0xc9e4 <_ZN10SdBaseFile10addClusterEv+0x4e>
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    c9e2:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  return false;
}
    c9e4:	df 91       	pop	r29
    c9e6:	cf 91       	pop	r28
    c9e8:	08 95       	ret

0000c9ea <_ZN10SdBaseFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
cache_t* SdBaseFile::addDirCluster() {
    c9ea:	8f 92       	push	r8
    c9ec:	9f 92       	push	r9
    c9ee:	af 92       	push	r10
    c9f0:	bf 92       	push	r11
    c9f2:	ef 92       	push	r14
    c9f4:	ff 92       	push	r15
    c9f6:	0f 93       	push	r16
    c9f8:	1f 93       	push	r17
    c9fa:	cf 93       	push	r28
    c9fc:	8c 01       	movw	r16, r24
  uint32_t block;
  cache_t* pc;
  // max folder size
  if (fileSize_/sizeof(dir_t) >= 0XFFFF) {
    c9fe:	fc 01       	movw	r30, r24
    ca00:	83 89       	ldd	r24, Z+19	; 0x13
    ca02:	94 89       	ldd	r25, Z+20	; 0x14
    ca04:	a5 89       	ldd	r26, Z+21	; 0x15
    ca06:	b6 89       	ldd	r27, Z+22	; 0x16
    ca08:	80 3e       	cpi	r24, 0xE0	; 224
    ca0a:	ff ef       	ldi	r31, 0xFF	; 255
    ca0c:	9f 07       	cpc	r25, r31
    ca0e:	ff e1       	ldi	r31, 0x1F	; 31
    ca10:	af 07       	cpc	r26, r31
    ca12:	f0 e0       	ldi	r31, 0x00	; 0
    ca14:	bf 07       	cpc	r27, r31
    ca16:	08 f0       	brcs	.+2      	; 0xca1a <_ZN10SdBaseFile13addDirClusterEv+0x30>
    ca18:	57 c0       	rjmp	.+174    	; 0xcac8 <_ZN10SdBaseFile13addDirClusterEv+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    ca1a:	c8 01       	movw	r24, r16
    ca1c:	0e 94 cb 64 	call	0xc996	; 0xc996 <_ZN10SdBaseFile10addClusterEv>
    ca20:	88 23       	and	r24, r24
    ca22:	09 f4       	brne	.+2      	; 0xca26 <_ZN10SdBaseFile13addDirClusterEv+0x3c>
    ca24:	51 c0       	rjmp	.+162    	; 0xcac8 <_ZN10SdBaseFile13addDirClusterEv+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = vol_->clusterStartBlock(curCluster_);
    ca26:	d8 01       	movw	r26, r16
    ca28:	17 96       	adiw	r26, 0x07	; 7
    ca2a:	4d 91       	ld	r20, X+
    ca2c:	5d 91       	ld	r21, X+
    ca2e:	6d 91       	ld	r22, X+
    ca30:	7c 91       	ld	r23, X
    ca32:	1a 97       	sbiw	r26, 0x0a	; 10
    ca34:	15 96       	adiw	r26, 0x05	; 5
    ca36:	8d 91       	ld	r24, X+
    ca38:	9c 91       	ld	r25, X
    ca3a:	16 97       	sbiw	r26, 0x06	; 6
    ca3c:	0e 94 d4 73 	call	0xe7a8	; 0xe7a8 <_ZNK8SdVolume17clusterStartBlockEm>
    ca40:	4b 01       	movw	r8, r22
    ca42:	5c 01       	movw	r10, r24
  pc = vol_->cacheFetch(block, SdVolume::CACHE_RESERVE_FOR_WRITE);
    ca44:	45 e0       	ldi	r20, 0x05	; 5
    ca46:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
    ca4a:	7c 01       	movw	r14, r24
  if (!pc) {
    ca4c:	00 97       	sbiw	r24, 0x00	; 0
    ca4e:	f1 f1       	breq	.+124    	; 0xcacc <_ZN10SdBaseFile13addDirClusterEv+0xe2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
    ca50:	80 e0       	ldi	r24, 0x00	; 0
    ca52:	92 e0       	ldi	r25, 0x02	; 2
    ca54:	f7 01       	movw	r30, r14
    ca56:	9c 01       	movw	r18, r24
    ca58:	11 92       	st	Z+, r1
    ca5a:	21 50       	subi	r18, 0x01	; 1
    ca5c:	30 40       	sbci	r19, 0x00	; 0
    ca5e:	e1 f7       	brne	.-8      	; 0xca58 <_ZN10SdBaseFile13addDirClusterEv+0x6e>
  // zero rest of clusters
  for (uint8_t i = 1; i < vol_->blocksPerCluster_; i++) {
    ca60:	c1 e0       	ldi	r28, 0x01	; 1
    ca62:	10 c0       	rjmp	.+32     	; 0xca84 <_ZN10SdBaseFile13addDirClusterEv+0x9a>
    if (!vol_->writeBlock(block + i, pc->data)) {
    ca64:	b5 01       	movw	r22, r10
    ca66:	a4 01       	movw	r20, r8
    ca68:	4c 0f       	add	r20, r28
    ca6a:	51 1d       	adc	r21, r1
    ca6c:	61 1d       	adc	r22, r1
    ca6e:	71 1d       	adc	r23, r1
    return  cluster >= FAT32EOC_MIN;
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  bool writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    ca70:	80 91 9f 24 	lds	r24, 0x249F
    ca74:	90 91 a0 24 	lds	r25, 0x24A0
    ca78:	97 01       	movw	r18, r14
    ca7a:	0e 94 f3 63 	call	0xc7e6	; 0xc7e6 <_ZN7Sd2Card10writeBlockEmPKh>
    ca7e:	88 23       	and	r24, r24
    ca80:	19 f1       	breq	.+70     	; 0xcac8 <_ZN10SdBaseFile13addDirClusterEv+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < vol_->blocksPerCluster_; i++) {
    ca82:	cf 5f       	subi	r28, 0xFF	; 255
    ca84:	d8 01       	movw	r26, r16
    ca86:	15 96       	adiw	r26, 0x05	; 5
    ca88:	ed 91       	ld	r30, X+
    ca8a:	fc 91       	ld	r31, X
    ca8c:	16 97       	sbiw	r26, 0x06	; 6
    ca8e:	44 81       	ldd	r20, Z+4	; 0x04
    ca90:	c4 17       	cp	r28, r20
    ca92:	40 f3       	brcs	.-48     	; 0xca64 <_ZN10SdBaseFile13addDirClusterEv+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL*vol_->blocksPerCluster_;
    ca94:	50 e0       	ldi	r21, 0x00	; 0
    ca96:	60 e0       	ldi	r22, 0x00	; 0
    ca98:	70 e0       	ldi	r23, 0x00	; 0
    ca9a:	89 e0       	ldi	r24, 0x09	; 9
    ca9c:	44 0f       	add	r20, r20
    ca9e:	55 1f       	adc	r21, r21
    caa0:	66 1f       	adc	r22, r22
    caa2:	77 1f       	adc	r23, r23
    caa4:	8a 95       	dec	r24
    caa6:	d1 f7       	brne	.-12     	; 0xca9c <_ZN10SdBaseFile13addDirClusterEv+0xb2>
    caa8:	53 96       	adiw	r26, 0x13	; 19
    caaa:	8d 91       	ld	r24, X+
    caac:	9d 91       	ld	r25, X+
    caae:	0d 90       	ld	r0, X+
    cab0:	bc 91       	ld	r27, X
    cab2:	a0 2d       	mov	r26, r0
    cab4:	84 0f       	add	r24, r20
    cab6:	95 1f       	adc	r25, r21
    cab8:	a6 1f       	adc	r26, r22
    caba:	b7 1f       	adc	r27, r23
    cabc:	f8 01       	movw	r30, r16
    cabe:	83 8b       	std	Z+19, r24	; 0x13
    cac0:	94 8b       	std	Z+20, r25	; 0x14
    cac2:	a5 8b       	std	Z+21, r26	; 0x15
    cac4:	b6 8b       	std	Z+22, r27	; 0x16
    cac6:	02 c0       	rjmp	.+4      	; 0xcacc <_ZN10SdBaseFile13addDirClusterEv+0xe2>
  return pc;

 fail:
  return 0;
    cac8:	ee 24       	eor	r14, r14
    caca:	ff 24       	eor	r15, r15
}
    cacc:	c7 01       	movw	r24, r14
    cace:	cf 91       	pop	r28
    cad0:	1f 91       	pop	r17
    cad2:	0f 91       	pop	r16
    cad4:	ff 90       	pop	r15
    cad6:	ef 90       	pop	r14
    cad8:	bf 90       	pop	r11
    cada:	af 90       	pop	r10
    cadc:	9f 90       	pop	r9
    cade:	8f 90       	pop	r8
    cae0:	08 95       	ret

0000cae2 <_ZN10SdBaseFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdBaseFile::cacheDirEntry(uint8_t action) {
    cae2:	cf 93       	push	r28
    cae4:	df 93       	push	r29
    cae6:	ec 01       	movw	r28, r24
    cae8:	46 2f       	mov	r20, r22
  cache_t* pc;
  pc = vol_->cacheFetch(dirBlock_, action);
    caea:	8f 85       	ldd	r24, Y+15	; 0x0f
    caec:	98 89       	ldd	r25, Y+16	; 0x10
    caee:	a9 89       	ldd	r26, Y+17	; 0x11
    caf0:	ba 89       	ldd	r27, Y+18	; 0x12
    caf2:	bc 01       	movw	r22, r24
    caf4:	cd 01       	movw	r24, r26
    caf6:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
  if (!pc) {
    cafa:	00 97       	sbiw	r24, 0x00	; 0
    cafc:	51 f0       	breq	.+20     	; 0xcb12 <_ZN10SdBaseFile13cacheDirEntryEh+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + dirIndex_;
    cafe:	2c 81       	ldd	r18, Y+4	; 0x04
    cb00:	30 e0       	ldi	r19, 0x00	; 0
    cb02:	45 e0       	ldi	r20, 0x05	; 5
    cb04:	22 0f       	add	r18, r18
    cb06:	33 1f       	adc	r19, r19
    cb08:	4a 95       	dec	r20
    cb0a:	e1 f7       	brne	.-8      	; 0xcb04 <_ZN10SdBaseFile13cacheDirEntryEh+0x22>
    cb0c:	28 0f       	add	r18, r24
    cb0e:	39 1f       	adc	r19, r25
    cb10:	02 c0       	rjmp	.+4      	; 0xcb16 <_ZN10SdBaseFile13cacheDirEntryEh+0x34>

 fail:
  return 0;
    cb12:	20 e0       	ldi	r18, 0x00	; 0
    cb14:	30 e0       	ldi	r19, 0x00	; 0
}
    cb16:	c9 01       	movw	r24, r18
    cb18:	df 91       	pop	r29
    cb1a:	cf 91       	pop	r28
    cb1c:	08 95       	ret

0000cb1e <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>:
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
    cb1e:	fc 01       	movw	r30, r24
  for (uint8_t i = 0; i < 11; i++) {
    cb20:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
    cb22:	80 e0       	ldi	r24, 0x00	; 0
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    cb24:	2e e2       	ldi	r18, 0x2E	; 46
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    cb26:	30 81       	ld	r19, Z
    cb28:	30 32       	cpi	r19, 0x20	; 32
    cb2a:	69 f0       	breq	.+26     	; 0xcb46 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x28>
    if (i == 8) name[j++] = '.';
    cb2c:	98 30       	cpi	r25, 0x08	; 8
    cb2e:	29 f4       	brne	.+10     	; 0xcb3a <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x1c>
    cb30:	db 01       	movw	r26, r22
    cb32:	a8 0f       	add	r26, r24
    cb34:	b1 1d       	adc	r27, r1
    cb36:	2c 93       	st	X, r18
    cb38:	8f 5f       	subi	r24, 0xFF	; 255
    name[j++] = dir.name[i];
    cb3a:	30 81       	ld	r19, Z
    cb3c:	db 01       	movw	r26, r22
    cb3e:	a8 0f       	add	r26, r24
    cb40:	b1 1d       	adc	r27, r1
    cb42:	3c 93       	st	X, r19
    cb44:	8f 5f       	subi	r24, 0xFF	; 255
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    cb46:	9f 5f       	subi	r25, 0xFF	; 255
    cb48:	31 96       	adiw	r30, 0x01	; 1
    cb4a:	9b 30       	cpi	r25, 0x0B	; 11
    cb4c:	61 f7       	brne	.-40     	; 0xcb26 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x8>
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    name[j++] = dir.name[i];
  }
  name[j] = 0;
    cb4e:	68 0f       	add	r22, r24
    cb50:	71 1d       	adc	r23, r1
    cb52:	fb 01       	movw	r30, r22
    cb54:	10 82       	st	Z, r1
}
    cb56:	08 95       	ret

0000cb58 <_ZN10SdBaseFile11getFilenameEPc>:
 * \param[out] name An array of 13 characters for the file's name.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::getFilename(char* name) {
    cb58:	cf 93       	push	r28
    cb5a:	df 93       	push	r29
    cb5c:	eb 01       	movw	r28, r22

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    cb5e:	fc 01       	movw	r30, r24
    cb60:	23 81       	ldd	r18, Z+3	; 0x03
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::getFilename(char* name) {
  dir_t* p;
  if (!isOpen()) {
    cb62:	22 23       	and	r18, r18
    cb64:	89 f0       	breq	.+34     	; 0xcb88 <_ZN10SdBaseFile11getFilenameEPc+0x30>
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a subdirectory else false. */
  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is the root directory. */
  bool isRoot() const {
    return type_ == FAT_FILE_TYPE_ROOT_FIXED || type_ == FAT_FILE_TYPE_ROOT32;
    cb66:	22 50       	subi	r18, 0x02	; 2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    cb68:	22 30       	cpi	r18, 0x02	; 2
    cb6a:	20 f4       	brcc	.+8      	; 0xcb74 <_ZN10SdBaseFile11getFilenameEPc+0x1c>
    name[0] = '/';
    cb6c:	8f e2       	ldi	r24, 0x2F	; 47
    cb6e:	88 83       	st	Y, r24
    name[1] = '\0';
    cb70:	19 82       	std	Y+1, r1	; 0x01
    cb72:	08 c0       	rjmp	.+16     	; 0xcb84 <_ZN10SdBaseFile11getFilenameEPc+0x2c>
    return true;
  }
  // cache entry
  p = cacheDirEntry(SdVolume::CACHE_FOR_READ);
    cb74:	60 e0       	ldi	r22, 0x00	; 0
    cb76:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN10SdBaseFile13cacheDirEntryEh>
  if (!p) {
    cb7a:	00 97       	sbiw	r24, 0x00	; 0
    cb7c:	29 f0       	breq	.+10     	; 0xcb88 <_ZN10SdBaseFile11getFilenameEPc+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(*p, name);
    cb7e:	be 01       	movw	r22, r28
    cb80:	0e 94 8f 65 	call	0xcb1e	; 0xcb1e <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>
  return true;
    cb84:	81 e0       	ldi	r24, 0x01	; 1
    cb86:	01 c0       	rjmp	.+2      	; 0xcb8a <_ZN10SdBaseFile11getFilenameEPc+0x32>

 fail:
  return false;
    cb88:	80 e0       	ldi	r24, 0x00	; 0
}
    cb8a:	df 91       	pop	r29
    cb8c:	cf 91       	pop	r28
    cb8e:	08 95       	ret

0000cb90 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>:
  pr->println();
  return DIR_IS_FILE(&dir) ? 1 : 2;
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
bool SdBaseFile::make83Name(const char* str, uint8_t* name, const char** ptr) {
    cb90:	cf 93       	push	r28
    cb92:	df 93       	push	r29
    cb94:	ea 01       	movw	r28, r20
  *ptr = str;
  // must have a file name, extension is optional
  return name[0] != ' ';

 fail:
  return false;
    cb96:	fb 01       	movw	r30, r22
  pr->println();
  return DIR_IS_FILE(&dir) ? 1 : 2;
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
bool SdBaseFile::make83Name(const char* str, uint8_t* name, const char** ptr) {
    cb98:	2b e0       	ldi	r18, 0x0B	; 11
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    cb9a:	30 e2       	ldi	r19, 0x20	; 32
    cb9c:	31 93       	st	Z+, r19
    cb9e:	21 50       	subi	r18, 0x01	; 1
    cba0:	e9 f7       	brne	.-6      	; 0xcb9c <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0xc>
    cba2:	dc 01       	movw	r26, r24
    cba4:	30 e0       	ldi	r19, 0x00	; 0
    cba6:	47 e0       	ldi	r20, 0x07	; 7
    cba8:	1c c0       	rjmp	.+56     	; 0xcbe2 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x52>
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    if (c == '.') {
      if (n == 10) {
    cbaa:	4a 30       	cpi	r20, 0x0A	; 10
    cbac:	69 f1       	breq	.+90     	; 0xcc08 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x78>
        // only one dot allowed
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    cbae:	38 e0       	ldi	r19, 0x08	; 8
      if (n == 10) {
        // only one dot allowed
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = 10;  // max index for full 8.3 name
    cbb0:	4a e0       	ldi	r20, 0x0A	; 10
    cbb2:	17 c0       	rjmp	.+46     	; 0xcbe2 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x52>
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) {
    cbb4:	e2 17       	cp	r30, r18
    cbb6:	41 f1       	breq	.+80     	; 0xcc08 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x78>
    cbb8:	fc 01       	movw	r30, r24
    cbba:	01 96       	adiw	r24, 0x01	; 1
    cbbc:	e4 91       	lpm	r30, Z
    cbbe:	ee 23       	and	r30, r30
    cbc0:	c9 f7       	brne	.-14     	; 0xcbb4 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x24>
        goto fail;
      }
#endif  // __AVR__

      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E) {
    cbc2:	43 17       	cp	r20, r19
    cbc4:	08 f1       	brcs	.+66     	; 0xcc08 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x78>
    cbc6:	21 32       	cpi	r18, 0x21	; 33
    cbc8:	f8 f0       	brcs	.+62     	; 0xcc08 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x78>
    cbca:	2f 37       	cpi	r18, 0x7F	; 127
    cbcc:	e8 f4       	brcc	.+58     	; 0xcc08 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x78>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    cbce:	fb 01       	movw	r30, r22
    cbd0:	e3 0f       	add	r30, r19
    cbd2:	f1 1d       	adc	r31, r1
    cbd4:	82 2f       	mov	r24, r18
    cbd6:	81 56       	subi	r24, 0x61	; 97
    cbd8:	8a 31       	cpi	r24, 0x1A	; 26
    cbda:	08 f4       	brcc	.+2      	; 0xcbde <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x4e>
    cbdc:	20 52       	subi	r18, 0x20	; 32
    cbde:	20 83       	st	Z, r18
    cbe0:	3f 5f       	subi	r19, 0xFF	; 255
    cbe2:	9a 2f       	mov	r25, r26
    cbe4:	8b 2f       	mov	r24, r27
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    cbe6:	2d 91       	ld	r18, X+
    cbe8:	22 23       	and	r18, r18
    cbea:	39 f0       	breq	.+14     	; 0xcbfa <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x6a>
    cbec:	2f 32       	cpi	r18, 0x2F	; 47
    cbee:	29 f0       	breq	.+10     	; 0xcbfa <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x6a>
    c = *str++;
    if (c == '.') {
    cbf0:	2e 32       	cpi	r18, 0x2E	; 46
    cbf2:	d9 f2       	breq	.-74     	; 0xcbaa <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x1a>
    cbf4:	87 ef       	ldi	r24, 0xF7	; 247
    cbf6:	91 e0       	ldi	r25, 0x01	; 1
    cbf8:	df cf       	rjmp	.-66     	; 0xcbb8 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x28>
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  *ptr = str;
    cbfa:	98 83       	st	Y, r25
    cbfc:	89 83       	std	Y+1, r24	; 0x01
  // must have a file name, extension is optional
  return name[0] != ' ';
    cbfe:	81 e0       	ldi	r24, 0x01	; 1
    cc00:	fb 01       	movw	r30, r22
    cc02:	90 81       	ld	r25, Z
    cc04:	90 32       	cpi	r25, 0x20	; 32
    cc06:	09 f4       	brne	.+2      	; 0xcc0a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x7a>

 fail:
  return false;
    cc08:	80 e0       	ldi	r24, 0x00	; 0
}
    cc0a:	df 91       	pop	r29
    cc0c:	cf 91       	pop	r28
    cc0e:	08 95       	ret

0000cc10 <_ZN10SdBaseFile12printFatDateEP5Printj>:
 *  Format is yyyy-mm-dd.
 *
 * \param[in] pr Print stream for output.
 * \param[in] fatDate The date field from a directory entry.
 */
void SdBaseFile::printFatDate(Print* pr, uint16_t fatDate) {
    cc10:	0f 93       	push	r16
    cc12:	1f 93       	push	r17
    cc14:	cf 93       	push	r28
    cc16:	df 93       	push	r29
    cc18:	ec 01       	movw	r28, r24
    cc1a:	8b 01       	movw	r16, r22
 * \param[in] fatDate Date in packed dir format.
 *
 * \return Extracted year [1980,2107]
 */
static inline uint16_t FAT_YEAR(uint16_t fatDate) {
  return 1980 + (fatDate >> 9);
    cc1c:	67 2f       	mov	r22, r23
    cc1e:	77 27       	eor	r23, r23
    cc20:	66 95       	lsr	r22
    cc22:	64 54       	subi	r22, 0x44	; 68
    cc24:	78 4f       	sbci	r23, 0xF8	; 248
  pr->print(FAT_YEAR(fatDate));
    cc26:	4a e0       	ldi	r20, 0x0A	; 10
    cc28:	50 e0       	ldi	r21, 0x00	; 0
    cc2a:	0e 94 c0 5f 	call	0xbf80	; 0xbf80 <_ZN5Print5printEji>
  pr->write('-');
    cc2e:	e8 81       	ld	r30, Y
    cc30:	f9 81       	ldd	r31, Y+1	; 0x01
    cc32:	01 90       	ld	r0, Z+
    cc34:	f0 81       	ld	r31, Z
    cc36:	e0 2d       	mov	r30, r0
    cc38:	ce 01       	movw	r24, r28
    cc3a:	6d e2       	ldi	r22, 0x2D	; 45
    cc3c:	19 95       	eicall
 * \param[in] fatDate Date in packed dir format.
 *
 * \return Extracted month [1,12]
 */
static inline uint8_t FAT_MONTH(uint16_t fatDate) {
  return (fatDate >> 5) & 0XF;
    cc3e:	b8 01       	movw	r22, r16
    cc40:	a5 e0       	ldi	r26, 0x05	; 5
    cc42:	76 95       	lsr	r23
    cc44:	67 95       	ror	r22
    cc46:	aa 95       	dec	r26
    cc48:	e1 f7       	brne	.-8      	; 0xcc42 <_ZN10SdBaseFile12printFatDateEP5Printj+0x32>
    cc4a:	6f 70       	andi	r22, 0x0F	; 15
  print2u(pr, FAT_MONTH(fatDate));
    cc4c:	ce 01       	movw	r24, r28
    cc4e:	0e 94 b3 64 	call	0xc966	; 0xc966 <_ZL7print2uP5Printh>
  pr->write('-');
    cc52:	e8 81       	ld	r30, Y
    cc54:	f9 81       	ldd	r31, Y+1	; 0x01
    cc56:	01 90       	ld	r0, Z+
    cc58:	f0 81       	ld	r31, Z
    cc5a:	e0 2d       	mov	r30, r0
    cc5c:	ce 01       	movw	r24, r28
    cc5e:	6d e2       	ldi	r22, 0x2D	; 45
    cc60:	19 95       	eicall
 * \param[in] fatDate Date in packed dir format.
 *
 * \return Extracted day [1,31]
 */
static inline uint8_t FAT_DAY(uint16_t fatDate) {
  return fatDate & 0X1F;
    cc62:	60 2f       	mov	r22, r16
    cc64:	6f 71       	andi	r22, 0x1F	; 31
  print2u(pr, FAT_DAY(fatDate));
    cc66:	ce 01       	movw	r24, r28
    cc68:	0e 94 b3 64 	call	0xc966	; 0xc966 <_ZL7print2uP5Printh>
}
    cc6c:	df 91       	pop	r29
    cc6e:	cf 91       	pop	r28
    cc70:	1f 91       	pop	r17
    cc72:	0f 91       	pop	r16
    cc74:	08 95       	ret

0000cc76 <_ZN10SdBaseFile12printFatTimeEP5Printj>:
 * Format is hh:mm:ss.
 *
 * \param[in] pr Print stream for output.
 * \param[in] fatTime The time field from a directory entry.
 */
void SdBaseFile::printFatTime(Print* pr, uint16_t fatTime) {
    cc76:	0f 93       	push	r16
    cc78:	1f 93       	push	r17
    cc7a:	cf 93       	push	r28
    cc7c:	df 93       	push	r29
    cc7e:	ec 01       	movw	r28, r24
    cc80:	8b 01       	movw	r16, r22
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted hour [0,23]
 */
static inline uint8_t FAT_HOUR(uint16_t fatTime) {
  return fatTime >> 11;
    cc82:	61 2f       	mov	r22, r17
    cc84:	66 95       	lsr	r22
    cc86:	66 95       	lsr	r22
    cc88:	66 95       	lsr	r22
  print2u(pr, FAT_HOUR(fatTime));
    cc8a:	0e 94 b3 64 	call	0xc966	; 0xc966 <_ZL7print2uP5Printh>
  pr->write(':');
    cc8e:	e8 81       	ld	r30, Y
    cc90:	f9 81       	ldd	r31, Y+1	; 0x01
    cc92:	01 90       	ld	r0, Z+
    cc94:	f0 81       	ld	r31, Z
    cc96:	e0 2d       	mov	r30, r0
    cc98:	ce 01       	movw	r24, r28
    cc9a:	6a e3       	ldi	r22, 0x3A	; 58
    cc9c:	19 95       	eicall
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FAT_MINUTE(uint16_t fatTime) {
  return(fatTime >> 5) & 0X3F;
    cc9e:	b8 01       	movw	r22, r16
    cca0:	b5 e0       	ldi	r27, 0x05	; 5
    cca2:	76 95       	lsr	r23
    cca4:	67 95       	ror	r22
    cca6:	ba 95       	dec	r27
    cca8:	e1 f7       	brne	.-8      	; 0xcca2 <_ZN10SdBaseFile12printFatTimeEP5Printj+0x2c>
    ccaa:	6f 73       	andi	r22, 0x3F	; 63
  print2u(pr, FAT_MINUTE(fatTime));
    ccac:	ce 01       	movw	r24, r28
    ccae:	0e 94 b3 64 	call	0xc966	; 0xc966 <_ZL7print2uP5Printh>
  pr->write(':');
    ccb2:	e8 81       	ld	r30, Y
    ccb4:	f9 81       	ldd	r31, Y+1	; 0x01
    ccb6:	01 90       	ld	r0, Z+
    ccb8:	f0 81       	ld	r31, Z
    ccba:	e0 2d       	mov	r30, r0
    ccbc:	ce 01       	movw	r24, r28
    ccbe:	6a e3       	ldi	r22, 0x3A	; 58
    ccc0:	19 95       	eicall
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FAT_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    ccc2:	60 2f       	mov	r22, r16
    ccc4:	6f 71       	andi	r22, 0x1F	; 31
    ccc6:	66 0f       	add	r22, r22
  print2u(pr, FAT_SECOND(fatTime));
    ccc8:	ce 01       	movw	r24, r28
    ccca:	0e 94 b3 64 	call	0xc966	; 0xc966 <_ZL7print2uP5Printh>
}
    ccce:	df 91       	pop	r29
    ccd0:	cf 91       	pop	r28
    ccd2:	1f 91       	pop	r17
    ccd4:	0f 91       	pop	r16
    ccd6:	08 95       	ret

0000ccd8 <_ZN10SdBaseFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
    ccd8:	2f 92       	push	r2
    ccda:	3f 92       	push	r3
    ccdc:	4f 92       	push	r4
    ccde:	5f 92       	push	r5
    cce0:	6f 92       	push	r6
    cce2:	7f 92       	push	r7
    cce4:	8f 92       	push	r8
    cce6:	9f 92       	push	r9
    cce8:	af 92       	push	r10
    ccea:	bf 92       	push	r11
    ccec:	cf 92       	push	r12
    ccee:	df 92       	push	r13
    ccf0:	ef 92       	push	r14
    ccf2:	ff 92       	push	r15
    ccf4:	0f 93       	push	r16
    ccf6:	1f 93       	push	r17
    ccf8:	cf 93       	push	r28
    ccfa:	df 93       	push	r29
    ccfc:	00 d0       	rcall	.+0      	; 0xccfe <_ZN10SdBaseFile4readEPvj+0x26>
    ccfe:	0f 92       	push	r0
    cd00:	cd b7       	in	r28, 0x3d	; 61
    cd02:	de b7       	in	r29, 0x3e	; 62
    cd04:	5c 01       	movw	r10, r24
    cd06:	6b 83       	std	Y+3, r22	; 0x03
    cd08:	79 83       	std	Y+1, r23	; 0x01
    cd0a:	1a 01       	movw	r2, r20
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) {
    cd0c:	dc 01       	movw	r26, r24
    cd0e:	13 96       	adiw	r26, 0x03	; 3
    cd10:	8c 91       	ld	r24, X
    cd12:	13 97       	sbiw	r26, 0x03	; 3
    cd14:	88 23       	and	r24, r24
    cd16:	09 f4       	brne	.+2      	; 0xcd1a <_ZN10SdBaseFile4readEPvj+0x42>
    cd18:	0e c1       	rjmp	.+540    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
    cd1a:	11 96       	adiw	r26, 0x01	; 1
    cd1c:	8c 91       	ld	r24, X
    cd1e:	11 97       	sbiw	r26, 0x01	; 1
    cd20:	80 ff       	sbrs	r24, 0
    cd22:	09 c1       	rjmp	.+530    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
    cd24:	20 c1       	rjmp	.+576    	; 0xcf66 <_ZN10SdBaseFile4readEPvj+0x28e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (fileSize_ - curPosition_)) {
    nbyte = fileSize_ - curPosition_;
    cd26:	1c 01       	movw	r2, r24
    cd28:	24 1a       	sub	r2, r20
    cd2a:	35 0a       	sbc	r3, r21
  }
  // amount left to read
  toRead = nbyte;
    cd2c:	41 01       	movw	r8, r2
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
  uint8_t blockOfCluster;
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    cd2e:	4b 80       	ldd	r4, Y+3	; 0x03
    cd30:	59 80       	ldd	r5, Y+1	; 0x01
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) {
    cd32:	f5 01       	movw	r30, r10
    cd34:	37 96       	adiw	r30, 0x07	; 7
    cd36:	e9 83       	std	Y+1, r30	; 0x01
    cd38:	fa 83       	std	Y+2, r31	; 0x02
  if (nbyte >= (fileSize_ - curPosition_)) {
    nbyte = fileSize_ - curPosition_;
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    cd3a:	f7 c0       	rjmp	.+494    	; 0xcf2a <_ZN10SdBaseFile4readEPvj+0x252>
    size_t n;
    offset = curPosition_ & 0X1FF;  // offset in block
    cd3c:	f5 01       	movw	r30, r10
    cd3e:	83 85       	ldd	r24, Z+11	; 0x0b
    cd40:	94 85       	ldd	r25, Z+12	; 0x0c
    cd42:	a5 85       	ldd	r26, Z+13	; 0x0d
    cd44:	b6 85       	ldd	r27, Z+14	; 0x0e
    cd46:	9c 01       	movw	r18, r24
    cd48:	31 70       	andi	r19, 0x01	; 1
    cd4a:	2b 83       	std	Y+3, r18	; 0x03
    cd4c:	3c 83       	std	Y+4, r19	; 0x04
    blockOfCluster = vol_->blockOfCluster(curPosition_);
    cd4e:	c5 80       	ldd	r12, Z+5	; 0x05
    cd50:	d6 80       	ldd	r13, Z+6	; 0x06
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    cd52:	ac 01       	movw	r20, r24
    cd54:	bd 01       	movw	r22, r26
    cd56:	09 e0       	ldi	r16, 0x09	; 9
    cd58:	76 95       	lsr	r23
    cd5a:	67 95       	ror	r22
    cd5c:	57 95       	ror	r21
    cd5e:	47 95       	ror	r20
    cd60:	0a 95       	dec	r16
    cd62:	d1 f7       	brne	.-12     	; 0xcd58 <_ZN10SdBaseFile4readEPvj+0x80>
    cd64:	f6 01       	movw	r30, r12
    cd66:	04 81       	ldd	r16, Z+4	; 0x04
    cd68:	01 50       	subi	r16, 0x01	; 1
    cd6a:	04 23       	and	r16, r20
    if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    cd6c:	f5 01       	movw	r30, r10
    cd6e:	23 81       	ldd	r18, Z+3	; 0x03
    cd70:	22 30       	cpi	r18, 0x02	; 2
    cd72:	61 f4       	brne	.+24     	; 0xcd8c <_ZN10SdBaseFile4readEPvj+0xb4>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    cd74:	d6 01       	movw	r26, r12
    cd76:	5a 96       	adiw	r26, 0x1a	; 26
    cd78:	cd 90       	ld	r12, X+
    cd7a:	dd 90       	ld	r13, X+
    cd7c:	ed 90       	ld	r14, X+
    cd7e:	fc 90       	ld	r15, X
    cd80:	5d 97       	sbiw	r26, 0x1d	; 29
    cd82:	c4 0e       	add	r12, r20
    cd84:	d5 1e       	adc	r13, r21
    cd86:	e6 1e       	adc	r14, r22
    cd88:	f7 1e       	adc	r15, r23
    cd8a:	32 c0       	rjmp	.+100    	; 0xcdf0 <_ZN10SdBaseFile4readEPvj+0x118>
    } else {
      if (offset == 0 && blockOfCluster == 0) {
    cd8c:	eb 81       	ldd	r30, Y+3	; 0x03
    cd8e:	fc 81       	ldd	r31, Y+4	; 0x04
    cd90:	30 97       	sbiw	r30, 0x00	; 0
    cd92:	f9 f4       	brne	.+62     	; 0xcdd2 <_ZN10SdBaseFile4readEPvj+0xfa>
    cd94:	00 23       	and	r16, r16
    cd96:	e9 f4       	brne	.+58     	; 0xcdd2 <_ZN10SdBaseFile4readEPvj+0xfa>
        // start of new cluster
        if (curPosition_ == 0) {
    cd98:	00 97       	sbiw	r24, 0x00	; 0
    cd9a:	a1 05       	cpc	r26, r1
    cd9c:	b1 05       	cpc	r27, r1
    cd9e:	51 f4       	brne	.+20     	; 0xcdb4 <_ZN10SdBaseFile4readEPvj+0xdc>
          // use first cluster in file
          curCluster_ = firstCluster_;
    cda0:	f5 01       	movw	r30, r10
    cda2:	87 89       	ldd	r24, Z+23	; 0x17
    cda4:	90 8d       	ldd	r25, Z+24	; 0x18
    cda6:	a1 8d       	ldd	r26, Z+25	; 0x19
    cda8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    cdaa:	87 83       	std	Z+7, r24	; 0x07
    cdac:	90 87       	std	Z+8, r25	; 0x08
    cdae:	a1 87       	std	Z+9, r26	; 0x09
    cdb0:	b2 87       	std	Z+10, r27	; 0x0a
    cdb2:	0f c0       	rjmp	.+30     	; 0xcdd2 <_ZN10SdBaseFile4readEPvj+0xfa>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) {
    cdb4:	d5 01       	movw	r26, r10
    cdb6:	17 96       	adiw	r26, 0x07	; 7
    cdb8:	4d 91       	ld	r20, X+
    cdba:	5d 91       	ld	r21, X+
    cdbc:	6d 91       	ld	r22, X+
    cdbe:	7c 91       	ld	r23, X
    cdc0:	1a 97       	sbiw	r26, 0x0a	; 10
    cdc2:	c6 01       	movw	r24, r12
    cdc4:	29 81       	ldd	r18, Y+1	; 0x01
    cdc6:	3a 81       	ldd	r19, Y+2	; 0x02
    cdc8:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    cdcc:	88 23       	and	r24, r24
    cdce:	09 f4       	brne	.+2      	; 0xcdd2 <_ZN10SdBaseFile4readEPvj+0xfa>
    cdd0:	b2 c0       	rjmp	.+356    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    cdd2:	f5 01       	movw	r30, r10
    cdd4:	47 81       	ldd	r20, Z+7	; 0x07
    cdd6:	50 85       	ldd	r21, Z+8	; 0x08
    cdd8:	61 85       	ldd	r22, Z+9	; 0x09
    cdda:	72 85       	ldd	r23, Z+10	; 0x0a
    cddc:	85 81       	ldd	r24, Z+5	; 0x05
    cdde:	96 81       	ldd	r25, Z+6	; 0x06
    cde0:	0e 94 d4 73 	call	0xe7a8	; 0xe7a8 <_ZNK8SdVolume17clusterStartBlockEm>
    cde4:	6b 01       	movw	r12, r22
    cde6:	7c 01       	movw	r14, r24
    cde8:	c0 0e       	add	r12, r16
    cdea:	d1 1c       	adc	r13, r1
    cdec:	e1 1c       	adc	r14, r1
    cdee:	f1 1c       	adc	r15, r1
    }
    if (offset != 0 || toRead < 512 || block == vol_->cacheBlockNumber()) {
    cdf0:	2b 81       	ldd	r18, Y+3	; 0x03
    cdf2:	3c 81       	ldd	r19, Y+4	; 0x04
    cdf4:	21 15       	cp	r18, r1
    cdf6:	31 05       	cpc	r19, r1
    cdf8:	99 f4       	brne	.+38     	; 0xce20 <_ZN10SdBaseFile4readEPvj+0x148>
    cdfa:	30 e0       	ldi	r19, 0x00	; 0
    cdfc:	83 16       	cp	r8, r19
    cdfe:	32 e0       	ldi	r19, 0x02	; 2
    ce00:	93 06       	cpc	r9, r19
    ce02:	70 f0       	brcs	.+28     	; 0xce20 <_ZN10SdBaseFile4readEPvj+0x148>
#endif  // USE_SEPARATE_FAT_CACHE
  static Sd2Card* sdCard_;            // Sd2Card object for cache
#endif  // USE_MULTIPLE_CARDS

  cache_t *cacheAddress() {return &cacheBuffer_;}
  uint32_t cacheBlockNumber() {return cacheBlockNumber_;}
    ce04:	80 91 a6 24 	lds	r24, 0x24A6
    ce08:	90 91 a7 24 	lds	r25, 0x24A7
    ce0c:	a0 91 a8 24 	lds	r26, 0x24A8
    ce10:	b0 91 a9 24 	lds	r27, 0x24A9
    ce14:	c8 16       	cp	r12, r24
    ce16:	d9 06       	cpc	r13, r25
    ce18:	ea 06       	cpc	r14, r26
    ce1a:	fb 06       	cpc	r15, r27
    ce1c:	09 f0       	breq	.+2      	; 0xce20 <_ZN10SdBaseFile4readEPvj+0x148>
    ce1e:	bc c0       	rjmp	.+376    	; 0xcf98 <_ZN10SdBaseFile4readEPvj+0x2c0>
      // amount to be read from current block
      n = 512 - offset;
      if (n > toRead) n = toRead;
      // read block to cache and copy data to caller
      pc = vol_->cacheFetch(block, SdVolume::CACHE_FOR_READ);
    ce20:	c7 01       	movw	r24, r14
    ce22:	b6 01       	movw	r22, r12
    ce24:	40 e0       	ldi	r20, 0x00	; 0
    ce26:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
    ce2a:	bc 01       	movw	r22, r24
      if (!pc) {
    ce2c:	00 97       	sbiw	r24, 0x00	; 0
    ce2e:	09 f4       	brne	.+2      	; 0xce32 <_ZN10SdBaseFile4readEPvj+0x15a>
    ce30:	82 c0       	rjmp	.+260    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == vol_->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
    ce32:	80 e0       	ldi	r24, 0x00	; 0
    ce34:	92 e0       	ldi	r25, 0x02	; 2
    ce36:	ab 81       	ldd	r26, Y+3	; 0x03
    ce38:	bc 81       	ldd	r27, Y+4	; 0x04
    ce3a:	8a 1b       	sub	r24, r26
    ce3c:	9b 0b       	sbc	r25, r27
    ce3e:	34 01       	movw	r6, r8
    ce40:	88 15       	cp	r24, r8
    ce42:	99 05       	cpc	r25, r9
    ce44:	08 f4       	brcc	.+2      	; 0xce48 <_ZN10SdBaseFile4readEPvj+0x170>
    ce46:	3c 01       	movw	r6, r24
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    ce48:	eb 81       	ldd	r30, Y+3	; 0x03
    ce4a:	fc 81       	ldd	r31, Y+4	; 0x04
    ce4c:	6e 0f       	add	r22, r30
    ce4e:	7f 1f       	adc	r23, r31
    ce50:	c2 01       	movw	r24, r4
    ce52:	a3 01       	movw	r20, r6
    ce54:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
    ce58:	54 c0       	rjmp	.+168    	; 0xcf02 <_ZN10SdBaseFile4readEPvj+0x22a>
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    return  cluster >= FAT32EOC_MIN;
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
    ce5a:	80 91 9f 24 	lds	r24, 0x249F
    ce5e:	90 91 a0 24 	lds	r25, 0x24A0
    ce62:	b7 01       	movw	r22, r14
    ce64:	a6 01       	movw	r20, r12
    ce66:	92 01       	movw	r18, r4
    ce68:	0e 94 14 62 	call	0xc428	; 0xc428 <_ZN7Sd2Card9readBlockEmPh>
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
      // read single block
      n = 512;
      if (!vol_->readBlock(block, dst)) {
    ce6c:	88 23       	and	r24, r24
    ce6e:	09 f4       	brne	.+2      	; 0xce72 <_ZN10SdBaseFile4readEPvj+0x19a>
    ce70:	62 c0       	rjmp	.+196    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
      // read single block
      n = 512;
    ce72:	61 2c       	mov	r6, r1
    ce74:	12 e0       	ldi	r17, 0x02	; 2
    ce76:	71 2e       	mov	r7, r17
    ce78:	44 c0       	rjmp	.+136    	; 0xcf02 <_ZN10SdBaseFile4readEPvj+0x22a>
      if (!vol_->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      uint8_t nb = toRead >> 9;
    ce7a:	19 2d       	mov	r17, r9
    ce7c:	16 95       	lsr	r17
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
    ce7e:	f5 01       	movw	r30, r10
    ce80:	23 81       	ldd	r18, Z+3	; 0x03
    ce82:	22 30       	cpi	r18, 0x02	; 2
    ce84:	41 f0       	breq	.+16     	; 0xce96 <_ZN10SdBaseFile4readEPvj+0x1be>

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    ce86:	25 81       	ldd	r18, Z+5	; 0x05
    ce88:	36 81       	ldd	r19, Z+6	; 0x06
        goto fail;
      }
    } else {
      uint8_t nb = toRead >> 9;
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
        uint8_t mb = vol_->blocksPerCluster() - blockOfCluster;
    ce8a:	f9 01       	movw	r30, r18
    ce8c:	24 81       	ldd	r18, Z+4	; 0x04
    ce8e:	20 1b       	sub	r18, r16
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      uint8_t nb = toRead >> 9;
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
    ce90:	21 17       	cp	r18, r17
    ce92:	08 f4       	brcc	.+2      	; 0xce96 <_ZN10SdBaseFile4readEPvj+0x1be>
    ce94:	12 2f       	mov	r17, r18
        uint8_t mb = vol_->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
      if (vol_->cacheBlockNumber() <= block
    ce96:	c8 16       	cp	r12, r24
    ce98:	d9 06       	cpc	r13, r25
    ce9a:	ea 06       	cpc	r14, r26
    ce9c:	fb 06       	cpc	r15, r27
    ce9e:	68 f0       	brcs	.+26     	; 0xceba <_ZN10SdBaseFile4readEPvj+0x1e2>
    cea0:	81 0f       	add	r24, r17
    cea2:	91 1d       	adc	r25, r1
    cea4:	a1 1d       	adc	r26, r1
    cea6:	b1 1d       	adc	r27, r1
    cea8:	c8 16       	cp	r12, r24
    ceaa:	d9 06       	cpc	r13, r25
    ceac:	ea 06       	cpc	r14, r26
    ceae:	fb 06       	cpc	r15, r27
    ceb0:	20 f4       	brcc	.+8      	; 0xceba <_ZN10SdBaseFile4readEPvj+0x1e2>
        && block < (vol_->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!vol_->cacheSync()) {
    ceb2:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    ceb6:	88 23       	and	r24, r24
    ceb8:	f1 f1       	breq	.+124    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->readStart(block)) {
    ceba:	80 91 9f 24 	lds	r24, 0x249F
    cebe:	90 91 a0 24 	lds	r25, 0x24A0
    cec2:	b7 01       	movw	r22, r14
    cec4:	a6 01       	movw	r20, r12
    cec6:	0e 94 f1 61 	call	0xc3e2	; 0xc3e2 <_ZN7Sd2Card9readStartEm>
    ceca:	88 23       	and	r24, r24
    cecc:	a1 f1       	breq	.+104    	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
    cece:	62 01       	movw	r12, r4
    ced0:	00 e0       	ldi	r16, 0x00	; 0
    ced2:	0a c0       	rjmp	.+20     	; 0xcee8 <_ZN10SdBaseFile4readEPvj+0x210>
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nb; b++) {
        if (!vol_->sdCard()->readData(dst + b*512)) {
    ced4:	b6 01       	movw	r22, r12
    ced6:	0e 94 28 61 	call	0xc250	; 0xc250 <_ZN7Sd2Card8readDataEPh>
    ceda:	20 e0       	ldi	r18, 0x00	; 0
    cedc:	32 e0       	ldi	r19, 0x02	; 2
    cede:	c2 0e       	add	r12, r18
    cee0:	d3 1e       	adc	r13, r19
    cee2:	88 23       	and	r24, r24
    cee4:	41 f1       	breq	.+80     	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
      }
      if (!vol_->sdCard()->readStart(block)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nb; b++) {
    cee6:	0f 5f       	subi	r16, 0xFF	; 255
    cee8:	80 91 9f 24 	lds	r24, 0x249F
    ceec:	90 91 a0 24 	lds	r25, 0x24A0
    cef0:	01 17       	cp	r16, r17
    cef2:	81 f7       	brne	.-32     	; 0xced4 <_ZN10SdBaseFile4readEPvj+0x1fc>
        if (!vol_->sdCard()->readData(dst + b*512)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->readStop()) {
    cef4:	0e 94 d5 61 	call	0xc3aa	; 0xc3aa <_ZN7Sd2Card8readStopEv>
    cef8:	88 23       	and	r24, r24
    cefa:	e9 f0       	breq	.+58     	; 0xcf36 <_ZN10SdBaseFile4readEPvj+0x25e>
      uint8_t nb = toRead >> 9;
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
        uint8_t mb = vol_->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
    cefc:	70 2e       	mov	r7, r16
    cefe:	77 0c       	add	r7, r7
    cf00:	66 24       	eor	r6, r6
      if (!vol_->sdCard()->readStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    cf02:	46 0c       	add	r4, r6
    cf04:	57 1c       	adc	r5, r7
    curPosition_ += n;
    cf06:	a3 01       	movw	r20, r6
    cf08:	60 e0       	ldi	r22, 0x00	; 0
    cf0a:	70 e0       	ldi	r23, 0x00	; 0
    cf0c:	f5 01       	movw	r30, r10
    cf0e:	83 85       	ldd	r24, Z+11	; 0x0b
    cf10:	94 85       	ldd	r25, Z+12	; 0x0c
    cf12:	a5 85       	ldd	r26, Z+13	; 0x0d
    cf14:	b6 85       	ldd	r27, Z+14	; 0x0e
    cf16:	84 0f       	add	r24, r20
    cf18:	95 1f       	adc	r25, r21
    cf1a:	a6 1f       	adc	r26, r22
    cf1c:	b7 1f       	adc	r27, r23
    cf1e:	83 87       	std	Z+11, r24	; 0x0b
    cf20:	94 87       	std	Z+12, r25	; 0x0c
    cf22:	a5 87       	std	Z+13, r26	; 0x0d
    cf24:	b6 87       	std	Z+14, r27	; 0x0e
    toRead -= n;
    cf26:	86 18       	sub	r8, r6
    cf28:	97 08       	sbc	r9, r7
  if (nbyte >= (fileSize_ - curPosition_)) {
    nbyte = fileSize_ - curPosition_;
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    cf2a:	81 14       	cp	r8, r1
    cf2c:	91 04       	cpc	r9, r1
    cf2e:	09 f0       	breq	.+2      	; 0xcf32 <_ZN10SdBaseFile4readEPvj+0x25a>
    cf30:	05 cf       	rjmp	.-502    	; 0xcd3c <_ZN10SdBaseFile4readEPvj+0x64>
    }
    dst += n;
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    cf32:	c1 01       	movw	r24, r2
    cf34:	02 c0       	rjmp	.+4      	; 0xcf3a <_ZN10SdBaseFile4readEPvj+0x262>

 fail:
  return -1;
    cf36:	8f ef       	ldi	r24, 0xFF	; 255
    cf38:	9f ef       	ldi	r25, 0xFF	; 255
}
    cf3a:	24 96       	adiw	r28, 0x04	; 4
    cf3c:	cd bf       	out	0x3d, r28	; 61
    cf3e:	de bf       	out	0x3e, r29	; 62
    cf40:	df 91       	pop	r29
    cf42:	cf 91       	pop	r28
    cf44:	1f 91       	pop	r17
    cf46:	0f 91       	pop	r16
    cf48:	ff 90       	pop	r15
    cf4a:	ef 90       	pop	r14
    cf4c:	df 90       	pop	r13
    cf4e:	cf 90       	pop	r12
    cf50:	bf 90       	pop	r11
    cf52:	af 90       	pop	r10
    cf54:	9f 90       	pop	r9
    cf56:	8f 90       	pop	r8
    cf58:	7f 90       	pop	r7
    cf5a:	6f 90       	pop	r6
    cf5c:	5f 90       	pop	r5
    cf5e:	4f 90       	pop	r4
    cf60:	3f 90       	pop	r3
    cf62:	2f 90       	pop	r2
    cf64:	08 95       	ret
  if (!isOpen() || !(flags_ & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (fileSize_ - curPosition_)) {
    cf66:	f5 01       	movw	r30, r10
    cf68:	83 89       	ldd	r24, Z+19	; 0x13
    cf6a:	94 89       	ldd	r25, Z+20	; 0x14
    cf6c:	a5 89       	ldd	r26, Z+21	; 0x15
    cf6e:	b6 89       	ldd	r27, Z+22	; 0x16
    cf70:	43 85       	ldd	r20, Z+11	; 0x0b
    cf72:	54 85       	ldd	r21, Z+12	; 0x0c
    cf74:	65 85       	ldd	r22, Z+13	; 0x0d
    cf76:	76 85       	ldd	r23, Z+14	; 0x0e
    cf78:	81 01       	movw	r16, r2
    cf7a:	20 e0       	ldi	r18, 0x00	; 0
    cf7c:	30 e0       	ldi	r19, 0x00	; 0
    cf7e:	6c 01       	movw	r12, r24
    cf80:	7d 01       	movw	r14, r26
    cf82:	c4 1a       	sub	r12, r20
    cf84:	d5 0a       	sbc	r13, r21
    cf86:	e6 0a       	sbc	r14, r22
    cf88:	f7 0a       	sbc	r15, r23
    cf8a:	0c 15       	cp	r16, r12
    cf8c:	1d 05       	cpc	r17, r13
    cf8e:	2e 05       	cpc	r18, r14
    cf90:	3f 05       	cpc	r19, r15
    cf92:	08 f0       	brcs	.+2      	; 0xcf96 <_ZN10SdBaseFile4readEPvj+0x2be>
    cf94:	c8 ce       	rjmp	.-624    	; 0xcd26 <_ZN10SdBaseFile4readEPvj+0x4e>
    cf96:	ca ce       	rjmp	.-620    	; 0xcd2c <_ZN10SdBaseFile4readEPvj+0x54>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
    cf98:	f0 e0       	ldi	r31, 0x00	; 0
    cf9a:	8f 16       	cp	r8, r31
    cf9c:	f4 e0       	ldi	r31, 0x04	; 4
    cf9e:	9f 06       	cpc	r9, r31
    cfa0:	08 f0       	brcs	.+2      	; 0xcfa4 <_ZN10SdBaseFile4readEPvj+0x2cc>
    cfa2:	6b cf       	rjmp	.-298    	; 0xce7a <_ZN10SdBaseFile4readEPvj+0x1a2>
    cfa4:	5a cf       	rjmp	.-332    	; 0xce5a <_ZN10SdBaseFile4readEPvj+0x182>

0000cfa6 <_ZN10SdBaseFile4readEv>:
/** Read the next byte from a file.
 *
 * \return For success read returns the next byte in the file as an int.
 * If an error occurs or end of file is reached -1 is returned.
 */
int16_t SdBaseFile::read() {
    cfa6:	cf 93       	push	r28
    cfa8:	df 93       	push	r29
    cfaa:	0f 92       	push	r0
    cfac:	cd b7       	in	r28, 0x3d	; 61
    cfae:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  return read(&b, 1) == 1 ? b : -1;
    cfb0:	be 01       	movw	r22, r28
    cfb2:	6f 5f       	subi	r22, 0xFF	; 255
    cfb4:	7f 4f       	sbci	r23, 0xFF	; 255
    cfb6:	41 e0       	ldi	r20, 0x01	; 1
    cfb8:	50 e0       	ldi	r21, 0x00	; 0
    cfba:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <_ZN10SdBaseFile4readEPvj>
    cfbe:	81 30       	cpi	r24, 0x01	; 1
    cfc0:	91 05       	cpc	r25, r1
    cfc2:	19 f4       	brne	.+6      	; 0xcfca <_ZN10SdBaseFile4readEv+0x24>
    cfc4:	89 81       	ldd	r24, Y+1	; 0x01
    cfc6:	90 e0       	ldi	r25, 0x00	; 0
    cfc8:	02 c0       	rjmp	.+4      	; 0xcfce <_ZN10SdBaseFile4readEv+0x28>
    cfca:	8f ef       	ldi	r24, 0xFF	; 255
    cfcc:	9f ef       	ldi	r25, 0xFF	; 255
}
    cfce:	0f 90       	pop	r0
    cfd0:	df 91       	pop	r29
    cfd2:	cf 91       	pop	r28
    cfd4:	08 95       	ret

0000cfd6 <_ZN10SdBaseFile11lsPrintNextEP5Printhh>:
  }
}
//------------------------------------------------------------------------------
// saves 32 bytes on stack for ls recursion
// return 0 - EOF, 1 - normal file, or 2 - directory
int8_t SdBaseFile::lsPrintNext(Print *pr, uint8_t flags, uint8_t indent) {
    cfd6:	bf 92       	push	r11
    cfd8:	cf 92       	push	r12
    cfda:	df 92       	push	r13
    cfdc:	ef 92       	push	r14
    cfde:	ff 92       	push	r15
    cfe0:	0f 93       	push	r16
    cfe2:	1f 93       	push	r17
    cfe4:	cf 93       	push	r28
    cfe6:	df 93       	push	r29
    cfe8:	cd b7       	in	r28, 0x3d	; 61
    cfea:	de b7       	in	r29, 0x3e	; 62
    cfec:	a0 97       	sbiw	r28, 0x20	; 32
    cfee:	cd bf       	out	0x3d, r28	; 61
    cff0:	de bf       	out	0x3e, r29	; 62
    cff2:	8c 01       	movw	r16, r24
    cff4:	7b 01       	movw	r14, r22
    cff6:	b4 2e       	mov	r11, r20
    cff8:	c2 2e       	mov	r12, r18
  dir_t dir;
  uint8_t w = 0;

  while (1) {
    if (read(&dir, sizeof(dir)) != sizeof(dir)) return 0;
    cffa:	c8 01       	movw	r24, r16
    cffc:	be 01       	movw	r22, r28
    cffe:	6f 5f       	subi	r22, 0xFF	; 255
    d000:	7f 4f       	sbci	r23, 0xFF	; 255
    d002:	40 e2       	ldi	r20, 0x20	; 32
    d004:	50 e0       	ldi	r21, 0x00	; 0
    d006:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <_ZN10SdBaseFile4readEPvj>
    d00a:	80 32       	cpi	r24, 0x20	; 32
    d00c:	91 05       	cpc	r25, r1
    d00e:	09 f0       	breq	.+2      	; 0xd012 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x3c>
    d010:	a1 c0       	rjmp	.+322    	; 0xd154 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x17e>
    if (dir.name[0] == DIR_NAME_FREE) return 0;
    d012:	89 81       	ldd	r24, Y+1	; 0x01
    d014:	88 23       	and	r24, r24
    d016:	09 f4       	brne	.+2      	; 0xd01a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x44>
    d018:	9d c0       	rjmp	.+314    	; 0xd154 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x17e>

    // skip deleted entry and entries for . and  ..
    if (dir.name[0] != DIR_NAME_DELETED && dir.name[0] != '.'
    d01a:	85 3e       	cpi	r24, 0xE5	; 229
    d01c:	71 f3       	breq	.-36     	; 0xcffa <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x24>
    d01e:	8e 32       	cpi	r24, 0x2E	; 46
    d020:	61 f3       	breq	.-40     	; 0xcffa <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x24>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    d022:	8c 85       	ldd	r24, Y+12	; 0x0c
    d024:	83 ff       	sbrs	r24, 3
    d026:	0c c0       	rjmp	.+24     	; 0xd040 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x6a>
    d028:	e8 cf       	rjmp	.-48     	; 0xcffa <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x24>
      && DIR_IS_FILE_OR_SUBDIR(&dir)) break;
  }
  // indent for dir level
  for (uint8_t i = 0; i < indent; i++) pr->write(' ');
    d02a:	d7 01       	movw	r26, r14
    d02c:	ed 91       	ld	r30, X+
    d02e:	fc 91       	ld	r31, X
    d030:	01 90       	ld	r0, Z+
    d032:	f0 81       	ld	r31, Z
    d034:	e0 2d       	mov	r30, r0
    d036:	c7 01       	movw	r24, r14
    d038:	60 e2       	ldi	r22, 0x20	; 32
    d03a:	19 95       	eicall
    d03c:	1f 5f       	subi	r17, 0xFF	; 255
    d03e:	01 c0       	rjmp	.+2      	; 0xd042 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x6c>
  while (1) {
    if (read(&dir, sizeof(dir)) != sizeof(dir)) return 0;
    if (dir.name[0] == DIR_NAME_FREE) return 0;

    // skip deleted entry and entries for . and  ..
    if (dir.name[0] != DIR_NAME_DELETED && dir.name[0] != '.'
    d040:	10 e0       	ldi	r17, 0x00	; 0
      && DIR_IS_FILE_OR_SUBDIR(&dir)) break;
  }
  // indent for dir level
  for (uint8_t i = 0; i < indent; i++) pr->write(' ');
    d042:	1c 15       	cp	r17, r12
    d044:	91 f7       	brne	.-28     	; 0xd02a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x54>
    d046:	6e 01       	movw	r12, r28
    d048:	08 94       	sec
    d04a:	c1 1c       	adc	r12, r1
    d04c:	d1 1c       	adc	r13, r1
    d04e:	00 e0       	ldi	r16, 0x00	; 0
    d050:	10 e0       	ldi	r17, 0x00	; 0

  // print name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    d052:	f6 01       	movw	r30, r12
    d054:	80 81       	ld	r24, Z
    d056:	80 32       	cpi	r24, 0x20	; 32
    d058:	b9 f0       	breq	.+46     	; 0xd088 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xb2>
    if (i == 8) {
    d05a:	08 30       	cpi	r16, 0x08	; 8
    d05c:	51 f4       	brne	.+20     	; 0xd072 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x9c>
      pr->write('.');
    d05e:	d7 01       	movw	r26, r14
    d060:	ed 91       	ld	r30, X+
    d062:	fc 91       	ld	r31, X
    d064:	01 90       	ld	r0, Z+
    d066:	f0 81       	ld	r31, Z
    d068:	e0 2d       	mov	r30, r0
    d06a:	c7 01       	movw	r24, r14
    d06c:	6e e2       	ldi	r22, 0x2E	; 46
    d06e:	19 95       	eicall
      w++;
    d070:	1f 5f       	subi	r17, 0xFF	; 255
    }
    pr->write(dir.name[i]);
    d072:	d7 01       	movw	r26, r14
    d074:	ed 91       	ld	r30, X+
    d076:	fc 91       	ld	r31, X
    d078:	01 90       	ld	r0, Z+
    d07a:	f0 81       	ld	r31, Z
    d07c:	e0 2d       	mov	r30, r0
    d07e:	c7 01       	movw	r24, r14
    d080:	d6 01       	movw	r26, r12
    d082:	6c 91       	ld	r22, X
    d084:	19 95       	eicall
    w++;
    d086:	1f 5f       	subi	r17, 0xFF	; 255
  }
  // indent for dir level
  for (uint8_t i = 0; i < indent; i++) pr->write(' ');

  // print name
  for (uint8_t i = 0; i < 11; i++) {
    d088:	0f 5f       	subi	r16, 0xFF	; 255
    d08a:	08 94       	sec
    d08c:	c1 1c       	adc	r12, r1
    d08e:	d1 1c       	adc	r13, r1
    d090:	0b 30       	cpi	r16, 0x0B	; 11
    d092:	f9 f6       	brne	.-66     	; 0xd052 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x7c>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a subdirectory else false.
 */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    d094:	8c 85       	ldd	r24, Y+12	; 0x0c
    d096:	88 71       	andi	r24, 0x18	; 24
      w++;
    }
    pr->write(dir.name[i]);
    w++;
  }
  if (DIR_IS_SUBDIR(&dir)) {
    d098:	80 31       	cpi	r24, 0x10	; 16
    d09a:	51 f4       	brne	.+20     	; 0xd0b0 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xda>
    pr->write('/');
    d09c:	d7 01       	movw	r26, r14
    d09e:	ed 91       	ld	r30, X+
    d0a0:	fc 91       	ld	r31, X
    d0a2:	01 90       	ld	r0, Z+
    d0a4:	f0 81       	ld	r31, Z
    d0a6:	e0 2d       	mov	r30, r0
    d0a8:	c7 01       	movw	r24, r14
    d0aa:	6f e2       	ldi	r22, 0x2F	; 47
    d0ac:	19 95       	eicall
    w++;
    d0ae:	1f 5f       	subi	r17, 0xFF	; 255
  }
  if (flags & (LS_DATE | LS_SIZE)) {
    d0b0:	cb 2c       	mov	r12, r11
    d0b2:	dd 24       	eor	r13, r13
    d0b4:	c6 01       	movw	r24, r12
    d0b6:	83 70       	andi	r24, 0x03	; 3
    d0b8:	90 70       	andi	r25, 0x00	; 0
    d0ba:	00 97       	sbiw	r24, 0x00	; 0
    d0bc:	69 f0       	breq	.+26     	; 0xd0d8 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x102>
    d0be:	0a c0       	rjmp	.+20     	; 0xd0d4 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xfe>
    while (w++ < 14) pr->write(' ');
    d0c0:	d7 01       	movw	r26, r14
    d0c2:	ed 91       	ld	r30, X+
    d0c4:	fc 91       	ld	r31, X
    d0c6:	01 90       	ld	r0, Z+
    d0c8:	f0 81       	ld	r31, Z
    d0ca:	e0 2d       	mov	r30, r0
    d0cc:	c7 01       	movw	r24, r14
    d0ce:	60 e2       	ldi	r22, 0x20	; 32
    d0d0:	19 95       	eicall
    d0d2:	1f 5f       	subi	r17, 0xFF	; 255
    d0d4:	1e 30       	cpi	r17, 0x0E	; 14
    d0d6:	a0 f3       	brcs	.-24     	; 0xd0c0 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xea>
  }
  // print modify date/time if requested
  if (flags & LS_DATE) {
    d0d8:	c0 fe       	sbrs	r12, 0
    d0da:	1c c0       	rjmp	.+56     	; 0xd114 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x13e>
    pr->write(' ');
    d0dc:	d7 01       	movw	r26, r14
    d0de:	ed 91       	ld	r30, X+
    d0e0:	fc 91       	ld	r31, X
    d0e2:	01 90       	ld	r0, Z+
    d0e4:	f0 81       	ld	r31, Z
    d0e6:	e0 2d       	mov	r30, r0
    d0e8:	c7 01       	movw	r24, r14
    d0ea:	60 e2       	ldi	r22, 0x20	; 32
    d0ec:	19 95       	eicall
    printFatDate(pr, dir.lastWriteDate);
    d0ee:	69 8d       	ldd	r22, Y+25	; 0x19
    d0f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    d0f2:	c7 01       	movw	r24, r14
    d0f4:	0e 94 08 66 	call	0xcc10	; 0xcc10 <_ZN10SdBaseFile12printFatDateEP5Printj>
    pr->write(' ');
    d0f8:	d7 01       	movw	r26, r14
    d0fa:	ed 91       	ld	r30, X+
    d0fc:	fc 91       	ld	r31, X
    d0fe:	01 90       	ld	r0, Z+
    d100:	f0 81       	ld	r31, Z
    d102:	e0 2d       	mov	r30, r0
    d104:	c7 01       	movw	r24, r14
    d106:	60 e2       	ldi	r22, 0x20	; 32
    d108:	19 95       	eicall
    printFatTime(pr, dir.lastWriteTime);
    d10a:	6f 89       	ldd	r22, Y+23	; 0x17
    d10c:	78 8d       	ldd	r23, Y+24	; 0x18
    d10e:	c7 01       	movw	r24, r14
    d110:	0e 94 3b 66 	call	0xcc76	; 0xcc76 <_ZN10SdBaseFile12printFatTimeEP5Printj>
    d114:	8c 85       	ldd	r24, Y+12	; 0x0c
    d116:	88 71       	andi	r24, 0x18	; 24
  }
  // print size if requested
  if (!DIR_IS_SUBDIR(&dir) && (flags & LS_SIZE)) {
    d118:	80 31       	cpi	r24, 0x10	; 16
    d11a:	a1 f0       	breq	.+40     	; 0xd144 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x16e>
    d11c:	c1 fe       	sbrs	r12, 1
    d11e:	12 c0       	rjmp	.+36     	; 0xd144 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x16e>
    pr->write(' ');
    d120:	d7 01       	movw	r26, r14
    d122:	ed 91       	ld	r30, X+
    d124:	fc 91       	ld	r31, X
    d126:	01 90       	ld	r0, Z+
    d128:	f0 81       	ld	r31, Z
    d12a:	e0 2d       	mov	r30, r0
    d12c:	c7 01       	movw	r24, r14
    d12e:	60 e2       	ldi	r22, 0x20	; 32
    d130:	19 95       	eicall
    pr->print(dir.fileSize);
    d132:	4d 8d       	ldd	r20, Y+29	; 0x1d
    d134:	5e 8d       	ldd	r21, Y+30	; 0x1e
    d136:	6f 8d       	ldd	r22, Y+31	; 0x1f
    d138:	78 a1       	lds	r23, 0x48
    d13a:	c7 01       	movw	r24, r14
    d13c:	2a e0       	ldi	r18, 0x0A	; 10
    d13e:	30 e0       	ldi	r19, 0x00	; 0
    d140:	0e 94 b1 5f 	call	0xbf62	; 0xbf62 <_ZN5Print5printEmi>
  }
  pr->println();
    d144:	c7 01       	movw	r24, r14
    d146:	0e 94 41 5f 	call	0xbe82	; 0xbe82 <_ZN5Print7printlnEv>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file else false.
 */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    d14a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d14c:	88 71       	andi	r24, 0x18	; 24
  return DIR_IS_FILE(&dir) ? 1 : 2;
    d14e:	21 f4       	brne	.+8      	; 0xd158 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x182>
    d150:	81 e0       	ldi	r24, 0x01	; 1
    d152:	03 c0       	rjmp	.+6      	; 0xd15a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x184>
  dir_t dir;
  uint8_t w = 0;

  while (1) {
    if (read(&dir, sizeof(dir)) != sizeof(dir)) return 0;
    if (dir.name[0] == DIR_NAME_FREE) return 0;
    d154:	80 e0       	ldi	r24, 0x00	; 0
    d156:	01 c0       	rjmp	.+2      	; 0xd15a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x184>
  if (!DIR_IS_SUBDIR(&dir) && (flags & LS_SIZE)) {
    pr->write(' ');
    pr->print(dir.fileSize);
  }
  pr->println();
  return DIR_IS_FILE(&dir) ? 1 : 2;
    d158:	82 e0       	ldi	r24, 0x02	; 2
}
    d15a:	a0 96       	adiw	r28, 0x20	; 32
    d15c:	cd bf       	out	0x3d, r28	; 61
    d15e:	de bf       	out	0x3e, r29	; 62
    d160:	df 91       	pop	r29
    d162:	cf 91       	pop	r28
    d164:	1f 91       	pop	r17
    d166:	0f 91       	pop	r16
    d168:	ff 90       	pop	r15
    d16a:	ef 90       	pop	r14
    d16c:	df 90       	pop	r13
    d16e:	cf 90       	pop	r12
    d170:	bf 90       	pop	r11
    d172:	08 95       	ret

0000d174 <_ZN10SdBaseFile12readDirCacheEv>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdBaseFile::readDirCache() {
    d174:	cf 92       	push	r12
    d176:	df 92       	push	r13
    d178:	ef 92       	push	r14
    d17a:	ff 92       	push	r15
    d17c:	cf 93       	push	r28
    d17e:	df 93       	push	r29
    d180:	ec 01       	movw	r28, r24
  uint8_t i;
  // error if not directory
  if (!isDir()) {
    d182:	8b 81       	ldd	r24, Y+3	; 0x03
    d184:	82 30       	cpi	r24, 0x02	; 2
    d186:	38 f1       	brcs	.+78     	; 0xd1d6 <_ZN10SdBaseFile12readDirCacheEv+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // index of entry in cache
  i = (curPosition_ >> 5) & 0XF;
    d188:	cb 84       	ldd	r12, Y+11	; 0x0b
    d18a:	dc 84       	ldd	r13, Y+12	; 0x0c
    d18c:	ed 84       	ldd	r14, Y+13	; 0x0d
    d18e:	fe 84       	ldd	r15, Y+14	; 0x0e

  // use read to locate and cache block
  if (read() < 0) {
    d190:	ce 01       	movw	r24, r28
    d192:	0e 94 d3 67 	call	0xcfa6	; 0xcfa6 <_ZN10SdBaseFile4readEv>
    d196:	97 fd       	sbrc	r25, 7
    d198:	1e c0       	rjmp	.+60     	; 0xd1d6 <_ZN10SdBaseFile12readDirCacheEv+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // advance to next entry
  curPosition_ += 31;
    d19a:	8b 85       	ldd	r24, Y+11	; 0x0b
    d19c:	9c 85       	ldd	r25, Y+12	; 0x0c
    d19e:	ad 85       	ldd	r26, Y+13	; 0x0d
    d1a0:	be 85       	ldd	r27, Y+14	; 0x0e
    d1a2:	4f 96       	adiw	r24, 0x1f	; 31
    d1a4:	a1 1d       	adc	r26, r1
    d1a6:	b1 1d       	adc	r27, r1
    d1a8:	8b 87       	std	Y+11, r24	; 0x0b
    d1aa:	9c 87       	std	Y+12, r25	; 0x0c
    d1ac:	ad 87       	std	Y+13, r26	; 0x0d
    d1ae:	be 87       	std	Y+14, r27	; 0x0e
  if (!isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // index of entry in cache
  i = (curPosition_ >> 5) & 0XF;
    d1b0:	d7 01       	movw	r26, r14
    d1b2:	c6 01       	movw	r24, r12
    d1b4:	25 e0       	ldi	r18, 0x05	; 5
    d1b6:	b6 95       	lsr	r27
    d1b8:	a7 95       	ror	r26
    d1ba:	97 95       	ror	r25
    d1bc:	87 95       	ror	r24
    d1be:	2a 95       	dec	r18
    d1c0:	d1 f7       	brne	.-12     	; 0xd1b6 <_ZN10SdBaseFile12readDirCacheEv+0x42>
    d1c2:	8f 70       	andi	r24, 0x0F	; 15
  }
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return vol_->cacheAddress()->dir + i;
    d1c4:	90 e0       	ldi	r25, 0x00	; 0
    d1c6:	35 e0       	ldi	r19, 0x05	; 5
    d1c8:	88 0f       	add	r24, r24
    d1ca:	99 1f       	adc	r25, r25
    d1cc:	3a 95       	dec	r19
    d1ce:	e1 f7       	brne	.-8      	; 0xd1c8 <_ZN10SdBaseFile12readDirCacheEv+0x54>
    d1d0:	86 55       	subi	r24, 0x56	; 86
    d1d2:	9b 4d       	sbci	r25, 0xDB	; 219
    d1d4:	02 c0       	rjmp	.+4      	; 0xd1da <_ZN10SdBaseFile12readDirCacheEv+0x66>

 fail:
  return 0;
    d1d6:	80 e0       	ldi	r24, 0x00	; 0
    d1d8:	90 e0       	ldi	r25, 0x00	; 0
}
    d1da:	df 91       	pop	r29
    d1dc:	cf 91       	pop	r28
    d1de:	ff 90       	pop	r15
    d1e0:	ef 90       	pop	r14
    d1e2:	df 90       	pop	r13
    d1e4:	cf 90       	pop	r12
    d1e6:	08 95       	ret

0000d1e8 <_ZN10SdBaseFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::seekSet(uint32_t pos) {
    d1e8:	8f 92       	push	r8
    d1ea:	9f 92       	push	r9
    d1ec:	af 92       	push	r10
    d1ee:	bf 92       	push	r11
    d1f0:	cf 92       	push	r12
    d1f2:	df 92       	push	r13
    d1f4:	ef 92       	push	r14
    d1f6:	ff 92       	push	r15
    d1f8:	0f 93       	push	r16
    d1fa:	1f 93       	push	r17
    d1fc:	cf 93       	push	r28
    d1fe:	df 93       	push	r29
    d200:	ec 01       	movw	r28, r24
    d202:	4a 01       	movw	r8, r20
    d204:	5b 01       	movw	r10, r22

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    d206:	2b 81       	ldd	r18, Y+3	; 0x03
 */
bool SdBaseFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) {
    d208:	22 23       	and	r18, r18
    d20a:	09 f4       	brne	.+2      	; 0xd20e <_ZN10SdBaseFile7seekSetEm+0x26>
    d20c:	75 c0       	rjmp	.+234    	; 0xd2f8 <_ZN10SdBaseFile7seekSetEm+0x110>
    d20e:	8b 89       	ldd	r24, Y+19	; 0x13
    d210:	9c 89       	ldd	r25, Y+20	; 0x14
    d212:	ad 89       	ldd	r26, Y+21	; 0x15
    d214:	be 89       	ldd	r27, Y+22	; 0x16
    d216:	84 17       	cp	r24, r20
    d218:	95 07       	cpc	r25, r21
    d21a:	a6 07       	cpc	r26, r22
    d21c:	b7 07       	cpc	r27, r23
    d21e:	08 f4       	brcc	.+2      	; 0xd222 <_ZN10SdBaseFile7seekSetEm+0x3a>
    d220:	6b c0       	rjmp	.+214    	; 0xd2f8 <_ZN10SdBaseFile7seekSetEm+0x110>
    d222:	78 c0       	rjmp	.+240    	; 0xd314 <_ZN10SdBaseFile7seekSetEm+0x12c>
  }
  if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    curPosition_ = pos;
    goto done;
  }
  if (pos == 0) {
    d224:	81 14       	cp	r8, r1
    d226:	91 04       	cpc	r9, r1
    d228:	a1 04       	cpc	r10, r1
    d22a:	b1 04       	cpc	r11, r1
    d22c:	49 f4       	brne	.+18     	; 0xd240 <_ZN10SdBaseFile7seekSetEm+0x58>
    // set position to start of file
    curCluster_ = 0;
    d22e:	1f 82       	std	Y+7, r1	; 0x07
    d230:	18 86       	std	Y+8, r1	; 0x08
    d232:	19 86       	std	Y+9, r1	; 0x09
    d234:	1a 86       	std	Y+10, r1	; 0x0a
    curPosition_ = 0;
    d236:	1b 86       	std	Y+11, r1	; 0x0b
    d238:	1c 86       	std	Y+12, r1	; 0x0c
    d23a:	1d 86       	std	Y+13, r1	; 0x0d
    d23c:	1e 86       	std	Y+14, r1	; 0x0e
    d23e:	5a c0       	rjmp	.+180    	; 0xd2f4 <_ZN10SdBaseFile7seekSetEm+0x10c>
    goto done;
  }
  // calculate cluster index for cur and new position
  nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    d240:	4b 85       	ldd	r20, Y+11	; 0x0b
    d242:	5c 85       	ldd	r21, Y+12	; 0x0c
    d244:	6d 85       	ldd	r22, Y+13	; 0x0d
    d246:	7e 85       	ldd	r23, Y+14	; 0x0e
    d248:	ed 81       	ldd	r30, Y+5	; 0x05
    d24a:	fe 81       	ldd	r31, Y+6	; 0x06
    d24c:	25 85       	ldd	r18, Z+13	; 0x0d
    d24e:	30 e0       	ldi	r19, 0x00	; 0
    d250:	27 5f       	subi	r18, 0xF7	; 247
    d252:	3f 4f       	sbci	r19, 0xFF	; 255
    d254:	db 01       	movw	r26, r22
    d256:	ca 01       	movw	r24, r20
    d258:	01 97       	sbiw	r24, 0x01	; 1
    d25a:	a1 09       	sbc	r26, r1
    d25c:	b1 09       	sbc	r27, r1
    d25e:	02 2e       	mov	r0, r18
    d260:	04 c0       	rjmp	.+8      	; 0xd26a <_ZN10SdBaseFile7seekSetEm+0x82>
    d262:	b6 95       	lsr	r27
    d264:	a7 95       	ror	r26
    d266:	97 95       	ror	r25
    d268:	87 95       	ror	r24
    d26a:	0a 94       	dec	r0
    d26c:	d2 f7       	brpl	.-12     	; 0xd262 <_ZN10SdBaseFile7seekSetEm+0x7a>
  nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    d26e:	75 01       	movw	r14, r10
    d270:	64 01       	movw	r12, r8
    d272:	08 94       	sec
    d274:	c1 08       	sbc	r12, r1
    d276:	d1 08       	sbc	r13, r1
    d278:	e1 08       	sbc	r14, r1
    d27a:	f1 08       	sbc	r15, r1
    d27c:	04 c0       	rjmp	.+8      	; 0xd286 <_ZN10SdBaseFile7seekSetEm+0x9e>
    d27e:	f6 94       	lsr	r15
    d280:	e7 94       	ror	r14
    d282:	d7 94       	ror	r13
    d284:	c7 94       	ror	r12
    d286:	2a 95       	dec	r18
    d288:	d2 f7       	brpl	.-12     	; 0xd27e <_ZN10SdBaseFile7seekSetEm+0x96>

  if (nNew < nCur || curPosition_ == 0) {
    d28a:	c8 16       	cp	r12, r24
    d28c:	d9 06       	cpc	r13, r25
    d28e:	ea 06       	cpc	r14, r26
    d290:	fb 06       	cpc	r15, r27
    d292:	28 f0       	brcs	.+10     	; 0xd29e <_ZN10SdBaseFile7seekSetEm+0xb6>
    d294:	41 15       	cp	r20, r1
    d296:	51 05       	cpc	r21, r1
    d298:	61 05       	cpc	r22, r1
    d29a:	71 05       	cpc	r23, r1
    d29c:	49 f4       	brne	.+18     	; 0xd2b0 <_ZN10SdBaseFile7seekSetEm+0xc8>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    d29e:	8f 89       	ldd	r24, Y+23	; 0x17
    d2a0:	98 8d       	ldd	r25, Y+24	; 0x18
    d2a2:	a9 8d       	ldd	r26, Y+25	; 0x19
    d2a4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d2a6:	8f 83       	std	Y+7, r24	; 0x07
    d2a8:	98 87       	std	Y+8, r25	; 0x08
    d2aa:	a9 87       	std	Y+9, r26	; 0x09
    d2ac:	ba 87       	std	Y+10, r27	; 0x0a
    d2ae:	16 c0       	rjmp	.+44     	; 0xd2dc <_ZN10SdBaseFile7seekSetEm+0xf4>
  } else {
    // advance from curPosition
    nNew -= nCur;
    d2b0:	c8 1a       	sub	r12, r24
    d2b2:	d9 0a       	sbc	r13, r25
    d2b4:	ea 0a       	sbc	r14, r26
    d2b6:	fb 0a       	sbc	r15, r27
    d2b8:	11 c0       	rjmp	.+34     	; 0xd2dc <_ZN10SdBaseFile7seekSetEm+0xf4>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) {
    d2ba:	4f 81       	ldd	r20, Y+7	; 0x07
    d2bc:	58 85       	ldd	r21, Y+8	; 0x08
    d2be:	69 85       	ldd	r22, Y+9	; 0x09
    d2c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    d2c2:	8d 81       	ldd	r24, Y+5	; 0x05
    d2c4:	9e 81       	ldd	r25, Y+6	; 0x06
    d2c6:	98 01       	movw	r18, r16
    d2c8:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    d2cc:	08 94       	sec
    d2ce:	c1 08       	sbc	r12, r1
    d2d0:	d1 08       	sbc	r13, r1
    d2d2:	e1 08       	sbc	r14, r1
    d2d4:	f1 08       	sbc	r15, r1
    d2d6:	88 23       	and	r24, r24
    d2d8:	21 f4       	brne	.+8      	; 0xd2e2 <_ZN10SdBaseFile7seekSetEm+0xfa>
    d2da:	0e c0       	rjmp	.+28     	; 0xd2f8 <_ZN10SdBaseFile7seekSetEm+0x110>
    d2dc:	8e 01       	movw	r16, r28
    d2de:	09 5f       	subi	r16, 0xF9	; 249
    d2e0:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    d2e2:	c1 14       	cp	r12, r1
    d2e4:	d1 04       	cpc	r13, r1
    d2e6:	e1 04       	cpc	r14, r1
    d2e8:	f1 04       	cpc	r15, r1
    d2ea:	39 f7       	brne	.-50     	; 0xd2ba <_ZN10SdBaseFile7seekSetEm+0xd2>
    if (!vol_->fatGet(curCluster_, &curCluster_)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  curPosition_ = pos;
    d2ec:	8b 86       	std	Y+11, r8	; 0x0b
    d2ee:	9c 86       	std	Y+12, r9	; 0x0c
    d2f0:	ad 86       	std	Y+13, r10	; 0x0d
    d2f2:	be 86       	std	Y+14, r11	; 0x0e

 done:
  return true;
    d2f4:	81 e0       	ldi	r24, 0x01	; 1
    d2f6:	01 c0       	rjmp	.+2      	; 0xd2fa <_ZN10SdBaseFile7seekSetEm+0x112>

 fail:
  return false;
    d2f8:	80 e0       	ldi	r24, 0x00	; 0
}
    d2fa:	df 91       	pop	r29
    d2fc:	cf 91       	pop	r28
    d2fe:	1f 91       	pop	r17
    d300:	0f 91       	pop	r16
    d302:	ff 90       	pop	r15
    d304:	ef 90       	pop	r14
    d306:	df 90       	pop	r13
    d308:	cf 90       	pop	r12
    d30a:	bf 90       	pop	r11
    d30c:	af 90       	pop	r10
    d30e:	9f 90       	pop	r9
    d310:	8f 90       	pop	r8
    d312:	08 95       	ret
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    d314:	22 30       	cpi	r18, 0x02	; 2
    d316:	09 f0       	breq	.+2      	; 0xd31a <_ZN10SdBaseFile7seekSetEm+0x132>
    d318:	85 cf       	rjmp	.-246    	; 0xd224 <_ZN10SdBaseFile7seekSetEm+0x3c>
    d31a:	e8 cf       	rjmp	.-48     	; 0xd2ec <_ZN10SdBaseFile7seekSetEm+0x104>

0000d31c <_ZN10SdBaseFile6rewindEv>:
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    d31c:	40 e0       	ldi	r20, 0x00	; 0
    d31e:	50 e0       	ldi	r21, 0x00	; 0
    d320:	ba 01       	movw	r22, r20
    d322:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d326:	08 95       	ret

0000d328 <_ZN10SdBaseFile10setDirSizeEv>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// set fileSize_ for a directory
bool SdBaseFile::setDirSize() {
    d328:	ef 92       	push	r14
    d32a:	ff 92       	push	r15
    d32c:	0f 93       	push	r16
    d32e:	1f 93       	push	r17
    d330:	cf 93       	push	r28
    d332:	df 93       	push	r29
    d334:	00 d0       	rcall	.+0      	; 0xd336 <_ZN10SdBaseFile10setDirSizeEv+0xe>
    d336:	0f 92       	push	r0
    d338:	cd b7       	in	r28, 0x3d	; 61
    d33a:	de b7       	in	r29, 0x3e	; 62
    d33c:	7c 01       	movw	r14, r24
  uint16_t s = 0;
  uint32_t cluster = firstCluster_;
    d33e:	fc 01       	movw	r30, r24
    d340:	87 89       	ldd	r24, Z+23	; 0x17
    d342:	90 8d       	ldd	r25, Z+24	; 0x18
    d344:	a1 8d       	ldd	r26, Z+25	; 0x19
    d346:	b2 8d       	ldd	r27, Z+26	; 0x1a
    d348:	89 83       	std	Y+1, r24	; 0x01
    d34a:	9a 83       	std	Y+2, r25	; 0x02
    d34c:	ab 83       	std	Y+3, r26	; 0x03
    d34e:	bc 83       	std	Y+4, r27	; 0x04
  return false;
}
//------------------------------------------------------------------------------
// set fileSize_ for a directory
bool SdBaseFile::setDirSize() {
  uint16_t s = 0;
    d350:	00 e0       	ldi	r16, 0x00	; 0
    d352:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t cluster = firstCluster_;
  do {
    if (!vol_->fatGet(cluster, &cluster)) {
    d354:	49 81       	ldd	r20, Y+1	; 0x01
    d356:	5a 81       	ldd	r21, Y+2	; 0x02
    d358:	6b 81       	ldd	r22, Y+3	; 0x03
    d35a:	7c 81       	ldd	r23, Y+4	; 0x04
    d35c:	d7 01       	movw	r26, r14
    d35e:	15 96       	adiw	r26, 0x05	; 5
    d360:	8d 91       	ld	r24, X+
    d362:	9c 91       	ld	r25, X
    d364:	16 97       	sbiw	r26, 0x06	; 6
    d366:	9e 01       	movw	r18, r28
    d368:	2f 5f       	subi	r18, 0xFF	; 255
    d36a:	3f 4f       	sbci	r19, 0xFF	; 255
    d36c:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    d370:	88 23       	and	r24, r24
    d372:	b1 f1       	breq	.+108    	; 0xd3e0 <_ZN10SdBaseFile10setDirSizeEv+0xb8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    s += vol_->blocksPerCluster();
    d374:	d7 01       	movw	r26, r14
    d376:	15 96       	adiw	r26, 0x05	; 5
    d378:	ed 91       	ld	r30, X+
    d37a:	fc 91       	ld	r31, X
    d37c:	16 97       	sbiw	r26, 0x06	; 6
    d37e:	84 81       	ldd	r24, Z+4	; 0x04
    d380:	08 0f       	add	r16, r24
    d382:	11 1d       	adc	r17, r1
    // max size if a directory file is 4096 blocks
    if (s >= 4096) {
    d384:	b0 e1       	ldi	r27, 0x10	; 16
    d386:	00 30       	cpi	r16, 0x00	; 0
    d388:	1b 07       	cpc	r17, r27
    d38a:	50 f5       	brcc	.+84     	; 0xd3e0 <_ZN10SdBaseFile10setDirSizeEv+0xb8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } while (!vol_->isEOC(cluster));
    d38c:	89 81       	ldd	r24, Y+1	; 0x01
    d38e:	9a 81       	ldd	r25, Y+2	; 0x02
    d390:	ab 81       	ldd	r26, Y+3	; 0x03
    d392:	bc 81       	ldd	r27, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    d394:	27 89       	ldd	r18, Z+23	; 0x17
    d396:	20 31       	cpi	r18, 0x10	; 16
    d398:	49 f4       	brne	.+18     	; 0xd3ac <_ZN10SdBaseFile10setDirSizeEv+0x84>
    d39a:	88 3f       	cpi	r24, 0xF8	; 248
    d39c:	ef ef       	ldi	r30, 0xFF	; 255
    d39e:	9e 07       	cpc	r25, r30
    d3a0:	e0 e0       	ldi	r30, 0x00	; 0
    d3a2:	ae 07       	cpc	r26, r30
    d3a4:	e0 e0       	ldi	r30, 0x00	; 0
    d3a6:	be 07       	cpc	r27, r30
    d3a8:	48 f4       	brcc	.+18     	; 0xd3bc <_ZN10SdBaseFile10setDirSizeEv+0x94>
    d3aa:	d4 cf       	rjmp	.-88     	; 0xd354 <_ZN10SdBaseFile10setDirSizeEv+0x2c>
    return  cluster >= FAT32EOC_MIN;
    d3ac:	88 3f       	cpi	r24, 0xF8	; 248
    d3ae:	ff ef       	ldi	r31, 0xFF	; 255
    d3b0:	9f 07       	cpc	r25, r31
    d3b2:	ff ef       	ldi	r31, 0xFF	; 255
    d3b4:	af 07       	cpc	r26, r31
    d3b6:	ff e0       	ldi	r31, 0x0F	; 15
    d3b8:	bf 07       	cpc	r27, r31
    d3ba:	60 f2       	brcs	.-104    	; 0xd354 <_ZN10SdBaseFile10setDirSizeEv+0x2c>
  fileSize_ = 512L*s;
    d3bc:	20 e0       	ldi	r18, 0x00	; 0
    d3be:	30 e0       	ldi	r19, 0x00	; 0
    d3c0:	49 e0       	ldi	r20, 0x09	; 9
    d3c2:	00 0f       	add	r16, r16
    d3c4:	11 1f       	adc	r17, r17
    d3c6:	22 1f       	adc	r18, r18
    d3c8:	33 1f       	adc	r19, r19
    d3ca:	4a 95       	dec	r20
    d3cc:	d1 f7       	brne	.-12     	; 0xd3c2 <_ZN10SdBaseFile10setDirSizeEv+0x9a>
    d3ce:	d7 01       	movw	r26, r14
    d3d0:	53 96       	adiw	r26, 0x13	; 19
    d3d2:	0d 93       	st	X+, r16
    d3d4:	1d 93       	st	X+, r17
    d3d6:	2d 93       	st	X+, r18
    d3d8:	3c 93       	st	X, r19
    d3da:	56 97       	sbiw	r26, 0x16	; 22
  return true;
    d3dc:	81 e0       	ldi	r24, 0x01	; 1
    d3de:	01 c0       	rjmp	.+2      	; 0xd3e2 <_ZN10SdBaseFile10setDirSizeEv+0xba>

 fail:
  return false;
    d3e0:	80 e0       	ldi	r24, 0x00	; 0
}
    d3e2:	24 96       	adiw	r28, 0x04	; 4
    d3e4:	cd bf       	out	0x3d, r28	; 61
    d3e6:	de bf       	out	0x3e, r29	; 62
    d3e8:	df 91       	pop	r29
    d3ea:	cf 91       	pop	r28
    d3ec:	1f 91       	pop	r17
    d3ee:	0f 91       	pop	r16
    d3f0:	ff 90       	pop	r15
    d3f2:	ef 90       	pop	r14
    d3f4:	08 95       	ret

0000d3f6 <_ZN10SdBaseFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is already open, the FAT volume has
 * not been initialized or it a FAT12 volume.
 */
bool SdBaseFile::openRoot(SdVolume* vol) {
    d3f6:	cf 93       	push	r28
    d3f8:	df 93       	push	r29
    d3fa:	ec 01       	movw	r28, r24
    d3fc:	fb 01       	movw	r30, r22
  // error if file is already open
  if (isOpen()) {
    d3fe:	8b 81       	ldd	r24, Y+3	; 0x03
    d400:	88 23       	and	r24, r24
    d402:	d1 f5       	brne	.+116    	; 0xd478 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  vol_ = vol;
    d404:	6d 83       	std	Y+5, r22	; 0x05
    d406:	7e 83       	std	Y+6, r23	; 0x06

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    d408:	87 89       	ldd	r24, Z+23	; 0x17
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  vol_ = vol;
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    d40a:	80 31       	cpi	r24, 0x10	; 16
    d40c:	c9 f5       	brne	.+114    	; 0xd480 <_ZN10SdBaseFile8openRootEP8SdVolume+0x8a>
    type_ = FAT_FILE_TYPE_ROOT_FIXED;
    d40e:	82 e0       	ldi	r24, 0x02	; 2
    d410:	8b 83       	std	Y+3, r24	; 0x03
    firstCluster_ = 0;
    d412:	1f 8a       	std	Y+23, r1	; 0x17
    d414:	18 8e       	std	Y+24, r1	; 0x18
    d416:	19 8e       	std	Y+25, r1	; 0x19
    d418:	1a 8e       	std	Y+26, r1	; 0x1a
  uint32_t fatStartBlock() const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {return fatType_;}
  int32_t freeClusterCount();
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount() const {return rootDirEntryCount_;}
    d41a:	80 8d       	ldd	r24, Z+24	; 0x18
    d41c:	91 8d       	ldd	r25, Z+25	; 0x19
    d41e:	a0 e0       	ldi	r26, 0x00	; 0
    d420:	b0 e0       	ldi	r27, 0x00	; 0
    fileSize_ = 32 * vol->rootDirEntryCount();
    d422:	55 e0       	ldi	r21, 0x05	; 5
    d424:	88 0f       	add	r24, r24
    d426:	99 1f       	adc	r25, r25
    d428:	aa 1f       	adc	r26, r26
    d42a:	bb 1f       	adc	r27, r27
    d42c:	5a 95       	dec	r21
    d42e:	d1 f7       	brne	.-12     	; 0xd424 <_ZN10SdBaseFile8openRootEP8SdVolume+0x2e>
    d430:	8b 8b       	std	Y+19, r24	; 0x13
    d432:	9c 8b       	std	Y+20, r25	; 0x14
    d434:	ad 8b       	std	Y+21, r26	; 0x15
    d436:	be 8b       	std	Y+22, r27	; 0x16
    d438:	0f c0       	rjmp	.+30     	; 0xd458 <_ZN10SdBaseFile8openRootEP8SdVolume+0x62>
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    d43a:	83 e0       	ldi	r24, 0x03	; 3
    d43c:	8b 83       	std	Y+3, r24	; 0x03
    firstCluster_ = vol->rootDirStart();
    d43e:	82 8d       	ldd	r24, Z+26	; 0x1a
    d440:	93 8d       	ldd	r25, Z+27	; 0x1b
    d442:	a4 8d       	ldd	r26, Z+28	; 0x1c
    d444:	b5 8d       	ldd	r27, Z+29	; 0x1d
    d446:	8f 8b       	std	Y+23, r24	; 0x17
    d448:	98 8f       	std	Y+24, r25	; 0x18
    d44a:	a9 8f       	std	Y+25, r26	; 0x19
    d44c:	ba 8f       	std	Y+26, r27	; 0x1a
    if (!setDirSize()) {
    d44e:	ce 01       	movw	r24, r28
    d450:	0e 94 94 69 	call	0xd328	; 0xd328 <_ZN10SdBaseFile10setDirSizeEv>
    d454:	88 23       	and	r24, r24
    d456:	81 f0       	breq	.+32     	; 0xd478 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    // volume is not initialized, invalid, or FAT12 without support
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  flags_ = O_READ;
    d458:	81 e0       	ldi	r24, 0x01	; 1
    d45a:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  curCluster_ = 0;
    d45c:	1f 82       	std	Y+7, r1	; 0x07
    d45e:	18 86       	std	Y+8, r1	; 0x08
    d460:	19 86       	std	Y+9, r1	; 0x09
    d462:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    d464:	1b 86       	std	Y+11, r1	; 0x0b
    d466:	1c 86       	std	Y+12, r1	; 0x0c
    d468:	1d 86       	std	Y+13, r1	; 0x0d
    d46a:	1e 86       	std	Y+14, r1	; 0x0e

  // root has no directory entry
  dirBlock_ = 0;
    d46c:	1f 86       	std	Y+15, r1	; 0x0f
    d46e:	18 8a       	std	Y+16, r1	; 0x10
    d470:	19 8a       	std	Y+17, r1	; 0x11
    d472:	1a 8a       	std	Y+18, r1	; 0x12
  dirIndex_ = 0;
    d474:	1c 82       	std	Y+4, r1	; 0x04
    d476:	01 c0       	rjmp	.+2      	; 0xd47a <_ZN10SdBaseFile8openRootEP8SdVolume+0x84>
  return true;

 fail:
  return false;
    d478:	80 e0       	ldi	r24, 0x00	; 0
}
    d47a:	df 91       	pop	r29
    d47c:	cf 91       	pop	r28
    d47e:	08 95       	ret
  vol_ = vol;
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    type_ = FAT_FILE_TYPE_ROOT_FIXED;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    d480:	80 32       	cpi	r24, 0x20	; 32
    d482:	d1 f7       	brne	.-12     	; 0xd478 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    d484:	da cf       	rjmp	.-76     	; 0xd43a <_ZN10SdBaseFile8openRootEP8SdVolume+0x44>

0000d486 <_ZN10SdBaseFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
bool SdBaseFile::sync() {
    d486:	0f 93       	push	r16
    d488:	1f 93       	push	r17
    d48a:	cf 93       	push	r28
    d48c:	df 93       	push	r29
    d48e:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) {
    d490:	fc 01       	movw	r30, r24
    d492:	83 81       	ldd	r24, Z+3	; 0x03
    d494:	88 23       	and	r24, r24
    d496:	c9 f1       	breq	.+114    	; 0xd50a <_ZN10SdBaseFile4syncEv+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (flags_ & F_FILE_DIR_DIRTY) {
    d498:	81 81       	ldd	r24, Z+1	; 0x01
    d49a:	87 ff       	sbrs	r24, 7
    d49c:	33 c0       	rjmp	.+102    	; 0xd504 <_ZN10SdBaseFile4syncEv+0x7e>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    d49e:	c8 01       	movw	r24, r16
    d4a0:	61 e0       	ldi	r22, 0x01	; 1
    d4a2:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN10SdBaseFile13cacheDirEntryEh>
    d4a6:	ec 01       	movw	r28, r24
    // check for deleted by another open file object
    if (!d || d->name[0] == DIR_NAME_DELETED) {
    d4a8:	00 97       	sbiw	r24, 0x00	; 0
    d4aa:	79 f1       	breq	.+94     	; 0xd50a <_ZN10SdBaseFile4syncEv+0x84>
    d4ac:	88 81       	ld	r24, Y
    d4ae:	85 3e       	cpi	r24, 0xE5	; 229
    d4b0:	61 f1       	breq	.+88     	; 0xd50a <_ZN10SdBaseFile4syncEv+0x84>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    d4b2:	f8 01       	movw	r30, r16
    d4b4:	83 81       	ldd	r24, Z+3	; 0x03
    d4b6:	82 30       	cpi	r24, 0x02	; 2
    d4b8:	40 f4       	brcc	.+16     	; 0xd4ca <_ZN10SdBaseFile4syncEv+0x44>
    d4ba:	83 89       	ldd	r24, Z+19	; 0x13
    d4bc:	94 89       	ldd	r25, Z+20	; 0x14
    d4be:	a5 89       	ldd	r26, Z+21	; 0x15
    d4c0:	b6 89       	ldd	r27, Z+22	; 0x16
    d4c2:	8c 8f       	std	Y+28, r24	; 0x1c
    d4c4:	9d 8f       	std	Y+29, r25	; 0x1d
    d4c6:	ae 8f       	std	Y+30, r26	; 0x1e
    d4c8:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d4ca:	f8 01       	movw	r30, r16
    d4cc:	87 89       	ldd	r24, Z+23	; 0x17
    d4ce:	90 8d       	ldd	r25, Z+24	; 0x18
    d4d0:	a1 8d       	ldd	r26, Z+25	; 0x19
    d4d2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    d4d4:	8a 8f       	std	Y+26, r24	; 0x1a
    d4d6:	9b 8f       	std	Y+27, r25	; 0x1b
    d->firstClusterHigh = firstCluster_ >> 16;
    d4d8:	ac 8b       	std	Y+20, r26	; 0x14
    d4da:	bd 8b       	std	Y+21, r27	; 0x15

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    d4dc:	e0 91 9b 24 	lds	r30, 0x249B
    d4e0:	f0 91 9c 24 	lds	r31, 0x249C
    d4e4:	30 97       	sbiw	r30, 0x00	; 0
    d4e6:	51 f0       	breq	.+20     	; 0xd4fc <_ZN10SdBaseFile4syncEv+0x76>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    d4e8:	be 01       	movw	r22, r28
    d4ea:	6a 5e       	subi	r22, 0xEA	; 234
    d4ec:	7f 4f       	sbci	r23, 0xFF	; 255
    d4ee:	ce 01       	movw	r24, r28
    d4f0:	48 96       	adiw	r24, 0x18	; 24
    d4f2:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
    d4f4:	88 8d       	ldd	r24, Y+24	; 0x18
    d4f6:	99 8d       	ldd	r25, Y+25	; 0x19
    d4f8:	8a 8b       	std	Y+18, r24	; 0x12
    d4fa:	9b 8b       	std	Y+19, r25	; 0x13
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    d4fc:	f8 01       	movw	r30, r16
    d4fe:	81 81       	ldd	r24, Z+1	; 0x01
    d500:	8f 77       	andi	r24, 0x7F	; 127
    d502:	81 83       	std	Z+1, r24	; 0x01
  }
  return vol_->cacheSync();
    d504:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    d508:	04 c0       	rjmp	.+8      	; 0xd512 <_ZN10SdBaseFile4syncEv+0x8c>

 fail:
  writeError = true;
    d50a:	81 e0       	ldi	r24, 0x01	; 1
    d50c:	f8 01       	movw	r30, r16
    d50e:	80 83       	st	Z, r24
  return false;
    d510:	80 e0       	ldi	r24, 0x00	; 0
}
    d512:	df 91       	pop	r29
    d514:	cf 91       	pop	r28
    d516:	1f 91       	pop	r17
    d518:	0f 91       	pop	r16
    d51a:	08 95       	ret

0000d51c <_ZN10SdBaseFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
bool SdBaseFile::close() {
    d51c:	cf 93       	push	r28
    d51e:	df 93       	push	r29
    d520:	ec 01       	movw	r28, r24
  bool rtn = sync();
    d522:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
  type_ = FAT_FILE_TYPE_CLOSED;
    d526:	1b 82       	std	Y+3, r1	; 0x03
  return rtn;
}
    d528:	df 91       	pop	r29
    d52a:	cf 91       	pop	r28
    d52c:	08 95       	ret

0000d52e <_ZN10SdBaseFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
bool SdBaseFile::truncate(uint32_t length) {
    d52e:	4f 92       	push	r4
    d530:	5f 92       	push	r5
    d532:	6f 92       	push	r6
    d534:	7f 92       	push	r7
    d536:	8f 92       	push	r8
    d538:	9f 92       	push	r9
    d53a:	af 92       	push	r10
    d53c:	bf 92       	push	r11
    d53e:	ef 92       	push	r14
    d540:	ff 92       	push	r15
    d542:	0f 93       	push	r16
    d544:	1f 93       	push	r17
    d546:	cf 93       	push	r28
    d548:	df 93       	push	r29
    d54a:	00 d0       	rcall	.+0      	; 0xd54c <_ZN10SdBaseFile8truncateEm+0x1e>
    d54c:	0f 92       	push	r0
    d54e:	cd b7       	in	r28, 0x3d	; 61
    d550:	de b7       	in	r29, 0x3e	; 62
    d552:	7c 01       	movw	r14, r24
    d554:	4a 01       	movw	r8, r20
    d556:	5b 01       	movw	r10, r22
  uint32_t newPos;
  // error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    d558:	fc 01       	movw	r30, r24
    d55a:	83 81       	ldd	r24, Z+3	; 0x03
    d55c:	81 30       	cpi	r24, 0x01	; 1
    d55e:	09 f0       	breq	.+2      	; 0xd562 <_ZN10SdBaseFile8truncateEm+0x34>
    d560:	85 c0       	rjmp	.+266    	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
    d562:	81 81       	ldd	r24, Z+1	; 0x01
    d564:	81 ff       	sbrs	r24, 1
    d566:	82 c0       	rjmp	.+260    	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
    d568:	94 c0       	rjmp	.+296    	; 0xd692 <_ZN10SdBaseFile8truncateEm+0x164>
  if (length > fileSize_) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    d56a:	00 97       	sbiw	r24, 0x00	; 0
    d56c:	a1 05       	cpc	r26, r1
    d56e:	b1 05       	cpc	r27, r1
    d570:	09 f4       	brne	.+2      	; 0xd574 <_ZN10SdBaseFile8truncateEm+0x46>
    d572:	7a c0       	rjmp	.+244    	; 0xd668 <_ZN10SdBaseFile8truncateEm+0x13a>

  // remember position for seek after truncation
  newPos = curPosition_ > length ? length : curPosition_;
    d574:	f7 01       	movw	r30, r14
    d576:	43 84       	ldd	r4, Z+11	; 0x0b
    d578:	54 84       	ldd	r5, Z+12	; 0x0c
    d57a:	65 84       	ldd	r6, Z+13	; 0x0d
    d57c:	76 84       	ldd	r7, Z+14	; 0x0e

  // position to last cluster in truncated file
  if (!seekSet(length)) {
    d57e:	c7 01       	movw	r24, r14
    d580:	b5 01       	movw	r22, r10
    d582:	a4 01       	movw	r20, r8
    d584:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d588:	88 23       	and	r24, r24
    d58a:	09 f4       	brne	.+2      	; 0xd58e <_ZN10SdBaseFile8truncateEm+0x60>
    d58c:	6f c0       	rjmp	.+222    	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
    d58e:	f7 01       	movw	r30, r14
    d590:	85 81       	ldd	r24, Z+5	; 0x05
    d592:	96 81       	ldd	r25, Z+6	; 0x06
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (length == 0) {
    d594:	81 14       	cp	r8, r1
    d596:	91 04       	cpc	r9, r1
    d598:	a1 04       	cpc	r10, r1
    d59a:	b1 04       	cpc	r11, r1
    d59c:	79 f4       	brne	.+30     	; 0xd5bc <_ZN10SdBaseFile8truncateEm+0x8e>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) {
    d59e:	47 89       	ldd	r20, Z+23	; 0x17
    d5a0:	50 8d       	ldd	r21, Z+24	; 0x18
    d5a2:	61 8d       	ldd	r22, Z+25	; 0x19
    d5a4:	72 8d       	ldd	r23, Z+26	; 0x1a
    d5a6:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <_ZN8SdVolume9freeChainEm>
    d5aa:	88 23       	and	r24, r24
    d5ac:	09 f4       	brne	.+2      	; 0xd5b0 <_ZN10SdBaseFile8truncateEm+0x82>
    d5ae:	5e c0       	rjmp	.+188    	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    firstCluster_ = 0;
    d5b0:	f7 01       	movw	r30, r14
    d5b2:	17 8a       	std	Z+23, r1	; 0x17
    d5b4:	10 8e       	std	Z+24, r1	; 0x18
    d5b6:	11 8e       	std	Z+25, r1	; 0x19
    d5b8:	12 8e       	std	Z+26, r1	; 0x1a
    d5ba:	3c c0       	rjmp	.+120    	; 0xd634 <_ZN10SdBaseFile8truncateEm+0x106>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) {
    d5bc:	f7 01       	movw	r30, r14
    d5be:	47 81       	ldd	r20, Z+7	; 0x07
    d5c0:	50 85       	ldd	r21, Z+8	; 0x08
    d5c2:	61 85       	ldd	r22, Z+9	; 0x09
    d5c4:	72 85       	ldd	r23, Z+10	; 0x0a
    d5c6:	9e 01       	movw	r18, r28
    d5c8:	2f 5f       	subi	r18, 0xFF	; 255
    d5ca:	3f 4f       	sbci	r19, 0xFF	; 255
    d5cc:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    d5d0:	88 23       	and	r24, r24
    d5d2:	09 f4       	brne	.+2      	; 0xd5d6 <_ZN10SdBaseFile8truncateEm+0xa8>
    d5d4:	4b c0       	rjmp	.+150    	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!vol_->isEOC(toFree)) {
    d5d6:	f7 01       	movw	r30, r14
    d5d8:	85 81       	ldd	r24, Z+5	; 0x05
    d5da:	96 81       	ldd	r25, Z+6	; 0x06
    d5dc:	49 81       	ldd	r20, Y+1	; 0x01
    d5de:	5a 81       	ldd	r21, Y+2	; 0x02
    d5e0:	6b 81       	ldd	r22, Y+3	; 0x03
    d5e2:	7c 81       	ldd	r23, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    d5e4:	fc 01       	movw	r30, r24
    d5e6:	27 89       	ldd	r18, Z+23	; 0x17
    d5e8:	20 31       	cpi	r18, 0x10	; 16
    d5ea:	49 f4       	brne	.+18     	; 0xd5fe <_ZN10SdBaseFile8truncateEm+0xd0>
    d5ec:	48 3f       	cpi	r20, 0xF8	; 248
    d5ee:	ff ef       	ldi	r31, 0xFF	; 255
    d5f0:	5f 07       	cpc	r21, r31
    d5f2:	f0 e0       	ldi	r31, 0x00	; 0
    d5f4:	6f 07       	cpc	r22, r31
    d5f6:	f0 e0       	ldi	r31, 0x00	; 0
    d5f8:	7f 07       	cpc	r23, r31
    d5fa:	e0 f4       	brcc	.+56     	; 0xd634 <_ZN10SdBaseFile8truncateEm+0x106>
    d5fc:	08 c0       	rjmp	.+16     	; 0xd60e <_ZN10SdBaseFile8truncateEm+0xe0>
    return  cluster >= FAT32EOC_MIN;
    d5fe:	48 3f       	cpi	r20, 0xF8	; 248
    d600:	2f ef       	ldi	r18, 0xFF	; 255
    d602:	52 07       	cpc	r21, r18
    d604:	2f ef       	ldi	r18, 0xFF	; 255
    d606:	62 07       	cpc	r22, r18
    d608:	2f e0       	ldi	r18, 0x0F	; 15
    d60a:	72 07       	cpc	r23, r18
    d60c:	98 f4       	brcc	.+38     	; 0xd634 <_ZN10SdBaseFile8truncateEm+0x106>
      // free extra clusters
      if (!vol_->freeChain(toFree)) {
    d60e:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <_ZN8SdVolume9freeChainEm>
    d612:	88 23       	and	r24, r24
    d614:	59 f1       	breq	.+86     	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    d616:	f7 01       	movw	r30, r14
    d618:	47 81       	ldd	r20, Z+7	; 0x07
    d61a:	50 85       	ldd	r21, Z+8	; 0x08
    d61c:	61 85       	ldd	r22, Z+9	; 0x09
    d61e:	72 85       	ldd	r23, Z+10	; 0x0a
    d620:	85 81       	ldd	r24, Z+5	; 0x05
    d622:	96 81       	ldd	r25, Z+6	; 0x06
    d624:	0f ef       	ldi	r16, 0xFF	; 255
    d626:	1f ef       	ldi	r17, 0xFF	; 255
    d628:	2f ef       	ldi	r18, 0xFF	; 255
    d62a:	3f e0       	ldi	r19, 0x0F	; 15
    d62c:	0e 94 73 74 	call	0xe8e6	; 0xe8e6 <_ZN8SdVolume6fatPutEmm>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) {
    d630:	88 23       	and	r24, r24
    d632:	e1 f0       	breq	.+56     	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  fileSize_ = length;
    d634:	f7 01       	movw	r30, r14
    d636:	83 8a       	std	Z+19, r8	; 0x13
    d638:	94 8a       	std	Z+20, r9	; 0x14
    d63a:	a5 8a       	std	Z+21, r10	; 0x15
    d63c:	b6 8a       	std	Z+22, r11	; 0x16

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    d63e:	81 81       	ldd	r24, Z+1	; 0x01
    d640:	80 68       	ori	r24, 0x80	; 128
    d642:	81 83       	std	Z+1, r24	; 0x01

  if (!sync()) {
    d644:	c7 01       	movw	r24, r14
    d646:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
    d64a:	88 23       	and	r24, r24
    d64c:	79 f0       	breq	.+30     	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // set file to correct position
  return seekSet(newPos);
    d64e:	b5 01       	movw	r22, r10
    d650:	a4 01       	movw	r20, r8
    d652:	48 14       	cp	r4, r8
    d654:	59 04       	cpc	r5, r9
    d656:	6a 04       	cpc	r6, r10
    d658:	7b 04       	cpc	r7, r11
    d65a:	10 f4       	brcc	.+4      	; 0xd660 <_ZN10SdBaseFile8truncateEm+0x132>
    d65c:	b3 01       	movw	r22, r6
    d65e:	a2 01       	movw	r20, r4
    d660:	c7 01       	movw	r24, r14
    d662:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d666:	03 c0       	rjmp	.+6      	; 0xd66e <_ZN10SdBaseFile8truncateEm+0x140>
  if (length > fileSize_) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    d668:	81 e0       	ldi	r24, 0x01	; 1
    d66a:	01 c0       	rjmp	.+2      	; 0xd66e <_ZN10SdBaseFile8truncateEm+0x140>
  }
  // set file to correct position
  return seekSet(newPos);

 fail:
  return false;
    d66c:	80 e0       	ldi	r24, 0x00	; 0
}
    d66e:	24 96       	adiw	r28, 0x04	; 4
    d670:	cd bf       	out	0x3d, r28	; 61
    d672:	de bf       	out	0x3e, r29	; 62
    d674:	df 91       	pop	r29
    d676:	cf 91       	pop	r28
    d678:	1f 91       	pop	r17
    d67a:	0f 91       	pop	r16
    d67c:	ff 90       	pop	r15
    d67e:	ef 90       	pop	r14
    d680:	bf 90       	pop	r11
    d682:	af 90       	pop	r10
    d684:	9f 90       	pop	r9
    d686:	8f 90       	pop	r8
    d688:	7f 90       	pop	r7
    d68a:	6f 90       	pop	r6
    d68c:	5f 90       	pop	r5
    d68e:	4f 90       	pop	r4
    d690:	08 95       	ret
  if (!isFile() || !(flags_ & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if length is greater than current size
  if (length > fileSize_) {
    d692:	f7 01       	movw	r30, r14
    d694:	83 89       	ldd	r24, Z+19	; 0x13
    d696:	94 89       	ldd	r25, Z+20	; 0x14
    d698:	a5 89       	ldd	r26, Z+21	; 0x15
    d69a:	b6 89       	ldd	r27, Z+22	; 0x16
    d69c:	84 17       	cp	r24, r20
    d69e:	95 07       	cpc	r25, r21
    d6a0:	a6 07       	cpc	r26, r22
    d6a2:	b7 07       	cpc	r27, r23
    d6a4:	08 f0       	brcs	.+2      	; 0xd6a8 <_ZN10SdBaseFile8truncateEm+0x17a>
    d6a6:	61 cf       	rjmp	.-318    	; 0xd56a <_ZN10SdBaseFile8truncateEm+0x3c>
    d6a8:	e1 cf       	rjmp	.-62     	; 0xd66c <_ZN10SdBaseFile8truncateEm+0x13e>

0000d6aa <_ZN10SdBaseFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
bool SdBaseFile::remove() {
    d6aa:	cf 93       	push	r28
    d6ac:	df 93       	push	r29
    d6ae:	ec 01       	movw	r28, r24
  dir_t* d;
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) {
    d6b0:	40 e0       	ldi	r20, 0x00	; 0
    d6b2:	50 e0       	ldi	r21, 0x00	; 0
    d6b4:	ba 01       	movw	r22, r20
    d6b6:	0e 94 97 6a 	call	0xd52e	; 0xd52e <_ZN10SdBaseFile8truncateEm>
    d6ba:	88 23       	and	r24, r24
    d6bc:	69 f0       	breq	.+26     	; 0xd6d8 <_ZN10SdBaseFile6removeEv+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache directory entry
  d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    d6be:	ce 01       	movw	r24, r28
    d6c0:	61 e0       	ldi	r22, 0x01	; 1
    d6c2:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN10SdBaseFile13cacheDirEntryEh>
  if (!d) {
    d6c6:	00 97       	sbiw	r24, 0x00	; 0
    d6c8:	39 f0       	breq	.+14     	; 0xd6d8 <_ZN10SdBaseFile6removeEv+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    d6ca:	25 ee       	ldi	r18, 0xE5	; 229
    d6cc:	fc 01       	movw	r30, r24
    d6ce:	20 83       	st	Z, r18

  // set this file closed
  type_ = FAT_FILE_TYPE_CLOSED;
    d6d0:	1b 82       	std	Y+3, r1	; 0x03

  // write entry to SD
  return vol_->cacheSync();
    d6d2:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    d6d6:	01 c0       	rjmp	.+2      	; 0xd6da <_ZN10SdBaseFile6removeEv+0x30>
  return true;

 fail:
  return false;
    d6d8:	80 e0       	ldi	r24, 0x00	; 0
}
    d6da:	df 91       	pop	r29
    d6dc:	cf 91       	pop	r28
    d6de:	08 95       	ret

0000d6e0 <_ZN10SdBaseFile5rmdirEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is not a directory, is the root
 * directory, is not empty, or an I/O error occurred.
 */
bool SdBaseFile::rmdir() {
    d6e0:	cf 93       	push	r28
    d6e2:	df 93       	push	r29
    d6e4:	ec 01       	movw	r28, r24
  // must be open subdirectory
  if (!isSubDir()) {
    d6e6:	8b 81       	ldd	r24, Y+3	; 0x03
    d6e8:	84 30       	cpi	r24, 0x04	; 4
    d6ea:	51 f5       	brne	.+84     	; 0xd740 <_ZN10SdBaseFile5rmdirEv+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  rewind();
    d6ec:	ce 01       	movw	r24, r28
    d6ee:	0e 94 8e 69 	call	0xd31c	; 0xd31c <_ZN10SdBaseFile6rewindEv>

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    d6f2:	10 c0       	rjmp	.+32     	; 0xd714 <_ZN10SdBaseFile5rmdirEv+0x34>
    dir_t* p = readDirCache();
    d6f4:	ce 01       	movw	r24, r28
    d6f6:	0e 94 ba 68 	call	0xd174	; 0xd174 <_ZN10SdBaseFile12readDirCacheEv>
    d6fa:	fc 01       	movw	r30, r24
    if (!p) {
    d6fc:	00 97       	sbiw	r24, 0x00	; 0
    d6fe:	01 f1       	breq	.+64     	; 0xd740 <_ZN10SdBaseFile5rmdirEv+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    d700:	80 81       	ld	r24, Z
    d702:	88 23       	and	r24, r24
    d704:	a1 f0       	breq	.+40     	; 0xd72e <_ZN10SdBaseFile5rmdirEv+0x4e>
    // skip empty slot, '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    d706:	85 3e       	cpi	r24, 0xE5	; 229
    d708:	29 f0       	breq	.+10     	; 0xd714 <_ZN10SdBaseFile5rmdirEv+0x34>
    d70a:	8e 32       	cpi	r24, 0x2E	; 46
    d70c:	19 f0       	breq	.+6      	; 0xd714 <_ZN10SdBaseFile5rmdirEv+0x34>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    d70e:	83 85       	ldd	r24, Z+11	; 0x0b
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) {
    d710:	83 ff       	sbrs	r24, 3
    d712:	16 c0       	rjmp	.+44     	; 0xd740 <_ZN10SdBaseFile5rmdirEv+0x60>
    goto fail;
  }
  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    d714:	4b 85       	ldd	r20, Y+11	; 0x0b
    d716:	5c 85       	ldd	r21, Y+12	; 0x0c
    d718:	6d 85       	ldd	r22, Y+13	; 0x0d
    d71a:	7e 85       	ldd	r23, Y+14	; 0x0e
    d71c:	8b 89       	ldd	r24, Y+19	; 0x13
    d71e:	9c 89       	ldd	r25, Y+20	; 0x14
    d720:	ad 89       	ldd	r26, Y+21	; 0x15
    d722:	be 89       	ldd	r27, Y+22	; 0x16
    d724:	48 17       	cp	r20, r24
    d726:	59 07       	cpc	r21, r25
    d728:	6a 07       	cpc	r22, r26
    d72a:	7b 07       	cpc	r23, r27
    d72c:	18 f3       	brcs	.-58     	; 0xd6f4 <_ZN10SdBaseFile5rmdirEv+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  type_ = FAT_FILE_TYPE_NORMAL;
    d72e:	81 e0       	ldi	r24, 0x01	; 1
    d730:	8b 83       	std	Y+3, r24	; 0x03
  flags_ |= O_WRITE;
    d732:	89 81       	ldd	r24, Y+1	; 0x01
    d734:	82 60       	ori	r24, 0x02	; 2
    d736:	89 83       	std	Y+1, r24	; 0x01
  return remove();
    d738:	ce 01       	movw	r24, r28
    d73a:	0e 94 55 6b 	call	0xd6aa	; 0xd6aa <_ZN10SdBaseFile6removeEv>
    d73e:	01 c0       	rjmp	.+2      	; 0xd742 <_ZN10SdBaseFile5rmdirEv+0x62>

 fail:
  return false;
    d740:	80 e0       	ldi	r24, 0x00	; 0
}
    d742:	df 91       	pop	r29
    d744:	cf 91       	pop	r28
    d746:	08 95       	ret

0000d748 <_ZN10SdBaseFile15openCachedEntryEhh>:

  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initialized
bool SdBaseFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    d748:	1f 93       	push	r17
    d74a:	cf 93       	push	r28
    d74c:	df 93       	push	r29
    d74e:	ec 01       	movw	r28, r24
    d750:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = &vol_->cacheAddress()->dir[dirIndex];
    d752:	e6 2f       	mov	r30, r22
    d754:	f0 e0       	ldi	r31, 0x00	; 0
    d756:	35 e0       	ldi	r19, 0x05	; 5
    d758:	ee 0f       	add	r30, r30
    d75a:	ff 1f       	adc	r31, r31
    d75c:	3a 95       	dec	r19
    d75e:	e1 f7       	brne	.-8      	; 0xd758 <_ZN10SdBaseFile15openCachedEntryEhh+0x10>
    d760:	e6 55       	subi	r30, 0x56	; 86
    d762:	fb 4d       	sbci	r31, 0xDB	; 219

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    d764:	83 85       	ldd	r24, Z+11	; 0x0b
    d766:	81 71       	andi	r24, 0x11	; 17
    d768:	21 f0       	breq	.+8      	; 0xd772 <_ZN10SdBaseFile15openCachedEntryEhh+0x2a>
    if (oflag & (O_WRITE | O_TRUNC)) {
    d76a:	84 2f       	mov	r24, r20
    d76c:	82 71       	andi	r24, 0x12	; 18
    d76e:	09 f0       	breq	.+2      	; 0xd772 <_ZN10SdBaseFile15openCachedEntryEhh+0x2a>
    d770:	58 c0       	rjmp	.+176    	; 0xd822 <_ZN10SdBaseFile15openCachedEntryEhh+0xda>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // remember location of directory entry on SD
  dirBlock_ = vol_->cacheBlockNumber();
    d772:	80 91 a6 24 	lds	r24, 0x24A6
    d776:	90 91 a7 24 	lds	r25, 0x24A7
    d77a:	a0 91 a8 24 	lds	r26, 0x24A8
    d77e:	b0 91 a9 24 	lds	r27, 0x24A9
    d782:	8f 87       	std	Y+15, r24	; 0x0f
    d784:	98 8b       	std	Y+16, r25	; 0x10
    d786:	a9 8b       	std	Y+17, r26	; 0x11
    d788:	ba 8b       	std	Y+18, r27	; 0x12
  dirIndex_ = dirIndex;
    d78a:	6c 83       	std	Y+4, r22	; 0x04

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    d78c:	44 89       	ldd	r20, Z+20	; 0x14
    d78e:	55 89       	ldd	r21, Z+21	; 0x15
    d790:	60 e0       	ldi	r22, 0x00	; 0
    d792:	70 e0       	ldi	r23, 0x00	; 0
    d794:	ba 01       	movw	r22, r20
    d796:	55 27       	eor	r21, r21
    d798:	44 27       	eor	r20, r20
  firstCluster_ |= p->firstClusterLow;
    d79a:	82 8d       	ldd	r24, Z+26	; 0x1a
    d79c:	93 8d       	ldd	r25, Z+27	; 0x1b
    d79e:	a0 e0       	ldi	r26, 0x00	; 0
    d7a0:	b0 e0       	ldi	r27, 0x00	; 0
    d7a2:	48 2b       	or	r20, r24
    d7a4:	59 2b       	or	r21, r25
    d7a6:	6a 2b       	or	r22, r26
    d7a8:	7b 2b       	or	r23, r27
    d7aa:	4f 8b       	std	Y+23, r20	; 0x17
    d7ac:	58 8f       	std	Y+24, r21	; 0x18
    d7ae:	69 8f       	std	Y+25, r22	; 0x19
    d7b0:	7a 8f       	std	Y+26, r23	; 0x1a
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file else false.
 */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    d7b2:	83 85       	ldd	r24, Z+11	; 0x0b
    d7b4:	90 e0       	ldi	r25, 0x00	; 0
    d7b6:	88 71       	andi	r24, 0x18	; 24
    d7b8:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    d7ba:	00 97       	sbiw	r24, 0x00	; 0
    d7bc:	51 f4       	brne	.+20     	; 0xd7d2 <_ZN10SdBaseFile15openCachedEntryEhh+0x8a>
    fileSize_ = p->fileSize;
    d7be:	84 8d       	ldd	r24, Z+28	; 0x1c
    d7c0:	95 8d       	ldd	r25, Z+29	; 0x1d
    d7c2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    d7c4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    d7c6:	8b 8b       	std	Y+19, r24	; 0x13
    d7c8:	9c 8b       	std	Y+20, r25	; 0x14
    d7ca:	ad 8b       	std	Y+21, r26	; 0x15
    d7cc:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    d7ce:	81 e0       	ldi	r24, 0x01	; 1
    d7d0:	09 c0       	rjmp	.+18     	; 0xd7e4 <_ZN10SdBaseFile15openCachedEntryEhh+0x9c>
  } else if (DIR_IS_SUBDIR(p)) {
    d7d2:	80 31       	cpi	r24, 0x10	; 16
    d7d4:	91 05       	cpc	r25, r1
    d7d6:	29 f5       	brne	.+74     	; 0xd822 <_ZN10SdBaseFile15openCachedEntryEhh+0xda>
    if (!setDirSize()) {
    d7d8:	ce 01       	movw	r24, r28
    d7da:	0e 94 94 69 	call	0xd328	; 0xd328 <_ZN10SdBaseFile10setDirSizeEv>
    d7de:	88 23       	and	r24, r24
    d7e0:	01 f1       	breq	.+64     	; 0xd822 <_ZN10SdBaseFile15openCachedEntryEhh+0xda>
      DBG_FAIL_MACRO;
      goto fail;
    }
    type_ = FAT_FILE_TYPE_SUBDIR;
    d7e2:	84 e0       	ldi	r24, 0x04	; 4
    d7e4:	8b 83       	std	Y+3, r24	; 0x03
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save open flags for read/write
  flags_ = oflag & F_OFLAG;
    d7e6:	81 2f       	mov	r24, r17
    d7e8:	8f 70       	andi	r24, 0x0F	; 15
    d7ea:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  curCluster_ = 0;
    d7ec:	1f 82       	std	Y+7, r1	; 0x07
    d7ee:	18 86       	std	Y+8, r1	; 0x08
    d7f0:	19 86       	std	Y+9, r1	; 0x09
    d7f2:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    d7f4:	1b 86       	std	Y+11, r1	; 0x0b
    d7f6:	1c 86       	std	Y+12, r1	; 0x0c
    d7f8:	1d 86       	std	Y+13, r1	; 0x0d
    d7fa:	1e 86       	std	Y+14, r1	; 0x0e
  if ((oflag & O_TRUNC) && !truncate(0)) {
    d7fc:	14 ff       	sbrs	r17, 4
    d7fe:	17 c0       	rjmp	.+46     	; 0xd82e <_ZN10SdBaseFile15openCachedEntryEhh+0xe6>
    d800:	ce 01       	movw	r24, r28
    d802:	40 e0       	ldi	r20, 0x00	; 0
    d804:	50 e0       	ldi	r21, 0x00	; 0
    d806:	ba 01       	movw	r22, r20
    d808:	0e 94 97 6a 	call	0xd52e	; 0xd52e <_ZN10SdBaseFile8truncateEm>
    d80c:	88 23       	and	r24, r24
    d80e:	49 f0       	breq	.+18     	; 0xd822 <_ZN10SdBaseFile15openCachedEntryEhh+0xda>
    d810:	0e c0       	rjmp	.+28     	; 0xd82e <_ZN10SdBaseFile15openCachedEntryEhh+0xe6>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}
    d812:	4b 89       	ldd	r20, Y+19	; 0x13
    d814:	5c 89       	ldd	r21, Y+20	; 0x14
    d816:	6d 89       	ldd	r22, Y+21	; 0x15
    d818:	7e 89       	ldd	r23, Y+22	; 0x16
    d81a:	ce 01       	movw	r24, r28
    d81c:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d820:	02 c0       	rjmp	.+4      	; 0xd826 <_ZN10SdBaseFile15openCachedEntryEhh+0xde>
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;

 fail:
  type_ = FAT_FILE_TYPE_CLOSED;
    d822:	1b 82       	std	Y+3, r1	; 0x03
  return false;
    d824:	80 e0       	ldi	r24, 0x00	; 0
}
    d826:	df 91       	pop	r29
    d828:	cf 91       	pop	r28
    d82a:	1f 91       	pop	r17
    d82c:	08 95       	ret
  curPosition_ = 0;
  if ((oflag & O_TRUNC) && !truncate(0)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;
    d82e:	15 fd       	sbrc	r17, 5
    d830:	f0 cf       	rjmp	.-32     	; 0xd812 <_ZN10SdBaseFile15openCachedEntryEhh+0xca>
    d832:	81 e0       	ldi	r24, 0x01	; 1
    d834:	f8 cf       	rjmp	.-16     	; 0xd826 <_ZN10SdBaseFile15openCachedEntryEhh+0xde>

0000d836 <_ZN10SdBaseFile4openEPS_jh>:
 * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
 *
 * See open() by path for definition of flags.
 * \return true for success or false for failure.
 */
bool SdBaseFile::open(SdBaseFile* dirFile, uint16_t index, uint8_t oflag) {
    d836:	cf 92       	push	r12
    d838:	df 92       	push	r13
    d83a:	ff 92       	push	r15
    d83c:	0f 93       	push	r16
    d83e:	1f 93       	push	r17
    d840:	cf 93       	push	r28
    d842:	df 93       	push	r29
    d844:	8c 01       	movw	r16, r24
    d846:	eb 01       	movw	r28, r22
    d848:	6a 01       	movw	r12, r20
    d84a:	f2 2e       	mov	r15, r18
  dir_t* p;

  vol_ = dirFile->vol_;
    d84c:	8d 81       	ldd	r24, Y+5	; 0x05
    d84e:	9e 81       	ldd	r25, Y+6	; 0x06
    d850:	f8 01       	movw	r30, r16
    d852:	85 83       	std	Z+5, r24	; 0x05
    d854:	96 83       	std	Z+6, r25	; 0x06

  // error if already open
  if (isOpen() || !dirFile) {
    d856:	83 81       	ldd	r24, Z+3	; 0x03
    d858:	88 23       	and	r24, r24
    d85a:	21 f5       	brne	.+72     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
    d85c:	20 97       	sbiw	r28, 0x00	; 0
    d85e:	59 f5       	brne	.+86     	; 0xd8b6 <_ZN10SdBaseFile4openEPS_jh+0x80>
    d860:	21 c0       	rjmp	.+66     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) {
    d862:	a6 01       	movw	r20, r12
    d864:	65 e0       	ldi	r22, 0x05	; 5
    d866:	44 0f       	add	r20, r20
    d868:	55 1f       	adc	r21, r21
    d86a:	6a 95       	dec	r22
    d86c:	e1 f7       	brne	.-8      	; 0xd866 <_ZN10SdBaseFile4openEPS_jh+0x30>
    d86e:	60 e0       	ldi	r22, 0x00	; 0
    d870:	70 e0       	ldi	r23, 0x00	; 0
    d872:	ce 01       	movw	r24, r28
    d874:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d878:	88 23       	and	r24, r24
    d87a:	a1 f0       	breq	.+40     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry into cache
  p = dirFile->readDirCache();
    d87c:	ce 01       	movw	r24, r28
    d87e:	0e 94 ba 68 	call	0xd174	; 0xd174 <_ZN10SdBaseFile12readDirCacheEv>
  if (!p) {
    d882:	00 97       	sbiw	r24, 0x00	; 0
    d884:	79 f0       	breq	.+30     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
    d886:	fc 01       	movw	r30, r24
    d888:	80 81       	ld	r24, Z
    d88a:	88 23       	and	r24, r24
    d88c:	59 f0       	breq	.+22     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
    d88e:	85 3e       	cpi	r24, 0xE5	; 229
    d890:	49 f0       	breq	.+18     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
    d892:	8e 32       	cpi	r24, 0x2E	; 46
    d894:	39 f0       	breq	.+14     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
    d896:	6c 2d       	mov	r22, r12
    d898:	6f 70       	andi	r22, 0x0F	; 15
    d89a:	c8 01       	movw	r24, r16
    d89c:	4f 2d       	mov	r20, r15
    d89e:	0e 94 a4 6b 	call	0xd748	; 0xd748 <_ZN10SdBaseFile15openCachedEntryEhh>
    d8a2:	01 c0       	rjmp	.+2      	; 0xd8a6 <_ZN10SdBaseFile4openEPS_jh+0x70>

 fail:

  return false;
    d8a4:	80 e0       	ldi	r24, 0x00	; 0
}
    d8a6:	df 91       	pop	r29
    d8a8:	cf 91       	pop	r28
    d8aa:	1f 91       	pop	r17
    d8ac:	0f 91       	pop	r16
    d8ae:	ff 90       	pop	r15
    d8b0:	df 90       	pop	r13
    d8b2:	cf 90       	pop	r12
    d8b4:	08 95       	ret
    DBG_FAIL_MACRO;
    goto fail;
  }

  // don't open existing file if O_EXCL - user call error
  if (oflag & O_EXCL) {
    d8b6:	27 ff       	sbrs	r18, 7
    d8b8:	d4 cf       	rjmp	.-88     	; 0xd862 <_ZN10SdBaseFile4openEPS_jh+0x2c>
    d8ba:	f4 cf       	rjmp	.-24     	; 0xd8a4 <_ZN10SdBaseFile4openEPS_jh+0x6e>

0000d8bc <_ZN10SdBaseFile8rmRfStarEv>:
 * a directory that has a long name.  See remove() and rmdir().
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::rmRfStar() {
    d8bc:	8f 92       	push	r8
    d8be:	9f 92       	push	r9
    d8c0:	af 92       	push	r10
    d8c2:	bf 92       	push	r11
    d8c4:	ef 92       	push	r14
    d8c6:	ff 92       	push	r15
    d8c8:	0f 93       	push	r16
    d8ca:	1f 93       	push	r17
    d8cc:	cf 93       	push	r28
    d8ce:	df 93       	push	r29
    d8d0:	cd b7       	in	r28, 0x3d	; 61
    d8d2:	de b7       	in	r29, 0x3e	; 62
    d8d4:	6b 97       	sbiw	r28, 0x1b	; 27
    d8d6:	cd bf       	out	0x3d, r28	; 61
    d8d8:	de bf       	out	0x3e, r29	; 62
    d8da:	7c 01       	movw	r14, r24
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    d8dc:	19 82       	std	Y+1, r1	; 0x01
    d8de:	1c 82       	std	Y+4, r1	; 0x04
  uint16_t index;
  SdBaseFile f;
  rewind();
    d8e0:	0e 94 8e 69 	call	0xd31c	; 0xd31c <_ZN10SdBaseFile6rewindEv>
  while (curPosition_ < fileSize_) {
    d8e4:	55 c0       	rjmp	.+170    	; 0xd990 <_ZN10SdBaseFile8rmRfStarEv+0xd4>
    // remember position
    index = curPosition_/32;

    dir_t* p = readDirCache();
    d8e6:	c7 01       	movw	r24, r14
    d8e8:	0e 94 ba 68 	call	0xd174	; 0xd174 <_ZN10SdBaseFile12readDirCacheEv>
    d8ec:	fc 01       	movw	r30, r24
    if (!p) {
    d8ee:	00 97       	sbiw	r24, 0x00	; 0
    d8f0:	09 f4       	brne	.+2      	; 0xd8f4 <_ZN10SdBaseFile8rmRfStarEv+0x38>
    d8f2:	66 c0       	rjmp	.+204    	; 0xd9c0 <_ZN10SdBaseFile8rmRfStarEv+0x104>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last entry
    if (p->name[0] == DIR_NAME_FREE) break;
    d8f4:	80 81       	ld	r24, Z
    d8f6:	88 23       	and	r24, r24
    d8f8:	09 f4       	brne	.+2      	; 0xd8fc <_ZN10SdBaseFile8rmRfStarEv+0x40>
    d8fa:	59 c0       	rjmp	.+178    	; 0xd9ae <_ZN10SdBaseFile8rmRfStarEv+0xf2>

    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    d8fc:	85 3e       	cpi	r24, 0xE5	; 229
    d8fe:	09 f4       	brne	.+2      	; 0xd902 <_ZN10SdBaseFile8rmRfStarEv+0x46>
    d900:	47 c0       	rjmp	.+142    	; 0xd990 <_ZN10SdBaseFile8rmRfStarEv+0xd4>
    d902:	8e 32       	cpi	r24, 0x2E	; 46
    d904:	09 f4       	brne	.+2      	; 0xd908 <_ZN10SdBaseFile8rmRfStarEv+0x4c>
    d906:	44 c0       	rjmp	.+136    	; 0xd990 <_ZN10SdBaseFile8rmRfStarEv+0xd4>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    d908:	83 85       	ldd	r24, Z+11	; 0x0b

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    d90a:	83 fd       	sbrc	r24, 3
    d90c:	41 c0       	rjmp	.+130    	; 0xd990 <_ZN10SdBaseFile8rmRfStarEv+0xd4>
  uint16_t index;
  SdBaseFile f;
  rewind();
  while (curPosition_ < fileSize_) {
    // remember position
    index = curPosition_/32;
    d90e:	95 01       	movw	r18, r10
    d910:	84 01       	movw	r16, r8
    d912:	f5 e0       	ldi	r31, 0x05	; 5
    d914:	36 95       	lsr	r19
    d916:	27 95       	ror	r18
    d918:	17 95       	ror	r17
    d91a:	07 95       	ror	r16
    d91c:	fa 95       	dec	r31
    d91e:	d1 f7       	brne	.-12     	; 0xd914 <_ZN10SdBaseFile8rmRfStarEv+0x58>
    d920:	48 01       	movw	r8, r16
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    if (!f.open(this, index, O_READ)) {
    d922:	ce 01       	movw	r24, r28
    d924:	01 96       	adiw	r24, 0x01	; 1
    d926:	b7 01       	movw	r22, r14
    d928:	a8 01       	movw	r20, r16
    d92a:	21 e0       	ldi	r18, 0x01	; 1
    d92c:	0e 94 1b 6c 	call	0xd836	; 0xd836 <_ZN10SdBaseFile4openEPS_jh>
    d930:	88 23       	and	r24, r24
    d932:	09 f4       	brne	.+2      	; 0xd936 <_ZN10SdBaseFile8rmRfStarEv+0x7a>
    d934:	45 c0       	rjmp	.+138    	; 0xd9c0 <_ZN10SdBaseFile8rmRfStarEv+0x104>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f.isSubDir()) {
    d936:	8c 81       	ldd	r24, Y+4	; 0x04
    d938:	84 30       	cpi	r24, 0x04	; 4
    d93a:	29 f4       	brne	.+10     	; 0xd946 <_ZN10SdBaseFile8rmRfStarEv+0x8a>
      // recursively delete
      if (!f.rmRfStar()) {
    d93c:	ce 01       	movw	r24, r28
    d93e:	01 96       	adiw	r24, 0x01	; 1
    d940:	0e 94 5e 6c 	call	0xd8bc	; 0xd8bc <_ZN10SdBaseFile8rmRfStarEv>
    d944:	07 c0       	rjmp	.+14     	; 0xd954 <_ZN10SdBaseFile8rmRfStarEv+0x98>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      // ignore read-only
      f.flags_ |= O_WRITE;
    d946:	8a 81       	ldd	r24, Y+2	; 0x02
    d948:	82 60       	ori	r24, 0x02	; 2
    d94a:	8a 83       	std	Y+2, r24	; 0x02
      if (!f.remove()) {
    d94c:	ce 01       	movw	r24, r28
    d94e:	01 96       	adiw	r24, 0x01	; 1
    d950:	0e 94 55 6b 	call	0xd6aa	; 0xd6aa <_ZN10SdBaseFile6removeEv>
    d954:	88 23       	and	r24, r24
    d956:	a1 f1       	breq	.+104    	; 0xd9c0 <_ZN10SdBaseFile8rmRfStarEv+0x104>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    // position to next entry if required
    if (curPosition_ != (32UL*(index + 1))) {
    d958:	08 94       	sec
    d95a:	81 1c       	adc	r8, r1
    d95c:	91 1c       	adc	r9, r1
    d95e:	a4 01       	movw	r20, r8
    d960:	60 e0       	ldi	r22, 0x00	; 0
    d962:	70 e0       	ldi	r23, 0x00	; 0
    d964:	e5 e0       	ldi	r30, 0x05	; 5
    d966:	44 0f       	add	r20, r20
    d968:	55 1f       	adc	r21, r21
    d96a:	66 1f       	adc	r22, r22
    d96c:	77 1f       	adc	r23, r23
    d96e:	ea 95       	dec	r30
    d970:	d1 f7       	brne	.-12     	; 0xd966 <_ZN10SdBaseFile8rmRfStarEv+0xaa>
    d972:	f7 01       	movw	r30, r14
    d974:	83 85       	ldd	r24, Z+11	; 0x0b
    d976:	94 85       	ldd	r25, Z+12	; 0x0c
    d978:	a5 85       	ldd	r26, Z+13	; 0x0d
    d97a:	b6 85       	ldd	r27, Z+14	; 0x0e
    d97c:	84 17       	cp	r24, r20
    d97e:	95 07       	cpc	r25, r21
    d980:	a6 07       	cpc	r26, r22
    d982:	b7 07       	cpc	r27, r23
    d984:	29 f0       	breq	.+10     	; 0xd990 <_ZN10SdBaseFile8rmRfStarEv+0xd4>
      if (!seekSet(32UL*(index + 1))) {
    d986:	c7 01       	movw	r24, r14
    d988:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    d98c:	88 23       	and	r24, r24
    d98e:	c1 f0       	breq	.+48     	; 0xd9c0 <_ZN10SdBaseFile8rmRfStarEv+0x104>
 */
bool SdBaseFile::rmRfStar() {
  uint16_t index;
  SdBaseFile f;
  rewind();
  while (curPosition_ < fileSize_) {
    d990:	f7 01       	movw	r30, r14
    d992:	83 84       	ldd	r8, Z+11	; 0x0b
    d994:	94 84       	ldd	r9, Z+12	; 0x0c
    d996:	a5 84       	ldd	r10, Z+13	; 0x0d
    d998:	b6 84       	ldd	r11, Z+14	; 0x0e
    d99a:	83 89       	ldd	r24, Z+19	; 0x13
    d99c:	94 89       	ldd	r25, Z+20	; 0x14
    d99e:	a5 89       	ldd	r26, Z+21	; 0x15
    d9a0:	b6 89       	ldd	r27, Z+22	; 0x16
    d9a2:	88 16       	cp	r8, r24
    d9a4:	99 06       	cpc	r9, r25
    d9a6:	aa 06       	cpc	r10, r26
    d9a8:	bb 06       	cpc	r11, r27
    d9aa:	08 f4       	brcc	.+2      	; 0xd9ae <_ZN10SdBaseFile8rmRfStarEv+0xf2>
    d9ac:	9c cf       	rjmp	.-200    	; 0xd8e6 <_ZN10SdBaseFile8rmRfStarEv+0x2a>
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a subdirectory else false. */
  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is the root directory. */
  bool isRoot() const {
    return type_ == FAT_FILE_TYPE_ROOT_FIXED || type_ == FAT_FILE_TYPE_ROOT32;
    d9ae:	f7 01       	movw	r30, r14
    d9b0:	83 81       	ldd	r24, Z+3	; 0x03
    d9b2:	82 50       	subi	r24, 0x02	; 2
        goto fail;
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    d9b4:	82 30       	cpi	r24, 0x02	; 2
    d9b6:	30 f0       	brcs	.+12     	; 0xd9c4 <_ZN10SdBaseFile8rmRfStarEv+0x108>
    if (!rmdir()) {
    d9b8:	c7 01       	movw	r24, r14
    d9ba:	0e 94 70 6b 	call	0xd6e0	; 0xd6e0 <_ZN10SdBaseFile5rmdirEv>
    d9be:	03 c0       	rjmp	.+6      	; 0xd9c6 <_ZN10SdBaseFile8rmRfStarEv+0x10a>
    }
  }
  return true;

 fail:
  return false;
    d9c0:	80 e0       	ldi	r24, 0x00	; 0
    d9c2:	01 c0       	rjmp	.+2      	; 0xd9c6 <_ZN10SdBaseFile8rmRfStarEv+0x10a>
    if (!rmdir()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return true;
    d9c4:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  return false;
}
    d9c6:	6b 96       	adiw	r28, 0x1b	; 27
    d9c8:	cd bf       	out	0x3d, r28	; 61
    d9ca:	de bf       	out	0x3e, r29	; 62
    d9cc:	df 91       	pop	r29
    d9ce:	cf 91       	pop	r28
    d9d0:	1f 91       	pop	r17
    d9d2:	0f 91       	pop	r16
    d9d4:	ff 90       	pop	r15
    d9d6:	ef 90       	pop	r14
    d9d8:	bf 90       	pop	r11
    d9da:	af 90       	pop	r10
    d9dc:	9f 90       	pop	r9
    d9de:	8f 90       	pop	r8
    d9e0:	08 95       	ret

0000d9e2 <_ZN10SdBaseFile2lsEP5Printhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
    d9e2:	7f 92       	push	r7
    d9e4:	8f 92       	push	r8
    d9e6:	9f 92       	push	r9
    d9e8:	af 92       	push	r10
    d9ea:	bf 92       	push	r11
    d9ec:	cf 92       	push	r12
    d9ee:	df 92       	push	r13
    d9f0:	ef 92       	push	r14
    d9f2:	ff 92       	push	r15
    d9f4:	0f 93       	push	r16
    d9f6:	1f 93       	push	r17
    d9f8:	cf 93       	push	r28
    d9fa:	df 93       	push	r29
    d9fc:	cd b7       	in	r28, 0x3d	; 61
    d9fe:	de b7       	in	r29, 0x3e	; 62
    da00:	6b 97       	sbiw	r28, 0x1b	; 27
    da02:	cd bf       	out	0x3d, r28	; 61
    da04:	de bf       	out	0x3e, r29	; 62
    da06:	7c 01       	movw	r14, r24
    da08:	4b 01       	movw	r8, r22
    da0a:	d4 2e       	mov	r13, r20
    da0c:	c2 2e       	mov	r12, r18
  rewind();
    da0e:	0e 94 8e 69 	call	0xd31c	; 0xd31c <_ZN10SdBaseFile6rewindEv>
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    if (status > 1 && (flags & LS_R)) {
    da12:	ad 2c       	mov	r10, r13
    da14:	bb 24       	eor	r11, r11
    da16:	84 e0       	ldi	r24, 0x04	; 4
    da18:	a8 22       	and	r10, r24
    da1a:	bb 24       	eor	r11, r11
      uint16_t index = curPosition()/32 - 1;
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
    da1c:	12 e0       	ldi	r17, 0x02	; 2
    da1e:	71 2e       	mov	r7, r17
    da20:	7c 0c       	add	r7, r12
 * list to indicate subdirectory level.
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
  rewind();
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    da22:	30 c0       	rjmp	.+96     	; 0xda84 <_ZN10SdBaseFile2lsEP5Printhh+0xa2>
    if (status > 1 && (flags & LS_R)) {
    da24:	82 30       	cpi	r24, 0x02	; 2
    da26:	74 f1       	brlt	.+92     	; 0xda84 <_ZN10SdBaseFile2lsEP5Printhh+0xa2>
    da28:	a1 14       	cp	r10, r1
    da2a:	b1 04       	cpc	r11, r1
    da2c:	59 f1       	breq	.+86     	; 0xda84 <_ZN10SdBaseFile2lsEP5Printhh+0xa2>
      uint16_t index = curPosition()/32 - 1;
    da2e:	f7 01       	movw	r30, r14
    da30:	03 85       	ldd	r16, Z+11	; 0x0b
    da32:	14 85       	ldd	r17, Z+12	; 0x0c
    da34:	25 85       	ldd	r18, Z+13	; 0x0d
    da36:	36 85       	ldd	r19, Z+14	; 0x0e
    da38:	b5 e0       	ldi	r27, 0x05	; 5
    da3a:	36 95       	lsr	r19
    da3c:	27 95       	ror	r18
    da3e:	17 95       	ror	r17
    da40:	07 95       	ror	r16
    da42:	ba 95       	dec	r27
    da44:	d1 f7       	brne	.-12     	; 0xda3a <_ZN10SdBaseFile2lsEP5Printhh+0x58>
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    da46:	19 82       	std	Y+1, r1	; 0x01
    da48:	1c 82       	std	Y+4, r1	; 0x04
    da4a:	a8 01       	movw	r20, r16
    da4c:	41 50       	subi	r20, 0x01	; 1
    da4e:	50 40       	sbci	r21, 0x00	; 0
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
    da50:	ce 01       	movw	r24, r28
    da52:	01 96       	adiw	r24, 0x01	; 1
    da54:	b7 01       	movw	r22, r14
    da56:	21 e0       	ldi	r18, 0x01	; 1
    da58:	0e 94 1b 6c 	call	0xd836	; 0xd836 <_ZN10SdBaseFile4openEPS_jh>
    da5c:	88 23       	and	r24, r24
    da5e:	39 f0       	breq	.+14     	; 0xda6e <_ZN10SdBaseFile2lsEP5Printhh+0x8c>
    da60:	ce 01       	movw	r24, r28
    da62:	01 96       	adiw	r24, 0x01	; 1
    da64:	b4 01       	movw	r22, r8
    da66:	4d 2d       	mov	r20, r13
    da68:	27 2d       	mov	r18, r7
    da6a:	0e 94 f1 6c 	call	0xd9e2	; 0xd9e2 <_ZN10SdBaseFile2lsEP5Printhh>
      seekSet(32 * (index + 1));
    da6e:	a8 01       	movw	r20, r16
    da70:	a5 e0       	ldi	r26, 0x05	; 5
    da72:	44 0f       	add	r20, r20
    da74:	55 1f       	adc	r21, r21
    da76:	aa 95       	dec	r26
    da78:	e1 f7       	brne	.-8      	; 0xda72 <_ZN10SdBaseFile2lsEP5Printhh+0x90>
    da7a:	60 e0       	ldi	r22, 0x00	; 0
    da7c:	70 e0       	ldi	r23, 0x00	; 0
    da7e:	c7 01       	movw	r24, r14
    da80:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
 * list to indicate subdirectory level.
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
  rewind();
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    da84:	c7 01       	movw	r24, r14
    da86:	b4 01       	movw	r22, r8
    da88:	4d 2d       	mov	r20, r13
    da8a:	2c 2d       	mov	r18, r12
    da8c:	0e 94 eb 67 	call	0xcfd6	; 0xcfd6 <_ZN10SdBaseFile11lsPrintNextEP5Printhh>
    da90:	88 23       	and	r24, r24
    da92:	41 f6       	brne	.-112    	; 0xda24 <_ZN10SdBaseFile2lsEP5Printhh+0x42>
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
      seekSet(32 * (index + 1));
    }
  }
}
    da94:	6b 96       	adiw	r28, 0x1b	; 27
    da96:	cd bf       	out	0x3d, r28	; 61
    da98:	de bf       	out	0x3e, r29	; 62
    da9a:	df 91       	pop	r29
    da9c:	cf 91       	pop	r28
    da9e:	1f 91       	pop	r17
    daa0:	0f 91       	pop	r16
    daa2:	ff 90       	pop	r15
    daa4:	ef 90       	pop	r14
    daa6:	df 90       	pop	r13
    daa8:	cf 90       	pop	r12
    daaa:	bf 90       	pop	r11
    daac:	af 90       	pop	r10
    daae:	9f 90       	pop	r9
    dab0:	8f 90       	pop	r8
    dab2:	7f 90       	pop	r7
    dab4:	08 95       	ret

0000dab6 <_ZN10SdBaseFile4openEPS_PKhh>:
  return false;
}
//------------------------------------------------------------------------------
// open with filename in dname
bool SdBaseFile::open(SdBaseFile* dirFile,
  const uint8_t dname[11], uint8_t oflag) {
    dab6:	7f 92       	push	r7
    dab8:	8f 92       	push	r8
    daba:	9f 92       	push	r9
    dabc:	af 92       	push	r10
    dabe:	bf 92       	push	r11
    dac0:	cf 92       	push	r12
    dac2:	df 92       	push	r13
    dac4:	ef 92       	push	r14
    dac6:	ff 92       	push	r15
    dac8:	0f 93       	push	r16
    daca:	1f 93       	push	r17
    dacc:	cf 93       	push	r28
    dace:	df 93       	push	r29
    dad0:	5c 01       	movw	r10, r24
    dad2:	eb 01       	movw	r28, r22
    dad4:	94 2e       	mov	r9, r20
    dad6:	85 2e       	mov	r8, r21
    dad8:	72 2e       	mov	r7, r18
  bool emptyFound = false;
  bool fileFound = false;
  uint8_t index;
  dir_t* p;

  vol_ = dirFile->vol_;
    dada:	8d 81       	ldd	r24, Y+5	; 0x05
    dadc:	9e 81       	ldd	r25, Y+6	; 0x06
    dade:	f5 01       	movw	r30, r10
    dae0:	85 83       	std	Z+5, r24	; 0x05
    dae2:	96 83       	std	Z+6, r25	; 0x06

  dirFile->rewind();
    dae4:	cb 01       	movw	r24, r22
    dae6:	0e 94 8e 69 	call	0xd31c	; 0xd31c <_ZN10SdBaseFile6rewindEv>
//------------------------------------------------------------------------------
// open with filename in dname
bool SdBaseFile::open(SdBaseFile* dirFile,
  const uint8_t dname[11], uint8_t oflag) {
  cache_t* pc;
  bool emptyFound = false;
    daea:	10 e0       	ldi	r17, 0x00	; 0
  vol_ = dirFile->vol_;

  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    daec:	37 c0       	rjmp	.+110    	; 0xdb5c <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
    index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    daee:	ce 01       	movw	r24, r28
    daf0:	0e 94 ba 68 	call	0xd174	; 0xd174 <_ZN10SdBaseFile12readDirCacheEv>
    daf4:	bc 01       	movw	r22, r24
    if (!p) {
    daf6:	00 97       	sbiw	r24, 0x00	; 0
    daf8:	09 f4       	brne	.+2      	; 0xdafc <_ZN10SdBaseFile4openEPS_PKhh+0x46>
    dafa:	8e c0       	rjmp	.+284    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>

  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    index = 0XF & (dirFile->curPosition_ >> 5);
    dafc:	d7 01       	movw	r26, r14
    dafe:	c6 01       	movw	r24, r12
    db00:	45 e0       	ldi	r20, 0x05	; 5
    db02:	b6 95       	lsr	r27
    db04:	a7 95       	ror	r26
    db06:	97 95       	ror	r25
    db08:	87 95       	ror	r24
    db0a:	4a 95       	dec	r20
    db0c:	d1 f7       	brne	.-12     	; 0xdb02 <_ZN10SdBaseFile4openEPS_PKhh+0x4c>
    db0e:	08 2f       	mov	r16, r24
    db10:	0f 70       	andi	r16, 0x0F	; 15
    p = dirFile->readDirCache();
    if (!p) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    db12:	fb 01       	movw	r30, r22
    db14:	80 81       	ld	r24, Z
    db16:	88 23       	and	r24, r24
    db18:	11 f0       	breq	.+4      	; 0xdb1e <_ZN10SdBaseFile4openEPS_PKhh+0x68>
    db1a:	85 3e       	cpi	r24, 0xE5	; 229
    db1c:	b1 f4       	brne	.+44     	; 0xdb4a <_ZN10SdBaseFile4openEPS_PKhh+0x94>
      // remember first empty slot
      if (!emptyFound) {
    db1e:	11 23       	and	r17, r17
    db20:	79 f4       	brne	.+30     	; 0xdb40 <_ZN10SdBaseFile4openEPS_PKhh+0x8a>
        dirBlock_ = vol_->cacheBlockNumber();
    db22:	80 91 a6 24 	lds	r24, 0x24A6
    db26:	90 91 a7 24 	lds	r25, 0x24A7
    db2a:	a0 91 a8 24 	lds	r26, 0x24A8
    db2e:	b0 91 a9 24 	lds	r27, 0x24A9
    db32:	f5 01       	movw	r30, r10
    db34:	87 87       	std	Z+15, r24	; 0x0f
    db36:	90 8b       	std	Z+16, r25	; 0x10
    db38:	a1 8b       	std	Z+17, r26	; 0x11
    db3a:	b2 8b       	std	Z+18, r27	; 0x12
        dirIndex_ = index;
    db3c:	04 83       	std	Z+4, r16	; 0x04
        emptyFound = true;
    db3e:	11 e0       	ldi	r17, 0x01	; 1
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    db40:	fb 01       	movw	r30, r22
    db42:	80 81       	ld	r24, Z
    db44:	88 23       	and	r24, r24
    db46:	51 f4       	brne	.+20     	; 0xdb5c <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
    db48:	17 c0       	rjmp	.+46     	; 0xdb78 <_ZN10SdBaseFile4openEPS_PKhh+0xc2>
    } else if (!memcmp(dname, p->name, 11)) {
    db4a:	89 2d       	mov	r24, r9
    db4c:	98 2d       	mov	r25, r8
    db4e:	4b e0       	ldi	r20, 0x0B	; 11
    db50:	50 e0       	ldi	r21, 0x00	; 0
    db52:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <memcmp>
    db56:	00 97       	sbiw	r24, 0x00	; 0
    db58:	09 f4       	brne	.+2      	; 0xdb5c <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
    db5a:	6d c0       	rjmp	.+218    	; 0xdc36 <_ZN10SdBaseFile4openEPS_PKhh+0x180>
  vol_ = dirFile->vol_;

  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    db5c:	cb 84       	ldd	r12, Y+11	; 0x0b
    db5e:	dc 84       	ldd	r13, Y+12	; 0x0c
    db60:	ed 84       	ldd	r14, Y+13	; 0x0d
    db62:	fe 84       	ldd	r15, Y+14	; 0x0e
    db64:	8b 89       	ldd	r24, Y+19	; 0x13
    db66:	9c 89       	ldd	r25, Y+20	; 0x14
    db68:	ad 89       	ldd	r26, Y+21	; 0x15
    db6a:	be 89       	ldd	r27, Y+22	; 0x16
    db6c:	c8 16       	cp	r12, r24
    db6e:	d9 06       	cpc	r13, r25
    db70:	ea 06       	cpc	r14, r26
    db72:	fb 06       	cpc	r15, r27
    db74:	08 f4       	brcc	.+2      	; 0xdb78 <_ZN10SdBaseFile4openEPS_PKhh+0xc2>
    db76:	bb cf       	rjmp	.-138    	; 0xdaee <_ZN10SdBaseFile4openEPS_PKhh+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create unless O_CREAT and O_WRITE
    if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    db78:	76 fe       	sbrs	r7, 6
    db7a:	4e c0       	rjmp	.+156    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
    db7c:	71 fe       	sbrs	r7, 1
    db7e:	4c c0       	rjmp	.+152    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (emptyFound) {
    db80:	11 23       	and	r17, r17
    db82:	51 f0       	breq	.+20     	; 0xdb98 <_ZN10SdBaseFile4openEPS_PKhh+0xe2>
      index = dirIndex_;
    db84:	f5 01       	movw	r30, r10
    db86:	04 81       	ldd	r16, Z+4	; 0x04
      p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    db88:	c5 01       	movw	r24, r10
    db8a:	61 e0       	ldi	r22, 0x01	; 1
    db8c:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN10SdBaseFile13cacheDirEntryEh>
    db90:	ec 01       	movw	r28, r24
      if (!p) {
    db92:	00 97       	sbiw	r24, 0x00	; 0
    db94:	59 f4       	brne	.+22     	; 0xdbac <_ZN10SdBaseFile4openEPS_PKhh+0xf6>
    db96:	40 c0       	rjmp	.+128    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (dirFile->type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    db98:	8b 81       	ldd	r24, Y+3	; 0x03
    db9a:	82 30       	cpi	r24, 0x02	; 2
    db9c:	e9 f1       	breq	.+122    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // add and zero cluster for dirFile - first cluster is in cache for write
      pc = dirFile->addDirCluster();
    db9e:	ce 01       	movw	r24, r28
    dba0:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <_ZN10SdBaseFile13addDirClusterEv>
      if (!pc) {
    dba4:	00 97       	sbiw	r24, 0x00	; 0
    dba6:	c1 f1       	breq	.+112    	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // use first entry in cluster
      p = pc->dir;
    dba8:	ec 01       	movw	r28, r24
      index = 0;
    dbaa:	00 e0       	ldi	r16, 0x00	; 0
    }
    // initialize as empty file
    memset(p, 0, sizeof(dir_t));
    dbac:	80 e2       	ldi	r24, 0x20	; 32
    dbae:	fe 01       	movw	r30, r28
    dbb0:	11 92       	st	Z+, r1
    dbb2:	8a 95       	dec	r24
    dbb4:	e9 f7       	brne	.-6      	; 0xdbb0 <_ZN10SdBaseFile4openEPS_PKhh+0xfa>
    memcpy(p->name, dname, 11);
    dbb6:	fe 01       	movw	r30, r28
    dbb8:	a9 2d       	mov	r26, r9
    dbba:	b8 2d       	mov	r27, r8
    dbbc:	8b e0       	ldi	r24, 0x0B	; 11
    dbbe:	0d 90       	ld	r0, X+
    dbc0:	01 92       	st	Z+, r0
    dbc2:	81 50       	subi	r24, 0x01	; 1
    dbc4:	e1 f7       	brne	.-8      	; 0xdbbe <_ZN10SdBaseFile4openEPS_PKhh+0x108>

    // set timestamps
    if (dateTime_) {
    dbc6:	e0 91 9b 24 	lds	r30, 0x249B
    dbca:	f0 91 9c 24 	lds	r31, 0x249C
    dbce:	30 97       	sbiw	r30, 0x00	; 0
    dbd0:	39 f0       	breq	.+14     	; 0xdbe0 <_ZN10SdBaseFile4openEPS_PKhh+0x12a>
      // call user date/time function
      dateTime_(&p->creationDate, &p->creationTime);
    dbd2:	be 01       	movw	r22, r28
    dbd4:	62 5f       	subi	r22, 0xF2	; 242
    dbd6:	7f 4f       	sbci	r23, 0xFF	; 255
    dbd8:	ce 01       	movw	r24, r28
    dbda:	40 96       	adiw	r24, 0x10	; 16
    dbdc:	19 95       	eicall
    dbde:	08 c0       	rjmp	.+16     	; 0xdbf0 <_ZN10SdBaseFile4openEPS_PKhh+0x13a>
    } else {
      // use default date/time
      p->creationDate = FAT_DEFAULT_DATE;
    dbe0:	81 e2       	ldi	r24, 0x21	; 33
    dbe2:	98 e2       	ldi	r25, 0x28	; 40
    dbe4:	88 8b       	std	Y+16, r24	; 0x10
    dbe6:	99 8b       	std	Y+17, r25	; 0x11
      p->creationTime = FAT_DEFAULT_TIME;
    dbe8:	80 e0       	ldi	r24, 0x00	; 0
    dbea:	98 e0       	ldi	r25, 0x08	; 8
    dbec:	8e 87       	std	Y+14, r24	; 0x0e
    dbee:	9f 87       	std	Y+15, r25	; 0x0f
    }
    p->lastAccessDate = p->creationDate;
    dbf0:	88 89       	ldd	r24, Y+16	; 0x10
    dbf2:	99 89       	ldd	r25, Y+17	; 0x11
    dbf4:	8a 8b       	std	Y+18, r24	; 0x12
    dbf6:	9b 8b       	std	Y+19, r25	; 0x13
    p->lastWriteDate = p->creationDate;
    dbf8:	88 8f       	std	Y+24, r24	; 0x18
    dbfa:	99 8f       	std	Y+25, r25	; 0x19
    p->lastWriteTime = p->creationTime;
    dbfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    dbfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    dc00:	8e 8b       	std	Y+22, r24	; 0x16
    dc02:	9f 8b       	std	Y+23, r25	; 0x17

    // write entry to SD
    if (!dirFile->vol_->cacheSync()) {
    dc04:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    dc08:	88 23       	and	r24, r24
    dc0a:	31 f0       	breq	.+12     	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // open entry in cache
  return openCachedEntry(index, oflag);
    dc0c:	c5 01       	movw	r24, r10
    dc0e:	60 2f       	mov	r22, r16
    dc10:	47 2d       	mov	r20, r7
    dc12:	0e 94 a4 6b 	call	0xd748	; 0xd748 <_ZN10SdBaseFile15openCachedEntryEhh>
    dc16:	01 c0       	rjmp	.+2      	; 0xdc1a <_ZN10SdBaseFile4openEPS_PKhh+0x164>

 fail:

  return false;
    dc18:	80 e0       	ldi	r24, 0x00	; 0
}
    dc1a:	df 91       	pop	r29
    dc1c:	cf 91       	pop	r28
    dc1e:	1f 91       	pop	r17
    dc20:	0f 91       	pop	r16
    dc22:	ff 90       	pop	r15
    dc24:	ef 90       	pop	r14
    dc26:	df 90       	pop	r13
    dc28:	cf 90       	pop	r12
    dc2a:	bf 90       	pop	r11
    dc2c:	af 90       	pop	r10
    dc2e:	9f 90       	pop	r9
    dc30:	8f 90       	pop	r8
    dc32:	7f 90       	pop	r7
    dc34:	08 95       	ret
      break;
    }
  }
  if (fileFound) {
    // don't open existing file if O_EXCL
    if (oflag & O_EXCL) {
    dc36:	77 fe       	sbrs	r7, 7
    dc38:	e9 cf       	rjmp	.-46     	; 0xdc0c <_ZN10SdBaseFile4openEPS_PKhh+0x156>
    dc3a:	ee cf       	rjmp	.-36     	; 0xdc18 <_ZN10SdBaseFile4openEPS_PKhh+0x162>

0000dc3c <_ZN10SdBaseFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this file is already open, \a dirFile is not
 * a directory, \a path is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
bool SdBaseFile::open(SdBaseFile* dirFile, const char* path, uint8_t oflag) {
    dc3c:	5f 92       	push	r5
    dc3e:	6f 92       	push	r6
    dc40:	7f 92       	push	r7
    dc42:	8f 92       	push	r8
    dc44:	9f 92       	push	r9
    dc46:	af 92       	push	r10
    dc48:	bf 92       	push	r11
    dc4a:	cf 92       	push	r12
    dc4c:	df 92       	push	r13
    dc4e:	ef 92       	push	r14
    dc50:	ff 92       	push	r15
    dc52:	0f 93       	push	r16
    dc54:	1f 93       	push	r17
    dc56:	cf 93       	push	r28
    dc58:	df 93       	push	r29
    dc5a:	cd b7       	in	r28, 0x3d	; 61
    dc5c:	de b7       	in	r29, 0x3e	; 62
    dc5e:	c3 54       	subi	r28, 0x43	; 67
    dc60:	d0 40       	sbci	r29, 0x00	; 0
    dc62:	cd bf       	out	0x3d, r28	; 61
    dc64:	de bf       	out	0x3e, r29	; 62
    dc66:	4c 01       	movw	r8, r24
    dc68:	6b 01       	movw	r12, r22
    dc6a:	24 96       	adiw	r28, 0x04	; 4
    dc6c:	4e af       	sts	0x7e, r20
    dc6e:	5f af       	sts	0x7f, r21
    dc70:	24 97       	sbiw	r28, 0x04	; 4
    dc72:	52 2e       	mov	r5, r18
    dc74:	1f a2       	lds	r17, 0x9f
    dc76:	1a a6       	lds	r17, 0xba
    dc78:	1c 86       	std	Y+12, r1	; 0x0c
    dc7a:	1f 86       	std	Y+15, r1	; 0x0f
  uint8_t dname[11];
  SdBaseFile dir1, dir2;
  SdBaseFile *parent = dirFile;
  SdBaseFile *sub = &dir1;

  if (!dirFile) {
    dc7c:	61 15       	cp	r22, r1
    dc7e:	71 05       	cpc	r23, r1
    dc80:	09 f4       	brne	.+2      	; 0xdc84 <_ZN10SdBaseFile4openEPS_PKch+0x48>
    dc82:	79 c0       	rjmp	.+242    	; 0xdd76 <_ZN10SdBaseFile4openEPS_PKch+0x13a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if already open
  if (isOpen()) {
    dc84:	fc 01       	movw	r30, r24
    dc86:	83 81       	ldd	r24, Z+3	; 0x03
    dc88:	88 23       	and	r24, r24
    dc8a:	09 f0       	breq	.+2      	; 0xdc8e <_ZN10SdBaseFile4openEPS_PKch+0x52>
    dc8c:	74 c0       	rjmp	.+232    	; 0xdd76 <_ZN10SdBaseFile4openEPS_PKch+0x13a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    dc8e:	fa 01       	movw	r30, r20
    dc90:	80 81       	ld	r24, Z
    dc92:	8f 32       	cpi	r24, 0x2F	; 47
    dc94:	91 f4       	brne	.+36     	; 0xdcba <_ZN10SdBaseFile4openEPS_PKch+0x7e>
    dc96:	05 c0       	rjmp	.+10     	; 0xdca2 <_ZN10SdBaseFile4openEPS_PKch+0x66>
    while (*path == '/') path++;
    dc98:	31 96       	adiw	r30, 0x01	; 1
    dc9a:	24 96       	adiw	r28, 0x04	; 4
    dc9c:	ee af       	sts	0x7e, r30
    dc9e:	ff af       	sts	0x7f, r31
    dca0:	24 97       	sbiw	r28, 0x04	; 4
    dca2:	24 96       	adiw	r28, 0x04	; 4
    dca4:	ee ad       	sts	0x6e, r30
    dca6:	ff ad       	sts	0x6f, r31
    dca8:	24 97       	sbiw	r28, 0x04	; 4
    dcaa:	80 81       	ld	r24, Z
    dcac:	8f 32       	cpi	r24, 0x2F	; 47
    dcae:	a1 f3       	breq	.-24     	; 0xdc98 <_ZN10SdBaseFile4openEPS_PKch+0x5c>
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a subdirectory else false. */
  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is the root directory. */
  bool isRoot() const {
    return type_ == FAT_FILE_TYPE_ROOT_FIXED || type_ == FAT_FILE_TYPE_ROOT32;
    dcb0:	f6 01       	movw	r30, r12
    dcb2:	83 81       	ldd	r24, Z+3	; 0x03
    dcb4:	82 50       	subi	r24, 0x02	; 2
    if (!dirFile->isRoot()) {
    dcb6:	82 30       	cpi	r24, 0x02	; 2
    dcb8:	50 f4       	brcc	.+20     	; 0xdcce <_ZN10SdBaseFile4openEPS_PKch+0x92>
    dcba:	86 01       	movw	r16, r12
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dcbc:	67 e2       	ldi	r22, 0x27	; 39
    dcbe:	e6 2e       	mov	r14, r22
    dcc0:	f1 2c       	mov	r15, r1
    dcc2:	ec 0e       	add	r14, r28
    dcc4:	fd 1e       	adc	r15, r29
    dcc6:	37 01       	movw	r6, r14
    dcc8:	be 2c       	mov	r11, r14
    dcca:	af 2c       	mov	r10, r15
    dccc:	11 c0       	rjmp	.+34     	; 0xdcf0 <_ZN10SdBaseFile4openEPS_PKch+0xb4>
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    if (!dirFile->isRoot()) {
      if (!dir2.openRoot(dirFile->vol_)) {
    dcce:	f6 01       	movw	r30, r12
    dcd0:	65 81       	ldd	r22, Z+5	; 0x05
    dcd2:	76 81       	ldd	r23, Z+6	; 0x06
    dcd4:	ce 01       	movw	r24, r28
    dcd6:	0c 96       	adiw	r24, 0x0c	; 12
    dcd8:	0e 94 fb 69 	call	0xd3f6	; 0xd3f6 <_ZN10SdBaseFile8openRootEP8SdVolume>
    dcdc:	88 23       	and	r24, r24
    dcde:	09 f4       	brne	.+2      	; 0xdce2 <_ZN10SdBaseFile4openEPS_PKch+0xa6>
    dce0:	4a c0       	rjmp	.+148    	; 0xdd76 <_ZN10SdBaseFile4openEPS_PKch+0x13a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      parent = &dir2;
    dce2:	8e 01       	movw	r16, r28
    dce4:	04 5f       	subi	r16, 0xF4	; 244
    dce6:	1f 4f       	sbci	r17, 0xFF	; 255
    dce8:	e9 cf       	rjmp	.-46     	; 0xdcbc <_ZN10SdBaseFile4openEPS_PKch+0x80>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dcea:	87 01       	movw	r16, r14
    dcec:	eb 2c       	mov	r14, r11
    dcee:	fa 2c       	mov	r15, r10
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    dcf0:	24 96       	adiw	r28, 0x04	; 4
    dcf2:	8e ad       	sts	0x6e, r24
    dcf4:	9f ad       	sts	0x6f, r25
    dcf6:	24 97       	sbiw	r28, 0x04	; 4
    dcf8:	be 01       	movw	r22, r28
    dcfa:	6f 5f       	subi	r22, 0xFF	; 255
    dcfc:	7f 4f       	sbci	r23, 0xFF	; 255
    dcfe:	ae 01       	movw	r20, r28
    dd00:	4e 5b       	subi	r20, 0xBE	; 190
    dd02:	5f 4f       	sbci	r21, 0xFF	; 255
    dd04:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    dd08:	88 23       	and	r24, r24
    dd0a:	31 f4       	brne	.+12     	; 0xdd18 <_ZN10SdBaseFile4openEPS_PKch+0xdc>
    dd0c:	34 c0       	rjmp	.+104    	; 0xdd76 <_ZN10SdBaseFile4openEPS_PKch+0x13a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    while (*path == '/') path++;
    dd0e:	31 96       	adiw	r30, 0x01	; 1
    dd10:	24 96       	adiw	r28, 0x04	; 4
    dd12:	ee af       	sts	0x7e, r30
    dd14:	ff af       	sts	0x7f, r31
    dd16:	24 97       	sbiw	r28, 0x04	; 4
    dd18:	24 96       	adiw	r28, 0x04	; 4
    dd1a:	ee ad       	sts	0x6e, r30
    dd1c:	ff ad       	sts	0x6f, r31
    dd1e:	24 97       	sbiw	r28, 0x04	; 4
    dd20:	80 81       	ld	r24, Z
    dd22:	8f 32       	cpi	r24, 0x2F	; 47
    dd24:	a1 f3       	breq	.-24     	; 0xdd0e <_ZN10SdBaseFile4openEPS_PKch+0xd2>
    if (!*path) break;
    dd26:	88 23       	and	r24, r24
    dd28:	e9 f0       	breq	.+58     	; 0xdd64 <_ZN10SdBaseFile4openEPS_PKch+0x128>
    if (!sub->open(parent, dname, O_READ)) {
    dd2a:	c7 01       	movw	r24, r14
    dd2c:	b8 01       	movw	r22, r16
    dd2e:	ae 01       	movw	r20, r28
    dd30:	4f 5f       	subi	r20, 0xFF	; 255
    dd32:	5f 4f       	sbci	r21, 0xFF	; 255
    dd34:	21 e0       	ldi	r18, 0x01	; 1
    dd36:	0e 94 5b 6d 	call	0xdab6	; 0xdab6 <_ZN10SdBaseFile4openEPS_PKhh>
    dd3a:	88 23       	and	r24, r24
    dd3c:	e1 f0       	breq	.+56     	; 0xdd76 <_ZN10SdBaseFile4openEPS_PKch+0x13a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    dd3e:	0c 15       	cp	r16, r12
    dd40:	1d 05       	cpc	r17, r13
    dd42:	29 f0       	breq	.+10     	; 0xdd4e <_ZN10SdBaseFile4openEPS_PKch+0x112>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
bool SdBaseFile::close() {
  bool rtn = sync();
    dd44:	c8 01       	movw	r24, r16
    dd46:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
  type_ = FAT_FILE_TYPE_CLOSED;
    dd4a:	f8 01       	movw	r30, r16
    dd4c:	13 82       	std	Z+3, r1	; 0x03
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dd4e:	e6 14       	cp	r14, r6
    dd50:	f7 04       	cpc	r15, r7
    dd52:	59 f6       	brne	.-106    	; 0xdcea <_ZN10SdBaseFile4openEPS_PKch+0xae>
    dd54:	5c e0       	ldi	r21, 0x0C	; 12
    dd56:	e5 2e       	mov	r14, r21
    dd58:	f1 2c       	mov	r15, r1
    dd5a:	ec 0e       	add	r14, r28
    dd5c:	fd 1e       	adc	r15, r29
    dd5e:	0b 2d       	mov	r16, r11
    dd60:	1a 2d       	mov	r17, r10
    dd62:	c6 cf       	rjmp	.-116    	; 0xdcf0 <_ZN10SdBaseFile4openEPS_PKch+0xb4>
  }

  return open(parent, dname, oflag);
    dd64:	c4 01       	movw	r24, r8
    dd66:	b8 01       	movw	r22, r16
    dd68:	ae 01       	movw	r20, r28
    dd6a:	4f 5f       	subi	r20, 0xFF	; 255
    dd6c:	5f 4f       	sbci	r21, 0xFF	; 255
    dd6e:	25 2d       	mov	r18, r5
    dd70:	0e 94 5b 6d 	call	0xdab6	; 0xdab6 <_ZN10SdBaseFile4openEPS_PKhh>
    dd74:	01 c0       	rjmp	.+2      	; 0xdd78 <_ZN10SdBaseFile4openEPS_PKch+0x13c>

 fail:

  return false;
    dd76:	80 e0       	ldi	r24, 0x00	; 0
}
    dd78:	cd 5b       	subi	r28, 0xBD	; 189
    dd7a:	df 4f       	sbci	r29, 0xFF	; 255
    dd7c:	cd bf       	out	0x3d, r28	; 61
    dd7e:	de bf       	out	0x3e, r29	; 62
    dd80:	df 91       	pop	r29
    dd82:	cf 91       	pop	r28
    dd84:	1f 91       	pop	r17
    dd86:	0f 91       	pop	r16
    dd88:	ff 90       	pop	r15
    dd8a:	ef 90       	pop	r14
    dd8c:	df 90       	pop	r13
    dd8e:	cf 90       	pop	r12
    dd90:	bf 90       	pop	r11
    dd92:	af 90       	pop	r10
    dd94:	9f 90       	pop	r9
    dd96:	8f 90       	pop	r8
    dd98:	7f 90       	pop	r7
    dd9a:	6f 90       	pop	r6
    dd9c:	5f 90       	pop	r5
    dd9e:	08 95       	ret

0000dda0 <_ZN10SdBaseFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a path is not found
 * or an I/O error occurred.
 */
bool SdBaseFile::remove(SdBaseFile* dirFile, const char* path) {
    dda0:	cf 93       	push	r28
    dda2:	df 93       	push	r29
    dda4:	cd b7       	in	r28, 0x3d	; 61
    dda6:	de b7       	in	r29, 0x3e	; 62
    dda8:	6b 97       	sbiw	r28, 0x1b	; 27
    ddaa:	cd bf       	out	0x3d, r28	; 61
    ddac:	de bf       	out	0x3e, r29	; 62
    ddae:	9c 01       	movw	r18, r24
    ddb0:	ab 01       	movw	r20, r22
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    ddb2:	19 82       	std	Y+1, r1	; 0x01
    ddb4:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile file;
  if (!file.open(dirFile, path, O_WRITE)) {
    ddb6:	ce 01       	movw	r24, r28
    ddb8:	01 96       	adiw	r24, 0x01	; 1
    ddba:	b9 01       	movw	r22, r18
    ddbc:	22 e0       	ldi	r18, 0x02	; 2
    ddbe:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_ZN10SdBaseFile4openEPS_PKch>
    ddc2:	88 23       	and	r24, r24
    ddc4:	29 f0       	breq	.+10     	; 0xddd0 <_ZN10SdBaseFile6removeEPS_PKc+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
    ddc6:	ce 01       	movw	r24, r28
    ddc8:	01 96       	adiw	r24, 0x01	; 1
    ddca:	0e 94 55 6b 	call	0xd6aa	; 0xd6aa <_ZN10SdBaseFile6removeEv>
    ddce:	01 c0       	rjmp	.+2      	; 0xddd2 <_ZN10SdBaseFile6removeEPS_PKc+0x32>

 fail:
  return false;
    ddd0:	80 e0       	ldi	r24, 0x00	; 0
}
    ddd2:	6b 96       	adiw	r28, 0x1b	; 27
    ddd4:	cd bf       	out	0x3d, r28	; 61
    ddd6:	de bf       	out	0x3e, r29	; 62
    ddd8:	df 91       	pop	r29
    ddda:	cf 91       	pop	r28
    dddc:	08 95       	ret

0000ddde <_ZN10SdBaseFile4openEPKch>:
  * OR of open flags. see SdBaseFile::open(SdBaseFile*, const char*, uint8_t).
  *
  * \return The value one, true, is returned for success and
  * the value zero, false, is returned for failure.
  */
  bool SdBaseFile::open(const char* path, uint8_t oflag) {
    ddde:	fb 01       	movw	r30, r22
    dde0:	24 2f       	mov	r18, r20
    return open(cwd_, path, oflag);
    dde2:	60 91 9d 24 	lds	r22, 0x249D
    dde6:	70 91 9e 24 	lds	r23, 0x249E
    ddea:	af 01       	movw	r20, r30
    ddec:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_ZN10SdBaseFile4openEPS_PKch>
  }
    ddf0:	08 95       	ret

0000ddf2 <_ZN10SdBaseFile5mkdirEPS_PKh>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdBaseFile::mkdir(SdBaseFile* parent, const uint8_t dname[11]) {
    ddf2:	af 92       	push	r10
    ddf4:	bf 92       	push	r11
    ddf6:	cf 92       	push	r12
    ddf8:	df 92       	push	r13
    ddfa:	ef 92       	push	r14
    ddfc:	ff 92       	push	r15
    ddfe:	0f 93       	push	r16
    de00:	1f 93       	push	r17
    de02:	cf 93       	push	r28
    de04:	df 93       	push	r29
    de06:	cd b7       	in	r28, 0x3d	; 61
    de08:	de b7       	in	r29, 0x3e	; 62
    de0a:	a0 97       	sbiw	r28, 0x20	; 32
    de0c:	cd bf       	out	0x3d, r28	; 61
    de0e:	de bf       	out	0x3e, r29	; 62
    de10:	8c 01       	movw	r16, r24
    de12:	7b 01       	movw	r14, r22
  uint32_t block;
  dir_t d;
  dir_t* p;
  cache_t* pc;

  if (!parent->isDir()) {
    de14:	fb 01       	movw	r30, r22
    de16:	83 81       	ldd	r24, Z+3	; 0x03
    de18:	82 30       	cpi	r24, 0x02	; 2
    de1a:	08 f4       	brcc	.+2      	; 0xde1e <_ZN10SdBaseFile5mkdirEPS_PKh+0x2c>
    de1c:	7f c0       	rjmp	.+254    	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, dname, O_CREAT | O_EXCL | O_RDWR)) {
    de1e:	c8 01       	movw	r24, r16
    de20:	23 ec       	ldi	r18, 0xC3	; 195
    de22:	0e 94 5b 6d 	call	0xdab6	; 0xdab6 <_ZN10SdBaseFile4openEPS_PKhh>
    de26:	88 23       	and	r24, r24
    de28:	09 f4       	brne	.+2      	; 0xde2c <_ZN10SdBaseFile5mkdirEPS_PKh+0x3a>
    de2a:	78 c0       	rjmp	.+240    	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  flags_ = O_READ;
    de2c:	81 e0       	ldi	r24, 0x01	; 1
    de2e:	f8 01       	movw	r30, r16
    de30:	81 83       	std	Z+1, r24	; 0x01
  type_ = FAT_FILE_TYPE_SUBDIR;
    de32:	84 e0       	ldi	r24, 0x04	; 4
    de34:	83 83       	std	Z+3, r24	; 0x03

  // allocate and zero first cluster
  if (!addDirCluster()) {
    de36:	c8 01       	movw	r24, r16
    de38:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <_ZN10SdBaseFile13addDirClusterEv>
    de3c:	00 97       	sbiw	r24, 0x00	; 0
    de3e:	09 f4       	brne	.+2      	; 0xde42 <_ZN10SdBaseFile5mkdirEPS_PKh+0x50>
    de40:	6d c0       	rjmp	.+218    	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // force entry to SD
  if (!sync()) {
    de42:	c8 01       	movw	r24, r16
    de44:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
    de48:	88 23       	and	r24, r24
    de4a:	09 f4       	brne	.+2      	; 0xde4e <_ZN10SdBaseFile5mkdirEPS_PKh+0x5c>
    de4c:	67 c0       	rjmp	.+206    	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    de4e:	c8 01       	movw	r24, r16
    de50:	61 e0       	ldi	r22, 0x01	; 1
    de52:	0e 94 71 65 	call	0xcae2	; 0xcae2 <_ZN10SdBaseFile13cacheDirEntryEh>
    de56:	dc 01       	movw	r26, r24
  if (!p) {
    de58:	00 97       	sbiw	r24, 0x00	; 0
    de5a:	09 f4       	brne	.+2      	; 0xde5e <_ZN10SdBaseFile5mkdirEPS_PKh+0x6c>
    de5c:	5f c0       	rjmp	.+190    	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;
    de5e:	80 e1       	ldi	r24, 0x10	; 16
    de60:	1b 96       	adiw	r26, 0x0b	; 11
    de62:	8c 93       	st	X, r24
    de64:	1b 97       	sbiw	r26, 0x0b	; 11

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    de66:	ae 01       	movw	r20, r28
    de68:	4f 5f       	subi	r20, 0xFF	; 255
    de6a:	5f 4f       	sbci	r21, 0xFF	; 255
    de6c:	cd 01       	movw	r24, r26
    de6e:	20 e2       	ldi	r18, 0x20	; 32
    de70:	fc 01       	movw	r30, r24
    de72:	01 90       	ld	r0, Z+
    de74:	cf 01       	movw	r24, r30
    de76:	fa 01       	movw	r30, r20
    de78:	01 92       	st	Z+, r0
    de7a:	af 01       	movw	r20, r30
    de7c:	21 50       	subi	r18, 0x01	; 1
    de7e:	c1 f7       	brne	.-16     	; 0xde70 <_ZN10SdBaseFile5mkdirEPS_PKh+0x7e>
    de80:	54 96       	adiw	r26, 0x14	; 20
    de82:	ad 90       	ld	r10, X+
    de84:	bc 90       	ld	r11, X
    de86:	55 97       	sbiw	r26, 0x15	; 21
    de88:	5a 96       	adiw	r26, 0x1a	; 26
    de8a:	cd 90       	ld	r12, X+
    de8c:	dc 90       	ld	r13, X
    de8e:	5b 97       	sbiw	r26, 0x1b	; 27
  d.name[0] = '.';
    de90:	8e e2       	ldi	r24, 0x2E	; 46
    de92:	89 83       	std	Y+1, r24	; 0x01
    de94:	fe 01       	movw	r30, r28
    de96:	32 96       	adiw	r30, 0x02	; 2
    de98:	8a e0       	ldi	r24, 0x0A	; 10
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
    de9a:	90 e2       	ldi	r25, 0x20	; 32
    de9c:	91 93       	st	Z+, r25
    de9e:	81 50       	subi	r24, 0x01	; 1
    dea0:	e9 f7       	brne	.-6      	; 0xde9c <_ZN10SdBaseFile5mkdirEPS_PKh+0xaa>

  // cache block for '.'  and '..'
  block = vol_->clusterStartBlock(firstCluster_);
    dea2:	f8 01       	movw	r30, r16
    dea4:	47 89       	ldd	r20, Z+23	; 0x17
    dea6:	50 8d       	ldd	r21, Z+24	; 0x18
    dea8:	61 8d       	ldd	r22, Z+25	; 0x19
    deaa:	72 8d       	ldd	r23, Z+26	; 0x1a
    deac:	85 81       	ldd	r24, Z+5	; 0x05
    deae:	96 81       	ldd	r25, Z+6	; 0x06
    deb0:	0e 94 d4 73 	call	0xe7a8	; 0xe7a8 <_ZNK8SdVolume17clusterStartBlockEm>
  pc = vol_->cacheFetch(block, SdVolume::CACHE_FOR_WRITE);
    deb4:	41 e0       	ldi	r20, 0x01	; 1
    deb6:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
  if (!pc) {
    deba:	00 97       	sbiw	r24, 0x00	; 0
    debc:	79 f1       	breq	.+94     	; 0xdf1c <_ZN10SdBaseFile5mkdirEPS_PKh+0x12a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &d, sizeof(d));
    debe:	dc 01       	movw	r26, r24
    dec0:	fe 01       	movw	r30, r28
    dec2:	31 96       	adiw	r30, 0x01	; 1
    dec4:	20 e2       	ldi	r18, 0x20	; 32
    dec6:	01 90       	ld	r0, Z+
    dec8:	0d 92       	st	X+, r0
    deca:	21 50       	subi	r18, 0x01	; 1
    decc:	e1 f7       	brne	.-8      	; 0xdec6 <_ZN10SdBaseFile5mkdirEPS_PKh+0xd4>
    dece:	fc 01       	movw	r30, r24
    ded0:	a4 8a       	std	Z+20, r10	; 0x14
    ded2:	b5 8a       	std	Z+21, r11	; 0x15
    ded4:	c2 8e       	std	Z+26, r12	; 0x1a
    ded6:	d3 8e       	std	Z+27, r13	; 0x1b
  // make entry for '..'
  d.name[1] = '.';
    ded8:	2e e2       	ldi	r18, 0x2E	; 46
    deda:	2a 83       	std	Y+2, r18	; 0x02
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a subdirectory else false. */
  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is the root directory. */
  bool isRoot() const {
    return type_ == FAT_FILE_TYPE_ROOT_FIXED || type_ == FAT_FILE_TYPE_ROOT32;
    dedc:	f7 01       	movw	r30, r14
    dede:	23 81       	ldd	r18, Z+3	; 0x03
    dee0:	22 50       	subi	r18, 0x02	; 2
  if (parent->isRoot()) {
    dee2:	22 30       	cpi	r18, 0x02	; 2
    dee4:	30 f0       	brcs	.+12     	; 0xdef2 <_ZN10SdBaseFile5mkdirEPS_PKh+0x100>
    d.firstClusterLow = 0;
    d.firstClusterHigh = 0;
  } else {
    d.firstClusterLow = parent->firstCluster_ & 0XFFFF;
    dee6:	07 89       	ldd	r16, Z+23	; 0x17
    dee8:	10 8d       	ldd	r17, Z+24	; 0x18
    deea:	21 8d       	ldd	r18, Z+25	; 0x19
    deec:	32 8d       	ldd	r19, Z+26	; 0x1a
    deee:	a8 01       	movw	r20, r16
    def0:	04 c0       	rjmp	.+8      	; 0xdefa <_ZN10SdBaseFile5mkdirEPS_PKh+0x108>
  // copy '.' to block
  memcpy(&pc->dir[0], &d, sizeof(d));
  // make entry for '..'
  d.name[1] = '.';
  if (parent->isRoot()) {
    d.firstClusterLow = 0;
    def2:	40 e0       	ldi	r20, 0x00	; 0
    def4:	50 e0       	ldi	r21, 0x00	; 0
    d.firstClusterHigh = 0;
    def6:	20 e0       	ldi	r18, 0x00	; 0
    def8:	30 e0       	ldi	r19, 0x00	; 0
  } else {
    d.firstClusterLow = parent->firstCluster_ & 0XFFFF;
    d.firstClusterHigh = parent->firstCluster_ >> 16;
  }
  // copy '..' to block
  memcpy(&pc->dir[1], &d, sizeof(d));
    defa:	fc 01       	movw	r30, r24
    defc:	b0 96       	adiw	r30, 0x20	; 32
    defe:	de 01       	movw	r26, r28
    df00:	11 96       	adiw	r26, 0x01	; 1
    df02:	60 e2       	ldi	r22, 0x20	; 32
    df04:	0d 90       	ld	r0, X+
    df06:	01 92       	st	Z+, r0
    df08:	61 50       	subi	r22, 0x01	; 1
    df0a:	e1 f7       	brne	.-8      	; 0xdf04 <_ZN10SdBaseFile5mkdirEPS_PKh+0x112>
    df0c:	fc 01       	movw	r30, r24
    df0e:	24 ab       	sts	0x54, r18
    df10:	35 ab       	sts	0x55, r19
    df12:	42 af       	sts	0x72, r20
    df14:	53 af       	sts	0x73, r21
  // write first block
  return vol_->cacheSync();
    df16:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    df1a:	01 c0       	rjmp	.+2      	; 0xdf1e <_ZN10SdBaseFile5mkdirEPS_PKh+0x12c>

 fail:
  return false;
    df1c:	80 e0       	ldi	r24, 0x00	; 0
}
    df1e:	a0 96       	adiw	r28, 0x20	; 32
    df20:	cd bf       	out	0x3d, r28	; 61
    df22:	de bf       	out	0x3e, r29	; 62
    df24:	df 91       	pop	r29
    df26:	cf 91       	pop	r28
    df28:	1f 91       	pop	r17
    df2a:	0f 91       	pop	r16
    df2c:	ff 90       	pop	r15
    df2e:	ef 90       	pop	r14
    df30:	df 90       	pop	r13
    df32:	cf 90       	pop	r12
    df34:	bf 90       	pop	r11
    df36:	af 90       	pop	r10
    df38:	08 95       	ret

0000df3a <_ZN10SdBaseFile5mkdirEPS_PKcb>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this file is already open, \a parent is not a
 * directory, \a path is invalid or already exists in \a parent.
 */
bool SdBaseFile::mkdir(SdBaseFile* parent, const char* path, bool pFlag) {
    df3a:	5f 92       	push	r5
    df3c:	6f 92       	push	r6
    df3e:	7f 92       	push	r7
    df40:	8f 92       	push	r8
    df42:	9f 92       	push	r9
    df44:	af 92       	push	r10
    df46:	bf 92       	push	r11
    df48:	cf 92       	push	r12
    df4a:	df 92       	push	r13
    df4c:	ef 92       	push	r14
    df4e:	ff 92       	push	r15
    df50:	0f 93       	push	r16
    df52:	1f 93       	push	r17
    df54:	cf 93       	push	r28
    df56:	df 93       	push	r29
    df58:	cd b7       	in	r28, 0x3d	; 61
    df5a:	de b7       	in	r29, 0x3e	; 62
    df5c:	c3 54       	subi	r28, 0x43	; 67
    df5e:	d0 40       	sbci	r29, 0x00	; 0
    df60:	cd bf       	out	0x3d, r28	; 61
    df62:	de bf       	out	0x3e, r29	; 62
    df64:	4c 01       	movw	r8, r24
    df66:	6b 01       	movw	r12, r22
    df68:	24 96       	adiw	r28, 0x04	; 4
    df6a:	4e af       	sts	0x7e, r20
    df6c:	5f af       	sts	0x7f, r21
    df6e:	24 97       	sbiw	r28, 0x04	; 4
    df70:	52 2e       	mov	r5, r18
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    df72:	1f a2       	lds	r17, 0x9f
    df74:	1a a6       	lds	r17, 0xba
    df76:	1c 86       	std	Y+12, r1	; 0x0c
    df78:	1f 86       	std	Y+15, r1	; 0x0f
  uint8_t dname[11];
  SdBaseFile dir1, dir2;
  SdBaseFile* sub = &dir1;
  SdBaseFile* start = parent;

  if (!parent || isOpen()) {
    df7a:	61 15       	cp	r22, r1
    df7c:	71 05       	cpc	r23, r1
    df7e:	09 f4       	brne	.+2      	; 0xdf82 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x48>
    df80:	80 c0       	rjmp	.+256    	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
    df82:	fc 01       	movw	r30, r24
    df84:	83 81       	ldd	r24, Z+3	; 0x03
    df86:	88 23       	and	r24, r24
    df88:	09 f0       	breq	.+2      	; 0xdf8c <_ZN10SdBaseFile5mkdirEPS_PKcb+0x52>
    df8a:	7b c0       	rjmp	.+246    	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
    df8c:	8f c0       	rjmp	.+286    	; 0xe0ac <_ZN10SdBaseFile5mkdirEPS_PKcb+0x172>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    df8e:	31 96       	adiw	r30, 0x01	; 1
    df90:	24 96       	adiw	r28, 0x04	; 4
    df92:	ee af       	sts	0x7e, r30
    df94:	ff af       	sts	0x7f, r31
    df96:	24 97       	sbiw	r28, 0x04	; 4
    df98:	24 96       	adiw	r28, 0x04	; 4
    df9a:	ee ad       	sts	0x6e, r30
    df9c:	ff ad       	sts	0x6f, r31
    df9e:	24 97       	sbiw	r28, 0x04	; 4
    dfa0:	80 81       	ld	r24, Z
    dfa2:	8f 32       	cpi	r24, 0x2F	; 47
    dfa4:	a1 f3       	breq	.-24     	; 0xdf8e <_ZN10SdBaseFile5mkdirEPS_PKcb+0x54>
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a subdirectory else false. */
  bool isSubDir() const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is the root directory. */
  bool isRoot() const {
    return type_ == FAT_FILE_TYPE_ROOT_FIXED || type_ == FAT_FILE_TYPE_ROOT32;
    dfa6:	f6 01       	movw	r30, r12
    dfa8:	83 81       	ldd	r24, Z+3	; 0x03
    dfaa:	82 50       	subi	r24, 0x02	; 2
    if (!parent->isRoot()) {
    dfac:	82 30       	cpi	r24, 0x02	; 2
    dfae:	50 f4       	brcc	.+20     	; 0xdfc4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x8a>
    dfb0:	86 01       	movw	r16, r12
        goto fail;
      }
    }
    if (parent != start) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dfb2:	e7 e2       	ldi	r30, 0x27	; 39
    dfb4:	ee 2e       	mov	r14, r30
    dfb6:	f1 2c       	mov	r15, r1
    dfb8:	ec 0e       	add	r14, r28
    dfba:	fd 1e       	adc	r15, r29
    dfbc:	37 01       	movw	r6, r14
    dfbe:	be 2c       	mov	r11, r14
    dfc0:	af 2c       	mov	r10, r15
    dfc2:	11 c0       	rjmp	.+34     	; 0xdfe6 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xac>
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    if (!parent->isRoot()) {
      if (!dir2.openRoot(parent->vol_)) {
    dfc4:	f6 01       	movw	r30, r12
    dfc6:	65 81       	ldd	r22, Z+5	; 0x05
    dfc8:	76 81       	ldd	r23, Z+6	; 0x06
    dfca:	ce 01       	movw	r24, r28
    dfcc:	0c 96       	adiw	r24, 0x0c	; 12
    dfce:	0e 94 fb 69 	call	0xd3f6	; 0xd3f6 <_ZN10SdBaseFile8openRootEP8SdVolume>
    dfd2:	88 23       	and	r24, r24
    dfd4:	09 f4       	brne	.+2      	; 0xdfd8 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x9e>
    dfd6:	55 c0       	rjmp	.+170    	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
        DBG_FAIL_MACRO;
        goto fail;
      }
      parent = &dir2;
    dfd8:	8e 01       	movw	r16, r28
    dfda:	04 5f       	subi	r16, 0xF4	; 244
    dfdc:	1f 4f       	sbci	r17, 0xFF	; 255
    dfde:	e9 cf       	rjmp	.-46     	; 0xdfb2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x78>
        goto fail;
      }
    }
    if (parent != start) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dfe0:	87 01       	movw	r16, r14
    dfe2:	eb 2c       	mov	r14, r11
    dfe4:	fa 2c       	mov	r15, r10
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    dfe6:	24 96       	adiw	r28, 0x04	; 4
    dfe8:	8e ad       	sts	0x6e, r24
    dfea:	9f ad       	sts	0x6f, r25
    dfec:	24 97       	sbiw	r28, 0x04	; 4
    dfee:	be 01       	movw	r22, r28
    dff0:	6f 5f       	subi	r22, 0xFF	; 255
    dff2:	7f 4f       	sbci	r23, 0xFF	; 255
    dff4:	ae 01       	movw	r20, r28
    dff6:	4e 5b       	subi	r20, 0xBE	; 190
    dff8:	5f 4f       	sbci	r21, 0xFF	; 255
    dffa:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    dffe:	88 23       	and	r24, r24
    e000:	31 f4       	brne	.+12     	; 0xe00e <_ZN10SdBaseFile5mkdirEPS_PKcb+0xd4>
    e002:	3f c0       	rjmp	.+126    	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
      DBG_FAIL_MACRO;
      goto fail;
    }
    while (*path == '/') path++;
    e004:	31 96       	adiw	r30, 0x01	; 1
    e006:	24 96       	adiw	r28, 0x04	; 4
    e008:	ee af       	sts	0x7e, r30
    e00a:	ff af       	sts	0x7f, r31
    e00c:	24 97       	sbiw	r28, 0x04	; 4
    e00e:	24 96       	adiw	r28, 0x04	; 4
    e010:	ee ad       	sts	0x6e, r30
    e012:	ff ad       	sts	0x6f, r31
    e014:	24 97       	sbiw	r28, 0x04	; 4
    e016:	80 81       	ld	r24, Z
    e018:	8f 32       	cpi	r24, 0x2F	; 47
    e01a:	a1 f3       	breq	.-24     	; 0xe004 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xca>
    if (!*path) break;
    e01c:	88 23       	and	r24, r24
    e01e:	49 f1       	breq	.+82     	; 0xe072 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x138>
    if (!sub->open(parent, dname, O_READ)) {
    e020:	c7 01       	movw	r24, r14
    e022:	b8 01       	movw	r22, r16
    e024:	ae 01       	movw	r20, r28
    e026:	4f 5f       	subi	r20, 0xFF	; 255
    e028:	5f 4f       	sbci	r21, 0xFF	; 255
    e02a:	21 e0       	ldi	r18, 0x01	; 1
    e02c:	0e 94 5b 6d 	call	0xdab6	; 0xdab6 <_ZN10SdBaseFile4openEPS_PKhh>
    e030:	88 23       	and	r24, r24
    e032:	59 f4       	brne	.+22     	; 0xe04a <_ZN10SdBaseFile5mkdirEPS_PKcb+0x110>
      if (!pFlag || !sub->mkdir(parent, dname)) {
    e034:	55 20       	and	r5, r5
    e036:	29 f1       	breq	.+74     	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
    e038:	c7 01       	movw	r24, r14
    e03a:	b8 01       	movw	r22, r16
    e03c:	ae 01       	movw	r20, r28
    e03e:	4f 5f       	subi	r20, 0xFF	; 255
    e040:	5f 4f       	sbci	r21, 0xFF	; 255
    e042:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <_ZN10SdBaseFile5mkdirEPS_PKh>
    e046:	88 23       	and	r24, r24
    e048:	e1 f0       	breq	.+56     	; 0xe082 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x148>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    if (parent != start) parent->close();
    e04a:	0c 15       	cp	r16, r12
    e04c:	1d 05       	cpc	r17, r13
    e04e:	29 f0       	breq	.+10     	; 0xe05a <_ZN10SdBaseFile5mkdirEPS_PKcb+0x120>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
bool SdBaseFile::close() {
  bool rtn = sync();
    e050:	c8 01       	movw	r24, r16
    e052:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
  type_ = FAT_FILE_TYPE_CLOSED;
    e056:	f8 01       	movw	r30, r16
    e058:	13 82       	std	Z+3, r1	; 0x03
        goto fail;
      }
    }
    if (parent != start) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    e05a:	e6 14       	cp	r14, r6
    e05c:	f7 04       	cpc	r15, r7
    e05e:	09 f0       	breq	.+2      	; 0xe062 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x128>
    e060:	bf cf       	rjmp	.-130    	; 0xdfe0 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xa6>
    e062:	7c e0       	ldi	r23, 0x0C	; 12
    e064:	e7 2e       	mov	r14, r23
    e066:	f1 2c       	mov	r15, r1
    e068:	ec 0e       	add	r14, r28
    e06a:	fd 1e       	adc	r15, r29
    e06c:	0b 2d       	mov	r16, r11
    e06e:	1a 2d       	mov	r17, r10
    e070:	ba cf       	rjmp	.-140    	; 0xdfe6 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xac>
  }
  return mkdir(parent, dname);
    e072:	c4 01       	movw	r24, r8
    e074:	b8 01       	movw	r22, r16
    e076:	ae 01       	movw	r20, r28
    e078:	4f 5f       	subi	r20, 0xFF	; 255
    e07a:	5f 4f       	sbci	r21, 0xFF	; 255
    e07c:	0e 94 f9 6e 	call	0xddf2	; 0xddf2 <_ZN10SdBaseFile5mkdirEPS_PKh>
    e080:	01 c0       	rjmp	.+2      	; 0xe084 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x14a>

 fail:
  return false;
    e082:	80 e0       	ldi	r24, 0x00	; 0
}
    e084:	cd 5b       	subi	r28, 0xBD	; 189
    e086:	df 4f       	sbci	r29, 0xFF	; 255
    e088:	cd bf       	out	0x3d, r28	; 61
    e08a:	de bf       	out	0x3e, r29	; 62
    e08c:	df 91       	pop	r29
    e08e:	cf 91       	pop	r28
    e090:	1f 91       	pop	r17
    e092:	0f 91       	pop	r16
    e094:	ff 90       	pop	r15
    e096:	ef 90       	pop	r14
    e098:	df 90       	pop	r13
    e09a:	cf 90       	pop	r12
    e09c:	bf 90       	pop	r11
    e09e:	af 90       	pop	r10
    e0a0:	9f 90       	pop	r9
    e0a2:	8f 90       	pop	r8
    e0a4:	7f 90       	pop	r7
    e0a6:	6f 90       	pop	r6
    e0a8:	5f 90       	pop	r5
    e0aa:	08 95       	ret

  if (!parent || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    e0ac:	24 96       	adiw	r28, 0x04	; 4
    e0ae:	ee ad       	sts	0x6e, r30
    e0b0:	ff ad       	sts	0x6f, r31
    e0b2:	24 97       	sbiw	r28, 0x04	; 4
    e0b4:	80 81       	ld	r24, Z
    e0b6:	8f 32       	cpi	r24, 0x2F	; 47
    e0b8:	09 f0       	breq	.+2      	; 0xe0bc <_ZN10SdBaseFile5mkdirEPS_PKcb+0x182>
    e0ba:	7a cf       	rjmp	.-268    	; 0xdfb0 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x76>
    e0bc:	6d cf       	rjmp	.-294    	; 0xdf98 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x5e>

0000e0be <_ZN10SdBaseFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdBaseFile::write(const void* buf, size_t nbyte) {
    e0be:	2f 92       	push	r2
    e0c0:	3f 92       	push	r3
    e0c2:	4f 92       	push	r4
    e0c4:	5f 92       	push	r5
    e0c6:	6f 92       	push	r6
    e0c8:	7f 92       	push	r7
    e0ca:	8f 92       	push	r8
    e0cc:	9f 92       	push	r9
    e0ce:	af 92       	push	r10
    e0d0:	bf 92       	push	r11
    e0d2:	df 92       	push	r13
    e0d4:	ef 92       	push	r14
    e0d6:	ff 92       	push	r15
    e0d8:	0f 93       	push	r16
    e0da:	1f 93       	push	r17
    e0dc:	cf 93       	push	r28
    e0de:	df 93       	push	r29
    e0e0:	cd b7       	in	r28, 0x3d	; 61
    e0e2:	de b7       	in	r29, 0x3e	; 62
    e0e4:	2a 97       	sbiw	r28, 0x0a	; 10
    e0e6:	cd bf       	out	0x3d, r28	; 61
    e0e8:	de bf       	out	0x3e, r29	; 62
    e0ea:	7c 01       	movw	r14, r24
    e0ec:	d6 2e       	mov	r13, r22
    e0ee:	07 2f       	mov	r16, r23
    e0f0:	49 87       	std	Y+9, r20	; 0x09
    e0f2:	5a 87       	std	Y+10, r21	; 0x0a
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    e0f4:	dc 01       	movw	r26, r24
    e0f6:	13 96       	adiw	r26, 0x03	; 3
    e0f8:	8c 91       	ld	r24, X
    e0fa:	13 97       	sbiw	r26, 0x03	; 3
    e0fc:	81 30       	cpi	r24, 0x01	; 1
    e0fe:	09 f0       	breq	.+2      	; 0xe102 <_ZN10SdBaseFile5writeEPKvj+0x44>
    e100:	a1 c1       	rjmp	.+834    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
    e102:	11 96       	adiw	r26, 0x01	; 1
    e104:	8c 91       	ld	r24, X
    e106:	11 97       	sbiw	r26, 0x01	; 1
    e108:	81 ff       	sbrs	r24, 1
    e10a:	9c c1       	rjmp	.+824    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
    e10c:	b5 c1       	rjmp	.+874    	; 0xe478 <_ZN10SdBaseFile5writeEPKvj+0x3ba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    e10e:	f7 01       	movw	r30, r14
    e110:	43 89       	ldd	r20, Z+19	; 0x13
    e112:	54 89       	ldd	r21, Z+20	; 0x14
    e114:	65 89       	ldd	r22, Z+21	; 0x15
    e116:	76 89       	ldd	r23, Z+22	; 0x16
    e118:	83 85       	ldd	r24, Z+11	; 0x0b
    e11a:	94 85       	ldd	r25, Z+12	; 0x0c
    e11c:	a5 85       	ldd	r26, Z+13	; 0x0d
    e11e:	b6 85       	ldd	r27, Z+14	; 0x0e
    e120:	84 17       	cp	r24, r20
    e122:	95 07       	cpc	r25, r21
    e124:	a6 07       	cpc	r26, r22
    e126:	b7 07       	cpc	r27, r23
    e128:	31 f0       	breq	.+12     	; 0xe136 <_ZN10SdBaseFile5writeEPKvj+0x78>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}
    e12a:	c7 01       	movw	r24, r14
    e12c:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
    if (!seekEnd()) {
    e130:	88 23       	and	r24, r24
    e132:	09 f4       	brne	.+2      	; 0xe136 <_ZN10SdBaseFile5writeEPKvj+0x78>
    e134:	87 c1       	rjmp	.+782    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
          goto fail;
        }
      }
    } else if (!USE_MULTI_BLOCK_SD_IO || nToWrite < 1024) {
      // use single block write command
      n = 512;
    e136:	29 85       	ldd	r18, Y+9	; 0x09
    e138:	3a 85       	ldd	r19, Y+10	; 0x0a
    e13a:	2f 83       	std	Y+7, r18	; 0x07
    e13c:	38 87       	std	Y+8, r19	; 0x08
    e13e:	dd 82       	std	Y+5, r13	; 0x05
    e140:	0e 83       	std	Y+6, r16	; 0x06
    e142:	4a c1       	rjmp	.+660    	; 0xe3d8 <_ZN10SdBaseFile5writeEPKvj+0x31a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (nToWrite) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    e144:	f7 01       	movw	r30, r14
    e146:	25 81       	ldd	r18, Z+5	; 0x05
    e148:	36 81       	ldd	r19, Z+6	; 0x06
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    e14a:	f9 01       	movw	r30, r18
    e14c:	04 81       	ldd	r16, Z+4	; 0x04
    e14e:	01 50       	subi	r16, 0x01	; 1
    e150:	ac 01       	movw	r20, r24
    e152:	bd 01       	movw	r22, r26
    e154:	19 e0       	ldi	r17, 0x09	; 9
    e156:	76 95       	lsr	r23
    e158:	67 95       	ror	r22
    e15a:	57 95       	ror	r21
    e15c:	47 95       	ror	r20
    e15e:	1a 95       	dec	r17
    e160:	d1 f7       	brne	.-12     	; 0xe156 <_ZN10SdBaseFile5writeEPKvj+0x98>
    e162:	04 23       	and	r16, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    e164:	4f ef       	ldi	r20, 0xFF	; 255
    e166:	44 2e       	mov	r4, r20
    e168:	41 e0       	ldi	r20, 0x01	; 1
    e16a:	54 2e       	mov	r5, r20
    e16c:	48 22       	and	r4, r24
    e16e:	59 22       	and	r5, r25
    if (blockOfCluster == 0 && blockOffset == 0) {
    e170:	00 23       	and	r16, r16
    e172:	09 f0       	breq	.+2      	; 0xe176 <_ZN10SdBaseFile5writeEPKvj+0xb8>
    e174:	4a c0       	rjmp	.+148    	; 0xe20a <_ZN10SdBaseFile5writeEPKvj+0x14c>
    e176:	41 14       	cp	r4, r1
    e178:	51 04       	cpc	r5, r1
    e17a:	09 f0       	breq	.+2      	; 0xe17e <_ZN10SdBaseFile5writeEPKvj+0xc0>
    e17c:	46 c0       	rjmp	.+140    	; 0xe20a <_ZN10SdBaseFile5writeEPKvj+0x14c>
      // start of new cluster
      if (curCluster_ != 0) {
    e17e:	d7 01       	movw	r26, r14
    e180:	17 96       	adiw	r26, 0x07	; 7
    e182:	4d 91       	ld	r20, X+
    e184:	5d 91       	ld	r21, X+
    e186:	6d 91       	ld	r22, X+
    e188:	7c 91       	ld	r23, X
    e18a:	1a 97       	sbiw	r26, 0x0a	; 10
    e18c:	41 15       	cp	r20, r1
    e18e:	51 05       	cpc	r21, r1
    e190:	61 05       	cpc	r22, r1
    e192:	71 05       	cpc	r23, r1
    e194:	31 f1       	breq	.+76     	; 0xe1e2 <_ZN10SdBaseFile5writeEPKvj+0x124>
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    e196:	c9 01       	movw	r24, r18
    e198:	9e 01       	movw	r18, r28
    e19a:	2f 5f       	subi	r18, 0xFF	; 255
    e19c:	3f 4f       	sbci	r19, 0xFF	; 255
    e19e:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    e1a2:	88 23       	and	r24, r24
    e1a4:	09 f4       	brne	.+2      	; 0xe1a8 <_ZN10SdBaseFile5writeEPKvj+0xea>
    e1a6:	4e c1       	rjmp	.+668    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (vol_->isEOC(next)) {
    e1a8:	89 81       	ldd	r24, Y+1	; 0x01
    e1aa:	9a 81       	ldd	r25, Y+2	; 0x02
    e1ac:	ab 81       	ldd	r26, Y+3	; 0x03
    e1ae:	bc 81       	ldd	r27, Y+4	; 0x04

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    e1b0:	f7 01       	movw	r30, r14
    e1b2:	25 81       	ldd	r18, Z+5	; 0x05
    e1b4:	36 81       	ldd	r19, Z+6	; 0x06
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    e1b6:	f9 01       	movw	r30, r18
    e1b8:	27 89       	ldd	r18, Z+23	; 0x17
    e1ba:	20 31       	cpi	r18, 0x10	; 16
    e1bc:	49 f4       	brne	.+18     	; 0xe1d0 <_ZN10SdBaseFile5writeEPKvj+0x112>
    e1be:	88 3f       	cpi	r24, 0xF8	; 248
    e1c0:	ff ef       	ldi	r31, 0xFF	; 255
    e1c2:	9f 07       	cpc	r25, r31
    e1c4:	f0 e0       	ldi	r31, 0x00	; 0
    e1c6:	af 07       	cpc	r26, r31
    e1c8:	f0 e0       	ldi	r31, 0x00	; 0
    e1ca:	bf 07       	cpc	r27, r31
    e1cc:	98 f4       	brcc	.+38     	; 0xe1f4 <_ZN10SdBaseFile5writeEPKvj+0x136>
    e1ce:	18 c0       	rjmp	.+48     	; 0xe200 <_ZN10SdBaseFile5writeEPKvj+0x142>
    return  cluster >= FAT32EOC_MIN;
    e1d0:	88 3f       	cpi	r24, 0xF8	; 248
    e1d2:	2f ef       	ldi	r18, 0xFF	; 255
    e1d4:	92 07       	cpc	r25, r18
    e1d6:	2f ef       	ldi	r18, 0xFF	; 255
    e1d8:	a2 07       	cpc	r26, r18
    e1da:	2f e0       	ldi	r18, 0x0F	; 15
    e1dc:	b2 07       	cpc	r27, r18
    e1de:	80 f0       	brcs	.+32     	; 0xe200 <_ZN10SdBaseFile5writeEPKvj+0x142>
    e1e0:	09 c0       	rjmp	.+18     	; 0xe1f4 <_ZN10SdBaseFile5writeEPKvj+0x136>
          }
        } else {
          curCluster_ = next;
        }
      } else {
        if (firstCluster_ == 0) {
    e1e2:	f7 01       	movw	r30, r14
    e1e4:	87 89       	ldd	r24, Z+23	; 0x17
    e1e6:	90 8d       	ldd	r25, Z+24	; 0x18
    e1e8:	a1 8d       	ldd	r26, Z+25	; 0x19
    e1ea:	b2 8d       	ldd	r27, Z+26	; 0x1a
    e1ec:	00 97       	sbiw	r24, 0x00	; 0
    e1ee:	a1 05       	cpc	r26, r1
    e1f0:	b1 05       	cpc	r27, r1
    e1f2:	31 f4       	brne	.+12     	; 0xe200 <_ZN10SdBaseFile5writeEPKvj+0x142>
          // allocate first cluster of file
          if (!addCluster()) {
    e1f4:	c7 01       	movw	r24, r14
    e1f6:	0e 94 cb 64 	call	0xc996	; 0xc996 <_ZN10SdBaseFile10addClusterEv>
    e1fa:	88 23       	and	r24, r24
    e1fc:	31 f4       	brne	.+12     	; 0xe20a <_ZN10SdBaseFile5writeEPKvj+0x14c>
    e1fe:	22 c1       	rjmp	.+580    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
            DBG_FAIL_MACRO;
            goto fail;
          }
        } else {
          curCluster_ = firstCluster_;
    e200:	f7 01       	movw	r30, r14
    e202:	87 83       	std	Z+7, r24	; 0x07
    e204:	90 87       	std	Z+8, r25	; 0x08
    e206:	a1 87       	std	Z+9, r26	; 0x09
    e208:	b2 87       	std	Z+10, r27	; 0x0a
        }
      }
    }
    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    e20a:	d7 01       	movw	r26, r14
    e20c:	17 96       	adiw	r26, 0x07	; 7
    e20e:	4d 91       	ld	r20, X+
    e210:	5d 91       	ld	r21, X+
    e212:	6d 91       	ld	r22, X+
    e214:	7c 91       	ld	r23, X
    e216:	1a 97       	sbiw	r26, 0x0a	; 10
    e218:	15 96       	adiw	r26, 0x05	; 5
    e21a:	8d 91       	ld	r24, X+
    e21c:	9c 91       	ld	r25, X
    e21e:	16 97       	sbiw	r26, 0x06	; 6
    e220:	0e 94 d4 73 	call	0xe7a8	; 0xe7a8 <_ZNK8SdVolume17clusterStartBlockEm>
    e224:	4b 01       	movw	r8, r22
    e226:	5c 01       	movw	r10, r24
    e228:	80 0e       	add	r8, r16
    e22a:	91 1c       	adc	r9, r1
    e22c:	a1 1c       	adc	r10, r1
    e22e:	b1 1c       	adc	r11, r1

    if (blockOffset != 0 || nToWrite < 512) {
    e230:	41 14       	cp	r4, r1
    e232:	51 04       	cpc	r5, r1
    e234:	a1 f4       	brne	.+40     	; 0xe25e <_ZN10SdBaseFile5writeEPKvj+0x1a0>
    e236:	ef 81       	ldd	r30, Y+7	; 0x07
    e238:	f8 85       	ldd	r31, Y+8	; 0x08
    e23a:	22 e0       	ldi	r18, 0x02	; 2
    e23c:	e0 30       	cpi	r30, 0x00	; 0
    e23e:	f2 07       	cpc	r31, r18
    e240:	c8 f5       	brcc	.+114    	; 0xe2b4 <_ZN10SdBaseFile5writeEPKvj+0x1f6>
      // max space in block
      n = 512 - blockOffset;
      // lesser of space and amount to write
      if (n > nToWrite) n = nToWrite;

      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    e242:	f7 01       	movw	r30, r14
    e244:	83 85       	ldd	r24, Z+11	; 0x0b
    e246:	94 85       	ldd	r25, Z+12	; 0x0c
    e248:	a5 85       	ldd	r26, Z+13	; 0x0d
    e24a:	b6 85       	ldd	r27, Z+14	; 0x0e
    e24c:	43 89       	ldd	r20, Z+19	; 0x13
    e24e:	54 89       	ldd	r21, Z+20	; 0x14
    e250:	65 89       	ldd	r22, Z+21	; 0x15
    e252:	76 89       	ldd	r23, Z+22	; 0x16
    e254:	84 17       	cp	r24, r20
    e256:	95 07       	cpc	r25, r21
    e258:	a6 07       	cpc	r26, r22
    e25a:	b7 07       	cpc	r27, r23
    e25c:	10 f4       	brcc	.+4      	; 0xe262 <_ZN10SdBaseFile5writeEPKvj+0x1a4>
        // start of new block don't need to read into cache
        cacheOption = SdVolume::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of block
        cacheOption = SdVolume::CACHE_FOR_WRITE;
    e25e:	41 e0       	ldi	r20, 0x01	; 1
    e260:	01 c0       	rjmp	.+2      	; 0xe264 <_ZN10SdBaseFile5writeEPKvj+0x1a6>
      // lesser of space and amount to write
      if (n > nToWrite) n = nToWrite;

      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        cacheOption = SdVolume::CACHE_RESERVE_FOR_WRITE;
    e262:	45 e0       	ldi	r20, 0x05	; 5
      } else {
        // rewrite part of block
        cacheOption = SdVolume::CACHE_FOR_WRITE;
        }
        pc = vol_->cacheFetch(block, cacheOption);
    e264:	c5 01       	movw	r24, r10
    e266:	b4 01       	movw	r22, r8
    e268:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
    e26c:	9c 01       	movw	r18, r24
        if (!pc) {
    e26e:	00 97       	sbiw	r24, 0x00	; 0
    e270:	09 f4       	brne	.+2      	; 0xe274 <_ZN10SdBaseFile5writeEPKvj+0x1b6>
    e272:	e8 c0       	rjmp	.+464    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;

    if (blockOffset != 0 || nToWrite < 512) {
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
    e274:	80 e0       	ldi	r24, 0x00	; 0
    e276:	92 e0       	ldi	r25, 0x02	; 2
    e278:	84 19       	sub	r24, r4
    e27a:	95 09       	sbc	r25, r5
    e27c:	2f 80       	ldd	r2, Y+7	; 0x07
    e27e:	38 84       	ldd	r3, Y+8	; 0x08
    e280:	82 15       	cp	r24, r2
    e282:	93 05       	cpc	r25, r3
    e284:	08 f4       	brcc	.+2      	; 0xe288 <_ZN10SdBaseFile5writeEPKvj+0x1ca>
    e286:	1c 01       	movw	r2, r24
        if (!pc) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
    e288:	c9 01       	movw	r24, r18
    e28a:	84 0d       	add	r24, r4
    e28c:	95 1d       	adc	r25, r5
    e28e:	6d 81       	ldd	r22, Y+5	; 0x05
    e290:	7e 81       	ldd	r23, Y+6	; 0x06
    e292:	a1 01       	movw	r20, r2
    e294:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
      if (512 == (n + blockOffset)) {
    e298:	c1 01       	movw	r24, r2
    e29a:	84 0d       	add	r24, r4
    e29c:	95 1d       	adc	r25, r5
    e29e:	f2 e0       	ldi	r31, 0x02	; 2
    e2a0:	80 30       	cpi	r24, 0x00	; 0
    e2a2:	9f 07       	cpc	r25, r31
    e2a4:	09 f0       	breq	.+2      	; 0xe2a8 <_ZN10SdBaseFile5writeEPKvj+0x1ea>
    e2a6:	7c c0       	rjmp	.+248    	; 0xe3a0 <_ZN10SdBaseFile5writeEPKvj+0x2e2>
        if (!vol_->cacheWriteData()) {
    e2a8:	0e 94 c3 73 	call	0xe786	; 0xe786 <_ZN8SdVolume14cacheWriteDataEv>
    e2ac:	88 23       	and	r24, r24
    e2ae:	09 f0       	breq	.+2      	; 0xe2b2 <_ZN10SdBaseFile5writeEPKvj+0x1f4>
    e2b0:	77 c0       	rjmp	.+238    	; 0xe3a0 <_ZN10SdBaseFile5writeEPKvj+0x2e2>
    e2b2:	c8 c0       	rjmp	.+400    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else if (!USE_MULTI_BLOCK_SD_IO || nToWrite < 1024) {
    e2b4:	2f 81       	ldd	r18, Y+7	; 0x07
    e2b6:	38 85       	ldd	r19, Y+8	; 0x08
    e2b8:	44 e0       	ldi	r20, 0x04	; 4
    e2ba:	20 30       	cpi	r18, 0x00	; 0
    e2bc:	34 07       	cpc	r19, r20
    e2be:	00 f5       	brcc	.+64     	; 0xe300 <_ZN10SdBaseFile5writeEPKvj+0x242>
      // use single block write command
      n = 512;
      if (vol_->cacheBlockNumber() == block) {
    e2c0:	80 91 a6 24 	lds	r24, 0x24A6
    e2c4:	90 91 a7 24 	lds	r25, 0x24A7
    e2c8:	a0 91 a8 24 	lds	r26, 0x24A8
    e2cc:	b0 91 a9 24 	lds	r27, 0x24A9
    e2d0:	88 15       	cp	r24, r8
    e2d2:	99 05       	cpc	r25, r9
    e2d4:	aa 05       	cpc	r26, r10
    e2d6:	bb 05       	cpc	r27, r11
    e2d8:	11 f4       	brne	.+4      	; 0xe2de <_ZN10SdBaseFile5writeEPKvj+0x220>
        vol_->cacheInvalidate();
    e2da:	0e 94 c6 73 	call	0xe78c	; 0xe78c <_ZN8SdVolume15cacheInvalidateEv>
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  bool writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    e2de:	80 91 9f 24 	lds	r24, 0x249F
    e2e2:	90 91 a0 24 	lds	r25, 0x24A0
    e2e6:	b5 01       	movw	r22, r10
    e2e8:	a4 01       	movw	r20, r8
    e2ea:	2d 81       	ldd	r18, Y+5	; 0x05
    e2ec:	3e 81       	ldd	r19, Y+6	; 0x06
    e2ee:	0e 94 f3 63 	call	0xc7e6	; 0xc7e6 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) {
    e2f2:	88 23       	and	r24, r24
    e2f4:	09 f4       	brne	.+2      	; 0xe2f8 <_ZN10SdBaseFile5writeEPKvj+0x23a>
    e2f6:	a6 c0       	rjmp	.+332    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
          goto fail;
        }
      }
    } else if (!USE_MULTI_BLOCK_SD_IO || nToWrite < 1024) {
      // use single block write command
      n = 512;
    e2f8:	21 2c       	mov	r2, r1
    e2fa:	f2 e0       	ldi	r31, 0x02	; 2
    e2fc:	3f 2e       	mov	r3, r31
    e2fe:	50 c0       	rjmp	.+160    	; 0xe3a0 <_ZN10SdBaseFile5writeEPKvj+0x2e2>

 fail:
  // return for write error
  writeError = true;
  return -1;
}
    e300:	d7 01       	movw	r26, r14
    e302:	15 96       	adiw	r26, 0x05	; 5
    e304:	ed 91       	ld	r30, X+
    e306:	fc 91       	ld	r31, X
    e308:	16 97       	sbiw	r26, 0x06	; 6
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      // use multiple block write command
      uint8_t maxBlocks = vol_->blocksPerCluster() - blockOfCluster;
    e30a:	84 81       	ldd	r24, Z+4	; 0x04
    e30c:	80 1b       	sub	r24, r16
      uint8_t nBlock = nToWrite >> 9;
    e30e:	d8 84       	ldd	r13, Y+8	; 0x08
    e310:	d6 94       	lsr	r13
    e312:	8d 15       	cp	r24, r13
    e314:	08 f4       	brcc	.+2      	; 0xe318 <_ZN10SdBaseFile5writeEPKvj+0x25a>
    e316:	d8 2e       	mov	r13, r24
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
      if (!vol_->sdCard()->writeStart(block, nBlock)) {
    e318:	0d 2d       	mov	r16, r13
    e31a:	10 e0       	ldi	r17, 0x00	; 0
    e31c:	20 e0       	ldi	r18, 0x00	; 0
    e31e:	30 e0       	ldi	r19, 0x00	; 0
    e320:	80 91 9f 24 	lds	r24, 0x249F
    e324:	90 91 a0 24 	lds	r25, 0x24A0
    e328:	b5 01       	movw	r22, r10
    e32a:	a4 01       	movw	r20, r8
    e32c:	0e 94 44 64 	call	0xc888	; 0xc888 <_ZN7Sd2Card10writeStartEmm>
    e330:	88 23       	and	r24, r24
    e332:	09 f4       	brne	.+2      	; 0xe336 <_ZN10SdBaseFile5writeEPKvj+0x278>
    e334:	87 c0       	rjmp	.+270    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
    e336:	0d 81       	ldd	r16, Y+5	; 0x05
    e338:	1e 81       	ldd	r17, Y+6	; 0x06
          curCluster_ = firstCluster_;
        }
      }
    }
    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    e33a:	24 01       	movw	r4, r8
    e33c:	35 01       	movw	r6, r10
    e33e:	20 c0       	rjmp	.+64     	; 0xe380 <_ZN10SdBaseFile5writeEPKvj+0x2c2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nBlock; b++) {
        // invalidate cache if block is in cache
        if ((block + b) == vol_->cacheBlockNumber()) {
    e340:	80 91 a6 24 	lds	r24, 0x24A6
    e344:	90 91 a7 24 	lds	r25, 0x24A7
    e348:	a0 91 a8 24 	lds	r26, 0x24A8
    e34c:	b0 91 a9 24 	lds	r27, 0x24A9
    e350:	48 16       	cp	r4, r24
    e352:	59 06       	cpc	r5, r25
    e354:	6a 06       	cpc	r6, r26
    e356:	7b 06       	cpc	r7, r27
    e358:	11 f4       	brne	.+4      	; 0xe35e <_ZN10SdBaseFile5writeEPKvj+0x2a0>
          vol_->cacheInvalidate();
    e35a:	0e 94 c6 73 	call	0xe78c	; 0xe78c <_ZN8SdVolume15cacheInvalidateEv>
        }
        if (!vol_->sdCard()->writeData(src + 512*b)) {
    e35e:	80 91 9f 24 	lds	r24, 0x249F
    e362:	90 91 a0 24 	lds	r25, 0x24A0
    e366:	b8 01       	movw	r22, r16
    e368:	0e 94 cd 63 	call	0xc79a	; 0xc79a <_ZN7Sd2Card9writeDataEPKh>
    e36c:	00 50       	subi	r16, 0x00	; 0
    e36e:	1e 4f       	sbci	r17, 0xFE	; 254
    e370:	08 94       	sec
    e372:	41 1c       	adc	r4, r1
    e374:	51 1c       	adc	r5, r1
    e376:	61 1c       	adc	r6, r1
    e378:	71 1c       	adc	r7, r1
    e37a:	88 23       	and	r24, r24
    e37c:	09 f4       	brne	.+2      	; 0xe380 <_ZN10SdBaseFile5writeEPKvj+0x2c2>
    e37e:	62 c0       	rjmp	.+196    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
      n = 512*nBlock;
      if (!vol_->sdCard()->writeStart(block, nBlock)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nBlock; b++) {
    e380:	84 2d       	mov	r24, r4
    e382:	88 19       	sub	r24, r8
    e384:	8d 15       	cp	r24, r13
    e386:	e0 f2       	brcs	.-72     	; 0xe340 <_ZN10SdBaseFile5writeEPKvj+0x282>
        if (!vol_->sdCard()->writeData(src + 512*b)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->writeStop()) {
    e388:	80 91 9f 24 	lds	r24, 0x249F
    e38c:	90 91 a0 24 	lds	r25, 0x24A0
    e390:	0e 94 8f 64 	call	0xc91e	; 0xc91e <_ZN7Sd2Card9writeStopEv>
    e394:	88 23       	and	r24, r24
    e396:	09 f4       	brne	.+2      	; 0xe39a <_ZN10SdBaseFile5writeEPKvj+0x2dc>
    e398:	55 c0       	rjmp	.+170    	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
      // use multiple block write command
      uint8_t maxBlocks = vol_->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
    e39a:	3d 2c       	mov	r3, r13
    e39c:	33 0c       	add	r3, r3
    e39e:	22 24       	eor	r2, r2
      if (!vol_->sdCard()->writeStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    curPosition_ += n;
    e3a0:	a1 01       	movw	r20, r2
    e3a2:	60 e0       	ldi	r22, 0x00	; 0
    e3a4:	70 e0       	ldi	r23, 0x00	; 0
    e3a6:	f7 01       	movw	r30, r14
    e3a8:	83 85       	ldd	r24, Z+11	; 0x0b
    e3aa:	94 85       	ldd	r25, Z+12	; 0x0c
    e3ac:	a5 85       	ldd	r26, Z+13	; 0x0d
    e3ae:	b6 85       	ldd	r27, Z+14	; 0x0e
    e3b0:	84 0f       	add	r24, r20
    e3b2:	95 1f       	adc	r25, r21
    e3b4:	a6 1f       	adc	r26, r22
    e3b6:	b7 1f       	adc	r27, r23
    e3b8:	83 87       	std	Z+11, r24	; 0x0b
    e3ba:	94 87       	std	Z+12, r25	; 0x0c
    e3bc:	a5 87       	std	Z+13, r26	; 0x0d
    e3be:	b6 87       	std	Z+14, r27	; 0x0e
    src += n;
    e3c0:	2d 81       	ldd	r18, Y+5	; 0x05
    e3c2:	3e 81       	ldd	r19, Y+6	; 0x06
    e3c4:	22 0d       	add	r18, r2
    e3c6:	33 1d       	adc	r19, r3
    e3c8:	2d 83       	std	Y+5, r18	; 0x05
    e3ca:	3e 83       	std	Y+6, r19	; 0x06
    nToWrite -= n;
    e3cc:	4f 81       	ldd	r20, Y+7	; 0x07
    e3ce:	58 85       	ldd	r21, Y+8	; 0x08
    e3d0:	42 19       	sub	r20, r2
    e3d2:	53 09       	sbc	r21, r3
    e3d4:	4f 83       	std	Y+7, r20	; 0x07
    e3d6:	58 87       	std	Y+8, r21	; 0x08
    e3d8:	f7 01       	movw	r30, r14
    e3da:	83 85       	ldd	r24, Z+11	; 0x0b
    e3dc:	94 85       	ldd	r25, Z+12	; 0x0c
    e3de:	a5 85       	ldd	r26, Z+13	; 0x0d
    e3e0:	b6 85       	ldd	r27, Z+14	; 0x0e
    if (!seekEnd()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (nToWrite) {
    e3e2:	2f 81       	ldd	r18, Y+7	; 0x07
    e3e4:	38 85       	ldd	r19, Y+8	; 0x08
    e3e6:	21 15       	cp	r18, r1
    e3e8:	31 05       	cpc	r19, r1
    e3ea:	09 f0       	breq	.+2      	; 0xe3ee <_ZN10SdBaseFile5writeEPKvj+0x330>
    e3ec:	ab ce       	rjmp	.-682    	; 0xe144 <_ZN10SdBaseFile5writeEPKvj+0x86>
    }
    curPosition_ += n;
    src += n;
    nToWrite -= n;
  }
  if (curPosition_ > fileSize_) {
    e3ee:	43 89       	ldd	r20, Z+19	; 0x13
    e3f0:	54 89       	ldd	r21, Z+20	; 0x14
    e3f2:	65 89       	ldd	r22, Z+21	; 0x15
    e3f4:	76 89       	ldd	r23, Z+22	; 0x16
    e3f6:	48 17       	cp	r20, r24
    e3f8:	59 07       	cpc	r21, r25
    e3fa:	6a 07       	cpc	r22, r26
    e3fc:	7b 07       	cpc	r23, r27
    e3fe:	40 f4       	brcc	.+16     	; 0xe410 <_ZN10SdBaseFile5writeEPKvj+0x352>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    e400:	83 8b       	std	Z+19, r24	; 0x13
    e402:	94 8b       	std	Z+20, r25	; 0x14
    e404:	a5 8b       	std	Z+21, r26	; 0x15
    e406:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    e408:	81 81       	ldd	r24, Z+1	; 0x01
    e40a:	80 68       	ori	r24, 0x80	; 128
    e40c:	81 83       	std	Z+1, r24	; 0x01
    e40e:	0e c0       	rjmp	.+28     	; 0xe42c <_ZN10SdBaseFile5writeEPKvj+0x36e>
  } else if (dateTime_ && nbyte) {
    e410:	80 91 9b 24 	lds	r24, 0x249B
    e414:	90 91 9c 24 	lds	r25, 0x249C
    e418:	00 97       	sbiw	r24, 0x00	; 0
    e41a:	41 f0       	breq	.+16     	; 0xe42c <_ZN10SdBaseFile5writeEPKvj+0x36e>
    e41c:	29 85       	ldd	r18, Y+9	; 0x09
    e41e:	3a 85       	ldd	r19, Y+10	; 0x0a
    e420:	21 15       	cp	r18, r1
    e422:	31 05       	cpc	r19, r1
    e424:	19 f0       	breq	.+6      	; 0xe42c <_ZN10SdBaseFile5writeEPKvj+0x36e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    e426:	81 81       	ldd	r24, Z+1	; 0x01
    e428:	80 68       	ori	r24, 0x80	; 128
    e42a:	81 83       	std	Z+1, r24	; 0x01
  }

  if (flags_ & O_SYNC) {
    e42c:	f7 01       	movw	r30, r14
    e42e:	81 81       	ldd	r24, Z+1	; 0x01
    e430:	83 ff       	sbrs	r24, 3
    e432:	05 c0       	rjmp	.+10     	; 0xe43e <_ZN10SdBaseFile5writeEPKvj+0x380>
    if (!sync()) {
    e434:	c7 01       	movw	r24, r14
    e436:	0e 94 43 6a 	call	0xd486	; 0xd486 <_ZN10SdBaseFile4syncEv>
    e43a:	88 23       	and	r24, r24
    e43c:	19 f0       	breq	.+6      	; 0xe444 <_ZN10SdBaseFile5writeEPKvj+0x386>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
    e43e:	89 85       	ldd	r24, Y+9	; 0x09
    e440:	9a 85       	ldd	r25, Y+10	; 0x0a
    e442:	05 c0       	rjmp	.+10     	; 0xe44e <_ZN10SdBaseFile5writeEPKvj+0x390>

 fail:
  // return for write error
  writeError = true;
    e444:	81 e0       	ldi	r24, 0x01	; 1
    e446:	d7 01       	movw	r26, r14
    e448:	8c 93       	st	X, r24
  return -1;
    e44a:	8f ef       	ldi	r24, 0xFF	; 255
    e44c:	9f ef       	ldi	r25, 0xFF	; 255
}
    e44e:	2a 96       	adiw	r28, 0x0a	; 10
    e450:	cd bf       	out	0x3d, r28	; 61
    e452:	de bf       	out	0x3e, r29	; 62
    e454:	df 91       	pop	r29
    e456:	cf 91       	pop	r28
    e458:	1f 91       	pop	r17
    e45a:	0f 91       	pop	r16
    e45c:	ff 90       	pop	r15
    e45e:	ef 90       	pop	r14
    e460:	df 90       	pop	r13
    e462:	bf 90       	pop	r11
    e464:	af 90       	pop	r10
    e466:	9f 90       	pop	r9
    e468:	8f 90       	pop	r8
    e46a:	7f 90       	pop	r7
    e46c:	6f 90       	pop	r6
    e46e:	5f 90       	pop	r5
    e470:	4f 90       	pop	r4
    e472:	3f 90       	pop	r3
    e474:	2f 90       	pop	r2
    e476:	08 95       	ret
  if (!isFile() || !(flags_ & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    e478:	82 fd       	sbrc	r24, 2
    e47a:	49 ce       	rjmp	.-878    	; 0xe10e <_ZN10SdBaseFile5writeEPKvj+0x50>
    e47c:	5c ce       	rjmp	.-840    	; 0xe136 <_ZN10SdBaseFile5writeEPKvj+0x78>

0000e47e <_ZN5SdFat5chdirEb>:
 *  working directory if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::chdir(bool set_cwd) {
    e47e:	0f 93       	push	r16
    e480:	1f 93       	push	r17
    e482:	cf 93       	push	r28
    e484:	df 93       	push	r29
    e486:	ec 01       	movw	r28, r24
  if (set_cwd) SdBaseFile::cwd_ = &vwd_;
    e488:	66 23       	and	r22, r22
    e48a:	29 f0       	breq	.+10     	; 0xe496 <_ZN5SdFat5chdirEb+0x18>
    e48c:	83 96       	adiw	r24, 0x23	; 35
    e48e:	80 93 9d 24 	sts	0x249D, r24
    e492:	90 93 9e 24 	sts	0x249E, r25
  if (vwd_.isOpen()) vwd_.close();
    e496:	8e a1       	lds	r24, 0x4e
    e498:	8e 01       	movw	r16, r28
    e49a:	0d 5d       	subi	r16, 0xDD	; 221
    e49c:	1f 4f       	sbci	r17, 0xFF	; 255
    e49e:	88 23       	and	r24, r24
    e4a0:	19 f0       	breq	.+6      	; 0xe4a8 <_ZN5SdFat5chdirEb+0x2a>
    e4a2:	c8 01       	movw	r24, r16
    e4a4:	0e 94 8e 6a 	call	0xd51c	; 0xd51c <_ZN10SdBaseFile5closeEv>
  return vwd_.openRoot(&vol_);
    e4a8:	be 01       	movw	r22, r28
    e4aa:	6b 5f       	subi	r22, 0xFB	; 251
    e4ac:	7f 4f       	sbci	r23, 0xFF	; 255
    e4ae:	c8 01       	movw	r24, r16
    e4b0:	0e 94 fb 69 	call	0xd3f6	; 0xd3f6 <_ZN10SdBaseFile8openRootEP8SdVolume>
}
    e4b4:	df 91       	pop	r29
    e4b6:	cf 91       	pop	r28
    e4b8:	1f 91       	pop	r17
    e4ba:	0f 91       	pop	r16
    e4bc:	08 95       	ret

0000e4be <_ZN5SdFat5beginEi>:
#ifndef ARBITROS_CMP
bool SdFat::begin(uint8_t chipSelectPin, uint8_t sckRateID) {
  return card_.init(sckRateID, chipSelectPin) && vol_.init(&card_) && chdir(1);
}
#else
bool SdFat::begin(t_SPIHNDL t_handle) {
    e4be:	ef 92       	push	r14
    e4c0:	ff 92       	push	r15
    e4c2:	0f 93       	push	r16
    e4c4:	1f 93       	push	r17
    e4c6:	cf 93       	push	r28
    e4c8:	df 93       	push	r29
    e4ca:	0f 92       	push	r0
    e4cc:	0f 92       	push	r0
    e4ce:	cd b7       	in	r28, 0x3d	; 61
    e4d0:	de b7       	in	r29, 0x3e	; 62
    e4d2:	7c 01       	movw	r14, r24
    e4d4:	69 83       	std	Y+1, r22	; 0x01
    e4d6:	7a 83       	std	Y+2, r23	; 0x02
   return card_.init(t_handle) && vol_.init(&card_) && chdir(1);
    e4d8:	69 81       	ldd	r22, Y+1	; 0x01
    e4da:	7a 81       	ldd	r23, Y+2	; 0x02
    e4dc:	0e 94 48 62 	call	0xc490	; 0xc490 <_ZN7Sd2Card4initEi>
    e4e0:	88 23       	and	r24, r24
    e4e2:	b1 f0       	breq	.+44     	; 0xe510 <_ZN5SdFat5beginEi+0x52>
    e4e4:	87 01       	movw	r16, r14
    e4e6:	0b 5f       	subi	r16, 0xFB	; 251
    e4e8:	1f 4f       	sbci	r17, 0xFF	; 255
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  bool init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    e4ea:	c8 01       	movw	r24, r16
    e4ec:	b7 01       	movw	r22, r14
    e4ee:	41 e0       	ldi	r20, 0x01	; 1
    e4f0:	0e 94 55 76 	call	0xecaa	; 0xecaa <_ZN8SdVolume4initEP7Sd2Cardh>
    e4f4:	88 23       	and	r24, r24
    e4f6:	39 f4       	brne	.+14     	; 0xe506 <_ZN5SdFat5beginEi+0x48>
    e4f8:	c8 01       	movw	r24, r16
    e4fa:	b7 01       	movw	r22, r14
    e4fc:	40 e0       	ldi	r20, 0x00	; 0
    e4fe:	0e 94 55 76 	call	0xecaa	; 0xecaa <_ZN8SdVolume4initEP7Sd2Cardh>
    e502:	88 23       	and	r24, r24
    e504:	29 f0       	breq	.+10     	; 0xe510 <_ZN5SdFat5beginEi+0x52>
    e506:	c7 01       	movw	r24, r14
    e508:	61 e0       	ldi	r22, 0x01	; 1
    e50a:	0e 94 3f 72 	call	0xe47e	; 0xe47e <_ZN5SdFat5chdirEb>
    e50e:	01 c0       	rjmp	.+2      	; 0xe512 <_ZN5SdFat5beginEi+0x54>
    e510:	80 e0       	ldi	r24, 0x00	; 0
}
    e512:	0f 90       	pop	r0
    e514:	0f 90       	pop	r0
    e516:	df 91       	pop	r29
    e518:	cf 91       	pop	r28
    e51a:	1f 91       	pop	r17
    e51c:	0f 91       	pop	r16
    e51e:	ff 90       	pop	r15
    e520:	ef 90       	pop	r14
    e522:	08 95       	ret

0000e524 <_ZN5SdFat5chdirEPKcb>:
 *  working directory if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::chdir(const char *path, bool set_cwd) {
    e524:	ff 92       	push	r15
    e526:	0f 93       	push	r16
    e528:	1f 93       	push	r17
    e52a:	cf 93       	push	r28
    e52c:	df 93       	push	r29
    e52e:	cd b7       	in	r28, 0x3d	; 61
    e530:	de b7       	in	r29, 0x3e	; 62
    e532:	6b 97       	sbiw	r28, 0x1b	; 27
    e534:	cd bf       	out	0x3d, r28	; 61
    e536:	de bf       	out	0x3e, r29	; 62
    e538:	fb 01       	movw	r30, r22
    e53a:	f4 2e       	mov	r15, r20
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    e53c:	19 82       	std	Y+1, r1	; 0x01
    e53e:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile dir;
  if (path[0] == '/' && path[1] == '\0') return chdir(set_cwd);
    e540:	20 81       	ld	r18, Z
    e542:	2f 32       	cpi	r18, 0x2F	; 47
    e544:	39 f4       	brne	.+14     	; 0xe554 <_ZN5SdFat5chdirEPKcb+0x30>
    e546:	21 81       	ldd	r18, Z+1	; 0x01
    e548:	22 23       	and	r18, r18
    e54a:	21 f4       	brne	.+8      	; 0xe554 <_ZN5SdFat5chdirEPKcb+0x30>
    e54c:	64 2f       	mov	r22, r20
    e54e:	0e 94 3f 72 	call	0xe47e	; 0xe47e <_ZN5SdFat5chdirEb>
    e552:	21 c0       	rjmp	.+66     	; 0xe596 <_ZN5SdFat5chdirEPKcb+0x72>
  if (!dir.open(&vwd_, path, O_READ)) goto fail;
    e554:	8c 01       	movw	r16, r24
    e556:	0d 5d       	subi	r16, 0xDD	; 221
    e558:	1f 4f       	sbci	r17, 0xFF	; 255
    e55a:	ce 01       	movw	r24, r28
    e55c:	01 96       	adiw	r24, 0x01	; 1
    e55e:	b8 01       	movw	r22, r16
    e560:	af 01       	movw	r20, r30
    e562:	21 e0       	ldi	r18, 0x01	; 1
    e564:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_ZN10SdBaseFile4openEPS_PKch>
    e568:	88 23       	and	r24, r24
    e56a:	91 f0       	breq	.+36     	; 0xe590 <_ZN5SdFat5chdirEPKcb+0x6c>
  if (!dir.isDir()) goto fail;
    e56c:	8c 81       	ldd	r24, Y+4	; 0x04
    e56e:	82 30       	cpi	r24, 0x02	; 2
    e570:	78 f0       	brcs	.+30     	; 0xe590 <_ZN5SdFat5chdirEPKcb+0x6c>
  vwd_ = dir;
    e572:	d8 01       	movw	r26, r16
    e574:	fe 01       	movw	r30, r28
    e576:	31 96       	adiw	r30, 0x01	; 1
    e578:	8b e1       	ldi	r24, 0x1B	; 27
    e57a:	01 90       	ld	r0, Z+
    e57c:	0d 92       	st	X+, r0
    e57e:	81 50       	subi	r24, 0x01	; 1
    e580:	e1 f7       	brne	.-8      	; 0xe57a <_ZN5SdFat5chdirEPKcb+0x56>
  if (set_cwd) SdBaseFile::cwd_ = &vwd_;
    e582:	ff 20       	and	r15, r15
    e584:	39 f0       	breq	.+14     	; 0xe594 <_ZN5SdFat5chdirEPKcb+0x70>
    e586:	00 93 9d 24 	sts	0x249D, r16
    e58a:	10 93 9e 24 	sts	0x249E, r17
    e58e:	02 c0       	rjmp	.+4      	; 0xe594 <_ZN5SdFat5chdirEPKcb+0x70>
  return true;

 fail:
  return false;
    e590:	80 e0       	ldi	r24, 0x00	; 0
    e592:	01 c0       	rjmp	.+2      	; 0xe596 <_ZN5SdFat5chdirEPKcb+0x72>
  if (path[0] == '/' && path[1] == '\0') return chdir(set_cwd);
  if (!dir.open(&vwd_, path, O_READ)) goto fail;
  if (!dir.isDir()) goto fail;
  vwd_ = dir;
  if (set_cwd) SdBaseFile::cwd_ = &vwd_;
  return true;
    e594:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  return false;
}
    e596:	6b 96       	adiw	r28, 0x1b	; 27
    e598:	cd bf       	out	0x3d, r28	; 61
    e59a:	de bf       	out	0x3e, r29	; 62
    e59c:	df 91       	pop	r29
    e59e:	cf 91       	pop	r28
    e5a0:	1f 91       	pop	r17
    e5a2:	0f 91       	pop	r16
    e5a4:	ff 90       	pop	r15
    e5a6:	08 95       	ret

0000e5a8 <_ZN5SdFat2lsEh>:
 *
 * LS_SIZE - %Print file size.
 *
 * LS_R - Recursive list of subdirectories.
 */
void SdFat::ls(uint8_t flags) {
    e5a8:	46 2f       	mov	r20, r22
  vwd_.ls(stdOut_, flags);
    e5aa:	20 91 fd 21 	lds	r18, 0x21FD
    e5ae:	30 91 fe 21 	lds	r19, 0x21FE
    e5b2:	83 96       	adiw	r24, 0x23	; 35
    e5b4:	b9 01       	movw	r22, r18
    e5b6:	20 e0       	ldi	r18, 0x00	; 0
    e5b8:	0e 94 f1 6c 	call	0xd9e2	; 0xd9e2 <_ZN10SdBaseFile2lsEP5Printhh>
}
    e5bc:	08 95       	ret

0000e5be <_ZN5SdFat5mkdirEPKcb>:
 * \param[in] pFlag Create missing parent directories if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::mkdir(const char* path, bool pFlag) {
    e5be:	cf 93       	push	r28
    e5c0:	df 93       	push	r29
    e5c2:	cd b7       	in	r28, 0x3d	; 61
    e5c4:	de b7       	in	r29, 0x3e	; 62
    e5c6:	6b 97       	sbiw	r28, 0x1b	; 27
    e5c8:	cd bf       	out	0x3d, r28	; 61
    e5ca:	de bf       	out	0x3e, r29	; 62
    e5cc:	fb 01       	movw	r30, r22
    e5ce:	24 2f       	mov	r18, r20
    e5d0:	19 82       	std	Y+1, r1	; 0x01
    e5d2:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile sub;
  return sub.mkdir(&vwd_, path, pFlag);
    e5d4:	bc 01       	movw	r22, r24
    e5d6:	6d 5d       	subi	r22, 0xDD	; 221
    e5d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5da:	ce 01       	movw	r24, r28
    e5dc:	01 96       	adiw	r24, 0x01	; 1
    e5de:	af 01       	movw	r20, r30
    e5e0:	0e 94 9d 6f 	call	0xdf3a	; 0xdf3a <_ZN10SdBaseFile5mkdirEPS_PKcb>
}
    e5e4:	6b 96       	adiw	r28, 0x1b	; 27
    e5e6:	cd bf       	out	0x3d, r28	; 61
    e5e8:	de bf       	out	0x3e, r29	; 62
    e5ea:	df 91       	pop	r29
    e5ec:	cf 91       	pop	r28
    e5ee:	08 95       	ret

0000e5f0 <_ZN5SdFat6removeEPKc>:
*
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*/
bool SdFat::remove(const char* path) {
  return SdBaseFile::remove(&vwd_, path);
    e5f0:	83 96       	adiw	r24, 0x23	; 35
    e5f2:	0e 94 d0 6e 	call	0xdda0	; 0xdda0 <_ZN10SdBaseFile6removeEPS_PKc>
}
    e5f6:	08 95       	ret

0000e5f8 <_ZN5SdFat5rmdirEPKc>:
 * The subdirectory file will be removed only if it is empty.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::rmdir(const char* path) {
    e5f8:	cf 93       	push	r28
    e5fa:	df 93       	push	r29
    e5fc:	cd b7       	in	r28, 0x3d	; 61
    e5fe:	de b7       	in	r29, 0x3e	; 62
    e600:	6b 97       	sbiw	r28, 0x1b	; 27
    e602:	cd bf       	out	0x3d, r28	; 61
    e604:	de bf       	out	0x3e, r29	; 62
    e606:	19 82       	std	Y+1, r1	; 0x01
    e608:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile sub;
  if (!sub.open(path, O_READ)) return false;
    e60a:	ce 01       	movw	r24, r28
    e60c:	01 96       	adiw	r24, 0x01	; 1
    e60e:	41 e0       	ldi	r20, 0x01	; 1
    e610:	0e 94 ef 6e 	call	0xddde	; 0xddde <_ZN10SdBaseFile4openEPKch>
    e614:	88 23       	and	r24, r24
    e616:	29 f0       	breq	.+10     	; 0xe622 <_ZN5SdFat5rmdirEPKc+0x2a>
  return sub.rmdir();
    e618:	ce 01       	movw	r24, r28
    e61a:	01 96       	adiw	r24, 0x01	; 1
    e61c:	0e 94 70 6b 	call	0xd6e0	; 0xd6e0 <_ZN10SdBaseFile5rmdirEv>
    e620:	01 c0       	rjmp	.+2      	; 0xe624 <_ZN5SdFat5rmdirEPKc+0x2c>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::rmdir(const char* path) {
  SdBaseFile sub;
  if (!sub.open(path, O_READ)) return false;
    e622:	80 e0       	ldi	r24, 0x00	; 0
  return sub.rmdir();
}
    e624:	6b 96       	adiw	r28, 0x1b	; 27
    e626:	cd bf       	out	0x3d, r28	; 61
    e628:	de bf       	out	0x3e, r29	; 62
    e62a:	df 91       	pop	r29
    e62c:	cf 91       	pop	r28
    e62e:	08 95       	ret

0000e630 <_ZN6SdFile5writeEh>:
/** Write a byte to a file. Required by the Arduino Print class.
 * \param[in] b the byte to be written.
 * Use getWriteError to check for errors.
 * \return 1 for success and 0 for failure.
 */
size_t SdFile::write(uint8_t b) {
    e630:	cf 93       	push	r28
    e632:	df 93       	push	r29
    e634:	0f 92       	push	r0
    e636:	cd b7       	in	r28, 0x3d	; 61
    e638:	de b7       	in	r29, 0x3e	; 62
    e63a:	69 83       	std	Y+1, r22	; 0x01
  return SdBaseFile::write(&b, 1) == 1 ? 1 : 0;
    e63c:	04 96       	adiw	r24, 0x04	; 4
    e63e:	be 01       	movw	r22, r28
    e640:	6f 5f       	subi	r22, 0xFF	; 255
    e642:	7f 4f       	sbci	r23, 0xFF	; 255
    e644:	41 e0       	ldi	r20, 0x01	; 1
    e646:	50 e0       	ldi	r21, 0x00	; 0
    e648:	0e 94 5f 70 	call	0xe0be	; 0xe0be <_ZN10SdBaseFile5writeEPKvj>
    e64c:	21 e0       	ldi	r18, 0x01	; 1
    e64e:	30 e0       	ldi	r19, 0x00	; 0
    e650:	81 30       	cpi	r24, 0x01	; 1
    e652:	91 05       	cpc	r25, r1
    e654:	11 f0       	breq	.+4      	; 0xe65a <_ZN6SdFile5writeEh+0x2a>
    e656:	20 e0       	ldi	r18, 0x00	; 0
    e658:	30 e0       	ldi	r19, 0x00	; 0
}
    e65a:	c9 01       	movw	r24, r18
    e65c:	0f 90       	pop	r0
    e65e:	df 91       	pop	r29
    e660:	cf 91       	pop	r28
    e662:	08 95       	ret

0000e664 <_ZN6SdFile5writeEPKvj>:
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdFile::write(const void* buf, size_t nbyte) {
  return SdBaseFile::write(buf, nbyte);
    e664:	04 96       	adiw	r24, 0x04	; 4
    e666:	0e 94 5f 70 	call	0xe0be	; 0xe0be <_ZN10SdBaseFile5writeEPKvj>
}
    e66a:	08 95       	ret

0000e66c <_ZN8SdVolume9cacheSyncEv>:
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
}
//------------------------------------------------------------------------------
bool SdVolume::cacheSync() {
  if (cacheStatus_ & CACHE_STATUS_DIRTY) {
    e66c:	80 91 a5 24 	lds	r24, 0x24A5
    e670:	80 ff       	sbrs	r24, 0
    e672:	3d c0       	rjmp	.+122    	; 0xe6ee <_ZN8SdVolume9cacheSyncEv+0x82>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e674:	40 91 a6 24 	lds	r20, 0x24A6
    e678:	50 91 a7 24 	lds	r21, 0x24A7
    e67c:	60 91 a8 24 	lds	r22, 0x24A8
    e680:	70 91 a9 24 	lds	r23, 0x24A9
    e684:	80 91 9f 24 	lds	r24, 0x249F
    e688:	90 91 a0 24 	lds	r25, 0x24A0
    e68c:	2a ea       	ldi	r18, 0xAA	; 170
    e68e:	34 e2       	ldi	r19, 0x24	; 36
    e690:	0e 94 f3 63 	call	0xc7e6	; 0xc7e6 <_ZN7Sd2Card10writeBlockEmPKh>
    e694:	88 23       	and	r24, r24
    e696:	69 f1       	breq	.+90     	; 0xe6f2 <_ZN8SdVolume9cacheSyncEv+0x86>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if ((cacheStatus_ & CACHE_STATUS_FAT_BLOCK) && cacheFatOffset_) {
    e698:	80 91 a5 24 	lds	r24, 0x24A5
    e69c:	81 ff       	sbrs	r24, 1
    e69e:	22 c0       	rjmp	.+68     	; 0xe6e4 <_ZN8SdVolume9cacheSyncEv+0x78>
    e6a0:	80 91 a1 24 	lds	r24, 0x24A1
    e6a4:	90 91 a2 24 	lds	r25, 0x24A2
    e6a8:	a0 91 a3 24 	lds	r26, 0x24A3
    e6ac:	b0 91 a4 24 	lds	r27, 0x24A4
    e6b0:	00 97       	sbiw	r24, 0x00	; 0
    e6b2:	a1 05       	cpc	r26, r1
    e6b4:	b1 05       	cpc	r27, r1
    e6b6:	b1 f0       	breq	.+44     	; 0xe6e4 <_ZN8SdVolume9cacheSyncEv+0x78>
      uint32_t lbn = cacheBlockNumber_ + cacheFatOffset_;
    e6b8:	40 91 a6 24 	lds	r20, 0x24A6
    e6bc:	50 91 a7 24 	lds	r21, 0x24A7
    e6c0:	60 91 a8 24 	lds	r22, 0x24A8
    e6c4:	70 91 a9 24 	lds	r23, 0x24A9
    e6c8:	48 0f       	add	r20, r24
    e6ca:	59 1f       	adc	r21, r25
    e6cc:	6a 1f       	adc	r22, r26
    e6ce:	7b 1f       	adc	r23, r27
      if (!sdCard_->writeBlock(lbn, cacheBuffer_.data)) {
    e6d0:	80 91 9f 24 	lds	r24, 0x249F
    e6d4:	90 91 a0 24 	lds	r25, 0x24A0
    e6d8:	2a ea       	ldi	r18, 0xAA	; 170
    e6da:	34 e2       	ldi	r19, 0x24	; 36
    e6dc:	0e 94 f3 63 	call	0xc7e6	; 0xc7e6 <_ZN7Sd2Card10writeBlockEmPKh>
    e6e0:	88 23       	and	r24, r24
    e6e2:	49 f0       	breq	.+18     	; 0xe6f6 <_ZN8SdVolume9cacheSyncEv+0x8a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cacheStatus_ &= ~CACHE_STATUS_DIRTY;
    e6e4:	80 91 a5 24 	lds	r24, 0x24A5
    e6e8:	8e 7f       	andi	r24, 0xFE	; 254
    e6ea:	80 93 a5 24 	sts	0x24A5, r24
  }
  return true;
    e6ee:	81 e0       	ldi	r24, 0x01	; 1
    e6f0:	08 95       	ret

 fail:
  return false;
    e6f2:	80 e0       	ldi	r24, 0x00	; 0
    e6f4:	08 95       	ret
    e6f6:	80 e0       	ldi	r24, 0x00	; 0
}
    e6f8:	08 95       	ret

0000e6fa <_ZN8SdVolume10cacheFetchEmh>:
 fail:
  return false;
}
#else  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetch(uint32_t blockNumber, uint8_t options) {
    e6fa:	cf 92       	push	r12
    e6fc:	df 92       	push	r13
    e6fe:	ef 92       	push	r14
    e700:	ff 92       	push	r15
    e702:	cf 93       	push	r28
    e704:	6b 01       	movw	r12, r22
    e706:	7c 01       	movw	r14, r24
    e708:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    e70a:	80 91 a6 24 	lds	r24, 0x24A6
    e70e:	90 91 a7 24 	lds	r25, 0x24A7
    e712:	a0 91 a8 24 	lds	r26, 0x24A8
    e716:	b0 91 a9 24 	lds	r27, 0x24A9
    e71a:	8c 15       	cp	r24, r12
    e71c:	9d 05       	cpc	r25, r13
    e71e:	ae 05       	cpc	r26, r14
    e720:	bf 05       	cpc	r27, r15
    e722:	e1 f0       	breq	.+56     	; 0xe75c <_ZN8SdVolume10cacheFetchEmh+0x62>
    if (!cacheSync()) {
    e724:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
    e728:	88 23       	and	r24, r24
    e72a:	09 f1       	breq	.+66     	; 0xe76e <_ZN8SdVolume10cacheFetchEmh+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(options & CACHE_OPTION_NO_READ)) {
    e72c:	c2 fd       	sbrc	r28, 2
    e72e:	0c c0       	rjmp	.+24     	; 0xe748 <_ZN8SdVolume10cacheFetchEmh+0x4e>
      if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    e730:	80 91 9f 24 	lds	r24, 0x249F
    e734:	90 91 a0 24 	lds	r25, 0x24A0
    e738:	b7 01       	movw	r22, r14
    e73a:	a6 01       	movw	r20, r12
    e73c:	2a ea       	ldi	r18, 0xAA	; 170
    e73e:	34 e2       	ldi	r19, 0x24	; 36
    e740:	0e 94 14 62 	call	0xc428	; 0xc428 <_ZN7Sd2Card9readBlockEmPh>
    e744:	88 23       	and	r24, r24
    e746:	99 f0       	breq	.+38     	; 0xe76e <_ZN8SdVolume10cacheFetchEmh+0x74>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cacheStatus_ = 0;
    e748:	10 92 a5 24 	sts	0x24A5, r1
    cacheBlockNumber_ = blockNumber;
    e74c:	c0 92 a6 24 	sts	0x24A6, r12
    e750:	d0 92 a7 24 	sts	0x24A7, r13
    e754:	e0 92 a8 24 	sts	0x24A8, r14
    e758:	f0 92 a9 24 	sts	0x24A9, r15
  }
  cacheStatus_ |= options & CACHE_STATUS_MASK;
    e75c:	c3 70       	andi	r28, 0x03	; 3
    e75e:	80 91 a5 24 	lds	r24, 0x24A5
    e762:	8c 2b       	or	r24, r28
    e764:	80 93 a5 24 	sts	0x24A5, r24
  return &cacheBuffer_;
    e768:	8a ea       	ldi	r24, 0xAA	; 170
    e76a:	94 e2       	ldi	r25, 0x24	; 36
    e76c:	02 c0       	rjmp	.+4      	; 0xe772 <_ZN8SdVolume10cacheFetchEmh+0x78>

 fail:
  return 0;
    e76e:	80 e0       	ldi	r24, 0x00	; 0
    e770:	90 e0       	ldi	r25, 0x00	; 0
}
    e772:	cf 91       	pop	r28
    e774:	ff 90       	pop	r15
    e776:	ef 90       	pop	r14
    e778:	df 90       	pop	r13
    e77a:	cf 90       	pop	r12
    e77c:	08 95       	ret

0000e77e <_ZN8SdVolume13cacheFetchFatEmh>:
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
    e77e:	42 60       	ori	r20, 0x02	; 2
    e780:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
}
    e784:	08 95       	ret

0000e786 <_ZN8SdVolume14cacheWriteDataEv>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdVolume::cacheWriteData() {
  return cacheSync();
    e786:	0e 94 36 73 	call	0xe66c	; 0xe66c <_ZN8SdVolume9cacheSyncEv>
}
    e78a:	08 95       	ret

0000e78c <_ZN8SdVolume15cacheInvalidateEv>:
#endif  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
void SdVolume::cacheInvalidate() {
    cacheBlockNumber_ = 0XFFFFFFFF;
    e78c:	8f ef       	ldi	r24, 0xFF	; 255
    e78e:	9f ef       	ldi	r25, 0xFF	; 255
    e790:	dc 01       	movw	r26, r24
    e792:	80 93 a6 24 	sts	0x24A6, r24
    e796:	90 93 a7 24 	sts	0x24A7, r25
    e79a:	a0 93 a8 24 	sts	0x24A8, r26
    e79e:	b0 93 a9 24 	sts	0x24A9, r27
    cacheStatus_ = 0;
    e7a2:	10 92 a5 24 	sts	0x24A5, r1
}
    e7a6:	08 95       	ret

0000e7a8 <_ZNK8SdVolume17clusterStartBlockEm>:
//==============================================================================
//------------------------------------------------------------------------------
uint32_t SdVolume::clusterStartBlock(uint32_t cluster) const {
    e7a8:	0f 93       	push	r16
    e7aa:	1f 93       	push	r17
    e7ac:	cf 93       	push	r28
    e7ae:	df 93       	push	r29
    e7b0:	ec 01       	movw	r28, r24
    e7b2:	db 01       	movw	r26, r22
    e7b4:	ca 01       	movw	r24, r20
  return dataStartBlock_ + ((cluster - 2)*blocksPerCluster_);
    e7b6:	02 97       	sbiw	r24, 0x02	; 2
    e7b8:	a1 09       	sbc	r26, r1
    e7ba:	b1 09       	sbc	r27, r1
    e7bc:	2c 81       	ldd	r18, Y+4	; 0x04
    e7be:	30 e0       	ldi	r19, 0x00	; 0
    e7c0:	40 e0       	ldi	r20, 0x00	; 0
    e7c2:	50 e0       	ldi	r21, 0x00	; 0
    e7c4:	bc 01       	movw	r22, r24
    e7c6:	cd 01       	movw	r24, r26
    e7c8:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
    e7cc:	8b 01       	movw	r16, r22
    e7ce:	9c 01       	movw	r18, r24
    e7d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    e7d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    e7d4:	a8 89       	ldd	r26, Y+16	; 0x10
    e7d6:	b9 89       	ldd	r27, Y+17	; 0x11
    e7d8:	08 0f       	add	r16, r24
    e7da:	19 1f       	adc	r17, r25
    e7dc:	2a 1f       	adc	r18, r26
    e7de:	3b 1f       	adc	r19, r27
}
    e7e0:	b8 01       	movw	r22, r16
    e7e2:	c9 01       	movw	r24, r18
    e7e4:	df 91       	pop	r29
    e7e6:	cf 91       	pop	r28
    e7e8:	1f 91       	pop	r17
    e7ea:	0f 91       	pop	r16
    e7ec:	08 95       	ret

0000e7ee <_ZN8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
bool SdVolume::fatGet(uint32_t cluster, uint32_t* value) {
    e7ee:	cf 92       	push	r12
    e7f0:	df 92       	push	r13
    e7f2:	ef 92       	push	r14
    e7f4:	ff 92       	push	r15
    e7f6:	0f 93       	push	r16
    e7f8:	1f 93       	push	r17
    e7fa:	cf 93       	push	r28
    e7fc:	df 93       	push	r29
    e7fe:	ec 01       	movw	r28, r24
    e800:	6a 01       	movw	r12, r20
    e802:	7b 01       	movw	r14, r22
    e804:	89 01       	movw	r16, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2  || cluster > (clusterCount_ + 1)) {
    e806:	42 30       	cpi	r20, 0x02	; 2
    e808:	51 05       	cpc	r21, r1
    e80a:	61 05       	cpc	r22, r1
    e80c:	71 05       	cpc	r23, r1
    e80e:	08 f4       	brcc	.+2      	; 0xe812 <_ZN8SdVolume6fatGetEmPm+0x24>
    e810:	60 c0       	rjmp	.+192    	; 0xe8d2 <_ZN8SdVolume6fatGetEmPm+0xe4>
    e812:	89 85       	ldd	r24, Y+9	; 0x09
    e814:	9a 85       	ldd	r25, Y+10	; 0x0a
    e816:	ab 85       	ldd	r26, Y+11	; 0x0b
    e818:	bc 85       	ldd	r27, Y+12	; 0x0c
    e81a:	01 96       	adiw	r24, 0x01	; 1
    e81c:	a1 1d       	adc	r26, r1
    e81e:	b1 1d       	adc	r27, r1
    e820:	84 17       	cp	r24, r20
    e822:	95 07       	cpc	r25, r21
    e824:	a6 07       	cpc	r26, r22
    e826:	b7 07       	cpc	r27, r23
    e828:	08 f4       	brcc	.+2      	; 0xe82c <_ZN8SdVolume6fatGetEmPm+0x3e>
    e82a:	53 c0       	rjmp	.+166    	; 0xe8d2 <_ZN8SdVolume6fatGetEmPm+0xe4>
    }
    tmp |= pc->data[index] << 8;
    *value = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    return true;
  }
  if (fatType_ == 16) {
    e82c:	8f 89       	ldd	r24, Y+23	; 0x17
    e82e:	80 31       	cpi	r24, 0x10	; 16
    e830:	29 f4       	brne	.+10     	; 0xe83c <_ZN8SdVolume6fatGetEmPm+0x4e>
    lba = fatStartBlock_ + (cluster >> 8);
    e832:	bb 27       	eor	r27, r27
    e834:	a7 2f       	mov	r26, r23
    e836:	96 2f       	mov	r25, r22
    e838:	85 2f       	mov	r24, r21
    e83a:	0c c0       	rjmp	.+24     	; 0xe854 <_ZN8SdVolume6fatGetEmPm+0x66>
  } else if (fatType_ == 32) {
    e83c:	80 32       	cpi	r24, 0x20	; 32
    e83e:	09 f0       	breq	.+2      	; 0xe842 <_ZN8SdVolume6fatGetEmPm+0x54>
    e840:	48 c0       	rjmp	.+144    	; 0xe8d2 <_ZN8SdVolume6fatGetEmPm+0xe4>
    lba = fatStartBlock_ + (cluster >> 7);
    e842:	db 01       	movw	r26, r22
    e844:	ca 01       	movw	r24, r20
    e846:	e7 e0       	ldi	r30, 0x07	; 7
    e848:	b6 95       	lsr	r27
    e84a:	a7 95       	ror	r26
    e84c:	97 95       	ror	r25
    e84e:	87 95       	ror	r24
    e850:	ea 95       	dec	r30
    e852:	d1 f7       	brne	.-12     	; 0xe848 <_ZN8SdVolume6fatGetEmPm+0x5a>
    e854:	4b 89       	ldd	r20, Y+19	; 0x13
    e856:	5c 89       	ldd	r21, Y+20	; 0x14
    e858:	6d 89       	ldd	r22, Y+21	; 0x15
    e85a:	7e 89       	ldd	r23, Y+22	; 0x16
    e85c:	84 0f       	add	r24, r20
    e85e:	95 1f       	adc	r25, r21
    e860:	a6 1f       	adc	r26, r22
    e862:	b7 1f       	adc	r27, r23
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_READ);
    e864:	bc 01       	movw	r22, r24
    e866:	cd 01       	movw	r24, r26
    e868:	40 e0       	ldi	r20, 0x00	; 0
    e86a:	0e 94 bf 73 	call	0xe77e	; 0xe77e <_ZN8SdVolume13cacheFetchFatEmh>
  if (!pc) {
    e86e:	00 97       	sbiw	r24, 0x00	; 0
    e870:	81 f1       	breq	.+96     	; 0xe8d2 <_ZN8SdVolume6fatGetEmPm+0xe4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (fatType_ == 16) {
    e872:	2f 89       	ldd	r18, Y+23	; 0x17
    e874:	20 31       	cpi	r18, 0x10	; 16
    e876:	91 f4       	brne	.+36     	; 0xe89c <_ZN8SdVolume6fatGetEmPm+0xae>
    *value = pc->fat16[cluster & 0XFF];
    e878:	2f ef       	ldi	r18, 0xFF	; 255
    e87a:	30 e0       	ldi	r19, 0x00	; 0
    e87c:	40 e0       	ldi	r20, 0x00	; 0
    e87e:	50 e0       	ldi	r21, 0x00	; 0
    e880:	c2 22       	and	r12, r18
    e882:	d3 22       	and	r13, r19
    e884:	e4 22       	and	r14, r20
    e886:	f5 22       	and	r15, r21
    e888:	cc 0c       	add	r12, r12
    e88a:	dd 1c       	adc	r13, r13
    e88c:	c8 0e       	add	r12, r24
    e88e:	d9 1e       	adc	r13, r25
    e890:	f6 01       	movw	r30, r12
    e892:	80 81       	ld	r24, Z
    e894:	91 81       	ldd	r25, Z+1	; 0x01
    e896:	a0 e0       	ldi	r26, 0x00	; 0
    e898:	b0 e0       	ldi	r27, 0x00	; 0
    e89a:	14 c0       	rjmp	.+40     	; 0xe8c4 <_ZN8SdVolume6fatGetEmPm+0xd6>
  } else {
    *value = pc->fat32[cluster & 0X7F] & FAT32MASK;
    e89c:	2f e7       	ldi	r18, 0x7F	; 127
    e89e:	30 e0       	ldi	r19, 0x00	; 0
    e8a0:	40 e0       	ldi	r20, 0x00	; 0
    e8a2:	50 e0       	ldi	r21, 0x00	; 0
    e8a4:	c2 22       	and	r12, r18
    e8a6:	d3 22       	and	r13, r19
    e8a8:	e4 22       	and	r14, r20
    e8aa:	f5 22       	and	r15, r21
    e8ac:	cc 0c       	add	r12, r12
    e8ae:	dd 1c       	adc	r13, r13
    e8b0:	cc 0c       	add	r12, r12
    e8b2:	dd 1c       	adc	r13, r13
    e8b4:	c8 0e       	add	r12, r24
    e8b6:	d9 1e       	adc	r13, r25
    e8b8:	f6 01       	movw	r30, r12
    e8ba:	80 81       	ld	r24, Z
    e8bc:	91 81       	ldd	r25, Z+1	; 0x01
    e8be:	a2 81       	ldd	r26, Z+2	; 0x02
    e8c0:	b3 81       	ldd	r27, Z+3	; 0x03
    e8c2:	bf 70       	andi	r27, 0x0F	; 15
    e8c4:	f8 01       	movw	r30, r16
    e8c6:	80 83       	st	Z, r24
    e8c8:	91 83       	std	Z+1, r25	; 0x01
    e8ca:	a2 83       	std	Z+2, r26	; 0x02
    e8cc:	b3 83       	std	Z+3, r27	; 0x03
  }
  return true;
    e8ce:	81 e0       	ldi	r24, 0x01	; 1
    e8d0:	01 c0       	rjmp	.+2      	; 0xe8d4 <_ZN8SdVolume6fatGetEmPm+0xe6>

 fail:
  return false;
    e8d2:	80 e0       	ldi	r24, 0x00	; 0
}
    e8d4:	df 91       	pop	r29
    e8d6:	cf 91       	pop	r28
    e8d8:	1f 91       	pop	r17
    e8da:	0f 91       	pop	r16
    e8dc:	ff 90       	pop	r15
    e8de:	ef 90       	pop	r14
    e8e0:	df 90       	pop	r13
    e8e2:	cf 90       	pop	r12
    e8e4:	08 95       	ret

0000e8e6 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    e8e6:	8f 92       	push	r8
    e8e8:	9f 92       	push	r9
    e8ea:	af 92       	push	r10
    e8ec:	bf 92       	push	r11
    e8ee:	cf 92       	push	r12
    e8f0:	df 92       	push	r13
    e8f2:	ef 92       	push	r14
    e8f4:	ff 92       	push	r15
    e8f6:	0f 93       	push	r16
    e8f8:	1f 93       	push	r17
    e8fa:	cf 93       	push	r28
    e8fc:	df 93       	push	r29
    e8fe:	ec 01       	movw	r28, r24
    e900:	6a 01       	movw	r12, r20
    e902:	7b 01       	movw	r14, r22
    e904:	48 01       	movw	r8, r16
    e906:	59 01       	movw	r10, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > (clusterCount_ + 1)) {
    e908:	42 30       	cpi	r20, 0x02	; 2
    e90a:	51 05       	cpc	r21, r1
    e90c:	61 05       	cpc	r22, r1
    e90e:	71 05       	cpc	r23, r1
    e910:	08 f4       	brcc	.+2      	; 0xe914 <_ZN8SdVolume6fatPutEmm+0x2e>
    e912:	58 c0       	rjmp	.+176    	; 0xe9c4 <_ZN8SdVolume6fatPutEmm+0xde>
    e914:	89 85       	ldd	r24, Y+9	; 0x09
    e916:	9a 85       	ldd	r25, Y+10	; 0x0a
    e918:	ab 85       	ldd	r26, Y+11	; 0x0b
    e91a:	bc 85       	ldd	r27, Y+12	; 0x0c
    e91c:	01 96       	adiw	r24, 0x01	; 1
    e91e:	a1 1d       	adc	r26, r1
    e920:	b1 1d       	adc	r27, r1
    e922:	84 17       	cp	r24, r20
    e924:	95 07       	cpc	r25, r21
    e926:	a6 07       	cpc	r26, r22
    e928:	b7 07       	cpc	r27, r23
    e92a:	08 f4       	brcc	.+2      	; 0xe92e <_ZN8SdVolume6fatPutEmm+0x48>
    e92c:	4b c0       	rjmp	.+150    	; 0xe9c4 <_ZN8SdVolume6fatPutEmm+0xde>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  }
  if (fatType_ == 16) {
    e92e:	8f 89       	ldd	r24, Y+23	; 0x17
    e930:	80 31       	cpi	r24, 0x10	; 16
    e932:	29 f4       	brne	.+10     	; 0xe93e <_ZN8SdVolume6fatPutEmm+0x58>
    lba = fatStartBlock_ + (cluster >> 8);
    e934:	bb 27       	eor	r27, r27
    e936:	a7 2f       	mov	r26, r23
    e938:	96 2f       	mov	r25, r22
    e93a:	85 2f       	mov	r24, r21
    e93c:	0c c0       	rjmp	.+24     	; 0xe956 <_ZN8SdVolume6fatPutEmm+0x70>
  } else if (fatType_ == 32) {
    e93e:	80 32       	cpi	r24, 0x20	; 32
    e940:	09 f0       	breq	.+2      	; 0xe944 <_ZN8SdVolume6fatPutEmm+0x5e>
    e942:	40 c0       	rjmp	.+128    	; 0xe9c4 <_ZN8SdVolume6fatPutEmm+0xde>
    lba = fatStartBlock_ + (cluster >> 7);
    e944:	db 01       	movw	r26, r22
    e946:	ca 01       	movw	r24, r20
    e948:	17 e0       	ldi	r17, 0x07	; 7
    e94a:	b6 95       	lsr	r27
    e94c:	a7 95       	ror	r26
    e94e:	97 95       	ror	r25
    e950:	87 95       	ror	r24
    e952:	1a 95       	dec	r17
    e954:	d1 f7       	brne	.-12     	; 0xe94a <_ZN8SdVolume6fatPutEmm+0x64>
    e956:	4b 89       	ldd	r20, Y+19	; 0x13
    e958:	5c 89       	ldd	r21, Y+20	; 0x14
    e95a:	6d 89       	ldd	r22, Y+21	; 0x15
    e95c:	7e 89       	ldd	r23, Y+22	; 0x16
    e95e:	84 0f       	add	r24, r20
    e960:	95 1f       	adc	r25, r21
    e962:	a6 1f       	adc	r26, r22
    e964:	b7 1f       	adc	r27, r23
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_WRITE);
    e966:	bc 01       	movw	r22, r24
    e968:	cd 01       	movw	r24, r26
    e96a:	41 e0       	ldi	r20, 0x01	; 1
    e96c:	0e 94 bf 73 	call	0xe77e	; 0xe77e <_ZN8SdVolume13cacheFetchFatEmh>
  if (!pc) {
    e970:	00 97       	sbiw	r24, 0x00	; 0
    e972:	41 f1       	breq	.+80     	; 0xe9c4 <_ZN8SdVolume6fatPutEmm+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // store entry
  if (fatType_ == 16) {
    e974:	2f 89       	ldd	r18, Y+23	; 0x17
    e976:	20 31       	cpi	r18, 0x10	; 16
    e978:	81 f4       	brne	.+32     	; 0xe99a <_ZN8SdVolume6fatPutEmm+0xb4>
    pc->fat16[cluster & 0XFF] = value;
    e97a:	2f ef       	ldi	r18, 0xFF	; 255
    e97c:	30 e0       	ldi	r19, 0x00	; 0
    e97e:	40 e0       	ldi	r20, 0x00	; 0
    e980:	50 e0       	ldi	r21, 0x00	; 0
    e982:	c2 22       	and	r12, r18
    e984:	d3 22       	and	r13, r19
    e986:	e4 22       	and	r14, r20
    e988:	f5 22       	and	r15, r21
    e98a:	f6 01       	movw	r30, r12
    e98c:	ee 0f       	add	r30, r30
    e98e:	ff 1f       	adc	r31, r31
    e990:	e8 0f       	add	r30, r24
    e992:	f9 1f       	adc	r31, r25
    e994:	80 82       	st	Z, r8
    e996:	91 82       	std	Z+1, r9	; 0x01
    e998:	13 c0       	rjmp	.+38     	; 0xe9c0 <_ZN8SdVolume6fatPutEmm+0xda>
  } else {
    pc->fat32[cluster & 0X7F] = value;
    e99a:	2f e7       	ldi	r18, 0x7F	; 127
    e99c:	30 e0       	ldi	r19, 0x00	; 0
    e99e:	40 e0       	ldi	r20, 0x00	; 0
    e9a0:	50 e0       	ldi	r21, 0x00	; 0
    e9a2:	c2 22       	and	r12, r18
    e9a4:	d3 22       	and	r13, r19
    e9a6:	e4 22       	and	r14, r20
    e9a8:	f5 22       	and	r15, r21
    e9aa:	f6 01       	movw	r30, r12
    e9ac:	ee 0f       	add	r30, r30
    e9ae:	ff 1f       	adc	r31, r31
    e9b0:	ee 0f       	add	r30, r30
    e9b2:	ff 1f       	adc	r31, r31
    e9b4:	e8 0f       	add	r30, r24
    e9b6:	f9 1f       	adc	r31, r25
    e9b8:	80 82       	st	Z, r8
    e9ba:	91 82       	std	Z+1, r9	; 0x01
    e9bc:	a2 82       	std	Z+2, r10	; 0x02
    e9be:	b3 82       	std	Z+3, r11	; 0x03
  }
  return true;
    e9c0:	81 e0       	ldi	r24, 0x01	; 1
    e9c2:	01 c0       	rjmp	.+2      	; 0xe9c6 <_ZN8SdVolume6fatPutEmm+0xe0>

 fail:
  return false;
    e9c4:	80 e0       	ldi	r24, 0x00	; 0
}
    e9c6:	df 91       	pop	r29
    e9c8:	cf 91       	pop	r28
    e9ca:	1f 91       	pop	r17
    e9cc:	0f 91       	pop	r16
    e9ce:	ff 90       	pop	r15
    e9d0:	ef 90       	pop	r14
    e9d2:	df 90       	pop	r13
    e9d4:	cf 90       	pop	r12
    e9d6:	bf 90       	pop	r11
    e9d8:	af 90       	pop	r10
    e9da:	9f 90       	pop	r9
    e9dc:	8f 90       	pop	r8
    e9de:	08 95       	ret

0000e9e0 <_ZN8SdVolume15allocContiguousEmPm>:
#endif  // USE_SEPARATE_FAT_CACHE
Sd2Card* SdVolume::sdCard_;            // pointer to SD card object
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    e9e0:	2f 92       	push	r2
    e9e2:	3f 92       	push	r3
    e9e4:	4f 92       	push	r4
    e9e6:	5f 92       	push	r5
    e9e8:	6f 92       	push	r6
    e9ea:	7f 92       	push	r7
    e9ec:	8f 92       	push	r8
    e9ee:	9f 92       	push	r9
    e9f0:	af 92       	push	r10
    e9f2:	bf 92       	push	r11
    e9f4:	cf 92       	push	r12
    e9f6:	df 92       	push	r13
    e9f8:	ef 92       	push	r14
    e9fa:	ff 92       	push	r15
    e9fc:	0f 93       	push	r16
    e9fe:	1f 93       	push	r17
    ea00:	cf 93       	push	r28
    ea02:	df 93       	push	r29
    ea04:	cd b7       	in	r28, 0x3d	; 61
    ea06:	de b7       	in	r29, 0x3e	; 62
    ea08:	2f 97       	sbiw	r28, 0x0f	; 15
    ea0a:	cd bf       	out	0x3d, r28	; 61
    ea0c:	de bf       	out	0x3e, r29	; 62
    ea0e:	1c 01       	movw	r2, r24
    ea10:	4c 87       	std	Y+12, r20	; 0x0c
    ea12:	5d 87       	std	Y+13, r21	; 0x0d
    ea14:	6e 87       	std	Y+14, r22	; 0x0e
    ea16:	7f 87       	std	Y+15, r23	; 0x0f
    ea18:	2a 87       	std	Y+10, r18	; 0x0a
    ea1a:	3b 87       	std	Y+11, r19	; 0x0b
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    ea1c:	dc 01       	movw	r26, r24
    ea1e:	19 96       	adiw	r26, 0x09	; 9
    ea20:	2d 91       	ld	r18, X+
    ea22:	3d 91       	ld	r19, X+
    ea24:	4d 91       	ld	r20, X+
    ea26:	5c 91       	ld	r21, X
    ea28:	1c 97       	sbiw	r26, 0x0c	; 12
    ea2a:	2f 5f       	subi	r18, 0xFF	; 255
    ea2c:	3f 4f       	sbci	r19, 0xFF	; 255
    ea2e:	4f 4f       	sbci	r20, 0xFF	; 255
    ea30:	5f 4f       	sbci	r21, 0xFF	; 255
    ea32:	2e 83       	std	Y+6, r18	; 0x06
    ea34:	3f 83       	std	Y+7, r19	; 0x07
    ea36:	48 87       	std	Y+8, r20	; 0x08
    ea38:	59 87       	std	Y+9, r21	; 0x09

  // flag to save place to start next search
  bool setStart;

  // set search start cluster
  if (*curCluster) {
    ea3a:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea3c:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea3e:	40 80       	ld	r4, Z
    ea40:	51 80       	ldd	r5, Z+1	; 0x01
    ea42:	62 80       	ldd	r6, Z+2	; 0x02
    ea44:	73 80       	ldd	r7, Z+3	; 0x03
    ea46:	41 14       	cp	r4, r1
    ea48:	51 04       	cpc	r5, r1
    ea4a:	61 04       	cpc	r6, r1
    ea4c:	71 04       	cpc	r7, r1
    ea4e:	31 f0       	breq	.+12     	; 0xea5c <_ZN8SdVolume15allocContiguousEmPm+0x7c>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    ea50:	08 94       	sec
    ea52:	41 1c       	adc	r4, r1
    ea54:	51 1c       	adc	r5, r1
    ea56:	61 1c       	adc	r6, r1
    ea58:	71 1c       	adc	r7, r1
    ea5a:	10 c0       	rjmp	.+32     	; 0xea7c <_ZN8SdVolume15allocContiguousEmPm+0x9c>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    ea5c:	dc 01       	movw	r26, r24
    ea5e:	4d 90       	ld	r4, X+
    ea60:	5d 90       	ld	r5, X+
    ea62:	6d 90       	ld	r6, X+
    ea64:	7c 90       	ld	r7, X

    // save next search start if one cluster
    setStart = count == 1;
    ea66:	b1 e0       	ldi	r27, 0x01	; 1
    ea68:	bd 83       	std	Y+5, r27	; 0x05
    ea6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    ea6c:	3d 85       	ldd	r19, Y+13	; 0x0d
    ea6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    ea70:	5f 85       	ldd	r21, Y+15	; 0x0f
    ea72:	21 30       	cpi	r18, 0x01	; 1
    ea74:	31 05       	cpc	r19, r1
    ea76:	41 05       	cpc	r20, r1
    ea78:	51 05       	cpc	r21, r1
    ea7a:	09 f0       	breq	.+2      	; 0xea7e <_ZN8SdVolume15allocContiguousEmPm+0x9e>
    ea7c:	1d 82       	std	Y+5, r1	; 0x05
  }
  // end of group
  endCluster = bgnCluster;
    ea7e:	53 01       	movw	r10, r6
    ea80:	42 01       	movw	r8, r4

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    ea82:	cc 24       	eor	r12, r12
    ea84:	dd 24       	eor	r13, r13
    ea86:	76 01       	movw	r14, r12
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    ea88:	f1 01       	movw	r30, r2
    ea8a:	81 85       	ldd	r24, Z+9	; 0x09
    ea8c:	92 85       	ldd	r25, Z+10	; 0x0a
    ea8e:	a3 85       	ldd	r26, Z+11	; 0x0b
    ea90:	b4 85       	ldd	r27, Z+12	; 0x0c
    ea92:	c8 16       	cp	r12, r24
    ea94:	d9 06       	cpc	r13, r25
    ea96:	ea 06       	cpc	r14, r26
    ea98:	fb 06       	cpc	r15, r27
    ea9a:	08 f0       	brcs	.+2      	; 0xea9e <_ZN8SdVolume15allocContiguousEmPm+0xbe>
    ea9c:	93 c0       	rjmp	.+294    	; 0xebc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    ea9e:	2e 81       	ldd	r18, Y+6	; 0x06
    eaa0:	3f 81       	ldd	r19, Y+7	; 0x07
    eaa2:	48 85       	ldd	r20, Y+8	; 0x08
    eaa4:	59 85       	ldd	r21, Y+9	; 0x09
    eaa6:	28 15       	cp	r18, r8
    eaa8:	39 05       	cpc	r19, r9
    eaaa:	4a 05       	cpc	r20, r10
    eaac:	5b 05       	cpc	r21, r11
    eaae:	50 f4       	brcc	.+20     	; 0xeac4 <_ZN8SdVolume15allocContiguousEmPm+0xe4>
      bgnCluster = endCluster = 2;
    eab0:	82 e0       	ldi	r24, 0x02	; 2
    eab2:	88 2e       	mov	r8, r24
    eab4:	91 2c       	mov	r9, r1
    eab6:	a1 2c       	mov	r10, r1
    eab8:	b1 2c       	mov	r11, r1
    eaba:	92 e0       	ldi	r25, 0x02	; 2
    eabc:	49 2e       	mov	r4, r25
    eabe:	51 2c       	mov	r5, r1
    eac0:	61 2c       	mov	r6, r1
    eac2:	71 2c       	mov	r7, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    eac4:	c1 01       	movw	r24, r2
    eac6:	b5 01       	movw	r22, r10
    eac8:	a4 01       	movw	r20, r8
    eaca:	9e 01       	movw	r18, r28
    eacc:	2f 5f       	subi	r18, 0xFF	; 255
    eace:	3f 4f       	sbci	r19, 0xFF	; 255
    ead0:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    ead4:	88 23       	and	r24, r24
    ead6:	09 f4       	brne	.+2      	; 0xeada <_ZN8SdVolume15allocContiguousEmPm+0xfa>
    ead8:	75 c0       	rjmp	.+234    	; 0xebc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }

    if (f != 0) {
    eada:	49 81       	ldd	r20, Y+1	; 0x01
    eadc:	5a 81       	ldd	r21, Y+2	; 0x02
    eade:	6b 81       	ldd	r22, Y+3	; 0x03
    eae0:	7c 81       	ldd	r23, Y+4	; 0x04
    eae2:	d5 01       	movw	r26, r10
    eae4:	c4 01       	movw	r24, r8
    eae6:	01 96       	adiw	r24, 0x01	; 1
    eae8:	a1 1d       	adc	r26, r1
    eaea:	b1 1d       	adc	r27, r1
    eaec:	41 15       	cp	r20, r1
    eaee:	51 05       	cpc	r21, r1
    eaf0:	61 05       	cpc	r22, r1
    eaf2:	71 05       	cpc	r23, r1
    eaf4:	19 f0       	breq	.+6      	; 0xeafc <_ZN8SdVolume15allocContiguousEmPm+0x11c>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    eaf6:	2c 01       	movw	r4, r24
    eaf8:	3d 01       	movw	r6, r26
    eafa:	0d c0       	rjmp	.+26     	; 0xeb16 <_ZN8SdVolume15allocContiguousEmPm+0x136>
    } else if ((endCluster - bgnCluster + 1) == count) {
    eafc:	84 19       	sub	r24, r4
    eafe:	95 09       	sbc	r25, r5
    eb00:	a6 09       	sbc	r26, r6
    eb02:	b7 09       	sbc	r27, r7
    eb04:	2c 85       	ldd	r18, Y+12	; 0x0c
    eb06:	3d 85       	ldd	r19, Y+13	; 0x0d
    eb08:	4e 85       	ldd	r20, Y+14	; 0x0e
    eb0a:	5f 85       	ldd	r21, Y+15	; 0x0f
    eb0c:	82 17       	cp	r24, r18
    eb0e:	93 07       	cpc	r25, r19
    eb10:	a4 07       	cpc	r26, r20
    eb12:	b5 07       	cpc	r27, r21
    eb14:	59 f0       	breq	.+22     	; 0xeb2c <_ZN8SdVolume15allocContiguousEmPm+0x14c>
  }
  // end of group
  endCluster = bgnCluster;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    eb16:	08 94       	sec
    eb18:	c1 1c       	adc	r12, r1
    eb1a:	d1 1c       	adc	r13, r1
    eb1c:	e1 1c       	adc	r14, r1
    eb1e:	f1 1c       	adc	r15, r1
    eb20:	08 94       	sec
    eb22:	81 1c       	adc	r8, r1
    eb24:	91 1c       	adc	r9, r1
    eb26:	a1 1c       	adc	r10, r1
    eb28:	b1 1c       	adc	r11, r1
    eb2a:	ae cf       	rjmp	.-164    	; 0xea88 <_ZN8SdVolume15allocContiguousEmPm+0xa8>
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    eb2c:	c1 01       	movw	r24, r2
    eb2e:	a4 01       	movw	r20, r8
    eb30:	b5 01       	movw	r22, r10
    eb32:	0f ef       	ldi	r16, 0xFF	; 255
    eb34:	1f ef       	ldi	r17, 0xFF	; 255
    eb36:	2f ef       	ldi	r18, 0xFF	; 255
    eb38:	3f e0       	ldi	r19, 0x0F	; 15
    eb3a:	0e 94 73 74 	call	0xe8e6	; 0xe8e6 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    eb3e:	88 23       	and	r24, r24
    eb40:	91 f4       	brne	.+36     	; 0xeb66 <_ZN8SdVolume15allocContiguousEmPm+0x186>
    eb42:	40 c0       	rjmp	.+128    	; 0xebc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    eb44:	68 01       	movw	r12, r16
    eb46:	79 01       	movw	r14, r18
    eb48:	08 94       	sec
    eb4a:	c1 08       	sbc	r12, r1
    eb4c:	d1 08       	sbc	r13, r1
    eb4e:	e1 08       	sbc	r14, r1
    eb50:	f1 08       	sbc	r15, r1
    eb52:	c1 01       	movw	r24, r2
    eb54:	b7 01       	movw	r22, r14
    eb56:	a6 01       	movw	r20, r12
    eb58:	0e 94 73 74 	call	0xe8e6	; 0xe8e6 <_ZN8SdVolume6fatPutEmm>
    eb5c:	88 23       	and	r24, r24
    eb5e:	91 f1       	breq	.+100    	; 0xebc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    endCluster--;
    eb60:	97 01       	movw	r18, r14
    eb62:	86 01       	movw	r16, r12
    eb64:	02 c0       	rjmp	.+4      	; 0xeb6a <_ZN8SdVolume15allocContiguousEmPm+0x18a>
    eb66:	95 01       	movw	r18, r10
    eb68:	84 01       	movw	r16, r8
  if (!fatPutEOC(endCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    eb6a:	40 16       	cp	r4, r16
    eb6c:	51 06       	cpc	r5, r17
    eb6e:	62 06       	cpc	r6, r18
    eb70:	73 06       	cpc	r7, r19
    eb72:	40 f3       	brcs	.-48     	; 0xeb44 <_ZN8SdVolume15allocContiguousEmPm+0x164>
      DBG_FAIL_MACRO;
      goto fail;
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    eb74:	aa 85       	ldd	r26, Y+10	; 0x0a
    eb76:	bb 85       	ldd	r27, Y+11	; 0x0b
    eb78:	4d 91       	ld	r20, X+
    eb7a:	5d 91       	ld	r21, X+
    eb7c:	6d 91       	ld	r22, X+
    eb7e:	7c 91       	ld	r23, X
    eb80:	13 97       	sbiw	r26, 0x03	; 3
    eb82:	41 15       	cp	r20, r1
    eb84:	51 05       	cpc	r21, r1
    eb86:	61 05       	cpc	r22, r1
    eb88:	71 05       	cpc	r23, r1
    eb8a:	39 f0       	breq	.+14     	; 0xeb9a <_ZN8SdVolume15allocContiguousEmPm+0x1ba>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    eb8c:	c1 01       	movw	r24, r2
    eb8e:	93 01       	movw	r18, r6
    eb90:	82 01       	movw	r16, r4
    eb92:	0e 94 73 74 	call	0xe8e6	; 0xe8e6 <_ZN8SdVolume6fatPutEmm>
    eb96:	88 23       	and	r24, r24
    eb98:	a9 f0       	breq	.+42     	; 0xebc4 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    eb9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    eb9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    eb9e:	40 82       	st	Z, r4
    eba0:	51 82       	std	Z+1, r5	; 0x01
    eba2:	62 82       	std	Z+2, r6	; 0x02
    eba4:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    eba6:	fd 81       	ldd	r31, Y+5	; 0x05
    eba8:	ff 23       	and	r31, r31
    ebaa:	71 f0       	breq	.+28     	; 0xebc8 <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    ebac:	08 94       	sec
    ebae:	41 1c       	adc	r4, r1
    ebb0:	51 1c       	adc	r5, r1
    ebb2:	61 1c       	adc	r6, r1
    ebb4:	71 1c       	adc	r7, r1
    ebb6:	d1 01       	movw	r26, r2
    ebb8:	4d 92       	st	X+, r4
    ebba:	5d 92       	st	X+, r5
    ebbc:	6d 92       	st	X+, r6
    ebbe:	7c 92       	st	X, r7
    ebc0:	13 97       	sbiw	r26, 0x03	; 3
    ebc2:	02 c0       	rjmp	.+4      	; 0xebc8 <_ZN8SdVolume15allocContiguousEmPm+0x1e8>

  return true;

 fail:
  return false;
    ebc4:	80 e0       	ldi	r24, 0x00	; 0
    ebc6:	01 c0       	rjmp	.+2      	; 0xebca <_ZN8SdVolume15allocContiguousEmPm+0x1ea>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    ebc8:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  return false;
}
    ebca:	2f 96       	adiw	r28, 0x0f	; 15
    ebcc:	cd bf       	out	0x3d, r28	; 61
    ebce:	de bf       	out	0x3e, r29	; 62
    ebd0:	df 91       	pop	r29
    ebd2:	cf 91       	pop	r28
    ebd4:	1f 91       	pop	r17
    ebd6:	0f 91       	pop	r16
    ebd8:	ff 90       	pop	r15
    ebda:	ef 90       	pop	r14
    ebdc:	df 90       	pop	r13
    ebde:	cf 90       	pop	r12
    ebe0:	bf 90       	pop	r11
    ebe2:	af 90       	pop	r10
    ebe4:	9f 90       	pop	r9
    ebe6:	8f 90       	pop	r8
    ebe8:	7f 90       	pop	r7
    ebea:	6f 90       	pop	r6
    ebec:	5f 90       	pop	r5
    ebee:	4f 90       	pop	r4
    ebf0:	3f 90       	pop	r3
    ebf2:	2f 90       	pop	r2
    ebf4:	08 95       	ret

0000ebf6 <_ZN8SdVolume9freeChainEm>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool SdVolume::freeChain(uint32_t cluster) {
    ebf6:	af 92       	push	r10
    ebf8:	bf 92       	push	r11
    ebfa:	cf 92       	push	r12
    ebfc:	df 92       	push	r13
    ebfe:	ef 92       	push	r14
    ec00:	ff 92       	push	r15
    ec02:	0f 93       	push	r16
    ec04:	1f 93       	push	r17
    ec06:	cf 93       	push	r28
    ec08:	df 93       	push	r29
    ec0a:	00 d0       	rcall	.+0      	; 0xec0c <_ZN8SdVolume9freeChainEm+0x16>
    ec0c:	0f 92       	push	r0
    ec0e:	cd b7       	in	r28, 0x3d	; 61
    ec10:	de b7       	in	r29, 0x3e	; 62
    ec12:	5c 01       	movw	r10, r24
    ec14:	6a 01       	movw	r12, r20
    ec16:	7b 01       	movw	r14, r22
  uint32_t next;

  // clear free cluster location
  allocSearchStart_ = 2;
    ec18:	82 e0       	ldi	r24, 0x02	; 2
    ec1a:	90 e0       	ldi	r25, 0x00	; 0
    ec1c:	a0 e0       	ldi	r26, 0x00	; 0
    ec1e:	b0 e0       	ldi	r27, 0x00	; 0
    ec20:	f5 01       	movw	r30, r10
    ec22:	80 83       	st	Z, r24
    ec24:	91 83       	std	Z+1, r25	; 0x01
    ec26:	a2 83       	std	Z+2, r26	; 0x02
    ec28:	b3 83       	std	Z+3, r27	; 0x03

  do {
    if (!fatGet(cluster, &next)) {
    ec2a:	c5 01       	movw	r24, r10
    ec2c:	b7 01       	movw	r22, r14
    ec2e:	a6 01       	movw	r20, r12
    ec30:	9e 01       	movw	r18, r28
    ec32:	2f 5f       	subi	r18, 0xFF	; 255
    ec34:	3f 4f       	sbci	r19, 0xFF	; 255
    ec36:	0e 94 f7 73 	call	0xe7ee	; 0xe7ee <_ZN8SdVolume6fatGetEmPm>
    ec3a:	88 23       	and	r24, r24
    ec3c:	39 f1       	breq	.+78     	; 0xec8c <_ZN8SdVolume9freeChainEm+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    ec3e:	c5 01       	movw	r24, r10
    ec40:	b7 01       	movw	r22, r14
    ec42:	a6 01       	movw	r20, r12
    ec44:	00 e0       	ldi	r16, 0x00	; 0
    ec46:	10 e0       	ldi	r17, 0x00	; 0
    ec48:	98 01       	movw	r18, r16
    ec4a:	0e 94 73 74 	call	0xe8e6	; 0xe8e6 <_ZN8SdVolume6fatPutEmm>
    ec4e:	88 23       	and	r24, r24
    ec50:	e9 f0       	breq	.+58     	; 0xec8c <_ZN8SdVolume9freeChainEm+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }

    cluster = next;
    ec52:	c9 80       	ldd	r12, Y+1	; 0x01
    ec54:	da 80       	ldd	r13, Y+2	; 0x02
    ec56:	eb 80       	ldd	r14, Y+3	; 0x03
    ec58:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    ec5a:	f5 01       	movw	r30, r10
    ec5c:	87 89       	ldd	r24, Z+23	; 0x17
    ec5e:	80 31       	cpi	r24, 0x10	; 16
    ec60:	51 f4       	brne	.+20     	; 0xec76 <_ZN8SdVolume9freeChainEm+0x80>
    ec62:	f8 ef       	ldi	r31, 0xF8	; 248
    ec64:	cf 16       	cp	r12, r31
    ec66:	ff ef       	ldi	r31, 0xFF	; 255
    ec68:	df 06       	cpc	r13, r31
    ec6a:	f0 e0       	ldi	r31, 0x00	; 0
    ec6c:	ef 06       	cpc	r14, r31
    ec6e:	f0 e0       	ldi	r31, 0x00	; 0
    ec70:	ff 06       	cpc	r15, r31
    ec72:	50 f4       	brcc	.+20     	; 0xec88 <_ZN8SdVolume9freeChainEm+0x92>
    ec74:	da cf       	rjmp	.-76     	; 0xec2a <_ZN8SdVolume9freeChainEm+0x34>
    return  cluster >= FAT32EOC_MIN;
    ec76:	88 ef       	ldi	r24, 0xF8	; 248
    ec78:	c8 16       	cp	r12, r24
    ec7a:	8f ef       	ldi	r24, 0xFF	; 255
    ec7c:	d8 06       	cpc	r13, r24
    ec7e:	8f ef       	ldi	r24, 0xFF	; 255
    ec80:	e8 06       	cpc	r14, r24
    ec82:	8f e0       	ldi	r24, 0x0F	; 15
    ec84:	f8 06       	cpc	r15, r24
    ec86:	88 f2       	brcs	.-94     	; 0xec2a <_ZN8SdVolume9freeChainEm+0x34>
  } while (!isEOC(cluster));

  return true;
    ec88:	81 e0       	ldi	r24, 0x01	; 1
    ec8a:	01 c0       	rjmp	.+2      	; 0xec8e <_ZN8SdVolume9freeChainEm+0x98>

 fail:
  return false;
    ec8c:	80 e0       	ldi	r24, 0x00	; 0
}
    ec8e:	24 96       	adiw	r28, 0x04	; 4
    ec90:	cd bf       	out	0x3d, r28	; 61
    ec92:	de bf       	out	0x3e, r29	; 62
    ec94:	df 91       	pop	r29
    ec96:	cf 91       	pop	r28
    ec98:	1f 91       	pop	r17
    ec9a:	0f 91       	pop	r16
    ec9c:	ff 90       	pop	r15
    ec9e:	ef 90       	pop	r14
    eca0:	df 90       	pop	r13
    eca2:	cf 90       	pop	r12
    eca4:	bf 90       	pop	r11
    eca6:	af 90       	pop	r10
    eca8:	08 95       	ret

0000ecaa <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
    ecaa:	3f 92       	push	r3
    ecac:	4f 92       	push	r4
    ecae:	5f 92       	push	r5
    ecb0:	6f 92       	push	r6
    ecb2:	7f 92       	push	r7
    ecb4:	8f 92       	push	r8
    ecb6:	9f 92       	push	r9
    ecb8:	af 92       	push	r10
    ecba:	bf 92       	push	r11
    ecbc:	cf 92       	push	r12
    ecbe:	df 92       	push	r13
    ecc0:	ef 92       	push	r14
    ecc2:	ff 92       	push	r15
    ecc4:	0f 93       	push	r16
    ecc6:	1f 93       	push	r17
    ecc8:	cf 93       	push	r28
    ecca:	df 93       	push	r29
    eccc:	00 d0       	rcall	.+0      	; 0xecce <_ZN8SdVolume4initEP7Sd2Cardh+0x24>
    ecce:	0f 92       	push	r0
    ecd0:	cd b7       	in	r28, 0x3d	; 61
    ecd2:	de b7       	in	r29, 0x3e	; 62
    ecd4:	8b 83       	std	Y+3, r24	; 0x03
    ecd6:	9c 83       	std	Y+4, r25	; 0x04
    ecd8:	04 2f       	mov	r16, r20
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  sdCard_ = dev;
    ecda:	60 93 9f 24 	sts	0x249F, r22
    ecde:	70 93 a0 24 	sts	0x24A0, r23
  fatType_ = 0;
    ece2:	fc 01       	movw	r30, r24
    ece4:	17 8a       	std	Z+23, r1	; 0x17
  allocSearchStart_ = 2;
    ece6:	82 e0       	ldi	r24, 0x02	; 2
    ece8:	90 e0       	ldi	r25, 0x00	; 0
    ecea:	a0 e0       	ldi	r26, 0x00	; 0
    ecec:	b0 e0       	ldi	r27, 0x00	; 0
    ecee:	80 83       	st	Z, r24
    ecf0:	91 83       	std	Z+1, r25	; 0x01
    ecf2:	a2 83       	std	Z+2, r26	; 0x02
    ecf4:	b3 83       	std	Z+3, r27	; 0x03
  cacheStatus_ = 0;  // cacheSync() will write block if true
    ecf6:	10 92 a5 24 	sts	0x24A5, r1
  cacheBlockNumber_ = 0XFFFFFFFF;
    ecfa:	8f ef       	ldi	r24, 0xFF	; 255
    ecfc:	9f ef       	ldi	r25, 0xFF	; 255
    ecfe:	dc 01       	movw	r26, r24
    ed00:	80 93 a6 24 	sts	0x24A6, r24
    ed04:	90 93 a7 24 	sts	0x24A7, r25
    ed08:	a0 93 a8 24 	sts	0x24A8, r26
    ed0c:	b0 93 a9 24 	sts	0x24A9, r27
  cacheFatOffset_ = 0;
    ed10:	10 92 a1 24 	sts	0x24A1, r1
    ed14:	10 92 a2 24 	sts	0x24A2, r1
    ed18:	10 92 a3 24 	sts	0x24A3, r1
    ed1c:	10 92 a4 24 	sts	0x24A4, r1
  cacheFatStatus_ = 0;  // cacheSync() will write block if true
  cacheFatBlockNumber_ = 0XFFFFFFFF;
#endif  // USE_SERARATEFAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    ed20:	44 23       	and	r20, r20
    ed22:	91 f1       	breq	.+100    	; 0xed88 <_ZN8SdVolume4initEP7Sd2Cardh+0xde>
    if (part > 4) {
    ed24:	45 30       	cpi	r20, 0x05	; 5
    ed26:	08 f0       	brcs	.+2      	; 0xed2a <_ZN8SdVolume4initEP7Sd2Cardh+0x80>
    ed28:	25 c1       	rjmp	.+586    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    ed2a:	60 e0       	ldi	r22, 0x00	; 0
    ed2c:	70 e0       	ldi	r23, 0x00	; 0
    ed2e:	cb 01       	movw	r24, r22
    ed30:	40 e0       	ldi	r20, 0x00	; 0
    ed32:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
    if (!pc) {
    ed36:	00 97       	sbiw	r24, 0x00	; 0
    ed38:	09 f4       	brne	.+2      	; 0xed3c <_ZN8SdVolume4initEP7Sd2Cardh+0x92>
    ed3a:	1c c1       	rjmp	.+568    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part-1];
    ed3c:	e0 2f       	mov	r30, r16
    ed3e:	f0 e0       	ldi	r31, 0x00	; 0
    ed40:	24 e0       	ldi	r18, 0x04	; 4
    ed42:	ee 0f       	add	r30, r30
    ed44:	ff 1f       	adc	r31, r31
    ed46:	2a 95       	dec	r18
    ed48:	e1 f7       	brne	.-8      	; 0xed42 <_ZN8SdVolume4initEP7Sd2Cardh+0x98>
    ed4a:	e2 55       	subi	r30, 0x52	; 82
    ed4c:	fe 4f       	sbci	r31, 0xFE	; 254
    ed4e:	e8 0f       	add	r30, r24
    ed50:	f9 1f       	adc	r31, r25
    if ((p->boot & 0X7F) !=0  ||
    ed52:	80 81       	ld	r24, Z
    ed54:	90 e0       	ldi	r25, 0x00	; 0
    ed56:	8f 77       	andi	r24, 0x7F	; 127
    ed58:	90 70       	andi	r25, 0x00	; 0
    ed5a:	00 97       	sbiw	r24, 0x00	; 0
    ed5c:	09 f0       	breq	.+2      	; 0xed60 <_ZN8SdVolume4initEP7Sd2Cardh+0xb6>
    ed5e:	0a c1       	rjmp	.+532    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    ed60:	84 85       	ldd	r24, Z+12	; 0x0c
    ed62:	95 85       	ldd	r25, Z+13	; 0x0d
    ed64:	a6 85       	ldd	r26, Z+14	; 0x0e
    ed66:	b7 85       	ldd	r27, Z+15	; 0x0f
    ed68:	84 36       	cpi	r24, 0x64	; 100
    ed6a:	91 05       	cpc	r25, r1
    ed6c:	a1 05       	cpc	r26, r1
    ed6e:	b1 05       	cpc	r27, r1
    ed70:	08 f4       	brcc	.+2      	; 0xed74 <_ZN8SdVolume4initEP7Sd2Cardh+0xca>
    ed72:	00 c1       	rjmp	.+512    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    ed74:	40 84       	ldd	r4, Z+8	; 0x08
    ed76:	51 84       	ldd	r5, Z+9	; 0x09
    ed78:	62 84       	ldd	r6, Z+10	; 0x0a
    ed7a:	73 84       	ldd	r7, Z+11	; 0x0b
    ed7c:	41 14       	cp	r4, r1
    ed7e:	51 04       	cpc	r5, r1
    ed80:	61 04       	cpc	r6, r1
    ed82:	71 04       	cpc	r7, r1
    ed84:	21 f4       	brne	.+8      	; 0xed8e <_ZN8SdVolume4initEP7Sd2Cardh+0xe4>
    ed86:	f6 c0       	rjmp	.+492    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
    ed88:	44 24       	eor	r4, r4
    ed8a:	55 24       	eor	r5, r5
    ed8c:	32 01       	movw	r6, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    ed8e:	c3 01       	movw	r24, r6
    ed90:	b2 01       	movw	r22, r4
    ed92:	40 e0       	ldi	r20, 0x00	; 0
    ed94:	0e 94 7d 73 	call	0xe6fa	; 0xe6fa <_ZN8SdVolume10cacheFetchEmh>
    ed98:	8c 01       	movw	r16, r24
  if (!pc) {
    ed9a:	00 97       	sbiw	r24, 0x00	; 0
    ed9c:	09 f4       	brne	.+2      	; 0xeda0 <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    ed9e:	ea c0       	rjmp	.+468    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
    eda0:	fc 01       	movw	r30, r24
    eda2:	83 85       	ldd	r24, Z+11	; 0x0b
    eda4:	94 85       	ldd	r25, Z+12	; 0x0c
    eda6:	f2 e0       	ldi	r31, 0x02	; 2
    eda8:	80 30       	cpi	r24, 0x00	; 0
    edaa:	9f 07       	cpc	r25, r31
    edac:	09 f0       	breq	.+2      	; 0xedb0 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    edae:	e2 c0       	rjmp	.+452    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    edb0:	f8 01       	movw	r30, r16
    edb2:	20 89       	ldd	r18, Z+16	; 0x10
    edb4:	22 23       	and	r18, r18
    edb6:	09 f4       	brne	.+2      	; 0xedba <_ZN8SdVolume4initEP7Sd2Cardh+0x110>
    edb8:	dd c0       	rjmp	.+442    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    edba:	86 85       	ldd	r24, Z+14	; 0x0e
    edbc:	97 85       	ldd	r25, Z+15	; 0x0f
    edbe:	00 97       	sbiw	r24, 0x00	; 0
    edc0:	09 f4       	brne	.+2      	; 0xedc4 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    edc2:	d8 c0       	rjmp	.+432    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    edc4:	85 85       	ldd	r24, Z+13	; 0x0d
    edc6:	88 23       	and	r24, r24
    edc8:	09 f4       	brne	.+2      	; 0xedcc <_ZN8SdVolume4initEP7Sd2Cardh+0x122>
    edca:	d4 c0       	rjmp	.+424    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    fbs->sectorsPerCluster == 0) {
       // not valid FAT volume
      DBG_FAIL_MACRO;
      goto fail;
  }
  fatCount_ = fbs->fatCount;
    edcc:	eb 81       	ldd	r30, Y+3	; 0x03
    edce:	fc 81       	ldd	r31, Y+4	; 0x04
    edd0:	22 8b       	std	Z+18, r18	; 0x12
  blocksPerCluster_ = fbs->sectorsPerCluster;
    edd2:	f8 01       	movw	r30, r16
    edd4:	25 85       	ldd	r18, Z+13	; 0x0d
    edd6:	eb 81       	ldd	r30, Y+3	; 0x03
    edd8:	fc 81       	ldd	r31, Y+4	; 0x04
    edda:	24 83       	std	Z+4, r18	; 0x04
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    eddc:	15 86       	std	Z+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    edde:	30 e0       	ldi	r19, 0x00	; 0
    ede0:	41 e0       	ldi	r20, 0x01	; 1
    ede2:	50 e0       	ldi	r21, 0x00	; 0
    ede4:	09 c0       	rjmp	.+18     	; 0xedf8 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    ede6:	83 2d       	mov	r24, r3
    ede8:	8f 5f       	subi	r24, 0xFF	; 255
    edea:	eb 81       	ldd	r30, Y+3	; 0x03
    edec:	fc 81       	ldd	r31, Y+4	; 0x04
    edee:	85 87       	std	Z+13, r24	; 0x0d
    edf0:	f7 e0       	ldi	r31, 0x07	; 7
    edf2:	f3 15       	cp	r31, r3
    edf4:	08 f4       	brcc	.+2      	; 0xedf8 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    edf6:	be c0       	rjmp	.+380    	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
  }
  fatCount_ = fbs->fatCount;
  blocksPerCluster_ = fbs->sectorsPerCluster;
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    edf8:	eb 81       	ldd	r30, Y+3	; 0x03
    edfa:	fc 81       	ldd	r31, Y+4	; 0x04
    edfc:	35 84       	ldd	r3, Z+13	; 0x0d
    edfe:	ca 01       	movw	r24, r20
    ee00:	03 2c       	mov	r0, r3
    ee02:	02 c0       	rjmp	.+4      	; 0xee08 <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    ee04:	88 0f       	add	r24, r24
    ee06:	99 1f       	adc	r25, r25
    ee08:	0a 94       	dec	r0
    ee0a:	e2 f7       	brpl	.-8      	; 0xee04 <_ZN8SdVolume4initEP7Sd2Cardh+0x15a>
    ee0c:	28 17       	cp	r18, r24
    ee0e:	39 07       	cpc	r19, r25
    ee10:	51 f7       	brne	.-44     	; 0xede6 <_ZN8SdVolume4initEP7Sd2Cardh+0x13c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  blocksPerFat_ = fbs->sectorsPerFat16 ?
                    fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
    ee12:	f8 01       	movw	r30, r16
    ee14:	c6 88       	ldd	r12, Z+22	; 0x16
    ee16:	d7 88       	ldd	r13, Z+23	; 0x17
    ee18:	c1 14       	cp	r12, r1
    ee1a:	d1 04       	cpc	r13, r1
    ee1c:	19 f0       	breq	.+6      	; 0xee24 <_ZN8SdVolume4initEP7Sd2Cardh+0x17a>
    ee1e:	ee 24       	eor	r14, r14
    ee20:	ff 24       	eor	r15, r15
    ee22:	05 c0       	rjmp	.+10     	; 0xee2e <_ZN8SdVolume4initEP7Sd2Cardh+0x184>
    ee24:	f8 01       	movw	r30, r16
    ee26:	c4 a0       	lds	r28, 0x84
    ee28:	d5 a0       	lds	r29, 0x85
    ee2a:	e6 a0       	lds	r30, 0x86
    ee2c:	f7 a0       	lds	r31, 0x87
    ee2e:	eb 81       	ldd	r30, Y+3	; 0x03
    ee30:	fc 81       	ldd	r31, Y+4	; 0x04
    ee32:	c5 82       	std	Z+5, r12	; 0x05
    ee34:	d6 82       	std	Z+6, r13	; 0x06
    ee36:	e7 82       	std	Z+7, r14	; 0x07
    ee38:	f0 86       	std	Z+8, r15	; 0x08

  if (fatCount_ > 0) cacheFatOffset_ = blocksPerFat_;
    ee3a:	c0 92 a1 24 	sts	0x24A1, r12
    ee3e:	d0 92 a2 24 	sts	0x24A2, r13
    ee42:	e0 92 a3 24 	sts	0x24A3, r14
    ee46:	f0 92 a4 24 	sts	0x24A4, r15
  fatStartBlock_ = volumeStartBlock + fbs->reservedSectorCount;
    ee4a:	f8 01       	movw	r30, r16
    ee4c:	86 85       	ldd	r24, Z+14	; 0x0e
    ee4e:	97 85       	ldd	r25, Z+15	; 0x0f
    ee50:	4c 01       	movw	r8, r24
    ee52:	aa 24       	eor	r10, r10
    ee54:	bb 24       	eor	r11, r11
    ee56:	84 0c       	add	r8, r4
    ee58:	95 1c       	adc	r9, r5
    ee5a:	a6 1c       	adc	r10, r6
    ee5c:	b7 1c       	adc	r11, r7
    ee5e:	eb 81       	ldd	r30, Y+3	; 0x03
    ee60:	fc 81       	ldd	r31, Y+4	; 0x04
    ee62:	83 8a       	std	Z+19, r8	; 0x13
    ee64:	94 8a       	std	Z+20, r9	; 0x14
    ee66:	a5 8a       	std	Z+21, r10	; 0x15
    ee68:	b6 8a       	std	Z+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = fbs->rootDirEntryCount;
    ee6a:	f8 01       	movw	r30, r16
    ee6c:	01 88       	ldd	r0, Z+17	; 0x11
    ee6e:	f2 89       	ldd	r31, Z+18	; 0x12
    ee70:	e0 2d       	mov	r30, r0
    ee72:	e9 83       	std	Y+1, r30	; 0x01
    ee74:	fa 83       	std	Y+2, r31	; 0x02
    ee76:	cf 01       	movw	r24, r30
    ee78:	eb 81       	ldd	r30, Y+3	; 0x03
    ee7a:	fc 81       	ldd	r31, Y+4	; 0x04
    ee7c:	80 8f       	std	Z+24, r24	; 0x18
    ee7e:	91 8f       	std	Z+25, r25	; 0x19

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + fbs->fatCount * blocksPerFat_;
    ee80:	f8 01       	movw	r30, r16
    ee82:	20 89       	ldd	r18, Z+16	; 0x10
    ee84:	30 e0       	ldi	r19, 0x00	; 0
    ee86:	40 e0       	ldi	r20, 0x00	; 0
    ee88:	50 e0       	ldi	r21, 0x00	; 0
    ee8a:	c7 01       	movw	r24, r14
    ee8c:	b6 01       	movw	r22, r12
    ee8e:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
    ee92:	dc 01       	movw	r26, r24
    ee94:	cb 01       	movw	r24, r22
    ee96:	88 0d       	add	r24, r8
    ee98:	99 1d       	adc	r25, r9
    ee9a:	aa 1d       	adc	r26, r10
    ee9c:	bb 1d       	adc	r27, r11
    ee9e:	eb 81       	ldd	r30, Y+3	; 0x03
    eea0:	fc 81       	ldd	r31, Y+4	; 0x04
    eea2:	82 8f       	std	Z+26, r24	; 0x1a
    eea4:	93 8f       	std	Z+27, r25	; 0x1b
    eea6:	a4 8f       	std	Z+28, r26	; 0x1c
    eea8:	b5 8f       	std	Z+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * fbs->rootDirEntryCount + 511)/512);
    eeaa:	49 81       	ldd	r20, Y+1	; 0x01
    eeac:	5a 81       	ldd	r21, Y+2	; 0x02
    eeae:	68 94       	set
    eeb0:	14 f8       	bld	r1, 4
    eeb2:	44 0f       	add	r20, r20
    eeb4:	55 1f       	adc	r21, r21
    eeb6:	16 94       	lsr	r1
    eeb8:	e1 f7       	brne	.-8      	; 0xeeb2 <_ZN8SdVolume4initEP7Sd2Cardh+0x208>
    eeba:	41 50       	subi	r20, 0x01	; 1
    eebc:	5e 4f       	sbci	r21, 0xFE	; 254
    eebe:	45 2f       	mov	r20, r21
    eec0:	55 27       	eor	r21, r21
    eec2:	46 95       	lsr	r20
    eec4:	60 e0       	ldi	r22, 0x00	; 0
    eec6:	70 e0       	ldi	r23, 0x00	; 0
    eec8:	48 0f       	add	r20, r24
    eeca:	59 1f       	adc	r21, r25
    eecc:	6a 1f       	adc	r22, r26
    eece:	7b 1f       	adc	r23, r27
    eed0:	46 87       	std	Z+14, r20	; 0x0e
    eed2:	57 87       	std	Z+15, r21	; 0x0f
    eed4:	60 8b       	std	Z+16, r22	; 0x10
    eed6:	71 8b       	std	Z+17, r23	; 0x11

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
                           fbs->totalSectors16 : fbs->totalSectors32;
    eed8:	f8 01       	movw	r30, r16
    eeda:	83 89       	ldd	r24, Z+19	; 0x13
    eedc:	94 89       	ldd	r25, Z+20	; 0x14
    eede:	00 97       	sbiw	r24, 0x00	; 0
    eee0:	19 f0       	breq	.+6      	; 0xeee8 <_ZN8SdVolume4initEP7Sd2Cardh+0x23e>
    eee2:	a0 e0       	ldi	r26, 0x00	; 0
    eee4:	b0 e0       	ldi	r27, 0x00	; 0
    eee6:	05 c0       	rjmp	.+10     	; 0xeef2 <_ZN8SdVolume4initEP7Sd2Cardh+0x248>
    eee8:	f8 01       	movw	r30, r16
    eeea:	80 a1       	lds	r24, 0x40
    eeec:	91 a1       	lds	r25, 0x41
    eeee:	a2 a1       	lds	r26, 0x42
    eef0:	b3 a1       	lds	r27, 0x43
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    eef2:	73 01       	movw	r14, r6
    eef4:	62 01       	movw	r12, r4
    eef6:	c4 1a       	sub	r12, r20
    eef8:	d5 0a       	sbc	r13, r21
    eefa:	e6 0a       	sbc	r14, r22
    eefc:	f7 0a       	sbc	r15, r23
    eefe:	b7 01       	movw	r22, r14
    ef00:	a6 01       	movw	r20, r12
    ef02:	48 0f       	add	r20, r24
    ef04:	59 1f       	adc	r21, r25
    ef06:	6a 1f       	adc	r22, r26
    ef08:	7b 1f       	adc	r23, r27

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    ef0a:	04 c0       	rjmp	.+8      	; 0xef14 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    ef0c:	76 95       	lsr	r23
    ef0e:	67 95       	ror	r22
    ef10:	57 95       	ror	r21
    ef12:	47 95       	ror	r20
    ef14:	3a 94       	dec	r3
    ef16:	d2 f7       	brpl	.-12     	; 0xef0c <_ZN8SdVolume4initEP7Sd2Cardh+0x262>
    ef18:	eb 81       	ldd	r30, Y+3	; 0x03
    ef1a:	fc 81       	ldd	r31, Y+4	; 0x04
    ef1c:	41 87       	std	Z+9, r20	; 0x09
    ef1e:	52 87       	std	Z+10, r21	; 0x0a
    ef20:	63 87       	std	Z+11, r22	; 0x0b
    ef22:	74 87       	std	Z+12, r23	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    ef24:	45 3f       	cpi	r20, 0xF5	; 245
    ef26:	ff e0       	ldi	r31, 0x0F	; 15
    ef28:	5f 07       	cpc	r21, r31
    ef2a:	f0 e0       	ldi	r31, 0x00	; 0
    ef2c:	6f 07       	cpc	r22, r31
    ef2e:	f0 e0       	ldi	r31, 0x00	; 0
    ef30:	7f 07       	cpc	r23, r31
    ef32:	28 f4       	brcc	.+10     	; 0xef3e <_ZN8SdVolume4initEP7Sd2Cardh+0x294>
    fatType_ = 12;
    ef34:	8c e0       	ldi	r24, 0x0C	; 12
    ef36:	eb 81       	ldd	r30, Y+3	; 0x03
    ef38:	fc 81       	ldd	r31, Y+4	; 0x04
    ef3a:	87 8b       	std	Z+23, r24	; 0x17
    ef3c:	1b c0       	rjmp	.+54     	; 0xef74 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ca>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount_ < 65525) {
    ef3e:	45 3f       	cpi	r20, 0xF5	; 245
    ef40:	ff ef       	ldi	r31, 0xFF	; 255
    ef42:	5f 07       	cpc	r21, r31
    ef44:	f0 e0       	ldi	r31, 0x00	; 0
    ef46:	6f 07       	cpc	r22, r31
    ef48:	f0 e0       	ldi	r31, 0x00	; 0
    ef4a:	7f 07       	cpc	r23, r31
    ef4c:	20 f4       	brcc	.+8      	; 0xef56 <_ZN8SdVolume4initEP7Sd2Cardh+0x2ac>
    fatType_ = 16;
    ef4e:	80 e1       	ldi	r24, 0x10	; 16
    ef50:	eb 81       	ldd	r30, Y+3	; 0x03
    ef52:	fc 81       	ldd	r31, Y+4	; 0x04
    ef54:	0c c0       	rjmp	.+24     	; 0xef6e <_ZN8SdVolume4initEP7Sd2Cardh+0x2c4>
  } else {
    rootDirStart_ = fbs->fat32RootCluster;
    ef56:	f8 01       	movw	r30, r16
    ef58:	84 a5       	lds	r24, 0x64
    ef5a:	95 a5       	lds	r25, 0x65
    ef5c:	a6 a5       	lds	r26, 0x66
    ef5e:	b7 a5       	lds	r27, 0x67
    ef60:	eb 81       	ldd	r30, Y+3	; 0x03
    ef62:	fc 81       	ldd	r31, Y+4	; 0x04
    ef64:	82 8f       	std	Z+26, r24	; 0x1a
    ef66:	93 8f       	std	Z+27, r25	; 0x1b
    ef68:	a4 8f       	std	Z+28, r26	; 0x1c
    ef6a:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    ef6c:	80 e2       	ldi	r24, 0x20	; 32
    ef6e:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    ef70:	81 e0       	ldi	r24, 0x01	; 1
    ef72:	01 c0       	rjmp	.+2      	; 0xef76 <_ZN8SdVolume4initEP7Sd2Cardh+0x2cc>

 fail:
  return false;
    ef74:	80 e0       	ldi	r24, 0x00	; 0
}
    ef76:	24 96       	adiw	r28, 0x04	; 4
    ef78:	cd bf       	out	0x3d, r28	; 61
    ef7a:	de bf       	out	0x3e, r29	; 62
    ef7c:	df 91       	pop	r29
    ef7e:	cf 91       	pop	r28
    ef80:	1f 91       	pop	r17
    ef82:	0f 91       	pop	r16
    ef84:	ff 90       	pop	r15
    ef86:	ef 90       	pop	r14
    ef88:	df 90       	pop	r13
    ef8a:	cf 90       	pop	r12
    ef8c:	bf 90       	pop	r11
    ef8e:	af 90       	pop	r10
    ef90:	9f 90       	pop	r9
    ef92:	8f 90       	pop	r8
    ef94:	7f 90       	pop	r7
    ef96:	6f 90       	pop	r6
    ef98:	5f 90       	pop	r5
    ef9a:	4f 90       	pop	r4
    ef9c:	3f 90       	pop	r3
    ef9e:	08 95       	ret

0000efa0 <sd_begin>:

/*---------------------------------------------------------------------------*
 * Public functions
 *---------------------------------------------------------------------------*/
bool sd_begin( t_SPIHNDL t_spiHndl)
{
    efa0:	cf 93       	push	r28
    efa2:	df 93       	push	r29
    efa4:	0f 92       	push	r0
    efa6:	0f 92       	push	r0
    efa8:	cd b7       	in	r28, 0x3d	; 61
    efaa:	de b7       	in	r29, 0x3e	; 62
    efac:	89 83       	std	Y+1, r24	; 0x01
    efae:	9a 83       	std	Y+2, r25	; 0x02
   return sd.begin( t_spiHndl);
    efb0:	69 81       	ldd	r22, Y+1	; 0x01
    efb2:	7a 81       	ldd	r23, Y+2	; 0x02
    efb4:	8a ea       	ldi	r24, 0xAA	; 170
    efb6:	96 e2       	ldi	r25, 0x26	; 38
    efb8:	0e 94 5f 72 	call	0xe4be	; 0xe4be <_ZN5SdFat5beginEi>
}/*End sd_begin*/
    efbc:	0f 90       	pop	r0
    efbe:	0f 90       	pop	r0
    efc0:	df 91       	pop	r29
    efc2:	cf 91       	pop	r28
    efc4:	08 95       	ret

0000efc6 <sd_init>:

bool sd_init( t_SPIHNDL t_spiHndl)
{
    efc6:	cf 93       	push	r28
    efc8:	df 93       	push	r29
    efca:	0f 92       	push	r0
    efcc:	0f 92       	push	r0
    efce:	cd b7       	in	r28, 0x3d	; 61
    efd0:	de b7       	in	r29, 0x3e	; 62
    efd2:	89 83       	std	Y+1, r24	; 0x01
    efd4:	9a 83       	std	Y+2, r25	; 0x02
   return sd.card()->init( t_spiHndl);
    efd6:	69 81       	ldd	r22, Y+1	; 0x01
    efd8:	7a 81       	ldd	r23, Y+2	; 0x02
    efda:	8a ea       	ldi	r24, 0xAA	; 170
    efdc:	96 e2       	ldi	r25, 0x26	; 38
    efde:	0e 94 48 62 	call	0xc490	; 0xc490 <_ZN7Sd2Card4initEi>
}/*End sd_init*/
    efe2:	0f 90       	pop	r0
    efe4:	0f 90       	pop	r0
    efe6:	df 91       	pop	r29
    efe8:	cf 91       	pop	r28
    efea:	08 95       	ret

0000efec <sd_open>:

void *sd_open( char *pc_filepath, uint8_t c_mode)
{
    efec:	2f 92       	push	r2
    efee:	3f 92       	push	r3
    eff0:	4f 92       	push	r4
    eff2:	5f 92       	push	r5
    eff4:	6f 92       	push	r6
    eff6:	7f 92       	push	r7
    eff8:	8f 92       	push	r8
    effa:	9f 92       	push	r9
    effc:	af 92       	push	r10
    effe:	bf 92       	push	r11
    f000:	cf 92       	push	r12
    f002:	df 92       	push	r13
    f004:	ef 92       	push	r14
    f006:	ff 92       	push	r15
    f008:	0f 93       	push	r16
    f00a:	1f 93       	push	r17
    f00c:	cf 93       	push	r28
    f00e:	df 93       	push	r29
    f010:	cd b7       	in	r28, 0x3d	; 61
    f012:	de b7       	in	r29, 0x3e	; 62
    f014:	68 97       	sbiw	r28, 0x18	; 24
    f016:	cd bf       	out	0x3d, r28	; 61
    f018:	de bf       	out	0x3e, r29	; 62
    f01a:	8c 01       	movw	r16, r24
    f01c:	68 8f       	std	Y+24, r22	; 0x18
   int32_t i_tokCount = 0;
   int32_t i_index;
   SdBaseFile *pt_vol;
   static char ac_currDir[13];

   HAL_BEGIN_CRITICAL(); //Disable interrupts
    f01e:	8f b7       	in	r24, 0x3f	; 63
    f020:	89 83       	std	Y+1, r24	; 0x01
    f022:	f8 94       	cli

   arb_malloc( sizeof(SdFile),
               (void **)&pt_file);
    f024:	8f e1       	ldi	r24, 0x1F	; 31
    f026:	90 e0       	ldi	r25, 0x00	; 0
    f028:	be 01       	movw	r22, r28
    f02a:	6e 5f       	subi	r22, 0xFE	; 254
    f02c:	7f 4f       	sbci	r23, 0xFF	; 255
    f02e:	0e 94 32 8b 	call	0x11664	; 0x11664 <arb_malloc>

   /*------------------------------------------------------------------------*
    * Make sure the status of the file is initialized to 'FAT_FILE_TYPE_CLOSED'
    * otherwise the call to 'open' will return an error.
    *------------------------------------------------------------------------*/
   pt_file->close();
    f032:	8a 81       	ldd	r24, Y+2	; 0x02
    f034:	9b 81       	ldd	r25, Y+3	; 0x03
    f036:	04 96       	adiw	r24, 0x04	; 4
    f038:	0e 94 8e 6a 	call	0xd51c	; 0xd51c <_ZN10SdBaseFile5closeEv>

   if( pt_file != NULL)
    f03c:	8a 81       	ldd	r24, Y+2	; 0x02
    f03e:	9b 81       	ldd	r25, Y+3	; 0x03
    f040:	00 97       	sbiw	r24, 0x00	; 0
    f042:	09 f4       	brne	.+2      	; 0xf046 <sd_open+0x5a>
    f044:	8d c0       	rjmp	.+282    	; 0xf160 <sd_open+0x174>
   {
      /*---------------------------------------------------------------------*
       * Get the name of the current directory
       *---------------------------------------------------------------------*/
      pt_vol = sd.vwd();
      pt_vol->getFilename( ac_currDir);
    f046:	8d ec       	ldi	r24, 0xCD	; 205
    f048:	96 e2       	ldi	r25, 0x26	; 38
    f04a:	68 ee       	ldi	r22, 0xE8	; 232
    f04c:	76 e2       	ldi	r23, 0x26	; 38
    f04e:	0e 94 ac 65 	call	0xcb58	; 0xcb58 <_ZN10SdBaseFile11getFilenameEPc>

      /*---------------------------------------------------------------------*
       * Find all the directories within the path
       *---------------------------------------------------------------------*/
      pc_tok[i_tokCount] = strtok( pc_filepath, "/");
    f052:	c8 01       	movw	r24, r16
    f054:	67 e0       	ldi	r22, 0x07	; 7
    f056:	72 e2       	ldi	r23, 0x22	; 34
    f058:	0e 94 df b6 	call	0x16dbe	; 0x16dbe <strtok>
    f05c:	8c 83       	std	Y+4, r24	; 0x04
    f05e:	9d 83       	std	Y+5, r25	; 0x05
    f060:	34 e0       	ldi	r19, 0x04	; 4
    f062:	23 2e       	mov	r2, r19
    f064:	31 2c       	mov	r3, r1
    f066:	2c 0e       	add	r2, r28
    f068:	3d 1e       	adc	r3, r29
      while( (pc_tok[i_tokCount] != NULL) &&
    f06a:	81 01       	movw	r16, r2
void *sd_open( char *pc_filepath, uint8_t c_mode)
{
   SdFile *pt_file;
   bool b_status;
   char *pc_tok[SD_MAX_DIRECTORIES];
   int32_t i_tokCount = 0;
    f06c:	cc 24       	eor	r12, r12
    f06e:	dd 24       	eor	r13, r13
    f070:	76 01       	movw	r14, r12

      /*---------------------------------------------------------------------*
       * Find all the directories within the path
       *---------------------------------------------------------------------*/
      pc_tok[i_tokCount] = strtok( pc_filepath, "/");
      while( (pc_tok[i_tokCount] != NULL) &&
    f072:	f8 01       	movw	r30, r16
    f074:	81 91       	ld	r24, Z+
    f076:	91 91       	ld	r25, Z+
    f078:	8f 01       	movw	r16, r30
    f07a:	00 97       	sbiw	r24, 0x00	; 0
    f07c:	a9 f0       	breq	.+42     	; 0xf0a8 <sd_open+0xbc>
    f07e:	fa e0       	ldi	r31, 0x0A	; 10
    f080:	cf 16       	cp	r12, r31
    f082:	d1 04       	cpc	r13, r1
    f084:	e1 04       	cpc	r14, r1
    f086:	f1 04       	cpc	r15, r1
    f088:	79 f0       	breq	.+30     	; 0xf0a8 <sd_open+0xbc>
             (i_tokCount < SD_MAX_DIRECTORIES))
      {
         i_tokCount++;
    f08a:	08 94       	sec
    f08c:	c1 1c       	adc	r12, r1
    f08e:	d1 1c       	adc	r13, r1
    f090:	e1 1c       	adc	r14, r1
    f092:	f1 1c       	adc	r15, r1
         pc_tok[i_tokCount] = strtok( NULL, "/");
    f094:	80 e0       	ldi	r24, 0x00	; 0
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	67 e0       	ldi	r22, 0x07	; 7
    f09a:	72 e2       	ldi	r23, 0x22	; 34
    f09c:	0e 94 df b6 	call	0x16dbe	; 0x16dbe <strtok>
    f0a0:	f8 01       	movw	r30, r16
    f0a2:	80 83       	st	Z, r24
    f0a4:	91 83       	std	Z+1, r25	; 0x01
    f0a6:	e5 cf       	rjmp	.-54     	; 0xf072 <sd_open+0x86>
void *sd_open( char *pc_filepath, uint8_t c_mode)
{
   SdFile *pt_file;
   bool b_status;
   char *pc_tok[SD_MAX_DIRECTORIES];
   int32_t i_tokCount = 0;
    f0a8:	88 24       	eor	r8, r8
    f0aa:	99 24       	eor	r9, r9
    f0ac:	54 01       	movw	r10, r8

      /*---------------------------------------------------------------------*
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
    f0ae:	26 01       	movw	r4, r12
    f0b0:	37 01       	movw	r6, r14
    f0b2:	08 94       	sec
    f0b4:	41 08       	sbc	r4, r1
    f0b6:	51 08       	sbc	r5, r1
    f0b8:	61 08       	sbc	r6, r1
    f0ba:	71 08       	sbc	r7, r1
      {
         if( sd.chdir( pc_tok[i_index]) == false)
         {
            if( c_mode & SD_FILE_WRITE)
    f0bc:	f8 8d       	ldd	r31, Y+24	; 0x18
    f0be:	0f 2f       	mov	r16, r31
    f0c0:	10 e0       	ldi	r17, 0x00	; 0
    f0c2:	02 70       	andi	r16, 0x02	; 2
    f0c4:	10 70       	andi	r17, 0x00	; 0
    f0c6:	20 c0       	rjmp	.+64     	; 0xf108 <sd_open+0x11c>
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
      {
         if( sd.chdir( pc_tok[i_index]) == false)
    f0c8:	f1 01       	movw	r30, r2
    f0ca:	c1 90       	ld	r12, Z+
    f0cc:	d1 90       	ld	r13, Z+
    f0ce:	1f 01       	movw	r2, r30
    f0d0:	8a ea       	ldi	r24, 0xAA	; 170
    f0d2:	96 e2       	ldi	r25, 0x26	; 38
    f0d4:	b6 01       	movw	r22, r12
    f0d6:	40 e0       	ldi	r20, 0x00	; 0
    f0d8:	0e 94 92 72 	call	0xe524	; 0xe524 <_ZN5SdFat5chdirEPKcb>
    f0dc:	88 23       	and	r24, r24
    f0de:	79 f4       	brne	.+30     	; 0xf0fe <sd_open+0x112>
         {
            if( c_mode & SD_FILE_WRITE)
    f0e0:	01 15       	cp	r16, r1
    f0e2:	11 05       	cpc	r17, r1
    f0e4:	61 f0       	breq	.+24     	; 0xf0fe <sd_open+0x112>
            {

               sd.mkdir( pc_tok[i_index]);
    f0e6:	8a ea       	ldi	r24, 0xAA	; 170
    f0e8:	96 e2       	ldi	r25, 0x26	; 38
    f0ea:	b6 01       	movw	r22, r12
    f0ec:	41 e0       	ldi	r20, 0x01	; 1
    f0ee:	0e 94 df 72 	call	0xe5be	; 0xe5be <_ZN5SdFat5mkdirEPKcb>
               sd.chdir( pc_tok[i_index]);
    f0f2:	8a ea       	ldi	r24, 0xAA	; 170
    f0f4:	96 e2       	ldi	r25, 0x26	; 38
    f0f6:	b6 01       	movw	r22, r12
    f0f8:	40 e0       	ldi	r20, 0x00	; 0
    f0fa:	0e 94 92 72 	call	0xe524	; 0xe524 <_ZN5SdFat5chdirEPKcb>

      /*---------------------------------------------------------------------*
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
    f0fe:	08 94       	sec
    f100:	81 1c       	adc	r8, r1
    f102:	91 1c       	adc	r9, r1
    f104:	a1 1c       	adc	r10, r1
    f106:	b1 1c       	adc	r11, r1
    f108:	84 14       	cp	r8, r4
    f10a:	95 04       	cpc	r9, r5
    f10c:	a6 04       	cpc	r10, r6
    f10e:	b7 04       	cpc	r11, r7
    f110:	dc f2       	brlt	.-74     	; 0xf0c8 <sd_open+0xdc>

            }
         }
      }

      b_status = pt_file->open( pc_tok[(i_tokCount - 1)], c_mode);
    f112:	8a 81       	ldd	r24, Y+2	; 0x02
    f114:	9b 81       	ldd	r25, Y+3	; 0x03
    f116:	f2 01       	movw	r30, r4
    f118:	ee 0f       	add	r30, r30
    f11a:	ff 1f       	adc	r31, r31
    f11c:	ec 0f       	add	r30, r28
    f11e:	fd 1f       	adc	r31, r29
    f120:	64 81       	ldd	r22, Z+4	; 0x04
    f122:	75 81       	ldd	r23, Z+5	; 0x05
    f124:	04 96       	adiw	r24, 0x04	; 4
    f126:	48 8d       	ldd	r20, Y+24	; 0x18
    f128:	0e 94 ef 6e 	call	0xddde	; 0xddde <_ZN10SdBaseFile4openEPKch>
    f12c:	08 2f       	mov	r16, r24

      /*---------------------------------------------------------------------*
       * Change back to the initial directory.
       *---------------------------------------------------------------------*/
      sd.chdir( ac_currDir);
    f12e:	8a ea       	ldi	r24, 0xAA	; 170
    f130:	96 e2       	ldi	r25, 0x26	; 38
    f132:	68 ee       	ldi	r22, 0xE8	; 232
    f134:	76 e2       	ldi	r23, 0x26	; 38
    f136:	40 e0       	ldi	r20, 0x00	; 0
    f138:	0e 94 92 72 	call	0xe524	; 0xe524 <_ZN5SdFat5chdirEPKcb>

      HAL_END_CRITICAL(); //Disable interrupts
    f13c:	89 81       	ldd	r24, Y+1	; 0x01
    f13e:	8f bf       	out	0x3f, r24	; 63

      if( b_status == true)
    f140:	00 23       	and	r16, r16
    f142:	49 f0       	breq	.+18     	; 0xf156 <sd_open+0x16a>
      {
         pt_vol = sd.vwd();
         pt_vol->getFilename( ac_currDir);
    f144:	8d ec       	ldi	r24, 0xCD	; 205
    f146:	96 e2       	ldi	r25, 0x26	; 38
    f148:	68 ee       	ldi	r22, 0xE8	; 232
    f14a:	76 e2       	ldi	r23, 0x26	; 38
    f14c:	0e 94 ac 65 	call	0xcb58	; 0xcb58 <_ZN10SdBaseFile11getFilenameEPc>
         return (void *)pt_file;
    f150:	8a 81       	ldd	r24, Y+2	; 0x02
    f152:	9b 81       	ldd	r25, Y+3	; 0x03
    f154:	09 c0       	rjmp	.+18     	; 0xf168 <sd_open+0x17c>
      }
      else
      {
         arb_free( (void **)&pt_file);
    f156:	ce 01       	movw	r24, r28
    f158:	02 96       	adiw	r24, 0x02	; 2
    f15a:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
    f15e:	02 c0       	rjmp	.+4      	; 0xf164 <sd_open+0x178>
      }

   }/*End if( pt_file != NULL)*/
   else
   {
      HAL_END_CRITICAL(); //Disable interrupts
    f160:	89 81       	ldd	r24, Y+1	; 0x01
    f162:	8f bf       	out	0x3f, r24	; 63

      return NULL;
    f164:	80 e0       	ldi	r24, 0x00	; 0
    f166:	90 e0       	ldi	r25, 0x00	; 0
   }

}/*End sd_open*/
    f168:	68 96       	adiw	r28, 0x18	; 24
    f16a:	cd bf       	out	0x3d, r28	; 61
    f16c:	de bf       	out	0x3e, r29	; 62
    f16e:	df 91       	pop	r29
    f170:	cf 91       	pop	r28
    f172:	1f 91       	pop	r17
    f174:	0f 91       	pop	r16
    f176:	ff 90       	pop	r15
    f178:	ef 90       	pop	r14
    f17a:	df 90       	pop	r13
    f17c:	cf 90       	pop	r12
    f17e:	bf 90       	pop	r11
    f180:	af 90       	pop	r10
    f182:	9f 90       	pop	r9
    f184:	8f 90       	pop	r8
    f186:	7f 90       	pop	r7
    f188:	6f 90       	pop	r6
    f18a:	5f 90       	pop	r5
    f18c:	4f 90       	pop	r4
    f18e:	3f 90       	pop	r3
    f190:	2f 90       	pop	r2
    f192:	08 95       	ret

0000f194 <sd_close>:

bool sd_close( void *pv_fileHndle)
{
    f194:	1f 93       	push	r17
    f196:	cf 93       	push	r28
    f198:	df 93       	push	r29
    f19a:	0f 92       	push	r0
    f19c:	0f 92       	push	r0
    f19e:	cd b7       	in	r28, 0x3d	; 61
    f1a0:	de b7       	in	r29, 0x3e	; 62
   bool b_status;
   SdFile *pt_file = (SdFile *)pv_fileHndle;
    f1a2:	89 83       	std	Y+1, r24	; 0x01
    f1a4:	9a 83       	std	Y+2, r25	; 0x02
   b_status = pt_file->close();
    f1a6:	04 96       	adiw	r24, 0x04	; 4
    f1a8:	0e 94 8e 6a 	call	0xd51c	; 0xd51c <_ZN10SdBaseFile5closeEv>
    f1ac:	18 2f       	mov	r17, r24
   if( b_status == true)
    f1ae:	88 23       	and	r24, r24
    f1b0:	21 f0       	breq	.+8      	; 0xf1ba <sd_close+0x26>
   {
      arb_free( (void **)&pt_file);
    f1b2:	ce 01       	movw	r24, r28
    f1b4:	01 96       	adiw	r24, 0x01	; 1
    f1b6:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
      pt_file = NULL;
   }

   return b_status;

}/*End sd_close*/
    f1ba:	81 2f       	mov	r24, r17
    f1bc:	0f 90       	pop	r0
    f1be:	0f 90       	pop	r0
    f1c0:	df 91       	pop	r29
    f1c2:	cf 91       	pop	r28
    f1c4:	1f 91       	pop	r17
    f1c6:	08 95       	ret

0000f1c8 <sd_ls>:

}/*End sd_gcf*/

void sd_ls( void)
{
   sd.ls(LS_DATE | LS_SIZE | LS_R);
    f1c8:	8a ea       	ldi	r24, 0xAA	; 170
    f1ca:	96 e2       	ldi	r25, 0x26	; 38
    f1cc:	67 e0       	ldi	r22, 0x07	; 7
    f1ce:	0e 94 d4 72 	call	0xe5a8	; 0xe5a8 <_ZN5SdFat2lsEh>
}/*sd_ls*/
    f1d2:	08 95       	ret

0000f1d4 <sd_chdir>:

bool sd_chdir(char *pc_filepath)
{
    f1d4:	bc 01       	movw	r22, r24
   return sd.chdir( pc_filepath);
    f1d6:	8a ea       	ldi	r24, 0xAA	; 170
    f1d8:	96 e2       	ldi	r25, 0x26	; 38
    f1da:	40 e0       	ldi	r20, 0x00	; 0
    f1dc:	0e 94 92 72 	call	0xe524	; 0xe524 <_ZN5SdFat5chdirEPKcb>
}/*sd_lsPrint*/
    f1e0:	08 95       	ret

0000f1e2 <sd_mkdir>:

bool sd_mkdir(char *pc_filepath)
{
    f1e2:	cf 93       	push	r28
    f1e4:	df 93       	push	r29
    f1e6:	ec 01       	movw	r28, r24
   if( sd.chdir( *pc_filepath) == false)
    f1e8:	61 e0       	ldi	r22, 0x01	; 1
    f1ea:	88 81       	ld	r24, Y
    f1ec:	88 23       	and	r24, r24
    f1ee:	09 f4       	brne	.+2      	; 0xf1f2 <sd_mkdir+0x10>
    f1f0:	60 e0       	ldi	r22, 0x00	; 0
    f1f2:	8a ea       	ldi	r24, 0xAA	; 170
    f1f4:	96 e2       	ldi	r25, 0x26	; 38
    f1f6:	0e 94 3f 72 	call	0xe47e	; 0xe47e <_ZN5SdFat5chdirEb>
    f1fa:	88 23       	and	r24, r24
    f1fc:	39 f4       	brne	.+14     	; 0xf20c <sd_mkdir+0x2a>
      return sd.mkdir( pc_filepath, true);
    f1fe:	8a ea       	ldi	r24, 0xAA	; 170
    f200:	96 e2       	ldi	r25, 0x26	; 38
    f202:	be 01       	movw	r22, r28
    f204:	41 e0       	ldi	r20, 0x01	; 1
    f206:	0e 94 df 72 	call	0xe5be	; 0xe5be <_ZN5SdFat5mkdirEPKcb>
    f20a:	01 c0       	rjmp	.+2      	; 0xf20e <sd_mkdir+0x2c>

   return false;
    f20c:	80 e0       	ldi	r24, 0x00	; 0
}/*End sd_mkdir*/
    f20e:	df 91       	pop	r29
    f210:	cf 91       	pop	r28
    f212:	08 95       	ret

0000f214 <sd_rmdir>:

bool sd_rmdir(char *pc_filepath)
{
    f214:	bc 01       	movw	r22, r24
   return sd.rmdir( pc_filepath);
    f216:	8a ea       	ldi	r24, 0xAA	; 170
    f218:	96 e2       	ldi	r25, 0x26	; 38
    f21a:	0e 94 fc 72 	call	0xe5f8	; 0xe5f8 <_ZN5SdFat5rmdirEPKc>
}/*End sd_rmdir*/
    f21e:	08 95       	ret

0000f220 <sd_remove>:

bool sd_remove(char *pc_filepath)
{
    f220:	bc 01       	movw	r22, r24
   return sd.remove( pc_filepath);
    f222:	8a ea       	ldi	r24, 0xAA	; 170
    f224:	96 e2       	ldi	r25, 0x26	; 38
    f226:	0e 94 f8 72 	call	0xe5f0	; 0xe5f0 <_ZN5SdFat6removeEPKc>
}/*End sd_remove*/
    f22a:	08 95       	ret

0000f22c <sd_rmDashR>:
bool sd_rmDashR( void)
{
   /*------------------------------------------------------------------------*
    * Remove all the files within, and the current working directory itself.
    *------------------------------------------------------------------------*/
   return sd.vwd()->rmRfStar();
    f22c:	8d ec       	ldi	r24, 0xCD	; 205
    f22e:	96 e2       	ldi	r25, 0x26	; 38
    f230:	0e 94 5e 6c 	call	0xd8bc	; 0xd8bc <_ZN10SdBaseFile8rmRfStarEv>
}/*End sd_rmDashR*/
    f234:	08 95       	ret

0000f236 <sd_write>:

int32_t sd_write( t_SPIHNDL t_spiHndl,
                  void *pv_fileHndle,
                  uint8_t *pc_data,
                  uint16_t s_size)
{
    f236:	0f 93       	push	r16
    f238:	1f 93       	push	r17
    f23a:	cf 93       	push	r28
    f23c:	df 93       	push	r29
    f23e:	0f 92       	push	r0
    f240:	0f 92       	push	r0
    f242:	cd b7       	in	r28, 0x3d	; 61
    f244:	de b7       	in	r29, 0x3e	; 62
    f246:	89 83       	std	Y+1, r24	; 0x01
    f248:	9a 83       	std	Y+2, r25	; 0x02
    f24a:	cb 01       	movw	r24, r22
    f24c:	ba 01       	movw	r22, r20
    f24e:	a9 01       	movw	r20, r18
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   int32_t i_size;

   i_size = (int32_t)pt_file->write( (void *)pc_data, s_size);
    f250:	0e 94 32 73 	call	0xe664	; 0xe664 <_ZN6SdFile5writeEPKvj>
    f254:	8c 01       	movw	r16, r24
    f256:	22 27       	eor	r18, r18
    f258:	17 fd       	sbrc	r17, 7
    f25a:	20 95       	com	r18
    f25c:	32 2f       	mov	r19, r18

   return i_size;

}/*End sd_write*/
    f25e:	b8 01       	movw	r22, r16
    f260:	c9 01       	movw	r24, r18
    f262:	0f 90       	pop	r0
    f264:	0f 90       	pop	r0
    f266:	df 91       	pop	r29
    f268:	cf 91       	pop	r28
    f26a:	1f 91       	pop	r17
    f26c:	0f 91       	pop	r16
    f26e:	08 95       	ret

0000f270 <sd_read>:

int32_t sd_read( t_SPIHNDL t_spiHndl,
                 void *pv_fileHndle,
                 uint8_t *pc_data,
                 uint16_t s_size)
{
    f270:	0f 93       	push	r16
    f272:	1f 93       	push	r17
    f274:	cf 93       	push	r28
    f276:	df 93       	push	r29
    f278:	0f 92       	push	r0
    f27a:	0f 92       	push	r0
    f27c:	cd b7       	in	r28, 0x3d	; 61
    f27e:	de b7       	in	r29, 0x3e	; 62
    f280:	89 83       	std	Y+1, r24	; 0x01
    f282:	9a 83       	std	Y+2, r25	; 0x02
    f284:	cb 01       	movw	r24, r22
    f286:	ba 01       	movw	r22, r20
    f288:	a9 01       	movw	r20, r18
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   int32_t i_size;

   i_size = (int32_t)pt_file->read( (void *)pc_data, s_size);
    f28a:	04 96       	adiw	r24, 0x04	; 4
    f28c:	0e 94 6c 66 	call	0xccd8	; 0xccd8 <_ZN10SdBaseFile4readEPvj>
    f290:	8c 01       	movw	r16, r24
    f292:	22 27       	eor	r18, r18
    f294:	17 fd       	sbrc	r17, 7
    f296:	20 95       	com	r18
    f298:	32 2f       	mov	r19, r18

   return i_size;

}/*End sd_read*/
    f29a:	b8 01       	movw	r22, r16
    f29c:	c9 01       	movw	r24, r18
    f29e:	0f 90       	pop	r0
    f2a0:	0f 90       	pop	r0
    f2a2:	df 91       	pop	r29
    f2a4:	cf 91       	pop	r28
    f2a6:	1f 91       	pop	r17
    f2a8:	0f 91       	pop	r16
    f2aa:	08 95       	ret

0000f2ac <sd_fileSize>:

int32_t sd_fileSize( void *pv_fileHndle)
{
    f2ac:	fc 01       	movw	r30, r24
   SdFile *pt_file = (SdFile *)pv_fileHndle;

   return pt_file->fileSize();
    f2ae:	67 89       	ldd	r22, Z+23	; 0x17
    f2b0:	70 8d       	ldd	r23, Z+24	; 0x18

}/*End sd_close*/
    f2b2:	81 8d       	ldd	r24, Z+25	; 0x19
    f2b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    f2b6:	08 95       	ret

0000f2b8 <sd_rewind>:
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    f2b8:	04 96       	adiw	r24, 0x04	; 4
    f2ba:	40 e0       	ldi	r20, 0x00	; 0
    f2bc:	50 e0       	ldi	r21, 0x00	; 0
    f2be:	ba 01       	movw	r22, r20
    f2c0:	0e 94 f4 68 	call	0xd1e8	; 0xd1e8 <_ZN10SdBaseFile7seekSetEm>
void sd_rewind( void *pv_fileHndle)
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   pt_file->rewind();

}/*End sd_rewind*/
    f2c4:	08 95       	ret

0000f2c6 <sd_truncate>:

bool sd_truncate( void *pv_fileHndle,
                  uint32_t i_length)
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   return pt_file->truncate( i_length);
    f2c6:	04 96       	adiw	r24, 0x04	; 4
    f2c8:	0e 94 97 6a 	call	0xd52e	; 0xd52e <_ZN10SdBaseFile8truncateEm>
}/*End sd_truncate*/
    f2cc:	08 95       	ret

0000f2ce <_GLOBAL__sub_I_sd_begin>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card() : errorCode_(SD_CARD_ERROR_INIT_NOT_CALLED), type_(0) {}
    f2ce:	89 e1       	ldi	r24, 0x19	; 25
    f2d0:	80 93 ab 26 	sts	0x26AB, r24
    f2d4:	10 92 ae 26 	sts	0x26AE, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume() : fatType_(0) {}
    f2d8:	10 92 c6 26 	sts	0x26C6, r1
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    f2dc:	10 92 cd 26 	sts	0x26CD, r1
    f2e0:	10 92 d0 26 	sts	0x26D0, r1
    f2e4:	08 95       	ret

0000f2e6 <arb_console>:
 *
 * @return None.
 *****************************************************************************/
static void arb_console( t_parameters t_param,
                         t_arguments  t_args)
{
    f2e6:	cf 93       	push	r28
    f2e8:	df 93       	push	r29
    f2ea:	cd b7       	in	r28, 0x3d	; 61
    f2ec:	de b7       	in	r29, 0x3e	; 62
    f2ee:	cd 50       	subi	r28, 0x0D	; 13
    f2f0:	d2 40       	sbci	r29, 0x02	; 2
    f2f2:	cd bf       	out	0x3d, r28	; 61
    f2f4:	de bf       	out	0x3e, r29	; 62

   /*------------------------------------------------------------------------*
    * Banner designed using a text to ascii art generator provided by
    * http://www.patorjk.com/software/taag
    *------------------------------------------------------------------------*/
   int8_t ac_banner[] = "\
    f2f6:	de 01       	movw	r26, r28
    f2f8:	5a 96       	adiw	r26, 0x1a	; 26
    f2fa:	e1 e1       	ldi	r30, 0x11	; 17
    f2fc:	f2 e2       	ldi	r31, 0x22	; 34
    f2fe:	81 e3       	ldi	r24, 0x31	; 49
    f300:	01 90       	ld	r0, Z+
    f302:	0d 92       	st	X+, r0
    f304:	81 50       	subi	r24, 0x01	; 1
    f306:	e1 f7       	brne	.-8      	; 0xf300 <arb_console+0x1a>
    * command window.
    *------------------------------------------------------------------------*/
   t_consoleTokHndl t_tokHndl;
   t_consoleError t_conError;

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f308:	80 91 f7 26 	lds	r24, 0x26F7
    f30c:	90 91 f8 26 	lds	r25, 0x26F8
    f310:	66 e0       	ldi	r22, 0x06	; 6
    f312:	70 e0       	ldi	r23, 0x00	; 0
    f314:	20 e0       	ldi	r18, 0x00	; 0
    f316:	30 e0       	ldi	r19, 0x00	; 0
    f318:	a9 01       	movw	r20, r18
    f31a:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                           CONSOLE_RESET_TERMINAL,
                           0);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f31e:	80 91 f7 26 	lds	r24, 0x26F7
    f322:	90 91 f8 26 	lds	r25, 0x26F8
    f326:	67 e0       	ldi	r22, 0x07	; 7
    f328:	70 e0       	ldi	r23, 0x00	; 0
    f32a:	20 e3       	ldi	r18, 0x30	; 48
    f32c:	30 e0       	ldi	r19, 0x00	; 0
    f32e:	40 e0       	ldi	r20, 0x00	; 0
    f330:	50 e0       	ldi	r21, 0x00	; 0
    f332:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                           CONSOLE_SET_BG_COLOR,
                           CONSOLE_BLACK);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f336:	80 91 f7 26 	lds	r24, 0x26F7
    f33a:	90 91 f8 26 	lds	r25, 0x26F8
    f33e:	68 e0       	ldi	r22, 0x08	; 8
    f340:	70 e0       	ldi	r23, 0x00	; 0
    f342:	22 e3       	ldi	r18, 0x32	; 50
    f344:	30 e0       	ldi	r19, 0x00	; 0
    f346:	40 e0       	ldi	r20, 0x00	; 0
    f348:	50 e0       	ldi	r21, 0x00	; 0
    f34a:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                           CONSOLE_SET_PROMPT_COLOR,
                           CONSOLE_GREEN);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f34e:	80 91 f7 26 	lds	r24, 0x26F7
    f352:	90 91 f8 26 	lds	r25, 0x26F8
    f356:	69 e0       	ldi	r22, 0x09	; 9
    f358:	70 e0       	ldi	r23, 0x00	; 0
    f35a:	21 e3       	ldi	r18, 0x31	; 49
    f35c:	30 e0       	ldi	r19, 0x00	; 0
    f35e:	40 e0       	ldi	r20, 0x00	; 0
    f360:	50 e0       	ldi	r21, 0x00	; 0
    f362:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                           CONSOLE_SET_FG_COLOR,
                           CONSOLE_RED);

   arb_write( gt_conObject.t_consoleHndl,
    f366:	80 91 f7 26 	lds	r24, 0x26F7
    f36a:	90 91 f8 26 	lds	r25, 0x26F8
    f36e:	be 01       	movw	r22, r28
    f370:	66 5e       	subi	r22, 0xE6	; 230
    f372:	7f 4f       	sbci	r23, 0xFF	; 255
    f374:	41 e3       	ldi	r20, 0x31	; 49
    f376:	50 e0       	ldi	r21, 0x00	; 0
    f378:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              ac_banner,
              (uint16_t)sizeof(ac_banner));

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f37c:	80 91 f7 26 	lds	r24, 0x26F7
    f380:	90 91 f8 26 	lds	r25, 0x26F8
    f384:	69 e0       	ldi	r22, 0x09	; 9
    f386:	70 e0       	ldi	r23, 0x00	; 0
    f388:	27 e3       	ldi	r18, 0x37	; 55
    f38a:	30 e0       	ldi	r19, 0x00	; 0
    f38c:	40 e0       	ldi	r20, 0x00	; 0
    f38e:	50 e0       	ldi	r21, 0x00	; 0
    f390:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                           CONSOLE_WHITE);

   /*-------------------------------------------------------------------------*
    * Display prompt...
    *-------------------------------------------------------------------------*/
   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f394:	80 91 f7 26 	lds	r24, 0x26F7
    f398:	90 91 f8 26 	lds	r25, 0x26F8
    f39c:	64 e0       	ldi	r22, 0x04	; 4
    f39e:	70 e0       	ldi	r23, 0x00	; 0
    f3a0:	20 e0       	ldi	r18, 0x00	; 0
    f3a2:	30 e0       	ldi	r19, 0x00	; 0
    f3a4:	a9 01       	movw	r20, r18
    f3a6:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
      /*---------------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
                              CONSOLE_PARSE_CMD_LINE,
                              (uint32_t)((uint16_t)&t_tokHndl));
    f3aa:	8e 01       	movw	r16, r28
    f3ac:	05 5b       	subi	r16, 0xB5	; 181
    f3ae:	1f 4f       	sbci	r17, 0xFF	; 255
    f3b0:	c8 51       	subi	r28, 0x18	; 24
    f3b2:	de 4f       	sbci	r29, 0xFE	; 254
    f3b4:	08 83       	st	Y, r16
    f3b6:	19 83       	std	Y+1, r17	; 0x01
    f3b8:	c8 5e       	subi	r28, 0xE8	; 232
    f3ba:	d1 40       	sbci	r29, 0x01	; 1
      {
         t_sdError t_err;

         t_err = (t_sdError)arb_ioctl( gt_conObject.t_sdHndl,
                                       SD_CD,
                                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
    f3bc:	0b e4       	ldi	r16, 0x4B	; 75
    f3be:	10 e0       	ldi	r17, 0x00	; 0
    f3c0:	0c 0f       	add	r16, r28
    f3c2:	1d 1f       	adc	r17, r29
    f3c4:	00 5f       	subi	r16, 0xF0	; 240
    f3c6:	1f 4f       	sbci	r17, 0xFF	; 255
    f3c8:	ce 50       	subi	r28, 0x0E	; 14
    f3ca:	de 4f       	sbci	r29, 0xFE	; 254
    f3cc:	08 83       	st	Y, r16
    f3ce:	19 83       	std	Y+1, r17	; 0x01
    f3d0:	c2 5f       	subi	r28, 0xF2	; 242
    f3d2:	d1 40       	sbci	r29, 0x01	; 1
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("cd")) == 0)
      && (t_tokHndl.c_numTokens == 2))
      {
         t_sdError t_err;

         t_err = (t_sdError)arb_ioctl( gt_conObject.t_sdHndl,
    f3d4:	78 01       	movw	r14, r16
    f3d6:	00 e0       	ldi	r16, 0x00	; 0
    f3d8:	10 e0       	ldi	r17, 0x00	; 0
    f3da:	c2 51       	subi	r28, 0x12	; 18
    f3dc:	de 4f       	sbci	r29, 0xFE	; 254
    f3de:	e8 82       	st	Y, r14
    f3e0:	f9 82       	std	Y+1, r15	; 0x01
    f3e2:	0a 83       	std	Y+2, r16	; 0x02
    f3e4:	1b 83       	std	Y+3, r17	; 0x03
    f3e6:	ce 5e       	subi	r28, 0xEE	; 238
    f3e8:	d1 40       	sbci	r29, 0x01	; 1
   int32_t i_bssSize;
   int32_t i_freeSize;
   int32_t i_ramUsed;
   int32_t i_percUsed;

   i_dataSize = (int32_t)(uint16_t)&__data_end - (int32_t)(uint16_t)&__data_start;
    f3ea:	2a e4       	ldi	r18, 0x4A	; 74
    f3ec:	34 e2       	ldi	r19, 0x24	; 36
    f3ee:	c9 01       	movw	r24, r18
    f3f0:	a0 e0       	ldi	r26, 0x00	; 0
    f3f2:	b0 e0       	ldi	r27, 0x00	; 0
    f3f4:	00 e0       	ldi	r16, 0x00	; 0
    f3f6:	10 e2       	ldi	r17, 0x20	; 32
    f3f8:	78 01       	movw	r14, r16
    f3fa:	00 e0       	ldi	r16, 0x00	; 0
    f3fc:	10 e0       	ldi	r17, 0x00	; 0
    f3fe:	cc 50       	subi	r28, 0x0C	; 12
    f400:	de 4f       	sbci	r29, 0xFE	; 254
    f402:	e8 82       	st	Y, r14
    f404:	f9 82       	std	Y+1, r15	; 0x01
    f406:	0a 83       	std	Y+2, r16	; 0x02
    f408:	1b 83       	std	Y+3, r17	; 0x03
    f40a:	c4 5f       	subi	r28, 0xF4	; 244
    f40c:	d1 40       	sbci	r29, 0x01	; 1
    f40e:	9c 01       	movw	r18, r24
    f410:	ad 01       	movw	r20, r26
    f412:	2e 19       	sub	r18, r14
    f414:	3f 09       	sbc	r19, r15
    f416:	40 0b       	sbc	r20, r16
    f418:	51 0b       	sbc	r21, r17
    f41a:	c8 50       	subi	r28, 0x08	; 8
    f41c:	de 4f       	sbci	r29, 0xFE	; 254
    f41e:	28 83       	st	Y, r18
    f420:	39 83       	std	Y+1, r19	; 0x01
    f422:	4a 83       	std	Y+2, r20	; 0x02
    f424:	5b 83       	std	Y+3, r21	; 0x03
    f426:	c8 5f       	subi	r28, 0xF8	; 248
    f428:	d1 40       	sbci	r29, 0x01	; 1
   i_bssSize  = (int32_t)(uint16_t)&__bss_end - (int32_t)(uint16_t)&__data_end;
    f42a:	0c ec       	ldi	r16, 0xCC	; 204
    f42c:	17 e2       	ldi	r17, 0x27	; 39
    f42e:	78 01       	movw	r14, r16
    f430:	00 e0       	ldi	r16, 0x00	; 0
    f432:	10 e0       	ldi	r17, 0x00	; 0
    f434:	c4 50       	subi	r28, 0x04	; 4
    f436:	de 4f       	sbci	r29, 0xFE	; 254
    f438:	e8 82       	st	Y, r14
    f43a:	f9 82       	std	Y+1, r15	; 0x01
    f43c:	0a 83       	std	Y+2, r16	; 0x02
    f43e:	1b 83       	std	Y+3, r17	; 0x03
    f440:	cc 5f       	subi	r28, 0xFC	; 252
    f442:	d1 40       	sbci	r29, 0x01	; 1
    f444:	e8 1a       	sub	r14, r24
    f446:	f9 0a       	sbc	r15, r25
    f448:	0a 0b       	sbc	r16, r26
    f44a:	1b 0b       	sbc	r17, r27
    f44c:	c0 50       	subi	r28, 0x00	; 0
    f44e:	de 4f       	sbci	r29, 0xFE	; 254
    f450:	e8 82       	st	Y, r14
    f452:	f9 82       	std	Y+1, r15	; 0x01
    f454:	0a 83       	std	Y+2, r16	; 0x02
    f456:	1b 83       	std	Y+3, r17	; 0x03
    f458:	c0 50       	subi	r28, 0x00	; 0
    f45a:	d2 40       	sbci	r29, 0x02	; 2
   i_heapSize = (int32_t)(uint16_t)__brkval - (int32_t)(uint16_t)&__bss_end;
   i_freeSize = (int32_t)RAMEND - (int32_t)(uint16_t)__brkval - (int32_t)__malloc_margin;
   i_ramUsed  = i_dataSize + i_bssSize + i_heapSize;
    f45c:	2e 0d       	add	r18, r14
    f45e:	3f 1d       	adc	r19, r15
    f460:	40 1f       	adc	r20, r16
    f462:	51 1f       	adc	r21, r17
    f464:	cb 5f       	subi	r28, 0xFB	; 251
    f466:	dd 4f       	sbci	r29, 0xFD	; 253
    f468:	28 83       	st	Y, r18
    f46a:	39 83       	std	Y+1, r19	; 0x01
    f46c:	4a 83       	std	Y+2, r20	; 0x02
    f46e:	5b 83       	std	Y+3, r21	; 0x03
    f470:	c5 50       	subi	r28, 0x05	; 5
    f472:	d2 40       	sbci	r29, 0x02	; 2
   {

      /*---------------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f474:	80 91 f7 26 	lds	r24, 0x26F7
    f478:	90 91 f8 26 	lds	r25, 0x26F8
    f47c:	c8 51       	subi	r28, 0x18	; 24
    f47e:	de 4f       	sbci	r29, 0xFE	; 254
    f480:	e8 80       	ld	r14, Y
    f482:	f9 80       	ldd	r15, Y+1	; 0x01
    f484:	c8 5e       	subi	r28, 0xE8	; 232
    f486:	d1 40       	sbci	r29, 0x01	; 1
    f488:	17 01       	movw	r2, r14
    f48a:	44 24       	eor	r4, r4
    f48c:	55 24       	eor	r5, r5
    f48e:	63 e0       	ldi	r22, 0x03	; 3
    f490:	70 e0       	ldi	r23, 0x00	; 0
    f492:	a2 01       	movw	r20, r4
    f494:	91 01       	movw	r18, r2
    f496:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                              CONSOLE_PARSE_CMD_LINE,
                              (uint32_t)((uint16_t)&t_tokHndl));

      if( t_conError == CONSOLE_TOKEN_TOO_LARGE)
    f49a:	6b 3f       	cpi	r22, 0xFB	; 251
    f49c:	79 f4       	brne	.+30     	; 0xf4bc <arb_console+0x1d6>
      {
         s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid token size\n\r"));
    f49e:	00 d0       	rcall	.+0      	; 0xf4a0 <arb_console+0x1ba>
    f4a0:	0f 92       	push	r0
    f4a2:	8e 01       	movw	r16, r28
    f4a4:	04 54       	subi	r16, 0x44	; 68
    f4a6:	1f 4f       	sbci	r17, 0xFF	; 255
    f4a8:	ad b7       	in	r26, 0x3d	; 61
    f4aa:	be b7       	in	r27, 0x3e	; 62
    f4ac:	11 96       	adiw	r26, 0x01	; 1
    f4ae:	0d 93       	st	X+, r16
    f4b0:	1c 93       	st	X, r17
    f4b2:	12 97       	sbiw	r26, 0x02	; 2
    f4b4:	87 e0       	ldi	r24, 0x07	; 7
    f4b6:	92 e0       	ldi	r25, 0x02	; 2
    f4b8:	0c 94 61 82 	jmp	0x104c2	; 0x104c2 <arb_console+0x11dc>
         arb_write( gt_conObject.t_consoleHndl, 
                    ac_buff, 
                    s_size);
      }/*End if( t_conError == CONSOLE_TOKEN_TOO_LARGE)*/
      else if( t_conError == CONSOLE_TOO_MANY_TOKENS)
    f4bc:	6a 3f       	cpi	r22, 0xFA	; 250
    f4be:	71 f4       	brne	.+28     	; 0xf4dc <arb_console+0x1f6>
      {
         s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid number of tokens\n\r"));
    f4c0:	00 d0       	rcall	.+0      	; 0xf4c2 <arb_console+0x1dc>
    f4c2:	0f 92       	push	r0
    f4c4:	8e 01       	movw	r16, r28
    f4c6:	04 54       	subi	r16, 0x44	; 68
    f4c8:	1f 4f       	sbci	r17, 0xFF	; 255
    f4ca:	ed b7       	in	r30, 0x3d	; 61
    f4cc:	fe b7       	in	r31, 0x3e	; 62
    f4ce:	01 83       	std	Z+1, r16	; 0x01
    f4d0:	12 83       	std	Z+2, r17	; 0x02
    f4d2:	8c e1       	ldi	r24, 0x1C	; 28
    f4d4:	92 e0       	ldi	r25, 0x02	; 2
    f4d6:	83 83       	std	Z+3, r24	; 0x03
    f4d8:	94 83       	std	Z+4, r25	; 0x04
    f4da:	f7 c7       	rjmp	.+4078   	; 0x104ca <arb_console+0x11e4>
         arb_write( gt_conObject.t_consoleHndl, 
                    ac_buff, 
                    s_size);
      }/*End else if( t_conError == CONSOLE_TOO_MANY_TOKENS)*/
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("sct")) == 0)
    f4dc:	ce 01       	movw	r24, r28
    f4de:	85 5b       	subi	r24, 0xB5	; 181
    f4e0:	9f 4f       	sbci	r25, 0xFF	; 255
    f4e2:	67 e3       	ldi	r22, 0x37	; 55
    f4e4:	72 e0       	ldi	r23, 0x02	; 2
    f4e6:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
    f4ea:	00 97       	sbiw	r24, 0x00	; 0
    f4ec:	69 f5       	brne	.+90     	; 0xf548 <arb_console+0x262>
      && (t_tokHndl.c_numTokens == 4)) /*Set current time*/
    f4ee:	c5 54       	subi	r28, 0x45	; 69
    f4f0:	df 4f       	sbci	r29, 0xFF	; 255
    f4f2:	88 81       	ld	r24, Y
    f4f4:	cb 5b       	subi	r28, 0xBB	; 187
    f4f6:	d0 40       	sbci	r29, 0x00	; 0
    f4f8:	84 30       	cpi	r24, 0x04	; 4
    f4fa:	31 f5       	brne	.+76     	; 0xf548 <arb_console+0x262>
      {
         uint8_t c_hours;
         uint8_t c_min;
         uint8_t c_sec;

         c_hours = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[1]);
    f4fc:	8b e4       	ldi	r24, 0x4B	; 75
    f4fe:	90 e0       	ldi	r25, 0x00	; 0
    f500:	8c 0f       	add	r24, r28
    f502:	9d 1f       	adc	r25, r29
    f504:	40 96       	adiw	r24, 0x10	; 16
    f506:	0e 94 c8 b5 	call	0x16b90	; 0x16b90 <atoi>
    f50a:	08 2f       	mov	r16, r24
         c_min = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[2]);
    f50c:	8b e4       	ldi	r24, 0x4B	; 75
    f50e:	90 e0       	ldi	r25, 0x00	; 0
    f510:	8c 0f       	add	r24, r28
    f512:	9d 1f       	adc	r25, r29
    f514:	80 96       	adiw	r24, 0x20	; 32
    f516:	0e 94 c8 b5 	call	0x16b90	; 0x16b90 <atoi>
    f51a:	68 2f       	mov	r22, r24
         c_sec = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[3]);
    f51c:	8b e4       	ldi	r24, 0x4B	; 75
    f51e:	90 e0       	ldi	r25, 0x00	; 0
    f520:	8c 0f       	add	r24, r28
    f522:	9d 1f       	adc	r25, r29
    f524:	c0 96       	adiw	r24, 0x30	; 48
    f526:	c7 5f       	subi	r28, 0xF7	; 247
    f528:	dd 4f       	sbci	r29, 0xFD	; 253
    f52a:	68 83       	st	Y, r22
    f52c:	c9 50       	subi	r28, 0x09	; 9
    f52e:	d2 40       	sbci	r29, 0x02	; 2
    f530:	0e 94 c8 b5 	call	0x16b90	; 0x16b90 <atoi>
    f534:	48 2f       	mov	r20, r24

         arb_setSysTime( c_hours,
    f536:	80 2f       	mov	r24, r16
    f538:	c7 5f       	subi	r28, 0xF7	; 247
    f53a:	dd 4f       	sbci	r29, 0xFD	; 253
    f53c:	68 81       	ld	r22, Y
    f53e:	c9 50       	subi	r28, 0x09	; 9
    f540:	d2 40       	sbci	r29, 0x02	; 2
    f542:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <arb_setSysTime>
                    ac_buff, 
                    s_size);
      }/*End else if( t_conError == CONSOLE_TOO_MANY_TOKENS)*/
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("sct")) == 0)
      && (t_tokHndl.c_numTokens == 4)) /*Set current time*/
      {
    f546:	cf c7       	rjmp	.+3998   	; 0x104e6 <arb_console+0x1200>

         arb_setSysTime( c_hours,
                         c_min,
                         c_sec);
      }/*End else if( strcasecmp( (char *)t_tokHndl.ac_tok[0], "sct") == 0)*/
      else if( strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("help")) == 0)
    f548:	ce 01       	movw	r24, r28
    f54a:	85 5b       	subi	r24, 0xB5	; 181
    f54c:	9f 4f       	sbci	r25, 0xFF	; 255
    f54e:	6b e3       	ldi	r22, 0x3B	; 59
    f550:	72 e0       	ldi	r23, 0x02	; 2
    f552:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
    f556:	00 97       	sbiw	r24, 0x00	; 0
    f558:	09 f0       	breq	.+2      	; 0xf55c <arb_console+0x276>
    f55a:	7a c1       	rjmp	.+756    	; 0xf850 <arb_console+0x56a>
 *****************************************************************************/
static void arb_displayKernelHelp( int8_t *pc_buff)
{
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
    f55c:	00 d0       	rcall	.+0      	; 0xf55e <arb_console+0x278>
    f55e:	0f 92       	push	r0
      else if( strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("help")) == 0)
      {
         /*------------------------------------------------------------------*
          * Display a list of all the possible RTOS specific commands.
          *------------------------------------------------------------------*/
         arb_displayKernelHelp( ac_buff);
    f560:	8e 01       	movw	r16, r28
    f562:	04 54       	subi	r16, 0x44	; 68
    f564:	1f 4f       	sbci	r17, 0xFF	; 255
 *****************************************************************************/
static void arb_displayKernelHelp( int8_t *pc_buff)
{
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
    f566:	ad b7       	in	r26, 0x3d	; 61
    f568:	be b7       	in	r27, 0x3e	; 62
    f56a:	11 96       	adiw	r26, 0x01	; 1
    f56c:	0d 93       	st	X+, r16
    f56e:	1c 93       	st	X, r17
    f570:	12 97       	sbiw	r26, 0x02	; 2
    f572:	89 e7       	ldi	r24, 0x79	; 121
    f574:	92 e0       	ldi	r25, 0x02	; 2
    f576:	13 96       	adiw	r26, 0x03	; 3
    f578:	8d 93       	st	X+, r24
    f57a:	9c 93       	st	X, r25
    f57c:	14 97       	sbiw	r26, 0x04	; 4
    f57e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f582:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f584:	80 91 f7 26 	lds	r24, 0x26F7
    f588:	90 91 f8 26 	lds	r25, 0x26F8
    f58c:	0f 90       	pop	r0
    f58e:	0f 90       	pop	r0
    f590:	0f 90       	pop	r0
    f592:	0f 90       	pop	r0
    f594:	b8 01       	movw	r22, r16
    f596:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Command |     Arguments     |              Description                 |\n\r"));
    f59a:	00 d0       	rcall	.+0      	; 0xf59c <arb_console+0x2b6>
    f59c:	0f 92       	push	r0
    f59e:	ed b7       	in	r30, 0x3d	; 61
    f5a0:	fe b7       	in	r31, 0x3e	; 62
    f5a2:	01 83       	std	Z+1, r16	; 0x01
    f5a4:	12 83       	std	Z+2, r17	; 0x02
    f5a6:	86 ec       	ldi	r24, 0xC6	; 198
    f5a8:	92 e0       	ldi	r25, 0x02	; 2
    f5aa:	83 83       	std	Z+3, r24	; 0x03
    f5ac:	94 83       	std	Z+4, r25	; 0x04
    f5ae:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f5b2:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f5b4:	80 91 f7 26 	lds	r24, 0x26F7
    f5b8:	90 91 f8 26 	lds	r25, 0x26F8
    f5bc:	0f 90       	pop	r0
    f5be:	0f 90       	pop	r0
    f5c0:	0f 90       	pop	r0
    f5c2:	0f 90       	pop	r0
    f5c4:	b8 01       	movw	r22, r16
    f5c6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|-------------------|------------------------------------------|\n\r"));
    f5ca:	00 d0       	rcall	.+0      	; 0xf5cc <arb_console+0x2e6>
    f5cc:	0f 92       	push	r0
    f5ce:	ad b7       	in	r26, 0x3d	; 61
    f5d0:	be b7       	in	r27, 0x3e	; 62
    f5d2:	11 96       	adiw	r26, 0x01	; 1
    f5d4:	0d 93       	st	X+, r16
    f5d6:	1c 93       	st	X, r17
    f5d8:	12 97       	sbiw	r26, 0x02	; 2
    f5da:	83 e1       	ldi	r24, 0x13	; 19
    f5dc:	93 e0       	ldi	r25, 0x03	; 3
    f5de:	13 96       	adiw	r26, 0x03	; 3
    f5e0:	8d 93       	st	X+, r24
    f5e2:	9c 93       	st	X, r25
    f5e4:	14 97       	sbiw	r26, 0x04	; 4
    f5e6:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f5ea:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f5ec:	80 91 f7 26 	lds	r24, 0x26F7
    f5f0:	90 91 f8 26 	lds	r25, 0x26F8
    f5f4:	0f 90       	pop	r0
    f5f6:	0f 90       	pop	r0
    f5f8:	0f 90       	pop	r0
    f5fa:	0f 90       	pop	r0
    f5fc:	b8 01       	movw	r22, r16
    f5fe:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| sdl     | <arg1>            | Set the debug level, where <arg1> =      |\n\r"));
    f602:	00 d0       	rcall	.+0      	; 0xf604 <arb_console+0x31e>
    f604:	0f 92       	push	r0
    f606:	ed b7       	in	r30, 0x3d	; 61
    f608:	fe b7       	in	r31, 0x3e	; 62
    f60a:	01 83       	std	Z+1, r16	; 0x01
    f60c:	12 83       	std	Z+2, r17	; 0x02
    f60e:	80 e6       	ldi	r24, 0x60	; 96
    f610:	93 e0       	ldi	r25, 0x03	; 3
    f612:	83 83       	std	Z+3, r24	; 0x03
    f614:	94 83       	std	Z+4, r25	; 0x04
    f616:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f61a:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f61c:	80 91 f7 26 	lds	r24, 0x26F7
    f620:	90 91 f8 26 	lds	r25, 0x26F8
    f624:	0f 90       	pop	r0
    f626:	0f 90       	pop	r0
    f628:	0f 90       	pop	r0
    f62a:	0f 90       	pop	r0
    f62c:	b8 01       	movw	r22, r16
    f62e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |                   | 0,1,2 (low, med, high)                   |\n\r"));
    f632:	00 d0       	rcall	.+0      	; 0xf634 <arb_console+0x34e>
    f634:	0f 92       	push	r0
    f636:	ad b7       	in	r26, 0x3d	; 61
    f638:	be b7       	in	r27, 0x3e	; 62
    f63a:	11 96       	adiw	r26, 0x01	; 1
    f63c:	0d 93       	st	X+, r16
    f63e:	1c 93       	st	X, r17
    f640:	12 97       	sbiw	r26, 0x02	; 2
    f642:	8d ea       	ldi	r24, 0xAD	; 173
    f644:	93 e0       	ldi	r25, 0x03	; 3
    f646:	13 96       	adiw	r26, 0x03	; 3
    f648:	8d 93       	st	X+, r24
    f64a:	9c 93       	st	X, r25
    f64c:	14 97       	sbiw	r26, 0x04	; 4
    f64e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f652:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f654:	80 91 f7 26 	lds	r24, 0x26F7
    f658:	90 91 f8 26 	lds	r25, 0x26F8
    f65c:	0f 90       	pop	r0
    f65e:	0f 90       	pop	r0
    f660:	0f 90       	pop	r0
    f662:	0f 90       	pop	r0
    f664:	b8 01       	movw	r22, r16
    f666:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| dev     |                   | Returns a list of active drivers.        |\n\r"));
    f66a:	00 d0       	rcall	.+0      	; 0xf66c <arb_console+0x386>
    f66c:	0f 92       	push	r0
    f66e:	ed b7       	in	r30, 0x3d	; 61
    f670:	fe b7       	in	r31, 0x3e	; 62
    f672:	01 83       	std	Z+1, r16	; 0x01
    f674:	12 83       	std	Z+2, r17	; 0x02
    f676:	8a ef       	ldi	r24, 0xFA	; 250
    f678:	93 e0       	ldi	r25, 0x03	; 3
    f67a:	83 83       	std	Z+3, r24	; 0x03
    f67c:	94 83       	std	Z+4, r25	; 0x04
    f67e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f682:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f684:	80 91 f7 26 	lds	r24, 0x26F7
    f688:	90 91 f8 26 	lds	r25, 0x26F8
    f68c:	0f 90       	pop	r0
    f68e:	0f 90       	pop	r0
    f690:	0f 90       	pop	r0
    f692:	0f 90       	pop	r0
    f694:	b8 01       	movw	r22, r16
    f696:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| top     |                   | Displays system statistics.              |\n\r"));
    f69a:	00 d0       	rcall	.+0      	; 0xf69c <arb_console+0x3b6>
    f69c:	0f 92       	push	r0
    f69e:	ad b7       	in	r26, 0x3d	; 61
    f6a0:	be b7       	in	r27, 0x3e	; 62
    f6a2:	11 96       	adiw	r26, 0x01	; 1
    f6a4:	0d 93       	st	X+, r16
    f6a6:	1c 93       	st	X, r17
    f6a8:	12 97       	sbiw	r26, 0x02	; 2
    f6aa:	87 e4       	ldi	r24, 0x47	; 71
    f6ac:	94 e0       	ldi	r25, 0x04	; 4
    f6ae:	13 96       	adiw	r26, 0x03	; 3
    f6b0:	8d 93       	st	X+, r24
    f6b2:	9c 93       	st	X, r25
    f6b4:	14 97       	sbiw	r26, 0x04	; 4
    f6b6:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f6ba:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f6bc:	80 91 f7 26 	lds	r24, 0x26F7
    f6c0:	90 91 f8 26 	lds	r25, 0x26F8
    f6c4:	0f 90       	pop	r0
    f6c6:	0f 90       	pop	r0
    f6c8:	0f 90       	pop	r0
    f6ca:	0f 90       	pop	r0
    f6cc:	b8 01       	movw	r22, r16
    f6ce:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| ls      | <arg1>            | Displays the contents of dir <arg1>.     |\n\r"));
    f6d2:	00 d0       	rcall	.+0      	; 0xf6d4 <arb_console+0x3ee>
    f6d4:	0f 92       	push	r0
    f6d6:	ed b7       	in	r30, 0x3d	; 61
    f6d8:	fe b7       	in	r31, 0x3e	; 62
    f6da:	01 83       	std	Z+1, r16	; 0x01
    f6dc:	12 83       	std	Z+2, r17	; 0x02
    f6de:	84 e9       	ldi	r24, 0x94	; 148
    f6e0:	94 e0       	ldi	r25, 0x04	; 4
    f6e2:	83 83       	std	Z+3, r24	; 0x03
    f6e4:	94 83       	std	Z+4, r25	; 0x04
    f6e6:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f6ea:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f6ec:	80 91 f7 26 	lds	r24, 0x26F7
    f6f0:	90 91 f8 26 	lds	r25, 0x26F8
    f6f4:	0f 90       	pop	r0
    f6f6:	0f 90       	pop	r0
    f6f8:	0f 90       	pop	r0
    f6fa:	0f 90       	pop	r0
    f6fc:	b8 01       	movw	r22, r16
    f6fe:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| cd      | <arg1>            | Change to dir <arg1>.                    |\n\r"));
    f702:	00 d0       	rcall	.+0      	; 0xf704 <arb_console+0x41e>
    f704:	0f 92       	push	r0
    f706:	ad b7       	in	r26, 0x3d	; 61
    f708:	be b7       	in	r27, 0x3e	; 62
    f70a:	11 96       	adiw	r26, 0x01	; 1
    f70c:	0d 93       	st	X+, r16
    f70e:	1c 93       	st	X, r17
    f710:	12 97       	sbiw	r26, 0x02	; 2
    f712:	81 ee       	ldi	r24, 0xE1	; 225
    f714:	94 e0       	ldi	r25, 0x04	; 4
    f716:	13 96       	adiw	r26, 0x03	; 3
    f718:	8d 93       	st	X+, r24
    f71a:	9c 93       	st	X, r25
    f71c:	14 97       	sbiw	r26, 0x04	; 4
    f71e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f722:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f724:	80 91 f7 26 	lds	r24, 0x26F7
    f728:	90 91 f8 26 	lds	r25, 0x26F8
    f72c:	0f 90       	pop	r0
    f72e:	0f 90       	pop	r0
    f730:	0f 90       	pop	r0
    f732:	0f 90       	pop	r0
    f734:	b8 01       	movw	r22, r16
    f736:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| rm      | <arg1>            | Remove a file <arg1>.                    |\n\r"));
    f73a:	00 d0       	rcall	.+0      	; 0xf73c <arb_console+0x456>
    f73c:	0f 92       	push	r0
    f73e:	ed b7       	in	r30, 0x3d	; 61
    f740:	fe b7       	in	r31, 0x3e	; 62
    f742:	01 83       	std	Z+1, r16	; 0x01
    f744:	12 83       	std	Z+2, r17	; 0x02
    f746:	8e e2       	ldi	r24, 0x2E	; 46
    f748:	95 e0       	ldi	r25, 0x05	; 5
    f74a:	83 83       	std	Z+3, r24	; 0x03
    f74c:	94 83       	std	Z+4, r25	; 0x04
    f74e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f752:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f754:	80 91 f7 26 	lds	r24, 0x26F7
    f758:	90 91 f8 26 	lds	r25, 0x26F8
    f75c:	0f 90       	pop	r0
    f75e:	0f 90       	pop	r0
    f760:	0f 90       	pop	r0
    f762:	0f 90       	pop	r0
    f764:	b8 01       	movw	r22, r16
    f766:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| rmdir   | <arg1>            | Remove a directory.                      |\n\r"));
    f76a:	00 d0       	rcall	.+0      	; 0xf76c <arb_console+0x486>
    f76c:	0f 92       	push	r0
    f76e:	ad b7       	in	r26, 0x3d	; 61
    f770:	be b7       	in	r27, 0x3e	; 62
    f772:	11 96       	adiw	r26, 0x01	; 1
    f774:	0d 93       	st	X+, r16
    f776:	1c 93       	st	X, r17
    f778:	12 97       	sbiw	r26, 0x02	; 2
    f77a:	8b e7       	ldi	r24, 0x7B	; 123
    f77c:	95 e0       	ldi	r25, 0x05	; 5
    f77e:	13 96       	adiw	r26, 0x03	; 3
    f780:	8d 93       	st	X+, r24
    f782:	9c 93       	st	X, r25
    f784:	14 97       	sbiw	r26, 0x04	; 4
    f786:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f78a:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f78c:	80 91 f7 26 	lds	r24, 0x26F7
    f790:	90 91 f8 26 	lds	r25, 0x26F8
    f794:	0f 90       	pop	r0
    f796:	0f 90       	pop	r0
    f798:	0f 90       	pop	r0
    f79a:	0f 90       	pop	r0
    f79c:	b8 01       	movw	r22, r16
    f79e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| mkdir   | <arg1>            | Create a directory <arg1>.               |\n\r"));
    f7a2:	00 d0       	rcall	.+0      	; 0xf7a4 <arb_console+0x4be>
    f7a4:	0f 92       	push	r0
    f7a6:	ed b7       	in	r30, 0x3d	; 61
    f7a8:	fe b7       	in	r31, 0x3e	; 62
    f7aa:	01 83       	std	Z+1, r16	; 0x01
    f7ac:	12 83       	std	Z+2, r17	; 0x02
    f7ae:	88 ec       	ldi	r24, 0xC8	; 200
    f7b0:	95 e0       	ldi	r25, 0x05	; 5
    f7b2:	83 83       	std	Z+3, r24	; 0x03
    f7b4:	94 83       	std	Z+4, r25	; 0x04
    f7b6:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f7ba:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f7bc:	80 91 f7 26 	lds	r24, 0x26F7
    f7c0:	90 91 f8 26 	lds	r25, 0x26F8
    f7c4:	0f 90       	pop	r0
    f7c6:	0f 90       	pop	r0
    f7c8:	0f 90       	pop	r0
    f7ca:	0f 90       	pop	r0
    f7cc:	b8 01       	movw	r22, r16
    f7ce:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| touch   | <arg1>            | Create file <arg1>.                      |\n\r"));
    f7d2:	00 d0       	rcall	.+0      	; 0xf7d4 <arb_console+0x4ee>
    f7d4:	0f 92       	push	r0
    f7d6:	ad b7       	in	r26, 0x3d	; 61
    f7d8:	be b7       	in	r27, 0x3e	; 62
    f7da:	11 96       	adiw	r26, 0x01	; 1
    f7dc:	0d 93       	st	X+, r16
    f7de:	1c 93       	st	X, r17
    f7e0:	12 97       	sbiw	r26, 0x02	; 2
    f7e2:	85 e1       	ldi	r24, 0x15	; 21
    f7e4:	96 e0       	ldi	r25, 0x06	; 6
    f7e6:	13 96       	adiw	r26, 0x03	; 3
    f7e8:	8d 93       	st	X+, r24
    f7ea:	9c 93       	st	X, r25
    f7ec:	14 97       	sbiw	r26, 0x04	; 4
    f7ee:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f7f2:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f7f4:	80 91 f7 26 	lds	r24, 0x26F7
    f7f8:	90 91 f8 26 	lds	r25, 0x26F8
    f7fc:	0f 90       	pop	r0
    f7fe:	0f 90       	pop	r0
    f800:	0f 90       	pop	r0
    f802:	0f 90       	pop	r0
    f804:	b8 01       	movw	r22, r16
    f806:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| head    | <arg1>            | Prints a file <arg1> to the terminal.    |\n\r"));
    f80a:	00 d0       	rcall	.+0      	; 0xf80c <arb_console+0x526>
    f80c:	0f 92       	push	r0
    f80e:	ed b7       	in	r30, 0x3d	; 61
    f810:	fe b7       	in	r31, 0x3e	; 62
    f812:	01 83       	std	Z+1, r16	; 0x01
    f814:	12 83       	std	Z+2, r17	; 0x02
    f816:	82 e6       	ldi	r24, 0x62	; 98
    f818:	96 e0       	ldi	r25, 0x06	; 6
    f81a:	83 83       	std	Z+3, r24	; 0x03
    f81c:	94 83       	std	Z+4, r25	; 0x04
    f81e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f822:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f824:	80 91 f7 26 	lds	r24, 0x26F7
    f828:	90 91 f8 26 	lds	r25, 0x26F8
    f82c:	0f 90       	pop	r0
    f82e:	0f 90       	pop	r0
    f830:	0f 90       	pop	r0
    f832:	0f 90       	pop	r0
    f834:	b8 01       	movw	r22, r16
    f836:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'-------------------'------------------------------------------'\n\r"));
    f83a:	00 d0       	rcall	.+0      	; 0xf83c <arb_console+0x556>
    f83c:	0f 92       	push	r0
    f83e:	ad b7       	in	r26, 0x3d	; 61
    f840:	be b7       	in	r27, 0x3e	; 62
    f842:	11 96       	adiw	r26, 0x01	; 1
    f844:	0d 93       	st	X+, r16
    f846:	1c 93       	st	X, r17
    f848:	12 97       	sbiw	r26, 0x02	; 2
    f84a:	8f ea       	ldi	r24, 0xAF	; 175
    f84c:	96 e0       	ldi	r25, 0x06	; 6
    f84e:	39 c6       	rjmp	.+3186   	; 0x104c2 <arb_console+0x11dc>
         /*------------------------------------------------------------------*
          * Display a list of all the possible RTOS specific commands.
          *------------------------------------------------------------------*/
         arb_displayKernelHelp( ac_buff);
      }/*End else if( strcasecmp( (char *)t_tokHndl.ac_tok[0], "help") == 0)*/
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("sdl")) == 0)
    f850:	ce 01       	movw	r24, r28
    f852:	85 5b       	subi	r24, 0xB5	; 181
    f854:	9f 4f       	sbci	r25, 0xFF	; 255
    f856:	60 e4       	ldi	r22, 0x40	; 64
    f858:	72 e0       	ldi	r23, 0x02	; 2
    f85a:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
    f85e:	00 97       	sbiw	r24, 0x00	; 0
    f860:	09 f0       	breq	.+2      	; 0xf864 <arb_console+0x57e>
    f862:	69 c0       	rjmp	.+210    	; 0xf936 <arb_console+0x650>
      && (t_tokHndl.c_numTokens == 2)) /*Set the debug level*/
    f864:	c5 54       	subi	r28, 0x45	; 69
    f866:	df 4f       	sbci	r29, 0xFF	; 255
    f868:	88 81       	ld	r24, Y
    f86a:	cb 5b       	subi	r28, 0xBB	; 187
    f86c:	d0 40       	sbci	r29, 0x00	; 0
    f86e:	82 30       	cpi	r24, 0x02	; 2
    f870:	09 f0       	breq	.+2      	; 0xf874 <arb_console+0x58e>
    f872:	61 c0       	rjmp	.+194    	; 0xf936 <arb_console+0x650>
{
   uint8_t c_dbg = PRINTF_DBG_OFF;
   t_consoleError t_conError;
   uint16_t s_size;

   if( pt_tokHndl->ac_tok[1][0] == '0')
    f874:	6c 96       	adiw	r28, 0x1c	; 28
    f876:	8f ad       	sts	0x6f, r24
    f878:	6c 97       	sbiw	r28, 0x1c	; 28
    f87a:	4c eb       	ldi	r20, 0xBC	; 188
    f87c:	e4 2e       	mov	r14, r20
    f87e:	f1 2c       	mov	r15, r1
    f880:	ec 0e       	add	r14, r28
    f882:	fd 1e       	adc	r15, r29
    f884:	80 33       	cpi	r24, 0x30	; 48
    f886:	d9 f0       	breq	.+54     	; 0xf8be <arb_console+0x5d8>
      c_dbg = PRINTF_DBG_LOW;
   else if( pt_tokHndl->ac_tok[1][0] == '1')
    f888:	81 33       	cpi	r24, 0x31	; 49
    f88a:	d9 f0       	breq	.+54     	; 0xf8c2 <arb_console+0x5dc>
      c_dbg = PRINTF_DBG_MED;
   else if( pt_tokHndl->ac_tok[1][0] == '2')
    f88c:	82 33       	cpi	r24, 0x32	; 50
    f88e:	d9 f0       	breq	.+54     	; 0xf8c6 <arb_console+0x5e0>
      c_dbg = PRINTF_DBG_HIGH;
   else
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid Level\n\r"));
    f890:	00 d0       	rcall	.+0      	; 0xf892 <arb_console+0x5ac>
    f892:	0f 92       	push	r0
    f894:	ed b7       	in	r30, 0x3d	; 61
    f896:	fe b7       	in	r31, 0x3e	; 62
    f898:	e1 82       	std	Z+1, r14	; 0x01
    f89a:	f2 82       	std	Z+2, r15	; 0x02
    f89c:	8c ef       	ldi	r24, 0xFC	; 252
    f89e:	96 e0       	ldi	r25, 0x06	; 6
    f8a0:	83 83       	std	Z+3, r24	; 0x03
    f8a2:	94 83       	std	Z+4, r25	; 0x04
    f8a4:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f8a8:	ac 01       	movw	r20, r24
      arb_write( gt_conObject.t_consoleHndl,
    f8aa:	80 91 f7 26 	lds	r24, 0x26F7
    f8ae:	90 91 f8 26 	lds	r25, 0x26F8
    f8b2:	0f 90       	pop	r0
    f8b4:	0f 90       	pop	r0
    f8b6:	0f 90       	pop	r0
    f8b8:	0f 90       	pop	r0
    f8ba:	b7 01       	movw	r22, r14
    f8bc:	12 c6       	rjmp	.+3108   	; 0x104e2 <arb_console+0x11fc>
   uint8_t c_dbg = PRINTF_DBG_OFF;
   t_consoleError t_conError;
   uint16_t s_size;

   if( pt_tokHndl->ac_tok[1][0] == '0')
      c_dbg = PRINTF_DBG_LOW;
    f8be:	01 e0       	ldi	r16, 0x01	; 1
    f8c0:	03 c0       	rjmp	.+6      	; 0xf8c8 <arb_console+0x5e2>
   else if( pt_tokHndl->ac_tok[1][0] == '1')
      c_dbg = PRINTF_DBG_MED;
    f8c2:	02 e0       	ldi	r16, 0x02	; 2
    f8c4:	01 c0       	rjmp	.+2      	; 0xf8c8 <arb_console+0x5e2>
   else if( pt_tokHndl->ac_tok[1][0] == '2')
      c_dbg = PRINTF_DBG_HIGH;
    f8c6:	04 e0       	ldi	r16, 0x04	; 4
                 s_size);
   }

   if( c_dbg <= PRINTF_DBG_HIGH)
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("The 'Enter' button will enable/disable a debugging session. Press 'Enter' to begin...\n\r"));
    f8c8:	00 d0       	rcall	.+0      	; 0xf8ca <arb_console+0x5e4>
    f8ca:	0f 92       	push	r0
    f8cc:	ad b7       	in	r26, 0x3d	; 61
    f8ce:	be b7       	in	r27, 0x3e	; 62
    f8d0:	11 96       	adiw	r26, 0x01	; 1
    f8d2:	ed 92       	st	X+, r14
    f8d4:	fc 92       	st	X, r15
    f8d6:	12 97       	sbiw	r26, 0x02	; 2
    f8d8:	8c e0       	ldi	r24, 0x0C	; 12
    f8da:	97 e0       	ldi	r25, 0x07	; 7
    f8dc:	13 96       	adiw	r26, 0x03	; 3
    f8de:	8d 93       	st	X+, r24
    f8e0:	9c 93       	st	X, r25
    f8e2:	14 97       	sbiw	r26, 0x04	; 4
    f8e4:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f8e8:	ac 01       	movw	r20, r24
      arb_write( gt_conObject.t_consoleHndl,
    f8ea:	80 91 f7 26 	lds	r24, 0x26F7
    f8ee:	90 91 f8 26 	lds	r25, 0x26F8
    f8f2:	0f 90       	pop	r0
    f8f4:	0f 90       	pop	r0
    f8f6:	0f 90       	pop	r0
    f8f8:	0f 90       	pop	r0
    f8fa:	b7 01       	movw	r22, r14
    f8fc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 s_size);

      /*---------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f900:	80 91 f7 26 	lds	r24, 0x26F7
    f904:	90 91 f8 26 	lds	r25, 0x26F8
    f908:	63 e0       	ldi	r22, 0x03	; 3
    f90a:	70 e0       	ldi	r23, 0x00	; 0
    f90c:	a2 01       	movw	r20, r4
    f90e:	91 01       	movw	r18, r2
    f910:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                              (uint32_t)((uint16_t)pt_tokHndl));

      /*---------------------------------------------------------------*
       * Enable debug...
       *---------------------------------------------------------------*/
      arb_setPrintfDbgLevel( c_dbg);
    f914:	80 2f       	mov	r24, r16
    f916:	0e 94 8a 8b 	call	0x11714	; 0x11714 <arb_setPrintfDbgLevel>

      /*---------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f91a:	80 91 f7 26 	lds	r24, 0x26F7
    f91e:	90 91 f8 26 	lds	r25, 0x26F8
    f922:	63 e0       	ldi	r22, 0x03	; 3
    f924:	70 e0       	ldi	r23, 0x00	; 0
    f926:	a2 01       	movw	r20, r4
    f928:	91 01       	movw	r18, r2
    f92a:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                              (uint32_t)((uint16_t)pt_tokHndl));

      /*---------------------------------------------------------------*
       * Disable debug...
       *---------------------------------------------------------------*/
      arb_setPrintfDbgLevel( PRINTF_DBG_OFF);
    f92e:	80 e2       	ldi	r24, 0x20	; 32
    f930:	0e 94 8a 8b 	call	0x11714	; 0x11714 <arb_setPrintfDbgLevel>
    f934:	d8 c5       	rjmp	.+2992   	; 0x104e6 <arb_console+0x1200>
          * Turn on/off a given level of system debug.
          *------------------------------------------------------------------*/
         arb_setDebugLevel( &t_tokHndl,
                            ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("dev")) == 0)
    f936:	ce 01       	movw	r24, r28
    f938:	85 5b       	subi	r24, 0xB5	; 181
    f93a:	9f 4f       	sbci	r25, 0xFF	; 255
    f93c:	64 e4       	ldi	r22, 0x44	; 68
    f93e:	72 e0       	ldi	r23, 0x02	; 2
    f940:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
    f944:	00 97       	sbiw	r24, 0x00	; 0
    f946:	09 f0       	breq	.+2      	; 0xf94a <arb_console+0x664>
    f948:	d2 c0       	rjmp	.+420    	; 0xfaee <arb_console+0x808>
      && (t_tokHndl.c_numTokens == 1))
    f94a:	c5 54       	subi	r28, 0x45	; 69
    f94c:	df 4f       	sbci	r29, 0xFF	; 255
    f94e:	88 81       	ld	r24, Y
    f950:	cb 5b       	subi	r28, 0xBB	; 187
    f952:	d0 40       	sbci	r29, 0x00	; 0
    f954:	81 30       	cpi	r24, 0x01	; 1
    f956:	09 f0       	breq	.+2      	; 0xf95a <arb_console+0x674>
    f958:	ca c0       	rjmp	.+404    	; 0xfaee <arb_console+0x808>
 *
 * @return None.
 *****************************************************************************/
static void arb_displayDeviceList( int8_t *pc_buff)
{
   t_CONTHNDL t_deviceList = arb_getDeviceList();
    f95a:	0e 94 20 83 	call	0x10640	; 0x10640 <arb_getDeviceList>
    f95e:	8b 83       	std	Y+3, r24	; 0x03
    f960:	9c 83       	std	Y+4, r25	; 0x04
   t_LINKHNDL t_curr;
   t_device *pt_dev;
   uint16_t s_count;
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".-------------------------------------------------------------.\n\r"));
    f962:	00 d0       	rcall	.+0      	; 0xf964 <arb_console+0x67e>
    f964:	0f 92       	push	r0
      {
         /*------------------------------------------------------------------*
          * Display a list of all the device drivers registered with the
          * kernel.
          *------------------------------------------------------------------*/
         arb_displayDeviceList( ac_buff);
    f966:	8e 01       	movw	r16, r28
    f968:	04 54       	subi	r16, 0x44	; 68
    f96a:	1f 4f       	sbci	r17, 0xFF	; 255
   t_LINKHNDL t_curr;
   t_device *pt_dev;
   uint16_t s_count;
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".-------------------------------------------------------------.\n\r"));
    f96c:	ed b7       	in	r30, 0x3d	; 61
    f96e:	fe b7       	in	r31, 0x3e	; 62
    f970:	01 83       	std	Z+1, r16	; 0x01
    f972:	12 83       	std	Z+2, r17	; 0x02
    f974:	84 e6       	ldi	r24, 0x64	; 100
    f976:	97 e0       	ldi	r25, 0x07	; 7
    f978:	83 83       	std	Z+3, r24	; 0x03
    f97a:	94 83       	std	Z+4, r25	; 0x04
    f97c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f980:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f982:	80 91 f7 26 	lds	r24, 0x26F7
    f986:	90 91 f8 26 	lds	r25, 0x26F8
    f98a:	0f 90       	pop	r0
    f98c:	0f 90       	pop	r0
    f98e:	0f 90       	pop	r0
    f990:	0f 90       	pop	r0
    f992:	b8 01       	movw	r22, r16
    f994:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   Driver Name   | Major Number | Minor Number| # of Handles |\n\r"));
    f998:	00 d0       	rcall	.+0      	; 0xf99a <arb_console+0x6b4>
    f99a:	0f 92       	push	r0
    f99c:	ad b7       	in	r26, 0x3d	; 61
    f99e:	be b7       	in	r27, 0x3e	; 62
    f9a0:	11 96       	adiw	r26, 0x01	; 1
    f9a2:	0d 93       	st	X+, r16
    f9a4:	1c 93       	st	X, r17
    f9a6:	12 97       	sbiw	r26, 0x02	; 2
    f9a8:	86 ea       	ldi	r24, 0xA6	; 166
    f9aa:	97 e0       	ldi	r25, 0x07	; 7
    f9ac:	13 96       	adiw	r26, 0x03	; 3
    f9ae:	8d 93       	st	X+, r24
    f9b0:	9c 93       	st	X, r25
    f9b2:	14 97       	sbiw	r26, 0x04	; 4
    f9b4:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f9b8:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f9ba:	80 91 f7 26 	lds	r24, 0x26F7
    f9be:	90 91 f8 26 	lds	r25, 0x26F8
    f9c2:	0f 90       	pop	r0
    f9c4:	0f 90       	pop	r0
    f9c6:	0f 90       	pop	r0
    f9c8:	0f 90       	pop	r0
    f9ca:	b8 01       	movw	r22, r16
    f9cc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|-----------------|--------------|-------------|--------------|\n\r"));
    f9d0:	00 d0       	rcall	.+0      	; 0xf9d2 <arb_console+0x6ec>
    f9d2:	0f 92       	push	r0
    f9d4:	ed b7       	in	r30, 0x3d	; 61
    f9d6:	fe b7       	in	r31, 0x3e	; 62
    f9d8:	01 83       	std	Z+1, r16	; 0x01
    f9da:	12 83       	std	Z+2, r17	; 0x02
    f9dc:	88 ee       	ldi	r24, 0xE8	; 232
    f9de:	97 e0       	ldi	r25, 0x07	; 7
    f9e0:	83 83       	std	Z+3, r24	; 0x03
    f9e2:	94 83       	std	Z+4, r25	; 0x04
    f9e4:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    f9e8:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f9ea:	80 91 f7 26 	lds	r24, 0x26F7
    f9ee:	90 91 f8 26 	lds	r25, 0x26F8
    f9f2:	0f 90       	pop	r0
    f9f4:	0f 90       	pop	r0
    f9f6:	0f 90       	pop	r0
    f9f8:	0f 90       	pop	r0
    f9fa:	b8 01       	movw	r22, r16
    f9fc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
    fa00:	eb 81       	ldd	r30, Y+3	; 0x03
    fa02:	fc 81       	ldd	r31, Y+4	; 0x04
    fa04:	c2 80       	ldd	r12, Z+2	; 0x02
    fa06:	d3 80       	ldd	r13, Z+3	; 0x03
    fa08:	eb 81       	ldd	r30, Y+3	; 0x03
    fa0a:	fc 81       	ldd	r31, Y+4	; 0x04
    fa0c:	80 85       	ldd	r24, Z+8	; 0x08
    fa0e:	91 85       	ldd	r25, Z+9	; 0x09
    fa10:	89 83       	std	Y+1, r24	; 0x01
    fa12:	9a 83       	std	Y+2, r25	; 0x02
    fa14:	e0 2e       	mov	r14, r16
    fa16:	01 2f       	mov	r16, r17
   {
      pt_dev = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
      s_size = sprintf_P( (char *)pc_buff, PSTR("| %16s| %2d           | %2d          | %2d           |\n\r"),
    fa18:	3a e2       	ldi	r19, 0x2A	; 42
    fa1a:	83 2e       	mov	r8, r19
    fa1c:	38 e0       	ldi	r19, 0x08	; 8
    fa1e:	93 2e       	mov	r9, r19
    fa20:	44 c0       	rjmp	.+136    	; 0xfaaa <arb_console+0x7c4>
              pc_buff,
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
   {
      pt_dev = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
    fa22:	e9 81       	ldd	r30, Y+1	; 0x01
    fa24:	fa 81       	ldd	r31, Y+2	; 0x02
    fa26:	80 81       	ld	r24, Z
    fa28:	91 81       	ldd	r25, Z+1	; 0x01
      s_size = sprintf_P( (char *)pc_buff, PSTR("| %16s| %2d           | %2d          | %2d           |\n\r"),
      pt_dev->ac_deviceName,
      ARB_GET_DEV_MAJOR(pt_dev->t_devId),
    fa2a:	dc 01       	movw	r26, r24
    fa2c:	2d 91       	ld	r18, X+
    fa2e:	3c 91       	ld	r19, X
      ARB_GET_DEV_MINOR(pt_dev->t_devId),
    fa30:	fc 01       	movw	r30, r24
    fa32:	41 91       	ld	r20, Z+
    fa34:	51 91       	ld	r21, Z+
    fa36:	3f 01       	movw	r6, r30
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
   {
      pt_dev = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
      s_size = sprintf_P( (char *)pc_buff, PSTR("| %16s| %2d           | %2d          | %2d           |\n\r"),
    fa38:	6d b7       	in	r22, 0x3d	; 61
    fa3a:	7e b7       	in	r23, 0x3e	; 62
    fa3c:	6c 50       	subi	r22, 0x0C	; 12
    fa3e:	70 40       	sbci	r23, 0x00	; 0
    fa40:	6d bf       	out	0x3d, r22	; 61
    fa42:	7e bf       	out	0x3e, r23	; 62
    fa44:	ed b7       	in	r30, 0x3d	; 61
    fa46:	fe b7       	in	r31, 0x3e	; 62
    fa48:	31 96       	adiw	r30, 0x01	; 1
    fa4a:	ad b7       	in	r26, 0x3d	; 61
    fa4c:	be b7       	in	r27, 0x3e	; 62
    fa4e:	11 96       	adiw	r26, 0x01	; 1
    fa50:	ec 92       	st	X, r14
    fa52:	11 97       	sbiw	r26, 0x01	; 1
    fa54:	12 96       	adiw	r26, 0x02	; 2
    fa56:	0c 93       	st	X, r16
    fa58:	82 82       	std	Z+2, r8	; 0x02
    fa5a:	93 82       	std	Z+3, r9	; 0x03
    fa5c:	64 82       	std	Z+4, r6	; 0x04
    fa5e:	75 82       	std	Z+5, r7	; 0x05
    fa60:	36 83       	std	Z+6, r19	; 0x06
    fa62:	17 82       	std	Z+7, r1	; 0x07
    fa64:	40 87       	std	Z+8, r20	; 0x08
    fa66:	11 86       	std	Z+9, r1	; 0x09
    fa68:	dc 01       	movw	r26, r24
    fa6a:	52 96       	adiw	r26, 0x12	; 18
    fa6c:	8c 91       	ld	r24, X
    fa6e:	99 27       	eor	r25, r25
    fa70:	87 fd       	sbrc	r24, 7
    fa72:	90 95       	com	r25
    fa74:	82 87       	std	Z+10, r24	; 0x0a
    fa76:	93 87       	std	Z+11, r25	; 0x0b
    fa78:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fa7c:	ac 01       	movw	r20, r24
      pt_dev->ac_deviceName,
      ARB_GET_DEV_MAJOR(pt_dev->t_devId),
      ARB_GET_DEV_MINOR(pt_dev->t_devId),
      pt_dev->c_numDevHandles);

      arb_write( gt_conObject.t_consoleHndl,
    fa7e:	80 91 f7 26 	lds	r24, 0x26F7
    fa82:	90 91 f8 26 	lds	r25, 0x26F8
    fa86:	ed b7       	in	r30, 0x3d	; 61
    fa88:	fe b7       	in	r31, 0x3e	; 62
    fa8a:	3c 96       	adiw	r30, 0x0c	; 12
    fa8c:	ed bf       	out	0x3d, r30	; 61
    fa8e:	fe bf       	out	0x3e, r31	; 62
    fa90:	6e 2d       	mov	r22, r14
    fa92:	70 2f       	mov	r23, r16
    fa94:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
   s_size = sprintf_P( (char *)pc_buff, PSTR("|-----------------|--------------|-------------|--------------|\n\r"));
   arb_write( gt_conObject.t_consoleHndl,
              pc_buff,
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
    fa98:	08 94       	sec
    fa9a:	c1 08       	sbc	r12, r1
    fa9c:	d1 08       	sbc	r13, r1
    fa9e:	e9 81       	ldd	r30, Y+1	; 0x01
    faa0:	fa 81       	ldd	r31, Y+2	; 0x02
    faa2:	80 85       	ldd	r24, Z+8	; 0x08
    faa4:	91 85       	ldd	r25, Z+9	; 0x09
    faa6:	89 83       	std	Y+1, r24	; 0x01
    faa8:	9a 83       	std	Y+2, r25	; 0x02
    faaa:	c1 14       	cp	r12, r1
    faac:	d1 04       	cpc	r13, r1
    faae:	09 f0       	breq	.+2      	; 0xfab2 <arb_console+0x7cc>
    fab0:	b8 cf       	rjmp	.-144    	; 0xfa22 <arb_console+0x73c>
      arb_write( gt_conObject.t_consoleHndl,
                 pc_buff,
                 s_size);
   }

   s_size = sprintf_P( (char *)pc_buff, PSTR("'-----------------'--------------'-------------'--------------'\n\r"));
    fab2:	00 d0       	rcall	.+0      	; 0xfab4 <arb_console+0x7ce>
    fab4:	0f 92       	push	r0
    fab6:	ad b7       	in	r26, 0x3d	; 61
    fab8:	be b7       	in	r27, 0x3e	; 62
    faba:	11 96       	adiw	r26, 0x01	; 1
    fabc:	ec 92       	st	X, r14
    fabe:	11 97       	sbiw	r26, 0x01	; 1
    fac0:	12 96       	adiw	r26, 0x02	; 2
    fac2:	0c 93       	st	X, r16
    fac4:	12 97       	sbiw	r26, 0x02	; 2
    fac6:	83 e6       	ldi	r24, 0x63	; 99
    fac8:	98 e0       	ldi	r25, 0x08	; 8
    faca:	13 96       	adiw	r26, 0x03	; 3
    facc:	8d 93       	st	X+, r24
    face:	9c 93       	st	X, r25
    fad0:	14 97       	sbiw	r26, 0x04	; 4
    fad2:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fad6:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fad8:	80 91 f7 26 	lds	r24, 0x26F7
    fadc:	90 91 f8 26 	lds	r25, 0x26F8
    fae0:	0f 90       	pop	r0
    fae2:	0f 90       	pop	r0
    fae4:	0f 90       	pop	r0
    fae6:	0f 90       	pop	r0
    fae8:	6e 2d       	mov	r22, r14
    faea:	70 2f       	mov	r23, r16
    faec:	fa c4       	rjmp	.+2548   	; 0x104e2 <arb_console+0x11fc>
          * Display a list of all the device drivers registered with the
          * kernel.
          *------------------------------------------------------------------*/
         arb_displayDeviceList( ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("top")) == 0)
    faee:	ce 01       	movw	r24, r28
    faf0:	85 5b       	subi	r24, 0xB5	; 181
    faf2:	9f 4f       	sbci	r25, 0xFF	; 255
    faf4:	68 e4       	ldi	r22, 0x48	; 72
    faf6:	72 e0       	ldi	r23, 0x02	; 2
    faf8:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
    fafc:	00 97       	sbiw	r24, 0x00	; 0
    fafe:	09 f0       	breq	.+2      	; 0xfb02 <arb_console+0x81c>
    fb00:	e0 c2       	rjmp	.+1472   	; 0x100c2 <arb_console+0xddc>
      && (t_tokHndl.c_numTokens == 1))
    fb02:	c5 54       	subi	r28, 0x45	; 69
    fb04:	df 4f       	sbci	r29, 0xFF	; 255
    fb06:	88 81       	ld	r24, Y
    fb08:	cb 5b       	subi	r28, 0xBB	; 187
    fb0a:	d0 40       	sbci	r29, 0x00	; 0
    fb0c:	81 30       	cpi	r24, 0x01	; 1
    fb0e:	09 f0       	breq	.+2      	; 0xfb12 <arb_console+0x82c>
    fb10:	d8 c2       	rjmp	.+1456   	; 0x100c2 <arb_console+0xddc>
   int32_t i_ramUsed;
   int32_t i_percUsed;

   i_dataSize = (int32_t)(uint16_t)&__data_end - (int32_t)(uint16_t)&__data_start;
   i_bssSize  = (int32_t)(uint16_t)&__bss_end - (int32_t)(uint16_t)&__data_end;
   i_heapSize = (int32_t)(uint16_t)__brkval - (int32_t)(uint16_t)&__bss_end;
    fb12:	80 91 c8 27 	lds	r24, 0x27C8
    fb16:	90 91 c9 27 	lds	r25, 0x27C9
    fb1a:	a0 e0       	ldi	r26, 0x00	; 0
    fb1c:	b0 e0       	ldi	r27, 0x00	; 0
    fb1e:	4c 01       	movw	r8, r24
    fb20:	5d 01       	movw	r10, r26
    fb22:	c4 50       	subi	r28, 0x04	; 4
    fb24:	de 4f       	sbci	r29, 0xFE	; 254
    fb26:	e8 80       	ld	r14, Y
    fb28:	f9 80       	ldd	r15, Y+1	; 0x01
    fb2a:	0a 81       	ldd	r16, Y+2	; 0x02
    fb2c:	1b 81       	ldd	r17, Y+3	; 0x03
    fb2e:	cc 5f       	subi	r28, 0xFC	; 252
    fb30:	d1 40       	sbci	r29, 0x01	; 1
    fb32:	8e 18       	sub	r8, r14
    fb34:	9f 08       	sbc	r9, r15
    fb36:	a0 0a       	sbc	r10, r16
    fb38:	b1 0a       	sbc	r11, r17
   i_freeSize = (int32_t)RAMEND - (int32_t)(uint16_t)__brkval - (int32_t)__malloc_margin;
    fb3a:	2f ef       	ldi	r18, 0xFF	; 255
    fb3c:	c2 2e       	mov	r12, r18
    fb3e:	2f e3       	ldi	r18, 0x3F	; 63
    fb40:	d2 2e       	mov	r13, r18
    fb42:	e1 2c       	mov	r14, r1
    fb44:	f1 2c       	mov	r15, r1
    fb46:	97 01       	movw	r18, r14
    fb48:	86 01       	movw	r16, r12
    fb4a:	08 1b       	sub	r16, r24
    fb4c:	19 0b       	sbc	r17, r25
    fb4e:	2a 0b       	sbc	r18, r26
    fb50:	3b 0b       	sbc	r19, r27
    fb52:	80 91 44 24 	lds	r24, 0x2444
    fb56:	90 91 45 24 	lds	r25, 0x2445
    fb5a:	a0 e0       	ldi	r26, 0x00	; 0
    fb5c:	b0 e0       	ldi	r27, 0x00	; 0
    fb5e:	08 1b       	sub	r16, r24
    fb60:	19 0b       	sbc	r17, r25
    fb62:	2a 0b       	sbc	r18, r26
    fb64:	3b 0b       	sbc	r19, r27
    fb66:	c6 51       	subi	r28, 0x16	; 22
    fb68:	de 4f       	sbci	r29, 0xFE	; 254
    fb6a:	08 83       	st	Y, r16
    fb6c:	19 83       	std	Y+1, r17	; 0x01
    fb6e:	2a 83       	std	Y+2, r18	; 0x02
    fb70:	3b 83       	std	Y+3, r19	; 0x03
    fb72:	ca 5e       	subi	r28, 0xEA	; 234
    fb74:	d1 40       	sbci	r29, 0x01	; 1
   i_ramUsed  = i_dataSize + i_bssSize + i_heapSize;
    fb76:	cb 5f       	subi	r28, 0xFB	; 251
    fb78:	dd 4f       	sbci	r29, 0xFD	; 253
    fb7a:	48 80       	ld	r4, Y
    fb7c:	59 80       	ldd	r5, Y+1	; 0x01
    fb7e:	6a 80       	ldd	r6, Y+2	; 0x02
    fb80:	7b 80       	ldd	r7, Y+3	; 0x03
    fb82:	c5 50       	subi	r28, 0x05	; 5
    fb84:	d2 40       	sbci	r29, 0x02	; 2
    fb86:	48 0c       	add	r4, r8
    fb88:	59 1c       	adc	r5, r9
    fb8a:	6a 1c       	adc	r6, r10
    fb8c:	7b 1c       	adc	r7, r11
   i_percUsed = (i_ramUsed*(int32_t)100)/(RAMEND - (int32_t)(uint16_t)&__data_start);
    fb8e:	c3 01       	movw	r24, r6
    fb90:	b2 01       	movw	r22, r4
    fb92:	24 e6       	ldi	r18, 0x64	; 100
    fb94:	30 e0       	ldi	r19, 0x00	; 0
    fb96:	40 e0       	ldi	r20, 0x00	; 0
    fb98:	50 e0       	ldi	r21, 0x00	; 0
    fb9a:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
    fb9e:	c6 5f       	subi	r28, 0xF6	; 246
    fba0:	dd 4f       	sbci	r29, 0xFD	; 253
    fba2:	68 83       	st	Y, r22
    fba4:	79 83       	std	Y+1, r23	; 0x01
    fba6:	8a 83       	std	Y+2, r24	; 0x02
    fba8:	9b 83       	std	Y+3, r25	; 0x03
    fbaa:	ca 50       	subi	r28, 0x0A	; 10
    fbac:	d2 40       	sbci	r29, 0x02	; 2
    fbae:	a7 01       	movw	r20, r14
    fbb0:	96 01       	movw	r18, r12
    fbb2:	cc 50       	subi	r28, 0x0C	; 12
    fbb4:	de 4f       	sbci	r29, 0xFE	; 254
    fbb6:	68 81       	ld	r22, Y
    fbb8:	79 81       	ldd	r23, Y+1	; 0x01
    fbba:	8a 81       	ldd	r24, Y+2	; 0x02
    fbbc:	9b 81       	ldd	r25, Y+3	; 0x03
    fbbe:	c4 5f       	subi	r28, 0xF4	; 244
    fbc0:	d1 40       	sbci	r29, 0x01	; 1
    fbc2:	26 1b       	sub	r18, r22
    fbc4:	37 0b       	sbc	r19, r23
    fbc6:	48 0b       	sbc	r20, r24
    fbc8:	59 0b       	sbc	r21, r25
    fbca:	c6 5f       	subi	r28, 0xF6	; 246
    fbcc:	dd 4f       	sbci	r29, 0xFD	; 253
    fbce:	68 81       	ld	r22, Y
    fbd0:	79 81       	ldd	r23, Y+1	; 0x01
    fbd2:	8a 81       	ldd	r24, Y+2	; 0x02
    fbd4:	9b 81       	ldd	r25, Y+3	; 0x03
    fbd6:	ca 50       	subi	r28, 0x0A	; 10
    fbd8:	d2 40       	sbci	r29, 0x02	; 2
    fbda:	0e 94 95 b8 	call	0x1712a	; 0x1712a <__divmodsi4>
    fbde:	69 01       	movw	r12, r18
    fbe0:	7a 01       	movw	r14, r20

   s_size = sprintf_P( (char *)pc_buff, PSTR(".---------.---------------.---------------.\n\r"));
    fbe2:	00 d0       	rcall	.+0      	; 0xfbe4 <arb_console+0x8fe>
    fbe4:	0f 92       	push	r0
      && (t_tokHndl.c_numTokens == 1))
      {
         /*------------------------------------------------------------------*
          * Display the memory footprint of the system.
          *------------------------------------------------------------------*/
         arb_displaySystemStatistics( ac_buff);
    fbe6:	8e 01       	movw	r16, r28
    fbe8:	04 54       	subi	r16, 0x44	; 68
    fbea:	1f 4f       	sbci	r17, 0xFF	; 255
   i_heapSize = (int32_t)(uint16_t)__brkval - (int32_t)(uint16_t)&__bss_end;
   i_freeSize = (int32_t)RAMEND - (int32_t)(uint16_t)__brkval - (int32_t)__malloc_margin;
   i_ramUsed  = i_dataSize + i_bssSize + i_heapSize;
   i_percUsed = (i_ramUsed*(int32_t)100)/(RAMEND - (int32_t)(uint16_t)&__data_start);

   s_size = sprintf_P( (char *)pc_buff, PSTR(".---------.---------------.---------------.\n\r"));
    fbec:	ad b7       	in	r26, 0x3d	; 61
    fbee:	be b7       	in	r27, 0x3e	; 62
    fbf0:	11 96       	adiw	r26, 0x01	; 1
    fbf2:	0d 93       	st	X+, r16
    fbf4:	1c 93       	st	X, r17
    fbf6:	12 97       	sbiw	r26, 0x02	; 2
    fbf8:	85 ea       	ldi	r24, 0xA5	; 165
    fbfa:	98 e0       	ldi	r25, 0x08	; 8
    fbfc:	13 96       	adiw	r26, 0x03	; 3
    fbfe:	8d 93       	st	X+, r24
    fc00:	9c 93       	st	X, r25
    fc02:	14 97       	sbiw	r26, 0x04	; 4
    fc04:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fc08:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fc0a:	80 91 f7 26 	lds	r24, 0x26F7
    fc0e:	90 91 f8 26 	lds	r25, 0x26F8
    fc12:	0f 90       	pop	r0
    fc14:	0f 90       	pop	r0
    fc16:	0f 90       	pop	r0
    fc18:	0f 90       	pop	r0
    fc1a:	b8 01       	movw	r22, r16
    fc1c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Section |    Address    |   Size Bytes  |\n\r"));
    fc20:	00 d0       	rcall	.+0      	; 0xfc22 <arb_console+0x93c>
    fc22:	0f 92       	push	r0
    fc24:	ed b7       	in	r30, 0x3d	; 61
    fc26:	fe b7       	in	r31, 0x3e	; 62
    fc28:	01 83       	std	Z+1, r16	; 0x01
    fc2a:	12 83       	std	Z+2, r17	; 0x02
    fc2c:	83 ed       	ldi	r24, 0xD3	; 211
    fc2e:	98 e0       	ldi	r25, 0x08	; 8
    fc30:	83 83       	std	Z+3, r24	; 0x03
    fc32:	94 83       	std	Z+4, r25	; 0x04
    fc34:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fc38:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fc3a:	80 91 f7 26 	lds	r24, 0x26F7
    fc3e:	90 91 f8 26 	lds	r25, 0x26F8
    fc42:	0f 90       	pop	r0
    fc44:	0f 90       	pop	r0
    fc46:	0f 90       	pop	r0
    fc48:	0f 90       	pop	r0
    fc4a:	b8 01       	movw	r22, r16
    fc4c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|---------------|---------------|\n\r"));
    fc50:	00 d0       	rcall	.+0      	; 0xfc52 <arb_console+0x96c>
    fc52:	0f 92       	push	r0
    fc54:	ad b7       	in	r26, 0x3d	; 61
    fc56:	be b7       	in	r27, 0x3e	; 62
    fc58:	11 96       	adiw	r26, 0x01	; 1
    fc5a:	0d 93       	st	X+, r16
    fc5c:	1c 93       	st	X, r17
    fc5e:	12 97       	sbiw	r26, 0x02	; 2
    fc60:	81 e0       	ldi	r24, 0x01	; 1
    fc62:	99 e0       	ldi	r25, 0x09	; 9
    fc64:	13 96       	adiw	r26, 0x03	; 3
    fc66:	8d 93       	st	X+, r24
    fc68:	9c 93       	st	X, r25
    fc6a:	14 97       	sbiw	r26, 0x04	; 4
    fc6c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fc70:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fc72:	80 91 f7 26 	lds	r24, 0x26F7
    fc76:	90 91 f8 26 	lds	r25, 0x26F8
    fc7a:	0f 90       	pop	r0
    fc7c:	0f 90       	pop	r0
    fc7e:	0f 90       	pop	r0
    fc80:	0f 90       	pop	r0
    fc82:	b8 01       	movw	r22, r16
    fc84:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   .data |        0x%x | %13d |\n\r"), (uint16_t)&__data_start, i_dataSize);
    fc88:	ed b7       	in	r30, 0x3d	; 61
    fc8a:	fe b7       	in	r31, 0x3e	; 62
    fc8c:	3a 97       	sbiw	r30, 0x0a	; 10
    fc8e:	ed bf       	out	0x3d, r30	; 61
    fc90:	fe bf       	out	0x3e, r31	; 62
    fc92:	31 96       	adiw	r30, 0x01	; 1
    fc94:	ad b7       	in	r26, 0x3d	; 61
    fc96:	be b7       	in	r27, 0x3e	; 62
    fc98:	11 96       	adiw	r26, 0x01	; 1
    fc9a:	0d 93       	st	X+, r16
    fc9c:	1c 93       	st	X, r17
    fc9e:	12 97       	sbiw	r26, 0x02	; 2
    fca0:	8f e2       	ldi	r24, 0x2F	; 47
    fca2:	99 e0       	ldi	r25, 0x09	; 9
    fca4:	82 83       	std	Z+2, r24	; 0x02
    fca6:	93 83       	std	Z+3, r25	; 0x03
    fca8:	20 e0       	ldi	r18, 0x00	; 0
    fcaa:	30 e2       	ldi	r19, 0x20	; 32
    fcac:	24 83       	std	Z+4, r18	; 0x04
    fcae:	35 83       	std	Z+5, r19	; 0x05
    fcb0:	c8 50       	subi	r28, 0x08	; 8
    fcb2:	de 4f       	sbci	r29, 0xFE	; 254
    fcb4:	48 81       	ld	r20, Y
    fcb6:	59 81       	ldd	r21, Y+1	; 0x01
    fcb8:	6a 81       	ldd	r22, Y+2	; 0x02
    fcba:	7b 81       	ldd	r23, Y+3	; 0x03
    fcbc:	c8 5f       	subi	r28, 0xF8	; 248
    fcbe:	d1 40       	sbci	r29, 0x01	; 1
    fcc0:	46 83       	std	Z+6, r20	; 0x06
    fcc2:	57 83       	std	Z+7, r21	; 0x07
    fcc4:	60 87       	std	Z+8, r22	; 0x08
    fcc6:	71 87       	std	Z+9, r23	; 0x09
    fcc8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fccc:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fcce:	80 91 f7 26 	lds	r24, 0x26F7
    fcd2:	90 91 f8 26 	lds	r25, 0x26F8
    fcd6:	6d b7       	in	r22, 0x3d	; 61
    fcd8:	7e b7       	in	r23, 0x3e	; 62
    fcda:	66 5f       	subi	r22, 0xF6	; 246
    fcdc:	7f 4f       	sbci	r23, 0xFF	; 255
    fcde:	6d bf       	out	0x3d, r22	; 61
    fce0:	7e bf       	out	0x3e, r23	; 62
    fce2:	b8 01       	movw	r22, r16
    fce4:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|    .bss |        0x%x | %13d |\n\r"), (uint16_t)&__data_end, i_bssSize);
    fce8:	8d b7       	in	r24, 0x3d	; 61
    fcea:	9e b7       	in	r25, 0x3e	; 62
    fcec:	0a 97       	sbiw	r24, 0x0a	; 10
    fcee:	8d bf       	out	0x3d, r24	; 61
    fcf0:	9e bf       	out	0x3e, r25	; 62
    fcf2:	ed b7       	in	r30, 0x3d	; 61
    fcf4:	fe b7       	in	r31, 0x3e	; 62
    fcf6:	31 96       	adiw	r30, 0x01	; 1
    fcf8:	ad b7       	in	r26, 0x3d	; 61
    fcfa:	be b7       	in	r27, 0x3e	; 62
    fcfc:	11 96       	adiw	r26, 0x01	; 1
    fcfe:	0d 93       	st	X+, r16
    fd00:	1c 93       	st	X, r17
    fd02:	12 97       	sbiw	r26, 0x02	; 2
    fd04:	82 e5       	ldi	r24, 0x52	; 82
    fd06:	99 e0       	ldi	r25, 0x09	; 9
    fd08:	82 83       	std	Z+2, r24	; 0x02
    fd0a:	93 83       	std	Z+3, r25	; 0x03
    fd0c:	2a e4       	ldi	r18, 0x4A	; 74
    fd0e:	34 e2       	ldi	r19, 0x24	; 36
    fd10:	24 83       	std	Z+4, r18	; 0x04
    fd12:	35 83       	std	Z+5, r19	; 0x05
    fd14:	c0 50       	subi	r28, 0x00	; 0
    fd16:	de 4f       	sbci	r29, 0xFE	; 254
    fd18:	48 81       	ld	r20, Y
    fd1a:	59 81       	ldd	r21, Y+1	; 0x01
    fd1c:	6a 81       	ldd	r22, Y+2	; 0x02
    fd1e:	7b 81       	ldd	r23, Y+3	; 0x03
    fd20:	c0 50       	subi	r28, 0x00	; 0
    fd22:	d2 40       	sbci	r29, 0x02	; 2
    fd24:	46 83       	std	Z+6, r20	; 0x06
    fd26:	57 83       	std	Z+7, r21	; 0x07
    fd28:	60 87       	std	Z+8, r22	; 0x08
    fd2a:	71 87       	std	Z+9, r23	; 0x09
    fd2c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fd30:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fd32:	80 91 f7 26 	lds	r24, 0x26F7
    fd36:	90 91 f8 26 	lds	r25, 0x26F8
    fd3a:	6d b7       	in	r22, 0x3d	; 61
    fd3c:	7e b7       	in	r23, 0x3e	; 62
    fd3e:	66 5f       	subi	r22, 0xF6	; 246
    fd40:	7f 4f       	sbci	r23, 0xFF	; 255
    fd42:	6d bf       	out	0x3d, r22	; 61
    fd44:	7e bf       	out	0x3e, r23	; 62
    fd46:	b8 01       	movw	r22, r16
    fd48:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   .heap |        0x%x | %13d |\n\r"), (uint16_t)&__bss_end, i_heapSize);
    fd4c:	8d b7       	in	r24, 0x3d	; 61
    fd4e:	9e b7       	in	r25, 0x3e	; 62
    fd50:	0a 97       	sbiw	r24, 0x0a	; 10
    fd52:	8d bf       	out	0x3d, r24	; 61
    fd54:	9e bf       	out	0x3e, r25	; 62
    fd56:	ed b7       	in	r30, 0x3d	; 61
    fd58:	fe b7       	in	r31, 0x3e	; 62
    fd5a:	31 96       	adiw	r30, 0x01	; 1
    fd5c:	ad b7       	in	r26, 0x3d	; 61
    fd5e:	be b7       	in	r27, 0x3e	; 62
    fd60:	11 96       	adiw	r26, 0x01	; 1
    fd62:	0d 93       	st	X+, r16
    fd64:	1c 93       	st	X, r17
    fd66:	12 97       	sbiw	r26, 0x02	; 2
    fd68:	85 e7       	ldi	r24, 0x75	; 117
    fd6a:	99 e0       	ldi	r25, 0x09	; 9
    fd6c:	82 83       	std	Z+2, r24	; 0x02
    fd6e:	93 83       	std	Z+3, r25	; 0x03
    fd70:	2c ec       	ldi	r18, 0xCC	; 204
    fd72:	37 e2       	ldi	r19, 0x27	; 39
    fd74:	24 83       	std	Z+4, r18	; 0x04
    fd76:	35 83       	std	Z+5, r19	; 0x05
    fd78:	86 82       	std	Z+6, r8	; 0x06
    fd7a:	97 82       	std	Z+7, r9	; 0x07
    fd7c:	a0 86       	std	Z+8, r10	; 0x08
    fd7e:	b1 86       	std	Z+9, r11	; 0x09
    fd80:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fd84:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fd86:	80 91 f7 26 	lds	r24, 0x26F7
    fd8a:	90 91 f8 26 	lds	r25, 0x26F8
    fd8e:	6d b7       	in	r22, 0x3d	; 61
    fd90:	7e b7       	in	r23, 0x3e	; 62
    fd92:	66 5f       	subi	r22, 0xF6	; 246
    fd94:	7f 4f       	sbci	r23, 0xFF	; 255
    fd96:	6d bf       	out	0x3d, r22	; 61
    fd98:	7e bf       	out	0x3e, r23	; 62
    fd9a:	b8 01       	movw	r22, r16
    fd9c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
    fda0:	00 d0       	rcall	.+0      	; 0xfda2 <arb_console+0xabc>
    fda2:	0f 92       	push	r0
    fda4:	ad b7       	in	r26, 0x3d	; 61
    fda6:	be b7       	in	r27, 0x3e	; 62
    fda8:	11 96       	adiw	r26, 0x01	; 1
    fdaa:	0d 93       	st	X+, r16
    fdac:	1c 93       	st	X, r17
    fdae:	12 97       	sbiw	r26, 0x02	; 2
    fdb0:	88 e9       	ldi	r24, 0x98	; 152
    fdb2:	99 e0       	ldi	r25, 0x09	; 9
    fdb4:	13 96       	adiw	r26, 0x03	; 3
    fdb6:	8d 93       	st	X+, r24
    fdb8:	9c 93       	st	X, r25
    fdba:	14 97       	sbiw	r26, 0x04	; 4
    fdbc:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fdc0:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fdc2:	80 91 f7 26 	lds	r24, 0x26F7
    fdc6:	90 91 f8 26 	lds	r25, 0x26F8
    fdca:	0f 90       	pop	r0
    fdcc:	0f 90       	pop	r0
    fdce:	0f 90       	pop	r0
    fdd0:	0f 90       	pop	r0
    fdd2:	b8 01       	movw	r22, r16
    fdd4:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Used RAM |               | %13d |\n\r"), i_ramUsed);
    fdd8:	ed b7       	in	r30, 0x3d	; 61
    fdda:	fe b7       	in	r31, 0x3e	; 62
    fddc:	38 97       	sbiw	r30, 0x08	; 8
    fdde:	ed bf       	out	0x3d, r30	; 61
    fde0:	fe bf       	out	0x3e, r31	; 62
    fde2:	31 96       	adiw	r30, 0x01	; 1
    fde4:	ad b7       	in	r26, 0x3d	; 61
    fde6:	be b7       	in	r27, 0x3e	; 62
    fde8:	11 96       	adiw	r26, 0x01	; 1
    fdea:	0d 93       	st	X+, r16
    fdec:	1c 93       	st	X, r17
    fdee:	12 97       	sbiw	r26, 0x02	; 2
    fdf0:	86 ec       	ldi	r24, 0xC6	; 198
    fdf2:	99 e0       	ldi	r25, 0x09	; 9
    fdf4:	82 83       	std	Z+2, r24	; 0x02
    fdf6:	93 83       	std	Z+3, r25	; 0x03
    fdf8:	44 82       	std	Z+4, r4	; 0x04
    fdfa:	55 82       	std	Z+5, r5	; 0x05
    fdfc:	66 82       	std	Z+6, r6	; 0x06
    fdfe:	77 82       	std	Z+7, r7	; 0x07
    fe00:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fe04:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fe06:	80 91 f7 26 	lds	r24, 0x26F7
    fe0a:	90 91 f8 26 	lds	r25, 0x26F8
    fe0e:	ed b7       	in	r30, 0x3d	; 61
    fe10:	fe b7       	in	r31, 0x3e	; 62
    fe12:	38 96       	adiw	r30, 0x08	; 8
    fe14:	ed bf       	out	0x3d, r30	; 61
    fe16:	fe bf       	out	0x3e, r31	; 62
    fe18:	b8 01       	movw	r22, r16
    fe1a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |               | %12d%% |\n\r"), i_percUsed);
    fe1e:	2d b7       	in	r18, 0x3d	; 61
    fe20:	3e b7       	in	r19, 0x3e	; 62
    fe22:	28 50       	subi	r18, 0x08	; 8
    fe24:	30 40       	sbci	r19, 0x00	; 0
    fe26:	2d bf       	out	0x3d, r18	; 61
    fe28:	3e bf       	out	0x3e, r19	; 62
    fe2a:	ed b7       	in	r30, 0x3d	; 61
    fe2c:	fe b7       	in	r31, 0x3e	; 62
    fe2e:	31 96       	adiw	r30, 0x01	; 1
    fe30:	ad b7       	in	r26, 0x3d	; 61
    fe32:	be b7       	in	r27, 0x3e	; 62
    fe34:	11 96       	adiw	r26, 0x01	; 1
    fe36:	0d 93       	st	X+, r16
    fe38:	1c 93       	st	X, r17
    fe3a:	12 97       	sbiw	r26, 0x02	; 2
    fe3c:	8b ee       	ldi	r24, 0xEB	; 235
    fe3e:	99 e0       	ldi	r25, 0x09	; 9
    fe40:	82 83       	std	Z+2, r24	; 0x02
    fe42:	93 83       	std	Z+3, r25	; 0x03
    fe44:	c4 82       	std	Z+4, r12	; 0x04
    fe46:	d5 82       	std	Z+5, r13	; 0x05
    fe48:	e6 82       	std	Z+6, r14	; 0x06
    fe4a:	f7 82       	std	Z+7, r15	; 0x07
    fe4c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fe50:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fe52:	80 91 f7 26 	lds	r24, 0x26F7
    fe56:	90 91 f8 26 	lds	r25, 0x26F8
    fe5a:	ed b7       	in	r30, 0x3d	; 61
    fe5c:	fe b7       	in	r31, 0x3e	; 62
    fe5e:	38 96       	adiw	r30, 0x08	; 8
    fe60:	ed bf       	out	0x3d, r30	; 61
    fe62:	fe bf       	out	0x3e, r31	; 62
    fe64:	b8 01       	movw	r22, r16
    fe66:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
    fe6a:	00 d0       	rcall	.+0      	; 0xfe6c <arb_console+0xb86>
    fe6c:	0f 92       	push	r0
    fe6e:	ad b7       	in	r26, 0x3d	; 61
    fe70:	be b7       	in	r27, 0x3e	; 62
    fe72:	11 96       	adiw	r26, 0x01	; 1
    fe74:	0d 93       	st	X+, r16
    fe76:	1c 93       	st	X, r17
    fe78:	12 97       	sbiw	r26, 0x02	; 2
    fe7a:	82 e1       	ldi	r24, 0x12	; 18
    fe7c:	9a e0       	ldi	r25, 0x0A	; 10
    fe7e:	13 96       	adiw	r26, 0x03	; 3
    fe80:	8d 93       	st	X+, r24
    fe82:	9c 93       	st	X, r25
    fe84:	14 97       	sbiw	r26, 0x04	; 4
    fe86:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fe8a:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fe8c:	80 91 f7 26 	lds	r24, 0x26F7
    fe90:	90 91 f8 26 	lds	r25, 0x26F8
    fe94:	0f 90       	pop	r0
    fe96:	0f 90       	pop	r0
    fe98:	0f 90       	pop	r0
    fe9a:	0f 90       	pop	r0
    fe9c:	b8 01       	movw	r22, r16
    fe9e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Free RAM |               | %13d |\n\r"), i_freeSize);
    fea2:	ed b7       	in	r30, 0x3d	; 61
    fea4:	fe b7       	in	r31, 0x3e	; 62
    fea6:	38 97       	sbiw	r30, 0x08	; 8
    fea8:	ed bf       	out	0x3d, r30	; 61
    feaa:	fe bf       	out	0x3e, r31	; 62
    feac:	31 96       	adiw	r30, 0x01	; 1
    feae:	ad b7       	in	r26, 0x3d	; 61
    feb0:	be b7       	in	r27, 0x3e	; 62
    feb2:	11 96       	adiw	r26, 0x01	; 1
    feb4:	0d 93       	st	X+, r16
    feb6:	1c 93       	st	X, r17
    feb8:	12 97       	sbiw	r26, 0x02	; 2
    feba:	80 e4       	ldi	r24, 0x40	; 64
    febc:	9a e0       	ldi	r25, 0x0A	; 10
    febe:	82 83       	std	Z+2, r24	; 0x02
    fec0:	93 83       	std	Z+3, r25	; 0x03
    fec2:	c6 51       	subi	r28, 0x16	; 22
    fec4:	de 4f       	sbci	r29, 0xFE	; 254
    fec6:	28 81       	ld	r18, Y
    fec8:	39 81       	ldd	r19, Y+1	; 0x01
    feca:	4a 81       	ldd	r20, Y+2	; 0x02
    fecc:	5b 81       	ldd	r21, Y+3	; 0x03
    fece:	ca 5e       	subi	r28, 0xEA	; 234
    fed0:	d1 40       	sbci	r29, 0x01	; 1
    fed2:	24 83       	std	Z+4, r18	; 0x04
    fed4:	35 83       	std	Z+5, r19	; 0x05
    fed6:	46 83       	std	Z+6, r20	; 0x06
    fed8:	57 83       	std	Z+7, r21	; 0x07
    feda:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    fede:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fee0:	80 91 f7 26 	lds	r24, 0x26F7
    fee4:	90 91 f8 26 	lds	r25, 0x26F8
    fee8:	6d b7       	in	r22, 0x3d	; 61
    feea:	7e b7       	in	r23, 0x3e	; 62
    feec:	68 5f       	subi	r22, 0xF8	; 248
    feee:	7f 4f       	sbci	r23, 0xFF	; 255
    fef0:	6d bf       	out	0x3d, r22	; 61
    fef2:	7e bf       	out	0x3e, r23	; 62
    fef4:	b8 01       	movw	r22, r16
    fef6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |               | %12d%% |\n\r"), (100 - i_percUsed));
    fefa:	8d b7       	in	r24, 0x3d	; 61
    fefc:	9e b7       	in	r25, 0x3e	; 62
    fefe:	08 97       	sbiw	r24, 0x08	; 8
    ff00:	8d bf       	out	0x3d, r24	; 61
    ff02:	9e bf       	out	0x3e, r25	; 62
    ff04:	ed b7       	in	r30, 0x3d	; 61
    ff06:	fe b7       	in	r31, 0x3e	; 62
    ff08:	31 96       	adiw	r30, 0x01	; 1
    ff0a:	ad b7       	in	r26, 0x3d	; 61
    ff0c:	be b7       	in	r27, 0x3e	; 62
    ff0e:	11 96       	adiw	r26, 0x01	; 1
    ff10:	0d 93       	st	X+, r16
    ff12:	1c 93       	st	X, r17
    ff14:	12 97       	sbiw	r26, 0x02	; 2
    ff16:	85 e6       	ldi	r24, 0x65	; 101
    ff18:	9a e0       	ldi	r25, 0x0A	; 10
    ff1a:	82 83       	std	Z+2, r24	; 0x02
    ff1c:	93 83       	std	Z+3, r25	; 0x03
    ff1e:	84 e6       	ldi	r24, 0x64	; 100
    ff20:	90 e0       	ldi	r25, 0x00	; 0
    ff22:	a0 e0       	ldi	r26, 0x00	; 0
    ff24:	b0 e0       	ldi	r27, 0x00	; 0
    ff26:	8c 19       	sub	r24, r12
    ff28:	9d 09       	sbc	r25, r13
    ff2a:	ae 09       	sbc	r26, r14
    ff2c:	bf 09       	sbc	r27, r15
    ff2e:	84 83       	std	Z+4, r24	; 0x04
    ff30:	95 83       	std	Z+5, r25	; 0x05
    ff32:	a6 83       	std	Z+6, r26	; 0x06
    ff34:	b7 83       	std	Z+7, r27	; 0x07
    ff36:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    ff3a:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ff3c:	80 91 f7 26 	lds	r24, 0x26F7
    ff40:	90 91 f8 26 	lds	r25, 0x26F8
    ff44:	ed b7       	in	r30, 0x3d	; 61
    ff46:	fe b7       	in	r31, 0x3e	; 62
    ff48:	38 96       	adiw	r30, 0x08	; 8
    ff4a:	ed bf       	out	0x3d, r30	; 61
    ff4c:	fe bf       	out	0x3e, r31	; 62
    ff4e:	b8 01       	movw	r22, r16
    ff50:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
    ff54:	00 d0       	rcall	.+0      	; 0xff56 <arb_console+0xc70>
    ff56:	0f 92       	push	r0
    ff58:	ad b7       	in	r26, 0x3d	; 61
    ff5a:	be b7       	in	r27, 0x3e	; 62
    ff5c:	11 96       	adiw	r26, 0x01	; 1
    ff5e:	0d 93       	st	X+, r16
    ff60:	1c 93       	st	X, r17
    ff62:	12 97       	sbiw	r26, 0x02	; 2
    ff64:	8c e8       	ldi	r24, 0x8C	; 140
    ff66:	9a e0       	ldi	r25, 0x0A	; 10
    ff68:	13 96       	adiw	r26, 0x03	; 3
    ff6a:	8d 93       	st	X+, r24
    ff6c:	9c 93       	st	X, r25
    ff6e:	14 97       	sbiw	r26, 0x04	; 4
    ff70:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    ff74:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ff76:	80 91 f7 26 	lds	r24, 0x26F7
    ff7a:	90 91 f8 26 	lds	r25, 0x26F8
    ff7e:	0f 90       	pop	r0
    ff80:	0f 90       	pop	r0
    ff82:	0f 90       	pop	r0
    ff84:	0f 90       	pop	r0
    ff86:	b8 01       	movw	r22, r16
    ff88:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Sys Load after 1 minute  | %12.1f%% |\n\r"), ((float)arb_getOneMinLoadingEst()*100.0f) / ARB_LOAD_EST_ONE);
    ff8c:	0e 94 74 93 	call	0x126e8	; 0x126e8 <arb_getOneMinLoadingEst>
    ff90:	ed b7       	in	r30, 0x3d	; 61
    ff92:	fe b7       	in	r31, 0x3e	; 62
    ff94:	38 97       	sbiw	r30, 0x08	; 8
    ff96:	ed bf       	out	0x3d, r30	; 61
    ff98:	fe bf       	out	0x3e, r31	; 62
    ff9a:	ed b6       	in	r14, 0x3d	; 61
    ff9c:	fe b6       	in	r15, 0x3e	; 62
    ff9e:	08 94       	sec
    ffa0:	e1 1c       	adc	r14, r1
    ffa2:	f1 1c       	adc	r15, r1
    ffa4:	01 83       	std	Z+1, r16	; 0x01
    ffa6:	12 83       	std	Z+2, r17	; 0x02
    ffa8:	2a eb       	ldi	r18, 0xBA	; 186
    ffaa:	3a e0       	ldi	r19, 0x0A	; 10
    ffac:	d7 01       	movw	r26, r14
    ffae:	12 96       	adiw	r26, 0x02	; 2
    ffb0:	2d 93       	st	X+, r18
    ffb2:	3c 93       	st	X, r19
    ffb4:	13 97       	sbiw	r26, 0x03	; 3
    ffb6:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
    ffba:	20 e0       	ldi	r18, 0x00	; 0
    ffbc:	30 e0       	ldi	r19, 0x00	; 0
    ffbe:	48 ec       	ldi	r20, 0xC8	; 200
    ffc0:	52 e4       	ldi	r21, 0x42	; 66
    ffc2:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    ffc6:	20 e0       	ldi	r18, 0x00	; 0
    ffc8:	30 e0       	ldi	r19, 0x00	; 0
    ffca:	40 e0       	ldi	r20, 0x00	; 0
    ffcc:	58 e3       	ldi	r21, 0x38	; 56
    ffce:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
    ffd2:	dc 01       	movw	r26, r24
    ffd4:	cb 01       	movw	r24, r22
    ffd6:	f7 01       	movw	r30, r14
    ffd8:	84 83       	std	Z+4, r24	; 0x04
    ffda:	95 83       	std	Z+5, r25	; 0x05
    ffdc:	a6 83       	std	Z+6, r26	; 0x06
    ffde:	b7 83       	std	Z+7, r27	; 0x07
    ffe0:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
    ffe4:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ffe6:	80 91 f7 26 	lds	r24, 0x26F7
    ffea:	90 91 f8 26 	lds	r25, 0x26F8
    ffee:	2d b7       	in	r18, 0x3d	; 61
    fff0:	3e b7       	in	r19, 0x3e	; 62
    fff2:	28 5f       	subi	r18, 0xF8	; 248
    fff4:	3f 4f       	sbci	r19, 0xFF	; 255
    fff6:	2d bf       	out	0x3d, r18	; 61
    fff8:	3e bf       	out	0x3e, r19	; 62
    fffa:	b8 01       	movw	r22, r16
    fffc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'-------------------------'---------------'\n\r"));
   10000:	00 d0       	rcall	.+0      	; 0x10002 <arb_console+0xd1c>
   10002:	0f 92       	push	r0
   10004:	ad b7       	in	r26, 0x3d	; 61
   10006:	be b7       	in	r27, 0x3e	; 62
   10008:	11 96       	adiw	r26, 0x01	; 1
   1000a:	0d 93       	st	X+, r16
   1000c:	1c 93       	st	X, r17
   1000e:	12 97       	sbiw	r26, 0x02	; 2
   10010:	83 ee       	ldi	r24, 0xE3	; 227
   10012:	9a e0       	ldi	r25, 0x0A	; 10
   10014:	13 96       	adiw	r26, 0x03	; 3
   10016:	8d 93       	st	X+, r24
   10018:	9c 93       	st	X, r25
   1001a:	14 97       	sbiw	r26, 0x04	; 4
   1001c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   10020:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   10022:	80 91 f7 26 	lds	r24, 0x26F7
   10026:	90 91 f8 26 	lds	r25, 0x26F8
   1002a:	0f 90       	pop	r0
   1002c:	0f 90       	pop	r0
   1002e:	0f 90       	pop	r0
   10030:	0f 90       	pop	r0
   10032:	b8 01       	movw	r22, r16
   10034:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Sys Load after 5 minutes | %12.1f%% |\n\r"), ((float)arb_getFiveMinLoadingEst()*100.0f) / ARB_LOAD_EST_ONE);
   10038:	0e 94 7d 93 	call	0x126fa	; 0x126fa <arb_getFiveMinLoadingEst>
   1003c:	ed b7       	in	r30, 0x3d	; 61
   1003e:	fe b7       	in	r31, 0x3e	; 62
   10040:	38 97       	sbiw	r30, 0x08	; 8
   10042:	ed bf       	out	0x3d, r30	; 61
   10044:	fe bf       	out	0x3e, r31	; 62
   10046:	ed b6       	in	r14, 0x3d	; 61
   10048:	fe b6       	in	r15, 0x3e	; 62
   1004a:	08 94       	sec
   1004c:	e1 1c       	adc	r14, r1
   1004e:	f1 1c       	adc	r15, r1
   10050:	01 83       	std	Z+1, r16	; 0x01
   10052:	12 83       	std	Z+2, r17	; 0x02
   10054:	21 e1       	ldi	r18, 0x11	; 17
   10056:	3b e0       	ldi	r19, 0x0B	; 11
   10058:	d7 01       	movw	r26, r14
   1005a:	12 96       	adiw	r26, 0x02	; 2
   1005c:	2d 93       	st	X+, r18
   1005e:	3c 93       	st	X, r19
   10060:	13 97       	sbiw	r26, 0x03	; 3
   10062:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
   10066:	20 e0       	ldi	r18, 0x00	; 0
   10068:	30 e0       	ldi	r19, 0x00	; 0
   1006a:	48 ec       	ldi	r20, 0xC8	; 200
   1006c:	52 e4       	ldi	r21, 0x42	; 66
   1006e:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
   10072:	20 e0       	ldi	r18, 0x00	; 0
   10074:	30 e0       	ldi	r19, 0x00	; 0
   10076:	40 e0       	ldi	r20, 0x00	; 0
   10078:	58 e3       	ldi	r21, 0x38	; 56
   1007a:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
   1007e:	dc 01       	movw	r26, r24
   10080:	cb 01       	movw	r24, r22
   10082:	f7 01       	movw	r30, r14
   10084:	84 83       	std	Z+4, r24	; 0x04
   10086:	95 83       	std	Z+5, r25	; 0x05
   10088:	a6 83       	std	Z+6, r26	; 0x06
   1008a:	b7 83       	std	Z+7, r27	; 0x07
   1008c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   10090:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   10092:	80 91 f7 26 	lds	r24, 0x26F7
   10096:	90 91 f8 26 	lds	r25, 0x26F8
   1009a:	2d b7       	in	r18, 0x3d	; 61
   1009c:	3e b7       	in	r19, 0x3e	; 62
   1009e:	28 5f       	subi	r18, 0xF8	; 248
   100a0:	3f 4f       	sbci	r19, 0xFF	; 255
   100a2:	2d bf       	out	0x3d, r18	; 61
   100a4:	3e bf       	out	0x3e, r19	; 62
   100a6:	b8 01       	movw	r22, r16
   100a8:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'-------------------------'---------------'\n\r"));
   100ac:	00 d0       	rcall	.+0      	; 0x100ae <arb_console+0xdc8>
   100ae:	0f 92       	push	r0
   100b0:	ad b7       	in	r26, 0x3d	; 61
   100b2:	be b7       	in	r27, 0x3e	; 62
   100b4:	11 96       	adiw	r26, 0x01	; 1
   100b6:	0d 93       	st	X+, r16
   100b8:	1c 93       	st	X, r17
   100ba:	12 97       	sbiw	r26, 0x02	; 2
   100bc:	8a e3       	ldi	r24, 0x3A	; 58
   100be:	9b e0       	ldi	r25, 0x0B	; 11
   100c0:	00 c2       	rjmp	.+1024   	; 0x104c2 <arb_console+0x11dc>
         /*------------------------------------------------------------------*
          * Display the memory footprint of the system.
          *------------------------------------------------------------------*/
         arb_displaySystemStatistics( ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("ls")) == 0)
   100c2:	ce 01       	movw	r24, r28
   100c4:	85 5b       	subi	r24, 0xB5	; 181
   100c6:	9f 4f       	sbci	r25, 0xFF	; 255
   100c8:	6c e4       	ldi	r22, 0x4C	; 76
   100ca:	72 e0       	ldi	r23, 0x02	; 2
   100cc:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   100d0:	00 97       	sbiw	r24, 0x00	; 0
   100d2:	71 f4       	brne	.+28     	; 0x100f0 <arb_console+0xe0a>
      && (t_tokHndl.c_numTokens == 1))
   100d4:	c5 54       	subi	r28, 0x45	; 69
   100d6:	df 4f       	sbci	r29, 0xFF	; 255
   100d8:	88 81       	ld	r24, Y
   100da:	cb 5b       	subi	r28, 0xBB	; 187
   100dc:	d0 40       	sbci	r29, 0x00	; 0
   100de:	81 30       	cpi	r24, 0x01	; 1
   100e0:	39 f4       	brne	.+14     	; 0x100f0 <arb_console+0xe0a>
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   100e2:	80 91 f9 26 	lds	r24, 0x26F9
   100e6:	90 91 fa 26 	lds	r25, 0x26FA
   100ea:	65 e0       	ldi	r22, 0x05	; 5
   100ec:	70 e0       	ldi	r23, 0x00	; 0
   100ee:	23 c0       	rjmp	.+70     	; 0x10136 <arb_console+0xe50>
                    SD_LS,
                    0);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("rm")) == 0)
   100f0:	ce 01       	movw	r24, r28
   100f2:	85 5b       	subi	r24, 0xB5	; 181
   100f4:	9f 4f       	sbci	r25, 0xFF	; 255
   100f6:	6f e4       	ldi	r22, 0x4F	; 79
   100f8:	72 e0       	ldi	r23, 0x02	; 2
   100fa:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   100fe:	00 97       	sbiw	r24, 0x00	; 0
   10100:	51 f5       	brne	.+84     	; 0x10156 <arb_console+0xe70>
      && (t_tokHndl.c_numTokens == 2))
   10102:	c5 54       	subi	r28, 0x45	; 69
   10104:	df 4f       	sbci	r29, 0xFF	; 255
   10106:	88 81       	ld	r24, Y
   10108:	cb 5b       	subi	r28, 0xBB	; 187
   1010a:	d0 40       	sbci	r29, 0x00	; 0
   1010c:	82 30       	cpi	r24, 0x02	; 2
   1010e:	19 f5       	brne	.+70     	; 0x10156 <arb_console+0xe70>
      {
         if( strcasecmp_P( (char *)t_tokHndl.ac_tok[1], PSTR("-r")) == 0)
   10110:	0b e4       	ldi	r16, 0x4B	; 75
   10112:	10 e0       	ldi	r17, 0x00	; 0
   10114:	0c 0f       	add	r16, r28
   10116:	1d 1f       	adc	r17, r29
   10118:	00 5f       	subi	r16, 0xF0	; 240
   1011a:	1f 4f       	sbci	r17, 0xFF	; 255
   1011c:	c8 01       	movw	r24, r16
   1011e:	62 e5       	ldi	r22, 0x52	; 82
   10120:	72 e0       	ldi	r23, 0x02	; 2
   10122:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   10126:	00 97       	sbiw	r24, 0x00	; 0
   10128:	61 f4       	brne	.+24     	; 0x10142 <arb_console+0xe5c>
         {
            /*---------------------------------------------------------------*
             * Remove all the files within, and the current working directory
             * itself.
             *---------------------------------------------------------------*/
            arb_ioctl( gt_conObject.t_sdHndl,
   1012a:	80 91 f9 26 	lds	r24, 0x26F9
   1012e:	90 91 fa 26 	lds	r25, 0x26FA
   10132:	61 e0       	ldi	r22, 0x01	; 1
   10134:	70 e0       	ldi	r23, 0x00	; 0
   10136:	20 e0       	ldi	r18, 0x00	; 0
   10138:	30 e0       	ldi	r19, 0x00	; 0
   1013a:	a9 01       	movw	r20, r18
   1013c:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
   10140:	d2 c1       	rjmp	.+932    	; 0x104e6 <arb_console+0x1200>
         else
         {
            /*---------------------------------------------------------------*
             * Remove the file specified by 't_tokHndl.ac_tok[1]'.
             *---------------------------------------------------------------*/
            arb_ioctl( gt_conObject.t_sdHndl,
   10142:	80 91 f9 26 	lds	r24, 0x26F9
   10146:	90 91 fa 26 	lds	r25, 0x26FA
   1014a:	98 01       	movw	r18, r16
   1014c:	40 e0       	ldi	r20, 0x00	; 0
   1014e:	50 e0       	ldi	r21, 0x00	; 0
   10150:	68 e0       	ldi	r22, 0x08	; 8
   10152:	70 e0       	ldi	r23, 0x00	; 0
   10154:	f3 cf       	rjmp	.-26     	; 0x1013c <arb_console+0xe56>
                       SD_RM,
                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
         }

      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("rmdir")) == 0)
   10156:	ce 01       	movw	r24, r28
   10158:	85 5b       	subi	r24, 0xB5	; 181
   1015a:	9f 4f       	sbci	r25, 0xFF	; 255
   1015c:	65 e5       	ldi	r22, 0x55	; 85
   1015e:	72 e0       	ldi	r23, 0x02	; 2
   10160:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   10164:	00 97       	sbiw	r24, 0x00	; 0
   10166:	b1 f4       	brne	.+44     	; 0x10194 <arb_console+0xeae>
      && (t_tokHndl.c_numTokens == 2))
   10168:	c5 54       	subi	r28, 0x45	; 69
   1016a:	df 4f       	sbci	r29, 0xFF	; 255
   1016c:	88 81       	ld	r24, Y
   1016e:	cb 5b       	subi	r28, 0xBB	; 187
   10170:	d0 40       	sbci	r29, 0x00	; 0
   10172:	82 30       	cpi	r24, 0x02	; 2
   10174:	79 f4       	brne	.+30     	; 0x10194 <arb_console+0xeae>
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   10176:	80 91 f9 26 	lds	r24, 0x26F9
   1017a:	90 91 fa 26 	lds	r25, 0x26FA
   1017e:	67 e0       	ldi	r22, 0x07	; 7
   10180:	70 e0       	ldi	r23, 0x00	; 0
   10182:	c2 51       	subi	r28, 0x12	; 18
   10184:	de 4f       	sbci	r29, 0xFE	; 254
   10186:	28 81       	ld	r18, Y
   10188:	39 81       	ldd	r19, Y+1	; 0x01
   1018a:	4a 81       	ldd	r20, Y+2	; 0x02
   1018c:	5b 81       	ldd	r21, Y+3	; 0x03
   1018e:	ce 5e       	subi	r28, 0xEE	; 238
   10190:	d1 40       	sbci	r29, 0x01	; 1
   10192:	d4 cf       	rjmp	.-88     	; 0x1013c <arb_console+0xe56>
                    SD_RMDIR,
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("mkdir")) == 0)
   10194:	ce 01       	movw	r24, r28
   10196:	85 5b       	subi	r24, 0xB5	; 181
   10198:	9f 4f       	sbci	r25, 0xFF	; 255
   1019a:	6b e5       	ldi	r22, 0x5B	; 91
   1019c:	72 e0       	ldi	r23, 0x02	; 2
   1019e:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   101a2:	00 97       	sbiw	r24, 0x00	; 0
   101a4:	b1 f4       	brne	.+44     	; 0x101d2 <arb_console+0xeec>
      && (t_tokHndl.c_numTokens == 2))
   101a6:	c5 54       	subi	r28, 0x45	; 69
   101a8:	df 4f       	sbci	r29, 0xFF	; 255
   101aa:	88 81       	ld	r24, Y
   101ac:	cb 5b       	subi	r28, 0xBB	; 187
   101ae:	d0 40       	sbci	r29, 0x00	; 0
   101b0:	82 30       	cpi	r24, 0x02	; 2
   101b2:	79 f4       	brne	.+30     	; 0x101d2 <arb_console+0xeec>
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   101b4:	80 91 f9 26 	lds	r24, 0x26F9
   101b8:	90 91 fa 26 	lds	r25, 0x26FA
                    SD_MKDIR,
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
   101bc:	2b e4       	ldi	r18, 0x4B	; 75
   101be:	30 e0       	ldi	r19, 0x00	; 0
   101c0:	2c 0f       	add	r18, r28
   101c2:	3d 1f       	adc	r19, r29
   101c4:	20 5f       	subi	r18, 0xF0	; 240
   101c6:	3f 4f       	sbci	r19, 0xFF	; 255
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("mkdir")) == 0)
      && (t_tokHndl.c_numTokens == 2))
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   101c8:	40 e0       	ldi	r20, 0x00	; 0
   101ca:	50 e0       	ldi	r21, 0x00	; 0
   101cc:	66 e0       	ldi	r22, 0x06	; 6
   101ce:	70 e0       	ldi	r23, 0x00	; 0
   101d0:	b5 cf       	rjmp	.-150    	; 0x1013c <arb_console+0xe56>
                    SD_MKDIR,
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("cd")) == 0)
   101d2:	ce 01       	movw	r24, r28
   101d4:	85 5b       	subi	r24, 0xB5	; 181
   101d6:	9f 4f       	sbci	r25, 0xFF	; 255
   101d8:	61 e6       	ldi	r22, 0x61	; 97
   101da:	72 e0       	ldi	r23, 0x02	; 2
   101dc:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   101e0:	00 97       	sbiw	r24, 0x00	; 0
   101e2:	09 f0       	breq	.+2      	; 0x101e6 <arb_console+0xf00>
   101e4:	4d c0       	rjmp	.+154    	; 0x10280 <arb_console+0xf9a>
      && (t_tokHndl.c_numTokens == 2))
   101e6:	c5 54       	subi	r28, 0x45	; 69
   101e8:	df 4f       	sbci	r29, 0xFF	; 255
   101ea:	88 81       	ld	r24, Y
   101ec:	cb 5b       	subi	r28, 0xBB	; 187
   101ee:	d0 40       	sbci	r29, 0x00	; 0
   101f0:	82 30       	cpi	r24, 0x02	; 2
   101f2:	09 f0       	breq	.+2      	; 0x101f6 <arb_console+0xf10>
   101f4:	45 c0       	rjmp	.+138    	; 0x10280 <arb_console+0xf9a>
      {
         t_sdError t_err;

         t_err = (t_sdError)arb_ioctl( gt_conObject.t_sdHndl,
   101f6:	80 91 f9 26 	lds	r24, 0x26F9
   101fa:	90 91 fa 26 	lds	r25, 0x26FA
   101fe:	69 e0       	ldi	r22, 0x09	; 9
   10200:	70 e0       	ldi	r23, 0x00	; 0
   10202:	c2 51       	subi	r28, 0x12	; 18
   10204:	de 4f       	sbci	r29, 0xFE	; 254
   10206:	28 81       	ld	r18, Y
   10208:	39 81       	ldd	r19, Y+1	; 0x01
   1020a:	4a 81       	ldd	r20, Y+2	; 0x02
   1020c:	5b 81       	ldd	r21, Y+3	; 0x03
   1020e:	ce 5e       	subi	r28, 0xEE	; 238
   10210:	d1 40       	sbci	r29, 0x01	; 1
   10212:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));

         /*------------------------------------------------------------------*
          * If directory change accepted, update the prompt.
          *------------------------------------------------------------------*/
         if( t_err == SD_PASSED)
   10216:	66 23       	and	r22, r22
   10218:	09 f0       	breq	.+2      	; 0x1021c <arb_console+0xf36>
   1021a:	65 c1       	rjmp	.+714    	; 0x104e6 <arb_console+0x1200>
         {
            arb_ioctl( gt_conObject.t_consoleHndl,
   1021c:	80 91 f7 26 	lds	r24, 0x26F7
   10220:	90 91 f8 26 	lds	r25, 0x26F8
   10224:	65 e0       	ldi	r22, 0x05	; 5
   10226:	70 e0       	ldi	r23, 0x00	; 0
   10228:	c2 51       	subi	r28, 0x12	; 18
   1022a:	de 4f       	sbci	r29, 0xFE	; 254
   1022c:	28 81       	ld	r18, Y
   1022e:	39 81       	ldd	r19, Y+1	; 0x01
   10230:	4a 81       	ldd	r20, Y+2	; 0x02
   10232:	5b 81       	ldd	r21, Y+3	; 0x03
   10234:	ce 5e       	subi	r28, 0xEE	; 238
   10236:	d1 40       	sbci	r29, 0x01	; 1
   10238:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                       CONSOLE_SET_PROMPT,
                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));

            if( strcasecmp_P( (char *)t_tokHndl.ac_tok[1], PSTR("/")) == 0)
   1023c:	ce 50       	subi	r28, 0x0E	; 14
   1023e:	de 4f       	sbci	r29, 0xFE	; 254
   10240:	88 81       	ld	r24, Y
   10242:	99 81       	ldd	r25, Y+1	; 0x01
   10244:	c2 5f       	subi	r28, 0xF2	; 242
   10246:	d1 40       	sbci	r29, 0x01	; 1
   10248:	64 e6       	ldi	r22, 0x64	; 100
   1024a:	72 e0       	ldi	r23, 0x02	; 2
   1024c:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   10250:	00 97       	sbiw	r24, 0x00	; 0
   10252:	59 f4       	brne	.+22     	; 0x1026a <arb_console+0xf84>
            {
               arb_ioctl( gt_conObject.t_consoleHndl,
   10254:	80 91 f7 26 	lds	r24, 0x26F7
   10258:	90 91 f8 26 	lds	r25, 0x26F8
   1025c:	68 e0       	ldi	r22, 0x08	; 8
   1025e:	70 e0       	ldi	r23, 0x00	; 0
   10260:	22 e3       	ldi	r18, 0x32	; 50
   10262:	30 e0       	ldi	r19, 0x00	; 0
   10264:	40 e0       	ldi	r20, 0x00	; 0
   10266:	50 e0       	ldi	r21, 0x00	; 0
   10268:	69 cf       	rjmp	.-302    	; 0x1013c <arb_console+0xe56>
                          CONSOLE_SET_PROMPT_COLOR,
                          CONSOLE_GREEN);
            }
            else
            {
               arb_ioctl( gt_conObject.t_consoleHndl,
   1026a:	80 91 f7 26 	lds	r24, 0x26F7
   1026e:	90 91 f8 26 	lds	r25, 0x26F8
   10272:	68 e0       	ldi	r22, 0x08	; 8
   10274:	70 e0       	ldi	r23, 0x00	; 0
   10276:	21 e3       	ldi	r18, 0x31	; 49
   10278:	30 e0       	ldi	r19, 0x00	; 0
   1027a:	40 e0       	ldi	r20, 0x00	; 0
   1027c:	50 e0       	ldi	r21, 0x00	; 0
   1027e:	5e cf       	rjmp	.-324    	; 0x1013c <arb_console+0xe56>
                          CONSOLE_SET_PROMPT_COLOR,
                          CONSOLE_RED);
            }
         }/*End if( t_err == SD_PASSED)*/
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("head")) == 0)
   10280:	ce 01       	movw	r24, r28
   10282:	85 5b       	subi	r24, 0xB5	; 181
   10284:	9f 4f       	sbci	r25, 0xFF	; 255
   10286:	66 e6       	ldi	r22, 0x66	; 102
   10288:	72 e0       	ldi	r23, 0x02	; 2
   1028a:	0e 94 c1 b6 	call	0x16d82	; 0x16d82 <strcasecmp_P>
   1028e:	00 97       	sbiw	r24, 0x00	; 0
   10290:	09 f0       	breq	.+2      	; 0x10294 <arb_console+0xfae>
   10292:	f9 c0       	rjmp	.+498    	; 0x10486 <arb_console+0x11a0>
      && (t_tokHndl.c_numTokens == 2))
   10294:	c5 54       	subi	r28, 0x45	; 69
   10296:	df 4f       	sbci	r29, 0xFF	; 255
   10298:	88 81       	ld	r24, Y
   1029a:	cb 5b       	subi	r28, 0xBB	; 187
   1029c:	d0 40       	sbci	r29, 0x00	; 0
   1029e:	82 30       	cpi	r24, 0x02	; 2
   102a0:	09 f0       	breq	.+2      	; 0x102a4 <arb_console+0xfbe>
   102a2:	f1 c0       	rjmp	.+482    	; 0x10486 <arb_console+0x11a0>
   int16_t s_size;
   uint8_t c_lineCount;
   int32_t i_fileSize;
   char *pc_newLinePos;

   ac_data[20] = '\0';
   102a4:	19 8e       	std	Y+25, r1	; 0x19

   pc_devName = arb_getDevName( gt_conObject.t_sdHndl);
   102a6:	80 91 f9 26 	lds	r24, 0x26F9
   102aa:	90 91 fa 26 	lds	r25, 0x26FA
   102ae:	0e 94 4c 84 	call	0x10898	; 0x10898 <arb_getDevName>

   /*------------------------------------------------------------------------*
    * Concatenate the hard drive device name with the file name so that
    * 'arb_device.c' knows where to look.
    *------------------------------------------------------------------------*/
   s_numBytes = sprintf( (char *)pc_buff,
   102b2:	ed b7       	in	r30, 0x3d	; 61
   102b4:	fe b7       	in	r31, 0x3e	; 62
   102b6:	38 97       	sbiw	r30, 0x08	; 8
   102b8:	ed bf       	out	0x3d, r30	; 61
   102ba:	fe bf       	out	0x3e, r31	; 62
   102bc:	31 96       	adiw	r30, 0x01	; 1
         }/*End if( t_err == SD_PASSED)*/
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("head")) == 0)
      && (t_tokHndl.c_numTokens == 2))
      {
         arb_head( ac_buff,
   102be:	ac eb       	ldi	r26, 0xBC	; 188
   102c0:	ea 2e       	mov	r14, r26
   102c2:	f1 2c       	mov	r15, r1
   102c4:	ec 0e       	add	r14, r28
   102c6:	fd 1e       	adc	r15, r29

   /*------------------------------------------------------------------------*
    * Concatenate the hard drive device name with the file name so that
    * 'arb_device.c' knows where to look.
    *------------------------------------------------------------------------*/
   s_numBytes = sprintf( (char *)pc_buff,
   102c8:	ad b7       	in	r26, 0x3d	; 61
   102ca:	be b7       	in	r27, 0x3e	; 62
   102cc:	11 96       	adiw	r26, 0x01	; 1
   102ce:	ed 92       	st	X+, r14
   102d0:	fc 92       	st	X, r15
   102d2:	12 97       	sbiw	r26, 0x02	; 2
   102d4:	29 e0       	ldi	r18, 0x09	; 9
   102d6:	32 e2       	ldi	r19, 0x22	; 34
   102d8:	22 83       	std	Z+2, r18	; 0x02
   102da:	33 83       	std	Z+3, r19	; 0x03
   102dc:	84 83       	std	Z+4, r24	; 0x04
   102de:	95 83       	std	Z+5, r25	; 0x05
   102e0:	8b e4       	ldi	r24, 0x4B	; 75
   102e2:	90 e0       	ldi	r25, 0x00	; 0
   102e4:	8c 0f       	add	r24, r28
   102e6:	9d 1f       	adc	r25, r29
   102e8:	40 96       	adiw	r24, 0x10	; 16
   102ea:	86 83       	std	Z+6, r24	; 0x06
   102ec:	97 83       	std	Z+7, r25	; 0x07
   102ee:	0e 94 a4 b7 	call	0x16f48	; 0x16f48 <sprintf>
                          (char *)&pt_tokHndl->ac_tok[1]);

   /*------------------------------------------------------------------------*
    * Open the file for reading
    *------------------------------------------------------------------------*/
   t_fileHndl = arb_open( (char *)pc_buff,
   102f2:	ed b7       	in	r30, 0x3d	; 61
   102f4:	fe b7       	in	r31, 0x3e	; 62
   102f6:	38 96       	adiw	r30, 0x08	; 8
   102f8:	ed bf       	out	0x3d, r30	; 61
   102fa:	fe bf       	out	0x3e, r31	; 62
   102fc:	c7 01       	movw	r24, r14
   102fe:	61 e0       	ldi	r22, 0x01	; 1
   10300:	0e 94 25 83 	call	0x1064a	; 0x1064a <arb_open>
   10304:	89 83       	std	Y+1, r24	; 0x01
   10306:	9a 83       	std	Y+2, r25	; 0x02
                          ARB_O_READ);

   if( t_fileHndl > 0)
   10308:	89 81       	ldd	r24, Y+1	; 0x01
   1030a:	9a 81       	ldd	r25, Y+2	; 0x02
   1030c:	18 16       	cp	r1, r24
   1030e:	19 06       	cpc	r1, r25
   10310:	0c f0       	brlt	.+2      	; 0x10314 <arb_console+0x102e>
   10312:	e9 c0       	rjmp	.+466    	; 0x104e6 <arb_console+0x1200>
   {

      i_fileSize = arb_ioctl( t_fileHndl,
   10314:	89 81       	ldd	r24, Y+1	; 0x01
   10316:	9a 81       	ldd	r25, Y+2	; 0x02
   10318:	6a e0       	ldi	r22, 0x0A	; 10
   1031a:	70 e0       	ldi	r23, 0x00	; 0
   1031c:	20 e0       	ldi	r18, 0x00	; 0
   1031e:	30 e0       	ldi	r19, 0x00	; 0
   10320:	a9 01       	movw	r20, r18
   10322:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
   10326:	4b 01       	movw	r8, r22
   10328:	5c 01       	movw	r10, r24
                              SD_GET_SIZE,
                              0);

      c_lineCount = 0;
   1032a:	00 e0       	ldi	r16, 0x00	; 0

         /*------------------------------------------------------------------*
          * Read 'PRINTF_NUM_LINES_TO_PRINT' bytes from the file...
          *------------------------------------------------------------------*/
         s_numBytes = arb_read( t_fileHndl,
                                ac_data,
   1032c:	e5 e0       	ldi	r30, 0x05	; 5
   1032e:	ce 2e       	mov	r12, r30
   10330:	d1 2c       	mov	r13, r1
   10332:	cc 0e       	add	r12, r28
   10334:	dd 1e       	adc	r13, r29
         }/*End if( t_err == SD_PASSED)*/
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("head")) == 0)
      && (t_tokHndl.c_numTokens == 2))
      {
         arb_head( ac_buff,
   10336:	c6 51       	subi	r28, 0x16	; 22
   10338:	de 4f       	sbci	r29, 0xFE	; 254
   1033a:	e8 82       	st	Y, r14
   1033c:	ca 5e       	subi	r28, 0xEA	; 234
   1033e:	d1 40       	sbci	r29, 0x01	; 1
   10340:	cc 5f       	subi	r28, 0xFC	; 252
   10342:	dd 4f       	sbci	r29, 0xFD	; 253
   10344:	f8 82       	st	Y, r15
   10346:	c4 50       	subi	r28, 0x04	; 4
   10348:	d2 40       	sbci	r29, 0x02	; 2
      {

         /*------------------------------------------------------------------*
          * Read 'PRINTF_NUM_LINES_TO_PRINT' bytes from the file...
          *------------------------------------------------------------------*/
         s_numBytes = arb_read( t_fileHndl,
   1034a:	89 81       	ldd	r24, Y+1	; 0x01
   1034c:	9a 81       	ldd	r25, Y+2	; 0x02
   1034e:	b6 01       	movw	r22, r12
   10350:	44 e1       	ldi	r20, 0x14	; 20
   10352:	50 e0       	ldi	r21, 0x00	; 0
   10354:	0e 94 ee 83 	call	0x107dc	; 0x107dc <arb_read>
   10358:	7c 01       	movw	r14, r24
         i_fileSize = i_fileSize - s_numBytes;

         /*------------------------------------------------------------------*
          * Find first occurrence of new line character.
          *------------------------------------------------------------------*/
         pc_newLinePos = strchr( (char *)ac_data, '\n');
   1035a:	c6 01       	movw	r24, r12
   1035c:	6a e0       	ldi	r22, 0x0A	; 10
   1035e:	70 e0       	ldi	r23, 0x00	; 0
   10360:	0e 94 14 b7 	call	0x16e28	; 0x16e28 <strchr>
   10364:	3c 01       	movw	r6, r24

         /*------------------------------------------------------------------*
          * Does the buffer contain a new line?
          *------------------------------------------------------------------*/
         if( pc_newLinePos != NULL) /*Yes*/
   10366:	00 97       	sbiw	r24, 0x00	; 0
   10368:	09 f4       	brne	.+2      	; 0x1036c <arb_console+0x1086>
   1036a:	6a c0       	rjmp	.+212    	; 0x10440 <arb_console+0x115a>
         {

            /*---------------------------------------------------------------*
             * Have 'PRINTF_NUM_LINES_TO_PRINT' lines been displayed?
             *---------------------------------------------------------------*/
            c_lineCount++;
   1036c:	0f 5f       	subi	r16, 0xFF	; 255
            if( c_lineCount == PRINTF_NUM_LINES_TO_PRINT) /*Yes*/
   1036e:	04 31       	cpi	r16, 0x14	; 20
   10370:	09 f0       	breq	.+2      	; 0x10374 <arb_console+0x108e>
   10372:	66 c0       	rjmp	.+204    	; 0x10440 <arb_console+0x115a>
            {

               /*------------------------------------------------------------*
                * Print all the characters up to and including the new line.
                *------------------------------------------------------------*/
               s_numBytesToNewLine = (int16_t)pc_newLinePos -
   10374:	8c 01       	movw	r16, r24
   10376:	0c 19       	sub	r16, r12
   10378:	1d 09       	sbc	r17, r13
               (int16_t)&ac_data[0];

               if( s_numBytesToNewLine > 0)
   1037a:	10 16       	cp	r1, r16
   1037c:	11 06       	cpc	r1, r17
   1037e:	54 f4       	brge	.+20     	; 0x10394 <arb_console+0x10ae>
               {
                  arb_write( gt_conObject.t_consoleHndl,
   10380:	80 91 f7 26 	lds	r24, 0x26F7
   10384:	90 91 f8 26 	lds	r25, 0x26F8
                             ac_data,
                             s_numBytesToNewLine+1);
   10388:	a8 01       	movw	r20, r16
   1038a:	4f 5f       	subi	r20, 0xFF	; 255
   1038c:	5f 4f       	sbci	r21, 0xFF	; 255
               s_numBytesToNewLine = (int16_t)pc_newLinePos -
               (int16_t)&ac_data[0];

               if( s_numBytesToNewLine > 0)
               {
                  arb_write( gt_conObject.t_consoleHndl,
   1038e:	b6 01       	movw	r22, r12
   10390:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                             ac_data,
                             s_numBytesToNewLine+1);

               }/*End if( s_numBytes > 0)*/

               s_size = sprintf_P( (char *)pc_buff, PSTR("\r\nPress 'Enter' to resume, 'q' to stop.\n\r"));
   10394:	00 d0       	rcall	.+0      	; 0x10396 <arb_console+0x10b0>
   10396:	0f 92       	push	r0
   10398:	c6 51       	subi	r28, 0x16	; 22
   1039a:	de 4f       	sbci	r29, 0xFE	; 254
   1039c:	e8 81       	ld	r30, Y
   1039e:	ca 5e       	subi	r28, 0xEA	; 234
   103a0:	d1 40       	sbci	r29, 0x01	; 1
   103a2:	ad b7       	in	r26, 0x3d	; 61
   103a4:	be b7       	in	r27, 0x3e	; 62
   103a6:	11 96       	adiw	r26, 0x01	; 1
   103a8:	ec 93       	st	X, r30
   103aa:	11 97       	sbiw	r26, 0x01	; 1
   103ac:	cc 5f       	subi	r28, 0xFC	; 252
   103ae:	dd 4f       	sbci	r29, 0xFD	; 253
   103b0:	f8 81       	ld	r31, Y
   103b2:	c4 50       	subi	r28, 0x04	; 4
   103b4:	d2 40       	sbci	r29, 0x02	; 2
   103b6:	12 96       	adiw	r26, 0x02	; 2
   103b8:	fc 93       	st	X, r31
   103ba:	12 97       	sbiw	r26, 0x02	; 2
   103bc:	28 e6       	ldi	r18, 0x68	; 104
   103be:	3b e0       	ldi	r19, 0x0B	; 11
   103c0:	13 96       	adiw	r26, 0x03	; 3
   103c2:	2d 93       	st	X+, r18
   103c4:	3c 93       	st	X, r19
   103c6:	14 97       	sbiw	r26, 0x04	; 4
   103c8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   103cc:	ac 01       	movw	r20, r24
               arb_write( gt_conObject.t_consoleHndl,
   103ce:	80 91 f7 26 	lds	r24, 0x26F7
   103d2:	90 91 f8 26 	lds	r25, 0x26F8
   103d6:	0f 90       	pop	r0
   103d8:	0f 90       	pop	r0
   103da:	0f 90       	pop	r0
   103dc:	0f 90       	pop	r0
   103de:	c6 51       	subi	r28, 0x16	; 22
   103e0:	de 4f       	sbci	r29, 0xFE	; 254
   103e2:	68 81       	ld	r22, Y
   103e4:	ca 5e       	subi	r28, 0xEA	; 234
   103e6:	d1 40       	sbci	r29, 0x01	; 1
   103e8:	cc 5f       	subi	r28, 0xFC	; 252
   103ea:	dd 4f       	sbci	r29, 0xFD	; 253
   103ec:	78 81       	ld	r23, Y
   103ee:	c4 50       	subi	r28, 0x04	; 4
   103f0:	d2 40       	sbci	r29, 0x02	; 2
   103f2:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                          s_size);

               /*------------------------------------------------------------*
                * Block until user responds to message.
                *------------------------------------------------------------*/
               arb_ioctl( gt_conObject.t_consoleHndl,
   103f6:	80 91 f7 26 	lds	r24, 0x26F7
   103fa:	90 91 f8 26 	lds	r25, 0x26F8
   103fe:	63 e0       	ldi	r22, 0x03	; 3
   10400:	70 e0       	ldi	r23, 0x00	; 0
   10402:	a2 01       	movw	r20, r4
   10404:	91 01       	movw	r18, r2
   10406:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                          (uint32_t)((uint16_t)pt_tokHndl));

               /*------------------------------------------------------------*
                * Quit reading the file?
                *------------------------------------------------------------*/
               if( strcasecmp( (char *)&pt_tokHndl[0], "q") == 0) /*Yes*/
   1040a:	ce 01       	movw	r24, r28
   1040c:	85 5b       	subi	r24, 0xB5	; 181
   1040e:	9f 4f       	sbci	r25, 0xFF	; 255
   10410:	6f e0       	ldi	r22, 0x0F	; 15
   10412:	72 e2       	ldi	r23, 0x22	; 34
   10414:	0e 94 01 b7 	call	0x16e02	; 0x16e02 <strcasecmp>
   10418:	00 97       	sbiw	r24, 0x00	; 0
   1041a:	81 f1       	breq	.+96     	; 0x1047c <arb_console+0x1196>

               /*------------------------------------------------------------*
                * Print the rest of the data in the buffer that occurred after
                * the position of the new line character.
                *------------------------------------------------------------*/
               s_numBytes = s_numBytes - (s_numBytesToNewLine + 1);
   1041c:	a8 01       	movw	r20, r16
   1041e:	40 95       	com	r20
   10420:	50 95       	com	r21
   10422:	4e 0d       	add	r20, r14
   10424:	5f 1d       	adc	r21, r15
               if( s_numBytes > 0)
   10426:	14 16       	cp	r1, r20
   10428:	15 06       	cpc	r1, r21
   1042a:	c4 f4       	brge	.+48     	; 0x1045c <arb_console+0x1176>
               {
                  arb_write( gt_conObject.t_consoleHndl,
   1042c:	80 91 f7 26 	lds	r24, 0x26F7
   10430:	90 91 f8 26 	lds	r25, 0x26F8
   10434:	b3 01       	movw	r22, r6
   10436:	6f 5f       	subi	r22, 0xFF	; 255
   10438:	7f 4f       	sbci	r23, 0xFF	; 255
   1043a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
   1043e:	0e c0       	rjmp	.+28     	; 0x1045c <arb_console+0x1176>

         /*------------------------------------------------------------------*
          * If c_lineCount = 'PRINTF_NUM_LINES_TO_PRINT' then the data
          * contained in the buffer 'ac_data' has already been displayed.
          *------------------------------------------------------------------*/
         if( c_lineCount < PRINTF_NUM_LINES_TO_PRINT)
   10440:	04 31       	cpi	r16, 0x14	; 20
   10442:	60 f4       	brcc	.+24     	; 0x1045c <arb_console+0x1176>
         {
            if( s_numBytes > 0)
   10444:	1e 14       	cp	r1, r14
   10446:	1f 04       	cpc	r1, r15
   10448:	54 f4       	brge	.+20     	; 0x1045e <arb_console+0x1178>
            {
               arb_write( gt_conObject.t_consoleHndl,
   1044a:	80 91 f7 26 	lds	r24, 0x26F7
   1044e:	90 91 f8 26 	lds	r25, 0x26F8
   10452:	b6 01       	movw	r22, r12
   10454:	a7 01       	movw	r20, r14
   10456:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
   1045a:	01 c0       	rjmp	.+2      	; 0x1045e <arb_console+0x1178>
                          s_numBytes);

            }/*End if( s_numBytes > 0)*/
         }
         else
            c_lineCount = 0;
   1045c:	00 e0       	ldi	r16, 0x00	; 0
          *------------------------------------------------------------------*/
         s_numBytes = arb_read( t_fileHndl,
                                ac_data,
                                20);

         i_fileSize = i_fileSize - s_numBytes;
   1045e:	c7 01       	movw	r24, r14
   10460:	aa 27       	eor	r26, r26
   10462:	97 fd       	sbrc	r25, 7
   10464:	a0 95       	com	r26
   10466:	ba 2f       	mov	r27, r26
   10468:	88 1a       	sub	r8, r24
   1046a:	99 0a       	sbc	r9, r25
   1046c:	aa 0a       	sbc	r10, r26
   1046e:	bb 0a       	sbc	r11, r27
            }/*End if( s_numBytes > 0)*/
         }
         else
            c_lineCount = 0;

      }while( i_fileSize > 0);
   10470:	18 14       	cp	r1, r8
   10472:	19 04       	cpc	r1, r9
   10474:	1a 04       	cpc	r1, r10
   10476:	1b 04       	cpc	r1, r11
   10478:	0c f4       	brge	.+2      	; 0x1047c <arb_console+0x1196>
   1047a:	67 cf       	rjmp	.-306    	; 0x1034a <arb_console+0x1064>
      return false;

   /*------------------------------------------------------------------------*
    * Close the file.
    *------------------------------------------------------------------------*/
   arb_close( t_fileHndl);
   1047c:	89 81       	ldd	r24, Y+1	; 0x01
   1047e:	9a 81       	ldd	r25, Y+2	; 0x02
   10480:	0e 94 b8 84 	call	0x10970	; 0x10970 <arb_close>
   10484:	30 c0       	rjmp	.+96     	; 0x104e6 <arb_console+0x1200>
          * 'arb_console' that is modifiable from a user-space perspective.
          * If the user-space application requires control over its various
          * threads via a CMD line interface then all subsequent commands
          * should be placed within the function pointed to by 'pf_funPtr'.
          *------------------------------------------------------------------*/
         if( gt_conObject.pf_funPtr != NULL)
   10486:	e0 91 fb 26 	lds	r30, 0x26FB
   1048a:	f0 91 fc 26 	lds	r31, 0x26FC
   1048e:	30 97       	sbiw	r30, 0x00	; 0
   10490:	51 f1       	breq	.+84     	; 0x104e6 <arb_console+0x1200>
         {
            if( gt_conObject.pf_funPtr( gt_conObject.t_consoleHndl,
   10492:	80 91 f7 26 	lds	r24, 0x26F7
   10496:	90 91 f8 26 	lds	r25, 0x26F8
   1049a:	8e 01       	movw	r16, r28
   1049c:	04 54       	subi	r16, 0x44	; 68
   1049e:	1f 4f       	sbci	r17, 0xFF	; 255
   104a0:	b8 01       	movw	r22, r16
   104a2:	ae 01       	movw	r20, r28
   104a4:	45 5b       	subi	r20, 0xB5	; 181
   104a6:	5f 4f       	sbci	r21, 0xFF	; 255
   104a8:	19 95       	eicall
   104aa:	88 23       	and	r24, r24
   104ac:	e1 f4       	brne	.+56     	; 0x104e6 <arb_console+0x1200>
                                        ac_buff,
                                        &t_tokHndl) == false)
            {
               s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid CMD\n\r"));
   104ae:	00 d0       	rcall	.+0      	; 0x104b0 <arb_console+0x11ca>
   104b0:	0f 92       	push	r0
   104b2:	ad b7       	in	r26, 0x3d	; 61
   104b4:	be b7       	in	r27, 0x3e	; 62
   104b6:	11 96       	adiw	r26, 0x01	; 1
   104b8:	0d 93       	st	X+, r16
   104ba:	1c 93       	st	X, r17
   104bc:	12 97       	sbiw	r26, 0x02	; 2
   104be:	8b e6       	ldi	r24, 0x6B	; 107
   104c0:	92 e0       	ldi	r25, 0x02	; 2
   104c2:	13 96       	adiw	r26, 0x03	; 3
   104c4:	8d 93       	st	X+, r24
   104c6:	9c 93       	st	X, r25
   104c8:	14 97       	sbiw	r26, 0x04	; 4
   104ca:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   104ce:	ac 01       	movw	r20, r24
               arb_write( gt_conObject.t_consoleHndl,
   104d0:	80 91 f7 26 	lds	r24, 0x26F7
   104d4:	90 91 f8 26 	lds	r25, 0x26F8
   104d8:	0f 90       	pop	r0
   104da:	0f 90       	pop	r0
   104dc:	0f 90       	pop	r0
   104de:	0f 90       	pop	r0
   104e0:	b8 01       	movw	r22, r16
   104e2:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      }

      /*---------------------------------------------------------------------*
       * Display prompt...
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
   104e6:	80 91 f7 26 	lds	r24, 0x26F7
   104ea:	90 91 f8 26 	lds	r25, 0x26F8
   104ee:	64 e0       	ldi	r22, 0x04	; 4
   104f0:	70 e0       	ldi	r23, 0x00	; 0
   104f2:	20 e0       	ldi	r18, 0x00	; 0
   104f4:	30 e0       	ldi	r19, 0x00	; 0
   104f6:	a9 01       	movw	r20, r18
   104f8:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
                              CONSOLE_DISPLAY_PROMPT,
                              0);

   }/*End while( RUN_FOREVER)*/
   104fc:	0c 94 3a 7a 	jmp	0xf474	; 0xf474 <arb_console+0x18e>

00010500 <arb_consoleInit>:
                         t_stackSize t_stack,
                         t_thrdPrio t_pri,
                         bool (*pf_funPtr)( t_DEVHANDLE t_consoleHndl,
                                            int8_t *pc_buff,
                                            t_consoleTokHndl *pt_tokHndl))
{
   10500:	cf 92       	push	r12
   10502:	df 92       	push	r13
   10504:	ef 92       	push	r14
   10506:	ff 92       	push	r15
   10508:	0f 93       	push	r16
   1050a:	1f 93       	push	r17
   1050c:	cf 93       	push	r28
   1050e:	df 93       	push	r29
   10510:	7c 01       	movw	r14, r24
   10512:	6b 01       	movw	r12, r22
   10514:	da 01       	movw	r26, r20
   10516:	e2 2f       	mov	r30, r18
   10518:	e8 01       	movw	r28, r16

   /*------------------------------------------------------------------------*
    * Create a new thread.
    *------------------------------------------------------------------------*/
   gt_conObject.t_consoleThread = arb_threadCreate( arb_console,
   1051a:	83 e7       	ldi	r24, 0x73	; 115
   1051c:	99 e7       	ldi	r25, 0x79	; 121
   1051e:	61 e0       	ldi	r22, 0x01	; 1
   10520:	70 e0       	ldi	r23, 0x00	; 0
   10522:	40 e0       	ldi	r20, 0x00	; 0
   10524:	50 e0       	ldi	r21, 0x00	; 0
   10526:	9d 01       	movw	r18, r26
   10528:	0e 2f       	mov	r16, r30
   1052a:	0e 94 56 a0 	call	0x140ac	; 0x140ac <arb_threadCreate>
   1052e:	80 93 f5 26 	sts	0x26F5, r24
   10532:	90 93 f6 26 	sts	0x26F6, r25
                                                    1,
                                                    0,
                                                    t_stack,
                                                    t_pri);

   if( gt_conObject.t_consoleThread < 0)
   10536:	80 91 f5 26 	lds	r24, 0x26F5
   1053a:	90 91 f6 26 	lds	r25, 0x26F6
   1053e:	97 ff       	sbrs	r25, 7
   10540:	05 c0       	rjmp	.+10     	; 0x1054c <arb_consoleInit+0x4c>
   {
      return (t_error)gt_conObject.t_consoleThread;
   10542:	80 91 f5 26 	lds	r24, 0x26F5
   10546:	90 91 f6 26 	lds	r25, 0x26F6
   1054a:	38 c0       	rjmp	.+112    	; 0x105bc <arb_consoleInit+0xbc>
   }/*End if( gt_conObject.t_consoleThread < 0)*/

   /*------------------------------------------------------------------------*
    * Open a handle to the console driver.
    *------------------------------------------------------------------------*/
   gt_conObject.t_consoleHndl = arb_open( pc_consDriver,
   1054c:	c7 01       	movw	r24, r14
   1054e:	63 e0       	ldi	r22, 0x03	; 3
   10550:	0e 94 25 83 	call	0x1064a	; 0x1064a <arb_open>
   10554:	80 93 f7 26 	sts	0x26F7, r24
   10558:	90 93 f8 26 	sts	0x26F8, r25
                                          ARB_O_READ |
                                          ARB_O_WRITE);

   if( gt_conObject.t_consoleHndl < 0)
   1055c:	80 91 f7 26 	lds	r24, 0x26F7
   10560:	90 91 f8 26 	lds	r25, 0x26F8
   10564:	97 ff       	sbrs	r25, 7
   10566:	05 c0       	rjmp	.+10     	; 0x10572 <arb_consoleInit+0x72>
   {
      return (t_error)gt_conObject.t_consoleHndl;
   10568:	80 91 f7 26 	lds	r24, 0x26F7
   1056c:	90 91 f8 26 	lds	r25, 0x26F8
   10570:	25 c0       	rjmp	.+74     	; 0x105bc <arb_consoleInit+0xbc>
   }

   gt_conObject.pf_funPtr = pf_funPtr;
   10572:	c0 93 fb 26 	sts	0x26FB, r28
   10576:	d0 93 fc 26 	sts	0x26FC, r29

   /*------------------------------------------------------------------------*
    * Open a handle to the sd card driver.
    *------------------------------------------------------------------------*/
   gt_conObject.t_sdHndl = arb_open( pc_sdDriver,
   1057a:	c6 01       	movw	r24, r12
   1057c:	63 e0       	ldi	r22, 0x03	; 3
   1057e:	0e 94 25 83 	call	0x1064a	; 0x1064a <arb_open>
   10582:	80 93 f9 26 	sts	0x26F9, r24
   10586:	90 93 fa 26 	sts	0x26FA, r25

   /*------------------------------------------------------------------------*
    * If there is no sd card present on the system then set the handle to
    * 0.
    *------------------------------------------------------------------------*/
   if( gt_conObject.t_sdHndl == ARB_DEVICE_NOT_FOUND)
   1058a:	80 91 f9 26 	lds	r24, 0x26F9
   1058e:	90 91 fa 26 	lds	r25, 0x26FA
   10592:	2f ef       	ldi	r18, 0xFF	; 255
   10594:	87 3f       	cpi	r24, 0xF7	; 247
   10596:	92 07       	cpc	r25, r18
   10598:	29 f4       	brne	.+10     	; 0x105a4 <arb_consoleInit+0xa4>
   {
      gt_conObject.t_sdHndl = 0;
   1059a:	10 92 f9 26 	sts	0x26F9, r1
   1059e:	10 92 fa 26 	sts	0x26FA, r1
   105a2:	0b c0       	rjmp	.+22     	; 0x105ba <arb_consoleInit+0xba>
   }/*End if( gt_conObject.t_sdHndl == ARB_DEVICE_NOT_FOUND)*/
   else if( gt_conObject.t_sdHndl < 0)
   105a4:	80 91 f9 26 	lds	r24, 0x26F9
   105a8:	90 91 fa 26 	lds	r25, 0x26FA
   105ac:	97 ff       	sbrs	r25, 7
   105ae:	05 c0       	rjmp	.+10     	; 0x105ba <arb_consoleInit+0xba>
   {
      return (t_error)gt_conObject.t_sdHndl;
   105b0:	80 91 f9 26 	lds	r24, 0x26F9
   105b4:	90 91 fa 26 	lds	r25, 0x26FA
   105b8:	01 c0       	rjmp	.+2      	; 0x105bc <arb_consoleInit+0xbc>
   }/*End else if( gt_conObject.t_sdHndl < 0)*/

   return ARB_PASSED;
   105ba:	80 e0       	ldi	r24, 0x00	; 0

}/*End arb_consoleInit*/
   105bc:	df 91       	pop	r29
   105be:	cf 91       	pop	r28
   105c0:	1f 91       	pop	r17
   105c2:	0f 91       	pop	r16
   105c4:	ff 90       	pop	r15
   105c6:	ef 90       	pop	r14
   105c8:	df 90       	pop	r13
   105ca:	cf 90       	pop	r12
   105cc:	08 95       	ret

000105ce <arb_getDeviceLinkByName>:
   (*pt_new)->pv_privateData = (void *)(*pc_fileName);

}/*End arb_initDeviceHandle*/

static t_LINKHNDL arb_getDeviceLinkByName( char *pc_name)
{
   105ce:	ef 92       	push	r14
   105d0:	ff 92       	push	r15
   105d2:	0f 93       	push	r16
   105d4:	1f 93       	push	r17
   105d6:	cf 93       	push	r28
   105d8:	df 93       	push	r29
   105da:	0f 92       	push	r0
   105dc:	0f 92       	push	r0
   105de:	cd b7       	in	r28, 0x3d	; 61
   105e0:	de b7       	in	r29, 0x3e	; 62
   105e2:	7c 01       	movw	r14, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with a name of pc_name
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   105e4:	e0 91 52 22 	lds	r30, 0x2252
   105e8:	f0 91 53 22 	lds	r31, 0x2253
   105ec:	02 81       	ldd	r16, Z+2	; 0x02
   105ee:	13 81       	ldd	r17, Z+3	; 0x03
   105f0:	e0 91 52 22 	lds	r30, 0x2252
   105f4:	f0 91 53 22 	lds	r31, 0x2253
   105f8:	11 c0       	rjmp	.+34     	; 0x1061c <arb_getDeviceLinkByName+0x4e>
   {
      pt_curr = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   105fa:	e9 81       	ldd	r30, Y+1	; 0x01
   105fc:	fa 81       	ldd	r31, Y+2	; 0x02
      if( strcmp( (char *)pt_curr->ac_deviceName, (char *)pc_name) == 0)
   105fe:	80 81       	ld	r24, Z
   10600:	91 81       	ldd	r25, Z+1	; 0x01
   10602:	02 96       	adiw	r24, 0x02	; 2
   10604:	b7 01       	movw	r22, r14
   10606:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   1060a:	00 97       	sbiw	r24, 0x00	; 0
   1060c:	19 f4       	brne	.+6      	; 0x10614 <arb_getDeviceLinkByName+0x46>
      {
         return t_linkHndl;
   1060e:	89 81       	ldd	r24, Y+1	; 0x01
   10610:	9a 81       	ldd	r25, Y+2	; 0x02
   10612:	0d c0       	rjmp	.+26     	; 0x1062e <arb_getDeviceLinkByName+0x60>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with a name of pc_name
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10614:	01 50       	subi	r16, 0x01	; 1
   10616:	10 40       	sbci	r17, 0x00	; 0
   10618:	e9 81       	ldd	r30, Y+1	; 0x01
   1061a:	fa 81       	ldd	r31, Y+2	; 0x02
   1061c:	80 85       	ldd	r24, Z+8	; 0x08
   1061e:	91 85       	ldd	r25, Z+9	; 0x09
   10620:	89 83       	std	Y+1, r24	; 0x01
   10622:	9a 83       	std	Y+2, r25	; 0x02
   10624:	10 16       	cp	r1, r16
   10626:	11 06       	cpc	r1, r17
   10628:	44 f3       	brlt	.-48     	; 0x105fa <arb_getDeviceLinkByName+0x2c>
   }

   /*------------------------------------------------------------------------*
    * If we make it this far the name has not been found in the device list
    *------------------------------------------------------------------------*/
   return (t_LINKHNDL)ARB_DEVICE_NOT_FOUND;
   1062a:	87 ef       	ldi	r24, 0xF7	; 247
   1062c:	9f ef       	ldi	r25, 0xFF	; 255

}/*End arb_getDeviceLinkByName*/
   1062e:	0f 90       	pop	r0
   10630:	0f 90       	pop	r0
   10632:	df 91       	pop	r29
   10634:	cf 91       	pop	r28
   10636:	1f 91       	pop	r17
   10638:	0f 91       	pop	r16
   1063a:	ff 90       	pop	r15
   1063c:	ef 90       	pop	r14
   1063e:	08 95       	ret

00010640 <arb_getDeviceList>:
/*---------------------------------------------------------------------------*
 * This function returns a handle to the list of active device drivers.
 *---------------------------------------------------------------------------*/
t_CONTHNDL arb_getDeviceList( void)
{
   return gt_activeDevices;
   10640:	80 91 52 22 	lds	r24, 0x2252
   10644:	90 91 53 22 	lds	r25, 0x2253
}/*End arb_getDeviceList*/
   10648:	08 95       	ret

0001064a <arb_open>:

t_DEVHANDLE arb_open( char *pc_name,
                      uint8_t c_flags)
{
   1064a:	9f 92       	push	r9
   1064c:	af 92       	push	r10
   1064e:	bf 92       	push	r11
   10650:	cf 92       	push	r12
   10652:	df 92       	push	r13
   10654:	ef 92       	push	r14
   10656:	ff 92       	push	r15
   10658:	0f 93       	push	r16
   1065a:	1f 93       	push	r17
   1065c:	cf 93       	push	r28
   1065e:	df 93       	push	r29
   10660:	cd b7       	in	r28, 0x3d	; 61
   10662:	de b7       	in	r29, 0x3e	; 62
   10664:	25 97       	sbiw	r28, 0x05	; 5
   10666:	cd bf       	out	0x3d, r28	; 61
   10668:	de bf       	out	0x3e, r29	; 62
   1066a:	96 2e       	mov	r9, r22

   /*------------------------------------------------------------------------*
    * A new handle is being dynamically created make sure operation acting on
    * the global variable are atomic.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   1066c:	2f b7       	in	r18, 0x3f	; 63
   1066e:	29 83       	std	Y+1, r18	; 0x01
   10670:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * The device name is located at the begging of 'pc_name' and can be
    * found by extracting the characters up until the first '/'.
    *------------------------------------------------------------------------*/
   s_size1 = strlen( pc_name);
   10672:	dc 01       	movw	r26, r24
   10674:	0d 90       	ld	r0, X+
   10676:	00 20       	and	r0, r0
   10678:	e9 f7       	brne	.-6      	; 0x10674 <arb_open+0x2a>
   1067a:	6d 01       	movw	r12, r26
   1067c:	08 94       	sec
   1067e:	c1 08       	sbc	r12, r1
   10680:	d1 08       	sbc	r13, r1
   10682:	c8 1a       	sub	r12, r24
   10684:	d9 0a       	sbc	r13, r25

   pc_devName = strtok( pc_name, "/");
   10686:	62 e4       	ldi	r22, 0x42	; 66
   10688:	72 e2       	ldi	r23, 0x22	; 34
   1068a:	0e 94 df b6 	call	0x16dbe	; 0x16dbe <strtok>
   1068e:	f8 2e       	mov	r15, r24
   10690:	e9 2e       	mov	r14, r25

   s_size1 -= (strlen( pc_devName) + 1);
   10692:	e8 2f       	mov	r30, r24
   10694:	f9 2f       	mov	r31, r25
   10696:	df 01       	movw	r26, r30
   10698:	0d 90       	ld	r0, X+
   1069a:	00 20       	and	r0, r0
   1069c:	e9 f7       	brne	.-6      	; 0x10698 <arb_open+0x4e>
   1069e:	8d 01       	movw	r16, r26
   106a0:	01 50       	subi	r16, 0x01	; 1
   106a2:	10 40       	sbci	r17, 0x00	; 0
   106a4:	0e 1b       	sub	r16, r30
   106a6:	1f 0b       	sbc	r17, r31

   /*------------------------------------------------------------------------*
    * The characters after the first '/' represent the file path
    *------------------------------------------------------------------------*/
   pc_fileName = strtok( NULL, "/");
   106a8:	80 e0       	ldi	r24, 0x00	; 0
   106aa:	90 e0       	ldi	r25, 0x00	; 0
   106ac:	62 e4       	ldi	r22, 0x42	; 66
   106ae:	72 e2       	ldi	r23, 0x22	; 34
   106b0:	0e 94 df b6 	call	0x16dbe	; 0x16dbe <strtok>
   106b4:	5c 01       	movw	r10, r24

   s_size2 = strlen( pc_fileName);
   106b6:	dc 01       	movw	r26, r24
   106b8:	0d 90       	ld	r0, X+
   106ba:	00 20       	and	r0, r0
   106bc:	e9 f7       	brne	.-6      	; 0x106b8 <arb_open+0x6e>
   106be:	11 97       	sbiw	r26, 0x01	; 1
   106c0:	a8 1b       	sub	r26, r24
   106c2:	b9 0b       	sbc	r27, r25
    *------------------------------------------------------------------------*/
   s_size1 = strlen( pc_name);

   pc_devName = strtok( pc_name, "/");

   s_size1 -= (strlen( pc_devName) + 1);
   106c4:	00 95       	com	r16
   106c6:	10 95       	com	r17
   106c8:	0c 0d       	add	r16, r12
   106ca:	1d 1d       	adc	r17, r13
   s_size2 = strlen( pc_fileName);

   /*------------------------------------------------------------------------*
    * Are there characters left after the second token?
    *------------------------------------------------------------------------*/
   if( (s_size1 > s_size2) && (pc_fileName != NULL)) /*Yes*/
   106cc:	a0 17       	cp	r26, r16
   106ce:	b1 07       	cpc	r27, r17
   106d0:	34 f4       	brge	.+12     	; 0x106de <arb_open+0x94>
   106d2:	00 97       	sbiw	r24, 0x00	; 0
   106d4:	21 f0       	breq	.+8      	; 0x106de <arb_open+0x94>
   {

      /*---------------------------------------------------------------------*
       * Replace the backslash removed by strtok.
       *---------------------------------------------------------------------*/
      pc_fileName[s_size2] = '/';
   106d6:	a8 0f       	add	r26, r24
   106d8:	b9 1f       	adc	r27, r25
   106da:	8f e2       	ldi	r24, 0x2F	; 47
   106dc:	8c 93       	st	X, r24
   }

   /*------------------------------------------------------------------------*
    * Search the active device list for a device with this name...
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_devName);
   106de:	8f 2d       	mov	r24, r15
   106e0:	9e 2d       	mov	r25, r14
   106e2:	0e 94 e7 82 	call	0x105ce	; 0x105ce <arb_getDeviceLinkByName>
   106e6:	8c 83       	std	Y+4, r24	; 0x04
   106e8:	9d 83       	std	Y+5, r25	; 0x05

   if( t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND)
   106ea:	8c 81       	ldd	r24, Y+4	; 0x04
   106ec:	9d 81       	ldd	r25, Y+5	; 0x05
   106ee:	bf ef       	ldi	r27, 0xFF	; 255
   106f0:	87 3f       	cpi	r24, 0xF7	; 247
   106f2:	9b 07       	cpc	r25, r27
   106f4:	29 f4       	brne	.+10     	; 0x10700 <arb_open+0xb6>
   {
      HAL_END_CRITICAL(); //Enable interrupts
   106f6:	89 81       	ldd	r24, Y+1	; 0x01
   106f8:	8f bf       	out	0x3f, r24	; 63
      return (t_DEVHANDLE)ARB_DEVICE_NOT_FOUND;
   106fa:	87 ef       	ldi	r24, 0xF7	; 247
   106fc:	9f ef       	ldi	r25, 0xFF	; 255
   106fe:	5f c0       	rjmp	.+190    	; 0x107be <arb_open+0x174>

   /*------------------------------------------------------------------------*
    * Create a new 'link' in the list which we will use as a  'user space'
    * handle to this device
    *-----------------------------------------------------------------------*/
   t_hndlLink = utl_createLink( sizeof(t_devHandle));
   10700:	89 e0       	ldi	r24, 0x09	; 9
   10702:	90 e0       	ldi	r25, 0x00	; 0
   10704:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   10708:	8a 83       	std	Y+2, r24	; 0x02
   1070a:	9b 83       	std	Y+3, r25	; 0x03

   if( t_hndlLink < 0)
   1070c:	8a 81       	ldd	r24, Y+2	; 0x02
   1070e:	9b 81       	ldd	r25, Y+3	; 0x03
   10710:	97 ff       	sbrs	r25, 7
   10712:	05 c0       	rjmp	.+10     	; 0x1071e <arb_open+0xd4>
   {
      HAL_END_CRITICAL(); //Enable interrupts
   10714:	89 81       	ldd	r24, Y+1	; 0x01
   10716:	8f bf       	out	0x3f, r24	; 63
      return (t_DEVHANDLE)ARB_OUT_OF_HEAP;
   10718:	8f ef       	ldi	r24, 0xFF	; 255
   1071a:	9f ef       	ldi	r25, 0xFF	; 255
   1071c:	50 c0       	rjmp	.+160    	; 0x107be <arb_open+0x174>

   /*------------------------------------------------------------------------*
    * Grab the record for this particular device driver the handle is being
    * opened against.
    *------------------------------------------------------------------------*/
   pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR(t_devLink);
   1071e:	ec 81       	ldd	r30, Y+4	; 0x04
   10720:	fd 81       	ldd	r31, Y+5	; 0x05
   10722:	01 90       	ld	r0, Z+
   10724:	f0 81       	ld	r31, Z
   10726:	e0 2d       	mov	r30, r0

   /*------------------------------------------------------------------------*
    * Grab the a ptr to the record for the user-space handle
    *------------------------------------------------------------------------*/
   pt_devHandle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR(t_hndlLink);
   10728:	aa 81       	ldd	r26, Y+2	; 0x02
   1072a:	bb 81       	ldd	r27, Y+3	; 0x03
   1072c:	0d 91       	ld	r16, X+
   1072e:	1c 91       	ld	r17, X
{

   /*------------------------------------------------------------------------*
    * Initialize this new memory region to 0
    *------------------------------------------------------------------------*/
   memset( (*pt_new), 0, sizeof( t_devHandle));
   10730:	89 e0       	ldi	r24, 0x09	; 9
   10732:	d8 01       	movw	r26, r16
   10734:	1d 92       	st	X+, r1
   10736:	8a 95       	dec	r24
   10738:	e9 f7       	brne	.-6      	; 0x10734 <arb_open+0xea>

   /*------------------------------------------------------------------------*
    * Increment the count of handles opened against this particular device
    * driver.
    *------------------------------------------------------------------------*/
   (*pt_dev)->c_numDevHandles++;
   1073a:	82 89       	ldd	r24, Z+18	; 0x12
   1073c:	8f 5f       	subi	r24, 0xFF	; 255
   1073e:	82 8b       	std	Z+18, r24	; 0x12

   (*pt_new)->pt_dev = (*pt_dev);
   10740:	d8 01       	movw	r26, r16
   10742:	ed 93       	st	X+, r30
   10744:	fc 93       	st	X, r31
   10746:	11 97       	sbiw	r26, 0x01	; 1

   (*pt_new)->c_flags = c_flags;
   10748:	14 96       	adiw	r26, 0x04	; 4
   1074a:	9c 92       	st	X, r9
   1074c:	14 97       	sbiw	r26, 0x04	; 4

   /*------------------------------------------------------------------------*
    * Temporarily use the private data ptr to store the location of the
    * file name- this is only used for files being stored on the hard drive.
    *------------------------------------------------------------------------*/
   (*pt_new)->pv_privateData = (void *)(*pc_fileName);
   1074e:	12 96       	adiw	r26, 0x02	; 2
   10750:	ad 92       	st	X+, r10
   10752:	bc 92       	st	X, r11
   10754:	13 97       	sbiw	r26, 0x03	; 3

   /*------------------------------------------------------------------------*
    * Add the new handle to this particular device on the list of open
    * user-space handles.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeHandles,
   10756:	80 91 44 22 	lds	r24, 0x2244
   1075a:	90 91 45 22 	lds	r25, 0x2245
   1075e:	6a 81       	ldd	r22, Y+2	; 0x02
   10760:	7b 81       	ldd	r23, Y+3	; 0x03
   10762:	41 e0       	ldi	r20, 0x01	; 1
   10764:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           true);

   /*------------------------------------------------------------------------*
    * Finished creating handle, enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   10768:	89 81       	ldd	r24, Y+1	; 0x01
   1076a:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Call the device driver's 'open' routine
    *------------------------------------------------------------------------*/
   if( pt_devHandle->pt_dev->pt_devOps != NULL)
   1076c:	d8 01       	movw	r26, r16
   1076e:	ed 91       	ld	r30, X+
   10770:	fc 91       	ld	r31, X
   10772:	11 97       	sbiw	r26, 0x01	; 1
   10774:	03 88       	ldd	r0, Z+19	; 0x13
   10776:	f4 89       	ldd	r31, Z+20	; 0x14
   10778:	e0 2d       	mov	r30, r0
   1077a:	30 97       	sbiw	r30, 0x00	; 0
   1077c:	f1 f0       	breq	.+60     	; 0x107ba <arb_open+0x170>
   {
      t_err = pt_devHandle->pt_dev->pt_devOps->pf_open( (t_DEVHANDLE)
   1077e:	01 90       	ld	r0, Z+
   10780:	f0 81       	ld	r31, Z
   10782:	e0 2d       	mov	r30, r0
   10784:	c8 01       	movw	r24, r16
   10786:	19 95       	eicall
   10788:	f8 2e       	mov	r15, r24
      pt_devHandle);

      if( t_err < 0)
   1078a:	87 ff       	sbrs	r24, 7
   1078c:	13 c0       	rjmp	.+38     	; 0x107b4 <arb_open+0x16a>

         /*------------------------------------------------------------------*
          * Decrement the count of handles opened against this particular
          * device driver.
          *------------------------------------------------------------------*/
         pt_devHandle->pt_dev->c_numDevHandles--;
   1078e:	d8 01       	movw	r26, r16
   10790:	ed 91       	ld	r30, X+
   10792:	fc 91       	ld	r31, X
   10794:	82 89       	ldd	r24, Z+18	; 0x12
   10796:	81 50       	subi	r24, 0x01	; 1
   10798:	82 8b       	std	Z+18, r24	; 0x12

         utl_destroyLink( gt_activeHandles,
   1079a:	80 91 44 22 	lds	r24, 0x2244
   1079e:	90 91 45 22 	lds	r25, 0x2245
   107a2:	6a 81       	ldd	r22, Y+2	; 0x02
   107a4:	7b 81       	ldd	r23, Y+3	; 0x03
   107a6:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                          t_hndlLink);

         return (t_DEVHANDLE)t_err;
   107aa:	8f 2d       	mov	r24, r15
   107ac:	99 27       	eor	r25, r25
   107ae:	87 fd       	sbrc	r24, 7
   107b0:	90 95       	com	r25
   107b2:	05 c0       	rjmp	.+10     	; 0x107be <arb_open+0x174>
   else
   {
      return (t_DEVHANDLE)ARB_NULL_PTR;
   }

   return (t_DEVHANDLE)t_hndlLink;
   107b4:	8a 81       	ldd	r24, Y+2	; 0x02
   107b6:	9b 81       	ldd	r25, Y+3	; 0x03
   107b8:	02 c0       	rjmp	.+4      	; 0x107be <arb_open+0x174>
         return (t_DEVHANDLE)t_err;
      }
   }
   else
   {
      return (t_DEVHANDLE)ARB_NULL_PTR;
   107ba:	8d ef       	ldi	r24, 0xFD	; 253
   107bc:	9f ef       	ldi	r25, 0xFF	; 255
   }

   return (t_DEVHANDLE)t_hndlLink;

}/*End open*/
   107be:	25 96       	adiw	r28, 0x05	; 5
   107c0:	cd bf       	out	0x3d, r28	; 61
   107c2:	de bf       	out	0x3e, r29	; 62
   107c4:	df 91       	pop	r29
   107c6:	cf 91       	pop	r28
   107c8:	1f 91       	pop	r17
   107ca:	0f 91       	pop	r16
   107cc:	ff 90       	pop	r15
   107ce:	ef 90       	pop	r14
   107d0:	df 90       	pop	r13
   107d2:	cf 90       	pop	r12
   107d4:	bf 90       	pop	r11
   107d6:	af 90       	pop	r10
   107d8:	9f 90       	pop	r9
   107da:	08 95       	ret

000107dc <arb_read>:

int16_t arb_read( t_DEVHANDLE t_handle,
                  int8_t *pc_buff,
                  uint16_t s_size)
{
   107dc:	cf 93       	push	r28
   107de:	df 93       	push	r29
   107e0:	0f 92       	push	r0
   107e2:	0f 92       	push	r0
   107e4:	cd b7       	in	r28, 0x3d	; 61
   107e6:	de b7       	in	r29, 0x3e	; 62
   107e8:	89 83       	std	Y+1, r24	; 0x01
   107ea:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   107ec:	e9 81       	ldd	r30, Y+1	; 0x01
   107ee:	fa 81       	ldd	r31, Y+2	; 0x02

int16_t arb_read( t_DEVHANDLE t_handle,
                  int8_t *pc_buff,
                  uint16_t s_size)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   107f0:	a0 81       	ld	r26, Z
   107f2:	b1 81       	ldd	r27, Z+1	; 0x01
   int16_t s_amountRead = 0;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'read' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   107f4:	e9 81       	ldd	r30, Y+1	; 0x01
   107f6:	fa 81       	ldd	r31, Y+2	; 0x02
   107f8:	20 91 44 22 	lds	r18, 0x2244
   107fc:	30 91 45 22 	lds	r19, 0x2245
   10800:	84 81       	ldd	r24, Z+4	; 0x04
   10802:	95 81       	ldd	r25, Z+5	; 0x05
   10804:	82 17       	cp	r24, r18
   10806:	93 07       	cpc	r25, r19
   10808:	71 f4       	brne	.+28     	; 0x10826 <arb_read+0x4a>
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   1080a:	ed 91       	ld	r30, X+
   1080c:	fc 91       	ld	r31, X
   1080e:	11 97       	sbiw	r26, 0x01	; 1
   10810:	03 88       	ldd	r0, Z+19	; 0x13
   10812:	f4 89       	ldd	r31, Z+20	; 0x14
   10814:	e0 2d       	mov	r30, r0
   10816:	30 97       	sbiw	r30, 0x00	; 0
   10818:	49 f0       	breq	.+18     	; 0x1082c <arb_read+0x50>
      {
         s_amountRead = pt_devHandle->pt_dev->pt_devOps->pf_read(
   1081a:	02 80       	ldd	r0, Z+2	; 0x02
   1081c:	f3 81       	ldd	r31, Z+3	; 0x03
   1081e:	e0 2d       	mov	r30, r0
   10820:	cd 01       	movw	r24, r26
   10822:	19 95       	eicall
   10824:	05 c0       	rjmp	.+10     	; 0x10830 <arb_read+0x54>
      else
         s_amountRead = (int16_t)ARB_NULL_PTR;

   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/
   else
      s_amountRead = (int16_t)ARB_INVALID_HANDLE;
   10826:	89 ef       	ldi	r24, 0xF9	; 249
   10828:	9f ef       	ldi	r25, 0xFF	; 255
   1082a:	02 c0       	rjmp	.+4      	; 0x10830 <arb_read+0x54>
      {
         s_amountRead = pt_devHandle->pt_dev->pt_devOps->pf_read(
         (t_DEVHANDLE)pt_devHandle, pc_buff, s_size);
      }
      else
         s_amountRead = (int16_t)ARB_NULL_PTR;
   1082c:	8d ef       	ldi	r24, 0xFD	; 253
   1082e:	9f ef       	ldi	r25, 0xFF	; 255
   else
      s_amountRead = (int16_t)ARB_INVALID_HANDLE;

   return s_amountRead;

}/*End arb_read*/
   10830:	0f 90       	pop	r0
   10832:	0f 90       	pop	r0
   10834:	df 91       	pop	r29
   10836:	cf 91       	pop	r28
   10838:	08 95       	ret

0001083a <arb_write>:

int16_t arb_write( t_DEVHANDLE t_handle,
                   int8_t *pc_buff,
                   uint16_t s_size)
{
   1083a:	cf 93       	push	r28
   1083c:	df 93       	push	r29
   1083e:	0f 92       	push	r0
   10840:	0f 92       	push	r0
   10842:	cd b7       	in	r28, 0x3d	; 61
   10844:	de b7       	in	r29, 0x3e	; 62
   10846:	89 83       	std	Y+1, r24	; 0x01
   10848:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1084a:	e9 81       	ldd	r30, Y+1	; 0x01
   1084c:	fa 81       	ldd	r31, Y+2	; 0x02

int16_t arb_write( t_DEVHANDLE t_handle,
                   int8_t *pc_buff,
                   uint16_t s_size)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   1084e:	a0 81       	ld	r26, Z
   10850:	b1 81       	ldd	r27, Z+1	; 0x01
   int16_t s_amountWrote     = (int16_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'write' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   10852:	e9 81       	ldd	r30, Y+1	; 0x01
   10854:	fa 81       	ldd	r31, Y+2	; 0x02
   10856:	20 91 44 22 	lds	r18, 0x2244
   1085a:	30 91 45 22 	lds	r19, 0x2245
   1085e:	84 81       	ldd	r24, Z+4	; 0x04
   10860:	95 81       	ldd	r25, Z+5	; 0x05
   10862:	82 17       	cp	r24, r18
   10864:	93 07       	cpc	r25, r19
   10866:	71 f4       	brne	.+28     	; 0x10884 <arb_write+0x4a>
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   10868:	ed 91       	ld	r30, X+
   1086a:	fc 91       	ld	r31, X
   1086c:	11 97       	sbiw	r26, 0x01	; 1
   1086e:	03 88       	ldd	r0, Z+19	; 0x13
   10870:	f4 89       	ldd	r31, Z+20	; 0x14
   10872:	e0 2d       	mov	r30, r0
   10874:	30 97       	sbiw	r30, 0x00	; 0
   10876:	49 f0       	breq	.+18     	; 0x1088a <arb_write+0x50>
      {
         s_amountWrote = pt_devHandle->pt_dev->pt_devOps->pf_write(
   10878:	04 80       	ldd	r0, Z+4	; 0x04
   1087a:	f5 81       	ldd	r31, Z+5	; 0x05
   1087c:	e0 2d       	mov	r30, r0
   1087e:	cd 01       	movw	r24, r26
   10880:	19 95       	eicall
   10882:	05 c0       	rjmp	.+10     	; 0x1088e <arb_write+0x54>
      else
         s_amountWrote = (int16_t)ARB_NULL_PTR;

   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/
   else
      s_amountWrote = (int16_t)ARB_INVALID_HANDLE;
   10884:	89 ef       	ldi	r24, 0xF9	; 249
   10886:	9f ef       	ldi	r25, 0xFF	; 255
   10888:	02 c0       	rjmp	.+4      	; 0x1088e <arb_write+0x54>
      {
         s_amountWrote = pt_devHandle->pt_dev->pt_devOps->pf_write(
         (t_DEVHANDLE)pt_devHandle, pc_buff, s_size);
      }
      else
         s_amountWrote = (int16_t)ARB_NULL_PTR;
   1088a:	8d ef       	ldi	r24, 0xFD	; 253
   1088c:	9f ef       	ldi	r25, 0xFF	; 255
   else
      s_amountWrote = (int16_t)ARB_INVALID_HANDLE;

   return s_amountWrote;

}/*End arb_write*/
   1088e:	0f 90       	pop	r0
   10890:	0f 90       	pop	r0
   10892:	df 91       	pop	r29
   10894:	cf 91       	pop	r28
   10896:	08 95       	ret

00010898 <arb_getDevName>:

int8_t *arb_getDevName( t_DEVHANDLE t_handle)
{
   10898:	cf 93       	push	r28
   1089a:	df 93       	push	r29
   1089c:	0f 92       	push	r0
   1089e:	0f 92       	push	r0
   108a0:	cd b7       	in	r28, 0x3d	; 61
   108a2:	de b7       	in	r29, 0x3e	; 62
   108a4:	89 83       	std	Y+1, r24	; 0x01
   108a6:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   108a8:	e9 81       	ldd	r30, Y+1	; 0x01
   108aa:	fa 81       	ldd	r31, Y+2	; 0x02

}/*End arb_write*/

int8_t *arb_getDevName( t_DEVHANDLE t_handle)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   108ac:	01 90       	ld	r0, Z+
   108ae:	f0 81       	ld	r31, Z
   108b0:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR(t_handle);

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'write' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   108b2:	a9 81       	ldd	r26, Y+1	; 0x01
   108b4:	ba 81       	ldd	r27, Y+2	; 0x02
   108b6:	80 91 44 22 	lds	r24, 0x2244
   108ba:	90 91 45 22 	lds	r25, 0x2245
   108be:	14 96       	adiw	r26, 0x04	; 4
   108c0:	2d 91       	ld	r18, X+
   108c2:	3c 91       	ld	r19, X
   108c4:	15 97       	sbiw	r26, 0x05	; 5
   108c6:	28 17       	cp	r18, r24
   108c8:	39 07       	cpc	r19, r25
   108ca:	21 f4       	brne	.+8      	; 0x108d4 <arb_getDevName+0x3c>
   {
      return pt_devHandle->pt_dev->ac_deviceName;
   108cc:	80 81       	ld	r24, Z
   108ce:	91 81       	ldd	r25, Z+1	; 0x01
   108d0:	02 96       	adiw	r24, 0x02	; 2
   108d2:	02 c0       	rjmp	.+4      	; 0x108d8 <arb_getDevName+0x40>
   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/

   return NULL;
   108d4:	80 e0       	ldi	r24, 0x00	; 0
   108d6:	90 e0       	ldi	r25, 0x00	; 0

}/*End arb_getDevName*/
   108d8:	0f 90       	pop	r0
   108da:	0f 90       	pop	r0
   108dc:	df 91       	pop	r29
   108de:	cf 91       	pop	r28
   108e0:	08 95       	ret

000108e2 <arb_ioctl>:

int32_t arb_ioctl( t_DEVHANDLE t_handle,
                   uint16_t s_command,
                   int32_t i_argument)
{
   108e2:	cf 92       	push	r12
   108e4:	df 92       	push	r13
   108e6:	ef 92       	push	r14
   108e8:	ff 92       	push	r15
   108ea:	0f 93       	push	r16
   108ec:	1f 93       	push	r17
   108ee:	cf 93       	push	r28
   108f0:	df 93       	push	r29
   108f2:	0f 92       	push	r0
   108f4:	0f 92       	push	r0
   108f6:	cd b7       	in	r28, 0x3d	; 61
   108f8:	de b7       	in	r29, 0x3e	; 62
   108fa:	89 83       	std	Y+1, r24	; 0x01
   108fc:	9a 83       	std	Y+2, r25	; 0x02
   108fe:	69 01       	movw	r12, r18
   10900:	7a 01       	movw	r14, r20
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   10902:	e9 81       	ldd	r30, Y+1	; 0x01
   10904:	fa 81       	ldd	r31, Y+2	; 0x02

int32_t arb_ioctl( t_DEVHANDLE t_handle,
                   uint16_t s_command,
                   int32_t i_argument)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   10906:	80 81       	ld	r24, Z
   10908:	91 81       	ldd	r25, Z+1	; 0x01
   int32_t i_status = (int32_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'ioctl' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   1090a:	e9 81       	ldd	r30, Y+1	; 0x01
   1090c:	fa 81       	ldd	r31, Y+2	; 0x02
   1090e:	40 91 44 22 	lds	r20, 0x2244
   10912:	50 91 45 22 	lds	r21, 0x2245
   10916:	24 81       	ldd	r18, Z+4	; 0x04
   10918:	35 81       	ldd	r19, Z+5	; 0x05
   1091a:	24 17       	cp	r18, r20
   1091c:	35 07       	cpc	r19, r21
   1091e:	91 f4       	brne	.+36     	; 0x10944 <arb_ioctl+0x62>
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   10920:	dc 01       	movw	r26, r24
   10922:	ed 91       	ld	r30, X+
   10924:	fc 91       	ld	r31, X
   10926:	11 97       	sbiw	r26, 0x01	; 1
   10928:	03 88       	ldd	r0, Z+19	; 0x13
   1092a:	f4 89       	ldd	r31, Z+20	; 0x14
   1092c:	e0 2d       	mov	r30, r0
   1092e:	30 97       	sbiw	r30, 0x00	; 0
   10930:	71 f0       	breq	.+28     	; 0x1094e <arb_ioctl+0x6c>
      {
         i_status = pt_devHandle->pt_dev->pt_devOps->pf_ioctl( (t_DEVHANDLE)
   10932:	06 80       	ldd	r0, Z+6	; 0x06
   10934:	f7 81       	ldd	r31, Z+7	; 0x07
   10936:	e0 2d       	mov	r30, r0
   10938:	a7 01       	movw	r20, r14
   1093a:	96 01       	movw	r18, r12
   1093c:	19 95       	eicall
   1093e:	8b 01       	movw	r16, r22
   10940:	9c 01       	movw	r18, r24
   10942:	09 c0       	rjmp	.+18     	; 0x10956 <arb_ioctl+0x74>
      else
         i_status = (int32_t)ARB_NULL_PTR;

   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/
   else
      i_status = (int32_t)ARB_INVALID_HANDLE;
   10944:	09 ef       	ldi	r16, 0xF9	; 249
   10946:	1f ef       	ldi	r17, 0xFF	; 255
   10948:	2f ef       	ldi	r18, 0xFF	; 255
   1094a:	3f ef       	ldi	r19, 0xFF	; 255
   1094c:	04 c0       	rjmp	.+8      	; 0x10956 <arb_ioctl+0x74>
      {
         i_status = pt_devHandle->pt_dev->pt_devOps->pf_ioctl( (t_DEVHANDLE)
         pt_devHandle, s_command, i_argument);
      }
      else
         i_status = (int32_t)ARB_NULL_PTR;
   1094e:	0d ef       	ldi	r16, 0xFD	; 253
   10950:	1f ef       	ldi	r17, 0xFF	; 255
   10952:	2f ef       	ldi	r18, 0xFF	; 255
   10954:	3f ef       	ldi	r19, 0xFF	; 255
   else
      i_status = (int32_t)ARB_INVALID_HANDLE;

   return i_status;

}/*End arb_ioctl*/
   10956:	b8 01       	movw	r22, r16
   10958:	c9 01       	movw	r24, r18
   1095a:	0f 90       	pop	r0
   1095c:	0f 90       	pop	r0
   1095e:	df 91       	pop	r29
   10960:	cf 91       	pop	r28
   10962:	1f 91       	pop	r17
   10964:	0f 91       	pop	r16
   10966:	ff 90       	pop	r15
   10968:	ef 90       	pop	r14
   1096a:	df 90       	pop	r13
   1096c:	cf 90       	pop	r12
   1096e:	08 95       	ret

00010970 <arb_close>:

t_error arb_close( t_DEVHANDLE t_handle)
{
   10970:	0f 93       	push	r16
   10972:	1f 93       	push	r17
   10974:	cf 93       	push	r28
   10976:	df 93       	push	r29
   10978:	0f 92       	push	r0
   1097a:	0f 92       	push	r0
   1097c:	cd b7       	in	r28, 0x3d	; 61
   1097e:	de b7       	in	r29, 0x3e	; 62
   10980:	89 83       	std	Y+1, r24	; 0x01
   10982:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR(\
   10984:	e9 81       	ldd	r30, Y+1	; 0x01
   10986:	fa 81       	ldd	r31, Y+2	; 0x02
   10988:	00 81       	ld	r16, Z
   1098a:	11 81       	ldd	r17, Z+1	; 0x01
   t_error t_err;

   /*------------------------------------------------------------------------*
    * If this is a valid 'user-space' handle then close the connection...
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   1098c:	e9 81       	ldd	r30, Y+1	; 0x01
   1098e:	fa 81       	ldd	r31, Y+2	; 0x02
   10990:	80 91 44 22 	lds	r24, 0x2244
   10994:	90 91 45 22 	lds	r25, 0x2245
   10998:	24 81       	ldd	r18, Z+4	; 0x04
   1099a:	35 81       	ldd	r19, Z+5	; 0x05
   1099c:	28 17       	cp	r18, r24
   1099e:	39 07       	cpc	r19, r25
   109a0:	01 f5       	brne	.+64     	; 0x109e2 <arb_close+0x72>
   {

      /*---------------------------------------------------------------------*
       * Call device driver's close method.
       *---------------------------------------------------------------------*/
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   109a2:	d8 01       	movw	r26, r16
   109a4:	ed 91       	ld	r30, X+
   109a6:	fc 91       	ld	r31, X
   109a8:	11 97       	sbiw	r26, 0x01	; 1
   109aa:	03 88       	ldd	r0, Z+19	; 0x13
   109ac:	f4 89       	ldd	r31, Z+20	; 0x14
   109ae:	e0 2d       	mov	r30, r0
   109b0:	30 97       	sbiw	r30, 0x00	; 0
   109b2:	c9 f0       	breq	.+50     	; 0x109e6 <arb_close+0x76>
      {
         t_err = pt_devHandle->pt_dev->pt_devOps->pf_close( (t_DEVHANDLE)
   109b4:	00 84       	ldd	r0, Z+8	; 0x08
   109b6:	f1 85       	ldd	r31, Z+9	; 0x09
   109b8:	e0 2d       	mov	r30, r0
   109ba:	c8 01       	movw	r24, r16
   109bc:	19 95       	eicall
         pt_devHandle);

         if( t_err < 0)
   109be:	87 fd       	sbrc	r24, 7
   109c0:	13 c0       	rjmp	.+38     	; 0x109e8 <arb_close+0x78>

         /*------------------------------------------------------------------*
          * Decrement the count of handles opened against this particular
          * device driver.
          *------------------------------------------------------------------*/
         pt_devHandle->pt_dev->c_numDevHandles--;
   109c2:	d8 01       	movw	r26, r16
   109c4:	ed 91       	ld	r30, X+
   109c6:	fc 91       	ld	r31, X
   109c8:	82 89       	ldd	r24, Z+18	; 0x12
   109ca:	81 50       	subi	r24, 0x01	; 1
   109cc:	82 8b       	std	Z+18, r24	; 0x12

         t_err = utl_destroyLink( gt_activeHandles,
   109ce:	80 91 44 22 	lds	r24, 0x2244
   109d2:	90 91 45 22 	lds	r25, 0x2245
   109d6:	69 81       	ldd	r22, Y+1	; 0x01
   109d8:	7a 81       	ldd	r23, Y+2	; 0x02
   109da:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>

   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/
   else
      return ARB_INVALID_HANDLE;

   return ARB_PASSED;
   109de:	80 e0       	ldi	r24, 0x00	; 0
   109e0:	03 c0       	rjmp	.+6      	; 0x109e8 <arb_close+0x78>
      else
         return ARB_NULL_PTR;

   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/
   else
      return ARB_INVALID_HANDLE;
   109e2:	89 ef       	ldi	r24, 0xF9	; 249
   109e4:	01 c0       	rjmp	.+2      	; 0x109e8 <arb_close+0x78>

         t_err = utl_destroyLink( gt_activeHandles,
                                  (t_LINKHNDL)t_handle);
      }
      else
         return ARB_NULL_PTR;
   109e6:	8d ef       	ldi	r24, 0xFD	; 253
   else
      return ARB_INVALID_HANDLE;

   return ARB_PASSED;

}/*End arb_close*/
   109e8:	0f 90       	pop	r0
   109ea:	0f 90       	pop	r0
   109ec:	df 91       	pop	r29
   109ee:	cf 91       	pop	r28
   109f0:	1f 91       	pop	r17
   109f2:	0f 91       	pop	r16
   109f4:	08 95       	ret

000109f6 <arb_registerDevice>:

t_error arb_registerDevice( char *pc_name,
                            t_deviceId t_devId,
                            t_deviceOperations *pt_devOps)
{
   109f6:	ef 92       	push	r14
   109f8:	ff 92       	push	r15
   109fa:	0f 93       	push	r16
   109fc:	1f 93       	push	r17
   109fe:	cf 93       	push	r28
   10a00:	df 93       	push	r29
   10a02:	cd b7       	in	r28, 0x3d	; 61
   10a04:	de b7       	in	r29, 0x3e	; 62
   10a06:	29 97       	sbiw	r28, 0x09	; 9
   10a08:	cd bf       	out	0x3d, r28	; 61
   10a0a:	de bf       	out	0x3e, r29	; 62
   10a0c:	18 2f       	mov	r17, r24
   10a0e:	09 2f       	mov	r16, r25
   10a10:	68 87       	std	Y+8, r22	; 0x08
   10a12:	79 87       	std	Y+9, r23	; 0x09
   10a14:	7a 01       	movw	r14, r20
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables- in this case the
    * handle to the device driver, we need to protect against interruption
    * from another process while the driver is being added to the list.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   10a16:	8f b7       	in	r24, 0x3f	; 63
   10a18:	89 83       	std	Y+1, r24	; 0x01
   10a1a:	f8 94       	cli

   if( strlen( pc_name) > MAX_DEVICE_NAME_BYTES)
   10a1c:	a1 2f       	mov	r26, r17
   10a1e:	b9 2f       	mov	r27, r25
   10a20:	fd 01       	movw	r30, r26
   10a22:	01 90       	ld	r0, Z+
   10a24:	00 20       	and	r0, r0
   10a26:	e9 f7       	brne	.-6      	; 0x10a22 <arb_registerDevice+0x2c>
   10a28:	31 97       	sbiw	r30, 0x01	; 1
   10a2a:	ea 1b       	sub	r30, r26
   10a2c:	fb 0b       	sbc	r31, r27
   10a2e:	e1 31       	cpi	r30, 0x11	; 17
   10a30:	f1 05       	cpc	r31, r1
   10a32:	20 f0       	brcs	.+8      	; 0x10a3c <arb_registerDevice+0x46>
   {
      HAL_END_CRITICAL();//Enable interrupts
   10a34:	89 81       	ldd	r24, Y+1	; 0x01
   10a36:	8f bf       	out	0x3f, r24	; 63
      return ARB_NAME_ERROR;
   10a38:	8c ef       	ldi	r24, 0xFC	; 252
   10a3a:	74 c0       	rjmp	.+232    	; 0x10b24 <arb_registerDevice+0x12e>
   }/*End if( s_length > MAX_DEVICE_NAME_BYTES)*/

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same name
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_name);
   10a3c:	81 2f       	mov	r24, r17
   10a3e:	0e 94 e7 82 	call	0x105ce	; 0x105ce <arb_getDeviceLinkByName>
   10a42:	8e 83       	std	Y+6, r24	; 0x06
   10a44:	9f 83       	std	Y+7, r25	; 0x07

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same ID
    *------------------------------------------------------------------------*/
   t_devLink2 = arb_getDeviceLinkById( t_devId);
   10a46:	88 85       	ldd	r24, Y+8	; 0x08
   10a48:	99 85       	ldd	r25, Y+9	; 0x09
   10a4a:	78 2f       	mov	r23, r24
   10a4c:	69 2f       	mov	r22, r25
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with an ID of t_devId
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10a4e:	e0 91 52 22 	lds	r30, 0x2252
   10a52:	f0 91 53 22 	lds	r31, 0x2253
   10a56:	42 81       	ldd	r20, Z+2	; 0x02
   10a58:	53 81       	ldd	r21, Z+3	; 0x03
   10a5a:	e0 91 52 22 	lds	r30, 0x2252
   10a5e:	f0 91 53 22 	lds	r31, 0x2253
   10a62:	13 c0       	rjmp	.+38     	; 0x10a8a <arb_registerDevice+0x94>
   {
      pt_curr = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   10a64:	ea 81       	ldd	r30, Y+2	; 0x02
   10a66:	fb 81       	ldd	r31, Y+3	; 0x03
   10a68:	01 90       	ld	r0, Z+
   10a6a:	f0 81       	ld	r31, Z
   10a6c:	e0 2d       	mov	r30, r0
      if( pt_curr->t_devId == t_devId)
   10a6e:	20 81       	ld	r18, Z
   10a70:	31 81       	ldd	r19, Z+1	; 0x01
   10a72:	87 2f       	mov	r24, r23
   10a74:	96 2f       	mov	r25, r22
   10a76:	28 17       	cp	r18, r24
   10a78:	39 07       	cpc	r19, r25
   10a7a:	19 f4       	brne	.+6      	; 0x10a82 <arb_registerDevice+0x8c>
      {
         return t_linkHndl;
   10a7c:	8a 81       	ldd	r24, Y+2	; 0x02
   10a7e:	9b 81       	ldd	r25, Y+3	; 0x03
   10a80:	0d c0       	rjmp	.+26     	; 0x10a9c <arb_registerDevice+0xa6>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with an ID of t_devId
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10a82:	41 50       	subi	r20, 0x01	; 1
   10a84:	50 40       	sbci	r21, 0x00	; 0
   10a86:	ea 81       	ldd	r30, Y+2	; 0x02
   10a88:	fb 81       	ldd	r31, Y+3	; 0x03
   10a8a:	80 85       	ldd	r24, Z+8	; 0x08
   10a8c:	91 85       	ldd	r25, Z+9	; 0x09
   10a8e:	8a 83       	std	Y+2, r24	; 0x02
   10a90:	9b 83       	std	Y+3, r25	; 0x03
   10a92:	14 16       	cp	r1, r20
   10a94:	15 06       	cpc	r1, r21
   10a96:	34 f3       	brlt	.-52     	; 0x10a64 <arb_registerDevice+0x6e>
   }

   /*------------------------------------------------------------------------*
    * If we make it this far the name has not been found in the device list
    *------------------------------------------------------------------------*/
   return (t_LINKHNDL)ARB_DEVICE_NOT_FOUND;
   10a98:	87 ef       	ldi	r24, 0xF7	; 247
   10a9a:	9f ef       	ldi	r25, 0xFF	; 255
   t_devLink = arb_getDeviceLinkByName( pc_name);

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same ID
    *------------------------------------------------------------------------*/
   t_devLink2 = arb_getDeviceLinkById( t_devId);
   10a9c:	8c 83       	std	Y+4, r24	; 0x04
   10a9e:	9d 83       	std	Y+5, r25	; 0x05

   if( (t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND) && (t_devLink2
   10aa0:	8e 81       	ldd	r24, Y+6	; 0x06
   10aa2:	9f 81       	ldd	r25, Y+7	; 0x07
   10aa4:	2f ef       	ldi	r18, 0xFF	; 255
   10aa6:	87 3f       	cpi	r24, 0xF7	; 247
   10aa8:	92 07       	cpc	r25, r18
   10aaa:	c9 f5       	brne	.+114    	; 0x10b1e <arb_registerDevice+0x128>
   == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND))
   10aac:	8c 81       	ldd	r24, Y+4	; 0x04
   10aae:	9d 81       	ldd	r25, Y+5	; 0x05
   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same ID
    *------------------------------------------------------------------------*/
   t_devLink2 = arb_getDeviceLinkById( t_devId);

   if( (t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND) && (t_devLink2
   10ab0:	af ef       	ldi	r26, 0xFF	; 255
   10ab2:	87 3f       	cpi	r24, 0xF7	; 247
   10ab4:	9a 07       	cpc	r25, r26
   10ab6:	99 f5       	brne	.+102    	; 0x10b1e <arb_registerDevice+0x128>
   {

      /*---------------------------------------------------------------------*
       * Create a new link where the device driver information will be stored.
       *---------------------------------------------------------------------*/
      t_devLink = utl_createLink( sizeof(t_device));
   10ab8:	85 e1       	ldi	r24, 0x15	; 21
   10aba:	90 e0       	ldi	r25, 0x00	; 0
   10abc:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   10ac0:	8e 83       	std	Y+6, r24	; 0x06
   10ac2:	9f 83       	std	Y+7, r25	; 0x07

      if( t_devLink < 0)
   10ac4:	8e 81       	ldd	r24, Y+6	; 0x06
   10ac6:	9f 81       	ldd	r25, Y+7	; 0x07
   10ac8:	97 ff       	sbrs	r25, 7
   10aca:	04 c0       	rjmp	.+8      	; 0x10ad4 <arb_registerDevice+0xde>
      {
         HAL_END_CRITICAL();//Enable interrupts
   10acc:	89 81       	ldd	r24, Y+1	; 0x01
   10ace:	8f bf       	out	0x3f, r24	; 63
         return ARB_OUT_OF_HEAP;
   10ad0:	8f ef       	ldi	r24, 0xFF	; 255
   10ad2:	28 c0       	rjmp	.+80     	; 0x10b24 <arb_registerDevice+0x12e>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the device
       * information is being stored.
       *---------------------------------------------------------------------*/
      pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_devLink);
   10ad4:	ee 81       	ldd	r30, Y+6	; 0x06
   10ad6:	ff 81       	ldd	r31, Y+7	; 0x07
   10ad8:	01 90       	ld	r0, Z+
   10ada:	f0 81       	ld	r31, Z
   10adc:	e0 2d       	mov	r30, r0

      /*---------------------------------------------------------------------*
       * Configure the device by storing the callback functions, name, and
       * device ID.
       *---------------------------------------------------------------------*/
      arb_initDevice( &pt_device,
   10ade:	88 85       	ldd	r24, Y+8	; 0x08
   10ae0:	99 85       	ldd	r25, Y+9	; 0x09
{

   /*------------------------------------------------------------------------*
    * Initialize this new memory region to 0
    *------------------------------------------------------------------------*/
   memset( (*pt_newDevice), 0, sizeof( t_device));
   10ae2:	25 e1       	ldi	r18, 0x15	; 21
   10ae4:	df 01       	movw	r26, r30
   10ae6:	1d 92       	st	X+, r1
   10ae8:	2a 95       	dec	r18
   10aea:	e9 f7       	brne	.-6      	; 0x10ae6 <arb_registerDevice+0xf0>

   (*pt_newDevice)->t_devId = t_devId;
   10aec:	80 83       	st	Z, r24
   10aee:	91 83       	std	Z+1, r25	; 0x01

   (*pt_newDevice)->pt_devOps = (*pt_devOps);
   10af0:	e3 8a       	std	Z+19, r14	; 0x13
   10af2:	f4 8a       	std	Z+20, r15	; 0x14

   strncpy( (char *)(*pt_newDevice)->ac_deviceName, (char *)(*pc_name),
   10af4:	cf 01       	movw	r24, r30
   10af6:	02 96       	adiw	r24, 0x02	; 2
   10af8:	61 2f       	mov	r22, r17
   10afa:	70 2f       	mov	r23, r16
   10afc:	40 e1       	ldi	r20, 0x10	; 16
   10afe:	50 e0       	ldi	r21, 0x00	; 0
   10b00:	0e 94 2f b7 	call	0x16e5e	; 0x16e5e <strncpy>
                      t_devId);

      /*---------------------------------------------------------------------*
       * Add the device onto the list of available device drivers.
       *---------------------------------------------------------------------*/
      t_err = utl_insertLink( gt_activeDevices,
   10b04:	80 91 52 22 	lds	r24, 0x2252
   10b08:	90 91 53 22 	lds	r25, 0x2253
   10b0c:	6e 81       	ldd	r22, Y+6	; 0x06
   10b0e:	7f 81       	ldd	r23, Y+7	; 0x07
   10b10:	41 e0       	ldi	r20, 0x01	; 1
   10b12:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return ARB_DEVICE_PRESENT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   10b16:	89 81       	ldd	r24, Y+1	; 0x01
   10b18:	8f bf       	out	0x3f, r24	; 63

   return ARB_PASSED;
   10b1a:	80 e0       	ldi	r24, 0x00	; 0
   10b1c:	03 c0       	rjmp	.+6      	; 0x10b24 <arb_registerDevice+0x12e>
                              true);

   }
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   10b1e:	89 81       	ldd	r24, Y+1	; 0x01
   10b20:	8f bf       	out	0x3f, r24	; 63
      return ARB_DEVICE_PRESENT;
   10b22:	8e ef       	ldi	r24, 0xFE	; 254

   HAL_END_CRITICAL();//Enable interrupts

   return ARB_PASSED;

}/*End arb_registerDevice*/
   10b24:	29 96       	adiw	r28, 0x09	; 9
   10b26:	cd bf       	out	0x3d, r28	; 61
   10b28:	de bf       	out	0x3e, r29	; 62
   10b2a:	df 91       	pop	r29
   10b2c:	cf 91       	pop	r28
   10b2e:	1f 91       	pop	r17
   10b30:	0f 91       	pop	r16
   10b32:	ff 90       	pop	r15
   10b34:	ef 90       	pop	r14
   10b36:	08 95       	ret

00010b38 <arb_destroyDevice>:

t_error arb_destroyDevice( char *pc_name)
{
   10b38:	ef 92       	push	r14
   10b3a:	ff 92       	push	r15
   10b3c:	0f 93       	push	r16
   10b3e:	1f 93       	push	r17
   10b40:	cf 93       	push	r28
   10b42:	df 93       	push	r29
   10b44:	0f 92       	push	r0
   10b46:	cd b7       	in	r28, 0x3d	; 61
   10b48:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables- in this case the
    * handle to the device driver, we need to protect against interruption
    * from another process while the driver is being removed from the list.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   10b4a:	2f b7       	in	r18, 0x3f	; 63
   10b4c:	29 83       	std	Y+1, r18	; 0x01
   10b4e:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Search the active device list for this particular ID.
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_name);
   10b50:	0e 94 e7 82 	call	0x105ce	; 0x105ce <arb_getDeviceLinkByName>
   10b54:	80 93 01 27 	sts	0x2701, r24
   10b58:	90 93 02 27 	sts	0x2702, r25

   if( t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND)
   10b5c:	80 91 01 27 	lds	r24, 0x2701
   10b60:	90 91 02 27 	lds	r25, 0x2702
   10b64:	2f ef       	ldi	r18, 0xFF	; 255
   10b66:	87 3f       	cpi	r24, 0xF7	; 247
   10b68:	92 07       	cpc	r25, r18
   10b6a:	21 f4       	brne	.+8      	; 0x10b74 <arb_destroyDevice+0x3c>
   {
      HAL_END_CRITICAL();//Enable interrupts
   10b6c:	89 81       	ldd	r24, Y+1	; 0x01
   10b6e:	8f bf       	out	0x3f, r24	; 63
      return ARB_DEVICE_NOT_FOUND;
   10b70:	87 ef       	ldi	r24, 0xF7	; 247
   10b72:	57 c0       	rjmp	.+174    	; 0x10c22 <arb_destroyDevice+0xea>
   }/*End if( t_devLink == NULL)*/

   pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_devLink);
   10b74:	e0 91 01 27 	lds	r30, 0x2701
   10b78:	f0 91 02 27 	lds	r31, 0x2702
   10b7c:	e0 80       	ld	r14, Z
   10b7e:	f1 80       	ldd	r15, Z+1	; 0x01
    * list changing the value of 't_hndlLink' on each iteration, once
    * 't_hndlLink' has been deleted information about the next position on the
    * list is lost. This issue is resolved by using a previous ptr to change
    * 't_hndlLink' back to a valid location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_hndlLink, gt_activeHandles, s_count)
   10b80:	e0 91 44 22 	lds	r30, 0x2244
   10b84:	f0 91 45 22 	lds	r31, 0x2245
   10b88:	02 81       	ldd	r16, Z+2	; 0x02
   10b8a:	13 81       	ldd	r17, Z+3	; 0x03
   10b8c:	e0 91 44 22 	lds	r30, 0x2244
   10b90:	f0 91 45 22 	lds	r31, 0x2245
   10b94:	30 c0       	rjmp	.+96     	; 0x10bf6 <arb_destroyDevice+0xbe>
   {
      pt_handle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR( t_hndlLink);
   10b96:	e0 91 ff 26 	lds	r30, 0x26FF
   10b9a:	f0 91 00 27 	lds	r31, 0x2700
   10b9e:	01 90       	ld	r0, Z+
   10ba0:	f0 81       	ld	r31, Z
   10ba2:	e0 2d       	mov	r30, r0
      t_prevHndlLink = UTL_GET_PREV_LINK( t_hndlLink);
   10ba4:	a0 91 ff 26 	lds	r26, 0x26FF
   10ba8:	b0 91 00 27 	lds	r27, 0x2700
   10bac:	1a 96       	adiw	r26, 0x0a	; 10
   10bae:	8d 91       	ld	r24, X+
   10bb0:	9c 91       	ld	r25, X
   10bb2:	1b 97       	sbiw	r26, 0x0b	; 11
   10bb4:	80 93 fd 26 	sts	0x26FD, r24
   10bb8:	90 93 fe 26 	sts	0x26FE, r25
      if( pt_handle->pt_dev == pt_device)
   10bbc:	80 81       	ld	r24, Z
   10bbe:	91 81       	ldd	r25, Z+1	; 0x01
   10bc0:	8e 15       	cp	r24, r14
   10bc2:	9f 05       	cpc	r25, r15
   10bc4:	91 f4       	brne	.+36     	; 0x10bea <arb_destroyDevice+0xb2>
      {
         t_err = utl_destroyLink( gt_activeHandles, t_hndlLink);
   10bc6:	80 91 44 22 	lds	r24, 0x2244
   10bca:	90 91 45 22 	lds	r25, 0x2245
   10bce:	60 91 ff 26 	lds	r22, 0x26FF
   10bd2:	70 91 00 27 	lds	r23, 0x2700
   10bd6:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
         t_hndlLink = t_prevHndlLink;
   10bda:	80 91 fd 26 	lds	r24, 0x26FD
   10bde:	90 91 fe 26 	lds	r25, 0x26FE
   10be2:	80 93 ff 26 	sts	0x26FF, r24
   10be6:	90 93 00 27 	sts	0x2700, r25
    * list changing the value of 't_hndlLink' on each iteration, once
    * 't_hndlLink' has been deleted information about the next position on the
    * list is lost. This issue is resolved by using a previous ptr to change
    * 't_hndlLink' back to a valid location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_hndlLink, gt_activeHandles, s_count)
   10bea:	01 50       	subi	r16, 0x01	; 1
   10bec:	10 40       	sbci	r17, 0x00	; 0
   10bee:	e0 91 ff 26 	lds	r30, 0x26FF
   10bf2:	f0 91 00 27 	lds	r31, 0x2700
   10bf6:	80 85       	ldd	r24, Z+8	; 0x08
   10bf8:	91 85       	ldd	r25, Z+9	; 0x09
   10bfa:	80 93 ff 26 	sts	0x26FF, r24
   10bfe:	90 93 00 27 	sts	0x2700, r25
   10c02:	10 16       	cp	r1, r16
   10c04:	11 06       	cpc	r1, r17
   10c06:	3c f2       	brlt	.-114    	; 0x10b96 <arb_destroyDevice+0x5e>
   }

   /*------------------------------------------------------------------------*
    * Remove the device driver from the driver list.
    *------------------------------------------------------------------------*/
   t_err = utl_destroyLink( gt_activeDevices,
   10c08:	80 91 52 22 	lds	r24, 0x2252
   10c0c:	90 91 53 22 	lds	r25, 0x2253
   10c10:	60 91 01 27 	lds	r22, 0x2701
   10c14:	70 91 02 27 	lds	r23, 0x2702
   10c18:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                            (t_LINKHNDL)t_devLink);

   HAL_END_CRITICAL();//Enable interrupts
   10c1c:	89 81       	ldd	r24, Y+1	; 0x01
   10c1e:	8f bf       	out	0x3f, r24	; 63

   return ARB_PASSED;
   10c20:	80 e0       	ldi	r24, 0x00	; 0

}/*End arb_destroyDevice*/
   10c22:	0f 90       	pop	r0
   10c24:	df 91       	pop	r29
   10c26:	cf 91       	pop	r28
   10c28:	1f 91       	pop	r17
   10c2a:	0f 91       	pop	r16
   10c2c:	ff 90       	pop	r15
   10c2e:	ef 90       	pop	r14
   10c30:	08 95       	ret

00010c32 <arb_stackOverflow>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_stackOverflow( void)
{
   10c32:	cf 93       	push	r28
   10c34:	df 93       	push	r29
   10c36:	0f 92       	push	r0
   10c38:	cd b7       	in	r28, 0x3d	; 61
   10c3a:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * If you have reached this point, a thread's stack has overflowed. This
    * function can never return.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL( );
   10c3c:	8f b7       	in	r24, 0x3f	; 63
   10c3e:	89 83       	std	Y+1, r24	; 0x01
   10c40:	f8 94       	cli

   arb_setPrintfDbgLevel( PRINTF_DBG_HIGH);
   10c42:	84 e0       	ldi	r24, 0x04	; 4
   10c44:	0e 94 8a 8b 	call	0x11714	; 0x11714 <arb_setPrintfDbgLevel>

   sprintf( (char *)ac_buff,
   10c48:	00 d0       	rcall	.+0      	; 0x10c4a <arb_stackOverflow+0x18>
   10c4a:	00 d0       	rcall	.+0      	; 0x10c4c <arb_stackOverflow+0x1a>
   10c4c:	ed b7       	in	r30, 0x3d	; 61
   10c4e:	fe b7       	in	r31, 0x3e	; 62
   10c50:	31 96       	adiw	r30, 0x01	; 1
   10c52:	03 e0       	ldi	r16, 0x03	; 3
   10c54:	17 e2       	ldi	r17, 0x27	; 39
   10c56:	ad b7       	in	r26, 0x3d	; 61
   10c58:	be b7       	in	r27, 0x3e	; 62
   10c5a:	11 96       	adiw	r26, 0x01	; 1
   10c5c:	0d 93       	st	X+, r16
   10c5e:	1c 93       	st	X, r17
   10c60:	12 97       	sbiw	r26, 0x02	; 2
   10c62:	80 e6       	ldi	r24, 0x60	; 96
   10c64:	92 e2       	ldi	r25, 0x22	; 34
   10c66:	82 83       	std	Z+2, r24	; 0x02
   10c68:	93 83       	std	Z+3, r25	; 0x03
            "\n\rStack Overflow Thread = %d\n\r",
            gpt_activeThread->c_id);
   10c6a:	a0 91 34 27 	lds	r26, 0x2734
   10c6e:	b0 91 35 27 	lds	r27, 0x2735
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL( );

   arb_setPrintfDbgLevel( PRINTF_DBG_HIGH);

   sprintf( (char *)ac_buff,
   10c72:	8c 91       	ld	r24, X
   10c74:	84 83       	std	Z+4, r24	; 0x04
   10c76:	15 82       	std	Z+5, r1	; 0x05
   10c78:	0e 94 a4 b7 	call	0x16f48	; 0x16f48 <sprintf>
            "\n\rStack Overflow Thread = %d\n\r",
            gpt_activeThread->c_id);

   arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
   10c7c:	8d b7       	in	r24, 0x3d	; 61
   10c7e:	9e b7       	in	r25, 0x3e	; 62
   10c80:	06 96       	adiw	r24, 0x06	; 6
   10c82:	8d bf       	out	0x3d, r24	; 61
   10c84:	9e bf       	out	0x3e, r25	; 62
   10c86:	84 e4       	ldi	r24, 0x44	; 68
   10c88:	b8 01       	movw	r22, r16
   10c8a:	0e 94 b0 8b 	call	0x11760	; 0x11760 <arb_printf>
               (char *)ac_buff);

   /*------------------------------------------------------------------------*
    * Write the contents of the buffer to the registered devices.
    *------------------------------------------------------------------------*/
   arb_printfFlushBuf();
   10c8e:	0e 94 0b 8d 	call	0x11a16	; 0x11a16 <arb_printfFlushBuf>
      
   exit(0);
   10c92:	80 e0       	ldi	r24, 0x00	; 0
   10c94:	90 e0       	ldi	r25, 0x00	; 0
   10c96:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>

00010c9a <arb_idle>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_idle( t_parameters t_param,
               t_arguments  t_args)
{
   10c9a:	cf 93       	push	r28
   10c9c:	df 93       	push	r29
   10c9e:	cd b7       	in	r28, 0x3d	; 61
   10ca0:	de b7       	in	r29, 0x3e	; 62
   10ca2:	c8 56       	subi	r28, 0x68	; 104
   10ca4:	d0 40       	sbci	r29, 0x00	; 0
   10ca6:	cd bf       	out	0x3d, r28	; 61
   10ca8:	de bf       	out	0x3e, r29	; 62
   uint32_t i_counter = 0;

   /*------------------------------------------------------------------------*
    * Start the watchdog timer.
    *------------------------------------------------------------------------*/
   hal_wdEnable( gt_idleObject.t_wdHndle);
   10caa:	80 91 23 27 	lds	r24, 0x2723
   10cae:	90 91 24 27 	lds	r25, 0x2724
   10cb2:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <hal_wdEnable>
{
   uint64_t l_currM;
   uint64_t l_prevM;
   uint64_t l_delta;
   const char ac_msg[100];
   uint32_t i_counter = 0;
   10cb6:	44 24       	eor	r4, r4
   10cb8:	55 24       	eor	r5, r5
   10cba:	32 01       	movw	r6, r4
   /*------------------------------------------------------------------------*
    * Start the watchdog timer.
    *------------------------------------------------------------------------*/
   hal_wdEnable( gt_idleObject.t_wdHndle);

   l_prevM = 0;
   10cbc:	33 24       	eor	r3, r3
   10cbe:	22 24       	eor	r2, r2
   10cc0:	a6 96       	adiw	r28, 0x26	; 38
   10cc2:	1f ae       	sts	0xbf, r17
   10cc4:	a6 97       	sbiw	r28, 0x26	; 38
   10cc6:	a7 96       	adiw	r28, 0x27	; 39
   10cc8:	1f ae       	sts	0xbf, r17
   10cca:	a7 97       	sbiw	r28, 0x27	; 39
   10ccc:	a8 96       	adiw	r28, 0x28	; 40
   10cce:	1f ae       	sts	0xbf, r17
   10cd0:	a8 97       	sbiw	r28, 0x28	; 40
   10cd2:	a9 96       	adiw	r28, 0x29	; 41
   10cd4:	1f ae       	sts	0xbf, r17
   10cd6:	a9 97       	sbiw	r28, 0x29	; 41
   10cd8:	99 24       	eor	r9, r9
   10cda:	88 24       	eor	r8, r8

   while( RUN_FOREVER)
   {
      l_currM = arb_sysMsecNow();
   10cdc:	0e 94 ec 9b 	call	0x137d8	; 0x137d8 <arb_sysMsecNow>

      l_delta = arb_sysMsecDelta( l_currM,
   10ce0:	a3 2c       	mov	r10, r3
   10ce2:	b2 2c       	mov	r11, r2
   10ce4:	a6 96       	adiw	r28, 0x26	; 38
   10ce6:	cf ac       	sts	0xaf, r28
   10ce8:	a6 97       	sbiw	r28, 0x26	; 38
   10cea:	a7 96       	adiw	r28, 0x27	; 39
   10cec:	df ac       	sts	0xaf, r29
   10cee:	a7 97       	sbiw	r28, 0x27	; 39
   10cf0:	a8 96       	adiw	r28, 0x28	; 40
   10cf2:	ef ac       	sts	0xaf, r30
   10cf4:	a8 97       	sbiw	r28, 0x28	; 40
   10cf6:	a9 96       	adiw	r28, 0x29	; 41
   10cf8:	ff ac       	sts	0xaf, r31
   10cfa:	a9 97       	sbiw	r28, 0x29	; 41
   10cfc:	09 2d       	mov	r16, r9
   10cfe:	18 2d       	mov	r17, r8
   10d00:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <arb_sysMsecDelta>
                                  l_prevM);

      if( l_delta >= IDLE_WATCHDOG_PET_RATE)
   10d04:	99 23       	and	r25, r25
   10d06:	91 f4       	brne	.+36     	; 0x10d2c <arb_idle+0x92>
   10d08:	88 23       	and	r24, r24
   10d0a:	81 f4       	brne	.+32     	; 0x10d2c <arb_idle+0x92>
   10d0c:	77 23       	and	r23, r23
   10d0e:	71 f4       	brne	.+28     	; 0x10d2c <arb_idle+0x92>
   10d10:	66 23       	and	r22, r22
   10d12:	61 f4       	brne	.+24     	; 0x10d2c <arb_idle+0x92>
   10d14:	55 23       	and	r21, r21
   10d16:	51 f4       	brne	.+20     	; 0x10d2c <arb_idle+0x92>
   10d18:	44 23       	and	r20, r20
   10d1a:	41 f4       	brne	.+16     	; 0x10d2c <arb_idle+0x92>
   10d1c:	38 30       	cpi	r19, 0x08	; 8
   10d1e:	30 f4       	brcc	.+12     	; 0x10d2c <arb_idle+0x92>
   10d20:	37 30       	cpi	r19, 0x07	; 7
   10d22:	09 f0       	breq	.+2      	; 0x10d26 <arb_idle+0x8c>
   10d24:	49 c0       	rjmp	.+146    	; 0x10db8 <arb_idle+0x11e>
   10d26:	20 3d       	cpi	r18, 0xD0	; 208
   10d28:	08 f4       	brcc	.+2      	; 0x10d2c <arb_idle+0x92>
   10d2a:	46 c0       	rjmp	.+140    	; 0x10db8 <arb_idle+0x11e>
      {
         i_counter++;
   10d2c:	08 94       	sec
   10d2e:	41 1c       	adc	r4, r1
   10d30:	51 1c       	adc	r5, r1
   10d32:	61 1c       	adc	r6, r1
   10d34:	71 1c       	adc	r7, r1

         /*------------------------------------------------------------------*
          * Store the previous time...
          *------------------------------------------------------------------*/
         l_prevM = arb_sysMsecNow();
   10d36:	0e 94 ec 9b 	call	0x137d8	; 0x137d8 <arb_sysMsecNow>
   10d3a:	32 2e       	mov	r3, r18
   10d3c:	23 2e       	mov	r2, r19
   10d3e:	a6 96       	adiw	r28, 0x26	; 38
   10d40:	4f af       	sts	0x7f, r20
   10d42:	a6 97       	sbiw	r28, 0x26	; 38
   10d44:	a7 96       	adiw	r28, 0x27	; 39
   10d46:	5f af       	sts	0x7f, r21
   10d48:	a7 97       	sbiw	r28, 0x27	; 39
   10d4a:	a8 96       	adiw	r28, 0x28	; 40
   10d4c:	6f af       	sts	0x7f, r22
   10d4e:	a8 97       	sbiw	r28, 0x28	; 40
   10d50:	a9 96       	adiw	r28, 0x29	; 41
   10d52:	7f af       	sts	0x7f, r23
   10d54:	a9 97       	sbiw	r28, 0x29	; 41
   10d56:	98 2e       	mov	r9, r24
   10d58:	89 2e       	mov	r8, r25

         sprintf( (void *)ac_msg,
   10d5a:	8d b7       	in	r24, 0x3d	; 61
   10d5c:	9e b7       	in	r25, 0x3e	; 62
   10d5e:	08 97       	sbiw	r24, 0x08	; 8
   10d60:	8d bf       	out	0x3d, r24	; 61
   10d62:	9e bf       	out	0x3e, r25	; 62
   10d64:	0d b7       	in	r16, 0x3d	; 61
   10d66:	1e b7       	in	r17, 0x3e	; 62
   10d68:	0f 5f       	subi	r16, 0xFF	; 255
   10d6a:	1f 4f       	sbci	r17, 0xFF	; 255
   10d6c:	81 e0       	ldi	r24, 0x01	; 1
   10d6e:	90 e0       	ldi	r25, 0x00	; 0
   10d70:	8c 0f       	add	r24, r28
   10d72:	9d 1f       	adc	r25, r29
   10d74:	ed b7       	in	r30, 0x3d	; 61
   10d76:	fe b7       	in	r31, 0x3e	; 62
   10d78:	81 83       	std	Z+1, r24	; 0x01
   10d7a:	92 83       	std	Z+2, r25	; 0x02
   10d7c:	8f e7       	ldi	r24, 0x7F	; 127
   10d7e:	92 e2       	ldi	r25, 0x22	; 34
   10d80:	f8 01       	movw	r30, r16
   10d82:	82 83       	std	Z+2, r24	; 0x02
   10d84:	93 83       	std	Z+3, r25	; 0x03
   10d86:	c3 01       	movw	r24, r6
   10d88:	b2 01       	movw	r22, r4
   10d8a:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
   10d8e:	dc 01       	movw	r26, r24
   10d90:	cb 01       	movw	r24, r22
   10d92:	f8 01       	movw	r30, r16
   10d94:	84 83       	std	Z+4, r24	; 0x04
   10d96:	95 83       	std	Z+5, r25	; 0x05
   10d98:	a6 83       	std	Z+6, r26	; 0x06
   10d9a:	b7 83       	std	Z+7, r27	; 0x07
   10d9c:	0e 94 a4 b7 	call	0x16f48	; 0x16f48 <sprintf>
                  "Petting watchdog timer %7.0f\r",
                  (double)i_counter);

         arb_printf( PRINTF_DBG_LOW | PRINTF_DBG_SHOW_TIME,
   10da0:	8d b7       	in	r24, 0x3d	; 61
   10da2:	9e b7       	in	r25, 0x3e	; 62
   10da4:	08 96       	adiw	r24, 0x08	; 8
   10da6:	8d bf       	out	0x3d, r24	; 61
   10da8:	9e bf       	out	0x3e, r25	; 62
   10daa:	81 e4       	ldi	r24, 0x41	; 65
   10dac:	be 01       	movw	r22, r28
   10dae:	6f 5f       	subi	r22, 0xFF	; 255
   10db0:	7f 4f       	sbci	r23, 0xFF	; 255
   10db2:	0e 94 b0 8b 	call	0x11760	; 0x11760 <arb_printf>
                     ac_msg);

         /*------------------------------------------------------------------*
          * Pet the watchdog timer...
          *------------------------------------------------------------------*/
         HAL_WD_RESET();
   10db6:	a8 95       	wdr
      }/*End if( i_delta >= IDLE_WATCHDOG_PET_RATE)*/

      /*---------------------------------------------------------------------*
       * Write the contents of the buffer to the registered devices.
       *---------------------------------------------------------------------*/
      arb_printfFlushBuf();
   10db8:	0e 94 0b 8d 	call	0x11a16	; 0x11a16 <arb_printfFlushBuf>

   }/*End while( RUN_FOREVER)*/
   10dbc:	8f cf       	rjmp	.-226    	; 0x10cdc <arb_idle+0x42>

00010dbe <arb_idleInit>:

}/*End arb_idle*/

t_THRDHANDLE arb_idleInit( t_stackSize t_idlStack,
                           t_thrdPrio t_pri)
{
   10dbe:	0f 93       	push	r16
   10dc0:	9c 01       	movw	r18, r24
   10dc2:	06 2f       	mov	r16, r22
   t_wdConfig t_conf;

   gt_idleObject.t_idleThrdHndl = arb_threadCreate( arb_idle,
   10dc4:	8d e4       	ldi	r24, 0x4D	; 77
   10dc6:	96 e8       	ldi	r25, 0x86	; 134
   10dc8:	6a ea       	ldi	r22, 0xAA	; 170
   10dca:	70 e0       	ldi	r23, 0x00	; 0
   10dcc:	4b eb       	ldi	r20, 0xBB	; 187
   10dce:	50 e0       	ldi	r21, 0x00	; 0
   10dd0:	0e 94 56 a0 	call	0x140ac	; 0x140ac <arb_threadCreate>
   10dd4:	80 93 21 27 	sts	0x2721, r24
   10dd8:	90 93 22 27 	sts	0x2722, r25
                                                    0xAA,
                                                    0xBB,
                                                    t_idlStack,
                                                    t_pri);

   if( gt_idleObject.t_idleThrdHndl < 0)
   10ddc:	80 91 21 27 	lds	r24, 0x2721
   10de0:	90 91 22 27 	lds	r25, 0x2722
   10de4:	97 fd       	sbrc	r25, 7
   10de6:	18 c0       	rjmp	.+48     	; 0x10e18 <arb_idleInit+0x5a>
   {
      return (t_THRDHANDLE)gt_idleObject.t_idleThrdHndl;

   }/*End if( gt_idleObject.t_idleThrdHndl < 0)*/

   gt_idleObject.t_wdHndle = hal_requestWdAccess();
   10de8:	0e 94 e4 5d 	call	0xbbc8	; 0xbbc8 <hal_requestWdAccess>
   10dec:	80 93 23 27 	sts	0x2723, r24
   10df0:	90 93 24 27 	sts	0x2724, r25

   if( gt_idleObject.t_wdHndle < 0)
   10df4:	80 91 23 27 	lds	r24, 0x2723
   10df8:	90 91 24 27 	lds	r25, 0x2724
   10dfc:	97 fd       	sbrc	r25, 7
   10dfe:	11 c0       	rjmp	.+34     	; 0x10e22 <arb_idleInit+0x64>
      return (t_THRDHANDLE)ARB_HAL_ERROR;
   }

   t_conf.i_period = IDLE_WATCHDOG_RESET_PERIOD; /*msec*/

   if( hal_configureWd( gt_idleObject.t_wdHndle, t_conf))
   10e00:	80 91 23 27 	lds	r24, 0x2723
   10e04:	90 91 24 27 	lds	r25, 0x2724
   10e08:	40 e4       	ldi	r20, 0x40	; 64
   10e0a:	5f e1       	ldi	r21, 0x1F	; 31
   10e0c:	60 e0       	ldi	r22, 0x00	; 0
   10e0e:	70 e0       	ldi	r23, 0x00	; 0
   10e10:	0e 94 23 5e 	call	0xbc46	; 0xbc46 <hal_configureWd>
   10e14:	88 23       	and	r24, r24
   10e16:	29 f4       	brne	.+10     	; 0x10e22 <arb_idleInit+0x64>
   {
     return (t_THRDHANDLE)ARB_HAL_ERROR;
   }

   return gt_idleObject.t_idleThrdHndl;
   10e18:	80 91 21 27 	lds	r24, 0x2721
   10e1c:	90 91 22 27 	lds	r25, 0x2722
   10e20:	02 c0       	rjmp	.+4      	; 0x10e26 <arb_idleInit+0x68>

   t_conf.i_period = IDLE_WATCHDOG_RESET_PERIOD; /*msec*/

   if( hal_configureWd( gt_idleObject.t_wdHndle, t_conf))
   {
     return (t_THRDHANDLE)ARB_HAL_ERROR;
   10e22:	86 ef       	ldi	r24, 0xF6	; 246
   10e24:	9f ef       	ldi	r25, 0xFF	; 255
   }

   return gt_idleObject.t_idleThrdHndl;

}/*End arb_idleInit*/
   10e26:	0f 91       	pop	r16
   10e28:	08 95       	ret

00010e2a <arb_mailboxRead>:
 *---------------------------------------------------------------------------*/
int16_t arb_mailboxRead( t_MAILBOXHNDL t_mbxHandle,
                         /*int8_t c_ID,-Todo allow for multiple readers*/
                         int8_t *pc_buf,
                         uint16_t s_size)
{
   10e2a:	cf 92       	push	r12
   10e2c:	df 92       	push	r13
   10e2e:	ef 92       	push	r14
   10e30:	ff 92       	push	r15
   10e32:	0f 93       	push	r16
   10e34:	1f 93       	push	r17
   10e36:	cf 93       	push	r28
   10e38:	df 93       	push	r29
   10e3a:	00 d0       	rcall	.+0      	; 0x10e3c <arb_mailboxRead+0x12>
   10e3c:	cd b7       	in	r28, 0x3d	; 61
   10e3e:	de b7       	in	r29, 0x3e	; 62
   10e40:	8a 83       	std	Y+2, r24	; 0x02
   10e42:	9b 83       	std	Y+3, r25	; 0x03
   10e44:	6b 01       	movw	r12, r22
   int16_t s_size1 = 0;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   10e46:	ea 81       	ldd	r30, Y+2	; 0x02
   10e48:	fb 81       	ldd	r31, Y+3	; 0x03
   10e4a:	80 91 9d 22 	lds	r24, 0x229D
   10e4e:	90 91 9e 22 	lds	r25, 0x229E
   10e52:	24 81       	ldd	r18, Z+4	; 0x04
   10e54:	35 81       	ldd	r19, Z+5	; 0x05
   10e56:	28 17       	cp	r18, r24
   10e58:	39 07       	cpc	r19, r25
   10e5a:	09 f0       	breq	.+2      	; 0x10e5e <arb_mailboxRead+0x34>
   10e5c:	9d c0       	rjmp	.+314    	; 0x10f98 <arb_mailboxRead+0x16e>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where information
       * about the mailbox is stored.
       *---------------------------------------------------------------------*/
      pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   10e5e:	ea 81       	ldd	r30, Y+2	; 0x02
   10e60:	fb 81       	ldd	r31, Y+3	; 0x03
   10e62:	00 81       	ld	r16, Z
   10e64:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Can the user-space buffer hold the data?
       *---------------------------------------------------------------------*/
      if( s_size < pt_mbx->s_queueSize) /*No*/
   10e66:	f8 01       	movw	r30, r16
   10e68:	86 81       	ldd	r24, Z+6	; 0x06
   10e6a:	97 81       	ldd	r25, Z+7	; 0x07
   10e6c:	48 17       	cp	r20, r24
   10e6e:	59 07       	cpc	r21, r25
   10e70:	08 f4       	brcc	.+2      	; 0x10e74 <arb_mailboxRead+0x4a>
   10e72:	97 c0       	rjmp	.+302    	; 0x10fa2 <arb_mailboxRead+0x178>
      }

      /*---------------------------------------------------------------------*
       * Wait for data to become available on the queue
       *---------------------------------------------------------------------*/
      t_err = arb_wait( pt_mbx->t_semFillCount, pt_mbx->t_readMode);
   10e74:	82 81       	ldd	r24, Z+2	; 0x02
   10e76:	93 81       	ldd	r25, Z+3	; 0x03
   10e78:	61 89       	ldd	r22, Z+17	; 0x11
   10e7a:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
      if( t_err == ARB_PASSED)
   10e7e:	88 23       	and	r24, r24
   10e80:	09 f0       	breq	.+2      	; 0x10e84 <arb_mailboxRead+0x5a>
   10e82:	83 c0       	rjmp	.+262    	; 0x10f8a <arb_mailboxRead+0x160>
         int16_t s_index;

         /*------------------------------------------------------------------*
          * The buffer has data...Copy data from the mailbox into pc_buf
          *------------------------------------------------------------------*/
         if( pt_mbx->b_wrtFromInt == true) /*Always assume multiple 
   10e84:	f8 01       	movw	r30, r16
   10e86:	82 89       	ldd	r24, Z+18	; 0x12
   10e88:	88 23       	and	r24, r24
   10e8a:	b9 f1       	breq	.+110    	; 0x10efa <arb_mailboxRead+0xd0>
         {
            /*---------------------------------------------------------------*
             * We can't perform a mutex inside an interrupt so make sure this 
             * call is atomic by another means.
             *---------------------------------------------------------------*/
            HAL_BEGIN_CRITICAL(); //Disable interrupts
   10e8c:	8f b7       	in	r24, 0x3f	; 63
   10e8e:	89 83       	std	Y+1, r24	; 0x01
   10e90:	f8 94       	cli

            /*---------------------------------------------------------------*
             * Grab the size of this data field from the first two bytes of 
             * this queue location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_rdPtr)*(pt_mbx->s_queueSize + \
   10e92:	86 81       	ldd	r24, Z+6	; 0x06
   10e94:	97 81       	ldd	r25, Z+7	; 0x07
   10e96:	02 96       	adiw	r24, 0x02	; 2
   10e98:	24 85       	ldd	r18, Z+12	; 0x0c
   10e9a:	35 85       	ldd	r19, Z+13	; 0x0d
   10e9c:	82 9f       	mul	r24, r18
   10e9e:	b0 01       	movw	r22, r0
   10ea0:	83 9f       	mul	r24, r19
   10ea2:	70 0d       	add	r23, r0
   10ea4:	92 9f       	mul	r25, r18
   10ea6:	70 0d       	add	r23, r0
   10ea8:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];
   10eaa:	84 89       	ldd	r24, Z+20	; 0x14
   10eac:	95 89       	ldd	r25, Z+21	; 0x15
   10eae:	fc 01       	movw	r30, r24
   10eb0:	e6 0f       	add	r30, r22
   10eb2:	f7 1f       	adc	r31, r23
   10eb4:	40 81       	ld	r20, Z
   10eb6:	e4 2e       	mov	r14, r20
   10eb8:	ff 24       	eor	r15, r15
   10eba:	e7 fc       	sbrc	r14, 7
   10ebc:	f0 94       	com	r15

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
                    (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   10ebe:	6e 5f       	subi	r22, 0xFE	; 254
   10ec0:	7f 4f       	sbci	r23, 0xFF	; 255
   10ec2:	68 0f       	add	r22, r24
   10ec4:	79 1f       	adc	r23, r25
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
   10ec6:	c6 01       	movw	r24, r12
   10ec8:	5f 2d       	mov	r21, r15
   10eca:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
                    s_size1);

            /*---------------------------------------------------------------*
             * Increment the read pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_rdPtr++;
   10ece:	f8 01       	movw	r30, r16
   10ed0:	84 85       	ldd	r24, Z+12	; 0x0c
   10ed2:	95 85       	ldd	r25, Z+13	; 0x0d
   10ed4:	01 96       	adiw	r24, 0x01	; 1
   10ed6:	84 87       	std	Z+12, r24	; 0x0c
   10ed8:	95 87       	std	Z+13, r25	; 0x0d
            if( pt_mbx->s_rdPtr == pt_mbx->s_queueDepth)
   10eda:	20 85       	ldd	r18, Z+8	; 0x08
   10edc:	31 85       	ldd	r19, Z+9	; 0x09
   10ede:	82 17       	cp	r24, r18
   10ee0:	93 07       	cpc	r25, r19
   10ee2:	11 f4       	brne	.+4      	; 0x10ee8 <arb_mailboxRead+0xbe>
               pt_mbx->s_rdPtr = 0;
   10ee4:	14 86       	std	Z+12, r1	; 0x0c
   10ee6:	15 86       	std	Z+13, r1	; 0x0d

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages--;
   10ee8:	f8 01       	movw	r30, r16
   10eea:	86 85       	ldd	r24, Z+14	; 0x0e
   10eec:	97 85       	ldd	r25, Z+15	; 0x0f
   10eee:	01 97       	sbiw	r24, 0x01	; 1
   10ef0:	86 87       	std	Z+14, r24	; 0x0e
   10ef2:	97 87       	std	Z+15, r25	; 0x0f

            HAL_END_CRITICAL(); //Enable interrupts
   10ef4:	89 81       	ldd	r24, Y+1	; 0x01
   10ef6:	8f bf       	out	0x3f, r24	; 63
   10ef8:	42 c0       	rjmp	.+132    	; 0x10f7e <arb_mailboxRead+0x154>

         }/*End if( pt_mbx->b_wrtFromInt == true)*/
         else
         {
            if( pt_mbx->b_multRdWr == true)
   10efa:	f8 01       	movw	r30, r16
   10efc:	83 89       	ldd	r24, Z+19	; 0x13
   10efe:	88 23       	and	r24, r24
   10f00:	29 f0       	breq	.+10     	; 0x10f0c <arb_mailboxRead+0xe2>
               t_err = arb_wait( pt_mbx->t_mutex, BLOCKING); /*Lock shared
   10f02:	80 81       	ld	r24, Z
   10f04:	91 81       	ldd	r25, Z+1	; 0x01
   10f06:	60 e0       	ldi	r22, 0x00	; 0
   10f08:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>

            /*---------------------------------------------------------------*
             * Grab the size of this data field from the first two bytes of 
             * this queue location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_rdPtr)*(pt_mbx->s_queueSize + \
   10f0c:	f8 01       	movw	r30, r16
   10f0e:	86 81       	ldd	r24, Z+6	; 0x06
   10f10:	97 81       	ldd	r25, Z+7	; 0x07
   10f12:	02 96       	adiw	r24, 0x02	; 2
   10f14:	24 85       	ldd	r18, Z+12	; 0x0c
   10f16:	35 85       	ldd	r19, Z+13	; 0x0d
   10f18:	82 9f       	mul	r24, r18
   10f1a:	b0 01       	movw	r22, r0
   10f1c:	83 9f       	mul	r24, r19
   10f1e:	70 0d       	add	r23, r0
   10f20:	92 9f       	mul	r25, r18
   10f22:	70 0d       	add	r23, r0
   10f24:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];
   10f26:	84 89       	ldd	r24, Z+20	; 0x14
   10f28:	95 89       	ldd	r25, Z+21	; 0x15
   10f2a:	fc 01       	movw	r30, r24
   10f2c:	e6 0f       	add	r30, r22
   10f2e:	f7 1f       	adc	r31, r23
   10f30:	40 81       	ld	r20, Z
   10f32:	e4 2e       	mov	r14, r20
   10f34:	ff 24       	eor	r15, r15
   10f36:	e7 fc       	sbrc	r14, 7
   10f38:	f0 94       	com	r15

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
                    (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   10f3a:	6e 5f       	subi	r22, 0xFE	; 254
   10f3c:	7f 4f       	sbci	r23, 0xFF	; 255
   10f3e:	68 0f       	add	r22, r24
   10f40:	79 1f       	adc	r23, r25
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
   10f42:	c6 01       	movw	r24, r12
   10f44:	5f 2d       	mov	r21, r15
   10f46:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
                    s_size1);

            /*---------------------------------------------------------------*
             * Increment the read pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_rdPtr++;
   10f4a:	f8 01       	movw	r30, r16
   10f4c:	84 85       	ldd	r24, Z+12	; 0x0c
   10f4e:	95 85       	ldd	r25, Z+13	; 0x0d
   10f50:	01 96       	adiw	r24, 0x01	; 1
   10f52:	84 87       	std	Z+12, r24	; 0x0c
   10f54:	95 87       	std	Z+13, r25	; 0x0d
            if( pt_mbx->s_rdPtr == pt_mbx->s_queueDepth)
   10f56:	20 85       	ldd	r18, Z+8	; 0x08
   10f58:	31 85       	ldd	r19, Z+9	; 0x09
   10f5a:	82 17       	cp	r24, r18
   10f5c:	93 07       	cpc	r25, r19
   10f5e:	11 f4       	brne	.+4      	; 0x10f64 <arb_mailboxRead+0x13a>
               pt_mbx->s_rdPtr = 0;
   10f60:	14 86       	std	Z+12, r1	; 0x0c
   10f62:	15 86       	std	Z+13, r1	; 0x0d

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages--;
   10f64:	f8 01       	movw	r30, r16
   10f66:	86 85       	ldd	r24, Z+14	; 0x0e
   10f68:	97 85       	ldd	r25, Z+15	; 0x0f
   10f6a:	01 97       	sbiw	r24, 0x01	; 1
   10f6c:	86 87       	std	Z+14, r24	; 0x0e
   10f6e:	97 87       	std	Z+15, r25	; 0x0f

            if( pt_mbx->b_multRdWr == true)
   10f70:	83 89       	ldd	r24, Z+19	; 0x13
   10f72:	88 23       	and	r24, r24
   10f74:	21 f0       	breq	.+8      	; 0x10f7e <arb_mailboxRead+0x154>
               t_err = arb_signal( pt_mbx->t_mutex);
   10f76:	80 81       	ld	r24, Z
   10f78:	91 81       	ldd	r25, Z+1	; 0x01
   10f7a:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
         }

         /*------------------------------------------------------------------*
          * Tell the producer to put more data in the buffer.
          *------------------------------------------------------------------*/
         arb_signal( pt_mbx->t_semEmptyCount); /*Increment the empty count*/
   10f7e:	f8 01       	movw	r30, r16
   10f80:	84 81       	ldd	r24, Z+4	; 0x04
   10f82:	95 81       	ldd	r25, Z+5	; 0x05
   10f84:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
   10f88:	13 c0       	rjmp	.+38     	; 0x10fb0 <arb_mailboxRead+0x186>

      }/*End if( t_err == ARB_PASSED)*/
      else if( t_err == ARB_SEM_DEC_ERROR) /*Non blocking mode*/
   10f8a:	83 3f       	cpi	r24, 0xF3	; 243
   10f8c:	79 f4       	brne	.+30     	; 0x10fac <arb_mailboxRead+0x182>
      {
         /*------------------------------------------------------------------*
          * Tell the consumer that the buffer is empty
          *------------------------------------------------------------------*/
         return (int16_t)ARB_MBX_EMPTY;
   10f8e:	21 ef       	ldi	r18, 0xF1	; 241
   10f90:	e2 2e       	mov	r14, r18
   10f92:	2f ef       	ldi	r18, 0xFF	; 255
   10f94:	f2 2e       	mov	r15, r18
   10f96:	0c c0       	rjmp	.+24     	; 0x10fb0 <arb_mailboxRead+0x186>
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   false)
   {
      return (int16_t)ARB_INVALID_HANDLE;
   10f98:	99 ef       	ldi	r25, 0xF9	; 249
   10f9a:	e9 2e       	mov	r14, r25
   10f9c:	9f ef       	ldi	r25, 0xFF	; 255
   10f9e:	f9 2e       	mov	r15, r25
   10fa0:	07 c0       	rjmp	.+14     	; 0x10fb0 <arb_mailboxRead+0x186>
      /*---------------------------------------------------------------------*
       * Can the user-space buffer hold the data?
       *---------------------------------------------------------------------*/
      if( s_size < pt_mbx->s_queueSize) /*No*/
      {
         return (int16_t)ARB_READ_ERROR; /*User-space buffer too small*/
   10fa2:	84 ef       	ldi	r24, 0xF4	; 244
   10fa4:	e8 2e       	mov	r14, r24
   10fa6:	8f ef       	ldi	r24, 0xFF	; 255
   10fa8:	f8 2e       	mov	r15, r24
   10faa:	02 c0       	rjmp	.+4      	; 0x10fb0 <arb_mailboxRead+0x186>
                         int8_t *pc_buf,
                         uint16_t s_size)
{
   t_mailbox *pt_mbx;
   t_error t_err;
   int16_t s_size1 = 0;
   10fac:	ee 24       	eor	r14, r14
   10fae:	ff 24       	eor	r15, r15
      }
   }

   return (int16_t)s_size1; /*Return the number of bytes read*/

}/*End arb_mailboxRead*/
   10fb0:	c7 01       	movw	r24, r14
   10fb2:	23 96       	adiw	r28, 0x03	; 3
   10fb4:	cd bf       	out	0x3d, r28	; 61
   10fb6:	de bf       	out	0x3e, r29	; 62
   10fb8:	df 91       	pop	r29
   10fba:	cf 91       	pop	r28
   10fbc:	1f 91       	pop	r17
   10fbe:	0f 91       	pop	r16
   10fc0:	ff 90       	pop	r15
   10fc2:	ef 90       	pop	r14
   10fc4:	df 90       	pop	r13
   10fc6:	cf 90       	pop	r12
   10fc8:	08 95       	ret

00010fca <arb_mailboxWrite>:

int16_t arb_mailboxWrite( t_MAILBOXHNDL t_mbxHandle, 
                          /*int8_t c_ID,-Todo allow for multiple readers*/
                          int8_t *pc_buf, 
                          uint16_t s_size) /*Size of the message in pc_buf*/
{
   10fca:	cf 92       	push	r12
   10fcc:	df 92       	push	r13
   10fce:	ff 92       	push	r15
   10fd0:	0f 93       	push	r16
   10fd2:	1f 93       	push	r17
   10fd4:	cf 93       	push	r28
   10fd6:	df 93       	push	r29
   10fd8:	00 d0       	rcall	.+0      	; 0x10fda <arb_mailboxWrite+0x10>
   10fda:	00 d0       	rcall	.+0      	; 0x10fdc <arb_mailboxWrite+0x12>
   10fdc:	cd b7       	in	r28, 0x3d	; 61
   10fde:	de b7       	in	r29, 0x3e	; 62
   10fe0:	8a 83       	std	Y+2, r24	; 0x02
   10fe2:	9b 83       	std	Y+3, r25	; 0x03
   10fe4:	f6 2e       	mov	r15, r22
   10fe6:	4c 83       	std	Y+4, r20	; 0x04
   10fe8:	5d 83       	std	Y+5, r21	; 0x05
   t_error t_err;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   10fea:	ea 81       	ldd	r30, Y+2	; 0x02
   10fec:	fb 81       	ldd	r31, Y+3	; 0x03
   10fee:	80 91 9d 22 	lds	r24, 0x229D
   10ff2:	90 91 9e 22 	lds	r25, 0x229E
   10ff6:	24 81       	ldd	r18, Z+4	; 0x04
   10ff8:	35 81       	ldd	r19, Z+5	; 0x05
   10ffa:	28 17       	cp	r18, r24
   10ffc:	39 07       	cpc	r19, r25
   10ffe:	09 f0       	breq	.+2      	; 0x11002 <arb_mailboxWrite+0x38>
   11000:	ca c0       	rjmp	.+404    	; 0x11196 <arb_mailboxWrite+0x1cc>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where information
       * about the mailbox is stored.
       *---------------------------------------------------------------------*/
      pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   11002:	ea 81       	ldd	r30, Y+2	; 0x02
   11004:	fb 81       	ldd	r31, Y+3	; 0x03
   11006:	00 81       	ld	r16, Z
   11008:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Can the data fit on the queue?
       *---------------------------------------------------------------------*/
      if( s_size > pt_mbx->s_queueSize) /*No*/
   1100a:	6a 01       	movw	r12, r20
   1100c:	d8 01       	movw	r26, r16
   1100e:	16 96       	adiw	r26, 0x06	; 6
   11010:	8d 91       	ld	r24, X+
   11012:	9c 91       	ld	r25, X
   11014:	17 97       	sbiw	r26, 0x07	; 7
   11016:	84 17       	cp	r24, r20
   11018:	95 07       	cpc	r25, r21
   1101a:	08 f4       	brcc	.+2      	; 0x1101e <arb_mailboxWrite+0x54>
   1101c:	bf c0       	rjmp	.+382    	; 0x1119c <arb_mailboxWrite+0x1d2>
      }

      /*---------------------------------------------------------------------*
       * Wait for room on the queue..
       *---------------------------------------------------------------------*/
      t_err = arb_wait( pt_mbx->t_semEmptyCount, pt_mbx->t_writeMode);
   1101e:	14 96       	adiw	r26, 0x04	; 4
   11020:	8d 91       	ld	r24, X+
   11022:	9c 91       	ld	r25, X
   11024:	15 97       	sbiw	r26, 0x05	; 5
   11026:	50 96       	adiw	r26, 0x10	; 16
   11028:	6c 91       	ld	r22, X
   1102a:	7e 83       	std	Y+6, r23	; 0x06
   1102c:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
      if( t_err == ARB_PASSED)
   11030:	7e 81       	ldd	r23, Y+6	; 0x06
   11032:	88 23       	and	r24, r24
   11034:	09 f0       	breq	.+2      	; 0x11038 <arb_mailboxWrite+0x6e>
   11036:	aa c0       	rjmp	.+340    	; 0x1118c <arb_mailboxWrite+0x1c2>
      {
         int8_t *pc_size;
         int16_t s_index;

         if( pt_mbx->b_wrtFromInt == true) /*Always assume multiple 
   11038:	f8 01       	movw	r30, r16
   1103a:	82 89       	ldd	r24, Z+18	; 0x12
   1103c:	88 23       	and	r24, r24
   1103e:	09 f4       	brne	.+2      	; 0x11042 <arb_mailboxWrite+0x78>
   11040:	46 c0       	rjmp	.+140    	; 0x110ce <arb_mailboxWrite+0x104>
         {
            /*---------------------------------------------------------------*
             * We can't perform a mutex inside an interrupt so make sure this 
             * call is atomic by another means.
             *---------------------------------------------------------------*/
            HAL_BEGIN_CRITICAL(); //Disable interrupts
   11042:	8f b7       	in	r24, 0x3f	; 63
   11044:	89 83       	std	Y+1, r24	; 0x01
   11046:	f8 94       	cli

            /*---------------------------------------------------------------*
             * Store the size in the first two bytes of the current queue
             * location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_wrPtr)*(pt_mbx->s_queueSize + \
   11048:	d8 01       	movw	r26, r16
   1104a:	86 81       	ldd	r24, Z+6	; 0x06
   1104c:	97 81       	ldd	r25, Z+7	; 0x07
   1104e:	02 96       	adiw	r24, 0x02	; 2
   11050:	22 85       	ldd	r18, Z+10	; 0x0a
   11052:	33 85       	ldd	r19, Z+11	; 0x0b
   11054:	82 9f       	mul	r24, r18
   11056:	a0 01       	movw	r20, r0
   11058:	83 9f       	mul	r24, r19
   1105a:	50 0d       	add	r21, r0
   1105c:	92 9f       	mul	r25, r18
   1105e:	50 0d       	add	r21, r0
   11060:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            pt_mbx->pc_queue[s_index]     = pc_size[0];
   11062:	04 88       	ldd	r0, Z+20	; 0x14
   11064:	f5 89       	ldd	r31, Z+21	; 0x15
   11066:	e0 2d       	mov	r30, r0
   11068:	e4 0f       	add	r30, r20
   1106a:	f5 1f       	adc	r31, r21
   1106c:	8c 81       	ldd	r24, Y+4	; 0x04
   1106e:	80 83       	st	Z, r24
            pt_mbx->pc_queue[s_index + 1] = pc_size[1];
   11070:	54 96       	adiw	r26, 0x14	; 20
   11072:	ed 91       	ld	r30, X+
   11074:	fc 91       	ld	r31, X
   11076:	55 97       	sbiw	r26, 0x15	; 21
   11078:	e4 0f       	add	r30, r20
   1107a:	f5 1f       	adc	r31, r21
   1107c:	8d 81       	ldd	r24, Y+5	; 0x05
   1107e:	81 83       	std	Z+1, r24	; 0x01

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   11080:	4e 5f       	subi	r20, 0xFE	; 254
   11082:	5f 4f       	sbci	r21, 0xFF	; 255
   11084:	54 96       	adiw	r26, 0x14	; 20
   11086:	8d 91       	ld	r24, X+
   11088:	9c 91       	ld	r25, X
   1108a:	55 97       	sbiw	r26, 0x15	; 21
   1108c:	84 0f       	add	r24, r20
   1108e:	95 1f       	adc	r25, r21
   11090:	4c 81       	ldd	r20, Y+4	; 0x04
   11092:	5d 81       	ldd	r21, Y+5	; 0x05
   11094:	6f 2d       	mov	r22, r15
   11096:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
                    s_size);

            /*---------------------------------------------------------------*
             * Increment the write pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_wrPtr++;
   1109a:	f8 01       	movw	r30, r16
   1109c:	82 85       	ldd	r24, Z+10	; 0x0a
   1109e:	93 85       	ldd	r25, Z+11	; 0x0b
   110a0:	01 96       	adiw	r24, 0x01	; 1
   110a2:	82 87       	std	Z+10, r24	; 0x0a
   110a4:	93 87       	std	Z+11, r25	; 0x0b
            if( pt_mbx->s_wrPtr == pt_mbx->s_queueDepth)
   110a6:	20 85       	ldd	r18, Z+8	; 0x08
   110a8:	31 85       	ldd	r19, Z+9	; 0x09
   110aa:	82 17       	cp	r24, r18
   110ac:	93 07       	cpc	r25, r19
   110ae:	11 f4       	brne	.+4      	; 0x110b4 <arb_mailboxWrite+0xea>
               pt_mbx->s_wrPtr = 0;
   110b0:	12 86       	std	Z+10, r1	; 0x0a
   110b2:	13 86       	std	Z+11, r1	; 0x0b

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages++;
   110b4:	d8 01       	movw	r26, r16
   110b6:	1e 96       	adiw	r26, 0x0e	; 14
   110b8:	8d 91       	ld	r24, X+
   110ba:	9c 91       	ld	r25, X
   110bc:	1f 97       	sbiw	r26, 0x0f	; 15
   110be:	01 96       	adiw	r24, 0x01	; 1
   110c0:	1e 96       	adiw	r26, 0x0e	; 14
   110c2:	8d 93       	st	X+, r24
   110c4:	9c 93       	st	X, r25
   110c6:	1f 97       	sbiw	r26, 0x0f	; 15

            HAL_END_CRITICAL(); //Enable interrupts
   110c8:	89 81       	ldd	r24, Y+1	; 0x01
   110ca:	8f bf       	out	0x3f, r24	; 63
   110cc:	59 c0       	rjmp	.+178    	; 0x11180 <arb_mailboxWrite+0x1b6>

         }/*End if( pt_mbx->b_wrtFromInt == true)*/
         else
         {
            if( pt_mbx->b_multRdWr == true)
   110ce:	f8 01       	movw	r30, r16
   110d0:	83 89       	ldd	r24, Z+19	; 0x13
   110d2:	88 23       	and	r24, r24
   110d4:	39 f0       	breq	.+14     	; 0x110e4 <arb_mailboxWrite+0x11a>
               t_err = arb_wait( pt_mbx->t_mutex, BLOCKING); /*Lock shared 
   110d6:	80 81       	ld	r24, Z
   110d8:	91 81       	ldd	r25, Z+1	; 0x01
   110da:	60 e0       	ldi	r22, 0x00	; 0
   110dc:	7e 83       	std	Y+6, r23	; 0x06
   110de:	0e 94 d2 96 	call	0x12da4	; 0x12da4 <arb_wait>
   110e2:	7e 81       	ldd	r23, Y+6	; 0x06

            /*---------------------------------------------------------------*
             * Store the size in the first two bytes of the current queue
             * location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_wrPtr)*(pt_mbx->s_queueSize + \
   110e4:	d8 01       	movw	r26, r16
   110e6:	16 96       	adiw	r26, 0x06	; 6
   110e8:	8d 91       	ld	r24, X+
   110ea:	9c 91       	ld	r25, X
   110ec:	17 97       	sbiw	r26, 0x07	; 7
   110ee:	02 96       	adiw	r24, 0x02	; 2
   110f0:	1a 96       	adiw	r26, 0x0a	; 10
   110f2:	2d 91       	ld	r18, X+
   110f4:	3c 91       	ld	r19, X
   110f6:	1b 97       	sbiw	r26, 0x0b	; 11
   110f8:	82 9f       	mul	r24, r18
   110fa:	a0 01       	movw	r20, r0
   110fc:	83 9f       	mul	r24, r19
   110fe:	50 0d       	add	r21, r0
   11100:	92 9f       	mul	r25, r18
   11102:	50 0d       	add	r21, r0
   11104:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            pt_mbx->pc_queue[s_index]     = pc_size[0];
   11106:	54 96       	adiw	r26, 0x14	; 20
   11108:	ed 91       	ld	r30, X+
   1110a:	fc 91       	ld	r31, X
   1110c:	55 97       	sbiw	r26, 0x15	; 21
   1110e:	e4 0f       	add	r30, r20
   11110:	f5 1f       	adc	r31, r21
   11112:	8c 81       	ldd	r24, Y+4	; 0x04
   11114:	80 83       	st	Z, r24
            pt_mbx->pc_queue[s_index + 1] = pc_size[1];
   11116:	54 96       	adiw	r26, 0x14	; 20
   11118:	ed 91       	ld	r30, X+
   1111a:	fc 91       	ld	r31, X
   1111c:	55 97       	sbiw	r26, 0x15	; 21
   1111e:	e4 0f       	add	r30, r20
   11120:	f5 1f       	adc	r31, r21
   11122:	8d 81       	ldd	r24, Y+5	; 0x05
   11124:	81 83       	std	Z+1, r24	; 0x01

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   11126:	9a 01       	movw	r18, r20
   11128:	2e 5f       	subi	r18, 0xFE	; 254
   1112a:	3f 4f       	sbci	r19, 0xFF	; 255
   1112c:	54 96       	adiw	r26, 0x14	; 20
   1112e:	8d 91       	ld	r24, X+
   11130:	9c 91       	ld	r25, X
   11132:	55 97       	sbiw	r26, 0x15	; 21
   11134:	82 0f       	add	r24, r18
   11136:	93 1f       	adc	r25, r19
   11138:	6f 2d       	mov	r22, r15
   1113a:	a6 01       	movw	r20, r12
   1113c:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
                    s_size);

            /*---------------------------------------------------------------*
             * Increment the write pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_wrPtr++;
   11140:	f8 01       	movw	r30, r16
   11142:	82 85       	ldd	r24, Z+10	; 0x0a
   11144:	93 85       	ldd	r25, Z+11	; 0x0b
   11146:	01 96       	adiw	r24, 0x01	; 1
   11148:	82 87       	std	Z+10, r24	; 0x0a
   1114a:	93 87       	std	Z+11, r25	; 0x0b
            if( pt_mbx->s_wrPtr == pt_mbx->s_queueDepth)
   1114c:	20 85       	ldd	r18, Z+8	; 0x08
   1114e:	31 85       	ldd	r19, Z+9	; 0x09
   11150:	82 17       	cp	r24, r18
   11152:	93 07       	cpc	r25, r19
   11154:	11 f4       	brne	.+4      	; 0x1115a <arb_mailboxWrite+0x190>
               pt_mbx->s_wrPtr = 0;
   11156:	12 86       	std	Z+10, r1	; 0x0a
   11158:	13 86       	std	Z+11, r1	; 0x0b

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages++;
   1115a:	d8 01       	movw	r26, r16
   1115c:	1e 96       	adiw	r26, 0x0e	; 14
   1115e:	8d 91       	ld	r24, X+
   11160:	9c 91       	ld	r25, X
   11162:	1f 97       	sbiw	r26, 0x0f	; 15
   11164:	01 96       	adiw	r24, 0x01	; 1
   11166:	1e 96       	adiw	r26, 0x0e	; 14
   11168:	8d 93       	st	X+, r24
   1116a:	9c 93       	st	X, r25
   1116c:	1f 97       	sbiw	r26, 0x0f	; 15

            if( pt_mbx->b_multRdWr == true)
   1116e:	53 96       	adiw	r26, 0x13	; 19
   11170:	8c 91       	ld	r24, X
   11172:	53 97       	sbiw	r26, 0x13	; 19
   11174:	88 23       	and	r24, r24
   11176:	21 f0       	breq	.+8      	; 0x11180 <arb_mailboxWrite+0x1b6>
               t_err = arb_signal( pt_mbx->t_mutex);
   11178:	8d 91       	ld	r24, X+
   1117a:	9c 91       	ld	r25, X
   1117c:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
         }

         /*------------------------------------------------------------------*
          * Tell the consumer to read the new message
          *------------------------------------------------------------------*/
         arb_signal( pt_mbx->t_semFillCount); /*Increment the fill count*/
   11180:	f8 01       	movw	r30, r16
   11182:	82 81       	ldd	r24, Z+2	; 0x02
   11184:	93 81       	ldd	r25, Z+3	; 0x03
   11186:	0e 94 42 97 	call	0x12e84	; 0x12e84 <arb_signal>
   1118a:	02 c0       	rjmp	.+4      	; 0x11190 <arb_mailboxWrite+0x1c6>

      }/*End if( t_err == ARB_PASSED)*/
      else if( t_err == ARB_SEM_DEC_ERROR) /*Non blocking mode*/
   1118c:	83 3f       	cpi	r24, 0xF3	; 243
   1118e:	49 f0       	breq	.+18     	; 0x111a2 <arb_mailboxWrite+0x1d8>
          *------------------------------------------------------------------*/
         return (int16_t)ARB_MBX_FULL;
      }
   }

   return (int16_t)s_size; /*Return the number of bytes written*/
   11190:	8c 81       	ldd	r24, Y+4	; 0x04
   11192:	9d 81       	ldd	r25, Y+5	; 0x05
   11194:	08 c0       	rjmp	.+16     	; 0x111a6 <arb_mailboxWrite+0x1dc>
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   false)
   {
      return (int16_t)ARB_INVALID_HANDLE;
   11196:	89 ef       	ldi	r24, 0xF9	; 249
   11198:	9f ef       	ldi	r25, 0xFF	; 255
   1119a:	05 c0       	rjmp	.+10     	; 0x111a6 <arb_mailboxWrite+0x1dc>
      /*---------------------------------------------------------------------*
       * Can the data fit on the queue?
       *---------------------------------------------------------------------*/
      if( s_size > pt_mbx->s_queueSize) /*No*/
      {
         return (int16_t)ARB_WRITE_ERROR; /*User-space buffer too large*/
   1119c:	85 ef       	ldi	r24, 0xF5	; 245
   1119e:	9f ef       	ldi	r25, 0xFF	; 255
   111a0:	02 c0       	rjmp	.+4      	; 0x111a6 <arb_mailboxWrite+0x1dc>
      else if( t_err == ARB_SEM_DEC_ERROR) /*Non blocking mode*/
      {
         /*------------------------------------------------------------------*
          * Tell the producer that the buffer is full.
          *------------------------------------------------------------------*/
         return (int16_t)ARB_MBX_FULL;
   111a2:	82 ef       	ldi	r24, 0xF2	; 242
   111a4:	9f ef       	ldi	r25, 0xFF	; 255
      }
   }

   return (int16_t)s_size; /*Return the number of bytes written*/

}/*End arb_mailboxWrite*/
   111a6:	26 96       	adiw	r28, 0x06	; 6
   111a8:	cd bf       	out	0x3d, r28	; 61
   111aa:	de bf       	out	0x3e, r29	; 62
   111ac:	df 91       	pop	r29
   111ae:	cf 91       	pop	r28
   111b0:	1f 91       	pop	r17
   111b2:	0f 91       	pop	r16
   111b4:	ff 90       	pop	r15
   111b6:	df 90       	pop	r13
   111b8:	cf 90       	pop	r12
   111ba:	08 95       	ret

000111bc <arb_mailboxCreate>:

t_MAILBOXHNDL arb_mailboxCreate( t_mailboxConfig t_config)
{
   111bc:	af 92       	push	r10
   111be:	bf 92       	push	r11
   111c0:	cf 92       	push	r12
   111c2:	df 92       	push	r13
   111c4:	ef 92       	push	r14
   111c6:	ff 92       	push	r15
   111c8:	0f 93       	push	r16
   111ca:	1f 93       	push	r17
   111cc:	cf 93       	push	r28
   111ce:	df 93       	push	r29
   111d0:	cd b7       	in	r28, 0x3d	; 61
   111d2:	de b7       	in	r29, 0x3e	; 62
   111d4:	2a 97       	sbiw	r28, 0x0a	; 10
   111d6:	cd bf       	out	0x3d, r28	; 61
   111d8:	de bf       	out	0x3e, r29	; 62
   111da:	2b 83       	std	Y+3, r18	; 0x03
   111dc:	3c 83       	std	Y+4, r19	; 0x04
   111de:	4d 83       	std	Y+5, r20	; 0x05
   111e0:	5e 83       	std	Y+6, r21	; 0x06
   111e2:	f6 2e       	mov	r15, r22
   111e4:	6f 83       	std	Y+7, r22	; 0x07
   111e6:	78 87       	std	Y+8, r23	; 0x08
   111e8:	89 87       	std	Y+9, r24	; 0x09
   111ea:	9a 87       	std	Y+10, r25	; 0x0a
   t_linkHndl = utl_createLink( sizeof(t_mailbox) + (t_config.s_queueSize + \
   MBX_HDR_FIELD_BYTES)*t_config.s_queueDepth);

   if( t_linkHndl < 0)
   {
      return (t_MAILBOXHNDL)ARB_OUT_OF_HEAP;
   111ec:	ab 80       	ldd	r10, Y+3	; 0x03
   111ee:	bc 80       	ldd	r11, Y+4	; 0x04
   111f0:	cd 80       	ldd	r12, Y+5	; 0x05
   111f2:	de 80       	ldd	r13, Y+6	; 0x06
   111f4:	e8 2e       	mov	r14, r24
   t_linkedListError t_err;

   /*------------------------------------------------------------------------*
    * Is this a bad configuration?
    *------------------------------------------------------------------------*/
   if( (t_config.b_wrtFromInt == true) && (t_config.t_writeMode == BLOCKING))
   111f6:	88 23       	and	r24, r24
   111f8:	19 f0       	breq	.+6      	; 0x11200 <arb_mailboxCreate+0x44>
   111fa:	66 23       	and	r22, r22
   111fc:	09 f4       	brne	.+2      	; 0x11200 <arb_mailboxCreate+0x44>
   111fe:	6c c0       	rjmp	.+216    	; 0x112d8 <arb_mailboxCreate+0x11c>

   /*------------------------------------------------------------------------*
    * Create a new link handle that will store information about this
    * particular mailbox
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_mailbox) + (t_config.s_queueSize + \
   11200:	95 01       	movw	r18, r10
   11202:	2e 5f       	subi	r18, 0xFE	; 254
   11204:	3f 4f       	sbci	r19, 0xFF	; 255
   MBX_HDR_FIELD_BYTES)*t_config.s_queueDepth);
   11206:	2c 9d       	mul	r18, r12
   11208:	c0 01       	movw	r24, r0
   1120a:	2d 9d       	mul	r18, r13
   1120c:	90 0d       	add	r25, r0
   1120e:	3c 9d       	mul	r19, r12
   11210:	90 0d       	add	r25, r0
   11212:	11 24       	eor	r1, r1

   /*------------------------------------------------------------------------*
    * Create a new link handle that will store information about this
    * particular mailbox
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_mailbox) + (t_config.s_queueSize + \
   11214:	46 96       	adiw	r24, 0x16	; 22
   11216:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   1121a:	89 83       	std	Y+1, r24	; 0x01
   1121c:	9a 83       	std	Y+2, r25	; 0x02
   MBX_HDR_FIELD_BYTES)*t_config.s_queueDepth);

   if( t_linkHndl < 0)
   1121e:	89 81       	ldd	r24, Y+1	; 0x01
   11220:	9a 81       	ldd	r25, Y+2	; 0x02
   11222:	97 fd       	sbrc	r25, 7
   11224:	5c c0       	rjmp	.+184    	; 0x112de <arb_mailboxCreate+0x122>

   /*------------------------------------------------------------------------*
    * Add the mailbox 'link' onto the list containing all the open mailbox's 
    * on the system.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeMbx,
   11226:	80 91 9d 22 	lds	r24, 0x229D
   1122a:	90 91 9e 22 	lds	r25, 0x229E
   1122e:	69 81       	ldd	r22, Y+1	; 0x01
   11230:	7a 81       	ldd	r23, Y+2	; 0x02
   11232:	41 e0       	ldi	r20, 0x01	; 1
   11234:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_newMbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   11238:	e9 81       	ldd	r30, Y+1	; 0x01
   1123a:	fa 81       	ldd	r31, Y+2	; 0x02
   1123c:	00 81       	ld	r16, Z
   1123e:	11 81       	ldd	r17, Z+1	; 0x01

   pt_newMbx->t_semFillCount = arb_semaphoreCreate( COUNTING);
   11240:	80 e0       	ldi	r24, 0x00	; 0
   11242:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
   11246:	f8 01       	movw	r30, r16
   11248:	82 83       	std	Z+2, r24	; 0x02
   1124a:	93 83       	std	Z+3, r25	; 0x03

   if( pt_newMbx->t_semFillCount < 0)
   1124c:	82 81       	ldd	r24, Z+2	; 0x02
   1124e:	93 81       	ldd	r25, Z+3	; 0x03
   11250:	97 ff       	sbrs	r25, 7
   11252:	03 c0       	rjmp	.+6      	; 0x1125a <arb_mailboxCreate+0x9e>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_semFillCount;
   11254:	82 81       	ldd	r24, Z+2	; 0x02
   11256:	93 81       	ldd	r25, Z+3	; 0x03
   11258:	44 c0       	rjmp	.+136    	; 0x112e2 <arb_mailboxCreate+0x126>

   }/*End if( pt_newMbx->t_semFillCount < 0)*/

   arb_semaphoreInit( pt_newMbx->t_semFillCount,
   1125a:	f8 01       	movw	r30, r16
   1125c:	82 81       	ldd	r24, Z+2	; 0x02
   1125e:	93 81       	ldd	r25, Z+3	; 0x03
   11260:	60 e0       	ldi	r22, 0x00	; 0
   11262:	70 e0       	ldi	r23, 0x00	; 0
   11264:	0e 94 cd 99 	call	0x1339a	; 0x1339a <arb_semaphoreInit>
                      0); /*No data in mailbox*/

   pt_newMbx->t_semEmptyCount = arb_semaphoreCreate( COUNTING);
   11268:	80 e0       	ldi	r24, 0x00	; 0
   1126a:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
   1126e:	f8 01       	movw	r30, r16
   11270:	84 83       	std	Z+4, r24	; 0x04
   11272:	95 83       	std	Z+5, r25	; 0x05

   if( pt_newMbx->t_semEmptyCount < 0)
   11274:	84 81       	ldd	r24, Z+4	; 0x04
   11276:	95 81       	ldd	r25, Z+5	; 0x05
   11278:	97 ff       	sbrs	r25, 7
   1127a:	03 c0       	rjmp	.+6      	; 0x11282 <arb_mailboxCreate+0xc6>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_semEmptyCount;
   1127c:	84 81       	ldd	r24, Z+4	; 0x04
   1127e:	95 81       	ldd	r25, Z+5	; 0x05
   11280:	30 c0       	rjmp	.+96     	; 0x112e2 <arb_mailboxCreate+0x126>

   }/*End if( pt_newMbx->t_semEmptyCount < 0)*/

   arb_semaphoreInit( pt_newMbx->t_semEmptyCount,
   11282:	f8 01       	movw	r30, r16
   11284:	84 81       	ldd	r24, Z+4	; 0x04
   11286:	95 81       	ldd	r25, Z+5	; 0x05
   11288:	b6 01       	movw	r22, r12
   1128a:	0e 94 cd 99 	call	0x1339a	; 0x1339a <arb_semaphoreInit>
                      t_config.s_queueDepth); /*All slots open*/

   pt_newMbx->t_mutex = arb_semaphoreCreate( MUTEX);
   1128e:	82 e0       	ldi	r24, 0x02	; 2
   11290:	0e 94 02 99 	call	0x13204	; 0x13204 <arb_semaphoreCreate>
   11294:	f8 01       	movw	r30, r16
   11296:	80 83       	st	Z, r24
   11298:	91 83       	std	Z+1, r25	; 0x01

   if( pt_newMbx->t_mutex < 0)
   1129a:	80 81       	ld	r24, Z
   1129c:	91 81       	ldd	r25, Z+1	; 0x01
   1129e:	97 ff       	sbrs	r25, 7
   112a0:	03 c0       	rjmp	.+6      	; 0x112a8 <arb_mailboxCreate+0xec>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_mutex;
   112a2:	80 81       	ld	r24, Z
   112a4:	91 81       	ldd	r25, Z+1	; 0x01
   112a6:	1d c0       	rjmp	.+58     	; 0x112e2 <arb_mailboxCreate+0x126>

   }/*End if( pt_newMbx->t_mutex < 0)*/

   pt_newMbx->t_writeMode   = t_config.t_writeMode;
   112a8:	f8 01       	movw	r30, r16
   112aa:	f0 8a       	std	Z+16, r15	; 0x10
   pt_newMbx->t_readMode    = t_config.t_readMode;
   112ac:	88 85       	ldd	r24, Y+8	; 0x08
   112ae:	81 8b       	std	Z+17, r24	; 0x11
   pt_newMbx->s_queueSize   = t_config.s_queueSize;
   112b0:	a6 82       	std	Z+6, r10	; 0x06
   112b2:	b7 82       	std	Z+7, r11	; 0x07
   pt_newMbx->s_queueDepth  = t_config.s_queueDepth;
   112b4:	c0 86       	std	Z+8, r12	; 0x08
   112b6:	d1 86       	std	Z+9, r13	; 0x09
   pt_newMbx->s_numMessages = 0;
   112b8:	16 86       	std	Z+14, r1	; 0x0e
   112ba:	17 86       	std	Z+15, r1	; 0x0f
   pt_newMbx->s_wrPtr       = 0;
   112bc:	12 86       	std	Z+10, r1	; 0x0a
   112be:	13 86       	std	Z+11, r1	; 0x0b
   pt_newMbx->s_rdPtr       = 0;
   112c0:	14 86       	std	Z+12, r1	; 0x0c
   112c2:	15 86       	std	Z+13, r1	; 0x0d
   pt_newMbx->b_wrtFromInt  = t_config.b_wrtFromInt;
   112c4:	e2 8a       	std	Z+18, r14	; 0x12
   pt_newMbx->b_multRdWr    = t_config.b_multRdWr;
   112c6:	8a 85       	ldd	r24, Y+10	; 0x0a
   112c8:	83 8b       	std	Z+19, r24	; 0x13

   /*------------------------------------------------------------------------*
    * Initialize the queue ptr to the location of the queue which starts
    * with the adjacent address location.
    *------------------------------------------------------------------------*/
   pt_newMbx->pc_queue = (int8_t *)((&pt_newMbx->pc_queue) + 1);
   112ca:	c8 01       	movw	r24, r16
   112cc:	46 96       	adiw	r24, 0x16	; 22
   112ce:	84 8b       	std	Z+20, r24	; 0x14
   112d0:	95 8b       	std	Z+21, r25	; 0x15

   /*------------------------------------------------------------------------*
    * Return a handle (or address ) to this semaphore.
    *------------------------------------------------------------------------*/
   return (t_MAILBOXHNDL)t_linkHndl;
   112d2:	89 81       	ldd	r24, Y+1	; 0x01
   112d4:	9a 81       	ldd	r25, Y+2	; 0x02
   112d6:	05 c0       	rjmp	.+10     	; 0x112e2 <arb_mailboxCreate+0x126>
   /*------------------------------------------------------------------------*
    * Is this a bad configuration?
    *------------------------------------------------------------------------*/
   if( (t_config.b_wrtFromInt == true) && (t_config.t_writeMode == BLOCKING))
   {
      return (t_MAILBOXHNDL)ARB_INVALID_ARG;
   112d8:	8a ef       	ldi	r24, 0xFA	; 250
   112da:	9f ef       	ldi	r25, 0xFF	; 255
   112dc:	02 c0       	rjmp	.+4      	; 0x112e2 <arb_mailboxCreate+0x126>
   t_linkHndl = utl_createLink( sizeof(t_mailbox) + (t_config.s_queueSize + \
   MBX_HDR_FIELD_BYTES)*t_config.s_queueDepth);

   if( t_linkHndl < 0)
   {
      return (t_MAILBOXHNDL)ARB_OUT_OF_HEAP;
   112de:	8f ef       	ldi	r24, 0xFF	; 255
   112e0:	9f ef       	ldi	r25, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * Return a handle (or address ) to this semaphore.
    *------------------------------------------------------------------------*/
   return (t_MAILBOXHNDL)t_linkHndl;

}/*End arb_mailboxCreate*/
   112e2:	2a 96       	adiw	r28, 0x0a	; 10
   112e4:	cd bf       	out	0x3d, r28	; 61
   112e6:	de bf       	out	0x3e, r29	; 62
   112e8:	df 91       	pop	r29
   112ea:	cf 91       	pop	r28
   112ec:	1f 91       	pop	r17
   112ee:	0f 91       	pop	r16
   112f0:	ff 90       	pop	r15
   112f2:	ef 90       	pop	r14
   112f4:	df 90       	pop	r13
   112f6:	cf 90       	pop	r12
   112f8:	bf 90       	pop	r11
   112fa:	af 90       	pop	r10
   112fc:	08 95       	ret

000112fe <arb_mailboxGetQueueMaxSize>:
   return ARB_PASSED;

}/*End arb_mailboxDestroy*/

int16_t arb_mailboxGetQueueMaxSize( t_MAILBOXHNDL t_mbxHandle)
{
   112fe:	cf 93       	push	r28
   11300:	df 93       	push	r29
   11302:	0f 92       	push	r0
   11304:	0f 92       	push	r0
   11306:	cd b7       	in	r28, 0x3d	; 61
   11308:	de b7       	in	r29, 0x3e	; 62
   1130a:	89 83       	std	Y+1, r24	; 0x01
   1130c:	9a 83       	std	Y+2, r25	; 0x02
   t_mailbox *pt_mbx;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   1130e:	e9 81       	ldd	r30, Y+1	; 0x01
   11310:	fa 81       	ldd	r31, Y+2	; 0x02
   11312:	80 91 9d 22 	lds	r24, 0x229D
   11316:	90 91 9e 22 	lds	r25, 0x229E
   1131a:	24 81       	ldd	r18, Z+4	; 0x04
   1131c:	35 81       	ldd	r19, Z+5	; 0x05
   1131e:	28 17       	cp	r18, r24
   11320:	39 07       	cpc	r19, r25
   11322:	41 f4       	brne	.+16     	; 0x11334 <arb_mailboxGetQueueMaxSize+0x36>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   11324:	e9 81       	ldd	r30, Y+1	; 0x01
   11326:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_mbx->s_queueSize;
   11328:	01 90       	ld	r0, Z+
   1132a:	f0 81       	ld	r31, Z
   1132c:	e0 2d       	mov	r30, r0
   1132e:	86 81       	ldd	r24, Z+6	; 0x06
   11330:	97 81       	ldd	r25, Z+7	; 0x07
   11332:	02 c0       	rjmp	.+4      	; 0x11338 <arb_mailboxGetQueueMaxSize+0x3a>
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   false)
   {
      return (int16_t)ARB_INVALID_HANDLE;
   11334:	89 ef       	ldi	r24, 0xF9	; 249
   11336:	9f ef       	ldi	r25, 0xFF	; 255
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);

   return pt_mbx->s_queueSize;

}/*End arb_mailboxGetQueueMaxSize*/
   11338:	0f 90       	pop	r0
   1133a:	0f 90       	pop	r0
   1133c:	df 91       	pop	r29
   1133e:	cf 91       	pop	r28
   11340:	08 95       	ret

00011342 <arb_mailboxGetNumMessages>:

int16_t arb_mailboxGetNumMessages( t_MAILBOXHNDL t_mbxHandle)
{
   11342:	cf 93       	push	r28
   11344:	df 93       	push	r29
   11346:	0f 92       	push	r0
   11348:	0f 92       	push	r0
   1134a:	cd b7       	in	r28, 0x3d	; 61
   1134c:	de b7       	in	r29, 0x3e	; 62
   1134e:	89 83       	std	Y+1, r24	; 0x01
   11350:	9a 83       	std	Y+2, r25	; 0x02
   t_mailbox *pt_mbx;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   11352:	e9 81       	ldd	r30, Y+1	; 0x01
   11354:	fa 81       	ldd	r31, Y+2	; 0x02
   11356:	80 91 9d 22 	lds	r24, 0x229D
   1135a:	90 91 9e 22 	lds	r25, 0x229E
   1135e:	24 81       	ldd	r18, Z+4	; 0x04
   11360:	35 81       	ldd	r19, Z+5	; 0x05
   11362:	28 17       	cp	r18, r24
   11364:	39 07       	cpc	r19, r25
   11366:	41 f4       	brne	.+16     	; 0x11378 <arb_mailboxGetNumMessages+0x36>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   11368:	e9 81       	ldd	r30, Y+1	; 0x01
   1136a:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_mbx->s_numMessages;
   1136c:	01 90       	ld	r0, Z+
   1136e:	f0 81       	ld	r31, Z
   11370:	e0 2d       	mov	r30, r0
   11372:	86 85       	ldd	r24, Z+14	; 0x0e
   11374:	97 85       	ldd	r25, Z+15	; 0x0f
   11376:	02 c0       	rjmp	.+4      	; 0x1137c <arb_mailboxGetNumMessages+0x3a>
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   false)
   {
      return (int16_t)ARB_INVALID_HANDLE;
   11378:	89 ef       	ldi	r24, 0xF9	; 249
   1137a:	9f ef       	ldi	r25, 0xFF	; 255
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);

   return pt_mbx->s_numMessages;

}/*End arb_mailboxGetNumMessages*/
   1137c:	0f 90       	pop	r0
   1137e:	0f 90       	pop	r0
   11380:	df 91       	pop	r29
   11382:	cf 91       	pop	r28
   11384:	08 95       	ret

00011386 <main>:
{

   /*------------------------------------------------------------------------*
    * Configure CPU clock for 32Mhz operation
    *------------------------------------------------------------------------*/
   hal_setCpuFreq( 32000000);
   11386:	60 e0       	ldi	r22, 0x00	; 0
   11388:	78 e4       	ldi	r23, 0x48	; 72
   1138a:	88 ee       	ldi	r24, 0xE8	; 232
   1138c:	91 e0       	ldi	r25, 0x01	; 1
   1138e:	0e 94 c3 21 	call	0x4386	; 0x4386 <hal_setCpuFreq>

   /*------------------------------------------------------------------------*
    * Configure the highest level of interrupts - nesting is not allowed.
    *------------------------------------------------------------------------*/
   hal_configureIntLevel( INT_LEVEL_2);
   11392:	84 e0       	ldi	r24, 0x04	; 4
   11394:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <hal_configureIntLevel>
    * drivers with the kernel, initialize the scheduler, and configure any
    * user-space threads. The operations herein are completely platform
    * dependent leaving the choice of device drivers and arbitros settings
    * completely up to the user-space layer.
    *------------------------------------------------------------------------*/
   usr_appInit();
   11398:	0e 94 17 a6 	call	0x14c2e	; 0x14c2e <usr_appInit>

   /*------------------------------------------------------------------------*
    * Return control over to the kernel layer which will launch the highest
    * priority thread- up to this point interrupts have been disabled.
    *------------------------------------------------------------------------*/
   arb_schedulerStart();
   1139c:	0e 94 9c 92 	call	0x12538	; 0x12538 <arb_schedulerStart>

   return 0;

}/*End main*/
   113a0:	80 e0       	ldi	r24, 0x00	; 0
   113a2:	90 e0       	ldi	r25, 0x00	; 0
   113a4:	08 95       	ret

000113a6 <arb_createMemIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   113a6:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   113a8:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   113aa:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   113ac:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   113ae:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   113b0:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   113b2:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   113b4:	0f 92       	push	r0
      asm( "push r1");
   113b6:	1f 92       	push	r1
      asm( "clr r1");
   113b8:	11 24       	eor	r1, r1
      asm( "push r2");
   113ba:	2f 92       	push	r2
      asm( "push r3");
   113bc:	3f 92       	push	r3
      asm( "push r4");
   113be:	4f 92       	push	r4
      asm( "push r5");
   113c0:	5f 92       	push	r5
      asm( "push r6");
   113c2:	6f 92       	push	r6
      asm( "push r7");
   113c4:	7f 92       	push	r7
      asm( "push r8");
   113c6:	8f 92       	push	r8
      asm( "push r9");
   113c8:	9f 92       	push	r9
      asm( "push r10");
   113ca:	af 92       	push	r10
      asm( "push r11");
   113cc:	bf 92       	push	r11
      asm( "push r12");
   113ce:	cf 92       	push	r12
      asm( "push r13");
   113d0:	df 92       	push	r13
      asm( "push r14");
   113d2:	ef 92       	push	r14
      asm( "push r15");
   113d4:	ff 92       	push	r15
      asm( "push r16");
   113d6:	0f 93       	push	r16
      asm( "push r17");
   113d8:	1f 93       	push	r17
      asm( "push r18");
   113da:	2f 93       	push	r18
      asm( "push r19");
   113dc:	3f 93       	push	r19
      asm( "push r20");
   113de:	4f 93       	push	r20
      asm( "push r21");
   113e0:	5f 93       	push	r21
      asm( "push r22");
   113e2:	6f 93       	push	r22
      asm( "push r23");
   113e4:	7f 93       	push	r23
      asm( "push r24");
   113e6:	8f 93       	push	r24
      asm( "push r25");
   113e8:	9f 93       	push	r25
      asm( "push r26");
   113ea:	af 93       	push	r26
      asm( "push r27");
   113ec:	bf 93       	push	r27
      asm( "push r28");
   113ee:	cf 93       	push	r28
      asm( "push r29");
   113f0:	df 93       	push	r29
      asm( "push r30");
   113f2:	ef 93       	push	r30
      asm( "push r31");
   113f4:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   113f6:	e0 91 fe 22 	lds	r30, 0x22FE
   113fa:	f0 91 ff 22 	lds	r31, 0x22FF
   113fe:	06 80       	ldd	r0, Z+6	; 0x06
   11400:	f7 81       	ldd	r31, Z+7	; 0x07
   11402:	e0 2d       	mov	r30, r0
   11404:	01 90       	ld	r0, Z+
   11406:	f0 81       	ld	r31, Z
   11408:	e0 2d       	mov	r30, r0
   1140a:	e0 93 7f 27 	sts	0x277F, r30
   1140e:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   11412:	2d b7       	in	r18, 0x3d	; 61
   11414:	30 e0       	ldi	r19, 0x00	; 0
   11416:	21 87       	std	Z+9, r18	; 0x09
   11418:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   1141a:	4e b7       	in	r20, 0x3e	; 62
   1141c:	94 2f       	mov	r25, r20
   1141e:	80 e0       	ldi	r24, 0x00	; 0
   11420:	82 2b       	or	r24, r18
   11422:	93 2b       	or	r25, r19
   11424:	81 87       	std	Z+9, r24	; 0x09
   11426:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   11428:	8f ef       	ldi	r24, 0xFF	; 255
   1142a:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   1142c:	8f e3       	ldi	r24, 0x3F	; 63
   1142e:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   11430:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   11434:	d0 91 3e 00 	lds	r29, 0x003E
   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   11438:	e0 91 fe 22 	lds	r30, 0x22FE
   1143c:	f0 91 ff 22 	lds	r31, 0x22FF
   11440:	06 80       	ldd	r0, Z+6	; 0x06
   11442:	f7 81       	ldd	r31, Z+7	; 0x07
   11444:	e0 2d       	mov	r30, r0
   11446:	01 90       	ld	r0, Z+
   11448:	f0 81       	ld	r31, Z
   1144a:	e0 2d       	mov	r30, r0

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   1144c:	e0 93 2a 27 	sts	0x272A, r30
   11450:	f0 93 2b 27 	sts	0x272B, r31
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   if( (gt_memObject.pt_temp->ps_stack[0] !=
   11454:	a3 85       	ldd	r26, Z+11	; 0x0b
   11456:	b4 85       	ldd	r27, Z+12	; 0x0c
   11458:	8d 91       	ld	r24, X+
   1145a:	9c 91       	ld	r25, X
   1145c:	11 97       	sbiw	r26, 0x01	; 1
   1145e:	2e ed       	ldi	r18, 0xDE	; 222
   11460:	8d 3a       	cpi	r24, 0xAD	; 173
   11462:	92 07       	cpc	r25, r18
   11464:	21 f0       	breq	.+8      	; 0x1146e <arb_createMemIntsOn+0xc8>
       ARB_STACK_OVERFLOW_CHECK) && (gt_memObject.pt_temp != NULL))
   11466:	30 97       	sbiw	r30, 0x00	; 0
   11468:	11 f0       	breq	.+4      	; 0x1146e <arb_createMemIntsOn+0xc8>
   {
      arb_stackOverflow();
   1146a:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   if( gt_memObject.b_performMalloc == true)
   1146e:	80 91 29 27 	lds	r24, 0x2729
   11472:	88 23       	and	r24, r24
   11474:	69 f0       	breq	.+26     	; 0x11490 <arb_createMemIntsOn+0xea>
   {
      *(gt_memObject.gpv_newMem) = malloc( gt_memObject.gs_sizeMem);
   11476:	c0 91 27 27 	lds	r28, 0x2727
   1147a:	d0 91 28 27 	lds	r29, 0x2728
   1147e:	80 91 25 27 	lds	r24, 0x2725
   11482:	90 91 26 27 	lds	r25, 0x2726
   11486:	0e 94 99 b4 	call	0x16932	; 0x16932 <malloc>
   1148a:	88 83       	st	Y, r24
   1148c:	99 83       	std	Y+1, r25	; 0x01
   1148e:	08 c0       	rjmp	.+16     	; 0x114a0 <arb_createMemIntsOn+0xfa>
   }
   else
      free( *(gt_memObject.gpv_newMem));
   11490:	e0 91 27 27 	lds	r30, 0x2727
   11494:	f0 91 28 27 	lds	r31, 0x2728
   11498:	80 81       	ld	r24, Z
   1149a:	91 81       	ldd	r25, Z+1	; 0x01
   1149c:	0e 94 2f b5 	call	0x16a5e	; 0x16a5e <free>

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   114a0:	e0 91 fe 22 	lds	r30, 0x22FE
   114a4:	f0 91 ff 22 	lds	r31, 0x22FF
   114a8:	06 80       	ldd	r0, Z+6	; 0x06
   114aa:	f7 81       	ldd	r31, Z+7	; 0x07
   114ac:	e0 2d       	mov	r30, r0
   114ae:	01 90       	ld	r0, Z+
   114b0:	f0 81       	ld	r31, Z
   114b2:	e0 2d       	mov	r30, r0
   114b4:	e0 93 7f 27 	sts	0x277F, r30
   114b8:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   114bc:	81 85       	ldd	r24, Z+9	; 0x09
   114be:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   114c0:	82 85       	ldd	r24, Z+10	; 0x0a
   114c2:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   114c4:	ff 91       	pop	r31
      asm( "pop r30");
   114c6:	ef 91       	pop	r30
      asm( "pop r29");
   114c8:	df 91       	pop	r29
      asm( "pop r28");
   114ca:	cf 91       	pop	r28
      asm( "pop r27");
   114cc:	bf 91       	pop	r27
      asm( "pop r26");
   114ce:	af 91       	pop	r26
      asm( "pop r25");
   114d0:	9f 91       	pop	r25
      asm( "pop r24");
   114d2:	8f 91       	pop	r24
      asm( "pop r23");
   114d4:	7f 91       	pop	r23
      asm( "pop r22");
   114d6:	6f 91       	pop	r22
      asm( "pop r21");
   114d8:	5f 91       	pop	r21
      asm( "pop r20");
   114da:	4f 91       	pop	r20
      asm( "pop r19");
   114dc:	3f 91       	pop	r19
      asm( "pop r18");
   114de:	2f 91       	pop	r18
      asm( "pop r17");
   114e0:	1f 91       	pop	r17
      asm( "pop r16");
   114e2:	0f 91       	pop	r16
      asm( "pop r15");
   114e4:	ff 90       	pop	r15
      asm( "pop r14");
   114e6:	ef 90       	pop	r14
      asm( "pop r13");
   114e8:	df 90       	pop	r13
      asm( "pop r12");
   114ea:	cf 90       	pop	r12
      asm( "pop r11");
   114ec:	bf 90       	pop	r11
      asm( "pop r10");
   114ee:	af 90       	pop	r10
      asm( "pop r9");
   114f0:	9f 90       	pop	r9
      asm( "pop r8");
   114f2:	8f 90       	pop	r8
      asm( "pop r7");
   114f4:	7f 90       	pop	r7
      asm( "pop r6");
   114f6:	6f 90       	pop	r6
      asm( "pop r5");
   114f8:	5f 90       	pop	r5
      asm( "pop r4");
   114fa:	4f 90       	pop	r4
      asm( "pop r3");
   114fc:	3f 90       	pop	r3
      asm( "pop r2");
   114fe:	2f 90       	pop	r2
      asm( "pop r1");
   11500:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   11502:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   11504:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   11506:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
    HAL_RET();
   11508:	08 95       	ret

0001150a <arb_createMemIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   1150a:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   1150c:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   1150e:	0f 92       	push	r0
      asm( "push r1");
   11510:	1f 92       	push	r1
      asm( "clr r1");
   11512:	11 24       	eor	r1, r1
      asm( "push r2");
   11514:	2f 92       	push	r2
      asm( "push r3");
   11516:	3f 92       	push	r3
      asm( "push r4");
   11518:	4f 92       	push	r4
      asm( "push r5");
   1151a:	5f 92       	push	r5
      asm( "push r6");
   1151c:	6f 92       	push	r6
      asm( "push r7");
   1151e:	7f 92       	push	r7
      asm( "push r8");
   11520:	8f 92       	push	r8
      asm( "push r9");
   11522:	9f 92       	push	r9
      asm( "push r10");
   11524:	af 92       	push	r10
      asm( "push r11");
   11526:	bf 92       	push	r11
      asm( "push r12");
   11528:	cf 92       	push	r12
      asm( "push r13");
   1152a:	df 92       	push	r13
      asm( "push r14");
   1152c:	ef 92       	push	r14
      asm( "push r15");
   1152e:	ff 92       	push	r15
      asm( "push r16");
   11530:	0f 93       	push	r16
      asm( "push r17");
   11532:	1f 93       	push	r17
      asm( "push r18");
   11534:	2f 93       	push	r18
      asm( "push r19");
   11536:	3f 93       	push	r19
      asm( "push r20");
   11538:	4f 93       	push	r20
      asm( "push r21");
   1153a:	5f 93       	push	r21
      asm( "push r22");
   1153c:	6f 93       	push	r22
      asm( "push r23");
   1153e:	7f 93       	push	r23
      asm( "push r24");
   11540:	8f 93       	push	r24
      asm( "push r25");
   11542:	9f 93       	push	r25
      asm( "push r26");
   11544:	af 93       	push	r26
      asm( "push r27");
   11546:	bf 93       	push	r27
      asm( "push r28");
   11548:	cf 93       	push	r28
      asm( "push r29");
   1154a:	df 93       	push	r29
      asm( "push r30");
   1154c:	ef 93       	push	r30
      asm( "push r31");
   1154e:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   11550:	e0 91 fe 22 	lds	r30, 0x22FE
   11554:	f0 91 ff 22 	lds	r31, 0x22FF
   11558:	06 80       	ldd	r0, Z+6	; 0x06
   1155a:	f7 81       	ldd	r31, Z+7	; 0x07
   1155c:	e0 2d       	mov	r30, r0
   1155e:	01 90       	ld	r0, Z+
   11560:	f0 81       	ld	r31, Z
   11562:	e0 2d       	mov	r30, r0
   11564:	e0 93 7f 27 	sts	0x277F, r30
   11568:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   1156c:	2d b7       	in	r18, 0x3d	; 61
   1156e:	30 e0       	ldi	r19, 0x00	; 0
   11570:	21 87       	std	Z+9, r18	; 0x09
   11572:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   11574:	4e b7       	in	r20, 0x3e	; 62
   11576:	94 2f       	mov	r25, r20
   11578:	80 e0       	ldi	r24, 0x00	; 0
   1157a:	82 2b       	or	r24, r18
   1157c:	93 2b       	or	r25, r19
   1157e:	81 87       	std	Z+9, r24	; 0x09
   11580:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   11582:	8f ef       	ldi	r24, 0xFF	; 255
   11584:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   11586:	8f e3       	ldi	r24, 0x3F	; 63
   11588:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   1158a:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1158e:	d0 91 3e 00 	lds	r29, 0x003E
   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   11592:	e0 91 fe 22 	lds	r30, 0x22FE
   11596:	f0 91 ff 22 	lds	r31, 0x22FF
   1159a:	06 80       	ldd	r0, Z+6	; 0x06
   1159c:	f7 81       	ldd	r31, Z+7	; 0x07
   1159e:	e0 2d       	mov	r30, r0
   115a0:	01 90       	ld	r0, Z+
   115a2:	f0 81       	ld	r31, Z
   115a4:	e0 2d       	mov	r30, r0

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   115a6:	e0 93 2a 27 	sts	0x272A, r30
   115aa:	f0 93 2b 27 	sts	0x272B, r31
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   if( (gt_memObject.pt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   115ae:	a3 85       	ldd	r26, Z+11	; 0x0b
   115b0:	b4 85       	ldd	r27, Z+12	; 0x0c
   115b2:	8d 91       	ld	r24, X+
   115b4:	9c 91       	ld	r25, X
   115b6:	11 97       	sbiw	r26, 0x01	; 1
   115b8:	2e ed       	ldi	r18, 0xDE	; 222
   115ba:	8d 3a       	cpi	r24, 0xAD	; 173
   115bc:	92 07       	cpc	r25, r18
   115be:	21 f0       	breq	.+8      	; 0x115c8 <arb_createMemIntsOff+0xbe>
       && (gt_memObject.pt_temp != NULL))
   115c0:	30 97       	sbiw	r30, 0x00	; 0
   115c2:	11 f0       	breq	.+4      	; 0x115c8 <arb_createMemIntsOff+0xbe>
   {
      arb_stackOverflow();
   115c4:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   if( gt_memObject.b_performMalloc == true)
   115c8:	80 91 29 27 	lds	r24, 0x2729
   115cc:	88 23       	and	r24, r24
   115ce:	69 f0       	breq	.+26     	; 0x115ea <arb_createMemIntsOff+0xe0>
   {
      *(gt_memObject.gpv_newMem) = malloc( gt_memObject.gs_sizeMem);
   115d0:	c0 91 27 27 	lds	r28, 0x2727
   115d4:	d0 91 28 27 	lds	r29, 0x2728
   115d8:	80 91 25 27 	lds	r24, 0x2725
   115dc:	90 91 26 27 	lds	r25, 0x2726
   115e0:	0e 94 99 b4 	call	0x16932	; 0x16932 <malloc>
   115e4:	88 83       	st	Y, r24
   115e6:	99 83       	std	Y+1, r25	; 0x01
   115e8:	08 c0       	rjmp	.+16     	; 0x115fa <arb_createMemIntsOff+0xf0>
   }
   else
      free( *gt_memObject.gpv_newMem);
   115ea:	e0 91 27 27 	lds	r30, 0x2727
   115ee:	f0 91 28 27 	lds	r31, 0x2728
   115f2:	80 81       	ld	r24, Z
   115f4:	91 81       	ldd	r25, Z+1	; 0x01
   115f6:	0e 94 2f b5 	call	0x16a5e	; 0x16a5e <free>

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   115fa:	e0 91 fe 22 	lds	r30, 0x22FE
   115fe:	f0 91 ff 22 	lds	r31, 0x22FF
   11602:	06 80       	ldd	r0, Z+6	; 0x06
   11604:	f7 81       	ldd	r31, Z+7	; 0x07
   11606:	e0 2d       	mov	r30, r0
   11608:	01 90       	ld	r0, Z+
   1160a:	f0 81       	ld	r31, Z
   1160c:	e0 2d       	mov	r30, r0
   1160e:	e0 93 7f 27 	sts	0x277F, r30
   11612:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   11616:	81 85       	ldd	r24, Z+9	; 0x09
   11618:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   1161a:	82 85       	ldd	r24, Z+10	; 0x0a
   1161c:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   1161e:	ff 91       	pop	r31
      asm( "pop r30");
   11620:	ef 91       	pop	r30
      asm( "pop r29");
   11622:	df 91       	pop	r29
      asm( "pop r28");
   11624:	cf 91       	pop	r28
      asm( "pop r27");
   11626:	bf 91       	pop	r27
      asm( "pop r26");
   11628:	af 91       	pop	r26
      asm( "pop r25");
   1162a:	9f 91       	pop	r25
      asm( "pop r24");
   1162c:	8f 91       	pop	r24
      asm( "pop r23");
   1162e:	7f 91       	pop	r23
      asm( "pop r22");
   11630:	6f 91       	pop	r22
      asm( "pop r21");
   11632:	5f 91       	pop	r21
      asm( "pop r20");
   11634:	4f 91       	pop	r20
      asm( "pop r19");
   11636:	3f 91       	pop	r19
      asm( "pop r18");
   11638:	2f 91       	pop	r18
      asm( "pop r17");
   1163a:	1f 91       	pop	r17
      asm( "pop r16");
   1163c:	0f 91       	pop	r16
      asm( "pop r15");
   1163e:	ff 90       	pop	r15
      asm( "pop r14");
   11640:	ef 90       	pop	r14
      asm( "pop r13");
   11642:	df 90       	pop	r13
      asm( "pop r12");
   11644:	cf 90       	pop	r12
      asm( "pop r11");
   11646:	bf 90       	pop	r11
      asm( "pop r10");
   11648:	af 90       	pop	r10
      asm( "pop r9");
   1164a:	9f 90       	pop	r9
      asm( "pop r8");
   1164c:	8f 90       	pop	r8
      asm( "pop r7");
   1164e:	7f 90       	pop	r7
      asm( "pop r6");
   11650:	6f 90       	pop	r6
      asm( "pop r5");
   11652:	5f 90       	pop	r5
      asm( "pop r4");
   11654:	4f 90       	pop	r4
      asm( "pop r3");
   11656:	3f 90       	pop	r3
      asm( "pop r2");
   11658:	2f 90       	pop	r2
      asm( "pop r1");
   1165a:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1165c:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   1165e:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   11660:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
    HAL_RET();
   11662:	08 95       	ret

00011664 <arb_malloc>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_malloc( size_t t_size,
                 void **pv_newMem)
{
   11664:	0f 93       	push	r16
   11666:	1f 93       	push	r17
   11668:	cf 93       	push	r28
   1166a:	df 93       	push	r29
   1166c:	8c 01       	movw	r16, r24
   1166e:	eb 01       	movw	r28, r22
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( arb_sysTimerEnabled() == true)
   11670:	0e 94 a6 9c 	call	0x1394c	; 0x1394c <arb_sysTimerEnabled>
   11674:	88 23       	and	r24, r24
   11676:	01 f1       	breq	.+64     	; 0x116b8 <arb_malloc+0x54>
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are running within thread space!
       * Threads are active - use context switching in order to save the state
       * of the system while allocating a new memory region.
       *---------------------------------------------------------------------*/
      if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   11678:	0f b6       	in	r0, 0x3f	; 63
   1167a:	07 fe       	sbrs	r0, 7
   1167c:	0f c0       	rjmp	.+30     	; 0x1169c <arb_malloc+0x38>
      {
         /*------------------------------------------------------------------*
          * Perform mutual exclusion.
          *------------------------------------------------------------------*/
         HAL_CLI();
   1167e:	f8 94       	cli
         gt_memObject.b_performMalloc = true;
   11680:	81 e0       	ldi	r24, 0x01	; 1
   11682:	80 93 29 27 	sts	0x2729, r24
         gt_memObject.gpv_newMem = pv_newMem;
   11686:	c0 93 27 27 	sts	0x2727, r28
   1168a:	d0 93 28 27 	sts	0x2728, r29
         gt_memObject.gs_sizeMem = t_size;
   1168e:	00 93 25 27 	sts	0x2725, r16
   11692:	10 93 26 27 	sts	0x2726, r17
         arb_createMemIntsOn();
   11696:	0e 94 d3 89 	call	0x113a6	; 0x113a6 <arb_createMemIntsOn>
   1169a:	13 c0       	rjmp	.+38     	; 0x116c2 <arb_malloc+0x5e>

      }/*End if( HAL_ARE_INTS_EN())*/
      else
      {
         gt_memObject.b_performMalloc = true;
   1169c:	81 e0       	ldi	r24, 0x01	; 1
   1169e:	80 93 29 27 	sts	0x2729, r24
         gt_memObject.gpv_newMem = pv_newMem;
   116a2:	c0 93 27 27 	sts	0x2727, r28
   116a6:	d0 93 28 27 	sts	0x2728, r29
         gt_memObject.gs_sizeMem = t_size;
   116aa:	00 93 25 27 	sts	0x2725, r16
   116ae:	10 93 26 27 	sts	0x2726, r17
         arb_createMemIntsOff();
   116b2:	0e 94 85 8a 	call	0x1150a	; 0x1150a <arb_createMemIntsOff>
   116b6:	05 c0       	rjmp	.+10     	; 0x116c2 <arb_malloc+0x5e>
   {
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are not running within thread space!
       * Threads are not active, no context switching required.
       *---------------------------------------------------------------------*/
      (*pv_newMem) = malloc( t_size);
   116b8:	c8 01       	movw	r24, r16
   116ba:	0e 94 99 b4 	call	0x16932	; 0x16932 <malloc>
   116be:	88 83       	st	Y, r24
   116c0:	99 83       	std	Y+1, r25	; 0x01
   }

}/*End arb_malloc*/
   116c2:	df 91       	pop	r29
   116c4:	cf 91       	pop	r28
   116c6:	1f 91       	pop	r17
   116c8:	0f 91       	pop	r16
   116ca:	08 95       	ret

000116cc <arb_free>:

void arb_free( void **pv_newMem)
{
   116cc:	cf 93       	push	r28
   116ce:	df 93       	push	r29
   116d0:	ec 01       	movw	r28, r24
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( arb_sysTimerEnabled() == true)
   116d2:	0e 94 a6 9c 	call	0x1394c	; 0x1394c <arb_sysTimerEnabled>
   116d6:	88 23       	and	r24, r24
   116d8:	b1 f0       	breq	.+44     	; 0x11706 <arb_free+0x3a>
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are running within thread space!
       * Threads are active - use context switching in order to save the state
       * of the system while allocating a new memory region.
       *---------------------------------------------------------------------*/
      if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   116da:	0f b6       	in	r0, 0x3f	; 63
   116dc:	07 fe       	sbrs	r0, 7
   116de:	0a c0       	rjmp	.+20     	; 0x116f4 <arb_free+0x28>
      {
         /*------------------------------------------------------------------*
          * Perform mutual exclusion.
          *------------------------------------------------------------------*/
         HAL_CLI();
   116e0:	f8 94       	cli
         gt_memObject.b_performMalloc = false;
   116e2:	10 92 29 27 	sts	0x2729, r1
         gt_memObject.gpv_newMem = pv_newMem;
   116e6:	c0 93 27 27 	sts	0x2727, r28
   116ea:	d0 93 28 27 	sts	0x2728, r29
         arb_createMemIntsOn();
   116ee:	0e 94 d3 89 	call	0x113a6	; 0x113a6 <arb_createMemIntsOn>
   116f2:	0d c0       	rjmp	.+26     	; 0x1170e <arb_free+0x42>

      }/*End if( HAL_ARE_INTS_EN())*/
      else
      {
         gt_memObject.b_performMalloc = false;
   116f4:	10 92 29 27 	sts	0x2729, r1
         gt_memObject.gpv_newMem = pv_newMem;
   116f8:	c0 93 27 27 	sts	0x2727, r28
   116fc:	d0 93 28 27 	sts	0x2728, r29
         arb_createMemIntsOff();
   11700:	0e 94 85 8a 	call	0x1150a	; 0x1150a <arb_createMemIntsOff>
   11704:	04 c0       	rjmp	.+8      	; 0x1170e <arb_free+0x42>
   {
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are not running within thread space!
       * Threads are not active, no context switching required.
       *---------------------------------------------------------------------*/
      free( (*pv_newMem));
   11706:	88 81       	ld	r24, Y
   11708:	99 81       	ldd	r25, Y+1	; 0x01
   1170a:	0e 94 2f b5 	call	0x16a5e	; 0x16a5e <free>
   }

   1170e:	df 91       	pop	r29
   11710:	cf 91       	pop	r28
   11712:	08 95       	ret

00011714 <arb_setPrintfDbgLevel>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_error arb_setPrintfDbgLevel( uint8_t c_dbg)
{
   gt_pObject.c_termDbgLevel = c_dbg;
   11714:	80 93 32 27 	sts	0x2732, r24
   switch( c_dbg)
   11718:	84 30       	cpi	r24, 0x04	; 4
   1171a:	59 f0       	breq	.+22     	; 0x11732 <arb_setPrintfDbgLevel+0x1e>
   1171c:	85 30       	cpi	r24, 0x05	; 5
   1171e:	20 f4       	brcc	.+8      	; 0x11728 <arb_setPrintfDbgLevel+0x14>
   11720:	81 50       	subi	r24, 0x01	; 1
   11722:	82 30       	cpi	r24, 0x02	; 2
   11724:	18 f4       	brcc	.+6      	; 0x1172c <arb_setPrintfDbgLevel+0x18>
   11726:	05 c0       	rjmp	.+10     	; 0x11732 <arb_setPrintfDbgLevel+0x1e>
   11728:	80 32       	cpi	r24, 0x20	; 32
   1172a:	19 f0       	breq	.+6      	; 0x11732 <arb_setPrintfDbgLevel+0x1e>
      case PRINTF_DBG_MED:
      case PRINTF_DBG_HIGH:
      case PRINTF_DBG_OFF:
      break;
      default:
         gt_pObject.c_termDbgLevel = PRINTF_DBG_HIGH;
   1172c:	84 e0       	ldi	r24, 0x04	; 4
   1172e:	80 93 32 27 	sts	0x2732, r24
      break;
   }/*End if( (t_dbg >= 0) && (t_dbg <= PRINTF_DBG_OFF))*/

   return ARB_PASSED;

}/*End arb_setPrintfDbgLevel*/
   11732:	80 e0       	ldi	r24, 0x00	; 0
   11734:	08 95       	ret

00011736 <arb_sysPrintChar>:
{
   return gt_pObject.c_termDbgLevel;
}/*End arb_getPrintfDbgLevel*/

void arb_sysPrintChar( const char c_buff)
{
   11736:	cf 93       	push	r28
   11738:	df 93       	push	r29
   1173a:	0f 92       	push	r0
   1173c:	cd b7       	in	r28, 0x3d	; 61
   1173e:	de b7       	in	r29, 0x3e	; 62
   11740:	89 83       	std	Y+1, r24	; 0x01
   /*------------------------------------------------------------------------*
    * Write directly to the console, do not buffer the data...
    *------------------------------------------------------------------------*/
   arb_write( gt_pObject.t_printfHndl,
   11742:	80 91 2c 27 	lds	r24, 0x272C
   11746:	90 91 2d 27 	lds	r25, 0x272D
   1174a:	be 01       	movw	r22, r28
   1174c:	6f 5f       	subi	r22, 0xFF	; 255
   1174e:	7f 4f       	sbci	r23, 0xFF	; 255
   11750:	41 e0       	ldi	r20, 0x01	; 1
   11752:	50 e0       	ldi	r21, 0x00	; 0
   11754:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              (int8_t *)&c_buff,
              (uint16_t)1);

}/*End arb_sysPrintChar*/
   11758:	0f 90       	pop	r0
   1175a:	df 91       	pop	r29
   1175c:	cf 91       	pop	r28
   1175e:	08 95       	ret

00011760 <arb_printf>:

void arb_printf( uint8_t c_flags,
                 const char *pc_buff)
{
   11760:	8f 92       	push	r8
   11762:	9f 92       	push	r9
   11764:	af 92       	push	r10
   11766:	bf 92       	push	r11
   11768:	cf 92       	push	r12
   1176a:	df 92       	push	r13
   1176c:	ef 92       	push	r14
   1176e:	ff 92       	push	r15
   11770:	0f 93       	push	r16
   11772:	1f 93       	push	r17
   11774:	cf 93       	push	r28
   11776:	df 93       	push	r29
   11778:	cd b7       	in	r28, 0x3d	; 61
   1177a:	de b7       	in	r29, 0x3e	; 62
   1177c:	ae 97       	sbiw	r28, 0x2e	; 46
   1177e:	cd bf       	out	0x3d, r28	; 61
   11780:	de bf       	out	0x3e, r29	; 62
   11782:	b6 2e       	mov	r11, r22
   11784:	a7 2e       	mov	r10, r23
   t_sysTime t_time;
   uint16_t s_size = 0;
   uint8_t ac_buff[20];
   int16_t s_msec;

   HAL_BEGIN_CRITICAL();
   11786:	9f b7       	in	r25, 0x3f	; 63
   11788:	99 83       	std	Y+1, r25	; 0x01
   1178a:	f8 94       	cli

   if( (c_flags &  PRINTF_DBG_SHOW_TIME) &&
   1178c:	88 2e       	mov	r8, r24
   1178e:	99 24       	eor	r9, r9
   11790:	86 ff       	sbrs	r24, 6
   11792:	0c c1       	rjmp	.+536    	; 0x119ac <arb_printf+0x24c>
       ((c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel))
   11794:	94 01       	movw	r18, r8
   11796:	27 70       	andi	r18, 0x07	; 7
   11798:	30 70       	andi	r19, 0x00	; 0
   1179a:	80 91 32 27 	lds	r24, 0x2732
   1179e:	90 e0       	ldi	r25, 0x00	; 0
   uint8_t ac_buff[20];
   int16_t s_msec;

   HAL_BEGIN_CRITICAL();

   if( (c_flags &  PRINTF_DBG_SHOW_TIME) &&
   117a0:	28 17       	cp	r18, r24
   117a2:	39 07       	cpc	r19, r25
   117a4:	0c f4       	brge	.+2      	; 0x117a8 <arb_printf+0x48>
   117a6:	02 c1       	rjmp	.+516    	; 0x119ac <arb_printf+0x24c>
       ((c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel))
   {
      t_time = arb_sysTimeNow();
   117a8:	ce 01       	movw	r24, r28
   117aa:	46 96       	adiw	r24, 0x16	; 22
   117ac:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimeNow>
   117b0:	28 a5       	lds	r18, 0x68
   117b2:	f9 a4       	lds	r31, 0xa9
   117b4:	ca a4       	lds	r28, 0xaa
   117b6:	ce 01       	movw	r24, r28
   117b8:	02 96       	adiw	r24, 0x02	; 2
      if( t_time.c_hours < 10)
   117ba:	2a 30       	cpi	r18, 0x0A	; 10
   117bc:	70 f4       	brcc	.+28     	; 0x117da <arb_printf+0x7a>
         s_size = sprintf_P( (char *)ac_buff,
   117be:	00 d0       	rcall	.+0      	; 0x117c0 <arb_printf+0x60>
   117c0:	00 d0       	rcall	.+0      	; 0x117c2 <arb_printf+0x62>
   117c2:	ed b7       	in	r30, 0x3d	; 61
   117c4:	fe b7       	in	r31, 0x3e	; 62
   117c6:	31 96       	adiw	r30, 0x01	; 1
   117c8:	ad b7       	in	r26, 0x3d	; 61
   117ca:	be b7       	in	r27, 0x3e	; 62
   117cc:	11 96       	adiw	r26, 0x01	; 1
   117ce:	8d 93       	st	X+, r24
   117d0:	9c 93       	st	X, r25
   117d2:	12 97       	sbiw	r26, 0x02	; 2
   117d4:	82 e9       	ldi	r24, 0x92	; 146
   117d6:	9b e0       	ldi	r25, 0x0B	; 11
   117d8:	0d c0       	rjmp	.+26     	; 0x117f4 <arb_printf+0x94>
                              PSTR("[%02d:"),
                              t_time.c_hours);
      else
         s_size = sprintf_P( (char *)ac_buff,
   117da:	00 d0       	rcall	.+0      	; 0x117dc <arb_printf+0x7c>
   117dc:	00 d0       	rcall	.+0      	; 0x117de <arb_printf+0x7e>
   117de:	ed b7       	in	r30, 0x3d	; 61
   117e0:	fe b7       	in	r31, 0x3e	; 62
   117e2:	31 96       	adiw	r30, 0x01	; 1
   117e4:	ad b7       	in	r26, 0x3d	; 61
   117e6:	be b7       	in	r27, 0x3e	; 62
   117e8:	11 96       	adiw	r26, 0x01	; 1
   117ea:	8d 93       	st	X+, r24
   117ec:	9c 93       	st	X, r25
   117ee:	12 97       	sbiw	r26, 0x02	; 2
   117f0:	89 e9       	ldi	r24, 0x99	; 153
   117f2:	9b e0       	ldi	r25, 0x0B	; 11
   117f4:	82 83       	std	Z+2, r24	; 0x02
   117f6:	93 83       	std	Z+3, r25	; 0x03
   117f8:	24 83       	std	Z+4, r18	; 0x04
   117fa:	15 82       	std	Z+5, r1	; 0x05
   117fc:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   11800:	8c 01       	movw	r16, r24
   11802:	8d b7       	in	r24, 0x3d	; 61
   11804:	9e b7       	in	r25, 0x3e	; 62
   11806:	06 96       	adiw	r24, 0x06	; 6
   11808:	8d bf       	out	0x3d, r24	; 61
   1180a:	9e bf       	out	0x3e, r25	; 62
                             PSTR("[%2d:"),
                             t_time.c_hours);

      if( t_time.c_min < 10)
   1180c:	99 e0       	ldi	r25, 0x09	; 9
   1180e:	9f 15       	cp	r25, r15
   11810:	a0 f0       	brcs	.+40     	; 0x1183a <arb_printf+0xda>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11812:	00 d0       	rcall	.+0      	; 0x11814 <arb_printf+0xb4>
   11814:	00 d0       	rcall	.+0      	; 0x11816 <arb_printf+0xb6>
   11816:	ed b7       	in	r30, 0x3d	; 61
   11818:	fe b7       	in	r31, 0x3e	; 62
   1181a:	31 96       	adiw	r30, 0x01	; 1
   1181c:	82 e0       	ldi	r24, 0x02	; 2
   1181e:	90 e0       	ldi	r25, 0x00	; 0
   11820:	8c 0f       	add	r24, r28
   11822:	9d 1f       	adc	r25, r29
   11824:	80 0f       	add	r24, r16
   11826:	91 1f       	adc	r25, r17
   11828:	ad b7       	in	r26, 0x3d	; 61
   1182a:	be b7       	in	r27, 0x3e	; 62
   1182c:	11 96       	adiw	r26, 0x01	; 1
   1182e:	8d 93       	st	X+, r24
   11830:	9c 93       	st	X, r25
   11832:	12 97       	sbiw	r26, 0x02	; 2
   11834:	8f e9       	ldi	r24, 0x9F	; 159
   11836:	9b e0       	ldi	r25, 0x0B	; 11
   11838:	13 c0       	rjmp	.+38     	; 0x11860 <arb_printf+0x100>
                              PSTR("%02d:"),
                              t_time.c_min);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   1183a:	00 d0       	rcall	.+0      	; 0x1183c <arb_printf+0xdc>
   1183c:	00 d0       	rcall	.+0      	; 0x1183e <arb_printf+0xde>
   1183e:	ed b7       	in	r30, 0x3d	; 61
   11840:	fe b7       	in	r31, 0x3e	; 62
   11842:	31 96       	adiw	r30, 0x01	; 1
   11844:	82 e0       	ldi	r24, 0x02	; 2
   11846:	90 e0       	ldi	r25, 0x00	; 0
   11848:	8c 0f       	add	r24, r28
   1184a:	9d 1f       	adc	r25, r29
   1184c:	80 0f       	add	r24, r16
   1184e:	91 1f       	adc	r25, r17
   11850:	ad b7       	in	r26, 0x3d	; 61
   11852:	be b7       	in	r27, 0x3e	; 62
   11854:	11 96       	adiw	r26, 0x01	; 1
   11856:	8d 93       	st	X+, r24
   11858:	9c 93       	st	X, r25
   1185a:	12 97       	sbiw	r26, 0x02	; 2
   1185c:	85 ea       	ldi	r24, 0xA5	; 165
   1185e:	9b e0       	ldi	r25, 0x0B	; 11
   11860:	82 83       	std	Z+2, r24	; 0x02
   11862:	93 83       	std	Z+3, r25	; 0x03
   11864:	f4 82       	std	Z+4, r15	; 0x04
   11866:	15 82       	std	Z+5, r1	; 0x05
   11868:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1186c:	08 0f       	add	r16, r24
   1186e:	19 1f       	adc	r17, r25
   11870:	8d b7       	in	r24, 0x3d	; 61
   11872:	9e b7       	in	r25, 0x3e	; 62
   11874:	06 96       	adiw	r24, 0x06	; 6
   11876:	8d bf       	out	0x3d, r24	; 61
   11878:	9e bf       	out	0x3e, r25	; 62
                              PSTR("%2d:"),
                              t_time.c_min);

      if( t_time.c_sec < 10)
   1187a:	99 e0       	ldi	r25, 0x09	; 9
   1187c:	9c 15       	cp	r25, r12
   1187e:	a0 f0       	brcs	.+40     	; 0x118a8 <arb_printf+0x148>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11880:	00 d0       	rcall	.+0      	; 0x11882 <arb_printf+0x122>
   11882:	00 d0       	rcall	.+0      	; 0x11884 <arb_printf+0x124>
   11884:	ed b7       	in	r30, 0x3d	; 61
   11886:	fe b7       	in	r31, 0x3e	; 62
   11888:	31 96       	adiw	r30, 0x01	; 1
   1188a:	82 e0       	ldi	r24, 0x02	; 2
   1188c:	90 e0       	ldi	r25, 0x00	; 0
   1188e:	8c 0f       	add	r24, r28
   11890:	9d 1f       	adc	r25, r29
   11892:	80 0f       	add	r24, r16
   11894:	91 1f       	adc	r25, r17
   11896:	ad b7       	in	r26, 0x3d	; 61
   11898:	be b7       	in	r27, 0x3e	; 62
   1189a:	11 96       	adiw	r26, 0x01	; 1
   1189c:	8d 93       	st	X+, r24
   1189e:	9c 93       	st	X, r25
   118a0:	12 97       	sbiw	r26, 0x02	; 2
   118a2:	8a ea       	ldi	r24, 0xAA	; 170
   118a4:	9b e0       	ldi	r25, 0x0B	; 11
   118a6:	13 c0       	rjmp	.+38     	; 0x118ce <arb_printf+0x16e>
                              PSTR("%02d:"),
                              t_time.c_sec);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   118a8:	00 d0       	rcall	.+0      	; 0x118aa <arb_printf+0x14a>
   118aa:	00 d0       	rcall	.+0      	; 0x118ac <arb_printf+0x14c>
   118ac:	ed b7       	in	r30, 0x3d	; 61
   118ae:	fe b7       	in	r31, 0x3e	; 62
   118b0:	31 96       	adiw	r30, 0x01	; 1
   118b2:	82 e0       	ldi	r24, 0x02	; 2
   118b4:	90 e0       	ldi	r25, 0x00	; 0
   118b6:	8c 0f       	add	r24, r28
   118b8:	9d 1f       	adc	r25, r29
   118ba:	80 0f       	add	r24, r16
   118bc:	91 1f       	adc	r25, r17
   118be:	ad b7       	in	r26, 0x3d	; 61
   118c0:	be b7       	in	r27, 0x3e	; 62
   118c2:	11 96       	adiw	r26, 0x01	; 1
   118c4:	8d 93       	st	X+, r24
   118c6:	9c 93       	st	X, r25
   118c8:	12 97       	sbiw	r26, 0x02	; 2
   118ca:	80 eb       	ldi	r24, 0xB0	; 176
   118cc:	9b e0       	ldi	r25, 0x0B	; 11
   118ce:	82 83       	std	Z+2, r24	; 0x02
   118d0:	93 83       	std	Z+3, r25	; 0x03
   118d2:	c4 82       	std	Z+4, r12	; 0x04
   118d4:	15 82       	std	Z+5, r1	; 0x05
   118d6:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   118da:	08 0f       	add	r16, r24
   118dc:	19 1f       	adc	r17, r25
   118de:	8d b7       	in	r24, 0x3d	; 61
   118e0:	9e b7       	in	r25, 0x3e	; 62
   118e2:	06 96       	adiw	r24, 0x06	; 6
   118e4:	8d bf       	out	0x3d, r24	; 61
   118e6:	9e bf       	out	0x3e, r25	; 62
                              PSTR("%2d:"),
                              t_time.c_sec);

      s_msec = t_time.i_usec/1000;
   118e8:	6b a5       	lds	r22, 0x6b
   118ea:	7c a5       	lds	r23, 0x6c
   118ec:	8d a5       	lds	r24, 0x6d
   118ee:	9e a5       	lds	r25, 0x6e
   118f0:	28 ee       	ldi	r18, 0xE8	; 232
   118f2:	33 e0       	ldi	r19, 0x03	; 3
   118f4:	40 e0       	ldi	r20, 0x00	; 0
   118f6:	50 e0       	ldi	r21, 0x00	; 0
   118f8:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
   118fc:	69 01       	movw	r12, r18
   118fe:	7a 01       	movw	r14, r20
      if( s_msec < 10)
   11900:	2a 30       	cpi	r18, 0x0A	; 10
   11902:	31 05       	cpc	r19, r1
   11904:	94 f4       	brge	.+36     	; 0x1192a <arb_printf+0x1ca>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11906:	00 d0       	rcall	.+0      	; 0x11908 <arb_printf+0x1a8>
   11908:	00 d0       	rcall	.+0      	; 0x1190a <arb_printf+0x1aa>
   1190a:	ed b7       	in	r30, 0x3d	; 61
   1190c:	fe b7       	in	r31, 0x3e	; 62
   1190e:	31 96       	adiw	r30, 0x01	; 1
   11910:	ce 01       	movw	r24, r28
   11912:	02 96       	adiw	r24, 0x02	; 2
   11914:	80 0f       	add	r24, r16
   11916:	91 1f       	adc	r25, r17
   11918:	ad b7       	in	r26, 0x3d	; 61
   1191a:	be b7       	in	r27, 0x3e	; 62
   1191c:	11 96       	adiw	r26, 0x01	; 1
   1191e:	8d 93       	st	X+, r24
   11920:	9c 93       	st	X, r25
   11922:	12 97       	sbiw	r26, 0x02	; 2
   11924:	85 eb       	ldi	r24, 0xB5	; 181
   11926:	9b e0       	ldi	r25, 0x0B	; 11
   11928:	2a c0       	rjmp	.+84     	; 0x1197e <arb_printf+0x21e>
                               PSTR("%003d]  "),
                               s_msec);
      else if( s_msec < 100)
   1192a:	24 36       	cpi	r18, 0x64	; 100
   1192c:	31 05       	cpc	r19, r1
   1192e:	94 f4       	brge	.+36     	; 0x11954 <arb_printf+0x1f4>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11930:	00 d0       	rcall	.+0      	; 0x11932 <arb_printf+0x1d2>
   11932:	00 d0       	rcall	.+0      	; 0x11934 <arb_printf+0x1d4>
   11934:	ed b7       	in	r30, 0x3d	; 61
   11936:	fe b7       	in	r31, 0x3e	; 62
   11938:	31 96       	adiw	r30, 0x01	; 1
   1193a:	ce 01       	movw	r24, r28
   1193c:	02 96       	adiw	r24, 0x02	; 2
   1193e:	80 0f       	add	r24, r16
   11940:	91 1f       	adc	r25, r17
   11942:	ad b7       	in	r26, 0x3d	; 61
   11944:	be b7       	in	r27, 0x3e	; 62
   11946:	11 96       	adiw	r26, 0x01	; 1
   11948:	8d 93       	st	X+, r24
   1194a:	9c 93       	st	X, r25
   1194c:	12 97       	sbiw	r26, 0x02	; 2
   1194e:	8e eb       	ldi	r24, 0xBE	; 190
   11950:	9b e0       	ldi	r25, 0x0B	; 11
   11952:	15 c0       	rjmp	.+42     	; 0x1197e <arb_printf+0x21e>
                              PSTR("%03d]  "),
                              s_msec);
      else if( s_msec < 1000)
   11954:	a3 e0       	ldi	r26, 0x03	; 3
   11956:	28 3e       	cpi	r18, 0xE8	; 232
   11958:	3a 07       	cpc	r19, r26
   1195a:	f4 f4       	brge	.+60     	; 0x11998 <arb_printf+0x238>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   1195c:	00 d0       	rcall	.+0      	; 0x1195e <arb_printf+0x1fe>
   1195e:	00 d0       	rcall	.+0      	; 0x11960 <arb_printf+0x200>
   11960:	ed b7       	in	r30, 0x3d	; 61
   11962:	fe b7       	in	r31, 0x3e	; 62
   11964:	31 96       	adiw	r30, 0x01	; 1
   11966:	ce 01       	movw	r24, r28
   11968:	02 96       	adiw	r24, 0x02	; 2
   1196a:	80 0f       	add	r24, r16
   1196c:	91 1f       	adc	r25, r17
   1196e:	ad b7       	in	r26, 0x3d	; 61
   11970:	be b7       	in	r27, 0x3e	; 62
   11972:	11 96       	adiw	r26, 0x01	; 1
   11974:	8d 93       	st	X+, r24
   11976:	9c 93       	st	X, r25
   11978:	12 97       	sbiw	r26, 0x02	; 2
   1197a:	86 ec       	ldi	r24, 0xC6	; 198
   1197c:	9b e0       	ldi	r25, 0x0B	; 11
   1197e:	82 83       	std	Z+2, r24	; 0x02
   11980:	93 83       	std	Z+3, r25	; 0x03
   11982:	c4 82       	std	Z+4, r12	; 0x04
   11984:	d5 82       	std	Z+5, r13	; 0x05
   11986:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1198a:	08 0f       	add	r16, r24
   1198c:	19 1f       	adc	r17, r25
   1198e:	8d b7       	in	r24, 0x3d	; 61
   11990:	9e b7       	in	r25, 0x3e	; 62
   11992:	06 96       	adiw	r24, 0x06	; 6
   11994:	8d bf       	out	0x3d, r24	; 61
   11996:	9e bf       	out	0x3e, r25	; 62
                              s_msec);

      /*---------------------------------------------------------------------*
       * Store the current time in the circular buffer.
       *---------------------------------------------------------------------*/
      utl_writeBlock( gt_pObject.t_logBuffer,
   11998:	80 91 30 27 	lds	r24, 0x2730
   1199c:	90 91 31 27 	lds	r25, 0x2731
   119a0:	be 01       	movw	r22, r28
   119a2:	6e 5f       	subi	r22, 0xFE	; 254
   119a4:	7f 4f       	sbci	r23, 0xFF	; 255
   119a6:	a8 01       	movw	r20, r16
   119a8:	0e 94 92 a1 	call	0x14324	; 0x14324 <utl_writeBlock>
   }

   /*------------------------------------------------------------------------*
    * Store the debug message in the circular buffer based on priority.
    *------------------------------------------------------------------------*/
   if( (c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel)
   119ac:	97 e0       	ldi	r25, 0x07	; 7
   119ae:	89 22       	and	r8, r25
   119b0:	99 24       	eor	r9, r9
   119b2:	80 91 32 27 	lds	r24, 0x2732
   119b6:	90 e0       	ldi	r25, 0x00	; 0
   119b8:	88 16       	cp	r8, r24
   119ba:	99 06       	cpc	r9, r25
   119bc:	d4 f0       	brlt	.+52     	; 0x119f2 <arb_printf+0x292>
   {

      utl_writeBlock( gt_pObject.t_logBuffer,
   119be:	80 91 30 27 	lds	r24, 0x2730
   119c2:	90 91 31 27 	lds	r25, 0x2731
   119c6:	eb 2d       	mov	r30, r11
   119c8:	fa 2d       	mov	r31, r10
   119ca:	df 01       	movw	r26, r30
   119cc:	0d 90       	ld	r0, X+
   119ce:	00 20       	and	r0, r0
   119d0:	e9 f7       	brne	.-6      	; 0x119cc <arb_printf+0x26c>
   119d2:	ad 01       	movw	r20, r26
   119d4:	41 50       	subi	r20, 0x01	; 1
   119d6:	50 40       	sbci	r21, 0x00	; 0
   119d8:	4e 1b       	sub	r20, r30
   119da:	5f 0b       	sbc	r21, r31
   119dc:	6b 2d       	mov	r22, r11
   119de:	7a 2d       	mov	r23, r10
   119e0:	0e 94 92 a1 	call	0x14324	; 0x14324 <utl_writeBlock>
                      (uint16_t)strlen( (char *)pc_buff));

      /*------------------------------------------------------------------------*
       * Append a new line to the end of the buffer.
       *------------------------------------------------------------------------*/
      utl_writeByte( gt_pObject.t_logBuffer,
   119e4:	80 91 30 27 	lds	r24, 0x2730
   119e8:	90 91 31 27 	lds	r25, 0x2731
   119ec:	6a e0       	ldi	r22, 0x0A	; 10
   119ee:	0e 94 2d a1 	call	0x1425a	; 0x1425a <utl_writeByte>
                     '\n');

   }/*End if( (c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel)*/

   HAL_END_CRITICAL();
   119f2:	89 81       	ldd	r24, Y+1	; 0x01
   119f4:	8f bf       	out	0x3f, r24	; 63

}/*End arb_printf*/
   119f6:	ae 96       	adiw	r28, 0x2e	; 46
   119f8:	cd bf       	out	0x3d, r28	; 61
   119fa:	de bf       	out	0x3e, r29	; 62
   119fc:	df 91       	pop	r29
   119fe:	cf 91       	pop	r28
   11a00:	1f 91       	pop	r17
   11a02:	0f 91       	pop	r16
   11a04:	ff 90       	pop	r15
   11a06:	ef 90       	pop	r14
   11a08:	df 90       	pop	r13
   11a0a:	cf 90       	pop	r12
   11a0c:	bf 90       	pop	r11
   11a0e:	af 90       	pop	r10
   11a10:	9f 90       	pop	r9
   11a12:	8f 90       	pop	r8
   11a14:	08 95       	ret

00011a16 <arb_printfFlushBuf>:

void arb_printfFlushBuf( void)
{
   11a16:	6f 92       	push	r6
   11a18:	7f 92       	push	r7
   11a1a:	8f 92       	push	r8
   11a1c:	9f 92       	push	r9
   11a1e:	af 92       	push	r10
   11a20:	bf 92       	push	r11
   11a22:	cf 92       	push	r12
   11a24:	df 92       	push	r13
   11a26:	ef 92       	push	r14
   11a28:	ff 92       	push	r15
   11a2a:	0f 93       	push	r16
   11a2c:	1f 93       	push	r17
   11a2e:	cf 93       	push	r28
   11a30:	df 93       	push	r29
   11a32:	cd b7       	in	r28, 0x3d	; 61
   11a34:	de b7       	in	r29, 0x3e	; 62
   11a36:	66 97       	sbiw	r28, 0x16	; 22
   11a38:	cd bf       	out	0x3d, r28	; 61
   11a3a:	de bf       	out	0x3e, r29	; 62
   int16_t s_bytes;

   /*------------------------------------------------------------------------*
    * Get the head location of the log buffer...
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   11a3c:	8f b7       	in	r24, 0x3f	; 63
   11a3e:	8a 83       	std	Y+2, r24	; 0x02
   11a40:	f8 94       	cli
   pc_headPtr = utl_getBufferPtr( gt_pObject.t_logBuffer);
   11a42:	80 91 30 27 	lds	r24, 0x2730
   11a46:	90 91 31 27 	lds	r25, 0x2731
   11a4a:	0e 94 19 a1 	call	0x14232	; 0x14232 <utl_getBufferPtr>
   11a4e:	4c 01       	movw	r8, r24
   s_level    = utl_getBufferFullLevel( gt_pObject.t_logBuffer);
   11a50:	80 91 30 27 	lds	r24, 0x2730
   11a54:	90 91 31 27 	lds	r25, 0x2731
   11a58:	0e 94 f1 a0 	call	0x141e2	; 0x141e2 <utl_getBufferFullLevel>
   11a5c:	6c 01       	movw	r12, r24
   s_size     = utl_getBufferSize( gt_pObject.t_logBuffer);
   11a5e:	80 91 30 27 	lds	r24, 0x2730
   11a62:	90 91 31 27 	lds	r25, 0x2731
   11a66:	0e 94 05 a1 	call	0x1420a	; 0x1420a <utl_getBufferSize>
   11a6a:	8c 01       	movw	r16, r24
   s_rdPtr    = utl_getBufRdPtr(gt_pObject.t_logBuffer);
   11a6c:	80 91 30 27 	lds	r24, 0x2730
   11a70:	90 91 31 27 	lds	r25, 0x2731
   11a74:	0e 94 7e a1 	call	0x142fc	; 0x142fc <utl_getBufRdPtr>
   HAL_END_CRITICAL();
   11a78:	2a 81       	ldd	r18, Y+2	; 0x02
   11a7a:	2f bf       	out	0x3f, r18	; 63

   /*------------------------------------------------------------------------*
    * Write the entire contents of the buffer...
    *------------------------------------------------------------------------*/
   if( s_level >= s_size)
   11a7c:	c0 16       	cp	r12, r16
   11a7e:	d1 06       	cpc	r13, r17
   11a80:	cc f1       	brlt	.+114    	; 0x11af4 <arb_printfFlushBuf+0xde>
   {
      /*---------------------------------------------------------------------*
       * Print only s_size bytes...
       *---------------------------------------------------------------------*/
      arb_write( gt_pObject.t_printfHndl,
   11a82:	80 91 2c 27 	lds	r24, 0x272C
   11a86:	90 91 2d 27 	lds	r25, 0x272D
   11a8a:	b4 01       	movw	r22, r8
   11a8c:	a8 01       	movw	r20, r16
   11a8e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 (int8_t *)pc_headPtr,
                 (uint16_t)s_size);

      if( gt_pObject.b_wrtLogFile == true)
   11a92:	80 91 33 27 	lds	r24, 0x2733
   11a96:	88 23       	and	r24, r24
   11a98:	19 f1       	breq	.+70     	; 0x11ae0 <arb_printfFlushBuf+0xca>
      {

         s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11a9a:	80 91 2e 27 	lds	r24, 0x272E
   11a9e:	90 91 2f 27 	lds	r25, 0x272F
   11aa2:	b4 01       	movw	r22, r8
   11aa4:	a8 01       	movw	r20, r16
   11aa6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                              (int8_t *)pc_headPtr,
                              s_size);

         if( s_bytes != s_size)
   11aaa:	80 17       	cp	r24, r16
   11aac:	91 07       	cpc	r25, r17
   11aae:	c1 f0       	breq	.+48     	; 0x11ae0 <arb_printfFlushBuf+0xca>
         {
            sprintf( (char *)ac_buff, "sd write failed\r");
   11ab0:	8e 01       	movw	r16, r28
   11ab2:	0d 5f       	subi	r16, 0xFD	; 253
   11ab4:	1f 4f       	sbci	r17, 0xFF	; 255
   11ab6:	c8 01       	movw	r24, r16
   11ab8:	6b ea       	ldi	r22, 0xAB	; 171
   11aba:	72 e2       	ldi	r23, 0x22	; 34
   11abc:	0e 94 28 b7 	call	0x16e50	; 0x16e50 <strcpy>
            arb_write( gt_pObject.t_printfHndl,
   11ac0:	80 91 2c 27 	lds	r24, 0x272C
   11ac4:	90 91 2d 27 	lds	r25, 0x272D
   11ac8:	f8 01       	movw	r30, r16
   11aca:	01 90       	ld	r0, Z+
   11acc:	00 20       	and	r0, r0
   11ace:	e9 f7       	brne	.-6      	; 0x11aca <arb_printfFlushBuf+0xb4>
   11ad0:	af 01       	movw	r20, r30
   11ad2:	41 50       	subi	r20, 0x01	; 1
   11ad4:	50 40       	sbci	r21, 0x00	; 0
   11ad6:	40 1b       	sub	r20, r16
   11ad8:	51 0b       	sbc	r21, r17
   11ada:	b8 01       	movw	r22, r16
   11adc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      }/*End if( gt_pObject.b_wrtLogFile == true)*/

      /*---------------------------------------------------------------------*
       * Buffer overflowed so reset...
       *---------------------------------------------------------------------*/
      HAL_BEGIN_CRITICAL();
   11ae0:	8f b7       	in	r24, 0x3f	; 63
   11ae2:	89 83       	std	Y+1, r24	; 0x01
   11ae4:	f8 94       	cli
      ult_resetBuffer(gt_pObject.t_logBuffer);
   11ae6:	80 91 30 27 	lds	r24, 0x2730
   11aea:	90 91 31 27 	lds	r25, 0x2731
   11aee:	0e 94 6d a2 	call	0x144da	; 0x144da <ult_resetBuffer>
   11af2:	8b c0       	rjmp	.+278    	; 0x11c0a <arb_printfFlushBuf+0x1f4>
      HAL_END_CRITICAL();

   }/*End if( s_level > s_size)*/
   else if( s_level > 0)
   11af4:	1c 14       	cp	r1, r12
   11af6:	1d 04       	cpc	r1, r13
   11af8:	0c f0       	brlt	.+2      	; 0x11afc <arb_printfFlushBuf+0xe6>
   11afa:	89 c0       	rjmp	.+274    	; 0x11c0e <arb_printfFlushBuf+0x1f8>
   {
      /*---------------------------------------------------------------------*
       * If wrapping the end of the buffer, print to console twice...
       *---------------------------------------------------------------------*/
      s_room = s_size - s_rdPtr;
   11afc:	08 1b       	sub	r16, r24
   11afe:	19 0b       	sbc	r17, r25
   11b00:	74 01       	movw	r14, r8
   11b02:	e8 0e       	add	r14, r24
   11b04:	f9 1e       	adc	r15, r25
      if( s_room < s_level)
      {
         arb_write( gt_pObject.t_printfHndl,
   11b06:	80 91 2c 27 	lds	r24, 0x272C
   11b0a:	90 91 2d 27 	lds	r25, 0x272D
   11b0e:	b7 01       	movw	r22, r14
   {
      /*---------------------------------------------------------------------*
       * If wrapping the end of the buffer, print to console twice...
       *---------------------------------------------------------------------*/
      s_room = s_size - s_rdPtr;
      if( s_room < s_level)
   11b10:	0c 15       	cp	r16, r12
   11b12:	1d 05       	cpc	r17, r13
   11b14:	0c f0       	brlt	.+2      	; 0x11b18 <arb_printfFlushBuf+0x102>
   11b16:	45 c0       	rjmp	.+138    	; 0x11ba2 <arb_printfFlushBuf+0x18c>
      {
         arb_write( gt_pObject.t_printfHndl,
   11b18:	a8 01       	movw	r20, r16
   11b1a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                    (int8_t *)&pc_headPtr[s_rdPtr],
                    (uint16_t)s_room);

         arb_write( gt_pObject.t_printfHndl,
   11b1e:	80 91 2c 27 	lds	r24, 0x272C
   11b22:	90 91 2d 27 	lds	r25, 0x272D
                    (int8_t *)&pc_headPtr[0],
                    (uint16_t)(s_level - s_room));
   11b26:	56 01       	movw	r10, r12
   11b28:	a0 1a       	sub	r10, r16
   11b2a:	b1 0a       	sbc	r11, r17
      {
         arb_write( gt_pObject.t_printfHndl,
                    (int8_t *)&pc_headPtr[s_rdPtr],
                    (uint16_t)s_room);

         arb_write( gt_pObject.t_printfHndl,
   11b2c:	7a 2c       	mov	r7, r10
   11b2e:	6b 2c       	mov	r6, r11
   11b30:	b4 01       	movw	r22, r8
   11b32:	a5 01       	movw	r20, r10
   11b34:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                    (int8_t *)&pc_headPtr[0],
                    (uint16_t)(s_level - s_room));

         if( gt_pObject.b_wrtLogFile == true)
   11b38:	80 91 33 27 	lds	r24, 0x2733
   11b3c:	88 23       	and	r24, r24
   11b3e:	09 f4       	brne	.+2      	; 0x11b42 <arb_printfFlushBuf+0x12c>
   11b40:	5a c0       	rjmp	.+180    	; 0x11bf6 <arb_printfFlushBuf+0x1e0>
         {
            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11b42:	80 91 2e 27 	lds	r24, 0x272E
   11b46:	90 91 2f 27 	lds	r25, 0x272F
   11b4a:	b7 01       	movw	r22, r14
   11b4c:	a8 01       	movw	r20, r16
   11b4e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                                 (int8_t *)&pc_headPtr[s_rdPtr],
                                 (uint16_t)s_room);

            if( s_bytes != s_room)
   11b52:	80 17       	cp	r24, r16
   11b54:	91 07       	cpc	r25, r17
   11b56:	c1 f0       	breq	.+48     	; 0x11b88 <arb_printfFlushBuf+0x172>
            {
               sprintf( (char *)ac_buff, "sd write failed\r");
   11b58:	8e 01       	movw	r16, r28
   11b5a:	0d 5f       	subi	r16, 0xFD	; 253
   11b5c:	1f 4f       	sbci	r17, 0xFF	; 255
   11b5e:	c8 01       	movw	r24, r16
   11b60:	6b ea       	ldi	r22, 0xAB	; 171
   11b62:	72 e2       	ldi	r23, 0x22	; 34
   11b64:	0e 94 28 b7 	call	0x16e50	; 0x16e50 <strcpy>
               arb_write( gt_pObject.t_printfHndl,
   11b68:	80 91 2c 27 	lds	r24, 0x272C
   11b6c:	90 91 2d 27 	lds	r25, 0x272D
   11b70:	f8 01       	movw	r30, r16
   11b72:	01 90       	ld	r0, Z+
   11b74:	00 20       	and	r0, r0
   11b76:	e9 f7       	brne	.-6      	; 0x11b72 <arb_printfFlushBuf+0x15c>
   11b78:	af 01       	movw	r20, r30
   11b7a:	41 50       	subi	r20, 0x01	; 1
   11b7c:	50 40       	sbci	r21, 0x00	; 0
   11b7e:	40 1b       	sub	r20, r16
   11b80:	51 0b       	sbc	r21, r17
   11b82:	b8 01       	movw	r22, r16
   11b84:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                          (int8_t *)ac_buff,
                          (uint16_t)strlen( (char *)ac_buff));
            }/*End if( s_bytes != s_room)*/

            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11b88:	80 91 2e 27 	lds	r24, 0x272E
   11b8c:	90 91 2f 27 	lds	r25, 0x272F
   11b90:	b4 01       	movw	r22, r8
   11b92:	47 2d       	mov	r20, r7
   11b94:	56 2d       	mov	r21, r6
   11b96:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                                 (int8_t *)&pc_headPtr[0],
                                 (uint16_t)(s_level - s_room));

            if( s_bytes != (uint16_t)(s_level - s_room))
   11b9a:	8a 15       	cp	r24, r10
   11b9c:	9b 05       	cpc	r25, r11
   11b9e:	99 f4       	brne	.+38     	; 0x11bc6 <arb_printfFlushBuf+0x1b0>
   11ba0:	2a c0       	rjmp	.+84     	; 0x11bf6 <arb_printfFlushBuf+0x1e0>
         }/*End if( gt_pObject.b_wrtLogFile == true)*/

      }/*End if( s_room < s_level)*/
      else
      {
         arb_write( gt_pObject.t_printfHndl,
   11ba2:	a6 01       	movw	r20, r12
   11ba4:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                   (int8_t *)&pc_headPtr[s_rdPtr],
                   (uint16_t)s_level);

         if( gt_pObject.b_wrtLogFile == true)
   11ba8:	80 91 33 27 	lds	r24, 0x2733
   11bac:	88 23       	and	r24, r24
   11bae:	19 f1       	breq	.+70     	; 0x11bf6 <arb_printfFlushBuf+0x1e0>
         {

            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11bb0:	80 91 2e 27 	lds	r24, 0x272E
   11bb4:	90 91 2f 27 	lds	r25, 0x272F
   11bb8:	b7 01       	movw	r22, r14
   11bba:	a6 01       	movw	r20, r12
   11bbc:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                                 (int8_t *)&pc_headPtr[s_rdPtr],
                                 (uint16_t)s_level);

            if( s_bytes != s_level)
   11bc0:	8c 15       	cp	r24, r12
   11bc2:	9d 05       	cpc	r25, r13
   11bc4:	c1 f0       	breq	.+48     	; 0x11bf6 <arb_printfFlushBuf+0x1e0>
            {
               sprintf( (char *)ac_buff, "sd write failed\r");
   11bc6:	8e 01       	movw	r16, r28
   11bc8:	0d 5f       	subi	r16, 0xFD	; 253
   11bca:	1f 4f       	sbci	r17, 0xFF	; 255
   11bcc:	c8 01       	movw	r24, r16
   11bce:	6b ea       	ldi	r22, 0xAB	; 171
   11bd0:	72 e2       	ldi	r23, 0x22	; 34
   11bd2:	0e 94 28 b7 	call	0x16e50	; 0x16e50 <strcpy>
               arb_write( gt_pObject.t_printfHndl,
   11bd6:	80 91 2c 27 	lds	r24, 0x272C
   11bda:	90 91 2d 27 	lds	r25, 0x272D
   11bde:	f8 01       	movw	r30, r16
   11be0:	01 90       	ld	r0, Z+
   11be2:	00 20       	and	r0, r0
   11be4:	e9 f7       	brne	.-6      	; 0x11be0 <arb_printfFlushBuf+0x1ca>
   11be6:	af 01       	movw	r20, r30
   11be8:	41 50       	subi	r20, 0x01	; 1
   11bea:	50 40       	sbci	r21, 0x00	; 0
   11bec:	40 1b       	sub	r20, r16
   11bee:	51 0b       	sbc	r21, r17
   11bf0:	b8 01       	movw	r22, r16
   11bf2:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
            }/*End if( s_bytes != s_level)*/

         }/*End if( gt_pObject.b_wrtLogFile == true)*/
      }
      
      HAL_BEGIN_CRITICAL();
   11bf6:	8f b7       	in	r24, 0x3f	; 63
   11bf8:	89 83       	std	Y+1, r24	; 0x01
   11bfa:	f8 94       	cli
      utl_incrBufRdPtr( gt_pObject.t_logBuffer,
   11bfc:	80 91 30 27 	lds	r24, 0x2730
   11c00:	90 91 31 27 	lds	r25, 0x2731
   11c04:	b6 01       	movw	r22, r12
   11c06:	0e 94 57 a1 	call	0x142ae	; 0x142ae <utl_incrBufRdPtr>
                        (uint16_t)s_level);
      HAL_END_CRITICAL();
   11c0a:	89 81       	ldd	r24, Y+1	; 0x01
   11c0c:	8f bf       	out	0x3f, r24	; 63
      
   }/*End else if( s_level > 0)*/

}/*End arb_printfFlushBuf*/
   11c0e:	66 96       	adiw	r28, 0x16	; 22
   11c10:	cd bf       	out	0x3d, r28	; 61
   11c12:	de bf       	out	0x3e, r29	; 62
   11c14:	df 91       	pop	r29
   11c16:	cf 91       	pop	r28
   11c18:	1f 91       	pop	r17
   11c1a:	0f 91       	pop	r16
   11c1c:	ff 90       	pop	r15
   11c1e:	ef 90       	pop	r14
   11c20:	df 90       	pop	r13
   11c22:	cf 90       	pop	r12
   11c24:	bf 90       	pop	r11
   11c26:	af 90       	pop	r10
   11c28:	9f 90       	pop	r9
   11c2a:	8f 90       	pop	r8
   11c2c:	7f 90       	pop	r7
   11c2e:	6f 90       	pop	r6
   11c30:	08 95       	ret

00011c32 <arb_printfInit>:

t_error arb_printfInit( char *pc_driver,
                        int16_t s_bufSize,
                        char *pc_logFile)
{
   11c32:	0f 93       	push	r16
   11c34:	1f 93       	push	r17
   11c36:	cf 93       	push	r28
   11c38:	df 93       	push	r29
   11c3a:	8b 01       	movw	r16, r22
   11c3c:	ea 01       	movw	r28, r20

   gt_pObject.c_termDbgLevel = PRINTF_DBG_OFF;
   11c3e:	20 e2       	ldi	r18, 0x20	; 32
   11c40:	20 93 32 27 	sts	0x2732, r18
   gt_pObject.b_wrtLogFile   = false;
   11c44:	10 92 33 27 	sts	0x2733, r1

   /*------------------------------------------------------------------------*
    * Open a handle to the printf driver.
    *------------------------------------------------------------------------*/
   gt_pObject.t_printfHndl = arb_open( pc_driver,
   11c48:	63 e0       	ldi	r22, 0x03	; 3
   11c4a:	0e 94 25 83 	call	0x1064a	; 0x1064a <arb_open>
   11c4e:	80 93 2c 27 	sts	0x272C, r24
   11c52:	90 93 2d 27 	sts	0x272D, r25
                                       ARB_O_READ |
                                       ARB_O_WRITE);

   if( gt_pObject.t_printfHndl < 0)
   11c56:	80 91 2c 27 	lds	r24, 0x272C
   11c5a:	90 91 2d 27 	lds	r25, 0x272D
   11c5e:	97 ff       	sbrs	r25, 7
   11c60:	05 c0       	rjmp	.+10     	; 0x11c6c <arb_printfInit+0x3a>
   {
      return (t_error)gt_pObject.t_printfHndl;
   11c62:	80 91 2c 27 	lds	r24, 0x272C
   11c66:	90 91 2d 27 	lds	r25, 0x272D
   11c6a:	37 c0       	rjmp	.+110    	; 0x11cda <arb_printfInit+0xa8>

   /*------------------------------------------------------------------------*
    * If a valid file extension has been entered log printf messages to a 
    * file.
    *------------------------------------------------------------------------*/ 
   if( pc_logFile != NULL)
   11c6c:	20 97       	sbiw	r28, 0x00	; 0
   11c6e:	29 f1       	breq	.+74     	; 0x11cba <arb_printfInit+0x88>
   {

      /*---------------------------------------------------------------------*
       * Open a file for logging debug information.
       *---------------------------------------------------------------------*/
      gt_pObject.t_logFileHndl = arb_open( pc_logFile,
   11c70:	ce 01       	movw	r24, r28
   11c72:	6a e4       	ldi	r22, 0x4A	; 74
   11c74:	0e 94 25 83 	call	0x1064a	; 0x1064a <arb_open>
   11c78:	80 93 2e 27 	sts	0x272E, r24
   11c7c:	90 93 2f 27 	sts	0x272F, r25
                                           ARB_O_SYNC);

      /*---------------------------------------------------------------------*
       * Don't return a failure if the file couldn't be opened.
       *---------------------------------------------------------------------*/
      if( gt_pObject.t_logFileHndl < 0)
   11c80:	80 91 2e 27 	lds	r24, 0x272E
   11c84:	90 91 2f 27 	lds	r25, 0x272F
   11c88:	97 ff       	sbrs	r25, 7
   11c8a:	05 c0       	rjmp	.+10     	; 0x11c96 <arb_printfInit+0x64>
      {
         return (t_error)gt_pObject.t_logFileHndl;
   11c8c:	80 91 2e 27 	lds	r24, 0x272E
   11c90:	90 91 2f 27 	lds	r25, 0x272F
   11c94:	22 c0       	rjmp	.+68     	; 0x11cda <arb_printfInit+0xa8>
      }

      if( arb_ioctl( gt_pObject.t_logFileHndl,
   11c96:	80 91 2e 27 	lds	r24, 0x272E
   11c9a:	90 91 2f 27 	lds	r25, 0x272F
   11c9e:	62 e0       	ldi	r22, 0x02	; 2
   11ca0:	70 e0       	ldi	r23, 0x00	; 0
   11ca2:	20 e0       	ldi	r18, 0x00	; 0
   11ca4:	30 e0       	ldi	r19, 0x00	; 0
   11ca6:	a9 01       	movw	r20, r18
   11ca8:	0e 94 71 84 	call	0x108e2	; 0x108e2 <arb_ioctl>
   11cac:	dc 01       	movw	r26, r24
   11cae:	cb 01       	movw	r24, r22
   11cb0:	b7 fd       	sbrc	r27, 7
   11cb2:	12 c0       	rjmp	.+36     	; 0x11cd8 <arb_printfInit+0xa6>
                     0) < 0)
      {
         return ARB_OPEN_ERROR;
      }

      gt_pObject.b_wrtLogFile = true;
   11cb4:	81 e0       	ldi	r24, 0x01	; 1
   11cb6:	80 93 33 27 	sts	0x2733, r24
   }/*End if( pc_logFile != NULL)*/

   /*------------------------------------------------------------------------*
    * Allocate a circular buffer for holding the debug messages.
    *------------------------------------------------------------------------*/
   gt_pObject.t_logBuffer = utl_createBuffer( s_bufSize);
   11cba:	c8 01       	movw	r24, r16
   11cbc:	0e 94 85 a2 	call	0x1450a	; 0x1450a <utl_createBuffer>
   11cc0:	80 93 30 27 	sts	0x2730, r24
   11cc4:	90 93 31 27 	sts	0x2731, r25
   if( gt_pObject.t_logBuffer < 0)
   11cc8:	80 91 30 27 	lds	r24, 0x2730
   11ccc:	90 91 31 27 	lds	r25, 0x2731
   {
      return ARB_OUT_OF_HEAP;
   11cd0:	89 2f       	mov	r24, r25
   11cd2:	88 0f       	add	r24, r24
   11cd4:	88 0b       	sbc	r24, r24
   11cd6:	01 c0       	rjmp	.+2      	; 0x11cda <arb_printfInit+0xa8>

      if( arb_ioctl( gt_pObject.t_logFileHndl,
                     SD_ERASE,
                     0) < 0)
      {
         return ARB_OPEN_ERROR;
   11cd8:	80 ef       	ldi	r24, 0xF0	; 240
      return ARB_OUT_OF_HEAP;
   }/*End if( gt_pObject.t_logBuffer < 0)*/

   return ARB_PASSED;

}/*End arb_printfInit*/
   11cda:	df 91       	pop	r29
   11cdc:	cf 91       	pop	r28
   11cde:	1f 91       	pop	r17
   11ce0:	0f 91       	pop	r16
   11ce2:	08 95       	ret

00011ce4 <arb_roundRobinScheduler>:

/*---------------------------------------------------------------------------*
 * Round-robin scheduler
 *---------------------------------------------------------------------------*/
static void arb_roundRobinScheduler( void)
{
   11ce4:	2f 92       	push	r2
   11ce6:	3f 92       	push	r3
   11ce8:	4f 92       	push	r4
   11cea:	5f 92       	push	r5
   11cec:	6f 92       	push	r6
   11cee:	7f 92       	push	r7
   11cf0:	8f 92       	push	r8
   11cf2:	9f 92       	push	r9
   11cf4:	af 92       	push	r10
   11cf6:	bf 92       	push	r11
   11cf8:	cf 92       	push	r12
   11cfa:	df 92       	push	r13
   11cfc:	ef 92       	push	r14
   11cfe:	ff 92       	push	r15
   11d00:	0f 93       	push	r16
   11d02:	1f 93       	push	r17
   11d04:	cf 93       	push	r28
   11d06:	df 93       	push	r29
   11d08:	cd b7       	in	r28, 0x3d	; 61
   11d0a:	de b7       	in	r29, 0x3e	; 62
   11d0c:	28 97       	sbiw	r28, 0x08	; 8
   11d0e:	cd bf       	out	0x3d, r28	; 61
   11d10:	de bf       	out	0x3e, r29	; 62
   t_LINKHNDL t_curr = UTL_GET_CURR_OF_CONT( gt_activeThreads);
   11d12:	e0 91 fe 22 	lds	r30, 0x22FE
   11d16:	f0 91 ff 22 	lds	r31, 0x22FF
   11d1a:	86 81       	ldd	r24, Z+6	; 0x06
   11d1c:	97 81       	ldd	r25, Z+7	; 0x07
   11d1e:	8b 83       	std	Y+3, r24	; 0x03
   11d20:	9c 83       	std	Y+4, r25	; 0x04
   t_tcb *pt_temp;

   if( gt_schedObject.b_enableScheduler == true)
   11d22:	80 91 36 27 	lds	r24, 0x2736
   11d26:	88 23       	and	r24, r24
   11d28:	09 f4       	brne	.+2      	; 0x11d2c <arb_roundRobinScheduler+0x48>
   11d2a:	98 c1       	rjmp	.+816    	; 0x1205c <arb_roundRobinScheduler+0x378>
      /*---------------------------------------------------------------------*
       * Sequentially search for the next thread that isn't sleeping
       *---------------------------------------------------------------------*/
      do
      {
         t_curr  = UTL_GET_NEXT_LINK( t_curr);
   11d2c:	eb 81       	ldd	r30, Y+3	; 0x03
   11d2e:	fc 81       	ldd	r31, Y+4	; 0x04
   11d30:	80 85       	ldd	r24, Z+8	; 0x08
   11d32:	91 85       	ldd	r25, Z+9	; 0x09
   11d34:	8b 83       	std	Y+3, r24	; 0x03
   11d36:	9c 83       	std	Y+4, r25	; 0x04
         pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   11d38:	eb 81       	ldd	r30, Y+3	; 0x03
   11d3a:	fc 81       	ldd	r31, Y+4	; 0x04
   11d3c:	01 90       	ld	r0, Z+
   11d3e:	f0 81       	ld	r31, Z
   11d40:	e0 2d       	mov	r30, r0

      }while( pt_temp->t_status == SLEEPING);
   11d42:	81 81       	ldd	r24, Z+1	; 0x01
   11d44:	83 30       	cpi	r24, 0x03	; 3
   11d46:	91 f3       	breq	.-28     	; 0x11d2c <arb_roundRobinScheduler+0x48>

      /*---------------------------------------------------------------------*
       * Set the location of the new 'current' thread
       *---------------------------------------------------------------------*/
      UTL_SET_CURR_OF_CONT( gt_activeThreads, t_curr);
   11d48:	a0 91 fe 22 	lds	r26, 0x22FE
   11d4c:	b0 91 ff 22 	lds	r27, 0x22FF
   11d50:	8b 81       	ldd	r24, Y+3	; 0x03
   11d52:	9c 81       	ldd	r25, Y+4	; 0x04
   11d54:	16 96       	adiw	r26, 0x06	; 6
   11d56:	8d 93       	st	X+, r24
   11d58:	9c 93       	st	X, r25
   11d5a:	17 97       	sbiw	r26, 0x07	; 7

      gpt_activeThread = pt_temp;
   11d5c:	e0 93 34 27 	sts	0x2734, r30
   11d60:	f0 93 35 27 	sts	0x2735, r31

      /*---------------------------------------------------------------------*
       * Change the status of this new thread to RUNNING
       *---------------------------------------------------------------------*/
      pt_temp->t_status = RUNNING;
   11d64:	81 e0       	ldi	r24, 0x01	; 1
   11d66:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   11d68:	e0 91 fe 22 	lds	r30, 0x22FE
   11d6c:	f0 91 ff 22 	lds	r31, 0x22FF
   11d70:	42 81       	ldd	r20, Z+2	; 0x02
   11d72:	53 81       	ldd	r21, Z+3	; 0x03
   11d74:	e0 91 fe 22 	lds	r30, 0x22FE
   11d78:	f0 91 ff 22 	lds	r31, 0x22FF
   11d7c:	80 85       	ldd	r24, Z+8	; 0x08
   11d7e:	91 85       	ldd	r25, Z+9	; 0x09
   11d80:	89 83       	std	Y+1, r24	; 0x01
   11d82:	9a 83       	std	Y+2, r25	; 0x02
   11d84:	80 91 41 27 	lds	r24, 0x2741
   11d88:	90 91 42 27 	lds	r25, 0x2742
   11d8c:	a0 91 43 27 	lds	r26, 0x2743
   11d90:	b0 91 44 27 	lds	r27, 0x2744
   11d94:	16 c0       	rjmp	.+44     	; 0x11dc2 <arb_roundRobinScheduler+0xde>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   11d96:	e9 81       	ldd	r30, Y+1	; 0x01
   11d98:	fa 81       	ldd	r31, Y+2	; 0x02
   11d9a:	01 90       	ld	r0, Z+
   11d9c:	f0 81       	ld	r31, Z
   11d9e:	e0 2d       	mov	r30, r0
      if( ((pt_temp->t_status == READY) ||
   11da0:	21 81       	ldd	r18, Z+1	; 0x01
   11da2:	22 30       	cpi	r18, 0x02	; 2
   11da4:	30 f4       	brcc	.+12     	; 0x11db2 <arb_roundRobinScheduler+0xce>
           (pt_temp->t_status == RUNNING)) &&
   11da6:	22 81       	ldd	r18, Z+2	; 0x02
   11da8:	2f 3f       	cpi	r18, 0xFF	; 255
   11daa:	19 f0       	breq	.+6      	; 0x11db2 <arb_roundRobinScheduler+0xce>
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   11dac:	01 96       	adiw	r24, 0x01	; 1
   11dae:	a1 1d       	adc	r26, r1
   11db0:	b1 1d       	adc	r27, r1

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   11db2:	41 50       	subi	r20, 0x01	; 1
   11db4:	50 40       	sbci	r21, 0x00	; 0
   11db6:	e9 81       	ldd	r30, Y+1	; 0x01
   11db8:	fa 81       	ldd	r31, Y+2	; 0x02
   11dba:	20 85       	ldd	r18, Z+8	; 0x08
   11dbc:	31 85       	ldd	r19, Z+9	; 0x09
   11dbe:	29 83       	std	Y+1, r18	; 0x01
   11dc0:	3a 83       	std	Y+2, r19	; 0x02
   11dc2:	41 15       	cp	r20, r1
   11dc4:	51 05       	cpc	r21, r1
   11dc6:	39 f7       	brne	.-50     	; 0x11d96 <arb_roundRobinScheduler+0xb2>
   11dc8:	80 93 41 27 	sts	0x2741, r24
   11dcc:	90 93 42 27 	sts	0x2742, r25
   11dd0:	a0 93 43 27 	sts	0x2743, r26
   11dd4:	b0 93 44 27 	sts	0x2744, r27
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   }

   gt_schedObject.s_loadUpdateCount++;
   11dd8:	20 91 37 27 	lds	r18, 0x2737
   11ddc:	30 91 38 27 	lds	r19, 0x2738
   11de0:	2f 5f       	subi	r18, 0xFF	; 255
   11de2:	3f 4f       	sbci	r19, 0xFF	; 255
   11de4:	20 93 37 27 	sts	0x2737, r18
   11de8:	30 93 38 27 	sts	0x2738, r19
   if( gt_schedObject.s_loadUpdateCount == ARB_LOAD_UPDATE_RATE)
   11dec:	41 e0       	ldi	r20, 0x01	; 1
   11dee:	24 3f       	cpi	r18, 0xF4	; 244
   11df0:	34 07       	cpc	r19, r20
   11df2:	09 f0       	breq	.+2      	; 0x11df6 <arb_roundRobinScheduler+0x112>
   11df4:	33 c1       	rjmp	.+614    	; 0x1205c <arb_roundRobinScheduler+0x378>
   {

      i_load = (gt_schedObject.i_activeCount*(uint32_t)ARB_LOAD_EST_ONE) /
   11df6:	bc 01       	movw	r22, r24
   11df8:	cd 01       	movw	r24, r26
   11dfa:	2f e0       	ldi	r18, 0x0F	; 15
   11dfc:	66 0f       	add	r22, r22
   11dfe:	77 1f       	adc	r23, r23
   11e00:	88 1f       	adc	r24, r24
   11e02:	99 1f       	adc	r25, r25
   11e04:	2a 95       	dec	r18
   11e06:	d1 f7       	brne	.-12     	; 0x11dfc <arb_roundRobinScheduler+0x118>
   11e08:	24 ef       	ldi	r18, 0xF4	; 244
   11e0a:	31 e0       	ldi	r19, 0x01	; 1
   11e0c:	40 e0       	ldi	r20, 0x00	; 0
   11e0e:	50 e0       	ldi	r21, 0x00	; 0
   11e10:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
   11e14:	2d 83       	std	Y+5, r18	; 0x05
   11e16:	3e 83       	std	Y+6, r19	; 0x06
   11e18:	4f 83       	std	Y+7, r20	; 0x07
   11e1a:	58 87       	std	Y+8, r21	; 0x08
      ARB_LOAD_UPDATE_RATE;

      gt_schedObject.i_activeCount = 0;
   11e1c:	10 92 41 27 	sts	0x2741, r1
   11e20:	10 92 42 27 	sts	0x2742, r1
   11e24:	10 92 43 27 	sts	0x2743, r1
   11e28:	10 92 44 27 	sts	0x2744, r1
      gt_schedObject.s_loadUpdateCount = 0;
   11e2c:	10 92 37 27 	sts	0x2737, r1
   11e30:	10 92 38 27 	sts	0x2738, r1

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
   11e34:	60 91 39 27 	lds	r22, 0x2739
   11e38:	70 91 3a 27 	lds	r23, 0x273A
   11e3c:	80 91 3b 27 	lds	r24, 0x273B
   11e40:	90 91 3c 27 	lds	r25, 0x273C
   11e44:	25 e5       	ldi	r18, 0x55	; 85
   11e46:	35 e7       	ldi	r19, 0x75	; 117
   11e48:	40 e0       	ldi	r20, 0x00	; 0
   11e4a:	50 e0       	ldi	r21, 0x00	; 0
   11e4c:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   11e50:	dc 01       	movw	r26, r24
   11e52:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   11e54:	9c 01       	movw	r18, r24
   11e56:	ad 01       	movw	r20, r26
   11e58:	60 e0       	ldi	r22, 0x00	; 0
   11e5a:	70 e0       	ldi	r23, 0x00	; 0
   11e5c:	cb 01       	movw	r24, r22
   11e5e:	32 2e       	mov	r3, r18
   11e60:	e0 e4       	ldi	r30, 0x40	; 64
   11e62:	ee 2e       	mov	r14, r30
   11e64:	e3 0e       	add	r14, r19
   11e66:	f1 e0       	ldi	r31, 0x01	; 1
   11e68:	e3 16       	cp	r14, r19
   11e6a:	08 f0       	brcs	.+2      	; 0x11e6e <arb_roundRobinScheduler+0x18a>
   11e6c:	f0 e0       	ldi	r31, 0x00	; 0
   11e6e:	ff 2e       	mov	r15, r31
   11e70:	f4 0e       	add	r15, r20
   11e72:	01 e0       	ldi	r16, 0x01	; 1
   11e74:	f4 16       	cp	r15, r20
   11e76:	08 f0       	brcs	.+2      	; 0x11e7a <arb_roundRobinScheduler+0x196>
   11e78:	00 e0       	ldi	r16, 0x00	; 0
   11e7a:	05 0f       	add	r16, r21
   11e7c:	e1 e0       	ldi	r30, 0x01	; 1
   11e7e:	05 17       	cp	r16, r21
   11e80:	08 f0       	brcs	.+2      	; 0x11e84 <arb_roundRobinScheduler+0x1a0>
   11e82:	e0 e0       	ldi	r30, 0x00	; 0
   11e84:	2e 2e       	mov	r2, r30
   11e86:	11 e0       	ldi	r17, 0x01	; 1
   11e88:	16 16       	cp	r1, r22
   11e8a:	08 f0       	brcs	.+2      	; 0x11e8e <arb_roundRobinScheduler+0x1aa>
   11e8c:	10 e0       	ldi	r17, 0x00	; 0
   11e8e:	55 24       	eor	r5, r5
   11e90:	53 94       	inc	r5
   11e92:	17 16       	cp	r1, r23
   11e94:	08 f0       	brcs	.+2      	; 0x11e98 <arb_roundRobinScheduler+0x1b4>
   11e96:	55 24       	eor	r5, r5
   11e98:	44 24       	eor	r4, r4
   11e9a:	43 94       	inc	r4
   11e9c:	18 16       	cp	r1, r24
   11e9e:	08 f0       	brcs	.+2      	; 0x11ea2 <arb_roundRobinScheduler+0x1be>
   11ea0:	44 24       	eor	r4, r4
      gt_schedObject.i_activeCount = 0;
      gt_schedObject.s_loadUpdateCount = 0;

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
   11ea2:	6d 81       	ldd	r22, Y+5	; 0x05
   11ea4:	7e 81       	ldd	r23, Y+6	; 0x06
   11ea6:	8f 81       	ldd	r24, Y+7	; 0x07
   11ea8:	98 85       	ldd	r25, Y+8	; 0x08
   11eaa:	2b ea       	ldi	r18, 0xAB	; 171
   11eac:	3a e0       	ldi	r19, 0x0A	; 10
   11eae:	40 e0       	ldi	r20, 0x00	; 0
   11eb0:	50 e0       	ldi	r21, 0x00	; 0
   11eb2:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   11eb6:	dc 01       	movw	r26, r24
   11eb8:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
   11eba:	3c 01       	movw	r6, r24
   11ebc:	4d 01       	movw	r8, r26
   11ebe:	23 2d       	mov	r18, r3
   11ec0:	28 0f       	add	r18, r24
   11ec2:	31 e0       	ldi	r19, 0x01	; 1
   11ec4:	23 15       	cp	r18, r3
   11ec6:	08 f0       	brcs	.+2      	; 0x11eca <arb_roundRobinScheduler+0x1e6>
   11ec8:	30 e0       	ldi	r19, 0x00	; 0
   11eca:	8e 2d       	mov	r24, r14
   11ecc:	87 0d       	add	r24, r7
   11ece:	41 e0       	ldi	r20, 0x01	; 1
   11ed0:	8e 15       	cp	r24, r14
   11ed2:	08 f0       	brcs	.+2      	; 0x11ed6 <arb_roundRobinScheduler+0x1f2>
   11ed4:	40 e0       	ldi	r20, 0x00	; 0
   11ed6:	38 0f       	add	r19, r24
   11ed8:	91 e0       	ldi	r25, 0x01	; 1
   11eda:	38 17       	cp	r19, r24
   11edc:	08 f0       	brcs	.+2      	; 0x11ee0 <arb_roundRobinScheduler+0x1fc>
   11ede:	90 e0       	ldi	r25, 0x00	; 0
   11ee0:	49 2b       	or	r20, r25
   11ee2:	8f 2d       	mov	r24, r15
   11ee4:	88 0d       	add	r24, r8
   11ee6:	51 e0       	ldi	r21, 0x01	; 1
   11ee8:	8f 15       	cp	r24, r15
   11eea:	08 f0       	brcs	.+2      	; 0x11eee <arb_roundRobinScheduler+0x20a>
   11eec:	50 e0       	ldi	r21, 0x00	; 0
   11eee:	48 0f       	add	r20, r24
   11ef0:	91 e0       	ldi	r25, 0x01	; 1
   11ef2:	48 17       	cp	r20, r24
   11ef4:	08 f0       	brcs	.+2      	; 0x11ef8 <arb_roundRobinScheduler+0x214>
   11ef6:	90 e0       	ldi	r25, 0x00	; 0
   11ef8:	59 2b       	or	r21, r25
   11efa:	80 2f       	mov	r24, r16
   11efc:	89 0d       	add	r24, r9
   11efe:	61 e0       	ldi	r22, 0x01	; 1
   11f00:	80 17       	cp	r24, r16
   11f02:	08 f0       	brcs	.+2      	; 0x11f06 <arb_roundRobinScheduler+0x222>
   11f04:	60 e0       	ldi	r22, 0x00	; 0
   11f06:	58 0f       	add	r21, r24
   11f08:	91 e0       	ldi	r25, 0x01	; 1
   11f0a:	58 17       	cp	r21, r24
   11f0c:	08 f0       	brcs	.+2      	; 0x11f10 <arb_roundRobinScheduler+0x22c>
   11f0e:	90 e0       	ldi	r25, 0x00	; 0
   11f10:	69 2b       	or	r22, r25
   11f12:	62 0d       	add	r22, r2
   11f14:	71 e0       	ldi	r23, 0x01	; 1
   11f16:	62 15       	cp	r22, r2
   11f18:	08 f0       	brcs	.+2      	; 0x11f1c <arb_roundRobinScheduler+0x238>
   11f1a:	70 e0       	ldi	r23, 0x00	; 0
   11f1c:	71 0f       	add	r23, r17
   11f1e:	81 e0       	ldi	r24, 0x01	; 1
   11f20:	71 17       	cp	r23, r17
   11f22:	08 f0       	brcs	.+2      	; 0x11f26 <arb_roundRobinScheduler+0x242>
   11f24:	80 e0       	ldi	r24, 0x00	; 0
   11f26:	85 0d       	add	r24, r5
   11f28:	91 e0       	ldi	r25, 0x01	; 1
   11f2a:	85 15       	cp	r24, r5
   11f2c:	08 f0       	brcs	.+2      	; 0x11f30 <arb_roundRobinScheduler+0x24c>
   11f2e:	90 e0       	ldi	r25, 0x00	; 0
   11f30:	94 0d       	add	r25, r4
   11f32:	0f e0       	ldi	r16, 0x0F	; 15
   11f34:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__lshrdi3>
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   11f38:	20 93 39 27 	sts	0x2739, r18
   11f3c:	30 93 3a 27 	sts	0x273A, r19
   11f40:	40 93 3b 27 	sts	0x273B, r20
   11f44:	50 93 3c 27 	sts	0x273C, r21
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
      ARB_LOAD_EST_Q_FACT);

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
   11f48:	60 91 3d 27 	lds	r22, 0x273D
   11f4c:	70 91 3e 27 	lds	r23, 0x273E
   11f50:	80 91 3f 27 	lds	r24, 0x273F
   11f54:	90 91 40 27 	lds	r25, 0x2740
   11f58:	2d ed       	ldi	r18, 0xDD	; 221
   11f5a:	3d e7       	ldi	r19, 0x7D	; 125
   11f5c:	40 e0       	ldi	r20, 0x00	; 0
   11f5e:	50 e0       	ldi	r21, 0x00	; 0
   11f60:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   11f64:	dc 01       	movw	r26, r24
   11f66:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   11f68:	9c 01       	movw	r18, r24
   11f6a:	ad 01       	movw	r20, r26
   11f6c:	60 e0       	ldi	r22, 0x00	; 0
   11f6e:	70 e0       	ldi	r23, 0x00	; 0
   11f70:	cb 01       	movw	r24, r22
   11f72:	32 2e       	mov	r3, r18
   11f74:	90 e4       	ldi	r25, 0x40	; 64
   11f76:	e9 2e       	mov	r14, r25
   11f78:	e3 0e       	add	r14, r19
   11f7a:	f1 e0       	ldi	r31, 0x01	; 1
   11f7c:	e3 16       	cp	r14, r19
   11f7e:	08 f0       	brcs	.+2      	; 0x11f82 <arb_roundRobinScheduler+0x29e>
   11f80:	f0 e0       	ldi	r31, 0x00	; 0
   11f82:	ff 2e       	mov	r15, r31
   11f84:	f4 0e       	add	r15, r20
   11f86:	01 e0       	ldi	r16, 0x01	; 1
   11f88:	f4 16       	cp	r15, r20
   11f8a:	08 f0       	brcs	.+2      	; 0x11f8e <arb_roundRobinScheduler+0x2aa>
   11f8c:	00 e0       	ldi	r16, 0x00	; 0
   11f8e:	05 0f       	add	r16, r21
   11f90:	e1 e0       	ldi	r30, 0x01	; 1
   11f92:	05 17       	cp	r16, r21
   11f94:	08 f0       	brcs	.+2      	; 0x11f98 <arb_roundRobinScheduler+0x2b4>
   11f96:	e0 e0       	ldi	r30, 0x00	; 0
   11f98:	2e 2e       	mov	r2, r30
   11f9a:	11 e0       	ldi	r17, 0x01	; 1
   11f9c:	16 16       	cp	r1, r22
   11f9e:	08 f0       	brcs	.+2      	; 0x11fa2 <arb_roundRobinScheduler+0x2be>
   11fa0:	10 e0       	ldi	r17, 0x00	; 0
   11fa2:	55 24       	eor	r5, r5
   11fa4:	53 94       	inc	r5
   11fa6:	17 16       	cp	r1, r23
   11fa8:	08 f0       	brcs	.+2      	; 0x11fac <arb_roundRobinScheduler+0x2c8>
   11faa:	55 24       	eor	r5, r5
   11fac:	44 24       	eor	r4, r4
   11fae:	43 94       	inc	r4
   11fb0:	18 16       	cp	r1, r24
   11fb2:	08 f0       	brcs	.+2      	; 0x11fb6 <arb_roundRobinScheduler+0x2d2>
   11fb4:	44 24       	eor	r4, r4
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
      ARB_LOAD_EST_Q_FACT);

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
   11fb6:	6d 81       	ldd	r22, Y+5	; 0x05
   11fb8:	7e 81       	ldd	r23, Y+6	; 0x06
   11fba:	8f 81       	ldd	r24, Y+7	; 0x07
   11fbc:	98 85       	ldd	r25, Y+8	; 0x08
   11fbe:	23 e2       	ldi	r18, 0x23	; 35
   11fc0:	32 e0       	ldi	r19, 0x02	; 2
   11fc2:	40 e0       	ldi	r20, 0x00	; 0
   11fc4:	50 e0       	ldi	r21, 0x00	; 0
   11fc6:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   11fca:	dc 01       	movw	r26, r24
   11fcc:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
   11fce:	3c 01       	movw	r6, r24
   11fd0:	4d 01       	movw	r8, r26
   11fd2:	23 2d       	mov	r18, r3
   11fd4:	28 0f       	add	r18, r24
   11fd6:	31 e0       	ldi	r19, 0x01	; 1
   11fd8:	23 15       	cp	r18, r3
   11fda:	08 f0       	brcs	.+2      	; 0x11fde <arb_roundRobinScheduler+0x2fa>
   11fdc:	30 e0       	ldi	r19, 0x00	; 0
   11fde:	8e 2d       	mov	r24, r14
   11fe0:	87 0d       	add	r24, r7
   11fe2:	41 e0       	ldi	r20, 0x01	; 1
   11fe4:	8e 15       	cp	r24, r14
   11fe6:	08 f0       	brcs	.+2      	; 0x11fea <arb_roundRobinScheduler+0x306>
   11fe8:	40 e0       	ldi	r20, 0x00	; 0
   11fea:	38 0f       	add	r19, r24
   11fec:	91 e0       	ldi	r25, 0x01	; 1
   11fee:	38 17       	cp	r19, r24
   11ff0:	08 f0       	brcs	.+2      	; 0x11ff4 <arb_roundRobinScheduler+0x310>
   11ff2:	90 e0       	ldi	r25, 0x00	; 0
   11ff4:	49 2b       	or	r20, r25
   11ff6:	8f 2d       	mov	r24, r15
   11ff8:	88 0d       	add	r24, r8
   11ffa:	51 e0       	ldi	r21, 0x01	; 1
   11ffc:	8f 15       	cp	r24, r15
   11ffe:	08 f0       	brcs	.+2      	; 0x12002 <arb_roundRobinScheduler+0x31e>
   12000:	50 e0       	ldi	r21, 0x00	; 0
   12002:	48 0f       	add	r20, r24
   12004:	91 e0       	ldi	r25, 0x01	; 1
   12006:	48 17       	cp	r20, r24
   12008:	08 f0       	brcs	.+2      	; 0x1200c <arb_roundRobinScheduler+0x328>
   1200a:	90 e0       	ldi	r25, 0x00	; 0
   1200c:	59 2b       	or	r21, r25
   1200e:	80 2f       	mov	r24, r16
   12010:	89 0d       	add	r24, r9
   12012:	61 e0       	ldi	r22, 0x01	; 1
   12014:	80 17       	cp	r24, r16
   12016:	08 f0       	brcs	.+2      	; 0x1201a <arb_roundRobinScheduler+0x336>
   12018:	60 e0       	ldi	r22, 0x00	; 0
   1201a:	58 0f       	add	r21, r24
   1201c:	91 e0       	ldi	r25, 0x01	; 1
   1201e:	58 17       	cp	r21, r24
   12020:	08 f0       	brcs	.+2      	; 0x12024 <arb_roundRobinScheduler+0x340>
   12022:	90 e0       	ldi	r25, 0x00	; 0
   12024:	69 2b       	or	r22, r25
   12026:	62 0d       	add	r22, r2
   12028:	71 e0       	ldi	r23, 0x01	; 1
   1202a:	62 15       	cp	r22, r2
   1202c:	08 f0       	brcs	.+2      	; 0x12030 <arb_roundRobinScheduler+0x34c>
   1202e:	70 e0       	ldi	r23, 0x00	; 0
   12030:	71 0f       	add	r23, r17
   12032:	81 e0       	ldi	r24, 0x01	; 1
   12034:	71 17       	cp	r23, r17
   12036:	08 f0       	brcs	.+2      	; 0x1203a <arb_roundRobinScheduler+0x356>
   12038:	80 e0       	ldi	r24, 0x00	; 0
   1203a:	85 0d       	add	r24, r5
   1203c:	91 e0       	ldi	r25, 0x01	; 1
   1203e:	85 15       	cp	r24, r5
   12040:	08 f0       	brcs	.+2      	; 0x12044 <arb_roundRobinScheduler+0x360>
   12042:	90 e0       	ldi	r25, 0x00	; 0
   12044:	94 0d       	add	r25, r4
   12046:	0f e0       	ldi	r16, 0x0F	; 15
   12048:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__lshrdi3>
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   1204c:	20 93 3d 27 	sts	0x273D, r18
   12050:	30 93 3e 27 	sts	0x273E, r19
   12054:	40 93 3f 27 	sts	0x273F, r20
   12058:	50 93 40 27 	sts	0x2740, r21
       *---------------------------------------------------------------------*/
      arb_updateLoadingEst();

   }/*End if( gt_schedObject.b_enableScheduler == true)*/

}/*End arb_roundRobinScheduler*/
   1205c:	28 96       	adiw	r28, 0x08	; 8
   1205e:	cd bf       	out	0x3d, r28	; 61
   12060:	de bf       	out	0x3e, r29	; 62
   12062:	df 91       	pop	r29
   12064:	cf 91       	pop	r28
   12066:	1f 91       	pop	r17
   12068:	0f 91       	pop	r16
   1206a:	ff 90       	pop	r15
   1206c:	ef 90       	pop	r14
   1206e:	df 90       	pop	r13
   12070:	cf 90       	pop	r12
   12072:	bf 90       	pop	r11
   12074:	af 90       	pop	r10
   12076:	9f 90       	pop	r9
   12078:	8f 90       	pop	r8
   1207a:	7f 90       	pop	r7
   1207c:	6f 90       	pop	r6
   1207e:	5f 90       	pop	r5
   12080:	4f 90       	pop	r4
   12082:	3f 90       	pop	r3
   12084:	2f 90       	pop	r2
   12086:	08 95       	ret

00012088 <arb_priorityScheduler>:

/*---------------------------------------------------------------------------*
 * Priority based scheduler
 *---------------------------------------------------------------------------*/
static void arb_priorityScheduler( void)
{
   12088:	2f 92       	push	r2
   1208a:	3f 92       	push	r3
   1208c:	4f 92       	push	r4
   1208e:	5f 92       	push	r5
   12090:	6f 92       	push	r6
   12092:	7f 92       	push	r7
   12094:	8f 92       	push	r8
   12096:	9f 92       	push	r9
   12098:	af 92       	push	r10
   1209a:	bf 92       	push	r11
   1209c:	cf 92       	push	r12
   1209e:	df 92       	push	r13
   120a0:	ef 92       	push	r14
   120a2:	ff 92       	push	r15
   120a4:	0f 93       	push	r16
   120a6:	1f 93       	push	r17
   120a8:	cf 93       	push	r28
   120aa:	df 93       	push	r29
   120ac:	cd b7       	in	r28, 0x3d	; 61
   120ae:	de b7       	in	r29, 0x3e	; 62
   120b0:	2a 97       	sbiw	r28, 0x0a	; 10
   120b2:	cd bf       	out	0x3d, r28	; 61
   120b4:	de bf       	out	0x3e, r29	; 62
   t_LINKHNDL t_highest;
   uint16_t s_highest;
   uint16_t s_count;
   t_tcb *pt_temp;

   if( gt_schedObject.b_enableScheduler == true)
   120b6:	80 91 36 27 	lds	r24, 0x2736
   120ba:	88 23       	and	r24, r24
   120bc:	09 f4       	brne	.+2      	; 0x120c0 <arb_priorityScheduler+0x38>
   120be:	c4 c1       	rjmp	.+904    	; 0x12448 <arb_priorityScheduler+0x3c0>
   {

      /*---------------------------------------------------------------------*
       * Find the thread with the highest priority that isn't sleeping.
       *---------------------------------------------------------------------*/
      t_highest = UTL_GET_HEAD_OF_CONT( gt_activeThreads);
   120c0:	e0 91 fe 22 	lds	r30, 0x22FE
   120c4:	f0 91 ff 22 	lds	r31, 0x22FF
   120c8:	80 85       	ldd	r24, Z+8	; 0x08
   120ca:	91 85       	ldd	r25, Z+9	; 0x09
   120cc:	8b 83       	std	Y+3, r24	; 0x03
   120ce:	9c 83       	std	Y+4, r25	; 0x04
      pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   120d0:	eb 81       	ldd	r30, Y+3	; 0x03
   120d2:	fc 81       	ldd	r31, Y+4	; 0x04
      s_highest = pt_temp->t_priority;
   120d4:	01 90       	ld	r0, Z+
   120d6:	f0 81       	ld	r31, Z
   120d8:	e0 2d       	mov	r30, r0
   120da:	42 81       	ldd	r20, Z+2	; 0x02
   120dc:	50 e0       	ldi	r21, 0x00	; 0

      UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   120de:	e0 91 fe 22 	lds	r30, 0x22FE
   120e2:	f0 91 ff 22 	lds	r31, 0x22FF
   120e6:	22 81       	ldd	r18, Z+2	; 0x02
   120e8:	33 81       	ldd	r19, Z+3	; 0x03
   120ea:	e0 91 fe 22 	lds	r30, 0x22FE
   120ee:	f0 91 ff 22 	lds	r31, 0x22FF
   120f2:	16 c0       	rjmp	.+44     	; 0x12120 <arb_priorityScheduler+0x98>
      {
         pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   120f4:	ed 81       	ldd	r30, Y+5	; 0x05
   120f6:	fe 81       	ldd	r31, Y+6	; 0x06
   120f8:	01 90       	ld	r0, Z+
   120fa:	f0 81       	ld	r31, Z
   120fc:	e0 2d       	mov	r30, r0
         if( (pt_temp->t_priority < s_highest) && (pt_temp->t_status !=
   120fe:	82 81       	ldd	r24, Z+2	; 0x02
   12100:	90 e0       	ldi	r25, 0x00	; 0
   12102:	84 17       	cp	r24, r20
   12104:	95 07       	cpc	r25, r21
   12106:	40 f4       	brcc	.+16     	; 0x12118 <arb_priorityScheduler+0x90>
   12108:	61 81       	ldd	r22, Z+1	; 0x01
   1210a:	63 30       	cpi	r22, 0x03	; 3
   1210c:	29 f0       	breq	.+10     	; 0x12118 <arb_priorityScheduler+0x90>
         SLEEPING))
         {
            s_highest = pt_temp->t_priority;
            t_highest = t_curr;
   1210e:	4d 81       	ldd	r20, Y+5	; 0x05
   12110:	5e 81       	ldd	r21, Y+6	; 0x06
   12112:	4b 83       	std	Y+3, r20	; 0x03
   12114:	5c 83       	std	Y+4, r21	; 0x04
   12116:	ac 01       	movw	r20, r24
       *---------------------------------------------------------------------*/
      t_highest = UTL_GET_HEAD_OF_CONT( gt_activeThreads);
      pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
      s_highest = pt_temp->t_priority;

      UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   12118:	21 50       	subi	r18, 0x01	; 1
   1211a:	30 40       	sbci	r19, 0x00	; 0
   1211c:	ed 81       	ldd	r30, Y+5	; 0x05
   1211e:	fe 81       	ldd	r31, Y+6	; 0x06
   12120:	80 85       	ldd	r24, Z+8	; 0x08
   12122:	91 85       	ldd	r25, Z+9	; 0x09
   12124:	8d 83       	std	Y+5, r24	; 0x05
   12126:	9e 83       	std	Y+6, r25	; 0x06
   12128:	21 15       	cp	r18, r1
   1212a:	31 05       	cpc	r19, r1
   1212c:	19 f7       	brne	.-58     	; 0x120f4 <arb_priorityScheduler+0x6c>
      }

      /*---------------------------------------------------------------------*
       * Set the next thread to run to the one with the highest priority
       *---------------------------------------------------------------------*/
      UTL_SET_CURR_OF_CONT( gt_activeThreads, t_highest);
   1212e:	e0 91 fe 22 	lds	r30, 0x22FE
   12132:	f0 91 ff 22 	lds	r31, 0x22FF
   12136:	8b 81       	ldd	r24, Y+3	; 0x03
   12138:	9c 81       	ldd	r25, Y+4	; 0x04
   1213a:	86 83       	std	Z+6, r24	; 0x06
   1213c:	97 83       	std	Z+7, r25	; 0x07

      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   1213e:	eb 81       	ldd	r30, Y+3	; 0x03
   12140:	fc 81       	ldd	r31, Y+4	; 0x04
   12142:	01 90       	ld	r0, Z+
   12144:	f0 81       	ld	r31, Z
   12146:	e0 2d       	mov	r30, r0

      gpt_activeThread = pt_temp;
   12148:	e0 93 34 27 	sts	0x2734, r30
   1214c:	f0 93 35 27 	sts	0x2735, r31

      /*---------------------------------------------------------------------*
       * Change the status of this new thread to RUNNING
       *---------------------------------------------------------------------*/
      pt_temp->t_status = RUNNING;
   12150:	81 e0       	ldi	r24, 0x01	; 1
   12152:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   12154:	e0 91 fe 22 	lds	r30, 0x22FE
   12158:	f0 91 ff 22 	lds	r31, 0x22FF
   1215c:	42 81       	ldd	r20, Z+2	; 0x02
   1215e:	53 81       	ldd	r21, Z+3	; 0x03
   12160:	e0 91 fe 22 	lds	r30, 0x22FE
   12164:	f0 91 ff 22 	lds	r31, 0x22FF
   12168:	80 85       	ldd	r24, Z+8	; 0x08
   1216a:	91 85       	ldd	r25, Z+9	; 0x09
   1216c:	89 83       	std	Y+1, r24	; 0x01
   1216e:	9a 83       	std	Y+2, r25	; 0x02
   12170:	80 91 41 27 	lds	r24, 0x2741
   12174:	90 91 42 27 	lds	r25, 0x2742
   12178:	a0 91 43 27 	lds	r26, 0x2743
   1217c:	b0 91 44 27 	lds	r27, 0x2744
   12180:	16 c0       	rjmp	.+44     	; 0x121ae <arb_priorityScheduler+0x126>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12182:	e9 81       	ldd	r30, Y+1	; 0x01
   12184:	fa 81       	ldd	r31, Y+2	; 0x02
   12186:	01 90       	ld	r0, Z+
   12188:	f0 81       	ld	r31, Z
   1218a:	e0 2d       	mov	r30, r0
      if( ((pt_temp->t_status == READY) ||
   1218c:	21 81       	ldd	r18, Z+1	; 0x01
   1218e:	22 30       	cpi	r18, 0x02	; 2
   12190:	30 f4       	brcc	.+12     	; 0x1219e <arb_priorityScheduler+0x116>
           (pt_temp->t_status == RUNNING)) &&
   12192:	22 81       	ldd	r18, Z+2	; 0x02
   12194:	2f 3f       	cpi	r18, 0xFF	; 255
   12196:	19 f0       	breq	.+6      	; 0x1219e <arb_priorityScheduler+0x116>
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   12198:	01 96       	adiw	r24, 0x01	; 1
   1219a:	a1 1d       	adc	r26, r1
   1219c:	b1 1d       	adc	r27, r1

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   1219e:	41 50       	subi	r20, 0x01	; 1
   121a0:	50 40       	sbci	r21, 0x00	; 0
   121a2:	e9 81       	ldd	r30, Y+1	; 0x01
   121a4:	fa 81       	ldd	r31, Y+2	; 0x02
   121a6:	20 85       	ldd	r18, Z+8	; 0x08
   121a8:	31 85       	ldd	r19, Z+9	; 0x09
   121aa:	29 83       	std	Y+1, r18	; 0x01
   121ac:	3a 83       	std	Y+2, r19	; 0x02
   121ae:	41 15       	cp	r20, r1
   121b0:	51 05       	cpc	r21, r1
   121b2:	39 f7       	brne	.-50     	; 0x12182 <arb_priorityScheduler+0xfa>
   121b4:	80 93 41 27 	sts	0x2741, r24
   121b8:	90 93 42 27 	sts	0x2742, r25
   121bc:	a0 93 43 27 	sts	0x2743, r26
   121c0:	b0 93 44 27 	sts	0x2744, r27
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   }

   gt_schedObject.s_loadUpdateCount++;
   121c4:	20 91 37 27 	lds	r18, 0x2737
   121c8:	30 91 38 27 	lds	r19, 0x2738
   121cc:	2f 5f       	subi	r18, 0xFF	; 255
   121ce:	3f 4f       	sbci	r19, 0xFF	; 255
   121d0:	20 93 37 27 	sts	0x2737, r18
   121d4:	30 93 38 27 	sts	0x2738, r19
   if( gt_schedObject.s_loadUpdateCount == ARB_LOAD_UPDATE_RATE)
   121d8:	41 e0       	ldi	r20, 0x01	; 1
   121da:	24 3f       	cpi	r18, 0xF4	; 244
   121dc:	34 07       	cpc	r19, r20
   121de:	09 f0       	breq	.+2      	; 0x121e2 <arb_priorityScheduler+0x15a>
   121e0:	33 c1       	rjmp	.+614    	; 0x12448 <arb_priorityScheduler+0x3c0>
   {

      i_load = (gt_schedObject.i_activeCount*(uint32_t)ARB_LOAD_EST_ONE) /
   121e2:	bc 01       	movw	r22, r24
   121e4:	cd 01       	movw	r24, r26
   121e6:	1f e0       	ldi	r17, 0x0F	; 15
   121e8:	66 0f       	add	r22, r22
   121ea:	77 1f       	adc	r23, r23
   121ec:	88 1f       	adc	r24, r24
   121ee:	99 1f       	adc	r25, r25
   121f0:	1a 95       	dec	r17
   121f2:	d1 f7       	brne	.-12     	; 0x121e8 <arb_priorityScheduler+0x160>
   121f4:	24 ef       	ldi	r18, 0xF4	; 244
   121f6:	31 e0       	ldi	r19, 0x01	; 1
   121f8:	40 e0       	ldi	r20, 0x00	; 0
   121fa:	50 e0       	ldi	r21, 0x00	; 0
   121fc:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
   12200:	2f 83       	std	Y+7, r18	; 0x07
   12202:	38 87       	std	Y+8, r19	; 0x08
   12204:	49 87       	std	Y+9, r20	; 0x09
   12206:	5a 87       	std	Y+10, r21	; 0x0a
      ARB_LOAD_UPDATE_RATE;

      gt_schedObject.i_activeCount = 0;
   12208:	10 92 41 27 	sts	0x2741, r1
   1220c:	10 92 42 27 	sts	0x2742, r1
   12210:	10 92 43 27 	sts	0x2743, r1
   12214:	10 92 44 27 	sts	0x2744, r1
      gt_schedObject.s_loadUpdateCount = 0;
   12218:	10 92 37 27 	sts	0x2737, r1
   1221c:	10 92 38 27 	sts	0x2738, r1

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
   12220:	60 91 39 27 	lds	r22, 0x2739
   12224:	70 91 3a 27 	lds	r23, 0x273A
   12228:	80 91 3b 27 	lds	r24, 0x273B
   1222c:	90 91 3c 27 	lds	r25, 0x273C
   12230:	25 e5       	ldi	r18, 0x55	; 85
   12232:	35 e7       	ldi	r19, 0x75	; 117
   12234:	40 e0       	ldi	r20, 0x00	; 0
   12236:	50 e0       	ldi	r21, 0x00	; 0
   12238:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   1223c:	dc 01       	movw	r26, r24
   1223e:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   12240:	9c 01       	movw	r18, r24
   12242:	ad 01       	movw	r20, r26
   12244:	60 e0       	ldi	r22, 0x00	; 0
   12246:	70 e0       	ldi	r23, 0x00	; 0
   12248:	cb 01       	movw	r24, r22
   1224a:	32 2e       	mov	r3, r18
   1224c:	00 e4       	ldi	r16, 0x40	; 64
   1224e:	e0 2e       	mov	r14, r16
   12250:	e3 0e       	add	r14, r19
   12252:	f1 e0       	ldi	r31, 0x01	; 1
   12254:	e3 16       	cp	r14, r19
   12256:	08 f0       	brcs	.+2      	; 0x1225a <arb_priorityScheduler+0x1d2>
   12258:	f0 e0       	ldi	r31, 0x00	; 0
   1225a:	ff 2e       	mov	r15, r31
   1225c:	f4 0e       	add	r15, r20
   1225e:	01 e0       	ldi	r16, 0x01	; 1
   12260:	f4 16       	cp	r15, r20
   12262:	08 f0       	brcs	.+2      	; 0x12266 <arb_priorityScheduler+0x1de>
   12264:	00 e0       	ldi	r16, 0x00	; 0
   12266:	05 0f       	add	r16, r21
   12268:	e1 e0       	ldi	r30, 0x01	; 1
   1226a:	05 17       	cp	r16, r21
   1226c:	08 f0       	brcs	.+2      	; 0x12270 <arb_priorityScheduler+0x1e8>
   1226e:	e0 e0       	ldi	r30, 0x00	; 0
   12270:	2e 2e       	mov	r2, r30
   12272:	11 e0       	ldi	r17, 0x01	; 1
   12274:	16 16       	cp	r1, r22
   12276:	08 f0       	brcs	.+2      	; 0x1227a <arb_priorityScheduler+0x1f2>
   12278:	10 e0       	ldi	r17, 0x00	; 0
   1227a:	55 24       	eor	r5, r5
   1227c:	53 94       	inc	r5
   1227e:	17 16       	cp	r1, r23
   12280:	08 f0       	brcs	.+2      	; 0x12284 <arb_priorityScheduler+0x1fc>
   12282:	55 24       	eor	r5, r5
   12284:	44 24       	eor	r4, r4
   12286:	43 94       	inc	r4
   12288:	18 16       	cp	r1, r24
   1228a:	08 f0       	brcs	.+2      	; 0x1228e <arb_priorityScheduler+0x206>
   1228c:	44 24       	eor	r4, r4
      gt_schedObject.i_activeCount = 0;
      gt_schedObject.s_loadUpdateCount = 0;

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
   1228e:	6f 81       	ldd	r22, Y+7	; 0x07
   12290:	78 85       	ldd	r23, Y+8	; 0x08
   12292:	89 85       	ldd	r24, Y+9	; 0x09
   12294:	9a 85       	ldd	r25, Y+10	; 0x0a
   12296:	2b ea       	ldi	r18, 0xAB	; 171
   12298:	3a e0       	ldi	r19, 0x0A	; 10
   1229a:	40 e0       	ldi	r20, 0x00	; 0
   1229c:	50 e0       	ldi	r21, 0x00	; 0
   1229e:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   122a2:	dc 01       	movw	r26, r24
   122a4:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
   122a6:	3c 01       	movw	r6, r24
   122a8:	4d 01       	movw	r8, r26
   122aa:	23 2d       	mov	r18, r3
   122ac:	28 0f       	add	r18, r24
   122ae:	31 e0       	ldi	r19, 0x01	; 1
   122b0:	23 15       	cp	r18, r3
   122b2:	08 f0       	brcs	.+2      	; 0x122b6 <arb_priorityScheduler+0x22e>
   122b4:	30 e0       	ldi	r19, 0x00	; 0
   122b6:	8e 2d       	mov	r24, r14
   122b8:	87 0d       	add	r24, r7
   122ba:	41 e0       	ldi	r20, 0x01	; 1
   122bc:	8e 15       	cp	r24, r14
   122be:	08 f0       	brcs	.+2      	; 0x122c2 <arb_priorityScheduler+0x23a>
   122c0:	40 e0       	ldi	r20, 0x00	; 0
   122c2:	38 0f       	add	r19, r24
   122c4:	91 e0       	ldi	r25, 0x01	; 1
   122c6:	38 17       	cp	r19, r24
   122c8:	08 f0       	brcs	.+2      	; 0x122cc <arb_priorityScheduler+0x244>
   122ca:	90 e0       	ldi	r25, 0x00	; 0
   122cc:	49 2b       	or	r20, r25
   122ce:	8f 2d       	mov	r24, r15
   122d0:	88 0d       	add	r24, r8
   122d2:	51 e0       	ldi	r21, 0x01	; 1
   122d4:	8f 15       	cp	r24, r15
   122d6:	08 f0       	brcs	.+2      	; 0x122da <arb_priorityScheduler+0x252>
   122d8:	50 e0       	ldi	r21, 0x00	; 0
   122da:	48 0f       	add	r20, r24
   122dc:	91 e0       	ldi	r25, 0x01	; 1
   122de:	48 17       	cp	r20, r24
   122e0:	08 f0       	brcs	.+2      	; 0x122e4 <arb_priorityScheduler+0x25c>
   122e2:	90 e0       	ldi	r25, 0x00	; 0
   122e4:	59 2b       	or	r21, r25
   122e6:	80 2f       	mov	r24, r16
   122e8:	89 0d       	add	r24, r9
   122ea:	61 e0       	ldi	r22, 0x01	; 1
   122ec:	80 17       	cp	r24, r16
   122ee:	08 f0       	brcs	.+2      	; 0x122f2 <arb_priorityScheduler+0x26a>
   122f0:	60 e0       	ldi	r22, 0x00	; 0
   122f2:	58 0f       	add	r21, r24
   122f4:	91 e0       	ldi	r25, 0x01	; 1
   122f6:	58 17       	cp	r21, r24
   122f8:	08 f0       	brcs	.+2      	; 0x122fc <arb_priorityScheduler+0x274>
   122fa:	90 e0       	ldi	r25, 0x00	; 0
   122fc:	69 2b       	or	r22, r25
   122fe:	62 0d       	add	r22, r2
   12300:	71 e0       	ldi	r23, 0x01	; 1
   12302:	62 15       	cp	r22, r2
   12304:	08 f0       	brcs	.+2      	; 0x12308 <arb_priorityScheduler+0x280>
   12306:	70 e0       	ldi	r23, 0x00	; 0
   12308:	71 0f       	add	r23, r17
   1230a:	81 e0       	ldi	r24, 0x01	; 1
   1230c:	71 17       	cp	r23, r17
   1230e:	08 f0       	brcs	.+2      	; 0x12312 <arb_priorityScheduler+0x28a>
   12310:	80 e0       	ldi	r24, 0x00	; 0
   12312:	85 0d       	add	r24, r5
   12314:	91 e0       	ldi	r25, 0x01	; 1
   12316:	85 15       	cp	r24, r5
   12318:	08 f0       	brcs	.+2      	; 0x1231c <arb_priorityScheduler+0x294>
   1231a:	90 e0       	ldi	r25, 0x00	; 0
   1231c:	94 0d       	add	r25, r4
   1231e:	0f e0       	ldi	r16, 0x0F	; 15
   12320:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__lshrdi3>
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   12324:	20 93 39 27 	sts	0x2739, r18
   12328:	30 93 3a 27 	sts	0x273A, r19
   1232c:	40 93 3b 27 	sts	0x273B, r20
   12330:	50 93 3c 27 	sts	0x273C, r21
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
      ARB_LOAD_EST_Q_FACT);

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
   12334:	60 91 3d 27 	lds	r22, 0x273D
   12338:	70 91 3e 27 	lds	r23, 0x273E
   1233c:	80 91 3f 27 	lds	r24, 0x273F
   12340:	90 91 40 27 	lds	r25, 0x2740
   12344:	2d ed       	ldi	r18, 0xDD	; 221
   12346:	3d e7       	ldi	r19, 0x7D	; 125
   12348:	40 e0       	ldi	r20, 0x00	; 0
   1234a:	50 e0       	ldi	r21, 0x00	; 0
   1234c:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   12350:	dc 01       	movw	r26, r24
   12352:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   12354:	9c 01       	movw	r18, r24
   12356:	ad 01       	movw	r20, r26
   12358:	60 e0       	ldi	r22, 0x00	; 0
   1235a:	70 e0       	ldi	r23, 0x00	; 0
   1235c:	cb 01       	movw	r24, r22
   1235e:	32 2e       	mov	r3, r18
   12360:	f0 e4       	ldi	r31, 0x40	; 64
   12362:	ef 2e       	mov	r14, r31
   12364:	e3 0e       	add	r14, r19
   12366:	f1 e0       	ldi	r31, 0x01	; 1
   12368:	e3 16       	cp	r14, r19
   1236a:	08 f0       	brcs	.+2      	; 0x1236e <arb_priorityScheduler+0x2e6>
   1236c:	f0 e0       	ldi	r31, 0x00	; 0
   1236e:	ff 2e       	mov	r15, r31
   12370:	f4 0e       	add	r15, r20
   12372:	01 e0       	ldi	r16, 0x01	; 1
   12374:	f4 16       	cp	r15, r20
   12376:	08 f0       	brcs	.+2      	; 0x1237a <arb_priorityScheduler+0x2f2>
   12378:	00 e0       	ldi	r16, 0x00	; 0
   1237a:	05 0f       	add	r16, r21
   1237c:	e1 e0       	ldi	r30, 0x01	; 1
   1237e:	05 17       	cp	r16, r21
   12380:	08 f0       	brcs	.+2      	; 0x12384 <arb_priorityScheduler+0x2fc>
   12382:	e0 e0       	ldi	r30, 0x00	; 0
   12384:	2e 2e       	mov	r2, r30
   12386:	11 e0       	ldi	r17, 0x01	; 1
   12388:	16 16       	cp	r1, r22
   1238a:	08 f0       	brcs	.+2      	; 0x1238e <arb_priorityScheduler+0x306>
   1238c:	10 e0       	ldi	r17, 0x00	; 0
   1238e:	55 24       	eor	r5, r5
   12390:	53 94       	inc	r5
   12392:	17 16       	cp	r1, r23
   12394:	08 f0       	brcs	.+2      	; 0x12398 <arb_priorityScheduler+0x310>
   12396:	55 24       	eor	r5, r5
   12398:	44 24       	eor	r4, r4
   1239a:	43 94       	inc	r4
   1239c:	18 16       	cp	r1, r24
   1239e:	08 f0       	brcs	.+2      	; 0x123a2 <arb_priorityScheduler+0x31a>
   123a0:	44 24       	eor	r4, r4
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
      ARB_LOAD_EST_Q_FACT);

      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
   123a2:	6f 81       	ldd	r22, Y+7	; 0x07
   123a4:	78 85       	ldd	r23, Y+8	; 0x08
   123a6:	89 85       	ldd	r24, Y+9	; 0x09
   123a8:	9a 85       	ldd	r25, Y+10	; 0x0a
   123aa:	23 e2       	ldi	r18, 0x23	; 35
   123ac:	32 e0       	ldi	r19, 0x02	; 2
   123ae:	40 e0       	ldi	r20, 0x00	; 0
   123b0:	50 e0       	ldi	r21, 0x00	; 0
   123b2:	0e 94 54 b8 	call	0x170a8	; 0x170a8 <__mulsi3>
   123b6:	dc 01       	movw	r26, r24
   123b8:	cb 01       	movw	r24, r22
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
      (uint64_t)i_temp2 + (uint64_t)(ARB_LOAD_EST_ONE >> 1)) >>
   123ba:	3c 01       	movw	r6, r24
   123bc:	4d 01       	movw	r8, r26
   123be:	23 2d       	mov	r18, r3
   123c0:	28 0f       	add	r18, r24
   123c2:	31 e0       	ldi	r19, 0x01	; 1
   123c4:	23 15       	cp	r18, r3
   123c6:	08 f0       	brcs	.+2      	; 0x123ca <arb_priorityScheduler+0x342>
   123c8:	30 e0       	ldi	r19, 0x00	; 0
   123ca:	8e 2d       	mov	r24, r14
   123cc:	87 0d       	add	r24, r7
   123ce:	41 e0       	ldi	r20, 0x01	; 1
   123d0:	8e 15       	cp	r24, r14
   123d2:	08 f0       	brcs	.+2      	; 0x123d6 <arb_priorityScheduler+0x34e>
   123d4:	40 e0       	ldi	r20, 0x00	; 0
   123d6:	38 0f       	add	r19, r24
   123d8:	91 e0       	ldi	r25, 0x01	; 1
   123da:	38 17       	cp	r19, r24
   123dc:	08 f0       	brcs	.+2      	; 0x123e0 <arb_priorityScheduler+0x358>
   123de:	90 e0       	ldi	r25, 0x00	; 0
   123e0:	49 2b       	or	r20, r25
   123e2:	8f 2d       	mov	r24, r15
   123e4:	88 0d       	add	r24, r8
   123e6:	51 e0       	ldi	r21, 0x01	; 1
   123e8:	8f 15       	cp	r24, r15
   123ea:	08 f0       	brcs	.+2      	; 0x123ee <arb_priorityScheduler+0x366>
   123ec:	50 e0       	ldi	r21, 0x00	; 0
   123ee:	48 0f       	add	r20, r24
   123f0:	91 e0       	ldi	r25, 0x01	; 1
   123f2:	48 17       	cp	r20, r24
   123f4:	08 f0       	brcs	.+2      	; 0x123f8 <arb_priorityScheduler+0x370>
   123f6:	90 e0       	ldi	r25, 0x00	; 0
   123f8:	59 2b       	or	r21, r25
   123fa:	80 2f       	mov	r24, r16
   123fc:	89 0d       	add	r24, r9
   123fe:	61 e0       	ldi	r22, 0x01	; 1
   12400:	80 17       	cp	r24, r16
   12402:	08 f0       	brcs	.+2      	; 0x12406 <arb_priorityScheduler+0x37e>
   12404:	60 e0       	ldi	r22, 0x00	; 0
   12406:	58 0f       	add	r21, r24
   12408:	91 e0       	ldi	r25, 0x01	; 1
   1240a:	58 17       	cp	r21, r24
   1240c:	08 f0       	brcs	.+2      	; 0x12410 <arb_priorityScheduler+0x388>
   1240e:	90 e0       	ldi	r25, 0x00	; 0
   12410:	69 2b       	or	r22, r25
   12412:	62 0d       	add	r22, r2
   12414:	71 e0       	ldi	r23, 0x01	; 1
   12416:	62 15       	cp	r22, r2
   12418:	08 f0       	brcs	.+2      	; 0x1241c <arb_priorityScheduler+0x394>
   1241a:	70 e0       	ldi	r23, 0x00	; 0
   1241c:	71 0f       	add	r23, r17
   1241e:	81 e0       	ldi	r24, 0x01	; 1
   12420:	71 17       	cp	r23, r17
   12422:	08 f0       	brcs	.+2      	; 0x12426 <arb_priorityScheduler+0x39e>
   12424:	80 e0       	ldi	r24, 0x00	; 0
   12426:	85 0d       	add	r24, r5
   12428:	91 e0       	ldi	r25, 0x01	; 1
   1242a:	85 15       	cp	r24, r5
   1242c:	08 f0       	brcs	.+2      	; 0x12430 <arb_priorityScheduler+0x3a8>
   1242e:	90 e0       	ldi	r25, 0x00	; 0
   12430:	94 0d       	add	r25, r4
   12432:	0f e0       	ldi	r16, 0x0F	; 15
   12434:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__lshrdi3>
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   12438:	20 93 3d 27 	sts	0x273D, r18
   1243c:	30 93 3e 27 	sts	0x273E, r19
   12440:	40 93 3f 27 	sts	0x273F, r20
   12444:	50 93 40 27 	sts	0x2740, r21
       *---------------------------------------------------------------------*/
      arb_updateLoadingEst();

   }/*End if( gt_schedObject.b_enableScheduler == true)*/

}/*End arb_priorityScheduler*/
   12448:	2a 96       	adiw	r28, 0x0a	; 10
   1244a:	cd bf       	out	0x3d, r28	; 61
   1244c:	de bf       	out	0x3e, r29	; 62
   1244e:	df 91       	pop	r29
   12450:	cf 91       	pop	r28
   12452:	1f 91       	pop	r17
   12454:	0f 91       	pop	r16
   12456:	ff 90       	pop	r15
   12458:	ef 90       	pop	r14
   1245a:	df 90       	pop	r13
   1245c:	cf 90       	pop	r12
   1245e:	bf 90       	pop	r11
   12460:	af 90       	pop	r10
   12462:	9f 90       	pop	r9
   12464:	8f 90       	pop	r8
   12466:	7f 90       	pop	r7
   12468:	6f 90       	pop	r6
   1246a:	5f 90       	pop	r5
   1246c:	4f 90       	pop	r4
   1246e:	3f 90       	pop	r3
   12470:	2f 90       	pop	r2
   12472:	08 95       	ret

00012474 <arb_schedulerInit>:
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_error arb_schedulerInit( t_schedulerType t_schedType,
                           t_stackSize t_idlStack,
                           t_timerModId t_timerId)
{
   12474:	ef 92       	push	r14
   12476:	ff 92       	push	r15
   12478:	1f 93       	push	r17
   1247a:	cf 93       	push	r28
   1247c:	df 93       	push	r29
   1247e:	0f 92       	push	r0
   12480:	0f 92       	push	r0
   12482:	cd b7       	in	r28, 0x3d	; 61
   12484:	de b7       	in	r29, 0x3e	; 62
   12486:	18 2f       	mov	r17, r24
   12488:	7b 01       	movw	r14, r22
   1248a:	84 2f       	mov	r24, r20
   t_THRDHANDLE t_idleThrdHndl;

   /*------------------------------------------------------------------------*
    * Scheduler is not enabled until 'arb_schedulerStart' gets called.
    *------------------------------------------------------------------------*/
   gt_schedObject.b_enableScheduler = false;
   1248c:	10 92 36 27 	sts	0x2736, r1
   gt_schedObject.ai_loading[0] = 0;
   12490:	10 92 39 27 	sts	0x2739, r1
   12494:	10 92 3a 27 	sts	0x273A, r1
   12498:	10 92 3b 27 	sts	0x273B, r1
   1249c:	10 92 3c 27 	sts	0x273C, r1
   gt_schedObject.ai_loading[1] = 0;
   124a0:	10 92 3d 27 	sts	0x273D, r1
   124a4:	10 92 3e 27 	sts	0x273E, r1
   124a8:	10 92 3f 27 	sts	0x273F, r1
   124ac:	10 92 40 27 	sts	0x2740, r1
   gt_schedObject.s_loadUpdateCount = 0;
   124b0:	10 92 37 27 	sts	0x2737, r1
   124b4:	10 92 38 27 	sts	0x2738, r1
   gt_schedObject.i_activeCount = 0;
   124b8:	10 92 41 27 	sts	0x2741, r1
   124bc:	10 92 42 27 	sts	0x2742, r1
   124c0:	10 92 43 27 	sts	0x2743, r1
   124c4:	10 92 44 27 	sts	0x2744, r1

   /*------------------------------------------------------------------------*
    * Global Interrupt Disable
    *------------------------------------------------------------------------*/
   HAL_CLI();
   124c8:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Configure OS system timer for a period of 10msec
    *------------------------------------------------------------------------*/
   arb_sysTimerInit( t_timerId);
   124ca:	0e 94 88 9e 	call	0x13d10	; 0x13d10 <arb_sysTimerInit>

   /*------------------------------------------------------------------------*
    * Create the idle thread.
    *------------------------------------------------------------------------*/
   t_idleThrdHndl = arb_idleInit( t_idlStack, ARB_IDLE_PRIORITY);
   124ce:	c7 01       	movw	r24, r14
   124d0:	6f ef       	ldi	r22, 0xFF	; 255
   124d2:	0e 94 df 86 	call	0x10dbe	; 0x10dbe <arb_idleInit>
   124d6:	89 83       	std	Y+1, r24	; 0x01
   124d8:	9a 83       	std	Y+2, r25	; 0x02
   if( t_idleThrdHndl < 0)
   124da:	89 81       	ldd	r24, Y+1	; 0x01
   124dc:	9a 81       	ldd	r25, Y+2	; 0x02
   124de:	97 ff       	sbrs	r25, 7
   124e0:	08 c0       	rjmp	.+16     	; 0x124f2 <arb_schedulerInit+0x7e>
   {
      arb_printf( PRINTF_DBG_HIGH,
   124e2:	84 e0       	ldi	r24, 0x04	; 4
   124e4:	6c eb       	ldi	r22, 0xBC	; 188
   124e6:	72 e2       	ldi	r23, 0x22	; 34
   124e8:	0e 94 b0 8b 	call	0x11760	; 0x11760 <arb_printf>
                  "Idle thread failed init.\n\r");

      return (t_error)t_idleThrdHndl;
   124ec:	89 81       	ldd	r24, Y+1	; 0x01
   124ee:	9a 81       	ldd	r25, Y+2	; 0x02
   124f0:	1b c0       	rjmp	.+54     	; 0x12528 <arb_schedulerInit+0xb4>
   }

   /*------------------------------------------------------------------------*
    * Make sure the idle thread is the first thread the scheduler runs.
    *------------------------------------------------------------------------*/
   UTL_SET_CURR_OF_CONT( gt_activeThreads, t_idleThrdHndl);
   124f2:	e0 91 fe 22 	lds	r30, 0x22FE
   124f6:	f0 91 ff 22 	lds	r31, 0x22FF
   124fa:	89 81       	ldd	r24, Y+1	; 0x01
   124fc:	9a 81       	ldd	r25, Y+2	; 0x02
   124fe:	86 83       	std	Z+6, r24	; 0x06
   12500:	97 83       	std	Z+7, r25	; 0x07

   /*------------------------------------------------------------------------*
    * Point the function pointer to the correct scheduler
    *------------------------------------------------------------------------*/
   switch( t_schedType)
   12502:	11 23       	and	r17, r17
   12504:	29 f0       	breq	.+10     	; 0x12510 <arb_schedulerInit+0x9c>
   12506:	11 30       	cpi	r17, 0x01	; 1
   12508:	19 f4       	brne	.+6      	; 0x12510 <arb_schedulerInit+0x9c>

      break;/*End  case ROUNDROBIN:*/

      case PRIORITY:

         gpt_scheduler = &arb_priorityScheduler;
   1250a:	84 e4       	ldi	r24, 0x44	; 68
   1250c:	90 e9       	ldi	r25, 0x90	; 144
   1250e:	02 c0       	rjmp	.+4      	; 0x12514 <arb_schedulerInit+0xa0>

      break;/*End case PRIORITY:*/

      default:

         gpt_scheduler = &arb_roundRobinScheduler;
   12510:	82 e7       	ldi	r24, 0x72	; 114
   12512:	9e e8       	ldi	r25, 0x8E	; 142
   12514:	80 93 81 27 	sts	0x2781, r24
   12518:	90 93 82 27 	sts	0x2782, r25

      break;/*End default:*/

   }/*End switch( t_schedType)*/

   arb_printf( PRINTF_DBG_HIGH,
   1251c:	84 e0       	ldi	r24, 0x04	; 4
   1251e:	67 ed       	ldi	r22, 0xD7	; 215
   12520:	72 e2       	ldi	r23, 0x22	; 34
   12522:	0e 94 b0 8b 	call	0x11760	; 0x11760 <arb_printf>
               "Scheduler initialized\n\r");

   return ARB_PASSED;
   12526:	80 e0       	ldi	r24, 0x00	; 0

}/*End arb_schedulerInit*/
   12528:	0f 90       	pop	r0
   1252a:	0f 90       	pop	r0
   1252c:	df 91       	pop	r29
   1252e:	cf 91       	pop	r28
   12530:	1f 91       	pop	r17
   12532:	ff 90       	pop	r15
   12534:	ef 90       	pop	r14
   12536:	08 95       	ret

00012538 <arb_schedulerStart>:

void arb_schedulerStart( void)
{
   12538:	ef 92       	push	r14
   1253a:	ff 92       	push	r15
   1253c:	0f 93       	push	r16
   1253e:	1f 93       	push	r17
   12540:	cf 93       	push	r28
   12542:	df 93       	push	r29
   12544:	cd b7       	in	r28, 0x3d	; 61
   12546:	de b7       	in	r29, 0x3e	; 62
   12548:	e3 97       	sbiw	r28, 0x33	; 51
   1254a:	cd bf       	out	0x3d, r28	; 61
   1254c:	de bf       	out	0x3e, r29	; 62
   char ac_buff[50];

   /*------------------------------------------------------------------------*
    * Enable the scheduler
    *------------------------------------------------------------------------*/
   gt_schedObject.b_enableScheduler = true;
   1254e:	11 e0       	ldi	r17, 0x01	; 1
   12550:	10 93 36 27 	sts	0x2736, r17

   /*------------------------------------------------------------------------*
    * Start the system timer
    *------------------------------------------------------------------------*/
   t_err = arb_sysTimerStart();
   12554:	0e 94 77 9e 	call	0x13cee	; 0x13cee <arb_sysTimerStart>
   if( t_err < 0)
   12558:	87 ff       	sbrs	r24, 7
   1255a:	26 c0       	rjmp	.+76     	; 0x125a8 <arb_schedulerStart+0x70>
   {
      sprintf_P((char *)ac_buff, PSTR("arb_sysTimerStart failed with %d.\n\r"), t_err);
   1255c:	00 d0       	rcall	.+0      	; 0x1255e <arb_schedulerStart+0x26>
   1255e:	00 d0       	rcall	.+0      	; 0x12560 <arb_schedulerStart+0x28>
   12560:	ed b7       	in	r30, 0x3d	; 61
   12562:	fe b7       	in	r31, 0x3e	; 62
   12564:	31 96       	adiw	r30, 0x01	; 1
   12566:	8e 01       	movw	r16, r28
   12568:	0e 5f       	subi	r16, 0xFE	; 254
   1256a:	1f 4f       	sbci	r17, 0xFF	; 255
   1256c:	ad b7       	in	r26, 0x3d	; 61
   1256e:	be b7       	in	r27, 0x3e	; 62
   12570:	11 96       	adiw	r26, 0x01	; 1
   12572:	0d 93       	st	X+, r16
   12574:	1c 93       	st	X, r17
   12576:	12 97       	sbiw	r26, 0x02	; 2
   12578:	2d ec       	ldi	r18, 0xCD	; 205
   1257a:	3b e0       	ldi	r19, 0x0B	; 11
   1257c:	22 83       	std	Z+2, r18	; 0x02
   1257e:	33 83       	std	Z+3, r19	; 0x03
   12580:	99 27       	eor	r25, r25
   12582:	87 fd       	sbrc	r24, 7
   12584:	90 95       	com	r25
   12586:	84 83       	std	Z+4, r24	; 0x04
   12588:	95 83       	std	Z+5, r25	; 0x05
   1258a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>

      arb_printf( PRINTF_DBG_HIGH,
   1258e:	8d b7       	in	r24, 0x3d	; 61
   12590:	9e b7       	in	r25, 0x3e	; 62
   12592:	06 96       	adiw	r24, 0x06	; 6
   12594:	8d bf       	out	0x3d, r24	; 61
   12596:	9e bf       	out	0x3e, r25	; 62
   12598:	84 e0       	ldi	r24, 0x04	; 4
   1259a:	b8 01       	movw	r22, r16
   1259c:	0e 94 b0 8b 	call	0x11760	; 0x11760 <arb_printf>
                  ac_buff);

      exit(0);
   125a0:	80 e0       	ldi	r24, 0x00	; 0
   125a2:	90 e0       	ldi	r25, 0x00	; 0
   125a4:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   }/*End if( arb_sysTimerStart() < 0)*/

   /*------------------------------------------------------------------------*
    * Change the status of this thread
    *------------------------------------------------------------------------*/
   pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   125a8:	e0 91 fe 22 	lds	r30, 0x22FE
   125ac:	f0 91 ff 22 	lds	r31, 0x22FF
   125b0:	06 80       	ldd	r0, Z+6	; 0x06
   125b2:	f7 81       	ldd	r31, Z+7	; 0x07
   125b4:	e0 2d       	mov	r30, r0
   125b6:	01 90       	ld	r0, Z+
   125b8:	f0 81       	ld	r31, Z
   125ba:	e0 2d       	mov	r30, r0
   125bc:	e0 93 45 27 	sts	0x2745, r30
   125c0:	f0 93 46 27 	sts	0x2746, r31
   pt_temp->t_status = RUNNING;
   125c4:	11 83       	std	Z+1, r17	; 0x01

   /*------------------------------------------------------------------------*
    * Disable debug...
    *------------------------------------------------------------------------*/
   arb_setPrintfDbgLevel( PRINTF_DBG_OFF);
   125c6:	80 e2       	ldi	r24, 0x20	; 32
   125c8:	0e 94 8a 8b 	call	0x11714	; 0x11714 <arb_setPrintfDbgLevel>

   /*------------------------------------------------------------------------*
    * Wait one second before launching first thread.
    *------------------------------------------------------------------------*/
   hal_busyDelayMs( 1000, hal_getCpuFreq());
   125cc:	0e 94 ba 21 	call	0x4374	; 0x4374 <hal_getCpuFreq>
   static inline void __attribute__((always_inline)) 
   hal_busyDelayMs(uint32_t i_msec, uint32_t i_cpuSpeed) 
   {

	   uint16_t __ticks;
	   double __tmp = ((i_cpuSpeed) / 4e3) * i_msec;
   125d0:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
   125d4:	20 e0       	ldi	r18, 0x00	; 0
   125d6:	30 e0       	ldi	r19, 0x00	; 0
   125d8:	4a e7       	ldi	r20, 0x7A	; 122
   125da:	55 e4       	ldi	r21, 0x45	; 69
   125dc:	0e 94 b0 ae 	call	0x15d60	; 0x15d60 <__divsf3>
   125e0:	20 e0       	ldi	r18, 0x00	; 0
   125e2:	30 e0       	ldi	r19, 0x00	; 0
   125e4:	4a e7       	ldi	r20, 0x7A	; 122
   125e6:	54 e4       	ldi	r21, 0x44	; 68
   125e8:	0e 94 87 b0 	call	0x1610e	; 0x1610e <__mulsf3>
   125ec:	7b 01       	movw	r14, r22
   125ee:	18 2f       	mov	r17, r24
   125f0:	09 2f       	mov	r16, r25
  
      HAL_BEGIN_CRITICAL();
   125f2:	8f b7       	in	r24, 0x3f	; 63
   125f4:	89 83       	std	Y+1, r24	; 0x01
   125f6:	f8 94       	cli

	   if (__tmp < 1.0)
   125f8:	98 01       	movw	r18, r16
   125fa:	8e 2d       	mov	r24, r14
   125fc:	9f 2d       	mov	r25, r15
   125fe:	a3 2f       	mov	r26, r19
   12600:	b2 2f       	mov	r27, r18
   12602:	bc 01       	movw	r22, r24
   12604:	cd 01       	movw	r24, r26
   12606:	20 e0       	ldi	r18, 0x00	; 0
   12608:	30 e0       	ldi	r19, 0x00	; 0
   1260a:	40 e8       	ldi	r20, 0x80	; 128
   1260c:	5f e3       	ldi	r21, 0x3F	; 63
   1260e:	0e 94 ac ae 	call	0x15d58	; 0x15d58 <__cmpsf2>
   12612:	87 fd       	sbrc	r24, 7
   12614:	23 c0       	rjmp	.+70     	; 0x1265c <arb_schedulerStart+0x124>
	   __ticks = 1;
	   else if (__tmp > 65535)
   12616:	98 01       	movw	r18, r16
   12618:	8e 2d       	mov	r24, r14
   1261a:	9f 2d       	mov	r25, r15
   1261c:	a3 2f       	mov	r26, r19
   1261e:	b2 2f       	mov	r27, r18
   12620:	bc 01       	movw	r22, r24
   12622:	cd 01       	movw	r24, r26
   12624:	20 e0       	ldi	r18, 0x00	; 0
   12626:	3f ef       	ldi	r19, 0xFF	; 255
   12628:	4f e7       	ldi	r20, 0x7F	; 127
   1262a:	57 e4       	ldi	r21, 0x47	; 71
   1262c:	0e 94 83 b0 	call	0x16106	; 0x16106 <__gesf2>
   12630:	18 16       	cp	r1, r24
   12632:	54 f4       	brge	.+20     	; 0x12648 <arb_schedulerStart+0x110>
   12634:	80 e1       	ldi	r24, 0x10	; 16
   12636:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   12638:	20 e2       	ldi	r18, 0x20	; 32
   1263a:	33 e0       	ldi	r19, 0x03	; 3
   1263c:	f9 01       	movw	r30, r18
   1263e:	31 97       	sbiw	r30, 0x01	; 1
   12640:	f1 f7       	brne	.-4      	; 0x1263e <arb_schedulerStart+0x106>
   12642:	01 97       	sbiw	r24, 0x01	; 1
	   {
   	   //	__ticks = requested delay in 1/10 ms
   	   __ticks = (uint16_t) (i_msec * 10);
   	   while(__ticks)
   12644:	d9 f7       	brne	.-10     	; 0x1263c <arb_schedulerStart+0x104>
   12646:	11 c0       	rjmp	.+34     	; 0x1266a <arb_schedulerStart+0x132>
      	   __ticks --;
   	   }
   	   return;
	   }
	   else
	      __ticks = (uint16_t)__tmp;
   12648:	98 01       	movw	r18, r16
   1264a:	8e 2d       	mov	r24, r14
   1264c:	9f 2d       	mov	r25, r15
   1264e:	a3 2f       	mov	r26, r19
   12650:	b2 2f       	mov	r27, r18
   12652:	bc 01       	movw	r22, r24
   12654:	cd 01       	movw	r24, r26
   12656:	0e 94 57 af 	call	0x15eae	; 0x15eae <__fixunssfsi>
   1265a:	02 c0       	rjmp	.+4      	; 0x12660 <arb_schedulerStart+0x128>
	   double __tmp = ((i_cpuSpeed) / 4e3) * i_msec;
  
      HAL_BEGIN_CRITICAL();

	   if (__tmp < 1.0)
	   __ticks = 1;
   1265c:	61 e0       	ldi	r22, 0x01	; 1
   1265e:	70 e0       	ldi	r23, 0x00	; 0
   	   return;
	   }
	   else
	      __ticks = (uint16_t)__tmp;

	   __asm__ volatile (
   12660:	cb 01       	movw	r24, r22
   12662:	01 97       	sbiw	r24, 0x01	; 1
   12664:	f1 f7       	brne	.-4      	; 0x12662 <arb_schedulerStart+0x12a>
	   "brne 1b"
	   : "=w" (__ticks)
	   : "0" (__ticks)
	   );

      HAL_END_CRITICAL();
   12666:	89 81       	ldd	r24, Y+1	; 0x01
   12668:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1266a:	e0 91 fe 22 	lds	r30, 0x22FE
   1266e:	f0 91 ff 22 	lds	r31, 0x22FF
   12672:	06 80       	ldd	r0, Z+6	; 0x06
   12674:	f7 81       	ldd	r31, Z+7	; 0x07
   12676:	e0 2d       	mov	r30, r0
   12678:	01 90       	ld	r0, Z+
   1267a:	f0 81       	ld	r31, Z
   1267c:	e0 2d       	mov	r30, r0
   1267e:	e0 93 7f 27 	sts	0x277F, r30
   12682:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12686:	81 85       	ldd	r24, Z+9	; 0x09
   12688:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   1268a:	82 85       	ldd	r24, Z+10	; 0x0a
   1268c:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   1268e:	ff 91       	pop	r31
      asm( "pop r30");
   12690:	ef 91       	pop	r30
      asm( "pop r29");
   12692:	df 91       	pop	r29
      asm( "pop r28");
   12694:	cf 91       	pop	r28
      asm( "pop r27");
   12696:	bf 91       	pop	r27
      asm( "pop r26");
   12698:	af 91       	pop	r26
      asm( "pop r25");
   1269a:	9f 91       	pop	r25
      asm( "pop r24");
   1269c:	8f 91       	pop	r24
      asm( "pop r23");
   1269e:	7f 91       	pop	r23
      asm( "pop r22");
   126a0:	6f 91       	pop	r22
      asm( "pop r21");
   126a2:	5f 91       	pop	r21
      asm( "pop r20");
   126a4:	4f 91       	pop	r20
      asm( "pop r19");
   126a6:	3f 91       	pop	r19
      asm( "pop r18");
   126a8:	2f 91       	pop	r18
      asm( "pop r17");
   126aa:	1f 91       	pop	r17
      asm( "pop r16");
   126ac:	0f 91       	pop	r16
      asm( "pop r15");
   126ae:	ff 90       	pop	r15
      asm( "pop r14");
   126b0:	ef 90       	pop	r14
      asm( "pop r13");
   126b2:	df 90       	pop	r13
      asm( "pop r12");
   126b4:	cf 90       	pop	r12
      asm( "pop r11");
   126b6:	bf 90       	pop	r11
      asm( "pop r10");
   126b8:	af 90       	pop	r10
      asm( "pop r9");
   126ba:	9f 90       	pop	r9
      asm( "pop r8");
   126bc:	8f 90       	pop	r8
      asm( "pop r7");
   126be:	7f 90       	pop	r7
      asm( "pop r6");
   126c0:	6f 90       	pop	r6
      asm( "pop r5");
   126c2:	5f 90       	pop	r5
      asm( "pop r4");
   126c4:	4f 90       	pop	r4
      asm( "pop r3");
   126c6:	3f 90       	pop	r3
      asm( "pop r2");
   126c8:	2f 90       	pop	r2
      asm( "pop r1");
   126ca:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   126cc:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   126ce:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   126d0:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
   HAL_RET();
   126d2:	08 95       	ret

}/*End arb_schedulerStart*/
   126d4:	e3 96       	adiw	r28, 0x33	; 51
   126d6:	cd bf       	out	0x3d, r28	; 61
   126d8:	de bf       	out	0x3e, r29	; 62
   126da:	df 91       	pop	r29
   126dc:	cf 91       	pop	r28
   126de:	1f 91       	pop	r17
   126e0:	0f 91       	pop	r16
   126e2:	ff 90       	pop	r15
   126e4:	ef 90       	pop	r14
   126e6:	08 95       	ret

000126e8 <arb_getOneMinLoadingEst>:

uint32_t arb_getOneMinLoadingEst( void)
{
   return gt_schedObject.ai_loading[0];
   126e8:	60 91 39 27 	lds	r22, 0x2739
   126ec:	70 91 3a 27 	lds	r23, 0x273A
}/*End arb_getOneMinLoadingEst*/
   126f0:	80 91 3b 27 	lds	r24, 0x273B
   126f4:	90 91 3c 27 	lds	r25, 0x273C
   126f8:	08 95       	ret

000126fa <arb_getFiveMinLoadingEst>:

uint32_t arb_getFiveMinLoadingEst( void)
{
   return gt_schedObject.ai_loading[1];
   126fa:	60 91 3d 27 	lds	r22, 0x273D
   126fe:	70 91 3e 27 	lds	r23, 0x273E
}/*End arb_getFiveMinLoadingEst*/
   12702:	80 91 3f 27 	lds	r24, 0x273F
   12706:	90 91 40 27 	lds	r25, 0x2740
   1270a:	08 95       	ret

0001270c <arb_yieldFromSignalActiveInt>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   1270c:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   1270e:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   12710:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   12712:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   12714:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   12716:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   12718:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   1271a:	0f 92       	push	r0
      asm( "push r1");
   1271c:	1f 92       	push	r1
      asm( "clr r1");
   1271e:	11 24       	eor	r1, r1
      asm( "push r2");
   12720:	2f 92       	push	r2
      asm( "push r3");
   12722:	3f 92       	push	r3
      asm( "push r4");
   12724:	4f 92       	push	r4
      asm( "push r5");
   12726:	5f 92       	push	r5
      asm( "push r6");
   12728:	6f 92       	push	r6
      asm( "push r7");
   1272a:	7f 92       	push	r7
      asm( "push r8");
   1272c:	8f 92       	push	r8
      asm( "push r9");
   1272e:	9f 92       	push	r9
      asm( "push r10");
   12730:	af 92       	push	r10
      asm( "push r11");
   12732:	bf 92       	push	r11
      asm( "push r12");
   12734:	cf 92       	push	r12
      asm( "push r13");
   12736:	df 92       	push	r13
      asm( "push r14");
   12738:	ef 92       	push	r14
      asm( "push r15");
   1273a:	ff 92       	push	r15
      asm( "push r16");
   1273c:	0f 93       	push	r16
      asm( "push r17");
   1273e:	1f 93       	push	r17
      asm( "push r18");
   12740:	2f 93       	push	r18
      asm( "push r19");
   12742:	3f 93       	push	r19
      asm( "push r20");
   12744:	4f 93       	push	r20
      asm( "push r21");
   12746:	5f 93       	push	r21
      asm( "push r22");
   12748:	6f 93       	push	r22
      asm( "push r23");
   1274a:	7f 93       	push	r23
      asm( "push r24");
   1274c:	8f 93       	push	r24
      asm( "push r25");
   1274e:	9f 93       	push	r25
      asm( "push r26");
   12750:	af 93       	push	r26
      asm( "push r27");
   12752:	bf 93       	push	r27
      asm( "push r28");
   12754:	cf 93       	push	r28
      asm( "push r29");
   12756:	df 93       	push	r29
      asm( "push r30");
   12758:	ef 93       	push	r30
      asm( "push r31");
   1275a:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1275c:	e0 91 fe 22 	lds	r30, 0x22FE
   12760:	f0 91 ff 22 	lds	r31, 0x22FF
   12764:	06 80       	ldd	r0, Z+6	; 0x06
   12766:	f7 81       	ldd	r31, Z+7	; 0x07
   12768:	e0 2d       	mov	r30, r0
   1276a:	01 90       	ld	r0, Z+
   1276c:	f0 81       	ld	r31, Z
   1276e:	e0 2d       	mov	r30, r0
   12770:	e0 93 7f 27 	sts	0x277F, r30
   12774:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   12778:	2d b7       	in	r18, 0x3d	; 61
   1277a:	30 e0       	ldi	r19, 0x00	; 0
   1277c:	21 87       	std	Z+9, r18	; 0x09
   1277e:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   12780:	4e b7       	in	r20, 0x3e	; 62
   12782:	94 2f       	mov	r25, r20
   12784:	80 e0       	ldi	r24, 0x00	; 0
   12786:	82 2b       	or	r24, r18
   12788:	93 2b       	or	r25, r19
   1278a:	81 87       	std	Z+9, r24	; 0x09
   1278c:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   1278e:	8f ef       	ldi	r24, 0xFF	; 255
   12790:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   12792:	8f e3       	ldi	r24, 0x3F	; 63
   12794:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   12796:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1279a:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1279e:	e0 91 fe 22 	lds	r30, 0x22FE
   127a2:	f0 91 ff 22 	lds	r31, 0x22FF
   127a6:	06 80       	ldd	r0, Z+6	; 0x06
   127a8:	f7 81       	ldd	r31, Z+7	; 0x07
   127aa:	e0 2d       	mov	r30, r0
   127ac:	01 90       	ld	r0, Z+
   127ae:	f0 81       	ld	r31, Z
   127b0:	e0 2d       	mov	r30, r0
   127b2:	e0 93 49 27 	sts	0x2749, r30
   127b6:	f0 93 4a 27 	sts	0x274A, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   127ba:	03 84       	ldd	r0, Z+11	; 0x0b
   127bc:	f4 85       	ldd	r31, Z+12	; 0x0c
   127be:	e0 2d       	mov	r30, r0
   127c0:	80 81       	ld	r24, Z
   127c2:	91 81       	ldd	r25, Z+1	; 0x01
   127c4:	2e ed       	ldi	r18, 0xDE	; 222
   127c6:	8d 3a       	cpi	r24, 0xAD	; 173
   127c8:	92 07       	cpc	r25, r18
   127ca:	11 f0       	breq	.+4      	; 0x127d0 <arb_yieldFromSignalActiveInt+0xc4>
   {
      arb_stackOverflow();
   127cc:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   127d0:	e0 91 81 27 	lds	r30, 0x2781
   127d4:	f0 91 82 27 	lds	r31, 0x2782
   127d8:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   127da:	e0 91 fe 22 	lds	r30, 0x22FE
   127de:	f0 91 ff 22 	lds	r31, 0x22FF
   127e2:	06 80       	ldd	r0, Z+6	; 0x06
   127e4:	f7 81       	ldd	r31, Z+7	; 0x07
   127e6:	e0 2d       	mov	r30, r0
   127e8:	01 90       	ld	r0, Z+
   127ea:	f0 81       	ld	r31, Z
   127ec:	e0 2d       	mov	r30, r0
   127ee:	e0 93 7f 27 	sts	0x277F, r30
   127f2:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   127f6:	81 85       	ldd	r24, Z+9	; 0x09
   127f8:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   127fa:	82 85       	ldd	r24, Z+10	; 0x0a
   127fc:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   127fe:	ff 91       	pop	r31
      asm( "pop r30");
   12800:	ef 91       	pop	r30
      asm( "pop r29");
   12802:	df 91       	pop	r29
      asm( "pop r28");
   12804:	cf 91       	pop	r28
      asm( "pop r27");
   12806:	bf 91       	pop	r27
      asm( "pop r26");
   12808:	af 91       	pop	r26
      asm( "pop r25");
   1280a:	9f 91       	pop	r25
      asm( "pop r24");
   1280c:	8f 91       	pop	r24
      asm( "pop r23");
   1280e:	7f 91       	pop	r23
      asm( "pop r22");
   12810:	6f 91       	pop	r22
      asm( "pop r21");
   12812:	5f 91       	pop	r21
      asm( "pop r20");
   12814:	4f 91       	pop	r20
      asm( "pop r19");
   12816:	3f 91       	pop	r19
      asm( "pop r18");
   12818:	2f 91       	pop	r18
      asm( "pop r17");
   1281a:	1f 91       	pop	r17
      asm( "pop r16");
   1281c:	0f 91       	pop	r16
      asm( "pop r15");
   1281e:	ff 90       	pop	r15
      asm( "pop r14");
   12820:	ef 90       	pop	r14
      asm( "pop r13");
   12822:	df 90       	pop	r13
      asm( "pop r12");
   12824:	cf 90       	pop	r12
      asm( "pop r11");
   12826:	bf 90       	pop	r11
      asm( "pop r10");
   12828:	af 90       	pop	r10
      asm( "pop r9");
   1282a:	9f 90       	pop	r9
      asm( "pop r8");
   1282c:	8f 90       	pop	r8
      asm( "pop r7");
   1282e:	7f 90       	pop	r7
      asm( "pop r6");
   12830:	6f 90       	pop	r6
      asm( "pop r5");
   12832:	5f 90       	pop	r5
      asm( "pop r4");
   12834:	4f 90       	pop	r4
      asm( "pop r3");
   12836:	3f 90       	pop	r3
      asm( "pop r2");
   12838:	2f 90       	pop	r2
      asm( "pop r1");
   1283a:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1283c:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   1283e:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12840:	0f 90       	pop	r0
    * clearing the '.... Interrupt Executing flag'. Otherwise interrupts
    * won't be enabled until the calling thread is given back the processor
    * by the scheduler and the initial interrupt that indirectly made this
    * yield call is allowed to finish.
    *------------------------------------------------------------------------*/
	HAL_RETI();
   12842:	18 95       	reti

00012844 <arb_yieldFromSignalIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12844:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12846:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   12848:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   1284a:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   1284c:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   1284e:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   12850:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   12852:	0f 92       	push	r0
      asm( "push r1");
   12854:	1f 92       	push	r1
      asm( "clr r1");
   12856:	11 24       	eor	r1, r1
      asm( "push r2");
   12858:	2f 92       	push	r2
      asm( "push r3");
   1285a:	3f 92       	push	r3
      asm( "push r4");
   1285c:	4f 92       	push	r4
      asm( "push r5");
   1285e:	5f 92       	push	r5
      asm( "push r6");
   12860:	6f 92       	push	r6
      asm( "push r7");
   12862:	7f 92       	push	r7
      asm( "push r8");
   12864:	8f 92       	push	r8
      asm( "push r9");
   12866:	9f 92       	push	r9
      asm( "push r10");
   12868:	af 92       	push	r10
      asm( "push r11");
   1286a:	bf 92       	push	r11
      asm( "push r12");
   1286c:	cf 92       	push	r12
      asm( "push r13");
   1286e:	df 92       	push	r13
      asm( "push r14");
   12870:	ef 92       	push	r14
      asm( "push r15");
   12872:	ff 92       	push	r15
      asm( "push r16");
   12874:	0f 93       	push	r16
      asm( "push r17");
   12876:	1f 93       	push	r17
      asm( "push r18");
   12878:	2f 93       	push	r18
      asm( "push r19");
   1287a:	3f 93       	push	r19
      asm( "push r20");
   1287c:	4f 93       	push	r20
      asm( "push r21");
   1287e:	5f 93       	push	r21
      asm( "push r22");
   12880:	6f 93       	push	r22
      asm( "push r23");
   12882:	7f 93       	push	r23
      asm( "push r24");
   12884:	8f 93       	push	r24
      asm( "push r25");
   12886:	9f 93       	push	r25
      asm( "push r26");
   12888:	af 93       	push	r26
      asm( "push r27");
   1288a:	bf 93       	push	r27
      asm( "push r28");
   1288c:	cf 93       	push	r28
      asm( "push r29");
   1288e:	df 93       	push	r29
      asm( "push r30");
   12890:	ef 93       	push	r30
      asm( "push r31");
   12892:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12894:	e0 91 fe 22 	lds	r30, 0x22FE
   12898:	f0 91 ff 22 	lds	r31, 0x22FF
   1289c:	06 80       	ldd	r0, Z+6	; 0x06
   1289e:	f7 81       	ldd	r31, Z+7	; 0x07
   128a0:	e0 2d       	mov	r30, r0
   128a2:	01 90       	ld	r0, Z+
   128a4:	f0 81       	ld	r31, Z
   128a6:	e0 2d       	mov	r30, r0
   128a8:	e0 93 7f 27 	sts	0x277F, r30
   128ac:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   128b0:	2d b7       	in	r18, 0x3d	; 61
   128b2:	30 e0       	ldi	r19, 0x00	; 0
   128b4:	21 87       	std	Z+9, r18	; 0x09
   128b6:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   128b8:	4e b7       	in	r20, 0x3e	; 62
   128ba:	94 2f       	mov	r25, r20
   128bc:	80 e0       	ldi	r24, 0x00	; 0
   128be:	82 2b       	or	r24, r18
   128c0:	93 2b       	or	r25, r19
   128c2:	81 87       	std	Z+9, r24	; 0x09
   128c4:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   128c6:	8f ef       	ldi	r24, 0xFF	; 255
   128c8:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   128ca:	8f e3       	ldi	r24, 0x3F	; 63
   128cc:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   128ce:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   128d2:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   128d6:	e0 91 fe 22 	lds	r30, 0x22FE
   128da:	f0 91 ff 22 	lds	r31, 0x22FF
   128de:	06 80       	ldd	r0, Z+6	; 0x06
   128e0:	f7 81       	ldd	r31, Z+7	; 0x07
   128e2:	e0 2d       	mov	r30, r0
   128e4:	01 90       	ld	r0, Z+
   128e6:	f0 81       	ld	r31, Z
   128e8:	e0 2d       	mov	r30, r0
   128ea:	e0 93 49 27 	sts	0x2749, r30
   128ee:	f0 93 4a 27 	sts	0x274A, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   128f2:	03 84       	ldd	r0, Z+11	; 0x0b
   128f4:	f4 85       	ldd	r31, Z+12	; 0x0c
   128f6:	e0 2d       	mov	r30, r0
   128f8:	80 81       	ld	r24, Z
   128fa:	91 81       	ldd	r25, Z+1	; 0x01
   128fc:	2e ed       	ldi	r18, 0xDE	; 222
   128fe:	8d 3a       	cpi	r24, 0xAD	; 173
   12900:	92 07       	cpc	r25, r18
   12902:	11 f0       	breq	.+4      	; 0x12908 <arb_yieldFromSignalIntsOn+0xc4>
   {
      arb_stackOverflow();
   12904:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12908:	e0 91 81 27 	lds	r30, 0x2781
   1290c:	f0 91 82 27 	lds	r31, 0x2782
   12910:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12912:	e0 91 fe 22 	lds	r30, 0x22FE
   12916:	f0 91 ff 22 	lds	r31, 0x22FF
   1291a:	06 80       	ldd	r0, Z+6	; 0x06
   1291c:	f7 81       	ldd	r31, Z+7	; 0x07
   1291e:	e0 2d       	mov	r30, r0
   12920:	01 90       	ld	r0, Z+
   12922:	f0 81       	ld	r31, Z
   12924:	e0 2d       	mov	r30, r0
   12926:	e0 93 7f 27 	sts	0x277F, r30
   1292a:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   1292e:	81 85       	ldd	r24, Z+9	; 0x09
   12930:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12932:	82 85       	ldd	r24, Z+10	; 0x0a
   12934:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12936:	ff 91       	pop	r31
      asm( "pop r30");
   12938:	ef 91       	pop	r30
      asm( "pop r29");
   1293a:	df 91       	pop	r29
      asm( "pop r28");
   1293c:	cf 91       	pop	r28
      asm( "pop r27");
   1293e:	bf 91       	pop	r27
      asm( "pop r26");
   12940:	af 91       	pop	r26
      asm( "pop r25");
   12942:	9f 91       	pop	r25
      asm( "pop r24");
   12944:	8f 91       	pop	r24
      asm( "pop r23");
   12946:	7f 91       	pop	r23
      asm( "pop r22");
   12948:	6f 91       	pop	r22
      asm( "pop r21");
   1294a:	5f 91       	pop	r21
      asm( "pop r20");
   1294c:	4f 91       	pop	r20
      asm( "pop r19");
   1294e:	3f 91       	pop	r19
      asm( "pop r18");
   12950:	2f 91       	pop	r18
      asm( "pop r17");
   12952:	1f 91       	pop	r17
      asm( "pop r16");
   12954:	0f 91       	pop	r16
      asm( "pop r15");
   12956:	ff 90       	pop	r15
      asm( "pop r14");
   12958:	ef 90       	pop	r14
      asm( "pop r13");
   1295a:	df 90       	pop	r13
      asm( "pop r12");
   1295c:	cf 90       	pop	r12
      asm( "pop r11");
   1295e:	bf 90       	pop	r11
      asm( "pop r10");
   12960:	af 90       	pop	r10
      asm( "pop r9");
   12962:	9f 90       	pop	r9
      asm( "pop r8");
   12964:	8f 90       	pop	r8
      asm( "pop r7");
   12966:	7f 90       	pop	r7
      asm( "pop r6");
   12968:	6f 90       	pop	r6
      asm( "pop r5");
   1296a:	5f 90       	pop	r5
      asm( "pop r4");
   1296c:	4f 90       	pop	r4
      asm( "pop r3");
   1296e:	3f 90       	pop	r3
      asm( "pop r2");
   12970:	2f 90       	pop	r2
      asm( "pop r1");
   12972:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12974:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12976:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12978:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   1297a:	08 95       	ret

0001297c <arb_yieldFromSignalIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   1297c:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   1297e:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   12980:	0f 92       	push	r0
      asm( "push r1");
   12982:	1f 92       	push	r1
      asm( "clr r1");
   12984:	11 24       	eor	r1, r1
      asm( "push r2");
   12986:	2f 92       	push	r2
      asm( "push r3");
   12988:	3f 92       	push	r3
      asm( "push r4");
   1298a:	4f 92       	push	r4
      asm( "push r5");
   1298c:	5f 92       	push	r5
      asm( "push r6");
   1298e:	6f 92       	push	r6
      asm( "push r7");
   12990:	7f 92       	push	r7
      asm( "push r8");
   12992:	8f 92       	push	r8
      asm( "push r9");
   12994:	9f 92       	push	r9
      asm( "push r10");
   12996:	af 92       	push	r10
      asm( "push r11");
   12998:	bf 92       	push	r11
      asm( "push r12");
   1299a:	cf 92       	push	r12
      asm( "push r13");
   1299c:	df 92       	push	r13
      asm( "push r14");
   1299e:	ef 92       	push	r14
      asm( "push r15");
   129a0:	ff 92       	push	r15
      asm( "push r16");
   129a2:	0f 93       	push	r16
      asm( "push r17");
   129a4:	1f 93       	push	r17
      asm( "push r18");
   129a6:	2f 93       	push	r18
      asm( "push r19");
   129a8:	3f 93       	push	r19
      asm( "push r20");
   129aa:	4f 93       	push	r20
      asm( "push r21");
   129ac:	5f 93       	push	r21
      asm( "push r22");
   129ae:	6f 93       	push	r22
      asm( "push r23");
   129b0:	7f 93       	push	r23
      asm( "push r24");
   129b2:	8f 93       	push	r24
      asm( "push r25");
   129b4:	9f 93       	push	r25
      asm( "push r26");
   129b6:	af 93       	push	r26
      asm( "push r27");
   129b8:	bf 93       	push	r27
      asm( "push r28");
   129ba:	cf 93       	push	r28
      asm( "push r29");
   129bc:	df 93       	push	r29
      asm( "push r30");
   129be:	ef 93       	push	r30
      asm( "push r31");
   129c0:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   129c2:	e0 91 fe 22 	lds	r30, 0x22FE
   129c6:	f0 91 ff 22 	lds	r31, 0x22FF
   129ca:	06 80       	ldd	r0, Z+6	; 0x06
   129cc:	f7 81       	ldd	r31, Z+7	; 0x07
   129ce:	e0 2d       	mov	r30, r0
   129d0:	01 90       	ld	r0, Z+
   129d2:	f0 81       	ld	r31, Z
   129d4:	e0 2d       	mov	r30, r0
   129d6:	e0 93 7f 27 	sts	0x277F, r30
   129da:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   129de:	2d b7       	in	r18, 0x3d	; 61
   129e0:	30 e0       	ldi	r19, 0x00	; 0
   129e2:	21 87       	std	Z+9, r18	; 0x09
   129e4:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   129e6:	4e b7       	in	r20, 0x3e	; 62
   129e8:	94 2f       	mov	r25, r20
   129ea:	80 e0       	ldi	r24, 0x00	; 0
   129ec:	82 2b       	or	r24, r18
   129ee:	93 2b       	or	r25, r19
   129f0:	81 87       	std	Z+9, r24	; 0x09
   129f2:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   129f4:	8f ef       	ldi	r24, 0xFF	; 255
   129f6:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   129f8:	8f e3       	ldi	r24, 0x3F	; 63
   129fa:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   129fc:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12a00:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12a04:	e0 91 fe 22 	lds	r30, 0x22FE
   12a08:	f0 91 ff 22 	lds	r31, 0x22FF
   12a0c:	06 80       	ldd	r0, Z+6	; 0x06
   12a0e:	f7 81       	ldd	r31, Z+7	; 0x07
   12a10:	e0 2d       	mov	r30, r0
   12a12:	01 90       	ld	r0, Z+
   12a14:	f0 81       	ld	r31, Z
   12a16:	e0 2d       	mov	r30, r0
   12a18:	e0 93 49 27 	sts	0x2749, r30
   12a1c:	f0 93 4a 27 	sts	0x274A, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12a20:	03 84       	ldd	r0, Z+11	; 0x0b
   12a22:	f4 85       	ldd	r31, Z+12	; 0x0c
   12a24:	e0 2d       	mov	r30, r0
   12a26:	80 81       	ld	r24, Z
   12a28:	91 81       	ldd	r25, Z+1	; 0x01
   12a2a:	2e ed       	ldi	r18, 0xDE	; 222
   12a2c:	8d 3a       	cpi	r24, 0xAD	; 173
   12a2e:	92 07       	cpc	r25, r18
   12a30:	11 f0       	breq	.+4      	; 0x12a36 <arb_yieldFromSignalIntsOff+0xba>
   {
      arb_stackOverflow();
   12a32:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12a36:	e0 91 81 27 	lds	r30, 0x2781
   12a3a:	f0 91 82 27 	lds	r31, 0x2782
   12a3e:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12a40:	e0 91 fe 22 	lds	r30, 0x22FE
   12a44:	f0 91 ff 22 	lds	r31, 0x22FF
   12a48:	06 80       	ldd	r0, Z+6	; 0x06
   12a4a:	f7 81       	ldd	r31, Z+7	; 0x07
   12a4c:	e0 2d       	mov	r30, r0
   12a4e:	01 90       	ld	r0, Z+
   12a50:	f0 81       	ld	r31, Z
   12a52:	e0 2d       	mov	r30, r0
   12a54:	e0 93 7f 27 	sts	0x277F, r30
   12a58:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12a5c:	81 85       	ldd	r24, Z+9	; 0x09
   12a5e:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12a60:	82 85       	ldd	r24, Z+10	; 0x0a
   12a62:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12a64:	ff 91       	pop	r31
      asm( "pop r30");
   12a66:	ef 91       	pop	r30
      asm( "pop r29");
   12a68:	df 91       	pop	r29
      asm( "pop r28");
   12a6a:	cf 91       	pop	r28
      asm( "pop r27");
   12a6c:	bf 91       	pop	r27
      asm( "pop r26");
   12a6e:	af 91       	pop	r26
      asm( "pop r25");
   12a70:	9f 91       	pop	r25
      asm( "pop r24");
   12a72:	8f 91       	pop	r24
      asm( "pop r23");
   12a74:	7f 91       	pop	r23
      asm( "pop r22");
   12a76:	6f 91       	pop	r22
      asm( "pop r21");
   12a78:	5f 91       	pop	r21
      asm( "pop r20");
   12a7a:	4f 91       	pop	r20
      asm( "pop r19");
   12a7c:	3f 91       	pop	r19
      asm( "pop r18");
   12a7e:	2f 91       	pop	r18
      asm( "pop r17");
   12a80:	1f 91       	pop	r17
      asm( "pop r16");
   12a82:	0f 91       	pop	r16
      asm( "pop r15");
   12a84:	ff 90       	pop	r15
      asm( "pop r14");
   12a86:	ef 90       	pop	r14
      asm( "pop r13");
   12a88:	df 90       	pop	r13
      asm( "pop r12");
   12a8a:	cf 90       	pop	r12
      asm( "pop r11");
   12a8c:	bf 90       	pop	r11
      asm( "pop r10");
   12a8e:	af 90       	pop	r10
      asm( "pop r9");
   12a90:	9f 90       	pop	r9
      asm( "pop r8");
   12a92:	8f 90       	pop	r8
      asm( "pop r7");
   12a94:	7f 90       	pop	r7
      asm( "pop r6");
   12a96:	6f 90       	pop	r6
      asm( "pop r5");
   12a98:	5f 90       	pop	r5
      asm( "pop r4");
   12a9a:	4f 90       	pop	r4
      asm( "pop r3");
   12a9c:	3f 90       	pop	r3
      asm( "pop r2");
   12a9e:	2f 90       	pop	r2
      asm( "pop r1");
   12aa0:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12aa2:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12aa4:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12aa6:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   12aa8:	08 95       	ret

00012aaa <arb_yieldFromWaitIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12aaa:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12aac:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   12aae:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   12ab0:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   12ab2:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   12ab4:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   12ab6:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   12ab8:	0f 92       	push	r0
      asm( "push r1");
   12aba:	1f 92       	push	r1
      asm( "clr r1");
   12abc:	11 24       	eor	r1, r1
      asm( "push r2");
   12abe:	2f 92       	push	r2
      asm( "push r3");
   12ac0:	3f 92       	push	r3
      asm( "push r4");
   12ac2:	4f 92       	push	r4
      asm( "push r5");
   12ac4:	5f 92       	push	r5
      asm( "push r6");
   12ac6:	6f 92       	push	r6
      asm( "push r7");
   12ac8:	7f 92       	push	r7
      asm( "push r8");
   12aca:	8f 92       	push	r8
      asm( "push r9");
   12acc:	9f 92       	push	r9
      asm( "push r10");
   12ace:	af 92       	push	r10
      asm( "push r11");
   12ad0:	bf 92       	push	r11
      asm( "push r12");
   12ad2:	cf 92       	push	r12
      asm( "push r13");
   12ad4:	df 92       	push	r13
      asm( "push r14");
   12ad6:	ef 92       	push	r14
      asm( "push r15");
   12ad8:	ff 92       	push	r15
      asm( "push r16");
   12ada:	0f 93       	push	r16
      asm( "push r17");
   12adc:	1f 93       	push	r17
      asm( "push r18");
   12ade:	2f 93       	push	r18
      asm( "push r19");
   12ae0:	3f 93       	push	r19
      asm( "push r20");
   12ae2:	4f 93       	push	r20
      asm( "push r21");
   12ae4:	5f 93       	push	r21
      asm( "push r22");
   12ae6:	6f 93       	push	r22
      asm( "push r23");
   12ae8:	7f 93       	push	r23
      asm( "push r24");
   12aea:	8f 93       	push	r24
      asm( "push r25");
   12aec:	9f 93       	push	r25
      asm( "push r26");
   12aee:	af 93       	push	r26
      asm( "push r27");
   12af0:	bf 93       	push	r27
      asm( "push r28");
   12af2:	cf 93       	push	r28
      asm( "push r29");
   12af4:	df 93       	push	r29
      asm( "push r30");
   12af6:	ef 93       	push	r30
      asm( "push r31");
   12af8:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12afa:	e0 91 fe 22 	lds	r30, 0x22FE
   12afe:	f0 91 ff 22 	lds	r31, 0x22FF
   12b02:	06 80       	ldd	r0, Z+6	; 0x06
   12b04:	f7 81       	ldd	r31, Z+7	; 0x07
   12b06:	e0 2d       	mov	r30, r0
   12b08:	01 90       	ld	r0, Z+
   12b0a:	f0 81       	ld	r31, Z
   12b0c:	e0 2d       	mov	r30, r0
   12b0e:	e0 93 7f 27 	sts	0x277F, r30
   12b12:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   12b16:	2d b7       	in	r18, 0x3d	; 61
   12b18:	30 e0       	ldi	r19, 0x00	; 0
   12b1a:	21 87       	std	Z+9, r18	; 0x09
   12b1c:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   12b1e:	4e b7       	in	r20, 0x3e	; 62
   12b20:	94 2f       	mov	r25, r20
   12b22:	80 e0       	ldi	r24, 0x00	; 0
   12b24:	82 2b       	or	r24, r18
   12b26:	93 2b       	or	r25, r19
   12b28:	81 87       	std	Z+9, r24	; 0x09
   12b2a:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   12b2c:	8f ef       	ldi	r24, 0xFF	; 255
   12b2e:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   12b30:	8f e3       	ldi	r24, 0x3F	; 63
   12b32:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   12b34:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12b38:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12b3c:	e0 91 fe 22 	lds	r30, 0x22FE
   12b40:	f0 91 ff 22 	lds	r31, 0x22FF
   12b44:	06 80       	ldd	r0, Z+6	; 0x06
   12b46:	f7 81       	ldd	r31, Z+7	; 0x07
   12b48:	e0 2d       	mov	r30, r0
   12b4a:	01 90       	ld	r0, Z+
   12b4c:	f0 81       	ld	r31, Z
   12b4e:	e0 2d       	mov	r30, r0
   12b50:	e0 93 49 27 	sts	0x2749, r30
   12b54:	f0 93 4a 27 	sts	0x274A, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12b58:	03 84       	ldd	r0, Z+11	; 0x0b
   12b5a:	f4 85       	ldd	r31, Z+12	; 0x0c
   12b5c:	e0 2d       	mov	r30, r0
   12b5e:	80 81       	ld	r24, Z
   12b60:	91 81       	ldd	r25, Z+1	; 0x01
   12b62:	2e ed       	ldi	r18, 0xDE	; 222
   12b64:	8d 3a       	cpi	r24, 0xAD	; 173
   12b66:	92 07       	cpc	r25, r18
   12b68:	11 f0       	breq	.+4      	; 0x12b6e <arb_yieldFromWaitIntsOn+0xc4>
   {
      arb_stackOverflow();
   12b6a:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status to BLOCKED.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = BLOCKED;
   12b6e:	e0 91 49 27 	lds	r30, 0x2749
   12b72:	f0 91 4a 27 	lds	r31, 0x274A
   12b76:	82 e0       	ldi	r24, 0x02	; 2
   12b78:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   12b7a:	80 91 fe 22 	lds	r24, 0x22FE
   12b7e:	90 91 ff 22 	lds	r25, 0x22FF
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));
   12b82:	e0 91 fe 22 	lds	r30, 0x22FE
   12b86:	f0 91 ff 22 	lds	r31, 0x22FF
   gpt_temp->t_status = BLOCKED;

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   12b8a:	66 81       	ldd	r22, Z+6	; 0x06
   12b8c:	77 81       	ldd	r23, Z+7	; 0x07
   12b8e:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
   12b92:	80 93 4b 27 	sts	0x274B, r24
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   12b96:	e0 91 47 27 	lds	r30, 0x2747
   12b9a:	f0 91 48 27 	lds	r31, 0x2748
   12b9e:	83 81       	ldd	r24, Z+3	; 0x03
   12ba0:	94 81       	ldd	r25, Z+4	; 0x04
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads),
   12ba2:	e0 91 fe 22 	lds	r30, 0x22FE
   12ba6:	f0 91 ff 22 	lds	r31, 0x22FF
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   12baa:	66 81       	ldd	r22, Z+6	; 0x06
   12bac:	77 81       	ldd	r23, Z+7	; 0x07
   12bae:	41 e0       	ldi	r20, 0x01	; 1
   12bb0:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   12bb4:	80 93 4b 27 	sts	0x274B, r24
                                  true);

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12bb8:	e0 91 81 27 	lds	r30, 0x2781
   12bbc:	f0 91 82 27 	lds	r31, 0x2782
   12bc0:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12bc2:	e0 91 fe 22 	lds	r30, 0x22FE
   12bc6:	f0 91 ff 22 	lds	r31, 0x22FF
   12bca:	06 80       	ldd	r0, Z+6	; 0x06
   12bcc:	f7 81       	ldd	r31, Z+7	; 0x07
   12bce:	e0 2d       	mov	r30, r0
   12bd0:	01 90       	ld	r0, Z+
   12bd2:	f0 81       	ld	r31, Z
   12bd4:	e0 2d       	mov	r30, r0
   12bd6:	e0 93 7f 27 	sts	0x277F, r30
   12bda:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12bde:	81 85       	ldd	r24, Z+9	; 0x09
   12be0:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12be2:	82 85       	ldd	r24, Z+10	; 0x0a
   12be4:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12be6:	ff 91       	pop	r31
      asm( "pop r30");
   12be8:	ef 91       	pop	r30
      asm( "pop r29");
   12bea:	df 91       	pop	r29
      asm( "pop r28");
   12bec:	cf 91       	pop	r28
      asm( "pop r27");
   12bee:	bf 91       	pop	r27
      asm( "pop r26");
   12bf0:	af 91       	pop	r26
      asm( "pop r25");
   12bf2:	9f 91       	pop	r25
      asm( "pop r24");
   12bf4:	8f 91       	pop	r24
      asm( "pop r23");
   12bf6:	7f 91       	pop	r23
      asm( "pop r22");
   12bf8:	6f 91       	pop	r22
      asm( "pop r21");
   12bfa:	5f 91       	pop	r21
      asm( "pop r20");
   12bfc:	4f 91       	pop	r20
      asm( "pop r19");
   12bfe:	3f 91       	pop	r19
      asm( "pop r18");
   12c00:	2f 91       	pop	r18
      asm( "pop r17");
   12c02:	1f 91       	pop	r17
      asm( "pop r16");
   12c04:	0f 91       	pop	r16
      asm( "pop r15");
   12c06:	ff 90       	pop	r15
      asm( "pop r14");
   12c08:	ef 90       	pop	r14
      asm( "pop r13");
   12c0a:	df 90       	pop	r13
      asm( "pop r12");
   12c0c:	cf 90       	pop	r12
      asm( "pop r11");
   12c0e:	bf 90       	pop	r11
      asm( "pop r10");
   12c10:	af 90       	pop	r10
      asm( "pop r9");
   12c12:	9f 90       	pop	r9
      asm( "pop r8");
   12c14:	8f 90       	pop	r8
      asm( "pop r7");
   12c16:	7f 90       	pop	r7
      asm( "pop r6");
   12c18:	6f 90       	pop	r6
      asm( "pop r5");
   12c1a:	5f 90       	pop	r5
      asm( "pop r4");
   12c1c:	4f 90       	pop	r4
      asm( "pop r3");
   12c1e:	3f 90       	pop	r3
      asm( "pop r2");
   12c20:	2f 90       	pop	r2
      asm( "pop r1");
   12c22:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12c24:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12c26:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12c28:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
	HAL_RET();
   12c2a:	08 95       	ret

00012c2c <arb_yieldFromWaitIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12c2c:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12c2e:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   12c30:	0f 92       	push	r0
      asm( "push r1");
   12c32:	1f 92       	push	r1
      asm( "clr r1");
   12c34:	11 24       	eor	r1, r1
      asm( "push r2");
   12c36:	2f 92       	push	r2
      asm( "push r3");
   12c38:	3f 92       	push	r3
      asm( "push r4");
   12c3a:	4f 92       	push	r4
      asm( "push r5");
   12c3c:	5f 92       	push	r5
      asm( "push r6");
   12c3e:	6f 92       	push	r6
      asm( "push r7");
   12c40:	7f 92       	push	r7
      asm( "push r8");
   12c42:	8f 92       	push	r8
      asm( "push r9");
   12c44:	9f 92       	push	r9
      asm( "push r10");
   12c46:	af 92       	push	r10
      asm( "push r11");
   12c48:	bf 92       	push	r11
      asm( "push r12");
   12c4a:	cf 92       	push	r12
      asm( "push r13");
   12c4c:	df 92       	push	r13
      asm( "push r14");
   12c4e:	ef 92       	push	r14
      asm( "push r15");
   12c50:	ff 92       	push	r15
      asm( "push r16");
   12c52:	0f 93       	push	r16
      asm( "push r17");
   12c54:	1f 93       	push	r17
      asm( "push r18");
   12c56:	2f 93       	push	r18
      asm( "push r19");
   12c58:	3f 93       	push	r19
      asm( "push r20");
   12c5a:	4f 93       	push	r20
      asm( "push r21");
   12c5c:	5f 93       	push	r21
      asm( "push r22");
   12c5e:	6f 93       	push	r22
      asm( "push r23");
   12c60:	7f 93       	push	r23
      asm( "push r24");
   12c62:	8f 93       	push	r24
      asm( "push r25");
   12c64:	9f 93       	push	r25
      asm( "push r26");
   12c66:	af 93       	push	r26
      asm( "push r27");
   12c68:	bf 93       	push	r27
      asm( "push r28");
   12c6a:	cf 93       	push	r28
      asm( "push r29");
   12c6c:	df 93       	push	r29
      asm( "push r30");
   12c6e:	ef 93       	push	r30
      asm( "push r31");
   12c70:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12c72:	e0 91 fe 22 	lds	r30, 0x22FE
   12c76:	f0 91 ff 22 	lds	r31, 0x22FF
   12c7a:	06 80       	ldd	r0, Z+6	; 0x06
   12c7c:	f7 81       	ldd	r31, Z+7	; 0x07
   12c7e:	e0 2d       	mov	r30, r0
   12c80:	01 90       	ld	r0, Z+
   12c82:	f0 81       	ld	r31, Z
   12c84:	e0 2d       	mov	r30, r0
   12c86:	e0 93 7f 27 	sts	0x277F, r30
   12c8a:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   12c8e:	2d b7       	in	r18, 0x3d	; 61
   12c90:	30 e0       	ldi	r19, 0x00	; 0
   12c92:	21 87       	std	Z+9, r18	; 0x09
   12c94:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   12c96:	4e b7       	in	r20, 0x3e	; 62
   12c98:	94 2f       	mov	r25, r20
   12c9a:	80 e0       	ldi	r24, 0x00	; 0
   12c9c:	82 2b       	or	r24, r18
   12c9e:	93 2b       	or	r25, r19
   12ca0:	81 87       	std	Z+9, r24	; 0x09
   12ca2:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   12ca4:	8f ef       	ldi	r24, 0xFF	; 255
   12ca6:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   12ca8:	8f e3       	ldi	r24, 0x3F	; 63
   12caa:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   12cac:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12cb0:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12cb4:	e0 91 fe 22 	lds	r30, 0x22FE
   12cb8:	f0 91 ff 22 	lds	r31, 0x22FF
   12cbc:	06 80       	ldd	r0, Z+6	; 0x06
   12cbe:	f7 81       	ldd	r31, Z+7	; 0x07
   12cc0:	e0 2d       	mov	r30, r0
   12cc2:	01 90       	ld	r0, Z+
   12cc4:	f0 81       	ld	r31, Z
   12cc6:	e0 2d       	mov	r30, r0
   12cc8:	e0 93 49 27 	sts	0x2749, r30
   12ccc:	f0 93 4a 27 	sts	0x274A, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12cd0:	03 84       	ldd	r0, Z+11	; 0x0b
   12cd2:	f4 85       	ldd	r31, Z+12	; 0x0c
   12cd4:	e0 2d       	mov	r30, r0
   12cd6:	80 81       	ld	r24, Z
   12cd8:	91 81       	ldd	r25, Z+1	; 0x01
   12cda:	2e ed       	ldi	r18, 0xDE	; 222
   12cdc:	8d 3a       	cpi	r24, 0xAD	; 173
   12cde:	92 07       	cpc	r25, r18
   12ce0:	11 f0       	breq	.+4      	; 0x12ce6 <arb_yieldFromWaitIntsOff+0xba>
   {
      arb_stackOverflow();
   12ce2:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status to BLOCKED.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = BLOCKED;
   12ce6:	e0 91 49 27 	lds	r30, 0x2749
   12cea:	f0 91 4a 27 	lds	r31, 0x274A
   12cee:	82 e0       	ldi	r24, 0x02	; 2
   12cf0:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   12cf2:	80 91 fe 22 	lds	r24, 0x22FE
   12cf6:	90 91 ff 22 	lds	r25, 0x22FF
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));
   12cfa:	e0 91 fe 22 	lds	r30, 0x22FE
   12cfe:	f0 91 ff 22 	lds	r31, 0x22FF
   gpt_temp->t_status = BLOCKED;

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   12d02:	66 81       	ldd	r22, Z+6	; 0x06
   12d04:	77 81       	ldd	r23, Z+7	; 0x07
   12d06:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
   12d0a:	80 93 4b 27 	sts	0x274B, r24
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   12d0e:	e0 91 47 27 	lds	r30, 0x2747
   12d12:	f0 91 48 27 	lds	r31, 0x2748
   12d16:	83 81       	ldd	r24, Z+3	; 0x03
   12d18:	94 81       	ldd	r25, Z+4	; 0x04
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads),
   12d1a:	e0 91 fe 22 	lds	r30, 0x22FE
   12d1e:	f0 91 ff 22 	lds	r31, 0x22FF
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   12d22:	66 81       	ldd	r22, Z+6	; 0x06
   12d24:	77 81       	ldd	r23, Z+7	; 0x07
   12d26:	41 e0       	ldi	r20, 0x01	; 1
   12d28:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   12d2c:	80 93 4b 27 	sts	0x274B, r24
                                  true);

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12d30:	e0 91 81 27 	lds	r30, 0x2781
   12d34:	f0 91 82 27 	lds	r31, 0x2782
   12d38:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12d3a:	e0 91 fe 22 	lds	r30, 0x22FE
   12d3e:	f0 91 ff 22 	lds	r31, 0x22FF
   12d42:	06 80       	ldd	r0, Z+6	; 0x06
   12d44:	f7 81       	ldd	r31, Z+7	; 0x07
   12d46:	e0 2d       	mov	r30, r0
   12d48:	01 90       	ld	r0, Z+
   12d4a:	f0 81       	ld	r31, Z
   12d4c:	e0 2d       	mov	r30, r0
   12d4e:	e0 93 7f 27 	sts	0x277F, r30
   12d52:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12d56:	81 85       	ldd	r24, Z+9	; 0x09
   12d58:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12d5a:	82 85       	ldd	r24, Z+10	; 0x0a
   12d5c:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12d5e:	ff 91       	pop	r31
      asm( "pop r30");
   12d60:	ef 91       	pop	r30
      asm( "pop r29");
   12d62:	df 91       	pop	r29
      asm( "pop r28");
   12d64:	cf 91       	pop	r28
      asm( "pop r27");
   12d66:	bf 91       	pop	r27
      asm( "pop r26");
   12d68:	af 91       	pop	r26
      asm( "pop r25");
   12d6a:	9f 91       	pop	r25
      asm( "pop r24");
   12d6c:	8f 91       	pop	r24
      asm( "pop r23");
   12d6e:	7f 91       	pop	r23
      asm( "pop r22");
   12d70:	6f 91       	pop	r22
      asm( "pop r21");
   12d72:	5f 91       	pop	r21
      asm( "pop r20");
   12d74:	4f 91       	pop	r20
      asm( "pop r19");
   12d76:	3f 91       	pop	r19
      asm( "pop r18");
   12d78:	2f 91       	pop	r18
      asm( "pop r17");
   12d7a:	1f 91       	pop	r17
      asm( "pop r16");
   12d7c:	0f 91       	pop	r16
      asm( "pop r15");
   12d7e:	ff 90       	pop	r15
      asm( "pop r14");
   12d80:	ef 90       	pop	r14
      asm( "pop r13");
   12d82:	df 90       	pop	r13
      asm( "pop r12");
   12d84:	cf 90       	pop	r12
      asm( "pop r11");
   12d86:	bf 90       	pop	r11
      asm( "pop r10");
   12d88:	af 90       	pop	r10
      asm( "pop r9");
   12d8a:	9f 90       	pop	r9
      asm( "pop r8");
   12d8c:	8f 90       	pop	r8
      asm( "pop r7");
   12d8e:	7f 90       	pop	r7
      asm( "pop r6");
   12d90:	6f 90       	pop	r6
      asm( "pop r5");
   12d92:	5f 90       	pop	r5
      asm( "pop r4");
   12d94:	4f 90       	pop	r4
      asm( "pop r3");
   12d96:	3f 90       	pop	r3
      asm( "pop r2");
   12d98:	2f 90       	pop	r2
      asm( "pop r1");
   12d9a:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12d9c:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12d9e:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12da0:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
	HAL_RET();
   12da2:	08 95       	ret

00012da4 <arb_wait>:

}/*End arb_yieldFromWaitIntsOff*/

t_error arb_wait( t_SEMHANDLE t_semHandle,
                  t_semMode t_mode)
{
   12da4:	cf 93       	push	r28
   12da6:	df 93       	push	r29
   12da8:	0f 92       	push	r0
   12daa:	0f 92       	push	r0
   12dac:	cd b7       	in	r28, 0x3d	; 61
   12dae:	de b7       	in	r29, 0x3e	; 62
   12db0:	89 83       	std	Y+1, r24	; 0x01
   12db2:	9a 83       	std	Y+2, r25	; 0x02
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   12db4:	0f b6       	in	r0, 0x3f	; 63
   12db6:	07 fe       	sbrs	r0, 7
   12db8:	31 c0       	rjmp	.+98     	; 0x12e1c <arb_wait+0x78>
   {

      /*---------------------------------------------------------------------*
       * Perform mutual exclusion.
       *---------------------------------------------------------------------*/
      HAL_CLI();
   12dba:	f8 94       	cli

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   12dbc:	e9 81       	ldd	r30, Y+1	; 0x01
   12dbe:	fa 81       	ldd	r31, Y+2	; 0x02
   12dc0:	80 91 ef 22 	lds	r24, 0x22EF
   12dc4:	90 91 f0 22 	lds	r25, 0x22F0
   12dc8:	24 81       	ldd	r18, Z+4	; 0x04
   12dca:	35 81       	ldd	r19, Z+5	; 0x05
   12dcc:	28 17       	cp	r18, r24
   12dce:	39 07       	cpc	r19, r25
   12dd0:	11 f0       	breq	.+4      	; 0x12dd6 <arb_wait+0x32>
      false)
      {
         HAL_SEI();
   12dd2:	78 94       	sei
   12dd4:	4f c0       	rjmp	.+158    	; 0x12e74 <arb_wait+0xd0>
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   12dd6:	e9 81       	ldd	r30, Y+1	; 0x01
   12dd8:	fa 81       	ldd	r31, Y+2	; 0x02
   12dda:	01 90       	ld	r0, Z+
   12ddc:	f0 81       	ld	r31, Z
   12dde:	e0 2d       	mov	r30, r0
   12de0:	e0 93 47 27 	sts	0x2747, r30
   12de4:	f0 93 48 27 	sts	0x2748, r31
   12de8:	81 81       	ldd	r24, Z+1	; 0x01
   12dea:	92 81       	ldd	r25, Z+2	; 0x02
      t_semHandle);

      if( t_mode == BLOCKING)
   12dec:	66 23       	and	r22, r22
   12dee:	61 f4       	brne	.+24     	; 0x12e08 <arb_wait+0x64>
      {
         /*------------------------------------------------------------------*
          * Decrement the waiting count.
          *------------------------------------------------------------------*/
         gpt_currentSem->s_count--;
   12df0:	01 97       	sbiw	r24, 0x01	; 1
   12df2:	81 83       	std	Z+1, r24	; 0x01
   12df4:	92 83       	std	Z+2, r25	; 0x02

         /*------------------------------------------------------------------*
          * Is it time for this thread to be blocked?
          *------------------------------------------------------------------*/
         if( gpt_currentSem->s_count < 0) /*Yes, block process*/
   12df6:	97 ff       	sbrs	r25, 7
   12df8:	0d c0       	rjmp	.+26     	; 0x12e14 <arb_wait+0x70>
         {
            /*---------------------------------------------------------------*
             * Record the maximum time this thread will wait on this semaphore
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   12dfa:	80 91 fe 22 	lds	r24, 0x22FE
   12dfe:	90 91 ff 22 	lds	r25, 0x22FF
             * Since we previously disabled interrupts this yield call saves
             * the contents of the SREG with the GIE bit enabled. It assumes
             * that the thread being restored with the context save has
             * interrupts already enabled.
             *---------------------------------------------------------------*/
            arb_yieldFromWaitIntsOn();
   12e02:	0e 94 55 95 	call	0x12aaa	; 0x12aaa <arb_yieldFromWaitIntsOn>
   12e06:	2d c0       	rjmp	.+90     	; 0x12e62 <arb_wait+0xbe>
         else /*No, continue process*/
            HAL_SEI(); /*Enable interrupts*/
      }
      else /*Non blocking*/
      {
         if( gpt_currentSem->s_count > 0)
   12e08:	18 16       	cp	r1, r24
   12e0a:	19 06       	cpc	r1, r25
   12e0c:	2c f4       	brge	.+10     	; 0x12e18 <arb_wait+0x74>
         {
            gpt_currentSem->s_count--;
   12e0e:	01 97       	sbiw	r24, 0x01	; 1
   12e10:	81 83       	std	Z+1, r24	; 0x01
   12e12:	92 83       	std	Z+2, r25	; 0x02
            HAL_SEI(); /*Enable interrupts*/
   12e14:	78 94       	sei
   12e16:	25 c0       	rjmp	.+74     	; 0x12e62 <arb_wait+0xbe>
         }
         else
         {
            HAL_SEI(); /*Enable interrupts*/
   12e18:	78 94       	sei
   12e1a:	2e c0       	rjmp	.+92     	; 0x12e78 <arb_wait+0xd4>

   }/*End if( HAL_ARE_INTS_EN())*/
   else
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   12e1c:	e9 81       	ldd	r30, Y+1	; 0x01
   12e1e:	fa 81       	ldd	r31, Y+2	; 0x02
   12e20:	80 91 ef 22 	lds	r24, 0x22EF
   12e24:	90 91 f0 22 	lds	r25, 0x22F0
   12e28:	24 81       	ldd	r18, Z+4	; 0x04
   12e2a:	35 81       	ldd	r19, Z+5	; 0x05
   12e2c:	28 17       	cp	r18, r24
   12e2e:	39 07       	cpc	r19, r25
   12e30:	09 f5       	brne	.+66     	; 0x12e74 <arb_wait+0xd0>
      false)
      {
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   12e32:	e9 81       	ldd	r30, Y+1	; 0x01
   12e34:	fa 81       	ldd	r31, Y+2	; 0x02
   12e36:	01 90       	ld	r0, Z+
   12e38:	f0 81       	ld	r31, Z
   12e3a:	e0 2d       	mov	r30, r0
   12e3c:	e0 93 47 27 	sts	0x2747, r30
   12e40:	f0 93 48 27 	sts	0x2748, r31
   12e44:	81 81       	ldd	r24, Z+1	; 0x01
   12e46:	92 81       	ldd	r25, Z+2	; 0x02
      t_semHandle);

      if( t_mode == BLOCKING)
   12e48:	66 23       	and	r22, r22
   12e4a:	69 f4       	brne	.+26     	; 0x12e66 <arb_wait+0xc2>
      {

         /*------------------------------------------------------------------*
          * Decrement the waiting count.
          *------------------------------------------------------------------*/
         gpt_currentSem->s_count--;
   12e4c:	01 97       	sbiw	r24, 0x01	; 1
   12e4e:	81 83       	std	Z+1, r24	; 0x01
   12e50:	92 83       	std	Z+2, r25	; 0x02

         /*------------------------------------------------------------------*
          * Is it time for this thread to be blocked?
          *------------------------------------------------------------------*/
         if( gpt_currentSem->s_count < 0) /*Yes, block process*/
   12e52:	97 ff       	sbrs	r25, 7
   12e54:	06 c0       	rjmp	.+12     	; 0x12e62 <arb_wait+0xbe>
         {
            /*---------------------------------------------------------------*
             * Record the maximum time this thread will wait on this semaphore
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   12e56:	80 91 fe 22 	lds	r24, 0x22FE
   12e5a:	90 91 ff 22 	lds	r25, 0x22FF

            /*---------------------------------------------------------------*
             * Since we previously disabled interrupts this yield call saves
             * the contents of the SREG with the GIE bit enabled.
             *---------------------------------------------------------------*/
            arb_yieldFromWaitIntsOff();
   12e5e:	0e 94 16 96 	call	0x12c2c	; 0x12c2c <arb_yieldFromWaitIntsOff>

   /*------------------------------------------------------------------------*
    * Since the call into 'wait' wasn't 'naked' we will let the compiler
    * return us to the calling thread's next program counter location.
    *------------------------------------------------------------------------*/
   return ARB_PASSED;
   12e62:	80 e0       	ldi	r24, 0x00	; 0
   12e64:	0a c0       	rjmp	.+20     	; 0x12e7a <arb_wait+0xd6>
         }/*End if( pt_semHandle->s_count < 0)*/

      }
      else /*Non blocking*/
      {
         if( gpt_currentSem->s_count > 0)
   12e66:	18 16       	cp	r1, r24
   12e68:	19 06       	cpc	r1, r25
   12e6a:	34 f4       	brge	.+12     	; 0x12e78 <arb_wait+0xd4>
         {
            gpt_currentSem->s_count--;
   12e6c:	01 97       	sbiw	r24, 0x01	; 1
   12e6e:	81 83       	std	Z+1, r24	; 0x01
   12e70:	92 83       	std	Z+2, r25	; 0x02
   12e72:	f7 cf       	rjmp	.-18     	; 0x12e62 <arb_wait+0xbe>
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
      false)
      {
         return ARB_INVALID_HANDLE;
   12e74:	89 ef       	ldi	r24, 0xF9	; 249
   12e76:	01 c0       	rjmp	.+2      	; 0x12e7a <arb_wait+0xd6>
         {
            gpt_currentSem->s_count--;
         }
         else
         {
            return ARB_SEM_DEC_ERROR; /*Failed to decrement semaphore*/
   12e78:	83 ef       	ldi	r24, 0xF3	; 243
    * Since the call into 'wait' wasn't 'naked' we will let the compiler
    * return us to the calling thread's next program counter location.
    *------------------------------------------------------------------------*/
   return ARB_PASSED;

}/*End arb_wait( )*/
   12e7a:	0f 90       	pop	r0
   12e7c:	0f 90       	pop	r0
   12e7e:	df 91       	pop	r29
   12e80:	cf 91       	pop	r28
   12e82:	08 95       	ret

00012e84 <arb_signal>:

t_error arb_signal( t_SEMHANDLE t_semHandle)
{
   12e84:	0f 93       	push	r16
   12e86:	1f 93       	push	r17
   12e88:	cf 93       	push	r28
   12e8a:	df 93       	push	r29
   12e8c:	cd b7       	in	r28, 0x3d	; 61
   12e8e:	de b7       	in	r29, 0x3e	; 62
   12e90:	28 97       	sbiw	r28, 0x08	; 8
   12e92:	cd bf       	out	0x3d, r28	; 61
   12e94:	de bf       	out	0x3e, r29	; 62
   12e96:	8f 83       	std	Y+7, r24	; 0x07
   12e98:	98 87       	std	Y+8, r25	; 0x08
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is larger enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( HAL_ARE_INTS_EN()) /*Interrupts enabled?*/
   12e9a:	0f b6       	in	r0, 0x3f	; 63
   12e9c:	07 fe       	sbrs	r0, 7
   12e9e:	d9 c0       	rjmp	.+434    	; 0x13052 <arb_signal+0x1ce>
   {
      /*---------------------------------------------------------------------*
       * Mutual exclusion
       *---------------------------------------------------------------------*/
      HAL_CLI();
   12ea0:	f8 94       	cli

      /*---------------------------------------------------------------------*
       * Is this semaphore valid?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   12ea2:	ef 81       	ldd	r30, Y+7	; 0x07
   12ea4:	f8 85       	ldd	r31, Y+8	; 0x08
   12ea6:	80 91 ef 22 	lds	r24, 0x22EF
   12eaa:	90 91 f0 22 	lds	r25, 0x22F0
   12eae:	24 81       	ldd	r18, Z+4	; 0x04
   12eb0:	35 81       	ldd	r19, Z+5	; 0x05
   12eb2:	28 17       	cp	r18, r24
   12eb4:	39 07       	cpc	r19, r25
   12eb6:	11 f0       	breq	.+4      	; 0x12ebc <arb_signal+0x38>
      false)
      {
         HAL_SEI();
   12eb8:	78 94       	sei
   12eba:	99 c1       	rjmp	.+818    	; 0x131ee <arb_signal+0x36a>
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   12ebc:	ef 81       	ldd	r30, Y+7	; 0x07
   12ebe:	f8 85       	ldd	r31, Y+8	; 0x08
   12ec0:	01 90       	ld	r0, Z+
   12ec2:	f0 81       	ld	r31, Z
   12ec4:	e0 2d       	mov	r30, r0
   12ec6:	e0 93 47 27 	sts	0x2747, r30
   12eca:	f0 93 48 27 	sts	0x2748, r31
      t_semHandle);

      /*---------------------------------------------------------------------*
       * Remove a thread from the waiting count.
       *---------------------------------------------------------------------*/
      gpt_currentSem->s_count++;
   12ece:	81 81       	ldd	r24, Z+1	; 0x01
   12ed0:	92 81       	ldd	r25, Z+2	; 0x02
   12ed2:	01 96       	adiw	r24, 0x01	; 1
   12ed4:	81 83       	std	Z+1, r24	; 0x01
   12ed6:	92 83       	std	Z+2, r25	; 0x02

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   12ed8:	18 16       	cp	r1, r24
   12eda:	19 06       	cpc	r1, r25
   12edc:	0c f4       	brge	.+2      	; 0x12ee0 <arb_signal+0x5c>
   12ede:	b7 c0       	rjmp	.+366    	; 0x1304e <arb_signal+0x1ca>
      (UTL_GET_NUM_LINKS_CONT( gpt_currentSem->t_blockedList) > 0))
   12ee0:	a3 81       	ldd	r26, Z+3	; 0x03
   12ee2:	b4 81       	ldd	r27, Z+4	; 0x04

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   12ee4:	12 96       	adiw	r26, 0x02	; 2
   12ee6:	8d 91       	ld	r24, X+
   12ee8:	9c 91       	ld	r25, X
   12eea:	13 97       	sbiw	r26, 0x03	; 3
   12eec:	00 97       	sbiw	r24, 0x00	; 0
   12eee:	09 f4       	brne	.+2      	; 0x12ef2 <arb_signal+0x6e>
   12ef0:	ae c0       	rjmp	.+348    	; 0x1304e <arb_signal+0x1ca>

         /*------------------------------------------------------------------*
          * Find the thread with the highest priority on the blocked
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
   12ef2:	a3 81       	ldd	r26, Z+3	; 0x03
   12ef4:	b4 81       	ldd	r27, Z+4	; 0x04
   12ef6:	18 96       	adiw	r26, 0x08	; 8
   12ef8:	8d 91       	ld	r24, X+
   12efa:	9c 91       	ld	r25, X
   12efc:	19 97       	sbiw	r26, 0x09	; 9
   12efe:	8b 83       	std	Y+3, r24	; 0x03
   12f00:	9c 83       	std	Y+4, r25	; 0x04
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12f02:	ab 81       	ldd	r26, Y+3	; 0x03
   12f04:	bc 81       	ldd	r27, Y+4	; 0x04
         s_highest = pt_temp->t_priority;
   12f06:	0d 90       	ld	r0, X+
   12f08:	bc 91       	ld	r27, X
   12f0a:	a0 2d       	mov	r26, r0
   12f0c:	12 96       	adiw	r26, 0x02	; 2
   12f0e:	2c 91       	ld	r18, X
   12f10:	30 e0       	ldi	r19, 0x00	; 0
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12f12:	a3 81       	ldd	r26, Z+3	; 0x03
   12f14:	b4 81       	ldd	r27, Z+4	; 0x04
   12f16:	12 96       	adiw	r26, 0x02	; 2
   12f18:	4d 91       	ld	r20, X+
   12f1a:	5c 91       	ld	r21, X
   12f1c:	13 97       	sbiw	r26, 0x03	; 3
   12f1e:	a3 81       	ldd	r26, Z+3	; 0x03
   12f20:	b4 81       	ldd	r27, Z+4	; 0x04
   12f22:	15 c0       	rjmp	.+42     	; 0x12f4e <arb_signal+0xca>
         s_count)
         {
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12f24:	ad 81       	ldd	r26, Y+5	; 0x05
   12f26:	be 81       	ldd	r27, Y+6	; 0x06
            if( pt_temp->t_priority < s_highest)
   12f28:	0d 90       	ld	r0, X+
   12f2a:	bc 91       	ld	r27, X
   12f2c:	a0 2d       	mov	r26, r0
   12f2e:	12 96       	adiw	r26, 0x02	; 2
   12f30:	8c 91       	ld	r24, X
   12f32:	12 97       	sbiw	r26, 0x02	; 2
   12f34:	90 e0       	ldi	r25, 0x00	; 0
   12f36:	82 17       	cp	r24, r18
   12f38:	93 07       	cpc	r25, r19
   12f3a:	28 f4       	brcc	.+10     	; 0x12f46 <arb_signal+0xc2>
            {
               s_highest = pt_temp->t_priority;
               t_highest = t_curr;
   12f3c:	2d 81       	ldd	r18, Y+5	; 0x05
   12f3e:	3e 81       	ldd	r19, Y+6	; 0x06
   12f40:	2b 83       	std	Y+3, r18	; 0x03
   12f42:	3c 83       	std	Y+4, r19	; 0x04
   12f44:	9c 01       	movw	r18, r24
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
         s_highest = pt_temp->t_priority;
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12f46:	41 50       	subi	r20, 0x01	; 1
   12f48:	50 40       	sbci	r21, 0x00	; 0
   12f4a:	ad 81       	ldd	r26, Y+5	; 0x05
   12f4c:	be 81       	ldd	r27, Y+6	; 0x06
   12f4e:	18 96       	adiw	r26, 0x08	; 8
   12f50:	8d 91       	ld	r24, X+
   12f52:	9c 91       	ld	r25, X
   12f54:	19 97       	sbiw	r26, 0x09	; 9
   12f56:	8d 83       	std	Y+5, r24	; 0x05
   12f58:	9e 83       	std	Y+6, r25	; 0x06
   12f5a:	41 15       	cp	r20, r1
   12f5c:	51 05       	cpc	r21, r1
   12f5e:	11 f7       	brne	.-60     	; 0x12f24 <arb_signal+0xa0>

         /*------------------------------------------------------------------*
          * Only move the highest priority thread off the blocked list and
          * insert back on the active list.
          *------------------------------------------------------------------*/
         if( gpt_currentSem->t_type != SIGNAL) /*Remove highest...*/
   12f60:	80 81       	ld	r24, Z
   12f62:	81 30       	cpi	r24, 0x01	; 1
   12f64:	b9 f0       	breq	.+46     	; 0x12f94 <arb_signal+0x110>
         {
            /*---------------------------------------------------------------*
             * Change the status of the highest priority thread on the
             * blocked list to READY.
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12f66:	ab 81       	ldd	r26, Y+3	; 0x03
   12f68:	bc 81       	ldd	r27, Y+4	; 0x04
            pt_temp->t_status = READY;
   12f6a:	0d 90       	ld	r0, X+
   12f6c:	bc 91       	ld	r27, X
   12f6e:	a0 2d       	mov	r26, r0
   12f70:	11 96       	adiw	r26, 0x01	; 1
   12f72:	1c 92       	st	X, r1

            /*---------------------------------------------------------------*
             * Remove the highest priority thread from the blocked list
             *---------------------------------------------------------------*/
            t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   12f74:	83 81       	ldd	r24, Z+3	; 0x03
   12f76:	94 81       	ldd	r25, Z+4	; 0x04
   12f78:	6b 81       	ldd	r22, Y+3	; 0x03
   12f7a:	7c 81       	ldd	r23, Y+4	; 0x04
   12f7c:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
                                          t_highest);

            /*---------------------------------------------------------------*
             * Insert this thread onto the active list.
             *---------------------------------------------------------------*/
            t_linkError = utl_insertLink( gt_activeThreads,
   12f80:	80 91 fe 22 	lds	r24, 0x22FE
   12f84:	90 91 ff 22 	lds	r25, 0x22FF
   12f88:	6b 81       	ldd	r22, Y+3	; 0x03
   12f8a:	7c 81       	ldd	r23, Y+4	; 0x04
   12f8c:	41 e0       	ldi	r20, 0x01	; 1
   12f8e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   12f92:	3d c0       	rjmp	.+122    	; 0x1300e <arb_signal+0x18a>
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12f94:	a3 81       	ldd	r26, Z+3	; 0x03
   12f96:	b4 81       	ldd	r27, Z+4	; 0x04
   12f98:	12 96       	adiw	r26, 0x02	; 2
   12f9a:	0d 91       	ld	r16, X+
   12f9c:	1c 91       	ld	r17, X
   12f9e:	13 97       	sbiw	r26, 0x03	; 3
   12fa0:	03 80       	ldd	r0, Z+3	; 0x03
   12fa2:	f4 81       	ldd	r31, Z+4	; 0x04
   12fa4:	e0 2d       	mov	r30, r0
   12fa6:	26 c0       	rjmp	.+76     	; 0x12ff4 <arb_signal+0x170>
            s_count)
            {
               pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12fa8:	ad 81       	ldd	r26, Y+5	; 0x05
   12faa:	be 81       	ldd	r27, Y+6	; 0x06

               pt_temp->t_status = READY;
   12fac:	0d 90       	ld	r0, X+
   12fae:	bc 91       	ld	r27, X
   12fb0:	a0 2d       	mov	r26, r0
   12fb2:	11 96       	adiw	r26, 0x01	; 1
   12fb4:	1c 92       	st	X, r1

               t_prevLink = UTL_GET_PREV_LINK( t_curr);
   12fb6:	ad 81       	ldd	r26, Y+5	; 0x05
   12fb8:	be 81       	ldd	r27, Y+6	; 0x06
   12fba:	1a 96       	adiw	r26, 0x0a	; 10
   12fbc:	8d 91       	ld	r24, X+
   12fbe:	9c 91       	ld	r25, X
   12fc0:	1b 97       	sbiw	r26, 0x0b	; 11
   12fc2:	89 83       	std	Y+1, r24	; 0x01
   12fc4:	9a 83       	std	Y+2, r25	; 0x02

               t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   12fc6:	83 81       	ldd	r24, Z+3	; 0x03
   12fc8:	94 81       	ldd	r25, Z+4	; 0x04
   12fca:	6d 81       	ldd	r22, Y+5	; 0x05
   12fcc:	7e 81       	ldd	r23, Y+6	; 0x06
   12fce:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
                                             t_curr);

               t_linkError = utl_insertLink( gt_activeThreads,
   12fd2:	80 91 fe 22 	lds	r24, 0x22FE
   12fd6:	90 91 ff 22 	lds	r25, 0x22FF
   12fda:	6d 81       	ldd	r22, Y+5	; 0x05
   12fdc:	7e 81       	ldd	r23, Y+6	; 0x06
   12fde:	41 e0       	ldi	r20, 0x01	; 1
   12fe0:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                                             t_curr,
                                             true);
               t_curr = t_prevLink;
   12fe4:	89 81       	ldd	r24, Y+1	; 0x01
   12fe6:	9a 81       	ldd	r25, Y+2	; 0x02
   12fe8:	8d 83       	std	Y+5, r24	; 0x05
   12fea:	9e 83       	std	Y+6, r25	; 0x06
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12fec:	01 50       	subi	r16, 0x01	; 1
   12fee:	10 40       	sbci	r17, 0x00	; 0
   12ff0:	ed 81       	ldd	r30, Y+5	; 0x05
   12ff2:	fe 81       	ldd	r31, Y+6	; 0x06
   12ff4:	80 85       	ldd	r24, Z+8	; 0x08
   12ff6:	91 85       	ldd	r25, Z+9	; 0x09
   12ff8:	8d 83       	std	Y+5, r24	; 0x05
   12ffa:	9e 83       	std	Y+6, r25	; 0x06
   12ffc:	e0 91 47 27 	lds	r30, 0x2747
   13000:	f0 91 48 27 	lds	r31, 0x2748
   13004:	01 15       	cp	r16, r1
   13006:	11 05       	cpc	r17, r1
   13008:	79 f6       	brne	.-98     	; 0x12fa8 <arb_signal+0x124>

            /*---------------------------------------------------------------*
             * Since we removed all the threads from the blocked list, set
             * the count back to 0.
             *---------------------------------------------------------------*/
            gpt_currentSem->s_count = 0;
   1300a:	11 82       	std	Z+1, r1	; 0x01
   1300c:	12 82       	std	Z+2, r1	; 0x02
         /*------------------------------------------------------------------*
          * If the highest priority thread we removed from the BLOCKED list
          * has a higher priority then the current running thread then
          * suspend the current thread.
          *------------------------------------------------------------------*/
         pt_temp  = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   1300e:	ab 81       	ldd	r26, Y+3	; 0x03
   13010:	bc 81       	ldd	r27, Y+4	; 0x04
         pt_temp2 = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   13012:	e0 91 fe 22 	lds	r30, 0x22FE
   13016:	f0 91 ff 22 	lds	r31, 0x22FF
   1301a:	06 80       	ldd	r0, Z+6	; 0x06
   1301c:	f7 81       	ldd	r31, Z+7	; 0x07
   1301e:	e0 2d       	mov	r30, r0
   13020:	01 90       	ld	r0, Z+
   13022:	f0 81       	ld	r31, Z
   13024:	e0 2d       	mov	r30, r0
         (gt_activeThreads);
         if( pt_temp->t_priority <= pt_temp2->t_priority)
   13026:	0d 90       	ld	r0, X+
   13028:	bc 91       	ld	r27, X
   1302a:	a0 2d       	mov	r26, r0
   1302c:	12 96       	adiw	r26, 0x02	; 2
   1302e:	9c 91       	ld	r25, X
   13030:	12 97       	sbiw	r26, 0x02	; 2
   13032:	82 81       	ldd	r24, Z+2	; 0x02
   13034:	89 17       	cp	r24, r25
   13036:	58 f0       	brcs	.+22     	; 0x1304e <arb_signal+0x1ca>
         {

            /*---------------------------------------------------------------*
             * Change the status of the current thread from active to READY.
             *---------------------------------------------------------------*/
            pt_temp2->t_status = READY;
   13038:	11 82       	std	Z+1, r1	; 0x01
             * thread. Calling yield will cause the signaling thread to
             * give up its time slice and allow the next higher priority
             * thread (which should be the one we just removed from the
             * BLOCKED list) to run.
             *---------------------------------------------------------------*/
            if( HAL_IS_ACTIVE_INT() > 0)
   1303a:	80 91 a0 00 	lds	r24, 0x00A0
   1303e:	88 23       	and	r24, r24
   13040:	19 f0       	breq	.+6      	; 0x13048 <arb_signal+0x1c4>
               /*------------------------------------------------------------*
                * This routine was called from an active interrupt.
                * Therefore, we are calling a special yield function that
                * re enables interrupts when it switches in a new thread.
                *------------------------------------------------------------*/
               arb_yieldFromSignalActiveInt();
   13042:	0e 94 86 93 	call	0x1270c	; 0x1270c <arb_yieldFromSignalActiveInt>
   13046:	d5 c0       	rjmp	.+426    	; 0x131f2 <arb_signal+0x36e>
            }/*End if( HAL_IS_ACTIVE_INT > 0)*/
            else
            {
               arb_yieldFromSignalIntsOn();
   13048:	0e 94 22 94 	call	0x12844	; 0x12844 <arb_yieldFromSignalIntsOn>
   1304c:	d2 c0       	rjmp	.+420    	; 0x131f2 <arb_signal+0x36e>
         }

      }/*End if( gpt_currentSem->s_count <= 0)*/
      else
      {
         HAL_SEI();
   1304e:	78 94       	sei
   13050:	d0 c0       	rjmp	.+416    	; 0x131f2 <arb_signal+0x36e>

   }/*End if( HAL_ARE_INTS_EN())*/
   else
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   13052:	ef 81       	ldd	r30, Y+7	; 0x07
   13054:	f8 85       	ldd	r31, Y+8	; 0x08
   13056:	80 91 ef 22 	lds	r24, 0x22EF
   1305a:	90 91 f0 22 	lds	r25, 0x22F0
   1305e:	24 81       	ldd	r18, Z+4	; 0x04
   13060:	35 81       	ldd	r19, Z+5	; 0x05
   13062:	28 17       	cp	r18, r24
   13064:	39 07       	cpc	r19, r25
   13066:	09 f0       	breq	.+2      	; 0x1306a <arb_signal+0x1e6>
   13068:	c2 c0       	rjmp	.+388    	; 0x131ee <arb_signal+0x36a>
      false)
      {
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   1306a:	ef 81       	ldd	r30, Y+7	; 0x07
   1306c:	f8 85       	ldd	r31, Y+8	; 0x08
   1306e:	01 90       	ld	r0, Z+
   13070:	f0 81       	ld	r31, Z
   13072:	e0 2d       	mov	r30, r0
   13074:	e0 93 47 27 	sts	0x2747, r30
   13078:	f0 93 48 27 	sts	0x2748, r31
      t_semHandle);

      /*---------------------------------------------------------------------*
       * Remove a thread from the waiting count.
       *---------------------------------------------------------------------*/
      gpt_currentSem->s_count++;
   1307c:	81 81       	ldd	r24, Z+1	; 0x01
   1307e:	92 81       	ldd	r25, Z+2	; 0x02
   13080:	01 96       	adiw	r24, 0x01	; 1
   13082:	81 83       	std	Z+1, r24	; 0x01
   13084:	92 83       	std	Z+2, r25	; 0x02

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   13086:	18 16       	cp	r1, r24
   13088:	19 06       	cpc	r1, r25
   1308a:	0c f4       	brge	.+2      	; 0x1308e <arb_signal+0x20a>
   1308c:	b2 c0       	rjmp	.+356    	; 0x131f2 <arb_signal+0x36e>
      (UTL_GET_NUM_LINKS_CONT( gpt_currentSem->t_blockedList) > 0))
   1308e:	a3 81       	ldd	r26, Z+3	; 0x03
   13090:	b4 81       	ldd	r27, Z+4	; 0x04

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   13092:	12 96       	adiw	r26, 0x02	; 2
   13094:	8d 91       	ld	r24, X+
   13096:	9c 91       	ld	r25, X
   13098:	13 97       	sbiw	r26, 0x03	; 3
   1309a:	00 97       	sbiw	r24, 0x00	; 0
   1309c:	09 f4       	brne	.+2      	; 0x130a0 <arb_signal+0x21c>
   1309e:	a9 c0       	rjmp	.+338    	; 0x131f2 <arb_signal+0x36e>
      {
         /*------------------------------------------------------------------*
          * Find the thread with the highest priority on the blocked
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
   130a0:	a3 81       	ldd	r26, Z+3	; 0x03
   130a2:	b4 81       	ldd	r27, Z+4	; 0x04
   130a4:	18 96       	adiw	r26, 0x08	; 8
   130a6:	8d 91       	ld	r24, X+
   130a8:	9c 91       	ld	r25, X
   130aa:	19 97       	sbiw	r26, 0x09	; 9
   130ac:	8b 83       	std	Y+3, r24	; 0x03
   130ae:	9c 83       	std	Y+4, r25	; 0x04
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   130b0:	ab 81       	ldd	r26, Y+3	; 0x03
   130b2:	bc 81       	ldd	r27, Y+4	; 0x04
         s_highest = pt_temp->t_priority;
   130b4:	0d 90       	ld	r0, X+
   130b6:	bc 91       	ld	r27, X
   130b8:	a0 2d       	mov	r26, r0
   130ba:	12 96       	adiw	r26, 0x02	; 2
   130bc:	2c 91       	ld	r18, X
   130be:	30 e0       	ldi	r19, 0x00	; 0
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   130c0:	a3 81       	ldd	r26, Z+3	; 0x03
   130c2:	b4 81       	ldd	r27, Z+4	; 0x04
   130c4:	12 96       	adiw	r26, 0x02	; 2
   130c6:	4d 91       	ld	r20, X+
   130c8:	5c 91       	ld	r21, X
   130ca:	13 97       	sbiw	r26, 0x03	; 3
   130cc:	a3 81       	ldd	r26, Z+3	; 0x03
   130ce:	b4 81       	ldd	r27, Z+4	; 0x04
   130d0:	15 c0       	rjmp	.+42     	; 0x130fc <arb_signal+0x278>
         s_count)
         {
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   130d2:	ad 81       	ldd	r26, Y+5	; 0x05
   130d4:	be 81       	ldd	r27, Y+6	; 0x06
            if( pt_temp->t_priority < s_highest)
   130d6:	0d 90       	ld	r0, X+
   130d8:	bc 91       	ld	r27, X
   130da:	a0 2d       	mov	r26, r0
   130dc:	12 96       	adiw	r26, 0x02	; 2
   130de:	8c 91       	ld	r24, X
   130e0:	12 97       	sbiw	r26, 0x02	; 2
   130e2:	90 e0       	ldi	r25, 0x00	; 0
   130e4:	82 17       	cp	r24, r18
   130e6:	93 07       	cpc	r25, r19
   130e8:	28 f4       	brcc	.+10     	; 0x130f4 <arb_signal+0x270>
            {
               s_highest = pt_temp->t_priority;
               t_highest = t_curr;
   130ea:	2d 81       	ldd	r18, Y+5	; 0x05
   130ec:	3e 81       	ldd	r19, Y+6	; 0x06
   130ee:	2b 83       	std	Y+3, r18	; 0x03
   130f0:	3c 83       	std	Y+4, r19	; 0x04
   130f2:	9c 01       	movw	r18, r24
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
         s_highest = pt_temp->t_priority;
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   130f4:	41 50       	subi	r20, 0x01	; 1
   130f6:	50 40       	sbci	r21, 0x00	; 0
   130f8:	ad 81       	ldd	r26, Y+5	; 0x05
   130fa:	be 81       	ldd	r27, Y+6	; 0x06
   130fc:	18 96       	adiw	r26, 0x08	; 8
   130fe:	8d 91       	ld	r24, X+
   13100:	9c 91       	ld	r25, X
   13102:	19 97       	sbiw	r26, 0x09	; 9
   13104:	8d 83       	std	Y+5, r24	; 0x05
   13106:	9e 83       	std	Y+6, r25	; 0x06
   13108:	41 15       	cp	r20, r1
   1310a:	51 05       	cpc	r21, r1
   1310c:	11 f7       	brne	.-60     	; 0x130d2 <arb_signal+0x24e>

         /*------------------------------------------------------------------*
          * Only move the highest priority thread off the blocked list and
          * insert back on the active list.
          *------------------------------------------------------------------*/
         if( gpt_currentSem->t_type != SIGNAL)
   1310e:	80 81       	ld	r24, Z
   13110:	81 30       	cpi	r24, 0x01	; 1
   13112:	b9 f0       	breq	.+46     	; 0x13142 <arb_signal+0x2be>
         {
            /*---------------------------------------------------------------*
             * Change the status of the highest priority thread on the
             * blocked list to READY.
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   13114:	ab 81       	ldd	r26, Y+3	; 0x03
   13116:	bc 81       	ldd	r27, Y+4	; 0x04
            pt_temp->t_status = READY;
   13118:	0d 90       	ld	r0, X+
   1311a:	bc 91       	ld	r27, X
   1311c:	a0 2d       	mov	r26, r0
   1311e:	11 96       	adiw	r26, 0x01	; 1
   13120:	1c 92       	st	X, r1

            /*---------------------------------------------------------------*
             * Remove the highest priority thread from the blocked list
             *---------------------------------------------------------------*/
            t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   13122:	83 81       	ldd	r24, Z+3	; 0x03
   13124:	94 81       	ldd	r25, Z+4	; 0x04
   13126:	6b 81       	ldd	r22, Y+3	; 0x03
   13128:	7c 81       	ldd	r23, Y+4	; 0x04
   1312a:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
                                          t_highest);

            /*---------------------------------------------------------------*
             * Insert this thread onto the active list.
             *---------------------------------------------------------------*/
            t_linkError = utl_insertLink( gt_activeThreads,
   1312e:	80 91 fe 22 	lds	r24, 0x22FE
   13132:	90 91 ff 22 	lds	r25, 0x22FF
   13136:	6b 81       	ldd	r22, Y+3	; 0x03
   13138:	7c 81       	ldd	r23, Y+4	; 0x04
   1313a:	41 e0       	ldi	r20, 0x01	; 1
   1313c:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
   13140:	3d c0       	rjmp	.+122    	; 0x131bc <arb_signal+0x338>
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   13142:	a3 81       	ldd	r26, Z+3	; 0x03
   13144:	b4 81       	ldd	r27, Z+4	; 0x04
   13146:	12 96       	adiw	r26, 0x02	; 2
   13148:	0d 91       	ld	r16, X+
   1314a:	1c 91       	ld	r17, X
   1314c:	13 97       	sbiw	r26, 0x03	; 3
   1314e:	03 80       	ldd	r0, Z+3	; 0x03
   13150:	f4 81       	ldd	r31, Z+4	; 0x04
   13152:	e0 2d       	mov	r30, r0
   13154:	26 c0       	rjmp	.+76     	; 0x131a2 <arb_signal+0x31e>
            s_count)
            {
               pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   13156:	ad 81       	ldd	r26, Y+5	; 0x05
   13158:	be 81       	ldd	r27, Y+6	; 0x06

               pt_temp->t_status = READY;
   1315a:	0d 90       	ld	r0, X+
   1315c:	bc 91       	ld	r27, X
   1315e:	a0 2d       	mov	r26, r0
   13160:	11 96       	adiw	r26, 0x01	; 1
   13162:	1c 92       	st	X, r1

               t_prevLink = UTL_GET_PREV_LINK( t_curr);
   13164:	ad 81       	ldd	r26, Y+5	; 0x05
   13166:	be 81       	ldd	r27, Y+6	; 0x06
   13168:	1a 96       	adiw	r26, 0x0a	; 10
   1316a:	8d 91       	ld	r24, X+
   1316c:	9c 91       	ld	r25, X
   1316e:	1b 97       	sbiw	r26, 0x0b	; 11
   13170:	89 83       	std	Y+1, r24	; 0x01
   13172:	9a 83       	std	Y+2, r25	; 0x02

               t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   13174:	83 81       	ldd	r24, Z+3	; 0x03
   13176:	94 81       	ldd	r25, Z+4	; 0x04
   13178:	6d 81       	ldd	r22, Y+5	; 0x05
   1317a:	7e 81       	ldd	r23, Y+6	; 0x06
   1317c:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
                                             t_curr);

               t_linkError = utl_insertLink( gt_activeThreads,
   13180:	80 91 fe 22 	lds	r24, 0x22FE
   13184:	90 91 ff 22 	lds	r25, 0x22FF
   13188:	6d 81       	ldd	r22, Y+5	; 0x05
   1318a:	7e 81       	ldd	r23, Y+6	; 0x06
   1318c:	41 e0       	ldi	r20, 0x01	; 1
   1318e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                                             t_curr,
                                             true);
               t_curr = t_prevLink;
   13192:	89 81       	ldd	r24, Y+1	; 0x01
   13194:	9a 81       	ldd	r25, Y+2	; 0x02
   13196:	8d 83       	std	Y+5, r24	; 0x05
   13198:	9e 83       	std	Y+6, r25	; 0x06
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   1319a:	01 50       	subi	r16, 0x01	; 1
   1319c:	10 40       	sbci	r17, 0x00	; 0
   1319e:	ed 81       	ldd	r30, Y+5	; 0x05
   131a0:	fe 81       	ldd	r31, Y+6	; 0x06
   131a2:	80 85       	ldd	r24, Z+8	; 0x08
   131a4:	91 85       	ldd	r25, Z+9	; 0x09
   131a6:	8d 83       	std	Y+5, r24	; 0x05
   131a8:	9e 83       	std	Y+6, r25	; 0x06
   131aa:	e0 91 47 27 	lds	r30, 0x2747
   131ae:	f0 91 48 27 	lds	r31, 0x2748
   131b2:	01 15       	cp	r16, r1
   131b4:	11 05       	cpc	r17, r1
   131b6:	79 f6       	brne	.-98     	; 0x13156 <arb_signal+0x2d2>

            /*---------------------------------------------------------------*
             * Since we removed all the threads from the blocked list, set
             * the count back to 0.
             *---------------------------------------------------------------*/
            gpt_currentSem->s_count = 0;
   131b8:	11 82       	std	Z+1, r1	; 0x01
   131ba:	12 82       	std	Z+2, r1	; 0x02
         /*------------------------------------------------------------------*
          * If the highest priority thread we removed from the BLOCKED list
          * has a higher priority then the current running thread then
          * suspend the current thread.
          *------------------------------------------------------------------*/
         pt_temp  = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   131bc:	ab 81       	ldd	r26, Y+3	; 0x03
   131be:	bc 81       	ldd	r27, Y+4	; 0x04
         pt_temp2 = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   131c0:	e0 91 fe 22 	lds	r30, 0x22FE
   131c4:	f0 91 ff 22 	lds	r31, 0x22FF
   131c8:	06 80       	ldd	r0, Z+6	; 0x06
   131ca:	f7 81       	ldd	r31, Z+7	; 0x07
   131cc:	e0 2d       	mov	r30, r0
   131ce:	01 90       	ld	r0, Z+
   131d0:	f0 81       	ld	r31, Z
   131d2:	e0 2d       	mov	r30, r0
         (gt_activeThreads);
         if( pt_temp->t_priority <= pt_temp2->t_priority)
   131d4:	0d 90       	ld	r0, X+
   131d6:	bc 91       	ld	r27, X
   131d8:	a0 2d       	mov	r26, r0
   131da:	12 96       	adiw	r26, 0x02	; 2
   131dc:	9c 91       	ld	r25, X
   131de:	12 97       	sbiw	r26, 0x02	; 2
   131e0:	82 81       	ldd	r24, Z+2	; 0x02
   131e2:	89 17       	cp	r24, r25
   131e4:	30 f0       	brcs	.+12     	; 0x131f2 <arb_signal+0x36e>
         {

            /*---------------------------------------------------------------*
             * Change the status of the current thread from active to READY.
             *---------------------------------------------------------------*/
            pt_temp2->t_status = READY;
   131e6:	11 82       	std	Z+1, r1	; 0x01
             * thread. Calling yield will cause the signaling thread to
             * give up its time slice and allow the next higher priority
             * thread (which should be the one we just removed from the
             * BLOCKED list) to run.
             *---------------------------------------------------------------*/
            arb_yieldFromSignalIntsOff();
   131e8:	0e 94 be 94 	call	0x1297c	; 0x1297c <arb_yieldFromSignalIntsOff>
   131ec:	02 c0       	rjmp	.+4      	; 0x131f2 <arb_signal+0x36e>
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
      false)
      {
         return ARB_INVALID_HANDLE;
   131ee:	89 ef       	ldi	r24, 0xF9	; 249
   131f0:	01 c0       	rjmp	.+2      	; 0x131f4 <arb_signal+0x370>

   /*------------------------------------------------------------------------*
    * Since the call into 'signal' wasn't 'naked' we will let the compiler
    * return us to the calling thread's next program counter location.
    *------------------------------------------------------------------------*/
   return ARB_PASSED;
   131f2:	80 e0       	ldi	r24, 0x00	; 0

}/*End arb_signal( t_SEMHANDLE *pt_semHandle)*/
   131f4:	28 96       	adiw	r28, 0x08	; 8
   131f6:	cd bf       	out	0x3d, r28	; 61
   131f8:	de bf       	out	0x3e, r29	; 62
   131fa:	df 91       	pop	r29
   131fc:	cf 91       	pop	r28
   131fe:	1f 91       	pop	r17
   13200:	0f 91       	pop	r16
   13202:	08 95       	ret

00013204 <arb_semaphoreCreate>:

t_SEMHANDLE arb_semaphoreCreate( t_semType t_type)
{
   13204:	ff 92       	push	r15
   13206:	0f 93       	push	r16
   13208:	1f 93       	push	r17
   1320a:	cf 93       	push	r28
   1320c:	df 93       	push	r29
   1320e:	00 d0       	rcall	.+0      	; 0x13210 <arb_semaphoreCreate+0xc>
   13210:	cd b7       	in	r28, 0x3d	; 61
   13212:	de b7       	in	r29, 0x3e	; 62
   13214:	f8 2e       	mov	r15, r24

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   13216:	8f b7       	in	r24, 0x3f	; 63
   13218:	89 83       	std	Y+1, r24	; 0x01
   1321a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Create a new link handle that will store information about this
    * semaphore.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_semaphore));
   1321c:	85 e0       	ldi	r24, 0x05	; 5
   1321e:	90 e0       	ldi	r25, 0x00	; 0
   13220:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   13224:	8a 83       	std	Y+2, r24	; 0x02
   13226:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
   13228:	8a 81       	ldd	r24, Y+2	; 0x02
   1322a:	9b 81       	ldd	r25, Y+3	; 0x03
   1322c:	97 fd       	sbrc	r25, 7
   1322e:	1e c0       	rjmp	.+60     	; 0x1326c <arb_semaphoreCreate+0x68>

   /*------------------------------------------------------------------------*
    * Add the semaphore 'link' onto the list containing all the open
    * semaphores on the system.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeSems,
   13230:	80 91 ef 22 	lds	r24, 0x22EF
   13234:	90 91 f0 22 	lds	r25, 0x22F0
   13238:	6a 81       	ldd	r22, Y+2	; 0x02
   1323a:	7b 81       	ldd	r23, Y+3	; 0x03
   1323c:	41 e0       	ldi	r20, 0x01	; 1
   1323e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_newSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   13242:	ea 81       	ldd	r30, Y+2	; 0x02
   13244:	fb 81       	ldd	r31, Y+3	; 0x03
   13246:	00 81       	ld	r16, Z
   13248:	11 81       	ldd	r17, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * Each semaphore contains a blocked list where threads waiting on the
    * semaphore will be stored.
    *------------------------------------------------------------------------*/
   pt_newSem->t_blockedList = utl_createContainer();
   1324a:	0e 94 f5 a2 	call	0x145ea	; 0x145ea <utl_createContainer>
   1324e:	f8 01       	movw	r30, r16
   13250:	83 83       	std	Z+3, r24	; 0x03
   13252:	94 83       	std	Z+4, r25	; 0x04
   if( pt_newSem->t_blockedList < 0)
   13254:	83 81       	ldd	r24, Z+3	; 0x03
   13256:	94 81       	ldd	r25, Z+4	; 0x04
   13258:	97 ff       	sbrs	r25, 7
   1325a:	0d c0       	rjmp	.+26     	; 0x13276 <arb_semaphoreCreate+0x72>
   {
      t_err = utl_destroyLink( gt_activeSems,
   1325c:	80 91 ef 22 	lds	r24, 0x22EF
   13260:	90 91 f0 22 	lds	r25, 0x22F0
   13264:	6a 81       	ldd	r22, Y+2	; 0x02
   13266:	7b 81       	ldd	r23, Y+3	; 0x03
   13268:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                               t_linkHndl);
      HAL_END_CRITICAL();//Enable interrupts
   1326c:	89 81       	ldd	r24, Y+1	; 0x01
   1326e:	8f bf       	out	0x3f, r24	; 63
      return (t_SEMHANDLE)ARB_OUT_OF_HEAP;
   13270:	8f ef       	ldi	r24, 0xFF	; 255
   13272:	9f ef       	ldi	r25, 0xFF	; 255
   13274:	12 c0       	rjmp	.+36     	; 0x1329a <arb_semaphoreCreate+0x96>
   }

   /*------------------------------------------------------------------------*
    * Are we a SIGNAL or COUNTING semaphore?
    *------------------------------------------------------------------------*/
   pt_newSem->t_type = t_type;
   13276:	f8 01       	movw	r30, r16
   13278:	f0 82       	st	Z, r15

   if( t_type == MUTEX)
   1327a:	f2 e0       	ldi	r31, 0x02	; 2
   1327c:	ff 16       	cp	r15, r31
   1327e:	31 f4       	brne	.+12     	; 0x1328c <arb_semaphoreCreate+0x88>
   {
      /*---------------------------------------------------------------------*
       * This semaphore is used for mutual exclusion initialize to 1 or
       * 'unlocked'.
       *---------------------------------------------------------------------*/
      pt_newSem->s_count = 1;
   13280:	81 e0       	ldi	r24, 0x01	; 1
   13282:	90 e0       	ldi	r25, 0x00	; 0
   13284:	f8 01       	movw	r30, r16
   13286:	81 83       	std	Z+1, r24	; 0x01
   13288:	92 83       	std	Z+2, r25	; 0x02
   1328a:	03 c0       	rjmp	.+6      	; 0x13292 <arb_semaphoreCreate+0x8e>
   }
   else
      pt_newSem->s_count = 0;
   1328c:	f8 01       	movw	r30, r16
   1328e:	11 82       	std	Z+1, r1	; 0x01
   13290:	12 82       	std	Z+2, r1	; 0x02

   HAL_END_CRITICAL();//Enable interrupts
   13292:	89 81       	ldd	r24, Y+1	; 0x01
   13294:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Return a handle (or address ) to this semaphore.
    *------------------------------------------------------------------------*/
   return (t_SEMHANDLE)t_linkHndl;
   13296:	8a 81       	ldd	r24, Y+2	; 0x02
   13298:	9b 81       	ldd	r25, Y+3	; 0x03

}/*End arb_semaphoreCreate*/
   1329a:	23 96       	adiw	r28, 0x03	; 3
   1329c:	cd bf       	out	0x3d, r28	; 61
   1329e:	de bf       	out	0x3e, r29	; 62
   132a0:	df 91       	pop	r29
   132a2:	cf 91       	pop	r28
   132a4:	1f 91       	pop	r17
   132a6:	0f 91       	pop	r16
   132a8:	ff 90       	pop	r15
   132aa:	08 95       	ret

000132ac <arb_semaphoreDestroy>:

t_error arb_semaphoreDestroy( t_SEMHANDLE t_semHandle)
{
   132ac:	ef 92       	push	r14
   132ae:	ff 92       	push	r15
   132b0:	0f 93       	push	r16
   132b2:	1f 93       	push	r17
   132b4:	cf 93       	push	r28
   132b6:	df 93       	push	r29
   132b8:	cd b7       	in	r28, 0x3d	; 61
   132ba:	de b7       	in	r29, 0x3e	; 62
   132bc:	27 97       	sbiw	r28, 0x07	; 7
   132be:	cd bf       	out	0x3d, r28	; 61
   132c0:	de bf       	out	0x3e, r29	; 62
   132c2:	8e 83       	std	Y+6, r24	; 0x06
   132c4:	9f 83       	std	Y+7, r25	; 0x07

   /*------------------------------------------------------------------------*
    * We are going to be removing a global element so perform mutual
    * exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   132c6:	8f b7       	in	r24, 0x3f	; 63
   132c8:	89 83       	std	Y+1, r24	; 0x01
   132ca:	f8 94       	cli

   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   132cc:	ee 81       	ldd	r30, Y+6	; 0x06
   132ce:	ff 81       	ldd	r31, Y+7	; 0x07
   132d0:	80 91 ef 22 	lds	r24, 0x22EF
   132d4:	90 91 f0 22 	lds	r25, 0x22F0
   132d8:	24 81       	ldd	r18, Z+4	; 0x04
   132da:	35 81       	ldd	r19, Z+5	; 0x05
   132dc:	28 17       	cp	r18, r24
   132de:	39 07       	cpc	r19, r25
   132e0:	21 f0       	breq	.+8      	; 0x132ea <arb_semaphoreDestroy+0x3e>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
   132e2:	89 81       	ldd	r24, Y+1	; 0x01
   132e4:	8f bf       	out	0x3f, r24	; 63
      return ARB_INVALID_HANDLE;
   132e6:	89 ef       	ldi	r24, 0xF9	; 249
   132e8:	4e c0       	rjmp	.+156    	; 0x13386 <arb_semaphoreDestroy+0xda>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_sem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   132ea:	ee 81       	ldd	r30, Y+6	; 0x06
   132ec:	ff 81       	ldd	r31, Y+7	; 0x07
   132ee:	00 81       	ld	r16, Z
   132f0:	11 81       	ldd	r17, Z+1	; 0x01
    * entire list using the current position of t_curr once its deleted the
    * loop will not be unable to move to the next ptr location. This issue is
    * resolved by using a previous ptr to change t_curr back to a valid
    * location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, pt_sem->t_blockedList, s_count)
   132f2:	d8 01       	movw	r26, r16
   132f4:	13 96       	adiw	r26, 0x03	; 3
   132f6:	ed 91       	ld	r30, X+
   132f8:	fc 91       	ld	r31, X
   132fa:	14 97       	sbiw	r26, 0x04	; 4
   132fc:	e2 80       	ldd	r14, Z+2	; 0x02
   132fe:	f3 80       	ldd	r15, Z+3	; 0x03
   13300:	13 96       	adiw	r26, 0x03	; 3
   13302:	ed 91       	ld	r30, X+
   13304:	fc 91       	ld	r31, X
   13306:	14 97       	sbiw	r26, 0x04	; 4
   13308:	25 c0       	rjmp	.+74     	; 0x13354 <arb_semaphoreDestroy+0xa8>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   1330a:	ec 81       	ldd	r30, Y+4	; 0x04
   1330c:	fd 81       	ldd	r31, Y+5	; 0x05

      pt_temp->t_status = READY;
   1330e:	01 90       	ld	r0, Z+
   13310:	f0 81       	ld	r31, Z
   13312:	e0 2d       	mov	r30, r0
   13314:	11 82       	std	Z+1, r1	; 0x01

      t_prevLink = UTL_GET_PREV_LINK( t_curr);
   13316:	ec 81       	ldd	r30, Y+4	; 0x04
   13318:	fd 81       	ldd	r31, Y+5	; 0x05
   1331a:	82 85       	ldd	r24, Z+10	; 0x0a
   1331c:	93 85       	ldd	r25, Z+11	; 0x0b
   1331e:	8a 83       	std	Y+2, r24	; 0x02
   13320:	9b 83       	std	Y+3, r25	; 0x03

      t_err = utl_removeLink( pt_sem->t_blockedList,
   13322:	f8 01       	movw	r30, r16
   13324:	83 81       	ldd	r24, Z+3	; 0x03
   13326:	94 81       	ldd	r25, Z+4	; 0x04
   13328:	6c 81       	ldd	r22, Y+4	; 0x04
   1332a:	7d 81       	ldd	r23, Y+5	; 0x05
   1332c:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <utl_removeLink>
                              t_curr);

      t_err = utl_insertLink( gt_activeThreads,
   13330:	80 91 fe 22 	lds	r24, 0x22FE
   13334:	90 91 ff 22 	lds	r25, 0x22FF
   13338:	6c 81       	ldd	r22, Y+4	; 0x04
   1333a:	7d 81       	ldd	r23, Y+5	; 0x05
   1333c:	41 e0       	ldi	r20, 0x01	; 1
   1333e:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                              t_curr,
                              true);
      t_curr = t_prevLink;
   13342:	8a 81       	ldd	r24, Y+2	; 0x02
   13344:	9b 81       	ldd	r25, Y+3	; 0x03
   13346:	8c 83       	std	Y+4, r24	; 0x04
   13348:	9d 83       	std	Y+5, r25	; 0x05
    * entire list using the current position of t_curr once its deleted the
    * loop will not be unable to move to the next ptr location. This issue is
    * resolved by using a previous ptr to change t_curr back to a valid
    * location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, pt_sem->t_blockedList, s_count)
   1334a:	08 94       	sec
   1334c:	e1 08       	sbc	r14, r1
   1334e:	f1 08       	sbc	r15, r1
   13350:	ec 81       	ldd	r30, Y+4	; 0x04
   13352:	fd 81       	ldd	r31, Y+5	; 0x05
   13354:	80 85       	ldd	r24, Z+8	; 0x08
   13356:	91 85       	ldd	r25, Z+9	; 0x09
   13358:	8c 83       	std	Y+4, r24	; 0x04
   1335a:	9d 83       	std	Y+5, r25	; 0x05
   1335c:	e1 14       	cp	r14, r1
   1335e:	f1 04       	cpc	r15, r1
   13360:	a1 f6       	brne	.-88     	; 0x1330a <arb_semaphoreDestroy+0x5e>
   }

   /*------------------------------------------------------------------------*
    * Destroy the blocked list for this semaphore.
    *------------------------------------------------------------------------*/
   t_err = utl_destroyContainer( pt_sem->t_blockedList);
   13362:	d8 01       	movw	r26, r16
   13364:	13 96       	adiw	r26, 0x03	; 3
   13366:	8d 91       	ld	r24, X+
   13368:	9c 91       	ld	r25, X
   1336a:	14 97       	sbiw	r26, 0x04	; 4
   1336c:	0e 94 38 a3 	call	0x14670	; 0x14670 <utl_destroyContainer>

   /*------------------------------------------------------------------------*
    * Destroy the semaphore
    *------------------------------------------------------------------------*/
   t_err = utl_destroyLink( gt_activeSems, (t_LINKHNDL)t_semHandle);
   13370:	80 91 ef 22 	lds	r24, 0x22EF
   13374:	90 91 f0 22 	lds	r25, 0x22F0
   13378:	6e 81       	ldd	r22, Y+6	; 0x06
   1337a:	7f 81       	ldd	r23, Y+7	; 0x07
   1337c:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>

   HAL_END_CRITICAL();//Enable interrupts
   13380:	89 81       	ldd	r24, Y+1	; 0x01
   13382:	8f bf       	out	0x3f, r24	; 63

   return ARB_PASSED;
   13384:	80 e0       	ldi	r24, 0x00	; 0

}/*End arb_semaphoreDestroy*/
   13386:	27 96       	adiw	r28, 0x07	; 7
   13388:	cd bf       	out	0x3d, r28	; 61
   1338a:	de bf       	out	0x3e, r29	; 62
   1338c:	df 91       	pop	r29
   1338e:	cf 91       	pop	r28
   13390:	1f 91       	pop	r17
   13392:	0f 91       	pop	r16
   13394:	ff 90       	pop	r15
   13396:	ef 90       	pop	r14
   13398:	08 95       	ret

0001339a <arb_semaphoreInit>:

t_error arb_semaphoreInit( t_SEMHANDLE t_semHandle,/*Pointer to the semaphores handle*/
                           int16_t     s_value)
{
   1339a:	cf 93       	push	r28
   1339c:	df 93       	push	r29
   1339e:	0f 92       	push	r0
   133a0:	0f 92       	push	r0
   133a2:	cd b7       	in	r28, 0x3d	; 61
   133a4:	de b7       	in	r29, 0x3e	; 62
   133a6:	89 83       	std	Y+1, r24	; 0x01
   133a8:	9a 83       	std	Y+2, r25	; 0x02
   t_semaphore *pt_sem = NULL;

   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) == false)
   133aa:	e9 81       	ldd	r30, Y+1	; 0x01
   133ac:	fa 81       	ldd	r31, Y+2	; 0x02
   133ae:	80 91 ef 22 	lds	r24, 0x22EF
   133b2:	90 91 f0 22 	lds	r25, 0x22F0
   133b6:	24 81       	ldd	r18, Z+4	; 0x04
   133b8:	35 81       	ldd	r19, Z+5	; 0x05
   133ba:	28 17       	cp	r18, r24
   133bc:	39 07       	cpc	r19, r25
   133be:	49 f4       	brne	.+18     	; 0x133d2 <arb_semaphoreInit+0x38>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_sem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   133c0:	e9 81       	ldd	r30, Y+1	; 0x01
   133c2:	fa 81       	ldd	r31, Y+2	; 0x02
   t_semHandle);

   pt_sem->s_count = s_value;
   133c4:	01 90       	ld	r0, Z+
   133c6:	f0 81       	ld	r31, Z
   133c8:	e0 2d       	mov	r30, r0
   133ca:	61 83       	std	Z+1, r22	; 0x01
   133cc:	72 83       	std	Z+2, r23	; 0x02

   return ARB_PASSED;
   133ce:	80 e0       	ldi	r24, 0x00	; 0
   133d0:	01 c0       	rjmp	.+2      	; 0x133d4 <arb_semaphoreInit+0x3a>
{
   t_semaphore *pt_sem = NULL;

   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) == false)
   {
      return ARB_INVALID_HANDLE;
   133d2:	89 ef       	ldi	r24, 0xF9	; 249

   pt_sem->s_count = s_value;

   return ARB_PASSED;

}/*End arb_semaphoreInit*/
   133d4:	0f 90       	pop	r0
   133d6:	0f 90       	pop	r0
   133d8:	df 91       	pop	r29
   133da:	cf 91       	pop	r28
   133dc:	08 95       	ret

000133de <updateSystemTime>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void updateSystemTime( void)
{
   133de:	cf 92       	push	r12
   133e0:	df 92       	push	r13
   133e2:	ef 92       	push	r14
   133e4:	ff 92       	push	r15
   133e6:	cf 93       	push	r28
   133e8:	df 93       	push	r29
   gt_sysTime.l_ticks += ARB_SYS_TIMER_PERIOD_IN_TICKS;
   133ea:	90 91 54 27 	lds	r25, 0x2754
   133ee:	80 91 55 27 	lds	r24, 0x2755
   133f2:	30 91 56 27 	lds	r19, 0x2756
   133f6:	20 91 57 27 	lds	r18, 0x2757
   133fa:	a0 91 58 27 	lds	r26, 0x2758
   133fe:	f0 91 59 27 	lds	r31, 0x2759
   13402:	e0 91 5a 27 	lds	r30, 0x275A
   13406:	b0 91 5b 27 	lds	r27, 0x275B
   1340a:	69 2f       	mov	r22, r25
   1340c:	69 57       	subi	r22, 0x79	; 121
   1340e:	51 e0       	ldi	r21, 0x01	; 1
   13410:	69 17       	cp	r22, r25
   13412:	08 f0       	brcs	.+2      	; 0x13416 <updateSystemTime+0x38>
   13414:	50 e0       	ldi	r21, 0x00	; 0
   13416:	98 2f       	mov	r25, r24
   13418:	9d 5e       	subi	r25, 0xED	; 237
   1341a:	41 e0       	ldi	r20, 0x01	; 1
   1341c:	98 17       	cp	r25, r24
   1341e:	08 f0       	brcs	.+2      	; 0x13422 <updateSystemTime+0x44>
   13420:	40 e0       	ldi	r20, 0x00	; 0
   13422:	59 0f       	add	r21, r25
   13424:	81 e0       	ldi	r24, 0x01	; 1
   13426:	59 17       	cp	r21, r25
   13428:	08 f0       	brcs	.+2      	; 0x1342c <updateSystemTime+0x4e>
   1342a:	80 e0       	ldi	r24, 0x00	; 0
   1342c:	84 2b       	or	r24, r20
   1342e:	83 0f       	add	r24, r19
   13430:	41 e0       	ldi	r20, 0x01	; 1
   13432:	83 17       	cp	r24, r19
   13434:	08 f0       	brcs	.+2      	; 0x13438 <updateSystemTime+0x5a>
   13436:	40 e0       	ldi	r20, 0x00	; 0
   13438:	42 0f       	add	r20, r18
   1343a:	31 e0       	ldi	r19, 0x01	; 1
   1343c:	42 17       	cp	r20, r18
   1343e:	08 f0       	brcs	.+2      	; 0x13442 <updateSystemTime+0x64>
   13440:	30 e0       	ldi	r19, 0x00	; 0
   13442:	3a 0f       	add	r19, r26
   13444:	21 e0       	ldi	r18, 0x01	; 1
   13446:	3a 17       	cp	r19, r26
   13448:	08 f0       	brcs	.+2      	; 0x1344c <updateSystemTime+0x6e>
   1344a:	20 e0       	ldi	r18, 0x00	; 0
   1344c:	2f 0f       	add	r18, r31
   1344e:	91 e0       	ldi	r25, 0x01	; 1
   13450:	2f 17       	cp	r18, r31
   13452:	08 f0       	brcs	.+2      	; 0x13456 <updateSystemTime+0x78>
   13454:	90 e0       	ldi	r25, 0x00	; 0
   13456:	9e 0f       	add	r25, r30
   13458:	71 e0       	ldi	r23, 0x01	; 1
   1345a:	9e 17       	cp	r25, r30
   1345c:	08 f0       	brcs	.+2      	; 0x13460 <updateSystemTime+0x82>
   1345e:	70 e0       	ldi	r23, 0x00	; 0
   13460:	7b 0f       	add	r23, r27
   13462:	60 93 54 27 	sts	0x2754, r22
   13466:	50 93 55 27 	sts	0x2755, r21
   1346a:	80 93 56 27 	sts	0x2756, r24
   1346e:	40 93 57 27 	sts	0x2757, r20
   13472:	30 93 58 27 	sts	0x2758, r19
   13476:	20 93 59 27 	sts	0x2759, r18
   1347a:	90 93 5a 27 	sts	0x275A, r25
   1347e:	70 93 5b 27 	sts	0x275B, r23
   gt_sysTime.i_usec += ARB_SYS_TIMER_PERIOD_IN_USEC;
   13482:	60 91 61 27 	lds	r22, 0x2761
   13486:	70 91 62 27 	lds	r23, 0x2762
   1348a:	80 91 63 27 	lds	r24, 0x2763
   1348e:	90 91 64 27 	lds	r25, 0x2764
   13492:	0e 94 83 af 	call	0x15f06	; 0x15f06 <__floatunsisf>
   13496:	20 e0       	ldi	r18, 0x00	; 0
   13498:	30 e4       	ldi	r19, 0x40	; 64
   1349a:	4c e1       	ldi	r20, 0x1C	; 28
   1349c:	56 e4       	ldi	r21, 0x46	; 70
   1349e:	0e 94 48 ae 	call	0x15c90	; 0x15c90 <__addsf3>
   134a2:	0e 94 57 af 	call	0x15eae	; 0x15eae <__fixunssfsi>
   134a6:	6b 01       	movw	r12, r22
   134a8:	7c 01       	movw	r14, r24
   134aa:	60 93 61 27 	sts	0x2761, r22
   134ae:	70 93 62 27 	sts	0x2762, r23
   134b2:	80 93 63 27 	sts	0x2763, r24
   134b6:	90 93 64 27 	sts	0x2764, r25
   gt_sysTime.l_msec += ARB_SYS_TIMER_PERIOD_IN_MSEC;
   134ba:	cc e4       	ldi	r28, 0x4C	; 76
   134bc:	d7 e2       	ldi	r29, 0x27	; 39
   134be:	20 91 4c 27 	lds	r18, 0x274C
   134c2:	30 91 4d 27 	lds	r19, 0x274D
   134c6:	40 91 4e 27 	lds	r20, 0x274E
   134ca:	50 91 4f 27 	lds	r21, 0x274F
   134ce:	60 91 50 27 	lds	r22, 0x2750
   134d2:	70 91 51 27 	lds	r23, 0x2751
   134d6:	80 91 52 27 	lds	r24, 0x2752
   134da:	90 91 53 27 	lds	r25, 0x2753
   134de:	0e 94 c0 af 	call	0x15f80	; 0x15f80 <__floatundisf>
   134e2:	20 e0       	ldi	r18, 0x00	; 0
   134e4:	30 e0       	ldi	r19, 0x00	; 0
   134e6:	40 e2       	ldi	r20, 0x20	; 32
   134e8:	51 e4       	ldi	r21, 0x41	; 65
   134ea:	0e 94 48 ae 	call	0x15c90	; 0x15c90 <__addsf3>
   134ee:	0e 94 1d af 	call	0x15e3a	; 0x15e3a <__fixunssfdi>
   134f2:	20 93 4c 27 	sts	0x274C, r18
   134f6:	39 83       	std	Y+1, r19	; 0x01
   134f8:	4a 83       	std	Y+2, r20	; 0x02
   134fa:	5b 83       	std	Y+3, r21	; 0x03
   134fc:	6c 83       	std	Y+4, r22	; 0x04
   134fe:	7d 83       	std	Y+5, r23	; 0x05
   13500:	8e 83       	std	Y+6, r24	; 0x06
   13502:	9f 83       	std	Y+7, r25	; 0x07

   if( gt_sysTime.l_msec >= ARB_SYS_TIMER_MAX_MSEC)
   13504:	99 23       	and	r25, r25
   13506:	a9 f4       	brne	.+42     	; 0x13532 <updateSystemTime+0x154>
   13508:	88 23       	and	r24, r24
   1350a:	99 f4       	brne	.+38     	; 0x13532 <updateSystemTime+0x154>
   1350c:	77 23       	and	r23, r23
   1350e:	89 f4       	brne	.+34     	; 0x13532 <updateSystemTime+0x154>
   13510:	66 23       	and	r22, r22
   13512:	79 f4       	brne	.+30     	; 0x13532 <updateSystemTime+0x154>
   13514:	55 23       	and	r21, r21
   13516:	69 f4       	brne	.+26     	; 0x13532 <updateSystemTime+0x154>
   13518:	47 33       	cpi	r20, 0x37	; 55
   1351a:	58 f4       	brcc	.+22     	; 0x13532 <updateSystemTime+0x154>
   1351c:	46 33       	cpi	r20, 0x36	; 54
   1351e:	09 f0       	breq	.+2      	; 0x13522 <updateSystemTime+0x144>
   13520:	6c c0       	rjmp	.+216    	; 0x135fa <updateSystemTime+0x21c>
   13522:	3f 3e       	cpi	r19, 0xEF	; 239
   13524:	30 f4       	brcc	.+12     	; 0x13532 <updateSystemTime+0x154>
   13526:	3e 3e       	cpi	r19, 0xEE	; 238
   13528:	09 f0       	breq	.+2      	; 0x1352c <updateSystemTime+0x14e>
   1352a:	67 c0       	rjmp	.+206    	; 0x135fa <updateSystemTime+0x21c>
   1352c:	20 38       	cpi	r18, 0x80	; 128
   1352e:	08 f4       	brcc	.+2      	; 0x13532 <updateSystemTime+0x154>
   13530:	64 c0       	rjmp	.+200    	; 0x135fa <updateSystemTime+0x21c>
      gt_sysTime.l_msec -= ARB_SYS_TIMER_MAX_MSEC;
   13532:	a2 2f       	mov	r26, r18
   13534:	a0 58       	subi	r26, 0x80	; 128
   13536:	b1 e0       	ldi	r27, 0x01	; 1
   13538:	a2 17       	cp	r26, r18
   1353a:	08 f0       	brcs	.+2      	; 0x1353e <updateSystemTime+0x160>
   1353c:	b0 e0       	ldi	r27, 0x00	; 0
   1353e:	e3 2f       	mov	r30, r19
   13540:	ef 5e       	subi	r30, 0xEF	; 239
   13542:	21 e0       	ldi	r18, 0x01	; 1
   13544:	e3 17       	cp	r30, r19
   13546:	08 f0       	brcs	.+2      	; 0x1354a <updateSystemTime+0x16c>
   13548:	20 e0       	ldi	r18, 0x00	; 0
   1354a:	be 0f       	add	r27, r30
   1354c:	31 e0       	ldi	r19, 0x01	; 1
   1354e:	be 17       	cp	r27, r30
   13550:	08 f0       	brcs	.+2      	; 0x13554 <updateSystemTime+0x176>
   13552:	30 e0       	ldi	r19, 0x00	; 0
   13554:	23 2b       	or	r18, r19
   13556:	e4 2f       	mov	r30, r20
   13558:	e7 53       	subi	r30, 0x37	; 55
   1355a:	31 e0       	ldi	r19, 0x01	; 1
   1355c:	e4 17       	cp	r30, r20
   1355e:	08 f0       	brcs	.+2      	; 0x13562 <updateSystemTime+0x184>
   13560:	30 e0       	ldi	r19, 0x00	; 0
   13562:	f2 2f       	mov	r31, r18
   13564:	fe 0f       	add	r31, r30
   13566:	21 e0       	ldi	r18, 0x01	; 1
   13568:	fe 17       	cp	r31, r30
   1356a:	08 f0       	brcs	.+2      	; 0x1356e <updateSystemTime+0x190>
   1356c:	20 e0       	ldi	r18, 0x00	; 0
   1356e:	32 2b       	or	r19, r18
   13570:	45 2f       	mov	r20, r21
   13572:	41 50       	subi	r20, 0x01	; 1
   13574:	21 e0       	ldi	r18, 0x01	; 1
   13576:	45 17       	cp	r20, r21
   13578:	08 f0       	brcs	.+2      	; 0x1357c <updateSystemTime+0x19e>
   1357a:	20 e0       	ldi	r18, 0x00	; 0
   1357c:	e3 2f       	mov	r30, r19
   1357e:	e4 0f       	add	r30, r20
   13580:	31 e0       	ldi	r19, 0x01	; 1
   13582:	e4 17       	cp	r30, r20
   13584:	08 f0       	brcs	.+2      	; 0x13588 <updateSystemTime+0x1aa>
   13586:	30 e0       	ldi	r19, 0x00	; 0
   13588:	23 2b       	or	r18, r19
   1358a:	46 2f       	mov	r20, r22
   1358c:	41 50       	subi	r20, 0x01	; 1
   1358e:	31 e0       	ldi	r19, 0x01	; 1
   13590:	46 17       	cp	r20, r22
   13592:	08 f0       	brcs	.+2      	; 0x13596 <updateSystemTime+0x1b8>
   13594:	30 e0       	ldi	r19, 0x00	; 0
   13596:	62 2f       	mov	r22, r18
   13598:	64 0f       	add	r22, r20
   1359a:	21 e0       	ldi	r18, 0x01	; 1
   1359c:	64 17       	cp	r22, r20
   1359e:	08 f0       	brcs	.+2      	; 0x135a2 <updateSystemTime+0x1c4>
   135a0:	20 e0       	ldi	r18, 0x00	; 0
   135a2:	32 2b       	or	r19, r18
   135a4:	47 2f       	mov	r20, r23
   135a6:	41 50       	subi	r20, 0x01	; 1
   135a8:	21 e0       	ldi	r18, 0x01	; 1
   135aa:	47 17       	cp	r20, r23
   135ac:	08 f0       	brcs	.+2      	; 0x135b0 <updateSystemTime+0x1d2>
   135ae:	20 e0       	ldi	r18, 0x00	; 0
   135b0:	34 0f       	add	r19, r20
   135b2:	51 e0       	ldi	r21, 0x01	; 1
   135b4:	34 17       	cp	r19, r20
   135b6:	08 f0       	brcs	.+2      	; 0x135ba <updateSystemTime+0x1dc>
   135b8:	50 e0       	ldi	r21, 0x00	; 0
   135ba:	25 2b       	or	r18, r21
   135bc:	48 2f       	mov	r20, r24
   135be:	41 50       	subi	r20, 0x01	; 1
   135c0:	71 e0       	ldi	r23, 0x01	; 1
   135c2:	48 17       	cp	r20, r24
   135c4:	08 f0       	brcs	.+2      	; 0x135c8 <updateSystemTime+0x1ea>
   135c6:	70 e0       	ldi	r23, 0x00	; 0
   135c8:	52 2f       	mov	r21, r18
   135ca:	54 0f       	add	r21, r20
   135cc:	81 e0       	ldi	r24, 0x01	; 1
   135ce:	54 17       	cp	r21, r20
   135d0:	08 f0       	brcs	.+2      	; 0x135d4 <updateSystemTime+0x1f6>
   135d2:	80 e0       	ldi	r24, 0x00	; 0
   135d4:	87 2b       	or	r24, r23
   135d6:	91 50       	subi	r25, 0x01	; 1
   135d8:	89 0f       	add	r24, r25
   135da:	a0 93 4c 27 	sts	0x274C, r26
   135de:	b0 93 4d 27 	sts	0x274D, r27
   135e2:	f0 93 4e 27 	sts	0x274E, r31
   135e6:	e0 93 4f 27 	sts	0x274F, r30
   135ea:	60 93 50 27 	sts	0x2750, r22
   135ee:	30 93 51 27 	sts	0x2751, r19
   135f2:	50 93 52 27 	sts	0x2752, r21
   135f6:	80 93 53 27 	sts	0x2753, r24

   if( gt_sysTime.i_usec >= ((uint32_t)1000000))
   135fa:	80 e4       	ldi	r24, 0x40	; 64
   135fc:	c8 16       	cp	r12, r24
   135fe:	82 e4       	ldi	r24, 0x42	; 66
   13600:	d8 06       	cpc	r13, r24
   13602:	8f e0       	ldi	r24, 0x0F	; 15
   13604:	e8 06       	cpc	r14, r24
   13606:	80 e0       	ldi	r24, 0x00	; 0
   13608:	f8 06       	cpc	r15, r24
   1360a:	90 f1       	brcs	.+100    	; 0x13670 <updateSystemTime+0x292>
   {
      gt_sysTime.i_usec -= ((uint32_t)1000000);
   1360c:	d7 01       	movw	r26, r14
   1360e:	c6 01       	movw	r24, r12
   13610:	80 54       	subi	r24, 0x40	; 64
   13612:	92 44       	sbci	r25, 0x42	; 66
   13614:	af 40       	sbci	r26, 0x0F	; 15
   13616:	b0 40       	sbci	r27, 0x00	; 0
   13618:	80 93 61 27 	sts	0x2761, r24
   1361c:	90 93 62 27 	sts	0x2762, r25
   13620:	a0 93 63 27 	sts	0x2763, r26
   13624:	b0 93 64 27 	sts	0x2764, r27
      gt_sysTime.c_sec++;
   13628:	80 91 60 27 	lds	r24, 0x2760
   1362c:	8f 5f       	subi	r24, 0xFF	; 255
   1362e:	80 93 60 27 	sts	0x2760, r24
      if( gt_sysTime.c_sec == 60)
   13632:	8c 33       	cpi	r24, 0x3C	; 60
   13634:	e9 f4       	brne	.+58     	; 0x13670 <updateSystemTime+0x292>
      {
         gt_sysTime.c_sec = 0;
   13636:	10 92 60 27 	sts	0x2760, r1
         gt_sysTime.c_min++;
   1363a:	80 91 5f 27 	lds	r24, 0x275F
   1363e:	8f 5f       	subi	r24, 0xFF	; 255
   13640:	80 93 5f 27 	sts	0x275F, r24
         if( gt_sysTime.c_min == 60)
   13644:	8c 33       	cpi	r24, 0x3C	; 60
   13646:	a1 f4       	brne	.+40     	; 0x13670 <updateSystemTime+0x292>
         {
            gt_sysTime.c_min = 0;
   13648:	10 92 5f 27 	sts	0x275F, r1
            gt_sysTime.c_hours++;
   1364c:	80 91 5e 27 	lds	r24, 0x275E
   13650:	8f 5f       	subi	r24, 0xFF	; 255
   13652:	80 93 5e 27 	sts	0x275E, r24
            if( gt_sysTime.c_hours == 24)
   13656:	88 31       	cpi	r24, 0x18	; 24
   13658:	59 f4       	brne	.+22     	; 0x13670 <updateSystemTime+0x292>
            {
               gt_sysTime.c_hours = 0;
   1365a:	10 92 5e 27 	sts	0x275E, r1
               gt_sysTime.s_days++;
   1365e:	80 91 5c 27 	lds	r24, 0x275C
   13662:	90 91 5d 27 	lds	r25, 0x275D
   13666:	01 96       	adiw	r24, 0x01	; 1
   13668:	80 93 5c 27 	sts	0x275C, r24
   1366c:	90 93 5d 27 	sts	0x275D, r25

      }/*End if( gt_sysTime.c_sec == 60)*/

   }/*End if( gt_sysTime.i_usec >= 1000000)*/

}/*End updateSystemTime*/
   13670:	df 91       	pop	r29
   13672:	cf 91       	pop	r28
   13674:	ff 90       	pop	r15
   13676:	ef 90       	pop	r14
   13678:	df 90       	pop	r13
   1367a:	cf 90       	pop	r12
   1367c:	08 95       	ret

0001367e <sysTimerInterrupt>:
{

   /*------------------------------------------------------------------------*
    * Make sure all interrupts are disabled.
    *------------------------------------------------------------------------*/
   HAL_CLI();
   1367e:	f8 94       	cli
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   13680:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   13682:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   13684:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   13686:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   13688:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   1368a:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   1368c:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   1368e:	0f 92       	push	r0
      asm( "push r1");
   13690:	1f 92       	push	r1
      asm( "clr r1");
   13692:	11 24       	eor	r1, r1
      asm( "push r2");
   13694:	2f 92       	push	r2
      asm( "push r3");
   13696:	3f 92       	push	r3
      asm( "push r4");
   13698:	4f 92       	push	r4
      asm( "push r5");
   1369a:	5f 92       	push	r5
      asm( "push r6");
   1369c:	6f 92       	push	r6
      asm( "push r7");
   1369e:	7f 92       	push	r7
      asm( "push r8");
   136a0:	8f 92       	push	r8
      asm( "push r9");
   136a2:	9f 92       	push	r9
      asm( "push r10");
   136a4:	af 92       	push	r10
      asm( "push r11");
   136a6:	bf 92       	push	r11
      asm( "push r12");
   136a8:	cf 92       	push	r12
      asm( "push r13");
   136aa:	df 92       	push	r13
      asm( "push r14");
   136ac:	ef 92       	push	r14
      asm( "push r15");
   136ae:	ff 92       	push	r15
      asm( "push r16");
   136b0:	0f 93       	push	r16
      asm( "push r17");
   136b2:	1f 93       	push	r17
      asm( "push r18");
   136b4:	2f 93       	push	r18
      asm( "push r19");
   136b6:	3f 93       	push	r19
      asm( "push r20");
   136b8:	4f 93       	push	r20
      asm( "push r21");
   136ba:	5f 93       	push	r21
      asm( "push r22");
   136bc:	6f 93       	push	r22
      asm( "push r23");
   136be:	7f 93       	push	r23
      asm( "push r24");
   136c0:	8f 93       	push	r24
      asm( "push r25");
   136c2:	9f 93       	push	r25
      asm( "push r26");
   136c4:	af 93       	push	r26
      asm( "push r27");
   136c6:	bf 93       	push	r27
      asm( "push r28");
   136c8:	cf 93       	push	r28
      asm( "push r29");
   136ca:	df 93       	push	r29
      asm( "push r30");
   136cc:	ef 93       	push	r30
      asm( "push r31");
   136ce:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   136d0:	e0 91 fe 22 	lds	r30, 0x22FE
   136d4:	f0 91 ff 22 	lds	r31, 0x22FF
   136d8:	06 80       	ldd	r0, Z+6	; 0x06
   136da:	f7 81       	ldd	r31, Z+7	; 0x07
   136dc:	e0 2d       	mov	r30, r0
   136de:	01 90       	ld	r0, Z+
   136e0:	f0 81       	ld	r31, Z
   136e2:	e0 2d       	mov	r30, r0
   136e4:	e0 93 7f 27 	sts	0x277F, r30
   136e8:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   136ec:	2d b7       	in	r18, 0x3d	; 61
   136ee:	30 e0       	ldi	r19, 0x00	; 0
   136f0:	21 87       	std	Z+9, r18	; 0x09
   136f2:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   136f4:	4e b7       	in	r20, 0x3e	; 62
   136f6:	94 2f       	mov	r25, r20
   136f8:	80 e0       	ldi	r24, 0x00	; 0
   136fa:	82 2b       	or	r24, r18
   136fc:	93 2b       	or	r25, r19
   136fe:	81 87       	std	Z+9, r24	; 0x09
   13700:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13702:	8f ef       	ldi	r24, 0xFF	; 255
   13704:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13706:	8f e3       	ldi	r24, 0x3F	; 63
   13708:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   1370a:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1370e:	d0 91 3e 00 	lds	r29, 0x003E
//PORTF.OUTTGL = PIN_3;
   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13712:	e0 91 fe 22 	lds	r30, 0x22FE
   13716:	f0 91 ff 22 	lds	r31, 0x22FF
   1371a:	06 80       	ldd	r0, Z+6	; 0x06
   1371c:	f7 81       	ldd	r31, Z+7	; 0x07
   1371e:	e0 2d       	mov	r30, r0
   13720:	01 90       	ld	r0, Z+
   13722:	f0 81       	ld	r31, Z
   13724:	e0 2d       	mov	r30, r0
   13726:	e0 93 68 27 	sts	0x2768, r30
   1372a:	f0 93 69 27 	sts	0x2769, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   1372e:	03 84       	ldd	r0, Z+11	; 0x0b
   13730:	f4 85       	ldd	r31, Z+12	; 0x0c
   13732:	e0 2d       	mov	r30, r0
   13734:	80 81       	ld	r24, Z
   13736:	91 81       	ldd	r25, Z+1	; 0x01
   13738:	2e ed       	ldi	r18, 0xDE	; 222
   1373a:	8d 3a       	cpi	r24, 0xAD	; 173
   1373c:	92 07       	cpc	r25, r18
   1373e:	11 f0       	breq	.+4      	; 0x13744 <sysTimerInterrupt+0xc6>
   {
      arb_stackOverflow();
   13740:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status of this thread from active to READY.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = READY;
   13744:	e0 91 68 27 	lds	r30, 0x2768
   13748:	f0 91 69 27 	lds	r31, 0x2769
   1374c:	11 82       	std	Z+1, r1	; 0x01
    *------------------------------------------------------------------------*/

   /*------------------------------------------------------------------------*
    * Update the system timer tick
    *------------------------------------------------------------------------*/
   if( gb_updateSysTime == true)
   1374e:	80 91 fd 22 	lds	r24, 0x22FD
   13752:	88 23       	and	r24, r24
   13754:	11 f0       	breq	.+4      	; 0x1375a <sysTimerInterrupt+0xdc>
      updateSystemTime();
   13756:	0e 94 ef 99 	call	0x133de	; 0x133de <updateSystemTime>

   /*------------------------------------------------------------------------*
    * Make sure the system time is updated on each call unless a timer
    * overflow interrupt occurred during a call to 'arb_sysTimeNow'.
    *------------------------------------------------------------------------*/
   gb_updateSysTime = true;
   1375a:	81 e0       	ldi	r24, 0x01	; 1
   1375c:	80 93 fd 22 	sts	0x22FD, r24

   /*------------------------------------------------------------------------*
    * Decrement the quantum counter for each of the sleeping threads.
    *------------------------------------------------------------------------*/
   arb_updateSleepingThreads();
   13760:	0e 94 ff 9f 	call	0x13ffe	; 0x13ffe <arb_updateSleepingThreads>

   /*------------------------------------------------------------------------*
    * See if there is a higher priority thread ready to run.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   13764:	e0 91 81 27 	lds	r30, 0x2781
   13768:	f0 91 82 27 	lds	r31, 0x2782
   1376c:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1376e:	e0 91 fe 22 	lds	r30, 0x22FE
   13772:	f0 91 ff 22 	lds	r31, 0x22FF
   13776:	06 80       	ldd	r0, Z+6	; 0x06
   13778:	f7 81       	ldd	r31, Z+7	; 0x07
   1377a:	e0 2d       	mov	r30, r0
   1377c:	01 90       	ld	r0, Z+
   1377e:	f0 81       	ld	r31, Z
   13780:	e0 2d       	mov	r30, r0
   13782:	e0 93 7f 27 	sts	0x277F, r30
   13786:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   1378a:	81 85       	ldd	r24, Z+9	; 0x09
   1378c:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   1378e:	82 85       	ldd	r24, Z+10	; 0x0a
   13790:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   13792:	ff 91       	pop	r31
      asm( "pop r30");
   13794:	ef 91       	pop	r30
      asm( "pop r29");
   13796:	df 91       	pop	r29
      asm( "pop r28");
   13798:	cf 91       	pop	r28
      asm( "pop r27");
   1379a:	bf 91       	pop	r27
      asm( "pop r26");
   1379c:	af 91       	pop	r26
      asm( "pop r25");
   1379e:	9f 91       	pop	r25
      asm( "pop r24");
   137a0:	8f 91       	pop	r24
      asm( "pop r23");
   137a2:	7f 91       	pop	r23
      asm( "pop r22");
   137a4:	6f 91       	pop	r22
      asm( "pop r21");
   137a6:	5f 91       	pop	r21
      asm( "pop r20");
   137a8:	4f 91       	pop	r20
      asm( "pop r19");
   137aa:	3f 91       	pop	r19
      asm( "pop r18");
   137ac:	2f 91       	pop	r18
      asm( "pop r17");
   137ae:	1f 91       	pop	r17
      asm( "pop r16");
   137b0:	0f 91       	pop	r16
      asm( "pop r15");
   137b2:	ff 90       	pop	r15
      asm( "pop r14");
   137b4:	ef 90       	pop	r14
      asm( "pop r13");
   137b6:	df 90       	pop	r13
      asm( "pop r12");
   137b8:	cf 90       	pop	r12
      asm( "pop r11");
   137ba:	bf 90       	pop	r11
      asm( "pop r10");
   137bc:	af 90       	pop	r10
      asm( "pop r9");
   137be:	9f 90       	pop	r9
      asm( "pop r8");
   137c0:	8f 90       	pop	r8
      asm( "pop r7");
   137c2:	7f 90       	pop	r7
      asm( "pop r6");
   137c4:	6f 90       	pop	r6
      asm( "pop r5");
   137c6:	5f 90       	pop	r5
      asm( "pop r4");
   137c8:	4f 90       	pop	r4
      asm( "pop r3");
   137ca:	3f 90       	pop	r3
      asm( "pop r2");
   137cc:	2f 90       	pop	r2
      asm( "pop r1");
   137ce:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   137d0:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   137d2:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   137d4:	0f 90       	pop	r0
    * other AVR's using a reti DOES NOT set the GIE bit in the status register
    * (SREG), rather it returns the PMIC to the state it had before enter-
    * ing the interrupt - which means untoggling the '.... Interrupt Executing
    * flag'.
    *------------------------------------------------------------------------*/
   HAL_RETI();
   137d6:	18 95       	reti

000137d8 <arb_sysMsecNow>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
uint64_t arb_sysMsecNow( void)
{
   return gt_sysTime.l_msec;
   137d8:	20 91 4c 27 	lds	r18, 0x274C
   137dc:	30 91 4d 27 	lds	r19, 0x274D
   137e0:	40 91 4e 27 	lds	r20, 0x274E
   137e4:	50 91 4f 27 	lds	r21, 0x274F
   137e8:	60 91 50 27 	lds	r22, 0x2750
   137ec:	70 91 51 27 	lds	r23, 0x2751
}/*End arb_sysMsecNow*/
   137f0:	80 91 52 27 	lds	r24, 0x2752
   137f4:	90 91 53 27 	lds	r25, 0x2753
   137f8:	08 95       	ret

000137fa <arb_sysMsecDelta>:

uint64_t arb_sysMsecDelta( uint64_t l_currTime,
                           uint64_t l_prevTime)
{
   137fa:	af 92       	push	r10
   137fc:	bf 92       	push	r11
   137fe:	cf 92       	push	r12
   13800:	df 92       	push	r13
   13802:	ef 92       	push	r14
   13804:	ff 92       	push	r15
   13806:	0f 93       	push	r16
   13808:	1f 93       	push	r17
   1380a:	cf 93       	push	r28
   1380c:	df 93       	push	r29
   int64_t l_delta;

   l_delta = (int64_t)l_currTime - (int64_t)l_prevTime;
   1380e:	e2 2f       	mov	r30, r18
   13810:	ea 19       	sub	r30, r10
   13812:	ae 2e       	mov	r10, r30
   13814:	f1 e0       	ldi	r31, 0x01	; 1
   13816:	2e 17       	cp	r18, r30
   13818:	08 f0       	brcs	.+2      	; 0x1381c <arb_sysMsecDelta+0x22>
   1381a:	f0 e0       	ldi	r31, 0x00	; 0
   1381c:	23 2f       	mov	r18, r19
   1381e:	2b 19       	sub	r18, r11
   13820:	e1 e0       	ldi	r30, 0x01	; 1
   13822:	32 17       	cp	r19, r18
   13824:	08 f0       	brcs	.+2      	; 0x13828 <arb_sysMsecDelta+0x2e>
   13826:	e0 e0       	ldi	r30, 0x00	; 0
   13828:	d2 2f       	mov	r29, r18
   1382a:	df 1b       	sub	r29, r31
   1382c:	31 e0       	ldi	r19, 0x01	; 1
   1382e:	2d 17       	cp	r18, r29
   13830:	08 f0       	brcs	.+2      	; 0x13834 <arb_sysMsecDelta+0x3a>
   13832:	30 e0       	ldi	r19, 0x00	; 0
   13834:	e3 2b       	or	r30, r19
   13836:	34 2f       	mov	r19, r20
   13838:	3c 19       	sub	r19, r12
   1383a:	21 e0       	ldi	r18, 0x01	; 1
   1383c:	43 17       	cp	r20, r19
   1383e:	08 f0       	brcs	.+2      	; 0x13842 <arb_sysMsecDelta+0x48>
   13840:	20 e0       	ldi	r18, 0x00	; 0
   13842:	c3 2f       	mov	r28, r19
   13844:	ce 1b       	sub	r28, r30
   13846:	41 e0       	ldi	r20, 0x01	; 1
   13848:	3c 17       	cp	r19, r28
   1384a:	08 f0       	brcs	.+2      	; 0x1384e <arb_sysMsecDelta+0x54>
   1384c:	40 e0       	ldi	r20, 0x00	; 0
   1384e:	24 2b       	or	r18, r20
   13850:	45 2f       	mov	r20, r21
   13852:	4d 19       	sub	r20, r13
   13854:	31 e0       	ldi	r19, 0x01	; 1
   13856:	54 17       	cp	r21, r20
   13858:	08 f0       	brcs	.+2      	; 0x1385c <arb_sysMsecDelta+0x62>
   1385a:	30 e0       	ldi	r19, 0x00	; 0
   1385c:	d4 2e       	mov	r13, r20
   1385e:	d2 1a       	sub	r13, r18
   13860:	21 e0       	ldi	r18, 0x01	; 1
   13862:	4d 15       	cp	r20, r13
   13864:	08 f0       	brcs	.+2      	; 0x13868 <arb_sysMsecDelta+0x6e>
   13866:	20 e0       	ldi	r18, 0x00	; 0
   13868:	32 2b       	or	r19, r18
   1386a:	46 2f       	mov	r20, r22
   1386c:	4e 19       	sub	r20, r14
   1386e:	21 e0       	ldi	r18, 0x01	; 1
   13870:	64 17       	cp	r22, r20
   13872:	08 f0       	brcs	.+2      	; 0x13876 <arb_sysMsecDelta+0x7c>
   13874:	20 e0       	ldi	r18, 0x00	; 0
   13876:	b4 2f       	mov	r27, r20
   13878:	b3 1b       	sub	r27, r19
   1387a:	31 e0       	ldi	r19, 0x01	; 1
   1387c:	4b 17       	cp	r20, r27
   1387e:	08 f0       	brcs	.+2      	; 0x13882 <arb_sysMsecDelta+0x88>
   13880:	30 e0       	ldi	r19, 0x00	; 0
   13882:	23 2b       	or	r18, r19
   13884:	47 2f       	mov	r20, r23
   13886:	4f 19       	sub	r20, r15
   13888:	31 e0       	ldi	r19, 0x01	; 1
   1388a:	74 17       	cp	r23, r20
   1388c:	08 f0       	brcs	.+2      	; 0x13890 <arb_sysMsecDelta+0x96>
   1388e:	30 e0       	ldi	r19, 0x00	; 0
   13890:	a4 2f       	mov	r26, r20
   13892:	a2 1b       	sub	r26, r18
   13894:	21 e0       	ldi	r18, 0x01	; 1
   13896:	4a 17       	cp	r20, r26
   13898:	08 f0       	brcs	.+2      	; 0x1389c <arb_sysMsecDelta+0xa2>
   1389a:	20 e0       	ldi	r18, 0x00	; 0
   1389c:	32 2b       	or	r19, r18
   1389e:	48 2f       	mov	r20, r24
   138a0:	40 1b       	sub	r20, r16
   138a2:	21 e0       	ldi	r18, 0x01	; 1
   138a4:	84 17       	cp	r24, r20
   138a6:	08 f0       	brcs	.+2      	; 0x138aa <arb_sysMsecDelta+0xb0>
   138a8:	20 e0       	ldi	r18, 0x00	; 0
   138aa:	f4 2f       	mov	r31, r20
   138ac:	f3 1b       	sub	r31, r19
   138ae:	81 e0       	ldi	r24, 0x01	; 1
   138b0:	4f 17       	cp	r20, r31
   138b2:	08 f0       	brcs	.+2      	; 0x138b6 <arb_sysMsecDelta+0xbc>
   138b4:	80 e0       	ldi	r24, 0x00	; 0
   138b6:	28 2b       	or	r18, r24
   138b8:	e9 2f       	mov	r30, r25
   138ba:	e1 1b       	sub	r30, r17
   138bc:	e2 1b       	sub	r30, r18
   138be:	2a 2d       	mov	r18, r10
   138c0:	3d 2f       	mov	r19, r29
   138c2:	4c 2f       	mov	r20, r28
   138c4:	5d 2d       	mov	r21, r13
   138c6:	6b 2f       	mov	r22, r27
   138c8:	7a 2f       	mov	r23, r26
   138ca:	8f 2f       	mov	r24, r31
   138cc:	9e 2f       	mov	r25, r30

   if( l_delta < 0)
   138ce:	e7 ff       	sbrs	r30, 7
   138d0:	32 c0       	rjmp	.+100    	; 0x13936 <arb_sysMsecDelta+0x13c>
      l_delta += ((int64_t)ARB_SYS_TIMER_MAX_MSEC);
   138d2:	20 58       	subi	r18, 0x80	; 128
   138d4:	31 e0       	ldi	r19, 0x01	; 1
   138d6:	2a 15       	cp	r18, r10
   138d8:	08 f0       	brcs	.+2      	; 0x138dc <arb_sysMsecDelta+0xe2>
   138da:	30 e0       	ldi	r19, 0x00	; 0
   138dc:	8d 2f       	mov	r24, r29
   138de:	82 51       	subi	r24, 0x12	; 18
   138e0:	41 e0       	ldi	r20, 0x01	; 1
   138e2:	8d 17       	cp	r24, r29
   138e4:	08 f0       	brcs	.+2      	; 0x138e8 <arb_sysMsecDelta+0xee>
   138e6:	40 e0       	ldi	r20, 0x00	; 0
   138e8:	38 0f       	add	r19, r24
   138ea:	91 e0       	ldi	r25, 0x01	; 1
   138ec:	38 17       	cp	r19, r24
   138ee:	08 f0       	brcs	.+2      	; 0x138f2 <arb_sysMsecDelta+0xf8>
   138f0:	90 e0       	ldi	r25, 0x00	; 0
   138f2:	49 2b       	or	r20, r25
   138f4:	8c 2f       	mov	r24, r28
   138f6:	8a 5c       	subi	r24, 0xCA	; 202
   138f8:	51 e0       	ldi	r21, 0x01	; 1
   138fa:	8c 17       	cp	r24, r28
   138fc:	08 f0       	brcs	.+2      	; 0x13900 <arb_sysMsecDelta+0x106>
   138fe:	50 e0       	ldi	r21, 0x00	; 0
   13900:	48 0f       	add	r20, r24
   13902:	91 e0       	ldi	r25, 0x01	; 1
   13904:	48 17       	cp	r20, r24
   13906:	08 f0       	brcs	.+2      	; 0x1390a <arb_sysMsecDelta+0x110>
   13908:	90 e0       	ldi	r25, 0x00	; 0
   1390a:	59 2b       	or	r21, r25
   1390c:	5d 0d       	add	r21, r13
   1390e:	61 e0       	ldi	r22, 0x01	; 1
   13910:	5d 15       	cp	r21, r13
   13912:	08 f0       	brcs	.+2      	; 0x13916 <arb_sysMsecDelta+0x11c>
   13914:	60 e0       	ldi	r22, 0x00	; 0
   13916:	6b 0f       	add	r22, r27
   13918:	71 e0       	ldi	r23, 0x01	; 1
   1391a:	6b 17       	cp	r22, r27
   1391c:	08 f0       	brcs	.+2      	; 0x13920 <arb_sysMsecDelta+0x126>
   1391e:	70 e0       	ldi	r23, 0x00	; 0
   13920:	7a 0f       	add	r23, r26
   13922:	81 e0       	ldi	r24, 0x01	; 1
   13924:	7a 17       	cp	r23, r26
   13926:	08 f0       	brcs	.+2      	; 0x1392a <arb_sysMsecDelta+0x130>
   13928:	80 e0       	ldi	r24, 0x00	; 0
   1392a:	8f 0f       	add	r24, r31
   1392c:	91 e0       	ldi	r25, 0x01	; 1
   1392e:	8f 17       	cp	r24, r31
   13930:	08 f0       	brcs	.+2      	; 0x13934 <arb_sysMsecDelta+0x13a>
   13932:	90 e0       	ldi	r25, 0x00	; 0
   13934:	9e 0f       	add	r25, r30

   return (uint64_t)l_delta;

}/*End arb_sysMsecDelta*/
   13936:	df 91       	pop	r29
   13938:	cf 91       	pop	r28
   1393a:	1f 91       	pop	r17
   1393c:	0f 91       	pop	r16
   1393e:	ff 90       	pop	r15
   13940:	ef 90       	pop	r14
   13942:	df 90       	pop	r13
   13944:	cf 90       	pop	r12
   13946:	bf 90       	pop	r11
   13948:	af 90       	pop	r10
   1394a:	08 95       	ret

0001394c <arb_sysTimerEnabled>:

bool arb_sysTimerEnabled( void)
{
   return gb_sysTimerEnabled;
}/*End arb_sysTimerEnabled*/
   1394c:	80 91 67 27 	lds	r24, 0x2767
   13950:	08 95       	ret

00013952 <arb_sysTimeNow>:

t_sysTime arb_sysTimeNow( void)
{
   13952:	2f 92       	push	r2
   13954:	3f 92       	push	r3
   13956:	4f 92       	push	r4
   13958:	5f 92       	push	r5
   1395a:	6f 92       	push	r6
   1395c:	7f 92       	push	r7
   1395e:	8f 92       	push	r8
   13960:	9f 92       	push	r9
   13962:	af 92       	push	r10
   13964:	bf 92       	push	r11
   13966:	cf 92       	push	r12
   13968:	df 92       	push	r13
   1396a:	ef 92       	push	r14
   1396c:	ff 92       	push	r15
   1396e:	0f 93       	push	r16
   13970:	1f 93       	push	r17
   13972:	cf 93       	push	r28
   13974:	df 93       	push	r29
   13976:	cd b7       	in	r28, 0x3d	; 61
   13978:	de b7       	in	r29, 0x3e	; 62
   1397a:	2c 97       	sbiw	r28, 0x0c	; 12
   1397c:	cd bf       	out	0x3d, r28	; 61
   1397e:	de bf       	out	0x3e, r29	; 62
   13980:	8c 01       	movw	r16, r24
   uint32_t i_temp;

   /*------------------------------------------------------------------------*
    * Momentarily disable interrupts while we read the system time
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   13982:	8f b7       	in	r24, 0x3f	; 63
   13984:	89 83       	std	Y+1, r24	; 0x01
   13986:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Has the timer period expired?
    *------------------------------------------------------------------------*/
   if( hal_getIntStatus( t_sysTimerHandle, OVERFLOW) > 0)
   13988:	80 91 65 27 	lds	r24, 0x2765
   1398c:	90 91 66 27 	lds	r25, 0x2766
   13990:	64 e0       	ldi	r22, 0x04	; 4
   13992:	0e 94 28 4b 	call	0x9650	; 0x9650 <hal_getIntStatus>
   13996:	18 16       	cp	r1, r24
   13998:	19 06       	cpc	r1, r25
   1399a:	24 f4       	brge	.+8      	; 0x139a4 <arb_sysTimeNow+0x52>
      /*---------------------------------------------------------------------*
       * Interrupt occurred while reading the system timer, therefore since
       * the system will vector to the interrupt routine only allow one update
       * of the system time.
       *---------------------------------------------------------------------*/
      gb_updateSysTime = false;
   1399c:	10 92 fd 22 	sts	0x22FD, r1
      updateSystemTime();
   139a0:	0e 94 ef 99 	call	0x133de	; 0x133de <updateSystemTime>
   }

   /*------------------------------------------------------------------------*
    * Read the timer register
    *------------------------------------------------------------------------*/
   s_curTick = hal_getTimerCount( t_sysTimerHandle);
   139a4:	80 91 65 27 	lds	r24, 0x2765
   139a8:	90 91 66 27 	lds	r25, 0x2766
   139ac:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <hal_getTimerCount>

   /*------------------------------------------------------------------------*
    * Get current time snapshot
    *------------------------------------------------------------------------*/
   t_currTime.l_ticks = gt_sysTime.l_ticks + (uint64_t)s_curTick;
   139b0:	4b 01       	movw	r8, r22
   139b2:	aa 24       	eor	r10, r10
   139b4:	bb 24       	eor	r11, r11
   139b6:	cc 24       	eor	r12, r12
   139b8:	dd 24       	eor	r13, r13
   139ba:	76 01       	movw	r14, r12
   139bc:	30 90 54 27 	lds	r3, 0x2754
   139c0:	90 91 55 27 	lds	r25, 0x2755
   139c4:	f0 91 56 27 	lds	r31, 0x2756
   139c8:	e0 91 57 27 	lds	r30, 0x2757
   139cc:	50 91 58 27 	lds	r21, 0x2758
   139d0:	40 91 59 27 	lds	r20, 0x2759
   139d4:	30 91 5a 27 	lds	r19, 0x275A
   139d8:	20 91 5b 27 	lds	r18, 0x275B
   139dc:	38 0c       	add	r3, r8
   139de:	a1 e0       	ldi	r26, 0x01	; 1
   139e0:	38 14       	cp	r3, r8
   139e2:	08 f0       	brcs	.+2      	; 0x139e6 <arb_sysTimeNow+0x94>
   139e4:	a0 e0       	ldi	r26, 0x00	; 0
   139e6:	99 0d       	add	r25, r9
   139e8:	81 e0       	ldi	r24, 0x01	; 1
   139ea:	99 15       	cp	r25, r9
   139ec:	08 f0       	brcs	.+2      	; 0x139f0 <arb_sysTimeNow+0x9e>
   139ee:	80 e0       	ldi	r24, 0x00	; 0
   139f0:	a9 0f       	add	r26, r25
   139f2:	aa 83       	std	Y+2, r26	; 0x02
   139f4:	a1 e0       	ldi	r26, 0x01	; 1
   139f6:	ba 81       	ldd	r27, Y+2	; 0x02
   139f8:	b9 17       	cp	r27, r25
   139fa:	08 f0       	brcs	.+2      	; 0x139fe <arb_sysTimeNow+0xac>
   139fc:	a0 e0       	ldi	r26, 0x00	; 0
   139fe:	8a 2b       	or	r24, r26
   13a00:	91 e0       	ldi	r25, 0x01	; 1
   13a02:	fa 15       	cp	r31, r10
   13a04:	08 f0       	brcs	.+2      	; 0x13a08 <arb_sysTimeNow+0xb6>
   13a06:	90 e0       	ldi	r25, 0x00	; 0
   13a08:	8f 0f       	add	r24, r31
   13a0a:	8b 83       	std	Y+3, r24	; 0x03
   13a0c:	81 e0       	ldi	r24, 0x01	; 1
   13a0e:	ab 81       	ldd	r26, Y+3	; 0x03
   13a10:	af 17       	cp	r26, r31
   13a12:	08 f0       	brcs	.+2      	; 0x13a16 <arb_sysTimeNow+0xc4>
   13a14:	80 e0       	ldi	r24, 0x00	; 0
   13a16:	98 2b       	or	r25, r24
   13a18:	81 e0       	ldi	r24, 0x01	; 1
   13a1a:	eb 15       	cp	r30, r11
   13a1c:	08 f0       	brcs	.+2      	; 0x13a20 <arb_sysTimeNow+0xce>
   13a1e:	80 e0       	ldi	r24, 0x00	; 0
   13a20:	9e 0f       	add	r25, r30
   13a22:	9c 83       	std	Y+4, r25	; 0x04
   13a24:	91 e0       	ldi	r25, 0x01	; 1
   13a26:	bc 81       	ldd	r27, Y+4	; 0x04
   13a28:	be 17       	cp	r27, r30
   13a2a:	08 f0       	brcs	.+2      	; 0x13a2e <arb_sysTimeNow+0xdc>
   13a2c:	90 e0       	ldi	r25, 0x00	; 0
   13a2e:	89 2b       	or	r24, r25
   13a30:	91 e0       	ldi	r25, 0x01	; 1
   13a32:	5c 15       	cp	r21, r12
   13a34:	08 f0       	brcs	.+2      	; 0x13a38 <arb_sysTimeNow+0xe6>
   13a36:	90 e0       	ldi	r25, 0x00	; 0
   13a38:	85 0f       	add	r24, r21
   13a3a:	8d 83       	std	Y+5, r24	; 0x05
   13a3c:	81 e0       	ldi	r24, 0x01	; 1
   13a3e:	ed 81       	ldd	r30, Y+5	; 0x05
   13a40:	e5 17       	cp	r30, r21
   13a42:	08 f0       	brcs	.+2      	; 0x13a46 <arb_sysTimeNow+0xf4>
   13a44:	80 e0       	ldi	r24, 0x00	; 0
   13a46:	98 2b       	or	r25, r24
   13a48:	81 e0       	ldi	r24, 0x01	; 1
   13a4a:	4d 15       	cp	r20, r13
   13a4c:	08 f0       	brcs	.+2      	; 0x13a50 <arb_sysTimeNow+0xfe>
   13a4e:	80 e0       	ldi	r24, 0x00	; 0
   13a50:	94 0f       	add	r25, r20
   13a52:	9e 83       	std	Y+6, r25	; 0x06
   13a54:	91 e0       	ldi	r25, 0x01	; 1
   13a56:	fe 81       	ldd	r31, Y+6	; 0x06
   13a58:	f4 17       	cp	r31, r20
   13a5a:	08 f0       	brcs	.+2      	; 0x13a5e <arb_sysTimeNow+0x10c>
   13a5c:	90 e0       	ldi	r25, 0x00	; 0
   13a5e:	89 2b       	or	r24, r25
   13a60:	91 e0       	ldi	r25, 0x01	; 1
   13a62:	3e 15       	cp	r19, r14
   13a64:	08 f0       	brcs	.+2      	; 0x13a68 <arb_sysTimeNow+0x116>
   13a66:	90 e0       	ldi	r25, 0x00	; 0
   13a68:	83 0f       	add	r24, r19
   13a6a:	8f 83       	std	Y+7, r24	; 0x07
   13a6c:	81 e0       	ldi	r24, 0x01	; 1
   13a6e:	4f 81       	ldd	r20, Y+7	; 0x07
   13a70:	43 17       	cp	r20, r19
   13a72:	08 f0       	brcs	.+2      	; 0x13a76 <arb_sysTimeNow+0x124>
   13a74:	80 e0       	ldi	r24, 0x00	; 0
   13a76:	29 2e       	mov	r2, r25
   13a78:	28 2a       	or	r2, r24
   13a7a:	22 0e       	add	r2, r18
   t_currTime.c_sec   = gt_sysTime.c_sec;
   13a7c:	50 91 60 27 	lds	r21, 0x2760
   13a80:	58 87       	std	Y+8, r21	; 0x08
   t_currTime.c_min   = gt_sysTime.c_min;
   13a82:	80 91 5f 27 	lds	r24, 0x275F
   13a86:	89 87       	std	Y+9, r24	; 0x09
   t_currTime.c_hours = gt_sysTime.c_hours;
   13a88:	90 91 5e 27 	lds	r25, 0x275E
   13a8c:	9a 87       	std	Y+10, r25	; 0x0a
   t_currTime.s_days  = gt_sysTime.s_days;
   13a8e:	a0 91 5c 27 	lds	r26, 0x275C
   13a92:	b0 91 5d 27 	lds	r27, 0x275D
   13a96:	ab 87       	std	Y+11, r26	; 0x0b
   13a98:	bc 87       	std	Y+12, r27	; 0x0c
   i_temp = (uint32_t)s_curTick*(uint32_t)ARB_SYS_TIMER_USEC_PER_TICK;
   13a9a:	cb 01       	movw	r24, r22
   13a9c:	a0 e0       	ldi	r26, 0x00	; 0
   13a9e:	b0 e0       	ldi	r27, 0x00	; 0
   13aa0:	88 0f       	add	r24, r24
   13aa2:	99 1f       	adc	r25, r25
   13aa4:	aa 1f       	adc	r26, r26
   13aa6:	bb 1f       	adc	r27, r27
   t_currTime.i_usec  = gt_sysTime.i_usec + i_temp;
   13aa8:	40 90 61 27 	lds	r4, 0x2761
   13aac:	50 90 62 27 	lds	r5, 0x2762
   13ab0:	60 90 63 27 	lds	r6, 0x2763
   13ab4:	70 90 64 27 	lds	r7, 0x2764
   13ab8:	48 0e       	add	r4, r24
   13aba:	59 1e       	adc	r5, r25
   13abc:	6a 1e       	adc	r6, r26
   13abe:	7b 1e       	adc	r7, r27
   t_currTime.l_msec  = gt_sysTime.l_msec + (uint64_t)(i_temp / 1000);
   13ac0:	bc 01       	movw	r22, r24
   13ac2:	cd 01       	movw	r24, r26
   13ac4:	28 ee       	ldi	r18, 0xE8	; 232
   13ac6:	33 e0       	ldi	r19, 0x03	; 3
   13ac8:	40 e0       	ldi	r20, 0x00	; 0
   13aca:	50 e0       	ldi	r21, 0x00	; 0
   13acc:	0e 94 73 b8 	call	0x170e6	; 0x170e6 <__udivmodsi4>
   13ad0:	49 01       	movw	r8, r18
   13ad2:	5a 01       	movw	r10, r20
   13ad4:	cc 24       	eor	r12, r12
   13ad6:	dd 24       	eor	r13, r13
   13ad8:	76 01       	movw	r14, r12
   13ada:	80 91 4c 27 	lds	r24, 0x274C
   13ade:	20 91 4d 27 	lds	r18, 0x274D
   13ae2:	90 91 4e 27 	lds	r25, 0x274E
   13ae6:	f0 91 4f 27 	lds	r31, 0x274F
   13aea:	50 91 50 27 	lds	r21, 0x2750
   13aee:	40 91 51 27 	lds	r20, 0x2751
   13af2:	30 91 52 27 	lds	r19, 0x2752
   13af6:	a0 91 53 27 	lds	r26, 0x2753
   13afa:	88 0d       	add	r24, r8
   13afc:	e1 e0       	ldi	r30, 0x01	; 1
   13afe:	88 15       	cp	r24, r8
   13b00:	08 f0       	brcs	.+2      	; 0x13b04 <arb_sysTimeNow+0x1b2>
   13b02:	e0 e0       	ldi	r30, 0x00	; 0
   13b04:	29 0d       	add	r18, r9
   13b06:	71 e0       	ldi	r23, 0x01	; 1
   13b08:	29 15       	cp	r18, r9
   13b0a:	08 f0       	brcs	.+2      	; 0x13b0e <arb_sysTimeNow+0x1bc>
   13b0c:	70 e0       	ldi	r23, 0x00	; 0
   13b0e:	e2 0f       	add	r30, r18
   13b10:	61 e0       	ldi	r22, 0x01	; 1
   13b12:	e2 17       	cp	r30, r18
   13b14:	08 f0       	brcs	.+2      	; 0x13b18 <arb_sysTimeNow+0x1c6>
   13b16:	60 e0       	ldi	r22, 0x00	; 0
   13b18:	76 2b       	or	r23, r22
   13b1a:	9a 0d       	add	r25, r10
   13b1c:	61 e0       	ldi	r22, 0x01	; 1
   13b1e:	9a 15       	cp	r25, r10
   13b20:	08 f0       	brcs	.+2      	; 0x13b24 <arb_sysTimeNow+0x1d2>
   13b22:	60 e0       	ldi	r22, 0x00	; 0
   13b24:	79 0f       	add	r23, r25
   13b26:	21 e0       	ldi	r18, 0x01	; 1
   13b28:	79 17       	cp	r23, r25
   13b2a:	08 f0       	brcs	.+2      	; 0x13b2e <arb_sysTimeNow+0x1dc>
   13b2c:	20 e0       	ldi	r18, 0x00	; 0
   13b2e:	62 2b       	or	r22, r18
   13b30:	2b 2d       	mov	r18, r11
   13b32:	2f 0f       	add	r18, r31
   13b34:	91 e0       	ldi	r25, 0x01	; 1
   13b36:	2b 15       	cp	r18, r11
   13b38:	08 f0       	brcs	.+2      	; 0x13b3c <arb_sysTimeNow+0x1ea>
   13b3a:	90 e0       	ldi	r25, 0x00	; 0
   13b3c:	62 0f       	add	r22, r18
   13b3e:	f1 e0       	ldi	r31, 0x01	; 1
   13b40:	62 17       	cp	r22, r18
   13b42:	08 f0       	brcs	.+2      	; 0x13b46 <arb_sysTimeNow+0x1f4>
   13b44:	f0 e0       	ldi	r31, 0x00	; 0
   13b46:	9f 2b       	or	r25, r31
   13b48:	21 e0       	ldi	r18, 0x01	; 1
   13b4a:	5c 15       	cp	r21, r12
   13b4c:	08 f0       	brcs	.+2      	; 0x13b50 <arb_sysTimeNow+0x1fe>
   13b4e:	20 e0       	ldi	r18, 0x00	; 0
   13b50:	f9 2f       	mov	r31, r25
   13b52:	f5 0f       	add	r31, r21
   13b54:	91 e0       	ldi	r25, 0x01	; 1
   13b56:	f5 17       	cp	r31, r21
   13b58:	08 f0       	brcs	.+2      	; 0x13b5c <arb_sysTimeNow+0x20a>
   13b5a:	90 e0       	ldi	r25, 0x00	; 0
   13b5c:	29 2b       	or	r18, r25
   13b5e:	91 e0       	ldi	r25, 0x01	; 1
   13b60:	4d 15       	cp	r20, r13
   13b62:	08 f0       	brcs	.+2      	; 0x13b66 <arb_sysTimeNow+0x214>
   13b64:	90 e0       	ldi	r25, 0x00	; 0
   13b66:	24 0f       	add	r18, r20
   13b68:	51 e0       	ldi	r21, 0x01	; 1
   13b6a:	24 17       	cp	r18, r20
   13b6c:	08 f0       	brcs	.+2      	; 0x13b70 <arb_sysTimeNow+0x21e>
   13b6e:	50 e0       	ldi	r21, 0x00	; 0
   13b70:	95 2b       	or	r25, r21
   13b72:	41 e0       	ldi	r20, 0x01	; 1
   13b74:	3e 15       	cp	r19, r14
   13b76:	08 f0       	brcs	.+2      	; 0x13b7a <arb_sysTimeNow+0x228>
   13b78:	40 e0       	ldi	r20, 0x00	; 0
   13b7a:	93 0f       	add	r25, r19
   13b7c:	51 e0       	ldi	r21, 0x01	; 1
   13b7e:	93 17       	cp	r25, r19
   13b80:	08 f0       	brcs	.+2      	; 0x13b84 <arb_sysTimeNow+0x232>
   13b82:	50 e0       	ldi	r21, 0x00	; 0
   13b84:	45 2b       	or	r20, r21
   13b86:	4a 0f       	add	r20, r26

   /*------------------------------------------------------------------------*
    * Re-enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   13b88:	39 81       	ldd	r19, Y+1	; 0x01
   13b8a:	3f bf       	out	0x3f, r19	; 63

   return t_currTime;
   13b8c:	d8 01       	movw	r26, r16
   13b8e:	8c 93       	st	X, r24
   13b90:	11 96       	adiw	r26, 0x01	; 1
   13b92:	ec 93       	st	X, r30
   13b94:	11 97       	sbiw	r26, 0x01	; 1
   13b96:	12 96       	adiw	r26, 0x02	; 2
   13b98:	7c 93       	st	X, r23
   13b9a:	12 97       	sbiw	r26, 0x02	; 2
   13b9c:	13 96       	adiw	r26, 0x03	; 3
   13b9e:	6c 93       	st	X, r22
   13ba0:	13 97       	sbiw	r26, 0x03	; 3
   13ba2:	14 96       	adiw	r26, 0x04	; 4
   13ba4:	fc 93       	st	X, r31
   13ba6:	14 97       	sbiw	r26, 0x04	; 4
   13ba8:	15 96       	adiw	r26, 0x05	; 5
   13baa:	2c 93       	st	X, r18
   13bac:	15 97       	sbiw	r26, 0x05	; 5
   13bae:	16 96       	adiw	r26, 0x06	; 6
   13bb0:	9c 93       	st	X, r25
   13bb2:	16 97       	sbiw	r26, 0x06	; 6
   13bb4:	17 96       	adiw	r26, 0x07	; 7
   13bb6:	4c 93       	st	X, r20
   13bb8:	17 97       	sbiw	r26, 0x07	; 7
   13bba:	18 96       	adiw	r26, 0x08	; 8
   13bbc:	3c 92       	st	X, r3
   13bbe:	18 97       	sbiw	r26, 0x08	; 8
   13bc0:	ea 81       	ldd	r30, Y+2	; 0x02
   13bc2:	19 96       	adiw	r26, 0x09	; 9
   13bc4:	ec 93       	st	X, r30
   13bc6:	19 97       	sbiw	r26, 0x09	; 9
   13bc8:	fb 81       	ldd	r31, Y+3	; 0x03
   13bca:	1a 96       	adiw	r26, 0x0a	; 10
   13bcc:	fc 93       	st	X, r31
   13bce:	1a 97       	sbiw	r26, 0x0a	; 10
   13bd0:	4c 81       	ldd	r20, Y+4	; 0x04
   13bd2:	1b 96       	adiw	r26, 0x0b	; 11
   13bd4:	4c 93       	st	X, r20
   13bd6:	1b 97       	sbiw	r26, 0x0b	; 11
   13bd8:	5d 81       	ldd	r21, Y+5	; 0x05
   13bda:	1c 96       	adiw	r26, 0x0c	; 12
   13bdc:	5c 93       	st	X, r21
   13bde:	1c 97       	sbiw	r26, 0x0c	; 12
   13be0:	8e 81       	ldd	r24, Y+6	; 0x06
   13be2:	1d 96       	adiw	r26, 0x0d	; 13
   13be4:	8c 93       	st	X, r24
   13be6:	1d 97       	sbiw	r26, 0x0d	; 13
   13be8:	9f 81       	ldd	r25, Y+7	; 0x07
   13bea:	1e 96       	adiw	r26, 0x0e	; 14
   13bec:	9c 93       	st	X, r25
   13bee:	1e 97       	sbiw	r26, 0x0e	; 14
   13bf0:	1f 96       	adiw	r26, 0x0f	; 15
   13bf2:	2c 92       	st	X, r2
   13bf4:	1f 97       	sbiw	r26, 0x0f	; 15
   13bf6:	eb 85       	ldd	r30, Y+11	; 0x0b
   13bf8:	fc 85       	ldd	r31, Y+12	; 0x0c
   13bfa:	50 96       	adiw	r26, 0x10	; 16
   13bfc:	ed 93       	st	X+, r30
   13bfe:	fc 93       	st	X, r31
   13c00:	51 97       	sbiw	r26, 0x11	; 17
   13c02:	fa 85       	ldd	r31, Y+10	; 0x0a
   13c04:	52 96       	adiw	r26, 0x12	; 18
   13c06:	fc 93       	st	X, r31
   13c08:	52 97       	sbiw	r26, 0x12	; 18
   13c0a:	49 85       	ldd	r20, Y+9	; 0x09
   13c0c:	53 96       	adiw	r26, 0x13	; 19
   13c0e:	4c 93       	st	X, r20
   13c10:	53 97       	sbiw	r26, 0x13	; 19
   13c12:	58 85       	ldd	r21, Y+8	; 0x08
   13c14:	54 96       	adiw	r26, 0x14	; 20
   13c16:	5c 93       	st	X, r21
   13c18:	54 97       	sbiw	r26, 0x14	; 20
   13c1a:	55 96       	adiw	r26, 0x15	; 21
   13c1c:	4d 92       	st	X+, r4
   13c1e:	5d 92       	st	X+, r5
   13c20:	6d 92       	st	X+, r6
   13c22:	7c 92       	st	X, r7
   13c24:	58 97       	sbiw	r26, 0x18	; 24

}/*End arb_sysTimeNow*/
   13c26:	c8 01       	movw	r24, r16
   13c28:	2c 96       	adiw	r28, 0x0c	; 12
   13c2a:	cd bf       	out	0x3d, r28	; 61
   13c2c:	de bf       	out	0x3e, r29	; 62
   13c2e:	df 91       	pop	r29
   13c30:	cf 91       	pop	r28
   13c32:	1f 91       	pop	r17
   13c34:	0f 91       	pop	r16
   13c36:	ff 90       	pop	r15
   13c38:	ef 90       	pop	r14
   13c3a:	df 90       	pop	r13
   13c3c:	cf 90       	pop	r12
   13c3e:	bf 90       	pop	r11
   13c40:	af 90       	pop	r10
   13c42:	9f 90       	pop	r9
   13c44:	8f 90       	pop	r8
   13c46:	7f 90       	pop	r7
   13c48:	6f 90       	pop	r6
   13c4a:	5f 90       	pop	r5
   13c4c:	4f 90       	pop	r4
   13c4e:	3f 90       	pop	r3
   13c50:	2f 90       	pop	r2
   13c52:	08 95       	ret

00013c54 <arb_setSysTime>:

void arb_setSysTime( uint8_t c_hours,
                     uint8_t c_min,
                     uint8_t c_sec)
{
   13c54:	cf 93       	push	r28
   13c56:	df 93       	push	r29
   13c58:	0f 92       	push	r0
   13c5a:	cd b7       	in	r28, 0x3d	; 61
   13c5c:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * Momentarily disable interrupts while we set the system time
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   13c5e:	9f b7       	in	r25, 0x3f	; 63
   13c60:	99 83       	std	Y+1, r25	; 0x01
   13c62:	f8 94       	cli

   gt_sysTime.l_ticks = 0;
   13c64:	10 92 54 27 	sts	0x2754, r1
   13c68:	10 92 55 27 	sts	0x2755, r1
   13c6c:	10 92 56 27 	sts	0x2756, r1
   13c70:	10 92 57 27 	sts	0x2757, r1
   13c74:	10 92 58 27 	sts	0x2758, r1
   13c78:	10 92 59 27 	sts	0x2759, r1
   13c7c:	10 92 5a 27 	sts	0x275A, r1
   13c80:	10 92 5b 27 	sts	0x275B, r1
   gt_sysTime.l_msec  = 0;
   13c84:	ec e4       	ldi	r30, 0x4C	; 76
   13c86:	f7 e2       	ldi	r31, 0x27	; 39
   13c88:	10 82       	st	Z, r1
   13c8a:	11 82       	std	Z+1, r1	; 0x01
   13c8c:	12 82       	std	Z+2, r1	; 0x02
   13c8e:	13 82       	std	Z+3, r1	; 0x03
   13c90:	14 82       	std	Z+4, r1	; 0x04
   13c92:	15 82       	std	Z+5, r1	; 0x05
   13c94:	16 82       	std	Z+6, r1	; 0x06
   13c96:	17 82       	std	Z+7, r1	; 0x07
   gt_sysTime.c_sec   = c_sec;
   13c98:	44 8b       	std	Z+20, r20	; 0x14
   gt_sysTime.c_min   = c_min;
   13c9a:	63 8b       	std	Z+19, r22	; 0x13
   gt_sysTime.c_hours = c_hours;
   13c9c:	82 8b       	std	Z+18, r24	; 0x12
   gt_sysTime.s_days  = 0;
   13c9e:	10 8a       	std	Z+16, r1	; 0x10
   13ca0:	11 8a       	std	Z+17, r1	; 0x11

   /*------------------------------------------------------------------------*
    * Re-enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   13ca2:	89 81       	ldd	r24, Y+1	; 0x01
   13ca4:	8f bf       	out	0x3f, r24	; 63

}/*End arb_setSysTime*/
   13ca6:	0f 90       	pop	r0
   13ca8:	df 91       	pop	r29
   13caa:	cf 91       	pop	r28
   13cac:	08 95       	ret

00013cae <arb_resetSysTime>:

void arb_resetSysTime( void)
{
   gt_sysTime.l_ticks = 0;
   13cae:	10 92 54 27 	sts	0x2754, r1
   13cb2:	10 92 55 27 	sts	0x2755, r1
   13cb6:	10 92 56 27 	sts	0x2756, r1
   13cba:	10 92 57 27 	sts	0x2757, r1
   13cbe:	10 92 58 27 	sts	0x2758, r1
   13cc2:	10 92 59 27 	sts	0x2759, r1
   13cc6:	10 92 5a 27 	sts	0x275A, r1
   13cca:	10 92 5b 27 	sts	0x275B, r1
   gt_sysTime.l_msec  = 0;
   13cce:	ec e4       	ldi	r30, 0x4C	; 76
   13cd0:	f7 e2       	ldi	r31, 0x27	; 39
   13cd2:	10 82       	st	Z, r1
   13cd4:	11 82       	std	Z+1, r1	; 0x01
   13cd6:	12 82       	std	Z+2, r1	; 0x02
   13cd8:	13 82       	std	Z+3, r1	; 0x03
   13cda:	14 82       	std	Z+4, r1	; 0x04
   13cdc:	15 82       	std	Z+5, r1	; 0x05
   13cde:	16 82       	std	Z+6, r1	; 0x06
   13ce0:	17 82       	std	Z+7, r1	; 0x07
   gt_sysTime.c_sec   = 0;
   13ce2:	14 8a       	std	Z+20, r1	; 0x14
   gt_sysTime.c_min   = 0;
   13ce4:	13 8a       	std	Z+19, r1	; 0x13
   gt_sysTime.c_hours = 0;
   13ce6:	12 8a       	std	Z+18, r1	; 0x12
   gt_sysTime.s_days  = 0;
   13ce8:	10 8a       	std	Z+16, r1	; 0x10
   13cea:	11 8a       	std	Z+17, r1	; 0x11

}/*End arb_resetSysTime*/
   13cec:	08 95       	ret

00013cee <arb_sysTimerStart>:

t_error arb_sysTimerStart( void)
{
   t_timerError t_err;

   t_err = hal_startTimer( t_sysTimerHandle);
   13cee:	80 91 65 27 	lds	r24, 0x2765
   13cf2:	90 91 66 27 	lds	r25, 0x2766
   13cf6:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <hal_startTimer>

   if( t_err < 0)
   13cfa:	87 fd       	sbrc	r24, 7
   13cfc:	07 c0       	rjmp	.+14     	; 0x13d0c <arb_sysTimerStart+0x1e>
      return ARB_HAL_ERROR;

   gb_sysTimerEnabled = true;
   13cfe:	81 e0       	ldi	r24, 0x01	; 1
   13d00:	80 93 67 27 	sts	0x2767, r24
   gb_updateSysTime = true;
   13d04:	80 93 fd 22 	sts	0x22FD, r24

   return ARB_PASSED;
   13d08:	80 e0       	ldi	r24, 0x00	; 0
   13d0a:	08 95       	ret
   t_timerError t_err;

   t_err = hal_startTimer( t_sysTimerHandle);

   if( t_err < 0)
      return ARB_HAL_ERROR;
   13d0c:	86 ef       	ldi	r24, 0xF6	; 246
   gb_sysTimerEnabled = true;
   gb_updateSysTime = true;

   return ARB_PASSED;

}/*End arb_sysTimerStart*/
   13d0e:	08 95       	ret

00013d10 <arb_sysTimerInit>:
   gb_sysTimerEnabled = false;

}/*End arb_sysTimerStop*/

void arb_sysTimerInit( t_timerModId t_timerId)
{
   13d10:	cf 93       	push	r28
   13d12:	df 93       	push	r29
   13d14:	cd b7       	in	r28, 0x3d	; 61
   13d16:	de b7       	in	r29, 0x3e	; 62
   13d18:	27 97       	sbiw	r28, 0x07	; 7
   13d1a:	cd bf       	out	0x3d, r28	; 61
   13d1c:	de bf       	out	0x3e, r29	; 62
   t_timerConfig t_config;

   /*------------------------------------------------------------------------*
    * Reset the system time
    *------------------------------------------------------------------------*/
   arb_resetSysTime();
   13d1e:	8f 83       	std	Y+7, r24	; 0x07
   13d20:	0e 94 57 9e 	call	0x13cae	; 0x13cae <arb_resetSysTime>

   t_sysTimerHandle = hal_requestTimer( t_timerId);
   13d24:	8f 81       	ldd	r24, Y+7	; 0x07
   13d26:	0e 94 93 48 	call	0x9126	; 0x9126 <hal_requestTimer>
   13d2a:	80 93 65 27 	sts	0x2765, r24
   13d2e:	90 93 66 27 	sts	0x2766, r25

   if( t_sysTimerHandle < 0)
   13d32:	80 91 65 27 	lds	r24, 0x2765
   13d36:	90 91 66 27 	lds	r25, 0x2766
   13d3a:	97 fd       	sbrc	r25, 7
   13d3c:	23 c0       	rjmp	.+70     	; 0x13d84 <arb_sysTimerInit+0x74>
   {
      exit(0);
   }/*End if( t_sysTimerHandle < 0)*/

   t_config.t_mode   = NORMAL;
   13d3e:	19 82       	std	Y+1, r1	; 0x01
   t_config.t_dir    = DIRECTION_UP;
   13d40:	1a 82       	std	Y+2, r1	; 0x02
   t_config.f_period = ARB_SYS_TIMER_PERIOD;
   13d42:	8a e0       	ldi	r24, 0x0A	; 10
   13d44:	97 ed       	ldi	r25, 0xD7	; 215
   13d46:	a3 e2       	ldi	r26, 0x23	; 35
   13d48:	bc e3       	ldi	r27, 0x3C	; 60
   13d4a:	8b 83       	std	Y+3, r24	; 0x03
   13d4c:	9c 83       	std	Y+4, r25	; 0x04
   13d4e:	ad 83       	std	Y+5, r26	; 0x05
   13d50:	be 83       	std	Y+6, r27	; 0x06

   if( hal_configureTimer( t_sysTimerHandle, t_config) < 0)
   13d52:	80 91 65 27 	lds	r24, 0x2765
   13d56:	90 91 66 27 	lds	r25, 0x2766
   13d5a:	20 e0       	ldi	r18, 0x00	; 0
   13d5c:	30 e0       	ldi	r19, 0x00	; 0
   13d5e:	4b 81       	ldd	r20, Y+3	; 0x03
   13d60:	5c 81       	ldd	r21, Y+4	; 0x04
   13d62:	6d 81       	ldd	r22, Y+5	; 0x05
   13d64:	7e 81       	ldd	r23, Y+6	; 0x06
   13d66:	0e 94 40 49 	call	0x9280	; 0x9280 <hal_configureTimer>
   13d6a:	87 fd       	sbrc	r24, 7
   13d6c:	0b c0       	rjmp	.+22     	; 0x13d84 <arb_sysTimerInit+0x74>
   {
      exit(0);
   }

   if( hal_requestTimerInterrupt( t_sysTimerHandle,
   13d6e:	80 91 65 27 	lds	r24, 0x2765
   13d72:	90 91 66 27 	lds	r25, 0x2766
   13d76:	64 e0       	ldi	r22, 0x04	; 4
   13d78:	4f e3       	ldi	r20, 0x3F	; 63
   13d7a:	5b e9       	ldi	r21, 0x9B	; 155
   13d7c:	0e 94 bf 47 	call	0x8f7e	; 0x8f7e <hal_requestTimerInterrupt>
   13d80:	87 ff       	sbrs	r24, 7
   13d82:	04 c0       	rjmp	.+8      	; 0x13d8c <arb_sysTimerInit+0x7c>
                                  OVERFLOW,
                                  &sysTimerInterrupt) < 0)
   {
      exit(0);
   13d84:	80 e0       	ldi	r24, 0x00	; 0
   13d86:	90 e0       	ldi	r25, 0x00	; 0
   13d88:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   }

}/*End arb_sysTimerInit*/
   13d8c:	27 96       	adiw	r28, 0x07	; 7
   13d8e:	cd bf       	out	0x3d, r28	; 61
   13d90:	de bf       	out	0x3e, r29	; 62
   13d92:	df 91       	pop	r29
   13d94:	cf 91       	pop	r28
   13d96:	08 95       	ret

00013d98 <arb_yieldFromSleepIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   13d98:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   13d9a:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   13d9c:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   13d9e:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   13da0:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   13da2:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   13da4:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   13da6:	0f 92       	push	r0
      asm( "push r1");
   13da8:	1f 92       	push	r1
      asm( "clr r1");
   13daa:	11 24       	eor	r1, r1
      asm( "push r2");
   13dac:	2f 92       	push	r2
      asm( "push r3");
   13dae:	3f 92       	push	r3
      asm( "push r4");
   13db0:	4f 92       	push	r4
      asm( "push r5");
   13db2:	5f 92       	push	r5
      asm( "push r6");
   13db4:	6f 92       	push	r6
      asm( "push r7");
   13db6:	7f 92       	push	r7
      asm( "push r8");
   13db8:	8f 92       	push	r8
      asm( "push r9");
   13dba:	9f 92       	push	r9
      asm( "push r10");
   13dbc:	af 92       	push	r10
      asm( "push r11");
   13dbe:	bf 92       	push	r11
      asm( "push r12");
   13dc0:	cf 92       	push	r12
      asm( "push r13");
   13dc2:	df 92       	push	r13
      asm( "push r14");
   13dc4:	ef 92       	push	r14
      asm( "push r15");
   13dc6:	ff 92       	push	r15
      asm( "push r16");
   13dc8:	0f 93       	push	r16
      asm( "push r17");
   13dca:	1f 93       	push	r17
      asm( "push r18");
   13dcc:	2f 93       	push	r18
      asm( "push r19");
   13dce:	3f 93       	push	r19
      asm( "push r20");
   13dd0:	4f 93       	push	r20
      asm( "push r21");
   13dd2:	5f 93       	push	r21
      asm( "push r22");
   13dd4:	6f 93       	push	r22
      asm( "push r23");
   13dd6:	7f 93       	push	r23
      asm( "push r24");
   13dd8:	8f 93       	push	r24
      asm( "push r25");
   13dda:	9f 93       	push	r25
      asm( "push r26");
   13ddc:	af 93       	push	r26
      asm( "push r27");
   13dde:	bf 93       	push	r27
      asm( "push r28");
   13de0:	cf 93       	push	r28
      asm( "push r29");
   13de2:	df 93       	push	r29
      asm( "push r30");
   13de4:	ef 93       	push	r30
      asm( "push r31");
   13de6:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13de8:	e0 91 fe 22 	lds	r30, 0x22FE
   13dec:	f0 91 ff 22 	lds	r31, 0x22FF
   13df0:	06 80       	ldd	r0, Z+6	; 0x06
   13df2:	f7 81       	ldd	r31, Z+7	; 0x07
   13df4:	e0 2d       	mov	r30, r0
   13df6:	01 90       	ld	r0, Z+
   13df8:	f0 81       	ld	r31, Z
   13dfa:	e0 2d       	mov	r30, r0
   13dfc:	e0 93 7f 27 	sts	0x277F, r30
   13e00:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   13e04:	2d b7       	in	r18, 0x3d	; 61
   13e06:	30 e0       	ldi	r19, 0x00	; 0
   13e08:	21 87       	std	Z+9, r18	; 0x09
   13e0a:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   13e0c:	4e b7       	in	r20, 0x3e	; 62
   13e0e:	94 2f       	mov	r25, r20
   13e10:	80 e0       	ldi	r24, 0x00	; 0
   13e12:	82 2b       	or	r24, r18
   13e14:	93 2b       	or	r25, r19
   13e16:	81 87       	std	Z+9, r24	; 0x09
   13e18:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13e1a:	8f ef       	ldi	r24, 0xFF	; 255
   13e1c:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13e1e:	8f e3       	ldi	r24, 0x3F	; 63
   13e20:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   13e22:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   13e26:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13e2a:	e0 91 fe 22 	lds	r30, 0x22FE
   13e2e:	f0 91 ff 22 	lds	r31, 0x22FF
   13e32:	06 80       	ldd	r0, Z+6	; 0x06
   13e34:	f7 81       	ldd	r31, Z+7	; 0x07
   13e36:	e0 2d       	mov	r30, r0
   13e38:	01 90       	ld	r0, Z+
   13e3a:	f0 81       	ld	r31, Z
   13e3c:	e0 2d       	mov	r30, r0
   13e3e:	e0 93 6a 27 	sts	0x276A, r30
   13e42:	f0 93 6b 27 	sts	0x276B, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   13e46:	03 84       	ldd	r0, Z+11	; 0x0b
   13e48:	f4 85       	ldd	r31, Z+12	; 0x0c
   13e4a:	e0 2d       	mov	r30, r0
   13e4c:	80 81       	ld	r24, Z
   13e4e:	91 81       	ldd	r25, Z+1	; 0x01
   13e50:	2e ed       	ldi	r18, 0xDE	; 222
   13e52:	8d 3a       	cpi	r24, 0xAD	; 173
   13e54:	92 07       	cpc	r25, r18
   13e56:	11 f0       	breq	.+4      	; 0x13e5c <arb_yieldFromSleepIntsOn+0xc4>
   {
      arb_stackOverflow();
   13e58:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   13e5c:	e0 91 81 27 	lds	r30, 0x2781
   13e60:	f0 91 82 27 	lds	r31, 0x2782
   13e64:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13e66:	e0 91 fe 22 	lds	r30, 0x22FE
   13e6a:	f0 91 ff 22 	lds	r31, 0x22FF
   13e6e:	06 80       	ldd	r0, Z+6	; 0x06
   13e70:	f7 81       	ldd	r31, Z+7	; 0x07
   13e72:	e0 2d       	mov	r30, r0
   13e74:	01 90       	ld	r0, Z+
   13e76:	f0 81       	ld	r31, Z
   13e78:	e0 2d       	mov	r30, r0
   13e7a:	e0 93 7f 27 	sts	0x277F, r30
   13e7e:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   13e82:	81 85       	ldd	r24, Z+9	; 0x09
   13e84:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   13e86:	82 85       	ldd	r24, Z+10	; 0x0a
   13e88:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   13e8a:	ff 91       	pop	r31
      asm( "pop r30");
   13e8c:	ef 91       	pop	r30
      asm( "pop r29");
   13e8e:	df 91       	pop	r29
      asm( "pop r28");
   13e90:	cf 91       	pop	r28
      asm( "pop r27");
   13e92:	bf 91       	pop	r27
      asm( "pop r26");
   13e94:	af 91       	pop	r26
      asm( "pop r25");
   13e96:	9f 91       	pop	r25
      asm( "pop r24");
   13e98:	8f 91       	pop	r24
      asm( "pop r23");
   13e9a:	7f 91       	pop	r23
      asm( "pop r22");
   13e9c:	6f 91       	pop	r22
      asm( "pop r21");
   13e9e:	5f 91       	pop	r21
      asm( "pop r20");
   13ea0:	4f 91       	pop	r20
      asm( "pop r19");
   13ea2:	3f 91       	pop	r19
      asm( "pop r18");
   13ea4:	2f 91       	pop	r18
      asm( "pop r17");
   13ea6:	1f 91       	pop	r17
      asm( "pop r16");
   13ea8:	0f 91       	pop	r16
      asm( "pop r15");
   13eaa:	ff 90       	pop	r15
      asm( "pop r14");
   13eac:	ef 90       	pop	r14
      asm( "pop r13");
   13eae:	df 90       	pop	r13
      asm( "pop r12");
   13eb0:	cf 90       	pop	r12
      asm( "pop r11");
   13eb2:	bf 90       	pop	r11
      asm( "pop r10");
   13eb4:	af 90       	pop	r10
      asm( "pop r9");
   13eb6:	9f 90       	pop	r9
      asm( "pop r8");
   13eb8:	8f 90       	pop	r8
      asm( "pop r7");
   13eba:	7f 90       	pop	r7
      asm( "pop r6");
   13ebc:	6f 90       	pop	r6
      asm( "pop r5");
   13ebe:	5f 90       	pop	r5
      asm( "pop r4");
   13ec0:	4f 90       	pop	r4
      asm( "pop r3");
   13ec2:	3f 90       	pop	r3
      asm( "pop r2");
   13ec4:	2f 90       	pop	r2
      asm( "pop r1");
   13ec6:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13ec8:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   13eca:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13ecc:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   13ece:	08 95       	ret

00013ed0 <arb_yieldFromSleepIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   13ed0:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   13ed2:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   13ed4:	0f 92       	push	r0
      asm( "push r1");
   13ed6:	1f 92       	push	r1
      asm( "clr r1");
   13ed8:	11 24       	eor	r1, r1
      asm( "push r2");
   13eda:	2f 92       	push	r2
      asm( "push r3");
   13edc:	3f 92       	push	r3
      asm( "push r4");
   13ede:	4f 92       	push	r4
      asm( "push r5");
   13ee0:	5f 92       	push	r5
      asm( "push r6");
   13ee2:	6f 92       	push	r6
      asm( "push r7");
   13ee4:	7f 92       	push	r7
      asm( "push r8");
   13ee6:	8f 92       	push	r8
      asm( "push r9");
   13ee8:	9f 92       	push	r9
      asm( "push r10");
   13eea:	af 92       	push	r10
      asm( "push r11");
   13eec:	bf 92       	push	r11
      asm( "push r12");
   13eee:	cf 92       	push	r12
      asm( "push r13");
   13ef0:	df 92       	push	r13
      asm( "push r14");
   13ef2:	ef 92       	push	r14
      asm( "push r15");
   13ef4:	ff 92       	push	r15
      asm( "push r16");
   13ef6:	0f 93       	push	r16
      asm( "push r17");
   13ef8:	1f 93       	push	r17
      asm( "push r18");
   13efa:	2f 93       	push	r18
      asm( "push r19");
   13efc:	3f 93       	push	r19
      asm( "push r20");
   13efe:	4f 93       	push	r20
      asm( "push r21");
   13f00:	5f 93       	push	r21
      asm( "push r22");
   13f02:	6f 93       	push	r22
      asm( "push r23");
   13f04:	7f 93       	push	r23
      asm( "push r24");
   13f06:	8f 93       	push	r24
      asm( "push r25");
   13f08:	9f 93       	push	r25
      asm( "push r26");
   13f0a:	af 93       	push	r26
      asm( "push r27");
   13f0c:	bf 93       	push	r27
      asm( "push r28");
   13f0e:	cf 93       	push	r28
      asm( "push r29");
   13f10:	df 93       	push	r29
      asm( "push r30");
   13f12:	ef 93       	push	r30
      asm( "push r31");
   13f14:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13f16:	e0 91 fe 22 	lds	r30, 0x22FE
   13f1a:	f0 91 ff 22 	lds	r31, 0x22FF
   13f1e:	06 80       	ldd	r0, Z+6	; 0x06
   13f20:	f7 81       	ldd	r31, Z+7	; 0x07
   13f22:	e0 2d       	mov	r30, r0
   13f24:	01 90       	ld	r0, Z+
   13f26:	f0 81       	ld	r31, Z
   13f28:	e0 2d       	mov	r30, r0
   13f2a:	e0 93 7f 27 	sts	0x277F, r30
   13f2e:	f0 93 80 27 	sts	0x2780, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   13f32:	2d b7       	in	r18, 0x3d	; 61
   13f34:	30 e0       	ldi	r19, 0x00	; 0
   13f36:	21 87       	std	Z+9, r18	; 0x09
   13f38:	32 87       	std	Z+10, r19	; 0x0a
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   13f3a:	4e b7       	in	r20, 0x3e	; 62
   13f3c:	94 2f       	mov	r25, r20
   13f3e:	80 e0       	ldi	r24, 0x00	; 0
   13f40:	82 2b       	or	r24, r18
   13f42:	93 2b       	or	r25, r19
   13f44:	81 87       	std	Z+9, r24	; 0x09
   13f46:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13f48:	8f ef       	ldi	r24, 0xFF	; 255
   13f4a:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13f4c:	8f e3       	ldi	r24, 0x3F	; 63
   13f4e:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   13f50:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   13f54:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13f58:	e0 91 fe 22 	lds	r30, 0x22FE
   13f5c:	f0 91 ff 22 	lds	r31, 0x22FF
   13f60:	06 80       	ldd	r0, Z+6	; 0x06
   13f62:	f7 81       	ldd	r31, Z+7	; 0x07
   13f64:	e0 2d       	mov	r30, r0
   13f66:	01 90       	ld	r0, Z+
   13f68:	f0 81       	ld	r31, Z
   13f6a:	e0 2d       	mov	r30, r0
   13f6c:	e0 93 6a 27 	sts	0x276A, r30
   13f70:	f0 93 6b 27 	sts	0x276B, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   13f74:	03 84       	ldd	r0, Z+11	; 0x0b
   13f76:	f4 85       	ldd	r31, Z+12	; 0x0c
   13f78:	e0 2d       	mov	r30, r0
   13f7a:	80 81       	ld	r24, Z
   13f7c:	91 81       	ldd	r25, Z+1	; 0x01
   13f7e:	2e ed       	ldi	r18, 0xDE	; 222
   13f80:	8d 3a       	cpi	r24, 0xAD	; 173
   13f82:	92 07       	cpc	r25, r18
   13f84:	11 f0       	breq	.+4      	; 0x13f8a <arb_yieldFromSleepIntsOff+0xba>
   {
      arb_stackOverflow();
   13f86:	0e 94 19 86 	call	0x10c32	; 0x10c32 <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   13f8a:	e0 91 81 27 	lds	r30, 0x2781
   13f8e:	f0 91 82 27 	lds	r31, 0x2782
   13f92:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13f94:	e0 91 fe 22 	lds	r30, 0x22FE
   13f98:	f0 91 ff 22 	lds	r31, 0x22FF
   13f9c:	06 80       	ldd	r0, Z+6	; 0x06
   13f9e:	f7 81       	ldd	r31, Z+7	; 0x07
   13fa0:	e0 2d       	mov	r30, r0
   13fa2:	01 90       	ld	r0, Z+
   13fa4:	f0 81       	ld	r31, Z
   13fa6:	e0 2d       	mov	r30, r0
   13fa8:	e0 93 7f 27 	sts	0x277F, r30
   13fac:	f0 93 80 27 	sts	0x2780, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   13fb0:	81 85       	ldd	r24, Z+9	; 0x09
   13fb2:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   13fb4:	82 85       	ldd	r24, Z+10	; 0x0a
   13fb6:	8e bf       	out	0x3e, r24	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   13fb8:	ff 91       	pop	r31
      asm( "pop r30");
   13fba:	ef 91       	pop	r30
      asm( "pop r29");
   13fbc:	df 91       	pop	r29
      asm( "pop r28");
   13fbe:	cf 91       	pop	r28
      asm( "pop r27");
   13fc0:	bf 91       	pop	r27
      asm( "pop r26");
   13fc2:	af 91       	pop	r26
      asm( "pop r25");
   13fc4:	9f 91       	pop	r25
      asm( "pop r24");
   13fc6:	8f 91       	pop	r24
      asm( "pop r23");
   13fc8:	7f 91       	pop	r23
      asm( "pop r22");
   13fca:	6f 91       	pop	r22
      asm( "pop r21");
   13fcc:	5f 91       	pop	r21
      asm( "pop r20");
   13fce:	4f 91       	pop	r20
      asm( "pop r19");
   13fd0:	3f 91       	pop	r19
      asm( "pop r18");
   13fd2:	2f 91       	pop	r18
      asm( "pop r17");
   13fd4:	1f 91       	pop	r17
      asm( "pop r16");
   13fd6:	0f 91       	pop	r16
      asm( "pop r15");
   13fd8:	ff 90       	pop	r15
      asm( "pop r14");
   13fda:	ef 90       	pop	r14
      asm( "pop r13");
   13fdc:	df 90       	pop	r13
      asm( "pop r12");
   13fde:	cf 90       	pop	r12
      asm( "pop r11");
   13fe0:	bf 90       	pop	r11
      asm( "pop r10");
   13fe2:	af 90       	pop	r10
      asm( "pop r9");
   13fe4:	9f 90       	pop	r9
      asm( "pop r8");
   13fe6:	8f 90       	pop	r8
      asm( "pop r7");
   13fe8:	7f 90       	pop	r7
      asm( "pop r6");
   13fea:	6f 90       	pop	r6
      asm( "pop r5");
   13fec:	5f 90       	pop	r5
      asm( "pop r4");
   13fee:	4f 90       	pop	r4
      asm( "pop r3");
   13ff0:	3f 90       	pop	r3
      asm( "pop r2");
   13ff2:	2f 90       	pop	r2
      asm( "pop r1");
   13ff4:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13ff6:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   13ff8:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13ffa:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   13ffc:	08 95       	ret

00013ffe <arb_updateSleepingThreads>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_updateSleepingThreads( void)
{
   13ffe:	cf 93       	push	r28
   14000:	df 93       	push	r29
   14002:	0f 92       	push	r0
   14004:	0f 92       	push	r0
   14006:	cd b7       	in	r28, 0x3d	; 61
   14008:	de b7       	in	r29, 0x3e	; 62

	/*------------------------------------------------------------------------*
	 * Starting with the head of the list, loop through all the threads
    * and update the ones that are sleeping.
	 *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   1400a:	e0 91 fe 22 	lds	r30, 0x22FE
   1400e:	f0 91 ff 22 	lds	r31, 0x22FF
   14012:	82 81       	ldd	r24, Z+2	; 0x02
   14014:	93 81       	ldd	r25, Z+3	; 0x03
   14016:	e0 91 fe 22 	lds	r30, 0x22FE
   1401a:	f0 91 ff 22 	lds	r31, 0x22FF
   1401e:	15 c0       	rjmp	.+42     	; 0x1404a <arb_updateSleepingThreads+0x4c>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   14020:	e9 81       	ldd	r30, Y+1	; 0x01
   14022:	fa 81       	ldd	r31, Y+2	; 0x02
   14024:	01 90       	ld	r0, Z+
   14026:	f0 81       	ld	r31, Z
   14028:	e0 2d       	mov	r30, r0
      if( pt_temp->t_status == SLEEPING)
   1402a:	21 81       	ldd	r18, Z+1	; 0x01
   1402c:	23 30       	cpi	r18, 0x03	; 3
   1402e:	51 f4       	brne	.+20     	; 0x14044 <arb_updateSleepingThreads+0x46>
      {
         pt_temp->s_quantum--;
   14030:	23 81       	ldd	r18, Z+3	; 0x03
   14032:	34 81       	ldd	r19, Z+4	; 0x04
   14034:	21 50       	subi	r18, 0x01	; 1
   14036:	30 40       	sbci	r19, 0x00	; 0
   14038:	23 83       	std	Z+3, r18	; 0x03
   1403a:	34 83       	std	Z+4, r19	; 0x04

         /*------------------------------------------------------------------*
          * Are we done with our nap?
          *------------------------------------------------------------------*/
         if( pt_temp->s_quantum <= 0)
   1403c:	21 15       	cp	r18, r1
   1403e:	31 05       	cpc	r19, r1
   14040:	09 f4       	brne	.+2      	; 0x14044 <arb_updateSleepingThreads+0x46>
         {
            pt_temp->t_status = READY;
   14042:	11 82       	std	Z+1, r1	; 0x01

	/*------------------------------------------------------------------------*
	 * Starting with the head of the list, loop through all the threads
    * and update the ones that are sleeping.
	 *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   14044:	01 97       	sbiw	r24, 0x01	; 1
   14046:	e9 81       	ldd	r30, Y+1	; 0x01
   14048:	fa 81       	ldd	r31, Y+2	; 0x02
   1404a:	20 85       	ldd	r18, Z+8	; 0x08
   1404c:	31 85       	ldd	r19, Z+9	; 0x09
   1404e:	29 83       	std	Y+1, r18	; 0x01
   14050:	3a 83       	std	Y+2, r19	; 0x02
   14052:	00 97       	sbiw	r24, 0x00	; 0
   14054:	29 f7       	brne	.-54     	; 0x14020 <arb_updateSleepingThreads+0x22>
         }/*End if( pt_temp->s_quantum <= 0)*/

      }/*End if( pt_temp->t_status == SLEEPING)*/
   }

}/*End arb_updateSleepingThreads*/
   14056:	0f 90       	pop	r0
   14058:	0f 90       	pop	r0
   1405a:	df 91       	pop	r29
   1405c:	cf 91       	pop	r28
   1405e:	08 95       	ret

00014060 <arb_sleep>:

void arb_sleep( const uint16_t s_quantum)
{
   t_tcb *pt_temp;

   if( HAL_ARE_INTS_EN()) /*Interrupts enabled?*/
   14060:	0f b6       	in	r0, 0x3f	; 63
   14062:	07 fe       	sbrs	r0, 7
   14064:	12 c0       	rjmp	.+36     	; 0x1408a <arb_sleep+0x2a>
   {

      /*---------------------------------------------------------------------*
       * Mutual exclusion
       *---------------------------------------------------------------------*/
      HAL_CLI();
   14066:	f8 94       	cli

      /*---------------------------------------------------------------------*
       * Record the time to sleep. i.e. 1 quantum is 1 timer period.
       *---------------------------------------------------------------------*/
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   14068:	e0 91 fe 22 	lds	r30, 0x22FE
   1406c:	f0 91 ff 22 	lds	r31, 0x22FF
   14070:	06 80       	ldd	r0, Z+6	; 0x06
   14072:	f7 81       	ldd	r31, Z+7	; 0x07
   14074:	e0 2d       	mov	r30, r0
   14076:	01 90       	ld	r0, Z+
   14078:	f0 81       	ld	r31, Z
   1407a:	e0 2d       	mov	r30, r0
      pt_temp->s_quantum = s_quantum;
   1407c:	83 83       	std	Z+3, r24	; 0x03
   1407e:	94 83       	std	Z+4, r25	; 0x04
      pt_temp->t_status  = SLEEPING;
   14080:	83 e0       	ldi	r24, 0x03	; 3
   14082:	81 83       	std	Z+1, r24	; 0x01
       * Calling yield from within the sleep routine will cause everything up
       * to this point to be remembered and pushed onto the thread's stack.
       * This thread will give up its time slice and when it wakes the OS will
       * return to the next instruction after the 'yield' call.
       *---------------------------------------------------------------------*/
      arb_yieldFromSleepIntsOn(); /*Give up the current thread's time slice*/
   14084:	0e 94 cc 9e 	call	0x13d98	; 0x13d98 <arb_yieldFromSleepIntsOn>
   14088:	08 95       	ret
   else
   {
      /*---------------------------------------------------------------------*
       * Record the time to sleep. i.e. 1 quantum is 1 timer period.
       *---------------------------------------------------------------------*/
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1408a:	e0 91 fe 22 	lds	r30, 0x22FE
   1408e:	f0 91 ff 22 	lds	r31, 0x22FF
   14092:	06 80       	ldd	r0, Z+6	; 0x06
   14094:	f7 81       	ldd	r31, Z+7	; 0x07
   14096:	e0 2d       	mov	r30, r0
   14098:	01 90       	ld	r0, Z+
   1409a:	f0 81       	ld	r31, Z
   1409c:	e0 2d       	mov	r30, r0
      pt_temp->s_quantum = s_quantum;
   1409e:	83 83       	std	Z+3, r24	; 0x03
   140a0:	94 83       	std	Z+4, r25	; 0x04
      pt_temp->t_status  = SLEEPING;
   140a2:	83 e0       	ldi	r24, 0x03	; 3
   140a4:	81 83       	std	Z+1, r24	; 0x01
       * Calling yield from within the sleep routine will cause everything up
       * to this point to be remembered and pushed onto the thread's stack.
       * This thread will give up its time slice and when it wakes the OS will
       * return to the next instruction after the 'yield' call.
       *---------------------------------------------------------------------*/
      arb_yieldFromSleepIntsOff(); /*Give up the current thread's time slice*/
   140a6:	0e 94 68 9f 	call	0x13ed0	; 0x13ed0 <arb_yieldFromSleepIntsOff>
   140aa:	08 95       	ret

000140ac <arb_threadCreate>:
                               t_parameters t_parms,
                               t_arguments t_args,
                               t_stackSize t_stack,
                               t_thrdPrio t_priority)

{
   140ac:	4f 92       	push	r4
   140ae:	5f 92       	push	r5
   140b0:	6f 92       	push	r6
   140b2:	7f 92       	push	r7
   140b4:	8f 92       	push	r8
   140b6:	9f 92       	push	r9
   140b8:	af 92       	push	r10
   140ba:	bf 92       	push	r11
   140bc:	cf 92       	push	r12
   140be:	df 92       	push	r13
   140c0:	ef 92       	push	r14
   140c2:	ff 92       	push	r15
   140c4:	0f 93       	push	r16
   140c6:	1f 93       	push	r17
   140c8:	cf 93       	push	r28
   140ca:	df 93       	push	r29
   140cc:	00 d0       	rcall	.+0      	; 0x140ce <arb_threadCreate+0x22>
   140ce:	cd b7       	in	r28, 0x3d	; 61
   140d0:	de b7       	in	r29, 0x3e	; 62
   140d2:	2c 01       	movw	r4, r24
   140d4:	4b 01       	movw	r8, r22
   140d6:	3a 01       	movw	r6, r20
   140d8:	59 01       	movw	r10, r18
   140da:	e0 2e       	mov	r14, r16
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   140dc:	8f b7       	in	r24, 0x3f	; 63
   140de:	89 83       	std	Y+1, r24	; 0x01
   140e0:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * See if this thread has the same priority as another.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   140e2:	e0 91 fe 22 	lds	r30, 0x22FE
   140e6:	f0 91 ff 22 	lds	r31, 0x22FF
   140ea:	22 81       	ldd	r18, Z+2	; 0x02
   140ec:	33 81       	ldd	r19, Z+3	; 0x03
   140ee:	e0 91 fe 22 	lds	r30, 0x22FE
   140f2:	f0 91 ff 22 	lds	r31, 0x22FF
   140f6:	11 c0       	rjmp	.+34     	; 0x1411a <arb_threadCreate+0x6e>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   140f8:	ea 81       	ldd	r30, Y+2	; 0x02
   140fa:	fb 81       	ldd	r31, Y+3	; 0x03
      if( pt_temp->t_priority == t_priority)
   140fc:	01 90       	ld	r0, Z+
   140fe:	f0 81       	ld	r31, Z
   14100:	e0 2d       	mov	r30, r0
   14102:	82 81       	ldd	r24, Z+2	; 0x02
   14104:	8e 15       	cp	r24, r14
   14106:	29 f4       	brne	.+10     	; 0x14112 <arb_threadCreate+0x66>
      {
         HAL_END_CRITICAL();
   14108:	89 81       	ldd	r24, Y+1	; 0x01
   1410a:	8f bf       	out	0x3f, r24	; 63
         return (t_THRDHANDLE)ARB_INVALID_PRIORITY;
   1410c:	88 ef       	ldi	r24, 0xF8	; 248
   1410e:	9f ef       	ldi	r25, 0xFF	; 255
   14110:	54 c0       	rjmp	.+168    	; 0x141ba <arb_threadCreate+0x10e>
   HAL_BEGIN_CRITICAL();

   /*------------------------------------------------------------------------*
    * See if this thread has the same priority as another.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   14112:	21 50       	subi	r18, 0x01	; 1
   14114:	30 40       	sbci	r19, 0x00	; 0
   14116:	ea 81       	ldd	r30, Y+2	; 0x02
   14118:	fb 81       	ldd	r31, Y+3	; 0x03
   1411a:	80 85       	ldd	r24, Z+8	; 0x08
   1411c:	91 85       	ldd	r25, Z+9	; 0x09
   1411e:	8a 83       	std	Y+2, r24	; 0x02
   14120:	9b 83       	std	Y+3, r25	; 0x03
   14122:	21 15       	cp	r18, r1
   14124:	31 05       	cpc	r19, r1
   14126:	41 f7       	brne	.-48     	; 0x140f8 <arb_threadCreate+0x4c>
   }

   /*------------------------------------------------------------------------*
    * Create a new link handle with room at the end for the thread's stack...
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_tcb) + (uint16_t)t_stack +
   14128:	c5 01       	movw	r24, r10
   1412a:	ca 96       	adiw	r24, 0x3a	; 58
   1412c:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   14130:	8a 83       	std	Y+2, r24	; 0x02
   14132:	9b 83       	std	Y+3, r25	; 0x03
   (uint16_t)ARB_EXTRA_STACK_BYTES);

   if( t_linkHndl < 0)
   14134:	8a 81       	ldd	r24, Y+2	; 0x02
   14136:	9b 81       	ldd	r25, Y+3	; 0x03
   14138:	97 ff       	sbrs	r25, 7
   1413a:	05 c0       	rjmp	.+10     	; 0x14146 <arb_threadCreate+0x9a>
   {
      HAL_END_CRITICAL();//Enable interrupts
   1413c:	89 81       	ldd	r24, Y+1	; 0x01
   1413e:	8f bf       	out	0x3f, r24	; 63
      return (t_THRDHANDLE)ARB_OUT_OF_HEAP;
   14140:	8f ef       	ldi	r24, 0xFF	; 255
   14142:	9f ef       	ldi	r25, 0xFF	; 255
   14144:	3a c0       	rjmp	.+116    	; 0x141ba <arb_threadCreate+0x10e>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the thread is stored.
    *------------------------------------------------------------------------*/
   pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   14146:	ea 81       	ldd	r30, Y+2	; 0x02
   14148:	fb 81       	ldd	r31, Y+3	; 0x03
   1414a:	c0 80       	ld	r12, Z
   1414c:	d1 80       	ldd	r13, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * Initialize the stack ptr to the location of the buffer which starts
    * with the adjacent address location.
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->ps_stack = (uint16_t *)((&(*pt_newTcb)->ps_stack) + 1);
   1414e:	c6 01       	movw	r24, r12
   14150:	0d 96       	adiw	r24, 0x0d	; 13
   14152:	f6 01       	movw	r30, r12
   14154:	83 87       	std	Z+11, r24	; 0x0b
   14156:	94 87       	std	Z+12, r25	; 0x0c

   /*------------------------------------------------------------------------*
    * Insert the overflow checksum at the start of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->ps_stack[0] = ARB_STACK_OVERFLOW_CHECK;
   14158:	2d ea       	ldi	r18, 0xAD	; 173
   1415a:	3e ed       	ldi	r19, 0xDE	; 222
   1415c:	25 87       	std	Z+13, r18	; 0x0d
   1415e:	36 87       	std	Z+14, r19	; 0x0e
   pc_stackPtr = (uint8_t *)&(*pt_newTcb)->ps_stack[0];

   /*------------------------------------------------------------------------*
    * Save the starting address of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_stackStart = (uint16_t)pc_stackPtr;
   14160:	85 83       	std	Z+5, r24	; 0x05
   14162:	96 83       	std	Z+6, r25	; 0x06

   /*------------------------------------------------------------------------*
    * Point to the last byte in the stack
    *------------------------------------------------------------------------*/
   pc_stackPtr = (pc_stackPtr + t_stack + ARB_EXTRA_STACK_BYTES) - 1;
   14164:	85 01       	movw	r16, r10
   14166:	04 5d       	subi	r16, 0xD4	; 212
   14168:	1f 4f       	sbci	r17, 0xFF	; 255
   1416a:	08 0f       	add	r16, r24
   1416c:	19 1f       	adc	r17, r25

   /*------------------------------------------------------------------------*
    * Save the ending address of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_stackEnd = (uint16_t)pc_stackPtr;
   1416e:	07 83       	std	Z+7, r16	; 0x07
   14170:	10 87       	std	Z+8, r17	; 0x08

   /*------------------------------------------------------------------------*
    * Store the new thread's priority
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->t_priority = t_priority;
   14172:	e2 82       	std	Z+2, r14	; 0x02

   /*------------------------------------------------------------------------*
    * Make sure the thread is ready to run
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->t_status = INITIALIZED;
   14174:	84 e0       	ldi	r24, 0x04	; 4
   14176:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * This thread is not sleeping
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_quantum = 0;
   14178:	13 82       	std	Z+3, r1	; 0x03
   1417a:	14 82       	std	Z+4, r1	; 0x04

   /*------------------------------------------------------------------------*
    * Initialize the stack's CPU registers so that a context restore works
    * correctly the first time call the newly allocated thread.
    *------------------------------------------------------------------------*/
   hal_initThreadStack( pt_function,
   1417c:	89 e0       	ldi	r24, 0x09	; 9
   1417e:	e8 2e       	mov	r14, r24
   14180:	f1 2c       	mov	r15, r1
   14182:	ec 0c       	add	r14, r12
   14184:	fd 1c       	adc	r15, r13
   14186:	c2 01       	movw	r24, r4
   14188:	b4 01       	movw	r22, r8
   1418a:	a3 01       	movw	r20, r6
   1418c:	98 01       	movw	r18, r16
   1418e:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <hal_initThreadStack>
                        &(*pt_newTcb)->s_sP);

   /*------------------------------------------------------------------------*
    * Use this number as the thread identification number
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->c_id = UTL_GET_NUM_LINKS_CONT( gt_activeThreads);
   14192:	e0 91 fe 22 	lds	r30, 0x22FE
   14196:	f0 91 ff 22 	lds	r31, 0x22FF
   1419a:	82 81       	ldd	r24, Z+2	; 0x02
   1419c:	f6 01       	movw	r30, r12
   1419e:	80 83       	st	Z, r24

   /*---------------------------------------------------------------------*
    * Add the thread 'link' onto the list containing all the open threads
    * on the system.
    *---------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeThreads,
   141a0:	80 91 fe 22 	lds	r24, 0x22FE
   141a4:	90 91 ff 22 	lds	r25, 0x22FF
   141a8:	6a 81       	ldd	r22, Y+2	; 0x02
   141aa:	7b 81       	ldd	r23, Y+3	; 0x03
   141ac:	41 e0       	ldi	r20, 0x01	; 1
   141ae:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_linkHndl,
                           true);

   HAL_END_CRITICAL();
   141b2:	89 81       	ldd	r24, Y+1	; 0x01
   141b4:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Return the 'link' to the allocated thread.
    *------------------------------------------------------------------------*/
   return (t_THRDHANDLE)t_linkHndl;
   141b6:	8a 81       	ldd	r24, Y+2	; 0x02
   141b8:	9b 81       	ldd	r25, Y+3	; 0x03

}/*End arb_threadCreate*/
   141ba:	23 96       	adiw	r28, 0x03	; 3
   141bc:	cd bf       	out	0x3d, r28	; 61
   141be:	de bf       	out	0x3e, r29	; 62
   141c0:	df 91       	pop	r29
   141c2:	cf 91       	pop	r28
   141c4:	1f 91       	pop	r17
   141c6:	0f 91       	pop	r16
   141c8:	ff 90       	pop	r15
   141ca:	ef 90       	pop	r14
   141cc:	df 90       	pop	r13
   141ce:	cf 90       	pop	r12
   141d0:	bf 90       	pop	r11
   141d2:	af 90       	pop	r10
   141d4:	9f 90       	pop	r9
   141d6:	8f 90       	pop	r8
   141d8:	7f 90       	pop	r7
   141da:	6f 90       	pop	r6
   141dc:	5f 90       	pop	r5
   141de:	4f 90       	pop	r4
   141e0:	08 95       	ret

000141e2 <utl_getBufferFullLevel>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
int16_t utl_getBufferFullLevel( t_BUFFHANDLE t_handle)
{
   141e2:	cf 93       	push	r28
   141e4:	df 93       	push	r29
   141e6:	0f 92       	push	r0
   141e8:	0f 92       	push	r0
   141ea:	cd b7       	in	r28, 0x3d	; 61
   141ec:	de b7       	in	r29, 0x3e	; 62
   141ee:	89 83       	std	Y+1, r24	; 0x01
   141f0:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle =
   (t_bufferHandle *)UTL_GET_LINK_ELEMENT_PTR(t_handle);
   141f2:	e9 81       	ldd	r30, Y+1	; 0x01
   141f4:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_handle->s_fillCount; /*Return the number of bytes in the buffer*/
   141f6:	01 90       	ld	r0, Z+
   141f8:	f0 81       	ld	r31, Z
   141fa:	e0 2d       	mov	r30, r0

}/*End utl_getBufferFullLevel*/
   141fc:	84 81       	ldd	r24, Z+4	; 0x04
   141fe:	95 81       	ldd	r25, Z+5	; 0x05
   14200:	0f 90       	pop	r0
   14202:	0f 90       	pop	r0
   14204:	df 91       	pop	r29
   14206:	cf 91       	pop	r28
   14208:	08 95       	ret

0001420a <utl_getBufferSize>:
   return ((int16_t)pt_handle->s_sizeBytes - pt_handle->s_fillCount);

}/*End utl_getBufferEmptyLevel*/

int16_t utl_getBufferSize( t_BUFFHANDLE t_handle)
{
   1420a:	cf 93       	push	r28
   1420c:	df 93       	push	r29
   1420e:	0f 92       	push	r0
   14210:	0f 92       	push	r0
   14212:	cd b7       	in	r28, 0x3d	; 61
   14214:	de b7       	in	r29, 0x3e	; 62
   14216:	89 83       	std	Y+1, r24	; 0x01
   14218:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1421a:	e9 81       	ldd	r30, Y+1	; 0x01
   1421c:	fa 81       	ldd	r31, Y+2	; 0x02

   return ((int16_t)pt_handle->s_sizeBytes);
   1421e:	01 90       	ld	r0, Z+
   14220:	f0 81       	ld	r31, Z
   14222:	e0 2d       	mov	r30, r0

}/*End utl_getBufferSize*/
   14224:	86 81       	ldd	r24, Z+6	; 0x06
   14226:	97 81       	ldd	r25, Z+7	; 0x07
   14228:	0f 90       	pop	r0
   1422a:	0f 90       	pop	r0
   1422c:	df 91       	pop	r29
   1422e:	cf 91       	pop	r28
   14230:	08 95       	ret

00014232 <utl_getBufferPtr>:
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   return (bool)(pt_handle->s_fillCount < 0);
}/*End hasBufferUnderflowed*/

int8_t *utl_getBufferPtr( t_BUFFHANDLE t_handle)
{
   14232:	cf 93       	push	r28
   14234:	df 93       	push	r29
   14236:	0f 92       	push	r0
   14238:	0f 92       	push	r0
   1423a:	cd b7       	in	r28, 0x3d	; 61
   1423c:	de b7       	in	r29, 0x3e	; 62
   1423e:	89 83       	std	Y+1, r24	; 0x01
   14240:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14242:	e9 81       	ldd	r30, Y+1	; 0x01
   14244:	fa 81       	ldd	r31, Y+2	; 0x02
   return pt_handle->pc_buffer;
   14246:	01 90       	ld	r0, Z+
   14248:	f0 81       	ld	r31, Z
   1424a:	e0 2d       	mov	r30, r0
}/*End utl_getBufferPtr*/
   1424c:	80 85       	ldd	r24, Z+8	; 0x08
   1424e:	91 85       	ldd	r25, Z+9	; 0x09
   14250:	0f 90       	pop	r0
   14252:	0f 90       	pop	r0
   14254:	df 91       	pop	r29
   14256:	cf 91       	pop	r28
   14258:	08 95       	ret

0001425a <utl_writeByte>:

void utl_writeByte( t_BUFFHANDLE t_handle,
                    int8_t c_byte)
{
   1425a:	cf 93       	push	r28
   1425c:	df 93       	push	r29
   1425e:	0f 92       	push	r0
   14260:	0f 92       	push	r0
   14262:	cd b7       	in	r28, 0x3d	; 61
   14264:	de b7       	in	r29, 0x3e	; 62
   14266:	89 83       	std	Y+1, r24	; 0x01
   14268:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1426a:	e9 81       	ldd	r30, Y+1	; 0x01
   1426c:	fa 81       	ldd	r31, Y+2	; 0x02
}/*End utl_getBufferPtr*/

void utl_writeByte( t_BUFFHANDLE t_handle,
                    int8_t c_byte)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   1426e:	01 90       	ld	r0, Z+
   14270:	f0 81       	ld	r31, Z
   14272:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR(t_handle);

   pt_handle->pc_buffer[pt_handle->s_wrIndex] = c_byte;
   14274:	a0 85       	ldd	r26, Z+8	; 0x08
   14276:	b1 85       	ldd	r27, Z+9	; 0x09
   14278:	80 81       	ld	r24, Z
   1427a:	91 81       	ldd	r25, Z+1	; 0x01
   1427c:	a8 0f       	add	r26, r24
   1427e:	b9 1f       	adc	r27, r25
   14280:	6c 93       	st	X, r22
   pt_handle->s_wrIndex++;
   14282:	80 81       	ld	r24, Z
   14284:	91 81       	ldd	r25, Z+1	; 0x01
   14286:	01 96       	adiw	r24, 0x01	; 1
   14288:	80 83       	st	Z, r24
   1428a:	91 83       	std	Z+1, r25	; 0x01
   if( pt_handle->s_wrIndex == pt_handle->s_sizeBytes)
   1428c:	26 81       	ldd	r18, Z+6	; 0x06
   1428e:	37 81       	ldd	r19, Z+7	; 0x07
   14290:	82 17       	cp	r24, r18
   14292:	93 07       	cpc	r25, r19
   14294:	11 f4       	brne	.+4      	; 0x1429a <utl_writeByte+0x40>
      pt_handle->s_wrIndex = 0;
   14296:	10 82       	st	Z, r1
   14298:	11 82       	std	Z+1, r1	; 0x01

   pt_handle->s_fillCount++;
   1429a:	84 81       	ldd	r24, Z+4	; 0x04
   1429c:	95 81       	ldd	r25, Z+5	; 0x05
   1429e:	01 96       	adiw	r24, 0x01	; 1
   142a0:	84 83       	std	Z+4, r24	; 0x04
   142a2:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_writeByte*/
   142a4:	0f 90       	pop	r0
   142a6:	0f 90       	pop	r0
   142a8:	df 91       	pop	r29
   142aa:	cf 91       	pop	r28
   142ac:	08 95       	ret

000142ae <utl_incrBufRdPtr>:

}/*End utl_incrBufWrtPtr*/

void utl_incrBufRdPtr( t_BUFFHANDLE t_handle,
                       uint16_t s_size)
{
   142ae:	cf 93       	push	r28
   142b0:	df 93       	push	r29
   142b2:	0f 92       	push	r0
   142b4:	0f 92       	push	r0
   142b6:	cd b7       	in	r28, 0x3d	; 61
   142b8:	de b7       	in	r29, 0x3e	; 62
   142ba:	89 83       	std	Y+1, r24	; 0x01
   142bc:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   142be:	e9 81       	ldd	r30, Y+1	; 0x01
   142c0:	fa 81       	ldd	r31, Y+2	; 0x02
}/*End utl_incrBufWrtPtr*/

void utl_incrBufRdPtr( t_BUFFHANDLE t_handle,
                       uint16_t s_size)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   142c2:	01 90       	ld	r0, Z+
   142c4:	f0 81       	ld	r31, Z
   142c6:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   int16_t *ps_rdIndex       = &pt_handle->s_rdIndex;

   *ps_rdIndex += s_size;
   142c8:	82 81       	ldd	r24, Z+2	; 0x02
   142ca:	93 81       	ldd	r25, Z+3	; 0x03
   142cc:	86 0f       	add	r24, r22
   142ce:	97 1f       	adc	r25, r23
   142d0:	82 83       	std	Z+2, r24	; 0x02
   142d2:	93 83       	std	Z+3, r25	; 0x03
   if( *ps_rdIndex >= pt_handle->s_sizeBytes)
   142d4:	26 81       	ldd	r18, Z+6	; 0x06
   142d6:	37 81       	ldd	r19, Z+7	; 0x07
   142d8:	82 17       	cp	r24, r18
   142da:	93 07       	cpc	r25, r19
   142dc:	20 f0       	brcs	.+8      	; 0x142e6 <utl_incrBufRdPtr+0x38>
   {
      *ps_rdIndex -= pt_handle->s_sizeBytes;
   142de:	82 1b       	sub	r24, r18
   142e0:	93 0b       	sbc	r25, r19
   142e2:	82 83       	std	Z+2, r24	; 0x02
   142e4:	93 83       	std	Z+3, r25	; 0x03
   }

   pt_handle->s_fillCount -= (int16_t)s_size;
   142e6:	84 81       	ldd	r24, Z+4	; 0x04
   142e8:	95 81       	ldd	r25, Z+5	; 0x05
   142ea:	86 1b       	sub	r24, r22
   142ec:	97 0b       	sbc	r25, r23
   142ee:	84 83       	std	Z+4, r24	; 0x04
   142f0:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_incrBufRdPtr*/
   142f2:	0f 90       	pop	r0
   142f4:	0f 90       	pop	r0
   142f6:	df 91       	pop	r29
   142f8:	cf 91       	pop	r28
   142fa:	08 95       	ret

000142fc <utl_getBufRdPtr>:

int16_t utl_getBufRdPtr( t_BUFFHANDLE t_handle)
{
   142fc:	cf 93       	push	r28
   142fe:	df 93       	push	r29
   14300:	0f 92       	push	r0
   14302:	0f 92       	push	r0
   14304:	cd b7       	in	r28, 0x3d	; 61
   14306:	de b7       	in	r29, 0x3e	; 62
   14308:	89 83       	std	Y+1, r24	; 0x01
   1430a:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1430c:	e9 81       	ldd	r30, Y+1	; 0x01
   1430e:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_handle->s_rdIndex;
   14310:	01 90       	ld	r0, Z+
   14312:	f0 81       	ld	r31, Z
   14314:	e0 2d       	mov	r30, r0
}/*End utl_getBufRdPtr*/
   14316:	82 81       	ldd	r24, Z+2	; 0x02
   14318:	93 81       	ldd	r25, Z+3	; 0x03
   1431a:	0f 90       	pop	r0
   1431c:	0f 90       	pop	r0
   1431e:	df 91       	pop	r29
   14320:	cf 91       	pop	r28
   14322:	08 95       	ret

00014324 <utl_writeBlock>:
}/*End utl_getBufWrtPtr*/

void utl_writeBlock( t_BUFFHANDLE t_handle,
                     int8_t *pc_buff,
                     uint16_t s_size)
{
   14324:	8f 92       	push	r8
   14326:	9f 92       	push	r9
   14328:	af 92       	push	r10
   1432a:	bf 92       	push	r11
   1432c:	cf 92       	push	r12
   1432e:	df 92       	push	r13
   14330:	ef 92       	push	r14
   14332:	ff 92       	push	r15
   14334:	0f 93       	push	r16
   14336:	1f 93       	push	r17
   14338:	cf 93       	push	r28
   1433a:	df 93       	push	r29
   1433c:	0f 92       	push	r0
   1433e:	0f 92       	push	r0
   14340:	cd b7       	in	r28, 0x3d	; 61
   14342:	de b7       	in	r29, 0x3e	; 62
   14344:	89 83       	std	Y+1, r24	; 0x01
   14346:	9a 83       	std	Y+2, r25	; 0x02
   14348:	5b 01       	movw	r10, r22
   1434a:	6a 01       	movw	r12, r20
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1434c:	e9 81       	ldd	r30, Y+1	; 0x01
   1434e:	fa 81       	ldd	r31, Y+2	; 0x02

void utl_writeBlock( t_BUFFHANDLE t_handle,
                     int8_t *pc_buff,
                     uint16_t s_size)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   14350:	e0 80       	ld	r14, Z
   14352:	f1 80       	ldd	r15, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   int8_t *pc_buffer         = pt_handle->pc_buffer;
   14354:	f7 01       	movw	r30, r14
   14356:	80 84       	ldd	r8, Z+8	; 0x08
   14358:	91 84       	ldd	r9, Z+9	; 0x09
   int16_t *ps_wrIndex       = &pt_handle->s_wrIndex;
   uint16_t s_room           = 0;

   s_room = pt_handle->s_sizeBytes - pt_handle->s_wrIndex;
   1435a:	80 81       	ld	r24, Z
   1435c:	91 81       	ldd	r25, Z+1	; 0x01
   1435e:	06 81       	ldd	r16, Z+6	; 0x06
   14360:	17 81       	ldd	r17, Z+7	; 0x07
   14362:	08 1b       	sub	r16, r24
   14364:	19 0b       	sbc	r17, r25
   14366:	88 0d       	add	r24, r8
   14368:	99 1d       	adc	r25, r9
   if( s_room < s_size)
   1436a:	04 17       	cp	r16, r20
   1436c:	15 07       	cpc	r17, r21
   1436e:	50 f4       	brcc	.+20     	; 0x14384 <utl_writeBlock+0x60>
   {
      /*---------------------------------------------------------------------*
       * Copy from current location to the end of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)&pc_buffer[*ps_wrIndex], (void *)pc_buff, s_room);
   14370:	a8 01       	movw	r20, r16
   14372:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>

      /*---------------------------------------------------------------------*
       * Copy the rest of the data starting at the beginning of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)pc_buffer, (void *)&pc_buff[s_room], s_size - s_room);
   14376:	a6 01       	movw	r20, r12
   14378:	40 1b       	sub	r20, r16
   1437a:	51 0b       	sbc	r21, r17
   1437c:	b5 01       	movw	r22, r10
   1437e:	60 0f       	add	r22, r16
   14380:	71 1f       	adc	r23, r17
   14382:	c4 01       	movw	r24, r8
   }
   else
   {
      memcpy( (void *)&pc_buffer[*ps_wrIndex], (void *)pc_buff, s_size);
   14384:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
   }

   *ps_wrIndex += s_size;
   14388:	f7 01       	movw	r30, r14
   1438a:	80 81       	ld	r24, Z
   1438c:	91 81       	ldd	r25, Z+1	; 0x01
   1438e:	8c 0d       	add	r24, r12
   14390:	9d 1d       	adc	r25, r13
   14392:	80 83       	st	Z, r24
   14394:	91 83       	std	Z+1, r25	; 0x01
   if( *ps_wrIndex >= pt_handle->s_sizeBytes)
   14396:	26 81       	ldd	r18, Z+6	; 0x06
   14398:	37 81       	ldd	r19, Z+7	; 0x07
   1439a:	82 17       	cp	r24, r18
   1439c:	93 07       	cpc	r25, r19
   1439e:	20 f0       	brcs	.+8      	; 0x143a8 <utl_writeBlock+0x84>
   {
      *ps_wrIndex -= pt_handle->s_sizeBytes;
   143a0:	82 1b       	sub	r24, r18
   143a2:	93 0b       	sbc	r25, r19
   143a4:	80 83       	st	Z, r24
   143a6:	91 83       	std	Z+1, r25	; 0x01
   }

   pt_handle->s_fillCount += (int16_t)s_size;
   143a8:	f7 01       	movw	r30, r14
   143aa:	84 81       	ldd	r24, Z+4	; 0x04
   143ac:	95 81       	ldd	r25, Z+5	; 0x05
   143ae:	8c 0d       	add	r24, r12
   143b0:	9d 1d       	adc	r25, r13
   143b2:	84 83       	std	Z+4, r24	; 0x04
   143b4:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_writeBlock*/
   143b6:	0f 90       	pop	r0
   143b8:	0f 90       	pop	r0
   143ba:	df 91       	pop	r29
   143bc:	cf 91       	pop	r28
   143be:	1f 91       	pop	r17
   143c0:	0f 91       	pop	r16
   143c2:	ff 90       	pop	r15
   143c4:	ef 90       	pop	r14
   143c6:	df 90       	pop	r13
   143c8:	cf 90       	pop	r12
   143ca:	bf 90       	pop	r11
   143cc:	af 90       	pop	r10
   143ce:	9f 90       	pop	r9
   143d0:	8f 90       	pop	r8
   143d2:	08 95       	ret

000143d4 <utl_buffEraseTailByte>:
   return c_byte;

}/*End utl_readByte*/

void utl_buffEraseTailByte( t_BUFFHANDLE t_handle)
{
   143d4:	cf 93       	push	r28
   143d6:	df 93       	push	r29
   143d8:	0f 92       	push	r0
   143da:	0f 92       	push	r0
   143dc:	cd b7       	in	r28, 0x3d	; 61
   143de:	de b7       	in	r29, 0x3e	; 62
   143e0:	89 83       	std	Y+1, r24	; 0x01
   143e2:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   143e4:	e9 81       	ldd	r30, Y+1	; 0x01
   143e6:	fa 81       	ldd	r31, Y+2	; 0x02

}/*End utl_readByte*/

void utl_buffEraseTailByte( t_BUFFHANDLE t_handle)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   143e8:	01 90       	ld	r0, Z+
   143ea:	f0 81       	ld	r31, Z
   143ec:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR(t_handle);

   pt_handle->s_wrIndex--;
   143ee:	80 81       	ld	r24, Z
   143f0:	91 81       	ldd	r25, Z+1	; 0x01
   143f2:	01 97       	sbiw	r24, 0x01	; 1
   143f4:	80 83       	st	Z, r24
   143f6:	91 83       	std	Z+1, r25	; 0x01
   if( pt_handle->s_wrIndex < 0)
   143f8:	97 ff       	sbrs	r25, 7
   143fa:	05 c0       	rjmp	.+10     	; 0x14406 <utl_buffEraseTailByte+0x32>
      pt_handle->s_wrIndex = pt_handle->s_sizeBytes - 1;
   143fc:	86 81       	ldd	r24, Z+6	; 0x06
   143fe:	97 81       	ldd	r25, Z+7	; 0x07
   14400:	01 97       	sbiw	r24, 0x01	; 1
   14402:	80 83       	st	Z, r24
   14404:	91 83       	std	Z+1, r25	; 0x01

   pt_handle->pc_buffer[pt_handle->s_wrIndex] = 0;
   14406:	a0 85       	ldd	r26, Z+8	; 0x08
   14408:	b1 85       	ldd	r27, Z+9	; 0x09
   1440a:	80 81       	ld	r24, Z
   1440c:	91 81       	ldd	r25, Z+1	; 0x01
   1440e:	a8 0f       	add	r26, r24
   14410:	b9 1f       	adc	r27, r25
   14412:	1c 92       	st	X, r1

   pt_handle->s_fillCount--;
   14414:	84 81       	ldd	r24, Z+4	; 0x04
   14416:	95 81       	ldd	r25, Z+5	; 0x05
   14418:	01 97       	sbiw	r24, 0x01	; 1
   1441a:	84 83       	std	Z+4, r24	; 0x04
   1441c:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_buffEraseTailByte*/
   1441e:	0f 90       	pop	r0
   14420:	0f 90       	pop	r0
   14422:	df 91       	pop	r29
   14424:	cf 91       	pop	r28
   14426:	08 95       	ret

00014428 <utl_readBlock>:

void utl_readBlock( t_BUFFHANDLE t_handle,
                    int8_t *pc_buff,
                    uint16_t s_size)
{
   14428:	8f 92       	push	r8
   1442a:	9f 92       	push	r9
   1442c:	af 92       	push	r10
   1442e:	bf 92       	push	r11
   14430:	cf 92       	push	r12
   14432:	df 92       	push	r13
   14434:	ef 92       	push	r14
   14436:	ff 92       	push	r15
   14438:	0f 93       	push	r16
   1443a:	1f 93       	push	r17
   1443c:	cf 93       	push	r28
   1443e:	df 93       	push	r29
   14440:	0f 92       	push	r0
   14442:	0f 92       	push	r0
   14444:	cd b7       	in	r28, 0x3d	; 61
   14446:	de b7       	in	r29, 0x3e	; 62
   14448:	89 83       	std	Y+1, r24	; 0x01
   1444a:	9a 83       	std	Y+2, r25	; 0x02
   1444c:	6b 01       	movw	r12, r22
   1444e:	5a 01       	movw	r10, r20
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14450:	e9 81       	ldd	r30, Y+1	; 0x01
   14452:	fa 81       	ldd	r31, Y+2	; 0x02

void utl_readBlock( t_BUFFHANDLE t_handle,
                    int8_t *pc_buff,
                    uint16_t s_size)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   14454:	e0 80       	ld	r14, Z
   14456:	f1 80       	ldd	r15, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   int8_t *pc_buffer         = pt_handle->pc_buffer;
   14458:	f7 01       	movw	r30, r14
   1445a:	80 84       	ldd	r8, Z+8	; 0x08
   1445c:	91 84       	ldd	r9, Z+9	; 0x09
   int16_t *ps_rdIndex       = &pt_handle->s_rdIndex;
   uint16_t s_room           = 0;

   s_room = pt_handle->s_sizeBytes - pt_handle->s_rdIndex;
   1445e:	62 81       	ldd	r22, Z+2	; 0x02
   14460:	73 81       	ldd	r23, Z+3	; 0x03
   14462:	06 81       	ldd	r16, Z+6	; 0x06
   14464:	17 81       	ldd	r17, Z+7	; 0x07
   14466:	06 1b       	sub	r16, r22
   14468:	17 0b       	sbc	r17, r23
   1446a:	68 0d       	add	r22, r8
   1446c:	79 1d       	adc	r23, r9
   if( s_room < s_size)
   {
      /*---------------------------------------------------------------------*
       * Copy from current location to the end of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)pc_buff, (void *)&pc_buffer[*ps_rdIndex], s_room);
   1446e:	c6 01       	movw	r24, r12
   int8_t *pc_buffer         = pt_handle->pc_buffer;
   int16_t *ps_rdIndex       = &pt_handle->s_rdIndex;
   uint16_t s_room           = 0;

   s_room = pt_handle->s_sizeBytes - pt_handle->s_rdIndex;
   if( s_room < s_size)
   14470:	04 17       	cp	r16, r20
   14472:	15 07       	cpc	r17, r21
   14474:	50 f4       	brcc	.+20     	; 0x1448a <utl_readBlock+0x62>
   {
      /*---------------------------------------------------------------------*
       * Copy from current location to the end of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)pc_buff, (void *)&pc_buffer[*ps_rdIndex], s_room);
   14476:	a8 01       	movw	r20, r16
   14478:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>

      /*---------------------------------------------------------------------*
       * Copy the rest of the data starting at the beginning of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)&pc_buff[s_room], (void *)pc_buffer, s_size - s_room);
   1447c:	c6 01       	movw	r24, r12
   1447e:	80 0f       	add	r24, r16
   14480:	91 1f       	adc	r25, r17
   14482:	a5 01       	movw	r20, r10
   14484:	40 1b       	sub	r20, r16
   14486:	51 0b       	sbc	r21, r17
   14488:	b4 01       	movw	r22, r8
   }
   else
   {
      memcpy( (void *)pc_buff, (void *)&pc_buffer[*ps_rdIndex], s_size);
   1448a:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
   }

   *ps_rdIndex += s_size;
   1448e:	f7 01       	movw	r30, r14
   14490:	82 81       	ldd	r24, Z+2	; 0x02
   14492:	93 81       	ldd	r25, Z+3	; 0x03
   14494:	8a 0d       	add	r24, r10
   14496:	9b 1d       	adc	r25, r11
   14498:	82 83       	std	Z+2, r24	; 0x02
   1449a:	93 83       	std	Z+3, r25	; 0x03
   if( *ps_rdIndex >= pt_handle->s_sizeBytes)
   1449c:	26 81       	ldd	r18, Z+6	; 0x06
   1449e:	37 81       	ldd	r19, Z+7	; 0x07
   144a0:	82 17       	cp	r24, r18
   144a2:	93 07       	cpc	r25, r19
   144a4:	20 f0       	brcs	.+8      	; 0x144ae <utl_readBlock+0x86>
   {
      *ps_rdIndex -= pt_handle->s_sizeBytes;
   144a6:	82 1b       	sub	r24, r18
   144a8:	93 0b       	sbc	r25, r19
   144aa:	82 83       	std	Z+2, r24	; 0x02
   144ac:	93 83       	std	Z+3, r25	; 0x03
   }

   pt_handle->s_fillCount -= (int16_t)s_size;
   144ae:	f7 01       	movw	r30, r14
   144b0:	84 81       	ldd	r24, Z+4	; 0x04
   144b2:	95 81       	ldd	r25, Z+5	; 0x05
   144b4:	8a 19       	sub	r24, r10
   144b6:	9b 09       	sbc	r25, r11
   144b8:	84 83       	std	Z+4, r24	; 0x04
   144ba:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_readBlock*/
   144bc:	0f 90       	pop	r0
   144be:	0f 90       	pop	r0
   144c0:	df 91       	pop	r29
   144c2:	cf 91       	pop	r28
   144c4:	1f 91       	pop	r17
   144c6:	0f 91       	pop	r16
   144c8:	ff 90       	pop	r15
   144ca:	ef 90       	pop	r14
   144cc:	df 90       	pop	r13
   144ce:	cf 90       	pop	r12
   144d0:	bf 90       	pop	r11
   144d2:	af 90       	pop	r10
   144d4:	9f 90       	pop	r9
   144d6:	8f 90       	pop	r8
   144d8:	08 95       	ret

000144da <ult_resetBuffer>:

void ult_resetBuffer( t_BUFFHANDLE t_handle)
{
   144da:	cf 93       	push	r28
   144dc:	df 93       	push	r29
   144de:	0f 92       	push	r0
   144e0:	0f 92       	push	r0
   144e2:	cd b7       	in	r28, 0x3d	; 61
   144e4:	de b7       	in	r29, 0x3e	; 62
   144e6:	89 83       	std	Y+1, r24	; 0x01
   144e8:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   144ea:	e9 81       	ldd	r30, Y+1	; 0x01
   144ec:	fa 81       	ldd	r31, Y+2	; 0x02

}/*End utl_readBlock*/

void ult_resetBuffer( t_BUFFHANDLE t_handle)
{
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   144ee:	01 90       	ld	r0, Z+
   144f0:	f0 81       	ld	r31, Z
   144f2:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR(t_handle);

   pt_handle->s_rdIndex   = 0;
   144f4:	12 82       	std	Z+2, r1	; 0x02
   144f6:	13 82       	std	Z+3, r1	; 0x03
   pt_handle->s_wrIndex   = 0;
   144f8:	10 82       	st	Z, r1
   144fa:	11 82       	std	Z+1, r1	; 0x01
   pt_handle->s_fillCount = 0;
   144fc:	14 82       	std	Z+4, r1	; 0x04
   144fe:	15 82       	std	Z+5, r1	; 0x05

}/*End ult_resetBuffer*/
   14500:	0f 90       	pop	r0
   14502:	0f 90       	pop	r0
   14504:	df 91       	pop	r29
   14506:	cf 91       	pop	r28
   14508:	08 95       	ret

0001450a <utl_createBuffer>:

t_BUFFHANDLE utl_createBuffer( int16_t s_sizeBytes)
{
   1450a:	ef 92       	push	r14
   1450c:	ff 92       	push	r15
   1450e:	0f 93       	push	r16
   14510:	1f 93       	push	r17
   14512:	cf 93       	push	r28
   14514:	df 93       	push	r29
   14516:	00 d0       	rcall	.+0      	; 0x14518 <utl_createBuffer+0xe>
   14518:	0f 92       	push	r0
   1451a:	cd b7       	in	r28, 0x3d	; 61
   1451c:	de b7       	in	r29, 0x3e	; 62
   1451e:	59 2f       	mov	r21, r25
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   14520:	9f b7       	in	r25, 0x3f	; 63
   14522:	99 83       	std	Y+1, r25	; 0x01
   14524:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Create a new link handle with room at the end for the buffer..
    *------------------------------------------------------------------------*/
   t_newLinkHndl = utl_createLink( sizeof(t_bufferHandle) + s_sizeBytes);
   14526:	e8 2e       	mov	r14, r24
   14528:	f5 2e       	mov	r15, r21
   1452a:	c7 01       	movw	r24, r14
   1452c:	0a 96       	adiw	r24, 0x0a	; 10
   1452e:	5c 83       	std	Y+4, r21	; 0x04
   14530:	0e 94 7e a3 	call	0x146fc	; 0x146fc <utl_createLink>
   14534:	8a 83       	std	Y+2, r24	; 0x02
   14536:	9b 83       	std	Y+3, r25	; 0x03

   if( t_newLinkHndl < 0)
   14538:	8a 81       	ldd	r24, Y+2	; 0x02
   1453a:	9b 81       	ldd	r25, Y+3	; 0x03
   1453c:	5c 81       	ldd	r21, Y+4	; 0x04
   1453e:	97 ff       	sbrs	r25, 7
   14540:	05 c0       	rjmp	.+10     	; 0x1454c <utl_createBuffer+0x42>
   {
      HAL_END_CRITICAL();//Enable interrupts
   14542:	89 81       	ldd	r24, Y+1	; 0x01
   14544:	8f bf       	out	0x3f, r24	; 63
      return (t_BUFFHANDLE)BUFFER_OUT_OF_HEAP;
   14546:	8f ef       	ldi	r24, 0xFF	; 255
   14548:	9f ef       	ldi	r25, 0xFF	; 255
   1454a:	24 c0       	rjmp	.+72     	; 0x14594 <utl_createBuffer+0x8a>
   }/*End if( t_newLinkHndl < 0)*/

   /*------------------------------------------------------------------------*
    * Initialize the read and write index's.
    *------------------------------------------------------------------------*/
   pt_newBuff = (t_bufferHandle *)UTL_GET_LINK_ELEMENT_PTR(t_newLinkHndl);
   1454c:	ea 81       	ldd	r30, Y+2	; 0x02
   1454e:	fb 81       	ldd	r31, Y+3	; 0x03
   14550:	00 81       	ld	r16, Z
   14552:	11 81       	ldd	r17, Z+1	; 0x01

   pt_newBuff->s_wrIndex   = 0;
   14554:	f8 01       	movw	r30, r16
   14556:	10 82       	st	Z, r1
   14558:	11 82       	std	Z+1, r1	; 0x01
   pt_newBuff->s_rdIndex   = 0;
   1455a:	12 82       	std	Z+2, r1	; 0x02
   1455c:	13 82       	std	Z+3, r1	; 0x03
   pt_newBuff->s_fillCount = 0;
   1455e:	14 82       	std	Z+4, r1	; 0x04
   14560:	15 82       	std	Z+5, r1	; 0x05

   /*------------------------------------------------------------------------*
    * Initialize the buffer ptr to the location of the buffer which starts
    * at the next address location as the address of the buffer pointer.
    *------------------------------------------------------------------------*/
   pt_newBuff->pc_buffer = (int8_t *)(&pt_newBuff->pc_buffer + 1);
   14562:	c8 01       	movw	r24, r16
   14564:	0a 96       	adiw	r24, 0x0a	; 10
   14566:	80 87       	std	Z+8, r24	; 0x08
   14568:	91 87       	std	Z+9, r25	; 0x09

   /*------------------------------------------------------------------------*
    * Initialize the buffer to all NULL's.
    *------------------------------------------------------------------------*/
   memset( (void *)pt_newBuff->pc_buffer, '\0', s_sizeBytes);
   1456a:	60 e0       	ldi	r22, 0x00	; 0
   1456c:	70 e0       	ldi	r23, 0x00	; 0
   1456e:	4e 2d       	mov	r20, r14
   14570:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <memset>

   /*------------------------------------------------------------------------*
    * The size of the buffer in 8-bit words.
    *------------------------------------------------------------------------*/
   pt_newBuff->s_sizeBytes = s_sizeBytes;
   14574:	f8 01       	movw	r30, r16
   14576:	e6 82       	std	Z+6, r14	; 0x06
   14578:	f7 82       	std	Z+7, r15	; 0x07

   t_err = utl_insertLink( gt_bufferList,
   1457a:	80 91 0c 23 	lds	r24, 0x230C
   1457e:	90 91 0d 23 	lds	r25, 0x230D
   14582:	6a 81       	ldd	r22, Y+2	; 0x02
   14584:	7b 81       	ldd	r23, Y+3	; 0x03
   14586:	41 e0       	ldi	r20, 0x01	; 1
   14588:	0e 94 e2 a3 	call	0x147c4	; 0x147c4 <utl_insertLink>
                           t_newLinkHndl,
                           true);

   HAL_END_CRITICAL();//Enable interrupts
   1458c:	89 81       	ldd	r24, Y+1	; 0x01
   1458e:	8f bf       	out	0x3f, r24	; 63

   return (t_BUFFHANDLE)t_newLinkHndl;
   14590:	8a 81       	ldd	r24, Y+2	; 0x02
   14592:	9b 81       	ldd	r25, Y+3	; 0x03

}/*End utl_createBuffer*/
   14594:	24 96       	adiw	r28, 0x04	; 4
   14596:	cd bf       	out	0x3d, r28	; 61
   14598:	de bf       	out	0x3e, r29	; 62
   1459a:	df 91       	pop	r29
   1459c:	cf 91       	pop	r28
   1459e:	1f 91       	pop	r17
   145a0:	0f 91       	pop	r16
   145a2:	ff 90       	pop	r15
   145a4:	ef 90       	pop	r14
   145a6:	08 95       	ret

000145a8 <utl_destroyBuffer>:

t_bufferError utl_destroyBuffer( t_BUFFHANDLE t_handle)
{
   145a8:	cf 93       	push	r28
   145aa:	df 93       	push	r29
   145ac:	00 d0       	rcall	.+0      	; 0x145ae <utl_destroyBuffer+0x6>
   145ae:	cd b7       	in	r28, 0x3d	; 61
   145b0:	de b7       	in	r29, 0x3e	; 62
   145b2:	8a 83       	std	Y+2, r24	; 0x02
   145b4:	9b 83       	std	Y+3, r25	; 0x03
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   145b6:	8f b7       	in	r24, 0x3f	; 63
   145b8:	89 83       	std	Y+1, r24	; 0x01
   145ba:	f8 94       	cli

   t_err = utl_destroyLink( gt_bufferList,
   145bc:	80 91 0c 23 	lds	r24, 0x230C
   145c0:	90 91 0d 23 	lds	r25, 0x230D
   145c4:	6a 81       	ldd	r22, Y+2	; 0x02
   145c6:	7b 81       	ldd	r23, Y+3	; 0x03
   145c8:	0e 94 4f a4 	call	0x1489e	; 0x1489e <utl_destroyLink>
                            (t_LINKHNDL)t_handle);

   if( t_err < 0)
   145cc:	87 ff       	sbrs	r24, 7
   145ce:	04 c0       	rjmp	.+8      	; 0x145d8 <utl_destroyBuffer+0x30>
   {
      HAL_END_CRITICAL();//Enable interrupts
   145d0:	89 81       	ldd	r24, Y+1	; 0x01
   145d2:	8f bf       	out	0x3f, r24	; 63
      return BUFFER_INVALID_HNDL;
   145d4:	8d ef       	ldi	r24, 0xFD	; 253
   145d6:	03 c0       	rjmp	.+6      	; 0x145de <utl_destroyBuffer+0x36>
   }

   HAL_END_CRITICAL();//Enable interrupts
   145d8:	89 81       	ldd	r24, Y+1	; 0x01
   145da:	8f bf       	out	0x3f, r24	; 63
   return BUFFER_PASSED;
   145dc:	80 e0       	ldi	r24, 0x00	; 0

}/*End utl_destroyBuffer*/
   145de:	23 96       	adiw	r28, 0x03	; 3
   145e0:	cd bf       	out	0x3d, r28	; 61
   145e2:	de bf       	out	0x3e, r29	; 62
   145e4:	df 91       	pop	r29
   145e6:	cf 91       	pop	r28
   145e8:	08 95       	ret

000145ea <utl_createContainer>:
{
   return gi_dynListMemUsage;
}/*End utl_getDynListMemUsage*/

t_CONTHNDL utl_createContainer( void)
{
   145ea:	cf 93       	push	r28
   145ec:	df 93       	push	r29
   145ee:	00 d0       	rcall	.+0      	; 0x145f0 <utl_createContainer+0x6>
   145f0:	cd b7       	in	r28, 0x3d	; 61
   145f2:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   145f4:	8f b7       	in	r24, 0x3f	; 63
   145f6:	89 83       	std	Y+1, r24	; 0x01
   145f8:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Allocated memory the new linked-list 'container'
    *------------------------------------------------------------------------*/
   arb_malloc( sizeof( t_listContainer),
   145fa:	8c e0       	ldi	r24, 0x0C	; 12
   145fc:	90 e0       	ldi	r25, 0x00	; 0
   145fe:	be 01       	movw	r22, r28
   14600:	6e 5f       	subi	r22, 0xFE	; 254
   14602:	7f 4f       	sbci	r23, 0xFF	; 255
   14604:	0e 94 32 8b 	call	0x11664	; 0x11664 <arb_malloc>
               (void **)&pt_cont);

   //pt_cont = (t_listContainer *)malloc( sizeof( t_listContainer));

   if( pt_cont == NULL)
   14608:	ea 81       	ldd	r30, Y+2	; 0x02
   1460a:	fb 81       	ldd	r31, Y+3	; 0x03
   1460c:	30 97       	sbiw	r30, 0x00	; 0
   1460e:	29 f4       	brne	.+10     	; 0x1461a <utl_createContainer+0x30>
   {
      HAL_END_CRITICAL();//Enable interrupts
   14610:	89 81       	ldd	r24, Y+1	; 0x01
   14612:	8f bf       	out	0x3f, r24	; 63
      return (t_CONTHNDL)LINKEDLIST_OUT_OF_HEAP;
   14614:	8f ef       	ldi	r24, 0xFF	; 255
   14616:	9f ef       	ldi	r25, 0xFF	; 255
   14618:	25 c0       	rjmp	.+74     	; 0x14664 <utl_createContainer+0x7a>
   }/*End if( pt_cont == NULL)*/

   pt_cont->s_checkSum      = LINKEDLIST_CHECKSUM;
   1461a:	8e ed       	ldi	r24, 0xDE	; 222
   1461c:	9a ef       	ldi	r25, 0xFA	; 250
   1461e:	80 83       	st	Z, r24
   14620:	91 83       	std	Z+1, r25	; 0x01
   pt_cont->s_numLinks      = 0;
   14622:	12 82       	std	Z+2, r1	; 0x02
   14624:	13 82       	std	Z+3, r1	; 0x03
   pt_cont->s_contSizeBytes = (uint16_t)sizeof( t_listContainer);
   14626:	8c e0       	ldi	r24, 0x0C	; 12
   14628:	90 e0       	ldi	r25, 0x00	; 0
   1462a:	84 83       	std	Z+4, r24	; 0x04
   1462c:	95 83       	std	Z+5, r25	; 0x05
   pt_cont->pt_head         = NULL;
   1462e:	10 86       	std	Z+8, r1	; 0x08
   14630:	11 86       	std	Z+9, r1	; 0x09
   pt_cont->pt_tail         = NULL;
   14632:	12 86       	std	Z+10, r1	; 0x0a
   14634:	13 86       	std	Z+11, r1	; 0x0b

   /*------------------------------------------------------------------------*
    * Keep track of the total memory usage...
    *------------------------------------------------------------------------*/
   gi_dynListMemUsage += pt_cont->s_contSizeBytes;
   14636:	80 91 6c 27 	lds	r24, 0x276C
   1463a:	90 91 6d 27 	lds	r25, 0x276D
   1463e:	a0 91 6e 27 	lds	r26, 0x276E
   14642:	b0 91 6f 27 	lds	r27, 0x276F
   14646:	0c 96       	adiw	r24, 0x0c	; 12
   14648:	a1 1d       	adc	r26, r1
   1464a:	b1 1d       	adc	r27, r1
   1464c:	80 93 6c 27 	sts	0x276C, r24
   14650:	90 93 6d 27 	sts	0x276D, r25
   14654:	a0 93 6e 27 	sts	0x276E, r26
   14658:	b0 93 6f 27 	sts	0x276F, r27

   HAL_END_CRITICAL();//Enable interrupts
   1465c:	89 81       	ldd	r24, Y+1	; 0x01
   1465e:	8f bf       	out	0x3f, r24	; 63

   return (t_CONTHNDL)pt_cont;
   14660:	8a 81       	ldd	r24, Y+2	; 0x02
   14662:	9b 81       	ldd	r25, Y+3	; 0x03

}/*End utl_createContainer*/
   14664:	23 96       	adiw	r28, 0x03	; 3
   14666:	cd bf       	out	0x3d, r28	; 61
   14668:	de bf       	out	0x3e, r29	; 62
   1466a:	df 91       	pop	r29
   1466c:	cf 91       	pop	r28
   1466e:	08 95       	ret

00014670 <utl_destroyContainer>:

t_linkedListError utl_destroyContainer( t_CONTHNDL t_contHndl)
{
   14670:	cf 93       	push	r28
   14672:	df 93       	push	r29
   14674:	cd b7       	in	r28, 0x3d	; 61
   14676:	de b7       	in	r29, 0x3e	; 62
   14678:	25 97       	sbiw	r28, 0x05	; 5
   1467a:	cd bf       	out	0x3d, r28	; 61
   1467c:	de bf       	out	0x3e, r29	; 62
   1467e:	8c 83       	std	Y+4, r24	; 0x04
   14680:	9d 83       	std	Y+5, r25	; 0x05

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14682:	8f b7       	in	r24, 0x3f	; 63
   14684:	89 83       	std	Y+1, r24	; 0x01
   14686:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   14688:	ec 81       	ldd	r30, Y+4	; 0x04
   1468a:	fd 81       	ldd	r31, Y+5	; 0x05
   1468c:	ea 83       	std	Y+2, r30	; 0x02
   1468e:	fb 83       	std	Y+3, r31	; 0x03

   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)
   14690:	80 81       	ld	r24, Z
   14692:	91 81       	ldd	r25, Z+1	; 0x01
   14694:	2a ef       	ldi	r18, 0xFA	; 250
   14696:	8e 3d       	cpi	r24, 0xDE	; 222
   14698:	92 07       	cpc	r25, r18
   1469a:	39 f5       	brne	.+78     	; 0x146ea <utl_destroyContainer+0x7a>
   {
      /*---------------------------------------------------------------------*
       * Keep track of the total amount of memory being consumed...
       *---------------------------------------------------------------------*/
      gi_dynListMemUsage -= pt_cont->s_contSizeBytes;
   1469c:	44 81       	ldd	r20, Z+4	; 0x04
   1469e:	55 81       	ldd	r21, Z+5	; 0x05
   146a0:	60 e0       	ldi	r22, 0x00	; 0
   146a2:	70 e0       	ldi	r23, 0x00	; 0
   146a4:	80 91 6c 27 	lds	r24, 0x276C
   146a8:	90 91 6d 27 	lds	r25, 0x276D
   146ac:	a0 91 6e 27 	lds	r26, 0x276E
   146b0:	b0 91 6f 27 	lds	r27, 0x276F
   146b4:	84 1b       	sub	r24, r20
   146b6:	95 0b       	sbc	r25, r21
   146b8:	a6 0b       	sbc	r26, r22
   146ba:	b7 0b       	sbc	r27, r23
   146bc:	80 93 6c 27 	sts	0x276C, r24
   146c0:	90 93 6d 27 	sts	0x276D, r25
   146c4:	a0 93 6e 27 	sts	0x276E, r26
   146c8:	b0 93 6f 27 	sts	0x276F, r27

      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_cont);
   146cc:	ce 01       	movw	r24, r28
   146ce:	02 96       	adiw	r24, 0x02	; 2
   146d0:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
      //free( (void *)pt_cont);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_cont, 0, sizeof( t_listContainer));
   146d4:	ea 81       	ldd	r30, Y+2	; 0x02
   146d6:	fb 81       	ldd	r31, Y+3	; 0x03
   146d8:	8c e0       	ldi	r24, 0x0C	; 12
   146da:	df 01       	movw	r26, r30
   146dc:	1d 92       	st	X+, r1
   146de:	8a 95       	dec	r24
   146e0:	e9 f7       	brne	.-6      	; 0x146dc <utl_destroyContainer+0x6c>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   146e2:	89 81       	ldd	r24, Y+1	; 0x01
   146e4:	8f bf       	out	0x3f, r24	; 63

   return LINKEDLIST_PASSED;
   146e6:	80 e0       	ldi	r24, 0x00	; 0
   146e8:	03 c0       	rjmp	.+6      	; 0x146f0 <utl_destroyContainer+0x80>
      memset( pt_cont, 0, sizeof( t_listContainer));

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   146ea:	89 81       	ldd	r24, Y+1	; 0x01
   146ec:	8f bf       	out	0x3f, r24	; 63
      return LINKEDLIST_INVALID_CONT;
   146ee:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_destroyContainer*/
   146f0:	25 96       	adiw	r28, 0x05	; 5
   146f2:	cd bf       	out	0x3d, r28	; 61
   146f4:	de bf       	out	0x3e, r29	; 62
   146f6:	df 91       	pop	r29
   146f8:	cf 91       	pop	r28
   146fa:	08 95       	ret

000146fc <utl_createLink>:

t_LINKHNDL utl_createLink( uint16_t s_elementSizeBytes)
{
   146fc:	0f 93       	push	r16
   146fe:	1f 93       	push	r17
   14700:	cf 93       	push	r28
   14702:	df 93       	push	r29
   14704:	cd b7       	in	r28, 0x3d	; 61
   14706:	de b7       	in	r29, 0x3e	; 62
   14708:	25 97       	sbiw	r28, 0x05	; 5
   1470a:	cd bf       	out	0x3d, r28	; 61
   1470c:	de bf       	out	0x3e, r29	; 62
   1470e:	8c 01       	movw	r16, r24

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14710:	8f b7       	in	r24, 0x3f	; 63
   14712:	89 83       	std	Y+1, r24	; 0x01
   14714:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Allocated memory for the new linked-list 'link'
    *------------------------------------------------------------------------*/
   arb_malloc( sizeof(t_listLink),
   14716:	8c e0       	ldi	r24, 0x0C	; 12
   14718:	90 e0       	ldi	r25, 0x00	; 0
   1471a:	be 01       	movw	r22, r28
   1471c:	6c 5f       	subi	r22, 0xFC	; 252
   1471e:	7f 4f       	sbci	r23, 0xFF	; 255
   14720:	0e 94 32 8b 	call	0x11664	; 0x11664 <arb_malloc>
               (void **)&pt_link);

   //pt_link = (t_listLink *)malloc( sizeof(t_listLink));

   if( pt_link == NULL)
   14724:	8c 81       	ldd	r24, Y+4	; 0x04
   14726:	9d 81       	ldd	r25, Y+5	; 0x05
   14728:	00 97       	sbiw	r24, 0x00	; 0
   1472a:	71 f0       	breq	.+28     	; 0x14748 <utl_createLink+0x4c>
   }/*End if( pt_link == NULL)*/

   /*------------------------------------------------------------------------*
    * Allocated memory for the new linked-list 'element'
    *------------------------------------------------------------------------*/
   arb_malloc( (size_t)s_elementSizeBytes,
   1472c:	c8 01       	movw	r24, r16
   1472e:	be 01       	movw	r22, r28
   14730:	6e 5f       	subi	r22, 0xFE	; 254
   14732:	7f 4f       	sbci	r23, 0xFF	; 255
   14734:	0e 94 32 8b 	call	0x11664	; 0x11664 <arb_malloc>
               (void **)&pv_element);

   //pv_element = (void *)malloc( s_elementSizeBytes);

   if( pv_element == NULL)
   14738:	8a 81       	ldd	r24, Y+2	; 0x02
   1473a:	9b 81       	ldd	r25, Y+3	; 0x03
   1473c:	00 97       	sbiw	r24, 0x00	; 0
   1473e:	49 f4       	brne	.+18     	; 0x14752 <utl_createLink+0x56>
   {
      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_link);
   14740:	ce 01       	movw	r24, r28
   14742:	04 96       	adiw	r24, 0x04	; 4
   14744:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
      //free( (void *)pt_link);
      HAL_END_CRITICAL();//Enable interrupts
   14748:	89 81       	ldd	r24, Y+1	; 0x01
   1474a:	8f bf       	out	0x3f, r24	; 63
      return (t_LINKHNDL)LINKEDLIST_OUT_OF_HEAP;
   1474c:	8f ef       	ldi	r24, 0xFF	; 255
   1474e:	9f ef       	ldi	r25, 0xFF	; 255
   14750:	31 c0       	rjmp	.+98     	; 0x147b4 <utl_createLink+0xb8>
   }/*End if( pv_element == NULL)*/

   /*------------------------------------------------------------------------*
    * Initialize the element memory with 0xFF's
    *------------------------------------------------------------------------*/
   memset( pv_element, 0xFF, s_elementSizeBytes);
   14752:	6f ef       	ldi	r22, 0xFF	; 255
   14754:	70 e0       	ldi	r23, 0x00	; 0
   14756:	a8 01       	movw	r20, r16
   14758:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <memset>

   pt_link->pv_element         = pv_element;
   1475c:	ec 81       	ldd	r30, Y+4	; 0x04
   1475e:	fd 81       	ldd	r31, Y+5	; 0x05
   14760:	8a 81       	ldd	r24, Y+2	; 0x02
   14762:	9b 81       	ldd	r25, Y+3	; 0x03
   14764:	80 83       	st	Z, r24
   14766:	91 83       	std	Z+1, r25	; 0x01
   pt_link->s_contAddr         = LINKEDLIST_LINK_UNMAPPED;
   14768:	14 82       	std	Z+4, r1	; 0x04
   1476a:	15 82       	std	Z+5, r1	; 0x05
   pt_link->s_elementSizeBytes = s_elementSizeBytes;
   1476c:	02 83       	std	Z+2, r16	; 0x02
   1476e:	13 83       	std	Z+3, r17	; 0x03
   pt_link->s_linkSizeBytes    = (uint16_t)sizeof( t_listLink) +
   14770:	04 5f       	subi	r16, 0xF4	; 244
   14772:	1f 4f       	sbci	r17, 0xFF	; 255
   14774:	06 83       	std	Z+6, r16	; 0x06
   14776:	17 83       	std	Z+7, r17	; 0x07
   s_elementSizeBytes;
   pt_link->pt_next            = NULL;
   14778:	10 86       	std	Z+8, r1	; 0x08
   1477a:	11 86       	std	Z+9, r1	; 0x09
   pt_link->pt_prev            = NULL;
   1477c:	12 86       	std	Z+10, r1	; 0x0a
   1477e:	13 86       	std	Z+11, r1	; 0x0b

   /*------------------------------------------------------------------------*
    * Keep track of the total memory usage...
    *------------------------------------------------------------------------*/
   gi_dynListMemUsage += pt_link->s_linkSizeBytes;
   14780:	20 e0       	ldi	r18, 0x00	; 0
   14782:	30 e0       	ldi	r19, 0x00	; 0
   14784:	80 91 6c 27 	lds	r24, 0x276C
   14788:	90 91 6d 27 	lds	r25, 0x276D
   1478c:	a0 91 6e 27 	lds	r26, 0x276E
   14790:	b0 91 6f 27 	lds	r27, 0x276F
   14794:	80 0f       	add	r24, r16
   14796:	91 1f       	adc	r25, r17
   14798:	a2 1f       	adc	r26, r18
   1479a:	b3 1f       	adc	r27, r19
   1479c:	80 93 6c 27 	sts	0x276C, r24
   147a0:	90 93 6d 27 	sts	0x276D, r25
   147a4:	a0 93 6e 27 	sts	0x276E, r26
   147a8:	b0 93 6f 27 	sts	0x276F, r27

   HAL_END_CRITICAL();//Enable interrupts
   147ac:	89 81       	ldd	r24, Y+1	; 0x01
   147ae:	8f bf       	out	0x3f, r24	; 63

   return (t_LINKHNDL)pt_link;
   147b0:	8c 81       	ldd	r24, Y+4	; 0x04
   147b2:	9d 81       	ldd	r25, Y+5	; 0x05

}/*End utl_createLink*/
   147b4:	25 96       	adiw	r28, 0x05	; 5
   147b6:	cd bf       	out	0x3d, r28	; 61
   147b8:	de bf       	out	0x3e, r29	; 62
   147ba:	df 91       	pop	r29
   147bc:	cf 91       	pop	r28
   147be:	1f 91       	pop	r17
   147c0:	0f 91       	pop	r16
   147c2:	08 95       	ret

000147c4 <utl_insertLink>:

t_linkedListError utl_insertLink( t_CONTHNDL t_contHndl,
                                  t_LINKHNDL t_linkHndl,
                                  bool b_tail)
{
   147c4:	cf 93       	push	r28
   147c6:	df 93       	push	r29
   147c8:	cd b7       	in	r28, 0x3d	; 61
   147ca:	de b7       	in	r29, 0x3e	; 62
   147cc:	25 97       	sbiw	r28, 0x05	; 5
   147ce:	cd bf       	out	0x3d, r28	; 61
   147d0:	de bf       	out	0x3e, r29	; 62
   147d2:	8a 83       	std	Y+2, r24	; 0x02
   147d4:	9b 83       	std	Y+3, r25	; 0x03
   147d6:	6c 83       	std	Y+4, r22	; 0x04
   147d8:	7d 83       	std	Y+5, r23	; 0x05

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   147da:	8f b7       	in	r24, 0x3f	; 63
   147dc:	89 83       	std	Y+1, r24	; 0x01
   147de:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   147e0:	2a 81       	ldd	r18, Y+2	; 0x02
   147e2:	3b 81       	ldd	r19, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Is this a valid container?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   147e4:	f9 01       	movw	r30, r18
   147e6:	80 81       	ld	r24, Z
   147e8:	91 81       	ldd	r25, Z+1	; 0x01
   147ea:	fa ef       	ldi	r31, 0xFA	; 250
   147ec:	8e 3d       	cpi	r24, 0xDE	; 222
   147ee:	9f 07       	cpc	r25, r31
   147f0:	09 f0       	breq	.+2      	; 0x147f4 <utl_insertLink+0x30>
   147f2:	4c c0       	rjmp	.+152    	; 0x1488c <utl_insertLink+0xc8>
   {

      pt_link = (t_listLink *)t_linkHndl;
   147f4:	8c 81       	ldd	r24, Y+4	; 0x04
   147f6:	9d 81       	ldd	r25, Y+5	; 0x05

      /*---------------------------------------------------------------------*
       * Is this 'link' already on this list or another one?
       *---------------------------------------------------------------------*/
      if( pt_link->s_contAddr != LINKEDLIST_LINK_UNMAPPED) /*Yes*/
   147f8:	fc 01       	movw	r30, r24
   147fa:	64 81       	ldd	r22, Z+4	; 0x04
   147fc:	75 81       	ldd	r23, Z+5	; 0x05
   147fe:	61 15       	cp	r22, r1
   14800:	71 05       	cpc	r23, r1
   14802:	21 f0       	breq	.+8      	; 0x1480c <utl_insertLink+0x48>
      {
         HAL_END_CRITICAL();//Enable interrupts
   14804:	89 81       	ldd	r24, Y+1	; 0x01
   14806:	8f bf       	out	0x3f, r24	; 63
         return LINKEDLIST_LINK_MAPPED;
   14808:	8c ef       	ldi	r24, 0xFC	; 252
   1480a:	43 c0       	rjmp	.+134    	; 0x14892 <utl_insertLink+0xce>
      }

      /*---------------------------------------------------------------------*
       * Keep track of the 'container' where this 'link' belongs...
       *---------------------------------------------------------------------*/
      pt_link->s_contAddr = t_contHndl;
   1480c:	6a 81       	ldd	r22, Y+2	; 0x02
   1480e:	7b 81       	ldd	r23, Y+3	; 0x03
   14810:	fc 01       	movw	r30, r24
   14812:	64 83       	std	Z+4, r22	; 0x04
   14814:	75 83       	std	Z+5, r23	; 0x05

      /*---------------------------------------------------------------------*
       * Are we adding the very first node on the list
       *---------------------------------------------------------------------*/
      if( (pt_cont->pt_head == NULL) && (pt_cont->pt_tail == NULL))
   14816:	f9 01       	movw	r30, r18
   14818:	a0 85       	ldd	r26, Z+8	; 0x08
   1481a:	b1 85       	ldd	r27, Z+9	; 0x09
   1481c:	62 85       	ldd	r22, Z+10	; 0x0a
   1481e:	73 85       	ldd	r23, Z+11	; 0x0b
      {
         /*------------------------------------------------------------------*
          * Establish circular link
          *------------------------------------------------------------------*/
         pt_link->pt_prev = pt_link;
   14820:	fc 01       	movw	r30, r24
      pt_link->s_contAddr = t_contHndl;

      /*---------------------------------------------------------------------*
       * Are we adding the very first node on the list
       *---------------------------------------------------------------------*/
      if( (pt_cont->pt_head == NULL) && (pt_cont->pt_tail == NULL))
   14822:	10 97       	sbiw	r26, 0x00	; 0
   14824:	59 f4       	brne	.+22     	; 0x1483c <utl_insertLink+0x78>
   14826:	61 15       	cp	r22, r1
   14828:	71 05       	cpc	r23, r1
   1482a:	41 f4       	brne	.+16     	; 0x1483c <utl_insertLink+0x78>
      {
         /*------------------------------------------------------------------*
          * Establish circular link
          *------------------------------------------------------------------*/
         pt_link->pt_prev = pt_link;
   1482c:	82 87       	std	Z+10, r24	; 0x0a
   1482e:	93 87       	std	Z+11, r25	; 0x0b
         pt_link->pt_next = pt_link;
   14830:	80 87       	std	Z+8, r24	; 0x08
   14832:	91 87       	std	Z+9, r25	; 0x09

         /*------------------------------------------------------------------*
          * Move head and tail location
          *------------------------------------------------------------------*/
         (pt_cont->pt_head) = pt_link;
   14834:	f9 01       	movw	r30, r18
   14836:	80 87       	std	Z+8, r24	; 0x08
   14838:	91 87       	std	Z+9, r25	; 0x09
   1483a:	0e c0       	rjmp	.+28     	; 0x14858 <utl_insertLink+0x94>

      }/*End if( (pt_cont->pt_head == NULL) && (pt_cont->pt_tail == NULL))*/
      else
      {

         pt_link->pt_prev  = (pt_cont->pt_tail);
   1483c:	62 87       	std	Z+10, r22	; 0x0a
   1483e:	73 87       	std	Z+11, r23	; 0x0b
         pt_link->pt_next  = (pt_cont->pt_head);
   14840:	a0 87       	std	Z+8, r26	; 0x08
   14842:	b1 87       	std	Z+9, r27	; 0x09
         (pt_cont->pt_head)->pt_prev = pt_link;
   14844:	1a 96       	adiw	r26, 0x0a	; 10
   14846:	8d 93       	st	X+, r24
   14848:	9c 93       	st	X, r25
   1484a:	1b 97       	sbiw	r26, 0x0b	; 11
         (pt_cont->pt_tail)->pt_next = pt_link;
   1484c:	fb 01       	movw	r30, r22
   1484e:	80 87       	std	Z+8, r24	; 0x08
   14850:	91 87       	std	Z+9, r25	; 0x09
         if( b_tail == true)
         {
            /*---------------------------------------------------------------*
             * Move tail location
             *---------------------------------------------------------------*/
            (pt_cont->pt_tail) = pt_link;
   14852:	f9 01       	movw	r30, r18
         pt_link->pt_prev  = (pt_cont->pt_tail);
         pt_link->pt_next  = (pt_cont->pt_head);
         (pt_cont->pt_head)->pt_prev = pt_link;
         (pt_cont->pt_tail)->pt_next = pt_link;

         if( b_tail == true)
   14854:	44 23       	and	r20, r20
   14856:	19 f0       	breq	.+6      	; 0x1485e <utl_insertLink+0x9a>
         {
            /*---------------------------------------------------------------*
             * Move tail location
             *---------------------------------------------------------------*/
            (pt_cont->pt_tail) = pt_link;
   14858:	82 87       	std	Z+10, r24	; 0x0a
   1485a:	93 87       	std	Z+11, r25	; 0x0b
   1485c:	02 c0       	rjmp	.+4      	; 0x14862 <utl_insertLink+0x9e>
         else
         {
             /*---------------------------------------------------------------*
             * Move head location
             *---------------------------------------------------------------*/
            (pt_cont->pt_head) = pt_link;
   1485e:	80 87       	std	Z+8, r24	; 0x08
   14860:	91 87       	std	Z+9, r25	; 0x09
      }

      /*---------------------------------------------------------------------*
       * Update the status for this container...
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks++;
   14862:	f9 01       	movw	r30, r18
   14864:	42 81       	ldd	r20, Z+2	; 0x02
   14866:	53 81       	ldd	r21, Z+3	; 0x03
   14868:	4f 5f       	subi	r20, 0xFF	; 255
   1486a:	5f 4f       	sbci	r21, 0xFF	; 255
   1486c:	42 83       	std	Z+2, r20	; 0x02
   1486e:	53 83       	std	Z+3, r21	; 0x03
      pt_cont->s_contSizeBytes += pt_link->s_linkSizeBytes;
   14870:	44 81       	ldd	r20, Z+4	; 0x04
   14872:	55 81       	ldd	r21, Z+5	; 0x05
   14874:	fc 01       	movw	r30, r24
   14876:	86 81       	ldd	r24, Z+6	; 0x06
   14878:	97 81       	ldd	r25, Z+7	; 0x07
   1487a:	48 0f       	add	r20, r24
   1487c:	59 1f       	adc	r21, r25
   1487e:	f9 01       	movw	r30, r18
   14880:	44 83       	std	Z+4, r20	; 0x04
   14882:	55 83       	std	Z+5, r21	; 0x05
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   14884:	89 81       	ldd	r24, Y+1	; 0x01
   14886:	8f bf       	out	0x3f, r24	; 63

   return LINKEDLIST_PASSED;
   14888:	80 e0       	ldi	r24, 0x00	; 0
   1488a:	03 c0       	rjmp	.+6      	; 0x14892 <utl_insertLink+0xce>
      pt_cont->s_contSizeBytes += pt_link->s_linkSizeBytes;

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   1488c:	89 81       	ldd	r24, Y+1	; 0x01
   1488e:	8f bf       	out	0x3f, r24	; 63
      return LINKEDLIST_INVALID_CONT;
   14890:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_insertLink*/
   14892:	25 96       	adiw	r28, 0x05	; 5
   14894:	cd bf       	out	0x3d, r28	; 61
   14896:	de bf       	out	0x3e, r29	; 62
   14898:	df 91       	pop	r29
   1489a:	cf 91       	pop	r28
   1489c:	08 95       	ret

0001489e <utl_destroyLink>:

t_linkedListError utl_destroyLink( t_CONTHNDL t_contHndl,
                                   t_LINKHNDL t_linkHndl)
{
   1489e:	0f 93       	push	r16
   148a0:	1f 93       	push	r17
   148a2:	cf 93       	push	r28
   148a4:	df 93       	push	r29
   148a6:	cd b7       	in	r28, 0x3d	; 61
   148a8:	de b7       	in	r29, 0x3e	; 62
   148aa:	27 97       	sbiw	r28, 0x07	; 7
   148ac:	cd bf       	out	0x3d, r28	; 61
   148ae:	de bf       	out	0x3e, r29	; 62
   148b0:	8c 83       	std	Y+4, r24	; 0x04
   148b2:	9d 83       	std	Y+5, r25	; 0x05
   148b4:	6e 83       	std	Y+6, r22	; 0x06
   148b6:	7f 83       	std	Y+7, r23	; 0x07
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   148b8:	8f b7       	in	r24, 0x3f	; 63
   148ba:	89 83       	std	Y+1, r24	; 0x01
   148bc:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   148be:	4c 81       	ldd	r20, Y+4	; 0x04
   148c0:	5d 81       	ldd	r21, Y+5	; 0x05

   /*------------------------------------------------------------------------*
    * Is this a valid container?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   148c2:	da 01       	movw	r26, r20
   148c4:	8d 91       	ld	r24, X+
   148c6:	9c 91       	ld	r25, X
   148c8:	11 97       	sbiw	r26, 0x01	; 1
   148ca:	ba ef       	ldi	r27, 0xFA	; 250
   148cc:	8e 3d       	cpi	r24, 0xDE	; 222
   148ce:	9b 07       	cpc	r25, r27
   148d0:	09 f0       	breq	.+2      	; 0x148d4 <utl_destroyLink+0x36>
   148d2:	8c c0       	rjmp	.+280    	; 0x149ec <utl_destroyLink+0x14e>
   {
      pt_curr = (t_listLink *)t_linkHndl;
   148d4:	6e 81       	ldd	r22, Y+6	; 0x06
   148d6:	7f 81       	ldd	r23, Y+7	; 0x07
   148d8:	6a 83       	std	Y+2, r22	; 0x02
   148da:	7b 83       	std	Y+3, r23	; 0x03

      /*---------------------------------------------------------------------*
       * Is this 'link' on the list?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( t_linkHndl, t_contHndl) == false) /*No*/
   148dc:	ee 81       	ldd	r30, Y+6	; 0x06
   148de:	ff 81       	ldd	r31, Y+7	; 0x07
   148e0:	2c 81       	ldd	r18, Y+4	; 0x04
   148e2:	3d 81       	ldd	r19, Y+5	; 0x05
   148e4:	84 81       	ldd	r24, Z+4	; 0x04
   148e6:	95 81       	ldd	r25, Z+5	; 0x05
   148e8:	82 17       	cp	r24, r18
   148ea:	93 07       	cpc	r25, r19
   148ec:	21 f0       	breq	.+8      	; 0x148f6 <utl_destroyLink+0x58>
      {
         HAL_END_CRITICAL();//Enable interrupts
   148ee:	89 81       	ldd	r24, Y+1	; 0x01
   148f0:	8f bf       	out	0x3f, r24	; 63
         return LINKEDLIST_INVALID_LINK;
   148f2:	8e ef       	ldi	r24, 0xFE	; 254
   148f4:	7e c0       	rjmp	.+252    	; 0x149f2 <utl_destroyLink+0x154>
      }

      pt_prev = pt_curr->pt_prev;
   148f6:	fb 01       	movw	r30, r22
   148f8:	22 85       	ldd	r18, Z+10	; 0x0a
   148fa:	33 85       	ldd	r19, Z+11	; 0x0b
   148fc:	20 93 70 27 	sts	0x2770, r18
   14900:	30 93 71 27 	sts	0x2771, r19
      pt_next = pt_curr->pt_next;
   14904:	00 84       	ldd	r0, Z+8	; 0x08
   14906:	f1 85       	ldd	r31, Z+9	; 0x09
   14908:	e0 2d       	mov	r30, r0
   1490a:	e0 93 72 27 	sts	0x2772, r30
   1490e:	f0 93 73 27 	sts	0x2773, r31

      /*---------------------------------------------------------------------*
       * Are there other 'links' still on the list?
       *---------------------------------------------------------------------*/
      if( pt_curr != pt_next)
   14912:	6e 17       	cp	r22, r30
   14914:	7f 07       	cpc	r23, r31
   14916:	e9 f0       	breq	.+58     	; 0x14952 <utl_destroyLink+0xb4>
      {
         /*------------------------------------------------------------------*
          * Remove the node from this list.
          *------------------------------------------------------------------*/
         pt_prev->pt_next = pt_next;
   14918:	d9 01       	movw	r26, r18
   1491a:	18 96       	adiw	r26, 0x08	; 8
   1491c:	ed 93       	st	X+, r30
   1491e:	fc 93       	st	X, r31
   14920:	19 97       	sbiw	r26, 0x09	; 9
         pt_next->pt_prev = pt_prev;
   14922:	22 87       	std	Z+10, r18	; 0x0a
   14924:	33 87       	std	Z+11, r19	; 0x0b

         /*------------------------------------------------------------------*
          * Were we at the start or end of the list?
          *------------------------------------------------------------------*/
         if( pt_curr == pt_cont->pt_head)
   14926:	da 01       	movw	r26, r20
   14928:	18 96       	adiw	r26, 0x08	; 8
   1492a:	8d 91       	ld	r24, X+
   1492c:	9c 91       	ld	r25, X
   1492e:	19 97       	sbiw	r26, 0x09	; 9
   14930:	68 17       	cp	r22, r24
   14932:	79 07       	cpc	r23, r25
   14934:	29 f4       	brne	.+10     	; 0x14940 <utl_destroyLink+0xa2>
            pt_cont->pt_head = pt_next;
   14936:	18 96       	adiw	r26, 0x08	; 8
   14938:	ed 93       	st	X+, r30
   1493a:	fc 93       	st	X, r31
   1493c:	19 97       	sbiw	r26, 0x09	; 9
   1493e:	12 c0       	rjmp	.+36     	; 0x14964 <utl_destroyLink+0xc6>
         else if( pt_curr == pt_cont->pt_tail)
   14940:	fa 01       	movw	r30, r20
   14942:	82 85       	ldd	r24, Z+10	; 0x0a
   14944:	93 85       	ldd	r25, Z+11	; 0x0b
   14946:	68 17       	cp	r22, r24
   14948:	79 07       	cpc	r23, r25
   1494a:	61 f4       	brne	.+24     	; 0x14964 <utl_destroyLink+0xc6>
            pt_cont->pt_tail = pt_prev;
   1494c:	22 87       	std	Z+10, r18	; 0x0a
   1494e:	33 87       	std	Z+11, r19	; 0x0b
   14950:	09 c0       	rjmp	.+18     	; 0x14964 <utl_destroyLink+0xc6>

      }
      else /*Last node*/
      {
         pt_cont->pt_head = NULL;
   14952:	da 01       	movw	r26, r20
   14954:	18 96       	adiw	r26, 0x08	; 8
   14956:	1d 92       	st	X+, r1
   14958:	1c 92       	st	X, r1
   1495a:	19 97       	sbiw	r26, 0x09	; 9
         pt_cont->pt_tail = NULL;
   1495c:	1a 96       	adiw	r26, 0x0a	; 10
   1495e:	1d 92       	st	X+, r1
   14960:	1c 92       	st	X, r1
   14962:	1b 97       	sbiw	r26, 0x0b	; 11
      }

      /*---------------------------------------------------------------------*
       * Keep track of our memory usage.
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks--;
   14964:	fa 01       	movw	r30, r20
   14966:	82 81       	ldd	r24, Z+2	; 0x02
   14968:	93 81       	ldd	r25, Z+3	; 0x03
   1496a:	01 97       	sbiw	r24, 0x01	; 1
   1496c:	82 83       	std	Z+2, r24	; 0x02
   1496e:	93 83       	std	Z+3, r25	; 0x03
      pt_cont->s_contSizeBytes -= pt_curr->s_linkSizeBytes;
   14970:	db 01       	movw	r26, r22
   14972:	16 96       	adiw	r26, 0x06	; 6
   14974:	2d 91       	ld	r18, X+
   14976:	3c 91       	ld	r19, X
   14978:	17 97       	sbiw	r26, 0x07	; 7
   1497a:	84 81       	ldd	r24, Z+4	; 0x04
   1497c:	95 81       	ldd	r25, Z+5	; 0x05
   1497e:	82 1b       	sub	r24, r18
   14980:	93 0b       	sbc	r25, r19
   14982:	84 83       	std	Z+4, r24	; 0x04
   14984:	95 83       	std	Z+5, r25	; 0x05

      /*---------------------------------------------------------------------*
       * Keep track of the total amount of memory being consumed...
       *---------------------------------------------------------------------*/
      gi_dynListMemUsage -= pt_curr->s_linkSizeBytes;
   14986:	89 01       	movw	r16, r18
   14988:	20 e0       	ldi	r18, 0x00	; 0
   1498a:	30 e0       	ldi	r19, 0x00	; 0
   1498c:	80 91 6c 27 	lds	r24, 0x276C
   14990:	90 91 6d 27 	lds	r25, 0x276D
   14994:	a0 91 6e 27 	lds	r26, 0x276E
   14998:	b0 91 6f 27 	lds	r27, 0x276F
   1499c:	80 1b       	sub	r24, r16
   1499e:	91 0b       	sbc	r25, r17
   149a0:	a2 0b       	sbc	r26, r18
   149a2:	b3 0b       	sbc	r27, r19
   149a4:	80 93 6c 27 	sts	0x276C, r24
   149a8:	90 93 6d 27 	sts	0x276D, r25
   149ac:	a0 93 6e 27 	sts	0x276E, r26
   149b0:	b0 93 6f 27 	sts	0x276F, r27

      /*---------------------------------------------------------------------*
       * Delete the 'element' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_curr->pv_element);
   149b4:	cb 01       	movw	r24, r22
   149b6:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
      //free( pt_curr->pv_element);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_curr->pv_element, 0, pt_curr->s_elementSizeBytes);
   149ba:	ea 81       	ldd	r30, Y+2	; 0x02
   149bc:	fb 81       	ldd	r31, Y+3	; 0x03
   149be:	42 81       	ldd	r20, Z+2	; 0x02
   149c0:	53 81       	ldd	r21, Z+3	; 0x03
   149c2:	80 81       	ld	r24, Z
   149c4:	91 81       	ldd	r25, Z+1	; 0x01
   149c6:	60 e0       	ldi	r22, 0x00	; 0
   149c8:	70 e0       	ldi	r23, 0x00	; 0
   149ca:	0e 94 fa b6 	call	0x16df4	; 0x16df4 <memset>

      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_curr);
   149ce:	ce 01       	movw	r24, r28
   149d0:	02 96       	adiw	r24, 0x02	; 2
   149d2:	0e 94 66 8b 	call	0x116cc	; 0x116cc <arb_free>
      //free( (void *)pt_curr);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_curr, 0, sizeof( t_listLink));
   149d6:	ea 81       	ldd	r30, Y+2	; 0x02
   149d8:	fb 81       	ldd	r31, Y+3	; 0x03
   149da:	8c e0       	ldi	r24, 0x0C	; 12
   149dc:	df 01       	movw	r26, r30
   149de:	1d 92       	st	X+, r1
   149e0:	8a 95       	dec	r24
   149e2:	e9 f7       	brne	.-6      	; 0x149de <utl_destroyLink+0x140>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   149e4:	89 81       	ldd	r24, Y+1	; 0x01
   149e6:	8f bf       	out	0x3f, r24	; 63

   return LINKEDLIST_PASSED;
   149e8:	80 e0       	ldi	r24, 0x00	; 0
   149ea:	03 c0       	rjmp	.+6      	; 0x149f2 <utl_destroyLink+0x154>
      memset( pt_curr, 0, sizeof( t_listLink));

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   149ec:	89 81       	ldd	r24, Y+1	; 0x01
   149ee:	8f bf       	out	0x3f, r24	; 63
      return LINKEDLIST_INVALID_CONT;
   149f0:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_destroyLink*/
   149f2:	27 96       	adiw	r28, 0x07	; 7
   149f4:	cd bf       	out	0x3d, r28	; 61
   149f6:	de bf       	out	0x3e, r29	; 62
   149f8:	df 91       	pop	r29
   149fa:	cf 91       	pop	r28
   149fc:	1f 91       	pop	r17
   149fe:	0f 91       	pop	r16
   14a00:	08 95       	ret

00014a02 <utl_removeLink>:

t_linkedListError utl_removeLink( t_CONTHNDL t_contHndl,
                                  t_LINKHNDL t_linkHndl)
{
   14a02:	cf 93       	push	r28
   14a04:	df 93       	push	r29
   14a06:	cd b7       	in	r28, 0x3d	; 61
   14a08:	de b7       	in	r29, 0x3e	; 62
   14a0a:	25 97       	sbiw	r28, 0x05	; 5
   14a0c:	cd bf       	out	0x3d, r28	; 61
   14a0e:	de bf       	out	0x3e, r29	; 62
   14a10:	8a 83       	std	Y+2, r24	; 0x02
   14a12:	9b 83       	std	Y+3, r25	; 0x03
   14a14:	6c 83       	std	Y+4, r22	; 0x04
   14a16:	7d 83       	std	Y+5, r23	; 0x05
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   14a18:	8f b7       	in	r24, 0x3f	; 63
   14a1a:	89 83       	std	Y+1, r24	; 0x01
   14a1c:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   14a1e:	4a 81       	ldd	r20, Y+2	; 0x02
   14a20:	5b 81       	ldd	r21, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Is this a valid container handle?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   14a22:	da 01       	movw	r26, r20
   14a24:	8d 91       	ld	r24, X+
   14a26:	9c 91       	ld	r25, X
   14a28:	11 97       	sbiw	r26, 0x01	; 1
   14a2a:	ba ef       	ldi	r27, 0xFA	; 250
   14a2c:	8e 3d       	cpi	r24, 0xDE	; 222
   14a2e:	9b 07       	cpc	r25, r27
   14a30:	09 f0       	breq	.+2      	; 0x14a34 <utl_removeLink+0x32>
   14a32:	67 c0       	rjmp	.+206    	; 0x14b02 <utl_removeLink+0x100>
   {
      pt_curr = (t_listLink *)t_linkHndl;
   14a34:	2c 81       	ldd	r18, Y+4	; 0x04
   14a36:	3d 81       	ldd	r19, Y+5	; 0x05

      /*---------------------------------------------------------------------*
       * Is this 'link' on the list?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( t_linkHndl, t_contHndl) == false) /*No*/
   14a38:	ec 81       	ldd	r30, Y+4	; 0x04
   14a3a:	fd 81       	ldd	r31, Y+5	; 0x05
   14a3c:	6a 81       	ldd	r22, Y+2	; 0x02
   14a3e:	7b 81       	ldd	r23, Y+3	; 0x03
   14a40:	84 81       	ldd	r24, Z+4	; 0x04
   14a42:	95 81       	ldd	r25, Z+5	; 0x05
   14a44:	86 17       	cp	r24, r22
   14a46:	97 07       	cpc	r25, r23
   14a48:	21 f0       	breq	.+8      	; 0x14a52 <utl_removeLink+0x50>
      {
         HAL_END_CRITICAL();//Enable interrupts
   14a4a:	89 81       	ldd	r24, Y+1	; 0x01
   14a4c:	8f bf       	out	0x3f, r24	; 63
         return LINKEDLIST_INVALID_LINK;
   14a4e:	8e ef       	ldi	r24, 0xFE	; 254
   14a50:	5b c0       	rjmp	.+182    	; 0x14b08 <utl_removeLink+0x106>
      }

      /*---------------------------------------------------------------------*
       * Make sure the link is no longer mapped to this particular container.
       *---------------------------------------------------------------------*/
      pt_curr->s_contAddr = LINKEDLIST_LINK_UNMAPPED;
   14a52:	f9 01       	movw	r30, r18
   14a54:	14 82       	std	Z+4, r1	; 0x04
   14a56:	15 82       	std	Z+5, r1	; 0x05

      pt_prev = pt_curr->pt_prev;
   14a58:	62 85       	ldd	r22, Z+10	; 0x0a
   14a5a:	73 85       	ldd	r23, Z+11	; 0x0b
   14a5c:	60 93 74 27 	sts	0x2774, r22
   14a60:	70 93 75 27 	sts	0x2775, r23
      pt_next = pt_curr->pt_next;
   14a64:	00 84       	ldd	r0, Z+8	; 0x08
   14a66:	f1 85       	ldd	r31, Z+9	; 0x09
   14a68:	e0 2d       	mov	r30, r0
   14a6a:	e0 93 76 27 	sts	0x2776, r30
   14a6e:	f0 93 77 27 	sts	0x2777, r31

      /*---------------------------------------------------------------------*
       * Are there other 'links' still on the list?
       *---------------------------------------------------------------------*/
      if( pt_curr != pt_next)
   14a72:	2e 17       	cp	r18, r30
   14a74:	3f 07       	cpc	r19, r31
   14a76:	e9 f0       	breq	.+58     	; 0x14ab2 <utl_removeLink+0xb0>
      {
         /*------------------------------------------------------------------*
          * Remove the node from this list.
          *------------------------------------------------------------------*/
         pt_prev->pt_next = pt_next;
   14a78:	db 01       	movw	r26, r22
   14a7a:	18 96       	adiw	r26, 0x08	; 8
   14a7c:	ed 93       	st	X+, r30
   14a7e:	fc 93       	st	X, r31
   14a80:	19 97       	sbiw	r26, 0x09	; 9
         pt_next->pt_prev = pt_prev;
   14a82:	62 87       	std	Z+10, r22	; 0x0a
   14a84:	73 87       	std	Z+11, r23	; 0x0b

         /*------------------------------------------------------------------*
          * Were we at the start or end of the list?
          *------------------------------------------------------------------*/
         if( pt_curr == pt_cont->pt_head)
   14a86:	da 01       	movw	r26, r20
   14a88:	18 96       	adiw	r26, 0x08	; 8
   14a8a:	8d 91       	ld	r24, X+
   14a8c:	9c 91       	ld	r25, X
   14a8e:	19 97       	sbiw	r26, 0x09	; 9
   14a90:	28 17       	cp	r18, r24
   14a92:	39 07       	cpc	r19, r25
   14a94:	29 f4       	brne	.+10     	; 0x14aa0 <utl_removeLink+0x9e>
            pt_cont->pt_head = pt_next;
   14a96:	18 96       	adiw	r26, 0x08	; 8
   14a98:	ed 93       	st	X+, r30
   14a9a:	fc 93       	st	X, r31
   14a9c:	19 97       	sbiw	r26, 0x09	; 9
   14a9e:	12 c0       	rjmp	.+36     	; 0x14ac4 <utl_removeLink+0xc2>
         else if( pt_curr == pt_cont->pt_tail)
   14aa0:	fa 01       	movw	r30, r20
   14aa2:	82 85       	ldd	r24, Z+10	; 0x0a
   14aa4:	93 85       	ldd	r25, Z+11	; 0x0b
   14aa6:	28 17       	cp	r18, r24
   14aa8:	39 07       	cpc	r19, r25
   14aaa:	61 f4       	brne	.+24     	; 0x14ac4 <utl_removeLink+0xc2>
            pt_cont->pt_tail = pt_prev;
   14aac:	62 87       	std	Z+10, r22	; 0x0a
   14aae:	73 87       	std	Z+11, r23	; 0x0b
   14ab0:	09 c0       	rjmp	.+18     	; 0x14ac4 <utl_removeLink+0xc2>

      }
      else /*Last node*/
      {
         pt_cont->pt_head = NULL;
   14ab2:	da 01       	movw	r26, r20
   14ab4:	18 96       	adiw	r26, 0x08	; 8
   14ab6:	1d 92       	st	X+, r1
   14ab8:	1c 92       	st	X, r1
   14aba:	19 97       	sbiw	r26, 0x09	; 9
         pt_cont->pt_tail = NULL;
   14abc:	1a 96       	adiw	r26, 0x0a	; 10
   14abe:	1d 92       	st	X+, r1
   14ac0:	1c 92       	st	X, r1
   14ac2:	1b 97       	sbiw	r26, 0x0b	; 11
      }

      /*---------------------------------------------------------------------*
       * This link is no longer mapped to a list...
       *---------------------------------------------------------------------*/
      pt_curr->s_contAddr = LINKEDLIST_LINK_UNMAPPED;
   14ac4:	f9 01       	movw	r30, r18
   14ac6:	14 82       	std	Z+4, r1	; 0x04
   14ac8:	15 82       	std	Z+5, r1	; 0x05
      pt_curr->pt_next    = NULL;
   14aca:	10 86       	std	Z+8, r1	; 0x08
   14acc:	11 86       	std	Z+9, r1	; 0x09
      pt_curr->pt_prev    = NULL;
   14ace:	12 86       	std	Z+10, r1	; 0x0a
   14ad0:	13 86       	std	Z+11, r1	; 0x0b

      /*---------------------------------------------------------------------*
       * Keep track of the size of the container...
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks--;
   14ad2:	da 01       	movw	r26, r20
   14ad4:	12 96       	adiw	r26, 0x02	; 2
   14ad6:	8d 91       	ld	r24, X+
   14ad8:	9c 91       	ld	r25, X
   14ada:	13 97       	sbiw	r26, 0x03	; 3
   14adc:	01 97       	sbiw	r24, 0x01	; 1
   14ade:	12 96       	adiw	r26, 0x02	; 2
   14ae0:	8d 93       	st	X+, r24
   14ae2:	9c 93       	st	X, r25
   14ae4:	13 97       	sbiw	r26, 0x03	; 3
      pt_cont->s_contSizeBytes -= pt_curr->s_linkSizeBytes;
   14ae6:	14 96       	adiw	r26, 0x04	; 4
   14ae8:	8d 91       	ld	r24, X+
   14aea:	9c 91       	ld	r25, X
   14aec:	15 97       	sbiw	r26, 0x05	; 5
   14aee:	26 81       	ldd	r18, Z+6	; 0x06
   14af0:	37 81       	ldd	r19, Z+7	; 0x07
   14af2:	82 1b       	sub	r24, r18
   14af4:	93 0b       	sbc	r25, r19
   14af6:	14 96       	adiw	r26, 0x04	; 4
   14af8:	8d 93       	st	X+, r24
   14afa:	9c 93       	st	X, r25
   14afc:	15 97       	sbiw	r26, 0x05	; 5
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   return LINKEDLIST_PASSED;
   14afe:	80 e0       	ldi	r24, 0x00	; 0
   14b00:	03 c0       	rjmp	.+6      	; 0x14b08 <utl_removeLink+0x106>
      pt_cont->s_contSizeBytes -= pt_curr->s_linkSizeBytes;

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   14b02:	89 81       	ldd	r24, Y+1	; 0x01
   14b04:	8f bf       	out	0x3f, r24	; 63
      return LINKEDLIST_INVALID_CONT;
   14b06:	8d ef       	ldi	r24, 0xFD	; 253
   }

   return LINKEDLIST_PASSED;

}/*End utl_removeLink*/
   14b08:	25 96       	adiw	r28, 0x05	; 5
   14b0a:	cd bf       	out	0x3d, r28	; 61
   14b0c:	de bf       	out	0x3e, r29	; 62
   14b0e:	df 91       	pop	r29
   14b10:	cf 91       	pop	r28
   14b12:	08 95       	ret

00014b14 <usr_driverRegistration>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_driverRegistration( void)
{
   14b14:	cf 93       	push	r28
   14b16:	df 93       	push	r29
   14b18:	cd b7       	in	r28, 0x3d	; 61
   14b1a:	de b7       	in	r29, 0x3e	; 62
   14b1c:	2f 97       	sbiw	r28, 0x0f	; 15
   14b1e:	cd bf       	out	0x3d, r28	; 61
   14b20:	de bf       	out	0x3e, r29	; 62
   /*------------------------------------------------------------------------*
    * Register the LED signaling driver with the kernel. The driver uses
    * GPIOS on PIN_1, PIN_2, PIN_3, and PIN_5 (of PORT K) all configured as
    * outputs.
    *------------------------------------------------------------------------*/
   t_sigSetup.c_signalPort  = GPIO_PORTK;
   14b22:	88 e0       	ldi	r24, 0x08	; 8
   14b24:	89 83       	std	Y+1, r24	; 0x01
   t_sigSetup.c_majorNum    = 3;
   14b26:	83 e0       	ldi	r24, 0x03	; 3
   14b28:	8d 83       	std	Y+5, r24	; 0x05
   t_sigSetup.ac_ledPins[0] = PIN_0; /*Red LED pin*/
   14b2a:	81 e0       	ldi	r24, 0x01	; 1
   14b2c:	8a 83       	std	Y+2, r24	; 0x02
   t_sigSetup.ac_ledPins[1] = PIN_1; /*Yellow LED pin*/
   14b2e:	82 e0       	ldi	r24, 0x02	; 2
   14b30:	8b 83       	std	Y+3, r24	; 0x03
   t_sigSetup.ac_ledPins[2] = PIN_2; /*Green LED pin*/
   14b32:	84 e0       	ldi	r24, 0x04	; 4
   14b34:	8c 83       	std	Y+4, r24	; 0x04
   if( drv_signalInit( t_sigSetup) < 0)
   14b36:	49 81       	ldd	r20, Y+1	; 0x01
   14b38:	5a 81       	ldd	r21, Y+2	; 0x02
   14b3a:	6b 81       	ldd	r22, Y+3	; 0x03
   14b3c:	7c 81       	ldd	r23, Y+4	; 0x04
   14b3e:	8d 81       	ldd	r24, Y+5	; 0x05
   14b40:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <drv_signalInit>
   14b44:	88 23       	and	r24, r24
   14b46:	24 f4       	brge	.+8      	; 0x14b50 <usr_driverRegistration+0x3c>
      exit(0);
   14b48:	80 e0       	ldi	r24, 0x00	; 0
   14b4a:	90 e0       	ldi	r25, 0x00	; 0
   14b4c:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   /*------------------------------------------------------------------------*
    * Register the console driver with the kernel. The driver uses UART C0
    * which uses GPIO's on PIN_2 and PIN_3 (of PORT C) configured as an input
    * and output, respectively.
    *------------------------------------------------------------------------*/
   t_conSetup.c_uartId   = UART_1;
   14b50:	1a 86       	std	Y+10, r1	; 0x0a
   t_conSetup.i_baudRate = 115200;
   14b52:	80 e0       	ldi	r24, 0x00	; 0
   14b54:	92 ec       	ldi	r25, 0xC2	; 194
   14b56:	a1 e0       	ldi	r26, 0x01	; 1
   14b58:	b0 e0       	ldi	r27, 0x00	; 0
   14b5a:	8e 83       	std	Y+6, r24	; 0x06
   14b5c:	9f 83       	std	Y+7, r25	; 0x07
   14b5e:	a8 87       	std	Y+8, r26	; 0x08
   14b60:	b9 87       	std	Y+9, r27	; 0x09
   t_conSetup.c_majorNum = 4;
   14b62:	84 e0       	ldi	r24, 0x04	; 4
   14b64:	8b 87       	std	Y+11, r24	; 0x0b

   if( drv_consoleInit( t_conSetup) < 0)
   14b66:	4e 81       	ldd	r20, Y+6	; 0x06
   14b68:	5f 81       	ldd	r21, Y+7	; 0x07
   14b6a:	68 85       	ldd	r22, Y+8	; 0x08
   14b6c:	79 85       	ldd	r23, Y+9	; 0x09
   14b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14b70:	9b 85       	ldd	r25, Y+11	; 0x0b
   14b72:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <drv_consoleInit>
   14b76:	88 23       	and	r24, r24
   14b78:	24 f4       	brge	.+8      	; 0x14b82 <usr_driverRegistration+0x6e>
      exit(0);
   14b7a:	80 e0       	ldi	r24, 0x00	; 0
   14b7c:	90 e0       	ldi	r25, 0x00	; 0
   14b7e:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>

   /*------------------------------------------------------------------------*
    * Register the sd card driver with the kernel.
    *------------------------------------------------------------------------*/
   t_sdCardSetup.t_csPort   = GPIO_PORTC;
   14b82:	82 e0       	ldi	r24, 0x02	; 2
   14b84:	8d 87       	std	Y+13, r24	; 0x0d
   t_sdCardSetup.t_csPin    = PIN_4;
   14b86:	80 e1       	ldi	r24, 0x10	; 16
   14b88:	8e 87       	std	Y+14, r24	; 0x0e
   t_sdCardSetup.t_spiChan  = SPI_1;
   14b8a:	1c 86       	std	Y+12, r1	; 0x0c
   t_sdCardSetup.c_majorNum = 5;
   14b8c:	85 e0       	ldi	r24, 0x05	; 5
   14b8e:	8f 87       	std	Y+15, r24	; 0x0f

   if( drv_sdInit( t_sdCardSetup) < 0)
   14b90:	8c 85       	ldd	r24, Y+12	; 0x0c
   14b92:	9d 85       	ldd	r25, Y+13	; 0x0d
   14b94:	ae 85       	ldd	r26, Y+14	; 0x0e
   14b96:	bf 85       	ldd	r27, Y+15	; 0x0f
   14b98:	bc 01       	movw	r22, r24
   14b9a:	cd 01       	movw	r24, r26
   14b9c:	0e 94 cf 12 	call	0x259e	; 0x259e <drv_sdInit>
   14ba0:	88 23       	and	r24, r24
   14ba2:	24 f4       	brge	.+8      	; 0x14bac <usr_driverRegistration+0x98>
      exit(0);
   14ba4:	80 e0       	ldi	r24, 0x00	; 0
   14ba6:	90 e0       	ldi	r25, 0x00	; 0
   14ba8:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>

}/*End usr_driverRegistration*/
   14bac:	2f 96       	adiw	r28, 0x0f	; 15
   14bae:	cd bf       	out	0x3d, r28	; 61
   14bb0:	de bf       	out	0x3e, r29	; 62
   14bb2:	df 91       	pop	r29
   14bb4:	cf 91       	pop	r28
   14bb6:	08 95       	ret

00014bb8 <usr_platformInit>:

static void usr_platformInit( void)
{
   14bb8:	0f 93       	push	r16
   14bba:	1f 93       	push	r17
   14bbc:	cf 93       	push	r28
   14bbe:	df 93       	push	r29
   14bc0:	cd b7       	in	r28, 0x3d	; 61
   14bc2:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Register drivers with the kernel here...
    *------------------------------------------------------------------------*/
   usr_driverRegistration();
   14bc4:	0e 94 8a a5 	call	0x14b14	; 0x14b14 <usr_driverRegistration>

   /*------------------------------------------------------------------------*
    * Initialize the debug interface.
    *------------------------------------------------------------------------*/
   if( arb_printfInit( "consoleDevice0",
   14bc8:	8a ef       	ldi	r24, 0xFA	; 250
   14bca:	93 e2       	ldi	r25, 0x23	; 35
   14bcc:	29 e0       	ldi	r18, 0x09	; 9
   14bce:	34 e2       	ldi	r19, 0x24	; 36
   14bd0:	60 e0       	ldi	r22, 0x00	; 0
   14bd2:	71 e0       	ldi	r23, 0x01	; 1
   14bd4:	a9 01       	movw	r20, r18
   14bd6:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <arb_printfInit>
   14bda:	88 23       	and	r24, r24
   14bdc:	24 f4       	brge	.+8      	; 0x14be6 <usr_platformInit+0x2e>
                       256,
                       "sdDevice0/logs/dmsg.txt") < 0)
   {
      exit(0);
   14bde:	80 e0       	ldi	r24, 0x00	; 0
   14be0:	90 e0       	ldi	r25, 0x00	; 0
   14be2:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   }

   /*------------------------------------------------------------------------*
    * Initialize the console interface.
    *------------------------------------------------------------------------*/
   if( arb_consoleInit( "consoleDevice0",
   14be6:	8a ef       	ldi	r24, 0xFA	; 250
   14be8:	93 e2       	ldi	r25, 0x23	; 35
   14bea:	21 e2       	ldi	r18, 0x21	; 33
   14bec:	34 e2       	ldi	r19, 0x24	; 36
   14bee:	ee e5       	ldi	r30, 0x5E	; 94
   14bf0:	f9 ea       	ldi	r31, 0xA9	; 169
   14bf2:	b9 01       	movw	r22, r18
   14bf4:	40 e0       	ldi	r20, 0x00	; 0
   14bf6:	58 e0       	ldi	r21, 0x08	; 8
   14bf8:	2e ef       	ldi	r18, 0xFE	; 254
   14bfa:	8f 01       	movw	r16, r30
   14bfc:	0e 94 80 82 	call	0x10500	; 0x10500 <arb_consoleInit>
   14c00:	88 23       	and	r24, r24
   14c02:	24 f4       	brge	.+8      	; 0x14c0c <usr_platformInit+0x54>
                        "sdDevice0",
                        ARB_STACK_2048B,
                        254,
                        &usr_console) < 0)
   {
      exit(0);
   14c04:	80 e0       	ldi	r24, 0x00	; 0
   14c06:	90 e0       	ldi	r25, 0x00	; 0
   14c08:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   }

   /*------------------------------------------------------------------------*
    * Initialize the scheduler specifically for this application.
    *------------------------------------------------------------------------*/
   if( arb_schedulerInit( PRIORITY,
   14c0c:	81 e0       	ldi	r24, 0x01	; 1
   14c0e:	60 e0       	ldi	r22, 0x00	; 0
   14c10:	72 e0       	ldi	r23, 0x02	; 2
   14c12:	4e e1       	ldi	r20, 0x1E	; 30
   14c14:	0e 94 3a 92 	call	0x12474	; 0x12474 <arb_schedulerInit>
   14c18:	88 23       	and	r24, r24
   14c1a:	24 f4       	brge	.+8      	; 0x14c24 <usr_platformInit+0x6c>
                          ARB_STACK_512B,
                          TIMER_7) < 0)
   {
      exit(0);
   14c1c:	80 e0       	ldi	r24, 0x00	; 0
   14c1e:	90 e0       	ldi	r25, 0x00	; 0
   14c20:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>
   }

}/*End usr_platformInit*/
   14c24:	df 91       	pop	r29
   14c26:	cf 91       	pop	r28
   14c28:	1f 91       	pop	r17
   14c2a:	0f 91       	pop	r16
   14c2c:	08 95       	ret

00014c2e <usr_appInit>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void usr_appInit( void)
{
   14c2e:	cf 93       	push	r28
   14c30:	df 93       	push	r29
   14c32:	cd b7       	in	r28, 0x3d	; 61
   14c34:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Enable global interrupts, configure the CPU frequency, and register
    * drivers with the kernel for this particular computing platform.
    *------------------------------------------------------------------------*/
   usr_platformInit();
   14c36:	0e 94 dc a5 	call	0x14bb8	; 0x14bb8 <usr_platformInit>

   usr_platformTestInit();
   14c3a:	0e 94 bd ac 	call	0x1597a	; 0x1597a <usr_platformTestInit>

   /*------------------------------------------------------------------------*
    * Once we have exited this function the OS will begin running.
    *------------------------------------------------------------------------*/

}/*End usr_appInit*/
   14c3e:	df 91       	pop	r29
   14c40:	cf 91       	pop	r28
   14c42:	08 95       	ret

00014c44 <usr_loopbackTest>:
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_loopbackTest( t_DEVHANDLE t_consoleHndl,
                              int8_t *pc_buff,
                              t_testType t_type)
{
   14c44:	2f 92       	push	r2
   14c46:	3f 92       	push	r3
   14c48:	5f 92       	push	r5
   14c4a:	6f 92       	push	r6
   14c4c:	7f 92       	push	r7
   14c4e:	8f 92       	push	r8
   14c50:	9f 92       	push	r9
   14c52:	af 92       	push	r10
   14c54:	bf 92       	push	r11
   14c56:	cf 92       	push	r12
   14c58:	df 92       	push	r13
   14c5a:	ef 92       	push	r14
   14c5c:	ff 92       	push	r15
   14c5e:	0f 93       	push	r16
   14c60:	1f 93       	push	r17
   14c62:	cf 93       	push	r28
   14c64:	df 93       	push	r29
   14c66:	cd b7       	in	r28, 0x3d	; 61
   14c68:	de b7       	in	r29, 0x3e	; 62
   14c6a:	c8 54       	subi	r28, 0x48	; 72
   14c6c:	d0 40       	sbci	r29, 0x00	; 0
   14c6e:	cd bf       	out	0x3d, r28	; 61
   14c70:	de bf       	out	0x3e, r29	; 62
   14c72:	27 96       	adiw	r28, 0x07	; 7
   14c74:	8e af       	sts	0x7e, r24
   14c76:	9f af       	sts	0x7f, r25
   14c78:	27 97       	sbiw	r28, 0x07	; 7
   14c7a:	7b 01       	movw	r14, r22
   14c7c:	84 2e       	mov	r8, r20
   int16_t s_numRxBytes;
   int8_t ac_txMessage[32];
   int8_t ac_rxMessage[32];
   int8_t c_index;
   int32_t i_byteErrors = 0;
   t_MAILBOXHNDL t_platTestInMbx  = usr_getPlatTestInMailbox();
   14c7e:	0e 94 b3 ac 	call	0x15966	; 0x15966 <usr_getPlatTestInMailbox>
   14c82:	8b 83       	std	Y+3, r24	; 0x03
   14c84:	9c 83       	std	Y+4, r25	; 0x04
   t_MAILBOXHNDL t_platTestOutMbx = usr_getPlatTestOutMailbox();
   14c86:	0e 94 b8 ac 	call	0x15970	; 0x15970 <usr_getPlatTestOutMailbox>
   14c8a:	89 83       	std	Y+1, r24	; 0x01
   14c8c:	9a 83       	std	Y+2, r25	; 0x02

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   14c8e:	00 d0       	rcall	.+0      	; 0x14c90 <usr_loopbackTest+0x4c>
   14c90:	0f 92       	push	r0
   14c92:	ad b7       	in	r26, 0x3d	; 61
   14c94:	be b7       	in	r27, 0x3e	; 62
   14c96:	11 96       	adiw	r26, 0x01	; 1
   14c98:	ed 92       	st	X+, r14
   14c9a:	fc 92       	st	X, r15
   14c9c:	12 97       	sbiw	r26, 0x02	; 2
   14c9e:	89 e5       	ldi	r24, 0x59	; 89
   14ca0:	9e e0       	ldi	r25, 0x0E	; 14
   14ca2:	13 96       	adiw	r26, 0x03	; 3
   14ca4:	8d 93       	st	X+, r24
   14ca6:	9c 93       	st	X, r25
   14ca8:	14 97       	sbiw	r26, 0x04	; 4
   14caa:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14cae:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14cb0:	27 96       	adiw	r28, 0x07	; 7
   14cb2:	8e ad       	sts	0x6e, r24
   14cb4:	9f ad       	sts	0x6f, r25
   14cb6:	27 97       	sbiw	r28, 0x07	; 7
   14cb8:	0f 90       	pop	r0
   14cba:	0f 90       	pop	r0
   14cbc:	0f 90       	pop	r0
   14cbe:	0f 90       	pop	r0
   14cc0:	b7 01       	movw	r22, r14
   14cc2:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|        Test        |          Description          |       Setup       |\n\r"));
   14cc6:	00 d0       	rcall	.+0      	; 0x14cc8 <usr_loopbackTest+0x84>
   14cc8:	0f 92       	push	r0
   14cca:	ed b7       	in	r30, 0x3d	; 61
   14ccc:	fe b7       	in	r31, 0x3e	; 62
   14cce:	e1 82       	std	Z+1, r14	; 0x01
   14cd0:	f2 82       	std	Z+2, r15	; 0x02
   14cd2:	86 ea       	ldi	r24, 0xA6	; 166
   14cd4:	9e e0       	ldi	r25, 0x0E	; 14
   14cd6:	83 83       	std	Z+3, r24	; 0x03
   14cd8:	94 83       	std	Z+4, r25	; 0x04
   14cda:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14cde:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14ce0:	27 96       	adiw	r28, 0x07	; 7
   14ce2:	8e ad       	sts	0x6e, r24
   14ce4:	9f ad       	sts	0x6f, r25
   14ce6:	27 97       	sbiw	r28, 0x07	; 7
   14ce8:	0f 90       	pop	r0
   14cea:	0f 90       	pop	r0
   14cec:	0f 90       	pop	r0
   14cee:	0f 90       	pop	r0
   14cf0:	b7 01       	movw	r22, r14
   14cf2:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|--------------------|-------------------------------|-------------------|\n\r"));
   14cf6:	00 d0       	rcall	.+0      	; 0x14cf8 <usr_loopbackTest+0xb4>
   14cf8:	0f 92       	push	r0
   14cfa:	ad b7       	in	r26, 0x3d	; 61
   14cfc:	be b7       	in	r27, 0x3e	; 62
   14cfe:	11 96       	adiw	r26, 0x01	; 1
   14d00:	ed 92       	st	X+, r14
   14d02:	fc 92       	st	X, r15
   14d04:	12 97       	sbiw	r26, 0x02	; 2
   14d06:	83 ef       	ldi	r24, 0xF3	; 243
   14d08:	9e e0       	ldi	r25, 0x0E	; 14
   14d0a:	13 96       	adiw	r26, 0x03	; 3
   14d0c:	8d 93       	st	X+, r24
   14d0e:	9c 93       	st	X, r25
   14d10:	14 97       	sbiw	r26, 0x04	; 4
   14d12:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14d16:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14d18:	27 96       	adiw	r28, 0x07	; 7
   14d1a:	8e ad       	sts	0x6e, r24
   14d1c:	9f ad       	sts	0x6f, r25
   14d1e:	27 97       	sbiw	r28, 0x07	; 7
   14d20:	0f 90       	pop	r0
   14d22:	0f 90       	pop	r0
   14d24:	0f 90       	pop	r0
   14d26:	0f 90       	pop	r0
   14d28:	b7 01       	movw	r22, r14
   14d2a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);

   if( t_type == UART_LOOPBACK_TEST)
   14d2e:	88 20       	and	r8, r8
   14d30:	09 f0       	breq	.+2      	; 0x14d34 <usr_loopbackTest+0xf0>
   14d32:	71 c0       	rjmp	.+226    	; 0x14e16 <usr_loopbackTest+0x1d2>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| UART loopback test | Loops back a message between  | Connect pins PE6  |\n\r"));
   14d34:	00 d0       	rcall	.+0      	; 0x14d36 <usr_loopbackTest+0xf2>
   14d36:	0f 92       	push	r0
   14d38:	ed b7       	in	r30, 0x3d	; 61
   14d3a:	fe b7       	in	r31, 0x3e	; 62
   14d3c:	e1 82       	std	Z+1, r14	; 0x01
   14d3e:	f2 82       	std	Z+2, r15	; 0x02
   14d40:	80 e4       	ldi	r24, 0x40	; 64
   14d42:	9f e0       	ldi	r25, 0x0F	; 15
   14d44:	83 83       	std	Z+3, r24	; 0x03
   14d46:	94 83       	std	Z+4, r25	; 0x04
   14d48:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14d4c:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14d4e:	27 96       	adiw	r28, 0x07	; 7
   14d50:	8e ad       	sts	0x6e, r24
   14d52:	9f ad       	sts	0x6f, r25
   14d54:	27 97       	sbiw	r28, 0x07	; 7
   14d56:	0f 90       	pop	r0
   14d58:	0f 90       	pop	r0
   14d5a:	0f 90       	pop	r0
   14d5c:	0f 90       	pop	r0
   14d5e:	b7 01       	movw	r22, r14
   14d60:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PE7.          |\n\r"));
   14d64:	00 d0       	rcall	.+0      	; 0x14d66 <usr_loopbackTest+0x122>
   14d66:	0f 92       	push	r0
   14d68:	ad b7       	in	r26, 0x3d	; 61
   14d6a:	be b7       	in	r27, 0x3e	; 62
   14d6c:	11 96       	adiw	r26, 0x01	; 1
   14d6e:	ed 92       	st	X+, r14
   14d70:	fc 92       	st	X, r15
   14d72:	12 97       	sbiw	r26, 0x02	; 2
   14d74:	8d e8       	ldi	r24, 0x8D	; 141
   14d76:	9f e0       	ldi	r25, 0x0F	; 15
   14d78:	13 96       	adiw	r26, 0x03	; 3
   14d7a:	8d 93       	st	X+, r24
   14d7c:	9c 93       	st	X, r25
   14d7e:	14 97       	sbiw	r26, 0x04	; 4
   14d80:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14d84:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14d86:	27 96       	adiw	r28, 0x07	; 7
   14d88:	8e ad       	sts	0x6e, r24
   14d8a:	9f ad       	sts	0x6f, r25
   14d8c:	27 97       	sbiw	r28, 0x07	; 7
   14d8e:	0f 90       	pop	r0
   14d90:	0f 90       	pop	r0
   14d92:	0f 90       	pop	r0
   14d94:	0f 90       	pop	r0
   14d96:	b7 01       	movw	r22, r14
   14d98:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using UART6, two |                   |\n\r"));
   14d9c:	00 d0       	rcall	.+0      	; 0x14d9e <usr_loopbackTest+0x15a>
   14d9e:	0f 92       	push	r0
   14da0:	ed b7       	in	r30, 0x3d	; 61
   14da2:	fe b7       	in	r31, 0x3e	; 62
   14da4:	e1 82       	std	Z+1, r14	; 0x01
   14da6:	f2 82       	std	Z+2, r15	; 0x02
   14da8:	8a ed       	ldi	r24, 0xDA	; 218
   14daa:	9f e0       	ldi	r25, 0x0F	; 15
   14dac:	83 83       	std	Z+3, r24	; 0x03
   14dae:	94 83       	std	Z+4, r25	; 0x04
   14db0:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14db4:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14db6:	27 96       	adiw	r28, 0x07	; 7
   14db8:	8e ad       	sts	0x6e, r24
   14dba:	9f ad       	sts	0x6f, r25
   14dbc:	27 97       	sbiw	r28, 0x07	; 7
   14dbe:	0f 90       	pop	r0
   14dc0:	0f 90       	pop	r0
   14dc2:	0f 90       	pop	r0
   14dc4:	0f 90       	pop	r0
   14dc6:	b7 01       	movw	r22, r14
   14dc8:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | DMA's, and two mailbox modules|                   |\n\r"));
   14dcc:	00 d0       	rcall	.+0      	; 0x14dce <usr_loopbackTest+0x18a>
   14dce:	0f 92       	push	r0
   14dd0:	ad b7       	in	r26, 0x3d	; 61
   14dd2:	be b7       	in	r27, 0x3e	; 62
   14dd4:	11 96       	adiw	r26, 0x01	; 1
   14dd6:	ed 92       	st	X+, r14
   14dd8:	fc 92       	st	X, r15
   14dda:	12 97       	sbiw	r26, 0x02	; 2
   14ddc:	87 e2       	ldi	r24, 0x27	; 39
   14dde:	90 e1       	ldi	r25, 0x10	; 16
   14de0:	13 96       	adiw	r26, 0x03	; 3
   14de2:	8d 93       	st	X+, r24
   14de4:	9c 93       	st	X, r25
   14de6:	14 97       	sbiw	r26, 0x04	; 4
   14de8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14dec:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14dee:	27 96       	adiw	r28, 0x07	; 7
   14df0:	8e ad       	sts	0x6e, r24
   14df2:	9f ad       	sts	0x6f, r25
   14df4:	27 97       	sbiw	r28, 0x07	; 7
   14df6:	0f 90       	pop	r0
   14df8:	0f 90       	pop	r0
   14dfa:	0f 90       	pop	r0
   14dfc:	0f 90       	pop	r0
   14dfe:	b7 01       	movw	r22, r14
   14e00:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   14e04:	00 d0       	rcall	.+0      	; 0x14e06 <usr_loopbackTest+0x1c2>
   14e06:	0f 92       	push	r0
   14e08:	ed b7       	in	r30, 0x3d	; 61
   14e0a:	fe b7       	in	r31, 0x3e	; 62
   14e0c:	e1 82       	std	Z+1, r14	; 0x01
   14e0e:	f2 82       	std	Z+2, r15	; 0x02
   14e10:	84 e7       	ldi	r24, 0x74	; 116
   14e12:	90 e1       	ldi	r25, 0x10	; 16
   14e14:	ef c0       	rjmp	.+478    	; 0x14ff4 <usr_loopbackTest+0x3b0>
      arb_write( t_consoleHndl,
                 pc_buff,
                 s_size);
   }/*End if( t_type == UART_LOOPBACK_TEST)*/
   else if( t_type == TWI_LOOPBACK_TEST)
   14e16:	f1 e0       	ldi	r31, 0x01	; 1
   14e18:	8f 16       	cp	r8, r31
   14e1a:	09 f0       	breq	.+2      	; 0x14e1e <usr_loopbackTest+0x1da>
   14e1c:	77 c0       	rjmp	.+238    	; 0x14f0c <usr_loopbackTest+0x2c8>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| TWI loopback test  | Loops back a message between  | Connect pins PD0  |\n\r"));
   14e1e:	00 d0       	rcall	.+0      	; 0x14e20 <usr_loopbackTest+0x1dc>
   14e20:	0f 92       	push	r0
   14e22:	ad b7       	in	r26, 0x3d	; 61
   14e24:	be b7       	in	r27, 0x3e	; 62
   14e26:	11 96       	adiw	r26, 0x01	; 1
   14e28:	ed 92       	st	X+, r14
   14e2a:	fc 92       	st	X, r15
   14e2c:	12 97       	sbiw	r26, 0x02	; 2
   14e2e:	81 ec       	ldi	r24, 0xC1	; 193
   14e30:	90 e1       	ldi	r25, 0x10	; 16
   14e32:	13 96       	adiw	r26, 0x03	; 3
   14e34:	8d 93       	st	X+, r24
   14e36:	9c 93       	st	X, r25
   14e38:	14 97       	sbiw	r26, 0x04	; 4
   14e3a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14e3e:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14e40:	27 96       	adiw	r28, 0x07	; 7
   14e42:	8e ad       	sts	0x6e, r24
   14e44:	9f ad       	sts	0x6f, r25
   14e46:	27 97       	sbiw	r28, 0x07	; 7
   14e48:	0f 90       	pop	r0
   14e4a:	0f 90       	pop	r0
   14e4c:	0f 90       	pop	r0
   14e4e:	0f 90       	pop	r0
   14e50:	b7 01       	movw	r22, r14
   14e52:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PE0 as well as|\n\r"));
   14e56:	00 d0       	rcall	.+0      	; 0x14e58 <usr_loopbackTest+0x214>
   14e58:	0f 92       	push	r0
   14e5a:	ed b7       	in	r30, 0x3d	; 61
   14e5c:	fe b7       	in	r31, 0x3e	; 62
   14e5e:	e1 82       	std	Z+1, r14	; 0x01
   14e60:	f2 82       	std	Z+2, r15	; 0x02
   14e62:	8e e0       	ldi	r24, 0x0E	; 14
   14e64:	91 e1       	ldi	r25, 0x11	; 17
   14e66:	83 83       	std	Z+3, r24	; 0x03
   14e68:	94 83       	std	Z+4, r25	; 0x04
   14e6a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14e6e:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14e70:	27 96       	adiw	r28, 0x07	; 7
   14e72:	8e ad       	sts	0x6e, r24
   14e74:	9f ad       	sts	0x6f, r25
   14e76:	27 97       	sbiw	r28, 0x07	; 7
   14e78:	0f 90       	pop	r0
   14e7a:	0f 90       	pop	r0
   14e7c:	0f 90       	pop	r0
   14e7e:	0f 90       	pop	r0
   14e80:	b7 01       	movw	r22, r14
   14e82:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using TWI2, TWI3 | pins PD1 and PE1. |\n\r"));
   14e86:	00 d0       	rcall	.+0      	; 0x14e88 <usr_loopbackTest+0x244>
   14e88:	0f 92       	push	r0
   14e8a:	ad b7       	in	r26, 0x3d	; 61
   14e8c:	be b7       	in	r27, 0x3e	; 62
   14e8e:	11 96       	adiw	r26, 0x01	; 1
   14e90:	ed 92       	st	X+, r14
   14e92:	fc 92       	st	X, r15
   14e94:	12 97       	sbiw	r26, 0x02	; 2
   14e96:	8b e5       	ldi	r24, 0x5B	; 91
   14e98:	91 e1       	ldi	r25, 0x11	; 17
   14e9a:	13 96       	adiw	r26, 0x03	; 3
   14e9c:	8d 93       	st	X+, r24
   14e9e:	9c 93       	st	X, r25
   14ea0:	14 97       	sbiw	r26, 0x04	; 4
   14ea2:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14ea6:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14ea8:	27 96       	adiw	r28, 0x07	; 7
   14eaa:	8e ad       	sts	0x6e, r24
   14eac:	9f ad       	sts	0x6f, r25
   14eae:	27 97       	sbiw	r28, 0x07	; 7
   14eb0:	0f 90       	pop	r0
   14eb2:	0f 90       	pop	r0
   14eb4:	0f 90       	pop	r0
   14eb6:	0f 90       	pop	r0
   14eb8:	b7 01       	movw	r22, r14
   14eba:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | and two mailbox modules.      |                   |\n\r"));
   14ebe:	00 d0       	rcall	.+0      	; 0x14ec0 <usr_loopbackTest+0x27c>
   14ec0:	0f 92       	push	r0
   14ec2:	ed b7       	in	r30, 0x3d	; 61
   14ec4:	fe b7       	in	r31, 0x3e	; 62
   14ec6:	e1 82       	std	Z+1, r14	; 0x01
   14ec8:	f2 82       	std	Z+2, r15	; 0x02
   14eca:	88 ea       	ldi	r24, 0xA8	; 168
   14ecc:	91 e1       	ldi	r25, 0x11	; 17
   14ece:	83 83       	std	Z+3, r24	; 0x03
   14ed0:	94 83       	std	Z+4, r25	; 0x04
   14ed2:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14ed6:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14ed8:	27 96       	adiw	r28, 0x07	; 7
   14eda:	8e ad       	sts	0x6e, r24
   14edc:	9f ad       	sts	0x6f, r25
   14ede:	27 97       	sbiw	r28, 0x07	; 7
   14ee0:	0f 90       	pop	r0
   14ee2:	0f 90       	pop	r0
   14ee4:	0f 90       	pop	r0
   14ee6:	0f 90       	pop	r0
   14ee8:	b7 01       	movw	r22, r14
   14eea:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   14eee:	00 d0       	rcall	.+0      	; 0x14ef0 <usr_loopbackTest+0x2ac>
   14ef0:	0f 92       	push	r0
   14ef2:	ad b7       	in	r26, 0x3d	; 61
   14ef4:	be b7       	in	r27, 0x3e	; 62
   14ef6:	11 96       	adiw	r26, 0x01	; 1
   14ef8:	ed 92       	st	X+, r14
   14efa:	fc 92       	st	X, r15
   14efc:	12 97       	sbiw	r26, 0x02	; 2
   14efe:	85 ef       	ldi	r24, 0xF5	; 245
   14f00:	91 e1       	ldi	r25, 0x11	; 17
   14f02:	13 96       	adiw	r26, 0x03	; 3
   14f04:	8d 93       	st	X+, r24
   14f06:	9c 93       	st	X, r25
   14f08:	14 97       	sbiw	r26, 0x04	; 4
   14f0a:	76 c0       	rjmp	.+236    	; 0x14ff8 <usr_loopbackTest+0x3b4>
      arb_write( t_consoleHndl,
                 pc_buff,
                 s_size);
   }/*End else if( t_type == TWI_LOOPBACK_TEST)*/
   else if( t_type == SPI_LOOPBACK_TEST)
   14f0c:	b2 e0       	ldi	r27, 0x02	; 2
   14f0e:	8b 16       	cp	r8, r27
   14f10:	09 f0       	breq	.+2      	; 0x14f14 <usr_loopbackTest+0x2d0>
   14f12:	80 c0       	rjmp	.+256    	; 0x15014 <usr_loopbackTest+0x3d0>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| SPI loopback test  | Loops back a message between  | Connect pins PF5  |\n\r"));
   14f14:	00 d0       	rcall	.+0      	; 0x14f16 <usr_loopbackTest+0x2d2>
   14f16:	0f 92       	push	r0
   14f18:	ed b7       	in	r30, 0x3d	; 61
   14f1a:	fe b7       	in	r31, 0x3e	; 62
   14f1c:	e1 82       	std	Z+1, r14	; 0x01
   14f1e:	f2 82       	std	Z+2, r15	; 0x02
   14f20:	82 e4       	ldi	r24, 0x42	; 66
   14f22:	92 e1       	ldi	r25, 0x12	; 18
   14f24:	83 83       	std	Z+3, r24	; 0x03
   14f26:	94 83       	std	Z+4, r25	; 0x04
   14f28:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14f2c:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14f2e:	27 96       	adiw	r28, 0x07	; 7
   14f30:	8e ad       	sts	0x6e, r24
   14f32:	9f ad       	sts	0x6f, r25
   14f34:	27 97       	sbiw	r28, 0x07	; 7
   14f36:	0f 90       	pop	r0
   14f38:	0f 90       	pop	r0
   14f3a:	0f 90       	pop	r0
   14f3c:	0f 90       	pop	r0
   14f3e:	b7 01       	movw	r22, r14
   14f40:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PF6.          |\n\r"));
   14f44:	00 d0       	rcall	.+0      	; 0x14f46 <usr_loopbackTest+0x302>
   14f46:	0f 92       	push	r0
   14f48:	ad b7       	in	r26, 0x3d	; 61
   14f4a:	be b7       	in	r27, 0x3e	; 62
   14f4c:	11 96       	adiw	r26, 0x01	; 1
   14f4e:	ed 92       	st	X+, r14
   14f50:	fc 92       	st	X, r15
   14f52:	12 97       	sbiw	r26, 0x02	; 2
   14f54:	8f e8       	ldi	r24, 0x8F	; 143
   14f56:	92 e1       	ldi	r25, 0x12	; 18
   14f58:	13 96       	adiw	r26, 0x03	; 3
   14f5a:	8d 93       	st	X+, r24
   14f5c:	9c 93       	st	X, r25
   14f5e:	14 97       	sbiw	r26, 0x04	; 4
   14f60:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14f64:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14f66:	27 96       	adiw	r28, 0x07	; 7
   14f68:	8e ad       	sts	0x6e, r24
   14f6a:	9f ad       	sts	0x6f, r25
   14f6c:	27 97       	sbiw	r28, 0x07	; 7
   14f6e:	0f 90       	pop	r0
   14f70:	0f 90       	pop	r0
   14f72:	0f 90       	pop	r0
   14f74:	0f 90       	pop	r0
   14f76:	b7 01       	movw	r22, r14
   14f78:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using SPI2       |                   |\n\r"));
   14f7c:	00 d0       	rcall	.+0      	; 0x14f7e <usr_loopbackTest+0x33a>
   14f7e:	0f 92       	push	r0
   14f80:	ed b7       	in	r30, 0x3d	; 61
   14f82:	fe b7       	in	r31, 0x3e	; 62
   14f84:	e1 82       	std	Z+1, r14	; 0x01
   14f86:	f2 82       	std	Z+2, r15	; 0x02
   14f88:	8c ed       	ldi	r24, 0xDC	; 220
   14f8a:	92 e1       	ldi	r25, 0x12	; 18
   14f8c:	83 83       	std	Z+3, r24	; 0x03
   14f8e:	94 83       	std	Z+4, r25	; 0x04
   14f90:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14f94:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14f96:	27 96       	adiw	r28, 0x07	; 7
   14f98:	8e ad       	sts	0x6e, r24
   14f9a:	9f ad       	sts	0x6f, r25
   14f9c:	27 97       	sbiw	r28, 0x07	; 7
   14f9e:	0f 90       	pop	r0
   14fa0:	0f 90       	pop	r0
   14fa2:	0f 90       	pop	r0
   14fa4:	0f 90       	pop	r0
   14fa6:	b7 01       	movw	r22, r14
   14fa8:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | and two mailbox modules.      |                   |\n\r"));
   14fac:	00 d0       	rcall	.+0      	; 0x14fae <usr_loopbackTest+0x36a>
   14fae:	0f 92       	push	r0
   14fb0:	ad b7       	in	r26, 0x3d	; 61
   14fb2:	be b7       	in	r27, 0x3e	; 62
   14fb4:	11 96       	adiw	r26, 0x01	; 1
   14fb6:	ed 92       	st	X+, r14
   14fb8:	fc 92       	st	X, r15
   14fba:	12 97       	sbiw	r26, 0x02	; 2
   14fbc:	89 e2       	ldi	r24, 0x29	; 41
   14fbe:	93 e1       	ldi	r25, 0x13	; 19
   14fc0:	13 96       	adiw	r26, 0x03	; 3
   14fc2:	8d 93       	st	X+, r24
   14fc4:	9c 93       	st	X, r25
   14fc6:	14 97       	sbiw	r26, 0x04	; 4
   14fc8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14fcc:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14fce:	27 96       	adiw	r28, 0x07	; 7
   14fd0:	8e ad       	sts	0x6e, r24
   14fd2:	9f ad       	sts	0x6f, r25
   14fd4:	27 97       	sbiw	r28, 0x07	; 7
   14fd6:	0f 90       	pop	r0
   14fd8:	0f 90       	pop	r0
   14fda:	0f 90       	pop	r0
   14fdc:	0f 90       	pop	r0
   14fde:	b7 01       	movw	r22, r14
   14fe0:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   14fe4:	00 d0       	rcall	.+0      	; 0x14fe6 <usr_loopbackTest+0x3a2>
   14fe6:	0f 92       	push	r0
   14fe8:	ed b7       	in	r30, 0x3d	; 61
   14fea:	fe b7       	in	r31, 0x3e	; 62
   14fec:	e1 82       	std	Z+1, r14	; 0x01
   14fee:	f2 82       	std	Z+2, r15	; 0x02
   14ff0:	86 e7       	ldi	r24, 0x76	; 118
   14ff2:	93 e1       	ldi	r25, 0x13	; 19
   14ff4:	83 83       	std	Z+3, r24	; 0x03
   14ff6:	94 83       	std	Z+4, r25	; 0x04
   14ff8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   14ffc:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14ffe:	27 96       	adiw	r28, 0x07	; 7
   15000:	8e ad       	sts	0x6e, r24
   15002:	9f ad       	sts	0x6f, r25
   15004:	27 97       	sbiw	r28, 0x07	; 7
   15006:	0f 90       	pop	r0
   15008:	0f 90       	pop	r0
   1500a:	0f 90       	pop	r0
   1500c:	0f 90       	pop	r0
   1500e:	b7 01       	movw	r22, r14
   15010:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      pc_buff,
      s_size);
   }/*End else if( t_type == SPI_LOOPBACK_TEST)*/

   s_size = sprintf_P( (char *)pc_buff, PSTR("Select number of trials (0<->10000), press enter-> "));
   15014:	00 d0       	rcall	.+0      	; 0x15016 <usr_loopbackTest+0x3d2>
   15016:	0f 92       	push	r0
   15018:	ad b7       	in	r26, 0x3d	; 61
   1501a:	be b7       	in	r27, 0x3e	; 62
   1501c:	11 96       	adiw	r26, 0x01	; 1
   1501e:	ed 92       	st	X+, r14
   15020:	fc 92       	st	X, r15
   15022:	12 97       	sbiw	r26, 0x02	; 2
   15024:	83 ec       	ldi	r24, 0xC3	; 195
   15026:	93 e1       	ldi	r25, 0x13	; 19
   15028:	13 96       	adiw	r26, 0x03	; 3
   1502a:	8d 93       	st	X+, r24
   1502c:	9c 93       	st	X, r25
   1502e:	14 97       	sbiw	r26, 0x04	; 4
   15030:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15034:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15036:	27 96       	adiw	r28, 0x07	; 7
   15038:	8e ad       	sts	0x6e, r24
   1503a:	9f ad       	sts	0x6f, r25
   1503c:	27 97       	sbiw	r28, 0x07	; 7
   1503e:	0f 90       	pop	r0
   15040:	0f 90       	pop	r0
   15042:	0f 90       	pop	r0
   15044:	0f 90       	pop	r0
   15046:	b7 01       	movw	r22, r14
   15048:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
   /*------------------------------------------------------------------------*
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
   1504c:	27 96       	adiw	r28, 0x07	; 7
   1504e:	8e ad       	sts	0x6e, r24
   15050:	9f ad       	sts	0x6f, r25
   15052:	27 97       	sbiw	r28, 0x07	; 7
                            ac_txMessage,
   15054:	e5 e2       	ldi	r30, 0x25	; 37
   15056:	ce 2e       	mov	r12, r30
   15058:	d1 2c       	mov	r13, r1
   1505a:	cc 0e       	add	r12, r28
   1505c:	dd 1e       	adc	r13, r29
   /*------------------------------------------------------------------------*
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
   1505e:	b6 01       	movw	r22, r12
   15060:	40 e2       	ldi	r20, 0x20	; 32
   15062:	50 e0       	ldi	r21, 0x00	; 0
   15064:	0e 94 ee 83 	call	0x107dc	; 0x107dc <arb_read>
                            ac_txMessage,
                            (uint16_t)sizeof( ac_txMessage));

   s_numOfTrials = (int16_t)atoi( (char *)ac_txMessage);
   15068:	c6 01       	movw	r24, r12
   1506a:	0e 94 c8 b5 	call	0x16b90	; 0x16b90 <atoi>
   1506e:	29 96       	adiw	r28, 0x09	; 9
   15070:	8e af       	sts	0x7e, r24
   15072:	9f af       	sts	0x7f, r25
   15074:	29 97       	sbiw	r28, 0x09	; 9
   if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))
   15076:	01 97       	sbiw	r24, 0x01	; 1
   15078:	b7 e2       	ldi	r27, 0x27	; 39
   1507a:	80 31       	cpi	r24, 0x10	; 16
   1507c:	9b 07       	cpc	r25, r27
   1507e:	48 f0       	brcs	.+18     	; 0x15092 <usr_loopbackTest+0x44e>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid CMD\n\r"));
   15080:	00 d0       	rcall	.+0      	; 0x15082 <usr_loopbackTest+0x43e>
   15082:	0f 92       	push	r0
   15084:	ed b7       	in	r30, 0x3d	; 61
   15086:	fe b7       	in	r31, 0x3e	; 62
   15088:	e1 82       	std	Z+1, r14	; 0x01
   1508a:	f2 82       	std	Z+2, r15	; 0x02
   1508c:	87 ef       	ldi	r24, 0xF7	; 247
   1508e:	93 e1       	ldi	r25, 0x13	; 19
   15090:	37 c0       	rjmp	.+110    	; 0x15100 <usr_loopbackTest+0x4bc>
                 pc_buff,
                 s_size);
   }/*End if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))*/
   else
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Enter the test message-> "));
   15092:	00 d0       	rcall	.+0      	; 0x15094 <usr_loopbackTest+0x450>
   15094:	0f 92       	push	r0
   15096:	ad b7       	in	r26, 0x3d	; 61
   15098:	be b7       	in	r27, 0x3e	; 62
   1509a:	11 96       	adiw	r26, 0x01	; 1
   1509c:	ed 92       	st	X+, r14
   1509e:	fc 92       	st	X, r15
   150a0:	12 97       	sbiw	r26, 0x02	; 2
   150a2:	85 e0       	ldi	r24, 0x05	; 5
   150a4:	94 e1       	ldi	r25, 0x14	; 20
   150a6:	13 96       	adiw	r26, 0x03	; 3
   150a8:	8d 93       	st	X+, r24
   150aa:	9c 93       	st	X, r25
   150ac:	14 97       	sbiw	r26, 0x04	; 4
   150ae:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   150b2:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   150b4:	27 96       	adiw	r28, 0x07	; 7
   150b6:	8e ad       	sts	0x6e, r24
   150b8:	9f ad       	sts	0x6f, r25
   150ba:	27 97       	sbiw	r28, 0x07	; 7
   150bc:	0f 90       	pop	r0
   150be:	0f 90       	pop	r0
   150c0:	0f 90       	pop	r0
   150c2:	0f 90       	pop	r0
   150c4:	b7 01       	movw	r22, r14
   150c6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
      /*---------------------------------------------------------------------*
       * Wait for response. The 'arb_read' method is used instead of
       * 'arb_ioctl' because we are reading the entire contents of the
       * command line without parsing the message into arguments.
       *---------------------------------------------------------------------*/
      s_numTxBytes = arb_read( t_consoleHndl,
   150ca:	27 96       	adiw	r28, 0x07	; 7
   150cc:	8e ad       	sts	0x6e, r24
   150ce:	9f ad       	sts	0x6f, r25
   150d0:	27 97       	sbiw	r28, 0x07	; 7
   150d2:	b6 01       	movw	r22, r12
   150d4:	40 e2       	ldi	r20, 0x20	; 32
   150d6:	50 e0       	ldi	r21, 0x00	; 0
   150d8:	0e 94 ee 83 	call	0x107dc	; 0x107dc <arb_read>
   150dc:	8c 01       	movw	r16, r24
                               (uint16_t)sizeof( ac_txMessage));

      /*---------------------------------------------------------------------*
       * Is the message too big for the queue?
       *---------------------------------------------------------------------*/
      if( (s_numTxBytes < 0) || (s_numTxBytes > (arb_mailboxGetQueueMaxSize(
   150de:	97 fd       	sbrc	r25, 7
   150e0:	07 c0       	rjmp	.+14     	; 0x150f0 <usr_loopbackTest+0x4ac>
   150e2:	8b 81       	ldd	r24, Y+3	; 0x03
   150e4:	9c 81       	ldd	r25, Y+4	; 0x04
   150e6:	0e 94 7f 89 	call	0x112fe	; 0x112fe <arb_mailboxGetQueueMaxSize>
   150ea:	08 17       	cp	r16, r24
   150ec:	19 07       	cpc	r17, r25
   150ee:	b4 f0       	brlt	.+44     	; 0x1511c <usr_loopbackTest+0x4d8>
      t_platTestInMbx) - 1)))
      {
         s_size = sprintf_P( (char *)pc_buff, PSTR("Message too big for mailbox.\n\r"));
   150f0:	00 d0       	rcall	.+0      	; 0x150f2 <usr_loopbackTest+0x4ae>
   150f2:	0f 92       	push	r0
   150f4:	ed b7       	in	r30, 0x3d	; 61
   150f6:	fe b7       	in	r31, 0x3e	; 62
   150f8:	e1 82       	std	Z+1, r14	; 0x01
   150fa:	f2 82       	std	Z+2, r15	; 0x02
   150fc:	8f e1       	ldi	r24, 0x1F	; 31
   150fe:	94 e1       	ldi	r25, 0x14	; 20
   15100:	83 83       	std	Z+3, r24	; 0x03
   15102:	94 83       	std	Z+4, r25	; 0x04
   15104:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15108:	ac 01       	movw	r20, r24
         arb_write( t_consoleHndl,
   1510a:	27 96       	adiw	r28, 0x07	; 7
   1510c:	8e ad       	sts	0x6e, r24
   1510e:	9f ad       	sts	0x6f, r25
   15110:	27 97       	sbiw	r28, 0x07	; 7
   15112:	0f 90       	pop	r0
   15114:	0f 90       	pop	r0
   15116:	0f 90       	pop	r0
   15118:	0f 90       	pop	r0
   1511a:	b7 c0       	rjmp	.+366    	; 0x1528a <usr_loopbackTest+0x646>

         /*------------------------------------------------------------------*
          * Prefix the message with a header that lets the platformTest
          * interface know that a uart loop test is being performed.
          *------------------------------------------------------------------*/
         memcpy( (void *)&ac_rxMessage, (void *)ac_txMessage, s_numTxBytes);
   1511c:	b0 2e       	mov	r11, r16
   1511e:	a1 2e       	mov	r10, r17
   15120:	ce 01       	movw	r24, r28
   15122:	05 96       	adiw	r24, 0x05	; 5
   15124:	b6 01       	movw	r22, r12
   15126:	a8 01       	movw	r20, r16
   15128:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>

         if( t_type == UART_LOOPBACK_TEST)
   1512c:	88 20       	and	r8, r8
   1512e:	11 f4       	brne	.+4      	; 0x15134 <usr_loopbackTest+0x4f0>
            ac_txMessage[0] = PLAT_UART_TEST;
   15130:	1d a2       	lds	r17, 0x9d
   15132:	0a c0       	rjmp	.+20     	; 0x15148 <usr_loopbackTest+0x504>
         else if( t_type == TWI_LOOPBACK_TEST)
   15134:	f1 e0       	ldi	r31, 0x01	; 1
   15136:	8f 16       	cp	r8, r31
   15138:	11 f4       	brne	.+4      	; 0x1513e <usr_loopbackTest+0x4fa>
            ac_txMessage[0] = PLAT_TWI_TEST;
   1513a:	8d a2       	lds	r24, 0x9d
   1513c:	05 c0       	rjmp	.+10     	; 0x15148 <usr_loopbackTest+0x504>
         else if( t_type == SPI_LOOPBACK_TEST)
   1513e:	22 e0       	ldi	r18, 0x02	; 2
   15140:	82 16       	cp	r8, r18
   15142:	11 f4       	brne	.+4      	; 0x15148 <usr_loopbackTest+0x504>
            ac_txMessage[0] = PLAT_SPI_TEST;
   15144:	83 e0       	ldi	r24, 0x03	; 3
   15146:	8d a3       	lds	r24, 0x5d

         memcpy( (void *)&ac_txMessage[1], (void *)ac_rxMessage,
   15148:	ce 01       	movw	r24, r28
   1514a:	86 96       	adiw	r24, 0x26	; 38
   1514c:	25 e0       	ldi	r18, 0x05	; 5
   1514e:	c2 2e       	mov	r12, r18
   15150:	d1 2c       	mov	r13, r1
   15152:	cc 0e       	add	r12, r28
   15154:	dd 1e       	adc	r13, r29
   15156:	b6 01       	movw	r22, r12
   15158:	4b 2d       	mov	r20, r11
   1515a:	5a 2d       	mov	r21, r10
   1515c:	0e 94 f1 b6 	call	0x16de2	; 0x16de2 <memcpy>
         s_numTxBytes);

         /*------------------------------------------------------------------*
          * Increase the message size by the size of the header.
          *------------------------------------------------------------------*/
         s_numTxBytes++;
   15160:	38 01       	movw	r6, r16
   15162:	08 94       	sec
   15164:	61 1c       	adc	r6, r1
   15166:	71 1c       	adc	r7, r1
   int16_t s_numTxBytes;
   int16_t s_numRxBytes;
   int8_t ac_txMessage[32];
   int8_t ac_rxMessage[32];
   int8_t c_index;
   int32_t i_byteErrors = 0;
   15168:	88 24       	eor	r8, r8
   1516a:	99 24       	eor	r9, r9
   1516c:	54 01       	movw	r10, r8
static void usr_loopbackTest( t_DEVHANDLE t_consoleHndl,
                              int8_t *pc_buff,
                              t_testType t_type)
{
   int16_t s_numOfTrials;
   int16_t s_count = 0;
   1516e:	00 e0       	ldi	r16, 0x00	; 0
   15170:	10 e0       	ldi	r17, 0x00	; 0

               /*------------------------------------------------------------*
                * Send the message to the platform test thread
                *------------------------------------------------------------*/
               s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
                                               ac_rxMessage,
   15172:	5c 2c       	mov	r5, r12
   15174:	cd 2c       	mov	r12, r13
                   *---------------------------------------------------------*/
                  arb_write( t_consoleHndl,
                             &ac_rxMessage[1],
                             (s_numRxBytes - 1));

                  s_size = sprintf_P( (char *)pc_buff, PSTR("\n\r"));
   15176:	3e e3       	ldi	r19, 0x3E	; 62
   15178:	23 2e       	mov	r2, r19
   1517a:	34 e1       	ldi	r19, 0x14	; 20
   1517c:	33 2e       	mov	r3, r19
            /*---------------------------------------------------------------*
             * Send the message to the platformTest interface where it will
             * be looped between two peripherals and returned to this calling
             * thread with a subsequent mailbox message.
             *---------------------------------------------------------------*/
            s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   1517e:	8b 81       	ldd	r24, Y+3	; 0x03
   15180:	9c 81       	ldd	r25, Y+4	; 0x04
   15182:	be 01       	movw	r22, r28
   15184:	6b 5d       	subi	r22, 0xDB	; 219
   15186:	7f 4f       	sbci	r23, 0xFF	; 255
   15188:	a3 01       	movw	r20, r6
   1518a:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
   1518e:	3c 01       	movw	r6, r24
                                             s_numTxBytes);

            /*---------------------------------------------------------------*
             * Was the message successfully sent?
             *---------------------------------------------------------------*/
            if( s_numTxBytes > 0) /*Yes*/
   15190:	18 16       	cp	r1, r24
   15192:	19 06       	cpc	r1, r25
   15194:	0c f0       	brlt	.+2      	; 0x15198 <usr_loopbackTest+0x554>
   15196:	45 c0       	rjmp	.+138    	; 0x15222 <usr_loopbackTest+0x5de>
            {

               /*------------------------------------------------------------*
                * Send the message to the platform test thread
                *------------------------------------------------------------*/
               s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
   15198:	89 81       	ldd	r24, Y+1	; 0x01
   1519a:	9a 81       	ldd	r25, Y+2	; 0x02
   1519c:	65 2d       	mov	r22, r5
   1519e:	7c 2d       	mov	r23, r12
   151a0:	40 e2       	ldi	r20, 0x20	; 32
   151a2:	50 e0       	ldi	r21, 0x00	; 0
   151a4:	0e 94 15 87 	call	0x10e2a	; 0x10e2a <arb_mailboxRead>
   151a8:	ac 01       	movw	r20, r24
                                               ac_rxMessage,
                                               (uint16_t)sizeof( ac_rxMessage));

               if( s_numRxBytes > 0)
   151aa:	18 16       	cp	r1, r24
   151ac:	19 06       	cpc	r1, r25
   151ae:	cc f5       	brge	.+114    	; 0x15222 <usr_loopbackTest+0x5de>
   151b0:	fe 01       	movw	r30, r28
   151b2:	b5 96       	adiw	r30, 0x25	; 37
   151b4:	a5 2d       	mov	r26, r5
   151b6:	bc 2d       	mov	r27, r12
 *---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_loopbackTest( t_DEVHANDLE t_consoleHndl,
   151b8:	cf 01       	movw	r24, r30
   151ba:	86 0d       	add	r24, r6
   151bc:	97 1d       	adc	r25, r7
   151be:	09 c0       	rjmp	.+18     	; 0x151d2 <usr_loopbackTest+0x58e>

               if( s_numRxBytes > 0)
               {
                  for( c_index = 0; c_index < s_numTxBytes; c_index++)
                  {
                     if( ac_txMessage[c_index] != ac_rxMessage[c_index])
   151c0:	31 91       	ld	r19, Z+
   151c2:	2d 91       	ld	r18, X+
   151c4:	32 17       	cp	r19, r18
   151c6:	29 f0       	breq	.+10     	; 0x151d2 <usr_loopbackTest+0x58e>
                        i_byteErrors++;
   151c8:	08 94       	sec
   151ca:	81 1c       	adc	r8, r1
   151cc:	91 1c       	adc	r9, r1
   151ce:	a1 1c       	adc	r10, r1
   151d0:	b1 1c       	adc	r11, r1
                                               ac_rxMessage,
                                               (uint16_t)sizeof( ac_rxMessage));

               if( s_numRxBytes > 0)
               {
                  for( c_index = 0; c_index < s_numTxBytes; c_index++)
   151d2:	e8 17       	cp	r30, r24
   151d4:	f9 07       	cpc	r31, r25
   151d6:	a1 f7       	brne	.-24     	; 0x151c0 <usr_loopbackTest+0x57c>
                  }/*End for( c_index = 0; c_index < s_numTxBytes; c_index++)*/

                  /*---------------------------------------------------------*
                   * Echo the received message, ignoring the header...
                   *---------------------------------------------------------*/
                  arb_write( t_consoleHndl,
   151d8:	27 96       	adiw	r28, 0x07	; 7
   151da:	8e ad       	sts	0x6e, r24
   151dc:	9f ad       	sts	0x6f, r25
   151de:	27 97       	sbiw	r28, 0x07	; 7
                             &ac_rxMessage[1],
                             (s_numRxBytes - 1));
   151e0:	41 50       	subi	r20, 0x01	; 1
   151e2:	50 40       	sbci	r21, 0x00	; 0
                  }/*End for( c_index = 0; c_index < s_numTxBytes; c_index++)*/

                  /*---------------------------------------------------------*
                   * Echo the received message, ignoring the header...
                   *---------------------------------------------------------*/
                  arb_write( t_consoleHndl,
   151e4:	be 01       	movw	r22, r28
   151e6:	6a 5f       	subi	r22, 0xFA	; 250
   151e8:	7f 4f       	sbci	r23, 0xFF	; 255
   151ea:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                             &ac_rxMessage[1],
                             (s_numRxBytes - 1));

                  s_size = sprintf_P( (char *)pc_buff, PSTR("\n\r"));
   151ee:	00 d0       	rcall	.+0      	; 0x151f0 <usr_loopbackTest+0x5ac>
   151f0:	0f 92       	push	r0
   151f2:	ad b7       	in	r26, 0x3d	; 61
   151f4:	be b7       	in	r27, 0x3e	; 62
   151f6:	11 96       	adiw	r26, 0x01	; 1
   151f8:	ed 92       	st	X+, r14
   151fa:	fc 92       	st	X, r15
   151fc:	12 97       	sbiw	r26, 0x02	; 2
   151fe:	13 96       	adiw	r26, 0x03	; 3
   15200:	2d 92       	st	X+, r2
   15202:	3c 92       	st	X, r3
   15204:	14 97       	sbiw	r26, 0x04	; 4
   15206:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1520a:	ac 01       	movw	r20, r24
                  arb_write( t_consoleHndl,
   1520c:	27 96       	adiw	r28, 0x07	; 7
   1520e:	8e ad       	sts	0x6e, r24
   15210:	9f ad       	sts	0x6f, r25
   15212:	27 97       	sbiw	r28, 0x07	; 7
   15214:	0f 90       	pop	r0
   15216:	0f 90       	pop	r0
   15218:	0f 90       	pop	r0
   1521a:	0f 90       	pop	r0
   1521c:	b7 01       	movw	r22, r14
   1521e:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>

               }/*End if( s_numRxBytes > 0)*/

            }/*End if( s_numTxBytes > 0)*/

            s_count++;
   15222:	0f 5f       	subi	r16, 0xFF	; 255
   15224:	1f 4f       	sbci	r17, 0xFF	; 255

            arb_sleep(1);
   15226:	81 e0       	ldi	r24, 0x01	; 1
   15228:	90 e0       	ldi	r25, 0x00	; 0
   1522a:	0e 94 30 a0 	call	0x14060	; 0x14060 <arb_sleep>
         /*------------------------------------------------------------------*
          * Increase the message size by the size of the header.
          *------------------------------------------------------------------*/
         s_numTxBytes++;

         while( s_count < s_numOfTrials)
   1522e:	29 96       	adiw	r28, 0x09	; 9
   15230:	2e ad       	sts	0x6e, r18
   15232:	3f ad       	sts	0x6f, r19
   15234:	29 97       	sbiw	r28, 0x09	; 9
   15236:	02 17       	cp	r16, r18
   15238:	13 07       	cpc	r17, r19
   1523a:	09 f0       	breq	.+2      	; 0x1523e <usr_loopbackTest+0x5fa>
   1523c:	a0 cf       	rjmp	.-192    	; 0x1517e <usr_loopbackTest+0x53a>

            arb_sleep(1);

         }/*End while( s_count < s_numOfTrials)*/

         s_size = sprintf_P( (char *)pc_buff, PSTR("Test finished. Received %d out of %d messages with %d errors.\n\r"),
   1523e:	8d b7       	in	r24, 0x3d	; 61
   15240:	9e b7       	in	r25, 0x3e	; 62
   15242:	0c 97       	sbiw	r24, 0x0c	; 12
   15244:	8d bf       	out	0x3d, r24	; 61
   15246:	9e bf       	out	0x3e, r25	; 62
   15248:	ed b7       	in	r30, 0x3d	; 61
   1524a:	fe b7       	in	r31, 0x3e	; 62
   1524c:	31 96       	adiw	r30, 0x01	; 1
   1524e:	ad b7       	in	r26, 0x3d	; 61
   15250:	be b7       	in	r27, 0x3e	; 62
   15252:	11 96       	adiw	r26, 0x01	; 1
   15254:	ed 92       	st	X+, r14
   15256:	fc 92       	st	X, r15
   15258:	12 97       	sbiw	r26, 0x02	; 2
   1525a:	81 e4       	ldi	r24, 0x41	; 65
   1525c:	94 e1       	ldi	r25, 0x14	; 20
   1525e:	82 83       	std	Z+2, r24	; 0x02
   15260:	93 83       	std	Z+3, r25	; 0x03
   15262:	04 83       	std	Z+4, r16	; 0x04
   15264:	15 83       	std	Z+5, r17	; 0x05
   15266:	06 83       	std	Z+6, r16	; 0x06
   15268:	17 83       	std	Z+7, r17	; 0x07
   1526a:	80 86       	std	Z+8, r8	; 0x08
   1526c:	91 86       	std	Z+9, r9	; 0x09
   1526e:	a2 86       	std	Z+10, r10	; 0x0a
   15270:	b3 86       	std	Z+11, r11	; 0x0b
   15272:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15276:	ac 01       	movw	r20, r24
         s_count, s_numOfTrials, i_byteErrors);
         arb_write( t_consoleHndl,
   15278:	27 96       	adiw	r28, 0x07	; 7
   1527a:	8e ad       	sts	0x6e, r24
   1527c:	9f ad       	sts	0x6f, r25
   1527e:	27 97       	sbiw	r28, 0x07	; 7
   15280:	ed b7       	in	r30, 0x3d	; 61
   15282:	fe b7       	in	r31, 0x3e	; 62
   15284:	3c 96       	adiw	r30, 0x0c	; 12
   15286:	ed bf       	out	0x3d, r30	; 61
   15288:	fe bf       	out	0x3e, r31	; 62
   1528a:	b7 01       	movw	r22, r14
   1528c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
                    s_size);

      }
   }

}/*End usr_loopbackTest*/
   15290:	c8 5b       	subi	r28, 0xB8	; 184
   15292:	df 4f       	sbci	r29, 0xFF	; 255
   15294:	cd bf       	out	0x3d, r28	; 61
   15296:	de bf       	out	0x3e, r29	; 62
   15298:	df 91       	pop	r29
   1529a:	cf 91       	pop	r28
   1529c:	1f 91       	pop	r17
   1529e:	0f 91       	pop	r16
   152a0:	ff 90       	pop	r15
   152a2:	ef 90       	pop	r14
   152a4:	df 90       	pop	r13
   152a6:	cf 90       	pop	r12
   152a8:	bf 90       	pop	r11
   152aa:	af 90       	pop	r10
   152ac:	9f 90       	pop	r9
   152ae:	8f 90       	pop	r8
   152b0:	7f 90       	pop	r7
   152b2:	6f 90       	pop	r6
   152b4:	5f 90       	pop	r5
   152b6:	3f 90       	pop	r3
   152b8:	2f 90       	pop	r2
   152ba:	08 95       	ret

000152bc <usr_console>:
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
bool usr_console( t_DEVHANDLE t_consoleHndl,
                  int8_t *pc_buff,
                  t_consoleTokHndl *pt_tokHndl)
{
   152bc:	5f 92       	push	r5
   152be:	6f 92       	push	r6
   152c0:	7f 92       	push	r7
   152c2:	8f 92       	push	r8
   152c4:	9f 92       	push	r9
   152c6:	af 92       	push	r10
   152c8:	bf 92       	push	r11
   152ca:	cf 92       	push	r12
   152cc:	df 92       	push	r13
   152ce:	ef 92       	push	r14
   152d0:	ff 92       	push	r15
   152d2:	0f 93       	push	r16
   152d4:	1f 93       	push	r17
   152d6:	cf 93       	push	r28
   152d8:	df 93       	push	r29
   152da:	cd b7       	in	r28, 0x3d	; 61
   152dc:	de b7       	in	r29, 0x3e	; 62
   152de:	a6 97       	sbiw	r28, 0x26	; 38
   152e0:	cd bf       	out	0x3d, r28	; 61
   152e2:	de bf       	out	0x3e, r29	; 62
   152e4:	8d a3       	lds	r24, 0x5d
   152e6:	9e a3       	lds	r25, 0x5e
   152e8:	8b 01       	movw	r16, r22
   152ea:	7a 01       	movw	r14, r20

   bool b_success = true; /*A valid command was found...*/

   if( strcmp( (char *)pt_tokHndl->ac_tok[0], "hlpu") == 0)
   152ec:	6a 01       	movw	r12, r20
   152ee:	ca 01       	movw	r24, r20
   152f0:	6b e2       	ldi	r22, 0x2B	; 43
   152f2:	74 e2       	ldi	r23, 0x24	; 36
   152f4:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   152f8:	00 97       	sbiw	r24, 0x00	; 0
   152fa:	09 f0       	breq	.+2      	; 0x152fe <usr_console+0x42>
   152fc:	a8 c0       	rjmp	.+336    	; 0x1544e <usr_console+0x192>
   {
      /*---------------------------------------------------------------------*
       * Display a list of all the possible user-space specific commands.
       *---------------------------------------------------------------------*/
      usr_displayUserHelp( t_consoleHndl,
   152fe:	ed a0       	lds	r30, 0x8d
   15300:	fe a0       	lds	r31, 0x8e

   /*------------------------------------------------------------------------*
    * Display a list of all the possible console commands specific
    * to a user-space application.
    *------------------------------------------------------------------------*/
   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   15302:	00 d0       	rcall	.+0      	; 0x15304 <usr_console+0x48>
   15304:	0f 92       	push	r0
   15306:	ed b7       	in	r30, 0x3d	; 61
   15308:	fe b7       	in	r31, 0x3e	; 62
   1530a:	01 83       	std	Z+1, r16	; 0x01
   1530c:	12 83       	std	Z+2, r17	; 0x02
   1530e:	81 ef       	ldi	r24, 0xF1	; 241
   15310:	9b e0       	ldi	r25, 0x0B	; 11
   15312:	83 83       	std	Z+3, r24	; 0x03
   15314:	94 83       	std	Z+4, r25	; 0x04
   15316:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1531a:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1531c:	0f 90       	pop	r0
   1531e:	0f 90       	pop	r0
   15320:	0f 90       	pop	r0
   15322:	0f 90       	pop	r0
   15324:	c7 01       	movw	r24, r14
   15326:	b8 01       	movw	r22, r16
   15328:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Command |     Arguments     |              Description                 |\n\r"));
   1532c:	00 d0       	rcall	.+0      	; 0x1532e <usr_console+0x72>
   1532e:	0f 92       	push	r0
   15330:	ed b7       	in	r30, 0x3d	; 61
   15332:	fe b7       	in	r31, 0x3e	; 62
   15334:	01 83       	std	Z+1, r16	; 0x01
   15336:	12 83       	std	Z+2, r17	; 0x02
   15338:	8e e3       	ldi	r24, 0x3E	; 62
   1533a:	9c e0       	ldi	r25, 0x0C	; 12
   1533c:	83 83       	std	Z+3, r24	; 0x03
   1533e:	94 83       	std	Z+4, r25	; 0x04
   15340:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15344:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15346:	0f 90       	pop	r0
   15348:	0f 90       	pop	r0
   1534a:	0f 90       	pop	r0
   1534c:	0f 90       	pop	r0
   1534e:	c7 01       	movw	r24, r14
   15350:	b8 01       	movw	r22, r16
   15352:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|-------------------|------------------------------------------|\n\r"));
   15356:	00 d0       	rcall	.+0      	; 0x15358 <usr_console+0x9c>
   15358:	0f 92       	push	r0
   1535a:	ed b7       	in	r30, 0x3d	; 61
   1535c:	fe b7       	in	r31, 0x3e	; 62
   1535e:	01 83       	std	Z+1, r16	; 0x01
   15360:	12 83       	std	Z+2, r17	; 0x02
   15362:	8b e8       	ldi	r24, 0x8B	; 139
   15364:	9c e0       	ldi	r25, 0x0C	; 12
   15366:	83 83       	std	Z+3, r24	; 0x03
   15368:	94 83       	std	Z+4, r25	; 0x04
   1536a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1536e:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15370:	0f 90       	pop	r0
   15372:	0f 90       	pop	r0
   15374:	0f 90       	pop	r0
   15376:	0f 90       	pop	r0
   15378:	c7 01       	movw	r24, r14
   1537a:	b8 01       	movw	r22, r16
   1537c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| ult     |                   | Performs a UART loopback test.           |\n\r"));
   15380:	00 d0       	rcall	.+0      	; 0x15382 <usr_console+0xc6>
   15382:	0f 92       	push	r0
   15384:	ed b7       	in	r30, 0x3d	; 61
   15386:	fe b7       	in	r31, 0x3e	; 62
   15388:	01 83       	std	Z+1, r16	; 0x01
   1538a:	12 83       	std	Z+2, r17	; 0x02
   1538c:	88 ed       	ldi	r24, 0xD8	; 216
   1538e:	9c e0       	ldi	r25, 0x0C	; 12
   15390:	83 83       	std	Z+3, r24	; 0x03
   15392:	94 83       	std	Z+4, r25	; 0x04
   15394:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15398:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1539a:	0f 90       	pop	r0
   1539c:	0f 90       	pop	r0
   1539e:	0f 90       	pop	r0
   153a0:	0f 90       	pop	r0
   153a2:	c7 01       	movw	r24, r14
   153a4:	b8 01       	movw	r22, r16
   153a6:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| tlt     |                   | Performs a TWI loopback test.            |\n\r"));
   153aa:	00 d0       	rcall	.+0      	; 0x153ac <usr_console+0xf0>
   153ac:	0f 92       	push	r0
   153ae:	ed b7       	in	r30, 0x3d	; 61
   153b0:	fe b7       	in	r31, 0x3e	; 62
   153b2:	01 83       	std	Z+1, r16	; 0x01
   153b4:	12 83       	std	Z+2, r17	; 0x02
   153b6:	85 e2       	ldi	r24, 0x25	; 37
   153b8:	9d e0       	ldi	r25, 0x0D	; 13
   153ba:	83 83       	std	Z+3, r24	; 0x03
   153bc:	94 83       	std	Z+4, r25	; 0x04
   153be:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   153c2:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   153c4:	0f 90       	pop	r0
   153c6:	0f 90       	pop	r0
   153c8:	0f 90       	pop	r0
   153ca:	0f 90       	pop	r0
   153cc:	c7 01       	movw	r24, r14
   153ce:	b8 01       	movw	r22, r16
   153d0:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| tgt     |                   | Performs a test using a timer and 2 gpios|\n\r"));
   153d4:	00 d0       	rcall	.+0      	; 0x153d6 <usr_console+0x11a>
   153d6:	0f 92       	push	r0
   153d8:	ed b7       	in	r30, 0x3d	; 61
   153da:	fe b7       	in	r31, 0x3e	; 62
   153dc:	01 83       	std	Z+1, r16	; 0x01
   153de:	12 83       	std	Z+2, r17	; 0x02
   153e0:	82 e7       	ldi	r24, 0x72	; 114
   153e2:	9d e0       	ldi	r25, 0x0D	; 13
   153e4:	83 83       	std	Z+3, r24	; 0x03
   153e6:	94 83       	std	Z+4, r25	; 0x04
   153e8:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   153ec:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   153ee:	0f 90       	pop	r0
   153f0:	0f 90       	pop	r0
   153f2:	0f 90       	pop	r0
   153f4:	0f 90       	pop	r0
   153f6:	c7 01       	movw	r24, r14
   153f8:	b8 01       	movw	r22, r16
   153fa:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| slt     |                   | Performs a SPI loopback test.            |\n\r"));
   153fe:	00 d0       	rcall	.+0      	; 0x15400 <usr_console+0x144>
   15400:	0f 92       	push	r0
   15402:	ed b7       	in	r30, 0x3d	; 61
   15404:	fe b7       	in	r31, 0x3e	; 62
   15406:	01 83       	std	Z+1, r16	; 0x01
   15408:	12 83       	std	Z+2, r17	; 0x02
   1540a:	8f eb       	ldi	r24, 0xBF	; 191
   1540c:	9d e0       	ldi	r25, 0x0D	; 13
   1540e:	83 83       	std	Z+3, r24	; 0x03
   15410:	94 83       	std	Z+4, r25	; 0x04
   15412:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15416:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15418:	0f 90       	pop	r0
   1541a:	0f 90       	pop	r0
   1541c:	0f 90       	pop	r0
   1541e:	0f 90       	pop	r0
   15420:	c7 01       	movw	r24, r14
   15422:	b8 01       	movw	r22, r16
   15424:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'-------------------'------------------------------------------'\n\r"));
   15428:	00 d0       	rcall	.+0      	; 0x1542a <usr_console+0x16e>
   1542a:	0f 92       	push	r0
   1542c:	ed b7       	in	r30, 0x3d	; 61
   1542e:	fe b7       	in	r31, 0x3e	; 62
   15430:	01 83       	std	Z+1, r16	; 0x01
   15432:	12 83       	std	Z+2, r17	; 0x02
   15434:	8c e0       	ldi	r24, 0x0C	; 12
   15436:	9e e0       	ldi	r25, 0x0E	; 14
   15438:	83 83       	std	Z+3, r24	; 0x03
   1543a:	94 83       	std	Z+4, r25	; 0x04
   1543c:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15440:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15442:	0f 90       	pop	r0
   15444:	0f 90       	pop	r0
   15446:	0f 90       	pop	r0
   15448:	0f 90       	pop	r0
   1544a:	c7 01       	movw	r24, r14
   1544c:	96 c1       	rjmp	.+812    	; 0x1577a <usr_console+0x4be>
       *---------------------------------------------------------------------*/
      usr_displayUserHelp( t_consoleHndl,
                           pc_buff);

   }/*End else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "hlpu") == 0)*/
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "ult") == 0)
   1544e:	c7 01       	movw	r24, r14
   15450:	60 e3       	ldi	r22, 0x30	; 48
   15452:	74 e2       	ldi	r23, 0x24	; 36
   15454:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   15458:	00 97       	sbiw	r24, 0x00	; 0
   1545a:	59 f4       	brne	.+22     	; 0x15472 <usr_console+0x1b6>
   && (pt_tokHndl->c_numTokens == 1))
   1545c:	f7 01       	movw	r30, r14
   1545e:	e0 59       	subi	r30, 0x90	; 144
   15460:	ff 4f       	sbci	r31, 0xFF	; 255
   15462:	80 81       	ld	r24, Z
   15464:	81 30       	cpi	r24, 0x01	; 1
   15466:	29 f4       	brne	.+10     	; 0x15472 <usr_console+0x1b6>
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using UART6, a DMA, and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   15468:	8d a1       	lds	r24, 0x4d
   1546a:	9e a1       	lds	r25, 0x4e
   1546c:	b8 01       	movw	r22, r16
   1546e:	40 e0       	ldi	r20, 0x00	; 0
   15470:	23 c0       	rjmp	.+70     	; 0x154b8 <usr_console+0x1fc>
                        pc_buff,
                        UART_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "tlt") == 0)
   15472:	c6 01       	movw	r24, r12
   15474:	64 e3       	ldi	r22, 0x34	; 52
   15476:	74 e2       	ldi	r23, 0x24	; 36
   15478:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   1547c:	00 97       	sbiw	r24, 0x00	; 0
   1547e:	59 f4       	brne	.+22     	; 0x15496 <usr_console+0x1da>
   && (pt_tokHndl->c_numTokens == 1))
   15480:	f7 01       	movw	r30, r14
   15482:	e0 59       	subi	r30, 0x90	; 144
   15484:	ff 4f       	sbci	r31, 0xFF	; 255
   15486:	80 81       	ld	r24, Z
   15488:	81 30       	cpi	r24, 0x01	; 1
   1548a:	29 f4       	brne	.+10     	; 0x15496 <usr_console+0x1da>
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using TWI2, TWI3, and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   1548c:	8d a1       	lds	r24, 0x4d
   1548e:	9e a1       	lds	r25, 0x4e
   15490:	b8 01       	movw	r22, r16
   15492:	41 e0       	ldi	r20, 0x01	; 1
   15494:	11 c0       	rjmp	.+34     	; 0x154b8 <usr_console+0x1fc>
                        pc_buff,
                        TWI_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "slt") == 0)
   15496:	c6 01       	movw	r24, r12
   15498:	68 e3       	ldi	r22, 0x38	; 56
   1549a:	74 e2       	ldi	r23, 0x24	; 36
   1549c:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   154a0:	00 97       	sbiw	r24, 0x00	; 0
   154a2:	69 f4       	brne	.+26     	; 0x154be <usr_console+0x202>
   && (pt_tokHndl->c_numTokens == 1))
   154a4:	f7 01       	movw	r30, r14
   154a6:	e0 59       	subi	r30, 0x90	; 144
   154a8:	ff 4f       	sbci	r31, 0xFF	; 255
   154aa:	80 81       	ld	r24, Z
   154ac:	81 30       	cpi	r24, 0x01	; 1
   154ae:	39 f4       	brne	.+14     	; 0x154be <usr_console+0x202>
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using SPI2 and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   154b0:	8d a1       	lds	r24, 0x4d
   154b2:	9e a1       	lds	r25, 0x4e
   154b4:	b8 01       	movw	r22, r16
   154b6:	42 e0       	ldi	r20, 0x02	; 2
   154b8:	0e 94 22 a6 	call	0x14c44	; 0x14c44 <usr_loopbackTest>
   154bc:	61 c1       	rjmp	.+706    	; 0x15780 <usr_console+0x4c4>
                        pc_buff,
                        SPI_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "tgt") == 0)
   154be:	c6 01       	movw	r24, r12
   154c0:	6c e3       	ldi	r22, 0x3C	; 60
   154c2:	74 e2       	ldi	r23, 0x24	; 36
   154c4:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <strcmp>
   154c8:	00 97       	sbiw	r24, 0x00	; 0
   154ca:	09 f0       	breq	.+2      	; 0x154ce <usr_console+0x212>
   154cc:	5b c1       	rjmp	.+694    	; 0x15784 <usr_console+0x4c8>
   && (pt_tokHndl->c_numTokens == 1))
   154ce:	f7 01       	movw	r30, r14
   154d0:	e0 59       	subi	r30, 0x90	; 144
   154d2:	ff 4f       	sbci	r31, 0xFF	; 255
   154d4:	b0 80       	ld	r11, Z
   154d6:	f1 e0       	ldi	r31, 0x01	; 1
   154d8:	bf 16       	cp	r11, r31
   154da:	09 f0       	breq	.+2      	; 0x154de <usr_console+0x222>
   154dc:	53 c1       	rjmp	.+678    	; 0x15784 <usr_console+0x4c8>
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using TIMER_1, GPIO_1, GPIO_2, and one
       * mailbox module.
       *---------------------------------------------------------------------*/
      usr_timerGpioTest( t_consoleHndl,
   154de:	cd a0       	lds	r28, 0x8d
   154e0:	de a0       	lds	r29, 0x8e
   154e2:	ac 2c       	mov	r10, r12
   154e4:	5d 2c       	mov	r5, r13
   uint16_t s_size;
   int16_t s_numOfTrials;
   int16_t s_numTxBytes;
   int16_t s_numRxBytes;
   int8_t ac_buff[32];
   t_MAILBOXHNDL t_platTestInMbx  = usr_getPlatTestInMailbox();
   154e6:	0e 94 b3 ac 	call	0x15966	; 0x15966 <usr_getPlatTestInMailbox>
   154ea:	8b 83       	std	Y+3, r24	; 0x03
   154ec:	9c 83       	std	Y+4, r25	; 0x04
   t_MAILBOXHNDL t_platTestOutMbx = usr_getPlatTestOutMailbox();
   154ee:	0e 94 b8 ac 	call	0x15970	; 0x15970 <usr_getPlatTestOutMailbox>
   154f2:	89 83       	std	Y+1, r24	; 0x01
   154f4:	9a 83       	std	Y+2, r25	; 0x02

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   154f6:	00 d0       	rcall	.+0      	; 0x154f8 <usr_console+0x23c>
   154f8:	0f 92       	push	r0
   154fa:	ed b7       	in	r30, 0x3d	; 61
   154fc:	fe b7       	in	r31, 0x3e	; 62
   154fe:	01 83       	std	Z+1, r16	; 0x01
   15500:	12 83       	std	Z+2, r17	; 0x02
   15502:	81 e8       	ldi	r24, 0x81	; 129
   15504:	94 e1       	ldi	r25, 0x14	; 20
   15506:	83 83       	std	Z+3, r24	; 0x03
   15508:	94 83       	std	Z+4, r25	; 0x04
   1550a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1550e:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15510:	0f 90       	pop	r0
   15512:	0f 90       	pop	r0
   15514:	0f 90       	pop	r0
   15516:	0f 90       	pop	r0
   15518:	c6 01       	movw	r24, r12
   1551a:	b8 01       	movw	r22, r16
   1551c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|        Test        |          Description          |       Setup       |\n\r"));
   15520:	00 d0       	rcall	.+0      	; 0x15522 <usr_console+0x266>
   15522:	0f 92       	push	r0
   15524:	ed b7       	in	r30, 0x3d	; 61
   15526:	fe b7       	in	r31, 0x3e	; 62
   15528:	01 83       	std	Z+1, r16	; 0x01
   1552a:	12 83       	std	Z+2, r17	; 0x02
   1552c:	8e ec       	ldi	r24, 0xCE	; 206
   1552e:	94 e1       	ldi	r25, 0x14	; 20
   15530:	83 83       	std	Z+3, r24	; 0x03
   15532:	94 83       	std	Z+4, r25	; 0x04
   15534:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15538:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1553a:	0f 90       	pop	r0
   1553c:	0f 90       	pop	r0
   1553e:	0f 90       	pop	r0
   15540:	0f 90       	pop	r0
   15542:	c6 01       	movw	r24, r12
   15544:	b8 01       	movw	r22, r16
   15546:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|--------------------|-------------------------------|-------------------|\n\r"));
   1554a:	00 d0       	rcall	.+0      	; 0x1554c <usr_console+0x290>
   1554c:	0f 92       	push	r0
   1554e:	ed b7       	in	r30, 0x3d	; 61
   15550:	fe b7       	in	r31, 0x3e	; 62
   15552:	01 83       	std	Z+1, r16	; 0x01
   15554:	12 83       	std	Z+2, r17	; 0x02
   15556:	8b e1       	ldi	r24, 0x1B	; 27
   15558:	95 e1       	ldi	r25, 0x15	; 21
   1555a:	83 83       	std	Z+3, r24	; 0x03
   1555c:	94 83       	std	Z+4, r25	; 0x04
   1555e:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15562:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15564:	0f 90       	pop	r0
   15566:	0f 90       	pop	r0
   15568:	0f 90       	pop	r0
   1556a:	0f 90       	pop	r0
   1556c:	c6 01       	movw	r24, r12
   1556e:	b8 01       	movw	r22, r16
   15570:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Timer/GPIO test    | Enables TIMER_1 which goes off| Connect pins PH3  |\n\r"));
   15574:	00 d0       	rcall	.+0      	; 0x15576 <usr_console+0x2ba>
   15576:	0f 92       	push	r0
   15578:	ed b7       	in	r30, 0x3d	; 61
   1557a:	fe b7       	in	r31, 0x3e	; 62
   1557c:	01 83       	std	Z+1, r16	; 0x01
   1557e:	12 83       	std	Z+2, r17	; 0x02
   15580:	88 e6       	ldi	r24, 0x68	; 104
   15582:	95 e1       	ldi	r25, 0x15	; 21
   15584:	83 83       	std	Z+3, r24	; 0x03
   15586:	94 83       	std	Z+4, r25	; 0x04
   15588:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1558c:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1558e:	0f 90       	pop	r0
   15590:	0f 90       	pop	r0
   15592:	0f 90       	pop	r0
   15594:	0f 90       	pop	r0
   15596:	c6 01       	movw	r24, r12
   15598:	b8 01       	movw	r22, r16
   1559a:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | at a one second rate. The     | and PH4.          |\n\r"));
   1559e:	00 d0       	rcall	.+0      	; 0x155a0 <usr_console+0x2e4>
   155a0:	0f 92       	push	r0
   155a2:	ed b7       	in	r30, 0x3d	; 61
   155a4:	fe b7       	in	r31, 0x3e	; 62
   155a6:	01 83       	std	Z+1, r16	; 0x01
   155a8:	12 83       	std	Z+2, r17	; 0x02
   155aa:	85 eb       	ldi	r24, 0xB5	; 181
   155ac:	95 e1       	ldi	r25, 0x15	; 21
   155ae:	83 83       	std	Z+3, r24	; 0x03
   155b0:	94 83       	std	Z+4, r25	; 0x04
   155b2:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   155b6:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   155b8:	0f 90       	pop	r0
   155ba:	0f 90       	pop	r0
   155bc:	0f 90       	pop	r0
   155be:	0f 90       	pop	r0
   155c0:	c6 01       	movw	r24, r12
   155c2:	b8 01       	movw	r22, r16
   155c4:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | timer toggles GPIO_2 which    |                   |\n\r"));
   155c8:	00 d0       	rcall	.+0      	; 0x155ca <usr_console+0x30e>
   155ca:	0f 92       	push	r0
   155cc:	ed b7       	in	r30, 0x3d	; 61
   155ce:	fe b7       	in	r31, 0x3e	; 62
   155d0:	01 83       	std	Z+1, r16	; 0x01
   155d2:	12 83       	std	Z+2, r17	; 0x02
   155d4:	82 e0       	ldi	r24, 0x02	; 2
   155d6:	96 e1       	ldi	r25, 0x16	; 22
   155d8:	83 83       	std	Z+3, r24	; 0x03
   155da:	94 83       	std	Z+4, r25	; 0x04
   155dc:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   155e0:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   155e2:	0f 90       	pop	r0
   155e4:	0f 90       	pop	r0
   155e6:	0f 90       	pop	r0
   155e8:	0f 90       	pop	r0
   155ea:	c6 01       	movw	r24, r12
   155ec:	b8 01       	movw	r22, r16
   155ee:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | causes an interrupt on GPIO_1.|                   |\n\r"));
   155f2:	00 d0       	rcall	.+0      	; 0x155f4 <usr_console+0x338>
   155f4:	0f 92       	push	r0
   155f6:	ed b7       	in	r30, 0x3d	; 61
   155f8:	fe b7       	in	r31, 0x3e	; 62
   155fa:	01 83       	std	Z+1, r16	; 0x01
   155fc:	12 83       	std	Z+2, r17	; 0x02
   155fe:	8f e4       	ldi	r24, 0x4F	; 79
   15600:	96 e1       	ldi	r25, 0x16	; 22
   15602:	83 83       	std	Z+3, r24	; 0x03
   15604:	94 83       	std	Z+4, r25	; 0x04
   15606:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1560a:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1560c:	0f 90       	pop	r0
   1560e:	0f 90       	pop	r0
   15610:	0f 90       	pop	r0
   15612:	0f 90       	pop	r0
   15614:	c6 01       	movw	r24, r12
   15616:	b8 01       	movw	r22, r16
   15618:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   1561c:	00 d0       	rcall	.+0      	; 0x1561e <usr_console+0x362>
   1561e:	0f 92       	push	r0
   15620:	ed b7       	in	r30, 0x3d	; 61
   15622:	fe b7       	in	r31, 0x3e	; 62
   15624:	01 83       	std	Z+1, r16	; 0x01
   15626:	12 83       	std	Z+2, r17	; 0x02
   15628:	8c e9       	ldi	r24, 0x9C	; 156
   1562a:	96 e1       	ldi	r25, 0x16	; 22
   1562c:	83 83       	std	Z+3, r24	; 0x03
   1562e:	94 83       	std	Z+4, r25	; 0x04
   15630:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15634:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15636:	0f 90       	pop	r0
   15638:	0f 90       	pop	r0
   1563a:	0f 90       	pop	r0
   1563c:	0f 90       	pop	r0
   1563e:	c6 01       	movw	r24, r12
   15640:	b8 01       	movw	r22, r16
   15642:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
              pc_buff,
              s_size);

   s_size = sprintf_P( (char *)pc_buff, PSTR("Select number of trials (0<->10000), press enter-> "));
   15646:	00 d0       	rcall	.+0      	; 0x15648 <usr_console+0x38c>
   15648:	0f 92       	push	r0
   1564a:	ed b7       	in	r30, 0x3d	; 61
   1564c:	fe b7       	in	r31, 0x3e	; 62
   1564e:	01 83       	std	Z+1, r16	; 0x01
   15650:	12 83       	std	Z+2, r17	; 0x02
   15652:	89 ee       	ldi	r24, 0xE9	; 233
   15654:	96 e1       	ldi	r25, 0x16	; 22
   15656:	83 83       	std	Z+3, r24	; 0x03
   15658:	94 83       	std	Z+4, r25	; 0x04
   1565a:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1565e:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15660:	0f 90       	pop	r0
   15662:	0f 90       	pop	r0
   15664:	0f 90       	pop	r0
   15666:	0f 90       	pop	r0
   15668:	c6 01       	movw	r24, r12
   1566a:	b8 01       	movw	r22, r16
   1566c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
                            ac_buff,
   15670:	a5 e0       	ldi	r26, 0x05	; 5
   15672:	ea 2e       	mov	r14, r26
   15674:	f1 2c       	mov	r15, r1
   15676:	ec 0e       	add	r14, r28
   15678:	fd 1e       	adc	r15, r29
   /*------------------------------------------------------------------------*
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
   1567a:	c6 01       	movw	r24, r12
   1567c:	b7 01       	movw	r22, r14
   1567e:	40 e2       	ldi	r20, 0x20	; 32
   15680:	50 e0       	ldi	r21, 0x00	; 0
   15682:	0e 94 ee 83 	call	0x107dc	; 0x107dc <arb_read>
                            ac_buff,
                            (uint16_t)sizeof( ac_buff));

   s_numOfTrials = (int16_t)atoi( (char *)ac_buff);
   15686:	c7 01       	movw	r24, r14
   15688:	0e 94 c8 b5 	call	0x16b90	; 0x16b90 <atoi>
   if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))
   1568c:	4c 01       	movw	r8, r24
   1568e:	01 97       	sbiw	r24, 0x01	; 1
   15690:	f7 e2       	ldi	r31, 0x27	; 39
   15692:	80 31       	cpi	r24, 0x10	; 16
   15694:	9f 07       	cpc	r25, r31
   15696:	98 f0       	brcs	.+38     	; 0x156be <usr_console+0x402>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid CMD\n\r"));
   15698:	00 d0       	rcall	.+0      	; 0x1569a <usr_console+0x3de>
   1569a:	0f 92       	push	r0
   1569c:	ed b7       	in	r30, 0x3d	; 61
   1569e:	fe b7       	in	r31, 0x3e	; 62
   156a0:	01 83       	std	Z+1, r16	; 0x01
   156a2:	12 83       	std	Z+2, r17	; 0x02
   156a4:	8d e1       	ldi	r24, 0x1D	; 29
   156a6:	97 e1       	ldi	r25, 0x17	; 23
   156a8:	83 83       	std	Z+3, r24	; 0x03
   156aa:	94 83       	std	Z+4, r25	; 0x04
   156ac:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   156b0:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   156b2:	0f 90       	pop	r0
   156b4:	0f 90       	pop	r0
   156b6:	0f 90       	pop	r0
   156b8:	0f 90       	pop	r0
   156ba:	c6 01       	movw	r24, r12
   156bc:	5e c0       	rjmp	.+188    	; 0x1577a <usr_console+0x4be>
   }/*End if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))*/
   else
   {
      int8_t s_count = 0;

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
   156be:	82 e0       	ldi	r24, 0x02	; 2
   156c0:	8d 83       	std	Y+5, r24	; 0x05
      ac_buff[1] = 1; /*Start timer*/
   156c2:	be 82       	std	Y+6, r11	; 0x06
   156c4:	cc 24       	eor	r12, r12
   156c6:	dd 24       	eor	r13, r13
          * Send the message to the platformTest interface where it will
          * be looped between two peripherals and returned to this calling
          * thread with a subsequent mailbox message.
          *------------------------------------------------------------------*/
         s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
                                          ac_buff,
   156c8:	be 2c       	mov	r11, r14
   156ca:	ef 2c       	mov	r14, r15
                                            (uint16_t)sizeof( ac_buff));

            if( s_numRxBytes > 0)
            {

               s_size = sprintf_P( (char *)pc_buff, PSTR("Timer interrupt...\n\r"));
   156cc:	fb e2       	ldi	r31, 0x2B	; 43
   156ce:	6f 2e       	mov	r6, r31
   156d0:	f7 e1       	ldi	r31, 0x17	; 23
   156d2:	7f 2e       	mov	r7, r31
         /*------------------------------------------------------------------*
          * Send the message to the platformTest interface where it will
          * be looped between two peripherals and returned to this calling
          * thread with a subsequent mailbox message.
          *------------------------------------------------------------------*/
         s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   156d4:	8b 81       	ldd	r24, Y+3	; 0x03
   156d6:	9c 81       	ldd	r25, Y+4	; 0x04
   156d8:	6b 2d       	mov	r22, r11
   156da:	7e 2d       	mov	r23, r14
   156dc:	42 e0       	ldi	r20, 0x02	; 2
   156de:	50 e0       	ldi	r21, 0x00	; 0
   156e0:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                          2);

         /*---------------------------------------------------------------*
          * Was the message successfully sent?
          *---------------------------------------------------------------*/
         if( s_numTxBytes > 0) /*Yes*/
   156e4:	18 16       	cp	r1, r24
   156e6:	19 06       	cpc	r1, r25
   156e8:	fc f4       	brge	.+62     	; 0x15728 <usr_console+0x46c>
         {

            /*------------------------------------------------------------*
             * Send the message to the platform test thread
             *------------------------------------------------------------*/
            s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
   156ea:	89 81       	ldd	r24, Y+1	; 0x01
   156ec:	9a 81       	ldd	r25, Y+2	; 0x02
   156ee:	6b 2d       	mov	r22, r11
   156f0:	7e 2d       	mov	r23, r14
   156f2:	40 e2       	ldi	r20, 0x20	; 32
   156f4:	50 e0       	ldi	r21, 0x00	; 0
   156f6:	0e 94 15 87 	call	0x10e2a	; 0x10e2a <arb_mailboxRead>
                                            ac_buff,
                                            (uint16_t)sizeof( ac_buff));

            if( s_numRxBytes > 0)
   156fa:	18 16       	cp	r1, r24
   156fc:	19 06       	cpc	r1, r25
   156fe:	a4 f4       	brge	.+40     	; 0x15728 <usr_console+0x46c>
            {

               s_size = sprintf_P( (char *)pc_buff, PSTR("Timer interrupt...\n\r"));
   15700:	00 d0       	rcall	.+0      	; 0x15702 <usr_console+0x446>
   15702:	0f 92       	push	r0
   15704:	ed b7       	in	r30, 0x3d	; 61
   15706:	fe b7       	in	r31, 0x3e	; 62
   15708:	01 83       	std	Z+1, r16	; 0x01
   1570a:	12 83       	std	Z+2, r17	; 0x02
   1570c:	63 82       	std	Z+3, r6	; 0x03
   1570e:	74 82       	std	Z+4, r7	; 0x04
   15710:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   15714:	ac 01       	movw	r20, r24
               arb_write( t_consoleHndl,
   15716:	0f 90       	pop	r0
   15718:	0f 90       	pop	r0
   1571a:	0f 90       	pop	r0
   1571c:	0f 90       	pop	r0
   1571e:	8a 2d       	mov	r24, r10
   15720:	95 2d       	mov	r25, r5
   15722:	b8 01       	movw	r22, r16
   15724:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>

         }/*End if( s_numTxBytes > 0)*/

         s_count++;

         arb_sleep(1);
   15728:	81 e0       	ldi	r24, 0x01	; 1
   1572a:	90 e0       	ldi	r25, 0x00	; 0
   1572c:	0e 94 30 a0 	call	0x14060	; 0x14060 <arb_sleep>
   15730:	08 94       	sec
   15732:	c1 1c       	adc	r12, r1
   15734:	d1 1c       	adc	r13, r1
      int8_t s_count = 0;

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
      ac_buff[1] = 1; /*Start timer*/

      while( s_count < s_numOfTrials)
   15736:	c8 14       	cp	r12, r8
   15738:	d9 04       	cpc	r13, r9
   1573a:	61 f6       	brne	.-104    	; 0x156d4 <usr_console+0x418>

         arb_sleep(1);

      }/*End while( s_count < s_numOfTrials)*/

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
   1573c:	82 e0       	ldi	r24, 0x02	; 2
   1573e:	8d 83       	std	Y+5, r24	; 0x05
      ac_buff[1] = 0; /*Stop timer*/
   15740:	1e 82       	std	Y+6, r1	; 0x06

      s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   15742:	8b 81       	ldd	r24, Y+3	; 0x03
   15744:	9c 81       	ldd	r25, Y+4	; 0x04
   15746:	be 01       	movw	r22, r28
   15748:	6b 5f       	subi	r22, 0xFB	; 251
   1574a:	7f 4f       	sbci	r23, 0xFF	; 255
   1574c:	42 e0       	ldi	r20, 0x02	; 2
   1574e:	50 e0       	ldi	r21, 0x00	; 0
   15750:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                       ac_buff,
                                       2);

      s_size = sprintf_P( (char *)pc_buff, PSTR("Test finished.\n\r"));
   15754:	00 d0       	rcall	.+0      	; 0x15756 <usr_console+0x49a>
   15756:	0f 92       	push	r0
   15758:	ed b7       	in	r30, 0x3d	; 61
   1575a:	fe b7       	in	r31, 0x3e	; 62
   1575c:	01 83       	std	Z+1, r16	; 0x01
   1575e:	12 83       	std	Z+2, r17	; 0x02
   15760:	80 e4       	ldi	r24, 0x40	; 64
   15762:	97 e1       	ldi	r25, 0x17	; 23
   15764:	83 83       	std	Z+3, r24	; 0x03
   15766:	94 83       	std	Z+4, r25	; 0x04
   15768:	0e 94 cd b7 	call	0x16f9a	; 0x16f9a <sprintf_P>
   1576c:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   1576e:	0f 90       	pop	r0
   15770:	0f 90       	pop	r0
   15772:	0f 90       	pop	r0
   15774:	0f 90       	pop	r0
   15776:	8a 2d       	mov	r24, r10
   15778:	95 2d       	mov	r25, r5
   1577a:	b8 01       	movw	r22, r16
   1577c:	0e 94 1d 84 	call	0x1083a	; 0x1083a <arb_write>
bool usr_console( t_DEVHANDLE t_consoleHndl,
                  int8_t *pc_buff,
                  t_consoleTokHndl *pt_tokHndl)
{

   bool b_success = true; /*A valid command was found...*/
   15780:	81 e0       	ldi	r24, 0x01	; 1
   15782:	01 c0       	rjmp	.+2      	; 0x15786 <usr_console+0x4ca>
   else /*Unrecognized message*/
   {
      /*---------------------------------------------------------------------*
       * Let 'arb_console' know the command wasn't found.
       *---------------------------------------------------------------------*/
      b_success = false;
   15784:	80 e0       	ldi	r24, 0x00	; 0
   /*------------------------------------------------------------------------*
    * Return control over the console to the kernel...
    *------------------------------------------------------------------------*/
   return b_success;

}/*End usr_console*/
   15786:	a6 96       	adiw	r28, 0x26	; 38
   15788:	cd bf       	out	0x3d, r28	; 61
   1578a:	de bf       	out	0x3e, r29	; 62
   1578c:	df 91       	pop	r29
   1578e:	cf 91       	pop	r28
   15790:	1f 91       	pop	r17
   15792:	0f 91       	pop	r16
   15794:	ff 90       	pop	r15
   15796:	ef 90       	pop	r14
   15798:	df 90       	pop	r13
   1579a:	cf 90       	pop	r12
   1579c:	bf 90       	pop	r11
   1579e:	af 90       	pop	r10
   157a0:	9f 90       	pop	r9
   157a2:	8f 90       	pop	r8
   157a4:	7f 90       	pop	r7
   157a6:	6f 90       	pop	r6
   157a8:	5f 90       	pop	r5
   157aa:	08 95       	ret

000157ac <usr_timerTestInterrupt>:
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   157ac:	80 91 e0 06 	lds	r24, 0x06E0
   157b0:	84 ff       	sbrs	r24, 4
   157b2:	04 c0       	rjmp	.+8      	; 0x157bc <usr_timerTestInterrupt+0x10>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   157b4:	80 e1       	ldi	r24, 0x10	; 16
   157b6:	e0 ee       	ldi	r30, 0xE0	; 224
   157b8:	f6 e0       	ldi	r31, 0x06	; 6
   157ba:	87 83       	std	Z+7, r24	; 0x07
   157bc:	08 95       	ret

000157be <usr_timerTestGpioInterrupt>:

}/*End usr_timerTestInterrupt*/

static void usr_timerTestGpioInterrupt( t_gpioPort t_port,
                                        uint8_t c_pin)
{
   157be:	cf 93       	push	r28
   157c0:	df 93       	push	r29
   157c2:	0f 92       	push	r0
   157c4:	cd b7       	in	r28, 0x3d	; 61
   157c6:	de b7       	in	r29, 0x3e	; 62
   uint8_t ac_temp[1];

   /*------------------------------------------------------------------------*
    * Send the message back to the console...
    *------------------------------------------------------------------------*/
   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   157c8:	80 91 8b 27 	lds	r24, 0x278B
   157cc:	90 91 8c 27 	lds	r25, 0x278C
   157d0:	be 01       	movw	r22, r28
   157d2:	6f 5f       	subi	r22, 0xFF	; 255
   157d4:	7f 4f       	sbci	r23, 0xFF	; 255
   157d6:	41 e0       	ldi	r20, 0x01	; 1
   157d8:	50 e0       	ldi	r21, 0x00	; 0
   157da:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                  (int8_t *)ac_temp,
                                  (uint16_t)sizeof( ac_temp));

}/*End usr_timerTestGpioInterrupt*/
   157de:	0f 90       	pop	r0
   157e0:	df 91       	pop	r29
   157e2:	cf 91       	pop	r28
   157e4:	08 95       	ret

000157e6 <spiMasterComplete>:

static void spiMasterComplete( int8_t *pc_rxData,
                               uint16_t s_length)
{
   157e6:	9c 01       	movw	r18, r24
   157e8:	ab 01       	movw	r20, r22
   int16_t s_numBytes;

   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   157ea:	80 91 8b 27 	lds	r24, 0x278B
   157ee:	90 91 8c 27 	lds	r25, 0x278C
   157f2:	b9 01       	movw	r22, r18
   157f4:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                  pc_rxData,
                                  (uint16_t)s_length);

}/*End spiMasterComplete*/
   157f8:	08 95       	ret

000157fa <uartRxComplete>:
   return c_return; /*If a read operation from the master return valid data*/

}/*End usr_twiSlaveTransFinished*/

static void uartRxComplete( uint16_t s_size)
{
   157fa:	cf 93       	push	r28
   157fc:	df 93       	push	r29
   157fe:	ac 01       	movw	r20, r24
   int16_t s_numBytes;

   /*------------------------------------------------------------------------*
    * Send the message back to the console...
    *------------------------------------------------------------------------*/
   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15800:	80 91 8b 27 	lds	r24, 0x278B
   15804:	90 91 8c 27 	lds	r25, 0x278C
   15808:	c0 eb       	ldi	r28, 0xB0	; 176
   1580a:	d7 e2       	ldi	r29, 0x27	; 39
   1580c:	be 01       	movw	r22, r28
   1580e:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                  gt_platTestObject.ac_rxData,
                                  s_size);

   memset( (void *)gt_platTestObject.ac_rxData, 0,
   15812:	88 e1       	ldi	r24, 0x18	; 24
   15814:	fe 01       	movw	r30, r28
   15816:	11 92       	st	Z+, r1
   15818:	8a 95       	dec	r24
   1581a:	e9 f7       	brne	.-6      	; 0x15816 <uartRxComplete+0x1c>
   sizeof( gt_platTestObject.ac_rxData));

}/*End uartRxComplete*/
   1581c:	df 91       	pop	r29
   1581e:	cf 91       	pop	r28
   15820:	08 95       	ret

00015822 <usr_platformTest2>:
                              t_arguments  t_args)
{

   while( RUN_FOREVER)
   {
      arb_sleep(20);
   15822:	84 e1       	ldi	r24, 0x14	; 20
   15824:	90 e0       	ldi	r25, 0x00	; 0
   15826:	0e 94 30 a0 	call	0x14060	; 0x14060 <arb_sleep>
   1582a:	fb cf       	rjmp	.-10     	; 0x15822 <usr_platformTest2>

0001582c <usr_platformTest>:
   {

      /*---------------------------------------------------------------------*
       * Block until a message is received from the console.
       *---------------------------------------------------------------------*/
      s_numBytes = arb_mailboxRead( gt_platTestObject.t_inMbxHndl,
   1582c:	80 91 89 27 	lds	r24, 0x2789
   15830:	90 91 8a 27 	lds	r25, 0x278A
   15834:	68 e9       	ldi	r22, 0x98	; 152
   15836:	77 e2       	ldi	r23, 0x27	; 39
   15838:	48 e1       	ldi	r20, 0x18	; 24
   1583a:	50 e0       	ldi	r21, 0x00	; 0
   1583c:	0e 94 15 87 	call	0x10e2a	; 0x10e2a <arb_mailboxRead>
   15840:	8c 01       	movw	r16, r24
                                    gt_platTestObject.ac_txData,
                                    (uint16_t)sizeof( gt_platTestObject.
                                    ac_txData));

      if( s_numBytes > 0)
   15842:	18 16       	cp	r1, r24
   15844:	19 06       	cpc	r1, r25
   15846:	0c f0       	brlt	.+2      	; 0x1584a <usr_platformTest+0x1e>
   15848:	58 c0       	rjmp	.+176    	; 0x158fa <usr_platformTest+0xce>
      {
         s_numMessages = arb_mailboxGetNumMessages( gt_platTestObject.
   1584a:	80 91 89 27 	lds	r24, 0x2789
   1584e:	90 91 8a 27 	lds	r25, 0x278A
   15852:	0e 94 a1 89 	call	0x11342	; 0x11342 <arb_mailboxGetNumMessages>
         t_inMbxHndl);

         switch( gt_platTestObject.ac_txData[0])
   15856:	80 91 98 27 	lds	r24, 0x2798
   1585a:	81 30       	cpi	r24, 0x01	; 1
   1585c:	01 f1       	breq	.+64     	; 0x1589e <usr_platformTest+0x72>
   1585e:	82 30       	cpi	r24, 0x02	; 2
   15860:	1c f4       	brge	.+6      	; 0x15868 <usr_platformTest+0x3c>
   15862:	88 23       	and	r24, r24
   15864:	39 f0       	breq	.+14     	; 0x15874 <usr_platformTest+0x48>
   15866:	49 c0       	rjmp	.+146    	; 0x158fa <usr_platformTest+0xce>
   15868:	82 30       	cpi	r24, 0x02	; 2
   1586a:	51 f1       	breq	.+84     	; 0x158c0 <usr_platformTest+0x94>
   1586c:	83 30       	cpi	r24, 0x03	; 3
   1586e:	09 f0       	breq	.+2      	; 0x15872 <usr_platformTest+0x46>
   15870:	44 c0       	rjmp	.+136    	; 0x158fa <usr_platformTest+0xce>
   15872:	38 c0       	rjmp	.+112    	; 0x158e4 <usr_platformTest+0xb8>
               /*------------------------------------------------------------*
                * Store the number of bytes received so we know how much
                * the DMA transfered when the message is sent back to the
                * console via the mailbox.
                *------------------------------------------------------------*/
               gt_platTestObject.c_numBytesTrans = s_numBytes;
   15874:	00 93 97 27 	sts	0x2797, r16

               hal_uartReadBlock( gt_platTestObject.t_uHandle,
   15878:	80 91 87 27 	lds	r24, 0x2787
   1587c:	90 91 88 27 	lds	r25, 0x2788
   15880:	60 eb       	ldi	r22, 0xB0	; 176
   15882:	77 e2       	ldi	r23, 0x27	; 39
   15884:	a8 01       	movw	r20, r16
   15886:	0e 94 f1 56 	call	0xade2	; 0xade2 <hal_uartReadBlock>
                                  gt_platTestObject.ac_rxData,
                                  s_numBytes);

               hal_uartWriteBlock( gt_platTestObject.t_uHandle,
   1588a:	80 91 87 27 	lds	r24, 0x2787
   1588e:	90 91 88 27 	lds	r25, 0x2788
   15892:	68 e9       	ldi	r22, 0x98	; 152
   15894:	77 e2       	ldi	r23, 0x27	; 39
   15896:	a8 01       	movw	r20, r16
   15898:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <hal_uartWriteBlock>
                                   gt_platTestObject.ac_txData,
                                   s_numBytes);

            break; /*End case PLAT_UART_TEST:*/
   1589c:	2e c0       	rjmp	.+92     	; 0x158fa <usr_platformTest+0xce>
            case PLAT_TWI_TEST:

               /*------------------------------------------------------------*
                * Write the message from the master TWI to the slave TWI.
                *------------------------------------------------------------*/
               t_tErr = hal_twiMasterWrite( gt_platTestObject.t_twiMaster,
   1589e:	80 91 8f 27 	lds	r24, 0x278F
   158a2:	90 91 90 27 	lds	r25, 0x2790
   158a6:	68 e9       	ldi	r22, 0x98	; 152
   158a8:	77 e2       	ldi	r23, 0x27	; 39
   158aa:	a8 01       	movw	r20, r16
   158ac:	2f e7       	ldi	r18, 0x7F	; 127
   158ae:	00 e0       	ldi	r16, 0x00	; 0
   158b0:	0e 94 69 50 	call	0xa0d2	; 0xa0d2 <hal_twiMasterWrite>
                                            ac_txData,
                                            s_numBytes,
                                            TWI_SLAVE_ADDRESS,
                                            0);

               if( t_tErr < 0)
   158b4:	87 ff       	sbrs	r24, 7
   158b6:	21 c0       	rjmp	.+66     	; 0x158fa <usr_platformTest+0xce>
                  exit(0);
   158b8:	80 e0       	ldi	r24, 0x00	; 0
   158ba:	90 e0       	ldi	r25, 0x00	; 0
   158bc:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>

            break;/*End case PLAT_TWI_TEST:*/

            case PLAT_TIMER_GPIO_TEST:

               if( gt_platTestObject.ac_txData[1] == 1)
   158c0:	80 91 99 27 	lds	r24, 0x2799
   158c4:	81 30       	cpi	r24, 0x01	; 1
   158c6:	39 f4       	brne	.+14     	; 0x158d6 <usr_platformTest+0xaa>
                  hal_startTimer( gt_platTestObject.t_tHandle);
   158c8:	80 91 91 27 	lds	r24, 0x2791
   158cc:	90 91 92 27 	lds	r25, 0x2792
   158d0:	0e 94 71 4a 	call	0x94e2	; 0x94e2 <hal_startTimer>
   158d4:	12 c0       	rjmp	.+36     	; 0x158fa <usr_platformTest+0xce>
               else
                  hal_stopTimer( gt_platTestObject.t_tHandle);
   158d6:	80 91 91 27 	lds	r24, 0x2791
   158da:	90 91 92 27 	lds	r25, 0x2792
   158de:	0e 94 b4 4a 	call	0x9568	; 0x9568 <hal_stopTimer>
   158e2:	0b c0       	rjmp	.+22     	; 0x158fa <usr_platformTest+0xce>

            break;/*End case PLAT_TIMER_GPIO_TEST:*/

            case PLAT_SPI_TEST:

               t_sErr = hal_spiReadWrite( gt_platTestObject.t_spiMaster,
   158e4:	80 91 95 27 	lds	r24, 0x2795
   158e8:	90 91 96 27 	lds	r25, 0x2796
   158ec:	60 e0       	ldi	r22, 0x00	; 0
   158ee:	48 e9       	ldi	r20, 0x98	; 152
   158f0:	57 e2       	ldi	r21, 0x27	; 39
   158f2:	20 eb       	ldi	r18, 0xB0	; 176
   158f4:	37 e2       	ldi	r19, 0x27	; 39
   158f6:	0e 94 30 3a 	call	0x7460	; 0x7460 <hal_spiReadWrite>

         }/*End switch( gt_platTestObject.ac_txData[0])*/

      }/*End if( s_numBytes > 0)*/

      arb_sleep(10);
   158fa:	8a e0       	ldi	r24, 0x0A	; 10
   158fc:	90 e0       	ldi	r25, 0x00	; 0
   158fe:	0e 94 30 a0 	call	0x14060	; 0x14060 <arb_sleep>

   }/*End while( RUN_FOREVER)*/
   15902:	94 cf       	rjmp	.-216    	; 0x1582c <usr_platformTest>

00015904 <usr_twiSlaveTransFinished>:

}/*End usr_platformTest*/

static int8_t usr_twiSlaveTransFinished( t_twiStatus t_status,
                                         int8_t c_data)
{
   15904:	cf 93       	push	r28
   15906:	df 93       	push	r29
   int8_t c_return = 0;
   static int8_t c_rxDataPtr = 0;
   int16_t s_numBytes;

   switch( t_status)
   15908:	84 30       	cpi	r24, 0x04	; 4
   1590a:	19 f0       	breq	.+6      	; 0x15912 <usr_twiSlaveTransFinished+0xe>
   1590c:	87 30       	cpi	r24, 0x07	; 7
   1590e:	39 f5       	brne	.+78     	; 0x1595e <usr_twiSlaveTransFinished+0x5a>
   15910:	16 c0       	rjmp	.+44     	; 0x1593e <usr_twiSlaveTransFinished+0x3a>
      case TWI_TRANS_COMPLETE:

         /*------------------------------------------------------------------*
          * Send the message back to the console...
          *------------------------------------------------------------------*/
         s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15912:	80 91 8b 27 	lds	r24, 0x278B
   15916:	90 91 8c 27 	lds	r25, 0x278C
   1591a:	c0 eb       	ldi	r28, 0xB0	; 176
   1591c:	d7 e2       	ldi	r29, 0x27	; 39
   1591e:	40 91 78 27 	lds	r20, 0x2778
   15922:	55 27       	eor	r21, r21
   15924:	47 fd       	sbrc	r20, 7
   15926:	50 95       	com	r21
   15928:	be 01       	movw	r22, r28
   1592a:	0e 94 e5 87 	call	0x10fca	; 0x10fca <arb_mailboxWrite>
                                        gt_platTestObject.ac_rxData,
                                        (uint16_t)c_rxDataPtr);

         c_rxDataPtr = 0;
   1592e:	10 92 78 27 	sts	0x2778, r1
         memset( (void *)gt_platTestObject.ac_rxData, 0,
   15932:	88 e1       	ldi	r24, 0x18	; 24
   15934:	fe 01       	movw	r30, r28
   15936:	11 92       	st	Z+, r1
   15938:	8a 95       	dec	r24
   1593a:	e9 f7       	brne	.-6      	; 0x15936 <usr_twiSlaveTransFinished+0x32>
   1593c:	10 c0       	rjmp	.+32     	; 0x1595e <usr_twiSlaveTransFinished+0x5a>

      break;/*End TWI_SLAVE_READ*/

      case TWI_SLAVE_WRITE: /*Store byte sent from master*/

         gt_platTestObject.ac_rxData[c_rxDataPtr] = c_data;
   1593e:	80 91 78 27 	lds	r24, 0x2778
   15942:	e8 2f       	mov	r30, r24
   15944:	ff 27       	eor	r31, r31
   15946:	e7 fd       	sbrc	r30, 7
   15948:	f0 95       	com	r31
   1594a:	ed 57       	subi	r30, 0x7D	; 125
   1594c:	f8 4d       	sbci	r31, 0xD8	; 216
   1594e:	65 a7       	lds	r22, 0x75
         c_rxDataPtr++;
   15950:	8f 5f       	subi	r24, 0xFF	; 255
   15952:	80 93 78 27 	sts	0x2778, r24
         if( c_rxDataPtr == MAX_BUFFER_SIZE)
   15956:	88 31       	cpi	r24, 0x18	; 24
   15958:	11 f4       	brne	.+4      	; 0x1595e <usr_twiSlaveTransFinished+0x5a>
            c_rxDataPtr = 0;
   1595a:	10 92 78 27 	sts	0x2778, r1

   }/*End switch( t_status)*/

   return c_return; /*If a read operation from the master return valid data*/

}/*End usr_twiSlaveTransFinished*/
   1595e:	80 e0       	ldi	r24, 0x00	; 0
   15960:	df 91       	pop	r29
   15962:	cf 91       	pop	r28
   15964:	08 95       	ret

00015966 <usr_getPlatTestInMailbox>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_MAILBOXHNDL usr_getPlatTestInMailbox( void)
{
   return gt_platTestObject.t_inMbxHndl;
   15966:	80 91 89 27 	lds	r24, 0x2789
   1596a:	90 91 8a 27 	lds	r25, 0x278A
}/*End usr_getPlatTestInMailbox*/
   1596e:	08 95       	ret

00015970 <usr_getPlatTestOutMailbox>:

t_MAILBOXHNDL usr_getPlatTestOutMailbox( void)
{
   return gt_platTestObject.t_outMbxHndl;
   15970:	80 91 8b 27 	lds	r24, 0x278B
   15974:	90 91 8c 27 	lds	r25, 0x278C
}/*End usr_getPlatTestOutMailbox*/
   15978:	08 95       	ret

0001597a <usr_platformTestInit>:

void usr_platformTestInit( void)
{
   1597a:	9f 92       	push	r9
   1597c:	af 92       	push	r10
   1597e:	bf 92       	push	r11
   15980:	cf 92       	push	r12
   15982:	df 92       	push	r13
   15984:	ef 92       	push	r14
   15986:	ff 92       	push	r15
   15988:	0f 93       	push	r16
   1598a:	1f 93       	push	r17
   1598c:	cf 93       	push	r28
   1598e:	df 93       	push	r29
   15990:	cd b7       	in	r28, 0x3d	; 61
   15992:	de b7       	in	r29, 0x3e	; 62
   15994:	e1 97       	sbiw	r28, 0x31	; 49
   15996:	cd bf       	out	0x3d, r28	; 61
   15998:	de bf       	out	0x3e, r29	; 62
   t_mailboxConfig t_mConfig;

   /*------------------------------------------------------------------------*
    * Create a new thread that will provide an interface to the console.
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_platformTest = arb_threadCreate( usr_platformTest,
   1599a:	86 e1       	ldi	r24, 0x16	; 22
   1599c:	9c ea       	ldi	r25, 0xAC	; 172
   1599e:	61 e0       	ldi	r22, 0x01	; 1
   159a0:	70 e0       	ldi	r23, 0x00	; 0
   159a2:	40 e0       	ldi	r20, 0x00	; 0
   159a4:	50 e0       	ldi	r21, 0x00	; 0
   159a6:	20 e0       	ldi	r18, 0x00	; 0
   159a8:	32 e0       	ldi	r19, 0x02	; 2
   159aa:	02 e0       	ldi	r16, 0x02	; 2
   159ac:	0e 94 56 a0 	call	0x140ac	; 0x140ac <arb_threadCreate>
   159b0:	80 93 83 27 	sts	0x2783, r24
   159b4:	90 93 84 27 	sts	0x2784, r25
                                                        1,
                                                        0,
                                                        ARB_STACK_512B,
                                                        2);

   if( gt_platTestObject.t_platformTest < 0)
   159b8:	80 91 83 27 	lds	r24, 0x2783
   159bc:	90 91 84 27 	lds	r25, 0x2784
   159c0:	97 fd       	sbrc	r25, 7
   159c2:	52 c1       	rjmp	.+676    	; 0x15c68 <usr_platformTestInit+0x2ee>
   {
      exit(0);

   }/*End if( gt_platTestObject.t_platformTest < 0)*/

gt_platTestObject.t_platformTest2 = arb_threadCreate( usr_platformTest2,
   159c4:	81 e1       	ldi	r24, 0x11	; 17
   159c6:	9c ea       	ldi	r25, 0xAC	; 172
   159c8:	61 e0       	ldi	r22, 0x01	; 1
   159ca:	70 e0       	ldi	r23, 0x00	; 0
   159cc:	40 e0       	ldi	r20, 0x00	; 0
   159ce:	50 e0       	ldi	r21, 0x00	; 0
   159d0:	20 e0       	ldi	r18, 0x00	; 0
   159d2:	31 e0       	ldi	r19, 0x01	; 1
   159d4:	01 e0       	ldi	r16, 0x01	; 1
   159d6:	0e 94 56 a0 	call	0x140ac	; 0x140ac <arb_threadCreate>
   159da:	80 93 85 27 	sts	0x2785, r24
   159de:	90 93 86 27 	sts	0x2786, r25
                                                      1,
                                                      0,
                                                      ARB_STACK_256B,
                                                      1);

if( gt_platTestObject.t_platformTest2 < 0)
   159e2:	80 91 85 27 	lds	r24, 0x2785
   159e6:	90 91 86 27 	lds	r25, 0x2786
   159ea:	97 fd       	sbrc	r25, 7
   159ec:	3d c1       	rjmp	.+634    	; 0x15c68 <usr_platformTestInit+0x2ee>
}/*End if( gt_platTestObject.t_platformTest2 < 0)*/

   /*------------------------------------------------------------------------*
    * Create a mailbox for receiving messages from the console.
    *------------------------------------------------------------------------*/
   t_mConfig.s_queueSize  = sizeof( gt_platTestObject.ac_txData);
   159ee:	88 e1       	ldi	r24, 0x18	; 24
   159f0:	90 e0       	ldi	r25, 0x00	; 0
   159f2:	28 2f       	mov	r18, r24
   159f4:	8c 8f       	std	Y+28, r24	; 0x1c
   159f6:	9d 8f       	std	Y+29, r25	; 0x1d
   t_mConfig.s_queueDepth = 2;
   159f8:	82 e0       	ldi	r24, 0x02	; 2
   159fa:	90 e0       	ldi	r25, 0x00	; 0
   159fc:	48 2f       	mov	r20, r24
   159fe:	8e 8f       	std	Y+30, r24	; 0x1e
   15a00:	9f 8f       	std	Y+31, r25	; 0x1f
   t_mConfig.t_writeMode  = BLOCKING;    /*Threads writing block*/
   15a02:	18 a2       	lds	r17, 0x98
   t_mConfig.t_readMode   = NONBLOCKING; /*Threads reading poll*/
   15a04:	99 24       	eor	r9, r9
   15a06:	93 94       	inc	r9
   15a08:	99 a2       	lds	r25, 0x99
   t_mConfig.b_wrtFromInt = false;
   15a0a:	1a a2       	lds	r17, 0x9a
   t_mConfig.b_multRdWr   = false;
   15a0c:	1b a2       	lds	r17, 0x9b

   gt_platTestObject.t_inMbxHndl = arb_mailboxCreate( t_mConfig);
   15a0e:	3d 8d       	ldd	r19, Y+29	; 0x1d
   15a10:	5f 8d       	ldd	r21, Y+31	; 0x1f
   15a12:	60 e0       	ldi	r22, 0x00	; 0
   15a14:	71 e0       	ldi	r23, 0x01	; 1
   15a16:	80 e0       	ldi	r24, 0x00	; 0
   15a18:	90 e0       	ldi	r25, 0x00	; 0
   15a1a:	0e 94 de 88 	call	0x111bc	; 0x111bc <arb_mailboxCreate>
   15a1e:	80 93 89 27 	sts	0x2789, r24
   15a22:	90 93 8a 27 	sts	0x278A, r25

   if( gt_platTestObject.t_inMbxHndl < 0)
   15a26:	80 91 89 27 	lds	r24, 0x2789
   15a2a:	90 91 8a 27 	lds	r25, 0x278A
   15a2e:	97 fd       	sbrc	r25, 7
   15a30:	1b c1       	rjmp	.+566    	; 0x15c68 <usr_platformTestInit+0x2ee>
   /*------------------------------------------------------------------------*
    * Create a mailbox for sending messages to the console.
    *------------------------------------------------------------------------*/
   t_mConfig.s_queueSize  = sizeof( gt_platTestObject.ac_rxData);
   t_mConfig.s_queueDepth = 2;
   t_mConfig.t_writeMode  = NONBLOCKING; /*Threads writing poll*/
   15a32:	98 a2       	lds	r25, 0x98
   t_mConfig.t_readMode   = BLOCKING;    /*Threads reading block*/
   15a34:	19 a2       	lds	r17, 0x99
   t_mConfig.b_wrtFromInt = true;
   15a36:	9a a2       	lds	r25, 0x9a
   t_mConfig.b_multRdWr   = false;

   gt_platTestObject.t_outMbxHndl = arb_mailboxCreate( t_mConfig);
   15a38:	2c 8d       	ldd	r18, Y+28	; 0x1c
   15a3a:	3d 8d       	ldd	r19, Y+29	; 0x1d
   15a3c:	4e 8d       	ldd	r20, Y+30	; 0x1e
   15a3e:	5f 8d       	ldd	r21, Y+31	; 0x1f
   15a40:	61 e0       	ldi	r22, 0x01	; 1
   15a42:	70 e0       	ldi	r23, 0x00	; 0
   15a44:	81 e0       	ldi	r24, 0x01	; 1
   15a46:	9b a1       	lds	r25, 0x4b
   15a48:	0e 94 de 88 	call	0x111bc	; 0x111bc <arb_mailboxCreate>
   15a4c:	80 93 8b 27 	sts	0x278B, r24
   15a50:	90 93 8c 27 	sts	0x278C, r25

   if( gt_platTestObject.t_outMbxHndl < 0)
   15a54:	80 91 8b 27 	lds	r24, 0x278B
   15a58:	90 91 8c 27 	lds	r25, 0x278C
   15a5c:	97 fd       	sbrc	r25, 7
   15a5e:	04 c1       	rjmp	.+520    	; 0x15c68 <usr_platformTestInit+0x2ee>
   t_uartConfig t_uConf;

   /*------------------------------------------------------------------------*
    * Request access to UART 6
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_uHandle = hal_requestUartChannel( UART_6); /*UART E1*/
   15a60:	8f e0       	ldi	r24, 0x0F	; 15
   15a62:	0e 94 90 58 	call	0xb120	; 0xb120 <hal_requestUartChannel>
   15a66:	80 93 87 27 	sts	0x2787, r24
   15a6a:	90 93 88 27 	sts	0x2788, r25
   if( gt_platTestObject.t_uHandle < 0)
   15a6e:	80 91 87 27 	lds	r24, 0x2787
   15a72:	90 91 88 27 	lds	r25, 0x2788
   15a76:	97 fd       	sbrc	r25, 7
   15a78:	f7 c0       	rjmp	.+494    	; 0x15c68 <usr_platformTestInit+0x2ee>
      exit(0);

   t_uConf.t_comMd       = ASYNC;
   15a7a:	1c a2       	lds	r17, 0x9c
   t_uConf.t_charSz      = CHAR_8BIT;
   15a7c:	83 e0       	ldi	r24, 0x03	; 3
   15a7e:	8d a3       	lds	r24, 0x5d
   t_uConf.t_parityMd    = NO_PARITY;
   15a80:	1e a2       	lds	r17, 0x9e
   t_uConf.t_stopBitMd   = ONE_STOP_BIT;
   15a82:	1f a2       	lds	r17, 0x9f
   t_uConf.i_baudRate    = 112500;
   15a84:	84 e7       	ldi	r24, 0x74	; 116
   15a86:	97 eb       	ldi	r25, 0xB7	; 183
   15a88:	a1 e0       	ldi	r26, 0x01	; 1
   15a8a:	b0 e0       	ldi	r27, 0x00	; 0
   15a8c:	88 a7       	lds	r24, 0x78
   15a8e:	99 a7       	lds	r25, 0x79
   15a90:	aa a7       	lds	r26, 0x7a
   15a92:	bb a7       	lds	r27, 0x7b
   t_uConf.b_enRxDma     = false;
   15a94:	1d a6       	lds	r17, 0xbd
   t_uConf.b_enTxDma     = false;
   15a96:	1c a6       	lds	r17, 0xbc
   t_uConf.pf_rxCallBack = &uartRxComplete;
   15a98:	8d ef       	ldi	r24, 0xFD	; 253
   15a9a:	9b ea       	ldi	r25, 0xAB	; 171
   15a9c:	8e a7       	lds	r24, 0x7e
   15a9e:	9f a7       	lds	r25, 0x7f
   t_uConf.pf_txCallBack = NULL;
   15aa0:	18 aa       	sts	0x98, r17
   15aa2:	19 aa       	sts	0x99, r17

   /*------------------------------------------------------------------------*
    * Configure UART 6
    *------------------------------------------------------------------------*/
   t_err = hal_configureUartChannel( gt_platTestObject.t_uHandle,
   15aa4:	80 91 87 27 	lds	r24, 0x2787
   15aa8:	90 91 88 27 	lds	r25, 0x2788
   15aac:	aa 24       	eor	r10, r10
   15aae:	23 e0       	ldi	r18, 0x03	; 3
   15ab0:	b2 2e       	mov	r11, r18
   15ab2:	cc 24       	eor	r12, r12
   15ab4:	dd 24       	eor	r13, r13
   15ab6:	e8 a4       	lds	r30, 0xa8
   15ab8:	f9 a4       	lds	r31, 0xa9
   15aba:	0a a5       	lds	r16, 0x6a
   15abc:	1b a5       	lds	r17, 0x6b
   15abe:	20 e0       	ldi	r18, 0x00	; 0
   15ac0:	30 e0       	ldi	r19, 0x00	; 0
   15ac2:	4e a5       	lds	r20, 0x6e
   15ac4:	5f a5       	lds	r21, 0x6f
   15ac6:	68 a9       	sts	0x48, r22
   15ac8:	79 a9       	sts	0x49, r23
   15aca:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <hal_configureUartChannel>
                                     t_uConf);

   if( t_err < 0)
   15ace:	87 fd       	sbrc	r24, 7
   15ad0:	cb c0       	rjmp	.+406    	; 0x15c68 <usr_platformTestInit+0x2ee>
   t_twiError t_err;

   /*------------------------------------------------------------------------*
    * Request access to TWI channel 2...
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_twiMaster = hal_requestTwiChannel( TWI_2);
   15ad2:	81 e0       	ldi	r24, 0x01	; 1
   15ad4:	0e 94 f3 4e 	call	0x9de6	; 0x9de6 <hal_requestTwiChannel>
   15ad8:	80 93 8f 27 	sts	0x278F, r24
   15adc:	90 93 90 27 	sts	0x2790, r25

   if( gt_platTestObject.t_twiMaster < 0)
   15ae0:	80 91 8f 27 	lds	r24, 0x278F
   15ae4:	90 91 90 27 	lds	r25, 0x2790
   15ae8:	97 fd       	sbrc	r25, 7
   15aea:	be c0       	rjmp	.+380    	; 0x15c68 <usr_platformTestInit+0x2ee>
      exit(0);

   /*------------------------------------------------------------------------*
    * Configure TWI channel 2 as master...
    *------------------------------------------------------------------------*/
   t_tConfig.t_mode         = TWI_MASTER;
   15aec:	1c 86       	std	Y+12, r1	; 0x0c
   t_tConfig.i_baud         = 400000;
   15aee:	80 e8       	ldi	r24, 0x80	; 128
   15af0:	9a e1       	ldi	r25, 0x1A	; 26
   15af2:	a6 e0       	ldi	r26, 0x06	; 6
   15af4:	b0 e0       	ldi	r27, 0x00	; 0
   15af6:	8d 87       	std	Y+13, r24	; 0x0d
   15af8:	9e 87       	std	Y+14, r25	; 0x0e
   15afa:	af 87       	std	Y+15, r26	; 0x0f
   15afc:	b8 8b       	std	Y+16, r27	; 0x10

   t_err = hal_configureTwiChannel( gt_platTestObject.t_twiMaster,
   15afe:	80 91 8f 27 	lds	r24, 0x278F
   15b02:	90 91 90 27 	lds	r25, 0x2790
   15b06:	00 e0       	ldi	r16, 0x00	; 0
   15b08:	1d 85       	ldd	r17, Y+13	; 0x0d
   15b0a:	2e 85       	ldd	r18, Y+14	; 0x0e
   15b0c:	3f 85       	ldd	r19, Y+15	; 0x0f
   15b0e:	48 89       	ldd	r20, Y+16	; 0x10
   15b10:	59 89       	ldd	r21, Y+17	; 0x11
   15b12:	6a 89       	ldd	r22, Y+18	; 0x12
   15b14:	7b 89       	ldd	r23, Y+19	; 0x13
   15b16:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <hal_configureTwiChannel>
                                    t_tConfig);

   if( t_err < 0)
   15b1a:	87 fd       	sbrc	r24, 7
   15b1c:	a5 c0       	rjmp	.+330    	; 0x15c68 <usr_platformTestInit+0x2ee>
      exit(0);

   /*------------------------------------------------------------------------*
    * Request access to TWI channel 3...
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_twiSlave = hal_requestTwiChannel( TWI_3);
   15b1e:	82 e0       	ldi	r24, 0x02	; 2
   15b20:	0e 94 f3 4e 	call	0x9de6	; 0x9de6 <hal_requestTwiChannel>
   15b24:	80 93 8d 27 	sts	0x278D, r24
   15b28:	90 93 8e 27 	sts	0x278E, r25

   if( gt_platTestObject.t_twiSlave < 0)
   15b2c:	80 91 8d 27 	lds	r24, 0x278D
   15b30:	90 91 8e 27 	lds	r25, 0x278E
   15b34:	97 fd       	sbrc	r25, 7
   15b36:	98 c0       	rjmp	.+304    	; 0x15c68 <usr_platformTestInit+0x2ee>
      exit(0);

   t_tConfig.t_mode           = TWI_SLAVE;
   15b38:	9c 86       	std	Y+12, r9	; 0x0c
   t_tConfig.c_slaveAddress   = TWI_SLAVE_ADDRESS;
   15b3a:	8f e7       	ldi	r24, 0x7F	; 127
   15b3c:	89 8b       	std	Y+17, r24	; 0x11
   t_tConfig.pf_transComplete = &usr_twiSlaveTransFinished;
   15b3e:	82 e8       	ldi	r24, 0x82	; 130
   15b40:	9c ea       	ldi	r25, 0xAC	; 172
   15b42:	8a 8b       	std	Y+18, r24	; 0x12
   15b44:	9b 8b       	std	Y+19, r25	; 0x13

   /*------------------------------------------------------------------------*
    * Configure TWI channel 3 as slave
    *------------------------------------------------------------------------*/
   t_err = hal_configureTwiChannel( gt_platTestObject.t_twiSlave,
   15b46:	80 91 8d 27 	lds	r24, 0x278D
   15b4a:	90 91 8e 27 	lds	r25, 0x278E
   15b4e:	01 e0       	ldi	r16, 0x01	; 1
   15b50:	1d 85       	ldd	r17, Y+13	; 0x0d
   15b52:	2e 85       	ldd	r18, Y+14	; 0x0e
   15b54:	3f 85       	ldd	r19, Y+15	; 0x0f
   15b56:	48 89       	ldd	r20, Y+16	; 0x10
   15b58:	5f e7       	ldi	r21, 0x7F	; 127
   15b5a:	6a 89       	ldd	r22, Y+18	; 0x12
   15b5c:	7b 89       	ldd	r23, Y+19	; 0x13
   15b5e:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <hal_configureTwiChannel>
                                    t_tConfig);

   if( t_err < 0)
   15b62:	87 fd       	sbrc	r24, 7
   15b64:	81 c0       	rjmp	.+258    	; 0x15c68 <usr_platformTestInit+0x2ee>

   t_timerConfig t_config;
   t_intConf t_iConf;
   t_gpioConf t_gConf;

   gt_platTestObject.t_tHandle = hal_requestTimer( TIMER_1);
   15b66:	80 e0       	ldi	r24, 0x00	; 0
   15b68:	0e 94 93 48 	call	0x9126	; 0x9126 <hal_requestTimer>
   15b6c:	80 93 91 27 	sts	0x2791, r24
   15b70:	90 93 92 27 	sts	0x2792, r25

   if( gt_platTestObject.t_tHandle < 0)
   15b74:	80 91 91 27 	lds	r24, 0x2791
   15b78:	90 91 92 27 	lds	r25, 0x2792
   15b7c:	97 fd       	sbrc	r25, 7
   15b7e:	74 c0       	rjmp	.+232    	; 0x15c68 <usr_platformTestInit+0x2ee>
   {
      exit(0);
   }/*End if( gt_platTestObject.t_tHandle < 0)*/

   t_config.t_mode   = NORMAL;
   15b80:	1e 82       	std	Y+6, r1	; 0x06
   t_config.t_dir    = DIRECTION_UP;
   15b82:	1f 82       	std	Y+7, r1	; 0x07
   t_config.f_period = 1.0f;
   15b84:	80 e0       	ldi	r24, 0x00	; 0
   15b86:	90 e0       	ldi	r25, 0x00	; 0
   15b88:	a0 e8       	ldi	r26, 0x80	; 128
   15b8a:	bf e3       	ldi	r27, 0x3F	; 63
   15b8c:	88 87       	std	Y+8, r24	; 0x08
   15b8e:	99 87       	std	Y+9, r25	; 0x09
   15b90:	aa 87       	std	Y+10, r26	; 0x0a
   15b92:	bb 87       	std	Y+11, r27	; 0x0b

   if( hal_configureTimer( gt_platTestObject.t_tHandle, t_config) < 0)
   15b94:	80 91 91 27 	lds	r24, 0x2791
   15b98:	90 91 92 27 	lds	r25, 0x2792
   15b9c:	20 e0       	ldi	r18, 0x00	; 0
   15b9e:	30 e0       	ldi	r19, 0x00	; 0
   15ba0:	48 85       	ldd	r20, Y+8	; 0x08
   15ba2:	59 85       	ldd	r21, Y+9	; 0x09
   15ba4:	6a 85       	ldd	r22, Y+10	; 0x0a
   15ba6:	7b 85       	ldd	r23, Y+11	; 0x0b
   15ba8:	0e 94 40 49 	call	0x9280	; 0x9280 <hal_configureTimer>
   15bac:	87 fd       	sbrc	r24, 7
   15bae:	5c c0       	rjmp	.+184    	; 0x15c68 <usr_platformTestInit+0x2ee>
   {
      exit(0);
   }

   if( hal_requestTimerInterrupt( gt_platTestObject.t_tHandle,
   15bb0:	80 91 91 27 	lds	r24, 0x2791
   15bb4:	90 91 92 27 	lds	r25, 0x2792
   15bb8:	64 e0       	ldi	r22, 0x04	; 4
   15bba:	46 ed       	ldi	r20, 0xD6	; 214
   15bbc:	5b ea       	ldi	r21, 0xAB	; 171
   15bbe:	0e 94 bf 47 	call	0x8f7e	; 0x8f7e <hal_requestTimerInterrupt>
   15bc2:	87 fd       	sbrc	r24, 7
   15bc4:	51 c0       	rjmp	.+162    	; 0x15c68 <usr_platformTestInit+0x2ee>
   }

   /*---------------------------------------------------------------*
    * Configure the output pins the test will use.
    *---------------------------------------------------------------*/
   t_gConf.c_inputMask  = PIN_3;
   15bc6:	88 e0       	ldi	r24, 0x08	; 8
   15bc8:	89 83       	std	Y+1, r24	; 0x01
   t_gConf.c_outputMask = PIN_4;
   15bca:	80 e1       	ldi	r24, 0x10	; 16
   15bcc:	8a 83       	std	Y+2, r24	; 0x02
   t_gConf.t_inConf     = PULLDOWN;
   15bce:	84 e0       	ldi	r24, 0x04	; 4
   15bd0:	8c 83       	std	Y+4, r24	; 0x04
   t_gConf.t_outConf    = TOTEM;
   15bd2:	1d 82       	std	Y+5, r1	; 0x05

   if( hal_configureGpioPort( GPIO_PORTH,
   15bd4:	86 e0       	ldi	r24, 0x06	; 6
   15bd6:	28 e0       	ldi	r18, 0x08	; 8
   15bd8:	30 e1       	ldi	r19, 0x10	; 16
   15bda:	4b 81       	ldd	r20, Y+3	; 0x03
   15bdc:	54 e0       	ldi	r21, 0x04	; 4
   15bde:	60 e0       	ldi	r22, 0x00	; 0
   15be0:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <hal_configureGpioPort>
   15be4:	87 fd       	sbrc	r24, 7
   15be6:	40 c0       	rjmp	.+128    	; 0x15c68 <usr_platformTestInit+0x2ee>
                              t_gConf) < 0)
   {
      exit(0);
   }

   t_iConf.c_pin     = PIN_3;
   15be8:	48 e0       	ldi	r20, 0x08	; 8
   15bea:	50 e0       	ldi	r21, 0x00	; 0
   15bec:	60 e0       	ldi	r22, 0x00	; 0
   15bee:	70 e0       	ldi	r23, 0x00	; 0
   t_iConf.t_inSense = GPIO_BOTH_EDGES;
   15bf0:	50 e0       	ldi	r21, 0x00	; 0
   t_iConf.pf_funPtr = &usr_timerTestGpioInterrupt;
   15bf2:	6f ed       	ldi	r22, 0xDF	; 223
   15bf4:	7b ea       	ldi	r23, 0xAB	; 171

   gt_platTestObject.t_gHandle = hal_requestGpioInt( GPIO_PORTH,
   15bf6:	86 e0       	ldi	r24, 0x06	; 6
   15bf8:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <hal_requestGpioInt>
   15bfc:	80 93 93 27 	sts	0x2793, r24
   15c00:	90 93 94 27 	sts	0x2794, r25
                                                     t_iConf);

   if( gt_platTestObject.t_gHandle < 0)
   15c04:	80 91 93 27 	lds	r24, 0x2793
   15c08:	90 91 94 27 	lds	r25, 0x2794
   15c0c:	97 fd       	sbrc	r25, 7
   15c0e:	2c c0       	rjmp	.+88     	; 0x15c68 <usr_platformTestInit+0x2ee>

static void usr_spiLoopbackTestInit( void)
{
   t_spiConfig t_conf;

   t_conf.i_baudRate = 16000000;
   15c10:	80 e0       	ldi	r24, 0x00	; 0
   15c12:	94 e2       	ldi	r25, 0x24	; 36
   15c14:	a4 ef       	ldi	r26, 0xF4	; 244
   15c16:	b0 e0       	ldi	r27, 0x00	; 0
   15c18:	38 2f       	mov	r19, r24
   15c1a:	8f 8b       	std	Y+23, r24	; 0x17
   15c1c:	98 8f       	std	Y+24, r25	; 0x18
   15c1e:	a9 8f       	std	Y+25, r26	; 0x19
   15c20:	ba 8f       	std	Y+26, r27	; 0x1a
   t_conf.t_spiMd    = SPI_MODE_3;
   15c22:	83 e0       	ldi	r24, 0x03	; 3
   15c24:	8c 8b       	std	Y+20, r24	; 0x14
   t_conf.t_spiOp    = SPI_MASTER;
   15c26:	1d 8a       	std	Y+21, r1	; 0x15
   t_conf.t_spiOrder = SPI_MSB_FIRST;
   15c28:	81 e0       	ldi	r24, 0x01	; 1
   15c2a:	8e 8b       	std	Y+22, r24	; 0x16
   t_conf.b_enDma    = false;
   15c2c:	1b 8e       	std	Y+27, r1	; 0x1b

   if( hal_configureSpiChannel( SPI_4, t_conf) < 0)
   15c2e:	83 e0       	ldi	r24, 0x03	; 3
   15c30:	03 e0       	ldi	r16, 0x03	; 3
   15c32:	10 e0       	ldi	r17, 0x00	; 0
   15c34:	21 e0       	ldi	r18, 0x01	; 1
   15c36:	48 8d       	ldd	r20, Y+24	; 0x18
   15c38:	59 8d       	ldd	r21, Y+25	; 0x19
   15c3a:	6a 8d       	ldd	r22, Y+26	; 0x1a
   15c3c:	70 e0       	ldi	r23, 0x00	; 0
   15c3e:	0e 94 30 3d 	call	0x7a60	; 0x7a60 <hal_configureSpiChannel>
   15c42:	87 fd       	sbrc	r24, 7
   15c44:	11 c0       	rjmp	.+34     	; 0x15c68 <usr_platformTestInit+0x2ee>
      exit(0);

   gt_platTestObject.t_spiMaster = hal_requestSpiChannel( SPI_4,
   15c46:	83 e0       	ldi	r24, 0x03	; 3
   15c48:	63 ef       	ldi	r22, 0xF3	; 243
   15c4a:	7b ea       	ldi	r23, 0xAB	; 171
   15c4c:	45 e0       	ldi	r20, 0x05	; 5
   15c4e:	20 e1       	ldi	r18, 0x10	; 16
   15c50:	0e 94 bb 3b 	call	0x7776	; 0x7776 <hal_requestSpiChannel>
   15c54:	80 93 95 27 	sts	0x2795, r24
   15c58:	90 93 96 27 	sts	0x2796, r25
                                                          spiMasterComplete,
                                                          GPIO_PORTF,
                                                          PIN_4);
   if( gt_platTestObject.t_spiMaster < 0)
   15c5c:	80 91 95 27 	lds	r24, 0x2795
   15c60:	90 91 96 27 	lds	r25, 0x2796
   15c64:	97 ff       	sbrs	r25, 7
   15c66:	04 c0       	rjmp	.+8      	; 0x15c70 <usr_platformTestInit+0x2f6>
      exit(0);
   15c68:	80 e0       	ldi	r24, 0x00	; 0
   15c6a:	90 e0       	ldi	r25, 0x00	; 0
   15c6c:	0e 94 e6 b5 	call	0x16bcc	; 0x16bcc <exit>

   usr_timerTestInit();

   usr_spiLoopbackTestInit();

}/*End usr_platformTestInit*/
   15c70:	e1 96       	adiw	r28, 0x31	; 49
   15c72:	cd bf       	out	0x3d, r28	; 61
   15c74:	de bf       	out	0x3e, r29	; 62
   15c76:	df 91       	pop	r29
   15c78:	cf 91       	pop	r28
   15c7a:	1f 91       	pop	r17
   15c7c:	0f 91       	pop	r16
   15c7e:	ff 90       	pop	r15
   15c80:	ef 90       	pop	r14
   15c82:	df 90       	pop	r13
   15c84:	cf 90       	pop	r12
   15c86:	bf 90       	pop	r11
   15c88:	af 90       	pop	r10
   15c8a:	9f 90       	pop	r9
   15c8c:	08 95       	ret

00015c8e <__subsf3>:
   15c8e:	50 58       	subi	r21, 0x80	; 128

00015c90 <__addsf3>:
   15c90:	bb 27       	eor	r27, r27
   15c92:	aa 27       	eor	r26, r26
   15c94:	0e d0       	rcall	.+28     	; 0x15cb2 <__addsf3x>
   15c96:	fd c1       	rjmp	.+1018   	; 0x16092 <__fp_round>
   15c98:	ee d1       	rcall	.+988    	; 0x16076 <__fp_pscA>
   15c9a:	30 f0       	brcs	.+12     	; 0x15ca8 <__addsf3+0x18>
   15c9c:	f3 d1       	rcall	.+998    	; 0x16084 <__fp_pscB>
   15c9e:	20 f0       	brcs	.+8      	; 0x15ca8 <__addsf3+0x18>
   15ca0:	31 f4       	brne	.+12     	; 0x15cae <__addsf3+0x1e>
   15ca2:	9f 3f       	cpi	r25, 0xFF	; 255
   15ca4:	11 f4       	brne	.+4      	; 0x15caa <__addsf3+0x1a>
   15ca6:	1e f4       	brtc	.+6      	; 0x15cae <__addsf3+0x1e>
   15ca8:	d3 c1       	rjmp	.+934    	; 0x16050 <__fp_nan>
   15caa:	0e f4       	brtc	.+2      	; 0x15cae <__addsf3+0x1e>
   15cac:	e0 95       	com	r30
   15cae:	e7 fb       	bst	r30, 7
   15cb0:	c9 c1       	rjmp	.+914    	; 0x16044 <__fp_inf>

00015cb2 <__addsf3x>:
   15cb2:	e9 2f       	mov	r30, r25
   15cb4:	ff d1       	rcall	.+1022   	; 0x160b4 <__fp_split3>
   15cb6:	80 f3       	brcs	.-32     	; 0x15c98 <__addsf3+0x8>
   15cb8:	ba 17       	cp	r27, r26
   15cba:	62 07       	cpc	r22, r18
   15cbc:	73 07       	cpc	r23, r19
   15cbe:	84 07       	cpc	r24, r20
   15cc0:	95 07       	cpc	r25, r21
   15cc2:	18 f0       	brcs	.+6      	; 0x15cca <__addsf3x+0x18>
   15cc4:	71 f4       	brne	.+28     	; 0x15ce2 <__addsf3x+0x30>
   15cc6:	9e f5       	brtc	.+102    	; 0x15d2e <__addsf3x+0x7c>
   15cc8:	17 c2       	rjmp	.+1070   	; 0x160f8 <__fp_zero>
   15cca:	0e f4       	brtc	.+2      	; 0x15cce <__addsf3x+0x1c>
   15ccc:	e0 95       	com	r30
   15cce:	0b 2e       	mov	r0, r27
   15cd0:	ba 2f       	mov	r27, r26
   15cd2:	a0 2d       	mov	r26, r0
   15cd4:	0b 01       	movw	r0, r22
   15cd6:	b9 01       	movw	r22, r18
   15cd8:	90 01       	movw	r18, r0
   15cda:	0c 01       	movw	r0, r24
   15cdc:	ca 01       	movw	r24, r20
   15cde:	a0 01       	movw	r20, r0
   15ce0:	11 24       	eor	r1, r1
   15ce2:	ff 27       	eor	r31, r31
   15ce4:	59 1b       	sub	r21, r25
   15ce6:	99 f0       	breq	.+38     	; 0x15d0e <__addsf3x+0x5c>
   15ce8:	59 3f       	cpi	r21, 0xF9	; 249
   15cea:	50 f4       	brcc	.+20     	; 0x15d00 <__addsf3x+0x4e>
   15cec:	50 3e       	cpi	r21, 0xE0	; 224
   15cee:	68 f1       	brcs	.+90     	; 0x15d4a <__addsf3x+0x98>
   15cf0:	1a 16       	cp	r1, r26
   15cf2:	f0 40       	sbci	r31, 0x00	; 0
   15cf4:	a2 2f       	mov	r26, r18
   15cf6:	23 2f       	mov	r18, r19
   15cf8:	34 2f       	mov	r19, r20
   15cfa:	44 27       	eor	r20, r20
   15cfc:	58 5f       	subi	r21, 0xF8	; 248
   15cfe:	f3 cf       	rjmp	.-26     	; 0x15ce6 <__addsf3x+0x34>
   15d00:	46 95       	lsr	r20
   15d02:	37 95       	ror	r19
   15d04:	27 95       	ror	r18
   15d06:	a7 95       	ror	r26
   15d08:	f0 40       	sbci	r31, 0x00	; 0
   15d0a:	53 95       	inc	r21
   15d0c:	c9 f7       	brne	.-14     	; 0x15d00 <__addsf3x+0x4e>
   15d0e:	7e f4       	brtc	.+30     	; 0x15d2e <__addsf3x+0x7c>
   15d10:	1f 16       	cp	r1, r31
   15d12:	ba 0b       	sbc	r27, r26
   15d14:	62 0b       	sbc	r22, r18
   15d16:	73 0b       	sbc	r23, r19
   15d18:	84 0b       	sbc	r24, r20
   15d1a:	ba f0       	brmi	.+46     	; 0x15d4a <__addsf3x+0x98>
   15d1c:	91 50       	subi	r25, 0x01	; 1
   15d1e:	a1 f0       	breq	.+40     	; 0x15d48 <__addsf3x+0x96>
   15d20:	ff 0f       	add	r31, r31
   15d22:	bb 1f       	adc	r27, r27
   15d24:	66 1f       	adc	r22, r22
   15d26:	77 1f       	adc	r23, r23
   15d28:	88 1f       	adc	r24, r24
   15d2a:	c2 f7       	brpl	.-16     	; 0x15d1c <__addsf3x+0x6a>
   15d2c:	0e c0       	rjmp	.+28     	; 0x15d4a <__addsf3x+0x98>
   15d2e:	ba 0f       	add	r27, r26
   15d30:	62 1f       	adc	r22, r18
   15d32:	73 1f       	adc	r23, r19
   15d34:	84 1f       	adc	r24, r20
   15d36:	48 f4       	brcc	.+18     	; 0x15d4a <__addsf3x+0x98>
   15d38:	87 95       	ror	r24
   15d3a:	77 95       	ror	r23
   15d3c:	67 95       	ror	r22
   15d3e:	b7 95       	ror	r27
   15d40:	f7 95       	ror	r31
   15d42:	9e 3f       	cpi	r25, 0xFE	; 254
   15d44:	08 f0       	brcs	.+2      	; 0x15d48 <__addsf3x+0x96>
   15d46:	b3 cf       	rjmp	.-154    	; 0x15cae <__addsf3+0x1e>
   15d48:	93 95       	inc	r25
   15d4a:	88 0f       	add	r24, r24
   15d4c:	08 f0       	brcs	.+2      	; 0x15d50 <__addsf3x+0x9e>
   15d4e:	99 27       	eor	r25, r25
   15d50:	ee 0f       	add	r30, r30
   15d52:	97 95       	ror	r25
   15d54:	87 95       	ror	r24
   15d56:	08 95       	ret

00015d58 <__cmpsf2>:
   15d58:	51 d1       	rcall	.+674    	; 0x15ffc <__fp_cmp>
   15d5a:	08 f4       	brcc	.+2      	; 0x15d5e <__cmpsf2+0x6>
   15d5c:	81 e0       	ldi	r24, 0x01	; 1
   15d5e:	08 95       	ret

00015d60 <__divsf3>:
   15d60:	0c d0       	rcall	.+24     	; 0x15d7a <__divsf3x>
   15d62:	97 c1       	rjmp	.+814    	; 0x16092 <__fp_round>
   15d64:	8f d1       	rcall	.+798    	; 0x16084 <__fp_pscB>
   15d66:	40 f0       	brcs	.+16     	; 0x15d78 <__divsf3+0x18>
   15d68:	86 d1       	rcall	.+780    	; 0x16076 <__fp_pscA>
   15d6a:	30 f0       	brcs	.+12     	; 0x15d78 <__divsf3+0x18>
   15d6c:	21 f4       	brne	.+8      	; 0x15d76 <__divsf3+0x16>
   15d6e:	5f 3f       	cpi	r21, 0xFF	; 255
   15d70:	19 f0       	breq	.+6      	; 0x15d78 <__divsf3+0x18>
   15d72:	68 c1       	rjmp	.+720    	; 0x16044 <__fp_inf>
   15d74:	51 11       	cpse	r21, r1
   15d76:	c1 c1       	rjmp	.+898    	; 0x160fa <__fp_szero>
   15d78:	6b c1       	rjmp	.+726    	; 0x16050 <__fp_nan>

00015d7a <__divsf3x>:
   15d7a:	9c d1       	rcall	.+824    	; 0x160b4 <__fp_split3>
   15d7c:	98 f3       	brcs	.-26     	; 0x15d64 <__divsf3+0x4>

00015d7e <__divsf3_pse>:
   15d7e:	99 23       	and	r25, r25
   15d80:	c9 f3       	breq	.-14     	; 0x15d74 <__divsf3+0x14>
   15d82:	55 23       	and	r21, r21
   15d84:	b1 f3       	breq	.-20     	; 0x15d72 <__divsf3+0x12>
   15d86:	95 1b       	sub	r25, r21
   15d88:	55 0b       	sbc	r21, r21
   15d8a:	bb 27       	eor	r27, r27
   15d8c:	aa 27       	eor	r26, r26
   15d8e:	62 17       	cp	r22, r18
   15d90:	73 07       	cpc	r23, r19
   15d92:	84 07       	cpc	r24, r20
   15d94:	38 f0       	brcs	.+14     	; 0x15da4 <__divsf3_pse+0x26>
   15d96:	9f 5f       	subi	r25, 0xFF	; 255
   15d98:	5f 4f       	sbci	r21, 0xFF	; 255
   15d9a:	22 0f       	add	r18, r18
   15d9c:	33 1f       	adc	r19, r19
   15d9e:	44 1f       	adc	r20, r20
   15da0:	aa 1f       	adc	r26, r26
   15da2:	a9 f3       	breq	.-22     	; 0x15d8e <__divsf3_pse+0x10>
   15da4:	33 d0       	rcall	.+102    	; 0x15e0c <__divsf3_pse+0x8e>
   15da6:	0e 2e       	mov	r0, r30
   15da8:	3a f0       	brmi	.+14     	; 0x15db8 <__divsf3_pse+0x3a>
   15daa:	e0 e8       	ldi	r30, 0x80	; 128
   15dac:	30 d0       	rcall	.+96     	; 0x15e0e <__divsf3_pse+0x90>
   15dae:	91 50       	subi	r25, 0x01	; 1
   15db0:	50 40       	sbci	r21, 0x00	; 0
   15db2:	e6 95       	lsr	r30
   15db4:	00 1c       	adc	r0, r0
   15db6:	ca f7       	brpl	.-14     	; 0x15daa <__divsf3_pse+0x2c>
   15db8:	29 d0       	rcall	.+82     	; 0x15e0c <__divsf3_pse+0x8e>
   15dba:	fe 2f       	mov	r31, r30
   15dbc:	27 d0       	rcall	.+78     	; 0x15e0c <__divsf3_pse+0x8e>
   15dbe:	66 0f       	add	r22, r22
   15dc0:	77 1f       	adc	r23, r23
   15dc2:	88 1f       	adc	r24, r24
   15dc4:	bb 1f       	adc	r27, r27
   15dc6:	26 17       	cp	r18, r22
   15dc8:	37 07       	cpc	r19, r23
   15dca:	48 07       	cpc	r20, r24
   15dcc:	ab 07       	cpc	r26, r27
   15dce:	b0 e8       	ldi	r27, 0x80	; 128
   15dd0:	09 f0       	breq	.+2      	; 0x15dd4 <__divsf3_pse+0x56>
   15dd2:	bb 0b       	sbc	r27, r27
   15dd4:	80 2d       	mov	r24, r0
   15dd6:	bf 01       	movw	r22, r30
   15dd8:	ff 27       	eor	r31, r31
   15dda:	93 58       	subi	r25, 0x83	; 131
   15ddc:	5f 4f       	sbci	r21, 0xFF	; 255
   15dde:	2a f0       	brmi	.+10     	; 0x15dea <__divsf3_pse+0x6c>
   15de0:	9e 3f       	cpi	r25, 0xFE	; 254
   15de2:	51 05       	cpc	r21, r1
   15de4:	68 f0       	brcs	.+26     	; 0x15e00 <__divsf3_pse+0x82>
   15de6:	2e c1       	rjmp	.+604    	; 0x16044 <__fp_inf>
   15de8:	88 c1       	rjmp	.+784    	; 0x160fa <__fp_szero>
   15dea:	5f 3f       	cpi	r21, 0xFF	; 255
   15dec:	ec f3       	brlt	.-6      	; 0x15de8 <__divsf3_pse+0x6a>
   15dee:	98 3e       	cpi	r25, 0xE8	; 232
   15df0:	dc f3       	brlt	.-10     	; 0x15de8 <__divsf3_pse+0x6a>
   15df2:	86 95       	lsr	r24
   15df4:	77 95       	ror	r23
   15df6:	67 95       	ror	r22
   15df8:	b7 95       	ror	r27
   15dfa:	f7 95       	ror	r31
   15dfc:	9f 5f       	subi	r25, 0xFF	; 255
   15dfe:	c9 f7       	brne	.-14     	; 0x15df2 <__divsf3_pse+0x74>
   15e00:	88 0f       	add	r24, r24
   15e02:	91 1d       	adc	r25, r1
   15e04:	96 95       	lsr	r25
   15e06:	87 95       	ror	r24
   15e08:	97 f9       	bld	r25, 7
   15e0a:	08 95       	ret
   15e0c:	e1 e0       	ldi	r30, 0x01	; 1
   15e0e:	66 0f       	add	r22, r22
   15e10:	77 1f       	adc	r23, r23
   15e12:	88 1f       	adc	r24, r24
   15e14:	bb 1f       	adc	r27, r27
   15e16:	62 17       	cp	r22, r18
   15e18:	73 07       	cpc	r23, r19
   15e1a:	84 07       	cpc	r24, r20
   15e1c:	ba 07       	cpc	r27, r26
   15e1e:	20 f0       	brcs	.+8      	; 0x15e28 <__divsf3_pse+0xaa>
   15e20:	62 1b       	sub	r22, r18
   15e22:	73 0b       	sbc	r23, r19
   15e24:	84 0b       	sbc	r24, r20
   15e26:	ba 0b       	sbc	r27, r26
   15e28:	ee 1f       	adc	r30, r30
   15e2a:	88 f7       	brcc	.-30     	; 0x15e0e <__divsf3_pse+0x90>
   15e2c:	e0 95       	com	r30
   15e2e:	08 95       	ret

00015e30 <__fixsfdi>:
   15e30:	be e3       	ldi	r27, 0x3E	; 62
   15e32:	04 d0       	rcall	.+8      	; 0x15e3c <__fixunssfdi+0x2>
   15e34:	08 f4       	brcc	.+2      	; 0x15e38 <__fixsfdi+0x8>
   15e36:	90 e8       	ldi	r25, 0x80	; 128
   15e38:	08 95       	ret

00015e3a <__fixunssfdi>:
   15e3a:	bf e3       	ldi	r27, 0x3F	; 63
   15e3c:	22 27       	eor	r18, r18
   15e3e:	33 27       	eor	r19, r19
   15e40:	a9 01       	movw	r20, r18
   15e42:	40 d1       	rcall	.+640    	; 0x160c4 <__fp_splitA>
   15e44:	58 f1       	brcs	.+86     	; 0x15e9c <__fixunssfdi+0x62>
   15e46:	9f 57       	subi	r25, 0x7F	; 127
   15e48:	40 f1       	brcs	.+80     	; 0x15e9a <__fixunssfdi+0x60>
   15e4a:	b9 17       	cp	r27, r25
   15e4c:	38 f1       	brcs	.+78     	; 0x15e9c <__fixunssfdi+0x62>
   15e4e:	bf e3       	ldi	r27, 0x3F	; 63
   15e50:	b9 1b       	sub	r27, r25
   15e52:	99 27       	eor	r25, r25
   15e54:	b8 50       	subi	r27, 0x08	; 8
   15e56:	3a f4       	brpl	.+14     	; 0x15e66 <__fixunssfdi+0x2c>
   15e58:	66 0f       	add	r22, r22
   15e5a:	77 1f       	adc	r23, r23
   15e5c:	88 1f       	adc	r24, r24
   15e5e:	99 1f       	adc	r25, r25
   15e60:	b3 95       	inc	r27
   15e62:	d2 f3       	brmi	.-12     	; 0x15e58 <__fixunssfdi+0x1e>
   15e64:	16 c0       	rjmp	.+44     	; 0x15e92 <__fixunssfdi+0x58>
   15e66:	b8 50       	subi	r27, 0x08	; 8
   15e68:	4a f0       	brmi	.+18     	; 0x15e7c <__fixunssfdi+0x42>
   15e6a:	23 2f       	mov	r18, r19
   15e6c:	34 2f       	mov	r19, r20
   15e6e:	45 2f       	mov	r20, r21
   15e70:	56 2f       	mov	r21, r22
   15e72:	67 2f       	mov	r22, r23
   15e74:	78 2f       	mov	r23, r24
   15e76:	88 27       	eor	r24, r24
   15e78:	b8 50       	subi	r27, 0x08	; 8
   15e7a:	ba f7       	brpl	.-18     	; 0x15e6a <__fixunssfdi+0x30>
   15e7c:	b8 5f       	subi	r27, 0xF8	; 248
   15e7e:	49 f0       	breq	.+18     	; 0x15e92 <__fixunssfdi+0x58>
   15e80:	86 95       	lsr	r24
   15e82:	77 95       	ror	r23
   15e84:	67 95       	ror	r22
   15e86:	57 95       	ror	r21
   15e88:	47 95       	ror	r20
   15e8a:	37 95       	ror	r19
   15e8c:	27 95       	ror	r18
   15e8e:	ba 95       	dec	r27
   15e90:	b9 f7       	brne	.-18     	; 0x15e80 <__fixunssfdi+0x46>
   15e92:	0e f4       	brtc	.+2      	; 0x15e96 <__fixunssfdi+0x5c>
   15e94:	e0 d0       	rcall	.+448    	; 0x16056 <__fp_negdi>
   15e96:	88 94       	clc
   15e98:	08 95       	ret
   15e9a:	88 94       	clc
   15e9c:	60 e0       	ldi	r22, 0x00	; 0
   15e9e:	70 e0       	ldi	r23, 0x00	; 0
   15ea0:	cb 01       	movw	r24, r22
   15ea2:	08 95       	ret

00015ea4 <__fixsfsi>:
   15ea4:	04 d0       	rcall	.+8      	; 0x15eae <__fixunssfsi>
   15ea6:	68 94       	set
   15ea8:	b1 11       	cpse	r27, r1
   15eaa:	27 c1       	rjmp	.+590    	; 0x160fa <__fp_szero>
   15eac:	08 95       	ret

00015eae <__fixunssfsi>:
   15eae:	0a d1       	rcall	.+532    	; 0x160c4 <__fp_splitA>
   15eb0:	88 f0       	brcs	.+34     	; 0x15ed4 <__fixunssfsi+0x26>
   15eb2:	9f 57       	subi	r25, 0x7F	; 127
   15eb4:	90 f0       	brcs	.+36     	; 0x15eda <__fixunssfsi+0x2c>
   15eb6:	b9 2f       	mov	r27, r25
   15eb8:	99 27       	eor	r25, r25
   15eba:	b7 51       	subi	r27, 0x17	; 23
   15ebc:	a0 f0       	brcs	.+40     	; 0x15ee6 <__fixunssfsi+0x38>
   15ebe:	d1 f0       	breq	.+52     	; 0x15ef4 <__fixunssfsi+0x46>
   15ec0:	66 0f       	add	r22, r22
   15ec2:	77 1f       	adc	r23, r23
   15ec4:	88 1f       	adc	r24, r24
   15ec6:	99 1f       	adc	r25, r25
   15ec8:	1a f0       	brmi	.+6      	; 0x15ed0 <__fixunssfsi+0x22>
   15eca:	ba 95       	dec	r27
   15ecc:	c9 f7       	brne	.-14     	; 0x15ec0 <__fixunssfsi+0x12>
   15ece:	12 c0       	rjmp	.+36     	; 0x15ef4 <__fixunssfsi+0x46>
   15ed0:	b1 30       	cpi	r27, 0x01	; 1
   15ed2:	81 f0       	breq	.+32     	; 0x15ef4 <__fixunssfsi+0x46>
   15ed4:	11 d1       	rcall	.+546    	; 0x160f8 <__fp_zero>
   15ed6:	b1 e0       	ldi	r27, 0x01	; 1
   15ed8:	08 95       	ret
   15eda:	0e c1       	rjmp	.+540    	; 0x160f8 <__fp_zero>
   15edc:	67 2f       	mov	r22, r23
   15ede:	78 2f       	mov	r23, r24
   15ee0:	88 27       	eor	r24, r24
   15ee2:	b8 5f       	subi	r27, 0xF8	; 248
   15ee4:	39 f0       	breq	.+14     	; 0x15ef4 <__fixunssfsi+0x46>
   15ee6:	b9 3f       	cpi	r27, 0xF9	; 249
   15ee8:	cc f3       	brlt	.-14     	; 0x15edc <__fixunssfsi+0x2e>
   15eea:	86 95       	lsr	r24
   15eec:	77 95       	ror	r23
   15eee:	67 95       	ror	r22
   15ef0:	b3 95       	inc	r27
   15ef2:	d9 f7       	brne	.-10     	; 0x15eea <__fixunssfsi+0x3c>
   15ef4:	3e f4       	brtc	.+14     	; 0x15f04 <__fixunssfsi+0x56>
   15ef6:	90 95       	com	r25
   15ef8:	80 95       	com	r24
   15efa:	70 95       	com	r23
   15efc:	61 95       	neg	r22
   15efe:	7f 4f       	sbci	r23, 0xFF	; 255
   15f00:	8f 4f       	sbci	r24, 0xFF	; 255
   15f02:	9f 4f       	sbci	r25, 0xFF	; 255
   15f04:	08 95       	ret

00015f06 <__floatunsisf>:
   15f06:	e8 94       	clt
   15f08:	09 c0       	rjmp	.+18     	; 0x15f1c <__floatsisf+0x12>

00015f0a <__floatsisf>:
   15f0a:	97 fb       	bst	r25, 7
   15f0c:	3e f4       	brtc	.+14     	; 0x15f1c <__floatsisf+0x12>
   15f0e:	90 95       	com	r25
   15f10:	80 95       	com	r24
   15f12:	70 95       	com	r23
   15f14:	61 95       	neg	r22
   15f16:	7f 4f       	sbci	r23, 0xFF	; 255
   15f18:	8f 4f       	sbci	r24, 0xFF	; 255
   15f1a:	9f 4f       	sbci	r25, 0xFF	; 255
   15f1c:	99 23       	and	r25, r25
   15f1e:	a9 f0       	breq	.+42     	; 0x15f4a <__floatsisf+0x40>
   15f20:	f9 2f       	mov	r31, r25
   15f22:	96 e9       	ldi	r25, 0x96	; 150
   15f24:	bb 27       	eor	r27, r27
   15f26:	93 95       	inc	r25
   15f28:	f6 95       	lsr	r31
   15f2a:	87 95       	ror	r24
   15f2c:	77 95       	ror	r23
   15f2e:	67 95       	ror	r22
   15f30:	b7 95       	ror	r27
   15f32:	f1 11       	cpse	r31, r1
   15f34:	f8 cf       	rjmp	.-16     	; 0x15f26 <__floatsisf+0x1c>
   15f36:	fa f4       	brpl	.+62     	; 0x15f76 <__floatsisf+0x6c>
   15f38:	bb 0f       	add	r27, r27
   15f3a:	11 f4       	brne	.+4      	; 0x15f40 <__floatsisf+0x36>
   15f3c:	60 ff       	sbrs	r22, 0
   15f3e:	1b c0       	rjmp	.+54     	; 0x15f76 <__floatsisf+0x6c>
   15f40:	6f 5f       	subi	r22, 0xFF	; 255
   15f42:	7f 4f       	sbci	r23, 0xFF	; 255
   15f44:	8f 4f       	sbci	r24, 0xFF	; 255
   15f46:	9f 4f       	sbci	r25, 0xFF	; 255
   15f48:	16 c0       	rjmp	.+44     	; 0x15f76 <__floatsisf+0x6c>
   15f4a:	88 23       	and	r24, r24
   15f4c:	11 f0       	breq	.+4      	; 0x15f52 <__floatsisf+0x48>
   15f4e:	96 e9       	ldi	r25, 0x96	; 150
   15f50:	11 c0       	rjmp	.+34     	; 0x15f74 <__floatsisf+0x6a>
   15f52:	77 23       	and	r23, r23
   15f54:	21 f0       	breq	.+8      	; 0x15f5e <__floatsisf+0x54>
   15f56:	9e e8       	ldi	r25, 0x8E	; 142
   15f58:	87 2f       	mov	r24, r23
   15f5a:	76 2f       	mov	r23, r22
   15f5c:	05 c0       	rjmp	.+10     	; 0x15f68 <__floatsisf+0x5e>
   15f5e:	66 23       	and	r22, r22
   15f60:	71 f0       	breq	.+28     	; 0x15f7e <__floatsisf+0x74>
   15f62:	96 e8       	ldi	r25, 0x86	; 134
   15f64:	86 2f       	mov	r24, r22
   15f66:	70 e0       	ldi	r23, 0x00	; 0
   15f68:	60 e0       	ldi	r22, 0x00	; 0
   15f6a:	2a f0       	brmi	.+10     	; 0x15f76 <__floatsisf+0x6c>
   15f6c:	9a 95       	dec	r25
   15f6e:	66 0f       	add	r22, r22
   15f70:	77 1f       	adc	r23, r23
   15f72:	88 1f       	adc	r24, r24
   15f74:	da f7       	brpl	.-10     	; 0x15f6c <__floatsisf+0x62>
   15f76:	88 0f       	add	r24, r24
   15f78:	96 95       	lsr	r25
   15f7a:	87 95       	ror	r24
   15f7c:	97 f9       	bld	r25, 7
   15f7e:	08 95       	ret

00015f80 <__floatundisf>:
   15f80:	e8 94       	clt

00015f82 <__fp_di2sf>:
   15f82:	f9 2f       	mov	r31, r25
   15f84:	96 eb       	ldi	r25, 0xB6	; 182
   15f86:	ff 23       	and	r31, r31
   15f88:	81 f0       	breq	.+32     	; 0x15faa <__fp_di2sf+0x28>
   15f8a:	12 16       	cp	r1, r18
   15f8c:	13 06       	cpc	r1, r19
   15f8e:	14 06       	cpc	r1, r20
   15f90:	44 0b       	sbc	r20, r20
   15f92:	93 95       	inc	r25
   15f94:	f6 95       	lsr	r31
   15f96:	87 95       	ror	r24
   15f98:	77 95       	ror	r23
   15f9a:	67 95       	ror	r22
   15f9c:	57 95       	ror	r21
   15f9e:	40 40       	sbci	r20, 0x00	; 0
   15fa0:	ff 23       	and	r31, r31
   15fa2:	b9 f7       	brne	.-18     	; 0x15f92 <__fp_di2sf+0x10>
   15fa4:	1b c0       	rjmp	.+54     	; 0x15fdc <__fp_di2sf+0x5a>
   15fa6:	99 27       	eor	r25, r25
   15fa8:	08 95       	ret
   15faa:	88 23       	and	r24, r24
   15fac:	51 f4       	brne	.+20     	; 0x15fc2 <__fp_di2sf+0x40>
   15fae:	98 50       	subi	r25, 0x08	; 8
   15fb0:	d2 f7       	brpl	.-12     	; 0x15fa6 <__fp_di2sf+0x24>
   15fb2:	87 2b       	or	r24, r23
   15fb4:	76 2f       	mov	r23, r22
   15fb6:	65 2f       	mov	r22, r21
   15fb8:	54 2f       	mov	r21, r20
   15fba:	43 2f       	mov	r20, r19
   15fbc:	32 2f       	mov	r19, r18
   15fbe:	20 e0       	ldi	r18, 0x00	; 0
   15fc0:	b1 f3       	breq	.-20     	; 0x15fae <__fp_di2sf+0x2c>
   15fc2:	12 16       	cp	r1, r18
   15fc4:	13 06       	cpc	r1, r19
   15fc6:	14 06       	cpc	r1, r20
   15fc8:	44 0b       	sbc	r20, r20
   15fca:	88 23       	and	r24, r24
   15fcc:	3a f0       	brmi	.+14     	; 0x15fdc <__fp_di2sf+0x5a>
   15fce:	9a 95       	dec	r25
   15fd0:	44 0f       	add	r20, r20
   15fd2:	55 1f       	adc	r21, r21
   15fd4:	66 1f       	adc	r22, r22
   15fd6:	77 1f       	adc	r23, r23
   15fd8:	88 1f       	adc	r24, r24
   15fda:	ca f7       	brpl	.-14     	; 0x15fce <__fp_di2sf+0x4c>
   15fdc:	55 23       	and	r21, r21
   15fde:	4a f4       	brpl	.+18     	; 0x15ff2 <__fp_di2sf+0x70>
   15fe0:	44 0f       	add	r20, r20
   15fe2:	55 1f       	adc	r21, r21
   15fe4:	11 f4       	brne	.+4      	; 0x15fea <__fp_di2sf+0x68>
   15fe6:	60 ff       	sbrs	r22, 0
   15fe8:	04 c0       	rjmp	.+8      	; 0x15ff2 <__fp_di2sf+0x70>
   15fea:	6f 5f       	subi	r22, 0xFF	; 255
   15fec:	7f 4f       	sbci	r23, 0xFF	; 255
   15fee:	8f 4f       	sbci	r24, 0xFF	; 255
   15ff0:	9f 4f       	sbci	r25, 0xFF	; 255
   15ff2:	88 0f       	add	r24, r24
   15ff4:	96 95       	lsr	r25
   15ff6:	87 95       	ror	r24
   15ff8:	97 f9       	bld	r25, 7
   15ffa:	08 95       	ret

00015ffc <__fp_cmp>:
   15ffc:	99 0f       	add	r25, r25
   15ffe:	00 08       	sbc	r0, r0
   16000:	55 0f       	add	r21, r21
   16002:	aa 0b       	sbc	r26, r26
   16004:	e0 e8       	ldi	r30, 0x80	; 128
   16006:	fe ef       	ldi	r31, 0xFE	; 254
   16008:	16 16       	cp	r1, r22
   1600a:	17 06       	cpc	r1, r23
   1600c:	e8 07       	cpc	r30, r24
   1600e:	f9 07       	cpc	r31, r25
   16010:	c0 f0       	brcs	.+48     	; 0x16042 <__fp_cmp+0x46>
   16012:	12 16       	cp	r1, r18
   16014:	13 06       	cpc	r1, r19
   16016:	e4 07       	cpc	r30, r20
   16018:	f5 07       	cpc	r31, r21
   1601a:	98 f0       	brcs	.+38     	; 0x16042 <__fp_cmp+0x46>
   1601c:	62 1b       	sub	r22, r18
   1601e:	73 0b       	sbc	r23, r19
   16020:	84 0b       	sbc	r24, r20
   16022:	95 0b       	sbc	r25, r21
   16024:	39 f4       	brne	.+14     	; 0x16034 <__fp_cmp+0x38>
   16026:	0a 26       	eor	r0, r26
   16028:	61 f0       	breq	.+24     	; 0x16042 <__fp_cmp+0x46>
   1602a:	23 2b       	or	r18, r19
   1602c:	24 2b       	or	r18, r20
   1602e:	25 2b       	or	r18, r21
   16030:	21 f4       	brne	.+8      	; 0x1603a <__fp_cmp+0x3e>
   16032:	08 95       	ret
   16034:	0a 26       	eor	r0, r26
   16036:	09 f4       	brne	.+2      	; 0x1603a <__fp_cmp+0x3e>
   16038:	a1 40       	sbci	r26, 0x01	; 1
   1603a:	a6 95       	lsr	r26
   1603c:	8f ef       	ldi	r24, 0xFF	; 255
   1603e:	81 1d       	adc	r24, r1
   16040:	81 1d       	adc	r24, r1
   16042:	08 95       	ret

00016044 <__fp_inf>:
   16044:	97 f9       	bld	r25, 7
   16046:	9f 67       	ori	r25, 0x7F	; 127
   16048:	80 e8       	ldi	r24, 0x80	; 128
   1604a:	70 e0       	ldi	r23, 0x00	; 0
   1604c:	60 e0       	ldi	r22, 0x00	; 0
   1604e:	08 95       	ret

00016050 <__fp_nan>:
   16050:	9f ef       	ldi	r25, 0xFF	; 255
   16052:	80 ec       	ldi	r24, 0xC0	; 192
   16054:	08 95       	ret

00016056 <__fp_negdi>:
   16056:	90 95       	com	r25
   16058:	80 95       	com	r24
   1605a:	70 95       	com	r23
   1605c:	60 95       	com	r22
   1605e:	50 95       	com	r21
   16060:	40 95       	com	r20
   16062:	30 95       	com	r19
   16064:	21 95       	neg	r18
   16066:	3f 4f       	sbci	r19, 0xFF	; 255
   16068:	4f 4f       	sbci	r20, 0xFF	; 255
   1606a:	5f 4f       	sbci	r21, 0xFF	; 255
   1606c:	6f 4f       	sbci	r22, 0xFF	; 255
   1606e:	7f 4f       	sbci	r23, 0xFF	; 255
   16070:	8f 4f       	sbci	r24, 0xFF	; 255
   16072:	9f 4f       	sbci	r25, 0xFF	; 255
   16074:	08 95       	ret

00016076 <__fp_pscA>:
   16076:	00 24       	eor	r0, r0
   16078:	0a 94       	dec	r0
   1607a:	16 16       	cp	r1, r22
   1607c:	17 06       	cpc	r1, r23
   1607e:	18 06       	cpc	r1, r24
   16080:	09 06       	cpc	r0, r25
   16082:	08 95       	ret

00016084 <__fp_pscB>:
   16084:	00 24       	eor	r0, r0
   16086:	0a 94       	dec	r0
   16088:	12 16       	cp	r1, r18
   1608a:	13 06       	cpc	r1, r19
   1608c:	14 06       	cpc	r1, r20
   1608e:	05 06       	cpc	r0, r21
   16090:	08 95       	ret

00016092 <__fp_round>:
   16092:	09 2e       	mov	r0, r25
   16094:	03 94       	inc	r0
   16096:	00 0c       	add	r0, r0
   16098:	11 f4       	brne	.+4      	; 0x1609e <__fp_round+0xc>
   1609a:	88 23       	and	r24, r24
   1609c:	52 f0       	brmi	.+20     	; 0x160b2 <__fp_round+0x20>
   1609e:	bb 0f       	add	r27, r27
   160a0:	40 f4       	brcc	.+16     	; 0x160b2 <__fp_round+0x20>
   160a2:	bf 2b       	or	r27, r31
   160a4:	11 f4       	brne	.+4      	; 0x160aa <__fp_round+0x18>
   160a6:	60 ff       	sbrs	r22, 0
   160a8:	04 c0       	rjmp	.+8      	; 0x160b2 <__fp_round+0x20>
   160aa:	6f 5f       	subi	r22, 0xFF	; 255
   160ac:	7f 4f       	sbci	r23, 0xFF	; 255
   160ae:	8f 4f       	sbci	r24, 0xFF	; 255
   160b0:	9f 4f       	sbci	r25, 0xFF	; 255
   160b2:	08 95       	ret

000160b4 <__fp_split3>:
   160b4:	57 fd       	sbrc	r21, 7
   160b6:	90 58       	subi	r25, 0x80	; 128
   160b8:	44 0f       	add	r20, r20
   160ba:	55 1f       	adc	r21, r21
   160bc:	59 f0       	breq	.+22     	; 0x160d4 <__fp_splitA+0x10>
   160be:	5f 3f       	cpi	r21, 0xFF	; 255
   160c0:	71 f0       	breq	.+28     	; 0x160de <__fp_splitA+0x1a>
   160c2:	47 95       	ror	r20

000160c4 <__fp_splitA>:
   160c4:	88 0f       	add	r24, r24
   160c6:	97 fb       	bst	r25, 7
   160c8:	99 1f       	adc	r25, r25
   160ca:	61 f0       	breq	.+24     	; 0x160e4 <__fp_splitA+0x20>
   160cc:	9f 3f       	cpi	r25, 0xFF	; 255
   160ce:	79 f0       	breq	.+30     	; 0x160ee <__fp_splitA+0x2a>
   160d0:	87 95       	ror	r24
   160d2:	08 95       	ret
   160d4:	12 16       	cp	r1, r18
   160d6:	13 06       	cpc	r1, r19
   160d8:	14 06       	cpc	r1, r20
   160da:	55 1f       	adc	r21, r21
   160dc:	f2 cf       	rjmp	.-28     	; 0x160c2 <__fp_split3+0xe>
   160de:	46 95       	lsr	r20
   160e0:	f1 df       	rcall	.-30     	; 0x160c4 <__fp_splitA>
   160e2:	08 c0       	rjmp	.+16     	; 0x160f4 <__fp_splitA+0x30>
   160e4:	16 16       	cp	r1, r22
   160e6:	17 06       	cpc	r1, r23
   160e8:	18 06       	cpc	r1, r24
   160ea:	99 1f       	adc	r25, r25
   160ec:	f1 cf       	rjmp	.-30     	; 0x160d0 <__fp_splitA+0xc>
   160ee:	86 95       	lsr	r24
   160f0:	71 05       	cpc	r23, r1
   160f2:	61 05       	cpc	r22, r1
   160f4:	08 94       	sec
   160f6:	08 95       	ret

000160f8 <__fp_zero>:
   160f8:	e8 94       	clt

000160fa <__fp_szero>:
   160fa:	bb 27       	eor	r27, r27
   160fc:	66 27       	eor	r22, r22
   160fe:	77 27       	eor	r23, r23
   16100:	cb 01       	movw	r24, r22
   16102:	97 f9       	bld	r25, 7
   16104:	08 95       	ret

00016106 <__gesf2>:
   16106:	7a df       	rcall	.-268    	; 0x15ffc <__fp_cmp>
   16108:	08 f4       	brcc	.+2      	; 0x1610c <__gesf2+0x6>
   1610a:	8f ef       	ldi	r24, 0xFF	; 255
   1610c:	08 95       	ret

0001610e <__mulsf3>:
   1610e:	0b d0       	rcall	.+22     	; 0x16126 <__mulsf3x>
   16110:	c0 cf       	rjmp	.-128    	; 0x16092 <__fp_round>
   16112:	b1 df       	rcall	.-158    	; 0x16076 <__fp_pscA>
   16114:	28 f0       	brcs	.+10     	; 0x16120 <__mulsf3+0x12>
   16116:	b6 df       	rcall	.-148    	; 0x16084 <__fp_pscB>
   16118:	18 f0       	brcs	.+6      	; 0x16120 <__mulsf3+0x12>
   1611a:	95 23       	and	r25, r21
   1611c:	09 f0       	breq	.+2      	; 0x16120 <__mulsf3+0x12>
   1611e:	92 cf       	rjmp	.-220    	; 0x16044 <__fp_inf>
   16120:	97 cf       	rjmp	.-210    	; 0x16050 <__fp_nan>
   16122:	11 24       	eor	r1, r1
   16124:	ea cf       	rjmp	.-44     	; 0x160fa <__fp_szero>

00016126 <__mulsf3x>:
   16126:	c6 df       	rcall	.-116    	; 0x160b4 <__fp_split3>
   16128:	a0 f3       	brcs	.-24     	; 0x16112 <__mulsf3+0x4>

0001612a <__mulsf3_pse>:
   1612a:	95 9f       	mul	r25, r21
   1612c:	d1 f3       	breq	.-12     	; 0x16122 <__mulsf3+0x14>
   1612e:	95 0f       	add	r25, r21
   16130:	50 e0       	ldi	r21, 0x00	; 0
   16132:	55 1f       	adc	r21, r21
   16134:	62 9f       	mul	r22, r18
   16136:	f0 01       	movw	r30, r0
   16138:	72 9f       	mul	r23, r18
   1613a:	bb 27       	eor	r27, r27
   1613c:	f0 0d       	add	r31, r0
   1613e:	b1 1d       	adc	r27, r1
   16140:	63 9f       	mul	r22, r19
   16142:	aa 27       	eor	r26, r26
   16144:	f0 0d       	add	r31, r0
   16146:	b1 1d       	adc	r27, r1
   16148:	aa 1f       	adc	r26, r26
   1614a:	64 9f       	mul	r22, r20
   1614c:	66 27       	eor	r22, r22
   1614e:	b0 0d       	add	r27, r0
   16150:	a1 1d       	adc	r26, r1
   16152:	66 1f       	adc	r22, r22
   16154:	82 9f       	mul	r24, r18
   16156:	22 27       	eor	r18, r18
   16158:	b0 0d       	add	r27, r0
   1615a:	a1 1d       	adc	r26, r1
   1615c:	62 1f       	adc	r22, r18
   1615e:	73 9f       	mul	r23, r19
   16160:	b0 0d       	add	r27, r0
   16162:	a1 1d       	adc	r26, r1
   16164:	62 1f       	adc	r22, r18
   16166:	83 9f       	mul	r24, r19
   16168:	a0 0d       	add	r26, r0
   1616a:	61 1d       	adc	r22, r1
   1616c:	22 1f       	adc	r18, r18
   1616e:	74 9f       	mul	r23, r20
   16170:	33 27       	eor	r19, r19
   16172:	a0 0d       	add	r26, r0
   16174:	61 1d       	adc	r22, r1
   16176:	23 1f       	adc	r18, r19
   16178:	84 9f       	mul	r24, r20
   1617a:	60 0d       	add	r22, r0
   1617c:	21 1d       	adc	r18, r1
   1617e:	82 2f       	mov	r24, r18
   16180:	76 2f       	mov	r23, r22
   16182:	6a 2f       	mov	r22, r26
   16184:	11 24       	eor	r1, r1
   16186:	9f 57       	subi	r25, 0x7F	; 127
   16188:	50 40       	sbci	r21, 0x00	; 0
   1618a:	8a f0       	brmi	.+34     	; 0x161ae <__mulsf3_pse+0x84>
   1618c:	e1 f0       	breq	.+56     	; 0x161c6 <__mulsf3_pse+0x9c>
   1618e:	88 23       	and	r24, r24
   16190:	4a f0       	brmi	.+18     	; 0x161a4 <__mulsf3_pse+0x7a>
   16192:	ee 0f       	add	r30, r30
   16194:	ff 1f       	adc	r31, r31
   16196:	bb 1f       	adc	r27, r27
   16198:	66 1f       	adc	r22, r22
   1619a:	77 1f       	adc	r23, r23
   1619c:	88 1f       	adc	r24, r24
   1619e:	91 50       	subi	r25, 0x01	; 1
   161a0:	50 40       	sbci	r21, 0x00	; 0
   161a2:	a9 f7       	brne	.-22     	; 0x1618e <__mulsf3_pse+0x64>
   161a4:	9e 3f       	cpi	r25, 0xFE	; 254
   161a6:	51 05       	cpc	r21, r1
   161a8:	70 f0       	brcs	.+28     	; 0x161c6 <__mulsf3_pse+0x9c>
   161aa:	4c cf       	rjmp	.-360    	; 0x16044 <__fp_inf>
   161ac:	a6 cf       	rjmp	.-180    	; 0x160fa <__fp_szero>
   161ae:	5f 3f       	cpi	r21, 0xFF	; 255
   161b0:	ec f3       	brlt	.-6      	; 0x161ac <__mulsf3_pse+0x82>
   161b2:	98 3e       	cpi	r25, 0xE8	; 232
   161b4:	dc f3       	brlt	.-10     	; 0x161ac <__mulsf3_pse+0x82>
   161b6:	86 95       	lsr	r24
   161b8:	77 95       	ror	r23
   161ba:	67 95       	ror	r22
   161bc:	b7 95       	ror	r27
   161be:	f7 95       	ror	r31
   161c0:	e7 95       	ror	r30
   161c2:	9f 5f       	subi	r25, 0xFF	; 255
   161c4:	c1 f7       	brne	.-16     	; 0x161b6 <__mulsf3_pse+0x8c>
   161c6:	fe 2b       	or	r31, r30
   161c8:	88 0f       	add	r24, r24
   161ca:	91 1d       	adc	r25, r1
   161cc:	96 95       	lsr	r25
   161ce:	87 95       	ror	r24
   161d0:	97 f9       	bld	r25, 7
   161d2:	08 95       	ret

000161d4 <vfprintf>:
   161d4:	2f 92       	push	r2
   161d6:	3f 92       	push	r3
   161d8:	4f 92       	push	r4
   161da:	5f 92       	push	r5
   161dc:	6f 92       	push	r6
   161de:	7f 92       	push	r7
   161e0:	8f 92       	push	r8
   161e2:	9f 92       	push	r9
   161e4:	af 92       	push	r10
   161e6:	bf 92       	push	r11
   161e8:	cf 92       	push	r12
   161ea:	df 92       	push	r13
   161ec:	ef 92       	push	r14
   161ee:	ff 92       	push	r15
   161f0:	0f 93       	push	r16
   161f2:	1f 93       	push	r17
   161f4:	cf 93       	push	r28
   161f6:	df 93       	push	r29
   161f8:	cd b7       	in	r28, 0x3d	; 61
   161fa:	de b7       	in	r29, 0x3e	; 62
   161fc:	65 97       	sbiw	r28, 0x15	; 21
   161fe:	cd bf       	out	0x3d, r28	; 61
   16200:	de bf       	out	0x3e, r29	; 62
   16202:	4c 01       	movw	r8, r24
   16204:	6e 87       	std	Y+14, r22	; 0x0e
   16206:	7f 87       	std	Y+15, r23	; 0x0f
   16208:	fc 01       	movw	r30, r24
   1620a:	16 82       	std	Z+6, r1	; 0x06
   1620c:	17 82       	std	Z+7, r1	; 0x07
   1620e:	83 81       	ldd	r24, Z+3	; 0x03
   16210:	81 fd       	sbrc	r24, 1
   16212:	04 c0       	rjmp	.+8      	; 0x1621c <vfprintf+0x48>
   16214:	76 c3       	rjmp	.+1772   	; 0x16902 <vfprintf+0x72e>
   16216:	4c 85       	ldd	r20, Y+12	; 0x0c
   16218:	5d 85       	ldd	r21, Y+13	; 0x0d
   1621a:	04 c0       	rjmp	.+8      	; 0x16224 <vfprintf+0x50>
   1621c:	1e 01       	movw	r2, r28
   1621e:	08 94       	sec
   16220:	21 1c       	adc	r2, r1
   16222:	31 1c       	adc	r3, r1
   16224:	f4 01       	movw	r30, r8
   16226:	93 81       	ldd	r25, Z+3	; 0x03
   16228:	ee 85       	ldd	r30, Y+14	; 0x0e
   1622a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1622c:	93 fd       	sbrc	r25, 3
   1622e:	85 91       	lpm	r24, Z+
   16230:	93 ff       	sbrs	r25, 3
   16232:	81 91       	ld	r24, Z+
   16234:	ee 87       	std	Y+14, r30	; 0x0e
   16236:	ff 87       	std	Y+15, r31	; 0x0f
   16238:	88 23       	and	r24, r24
   1623a:	09 f4       	brne	.+2      	; 0x1623e <vfprintf+0x6a>
   1623c:	5e c3       	rjmp	.+1724   	; 0x168fa <vfprintf+0x726>
   1623e:	85 32       	cpi	r24, 0x25	; 37
   16240:	41 f4       	brne	.+16     	; 0x16252 <vfprintf+0x7e>
   16242:	93 fd       	sbrc	r25, 3
   16244:	85 91       	lpm	r24, Z+
   16246:	93 ff       	sbrs	r25, 3
   16248:	81 91       	ld	r24, Z+
   1624a:	ee 87       	std	Y+14, r30	; 0x0e
   1624c:	ff 87       	std	Y+15, r31	; 0x0f
   1624e:	85 32       	cpi	r24, 0x25	; 37
   16250:	59 f4       	brne	.+22     	; 0x16268 <vfprintf+0x94>
   16252:	90 e0       	ldi	r25, 0x00	; 0
   16254:	b4 01       	movw	r22, r8
   16256:	4c 8b       	std	Y+20, r20	; 0x14
   16258:	5d 8b       	std	Y+21, r21	; 0x15
   1625a:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   1625e:	4c 89       	ldd	r20, Y+20	; 0x14
   16260:	5d 89       	ldd	r21, Y+21	; 0x15
   16262:	4c 87       	std	Y+12, r20	; 0x0c
   16264:	5d 87       	std	Y+13, r21	; 0x0d
   16266:	d7 cf       	rjmp	.-82     	; 0x16216 <vfprintf+0x42>
   16268:	ff 24       	eor	r15, r15
   1626a:	dd 24       	eor	r13, r13
   1626c:	10 e0       	ldi	r17, 0x00	; 0
   1626e:	10 32       	cpi	r17, 0x20	; 32
   16270:	b0 f4       	brcc	.+44     	; 0x1629e <vfprintf+0xca>
   16272:	8b 32       	cpi	r24, 0x2B	; 43
   16274:	69 f0       	breq	.+26     	; 0x16290 <vfprintf+0xbc>
   16276:	8c 32       	cpi	r24, 0x2C	; 44
   16278:	28 f4       	brcc	.+10     	; 0x16284 <vfprintf+0xb0>
   1627a:	80 32       	cpi	r24, 0x20	; 32
   1627c:	51 f0       	breq	.+20     	; 0x16292 <vfprintf+0xbe>
   1627e:	83 32       	cpi	r24, 0x23	; 35
   16280:	71 f4       	brne	.+28     	; 0x1629e <vfprintf+0xca>
   16282:	0b c0       	rjmp	.+22     	; 0x1629a <vfprintf+0xc6>
   16284:	8d 32       	cpi	r24, 0x2D	; 45
   16286:	39 f0       	breq	.+14     	; 0x16296 <vfprintf+0xc2>
   16288:	80 33       	cpi	r24, 0x30	; 48
   1628a:	49 f4       	brne	.+18     	; 0x1629e <vfprintf+0xca>
   1628c:	11 60       	ori	r17, 0x01	; 1
   1628e:	2c c0       	rjmp	.+88     	; 0x162e8 <vfprintf+0x114>
   16290:	12 60       	ori	r17, 0x02	; 2
   16292:	14 60       	ori	r17, 0x04	; 4
   16294:	29 c0       	rjmp	.+82     	; 0x162e8 <vfprintf+0x114>
   16296:	18 60       	ori	r17, 0x08	; 8
   16298:	27 c0       	rjmp	.+78     	; 0x162e8 <vfprintf+0x114>
   1629a:	10 61       	ori	r17, 0x10	; 16
   1629c:	25 c0       	rjmp	.+74     	; 0x162e8 <vfprintf+0x114>
   1629e:	17 fd       	sbrc	r17, 7
   162a0:	2e c0       	rjmp	.+92     	; 0x162fe <vfprintf+0x12a>
   162a2:	28 2f       	mov	r18, r24
   162a4:	20 53       	subi	r18, 0x30	; 48
   162a6:	2a 30       	cpi	r18, 0x0A	; 10
   162a8:	98 f4       	brcc	.+38     	; 0x162d0 <vfprintf+0xfc>
   162aa:	16 ff       	sbrs	r17, 6
   162ac:	08 c0       	rjmp	.+16     	; 0x162be <vfprintf+0xea>
   162ae:	8f 2d       	mov	r24, r15
   162b0:	88 0f       	add	r24, r24
   162b2:	f8 2e       	mov	r15, r24
   162b4:	ff 0c       	add	r15, r15
   162b6:	ff 0c       	add	r15, r15
   162b8:	f8 0e       	add	r15, r24
   162ba:	f2 0e       	add	r15, r18
   162bc:	15 c0       	rjmp	.+42     	; 0x162e8 <vfprintf+0x114>
   162be:	8d 2d       	mov	r24, r13
   162c0:	88 0f       	add	r24, r24
   162c2:	d8 2e       	mov	r13, r24
   162c4:	dd 0c       	add	r13, r13
   162c6:	dd 0c       	add	r13, r13
   162c8:	d8 0e       	add	r13, r24
   162ca:	d2 0e       	add	r13, r18
   162cc:	10 62       	ori	r17, 0x20	; 32
   162ce:	0c c0       	rjmp	.+24     	; 0x162e8 <vfprintf+0x114>
   162d0:	8e 32       	cpi	r24, 0x2E	; 46
   162d2:	21 f4       	brne	.+8      	; 0x162dc <vfprintf+0x108>
   162d4:	16 fd       	sbrc	r17, 6
   162d6:	11 c3       	rjmp	.+1570   	; 0x168fa <vfprintf+0x726>
   162d8:	10 64       	ori	r17, 0x40	; 64
   162da:	06 c0       	rjmp	.+12     	; 0x162e8 <vfprintf+0x114>
   162dc:	8c 36       	cpi	r24, 0x6C	; 108
   162de:	11 f4       	brne	.+4      	; 0x162e4 <vfprintf+0x110>
   162e0:	10 68       	ori	r17, 0x80	; 128
   162e2:	02 c0       	rjmp	.+4      	; 0x162e8 <vfprintf+0x114>
   162e4:	88 36       	cpi	r24, 0x68	; 104
   162e6:	59 f4       	brne	.+22     	; 0x162fe <vfprintf+0x12a>
   162e8:	ee 85       	ldd	r30, Y+14	; 0x0e
   162ea:	ff 85       	ldd	r31, Y+15	; 0x0f
   162ec:	93 fd       	sbrc	r25, 3
   162ee:	85 91       	lpm	r24, Z+
   162f0:	93 ff       	sbrs	r25, 3
   162f2:	81 91       	ld	r24, Z+
   162f4:	ee 87       	std	Y+14, r30	; 0x0e
   162f6:	ff 87       	std	Y+15, r31	; 0x0f
   162f8:	88 23       	and	r24, r24
   162fa:	09 f0       	breq	.+2      	; 0x162fe <vfprintf+0x12a>
   162fc:	b8 cf       	rjmp	.-144    	; 0x1626e <vfprintf+0x9a>
   162fe:	98 2f       	mov	r25, r24
   16300:	95 54       	subi	r25, 0x45	; 69
   16302:	93 30       	cpi	r25, 0x03	; 3
   16304:	18 f4       	brcc	.+6      	; 0x1630c <vfprintf+0x138>
   16306:	10 61       	ori	r17, 0x10	; 16
   16308:	80 5e       	subi	r24, 0xE0	; 224
   1630a:	06 c0       	rjmp	.+12     	; 0x16318 <vfprintf+0x144>
   1630c:	98 2f       	mov	r25, r24
   1630e:	95 56       	subi	r25, 0x65	; 101
   16310:	93 30       	cpi	r25, 0x03	; 3
   16312:	08 f0       	brcs	.+2      	; 0x16316 <vfprintf+0x142>
   16314:	a2 c1       	rjmp	.+836    	; 0x1665a <vfprintf+0x486>
   16316:	1f 7e       	andi	r17, 0xEF	; 239
   16318:	16 fd       	sbrc	r17, 6
   1631a:	02 c0       	rjmp	.+4      	; 0x16320 <vfprintf+0x14c>
   1631c:	e6 e0       	ldi	r30, 0x06	; 6
   1631e:	fe 2e       	mov	r15, r30
   16320:	1f 73       	andi	r17, 0x3F	; 63
   16322:	85 36       	cpi	r24, 0x65	; 101
   16324:	11 f4       	brne	.+4      	; 0x1632a <vfprintf+0x156>
   16326:	10 64       	ori	r17, 0x40	; 64
   16328:	06 c0       	rjmp	.+12     	; 0x16336 <vfprintf+0x162>
   1632a:	86 36       	cpi	r24, 0x66	; 102
   1632c:	11 f4       	brne	.+4      	; 0x16332 <vfprintf+0x15e>
   1632e:	10 68       	ori	r17, 0x80	; 128
   16330:	02 c0       	rjmp	.+4      	; 0x16336 <vfprintf+0x162>
   16332:	f1 10       	cpse	r15, r1
   16334:	fa 94       	dec	r15
   16336:	17 ff       	sbrs	r17, 7
   16338:	07 c0       	rjmp	.+14     	; 0x16348 <vfprintf+0x174>
   1633a:	fb e3       	ldi	r31, 0x3B	; 59
   1633c:	ff 15       	cp	r31, r15
   1633e:	48 f0       	brcs	.+18     	; 0x16352 <vfprintf+0x17e>
   16340:	ef 2c       	mov	r14, r15
   16342:	e3 94       	inc	r14
   16344:	27 e0       	ldi	r18, 0x07	; 7
   16346:	0d c0       	rjmp	.+26     	; 0x16362 <vfprintf+0x18e>
   16348:	27 e0       	ldi	r18, 0x07	; 7
   1634a:	2f 15       	cp	r18, r15
   1634c:	30 f0       	brcs	.+12     	; 0x1635a <vfprintf+0x186>
   1634e:	2f 2d       	mov	r18, r15
   16350:	07 c0       	rjmp	.+14     	; 0x16360 <vfprintf+0x18c>
   16352:	27 e0       	ldi	r18, 0x07	; 7
   16354:	7c e3       	ldi	r23, 0x3C	; 60
   16356:	e7 2e       	mov	r14, r23
   16358:	04 c0       	rjmp	.+8      	; 0x16362 <vfprintf+0x18e>
   1635a:	27 e0       	ldi	r18, 0x07	; 7
   1635c:	67 e0       	ldi	r22, 0x07	; 7
   1635e:	f6 2e       	mov	r15, r22
   16360:	ee 24       	eor	r14, r14
   16362:	ca 01       	movw	r24, r20
   16364:	04 96       	adiw	r24, 0x04	; 4
   16366:	8c 87       	std	Y+12, r24	; 0x0c
   16368:	9d 87       	std	Y+13, r25	; 0x0d
   1636a:	fa 01       	movw	r30, r20
   1636c:	60 81       	ld	r22, Z
   1636e:	71 81       	ldd	r23, Z+1	; 0x01
   16370:	82 81       	ldd	r24, Z+2	; 0x02
   16372:	93 81       	ldd	r25, Z+3	; 0x03
   16374:	a1 01       	movw	r20, r2
   16376:	0e 2d       	mov	r16, r14
   16378:	0e 94 e9 b5 	call	0x16bd2	; 0x16bd2 <__ftoa_engine>
   1637c:	5c 01       	movw	r10, r24
   1637e:	c9 80       	ldd	r12, Y+1	; 0x01
   16380:	2c 2d       	mov	r18, r12
   16382:	30 e0       	ldi	r19, 0x00	; 0
   16384:	28 8b       	std	Y+16, r18	; 0x10
   16386:	39 8b       	std	Y+17, r19	; 0x11
   16388:	c0 fe       	sbrs	r12, 0
   1638a:	03 c0       	rjmp	.+6      	; 0x16392 <vfprintf+0x1be>
   1638c:	38 89       	ldd	r19, Y+16	; 0x10
   1638e:	33 ff       	sbrs	r19, 3
   16390:	06 c0       	rjmp	.+12     	; 0x1639e <vfprintf+0x1ca>
   16392:	11 fd       	sbrc	r17, 1
   16394:	06 c0       	rjmp	.+12     	; 0x163a2 <vfprintf+0x1ce>
   16396:	12 ff       	sbrs	r17, 2
   16398:	06 c0       	rjmp	.+12     	; 0x163a6 <vfprintf+0x1d2>
   1639a:	00 e2       	ldi	r16, 0x20	; 32
   1639c:	05 c0       	rjmp	.+10     	; 0x163a8 <vfprintf+0x1d4>
   1639e:	0d e2       	ldi	r16, 0x2D	; 45
   163a0:	03 c0       	rjmp	.+6      	; 0x163a8 <vfprintf+0x1d4>
   163a2:	0b e2       	ldi	r16, 0x2B	; 43
   163a4:	01 c0       	rjmp	.+2      	; 0x163a8 <vfprintf+0x1d4>
   163a6:	00 e0       	ldi	r16, 0x00	; 0
   163a8:	88 89       	ldd	r24, Y+16	; 0x10
   163aa:	99 89       	ldd	r25, Y+17	; 0x11
   163ac:	8c 70       	andi	r24, 0x0C	; 12
   163ae:	90 70       	andi	r25, 0x00	; 0
   163b0:	00 97       	sbiw	r24, 0x00	; 0
   163b2:	09 f4       	brne	.+2      	; 0x163b6 <vfprintf+0x1e2>
   163b4:	3c c0       	rjmp	.+120    	; 0x1642e <vfprintf+0x25a>
   163b6:	00 23       	and	r16, r16
   163b8:	11 f0       	breq	.+4      	; 0x163be <vfprintf+0x1ea>
   163ba:	84 e0       	ldi	r24, 0x04	; 4
   163bc:	01 c0       	rjmp	.+2      	; 0x163c0 <vfprintf+0x1ec>
   163be:	83 e0       	ldi	r24, 0x03	; 3
   163c0:	8d 15       	cp	r24, r13
   163c2:	58 f4       	brcc	.+22     	; 0x163da <vfprintf+0x206>
   163c4:	d8 1a       	sub	r13, r24
   163c6:	13 fd       	sbrc	r17, 3
   163c8:	09 c0       	rjmp	.+18     	; 0x163dc <vfprintf+0x208>
   163ca:	80 e2       	ldi	r24, 0x20	; 32
   163cc:	90 e0       	ldi	r25, 0x00	; 0
   163ce:	b4 01       	movw	r22, r8
   163d0:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   163d4:	da 94       	dec	r13
   163d6:	c9 f7       	brne	.-14     	; 0x163ca <vfprintf+0x1f6>
   163d8:	01 c0       	rjmp	.+2      	; 0x163dc <vfprintf+0x208>
   163da:	dd 24       	eor	r13, r13
   163dc:	00 23       	and	r16, r16
   163de:	29 f0       	breq	.+10     	; 0x163ea <vfprintf+0x216>
   163e0:	80 2f       	mov	r24, r16
   163e2:	90 e0       	ldi	r25, 0x00	; 0
   163e4:	b4 01       	movw	r22, r8
   163e6:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   163ea:	88 89       	ldd	r24, Y+16	; 0x10
   163ec:	83 fd       	sbrc	r24, 3
   163ee:	05 c0       	rjmp	.+10     	; 0x163fa <vfprintf+0x226>
   163f0:	35 e5       	ldi	r19, 0x55	; 85
   163f2:	e3 2e       	mov	r14, r19
   163f4:	37 e1       	ldi	r19, 0x17	; 23
   163f6:	f3 2e       	mov	r15, r19
   163f8:	11 c0       	rjmp	.+34     	; 0x1641c <vfprintf+0x248>
   163fa:	21 e5       	ldi	r18, 0x51	; 81
   163fc:	e2 2e       	mov	r14, r18
   163fe:	27 e1       	ldi	r18, 0x17	; 23
   16400:	f2 2e       	mov	r15, r18
   16402:	0c c0       	rjmp	.+24     	; 0x1641c <vfprintf+0x248>
   16404:	01 15       	cp	r16, r1
   16406:	11 05       	cpc	r17, r1
   16408:	09 f0       	breq	.+2      	; 0x1640c <vfprintf+0x238>
   1640a:	80 52       	subi	r24, 0x20	; 32
   1640c:	90 e0       	ldi	r25, 0x00	; 0
   1640e:	b4 01       	movw	r22, r8
   16410:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16414:	08 94       	sec
   16416:	e1 1c       	adc	r14, r1
   16418:	f1 1c       	adc	r15, r1
   1641a:	04 c0       	rjmp	.+8      	; 0x16424 <vfprintf+0x250>
   1641c:	01 2f       	mov	r16, r17
   1641e:	10 e0       	ldi	r17, 0x00	; 0
   16420:	00 71       	andi	r16, 0x10	; 16
   16422:	10 70       	andi	r17, 0x00	; 0
   16424:	f7 01       	movw	r30, r14
   16426:	84 91       	lpm	r24, Z
   16428:	88 23       	and	r24, r24
   1642a:	61 f7       	brne	.-40     	; 0x16404 <vfprintf+0x230>
   1642c:	63 c2       	rjmp	.+1222   	; 0x168f4 <vfprintf+0x720>
   1642e:	17 ff       	sbrs	r17, 7
   16430:	0e c0       	rjmp	.+28     	; 0x1644e <vfprintf+0x27a>
   16432:	ea 0c       	add	r14, r10
   16434:	f8 89       	ldd	r31, Y+16	; 0x10
   16436:	f4 ff       	sbrs	r31, 4
   16438:	04 c0       	rjmp	.+8      	; 0x16442 <vfprintf+0x26e>
   1643a:	8a 81       	ldd	r24, Y+2	; 0x02
   1643c:	81 33       	cpi	r24, 0x31	; 49
   1643e:	09 f4       	brne	.+2      	; 0x16442 <vfprintf+0x26e>
   16440:	ea 94       	dec	r14
   16442:	1e 14       	cp	r1, r14
   16444:	4c f5       	brge	.+82     	; 0x16498 <vfprintf+0x2c4>
   16446:	28 e0       	ldi	r18, 0x08	; 8
   16448:	2e 15       	cp	r18, r14
   1644a:	48 f1       	brcs	.+82     	; 0x1649e <vfprintf+0x2ca>
   1644c:	2c c0       	rjmp	.+88     	; 0x164a6 <vfprintf+0x2d2>
   1644e:	16 fd       	sbrc	r17, 6
   16450:	2a c0       	rjmp	.+84     	; 0x164a6 <vfprintf+0x2d2>
   16452:	8f 2d       	mov	r24, r15
   16454:	90 e0       	ldi	r25, 0x00	; 0
   16456:	8a 15       	cp	r24, r10
   16458:	9b 05       	cpc	r25, r11
   1645a:	44 f0       	brlt	.+16     	; 0x1646c <vfprintf+0x298>
   1645c:	3c ef       	ldi	r19, 0xFC	; 252
   1645e:	a3 16       	cp	r10, r19
   16460:	3f ef       	ldi	r19, 0xFF	; 255
   16462:	b3 06       	cpc	r11, r19
   16464:	1c f0       	brlt	.+6      	; 0x1646c <vfprintf+0x298>
   16466:	10 68       	ori	r17, 0x80	; 128
   16468:	01 c0       	rjmp	.+2      	; 0x1646c <vfprintf+0x298>
   1646a:	fa 94       	dec	r15
   1646c:	ff 20       	and	r15, r15
   1646e:	49 f0       	breq	.+18     	; 0x16482 <vfprintf+0x2ae>
   16470:	e2 e0       	ldi	r30, 0x02	; 2
   16472:	f0 e0       	ldi	r31, 0x00	; 0
   16474:	ec 0f       	add	r30, r28
   16476:	fd 1f       	adc	r31, r29
   16478:	ef 0d       	add	r30, r15
   1647a:	f1 1d       	adc	r31, r1
   1647c:	80 81       	ld	r24, Z
   1647e:	80 33       	cpi	r24, 0x30	; 48
   16480:	a1 f3       	breq	.-24     	; 0x1646a <vfprintf+0x296>
   16482:	17 ff       	sbrs	r17, 7
   16484:	10 c0       	rjmp	.+32     	; 0x164a6 <vfprintf+0x2d2>
   16486:	ef 2c       	mov	r14, r15
   16488:	e3 94       	inc	r14
   1648a:	8f 2d       	mov	r24, r15
   1648c:	90 e0       	ldi	r25, 0x00	; 0
   1648e:	a8 16       	cp	r10, r24
   16490:	b9 06       	cpc	r11, r25
   16492:	44 f4       	brge	.+16     	; 0x164a4 <vfprintf+0x2d0>
   16494:	fa 18       	sub	r15, r10
   16496:	07 c0       	rjmp	.+14     	; 0x164a6 <vfprintf+0x2d2>
   16498:	ee 24       	eor	r14, r14
   1649a:	e3 94       	inc	r14
   1649c:	04 c0       	rjmp	.+8      	; 0x164a6 <vfprintf+0x2d2>
   1649e:	98 e0       	ldi	r25, 0x08	; 8
   164a0:	e9 2e       	mov	r14, r25
   164a2:	01 c0       	rjmp	.+2      	; 0x164a6 <vfprintf+0x2d2>
   164a4:	ff 24       	eor	r15, r15
   164a6:	17 ff       	sbrs	r17, 7
   164a8:	07 c0       	rjmp	.+14     	; 0x164b8 <vfprintf+0x2e4>
   164aa:	1a 14       	cp	r1, r10
   164ac:	1b 04       	cpc	r1, r11
   164ae:	3c f4       	brge	.+14     	; 0x164be <vfprintf+0x2ea>
   164b0:	95 01       	movw	r18, r10
   164b2:	2f 5f       	subi	r18, 0xFF	; 255
   164b4:	3f 4f       	sbci	r19, 0xFF	; 255
   164b6:	05 c0       	rjmp	.+10     	; 0x164c2 <vfprintf+0x2ee>
   164b8:	25 e0       	ldi	r18, 0x05	; 5
   164ba:	30 e0       	ldi	r19, 0x00	; 0
   164bc:	02 c0       	rjmp	.+4      	; 0x164c2 <vfprintf+0x2ee>
   164be:	21 e0       	ldi	r18, 0x01	; 1
   164c0:	30 e0       	ldi	r19, 0x00	; 0
   164c2:	00 23       	and	r16, r16
   164c4:	11 f0       	breq	.+4      	; 0x164ca <vfprintf+0x2f6>
   164c6:	2f 5f       	subi	r18, 0xFF	; 255
   164c8:	3f 4f       	sbci	r19, 0xFF	; 255
   164ca:	ff 20       	and	r15, r15
   164cc:	29 f0       	breq	.+10     	; 0x164d8 <vfprintf+0x304>
   164ce:	8f 2d       	mov	r24, r15
   164d0:	90 e0       	ldi	r25, 0x00	; 0
   164d2:	01 96       	adiw	r24, 0x01	; 1
   164d4:	28 0f       	add	r18, r24
   164d6:	39 1f       	adc	r19, r25
   164d8:	8d 2d       	mov	r24, r13
   164da:	90 e0       	ldi	r25, 0x00	; 0
   164dc:	28 17       	cp	r18, r24
   164de:	39 07       	cpc	r19, r25
   164e0:	14 f4       	brge	.+4      	; 0x164e6 <vfprintf+0x312>
   164e2:	d2 1a       	sub	r13, r18
   164e4:	01 c0       	rjmp	.+2      	; 0x164e8 <vfprintf+0x314>
   164e6:	dd 24       	eor	r13, r13
   164e8:	61 2e       	mov	r6, r17
   164ea:	77 24       	eor	r7, r7
   164ec:	c3 01       	movw	r24, r6
   164ee:	89 70       	andi	r24, 0x09	; 9
   164f0:	90 70       	andi	r25, 0x00	; 0
   164f2:	00 97       	sbiw	r24, 0x00	; 0
   164f4:	49 f4       	brne	.+18     	; 0x16508 <vfprintf+0x334>
   164f6:	06 c0       	rjmp	.+12     	; 0x16504 <vfprintf+0x330>
   164f8:	80 e2       	ldi	r24, 0x20	; 32
   164fa:	90 e0       	ldi	r25, 0x00	; 0
   164fc:	b4 01       	movw	r22, r8
   164fe:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16502:	da 94       	dec	r13
   16504:	dd 20       	and	r13, r13
   16506:	c1 f7       	brne	.-16     	; 0x164f8 <vfprintf+0x324>
   16508:	00 23       	and	r16, r16
   1650a:	29 f0       	breq	.+10     	; 0x16516 <vfprintf+0x342>
   1650c:	80 2f       	mov	r24, r16
   1650e:	90 e0       	ldi	r25, 0x00	; 0
   16510:	b4 01       	movw	r22, r8
   16512:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16516:	63 fc       	sbrc	r6, 3
   16518:	09 c0       	rjmp	.+18     	; 0x1652c <vfprintf+0x358>
   1651a:	06 c0       	rjmp	.+12     	; 0x16528 <vfprintf+0x354>
   1651c:	80 e3       	ldi	r24, 0x30	; 48
   1651e:	90 e0       	ldi	r25, 0x00	; 0
   16520:	b4 01       	movw	r22, r8
   16522:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16526:	da 94       	dec	r13
   16528:	dd 20       	and	r13, r13
   1652a:	c1 f7       	brne	.-16     	; 0x1651c <vfprintf+0x348>
   1652c:	17 ff       	sbrs	r17, 7
   1652e:	48 c0       	rjmp	.+144    	; 0x165c0 <vfprintf+0x3ec>
   16530:	85 01       	movw	r16, r10
   16532:	b7 fe       	sbrs	r11, 7
   16534:	02 c0       	rjmp	.+4      	; 0x1653a <vfprintf+0x366>
   16536:	00 e0       	ldi	r16, 0x00	; 0
   16538:	10 e0       	ldi	r17, 0x00	; 0
   1653a:	66 24       	eor	r6, r6
   1653c:	77 24       	eor	r7, r7
   1653e:	95 01       	movw	r18, r10
   16540:	2e 19       	sub	r18, r14
   16542:	31 09       	sbc	r19, r1
   16544:	2a 8b       	std	Y+18, r18	; 0x12
   16546:	3b 8b       	std	Y+19, r19	; 0x13
   16548:	25 01       	movw	r4, r10
   1654a:	40 1a       	sub	r4, r16
   1654c:	51 0a       	sbc	r5, r17
   1654e:	42 0c       	add	r4, r2
   16550:	53 1c       	adc	r5, r3
   16552:	6f 2d       	mov	r22, r15
   16554:	70 e0       	ldi	r23, 0x00	; 0
   16556:	ee 24       	eor	r14, r14
   16558:	ff 24       	eor	r15, r15
   1655a:	e6 1a       	sub	r14, r22
   1655c:	f7 0a       	sbc	r15, r23
   1655e:	3f ef       	ldi	r19, 0xFF	; 255
   16560:	0f 3f       	cpi	r16, 0xFF	; 255
   16562:	13 07       	cpc	r17, r19
   16564:	29 f4       	brne	.+10     	; 0x16570 <vfprintf+0x39c>
   16566:	8e e2       	ldi	r24, 0x2E	; 46
   16568:	90 e0       	ldi	r25, 0x00	; 0
   1656a:	b4 01       	movw	r22, r8
   1656c:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16570:	a0 16       	cp	r10, r16
   16572:	b1 06       	cpc	r11, r17
   16574:	54 f0       	brlt	.+20     	; 0x1658a <vfprintf+0x3b6>
   16576:	2a 89       	ldd	r18, Y+18	; 0x12
   16578:	3b 89       	ldd	r19, Y+19	; 0x13
   1657a:	20 17       	cp	r18, r16
   1657c:	31 07       	cpc	r19, r17
   1657e:	2c f4       	brge	.+10     	; 0x1658a <vfprintf+0x3b6>
   16580:	f2 01       	movw	r30, r4
   16582:	e6 0d       	add	r30, r6
   16584:	f7 1d       	adc	r31, r7
   16586:	81 81       	ldd	r24, Z+1	; 0x01
   16588:	01 c0       	rjmp	.+2      	; 0x1658c <vfprintf+0x3b8>
   1658a:	80 e3       	ldi	r24, 0x30	; 48
   1658c:	01 50       	subi	r16, 0x01	; 1
   1658e:	10 40       	sbci	r17, 0x00	; 0
   16590:	08 94       	sec
   16592:	61 1c       	adc	r6, r1
   16594:	71 1c       	adc	r7, r1
   16596:	0e 15       	cp	r16, r14
   16598:	1f 05       	cpc	r17, r15
   1659a:	2c f0       	brlt	.+10     	; 0x165a6 <vfprintf+0x3d2>
   1659c:	90 e0       	ldi	r25, 0x00	; 0
   1659e:	b4 01       	movw	r22, r8
   165a0:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   165a4:	dc cf       	rjmp	.-72     	; 0x1655e <vfprintf+0x38a>
   165a6:	0a 15       	cp	r16, r10
   165a8:	1b 05       	cpc	r17, r11
   165aa:	41 f4       	brne	.+16     	; 0x165bc <vfprintf+0x3e8>
   165ac:	9a 81       	ldd	r25, Y+2	; 0x02
   165ae:	96 33       	cpi	r25, 0x36	; 54
   165b0:	20 f4       	brcc	.+8      	; 0x165ba <vfprintf+0x3e6>
   165b2:	95 33       	cpi	r25, 0x35	; 53
   165b4:	19 f4       	brne	.+6      	; 0x165bc <vfprintf+0x3e8>
   165b6:	38 89       	ldd	r19, Y+16	; 0x10
   165b8:	34 ff       	sbrs	r19, 4
   165ba:	81 e3       	ldi	r24, 0x31	; 49
   165bc:	90 e0       	ldi	r25, 0x00	; 0
   165be:	49 c0       	rjmp	.+146    	; 0x16652 <vfprintf+0x47e>
   165c0:	8a 81       	ldd	r24, Y+2	; 0x02
   165c2:	81 33       	cpi	r24, 0x31	; 49
   165c4:	11 f0       	breq	.+4      	; 0x165ca <vfprintf+0x3f6>
   165c6:	9f ee       	ldi	r25, 0xEF	; 239
   165c8:	c9 22       	and	r12, r25
   165ca:	90 e0       	ldi	r25, 0x00	; 0
   165cc:	b4 01       	movw	r22, r8
   165ce:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   165d2:	ff 20       	and	r15, r15
   165d4:	89 f0       	breq	.+34     	; 0x165f8 <vfprintf+0x424>
   165d6:	8e e2       	ldi	r24, 0x2E	; 46
   165d8:	90 e0       	ldi	r25, 0x00	; 0
   165da:	b4 01       	movw	r22, r8
   165dc:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   165e0:	12 e0       	ldi	r17, 0x02	; 2
   165e2:	f1 01       	movw	r30, r2
   165e4:	e1 0f       	add	r30, r17
   165e6:	f1 1d       	adc	r31, r1
   165e8:	1f 5f       	subi	r17, 0xFF	; 255
   165ea:	80 81       	ld	r24, Z
   165ec:	90 e0       	ldi	r25, 0x00	; 0
   165ee:	b4 01       	movw	r22, r8
   165f0:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   165f4:	fa 94       	dec	r15
   165f6:	a9 f7       	brne	.-22     	; 0x165e2 <vfprintf+0x40e>
   165f8:	64 fe       	sbrs	r6, 4
   165fa:	03 c0       	rjmp	.+6      	; 0x16602 <vfprintf+0x42e>
   165fc:	85 e4       	ldi	r24, 0x45	; 69
   165fe:	90 e0       	ldi	r25, 0x00	; 0
   16600:	02 c0       	rjmp	.+4      	; 0x16606 <vfprintf+0x432>
   16602:	85 e6       	ldi	r24, 0x65	; 101
   16604:	90 e0       	ldi	r25, 0x00	; 0
   16606:	b4 01       	movw	r22, r8
   16608:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   1660c:	b7 fc       	sbrc	r11, 7
   1660e:	05 c0       	rjmp	.+10     	; 0x1661a <vfprintf+0x446>
   16610:	a1 14       	cp	r10, r1
   16612:	b1 04       	cpc	r11, r1
   16614:	41 f4       	brne	.+16     	; 0x16626 <vfprintf+0x452>
   16616:	c4 fe       	sbrs	r12, 4
   16618:	06 c0       	rjmp	.+12     	; 0x16626 <vfprintf+0x452>
   1661a:	b0 94       	com	r11
   1661c:	a1 94       	neg	r10
   1661e:	b1 08       	sbc	r11, r1
   16620:	b3 94       	inc	r11
   16622:	8d e2       	ldi	r24, 0x2D	; 45
   16624:	01 c0       	rjmp	.+2      	; 0x16628 <vfprintf+0x454>
   16626:	8b e2       	ldi	r24, 0x2B	; 43
   16628:	90 e0       	ldi	r25, 0x00	; 0
   1662a:	b4 01       	movw	r22, r8
   1662c:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16630:	80 e3       	ldi	r24, 0x30	; 48
   16632:	05 c0       	rjmp	.+10     	; 0x1663e <vfprintf+0x46a>
   16634:	8f 5f       	subi	r24, 0xFF	; 255
   16636:	e6 ef       	ldi	r30, 0xF6	; 246
   16638:	ff ef       	ldi	r31, 0xFF	; 255
   1663a:	ae 0e       	add	r10, r30
   1663c:	bf 1e       	adc	r11, r31
   1663e:	fa e0       	ldi	r31, 0x0A	; 10
   16640:	af 16       	cp	r10, r31
   16642:	b1 04       	cpc	r11, r1
   16644:	bc f7       	brge	.-18     	; 0x16634 <vfprintf+0x460>
   16646:	90 e0       	ldi	r25, 0x00	; 0
   16648:	b4 01       	movw	r22, r8
   1664a:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   1664e:	c5 01       	movw	r24, r10
   16650:	c0 96       	adiw	r24, 0x30	; 48
   16652:	b4 01       	movw	r22, r8
   16654:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16658:	4d c1       	rjmp	.+666    	; 0x168f4 <vfprintf+0x720>
   1665a:	83 36       	cpi	r24, 0x63	; 99
   1665c:	31 f0       	breq	.+12     	; 0x1666a <vfprintf+0x496>
   1665e:	83 37       	cpi	r24, 0x73	; 115
   16660:	89 f0       	breq	.+34     	; 0x16684 <vfprintf+0x4b0>
   16662:	83 35       	cpi	r24, 0x53	; 83
   16664:	09 f0       	breq	.+2      	; 0x16668 <vfprintf+0x494>
   16666:	59 c0       	rjmp	.+178    	; 0x1671a <vfprintf+0x546>
   16668:	22 c0       	rjmp	.+68     	; 0x166ae <vfprintf+0x4da>
   1666a:	9a 01       	movw	r18, r20
   1666c:	2e 5f       	subi	r18, 0xFE	; 254
   1666e:	3f 4f       	sbci	r19, 0xFF	; 255
   16670:	2c 87       	std	Y+12, r18	; 0x0c
   16672:	3d 87       	std	Y+13, r19	; 0x0d
   16674:	fa 01       	movw	r30, r20
   16676:	80 81       	ld	r24, Z
   16678:	89 83       	std	Y+1, r24	; 0x01
   1667a:	81 e0       	ldi	r24, 0x01	; 1
   1667c:	e8 2e       	mov	r14, r24
   1667e:	f1 2c       	mov	r15, r1
   16680:	51 01       	movw	r10, r2
   16682:	13 c0       	rjmp	.+38     	; 0x166aa <vfprintf+0x4d6>
   16684:	9a 01       	movw	r18, r20
   16686:	2e 5f       	subi	r18, 0xFE	; 254
   16688:	3f 4f       	sbci	r19, 0xFF	; 255
   1668a:	2c 87       	std	Y+12, r18	; 0x0c
   1668c:	3d 87       	std	Y+13, r19	; 0x0d
   1668e:	fa 01       	movw	r30, r20
   16690:	a0 80       	ld	r10, Z
   16692:	b1 80       	ldd	r11, Z+1	; 0x01
   16694:	16 ff       	sbrs	r17, 6
   16696:	03 c0       	rjmp	.+6      	; 0x1669e <vfprintf+0x4ca>
   16698:	6f 2d       	mov	r22, r15
   1669a:	70 e0       	ldi	r23, 0x00	; 0
   1669c:	02 c0       	rjmp	.+4      	; 0x166a2 <vfprintf+0x4ce>
   1669e:	6f ef       	ldi	r22, 0xFF	; 255
   166a0:	7f ef       	ldi	r23, 0xFF	; 255
   166a2:	c5 01       	movw	r24, r10
   166a4:	0e 94 3e b7 	call	0x16e7c	; 0x16e7c <strnlen>
   166a8:	7c 01       	movw	r14, r24
   166aa:	1f 77       	andi	r17, 0x7F	; 127
   166ac:	14 c0       	rjmp	.+40     	; 0x166d6 <vfprintf+0x502>
   166ae:	9a 01       	movw	r18, r20
   166b0:	2e 5f       	subi	r18, 0xFE	; 254
   166b2:	3f 4f       	sbci	r19, 0xFF	; 255
   166b4:	2c 87       	std	Y+12, r18	; 0x0c
   166b6:	3d 87       	std	Y+13, r19	; 0x0d
   166b8:	fa 01       	movw	r30, r20
   166ba:	a0 80       	ld	r10, Z
   166bc:	b1 80       	ldd	r11, Z+1	; 0x01
   166be:	16 ff       	sbrs	r17, 6
   166c0:	03 c0       	rjmp	.+6      	; 0x166c8 <vfprintf+0x4f4>
   166c2:	6f 2d       	mov	r22, r15
   166c4:	70 e0       	ldi	r23, 0x00	; 0
   166c6:	02 c0       	rjmp	.+4      	; 0x166cc <vfprintf+0x4f8>
   166c8:	6f ef       	ldi	r22, 0xFF	; 255
   166ca:	7f ef       	ldi	r23, 0xFF	; 255
   166cc:	c5 01       	movw	r24, r10
   166ce:	0e 94 d4 b6 	call	0x16da8	; 0x16da8 <strnlen_P>
   166d2:	7c 01       	movw	r14, r24
   166d4:	10 68       	ori	r17, 0x80	; 128
   166d6:	13 fd       	sbrc	r17, 3
   166d8:	1c c0       	rjmp	.+56     	; 0x16712 <vfprintf+0x53e>
   166da:	06 c0       	rjmp	.+12     	; 0x166e8 <vfprintf+0x514>
   166dc:	80 e2       	ldi	r24, 0x20	; 32
   166de:	90 e0       	ldi	r25, 0x00	; 0
   166e0:	b4 01       	movw	r22, r8
   166e2:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   166e6:	da 94       	dec	r13
   166e8:	8d 2d       	mov	r24, r13
   166ea:	90 e0       	ldi	r25, 0x00	; 0
   166ec:	e8 16       	cp	r14, r24
   166ee:	f9 06       	cpc	r15, r25
   166f0:	a8 f3       	brcs	.-22     	; 0x166dc <vfprintf+0x508>
   166f2:	0f c0       	rjmp	.+30     	; 0x16712 <vfprintf+0x53e>
   166f4:	f5 01       	movw	r30, r10
   166f6:	17 fd       	sbrc	r17, 7
   166f8:	85 91       	lpm	r24, Z+
   166fa:	17 ff       	sbrs	r17, 7
   166fc:	81 91       	ld	r24, Z+
   166fe:	5f 01       	movw	r10, r30
   16700:	90 e0       	ldi	r25, 0x00	; 0
   16702:	b4 01       	movw	r22, r8
   16704:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   16708:	d1 10       	cpse	r13, r1
   1670a:	da 94       	dec	r13
   1670c:	08 94       	sec
   1670e:	e1 08       	sbc	r14, r1
   16710:	f1 08       	sbc	r15, r1
   16712:	e1 14       	cp	r14, r1
   16714:	f1 04       	cpc	r15, r1
   16716:	71 f7       	brne	.-36     	; 0x166f4 <vfprintf+0x520>
   16718:	ed c0       	rjmp	.+474    	; 0x168f4 <vfprintf+0x720>
   1671a:	84 36       	cpi	r24, 0x64	; 100
   1671c:	11 f0       	breq	.+4      	; 0x16722 <vfprintf+0x54e>
   1671e:	89 36       	cpi	r24, 0x69	; 105
   16720:	71 f5       	brne	.+92     	; 0x1677e <vfprintf+0x5aa>
   16722:	9a 01       	movw	r18, r20
   16724:	17 ff       	sbrs	r17, 7
   16726:	0a c0       	rjmp	.+20     	; 0x1673c <vfprintf+0x568>
   16728:	2c 5f       	subi	r18, 0xFC	; 252
   1672a:	3f 4f       	sbci	r19, 0xFF	; 255
   1672c:	2c 87       	std	Y+12, r18	; 0x0c
   1672e:	3d 87       	std	Y+13, r19	; 0x0d
   16730:	fa 01       	movw	r30, r20
   16732:	80 81       	ld	r24, Z
   16734:	91 81       	ldd	r25, Z+1	; 0x01
   16736:	a2 81       	ldd	r26, Z+2	; 0x02
   16738:	b3 81       	ldd	r27, Z+3	; 0x03
   1673a:	0b c0       	rjmp	.+22     	; 0x16752 <vfprintf+0x57e>
   1673c:	2e 5f       	subi	r18, 0xFE	; 254
   1673e:	3f 4f       	sbci	r19, 0xFF	; 255
   16740:	2c 87       	std	Y+12, r18	; 0x0c
   16742:	3d 87       	std	Y+13, r19	; 0x0d
   16744:	fa 01       	movw	r30, r20
   16746:	80 81       	ld	r24, Z
   16748:	91 81       	ldd	r25, Z+1	; 0x01
   1674a:	aa 27       	eor	r26, r26
   1674c:	97 fd       	sbrc	r25, 7
   1674e:	a0 95       	com	r26
   16750:	ba 2f       	mov	r27, r26
   16752:	01 2f       	mov	r16, r17
   16754:	0f 76       	andi	r16, 0x6F	; 111
   16756:	b7 ff       	sbrs	r27, 7
   16758:	08 c0       	rjmp	.+16     	; 0x1676a <vfprintf+0x596>
   1675a:	b0 95       	com	r27
   1675c:	a0 95       	com	r26
   1675e:	90 95       	com	r25
   16760:	81 95       	neg	r24
   16762:	9f 4f       	sbci	r25, 0xFF	; 255
   16764:	af 4f       	sbci	r26, 0xFF	; 255
   16766:	bf 4f       	sbci	r27, 0xFF	; 255
   16768:	00 68       	ori	r16, 0x80	; 128
   1676a:	bc 01       	movw	r22, r24
   1676c:	cd 01       	movw	r24, r26
   1676e:	a1 01       	movw	r20, r2
   16770:	2a e0       	ldi	r18, 0x0A	; 10
   16772:	30 e0       	ldi	r19, 0x00	; 0
   16774:	0e 94 f6 b7 	call	0x16fec	; 0x16fec <__ultoa_invert>
   16778:	e8 2e       	mov	r14, r24
   1677a:	e2 18       	sub	r14, r2
   1677c:	41 c0       	rjmp	.+130    	; 0x16800 <vfprintf+0x62c>
   1677e:	85 37       	cpi	r24, 0x75	; 117
   16780:	21 f4       	brne	.+8      	; 0x1678a <vfprintf+0x5b6>
   16782:	1f 7e       	andi	r17, 0xEF	; 239
   16784:	2a e0       	ldi	r18, 0x0A	; 10
   16786:	30 e0       	ldi	r19, 0x00	; 0
   16788:	20 c0       	rjmp	.+64     	; 0x167ca <vfprintf+0x5f6>
   1678a:	19 7f       	andi	r17, 0xF9	; 249
   1678c:	8f 36       	cpi	r24, 0x6F	; 111
   1678e:	a9 f0       	breq	.+42     	; 0x167ba <vfprintf+0x5e6>
   16790:	80 37       	cpi	r24, 0x70	; 112
   16792:	20 f4       	brcc	.+8      	; 0x1679c <vfprintf+0x5c8>
   16794:	88 35       	cpi	r24, 0x58	; 88
   16796:	09 f0       	breq	.+2      	; 0x1679a <vfprintf+0x5c6>
   16798:	b0 c0       	rjmp	.+352    	; 0x168fa <vfprintf+0x726>
   1679a:	0b c0       	rjmp	.+22     	; 0x167b2 <vfprintf+0x5de>
   1679c:	80 37       	cpi	r24, 0x70	; 112
   1679e:	21 f0       	breq	.+8      	; 0x167a8 <vfprintf+0x5d4>
   167a0:	88 37       	cpi	r24, 0x78	; 120
   167a2:	09 f0       	breq	.+2      	; 0x167a6 <vfprintf+0x5d2>
   167a4:	aa c0       	rjmp	.+340    	; 0x168fa <vfprintf+0x726>
   167a6:	01 c0       	rjmp	.+2      	; 0x167aa <vfprintf+0x5d6>
   167a8:	10 61       	ori	r17, 0x10	; 16
   167aa:	14 ff       	sbrs	r17, 4
   167ac:	09 c0       	rjmp	.+18     	; 0x167c0 <vfprintf+0x5ec>
   167ae:	14 60       	ori	r17, 0x04	; 4
   167b0:	07 c0       	rjmp	.+14     	; 0x167c0 <vfprintf+0x5ec>
   167b2:	14 ff       	sbrs	r17, 4
   167b4:	08 c0       	rjmp	.+16     	; 0x167c6 <vfprintf+0x5f2>
   167b6:	16 60       	ori	r17, 0x06	; 6
   167b8:	06 c0       	rjmp	.+12     	; 0x167c6 <vfprintf+0x5f2>
   167ba:	28 e0       	ldi	r18, 0x08	; 8
   167bc:	30 e0       	ldi	r19, 0x00	; 0
   167be:	05 c0       	rjmp	.+10     	; 0x167ca <vfprintf+0x5f6>
   167c0:	20 e1       	ldi	r18, 0x10	; 16
   167c2:	30 e0       	ldi	r19, 0x00	; 0
   167c4:	02 c0       	rjmp	.+4      	; 0x167ca <vfprintf+0x5f6>
   167c6:	20 e1       	ldi	r18, 0x10	; 16
   167c8:	32 e0       	ldi	r19, 0x02	; 2
   167ca:	ca 01       	movw	r24, r20
   167cc:	17 ff       	sbrs	r17, 7
   167ce:	09 c0       	rjmp	.+18     	; 0x167e2 <vfprintf+0x60e>
   167d0:	04 96       	adiw	r24, 0x04	; 4
   167d2:	8c 87       	std	Y+12, r24	; 0x0c
   167d4:	9d 87       	std	Y+13, r25	; 0x0d
   167d6:	fa 01       	movw	r30, r20
   167d8:	60 81       	ld	r22, Z
   167da:	71 81       	ldd	r23, Z+1	; 0x01
   167dc:	82 81       	ldd	r24, Z+2	; 0x02
   167de:	93 81       	ldd	r25, Z+3	; 0x03
   167e0:	08 c0       	rjmp	.+16     	; 0x167f2 <vfprintf+0x61e>
   167e2:	02 96       	adiw	r24, 0x02	; 2
   167e4:	8c 87       	std	Y+12, r24	; 0x0c
   167e6:	9d 87       	std	Y+13, r25	; 0x0d
   167e8:	fa 01       	movw	r30, r20
   167ea:	60 81       	ld	r22, Z
   167ec:	71 81       	ldd	r23, Z+1	; 0x01
   167ee:	80 e0       	ldi	r24, 0x00	; 0
   167f0:	90 e0       	ldi	r25, 0x00	; 0
   167f2:	a1 01       	movw	r20, r2
   167f4:	0e 94 f6 b7 	call	0x16fec	; 0x16fec <__ultoa_invert>
   167f8:	e8 2e       	mov	r14, r24
   167fa:	e2 18       	sub	r14, r2
   167fc:	01 2f       	mov	r16, r17
   167fe:	0f 77       	andi	r16, 0x7F	; 127
   16800:	06 ff       	sbrs	r16, 6
   16802:	09 c0       	rjmp	.+18     	; 0x16816 <vfprintf+0x642>
   16804:	0e 7f       	andi	r16, 0xFE	; 254
   16806:	ef 14       	cp	r14, r15
   16808:	30 f4       	brcc	.+12     	; 0x16816 <vfprintf+0x642>
   1680a:	04 ff       	sbrs	r16, 4
   1680c:	06 c0       	rjmp	.+12     	; 0x1681a <vfprintf+0x646>
   1680e:	02 fd       	sbrc	r16, 2
   16810:	04 c0       	rjmp	.+8      	; 0x1681a <vfprintf+0x646>
   16812:	0f 7e       	andi	r16, 0xEF	; 239
   16814:	02 c0       	rjmp	.+4      	; 0x1681a <vfprintf+0x646>
   16816:	1e 2d       	mov	r17, r14
   16818:	01 c0       	rjmp	.+2      	; 0x1681c <vfprintf+0x648>
   1681a:	1f 2d       	mov	r17, r15
   1681c:	80 2f       	mov	r24, r16
   1681e:	90 e0       	ldi	r25, 0x00	; 0
   16820:	04 ff       	sbrs	r16, 4
   16822:	0c c0       	rjmp	.+24     	; 0x1683c <vfprintf+0x668>
   16824:	fe 01       	movw	r30, r28
   16826:	ee 0d       	add	r30, r14
   16828:	f1 1d       	adc	r31, r1
   1682a:	20 81       	ld	r18, Z
   1682c:	20 33       	cpi	r18, 0x30	; 48
   1682e:	11 f4       	brne	.+4      	; 0x16834 <vfprintf+0x660>
   16830:	09 7e       	andi	r16, 0xE9	; 233
   16832:	09 c0       	rjmp	.+18     	; 0x16846 <vfprintf+0x672>
   16834:	02 ff       	sbrs	r16, 2
   16836:	06 c0       	rjmp	.+12     	; 0x16844 <vfprintf+0x670>
   16838:	1e 5f       	subi	r17, 0xFE	; 254
   1683a:	05 c0       	rjmp	.+10     	; 0x16846 <vfprintf+0x672>
   1683c:	86 78       	andi	r24, 0x86	; 134
   1683e:	90 70       	andi	r25, 0x00	; 0
   16840:	00 97       	sbiw	r24, 0x00	; 0
   16842:	09 f0       	breq	.+2      	; 0x16846 <vfprintf+0x672>
   16844:	1f 5f       	subi	r17, 0xFF	; 255
   16846:	a0 2e       	mov	r10, r16
   16848:	bb 24       	eor	r11, r11
   1684a:	03 fd       	sbrc	r16, 3
   1684c:	12 c0       	rjmp	.+36     	; 0x16872 <vfprintf+0x69e>
   1684e:	00 ff       	sbrs	r16, 0
   16850:	0d c0       	rjmp	.+26     	; 0x1686c <vfprintf+0x698>
   16852:	fe 2c       	mov	r15, r14
   16854:	1d 15       	cp	r17, r13
   16856:	50 f4       	brcc	.+20     	; 0x1686c <vfprintf+0x698>
   16858:	fd 0c       	add	r15, r13
   1685a:	f1 1a       	sub	r15, r17
   1685c:	1d 2d       	mov	r17, r13
   1685e:	06 c0       	rjmp	.+12     	; 0x1686c <vfprintf+0x698>
   16860:	80 e2       	ldi	r24, 0x20	; 32
   16862:	90 e0       	ldi	r25, 0x00	; 0
   16864:	b4 01       	movw	r22, r8
   16866:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   1686a:	1f 5f       	subi	r17, 0xFF	; 255
   1686c:	1d 15       	cp	r17, r13
   1686e:	c0 f3       	brcs	.-16     	; 0x16860 <vfprintf+0x68c>
   16870:	04 c0       	rjmp	.+8      	; 0x1687a <vfprintf+0x6a6>
   16872:	1d 15       	cp	r17, r13
   16874:	10 f4       	brcc	.+4      	; 0x1687a <vfprintf+0x6a6>
   16876:	d1 1a       	sub	r13, r17
   16878:	01 c0       	rjmp	.+2      	; 0x1687c <vfprintf+0x6a8>
   1687a:	dd 24       	eor	r13, r13
   1687c:	a4 fe       	sbrs	r10, 4
   1687e:	0f c0       	rjmp	.+30     	; 0x1689e <vfprintf+0x6ca>
   16880:	80 e3       	ldi	r24, 0x30	; 48
   16882:	90 e0       	ldi	r25, 0x00	; 0
   16884:	b4 01       	movw	r22, r8
   16886:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   1688a:	a2 fe       	sbrs	r10, 2
   1688c:	1f c0       	rjmp	.+62     	; 0x168cc <vfprintf+0x6f8>
   1688e:	a1 fe       	sbrs	r10, 1
   16890:	03 c0       	rjmp	.+6      	; 0x16898 <vfprintf+0x6c4>
   16892:	88 e5       	ldi	r24, 0x58	; 88
   16894:	90 e0       	ldi	r25, 0x00	; 0
   16896:	10 c0       	rjmp	.+32     	; 0x168b8 <vfprintf+0x6e4>
   16898:	88 e7       	ldi	r24, 0x78	; 120
   1689a:	90 e0       	ldi	r25, 0x00	; 0
   1689c:	0d c0       	rjmp	.+26     	; 0x168b8 <vfprintf+0x6e4>
   1689e:	c5 01       	movw	r24, r10
   168a0:	86 78       	andi	r24, 0x86	; 134
   168a2:	90 70       	andi	r25, 0x00	; 0
   168a4:	00 97       	sbiw	r24, 0x00	; 0
   168a6:	91 f0       	breq	.+36     	; 0x168cc <vfprintf+0x6f8>
   168a8:	a1 fc       	sbrc	r10, 1
   168aa:	02 c0       	rjmp	.+4      	; 0x168b0 <vfprintf+0x6dc>
   168ac:	80 e2       	ldi	r24, 0x20	; 32
   168ae:	01 c0       	rjmp	.+2      	; 0x168b2 <vfprintf+0x6de>
   168b0:	8b e2       	ldi	r24, 0x2B	; 43
   168b2:	07 fd       	sbrc	r16, 7
   168b4:	8d e2       	ldi	r24, 0x2D	; 45
   168b6:	90 e0       	ldi	r25, 0x00	; 0
   168b8:	b4 01       	movw	r22, r8
   168ba:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   168be:	06 c0       	rjmp	.+12     	; 0x168cc <vfprintf+0x6f8>
   168c0:	80 e3       	ldi	r24, 0x30	; 48
   168c2:	90 e0       	ldi	r25, 0x00	; 0
   168c4:	b4 01       	movw	r22, r8
   168c6:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   168ca:	fa 94       	dec	r15
   168cc:	ef 14       	cp	r14, r15
   168ce:	c0 f3       	brcs	.-16     	; 0x168c0 <vfprintf+0x6ec>
   168d0:	ea 94       	dec	r14
   168d2:	f1 01       	movw	r30, r2
   168d4:	ee 0d       	add	r30, r14
   168d6:	f1 1d       	adc	r31, r1
   168d8:	80 81       	ld	r24, Z
   168da:	90 e0       	ldi	r25, 0x00	; 0
   168dc:	b4 01       	movw	r22, r8
   168de:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   168e2:	ee 20       	and	r14, r14
   168e4:	a9 f7       	brne	.-22     	; 0x168d0 <vfprintf+0x6fc>
   168e6:	06 c0       	rjmp	.+12     	; 0x168f4 <vfprintf+0x720>
   168e8:	80 e2       	ldi	r24, 0x20	; 32
   168ea:	90 e0       	ldi	r25, 0x00	; 0
   168ec:	b4 01       	movw	r22, r8
   168ee:	0e 94 78 b7 	call	0x16ef0	; 0x16ef0 <fputc>
   168f2:	da 94       	dec	r13
   168f4:	dd 20       	and	r13, r13
   168f6:	c1 f7       	brne	.-16     	; 0x168e8 <vfprintf+0x714>
   168f8:	8e cc       	rjmp	.-1764   	; 0x16216 <vfprintf+0x42>
   168fa:	f4 01       	movw	r30, r8
   168fc:	86 81       	ldd	r24, Z+6	; 0x06
   168fe:	97 81       	ldd	r25, Z+7	; 0x07
   16900:	02 c0       	rjmp	.+4      	; 0x16906 <vfprintf+0x732>
   16902:	8f ef       	ldi	r24, 0xFF	; 255
   16904:	9f ef       	ldi	r25, 0xFF	; 255
   16906:	65 96       	adiw	r28, 0x15	; 21
   16908:	cd bf       	out	0x3d, r28	; 61
   1690a:	de bf       	out	0x3e, r29	; 62
   1690c:	df 91       	pop	r29
   1690e:	cf 91       	pop	r28
   16910:	1f 91       	pop	r17
   16912:	0f 91       	pop	r16
   16914:	ff 90       	pop	r15
   16916:	ef 90       	pop	r14
   16918:	df 90       	pop	r13
   1691a:	cf 90       	pop	r12
   1691c:	bf 90       	pop	r11
   1691e:	af 90       	pop	r10
   16920:	9f 90       	pop	r9
   16922:	8f 90       	pop	r8
   16924:	7f 90       	pop	r7
   16926:	6f 90       	pop	r6
   16928:	5f 90       	pop	r5
   1692a:	4f 90       	pop	r4
   1692c:	3f 90       	pop	r3
   1692e:	2f 90       	pop	r2
   16930:	08 95       	ret

00016932 <malloc>:
   16932:	cf 93       	push	r28
   16934:	df 93       	push	r29
   16936:	ac 01       	movw	r20, r24
   16938:	82 30       	cpi	r24, 0x02	; 2
   1693a:	91 05       	cpc	r25, r1
   1693c:	10 f4       	brcc	.+4      	; 0x16942 <malloc+0x10>
   1693e:	42 e0       	ldi	r20, 0x02	; 2
   16940:	50 e0       	ldi	r21, 0x00	; 0
   16942:	e0 91 ca 27 	lds	r30, 0x27CA
   16946:	f0 91 cb 27 	lds	r31, 0x27CB
   1694a:	20 e0       	ldi	r18, 0x00	; 0
   1694c:	30 e0       	ldi	r19, 0x00	; 0
   1694e:	a0 e0       	ldi	r26, 0x00	; 0
   16950:	b0 e0       	ldi	r27, 0x00	; 0
   16952:	24 c0       	rjmp	.+72     	; 0x1699c <malloc+0x6a>
   16954:	80 81       	ld	r24, Z
   16956:	91 81       	ldd	r25, Z+1	; 0x01
   16958:	84 17       	cp	r24, r20
   1695a:	95 07       	cpc	r25, r21
   1695c:	d0 f0       	brcs	.+52     	; 0x16992 <malloc+0x60>
   1695e:	84 17       	cp	r24, r20
   16960:	95 07       	cpc	r25, r21
   16962:	71 f4       	brne	.+28     	; 0x16980 <malloc+0x4e>
   16964:	82 81       	ldd	r24, Z+2	; 0x02
   16966:	93 81       	ldd	r25, Z+3	; 0x03
   16968:	10 97       	sbiw	r26, 0x00	; 0
   1696a:	29 f0       	breq	.+10     	; 0x16976 <malloc+0x44>
   1696c:	12 96       	adiw	r26, 0x02	; 2
   1696e:	8d 93       	st	X+, r24
   16970:	9c 93       	st	X, r25
   16972:	13 97       	sbiw	r26, 0x03	; 3
   16974:	2c c0       	rjmp	.+88     	; 0x169ce <malloc+0x9c>
   16976:	80 93 ca 27 	sts	0x27CA, r24
   1697a:	90 93 cb 27 	sts	0x27CB, r25
   1697e:	27 c0       	rjmp	.+78     	; 0x169ce <malloc+0x9c>
   16980:	21 15       	cp	r18, r1
   16982:	31 05       	cpc	r19, r1
   16984:	19 f0       	breq	.+6      	; 0x1698c <malloc+0x5a>
   16986:	82 17       	cp	r24, r18
   16988:	93 07       	cpc	r25, r19
   1698a:	18 f4       	brcc	.+6      	; 0x16992 <malloc+0x60>
   1698c:	9c 01       	movw	r18, r24
   1698e:	bd 01       	movw	r22, r26
   16990:	ef 01       	movw	r28, r30
   16992:	92 81       	ldd	r25, Z+2	; 0x02
   16994:	83 81       	ldd	r24, Z+3	; 0x03
   16996:	df 01       	movw	r26, r30
   16998:	e9 2f       	mov	r30, r25
   1699a:	f8 2f       	mov	r31, r24
   1699c:	30 97       	sbiw	r30, 0x00	; 0
   1699e:	d1 f6       	brne	.-76     	; 0x16954 <malloc+0x22>
   169a0:	21 15       	cp	r18, r1
   169a2:	31 05       	cpc	r19, r1
   169a4:	f9 f0       	breq	.+62     	; 0x169e4 <malloc+0xb2>
   169a6:	c9 01       	movw	r24, r18
   169a8:	84 1b       	sub	r24, r20
   169aa:	95 0b       	sbc	r25, r21
   169ac:	84 30       	cpi	r24, 0x04	; 4
   169ae:	91 05       	cpc	r25, r1
   169b0:	80 f4       	brcc	.+32     	; 0x169d2 <malloc+0xa0>
   169b2:	8a 81       	ldd	r24, Y+2	; 0x02
   169b4:	9b 81       	ldd	r25, Y+3	; 0x03
   169b6:	61 15       	cp	r22, r1
   169b8:	71 05       	cpc	r23, r1
   169ba:	21 f0       	breq	.+8      	; 0x169c4 <malloc+0x92>
   169bc:	fb 01       	movw	r30, r22
   169be:	82 83       	std	Z+2, r24	; 0x02
   169c0:	93 83       	std	Z+3, r25	; 0x03
   169c2:	04 c0       	rjmp	.+8      	; 0x169cc <malloc+0x9a>
   169c4:	80 93 ca 27 	sts	0x27CA, r24
   169c8:	90 93 cb 27 	sts	0x27CB, r25
   169cc:	fe 01       	movw	r30, r28
   169ce:	32 96       	adiw	r30, 0x02	; 2
   169d0:	42 c0       	rjmp	.+132    	; 0x16a56 <malloc+0x124>
   169d2:	fe 01       	movw	r30, r28
   169d4:	e8 0f       	add	r30, r24
   169d6:	f9 1f       	adc	r31, r25
   169d8:	41 93       	st	Z+, r20
   169da:	51 93       	st	Z+, r21
   169dc:	02 97       	sbiw	r24, 0x02	; 2
   169de:	88 83       	st	Y, r24
   169e0:	99 83       	std	Y+1, r25	; 0x01
   169e2:	39 c0       	rjmp	.+114    	; 0x16a56 <malloc+0x124>
   169e4:	80 91 c8 27 	lds	r24, 0x27C8
   169e8:	90 91 c9 27 	lds	r25, 0x27C9
   169ec:	00 97       	sbiw	r24, 0x00	; 0
   169ee:	41 f4       	brne	.+16     	; 0x16a00 <malloc+0xce>
   169f0:	80 91 42 24 	lds	r24, 0x2442
   169f4:	90 91 43 24 	lds	r25, 0x2443
   169f8:	80 93 c8 27 	sts	0x27C8, r24
   169fc:	90 93 c9 27 	sts	0x27C9, r25
   16a00:	20 91 40 24 	lds	r18, 0x2440
   16a04:	30 91 41 24 	lds	r19, 0x2441
   16a08:	21 15       	cp	r18, r1
   16a0a:	31 05       	cpc	r19, r1
   16a0c:	41 f4       	brne	.+16     	; 0x16a1e <malloc+0xec>
   16a0e:	2d b7       	in	r18, 0x3d	; 61
   16a10:	3e b7       	in	r19, 0x3e	; 62
   16a12:	80 91 44 24 	lds	r24, 0x2444
   16a16:	90 91 45 24 	lds	r25, 0x2445
   16a1a:	28 1b       	sub	r18, r24
   16a1c:	39 0b       	sbc	r19, r25
   16a1e:	e0 91 c8 27 	lds	r30, 0x27C8
   16a22:	f0 91 c9 27 	lds	r31, 0x27C9
   16a26:	e2 17       	cp	r30, r18
   16a28:	f3 07       	cpc	r31, r19
   16a2a:	98 f4       	brcc	.+38     	; 0x16a52 <malloc+0x120>
   16a2c:	2e 1b       	sub	r18, r30
   16a2e:	3f 0b       	sbc	r19, r31
   16a30:	24 17       	cp	r18, r20
   16a32:	35 07       	cpc	r19, r21
   16a34:	70 f0       	brcs	.+28     	; 0x16a52 <malloc+0x120>
   16a36:	ca 01       	movw	r24, r20
   16a38:	02 96       	adiw	r24, 0x02	; 2
   16a3a:	28 17       	cp	r18, r24
   16a3c:	39 07       	cpc	r19, r25
   16a3e:	48 f0       	brcs	.+18     	; 0x16a52 <malloc+0x120>
   16a40:	8e 0f       	add	r24, r30
   16a42:	9f 1f       	adc	r25, r31
   16a44:	80 93 c8 27 	sts	0x27C8, r24
   16a48:	90 93 c9 27 	sts	0x27C9, r25
   16a4c:	41 93       	st	Z+, r20
   16a4e:	51 93       	st	Z+, r21
   16a50:	02 c0       	rjmp	.+4      	; 0x16a56 <malloc+0x124>
   16a52:	e0 e0       	ldi	r30, 0x00	; 0
   16a54:	f0 e0       	ldi	r31, 0x00	; 0
   16a56:	cf 01       	movw	r24, r30
   16a58:	df 91       	pop	r29
   16a5a:	cf 91       	pop	r28
   16a5c:	08 95       	ret

00016a5e <free>:
   16a5e:	0f 93       	push	r16
   16a60:	1f 93       	push	r17
   16a62:	cf 93       	push	r28
   16a64:	df 93       	push	r29
   16a66:	9c 01       	movw	r18, r24
   16a68:	00 97       	sbiw	r24, 0x00	; 0
   16a6a:	09 f4       	brne	.+2      	; 0x16a6e <free+0x10>
   16a6c:	8c c0       	rjmp	.+280    	; 0x16b86 <free+0x128>
   16a6e:	dc 01       	movw	r26, r24
   16a70:	12 97       	sbiw	r26, 0x02	; 2
   16a72:	12 96       	adiw	r26, 0x02	; 2
   16a74:	1d 92       	st	X+, r1
   16a76:	1c 92       	st	X, r1
   16a78:	13 97       	sbiw	r26, 0x03	; 3
   16a7a:	60 91 ca 27 	lds	r22, 0x27CA
   16a7e:	70 91 cb 27 	lds	r23, 0x27CB
   16a82:	61 15       	cp	r22, r1
   16a84:	71 05       	cpc	r23, r1
   16a86:	89 f4       	brne	.+34     	; 0x16aaa <free+0x4c>
   16a88:	8d 91       	ld	r24, X+
   16a8a:	9c 91       	ld	r25, X
   16a8c:	11 97       	sbiw	r26, 0x01	; 1
   16a8e:	82 0f       	add	r24, r18
   16a90:	93 1f       	adc	r25, r19
   16a92:	20 91 c8 27 	lds	r18, 0x27C8
   16a96:	30 91 c9 27 	lds	r19, 0x27C9
   16a9a:	28 17       	cp	r18, r24
   16a9c:	39 07       	cpc	r19, r25
   16a9e:	69 f5       	brne	.+90     	; 0x16afa <free+0x9c>
   16aa0:	a0 93 c8 27 	sts	0x27C8, r26
   16aa4:	b0 93 c9 27 	sts	0x27C9, r27
   16aa8:	6e c0       	rjmp	.+220    	; 0x16b86 <free+0x128>
   16aaa:	fb 01       	movw	r30, r22
   16aac:	40 e0       	ldi	r20, 0x00	; 0
   16aae:	50 e0       	ldi	r21, 0x00	; 0
   16ab0:	01 c0       	rjmp	.+2      	; 0x16ab4 <free+0x56>
   16ab2:	fc 01       	movw	r30, r24
   16ab4:	ea 17       	cp	r30, r26
   16ab6:	fb 07       	cpc	r31, r27
   16ab8:	30 f4       	brcc	.+12     	; 0x16ac6 <free+0x68>
   16aba:	82 81       	ldd	r24, Z+2	; 0x02
   16abc:	93 81       	ldd	r25, Z+3	; 0x03
   16abe:	af 01       	movw	r20, r30
   16ac0:	00 97       	sbiw	r24, 0x00	; 0
   16ac2:	b9 f7       	brne	.-18     	; 0x16ab2 <free+0x54>
   16ac4:	1f c0       	rjmp	.+62     	; 0x16b04 <free+0xa6>
   16ac6:	e9 01       	movw	r28, r18
   16ac8:	22 97       	sbiw	r28, 0x02	; 2
   16aca:	ea 83       	std	Y+2, r30	; 0x02
   16acc:	fb 83       	std	Y+3, r31	; 0x03
   16ace:	08 81       	ld	r16, Y
   16ad0:	19 81       	ldd	r17, Y+1	; 0x01
   16ad2:	c9 01       	movw	r24, r18
   16ad4:	80 0f       	add	r24, r16
   16ad6:	91 1f       	adc	r25, r17
   16ad8:	8e 17       	cp	r24, r30
   16ada:	9f 07       	cpc	r25, r31
   16adc:	59 f4       	brne	.+22     	; 0x16af4 <free+0x96>
   16ade:	80 81       	ld	r24, Z
   16ae0:	91 81       	ldd	r25, Z+1	; 0x01
   16ae2:	80 0f       	add	r24, r16
   16ae4:	91 1f       	adc	r25, r17
   16ae6:	02 96       	adiw	r24, 0x02	; 2
   16ae8:	88 83       	st	Y, r24
   16aea:	99 83       	std	Y+1, r25	; 0x01
   16aec:	82 81       	ldd	r24, Z+2	; 0x02
   16aee:	93 81       	ldd	r25, Z+3	; 0x03
   16af0:	8a 83       	std	Y+2, r24	; 0x02
   16af2:	9b 83       	std	Y+3, r25	; 0x03
   16af4:	41 15       	cp	r20, r1
   16af6:	51 05       	cpc	r21, r1
   16af8:	29 f4       	brne	.+10     	; 0x16b04 <free+0xa6>
   16afa:	a0 93 ca 27 	sts	0x27CA, r26
   16afe:	b0 93 cb 27 	sts	0x27CB, r27
   16b02:	41 c0       	rjmp	.+130    	; 0x16b86 <free+0x128>
   16b04:	fa 01       	movw	r30, r20
   16b06:	a2 83       	std	Z+2, r26	; 0x02
   16b08:	b3 83       	std	Z+3, r27	; 0x03
   16b0a:	c1 91       	ld	r28, Z+
   16b0c:	d1 91       	ld	r29, Z+
   16b0e:	ec 0f       	add	r30, r28
   16b10:	fd 1f       	adc	r31, r29
   16b12:	ae 17       	cp	r26, r30
   16b14:	bf 07       	cpc	r27, r31
   16b16:	81 f4       	brne	.+32     	; 0x16b38 <free+0xda>
   16b18:	f9 01       	movw	r30, r18
   16b1a:	92 91       	ld	r25, -Z
   16b1c:	82 91       	ld	r24, -Z
   16b1e:	8c 0f       	add	r24, r28
   16b20:	9d 1f       	adc	r25, r29
   16b22:	02 96       	adiw	r24, 0x02	; 2
   16b24:	da 01       	movw	r26, r20
   16b26:	8d 93       	st	X+, r24
   16b28:	9c 93       	st	X, r25
   16b2a:	11 97       	sbiw	r26, 0x01	; 1
   16b2c:	82 81       	ldd	r24, Z+2	; 0x02
   16b2e:	93 81       	ldd	r25, Z+3	; 0x03
   16b30:	12 96       	adiw	r26, 0x02	; 2
   16b32:	8d 93       	st	X+, r24
   16b34:	9c 93       	st	X, r25
   16b36:	13 97       	sbiw	r26, 0x03	; 3
   16b38:	e0 e0       	ldi	r30, 0x00	; 0
   16b3a:	f0 e0       	ldi	r31, 0x00	; 0
   16b3c:	02 c0       	rjmp	.+4      	; 0x16b42 <free+0xe4>
   16b3e:	fb 01       	movw	r30, r22
   16b40:	bc 01       	movw	r22, r24
   16b42:	db 01       	movw	r26, r22
   16b44:	12 96       	adiw	r26, 0x02	; 2
   16b46:	8d 91       	ld	r24, X+
   16b48:	9c 91       	ld	r25, X
   16b4a:	13 97       	sbiw	r26, 0x03	; 3
   16b4c:	00 97       	sbiw	r24, 0x00	; 0
   16b4e:	b9 f7       	brne	.-18     	; 0x16b3e <free+0xe0>
   16b50:	cb 01       	movw	r24, r22
   16b52:	02 96       	adiw	r24, 0x02	; 2
   16b54:	2d 91       	ld	r18, X+
   16b56:	3c 91       	ld	r19, X
   16b58:	11 97       	sbiw	r26, 0x01	; 1
   16b5a:	82 0f       	add	r24, r18
   16b5c:	93 1f       	adc	r25, r19
   16b5e:	20 91 c8 27 	lds	r18, 0x27C8
   16b62:	30 91 c9 27 	lds	r19, 0x27C9
   16b66:	28 17       	cp	r18, r24
   16b68:	39 07       	cpc	r19, r25
   16b6a:	69 f4       	brne	.+26     	; 0x16b86 <free+0x128>
   16b6c:	30 97       	sbiw	r30, 0x00	; 0
   16b6e:	29 f4       	brne	.+10     	; 0x16b7a <free+0x11c>
   16b70:	10 92 ca 27 	sts	0x27CA, r1
   16b74:	10 92 cb 27 	sts	0x27CB, r1
   16b78:	02 c0       	rjmp	.+4      	; 0x16b7e <free+0x120>
   16b7a:	12 82       	std	Z+2, r1	; 0x02
   16b7c:	13 82       	std	Z+3, r1	; 0x03
   16b7e:	60 93 c8 27 	sts	0x27C8, r22
   16b82:	70 93 c9 27 	sts	0x27C9, r23
   16b86:	df 91       	pop	r29
   16b88:	cf 91       	pop	r28
   16b8a:	1f 91       	pop	r17
   16b8c:	0f 91       	pop	r16
   16b8e:	08 95       	ret

00016b90 <atoi>:
   16b90:	fc 01       	movw	r30, r24
   16b92:	88 27       	eor	r24, r24
   16b94:	99 27       	eor	r25, r25
   16b96:	e8 94       	clt
   16b98:	21 91       	ld	r18, Z+
   16b9a:	20 32       	cpi	r18, 0x20	; 32
   16b9c:	e9 f3       	breq	.-6      	; 0x16b98 <atoi+0x8>
   16b9e:	29 30       	cpi	r18, 0x09	; 9
   16ba0:	10 f0       	brcs	.+4      	; 0x16ba6 <atoi+0x16>
   16ba2:	2e 30       	cpi	r18, 0x0E	; 14
   16ba4:	c8 f3       	brcs	.-14     	; 0x16b98 <atoi+0x8>
   16ba6:	2b 32       	cpi	r18, 0x2B	; 43
   16ba8:	41 f0       	breq	.+16     	; 0x16bba <atoi+0x2a>
   16baa:	2d 32       	cpi	r18, 0x2D	; 45
   16bac:	39 f4       	brne	.+14     	; 0x16bbc <atoi+0x2c>
   16bae:	68 94       	set
   16bb0:	04 c0       	rjmp	.+8      	; 0x16bba <atoi+0x2a>
   16bb2:	0e 94 70 b7 	call	0x16ee0	; 0x16ee0 <__mulhi_const_10>
   16bb6:	82 0f       	add	r24, r18
   16bb8:	91 1d       	adc	r25, r1
   16bba:	21 91       	ld	r18, Z+
   16bbc:	20 53       	subi	r18, 0x30	; 48
   16bbe:	2a 30       	cpi	r18, 0x0A	; 10
   16bc0:	c0 f3       	brcs	.-16     	; 0x16bb2 <atoi+0x22>
   16bc2:	1e f4       	brtc	.+6      	; 0x16bca <atoi+0x3a>
   16bc4:	90 95       	com	r25
   16bc6:	81 95       	neg	r24
   16bc8:	9f 4f       	sbci	r25, 0xFF	; 255
   16bca:	08 95       	ret

00016bcc <exit>:
   16bcc:	f8 94       	cli
   16bce:	0c 94 b4 b8 	jmp	0x17168	; 0x17168 <_exit>

00016bd2 <__ftoa_engine>:
   16bd2:	28 30       	cpi	r18, 0x08	; 8
   16bd4:	08 f0       	brcs	.+2      	; 0x16bd8 <__ftoa_engine+0x6>
   16bd6:	27 e0       	ldi	r18, 0x07	; 7
   16bd8:	33 27       	eor	r19, r19
   16bda:	da 01       	movw	r26, r20
   16bdc:	99 0f       	add	r25, r25
   16bde:	31 1d       	adc	r19, r1
   16be0:	87 fd       	sbrc	r24, 7
   16be2:	91 60       	ori	r25, 0x01	; 1
   16be4:	00 96       	adiw	r24, 0x00	; 0
   16be6:	61 05       	cpc	r22, r1
   16be8:	71 05       	cpc	r23, r1
   16bea:	39 f4       	brne	.+14     	; 0x16bfa <__ftoa_engine+0x28>
   16bec:	32 60       	ori	r19, 0x02	; 2
   16bee:	2e 5f       	subi	r18, 0xFE	; 254
   16bf0:	3d 93       	st	X+, r19
   16bf2:	30 e3       	ldi	r19, 0x30	; 48
   16bf4:	2a 95       	dec	r18
   16bf6:	e1 f7       	brne	.-8      	; 0x16bf0 <__ftoa_engine+0x1e>
   16bf8:	08 95       	ret
   16bfa:	9f 3f       	cpi	r25, 0xFF	; 255
   16bfc:	30 f0       	brcs	.+12     	; 0x16c0a <__ftoa_engine+0x38>
   16bfe:	80 38       	cpi	r24, 0x80	; 128
   16c00:	71 05       	cpc	r23, r1
   16c02:	61 05       	cpc	r22, r1
   16c04:	09 f0       	breq	.+2      	; 0x16c08 <__ftoa_engine+0x36>
   16c06:	3c 5f       	subi	r19, 0xFC	; 252
   16c08:	3c 5f       	subi	r19, 0xFC	; 252
   16c0a:	3d 93       	st	X+, r19
   16c0c:	91 30       	cpi	r25, 0x01	; 1
   16c0e:	08 f0       	brcs	.+2      	; 0x16c12 <__ftoa_engine+0x40>
   16c10:	80 68       	ori	r24, 0x80	; 128
   16c12:	91 1d       	adc	r25, r1
   16c14:	df 93       	push	r29
   16c16:	cf 93       	push	r28
   16c18:	1f 93       	push	r17
   16c1a:	0f 93       	push	r16
   16c1c:	ff 92       	push	r15
   16c1e:	ef 92       	push	r14
   16c20:	19 2f       	mov	r17, r25
   16c22:	98 7f       	andi	r25, 0xF8	; 248
   16c24:	96 95       	lsr	r25
   16c26:	e9 2f       	mov	r30, r25
   16c28:	96 95       	lsr	r25
   16c2a:	96 95       	lsr	r25
   16c2c:	e9 0f       	add	r30, r25
   16c2e:	ff 27       	eor	r31, r31
   16c30:	ed 54       	subi	r30, 0x4D	; 77
   16c32:	f8 4e       	sbci	r31, 0xE8	; 232
   16c34:	99 27       	eor	r25, r25
   16c36:	33 27       	eor	r19, r19
   16c38:	ee 24       	eor	r14, r14
   16c3a:	ff 24       	eor	r15, r15
   16c3c:	a7 01       	movw	r20, r14
   16c3e:	e7 01       	movw	r28, r14
   16c40:	05 90       	lpm	r0, Z+
   16c42:	08 94       	sec
   16c44:	07 94       	ror	r0
   16c46:	28 f4       	brcc	.+10     	; 0x16c52 <__ftoa_engine+0x80>
   16c48:	36 0f       	add	r19, r22
   16c4a:	e7 1e       	adc	r14, r23
   16c4c:	f8 1e       	adc	r15, r24
   16c4e:	49 1f       	adc	r20, r25
   16c50:	51 1d       	adc	r21, r1
   16c52:	66 0f       	add	r22, r22
   16c54:	77 1f       	adc	r23, r23
   16c56:	88 1f       	adc	r24, r24
   16c58:	99 1f       	adc	r25, r25
   16c5a:	06 94       	lsr	r0
   16c5c:	a1 f7       	brne	.-24     	; 0x16c46 <__ftoa_engine+0x74>
   16c5e:	05 90       	lpm	r0, Z+
   16c60:	07 94       	ror	r0
   16c62:	28 f4       	brcc	.+10     	; 0x16c6e <__ftoa_engine+0x9c>
   16c64:	e7 0e       	add	r14, r23
   16c66:	f8 1e       	adc	r15, r24
   16c68:	49 1f       	adc	r20, r25
   16c6a:	56 1f       	adc	r21, r22
   16c6c:	c1 1d       	adc	r28, r1
   16c6e:	77 0f       	add	r23, r23
   16c70:	88 1f       	adc	r24, r24
   16c72:	99 1f       	adc	r25, r25
   16c74:	66 1f       	adc	r22, r22
   16c76:	06 94       	lsr	r0
   16c78:	a1 f7       	brne	.-24     	; 0x16c62 <__ftoa_engine+0x90>
   16c7a:	05 90       	lpm	r0, Z+
   16c7c:	07 94       	ror	r0
   16c7e:	28 f4       	brcc	.+10     	; 0x16c8a <__ftoa_engine+0xb8>
   16c80:	f8 0e       	add	r15, r24
   16c82:	49 1f       	adc	r20, r25
   16c84:	56 1f       	adc	r21, r22
   16c86:	c7 1f       	adc	r28, r23
   16c88:	d1 1d       	adc	r29, r1
   16c8a:	88 0f       	add	r24, r24
   16c8c:	99 1f       	adc	r25, r25
   16c8e:	66 1f       	adc	r22, r22
   16c90:	77 1f       	adc	r23, r23
   16c92:	06 94       	lsr	r0
   16c94:	a1 f7       	brne	.-24     	; 0x16c7e <__ftoa_engine+0xac>
   16c96:	05 90       	lpm	r0, Z+
   16c98:	07 94       	ror	r0
   16c9a:	20 f4       	brcc	.+8      	; 0x16ca4 <__ftoa_engine+0xd2>
   16c9c:	49 0f       	add	r20, r25
   16c9e:	56 1f       	adc	r21, r22
   16ca0:	c7 1f       	adc	r28, r23
   16ca2:	d8 1f       	adc	r29, r24
   16ca4:	99 0f       	add	r25, r25
   16ca6:	66 1f       	adc	r22, r22
   16ca8:	77 1f       	adc	r23, r23
   16caa:	88 1f       	adc	r24, r24
   16cac:	06 94       	lsr	r0
   16cae:	a9 f7       	brne	.-22     	; 0x16c9a <__ftoa_engine+0xc8>
   16cb0:	84 91       	lpm	r24, Z
   16cb2:	10 95       	com	r17
   16cb4:	17 70       	andi	r17, 0x07	; 7
   16cb6:	41 f0       	breq	.+16     	; 0x16cc8 <__ftoa_engine+0xf6>
   16cb8:	d6 95       	lsr	r29
   16cba:	c7 95       	ror	r28
   16cbc:	57 95       	ror	r21
   16cbe:	47 95       	ror	r20
   16cc0:	f7 94       	ror	r15
   16cc2:	e7 94       	ror	r14
   16cc4:	1a 95       	dec	r17
   16cc6:	c1 f7       	brne	.-16     	; 0x16cb8 <__ftoa_engine+0xe6>
   16cc8:	e9 e5       	ldi	r30, 0x59	; 89
   16cca:	f7 e1       	ldi	r31, 0x17	; 23
   16ccc:	68 94       	set
   16cce:	15 90       	lpm	r1, Z+
   16cd0:	15 91       	lpm	r17, Z+
   16cd2:	35 91       	lpm	r19, Z+
   16cd4:	65 91       	lpm	r22, Z+
   16cd6:	95 91       	lpm	r25, Z+
   16cd8:	05 90       	lpm	r0, Z+
   16cda:	7f e2       	ldi	r23, 0x2F	; 47
   16cdc:	73 95       	inc	r23
   16cde:	e1 18       	sub	r14, r1
   16ce0:	f1 0a       	sbc	r15, r17
   16ce2:	43 0b       	sbc	r20, r19
   16ce4:	56 0b       	sbc	r21, r22
   16ce6:	c9 0b       	sbc	r28, r25
   16ce8:	d0 09       	sbc	r29, r0
   16cea:	c0 f7       	brcc	.-16     	; 0x16cdc <__ftoa_engine+0x10a>
   16cec:	e1 0c       	add	r14, r1
   16cee:	f1 1e       	adc	r15, r17
   16cf0:	43 1f       	adc	r20, r19
   16cf2:	56 1f       	adc	r21, r22
   16cf4:	c9 1f       	adc	r28, r25
   16cf6:	d0 1d       	adc	r29, r0
   16cf8:	7e f4       	brtc	.+30     	; 0x16d18 <__ftoa_engine+0x146>
   16cfa:	70 33       	cpi	r23, 0x30	; 48
   16cfc:	11 f4       	brne	.+4      	; 0x16d02 <__ftoa_engine+0x130>
   16cfe:	8a 95       	dec	r24
   16d00:	e6 cf       	rjmp	.-52     	; 0x16cce <__ftoa_engine+0xfc>
   16d02:	e8 94       	clt
   16d04:	01 50       	subi	r16, 0x01	; 1
   16d06:	30 f0       	brcs	.+12     	; 0x16d14 <__ftoa_engine+0x142>
   16d08:	08 0f       	add	r16, r24
   16d0a:	0a f4       	brpl	.+2      	; 0x16d0e <__ftoa_engine+0x13c>
   16d0c:	00 27       	eor	r16, r16
   16d0e:	02 17       	cp	r16, r18
   16d10:	08 f4       	brcc	.+2      	; 0x16d14 <__ftoa_engine+0x142>
   16d12:	20 2f       	mov	r18, r16
   16d14:	23 95       	inc	r18
   16d16:	02 2f       	mov	r16, r18
   16d18:	7a 33       	cpi	r23, 0x3A	; 58
   16d1a:	28 f0       	brcs	.+10     	; 0x16d26 <__ftoa_engine+0x154>
   16d1c:	79 e3       	ldi	r23, 0x39	; 57
   16d1e:	7d 93       	st	X+, r23
   16d20:	2a 95       	dec	r18
   16d22:	e9 f7       	brne	.-6      	; 0x16d1e <__ftoa_engine+0x14c>
   16d24:	10 c0       	rjmp	.+32     	; 0x16d46 <__ftoa_engine+0x174>
   16d26:	7d 93       	st	X+, r23
   16d28:	2a 95       	dec	r18
   16d2a:	89 f6       	brne	.-94     	; 0x16cce <__ftoa_engine+0xfc>
   16d2c:	06 94       	lsr	r0
   16d2e:	97 95       	ror	r25
   16d30:	67 95       	ror	r22
   16d32:	37 95       	ror	r19
   16d34:	17 95       	ror	r17
   16d36:	17 94       	ror	r1
   16d38:	e1 18       	sub	r14, r1
   16d3a:	f1 0a       	sbc	r15, r17
   16d3c:	43 0b       	sbc	r20, r19
   16d3e:	56 0b       	sbc	r21, r22
   16d40:	c9 0b       	sbc	r28, r25
   16d42:	d0 09       	sbc	r29, r0
   16d44:	98 f0       	brcs	.+38     	; 0x16d6c <__ftoa_engine+0x19a>
   16d46:	23 95       	inc	r18
   16d48:	7e 91       	ld	r23, -X
   16d4a:	73 95       	inc	r23
   16d4c:	7a 33       	cpi	r23, 0x3A	; 58
   16d4e:	08 f0       	brcs	.+2      	; 0x16d52 <__ftoa_engine+0x180>
   16d50:	70 e3       	ldi	r23, 0x30	; 48
   16d52:	7c 93       	st	X, r23
   16d54:	20 13       	cpse	r18, r16
   16d56:	b8 f7       	brcc	.-18     	; 0x16d46 <__ftoa_engine+0x174>
   16d58:	7e 91       	ld	r23, -X
   16d5a:	70 61       	ori	r23, 0x10	; 16
   16d5c:	7d 93       	st	X+, r23
   16d5e:	30 f0       	brcs	.+12     	; 0x16d6c <__ftoa_engine+0x19a>
   16d60:	83 95       	inc	r24
   16d62:	71 e3       	ldi	r23, 0x31	; 49
   16d64:	7d 93       	st	X+, r23
   16d66:	70 e3       	ldi	r23, 0x30	; 48
   16d68:	2a 95       	dec	r18
   16d6a:	e1 f7       	brne	.-8      	; 0x16d64 <__ftoa_engine+0x192>
   16d6c:	11 24       	eor	r1, r1
   16d6e:	ef 90       	pop	r14
   16d70:	ff 90       	pop	r15
   16d72:	0f 91       	pop	r16
   16d74:	1f 91       	pop	r17
   16d76:	cf 91       	pop	r28
   16d78:	df 91       	pop	r29
   16d7a:	99 27       	eor	r25, r25
   16d7c:	87 fd       	sbrc	r24, 7
   16d7e:	90 95       	com	r25
   16d80:	08 95       	ret

00016d82 <strcasecmp_P>:
   16d82:	fb 01       	movw	r30, r22
   16d84:	dc 01       	movw	r26, r24
   16d86:	8d 91       	ld	r24, X+
   16d88:	81 34       	cpi	r24, 0x41	; 65
   16d8a:	1c f0       	brlt	.+6      	; 0x16d92 <strcasecmp_P+0x10>
   16d8c:	8b 35       	cpi	r24, 0x5B	; 91
   16d8e:	0c f4       	brge	.+2      	; 0x16d92 <strcasecmp_P+0x10>
   16d90:	80 5e       	subi	r24, 0xE0	; 224
   16d92:	65 91       	lpm	r22, Z+
   16d94:	61 34       	cpi	r22, 0x41	; 65
   16d96:	1c f0       	brlt	.+6      	; 0x16d9e <strcasecmp_P+0x1c>
   16d98:	6b 35       	cpi	r22, 0x5B	; 91
   16d9a:	0c f4       	brge	.+2      	; 0x16d9e <strcasecmp_P+0x1c>
   16d9c:	60 5e       	subi	r22, 0xE0	; 224
   16d9e:	86 1b       	sub	r24, r22
   16da0:	61 11       	cpse	r22, r1
   16da2:	89 f3       	breq	.-30     	; 0x16d86 <strcasecmp_P+0x4>
   16da4:	99 0b       	sbc	r25, r25
   16da6:	08 95       	ret

00016da8 <strnlen_P>:
   16da8:	fc 01       	movw	r30, r24
   16daa:	05 90       	lpm	r0, Z+
   16dac:	61 50       	subi	r22, 0x01	; 1
   16dae:	70 40       	sbci	r23, 0x00	; 0
   16db0:	01 10       	cpse	r0, r1
   16db2:	d8 f7       	brcc	.-10     	; 0x16daa <strnlen_P+0x2>
   16db4:	80 95       	com	r24
   16db6:	90 95       	com	r25
   16db8:	8e 0f       	add	r24, r30
   16dba:	9f 1f       	adc	r25, r31
   16dbc:	08 95       	ret

00016dbe <strtok>:
   16dbe:	49 e7       	ldi	r20, 0x79	; 121
   16dc0:	57 e2       	ldi	r21, 0x27	; 39
   16dc2:	0e 94 49 b7 	call	0x16e92	; 0x16e92 <strtok_r>
   16dc6:	08 95       	ret

00016dc8 <memcmp>:
   16dc8:	fb 01       	movw	r30, r22
   16dca:	dc 01       	movw	r26, r24
   16dcc:	04 c0       	rjmp	.+8      	; 0x16dd6 <memcmp+0xe>
   16dce:	8d 91       	ld	r24, X+
   16dd0:	01 90       	ld	r0, Z+
   16dd2:	80 19       	sub	r24, r0
   16dd4:	21 f4       	brne	.+8      	; 0x16dde <memcmp+0x16>
   16dd6:	41 50       	subi	r20, 0x01	; 1
   16dd8:	50 40       	sbci	r21, 0x00	; 0
   16dda:	c8 f7       	brcc	.-14     	; 0x16dce <memcmp+0x6>
   16ddc:	88 1b       	sub	r24, r24
   16dde:	99 0b       	sbc	r25, r25
   16de0:	08 95       	ret

00016de2 <memcpy>:
   16de2:	fb 01       	movw	r30, r22
   16de4:	dc 01       	movw	r26, r24
   16de6:	02 c0       	rjmp	.+4      	; 0x16dec <memcpy+0xa>
   16de8:	01 90       	ld	r0, Z+
   16dea:	0d 92       	st	X+, r0
   16dec:	41 50       	subi	r20, 0x01	; 1
   16dee:	50 40       	sbci	r21, 0x00	; 0
   16df0:	d8 f7       	brcc	.-10     	; 0x16de8 <memcpy+0x6>
   16df2:	08 95       	ret

00016df4 <memset>:
   16df4:	dc 01       	movw	r26, r24
   16df6:	01 c0       	rjmp	.+2      	; 0x16dfa <memset+0x6>
   16df8:	6d 93       	st	X+, r22
   16dfa:	41 50       	subi	r20, 0x01	; 1
   16dfc:	50 40       	sbci	r21, 0x00	; 0
   16dfe:	e0 f7       	brcc	.-8      	; 0x16df8 <memset+0x4>
   16e00:	08 95       	ret

00016e02 <strcasecmp>:
   16e02:	fb 01       	movw	r30, r22
   16e04:	dc 01       	movw	r26, r24
   16e06:	8d 91       	ld	r24, X+
   16e08:	81 34       	cpi	r24, 0x41	; 65
   16e0a:	1c f0       	brlt	.+6      	; 0x16e12 <strcasecmp+0x10>
   16e0c:	8b 35       	cpi	r24, 0x5B	; 91
   16e0e:	0c f4       	brge	.+2      	; 0x16e12 <strcasecmp+0x10>
   16e10:	80 5e       	subi	r24, 0xE0	; 224
   16e12:	61 91       	ld	r22, Z+
   16e14:	61 34       	cpi	r22, 0x41	; 65
   16e16:	1c f0       	brlt	.+6      	; 0x16e1e <strcasecmp+0x1c>
   16e18:	6b 35       	cpi	r22, 0x5B	; 91
   16e1a:	0c f4       	brge	.+2      	; 0x16e1e <strcasecmp+0x1c>
   16e1c:	60 5e       	subi	r22, 0xE0	; 224
   16e1e:	86 1b       	sub	r24, r22
   16e20:	61 11       	cpse	r22, r1
   16e22:	89 f3       	breq	.-30     	; 0x16e06 <strcasecmp+0x4>
   16e24:	99 0b       	sbc	r25, r25
   16e26:	08 95       	ret

00016e28 <strchr>:
   16e28:	fc 01       	movw	r30, r24
   16e2a:	81 91       	ld	r24, Z+
   16e2c:	86 17       	cp	r24, r22
   16e2e:	21 f0       	breq	.+8      	; 0x16e38 <strchr+0x10>
   16e30:	88 23       	and	r24, r24
   16e32:	d9 f7       	brne	.-10     	; 0x16e2a <strchr+0x2>
   16e34:	99 27       	eor	r25, r25
   16e36:	08 95       	ret
   16e38:	31 97       	sbiw	r30, 0x01	; 1
   16e3a:	cf 01       	movw	r24, r30
   16e3c:	08 95       	ret

00016e3e <strcmp>:
   16e3e:	fb 01       	movw	r30, r22
   16e40:	dc 01       	movw	r26, r24
   16e42:	8d 91       	ld	r24, X+
   16e44:	01 90       	ld	r0, Z+
   16e46:	80 19       	sub	r24, r0
   16e48:	01 10       	cpse	r0, r1
   16e4a:	d9 f3       	breq	.-10     	; 0x16e42 <strcmp+0x4>
   16e4c:	99 0b       	sbc	r25, r25
   16e4e:	08 95       	ret

00016e50 <strcpy>:
   16e50:	fb 01       	movw	r30, r22
   16e52:	dc 01       	movw	r26, r24
   16e54:	01 90       	ld	r0, Z+
   16e56:	0d 92       	st	X+, r0
   16e58:	00 20       	and	r0, r0
   16e5a:	e1 f7       	brne	.-8      	; 0x16e54 <strcpy+0x4>
   16e5c:	08 95       	ret

00016e5e <strncpy>:
   16e5e:	fb 01       	movw	r30, r22
   16e60:	dc 01       	movw	r26, r24
   16e62:	41 50       	subi	r20, 0x01	; 1
   16e64:	50 40       	sbci	r21, 0x00	; 0
   16e66:	48 f0       	brcs	.+18     	; 0x16e7a <strncpy+0x1c>
   16e68:	01 90       	ld	r0, Z+
   16e6a:	0d 92       	st	X+, r0
   16e6c:	00 20       	and	r0, r0
   16e6e:	c9 f7       	brne	.-14     	; 0x16e62 <strncpy+0x4>
   16e70:	01 c0       	rjmp	.+2      	; 0x16e74 <strncpy+0x16>
   16e72:	1d 92       	st	X+, r1
   16e74:	41 50       	subi	r20, 0x01	; 1
   16e76:	50 40       	sbci	r21, 0x00	; 0
   16e78:	e0 f7       	brcc	.-8      	; 0x16e72 <strncpy+0x14>
   16e7a:	08 95       	ret

00016e7c <strnlen>:
   16e7c:	fc 01       	movw	r30, r24
   16e7e:	61 50       	subi	r22, 0x01	; 1
   16e80:	70 40       	sbci	r23, 0x00	; 0
   16e82:	01 90       	ld	r0, Z+
   16e84:	01 10       	cpse	r0, r1
   16e86:	d8 f7       	brcc	.-10     	; 0x16e7e <strnlen+0x2>
   16e88:	80 95       	com	r24
   16e8a:	90 95       	com	r25
   16e8c:	8e 0f       	add	r24, r30
   16e8e:	9f 1f       	adc	r25, r31
   16e90:	08 95       	ret

00016e92 <strtok_r>:
   16e92:	fa 01       	movw	r30, r20
   16e94:	a1 91       	ld	r26, Z+
   16e96:	b0 81       	ld	r27, Z
   16e98:	00 97       	sbiw	r24, 0x00	; 0
   16e9a:	19 f4       	brne	.+6      	; 0x16ea2 <strtok_r+0x10>
   16e9c:	10 97       	sbiw	r26, 0x00	; 0
   16e9e:	e1 f0       	breq	.+56     	; 0x16ed8 <strtok_r+0x46>
   16ea0:	cd 01       	movw	r24, r26
   16ea2:	dc 01       	movw	r26, r24
   16ea4:	cd 01       	movw	r24, r26
   16ea6:	0d 90       	ld	r0, X+
   16ea8:	00 20       	and	r0, r0
   16eaa:	11 f4       	brne	.+4      	; 0x16eb0 <strtok_r+0x1e>
   16eac:	c0 01       	movw	r24, r0
   16eae:	13 c0       	rjmp	.+38     	; 0x16ed6 <strtok_r+0x44>
   16eb0:	fb 01       	movw	r30, r22
   16eb2:	21 91       	ld	r18, Z+
   16eb4:	22 23       	and	r18, r18
   16eb6:	19 f0       	breq	.+6      	; 0x16ebe <strtok_r+0x2c>
   16eb8:	20 15       	cp	r18, r0
   16eba:	d9 f7       	brne	.-10     	; 0x16eb2 <strtok_r+0x20>
   16ebc:	f3 cf       	rjmp	.-26     	; 0x16ea4 <strtok_r+0x12>
   16ebe:	fb 01       	movw	r30, r22
   16ec0:	21 91       	ld	r18, Z+
   16ec2:	20 15       	cp	r18, r0
   16ec4:	19 f4       	brne	.+6      	; 0x16ecc <strtok_r+0x3a>
   16ec6:	1e 92       	st	-X, r1
   16ec8:	11 96       	adiw	r26, 0x01	; 1
   16eca:	06 c0       	rjmp	.+12     	; 0x16ed8 <strtok_r+0x46>
   16ecc:	22 23       	and	r18, r18
   16ece:	c1 f7       	brne	.-16     	; 0x16ec0 <strtok_r+0x2e>
   16ed0:	0d 90       	ld	r0, X+
   16ed2:	00 20       	and	r0, r0
   16ed4:	a1 f7       	brne	.-24     	; 0x16ebe <strtok_r+0x2c>
   16ed6:	d0 01       	movw	r26, r0
   16ed8:	fa 01       	movw	r30, r20
   16eda:	a1 93       	st	Z+, r26
   16edc:	b0 83       	st	Z, r27
   16ede:	08 95       	ret

00016ee0 <__mulhi_const_10>:
   16ee0:	7a e0       	ldi	r23, 0x0A	; 10
   16ee2:	97 9f       	mul	r25, r23
   16ee4:	90 2d       	mov	r25, r0
   16ee6:	87 9f       	mul	r24, r23
   16ee8:	80 2d       	mov	r24, r0
   16eea:	91 0d       	add	r25, r1
   16eec:	11 24       	eor	r1, r1
   16eee:	08 95       	ret

00016ef0 <fputc>:
   16ef0:	0f 93       	push	r16
   16ef2:	1f 93       	push	r17
   16ef4:	cf 93       	push	r28
   16ef6:	df 93       	push	r29
   16ef8:	8c 01       	movw	r16, r24
   16efa:	eb 01       	movw	r28, r22
   16efc:	8b 81       	ldd	r24, Y+3	; 0x03
   16efe:	81 ff       	sbrs	r24, 1
   16f00:	1b c0       	rjmp	.+54     	; 0x16f38 <fputc+0x48>
   16f02:	82 ff       	sbrs	r24, 2
   16f04:	0d c0       	rjmp	.+26     	; 0x16f20 <fputc+0x30>
   16f06:	2e 81       	ldd	r18, Y+6	; 0x06
   16f08:	3f 81       	ldd	r19, Y+7	; 0x07
   16f0a:	8c 81       	ldd	r24, Y+4	; 0x04
   16f0c:	9d 81       	ldd	r25, Y+5	; 0x05
   16f0e:	28 17       	cp	r18, r24
   16f10:	39 07       	cpc	r19, r25
   16f12:	64 f4       	brge	.+24     	; 0x16f2c <fputc+0x3c>
   16f14:	e8 81       	ld	r30, Y
   16f16:	f9 81       	ldd	r31, Y+1	; 0x01
   16f18:	01 93       	st	Z+, r16
   16f1a:	e8 83       	st	Y, r30
   16f1c:	f9 83       	std	Y+1, r31	; 0x01
   16f1e:	06 c0       	rjmp	.+12     	; 0x16f2c <fputc+0x3c>
   16f20:	e8 85       	ldd	r30, Y+8	; 0x08
   16f22:	f9 85       	ldd	r31, Y+9	; 0x09
   16f24:	80 2f       	mov	r24, r16
   16f26:	19 95       	eicall
   16f28:	00 97       	sbiw	r24, 0x00	; 0
   16f2a:	31 f4       	brne	.+12     	; 0x16f38 <fputc+0x48>
   16f2c:	8e 81       	ldd	r24, Y+6	; 0x06
   16f2e:	9f 81       	ldd	r25, Y+7	; 0x07
   16f30:	01 96       	adiw	r24, 0x01	; 1
   16f32:	8e 83       	std	Y+6, r24	; 0x06
   16f34:	9f 83       	std	Y+7, r25	; 0x07
   16f36:	02 c0       	rjmp	.+4      	; 0x16f3c <fputc+0x4c>
   16f38:	0f ef       	ldi	r16, 0xFF	; 255
   16f3a:	1f ef       	ldi	r17, 0xFF	; 255
   16f3c:	c8 01       	movw	r24, r16
   16f3e:	df 91       	pop	r29
   16f40:	cf 91       	pop	r28
   16f42:	1f 91       	pop	r17
   16f44:	0f 91       	pop	r16
   16f46:	08 95       	ret

00016f48 <sprintf>:
   16f48:	0f 93       	push	r16
   16f4a:	1f 93       	push	r17
   16f4c:	cf 93       	push	r28
   16f4e:	df 93       	push	r29
   16f50:	cd b7       	in	r28, 0x3d	; 61
   16f52:	de b7       	in	r29, 0x3e	; 62
   16f54:	2e 97       	sbiw	r28, 0x0e	; 14
   16f56:	cd bf       	out	0x3d, r28	; 61
   16f58:	de bf       	out	0x3e, r29	; 62
   16f5a:	0e 89       	ldd	r16, Y+22	; 0x16
   16f5c:	1f 89       	ldd	r17, Y+23	; 0x17
   16f5e:	86 e0       	ldi	r24, 0x06	; 6
   16f60:	8c 83       	std	Y+4, r24	; 0x04
   16f62:	09 83       	std	Y+1, r16	; 0x01
   16f64:	1a 83       	std	Y+2, r17	; 0x02
   16f66:	8f ef       	ldi	r24, 0xFF	; 255
   16f68:	9f e7       	ldi	r25, 0x7F	; 127
   16f6a:	8d 83       	std	Y+5, r24	; 0x05
   16f6c:	9e 83       	std	Y+6, r25	; 0x06
   16f6e:	ae 01       	movw	r20, r28
   16f70:	46 5e       	subi	r20, 0xE6	; 230
   16f72:	5f 4f       	sbci	r21, 0xFF	; 255
   16f74:	ce 01       	movw	r24, r28
   16f76:	01 96       	adiw	r24, 0x01	; 1
   16f78:	68 8d       	ldd	r22, Y+24	; 0x18
   16f7a:	79 8d       	ldd	r23, Y+25	; 0x19
   16f7c:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <vfprintf>
   16f80:	ef 81       	ldd	r30, Y+7	; 0x07
   16f82:	f8 85       	ldd	r31, Y+8	; 0x08
   16f84:	e0 0f       	add	r30, r16
   16f86:	f1 1f       	adc	r31, r17
   16f88:	10 82       	st	Z, r1
   16f8a:	2e 96       	adiw	r28, 0x0e	; 14
   16f8c:	cd bf       	out	0x3d, r28	; 61
   16f8e:	de bf       	out	0x3e, r29	; 62
   16f90:	df 91       	pop	r29
   16f92:	cf 91       	pop	r28
   16f94:	1f 91       	pop	r17
   16f96:	0f 91       	pop	r16
   16f98:	08 95       	ret

00016f9a <sprintf_P>:
   16f9a:	0f 93       	push	r16
   16f9c:	1f 93       	push	r17
   16f9e:	cf 93       	push	r28
   16fa0:	df 93       	push	r29
   16fa2:	cd b7       	in	r28, 0x3d	; 61
   16fa4:	de b7       	in	r29, 0x3e	; 62
   16fa6:	2e 97       	sbiw	r28, 0x0e	; 14
   16fa8:	cd bf       	out	0x3d, r28	; 61
   16faa:	de bf       	out	0x3e, r29	; 62
   16fac:	0e 89       	ldd	r16, Y+22	; 0x16
   16fae:	1f 89       	ldd	r17, Y+23	; 0x17
   16fb0:	8e e0       	ldi	r24, 0x0E	; 14
   16fb2:	8c 83       	std	Y+4, r24	; 0x04
   16fb4:	09 83       	std	Y+1, r16	; 0x01
   16fb6:	1a 83       	std	Y+2, r17	; 0x02
   16fb8:	8f ef       	ldi	r24, 0xFF	; 255
   16fba:	9f e7       	ldi	r25, 0x7F	; 127
   16fbc:	8d 83       	std	Y+5, r24	; 0x05
   16fbe:	9e 83       	std	Y+6, r25	; 0x06
   16fc0:	ae 01       	movw	r20, r28
   16fc2:	46 5e       	subi	r20, 0xE6	; 230
   16fc4:	5f 4f       	sbci	r21, 0xFF	; 255
   16fc6:	ce 01       	movw	r24, r28
   16fc8:	01 96       	adiw	r24, 0x01	; 1
   16fca:	68 8d       	ldd	r22, Y+24	; 0x18
   16fcc:	79 8d       	ldd	r23, Y+25	; 0x19
   16fce:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <vfprintf>
   16fd2:	ef 81       	ldd	r30, Y+7	; 0x07
   16fd4:	f8 85       	ldd	r31, Y+8	; 0x08
   16fd6:	e0 0f       	add	r30, r16
   16fd8:	f1 1f       	adc	r31, r17
   16fda:	10 82       	st	Z, r1
   16fdc:	2e 96       	adiw	r28, 0x0e	; 14
   16fde:	cd bf       	out	0x3d, r28	; 61
   16fe0:	de bf       	out	0x3e, r29	; 62
   16fe2:	df 91       	pop	r29
   16fe4:	cf 91       	pop	r28
   16fe6:	1f 91       	pop	r17
   16fe8:	0f 91       	pop	r16
   16fea:	08 95       	ret

00016fec <__ultoa_invert>:
   16fec:	fa 01       	movw	r30, r20
   16fee:	aa 27       	eor	r26, r26
   16ff0:	28 30       	cpi	r18, 0x08	; 8
   16ff2:	51 f1       	breq	.+84     	; 0x17048 <__ultoa_invert+0x5c>
   16ff4:	20 31       	cpi	r18, 0x10	; 16
   16ff6:	81 f1       	breq	.+96     	; 0x17058 <__ultoa_invert+0x6c>
   16ff8:	e8 94       	clt
   16ffa:	6f 93       	push	r22
   16ffc:	6e 7f       	andi	r22, 0xFE	; 254
   16ffe:	6e 5f       	subi	r22, 0xFE	; 254
   17000:	7f 4f       	sbci	r23, 0xFF	; 255
   17002:	8f 4f       	sbci	r24, 0xFF	; 255
   17004:	9f 4f       	sbci	r25, 0xFF	; 255
   17006:	af 4f       	sbci	r26, 0xFF	; 255
   17008:	b1 e0       	ldi	r27, 0x01	; 1
   1700a:	3e d0       	rcall	.+124    	; 0x17088 <__ultoa_invert+0x9c>
   1700c:	b4 e0       	ldi	r27, 0x04	; 4
   1700e:	3c d0       	rcall	.+120    	; 0x17088 <__ultoa_invert+0x9c>
   17010:	67 0f       	add	r22, r23
   17012:	78 1f       	adc	r23, r24
   17014:	89 1f       	adc	r24, r25
   17016:	9a 1f       	adc	r25, r26
   17018:	a1 1d       	adc	r26, r1
   1701a:	68 0f       	add	r22, r24
   1701c:	79 1f       	adc	r23, r25
   1701e:	8a 1f       	adc	r24, r26
   17020:	91 1d       	adc	r25, r1
   17022:	a1 1d       	adc	r26, r1
   17024:	6a 0f       	add	r22, r26
   17026:	71 1d       	adc	r23, r1
   17028:	81 1d       	adc	r24, r1
   1702a:	91 1d       	adc	r25, r1
   1702c:	a1 1d       	adc	r26, r1
   1702e:	20 d0       	rcall	.+64     	; 0x17070 <__ultoa_invert+0x84>
   17030:	09 f4       	brne	.+2      	; 0x17034 <__ultoa_invert+0x48>
   17032:	68 94       	set
   17034:	3f 91       	pop	r19
   17036:	2a e0       	ldi	r18, 0x0A	; 10
   17038:	26 9f       	mul	r18, r22
   1703a:	11 24       	eor	r1, r1
   1703c:	30 19       	sub	r19, r0
   1703e:	30 5d       	subi	r19, 0xD0	; 208
   17040:	31 93       	st	Z+, r19
   17042:	de f6       	brtc	.-74     	; 0x16ffa <__ultoa_invert+0xe>
   17044:	cf 01       	movw	r24, r30
   17046:	08 95       	ret
   17048:	46 2f       	mov	r20, r22
   1704a:	47 70       	andi	r20, 0x07	; 7
   1704c:	40 5d       	subi	r20, 0xD0	; 208
   1704e:	41 93       	st	Z+, r20
   17050:	b3 e0       	ldi	r27, 0x03	; 3
   17052:	0f d0       	rcall	.+30     	; 0x17072 <__ultoa_invert+0x86>
   17054:	c9 f7       	brne	.-14     	; 0x17048 <__ultoa_invert+0x5c>
   17056:	f6 cf       	rjmp	.-20     	; 0x17044 <__ultoa_invert+0x58>
   17058:	46 2f       	mov	r20, r22
   1705a:	4f 70       	andi	r20, 0x0F	; 15
   1705c:	40 5d       	subi	r20, 0xD0	; 208
   1705e:	4a 33       	cpi	r20, 0x3A	; 58
   17060:	18 f0       	brcs	.+6      	; 0x17068 <__ultoa_invert+0x7c>
   17062:	49 5d       	subi	r20, 0xD9	; 217
   17064:	31 fd       	sbrc	r19, 1
   17066:	40 52       	subi	r20, 0x20	; 32
   17068:	41 93       	st	Z+, r20
   1706a:	02 d0       	rcall	.+4      	; 0x17070 <__ultoa_invert+0x84>
   1706c:	a9 f7       	brne	.-22     	; 0x17058 <__ultoa_invert+0x6c>
   1706e:	ea cf       	rjmp	.-44     	; 0x17044 <__ultoa_invert+0x58>
   17070:	b4 e0       	ldi	r27, 0x04	; 4
   17072:	a6 95       	lsr	r26
   17074:	97 95       	ror	r25
   17076:	87 95       	ror	r24
   17078:	77 95       	ror	r23
   1707a:	67 95       	ror	r22
   1707c:	ba 95       	dec	r27
   1707e:	c9 f7       	brne	.-14     	; 0x17072 <__ultoa_invert+0x86>
   17080:	00 97       	sbiw	r24, 0x00	; 0
   17082:	61 05       	cpc	r22, r1
   17084:	71 05       	cpc	r23, r1
   17086:	08 95       	ret
   17088:	9b 01       	movw	r18, r22
   1708a:	ac 01       	movw	r20, r24
   1708c:	0a 2e       	mov	r0, r26
   1708e:	06 94       	lsr	r0
   17090:	57 95       	ror	r21
   17092:	47 95       	ror	r20
   17094:	37 95       	ror	r19
   17096:	27 95       	ror	r18
   17098:	ba 95       	dec	r27
   1709a:	c9 f7       	brne	.-14     	; 0x1708e <__ultoa_invert+0xa2>
   1709c:	62 0f       	add	r22, r18
   1709e:	73 1f       	adc	r23, r19
   170a0:	84 1f       	adc	r24, r20
   170a2:	95 1f       	adc	r25, r21
   170a4:	a0 1d       	adc	r26, r0
   170a6:	08 95       	ret

000170a8 <__mulsi3>:
   170a8:	62 9f       	mul	r22, r18
   170aa:	d0 01       	movw	r26, r0
   170ac:	73 9f       	mul	r23, r19
   170ae:	f0 01       	movw	r30, r0
   170b0:	82 9f       	mul	r24, r18
   170b2:	e0 0d       	add	r30, r0
   170b4:	f1 1d       	adc	r31, r1
   170b6:	64 9f       	mul	r22, r20
   170b8:	e0 0d       	add	r30, r0
   170ba:	f1 1d       	adc	r31, r1
   170bc:	92 9f       	mul	r25, r18
   170be:	f0 0d       	add	r31, r0
   170c0:	83 9f       	mul	r24, r19
   170c2:	f0 0d       	add	r31, r0
   170c4:	74 9f       	mul	r23, r20
   170c6:	f0 0d       	add	r31, r0
   170c8:	65 9f       	mul	r22, r21
   170ca:	f0 0d       	add	r31, r0
   170cc:	99 27       	eor	r25, r25
   170ce:	72 9f       	mul	r23, r18
   170d0:	b0 0d       	add	r27, r0
   170d2:	e1 1d       	adc	r30, r1
   170d4:	f9 1f       	adc	r31, r25
   170d6:	63 9f       	mul	r22, r19
   170d8:	b0 0d       	add	r27, r0
   170da:	e1 1d       	adc	r30, r1
   170dc:	f9 1f       	adc	r31, r25
   170de:	bd 01       	movw	r22, r26
   170e0:	cf 01       	movw	r24, r30
   170e2:	11 24       	eor	r1, r1
   170e4:	08 95       	ret

000170e6 <__udivmodsi4>:
   170e6:	a1 e2       	ldi	r26, 0x21	; 33
   170e8:	1a 2e       	mov	r1, r26
   170ea:	aa 1b       	sub	r26, r26
   170ec:	bb 1b       	sub	r27, r27
   170ee:	fd 01       	movw	r30, r26
   170f0:	0d c0       	rjmp	.+26     	; 0x1710c <__udivmodsi4_ep>

000170f2 <__udivmodsi4_loop>:
   170f2:	aa 1f       	adc	r26, r26
   170f4:	bb 1f       	adc	r27, r27
   170f6:	ee 1f       	adc	r30, r30
   170f8:	ff 1f       	adc	r31, r31
   170fa:	a2 17       	cp	r26, r18
   170fc:	b3 07       	cpc	r27, r19
   170fe:	e4 07       	cpc	r30, r20
   17100:	f5 07       	cpc	r31, r21
   17102:	20 f0       	brcs	.+8      	; 0x1710c <__udivmodsi4_ep>
   17104:	a2 1b       	sub	r26, r18
   17106:	b3 0b       	sbc	r27, r19
   17108:	e4 0b       	sbc	r30, r20
   1710a:	f5 0b       	sbc	r31, r21

0001710c <__udivmodsi4_ep>:
   1710c:	66 1f       	adc	r22, r22
   1710e:	77 1f       	adc	r23, r23
   17110:	88 1f       	adc	r24, r24
   17112:	99 1f       	adc	r25, r25
   17114:	1a 94       	dec	r1
   17116:	69 f7       	brne	.-38     	; 0x170f2 <__udivmodsi4_loop>
   17118:	60 95       	com	r22
   1711a:	70 95       	com	r23
   1711c:	80 95       	com	r24
   1711e:	90 95       	com	r25
   17120:	9b 01       	movw	r18, r22
   17122:	ac 01       	movw	r20, r24
   17124:	bd 01       	movw	r22, r26
   17126:	cf 01       	movw	r24, r30
   17128:	08 95       	ret

0001712a <__divmodsi4>:
   1712a:	97 fb       	bst	r25, 7
   1712c:	09 2e       	mov	r0, r25
   1712e:	05 26       	eor	r0, r21
   17130:	0e d0       	rcall	.+28     	; 0x1714e <__divmodsi4_neg1>
   17132:	57 fd       	sbrc	r21, 7
   17134:	04 d0       	rcall	.+8      	; 0x1713e <__divmodsi4_neg2>
   17136:	d7 df       	rcall	.-82     	; 0x170e6 <__udivmodsi4>
   17138:	0a d0       	rcall	.+20     	; 0x1714e <__divmodsi4_neg1>
   1713a:	00 1c       	adc	r0, r0
   1713c:	38 f4       	brcc	.+14     	; 0x1714c <__divmodsi4_exit>

0001713e <__divmodsi4_neg2>:
   1713e:	50 95       	com	r21
   17140:	40 95       	com	r20
   17142:	30 95       	com	r19
   17144:	21 95       	neg	r18
   17146:	3f 4f       	sbci	r19, 0xFF	; 255
   17148:	4f 4f       	sbci	r20, 0xFF	; 255
   1714a:	5f 4f       	sbci	r21, 0xFF	; 255

0001714c <__divmodsi4_exit>:
   1714c:	08 95       	ret

0001714e <__divmodsi4_neg1>:
   1714e:	f6 f7       	brtc	.-4      	; 0x1714c <__divmodsi4_exit>
   17150:	90 95       	com	r25
   17152:	80 95       	com	r24
   17154:	70 95       	com	r23
   17156:	61 95       	neg	r22
   17158:	7f 4f       	sbci	r23, 0xFF	; 255
   1715a:	8f 4f       	sbci	r24, 0xFF	; 255
   1715c:	9f 4f       	sbci	r25, 0xFF	; 255
   1715e:	08 95       	ret

00017160 <__tablejump_elpm__>:
   17160:	07 90       	elpm	r0, Z+
   17162:	f6 91       	elpm	r31, Z
   17164:	e0 2d       	mov	r30, r0
   17166:	19 94       	eijmp

00017168 <_exit>:
   17168:	f8 94       	cli

0001716a <__stop_program>:
   1716a:	ff cf       	rjmp	.-2      	; 0x1716a <__stop_program>
