
primusEval.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00017376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000286  00802000  00017376  0001740a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000382  00802286  00802286  00017690  2**0
                  ALLOC
  3 .debug_aranges 00001920  00000000  00000000  00017690  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000355d  00000000  00000000  00018fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0002dfdc  00000000  00000000  0001c50d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006963  00000000  00000000  0004a4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00017920  00000000  00000000  00050e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002c40  00000000  00000000  0006876c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000c3db  00000000  00000000  0006b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015648  00000000  00000000  00077787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ce8  00000000  00000000  0008cdcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

/*---------------------------------------------------------------------------*
 * Remove the device from the system
 *---------------------------------------------------------------------------*/
void drv_consoleExit( void)
{
       0:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__ctors_end>

/*---------------------------------------------------------------------------*
 * Remove the device from the system
 *---------------------------------------------------------------------------*/
void drv_sdExit( void)
{
       4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>

/*---------------------------------------------------------------------------*
 * Remove the device from the system
 *---------------------------------------------------------------------------*/
void drv_signalExit( void)
{
       8:	0c 94 28 29 	jmp	0x5250	; 0x5250 <__vector_2>
/*---------------------------------------------------------------------------*
 * Returns the last known sample gathered from the channel pointed to
 * by the handle.
 *---------------------------------------------------------------------------*/
int16_t hal_getAdcSample( t_ADCCHANHNDL t_handle)
{
       c:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__vector_3>

}/*End hal_releaseDmaChannel*/

t_dmaError hal_setDmaBlockSize( t_DMAHNDL t_handle,
                                uint16_t s_blockSize)
{
      10:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__vector_4>

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_gpioError hal_releaseGpioInt( t_GPIOHNDL t_handle)
{
      14:	0c 94 e8 24 	jmp	0x49d0	; 0x49d0 <__vector_5>
   return (t_SPIHNDL)t_linkHndl;

}/*End hal_requestSpiChannel*/

t_spiError hal_releaseSpiChannel( t_SPIHNDL t_handle)
{
      18:	0c 94 a5 20 	jmp	0x414a	; 0x414a <__vector_6>
}/*End hal_getTimerCount*/

t_timerError hal_setCompareValue( t_TIMERHNDL t_handle,
                                  t_compType  t_type,
                                  uint16_t    s_value)
{
      1c:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__vector_7>
   pt_slave->STATUS   = 0;

}/*End hal_resetTwiSlave*/

int32_t hal_twiGetBaudRate( t_TWIHNDL t_handle)
{
      20:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__vector_8>
   return (int32_t)pt_uartChanHndl->i_baudRate;

}/*End hal_uartGetBaudRate*/

int32_t hal_uartGetDataAddress( t_UARTHNDL t_handle)
{
      24:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__vector_9>
                                        
/*---------------------------------------------------------------------------*
 * This function disables the watchdog timer.
 *---------------------------------------------------------------------------*/	
t_wdError hal_wdDisable( t_WDHNDL t_handle)
{
      28:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      2c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
int MinimumSerial::read() {
#ifndef ARBITROS_CMP
  if (UCSR0A & (1 << RXC0)) return UDR0;
#endif
  return -1;
}
      30:	0c 94 8b 4b 	jmp	0x9716	; 0x9716 <__vector_12>
 * F_CPU/128 for \a scsRateID = 12.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
bool Sd2Card::setSckRate(uint8_t sckRateID) {
      34:	0c 94 5a 4d 	jmp	0x9ab4	; 0x9ab4 <__vector_13>

 fail:
  return false;
}
//------------------------------------------------------------------------------
void SdBaseFile::getpos(FatPos_t* pos) {
      38:	0c 94 e1 44 	jmp	0x89c2	; 0x89c2 <__vector_14>
 */
bool SdFat::truncate(const char* path, uint32_t length) {
  SdBaseFile file;
  if (!file.open(path, O_WRITE)) return false;
  return file.truncate(length);
}
      3c:	0c 94 36 3e 	jmp	0x7c6c	; 0x7c6c <__vector_15>
 * Use getWriteError to check for errors.
 * \return 1 for success and 0 for failure.
 */
size_t SdFile::write(uint8_t b) {
  return SdBaseFile::write(&b, 1) == 1 ? 1 : 0;
}
      40:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__vector_16>
//------------------------------------------------------------------------------
/** Volume free space in clusters.
 *
 * \return Count of free clusters for success or -1 if an error occurs.
 */
int32_t SdVolume::freeClusterCount() {
      44:	0c 94 98 45 	jmp	0x8b30	; 0x8b30 <__vector_17>

   //myFile.getFilename( pc_name);

   return pc_name;

}/*End sd_gcf*/
      48:	0c 94 5b 45 	jmp	0x8ab6	; 0x8ab6 <__vector_18>
   return pt_mbx->s_numMessages;

}/*End arb_mailboxGetNumMessages*/

int16_t arb_mailboxGetQueueMaxDepth( t_MAILBOXHNDL t_mbxHandle)
{
      4c:	0c 94 1e 45 	jmp	0x8a3c	; 0x8a3c <__vector_19>
   return ARB_PASSED;

}/*End arb_setPrintfDbgLevel*/

uint8_t arb_getPrintfDbgLevel( void)
{
      50:	0c 94 2a 44 	jmp	0x8854	; 0x8854 <__vector_20>
   return ARB_PASSED;

}/*End arb_semaphoreInit*/

int16_t arb_semaphoreGetCount( t_SEMHANDLE t_semHandle)
{
      54:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
   gt_sysTime.s_days  = 0;

}/*End arb_resetSysTime*/

void arb_restartSysTimer( void)
{
      58:	0c 94 a4 44 	jmp	0x8948	; 0x8948 <__vector_22>

/*---------------------------------------------------------------------------*
 * This function deletes a thread from memory
 *---------------------------------------------------------------------------*/
t_error arb_threadDestroy( t_THRDHANDLE t_thrdHandle)
{
      5c:	0c 94 67 44 	jmp	0x88ce	; 0x88ce <__vector_23>
   return pt_handle->s_fillCount; /*Return the number of bytes in the buffer*/

}/*End utl_getBufferFullLevel*/

int16_t utl_getBufferEmptyLevel( t_BUFFHANDLE t_handle)
{
      60:	0c 94 af 2f 	jmp	0x5f5e	; 0x5f5e <__vector_24>
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
uint32_t utl_getDynListMemUsage( void)
{
   return gi_dynListMemUsage;
}/*End utl_getDynListMemUsage*/
      64:	0c 94 36 51 	jmp	0xa26c	; 0xa26c <__vector_25>
      68:	0c 94 6f 51 	jmp	0xa2de	; 0xa2de <__vector_26>
      6c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      70:	0c 94 a8 51 	jmp	0xa350	; 0xa350 <__vector_28>
      74:	0c 94 e1 51 	jmp	0xa3c2	; 0xa3c2 <__vector_29>
      78:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      7c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      80:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      84:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      88:	0c 94 a8 29 	jmp	0x5350	; 0x5350 <__vector_34>
      8c:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__vector_35>
      90:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      94:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      98:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      9c:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__vector_39>
      a0:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__vector_40>
      a4:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__vector_41>
      a8:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__vector_42>
      ac:	0c 94 28 28 	jmp	0x5050	; 0x5050 <__vector_43>
      b0:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__vector_44>
      b4:	0c 94 1b 4b 	jmp	0x9636	; 0x9636 <__vector_45>
      b8:	0c 94 ea 4c 	jmp	0x99d4	; 0x99d4 <__vector_46>
      bc:	0c 94 11 41 	jmp	0x8222	; 0x8222 <__vector_47>
      c0:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      c4:	0c 94 05 42 	jmp	0x840a	; 0x840a <__vector_49>
      c8:	0c 94 c8 41 	jmp	0x8390	; 0x8390 <__vector_50>
      cc:	0c 94 8b 41 	jmp	0x8316	; 0x8316 <__vector_51>
      d0:	0c 94 4e 41 	jmp	0x829c	; 0x829c <__vector_52>
      d4:	0c 94 5a 40 	jmp	0x80b4	; 0x80b4 <__vector_53>
      d8:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      dc:	0c 94 d4 40 	jmp	0x81a8	; 0x81a8 <__vector_55>
      e0:	0c 94 97 40 	jmp	0x812e	; 0x812e <__vector_56>
      e4:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <__vector_57>
      e8:	0c 94 fe 52 	jmp	0xa5fc	; 0xa5fc <__vector_58>
      ec:	0c 94 37 53 	jmp	0xa66e	; 0xa66e <__vector_59>
      f0:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
      f4:	0c 94 70 53 	jmp	0xa6e0	; 0xa6e0 <__vector_61>
      f8:	0c 94 a9 53 	jmp	0xa752	; 0xa752 <__vector_62>
      fc:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     100:	0c 94 a8 28 	jmp	0x5150	; 0x5150 <__vector_64>
     104:	0c 94 68 28 	jmp	0x50d0	; 0x50d0 <__vector_65>
     108:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__vector_66>
     10c:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__vector_67>
     110:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     114:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     118:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     11c:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__vector_71>
     120:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__vector_72>
     124:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__vector_73>
     128:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__vector_74>
     12c:	0c 94 53 4b 	jmp	0x96a6	; 0x96a6 <__vector_75>
     130:	0c 94 22 4d 	jmp	0x9a44	; 0x9a44 <__vector_76>
     134:	0c 94 f9 42 	jmp	0x85f2	; 0x85f2 <__vector_77>
     138:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     13c:	0c 94 ed 43 	jmp	0x87da	; 0x87da <__vector_79>
     140:	0c 94 b0 43 	jmp	0x8760	; 0x8760 <__vector_80>
     144:	0c 94 73 43 	jmp	0x86e6	; 0x86e6 <__vector_81>
     148:	0c 94 36 43 	jmp	0x866c	; 0x866c <__vector_82>
     14c:	0c 94 42 42 	jmp	0x8484	; 0x8484 <__vector_83>
     150:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     154:	0c 94 bc 42 	jmp	0x8578	; 0x8578 <__vector_85>
     158:	0c 94 7f 42 	jmp	0x84fe	; 0x84fe <__vector_86>
     15c:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__vector_87>
     160:	0c 94 1a 52 	jmp	0xa434	; 0xa434 <__vector_88>
     164:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <__vector_89>
     168:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     16c:	0c 94 8c 52 	jmp	0xa518	; 0xa518 <__vector_91>
     170:	0c 94 c5 52 	jmp	0xa58a	; 0xa58a <__vector_92>
     174:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     178:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__vector_94>
     17c:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_95>
     180:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__vector_96>
     184:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__vector_97>
     188:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__vector_98>
     18c:	0c 94 68 26 	jmp	0x4cd0	; 0x4cd0 <__vector_99>
     190:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <__vector_100>
     194:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <__vector_101>
     198:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     19c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     1a0:	0c 94 a8 27 	jmp	0x4f50	; 0x4f50 <__vector_104>
     1a4:	0c 94 68 27 	jmp	0x4ed0	; 0x4ed0 <__vector_105>
     1a8:	0c 94 e3 4a 	jmp	0x95c6	; 0x95c6 <__vector_106>
     1ac:	0c 94 b2 4c 	jmp	0x9964	; 0x9964 <__vector_107>
     1b0:	0c 94 29 3f 	jmp	0x7e52	; 0x7e52 <__vector_108>
     1b4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     1b8:	0c 94 1d 40 	jmp	0x803a	; 0x803a <__vector_110>
     1bc:	0c 94 e0 3f 	jmp	0x7fc0	; 0x7fc0 <__vector_111>
     1c0:	0c 94 a3 3f 	jmp	0x7f46	; 0x7f46 <__vector_112>
     1c4:	0c 94 66 3f 	jmp	0x7ecc	; 0x7ecc <__vector_113>
     1c8:	0c 94 72 3e 	jmp	0x7ce4	; 0x7ce4 <__vector_114>
     1cc:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     1d0:	0c 94 ec 3e 	jmp	0x7dd8	; 0x7dd8 <__vector_116>
     1d4:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <__vector_117>
     1d8:	0c 94 fe 2e 	jmp	0x5dfc	; 0x5dfc <__vector_118>
     1dc:	0c 94 e2 53 	jmp	0xa7c4	; 0xa7c4 <__vector_119>
     1e0:	0c 94 1b 54 	jmp	0xa836	; 0xa836 <__vector_120>
     1e4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>
     1e8:	0c 94 54 54 	jmp	0xa8a8	; 0xa8a8 <__vector_122>
     1ec:	0c 94 8d 54 	jmp	0xa91a	; 0xa91a <__vector_123>
     1f0:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__bad_interrupt>

000001f4 <__c.4227>:
     1f4:	1b 63 00                                            .c.

000001f7 <_ZZN10SdBaseFile10make83NameEPKcPhPS1_E3__c>:
     1f7:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000207 <__c.4985>:
     207:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

00000215 <__c.4983>:
     215:	68 65 61 64 00                                      head.

0000021a <__c.4981>:
     21a:	2f 00                                               /.

0000021c <__c.4978>:
     21c:	63 64 00                                            cd.

0000021f <__c.4976>:
     21f:	6d 6b 64 69 72 00                                   mkdir.

00000225 <__c.4974>:
     225:	72 6d 64 69 72 00                                   rmdir.

0000022b <__c.4972>:
     22b:	2d 72 00                                            -r.

0000022e <__c.4970>:
     22e:	72 6d 00                                            rm.

00000231 <__c.4968>:
     231:	6c 73 00                                            ls.

00000234 <__c.4966>:
     234:	74 6f 70 00                                         top.

00000238 <__c.4964>:
     238:	64 65 76 00                                         dev.

0000023c <__c.4962>:
     23c:	73 64 6c 00                                         sdl.

00000240 <__c.4960>:
     240:	68 65 6c 70 00                                      help.

00000245 <__c.4955>:
     245:	73 63 74 00                                         sct.

00000249 <__c.4953>:
     249:	49 6e 76 61 6c 69 64 20 6e 75 6d 62 65 72 20 6f     Invalid number o
     259:	66 20 74 6f 6b 65 6e 73 0a 0d 00                    f tokens...

00000264 <__c.4951>:
     264:	49 6e 76 61 6c 69 64 20 74 6f 6b 65 6e 20 73 69     Invalid token si
     274:	7a 65 0a 0d 00                                      ze...

00000279 <__c.4722>:
     279:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     289:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d     --------------'-
     299:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     2a9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     2b9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000002c6 <__c.4720>:
     2c6:	7c 20 68 65 61 64 20 20 20 20 7c 20 3c 61 72 67     | head    | <arg
     2d6:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     2e6:	50 72 69 6e 74 73 20 61 20 66 69 6c 65 20 3c 61     Prints a file <a
     2f6:	72 67 31 3e 20 74 6f 20 74 68 65 20 74 65 72 6d     rg1> to the term
     306:	69 6e 61 6c 2e 20 20 20 20 7c 0a 0d 00              inal.    |...

00000313 <__c.4718>:
     313:	7c 20 74 6f 75 63 68 20 20 20 7c 20 3c 61 72 67     | touch   | <arg
     323:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     333:	43 72 65 61 74 65 20 66 69 6c 65 20 3c 61 72 67     Create file <arg
     343:	31 3e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     1>.             
     353:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000360 <__c.4716>:
     360:	7c 20 6d 6b 64 69 72 20 20 20 7c 20 3c 61 72 67     | mkdir   | <arg
     370:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     380:	43 72 65 61 74 65 20 61 20 64 69 72 65 63 74 6f     Create a directo
     390:	72 79 20 3c 61 72 67 31 3e 2e 20 20 20 20 20 20     ry <arg1>.      
     3a0:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000003ad <__c.4714>:
     3ad:	7c 20 72 6d 64 69 72 20 20 20 7c 20 3c 61 72 67     | rmdir   | <arg
     3bd:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     3cd:	52 65 6d 6f 76 65 20 61 20 64 69 72 65 63 74 6f     Remove a directo
     3dd:	72 79 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ry.             
     3ed:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000003fa <__c.4712>:
     3fa:	7c 20 72 6d 20 20 20 20 20 20 7c 20 3c 61 72 67     | rm      | <arg
     40a:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     41a:	52 65 6d 6f 76 65 20 61 20 66 69 6c 65 20 3c 61     Remove a file <a
     42a:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     43a:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000447 <__c.4710>:
     447:	7c 20 63 64 20 20 20 20 20 20 7c 20 3c 61 72 67     | cd      | <arg
     457:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     467:	43 68 61 6e 67 65 20 74 6f 20 64 69 72 20 3c 61     Change to dir <a
     477:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     487:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000494 <__c.4708>:
     494:	7c 20 6c 73 20 20 20 20 20 20 7c 20 3c 61 72 67     | ls      | <arg
     4a4:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     4b4:	44 69 73 70 6c 61 79 73 20 74 68 65 20 63 6f 6e     Displays the con
     4c4:	74 65 6e 74 73 20 6f 66 20 64 69 72 20 3c 61 72     tents of dir <ar
     4d4:	67 31 3e 2e 20 20 20 20 20 7c 0a 0d 00              g1>.     |...

000004e1 <__c.4706>:
     4e1:	7c 20 74 6f 70 20 20 20 20 20 7c 20 20 20 20 20     | top     |     
     4f1:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     501:	44 69 73 70 6c 61 79 73 20 73 79 73 74 65 6d 20     Displays system 
     511:	73 74 61 74 69 73 74 69 63 73 2e 20 20 20 20 20     statistics.     
     521:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000052e <__c.4704>:
     52e:	7c 20 64 65 76 20 20 20 20 20 7c 20 20 20 20 20     | dev     |     
     53e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     54e:	52 65 74 75 72 6e 73 20 61 20 6c 69 73 74 20 6f     Returns a list o
     55e:	66 20 61 63 74 69 76 65 20 64 72 69 76 65 72 73     f active drivers
     56e:	2e 20 20 20 20 20 20 20 20 7c 0a 0d 00              .        |...

0000057b <__c.4702>:
     57b:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     58b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     59b:	30 2c 31 2c 32 20 28 6c 6f 77 2c 20 6d 65 64 2c     0,1,2 (low, med,
     5ab:	20 68 69 67 68 29 20 20 20 20 20 20 20 20 20 20      high)          
     5bb:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000005c8 <__c.4700>:
     5c8:	7c 20 73 64 6c 20 20 20 20 20 7c 20 3c 61 72 67     | sdl     | <arg
     5d8:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     5e8:	53 65 74 20 74 68 65 20 64 65 62 75 67 20 6c 65     Set the debug le
     5f8:	76 65 6c 2c 20 77 68 65 72 65 20 3c 61 72 67 31     vel, where <arg1
     608:	3e 20 3d 20 20 20 20 20 20 7c 0a 0d 00              > =      |...

00000615 <__c.4698>:
     615:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     625:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d     --------------|-
     635:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     645:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     655:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00000662 <__c.4696>:
     662:	7c 20 43 6f 6d 6d 61 6e 64 20 7c 20 20 20 20 20     | Command |     
     672:	41 72 67 75 6d 65 6e 74 73 20 20 20 20 20 7c 20     Arguments     | 
     682:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 65 73                  Des
     692:	63 72 69 70 74 69 6f 6e 20 20 20 20 20 20 20 20     cription        
     6a2:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000006af <__c.4694>:
     6af:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     6bf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6cf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6df:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     6ef:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

000006fc <__c.4764>:
     6fc:	54 68 65 20 27 45 6e 74 65 72 27 20 62 75 74 74     The 'Enter' butt
     70c:	6f 6e 20 77 69 6c 6c 20 65 6e 61 62 6c 65 2f 64     on will enable/d
     71c:	69 73 61 62 6c 65 20 61 20 64 65 62 75 67 67 69     isable a debuggi
     72c:	6e 67 20 73 65 73 73 69 6f 6e 2e 20 50 72 65 73     ng session. Pres
     73c:	73 20 27 45 6e 74 65 72 27 20 74 6f 20 62 65 67     s 'Enter' to beg
     74c:	69 6e 2e 2e 2e 0a 0d 00                             in......

00000754 <__c.4762>:
     754:	49 6e 76 61 6c 69 64 20 4c 65 76 65 6c 0a 0d 00     Invalid Level...

00000764 <__c.4797>:
     764:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     774:	2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --'-------------
     784:	2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27     -'-------------'
     794:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a     --------------'.
     7a4:	0d 00                                               ..

000007a6 <__c.4792>:
     7a6:	7c 20 25 31 36 73 7c 20 25 32 64 20 20 20 20 20     | %16s| %2d     
     7b6:	20 20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20           | %2d     
     7c6:	20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20 20          | %2d      
     7d6:	20 20 20 20 20 7c 0a 0d 00                               |...

000007df <__c.4790>:
     7df:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     7ef:	2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --|-------------
     7ff:	2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c     -|-------------|
     80f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a     --------------|.
     81f:	0d 00                                               ..

00000821 <__c.4788>:
     821:	7c 20 20 20 44 72 69 76 65 72 20 4e 61 6d 65 20     |   Driver Name 
     831:	20 20 7c 20 4d 61 6a 6f 72 20 4e 75 6d 62 65 72       | Major Number
     841:	20 7c 20 4d 69 6e 6f 72 20 4e 75 6d 62 65 72 7c      | Minor Number|
     851:	20 23 20 6f 66 20 48 61 6e 64 6c 65 73 20 7c 0a      # of Handles |.
     861:	0d 00                                               ..

00000863 <__c.4786>:
     863:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     873:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     883:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     893:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a     --------------..
     8a3:	0d 00                                               ..

000008a5 <__c.4881>:
     8a5:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     8b5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     8c5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

000008d3 <__c.4879>:
     8d3:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     8e3:	35 20 6d 69 6e 75 74 65 73 20 7c 20 25 31 32 2e     5 minutes | %12.
     8f3:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

000008fc <__c.4877>:
     8fc:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     90c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     91c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

0000092a <__c.4875>:
     92a:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     93a:	31 20 6d 69 6e 75 74 65 20 20 7c 20 25 31 32 2e     1 minute  | %12.
     94a:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

00000953 <__c.4873>:
     953:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     963:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     973:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000981 <__c.4871>:
     981:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     991:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     9a1:	25 25 20 7c 0a 0d 00                                %% |...

000009a8 <__c.4869>:
     9a8:	7c 46 72 65 65 20 52 41 4d 20 7c 20 20 20 20 20     |Free RAM |     
     9b8:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     9c8:	20 7c 0a 0d 00                                       |...

000009cd <__c.4867>:
     9cd:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     9dd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     9ed:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

000009fb <__c.4865>:
     9fb:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     a0b:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     a1b:	25 25 20 7c 0a 0d 00                                %% |...

00000a22 <__c.4863>:
     a22:	7c 55 73 65 64 20 52 41 4d 20 7c 20 20 20 20 20     |Used RAM |     
     a32:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     a42:	20 7c 0a 0d 00                                       |...

00000a47 <__c.4861>:
     a47:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     a57:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     a67:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000a75 <__c.4859>:
     a75:	7c 20 20 20 2e 68 65 61 70 20 7c 20 20 20 20 20     |   .heap |     
     a85:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     a95:	0a 0d 00                                            ...

00000a98 <__c.4857>:
     a98:	7c 20 20 20 20 2e 62 73 73 20 7c 20 20 20 20 20     |    .bss |     
     aa8:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     ab8:	0a 0d 00                                            ...

00000abb <__c.4855>:
     abb:	7c 20 20 20 2e 64 61 74 61 20 7c 20 20 20 20 20     |   .data |     
     acb:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     adb:	0a 0d 00                                            ...

00000ade <__c.4853>:
     ade:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     aee:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     ----------|-----
     afe:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00           ----------|...

00000b0c <__c.4851>:
     b0c:	7c 20 53 65 63 74 69 6f 6e 20 7c 20 20 20 20 41     | Section |    A
     b1c:	64 64 72 65 73 73 20 20 20 20 7c 20 20 20 53 69     ddress    |   Si
     b2c:	7a 65 20 42 79 74 65 73 20 20 7c 0a 0d 00           ze Bytes  |...

00000b3a <__c.4849>:
     b3a:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     .---------.-----
     b4a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     ----------.-----
     b5a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00           ----------....

00000b68 <__c.4650>:
     b68:	0d 0a 50 72 65 73 73 20 27 45 6e 74 65 72 27 20     ..Press 'Enter' 
     b78:	74 6f 20 72 65 73 75 6d 65 2c 20 27 71 27 20 74     to resume, 'q' t
     b88:	6f 20 73 74 6f 70 2e 0a 0d 00                       o stop....

00000b92 <__c.4691>:
     b92:	25 33 64 5d 20 20 00                                %3d]  .

00000b99 <__c.4689>:
     b99:	25 30 33 64 5d 20 20 00                             %03d]  .

00000ba1 <__c.4687>:
     ba1:	25 30 30 33 64 5d 20 20 00                          %003d]  .

00000baa <__c.4685>:
     baa:	25 32 64 3a 00                                      %2d:.

00000baf <__c.4683>:
     baf:	25 30 32 64 3a 00                                   %02d:.

00000bb5 <__c.4681>:
     bb5:	25 32 64 3a 00                                      %2d:.

00000bba <__c.4679>:
     bba:	25 30 32 64 3a 00                                   %02d:.

00000bc0 <__c.4677>:
     bc0:	5b 25 32 64 3a 00                                   [%2d:.

00000bc6 <__c.4675>:
     bc6:	5b 25 30 32 64 3a 00                                [%02d:.

00000bcd <__c.3937>:
     bcd:	61 72 62 5f 73 79 73 54 69 6d 65 72 53 74 61 72     arb_sysTimerStar
     bdd:	74 20 66 61 69 6c 65 64 20 77 69 74 68 20 25 64     t failed with %d
     bed:	2e 0a 0d 00                                         ....

00000bf1 <__c.4465>:
     bf1:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     c01:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d     --------------'-
     c11:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     c21:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     c31:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00000c3e <__c.4463>:
     c3e:	7c 20 73 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | slt     |     
     c4e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     c5e:	50 65 72 66 6f 72 6d 73 20 61 20 53 50 49 20 6c     Performs a SPI l
     c6e:	6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20 20     oopback test.   
     c7e:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000c8b <__c.4461>:
     c8b:	7c 20 74 67 74 20 20 20 20 20 7c 20 20 20 20 20     | tgt     |     
     c9b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     cab:	50 65 72 66 6f 72 6d 73 20 61 20 74 65 73 74 20     Performs a test 
     cbb:	75 73 69 6e 67 20 61 20 74 69 6d 65 72 20 61 6e     using a timer an
     ccb:	64 20 32 20 67 70 69 6f 73 7c 0a 0d 00              d 2 gpios|...

00000cd8 <__c.4459>:
     cd8:	7c 20 74 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | tlt     |     
     ce8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     cf8:	50 65 72 66 6f 72 6d 73 20 61 20 54 57 49 20 6c     Performs a TWI l
     d08:	6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20 20     oopback test.   
     d18:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000d25 <__c.4457>:
     d25:	7c 20 75 6c 74 20 20 20 20 20 7c 20 20 20 20 20     | ult     |     
     d35:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     d45:	50 65 72 66 6f 72 6d 73 20 61 20 55 41 52 54 20     Performs a UART 
     d55:	6c 6f 6f 70 62 61 63 6b 20 74 65 73 74 2e 20 20     loopback test.  
     d65:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000d72 <__c.4455>:
     d72:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     d82:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d     --------------|-
     d92:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     da2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     db2:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

00000dbf <__c.4453>:
     dbf:	7c 20 43 6f 6d 6d 61 6e 64 20 7c 20 20 20 20 20     | Command |     
     dcf:	41 72 67 75 6d 65 6e 74 73 20 20 20 20 20 7c 20     Arguments     | 
     ddf:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 65 73                  Des
     def:	63 72 69 70 74 69 6f 6e 20 20 20 20 20 20 20 20     cription        
     dff:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000e0c <__c.4451>:
     e0c:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     e1c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e2c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e3c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     e4c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00000e59 <__c.4290>:
     e59:	54 65 73 74 20 66 69 6e 69 73 68 65 64 2e 20 52     Test finished. R
     e69:	65 63 65 69 76 65 64 20 25 64 20 6f 75 74 20 6f     eceived %d out o
     e79:	66 20 25 64 20 6d 65 73 73 61 67 65 73 20 77 69     f %d messages wi
     e89:	74 68 20 25 64 20 65 72 72 6f 72 73 2e 0a 0d 00     th %d errors....

00000e99 <__c.4285>:
     e99:	0a 0d 00                                            ...

00000e9c <__c.4280>:
     e9c:	4d 65 73 73 61 67 65 20 74 6f 6f 20 62 69 67 20     Message too big 
     eac:	66 6f 72 20 6d 61 69 6c 62 6f 78 2e 0a 0d 00        for mailbox....

00000ebb <__c.4278>:
     ebb:	45 6e 74 65 72 20 74 68 65 20 74 65 73 74 20 6d     Enter the test m
     ecb:	65 73 73 61 67 65 2d 3e 20 00                       essage-> .

00000ed5 <__c.4276>:
     ed5:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

00000ee3 <__c.4274>:
     ee3:	53 65 6c 65 63 74 20 6e 75 6d 62 65 72 20 6f 66     Select number of
     ef3:	20 74 72 69 61 6c 73 20 28 30 3c 2d 3e 31 30 30      trials (0<->100
     f03:	30 30 29 2c 20 70 72 65 73 73 20 65 6e 74 65 72     00), press enter
     f13:	2d 3e 20 00                                         -> .

00000f17 <__c.4272>:
     f17:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     f27:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
     f37:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     f47:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
     f57:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00000f64 <__c.4270>:
     f64:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
     f74:	20 20 20 20 20 7c 20 61 6e 64 20 74 77 6f 20 6d          | and two m
     f84:	61 69 6c 62 6f 78 20 6d 6f 64 75 6c 65 73 2e 20     ailbox modules. 
     f94:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
     fa4:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000fb1 <__c.4268>:
     fb1:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
     fc1:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
     fd1:	61 64 73 20 75 73 69 6e 67 20 53 50 49 32 20 20     ads using SPI2  
     fe1:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
     ff1:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000ffe <__c.4266>:
     ffe:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    100e:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
    101e:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
    102e:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 46 36 2e 20     orm- | and PF6. 
    103e:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000104b <__c.4264>:
    104b:	7c 20 53 50 49 20 6c 6f 6f 70 62 61 63 6b 20 74     | SPI loopback t
    105b:	65 73 74 20 20 7c 20 4c 6f 6f 70 73 20 62 61 63     est  | Loops bac
    106b:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
    107b:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
    108b:	69 6e 73 20 50 46 35 20 20 7c 0a 0d 00              ins PF5  |...

00001098 <__c.4262>:
    1098:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    10a8:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    10b8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    10c8:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    10d8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

000010e5 <__c.4260>:
    10e5:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    10f5:	20 20 20 20 20 7c 20 61 6e 64 20 74 77 6f 20 6d          | and two m
    1105:	61 69 6c 62 6f 78 20 6d 6f 64 75 6c 65 73 2e 20     ailbox modules. 
    1115:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    1125:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001132 <__c.4258>:
    1132:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1142:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
    1152:	61 64 73 20 75 73 69 6e 67 20 54 57 49 32 2c 20     ads using TWI2, 
    1162:	54 57 49 33 20 7c 20 70 69 6e 73 20 50 44 31 20     TWI3 | pins PD1 
    1172:	61 6e 64 20 50 45 31 2e 20 7c 0a 0d 00              and PE1. |...

0000117f <__c.4256>:
    117f:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    118f:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
    119f:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
    11af:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 45 30 20 61     orm- | and PE0 a
    11bf:	73 20 77 65 6c 6c 20 61 73 7c 0a 0d 00              s well as|...

000011cc <__c.4254>:
    11cc:	7c 20 54 57 49 20 6c 6f 6f 70 62 61 63 6b 20 74     | TWI loopback t
    11dc:	65 73 74 20 20 7c 20 4c 6f 6f 70 73 20 62 61 63     est  | Loops bac
    11ec:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
    11fc:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
    120c:	69 6e 73 20 50 44 30 20 20 7c 0a 0d 00              ins PD0  |...

00001219 <__c.4252>:
    1219:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    1229:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1239:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1249:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1259:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00001266 <__c.4250>:
    1266:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1276:	20 20 20 20 20 7c 20 44 4d 41 27 73 2c 20 61 6e          | DMA's, an
    1286:	64 20 74 77 6f 20 6d 61 69 6c 62 6f 78 20 6d 6f     d two mailbox mo
    1296:	64 75 6c 65 73 7c 20 20 20 20 20 20 20 20 20 20     dules|          
    12a6:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000012b3 <__c.4248>:
    12b3:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    12c3:	20 20 20 20 20 7c 20 54 65 73 74 20 74 68 72 65          | Test thre
    12d3:	61 64 73 20 75 73 69 6e 67 20 55 41 52 54 36 2c     ads using UART6,
    12e3:	20 74 77 6f 20 7c 20 20 20 20 20 20 20 20 20 20      two |          
    12f3:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001300 <__c.4246>:
    1300:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1310:	20 20 20 20 20 7c 20 74 68 65 20 63 6f 6e 73 6f          | the conso
    1320:	6c 65 20 61 6e 64 20 75 73 72 5f 70 6c 61 74 66     le and usr_platf
    1330:	6f 72 6d 2d 20 7c 20 61 6e 64 20 50 45 37 2e 20     orm- | and PE7. 
    1340:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000134d <__c.4244>:
    134d:	7c 20 55 41 52 54 20 6c 6f 6f 70 62 61 63 6b 20     | UART loopback 
    135d:	74 65 73 74 20 7c 20 4c 6f 6f 70 73 20 62 61 63     test | Loops bac
    136d:	6b 20 61 20 6d 65 73 73 61 67 65 20 62 65 74 77     k a message betw
    137d:	65 65 6e 20 20 7c 20 43 6f 6e 6e 65 63 74 20 70     een  | Connect p
    138d:	69 6e 73 20 50 45 36 20 20 7c 0a 0d 00              ins PE6  |...

0000139a <__c.4242>:
    139a:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
    13aa:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    13ba:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    13ca:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    13da:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

000013e7 <__c.4240>:
    13e7:	7c 20 20 20 20 20 20 20 20 54 65 73 74 20 20 20     |        Test   
    13f7:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    1407:	44 65 73 63 72 69 70 74 69 6f 6e 20 20 20 20 20     Description     
    1417:	20 20 20 20 20 7c 20 20 20 20 20 20 20 53 65 74          |       Set
    1427:	75 70 20 20 20 20 20 20 20 7c 0a 0d 00              up       |...

00001434 <__c.4238>:
    1434:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
    1444:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1454:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1464:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1474:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00001481 <__c.4405>:
    1481:	54 65 73 74 20 66 69 6e 69 73 68 65 64 2e 0a 0d     Test finished...
	...

00001492 <__c.4400>:
    1492:	54 69 6d 65 72 20 69 6e 74 65 72 72 75 70 74 2e     Timer interrupt.
    14a2:	2e 2e 0a 0d 00                                      .....

000014a7 <__c.4397>:
    14a7:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

000014b5 <__c.4395>:
    14b5:	53 65 6c 65 63 74 20 6e 75 6d 62 65 72 20 6f 66     Select number of
    14c5:	20 74 72 69 61 6c 73 20 28 30 3c 2d 3e 31 30 30      trials (0<->100
    14d5:	30 30 29 2c 20 70 72 65 73 73 20 65 6e 74 65 72     00), press enter
    14e5:	2d 3e 20 00                                         -> .

000014e9 <__c.4393>:
    14e9:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
    14f9:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1509:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1519:	2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----'----------
    1529:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00001536 <__c.4391>:
    1536:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1546:	20 20 20 20 20 7c 20 63 61 75 73 65 73 20 61 6e          | causes an
    1556:	20 69 6e 74 65 72 72 75 70 74 20 6f 6e 20 47 50      interrupt on GP
    1566:	49 4f 5f 31 2e 7c 20 20 20 20 20 20 20 20 20 20     IO_1.|          
    1576:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00001583 <__c.4389>:
    1583:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    1593:	20 20 20 20 20 7c 20 74 69 6d 65 72 20 74 6f 67          | timer tog
    15a3:	67 6c 65 73 20 47 50 49 4f 5f 32 20 77 68 69 63     gles GPIO_2 whic
    15b3:	68 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20     h    |          
    15c3:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000015d0 <__c.4387>:
    15d0:	7c 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     |               
    15e0:	20 20 20 20 20 7c 20 61 74 20 61 20 6f 6e 65 20          | at a one 
    15f0:	73 65 63 6f 6e 64 20 72 61 74 65 2e 20 54 68 65     second rate. The
    1600:	20 20 20 20 20 7c 20 61 6e 64 20 50 48 34 2e 20          | and PH4. 
    1610:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

0000161d <__c.4385>:
    161d:	7c 20 54 69 6d 65 72 2f 47 50 49 4f 20 74 65 73     | Timer/GPIO tes
    162d:	74 20 20 20 20 7c 20 45 6e 61 62 6c 65 73 20 54     t    | Enables T
    163d:	49 4d 45 52 5f 31 20 77 68 69 63 68 20 67 6f 65     IMER_1 which goe
    164d:	73 20 6f 66 66 7c 20 43 6f 6e 6e 65 63 74 20 70     s off| Connect p
    165d:	69 6e 73 20 50 48 33 20 20 7c 0a 0d 00              ins PH3  |...

0000166a <__c.4383>:
    166a:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
    167a:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    168a:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    169a:	2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     -----|----------
    16aa:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

000016b7 <__c.4381>:
    16b7:	7c 20 20 20 20 20 20 20 20 54 65 73 74 20 20 20     |        Test   
    16c7:	20 20 20 20 20 7c 20 20 20 20 20 20 20 20 20 20          |          
    16d7:	44 65 73 63 72 69 70 74 69 6f 6e 20 20 20 20 20     Description     
    16e7:	20 20 20 20 20 7c 20 20 20 20 20 20 20 53 65 74          |       Set
    16f7:	75 70 20 20 20 20 20 20 20 7c 0a 0d 00              up       |...

00001704 <__c.4379>:
    1704:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
    1714:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1724:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1734:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
    1744:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00001751 <__c.1790>:
    1751:	6e 61 6e 00                                         nan.

00001755 <__c.1788>:
    1755:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
    1765:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
    1775:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
    1785:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
    1795:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
    17a5:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
    17b5:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
    17c5:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
    17d5:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
    17e5:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
    17f5:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
    1805:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
    1815:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
    1825:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
    1835:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
    1845:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00001854 <__ctors_start>:
    1854:	88 5e       	subi	r24, 0xE8	; 232
    1856:	fd 76       	andi	r31, 0x6D	; 109

00001858 <__ctors_end>:
    1858:	11 24       	eor	r1, r1
    185a:	1f be       	out	0x3f, r1	; 63
    185c:	cf ef       	ldi	r28, 0xFF	; 255
    185e:	df e3       	ldi	r29, 0x3F	; 63
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	00 e0       	ldi	r16, 0x00	; 0
    1866:	0c bf       	out	0x3c, r16	; 60
    1868:	18 be       	out	0x38, r1	; 56
    186a:	19 be       	out	0x39, r1	; 57
    186c:	1a be       	out	0x3a, r1	; 58
    186e:	1b be       	out	0x3b, r1	; 59

00001870 <__do_copy_data>:
    1870:	12 e2       	ldi	r17, 0x22	; 34
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b0 e2       	ldi	r27, 0x20	; 32
    1876:	e6 e7       	ldi	r30, 0x76	; 118
    1878:	f3 e7       	ldi	r31, 0x73	; 115
    187a:	01 e0       	ldi	r16, 0x01	; 1
    187c:	0b bf       	out	0x3b, r16	; 59
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <__do_copy_data+0x14>
    1880:	07 90       	elpm	r0, Z+
    1882:	0d 92       	st	X+, r0
    1884:	a6 38       	cpi	r26, 0x86	; 134
    1886:	b1 07       	cpc	r27, r17
    1888:	d9 f7       	brne	.-10     	; 0x1880 <__do_copy_data+0x10>
    188a:	1b be       	out	0x3b, r1	; 59

0000188c <__do_clear_bss>:
    188c:	16 e2       	ldi	r17, 0x26	; 38
    188e:	a6 e8       	ldi	r26, 0x86	; 134
    1890:	b2 e2       	ldi	r27, 0x22	; 34
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <.do_clear_bss_start>

00001894 <.do_clear_bss_loop>:
    1894:	1d 92       	st	X+, r1

00001896 <.do_clear_bss_start>:
    1896:	a8 30       	cpi	r26, 0x08	; 8
    1898:	b1 07       	cpc	r27, r17
    189a:	e1 f7       	brne	.-8      	; 0x1894 <.do_clear_bss_loop>

0000189c <__do_global_ctors>:
    189c:	18 e1       	ldi	r17, 0x18	; 24
    189e:	c8 e5       	ldi	r28, 0x58	; 88
    18a0:	d8 e1       	ldi	r29, 0x18	; 24
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <.do_global_ctors_start>

000018a4 <.do_global_ctors_loop>:
    18a4:	22 97       	sbiw	r28, 0x02	; 2
    18a6:	fe 01       	movw	r30, r28
    18a8:	0e 94 b5 b9 	call	0x1736a	; 0x1736a <__tablejump__>

000018ac <.do_global_ctors_start>:
    18ac:	c4 35       	cpi	r28, 0x54	; 84
    18ae:	d1 07       	cpc	r29, r17
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <.do_global_ctors_loop>
    18b2:	0e 94 18 8a 	call	0x11430	; 0x11430 <main>
    18b6:	0c 94 e5 b6 	jmp	0x16dca	; 0x16dca <exit>

000018ba <__bad_interrupt>:
    18ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000018be <__lshrdi3>:
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	60 97       	sbiw	r28, 0x10	; 16
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	a8 2f       	mov	r26, r24
    18d4:	00 23       	and	r16, r16
    18d6:	09 f4       	brne	.+2      	; 0x18da <__lshrdi3+0x1c>
    18d8:	61 c0       	rjmp	.+194    	; 0x199c <__lshrdi3+0xde>
    18da:	7e 01       	movw	r14, r28
    18dc:	08 94       	sec
    18de:	e1 1c       	adc	r14, r1
    18e0:	f1 1c       	adc	r15, r1
    18e2:	88 e0       	ldi	r24, 0x08	; 8
    18e4:	f7 01       	movw	r30, r14
    18e6:	11 92       	st	Z+, r1
    18e8:	8a 95       	dec	r24
    18ea:	e9 f7       	brne	.-6      	; 0x18e6 <__lshrdi3+0x28>
    18ec:	29 83       	std	Y+1, r18	; 0x01
    18ee:	3a 83       	std	Y+2, r19	; 0x02
    18f0:	4b 83       	std	Y+3, r20	; 0x03
    18f2:	5c 83       	std	Y+4, r21	; 0x04
    18f4:	6d 83       	std	Y+5, r22	; 0x05
    18f6:	7e 83       	std	Y+6, r23	; 0x06
    18f8:	af 83       	std	Y+7, r26	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	80 1b       	sub	r24, r16
    1900:	e8 2f       	mov	r30, r24
    1902:	ff 27       	eor	r31, r31
    1904:	e7 fd       	sbrc	r30, 7
    1906:	f0 95       	com	r31
    1908:	4d 81       	ldd	r20, Y+5	; 0x05
    190a:	5e 81       	ldd	r21, Y+6	; 0x06
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	18 16       	cp	r1, r24
    1912:	84 f0       	brlt	.+32     	; 0x1934 <__lshrdi3+0x76>
    1914:	1d 86       	std	Y+13, r1	; 0x0d
    1916:	1e 86       	std	Y+14, r1	; 0x0e
    1918:	1f 86       	std	Y+15, r1	; 0x0f
    191a:	18 8a       	std	Y+16, r1	; 0x10
    191c:	88 27       	eor	r24, r24
    191e:	99 27       	eor	r25, r25
    1920:	8e 1b       	sub	r24, r30
    1922:	9f 0b       	sbc	r25, r31
    1924:	04 c0       	rjmp	.+8      	; 0x192e <__lshrdi3+0x70>
    1926:	76 95       	lsr	r23
    1928:	67 95       	ror	r22
    192a:	57 95       	ror	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	d2 f7       	brpl	.-12     	; 0x1926 <__lshrdi3+0x68>
    1932:	28 c0       	rjmp	.+80     	; 0x1984 <__lshrdi3+0xc6>
    1934:	20 2f       	mov	r18, r16
    1936:	33 27       	eor	r19, r19
    1938:	27 fd       	sbrc	r18, 7
    193a:	30 95       	com	r19
    193c:	db 01       	movw	r26, r22
    193e:	ca 01       	movw	r24, r20
    1940:	02 2e       	mov	r0, r18
    1942:	04 c0       	rjmp	.+8      	; 0x194c <__lshrdi3+0x8e>
    1944:	b6 95       	lsr	r27
    1946:	a7 95       	ror	r26
    1948:	97 95       	ror	r25
    194a:	87 95       	ror	r24
    194c:	0a 94       	dec	r0
    194e:	d2 f7       	brpl	.-12     	; 0x1944 <__lshrdi3+0x86>
    1950:	8d 87       	std	Y+13, r24	; 0x0d
    1952:	9e 87       	std	Y+14, r25	; 0x0e
    1954:	af 87       	std	Y+15, r26	; 0x0f
    1956:	b8 8b       	std	Y+16, r27	; 0x10
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <__lshrdi3+0xa4>
    195a:	44 0f       	add	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	66 1f       	adc	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	ea 95       	dec	r30
    1964:	d2 f7       	brpl	.-12     	; 0x195a <__lshrdi3+0x9c>
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	ab 81       	ldd	r26, Y+3	; 0x03
    196c:	bc 81       	ldd	r27, Y+4	; 0x04
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <__lshrdi3+0xba>
    1970:	b6 95       	lsr	r27
    1972:	a7 95       	ror	r26
    1974:	97 95       	ror	r25
    1976:	87 95       	ror	r24
    1978:	2a 95       	dec	r18
    197a:	d2 f7       	brpl	.-12     	; 0x1970 <__lshrdi3+0xb2>
    197c:	48 2b       	or	r20, r24
    197e:	59 2b       	or	r21, r25
    1980:	6a 2b       	or	r22, r26
    1982:	7b 2b       	or	r23, r27
    1984:	49 87       	std	Y+9, r20	; 0x09
    1986:	5a 87       	std	Y+10, r21	; 0x0a
    1988:	6b 87       	std	Y+11, r22	; 0x0b
    198a:	7c 87       	std	Y+12, r23	; 0x0c
    198c:	29 85       	ldd	r18, Y+9	; 0x09
    198e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1990:	4b 85       	ldd	r20, Y+11	; 0x0b
    1992:	5c 85       	ldd	r21, Y+12	; 0x0c
    1994:	6d 85       	ldd	r22, Y+13	; 0x0d
    1996:	7e 85       	ldd	r23, Y+14	; 0x0e
    1998:	af 85       	ldd	r26, Y+15	; 0x0f
    199a:	98 89       	ldd	r25, Y+16	; 0x10
    199c:	8a 2f       	mov	r24, r26
    199e:	60 96       	adiw	r28, 0x10	; 16
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <consoleClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error consoleClose( t_DEVHANDLE t_handle)
{
    19b0:	1f 93       	push	r17
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	0f 92       	push	r0
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    19c2:	80 91 86 22 	lds	r24, 0x2286
    19c6:	90 91 87 22 	lds	r25, 0x2287
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers--;
    19d0:	80 91 8e 22 	lds	r24, 0x228E
    19d4:	81 50       	subi	r24, 0x01	; 1
    19d6:	80 93 8e 22 	sts	0x228E, r24

   /*------------------------------------------------------------------------*
    * If there are no more handles attached to this driver than disable the
    * receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 0)
    19da:	88 23       	and	r24, r24
    19dc:	51 f4       	brne	.+20     	; 0x19f2 <consoleClose+0x42>
   {

      t_uErr = hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    19de:	80 91 8f 22 	lds	r24, 0x228F
    19e2:	90 91 90 22 	lds	r25, 0x2290
    19e6:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <hal_disableUartRxInt>

      if( t_uErr < 0)
    19ea:	87 ff       	sbrs	r24, 7
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <consoleClose+0x42>
    19ee:	16 ef       	ldi	r17, 0xF6	; 246
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <consoleClose+0x44>
    19f2:	10 e0       	ldi	r17, 0x00	; 0
   }/*End if( gt_consoleDev.c_numUsers == 0)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    19f4:	80 91 86 22 	lds	r24, 0x2286
    19f8:	90 91 87 22 	lds	r25, 0x2287
    19fc:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return t_err;

}/*End consoleClose*/
    1a00:	81 2f       	mov	r24, r17
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	1f 91       	pop	r17
    1a0c:	08 95       	ret

00001a0e <consoleOpen>:
   }

}/*End rxComplete*/

static t_error consoleOpen( t_DEVHANDLE t_handle)
{
    1a0e:	1f 93       	push	r17
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_txMutex,
    1a20:	80 91 88 22 	lds	r24, 0x2288
    1a24:	90 91 89 22 	lds	r25, 0x2289
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers++;
    1a2e:	80 91 8e 22 	lds	r24, 0x228E
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	80 93 8e 22 	sts	0x228E, r24

   /*------------------------------------------------------------------------*
    * If there is at least one user-space handle attached to this driver
    * than enable the receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 1)
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	51 f4       	brne	.+20     	; 0x1a50 <consoleOpen+0x42>
   {

      t_uErr = hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1a3c:	80 91 8f 22 	lds	r24, 0x228F
    1a40:	90 91 90 22 	lds	r25, 0x2290
    1a44:	0e 94 c6 54 	call	0xa98c	; 0xa98c <hal_enableUartRxInt>

      if( t_uErr < 0)
    1a48:	87 ff       	sbrs	r24, 7
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <consoleOpen+0x42>
    1a4c:	16 ef       	ldi	r17, 0xF6	; 246
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <consoleOpen+0x44>
    1a50:	10 e0       	ldi	r17, 0x00	; 0
   }/*End if( gt_consoleDev.c_numUsers == 1)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_txMutex);
    1a52:	80 91 88 22 	lds	r24, 0x2288
    1a56:	90 91 89 22 	lds	r25, 0x2289
    1a5a:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return t_err;

}/*End consoleOpen*/
    1a5e:	81 2f       	mov	r24, r17
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	1f 91       	pop	r17
    1a6a:	08 95       	ret

00001a6c <consoleWrite>:
}/*End consoleRead*/

static int16_t consoleWrite( t_DEVHANDLE t_handle,
                             int8_t *pc_buff,
                             uint16_t s_size)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <consoleWrite+0x6>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8a 83       	std	Y+2, r24	; 0x02
    1a78:	9b 83       	std	Y+3, r25	; 0x03
   /*------------------------------------------------------------------------*
    * A call to this function can occur within an interrupt, therefore 
    * mutual exclusion is performed by disabling interrupts for a brief
    * period of time.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
    1a7a:	8f b7       	in	r24, 0x3f	; 63
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	f8 94       	cli

   s_numBytes = hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1a80:	80 91 8f 22 	lds	r24, 0x228F
    1a84:	90 91 90 22 	lds	r25, 0x2290
    1a88:	0e 94 b8 5a 	call	0xb570	; 0xb570 <hal_uartWriteBlock>


   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
    1a8c:	99 81       	ldd	r25, Y+1	; 0x01
    1a8e:	9f bf       	out	0x3f, r25	; 63
    1a90:	28 2f       	mov	r18, r24
    1a92:	33 27       	eor	r19, r19
    1a94:	27 fd       	sbrc	r18, 7
    1a96:	30 95       	com	r19

   return s_numBytes;

}/*End consoleWrite*/
    1a98:	c9 01       	movw	r24, r18
    1a9a:	23 96       	adiw	r28, 0x03	; 3
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <consoleIoctl>:

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	aa 97       	sbiw	r28, 0x2a	; 42
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	89 a7       	std	Y+41, r24	; 0x29
    1ac2:	9a a7       	std	Y+42, r25	; 0x2a
    1ac4:	69 01       	movw	r12, r18
    1ac6:	7a 01       	movw	r14, r20
   t_consoleTokHndl *pt_tokens = NULL;
   int8_t *pc_rxBuffPtr = NULL;
   uint16_t s_size = 0;
   int8_t ac_buff[40];

   switch( (t_consoleCmd)s_command)
    1ac8:	64 30       	cpi	r22, 0x04	; 4
    1aca:	09 f4       	brne	.+2      	; 0x1ace <consoleIoctl+0x28>
    1acc:	bf c0       	rjmp	.+382    	; 0x1c4c <consoleIoctl+0x1a6>
    1ace:	65 30       	cpi	r22, 0x05	; 5
    1ad0:	50 f4       	brcc	.+20     	; 0x1ae6 <consoleIoctl+0x40>
    1ad2:	61 30       	cpi	r22, 0x01	; 1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <consoleIoctl+0x32>
    1ad6:	fe c0       	rjmp	.+508    	; 0x1cd4 <consoleIoctl+0x22e>
    1ad8:	61 30       	cpi	r22, 0x01	; 1
    1ada:	f8 f0       	brcs	.+62     	; 0x1b1a <consoleIoctl+0x74>
    1adc:	62 30       	cpi	r22, 0x02	; 2
    1ade:	49 f1       	breq	.+82     	; 0x1b32 <consoleIoctl+0x8c>
    1ae0:	63 30       	cpi	r22, 0x03	; 3
    1ae2:	91 f4       	brne	.+36     	; 0x1b08 <consoleIoctl+0x62>
    1ae4:	2f c0       	rjmp	.+94     	; 0x1b44 <consoleIoctl+0x9e>
    1ae6:	67 30       	cpi	r22, 0x07	; 7
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <consoleIoctl+0x46>
    1aea:	29 c1       	rjmp	.+594    	; 0x1d3e <consoleIoctl+0x298>
    1aec:	68 30       	cpi	r22, 0x08	; 8
    1aee:	30 f4       	brcc	.+12     	; 0x1afc <consoleIoctl+0x56>
    1af0:	65 30       	cpi	r22, 0x05	; 5
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <consoleIoctl+0x50>
    1af4:	f3 c0       	rjmp	.+486    	; 0x1cdc <consoleIoctl+0x236>
    1af6:	66 30       	cpi	r22, 0x06	; 6
    1af8:	39 f4       	brne	.+14     	; 0x1b08 <consoleIoctl+0x62>
    1afa:	fd c0       	rjmp	.+506    	; 0x1cf6 <consoleIoctl+0x250>
    1afc:	68 30       	cpi	r22, 0x08	; 8
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <consoleIoctl+0x5c>
    1b00:	3f c1       	rjmp	.+638    	; 0x1d80 <consoleIoctl+0x2da>
    1b02:	69 30       	cpi	r22, 0x09	; 9
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <consoleIoctl+0x62>
    1b06:	51 c1       	rjmp	.+674    	; 0x1daa <consoleIoctl+0x304>
    1b08:	3d ef       	ldi	r19, 0xFD	; 253
    1b0a:	e3 2e       	mov	r14, r19
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	f3 2e       	mov	r15, r19
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	03 2f       	mov	r16, r19
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	13 2f       	mov	r17, r19
    1b18:	8f c1       	rjmp	.+798    	; 0x1e38 <consoleIoctl+0x392>
   {
      case CONSOLE_GET_RX_BUFFER_SIZE:

         i_return = (int32_t)utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    1b1a:	80 91 8c 22 	lds	r24, 0x228C
    1b1e:	90 91 8d 22 	lds	r25, 0x228D
    1b22:	0e 94 5f a1 	call	0x142be	; 0x142be <utl_getBufferSize>
    1b26:	7c 01       	movw	r14, r24
    1b28:	00 27       	eor	r16, r16
    1b2a:	f7 fc       	sbrc	r15, 7
    1b2c:	00 95       	com	r16
    1b2e:	10 2f       	mov	r17, r16
    1b30:	83 c1       	rjmp	.+774    	; 0x1e38 <consoleIoctl+0x392>

      break;/*End case CONSOLE_GET_RX_BUFFER_SIZE:*/

      case CONSOLE_GET_BAUD_RATE:

         i_return = (int32_t)hal_uartGetBaudRate( gt_consoleDev.t_uHandle);
    1b32:	80 91 8f 22 	lds	r24, 0x228F
    1b36:	90 91 90 22 	lds	r25, 0x2290
    1b3a:	0e 94 60 55 	call	0xaac0	; 0xaac0 <hal_uartGetBaudRate>
    1b3e:	7b 01       	movw	r14, r22
    1b40:	8c 01       	movw	r16, r24
    1b42:	7a c1       	rjmp	.+756    	; 0x1e38 <consoleIoctl+0x392>
      case CONSOLE_PARSE_CMD_LINE:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxMutex,
    1b44:	80 91 86 22 	lds	r24, 0x2286
    1b48:	90 91 87 22 	lds	r25, 0x2287
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Grab pointer to the user-space token variable...
          *------------------------------------------------------------------*/
         pt_tokens = (t_consoleTokHndl *)((uint16_t)i_arguments);
    1b52:	76 01       	movw	r14, r12

         /*------------------------------------------------------------------*
          * Wait for data to be available in the RX buffer.
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxBlockingSem,
    1b54:	80 91 8a 22 	lds	r24, 0x228A
    1b58:	90 91 8b 22 	lds	r25, 0x228B
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Get the head location of the RX buffer...
          *------------------------------------------------------------------*/
         pc_rxBuffPtr = utl_getBufferPtr( gt_consoleDev.t_rxBuffer);
    1b62:	80 91 8c 22 	lds	r24, 0x228C
    1b66:	90 91 8d 22 	lds	r25, 0x228D
    1b6a:	0e 94 73 a1 	call	0x142e6	; 0x142e6 <utl_getBufferPtr>
    1b6e:	8c 01       	movw	r16, r24
static t_consoleError drv_parseMessage( int8_t *pc_cbuff,
                                        int8_t ac_tok[][CONSOLE_MAX_TOKEN_SIZE],
                                        uint8_t *pc_tokenCount)
{
   int8_t *pc_nextLoc      = NULL;
   int8_t c_bytesRemaining = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    1b70:	80 91 8c 22 	lds	r24, 0x228C
    1b74:	90 91 8d 22 	lds	r25, 0x228D
    1b78:	0e 94 5f a1 	call	0x142be	; 0x142be <utl_getBufferSize>
    1b7c:	68 2f       	mov	r22, r24
    * char. If it exits for another reason, the returned ptr will contain the
    * location of the last character in the buffer i.e. a NULL ptr, '\0', '\n',
    * or whatever is there when reaching the max size.
    *------------------------------------------------------------------------*/
   pc_nextLoc = pc_cbuff;
   (*pc_tokenCount) = 0;
    1b7e:	f6 01       	movw	r30, r12
    1b80:	e0 59       	subi	r30, 0x90	; 144
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	10 82       	st	Z, r1
   do
   {
      pc_nextLoc = drv_strTok( pc_nextLoc,
    1b86:	af 01       	movw	r20, r30
    1b88:	da 01       	movw	r26, r20
    1b8a:	8c 91       	ld	r24, X
    1b8c:	a8 2f       	mov	r26, r24
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	24 e0       	ldi	r18, 0x04	; 4
    1b92:	aa 0f       	add	r26, r26
    1b94:	bb 1f       	adc	r27, r27
    1b96:	2a 95       	dec	r18
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <consoleIoctl+0xec>
    1b9a:	ae 0d       	add	r26, r14
    1b9c:	bf 1d       	adc	r27, r15
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <consoleIoctl+0x11a>
   while( (*pc_in != CONSOLE_RETURN_CHAR)
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
    1ba4:	fd 01       	movw	r30, r26
    1ba6:	e8 0f       	add	r30, r24
    1ba8:	f9 1f       	adc	r31, r25
    1baa:	20 83       	st	Z, r18
    1bac:	01 96       	adiw	r24, 0x01	; 1

      /*---------------------------------------------------------------------*
       * Do we have room to insert the NULL character at the end of the
       * sequence?
       *---------------------------------------------------------------------*/
      if( c_tokenSizeCount == CONSOLE_MAX_TOKEN_SIZE)
    1bae:	80 31       	cpi	r24, 0x10	; 16
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <consoleIoctl+0x116>
    1bb4:	91 e1       	ldi	r25, 0x11	; 17
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	18 c0       	rjmp	.+48     	; 0x1bec <consoleIoctl+0x146>
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
      pc_in++;
    1bbc:	0f 5f       	subi	r16, 0xFF	; 255
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	38 2f       	mov	r19, r24

   /*------------------------------------------------------------------------*
    * Search for delimiting character, if not found stop at max string size
    * carriage return, or NULL char.
    *------------------------------------------------------------------------*/
   while( (*pc_in != CONSOLE_RETURN_CHAR)
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	20 81       	ld	r18, Z
    1bc6:	2d 30       	cpi	r18, 0x0D	; 13
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <consoleIoctl+0x132>
    1bca:	22 23       	and	r18, r18
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <consoleIoctl+0x132>
    1bce:	20 32       	cpi	r18, 0x20	; 32
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <consoleIoctl+0x12e>
    1bd2:	40 c1       	rjmp	.+640    	; 0x1e54 <consoleIoctl+0x3ae>
    1bd4:	86 17       	cp	r24, r22
    1bd6:	34 f3       	brlt	.-52     	; 0x1ba4 <consoleIoctl+0xfe>

   /*------------------------------------------------------------------------*
    * Replace 'ending' character (either c_delim, '\n', '\0' or the character
    * at (c_maxSize) with null character).
    *------------------------------------------------------------------------*/
   pc_out[c_tokenSizeCount] = '\0';
    1bd8:	83 2f       	mov	r24, r19
    1bda:	99 27       	eor	r25, r25
    1bdc:	87 fd       	sbrc	r24, 7
    1bde:	90 95       	com	r25
    1be0:	a8 0f       	add	r26, r24
    1be2:	b9 1f       	adc	r27, r25
    1be4:	1c 92       	st	X, r1

   c_tokenSizeCount++;
    1be6:	93 2f       	mov	r25, r19
    1be8:	9f 5f       	subi	r25, 0xFF	; 255
    * Since we are extracting a token decrement *pc_maxSize by the number of
    * characters stored in pc_out. An addition 1 is subtracted for the
    * 'exit' character as well since its not included in the original s_count
    * value.
    *------------------------------------------------------------------------*/
   (*pc_bytesRemaining) = (*pc_bytesRemaining) - c_tokenSizeCount;
    1bea:	69 1b       	sub	r22, r25
      pc_nextLoc = drv_strTok( pc_nextLoc,
                               &ac_tok[(*pc_tokenCount)][0],
                               ' ',
                               &c_bytesRemaining,
                               &c_tokenSize);
      (*pc_tokenCount)++;
    1bec:	da 01       	movw	r26, r20
    1bee:	8c 91       	ld	r24, X
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	8c 93       	st	X, r24
      if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	10 f0       	brcs	.+4      	; 0x1bfc <consoleIoctl+0x156>
    1bf8:	6a ef       	ldi	r22, 0xFA	; 250
    1bfa:	11 c0       	rjmp	.+34     	; 0x1c1e <consoleIoctl+0x178>
         /*------------------------------------------------------------------*
          * Error too many tokens....
          *------------------------------------------------------------------*/
         return CONSOLE_TOO_MANY_TOKENS;
      }/*End if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)*/
      else if( c_tokenSize > CONSOLE_MAX_TOKEN_SIZE)
    1bfc:	91 31       	cpi	r25, 0x11	; 17
    1bfe:	14 f0       	brlt	.+4      	; 0x1c04 <consoleIoctl+0x15e>
    1c00:	6b ef       	ldi	r22, 0xFB	; 251
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <consoleIoctl+0x178>

      if( t_err < 0)
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
   && (c_bytesRemaining > 0));
    1c04:	f8 01       	movw	r30, r16
    1c06:	80 81       	ld	r24, Z
    1c08:	8a 30       	cpi	r24, 0x0A	; 10
    1c0a:	41 f0       	breq	.+16     	; 0x1c1c <consoleIoctl+0x176>
    1c0c:	88 23       	and	r24, r24
    1c0e:	31 f0       	breq	.+12     	; 0x1c1c <consoleIoctl+0x176>
    1c10:	01 15       	cp	r16, r1
    1c12:	11 05       	cpc	r17, r1
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <consoleIoctl+0x176>
    1c16:	16 16       	cp	r1, r22
    1c18:	0c f4       	brge	.+2      	; 0x1c1c <consoleIoctl+0x176>
    1c1a:	b6 cf       	rjmp	.-148    	; 0x1b88 <consoleIoctl+0xe2>
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
         /*------------------------------------------------------------------*
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
    1c1e:	e6 2e       	mov	r14, r22
    1c20:	ff 24       	eor	r15, r15
    1c22:	e7 fc       	sbrc	r14, 7
    1c24:	f0 94       	com	r15
    1c26:	0f 2d       	mov	r16, r15
    1c28:	1f 2d       	mov	r17, r15
         /*------------------------------------------------------------------*
          * In order to treat the buffer as if its linear (when using the ioctl
          * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers
          * each time we read its contents.
          *------------------------------------------------------------------*/
         ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1c2a:	80 91 8c 22 	lds	r24, 0x228C
    1c2e:	90 91 8d 22 	lds	r25, 0x228D
    1c32:	0e 94 2c a2 	call	0x14458	; 0x14458 <ult_resetBuffer>

         hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1c36:	80 91 8f 22 	lds	r24, 0x228F
    1c3a:	90 91 90 22 	lds	r25, 0x2290
    1c3e:	0e 94 c6 54 	call	0xa98c	; 0xa98c <hal_enableUartRxInt>

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_rxMutex);
    1c42:	80 91 86 22 	lds	r24, 0x2286
    1c46:	90 91 87 22 	lds	r25, 0x2287
    1c4a:	f4 c0       	rjmp	.+488    	; 0x1e34 <consoleIoctl+0x38e>
      case CONSOLE_DISPLAY_PROMPT:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1c4c:	80 91 88 22 	lds	r24, 0x2288
    1c50:	90 91 89 22 	lds	r25, 0x2289
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Set the background color and repaint the entire screen
          *------------------------------------------------------------------*/
         s_size = sprintf( (char *)ac_buff, 
    1c5a:	2d b7       	in	r18, 0x3d	; 61
    1c5c:	3e b7       	in	r19, 0x3e	; 62
    1c5e:	2a 50       	subi	r18, 0x0A	; 10
    1c60:	30 40       	sbci	r19, 0x00	; 0
    1c62:	2d bf       	out	0x3d, r18	; 61
    1c64:	3e bf       	out	0x3e, r19	; 62
    1c66:	ed b7       	in	r30, 0x3d	; 61
    1c68:	fe b7       	in	r31, 0x3e	; 62
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	0f 5f       	subi	r16, 0xFF	; 255
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	ad b7       	in	r26, 0x3d	; 61
    1c74:	be b7       	in	r27, 0x3e	; 62
    1c76:	11 96       	adiw	r26, 0x01	; 1
    1c78:	0d 93       	st	X+, r16
    1c7a:	1c 93       	st	X, r17
    1c7c:	12 97       	sbiw	r26, 0x02	; 2
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e2       	ldi	r25, 0x20	; 32
    1c82:	82 83       	std	Z+2, r24	; 0x02
    1c84:	93 83       	std	Z+3, r25	; 0x03
    1c86:	80 91 92 22 	lds	r24, 0x2292
    1c8a:	99 27       	eor	r25, r25
    1c8c:	87 fd       	sbrc	r24, 7
    1c8e:	90 95       	com	r25
    1c90:	84 83       	std	Z+4, r24	; 0x04
    1c92:	95 83       	std	Z+5, r25	; 0x05
    1c94:	84 e9       	ldi	r24, 0x94	; 148
    1c96:	92 e2       	ldi	r25, 0x22	; 34
    1c98:	86 83       	std	Z+6, r24	; 0x06
    1c9a:	97 83       	std	Z+7, r25	; 0x07
    1c9c:	80 91 93 22 	lds	r24, 0x2293
    1ca0:	99 27       	eor	r25, r25
    1ca2:	87 fd       	sbrc	r24, 7
    1ca4:	90 95       	com	r25
    1ca6:	80 87       	std	Z+8, r24	; 0x08
    1ca8:	91 87       	std	Z+9, r25	; 0x09
    1caa:	0e 94 a3 b8 	call	0x17146	; 0x17146 <sprintf>
    1cae:	ac 01       	movw	r20, r24
                           "\e[1;3%cm[%s]#\e[1;3%cm ",
                           gt_consoleDev.c_cmdPromptColor,
                           gt_consoleDev.ac_dirName,
                           gt_consoleDev.c_fgColor);

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1cb0:	80 91 8f 22 	lds	r24, 0x228F
    1cb4:	90 91 90 22 	lds	r25, 0x2290
    1cb8:	ed b7       	in	r30, 0x3d	; 61
    1cba:	fe b7       	in	r31, 0x3e	; 62
    1cbc:	3a 96       	adiw	r30, 0x0a	; 10
    1cbe:	ed bf       	out	0x3d, r30	; 61
    1cc0:	fe bf       	out	0x3e, r31	; 62
    1cc2:	b8 01       	movw	r22, r16
    1cc4:	0e 94 b8 5a 	call	0xb570	; 0xb570 <hal_uartWriteBlock>
                             s_size);

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    1cc8:	80 91 88 22 	lds	r24, 0x2288
    1ccc:	90 91 89 22 	lds	r25, 0x2289
    1cd0:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
    1cd4:	ee 24       	eor	r14, r14
    1cd6:	ff 24       	eor	r15, r15
    1cd8:	87 01       	movw	r16, r14
    1cda:	ae c0       	rjmp	.+348    	; 0x1e38 <consoleIoctl+0x392>
      case CONSOLE_SET_PROMPT:
      {
         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1cdc:	80 91 88 22 	lds	r24, 0x2288
    1ce0:	90 91 89 22 	lds	r25, 0x2289
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         char *pc_name = (char *)((uint16_t)i_arguments);
         sprintf( gt_consoleDev.ac_dirName, "%s", pc_name);
    1cea:	84 e9       	ldi	r24, 0x94	; 148
    1cec:	92 e2       	ldi	r25, 0x22	; 34
    1cee:	b6 01       	movw	r22, r12
    1cf0:	0e 94 27 b8 	call	0x1704e	; 0x1704e <strcpy>
    1cf4:	e9 cf       	rjmp	.-46     	; 0x1cc8 <consoleIoctl+0x222>
      case CONSOLE_RESET_TERMINAL:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1cf6:	80 91 88 22 	lds	r24, 0x2288
    1cfa:	90 91 89 22 	lds	r25, 0x2289
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Reset the terminal to its default settings...
          *------------------------------------------------------------------*/
         s_size = sprintf_P((char *)ac_buff, PSTR("\ec"));
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <consoleIoctl+0x260>
    1d06:	0f 92       	push	r0
    1d08:	8e 01       	movw	r16, r28
    1d0a:	0f 5f       	subi	r16, 0xFF	; 255
    1d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0e:	ad b7       	in	r26, 0x3d	; 61
    1d10:	be b7       	in	r27, 0x3e	; 62
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	0d 93       	st	X+, r16
    1d16:	1c 93       	st	X, r17
    1d18:	12 97       	sbiw	r26, 0x02	; 2
    1d1a:	84 ef       	ldi	r24, 0xF4	; 244
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
    1d1e:	13 96       	adiw	r26, 0x03	; 3
    1d20:	8d 93       	st	X+, r24
    1d22:	9c 93       	st	X, r25
    1d24:	14 97       	sbiw	r26, 0x04	; 4
    1d26:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    1d2a:	ac 01       	movw	r20, r24

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1d2c:	80 91 8f 22 	lds	r24, 0x228F
    1d30:	90 91 90 22 	lds	r25, 0x2290
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	c2 cf       	rjmp	.-124    	; 0x1cc2 <consoleIoctl+0x21c>
      case CONSOLE_SET_BG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1d3e:	80 91 88 22 	lds	r24, 0x2288
    1d42:	90 91 89 22 	lds	r25, 0x2289
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1d4c:	d7 01       	movw	r26, r14
    1d4e:	c6 01       	movw	r24, r12
    1d50:	c0 97       	sbiw	r24, 0x30	; 48
    1d52:	a1 09       	sbc	r26, r1
    1d54:	b1 09       	sbc	r27, r1
    1d56:	08 97       	sbiw	r24, 0x08	; 8
    1d58:	a1 05       	cpc	r26, r1
    1d5a:	b1 05       	cpc	r27, r1
    1d5c:	b0 f5       	brcc	.+108    	; 0x1dca <consoleIoctl+0x324>
         else
         {
            /*---------------------------------------------------------------*
             * Set the background color and repaint the entire screen
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <consoleIoctl+0x2ba>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <consoleIoctl+0x2bc>
    1d62:	ed b7       	in	r30, 0x3d	; 61
    1d64:	fe b7       	in	r31, 0x3e	; 62
    1d66:	31 96       	adiw	r30, 0x01	; 1
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0f 5f       	subi	r16, 0xFF	; 255
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	ad b7       	in	r26, 0x3d	; 61
    1d70:	be b7       	in	r27, 0x3e	; 62
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	0d 93       	st	X+, r16
    1d76:	1c 93       	st	X, r17
    1d78:	12 97       	sbiw	r26, 0x02	; 2
    1d7a:	87 e1       	ldi	r24, 0x17	; 23
    1d7c:	90 e2       	ldi	r25, 0x20	; 32
    1d7e:	40 c0       	rjmp	.+128    	; 0x1e00 <consoleIoctl+0x35a>

      break;/*End case CONSOLE_SET_BG_COLOR:*/

      case CONSOLE_SET_PROMPT_COLOR:

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1d80:	da 01       	movw	r26, r20
    1d82:	c9 01       	movw	r24, r18
    1d84:	c0 97       	sbiw	r24, 0x30	; 48
    1d86:	a1 09       	sbc	r26, r1
    1d88:	b1 09       	sbc	r27, r1
    1d8a:	08 97       	sbiw	r24, 0x08	; 8
    1d8c:	a1 05       	cpc	r26, r1
    1d8e:	b1 05       	cpc	r27, r1
    1d90:	48 f0       	brcs	.+18     	; 0x1da4 <consoleIoctl+0x2fe>
    1d92:	99 ef       	ldi	r25, 0xF9	; 249
    1d94:	e9 2e       	mov	r14, r25
    1d96:	9f ef       	ldi	r25, 0xFF	; 255
    1d98:	f9 2e       	mov	r15, r25
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	09 2f       	mov	r16, r25
    1d9e:	9f ef       	ldi	r25, 0xFF	; 255
    1da0:	19 2f       	mov	r17, r25
    1da2:	4a c0       	rjmp	.+148    	; 0x1e38 <consoleIoctl+0x392>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_cmdPromptColor = (int8_t)i_arguments;
    1da4:	20 93 92 22 	sts	0x2292, r18
    1da8:	95 cf       	rjmp	.-214    	; 0x1cd4 <consoleIoctl+0x22e>
      case CONSOLE_SET_FG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    1daa:	80 91 88 22 	lds	r24, 0x2288
    1dae:	90 91 89 22 	lds	r25, 0x2289
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    1db8:	d7 01       	movw	r26, r14
    1dba:	c6 01       	movw	r24, r12
    1dbc:	c0 97       	sbiw	r24, 0x30	; 48
    1dbe:	a1 09       	sbc	r26, r1
    1dc0:	b1 09       	sbc	r27, r1
    1dc2:	08 97       	sbiw	r24, 0x08	; 8
    1dc4:	a1 05       	cpc	r26, r1
    1dc6:	b1 05       	cpc	r27, r1
    1dc8:	48 f0       	brcs	.+18     	; 0x1ddc <consoleIoctl+0x336>
    1dca:	89 ef       	ldi	r24, 0xF9	; 249
    1dcc:	e8 2e       	mov	r14, r24
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	f8 2e       	mov	r15, r24
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	08 2f       	mov	r16, r24
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	18 2f       	mov	r17, r24
    1dda:	28 c0       	rjmp	.+80     	; 0x1e2c <consoleIoctl+0x386>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_fgColor = (int8_t)i_arguments;
    1ddc:	c0 92 93 22 	sts	0x2293, r12
            /*---------------------------------------------------------------*
             * Set the foreground color...
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <consoleIoctl+0x33c>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <consoleIoctl+0x33e>
    1de4:	ed b7       	in	r30, 0x3d	; 61
    1de6:	fe b7       	in	r31, 0x3e	; 62
    1de8:	31 96       	adiw	r30, 0x01	; 1
    1dea:	8e 01       	movw	r16, r28
    1dec:	0f 5f       	subi	r16, 0xFF	; 255
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	ad b7       	in	r26, 0x3d	; 61
    1df2:	be b7       	in	r27, 0x3e	; 62
    1df4:	11 96       	adiw	r26, 0x01	; 1
    1df6:	0d 93       	st	X+, r16
    1df8:	1c 93       	st	X, r17
    1dfa:	12 97       	sbiw	r26, 0x02	; 2
    1dfc:	82 e2       	ldi	r24, 0x22	; 34
    1dfe:	90 e2       	ldi	r25, 0x20	; 32
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	93 83       	std	Z+3, r25	; 0x03
    1e04:	c4 82       	std	Z+4, r12	; 0x04
    1e06:	15 82       	std	Z+5, r1	; 0x05
    1e08:	0e 94 a3 b8 	call	0x17146	; 0x17146 <sprintf>
    1e0c:	ac 01       	movw	r20, r24
                              "\e[1;3%cm", 
                              (char)i_arguments);

            hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    1e0e:	80 91 8f 22 	lds	r24, 0x228F
    1e12:	90 91 90 22 	lds	r25, 0x2290
    1e16:	ed b7       	in	r30, 0x3d	; 61
    1e18:	fe b7       	in	r31, 0x3e	; 62
    1e1a:	36 96       	adiw	r30, 0x06	; 6
    1e1c:	ed bf       	out	0x3d, r30	; 61
    1e1e:	fe bf       	out	0x3e, r31	; 62
    1e20:	b8 01       	movw	r22, r16
    1e22:	0e 94 b8 5a 	call	0xb570	; 0xb570 <hal_uartWriteBlock>
    1e26:	ee 24       	eor	r14, r14
    1e28:	ff 24       	eor	r15, r15
    1e2a:	87 01       	movw	r16, r14
         }

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    1e2c:	80 91 88 22 	lds	r24, 0x2288
    1e30:	90 91 89 22 	lds	r25, 0x2289
    1e34:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   }/*End switch( (t_consoleCmd)s_command)*/

   return i_return;

}/*End consoleIoctl*/
    1e38:	b7 01       	movw	r22, r14
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	aa 96       	adiw	r28, 0x2a	; 42
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	08 95       	ret
    * tokens, index the pointer to the next character so that we are starting
    * at the first character of the next token on the next call into this
    * function.
    *------------------------------------------------------------------------*/
   if( *pc_in == c_delim)
      pc_in++;
    1e54:	0f 5f       	subi	r16, 0xFF	; 255
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	bf ce       	rjmp	.-642    	; 0x1bd8 <consoleIoctl+0x132>

00001e5a <consoleRead>:
}/*End consoleOpen*/

static int16_t consoleRead( t_DEVHANDLE t_handle,
                            int8_t *pc_buff,
                            uint16_t s_size)
{
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	6b 01       	movw	r12, r22
    1e78:	8a 01       	movw	r16, r20
   int16_t s_bufferLevel = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    1e7a:	80 91 86 22 	lds	r24, 0x2286
    1e7e:	90 91 87 22 	lds	r25, 0x2287
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Wait for data to be available in the RX buffer.
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxBlockingSem,
    1e88:	80 91 8a 22 	lds	r24, 0x228A
    1e8c:	90 91 8b 22 	lds	r25, 0x228B
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Level plus an extra NULL character.
    *------------------------------------------------------------------------*/
   s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    1e96:	80 91 8c 22 	lds	r24, 0x228C
    1e9a:	90 91 8d 22 	lds	r25, 0x228D
    1e9e:	0e 94 4b a1 	call	0x14296	; 0x14296 <utl_getBufferFullLevel>
    1ea2:	7c 01       	movw	r14, r24

   /*------------------------------------------------------------------------*
    * Can the user-space buffer hold all the data plus the NULL character?
    *------------------------------------------------------------------------*/
   if( s_bufferLevel > s_size)
    1ea4:	08 17       	cp	r16, r24
    1ea6:	19 07       	cpc	r17, r25
    1ea8:	b8 f4       	brcc	.+46     	; 0x1ed8 <consoleRead+0x7e>
   {
      ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1eaa:	80 91 8c 22 	lds	r24, 0x228C
    1eae:	90 91 8d 22 	lds	r25, 0x228D
    1eb2:	0e 94 2c a2 	call	0x14458	; 0x14458 <ult_resetBuffer>

      hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1eb6:	80 91 8f 22 	lds	r24, 0x228F
    1eba:	90 91 90 22 	lds	r25, 0x2290
    1ebe:	0e 94 c6 54 	call	0xa98c	; 0xa98c <hal_enableUartRxInt>

      /*---------------------------------------------------------------------*
       * Release the lock
       *---------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxMutex);
    1ec2:	80 91 86 22 	lds	r24, 0x2286
    1ec6:	90 91 87 22 	lds	r25, 0x2287
    1eca:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
    1ece:	44 ef       	ldi	r20, 0xF4	; 244
    1ed0:	e4 2e       	mov	r14, r20
    1ed2:	4f ef       	ldi	r20, 0xFF	; 255
    1ed4:	f4 2e       	mov	r15, r20
    1ed6:	1a c0       	rjmp	.+52     	; 0x1f0c <consoleRead+0xb2>
      return (int16_t)ARB_READ_ERROR;

   }/*End if( s_bufferLevel > s_size)*/

   utl_readBlock( gt_consoleDev.t_rxBuffer,
    1ed8:	80 91 8c 22 	lds	r24, 0x228C
    1edc:	90 91 8d 22 	lds	r25, 0x228D
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	a7 01       	movw	r20, r14
    1ee4:	0e 94 b7 a2 	call	0x1456e	; 0x1456e <utl_readBlock>
   /*------------------------------------------------------------------------*
    * In order to treat the buffer as if its linear (when using the ioctl
    * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers each
    * time we read its contents.
    *------------------------------------------------------------------------*/
   ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    1ee8:	80 91 8c 22 	lds	r24, 0x228C
    1eec:	90 91 8d 22 	lds	r25, 0x228D
    1ef0:	0e 94 2c a2 	call	0x14458	; 0x14458 <ult_resetBuffer>

   hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    1ef4:	80 91 8f 22 	lds	r24, 0x228F
    1ef8:	90 91 90 22 	lds	r25, 0x2290
    1efc:	0e 94 c6 54 	call	0xa98c	; 0xa98c <hal_enableUartRxInt>

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    1f00:	80 91 86 22 	lds	r24, 0x2286
    1f04:	90 91 87 22 	lds	r25, 0x2287
    1f08:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return s_bufferLevel;

}/*End consoleRead*/
    1f0c:	c7 01       	movw	r24, r14
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret

00001f24 <drv_consoleInit>:
   return t_err;

}/*End consoleClose*/

t_error drv_consoleInit( t_consoleSetup t_setup)
{
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	64 97       	sbiw	r28, 0x14	; 20
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	4f 87       	std	Y+15, r20	; 0x0f
    1f44:	58 8b       	std	Y+16, r21	; 0x10
    1f46:	69 8b       	std	Y+17, r22	; 0x11
    1f48:	7a 8b       	std	Y+18, r23	; 0x12
    1f4a:	8b 8b       	std	Y+19, r24	; 0x13
    1f4c:	9c 8b       	std	Y+20, r25	; 0x14
    1f4e:	08 2f       	mov	r16, r24
    1f50:	cf 84       	ldd	r12, Y+15	; 0x0f
    1f52:	d8 88       	ldd	r13, Y+16	; 0x10
    1f54:	e9 88       	ldd	r14, Y+17	; 0x11
    1f56:	fa 88       	ldd	r15, Y+18	; 0x12
   t_uartConfig t_uConf;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "consoleDevice0",
    1f58:	79 2f       	mov	r23, r25
    1f5a:	8b e2       	ldi	r24, 0x2B	; 43
    1f5c:	90 e2       	ldi	r25, 0x20	; 32
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	4c e3       	ldi	r20, 0x3C	; 60
    1f62:	50 e2       	ldi	r21, 0x20	; 32
    1f64:	0e 94 c9 84 	call	0x10992	; 0x10992 <arb_registerDevice>
    1f68:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum, 0),
                               &gt_consoleDevOps);

   if( t_err < 0)
    1f6a:	87 fd       	sbrc	r24, 7
    1f6c:	b0 c0       	rjmp	.+352    	; 0x20ce <drv_consoleInit+0x1aa>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxMutex = arb_semaphoreCreate( MUTEX);
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
    1f74:	80 93 86 22 	sts	0x2286, r24
    1f78:	90 93 87 22 	sts	0x2287, r25

   if( gt_consoleDev.t_rxMutex < 0)
    1f7c:	80 91 86 22 	lds	r24, 0x2286
    1f80:	90 91 87 22 	lds	r25, 0x2287
    1f84:	97 ff       	sbrs	r25, 7
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <drv_consoleInit+0x70>
   {
      t_err = (t_error)gt_consoleDev.t_rxMutex;
    1f88:	80 91 86 22 	lds	r24, 0x2286
    1f8c:	90 91 87 22 	lds	r25, 0x2287
    1f90:	18 2f       	mov	r17, r24
    1f92:	99 c0       	rjmp	.+306    	; 0x20c6 <drv_consoleInit+0x1a2>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. We will use this semaphore for
    * signaling the user-space program when the RX buffer has data.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBlockingSem = arb_semaphoreCreate( COUNTING);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
    1f9a:	80 93 8a 22 	sts	0x228A, r24
    1f9e:	90 93 8b 22 	sts	0x228B, r25

   if( gt_consoleDev.t_rxBlockingSem < 0)
    1fa2:	80 91 8a 22 	lds	r24, 0x228A
    1fa6:	90 91 8b 22 	lds	r25, 0x228B
    1faa:	97 ff       	sbrs	r25, 7
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <drv_consoleInit+0x96>
   {
      t_err = (t_error)gt_consoleDev.t_rxBlockingSem;
    1fae:	80 91 8a 22 	lds	r24, 0x228A
    1fb2:	90 91 8b 22 	lds	r25, 0x228B
    1fb6:	18 2f       	mov	r17, r24
    1fb8:	80 c0       	rjmp	.+256    	; 0x20ba <drv_consoleInit+0x196>
   }/*End if( gt_consoleDev.t_rxBlockingSem < 0)*/

   /*------------------------------------------------------------------------*
    * Grab handle to console UART
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_uHandle = hal_requestUartChannel( t_setup.c_uartId);
    1fba:	80 2f       	mov	r24, r16
    1fbc:	0e 94 4a 59 	call	0xb294	; 0xb294 <hal_requestUartChannel>
    1fc0:	80 93 8f 22 	sts	0x228F, r24
    1fc4:	90 93 90 22 	sts	0x2290, r25
   if( gt_consoleDev.t_uHandle < 0)
    1fc8:	80 91 8f 22 	lds	r24, 0x228F
    1fcc:	90 91 90 22 	lds	r25, 0x2290
    1fd0:	97 ff       	sbrs	r25, 7
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <drv_consoleInit+0xb4>
    1fd4:	16 ef       	ldi	r17, 0xF6	; 246
    1fd6:	6b c0       	rjmp	.+214    	; 0x20ae <drv_consoleInit+0x18a>
   {
      t_err = ARB_HAL_ERROR;
      goto failed4;
   }

   t_uConf.t_comMd = ASYNC;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
   t_uConf.t_charSz = CHAR_8BIT;
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
   t_uConf.t_parityMd = NO_PARITY;
    1fde:	1b 82       	std	Y+3, r1	; 0x03
   t_uConf.t_stopBitMd = ONE_STOP_BIT;
    1fe0:	1c 82       	std	Y+4, r1	; 0x04
   t_uConf.i_baudRate = t_setup.i_baudRate;
    1fe2:	cd 82       	std	Y+5, r12	; 0x05
    1fe4:	de 82       	std	Y+6, r13	; 0x06
    1fe6:	ef 82       	std	Y+7, r14	; 0x07
    1fe8:	f8 86       	std	Y+8, r15	; 0x08
   t_uConf.b_enRxDma = false;
    1fea:	1a 86       	std	Y+10, r1	; 0x0a
   t_uConf.b_enTxDma = false;
    1fec:	19 86       	std	Y+9, r1	; 0x09
   t_uConf.pf_rxCallBack = &rxComplete;
    1fee:	86 e7       	ldi	r24, 0x76	; 118
    1ff0:	90 e1       	ldi	r25, 0x10	; 16
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
   /*------------------------------------------------------------------------*
    * By setting the tx call-back to NULL, all data transfers over the uart
    * are performed "in-place".
    *------------------------------------------------------------------------*/
   t_uConf.pf_txCallBack = NULL;
    1ff6:	1d 86       	std	Y+13, r1	; 0x0d
    1ff8:	1e 86       	std	Y+14, r1	; 0x0e

   /*------------------------------------------------------------------------*
    * Configure console UART
    *------------------------------------------------------------------------*/
   if( hal_configureUartChannel( gt_consoleDev.t_uHandle,
    1ffa:	80 91 8f 22 	lds	r24, 0x228F
    1ffe:	90 91 90 22 	lds	r25, 0x2290
    2002:	aa 24       	eor	r10, r10
    2004:	53 e0       	ldi	r21, 0x03	; 3
    2006:	b5 2e       	mov	r11, r21
    2008:	cc 24       	eor	r12, r12
    200a:	dd 24       	eor	r13, r13
    200c:	ed 80       	ldd	r14, Y+5	; 0x05
    200e:	fe 80       	ldd	r15, Y+6	; 0x06
    2010:	0f 81       	ldd	r16, Y+7	; 0x07
    2012:	18 85       	ldd	r17, Y+8	; 0x08
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4b 85       	ldd	r20, Y+11	; 0x0b
    201a:	5c 85       	ldd	r21, Y+12	; 0x0c
    201c:	6d 85       	ldd	r22, Y+13	; 0x0d
    201e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2020:	0e 94 8f 55 	call	0xab1e	; 0xab1e <hal_configureUartChannel>
    2024:	87 ff       	sbrs	r24, 7
    2026:	02 c0       	rjmp	.+4      	; 0x202c <drv_consoleInit+0x108>
    2028:	16 ef       	ldi	r17, 0xF6	; 246
    202a:	3b c0       	rjmp	.+118    	; 0x20a2 <drv_consoleInit+0x17e>
   /*------------------------------------------------------------------------*
    * Allocate RX buffer of size = A*B1, where A = the max number of
    * possible tokens, B = the size of each token including a terminating
    * character, and 1 byte for the character that ends the string.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBuffer = utl_createBuffer( CONSOLE_MAX_TOKENS*
    202c:	81 e7       	ldi	r24, 0x71	; 113
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 65 a2 	call	0x144ca	; 0x144ca <utl_createBuffer>
    2034:	80 93 8c 22 	sts	0x228C, r24
    2038:	90 93 8d 22 	sts	0x228D, r25
   CONSOLE_MAX_TOKEN_SIZE + 1);
   if( gt_consoleDev.t_rxBuffer < 0)
    203c:	80 91 8c 22 	lds	r24, 0x228C
    2040:	90 91 8d 22 	lds	r25, 0x228D
    2044:	97 ff       	sbrs	r25, 7
    2046:	02 c0       	rjmp	.+4      	; 0x204c <drv_consoleInit+0x128>
    2048:	1f ef       	ldi	r17, 0xFF	; 255
    204a:	2b c0       	rjmp	.+86     	; 0x20a2 <drv_consoleInit+0x17e>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_txMutex = arb_semaphoreCreate( MUTEX);
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
    2052:	80 93 88 22 	sts	0x2288, r24
    2056:	90 93 89 22 	sts	0x2289, r25

   if( gt_consoleDev.t_txMutex < 0)
    205a:	80 91 88 22 	lds	r24, 0x2288
    205e:	90 91 89 22 	lds	r25, 0x2289
    2062:	97 ff       	sbrs	r25, 7
    2064:	0c c0       	rjmp	.+24     	; 0x207e <drv_consoleInit+0x15a>
   {
      t_err = (t_error)gt_consoleDev.t_txMutex;
    2066:	80 91 88 22 	lds	r24, 0x2288
    206a:	90 91 89 22 	lds	r25, 0x2289
    206e:	18 2f       	mov	r17, r24

   return ARB_PASSED;

failed6:

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);
    2070:	80 91 8c 22 	lds	r24, 0x228C
    2074:	90 91 8d 22 	lds	r25, 0x228D
    2078:	0e 94 44 a2 	call	0x14488	; 0x14488 <utl_destroyBuffer>
    207c:	12 c0       	rjmp	.+36     	; 0x20a2 <drv_consoleInit+0x17e>
   }/*End if( gt_consoleDev.t_txMutex < 0)*/

   /*------------------------------------------------------------------------*
    * We don't have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers = 0;
    207e:	10 92 8e 22 	sts	0x228E, r1
   /*------------------------------------------------------------------------*
    * This variable is used as a means of blocking the TX register empty
    * interrupt from sending a byte of data out of the uart interface while
    * the driver is currently receiving data over the user interface.
    *------------------------------------------------------------------------*/
   gt_consoleDev.b_rxActive = false;
    2082:	10 92 91 22 	sts	0x2291, r1

   /*------------------------------------------------------------------------*
    * Set the default colors...
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_cmdPromptColor = CONSOLE_GREEN;
    2086:	82 e3       	ldi	r24, 0x32	; 50
    2088:	80 93 92 22 	sts	0x2292, r24
   gt_consoleDev.c_fgColor = CONSOLE_WHITE;
    208c:	87 e3       	ldi	r24, 0x37	; 55
    208e:	80 93 93 22 	sts	0x2293, r24

   /*------------------------------------------------------------------------*
    * Set the default prompt working directory.
    *------------------------------------------------------------------------*/
   sprintf( gt_consoleDev.ac_dirName, "/");
    2092:	84 e9       	ldi	r24, 0x94	; 148
    2094:	92 e2       	ldi	r25, 0x22	; 34
    2096:	6a e3       	ldi	r22, 0x3A	; 58
    2098:	70 e2       	ldi	r23, 0x20	; 32
    209a:	0e 94 27 b8 	call	0x1704e	; 0x1704e <strcpy>
    209e:	10 e0       	ldi	r17, 0x00	; 0
    20a0:	16 c0       	rjmp	.+44     	; 0x20ce <drv_consoleInit+0x1aa>

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);

failed5:

   hal_releaseUartChannel( gt_consoleDev.t_uHandle);
    20a2:	80 91 8f 22 	lds	r24, 0x228F
    20a6:	90 91 90 22 	lds	r25, 0x2290
    20aa:	0e 94 ad 58 	call	0xb15a	; 0xb15a <hal_releaseUartChannel>

failed4:

   arb_semaphoreDestroy( gt_consoleDev.t_rxBlockingSem);
    20ae:	80 91 8a 22 	lds	r24, 0x228A
    20b2:	90 91 8b 22 	lds	r25, 0x228B
    20b6:	0e 94 ef 93 	call	0x127de	; 0x127de <arb_semaphoreDestroy>

failed3:

   arb_semaphoreDestroy( gt_consoleDev.t_rxMutex);
    20ba:	80 91 86 22 	lds	r24, 0x2286
    20be:	90 91 87 22 	lds	r25, 0x2287
    20c2:	0e 94 ef 93 	call	0x127de	; 0x127de <arb_semaphoreDestroy>

failed2:

   arb_destroyDevice( "consoleDevice0");
    20c6:	8b e2       	ldi	r24, 0x2B	; 43
    20c8:	90 e2       	ldi	r25, 0x20	; 32
    20ca:	0e 94 50 84 	call	0x108a0	; 0x108a0 <arb_destroyDevice>

failed1:

   return t_err;

}/*End drv_consoleInit*/
    20ce:	81 2f       	mov	r24, r17
    20d0:	64 96       	adiw	r28, 0x14	; 20
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	08 95       	ret

000020ec <rxComplete>:
   return CONSOLE_PASSED;

}/*End usr_parseMessage*/

static void rxComplete( uint16_t s_byte)
{
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	8c 01       	movw	r16, r24
   uint16_t s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    20f6:	80 91 8c 22 	lds	r24, 0x228C
    20fa:	90 91 8d 22 	lds	r25, 0x228D
    20fe:	0e 94 4b a1 	call	0x14296	; 0x14296 <utl_getBufferFullLevel>
    2102:	ec 01       	movw	r28, r24
   uint16_t s_bufferSize  = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    2104:	80 91 8c 22 	lds	r24, 0x228C
    2108:	90 91 8d 22 	lds	r25, 0x228D
    210c:	0e 94 5f a1 	call	0x142be	; 0x142be <utl_getBufferSize>
    2110:	9c 01       	movw	r18, r24

   gt_consoleDev.b_rxActive = true;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	80 93 91 22 	sts	0x2291, r24

   /*------------------------------------------------------------------------*
    * If a backspace has been entered, erase the bytes in the buffer until
    * there is no longer any more data available.
    *------------------------------------------------------------------------*/
   if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))
    2118:	0f 37       	cpi	r16, 0x7F	; 127
    211a:	11 05       	cpc	r17, r1
    211c:	81 f4       	brne	.+32     	; 0x213e <rxComplete+0x52>
    211e:	20 97       	sbiw	r28, 0x00	; 0
    2120:	a9 f1       	breq	.+106    	; 0x218c <rxComplete+0xa0>
   {
      /*---------------------------------------------------------------------*
       * Echo back received byte- in this case the backspace character.
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    2122:	80 91 8f 22 	lds	r24, 0x228F
    2126:	90 91 90 22 	lds	r25, 0x2290
    212a:	6f e7       	ldi	r22, 0x7F	; 127
    212c:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <hal_uartWriteByte>
                         s_byte);

      /*---------------------------------------------------------------------*
       * Remove the last byte in the buffer...
       *---------------------------------------------------------------------*/
      utl_buffEraseTailByte( gt_consoleDev.t_rxBuffer);
    2130:	80 91 8c 22 	lds	r24, 0x228C
    2134:	90 91 8d 22 	lds	r25, 0x228D
    2138:	0e 94 f7 a1 	call	0x143ee	; 0x143ee <utl_buffEraseTailByte>
    213c:	40 c0       	rjmp	.+128    	; 0x21be <rxComplete+0xd2>

   }/*End if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))*/
   else if( s_byte == CONSOLE_RETURN_CHAR)
    213e:	0d 30       	cpi	r16, 0x0D	; 13
    2140:	11 05       	cpc	r17, r1
    2142:	21 f5       	brne	.+72     	; 0x218c <rxComplete+0xa0>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    2144:	80 91 8f 22 	lds	r24, 0x228F
    2148:	90 91 90 22 	lds	r25, 0x2290
    214c:	6d e0       	ldi	r22, 0x0D	; 13
    214e:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <hal_uartWriteByte>
                         s_byte);

      /*------------------------------------------------------------------*
       * Write new line character out uart interface
       *------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    2152:	80 91 8f 22 	lds	r24, 0x228F
    2156:	90 91 90 22 	lds	r25, 0x2290
    215a:	6a e0       	ldi	r22, 0x0A	; 10
    215c:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <hal_uartWriteByte>
                         '\n');

      gt_consoleDev.b_rxActive = false;
    2160:	10 92 91 22 	sts	0x2291, r1

      /*------------------------------------------------------------------*
       * Disable the receive interrupt until the data has been handled.
       *------------------------------------------------------------------*/
      hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    2164:	80 91 8f 22 	lds	r24, 0x228F
    2168:	90 91 90 22 	lds	r25, 0x2290
    216c:	0e 94 fa 54 	call	0xa9f4	; 0xa9f4 <hal_disableUartRxInt>

      /*------------------------------------------------------------------*
       * Add a the NULL character to the end of the buffer - this is for
       * data parsing purposes only.
       *------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    2170:	80 91 8c 22 	lds	r24, 0x228C
    2174:	90 91 8d 22 	lds	r25, 0x228D
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	0e 94 87 a1 	call	0x1430e	; 0x1430e <utl_writeByte>

      /*------------------------------------------------------------------*
       * Signal any waiting threads that a carriage return has been
       * received.
       *------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxBlockingSem);
    217e:	80 91 8a 22 	lds	r24, 0x228A
    2182:	90 91 8b 22 	lds	r25, 0x228B
    2186:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
    218a:	19 c0       	rjmp	.+50     	; 0x21be <rxComplete+0xd2>


   }/*End else if( c_byte == CONSOLE_BACKSPACE_CHAR)*/
   else if( (s_bufferLevel < (s_bufferSize - 1)) && (s_byte !=
    218c:	21 50       	subi	r18, 0x01	; 1
    218e:	30 40       	sbci	r19, 0x00	; 0
    2190:	c2 17       	cp	r28, r18
    2192:	d3 07       	cpc	r29, r19
    2194:	a0 f4       	brcc	.+40     	; 0x21be <rxComplete+0xd2>
    2196:	0f 37       	cpi	r16, 0x7F	; 127
    2198:	11 05       	cpc	r17, r1
    219a:	89 f0       	breq	.+34     	; 0x21be <rxComplete+0xd2>
    219c:	0b 31       	cpi	r16, 0x1B	; 27
    219e:	11 05       	cpc	r17, r1
    21a0:	71 f0       	breq	.+28     	; 0x21be <rxComplete+0xd2>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte....
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    21a2:	80 91 8f 22 	lds	r24, 0x228F
    21a6:	90 91 90 22 	lds	r25, 0x2290
    21aa:	60 2f       	mov	r22, r16
    21ac:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <hal_uartWriteByte>

      /*---------------------------------------------------------------------*
       * Fill RX buffer with received bytes until the buffer is full
       * leaving room for the insertion of the NULL character.
       *---------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    21b0:	80 91 8c 22 	lds	r24, 0x228C
    21b4:	90 91 8d 22 	lds	r25, 0x228D
    21b8:	60 2f       	mov	r22, r16
    21ba:	0e 94 87 a1 	call	0x1430e	; 0x1430e <utl_writeByte>
                     s_byte);

   }

}/*End rxComplete*/
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	08 95       	ret

000021c8 <sdClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_error sdClose( t_DEVHANDLE t_dev)
{
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	0f 92       	push	r0
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    21dc:	09 81       	ldd	r16, Y+1	; 0x01
    21de:	1a 81       	ldd	r17, Y+2	; 0x02
   bool b_status;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    21e0:	80 91 a9 22 	lds	r24, 0x22A9
    21e4:	90 91 aa 22 	lds	r25, 0x22AA
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   gt_sdDev.c_numUsers--;
    21ee:	80 91 ad 22 	lds	r24, 0x22AD
    21f2:	81 50       	subi	r24, 0x01	; 1
    21f4:	80 93 ad 22 	sts	0x22AD, r24

   b_status = sd_close( pt_dev->pv_privateData);
    21f8:	f8 01       	movw	r30, r16
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	0e 94 7e 77 	call	0xeefc	; 0xeefc <sd_close>
   if( b_status == true)
    2202:	88 23       	and	r24, r24
    2204:	19 f0       	breq	.+6      	; 0x220c <sdClose+0x44>
   {
      pt_dev->pv_privateData = NULL;
    2206:	f8 01       	movw	r30, r16
    2208:	12 82       	std	Z+2, r1	; 0x02
    220a:	13 82       	std	Z+3, r1	; 0x03
   }

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    220c:	80 91 a9 22 	lds	r24, 0x22A9
    2210:	90 91 aa 22 	lds	r25, 0x22AA
    2214:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return ARB_PASSED;

}/*End sdClose*/
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	08 95       	ret

00002228 <sdIoctl>:
}/*End sdOpen*/

int32_t sdIoctl( t_DEVHANDLE t_dev,
                 uint16_t s_command,
                 int32_t  i_arguments)
{
    2228:	af 92       	push	r10
    222a:	bf 92       	push	r11
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	0f 92       	push	r0
    223c:	0f 92       	push	r0
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	d6 2e       	mov	r13, r22
    2248:	79 01       	movw	r14, r18
    224a:	8a 01       	movw	r16, r20
   int32_t i_return = (int32_t)ARB_PASSED;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    224c:	a9 80       	ldd	r10, Y+1	; 0x01
    224e:	ba 80       	ldd	r11, Y+2	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    2250:	80 91 a9 22 	lds	r24, 0x22A9
    2254:	90 91 aa 22 	lds	r25, 0x22AA
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   switch( (t_sdCmd)s_command)
    225e:	85 e0       	ldi	r24, 0x05	; 5
    2260:	d8 16       	cp	r13, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <sdIoctl+0x3e>
    2264:	47 c0       	rjmp	.+142    	; 0x22f4 <sdIoctl+0xcc>
    2266:	8d 15       	cp	r24, r13
    2268:	a0 f0       	brcs	.+40     	; 0x2292 <sdIoctl+0x6a>
    226a:	e2 e0       	ldi	r30, 0x02	; 2
    226c:	de 16       	cp	r13, r30
    226e:	09 f4       	brne	.+2      	; 0x2272 <sdIoctl+0x4a>
    2270:	5c c0       	rjmp	.+184    	; 0x232a <sdIoctl+0x102>
    2272:	ed 15       	cp	r30, r13
    2274:	30 f0       	brcs	.+12     	; 0x2282 <sdIoctl+0x5a>
    2276:	dd 20       	and	r13, r13
    2278:	41 f1       	breq	.+80     	; 0x22ca <sdIoctl+0xa2>
    227a:	f1 e0       	ldi	r31, 0x01	; 1
    227c:	df 16       	cp	r13, r31
    227e:	e1 f4       	brne	.+56     	; 0x22b8 <sdIoctl+0x90>
    2280:	36 c0       	rjmp	.+108    	; 0x22ee <sdIoctl+0xc6>
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	d8 16       	cp	r13, r24
    2286:	09 f4       	brne	.+2      	; 0x228a <sdIoctl+0x62>
    2288:	4a c0       	rjmp	.+148    	; 0x231e <sdIoctl+0xf6>
    228a:	e4 e0       	ldi	r30, 0x04	; 4
    228c:	de 16       	cp	r13, r30
    228e:	a1 f4       	brne	.+40     	; 0x22b8 <sdIoctl+0x90>
    2290:	6b c0       	rjmp	.+214    	; 0x2368 <sdIoctl+0x140>
    2292:	f8 e0       	ldi	r31, 0x08	; 8
    2294:	df 16       	cp	r13, r31
    2296:	89 f1       	breq	.+98     	; 0x22fa <sdIoctl+0xd2>
    2298:	fd 15       	cp	r31, r13
    229a:	38 f0       	brcs	.+14     	; 0x22aa <sdIoctl+0x82>
    229c:	86 e0       	ldi	r24, 0x06	; 6
    229e:	d8 16       	cp	r13, r24
    22a0:	a1 f1       	breq	.+104    	; 0x230a <sdIoctl+0xe2>
    22a2:	e7 e0       	ldi	r30, 0x07	; 7
    22a4:	de 16       	cp	r13, r30
    22a6:	41 f4       	brne	.+16     	; 0x22b8 <sdIoctl+0x90>
    22a8:	34 c0       	rjmp	.+104    	; 0x2312 <sdIoctl+0xea>
    22aa:	f9 e0       	ldi	r31, 0x09	; 9
    22ac:	df 16       	cp	r13, r31
    22ae:	49 f1       	breq	.+82     	; 0x2302 <sdIoctl+0xda>
    22b0:	8a e0       	ldi	r24, 0x0A	; 10
    22b2:	d8 16       	cp	r13, r24
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <sdIoctl+0x90>
    22b6:	47 c0       	rjmp	.+142    	; 0x2346 <sdIoctl+0x11e>
    22b8:	2b ef       	ldi	r18, 0xFB	; 251
    22ba:	e2 2e       	mov	r14, r18
    22bc:	2f ef       	ldi	r18, 0xFF	; 255
    22be:	f2 2e       	mov	r15, r18
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	02 2f       	mov	r16, r18
    22c4:	2f ef       	ldi	r18, 0xFF	; 255
    22c6:	12 2f       	mov	r17, r18
    22c8:	52 c0       	rjmp	.+164    	; 0x236e <sdIoctl+0x146>
   {
      case SD_INIT:
         if( sd_init( gt_sdDev.t_spiHndl) == false)
    22ca:	80 91 ab 22 	lds	r24, 0x22AB
    22ce:	90 91 ac 22 	lds	r25, 0x22AC
    22d2:	0e 94 74 78 	call	0xf0e8	; 0xf0e8 <sd_init>
    22d6:	88 23       	and	r24, r24
    22d8:	09 f0       	breq	.+2      	; 0x22dc <sdIoctl+0xb4>
    22da:	46 c0       	rjmp	.+140    	; 0x2368 <sdIoctl+0x140>
    22dc:	9e ef       	ldi	r25, 0xFE	; 254
    22de:	e9 2e       	mov	r14, r25
    22e0:	9f ef       	ldi	r25, 0xFF	; 255
    22e2:	f9 2e       	mov	r15, r25
    22e4:	9f ef       	ldi	r25, 0xFF	; 255
    22e6:	09 2f       	mov	r16, r25
    22e8:	9f ef       	ldi	r25, 0xFF	; 255
    22ea:	19 2f       	mov	r17, r25
    22ec:	40 c0       	rjmp	.+128    	; 0x236e <sdIoctl+0x146>
            i_return = (int32_t)SD_CARD_INIT_FAILED;
      break;/*End case SD_INIT:*/

      case SD_RMDASHR:
         if( sd_rmDashR( ) == false)
    22ee:	0e 94 48 77 	call	0xee90	; 0xee90 <sd_rmDashR>
    22f2:	12 c0       	rjmp	.+36     	; 0x2318 <sdIoctl+0xf0>
      case SD_CARD_INFO:

      break;/*End case SD_CARD_INFO:*/

      case SD_LS:
         sd_ls();
    22f4:	0e 94 78 77 	call	0xeef0	; 0xeef0 <sd_ls>
    22f8:	37 c0       	rjmp	.+110    	; 0x2368 <sdIoctl+0x140>
      break;/*End case SD_LS:*/

      case SD_RM:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_remove( pc_filename) == false)
    22fa:	c7 01       	movw	r24, r14
    22fc:	0e 94 4d 77 	call	0xee9a	; 0xee9a <sd_remove>
    2300:	0b c0       	rjmp	.+22     	; 0x2318 <sdIoctl+0xf0>
      break;/*End case SD_RM:*/

      case SD_CD:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_chdir( pc_filename) == false)
    2302:	c7 01       	movw	r24, r14
    2304:	0e 94 71 77 	call	0xeee2	; 0xeee2 <sd_chdir>
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <sdIoctl+0xf0>
      break;/*End case SD_CD:*/

      case SD_MKDIR:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_mkdir( pc_filename) == false)
    230a:	c7 01       	movw	r24, r14
    230c:	0e 94 59 77 	call	0xeeb2	; 0xeeb2 <sd_mkdir>
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <sdIoctl+0xf0>
      break;/*End  case SD_MKDIR:*/

      case SD_RMDIR:
      {
         char *pc_filename = (char *)((uint16_t)i_arguments);
         if( sd_rmdir( pc_filename) == false)
    2312:	c7 01       	movw	r24, r14
    2314:	0e 94 53 77 	call	0xeea6	; 0xeea6 <sd_rmdir>
    2318:	88 23       	and	r24, r24
    231a:	31 f5       	brne	.+76     	; 0x2368 <sdIoctl+0x140>
    231c:	1c c0       	rjmp	.+56     	; 0x2356 <sdIoctl+0x12e>

      case SD_REWIND:
         /*------------------------------------------------------------------*
          * Set the position of the file back to the beginning.
          *------------------------------------------------------------------*/
         sd_rewind( pt_dev->pv_privateData);
    231e:	f5 01       	movw	r30, r10
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0e 94 0d 77 	call	0xee1a	; 0xee1a <sd_rewind>
    2328:	1f c0       	rjmp	.+62     	; 0x2368 <sdIoctl+0x140>

      case SD_ERASE:
         /*------------------------------------------------------------------*
          * ERASE the contents of the file.
          *------------------------------------------------------------------*/
         i_return = sd_truncate( pt_dev->pv_privateData, 0);
    232a:	f5 01       	movw	r30, r10
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	0e 94 09 77 	call	0xee12	; 0xee12 <sd_truncate>
    233c:	e8 2e       	mov	r14, r24
    233e:	ff 24       	eor	r15, r15
    2340:	00 e0       	ldi	r16, 0x00	; 0
    2342:	10 e0       	ldi	r17, 0x00	; 0
    2344:	14 c0       	rjmp	.+40     	; 0x236e <sdIoctl+0x146>
      break;

      case SD_GET_SIZE:
         i_return = sd_fileSize( pt_dev->pv_privateData);
    2346:	f5 01       	movw	r30, r10
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	0e 94 f7 76 	call	0xedee	; 0xedee <sd_fileSize>
    2350:	7b 01       	movw	r14, r22
    2352:	8c 01       	movw	r16, r24
    2354:	0c c0       	rjmp	.+24     	; 0x236e <sdIoctl+0x146>
      break;
    2356:	8d ef       	ldi	r24, 0xFD	; 253
    2358:	e8 2e       	mov	r14, r24
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	f8 2e       	mov	r15, r24
    235e:	8f ef       	ldi	r24, 0xFF	; 255
    2360:	08 2f       	mov	r16, r24
    2362:	8f ef       	ldi	r24, 0xFF	; 255
    2364:	18 2f       	mov	r17, r24
    2366:	03 c0       	rjmp	.+6      	; 0x236e <sdIoctl+0x146>
    2368:	ee 24       	eor	r14, r14
    236a:	ff 24       	eor	r15, r15
    236c:	87 01       	movw	r16, r14
   }/*End switch( (t_sdCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    236e:	80 91 a9 22 	lds	r24, 0x22A9
    2372:	90 91 aa 22 	lds	r25, 0x22AA
    2376:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return i_return;

}/*End sdIoctl*/
    237a:	b7 01       	movw	r22, r14
    237c:	c8 01       	movw	r24, r16
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	df 90       	pop	r13
    2390:	bf 90       	pop	r11
    2392:	af 90       	pop	r10
    2394:	08 95       	ret

00002396 <sdWrite>:
}/*End sdRead*/

static int16_t sdWrite( t_DEVHANDLE t_dev,
                        int8_t *pc_buff,
                        uint16_t s_size)
{
    2396:	8f 92       	push	r8
    2398:	9f 92       	push	r9
    239a:	af 92       	push	r10
    239c:	bf 92       	push	r11
    239e:	cf 92       	push	r12
    23a0:	df 92       	push	r13
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	0f 92       	push	r0
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	4b 01       	movw	r8, r22
    23ba:	5a 01       	movw	r10, r20
   int16_t s_bufferLevel = 0;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    23bc:	c9 80       	ldd	r12, Y+1	; 0x01
    23be:	da 80       	ldd	r13, Y+2	; 0x02
   uint8_t c_retries = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    23c0:	80 91 a9 22 	lds	r24, 0x22A9
    23c4:	90 91 aa 22 	lds	r25, 0x22AA
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   if( pt_dev->pv_privateData != NULL)
    23ce:	f6 01       	movw	r30, r12
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	89 2b       	or	r24, r25
    23d6:	19 f4       	brne	.+6      	; 0x23de <sdWrite+0x48>
    23d8:	00 e0       	ldi	r16, 0x00	; 0
    23da:	10 e0       	ldi	r17, 0x00	; 0
    23dc:	19 c0       	rjmp	.+50     	; 0x2410 <sdWrite+0x7a>
    23de:	ff 24       	eor	r15, r15
   {
      do
      {

         s_bufferLevel = (int16_t)sd_write( gt_sdDev.t_spiHndl,
    23e0:	80 91 ab 22 	lds	r24, 0x22AB
    23e4:	90 91 ac 22 	lds	r25, 0x22AC
    23e8:	f6 01       	movw	r30, r12
    23ea:	62 81       	ldd	r22, Z+2	; 0x02
    23ec:	73 81       	ldd	r23, Z+3	; 0x03
    23ee:	a4 01       	movw	r20, r8
    23f0:	95 01       	movw	r18, r10
    23f2:	0e 94 2f 77 	call	0xee5e	; 0xee5e <sd_write>
    23f6:	8b 01       	movw	r16, r22
                                            pt_dev->pv_privateData,
                                            (uint8_t *)pc_buff,
                                            s_size);

         if( s_bufferLevel < 0)
    23f8:	77 ff       	sbrs	r23, 7
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <sdWrite+0x7a>
         {
            sd_init( gt_sdDev.t_spiHndl);
    23fc:	80 91 ab 22 	lds	r24, 0x22AB
    2400:	90 91 ac 22 	lds	r25, 0x22AC
    2404:	0e 94 74 78 	call	0xf0e8	; 0xf0e8 <sd_init>
            //arb_sleep(1);
         }

         c_retries++;
    2408:	f3 94       	inc	r15

      }while( (s_bufferLevel < 0) && (c_retries < SD_MAX_RDWR_RETRIES));
    240a:	f5 e0       	ldi	r31, 0x05	; 5
    240c:	ff 16       	cp	r15, r31
    240e:	41 f7       	brne	.-48     	; 0x23e0 <sdWrite+0x4a>
   }/*End if( pt_dev->pv_privateData != NULL)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2410:	80 91 a9 22 	lds	r24, 0x22A9
    2414:	90 91 aa 22 	lds	r25, 0x22AA
    2418:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return s_bufferLevel;

}/*End sdWrite*/
    241c:	c8 01       	movw	r24, r16
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	9f 90       	pop	r9
    2436:	8f 90       	pop	r8
    2438:	08 95       	ret

0000243a <sdRead>:
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static int16_t sdRead( t_DEVHANDLE t_dev,
                       int8_t *pc_buff,
                       uint16_t s_size)
{
    243a:	8f 92       	push	r8
    243c:	9f 92       	push	r9
    243e:	af 92       	push	r10
    2440:	bf 92       	push	r11
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	0f 92       	push	r0
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	4b 01       	movw	r8, r22
    245e:	5a 01       	movw	r10, r20
   int16_t s_bufferLevel = 0;
   t_devHandle *pt_dev = (t_devHandle *)t_dev;
    2460:	c9 80       	ldd	r12, Y+1	; 0x01
    2462:	da 80       	ldd	r13, Y+2	; 0x02
   uint8_t c_retries = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    2464:	80 91 a9 22 	lds	r24, 0x22A9
    2468:	90 91 aa 22 	lds	r25, 0x22AA
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   if( pt_dev->pv_privateData != NULL)
    2472:	f6 01       	movw	r30, r12
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	89 2b       	or	r24, r25
    247a:	19 f4       	brne	.+6      	; 0x2482 <sdRead+0x48>
    247c:	00 e0       	ldi	r16, 0x00	; 0
    247e:	10 e0       	ldi	r17, 0x00	; 0
    2480:	19 c0       	rjmp	.+50     	; 0x24b4 <sdRead+0x7a>
    2482:	ff 24       	eor	r15, r15
   {

      do
      {

         s_bufferLevel = (int16_t)sd_read( gt_sdDev.t_spiHndl,
    2484:	80 91 ab 22 	lds	r24, 0x22AB
    2488:	90 91 ac 22 	lds	r25, 0x22AC
    248c:	f6 01       	movw	r30, r12
    248e:	62 81       	ldd	r22, Z+2	; 0x02
    2490:	73 81       	ldd	r23, Z+3	; 0x03
    2492:	a4 01       	movw	r20, r8
    2494:	95 01       	movw	r18, r10
    2496:	0e 94 15 77 	call	0xee2a	; 0xee2a <sd_read>
    249a:	8b 01       	movw	r16, r22
                                           pt_dev->pv_privateData,
                                           (uint8_t *)pc_buff,
                                           s_size);

         if( s_bufferLevel < 0)
    249c:	77 ff       	sbrs	r23, 7
    249e:	0a c0       	rjmp	.+20     	; 0x24b4 <sdRead+0x7a>
         {
            sd_init( gt_sdDev.t_spiHndl);
    24a0:	80 91 ab 22 	lds	r24, 0x22AB
    24a4:	90 91 ac 22 	lds	r25, 0x22AC
    24a8:	0e 94 74 78 	call	0xf0e8	; 0xf0e8 <sd_init>
            //arb_sleep(1);
         }

         c_retries++;
    24ac:	f3 94       	inc	r15

      }while( (s_bufferLevel < 0) && (c_retries < SD_MAX_RDWR_RETRIES));
    24ae:	f5 e0       	ldi	r31, 0x05	; 5
    24b0:	ff 16       	cp	r15, r31
    24b2:	41 f7       	brne	.-48     	; 0x2484 <sdRead+0x4a>
   }/*End if( pt_dev->pv_privateData != NULL)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    24b4:	80 91 a9 22 	lds	r24, 0x22A9
    24b8:	90 91 aa 22 	lds	r25, 0x22AA
    24bc:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return s_bufferLevel;

}/*End sdRead*/
    24c0:	c8 01       	movw	r24, r16
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	08 95       	ret

000024de <sdOpen>:
   return s_bufferLevel;

}/*End sdWrite*/

t_error sdOpen( t_DEVHANDLE t_dev)
{
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	0f 92       	push	r0
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_sdDev.t_mutex,
    24f2:	80 91 a9 22 	lds	r24, 0x22A9
    24f6:	90 91 aa 22 	lds	r25, 0x22AA
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   pt_dev = (t_devHandle *)t_dev;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	80 93 a6 22 	sts	0x22A6, r24
    2508:	90 93 a7 22 	sts	0x22A7, r25

   if( gt_sdDev.c_numUsers == 0)
    250c:	80 91 ad 22 	lds	r24, 0x22AD
    2510:	88 23       	and	r24, r24
    2512:	41 f4       	brne	.+16     	; 0x2524 <sdOpen+0x46>
   {
      if( sd_begin( gt_sdDev.t_spiHndl) == false)
    2514:	80 91 ab 22 	lds	r24, 0x22AB
    2518:	90 91 ac 22 	lds	r25, 0x22AC
    251c:	0e 94 87 78 	call	0xf10e	; 0xf10e <sd_begin>
    2520:	88 23       	and	r24, r24
    2522:	c1 f1       	breq	.+112    	; 0x2594 <sdOpen+0xb6>
         goto failed;
      }

   }/*End if( gt_sdDev.c_numUsers == 1)*/

   pc_filename = (char *)pt_dev->pv_privateData;
    2524:	00 91 a6 22 	lds	r16, 0x22A6
    2528:	10 91 a7 22 	lds	r17, 0x22A7
    252c:	f8 01       	movw	r30, r16
    252e:	22 81       	ldd	r18, Z+2	; 0x02
    2530:	33 81       	ldd	r19, Z+3	; 0x03
    2532:	20 93 a4 22 	sts	0x22A4, r18
    2536:	30 93 a5 22 	sts	0x22A5, r19

   if( pc_filename != NULL)
    253a:	21 15       	cp	r18, r1
    253c:	31 05       	cpc	r19, r1
    253e:	e9 f0       	breq	.+58     	; 0x257a <sdOpen+0x9c>
   {
      uint8_t c_flags = 0;

      if( pt_dev->c_flags & ARB_O_READ)
    2540:	84 81       	ldd	r24, Z+4	; 0x04
    2542:	68 2f       	mov	r22, r24
    2544:	61 70       	andi	r22, 0x01	; 1
         c_flags |= SD_FILE_READ;
      if( pt_dev->c_flags & ARB_O_WRITE)
    2546:	81 fd       	sbrc	r24, 1
         c_flags |= SD_FILE_WRITE;
    2548:	62 60       	ori	r22, 0x02	; 2
      if( pt_dev->c_flags & ARB_O_APPEND)
    254a:	82 fd       	sbrc	r24, 2
         c_flags |= SD_FILE_APPEND;
    254c:	64 60       	ori	r22, 0x04	; 4
      if( pt_dev->c_flags & ARB_O_SYNC)
    254e:	83 fd       	sbrc	r24, 3
         c_flags |= SD_FILE_SYNC;
    2550:	68 60       	ori	r22, 0x08	; 8
      if( pt_dev->c_flags & ARB_O_TRUNC)
    2552:	84 fd       	sbrc	r24, 4
         c_flags |= SD_FILE_TRUNC;
    2554:	60 61       	ori	r22, 0x10	; 16
      if( pt_dev->c_flags & ARB_O_AT_END)
    2556:	85 fd       	sbrc	r24, 5
         c_flags |= SD_FILE_AT_END;
    2558:	60 62       	ori	r22, 0x20	; 32
      if( pt_dev->c_flags & ARB_O_CREAT)
    255a:	86 fd       	sbrc	r24, 6
         c_flags |= SD_FILE_CREAT;
    255c:	60 64       	ori	r22, 0x40	; 64

      pt_dev->pv_privateData = sd_open( pc_filename, c_flags);
    255e:	c9 01       	movw	r24, r18
    2560:	0e 94 98 77 	call	0xef30	; 0xef30 <sd_open>
    2564:	f8 01       	movw	r30, r16
    2566:	82 83       	std	Z+2, r24	; 0x02
    2568:	93 83       	std	Z+3, r25	; 0x03
      if( pt_dev->pv_privateData == NULL)
    256a:	e0 91 a6 22 	lds	r30, 0x22A6
    256e:	f0 91 a7 22 	lds	r31, 0x22A7
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	89 2b       	or	r24, r25
    2578:	69 f0       	breq	.+26     	; 0x2594 <sdOpen+0xb6>
         t_err = ARB_OPEN_ERROR;
         goto failed;
      }
   }

   gt_sdDev.c_numUsers++;
    257a:	80 91 ad 22 	lds	r24, 0x22AD
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	80 93 ad 22 	sts	0x22AD, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2584:	80 91 a9 22 	lds	r24, 0x22A9
    2588:	90 91 aa 22 	lds	r25, 0x22AA
    258c:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	07 c0       	rjmp	.+14     	; 0x25a2 <sdOpen+0xc4>
failed:

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_sdDev.t_mutex);
    2594:	80 91 a9 22 	lds	r24, 0x22A9
    2598:	90 91 aa 22 	lds	r25, 0x22AA
    259c:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
    25a0:	80 ef       	ldi	r24, 0xF0	; 240

   return t_err;

}/*End sdOpen*/
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	08 95       	ret

000025b0 <drv_sdInit>:
   return ARB_PASSED;

}/*End sdClose*/

t_error drv_sdInit( t_sdSetup t_setup)
{
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	28 97       	sbiw	r28, 0x08	; 8
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	f6 2e       	mov	r15, r22
    25ca:	e7 2e       	mov	r14, r23
    25cc:	d8 2e       	mov	r13, r24
    25ce:	79 2f       	mov	r23, r25
   t_error t_err = ARB_PASSED;
   t_spiConfig t_sConf;
   static t_spiError t_sErr;

   memset( (void *)&gt_sdDev, 0, sizeof(t_sdDev));
    25d0:	85 e0       	ldi	r24, 0x05	; 5
    25d2:	e9 ea       	ldi	r30, 0xA9	; 169
    25d4:	f2 e2       	ldi	r31, 0x22	; 34
    25d6:	df 01       	movw	r26, r30
    25d8:	1d 92       	st	X+, r1
    25da:	8a 95       	dec	r24
    25dc:	e9 f7       	brne	.-6      	; 0x25d8 <drv_sdInit+0x28>

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "sdDevice0",
    25de:	86 e4       	ldi	r24, 0x46	; 70
    25e0:	90 e2       	ldi	r25, 0x20	; 32
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	40 e5       	ldi	r20, 0x50	; 80
    25e6:	50 e2       	ldi	r21, 0x20	; 32
    25e8:	0e 94 c9 84 	call	0x10992	; 0x10992 <arb_registerDevice>
    25ec:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum,
                               0),
                               &gat_sdDevOps);

   if( t_err < 0)
    25ee:	87 fd       	sbrc	r24, 7
    25f0:	4e c0       	rjmp	.+156    	; 0x268e <drv_sdInit+0xde>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the sd port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_sdDev.t_mutex = arb_semaphoreCreate( MUTEX);
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
    25f8:	80 93 a9 22 	sts	0x22A9, r24
    25fc:	90 93 aa 22 	sts	0x22AA, r25

   if( gt_sdDev.t_mutex < 0)
    2600:	80 91 a9 22 	lds	r24, 0x22A9
    2604:	90 91 aa 22 	lds	r25, 0x22AA
    2608:	97 ff       	sbrs	r25, 7
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <drv_sdInit+0x68>
   {
      t_err = (t_error)gt_sdDev.t_mutex;
    260c:	80 91 a9 22 	lds	r24, 0x22A9
    2610:	90 91 aa 22 	lds	r25, 0x22AA
    2614:	18 2f       	mov	r17, r24
    2616:	37 c0       	rjmp	.+110    	; 0x2686 <drv_sdInit+0xd6>

   /*------------------------------------------------------------------------*
    * Request access to the spi port required for controlling this particular
    * sd card.
    *------------------------------------------------------------------------*/
   t_sConf.b_enDma    = false;
    2618:	18 86       	std	Y+8, r1	; 0x08
   t_sConf.i_baudRate = 800000;     /*Set the baud rate low until initialized*/
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	95 e3       	ldi	r25, 0x35	; 53
    261e:	ac e0       	ldi	r26, 0x0C	; 12
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	38 2f       	mov	r19, r24
    2624:	8c 83       	std	Y+4, r24	; 0x04
    2626:	9d 83       	std	Y+5, r25	; 0x05
    2628:	ae 83       	std	Y+6, r26	; 0x06
    262a:	bf 83       	std	Y+7, r27	; 0x07
   t_sConf.t_spiMd    = SPI_MODE_0;
    262c:	19 82       	std	Y+1, r1	; 0x01
   t_sConf.t_spiOp    = SPI_MASTER;
    262e:	1a 82       	std	Y+2, r1	; 0x02
   t_sConf.t_spiOrder = SPI_MSB_FIRST;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	8b 83       	std	Y+3, r24	; 0x03

   t_sErr = hal_configureSpiChannel( t_setup.t_spiChan,
    2634:	8f 2d       	mov	r24, r15
    2636:	00 e0       	ldi	r16, 0x00	; 0
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	21 e0       	ldi	r18, 0x01	; 1
    263c:	4d 81       	ldd	r20, Y+5	; 0x05
    263e:	5e 81       	ldd	r21, Y+6	; 0x06
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	70 e0       	ldi	r23, 0x00	; 0
    2644:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <hal_configureSpiChannel>
    2648:	80 93 a8 22 	sts	0x22A8, r24
                                     t_sConf);
   if( t_sErr < 0)
    264c:	87 fd       	sbrc	r24, 7
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <drv_sdInit+0xc8>
      t_err = ARB_HAL_ERROR;
      goto failed3;

   }/*End if( t_sErr < 0)*/

   gt_sdDev.t_spiHndl = hal_requestSpiChannel( t_setup.t_spiChan,
    2650:	8f 2d       	mov	r24, r15
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	4e 2d       	mov	r20, r14
    2658:	2d 2d       	mov	r18, r13
    265a:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <hal_requestSpiChannel>
    265e:	80 93 ab 22 	sts	0x22AB, r24
    2662:	90 93 ac 22 	sts	0x22AC, r25
                                               NULL,
                                               t_setup.t_csPort,
                                               t_setup.t_csPin);
   if( gt_sdDev.t_spiHndl < 0)
    2666:	80 91 ab 22 	lds	r24, 0x22AB
    266a:	90 91 ac 22 	lds	r25, 0x22AC
    266e:	97 fd       	sbrc	r25, 7
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <drv_sdInit+0xc8>
   }/*End if( t_sErr < 0)*/

   /*------------------------------------------------------------------------*
    * We don't have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_sdDev.c_numUsers = 0;
    2672:	10 92 ad 22 	sts	0x22AD, r1
    2676:	0b c0       	rjmp	.+22     	; 0x268e <drv_sdInit+0xde>

   return ARB_PASSED;

failed3:

   arb_semaphoreDestroy( gt_sdDev.t_mutex);
    2678:	80 91 a9 22 	lds	r24, 0x22A9
    267c:	90 91 aa 22 	lds	r25, 0x22AA
    2680:	0e 94 ef 93 	call	0x127de	; 0x127de <arb_semaphoreDestroy>
    2684:	16 ef       	ldi	r17, 0xF6	; 246

failed2:

   arb_destroyDevice( "sdDevice0");
    2686:	86 e4       	ldi	r24, 0x46	; 70
    2688:	90 e2       	ldi	r25, 0x20	; 32
    268a:	0e 94 50 84 	call	0x108a0	; 0x108a0 <arb_destroyDevice>

failed1:

   return t_err;

}/*End drv_sdInit*/
    268e:	81 2f       	mov	r24, r17
    2690:	28 96       	adiw	r28, 0x08	; 8
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	08 95       	ret

000026a6 <signalClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_error signalClose( t_DEVHANDLE t_devHandle)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	0f 92       	push	r0
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    26b6:	80 91 ae 22 	lds	r24, 0x22AE
    26ba:	90 91 af 22 	lds	r25, 0x22AF
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   gt_signalDev.c_numUsers--;
    26c4:	80 91 b5 22 	lds	r24, 0x22B5
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	80 93 b5 22 	sts	0x22B5, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    26ce:	80 91 ae 22 	lds	r24, 0x22AE
    26d2:	90 91 af 22 	lds	r25, 0x22AF
    26d6:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return ARB_PASSED;

}/*End signalClose*/
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <signalIoctl>:
}/*End signalOpen*/

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0f 92       	push	r0
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	16 2f       	mov	r17, r22
   int32_t i_return = (int32_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    2700:	80 91 ae 22 	lds	r24, 0x22AE
    2704:	90 91 af 22 	lds	r25, 0x22AF
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   switch( (t_signalCmd)s_command)
    270e:	15 30       	cpi	r17, 0x05	; 5
    2710:	09 f4       	brne	.+2      	; 0x2714 <signalIoctl+0x2e>
    2712:	bd c3       	rjmp	.+1914   	; 0x2e8e <signalIoctl+0x7a8>
    2714:	16 30       	cpi	r17, 0x06	; 6
    2716:	80 f4       	brcc	.+32     	; 0x2738 <signalIoctl+0x52>
    2718:	12 30       	cpi	r17, 0x02	; 2
    271a:	09 f4       	brne	.+2      	; 0x271e <signalIoctl+0x38>
    271c:	a8 c1       	rjmp	.+848    	; 0x2a6e <signalIoctl+0x388>
    271e:	13 30       	cpi	r17, 0x03	; 3
    2720:	28 f4       	brcc	.+10     	; 0x272c <signalIoctl+0x46>
    2722:	11 23       	and	r17, r17
    2724:	41 f1       	breq	.+80     	; 0x2776 <signalIoctl+0x90>
    2726:	11 30       	cpi	r17, 0x01	; 1
    2728:	e1 f4       	brne	.+56     	; 0x2762 <signalIoctl+0x7c>
    272a:	f1 c0       	rjmp	.+482    	; 0x290e <signalIoctl+0x228>
    272c:	13 30       	cpi	r17, 0x03	; 3
    272e:	09 f4       	brne	.+2      	; 0x2732 <signalIoctl+0x4c>
    2730:	4e c2       	rjmp	.+1180   	; 0x2bce <signalIoctl+0x4e8>
    2732:	14 30       	cpi	r17, 0x04	; 4
    2734:	b1 f4       	brne	.+44     	; 0x2762 <signalIoctl+0x7c>
    2736:	fb c2       	rjmp	.+1526   	; 0x2d2e <signalIoctl+0x648>
    2738:	18 30       	cpi	r17, 0x08	; 8
    273a:	09 f4       	brne	.+2      	; 0x273e <signalIoctl+0x58>
    273c:	b8 c5       	rjmp	.+2928   	; 0x32ae <signalIoctl+0xbc8>
    273e:	19 30       	cpi	r17, 0x09	; 9
    2740:	30 f4       	brcc	.+12     	; 0x274e <signalIoctl+0x68>
    2742:	16 30       	cpi	r17, 0x06	; 6
    2744:	09 f4       	brne	.+2      	; 0x2748 <signalIoctl+0x62>
    2746:	53 c4       	rjmp	.+2214   	; 0x2fee <signalIoctl+0x908>
    2748:	17 30       	cpi	r17, 0x07	; 7
    274a:	59 f4       	brne	.+22     	; 0x2762 <signalIoctl+0x7c>
    274c:	00 c5       	rjmp	.+2560   	; 0x314e <signalIoctl+0xa68>
    274e:	1a 30       	cpi	r17, 0x0A	; 10
    2750:	09 f4       	brne	.+2      	; 0x2754 <signalIoctl+0x6e>
    2752:	0d c7       	rjmp	.+3610   	; 0x356e <signalIoctl+0xe88>
    2754:	1a 30       	cpi	r17, 0x0A	; 10
    2756:	08 f4       	brcc	.+2      	; 0x275a <signalIoctl+0x74>
    2758:	5a c6       	rjmp	.+3252   	; 0x340e <signalIoctl+0xd28>
    275a:	1b 30       	cpi	r17, 0x0B	; 11
    275c:	11 f4       	brne	.+4      	; 0x2762 <signalIoctl+0x7c>
    275e:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <signalIoctl+0xfe8>
    2762:	8b ef       	ldi	r24, 0xFB	; 251
    2764:	e8 2e       	mov	r14, r24
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	f8 2e       	mov	r15, r24
    276a:	8f ef       	ldi	r24, 0xFF	; 255
    276c:	08 2f       	mov	r16, r24
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	18 2f       	mov	r17, r24
    2772:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
   {
      case RED_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    2776:	90 91 b1 22 	lds	r25, 0x22B1
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    277a:	80 91 b0 22 	lds	r24, 0x22B0
    277e:	85 30       	cpi	r24, 0x05	; 5
    2780:	09 f4       	brne	.+2      	; 0x2784 <signalIoctl+0x9e>
    2782:	71 c0       	rjmp	.+226    	; 0x2866 <signalIoctl+0x180>
    2784:	86 30       	cpi	r24, 0x06	; 6
    2786:	a0 f4       	brcc	.+40     	; 0x27b0 <signalIoctl+0xca>
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	09 f4       	brne	.+2      	; 0x278e <signalIoctl+0xa8>
    278c:	42 c0       	rjmp	.+132    	; 0x2812 <signalIoctl+0x12c>
    278e:	83 30       	cpi	r24, 0x03	; 3
    2790:	38 f4       	brcc	.+14     	; 0x27a0 <signalIoctl+0xba>
    2792:	88 23       	and	r24, r24
    2794:	11 f1       	breq	.+68     	; 0x27da <signalIoctl+0xf4>
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	11 f0       	breq	.+4      	; 0x279e <signalIoctl+0xb8>
    279a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
    279e:	2b c0       	rjmp	.+86     	; 0x27f6 <signalIoctl+0x110>
    27a0:	83 30       	cpi	r24, 0x03	; 3
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <signalIoctl+0xc0>
    27a4:	44 c0       	rjmp	.+136    	; 0x282e <signalIoctl+0x148>
    27a6:	84 30       	cpi	r24, 0x04	; 4
    27a8:	11 f0       	breq	.+4      	; 0x27ae <signalIoctl+0xc8>
    27aa:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
    27ae:	4d c0       	rjmp	.+154    	; 0x284a <signalIoctl+0x164>
    27b0:	88 30       	cpi	r24, 0x08	; 8
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <signalIoctl+0xd0>
    27b4:	82 c0       	rjmp	.+260    	; 0x28ba <signalIoctl+0x1d4>
    27b6:	89 30       	cpi	r24, 0x09	; 9
    27b8:	40 f4       	brcc	.+16     	; 0x27ca <signalIoctl+0xe4>
    27ba:	86 30       	cpi	r24, 0x06	; 6
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <signalIoctl+0xda>
    27be:	61 c0       	rjmp	.+194    	; 0x2882 <signalIoctl+0x19c>
    27c0:	87 30       	cpi	r24, 0x07	; 7
    27c2:	11 f0       	breq	.+4      	; 0x27c8 <signalIoctl+0xe2>
    27c4:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
    27c8:	6a c0       	rjmp	.+212    	; 0x289e <signalIoctl+0x1b8>
    27ca:	89 30       	cpi	r24, 0x09	; 9
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <signalIoctl+0xea>
    27ce:	83 c0       	rjmp	.+262    	; 0x28d6 <signalIoctl+0x1f0>
    27d0:	8a 30       	cpi	r24, 0x0A	; 10
    27d2:	11 f0       	breq	.+4      	; 0x27d8 <signalIoctl+0xf2>
    27d4:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
    27d8:	8c c0       	rjmp	.+280    	; 0x28f2 <signalIoctl+0x20c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    27da:	80 91 00 06 	lds	r24, 0x0600
    27de:	89 23       	and	r24, r25
    27e0:	11 f4       	brne	.+4      	; 0x27e6 <signalIoctl+0x100>
    27e2:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    27e6:	e0 e0       	ldi	r30, 0x00	; 0
    27e8:	f6 e0       	ldi	r31, 0x06	; 6
    27ea:	96 83       	std	Z+6, r25	; 0x06
    27ec:	ee 24       	eor	r14, r14
    27ee:	ff 24       	eor	r15, r15
    27f0:	87 01       	movw	r16, r14
    27f2:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    27f6:	80 91 20 06 	lds	r24, 0x0620
    27fa:	89 23       	and	r24, r25
    27fc:	11 f4       	brne	.+4      	; 0x2802 <signalIoctl+0x11c>
    27fe:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    2802:	e0 e2       	ldi	r30, 0x20	; 32
    2804:	f6 e0       	ldi	r31, 0x06	; 6
    2806:	96 83       	std	Z+6, r25	; 0x06
    2808:	ee 24       	eor	r14, r14
    280a:	ff 24       	eor	r15, r15
    280c:	87 01       	movw	r16, r14
    280e:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2812:	80 91 40 06 	lds	r24, 0x0640
    2816:	89 23       	and	r24, r25
    2818:	11 f4       	brne	.+4      	; 0x281e <signalIoctl+0x138>
    281a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    281e:	e0 e4       	ldi	r30, 0x40	; 64
    2820:	f6 e0       	ldi	r31, 0x06	; 6
    2822:	96 83       	std	Z+6, r25	; 0x06
    2824:	ee 24       	eor	r14, r14
    2826:	ff 24       	eor	r15, r15
    2828:	87 01       	movw	r16, r14
    282a:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    282e:	80 91 60 06 	lds	r24, 0x0660
    2832:	89 23       	and	r24, r25
    2834:	11 f4       	brne	.+4      	; 0x283a <signalIoctl+0x154>
    2836:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    283a:	e0 e6       	ldi	r30, 0x60	; 96
    283c:	f6 e0       	ldi	r31, 0x06	; 6
    283e:	96 83       	std	Z+6, r25	; 0x06
    2840:	ee 24       	eor	r14, r14
    2842:	ff 24       	eor	r15, r15
    2844:	87 01       	movw	r16, r14
    2846:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    284a:	80 91 80 06 	lds	r24, 0x0680
    284e:	89 23       	and	r24, r25
    2850:	11 f4       	brne	.+4      	; 0x2856 <signalIoctl+0x170>
    2852:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    2856:	e0 e8       	ldi	r30, 0x80	; 128
    2858:	f6 e0       	ldi	r31, 0x06	; 6
    285a:	96 83       	std	Z+6, r25	; 0x06
    285c:	ee 24       	eor	r14, r14
    285e:	ff 24       	eor	r15, r15
    2860:	87 01       	movw	r16, r14
    2862:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2866:	80 91 a0 06 	lds	r24, 0x06A0
    286a:	89 23       	and	r24, r25
    286c:	11 f4       	brne	.+4      	; 0x2872 <signalIoctl+0x18c>
    286e:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    2872:	e0 ea       	ldi	r30, 0xA0	; 160
    2874:	f6 e0       	ldi	r31, 0x06	; 6
    2876:	96 83       	std	Z+6, r25	; 0x06
    2878:	ee 24       	eor	r14, r14
    287a:	ff 24       	eor	r15, r15
    287c:	87 01       	movw	r16, r14
    287e:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2882:	80 91 e0 06 	lds	r24, 0x06E0
    2886:	89 23       	and	r24, r25
    2888:	11 f4       	brne	.+4      	; 0x288e <signalIoctl+0x1a8>
    288a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    288e:	e0 ee       	ldi	r30, 0xE0	; 224
    2890:	f6 e0       	ldi	r31, 0x06	; 6
    2892:	96 83       	std	Z+6, r25	; 0x06
    2894:	ee 24       	eor	r14, r14
    2896:	ff 24       	eor	r15, r15
    2898:	87 01       	movw	r16, r14
    289a:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    289e:	80 91 00 07 	lds	r24, 0x0700
    28a2:	89 23       	and	r24, r25
    28a4:	11 f4       	brne	.+4      	; 0x28aa <signalIoctl+0x1c4>
    28a6:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    28aa:	e0 e0       	ldi	r30, 0x00	; 0
    28ac:	f7 e0       	ldi	r31, 0x07	; 7
    28ae:	96 83       	std	Z+6, r25	; 0x06
    28b0:	ee 24       	eor	r14, r14
    28b2:	ff 24       	eor	r15, r15
    28b4:	87 01       	movw	r16, r14
    28b6:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    28ba:	80 91 20 07 	lds	r24, 0x0720
    28be:	89 23       	and	r24, r25
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <signalIoctl+0x1e0>
    28c2:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    28c6:	e0 e2       	ldi	r30, 0x20	; 32
    28c8:	f7 e0       	ldi	r31, 0x07	; 7
    28ca:	96 83       	std	Z+6, r25	; 0x06
    28cc:	ee 24       	eor	r14, r14
    28ce:	ff 24       	eor	r15, r15
    28d0:	87 01       	movw	r16, r14
    28d2:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    28d6:	80 91 c0 07 	lds	r24, 0x07C0
    28da:	89 23       	and	r24, r25
    28dc:	11 f4       	brne	.+4      	; 0x28e2 <signalIoctl+0x1fc>
    28de:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    28e2:	e0 ec       	ldi	r30, 0xC0	; 192
    28e4:	f7 e0       	ldi	r31, 0x07	; 7
    28e6:	96 83       	std	Z+6, r25	; 0x06
    28e8:	ee 24       	eor	r14, r14
    28ea:	ff 24       	eor	r15, r15
    28ec:	87 01       	movw	r16, r14
    28ee:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    28f2:	80 91 e0 07 	lds	r24, 0x07E0
    28f6:	89 23       	and	r24, r25
    28f8:	11 f4       	brne	.+4      	; 0x28fe <signalIoctl+0x218>
    28fa:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    28fe:	e0 ee       	ldi	r30, 0xE0	; 224
    2900:	f7 e0       	ldi	r31, 0x07	; 7
    2902:	96 83       	std	Z+6, r25	; 0x06
    2904:	ee 24       	eor	r14, r14
    2906:	ff 24       	eor	r15, r15
    2908:	87 01       	movw	r16, r14
    290a:	0c 94 15 1c 	jmp	0x382a	; 0x382a <signalIoctl+0x1144>

      break;/*End case RED_LED_ON:*/

      case RED_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    290e:	90 91 b1 22 	lds	r25, 0x22B1
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2912:	80 91 b0 22 	lds	r24, 0x22B0
    2916:	85 30       	cpi	r24, 0x05	; 5
    2918:	09 f4       	brne	.+2      	; 0x291c <signalIoctl+0x236>
    291a:	61 c0       	rjmp	.+194    	; 0x29de <signalIoctl+0x2f8>
    291c:	86 30       	cpi	r24, 0x06	; 6
    291e:	80 f4       	brcc	.+32     	; 0x2940 <signalIoctl+0x25a>
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	c9 f1       	breq	.+114    	; 0x2996 <signalIoctl+0x2b0>
    2924:	83 30       	cpi	r24, 0x03	; 3
    2926:	30 f4       	brcc	.+12     	; 0x2934 <signalIoctl+0x24e>
    2928:	88 23       	and	r24, r24
    292a:	e9 f0       	breq	.+58     	; 0x2966 <signalIoctl+0x280>
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	09 f0       	breq	.+2      	; 0x2932 <signalIoctl+0x24c>
    2930:	79 c7       	rjmp	.+3826   	; 0x3824 <signalIoctl+0x113e>
    2932:	25 c0       	rjmp	.+74     	; 0x297e <signalIoctl+0x298>
    2934:	83 30       	cpi	r24, 0x03	; 3
    2936:	d9 f1       	breq	.+118    	; 0x29ae <signalIoctl+0x2c8>
    2938:	84 30       	cpi	r24, 0x04	; 4
    293a:	09 f0       	breq	.+2      	; 0x293e <signalIoctl+0x258>
    293c:	73 c7       	rjmp	.+3814   	; 0x3824 <signalIoctl+0x113e>
    293e:	43 c0       	rjmp	.+134    	; 0x29c6 <signalIoctl+0x2e0>
    2940:	88 30       	cpi	r24, 0x08	; 8
    2942:	09 f4       	brne	.+2      	; 0x2946 <signalIoctl+0x260>
    2944:	70 c0       	rjmp	.+224    	; 0x2a26 <signalIoctl+0x340>
    2946:	89 30       	cpi	r24, 0x09	; 9
    2948:	38 f4       	brcc	.+14     	; 0x2958 <signalIoctl+0x272>
    294a:	86 30       	cpi	r24, 0x06	; 6
    294c:	09 f4       	brne	.+2      	; 0x2950 <signalIoctl+0x26a>
    294e:	53 c0       	rjmp	.+166    	; 0x29f6 <signalIoctl+0x310>
    2950:	87 30       	cpi	r24, 0x07	; 7
    2952:	09 f0       	breq	.+2      	; 0x2956 <signalIoctl+0x270>
    2954:	67 c7       	rjmp	.+3790   	; 0x3824 <signalIoctl+0x113e>
    2956:	5b c0       	rjmp	.+182    	; 0x2a0e <signalIoctl+0x328>
    2958:	89 30       	cpi	r24, 0x09	; 9
    295a:	09 f4       	brne	.+2      	; 0x295e <signalIoctl+0x278>
    295c:	70 c0       	rjmp	.+224    	; 0x2a3e <signalIoctl+0x358>
    295e:	8a 30       	cpi	r24, 0x0A	; 10
    2960:	09 f0       	breq	.+2      	; 0x2964 <signalIoctl+0x27e>
    2962:	60 c7       	rjmp	.+3776   	; 0x3824 <signalIoctl+0x113e>
    2964:	78 c0       	rjmp	.+240    	; 0x2a56 <signalIoctl+0x370>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2966:	80 91 00 06 	lds	r24, 0x0600
    296a:	89 23       	and	r24, r25
    296c:	09 f4       	brne	.+2      	; 0x2970 <signalIoctl+0x28a>
    296e:	5a c7       	rjmp	.+3764   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    2970:	e0 e0       	ldi	r30, 0x00	; 0
    2972:	f6 e0       	ldi	r31, 0x06	; 6
    2974:	95 83       	std	Z+5, r25	; 0x05
    2976:	ee 24       	eor	r14, r14
    2978:	ff 24       	eor	r15, r15
    297a:	87 01       	movw	r16, r14
    297c:	56 c7       	rjmp	.+3756   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    297e:	80 91 20 06 	lds	r24, 0x0620
    2982:	89 23       	and	r24, r25
    2984:	09 f4       	brne	.+2      	; 0x2988 <signalIoctl+0x2a2>
    2986:	4e c7       	rjmp	.+3740   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    2988:	e0 e2       	ldi	r30, 0x20	; 32
    298a:	f6 e0       	ldi	r31, 0x06	; 6
    298c:	95 83       	std	Z+5, r25	; 0x05
    298e:	ee 24       	eor	r14, r14
    2990:	ff 24       	eor	r15, r15
    2992:	87 01       	movw	r16, r14
    2994:	4a c7       	rjmp	.+3732   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2996:	80 91 40 06 	lds	r24, 0x0640
    299a:	89 23       	and	r24, r25
    299c:	09 f4       	brne	.+2      	; 0x29a0 <signalIoctl+0x2ba>
    299e:	42 c7       	rjmp	.+3716   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    29a0:	e0 e4       	ldi	r30, 0x40	; 64
    29a2:	f6 e0       	ldi	r31, 0x06	; 6
    29a4:	95 83       	std	Z+5, r25	; 0x05
    29a6:	ee 24       	eor	r14, r14
    29a8:	ff 24       	eor	r15, r15
    29aa:	87 01       	movw	r16, r14
    29ac:	3e c7       	rjmp	.+3708   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    29ae:	80 91 60 06 	lds	r24, 0x0660
    29b2:	89 23       	and	r24, r25
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <signalIoctl+0x2d2>
    29b6:	36 c7       	rjmp	.+3692   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    29b8:	e0 e6       	ldi	r30, 0x60	; 96
    29ba:	f6 e0       	ldi	r31, 0x06	; 6
    29bc:	95 83       	std	Z+5, r25	; 0x05
    29be:	ee 24       	eor	r14, r14
    29c0:	ff 24       	eor	r15, r15
    29c2:	87 01       	movw	r16, r14
    29c4:	32 c7       	rjmp	.+3684   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    29c6:	80 91 80 06 	lds	r24, 0x0680
    29ca:	89 23       	and	r24, r25
    29cc:	09 f4       	brne	.+2      	; 0x29d0 <signalIoctl+0x2ea>
    29ce:	2a c7       	rjmp	.+3668   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    29d0:	e0 e8       	ldi	r30, 0x80	; 128
    29d2:	f6 e0       	ldi	r31, 0x06	; 6
    29d4:	95 83       	std	Z+5, r25	; 0x05
    29d6:	ee 24       	eor	r14, r14
    29d8:	ff 24       	eor	r15, r15
    29da:	87 01       	movw	r16, r14
    29dc:	26 c7       	rjmp	.+3660   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    29de:	80 91 a0 06 	lds	r24, 0x06A0
    29e2:	89 23       	and	r24, r25
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <signalIoctl+0x302>
    29e6:	1e c7       	rjmp	.+3644   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    29e8:	e0 ea       	ldi	r30, 0xA0	; 160
    29ea:	f6 e0       	ldi	r31, 0x06	; 6
    29ec:	95 83       	std	Z+5, r25	; 0x05
    29ee:	ee 24       	eor	r14, r14
    29f0:	ff 24       	eor	r15, r15
    29f2:	87 01       	movw	r16, r14
    29f4:	1a c7       	rjmp	.+3636   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    29f6:	80 91 e0 06 	lds	r24, 0x06E0
    29fa:	89 23       	and	r24, r25
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <signalIoctl+0x31a>
    29fe:	12 c7       	rjmp	.+3620   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    2a00:	e0 ee       	ldi	r30, 0xE0	; 224
    2a02:	f6 e0       	ldi	r31, 0x06	; 6
    2a04:	95 83       	std	Z+5, r25	; 0x05
    2a06:	ee 24       	eor	r14, r14
    2a08:	ff 24       	eor	r15, r15
    2a0a:	87 01       	movw	r16, r14
    2a0c:	0e c7       	rjmp	.+3612   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2a0e:	80 91 00 07 	lds	r24, 0x0700
    2a12:	89 23       	and	r24, r25
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <signalIoctl+0x332>
    2a16:	06 c7       	rjmp	.+3596   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    2a18:	e0 e0       	ldi	r30, 0x00	; 0
    2a1a:	f7 e0       	ldi	r31, 0x07	; 7
    2a1c:	95 83       	std	Z+5, r25	; 0x05
    2a1e:	ee 24       	eor	r14, r14
    2a20:	ff 24       	eor	r15, r15
    2a22:	87 01       	movw	r16, r14
    2a24:	02 c7       	rjmp	.+3588   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2a26:	80 91 20 07 	lds	r24, 0x0720
    2a2a:	89 23       	and	r24, r25
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <signalIoctl+0x34a>
    2a2e:	fa c6       	rjmp	.+3572   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    2a30:	e0 e2       	ldi	r30, 0x20	; 32
    2a32:	f7 e0       	ldi	r31, 0x07	; 7
    2a34:	95 83       	std	Z+5, r25	; 0x05
    2a36:	ee 24       	eor	r14, r14
    2a38:	ff 24       	eor	r15, r15
    2a3a:	87 01       	movw	r16, r14
    2a3c:	f6 c6       	rjmp	.+3564   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2a3e:	80 91 c0 07 	lds	r24, 0x07C0
    2a42:	89 23       	and	r24, r25
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <signalIoctl+0x362>
    2a46:	ee c6       	rjmp	.+3548   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    2a48:	e0 ec       	ldi	r30, 0xC0	; 192
    2a4a:	f7 e0       	ldi	r31, 0x07	; 7
    2a4c:	95 83       	std	Z+5, r25	; 0x05
    2a4e:	ee 24       	eor	r14, r14
    2a50:	ff 24       	eor	r15, r15
    2a52:	87 01       	movw	r16, r14
    2a54:	ea c6       	rjmp	.+3540   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2a56:	80 91 e0 07 	lds	r24, 0x07E0
    2a5a:	89 23       	and	r24, r25
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <signalIoctl+0x37a>
    2a5e:	e2 c6       	rjmp	.+3524   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    2a60:	e0 ee       	ldi	r30, 0xE0	; 224
    2a62:	f7 e0       	ldi	r31, 0x07	; 7
    2a64:	95 83       	std	Z+5, r25	; 0x05
    2a66:	ee 24       	eor	r14, r14
    2a68:	ff 24       	eor	r15, r15
    2a6a:	87 01       	movw	r16, r14
    2a6c:	de c6       	rjmp	.+3516   	; 0x382a <signalIoctl+0x1144>

      break;/*End case RED_LED_OFF:*/

      case RED_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    2a6e:	90 91 b1 22 	lds	r25, 0x22B1
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2a72:	80 91 b0 22 	lds	r24, 0x22B0
    2a76:	85 30       	cpi	r24, 0x05	; 5
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <signalIoctl+0x396>
    2a7a:	61 c0       	rjmp	.+194    	; 0x2b3e <signalIoctl+0x458>
    2a7c:	86 30       	cpi	r24, 0x06	; 6
    2a7e:	80 f4       	brcc	.+32     	; 0x2aa0 <signalIoctl+0x3ba>
    2a80:	82 30       	cpi	r24, 0x02	; 2
    2a82:	c9 f1       	breq	.+114    	; 0x2af6 <signalIoctl+0x410>
    2a84:	83 30       	cpi	r24, 0x03	; 3
    2a86:	30 f4       	brcc	.+12     	; 0x2a94 <signalIoctl+0x3ae>
    2a88:	88 23       	and	r24, r24
    2a8a:	e9 f0       	breq	.+58     	; 0x2ac6 <signalIoctl+0x3e0>
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <signalIoctl+0x3ac>
    2a90:	c9 c6       	rjmp	.+3474   	; 0x3824 <signalIoctl+0x113e>
    2a92:	25 c0       	rjmp	.+74     	; 0x2ade <signalIoctl+0x3f8>
    2a94:	83 30       	cpi	r24, 0x03	; 3
    2a96:	d9 f1       	breq	.+118    	; 0x2b0e <signalIoctl+0x428>
    2a98:	84 30       	cpi	r24, 0x04	; 4
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <signalIoctl+0x3b8>
    2a9c:	c3 c6       	rjmp	.+3462   	; 0x3824 <signalIoctl+0x113e>
    2a9e:	43 c0       	rjmp	.+134    	; 0x2b26 <signalIoctl+0x440>
    2aa0:	88 30       	cpi	r24, 0x08	; 8
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <signalIoctl+0x3c0>
    2aa4:	70 c0       	rjmp	.+224    	; 0x2b86 <signalIoctl+0x4a0>
    2aa6:	89 30       	cpi	r24, 0x09	; 9
    2aa8:	38 f4       	brcc	.+14     	; 0x2ab8 <signalIoctl+0x3d2>
    2aaa:	86 30       	cpi	r24, 0x06	; 6
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <signalIoctl+0x3ca>
    2aae:	53 c0       	rjmp	.+166    	; 0x2b56 <signalIoctl+0x470>
    2ab0:	87 30       	cpi	r24, 0x07	; 7
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <signalIoctl+0x3d0>
    2ab4:	b7 c6       	rjmp	.+3438   	; 0x3824 <signalIoctl+0x113e>
    2ab6:	5b c0       	rjmp	.+182    	; 0x2b6e <signalIoctl+0x488>
    2ab8:	89 30       	cpi	r24, 0x09	; 9
    2aba:	09 f4       	brne	.+2      	; 0x2abe <signalIoctl+0x3d8>
    2abc:	70 c0       	rjmp	.+224    	; 0x2b9e <signalIoctl+0x4b8>
    2abe:	8a 30       	cpi	r24, 0x0A	; 10
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <signalIoctl+0x3de>
    2ac2:	b0 c6       	rjmp	.+3424   	; 0x3824 <signalIoctl+0x113e>
    2ac4:	78 c0       	rjmp	.+240    	; 0x2bb6 <signalIoctl+0x4d0>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2ac6:	80 91 00 06 	lds	r24, 0x0600
    2aca:	89 23       	and	r24, r25
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <signalIoctl+0x3ea>
    2ace:	aa c6       	rjmp	.+3412   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    2ad0:	e0 e0       	ldi	r30, 0x00	; 0
    2ad2:	f6 e0       	ldi	r31, 0x06	; 6
    2ad4:	97 83       	std	Z+7, r25	; 0x07
    2ad6:	ee 24       	eor	r14, r14
    2ad8:	ff 24       	eor	r15, r15
    2ada:	87 01       	movw	r16, r14
    2adc:	a6 c6       	rjmp	.+3404   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2ade:	80 91 20 06 	lds	r24, 0x0620
    2ae2:	89 23       	and	r24, r25
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <signalIoctl+0x402>
    2ae6:	9e c6       	rjmp	.+3388   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    2ae8:	e0 e2       	ldi	r30, 0x20	; 32
    2aea:	f6 e0       	ldi	r31, 0x06	; 6
    2aec:	97 83       	std	Z+7, r25	; 0x07
    2aee:	ee 24       	eor	r14, r14
    2af0:	ff 24       	eor	r15, r15
    2af2:	87 01       	movw	r16, r14
    2af4:	9a c6       	rjmp	.+3380   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2af6:	80 91 40 06 	lds	r24, 0x0640
    2afa:	89 23       	and	r24, r25
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <signalIoctl+0x41a>
    2afe:	92 c6       	rjmp	.+3364   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f6 e0       	ldi	r31, 0x06	; 6
    2b04:	97 83       	std	Z+7, r25	; 0x07
    2b06:	ee 24       	eor	r14, r14
    2b08:	ff 24       	eor	r15, r15
    2b0a:	87 01       	movw	r16, r14
    2b0c:	8e c6       	rjmp	.+3356   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2b0e:	80 91 60 06 	lds	r24, 0x0660
    2b12:	89 23       	and	r24, r25
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <signalIoctl+0x432>
    2b16:	86 c6       	rjmp	.+3340   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    2b18:	e0 e6       	ldi	r30, 0x60	; 96
    2b1a:	f6 e0       	ldi	r31, 0x06	; 6
    2b1c:	97 83       	std	Z+7, r25	; 0x07
    2b1e:	ee 24       	eor	r14, r14
    2b20:	ff 24       	eor	r15, r15
    2b22:	87 01       	movw	r16, r14
    2b24:	82 c6       	rjmp	.+3332   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2b26:	80 91 80 06 	lds	r24, 0x0680
    2b2a:	89 23       	and	r24, r25
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <signalIoctl+0x44a>
    2b2e:	7a c6       	rjmp	.+3316   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    2b30:	e0 e8       	ldi	r30, 0x80	; 128
    2b32:	f6 e0       	ldi	r31, 0x06	; 6
    2b34:	97 83       	std	Z+7, r25	; 0x07
    2b36:	ee 24       	eor	r14, r14
    2b38:	ff 24       	eor	r15, r15
    2b3a:	87 01       	movw	r16, r14
    2b3c:	76 c6       	rjmp	.+3308   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2b3e:	80 91 a0 06 	lds	r24, 0x06A0
    2b42:	89 23       	and	r24, r25
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <signalIoctl+0x462>
    2b46:	6e c6       	rjmp	.+3292   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    2b48:	e0 ea       	ldi	r30, 0xA0	; 160
    2b4a:	f6 e0       	ldi	r31, 0x06	; 6
    2b4c:	97 83       	std	Z+7, r25	; 0x07
    2b4e:	ee 24       	eor	r14, r14
    2b50:	ff 24       	eor	r15, r15
    2b52:	87 01       	movw	r16, r14
    2b54:	6a c6       	rjmp	.+3284   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2b56:	80 91 e0 06 	lds	r24, 0x06E0
    2b5a:	89 23       	and	r24, r25
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <signalIoctl+0x47a>
    2b5e:	62 c6       	rjmp	.+3268   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    2b60:	e0 ee       	ldi	r30, 0xE0	; 224
    2b62:	f6 e0       	ldi	r31, 0x06	; 6
    2b64:	97 83       	std	Z+7, r25	; 0x07
    2b66:	ee 24       	eor	r14, r14
    2b68:	ff 24       	eor	r15, r15
    2b6a:	87 01       	movw	r16, r14
    2b6c:	5e c6       	rjmp	.+3260   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2b6e:	80 91 00 07 	lds	r24, 0x0700
    2b72:	89 23       	and	r24, r25
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <signalIoctl+0x492>
    2b76:	56 c6       	rjmp	.+3244   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    2b78:	e0 e0       	ldi	r30, 0x00	; 0
    2b7a:	f7 e0       	ldi	r31, 0x07	; 7
    2b7c:	97 83       	std	Z+7, r25	; 0x07
    2b7e:	ee 24       	eor	r14, r14
    2b80:	ff 24       	eor	r15, r15
    2b82:	87 01       	movw	r16, r14
    2b84:	52 c6       	rjmp	.+3236   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2b86:	80 91 20 07 	lds	r24, 0x0720
    2b8a:	89 23       	and	r24, r25
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <signalIoctl+0x4aa>
    2b8e:	4a c6       	rjmp	.+3220   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    2b90:	e0 e2       	ldi	r30, 0x20	; 32
    2b92:	f7 e0       	ldi	r31, 0x07	; 7
    2b94:	97 83       	std	Z+7, r25	; 0x07
    2b96:	ee 24       	eor	r14, r14
    2b98:	ff 24       	eor	r15, r15
    2b9a:	87 01       	movw	r16, r14
    2b9c:	46 c6       	rjmp	.+3212   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2b9e:	80 91 c0 07 	lds	r24, 0x07C0
    2ba2:	89 23       	and	r24, r25
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <signalIoctl+0x4c2>
    2ba6:	3e c6       	rjmp	.+3196   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    2ba8:	e0 ec       	ldi	r30, 0xC0	; 192
    2baa:	f7 e0       	ldi	r31, 0x07	; 7
    2bac:	97 83       	std	Z+7, r25	; 0x07
    2bae:	ee 24       	eor	r14, r14
    2bb0:	ff 24       	eor	r15, r15
    2bb2:	87 01       	movw	r16, r14
    2bb4:	3a c6       	rjmp	.+3188   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2bb6:	80 91 e0 07 	lds	r24, 0x07E0
    2bba:	89 23       	and	r24, r25
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <signalIoctl+0x4da>
    2bbe:	32 c6       	rjmp	.+3172   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    2bc0:	e0 ee       	ldi	r30, 0xE0	; 224
    2bc2:	f7 e0       	ldi	r31, 0x07	; 7
    2bc4:	97 83       	std	Z+7, r25	; 0x07
    2bc6:	ee 24       	eor	r14, r14
    2bc8:	ff 24       	eor	r15, r15
    2bca:	87 01       	movw	r16, r14
    2bcc:	2e c6       	rjmp	.+3164   	; 0x382a <signalIoctl+0x1144>

      break;/*End case RED_LED_TOGGLE:*/

      case GREEN_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    2bce:	90 91 b3 22 	lds	r25, 0x22B3
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2bd2:	80 91 b0 22 	lds	r24, 0x22B0
    2bd6:	85 30       	cpi	r24, 0x05	; 5
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <signalIoctl+0x4f6>
    2bda:	61 c0       	rjmp	.+194    	; 0x2c9e <signalIoctl+0x5b8>
    2bdc:	86 30       	cpi	r24, 0x06	; 6
    2bde:	80 f4       	brcc	.+32     	; 0x2c00 <signalIoctl+0x51a>
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	c9 f1       	breq	.+114    	; 0x2c56 <signalIoctl+0x570>
    2be4:	83 30       	cpi	r24, 0x03	; 3
    2be6:	30 f4       	brcc	.+12     	; 0x2bf4 <signalIoctl+0x50e>
    2be8:	88 23       	and	r24, r24
    2bea:	e9 f0       	breq	.+58     	; 0x2c26 <signalIoctl+0x540>
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <signalIoctl+0x50c>
    2bf0:	19 c6       	rjmp	.+3122   	; 0x3824 <signalIoctl+0x113e>
    2bf2:	25 c0       	rjmp	.+74     	; 0x2c3e <signalIoctl+0x558>
    2bf4:	83 30       	cpi	r24, 0x03	; 3
    2bf6:	d9 f1       	breq	.+118    	; 0x2c6e <signalIoctl+0x588>
    2bf8:	84 30       	cpi	r24, 0x04	; 4
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <signalIoctl+0x518>
    2bfc:	13 c6       	rjmp	.+3110   	; 0x3824 <signalIoctl+0x113e>
    2bfe:	43 c0       	rjmp	.+134    	; 0x2c86 <signalIoctl+0x5a0>
    2c00:	88 30       	cpi	r24, 0x08	; 8
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <signalIoctl+0x520>
    2c04:	70 c0       	rjmp	.+224    	; 0x2ce6 <signalIoctl+0x600>
    2c06:	89 30       	cpi	r24, 0x09	; 9
    2c08:	38 f4       	brcc	.+14     	; 0x2c18 <signalIoctl+0x532>
    2c0a:	86 30       	cpi	r24, 0x06	; 6
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <signalIoctl+0x52a>
    2c0e:	53 c0       	rjmp	.+166    	; 0x2cb6 <signalIoctl+0x5d0>
    2c10:	87 30       	cpi	r24, 0x07	; 7
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <signalIoctl+0x530>
    2c14:	07 c6       	rjmp	.+3086   	; 0x3824 <signalIoctl+0x113e>
    2c16:	5b c0       	rjmp	.+182    	; 0x2cce <signalIoctl+0x5e8>
    2c18:	89 30       	cpi	r24, 0x09	; 9
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <signalIoctl+0x538>
    2c1c:	70 c0       	rjmp	.+224    	; 0x2cfe <signalIoctl+0x618>
    2c1e:	8a 30       	cpi	r24, 0x0A	; 10
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <signalIoctl+0x53e>
    2c22:	00 c6       	rjmp	.+3072   	; 0x3824 <signalIoctl+0x113e>
    2c24:	78 c0       	rjmp	.+240    	; 0x2d16 <signalIoctl+0x630>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2c26:	80 91 00 06 	lds	r24, 0x0600
    2c2a:	89 23       	and	r24, r25
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <signalIoctl+0x54a>
    2c2e:	fa c5       	rjmp	.+3060   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    2c30:	e0 e0       	ldi	r30, 0x00	; 0
    2c32:	f6 e0       	ldi	r31, 0x06	; 6
    2c34:	96 83       	std	Z+6, r25	; 0x06
    2c36:	ee 24       	eor	r14, r14
    2c38:	ff 24       	eor	r15, r15
    2c3a:	87 01       	movw	r16, r14
    2c3c:	f6 c5       	rjmp	.+3052   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2c3e:	80 91 20 06 	lds	r24, 0x0620
    2c42:	89 23       	and	r24, r25
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <signalIoctl+0x562>
    2c46:	ee c5       	rjmp	.+3036   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    2c48:	e0 e2       	ldi	r30, 0x20	; 32
    2c4a:	f6 e0       	ldi	r31, 0x06	; 6
    2c4c:	96 83       	std	Z+6, r25	; 0x06
    2c4e:	ee 24       	eor	r14, r14
    2c50:	ff 24       	eor	r15, r15
    2c52:	87 01       	movw	r16, r14
    2c54:	ea c5       	rjmp	.+3028   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2c56:	80 91 40 06 	lds	r24, 0x0640
    2c5a:	89 23       	and	r24, r25
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <signalIoctl+0x57a>
    2c5e:	e2 c5       	rjmp	.+3012   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    2c60:	e0 e4       	ldi	r30, 0x40	; 64
    2c62:	f6 e0       	ldi	r31, 0x06	; 6
    2c64:	96 83       	std	Z+6, r25	; 0x06
    2c66:	ee 24       	eor	r14, r14
    2c68:	ff 24       	eor	r15, r15
    2c6a:	87 01       	movw	r16, r14
    2c6c:	de c5       	rjmp	.+3004   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2c6e:	80 91 60 06 	lds	r24, 0x0660
    2c72:	89 23       	and	r24, r25
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <signalIoctl+0x592>
    2c76:	d6 c5       	rjmp	.+2988   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    2c78:	e0 e6       	ldi	r30, 0x60	; 96
    2c7a:	f6 e0       	ldi	r31, 0x06	; 6
    2c7c:	96 83       	std	Z+6, r25	; 0x06
    2c7e:	ee 24       	eor	r14, r14
    2c80:	ff 24       	eor	r15, r15
    2c82:	87 01       	movw	r16, r14
    2c84:	d2 c5       	rjmp	.+2980   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2c86:	80 91 80 06 	lds	r24, 0x0680
    2c8a:	89 23       	and	r24, r25
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <signalIoctl+0x5aa>
    2c8e:	ca c5       	rjmp	.+2964   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    2c90:	e0 e8       	ldi	r30, 0x80	; 128
    2c92:	f6 e0       	ldi	r31, 0x06	; 6
    2c94:	96 83       	std	Z+6, r25	; 0x06
    2c96:	ee 24       	eor	r14, r14
    2c98:	ff 24       	eor	r15, r15
    2c9a:	87 01       	movw	r16, r14
    2c9c:	c6 c5       	rjmp	.+2956   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2c9e:	80 91 a0 06 	lds	r24, 0x06A0
    2ca2:	89 23       	and	r24, r25
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <signalIoctl+0x5c2>
    2ca6:	be c5       	rjmp	.+2940   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    2ca8:	e0 ea       	ldi	r30, 0xA0	; 160
    2caa:	f6 e0       	ldi	r31, 0x06	; 6
    2cac:	96 83       	std	Z+6, r25	; 0x06
    2cae:	ee 24       	eor	r14, r14
    2cb0:	ff 24       	eor	r15, r15
    2cb2:	87 01       	movw	r16, r14
    2cb4:	ba c5       	rjmp	.+2932   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2cb6:	80 91 e0 06 	lds	r24, 0x06E0
    2cba:	89 23       	and	r24, r25
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <signalIoctl+0x5da>
    2cbe:	b2 c5       	rjmp	.+2916   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    2cc0:	e0 ee       	ldi	r30, 0xE0	; 224
    2cc2:	f6 e0       	ldi	r31, 0x06	; 6
    2cc4:	96 83       	std	Z+6, r25	; 0x06
    2cc6:	ee 24       	eor	r14, r14
    2cc8:	ff 24       	eor	r15, r15
    2cca:	87 01       	movw	r16, r14
    2ccc:	ae c5       	rjmp	.+2908   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2cce:	80 91 00 07 	lds	r24, 0x0700
    2cd2:	89 23       	and	r24, r25
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <signalIoctl+0x5f2>
    2cd6:	a6 c5       	rjmp	.+2892   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    2cd8:	e0 e0       	ldi	r30, 0x00	; 0
    2cda:	f7 e0       	ldi	r31, 0x07	; 7
    2cdc:	96 83       	std	Z+6, r25	; 0x06
    2cde:	ee 24       	eor	r14, r14
    2ce0:	ff 24       	eor	r15, r15
    2ce2:	87 01       	movw	r16, r14
    2ce4:	a2 c5       	rjmp	.+2884   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2ce6:	80 91 20 07 	lds	r24, 0x0720
    2cea:	89 23       	and	r24, r25
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <signalIoctl+0x60a>
    2cee:	9a c5       	rjmp	.+2868   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    2cf0:	e0 e2       	ldi	r30, 0x20	; 32
    2cf2:	f7 e0       	ldi	r31, 0x07	; 7
    2cf4:	96 83       	std	Z+6, r25	; 0x06
    2cf6:	ee 24       	eor	r14, r14
    2cf8:	ff 24       	eor	r15, r15
    2cfa:	87 01       	movw	r16, r14
    2cfc:	96 c5       	rjmp	.+2860   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2cfe:	80 91 c0 07 	lds	r24, 0x07C0
    2d02:	89 23       	and	r24, r25
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <signalIoctl+0x622>
    2d06:	8e c5       	rjmp	.+2844   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    2d08:	e0 ec       	ldi	r30, 0xC0	; 192
    2d0a:	f7 e0       	ldi	r31, 0x07	; 7
    2d0c:	96 83       	std	Z+6, r25	; 0x06
    2d0e:	ee 24       	eor	r14, r14
    2d10:	ff 24       	eor	r15, r15
    2d12:	87 01       	movw	r16, r14
    2d14:	8a c5       	rjmp	.+2836   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2d16:	80 91 e0 07 	lds	r24, 0x07E0
    2d1a:	89 23       	and	r24, r25
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <signalIoctl+0x63a>
    2d1e:	82 c5       	rjmp	.+2820   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    2d20:	e0 ee       	ldi	r30, 0xE0	; 224
    2d22:	f7 e0       	ldi	r31, 0x07	; 7
    2d24:	96 83       	std	Z+6, r25	; 0x06
    2d26:	ee 24       	eor	r14, r14
    2d28:	ff 24       	eor	r15, r15
    2d2a:	87 01       	movw	r16, r14
    2d2c:	7e c5       	rjmp	.+2812   	; 0x382a <signalIoctl+0x1144>

      break;/*End case GREEN_LED_ON:*/

      case GREEN_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    2d2e:	90 91 b3 22 	lds	r25, 0x22B3
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2d32:	80 91 b0 22 	lds	r24, 0x22B0
    2d36:	85 30       	cpi	r24, 0x05	; 5
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <signalIoctl+0x656>
    2d3a:	61 c0       	rjmp	.+194    	; 0x2dfe <signalIoctl+0x718>
    2d3c:	86 30       	cpi	r24, 0x06	; 6
    2d3e:	80 f4       	brcc	.+32     	; 0x2d60 <signalIoctl+0x67a>
    2d40:	82 30       	cpi	r24, 0x02	; 2
    2d42:	c9 f1       	breq	.+114    	; 0x2db6 <signalIoctl+0x6d0>
    2d44:	83 30       	cpi	r24, 0x03	; 3
    2d46:	30 f4       	brcc	.+12     	; 0x2d54 <signalIoctl+0x66e>
    2d48:	88 23       	and	r24, r24
    2d4a:	e9 f0       	breq	.+58     	; 0x2d86 <signalIoctl+0x6a0>
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	09 f0       	breq	.+2      	; 0x2d52 <signalIoctl+0x66c>
    2d50:	69 c5       	rjmp	.+2770   	; 0x3824 <signalIoctl+0x113e>
    2d52:	25 c0       	rjmp	.+74     	; 0x2d9e <signalIoctl+0x6b8>
    2d54:	83 30       	cpi	r24, 0x03	; 3
    2d56:	d9 f1       	breq	.+118    	; 0x2dce <signalIoctl+0x6e8>
    2d58:	84 30       	cpi	r24, 0x04	; 4
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <signalIoctl+0x678>
    2d5c:	63 c5       	rjmp	.+2758   	; 0x3824 <signalIoctl+0x113e>
    2d5e:	43 c0       	rjmp	.+134    	; 0x2de6 <signalIoctl+0x700>
    2d60:	88 30       	cpi	r24, 0x08	; 8
    2d62:	09 f4       	brne	.+2      	; 0x2d66 <signalIoctl+0x680>
    2d64:	70 c0       	rjmp	.+224    	; 0x2e46 <signalIoctl+0x760>
    2d66:	89 30       	cpi	r24, 0x09	; 9
    2d68:	38 f4       	brcc	.+14     	; 0x2d78 <signalIoctl+0x692>
    2d6a:	86 30       	cpi	r24, 0x06	; 6
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <signalIoctl+0x68a>
    2d6e:	53 c0       	rjmp	.+166    	; 0x2e16 <signalIoctl+0x730>
    2d70:	87 30       	cpi	r24, 0x07	; 7
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <signalIoctl+0x690>
    2d74:	57 c5       	rjmp	.+2734   	; 0x3824 <signalIoctl+0x113e>
    2d76:	5b c0       	rjmp	.+182    	; 0x2e2e <signalIoctl+0x748>
    2d78:	89 30       	cpi	r24, 0x09	; 9
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <signalIoctl+0x698>
    2d7c:	70 c0       	rjmp	.+224    	; 0x2e5e <signalIoctl+0x778>
    2d7e:	8a 30       	cpi	r24, 0x0A	; 10
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <signalIoctl+0x69e>
    2d82:	50 c5       	rjmp	.+2720   	; 0x3824 <signalIoctl+0x113e>
    2d84:	78 c0       	rjmp	.+240    	; 0x2e76 <signalIoctl+0x790>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2d86:	80 91 00 06 	lds	r24, 0x0600
    2d8a:	89 23       	and	r24, r25
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <signalIoctl+0x6aa>
    2d8e:	4a c5       	rjmp	.+2708   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    2d90:	e0 e0       	ldi	r30, 0x00	; 0
    2d92:	f6 e0       	ldi	r31, 0x06	; 6
    2d94:	95 83       	std	Z+5, r25	; 0x05
    2d96:	ee 24       	eor	r14, r14
    2d98:	ff 24       	eor	r15, r15
    2d9a:	87 01       	movw	r16, r14
    2d9c:	46 c5       	rjmp	.+2700   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2d9e:	80 91 20 06 	lds	r24, 0x0620
    2da2:	89 23       	and	r24, r25
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <signalIoctl+0x6c2>
    2da6:	3e c5       	rjmp	.+2684   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    2da8:	e0 e2       	ldi	r30, 0x20	; 32
    2daa:	f6 e0       	ldi	r31, 0x06	; 6
    2dac:	95 83       	std	Z+5, r25	; 0x05
    2dae:	ee 24       	eor	r14, r14
    2db0:	ff 24       	eor	r15, r15
    2db2:	87 01       	movw	r16, r14
    2db4:	3a c5       	rjmp	.+2676   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2db6:	80 91 40 06 	lds	r24, 0x0640
    2dba:	89 23       	and	r24, r25
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <signalIoctl+0x6da>
    2dbe:	32 c5       	rjmp	.+2660   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    2dc0:	e0 e4       	ldi	r30, 0x40	; 64
    2dc2:	f6 e0       	ldi	r31, 0x06	; 6
    2dc4:	95 83       	std	Z+5, r25	; 0x05
    2dc6:	ee 24       	eor	r14, r14
    2dc8:	ff 24       	eor	r15, r15
    2dca:	87 01       	movw	r16, r14
    2dcc:	2e c5       	rjmp	.+2652   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2dce:	80 91 60 06 	lds	r24, 0x0660
    2dd2:	89 23       	and	r24, r25
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <signalIoctl+0x6f2>
    2dd6:	26 c5       	rjmp	.+2636   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    2dd8:	e0 e6       	ldi	r30, 0x60	; 96
    2dda:	f6 e0       	ldi	r31, 0x06	; 6
    2ddc:	95 83       	std	Z+5, r25	; 0x05
    2dde:	ee 24       	eor	r14, r14
    2de0:	ff 24       	eor	r15, r15
    2de2:	87 01       	movw	r16, r14
    2de4:	22 c5       	rjmp	.+2628   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2de6:	80 91 80 06 	lds	r24, 0x0680
    2dea:	89 23       	and	r24, r25
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <signalIoctl+0x70a>
    2dee:	1a c5       	rjmp	.+2612   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    2df0:	e0 e8       	ldi	r30, 0x80	; 128
    2df2:	f6 e0       	ldi	r31, 0x06	; 6
    2df4:	95 83       	std	Z+5, r25	; 0x05
    2df6:	ee 24       	eor	r14, r14
    2df8:	ff 24       	eor	r15, r15
    2dfa:	87 01       	movw	r16, r14
    2dfc:	16 c5       	rjmp	.+2604   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2dfe:	80 91 a0 06 	lds	r24, 0x06A0
    2e02:	89 23       	and	r24, r25
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <signalIoctl+0x722>
    2e06:	0e c5       	rjmp	.+2588   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    2e08:	e0 ea       	ldi	r30, 0xA0	; 160
    2e0a:	f6 e0       	ldi	r31, 0x06	; 6
    2e0c:	95 83       	std	Z+5, r25	; 0x05
    2e0e:	ee 24       	eor	r14, r14
    2e10:	ff 24       	eor	r15, r15
    2e12:	87 01       	movw	r16, r14
    2e14:	0a c5       	rjmp	.+2580   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2e16:	80 91 e0 06 	lds	r24, 0x06E0
    2e1a:	89 23       	and	r24, r25
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <signalIoctl+0x73a>
    2e1e:	02 c5       	rjmp	.+2564   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    2e20:	e0 ee       	ldi	r30, 0xE0	; 224
    2e22:	f6 e0       	ldi	r31, 0x06	; 6
    2e24:	95 83       	std	Z+5, r25	; 0x05
    2e26:	ee 24       	eor	r14, r14
    2e28:	ff 24       	eor	r15, r15
    2e2a:	87 01       	movw	r16, r14
    2e2c:	fe c4       	rjmp	.+2556   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2e2e:	80 91 00 07 	lds	r24, 0x0700
    2e32:	89 23       	and	r24, r25
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <signalIoctl+0x752>
    2e36:	f6 c4       	rjmp	.+2540   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    2e38:	e0 e0       	ldi	r30, 0x00	; 0
    2e3a:	f7 e0       	ldi	r31, 0x07	; 7
    2e3c:	95 83       	std	Z+5, r25	; 0x05
    2e3e:	ee 24       	eor	r14, r14
    2e40:	ff 24       	eor	r15, r15
    2e42:	87 01       	movw	r16, r14
    2e44:	f2 c4       	rjmp	.+2532   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2e46:	80 91 20 07 	lds	r24, 0x0720
    2e4a:	89 23       	and	r24, r25
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <signalIoctl+0x76a>
    2e4e:	ea c4       	rjmp	.+2516   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    2e50:	e0 e2       	ldi	r30, 0x20	; 32
    2e52:	f7 e0       	ldi	r31, 0x07	; 7
    2e54:	95 83       	std	Z+5, r25	; 0x05
    2e56:	ee 24       	eor	r14, r14
    2e58:	ff 24       	eor	r15, r15
    2e5a:	87 01       	movw	r16, r14
    2e5c:	e6 c4       	rjmp	.+2508   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2e5e:	80 91 c0 07 	lds	r24, 0x07C0
    2e62:	89 23       	and	r24, r25
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <signalIoctl+0x782>
    2e66:	de c4       	rjmp	.+2492   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    2e68:	e0 ec       	ldi	r30, 0xC0	; 192
    2e6a:	f7 e0       	ldi	r31, 0x07	; 7
    2e6c:	95 83       	std	Z+5, r25	; 0x05
    2e6e:	ee 24       	eor	r14, r14
    2e70:	ff 24       	eor	r15, r15
    2e72:	87 01       	movw	r16, r14
    2e74:	da c4       	rjmp	.+2484   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2e76:	80 91 e0 07 	lds	r24, 0x07E0
    2e7a:	89 23       	and	r24, r25
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <signalIoctl+0x79a>
    2e7e:	d2 c4       	rjmp	.+2468   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    2e80:	e0 ee       	ldi	r30, 0xE0	; 224
    2e82:	f7 e0       	ldi	r31, 0x07	; 7
    2e84:	95 83       	std	Z+5, r25	; 0x05
    2e86:	ee 24       	eor	r14, r14
    2e88:	ff 24       	eor	r15, r15
    2e8a:	87 01       	movw	r16, r14
    2e8c:	ce c4       	rjmp	.+2460   	; 0x382a <signalIoctl+0x1144>

      break;/*End case GREEN_LED_OFF:*/

      case GREEN_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    2e8e:	90 91 b3 22 	lds	r25, 0x22B3
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2e92:	80 91 b0 22 	lds	r24, 0x22B0
    2e96:	85 30       	cpi	r24, 0x05	; 5
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <signalIoctl+0x7b6>
    2e9a:	61 c0       	rjmp	.+194    	; 0x2f5e <signalIoctl+0x878>
    2e9c:	86 30       	cpi	r24, 0x06	; 6
    2e9e:	80 f4       	brcc	.+32     	; 0x2ec0 <signalIoctl+0x7da>
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	c9 f1       	breq	.+114    	; 0x2f16 <signalIoctl+0x830>
    2ea4:	83 30       	cpi	r24, 0x03	; 3
    2ea6:	30 f4       	brcc	.+12     	; 0x2eb4 <signalIoctl+0x7ce>
    2ea8:	88 23       	and	r24, r24
    2eaa:	e9 f0       	breq	.+58     	; 0x2ee6 <signalIoctl+0x800>
    2eac:	81 30       	cpi	r24, 0x01	; 1
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <signalIoctl+0x7cc>
    2eb0:	b9 c4       	rjmp	.+2418   	; 0x3824 <signalIoctl+0x113e>
    2eb2:	25 c0       	rjmp	.+74     	; 0x2efe <signalIoctl+0x818>
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	d9 f1       	breq	.+118    	; 0x2f2e <signalIoctl+0x848>
    2eb8:	84 30       	cpi	r24, 0x04	; 4
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <signalIoctl+0x7d8>
    2ebc:	b3 c4       	rjmp	.+2406   	; 0x3824 <signalIoctl+0x113e>
    2ebe:	43 c0       	rjmp	.+134    	; 0x2f46 <signalIoctl+0x860>
    2ec0:	88 30       	cpi	r24, 0x08	; 8
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <signalIoctl+0x7e0>
    2ec4:	70 c0       	rjmp	.+224    	; 0x2fa6 <signalIoctl+0x8c0>
    2ec6:	89 30       	cpi	r24, 0x09	; 9
    2ec8:	38 f4       	brcc	.+14     	; 0x2ed8 <signalIoctl+0x7f2>
    2eca:	86 30       	cpi	r24, 0x06	; 6
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <signalIoctl+0x7ea>
    2ece:	53 c0       	rjmp	.+166    	; 0x2f76 <signalIoctl+0x890>
    2ed0:	87 30       	cpi	r24, 0x07	; 7
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <signalIoctl+0x7f0>
    2ed4:	a7 c4       	rjmp	.+2382   	; 0x3824 <signalIoctl+0x113e>
    2ed6:	5b c0       	rjmp	.+182    	; 0x2f8e <signalIoctl+0x8a8>
    2ed8:	89 30       	cpi	r24, 0x09	; 9
    2eda:	09 f4       	brne	.+2      	; 0x2ede <signalIoctl+0x7f8>
    2edc:	70 c0       	rjmp	.+224    	; 0x2fbe <signalIoctl+0x8d8>
    2ede:	8a 30       	cpi	r24, 0x0A	; 10
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <signalIoctl+0x7fe>
    2ee2:	a0 c4       	rjmp	.+2368   	; 0x3824 <signalIoctl+0x113e>
    2ee4:	78 c0       	rjmp	.+240    	; 0x2fd6 <signalIoctl+0x8f0>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    2ee6:	80 91 00 06 	lds	r24, 0x0600
    2eea:	89 23       	and	r24, r25
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <signalIoctl+0x80a>
    2eee:	9a c4       	rjmp	.+2356   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    2ef0:	e0 e0       	ldi	r30, 0x00	; 0
    2ef2:	f6 e0       	ldi	r31, 0x06	; 6
    2ef4:	97 83       	std	Z+7, r25	; 0x07
    2ef6:	ee 24       	eor	r14, r14
    2ef8:	ff 24       	eor	r15, r15
    2efa:	87 01       	movw	r16, r14
    2efc:	96 c4       	rjmp	.+2348   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    2efe:	80 91 20 06 	lds	r24, 0x0620
    2f02:	89 23       	and	r24, r25
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <signalIoctl+0x822>
    2f06:	8e c4       	rjmp	.+2332   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    2f08:	e0 e2       	ldi	r30, 0x20	; 32
    2f0a:	f6 e0       	ldi	r31, 0x06	; 6
    2f0c:	97 83       	std	Z+7, r25	; 0x07
    2f0e:	ee 24       	eor	r14, r14
    2f10:	ff 24       	eor	r15, r15
    2f12:	87 01       	movw	r16, r14
    2f14:	8a c4       	rjmp	.+2324   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    2f16:	80 91 40 06 	lds	r24, 0x0640
    2f1a:	89 23       	and	r24, r25
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <signalIoctl+0x83a>
    2f1e:	82 c4       	rjmp	.+2308   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    2f20:	e0 e4       	ldi	r30, 0x40	; 64
    2f22:	f6 e0       	ldi	r31, 0x06	; 6
    2f24:	97 83       	std	Z+7, r25	; 0x07
    2f26:	ee 24       	eor	r14, r14
    2f28:	ff 24       	eor	r15, r15
    2f2a:	87 01       	movw	r16, r14
    2f2c:	7e c4       	rjmp	.+2300   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    2f2e:	80 91 60 06 	lds	r24, 0x0660
    2f32:	89 23       	and	r24, r25
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <signalIoctl+0x852>
    2f36:	76 c4       	rjmp	.+2284   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    2f38:	e0 e6       	ldi	r30, 0x60	; 96
    2f3a:	f6 e0       	ldi	r31, 0x06	; 6
    2f3c:	97 83       	std	Z+7, r25	; 0x07
    2f3e:	ee 24       	eor	r14, r14
    2f40:	ff 24       	eor	r15, r15
    2f42:	87 01       	movw	r16, r14
    2f44:	72 c4       	rjmp	.+2276   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    2f46:	80 91 80 06 	lds	r24, 0x0680
    2f4a:	89 23       	and	r24, r25
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <signalIoctl+0x86a>
    2f4e:	6a c4       	rjmp	.+2260   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    2f50:	e0 e8       	ldi	r30, 0x80	; 128
    2f52:	f6 e0       	ldi	r31, 0x06	; 6
    2f54:	97 83       	std	Z+7, r25	; 0x07
    2f56:	ee 24       	eor	r14, r14
    2f58:	ff 24       	eor	r15, r15
    2f5a:	87 01       	movw	r16, r14
    2f5c:	66 c4       	rjmp	.+2252   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    2f5e:	80 91 a0 06 	lds	r24, 0x06A0
    2f62:	89 23       	and	r24, r25
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <signalIoctl+0x882>
    2f66:	5e c4       	rjmp	.+2236   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    2f68:	e0 ea       	ldi	r30, 0xA0	; 160
    2f6a:	f6 e0       	ldi	r31, 0x06	; 6
    2f6c:	97 83       	std	Z+7, r25	; 0x07
    2f6e:	ee 24       	eor	r14, r14
    2f70:	ff 24       	eor	r15, r15
    2f72:	87 01       	movw	r16, r14
    2f74:	5a c4       	rjmp	.+2228   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    2f76:	80 91 e0 06 	lds	r24, 0x06E0
    2f7a:	89 23       	and	r24, r25
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <signalIoctl+0x89a>
    2f7e:	52 c4       	rjmp	.+2212   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    2f80:	e0 ee       	ldi	r30, 0xE0	; 224
    2f82:	f6 e0       	ldi	r31, 0x06	; 6
    2f84:	97 83       	std	Z+7, r25	; 0x07
    2f86:	ee 24       	eor	r14, r14
    2f88:	ff 24       	eor	r15, r15
    2f8a:	87 01       	movw	r16, r14
    2f8c:	4e c4       	rjmp	.+2204   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    2f8e:	80 91 00 07 	lds	r24, 0x0700
    2f92:	89 23       	and	r24, r25
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <signalIoctl+0x8b2>
    2f96:	46 c4       	rjmp	.+2188   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    2f98:	e0 e0       	ldi	r30, 0x00	; 0
    2f9a:	f7 e0       	ldi	r31, 0x07	; 7
    2f9c:	97 83       	std	Z+7, r25	; 0x07
    2f9e:	ee 24       	eor	r14, r14
    2fa0:	ff 24       	eor	r15, r15
    2fa2:	87 01       	movw	r16, r14
    2fa4:	42 c4       	rjmp	.+2180   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    2fa6:	80 91 20 07 	lds	r24, 0x0720
    2faa:	89 23       	and	r24, r25
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <signalIoctl+0x8ca>
    2fae:	3a c4       	rjmp	.+2164   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    2fb0:	e0 e2       	ldi	r30, 0x20	; 32
    2fb2:	f7 e0       	ldi	r31, 0x07	; 7
    2fb4:	97 83       	std	Z+7, r25	; 0x07
    2fb6:	ee 24       	eor	r14, r14
    2fb8:	ff 24       	eor	r15, r15
    2fba:	87 01       	movw	r16, r14
    2fbc:	36 c4       	rjmp	.+2156   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    2fbe:	80 91 c0 07 	lds	r24, 0x07C0
    2fc2:	89 23       	and	r24, r25
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <signalIoctl+0x8e2>
    2fc6:	2e c4       	rjmp	.+2140   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    2fc8:	e0 ec       	ldi	r30, 0xC0	; 192
    2fca:	f7 e0       	ldi	r31, 0x07	; 7
    2fcc:	97 83       	std	Z+7, r25	; 0x07
    2fce:	ee 24       	eor	r14, r14
    2fd0:	ff 24       	eor	r15, r15
    2fd2:	87 01       	movw	r16, r14
    2fd4:	2a c4       	rjmp	.+2132   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    2fd6:	80 91 e0 07 	lds	r24, 0x07E0
    2fda:	89 23       	and	r24, r25
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <signalIoctl+0x8fa>
    2fde:	22 c4       	rjmp	.+2116   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    2fe0:	e0 ee       	ldi	r30, 0xE0	; 224
    2fe2:	f7 e0       	ldi	r31, 0x07	; 7
    2fe4:	97 83       	std	Z+7, r25	; 0x07
    2fe6:	ee 24       	eor	r14, r14
    2fe8:	ff 24       	eor	r15, r15
    2fea:	87 01       	movw	r16, r14
    2fec:	1e c4       	rjmp	.+2108   	; 0x382a <signalIoctl+0x1144>

      break;/*End case GREEN_LED_TOGGLE:*/

      case YELLOW_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    2fee:	90 91 b2 22 	lds	r25, 0x22B2
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    2ff2:	80 91 b0 22 	lds	r24, 0x22B0
    2ff6:	85 30       	cpi	r24, 0x05	; 5
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <signalIoctl+0x916>
    2ffa:	61 c0       	rjmp	.+194    	; 0x30be <signalIoctl+0x9d8>
    2ffc:	86 30       	cpi	r24, 0x06	; 6
    2ffe:	80 f4       	brcc	.+32     	; 0x3020 <signalIoctl+0x93a>
    3000:	82 30       	cpi	r24, 0x02	; 2
    3002:	c9 f1       	breq	.+114    	; 0x3076 <signalIoctl+0x990>
    3004:	83 30       	cpi	r24, 0x03	; 3
    3006:	30 f4       	brcc	.+12     	; 0x3014 <signalIoctl+0x92e>
    3008:	88 23       	and	r24, r24
    300a:	e9 f0       	breq	.+58     	; 0x3046 <signalIoctl+0x960>
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	09 f0       	breq	.+2      	; 0x3012 <signalIoctl+0x92c>
    3010:	09 c4       	rjmp	.+2066   	; 0x3824 <signalIoctl+0x113e>
    3012:	25 c0       	rjmp	.+74     	; 0x305e <signalIoctl+0x978>
    3014:	83 30       	cpi	r24, 0x03	; 3
    3016:	d9 f1       	breq	.+118    	; 0x308e <signalIoctl+0x9a8>
    3018:	84 30       	cpi	r24, 0x04	; 4
    301a:	09 f0       	breq	.+2      	; 0x301e <signalIoctl+0x938>
    301c:	03 c4       	rjmp	.+2054   	; 0x3824 <signalIoctl+0x113e>
    301e:	43 c0       	rjmp	.+134    	; 0x30a6 <signalIoctl+0x9c0>
    3020:	88 30       	cpi	r24, 0x08	; 8
    3022:	09 f4       	brne	.+2      	; 0x3026 <signalIoctl+0x940>
    3024:	70 c0       	rjmp	.+224    	; 0x3106 <signalIoctl+0xa20>
    3026:	89 30       	cpi	r24, 0x09	; 9
    3028:	38 f4       	brcc	.+14     	; 0x3038 <signalIoctl+0x952>
    302a:	86 30       	cpi	r24, 0x06	; 6
    302c:	09 f4       	brne	.+2      	; 0x3030 <signalIoctl+0x94a>
    302e:	53 c0       	rjmp	.+166    	; 0x30d6 <signalIoctl+0x9f0>
    3030:	87 30       	cpi	r24, 0x07	; 7
    3032:	09 f0       	breq	.+2      	; 0x3036 <signalIoctl+0x950>
    3034:	f7 c3       	rjmp	.+2030   	; 0x3824 <signalIoctl+0x113e>
    3036:	5b c0       	rjmp	.+182    	; 0x30ee <signalIoctl+0xa08>
    3038:	89 30       	cpi	r24, 0x09	; 9
    303a:	09 f4       	brne	.+2      	; 0x303e <signalIoctl+0x958>
    303c:	70 c0       	rjmp	.+224    	; 0x311e <signalIoctl+0xa38>
    303e:	8a 30       	cpi	r24, 0x0A	; 10
    3040:	09 f0       	breq	.+2      	; 0x3044 <signalIoctl+0x95e>
    3042:	f0 c3       	rjmp	.+2016   	; 0x3824 <signalIoctl+0x113e>
    3044:	78 c0       	rjmp	.+240    	; 0x3136 <signalIoctl+0xa50>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3046:	80 91 00 06 	lds	r24, 0x0600
    304a:	89 23       	and	r24, r25
    304c:	09 f4       	brne	.+2      	; 0x3050 <signalIoctl+0x96a>
    304e:	ea c3       	rjmp	.+2004   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    3050:	e0 e0       	ldi	r30, 0x00	; 0
    3052:	f6 e0       	ldi	r31, 0x06	; 6
    3054:	96 83       	std	Z+6, r25	; 0x06
    3056:	ee 24       	eor	r14, r14
    3058:	ff 24       	eor	r15, r15
    305a:	87 01       	movw	r16, r14
    305c:	e6 c3       	rjmp	.+1996   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    305e:	80 91 20 06 	lds	r24, 0x0620
    3062:	89 23       	and	r24, r25
    3064:	09 f4       	brne	.+2      	; 0x3068 <signalIoctl+0x982>
    3066:	de c3       	rjmp	.+1980   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    3068:	e0 e2       	ldi	r30, 0x20	; 32
    306a:	f6 e0       	ldi	r31, 0x06	; 6
    306c:	96 83       	std	Z+6, r25	; 0x06
    306e:	ee 24       	eor	r14, r14
    3070:	ff 24       	eor	r15, r15
    3072:	87 01       	movw	r16, r14
    3074:	da c3       	rjmp	.+1972   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3076:	80 91 40 06 	lds	r24, 0x0640
    307a:	89 23       	and	r24, r25
    307c:	09 f4       	brne	.+2      	; 0x3080 <signalIoctl+0x99a>
    307e:	d2 c3       	rjmp	.+1956   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    3080:	e0 e4       	ldi	r30, 0x40	; 64
    3082:	f6 e0       	ldi	r31, 0x06	; 6
    3084:	96 83       	std	Z+6, r25	; 0x06
    3086:	ee 24       	eor	r14, r14
    3088:	ff 24       	eor	r15, r15
    308a:	87 01       	movw	r16, r14
    308c:	ce c3       	rjmp	.+1948   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    308e:	80 91 60 06 	lds	r24, 0x0660
    3092:	89 23       	and	r24, r25
    3094:	09 f4       	brne	.+2      	; 0x3098 <signalIoctl+0x9b2>
    3096:	c6 c3       	rjmp	.+1932   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    3098:	e0 e6       	ldi	r30, 0x60	; 96
    309a:	f6 e0       	ldi	r31, 0x06	; 6
    309c:	96 83       	std	Z+6, r25	; 0x06
    309e:	ee 24       	eor	r14, r14
    30a0:	ff 24       	eor	r15, r15
    30a2:	87 01       	movw	r16, r14
    30a4:	c2 c3       	rjmp	.+1924   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    30a6:	80 91 80 06 	lds	r24, 0x0680
    30aa:	89 23       	and	r24, r25
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <signalIoctl+0x9ca>
    30ae:	ba c3       	rjmp	.+1908   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    30b0:	e0 e8       	ldi	r30, 0x80	; 128
    30b2:	f6 e0       	ldi	r31, 0x06	; 6
    30b4:	96 83       	std	Z+6, r25	; 0x06
    30b6:	ee 24       	eor	r14, r14
    30b8:	ff 24       	eor	r15, r15
    30ba:	87 01       	movw	r16, r14
    30bc:	b6 c3       	rjmp	.+1900   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    30be:	80 91 a0 06 	lds	r24, 0x06A0
    30c2:	89 23       	and	r24, r25
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <signalIoctl+0x9e2>
    30c6:	ae c3       	rjmp	.+1884   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    30c8:	e0 ea       	ldi	r30, 0xA0	; 160
    30ca:	f6 e0       	ldi	r31, 0x06	; 6
    30cc:	96 83       	std	Z+6, r25	; 0x06
    30ce:	ee 24       	eor	r14, r14
    30d0:	ff 24       	eor	r15, r15
    30d2:	87 01       	movw	r16, r14
    30d4:	aa c3       	rjmp	.+1876   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    30d6:	80 91 e0 06 	lds	r24, 0x06E0
    30da:	89 23       	and	r24, r25
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <signalIoctl+0x9fa>
    30de:	a2 c3       	rjmp	.+1860   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    30e0:	e0 ee       	ldi	r30, 0xE0	; 224
    30e2:	f6 e0       	ldi	r31, 0x06	; 6
    30e4:	96 83       	std	Z+6, r25	; 0x06
    30e6:	ee 24       	eor	r14, r14
    30e8:	ff 24       	eor	r15, r15
    30ea:	87 01       	movw	r16, r14
    30ec:	9e c3       	rjmp	.+1852   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    30ee:	80 91 00 07 	lds	r24, 0x0700
    30f2:	89 23       	and	r24, r25
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <signalIoctl+0xa12>
    30f6:	96 c3       	rjmp	.+1836   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    30f8:	e0 e0       	ldi	r30, 0x00	; 0
    30fa:	f7 e0       	ldi	r31, 0x07	; 7
    30fc:	96 83       	std	Z+6, r25	; 0x06
    30fe:	ee 24       	eor	r14, r14
    3100:	ff 24       	eor	r15, r15
    3102:	87 01       	movw	r16, r14
    3104:	92 c3       	rjmp	.+1828   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3106:	80 91 20 07 	lds	r24, 0x0720
    310a:	89 23       	and	r24, r25
    310c:	09 f4       	brne	.+2      	; 0x3110 <signalIoctl+0xa2a>
    310e:	8a c3       	rjmp	.+1812   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    3110:	e0 e2       	ldi	r30, 0x20	; 32
    3112:	f7 e0       	ldi	r31, 0x07	; 7
    3114:	96 83       	std	Z+6, r25	; 0x06
    3116:	ee 24       	eor	r14, r14
    3118:	ff 24       	eor	r15, r15
    311a:	87 01       	movw	r16, r14
    311c:	86 c3       	rjmp	.+1804   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    311e:	80 91 c0 07 	lds	r24, 0x07C0
    3122:	89 23       	and	r24, r25
    3124:	09 f4       	brne	.+2      	; 0x3128 <signalIoctl+0xa42>
    3126:	7e c3       	rjmp	.+1788   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    3128:	e0 ec       	ldi	r30, 0xC0	; 192
    312a:	f7 e0       	ldi	r31, 0x07	; 7
    312c:	96 83       	std	Z+6, r25	; 0x06
    312e:	ee 24       	eor	r14, r14
    3130:	ff 24       	eor	r15, r15
    3132:	87 01       	movw	r16, r14
    3134:	7a c3       	rjmp	.+1780   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3136:	80 91 e0 07 	lds	r24, 0x07E0
    313a:	89 23       	and	r24, r25
    313c:	09 f4       	brne	.+2      	; 0x3140 <signalIoctl+0xa5a>
    313e:	72 c3       	rjmp	.+1764   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    3140:	e0 ee       	ldi	r30, 0xE0	; 224
    3142:	f7 e0       	ldi	r31, 0x07	; 7
    3144:	96 83       	std	Z+6, r25	; 0x06
    3146:	ee 24       	eor	r14, r14
    3148:	ff 24       	eor	r15, r15
    314a:	87 01       	movw	r16, r14
    314c:	6e c3       	rjmp	.+1756   	; 0x382a <signalIoctl+0x1144>

      break;/*End case YELLOW_LED_ON:*/

      case YELLOW_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    314e:	90 91 b2 22 	lds	r25, 0x22B2
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    3152:	80 91 b0 22 	lds	r24, 0x22B0
    3156:	85 30       	cpi	r24, 0x05	; 5
    3158:	09 f4       	brne	.+2      	; 0x315c <signalIoctl+0xa76>
    315a:	61 c0       	rjmp	.+194    	; 0x321e <signalIoctl+0xb38>
    315c:	86 30       	cpi	r24, 0x06	; 6
    315e:	80 f4       	brcc	.+32     	; 0x3180 <signalIoctl+0xa9a>
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	c9 f1       	breq	.+114    	; 0x31d6 <signalIoctl+0xaf0>
    3164:	83 30       	cpi	r24, 0x03	; 3
    3166:	30 f4       	brcc	.+12     	; 0x3174 <signalIoctl+0xa8e>
    3168:	88 23       	and	r24, r24
    316a:	e9 f0       	breq	.+58     	; 0x31a6 <signalIoctl+0xac0>
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	09 f0       	breq	.+2      	; 0x3172 <signalIoctl+0xa8c>
    3170:	59 c3       	rjmp	.+1714   	; 0x3824 <signalIoctl+0x113e>
    3172:	25 c0       	rjmp	.+74     	; 0x31be <signalIoctl+0xad8>
    3174:	83 30       	cpi	r24, 0x03	; 3
    3176:	d9 f1       	breq	.+118    	; 0x31ee <signalIoctl+0xb08>
    3178:	84 30       	cpi	r24, 0x04	; 4
    317a:	09 f0       	breq	.+2      	; 0x317e <signalIoctl+0xa98>
    317c:	53 c3       	rjmp	.+1702   	; 0x3824 <signalIoctl+0x113e>
    317e:	43 c0       	rjmp	.+134    	; 0x3206 <signalIoctl+0xb20>
    3180:	88 30       	cpi	r24, 0x08	; 8
    3182:	09 f4       	brne	.+2      	; 0x3186 <signalIoctl+0xaa0>
    3184:	70 c0       	rjmp	.+224    	; 0x3266 <signalIoctl+0xb80>
    3186:	89 30       	cpi	r24, 0x09	; 9
    3188:	38 f4       	brcc	.+14     	; 0x3198 <signalIoctl+0xab2>
    318a:	86 30       	cpi	r24, 0x06	; 6
    318c:	09 f4       	brne	.+2      	; 0x3190 <signalIoctl+0xaaa>
    318e:	53 c0       	rjmp	.+166    	; 0x3236 <signalIoctl+0xb50>
    3190:	87 30       	cpi	r24, 0x07	; 7
    3192:	09 f0       	breq	.+2      	; 0x3196 <signalIoctl+0xab0>
    3194:	47 c3       	rjmp	.+1678   	; 0x3824 <signalIoctl+0x113e>
    3196:	5b c0       	rjmp	.+182    	; 0x324e <signalIoctl+0xb68>
    3198:	89 30       	cpi	r24, 0x09	; 9
    319a:	09 f4       	brne	.+2      	; 0x319e <signalIoctl+0xab8>
    319c:	70 c0       	rjmp	.+224    	; 0x327e <signalIoctl+0xb98>
    319e:	8a 30       	cpi	r24, 0x0A	; 10
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <signalIoctl+0xabe>
    31a2:	40 c3       	rjmp	.+1664   	; 0x3824 <signalIoctl+0x113e>
    31a4:	78 c0       	rjmp	.+240    	; 0x3296 <signalIoctl+0xbb0>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    31a6:	80 91 00 06 	lds	r24, 0x0600
    31aa:	89 23       	and	r24, r25
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <signalIoctl+0xaca>
    31ae:	3a c3       	rjmp	.+1652   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    31b0:	e0 e0       	ldi	r30, 0x00	; 0
    31b2:	f6 e0       	ldi	r31, 0x06	; 6
    31b4:	95 83       	std	Z+5, r25	; 0x05
    31b6:	ee 24       	eor	r14, r14
    31b8:	ff 24       	eor	r15, r15
    31ba:	87 01       	movw	r16, r14
    31bc:	36 c3       	rjmp	.+1644   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    31be:	80 91 20 06 	lds	r24, 0x0620
    31c2:	89 23       	and	r24, r25
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <signalIoctl+0xae2>
    31c6:	2e c3       	rjmp	.+1628   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    31c8:	e0 e2       	ldi	r30, 0x20	; 32
    31ca:	f6 e0       	ldi	r31, 0x06	; 6
    31cc:	95 83       	std	Z+5, r25	; 0x05
    31ce:	ee 24       	eor	r14, r14
    31d0:	ff 24       	eor	r15, r15
    31d2:	87 01       	movw	r16, r14
    31d4:	2a c3       	rjmp	.+1620   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    31d6:	80 91 40 06 	lds	r24, 0x0640
    31da:	89 23       	and	r24, r25
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <signalIoctl+0xafa>
    31de:	22 c3       	rjmp	.+1604   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    31e0:	e0 e4       	ldi	r30, 0x40	; 64
    31e2:	f6 e0       	ldi	r31, 0x06	; 6
    31e4:	95 83       	std	Z+5, r25	; 0x05
    31e6:	ee 24       	eor	r14, r14
    31e8:	ff 24       	eor	r15, r15
    31ea:	87 01       	movw	r16, r14
    31ec:	1e c3       	rjmp	.+1596   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    31ee:	80 91 60 06 	lds	r24, 0x0660
    31f2:	89 23       	and	r24, r25
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <signalIoctl+0xb12>
    31f6:	16 c3       	rjmp	.+1580   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    31f8:	e0 e6       	ldi	r30, 0x60	; 96
    31fa:	f6 e0       	ldi	r31, 0x06	; 6
    31fc:	95 83       	std	Z+5, r25	; 0x05
    31fe:	ee 24       	eor	r14, r14
    3200:	ff 24       	eor	r15, r15
    3202:	87 01       	movw	r16, r14
    3204:	12 c3       	rjmp	.+1572   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3206:	80 91 80 06 	lds	r24, 0x0680
    320a:	89 23       	and	r24, r25
    320c:	09 f4       	brne	.+2      	; 0x3210 <signalIoctl+0xb2a>
    320e:	0a c3       	rjmp	.+1556   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    3210:	e0 e8       	ldi	r30, 0x80	; 128
    3212:	f6 e0       	ldi	r31, 0x06	; 6
    3214:	95 83       	std	Z+5, r25	; 0x05
    3216:	ee 24       	eor	r14, r14
    3218:	ff 24       	eor	r15, r15
    321a:	87 01       	movw	r16, r14
    321c:	06 c3       	rjmp	.+1548   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    321e:	80 91 a0 06 	lds	r24, 0x06A0
    3222:	89 23       	and	r24, r25
    3224:	09 f4       	brne	.+2      	; 0x3228 <signalIoctl+0xb42>
    3226:	fe c2       	rjmp	.+1532   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    3228:	e0 ea       	ldi	r30, 0xA0	; 160
    322a:	f6 e0       	ldi	r31, 0x06	; 6
    322c:	95 83       	std	Z+5, r25	; 0x05
    322e:	ee 24       	eor	r14, r14
    3230:	ff 24       	eor	r15, r15
    3232:	87 01       	movw	r16, r14
    3234:	fa c2       	rjmp	.+1524   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3236:	80 91 e0 06 	lds	r24, 0x06E0
    323a:	89 23       	and	r24, r25
    323c:	09 f4       	brne	.+2      	; 0x3240 <signalIoctl+0xb5a>
    323e:	f2 c2       	rjmp	.+1508   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    3240:	e0 ee       	ldi	r30, 0xE0	; 224
    3242:	f6 e0       	ldi	r31, 0x06	; 6
    3244:	95 83       	std	Z+5, r25	; 0x05
    3246:	ee 24       	eor	r14, r14
    3248:	ff 24       	eor	r15, r15
    324a:	87 01       	movw	r16, r14
    324c:	ee c2       	rjmp	.+1500   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    324e:	80 91 00 07 	lds	r24, 0x0700
    3252:	89 23       	and	r24, r25
    3254:	09 f4       	brne	.+2      	; 0x3258 <signalIoctl+0xb72>
    3256:	e6 c2       	rjmp	.+1484   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    3258:	e0 e0       	ldi	r30, 0x00	; 0
    325a:	f7 e0       	ldi	r31, 0x07	; 7
    325c:	95 83       	std	Z+5, r25	; 0x05
    325e:	ee 24       	eor	r14, r14
    3260:	ff 24       	eor	r15, r15
    3262:	87 01       	movw	r16, r14
    3264:	e2 c2       	rjmp	.+1476   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3266:	80 91 20 07 	lds	r24, 0x0720
    326a:	89 23       	and	r24, r25
    326c:	09 f4       	brne	.+2      	; 0x3270 <signalIoctl+0xb8a>
    326e:	da c2       	rjmp	.+1460   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    3270:	e0 e2       	ldi	r30, 0x20	; 32
    3272:	f7 e0       	ldi	r31, 0x07	; 7
    3274:	95 83       	std	Z+5, r25	; 0x05
    3276:	ee 24       	eor	r14, r14
    3278:	ff 24       	eor	r15, r15
    327a:	87 01       	movw	r16, r14
    327c:	d6 c2       	rjmp	.+1452   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    327e:	80 91 c0 07 	lds	r24, 0x07C0
    3282:	89 23       	and	r24, r25
    3284:	09 f4       	brne	.+2      	; 0x3288 <signalIoctl+0xba2>
    3286:	ce c2       	rjmp	.+1436   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    3288:	e0 ec       	ldi	r30, 0xC0	; 192
    328a:	f7 e0       	ldi	r31, 0x07	; 7
    328c:	95 83       	std	Z+5, r25	; 0x05
    328e:	ee 24       	eor	r14, r14
    3290:	ff 24       	eor	r15, r15
    3292:	87 01       	movw	r16, r14
    3294:	ca c2       	rjmp	.+1428   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3296:	80 91 e0 07 	lds	r24, 0x07E0
    329a:	89 23       	and	r24, r25
    329c:	09 f4       	brne	.+2      	; 0x32a0 <signalIoctl+0xbba>
    329e:	c2 c2       	rjmp	.+1412   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    32a0:	e0 ee       	ldi	r30, 0xE0	; 224
    32a2:	f7 e0       	ldi	r31, 0x07	; 7
    32a4:	95 83       	std	Z+5, r25	; 0x05
    32a6:	ee 24       	eor	r14, r14
    32a8:	ff 24       	eor	r15, r15
    32aa:	87 01       	movw	r16, r14
    32ac:	be c2       	rjmp	.+1404   	; 0x382a <signalIoctl+0x1144>

      break;/*End case YELLOW_LED_OFF:*/

      case YELLOW_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    32ae:	90 91 b2 22 	lds	r25, 0x22B2
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    32b2:	80 91 b0 22 	lds	r24, 0x22B0
    32b6:	85 30       	cpi	r24, 0x05	; 5
    32b8:	09 f4       	brne	.+2      	; 0x32bc <signalIoctl+0xbd6>
    32ba:	61 c0       	rjmp	.+194    	; 0x337e <signalIoctl+0xc98>
    32bc:	86 30       	cpi	r24, 0x06	; 6
    32be:	80 f4       	brcc	.+32     	; 0x32e0 <signalIoctl+0xbfa>
    32c0:	82 30       	cpi	r24, 0x02	; 2
    32c2:	c9 f1       	breq	.+114    	; 0x3336 <signalIoctl+0xc50>
    32c4:	83 30       	cpi	r24, 0x03	; 3
    32c6:	30 f4       	brcc	.+12     	; 0x32d4 <signalIoctl+0xbee>
    32c8:	88 23       	and	r24, r24
    32ca:	e9 f0       	breq	.+58     	; 0x3306 <signalIoctl+0xc20>
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <signalIoctl+0xbec>
    32d0:	a9 c2       	rjmp	.+1362   	; 0x3824 <signalIoctl+0x113e>
    32d2:	25 c0       	rjmp	.+74     	; 0x331e <signalIoctl+0xc38>
    32d4:	83 30       	cpi	r24, 0x03	; 3
    32d6:	d9 f1       	breq	.+118    	; 0x334e <signalIoctl+0xc68>
    32d8:	84 30       	cpi	r24, 0x04	; 4
    32da:	09 f0       	breq	.+2      	; 0x32de <signalIoctl+0xbf8>
    32dc:	a3 c2       	rjmp	.+1350   	; 0x3824 <signalIoctl+0x113e>
    32de:	43 c0       	rjmp	.+134    	; 0x3366 <signalIoctl+0xc80>
    32e0:	88 30       	cpi	r24, 0x08	; 8
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <signalIoctl+0xc00>
    32e4:	70 c0       	rjmp	.+224    	; 0x33c6 <signalIoctl+0xce0>
    32e6:	89 30       	cpi	r24, 0x09	; 9
    32e8:	38 f4       	brcc	.+14     	; 0x32f8 <signalIoctl+0xc12>
    32ea:	86 30       	cpi	r24, 0x06	; 6
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <signalIoctl+0xc0a>
    32ee:	53 c0       	rjmp	.+166    	; 0x3396 <signalIoctl+0xcb0>
    32f0:	87 30       	cpi	r24, 0x07	; 7
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <signalIoctl+0xc10>
    32f4:	97 c2       	rjmp	.+1326   	; 0x3824 <signalIoctl+0x113e>
    32f6:	5b c0       	rjmp	.+182    	; 0x33ae <signalIoctl+0xcc8>
    32f8:	89 30       	cpi	r24, 0x09	; 9
    32fa:	09 f4       	brne	.+2      	; 0x32fe <signalIoctl+0xc18>
    32fc:	70 c0       	rjmp	.+224    	; 0x33de <signalIoctl+0xcf8>
    32fe:	8a 30       	cpi	r24, 0x0A	; 10
    3300:	09 f0       	breq	.+2      	; 0x3304 <signalIoctl+0xc1e>
    3302:	90 c2       	rjmp	.+1312   	; 0x3824 <signalIoctl+0x113e>
    3304:	78 c0       	rjmp	.+240    	; 0x33f6 <signalIoctl+0xd10>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3306:	80 91 00 06 	lds	r24, 0x0600
    330a:	89 23       	and	r24, r25
    330c:	09 f4       	brne	.+2      	; 0x3310 <signalIoctl+0xc2a>
    330e:	8a c2       	rjmp	.+1300   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    3310:	e0 e0       	ldi	r30, 0x00	; 0
    3312:	f6 e0       	ldi	r31, 0x06	; 6
    3314:	97 83       	std	Z+7, r25	; 0x07
    3316:	ee 24       	eor	r14, r14
    3318:	ff 24       	eor	r15, r15
    331a:	87 01       	movw	r16, r14
    331c:	86 c2       	rjmp	.+1292   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    331e:	80 91 20 06 	lds	r24, 0x0620
    3322:	89 23       	and	r24, r25
    3324:	09 f4       	brne	.+2      	; 0x3328 <signalIoctl+0xc42>
    3326:	7e c2       	rjmp	.+1276   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    3328:	e0 e2       	ldi	r30, 0x20	; 32
    332a:	f6 e0       	ldi	r31, 0x06	; 6
    332c:	97 83       	std	Z+7, r25	; 0x07
    332e:	ee 24       	eor	r14, r14
    3330:	ff 24       	eor	r15, r15
    3332:	87 01       	movw	r16, r14
    3334:	7a c2       	rjmp	.+1268   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3336:	80 91 40 06 	lds	r24, 0x0640
    333a:	89 23       	and	r24, r25
    333c:	09 f4       	brne	.+2      	; 0x3340 <signalIoctl+0xc5a>
    333e:	72 c2       	rjmp	.+1252   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    3340:	e0 e4       	ldi	r30, 0x40	; 64
    3342:	f6 e0       	ldi	r31, 0x06	; 6
    3344:	97 83       	std	Z+7, r25	; 0x07
    3346:	ee 24       	eor	r14, r14
    3348:	ff 24       	eor	r15, r15
    334a:	87 01       	movw	r16, r14
    334c:	6e c2       	rjmp	.+1244   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    334e:	80 91 60 06 	lds	r24, 0x0660
    3352:	89 23       	and	r24, r25
    3354:	09 f4       	brne	.+2      	; 0x3358 <signalIoctl+0xc72>
    3356:	66 c2       	rjmp	.+1228   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    3358:	e0 e6       	ldi	r30, 0x60	; 96
    335a:	f6 e0       	ldi	r31, 0x06	; 6
    335c:	97 83       	std	Z+7, r25	; 0x07
    335e:	ee 24       	eor	r14, r14
    3360:	ff 24       	eor	r15, r15
    3362:	87 01       	movw	r16, r14
    3364:	62 c2       	rjmp	.+1220   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3366:	80 91 80 06 	lds	r24, 0x0680
    336a:	89 23       	and	r24, r25
    336c:	09 f4       	brne	.+2      	; 0x3370 <signalIoctl+0xc8a>
    336e:	5a c2       	rjmp	.+1204   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    3370:	e0 e8       	ldi	r30, 0x80	; 128
    3372:	f6 e0       	ldi	r31, 0x06	; 6
    3374:	97 83       	std	Z+7, r25	; 0x07
    3376:	ee 24       	eor	r14, r14
    3378:	ff 24       	eor	r15, r15
    337a:	87 01       	movw	r16, r14
    337c:	56 c2       	rjmp	.+1196   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    337e:	80 91 a0 06 	lds	r24, 0x06A0
    3382:	89 23       	and	r24, r25
    3384:	09 f4       	brne	.+2      	; 0x3388 <signalIoctl+0xca2>
    3386:	4e c2       	rjmp	.+1180   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    3388:	e0 ea       	ldi	r30, 0xA0	; 160
    338a:	f6 e0       	ldi	r31, 0x06	; 6
    338c:	97 83       	std	Z+7, r25	; 0x07
    338e:	ee 24       	eor	r14, r14
    3390:	ff 24       	eor	r15, r15
    3392:	87 01       	movw	r16, r14
    3394:	4a c2       	rjmp	.+1172   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3396:	80 91 e0 06 	lds	r24, 0x06E0
    339a:	89 23       	and	r24, r25
    339c:	09 f4       	brne	.+2      	; 0x33a0 <signalIoctl+0xcba>
    339e:	42 c2       	rjmp	.+1156   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    33a0:	e0 ee       	ldi	r30, 0xE0	; 224
    33a2:	f6 e0       	ldi	r31, 0x06	; 6
    33a4:	97 83       	std	Z+7, r25	; 0x07
    33a6:	ee 24       	eor	r14, r14
    33a8:	ff 24       	eor	r15, r15
    33aa:	87 01       	movw	r16, r14
    33ac:	3e c2       	rjmp	.+1148   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    33ae:	80 91 00 07 	lds	r24, 0x0700
    33b2:	89 23       	and	r24, r25
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <signalIoctl+0xcd2>
    33b6:	36 c2       	rjmp	.+1132   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    33b8:	e0 e0       	ldi	r30, 0x00	; 0
    33ba:	f7 e0       	ldi	r31, 0x07	; 7
    33bc:	97 83       	std	Z+7, r25	; 0x07
    33be:	ee 24       	eor	r14, r14
    33c0:	ff 24       	eor	r15, r15
    33c2:	87 01       	movw	r16, r14
    33c4:	32 c2       	rjmp	.+1124   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    33c6:	80 91 20 07 	lds	r24, 0x0720
    33ca:	89 23       	and	r24, r25
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <signalIoctl+0xcea>
    33ce:	2a c2       	rjmp	.+1108   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    33d0:	e0 e2       	ldi	r30, 0x20	; 32
    33d2:	f7 e0       	ldi	r31, 0x07	; 7
    33d4:	97 83       	std	Z+7, r25	; 0x07
    33d6:	ee 24       	eor	r14, r14
    33d8:	ff 24       	eor	r15, r15
    33da:	87 01       	movw	r16, r14
    33dc:	26 c2       	rjmp	.+1100   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    33de:	80 91 c0 07 	lds	r24, 0x07C0
    33e2:	89 23       	and	r24, r25
    33e4:	09 f4       	brne	.+2      	; 0x33e8 <signalIoctl+0xd02>
    33e6:	1e c2       	rjmp	.+1084   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    33e8:	e0 ec       	ldi	r30, 0xC0	; 192
    33ea:	f7 e0       	ldi	r31, 0x07	; 7
    33ec:	97 83       	std	Z+7, r25	; 0x07
    33ee:	ee 24       	eor	r14, r14
    33f0:	ff 24       	eor	r15, r15
    33f2:	87 01       	movw	r16, r14
    33f4:	1a c2       	rjmp	.+1076   	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    33f6:	80 91 e0 07 	lds	r24, 0x07E0
    33fa:	89 23       	and	r24, r25
    33fc:	09 f4       	brne	.+2      	; 0x3400 <signalIoctl+0xd1a>
    33fe:	12 c2       	rjmp	.+1060   	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    3400:	e0 ee       	ldi	r30, 0xE0	; 224
    3402:	f7 e0       	ldi	r31, 0x07	; 7
    3404:	97 83       	std	Z+7, r25	; 0x07
    3406:	ee 24       	eor	r14, r14
    3408:	ff 24       	eor	r15, r15
    340a:	87 01       	movw	r16, r14
    340c:	0e c2       	rjmp	.+1052   	; 0x382a <signalIoctl+0x1144>

      break;/*End case YELLOW_LED_TOGGLE:*/

      case ALL_LEDS_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
    340e:	90 91 b4 22 	lds	r25, 0x22B4
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    3412:	80 91 b0 22 	lds	r24, 0x22B0
    3416:	85 30       	cpi	r24, 0x05	; 5
    3418:	09 f4       	brne	.+2      	; 0x341c <signalIoctl+0xd36>
    341a:	61 c0       	rjmp	.+194    	; 0x34de <signalIoctl+0xdf8>
    341c:	86 30       	cpi	r24, 0x06	; 6
    341e:	80 f4       	brcc	.+32     	; 0x3440 <signalIoctl+0xd5a>
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	c9 f1       	breq	.+114    	; 0x3496 <signalIoctl+0xdb0>
    3424:	83 30       	cpi	r24, 0x03	; 3
    3426:	30 f4       	brcc	.+12     	; 0x3434 <signalIoctl+0xd4e>
    3428:	88 23       	and	r24, r24
    342a:	e9 f0       	breq	.+58     	; 0x3466 <signalIoctl+0xd80>
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	09 f0       	breq	.+2      	; 0x3432 <signalIoctl+0xd4c>
    3430:	f9 c1       	rjmp	.+1010   	; 0x3824 <signalIoctl+0x113e>
    3432:	25 c0       	rjmp	.+74     	; 0x347e <signalIoctl+0xd98>
    3434:	83 30       	cpi	r24, 0x03	; 3
    3436:	d9 f1       	breq	.+118    	; 0x34ae <signalIoctl+0xdc8>
    3438:	84 30       	cpi	r24, 0x04	; 4
    343a:	09 f0       	breq	.+2      	; 0x343e <signalIoctl+0xd58>
    343c:	f3 c1       	rjmp	.+998    	; 0x3824 <signalIoctl+0x113e>
    343e:	43 c0       	rjmp	.+134    	; 0x34c6 <signalIoctl+0xde0>
    3440:	88 30       	cpi	r24, 0x08	; 8
    3442:	09 f4       	brne	.+2      	; 0x3446 <signalIoctl+0xd60>
    3444:	70 c0       	rjmp	.+224    	; 0x3526 <signalIoctl+0xe40>
    3446:	89 30       	cpi	r24, 0x09	; 9
    3448:	38 f4       	brcc	.+14     	; 0x3458 <signalIoctl+0xd72>
    344a:	86 30       	cpi	r24, 0x06	; 6
    344c:	09 f4       	brne	.+2      	; 0x3450 <signalIoctl+0xd6a>
    344e:	53 c0       	rjmp	.+166    	; 0x34f6 <signalIoctl+0xe10>
    3450:	87 30       	cpi	r24, 0x07	; 7
    3452:	09 f0       	breq	.+2      	; 0x3456 <signalIoctl+0xd70>
    3454:	e7 c1       	rjmp	.+974    	; 0x3824 <signalIoctl+0x113e>
    3456:	5b c0       	rjmp	.+182    	; 0x350e <signalIoctl+0xe28>
    3458:	89 30       	cpi	r24, 0x09	; 9
    345a:	09 f4       	brne	.+2      	; 0x345e <signalIoctl+0xd78>
    345c:	70 c0       	rjmp	.+224    	; 0x353e <signalIoctl+0xe58>
    345e:	8a 30       	cpi	r24, 0x0A	; 10
    3460:	09 f0       	breq	.+2      	; 0x3464 <signalIoctl+0xd7e>
    3462:	e0 c1       	rjmp	.+960    	; 0x3824 <signalIoctl+0x113e>
    3464:	78 c0       	rjmp	.+240    	; 0x3556 <signalIoctl+0xe70>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3466:	80 91 00 06 	lds	r24, 0x0600
    346a:	89 23       	and	r24, r25
    346c:	09 f4       	brne	.+2      	; 0x3470 <signalIoctl+0xd8a>
    346e:	da c1       	rjmp	.+948    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    3470:	e0 e0       	ldi	r30, 0x00	; 0
    3472:	f6 e0       	ldi	r31, 0x06	; 6
    3474:	96 83       	std	Z+6, r25	; 0x06
    3476:	ee 24       	eor	r14, r14
    3478:	ff 24       	eor	r15, r15
    347a:	87 01       	movw	r16, r14
    347c:	d6 c1       	rjmp	.+940    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    347e:	80 91 20 06 	lds	r24, 0x0620
    3482:	89 23       	and	r24, r25
    3484:	09 f4       	brne	.+2      	; 0x3488 <signalIoctl+0xda2>
    3486:	ce c1       	rjmp	.+924    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    3488:	e0 e2       	ldi	r30, 0x20	; 32
    348a:	f6 e0       	ldi	r31, 0x06	; 6
    348c:	96 83       	std	Z+6, r25	; 0x06
    348e:	ee 24       	eor	r14, r14
    3490:	ff 24       	eor	r15, r15
    3492:	87 01       	movw	r16, r14
    3494:	ca c1       	rjmp	.+916    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3496:	80 91 40 06 	lds	r24, 0x0640
    349a:	89 23       	and	r24, r25
    349c:	09 f4       	brne	.+2      	; 0x34a0 <signalIoctl+0xdba>
    349e:	c2 c1       	rjmp	.+900    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    34a0:	e0 e4       	ldi	r30, 0x40	; 64
    34a2:	f6 e0       	ldi	r31, 0x06	; 6
    34a4:	96 83       	std	Z+6, r25	; 0x06
    34a6:	ee 24       	eor	r14, r14
    34a8:	ff 24       	eor	r15, r15
    34aa:	87 01       	movw	r16, r14
    34ac:	be c1       	rjmp	.+892    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    34ae:	80 91 60 06 	lds	r24, 0x0660
    34b2:	89 23       	and	r24, r25
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <signalIoctl+0xdd2>
    34b6:	b6 c1       	rjmp	.+876    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    34b8:	e0 e6       	ldi	r30, 0x60	; 96
    34ba:	f6 e0       	ldi	r31, 0x06	; 6
    34bc:	96 83       	std	Z+6, r25	; 0x06
    34be:	ee 24       	eor	r14, r14
    34c0:	ff 24       	eor	r15, r15
    34c2:	87 01       	movw	r16, r14
    34c4:	b2 c1       	rjmp	.+868    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    34c6:	80 91 80 06 	lds	r24, 0x0680
    34ca:	89 23       	and	r24, r25
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <signalIoctl+0xdea>
    34ce:	aa c1       	rjmp	.+852    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    34d0:	e0 e8       	ldi	r30, 0x80	; 128
    34d2:	f6 e0       	ldi	r31, 0x06	; 6
    34d4:	96 83       	std	Z+6, r25	; 0x06
    34d6:	ee 24       	eor	r14, r14
    34d8:	ff 24       	eor	r15, r15
    34da:	87 01       	movw	r16, r14
    34dc:	a6 c1       	rjmp	.+844    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    34de:	80 91 a0 06 	lds	r24, 0x06A0
    34e2:	89 23       	and	r24, r25
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <signalIoctl+0xe02>
    34e6:	9e c1       	rjmp	.+828    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    34e8:	e0 ea       	ldi	r30, 0xA0	; 160
    34ea:	f6 e0       	ldi	r31, 0x06	; 6
    34ec:	96 83       	std	Z+6, r25	; 0x06
    34ee:	ee 24       	eor	r14, r14
    34f0:	ff 24       	eor	r15, r15
    34f2:	87 01       	movw	r16, r14
    34f4:	9a c1       	rjmp	.+820    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    34f6:	80 91 e0 06 	lds	r24, 0x06E0
    34fa:	89 23       	and	r24, r25
    34fc:	09 f4       	brne	.+2      	; 0x3500 <signalIoctl+0xe1a>
    34fe:	92 c1       	rjmp	.+804    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    3500:	e0 ee       	ldi	r30, 0xE0	; 224
    3502:	f6 e0       	ldi	r31, 0x06	; 6
    3504:	96 83       	std	Z+6, r25	; 0x06
    3506:	ee 24       	eor	r14, r14
    3508:	ff 24       	eor	r15, r15
    350a:	87 01       	movw	r16, r14
    350c:	8e c1       	rjmp	.+796    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    350e:	80 91 00 07 	lds	r24, 0x0700
    3512:	89 23       	and	r24, r25
    3514:	09 f4       	brne	.+2      	; 0x3518 <signalIoctl+0xe32>
    3516:	86 c1       	rjmp	.+780    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    3518:	e0 e0       	ldi	r30, 0x00	; 0
    351a:	f7 e0       	ldi	r31, 0x07	; 7
    351c:	96 83       	std	Z+6, r25	; 0x06
    351e:	ee 24       	eor	r14, r14
    3520:	ff 24       	eor	r15, r15
    3522:	87 01       	movw	r16, r14
    3524:	82 c1       	rjmp	.+772    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3526:	80 91 20 07 	lds	r24, 0x0720
    352a:	89 23       	and	r24, r25
    352c:	09 f4       	brne	.+2      	; 0x3530 <signalIoctl+0xe4a>
    352e:	7a c1       	rjmp	.+756    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    3530:	e0 e2       	ldi	r30, 0x20	; 32
    3532:	f7 e0       	ldi	r31, 0x07	; 7
    3534:	96 83       	std	Z+6, r25	; 0x06
    3536:	ee 24       	eor	r14, r14
    3538:	ff 24       	eor	r15, r15
    353a:	87 01       	movw	r16, r14
    353c:	76 c1       	rjmp	.+748    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    353e:	80 91 c0 07 	lds	r24, 0x07C0
    3542:	89 23       	and	r24, r25
    3544:	09 f4       	brne	.+2      	; 0x3548 <signalIoctl+0xe62>
    3546:	6e c1       	rjmp	.+732    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    3548:	e0 ec       	ldi	r30, 0xC0	; 192
    354a:	f7 e0       	ldi	r31, 0x07	; 7
    354c:	96 83       	std	Z+6, r25	; 0x06
    354e:	ee 24       	eor	r14, r14
    3550:	ff 24       	eor	r15, r15
    3552:	87 01       	movw	r16, r14
    3554:	6a c1       	rjmp	.+724    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3556:	80 91 e0 07 	lds	r24, 0x07E0
    355a:	89 23       	and	r24, r25
    355c:	09 f4       	brne	.+2      	; 0x3560 <signalIoctl+0xe7a>
    355e:	62 c1       	rjmp	.+708    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    3560:	e0 ee       	ldi	r30, 0xE0	; 224
    3562:	f7 e0       	ldi	r31, 0x07	; 7
    3564:	96 83       	std	Z+6, r25	; 0x06
    3566:	ee 24       	eor	r14, r14
    3568:	ff 24       	eor	r15, r15
    356a:	87 01       	movw	r16, r14
    356c:	5e c1       	rjmp	.+700    	; 0x382a <signalIoctl+0x1144>

      break;/*End case ALL_LEDS_ON:*/

      case ALL_LEDS_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
    356e:	90 91 b4 22 	lds	r25, 0x22B4
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    3572:	80 91 b0 22 	lds	r24, 0x22B0
    3576:	85 30       	cpi	r24, 0x05	; 5
    3578:	09 f4       	brne	.+2      	; 0x357c <signalIoctl+0xe96>
    357a:	61 c0       	rjmp	.+194    	; 0x363e <signalIoctl+0xf58>
    357c:	86 30       	cpi	r24, 0x06	; 6
    357e:	80 f4       	brcc	.+32     	; 0x35a0 <signalIoctl+0xeba>
    3580:	82 30       	cpi	r24, 0x02	; 2
    3582:	c9 f1       	breq	.+114    	; 0x35f6 <signalIoctl+0xf10>
    3584:	83 30       	cpi	r24, 0x03	; 3
    3586:	30 f4       	brcc	.+12     	; 0x3594 <signalIoctl+0xeae>
    3588:	88 23       	and	r24, r24
    358a:	e9 f0       	breq	.+58     	; 0x35c6 <signalIoctl+0xee0>
    358c:	81 30       	cpi	r24, 0x01	; 1
    358e:	09 f0       	breq	.+2      	; 0x3592 <signalIoctl+0xeac>
    3590:	49 c1       	rjmp	.+658    	; 0x3824 <signalIoctl+0x113e>
    3592:	25 c0       	rjmp	.+74     	; 0x35de <signalIoctl+0xef8>
    3594:	83 30       	cpi	r24, 0x03	; 3
    3596:	d9 f1       	breq	.+118    	; 0x360e <signalIoctl+0xf28>
    3598:	84 30       	cpi	r24, 0x04	; 4
    359a:	09 f0       	breq	.+2      	; 0x359e <signalIoctl+0xeb8>
    359c:	43 c1       	rjmp	.+646    	; 0x3824 <signalIoctl+0x113e>
    359e:	43 c0       	rjmp	.+134    	; 0x3626 <signalIoctl+0xf40>
    35a0:	88 30       	cpi	r24, 0x08	; 8
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <signalIoctl+0xec0>
    35a4:	70 c0       	rjmp	.+224    	; 0x3686 <signalIoctl+0xfa0>
    35a6:	89 30       	cpi	r24, 0x09	; 9
    35a8:	38 f4       	brcc	.+14     	; 0x35b8 <signalIoctl+0xed2>
    35aa:	86 30       	cpi	r24, 0x06	; 6
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <signalIoctl+0xeca>
    35ae:	53 c0       	rjmp	.+166    	; 0x3656 <signalIoctl+0xf70>
    35b0:	87 30       	cpi	r24, 0x07	; 7
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <signalIoctl+0xed0>
    35b4:	37 c1       	rjmp	.+622    	; 0x3824 <signalIoctl+0x113e>
    35b6:	5b c0       	rjmp	.+182    	; 0x366e <signalIoctl+0xf88>
    35b8:	89 30       	cpi	r24, 0x09	; 9
    35ba:	09 f4       	brne	.+2      	; 0x35be <signalIoctl+0xed8>
    35bc:	70 c0       	rjmp	.+224    	; 0x369e <signalIoctl+0xfb8>
    35be:	8a 30       	cpi	r24, 0x0A	; 10
    35c0:	09 f0       	breq	.+2      	; 0x35c4 <signalIoctl+0xede>
    35c2:	30 c1       	rjmp	.+608    	; 0x3824 <signalIoctl+0x113e>
    35c4:	78 c0       	rjmp	.+240    	; 0x36b6 <signalIoctl+0xfd0>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    35c6:	80 91 00 06 	lds	r24, 0x0600
    35ca:	89 23       	and	r24, r25
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <signalIoctl+0xeea>
    35ce:	2a c1       	rjmp	.+596    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    35d0:	e0 e0       	ldi	r30, 0x00	; 0
    35d2:	f6 e0       	ldi	r31, 0x06	; 6
    35d4:	95 83       	std	Z+5, r25	; 0x05
    35d6:	ee 24       	eor	r14, r14
    35d8:	ff 24       	eor	r15, r15
    35da:	87 01       	movw	r16, r14
    35dc:	26 c1       	rjmp	.+588    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    35de:	80 91 20 06 	lds	r24, 0x0620
    35e2:	89 23       	and	r24, r25
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <signalIoctl+0xf02>
    35e6:	1e c1       	rjmp	.+572    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    35e8:	e0 e2       	ldi	r30, 0x20	; 32
    35ea:	f6 e0       	ldi	r31, 0x06	; 6
    35ec:	95 83       	std	Z+5, r25	; 0x05
    35ee:	ee 24       	eor	r14, r14
    35f0:	ff 24       	eor	r15, r15
    35f2:	87 01       	movw	r16, r14
    35f4:	1a c1       	rjmp	.+564    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    35f6:	80 91 40 06 	lds	r24, 0x0640
    35fa:	89 23       	and	r24, r25
    35fc:	09 f4       	brne	.+2      	; 0x3600 <signalIoctl+0xf1a>
    35fe:	12 c1       	rjmp	.+548    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    3600:	e0 e4       	ldi	r30, 0x40	; 64
    3602:	f6 e0       	ldi	r31, 0x06	; 6
    3604:	95 83       	std	Z+5, r25	; 0x05
    3606:	ee 24       	eor	r14, r14
    3608:	ff 24       	eor	r15, r15
    360a:	87 01       	movw	r16, r14
    360c:	0e c1       	rjmp	.+540    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    360e:	80 91 60 06 	lds	r24, 0x0660
    3612:	89 23       	and	r24, r25
    3614:	09 f4       	brne	.+2      	; 0x3618 <signalIoctl+0xf32>
    3616:	06 c1       	rjmp	.+524    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    3618:	e0 e6       	ldi	r30, 0x60	; 96
    361a:	f6 e0       	ldi	r31, 0x06	; 6
    361c:	95 83       	std	Z+5, r25	; 0x05
    361e:	ee 24       	eor	r14, r14
    3620:	ff 24       	eor	r15, r15
    3622:	87 01       	movw	r16, r14
    3624:	02 c1       	rjmp	.+516    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3626:	80 91 80 06 	lds	r24, 0x0680
    362a:	89 23       	and	r24, r25
    362c:	09 f4       	brne	.+2      	; 0x3630 <signalIoctl+0xf4a>
    362e:	fa c0       	rjmp	.+500    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    3630:	e0 e8       	ldi	r30, 0x80	; 128
    3632:	f6 e0       	ldi	r31, 0x06	; 6
    3634:	95 83       	std	Z+5, r25	; 0x05
    3636:	ee 24       	eor	r14, r14
    3638:	ff 24       	eor	r15, r15
    363a:	87 01       	movw	r16, r14
    363c:	f6 c0       	rjmp	.+492    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    363e:	80 91 a0 06 	lds	r24, 0x06A0
    3642:	89 23       	and	r24, r25
    3644:	09 f4       	brne	.+2      	; 0x3648 <signalIoctl+0xf62>
    3646:	ee c0       	rjmp	.+476    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    3648:	e0 ea       	ldi	r30, 0xA0	; 160
    364a:	f6 e0       	ldi	r31, 0x06	; 6
    364c:	95 83       	std	Z+5, r25	; 0x05
    364e:	ee 24       	eor	r14, r14
    3650:	ff 24       	eor	r15, r15
    3652:	87 01       	movw	r16, r14
    3654:	ea c0       	rjmp	.+468    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    3656:	80 91 e0 06 	lds	r24, 0x06E0
    365a:	89 23       	and	r24, r25
    365c:	09 f4       	brne	.+2      	; 0x3660 <signalIoctl+0xf7a>
    365e:	e2 c0       	rjmp	.+452    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    3660:	e0 ee       	ldi	r30, 0xE0	; 224
    3662:	f6 e0       	ldi	r31, 0x06	; 6
    3664:	95 83       	std	Z+5, r25	; 0x05
    3666:	ee 24       	eor	r14, r14
    3668:	ff 24       	eor	r15, r15
    366a:	87 01       	movw	r16, r14
    366c:	de c0       	rjmp	.+444    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    366e:	80 91 00 07 	lds	r24, 0x0700
    3672:	89 23       	and	r24, r25
    3674:	09 f4       	brne	.+2      	; 0x3678 <signalIoctl+0xf92>
    3676:	d6 c0       	rjmp	.+428    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    3678:	e0 e0       	ldi	r30, 0x00	; 0
    367a:	f7 e0       	ldi	r31, 0x07	; 7
    367c:	95 83       	std	Z+5, r25	; 0x05
    367e:	ee 24       	eor	r14, r14
    3680:	ff 24       	eor	r15, r15
    3682:	87 01       	movw	r16, r14
    3684:	d2 c0       	rjmp	.+420    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    3686:	80 91 20 07 	lds	r24, 0x0720
    368a:	89 23       	and	r24, r25
    368c:	09 f4       	brne	.+2      	; 0x3690 <signalIoctl+0xfaa>
    368e:	ca c0       	rjmp	.+404    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    3690:	e0 e2       	ldi	r30, 0x20	; 32
    3692:	f7 e0       	ldi	r31, 0x07	; 7
    3694:	95 83       	std	Z+5, r25	; 0x05
    3696:	ee 24       	eor	r14, r14
    3698:	ff 24       	eor	r15, r15
    369a:	87 01       	movw	r16, r14
    369c:	c6 c0       	rjmp	.+396    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    369e:	80 91 c0 07 	lds	r24, 0x07C0
    36a2:	89 23       	and	r24, r25
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <signalIoctl+0xfc2>
    36a6:	be c0       	rjmp	.+380    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    36a8:	e0 ec       	ldi	r30, 0xC0	; 192
    36aa:	f7 e0       	ldi	r31, 0x07	; 7
    36ac:	95 83       	std	Z+5, r25	; 0x05
    36ae:	ee 24       	eor	r14, r14
    36b0:	ff 24       	eor	r15, r15
    36b2:	87 01       	movw	r16, r14
    36b4:	ba c0       	rjmp	.+372    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    36b6:	80 91 e0 07 	lds	r24, 0x07E0
    36ba:	89 23       	and	r24, r25
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <signalIoctl+0xfda>
    36be:	b2 c0       	rjmp	.+356    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    36c0:	e0 ee       	ldi	r30, 0xE0	; 224
    36c2:	f7 e0       	ldi	r31, 0x07	; 7
    36c4:	95 83       	std	Z+5, r25	; 0x05
    36c6:	ee 24       	eor	r14, r14
    36c8:	ff 24       	eor	r15, r15
    36ca:	87 01       	movw	r16, r14
    36cc:	ae c0       	rjmp	.+348    	; 0x382a <signalIoctl+0x1144>

      break;/*End case ALL_LEDS_OFF:*/

      case ALL_LEDS_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
    36ce:	90 91 b4 22 	lds	r25, 0x22B4
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    36d2:	80 91 b0 22 	lds	r24, 0x22B0
    36d6:	85 30       	cpi	r24, 0x05	; 5
    36d8:	09 f4       	brne	.+2      	; 0x36dc <signalIoctl+0xff6>
    36da:	61 c0       	rjmp	.+194    	; 0x379e <signalIoctl+0x10b8>
    36dc:	86 30       	cpi	r24, 0x06	; 6
    36de:	80 f4       	brcc	.+32     	; 0x3700 <signalIoctl+0x101a>
    36e0:	82 30       	cpi	r24, 0x02	; 2
    36e2:	c9 f1       	breq	.+114    	; 0x3756 <signalIoctl+0x1070>
    36e4:	83 30       	cpi	r24, 0x03	; 3
    36e6:	30 f4       	brcc	.+12     	; 0x36f4 <signalIoctl+0x100e>
    36e8:	88 23       	and	r24, r24
    36ea:	e9 f0       	breq	.+58     	; 0x3726 <signalIoctl+0x1040>
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <signalIoctl+0x100c>
    36f0:	99 c0       	rjmp	.+306    	; 0x3824 <signalIoctl+0x113e>
    36f2:	25 c0       	rjmp	.+74     	; 0x373e <signalIoctl+0x1058>
    36f4:	83 30       	cpi	r24, 0x03	; 3
    36f6:	d9 f1       	breq	.+118    	; 0x376e <signalIoctl+0x1088>
    36f8:	84 30       	cpi	r24, 0x04	; 4
    36fa:	09 f0       	breq	.+2      	; 0x36fe <signalIoctl+0x1018>
    36fc:	93 c0       	rjmp	.+294    	; 0x3824 <signalIoctl+0x113e>
    36fe:	43 c0       	rjmp	.+134    	; 0x3786 <signalIoctl+0x10a0>
    3700:	88 30       	cpi	r24, 0x08	; 8
    3702:	09 f4       	brne	.+2      	; 0x3706 <signalIoctl+0x1020>
    3704:	6e c0       	rjmp	.+220    	; 0x37e2 <signalIoctl+0x10fc>
    3706:	89 30       	cpi	r24, 0x09	; 9
    3708:	38 f4       	brcc	.+14     	; 0x3718 <signalIoctl+0x1032>
    370a:	86 30       	cpi	r24, 0x06	; 6
    370c:	09 f4       	brne	.+2      	; 0x3710 <signalIoctl+0x102a>
    370e:	53 c0       	rjmp	.+166    	; 0x37b6 <signalIoctl+0x10d0>
    3710:	87 30       	cpi	r24, 0x07	; 7
    3712:	09 f0       	breq	.+2      	; 0x3716 <signalIoctl+0x1030>
    3714:	87 c0       	rjmp	.+270    	; 0x3824 <signalIoctl+0x113e>
    3716:	5a c0       	rjmp	.+180    	; 0x37cc <signalIoctl+0x10e6>
    3718:	89 30       	cpi	r24, 0x09	; 9
    371a:	09 f4       	brne	.+2      	; 0x371e <signalIoctl+0x1038>
    371c:	6d c0       	rjmp	.+218    	; 0x37f8 <signalIoctl+0x1112>
    371e:	8a 30       	cpi	r24, 0x0A	; 10
    3720:	09 f0       	breq	.+2      	; 0x3724 <signalIoctl+0x103e>
    3722:	80 c0       	rjmp	.+256    	; 0x3824 <signalIoctl+0x113e>
    3724:	74 c0       	rjmp	.+232    	; 0x380e <signalIoctl+0x1128>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    3726:	80 91 00 06 	lds	r24, 0x0600
    372a:	89 23       	and	r24, r25
    372c:	09 f4       	brne	.+2      	; 0x3730 <signalIoctl+0x104a>
    372e:	7a c0       	rjmp	.+244    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
    3730:	e0 e0       	ldi	r30, 0x00	; 0
    3732:	f6 e0       	ldi	r31, 0x06	; 6
    3734:	97 83       	std	Z+7, r25	; 0x07
    3736:	ee 24       	eor	r14, r14
    3738:	ff 24       	eor	r15, r15
    373a:	87 01       	movw	r16, r14
    373c:	76 c0       	rjmp	.+236    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    373e:	80 91 20 06 	lds	r24, 0x0620
    3742:	89 23       	and	r24, r25
    3744:	09 f4       	brne	.+2      	; 0x3748 <signalIoctl+0x1062>
    3746:	6e c0       	rjmp	.+220    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
    3748:	e0 e2       	ldi	r30, 0x20	; 32
    374a:	f6 e0       	ldi	r31, 0x06	; 6
    374c:	97 83       	std	Z+7, r25	; 0x07
    374e:	ee 24       	eor	r14, r14
    3750:	ff 24       	eor	r15, r15
    3752:	87 01       	movw	r16, r14
    3754:	6a c0       	rjmp	.+212    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    3756:	80 91 40 06 	lds	r24, 0x0640
    375a:	89 23       	and	r24, r25
    375c:	09 f4       	brne	.+2      	; 0x3760 <signalIoctl+0x107a>
    375e:	62 c0       	rjmp	.+196    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
    3760:	e0 e4       	ldi	r30, 0x40	; 64
    3762:	f6 e0       	ldi	r31, 0x06	; 6
    3764:	97 83       	std	Z+7, r25	; 0x07
    3766:	ee 24       	eor	r14, r14
    3768:	ff 24       	eor	r15, r15
    376a:	87 01       	movw	r16, r14
    376c:	5e c0       	rjmp	.+188    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    376e:	80 91 60 06 	lds	r24, 0x0660
    3772:	89 23       	and	r24, r25
    3774:	09 f4       	brne	.+2      	; 0x3778 <signalIoctl+0x1092>
    3776:	56 c0       	rjmp	.+172    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
    3778:	e0 e6       	ldi	r30, 0x60	; 96
    377a:	f6 e0       	ldi	r31, 0x06	; 6
    377c:	97 83       	std	Z+7, r25	; 0x07
    377e:	ee 24       	eor	r14, r14
    3780:	ff 24       	eor	r15, r15
    3782:	87 01       	movw	r16, r14
    3784:	52 c0       	rjmp	.+164    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    3786:	80 91 80 06 	lds	r24, 0x0680
    378a:	89 23       	and	r24, r25
    378c:	09 f4       	brne	.+2      	; 0x3790 <signalIoctl+0x10aa>
    378e:	4a c0       	rjmp	.+148    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
    3790:	e0 e8       	ldi	r30, 0x80	; 128
    3792:	f6 e0       	ldi	r31, 0x06	; 6
    3794:	97 83       	std	Z+7, r25	; 0x07
    3796:	ee 24       	eor	r14, r14
    3798:	ff 24       	eor	r15, r15
    379a:	87 01       	movw	r16, r14
    379c:	46 c0       	rjmp	.+140    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    379e:	80 91 a0 06 	lds	r24, 0x06A0
    37a2:	89 23       	and	r24, r25
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <signalIoctl+0x10c2>
    37a6:	3e c0       	rjmp	.+124    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
    37a8:	e0 ea       	ldi	r30, 0xA0	; 160
    37aa:	f6 e0       	ldi	r31, 0x06	; 6
    37ac:	97 83       	std	Z+7, r25	; 0x07
    37ae:	ee 24       	eor	r14, r14
    37b0:	ff 24       	eor	r15, r15
    37b2:	87 01       	movw	r16, r14
    37b4:	3a c0       	rjmp	.+116    	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    37b6:	80 91 e0 06 	lds	r24, 0x06E0
    37ba:	89 23       	and	r24, r25
    37bc:	99 f1       	breq	.+102    	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
    37be:	e0 ee       	ldi	r30, 0xE0	; 224
    37c0:	f6 e0       	ldi	r31, 0x06	; 6
    37c2:	97 83       	std	Z+7, r25	; 0x07
    37c4:	ee 24       	eor	r14, r14
    37c6:	ff 24       	eor	r15, r15
    37c8:	87 01       	movw	r16, r14
    37ca:	2f c0       	rjmp	.+94     	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    37cc:	80 91 00 07 	lds	r24, 0x0700
    37d0:	89 23       	and	r24, r25
    37d2:	41 f1       	breq	.+80     	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
    37d4:	e0 e0       	ldi	r30, 0x00	; 0
    37d6:	f7 e0       	ldi	r31, 0x07	; 7
    37d8:	97 83       	std	Z+7, r25	; 0x07
    37da:	ee 24       	eor	r14, r14
    37dc:	ff 24       	eor	r15, r15
    37de:	87 01       	movw	r16, r14
    37e0:	24 c0       	rjmp	.+72     	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    37e2:	80 91 20 07 	lds	r24, 0x0720
    37e6:	89 23       	and	r24, r25
    37e8:	e9 f0       	breq	.+58     	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
    37ea:	e0 e2       	ldi	r30, 0x20	; 32
    37ec:	f7 e0       	ldi	r31, 0x07	; 7
    37ee:	97 83       	std	Z+7, r25	; 0x07
    37f0:	ee 24       	eor	r14, r14
    37f2:	ff 24       	eor	r15, r15
    37f4:	87 01       	movw	r16, r14
    37f6:	19 c0       	rjmp	.+50     	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    37f8:	80 91 c0 07 	lds	r24, 0x07C0
    37fc:	89 23       	and	r24, r25
    37fe:	91 f0       	breq	.+36     	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
    3800:	e0 ec       	ldi	r30, 0xC0	; 192
    3802:	f7 e0       	ldi	r31, 0x07	; 7
    3804:	97 83       	std	Z+7, r25	; 0x07
    3806:	ee 24       	eor	r14, r14
    3808:	ff 24       	eor	r15, r15
    380a:	87 01       	movw	r16, r14
    380c:	0e c0       	rjmp	.+28     	; 0x382a <signalIoctl+0x1144>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    380e:	80 91 e0 07 	lds	r24, 0x07E0
    3812:	89 23       	and	r24, r25
    3814:	39 f0       	breq	.+14     	; 0x3824 <signalIoctl+0x113e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
    3816:	e0 ee       	ldi	r30, 0xE0	; 224
    3818:	f7 e0       	ldi	r31, 0x07	; 7
    381a:	97 83       	std	Z+7, r25	; 0x07
    381c:	ee 24       	eor	r14, r14
    381e:	ff 24       	eor	r15, r15
    3820:	87 01       	movw	r16, r14
    3822:	03 c0       	rjmp	.+6      	; 0x382a <signalIoctl+0x1144>
    3824:	ee 24       	eor	r14, r14
    3826:	ff 24       	eor	r15, r15
    3828:	87 01       	movw	r16, r14
   }/*End switch( (t_signalCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    382a:	80 91 ae 22 	lds	r24, 0x22AE
    382e:	90 91 af 22 	lds	r25, 0x22AF
    3832:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return i_return;

}/*End signalIoctl*/
    3836:	b7 01       	movw	r22, r14
    3838:	c8 01       	movw	r24, r16
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	ff 90       	pop	r15
    3848:	ef 90       	pop	r14
    384a:	08 95       	ret

0000384c <signalOpen>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
t_error signalOpen( t_DEVHANDLE t_devHandle)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	0f 92       	push	r0
    3852:	0f 92       	push	r0
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	89 83       	std	Y+1, r24	; 0x01
    385a:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
    385c:	80 91 ae 22 	lds	r24, 0x22AE
    3860:	90 91 af 22 	lds	r25, 0x22AF
    3864:	60 e0       	ldi	r22, 0x00	; 0
    3866:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
             0);

   gt_signalDev.c_numUsers++;
    386a:	80 91 b5 22 	lds	r24, 0x22B5
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	80 93 b5 22 	sts	0x22B5, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
    3874:	80 91 ae 22 	lds	r24, 0x22AE
    3878:	90 91 af 22 	lds	r25, 0x22AF
    387c:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>

   return ARB_PASSED;

}/*End signalOpen*/
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <drv_signalInit>:
   return ARB_PASSED;

}/*End signalClose*/

t_error drv_signalInit( t_signalSetup t_setup)
{
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	2a 97       	sbiw	r28, 0x0a	; 10
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	4e 83       	std	Y+6, r20	; 0x06
    38a0:	5f 83       	std	Y+7, r21	; 0x07
    38a2:	68 87       	std	Y+8, r22	; 0x08
    38a4:	79 87       	std	Y+9, r23	; 0x09
    38a6:	8a 87       	std	Y+10, r24	; 0x0a
    38a8:	04 2f       	mov	r16, r20
   int8_t c_index;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "signalDevice0",
    38aa:	78 2f       	mov	r23, r24
    38ac:	8a e5       	ldi	r24, 0x5A	; 90
    38ae:	90 e2       	ldi	r25, 0x20	; 32
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	48 e6       	ldi	r20, 0x68	; 104
    38b4:	50 e2       	ldi	r21, 0x20	; 32
    38b6:	0e 94 c9 84 	call	0x10992	; 0x10992 <arb_registerDevice>
    38ba:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum,
                               0),
                               &gat_signalDevOps);

   if( t_err < 0)
    38bc:	87 fd       	sbrc	r24, 7
    38be:	bd c0       	rjmp	.+378    	; 0x3a3a <drv_signalInit+0x1ae>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_signalDev.t_mutex = arb_semaphoreCreate( MUTEX);
    38c0:	82 e0       	ldi	r24, 0x02	; 2
    38c2:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
    38c6:	80 93 ae 22 	sts	0x22AE, r24
    38ca:	90 93 af 22 	sts	0x22AF, r25

   if( gt_signalDev.t_mutex < 0)
    38ce:	80 91 ae 22 	lds	r24, 0x22AE
    38d2:	90 91 af 22 	lds	r25, 0x22AF
    38d6:	97 ff       	sbrs	r25, 7
    38d8:	06 c0       	rjmp	.+12     	; 0x38e6 <drv_signalInit+0x5a>
   {
      t_err = (t_error)gt_signalDev.t_mutex;
    38da:	80 91 ae 22 	lds	r24, 0x22AE
    38de:	90 91 af 22 	lds	r25, 0x22AF
    38e2:	18 2f       	mov	r17, r24
    38e4:	a4 c0       	rjmp	.+328    	; 0x3a2e <drv_signalInit+0x1a2>
   }/*End if( gt_signalDev.t_mutex < 0)*/

   /*------------------------------------------------------------------------*
    * We dont have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_signalDev.c_numUsers = 0;
    38e6:	10 92 b5 22 	sts	0x22B5, r1

   /*------------------------------------------------------------------------*
    * Configure the pins that control the led's...
    *------------------------------------------------------------------------*/
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
    38ea:	00 93 b0 22 	sts	0x22B0, r16
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
    38ee:	3f 81       	ldd	r19, Y+7	; 0x07
    38f0:	30 93 b1 22 	sts	0x22B1, r19
    38f4:	88 85       	ldd	r24, Y+8	; 0x08
    38f6:	80 93 b2 22 	sts	0x22B2, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
    38fa:	38 2b       	or	r19, r24
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
    38fc:	89 85       	ldd	r24, Y+9	; 0x09
    38fe:	80 93 b3 22 	sts	0x22B3, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
    3902:	38 2b       	or	r19, r24
    3904:	30 93 b4 22 	sts	0x22B4, r19
   }

   t_conf.c_inputMask    = 0;
    3908:	19 82       	std	Y+1, r1	; 0x01
   t_conf.c_outputMask   = gt_signalDev.c_allLedMask;
    390a:	3a 83       	std	Y+2, r19	; 0x02
   t_conf.b_setOutputLow = false;
    390c:	1b 82       	std	Y+3, r1	; 0x03
   t_conf.t_outConf      = TOTEM;
    390e:	1d 82       	std	Y+5, r1	; 0x05

   if( hal_configureGpioPort( t_setup.c_signalPort, t_conf) < 0)
    3910:	80 2f       	mov	r24, r16
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	5c 81       	ldd	r21, Y+4	; 0x04
    3918:	60 e0       	ldi	r22, 0x00	; 0
    391a:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
    391e:	87 fd       	sbrc	r24, 7
    3920:	7f c0       	rjmp	.+254    	; 0x3a20 <drv_signalInit+0x194>
   }

   /*------------------------------------------------------------------------*
    * Make sure the LED's are off - logic high is off...
    *------------------------------------------------------------------------*/
   hal_gpioOn( gt_signalDev.c_signalPort,
    3922:	90 91 b4 22 	lds	r25, 0x22B4
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    3926:	80 91 b0 22 	lds	r24, 0x22B0
    392a:	85 30       	cpi	r24, 0x05	; 5
    392c:	09 f4       	brne	.+2      	; 0x3930 <drv_signalInit+0xa4>
    392e:	4d c0       	rjmp	.+154    	; 0x39ca <drv_signalInit+0x13e>
    3930:	86 30       	cpi	r24, 0x06	; 6
    3932:	80 f4       	brcc	.+32     	; 0x3954 <drv_signalInit+0xc8>
    3934:	82 30       	cpi	r24, 0x02	; 2
    3936:	89 f1       	breq	.+98     	; 0x399a <drv_signalInit+0x10e>
    3938:	83 30       	cpi	r24, 0x03	; 3
    393a:	30 f4       	brcc	.+12     	; 0x3948 <drv_signalInit+0xbc>
    393c:	88 23       	and	r24, r24
    393e:	e9 f0       	breq	.+58     	; 0x397a <drv_signalInit+0xee>
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	09 f0       	breq	.+2      	; 0x3946 <drv_signalInit+0xba>
    3944:	79 c0       	rjmp	.+242    	; 0x3a38 <drv_signalInit+0x1ac>
    3946:	21 c0       	rjmp	.+66     	; 0x398a <drv_signalInit+0xfe>
    3948:	83 30       	cpi	r24, 0x03	; 3
    394a:	79 f1       	breq	.+94     	; 0x39aa <drv_signalInit+0x11e>
    394c:	84 30       	cpi	r24, 0x04	; 4
    394e:	09 f0       	breq	.+2      	; 0x3952 <drv_signalInit+0xc6>
    3950:	73 c0       	rjmp	.+230    	; 0x3a38 <drv_signalInit+0x1ac>
    3952:	33 c0       	rjmp	.+102    	; 0x39ba <drv_signalInit+0x12e>
    3954:	88 30       	cpi	r24, 0x08	; 8
    3956:	09 f4       	brne	.+2      	; 0x395a <drv_signalInit+0xce>
    3958:	4d c0       	rjmp	.+154    	; 0x39f4 <drv_signalInit+0x168>
    395a:	89 30       	cpi	r24, 0x09	; 9
    395c:	38 f4       	brcc	.+14     	; 0x396c <drv_signalInit+0xe0>
    395e:	86 30       	cpi	r24, 0x06	; 6
    3960:	09 f4       	brne	.+2      	; 0x3964 <drv_signalInit+0xd8>
    3962:	3a c0       	rjmp	.+116    	; 0x39d8 <drv_signalInit+0x14c>
    3964:	87 30       	cpi	r24, 0x07	; 7
    3966:	09 f0       	breq	.+2      	; 0x396a <drv_signalInit+0xde>
    3968:	67 c0       	rjmp	.+206    	; 0x3a38 <drv_signalInit+0x1ac>
    396a:	3d c0       	rjmp	.+122    	; 0x39e6 <drv_signalInit+0x15a>
    396c:	89 30       	cpi	r24, 0x09	; 9
    396e:	09 f4       	brne	.+2      	; 0x3972 <drv_signalInit+0xe6>
    3970:	48 c0       	rjmp	.+144    	; 0x3a02 <drv_signalInit+0x176>
    3972:	8a 30       	cpi	r24, 0x0A	; 10
    3974:	09 f0       	breq	.+2      	; 0x3978 <drv_signalInit+0xec>
    3976:	60 c0       	rjmp	.+192    	; 0x3a38 <drv_signalInit+0x1ac>
    3978:	4b c0       	rjmp	.+150    	; 0x3a10 <drv_signalInit+0x184>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    397a:	80 91 00 06 	lds	r24, 0x0600
    397e:	89 23       	and	r24, r25
    3980:	09 f4       	brne	.+2      	; 0x3984 <drv_signalInit+0xf8>
    3982:	5a c0       	rjmp	.+180    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    3984:	e0 e0       	ldi	r30, 0x00	; 0
    3986:	f6 e0       	ldi	r31, 0x06	; 6
    3988:	49 c0       	rjmp	.+146    	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    398a:	80 91 20 06 	lds	r24, 0x0620
    398e:	89 23       	and	r24, r25
    3990:	09 f4       	brne	.+2      	; 0x3994 <drv_signalInit+0x108>
    3992:	52 c0       	rjmp	.+164    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    3994:	e0 e2       	ldi	r30, 0x20	; 32
    3996:	f6 e0       	ldi	r31, 0x06	; 6
    3998:	41 c0       	rjmp	.+130    	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    399a:	80 91 40 06 	lds	r24, 0x0640
    399e:	89 23       	and	r24, r25
    39a0:	09 f4       	brne	.+2      	; 0x39a4 <drv_signalInit+0x118>
    39a2:	4a c0       	rjmp	.+148    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    39a4:	e0 e4       	ldi	r30, 0x40	; 64
    39a6:	f6 e0       	ldi	r31, 0x06	; 6
    39a8:	39 c0       	rjmp	.+114    	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    39aa:	80 91 60 06 	lds	r24, 0x0660
    39ae:	89 23       	and	r24, r25
    39b0:	09 f4       	brne	.+2      	; 0x39b4 <drv_signalInit+0x128>
    39b2:	42 c0       	rjmp	.+132    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    39b4:	e0 e6       	ldi	r30, 0x60	; 96
    39b6:	f6 e0       	ldi	r31, 0x06	; 6
    39b8:	31 c0       	rjmp	.+98     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    39ba:	80 91 80 06 	lds	r24, 0x0680
    39be:	89 23       	and	r24, r25
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <drv_signalInit+0x138>
    39c2:	3a c0       	rjmp	.+116    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    39c4:	e0 e8       	ldi	r30, 0x80	; 128
    39c6:	f6 e0       	ldi	r31, 0x06	; 6
    39c8:	29 c0       	rjmp	.+82     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    39ca:	80 91 a0 06 	lds	r24, 0x06A0
    39ce:	89 23       	and	r24, r25
    39d0:	99 f1       	breq	.+102    	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    39d2:	e0 ea       	ldi	r30, 0xA0	; 160
    39d4:	f6 e0       	ldi	r31, 0x06	; 6
    39d6:	22 c0       	rjmp	.+68     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    39d8:	80 91 e0 06 	lds	r24, 0x06E0
    39dc:	89 23       	and	r24, r25
    39de:	61 f1       	breq	.+88     	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    39e0:	e0 ee       	ldi	r30, 0xE0	; 224
    39e2:	f6 e0       	ldi	r31, 0x06	; 6
    39e4:	1b c0       	rjmp	.+54     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    39e6:	80 91 00 07 	lds	r24, 0x0700
    39ea:	89 23       	and	r24, r25
    39ec:	29 f1       	breq	.+74     	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    39ee:	e0 e0       	ldi	r30, 0x00	; 0
    39f0:	f7 e0       	ldi	r31, 0x07	; 7
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    39f4:	80 91 20 07 	lds	r24, 0x0720
    39f8:	89 23       	and	r24, r25
    39fa:	f1 f0       	breq	.+60     	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    39fc:	e0 e2       	ldi	r30, 0x20	; 32
    39fe:	f7 e0       	ldi	r31, 0x07	; 7
    3a00:	0d c0       	rjmp	.+26     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    3a02:	80 91 c0 07 	lds	r24, 0x07C0
    3a06:	89 23       	and	r24, r25
    3a08:	b9 f0       	breq	.+46     	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    3a0a:	e0 ec       	ldi	r30, 0xC0	; 192
    3a0c:	f7 e0       	ldi	r31, 0x07	; 7
    3a0e:	06 c0       	rjmp	.+12     	; 0x3a1c <drv_signalInit+0x190>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    3a10:	80 91 e0 07 	lds	r24, 0x07E0
    3a14:	89 23       	and	r24, r25
    3a16:	81 f0       	breq	.+32     	; 0x3a38 <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    3a18:	e0 ee       	ldi	r30, 0xE0	; 224
    3a1a:	f7 e0       	ldi	r31, 0x07	; 7
    3a1c:	95 83       	std	Z+5, r25	; 0x05
    3a1e:	0c c0       	rjmp	.+24     	; 0x3a38 <drv_signalInit+0x1ac>

   return ARB_PASSED;

failed3:

   arb_semaphoreDestroy( gt_signalDev.t_mutex);
    3a20:	80 91 ae 22 	lds	r24, 0x22AE
    3a24:	90 91 af 22 	lds	r25, 0x22AF
    3a28:	0e 94 ef 93 	call	0x127de	; 0x127de <arb_semaphoreDestroy>
    3a2c:	16 ef       	ldi	r17, 0xF6	; 246

failed2:

   arb_destroyDevice( "signalDevice0");
    3a2e:	8a e5       	ldi	r24, 0x5A	; 90
    3a30:	90 e2       	ldi	r25, 0x20	; 32
    3a32:	0e 94 50 84 	call	0x108a0	; 0x108a0 <arb_destroyDevice>
    3a36:	01 c0       	rjmp	.+2      	; 0x3a3a <drv_signalInit+0x1ae>
    3a38:	10 e0       	ldi	r17, 0x00	; 0

failed1:

   return t_err;

}/*End drv_signalInit*/
    3a3a:	81 2f       	mov	r24, r17
    3a3c:	2a 96       	adiw	r28, 0x0a	; 10
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	08 95       	ret

00003a4c <adc_findChannelElement>:
   return t_linkHndl;

}/*End createChanHandle*/

static t_chanHandle *adc_findChannelElement( t_chanId t_id)
{
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	0f 92       	push	r0
    3a52:	0f 92       	push	r0
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the ADC channel with an ID of t_id
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_adcChanList, s_count)
    3a5a:	e0 91 7e 20 	lds	r30, 0x207E
    3a5e:	f0 91 7f 20 	lds	r31, 0x207F
    3a62:	22 81       	ldd	r18, Z+2	; 0x02
    3a64:	33 81       	ldd	r19, Z+3	; 0x03
    3a66:	e0 91 7e 20 	lds	r30, 0x207E
    3a6a:	f0 91 7f 20 	lds	r31, 0x207F
    3a6e:	0c c0       	rjmp	.+24     	; 0x3a88 <adc_findChannelElement+0x3c>
   {
      pt_element = (t_chanHandle *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    3a70:	e9 81       	ldd	r30, Y+1	; 0x01
    3a72:	fa 81       	ldd	r31, Y+2	; 0x02
    3a74:	01 90       	ld	r0, Z+
    3a76:	f0 81       	ld	r31, Z
    3a78:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    3a7a:	81 81       	ldd	r24, Z+1	; 0x01
    3a7c:	84 17       	cp	r24, r20
    3a7e:	69 f0       	breq	.+26     	; 0x3a9a <adc_findChannelElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the ADC channel with an ID of t_id
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_adcChanList, s_count)
    3a80:	21 50       	subi	r18, 0x01	; 1
    3a82:	30 40       	sbci	r19, 0x00	; 0
    3a84:	e9 81       	ldd	r30, Y+1	; 0x01
    3a86:	fa 81       	ldd	r31, Y+2	; 0x02
    3a88:	80 85       	ldd	r24, Z+8	; 0x08
    3a8a:	91 85       	ldd	r25, Z+9	; 0x09
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	12 16       	cp	r1, r18
    3a92:	13 06       	cpc	r1, r19
    3a94:	6c f3       	brlt	.-38     	; 0x3a70 <adc_findChannelElement+0x24>
    3a96:	e0 e0       	ldi	r30, 0x00	; 0
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open ADC
    * channel list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End adc_findChannelElement*/
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <__vector_42>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCB_CH3_vect)
{
    3aa6:	1f 92       	push	r1
    3aa8:	0f 92       	push	r0
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	0f 92       	push	r0
    3aae:	08 b6       	in	r0, 0x38	; 56
    3ab0:	0f 92       	push	r0
    3ab2:	09 b6       	in	r0, 0x39	; 57
    3ab4:	0f 92       	push	r0
    3ab6:	0b b6       	in	r0, 0x3b	; 59
    3ab8:	0f 92       	push	r0
    3aba:	11 24       	eor	r1, r1
    3abc:	18 be       	out	0x38, r1	; 56
    3abe:	19 be       	out	0x39, r1	; 57
    3ac0:	1b be       	out	0x3b, r1	; 59
    3ac2:	2f 93       	push	r18
    3ac4:	3f 93       	push	r19
    3ac6:	4f 93       	push	r20
    3ac8:	5f 93       	push	r21
    3aca:	6f 93       	push	r22
    3acc:	7f 93       	push	r23
    3ace:	8f 93       	push	r24
    3ad0:	9f 93       	push	r25
    3ad2:	af 93       	push	r26
    3ad4:	bf 93       	push	r27
    3ad6:	ef 93       	push	r30
    3ad8:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN3);
    3ada:	87 e0       	ldi	r24, 0x07	; 7
    3adc:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3ae0:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3ae2:	00 97       	sbiw	r24, 0x00	; 0
    3ae4:	59 f0       	breq	.+22     	; 0x3afc <__vector_42+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH3.RES;
    3ae6:	20 91 7c 02 	lds	r18, 0x027C
    3aea:	30 91 7d 02 	lds	r19, 0x027D
    3aee:	24 83       	std	Z+4, r18	; 0x04
    3af0:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3af2:	06 80       	ldd	r0, Z+6	; 0x06
    3af4:	f7 81       	ldd	r31, Z+7	; 0x07
    3af6:	e0 2d       	mov	r30, r0
    3af8:	c9 01       	movw	r24, r18
    3afa:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3afc:	ff 91       	pop	r31
    3afe:	ef 91       	pop	r30
    3b00:	bf 91       	pop	r27
    3b02:	af 91       	pop	r26
    3b04:	9f 91       	pop	r25
    3b06:	8f 91       	pop	r24
    3b08:	7f 91       	pop	r23
    3b0a:	6f 91       	pop	r22
    3b0c:	5f 91       	pop	r21
    3b0e:	4f 91       	pop	r20
    3b10:	3f 91       	pop	r19
    3b12:	2f 91       	pop	r18
    3b14:	0f 90       	pop	r0
    3b16:	0b be       	out	0x3b, r0	; 59
    3b18:	0f 90       	pop	r0
    3b1a:	09 be       	out	0x39, r0	; 57
    3b1c:	0f 90       	pop	r0
    3b1e:	08 be       	out	0x38, r0	; 56
    3b20:	0f 90       	pop	r0
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	0f 90       	pop	r0
    3b26:	1f 90       	pop	r1
    3b28:	18 95       	reti

00003b2a <__vector_41>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCB_CH2_vect)
{
    3b2a:	1f 92       	push	r1
    3b2c:	0f 92       	push	r0
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	0f 92       	push	r0
    3b32:	08 b6       	in	r0, 0x38	; 56
    3b34:	0f 92       	push	r0
    3b36:	09 b6       	in	r0, 0x39	; 57
    3b38:	0f 92       	push	r0
    3b3a:	0b b6       	in	r0, 0x3b	; 59
    3b3c:	0f 92       	push	r0
    3b3e:	11 24       	eor	r1, r1
    3b40:	18 be       	out	0x38, r1	; 56
    3b42:	19 be       	out	0x39, r1	; 57
    3b44:	1b be       	out	0x3b, r1	; 59
    3b46:	2f 93       	push	r18
    3b48:	3f 93       	push	r19
    3b4a:	4f 93       	push	r20
    3b4c:	5f 93       	push	r21
    3b4e:	6f 93       	push	r22
    3b50:	7f 93       	push	r23
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	af 93       	push	r26
    3b58:	bf 93       	push	r27
    3b5a:	ef 93       	push	r30
    3b5c:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN2);
    3b5e:	86 e0       	ldi	r24, 0x06	; 6
    3b60:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3b64:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	59 f0       	breq	.+22     	; 0x3b80 <__vector_41+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH2.RES;
    3b6a:	20 91 74 02 	lds	r18, 0x0274
    3b6e:	30 91 75 02 	lds	r19, 0x0275
    3b72:	24 83       	std	Z+4, r18	; 0x04
    3b74:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3b76:	06 80       	ldd	r0, Z+6	; 0x06
    3b78:	f7 81       	ldd	r31, Z+7	; 0x07
    3b7a:	e0 2d       	mov	r30, r0
    3b7c:	c9 01       	movw	r24, r18
    3b7e:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3b80:	ff 91       	pop	r31
    3b82:	ef 91       	pop	r30
    3b84:	bf 91       	pop	r27
    3b86:	af 91       	pop	r26
    3b88:	9f 91       	pop	r25
    3b8a:	8f 91       	pop	r24
    3b8c:	7f 91       	pop	r23
    3b8e:	6f 91       	pop	r22
    3b90:	5f 91       	pop	r21
    3b92:	4f 91       	pop	r20
    3b94:	3f 91       	pop	r19
    3b96:	2f 91       	pop	r18
    3b98:	0f 90       	pop	r0
    3b9a:	0b be       	out	0x3b, r0	; 59
    3b9c:	0f 90       	pop	r0
    3b9e:	09 be       	out	0x39, r0	; 57
    3ba0:	0f 90       	pop	r0
    3ba2:	08 be       	out	0x38, r0	; 56
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	0f 90       	pop	r0
    3baa:	1f 90       	pop	r1
    3bac:	18 95       	reti

00003bae <__vector_40>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCB_CH1_vect)
{
    3bae:	1f 92       	push	r1
    3bb0:	0f 92       	push	r0
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	0f 92       	push	r0
    3bb6:	08 b6       	in	r0, 0x38	; 56
    3bb8:	0f 92       	push	r0
    3bba:	09 b6       	in	r0, 0x39	; 57
    3bbc:	0f 92       	push	r0
    3bbe:	0b b6       	in	r0, 0x3b	; 59
    3bc0:	0f 92       	push	r0
    3bc2:	11 24       	eor	r1, r1
    3bc4:	18 be       	out	0x38, r1	; 56
    3bc6:	19 be       	out	0x39, r1	; 57
    3bc8:	1b be       	out	0x3b, r1	; 59
    3bca:	2f 93       	push	r18
    3bcc:	3f 93       	push	r19
    3bce:	4f 93       	push	r20
    3bd0:	5f 93       	push	r21
    3bd2:	6f 93       	push	r22
    3bd4:	7f 93       	push	r23
    3bd6:	8f 93       	push	r24
    3bd8:	9f 93       	push	r25
    3bda:	af 93       	push	r26
    3bdc:	bf 93       	push	r27
    3bde:	ef 93       	push	r30
    3be0:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN1);
    3be2:	85 e0       	ldi	r24, 0x05	; 5
    3be4:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3be8:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	59 f0       	breq	.+22     	; 0x3c04 <__vector_40+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH1.RES;
    3bee:	20 91 6c 02 	lds	r18, 0x026C
    3bf2:	30 91 6d 02 	lds	r19, 0x026D
    3bf6:	24 83       	std	Z+4, r18	; 0x04
    3bf8:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3bfa:	06 80       	ldd	r0, Z+6	; 0x06
    3bfc:	f7 81       	ldd	r31, Z+7	; 0x07
    3bfe:	e0 2d       	mov	r30, r0
    3c00:	c9 01       	movw	r24, r18
    3c02:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3c04:	ff 91       	pop	r31
    3c06:	ef 91       	pop	r30
    3c08:	bf 91       	pop	r27
    3c0a:	af 91       	pop	r26
    3c0c:	9f 91       	pop	r25
    3c0e:	8f 91       	pop	r24
    3c10:	7f 91       	pop	r23
    3c12:	6f 91       	pop	r22
    3c14:	5f 91       	pop	r21
    3c16:	4f 91       	pop	r20
    3c18:	3f 91       	pop	r19
    3c1a:	2f 91       	pop	r18
    3c1c:	0f 90       	pop	r0
    3c1e:	0b be       	out	0x3b, r0	; 59
    3c20:	0f 90       	pop	r0
    3c22:	09 be       	out	0x39, r0	; 57
    3c24:	0f 90       	pop	r0
    3c26:	08 be       	out	0x38, r0	; 56
    3c28:	0f 90       	pop	r0
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	0f 90       	pop	r0
    3c2e:	1f 90       	pop	r1
    3c30:	18 95       	reti

00003c32 <__vector_39>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCB_CH0_vect)
{
    3c32:	1f 92       	push	r1
    3c34:	0f 92       	push	r0
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	0f 92       	push	r0
    3c3a:	08 b6       	in	r0, 0x38	; 56
    3c3c:	0f 92       	push	r0
    3c3e:	09 b6       	in	r0, 0x39	; 57
    3c40:	0f 92       	push	r0
    3c42:	0b b6       	in	r0, 0x3b	; 59
    3c44:	0f 92       	push	r0
    3c46:	11 24       	eor	r1, r1
    3c48:	18 be       	out	0x38, r1	; 56
    3c4a:	19 be       	out	0x39, r1	; 57
    3c4c:	1b be       	out	0x3b, r1	; 59
    3c4e:	2f 93       	push	r18
    3c50:	3f 93       	push	r19
    3c52:	4f 93       	push	r20
    3c54:	5f 93       	push	r21
    3c56:	6f 93       	push	r22
    3c58:	7f 93       	push	r23
    3c5a:	8f 93       	push	r24
    3c5c:	9f 93       	push	r25
    3c5e:	af 93       	push	r26
    3c60:	bf 93       	push	r27
    3c62:	ef 93       	push	r30
    3c64:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC2_CHAN0);
    3c66:	84 e0       	ldi	r24, 0x04	; 4
    3c68:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3c6c:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3c6e:	00 97       	sbiw	r24, 0x00	; 0
    3c70:	59 f0       	breq	.+22     	; 0x3c88 <__vector_39+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCB.CH0.RES;
    3c72:	20 91 64 02 	lds	r18, 0x0264
    3c76:	30 91 65 02 	lds	r19, 0x0265
    3c7a:	24 83       	std	Z+4, r18	; 0x04
    3c7c:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3c7e:	06 80       	ldd	r0, Z+6	; 0x06
    3c80:	f7 81       	ldd	r31, Z+7	; 0x07
    3c82:	e0 2d       	mov	r30, r0
    3c84:	c9 01       	movw	r24, r18
    3c86:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3c88:	ff 91       	pop	r31
    3c8a:	ef 91       	pop	r30
    3c8c:	bf 91       	pop	r27
    3c8e:	af 91       	pop	r26
    3c90:	9f 91       	pop	r25
    3c92:	8f 91       	pop	r24
    3c94:	7f 91       	pop	r23
    3c96:	6f 91       	pop	r22
    3c98:	5f 91       	pop	r21
    3c9a:	4f 91       	pop	r20
    3c9c:	3f 91       	pop	r19
    3c9e:	2f 91       	pop	r18
    3ca0:	0f 90       	pop	r0
    3ca2:	0b be       	out	0x3b, r0	; 59
    3ca4:	0f 90       	pop	r0
    3ca6:	09 be       	out	0x39, r0	; 57
    3ca8:	0f 90       	pop	r0
    3caa:	08 be       	out	0x38, r0	; 56
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <__vector_74>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCA_CH3_vect)
{
    3cb6:	1f 92       	push	r1
    3cb8:	0f 92       	push	r0
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	0f 92       	push	r0
    3cbe:	08 b6       	in	r0, 0x38	; 56
    3cc0:	0f 92       	push	r0
    3cc2:	09 b6       	in	r0, 0x39	; 57
    3cc4:	0f 92       	push	r0
    3cc6:	0b b6       	in	r0, 0x3b	; 59
    3cc8:	0f 92       	push	r0
    3cca:	11 24       	eor	r1, r1
    3ccc:	18 be       	out	0x38, r1	; 56
    3cce:	19 be       	out	0x39, r1	; 57
    3cd0:	1b be       	out	0x3b, r1	; 59
    3cd2:	2f 93       	push	r18
    3cd4:	3f 93       	push	r19
    3cd6:	4f 93       	push	r20
    3cd8:	5f 93       	push	r21
    3cda:	6f 93       	push	r22
    3cdc:	7f 93       	push	r23
    3cde:	8f 93       	push	r24
    3ce0:	9f 93       	push	r25
    3ce2:	af 93       	push	r26
    3ce4:	bf 93       	push	r27
    3ce6:	ef 93       	push	r30
    3ce8:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN3);
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3cf0:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	59 f0       	breq	.+22     	; 0x3d0c <__vector_74+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH3.RES;
    3cf6:	20 91 3c 02 	lds	r18, 0x023C
    3cfa:	30 91 3d 02 	lds	r19, 0x023D
    3cfe:	24 83       	std	Z+4, r18	; 0x04
    3d00:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3d02:	06 80       	ldd	r0, Z+6	; 0x06
    3d04:	f7 81       	ldd	r31, Z+7	; 0x07
    3d06:	e0 2d       	mov	r30, r0
    3d08:	c9 01       	movw	r24, r18
    3d0a:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3d0c:	ff 91       	pop	r31
    3d0e:	ef 91       	pop	r30
    3d10:	bf 91       	pop	r27
    3d12:	af 91       	pop	r26
    3d14:	9f 91       	pop	r25
    3d16:	8f 91       	pop	r24
    3d18:	7f 91       	pop	r23
    3d1a:	6f 91       	pop	r22
    3d1c:	5f 91       	pop	r21
    3d1e:	4f 91       	pop	r20
    3d20:	3f 91       	pop	r19
    3d22:	2f 91       	pop	r18
    3d24:	0f 90       	pop	r0
    3d26:	0b be       	out	0x3b, r0	; 59
    3d28:	0f 90       	pop	r0
    3d2a:	09 be       	out	0x39, r0	; 57
    3d2c:	0f 90       	pop	r0
    3d2e:	08 be       	out	0x38, r0	; 56
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	0f 90       	pop	r0
    3d36:	1f 90       	pop	r1
    3d38:	18 95       	reti

00003d3a <__vector_73>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCA_CH2_vect)
{
    3d3a:	1f 92       	push	r1
    3d3c:	0f 92       	push	r0
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	0f 92       	push	r0
    3d42:	08 b6       	in	r0, 0x38	; 56
    3d44:	0f 92       	push	r0
    3d46:	09 b6       	in	r0, 0x39	; 57
    3d48:	0f 92       	push	r0
    3d4a:	0b b6       	in	r0, 0x3b	; 59
    3d4c:	0f 92       	push	r0
    3d4e:	11 24       	eor	r1, r1
    3d50:	18 be       	out	0x38, r1	; 56
    3d52:	19 be       	out	0x39, r1	; 57
    3d54:	1b be       	out	0x3b, r1	; 59
    3d56:	2f 93       	push	r18
    3d58:	3f 93       	push	r19
    3d5a:	4f 93       	push	r20
    3d5c:	5f 93       	push	r21
    3d5e:	6f 93       	push	r22
    3d60:	7f 93       	push	r23
    3d62:	8f 93       	push	r24
    3d64:	9f 93       	push	r25
    3d66:	af 93       	push	r26
    3d68:	bf 93       	push	r27
    3d6a:	ef 93       	push	r30
    3d6c:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN2);
    3d6e:	82 e0       	ldi	r24, 0x02	; 2
    3d70:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3d74:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3d76:	00 97       	sbiw	r24, 0x00	; 0
    3d78:	59 f0       	breq	.+22     	; 0x3d90 <__vector_73+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH2.RES;
    3d7a:	20 91 34 02 	lds	r18, 0x0234
    3d7e:	30 91 35 02 	lds	r19, 0x0235
    3d82:	24 83       	std	Z+4, r18	; 0x04
    3d84:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3d86:	06 80       	ldd	r0, Z+6	; 0x06
    3d88:	f7 81       	ldd	r31, Z+7	; 0x07
    3d8a:	e0 2d       	mov	r30, r0
    3d8c:	c9 01       	movw	r24, r18
    3d8e:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3d90:	ff 91       	pop	r31
    3d92:	ef 91       	pop	r30
    3d94:	bf 91       	pop	r27
    3d96:	af 91       	pop	r26
    3d98:	9f 91       	pop	r25
    3d9a:	8f 91       	pop	r24
    3d9c:	7f 91       	pop	r23
    3d9e:	6f 91       	pop	r22
    3da0:	5f 91       	pop	r21
    3da2:	4f 91       	pop	r20
    3da4:	3f 91       	pop	r19
    3da6:	2f 91       	pop	r18
    3da8:	0f 90       	pop	r0
    3daa:	0b be       	out	0x3b, r0	; 59
    3dac:	0f 90       	pop	r0
    3dae:	09 be       	out	0x39, r0	; 57
    3db0:	0f 90       	pop	r0
    3db2:	08 be       	out	0x38, r0	; 56
    3db4:	0f 90       	pop	r0
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	0f 90       	pop	r0
    3dba:	1f 90       	pop	r1
    3dbc:	18 95       	reti

00003dbe <__vector_72>:
   }/*End if( pt_element != NULL)*/

}

ISR( ADCA_CH1_vect)
{
    3dbe:	1f 92       	push	r1
    3dc0:	0f 92       	push	r0
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	0f 92       	push	r0
    3dc6:	08 b6       	in	r0, 0x38	; 56
    3dc8:	0f 92       	push	r0
    3dca:	09 b6       	in	r0, 0x39	; 57
    3dcc:	0f 92       	push	r0
    3dce:	0b b6       	in	r0, 0x3b	; 59
    3dd0:	0f 92       	push	r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	18 be       	out	0x38, r1	; 56
    3dd6:	19 be       	out	0x39, r1	; 57
    3dd8:	1b be       	out	0x3b, r1	; 59
    3dda:	2f 93       	push	r18
    3ddc:	3f 93       	push	r19
    3dde:	4f 93       	push	r20
    3de0:	5f 93       	push	r21
    3de2:	6f 93       	push	r22
    3de4:	7f 93       	push	r23
    3de6:	8f 93       	push	r24
    3de8:	9f 93       	push	r25
    3dea:	af 93       	push	r26
    3dec:	bf 93       	push	r27
    3dee:	ef 93       	push	r30
    3df0:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN1);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3df8:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	59 f0       	breq	.+22     	; 0x3e14 <__vector_72+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH1.RES;
    3dfe:	20 91 2c 02 	lds	r18, 0x022C
    3e02:	30 91 2d 02 	lds	r19, 0x022D
    3e06:	24 83       	std	Z+4, r18	; 0x04
    3e08:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3e0a:	06 80       	ldd	r0, Z+6	; 0x06
    3e0c:	f7 81       	ldd	r31, Z+7	; 0x07
    3e0e:	e0 2d       	mov	r30, r0
    3e10:	c9 01       	movw	r24, r18
    3e12:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3e14:	ff 91       	pop	r31
    3e16:	ef 91       	pop	r30
    3e18:	bf 91       	pop	r27
    3e1a:	af 91       	pop	r26
    3e1c:	9f 91       	pop	r25
    3e1e:	8f 91       	pop	r24
    3e20:	7f 91       	pop	r23
    3e22:	6f 91       	pop	r22
    3e24:	5f 91       	pop	r21
    3e26:	4f 91       	pop	r20
    3e28:	3f 91       	pop	r19
    3e2a:	2f 91       	pop	r18
    3e2c:	0f 90       	pop	r0
    3e2e:	0b be       	out	0x3b, r0	; 59
    3e30:	0f 90       	pop	r0
    3e32:	09 be       	out	0x39, r0	; 57
    3e34:	0f 90       	pop	r0
    3e36:	08 be       	out	0x38, r0	; 56
    3e38:	0f 90       	pop	r0
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	0f 90       	pop	r0
    3e3e:	1f 90       	pop	r1
    3e40:	18 95       	reti

00003e42 <__vector_71>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
ISR( ADCA_CH0_vect)
{
    3e42:	1f 92       	push	r1
    3e44:	0f 92       	push	r0
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	0f 92       	push	r0
    3e4a:	08 b6       	in	r0, 0x38	; 56
    3e4c:	0f 92       	push	r0
    3e4e:	09 b6       	in	r0, 0x39	; 57
    3e50:	0f 92       	push	r0
    3e52:	0b b6       	in	r0, 0x3b	; 59
    3e54:	0f 92       	push	r0
    3e56:	11 24       	eor	r1, r1
    3e58:	18 be       	out	0x38, r1	; 56
    3e5a:	19 be       	out	0x39, r1	; 57
    3e5c:	1b be       	out	0x3b, r1	; 59
    3e5e:	2f 93       	push	r18
    3e60:	3f 93       	push	r19
    3e62:	4f 93       	push	r20
    3e64:	5f 93       	push	r21
    3e66:	6f 93       	push	r22
    3e68:	7f 93       	push	r23
    3e6a:	8f 93       	push	r24
    3e6c:	9f 93       	push	r25
    3e6e:	af 93       	push	r26
    3e70:	bf 93       	push	r27
    3e72:	ef 93       	push	r30
    3e74:	ff 93       	push	r31
   t_chanHandle *pt_element = NULL;

   pt_element = adc_findChannelElement( ADC1_CHAN0);
    3e76:	80 e0       	ldi	r24, 0x00	; 0
    3e78:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <adc_findChannelElement>
    3e7c:	fc 01       	movw	r30, r24
   if( pt_element != NULL)
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	59 f0       	breq	.+22     	; 0x3e98 <__vector_71+0x56>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       pt_element->s_adcSample = ADCA.CH0.RES;
    3e82:	20 91 24 02 	lds	r18, 0x0224
    3e86:	30 91 25 02 	lds	r19, 0x0225
    3e8a:	24 83       	std	Z+4, r18	; 0x04
    3e8c:	35 83       	std	Z+5, r19	; 0x05
       pt_element->pf_funPtr( pt_element->s_adcSample);
    3e8e:	06 80       	ldd	r0, Z+6	; 0x06
    3e90:	f7 81       	ldd	r31, Z+7	; 0x07
    3e92:	e0 2d       	mov	r30, r0
    3e94:	c9 01       	movw	r24, r18
    3e96:	19 95       	eicall

   }/*End if( pt_element != NULL)*/

}
    3e98:	ff 91       	pop	r31
    3e9a:	ef 91       	pop	r30
    3e9c:	bf 91       	pop	r27
    3e9e:	af 91       	pop	r26
    3ea0:	9f 91       	pop	r25
    3ea2:	8f 91       	pop	r24
    3ea4:	7f 91       	pop	r23
    3ea6:	6f 91       	pop	r22
    3ea8:	5f 91       	pop	r21
    3eaa:	4f 91       	pop	r20
    3eac:	3f 91       	pop	r19
    3eae:	2f 91       	pop	r18
    3eb0:	0f 90       	pop	r0
    3eb2:	0b be       	out	0x3b, r0	; 59
    3eb4:	0f 90       	pop	r0
    3eb6:	09 be       	out	0x39, r0	; 57
    3eb8:	0f 90       	pop	r0
    3eba:	08 be       	out	0x38, r0	; 56
    3ebc:	0f 90       	pop	r0
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	0f 90       	pop	r0
    3ec2:	1f 90       	pop	r1
    3ec4:	18 95       	reti

00003ec6 <hal_getCpuFreq>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
uint32_t hal_getCpuFreq( void)
{
    3ec6:	60 91 b7 25 	lds	r22, 0x25B7
    3eca:	70 91 b8 25 	lds	r23, 0x25B8
   return gt_clocks.i_cpuClock;
}
    3ece:	80 91 b9 25 	lds	r24, 0x25B9
    3ed2:	90 91 ba 25 	lds	r25, 0x25BA
    3ed6:	08 95       	ret

00003ed8 <hal_setCpuFreq>:

t_clocksError hal_setCpuFreq( uint32_t i_clockRate)
{
    3ed8:	9b 01       	movw	r18, r22
    3eda:	ac 01       	movw	r20, r24
   /*------------------------------------------------------------------------*  
    * Enable internal 32 MHz ring oscillator and wait until it's stable.
    *------------------------------------------------------------------------*/   
   OSC.CTRL   = OSC_RC32MEN_bm; 
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	80 93 50 00 	sts	0x0050, r24
   
   CCP        = CCP_IOREG_gc;
    3ee2:	88 ed       	ldi	r24, 0xD8	; 216
    3ee4:	84 bf       	out	0x34, r24	; 52
   CLK.PSCTRL = CLK_PSADIV_1_gc;
    3ee6:	e0 e4       	ldi	r30, 0x40	; 64
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	11 82       	std	Z+1, r1	; 0x01
   CLK.PSCTRL |= CLK_PSBCDIV_1_1_gc;
    3eec:	80 91 41 00 	lds	r24, 0x0041
    3ef0:	81 83       	std	Z+1, r24	; 0x01

   while ( (OSC.STATUS & OSC_RC32MRDY_bm ) == 0);
    3ef2:	80 91 51 00 	lds	r24, 0x0051
    3ef6:	81 ff       	sbrs	r24, 1
    3ef8:	fc cf       	rjmp	.-8      	; 0x3ef2 <hal_setCpuFreq+0x1a>

   CCP      = CCP_IOREG_gc;
    3efa:	88 ed       	ldi	r24, 0xD8	; 216
    3efc:	84 bf       	out	0x34, r24	; 52
   CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	80 93 40 00 	sts	0x0040, r24
   OSC.CTRL &= ~OSC_RC2MEN_bm;
    3f04:	80 91 50 00 	lds	r24, 0x0050
    3f08:	8e 7f       	andi	r24, 0xFE	; 254
    3f0a:	80 93 50 00 	sts	0x0050, r24

   gt_clocks.i_cpuClock = i_clockRate;
    3f0e:	20 93 b7 25 	sts	0x25B7, r18
    3f12:	30 93 b8 25 	sts	0x25B8, r19
    3f16:	40 93 b9 25 	sts	0x25B9, r20
    3f1a:	50 93 ba 25 	sts	0x25BA, r21

   return CLOCKS_PASSED;

}/*End hal_setCpuFreq*/
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	08 95       	ret

00003f22 <findDmaIntElement>:
   return DMA_PASSED;

}/*End hal_configureDmaController*/

static t_dmaIntHndl *findDmaIntElement( t_dmaIntId t_id)
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	0f 92       	push	r0
    3f28:	0f 92       	push	r0
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    3f30:	e0 91 9a 20 	lds	r30, 0x209A
    3f34:	f0 91 9b 20 	lds	r31, 0x209B
    3f38:	22 81       	ldd	r18, Z+2	; 0x02
    3f3a:	33 81       	ldd	r19, Z+3	; 0x03
    3f3c:	e0 91 9a 20 	lds	r30, 0x209A
    3f40:	f0 91 9b 20 	lds	r31, 0x209B
    3f44:	0c c0       	rjmp	.+24     	; 0x3f5e <findDmaIntElement+0x3c>
   {
      pt_element = (t_dmaIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    3f46:	e9 81       	ldd	r30, Y+1	; 0x01
    3f48:	fa 81       	ldd	r31, Y+2	; 0x02
    3f4a:	01 90       	ld	r0, Z+
    3f4c:	f0 81       	ld	r31, Z
    3f4e:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    3f50:	80 81       	ld	r24, Z
    3f52:	84 17       	cp	r24, r20
    3f54:	69 f0       	breq	.+26     	; 0x3f70 <findDmaIntElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    3f56:	21 50       	subi	r18, 0x01	; 1
    3f58:	30 40       	sbci	r19, 0x00	; 0
    3f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f5e:	80 85       	ldd	r24, Z+8	; 0x08
    3f60:	91 85       	ldd	r25, Z+9	; 0x09
    3f62:	89 83       	std	Y+1, r24	; 0x01
    3f64:	9a 83       	std	Y+2, r25	; 0x02
    3f66:	12 16       	cp	r1, r18
    3f68:	13 06       	cpc	r1, r19
    3f6a:	6c f3       	brlt	.-38     	; 0x3f46 <findDmaIntElement+0x24>
    3f6c:	e0 e0       	ldi	r30, 0x00	; 0
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open DMA
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End findDmaIntElement*/
    3f70:	cf 01       	movw	r24, r30
    3f72:	0f 90       	pop	r0
    3f74:	0f 90       	pop	r0
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	08 95       	ret

00003f7c <__vector_9>:
   }

}/*End ISR( DMA_CH2_vect)*/

ISR( DMA_CH3_vect)
{
    3f7c:	1f 92       	push	r1
    3f7e:	0f 92       	push	r0
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	0f 92       	push	r0
    3f84:	08 b6       	in	r0, 0x38	; 56
    3f86:	0f 92       	push	r0
    3f88:	09 b6       	in	r0, 0x39	; 57
    3f8a:	0f 92       	push	r0
    3f8c:	0b b6       	in	r0, 0x3b	; 59
    3f8e:	0f 92       	push	r0
    3f90:	11 24       	eor	r1, r1
    3f92:	18 be       	out	0x38, r1	; 56
    3f94:	19 be       	out	0x39, r1	; 57
    3f96:	1b be       	out	0x3b, r1	; 59
    3f98:	2f 93       	push	r18
    3f9a:	3f 93       	push	r19
    3f9c:	4f 93       	push	r20
    3f9e:	5f 93       	push	r21
    3fa0:	6f 93       	push	r22
    3fa2:	7f 93       	push	r23
    3fa4:	8f 93       	push	r24
    3fa6:	9f 93       	push	r25
    3fa8:	af 93       	push	r26
    3faa:	bf 93       	push	r27
    3fac:	ef 93       	push	r30
    3fae:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH3.CTRLB & DMA_CH_ERRIF_bm)
    3fb0:	80 91 41 01 	lds	r24, 0x0141
    3fb4:	85 ff       	sbrs	r24, 5
    3fb6:	07 c0       	rjmp	.+14     	; 0x3fc6 <__vector_9+0x4a>
   {
      DMA.CH3.CTRLB |= DMA_CH_ERRIF_bm;
    3fb8:	80 91 41 01 	lds	r24, 0x0141
    3fbc:	80 62       	ori	r24, 0x20	; 32
    3fbe:	80 93 41 01 	sts	0x0141, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN3_TR_ERROR);
    3fc2:	87 e0       	ldi	r24, 0x07	; 7
    3fc4:	06 c0       	rjmp	.+12     	; 0x3fd2 <__vector_9+0x56>
   }
   else
   {
      DMA.CH3.CTRLB |= DMA_CH_TRNIF_bm;
    3fc6:	80 91 41 01 	lds	r24, 0x0141
    3fca:	80 61       	ori	r24, 0x10	; 16
    3fcc:	80 93 41 01 	sts	0x0141, r24
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN3_TR_COMP);
    3fd0:	86 e0       	ldi	r24, 0x06	; 6
    3fd2:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <findDmaIntElement>
    3fd6:	fc 01       	movw	r30, r24

   }

   if( pt_iElement != NULL)
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	31 f0       	breq	.+12     	; 0x3fe8 <__vector_9+0x6c>
   {
      if( pt_iElement->pf_funPtr != NULL)
    3fdc:	01 80       	ldd	r0, Z+1	; 0x01
    3fde:	f2 81       	ldd	r31, Z+2	; 0x02
    3fe0:	e0 2d       	mov	r30, r0
    3fe2:	30 97       	sbiw	r30, 0x00	; 0
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <__vector_9+0x6c>
         pt_iElement->pf_funPtr();
    3fe6:	19 95       	eicall
   }

}/*End ISR( DMA_CH3_vect)*/
    3fe8:	ff 91       	pop	r31
    3fea:	ef 91       	pop	r30
    3fec:	bf 91       	pop	r27
    3fee:	af 91       	pop	r26
    3ff0:	9f 91       	pop	r25
    3ff2:	8f 91       	pop	r24
    3ff4:	7f 91       	pop	r23
    3ff6:	6f 91       	pop	r22
    3ff8:	5f 91       	pop	r21
    3ffa:	4f 91       	pop	r20
    3ffc:	3f 91       	pop	r19
    3ffe:	2f 91       	pop	r18
    4000:	0f 90       	pop	r0
    4002:	0b be       	out	0x3b, r0	; 59
    4004:	0f 90       	pop	r0
    4006:	09 be       	out	0x39, r0	; 57
    4008:	0f 90       	pop	r0
    400a:	08 be       	out	0x38, r0	; 56
    400c:	0f 90       	pop	r0
    400e:	0f be       	out	0x3f, r0	; 63
    4010:	0f 90       	pop	r0
    4012:	1f 90       	pop	r1
    4014:	18 95       	reti

00004016 <__vector_8>:
   }

}/*End ISR( DMA_CH1_vect)*/

ISR( DMA_CH2_vect)
{
    4016:	1f 92       	push	r1
    4018:	0f 92       	push	r0
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	0f 92       	push	r0
    401e:	08 b6       	in	r0, 0x38	; 56
    4020:	0f 92       	push	r0
    4022:	09 b6       	in	r0, 0x39	; 57
    4024:	0f 92       	push	r0
    4026:	0b b6       	in	r0, 0x3b	; 59
    4028:	0f 92       	push	r0
    402a:	11 24       	eor	r1, r1
    402c:	18 be       	out	0x38, r1	; 56
    402e:	19 be       	out	0x39, r1	; 57
    4030:	1b be       	out	0x3b, r1	; 59
    4032:	2f 93       	push	r18
    4034:	3f 93       	push	r19
    4036:	4f 93       	push	r20
    4038:	5f 93       	push	r21
    403a:	6f 93       	push	r22
    403c:	7f 93       	push	r23
    403e:	8f 93       	push	r24
    4040:	9f 93       	push	r25
    4042:	af 93       	push	r26
    4044:	bf 93       	push	r27
    4046:	ef 93       	push	r30
    4048:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH2.CTRLB & DMA_CH_ERRIF_bm)
    404a:	e0 e0       	ldi	r30, 0x00	; 0
    404c:	f1 e0       	ldi	r31, 0x01	; 1
    404e:	80 91 31 01 	lds	r24, 0x0131
    4052:	85 ff       	sbrs	r24, 5
    4054:	06 c0       	rjmp	.+12     	; 0x4062 <__vector_8+0x4c>
   {
      DMA.CH2.CTRLB |= DMA_CH_ERRIF_bm;
    4056:	80 91 31 01 	lds	r24, 0x0131
    405a:	80 62       	ori	r24, 0x20	; 32
    405c:	81 ab       	std	Z+49, r24	; 0x31
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN2_TR_ERROR);
    405e:	85 e0       	ldi	r24, 0x05	; 5
    4060:	05 c0       	rjmp	.+10     	; 0x406c <__vector_8+0x56>
   }
   else
   {
      DMA.CH2.CTRLB |= DMA_CH_TRNIF_bm;
    4062:	80 91 31 01 	lds	r24, 0x0131
    4066:	80 61       	ori	r24, 0x10	; 16
    4068:	81 ab       	std	Z+49, r24	; 0x31
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN2_TR_COMP);
    406a:	84 e0       	ldi	r24, 0x04	; 4
    406c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <findDmaIntElement>
    4070:	fc 01       	movw	r30, r24

   }

   if( pt_iElement != NULL)
    4072:	00 97       	sbiw	r24, 0x00	; 0
    4074:	31 f0       	breq	.+12     	; 0x4082 <__vector_8+0x6c>
   {
      if( pt_iElement->pf_funPtr != NULL)
    4076:	01 80       	ldd	r0, Z+1	; 0x01
    4078:	f2 81       	ldd	r31, Z+2	; 0x02
    407a:	e0 2d       	mov	r30, r0
    407c:	30 97       	sbiw	r30, 0x00	; 0
    407e:	09 f0       	breq	.+2      	; 0x4082 <__vector_8+0x6c>
         pt_iElement->pf_funPtr();
    4080:	19 95       	eicall
   }

}/*End ISR( DMA_CH2_vect)*/
    4082:	ff 91       	pop	r31
    4084:	ef 91       	pop	r30
    4086:	bf 91       	pop	r27
    4088:	af 91       	pop	r26
    408a:	9f 91       	pop	r25
    408c:	8f 91       	pop	r24
    408e:	7f 91       	pop	r23
    4090:	6f 91       	pop	r22
    4092:	5f 91       	pop	r21
    4094:	4f 91       	pop	r20
    4096:	3f 91       	pop	r19
    4098:	2f 91       	pop	r18
    409a:	0f 90       	pop	r0
    409c:	0b be       	out	0x3b, r0	; 59
    409e:	0f 90       	pop	r0
    40a0:	09 be       	out	0x39, r0	; 57
    40a2:	0f 90       	pop	r0
    40a4:	08 be       	out	0x38, r0	; 56
    40a6:	0f 90       	pop	r0
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	0f 90       	pop	r0
    40ac:	1f 90       	pop	r1
    40ae:	18 95       	reti

000040b0 <__vector_7>:
   }

}/*End ISR( DMA_CH0_vect)*/

ISR( DMA_CH1_vect)
{
    40b0:	1f 92       	push	r1
    40b2:	0f 92       	push	r0
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	0f 92       	push	r0
    40b8:	08 b6       	in	r0, 0x38	; 56
    40ba:	0f 92       	push	r0
    40bc:	09 b6       	in	r0, 0x39	; 57
    40be:	0f 92       	push	r0
    40c0:	0b b6       	in	r0, 0x3b	; 59
    40c2:	0f 92       	push	r0
    40c4:	11 24       	eor	r1, r1
    40c6:	18 be       	out	0x38, r1	; 56
    40c8:	19 be       	out	0x39, r1	; 57
    40ca:	1b be       	out	0x3b, r1	; 59
    40cc:	2f 93       	push	r18
    40ce:	3f 93       	push	r19
    40d0:	4f 93       	push	r20
    40d2:	5f 93       	push	r21
    40d4:	6f 93       	push	r22
    40d6:	7f 93       	push	r23
    40d8:	8f 93       	push	r24
    40da:	9f 93       	push	r25
    40dc:	af 93       	push	r26
    40de:	bf 93       	push	r27
    40e0:	ef 93       	push	r30
    40e2:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH1.CTRLB & DMA_CH_ERRIF_bm)
    40e4:	e0 e0       	ldi	r30, 0x00	; 0
    40e6:	f1 e0       	ldi	r31, 0x01	; 1
    40e8:	80 91 21 01 	lds	r24, 0x0121
    40ec:	85 ff       	sbrs	r24, 5
    40ee:	06 c0       	rjmp	.+12     	; 0x40fc <__vector_7+0x4c>
   {
      DMA.CH1.CTRLB |= DMA_CH_ERRIF_bm;
    40f0:	80 91 21 01 	lds	r24, 0x0121
    40f4:	80 62       	ori	r24, 0x20	; 32
    40f6:	81 a3       	std	Z+33, r24	; 0x21
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN1_TR_ERROR);
    40f8:	83 e0       	ldi	r24, 0x03	; 3
    40fa:	05 c0       	rjmp	.+10     	; 0x4106 <__vector_7+0x56>
   }
   else
   {
      DMA.CH1.CTRLB |= DMA_CH_TRNIF_bm;
    40fc:	80 91 21 01 	lds	r24, 0x0121
    4100:	80 61       	ori	r24, 0x10	; 16
    4102:	81 a3       	std	Z+33, r24	; 0x21
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN1_TR_COMP);
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <findDmaIntElement>
    410a:	fc 01       	movw	r30, r24

   }

   if( pt_iElement != NULL)
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	31 f0       	breq	.+12     	; 0x411c <__vector_7+0x6c>
   {
      if( pt_iElement->pf_funPtr != NULL)
    4110:	01 80       	ldd	r0, Z+1	; 0x01
    4112:	f2 81       	ldd	r31, Z+2	; 0x02
    4114:	e0 2d       	mov	r30, r0
    4116:	30 97       	sbiw	r30, 0x00	; 0
    4118:	09 f0       	breq	.+2      	; 0x411c <__vector_7+0x6c>
         pt_iElement->pf_funPtr();
    411a:	19 95       	eicall
   }

}/*End ISR( DMA_CH1_vect)*/
    411c:	ff 91       	pop	r31
    411e:	ef 91       	pop	r30
    4120:	bf 91       	pop	r27
    4122:	af 91       	pop	r26
    4124:	9f 91       	pop	r25
    4126:	8f 91       	pop	r24
    4128:	7f 91       	pop	r23
    412a:	6f 91       	pop	r22
    412c:	5f 91       	pop	r21
    412e:	4f 91       	pop	r20
    4130:	3f 91       	pop	r19
    4132:	2f 91       	pop	r18
    4134:	0f 90       	pop	r0
    4136:	0b be       	out	0x3b, r0	; 59
    4138:	0f 90       	pop	r0
    413a:	09 be       	out	0x39, r0	; 57
    413c:	0f 90       	pop	r0
    413e:	08 be       	out	0x38, r0	; 56
    4140:	0f 90       	pop	r0
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	0f 90       	pop	r0
    4146:	1f 90       	pop	r1
    4148:	18 95       	reti

0000414a <__vector_6>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( DMA_CH0_vect)
{
    414a:	1f 92       	push	r1
    414c:	0f 92       	push	r0
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	0f 92       	push	r0
    4152:	08 b6       	in	r0, 0x38	; 56
    4154:	0f 92       	push	r0
    4156:	09 b6       	in	r0, 0x39	; 57
    4158:	0f 92       	push	r0
    415a:	0b b6       	in	r0, 0x3b	; 59
    415c:	0f 92       	push	r0
    415e:	11 24       	eor	r1, r1
    4160:	18 be       	out	0x38, r1	; 56
    4162:	19 be       	out	0x39, r1	; 57
    4164:	1b be       	out	0x3b, r1	; 59
    4166:	2f 93       	push	r18
    4168:	3f 93       	push	r19
    416a:	4f 93       	push	r20
    416c:	5f 93       	push	r21
    416e:	6f 93       	push	r22
    4170:	7f 93       	push	r23
    4172:	8f 93       	push	r24
    4174:	9f 93       	push	r25
    4176:	af 93       	push	r26
    4178:	bf 93       	push	r27
    417a:	ef 93       	push	r30
    417c:	ff 93       	push	r31
   t_dmaIntHndl *pt_iElement;

   if( DMA.CH0.CTRLB & DMA_CH_ERRIF_bm)
    417e:	e0 e0       	ldi	r30, 0x00	; 0
    4180:	f1 e0       	ldi	r31, 0x01	; 1
    4182:	80 91 11 01 	lds	r24, 0x0111
    4186:	85 ff       	sbrs	r24, 5
    4188:	06 c0       	rjmp	.+12     	; 0x4196 <__vector_6+0x4c>
   {
      DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    418a:	80 91 11 01 	lds	r24, 0x0111
    418e:	80 62       	ori	r24, 0x20	; 32
    4190:	81 8b       	std	Z+17, r24	; 0x11
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN0_TR_ERROR);
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	05 c0       	rjmp	.+10     	; 0x41a0 <__vector_6+0x56>
   }
   else
   {
      DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    4196:	80 91 11 01 	lds	r24, 0x0111
    419a:	80 61       	ori	r24, 0x10	; 16
    419c:	81 8b       	std	Z+17, r24	; 0x11
      /*---------------------------------------------------------------------*
       * See if there is a handle on the list for this dma interrupt.
       *---------------------------------------------------------------------*/
      pt_iElement = findDmaIntElement( (uint8_t)DMA_CHAN0_TR_COMP);
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <findDmaIntElement>
    41a4:	fc 01       	movw	r30, r24

   }

   if( pt_iElement != NULL)
    41a6:	00 97       	sbiw	r24, 0x00	; 0
    41a8:	31 f0       	breq	.+12     	; 0x41b6 <__vector_6+0x6c>
   {
      if( pt_iElement->pf_funPtr != NULL)
    41aa:	01 80       	ldd	r0, Z+1	; 0x01
    41ac:	f2 81       	ldd	r31, Z+2	; 0x02
    41ae:	e0 2d       	mov	r30, r0
    41b0:	30 97       	sbiw	r30, 0x00	; 0
    41b2:	09 f0       	breq	.+2      	; 0x41b6 <__vector_6+0x6c>
         pt_iElement->pf_funPtr();
    41b4:	19 95       	eicall
   }

}/*End ISR( DMA_CH0_vect)*/
    41b6:	ff 91       	pop	r31
    41b8:	ef 91       	pop	r30
    41ba:	bf 91       	pop	r27
    41bc:	af 91       	pop	r26
    41be:	9f 91       	pop	r25
    41c0:	8f 91       	pop	r24
    41c2:	7f 91       	pop	r23
    41c4:	6f 91       	pop	r22
    41c6:	5f 91       	pop	r21
    41c8:	4f 91       	pop	r20
    41ca:	3f 91       	pop	r19
    41cc:	2f 91       	pop	r18
    41ce:	0f 90       	pop	r0
    41d0:	0b be       	out	0x3b, r0	; 59
    41d2:	0f 90       	pop	r0
    41d4:	09 be       	out	0x39, r0	; 57
    41d6:	0f 90       	pop	r0
    41d8:	08 be       	out	0x38, r0	; 56
    41da:	0f 90       	pop	r0
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	0f 90       	pop	r0
    41e0:	1f 90       	pop	r1
    41e2:	18 95       	reti

000041e4 <hal_getDmaTransferCount>:
   return s_status;

}/*End hal_getDmaStatus*/

uint16_t hal_getDmaTransferCount( t_DMAHNDL t_handle)
{
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	0f 92       	push	r0
    41ea:	0f 92       	push	r0
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	9a 83       	std	Y+2, r25	; 0x02
   uint16_t s_count = 0;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    41f4:	e9 81       	ldd	r30, Y+1	; 0x01
    41f6:	fa 81       	ldd	r31, Y+2	; 0x02
    41f8:	20 91 8c 20 	lds	r18, 0x208C
    41fc:	30 91 8d 20 	lds	r19, 0x208D
    4200:	84 81       	ldd	r24, Z+4	; 0x04
    4202:	95 81       	ldd	r25, Z+5	; 0x05
    4204:	82 17       	cp	r24, r18
    4206:	93 07       	cpc	r25, r19
    4208:	19 f0       	breq	.+6      	; 0x4210 <hal_getDmaTransferCount+0x2c>
    420a:	2e ef       	ldi	r18, 0xFE	; 254
    420c:	3f ef       	ldi	r19, 0xFF	; 255
    420e:	0a c0       	rjmp	.+20     	; 0x4224 <hal_getDmaTransferCount+0x40>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    4210:	e9 81       	ldd	r30, Y+1	; 0x01
    4212:	fa 81       	ldd	r31, Y+2	; 0x02
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      s_count = pt_dElement->pt_dma->TRFCNT;
    4214:	01 90       	ld	r0, Z+
    4216:	f0 81       	ld	r31, Z
    4218:	e0 2d       	mov	r30, r0
    421a:	03 80       	ldd	r0, Z+3	; 0x03
    421c:	f4 81       	ldd	r31, Z+4	; 0x04
    421e:	e0 2d       	mov	r30, r0
    4220:	24 81       	ldd	r18, Z+4	; 0x04
    4222:	35 81       	ldd	r19, Z+5	; 0x05

   }

   return s_count;

}/*End hal_getDmaTransferCount*/
    4224:	c9 01       	movw	r24, r18
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	cf 91       	pop	r28
    422c:	df 91       	pop	r29
    422e:	08 95       	ret

00004230 <hal_configureDmaChannel>:

t_dmaError hal_configureDmaChannel( t_DMAHNDL t_handle,
                                    t_dmaChanConfig t_conf)
{
    4230:	af 92       	push	r10
    4232:	bf 92       	push	r11
    4234:	cf 92       	push	r12
    4236:	df 92       	push	r13
    4238:	ef 92       	push	r14
    423a:	ff 92       	push	r15
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	df 93       	push	r29
    4242:	cf 93       	push	r28
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	61 97       	sbiw	r28, 0x11	; 17
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	8a 83       	std	Y+2, r24	; 0x02
    4250:	9b 83       	std	Y+3, r25	; 0x03
    4252:	ac 82       	std	Y+4, r10	; 0x04
    4254:	bd 82       	std	Y+5, r11	; 0x05
    4256:	ce 82       	std	Y+6, r12	; 0x06
    4258:	df 82       	std	Y+7, r13	; 0x07
    425a:	e8 86       	std	Y+8, r14	; 0x08
    425c:	f9 86       	std	Y+9, r15	; 0x09
    425e:	0a 87       	std	Y+10, r16	; 0x0a
    4260:	1b 87       	std	Y+11, r17	; 0x0b
    4262:	2c 87       	std	Y+12, r18	; 0x0c
    4264:	3d 87       	std	Y+13, r19	; 0x0d
    4266:	4e 87       	std	Y+14, r20	; 0x0e
    4268:	5f 87       	std	Y+15, r21	; 0x0f
    426a:	68 8b       	std	Y+16, r22	; 0x10
    426c:	79 8b       	std	Y+17, r23	; 0x11

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    426e:	8f b7       	in	r24, 0x3f	; 63
    4270:	89 83       	std	Y+1, r24	; 0x01
    4272:	f8 94       	cli

   if( (t_conf.t_srcAddDir < FIXED) || (t_conf.t_srcAddDir >
    4274:	88 85       	ldd	r24, Y+8	; 0x08
    4276:	83 30       	cpi	r24, 0x03	; 3
    4278:	18 f4       	brcc	.+6      	; 0x4280 <hal_configureDmaChannel+0x50>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return DMA_INVALID_ADDRESS_MODE;
   }

   if( (t_conf.t_destAddDir< FIXED) || (t_conf.t_destAddDir >
    427a:	89 85       	ldd	r24, Y+9	; 0x09
    427c:	83 30       	cpi	r24, 0x03	; 3
    427e:	20 f0       	brcs	.+8      	; 0x4288 <hal_configureDmaChannel+0x58>
   DECREMENT))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	8f bf       	out	0x3f, r24	; 63
    4284:	86 ef       	ldi	r24, 0xF6	; 246
    4286:	09 c1       	rjmp	.+530    	; 0x449a <hal_configureDmaChannel+0x26a>
      return DMA_INVALID_ADDRESS_MODE;
   }

   if( (t_conf.t_srcAddReload < NO_RELOAD) || (t_conf.t_srcAddReload >
    4288:	8a 85       	ldd	r24, Y+10	; 0x0a
    428a:	84 30       	cpi	r24, 0x04	; 4
    428c:	18 f4       	brcc	.+6      	; 0x4294 <hal_configureDmaChannel+0x64>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return DMA_INVALID_ADD_RELOAD_MODE;
   }

   if( (t_conf.t_destAddReload < NO_RELOAD) || (t_conf.t_destAddReload >
    428e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4290:	84 30       	cpi	r24, 0x04	; 4
    4292:	20 f0       	brcs	.+8      	; 0x429c <hal_configureDmaChannel+0x6c>
   RELOAD_END_OF_TRANSACTION))
   {
      HAL_END_CRITICAL();//Enable interrupts
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	8f bf       	out	0x3f, r24	; 63
    4298:	85 ef       	ldi	r24, 0xF5	; 245
    429a:	ff c0       	rjmp	.+510    	; 0x449a <hal_configureDmaChannel+0x26a>
      return DMA_INVALID_ADD_RELOAD_MODE;
   }

   if( t_conf.s_blockSize == 0)
    429c:	8c 85       	ldd	r24, Y+12	; 0x0c
    429e:	9d 85       	ldd	r25, Y+13	; 0x0d
    42a0:	89 2b       	or	r24, r25
    42a2:	21 f4       	brne	.+8      	; 0x42ac <hal_configureDmaChannel+0x7c>
   {
      HAL_END_CRITICAL();//Enable interrupts
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	8f bf       	out	0x3f, r24	; 63
    42a8:	84 ef       	ldi	r24, 0xF4	; 244
    42aa:	f7 c0       	rjmp	.+494    	; 0x449a <hal_configureDmaChannel+0x26a>
      return DMA_INVALID_BLOCK_SIZE;
   }

   if( (t_conf.t_burstMode < ONE_BYTE) || (t_conf.t_burstMode >
    42ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    42ae:	84 30       	cpi	r24, 0x04	; 4
    42b0:	20 f0       	brcs	.+8      	; 0x42ba <hal_configureDmaChannel+0x8a>
   EIGHT_BYTE))
   {
      HAL_END_CRITICAL();//Enable interrupts
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	8f bf       	out	0x3f, r24	; 63
    42b6:	83 ef       	ldi	r24, 0xF3	; 243
    42b8:	f0 c0       	rjmp	.+480    	; 0x449a <hal_configureDmaChannel+0x26a>
      return DMA_INVALID_BURST_MODE;
   }

   if( (t_conf.t_transferType < BLOCK) || (t_conf.t_transferType >
    42ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    42bc:	82 30       	cpi	r24, 0x02	; 2
    42be:	20 f0       	brcs	.+8      	; 0x42c8 <hal_configureDmaChannel+0x98>
   SINGLE_SHOT))
   {
      HAL_END_CRITICAL();//Enable interrupts
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	8f bf       	out	0x3f, r24	; 63
    42c4:	82 ef       	ldi	r24, 0xF2	; 242
    42c6:	e9 c0       	rjmp	.+466    	; 0x449a <hal_configureDmaChannel+0x26a>
      return DMA_INVALID_TRANSFER_TYPE;
   }

   if( (t_conf.t_triggerSrc < SOFTWARE) || (t_conf.t_triggerSrc >
    42c8:	88 89       	ldd	r24, Y+16	; 0x10
    42ca:	80 3b       	cpi	r24, 0xB0	; 176
    42cc:	20 f0       	brcs	.+8      	; 0x42d6 <hal_configureDmaChannel+0xa6>
   UART8_DATA_REG_EMPTY))
   {
      HAL_END_CRITICAL();//Enable interrupts
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	8f bf       	out	0x3f, r24	; 63
    42d2:	81 ef       	ldi	r24, 0xF1	; 241
    42d4:	e2 c0       	rjmp	.+452    	; 0x449a <hal_configureDmaChannel+0x26a>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    42d6:	ea 81       	ldd	r30, Y+2	; 0x02
    42d8:	fb 81       	ldd	r31, Y+3	; 0x03
    42da:	20 91 8c 20 	lds	r18, 0x208C
    42de:	30 91 8d 20 	lds	r19, 0x208D
    42e2:	84 81       	ldd	r24, Z+4	; 0x04
    42e4:	95 81       	ldd	r25, Z+5	; 0x05
    42e6:	82 17       	cp	r24, r18
    42e8:	93 07       	cpc	r25, r19
    42ea:	21 f0       	breq	.+8      	; 0x42f4 <hal_configureDmaChannel+0xc4>
   {
      HAL_END_CRITICAL();//Enable interrupts
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	8f bf       	out	0x3f, r24	; 63
    42f0:	8e ef       	ldi	r24, 0xFE	; 254
    42f2:	d3 c0       	rjmp	.+422    	; 0x449a <hal_configureDmaChannel+0x26a>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    42f4:	ea 81       	ldd	r30, Y+2	; 0x02
    42f6:	fb 81       	ldd	r31, Y+3	; 0x03
    42f8:	a0 81       	ld	r26, Z
    42fa:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    42fc:	13 96       	adiw	r26, 0x03	; 3
    42fe:	ed 91       	ld	r30, X+
    4300:	fc 91       	ld	r31, X
    4302:	14 97       	sbiw	r26, 0x04	; 4
    4304:	80 81       	ld	r24, Z
    4306:	8f 77       	andi	r24, 0x7F	; 127
    4308:	80 83       	st	Z, r24
      pc_dst = (int8_t *)&t_conf.pi_destAddress;

      /*---------------------------------------------------------------------*
       * Apply configuration
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->SRCADDR0 = (uint16_t)pc_src[0];
    430a:	13 96       	adiw	r26, 0x03	; 3
    430c:	ed 91       	ld	r30, X+
    430e:	fc 91       	ld	r31, X
    4310:	14 97       	sbiw	r26, 0x04	; 4
    4312:	8c 81       	ldd	r24, Y+4	; 0x04
    4314:	80 87       	std	Z+8, r24	; 0x08
      pt_dElement->pt_dma->SRCADDR1 = (uint16_t)pc_src[1];
    4316:	13 96       	adiw	r26, 0x03	; 3
    4318:	ed 91       	ld	r30, X+
    431a:	fc 91       	ld	r31, X
    431c:	14 97       	sbiw	r26, 0x04	; 4
    431e:	8d 81       	ldd	r24, Y+5	; 0x05
    4320:	81 87       	std	Z+9, r24	; 0x09

      /*---------------------------------------------------------------------*
       * Todo...this will need to be fixed if someone is attempting to 
       * access memory outside of a 16-bit memory range...
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->SRCADDR2 = 0;//(uint16_t)pc_src[2];
    4322:	13 96       	adiw	r26, 0x03	; 3
    4324:	ed 91       	ld	r30, X+
    4326:	fc 91       	ld	r31, X
    4328:	14 97       	sbiw	r26, 0x04	; 4
    432a:	12 86       	std	Z+10, r1	; 0x0a

      pt_dElement->pt_dma->DESTADDR0 = (uint16_t)pc_dst[0];
    432c:	13 96       	adiw	r26, 0x03	; 3
    432e:	ed 91       	ld	r30, X+
    4330:	fc 91       	ld	r31, X
    4332:	14 97       	sbiw	r26, 0x04	; 4
    4334:	8e 81       	ldd	r24, Y+6	; 0x06
    4336:	84 87       	std	Z+12, r24	; 0x0c
      pt_dElement->pt_dma->DESTADDR1 = (uint16_t)pc_dst[1];
    4338:	13 96       	adiw	r26, 0x03	; 3
    433a:	ed 91       	ld	r30, X+
    433c:	fc 91       	ld	r31, X
    433e:	14 97       	sbiw	r26, 0x04	; 4
    4340:	8f 81       	ldd	r24, Y+7	; 0x07
    4342:	85 87       	std	Z+13, r24	; 0x0d

      /*---------------------------------------------------------------------*
       * Todo...this will need to be fixed if someone is attempting to 
       * access memory outside of a 16-bit memory range...
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->DESTADDR2 = 0;//(uint16_t)pc_dst[2];
    4344:	13 96       	adiw	r26, 0x03	; 3
    4346:	ed 91       	ld	r30, X+
    4348:	fc 91       	ld	r31, X
    434a:	14 97       	sbiw	r26, 0x04	; 4
    434c:	16 86       	std	Z+14, r1	; 0x0e

      /*---------------------------------------------------------------------*
       * Configure the direction
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_SRCDIR_gm;
    434e:	13 96       	adiw	r26, 0x03	; 3
    4350:	ed 91       	ld	r30, X+
    4352:	fc 91       	ld	r31, X
    4354:	14 97       	sbiw	r26, 0x04	; 4
    4356:	82 81       	ldd	r24, Z+2	; 0x02
    4358:	8f 7c       	andi	r24, 0xCF	; 207
    435a:	82 83       	std	Z+2, r24	; 0x02
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_srcAddDir << 4);
    435c:	13 96       	adiw	r26, 0x03	; 3
    435e:	ed 91       	ld	r30, X+
    4360:	fc 91       	ld	r31, X
    4362:	14 97       	sbiw	r26, 0x04	; 4
    4364:	92 81       	ldd	r25, Z+2	; 0x02
    4366:	88 85       	ldd	r24, Y+8	; 0x08
    4368:	82 95       	swap	r24
    436a:	80 7f       	andi	r24, 0xF0	; 240
    436c:	89 2b       	or	r24, r25
    436e:	82 83       	std	Z+2, r24	; 0x02

      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_DESTDIR_gm;
    4370:	13 96       	adiw	r26, 0x03	; 3
    4372:	ed 91       	ld	r30, X+
    4374:	fc 91       	ld	r31, X
    4376:	14 97       	sbiw	r26, 0x04	; 4
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	8c 7f       	andi	r24, 0xFC	; 252
    437c:	82 83       	std	Z+2, r24	; 0x02
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_destAddDir << 0);
    437e:	13 96       	adiw	r26, 0x03	; 3
    4380:	ed 91       	ld	r30, X+
    4382:	fc 91       	ld	r31, X
    4384:	14 97       	sbiw	r26, 0x04	; 4
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	99 85       	ldd	r25, Y+9	; 0x09
    438a:	89 2b       	or	r24, r25
    438c:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Configure whether or not to reload.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_SRCRELOAD_gm;
    438e:	13 96       	adiw	r26, 0x03	; 3
    4390:	ed 91       	ld	r30, X+
    4392:	fc 91       	ld	r31, X
    4394:	14 97       	sbiw	r26, 0x04	; 4
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	8f 73       	andi	r24, 0x3F	; 63
    439a:	82 83       	std	Z+2, r24	; 0x02
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_srcAddReload << 6);
    439c:	13 96       	adiw	r26, 0x03	; 3
    439e:	ed 91       	ld	r30, X+
    43a0:	fc 91       	ld	r31, X
    43a2:	14 97       	sbiw	r26, 0x04	; 4
    43a4:	92 81       	ldd	r25, Z+2	; 0x02
    43a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    43a8:	82 95       	swap	r24
    43aa:	88 0f       	add	r24, r24
    43ac:	88 0f       	add	r24, r24
    43ae:	80 7c       	andi	r24, 0xC0	; 192
    43b0:	89 2b       	or	r24, r25
    43b2:	82 83       	std	Z+2, r24	; 0x02

      pt_dElement->pt_dma->ADDRCTRL &= ~DMA_CH_DESTRELOAD_gm;
    43b4:	13 96       	adiw	r26, 0x03	; 3
    43b6:	ed 91       	ld	r30, X+
    43b8:	fc 91       	ld	r31, X
    43ba:	14 97       	sbiw	r26, 0x04	; 4
    43bc:	82 81       	ldd	r24, Z+2	; 0x02
    43be:	83 7f       	andi	r24, 0xF3	; 243
    43c0:	82 83       	std	Z+2, r24	; 0x02
      pt_dElement->pt_dma->ADDRCTRL |= (t_conf.t_destAddReload << 2);
    43c2:	13 96       	adiw	r26, 0x03	; 3
    43c4:	ed 91       	ld	r30, X+
    43c6:	fc 91       	ld	r31, X
    43c8:	14 97       	sbiw	r26, 0x04	; 4
    43ca:	92 81       	ldd	r25, Z+2	; 0x02
    43cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    43ce:	88 0f       	add	r24, r24
    43d0:	88 0f       	add	r24, r24
    43d2:	89 2b       	or	r24, r25
    43d4:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Configure the block size
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->TRFCNT = t_conf.s_blockSize;
    43d6:	13 96       	adiw	r26, 0x03	; 3
    43d8:	ed 91       	ld	r30, X+
    43da:	fc 91       	ld	r31, X
    43dc:	14 97       	sbiw	r26, 0x04	; 4
    43de:	8c 85       	ldd	r24, Y+12	; 0x0c
    43e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    43e2:	84 83       	std	Z+4, r24	; 0x04
    43e4:	95 83       	std	Z+5, r25	; 0x05

      /*---------------------------------------------------------------------*
       * Configure the channel transfer mode.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_BURSTLEN_gm;
    43e6:	13 96       	adiw	r26, 0x03	; 3
    43e8:	ed 91       	ld	r30, X+
    43ea:	fc 91       	ld	r31, X
    43ec:	14 97       	sbiw	r26, 0x04	; 4
    43ee:	80 81       	ld	r24, Z
    43f0:	8c 7f       	andi	r24, 0xFC	; 252
    43f2:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA |= t_conf.t_burstMode;
    43f4:	13 96       	adiw	r26, 0x03	; 3
    43f6:	ed 91       	ld	r30, X+
    43f8:	fc 91       	ld	r31, X
    43fa:	14 97       	sbiw	r26, 0x04	; 4
    43fc:	80 81       	ld	r24, Z
    43fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4400:	89 2b       	or	r24, r25
    4402:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Configure repeat mode
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_REPEAT_bm;
    4404:	13 96       	adiw	r26, 0x03	; 3
    4406:	ed 91       	ld	r30, X+
    4408:	fc 91       	ld	r31, X
    440a:	14 97       	sbiw	r26, 0x04	; 4
    440c:	80 81       	ld	r24, Z
    440e:	8f 7d       	andi	r24, 0xDF	; 223
    4410:	80 83       	st	Z, r24
      pt_dElement->pt_dma->REPCNT = 0;
    4412:	13 96       	adiw	r26, 0x03	; 3
    4414:	ed 91       	ld	r30, X+
    4416:	fc 91       	ld	r31, X
    4418:	14 97       	sbiw	r26, 0x04	; 4
    441a:	16 82       	std	Z+6, r1	; 0x06
      if( t_conf.c_repeatCount > 0)
    441c:	89 89       	ldd	r24, Y+17	; 0x11
    441e:	18 16       	cp	r1, r24
    4420:	74 f4       	brge	.+28     	; 0x443e <hal_configureDmaChannel+0x20e>
      {
         /*Fixed number of repeats*/
         pt_dElement->pt_dma->CTRLA |= DMA_CH_REPEAT_bm;
    4422:	13 96       	adiw	r26, 0x03	; 3
    4424:	ed 91       	ld	r30, X+
    4426:	fc 91       	ld	r31, X
    4428:	14 97       	sbiw	r26, 0x04	; 4
    442a:	80 81       	ld	r24, Z
    442c:	80 62       	ori	r24, 0x20	; 32
    442e:	80 83       	st	Z, r24
         pt_dElement->pt_dma->REPCNT = t_conf.c_repeatCount;
    4430:	13 96       	adiw	r26, 0x03	; 3
    4432:	ed 91       	ld	r30, X+
    4434:	fc 91       	ld	r31, X
    4436:	14 97       	sbiw	r26, 0x04	; 4
    4438:	89 89       	ldd	r24, Y+17	; 0x11
    443a:	86 83       	std	Z+6, r24	; 0x06
    443c:	09 c0       	rjmp	.+18     	; 0x4450 <hal_configureDmaChannel+0x220>

      }
      else if( t_conf.c_repeatCount < 0)
    443e:	88 23       	and	r24, r24
    4440:	39 f0       	breq	.+14     	; 0x4450 <hal_configureDmaChannel+0x220>
      {
         /*Infinite repeat*/
         pt_dElement->pt_dma->CTRLA |= DMA_CH_REPEAT_bm;
    4442:	13 96       	adiw	r26, 0x03	; 3
    4444:	ed 91       	ld	r30, X+
    4446:	fc 91       	ld	r31, X
    4448:	14 97       	sbiw	r26, 0x04	; 4
    444a:	80 81       	ld	r24, Z
    444c:	80 62       	ori	r24, 0x20	; 32
    444e:	80 83       	st	Z, r24
      }

      /*---------------------------------------------------------------------*
       * Configure the data transfer type
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_SINGLE_bm;
    4450:	13 96       	adiw	r26, 0x03	; 3
    4452:	ed 91       	ld	r30, X+
    4454:	fc 91       	ld	r31, X
    4456:	14 97       	sbiw	r26, 0x04	; 4
    4458:	80 81       	ld	r24, Z
    445a:	8b 7f       	andi	r24, 0xFB	; 251
    445c:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA |= t_conf.t_transferType << 2;
    445e:	13 96       	adiw	r26, 0x03	; 3
    4460:	ed 91       	ld	r30, X+
    4462:	fc 91       	ld	r31, X
    4464:	14 97       	sbiw	r26, 0x04	; 4
    4466:	90 81       	ld	r25, Z
    4468:	8f 85       	ldd	r24, Y+15	; 0x0f
    446a:	88 0f       	add	r24, r24
    446c:	88 0f       	add	r24, r24
    446e:	89 2b       	or	r24, r25
    4470:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Configure the DMA trigger source
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->TRIGSRC &= ~DMA_CH_TRIGSRC_gm;
    4472:	13 96       	adiw	r26, 0x03	; 3
    4474:	ed 91       	ld	r30, X+
    4476:	fc 91       	ld	r31, X
    4478:	14 97       	sbiw	r26, 0x04	; 4
    447a:	83 81       	ldd	r24, Z+3	; 0x03
    447c:	13 82       	std	Z+3, r1	; 0x03
      pt_dElement->pt_dma->TRIGSRC |= t_conf.t_triggerSrc;
    447e:	13 96       	adiw	r26, 0x03	; 3
    4480:	ed 91       	ld	r30, X+
    4482:	fc 91       	ld	r31, X
    4484:	14 97       	sbiw	r26, 0x04	; 4
    4486:	83 81       	ldd	r24, Z+3	; 0x03
    4488:	98 89       	ldd	r25, Y+16	; 0x10
    448a:	89 2b       	or	r24, r25
    448c:	83 83       	std	Z+3, r24	; 0x03

      pt_dElement->b_validConfig = true;
    448e:	81 e0       	ldi	r24, 0x01	; 1
    4490:	11 96       	adiw	r26, 0x01	; 1
    4492:	8c 93       	st	X, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	8f bf       	out	0x3f, r24	; 63
    4498:	80 e0       	ldi	r24, 0x00	; 0

   return DMA_PASSED;

}/*End hal_configureDmaChannel*/
    449a:	61 96       	adiw	r28, 0x11	; 17
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	cf 91       	pop	r28
    44a2:	df 91       	pop	r29
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	df 90       	pop	r13
    44ae:	cf 90       	pop	r12
    44b0:	bf 90       	pop	r11
    44b2:	af 90       	pop	r10
    44b4:	08 95       	ret

000044b6 <hal_getDmaChannelId>:

/*------------------------------------------------------------------------*
   * Returns the channel Id for a particular DMA pointed to by 't_handle'.
   *------------------------------------------------------------------------*/
t_dmaChanId hal_getDmaChannelId( t_DMAHNDL t_handle)
{
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	0f 92       	push	r0
    44bc:	0f 92       	push	r0
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	89 83       	std	Y+1, r24	; 0x01
    44c4:	9a 83       	std	Y+2, r25	; 0x02
   volatile t_dmaChan *pt_dElement;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    44c6:	e9 81       	ldd	r30, Y+1	; 0x01
    44c8:	fa 81       	ldd	r31, Y+2	; 0x02
    44ca:	20 91 8c 20 	lds	r18, 0x208C
    44ce:	30 91 8d 20 	lds	r19, 0x208D
    44d2:	84 81       	ldd	r24, Z+4	; 0x04
    44d4:	95 81       	ldd	r25, Z+5	; 0x05
    44d6:	82 17       	cp	r24, r18
    44d8:	93 07       	cpc	r25, r19
    44da:	11 f0       	breq	.+4      	; 0x44e0 <hal_getDmaChannelId+0x2a>
    44dc:	8e ef       	ldi	r24, 0xFE	; 254
    44de:	06 c0       	rjmp	.+12     	; 0x44ec <hal_getDmaChannelId+0x36>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the DMA
    * channel information is being stored.
    *------------------------------------------------------------------------*/
   pt_dElement = (t_dmaChan *)
    44e0:	e9 81       	ldd	r30, Y+1	; 0x01
    44e2:	fa 81       	ldd	r31, Y+2	; 0x02
    44e4:	01 90       	ld	r0, Z+
    44e6:	f0 81       	ld	r31, Z
    44e8:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   return pt_dElement->t_id;
    44ea:	80 81       	ld	r24, Z

}/*End hal_getDmaChannelId*/
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <hal_dmaEnableChannel>:
   return DMA_PASSED;

}/*End hal_clearDmaIntStatus*/

t_dmaError hal_dmaEnableChannel( t_DMAHNDL t_handle)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	00 d0       	rcall	.+0      	; 0x44fc <hal_dmaEnableChannel+0x6>
    44fc:	cd b7       	in	r28, 0x3d	; 61
    44fe:	de b7       	in	r29, 0x3e	; 62
    4500:	8a 83       	std	Y+2, r24	; 0x02
    4502:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4504:	8f b7       	in	r24, 0x3f	; 63
    4506:	89 83       	std	Y+1, r24	; 0x01
    4508:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    450a:	ea 81       	ldd	r30, Y+2	; 0x02
    450c:	fb 81       	ldd	r31, Y+3	; 0x03
    450e:	20 91 8c 20 	lds	r18, 0x208C
    4512:	30 91 8d 20 	lds	r19, 0x208D
    4516:	84 81       	ldd	r24, Z+4	; 0x04
    4518:	95 81       	ldd	r25, Z+5	; 0x05
    451a:	82 17       	cp	r24, r18
    451c:	93 07       	cpc	r25, r19
    451e:	21 f0       	breq	.+8      	; 0x4528 <hal_dmaEnableChannel+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    4520:	89 81       	ldd	r24, Y+1	; 0x01
    4522:	8f bf       	out	0x3f, r24	; 63
    4524:	8e ef       	ldi	r24, 0xFE	; 254
    4526:	0e c0       	rjmp	.+28     	; 0x4544 <hal_dmaEnableChannel+0x4e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    4528:	ea 81       	ldd	r30, Y+2	; 0x02
    452a:	fb 81       	ldd	r31, Y+3	; 0x03
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Enable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA |= DMA_CH_ENABLE_bm;
    452c:	01 90       	ld	r0, Z+
    452e:	f0 81       	ld	r31, Z
    4530:	e0 2d       	mov	r30, r0
    4532:	03 80       	ldd	r0, Z+3	; 0x03
    4534:	f4 81       	ldd	r31, Z+4	; 0x04
    4536:	e0 2d       	mov	r30, r0
    4538:	80 81       	ld	r24, Z
    453a:	80 68       	ori	r24, 0x80	; 128
    453c:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	8f bf       	out	0x3f, r24	; 63
    4542:	80 e0       	ldi	r24, 0x00	; 0

   return DMA_PASSED;

}/*End hal_dmaEnableChannel*/
    4544:	23 96       	adiw	r28, 0x03	; 3
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	de bf       	out	0x3e, r29	; 62
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <hal_dmaDisableChannel>:

t_dmaError hal_dmaDisableChannel( t_DMAHNDL t_handle)
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <hal_dmaDisableChannel+0x6>
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	8a 83       	std	Y+2, r24	; 0x02
    455c:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    455e:	8f b7       	in	r24, 0x3f	; 63
    4560:	89 83       	std	Y+1, r24	; 0x01
    4562:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    4564:	ea 81       	ldd	r30, Y+2	; 0x02
    4566:	fb 81       	ldd	r31, Y+3	; 0x03
    4568:	20 91 8c 20 	lds	r18, 0x208C
    456c:	30 91 8d 20 	lds	r19, 0x208D
    4570:	84 81       	ldd	r24, Z+4	; 0x04
    4572:	95 81       	ldd	r25, Z+5	; 0x05
    4574:	82 17       	cp	r24, r18
    4576:	93 07       	cpc	r25, r19
    4578:	21 f0       	breq	.+8      	; 0x4582 <hal_dmaDisableChannel+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    457a:	89 81       	ldd	r24, Y+1	; 0x01
    457c:	8f bf       	out	0x3f, r24	; 63
    457e:	8e ef       	ldi	r24, 0xFE	; 254
    4580:	0e c0       	rjmp	.+28     	; 0x459e <hal_dmaDisableChannel+0x4e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    4582:	ea 81       	ldd	r30, Y+2	; 0x02
    4584:	fb 81       	ldd	r31, Y+3	; 0x03
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    4586:	01 90       	ld	r0, Z+
    4588:	f0 81       	ld	r31, Z
    458a:	e0 2d       	mov	r30, r0
    458c:	03 80       	ldd	r0, Z+3	; 0x03
    458e:	f4 81       	ldd	r31, Z+4	; 0x04
    4590:	e0 2d       	mov	r30, r0
    4592:	80 81       	ld	r24, Z
    4594:	8f 77       	andi	r24, 0x7F	; 127
    4596:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	8f bf       	out	0x3f, r24	; 63
    459c:	80 e0       	ldi	r24, 0x00	; 0

   return DMA_PASSED;

}/*End hal_dmaDisableChannel*/
    459e:	23 96       	adiw	r28, 0x03	; 3
    45a0:	cd bf       	out	0x3d, r28	; 61
    45a2:	de bf       	out	0x3e, r29	; 62
    45a4:	cf 91       	pop	r28
    45a6:	df 91       	pop	r29
    45a8:	08 95       	ret

000045aa <hal_releaseDmaChannel>:
   return (t_DMAHNDL)t_linkHndl;

}/*End hal_requestDmaChannel*/

t_dmaError hal_releaseDmaChannel( t_DMAHNDL t_handle)
{
    45aa:	af 92       	push	r10
    45ac:	bf 92       	push	r11
    45ae:	cf 92       	push	r12
    45b0:	df 92       	push	r13
    45b2:	ef 92       	push	r14
    45b4:	ff 92       	push	r15
    45b6:	0f 93       	push	r16
    45b8:	1f 93       	push	r17
    45ba:	df 93       	push	r29
    45bc:	cf 93       	push	r28
    45be:	00 d0       	rcall	.+0      	; 0x45c0 <hal_releaseDmaChannel+0x16>
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	8a 83       	std	Y+2, r24	; 0x02
    45c6:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    45c8:	8f b7       	in	r24, 0x3f	; 63
    45ca:	89 83       	std	Y+1, r24	; 0x01
    45cc:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    45ce:	ea 81       	ldd	r30, Y+2	; 0x02
    45d0:	fb 81       	ldd	r31, Y+3	; 0x03
    45d2:	20 91 8c 20 	lds	r18, 0x208C
    45d6:	30 91 8d 20 	lds	r19, 0x208D
    45da:	84 81       	ldd	r24, Z+4	; 0x04
    45dc:	95 81       	ldd	r25, Z+5	; 0x05
    45de:	82 17       	cp	r24, r18
    45e0:	93 07       	cpc	r25, r19
    45e2:	21 f0       	breq	.+8      	; 0x45ec <hal_releaseDmaChannel+0x42>
   {
      HAL_END_CRITICAL();//Enable interrupts
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	8f bf       	out	0x3f, r24	; 63
    45e8:	8e ef       	ldi	r24, 0xFE	; 254
    45ea:	8b c0       	rjmp	.+278    	; 0x4702 <hal_releaseDmaChannel+0x158>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    45ec:	ea 81       	ldd	r30, Y+2	; 0x02
    45ee:	fb 81       	ldd	r31, Y+3	; 0x03
    45f0:	00 81       	ld	r16, Z
    45f2:	11 81       	ldd	r17, Z+1	; 0x01
    45f4:	bb 24       	eor	r11, r11
    45f6:	cc 24       	eor	r12, r12
    45f8:	dd 24       	eor	r13, r13
      {
         /*------------------------------------------------------------------*
          * Use the DMA channel id and interrupt type as an index into the
          * list of possible interrupts.
          *------------------------------------------------------------------*/
         t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;
    45fa:	d8 01       	movw	r26, r16
    45fc:	ac 90       	ld	r10, X
    45fe:	ab 0c       	add	r10, r11

         /*------------------------------------------------------------------*
          * Search the DMA interrupt list for the requested ID
          *------------------------------------------------------------------*/
         UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    4600:	e0 91 9a 20 	lds	r30, 0x209A
    4604:	f0 91 9b 20 	lds	r31, 0x209B
    4608:	e2 80       	ldd	r14, Z+2	; 0x02
    460a:	f3 80       	ldd	r15, Z+3	; 0x03
    460c:	e0 91 9a 20 	lds	r30, 0x209A
    4610:	f0 91 9b 20 	lds	r31, 0x209B
    4614:	3b c0       	rjmp	.+118    	; 0x468c <hal_releaseDmaChannel+0xe2>
         {
            pt_iElement = (t_dmaIntHndl *)
    4616:	e0 91 b8 22 	lds	r30, 0x22B8
    461a:	f0 91 b9 22 	lds	r31, 0x22B9
    461e:	a0 81       	ld	r26, Z
    4620:	b1 81       	ldd	r27, Z+1	; 0x01
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
            t_prevLinkHndl = UTL_GET_PREV_LINK( t_linkHndl);
    4622:	e0 91 b8 22 	lds	r30, 0x22B8
    4626:	f0 91 b9 22 	lds	r31, 0x22B9
    462a:	82 85       	ldd	r24, Z+10	; 0x0a
    462c:	93 85       	ldd	r25, Z+11	; 0x0b
    462e:	80 93 b6 22 	sts	0x22B6, r24
    4632:	90 93 b7 22 	sts	0x22B7, r25
            if( pt_iElement->t_id == t_intId)
    4636:	8c 91       	ld	r24, X
    4638:	8a 15       	cp	r24, r10
    463a:	09 f5       	brne	.+66     	; 0x467e <hal_releaseDmaChannel+0xd4>
            {
               pt_dElement->c_intCount--;
    463c:	f8 01       	movw	r30, r16
    463e:	82 81       	ldd	r24, Z+2	; 0x02
    4640:	81 50       	subi	r24, 0x01	; 1
    4642:	82 83       	std	Z+2, r24	; 0x02
    4644:	03 80       	ldd	r0, Z+3	; 0x03
    4646:	f4 81       	ldd	r31, Z+4	; 0x04
    4648:	e0 2d       	mov	r30, r0
               if( t_type == DMA_TRANSFER_COMPLETE)
    464a:	bb 20       	and	r11, r11
    464c:	19 f4       	brne	.+6      	; 0x4654 <hal_releaseDmaChannel+0xaa>
                  pt_dElement->pt_dma->CTRLB &= ~DMA_CH_TRNINTLVL_gm;
    464e:	81 81       	ldd	r24, Z+1	; 0x01
    4650:	8c 7f       	andi	r24, 0xFC	; 252
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <hal_releaseDmaChannel+0xae>
               else
                  pt_dElement->pt_dma->CTRLB &= ~DMA_CH_ERRINTLVL_gm;
    4654:	81 81       	ldd	r24, Z+1	; 0x01
    4656:	83 7f       	andi	r24, 0xF3	; 243
    4658:	81 83       	std	Z+1, r24	; 0x01

               t_lErr = utl_destroyLink( gt_dmaIntHndlList,
    465a:	80 91 9a 20 	lds	r24, 0x209A
    465e:	90 91 9b 20 	lds	r25, 0x209B
    4662:	60 91 b8 22 	lds	r22, 0x22B8
    4666:	70 91 b9 22 	lds	r23, 0x22B9
    466a:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                                         t_linkHndl);

               t_linkHndl = t_prevLinkHndl;
    466e:	80 91 b6 22 	lds	r24, 0x22B6
    4672:	90 91 b7 22 	lds	r25, 0x22B7
    4676:	80 93 b8 22 	sts	0x22B8, r24
    467a:	90 93 b9 22 	sts	0x22B9, r25
         t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;

         /*------------------------------------------------------------------*
          * Search the DMA interrupt list for the requested ID
          *------------------------------------------------------------------*/
         UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaIntHndlList, s_count)
    467e:	08 94       	sec
    4680:	e1 08       	sbc	r14, r1
    4682:	f1 08       	sbc	r15, r1
    4684:	e0 91 b8 22 	lds	r30, 0x22B8
    4688:	f0 91 b9 22 	lds	r31, 0x22B9
    468c:	80 85       	ldd	r24, Z+8	; 0x08
    468e:	91 85       	ldd	r25, Z+9	; 0x09
    4690:	80 93 b8 22 	sts	0x22B8, r24
    4694:	90 93 b9 22 	sts	0x22B9, r25
    4698:	1e 14       	cp	r1, r14
    469a:	1f 04       	cpc	r1, r15
    469c:	0c f4       	brge	.+2      	; 0x46a0 <hal_releaseDmaChannel+0xf6>
    469e:	bb cf       	rjmp	.-138    	; 0x4616 <hal_releaseDmaChannel+0x6c>
       * the list is lost.  This issue is resolved by using a previous ptr to
       * change 't_linkHndl' back to a valid location once an item has been
       * removed.
       *---------------------------------------------------------------------*/
      for( t_type = DMA_TRANSFER_COMPLETE; t_type <= DMA_TRANSFER_ERROR;
      t_type++)
    46a0:	b3 94       	inc	r11
    46a2:	08 94       	sec
    46a4:	c1 1c       	adc	r12, r1
    46a6:	d1 1c       	adc	r13, r1
       * 't_linkHndl' has been deleted information about the next position on
       * the list is lost.  This issue is resolved by using a previous ptr to
       * change 't_linkHndl' back to a valid location once an item has been
       * removed.
       *---------------------------------------------------------------------*/
      for( t_type = DMA_TRANSFER_COMPLETE; t_type <= DMA_TRANSFER_ERROR;
    46a8:	f2 e0       	ldi	r31, 0x02	; 2
    46aa:	cf 16       	cp	r12, r31
    46ac:	d1 04       	cpc	r13, r1
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <hal_releaseDmaChannel+0x108>
    46b0:	a4 cf       	rjmp	.-184    	; 0x45fa <hal_releaseDmaChannel+0x50>
      t_type++)*/

      /*---------------------------------------------------------------------*
       * Disable the channel.
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    46b2:	d8 01       	movw	r26, r16
    46b4:	13 96       	adiw	r26, 0x03	; 3
    46b6:	ed 91       	ld	r30, X+
    46b8:	fc 91       	ld	r31, X
    46ba:	14 97       	sbiw	r26, 0x04	; 4
    46bc:	80 81       	ld	r24, Z
    46be:	8f 77       	andi	r24, 0x7F	; 127
    46c0:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Reset all registers to default values
       *---------------------------------------------------------------------*/
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_ENABLE_bm;
    46c2:	13 96       	adiw	r26, 0x03	; 3
    46c4:	ed 91       	ld	r30, X+
    46c6:	fc 91       	ld	r31, X
    46c8:	14 97       	sbiw	r26, 0x04	; 4
    46ca:	80 81       	ld	r24, Z
    46cc:	8f 77       	andi	r24, 0x7F	; 127
    46ce:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA |= DMA_CH_RESET_bm;
    46d0:	13 96       	adiw	r26, 0x03	; 3
    46d2:	ed 91       	ld	r30, X+
    46d4:	fc 91       	ld	r31, X
    46d6:	14 97       	sbiw	r26, 0x04	; 4
    46d8:	80 81       	ld	r24, Z
    46da:	80 64       	ori	r24, 0x40	; 64
    46dc:	80 83       	st	Z, r24
      pt_dElement->pt_dma->CTRLA &= ~DMA_CH_RESET_bm;
    46de:	13 96       	adiw	r26, 0x03	; 3
    46e0:	ed 91       	ld	r30, X+
    46e2:	fc 91       	ld	r31, X
    46e4:	14 97       	sbiw	r26, 0x04	; 4
    46e6:	80 81       	ld	r24, Z
    46e8:	8f 7b       	andi	r24, 0xBF	; 191
    46ea:	80 83       	st	Z, r24

      t_lErr = utl_destroyLink( gt_dmaChanList,
    46ec:	80 91 8c 20 	lds	r24, 0x208C
    46f0:	90 91 8d 20 	lds	r25, 0x208D
    46f4:	6a 81       	ldd	r22, Y+2	; 0x02
    46f6:	7b 81       	ldd	r23, Y+3	; 0x03
    46f8:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                                (t_LINKHNDL)t_handle);

   }

   HAL_END_CRITICAL();//Enable interrupts
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	8f bf       	out	0x3f, r24	; 63
    4700:	80 e0       	ldi	r24, 0x00	; 0

   return DMA_PASSED;

}/*End hal_releaseDmaChannel*/
    4702:	23 96       	adiw	r28, 0x03	; 3
    4704:	cd bf       	out	0x3d, r28	; 61
    4706:	de bf       	out	0x3e, r29	; 62
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	1f 91       	pop	r17
    470e:	0f 91       	pop	r16
    4710:	ff 90       	pop	r15
    4712:	ef 90       	pop	r14
    4714:	df 90       	pop	r13
    4716:	cf 90       	pop	r12
    4718:	bf 90       	pop	r11
    471a:	af 90       	pop	r10
    471c:	08 95       	ret

0000471e <hal_requestDmaChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular dma module
 *---------------------------------------------------------------------------*/
t_DMAHNDL hal_requestDmaChannel( void)
{
    471e:	1f 93       	push	r17
    4720:	df 93       	push	r29
    4722:	cf 93       	push	r28
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
    4728:	25 97       	sbiw	r28, 0x05	; 5
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	de bf       	out	0x3e, r29	; 62

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    472e:	8f b7       	in	r24, 0x3f	; 63
    4730:	89 83       	std	Y+1, r24	; 0x01
    4732:	f8 94       	cli

   if( gb_configureDmaController == true)
    4734:	80 91 9c 20 	lds	r24, 0x209C
    4738:	88 23       	and	r24, r24
    473a:	d9 f0       	breq	.+54     	; 0x4772 <hal_requestDmaChannel+0x54>

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    473c:	8f b7       	in	r24, 0x3f	; 63
    473e:	8c 83       	std	Y+4, r24	; 0x04
    4740:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Disable module
    *------------------------------------------------------------------------*/
   DMA.CTRL &= ~DMA_ENABLE_bm;
    4742:	80 91 00 01 	lds	r24, 0x0100
    4746:	8f 77       	andi	r24, 0x7F	; 127
    4748:	80 93 00 01 	sts	0x0100, r24
   }

   /*------------------------------------------------------------------------*
    * Apply configuration
    *------------------------------------------------------------------------*/
   DMA.CTRL = (DMA.CTRL & ~DMA_DBUFMODE_gm ) |
    474c:	80 91 00 01 	lds	r24, 0x0100
    4750:	83 7f       	andi	r24, 0xF3	; 243
    4752:	80 93 00 01 	sts	0x0100, r24
   (DMA_DBUFMODE_t)t_conf.t_buffMode;
   DMA.CTRL = (DMA.CTRL & ~DMA_PRIMODE_gm ) |
    4756:	80 91 00 01 	lds	r24, 0x0100
    475a:	83 60       	ori	r24, 0x03	; 3
    475c:	80 93 00 01 	sts	0x0100, r24
   (DMA_PRIMODE_t)t_conf.t_chanPriority;

   /*------------------------------------------------------------------------*
    * Enable module
    *------------------------------------------------------------------------*/
   DMA.CTRL |= DMA_ENABLE_bm;
    4760:	80 91 00 01 	lds	r24, 0x0100
    4764:	80 68       	ori	r24, 0x80	; 128
    4766:	80 93 00 01 	sts	0x0100, r24

   HAL_END_CRITICAL();//Enable interrupts
    476a:	8c 81       	ldd	r24, Y+4	; 0x04
    476c:	8f bf       	out	0x3f, r24	; 63
      t_cntrlConf.t_chanPriority = CHAN_0_1_2_3;

      if( hal_configureDmaController( t_cntrlConf) < 0)
         exit(0); /*This should not happen*/

      gb_configureDmaController = false;
    476e:	10 92 9c 20 	sts	0x209C, r1
    4772:	10 e0       	ldi	r17, 0x00	; 0
    4774:	42 e0       	ldi	r20, 0x02	; 2
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA channel list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaChanList, s_count)
    4776:	e0 91 8c 20 	lds	r30, 0x208C
    477a:	f0 91 8d 20 	lds	r31, 0x208D
    477e:	22 81       	ldd	r18, Z+2	; 0x02
    4780:	33 81       	ldd	r19, Z+3	; 0x03
    4782:	e0 91 8c 20 	lds	r30, 0x208C
    4786:	f0 91 8d 20 	lds	r31, 0x208D
    478a:	0c c0       	rjmp	.+24     	; 0x47a4 <hal_requestDmaChannel+0x86>
   {
      pt_element = (t_dmaChan *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    478c:	ec 81       	ldd	r30, Y+4	; 0x04
    478e:	fd 81       	ldd	r31, Y+5	; 0x05
    4790:	01 90       	ld	r0, Z+
    4792:	f0 81       	ld	r31, Z
    4794:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    4796:	80 81       	ld	r24, Z
    4798:	81 17       	cp	r24, r17
    479a:	61 f0       	breq	.+24     	; 0x47b4 <hal_requestDmaChannel+0x96>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the DMA channel list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_dmaChanList, s_count)
    479c:	21 50       	subi	r18, 0x01	; 1
    479e:	30 40       	sbci	r19, 0x00	; 0
    47a0:	ec 81       	ldd	r30, Y+4	; 0x04
    47a2:	fd 81       	ldd	r31, Y+5	; 0x05
    47a4:	80 85       	ldd	r24, Z+8	; 0x08
    47a6:	91 85       	ldd	r25, Z+9	; 0x09
    47a8:	8c 83       	std	Y+4, r24	; 0x04
    47aa:	9d 83       	std	Y+5, r25	; 0x05
    47ac:	12 16       	cp	r1, r18
    47ae:	13 06       	cpc	r1, r19
    47b0:	6c f3       	brlt	.-38     	; 0x478c <hal_requestDmaChannel+0x6e>
    47b2:	0a c0       	rjmp	.+20     	; 0x47c8 <hal_requestDmaChannel+0xaa>
    * Search for next available DMA channel.
    *------------------------------------------------------------------------*/
   for( t_chanId = DMA_CHAN_0; t_chanId <= DMA_CHAN_3; t_chanId+=2)
   {
      pt_dmaChan = findDmaChanElement( t_chanId);
      if( pt_dmaChan == NULL) /*Not open*/
    47b4:	ef 2b       	or	r30, r31
    47b6:	41 f0       	breq	.+16     	; 0x47c8 <hal_requestDmaChannel+0xaa>
         break;
    47b8:	84 2f       	mov	r24, r20
    47ba:	8e 5f       	subi	r24, 0xFE	; 254
   }

   /*------------------------------------------------------------------------*
    * Search for next available DMA channel.
    *------------------------------------------------------------------------*/
   for( t_chanId = DMA_CHAN_0; t_chanId <= DMA_CHAN_3; t_chanId+=2)
    47bc:	8a 30       	cpi	r24, 0x0A	; 10
    47be:	09 f4       	brne	.+2      	; 0x47c2 <hal_requestDmaChannel+0xa4>
    47c0:	53 c0       	rjmp	.+166    	; 0x4868 <hal_requestDmaChannel+0x14a>
    47c2:	14 2f       	mov	r17, r20
    47c4:	48 2f       	mov	r20, r24
    47c6:	d7 cf       	rjmp	.-82     	; 0x4776 <hal_requestDmaChannel+0x58>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA channel information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaChan));
    47c8:	85 e0       	ldi	r24, 0x05	; 5
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    47d0:	8c 83       	std	Y+4, r24	; 0x04
    47d2:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    47d4:	8c 81       	ldd	r24, Y+4	; 0x04
    47d6:	9d 81       	ldd	r25, Y+5	; 0x05
    47d8:	97 ff       	sbrs	r25, 7
    47da:	03 c0       	rjmp	.+6      	; 0x47e2 <hal_requestDmaChannel+0xc4>
    47dc:	8f ef       	ldi	r24, 0xFF	; 255
    47de:	9f ef       	ldi	r25, 0xFF	; 255
    47e0:	2c c0       	rjmp	.+88     	; 0x483a <hal_requestDmaChannel+0x11c>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the DMA channel
    * information is being stored.
    *------------------------------------------------------------------------*/
   pt_element = (t_dmaChan *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    47e2:	ec 81       	ldd	r30, Y+4	; 0x04
    47e4:	fd 81       	ldd	r31, Y+5	; 0x05
    47e6:	01 90       	ld	r0, Z+
    47e8:	f0 81       	ld	r31, Z
    47ea:	e0 2d       	mov	r30, r0

   pt_element->b_validConfig = false;
    47ec:	11 82       	std	Z+1, r1	; 0x01
   pt_element->t_id          = t_id;
    47ee:	10 83       	st	Z, r17
   pt_element->c_intCount    = 0;
    47f0:	12 82       	std	Z+2, r1	; 0x02

   switch( t_id)
    47f2:	12 30       	cpi	r17, 0x02	; 2
    47f4:	69 f0       	breq	.+26     	; 0x4810 <hal_requestDmaChannel+0xf2>
    47f6:	13 30       	cpi	r17, 0x03	; 3
    47f8:	18 f4       	brcc	.+6      	; 0x4800 <hal_requestDmaChannel+0xe2>
    47fa:	11 23       	and	r17, r17
    47fc:	31 f0       	breq	.+12     	; 0x480a <hal_requestDmaChannel+0xec>
    47fe:	12 c0       	rjmp	.+36     	; 0x4824 <hal_requestDmaChannel+0x106>
    4800:	14 30       	cpi	r17, 0x04	; 4
    4802:	49 f0       	breq	.+18     	; 0x4816 <hal_requestDmaChannel+0xf8>
    4804:	16 30       	cpi	r17, 0x06	; 6
    4806:	71 f4       	brne	.+28     	; 0x4824 <hal_requestDmaChannel+0x106>
    4808:	09 c0       	rjmp	.+18     	; 0x481c <hal_requestDmaChannel+0xfe>
   {
      case DMA_CHAN_0:
         pt_element->pt_dma = &DMA.CH0;
    480a:	80 e1       	ldi	r24, 0x10	; 16
    480c:	91 e0       	ldi	r25, 0x01	; 1
    480e:	08 c0       	rjmp	.+16     	; 0x4820 <hal_requestDmaChannel+0x102>
      break;

      case DMA_CHAN_1:
         pt_element->pt_dma = &DMA.CH1;
    4810:	80 e2       	ldi	r24, 0x20	; 32
    4812:	91 e0       	ldi	r25, 0x01	; 1
    4814:	05 c0       	rjmp	.+10     	; 0x4820 <hal_requestDmaChannel+0x102>
      break;

      case DMA_CHAN_2:
         pt_element->pt_dma = &DMA.CH2;
    4816:	80 e3       	ldi	r24, 0x30	; 48
    4818:	91 e0       	ldi	r25, 0x01	; 1
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <hal_requestDmaChannel+0x102>
      break;

      case DMA_CHAN_3:
         pt_element->pt_dma = &DMA.CH3;
    481c:	80 e4       	ldi	r24, 0x40	; 64
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	83 83       	std	Z+3, r24	; 0x03
    4822:	94 83       	std	Z+4, r25	; 0x04
   }/*End switch( t_chanId)*/

   /*------------------------------------------------------------------------*
    * Add the DMA channel link onto the list open channels.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_dmaChanList,
    4824:	80 91 8c 20 	lds	r24, 0x208C
    4828:	90 91 8d 20 	lds	r25, 0x208D
    482c:	6c 81       	ldd	r22, Y+4	; 0x04
    482e:	7d 81       	ldd	r23, Y+5	; 0x05
    4830:	41 e0       	ldi	r20, 0x01	; 1
    4832:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    4836:	8c 81       	ldd	r24, Y+4	; 0x04
    4838:	9d 81       	ldd	r25, Y+5	; 0x05
   /*------------------------------------------------------------------------*
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_dmaChan == NULL) /*Yes*/
   {
      t_linkHndl = createDmaHandle( t_chanId);
    483a:	8a 83       	std	Y+2, r24	; 0x02
    483c:	9b 83       	std	Y+3, r25	; 0x03
      if( t_linkHndl < 0)
    483e:	8a 81       	ldd	r24, Y+2	; 0x02
    4840:	9b 81       	ldd	r25, Y+3	; 0x03
    4842:	97 ff       	sbrs	r25, 7
    4844:	05 c0       	rjmp	.+10     	; 0x4850 <hal_requestDmaChannel+0x132>
      {
         HAL_END_CRITICAL();//Enable interrupts
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	8f bf       	out	0x3f, r24	; 63
    484a:	2f ef       	ldi	r18, 0xFF	; 255
    484c:	3f ef       	ldi	r19, 0xFF	; 255
    484e:	04 c0       	rjmp	.+8      	; 0x4858 <hal_requestDmaChannel+0x13a>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_DMAHNDL)DMA_NO_CHANNELS_OPEN;
   }

   HAL_END_CRITICAL();//Enable interrupts
    4850:	89 81       	ldd	r24, Y+1	; 0x01
    4852:	8f bf       	out	0x3f, r24	; 63

   return (t_DMAHNDL)t_linkHndl;
    4854:	2a 81       	ldd	r18, Y+2	; 0x02
    4856:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End hal_requestDmaChannel*/
    4858:	c9 01       	movw	r24, r18
    485a:	25 96       	adiw	r28, 0x05	; 5
    485c:	cd bf       	out	0x3d, r28	; 61
    485e:	de bf       	out	0x3e, r29	; 62
    4860:	cf 91       	pop	r28
    4862:	df 91       	pop	r29
    4864:	1f 91       	pop	r17
    4866:	08 95       	ret
      }/*End if( t_linkHndl < 0)*/

   }
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    4868:	89 81       	ldd	r24, Y+1	; 0x01
    486a:	8f bf       	out	0x3f, r24	; 63
    486c:	29 ef       	ldi	r18, 0xF9	; 249
    486e:	3f ef       	ldi	r19, 0xFF	; 255
    4870:	f3 cf       	rjmp	.-26     	; 0x4858 <hal_requestDmaChannel+0x13a>

00004872 <hal_requestDmaInterrupt>:
}/*End createDmaHandle*/

t_dmaError hal_requestDmaInterrupt( t_DMAHNDL t_handle,
                                    t_dmaIntType  t_type,
                                    void (*pf_funPtr)( void))
{
    4872:	cf 92       	push	r12
    4874:	df 92       	push	r13
    4876:	ef 92       	push	r14
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	27 97       	sbiw	r28, 0x07	; 7
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	8e 83       	std	Y+6, r24	; 0x06
    488e:	9f 83       	std	Y+7, r25	; 0x07
    4890:	e6 2e       	mov	r14, r22
    4892:	6a 01       	movw	r12, r20
   t_dmaIntHndl *pt_iElement;
   t_dmaChan *pt_dElement;
   t_dmaIntId t_intId;
   t_LINKHNDL t_linkHndl;

   HAL_BEGIN_CRITICAL(); //Disable interrupts
    4894:	8f b7       	in	r24, 0x3f	; 63
    4896:	89 83       	std	Y+1, r24	; 0x01
    4898:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a DMA channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_dmaChanList) == false)
    489a:	ee 81       	ldd	r30, Y+6	; 0x06
    489c:	ff 81       	ldd	r31, Y+7	; 0x07
    489e:	20 91 8c 20 	lds	r18, 0x208C
    48a2:	30 91 8d 20 	lds	r19, 0x208D
    48a6:	84 81       	ldd	r24, Z+4	; 0x04
    48a8:	95 81       	ldd	r25, Z+5	; 0x05
    48aa:	82 17       	cp	r24, r18
    48ac:	93 07       	cpc	r25, r19
    48ae:	21 f0       	breq	.+8      	; 0x48b8 <hal_requestDmaInterrupt+0x46>
   {
      HAL_END_CRITICAL();//Enable interrupts
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	8f bf       	out	0x3f, r24	; 63
    48b4:	8e ef       	ldi	r24, 0xFE	; 254
    48b6:	53 c0       	rjmp	.+166    	; 0x495e <hal_requestDmaInterrupt+0xec>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_dElement = (t_dmaChan *)
    48b8:	ee 81       	ldd	r30, Y+6	; 0x06
    48ba:	ff 81       	ldd	r31, Y+7	; 0x07
    48bc:	00 81       	ld	r16, Z
    48be:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Use the dma module id and interrupt type as an index into the list
       * of possible interrupts.
       *---------------------------------------------------------------------*/
      t_intId = (t_dmaIntId)pt_dElement->t_id + (t_dmaIntId)t_type;
    48c0:	d8 01       	movw	r26, r16
    48c2:	fc 90       	ld	r15, X
    48c4:	f6 0e       	add	r15, r22

      /*---------------------------------------------------------------------*
       * Is the requested interrupt within a valid range?
       *---------------------------------------------------------------------*/
      if( (t_intId < DMA_CHAN0_TR_COMP) || (t_intId > DMA_CHAN3_TR_ERROR))
    48c6:	b7 e0       	ldi	r27, 0x07	; 7
    48c8:	bf 15       	cp	r27, r15
    48ca:	20 f4       	brcc	.+8      	; 0x48d4 <hal_requestDmaInterrupt+0x62>
      {
         HAL_END_CRITICAL();//Enable interrupts
    48cc:	89 81       	ldd	r24, Y+1	; 0x01
    48ce:	8f bf       	out	0x3f, r24	; 63
    48d0:	8b ef       	ldi	r24, 0xFB	; 251
    48d2:	45 c0       	rjmp	.+138    	; 0x495e <hal_requestDmaInterrupt+0xec>
         return DMA_INVALID_INT_TYPE;
      }

      pt_iElement = findDmaIntElement( t_intId);
    48d4:	8f 2d       	mov	r24, r15
    48d6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <findDmaIntElement>

      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_iElement == NULL) /*No*/
    48da:	89 2b       	or	r24, r25
    48dc:	e9 f5       	brne	.+122    	; 0x4958 <hal_requestDmaInterrupt+0xe6>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA interrupt information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_dmaIntHndl));
    48de:	83 e0       	ldi	r24, 0x03	; 3
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    48e6:	8c 83       	std	Y+4, r24	; 0x04
    48e8:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    48ea:	8c 81       	ldd	r24, Y+4	; 0x04
    48ec:	9d 81       	ldd	r25, Y+5	; 0x05
    48ee:	97 ff       	sbrs	r25, 7
    48f0:	03 c0       	rjmp	.+6      	; 0x48f8 <hal_requestDmaInterrupt+0x86>
    48f2:	8f ef       	ldi	r24, 0xFF	; 255
    48f4:	9f ef       	ldi	r25, 0xFF	; 255
    48f6:	0b c0       	rjmp	.+22     	; 0x490e <hal_requestDmaInterrupt+0x9c>
   }

   /*------------------------------------------------------------------------*
    * Add the DMA interrupt link onto the list open DMA interrupt.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_dmaIntHndlList,
    48f8:	80 91 9a 20 	lds	r24, 0x209A
    48fc:	90 91 9b 20 	lds	r25, 0x209B
    4900:	6c 81       	ldd	r22, Y+4	; 0x04
    4902:	7d 81       	ldd	r23, Y+5	; 0x05
    4904:	41 e0       	ldi	r20, 0x01	; 1
    4906:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    490a:	8c 81       	ldd	r24, Y+4	; 0x04
    490c:	9d 81       	ldd	r25, Y+5	; 0x05
      if( pt_iElement == NULL) /*No*/
      {
         /*------------------------------------------------------------------*
          * Allocate a new link member for this particular DMA interrupt.
          *------------------------------------------------------------------*/
         t_linkHndl = createIntHandle();
    490e:	8a 83       	std	Y+2, r24	; 0x02
    4910:	9b 83       	std	Y+3, r25	; 0x03
         if( t_linkHndl < 0)
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	9b 81       	ldd	r25, Y+3	; 0x03
    4916:	97 ff       	sbrs	r25, 7
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <hal_requestDmaInterrupt+0xb0>
         {
            HAL_END_CRITICAL();//Enable interrupts
    491a:	89 81       	ldd	r24, Y+1	; 0x01
    491c:	8f bf       	out	0x3f, r24	; 63
    491e:	8f ef       	ldi	r24, 0xFF	; 255
    4920:	1e c0       	rjmp	.+60     	; 0x495e <hal_requestDmaInterrupt+0xec>

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the DMA
          * interrupt information is being stored.
          *------------------------------------------------------------------*/
         pt_iElement = (t_dmaIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    4922:	ea 81       	ldd	r30, Y+2	; 0x02
    4924:	fb 81       	ldd	r31, Y+3	; 0x03
    4926:	01 90       	ld	r0, Z+
    4928:	f0 81       	ld	r31, Z
    492a:	e0 2d       	mov	r30, r0

         pt_iElement->t_id      = t_intId;
    492c:	f0 82       	st	Z, r15
         pt_iElement->pf_funPtr = pf_funPtr;
    492e:	c1 82       	std	Z+1, r12	; 0x01
    4930:	d2 82       	std	Z+2, r13	; 0x02

         /*------------------------------------------------------------------*
          * Keep track of the number of interrupts attached to this channel.
          *------------------------------------------------------------------*/
         pt_dElement->c_intCount++;
    4932:	f8 01       	movw	r30, r16
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	8f 5f       	subi	r24, 0xFF	; 255
    4938:	82 83       	std	Z+2, r24	; 0x02
    493a:	03 80       	ldd	r0, Z+3	; 0x03
    493c:	f4 81       	ldd	r31, Z+4	; 0x04
    493e:	e0 2d       	mov	r30, r0

         /*------------------------------------------------------------------*
          * Enable interrupt.
          *------------------------------------------------------------------*/
         if( t_type == DMA_TRANSFER_COMPLETE)
    4940:	ee 20       	and	r14, r14
    4942:	19 f4       	brne	.+6      	; 0x494a <hal_requestDmaInterrupt+0xd8>
            pt_dElement->pt_dma->CTRLB |= DMA_CH_TRNINTLVL_gm;
    4944:	81 81       	ldd	r24, Z+1	; 0x01
    4946:	83 60       	ori	r24, 0x03	; 3
    4948:	02 c0       	rjmp	.+4      	; 0x494e <hal_requestDmaInterrupt+0xdc>
         else
            pt_dElement->pt_dma->CTRLB |= DMA_CH_ERRINTLVL_gm;
    494a:	81 81       	ldd	r24, Z+1	; 0x01
    494c:	8c 60       	ori	r24, 0x0C	; 12
    494e:	81 83       	std	Z+1, r24	; 0x01
         return DMA_INTERRUPT_OPEN;
      }

   }

   HAL_END_CRITICAL();//Enable interrupts
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	8f bf       	out	0x3f, r24	; 63
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	03 c0       	rjmp	.+6      	; 0x495e <hal_requestDmaInterrupt+0xec>
            pt_dElement->pt_dma->CTRLB |= DMA_CH_ERRINTLVL_gm;

      }/*End if( pt_iElement == NULL)*/
      else /*Yes*/
      {
         HAL_END_CRITICAL();//Enable interrupts
    4958:	89 81       	ldd	r24, Y+1	; 0x01
    495a:	8f bf       	out	0x3f, r24	; 63
    495c:	8a ef       	ldi	r24, 0xFA	; 250

   HAL_END_CRITICAL();//Enable interrupts

   return DMA_PASSED;

}/*End hal_requestDmaInterrupt*/
    495e:	27 96       	adiw	r28, 0x07	; 7
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	de bf       	out	0x3e, r29	; 62
    4964:	cf 91       	pop	r28
    4966:	df 91       	pop	r29
    4968:	1f 91       	pop	r17
    496a:	0f 91       	pop	r16
    496c:	ff 90       	pop	r15
    496e:	ef 90       	pop	r14
    4970:	df 90       	pop	r13
    4972:	cf 90       	pop	r12
    4974:	08 95       	ret

00004976 <findGpioIntElement>:
   }

}/*End ISR( PORTR_INT1_vect)*/

static t_gpioIntHndl *findGpioIntElement( t_portIntId t_id)
{
    4976:	df 93       	push	r29
    4978:	cf 93       	push	r28
    497a:	0f 92       	push	r0
    497c:	0f 92       	push	r0
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the GPIO interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_gpioHndlList, s_count)
    4984:	e0 91 a9 20 	lds	r30, 0x20A9
    4988:	f0 91 aa 20 	lds	r31, 0x20AA
    498c:	22 81       	ldd	r18, Z+2	; 0x02
    498e:	33 81       	ldd	r19, Z+3	; 0x03
    4990:	e0 91 a9 20 	lds	r30, 0x20A9
    4994:	f0 91 aa 20 	lds	r31, 0x20AA
    4998:	0c c0       	rjmp	.+24     	; 0x49b2 <findGpioIntElement+0x3c>
   {
      pt_element = (t_gpioIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    499a:	e9 81       	ldd	r30, Y+1	; 0x01
    499c:	fa 81       	ldd	r31, Y+2	; 0x02
    499e:	01 90       	ld	r0, Z+
    49a0:	f0 81       	ld	r31, Z
    49a2:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    49a4:	80 81       	ld	r24, Z
    49a6:	84 17       	cp	r24, r20
    49a8:	69 f0       	breq	.+26     	; 0x49c4 <findGpioIntElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the GPIO interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_gpioHndlList, s_count)
    49aa:	21 50       	subi	r18, 0x01	; 1
    49ac:	30 40       	sbci	r19, 0x00	; 0
    49ae:	e9 81       	ldd	r30, Y+1	; 0x01
    49b0:	fa 81       	ldd	r31, Y+2	; 0x02
    49b2:	80 85       	ldd	r24, Z+8	; 0x08
    49b4:	91 85       	ldd	r25, Z+9	; 0x09
    49b6:	89 83       	std	Y+1, r24	; 0x01
    49b8:	9a 83       	std	Y+2, r25	; 0x02
    49ba:	12 16       	cp	r1, r18
    49bc:	13 06       	cpc	r1, r19
    49be:	6c f3       	brlt	.-38     	; 0x499a <findGpioIntElement+0x24>
    49c0:	e0 e0       	ldi	r30, 0x00	; 0
    49c2:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open GPIO
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End findGpioIntElement*/
    49c4:	cf 01       	movw	r24, r30
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	cf 91       	pop	r28
    49cc:	df 91       	pop	r29
    49ce:	08 95       	ret

000049d0 <__vector_5>:
   }

}/*End ISR( PORTR_INT0_vect)*/

ISR( PORTR_INT1_vect)
{
    49d0:	1f 92       	push	r1
    49d2:	0f 92       	push	r0
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	0f 92       	push	r0
    49d8:	08 b6       	in	r0, 0x38	; 56
    49da:	0f 92       	push	r0
    49dc:	09 b6       	in	r0, 0x39	; 57
    49de:	0f 92       	push	r0
    49e0:	0b b6       	in	r0, 0x3b	; 59
    49e2:	0f 92       	push	r0
    49e4:	11 24       	eor	r1, r1
    49e6:	18 be       	out	0x38, r1	; 56
    49e8:	19 be       	out	0x39, r1	; 57
    49ea:	1b be       	out	0x3b, r1	; 59
    49ec:	2f 93       	push	r18
    49ee:	3f 93       	push	r19
    49f0:	4f 93       	push	r20
    49f2:	5f 93       	push	r21
    49f4:	6f 93       	push	r22
    49f6:	7f 93       	push	r23
    49f8:	8f 93       	push	r24
    49fa:	9f 93       	push	r25
    49fc:	af 93       	push	r26
    49fe:	bf 93       	push	r27
    4a00:	ef 93       	push	r30
    4a02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTR_INT1);
    4a04:	85 e1       	ldi	r24, 0x15	; 21
    4a06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4a0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4a0c:	00 97       	sbiw	r24, 0x00	; 0
    4a0e:	49 f0       	breq	.+18     	; 0x4a22 <__vector_5+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4a10:	22 81       	ldd	r18, Z+2	; 0x02
    4a12:	33 81       	ldd	r19, Z+3	; 0x03
    4a14:	21 15       	cp	r18, r1
    4a16:	31 05       	cpc	r19, r1
    4a18:	21 f0       	breq	.+8      	; 0x4a22 <__vector_5+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTR,
    4a1a:	8a e0       	ldi	r24, 0x0A	; 10
    4a1c:	61 81       	ldd	r22, Z+1	; 0x01
    4a1e:	f9 01       	movw	r30, r18
    4a20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTR_INT1_vect)*/
    4a22:	ff 91       	pop	r31
    4a24:	ef 91       	pop	r30
    4a26:	bf 91       	pop	r27
    4a28:	af 91       	pop	r26
    4a2a:	9f 91       	pop	r25
    4a2c:	8f 91       	pop	r24
    4a2e:	7f 91       	pop	r23
    4a30:	6f 91       	pop	r22
    4a32:	5f 91       	pop	r21
    4a34:	4f 91       	pop	r20
    4a36:	3f 91       	pop	r19
    4a38:	2f 91       	pop	r18
    4a3a:	0f 90       	pop	r0
    4a3c:	0b be       	out	0x3b, r0	; 59
    4a3e:	0f 90       	pop	r0
    4a40:	09 be       	out	0x39, r0	; 57
    4a42:	0f 90       	pop	r0
    4a44:	08 be       	out	0x38, r0	; 56
    4a46:	0f 90       	pop	r0
    4a48:	0f be       	out	0x3f, r0	; 63
    4a4a:	0f 90       	pop	r0
    4a4c:	1f 90       	pop	r1
    4a4e:	18 95       	reti

00004a50 <__vector_4>:
   }

}/*End ISR( PORTQ_INT1_vect)*/

ISR( PORTR_INT0_vect)
{
    4a50:	1f 92       	push	r1
    4a52:	0f 92       	push	r0
    4a54:	0f b6       	in	r0, 0x3f	; 63
    4a56:	0f 92       	push	r0
    4a58:	08 b6       	in	r0, 0x38	; 56
    4a5a:	0f 92       	push	r0
    4a5c:	09 b6       	in	r0, 0x39	; 57
    4a5e:	0f 92       	push	r0
    4a60:	0b b6       	in	r0, 0x3b	; 59
    4a62:	0f 92       	push	r0
    4a64:	11 24       	eor	r1, r1
    4a66:	18 be       	out	0x38, r1	; 56
    4a68:	19 be       	out	0x39, r1	; 57
    4a6a:	1b be       	out	0x3b, r1	; 59
    4a6c:	2f 93       	push	r18
    4a6e:	3f 93       	push	r19
    4a70:	4f 93       	push	r20
    4a72:	5f 93       	push	r21
    4a74:	6f 93       	push	r22
    4a76:	7f 93       	push	r23
    4a78:	8f 93       	push	r24
    4a7a:	9f 93       	push	r25
    4a7c:	af 93       	push	r26
    4a7e:	bf 93       	push	r27
    4a80:	ef 93       	push	r30
    4a82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTR_INT0);
    4a84:	84 e1       	ldi	r24, 0x14	; 20
    4a86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4a8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	49 f0       	breq	.+18     	; 0x4aa2 <__vector_4+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4a90:	22 81       	ldd	r18, Z+2	; 0x02
    4a92:	33 81       	ldd	r19, Z+3	; 0x03
    4a94:	21 15       	cp	r18, r1
    4a96:	31 05       	cpc	r19, r1
    4a98:	21 f0       	breq	.+8      	; 0x4aa2 <__vector_4+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTR,
    4a9a:	8a e0       	ldi	r24, 0x0A	; 10
    4a9c:	61 81       	ldd	r22, Z+1	; 0x01
    4a9e:	f9 01       	movw	r30, r18
    4aa0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTR_INT0_vect)*/
    4aa2:	ff 91       	pop	r31
    4aa4:	ef 91       	pop	r30
    4aa6:	bf 91       	pop	r27
    4aa8:	af 91       	pop	r26
    4aaa:	9f 91       	pop	r25
    4aac:	8f 91       	pop	r24
    4aae:	7f 91       	pop	r23
    4ab0:	6f 91       	pop	r22
    4ab2:	5f 91       	pop	r21
    4ab4:	4f 91       	pop	r20
    4ab6:	3f 91       	pop	r19
    4ab8:	2f 91       	pop	r18
    4aba:	0f 90       	pop	r0
    4abc:	0b be       	out	0x3b, r0	; 59
    4abe:	0f 90       	pop	r0
    4ac0:	09 be       	out	0x39, r0	; 57
    4ac2:	0f 90       	pop	r0
    4ac4:	08 be       	out	0x38, r0	; 56
    4ac6:	0f 90       	pop	r0
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	0f 90       	pop	r0
    4acc:	1f 90       	pop	r1
    4ace:	18 95       	reti

00004ad0 <__vector_95>:
   }

}/*End ISR( PORTQ_INT0_vect)*/

ISR( PORTQ_INT1_vect)
{
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	0f 92       	push	r0
    4ad8:	08 b6       	in	r0, 0x38	; 56
    4ada:	0f 92       	push	r0
    4adc:	09 b6       	in	r0, 0x39	; 57
    4ade:	0f 92       	push	r0
    4ae0:	0b b6       	in	r0, 0x3b	; 59
    4ae2:	0f 92       	push	r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	18 be       	out	0x38, r1	; 56
    4ae8:	19 be       	out	0x39, r1	; 57
    4aea:	1b be       	out	0x3b, r1	; 59
    4aec:	2f 93       	push	r18
    4aee:	3f 93       	push	r19
    4af0:	4f 93       	push	r20
    4af2:	5f 93       	push	r21
    4af4:	6f 93       	push	r22
    4af6:	7f 93       	push	r23
    4af8:	8f 93       	push	r24
    4afa:	9f 93       	push	r25
    4afc:	af 93       	push	r26
    4afe:	bf 93       	push	r27
    4b00:	ef 93       	push	r30
    4b02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTQ_INT1);
    4b04:	83 e1       	ldi	r24, 0x13	; 19
    4b06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4b0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4b0c:	00 97       	sbiw	r24, 0x00	; 0
    4b0e:	49 f0       	breq	.+18     	; 0x4b22 <__vector_95+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4b10:	22 81       	ldd	r18, Z+2	; 0x02
    4b12:	33 81       	ldd	r19, Z+3	; 0x03
    4b14:	21 15       	cp	r18, r1
    4b16:	31 05       	cpc	r19, r1
    4b18:	21 f0       	breq	.+8      	; 0x4b22 <__vector_95+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTQ,
    4b1a:	89 e0       	ldi	r24, 0x09	; 9
    4b1c:	61 81       	ldd	r22, Z+1	; 0x01
    4b1e:	f9 01       	movw	r30, r18
    4b20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTQ_INT1_vect)*/
    4b22:	ff 91       	pop	r31
    4b24:	ef 91       	pop	r30
    4b26:	bf 91       	pop	r27
    4b28:	af 91       	pop	r26
    4b2a:	9f 91       	pop	r25
    4b2c:	8f 91       	pop	r24
    4b2e:	7f 91       	pop	r23
    4b30:	6f 91       	pop	r22
    4b32:	5f 91       	pop	r21
    4b34:	4f 91       	pop	r20
    4b36:	3f 91       	pop	r19
    4b38:	2f 91       	pop	r18
    4b3a:	0f 90       	pop	r0
    4b3c:	0b be       	out	0x3b, r0	; 59
    4b3e:	0f 90       	pop	r0
    4b40:	09 be       	out	0x39, r0	; 57
    4b42:	0f 90       	pop	r0
    4b44:	08 be       	out	0x38, r0	; 56
    4b46:	0f 90       	pop	r0
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	0f 90       	pop	r0
    4b4c:	1f 90       	pop	r1
    4b4e:	18 95       	reti

00004b50 <__vector_94>:
   }

}/*End ISR( PORTK_INT1_vect)*/

ISR( PORTQ_INT0_vect)
{
    4b50:	1f 92       	push	r1
    4b52:	0f 92       	push	r0
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	0f 92       	push	r0
    4b58:	08 b6       	in	r0, 0x38	; 56
    4b5a:	0f 92       	push	r0
    4b5c:	09 b6       	in	r0, 0x39	; 57
    4b5e:	0f 92       	push	r0
    4b60:	0b b6       	in	r0, 0x3b	; 59
    4b62:	0f 92       	push	r0
    4b64:	11 24       	eor	r1, r1
    4b66:	18 be       	out	0x38, r1	; 56
    4b68:	19 be       	out	0x39, r1	; 57
    4b6a:	1b be       	out	0x3b, r1	; 59
    4b6c:	2f 93       	push	r18
    4b6e:	3f 93       	push	r19
    4b70:	4f 93       	push	r20
    4b72:	5f 93       	push	r21
    4b74:	6f 93       	push	r22
    4b76:	7f 93       	push	r23
    4b78:	8f 93       	push	r24
    4b7a:	9f 93       	push	r25
    4b7c:	af 93       	push	r26
    4b7e:	bf 93       	push	r27
    4b80:	ef 93       	push	r30
    4b82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTQ_INT0);
    4b84:	82 e1       	ldi	r24, 0x12	; 18
    4b86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4b8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4b8c:	00 97       	sbiw	r24, 0x00	; 0
    4b8e:	49 f0       	breq	.+18     	; 0x4ba2 <__vector_94+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4b90:	22 81       	ldd	r18, Z+2	; 0x02
    4b92:	33 81       	ldd	r19, Z+3	; 0x03
    4b94:	21 15       	cp	r18, r1
    4b96:	31 05       	cpc	r19, r1
    4b98:	21 f0       	breq	.+8      	; 0x4ba2 <__vector_94+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTQ,
    4b9a:	89 e0       	ldi	r24, 0x09	; 9
    4b9c:	61 81       	ldd	r22, Z+1	; 0x01
    4b9e:	f9 01       	movw	r30, r18
    4ba0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTQ_INT0_vect)*/
    4ba2:	ff 91       	pop	r31
    4ba4:	ef 91       	pop	r30
    4ba6:	bf 91       	pop	r27
    4ba8:	af 91       	pop	r26
    4baa:	9f 91       	pop	r25
    4bac:	8f 91       	pop	r24
    4bae:	7f 91       	pop	r23
    4bb0:	6f 91       	pop	r22
    4bb2:	5f 91       	pop	r21
    4bb4:	4f 91       	pop	r20
    4bb6:	3f 91       	pop	r19
    4bb8:	2f 91       	pop	r18
    4bba:	0f 90       	pop	r0
    4bbc:	0b be       	out	0x3b, r0	; 59
    4bbe:	0f 90       	pop	r0
    4bc0:	09 be       	out	0x39, r0	; 57
    4bc2:	0f 90       	pop	r0
    4bc4:	08 be       	out	0x38, r0	; 56
    4bc6:	0f 90       	pop	r0
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	0f 90       	pop	r0
    4bcc:	1f 90       	pop	r1
    4bce:	18 95       	reti

00004bd0 <__vector_101>:
   }

}/*End ISR( PORTK_INT0_vect)*/

ISR( PORTK_INT1_vect)
{
    4bd0:	1f 92       	push	r1
    4bd2:	0f 92       	push	r0
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	0f 92       	push	r0
    4bd8:	08 b6       	in	r0, 0x38	; 56
    4bda:	0f 92       	push	r0
    4bdc:	09 b6       	in	r0, 0x39	; 57
    4bde:	0f 92       	push	r0
    4be0:	0b b6       	in	r0, 0x3b	; 59
    4be2:	0f 92       	push	r0
    4be4:	11 24       	eor	r1, r1
    4be6:	18 be       	out	0x38, r1	; 56
    4be8:	19 be       	out	0x39, r1	; 57
    4bea:	1b be       	out	0x3b, r1	; 59
    4bec:	2f 93       	push	r18
    4bee:	3f 93       	push	r19
    4bf0:	4f 93       	push	r20
    4bf2:	5f 93       	push	r21
    4bf4:	6f 93       	push	r22
    4bf6:	7f 93       	push	r23
    4bf8:	8f 93       	push	r24
    4bfa:	9f 93       	push	r25
    4bfc:	af 93       	push	r26
    4bfe:	bf 93       	push	r27
    4c00:	ef 93       	push	r30
    4c02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTK_INT1);
    4c04:	81 e1       	ldi	r24, 0x11	; 17
    4c06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4c0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4c0c:	00 97       	sbiw	r24, 0x00	; 0
    4c0e:	49 f0       	breq	.+18     	; 0x4c22 <__vector_101+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4c10:	22 81       	ldd	r18, Z+2	; 0x02
    4c12:	33 81       	ldd	r19, Z+3	; 0x03
    4c14:	21 15       	cp	r18, r1
    4c16:	31 05       	cpc	r19, r1
    4c18:	21 f0       	breq	.+8      	; 0x4c22 <__vector_101+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTK,
    4c1a:	88 e0       	ldi	r24, 0x08	; 8
    4c1c:	61 81       	ldd	r22, Z+1	; 0x01
    4c1e:	f9 01       	movw	r30, r18
    4c20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTK_INT1_vect)*/
    4c22:	ff 91       	pop	r31
    4c24:	ef 91       	pop	r30
    4c26:	bf 91       	pop	r27
    4c28:	af 91       	pop	r26
    4c2a:	9f 91       	pop	r25
    4c2c:	8f 91       	pop	r24
    4c2e:	7f 91       	pop	r23
    4c30:	6f 91       	pop	r22
    4c32:	5f 91       	pop	r21
    4c34:	4f 91       	pop	r20
    4c36:	3f 91       	pop	r19
    4c38:	2f 91       	pop	r18
    4c3a:	0f 90       	pop	r0
    4c3c:	0b be       	out	0x3b, r0	; 59
    4c3e:	0f 90       	pop	r0
    4c40:	09 be       	out	0x39, r0	; 57
    4c42:	0f 90       	pop	r0
    4c44:	08 be       	out	0x38, r0	; 56
    4c46:	0f 90       	pop	r0
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	0f 90       	pop	r0
    4c4c:	1f 90       	pop	r1
    4c4e:	18 95       	reti

00004c50 <__vector_100>:
   }

}/*End ISR( PORTJ_INT1_vect)*/

ISR( PORTK_INT0_vect)
{
    4c50:	1f 92       	push	r1
    4c52:	0f 92       	push	r0
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	0f 92       	push	r0
    4c58:	08 b6       	in	r0, 0x38	; 56
    4c5a:	0f 92       	push	r0
    4c5c:	09 b6       	in	r0, 0x39	; 57
    4c5e:	0f 92       	push	r0
    4c60:	0b b6       	in	r0, 0x3b	; 59
    4c62:	0f 92       	push	r0
    4c64:	11 24       	eor	r1, r1
    4c66:	18 be       	out	0x38, r1	; 56
    4c68:	19 be       	out	0x39, r1	; 57
    4c6a:	1b be       	out	0x3b, r1	; 59
    4c6c:	2f 93       	push	r18
    4c6e:	3f 93       	push	r19
    4c70:	4f 93       	push	r20
    4c72:	5f 93       	push	r21
    4c74:	6f 93       	push	r22
    4c76:	7f 93       	push	r23
    4c78:	8f 93       	push	r24
    4c7a:	9f 93       	push	r25
    4c7c:	af 93       	push	r26
    4c7e:	bf 93       	push	r27
    4c80:	ef 93       	push	r30
    4c82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTK_INT0);
    4c84:	80 e1       	ldi	r24, 0x10	; 16
    4c86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4c8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4c8c:	00 97       	sbiw	r24, 0x00	; 0
    4c8e:	49 f0       	breq	.+18     	; 0x4ca2 <__vector_100+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4c90:	22 81       	ldd	r18, Z+2	; 0x02
    4c92:	33 81       	ldd	r19, Z+3	; 0x03
    4c94:	21 15       	cp	r18, r1
    4c96:	31 05       	cpc	r19, r1
    4c98:	21 f0       	breq	.+8      	; 0x4ca2 <__vector_100+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTK,
    4c9a:	88 e0       	ldi	r24, 0x08	; 8
    4c9c:	61 81       	ldd	r22, Z+1	; 0x01
    4c9e:	f9 01       	movw	r30, r18
    4ca0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTK_INT0_vect)*/
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	09 be       	out	0x39, r0	; 57
    4cc2:	0f 90       	pop	r0
    4cc4:	08 be       	out	0x38, r0	; 56
    4cc6:	0f 90       	pop	r0
    4cc8:	0f be       	out	0x3f, r0	; 63
    4cca:	0f 90       	pop	r0
    4ccc:	1f 90       	pop	r1
    4cce:	18 95       	reti

00004cd0 <__vector_99>:
   }

}/*End ISR( PORTJ_INT0_vect)*/

ISR( PORTJ_INT1_vect)
{
    4cd0:	1f 92       	push	r1
    4cd2:	0f 92       	push	r0
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	0f 92       	push	r0
    4cd8:	08 b6       	in	r0, 0x38	; 56
    4cda:	0f 92       	push	r0
    4cdc:	09 b6       	in	r0, 0x39	; 57
    4cde:	0f 92       	push	r0
    4ce0:	0b b6       	in	r0, 0x3b	; 59
    4ce2:	0f 92       	push	r0
    4ce4:	11 24       	eor	r1, r1
    4ce6:	18 be       	out	0x38, r1	; 56
    4ce8:	19 be       	out	0x39, r1	; 57
    4cea:	1b be       	out	0x3b, r1	; 59
    4cec:	2f 93       	push	r18
    4cee:	3f 93       	push	r19
    4cf0:	4f 93       	push	r20
    4cf2:	5f 93       	push	r21
    4cf4:	6f 93       	push	r22
    4cf6:	7f 93       	push	r23
    4cf8:	8f 93       	push	r24
    4cfa:	9f 93       	push	r25
    4cfc:	af 93       	push	r26
    4cfe:	bf 93       	push	r27
    4d00:	ef 93       	push	r30
    4d02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTJ_INT1);
    4d04:	8f e0       	ldi	r24, 0x0F	; 15
    4d06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4d0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4d0c:	00 97       	sbiw	r24, 0x00	; 0
    4d0e:	49 f0       	breq	.+18     	; 0x4d22 <__vector_99+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4d10:	22 81       	ldd	r18, Z+2	; 0x02
    4d12:	33 81       	ldd	r19, Z+3	; 0x03
    4d14:	21 15       	cp	r18, r1
    4d16:	31 05       	cpc	r19, r1
    4d18:	21 f0       	breq	.+8      	; 0x4d22 <__vector_99+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTJ,
    4d1a:	87 e0       	ldi	r24, 0x07	; 7
    4d1c:	61 81       	ldd	r22, Z+1	; 0x01
    4d1e:	f9 01       	movw	r30, r18
    4d20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTJ_INT1_vect)*/
    4d22:	ff 91       	pop	r31
    4d24:	ef 91       	pop	r30
    4d26:	bf 91       	pop	r27
    4d28:	af 91       	pop	r26
    4d2a:	9f 91       	pop	r25
    4d2c:	8f 91       	pop	r24
    4d2e:	7f 91       	pop	r23
    4d30:	6f 91       	pop	r22
    4d32:	5f 91       	pop	r21
    4d34:	4f 91       	pop	r20
    4d36:	3f 91       	pop	r19
    4d38:	2f 91       	pop	r18
    4d3a:	0f 90       	pop	r0
    4d3c:	0b be       	out	0x3b, r0	; 59
    4d3e:	0f 90       	pop	r0
    4d40:	09 be       	out	0x39, r0	; 57
    4d42:	0f 90       	pop	r0
    4d44:	08 be       	out	0x38, r0	; 56
    4d46:	0f 90       	pop	r0
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	0f 90       	pop	r0
    4d4c:	1f 90       	pop	r1
    4d4e:	18 95       	reti

00004d50 <__vector_98>:
   }

}/*End ISR( PORTH_INT1_vect)*/

ISR( PORTJ_INT0_vect)
{
    4d50:	1f 92       	push	r1
    4d52:	0f 92       	push	r0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	0f 92       	push	r0
    4d58:	08 b6       	in	r0, 0x38	; 56
    4d5a:	0f 92       	push	r0
    4d5c:	09 b6       	in	r0, 0x39	; 57
    4d5e:	0f 92       	push	r0
    4d60:	0b b6       	in	r0, 0x3b	; 59
    4d62:	0f 92       	push	r0
    4d64:	11 24       	eor	r1, r1
    4d66:	18 be       	out	0x38, r1	; 56
    4d68:	19 be       	out	0x39, r1	; 57
    4d6a:	1b be       	out	0x3b, r1	; 59
    4d6c:	2f 93       	push	r18
    4d6e:	3f 93       	push	r19
    4d70:	4f 93       	push	r20
    4d72:	5f 93       	push	r21
    4d74:	6f 93       	push	r22
    4d76:	7f 93       	push	r23
    4d78:	8f 93       	push	r24
    4d7a:	9f 93       	push	r25
    4d7c:	af 93       	push	r26
    4d7e:	bf 93       	push	r27
    4d80:	ef 93       	push	r30
    4d82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTJ_INT0);
    4d84:	8e e0       	ldi	r24, 0x0E	; 14
    4d86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4d8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4d8c:	00 97       	sbiw	r24, 0x00	; 0
    4d8e:	49 f0       	breq	.+18     	; 0x4da2 <__vector_98+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4d90:	22 81       	ldd	r18, Z+2	; 0x02
    4d92:	33 81       	ldd	r19, Z+3	; 0x03
    4d94:	21 15       	cp	r18, r1
    4d96:	31 05       	cpc	r19, r1
    4d98:	21 f0       	breq	.+8      	; 0x4da2 <__vector_98+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTJ,
    4d9a:	87 e0       	ldi	r24, 0x07	; 7
    4d9c:	61 81       	ldd	r22, Z+1	; 0x01
    4d9e:	f9 01       	movw	r30, r18
    4da0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTJ_INT0_vect)*/
    4da2:	ff 91       	pop	r31
    4da4:	ef 91       	pop	r30
    4da6:	bf 91       	pop	r27
    4da8:	af 91       	pop	r26
    4daa:	9f 91       	pop	r25
    4dac:	8f 91       	pop	r24
    4dae:	7f 91       	pop	r23
    4db0:	6f 91       	pop	r22
    4db2:	5f 91       	pop	r21
    4db4:	4f 91       	pop	r20
    4db6:	3f 91       	pop	r19
    4db8:	2f 91       	pop	r18
    4dba:	0f 90       	pop	r0
    4dbc:	0b be       	out	0x3b, r0	; 59
    4dbe:	0f 90       	pop	r0
    4dc0:	09 be       	out	0x39, r0	; 57
    4dc2:	0f 90       	pop	r0
    4dc4:	08 be       	out	0x38, r0	; 56
    4dc6:	0f 90       	pop	r0
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	0f 90       	pop	r0
    4dcc:	1f 90       	pop	r1
    4dce:	18 95       	reti

00004dd0 <__vector_97>:
   }

}/*End ISR( PORTH_INT0_vect)*/

ISR( PORTH_INT1_vect)
{
    4dd0:	1f 92       	push	r1
    4dd2:	0f 92       	push	r0
    4dd4:	0f b6       	in	r0, 0x3f	; 63
    4dd6:	0f 92       	push	r0
    4dd8:	08 b6       	in	r0, 0x38	; 56
    4dda:	0f 92       	push	r0
    4ddc:	09 b6       	in	r0, 0x39	; 57
    4dde:	0f 92       	push	r0
    4de0:	0b b6       	in	r0, 0x3b	; 59
    4de2:	0f 92       	push	r0
    4de4:	11 24       	eor	r1, r1
    4de6:	18 be       	out	0x38, r1	; 56
    4de8:	19 be       	out	0x39, r1	; 57
    4dea:	1b be       	out	0x3b, r1	; 59
    4dec:	2f 93       	push	r18
    4dee:	3f 93       	push	r19
    4df0:	4f 93       	push	r20
    4df2:	5f 93       	push	r21
    4df4:	6f 93       	push	r22
    4df6:	7f 93       	push	r23
    4df8:	8f 93       	push	r24
    4dfa:	9f 93       	push	r25
    4dfc:	af 93       	push	r26
    4dfe:	bf 93       	push	r27
    4e00:	ef 93       	push	r30
    4e02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTH_INT1);
    4e04:	8d e0       	ldi	r24, 0x0D	; 13
    4e06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4e0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	49 f0       	breq	.+18     	; 0x4e22 <__vector_97+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4e10:	22 81       	ldd	r18, Z+2	; 0x02
    4e12:	33 81       	ldd	r19, Z+3	; 0x03
    4e14:	21 15       	cp	r18, r1
    4e16:	31 05       	cpc	r19, r1
    4e18:	21 f0       	breq	.+8      	; 0x4e22 <__vector_97+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTH,
    4e1a:	86 e0       	ldi	r24, 0x06	; 6
    4e1c:	61 81       	ldd	r22, Z+1	; 0x01
    4e1e:	f9 01       	movw	r30, r18
    4e20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTH_INT1_vect)*/
    4e22:	ff 91       	pop	r31
    4e24:	ef 91       	pop	r30
    4e26:	bf 91       	pop	r27
    4e28:	af 91       	pop	r26
    4e2a:	9f 91       	pop	r25
    4e2c:	8f 91       	pop	r24
    4e2e:	7f 91       	pop	r23
    4e30:	6f 91       	pop	r22
    4e32:	5f 91       	pop	r21
    4e34:	4f 91       	pop	r20
    4e36:	3f 91       	pop	r19
    4e38:	2f 91       	pop	r18
    4e3a:	0f 90       	pop	r0
    4e3c:	0b be       	out	0x3b, r0	; 59
    4e3e:	0f 90       	pop	r0
    4e40:	09 be       	out	0x39, r0	; 57
    4e42:	0f 90       	pop	r0
    4e44:	08 be       	out	0x38, r0	; 56
    4e46:	0f 90       	pop	r0
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	0f 90       	pop	r0
    4e4c:	1f 90       	pop	r1
    4e4e:	18 95       	reti

00004e50 <__vector_96>:
   }

}/*End ISR( PORTF_INT1_vect)*/

ISR( PORTH_INT0_vect)
{
    4e50:	1f 92       	push	r1
    4e52:	0f 92       	push	r0
    4e54:	0f b6       	in	r0, 0x3f	; 63
    4e56:	0f 92       	push	r0
    4e58:	08 b6       	in	r0, 0x38	; 56
    4e5a:	0f 92       	push	r0
    4e5c:	09 b6       	in	r0, 0x39	; 57
    4e5e:	0f 92       	push	r0
    4e60:	0b b6       	in	r0, 0x3b	; 59
    4e62:	0f 92       	push	r0
    4e64:	11 24       	eor	r1, r1
    4e66:	18 be       	out	0x38, r1	; 56
    4e68:	19 be       	out	0x39, r1	; 57
    4e6a:	1b be       	out	0x3b, r1	; 59
    4e6c:	2f 93       	push	r18
    4e6e:	3f 93       	push	r19
    4e70:	4f 93       	push	r20
    4e72:	5f 93       	push	r21
    4e74:	6f 93       	push	r22
    4e76:	7f 93       	push	r23
    4e78:	8f 93       	push	r24
    4e7a:	9f 93       	push	r25
    4e7c:	af 93       	push	r26
    4e7e:	bf 93       	push	r27
    4e80:	ef 93       	push	r30
    4e82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTH_INT0);
    4e84:	8c e0       	ldi	r24, 0x0C	; 12
    4e86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4e8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	49 f0       	breq	.+18     	; 0x4ea2 <__vector_96+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4e90:	22 81       	ldd	r18, Z+2	; 0x02
    4e92:	33 81       	ldd	r19, Z+3	; 0x03
    4e94:	21 15       	cp	r18, r1
    4e96:	31 05       	cpc	r19, r1
    4e98:	21 f0       	breq	.+8      	; 0x4ea2 <__vector_96+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTH,
    4e9a:	86 e0       	ldi	r24, 0x06	; 6
    4e9c:	61 81       	ldd	r22, Z+1	; 0x01
    4e9e:	f9 01       	movw	r30, r18
    4ea0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTH_INT0_vect)*/
    4ea2:	ff 91       	pop	r31
    4ea4:	ef 91       	pop	r30
    4ea6:	bf 91       	pop	r27
    4ea8:	af 91       	pop	r26
    4eaa:	9f 91       	pop	r25
    4eac:	8f 91       	pop	r24
    4eae:	7f 91       	pop	r23
    4eb0:	6f 91       	pop	r22
    4eb2:	5f 91       	pop	r21
    4eb4:	4f 91       	pop	r20
    4eb6:	3f 91       	pop	r19
    4eb8:	2f 91       	pop	r18
    4eba:	0f 90       	pop	r0
    4ebc:	0b be       	out	0x3b, r0	; 59
    4ebe:	0f 90       	pop	r0
    4ec0:	09 be       	out	0x39, r0	; 57
    4ec2:	0f 90       	pop	r0
    4ec4:	08 be       	out	0x38, r0	; 56
    4ec6:	0f 90       	pop	r0
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	0f 90       	pop	r0
    4ecc:	1f 90       	pop	r1
    4ece:	18 95       	reti

00004ed0 <__vector_105>:
   }

}/*End ISR( PORTF_INT0_vect)*/

ISR( PORTF_INT1_vect)
{
    4ed0:	1f 92       	push	r1
    4ed2:	0f 92       	push	r0
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	0f 92       	push	r0
    4ed8:	08 b6       	in	r0, 0x38	; 56
    4eda:	0f 92       	push	r0
    4edc:	09 b6       	in	r0, 0x39	; 57
    4ede:	0f 92       	push	r0
    4ee0:	0b b6       	in	r0, 0x3b	; 59
    4ee2:	0f 92       	push	r0
    4ee4:	11 24       	eor	r1, r1
    4ee6:	18 be       	out	0x38, r1	; 56
    4ee8:	19 be       	out	0x39, r1	; 57
    4eea:	1b be       	out	0x3b, r1	; 59
    4eec:	2f 93       	push	r18
    4eee:	3f 93       	push	r19
    4ef0:	4f 93       	push	r20
    4ef2:	5f 93       	push	r21
    4ef4:	6f 93       	push	r22
    4ef6:	7f 93       	push	r23
    4ef8:	8f 93       	push	r24
    4efa:	9f 93       	push	r25
    4efc:	af 93       	push	r26
    4efe:	bf 93       	push	r27
    4f00:	ef 93       	push	r30
    4f02:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTF_INT1);
    4f04:	8b e0       	ldi	r24, 0x0B	; 11
    4f06:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4f0a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4f0c:	00 97       	sbiw	r24, 0x00	; 0
    4f0e:	49 f0       	breq	.+18     	; 0x4f22 <__vector_105+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4f10:	22 81       	ldd	r18, Z+2	; 0x02
    4f12:	33 81       	ldd	r19, Z+3	; 0x03
    4f14:	21 15       	cp	r18, r1
    4f16:	31 05       	cpc	r19, r1
    4f18:	21 f0       	breq	.+8      	; 0x4f22 <__vector_105+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTF,
    4f1a:	85 e0       	ldi	r24, 0x05	; 5
    4f1c:	61 81       	ldd	r22, Z+1	; 0x01
    4f1e:	f9 01       	movw	r30, r18
    4f20:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTF_INT1_vect)*/
    4f22:	ff 91       	pop	r31
    4f24:	ef 91       	pop	r30
    4f26:	bf 91       	pop	r27
    4f28:	af 91       	pop	r26
    4f2a:	9f 91       	pop	r25
    4f2c:	8f 91       	pop	r24
    4f2e:	7f 91       	pop	r23
    4f30:	6f 91       	pop	r22
    4f32:	5f 91       	pop	r21
    4f34:	4f 91       	pop	r20
    4f36:	3f 91       	pop	r19
    4f38:	2f 91       	pop	r18
    4f3a:	0f 90       	pop	r0
    4f3c:	0b be       	out	0x3b, r0	; 59
    4f3e:	0f 90       	pop	r0
    4f40:	09 be       	out	0x39, r0	; 57
    4f42:	0f 90       	pop	r0
    4f44:	08 be       	out	0x38, r0	; 56
    4f46:	0f 90       	pop	r0
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	0f 90       	pop	r0
    4f4c:	1f 90       	pop	r1
    4f4e:	18 95       	reti

00004f50 <__vector_104>:
   }

}/*End ISR( PORTE_INT1_vect)*/

ISR( PORTF_INT0_vect)
{
    4f50:	1f 92       	push	r1
    4f52:	0f 92       	push	r0
    4f54:	0f b6       	in	r0, 0x3f	; 63
    4f56:	0f 92       	push	r0
    4f58:	08 b6       	in	r0, 0x38	; 56
    4f5a:	0f 92       	push	r0
    4f5c:	09 b6       	in	r0, 0x39	; 57
    4f5e:	0f 92       	push	r0
    4f60:	0b b6       	in	r0, 0x3b	; 59
    4f62:	0f 92       	push	r0
    4f64:	11 24       	eor	r1, r1
    4f66:	18 be       	out	0x38, r1	; 56
    4f68:	19 be       	out	0x39, r1	; 57
    4f6a:	1b be       	out	0x3b, r1	; 59
    4f6c:	2f 93       	push	r18
    4f6e:	3f 93       	push	r19
    4f70:	4f 93       	push	r20
    4f72:	5f 93       	push	r21
    4f74:	6f 93       	push	r22
    4f76:	7f 93       	push	r23
    4f78:	8f 93       	push	r24
    4f7a:	9f 93       	push	r25
    4f7c:	af 93       	push	r26
    4f7e:	bf 93       	push	r27
    4f80:	ef 93       	push	r30
    4f82:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTF_INT0);
    4f84:	8a e0       	ldi	r24, 0x0A	; 10
    4f86:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    4f8a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    4f8c:	00 97       	sbiw	r24, 0x00	; 0
    4f8e:	49 f0       	breq	.+18     	; 0x4fa2 <__vector_104+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    4f90:	22 81       	ldd	r18, Z+2	; 0x02
    4f92:	33 81       	ldd	r19, Z+3	; 0x03
    4f94:	21 15       	cp	r18, r1
    4f96:	31 05       	cpc	r19, r1
    4f98:	21 f0       	breq	.+8      	; 0x4fa2 <__vector_104+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTF,
    4f9a:	85 e0       	ldi	r24, 0x05	; 5
    4f9c:	61 81       	ldd	r22, Z+1	; 0x01
    4f9e:	f9 01       	movw	r30, r18
    4fa0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTF_INT0_vect)*/
    4fa2:	ff 91       	pop	r31
    4fa4:	ef 91       	pop	r30
    4fa6:	bf 91       	pop	r27
    4fa8:	af 91       	pop	r26
    4faa:	9f 91       	pop	r25
    4fac:	8f 91       	pop	r24
    4fae:	7f 91       	pop	r23
    4fb0:	6f 91       	pop	r22
    4fb2:	5f 91       	pop	r21
    4fb4:	4f 91       	pop	r20
    4fb6:	3f 91       	pop	r19
    4fb8:	2f 91       	pop	r18
    4fba:	0f 90       	pop	r0
    4fbc:	0b be       	out	0x3b, r0	; 59
    4fbe:	0f 90       	pop	r0
    4fc0:	09 be       	out	0x39, r0	; 57
    4fc2:	0f 90       	pop	r0
    4fc4:	08 be       	out	0x38, r0	; 56
    4fc6:	0f 90       	pop	r0
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	0f 90       	pop	r0
    4fcc:	1f 90       	pop	r1
    4fce:	18 95       	reti

00004fd0 <__vector_44>:
   }

}/*End ISR( PORTE_INT0_vect)*/

ISR( PORTE_INT1_vect)
{
    4fd0:	1f 92       	push	r1
    4fd2:	0f 92       	push	r0
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	0f 92       	push	r0
    4fd8:	08 b6       	in	r0, 0x38	; 56
    4fda:	0f 92       	push	r0
    4fdc:	09 b6       	in	r0, 0x39	; 57
    4fde:	0f 92       	push	r0
    4fe0:	0b b6       	in	r0, 0x3b	; 59
    4fe2:	0f 92       	push	r0
    4fe4:	11 24       	eor	r1, r1
    4fe6:	18 be       	out	0x38, r1	; 56
    4fe8:	19 be       	out	0x39, r1	; 57
    4fea:	1b be       	out	0x3b, r1	; 59
    4fec:	2f 93       	push	r18
    4fee:	3f 93       	push	r19
    4ff0:	4f 93       	push	r20
    4ff2:	5f 93       	push	r21
    4ff4:	6f 93       	push	r22
    4ff6:	7f 93       	push	r23
    4ff8:	8f 93       	push	r24
    4ffa:	9f 93       	push	r25
    4ffc:	af 93       	push	r26
    4ffe:	bf 93       	push	r27
    5000:	ef 93       	push	r30
    5002:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTE_INT1);
    5004:	89 e0       	ldi	r24, 0x09	; 9
    5006:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    500a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    500c:	00 97       	sbiw	r24, 0x00	; 0
    500e:	49 f0       	breq	.+18     	; 0x5022 <__vector_44+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5010:	22 81       	ldd	r18, Z+2	; 0x02
    5012:	33 81       	ldd	r19, Z+3	; 0x03
    5014:	21 15       	cp	r18, r1
    5016:	31 05       	cpc	r19, r1
    5018:	21 f0       	breq	.+8      	; 0x5022 <__vector_44+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTE,
    501a:	84 e0       	ldi	r24, 0x04	; 4
    501c:	61 81       	ldd	r22, Z+1	; 0x01
    501e:	f9 01       	movw	r30, r18
    5020:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTE_INT1_vect)*/
    5022:	ff 91       	pop	r31
    5024:	ef 91       	pop	r30
    5026:	bf 91       	pop	r27
    5028:	af 91       	pop	r26
    502a:	9f 91       	pop	r25
    502c:	8f 91       	pop	r24
    502e:	7f 91       	pop	r23
    5030:	6f 91       	pop	r22
    5032:	5f 91       	pop	r21
    5034:	4f 91       	pop	r20
    5036:	3f 91       	pop	r19
    5038:	2f 91       	pop	r18
    503a:	0f 90       	pop	r0
    503c:	0b be       	out	0x3b, r0	; 59
    503e:	0f 90       	pop	r0
    5040:	09 be       	out	0x39, r0	; 57
    5042:	0f 90       	pop	r0
    5044:	08 be       	out	0x38, r0	; 56
    5046:	0f 90       	pop	r0
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	0f 90       	pop	r0
    504c:	1f 90       	pop	r1
    504e:	18 95       	reti

00005050 <__vector_43>:
   }

}/*End ISR( PORTD_INT1_vect)*/

ISR( PORTE_INT0_vect)
{
    5050:	1f 92       	push	r1
    5052:	0f 92       	push	r0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	0f 92       	push	r0
    5058:	08 b6       	in	r0, 0x38	; 56
    505a:	0f 92       	push	r0
    505c:	09 b6       	in	r0, 0x39	; 57
    505e:	0f 92       	push	r0
    5060:	0b b6       	in	r0, 0x3b	; 59
    5062:	0f 92       	push	r0
    5064:	11 24       	eor	r1, r1
    5066:	18 be       	out	0x38, r1	; 56
    5068:	19 be       	out	0x39, r1	; 57
    506a:	1b be       	out	0x3b, r1	; 59
    506c:	2f 93       	push	r18
    506e:	3f 93       	push	r19
    5070:	4f 93       	push	r20
    5072:	5f 93       	push	r21
    5074:	6f 93       	push	r22
    5076:	7f 93       	push	r23
    5078:	8f 93       	push	r24
    507a:	9f 93       	push	r25
    507c:	af 93       	push	r26
    507e:	bf 93       	push	r27
    5080:	ef 93       	push	r30
    5082:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTE_INT0);
    5084:	88 e0       	ldi	r24, 0x08	; 8
    5086:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    508a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    508c:	00 97       	sbiw	r24, 0x00	; 0
    508e:	49 f0       	breq	.+18     	; 0x50a2 <__vector_43+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5090:	22 81       	ldd	r18, Z+2	; 0x02
    5092:	33 81       	ldd	r19, Z+3	; 0x03
    5094:	21 15       	cp	r18, r1
    5096:	31 05       	cpc	r19, r1
    5098:	21 f0       	breq	.+8      	; 0x50a2 <__vector_43+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTE,
    509a:	84 e0       	ldi	r24, 0x04	; 4
    509c:	61 81       	ldd	r22, Z+1	; 0x01
    509e:	f9 01       	movw	r30, r18
    50a0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTE_INT0_vect)*/
    50a2:	ff 91       	pop	r31
    50a4:	ef 91       	pop	r30
    50a6:	bf 91       	pop	r27
    50a8:	af 91       	pop	r26
    50aa:	9f 91       	pop	r25
    50ac:	8f 91       	pop	r24
    50ae:	7f 91       	pop	r23
    50b0:	6f 91       	pop	r22
    50b2:	5f 91       	pop	r21
    50b4:	4f 91       	pop	r20
    50b6:	3f 91       	pop	r19
    50b8:	2f 91       	pop	r18
    50ba:	0f 90       	pop	r0
    50bc:	0b be       	out	0x3b, r0	; 59
    50be:	0f 90       	pop	r0
    50c0:	09 be       	out	0x39, r0	; 57
    50c2:	0f 90       	pop	r0
    50c4:	08 be       	out	0x38, r0	; 56
    50c6:	0f 90       	pop	r0
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	0f 90       	pop	r0
    50cc:	1f 90       	pop	r1
    50ce:	18 95       	reti

000050d0 <__vector_65>:
   }

}/*End ISR( PORTD_INT0_vect)*/

ISR( PORTD_INT1_vect)
{
    50d0:	1f 92       	push	r1
    50d2:	0f 92       	push	r0
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	0f 92       	push	r0
    50d8:	08 b6       	in	r0, 0x38	; 56
    50da:	0f 92       	push	r0
    50dc:	09 b6       	in	r0, 0x39	; 57
    50de:	0f 92       	push	r0
    50e0:	0b b6       	in	r0, 0x3b	; 59
    50e2:	0f 92       	push	r0
    50e4:	11 24       	eor	r1, r1
    50e6:	18 be       	out	0x38, r1	; 56
    50e8:	19 be       	out	0x39, r1	; 57
    50ea:	1b be       	out	0x3b, r1	; 59
    50ec:	2f 93       	push	r18
    50ee:	3f 93       	push	r19
    50f0:	4f 93       	push	r20
    50f2:	5f 93       	push	r21
    50f4:	6f 93       	push	r22
    50f6:	7f 93       	push	r23
    50f8:	8f 93       	push	r24
    50fa:	9f 93       	push	r25
    50fc:	af 93       	push	r26
    50fe:	bf 93       	push	r27
    5100:	ef 93       	push	r30
    5102:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTD_INT1);
    5104:	87 e0       	ldi	r24, 0x07	; 7
    5106:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    510a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	49 f0       	breq	.+18     	; 0x5122 <__vector_65+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5110:	22 81       	ldd	r18, Z+2	; 0x02
    5112:	33 81       	ldd	r19, Z+3	; 0x03
    5114:	21 15       	cp	r18, r1
    5116:	31 05       	cpc	r19, r1
    5118:	21 f0       	breq	.+8      	; 0x5122 <__vector_65+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTD,
    511a:	83 e0       	ldi	r24, 0x03	; 3
    511c:	61 81       	ldd	r22, Z+1	; 0x01
    511e:	f9 01       	movw	r30, r18
    5120:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTD_INT1_vect)*/
    5122:	ff 91       	pop	r31
    5124:	ef 91       	pop	r30
    5126:	bf 91       	pop	r27
    5128:	af 91       	pop	r26
    512a:	9f 91       	pop	r25
    512c:	8f 91       	pop	r24
    512e:	7f 91       	pop	r23
    5130:	6f 91       	pop	r22
    5132:	5f 91       	pop	r21
    5134:	4f 91       	pop	r20
    5136:	3f 91       	pop	r19
    5138:	2f 91       	pop	r18
    513a:	0f 90       	pop	r0
    513c:	0b be       	out	0x3b, r0	; 59
    513e:	0f 90       	pop	r0
    5140:	09 be       	out	0x39, r0	; 57
    5142:	0f 90       	pop	r0
    5144:	08 be       	out	0x38, r0	; 56
    5146:	0f 90       	pop	r0
    5148:	0f be       	out	0x3f, r0	; 63
    514a:	0f 90       	pop	r0
    514c:	1f 90       	pop	r1
    514e:	18 95       	reti

00005150 <__vector_64>:
   }

}/*End ISR( PORTC_INT1_vect)*/

ISR( PORTD_INT0_vect)
{
    5150:	1f 92       	push	r1
    5152:	0f 92       	push	r0
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	0f 92       	push	r0
    5158:	08 b6       	in	r0, 0x38	; 56
    515a:	0f 92       	push	r0
    515c:	09 b6       	in	r0, 0x39	; 57
    515e:	0f 92       	push	r0
    5160:	0b b6       	in	r0, 0x3b	; 59
    5162:	0f 92       	push	r0
    5164:	11 24       	eor	r1, r1
    5166:	18 be       	out	0x38, r1	; 56
    5168:	19 be       	out	0x39, r1	; 57
    516a:	1b be       	out	0x3b, r1	; 59
    516c:	2f 93       	push	r18
    516e:	3f 93       	push	r19
    5170:	4f 93       	push	r20
    5172:	5f 93       	push	r21
    5174:	6f 93       	push	r22
    5176:	7f 93       	push	r23
    5178:	8f 93       	push	r24
    517a:	9f 93       	push	r25
    517c:	af 93       	push	r26
    517e:	bf 93       	push	r27
    5180:	ef 93       	push	r30
    5182:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTD_INT0);
    5184:	86 e0       	ldi	r24, 0x06	; 6
    5186:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    518a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    518c:	00 97       	sbiw	r24, 0x00	; 0
    518e:	49 f0       	breq	.+18     	; 0x51a2 <__vector_64+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5190:	22 81       	ldd	r18, Z+2	; 0x02
    5192:	33 81       	ldd	r19, Z+3	; 0x03
    5194:	21 15       	cp	r18, r1
    5196:	31 05       	cpc	r19, r1
    5198:	21 f0       	breq	.+8      	; 0x51a2 <__vector_64+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTD,
    519a:	83 e0       	ldi	r24, 0x03	; 3
    519c:	61 81       	ldd	r22, Z+1	; 0x01
    519e:	f9 01       	movw	r30, r18
    51a0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTD_INT0_vect)*/
    51a2:	ff 91       	pop	r31
    51a4:	ef 91       	pop	r30
    51a6:	bf 91       	pop	r27
    51a8:	af 91       	pop	r26
    51aa:	9f 91       	pop	r25
    51ac:	8f 91       	pop	r24
    51ae:	7f 91       	pop	r23
    51b0:	6f 91       	pop	r22
    51b2:	5f 91       	pop	r21
    51b4:	4f 91       	pop	r20
    51b6:	3f 91       	pop	r19
    51b8:	2f 91       	pop	r18
    51ba:	0f 90       	pop	r0
    51bc:	0b be       	out	0x3b, r0	; 59
    51be:	0f 90       	pop	r0
    51c0:	09 be       	out	0x39, r0	; 57
    51c2:	0f 90       	pop	r0
    51c4:	08 be       	out	0x38, r0	; 56
    51c6:	0f 90       	pop	r0
    51c8:	0f be       	out	0x3f, r0	; 63
    51ca:	0f 90       	pop	r0
    51cc:	1f 90       	pop	r1
    51ce:	18 95       	reti

000051d0 <__vector_3>:
   }

}/*End ISR( PORTC_INT0_vect)*/

ISR( PORTC_INT1_vect)
{
    51d0:	1f 92       	push	r1
    51d2:	0f 92       	push	r0
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	0f 92       	push	r0
    51d8:	08 b6       	in	r0, 0x38	; 56
    51da:	0f 92       	push	r0
    51dc:	09 b6       	in	r0, 0x39	; 57
    51de:	0f 92       	push	r0
    51e0:	0b b6       	in	r0, 0x3b	; 59
    51e2:	0f 92       	push	r0
    51e4:	11 24       	eor	r1, r1
    51e6:	18 be       	out	0x38, r1	; 56
    51e8:	19 be       	out	0x39, r1	; 57
    51ea:	1b be       	out	0x3b, r1	; 59
    51ec:	2f 93       	push	r18
    51ee:	3f 93       	push	r19
    51f0:	4f 93       	push	r20
    51f2:	5f 93       	push	r21
    51f4:	6f 93       	push	r22
    51f6:	7f 93       	push	r23
    51f8:	8f 93       	push	r24
    51fa:	9f 93       	push	r25
    51fc:	af 93       	push	r26
    51fe:	bf 93       	push	r27
    5200:	ef 93       	push	r30
    5202:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTC_INT1);
    5204:	85 e0       	ldi	r24, 0x05	; 5
    5206:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    520a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    520c:	00 97       	sbiw	r24, 0x00	; 0
    520e:	49 f0       	breq	.+18     	; 0x5222 <__vector_3+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5210:	22 81       	ldd	r18, Z+2	; 0x02
    5212:	33 81       	ldd	r19, Z+3	; 0x03
    5214:	21 15       	cp	r18, r1
    5216:	31 05       	cpc	r19, r1
    5218:	21 f0       	breq	.+8      	; 0x5222 <__vector_3+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTC,
    521a:	82 e0       	ldi	r24, 0x02	; 2
    521c:	61 81       	ldd	r22, Z+1	; 0x01
    521e:	f9 01       	movw	r30, r18
    5220:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTC_INT1_vect)*/
    5222:	ff 91       	pop	r31
    5224:	ef 91       	pop	r30
    5226:	bf 91       	pop	r27
    5228:	af 91       	pop	r26
    522a:	9f 91       	pop	r25
    522c:	8f 91       	pop	r24
    522e:	7f 91       	pop	r23
    5230:	6f 91       	pop	r22
    5232:	5f 91       	pop	r21
    5234:	4f 91       	pop	r20
    5236:	3f 91       	pop	r19
    5238:	2f 91       	pop	r18
    523a:	0f 90       	pop	r0
    523c:	0b be       	out	0x3b, r0	; 59
    523e:	0f 90       	pop	r0
    5240:	09 be       	out	0x39, r0	; 57
    5242:	0f 90       	pop	r0
    5244:	08 be       	out	0x38, r0	; 56
    5246:	0f 90       	pop	r0
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	0f 90       	pop	r0
    524c:	1f 90       	pop	r1
    524e:	18 95       	reti

00005250 <__vector_2>:
   }

}/*End ISR( PORTB_INT1_vect)*/

ISR( PORTC_INT0_vect)
{
    5250:	1f 92       	push	r1
    5252:	0f 92       	push	r0
    5254:	0f b6       	in	r0, 0x3f	; 63
    5256:	0f 92       	push	r0
    5258:	08 b6       	in	r0, 0x38	; 56
    525a:	0f 92       	push	r0
    525c:	09 b6       	in	r0, 0x39	; 57
    525e:	0f 92       	push	r0
    5260:	0b b6       	in	r0, 0x3b	; 59
    5262:	0f 92       	push	r0
    5264:	11 24       	eor	r1, r1
    5266:	18 be       	out	0x38, r1	; 56
    5268:	19 be       	out	0x39, r1	; 57
    526a:	1b be       	out	0x3b, r1	; 59
    526c:	2f 93       	push	r18
    526e:	3f 93       	push	r19
    5270:	4f 93       	push	r20
    5272:	5f 93       	push	r21
    5274:	6f 93       	push	r22
    5276:	7f 93       	push	r23
    5278:	8f 93       	push	r24
    527a:	9f 93       	push	r25
    527c:	af 93       	push	r26
    527e:	bf 93       	push	r27
    5280:	ef 93       	push	r30
    5282:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( (uint8_t)PORTC_INT0);
    5284:	84 e0       	ldi	r24, 0x04	; 4
    5286:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    528a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    528c:	00 97       	sbiw	r24, 0x00	; 0
    528e:	49 f0       	breq	.+18     	; 0x52a2 <__vector_2+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5290:	22 81       	ldd	r18, Z+2	; 0x02
    5292:	33 81       	ldd	r19, Z+3	; 0x03
    5294:	21 15       	cp	r18, r1
    5296:	31 05       	cpc	r19, r1
    5298:	21 f0       	breq	.+8      	; 0x52a2 <__vector_2+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTC,
    529a:	82 e0       	ldi	r24, 0x02	; 2
    529c:	61 81       	ldd	r22, Z+1	; 0x01
    529e:	f9 01       	movw	r30, r18
    52a0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTC_INT0_vect)*/
    52a2:	ff 91       	pop	r31
    52a4:	ef 91       	pop	r30
    52a6:	bf 91       	pop	r27
    52a8:	af 91       	pop	r26
    52aa:	9f 91       	pop	r25
    52ac:	8f 91       	pop	r24
    52ae:	7f 91       	pop	r23
    52b0:	6f 91       	pop	r22
    52b2:	5f 91       	pop	r21
    52b4:	4f 91       	pop	r20
    52b6:	3f 91       	pop	r19
    52b8:	2f 91       	pop	r18
    52ba:	0f 90       	pop	r0
    52bc:	0b be       	out	0x3b, r0	; 59
    52be:	0f 90       	pop	r0
    52c0:	09 be       	out	0x39, r0	; 57
    52c2:	0f 90       	pop	r0
    52c4:	08 be       	out	0x38, r0	; 56
    52c6:	0f 90       	pop	r0
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	0f 90       	pop	r0
    52cc:	1f 90       	pop	r1
    52ce:	18 95       	reti

000052d0 <__vector_35>:
   }

}/*End ISR( PORTB_INT0_vect)*/

ISR( PORTB_INT1_vect)
{
    52d0:	1f 92       	push	r1
    52d2:	0f 92       	push	r0
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	0f 92       	push	r0
    52d8:	08 b6       	in	r0, 0x38	; 56
    52da:	0f 92       	push	r0
    52dc:	09 b6       	in	r0, 0x39	; 57
    52de:	0f 92       	push	r0
    52e0:	0b b6       	in	r0, 0x3b	; 59
    52e2:	0f 92       	push	r0
    52e4:	11 24       	eor	r1, r1
    52e6:	18 be       	out	0x38, r1	; 56
    52e8:	19 be       	out	0x39, r1	; 57
    52ea:	1b be       	out	0x3b, r1	; 59
    52ec:	2f 93       	push	r18
    52ee:	3f 93       	push	r19
    52f0:	4f 93       	push	r20
    52f2:	5f 93       	push	r21
    52f4:	6f 93       	push	r22
    52f6:	7f 93       	push	r23
    52f8:	8f 93       	push	r24
    52fa:	9f 93       	push	r25
    52fc:	af 93       	push	r26
    52fe:	bf 93       	push	r27
    5300:	ef 93       	push	r30
    5302:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTB_INT1);
    5304:	83 e0       	ldi	r24, 0x03	; 3
    5306:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    530a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    530c:	00 97       	sbiw	r24, 0x00	; 0
    530e:	49 f0       	breq	.+18     	; 0x5322 <__vector_35+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5310:	22 81       	ldd	r18, Z+2	; 0x02
    5312:	33 81       	ldd	r19, Z+3	; 0x03
    5314:	21 15       	cp	r18, r1
    5316:	31 05       	cpc	r19, r1
    5318:	21 f0       	breq	.+8      	; 0x5322 <__vector_35+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTB,
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	61 81       	ldd	r22, Z+1	; 0x01
    531e:	f9 01       	movw	r30, r18
    5320:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTB_INT1_vect)*/
    5322:	ff 91       	pop	r31
    5324:	ef 91       	pop	r30
    5326:	bf 91       	pop	r27
    5328:	af 91       	pop	r26
    532a:	9f 91       	pop	r25
    532c:	8f 91       	pop	r24
    532e:	7f 91       	pop	r23
    5330:	6f 91       	pop	r22
    5332:	5f 91       	pop	r21
    5334:	4f 91       	pop	r20
    5336:	3f 91       	pop	r19
    5338:	2f 91       	pop	r18
    533a:	0f 90       	pop	r0
    533c:	0b be       	out	0x3b, r0	; 59
    533e:	0f 90       	pop	r0
    5340:	09 be       	out	0x39, r0	; 57
    5342:	0f 90       	pop	r0
    5344:	08 be       	out	0x38, r0	; 56
    5346:	0f 90       	pop	r0
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	0f 90       	pop	r0
    534c:	1f 90       	pop	r1
    534e:	18 95       	reti

00005350 <__vector_34>:
   }

}/*End ISR( PORTA_INT1_vect)*/

ISR( PORTB_INT0_vect)
{
    5350:	1f 92       	push	r1
    5352:	0f 92       	push	r0
    5354:	0f b6       	in	r0, 0x3f	; 63
    5356:	0f 92       	push	r0
    5358:	08 b6       	in	r0, 0x38	; 56
    535a:	0f 92       	push	r0
    535c:	09 b6       	in	r0, 0x39	; 57
    535e:	0f 92       	push	r0
    5360:	0b b6       	in	r0, 0x3b	; 59
    5362:	0f 92       	push	r0
    5364:	11 24       	eor	r1, r1
    5366:	18 be       	out	0x38, r1	; 56
    5368:	19 be       	out	0x39, r1	; 57
    536a:	1b be       	out	0x3b, r1	; 59
    536c:	2f 93       	push	r18
    536e:	3f 93       	push	r19
    5370:	4f 93       	push	r20
    5372:	5f 93       	push	r21
    5374:	6f 93       	push	r22
    5376:	7f 93       	push	r23
    5378:	8f 93       	push	r24
    537a:	9f 93       	push	r25
    537c:	af 93       	push	r26
    537e:	bf 93       	push	r27
    5380:	ef 93       	push	r30
    5382:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTB_INT0);
    5384:	82 e0       	ldi	r24, 0x02	; 2
    5386:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    538a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    538c:	00 97       	sbiw	r24, 0x00	; 0
    538e:	49 f0       	breq	.+18     	; 0x53a2 <__vector_34+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5390:	22 81       	ldd	r18, Z+2	; 0x02
    5392:	33 81       	ldd	r19, Z+3	; 0x03
    5394:	21 15       	cp	r18, r1
    5396:	31 05       	cpc	r19, r1
    5398:	21 f0       	breq	.+8      	; 0x53a2 <__vector_34+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTB,
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	61 81       	ldd	r22, Z+1	; 0x01
    539e:	f9 01       	movw	r30, r18
    53a0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTB_INT0_vect)*/
    53a2:	ff 91       	pop	r31
    53a4:	ef 91       	pop	r30
    53a6:	bf 91       	pop	r27
    53a8:	af 91       	pop	r26
    53aa:	9f 91       	pop	r25
    53ac:	8f 91       	pop	r24
    53ae:	7f 91       	pop	r23
    53b0:	6f 91       	pop	r22
    53b2:	5f 91       	pop	r21
    53b4:	4f 91       	pop	r20
    53b6:	3f 91       	pop	r19
    53b8:	2f 91       	pop	r18
    53ba:	0f 90       	pop	r0
    53bc:	0b be       	out	0x3b, r0	; 59
    53be:	0f 90       	pop	r0
    53c0:	09 be       	out	0x39, r0	; 57
    53c2:	0f 90       	pop	r0
    53c4:	08 be       	out	0x38, r0	; 56
    53c6:	0f 90       	pop	r0
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	0f 90       	pop	r0
    53cc:	1f 90       	pop	r1
    53ce:	18 95       	reti

000053d0 <__vector_67>:
   }

}/*End ISR( PORTA_INT0_vect)*/

ISR( PORTA_INT1_vect)
{
    53d0:	1f 92       	push	r1
    53d2:	0f 92       	push	r0
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	0f 92       	push	r0
    53d8:	08 b6       	in	r0, 0x38	; 56
    53da:	0f 92       	push	r0
    53dc:	09 b6       	in	r0, 0x39	; 57
    53de:	0f 92       	push	r0
    53e0:	0b b6       	in	r0, 0x3b	; 59
    53e2:	0f 92       	push	r0
    53e4:	11 24       	eor	r1, r1
    53e6:	18 be       	out	0x38, r1	; 56
    53e8:	19 be       	out	0x39, r1	; 57
    53ea:	1b be       	out	0x3b, r1	; 59
    53ec:	2f 93       	push	r18
    53ee:	3f 93       	push	r19
    53f0:	4f 93       	push	r20
    53f2:	5f 93       	push	r21
    53f4:	6f 93       	push	r22
    53f6:	7f 93       	push	r23
    53f8:	8f 93       	push	r24
    53fa:	9f 93       	push	r25
    53fc:	af 93       	push	r26
    53fe:	bf 93       	push	r27
    5400:	ef 93       	push	r30
    5402:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTA_INT1);
    5404:	81 e0       	ldi	r24, 0x01	; 1
    5406:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    540a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	49 f0       	breq	.+18     	; 0x5422 <__vector_67+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5410:	22 81       	ldd	r18, Z+2	; 0x02
    5412:	33 81       	ldd	r19, Z+3	; 0x03
    5414:	21 15       	cp	r18, r1
    5416:	31 05       	cpc	r19, r1
    5418:	21 f0       	breq	.+8      	; 0x5422 <__vector_67+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTA,
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	61 81       	ldd	r22, Z+1	; 0x01
    541e:	f9 01       	movw	r30, r18
    5420:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTA_INT1_vect)*/
    5422:	ff 91       	pop	r31
    5424:	ef 91       	pop	r30
    5426:	bf 91       	pop	r27
    5428:	af 91       	pop	r26
    542a:	9f 91       	pop	r25
    542c:	8f 91       	pop	r24
    542e:	7f 91       	pop	r23
    5430:	6f 91       	pop	r22
    5432:	5f 91       	pop	r21
    5434:	4f 91       	pop	r20
    5436:	3f 91       	pop	r19
    5438:	2f 91       	pop	r18
    543a:	0f 90       	pop	r0
    543c:	0b be       	out	0x3b, r0	; 59
    543e:	0f 90       	pop	r0
    5440:	09 be       	out	0x39, r0	; 57
    5442:	0f 90       	pop	r0
    5444:	08 be       	out	0x38, r0	; 56
    5446:	0f 90       	pop	r0
    5448:	0f be       	out	0x3f, r0	; 63
    544a:	0f 90       	pop	r0
    544c:	1f 90       	pop	r1
    544e:	18 95       	reti

00005450 <__vector_66>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( PORTA_INT0_vect)
{
    5450:	1f 92       	push	r1
    5452:	0f 92       	push	r0
    5454:	0f b6       	in	r0, 0x3f	; 63
    5456:	0f 92       	push	r0
    5458:	08 b6       	in	r0, 0x38	; 56
    545a:	0f 92       	push	r0
    545c:	09 b6       	in	r0, 0x39	; 57
    545e:	0f 92       	push	r0
    5460:	0b b6       	in	r0, 0x3b	; 59
    5462:	0f 92       	push	r0
    5464:	11 24       	eor	r1, r1
    5466:	18 be       	out	0x38, r1	; 56
    5468:	19 be       	out	0x39, r1	; 57
    546a:	1b be       	out	0x3b, r1	; 59
    546c:	2f 93       	push	r18
    546e:	3f 93       	push	r19
    5470:	4f 93       	push	r20
    5472:	5f 93       	push	r21
    5474:	6f 93       	push	r22
    5476:	7f 93       	push	r23
    5478:	8f 93       	push	r24
    547a:	9f 93       	push	r25
    547c:	af 93       	push	r26
    547e:	bf 93       	push	r27
    5480:	ef 93       	push	r30
    5482:	ff 93       	push	r31
   t_gpioIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this port interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findGpioIntElement( PORTA_INT0);
    5484:	80 e0       	ldi	r24, 0x00	; 0
    5486:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>
    548a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    548c:	00 97       	sbiw	r24, 0x00	; 0
    548e:	49 f0       	breq	.+18     	; 0x54a2 <__vector_66+0x52>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    5490:	22 81       	ldd	r18, Z+2	; 0x02
    5492:	33 81       	ldd	r19, Z+3	; 0x03
    5494:	21 15       	cp	r18, r1
    5496:	31 05       	cpc	r19, r1
    5498:	21 f0       	breq	.+8      	; 0x54a2 <__vector_66+0x52>
         pt_intHndl->pf_funPtr( GPIO_PORTA,
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	61 81       	ldd	r22, Z+1	; 0x01
    549e:	f9 01       	movw	r30, r18
    54a0:	19 95       	eicall
                                pt_intHndl->c_pin);
   }

}/*End ISR( PORTA_INT0_vect)*/
    54a2:	ff 91       	pop	r31
    54a4:	ef 91       	pop	r30
    54a6:	bf 91       	pop	r27
    54a8:	af 91       	pop	r26
    54aa:	9f 91       	pop	r25
    54ac:	8f 91       	pop	r24
    54ae:	7f 91       	pop	r23
    54b0:	6f 91       	pop	r22
    54b2:	5f 91       	pop	r21
    54b4:	4f 91       	pop	r20
    54b6:	3f 91       	pop	r19
    54b8:	2f 91       	pop	r18
    54ba:	0f 90       	pop	r0
    54bc:	0b be       	out	0x3b, r0	; 59
    54be:	0f 90       	pop	r0
    54c0:	09 be       	out	0x39, r0	; 57
    54c2:	0f 90       	pop	r0
    54c4:	08 be       	out	0x38, r0	; 56
    54c6:	0f 90       	pop	r0
    54c8:	0f be       	out	0x3f, r0	; 63
    54ca:	0f 90       	pop	r0
    54cc:	1f 90       	pop	r1
    54ce:	18 95       	reti

000054d0 <confPort>:

}/*End createIntHandle*/

static void confPort( PORT_t *pt_port,
                      t_gpioConf *pt_conf)
{
    54d0:	fc 01       	movw	r30, r24
    54d2:	db 01       	movw	r26, r22

   /*------------------------------------------------------------------------*
    * Set the output configuration for the given pins
    *------------------------------------------------------------------------*/
   if( pt_conf->c_outputMask > 0) /*Are there any output pins?*/
    54d4:	11 96       	adiw	r26, 0x01	; 1
    54d6:	9c 91       	ld	r25, X
    54d8:	11 97       	sbiw	r26, 0x01	; 1
    54da:	99 23       	and	r25, r25
    54dc:	09 f1       	breq	.+66     	; 0x5520 <confPort+0x50>
   {

      /*---------------------------------------------------------------------*
       * Set the output pins to the required initial value
       *---------------------------------------------------------------------*/
      if( pt_conf->b_setOutputLow)
    54de:	12 96       	adiw	r26, 0x02	; 2
    54e0:	8c 91       	ld	r24, X
    54e2:	12 97       	sbiw	r26, 0x02	; 2
    54e4:	88 23       	and	r24, r24
    54e6:	11 f0       	breq	.+4      	; 0x54ec <confPort+0x1c>
      {
         pt_port->OUTCLR = pt_conf->c_outputMask;
    54e8:	96 83       	std	Z+6, r25	; 0x06
    54ea:	01 c0       	rjmp	.+2      	; 0x54ee <confPort+0x1e>
      }
      else
         pt_port->OUTSET = pt_conf->c_outputMask;
    54ec:	95 83       	std	Z+5, r25	; 0x05

      pt_port->DIRSET = pt_conf->c_outputMask;
    54ee:	11 96       	adiw	r26, 0x01	; 1
    54f0:	8c 91       	ld	r24, X
    54f2:	11 97       	sbiw	r26, 0x01	; 1
    54f4:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Use the pin mask register as a means of setting a large group
       * of pins to the same value.
       *---------------------------------------------------------------------*/
      PORTCFG.MPCMASK = pt_conf->c_outputMask;
    54f6:	11 96       	adiw	r26, 0x01	; 1
    54f8:	8c 91       	ld	r24, X
    54fa:	11 97       	sbiw	r26, 0x01	; 1
    54fc:	80 93 b0 00 	sts	0x00B0, r24
      /*---------------------------------------------------------------------*
       * Writing to any one of the pins in the port configuration register
       * will trigger all the port configuration registers to be written with
       * the value contained in the pin mask register.
       *---------------------------------------------------------------------*/
      switch( pt_conf->t_outConf)
    5500:	14 96       	adiw	r26, 0x04	; 4
    5502:	8c 91       	ld	r24, X
    5504:	14 97       	sbiw	r26, 0x04	; 4
    5506:	81 30       	cpi	r24, 0x01	; 1
    5508:	29 f0       	breq	.+10     	; 0x5514 <confPort+0x44>
    550a:	81 30       	cpi	r24, 0x01	; 1
    550c:	40 f0       	brcs	.+16     	; 0x551e <confPort+0x4e>
    550e:	82 30       	cpi	r24, 0x02	; 2
    5510:	31 f4       	brne	.+12     	; 0x551e <confPort+0x4e>
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <confPort+0x48>
         case TOTEM:
            pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
         break; /*End case TOTEM:*/

         case WIREDOR:
            pt_port->PIN0CTRL = PORT_OPC_WIREDOR_gc;
    5514:	80 e2       	ldi	r24, 0x20	; 32
    5516:	01 c0       	rjmp	.+2      	; 0x551a <confPort+0x4a>
         break; /*End case WIREDOR:*/

         case WIREDAND:
            pt_port->PIN0CTRL = PORT_OPC_WIREDAND_gc;
    5518:	88 e2       	ldi	r24, 0x28	; 40
    551a:	80 8b       	std	Z+16, r24	; 0x10
    551c:	01 c0       	rjmp	.+2      	; 0x5520 <confPort+0x50>
         break; /*End case WIREDAND:*/

         default:
           pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
    551e:	10 8a       	std	Z+16, r1	; 0x10
   }/*End if( pt_conf->c_outputMask > 0)*/

   /*------------------------------------------------------------------------*
    * Set the pull configuration for the given input pins
    *------------------------------------------------------------------------*/
   if( pt_conf->c_inputMask > 0) /*Are there any input pins?*/
    5520:	8c 91       	ld	r24, X
    5522:	88 23       	and	r24, r24
    5524:	b9 f0       	breq	.+46     	; 0x5554 <confPort+0x84>
   {

      /*---------------------------------------------------------------------*
       * Interruptible pins are not allowed until an interrupt is requested.
       *---------------------------------------------------------------------*/
      pt_port->INTCTRL = PORT_INT0LVL_OFF_gc;
    5526:	11 86       	std	Z+9, r1	; 0x09

      pt_port->DIRCLR = pt_conf->c_inputMask;
    5528:	8c 91       	ld	r24, X
    552a:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Use the pin mask register as a means of setting a large group of
       * pins to the same value.
       *---------------------------------------------------------------------*/
      PORTCFG.MPCMASK = pt_conf->c_inputMask;
    552c:	8c 91       	ld	r24, X
    552e:	80 93 b0 00 	sts	0x00B0, r24

      switch( pt_conf->t_inConf)
    5532:	13 96       	adiw	r26, 0x03	; 3
    5534:	6c 91       	ld	r22, X
    5536:	64 30       	cpi	r22, 0x04	; 4
    5538:	29 f0       	breq	.+10     	; 0x5544 <confPort+0x74>
    553a:	65 30       	cpi	r22, 0x05	; 5
    553c:	29 f0       	breq	.+10     	; 0x5548 <confPort+0x78>
    553e:	63 30       	cpi	r22, 0x03	; 3
    5540:	41 f4       	brne	.+16     	; 0x5552 <confPort+0x82>
    5542:	04 c0       	rjmp	.+8      	; 0x554c <confPort+0x7c>
      {
         case PULLDOWN:
            pt_port->PIN0CTRL = PORT_OPC_PULLDOWN_gc;
    5544:	80 e1       	ldi	r24, 0x10	; 16
    5546:	03 c0       	rjmp	.+6      	; 0x554e <confPort+0x7e>
         break; /*End case TOTEM:*/

         case PULLUP:
            pt_port->PIN0CTRL = PORT_OPC_PULLUP_gc;
    5548:	88 e1       	ldi	r24, 0x18	; 24
    554a:	01 c0       	rjmp	.+2      	; 0x554e <confPort+0x7e>
         break; /*End case WIREDOR:*/

         case BUSKEEPER:
            pt_port->PIN0CTRL = PORT_OPC_BUSKEEPER_gc;
    554c:	88 e0       	ldi	r24, 0x08	; 8
    554e:	80 8b       	std	Z+16, r24	; 0x10
    5550:	08 95       	ret
         break;/*End case BUSKEEPER:*/

         default:
            pt_port->PIN0CTRL = PORT_OPC_TOTEM_gc;
    5552:	10 8a       	std	Z+16, r1	; 0x10
    5554:	08 95       	ret

00005556 <hal_configureGpioPort>:

}/*End confInt*/

t_gpioError hal_configureGpioPort( t_gpioPort t_port,
                                   t_gpioConf t_conf)
{
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	00 d0       	rcall	.+0      	; 0x555c <hal_configureGpioPort+0x6>
    555c:	00 d0       	rcall	.+0      	; 0x555e <hal_configureGpioPort+0x8>
    555e:	cd b7       	in	r28, 0x3d	; 61
    5560:	de b7       	in	r29, 0x3e	; 62
    5562:	98 2f       	mov	r25, r24
    5564:	2a 83       	std	Y+2, r18	; 0x02
    5566:	3b 83       	std	Y+3, r19	; 0x03
    5568:	4c 83       	std	Y+4, r20	; 0x04
    556a:	5d 83       	std	Y+5, r21	; 0x05
    556c:	6e 83       	std	Y+6, r22	; 0x06

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    556e:	8f b7       	in	r24, 0x3f	; 63
    5570:	89 83       	std	Y+1, r24	; 0x01
    5572:	f8 94       	cli

   switch( t_port)
    5574:	95 30       	cpi	r25, 0x05	; 5
    5576:	71 f1       	breq	.+92     	; 0x55d4 <hal_configureGpioPort+0x7e>
    5578:	96 30       	cpi	r25, 0x06	; 6
    557a:	70 f4       	brcc	.+28     	; 0x5598 <hal_configureGpioPort+0x42>
    557c:	92 30       	cpi	r25, 0x02	; 2
    557e:	09 f1       	breq	.+66     	; 0x55c2 <hal_configureGpioPort+0x6c>
    5580:	93 30       	cpi	r25, 0x03	; 3
    5582:	28 f4       	brcc	.+10     	; 0x558e <hal_configureGpioPort+0x38>
    5584:	99 23       	and	r25, r25
    5586:	b9 f0       	breq	.+46     	; 0x55b6 <hal_configureGpioPort+0x60>
    5588:	91 30       	cpi	r25, 0x01	; 1
    558a:	99 f4       	brne	.+38     	; 0x55b2 <hal_configureGpioPort+0x5c>
    558c:	17 c0       	rjmp	.+46     	; 0x55bc <hal_configureGpioPort+0x66>
    558e:	93 30       	cpi	r25, 0x03	; 3
    5590:	d9 f0       	breq	.+54     	; 0x55c8 <hal_configureGpioPort+0x72>
    5592:	94 30       	cpi	r25, 0x04	; 4
    5594:	71 f4       	brne	.+28     	; 0x55b2 <hal_configureGpioPort+0x5c>
    5596:	1b c0       	rjmp	.+54     	; 0x55ce <hal_configureGpioPort+0x78>
    5598:	98 30       	cpi	r25, 0x08	; 8
    559a:	29 f1       	breq	.+74     	; 0x55e6 <hal_configureGpioPort+0x90>
    559c:	99 30       	cpi	r25, 0x09	; 9
    559e:	28 f4       	brcc	.+10     	; 0x55aa <hal_configureGpioPort+0x54>
    55a0:	96 30       	cpi	r25, 0x06	; 6
    55a2:	d9 f0       	breq	.+54     	; 0x55da <hal_configureGpioPort+0x84>
    55a4:	97 30       	cpi	r25, 0x07	; 7
    55a6:	29 f4       	brne	.+10     	; 0x55b2 <hal_configureGpioPort+0x5c>
    55a8:	1b c0       	rjmp	.+54     	; 0x55e0 <hal_configureGpioPort+0x8a>
    55aa:	99 30       	cpi	r25, 0x09	; 9
    55ac:	f9 f0       	breq	.+62     	; 0x55ec <hal_configureGpioPort+0x96>
    55ae:	9a 30       	cpi	r25, 0x0A	; 10
    55b0:	01 f1       	breq	.+64     	; 0x55f2 <hal_configureGpioPort+0x9c>
    55b2:	9c ef       	ldi	r25, 0xFC	; 252
    55b4:	26 c0       	rjmp	.+76     	; 0x5602 <hal_configureGpioPort+0xac>
   {
      case GPIO_PORTA:

         confPort( &PORTA,
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	96 e0       	ldi	r25, 0x06	; 6
    55ba:	1d c0       	rjmp	.+58     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTA:*/

      case GPIO_PORTB:

         confPort( &PORTB,
    55bc:	80 e2       	ldi	r24, 0x20	; 32
    55be:	96 e0       	ldi	r25, 0x06	; 6
    55c0:	1a c0       	rjmp	.+52     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTB:*/

      case GPIO_PORTC:

         confPort( &PORTC,
    55c2:	80 e4       	ldi	r24, 0x40	; 64
    55c4:	96 e0       	ldi	r25, 0x06	; 6
    55c6:	17 c0       	rjmp	.+46     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTC:*/

      case GPIO_PORTD:

         confPort( &PORTD,
    55c8:	80 e6       	ldi	r24, 0x60	; 96
    55ca:	96 e0       	ldi	r25, 0x06	; 6
    55cc:	14 c0       	rjmp	.+40     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTD:*/

      case GPIO_PORTE:

         confPort( &PORTE,
    55ce:	80 e8       	ldi	r24, 0x80	; 128
    55d0:	96 e0       	ldi	r25, 0x06	; 6
    55d2:	11 c0       	rjmp	.+34     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTE:*/

      case GPIO_PORTF:

         confPort( &PORTF,
    55d4:	80 ea       	ldi	r24, 0xA0	; 160
    55d6:	96 e0       	ldi	r25, 0x06	; 6
    55d8:	0e c0       	rjmp	.+28     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTF:*/

      case GPIO_PORTH:

         confPort( &PORTH,
    55da:	80 ee       	ldi	r24, 0xE0	; 224
    55dc:	96 e0       	ldi	r25, 0x06	; 6
    55de:	0b c0       	rjmp	.+22     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTH:*/

      case GPIO_PORTJ:

         confPort( &PORTJ,
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	97 e0       	ldi	r25, 0x07	; 7
    55e4:	08 c0       	rjmp	.+16     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTJ:*/

      case GPIO_PORTK:

         confPort( &PORTK,
    55e6:	80 e2       	ldi	r24, 0x20	; 32
    55e8:	97 e0       	ldi	r25, 0x07	; 7
    55ea:	05 c0       	rjmp	.+10     	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTK:*/

      case GPIO_PORTQ:

         confPort( &PORTQ,
    55ec:	80 ec       	ldi	r24, 0xC0	; 192
    55ee:	97 e0       	ldi	r25, 0x07	; 7
    55f0:	02 c0       	rjmp	.+4      	; 0x55f6 <hal_configureGpioPort+0xa0>

      break;/*End case GPIO_PORTQ:*/

      case GPIO_PORTR:

         confPort( &PORTR,
    55f2:	80 ee       	ldi	r24, 0xE0	; 224
    55f4:	97 e0       	ldi	r25, 0x07	; 7
    55f6:	be 01       	movw	r22, r28
    55f8:	6e 5f       	subi	r22, 0xFE	; 254
    55fa:	7f 4f       	sbci	r23, 0xFF	; 255
    55fc:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <confPort>
    5600:	90 e0       	ldi	r25, 0x00	; 0
         t_err = GPIO_INVALID_CMD;
      break;

   }/*End switch( t_port)*/

   HAL_END_CRITICAL();//Enable interrupts
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	8f bf       	out	0x3f, r24	; 63

   return t_err;

}/*End hal_configureGpioPort*/
    5606:	89 2f       	mov	r24, r25
    5608:	26 96       	adiw	r28, 0x06	; 6
    560a:	cd bf       	out	0x3d, r28	; 61
    560c:	de bf       	out	0x3e, r29	; 62
    560e:	cf 91       	pop	r28
    5610:	df 91       	pop	r29
    5612:	08 95       	ret

00005614 <createIntHandle>:
 * This function is called the very first time a user-space application
 * requests an interrupt for a given pin on a port. The driver only allows
 * two pins mapped to interrupts for the given port.
 *---------------------------------------------------------------------------*/
static t_LINKHNDL createIntHandle( void)
{
    5614:	df 93       	push	r29
    5616:	cf 93       	push	r28
    5618:	0f 92       	push	r0
    561a:	0f 92       	push	r0
    561c:	cd b7       	in	r28, 0x3d	; 61
    561e:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the DMA interrupt information will be
    * stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_gpioIntHndl));
    5620:	84 e0       	ldi	r24, 0x04	; 4
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    5628:	89 83       	std	Y+1, r24	; 0x01
    562a:	9a 83       	std	Y+2, r25	; 0x02

   if( t_linkHndl < 0)
    562c:	89 81       	ldd	r24, Y+1	; 0x01
    562e:	9a 81       	ldd	r25, Y+2	; 0x02
    5630:	97 ff       	sbrs	r25, 7
    5632:	03 c0       	rjmp	.+6      	; 0x563a <createIntHandle+0x26>
    5634:	2e ef       	ldi	r18, 0xFE	; 254
    5636:	3f ef       	ldi	r19, 0xFF	; 255
    5638:	0b c0       	rjmp	.+22     	; 0x5650 <createIntHandle+0x3c>
   }

   /*------------------------------------------------------------------------*
    * Add the GPIO interrupt link onto the list open GPIO interrupts.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_gpioHndlList,
    563a:	80 91 a9 20 	lds	r24, 0x20A9
    563e:	90 91 aa 20 	lds	r25, 0x20AA
    5642:	69 81       	ldd	r22, Y+1	; 0x01
    5644:	7a 81       	ldd	r23, Y+2	; 0x02
    5646:	41 e0       	ldi	r20, 0x01	; 1
    5648:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    564c:	29 81       	ldd	r18, Y+1	; 0x01
    564e:	3a 81       	ldd	r19, Y+2	; 0x02

}/*End createIntHandle*/
    5650:	c9 01       	movw	r24, r18
    5652:	0f 90       	pop	r0
    5654:	0f 90       	pop	r0
    5656:	cf 91       	pop	r28
    5658:	df 91       	pop	r29
    565a:	08 95       	ret

0000565c <confInt>:

static t_LINKHNDL confInt( PORT_t *pt_port,
                           t_intConf *pt_intConf,
                           t_portIntId t_int0,
                           t_portIntId t_int1)
{
    565c:	cf 92       	push	r12
    565e:	df 92       	push	r13
    5660:	ef 92       	push	r14
    5662:	ff 92       	push	r15
    5664:	0f 93       	push	r16
    5666:	1f 93       	push	r17
    5668:	df 93       	push	r29
    566a:	cf 93       	push	r28
    566c:	0f 92       	push	r0
    566e:	0f 92       	push	r0
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    5674:	8c 01       	movw	r16, r24
    5676:	7b 01       	movw	r14, r22
    5678:	d4 2e       	mov	r13, r20
    567a:	c2 2e       	mov	r12, r18

   /*------------------------------------------------------------------------*
    * Make sure the user-space application is attempting to attach one pin
    * and one pin ONLY to one of the two port interrupts.
    *------------------------------------------------------------------------*/
   switch( pt_intConf->c_pin)
    567c:	db 01       	movw	r26, r22
    567e:	9c 91       	ld	r25, X
    5680:	98 30       	cpi	r25, 0x08	; 8
    5682:	b9 f0       	breq	.+46     	; 0x56b2 <confInt+0x56>
    5684:	99 30       	cpi	r25, 0x09	; 9
    5686:	38 f4       	brcc	.+14     	; 0x5696 <confInt+0x3a>
    5688:	91 30       	cpi	r25, 0x01	; 1
    568a:	80 f0       	brcs	.+32     	; 0x56ac <confInt+0x50>
    568c:	93 30       	cpi	r25, 0x03	; 3
    568e:	88 f0       	brcs	.+34     	; 0x56b2 <confInt+0x56>
    5690:	94 30       	cpi	r25, 0x04	; 4
    5692:	61 f4       	brne	.+24     	; 0x56ac <confInt+0x50>
    5694:	0e c0       	rjmp	.+28     	; 0x56b2 <confInt+0x56>
    5696:	90 32       	cpi	r25, 0x20	; 32
    5698:	61 f0       	breq	.+24     	; 0x56b2 <confInt+0x56>
    569a:	91 32       	cpi	r25, 0x21	; 33
    569c:	18 f4       	brcc	.+6      	; 0x56a4 <confInt+0x48>
    569e:	90 31       	cpi	r25, 0x10	; 16
    56a0:	29 f4       	brne	.+10     	; 0x56ac <confInt+0x50>
    56a2:	07 c0       	rjmp	.+14     	; 0x56b2 <confInt+0x56>
    56a4:	90 34       	cpi	r25, 0x40	; 64
    56a6:	29 f0       	breq	.+10     	; 0x56b2 <confInt+0x56>
    56a8:	90 38       	cpi	r25, 0x80	; 128
    56aa:	19 f0       	breq	.+6      	; 0x56b2 <confInt+0x56>
    56ac:	2f ef       	ldi	r18, 0xFF	; 255
    56ae:	3f ef       	ldi	r19, 0xFF	; 255
    56b0:	0b c1       	rjmp	.+534    	; 0x58c8 <confInt+0x26c>
   }/*End switch( pt_intConf->c_pin)*/

   /*------------------------------------------------------------------------*
    * Make sure the requested pin is configured as an input
    *------------------------------------------------------------------------*/
   if( pt_port->DIR & pt_intConf->c_pin)
    56b2:	f8 01       	movw	r30, r16
    56b4:	80 81       	ld	r24, Z
    56b6:	89 23       	and	r24, r25
    56b8:	19 f0       	breq	.+6      	; 0x56c0 <confInt+0x64>
    56ba:	2a ef       	ldi	r18, 0xFA	; 250
    56bc:	3f ef       	ldi	r19, 0xFF	; 255
    56be:	04 c1       	rjmp	.+520    	; 0x58c8 <confInt+0x26c>
   else
   {
      /*---------------------------------------------------------------------*
       * Search the list and see if there is an active handle for interrupt 0.
       *---------------------------------------------------------------------*/
      pt_int0Hndl = findGpioIntElement( t_int0);
    56c0:	8d 2d       	mov	r24, r13
    56c2:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>

      if( pt_int0Hndl == NULL) /*No Active handle*/
    56c6:	89 2b       	or	r24, r25
    56c8:	09 f0       	breq	.+2      	; 0x56cc <confInt+0x70>
    56ca:	79 c0       	rjmp	.+242    	; 0x57be <confInt+0x162>
      {

         /*------------------------------------------------------------------*
          * Create the new interrupt handle.
          *------------------------------------------------------------------*/
         t_linkHndl = createIntHandle();
    56cc:	0e 94 0a 2b 	call	0x5614	; 0x5614 <createIntHandle>
    56d0:	89 83       	std	Y+1, r24	; 0x01
    56d2:	9a 83       	std	Y+2, r25	; 0x02

         if( t_linkHndl < 0)
    56d4:	89 81       	ldd	r24, Y+1	; 0x01
    56d6:	9a 81       	ldd	r25, Y+2	; 0x02
    56d8:	97 fd       	sbrc	r25, 7
    56da:	f4 c0       	rjmp	.+488    	; 0x58c4 <confInt+0x268>
         {
            /*----------------------------------------------------------------*
             * Get a ptr to the link's element- which is the area where the
             * GPIO interrupt information is being stored.
             *----------------------------------------------------------------*/
            pt_int0Hndl = (t_gpioIntHndl *)
    56dc:	e9 81       	ldd	r30, Y+1	; 0x01
    56de:	fa 81       	ldd	r31, Y+2	; 0x02
    56e0:	01 90       	ld	r0, Z+
    56e2:	f0 81       	ld	r31, Z
    56e4:	e0 2d       	mov	r30, r0
            UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
            pt_int0Hndl->t_id      = t_int0;
    56e6:	d0 82       	st	Z, r13
            pt_int0Hndl->c_pin     = pt_intConf->c_pin;
    56e8:	d7 01       	movw	r26, r14
    56ea:	8c 91       	ld	r24, X
    56ec:	81 83       	std	Z+1, r24	; 0x01
            pt_int0Hndl->pf_funPtr = pt_intConf->pf_funPtr;
    56ee:	12 96       	adiw	r26, 0x02	; 2
    56f0:	8d 91       	ld	r24, X+
    56f2:	9c 91       	ld	r25, X
    56f4:	13 97       	sbiw	r26, 0x03	; 3
    56f6:	82 83       	std	Z+2, r24	; 0x02
    56f8:	93 83       	std	Z+3, r25	; 0x03
         }

         switch( pt_intConf->c_pin)
    56fa:	8c 91       	ld	r24, X
    56fc:	88 30       	cpi	r24, 0x08	; 8
    56fe:	81 f1       	breq	.+96     	; 0x5760 <confInt+0x104>
    5700:	89 30       	cpi	r24, 0x09	; 9
    5702:	40 f4       	brcc	.+16     	; 0x5714 <confInt+0xb8>
    5704:	82 30       	cpi	r24, 0x02	; 2
    5706:	e1 f0       	breq	.+56     	; 0x5740 <confInt+0xe4>
    5708:	84 30       	cpi	r24, 0x04	; 4
    570a:	11 f1       	breq	.+68     	; 0x5750 <confInt+0xf4>
    570c:	81 30       	cpi	r24, 0x01	; 1
    570e:	09 f0       	breq	.+2      	; 0x5712 <confInt+0xb6>
    5710:	4e c0       	rjmp	.+156    	; 0x57ae <confInt+0x152>
    5712:	0e c0       	rjmp	.+28     	; 0x5730 <confInt+0xd4>
    5714:	80 32       	cpi	r24, 0x20	; 32
    5716:	a1 f1       	breq	.+104    	; 0x5780 <confInt+0x124>
    5718:	81 32       	cpi	r24, 0x21	; 33
    571a:	20 f4       	brcc	.+8      	; 0x5724 <confInt+0xc8>
    571c:	80 31       	cpi	r24, 0x10	; 16
    571e:	09 f0       	breq	.+2      	; 0x5722 <confInt+0xc6>
    5720:	46 c0       	rjmp	.+140    	; 0x57ae <confInt+0x152>
    5722:	26 c0       	rjmp	.+76     	; 0x5770 <confInt+0x114>
    5724:	80 34       	cpi	r24, 0x40	; 64
    5726:	a1 f1       	breq	.+104    	; 0x5790 <confInt+0x134>
    5728:	80 38       	cpi	r24, 0x80	; 128
    572a:	09 f0       	breq	.+2      	; 0x572e <confInt+0xd2>
    572c:	40 c0       	rjmp	.+128    	; 0x57ae <confInt+0x152>
    572e:	38 c0       	rjmp	.+112    	; 0x57a0 <confInt+0x144>
         {
            case PIN_0:
               pt_port->PIN0CTRL |= pt_intConf->t_inSense;
    5730:	f8 01       	movw	r30, r16
    5732:	80 89       	ldd	r24, Z+16	; 0x10
    5734:	d7 01       	movw	r26, r14
    5736:	11 96       	adiw	r26, 0x01	; 1
    5738:	9c 91       	ld	r25, X
    573a:	89 2b       	or	r24, r25
    573c:	80 8b       	std	Z+16, r24	; 0x10
    573e:	37 c0       	rjmp	.+110    	; 0x57ae <confInt+0x152>
            break;

            case PIN_1:
               pt_port->PIN1CTRL |= pt_intConf->t_inSense;
    5740:	f8 01       	movw	r30, r16
    5742:	81 89       	ldd	r24, Z+17	; 0x11
    5744:	d7 01       	movw	r26, r14
    5746:	11 96       	adiw	r26, 0x01	; 1
    5748:	9c 91       	ld	r25, X
    574a:	89 2b       	or	r24, r25
    574c:	81 8b       	std	Z+17, r24	; 0x11
    574e:	2f c0       	rjmp	.+94     	; 0x57ae <confInt+0x152>
            break;

            case PIN_2:
               pt_port->PIN2CTRL |= pt_intConf->t_inSense;
    5750:	f8 01       	movw	r30, r16
    5752:	82 89       	ldd	r24, Z+18	; 0x12
    5754:	d7 01       	movw	r26, r14
    5756:	11 96       	adiw	r26, 0x01	; 1
    5758:	9c 91       	ld	r25, X
    575a:	89 2b       	or	r24, r25
    575c:	82 8b       	std	Z+18, r24	; 0x12
    575e:	27 c0       	rjmp	.+78     	; 0x57ae <confInt+0x152>
            break;

            case PIN_3:
               pt_port->PIN3CTRL |= pt_intConf->t_inSense;
    5760:	f8 01       	movw	r30, r16
    5762:	83 89       	ldd	r24, Z+19	; 0x13
    5764:	d7 01       	movw	r26, r14
    5766:	11 96       	adiw	r26, 0x01	; 1
    5768:	9c 91       	ld	r25, X
    576a:	89 2b       	or	r24, r25
    576c:	83 8b       	std	Z+19, r24	; 0x13
    576e:	1f c0       	rjmp	.+62     	; 0x57ae <confInt+0x152>
            break;

            case PIN_4:
               pt_port->PIN4CTRL |= pt_intConf->t_inSense;
    5770:	f8 01       	movw	r30, r16
    5772:	84 89       	ldd	r24, Z+20	; 0x14
    5774:	d7 01       	movw	r26, r14
    5776:	11 96       	adiw	r26, 0x01	; 1
    5778:	9c 91       	ld	r25, X
    577a:	89 2b       	or	r24, r25
    577c:	84 8b       	std	Z+20, r24	; 0x14
    577e:	17 c0       	rjmp	.+46     	; 0x57ae <confInt+0x152>
            break;

            case PIN_5:
               pt_port->PIN5CTRL |= pt_intConf->t_inSense;
    5780:	f8 01       	movw	r30, r16
    5782:	85 89       	ldd	r24, Z+21	; 0x15
    5784:	d7 01       	movw	r26, r14
    5786:	11 96       	adiw	r26, 0x01	; 1
    5788:	9c 91       	ld	r25, X
    578a:	89 2b       	or	r24, r25
    578c:	85 8b       	std	Z+21, r24	; 0x15
    578e:	0f c0       	rjmp	.+30     	; 0x57ae <confInt+0x152>
            break;

            case PIN_6:
               pt_port->PIN6CTRL |= pt_intConf->t_inSense;
    5790:	f8 01       	movw	r30, r16
    5792:	86 89       	ldd	r24, Z+22	; 0x16
    5794:	d7 01       	movw	r26, r14
    5796:	11 96       	adiw	r26, 0x01	; 1
    5798:	9c 91       	ld	r25, X
    579a:	89 2b       	or	r24, r25
    579c:	86 8b       	std	Z+22, r24	; 0x16
    579e:	07 c0       	rjmp	.+14     	; 0x57ae <confInt+0x152>
            break;

            case PIN_7:
               pt_port->PIN7CTRL |= pt_intConf->t_inSense;
    57a0:	f8 01       	movw	r30, r16
    57a2:	87 89       	ldd	r24, Z+23	; 0x17
    57a4:	d7 01       	movw	r26, r14
    57a6:	11 96       	adiw	r26, 0x01	; 1
    57a8:	9c 91       	ld	r25, X
    57aa:	89 2b       	or	r24, r25
    57ac:	87 8b       	std	Z+23, r24	; 0x17
         }/*End switch( pt_intConf->c_pin)*/

         /*------------------------------------------------------------------*
          * This value must match that set in the PMIC control register
          *------------------------------------------------------------------*/
         pt_port->INTCTRL  |= PORT_INT0LVL_HI_gc;
    57ae:	f8 01       	movw	r30, r16
    57b0:	81 85       	ldd	r24, Z+9	; 0x09
    57b2:	83 60       	ori	r24, 0x03	; 3
    57b4:	81 87       	std	Z+9, r24	; 0x09
         pt_port->INT0MASK = pt_intConf->c_pin;
    57b6:	d7 01       	movw	r26, r14
    57b8:	8c 91       	ld	r24, X
    57ba:	82 87       	std	Z+10, r24	; 0x0a
    57bc:	80 c0       	rjmp	.+256    	; 0x58be <confInt+0x262>

         /*---------------------------------------------------------------*
          * Search the list and see if there is an active handle for
          * interrupt 1.
          *---------------------------------------------------------------*/
         pt_int1Hndl = findGpioIntElement( t_int1);
    57be:	8c 2d       	mov	r24, r12
    57c0:	0e 94 bb 24 	call	0x4976	; 0x4976 <findGpioIntElement>

         if( pt_int1Hndl == NULL) /*No Active handle*/
    57c4:	89 2b       	or	r24, r25
    57c6:	19 f0       	breq	.+6      	; 0x57ce <confInt+0x172>
    57c8:	29 ef       	ldi	r18, 0xF9	; 249
    57ca:	3f ef       	ldi	r19, 0xFF	; 255
    57cc:	7d c0       	rjmp	.+250    	; 0x58c8 <confInt+0x26c>
         {

            /*---------------------------------------------------------------*
             * Create the new interrupt handle.
             *---------------------------------------------------------------*/
            t_linkHndl = createIntHandle();
    57ce:	0e 94 0a 2b 	call	0x5614	; 0x5614 <createIntHandle>
    57d2:	89 83       	std	Y+1, r24	; 0x01
    57d4:	9a 83       	std	Y+2, r25	; 0x02

            if( t_linkHndl < 0)
    57d6:	89 81       	ldd	r24, Y+1	; 0x01
    57d8:	9a 81       	ldd	r25, Y+2	; 0x02
    57da:	97 fd       	sbrc	r25, 7
    57dc:	73 c0       	rjmp	.+230    	; 0x58c4 <confInt+0x268>
            {
               /*-------------------------------------------------------------*
                * Get a ptr to the link's element- which is the area where the
                * GPIO interrupt information is being stored.
                *-------------------------------------------------------------*/
               pt_int1Hndl = (t_gpioIntHndl *)
    57de:	e9 81       	ldd	r30, Y+1	; 0x01
    57e0:	fa 81       	ldd	r31, Y+2	; 0x02
    57e2:	01 90       	ld	r0, Z+
    57e4:	f0 81       	ld	r31, Z
    57e6:	e0 2d       	mov	r30, r0
               UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
               pt_int1Hndl->t_id      = t_int1;
    57e8:	c0 82       	st	Z, r12
               pt_int1Hndl->c_pin     = pt_intConf->c_pin;
    57ea:	d7 01       	movw	r26, r14
    57ec:	8c 91       	ld	r24, X
    57ee:	81 83       	std	Z+1, r24	; 0x01
               pt_int1Hndl->pf_funPtr = pt_intConf->pf_funPtr;
    57f0:	12 96       	adiw	r26, 0x02	; 2
    57f2:	8d 91       	ld	r24, X+
    57f4:	9c 91       	ld	r25, X
    57f6:	13 97       	sbiw	r26, 0x03	; 3
    57f8:	82 83       	std	Z+2, r24	; 0x02
    57fa:	93 83       	std	Z+3, r25	; 0x03
            }

            switch( pt_intConf->c_pin)
    57fc:	8c 91       	ld	r24, X
    57fe:	88 30       	cpi	r24, 0x08	; 8
    5800:	81 f1       	breq	.+96     	; 0x5862 <confInt+0x206>
    5802:	89 30       	cpi	r24, 0x09	; 9
    5804:	40 f4       	brcc	.+16     	; 0x5816 <confInt+0x1ba>
    5806:	82 30       	cpi	r24, 0x02	; 2
    5808:	e1 f0       	breq	.+56     	; 0x5842 <confInt+0x1e6>
    580a:	84 30       	cpi	r24, 0x04	; 4
    580c:	11 f1       	breq	.+68     	; 0x5852 <confInt+0x1f6>
    580e:	81 30       	cpi	r24, 0x01	; 1
    5810:	09 f0       	breq	.+2      	; 0x5814 <confInt+0x1b8>
    5812:	4e c0       	rjmp	.+156    	; 0x58b0 <confInt+0x254>
    5814:	0e c0       	rjmp	.+28     	; 0x5832 <confInt+0x1d6>
    5816:	80 32       	cpi	r24, 0x20	; 32
    5818:	a1 f1       	breq	.+104    	; 0x5882 <confInt+0x226>
    581a:	81 32       	cpi	r24, 0x21	; 33
    581c:	20 f4       	brcc	.+8      	; 0x5826 <confInt+0x1ca>
    581e:	80 31       	cpi	r24, 0x10	; 16
    5820:	09 f0       	breq	.+2      	; 0x5824 <confInt+0x1c8>
    5822:	46 c0       	rjmp	.+140    	; 0x58b0 <confInt+0x254>
    5824:	26 c0       	rjmp	.+76     	; 0x5872 <confInt+0x216>
    5826:	80 34       	cpi	r24, 0x40	; 64
    5828:	a1 f1       	breq	.+104    	; 0x5892 <confInt+0x236>
    582a:	80 38       	cpi	r24, 0x80	; 128
    582c:	09 f0       	breq	.+2      	; 0x5830 <confInt+0x1d4>
    582e:	40 c0       	rjmp	.+128    	; 0x58b0 <confInt+0x254>
    5830:	38 c0       	rjmp	.+112    	; 0x58a2 <confInt+0x246>
            {
               case PIN_0:
                  pt_port->PIN0CTRL |= pt_intConf->t_inSense;
    5832:	f8 01       	movw	r30, r16
    5834:	80 89       	ldd	r24, Z+16	; 0x10
    5836:	d7 01       	movw	r26, r14
    5838:	11 96       	adiw	r26, 0x01	; 1
    583a:	9c 91       	ld	r25, X
    583c:	89 2b       	or	r24, r25
    583e:	80 8b       	std	Z+16, r24	; 0x10
    5840:	37 c0       	rjmp	.+110    	; 0x58b0 <confInt+0x254>
               break;

               case PIN_1:
                  pt_port->PIN1CTRL |= pt_intConf->t_inSense;
    5842:	f8 01       	movw	r30, r16
    5844:	81 89       	ldd	r24, Z+17	; 0x11
    5846:	d7 01       	movw	r26, r14
    5848:	11 96       	adiw	r26, 0x01	; 1
    584a:	9c 91       	ld	r25, X
    584c:	89 2b       	or	r24, r25
    584e:	81 8b       	std	Z+17, r24	; 0x11
    5850:	2f c0       	rjmp	.+94     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_2:
                  pt_port->PIN2CTRL |= pt_intConf->t_inSense;
    5852:	f8 01       	movw	r30, r16
    5854:	82 89       	ldd	r24, Z+18	; 0x12
    5856:	d7 01       	movw	r26, r14
    5858:	11 96       	adiw	r26, 0x01	; 1
    585a:	9c 91       	ld	r25, X
    585c:	89 2b       	or	r24, r25
    585e:	82 8b       	std	Z+18, r24	; 0x12
    5860:	27 c0       	rjmp	.+78     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_3:
                  pt_port->PIN3CTRL |= pt_intConf->t_inSense;
    5862:	f8 01       	movw	r30, r16
    5864:	83 89       	ldd	r24, Z+19	; 0x13
    5866:	d7 01       	movw	r26, r14
    5868:	11 96       	adiw	r26, 0x01	; 1
    586a:	9c 91       	ld	r25, X
    586c:	89 2b       	or	r24, r25
    586e:	83 8b       	std	Z+19, r24	; 0x13
    5870:	1f c0       	rjmp	.+62     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_4:
                  pt_port->PIN4CTRL |= pt_intConf->t_inSense;
    5872:	f8 01       	movw	r30, r16
    5874:	84 89       	ldd	r24, Z+20	; 0x14
    5876:	d7 01       	movw	r26, r14
    5878:	11 96       	adiw	r26, 0x01	; 1
    587a:	9c 91       	ld	r25, X
    587c:	89 2b       	or	r24, r25
    587e:	84 8b       	std	Z+20, r24	; 0x14
    5880:	17 c0       	rjmp	.+46     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_5:
                  pt_port->PIN5CTRL |= pt_intConf->t_inSense;
    5882:	f8 01       	movw	r30, r16
    5884:	85 89       	ldd	r24, Z+21	; 0x15
    5886:	d7 01       	movw	r26, r14
    5888:	11 96       	adiw	r26, 0x01	; 1
    588a:	9c 91       	ld	r25, X
    588c:	89 2b       	or	r24, r25
    588e:	85 8b       	std	Z+21, r24	; 0x15
    5890:	0f c0       	rjmp	.+30     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_6:
                  pt_port->PIN6CTRL |= pt_intConf->t_inSense;
    5892:	f8 01       	movw	r30, r16
    5894:	86 89       	ldd	r24, Z+22	; 0x16
    5896:	d7 01       	movw	r26, r14
    5898:	11 96       	adiw	r26, 0x01	; 1
    589a:	9c 91       	ld	r25, X
    589c:	89 2b       	or	r24, r25
    589e:	86 8b       	std	Z+22, r24	; 0x16
    58a0:	07 c0       	rjmp	.+14     	; 0x58b0 <confInt+0x254>
               break;

               case PIN_7:
                  pt_port->PIN7CTRL |= pt_intConf->t_inSense;
    58a2:	f8 01       	movw	r30, r16
    58a4:	87 89       	ldd	r24, Z+23	; 0x17
    58a6:	d7 01       	movw	r26, r14
    58a8:	11 96       	adiw	r26, 0x01	; 1
    58aa:	9c 91       	ld	r25, X
    58ac:	89 2b       	or	r24, r25
    58ae:	87 8b       	std	Z+23, r24	; 0x17
            }/*End switch( pt_intConf->c_pin)*/

            /*---------------------------------------------------------------*
             * This value must match that set in the PMIC control register
             *---------------------------------------------------------------*/
            pt_port->INTCTRL |= PORT_INT1LVL_HI_gc;
    58b0:	f8 01       	movw	r30, r16
    58b2:	81 85       	ldd	r24, Z+9	; 0x09
    58b4:	8c 60       	ori	r24, 0x0C	; 12
    58b6:	81 87       	std	Z+9, r24	; 0x09
            pt_port->INT1MASK = pt_intConf->c_pin;
    58b8:	d7 01       	movw	r26, r14
    58ba:	8c 91       	ld	r24, X
    58bc:	83 87       	std	Z+11, r24	; 0x0b
         }
      }

   }/*End if( t_err == GPIO_PASSED)*/

   return t_linkHndl;
    58be:	29 81       	ldd	r18, Y+1	; 0x01
    58c0:	3a 81       	ldd	r19, Y+2	; 0x02
    58c2:	02 c0       	rjmp	.+4      	; 0x58c8 <confInt+0x26c>
    58c4:	2e ef       	ldi	r18, 0xFE	; 254
    58c6:	3f ef       	ldi	r19, 0xFF	; 255

}/*End confInt*/
    58c8:	c9 01       	movw	r24, r18
    58ca:	0f 90       	pop	r0
    58cc:	0f 90       	pop	r0
    58ce:	cf 91       	pop	r28
    58d0:	df 91       	pop	r29
    58d2:	1f 91       	pop	r17
    58d4:	0f 91       	pop	r16
    58d6:	ff 90       	pop	r15
    58d8:	ef 90       	pop	r14
    58da:	df 90       	pop	r13
    58dc:	cf 90       	pop	r12
    58de:	08 95       	ret

000058e0 <hal_requestGpioInt>:

}/*End hal_configureGpioPort*/

t_GPIOHNDL hal_requestGpioInt( t_gpioPort t_port,
                               t_intConf  t_conf)
{
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	cd b7       	in	r28, 0x3d	; 61
    58e6:	de b7       	in	r29, 0x3e	; 62
    58e8:	27 97       	sbiw	r28, 0x07	; 7
    58ea:	cd bf       	out	0x3d, r28	; 61
    58ec:	de bf       	out	0x3e, r29	; 62
    58ee:	98 2f       	mov	r25, r24
    58f0:	4c 83       	std	Y+4, r20	; 0x04
    58f2:	5d 83       	std	Y+5, r21	; 0x05
    58f4:	6e 83       	std	Y+6, r22	; 0x06
    58f6:	7f 83       	std	Y+7, r23	; 0x07

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    58f8:	8f b7       	in	r24, 0x3f	; 63
    58fa:	89 83       	std	Y+1, r24	; 0x01
    58fc:	f8 94       	cli

   switch( t_port)
    58fe:	95 30       	cpi	r25, 0x05	; 5
    5900:	09 f4       	brne	.+2      	; 0x5904 <hal_requestGpioInt+0x24>
    5902:	4c c0       	rjmp	.+152    	; 0x599c <hal_requestGpioInt+0xbc>
    5904:	96 30       	cpi	r25, 0x06	; 6
    5906:	80 f4       	brcc	.+32     	; 0x5928 <hal_requestGpioInt+0x48>
    5908:	92 30       	cpi	r25, 0x02	; 2
    590a:	81 f1       	breq	.+96     	; 0x596c <hal_requestGpioInt+0x8c>
    590c:	93 30       	cpi	r25, 0x03	; 3
    590e:	30 f4       	brcc	.+12     	; 0x591c <hal_requestGpioInt+0x3c>
    5910:	99 23       	and	r25, r25
    5912:	e1 f0       	breq	.+56     	; 0x594c <hal_requestGpioInt+0x6c>
    5914:	91 30       	cpi	r25, 0x01	; 1
    5916:	09 f0       	breq	.+2      	; 0x591a <hal_requestGpioInt+0x3a>
    5918:	79 c0       	rjmp	.+242    	; 0x5a0c <hal_requestGpioInt+0x12c>
    591a:	20 c0       	rjmp	.+64     	; 0x595c <hal_requestGpioInt+0x7c>
    591c:	93 30       	cpi	r25, 0x03	; 3
    591e:	71 f1       	breq	.+92     	; 0x597c <hal_requestGpioInt+0x9c>
    5920:	94 30       	cpi	r25, 0x04	; 4
    5922:	09 f0       	breq	.+2      	; 0x5926 <hal_requestGpioInt+0x46>
    5924:	73 c0       	rjmp	.+230    	; 0x5a0c <hal_requestGpioInt+0x12c>
    5926:	32 c0       	rjmp	.+100    	; 0x598c <hal_requestGpioInt+0xac>
    5928:	98 30       	cpi	r25, 0x08	; 8
    592a:	09 f4       	brne	.+2      	; 0x592e <hal_requestGpioInt+0x4e>
    592c:	4f c0       	rjmp	.+158    	; 0x59cc <hal_requestGpioInt+0xec>
    592e:	99 30       	cpi	r25, 0x09	; 9
    5930:	30 f4       	brcc	.+12     	; 0x593e <hal_requestGpioInt+0x5e>
    5932:	96 30       	cpi	r25, 0x06	; 6
    5934:	d9 f1       	breq	.+118    	; 0x59ac <hal_requestGpioInt+0xcc>
    5936:	97 30       	cpi	r25, 0x07	; 7
    5938:	09 f0       	breq	.+2      	; 0x593c <hal_requestGpioInt+0x5c>
    593a:	68 c0       	rjmp	.+208    	; 0x5a0c <hal_requestGpioInt+0x12c>
    593c:	3f c0       	rjmp	.+126    	; 0x59bc <hal_requestGpioInt+0xdc>
    593e:	99 30       	cpi	r25, 0x09	; 9
    5940:	09 f4       	brne	.+2      	; 0x5944 <hal_requestGpioInt+0x64>
    5942:	4c c0       	rjmp	.+152    	; 0x59dc <hal_requestGpioInt+0xfc>
    5944:	9a 30       	cpi	r25, 0x0A	; 10
    5946:	09 f0       	breq	.+2      	; 0x594a <hal_requestGpioInt+0x6a>
    5948:	61 c0       	rjmp	.+194    	; 0x5a0c <hal_requestGpioInt+0x12c>
    594a:	50 c0       	rjmp	.+160    	; 0x59ec <hal_requestGpioInt+0x10c>
   {
      case GPIO_PORTA:

         t_linkHndl = confInt( &PORTA,
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	96 e0       	ldi	r25, 0x06	; 6
    5950:	be 01       	movw	r22, r28
    5952:	6c 5f       	subi	r22, 0xFC	; 252
    5954:	7f 4f       	sbci	r23, 0xFF	; 255
    5956:	40 e0       	ldi	r20, 0x00	; 0
    5958:	21 e0       	ldi	r18, 0x01	; 1
    595a:	4f c0       	rjmp	.+158    	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTA:*/

      case GPIO_PORTB:

         t_linkHndl = confInt( &PORTB,
    595c:	80 e2       	ldi	r24, 0x20	; 32
    595e:	96 e0       	ldi	r25, 0x06	; 6
    5960:	be 01       	movw	r22, r28
    5962:	6c 5f       	subi	r22, 0xFC	; 252
    5964:	7f 4f       	sbci	r23, 0xFF	; 255
    5966:	42 e0       	ldi	r20, 0x02	; 2
    5968:	23 e0       	ldi	r18, 0x03	; 3
    596a:	47 c0       	rjmp	.+142    	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTB:*/

      case GPIO_PORTC:

         t_linkHndl = confInt( &PORTC,
    596c:	80 e4       	ldi	r24, 0x40	; 64
    596e:	96 e0       	ldi	r25, 0x06	; 6
    5970:	be 01       	movw	r22, r28
    5972:	6c 5f       	subi	r22, 0xFC	; 252
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	44 e0       	ldi	r20, 0x04	; 4
    5978:	25 e0       	ldi	r18, 0x05	; 5
    597a:	3f c0       	rjmp	.+126    	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTC:*/

      case GPIO_PORTD:

         t_linkHndl = confInt( &PORTD,
    597c:	80 e6       	ldi	r24, 0x60	; 96
    597e:	96 e0       	ldi	r25, 0x06	; 6
    5980:	be 01       	movw	r22, r28
    5982:	6c 5f       	subi	r22, 0xFC	; 252
    5984:	7f 4f       	sbci	r23, 0xFF	; 255
    5986:	46 e0       	ldi	r20, 0x06	; 6
    5988:	27 e0       	ldi	r18, 0x07	; 7
    598a:	37 c0       	rjmp	.+110    	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTD:*/

      case GPIO_PORTE:

         t_linkHndl = confInt( &PORTE,
    598c:	80 e8       	ldi	r24, 0x80	; 128
    598e:	96 e0       	ldi	r25, 0x06	; 6
    5990:	be 01       	movw	r22, r28
    5992:	6c 5f       	subi	r22, 0xFC	; 252
    5994:	7f 4f       	sbci	r23, 0xFF	; 255
    5996:	48 e0       	ldi	r20, 0x08	; 8
    5998:	29 e0       	ldi	r18, 0x09	; 9
    599a:	2f c0       	rjmp	.+94     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTE:*/

      case GPIO_PORTF:

         t_linkHndl = confInt( &PORTF,
    599c:	80 ea       	ldi	r24, 0xA0	; 160
    599e:	96 e0       	ldi	r25, 0x06	; 6
    59a0:	be 01       	movw	r22, r28
    59a2:	6c 5f       	subi	r22, 0xFC	; 252
    59a4:	7f 4f       	sbci	r23, 0xFF	; 255
    59a6:	4a e0       	ldi	r20, 0x0A	; 10
    59a8:	2b e0       	ldi	r18, 0x0B	; 11
    59aa:	27 c0       	rjmp	.+78     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTF:*/

      case GPIO_PORTH:

         t_linkHndl = confInt( &PORTH,
    59ac:	80 ee       	ldi	r24, 0xE0	; 224
    59ae:	96 e0       	ldi	r25, 0x06	; 6
    59b0:	be 01       	movw	r22, r28
    59b2:	6c 5f       	subi	r22, 0xFC	; 252
    59b4:	7f 4f       	sbci	r23, 0xFF	; 255
    59b6:	4c e0       	ldi	r20, 0x0C	; 12
    59b8:	2d e0       	ldi	r18, 0x0D	; 13
    59ba:	1f c0       	rjmp	.+62     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTH:*/

      case GPIO_PORTJ:

         t_linkHndl = confInt( &PORTJ,
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	97 e0       	ldi	r25, 0x07	; 7
    59c0:	be 01       	movw	r22, r28
    59c2:	6c 5f       	subi	r22, 0xFC	; 252
    59c4:	7f 4f       	sbci	r23, 0xFF	; 255
    59c6:	4e e0       	ldi	r20, 0x0E	; 14
    59c8:	2f e0       	ldi	r18, 0x0F	; 15
    59ca:	17 c0       	rjmp	.+46     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTJ:*/

      case GPIO_PORTK:

         t_linkHndl = confInt( &PORTK,
    59cc:	80 e2       	ldi	r24, 0x20	; 32
    59ce:	97 e0       	ldi	r25, 0x07	; 7
    59d0:	be 01       	movw	r22, r28
    59d2:	6c 5f       	subi	r22, 0xFC	; 252
    59d4:	7f 4f       	sbci	r23, 0xFF	; 255
    59d6:	40 e1       	ldi	r20, 0x10	; 16
    59d8:	21 e1       	ldi	r18, 0x11	; 17
    59da:	0f c0       	rjmp	.+30     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTK:*/

      case GPIO_PORTQ:

         t_linkHndl = confInt( &PORTQ,
    59dc:	80 ec       	ldi	r24, 0xC0	; 192
    59de:	97 e0       	ldi	r25, 0x07	; 7
    59e0:	be 01       	movw	r22, r28
    59e2:	6c 5f       	subi	r22, 0xFC	; 252
    59e4:	7f 4f       	sbci	r23, 0xFF	; 255
    59e6:	42 e1       	ldi	r20, 0x12	; 18
    59e8:	23 e1       	ldi	r18, 0x13	; 19
    59ea:	07 c0       	rjmp	.+14     	; 0x59fa <hal_requestGpioInt+0x11a>

      break;/*End case GPIO_PORTQ:*/

      case GPIO_PORTR:

         t_linkHndl = confInt( &PORTR,
    59ec:	80 ee       	ldi	r24, 0xE0	; 224
    59ee:	97 e0       	ldi	r25, 0x07	; 7
    59f0:	be 01       	movw	r22, r28
    59f2:	6c 5f       	subi	r22, 0xFC	; 252
    59f4:	7f 4f       	sbci	r23, 0xFF	; 255
    59f6:	44 e1       	ldi	r20, 0x14	; 20
    59f8:	25 e1       	ldi	r18, 0x15	; 21
    59fa:	0e 94 2e 2b 	call	0x565c	; 0x565c <confInt>
    59fe:	8a 83       	std	Y+2, r24	; 0x02
    5a00:	9b 83       	std	Y+3, r25	; 0x03

      break;

   }/*End switch( t_port)*/

   HAL_END_CRITICAL();//Enable interrupts
    5a02:	89 81       	ldd	r24, Y+1	; 0x01
    5a04:	8f bf       	out	0x3f, r24	; 63

   return (t_GPIOHNDL)t_linkHndl;
    5a06:	2a 81       	ldd	r18, Y+2	; 0x02
    5a08:	3b 81       	ldd	r19, Y+3	; 0x03
    5a0a:	04 c0       	rjmp	.+8      	; 0x5a14 <hal_requestGpioInt+0x134>

      break;/*End case GPIO_PORTR:*/

      default:

         HAL_END_CRITICAL();//Enable interrupts
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	8f bf       	out	0x3f, r24	; 63
    5a10:	2c ef       	ldi	r18, 0xFC	; 252
    5a12:	3f ef       	ldi	r19, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return (t_GPIOHNDL)t_linkHndl;

}/*End hal_requestGpioInt*/
    5a14:	c9 01       	movw	r24, r18
    5a16:	27 96       	adiw	r28, 0x07	; 7
    5a18:	cd bf       	out	0x3d, r28	; 61
    5a1a:	de bf       	out	0x3e, r29	; 62
    5a1c:	cf 91       	pop	r28
    5a1e:	df 91       	pop	r29
    5a20:	08 95       	ret

00005a22 <hal_initThreadStack>:
                          t_parameters t_parms,
                          t_arguments t_args,
                          uint8_t *pc_stackPtr,
                          uint16_t s_endOfStackAdd,
                          uint16_t *ps_sP)
{
    5a22:	cf 92       	push	r12
    5a24:	df 92       	push	r13
    5a26:	ef 92       	push	r14
    5a28:	ff 92       	push	r15
    5a2a:	0f 93       	push	r16
    5a2c:	1f 93       	push	r17
    5a2e:	f9 01       	movw	r30, r18
    5a30:	97 01       	movw	r18, r14
   /*------------------------------------------------------------------------*
    * Make sure the stack pointer is pointing to the address of the thread's
    * call back function..for some reason we need to shift this address left
    * by 8
    *------------------------------------------------------------------------*/
   i_funAdd = (uint32_t)((uint16_t)pt_function);
    5a32:	a0 e0       	ldi	r26, 0x00	; 0
    5a34:	b0 e0       	ldi	r27, 0x00	; 0
   i_funAdd = i_funAdd << 8;
    5a36:	ba 2f       	mov	r27, r26
    5a38:	a9 2f       	mov	r26, r25
    5a3a:	98 2f       	mov	r25, r24
    5a3c:	88 27       	eor	r24, r24

   *pc_stackPtr = i_funAdd & 0x000000FF;
    5a3e:	80 83       	st	Z, r24
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 8) & 0x000000FF;
    5a40:	c9 2e       	mov	r12, r25
    5a42:	da 2e       	mov	r13, r26
    5a44:	eb 2e       	mov	r14, r27
    5a46:	ff 24       	eor	r15, r15
    5a48:	c2 92       	st	-Z, r12
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 16) & 0x000000FF;
    5a4a:	cd 01       	movw	r24, r26
    5a4c:	aa 27       	eor	r26, r26
    5a4e:	bb 27       	eor	r27, r27
    5a50:	82 93       	st	-Z, r24
   pc_stackPtr--;
   *pc_stackPtr = (i_funAdd >> 24) & 0x000000FF;
    5a52:	12 92       	st	-Z, r1
   /*------------------------------------------------------------------------*
    * Initialize the rest of the data on the stack so that the context
    * restore function works properly when we call this thread for the first
    * time.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = 0x00; /*r0*/
    5a54:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x80; /*SREG with interrupts enabled*/
    5a56:	80 e8       	ldi	r24, 0x80	; 128
    5a58:	82 93       	st	-Z, r24
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r1*/
    5a5a:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r2*/
    5a5c:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r3*/
    5a5e:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r4*/
    5a60:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r5*/
    5a62:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r6*/
    5a64:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r7*/
    5a66:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r8*/
    5a68:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r9*/
    5a6a:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r10*/
    5a6c:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r11*/
    5a6e:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r12*/
    5a70:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r13*/
    5a72:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r14*/
    5a74:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r15*/
    5a76:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r16*/
    5a78:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r17*/
    5a7a:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r18*/
    5a7c:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r19*/
    5a7e:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r20*/
    5a80:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r21*/
    5a82:	12 92       	st	-Z, r1
   pc_stackPtr--;
   /*------------------------------------------------------------------------*
    * Function parameters are stored from left to right starting with CPU
    * register 25 and ending at CPU register 8.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = (uint8_t)t_args;         /*r22*/
    5a84:	42 93       	st	-Z, r20
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(t_args >> 8);  /*r23*/
    5a86:	45 2f       	mov	r20, r21
    5a88:	55 0f       	add	r21, r21
    5a8a:	55 0b       	sbc	r21, r21
    5a8c:	42 93       	st	-Z, r20
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)t_parms;        /*r24*/
    5a8e:	62 93       	st	-Z, r22
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(t_parms >> 8); /*r25*/
    5a90:	67 2f       	mov	r22, r23
    5a92:	77 0f       	add	r23, r23
    5a94:	77 0b       	sbc	r23, r23
    5a96:	62 93       	st	-Z, r22
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r26*/
    5a98:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r27*/
    5a9a:	12 92       	st	-Z, r1
   /*------------------------------------------------------------------------*
    * Since the stack frame pointer (Y registers) is another way of reading
    * and writing to the stack by the compiler, we need to make sure it is
    * assigned to the starting location (end of stack) of the stack.
    *------------------------------------------------------------------------*/
   *pc_stackPtr = (uint8_t)s_endOfStackAdd;        /*r28*/
    5a9c:	02 93       	st	-Z, r16
   pc_stackPtr--;
   *pc_stackPtr = (uint8_t)(s_endOfStackAdd >> 8); /*r29*/
    5a9e:	12 93       	st	-Z, r17
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r30*/
    5aa0:	12 92       	st	-Z, r1
   pc_stackPtr--;
   *pc_stackPtr = 0x00; /*r31*/
    5aa2:	12 92       	st	-Z, r1
   pc_stackPtr--;

   /*------------------------------------------------------------------------*
    * Save the stack pointer
    *------------------------------------------------------------------------*/
   *ps_sP = (uint16_t)pc_stackPtr;
    5aa4:	31 97       	sbiw	r30, 0x01	; 1
    5aa6:	d9 01       	movw	r26, r18
    5aa8:	ed 93       	st	X+, r30
    5aaa:	fc 93       	st	X, r31

    5aac:	1f 91       	pop	r17
    5aae:	0f 91       	pop	r16
    5ab0:	ff 90       	pop	r15
    5ab2:	ef 90       	pop	r14
    5ab4:	df 90       	pop	r13
    5ab6:	cf 90       	pop	r12
    5ab8:	08 95       	ret

00005aba <hal_configureIntLevel>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void hal_configureIntLevel(t_pmicLevel t_level)
{
   PMIC.CTRL |= t_level;
    5aba:	e0 ea       	ldi	r30, 0xA0	; 160
    5abc:	f0 e0       	ldi	r31, 0x00	; 0
    5abe:	92 81       	ldd	r25, Z+2	; 0x02
    5ac0:	98 2b       	or	r25, r24
    5ac2:	92 83       	std	Z+2, r25	; 0x02
}/*End hal_configureIntLevel*/
    5ac4:	08 95       	ret

00005ac6 <processSpiInterrupt>:

}/*End processSlaveSpiChipSelectInt*/

static void processSpiInterrupt( t_spiChanHndl *pt_chanHndl,
                                 t_spiUserHndl *pt_activeUser)
{
    5ac6:	0f 93       	push	r16
    5ac8:	1f 93       	push	r17
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	8c 01       	movw	r16, r24
    5ad0:	ab 01       	movw	r20, r22

    if( pt_chanHndl->t_spiOp == SPI_MASTER)
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	16 96       	adiw	r26, 0x06	; 6
    5ad6:	8c 91       	ld	r24, X
    5ad8:	88 23       	and	r24, r24
    5ada:	09 f0       	breq	.+2      	; 0x5ade <processSpiInterrupt+0x18>
    5adc:	d2 c0       	rjmp	.+420    	; 0x5c82 <processSpiInterrupt+0x1bc>
/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static bool updateBuffersMast( t_spiUserHndl *pt_handle)
{
    int8_t *pc_rxBuf = pt_handle->pc_rxData;
    5ade:	fb 01       	movw	r30, r22
    5ae0:	64 81       	ldd	r22, Z+4	; 0x04
    5ae2:	75 81       	ldd	r23, Z+5	; 0x05
    int8_t *pc_txBuf = pt_handle->pc_txData;
    5ae4:	c2 81       	ldd	r28, Z+2	; 0x02
    5ae6:	d3 81       	ldd	r29, Z+3	; 0x03
    5ae8:	04 84       	ldd	r0, Z+12	; 0x0c
    5aea:	f5 85       	ldd	r31, Z+13	; 0x0d
    5aec:	e0 2d       	mov	r30, r0
    uint16_t *ps_bufIndex = &pt_handle->s_bufIndex;

    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
    5aee:	80 e2       	ldi	r24, 0x20	; 32
    5af0:	67 3c       	cpi	r22, 0xC7	; 199
    5af2:	78 07       	cpc	r23, r24
    5af4:	71 f0       	breq	.+28     	; 0x5b12 <processSpiInterrupt+0x4c>
   {
       pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5af6:	07 80       	ldd	r0, Z+7	; 0x07
    5af8:	f0 85       	ldd	r31, Z+8	; 0x08
    5afa:	e0 2d       	mov	r30, r0
    5afc:	23 81       	ldd	r18, Z+3	; 0x03
    5afe:	da 01       	movw	r26, r20
    5b00:	18 96       	adiw	r26, 0x08	; 8
    5b02:	8d 91       	ld	r24, X+
    5b04:	9c 91       	ld	r25, X
    5b06:	19 97       	sbiw	r26, 0x09	; 9
    5b08:	68 0f       	add	r22, r24
    5b0a:	79 1f       	adc	r23, r25
    5b0c:	fb 01       	movw	r30, r22
    5b0e:	20 83       	st	Z, r18
    5b10:	06 c0       	rjmp	.+12     	; 0x5b1e <processSpiInterrupt+0x58>
    }
   else
      pc_rxBuf[0] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5b12:	07 80       	ldd	r0, Z+7	; 0x07
    5b14:	f0 85       	ldd	r31, Z+8	; 0x08
    5b16:	e0 2d       	mov	r30, r0
    5b18:	83 81       	ldd	r24, Z+3	; 0x03
    5b1a:	80 93 c7 20 	sts	0x20C7, r24

   (*ps_bufIndex)++;
    5b1e:	da 01       	movw	r26, r20
    5b20:	18 96       	adiw	r26, 0x08	; 8
    5b22:	6d 91       	ld	r22, X+
    5b24:	7c 91       	ld	r23, X
    5b26:	19 97       	sbiw	r26, 0x09	; 9
    5b28:	6f 5f       	subi	r22, 0xFF	; 255
    5b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b2c:	18 96       	adiw	r26, 0x08	; 8
    5b2e:	6d 93       	st	X+, r22
    5b30:	7c 93       	st	X, r23
    5b32:	19 97       	sbiw	r26, 0x09	; 9

    /*------------------------------------------------------------------------*
     * Is there more data that needs to be tx'd?
     *------------------------------------------------------------------------*/
    if( (*ps_bufIndex) < pt_handle->s_bufLength)
    5b34:	16 96       	adiw	r26, 0x06	; 6
    5b36:	8d 91       	ld	r24, X+
    5b38:	9c 91       	ld	r25, X
    5b3a:	17 97       	sbiw	r26, 0x07	; 7
    5b3c:	68 17       	cp	r22, r24
    5b3e:	79 07       	cpc	r23, r25
    5b40:	a0 f4       	brcc	.+40     	; 0x5b6a <processSpiInterrupt+0xa4>
    5b42:	1c 96       	adiw	r26, 0x0c	; 12
    5b44:	ed 91       	ld	r30, X+
    5b46:	fc 91       	ld	r31, X
    5b48:	1d 97       	sbiw	r26, 0x0d	; 13
    {
      if( pc_txBuf != (int8_t *)&gc_tempBuf)
    5b4a:	b0 e2       	ldi	r27, 0x20	; 32
    5b4c:	c7 3c       	cpi	r28, 0xC7	; 199
    5b4e:	db 07       	cpc	r29, r27
    5b50:	31 f0       	breq	.+12     	; 0x5b5e <processSpiInterrupt+0x98>
           pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[(*ps_bufIndex)];
    5b52:	07 80       	ldd	r0, Z+7	; 0x07
    5b54:	f0 85       	ldd	r31, Z+8	; 0x08
    5b56:	e0 2d       	mov	r30, r0
    5b58:	c6 0f       	add	r28, r22
    5b5a:	d7 1f       	adc	r29, r23
    5b5c:	03 c0       	rjmp	.+6      	; 0x5b64 <processSpiInterrupt+0x9e>
      else
         pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[0];
    5b5e:	07 80       	ldd	r0, Z+7	; 0x07
    5b60:	f0 85       	ldd	r31, Z+8	; 0x08
    5b62:	e0 2d       	mov	r30, r0
    5b64:	88 81       	ld	r24, Y
    5b66:	83 83       	std	Z+3, r24	; 0x03
    5b68:	17 c1       	rjmp	.+558    	; 0x5d98 <processSpiInterrupt+0x2d2>
        {

          /*---------------------------------------------------------------*
           * Release spi channel
           *---------------------------------------------------------------*/
          if( pt_activeUser->b_enCs == true)
    5b6a:	fa 01       	movw	r30, r20
    5b6c:	80 89       	ldd	r24, Z+16	; 0x10
    5b6e:	88 23       	and	r24, r24
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <processSpiInterrupt+0xae>
    5b72:	79 c0       	rjmp	.+242    	; 0x5c66 <processSpiInterrupt+0x1a0>
          {
             hal_gpioOn( pt_activeUser->t_csPort,
    5b74:	93 85       	ldd	r25, Z+11	; 0x0b
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    5b76:	82 85       	ldd	r24, Z+10	; 0x0a
    5b78:	85 30       	cpi	r24, 0x05	; 5
    5b7a:	09 f4       	brne	.+2      	; 0x5b7e <processSpiInterrupt+0xb8>
    5b7c:	4a c0       	rjmp	.+148    	; 0x5c12 <processSpiInterrupt+0x14c>
    5b7e:	86 30       	cpi	r24, 0x06	; 6
    5b80:	80 f4       	brcc	.+32     	; 0x5ba2 <processSpiInterrupt+0xdc>
    5b82:	82 30       	cpi	r24, 0x02	; 2
    5b84:	81 f1       	breq	.+96     	; 0x5be6 <processSpiInterrupt+0x120>
    5b86:	83 30       	cpi	r24, 0x03	; 3
    5b88:	30 f4       	brcc	.+12     	; 0x5b96 <processSpiInterrupt+0xd0>
    5b8a:	88 23       	and	r24, r24
    5b8c:	e1 f0       	breq	.+56     	; 0x5bc6 <processSpiInterrupt+0x100>
    5b8e:	81 30       	cpi	r24, 0x01	; 1
    5b90:	09 f0       	breq	.+2      	; 0x5b94 <processSpiInterrupt+0xce>
    5b92:	69 c0       	rjmp	.+210    	; 0x5c66 <processSpiInterrupt+0x1a0>
    5b94:	20 c0       	rjmp	.+64     	; 0x5bd6 <processSpiInterrupt+0x110>
    5b96:	83 30       	cpi	r24, 0x03	; 3
    5b98:	71 f1       	breq	.+92     	; 0x5bf6 <processSpiInterrupt+0x130>
    5b9a:	84 30       	cpi	r24, 0x04	; 4
    5b9c:	09 f0       	breq	.+2      	; 0x5ba0 <processSpiInterrupt+0xda>
    5b9e:	63 c0       	rjmp	.+198    	; 0x5c66 <processSpiInterrupt+0x1a0>
    5ba0:	31 c0       	rjmp	.+98     	; 0x5c04 <processSpiInterrupt+0x13e>
    5ba2:	88 30       	cpi	r24, 0x08	; 8
    5ba4:	09 f4       	brne	.+2      	; 0x5ba8 <processSpiInterrupt+0xe2>
    5ba6:	4a c0       	rjmp	.+148    	; 0x5c3c <processSpiInterrupt+0x176>
    5ba8:	89 30       	cpi	r24, 0x09	; 9
    5baa:	30 f4       	brcc	.+12     	; 0x5bb8 <processSpiInterrupt+0xf2>
    5bac:	86 30       	cpi	r24, 0x06	; 6
    5bae:	c1 f1       	breq	.+112    	; 0x5c20 <processSpiInterrupt+0x15a>
    5bb0:	87 30       	cpi	r24, 0x07	; 7
    5bb2:	09 f0       	breq	.+2      	; 0x5bb6 <processSpiInterrupt+0xf0>
    5bb4:	58 c0       	rjmp	.+176    	; 0x5c66 <processSpiInterrupt+0x1a0>
    5bb6:	3b c0       	rjmp	.+118    	; 0x5c2e <processSpiInterrupt+0x168>
    5bb8:	89 30       	cpi	r24, 0x09	; 9
    5bba:	09 f4       	brne	.+2      	; 0x5bbe <processSpiInterrupt+0xf8>
    5bbc:	46 c0       	rjmp	.+140    	; 0x5c4a <processSpiInterrupt+0x184>
    5bbe:	8a 30       	cpi	r24, 0x0A	; 10
    5bc0:	09 f0       	breq	.+2      	; 0x5bc4 <processSpiInterrupt+0xfe>
    5bc2:	51 c0       	rjmp	.+162    	; 0x5c66 <processSpiInterrupt+0x1a0>
    5bc4:	49 c0       	rjmp	.+146    	; 0x5c58 <processSpiInterrupt+0x192>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    5bc6:	80 91 00 06 	lds	r24, 0x0600
    5bca:	89 23       	and	r24, r25
    5bcc:	09 f4       	brne	.+2      	; 0x5bd0 <processSpiInterrupt+0x10a>
    5bce:	4b c0       	rjmp	.+150    	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    5bd0:	e0 e0       	ldi	r30, 0x00	; 0
    5bd2:	f6 e0       	ldi	r31, 0x06	; 6
    5bd4:	47 c0       	rjmp	.+142    	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    5bd6:	80 91 20 06 	lds	r24, 0x0620
    5bda:	89 23       	and	r24, r25
    5bdc:	09 f4       	brne	.+2      	; 0x5be0 <processSpiInterrupt+0x11a>
    5bde:	43 c0       	rjmp	.+134    	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    5be0:	e0 e2       	ldi	r30, 0x20	; 32
    5be2:	f6 e0       	ldi	r31, 0x06	; 6
    5be4:	3f c0       	rjmp	.+126    	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    5be6:	80 91 40 06 	lds	r24, 0x0640
    5bea:	89 23       	and	r24, r25
    5bec:	09 f4       	brne	.+2      	; 0x5bf0 <processSpiInterrupt+0x12a>
    5bee:	3b c0       	rjmp	.+118    	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    5bf0:	e0 e4       	ldi	r30, 0x40	; 64
    5bf2:	f6 e0       	ldi	r31, 0x06	; 6
    5bf4:	37 c0       	rjmp	.+110    	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    5bf6:	80 91 60 06 	lds	r24, 0x0660
    5bfa:	89 23       	and	r24, r25
    5bfc:	a1 f1       	breq	.+104    	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    5bfe:	e0 e6       	ldi	r30, 0x60	; 96
    5c00:	f6 e0       	ldi	r31, 0x06	; 6
    5c02:	30 c0       	rjmp	.+96     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    5c04:	80 91 80 06 	lds	r24, 0x0680
    5c08:	89 23       	and	r24, r25
    5c0a:	69 f1       	breq	.+90     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    5c0c:	e0 e8       	ldi	r30, 0x80	; 128
    5c0e:	f6 e0       	ldi	r31, 0x06	; 6
    5c10:	29 c0       	rjmp	.+82     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    5c12:	80 91 a0 06 	lds	r24, 0x06A0
    5c16:	89 23       	and	r24, r25
    5c18:	31 f1       	breq	.+76     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    5c1a:	e0 ea       	ldi	r30, 0xA0	; 160
    5c1c:	f6 e0       	ldi	r31, 0x06	; 6
    5c1e:	22 c0       	rjmp	.+68     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    5c20:	80 91 e0 06 	lds	r24, 0x06E0
    5c24:	89 23       	and	r24, r25
    5c26:	f9 f0       	breq	.+62     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    5c28:	e0 ee       	ldi	r30, 0xE0	; 224
    5c2a:	f6 e0       	ldi	r31, 0x06	; 6
    5c2c:	1b c0       	rjmp	.+54     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    5c2e:	80 91 00 07 	lds	r24, 0x0700
    5c32:	89 23       	and	r24, r25
    5c34:	c1 f0       	breq	.+48     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    5c36:	e0 e0       	ldi	r30, 0x00	; 0
    5c38:	f7 e0       	ldi	r31, 0x07	; 7
    5c3a:	14 c0       	rjmp	.+40     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    5c3c:	80 91 20 07 	lds	r24, 0x0720
    5c40:	89 23       	and	r24, r25
    5c42:	89 f0       	breq	.+34     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    5c44:	e0 e2       	ldi	r30, 0x20	; 32
    5c46:	f7 e0       	ldi	r31, 0x07	; 7
    5c48:	0d c0       	rjmp	.+26     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    5c4a:	80 91 c0 07 	lds	r24, 0x07C0
    5c4e:	89 23       	and	r24, r25
    5c50:	51 f0       	breq	.+20     	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    5c52:	e0 ec       	ldi	r30, 0xC0	; 192
    5c54:	f7 e0       	ldi	r31, 0x07	; 7
    5c56:	06 c0       	rjmp	.+12     	; 0x5c64 <processSpiInterrupt+0x19e>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    5c58:	80 91 e0 07 	lds	r24, 0x07E0
    5c5c:	89 23       	and	r24, r25
    5c5e:	19 f0       	breq	.+6      	; 0x5c66 <processSpiInterrupt+0x1a0>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    5c60:	e0 ee       	ldi	r30, 0xE0	; 224
    5c62:	f7 e0       	ldi	r31, 0x07	; 7
    5c64:	95 83       	std	Z+5, r25	; 0x05

          /*---------------------------------------------------------------*
           * Execute the call-back function, returning the rx buffer and
           * the size of the data.
           *---------------------------------------------------------------*/
          if( pt_activeUser->pf_funPtr != NULL)
    5c66:	da 01       	movw	r26, r20
    5c68:	ed 91       	ld	r30, X+
    5c6a:	fc 91       	ld	r31, X
    5c6c:	11 97       	sbiw	r26, 0x01	; 1
    5c6e:	30 97       	sbiw	r30, 0x00	; 0
    5c70:	29 f0       	breq	.+10     	; 0x5c7c <processSpiInterrupt+0x1b6>
            pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    5c72:	14 96       	adiw	r26, 0x04	; 4
    5c74:	8d 91       	ld	r24, X+
    5c76:	9c 91       	ld	r25, X
    5c78:	15 97       	sbiw	r26, 0x05	; 5
    5c7a:	19 95       	eicall
                                           pt_activeUser->s_bufIndex);

          /*---------------------------------------------------------------*
           * Release the spi bus.
           *---------------------------------------------------------------*/
          pt_chanHndl->b_busLocked = false;
    5c7c:	f8 01       	movw	r30, r16
    5c7e:	11 86       	std	Z+9, r1	; 0x09
    5c80:	8b c0       	rjmp	.+278    	; 0x5d98 <processSpiInterrupt+0x2d2>
    {
       /*------------------------------------------------------------------*
        * Is the chip select low for this device? Fill data buffer until
        * the chip select goes high.
        *------------------------------------------------------------------*/
       if( hal_isGpioHigh( pt_activeUser->t_csPort,
    5c82:	db 01       	movw	r26, r22
    5c84:	1b 96       	adiw	r26, 0x0b	; 11
    5c86:	9c 91       	ld	r25, X
    5c88:	1b 97       	sbiw	r26, 0x0b	; 11
   }/*End hal_gpioOff*/

   static inline bool __attribute__ ( (always_inline)) hal_isGpioHigh(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      switch( t_port)
    5c8a:	1a 96       	adiw	r26, 0x0a	; 10
    5c8c:	8c 91       	ld	r24, X
    5c8e:	85 30       	cpi	r24, 0x05	; 5
    5c90:	69 f1       	breq	.+90     	; 0x5cec <processSpiInterrupt+0x226>
    5c92:	86 30       	cpi	r24, 0x06	; 6
    5c94:	70 f4       	brcc	.+28     	; 0x5cb2 <processSpiInterrupt+0x1ec>
    5c96:	82 30       	cpi	r24, 0x02	; 2
    5c98:	01 f1       	breq	.+64     	; 0x5cda <processSpiInterrupt+0x214>
    5c9a:	83 30       	cpi	r24, 0x03	; 3
    5c9c:	28 f4       	brcc	.+10     	; 0x5ca8 <processSpiInterrupt+0x1e2>
    5c9e:	88 23       	and	r24, r24
    5ca0:	b1 f0       	breq	.+44     	; 0x5cce <processSpiInterrupt+0x208>
    5ca2:	81 30       	cpi	r24, 0x01	; 1
    5ca4:	d1 f5       	brne	.+116    	; 0x5d1a <processSpiInterrupt+0x254>
    5ca6:	16 c0       	rjmp	.+44     	; 0x5cd4 <processSpiInterrupt+0x20e>
    5ca8:	83 30       	cpi	r24, 0x03	; 3
    5caa:	d1 f0       	breq	.+52     	; 0x5ce0 <processSpiInterrupt+0x21a>
    5cac:	84 30       	cpi	r24, 0x04	; 4
    5cae:	a9 f5       	brne	.+106    	; 0x5d1a <processSpiInterrupt+0x254>
    5cb0:	1a c0       	rjmp	.+52     	; 0x5ce6 <processSpiInterrupt+0x220>
    5cb2:	88 30       	cpi	r24, 0x08	; 8
    5cb4:	21 f1       	breq	.+72     	; 0x5cfe <processSpiInterrupt+0x238>
    5cb6:	89 30       	cpi	r24, 0x09	; 9
    5cb8:	28 f4       	brcc	.+10     	; 0x5cc4 <processSpiInterrupt+0x1fe>
    5cba:	86 30       	cpi	r24, 0x06	; 6
    5cbc:	d1 f0       	breq	.+52     	; 0x5cf2 <processSpiInterrupt+0x22c>
    5cbe:	87 30       	cpi	r24, 0x07	; 7
    5cc0:	61 f5       	brne	.+88     	; 0x5d1a <processSpiInterrupt+0x254>
    5cc2:	1a c0       	rjmp	.+52     	; 0x5cf8 <processSpiInterrupt+0x232>
    5cc4:	89 30       	cpi	r24, 0x09	; 9
    5cc6:	f1 f0       	breq	.+60     	; 0x5d04 <processSpiInterrupt+0x23e>
    5cc8:	8a 30       	cpi	r24, 0x0A	; 10
    5cca:	39 f5       	brne	.+78     	; 0x5d1a <processSpiInterrupt+0x254>
    5ccc:	1e c0       	rjmp	.+60     	; 0x5d0a <processSpiInterrupt+0x244>
      {
         case GPIO_PORTA:

            return (bool)(PORTA.IN & c_pin);
    5cce:	80 91 08 06 	lds	r24, 0x0608
    5cd2:	1d c0       	rjmp	.+58     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTA:*/

         case GPIO_PORTB:

            return (bool)(PORTB.IN & c_pin);
    5cd4:	80 91 28 06 	lds	r24, 0x0628
    5cd8:	1a c0       	rjmp	.+52     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTB:*/

         case GPIO_PORTC:

            return (bool)(PORTC.IN & c_pin);
    5cda:	80 91 48 06 	lds	r24, 0x0648
    5cde:	17 c0       	rjmp	.+46     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTC:*/

         case GPIO_PORTD:

            return (bool)(PORTD.IN & c_pin);
    5ce0:	80 91 68 06 	lds	r24, 0x0668
    5ce4:	14 c0       	rjmp	.+40     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTD:*/

         case GPIO_PORTE:

            return (bool)(PORTE.IN & c_pin);
    5ce6:	80 91 88 06 	lds	r24, 0x0688
    5cea:	11 c0       	rjmp	.+34     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTE:*/

         case GPIO_PORTF:

            return (bool)(PORTF.IN & c_pin);
    5cec:	80 91 a8 06 	lds	r24, 0x06A8
    5cf0:	0e c0       	rjmp	.+28     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTF:*/

         case GPIO_PORTH:

            return (bool)(PORTH.IN & c_pin);
    5cf2:	80 91 e8 06 	lds	r24, 0x06E8
    5cf6:	0b c0       	rjmp	.+22     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTH:*/

         case GPIO_PORTJ:

            return (bool)(PORTJ.IN & c_pin);
    5cf8:	80 91 08 07 	lds	r24, 0x0708
    5cfc:	08 c0       	rjmp	.+16     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTJ:*/

         case GPIO_PORTK:

            return (bool)(PORTK.IN & c_pin);
    5cfe:	80 91 28 07 	lds	r24, 0x0728
    5d02:	05 c0       	rjmp	.+10     	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTK:*/

         case GPIO_PORTQ:

            return (bool)(PORTQ.IN & c_pin);
    5d04:	80 91 c8 07 	lds	r24, 0x07C8
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <processSpiInterrupt+0x248>

         break;/*End case GPIO_PORTQ:*/

         case GPIO_PORTR:

            return (bool)(PORTR.IN & c_pin);
    5d0a:	80 91 e8 07 	lds	r24, 0x07E8
    5d0e:	89 23       	and	r24, r25
    5d10:	09 f0       	breq	.+2      	; 0x5d14 <processSpiInterrupt+0x24e>
    5d12:	42 c0       	rjmp	.+132    	; 0x5d98 <processSpiInterrupt+0x2d2>
    5d14:	88 23       	and	r24, r24
    5d16:	09 f0       	breq	.+2      	; 0x5d1a <processSpiInterrupt+0x254>
    5d18:	3f c0       	rjmp	.+126    	; 0x5d98 <processSpiInterrupt+0x2d2>

}/*End updateBuffersMast*/

static bool updateBuffersSlave( t_spiUserHndl *pt_handle)
{
    int8_t *pc_rxBuf = pt_handle->pc_rxData;
    5d1a:	fa 01       	movw	r30, r20
    5d1c:	64 81       	ldd	r22, Z+4	; 0x04
    5d1e:	75 81       	ldd	r23, Z+5	; 0x05
    int8_t *pc_txBuf = pt_handle->pc_txData;
    5d20:	c2 81       	ldd	r28, Z+2	; 0x02
    5d22:	d3 81       	ldd	r29, Z+3	; 0x03
    5d24:	04 84       	ldd	r0, Z+12	; 0x0c
    5d26:	f5 85       	ldd	r31, Z+13	; 0x0d
    5d28:	e0 2d       	mov	r30, r0
    uint16_t *ps_bufIndex = &pt_handle->s_bufIndex;

    /*------------------------------------------------------------------------*
     * Store any received bytes...
     *------------------------------------------------------------------------*/
   if( pc_rxBuf != (int8_t *)&gc_tempBuf)
    5d2a:	80 e2       	ldi	r24, 0x20	; 32
    5d2c:	67 3c       	cpi	r22, 0xC7	; 199
    5d2e:	78 07       	cpc	r23, r24
    5d30:	71 f0       	breq	.+28     	; 0x5d4e <processSpiInterrupt+0x288>
   {
      pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5d32:	07 80       	ldd	r0, Z+7	; 0x07
    5d34:	f0 85       	ldd	r31, Z+8	; 0x08
    5d36:	e0 2d       	mov	r30, r0
    5d38:	23 81       	ldd	r18, Z+3	; 0x03
    5d3a:	da 01       	movw	r26, r20
    5d3c:	18 96       	adiw	r26, 0x08	; 8
    5d3e:	8d 91       	ld	r24, X+
    5d40:	9c 91       	ld	r25, X
    5d42:	19 97       	sbiw	r26, 0x09	; 9
    5d44:	68 0f       	add	r22, r24
    5d46:	79 1f       	adc	r23, r25
    5d48:	fb 01       	movw	r30, r22
    5d4a:	20 83       	st	Z, r18
    5d4c:	06 c0       	rjmp	.+12     	; 0x5d5a <processSpiInterrupt+0x294>
   }
   else
      pc_rxBuf[0] = pt_handle->pt_spiChanHndl->pt_spi->DATA;
    5d4e:	07 80       	ldd	r0, Z+7	; 0x07
    5d50:	f0 85       	ldd	r31, Z+8	; 0x08
    5d52:	e0 2d       	mov	r30, r0
    5d54:	83 81       	ldd	r24, Z+3	; 0x03
    5d56:	80 93 c7 20 	sts	0x20C7, r24
    5d5a:	da 01       	movw	r26, r20
    5d5c:	1c 96       	adiw	r26, 0x0c	; 12
    5d5e:	ed 91       	ld	r30, X+
    5d60:	fc 91       	ld	r31, X
    5d62:	1d 97       	sbiw	r26, 0x0d	; 13

   if( pc_txBuf != (int8_t *)&gc_tempBuf)
    5d64:	b0 e2       	ldi	r27, 0x20	; 32
    5d66:	c7 3c       	cpi	r28, 0xC7	; 199
    5d68:	db 07       	cpc	r29, r27
    5d6a:	59 f0       	breq	.+22     	; 0x5d82 <processSpiInterrupt+0x2bc>
        pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[(*ps_bufIndex)];
    5d6c:	07 80       	ldd	r0, Z+7	; 0x07
    5d6e:	f0 85       	ldd	r31, Z+8	; 0x08
    5d70:	e0 2d       	mov	r30, r0
    5d72:	da 01       	movw	r26, r20
    5d74:	18 96       	adiw	r26, 0x08	; 8
    5d76:	8d 91       	ld	r24, X+
    5d78:	9c 91       	ld	r25, X
    5d7a:	19 97       	sbiw	r26, 0x09	; 9
    5d7c:	c8 0f       	add	r28, r24
    5d7e:	d9 1f       	adc	r29, r25
    5d80:	03 c0       	rjmp	.+6      	; 0x5d88 <processSpiInterrupt+0x2c2>
   else
      pt_handle->pt_spiChanHndl->pt_spi->DATA = pc_txBuf[0];
    5d82:	07 80       	ldd	r0, Z+7	; 0x07
    5d84:	f0 85       	ldd	r31, Z+8	; 0x08
    5d86:	e0 2d       	mov	r30, r0
    5d88:	88 81       	ld	r24, Y
    5d8a:	83 83       	std	Z+3, r24	; 0x03

   (*ps_bufIndex)++;
    5d8c:	fa 01       	movw	r30, r20
    5d8e:	80 85       	ldd	r24, Z+8	; 0x08
    5d90:	91 85       	ldd	r25, Z+9	; 0x09
    5d92:	01 96       	adiw	r24, 0x01	; 1
    5d94:	80 87       	std	Z+8, r24	; 0x08
    5d96:	91 87       	std	Z+9, r25	; 0x09

       }

    }

}/*End processSpiInterrupt*/
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	1f 91       	pop	r17
    5d9e:	0f 91       	pop	r16
    5da0:	08 95       	ret

00005da2 <findSpiElement>:
   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIF_INT_vect)*/

static t_spiChanHndl *findSpiElement( t_spiChanId t_id)
{
    5da2:	df 93       	push	r29
    5da4:	cf 93       	push	r28
    5da6:	0f 92       	push	r0
    5da8:	0f 92       	push	r0
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
    5dae:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the spi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_spiChanHndlList, s_count)
    5db0:	e0 91 b7 20 	lds	r30, 0x20B7
    5db4:	f0 91 b8 20 	lds	r31, 0x20B8
    5db8:	22 81       	ldd	r18, Z+2	; 0x02
    5dba:	33 81       	ldd	r19, Z+3	; 0x03
    5dbc:	e0 91 b7 20 	lds	r30, 0x20B7
    5dc0:	f0 91 b8 20 	lds	r31, 0x20B8
    5dc4:	0c c0       	rjmp	.+24     	; 0x5dde <findSpiElement+0x3c>
   {
      pt_element = (t_spiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    5dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    5dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    5dca:	01 90       	ld	r0, Z+
    5dcc:	f0 81       	ld	r31, Z
    5dce:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    5dd0:	80 81       	ld	r24, Z
    5dd2:	84 17       	cp	r24, r20
    5dd4:	69 f0       	breq	.+26     	; 0x5df0 <findSpiElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the spi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_spiChanHndlList, s_count)
    5dd6:	21 50       	subi	r18, 0x01	; 1
    5dd8:	30 40       	sbci	r19, 0x00	; 0
    5dda:	e9 81       	ldd	r30, Y+1	; 0x01
    5ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    5dde:	80 85       	ldd	r24, Z+8	; 0x08
    5de0:	91 85       	ldd	r25, Z+9	; 0x09
    5de2:	89 83       	std	Y+1, r24	; 0x01
    5de4:	9a 83       	std	Y+2, r25	; 0x02
    5de6:	12 16       	cp	r1, r18
    5de8:	13 06       	cpc	r1, r19
    5dea:	6c f3       	brlt	.-38     	; 0x5dc6 <findSpiElement+0x24>
    5dec:	e0 e0       	ldi	r30, 0x00	; 0
    5dee:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open spi module
    * list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End findSpiElement*/
    5df0:	cf 01       	movw	r24, r30
    5df2:	0f 90       	pop	r0
    5df4:	0f 90       	pop	r0
    5df6:	cf 91       	pop	r28
    5df8:	df 91       	pop	r29
    5dfa:	08 95       	ret

00005dfc <__vector_118>:
   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIE_INT_vect)*/

ISR( SPIF_INT_vect)
{
    5dfc:	1f 92       	push	r1
    5dfe:	0f 92       	push	r0
    5e00:	0f b6       	in	r0, 0x3f	; 63
    5e02:	0f 92       	push	r0
    5e04:	08 b6       	in	r0, 0x38	; 56
    5e06:	0f 92       	push	r0
    5e08:	09 b6       	in	r0, 0x39	; 57
    5e0a:	0f 92       	push	r0
    5e0c:	0b b6       	in	r0, 0x3b	; 59
    5e0e:	0f 92       	push	r0
    5e10:	11 24       	eor	r1, r1
    5e12:	18 be       	out	0x38, r1	; 56
    5e14:	19 be       	out	0x39, r1	; 57
    5e16:	1b be       	out	0x3b, r1	; 59
    5e18:	2f 93       	push	r18
    5e1a:	3f 93       	push	r19
    5e1c:	4f 93       	push	r20
    5e1e:	5f 93       	push	r21
    5e20:	6f 93       	push	r22
    5e22:	7f 93       	push	r23
    5e24:	8f 93       	push	r24
    5e26:	9f 93       	push	r25
    5e28:	af 93       	push	r26
    5e2a:	bf 93       	push	r27
    5e2c:	ef 93       	push	r30
    5e2e:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    5e30:	83 e0       	ldi	r24, 0x03	; 3
    5e32:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    5e36:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	21 f0       	breq	.+8      	; 0x5e44 <__vector_118+0x48>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    5e3c:	62 85       	ldd	r22, Z+10	; 0x0a
    5e3e:	73 85       	ldd	r23, Z+11	; 0x0b
    5e40:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIF_INT_vect)*/
    5e44:	ff 91       	pop	r31
    5e46:	ef 91       	pop	r30
    5e48:	bf 91       	pop	r27
    5e4a:	af 91       	pop	r26
    5e4c:	9f 91       	pop	r25
    5e4e:	8f 91       	pop	r24
    5e50:	7f 91       	pop	r23
    5e52:	6f 91       	pop	r22
    5e54:	5f 91       	pop	r21
    5e56:	4f 91       	pop	r20
    5e58:	3f 91       	pop	r19
    5e5a:	2f 91       	pop	r18
    5e5c:	0f 90       	pop	r0
    5e5e:	0b be       	out	0x3b, r0	; 59
    5e60:	0f 90       	pop	r0
    5e62:	09 be       	out	0x39, r0	; 57
    5e64:	0f 90       	pop	r0
    5e66:	08 be       	out	0x38, r0	; 56
    5e68:	0f 90       	pop	r0
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	0f 90       	pop	r0
    5e6e:	1f 90       	pop	r1
    5e70:	18 95       	reti

00005e72 <__vector_57>:
   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPID_INT_vect)*/

ISR( SPIE_INT_vect)
{
    5e72:	1f 92       	push	r1
    5e74:	0f 92       	push	r0
    5e76:	0f b6       	in	r0, 0x3f	; 63
    5e78:	0f 92       	push	r0
    5e7a:	08 b6       	in	r0, 0x38	; 56
    5e7c:	0f 92       	push	r0
    5e7e:	09 b6       	in	r0, 0x39	; 57
    5e80:	0f 92       	push	r0
    5e82:	0b b6       	in	r0, 0x3b	; 59
    5e84:	0f 92       	push	r0
    5e86:	11 24       	eor	r1, r1
    5e88:	18 be       	out	0x38, r1	; 56
    5e8a:	19 be       	out	0x39, r1	; 57
    5e8c:	1b be       	out	0x3b, r1	; 59
    5e8e:	2f 93       	push	r18
    5e90:	3f 93       	push	r19
    5e92:	4f 93       	push	r20
    5e94:	5f 93       	push	r21
    5e96:	6f 93       	push	r22
    5e98:	7f 93       	push	r23
    5e9a:	8f 93       	push	r24
    5e9c:	9f 93       	push	r25
    5e9e:	af 93       	push	r26
    5ea0:	bf 93       	push	r27
    5ea2:	ef 93       	push	r30
    5ea4:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    5ea6:	82 e0       	ldi	r24, 0x02	; 2
    5ea8:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    5eac:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    5eae:	00 97       	sbiw	r24, 0x00	; 0
    5eb0:	21 f0       	breq	.+8      	; 0x5eba <__vector_57+0x48>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    5eb2:	62 85       	ldd	r22, Z+10	; 0x0a
    5eb4:	73 85       	ldd	r23, Z+11	; 0x0b
    5eb6:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIE_INT_vect)*/
    5eba:	ff 91       	pop	r31
    5ebc:	ef 91       	pop	r30
    5ebe:	bf 91       	pop	r27
    5ec0:	af 91       	pop	r26
    5ec2:	9f 91       	pop	r25
    5ec4:	8f 91       	pop	r24
    5ec6:	7f 91       	pop	r23
    5ec8:	6f 91       	pop	r22
    5eca:	5f 91       	pop	r21
    5ecc:	4f 91       	pop	r20
    5ece:	3f 91       	pop	r19
    5ed0:	2f 91       	pop	r18
    5ed2:	0f 90       	pop	r0
    5ed4:	0b be       	out	0x3b, r0	; 59
    5ed6:	0f 90       	pop	r0
    5ed8:	09 be       	out	0x39, r0	; 57
    5eda:	0f 90       	pop	r0
    5edc:	08 be       	out	0x38, r0	; 56
    5ede:	0f 90       	pop	r0
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	0f 90       	pop	r0
    5ee4:	1f 90       	pop	r1
    5ee6:	18 95       	reti

00005ee8 <__vector_87>:
   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIC_INT_vect)*/

ISR( SPID_INT_vect)
{
    5ee8:	1f 92       	push	r1
    5eea:	0f 92       	push	r0
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	0f 92       	push	r0
    5ef0:	08 b6       	in	r0, 0x38	; 56
    5ef2:	0f 92       	push	r0
    5ef4:	09 b6       	in	r0, 0x39	; 57
    5ef6:	0f 92       	push	r0
    5ef8:	0b b6       	in	r0, 0x3b	; 59
    5efa:	0f 92       	push	r0
    5efc:	11 24       	eor	r1, r1
    5efe:	18 be       	out	0x38, r1	; 56
    5f00:	19 be       	out	0x39, r1	; 57
    5f02:	1b be       	out	0x3b, r1	; 59
    5f04:	2f 93       	push	r18
    5f06:	3f 93       	push	r19
    5f08:	4f 93       	push	r20
    5f0a:	5f 93       	push	r21
    5f0c:	6f 93       	push	r22
    5f0e:	7f 93       	push	r23
    5f10:	8f 93       	push	r24
    5f12:	9f 93       	push	r25
    5f14:	af 93       	push	r26
    5f16:	bf 93       	push	r27
    5f18:	ef 93       	push	r30
    5f1a:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    5f22:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    5f24:	00 97       	sbiw	r24, 0x00	; 0
    5f26:	21 f0       	breq	.+8      	; 0x5f30 <__vector_87+0x48>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    5f28:	62 85       	ldd	r22, Z+10	; 0x0a
    5f2a:	73 85       	ldd	r23, Z+11	; 0x0b
    5f2c:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPID_INT_vect)*/
    5f30:	ff 91       	pop	r31
    5f32:	ef 91       	pop	r30
    5f34:	bf 91       	pop	r27
    5f36:	af 91       	pop	r26
    5f38:	9f 91       	pop	r25
    5f3a:	8f 91       	pop	r24
    5f3c:	7f 91       	pop	r23
    5f3e:	6f 91       	pop	r22
    5f40:	5f 91       	pop	r21
    5f42:	4f 91       	pop	r20
    5f44:	3f 91       	pop	r19
    5f46:	2f 91       	pop	r18
    5f48:	0f 90       	pop	r0
    5f4a:	0b be       	out	0x3b, r0	; 59
    5f4c:	0f 90       	pop	r0
    5f4e:	09 be       	out	0x39, r0	; 57
    5f50:	0f 90       	pop	r0
    5f52:	08 be       	out	0x38, r0	; 56
    5f54:	0f 90       	pop	r0
    5f56:	0f be       	out	0x3f, r0	; 63
    5f58:	0f 90       	pop	r0
    5f5a:	1f 90       	pop	r1
    5f5c:	18 95       	reti

00005f5e <__vector_24>:
   }/*End if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))*/

}/*End slaveSpiFChipSelectInt*/

ISR( SPIC_INT_vect)
{
    5f5e:	1f 92       	push	r1
    5f60:	0f 92       	push	r0
    5f62:	0f b6       	in	r0, 0x3f	; 63
    5f64:	0f 92       	push	r0
    5f66:	08 b6       	in	r0, 0x38	; 56
    5f68:	0f 92       	push	r0
    5f6a:	09 b6       	in	r0, 0x39	; 57
    5f6c:	0f 92       	push	r0
    5f6e:	0b b6       	in	r0, 0x3b	; 59
    5f70:	0f 92       	push	r0
    5f72:	11 24       	eor	r1, r1
    5f74:	18 be       	out	0x38, r1	; 56
    5f76:	19 be       	out	0x39, r1	; 57
    5f78:	1b be       	out	0x3b, r1	; 59
    5f7a:	2f 93       	push	r18
    5f7c:	3f 93       	push	r19
    5f7e:	4f 93       	push	r20
    5f80:	5f 93       	push	r21
    5f82:	6f 93       	push	r22
    5f84:	7f 93       	push	r23
    5f86:	8f 93       	push	r24
    5f88:	9f 93       	push	r25
    5f8a:	af 93       	push	r26
    5f8c:	bf 93       	push	r27
    5f8e:	ef 93       	push	r30
    5f90:	ff 93       	push	r31
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    5f92:	80 e0       	ldi	r24, 0x00	; 0
    5f94:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    5f98:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    5f9a:	00 97       	sbiw	r24, 0x00	; 0
    5f9c:	21 f0       	breq	.+8      	; 0x5fa6 <__vector_24+0x48>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSpiInterrupt( pt_chanHndl,
    5f9e:	62 85       	ldd	r22, Z+10	; 0x0a
    5fa0:	73 85       	ldd	r23, Z+11	; 0x0b
    5fa2:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <processSpiInterrupt>
                           pt_activeUser);

   }/*End if( pt_chanHndl != NULL)*/

}/*End ISR( SPIC_INT_vect)*/
    5fa6:	ff 91       	pop	r31
    5fa8:	ef 91       	pop	r30
    5faa:	bf 91       	pop	r27
    5fac:	af 91       	pop	r26
    5fae:	9f 91       	pop	r25
    5fb0:	8f 91       	pop	r24
    5fb2:	7f 91       	pop	r23
    5fb4:	6f 91       	pop	r22
    5fb6:	5f 91       	pop	r21
    5fb8:	4f 91       	pop	r20
    5fba:	3f 91       	pop	r19
    5fbc:	2f 91       	pop	r18
    5fbe:	0f 90       	pop	r0
    5fc0:	0b be       	out	0x3b, r0	; 59
    5fc2:	0f 90       	pop	r0
    5fc4:	09 be       	out	0x39, r0	; 57
    5fc6:	0f 90       	pop	r0
    5fc8:	08 be       	out	0x38, r0	; 56
    5fca:	0f 90       	pop	r0
    5fcc:	0f be       	out	0x3f, r0	; 63
    5fce:	0f 90       	pop	r0
    5fd0:	1f 90       	pop	r1
    5fd2:	18 95       	reti

00005fd4 <hal_spiConfCallBack>:
}/*End createSpiUserHandle*/

t_spiError hal_spiConfCallBack( t_SPIHNDL t_handle,
                                  void (*pf_funPtr)( int8_t *pc_data,
                                                     uint16_t s_length))
{
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	00 d0       	rcall	.+0      	; 0x5fda <hal_spiConfCallBack+0x6>
    5fda:	cd b7       	in	r28, 0x3d	; 61
    5fdc:	de b7       	in	r29, 0x3e	; 62
    5fde:	8a 83       	std	Y+2, r24	; 0x02
    5fe0:	9b 83       	std	Y+3, r25	; 0x03
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    5fe2:	8f b7       	in	r24, 0x3f	; 63
    5fe4:	89 83       	std	Y+1, r24	; 0x01
    5fe6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    5fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    5fea:	fb 81       	ldd	r31, Y+3	; 0x03
    5fec:	20 91 c5 20 	lds	r18, 0x20C5
    5ff0:	30 91 c6 20 	lds	r19, 0x20C6
    5ff4:	84 81       	ldd	r24, Z+4	; 0x04
    5ff6:	95 81       	ldd	r25, Z+5	; 0x05
    5ff8:	82 17       	cp	r24, r18
    5ffa:	93 07       	cpc	r25, r19
    5ffc:	21 f0       	breq	.+8      	; 0x6006 <hal_spiConfCallBack+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    5ffe:	89 81       	ldd	r24, Y+1	; 0x01
    6000:	8f bf       	out	0x3f, r24	; 63
    6002:	8e ef       	ldi	r24, 0xFE	; 254
    6004:	14 c0       	rjmp	.+40     	; 0x602e <hal_spiConfCallBack+0x5a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6006:	ea 81       	ldd	r30, Y+2	; 0x02
    6008:	fb 81       	ldd	r31, Y+3	; 0x03
    600a:	a0 81       	ld	r26, Z
    600c:	b1 81       	ldd	r27, Z+1	; 0x01
   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;

   if( pt_spiChanHndl->b_busLocked == true)
    600e:	1c 96       	adiw	r26, 0x0c	; 12
    6010:	ed 91       	ld	r30, X+
    6012:	fc 91       	ld	r31, X
    6014:	1d 97       	sbiw	r26, 0x0d	; 13
    6016:	81 85       	ldd	r24, Z+9	; 0x09
    6018:	88 23       	and	r24, r24
    601a:	21 f0       	breq	.+8      	; 0x6024 <hal_spiConfCallBack+0x50>
   {
      HAL_END_CRITICAL();//Enable interrupts
    601c:	89 81       	ldd	r24, Y+1	; 0x01
    601e:	8f bf       	out	0x3f, r24	; 63
    6020:	84 ef       	ldi	r24, 0xF4	; 244
    6022:	05 c0       	rjmp	.+10     	; 0x602e <hal_spiConfCallBack+0x5a>
      return SPI_BUSY; /*Yes*/
   }

   pt_spiUserHndl->pf_funPtr = pf_funPtr;
    6024:	6d 93       	st	X+, r22
    6026:	7c 93       	st	X, r23

   HAL_END_CRITICAL();//Enable interrupts
    6028:	89 81       	ldd	r24, Y+1	; 0x01
    602a:	8f bf       	out	0x3f, r24	; 63
    602c:	80 e0       	ldi	r24, 0x00	; 0

   return SPI_PASSED;

}/*End hal_spiConfCallBack*/
    602e:	23 96       	adiw	r28, 0x03	; 3
    6030:	cd bf       	out	0x3d, r28	; 61
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	cf 91       	pop	r28
    6036:	df 91       	pop	r29
    6038:	08 95       	ret

0000603a <hal_spiSetChipSelect>:

t_spiError hal_spiSetChipSelect( t_SPIHNDL t_handle,
                                 t_spiCsCntl t_csCntl)
{
    603a:	df 93       	push	r29
    603c:	cf 93       	push	r28
    603e:	00 d0       	rcall	.+0      	; 0x6040 <hal_spiSetChipSelect+0x6>
    6040:	cd b7       	in	r28, 0x3d	; 61
    6042:	de b7       	in	r29, 0x3e	; 62
    6044:	8a 83       	std	Y+2, r24	; 0x02
    6046:	9b 83       	std	Y+3, r25	; 0x03
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6048:	8f b7       	in	r24, 0x3f	; 63
    604a:	89 83       	std	Y+1, r24	; 0x01
    604c:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    604e:	ea 81       	ldd	r30, Y+2	; 0x02
    6050:	fb 81       	ldd	r31, Y+3	; 0x03
    6052:	20 91 c5 20 	lds	r18, 0x20C5
    6056:	30 91 c6 20 	lds	r19, 0x20C6
    605a:	84 81       	ldd	r24, Z+4	; 0x04
    605c:	95 81       	ldd	r25, Z+5	; 0x05
    605e:	82 17       	cp	r24, r18
    6060:	93 07       	cpc	r25, r19
    6062:	21 f0       	breq	.+8      	; 0x606c <hal_spiSetChipSelect+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    6064:	89 81       	ldd	r24, Y+1	; 0x01
    6066:	8f bf       	out	0x3f, r24	; 63
    6068:	8e ef       	ldi	r24, 0xFE	; 254
    606a:	26 c1       	rjmp	.+588    	; 0x62b8 <hal_spiSetChipSelect+0x27e>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    606c:	ea 81       	ldd	r30, Y+2	; 0x02
    606e:	fb 81       	ldd	r31, Y+3	; 0x03
    6070:	a0 81       	ld	r26, Z
    6072:	b1 81       	ldd	r27, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6074:	1c 96       	adiw	r26, 0x0c	; 12
    6076:	4d 91       	ld	r20, X+
    6078:	5c 91       	ld	r21, X
    607a:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    607c:	fa 01       	movw	r30, r20
    607e:	81 85       	ldd	r24, Z+9	; 0x09
    6080:	88 23       	and	r24, r24
    6082:	49 f0       	breq	.+18     	; 0x6096 <hal_spiSetChipSelect+0x5c>
    6084:	82 85       	ldd	r24, Z+10	; 0x0a
    6086:	93 85       	ldd	r25, Z+11	; 0x0b
    6088:	8a 17       	cp	r24, r26
    608a:	9b 07       	cpc	r25, r27
    608c:	21 f0       	breq	.+8      	; 0x6096 <hal_spiSetChipSelect+0x5c>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    608e:	89 81       	ldd	r24, Y+1	; 0x01
    6090:	8f bf       	out	0x3f, r24	; 63
    6092:	84 ef       	ldi	r24, 0xF4	; 244
    6094:	11 c1       	rjmp	.+546    	; 0x62b8 <hal_spiSetChipSelect+0x27e>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6096:	fa 01       	movw	r30, r20
    6098:	87 81       	ldd	r24, Z+7	; 0x07
    609a:	90 85       	ldd	r25, Z+8	; 0x08
    609c:	fc 01       	movw	r30, r24
    609e:	11 82       	std	Z+1, r1	; 0x01
    60a0:	1a 96       	adiw	r26, 0x0a	; 10
    60a2:	9c 91       	ld	r25, X
    60a4:	1a 97       	sbiw	r26, 0x0a	; 10

   /*------------------------------------------------------------------------*
    * Chip select is active low.
    *------------------------------------------------------------------------*/
   if( t_csCntl == SPI_CS_EN)
    60a6:	66 23       	and	r22, r22
    60a8:	09 f0       	breq	.+2      	; 0x60ac <hal_spiSetChipSelect+0x72>
    60aa:	88 c0       	rjmp	.+272    	; 0x61bc <hal_spiSetChipSelect+0x182>
   {

      /*---------------------------------------------------------------------*
       * Lock access to the bus until the transaction is finished
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	fa 01       	movw	r30, r20
    60b0:	81 87       	std	Z+9, r24	; 0x09
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    60b2:	a2 87       	std	Z+10, r26	; 0x0a
    60b4:	b3 87       	std	Z+11, r27	; 0x0b

      hal_gpioOff( pt_spiUserHndl->t_csPort,
    60b6:	1b 96       	adiw	r26, 0x0b	; 11
    60b8:	2c 91       	ld	r18, X
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    60ba:	95 30       	cpi	r25, 0x05	; 5
    60bc:	09 f4       	brne	.+2      	; 0x60c0 <hal_spiSetChipSelect+0x86>
    60be:	4d c0       	rjmp	.+154    	; 0x615a <hal_spiSetChipSelect+0x120>
    60c0:	96 30       	cpi	r25, 0x06	; 6
    60c2:	80 f4       	brcc	.+32     	; 0x60e4 <hal_spiSetChipSelect+0xaa>
    60c4:	92 30       	cpi	r25, 0x02	; 2
    60c6:	89 f1       	breq	.+98     	; 0x612a <hal_spiSetChipSelect+0xf0>
    60c8:	93 30       	cpi	r25, 0x03	; 3
    60ca:	30 f4       	brcc	.+12     	; 0x60d8 <hal_spiSetChipSelect+0x9e>
    60cc:	99 23       	and	r25, r25
    60ce:	e9 f0       	breq	.+58     	; 0x610a <hal_spiSetChipSelect+0xd0>
    60d0:	91 30       	cpi	r25, 0x01	; 1
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <hal_spiSetChipSelect+0x9c>
    60d4:	ee c0       	rjmp	.+476    	; 0x62b2 <hal_spiSetChipSelect+0x278>
    60d6:	21 c0       	rjmp	.+66     	; 0x611a <hal_spiSetChipSelect+0xe0>
    60d8:	93 30       	cpi	r25, 0x03	; 3
    60da:	79 f1       	breq	.+94     	; 0x613a <hal_spiSetChipSelect+0x100>
    60dc:	94 30       	cpi	r25, 0x04	; 4
    60de:	09 f0       	breq	.+2      	; 0x60e2 <hal_spiSetChipSelect+0xa8>
    60e0:	e8 c0       	rjmp	.+464    	; 0x62b2 <hal_spiSetChipSelect+0x278>
    60e2:	33 c0       	rjmp	.+102    	; 0x614a <hal_spiSetChipSelect+0x110>
    60e4:	98 30       	cpi	r25, 0x08	; 8
    60e6:	09 f4       	brne	.+2      	; 0x60ea <hal_spiSetChipSelect+0xb0>
    60e8:	50 c0       	rjmp	.+160    	; 0x618a <hal_spiSetChipSelect+0x150>
    60ea:	99 30       	cpi	r25, 0x09	; 9
    60ec:	38 f4       	brcc	.+14     	; 0x60fc <hal_spiSetChipSelect+0xc2>
    60ee:	96 30       	cpi	r25, 0x06	; 6
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <hal_spiSetChipSelect+0xba>
    60f2:	3b c0       	rjmp	.+118    	; 0x616a <hal_spiSetChipSelect+0x130>
    60f4:	97 30       	cpi	r25, 0x07	; 7
    60f6:	09 f0       	breq	.+2      	; 0x60fa <hal_spiSetChipSelect+0xc0>
    60f8:	dc c0       	rjmp	.+440    	; 0x62b2 <hal_spiSetChipSelect+0x278>
    60fa:	3f c0       	rjmp	.+126    	; 0x617a <hal_spiSetChipSelect+0x140>
    60fc:	99 30       	cpi	r25, 0x09	; 9
    60fe:	09 f4       	brne	.+2      	; 0x6102 <hal_spiSetChipSelect+0xc8>
    6100:	4c c0       	rjmp	.+152    	; 0x619a <hal_spiSetChipSelect+0x160>
    6102:	9a 30       	cpi	r25, 0x0A	; 10
    6104:	09 f0       	breq	.+2      	; 0x6108 <hal_spiSetChipSelect+0xce>
    6106:	d5 c0       	rjmp	.+426    	; 0x62b2 <hal_spiSetChipSelect+0x278>
    6108:	50 c0       	rjmp	.+160    	; 0x61aa <hal_spiSetChipSelect+0x170>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    610a:	80 91 00 06 	lds	r24, 0x0600
    610e:	82 23       	and	r24, r18
    6110:	09 f4       	brne	.+2      	; 0x6114 <hal_spiSetChipSelect+0xda>
    6112:	cf c0       	rjmp	.+414    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    6114:	e0 e0       	ldi	r30, 0x00	; 0
    6116:	f6 e0       	ldi	r31, 0x06	; 6
    6118:	4f c0       	rjmp	.+158    	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    611a:	80 91 20 06 	lds	r24, 0x0620
    611e:	82 23       	and	r24, r18
    6120:	09 f4       	brne	.+2      	; 0x6124 <hal_spiSetChipSelect+0xea>
    6122:	c7 c0       	rjmp	.+398    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    6124:	e0 e2       	ldi	r30, 0x20	; 32
    6126:	f6 e0       	ldi	r31, 0x06	; 6
    6128:	47 c0       	rjmp	.+142    	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    612a:	80 91 40 06 	lds	r24, 0x0640
    612e:	82 23       	and	r24, r18
    6130:	09 f4       	brne	.+2      	; 0x6134 <hal_spiSetChipSelect+0xfa>
    6132:	bf c0       	rjmp	.+382    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    6134:	e0 e4       	ldi	r30, 0x40	; 64
    6136:	f6 e0       	ldi	r31, 0x06	; 6
    6138:	3f c0       	rjmp	.+126    	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    613a:	80 91 60 06 	lds	r24, 0x0660
    613e:	82 23       	and	r24, r18
    6140:	09 f4       	brne	.+2      	; 0x6144 <hal_spiSetChipSelect+0x10a>
    6142:	b7 c0       	rjmp	.+366    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    6144:	e0 e6       	ldi	r30, 0x60	; 96
    6146:	f6 e0       	ldi	r31, 0x06	; 6
    6148:	37 c0       	rjmp	.+110    	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    614a:	80 91 80 06 	lds	r24, 0x0680
    614e:	82 23       	and	r24, r18
    6150:	09 f4       	brne	.+2      	; 0x6154 <hal_spiSetChipSelect+0x11a>
    6152:	af c0       	rjmp	.+350    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    6154:	e0 e8       	ldi	r30, 0x80	; 128
    6156:	f6 e0       	ldi	r31, 0x06	; 6
    6158:	2f c0       	rjmp	.+94     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    615a:	80 91 a0 06 	lds	r24, 0x06A0
    615e:	82 23       	and	r24, r18
    6160:	09 f4       	brne	.+2      	; 0x6164 <hal_spiSetChipSelect+0x12a>
    6162:	a7 c0       	rjmp	.+334    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    6164:	e0 ea       	ldi	r30, 0xA0	; 160
    6166:	f6 e0       	ldi	r31, 0x06	; 6
    6168:	27 c0       	rjmp	.+78     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    616a:	80 91 e0 06 	lds	r24, 0x06E0
    616e:	82 23       	and	r24, r18
    6170:	09 f4       	brne	.+2      	; 0x6174 <hal_spiSetChipSelect+0x13a>
    6172:	9f c0       	rjmp	.+318    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    6174:	e0 ee       	ldi	r30, 0xE0	; 224
    6176:	f6 e0       	ldi	r31, 0x06	; 6
    6178:	1f c0       	rjmp	.+62     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    617a:	80 91 00 07 	lds	r24, 0x0700
    617e:	82 23       	and	r24, r18
    6180:	09 f4       	brne	.+2      	; 0x6184 <hal_spiSetChipSelect+0x14a>
    6182:	97 c0       	rjmp	.+302    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    6184:	e0 e0       	ldi	r30, 0x00	; 0
    6186:	f7 e0       	ldi	r31, 0x07	; 7
    6188:	17 c0       	rjmp	.+46     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    618a:	80 91 20 07 	lds	r24, 0x0720
    618e:	82 23       	and	r24, r18
    6190:	09 f4       	brne	.+2      	; 0x6194 <hal_spiSetChipSelect+0x15a>
    6192:	8f c0       	rjmp	.+286    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    6194:	e0 e2       	ldi	r30, 0x20	; 32
    6196:	f7 e0       	ldi	r31, 0x07	; 7
    6198:	0f c0       	rjmp	.+30     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    619a:	80 91 c0 07 	lds	r24, 0x07C0
    619e:	82 23       	and	r24, r18
    61a0:	09 f4       	brne	.+2      	; 0x61a4 <hal_spiSetChipSelect+0x16a>
    61a2:	87 c0       	rjmp	.+270    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    61a4:	e0 ec       	ldi	r30, 0xC0	; 192
    61a6:	f7 e0       	ldi	r31, 0x07	; 7
    61a8:	07 c0       	rjmp	.+14     	; 0x61b8 <hal_spiSetChipSelect+0x17e>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    61aa:	80 91 e0 07 	lds	r24, 0x07E0
    61ae:	82 23       	and	r24, r18
    61b0:	09 f4       	brne	.+2      	; 0x61b4 <hal_spiSetChipSelect+0x17a>
    61b2:	7f c0       	rjmp	.+254    	; 0x62b2 <hal_spiSetChipSelect+0x278>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    61b4:	e0 ee       	ldi	r30, 0xE0	; 224
    61b6:	f7 e0       	ldi	r31, 0x07	; 7
    61b8:	26 83       	std	Z+6, r18	; 0x06
    61ba:	7b c0       	rjmp	.+246    	; 0x62b2 <hal_spiSetChipSelect+0x278>
   else
   {
      /*---------------------------------------------------------------------*
       * Release bus lock.
       *---------------------------------------------------------------------*/
      hal_gpioOn( pt_spiUserHndl->t_csPort,
    61bc:	1b 96       	adiw	r26, 0x0b	; 11
    61be:	2c 91       	ld	r18, X
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    61c0:	95 30       	cpi	r25, 0x05	; 5
    61c2:	09 f4       	brne	.+2      	; 0x61c6 <hal_spiSetChipSelect+0x18c>
    61c4:	4a c0       	rjmp	.+148    	; 0x625a <hal_spiSetChipSelect+0x220>
    61c6:	96 30       	cpi	r25, 0x06	; 6
    61c8:	80 f4       	brcc	.+32     	; 0x61ea <hal_spiSetChipSelect+0x1b0>
    61ca:	92 30       	cpi	r25, 0x02	; 2
    61cc:	81 f1       	breq	.+96     	; 0x622e <hal_spiSetChipSelect+0x1f4>
    61ce:	93 30       	cpi	r25, 0x03	; 3
    61d0:	30 f4       	brcc	.+12     	; 0x61de <hal_spiSetChipSelect+0x1a4>
    61d2:	99 23       	and	r25, r25
    61d4:	e1 f0       	breq	.+56     	; 0x620e <hal_spiSetChipSelect+0x1d4>
    61d6:	91 30       	cpi	r25, 0x01	; 1
    61d8:	09 f0       	breq	.+2      	; 0x61dc <hal_spiSetChipSelect+0x1a2>
    61da:	69 c0       	rjmp	.+210    	; 0x62ae <hal_spiSetChipSelect+0x274>
    61dc:	20 c0       	rjmp	.+64     	; 0x621e <hal_spiSetChipSelect+0x1e4>
    61de:	93 30       	cpi	r25, 0x03	; 3
    61e0:	71 f1       	breq	.+92     	; 0x623e <hal_spiSetChipSelect+0x204>
    61e2:	94 30       	cpi	r25, 0x04	; 4
    61e4:	09 f0       	breq	.+2      	; 0x61e8 <hal_spiSetChipSelect+0x1ae>
    61e6:	63 c0       	rjmp	.+198    	; 0x62ae <hal_spiSetChipSelect+0x274>
    61e8:	31 c0       	rjmp	.+98     	; 0x624c <hal_spiSetChipSelect+0x212>
    61ea:	98 30       	cpi	r25, 0x08	; 8
    61ec:	09 f4       	brne	.+2      	; 0x61f0 <hal_spiSetChipSelect+0x1b6>
    61ee:	4a c0       	rjmp	.+148    	; 0x6284 <hal_spiSetChipSelect+0x24a>
    61f0:	99 30       	cpi	r25, 0x09	; 9
    61f2:	30 f4       	brcc	.+12     	; 0x6200 <hal_spiSetChipSelect+0x1c6>
    61f4:	96 30       	cpi	r25, 0x06	; 6
    61f6:	c1 f1       	breq	.+112    	; 0x6268 <hal_spiSetChipSelect+0x22e>
    61f8:	97 30       	cpi	r25, 0x07	; 7
    61fa:	09 f0       	breq	.+2      	; 0x61fe <hal_spiSetChipSelect+0x1c4>
    61fc:	58 c0       	rjmp	.+176    	; 0x62ae <hal_spiSetChipSelect+0x274>
    61fe:	3b c0       	rjmp	.+118    	; 0x6276 <hal_spiSetChipSelect+0x23c>
    6200:	99 30       	cpi	r25, 0x09	; 9
    6202:	09 f4       	brne	.+2      	; 0x6206 <hal_spiSetChipSelect+0x1cc>
    6204:	46 c0       	rjmp	.+140    	; 0x6292 <hal_spiSetChipSelect+0x258>
    6206:	9a 30       	cpi	r25, 0x0A	; 10
    6208:	09 f0       	breq	.+2      	; 0x620c <hal_spiSetChipSelect+0x1d2>
    620a:	51 c0       	rjmp	.+162    	; 0x62ae <hal_spiSetChipSelect+0x274>
    620c:	49 c0       	rjmp	.+146    	; 0x62a0 <hal_spiSetChipSelect+0x266>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    620e:	80 91 00 06 	lds	r24, 0x0600
    6212:	82 23       	and	r24, r18
    6214:	09 f4       	brne	.+2      	; 0x6218 <hal_spiSetChipSelect+0x1de>
    6216:	4b c0       	rjmp	.+150    	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    6218:	e0 e0       	ldi	r30, 0x00	; 0
    621a:	f6 e0       	ldi	r31, 0x06	; 6
    621c:	47 c0       	rjmp	.+142    	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    621e:	80 91 20 06 	lds	r24, 0x0620
    6222:	82 23       	and	r24, r18
    6224:	09 f4       	brne	.+2      	; 0x6228 <hal_spiSetChipSelect+0x1ee>
    6226:	43 c0       	rjmp	.+134    	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    6228:	e0 e2       	ldi	r30, 0x20	; 32
    622a:	f6 e0       	ldi	r31, 0x06	; 6
    622c:	3f c0       	rjmp	.+126    	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    622e:	80 91 40 06 	lds	r24, 0x0640
    6232:	82 23       	and	r24, r18
    6234:	09 f4       	brne	.+2      	; 0x6238 <hal_spiSetChipSelect+0x1fe>
    6236:	3b c0       	rjmp	.+118    	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    6238:	e0 e4       	ldi	r30, 0x40	; 64
    623a:	f6 e0       	ldi	r31, 0x06	; 6
    623c:	37 c0       	rjmp	.+110    	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    623e:	80 91 60 06 	lds	r24, 0x0660
    6242:	82 23       	and	r24, r18
    6244:	a1 f1       	breq	.+104    	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    6246:	e0 e6       	ldi	r30, 0x60	; 96
    6248:	f6 e0       	ldi	r31, 0x06	; 6
    624a:	30 c0       	rjmp	.+96     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    624c:	80 91 80 06 	lds	r24, 0x0680
    6250:	82 23       	and	r24, r18
    6252:	69 f1       	breq	.+90     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    6254:	e0 e8       	ldi	r30, 0x80	; 128
    6256:	f6 e0       	ldi	r31, 0x06	; 6
    6258:	29 c0       	rjmp	.+82     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    625a:	80 91 a0 06 	lds	r24, 0x06A0
    625e:	82 23       	and	r24, r18
    6260:	31 f1       	breq	.+76     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    6262:	e0 ea       	ldi	r30, 0xA0	; 160
    6264:	f6 e0       	ldi	r31, 0x06	; 6
    6266:	22 c0       	rjmp	.+68     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    6268:	80 91 e0 06 	lds	r24, 0x06E0
    626c:	82 23       	and	r24, r18
    626e:	f9 f0       	breq	.+62     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    6270:	e0 ee       	ldi	r30, 0xE0	; 224
    6272:	f6 e0       	ldi	r31, 0x06	; 6
    6274:	1b c0       	rjmp	.+54     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    6276:	80 91 00 07 	lds	r24, 0x0700
    627a:	82 23       	and	r24, r18
    627c:	c1 f0       	breq	.+48     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    627e:	e0 e0       	ldi	r30, 0x00	; 0
    6280:	f7 e0       	ldi	r31, 0x07	; 7
    6282:	14 c0       	rjmp	.+40     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    6284:	80 91 20 07 	lds	r24, 0x0720
    6288:	82 23       	and	r24, r18
    628a:	89 f0       	breq	.+34     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    628c:	e0 e2       	ldi	r30, 0x20	; 32
    628e:	f7 e0       	ldi	r31, 0x07	; 7
    6290:	0d c0       	rjmp	.+26     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    6292:	80 91 c0 07 	lds	r24, 0x07C0
    6296:	82 23       	and	r24, r18
    6298:	51 f0       	breq	.+20     	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    629a:	e0 ec       	ldi	r30, 0xC0	; 192
    629c:	f7 e0       	ldi	r31, 0x07	; 7
    629e:	06 c0       	rjmp	.+12     	; 0x62ac <hal_spiSetChipSelect+0x272>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    62a0:	80 91 e0 07 	lds	r24, 0x07E0
    62a4:	82 23       	and	r24, r18
    62a6:	19 f0       	breq	.+6      	; 0x62ae <hal_spiSetChipSelect+0x274>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    62a8:	e0 ee       	ldi	r30, 0xE0	; 224
    62aa:	f7 e0       	ldi	r31, 0x07	; 7
    62ac:	25 83       	std	Z+5, r18	; 0x05
                  pt_spiUserHndl->c_csPin);

      pt_spiChanHndl->b_busLocked = false;
    62ae:	fa 01       	movw	r30, r20
    62b0:	11 86       	std	Z+9, r1	; 0x09
   }

   HAL_END_CRITICAL();//Enable interrupts
    62b2:	89 81       	ldd	r24, Y+1	; 0x01
    62b4:	8f bf       	out	0x3f, r24	; 63
    62b6:	80 e0       	ldi	r24, 0x00	; 0

   return SPI_PASSED;

}/*End hal_spiSetChipSelect*/
    62b8:	23 96       	adiw	r28, 0x03	; 3
    62ba:	cd bf       	out	0x3d, r28	; 61
    62bc:	de bf       	out	0x3e, r29	; 62
    62be:	cf 91       	pop	r28
    62c0:	df 91       	pop	r29
    62c2:	08 95       	ret

000062c4 <hal_spiReadByte>:
 * Read a single character from a particular spi device pointed to by
 * 't_handle'
 *---------------------------------------------------------------------------*/
t_spiError hal_spiReadByte( t_SPIHNDL t_handle,
                            int8_t *pc_rxChar)
{
    62c4:	df 93       	push	r29
    62c6:	cf 93       	push	r28
    62c8:	00 d0       	rcall	.+0      	; 0x62ca <hal_spiReadByte+0x6>
    62ca:	cd b7       	in	r28, 0x3d	; 61
    62cc:	de b7       	in	r29, 0x3e	; 62
    62ce:	8a 83       	std	Y+2, r24	; 0x02
    62d0:	9b 83       	std	Y+3, r25	; 0x03
    62d2:	ab 01       	movw	r20, r22
   uint8_t c_status;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    62d4:	8f b7       	in	r24, 0x3f	; 63
    62d6:	89 83       	std	Y+1, r24	; 0x01
    62d8:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    62da:	ea 81       	ldd	r30, Y+2	; 0x02
    62dc:	fb 81       	ldd	r31, Y+3	; 0x03
    62de:	20 91 c5 20 	lds	r18, 0x20C5
    62e2:	30 91 c6 20 	lds	r19, 0x20C6
    62e6:	84 81       	ldd	r24, Z+4	; 0x04
    62e8:	95 81       	ldd	r25, Z+5	; 0x05
    62ea:	82 17       	cp	r24, r18
    62ec:	93 07       	cpc	r25, r19
    62ee:	21 f0       	breq	.+8      	; 0x62f8 <hal_spiReadByte+0x34>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    62f0:	89 81       	ldd	r24, Y+1	; 0x01
    62f2:	8f bf       	out	0x3f, r24	; 63
    62f4:	8e ef       	ldi	r24, 0xFE	; 254
    62f6:	38 c0       	rjmp	.+112    	; 0x6368 <hal_spiReadByte+0xa4>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    62f8:	ea 81       	ldd	r30, Y+2	; 0x02
    62fa:	fb 81       	ldd	r31, Y+3	; 0x03
    62fc:	20 81       	ld	r18, Z
    62fe:	31 81       	ldd	r19, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    6300:	f9 01       	movw	r30, r18
    6302:	a4 85       	ldd	r26, Z+12	; 0x0c
    6304:	b5 85       	ldd	r27, Z+13	; 0x0d

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    6306:	19 96       	adiw	r26, 0x09	; 9
    6308:	8c 91       	ld	r24, X
    630a:	19 97       	sbiw	r26, 0x09	; 9
    630c:	88 23       	and	r24, r24
    630e:	59 f0       	breq	.+22     	; 0x6326 <hal_spiReadByte+0x62>
    6310:	1a 96       	adiw	r26, 0x0a	; 10
    6312:	8d 91       	ld	r24, X+
    6314:	9c 91       	ld	r25, X
    6316:	1b 97       	sbiw	r26, 0x0b	; 11
    6318:	82 17       	cp	r24, r18
    631a:	93 07       	cpc	r25, r19
    631c:	21 f0       	breq	.+8      	; 0x6326 <hal_spiReadByte+0x62>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    631e:	89 81       	ldd	r24, Y+1	; 0x01
    6320:	8f bf       	out	0x3f, r24	; 63
    6322:	84 ef       	ldi	r24, 0xF4	; 244
    6324:	21 c0       	rjmp	.+66     	; 0x6368 <hal_spiReadByte+0xa4>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6326:	17 96       	adiw	r26, 0x07	; 7
    6328:	ed 91       	ld	r30, X+
    632a:	fc 91       	ld	r31, X
    632c:	18 97       	sbiw	r26, 0x08	; 8
    632e:	11 82       	std	Z+1, r1	; 0x01

   /*------------------------------------------------------------------------*
    * Lock bus access
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->b_busLocked = true;
    6330:	81 e0       	ldi	r24, 0x01	; 1
    6332:	19 96       	adiw	r26, 0x09	; 9
    6334:	8c 93       	st	X, r24
    6336:	19 97       	sbiw	r26, 0x09	; 9
   pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    6338:	1a 96       	adiw	r26, 0x0a	; 10
    633a:	2d 93       	st	X+, r18
    633c:	3c 93       	st	X, r19
    633e:	1b 97       	sbiw	r26, 0x0b	; 11

   HAL_END_CRITICAL();//Enable interrupts
    6340:	89 81       	ldd	r24, Y+1	; 0x01
    6342:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Read status register to clear any pending transactions
    *------------------------------------------------------------------------*/
   c_status = pt_spiChanHndl->pt_spi->STATUS;
    6344:	17 96       	adiw	r26, 0x07	; 7
    6346:	ed 91       	ld	r30, X+
    6348:	fc 91       	ld	r31, X
    634a:	18 97       	sbiw	r26, 0x08	; 8
    634c:	82 81       	ldd	r24, Z+2	; 0x02

   /*------------------------------------------------------------------------*
    * Transmit a character of dummy data so that we can grab data out of the
    * rx buffer.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->DATA = 0xFF;
    634e:	8f ef       	ldi	r24, 0xFF	; 255
    6350:	83 83       	std	Z+3, r24	; 0x03

   /*------------------------------------------------------------------------*
    * Wait for the data to clear the register
    *------------------------------------------------------------------------*/
   while( !(pt_spiChanHndl->pt_spi->STATUS & SPI_IF_bm));
    6352:	17 96       	adiw	r26, 0x07	; 7
    6354:	ed 91       	ld	r30, X+
    6356:	fc 91       	ld	r31, X
    6358:	18 97       	sbiw	r26, 0x08	; 8
    635a:	82 81       	ldd	r24, Z+2	; 0x02
    635c:	87 ff       	sbrs	r24, 7
    635e:	fd cf       	rjmp	.-6      	; 0x635a <hal_spiReadByte+0x96>

   /*------------------------------------------------------------------------*
    * Read new data
    *------------------------------------------------------------------------*/
   *pc_rxChar = pt_spiChanHndl->pt_spi->DATA;
    6360:	83 81       	ldd	r24, Z+3	; 0x03
    6362:	fa 01       	movw	r30, r20
    6364:	80 83       	st	Z, r24
    6366:	80 e0       	ldi	r24, 0x00	; 0

   return SPI_PASSED;

}/*End hal_spiReadByte*/
    6368:	23 96       	adiw	r28, 0x03	; 3
    636a:	cd bf       	out	0x3d, r28	; 61
    636c:	de bf       	out	0x3e, r29	; 62
    636e:	cf 91       	pop	r28
    6370:	df 91       	pop	r29
    6372:	08 95       	ret

00006374 <hal_spiWriteByte>:
 * Write a single character to a particular spi device pointed to by
 * 't_handle'
 *---------------------------------------------------------------------------*/
t_spiError hal_spiWriteByte( t_SPIHNDL t_handle,
                                     int8_t c_txChar)
{
    6374:	df 93       	push	r29
    6376:	cf 93       	push	r28
    6378:	00 d0       	rcall	.+0      	; 0x637a <hal_spiWriteByte+0x6>
    637a:	cd b7       	in	r28, 0x3d	; 61
    637c:	de b7       	in	r29, 0x3e	; 62
    637e:	8a 83       	std	Y+2, r24	; 0x02
    6380:	9b 83       	std	Y+3, r25	; 0x03
   uint8_t c_temp;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6382:	8f b7       	in	r24, 0x3f	; 63
    6384:	89 83       	std	Y+1, r24	; 0x01
    6386:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6388:	ea 81       	ldd	r30, Y+2	; 0x02
    638a:	fb 81       	ldd	r31, Y+3	; 0x03
    638c:	20 91 c5 20 	lds	r18, 0x20C5
    6390:	30 91 c6 20 	lds	r19, 0x20C6
    6394:	84 81       	ldd	r24, Z+4	; 0x04
    6396:	95 81       	ldd	r25, Z+5	; 0x05
    6398:	82 17       	cp	r24, r18
    639a:	93 07       	cpc	r25, r19
    639c:	21 f0       	breq	.+8      	; 0x63a6 <hal_spiWriteByte+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    639e:	89 81       	ldd	r24, Y+1	; 0x01
    63a0:	8f bf       	out	0x3f, r24	; 63
    63a2:	8e ef       	ldi	r24, 0xFE	; 254
    63a4:	35 c0       	rjmp	.+106    	; 0x6410 <hal_spiWriteByte+0x9c>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    63a6:	ea 81       	ldd	r30, Y+2	; 0x02
    63a8:	fb 81       	ldd	r31, Y+3	; 0x03
    63aa:	20 81       	ld	r18, Z
    63ac:	31 81       	ldd	r19, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    63ae:	f9 01       	movw	r30, r18
    63b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    63b2:	b5 85       	ldd	r27, Z+13	; 0x0d

   /*------------------------------------------------------------------------*
    * Is the bus locked by someone other than this user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    63b4:	19 96       	adiw	r26, 0x09	; 9
    63b6:	8c 91       	ld	r24, X
    63b8:	19 97       	sbiw	r26, 0x09	; 9
    63ba:	88 23       	and	r24, r24
    63bc:	59 f0       	breq	.+22     	; 0x63d4 <hal_spiWriteByte+0x60>
    63be:	1a 96       	adiw	r26, 0x0a	; 10
    63c0:	8d 91       	ld	r24, X+
    63c2:	9c 91       	ld	r25, X
    63c4:	1b 97       	sbiw	r26, 0x0b	; 11
    63c6:	82 17       	cp	r24, r18
    63c8:	93 07       	cpc	r25, r19
    63ca:	21 f0       	breq	.+8      	; 0x63d4 <hal_spiWriteByte+0x60>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    63cc:	89 81       	ldd	r24, Y+1	; 0x01
    63ce:	8f bf       	out	0x3f, r24	; 63
    63d0:	84 ef       	ldi	r24, 0xF4	; 244
    63d2:	1e c0       	rjmp	.+60     	; 0x6410 <hal_spiWriteByte+0x9c>
   }

   /*------------------------------------------------------------------------*
    * Interrupts not used in manual mode
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    63d4:	17 96       	adiw	r26, 0x07	; 7
    63d6:	ed 91       	ld	r30, X+
    63d8:	fc 91       	ld	r31, X
    63da:	18 97       	sbiw	r26, 0x08	; 8
    63dc:	11 82       	std	Z+1, r1	; 0x01

   /*------------------------------------------------------------------------*
    * Lock bus access
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->b_busLocked = true;
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	19 96       	adiw	r26, 0x09	; 9
    63e2:	8c 93       	st	X, r24
    63e4:	19 97       	sbiw	r26, 0x09	; 9
   pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    63e6:	1a 96       	adiw	r26, 0x0a	; 10
    63e8:	2d 93       	st	X+, r18
    63ea:	3c 93       	st	X, r19
    63ec:	1b 97       	sbiw	r26, 0x0b	; 11

   HAL_END_CRITICAL();//Enable interrupts
    63ee:	89 81       	ldd	r24, Y+1	; 0x01
    63f0:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Read status register to clear any pending transactions
    *------------------------------------------------------------------------*/
   c_temp = pt_spiChanHndl->pt_spi->STATUS;
    63f2:	17 96       	adiw	r26, 0x07	; 7
    63f4:	ed 91       	ld	r30, X+
    63f6:	fc 91       	ld	r31, X
    63f8:	18 97       	sbiw	r26, 0x08	; 8
    63fa:	82 81       	ldd	r24, Z+2	; 0x02

   /*------------------------------------------------------------------------*
    * Transmit a character of dummy data so that we can grab data out of the
    * rx buffer.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->DATA = (uint8_t)c_txChar;
    63fc:	63 83       	std	Z+3, r22	; 0x03

   /*------------------------------------------------------------------------*
    * Wait for the data to clear the register
    *------------------------------------------------------------------------*/
   while( !(pt_spiChanHndl->pt_spi->STATUS & SPI_IF_bm));
    63fe:	17 96       	adiw	r26, 0x07	; 7
    6400:	ed 91       	ld	r30, X+
    6402:	fc 91       	ld	r31, X
    6404:	18 97       	sbiw	r26, 0x08	; 8
    6406:	82 81       	ldd	r24, Z+2	; 0x02
    6408:	87 ff       	sbrs	r24, 7
    640a:	fd cf       	rjmp	.-6      	; 0x6406 <hal_spiWriteByte+0x92>

   /*------------------------------------------------------------------------*
    * Read new data
    *------------------------------------------------------------------------*/
   c_temp = pt_spiChanHndl->pt_spi->DATA;
    640c:	83 81       	ldd	r24, Z+3	; 0x03
    640e:	80 e0       	ldi	r24, 0x00	; 0

   return SPI_PASSED;

}/*End hal_spiWriteByte*/
    6410:	23 96       	adiw	r28, 0x03	; 3
    6412:	cd bf       	out	0x3d, r28	; 61
    6414:	de bf       	out	0x3e, r29	; 62
    6416:	cf 91       	pop	r28
    6418:	df 91       	pop	r29
    641a:	08 95       	ret

0000641c <hal_spiSetBaudRate>:

t_spiError hal_spiSetBaudRate( t_SPIHNDL t_handle,
                               uint32_t i_baudRate)
{
    641c:	8f 92       	push	r8
    641e:	9f 92       	push	r9
    6420:	af 92       	push	r10
    6422:	bf 92       	push	r11
    6424:	cf 92       	push	r12
    6426:	df 92       	push	r13
    6428:	ef 92       	push	r14
    642a:	ff 92       	push	r15
    642c:	0f 93       	push	r16
    642e:	1f 93       	push	r17
    6430:	df 93       	push	r29
    6432:	cf 93       	push	r28
    6434:	00 d0       	rcall	.+0      	; 0x6436 <hal_spiSetBaudRate+0x1a>
    6436:	cd b7       	in	r28, 0x3d	; 61
    6438:	de b7       	in	r29, 0x3e	; 62
    643a:	8a 83       	std	Y+2, r24	; 0x02
    643c:	9b 83       	std	Y+3, r25	; 0x03
    643e:	5a 01       	movw	r10, r20
    6440:	6b 01       	movw	r12, r22
   uint8_t c_doubleClock = 0;

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6442:	8f b7       	in	r24, 0x3f	; 63
    6444:	89 83       	std	Y+1, r24	; 0x01
    6446:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    6448:	ea 81       	ldd	r30, Y+2	; 0x02
    644a:	fb 81       	ldd	r31, Y+3	; 0x03
    644c:	20 91 c5 20 	lds	r18, 0x20C5
    6450:	30 91 c6 20 	lds	r19, 0x20C6
    6454:	84 81       	ldd	r24, Z+4	; 0x04
    6456:	95 81       	ldd	r25, Z+5	; 0x05
    6458:	82 17       	cp	r24, r18
    645a:	93 07       	cpc	r25, r19
    645c:	21 f0       	breq	.+8      	; 0x6466 <hal_spiSetBaudRate+0x4a>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    645e:	89 81       	ldd	r24, Y+1	; 0x01
    6460:	8f bf       	out	0x3f, r24	; 63
    6462:	8e ef       	ldi	r24, 0xFE	; 254
    6464:	38 c1       	rjmp	.+624    	; 0x66d6 <hal_spiSetBaudRate+0x2ba>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    6466:	ea 81       	ldd	r30, Y+2	; 0x02
    6468:	fb 81       	ldd	r31, Y+3	; 0x03
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    646a:	01 90       	ld	r0, Z+
    646c:	f0 81       	ld	r31, Z
    646e:	e0 2d       	mov	r30, r0
    6470:	84 84       	ldd	r8, Z+12	; 0x0c
    6472:	95 84       	ldd	r9, Z+13	; 0x0d

   if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6474:	d4 01       	movw	r26, r8
    6476:	16 96       	adiw	r26, 0x06	; 6
    6478:	8c 91       	ld	r24, X
    647a:	88 23       	and	r24, r24
    647c:	49 f4       	brne	.+18     	; 0x6490 <hal_spiSetBaudRate+0x74>
      i_maxSpiFreq = (hal_getCpuFreq() >> 1);
    647e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6482:	7b 01       	movw	r14, r22
    6484:	8c 01       	movw	r16, r24
    6486:	16 95       	lsr	r17
    6488:	07 95       	ror	r16
    648a:	f7 94       	ror	r15
    648c:	e7 94       	ror	r14
    648e:	0b c0       	rjmp	.+22     	; 0x64a6 <hal_spiSetBaudRate+0x8a>
   else
      i_maxSpiFreq = (hal_getCpuFreq() >> 2);
    6490:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6494:	7b 01       	movw	r14, r22
    6496:	8c 01       	movw	r16, r24
    6498:	52 e0       	ldi	r21, 0x02	; 2
    649a:	16 95       	lsr	r17
    649c:	07 95       	ror	r16
    649e:	f7 94       	ror	r15
    64a0:	e7 94       	ror	r14
    64a2:	5a 95       	dec	r21
    64a4:	d1 f7       	brne	.-12     	; 0x649a <hal_spiSetBaudRate+0x7e>

   if( (i_baudRate < (hal_getCpuFreq() >> 7)) ||
    64a6:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    64aa:	47 e0       	ldi	r20, 0x07	; 7
    64ac:	96 95       	lsr	r25
    64ae:	87 95       	ror	r24
    64b0:	77 95       	ror	r23
    64b2:	67 95       	ror	r22
    64b4:	4a 95       	dec	r20
    64b6:	d1 f7       	brne	.-12     	; 0x64ac <hal_spiSetBaudRate+0x90>
    64b8:	a6 16       	cp	r10, r22
    64ba:	b7 06       	cpc	r11, r23
    64bc:	c8 06       	cpc	r12, r24
    64be:	d9 06       	cpc	r13, r25
    64c0:	28 f0       	brcs	.+10     	; 0x64cc <hal_spiSetBaudRate+0xb0>
    64c2:	ea 14       	cp	r14, r10
    64c4:	fb 04       	cpc	r15, r11
    64c6:	0c 05       	cpc	r16, r12
    64c8:	1d 05       	cpc	r17, r13
    64ca:	20 f4       	brcc	.+8      	; 0x64d4 <hal_spiSetBaudRate+0xb8>
       (i_baudRate > i_maxSpiFreq))
   {
      HAL_END_CRITICAL();//Enable interrupts
    64cc:	89 81       	ldd	r24, Y+1	; 0x01
    64ce:	8f bf       	out	0x3f, r24	; 63
    64d0:	8c ef       	ldi	r24, 0xFC	; 252
    64d2:	01 c1       	rjmp	.+514    	; 0x66d6 <hal_spiSetBaudRate+0x2ba>
   }

   /*------------------------------------------------------------------------*
    * Find the clock divider closest to the requested baud rate.
    *------------------------------------------------------------------------*/
   if( (i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    64d4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    64d8:	37 e0       	ldi	r19, 0x07	; 7
    64da:	96 95       	lsr	r25
    64dc:	87 95       	ror	r24
    64de:	77 95       	ror	r23
    64e0:	67 95       	ror	r22
    64e2:	3a 95       	dec	r19
    64e4:	d1 f7       	brne	.-12     	; 0x64da <hal_spiSetBaudRate+0xbe>
    64e6:	a6 16       	cp	r10, r22
    64e8:	b7 06       	cpc	r11, r23
    64ea:	c8 06       	cpc	r12, r24
    64ec:	d9 06       	cpc	r13, r25
    64ee:	f0 f0       	brcs	.+60     	; 0x652c <hal_spiSetBaudRate+0x110>
    64f0:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    64f4:	26 e0       	ldi	r18, 0x06	; 6
    64f6:	96 95       	lsr	r25
    64f8:	87 95       	ror	r24
    64fa:	77 95       	ror	r23
    64fc:	67 95       	ror	r22
    64fe:	2a 95       	dec	r18
    6500:	d1 f7       	brne	.-12     	; 0x64f6 <hal_spiSetBaudRate+0xda>
    6502:	a6 16       	cp	r10, r22
    6504:	b7 06       	cpc	r11, r23
    6506:	c8 06       	cpc	r12, r24
    6508:	d9 06       	cpc	r13, r25
    650a:	80 f4       	brcc	.+32     	; 0x652c <hal_spiSetBaudRate+0x110>
       (i_baudRate < (hal_getCpuFreq() >> 6)))
   {
      t_clockDivision = SPI_PRESCALER_DIV128_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    650c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6510:	07 e0       	ldi	r16, 0x07	; 7
    6512:	96 95       	lsr	r25
    6514:	87 95       	ror	r24
    6516:	77 95       	ror	r23
    6518:	67 95       	ror	r22
    651a:	0a 95       	dec	r16
    651c:	d1 f7       	brne	.-12     	; 0x6512 <hal_spiSetBaudRate+0xf6>
    651e:	f4 01       	movw	r30, r8
    6520:	61 83       	std	Z+1, r22	; 0x01
    6522:	72 83       	std	Z+2, r23	; 0x02
    6524:	83 83       	std	Z+3, r24	; 0x03
    6526:	94 83       	std	Z+4, r25	; 0x04
    6528:	93 e0       	ldi	r25, 0x03	; 3
    652a:	2d c0       	rjmp	.+90     	; 0x6586 <hal_spiSetBaudRate+0x16a>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    652c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6530:	16 e0       	ldi	r17, 0x06	; 6
    6532:	96 95       	lsr	r25
    6534:	87 95       	ror	r24
    6536:	77 95       	ror	r23
    6538:	67 95       	ror	r22
    653a:	1a 95       	dec	r17
    653c:	d1 f7       	brne	.-12     	; 0x6532 <hal_spiSetBaudRate+0x116>
    653e:	a6 16       	cp	r10, r22
    6540:	b7 06       	cpc	r11, r23
    6542:	c8 06       	cpc	r12, r24
    6544:	d9 06       	cpc	r13, r25
    6546:	08 f1       	brcs	.+66     	; 0x658a <hal_spiSetBaudRate+0x16e>
    6548:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    654c:	b4 e0       	ldi	r27, 0x04	; 4
    654e:	96 95       	lsr	r25
    6550:	87 95       	ror	r24
    6552:	77 95       	ror	r23
    6554:	67 95       	ror	r22
    6556:	ba 95       	dec	r27
    6558:	d1 f7       	brne	.-12     	; 0x654e <hal_spiSetBaudRate+0x132>
    655a:	a6 16       	cp	r10, r22
    655c:	b7 06       	cpc	r11, r23
    655e:	c8 06       	cpc	r12, r24
    6560:	d9 06       	cpc	r13, r25
    6562:	98 f4       	brcc	.+38     	; 0x658a <hal_spiSetBaudRate+0x16e>
            (i_baudRate < (hal_getCpuFreq() >> 4)))
   {
      t_clockDivision = SPI_PRESCALER_DIV64_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    6564:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6568:	a6 e0       	ldi	r26, 0x06	; 6
    656a:	96 95       	lsr	r25
    656c:	87 95       	ror	r24
    656e:	77 95       	ror	r23
    6570:	67 95       	ror	r22
    6572:	aa 95       	dec	r26
    6574:	d1 f7       	brne	.-12     	; 0x656a <hal_spiSetBaudRate+0x14e>
    6576:	d4 01       	movw	r26, r8
    6578:	11 96       	adiw	r26, 0x01	; 1
    657a:	6d 93       	st	X+, r22
    657c:	7d 93       	st	X+, r23
    657e:	8d 93       	st	X+, r24
    6580:	9c 93       	st	X, r25
    6582:	14 97       	sbiw	r26, 0x04	; 4
    6584:	92 e0       	ldi	r25, 0x02	; 2
    6586:	20 e0       	ldi	r18, 0x00	; 0
    6588:	78 c0       	rjmp	.+240    	; 0x667a <hal_spiSetBaudRate+0x25e>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    658a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    658e:	f4 e0       	ldi	r31, 0x04	; 4
    6590:	96 95       	lsr	r25
    6592:	87 95       	ror	r24
    6594:	77 95       	ror	r23
    6596:	67 95       	ror	r22
    6598:	fa 95       	dec	r31
    659a:	d1 f7       	brne	.-12     	; 0x6590 <hal_spiSetBaudRate+0x174>
    659c:	a6 16       	cp	r10, r22
    659e:	b7 06       	cpc	r11, r23
    65a0:	c8 06       	cpc	r12, r24
    65a2:	d9 06       	cpc	r13, r25
    65a4:	f0 f0       	brcs	.+60     	; 0x65e2 <hal_spiSetBaudRate+0x1c6>
    65a6:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    65aa:	e2 e0       	ldi	r30, 0x02	; 2
    65ac:	96 95       	lsr	r25
    65ae:	87 95       	ror	r24
    65b0:	77 95       	ror	r23
    65b2:	67 95       	ror	r22
    65b4:	ea 95       	dec	r30
    65b6:	d1 f7       	brne	.-12     	; 0x65ac <hal_spiSetBaudRate+0x190>
    65b8:	a6 16       	cp	r10, r22
    65ba:	b7 06       	cpc	r11, r23
    65bc:	c8 06       	cpc	r12, r24
    65be:	d9 06       	cpc	r13, r25
    65c0:	80 f4       	brcc	.+32     	; 0x65e2 <hal_spiSetBaudRate+0x1c6>
            (i_baudRate < (hal_getCpuFreq() >> 2)))
   {
      t_clockDivision = SPI_PRESCALER_DIV16_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    65c2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    65c6:	54 e0       	ldi	r21, 0x04	; 4
    65c8:	96 95       	lsr	r25
    65ca:	87 95       	ror	r24
    65cc:	77 95       	ror	r23
    65ce:	67 95       	ror	r22
    65d0:	5a 95       	dec	r21
    65d2:	d1 f7       	brne	.-12     	; 0x65c8 <hal_spiSetBaudRate+0x1ac>
    65d4:	f4 01       	movw	r30, r8
    65d6:	61 83       	std	Z+1, r22	; 0x01
    65d8:	72 83       	std	Z+2, r23	; 0x02
    65da:	83 83       	std	Z+3, r24	; 0x03
    65dc:	94 83       	std	Z+4, r25	; 0x04
    65de:	91 e0       	ldi	r25, 0x01	; 1
    65e0:	d2 cf       	rjmp	.-92     	; 0x6586 <hal_spiSetBaudRate+0x16a>
   }
   else if( (i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    65e2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    65e6:	42 e0       	ldi	r20, 0x02	; 2
    65e8:	96 95       	lsr	r25
    65ea:	87 95       	ror	r24
    65ec:	77 95       	ror	r23
    65ee:	67 95       	ror	r22
    65f0:	4a 95       	dec	r20
    65f2:	d1 f7       	brne	.-12     	; 0x65e8 <hal_spiSetBaudRate+0x1cc>
    65f4:	a6 16       	cp	r10, r22
    65f6:	b7 06       	cpc	r11, r23
    65f8:	c8 06       	cpc	r12, r24
    65fa:	d9 06       	cpc	r13, r25
    65fc:	e0 f0       	brcs	.+56     	; 0x6636 <hal_spiSetBaudRate+0x21a>
    65fe:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6602:	96 95       	lsr	r25
    6604:	87 95       	ror	r24
    6606:	77 95       	ror	r23
    6608:	67 95       	ror	r22
    660a:	a6 16       	cp	r10, r22
    660c:	b7 06       	cpc	r11, r23
    660e:	c8 06       	cpc	r12, r24
    6610:	d9 06       	cpc	r13, r25
    6612:	88 f4       	brcc	.+34     	; 0x6636 <hal_spiSetBaudRate+0x21a>
            (i_baudRate < (hal_getCpuFreq() >> 1)))
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6614:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6618:	22 e0       	ldi	r18, 0x02	; 2
    661a:	96 95       	lsr	r25
    661c:	87 95       	ror	r24
    661e:	77 95       	ror	r23
    6620:	67 95       	ror	r22
    6622:	2a 95       	dec	r18
    6624:	d1 f7       	brne	.-12     	; 0x661a <hal_spiSetBaudRate+0x1fe>
    6626:	d4 01       	movw	r26, r8
    6628:	11 96       	adiw	r26, 0x01	; 1
    662a:	6d 93       	st	X+, r22
    662c:	7d 93       	st	X+, r23
    662e:	8d 93       	st	X+, r24
    6630:	9c 93       	st	X, r25
    6632:	14 97       	sbiw	r26, 0x04	; 4
    6634:	13 c0       	rjmp	.+38     	; 0x665c <hal_spiSetBaudRate+0x240>
   }
   else
   {
      t_clockDivision = SPI_PRESCALER_DIV4_gc;
      pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6636:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    663a:	9b 01       	movw	r18, r22
    663c:	ac 01       	movw	r20, r24
    663e:	92 e0       	ldi	r25, 0x02	; 2
    6640:	56 95       	lsr	r21
    6642:	47 95       	ror	r20
    6644:	37 95       	ror	r19
    6646:	27 95       	ror	r18
    6648:	9a 95       	dec	r25
    664a:	d1 f7       	brne	.-12     	; 0x6640 <hal_spiSetBaudRate+0x224>
    664c:	f4 01       	movw	r30, r8
    664e:	21 83       	std	Z+1, r18	; 0x01
    6650:	32 83       	std	Z+2, r19	; 0x02
    6652:	43 83       	std	Z+3, r20	; 0x03
    6654:	54 83       	std	Z+4, r21	; 0x04
      c_doubleClock = 0;
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    6656:	86 81       	ldd	r24, Z+6	; 0x06
    6658:	88 23       	and	r24, r24
    665a:	11 f0       	breq	.+4      	; 0x6660 <hal_spiSetBaudRate+0x244>
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	93 cf       	rjmp	.-218    	; 0x6586 <hal_spiSetBaudRate+0x16a>
      {
         pt_spiChanHndl->i_baudRate *=2;
    6660:	22 0f       	add	r18, r18
    6662:	33 1f       	adc	r19, r19
    6664:	44 1f       	adc	r20, r20
    6666:	55 1f       	adc	r21, r21
    6668:	d4 01       	movw	r26, r8
    666a:	11 96       	adiw	r26, 0x01	; 1
    666c:	2d 93       	st	X+, r18
    666e:	3d 93       	st	X+, r19
    6670:	4d 93       	st	X+, r20
    6672:	5c 93       	st	X, r21
    6674:	14 97       	sbiw	r26, 0x04	; 4
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	20 e8       	ldi	r18, 0x80	; 128
   }

   /*------------------------------------------------------------------------*
    * Disable the spi channel.
    *------------------------------------------------------------------------*/
    pt_spiChanHndl->pt_spi->CTRL &= ~SPI_ENABLE_bm;
    667a:	d4 01       	movw	r26, r8
    667c:	17 96       	adiw	r26, 0x07	; 7
    667e:	ed 91       	ld	r30, X+
    6680:	fc 91       	ld	r31, X
    6682:	18 97       	sbiw	r26, 0x08	; 8
    6684:	80 81       	ld	r24, Z
    6686:	8f 7b       	andi	r24, 0xBF	; 191
    6688:	80 83       	st	Z, r24

   /*------------------------------------------------------------------------*
    * Configure the spi baud rate.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->CTRL &= ~(SPI_PRESCALER_gm << SPI_PRESCALER_gp);
    668a:	17 96       	adiw	r26, 0x07	; 7
    668c:	ed 91       	ld	r30, X+
    668e:	fc 91       	ld	r31, X
    6690:	18 97       	sbiw	r26, 0x08	; 8
    6692:	80 81       	ld	r24, Z
    6694:	8c 7f       	andi	r24, 0xFC	; 252
    6696:	80 83       	st	Z, r24
   pt_spiChanHndl->pt_spi->CTRL |= t_clockDivision;
    6698:	17 96       	adiw	r26, 0x07	; 7
    669a:	ed 91       	ld	r30, X+
    669c:	fc 91       	ld	r31, X
    669e:	18 97       	sbiw	r26, 0x08	; 8
    66a0:	80 81       	ld	r24, Z
    66a2:	98 2b       	or	r25, r24
    66a4:	90 83       	st	Z, r25
   pt_spiChanHndl->pt_spi->CTRL &= ~SPI_CLK2X_bm;
    66a6:	17 96       	adiw	r26, 0x07	; 7
    66a8:	ed 91       	ld	r30, X+
    66aa:	fc 91       	ld	r31, X
    66ac:	18 97       	sbiw	r26, 0x08	; 8
    66ae:	80 81       	ld	r24, Z
    66b0:	8f 77       	andi	r24, 0x7F	; 127
    66b2:	80 83       	st	Z, r24
   pt_spiChanHndl->pt_spi->CTRL |= c_doubleClock;
    66b4:	17 96       	adiw	r26, 0x07	; 7
    66b6:	ed 91       	ld	r30, X+
    66b8:	fc 91       	ld	r31, X
    66ba:	18 97       	sbiw	r26, 0x08	; 8
    66bc:	80 81       	ld	r24, Z
    66be:	28 2b       	or	r18, r24
    66c0:	20 83       	st	Z, r18

   /*------------------------------------------------------------------------*
    * Enable the spi channel.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl->pt_spi->CTRL |= SPI_ENABLE_bm;
    66c2:	17 96       	adiw	r26, 0x07	; 7
    66c4:	ed 91       	ld	r30, X+
    66c6:	fc 91       	ld	r31, X
    66c8:	18 97       	sbiw	r26, 0x08	; 8
    66ca:	80 81       	ld	r24, Z
    66cc:	80 64       	ori	r24, 0x40	; 64
    66ce:	80 83       	st	Z, r24

   HAL_END_CRITICAL();//Enable interrupts
    66d0:	89 81       	ldd	r24, Y+1	; 0x01
    66d2:	8f bf       	out	0x3f, r24	; 63
    66d4:	80 e0       	ldi	r24, 0x00	; 0

   return SPI_PASSED;

}/*End hal_spiSetBaudRate*/
    66d6:	23 96       	adiw	r28, 0x03	; 3
    66d8:	cd bf       	out	0x3d, r28	; 61
    66da:	de bf       	out	0x3e, r29	; 62
    66dc:	cf 91       	pop	r28
    66de:	df 91       	pop	r29
    66e0:	1f 91       	pop	r17
    66e2:	0f 91       	pop	r16
    66e4:	ff 90       	pop	r15
    66e6:	ef 90       	pop	r14
    66e8:	df 90       	pop	r13
    66ea:	cf 90       	pop	r12
    66ec:	bf 90       	pop	r11
    66ee:	af 90       	pop	r10
    66f0:	9f 90       	pop	r9
    66f2:	8f 90       	pop	r8
    66f4:	08 95       	ret

000066f6 <hal_configureSpiChannel>:

}/*End hal_releaseSpiChannel*/

t_spiError hal_configureSpiChannel( t_spiChanId t_chanId,
                                    t_spiConfig t_conf)
{
    66f6:	4f 92       	push	r4
    66f8:	5f 92       	push	r5
    66fa:	6f 92       	push	r6
    66fc:	7f 92       	push	r7
    66fe:	8f 92       	push	r8
    6700:	9f 92       	push	r9
    6702:	af 92       	push	r10
    6704:	bf 92       	push	r11
    6706:	cf 92       	push	r12
    6708:	df 92       	push	r13
    670a:	ef 92       	push	r14
    670c:	ff 92       	push	r15
    670e:	0f 93       	push	r16
    6710:	1f 93       	push	r17
    6712:	df 93       	push	r29
    6714:	cf 93       	push	r28
    6716:	cd b7       	in	r28, 0x3d	; 61
    6718:	de b7       	in	r29, 0x3e	; 62
    671a:	60 97       	sbiw	r28, 0x10	; 16
    671c:	cd bf       	out	0x3d, r28	; 61
    671e:	de bf       	out	0x3e, r29	; 62
    6720:	78 2e       	mov	r7, r24
    6722:	09 87       	std	Y+9, r16	; 0x09
    6724:	1a 87       	std	Y+10, r17	; 0x0a
    6726:	2b 87       	std	Y+11, r18	; 0x0b
    6728:	3c 87       	std	Y+12, r19	; 0x0c
    672a:	4d 87       	std	Y+13, r20	; 0x0d
    672c:	5e 87       	std	Y+14, r21	; 0x0e
    672e:	6f 87       	std	Y+15, r22	; 0x0f
    6730:	78 8b       	std	Y+16, r23	; 0x10
    6732:	60 2e       	mov	r6, r16
    6734:	81 2e       	mov	r8, r17
    6736:	52 2e       	mov	r5, r18
    6738:	ac 84       	ldd	r10, Y+12	; 0x0c
    673a:	bd 84       	ldd	r11, Y+13	; 0x0d
    673c:	ce 84       	ldd	r12, Y+14	; 0x0e
    673e:	df 84       	ldd	r13, Y+15	; 0x0f
    6740:	47 2e       	mov	r4, r23

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6742:	8f b7       	in	r24, 0x3f	; 63
    6744:	89 83       	std	Y+1, r24	; 0x01
    6746:	f8 94       	cli

   pt_spiChanHndl = findSpiElement( (uint8_t)t_chanId);
    6748:	87 2d       	mov	r24, r7
    674a:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>

   /*------------------------------------------------------------------------*
    * Has this particular spi channel already been configured?
    *------------------------------------------------------------------------*/
   if( pt_spiChanHndl != NULL) /*Yes*/
    674e:	89 2b       	or	r24, r25
    6750:	21 f0       	breq	.+8      	; 0x675a <hal_configureSpiChannel+0x64>
   {
      HAL_END_CRITICAL();//Enable interrupts
    6752:	89 81       	ldd	r24, Y+1	; 0x01
    6754:	8f bf       	out	0x3f, r24	; 63
    6756:	85 ef       	ldi	r24, 0xF5	; 245
    6758:	d4 c2       	rjmp	.+1448   	; 0x6d02 <hal_configureSpiChannel+0x60c>
      return SPI_MODULE_CON;
   }
   else /*No*/
   {

      if( (t_chanId < SPI_1) ||
    675a:	23 e0       	ldi	r18, 0x03	; 3
    675c:	27 15       	cp	r18, r7
    675e:	20 f4       	brcc	.+8      	; 0x6768 <hal_configureSpiChannel+0x72>
          (t_chanId > SPI_4))
      {
         HAL_END_CRITICAL();//Enable interrupts
    6760:	89 81       	ldd	r24, Y+1	; 0x01
    6762:	8f bf       	out	0x3f, r24	; 63
    6764:	8b ef       	ldi	r24, 0xFB	; 251
    6766:	cd c2       	rjmp	.+1434   	; 0x6d02 <hal_configureSpiChannel+0x60c>
         return SPI_INVALID_MODULE;
      }

      if( (t_conf.t_spiMd < SPI_MODE_0) ||
    6768:	83 e0       	ldi	r24, 0x03	; 3
    676a:	80 17       	cp	r24, r16
    676c:	20 f4       	brcc	.+8      	; 0x6776 <hal_configureSpiChannel+0x80>
          (t_conf.t_spiMd > SPI_MODE_3))
      {
         HAL_END_CRITICAL();//Enable interrupts
    676e:	89 81       	ldd	r24, Y+1	; 0x01
    6770:	8f bf       	out	0x3f, r24	; 63
    6772:	8a ef       	ldi	r24, 0xFA	; 250
    6774:	c6 c2       	rjmp	.+1420   	; 0x6d02 <hal_configureSpiChannel+0x60c>
         return SPI_INVALID_MODE;
      }

      if( (t_conf.t_spiOp < SPI_MASTER) ||
    6776:	a1 e0       	ldi	r26, 0x01	; 1
    6778:	a1 17       	cp	r26, r17
    677a:	20 f4       	brcc	.+8      	; 0x6784 <hal_configureSpiChannel+0x8e>
          (t_conf.t_spiOp > SPI_SLAVE))
      {
         HAL_END_CRITICAL();//Enable interrupts
    677c:	89 81       	ldd	r24, Y+1	; 0x01
    677e:	8f bf       	out	0x3f, r24	; 63
    6780:	89 ef       	ldi	r24, 0xF9	; 249
    6782:	bf c2       	rjmp	.+1406   	; 0x6d02 <hal_configureSpiChannel+0x60c>
         return SPI_INVALID_OP;
      }

      if( (t_conf.t_spiOrder < SPI_LSB_FIRST) ||
    6784:	b1 e0       	ldi	r27, 0x01	; 1
    6786:	b5 15       	cp	r27, r5
    6788:	20 f4       	brcc	.+8      	; 0x6792 <hal_configureSpiChannel+0x9c>
          (t_conf.t_spiOrder > SPI_MSB_FIRST))
      {
         HAL_END_CRITICAL();//Enable interrupts
    678a:	89 81       	ldd	r24, Y+1	; 0x01
    678c:	8f bf       	out	0x3f, r24	; 63
    678e:	88 ef       	ldi	r24, 0xF8	; 248
    6790:	b8 c2       	rjmp	.+1392   	; 0x6d02 <hal_configureSpiChannel+0x60c>
         return SPI_INVALID_ORDER;
      }

      if( t_conf.t_spiOp == SPI_MASTER)
    6792:	11 23       	and	r17, r17
    6794:	49 f4       	brne	.+18     	; 0x67a8 <hal_configureSpiChannel+0xb2>
         i_maxSpiFreq = (hal_getCpuFreq() >> 1);
    6796:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    679a:	7b 01       	movw	r14, r22
    679c:	8c 01       	movw	r16, r24
    679e:	16 95       	lsr	r17
    67a0:	07 95       	ror	r16
    67a2:	f7 94       	ror	r15
    67a4:	e7 94       	ror	r14
    67a6:	0b c0       	rjmp	.+22     	; 0x67be <hal_configureSpiChannel+0xc8>
      else
         i_maxSpiFreq = (hal_getCpuFreq() >> 2);
    67a8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    67ac:	7b 01       	movw	r14, r22
    67ae:	8c 01       	movw	r16, r24
    67b0:	42 e0       	ldi	r20, 0x02	; 2
    67b2:	16 95       	lsr	r17
    67b4:	07 95       	ror	r16
    67b6:	f7 94       	ror	r15
    67b8:	e7 94       	ror	r14
    67ba:	4a 95       	dec	r20
    67bc:	d1 f7       	brne	.-12     	; 0x67b2 <hal_configureSpiChannel+0xbc>

      if( (t_conf.i_baudRate < (hal_getCpuFreq() >> 7)) ||
    67be:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    67c2:	37 e0       	ldi	r19, 0x07	; 7
    67c4:	96 95       	lsr	r25
    67c6:	87 95       	ror	r24
    67c8:	77 95       	ror	r23
    67ca:	67 95       	ror	r22
    67cc:	3a 95       	dec	r19
    67ce:	d1 f7       	brne	.-12     	; 0x67c4 <hal_configureSpiChannel+0xce>
    67d0:	a6 16       	cp	r10, r22
    67d2:	b7 06       	cpc	r11, r23
    67d4:	c8 06       	cpc	r12, r24
    67d6:	d9 06       	cpc	r13, r25
    67d8:	28 f0       	brcs	.+10     	; 0x67e4 <hal_configureSpiChannel+0xee>
    67da:	ea 14       	cp	r14, r10
    67dc:	fb 04       	cpc	r15, r11
    67de:	0c 05       	cpc	r16, r12
    67e0:	1d 05       	cpc	r17, r13
    67e2:	20 f4       	brcc	.+8      	; 0x67ec <hal_configureSpiChannel+0xf6>
          (t_conf.i_baudRate > i_maxSpiFreq))
      {
         HAL_END_CRITICAL();//Enable interrupts
    67e4:	89 81       	ldd	r24, Y+1	; 0x01
    67e6:	8f bf       	out	0x3f, r24	; 63
    67e8:	8c ef       	ldi	r24, 0xFC	; 252
    67ea:	8b c2       	rjmp	.+1302   	; 0x6d02 <hal_configureSpiChannel+0x60c>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular spi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiChanHndl));
    67ec:	82 e1       	ldi	r24, 0x12	; 18
    67ee:	90 e0       	ldi	r25, 0x00	; 0
    67f0:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    67f4:	8a 83       	std	Y+2, r24	; 0x02
    67f6:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    67f8:	8a 81       	ldd	r24, Y+2	; 0x02
    67fa:	9b 81       	ldd	r25, Y+3	; 0x03
    67fc:	97 ff       	sbrs	r25, 7
    67fe:	03 c0       	rjmp	.+6      	; 0x6806 <hal_configureSpiChannel+0x110>
    6800:	8f ef       	ldi	r24, 0xFF	; 255
    6802:	9f ef       	ldi	r25, 0xFF	; 255
    6804:	0b c0       	rjmp	.+22     	; 0x681c <hal_configureSpiChannel+0x126>
   }

   /*------------------------------------------------------------------------*
    * Add the spi module link onto the list open spi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_spiChanHndlList,
    6806:	80 91 b7 20 	lds	r24, 0x20B7
    680a:	90 91 b8 20 	lds	r25, 0x20B8
    680e:	6a 81       	ldd	r22, Y+2	; 0x02
    6810:	7b 81       	ldd	r23, Y+3	; 0x03
    6812:	41 e0       	ldi	r20, 0x01	; 1
    6814:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    6818:	8a 81       	ldd	r24, Y+2	; 0x02
    681a:	9b 81       	ldd	r25, Y+3	; 0x03
      {
         HAL_END_CRITICAL();//Enable interrupts
         return SPI_INVALID_BAUD_RATE;
      }

      t_linkHndl = createSpiHandle();
    681c:	80 93 bc 22 	sts	0x22BC, r24
    6820:	90 93 bd 22 	sts	0x22BD, r25

      if( t_linkHndl < 0)
    6824:	80 91 bc 22 	lds	r24, 0x22BC
    6828:	90 91 bd 22 	lds	r25, 0x22BD
    682c:	97 ff       	sbrs	r25, 7
    682e:	03 c0       	rjmp	.+6      	; 0x6836 <hal_configureSpiChannel+0x140>
      {
         HAL_END_CRITICAL();//Enable interrupts
    6830:	89 81       	ldd	r24, Y+1	; 0x01
    6832:	8f bf       	out	0x3f, r24	; 63
    6834:	65 c2       	rjmp	.+1226   	; 0x6d00 <hal_configureSpiChannel+0x60a>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the spi
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl = (t_spiChanHndl *)
    6836:	e0 91 bc 22 	lds	r30, 0x22BC
    683a:	f0 91 bd 22 	lds	r31, 0x22BD
    683e:	e0 80       	ld	r14, Z
    6840:	f1 80       	ldd	r15, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

      /*---------------------------------------------------------------------*
       * Make sure all the elements of the spi channel handle are reset.
       *---------------------------------------------------------------------*/
      memset( (void *)pt_spiChanHndl, 0, sizeof( t_spiChanHndl));
    6842:	82 e1       	ldi	r24, 0x12	; 18
    6844:	f7 01       	movw	r30, r14
    6846:	11 92       	st	Z+, r1
    6848:	8a 95       	dec	r24
    684a:	e9 f7       	brne	.-6      	; 0x6846 <hal_configureSpiChannel+0x150>

      /*---------------------------------------------------------------------*
       * Keep track of the link address so that it can be 'destroyed' at a
       * later time.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->t_linkHndl = t_linkHndl;
    684c:	80 91 bc 22 	lds	r24, 0x22BC
    6850:	90 91 bd 22 	lds	r25, 0x22BD
    6854:	d7 01       	movw	r26, r14
    6856:	1c 96       	adiw	r26, 0x0c	; 12
    6858:	8d 93       	st	X+, r24
    685a:	9c 93       	st	X, r25
    685c:	1d 97       	sbiw	r26, 0x0d	; 13

      switch( t_chanId)
    685e:	b1 e0       	ldi	r27, 0x01	; 1
    6860:	7b 16       	cp	r7, r27
    6862:	c9 f0       	breq	.+50     	; 0x6896 <hal_configureSpiChannel+0x1a0>
    6864:	7b 16       	cp	r7, r27
    6866:	58 f0       	brcs	.+22     	; 0x687e <hal_configureSpiChannel+0x188>
    6868:	e2 e0       	ldi	r30, 0x02	; 2
    686a:	7e 16       	cp	r7, r30
    686c:	f1 f0       	breq	.+60     	; 0x68aa <hal_configureSpiChannel+0x1b4>
    686e:	f3 e0       	ldi	r31, 0x03	; 3
    6870:	7f 16       	cp	r7, r31
    6872:	39 f1       	breq	.+78     	; 0x68c2 <hal_configureSpiChannel+0x1cc>
    6874:	22 e0       	ldi	r18, 0x02	; 2
    6876:	92 2e       	mov	r9, r18
    6878:	00 e0       	ldi	r16, 0x00	; 0
    687a:	10 e0       	ldi	r17, 0x00	; 0
    687c:	2b c0       	rjmp	.+86     	; 0x68d4 <hal_configureSpiChannel+0x1de>
      {
         case SPI_1:

            pt_spiChanHndl->pt_spi = &SPIC;
    687e:	80 ec       	ldi	r24, 0xC0	; 192
    6880:	98 e0       	ldi	r25, 0x08	; 8
    6882:	d7 01       	movw	r26, r14
    6884:	17 96       	adiw	r26, 0x07	; 7
    6886:	8d 93       	st	X+, r24
    6888:	9c 93       	st	X, r25
    688a:	18 97       	sbiw	r26, 0x08	; 8
    688c:	92 e0       	ldi	r25, 0x02	; 2
    688e:	99 2e       	mov	r9, r25
    6890:	0f e5       	ldi	r16, 0x5F	; 95
    6892:	17 e3       	ldi	r17, 0x37	; 55
    6894:	1f c0       	rjmp	.+62     	; 0x68d4 <hal_configureSpiChannel+0x1de>

         break;

         case SPI_2:

            pt_spiChanHndl->pt_spi = &SPID;
    6896:	80 ec       	ldi	r24, 0xC0	; 192
    6898:	99 e0       	ldi	r25, 0x09	; 9
    689a:	f7 01       	movw	r30, r14
    689c:	87 83       	std	Z+7, r24	; 0x07
    689e:	90 87       	std	Z+8, r25	; 0x08
    68a0:	83 e0       	ldi	r24, 0x03	; 3
    68a2:	98 2e       	mov	r9, r24
    68a4:	04 e5       	ldi	r16, 0x54	; 84
    68a6:	17 e3       	ldi	r17, 0x37	; 55
    68a8:	15 c0       	rjmp	.+42     	; 0x68d4 <hal_configureSpiChannel+0x1de>

         break;

         case SPI_3:

            pt_spiChanHndl->pt_spi = &SPIE;
    68aa:	80 ec       	ldi	r24, 0xC0	; 192
    68ac:	9a e0       	ldi	r25, 0x0A	; 10
    68ae:	d7 01       	movw	r26, r14
    68b0:	17 96       	adiw	r26, 0x07	; 7
    68b2:	8d 93       	st	X+, r24
    68b4:	9c 93       	st	X, r25
    68b6:	18 97       	sbiw	r26, 0x08	; 8
    68b8:	04 e0       	ldi	r16, 0x04	; 4
    68ba:	90 2e       	mov	r9, r16
    68bc:	09 e4       	ldi	r16, 0x49	; 73
    68be:	17 e3       	ldi	r17, 0x37	; 55
    68c0:	09 c0       	rjmp	.+18     	; 0x68d4 <hal_configureSpiChannel+0x1de>

         break;

         case SPI_4:

            pt_spiChanHndl->pt_spi = &SPIF;
    68c2:	80 ec       	ldi	r24, 0xC0	; 192
    68c4:	9b e0       	ldi	r25, 0x0B	; 11
    68c6:	f7 01       	movw	r30, r14
    68c8:	87 83       	std	Z+7, r24	; 0x07
    68ca:	90 87       	std	Z+8, r25	; 0x08
    68cc:	15 e0       	ldi	r17, 0x05	; 5
    68ce:	91 2e       	mov	r9, r17
    68d0:	0e e3       	ldi	r16, 0x3E	; 62
    68d2:	17 e3       	ldi	r17, 0x37	; 55
      }/*End switch( t_chanId)*/

      /*---------------------------------------------------------------------*
       * Is DMA being used for tx and rx transactions?
       *---------------------------------------------------------------------*/
      if( t_conf.b_enDma == true)
    68d4:	44 20       	and	r4, r4
    68d6:	09 f4       	brne	.+2      	; 0x68da <hal_configureSpiChannel+0x1e4>
    68d8:	76 c0       	rjmp	.+236    	; 0x69c6 <hal_configureSpiChannel+0x2d0>
      {

         pt_spiChanHndl->t_rxDmaHndl = hal_requestDmaChannel();
    68da:	0e 94 8f 23 	call	0x471e	; 0x471e <hal_requestDmaChannel>
    68de:	d7 01       	movw	r26, r14
    68e0:	50 96       	adiw	r26, 0x10	; 16
    68e2:	8d 93       	st	X+, r24
    68e4:	9c 93       	st	X, r25
    68e6:	51 97       	sbiw	r26, 0x11	; 17
         if( pt_spiChanHndl->t_rxDmaHndl  < 0)
    68e8:	50 96       	adiw	r26, 0x10	; 16
    68ea:	8d 91       	ld	r24, X+
    68ec:	9c 91       	ld	r25, X
    68ee:	51 97       	sbiw	r26, 0x11	; 17
    68f0:	97 ff       	sbrs	r25, 7
    68f2:	14 c0       	rjmp	.+40     	; 0x691c <hal_configureSpiChannel+0x226>
         {
            utl_destroyLink( gt_spiChanHndlList,
    68f4:	80 91 b7 20 	lds	r24, 0x20B7
    68f8:	90 91 b8 20 	lds	r25, 0x20B8
    68fc:	60 91 bc 22 	lds	r22, 0x22BC
    6900:	70 91 bd 22 	lds	r23, 0x22BD
    6904:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                             t_linkHndl);

            HAL_END_CRITICAL();//Enable interrupts
    6908:	89 81       	ldd	r24, Y+1	; 0x01
    690a:	8f bf       	out	0x3f, r24	; 63
            if( pt_spiChanHndl->t_rxDmaHndl == DMA_NO_CHANNELS_OPEN)
    690c:	f7 01       	movw	r30, r14
    690e:	80 89       	ldd	r24, Z+16	; 0x10
    6910:	91 89       	ldd	r25, Z+17	; 0x11
    6912:	89 5f       	subi	r24, 0xF9	; 249
    6914:	9f 4f       	sbci	r25, 0xFF	; 255
    6916:	09 f4       	brne	.+2      	; 0x691a <hal_configureSpiChannel+0x224>
    6918:	f1 c1       	rjmp	.+994    	; 0x6cfc <hal_configureSpiChannel+0x606>
    691a:	f2 c1       	rjmp	.+996    	; 0x6d00 <hal_configureSpiChannel+0x60a>
            else
               return (t_SPIHNDL)SPI_OUT_OF_HEAP;

         }/*End if( pt_spiChanHndl->t_rxDmaHndl  < 0)*/

         pt_spiChanHndl->t_txDmaHndl = hal_requestDmaChannel();
    691c:	0e 94 8f 23 	call	0x471e	; 0x471e <hal_requestDmaChannel>
    6920:	d7 01       	movw	r26, r14
    6922:	1e 96       	adiw	r26, 0x0e	; 14
    6924:	8d 93       	st	X+, r24
    6926:	9c 93       	st	X, r25
    6928:	1f 97       	sbiw	r26, 0x0f	; 15
         if( pt_spiChanHndl->t_txDmaHndl  < 0)
    692a:	1e 96       	adiw	r26, 0x0e	; 14
    692c:	8d 91       	ld	r24, X+
    692e:	9c 91       	ld	r25, X
    6930:	1f 97       	sbiw	r26, 0x0f	; 15
    6932:	97 ff       	sbrs	r25, 7
    6934:	1b c0       	rjmp	.+54     	; 0x696c <hal_configureSpiChannel+0x276>
         {
            utl_destroyLink( gt_spiChanHndlList,
    6936:	80 91 b7 20 	lds	r24, 0x20B7
    693a:	90 91 b8 20 	lds	r25, 0x20B8
    693e:	60 91 bc 22 	lds	r22, 0x22BC
    6942:	70 91 bd 22 	lds	r23, 0x22BD
    6946:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                             t_linkHndl);
            hal_releaseDmaChannel( pt_spiChanHndl->t_rxDmaHndl);
    694a:	f7 01       	movw	r30, r14
    694c:	80 89       	ldd	r24, Z+16	; 0x10
    694e:	91 89       	ldd	r25, Z+17	; 0x11
    6950:	0e 94 d5 22 	call	0x45aa	; 0x45aa <hal_releaseDmaChannel>

            HAL_END_CRITICAL();//Enable interrupts
    6954:	89 81       	ldd	r24, Y+1	; 0x01
    6956:	8f bf       	out	0x3f, r24	; 63
            if( pt_spiChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
    6958:	d7 01       	movw	r26, r14
    695a:	1e 96       	adiw	r26, 0x0e	; 14
    695c:	8d 91       	ld	r24, X+
    695e:	9c 91       	ld	r25, X
    6960:	1f 97       	sbiw	r26, 0x0f	; 15
    6962:	89 5f       	subi	r24, 0xF9	; 249
    6964:	9f 4f       	sbci	r25, 0xFF	; 255
    6966:	09 f4       	brne	.+2      	; 0x696a <hal_configureSpiChannel+0x274>
    6968:	c9 c1       	rjmp	.+914    	; 0x6cfc <hal_configureSpiChannel+0x606>
    696a:	ca c1       	rjmp	.+916    	; 0x6d00 <hal_configureSpiChannel+0x60a>
          * For master operation with DMA use a transaction complete signal
          * for knowing when the burst has finished. For slave operations,
          * burst complete is signaled via the chip select pin transitioning
          * from low to high.
          *------------------------------------------------------------------*/
         if( t_conf.t_spiOp == SPI_MASTER)
    696c:	88 20       	and	r8, r8
    696e:	39 f4       	brne	.+14     	; 0x697e <hal_configureSpiChannel+0x288>
         {
            hal_requestDmaInterrupt( pt_spiChanHndl->t_rxDmaHndl,
    6970:	f7 01       	movw	r30, r14
    6972:	80 89       	ldd	r24, Z+16	; 0x10
    6974:	91 89       	ldd	r25, Z+17	; 0x11
    6976:	60 e0       	ldi	r22, 0x00	; 0
    6978:	a8 01       	movw	r20, r16
    697a:	0e 94 39 24 	call	0x4872	; 0x4872 <hal_requestDmaInterrupt>
         }/*End if( t_conf.t_spiOp == SPI_MASTER)*/

         /*------------------------------------------------------------------*
          * Make sure the read DMA channel has higher priority than the write.
          *------------------------------------------------------------------*/
         if( hal_getDmaChannelId( pt_spiChanHndl->t_rxDmaHndl) >
    697e:	d7 01       	movw	r26, r14
    6980:	50 96       	adiw	r26, 0x10	; 16
    6982:	8d 91       	ld	r24, X+
    6984:	9c 91       	ld	r25, X
    6986:	51 97       	sbiw	r26, 0x11	; 17
    6988:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <hal_getDmaChannelId>
    698c:	18 2f       	mov	r17, r24
    698e:	f7 01       	movw	r30, r14
    6990:	86 85       	ldd	r24, Z+14	; 0x0e
    6992:	97 85       	ldd	r25, Z+15	; 0x0f
    6994:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <hal_getDmaChannelId>
    6998:	81 17       	cp	r24, r17
    699a:	a8 f4       	brcc	.+42     	; 0x69c6 <hal_configureSpiChannel+0x2d0>
            t_DMAHNDL t_temp;

            /*---------------------------------------------------------------*
             * Swap handles...
             *---------------------------------------------------------------*/
            t_temp = pt_spiChanHndl->t_rxDmaHndl;
    699c:	d7 01       	movw	r26, r14
    699e:	50 96       	adiw	r26, 0x10	; 16
    69a0:	8d 91       	ld	r24, X+
    69a2:	9c 91       	ld	r25, X
    69a4:	51 97       	sbiw	r26, 0x11	; 17
    69a6:	8a 83       	std	Y+2, r24	; 0x02
    69a8:	9b 83       	std	Y+3, r25	; 0x03
            pt_spiChanHndl->t_rxDmaHndl = pt_spiChanHndl->t_txDmaHndl;
    69aa:	1e 96       	adiw	r26, 0x0e	; 14
    69ac:	8d 91       	ld	r24, X+
    69ae:	9c 91       	ld	r25, X
    69b0:	1f 97       	sbiw	r26, 0x0f	; 15
    69b2:	50 96       	adiw	r26, 0x10	; 16
    69b4:	8d 93       	st	X+, r24
    69b6:	9c 93       	st	X, r25
    69b8:	51 97       	sbiw	r26, 0x11	; 17
            pt_spiChanHndl->t_txDmaHndl = t_temp;
    69ba:	8a 81       	ldd	r24, Y+2	; 0x02
    69bc:	9b 81       	ldd	r25, Y+3	; 0x03
    69be:	1e 96       	adiw	r26, 0x0e	; 14
    69c0:	8d 93       	st	X+, r24
    69c2:	9c 93       	st	X, r25
    69c4:	1f 97       	sbiw	r26, 0x0f	; 15
      }/*End if( t_conf.b_enDma == true)*/

      /*---------------------------------------------------------------------*
       * Find the clock divider closest to the requested baud rate.
       *---------------------------------------------------------------------*/
      if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 7)) &&
    69c6:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    69ca:	b7 e0       	ldi	r27, 0x07	; 7
    69cc:	96 95       	lsr	r25
    69ce:	87 95       	ror	r24
    69d0:	77 95       	ror	r23
    69d2:	67 95       	ror	r22
    69d4:	ba 95       	dec	r27
    69d6:	d1 f7       	brne	.-12     	; 0x69cc <hal_configureSpiChannel+0x2d6>
    69d8:	a6 16       	cp	r10, r22
    69da:	b7 06       	cpc	r11, r23
    69dc:	c8 06       	cpc	r12, r24
    69de:	d9 06       	cpc	r13, r25
    69e0:	f0 f0       	brcs	.+60     	; 0x6a1e <hal_configureSpiChannel+0x328>
    69e2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    69e6:	a6 e0       	ldi	r26, 0x06	; 6
    69e8:	96 95       	lsr	r25
    69ea:	87 95       	ror	r24
    69ec:	77 95       	ror	r23
    69ee:	67 95       	ror	r22
    69f0:	aa 95       	dec	r26
    69f2:	d1 f7       	brne	.-12     	; 0x69e8 <hal_configureSpiChannel+0x2f2>
    69f4:	a6 16       	cp	r10, r22
    69f6:	b7 06       	cpc	r11, r23
    69f8:	c8 06       	cpc	r12, r24
    69fa:	d9 06       	cpc	r13, r25
    69fc:	80 f4       	brcc	.+32     	; 0x6a1e <hal_configureSpiChannel+0x328>
          (t_conf.i_baudRate < (hal_getCpuFreq() >> 6)))
      {
         t_clockDivision = SPI_PRESCALER_DIV128_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 7);
    69fe:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a02:	f7 e0       	ldi	r31, 0x07	; 7
    6a04:	96 95       	lsr	r25
    6a06:	87 95       	ror	r24
    6a08:	77 95       	ror	r23
    6a0a:	67 95       	ror	r22
    6a0c:	fa 95       	dec	r31
    6a0e:	d1 f7       	brne	.-12     	; 0x6a04 <hal_configureSpiChannel+0x30e>
    6a10:	f7 01       	movw	r30, r14
    6a12:	61 83       	std	Z+1, r22	; 0x01
    6a14:	72 83       	std	Z+2, r23	; 0x02
    6a16:	83 83       	std	Z+3, r24	; 0x03
    6a18:	94 83       	std	Z+4, r25	; 0x04
    6a1a:	13 e0       	ldi	r17, 0x03	; 3
    6a1c:	a7 c0       	rjmp	.+334    	; 0x6b6c <hal_configureSpiChannel+0x476>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 6)) &&
    6a1e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a22:	e6 e0       	ldi	r30, 0x06	; 6
    6a24:	96 95       	lsr	r25
    6a26:	87 95       	ror	r24
    6a28:	77 95       	ror	r23
    6a2a:	67 95       	ror	r22
    6a2c:	ea 95       	dec	r30
    6a2e:	d1 f7       	brne	.-12     	; 0x6a24 <hal_configureSpiChannel+0x32e>
    6a30:	a6 16       	cp	r10, r22
    6a32:	b7 06       	cpc	r11, r23
    6a34:	c8 06       	cpc	r12, r24
    6a36:	d9 06       	cpc	r13, r25
    6a38:	00 f1       	brcs	.+64     	; 0x6a7a <hal_configureSpiChannel+0x384>
    6a3a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a3e:	54 e0       	ldi	r21, 0x04	; 4
    6a40:	96 95       	lsr	r25
    6a42:	87 95       	ror	r24
    6a44:	77 95       	ror	r23
    6a46:	67 95       	ror	r22
    6a48:	5a 95       	dec	r21
    6a4a:	d1 f7       	brne	.-12     	; 0x6a40 <hal_configureSpiChannel+0x34a>
    6a4c:	a6 16       	cp	r10, r22
    6a4e:	b7 06       	cpc	r11, r23
    6a50:	c8 06       	cpc	r12, r24
    6a52:	d9 06       	cpc	r13, r25
    6a54:	90 f4       	brcc	.+36     	; 0x6a7a <hal_configureSpiChannel+0x384>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 4)))
      {
         t_clockDivision = SPI_PRESCALER_DIV64_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 6);
    6a56:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a5a:	46 e0       	ldi	r20, 0x06	; 6
    6a5c:	96 95       	lsr	r25
    6a5e:	87 95       	ror	r24
    6a60:	77 95       	ror	r23
    6a62:	67 95       	ror	r22
    6a64:	4a 95       	dec	r20
    6a66:	d1 f7       	brne	.-12     	; 0x6a5c <hal_configureSpiChannel+0x366>
    6a68:	d7 01       	movw	r26, r14
    6a6a:	11 96       	adiw	r26, 0x01	; 1
    6a6c:	6d 93       	st	X+, r22
    6a6e:	7d 93       	st	X+, r23
    6a70:	8d 93       	st	X+, r24
    6a72:	9c 93       	st	X, r25
    6a74:	14 97       	sbiw	r26, 0x04	; 4
    6a76:	12 e0       	ldi	r17, 0x02	; 2
    6a78:	79 c0       	rjmp	.+242    	; 0x6b6c <hal_configureSpiChannel+0x476>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 4)) &&
    6a7a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a7e:	34 e0       	ldi	r19, 0x04	; 4
    6a80:	96 95       	lsr	r25
    6a82:	87 95       	ror	r24
    6a84:	77 95       	ror	r23
    6a86:	67 95       	ror	r22
    6a88:	3a 95       	dec	r19
    6a8a:	d1 f7       	brne	.-12     	; 0x6a80 <hal_configureSpiChannel+0x38a>
    6a8c:	a6 16       	cp	r10, r22
    6a8e:	b7 06       	cpc	r11, r23
    6a90:	c8 06       	cpc	r12, r24
    6a92:	d9 06       	cpc	r13, r25
    6a94:	f0 f0       	brcs	.+60     	; 0x6ad2 <hal_configureSpiChannel+0x3dc>
    6a96:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6a9a:	22 e0       	ldi	r18, 0x02	; 2
    6a9c:	96 95       	lsr	r25
    6a9e:	87 95       	ror	r24
    6aa0:	77 95       	ror	r23
    6aa2:	67 95       	ror	r22
    6aa4:	2a 95       	dec	r18
    6aa6:	d1 f7       	brne	.-12     	; 0x6a9c <hal_configureSpiChannel+0x3a6>
    6aa8:	a6 16       	cp	r10, r22
    6aaa:	b7 06       	cpc	r11, r23
    6aac:	c8 06       	cpc	r12, r24
    6aae:	d9 06       	cpc	r13, r25
    6ab0:	80 f4       	brcc	.+32     	; 0x6ad2 <hal_configureSpiChannel+0x3dc>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 2)))
      {
         t_clockDivision = SPI_PRESCALER_DIV16_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 4);
    6ab2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6ab6:	04 e0       	ldi	r16, 0x04	; 4
    6ab8:	96 95       	lsr	r25
    6aba:	87 95       	ror	r24
    6abc:	77 95       	ror	r23
    6abe:	67 95       	ror	r22
    6ac0:	0a 95       	dec	r16
    6ac2:	d1 f7       	brne	.-12     	; 0x6ab8 <hal_configureSpiChannel+0x3c2>
    6ac4:	f7 01       	movw	r30, r14
    6ac6:	61 83       	std	Z+1, r22	; 0x01
    6ac8:	72 83       	std	Z+2, r23	; 0x02
    6aca:	83 83       	std	Z+3, r24	; 0x03
    6acc:	94 83       	std	Z+4, r25	; 0x04
    6ace:	11 e0       	ldi	r17, 0x01	; 1
    6ad0:	4d c0       	rjmp	.+154    	; 0x6b6c <hal_configureSpiChannel+0x476>
      }
      else if( (t_conf.i_baudRate >= (hal_getCpuFreq() >> 2)) &&
    6ad2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6ad6:	12 e0       	ldi	r17, 0x02	; 2
    6ad8:	96 95       	lsr	r25
    6ada:	87 95       	ror	r24
    6adc:	77 95       	ror	r23
    6ade:	67 95       	ror	r22
    6ae0:	1a 95       	dec	r17
    6ae2:	d1 f7       	brne	.-12     	; 0x6ad8 <hal_configureSpiChannel+0x3e2>
    6ae4:	a6 16       	cp	r10, r22
    6ae6:	b7 06       	cpc	r11, r23
    6ae8:	c8 06       	cpc	r12, r24
    6aea:	d9 06       	cpc	r13, r25
    6aec:	e8 f0       	brcs	.+58     	; 0x6b28 <hal_configureSpiChannel+0x432>
    6aee:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6af2:	96 95       	lsr	r25
    6af4:	87 95       	ror	r24
    6af6:	77 95       	ror	r23
    6af8:	67 95       	ror	r22
    6afa:	a6 16       	cp	r10, r22
    6afc:	b7 06       	cpc	r11, r23
    6afe:	c8 06       	cpc	r12, r24
    6b00:	d9 06       	cpc	r13, r25
    6b02:	90 f4       	brcc	.+36     	; 0x6b28 <hal_configureSpiChannel+0x432>
               (t_conf.i_baudRate < (hal_getCpuFreq() >> 1)))
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6b04:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6b08:	a2 e0       	ldi	r26, 0x02	; 2
    6b0a:	96 95       	lsr	r25
    6b0c:	87 95       	ror	r24
    6b0e:	77 95       	ror	r23
    6b10:	67 95       	ror	r22
    6b12:	aa 95       	dec	r26
    6b14:	d1 f7       	brne	.-12     	; 0x6b0a <hal_configureSpiChannel+0x414>
    6b16:	d7 01       	movw	r26, r14
    6b18:	11 96       	adiw	r26, 0x01	; 1
    6b1a:	6d 93       	st	X+, r22
    6b1c:	7d 93       	st	X+, r23
    6b1e:	8d 93       	st	X+, r24
    6b20:	9c 93       	st	X, r25
    6b22:	14 97       	sbiw	r26, 0x04	; 4
    6b24:	10 e0       	ldi	r17, 0x00	; 0
    6b26:	22 c0       	rjmp	.+68     	; 0x6b6c <hal_configureSpiChannel+0x476>
      }
      else
      {
         t_clockDivision = SPI_PRESCALER_DIV4_gc;
         pt_spiChanHndl->i_baudRate = (hal_getCpuFreq() >> 2);
    6b28:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    6b2c:	f2 e0       	ldi	r31, 0x02	; 2
    6b2e:	96 95       	lsr	r25
    6b30:	87 95       	ror	r24
    6b32:	77 95       	ror	r23
    6b34:	67 95       	ror	r22
    6b36:	fa 95       	dec	r31
    6b38:	d1 f7       	brne	.-12     	; 0x6b2e <hal_configureSpiChannel+0x438>
    6b3a:	f7 01       	movw	r30, r14
    6b3c:	61 83       	std	Z+1, r22	; 0x01
    6b3e:	72 83       	std	Z+2, r23	; 0x02
    6b40:	83 83       	std	Z+3, r24	; 0x03
    6b42:	94 83       	std	Z+4, r25	; 0x04
         c_doubleClock = 0;
         if( t_conf.t_spiOp == SPI_MASTER)
    6b44:	88 20       	and	r8, r8
    6b46:	21 f0       	breq	.+8      	; 0x6b50 <hal_configureSpiChannel+0x45a>
    6b48:	30 e4       	ldi	r19, 0x40	; 64
    6b4a:	20 eb       	ldi	r18, 0xB0	; 176
    6b4c:	10 e0       	ldi	r17, 0x00	; 0
    6b4e:	12 c0       	rjmp	.+36     	; 0x6b74 <hal_configureSpiChannel+0x47e>
         {
            pt_spiChanHndl->i_baudRate *=2;
    6b50:	66 0f       	add	r22, r22
    6b52:	77 1f       	adc	r23, r23
    6b54:	88 1f       	adc	r24, r24
    6b56:	99 1f       	adc	r25, r25
    6b58:	d7 01       	movw	r26, r14
    6b5a:	11 96       	adiw	r26, 0x01	; 1
    6b5c:	6d 93       	st	X+, r22
    6b5e:	7d 93       	st	X+, r23
    6b60:	8d 93       	st	X+, r24
    6b62:	9c 93       	st	X, r25
    6b64:	14 97       	sbiw	r26, 0x04	; 4
    6b66:	10 e0       	ldi	r17, 0x00	; 0
    6b68:	00 e8       	ldi	r16, 0x80	; 128
    6b6a:	07 c0       	rjmp	.+14     	; 0x6b7a <hal_configureSpiChannel+0x484>
      }

      /*---------------------------------------------------------------------*
       * Configure the pins the SPI will use.
       *---------------------------------------------------------------------*/
      if( t_conf.t_spiOp == SPI_MASTER)
    6b6c:	88 20       	and	r8, r8
    6b6e:	21 f0       	breq	.+8      	; 0x6b78 <hal_configureSpiChannel+0x482>
    6b70:	30 e4       	ldi	r19, 0x40	; 64
    6b72:	20 eb       	ldi	r18, 0xB0	; 176
    6b74:	00 e0       	ldi	r16, 0x00	; 0
    6b76:	03 c0       	rjmp	.+6      	; 0x6b7e <hal_configureSpiChannel+0x488>
    6b78:	00 e0       	ldi	r16, 0x00	; 0
    6b7a:	30 eb       	ldi	r19, 0xB0	; 176
    6b7c:	20 e4       	ldi	r18, 0x40	; 64
         t_gConf.c_inputMask    = PIN_4|PIN_5|PIN_7;
         t_gConf.c_outputMask   = PIN_6;
         t_gConf.b_setOutputLow = false;
      }

      t_gConf.t_inConf  = PULLUP;
    6b7e:	85 e0       	ldi	r24, 0x05	; 5
    6b80:	8f 83       	std	Y+7, r24	; 0x07
      t_gConf.t_outConf = TOTEM;
    6b82:	18 86       	std	Y+8, r1	; 0x08

      t_gErr = hal_configureGpioPort( t_spiPort, t_gConf);
    6b84:	1e 82       	std	Y+6, r1	; 0x06
    6b86:	3d 83       	std	Y+5, r19	; 0x05
    6b88:	2c 83       	std	Y+4, r18	; 0x04
    6b8a:	89 2d       	mov	r24, r9
    6b8c:	40 e0       	ldi	r20, 0x00	; 0
    6b8e:	55 e0       	ldi	r21, 0x05	; 5
    6b90:	60 e0       	ldi	r22, 0x00	; 0
    6b92:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>

      /*---------------------------------------------------------------------*
       * Reset this particular spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL = 0;
    6b96:	d7 01       	movw	r26, r14
    6b98:	17 96       	adiw	r26, 0x07	; 7
    6b9a:	ed 91       	ld	r30, X+
    6b9c:	fc 91       	ld	r31, X
    6b9e:	18 97       	sbiw	r26, 0x08	; 8
    6ba0:	10 82       	st	Z, r1

      /*---------------------------------------------------------------------*
       * Configure the spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL |= t_clockDivision;
    6ba2:	17 96       	adiw	r26, 0x07	; 7
    6ba4:	ed 91       	ld	r30, X+
    6ba6:	fc 91       	ld	r31, X
    6ba8:	18 97       	sbiw	r26, 0x08	; 8
    6baa:	80 81       	ld	r24, Z
    6bac:	18 2b       	or	r17, r24
    6bae:	10 83       	st	Z, r17

      pt_spiChanHndl->pt_spi->CTRL |= c_doubleClock;
    6bb0:	17 96       	adiw	r26, 0x07	; 7
    6bb2:	ed 91       	ld	r30, X+
    6bb4:	fc 91       	ld	r31, X
    6bb6:	18 97       	sbiw	r26, 0x08	; 8
    6bb8:	80 81       	ld	r24, Z
    6bba:	08 2b       	or	r16, r24
    6bbc:	00 83       	st	Z, r16

      if( t_conf.t_spiOp == SPI_MASTER)
    6bbe:	88 20       	and	r8, r8
    6bc0:	39 f4       	brne	.+14     	; 0x6bd0 <hal_configureSpiChannel+0x4da>
         pt_spiChanHndl->pt_spi->CTRL |= SPI_MASTER_bm;
    6bc2:	17 96       	adiw	r26, 0x07	; 7
    6bc4:	ed 91       	ld	r30, X+
    6bc6:	fc 91       	ld	r31, X
    6bc8:	18 97       	sbiw	r26, 0x08	; 8
    6bca:	80 81       	ld	r24, Z
    6bcc:	80 61       	ori	r24, 0x10	; 16
    6bce:	80 83       	st	Z, r24

      if( t_conf.t_spiOrder == SPI_LSB_FIRST)
    6bd0:	55 20       	and	r5, r5
    6bd2:	41 f4       	brne	.+16     	; 0x6be4 <hal_configureSpiChannel+0x4ee>
         pt_spiChanHndl->pt_spi->CTRL |= SPI_DORD_bm;
    6bd4:	d7 01       	movw	r26, r14
    6bd6:	17 96       	adiw	r26, 0x07	; 7
    6bd8:	ed 91       	ld	r30, X+
    6bda:	fc 91       	ld	r31, X
    6bdc:	18 97       	sbiw	r26, 0x08	; 8
    6bde:	80 81       	ld	r24, Z
    6be0:	80 62       	ori	r24, 0x20	; 32
    6be2:	80 83       	st	Z, r24

      pt_spiChanHndl->pt_spi->CTRL |= (t_conf.t_spiMd << 2);
    6be4:	d7 01       	movw	r26, r14
    6be6:	17 96       	adiw	r26, 0x07	; 7
    6be8:	ed 91       	ld	r30, X+
    6bea:	fc 91       	ld	r31, X
    6bec:	18 97       	sbiw	r26, 0x08	; 8
    6bee:	80 81       	ld	r24, Z
    6bf0:	66 0c       	add	r6, r6
    6bf2:	66 0c       	add	r6, r6
    6bf4:	86 29       	or	r24, r6
    6bf6:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Store the channel ID.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->t_id = t_chanId;
    6bf8:	7c 92       	st	X, r7

      /*---------------------------------------------------------------------*
       * Number users attached at this time.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->c_numUsers = 0;
    6bfa:	15 96       	adiw	r26, 0x05	; 5
    6bfc:	1c 92       	st	X, r1
    6bfe:	15 97       	sbiw	r26, 0x05	; 5

      /*---------------------------------------------------------------------*
       * Store the operational mode for this particular spi channel.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->t_spiOp = t_conf.t_spiOp;
    6c00:	16 96       	adiw	r26, 0x06	; 6
    6c02:	8c 92       	st	X, r8
    6c04:	16 97       	sbiw	r26, 0x06	; 6

      /*---------------------------------------------------------------------*
       * No transactions in progress.
       *---------------------------------------------------------------------*/
        pt_spiChanHndl->b_busLocked = false;
    6c06:	19 96       	adiw	r26, 0x09	; 9
    6c08:	1c 92       	st	X, r1
    6c0a:	19 97       	sbiw	r26, 0x09	; 9
    6c0c:	17 96       	adiw	r26, 0x07	; 7
    6c0e:	ed 91       	ld	r30, X+
    6c10:	fc 91       	ld	r31, X
    6c12:	18 97       	sbiw	r26, 0x08	; 8

      /*---------------------------------------------------------------------*
       * Enable spi interrupts for block devices that aren't configured for
       * dma operation.
       *---------------------------------------------------------------------*/
      if( t_conf.b_enDma == true)
    6c14:	44 20       	and	r4, r4
    6c16:	11 f0       	breq	.+4      	; 0x6c1c <hal_configureSpiChannel+0x526>
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    6c18:	11 82       	std	Z+1, r1	; 0x01
    6c1a:	02 c0       	rjmp	.+4      	; 0x6c20 <hal_configureSpiChannel+0x52a>
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    6c1c:	83 e0       	ldi	r24, 0x03	; 3
    6c1e:	81 83       	std	Z+1, r24	; 0x01
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    6c20:	b5 e0       	ldi	r27, 0x05	; 5
    6c22:	9b 16       	cp	r9, r27
    6c24:	09 f4       	brne	.+2      	; 0x6c28 <hal_configureSpiChannel+0x532>
    6c26:	46 c0       	rjmp	.+140    	; 0x6cb4 <hal_configureSpiChannel+0x5be>
    6c28:	b9 15       	cp	r27, r9
    6c2a:	a0 f0       	brcs	.+40     	; 0x6c54 <hal_configureSpiChannel+0x55e>
    6c2c:	e2 e0       	ldi	r30, 0x02	; 2
    6c2e:	9e 16       	cp	r9, r30
    6c30:	49 f1       	breq	.+82     	; 0x6c84 <hal_configureSpiChannel+0x58e>
    6c32:	e9 15       	cp	r30, r9
    6c34:	38 f0       	brcs	.+14     	; 0x6c44 <hal_configureSpiChannel+0x54e>
    6c36:	99 20       	and	r9, r9
    6c38:	a9 f0       	breq	.+42     	; 0x6c64 <hal_configureSpiChannel+0x56e>
    6c3a:	f1 e0       	ldi	r31, 0x01	; 1
    6c3c:	9f 16       	cp	r9, r31
    6c3e:	09 f0       	breq	.+2      	; 0x6c42 <hal_configureSpiChannel+0x54c>
    6c40:	51 c0       	rjmp	.+162    	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
    6c42:	18 c0       	rjmp	.+48     	; 0x6c74 <hal_configureSpiChannel+0x57e>
    6c44:	23 e0       	ldi	r18, 0x03	; 3
    6c46:	92 16       	cp	r9, r18
    6c48:	29 f1       	breq	.+74     	; 0x6c94 <hal_configureSpiChannel+0x59e>
    6c4a:	84 e0       	ldi	r24, 0x04	; 4
    6c4c:	98 16       	cp	r9, r24
    6c4e:	09 f0       	breq	.+2      	; 0x6c52 <hal_configureSpiChannel+0x55c>
    6c50:	49 c0       	rjmp	.+146    	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
    6c52:	28 c0       	rjmp	.+80     	; 0x6ca4 <hal_configureSpiChannel+0x5ae>
    6c54:	a6 e0       	ldi	r26, 0x06	; 6
    6c56:	9a 16       	cp	r9, r26
    6c58:	a9 f1       	breq	.+106    	; 0x6cc4 <hal_configureSpiChannel+0x5ce>
    6c5a:	b7 e0       	ldi	r27, 0x07	; 7
    6c5c:	9b 16       	cp	r9, r27
    6c5e:	09 f0       	breq	.+2      	; 0x6c62 <hal_configureSpiChannel+0x56c>
    6c60:	41 c0       	rjmp	.+130    	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
    6c62:	38 c0       	rjmp	.+112    	; 0x6cd4 <hal_configureSpiChannel+0x5de>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    6c64:	80 91 00 06 	lds	r24, 0x0600
    6c68:	84 ff       	sbrs	r24, 4
    6c6a:	3c c0       	rjmp	.+120    	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    6c6c:	80 e1       	ldi	r24, 0x10	; 16
    6c6e:	e0 e0       	ldi	r30, 0x00	; 0
    6c70:	f6 e0       	ldi	r31, 0x06	; 6
    6c72:	37 c0       	rjmp	.+110    	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    6c74:	80 91 20 06 	lds	r24, 0x0620
    6c78:	84 ff       	sbrs	r24, 4
    6c7a:	34 c0       	rjmp	.+104    	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    6c7c:	80 e1       	ldi	r24, 0x10	; 16
    6c7e:	e0 e2       	ldi	r30, 0x20	; 32
    6c80:	f6 e0       	ldi	r31, 0x06	; 6
    6c82:	2f c0       	rjmp	.+94     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    6c84:	80 91 40 06 	lds	r24, 0x0640
    6c88:	84 ff       	sbrs	r24, 4
    6c8a:	2c c0       	rjmp	.+88     	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    6c8c:	80 e1       	ldi	r24, 0x10	; 16
    6c8e:	e0 e4       	ldi	r30, 0x40	; 64
    6c90:	f6 e0       	ldi	r31, 0x06	; 6
    6c92:	27 c0       	rjmp	.+78     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    6c94:	80 91 60 06 	lds	r24, 0x0660
    6c98:	84 ff       	sbrs	r24, 4
    6c9a:	24 c0       	rjmp	.+72     	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    6c9c:	80 e1       	ldi	r24, 0x10	; 16
    6c9e:	e0 e6       	ldi	r30, 0x60	; 96
    6ca0:	f6 e0       	ldi	r31, 0x06	; 6
    6ca2:	1f c0       	rjmp	.+62     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    6ca4:	80 91 80 06 	lds	r24, 0x0680
    6ca8:	84 ff       	sbrs	r24, 4
    6caa:	1c c0       	rjmp	.+56     	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    6cac:	80 e1       	ldi	r24, 0x10	; 16
    6cae:	e0 e8       	ldi	r30, 0x80	; 128
    6cb0:	f6 e0       	ldi	r31, 0x06	; 6
    6cb2:	17 c0       	rjmp	.+46     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    6cb4:	80 91 a0 06 	lds	r24, 0x06A0
    6cb8:	84 ff       	sbrs	r24, 4
    6cba:	14 c0       	rjmp	.+40     	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    6cbc:	80 e1       	ldi	r24, 0x10	; 16
    6cbe:	e0 ea       	ldi	r30, 0xA0	; 160
    6cc0:	f6 e0       	ldi	r31, 0x06	; 6
    6cc2:	0f c0       	rjmp	.+30     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    6cc4:	80 91 e0 06 	lds	r24, 0x06E0
    6cc8:	84 ff       	sbrs	r24, 4
    6cca:	0c c0       	rjmp	.+24     	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    6ccc:	80 e1       	ldi	r24, 0x10	; 16
    6cce:	e0 ee       	ldi	r30, 0xE0	; 224
    6cd0:	f6 e0       	ldi	r31, 0x06	; 6
    6cd2:	07 c0       	rjmp	.+14     	; 0x6ce2 <hal_configureSpiChannel+0x5ec>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    6cd4:	80 91 00 07 	lds	r24, 0x0700
    6cd8:	84 ff       	sbrs	r24, 4
    6cda:	04 c0       	rjmp	.+8      	; 0x6ce4 <hal_configureSpiChannel+0x5ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    6cdc:	80 e1       	ldi	r24, 0x10	; 16
    6cde:	e0 e0       	ldi	r30, 0x00	; 0
    6ce0:	f7 e0       	ldi	r31, 0x07	; 7
    6ce2:	85 83       	std	Z+5, r24	; 0x05
                  PIN_4);

      /*---------------------------------------------------------------------*
       * Enable the spi channel.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->pt_spi->CTRL |= SPI_ENABLE_bm;
    6ce4:	d7 01       	movw	r26, r14
    6ce6:	17 96       	adiw	r26, 0x07	; 7
    6ce8:	ed 91       	ld	r30, X+
    6cea:	fc 91       	ld	r31, X
    6cec:	18 97       	sbiw	r26, 0x08	; 8
    6cee:	80 81       	ld	r24, Z
    6cf0:	80 64       	ori	r24, 0x40	; 64
    6cf2:	80 83       	st	Z, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    6cf4:	89 81       	ldd	r24, Y+1	; 0x01
    6cf6:	8f bf       	out	0x3f, r24	; 63
    6cf8:	80 e0       	ldi	r24, 0x00	; 0
    6cfa:	03 c0       	rjmp	.+6      	; 0x6d02 <hal_configureSpiChannel+0x60c>

   return SPI_PASSED;
    6cfc:	81 ef       	ldi	r24, 0xF1	; 241
    6cfe:	01 c0       	rjmp	.+2      	; 0x6d02 <hal_configureSpiChannel+0x60c>
    6d00:	8f ef       	ldi	r24, 0xFF	; 255

}/*End hal_configureSpiChannel*/
    6d02:	60 96       	adiw	r28, 0x10	; 16
    6d04:	cd bf       	out	0x3d, r28	; 61
    6d06:	de bf       	out	0x3e, r29	; 62
    6d08:	cf 91       	pop	r28
    6d0a:	df 91       	pop	r29
    6d0c:	1f 91       	pop	r17
    6d0e:	0f 91       	pop	r16
    6d10:	ff 90       	pop	r15
    6d12:	ef 90       	pop	r14
    6d14:	df 90       	pop	r13
    6d16:	cf 90       	pop	r12
    6d18:	bf 90       	pop	r11
    6d1a:	af 90       	pop	r10
    6d1c:	9f 90       	pop	r9
    6d1e:	8f 90       	pop	r8
    6d20:	7f 90       	pop	r7
    6d22:	6f 90       	pop	r6
    6d24:	5f 90       	pop	r5
    6d26:	4f 90       	pop	r4
    6d28:	08 95       	ret

00006d2a <processMasterSpiRxDmaInt>:

}/*End updateBuffersSlave*/

static void processMasterSpiRxDmaInt( t_spiChanHndl *pt_chanHndl,
                                      t_spiUserHndl *pt_activeUser)
{
    6d2a:	0f 93       	push	r16
    6d2c:	1f 93       	push	r17
    6d2e:	cf 93       	push	r28
    6d30:	df 93       	push	r29
    6d32:	8c 01       	movw	r16, r24
    6d34:	eb 01       	movw	r28, r22
    *------------------------------------------------------------------------*/

   /*------------------------------------------------------------------------*
    * Was this a transaction issued by a call to 'hal_spiWriteBlock'?
    *------------------------------------------------------------------------*/
   if( pt_activeUser->pc_rxData == (int8_t *)&gc_tempBuf) /*Yes*/
    6d36:	8c 81       	ldd	r24, Y+4	; 0x04
    6d38:	9d 81       	ldd	r25, Y+5	; 0x05
    6d3a:	87 5c       	subi	r24, 0xC7	; 199
    6d3c:	90 42       	sbci	r25, 0x20	; 32
    6d3e:	19 f4       	brne	.+6      	; 0x6d46 <processMasterSpiRxDmaInt+0x1c>
   {
      /*---------------------------------------------------------------------*
       * Receive buffer was fixed...
       *---------------------------------------------------------------------*/
      pt_activeUser->s_bufIndex = 1;
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	05 c0       	rjmp	.+10     	; 0x6d50 <processMasterSpiRxDmaInt+0x26>
   }
   else /*No*/
   {
      pt_activeUser->s_bufIndex =
    6d46:	f8 01       	movw	r30, r16
    6d48:	80 89       	ldd	r24, Z+16	; 0x10
    6d4a:	91 89       	ldd	r25, Z+17	; 0x11
    6d4c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <hal_getDmaTransferCount>
    6d50:	88 87       	std	Y+8, r24	; 0x08
    6d52:	99 87       	std	Y+9, r25	; 0x09
   }

   /*------------------------------------------------------------------------*
    * Release spi channel
    *------------------------------------------------------------------------*/
    if( pt_activeUser->b_enCs == true)
    6d54:	88 89       	ldd	r24, Y+16	; 0x10
    6d56:	88 23       	and	r24, r24
    6d58:	09 f4       	brne	.+2      	; 0x6d5c <processMasterSpiRxDmaInt+0x32>
    6d5a:	79 c0       	rjmp	.+242    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
   {
      hal_gpioOn( pt_activeUser->t_csPort,
    6d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    6d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d60:	85 30       	cpi	r24, 0x05	; 5
    6d62:	09 f4       	brne	.+2      	; 0x6d66 <processMasterSpiRxDmaInt+0x3c>
    6d64:	4a c0       	rjmp	.+148    	; 0x6dfa <processMasterSpiRxDmaInt+0xd0>
    6d66:	86 30       	cpi	r24, 0x06	; 6
    6d68:	80 f4       	brcc	.+32     	; 0x6d8a <processMasterSpiRxDmaInt+0x60>
    6d6a:	82 30       	cpi	r24, 0x02	; 2
    6d6c:	81 f1       	breq	.+96     	; 0x6dce <processMasterSpiRxDmaInt+0xa4>
    6d6e:	83 30       	cpi	r24, 0x03	; 3
    6d70:	30 f4       	brcc	.+12     	; 0x6d7e <processMasterSpiRxDmaInt+0x54>
    6d72:	88 23       	and	r24, r24
    6d74:	e1 f0       	breq	.+56     	; 0x6dae <processMasterSpiRxDmaInt+0x84>
    6d76:	81 30       	cpi	r24, 0x01	; 1
    6d78:	09 f0       	breq	.+2      	; 0x6d7c <processMasterSpiRxDmaInt+0x52>
    6d7a:	69 c0       	rjmp	.+210    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
    6d7c:	20 c0       	rjmp	.+64     	; 0x6dbe <processMasterSpiRxDmaInt+0x94>
    6d7e:	83 30       	cpi	r24, 0x03	; 3
    6d80:	71 f1       	breq	.+92     	; 0x6dde <processMasterSpiRxDmaInt+0xb4>
    6d82:	84 30       	cpi	r24, 0x04	; 4
    6d84:	09 f0       	breq	.+2      	; 0x6d88 <processMasterSpiRxDmaInt+0x5e>
    6d86:	63 c0       	rjmp	.+198    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
    6d88:	31 c0       	rjmp	.+98     	; 0x6dec <processMasterSpiRxDmaInt+0xc2>
    6d8a:	88 30       	cpi	r24, 0x08	; 8
    6d8c:	09 f4       	brne	.+2      	; 0x6d90 <processMasterSpiRxDmaInt+0x66>
    6d8e:	4a c0       	rjmp	.+148    	; 0x6e24 <processMasterSpiRxDmaInt+0xfa>
    6d90:	89 30       	cpi	r24, 0x09	; 9
    6d92:	30 f4       	brcc	.+12     	; 0x6da0 <processMasterSpiRxDmaInt+0x76>
    6d94:	86 30       	cpi	r24, 0x06	; 6
    6d96:	c1 f1       	breq	.+112    	; 0x6e08 <processMasterSpiRxDmaInt+0xde>
    6d98:	87 30       	cpi	r24, 0x07	; 7
    6d9a:	09 f0       	breq	.+2      	; 0x6d9e <processMasterSpiRxDmaInt+0x74>
    6d9c:	58 c0       	rjmp	.+176    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
    6d9e:	3b c0       	rjmp	.+118    	; 0x6e16 <processMasterSpiRxDmaInt+0xec>
    6da0:	89 30       	cpi	r24, 0x09	; 9
    6da2:	09 f4       	brne	.+2      	; 0x6da6 <processMasterSpiRxDmaInt+0x7c>
    6da4:	46 c0       	rjmp	.+140    	; 0x6e32 <processMasterSpiRxDmaInt+0x108>
    6da6:	8a 30       	cpi	r24, 0x0A	; 10
    6da8:	09 f0       	breq	.+2      	; 0x6dac <processMasterSpiRxDmaInt+0x82>
    6daa:	51 c0       	rjmp	.+162    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
    6dac:	49 c0       	rjmp	.+146    	; 0x6e40 <processMasterSpiRxDmaInt+0x116>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    6dae:	80 91 00 06 	lds	r24, 0x0600
    6db2:	89 23       	and	r24, r25
    6db4:	09 f4       	brne	.+2      	; 0x6db8 <processMasterSpiRxDmaInt+0x8e>
    6db6:	4b c0       	rjmp	.+150    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    6db8:	e0 e0       	ldi	r30, 0x00	; 0
    6dba:	f6 e0       	ldi	r31, 0x06	; 6
    6dbc:	47 c0       	rjmp	.+142    	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    6dbe:	80 91 20 06 	lds	r24, 0x0620
    6dc2:	89 23       	and	r24, r25
    6dc4:	09 f4       	brne	.+2      	; 0x6dc8 <processMasterSpiRxDmaInt+0x9e>
    6dc6:	43 c0       	rjmp	.+134    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    6dc8:	e0 e2       	ldi	r30, 0x20	; 32
    6dca:	f6 e0       	ldi	r31, 0x06	; 6
    6dcc:	3f c0       	rjmp	.+126    	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    6dce:	80 91 40 06 	lds	r24, 0x0640
    6dd2:	89 23       	and	r24, r25
    6dd4:	09 f4       	brne	.+2      	; 0x6dd8 <processMasterSpiRxDmaInt+0xae>
    6dd6:	3b c0       	rjmp	.+118    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    6dd8:	e0 e4       	ldi	r30, 0x40	; 64
    6dda:	f6 e0       	ldi	r31, 0x06	; 6
    6ddc:	37 c0       	rjmp	.+110    	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    6dde:	80 91 60 06 	lds	r24, 0x0660
    6de2:	89 23       	and	r24, r25
    6de4:	a1 f1       	breq	.+104    	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    6de6:	e0 e6       	ldi	r30, 0x60	; 96
    6de8:	f6 e0       	ldi	r31, 0x06	; 6
    6dea:	30 c0       	rjmp	.+96     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    6dec:	80 91 80 06 	lds	r24, 0x0680
    6df0:	89 23       	and	r24, r25
    6df2:	69 f1       	breq	.+90     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    6df4:	e0 e8       	ldi	r30, 0x80	; 128
    6df6:	f6 e0       	ldi	r31, 0x06	; 6
    6df8:	29 c0       	rjmp	.+82     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    6dfa:	80 91 a0 06 	lds	r24, 0x06A0
    6dfe:	89 23       	and	r24, r25
    6e00:	31 f1       	breq	.+76     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    6e02:	e0 ea       	ldi	r30, 0xA0	; 160
    6e04:	f6 e0       	ldi	r31, 0x06	; 6
    6e06:	22 c0       	rjmp	.+68     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    6e08:	80 91 e0 06 	lds	r24, 0x06E0
    6e0c:	89 23       	and	r24, r25
    6e0e:	f9 f0       	breq	.+62     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    6e10:	e0 ee       	ldi	r30, 0xE0	; 224
    6e12:	f6 e0       	ldi	r31, 0x06	; 6
    6e14:	1b c0       	rjmp	.+54     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    6e16:	80 91 00 07 	lds	r24, 0x0700
    6e1a:	89 23       	and	r24, r25
    6e1c:	c1 f0       	breq	.+48     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    6e1e:	e0 e0       	ldi	r30, 0x00	; 0
    6e20:	f7 e0       	ldi	r31, 0x07	; 7
    6e22:	14 c0       	rjmp	.+40     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    6e24:	80 91 20 07 	lds	r24, 0x0720
    6e28:	89 23       	and	r24, r25
    6e2a:	89 f0       	breq	.+34     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    6e2c:	e0 e2       	ldi	r30, 0x20	; 32
    6e2e:	f7 e0       	ldi	r31, 0x07	; 7
    6e30:	0d c0       	rjmp	.+26     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    6e32:	80 91 c0 07 	lds	r24, 0x07C0
    6e36:	89 23       	and	r24, r25
    6e38:	51 f0       	breq	.+20     	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    6e3a:	e0 ec       	ldi	r30, 0xC0	; 192
    6e3c:	f7 e0       	ldi	r31, 0x07	; 7
    6e3e:	06 c0       	rjmp	.+12     	; 0x6e4c <processMasterSpiRxDmaInt+0x122>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    6e40:	80 91 e0 07 	lds	r24, 0x07E0
    6e44:	89 23       	and	r24, r25
    6e46:	19 f0       	breq	.+6      	; 0x6e4e <processMasterSpiRxDmaInt+0x124>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    6e48:	e0 ee       	ldi	r30, 0xE0	; 224
    6e4a:	f7 e0       	ldi	r31, 0x07	; 7
    6e4c:	95 83       	std	Z+5, r25	; 0x05
   }

   /*------------------------------------------------------------------------*
    * Disable the DMA channel.
    *------------------------------------------------------------------------*/
   hal_dmaDisableChannel( pt_chanHndl->t_rxDmaHndl);
    6e4e:	f8 01       	movw	r30, r16
    6e50:	80 89       	ldd	r24, Z+16	; 0x10
    6e52:	91 89       	ldd	r25, Z+17	; 0x11
    6e54:	0e 94 a8 22 	call	0x4550	; 0x4550 <hal_dmaDisableChannel>

   /*------------------------------------------------------------------------*
    * Execute the call-back function, returning the rx buffer and
    * the size of the data.
    *------------------------------------------------------------------------*/
    if( pt_activeUser->pf_funPtr != NULL)
    6e58:	e8 81       	ld	r30, Y
    6e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    6e5c:	30 97       	sbiw	r30, 0x00	; 0
    6e5e:	29 f0       	breq	.+10     	; 0x6e6a <processMasterSpiRxDmaInt+0x140>
      pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    6e60:	68 85       	ldd	r22, Y+8	; 0x08
    6e62:	79 85       	ldd	r23, Y+9	; 0x09
    6e64:	8c 81       	ldd	r24, Y+4	; 0x04
    6e66:	9d 81       	ldd	r25, Y+5	; 0x05
    6e68:	19 95       	eicall
                                    pt_activeUser->s_bufIndex);

   /*------------------------------------------------------------------------*
    * Release the spi bus.
    *------------------------------------------------------------------------*/
    pt_chanHndl->b_busLocked = false;
    6e6a:	f8 01       	movw	r30, r16
    6e6c:	11 86       	std	Z+9, r1	; 0x09

   pt_activeUser->s_bufIndex = 0;
    6e6e:	18 86       	std	Y+8, r1	; 0x08
    6e70:	19 86       	std	Y+9, r1	; 0x09

}/*End processMasterSpiRxDmaInt*/
    6e72:	df 91       	pop	r29
    6e74:	cf 91       	pop	r28
    6e76:	1f 91       	pop	r17
    6e78:	0f 91       	pop	r16
    6e7a:	08 95       	ret

00006e7c <masterSpiFRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    6e7c:	83 e0       	ldi	r24, 0x03	; 3
    6e7e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6e82:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    6e84:	00 97       	sbiw	r24, 0x00	; 0
    6e86:	21 f0       	breq	.+8      	; 0x6e90 <masterSpiFRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    6e88:	62 85       	ldd	r22, Z+10	; 0x0a
    6e8a:	73 85       	ldd	r23, Z+11	; 0x0b
    6e8c:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <processMasterSpiRxDmaInt>
    6e90:	08 95       	ret

00006e92 <masterSpiERxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    6e92:	82 e0       	ldi	r24, 0x02	; 2
    6e94:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6e98:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    6e9a:	00 97       	sbiw	r24, 0x00	; 0
    6e9c:	21 f0       	breq	.+8      	; 0x6ea6 <masterSpiERxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    6e9e:	62 85       	ldd	r22, Z+10	; 0x0a
    6ea0:	73 85       	ldd	r23, Z+11	; 0x0b
    6ea2:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <processMasterSpiRxDmaInt>
    6ea6:	08 95       	ret

00006ea8 <masterSpiDRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    6ea8:	81 e0       	ldi	r24, 0x01	; 1
    6eaa:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6eae:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    6eb0:	00 97       	sbiw	r24, 0x00	; 0
    6eb2:	21 f0       	breq	.+8      	; 0x6ebc <masterSpiDRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    6eb4:	62 85       	ldd	r22, Z+10	; 0x0a
    6eb6:	73 85       	ldd	r23, Z+11	; 0x0b
    6eb8:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <processMasterSpiRxDmaInt>
    6ebc:	08 95       	ret

00006ebe <masterSpiCRxDmaInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    6ebe:	80 e0       	ldi	r24, 0x00	; 0
    6ec0:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6ec4:	fc 01       	movw	r30, r24

   if( pt_chanHndl != NULL)
    6ec6:	00 97       	sbiw	r24, 0x00	; 0
    6ec8:	21 f0       	breq	.+8      	; 0x6ed2 <masterSpiCRxDmaInt+0x14>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processMasterSpiRxDmaInt( pt_chanHndl,
    6eca:	62 85       	ldd	r22, Z+10	; 0x0a
    6ecc:	73 85       	ldd	r23, Z+11	; 0x0b
    6ece:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <processMasterSpiRxDmaInt>
    6ed2:	08 95       	ret

00006ed4 <processSlaveSpiChipSelectInt>:

}/*End processMasterSpiRxDmaInt*/

static void processSlaveSpiChipSelectInt( t_spiChanHndl *pt_chanHndl,
                                          t_spiUserHndl *pt_activeUser)
{
    6ed4:	0f 93       	push	r16
    6ed6:	1f 93       	push	r17
    6ed8:	cf 93       	push	r28
    6eda:	df 93       	push	r29
    6edc:	8c 01       	movw	r16, r24
   pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;
    6ede:	fc 01       	movw	r30, r24
    6ee0:	c2 85       	ldd	r28, Z+10	; 0x0a
    6ee2:	d3 85       	ldd	r29, Z+11	; 0x0b

   /*------------------------------------------------------------------------*
    * Is the DMA enabled?
    *------------------------------------------------------------------------*/
   if( pt_chanHndl->t_rxDmaHndl > 0)
    6ee4:	80 89       	ldd	r24, Z+16	; 0x10
    6ee6:	91 89       	ldd	r25, Z+17	; 0x11
    6ee8:	18 16       	cp	r1, r24
    6eea:	19 06       	cpc	r1, r25
    6eec:	a4 f4       	brge	.+40     	; 0x6f16 <processSlaveSpiChipSelectInt+0x42>
   {
      /*---------------------------------------------------------------------*
       * Was this a transaction issued by a call to 'hal_spiWriteBlock'?
       *---------------------------------------------------------------------*/
      if( pt_activeUser->pc_rxData == (int8_t *)&gc_tempBuf) /*Yes*/
    6eee:	8c 81       	ldd	r24, Y+4	; 0x04
    6ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    6ef2:	87 5c       	subi	r24, 0xC7	; 199
    6ef4:	90 42       	sbci	r25, 0x20	; 32
    6ef6:	31 f4       	brne	.+12     	; 0x6f04 <processSlaveSpiChipSelectInt+0x30>
      {
         pt_activeUser->s_bufIndex =
    6ef8:	f8 01       	movw	r30, r16
    6efa:	80 89       	ldd	r24, Z+16	; 0x10
    6efc:	91 89       	ldd	r25, Z+17	; 0x11
    6efe:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <hal_getDmaTransferCount>
    6f02:	02 c0       	rjmp	.+4      	; 0x6f08 <processSlaveSpiChipSelectInt+0x34>
         hal_getDmaTransferCount( pt_chanHndl->t_rxDmaHndl);
      }
      else
         pt_activeUser->s_bufIndex = 1;
    6f04:	81 e0       	ldi	r24, 0x01	; 1
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	88 87       	std	Y+8, r24	; 0x08
    6f0a:	99 87       	std	Y+9, r25	; 0x09

      /*---------------------------------------------------------------------*
       * Disable the DMA channel
       *---------------------------------------------------------------------*/
      hal_dmaDisableChannel( pt_chanHndl->t_rxDmaHndl);
    6f0c:	f8 01       	movw	r30, r16
    6f0e:	80 89       	ldd	r24, Z+16	; 0x10
    6f10:	91 89       	ldd	r25, Z+17	; 0x11
    6f12:	0e 94 a8 22 	call	0x4550	; 0x4550 <hal_dmaDisableChannel>
   }/*End if( pt_chanHndl->t_rxDmaHndl > 0)*/

   /*------------------------------------------------------------------------*
    * Release the spi bus.
    *------------------------------------------------------------------------*/
   if( pt_activeUser->s_bufIndex > 0)
    6f16:	68 85       	ldd	r22, Y+8	; 0x08
    6f18:	79 85       	ldd	r23, Y+9	; 0x09
    6f1a:	61 15       	cp	r22, r1
    6f1c:	71 05       	cpc	r23, r1
    6f1e:	59 f0       	breq	.+22     	; 0x6f36 <processSlaveSpiChipSelectInt+0x62>
   {
      /*---------------------------------------------------------------------*
       * Execute the call-back function.
       *---------------------------------------------------------------------*/
       if( pt_activeUser->pf_funPtr != NULL)
    6f20:	e8 81       	ld	r30, Y
    6f22:	f9 81       	ldd	r31, Y+1	; 0x01
    6f24:	30 97       	sbiw	r30, 0x00	; 0
    6f26:	19 f0       	breq	.+6      	; 0x6f2e <processSlaveSpiChipSelectInt+0x5a>
         pt_activeUser->pf_funPtr( pt_activeUser->pc_rxData,
    6f28:	8c 81       	ldd	r24, Y+4	; 0x04
    6f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    6f2c:	19 95       	eicall
                                       pt_activeUser->s_bufIndex);

      /*---------------------------------------------------------------------*
       * Release the spi bus.
       *---------------------------------------------------------------------*/
      pt_chanHndl->b_busLocked = false;
    6f2e:	f8 01       	movw	r30, r16
    6f30:	11 86       	std	Z+9, r1	; 0x09
      pt_activeUser->s_bufIndex = 0;
    6f32:	18 86       	std	Y+8, r1	; 0x08
    6f34:	19 86       	std	Y+9, r1	; 0x09

   }/*End if( pt_activeUser->s_bufIndex > 0)*/

}/*End processSlaveSpiChipSelectInt*/
    6f36:	df 91       	pop	r29
    6f38:	cf 91       	pop	r28
    6f3a:	1f 91       	pop	r17
    6f3c:	0f 91       	pop	r16
    6f3e:	08 95       	ret

00006f40 <slaveSpiFChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_4);
    6f40:	83 e0       	ldi	r24, 0x03	; 3
    6f42:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6f46:	fc 01       	movw	r30, r24

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    6f48:	00 97       	sbiw	r24, 0x00	; 0
    6f4a:	41 f0       	breq	.+16     	; 0x6f5c <slaveSpiFChipSelectInt+0x1c>
    6f4c:	86 81       	ldd	r24, Z+6	; 0x06
    6f4e:	81 30       	cpi	r24, 0x01	; 1
    6f50:	29 f4       	brne	.+10     	; 0x6f5c <slaveSpiFChipSelectInt+0x1c>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    6f52:	62 85       	ldd	r22, Z+10	; 0x0a
    6f54:	73 85       	ldd	r23, Z+11	; 0x0b
    6f56:	cf 01       	movw	r24, r30
    6f58:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <processSlaveSpiChipSelectInt>
    6f5c:	08 95       	ret

00006f5e <slaveSpiEChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_3);
    6f5e:	82 e0       	ldi	r24, 0x02	; 2
    6f60:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6f64:	fc 01       	movw	r30, r24

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    6f66:	00 97       	sbiw	r24, 0x00	; 0
    6f68:	41 f0       	breq	.+16     	; 0x6f7a <slaveSpiEChipSelectInt+0x1c>
    6f6a:	86 81       	ldd	r24, Z+6	; 0x06
    6f6c:	81 30       	cpi	r24, 0x01	; 1
    6f6e:	29 f4       	brne	.+10     	; 0x6f7a <slaveSpiEChipSelectInt+0x1c>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    6f70:	62 85       	ldd	r22, Z+10	; 0x0a
    6f72:	73 85       	ldd	r23, Z+11	; 0x0b
    6f74:	cf 01       	movw	r24, r30
    6f76:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <processSlaveSpiChipSelectInt>
    6f7a:	08 95       	ret

00006f7c <slaveSpiDChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_2);
    6f7c:	81 e0       	ldi	r24, 0x01	; 1
    6f7e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6f82:	fc 01       	movw	r30, r24

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    6f84:	00 97       	sbiw	r24, 0x00	; 0
    6f86:	41 f0       	breq	.+16     	; 0x6f98 <slaveSpiDChipSelectInt+0x1c>
    6f88:	86 81       	ldd	r24, Z+6	; 0x06
    6f8a:	81 30       	cpi	r24, 0x01	; 1
    6f8c:	29 f4       	brne	.+10     	; 0x6f98 <slaveSpiDChipSelectInt+0x1c>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    6f8e:	62 85       	ldd	r22, Z+10	; 0x0a
    6f90:	73 85       	ldd	r23, Z+11	; 0x0b
    6f92:	cf 01       	movw	r24, r30
    6f94:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <processSlaveSpiChipSelectInt>
    6f98:	08 95       	ret

00006f9a <slaveSpiCChipSelectInt>:
   t_spiUserHndl *pt_activeUser = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this spi interrupt.
    *------------------------------------------------------------------------*/
   pt_chanHndl = findSpiElement( (uint8_t)SPI_1);
    6f9a:	80 e0       	ldi	r24, 0x00	; 0
    6f9c:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    6fa0:	fc 01       	movw	r30, r24

   if( (pt_chanHndl != NULL) && (pt_chanHndl->t_spiOp == SPI_SLAVE))
    6fa2:	00 97       	sbiw	r24, 0x00	; 0
    6fa4:	41 f0       	breq	.+16     	; 0x6fb6 <slaveSpiCChipSelectInt+0x1c>
    6fa6:	86 81       	ldd	r24, Z+6	; 0x06
    6fa8:	81 30       	cpi	r24, 0x01	; 1
    6faa:	29 f4       	brne	.+10     	; 0x6fb6 <slaveSpiCChipSelectInt+0x1c>
   {
      pt_activeUser = (t_spiUserHndl*)pt_chanHndl->pt_activeUser;

      processSlaveSpiChipSelectInt( pt_chanHndl,
    6fac:	62 85       	ldd	r22, Z+10	; 0x0a
    6fae:	73 85       	ldd	r23, Z+11	; 0x0b
    6fb0:	cf 01       	movw	r24, r30
    6fb2:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <processSlaveSpiChipSelectInt>
    6fb6:	08 95       	ret

00006fb8 <hal_requestSpiChannel>:
t_SPIHNDL hal_requestSpiChannel( t_spiChanId t_chanId,
                                 void (*pf_funPtr)( int8_t *pc_data,
                                                    uint16_t s_length),
                                 t_gpioPort t_csPort,
                                 uint8_t c_csPin)
{
    6fb8:	8f 92       	push	r8
    6fba:	9f 92       	push	r9
    6fbc:	af 92       	push	r10
    6fbe:	bf 92       	push	r11
    6fc0:	cf 92       	push	r12
    6fc2:	df 92       	push	r13
    6fc4:	ef 92       	push	r14
    6fc6:	ff 92       	push	r15
    6fc8:	0f 93       	push	r16
    6fca:	1f 93       	push	r17
    6fcc:	df 93       	push	r29
    6fce:	cf 93       	push	r28
    6fd0:	cd b7       	in	r28, 0x3d	; 61
    6fd2:	de b7       	in	r29, 0x3e	; 62
    6fd4:	28 97       	sbiw	r28, 0x08	; 8
    6fd6:	cd bf       	out	0x3d, r28	; 61
    6fd8:	de bf       	out	0x3e, r29	; 62
    6fda:	18 2f       	mov	r17, r24
    6fdc:	4b 01       	movw	r8, r22
    6fde:	c4 2e       	mov	r12, r20
    6fe0:	d2 2e       	mov	r13, r18

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    6fe2:	8f b7       	in	r24, 0x3f	; 63
    6fe4:	89 83       	std	Y+1, r24	; 0x01
    6fe6:	f8 94       	cli

   if( (t_chanId < SPI_1) ||
    6fe8:	14 30       	cpi	r17, 0x04	; 4
    6fea:	28 f0       	brcs	.+10     	; 0x6ff6 <hal_requestSpiChannel+0x3e>
        (t_chanId > SPI_4))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6fec:	89 81       	ldd	r24, Y+1	; 0x01
    6fee:	8f bf       	out	0x3f, r24	; 63
    6ff0:	2b ef       	ldi	r18, 0xFB	; 251
    6ff2:	3f ef       	ldi	r19, 0xFF	; 255
    6ff4:	45 c1       	rjmp	.+650    	; 0x7280 <hal_requestSpiChannel+0x2c8>
      return (t_SPIHNDL)SPI_INVALID_MODULE;
   }

   if( (c_csPin < PIN_0) ||
    6ff6:	82 2f       	mov	r24, r18
    6ff8:	81 50       	subi	r24, 0x01	; 1
    6ffa:	87 ff       	sbrs	r24, 7
    6ffc:	05 c0       	rjmp	.+10     	; 0x7008 <hal_requestSpiChannel+0x50>
       (c_csPin > PIN_7))
   {
      HAL_END_CRITICAL();//Enable interrupts
    6ffe:	89 81       	ldd	r24, Y+1	; 0x01
    7000:	8f bf       	out	0x3f, r24	; 63
    7002:	27 ef       	ldi	r18, 0xF7	; 247
    7004:	3f ef       	ldi	r19, 0xFF	; 255
    7006:	3c c1       	rjmp	.+632    	; 0x7280 <hal_requestSpiChannel+0x2c8>
      return (t_SPIHNDL)SPI_INVALID_PIN;
   }

   if( (t_csPort < GPIO_PORTA) ||
    7008:	8a e0       	ldi	r24, 0x0A	; 10
    700a:	84 17       	cp	r24, r20
    700c:	28 f4       	brcc	.+10     	; 0x7018 <hal_requestSpiChannel+0x60>
       (t_csPort > GPIO_PORTR))
   {
      HAL_END_CRITICAL();//Enable interrupts
    700e:	89 81       	ldd	r24, Y+1	; 0x01
    7010:	8f bf       	out	0x3f, r24	; 63
    7012:	26 ef       	ldi	r18, 0xF6	; 246
    7014:	3f ef       	ldi	r19, 0xFF	; 255
    7016:	34 c1       	rjmp	.+616    	; 0x7280 <hal_requestSpiChannel+0x2c8>
   }

   /*------------------------------------------------------------------------*
    * Grab the handle associated with this channel ID.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = findSpiElement( t_chanId);
    7018:	81 2f       	mov	r24, r17
    701a:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <findSpiElement>
    701e:	5c 01       	movw	r10, r24

   /*------------------------------------------------------------------------*
    * Has a spi channel been configured?
    *------------------------------------------------------------------------*/
   if( pt_spiChanHndl != NULL) /*Yes*/
    7020:	00 97       	sbiw	r24, 0x00	; 0
    7022:	09 f4       	brne	.+2      	; 0x7026 <hal_requestSpiChannel+0x6e>
    7024:	22 c1       	rjmp	.+580    	; 0x726a <hal_requestSpiChannel+0x2b2>
   {
      /*---------------------------------------------------------------------*
       * In slave operation there can be only one reader.
       *---------------------------------------------------------------------*/
      if( (pt_spiChanHndl->t_spiOp == SPI_SLAVE) &&
    7026:	fc 01       	movw	r30, r24
    7028:	86 81       	ldd	r24, Z+6	; 0x06
    702a:	81 30       	cpi	r24, 0x01	; 1
    702c:	41 f4       	brne	.+16     	; 0x703e <hal_requestSpiChannel+0x86>
    702e:	85 81       	ldd	r24, Z+5	; 0x05
    7030:	88 23       	and	r24, r24
    7032:	29 f0       	breq	.+10     	; 0x703e <hal_requestSpiChannel+0x86>
          (pt_spiChanHndl->c_numUsers > 0))
      {
         HAL_END_CRITICAL();//Enable interrupts
    7034:	89 81       	ldd	r24, Y+1	; 0x01
    7036:	8f bf       	out	0x3f, r24	; 63
    7038:	23 ef       	ldi	r18, 0xF3	; 243
    703a:	3f ef       	ldi	r19, 0xFF	; 255
    703c:	21 c1       	rjmp	.+578    	; 0x7280 <hal_requestSpiChannel+0x2c8>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to the user connected to particular spi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_spiUserHndl));
    703e:	81 e1       	ldi	r24, 0x11	; 17
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    7046:	8a 83       	std	Y+2, r24	; 0x02
    7048:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
    704a:	8a 81       	ldd	r24, Y+2	; 0x02
    704c:	9b 81       	ldd	r25, Y+3	; 0x03
    704e:	97 ff       	sbrs	r25, 7
    7050:	03 c0       	rjmp	.+6      	; 0x7058 <hal_requestSpiChannel+0xa0>
    7052:	8f ef       	ldi	r24, 0xFF	; 255
    7054:	9f ef       	ldi	r25, 0xFF	; 255
    7056:	0b c0       	rjmp	.+22     	; 0x706e <hal_requestSpiChannel+0xb6>
   }

   /*------------------------------------------------------------------------*
    * Add the spi module link onto the list open spi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_spiUserHndlList,
    7058:	80 91 c5 20 	lds	r24, 0x20C5
    705c:	90 91 c6 20 	lds	r25, 0x20C6
    7060:	6a 81       	ldd	r22, Y+2	; 0x02
    7062:	7b 81       	ldd	r23, Y+3	; 0x03
    7064:	41 e0       	ldi	r20, 0x01	; 1
    7066:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    706a:	8a 81       	ldd	r24, Y+2	; 0x02
    706c:	9b 81       	ldd	r25, Y+3	; 0x03

      /*---------------------------------------------------------------------*
       * Allocated memory for the link (and element) that contains information
       * specific to the user connected to particular spi module
       *---------------------------------------------------------------------*/
      t_linkHndl = createSpiUserHandle();
    706e:	80 93 be 22 	sts	0x22BE, r24
    7072:	90 93 bf 22 	sts	0x22BF, r25
      if( t_linkHndl < 0)
    7076:	80 91 be 22 	lds	r24, 0x22BE
    707a:	90 91 bf 22 	lds	r25, 0x22BF
    707e:	97 ff       	sbrs	r25, 7
    7080:	05 c0       	rjmp	.+10     	; 0x708c <hal_requestSpiChannel+0xd4>
      {
         HAL_END_CRITICAL();//Enable interrupts
    7082:	89 81       	ldd	r24, Y+1	; 0x01
    7084:	8f bf       	out	0x3f, r24	; 63
    7086:	2f ef       	ldi	r18, 0xFF	; 255
    7088:	3f ef       	ldi	r19, 0xFF	; 255
    708a:	fa c0       	rjmp	.+500    	; 0x7280 <hal_requestSpiChannel+0x2c8>
         return (t_SPIHNDL)SPI_OUT_OF_HEAP;

      }

      pt_spiUserHndl = (t_spiUserHndl *)
    708c:	e0 91 be 22 	lds	r30, 0x22BE
    7090:	f0 91 bf 22 	lds	r31, 0x22BF
    7094:	e0 80       	ld	r14, Z
    7096:	f1 80       	ldd	r15, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

      /*---------------------------------------------------------------------*
       * Make sure all the elements of the spi user handle are reset.
       *---------------------------------------------------------------------*/
      memset( (void *)pt_spiUserHndl, 0, sizeof( t_spiUserHndl));
    7098:	81 e1       	ldi	r24, 0x11	; 17
    709a:	f7 01       	movw	r30, r14
    709c:	11 92       	st	Z+, r1
    709e:	8a 95       	dec	r24
    70a0:	e9 f7       	brne	.-6      	; 0x709c <hal_requestSpiChannel+0xe4>

      /*---------------------------------------------------------------------*
       * Keep track of how many users are attached to this spi.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->c_numUsers++;
    70a2:	f5 01       	movw	r30, r10
    70a4:	85 81       	ldd	r24, Z+5	; 0x05
    70a6:	8f 5f       	subi	r24, 0xFF	; 255
    70a8:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Keep track of the spi channel associated with this user handle.
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->pt_spiChanHndl = pt_spiChanHndl;
    70aa:	f7 01       	movw	r30, r14
    70ac:	a4 86       	std	Z+12, r10	; 0x0c
    70ae:	b5 86       	std	Z+13, r11	; 0x0d

      /*---------------------------------------------------------------------*
       * Store the chip select location.
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->t_csPort    = t_csPort;
    70b0:	c2 86       	std	Z+10, r12	; 0x0a
      pt_spiUserHndl->c_csPin     = c_csPin;
    70b2:	d3 86       	std	Z+11, r13	; 0x0b

      pt_spiUserHndl->s_bufIndex  = 0;
    70b4:	10 86       	std	Z+8, r1	; 0x08
    70b6:	11 86       	std	Z+9, r1	; 0x09
      pt_spiUserHndl->s_bufLength = 0;
    70b8:	16 82       	std	Z+6, r1	; 0x06
    70ba:	17 82       	std	Z+7, r1	; 0x07
      pt_spiUserHndl->pc_txData   = NULL;
    70bc:	12 82       	std	Z+2, r1	; 0x02
    70be:	13 82       	std	Z+3, r1	; 0x03
      pt_spiUserHndl->pc_rxData   = NULL;
    70c0:	14 82       	std	Z+4, r1	; 0x04
    70c2:	15 82       	std	Z+5, r1	; 0x05

      pt_spiUserHndl->pf_funPtr   = pf_funPtr;
    70c4:	80 82       	st	Z, r8
    70c6:	91 82       	std	Z+1, r9	; 0x01

      /*---------------------------------------------------------------------*
       * Configure the chip-select pin register.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_SLAVE)
    70c8:	f5 01       	movw	r30, r10
    70ca:	86 81       	ldd	r24, Z+6	; 0x06
    70cc:	81 30       	cpi	r24, 0x01	; 1
    70ce:	19 f0       	breq	.+6      	; 0x70d6 <hal_requestSpiChannel+0x11e>
    70d0:	3d 2d       	mov	r19, r13
    70d2:	20 e0       	ldi	r18, 0x00	; 0
    70d4:	14 c0       	rjmp	.+40     	; 0x70fe <hal_requestSpiChannel+0x146>
      {

         pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    70d6:	f5 01       	movw	r30, r10
    70d8:	e2 86       	std	Z+10, r14	; 0x0a
    70da:	f3 86       	std	Z+11, r15	; 0x0b

         /*------------------------------------------------------------------*
          * Configure chip select interrupt - allows the slave to know when
          * it has finished receiving data.
          *------------------------------------------------------------------*/
         t_csIntConf.c_pin = c_csPin;
    70dc:	9d 2c       	mov	r9, r13
         t_csIntConf.t_inSense = GPIO_RISING;

         switch( t_chanId)
    70de:	11 30       	cpi	r17, 0x01	; 1
    70e0:	89 f0       	breq	.+34     	; 0x7104 <hal_requestSpiChannel+0x14c>
    70e2:	11 30       	cpi	r17, 0x01	; 1
    70e4:	28 f0       	brcs	.+10     	; 0x70f0 <hal_requestSpiChannel+0x138>
    70e6:	12 30       	cpi	r17, 0x02	; 2
    70e8:	91 f0       	breq	.+36     	; 0x710e <hal_requestSpiChannel+0x156>
    70ea:	13 30       	cpi	r17, 0x03	; 3
    70ec:	31 f4       	brne	.+12     	; 0x70fa <hal_requestSpiChannel+0x142>
    70ee:	14 c0       	rjmp	.+40     	; 0x7118 <hal_requestSpiChannel+0x160>
    70f0:	2d 2d       	mov	r18, r13
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	0d ec       	ldi	r16, 0xCD	; 205
    70f6:	17 e3       	ldi	r17, 0x37	; 55
    70f8:	13 c0       	rjmp	.+38     	; 0x7120 <hal_requestSpiChannel+0x168>
    70fa:	2d 2d       	mov	r18, r13
    70fc:	30 e0       	ldi	r19, 0x00	; 0
    70fe:	00 e0       	ldi	r16, 0x00	; 0
    7100:	10 e0       	ldi	r17, 0x00	; 0
    7102:	0e c0       	rjmp	.+28     	; 0x7120 <hal_requestSpiChannel+0x168>
    7104:	2d 2d       	mov	r18, r13
    7106:	30 e0       	ldi	r19, 0x00	; 0
    7108:	0e eb       	ldi	r16, 0xBE	; 190
    710a:	17 e3       	ldi	r17, 0x37	; 55
    710c:	09 c0       	rjmp	.+18     	; 0x7120 <hal_requestSpiChannel+0x168>
               t_csIntConf.pf_funPtr = &slaveSpiCChipSelectInt;
            break;

            case SPI_2:
               t_csIntConf.pf_funPtr = &slaveSpiDChipSelectInt;
            break;
    710e:	2d 2d       	mov	r18, r13
    7110:	30 e0       	ldi	r19, 0x00	; 0
    7112:	0f ea       	ldi	r16, 0xAF	; 175
    7114:	17 e3       	ldi	r17, 0x37	; 55
    7116:	04 c0       	rjmp	.+8      	; 0x7120 <hal_requestSpiChannel+0x168>

            case SPI_3:
               t_csIntConf.pf_funPtr = &slaveSpiEChipSelectInt;
            break;
    7118:	2d 2d       	mov	r18, r13
    711a:	30 e0       	ldi	r19, 0x00	; 0
    711c:	00 ea       	ldi	r16, 0xA0	; 160
    711e:	17 e3       	ldi	r17, 0x37	; 55
      {
         t_conf.c_inputMask  = 0;
         t_conf.c_outputMask = c_csPin;
      }

      t_conf.t_inConf  = TOTEM;
    7120:	1f 82       	std	Y+7, r1	; 0x07
      t_conf.t_outConf = TOTEM;
    7122:	18 86       	std	Y+8, r1	; 0x08
      t_gErr = hal_configureGpioPort( t_csPort, t_conf);
    7124:	3d 83       	std	Y+5, r19	; 0x05
    7126:	2c 83       	std	Y+4, r18	; 0x04
    7128:	8c 2d       	mov	r24, r12
    712a:	4e 81       	ldd	r20, Y+6	; 0x06
    712c:	50 e0       	ldi	r21, 0x00	; 0
    712e:	60 e0       	ldi	r22, 0x00	; 0
    7130:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>

      if( pt_spiChanHndl->t_spiOp == SPI_SLAVE)
    7134:	f5 01       	movw	r30, r10
    7136:	86 81       	ldd	r24, Z+6	; 0x06
    7138:	81 30       	cpi	r24, 0x01	; 1
    713a:	49 f4       	brne	.+18     	; 0x714e <hal_requestSpiChannel+0x196>
      {
         pt_spiUserHndl->t_csIntHndl =
    713c:	8c 2d       	mov	r24, r12
    713e:	49 2d       	mov	r20, r9
    7140:	51 e0       	ldi	r21, 0x01	; 1
    7142:	b8 01       	movw	r22, r16
    7144:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <hal_requestGpioInt>
    7148:	f7 01       	movw	r30, r14
    714a:	86 87       	std	Z+14, r24	; 0x0e
    714c:	97 87       	std	Z+15, r25	; 0x0f
         hal_requestGpioInt( t_csPort, t_csIntConf);
      }

      if( pt_spiUserHndl->t_csIntHndl < 0)
    714e:	f7 01       	movw	r30, r14
    7150:	86 85       	ldd	r24, Z+14	; 0x0e
    7152:	97 85       	ldd	r25, Z+15	; 0x0f
    7154:	97 fd       	sbrc	r25, 7
    7156:	89 c0       	rjmp	.+274    	; 0x726a <hal_requestSpiChannel+0x2b2>
      }

      /*---------------------------------------------------------------------*
       * Chip select high...
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7158:	f5 01       	movw	r30, r10
    715a:	86 81       	ldd	r24, Z+6	; 0x06
    715c:	88 23       	and	r24, r24
    715e:	09 f0       	breq	.+2      	; 0x7162 <hal_requestSpiChannel+0x1aa>
    7160:	89 c0       	rjmp	.+274    	; 0x7274 <hal_requestSpiChannel+0x2bc>
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    7162:	f5 e0       	ldi	r31, 0x05	; 5
    7164:	cf 16       	cp	r12, r31
    7166:	09 f4       	brne	.+2      	; 0x716a <hal_requestSpiChannel+0x1b2>
    7168:	55 c0       	rjmp	.+170    	; 0x7214 <hal_requestSpiChannel+0x25c>
    716a:	fc 15       	cp	r31, r12
    716c:	a0 f0       	brcs	.+40     	; 0x7196 <hal_requestSpiChannel+0x1de>
    716e:	82 e0       	ldi	r24, 0x02	; 2
    7170:	c8 16       	cp	r12, r24
    7172:	c9 f1       	breq	.+114    	; 0x71e6 <hal_requestSpiChannel+0x22e>
    7174:	8c 15       	cp	r24, r12
    7176:	38 f0       	brcs	.+14     	; 0x7186 <hal_requestSpiChannel+0x1ce>
    7178:	cc 20       	and	r12, r12
    717a:	29 f1       	breq	.+74     	; 0x71c6 <hal_requestSpiChannel+0x20e>
    717c:	e1 e0       	ldi	r30, 0x01	; 1
    717e:	ce 16       	cp	r12, r30
    7180:	09 f0       	breq	.+2      	; 0x7184 <hal_requestSpiChannel+0x1cc>
    7182:	78 c0       	rjmp	.+240    	; 0x7274 <hal_requestSpiChannel+0x2bc>
    7184:	28 c0       	rjmp	.+80     	; 0x71d6 <hal_requestSpiChannel+0x21e>
    7186:	f3 e0       	ldi	r31, 0x03	; 3
    7188:	cf 16       	cp	r12, r31
    718a:	a9 f1       	breq	.+106    	; 0x71f6 <hal_requestSpiChannel+0x23e>
    718c:	84 e0       	ldi	r24, 0x04	; 4
    718e:	c8 16       	cp	r12, r24
    7190:	09 f0       	breq	.+2      	; 0x7194 <hal_requestSpiChannel+0x1dc>
    7192:	70 c0       	rjmp	.+224    	; 0x7274 <hal_requestSpiChannel+0x2bc>
    7194:	38 c0       	rjmp	.+112    	; 0x7206 <hal_requestSpiChannel+0x24e>
    7196:	e8 e0       	ldi	r30, 0x08	; 8
    7198:	ce 16       	cp	r12, r30
    719a:	09 f4       	brne	.+2      	; 0x719e <hal_requestSpiChannel+0x1e6>
    719c:	50 c0       	rjmp	.+160    	; 0x723e <hal_requestSpiChannel+0x286>
    719e:	ec 15       	cp	r30, r12
    71a0:	48 f0       	brcs	.+18     	; 0x71b4 <hal_requestSpiChannel+0x1fc>
    71a2:	f6 e0       	ldi	r31, 0x06	; 6
    71a4:	cf 16       	cp	r12, r31
    71a6:	09 f4       	brne	.+2      	; 0x71aa <hal_requestSpiChannel+0x1f2>
    71a8:	3c c0       	rjmp	.+120    	; 0x7222 <hal_requestSpiChannel+0x26a>
    71aa:	87 e0       	ldi	r24, 0x07	; 7
    71ac:	c8 16       	cp	r12, r24
    71ae:	09 f0       	breq	.+2      	; 0x71b2 <hal_requestSpiChannel+0x1fa>
    71b0:	61 c0       	rjmp	.+194    	; 0x7274 <hal_requestSpiChannel+0x2bc>
    71b2:	3e c0       	rjmp	.+124    	; 0x7230 <hal_requestSpiChannel+0x278>
    71b4:	e9 e0       	ldi	r30, 0x09	; 9
    71b6:	ce 16       	cp	r12, r30
    71b8:	09 f4       	brne	.+2      	; 0x71bc <hal_requestSpiChannel+0x204>
    71ba:	48 c0       	rjmp	.+144    	; 0x724c <hal_requestSpiChannel+0x294>
    71bc:	fa e0       	ldi	r31, 0x0A	; 10
    71be:	cf 16       	cp	r12, r31
    71c0:	09 f0       	breq	.+2      	; 0x71c4 <hal_requestSpiChannel+0x20c>
    71c2:	58 c0       	rjmp	.+176    	; 0x7274 <hal_requestSpiChannel+0x2bc>
    71c4:	4a c0       	rjmp	.+148    	; 0x725a <hal_requestSpiChannel+0x2a2>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    71c6:	80 91 00 06 	lds	r24, 0x0600
    71ca:	8d 21       	and	r24, r13
    71cc:	09 f4       	brne	.+2      	; 0x71d0 <hal_requestSpiChannel+0x218>
    71ce:	52 c0       	rjmp	.+164    	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
    71d0:	e0 e0       	ldi	r30, 0x00	; 0
    71d2:	f6 e0       	ldi	r31, 0x06	; 6
    71d4:	48 c0       	rjmp	.+144    	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    71d6:	80 91 20 06 	lds	r24, 0x0620
    71da:	8d 21       	and	r24, r13
    71dc:	09 f4       	brne	.+2      	; 0x71e0 <hal_requestSpiChannel+0x228>
    71de:	4a c0       	rjmp	.+148    	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
    71e0:	e0 e2       	ldi	r30, 0x20	; 32
    71e2:	f6 e0       	ldi	r31, 0x06	; 6
    71e4:	40 c0       	rjmp	.+128    	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    71e6:	80 91 40 06 	lds	r24, 0x0640
    71ea:	8d 21       	and	r24, r13
    71ec:	09 f4       	brne	.+2      	; 0x71f0 <hal_requestSpiChannel+0x238>
    71ee:	42 c0       	rjmp	.+132    	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
    71f0:	e0 e4       	ldi	r30, 0x40	; 64
    71f2:	f6 e0       	ldi	r31, 0x06	; 6
    71f4:	38 c0       	rjmp	.+112    	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    71f6:	80 91 60 06 	lds	r24, 0x0660
    71fa:	8d 21       	and	r24, r13
    71fc:	09 f4       	brne	.+2      	; 0x7200 <hal_requestSpiChannel+0x248>
    71fe:	3a c0       	rjmp	.+116    	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
    7200:	e0 e6       	ldi	r30, 0x60	; 96
    7202:	f6 e0       	ldi	r31, 0x06	; 6
    7204:	30 c0       	rjmp	.+96     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    7206:	80 91 80 06 	lds	r24, 0x0680
    720a:	8d 21       	and	r24, r13
    720c:	99 f1       	breq	.+102    	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
    720e:	e0 e8       	ldi	r30, 0x80	; 128
    7210:	f6 e0       	ldi	r31, 0x06	; 6
    7212:	29 c0       	rjmp	.+82     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    7214:	80 91 a0 06 	lds	r24, 0x06A0
    7218:	8d 21       	and	r24, r13
    721a:	61 f1       	breq	.+88     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
    721c:	e0 ea       	ldi	r30, 0xA0	; 160
    721e:	f6 e0       	ldi	r31, 0x06	; 6
    7220:	22 c0       	rjmp	.+68     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    7222:	80 91 e0 06 	lds	r24, 0x06E0
    7226:	8d 21       	and	r24, r13
    7228:	29 f1       	breq	.+74     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
    722a:	e0 ee       	ldi	r30, 0xE0	; 224
    722c:	f6 e0       	ldi	r31, 0x06	; 6
    722e:	1b c0       	rjmp	.+54     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    7230:	80 91 00 07 	lds	r24, 0x0700
    7234:	8d 21       	and	r24, r13
    7236:	f1 f0       	breq	.+60     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
    7238:	e0 e0       	ldi	r30, 0x00	; 0
    723a:	f7 e0       	ldi	r31, 0x07	; 7
    723c:	14 c0       	rjmp	.+40     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    723e:	80 91 20 07 	lds	r24, 0x0720
    7242:	8d 21       	and	r24, r13
    7244:	b9 f0       	breq	.+46     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
    7246:	e0 e2       	ldi	r30, 0x20	; 32
    7248:	f7 e0       	ldi	r31, 0x07	; 7
    724a:	0d c0       	rjmp	.+26     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    724c:	80 91 c0 07 	lds	r24, 0x07C0
    7250:	8d 21       	and	r24, r13
    7252:	81 f0       	breq	.+32     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
    7254:	e0 ec       	ldi	r30, 0xC0	; 192
    7256:	f7 e0       	ldi	r31, 0x07	; 7
    7258:	06 c0       	rjmp	.+12     	; 0x7266 <hal_requestSpiChannel+0x2ae>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    725a:	80 91 e0 07 	lds	r24, 0x07E0
    725e:	8d 21       	and	r24, r13
    7260:	49 f0       	breq	.+18     	; 0x7274 <hal_requestSpiChannel+0x2bc>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
    7262:	e0 ee       	ldi	r30, 0xE0	; 224
    7264:	f7 e0       	ldi	r31, 0x07	; 7
    7266:	d5 82       	std	Z+5, r13	; 0x05
    7268:	05 c0       	rjmp	.+10     	; 0x7274 <hal_requestSpiChannel+0x2bc>
      }

   }/*End if( pt_spiChanHndl != NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    726a:	89 81       	ldd	r24, Y+1	; 0x01
    726c:	8f bf       	out	0x3f, r24	; 63
    726e:	2d ef       	ldi	r18, 0xFD	; 253
    7270:	3f ef       	ldi	r19, 0xFF	; 255
    7272:	06 c0       	rjmp	.+12     	; 0x7280 <hal_requestSpiChannel+0x2c8>
      return (t_SPIHNDL)SPI_NO_CONFIG;
   }

   HAL_END_CRITICAL();//Enable interrupts
    7274:	89 81       	ldd	r24, Y+1	; 0x01
    7276:	8f bf       	out	0x3f, r24	; 63

   return (t_SPIHNDL)t_linkHndl;
    7278:	20 91 be 22 	lds	r18, 0x22BE
    727c:	30 91 bf 22 	lds	r19, 0x22BF

}/*End hal_requestSpiChannel*/
    7280:	c9 01       	movw	r24, r18
    7282:	28 96       	adiw	r28, 0x08	; 8
    7284:	cd bf       	out	0x3d, r28	; 61
    7286:	de bf       	out	0x3e, r29	; 62
    7288:	cf 91       	pop	r28
    728a:	df 91       	pop	r29
    728c:	1f 91       	pop	r17
    728e:	0f 91       	pop	r16
    7290:	ff 90       	pop	r15
    7292:	ef 90       	pop	r14
    7294:	df 90       	pop	r13
    7296:	cf 90       	pop	r12
    7298:	bf 90       	pop	r11
    729a:	af 90       	pop	r10
    729c:	9f 90       	pop	r9
    729e:	8f 90       	pop	r8
    72a0:	08 95       	ret

000072a2 <hal_spiReadWrite>:
t_spiError hal_spiReadWrite( t_SPIHNDL t_handle,
                             bool b_enCs,
                             int8_t *pc_txBuffer,
                             int8_t *pc_rxBuffer,
                             uint16_t s_numBytes)
{
    72a2:	2f 92       	push	r2
    72a4:	3f 92       	push	r3
    72a6:	4f 92       	push	r4
    72a8:	5f 92       	push	r5
    72aa:	6f 92       	push	r6
    72ac:	7f 92       	push	r7
    72ae:	8f 92       	push	r8
    72b0:	9f 92       	push	r9
    72b2:	af 92       	push	r10
    72b4:	bf 92       	push	r11
    72b6:	cf 92       	push	r12
    72b8:	df 92       	push	r13
    72ba:	ef 92       	push	r14
    72bc:	ff 92       	push	r15
    72be:	0f 93       	push	r16
    72c0:	1f 93       	push	r17
    72c2:	df 93       	push	r29
    72c4:	cf 93       	push	r28
    72c6:	cd b7       	in	r28, 0x3d	; 61
    72c8:	de b7       	in	r29, 0x3e	; 62
    72ca:	66 97       	sbiw	r28, 0x16	; 22
    72cc:	cd bf       	out	0x3d, r28	; 61
    72ce:	de bf       	out	0x3e, r29	; 62
    72d0:	88 8b       	std	Y+16, r24	; 0x10
    72d2:	99 8b       	std	Y+17, r25	; 0x11
    72d4:	6a 8b       	std	Y+18, r22	; 0x12
    72d6:	4b 8b       	std	Y+19, r20	; 0x13
    72d8:	5c 8b       	std	Y+20, r21	; 0x14
    72da:	2d 8b       	std	Y+21, r18	; 0x15
    72dc:	3e 8b       	std	Y+22, r19	; 0x16
    72de:	18 01       	movw	r2, r16
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    72e0:	e8 89       	ldd	r30, Y+16	; 0x10
    72e2:	f9 89       	ldd	r31, Y+17	; 0x11
    72e4:	20 91 c5 20 	lds	r18, 0x20C5
    72e8:	30 91 c6 20 	lds	r19, 0x20C6
    72ec:	84 81       	ldd	r24, Z+4	; 0x04
    72ee:	95 81       	ldd	r25, Z+5	; 0x05
    72f0:	82 17       	cp	r24, r18
    72f2:	93 07       	cpc	r25, r19
    72f4:	11 f0       	breq	.+4      	; 0x72fa <hal_spiReadWrite+0x58>
    72f6:	8e ef       	ldi	r24, 0xFE	; 254
    72f8:	59 c1       	rjmp	.+690    	; 0x75ac <hal_spiReadWrite+0x30a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    72fa:	e8 89       	ldd	r30, Y+16	; 0x10
    72fc:	f9 89       	ldd	r31, Y+17	; 0x11
    72fe:	40 80       	ld	r4, Z
    7300:	51 80       	ldd	r5, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    7302:	d2 01       	movw	r26, r4
    7304:	1c 96       	adiw	r26, 0x0c	; 12
    7306:	6d 90       	ld	r6, X+
    7308:	7c 90       	ld	r7, X
    730a:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    730c:	8f b7       	in	r24, 0x3f	; 63
    730e:	89 83       	std	Y+1, r24	; 0x01
    7310:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    7312:	f3 01       	movw	r30, r6
    7314:	81 85       	ldd	r24, Z+9	; 0x09
    7316:	88 23       	and	r24, r24
    7318:	49 f0       	breq	.+18     	; 0x732c <hal_spiReadWrite+0x8a>
    731a:	82 85       	ldd	r24, Z+10	; 0x0a
    731c:	93 85       	ldd	r25, Z+11	; 0x0b
    731e:	84 15       	cp	r24, r4
    7320:	95 05       	cpc	r25, r5
    7322:	21 f0       	breq	.+8      	; 0x732c <hal_spiReadWrite+0x8a>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    7324:	89 81       	ldd	r24, Y+1	; 0x01
    7326:	8f bf       	out	0x3f, r24	; 63
    7328:	84 ef       	ldi	r24, 0xF4	; 244
    732a:	40 c1       	rjmp	.+640    	; 0x75ac <hal_spiReadWrite+0x30a>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    732c:	81 e0       	ldi	r24, 0x01	; 1
    732e:	d3 01       	movw	r26, r6
    7330:	19 96       	adiw	r26, 0x09	; 9
    7332:	8c 93       	st	X, r24
    7334:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    7336:	1a 96       	adiw	r26, 0x0a	; 10
    7338:	4d 92       	st	X+, r4
    733a:	5c 92       	st	X, r5
    733c:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    733e:	89 81       	ldd	r24, Y+1	; 0x01
    7340:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      pt_spiUserHndl->pc_txData   = pc_txBuffer;
    7342:	8b 89       	ldd	r24, Y+19	; 0x13
    7344:	9c 89       	ldd	r25, Y+20	; 0x14
    7346:	f2 01       	movw	r30, r4
    7348:	82 83       	std	Z+2, r24	; 0x02
    734a:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = pc_rxBuffer;
    734c:	ad 89       	ldd	r26, Y+21	; 0x15
    734e:	be 89       	ldd	r27, Y+22	; 0x16
    7350:	a4 83       	std	Z+4, r26	; 0x04
    7352:	b5 83       	std	Z+5, r27	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    7354:	26 82       	std	Z+6, r2	; 0x06
    7356:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_txDmaHndl > 0)
    7358:	f3 01       	movw	r30, r6
    735a:	86 85       	ldd	r24, Z+14	; 0x0e
    735c:	97 85       	ldd	r25, Z+15	; 0x0f
    735e:	07 80       	ldd	r0, Z+7	; 0x07
    7360:	f0 85       	ldd	r31, Z+8	; 0x08
    7362:	e0 2d       	mov	r30, r0
    7364:	18 16       	cp	r1, r24
    7366:	19 06       	cpc	r1, r25
    7368:	0c f0       	brlt	.+2      	; 0x736c <hal_spiReadWrite+0xca>
    736a:	87 c0       	rjmp	.+270    	; 0x747a <hal_spiReadWrite+0x1d8>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    736c:	11 82       	std	Z+1, r1	; 0x01

         switch( pt_spiChanHndl->t_id)
    736e:	d3 01       	movw	r26, r6
    7370:	8c 91       	ld	r24, X
    7372:	82 30       	cpi	r24, 0x02	; 2
    7374:	51 f0       	breq	.+20     	; 0x738a <hal_spiReadWrite+0xe8>
    7376:	83 30       	cpi	r24, 0x03	; 3
    7378:	59 f0       	breq	.+22     	; 0x7390 <hal_spiReadWrite+0xee>
    737a:	81 30       	cpi	r24, 0x01	; 1
    737c:	19 f4       	brne	.+6      	; 0x7384 <hal_spiReadWrite+0xe2>
    737e:	fa e6       	ldi	r31, 0x6A	; 106
    7380:	8f 2e       	mov	r8, r31
    7382:	08 c0       	rjmp	.+16     	; 0x7394 <hal_spiReadWrite+0xf2>
    7384:	ea e4       	ldi	r30, 0x4A	; 74
    7386:	8e 2e       	mov	r8, r30
    7388:	05 c0       	rjmp	.+10     	; 0x7394 <hal_spiReadWrite+0xf2>
    738a:	7a e8       	ldi	r23, 0x8A	; 138
    738c:	87 2e       	mov	r8, r23
    738e:	02 c0       	rjmp	.+4      	; 0x7394 <hal_spiReadWrite+0xf2>
               t_trigger = SPI2_TRANSFER_COMPLETE;
            break;

            case SPI_3:
               t_trigger = SPI3_TRANSFER_COMPLETE;
            break;
    7390:	6a ea       	ldi	r22, 0xAA	; 170
    7392:	86 2e       	mov	r8, r22
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7394:	f3 01       	movw	r30, r6
    7396:	26 81       	ldd	r18, Z+6	; 0x06
    7398:	22 23       	and	r18, r18
    739a:	29 f4       	brne	.+10     	; 0x73a6 <hal_spiReadWrite+0x104>
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
    739c:	6b 89       	ldd	r22, Y+19	; 0x13
    739e:	7c 89       	ldd	r23, Y+20	; 0x14
    73a0:	6f 5f       	subi	r22, 0xFF	; 255
    73a2:	7f 4f       	sbci	r23, 0xFF	; 255
    73a4:	02 c0       	rjmp	.+4      	; 0x73aa <hal_spiReadWrite+0x108>
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
    73a6:	6b 89       	ldd	r22, Y+19	; 0x13
    73a8:	7c 89       	ldd	r23, Y+20	; 0x14
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    73aa:	d3 01       	movw	r26, r6
    73ac:	17 96       	adiw	r26, 0x07	; 7
    73ae:	8d 91       	ld	r24, X+
    73b0:	9c 91       	ld	r25, X
    73b2:	18 97       	sbiw	r26, 0x08	; 8
    73b4:	03 96       	adiw	r24, 0x03	; 3
         t_chanConf.t_srcAddDir     = INCREMENT;
         t_chanConf.t_destAddDir    = FIXED;
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
         t_chanConf.t_destAddReload = NO_RELOAD;
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    73b6:	22 23       	and	r18, r18
    73b8:	11 f0       	breq	.+4      	; 0x73be <hal_spiReadWrite+0x11c>
    73ba:	a1 01       	movw	r20, r2
    73bc:	03 c0       	rjmp	.+6      	; 0x73c4 <hal_spiReadWrite+0x122>
            t_chanConf.s_blockSize     = s_numBytes - 1;
    73be:	a1 01       	movw	r20, r2
    73c0:	41 50       	subi	r20, 0x01	; 1
    73c2:	50 40       	sbci	r21, 0x00	; 0

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    73c4:	8c 83       	std	Y+4, r24	; 0x04
    73c6:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    73c8:	99 24       	eor	r9, r9
    73ca:	93 94       	inc	r9
    73cc:	9e 82       	std	Y+6, r9	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    73ce:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    73d0:	98 86       	std	Y+8, r9	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    73d2:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
            t_chanConf.s_blockSize     = s_numBytes - 1;
         else
            t_chanConf.s_blockSize     = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    73d4:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    73d6:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    73d8:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    73da:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    73dc:	f3 01       	movw	r30, r6
    73de:	86 85       	ldd	r24, Z+14	; 0x0e
    73e0:	97 85       	ldd	r25, Z+15	; 0x0f
    73e2:	24 2f       	mov	r18, r20
    73e4:	4a 87       	std	Y+10, r20	; 0x0a
    73e6:	5b 87       	std	Y+11, r21	; 0x0b
    73e8:	a6 2e       	mov	r10, r22
    73ea:	6a 83       	std	Y+2, r22	; 0x02
    73ec:	7b 83       	std	Y+3, r23	; 0x03
    73ee:	bb 80       	ldd	r11, Y+3	; 0x03
    73f0:	cc 80       	ldd	r12, Y+4	; 0x04
    73f2:	dd 80       	ldd	r13, Y+5	; 0x05
    73f4:	ee 24       	eor	r14, r14
    73f6:	e3 94       	inc	r14
    73f8:	ff 24       	eor	r15, r15
    73fa:	01 e0       	ldi	r16, 0x01	; 1
    73fc:	10 e0       	ldi	r17, 0x00	; 0
    73fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    7400:	40 e0       	ldi	r20, 0x00	; 0
    7402:	51 e0       	ldi	r21, 0x01	; 1
    7404:	68 2d       	mov	r22, r8
    7406:	70 e0       	ldi	r23, 0x00	; 0
    7408:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    740c:	d3 01       	movw	r26, r6
    740e:	1e 96       	adiw	r26, 0x0e	; 14
    7410:	8d 91       	ld	r24, X+
    7412:	9c 91       	ld	r25, X
    7414:	1f 97       	sbiw	r26, 0x0f	; 15
    7416:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    741a:	f3 01       	movw	r30, r6
    741c:	47 81       	ldd	r20, Z+7	; 0x07
    741e:	50 85       	ldd	r21, Z+8	; 0x08
    7420:	4d 5f       	subi	r20, 0xFD	; 253
    7422:	5f 4f       	sbci	r21, 0xFF	; 255
         t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    7424:	8d 89       	ldd	r24, Y+21	; 0x15
    7426:	9e 89       	ldd	r25, Y+22	; 0x16
    7428:	8c 83       	std	Y+4, r24	; 0x04
    742a:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    742c:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = INCREMENT;
    742e:	9f 82       	std	Y+7, r9	; 0x07
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    7430:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    7432:	99 86       	std	Y+9, r9	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    7434:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7436:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7438:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    743a:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    743c:	80 89       	ldd	r24, Z+16	; 0x10
    743e:	91 89       	ldd	r25, Z+17	; 0x11
    7440:	22 2d       	mov	r18, r2
    7442:	2a 86       	std	Y+10, r2	; 0x0a
    7444:	3b 86       	std	Y+11, r3	; 0x0b
    7446:	a4 2e       	mov	r10, r20
    7448:	4a 83       	std	Y+2, r20	; 0x02
    744a:	5b 83       	std	Y+3, r21	; 0x03
    744c:	bb 80       	ldd	r11, Y+3	; 0x03
    744e:	cc 80       	ldd	r12, Y+4	; 0x04
    7450:	dd 80       	ldd	r13, Y+5	; 0x05
    7452:	ee 24       	eor	r14, r14
    7454:	ff 24       	eor	r15, r15
    7456:	f3 94       	inc	r15
    7458:	00 e0       	ldi	r16, 0x00	; 0
    745a:	11 e0       	ldi	r17, 0x01	; 1
    745c:	3b 85       	ldd	r19, Y+11	; 0x0b
    745e:	40 e0       	ldi	r20, 0x00	; 0
    7460:	51 e0       	ldi	r21, 0x01	; 1
    7462:	68 2d       	mov	r22, r8
    7464:	70 e0       	ldi	r23, 0x00	; 0
    7466:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    746a:	d3 01       	movw	r26, r6
    746c:	50 96       	adiw	r26, 0x10	; 16
    746e:	8d 91       	ld	r24, X+
    7470:	9c 91       	ld	r25, X
    7472:	51 97       	sbiw	r26, 0x11	; 17
    7474:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>
    7478:	02 c0       	rjmp	.+4      	; 0x747e <hal_spiReadWrite+0x1dc>

      }/*End if( pt_spiChanHndl->t_txDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    747a:	83 e0       	ldi	r24, 0x03	; 3
    747c:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    747e:	f3 01       	movw	r30, r6
    7480:	86 81       	ldd	r24, Z+6	; 0x06
    7482:	88 23       	and	r24, r24
    7484:	09 f0       	breq	.+2      	; 0x7488 <hal_spiReadWrite+0x1e6>
    7486:	91 c0       	rjmp	.+290    	; 0x75aa <hal_spiReadWrite+0x308>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    7488:	d2 01       	movw	r26, r4
    748a:	18 96       	adiw	r26, 0x08	; 8
    748c:	1d 92       	st	X+, r1
    748e:	1c 92       	st	X, r1
    7490:	19 97       	sbiw	r26, 0x09	; 9
         pt_spiUserHndl->b_enCs = b_enCs;
    7492:	ea 89       	ldd	r30, Y+18	; 0x12
    7494:	50 96       	adiw	r26, 0x10	; 16
    7496:	ec 93       	st	X, r30
    7498:	50 97       	sbiw	r26, 0x10	; 16

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    749a:	ee 23       	and	r30, r30
    749c:	09 f4       	brne	.+2      	; 0x74a0 <hal_spiReadWrite+0x1fe>
    749e:	7c c0       	rjmp	.+248    	; 0x7598 <hal_spiReadWrite+0x2f6>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    74a0:	1b 96       	adiw	r26, 0x0b	; 11
    74a2:	9c 91       	ld	r25, X
    74a4:	1b 97       	sbiw	r26, 0x0b	; 11
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    74a6:	1a 96       	adiw	r26, 0x0a	; 10
    74a8:	ec 91       	ld	r30, X
    74aa:	e5 30       	cpi	r30, 0x05	; 5
    74ac:	09 f4       	brne	.+2      	; 0x74b0 <hal_spiReadWrite+0x20e>
    74ae:	4a c0       	rjmp	.+148    	; 0x7544 <hal_spiReadWrite+0x2a2>
    74b0:	e6 30       	cpi	r30, 0x06	; 6
    74b2:	80 f4       	brcc	.+32     	; 0x74d4 <hal_spiReadWrite+0x232>
    74b4:	e2 30       	cpi	r30, 0x02	; 2
    74b6:	81 f1       	breq	.+96     	; 0x7518 <hal_spiReadWrite+0x276>
    74b8:	e3 30       	cpi	r30, 0x03	; 3
    74ba:	30 f4       	brcc	.+12     	; 0x74c8 <hal_spiReadWrite+0x226>
    74bc:	ee 23       	and	r30, r30
    74be:	e1 f0       	breq	.+56     	; 0x74f8 <hal_spiReadWrite+0x256>
    74c0:	e1 30       	cpi	r30, 0x01	; 1
    74c2:	09 f0       	breq	.+2      	; 0x74c6 <hal_spiReadWrite+0x224>
    74c4:	69 c0       	rjmp	.+210    	; 0x7598 <hal_spiReadWrite+0x2f6>
    74c6:	20 c0       	rjmp	.+64     	; 0x7508 <hal_spiReadWrite+0x266>
    74c8:	e3 30       	cpi	r30, 0x03	; 3
    74ca:	71 f1       	breq	.+92     	; 0x7528 <hal_spiReadWrite+0x286>
    74cc:	e4 30       	cpi	r30, 0x04	; 4
    74ce:	09 f0       	breq	.+2      	; 0x74d2 <hal_spiReadWrite+0x230>
    74d0:	63 c0       	rjmp	.+198    	; 0x7598 <hal_spiReadWrite+0x2f6>
    74d2:	31 c0       	rjmp	.+98     	; 0x7536 <hal_spiReadWrite+0x294>
    74d4:	e8 30       	cpi	r30, 0x08	; 8
    74d6:	09 f4       	brne	.+2      	; 0x74da <hal_spiReadWrite+0x238>
    74d8:	4a c0       	rjmp	.+148    	; 0x756e <hal_spiReadWrite+0x2cc>
    74da:	e9 30       	cpi	r30, 0x09	; 9
    74dc:	30 f4       	brcc	.+12     	; 0x74ea <hal_spiReadWrite+0x248>
    74de:	e6 30       	cpi	r30, 0x06	; 6
    74e0:	c1 f1       	breq	.+112    	; 0x7552 <hal_spiReadWrite+0x2b0>
    74e2:	e7 30       	cpi	r30, 0x07	; 7
    74e4:	09 f0       	breq	.+2      	; 0x74e8 <hal_spiReadWrite+0x246>
    74e6:	58 c0       	rjmp	.+176    	; 0x7598 <hal_spiReadWrite+0x2f6>
    74e8:	3b c0       	rjmp	.+118    	; 0x7560 <hal_spiReadWrite+0x2be>
    74ea:	e9 30       	cpi	r30, 0x09	; 9
    74ec:	09 f4       	brne	.+2      	; 0x74f0 <hal_spiReadWrite+0x24e>
    74ee:	46 c0       	rjmp	.+140    	; 0x757c <hal_spiReadWrite+0x2da>
    74f0:	ea 30       	cpi	r30, 0x0A	; 10
    74f2:	09 f0       	breq	.+2      	; 0x74f6 <hal_spiReadWrite+0x254>
    74f4:	51 c0       	rjmp	.+162    	; 0x7598 <hal_spiReadWrite+0x2f6>
    74f6:	49 c0       	rjmp	.+146    	; 0x758a <hal_spiReadWrite+0x2e8>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    74f8:	80 91 00 06 	lds	r24, 0x0600
    74fc:	89 23       	and	r24, r25
    74fe:	09 f4       	brne	.+2      	; 0x7502 <hal_spiReadWrite+0x260>
    7500:	4b c0       	rjmp	.+150    	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    7502:	e0 e0       	ldi	r30, 0x00	; 0
    7504:	f6 e0       	ldi	r31, 0x06	; 6
    7506:	47 c0       	rjmp	.+142    	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    7508:	80 91 20 06 	lds	r24, 0x0620
    750c:	89 23       	and	r24, r25
    750e:	09 f4       	brne	.+2      	; 0x7512 <hal_spiReadWrite+0x270>
    7510:	43 c0       	rjmp	.+134    	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    7512:	e0 e2       	ldi	r30, 0x20	; 32
    7514:	f6 e0       	ldi	r31, 0x06	; 6
    7516:	3f c0       	rjmp	.+126    	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    7518:	80 91 40 06 	lds	r24, 0x0640
    751c:	89 23       	and	r24, r25
    751e:	09 f4       	brne	.+2      	; 0x7522 <hal_spiReadWrite+0x280>
    7520:	3b c0       	rjmp	.+118    	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    7522:	e0 e4       	ldi	r30, 0x40	; 64
    7524:	f6 e0       	ldi	r31, 0x06	; 6
    7526:	37 c0       	rjmp	.+110    	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    7528:	80 91 60 06 	lds	r24, 0x0660
    752c:	89 23       	and	r24, r25
    752e:	a1 f1       	breq	.+104    	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    7530:	e0 e6       	ldi	r30, 0x60	; 96
    7532:	f6 e0       	ldi	r31, 0x06	; 6
    7534:	30 c0       	rjmp	.+96     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    7536:	80 91 80 06 	lds	r24, 0x0680
    753a:	89 23       	and	r24, r25
    753c:	69 f1       	breq	.+90     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    753e:	e0 e8       	ldi	r30, 0x80	; 128
    7540:	f6 e0       	ldi	r31, 0x06	; 6
    7542:	29 c0       	rjmp	.+82     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    7544:	80 91 a0 06 	lds	r24, 0x06A0
    7548:	89 23       	and	r24, r25
    754a:	31 f1       	breq	.+76     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    754c:	e0 ea       	ldi	r30, 0xA0	; 160
    754e:	f6 e0       	ldi	r31, 0x06	; 6
    7550:	22 c0       	rjmp	.+68     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    7552:	80 91 e0 06 	lds	r24, 0x06E0
    7556:	89 23       	and	r24, r25
    7558:	f9 f0       	breq	.+62     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    755a:	e0 ee       	ldi	r30, 0xE0	; 224
    755c:	f6 e0       	ldi	r31, 0x06	; 6
    755e:	1b c0       	rjmp	.+54     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    7560:	80 91 00 07 	lds	r24, 0x0700
    7564:	89 23       	and	r24, r25
    7566:	c1 f0       	breq	.+48     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    7568:	e0 e0       	ldi	r30, 0x00	; 0
    756a:	f7 e0       	ldi	r31, 0x07	; 7
    756c:	14 c0       	rjmp	.+40     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    756e:	80 91 20 07 	lds	r24, 0x0720
    7572:	89 23       	and	r24, r25
    7574:	89 f0       	breq	.+34     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    7576:	e0 e2       	ldi	r30, 0x20	; 32
    7578:	f7 e0       	ldi	r31, 0x07	; 7
    757a:	0d c0       	rjmp	.+26     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    757c:	80 91 c0 07 	lds	r24, 0x07C0
    7580:	89 23       	and	r24, r25
    7582:	51 f0       	breq	.+20     	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    7584:	e0 ec       	ldi	r30, 0xC0	; 192
    7586:	f7 e0       	ldi	r31, 0x07	; 7
    7588:	06 c0       	rjmp	.+12     	; 0x7596 <hal_spiReadWrite+0x2f4>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    758a:	80 91 e0 07 	lds	r24, 0x07E0
    758e:	89 23       	and	r24, r25
    7590:	19 f0       	breq	.+6      	; 0x7598 <hal_spiReadWrite+0x2f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    7592:	e0 ee       	ldi	r30, 0xE0	; 224
    7594:	f7 e0       	ldi	r31, 0x07	; 7
    7596:	96 83       	std	Z+6, r25	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pc_txBuffer[0];
    7598:	d3 01       	movw	r26, r6
    759a:	17 96       	adiw	r26, 0x07	; 7
    759c:	ed 91       	ld	r30, X+
    759e:	fc 91       	ld	r31, X
    75a0:	18 97       	sbiw	r26, 0x08	; 8
    75a2:	ab 89       	ldd	r26, Y+19	; 0x13
    75a4:	bc 89       	ldd	r27, Y+20	; 0x14
    75a6:	8c 91       	ld	r24, X
    75a8:	83 83       	std	Z+3, r24	; 0x03
    75aa:	80 e0       	ldi	r24, 0x00	; 0

   }

   return SPI_PASSED;

}/*End hal_spiReadWrite*/
    75ac:	66 96       	adiw	r28, 0x16	; 22
    75ae:	cd bf       	out	0x3d, r28	; 61
    75b0:	de bf       	out	0x3e, r29	; 62
    75b2:	cf 91       	pop	r28
    75b4:	df 91       	pop	r29
    75b6:	1f 91       	pop	r17
    75b8:	0f 91       	pop	r16
    75ba:	ff 90       	pop	r15
    75bc:	ef 90       	pop	r14
    75be:	df 90       	pop	r13
    75c0:	cf 90       	pop	r12
    75c2:	bf 90       	pop	r11
    75c4:	af 90       	pop	r10
    75c6:	9f 90       	pop	r9
    75c8:	8f 90       	pop	r8
    75ca:	7f 90       	pop	r7
    75cc:	6f 90       	pop	r6
    75ce:	5f 90       	pop	r5
    75d0:	4f 90       	pop	r4
    75d2:	3f 90       	pop	r3
    75d4:	2f 90       	pop	r2
    75d6:	08 95       	ret

000075d8 <hal_spiWriteBlock>:

t_spiError hal_spiWriteBlock( t_SPIHNDL t_handle,
                              bool b_enCs,
                              int8_t *pc_txBuffer,
                              uint16_t s_numBytes)
{
    75d8:	2f 92       	push	r2
    75da:	3f 92       	push	r3
    75dc:	4f 92       	push	r4
    75de:	5f 92       	push	r5
    75e0:	6f 92       	push	r6
    75e2:	7f 92       	push	r7
    75e4:	8f 92       	push	r8
    75e6:	9f 92       	push	r9
    75e8:	af 92       	push	r10
    75ea:	bf 92       	push	r11
    75ec:	cf 92       	push	r12
    75ee:	df 92       	push	r13
    75f0:	ef 92       	push	r14
    75f2:	ff 92       	push	r15
    75f4:	0f 93       	push	r16
    75f6:	1f 93       	push	r17
    75f8:	df 93       	push	r29
    75fa:	cf 93       	push	r28
    75fc:	cd b7       	in	r28, 0x3d	; 61
    75fe:	de b7       	in	r29, 0x3e	; 62
    7600:	64 97       	sbiw	r28, 0x14	; 20
    7602:	cd bf       	out	0x3d, r28	; 61
    7604:	de bf       	out	0x3e, r29	; 62
    7606:	88 8b       	std	Y+16, r24	; 0x10
    7608:	99 8b       	std	Y+17, r25	; 0x11
    760a:	6a 8b       	std	Y+18, r22	; 0x12
    760c:	4b 8b       	std	Y+19, r20	; 0x13
    760e:	5c 8b       	std	Y+20, r21	; 0x14
    7610:	19 01       	movw	r2, r18
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    7612:	e8 89       	ldd	r30, Y+16	; 0x10
    7614:	f9 89       	ldd	r31, Y+17	; 0x11
    7616:	20 91 c5 20 	lds	r18, 0x20C5
    761a:	30 91 c6 20 	lds	r19, 0x20C6
    761e:	84 81       	ldd	r24, Z+4	; 0x04
    7620:	95 81       	ldd	r25, Z+5	; 0x05
    7622:	82 17       	cp	r24, r18
    7624:	93 07       	cpc	r25, r19
    7626:	11 f0       	breq	.+4      	; 0x762c <hal_spiWriteBlock+0x54>
    7628:	8e ef       	ldi	r24, 0xFE	; 254
    762a:	5f c1       	rjmp	.+702    	; 0x78ea <hal_spiWriteBlock+0x312>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    762c:	e8 89       	ldd	r30, Y+16	; 0x10
    762e:	f9 89       	ldd	r31, Y+17	; 0x11
    7630:	40 80       	ld	r4, Z
    7632:	51 80       	ldd	r5, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    7634:	d2 01       	movw	r26, r4
    7636:	1c 96       	adiw	r26, 0x0c	; 12
    7638:	6d 90       	ld	r6, X+
    763a:	7c 90       	ld	r7, X
    763c:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    763e:	8f b7       	in	r24, 0x3f	; 63
    7640:	89 83       	std	Y+1, r24	; 0x01
    7642:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    7644:	f3 01       	movw	r30, r6
    7646:	81 85       	ldd	r24, Z+9	; 0x09
    7648:	88 23       	and	r24, r24
    764a:	49 f0       	breq	.+18     	; 0x765e <hal_spiWriteBlock+0x86>
    764c:	82 85       	ldd	r24, Z+10	; 0x0a
    764e:	93 85       	ldd	r25, Z+11	; 0x0b
    7650:	84 15       	cp	r24, r4
    7652:	95 05       	cpc	r25, r5
    7654:	21 f0       	breq	.+8      	; 0x765e <hal_spiWriteBlock+0x86>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    7656:	89 81       	ldd	r24, Y+1	; 0x01
    7658:	8f bf       	out	0x3f, r24	; 63
    765a:	84 ef       	ldi	r24, 0xF4	; 244
    765c:	46 c1       	rjmp	.+652    	; 0x78ea <hal_spiWriteBlock+0x312>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    765e:	81 e0       	ldi	r24, 0x01	; 1
    7660:	d3 01       	movw	r26, r6
    7662:	19 96       	adiw	r26, 0x09	; 9
    7664:	8c 93       	st	X, r24
    7666:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    7668:	1a 96       	adiw	r26, 0x0a	; 10
    766a:	4d 92       	st	X+, r4
    766c:	5c 92       	st	X, r5
    766e:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    7670:	89 81       	ldd	r24, Y+1	; 0x01
    7672:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      gc_tempBuf = 0xFF;
    7674:	8f ef       	ldi	r24, 0xFF	; 255
    7676:	80 93 c7 20 	sts	0x20C7, r24
      pt_spiUserHndl->pc_txData   = pc_txBuffer;
    767a:	8b 89       	ldd	r24, Y+19	; 0x13
    767c:	9c 89       	ldd	r25, Y+20	; 0x14
    767e:	f2 01       	movw	r30, r4
    7680:	82 83       	std	Z+2, r24	; 0x02
    7682:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = (int8_t *)&gc_tempBuf;
    7684:	87 ec       	ldi	r24, 0xC7	; 199
    7686:	90 e2       	ldi	r25, 0x20	; 32
    7688:	84 83       	std	Z+4, r24	; 0x04
    768a:	95 83       	std	Z+5, r25	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    768c:	26 82       	std	Z+6, r2	; 0x06
    768e:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_txDmaHndl > 0)
    7690:	1e 96       	adiw	r26, 0x0e	; 14
    7692:	8d 91       	ld	r24, X+
    7694:	9c 91       	ld	r25, X
    7696:	1f 97       	sbiw	r26, 0x0f	; 15
    7698:	17 96       	adiw	r26, 0x07	; 7
    769a:	ed 91       	ld	r30, X+
    769c:	fc 91       	ld	r31, X
    769e:	18 97       	sbiw	r26, 0x08	; 8
    76a0:	18 16       	cp	r1, r24
    76a2:	19 06       	cpc	r1, r25
    76a4:	0c f0       	brlt	.+2      	; 0x76a8 <hal_spiWriteBlock+0xd0>
    76a6:	88 c0       	rjmp	.+272    	; 0x77b8 <hal_spiWriteBlock+0x1e0>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    76a8:	11 82       	std	Z+1, r1	; 0x01

         switch( pt_spiChanHndl->t_id)
    76aa:	8c 91       	ld	r24, X
    76ac:	82 30       	cpi	r24, 0x02	; 2
    76ae:	51 f0       	breq	.+20     	; 0x76c4 <hal_spiWriteBlock+0xec>
    76b0:	83 30       	cpi	r24, 0x03	; 3
    76b2:	59 f0       	breq	.+22     	; 0x76ca <hal_spiWriteBlock+0xf2>
    76b4:	81 30       	cpi	r24, 0x01	; 1
    76b6:	19 f4       	brne	.+6      	; 0x76be <hal_spiWriteBlock+0xe6>
    76b8:	0a e6       	ldi	r16, 0x6A	; 106
    76ba:	80 2e       	mov	r8, r16
    76bc:	08 c0       	rjmp	.+16     	; 0x76ce <hal_spiWriteBlock+0xf6>
    76be:	1a e4       	ldi	r17, 0x4A	; 74
    76c0:	81 2e       	mov	r8, r17
    76c2:	05 c0       	rjmp	.+10     	; 0x76ce <hal_spiWriteBlock+0xf6>
    76c4:	ba e8       	ldi	r27, 0x8A	; 138
    76c6:	8b 2e       	mov	r8, r27
    76c8:	02 c0       	rjmp	.+4      	; 0x76ce <hal_spiWriteBlock+0xf6>
               t_trigger = SPI2_TRANSFER_COMPLETE;
            break;

            case SPI_3:
               t_trigger = SPI3_TRANSFER_COMPLETE;
            break;
    76ca:	aa ea       	ldi	r26, 0xAA	; 170
    76cc:	8a 2e       	mov	r8, r26
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    76ce:	d3 01       	movw	r26, r6
    76d0:	16 96       	adiw	r26, 0x06	; 6
    76d2:	2c 91       	ld	r18, X
    76d4:	22 23       	and	r18, r18
    76d6:	29 f4       	brne	.+10     	; 0x76e2 <hal_spiWriteBlock+0x10a>
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
    76d8:	6b 89       	ldd	r22, Y+19	; 0x13
    76da:	7c 89       	ldd	r23, Y+20	; 0x14
    76dc:	6f 5f       	subi	r22, 0xFF	; 255
    76de:	7f 4f       	sbci	r23, 0xFF	; 255
    76e0:	02 c0       	rjmp	.+4      	; 0x76e6 <hal_spiWriteBlock+0x10e>
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
    76e2:	6b 89       	ldd	r22, Y+19	; 0x13
    76e4:	7c 89       	ldd	r23, Y+20	; 0x14
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    76e6:	f3 01       	movw	r30, r6
    76e8:	87 81       	ldd	r24, Z+7	; 0x07
    76ea:	90 85       	ldd	r25, Z+8	; 0x08
    76ec:	03 96       	adiw	r24, 0x03	; 3
         t_chanConf.t_srcAddDir     = INCREMENT;
         t_chanConf.t_destAddDir    = FIXED;
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
         t_chanConf.t_destAddReload = NO_RELOAD;
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    76ee:	22 23       	and	r18, r18
    76f0:	11 f0       	breq	.+4      	; 0x76f6 <hal_spiWriteBlock+0x11e>
    76f2:	a1 01       	movw	r20, r2
    76f4:	03 c0       	rjmp	.+6      	; 0x76fc <hal_spiWriteBlock+0x124>
            t_chanConf.s_blockSize     = s_numBytes - 1;
    76f6:	a1 01       	movw	r20, r2
    76f8:	41 50       	subi	r20, 0x01	; 1
    76fa:	50 40       	sbci	r21, 0x00	; 0

         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[1];
         else
            t_chanConf.pi_srcAddress   = (uint32_t *)&pc_txBuffer[0];
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    76fc:	8c 83       	std	Y+4, r24	; 0x04
    76fe:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    7700:	99 24       	eor	r9, r9
    7702:	93 94       	inc	r9
    7704:	9e 82       	std	Y+6, r9	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    7706:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    7708:	98 86       	std	Y+8, r9	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    770a:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
            t_chanConf.s_blockSize     = s_numBytes - 1;
         else
            t_chanConf.s_blockSize     = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    770c:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    770e:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7710:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7712:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    7714:	d3 01       	movw	r26, r6
    7716:	1e 96       	adiw	r26, 0x0e	; 14
    7718:	8d 91       	ld	r24, X+
    771a:	9c 91       	ld	r25, X
    771c:	1f 97       	sbiw	r26, 0x0f	; 15
    771e:	24 2f       	mov	r18, r20
    7720:	4a 87       	std	Y+10, r20	; 0x0a
    7722:	5b 87       	std	Y+11, r21	; 0x0b
    7724:	a6 2e       	mov	r10, r22
    7726:	6a 83       	std	Y+2, r22	; 0x02
    7728:	7b 83       	std	Y+3, r23	; 0x03
    772a:	bb 80       	ldd	r11, Y+3	; 0x03
    772c:	cc 80       	ldd	r12, Y+4	; 0x04
    772e:	dd 80       	ldd	r13, Y+5	; 0x05
    7730:	ee 24       	eor	r14, r14
    7732:	e3 94       	inc	r14
    7734:	ff 24       	eor	r15, r15
    7736:	01 e0       	ldi	r16, 0x01	; 1
    7738:	10 e0       	ldi	r17, 0x00	; 0
    773a:	3b 85       	ldd	r19, Y+11	; 0x0b
    773c:	40 e0       	ldi	r20, 0x00	; 0
    773e:	51 e0       	ldi	r21, 0x01	; 1
    7740:	68 2d       	mov	r22, r8
    7742:	70 e0       	ldi	r23, 0x00	; 0
    7744:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    7748:	f3 01       	movw	r30, r6
    774a:	86 85       	ldd	r24, Z+14	; 0x0e
    774c:	97 85       	ldd	r25, Z+15	; 0x0f
    774e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    7752:	d3 01       	movw	r26, r6
    7754:	17 96       	adiw	r26, 0x07	; 7
    7756:	4d 91       	ld	r20, X+
    7758:	5c 91       	ld	r21, X
    775a:	18 97       	sbiw	r26, 0x08	; 8
    775c:	4d 5f       	subi	r20, 0xFD	; 253
    775e:	5f 4f       	sbci	r21, 0xFF	; 255
         t_chanConf.pi_destAddress  = (uint32_t *)pt_spiUserHndl->pc_rxData;
    7760:	f2 01       	movw	r30, r4
    7762:	84 81       	ldd	r24, Z+4	; 0x04
    7764:	95 81       	ldd	r25, Z+5	; 0x05
    7766:	8c 83       	std	Y+4, r24	; 0x04
    7768:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    776a:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    776c:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    776e:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    7770:	99 86       	std	Y+9, r9	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    7772:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7774:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7776:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7778:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    777a:	50 96       	adiw	r26, 0x10	; 16
    777c:	8d 91       	ld	r24, X+
    777e:	9c 91       	ld	r25, X
    7780:	51 97       	sbiw	r26, 0x11	; 17
    7782:	22 2d       	mov	r18, r2
    7784:	2a 86       	std	Y+10, r2	; 0x0a
    7786:	3b 86       	std	Y+11, r3	; 0x0b
    7788:	a4 2e       	mov	r10, r20
    778a:	4a 83       	std	Y+2, r20	; 0x02
    778c:	5b 83       	std	Y+3, r21	; 0x03
    778e:	bb 80       	ldd	r11, Y+3	; 0x03
    7790:	cc 80       	ldd	r12, Y+4	; 0x04
    7792:	dd 80       	ldd	r13, Y+5	; 0x05
    7794:	ee 24       	eor	r14, r14
    7796:	00 e0       	ldi	r16, 0x00	; 0
    7798:	11 e0       	ldi	r17, 0x01	; 1
    779a:	3b 85       	ldd	r19, Y+11	; 0x0b
    779c:	40 e0       	ldi	r20, 0x00	; 0
    779e:	51 e0       	ldi	r21, 0x01	; 1
    77a0:	68 2d       	mov	r22, r8
    77a2:	70 e0       	ldi	r23, 0x00	; 0
    77a4:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    77a8:	d3 01       	movw	r26, r6
    77aa:	50 96       	adiw	r26, 0x10	; 16
    77ac:	8d 91       	ld	r24, X+
    77ae:	9c 91       	ld	r25, X
    77b0:	51 97       	sbiw	r26, 0x11	; 17
    77b2:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>
    77b6:	02 c0       	rjmp	.+4      	; 0x77bc <hal_spiWriteBlock+0x1e4>

      }/*End if( pt_spiChanHndl->t_txDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    77b8:	83 e0       	ldi	r24, 0x03	; 3
    77ba:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    77bc:	f3 01       	movw	r30, r6
    77be:	86 81       	ldd	r24, Z+6	; 0x06
    77c0:	88 23       	and	r24, r24
    77c2:	09 f0       	breq	.+2      	; 0x77c6 <hal_spiWriteBlock+0x1ee>
    77c4:	91 c0       	rjmp	.+290    	; 0x78e8 <hal_spiWriteBlock+0x310>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    77c6:	d2 01       	movw	r26, r4
    77c8:	18 96       	adiw	r26, 0x08	; 8
    77ca:	1d 92       	st	X+, r1
    77cc:	1c 92       	st	X, r1
    77ce:	19 97       	sbiw	r26, 0x09	; 9
         pt_spiUserHndl->b_enCs = b_enCs;
    77d0:	ea 89       	ldd	r30, Y+18	; 0x12
    77d2:	50 96       	adiw	r26, 0x10	; 16
    77d4:	ec 93       	st	X, r30
    77d6:	50 97       	sbiw	r26, 0x10	; 16

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    77d8:	ee 23       	and	r30, r30
    77da:	09 f4       	brne	.+2      	; 0x77de <hal_spiWriteBlock+0x206>
    77dc:	7c c0       	rjmp	.+248    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    77de:	1b 96       	adiw	r26, 0x0b	; 11
    77e0:	9c 91       	ld	r25, X
    77e2:	1b 97       	sbiw	r26, 0x0b	; 11
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    77e4:	1a 96       	adiw	r26, 0x0a	; 10
    77e6:	ec 91       	ld	r30, X
    77e8:	e5 30       	cpi	r30, 0x05	; 5
    77ea:	09 f4       	brne	.+2      	; 0x77ee <hal_spiWriteBlock+0x216>
    77ec:	4a c0       	rjmp	.+148    	; 0x7882 <hal_spiWriteBlock+0x2aa>
    77ee:	e6 30       	cpi	r30, 0x06	; 6
    77f0:	80 f4       	brcc	.+32     	; 0x7812 <hal_spiWriteBlock+0x23a>
    77f2:	e2 30       	cpi	r30, 0x02	; 2
    77f4:	81 f1       	breq	.+96     	; 0x7856 <hal_spiWriteBlock+0x27e>
    77f6:	e3 30       	cpi	r30, 0x03	; 3
    77f8:	30 f4       	brcc	.+12     	; 0x7806 <hal_spiWriteBlock+0x22e>
    77fa:	ee 23       	and	r30, r30
    77fc:	e1 f0       	breq	.+56     	; 0x7836 <hal_spiWriteBlock+0x25e>
    77fe:	e1 30       	cpi	r30, 0x01	; 1
    7800:	09 f0       	breq	.+2      	; 0x7804 <hal_spiWriteBlock+0x22c>
    7802:	69 c0       	rjmp	.+210    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
    7804:	20 c0       	rjmp	.+64     	; 0x7846 <hal_spiWriteBlock+0x26e>
    7806:	e3 30       	cpi	r30, 0x03	; 3
    7808:	71 f1       	breq	.+92     	; 0x7866 <hal_spiWriteBlock+0x28e>
    780a:	e4 30       	cpi	r30, 0x04	; 4
    780c:	09 f0       	breq	.+2      	; 0x7810 <hal_spiWriteBlock+0x238>
    780e:	63 c0       	rjmp	.+198    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
    7810:	31 c0       	rjmp	.+98     	; 0x7874 <hal_spiWriteBlock+0x29c>
    7812:	e8 30       	cpi	r30, 0x08	; 8
    7814:	09 f4       	brne	.+2      	; 0x7818 <hal_spiWriteBlock+0x240>
    7816:	4a c0       	rjmp	.+148    	; 0x78ac <hal_spiWriteBlock+0x2d4>
    7818:	e9 30       	cpi	r30, 0x09	; 9
    781a:	30 f4       	brcc	.+12     	; 0x7828 <hal_spiWriteBlock+0x250>
    781c:	e6 30       	cpi	r30, 0x06	; 6
    781e:	c1 f1       	breq	.+112    	; 0x7890 <hal_spiWriteBlock+0x2b8>
    7820:	e7 30       	cpi	r30, 0x07	; 7
    7822:	09 f0       	breq	.+2      	; 0x7826 <hal_spiWriteBlock+0x24e>
    7824:	58 c0       	rjmp	.+176    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
    7826:	3b c0       	rjmp	.+118    	; 0x789e <hal_spiWriteBlock+0x2c6>
    7828:	e9 30       	cpi	r30, 0x09	; 9
    782a:	09 f4       	brne	.+2      	; 0x782e <hal_spiWriteBlock+0x256>
    782c:	46 c0       	rjmp	.+140    	; 0x78ba <hal_spiWriteBlock+0x2e2>
    782e:	ea 30       	cpi	r30, 0x0A	; 10
    7830:	09 f0       	breq	.+2      	; 0x7834 <hal_spiWriteBlock+0x25c>
    7832:	51 c0       	rjmp	.+162    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
    7834:	49 c0       	rjmp	.+146    	; 0x78c8 <hal_spiWriteBlock+0x2f0>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    7836:	80 91 00 06 	lds	r24, 0x0600
    783a:	89 23       	and	r24, r25
    783c:	09 f4       	brne	.+2      	; 0x7840 <hal_spiWriteBlock+0x268>
    783e:	4b c0       	rjmp	.+150    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    7840:	e0 e0       	ldi	r30, 0x00	; 0
    7842:	f6 e0       	ldi	r31, 0x06	; 6
    7844:	47 c0       	rjmp	.+142    	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    7846:	80 91 20 06 	lds	r24, 0x0620
    784a:	89 23       	and	r24, r25
    784c:	09 f4       	brne	.+2      	; 0x7850 <hal_spiWriteBlock+0x278>
    784e:	43 c0       	rjmp	.+134    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    7850:	e0 e2       	ldi	r30, 0x20	; 32
    7852:	f6 e0       	ldi	r31, 0x06	; 6
    7854:	3f c0       	rjmp	.+126    	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    7856:	80 91 40 06 	lds	r24, 0x0640
    785a:	89 23       	and	r24, r25
    785c:	09 f4       	brne	.+2      	; 0x7860 <hal_spiWriteBlock+0x288>
    785e:	3b c0       	rjmp	.+118    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    7860:	e0 e4       	ldi	r30, 0x40	; 64
    7862:	f6 e0       	ldi	r31, 0x06	; 6
    7864:	37 c0       	rjmp	.+110    	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    7866:	80 91 60 06 	lds	r24, 0x0660
    786a:	89 23       	and	r24, r25
    786c:	a1 f1       	breq	.+104    	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    786e:	e0 e6       	ldi	r30, 0x60	; 96
    7870:	f6 e0       	ldi	r31, 0x06	; 6
    7872:	30 c0       	rjmp	.+96     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    7874:	80 91 80 06 	lds	r24, 0x0680
    7878:	89 23       	and	r24, r25
    787a:	69 f1       	breq	.+90     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    787c:	e0 e8       	ldi	r30, 0x80	; 128
    787e:	f6 e0       	ldi	r31, 0x06	; 6
    7880:	29 c0       	rjmp	.+82     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    7882:	80 91 a0 06 	lds	r24, 0x06A0
    7886:	89 23       	and	r24, r25
    7888:	31 f1       	breq	.+76     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    788a:	e0 ea       	ldi	r30, 0xA0	; 160
    788c:	f6 e0       	ldi	r31, 0x06	; 6
    788e:	22 c0       	rjmp	.+68     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    7890:	80 91 e0 06 	lds	r24, 0x06E0
    7894:	89 23       	and	r24, r25
    7896:	f9 f0       	breq	.+62     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    7898:	e0 ee       	ldi	r30, 0xE0	; 224
    789a:	f6 e0       	ldi	r31, 0x06	; 6
    789c:	1b c0       	rjmp	.+54     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    789e:	80 91 00 07 	lds	r24, 0x0700
    78a2:	89 23       	and	r24, r25
    78a4:	c1 f0       	breq	.+48     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    78a6:	e0 e0       	ldi	r30, 0x00	; 0
    78a8:	f7 e0       	ldi	r31, 0x07	; 7
    78aa:	14 c0       	rjmp	.+40     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    78ac:	80 91 20 07 	lds	r24, 0x0720
    78b0:	89 23       	and	r24, r25
    78b2:	89 f0       	breq	.+34     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    78b4:	e0 e2       	ldi	r30, 0x20	; 32
    78b6:	f7 e0       	ldi	r31, 0x07	; 7
    78b8:	0d c0       	rjmp	.+26     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    78ba:	80 91 c0 07 	lds	r24, 0x07C0
    78be:	89 23       	and	r24, r25
    78c0:	51 f0       	breq	.+20     	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    78c2:	e0 ec       	ldi	r30, 0xC0	; 192
    78c4:	f7 e0       	ldi	r31, 0x07	; 7
    78c6:	06 c0       	rjmp	.+12     	; 0x78d4 <hal_spiWriteBlock+0x2fc>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    78c8:	80 91 e0 07 	lds	r24, 0x07E0
    78cc:	89 23       	and	r24, r25
    78ce:	19 f0       	breq	.+6      	; 0x78d6 <hal_spiWriteBlock+0x2fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    78d0:	e0 ee       	ldi	r30, 0xE0	; 224
    78d2:	f7 e0       	ldi	r31, 0x07	; 7
    78d4:	96 83       	std	Z+6, r25	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pc_txBuffer[0];
    78d6:	d3 01       	movw	r26, r6
    78d8:	17 96       	adiw	r26, 0x07	; 7
    78da:	ed 91       	ld	r30, X+
    78dc:	fc 91       	ld	r31, X
    78de:	18 97       	sbiw	r26, 0x08	; 8
    78e0:	ab 89       	ldd	r26, Y+19	; 0x13
    78e2:	bc 89       	ldd	r27, Y+20	; 0x14
    78e4:	8c 91       	ld	r24, X
    78e6:	83 83       	std	Z+3, r24	; 0x03
    78e8:	80 e0       	ldi	r24, 0x00	; 0

   }

   return SPI_PASSED;

}/*End hal_spiWriteBlock*/
    78ea:	64 96       	adiw	r28, 0x14	; 20
    78ec:	cd bf       	out	0x3d, r28	; 61
    78ee:	de bf       	out	0x3e, r29	; 62
    78f0:	cf 91       	pop	r28
    78f2:	df 91       	pop	r29
    78f4:	1f 91       	pop	r17
    78f6:	0f 91       	pop	r16
    78f8:	ff 90       	pop	r15
    78fa:	ef 90       	pop	r14
    78fc:	df 90       	pop	r13
    78fe:	cf 90       	pop	r12
    7900:	bf 90       	pop	r11
    7902:	af 90       	pop	r10
    7904:	9f 90       	pop	r9
    7906:	8f 90       	pop	r8
    7908:	7f 90       	pop	r7
    790a:	6f 90       	pop	r6
    790c:	5f 90       	pop	r5
    790e:	4f 90       	pop	r4
    7910:	3f 90       	pop	r3
    7912:	2f 90       	pop	r2
    7914:	08 95       	ret

00007916 <hal_spiReadBlock>:

t_spiError hal_spiReadBlock( t_SPIHNDL t_handle,
                             bool b_enCs,
                             int8_t *pc_rxBuffer,
                             uint16_t s_numBytes)
{
    7916:	2f 92       	push	r2
    7918:	3f 92       	push	r3
    791a:	4f 92       	push	r4
    791c:	5f 92       	push	r5
    791e:	6f 92       	push	r6
    7920:	7f 92       	push	r7
    7922:	8f 92       	push	r8
    7924:	9f 92       	push	r9
    7926:	af 92       	push	r10
    7928:	bf 92       	push	r11
    792a:	cf 92       	push	r12
    792c:	df 92       	push	r13
    792e:	ef 92       	push	r14
    7930:	ff 92       	push	r15
    7932:	0f 93       	push	r16
    7934:	1f 93       	push	r17
    7936:	df 93       	push	r29
    7938:	cf 93       	push	r28
    793a:	cd b7       	in	r28, 0x3d	; 61
    793c:	de b7       	in	r29, 0x3e	; 62
    793e:	64 97       	sbiw	r28, 0x14	; 20
    7940:	cd bf       	out	0x3d, r28	; 61
    7942:	de bf       	out	0x3e, r29	; 62
    7944:	88 8b       	std	Y+16, r24	; 0x10
    7946:	99 8b       	std	Y+17, r25	; 0x11
    7948:	6a 8b       	std	Y+18, r22	; 0x12
    794a:	4b 8b       	std	Y+19, r20	; 0x13
    794c:	5c 8b       	std	Y+20, r21	; 0x14
    794e:	19 01       	movw	r2, r18
   t_spiUserHndl *pt_spiUserHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a spi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_spiUserHndlList) ==
    7950:	e8 89       	ldd	r30, Y+16	; 0x10
    7952:	f9 89       	ldd	r31, Y+17	; 0x11
    7954:	20 91 c5 20 	lds	r18, 0x20C5
    7958:	30 91 c6 20 	lds	r19, 0x20C6
    795c:	84 81       	ldd	r24, Z+4	; 0x04
    795e:	95 81       	ldd	r25, Z+5	; 0x05
    7960:	82 17       	cp	r24, r18
    7962:	93 07       	cpc	r25, r19
    7964:	11 f0       	breq	.+4      	; 0x796a <hal_spiReadBlock+0x54>
    7966:	8e ef       	ldi	r24, 0xFE	; 254
    7968:	6b c1       	rjmp	.+726    	; 0x7c40 <hal_spiReadBlock+0x32a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the spi
    * user information is being stored.
    *------------------------------------------------------------------------*/
   pt_spiUserHndl = (t_spiUserHndl *)
    796a:	e8 89       	ldd	r30, Y+16	; 0x10
    796c:	f9 89       	ldd	r31, Y+17	; 0x11
    796e:	40 80       	ld	r4, Z
    7970:	51 80       	ldd	r5, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

   /*------------------------------------------------------------------------*
    * Grab the module associated with this user.
    *------------------------------------------------------------------------*/
   pt_spiChanHndl = pt_spiUserHndl->pt_spiChanHndl;
    7972:	d2 01       	movw	r26, r4
    7974:	1c 96       	adiw	r26, 0x0c	; 12
    7976:	6d 90       	ld	r6, X+
    7978:	7c 90       	ld	r7, X
    797a:	1d 97       	sbiw	r26, 0x0d	; 13

   /*------------------------------------------------------------------------*
    * Mutual exclusion - operations being performed on global variables.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    797c:	8f b7       	in	r24, 0x3f	; 63
    797e:	89 83       	std	Y+1, r24	; 0x01
    7980:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is there a current transaction in progress by another user?
    *------------------------------------------------------------------------*/
   if( (pt_spiChanHndl->b_busLocked == true) &&
    7982:	f3 01       	movw	r30, r6
    7984:	81 85       	ldd	r24, Z+9	; 0x09
    7986:	88 23       	and	r24, r24
    7988:	49 f0       	breq	.+18     	; 0x799c <hal_spiReadBlock+0x86>
    798a:	82 85       	ldd	r24, Z+10	; 0x0a
    798c:	93 85       	ldd	r25, Z+11	; 0x0b
    798e:	84 15       	cp	r24, r4
    7990:	95 05       	cpc	r25, r5
    7992:	21 f0       	breq	.+8      	; 0x799c <hal_spiReadBlock+0x86>
       (pt_spiChanHndl->pt_activeUser != pt_spiUserHndl))
   {
      HAL_END_CRITICAL();//Enable interrupts
    7994:	89 81       	ldd	r24, Y+1	; 0x01
    7996:	8f bf       	out	0x3f, r24	; 63
    7998:	84 ef       	ldi	r24, 0xF4	; 244
    799a:	52 c1       	rjmp	.+676    	; 0x7c40 <hal_spiReadBlock+0x32a>
   else /*No*/
   {
      /*---------------------------------------------------------------------*
       * Lock bus access.
       *---------------------------------------------------------------------*/
      pt_spiChanHndl->b_busLocked = true;
    799c:	81 e0       	ldi	r24, 0x01	; 1
    799e:	d3 01       	movw	r26, r6
    79a0:	19 96       	adiw	r26, 0x09	; 9
    79a2:	8c 93       	st	X, r24
    79a4:	19 97       	sbiw	r26, 0x09	; 9
      pt_spiChanHndl->pt_activeUser = pt_spiUserHndl;
    79a6:	1a 96       	adiw	r26, 0x0a	; 10
    79a8:	4d 92       	st	X+, r4
    79aa:	5c 92       	st	X, r5
    79ac:	1b 97       	sbiw	r26, 0x0b	; 11

      HAL_END_CRITICAL();//Enable interrupts
    79ae:	89 81       	ldd	r24, Y+1	; 0x01
    79b0:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Remember the address of the data associated with this transfer
       *---------------------------------------------------------------------*/
      gc_tempBuf = 0xFF;
    79b2:	8f ef       	ldi	r24, 0xFF	; 255
    79b4:	80 93 c7 20 	sts	0x20C7, r24
      pt_spiUserHndl->pc_txData   = (int8_t *)&gc_tempBuf;
    79b8:	87 ec       	ldi	r24, 0xC7	; 199
    79ba:	90 e2       	ldi	r25, 0x20	; 32
    79bc:	f2 01       	movw	r30, r4
    79be:	82 83       	std	Z+2, r24	; 0x02
    79c0:	93 83       	std	Z+3, r25	; 0x03
      pt_spiUserHndl->pc_rxData   = pc_rxBuffer;
    79c2:	8b 89       	ldd	r24, Y+19	; 0x13
    79c4:	9c 89       	ldd	r25, Y+20	; 0x14
    79c6:	84 83       	std	Z+4, r24	; 0x04
    79c8:	95 83       	std	Z+5, r25	; 0x05
      pt_spiUserHndl->s_bufLength = s_numBytes;
    79ca:	26 82       	std	Z+6, r2	; 0x06
    79cc:	37 82       	std	Z+7, r3	; 0x07

      /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_rxDmaHndl > 0)
    79ce:	50 96       	adiw	r26, 0x10	; 16
    79d0:	8d 91       	ld	r24, X+
    79d2:	9c 91       	ld	r25, X
    79d4:	51 97       	sbiw	r26, 0x11	; 17
    79d6:	17 96       	adiw	r26, 0x07	; 7
    79d8:	ed 91       	ld	r30, X+
    79da:	fc 91       	ld	r31, X
    79dc:	18 97       	sbiw	r26, 0x08	; 8
    79de:	18 16       	cp	r1, r24
    79e0:	19 06       	cpc	r1, r25
    79e2:	0c f0       	brlt	.+2      	; 0x79e6 <hal_spiReadBlock+0xd0>
    79e4:	91 c0       	rjmp	.+290    	; 0x7b08 <hal_spiReadBlock+0x1f2>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;
         t_dmaError t_err;

         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_OFF_gc;
    79e6:	11 82       	std	Z+1, r1	; 0x01

         switch( pt_spiChanHndl->t_id)
    79e8:	8c 91       	ld	r24, X
    79ea:	82 30       	cpi	r24, 0x02	; 2
    79ec:	51 f0       	breq	.+20     	; 0x7a02 <hal_spiReadBlock+0xec>
    79ee:	83 30       	cpi	r24, 0x03	; 3
    79f0:	59 f0       	breq	.+22     	; 0x7a08 <hal_spiReadBlock+0xf2>
    79f2:	81 30       	cpi	r24, 0x01	; 1
    79f4:	19 f4       	brne	.+6      	; 0x79fc <hal_spiReadBlock+0xe6>
    79f6:	3a e6       	ldi	r19, 0x6A	; 106
    79f8:	83 2e       	mov	r8, r19
    79fa:	08 c0       	rjmp	.+16     	; 0x7a0c <hal_spiReadBlock+0xf6>
    79fc:	2a e4       	ldi	r18, 0x4A	; 74
    79fe:	82 2e       	mov	r8, r18
    7a00:	05 c0       	rjmp	.+10     	; 0x7a0c <hal_spiReadBlock+0xf6>
    7a02:	9a e8       	ldi	r25, 0x8A	; 138
    7a04:	89 2e       	mov	r8, r25
    7a06:	02 c0       	rjmp	.+4      	; 0x7a0c <hal_spiReadBlock+0xf6>
               t_trigger = SPI2_TRANSFER_COMPLETE;
            break;

            case SPI_3:
               t_trigger = SPI3_TRANSFER_COMPLETE;
            break;
    7a08:	8a ea       	ldi	r24, 0xAA	; 170
    7a0a:	88 2e       	mov	r8, r24
               t_trigger = SPI1_TRANSFER_COMPLETE;
            break;

         }/*End switch( pt_spiChanHndl->t_id)*/

         if( (pt_spiChanHndl->t_spiOp == SPI_MASTER) &&
    7a0c:	d3 01       	movw	r26, r6
    7a0e:	16 96       	adiw	r26, 0x06	; 6
    7a10:	2c 91       	ld	r18, X
    7a12:	22 23       	and	r18, r18
    7a14:	61 f4       	brne	.+24     	; 0x7a2e <hal_spiReadBlock+0x118>
    7a16:	f2 01       	movw	r30, r4
    7a18:	a2 80       	ldd	r10, Z+2	; 0x02
    7a1a:	b3 80       	ldd	r11, Z+3	; 0x03
    7a1c:	f7 ec       	ldi	r31, 0xC7	; 199
    7a1e:	af 16       	cp	r10, r31
    7a20:	f0 e2       	ldi	r31, 0x20	; 32
    7a22:	bf 06       	cpc	r11, r31
    7a24:	21 f0       	breq	.+8      	; 0x7a2e <hal_spiReadBlock+0x118>
            !(pt_spiUserHndl->pc_txData == (int8_t *)&gc_tempBuf))
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[1];
    7a26:	b5 01       	movw	r22, r10
    7a28:	6f 5f       	subi	r22, 0xFF	; 255
    7a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a2c:	05 c0       	rjmp	.+10     	; 0x7a38 <hal_spiReadBlock+0x122>
         else
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[0];
    7a2e:	d2 01       	movw	r26, r4
    7a30:	12 96       	adiw	r26, 0x02	; 2
    7a32:	6d 91       	ld	r22, X+
    7a34:	7c 91       	ld	r23, X
    7a36:	13 97       	sbiw	r26, 0x03	; 3
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    7a38:	f3 01       	movw	r30, r6
    7a3a:	87 81       	ldd	r24, Z+7	; 0x07
    7a3c:	90 85       	ldd	r25, Z+8	; 0x08
    7a3e:	03 96       	adiw	r24, 0x03	; 3
         t_chanConf.t_srcAddDir     = FIXED;
         t_chanConf.t_destAddDir    = FIXED;
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
         t_chanConf.t_destAddReload = NO_RELOAD;
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7a40:	22 23       	and	r18, r18
    7a42:	11 f0       	breq	.+4      	; 0x7a48 <hal_spiReadBlock+0x132>
    7a44:	a1 01       	movw	r20, r2
    7a46:	03 c0       	rjmp	.+6      	; 0x7a4e <hal_spiReadBlock+0x138>
            t_chanConf.s_blockSize = s_numBytes - 1;
    7a48:	a1 01       	movw	r20, r2
    7a4a:	41 50       	subi	r20, 0x01	; 1
    7a4c:	50 40       	sbci	r21, 0x00	; 0
         if( (pt_spiChanHndl->t_spiOp == SPI_MASTER) &&
            !(pt_spiUserHndl->pc_txData == (int8_t *)&gc_tempBuf))
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[1];
         else
            t_chanConf.pi_srcAddress = (uint32_t *)&pt_spiUserHndl->pc_txData[0];
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    7a4e:	8c 83       	std	Y+4, r24	; 0x04
    7a50:	9d 83       	std	Y+5, r25	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    7a52:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    7a54:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    7a56:	99 24       	eor	r9, r9
    7a58:	93 94       	inc	r9
    7a5a:	98 86       	std	Y+8, r9	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    7a5c:	19 86       	std	Y+9, r1	; 0x09
         if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
            t_chanConf.s_blockSize = s_numBytes - 1;
         else
            t_chanConf.s_blockSize = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    7a5e:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7a60:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7a62:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7a64:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_txDmaHndl,
    7a66:	d3 01       	movw	r26, r6
    7a68:	1e 96       	adiw	r26, 0x0e	; 14
    7a6a:	8d 91       	ld	r24, X+
    7a6c:	9c 91       	ld	r25, X
    7a6e:	1f 97       	sbiw	r26, 0x0f	; 15
    7a70:	24 2f       	mov	r18, r20
    7a72:	4a 87       	std	Y+10, r20	; 0x0a
    7a74:	5b 87       	std	Y+11, r21	; 0x0b
    7a76:	a6 2e       	mov	r10, r22
    7a78:	6a 83       	std	Y+2, r22	; 0x02
    7a7a:	7b 83       	std	Y+3, r23	; 0x03
    7a7c:	bb 80       	ldd	r11, Y+3	; 0x03
    7a7e:	cc 80       	ldd	r12, Y+4	; 0x04
    7a80:	dd 80       	ldd	r13, Y+5	; 0x05
    7a82:	ee 24       	eor	r14, r14
    7a84:	ff 24       	eor	r15, r15
    7a86:	01 e0       	ldi	r16, 0x01	; 1
    7a88:	10 e0       	ldi	r17, 0x00	; 0
    7a8a:	3b 85       	ldd	r19, Y+11	; 0x0b
    7a8c:	40 e0       	ldi	r20, 0x00	; 0
    7a8e:	51 e0       	ldi	r21, 0x01	; 1
    7a90:	68 2d       	mov	r22, r8
    7a92:	70 e0       	ldi	r23, 0x00	; 0
    7a94:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_txDmaHndl);
    7a98:	f3 01       	movw	r30, r6
    7a9a:	86 85       	ldd	r24, Z+14	; 0x0e
    7a9c:	97 85       	ldd	r25, Z+15	; 0x0f
    7a9e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_spiChanHndl->pt_spi->DATA;
    7aa2:	d3 01       	movw	r26, r6
    7aa4:	17 96       	adiw	r26, 0x07	; 7
    7aa6:	4d 91       	ld	r20, X+
    7aa8:	5c 91       	ld	r21, X
    7aaa:	18 97       	sbiw	r26, 0x08	; 8
    7aac:	4d 5f       	subi	r20, 0xFD	; 253
    7aae:	5f 4f       	sbci	r21, 0xFF	; 255
         t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    7ab0:	eb 89       	ldd	r30, Y+19	; 0x13
    7ab2:	fc 89       	ldd	r31, Y+20	; 0x14
    7ab4:	ec 83       	std	Y+4, r30	; 0x04
    7ab6:	fd 83       	std	Y+5, r31	; 0x05
         t_chanConf.t_srcAddDir     = FIXED;
    7ab8:	1e 82       	std	Y+6, r1	; 0x06
         t_chanConf.t_destAddDir    = INCREMENT;
    7aba:	9f 82       	std	Y+7, r9	; 0x07
         t_chanConf.t_srcAddReload  = NO_RELOAD;
    7abc:	18 86       	std	Y+8, r1	; 0x08
         t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    7abe:	99 86       	std	Y+9, r9	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
         t_chanConf.t_burstMode     = ONE_BYTE;
    7ac0:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    7ac2:	9d 86       	std	Y+13, r9	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    7ac4:	8e 86       	std	Y+14, r8	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    7ac6:	1f 86       	std	Y+15, r1	; 0x0f

         t_err = hal_configureDmaChannel( pt_spiChanHndl->t_rxDmaHndl,
    7ac8:	50 96       	adiw	r26, 0x10	; 16
    7aca:	8d 91       	ld	r24, X+
    7acc:	9c 91       	ld	r25, X
    7ace:	51 97       	sbiw	r26, 0x11	; 17
    7ad0:	22 2d       	mov	r18, r2
    7ad2:	2a 86       	std	Y+10, r2	; 0x0a
    7ad4:	3b 86       	std	Y+11, r3	; 0x0b
    7ad6:	a4 2e       	mov	r10, r20
    7ad8:	4a 83       	std	Y+2, r20	; 0x02
    7ada:	5b 83       	std	Y+3, r21	; 0x03
    7adc:	bb 80       	ldd	r11, Y+3	; 0x03
    7ade:	cc 80       	ldd	r12, Y+4	; 0x04
    7ae0:	dd 80       	ldd	r13, Y+5	; 0x05
    7ae2:	ff 24       	eor	r15, r15
    7ae4:	f3 94       	inc	r15
    7ae6:	00 e0       	ldi	r16, 0x00	; 0
    7ae8:	11 e0       	ldi	r17, 0x01	; 1
    7aea:	3b 85       	ldd	r19, Y+11	; 0x0b
    7aec:	40 e0       	ldi	r20, 0x00	; 0
    7aee:	51 e0       	ldi	r21, 0x01	; 1
    7af0:	68 2d       	mov	r22, r8
    7af2:	70 e0       	ldi	r23, 0x00	; 0
    7af4:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                          t_chanConf);

         t_err = hal_dmaEnableChannel( pt_spiChanHndl->t_rxDmaHndl);
    7af8:	d3 01       	movw	r26, r6
    7afa:	50 96       	adiw	r26, 0x10	; 16
    7afc:	8d 91       	ld	r24, X+
    7afe:	9c 91       	ld	r25, X
    7b00:	51 97       	sbiw	r26, 0x11	; 17
    7b02:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>
    7b06:	02 c0       	rjmp	.+4      	; 0x7b0c <hal_spiReadBlock+0x1f6>

      }/*End if( pt_spiChanHndl->t_rxDmaHndl > 0)*/
      else
         pt_spiChanHndl->pt_spi->INTCTRL = SPI_INTLVL_HI_gc;
    7b08:	83 e0       	ldi	r24, 0x03	; 3
    7b0a:	81 83       	std	Z+1, r24	; 0x01

      /*---------------------------------------------------------------------*
       * Begin data transaction.
       *---------------------------------------------------------------------*/
      if( pt_spiChanHndl->t_spiOp == SPI_MASTER)
    7b0c:	f3 01       	movw	r30, r6
    7b0e:	86 81       	ldd	r24, Z+6	; 0x06
    7b10:	88 23       	and	r24, r24
    7b12:	09 f0       	breq	.+2      	; 0x7b16 <hal_spiReadBlock+0x200>
    7b14:	94 c0       	rjmp	.+296    	; 0x7c3e <hal_spiReadBlock+0x328>
      {

         pt_spiUserHndl->s_bufIndex = 0;
    7b16:	d2 01       	movw	r26, r4
    7b18:	18 96       	adiw	r26, 0x08	; 8
    7b1a:	1d 92       	st	X+, r1
    7b1c:	1c 92       	st	X, r1
    7b1e:	19 97       	sbiw	r26, 0x09	; 9
         pt_spiUserHndl->b_enCs = b_enCs;
    7b20:	ea 89       	ldd	r30, Y+18	; 0x12
    7b22:	50 96       	adiw	r26, 0x10	; 16
    7b24:	ec 93       	st	X, r30
    7b26:	50 97       	sbiw	r26, 0x10	; 16

         /*------------------------------------------------------------------*
          * Chip select low...
          *------------------------------------------------------------------*/
         if( b_enCs == true)
    7b28:	ee 23       	and	r30, r30
    7b2a:	09 f4       	brne	.+2      	; 0x7b2e <hal_spiReadBlock+0x218>
    7b2c:	7c c0       	rjmp	.+248    	; 0x7c26 <hal_spiReadBlock+0x310>
         {
            hal_gpioOff( pt_spiUserHndl->t_csPort,
    7b2e:	1b 96       	adiw	r26, 0x0b	; 11
    7b30:	9c 91       	ld	r25, X
    7b32:	1b 97       	sbiw	r26, 0x0b	; 11
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
    7b34:	1a 96       	adiw	r26, 0x0a	; 10
    7b36:	8c 91       	ld	r24, X
    7b38:	85 30       	cpi	r24, 0x05	; 5
    7b3a:	09 f4       	brne	.+2      	; 0x7b3e <hal_spiReadBlock+0x228>
    7b3c:	4a c0       	rjmp	.+148    	; 0x7bd2 <hal_spiReadBlock+0x2bc>
    7b3e:	86 30       	cpi	r24, 0x06	; 6
    7b40:	80 f4       	brcc	.+32     	; 0x7b62 <hal_spiReadBlock+0x24c>
    7b42:	82 30       	cpi	r24, 0x02	; 2
    7b44:	81 f1       	breq	.+96     	; 0x7ba6 <hal_spiReadBlock+0x290>
    7b46:	83 30       	cpi	r24, 0x03	; 3
    7b48:	30 f4       	brcc	.+12     	; 0x7b56 <hal_spiReadBlock+0x240>
    7b4a:	88 23       	and	r24, r24
    7b4c:	e1 f0       	breq	.+56     	; 0x7b86 <hal_spiReadBlock+0x270>
    7b4e:	81 30       	cpi	r24, 0x01	; 1
    7b50:	09 f0       	breq	.+2      	; 0x7b54 <hal_spiReadBlock+0x23e>
    7b52:	69 c0       	rjmp	.+210    	; 0x7c26 <hal_spiReadBlock+0x310>
    7b54:	20 c0       	rjmp	.+64     	; 0x7b96 <hal_spiReadBlock+0x280>
    7b56:	83 30       	cpi	r24, 0x03	; 3
    7b58:	71 f1       	breq	.+92     	; 0x7bb6 <hal_spiReadBlock+0x2a0>
    7b5a:	84 30       	cpi	r24, 0x04	; 4
    7b5c:	09 f0       	breq	.+2      	; 0x7b60 <hal_spiReadBlock+0x24a>
    7b5e:	63 c0       	rjmp	.+198    	; 0x7c26 <hal_spiReadBlock+0x310>
    7b60:	31 c0       	rjmp	.+98     	; 0x7bc4 <hal_spiReadBlock+0x2ae>
    7b62:	88 30       	cpi	r24, 0x08	; 8
    7b64:	09 f4       	brne	.+2      	; 0x7b68 <hal_spiReadBlock+0x252>
    7b66:	4a c0       	rjmp	.+148    	; 0x7bfc <hal_spiReadBlock+0x2e6>
    7b68:	89 30       	cpi	r24, 0x09	; 9
    7b6a:	30 f4       	brcc	.+12     	; 0x7b78 <hal_spiReadBlock+0x262>
    7b6c:	86 30       	cpi	r24, 0x06	; 6
    7b6e:	c1 f1       	breq	.+112    	; 0x7be0 <hal_spiReadBlock+0x2ca>
    7b70:	87 30       	cpi	r24, 0x07	; 7
    7b72:	09 f0       	breq	.+2      	; 0x7b76 <hal_spiReadBlock+0x260>
    7b74:	58 c0       	rjmp	.+176    	; 0x7c26 <hal_spiReadBlock+0x310>
    7b76:	3b c0       	rjmp	.+118    	; 0x7bee <hal_spiReadBlock+0x2d8>
    7b78:	89 30       	cpi	r24, 0x09	; 9
    7b7a:	09 f4       	brne	.+2      	; 0x7b7e <hal_spiReadBlock+0x268>
    7b7c:	46 c0       	rjmp	.+140    	; 0x7c0a <hal_spiReadBlock+0x2f4>
    7b7e:	8a 30       	cpi	r24, 0x0A	; 10
    7b80:	09 f0       	breq	.+2      	; 0x7b84 <hal_spiReadBlock+0x26e>
    7b82:	51 c0       	rjmp	.+162    	; 0x7c26 <hal_spiReadBlock+0x310>
    7b84:	49 c0       	rjmp	.+146    	; 0x7c18 <hal_spiReadBlock+0x302>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
    7b86:	80 91 00 06 	lds	r24, 0x0600
    7b8a:	89 23       	and	r24, r25
    7b8c:	09 f4       	brne	.+2      	; 0x7b90 <hal_spiReadBlock+0x27a>
    7b8e:	4b c0       	rjmp	.+150    	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
    7b90:	e0 e0       	ldi	r30, 0x00	; 0
    7b92:	f6 e0       	ldi	r31, 0x06	; 6
    7b94:	47 c0       	rjmp	.+142    	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
    7b96:	80 91 20 06 	lds	r24, 0x0620
    7b9a:	89 23       	and	r24, r25
    7b9c:	09 f4       	brne	.+2      	; 0x7ba0 <hal_spiReadBlock+0x28a>
    7b9e:	43 c0       	rjmp	.+134    	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
    7ba0:	e0 e2       	ldi	r30, 0x20	; 32
    7ba2:	f6 e0       	ldi	r31, 0x06	; 6
    7ba4:	3f c0       	rjmp	.+126    	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
    7ba6:	80 91 40 06 	lds	r24, 0x0640
    7baa:	89 23       	and	r24, r25
    7bac:	09 f4       	brne	.+2      	; 0x7bb0 <hal_spiReadBlock+0x29a>
    7bae:	3b c0       	rjmp	.+118    	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
    7bb0:	e0 e4       	ldi	r30, 0x40	; 64
    7bb2:	f6 e0       	ldi	r31, 0x06	; 6
    7bb4:	37 c0       	rjmp	.+110    	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
    7bb6:	80 91 60 06 	lds	r24, 0x0660
    7bba:	89 23       	and	r24, r25
    7bbc:	a1 f1       	breq	.+104    	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
    7bbe:	e0 e6       	ldi	r30, 0x60	; 96
    7bc0:	f6 e0       	ldi	r31, 0x06	; 6
    7bc2:	30 c0       	rjmp	.+96     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
    7bc4:	80 91 80 06 	lds	r24, 0x0680
    7bc8:	89 23       	and	r24, r25
    7bca:	69 f1       	breq	.+90     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
    7bcc:	e0 e8       	ldi	r30, 0x80	; 128
    7bce:	f6 e0       	ldi	r31, 0x06	; 6
    7bd0:	29 c0       	rjmp	.+82     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
    7bd2:	80 91 a0 06 	lds	r24, 0x06A0
    7bd6:	89 23       	and	r24, r25
    7bd8:	31 f1       	breq	.+76     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
    7bda:	e0 ea       	ldi	r30, 0xA0	; 160
    7bdc:	f6 e0       	ldi	r31, 0x06	; 6
    7bde:	22 c0       	rjmp	.+68     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
    7be0:	80 91 e0 06 	lds	r24, 0x06E0
    7be4:	89 23       	and	r24, r25
    7be6:	f9 f0       	breq	.+62     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
    7be8:	e0 ee       	ldi	r30, 0xE0	; 224
    7bea:	f6 e0       	ldi	r31, 0x06	; 6
    7bec:	1b c0       	rjmp	.+54     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
    7bee:	80 91 00 07 	lds	r24, 0x0700
    7bf2:	89 23       	and	r24, r25
    7bf4:	c1 f0       	breq	.+48     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
    7bf6:	e0 e0       	ldi	r30, 0x00	; 0
    7bf8:	f7 e0       	ldi	r31, 0x07	; 7
    7bfa:	14 c0       	rjmp	.+40     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
    7bfc:	80 91 20 07 	lds	r24, 0x0720
    7c00:	89 23       	and	r24, r25
    7c02:	89 f0       	breq	.+34     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
    7c04:	e0 e2       	ldi	r30, 0x20	; 32
    7c06:	f7 e0       	ldi	r31, 0x07	; 7
    7c08:	0d c0       	rjmp	.+26     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
    7c0a:	80 91 c0 07 	lds	r24, 0x07C0
    7c0e:	89 23       	and	r24, r25
    7c10:	51 f0       	breq	.+20     	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
    7c12:	e0 ec       	ldi	r30, 0xC0	; 192
    7c14:	f7 e0       	ldi	r31, 0x07	; 7
    7c16:	06 c0       	rjmp	.+12     	; 0x7c24 <hal_spiReadBlock+0x30e>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
    7c18:	80 91 e0 07 	lds	r24, 0x07E0
    7c1c:	89 23       	and	r24, r25
    7c1e:	19 f0       	breq	.+6      	; 0x7c26 <hal_spiReadBlock+0x310>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
    7c20:	e0 ee       	ldi	r30, 0xE0	; 224
    7c22:	f7 e0       	ldi	r31, 0x07	; 7
    7c24:	96 83       	std	Z+6, r25	; 0x06
         }

         /*------------------------------------------------------------------*
          * Transfer first byte...
          *------------------------------------------------------------------*/
         pt_spiChanHndl->pt_spi->DATA = pt_spiUserHndl->pc_txData[0];
    7c26:	d3 01       	movw	r26, r6
    7c28:	17 96       	adiw	r26, 0x07	; 7
    7c2a:	2d 91       	ld	r18, X+
    7c2c:	3c 91       	ld	r19, X
    7c2e:	18 97       	sbiw	r26, 0x08	; 8
    7c30:	f2 01       	movw	r30, r4
    7c32:	a2 81       	ldd	r26, Z+2	; 0x02
    7c34:	b3 81       	ldd	r27, Z+3	; 0x03
    7c36:	8c 91       	ld	r24, X
    7c38:	d9 01       	movw	r26, r18
    7c3a:	13 96       	adiw	r26, 0x03	; 3
    7c3c:	8c 93       	st	X, r24
    7c3e:	80 e0       	ldi	r24, 0x00	; 0

   }

   return SPI_PASSED;

}/*End hal_spiReadBlock*/
    7c40:	64 96       	adiw	r28, 0x14	; 20
    7c42:	cd bf       	out	0x3d, r28	; 61
    7c44:	de bf       	out	0x3e, r29	; 62
    7c46:	cf 91       	pop	r28
    7c48:	df 91       	pop	r29
    7c4a:	1f 91       	pop	r17
    7c4c:	0f 91       	pop	r16
    7c4e:	ff 90       	pop	r15
    7c50:	ef 90       	pop	r14
    7c52:	df 90       	pop	r13
    7c54:	cf 90       	pop	r12
    7c56:	bf 90       	pop	r11
    7c58:	af 90       	pop	r10
    7c5a:	9f 90       	pop	r9
    7c5c:	8f 90       	pop	r8
    7c5e:	7f 90       	pop	r7
    7c60:	6f 90       	pop	r6
    7c62:	5f 90       	pop	r5
    7c64:	4f 90       	pop	r4
    7c66:	3f 90       	pop	r3
    7c68:	2f 90       	pop	r2
    7c6a:	08 95       	ret

00007c6c <__vector_15>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
ISR( TCC0_ERR_vect)
{
    7c6c:	1f 92       	push	r1
    7c6e:	0f 92       	push	r0
    7c70:	0f b6       	in	r0, 0x3f	; 63
    7c72:	0f 92       	push	r0
    7c74:	08 b6       	in	r0, 0x38	; 56
    7c76:	0f 92       	push	r0
    7c78:	11 24       	eor	r1, r1
    7c7a:	18 be       	out	0x38, r1	; 56

}/*End ISR( TCC0_ERR_vect)*/
    7c7c:	0f 90       	pop	r0
    7c7e:	08 be       	out	0x38, r0	; 56
    7c80:	0f 90       	pop	r0
    7c82:	0f be       	out	0x3f, r0	; 63
    7c84:	0f 90       	pop	r0
    7c86:	1f 90       	pop	r1
    7c88:	18 95       	reti

00007c8a <findTimerIntElement>:
   }

}/*End ISR( TCF1_OVF_vect)*/

static t_timerIntHndl *findTimerIntElement( t_timerIntId t_id)
{
    7c8a:	df 93       	push	r29
    7c8c:	cf 93       	push	r28
    7c8e:	0f 92       	push	r0
    7c90:	0f 92       	push	r0
    7c92:	cd b7       	in	r28, 0x3d	; 61
    7c94:	de b7       	in	r29, 0x3e	; 62
    7c96:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerIntHndlList, s_count)
    7c98:	e0 91 e2 20 	lds	r30, 0x20E2
    7c9c:	f0 91 e3 20 	lds	r31, 0x20E3
    7ca0:	22 81       	ldd	r18, Z+2	; 0x02
    7ca2:	33 81       	ldd	r19, Z+3	; 0x03
    7ca4:	e0 91 e2 20 	lds	r30, 0x20E2
    7ca8:	f0 91 e3 20 	lds	r31, 0x20E3
    7cac:	0c c0       	rjmp	.+24     	; 0x7cc6 <findTimerIntElement+0x3c>
   {
      pt_element = (t_timerIntHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    7cae:	e9 81       	ldd	r30, Y+1	; 0x01
    7cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    7cb2:	01 90       	ld	r0, Z+
    7cb4:	f0 81       	ld	r31, Z
    7cb6:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    7cb8:	80 81       	ld	r24, Z
    7cba:	84 17       	cp	r24, r20
    7cbc:	69 f0       	breq	.+26     	; 0x7cd8 <findTimerIntElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer interrupt list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerIntHndlList, s_count)
    7cbe:	21 50       	subi	r18, 0x01	; 1
    7cc0:	30 40       	sbci	r19, 0x00	; 0
    7cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    7cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    7cc6:	80 85       	ldd	r24, Z+8	; 0x08
    7cc8:	91 85       	ldd	r25, Z+9	; 0x09
    7cca:	89 83       	std	Y+1, r24	; 0x01
    7ccc:	9a 83       	std	Y+2, r25	; 0x02
    7cce:	12 16       	cp	r1, r18
    7cd0:	13 06       	cpc	r1, r19
    7cd2:	6c f3       	brlt	.-38     	; 0x7cae <findTimerIntElement+0x24>
    7cd4:	e0 e0       	ldi	r30, 0x00	; 0
    7cd6:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open Timer
    * interrupt list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End findTimerIntElement*/
    7cd8:	cf 01       	movw	r24, r30
    7cda:	0f 90       	pop	r0
    7cdc:	0f 90       	pop	r0
    7cde:	cf 91       	pop	r28
    7ce0:	df 91       	pop	r29
    7ce2:	08 95       	ret

00007ce4 <__vector_114>:
   }

}/*End ISR( TCF1_CCB_vect)*/

ISR( TCF1_OVF_vect)
{
    7ce4:	1f 92       	push	r1
    7ce6:	0f 92       	push	r0
    7ce8:	0f b6       	in	r0, 0x3f	; 63
    7cea:	0f 92       	push	r0
    7cec:	08 b6       	in	r0, 0x38	; 56
    7cee:	0f 92       	push	r0
    7cf0:	09 b6       	in	r0, 0x39	; 57
    7cf2:	0f 92       	push	r0
    7cf4:	0b b6       	in	r0, 0x3b	; 59
    7cf6:	0f 92       	push	r0
    7cf8:	11 24       	eor	r1, r1
    7cfa:	18 be       	out	0x38, r1	; 56
    7cfc:	19 be       	out	0x39, r1	; 57
    7cfe:	1b be       	out	0x3b, r1	; 59
    7d00:	2f 93       	push	r18
    7d02:	3f 93       	push	r19
    7d04:	4f 93       	push	r20
    7d06:	5f 93       	push	r21
    7d08:	6f 93       	push	r22
    7d0a:	7f 93       	push	r23
    7d0c:	8f 93       	push	r24
    7d0e:	9f 93       	push	r25
    7d10:	af 93       	push	r26
    7d12:	bf 93       	push	r27
    7d14:	ef 93       	push	r30
    7d16:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_OVERFLOW);
    7d18:	87 e2       	ldi	r24, 0x27	; 39
    7d1a:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7d1e:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7d20:	00 97       	sbiw	r24, 0x00	; 0
    7d22:	31 f0       	breq	.+12     	; 0x7d30 <__vector_114+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7d24:	01 80       	ldd	r0, Z+1	; 0x01
    7d26:	f2 81       	ldd	r31, Z+2	; 0x02
    7d28:	e0 2d       	mov	r30, r0
    7d2a:	30 97       	sbiw	r30, 0x00	; 0
    7d2c:	09 f0       	breq	.+2      	; 0x7d30 <__vector_114+0x4c>
         pt_intHndl->pf_funPtr();
    7d2e:	19 95       	eicall
   }

}/*End ISR( TCF1_OVF_vect)*/
    7d30:	ff 91       	pop	r31
    7d32:	ef 91       	pop	r30
    7d34:	bf 91       	pop	r27
    7d36:	af 91       	pop	r26
    7d38:	9f 91       	pop	r25
    7d3a:	8f 91       	pop	r24
    7d3c:	7f 91       	pop	r23
    7d3e:	6f 91       	pop	r22
    7d40:	5f 91       	pop	r21
    7d42:	4f 91       	pop	r20
    7d44:	3f 91       	pop	r19
    7d46:	2f 91       	pop	r18
    7d48:	0f 90       	pop	r0
    7d4a:	0b be       	out	0x3b, r0	; 59
    7d4c:	0f 90       	pop	r0
    7d4e:	09 be       	out	0x39, r0	; 57
    7d50:	0f 90       	pop	r0
    7d52:	08 be       	out	0x38, r0	; 56
    7d54:	0f 90       	pop	r0
    7d56:	0f be       	out	0x3f, r0	; 63
    7d58:	0f 90       	pop	r0
    7d5a:	1f 90       	pop	r1
    7d5c:	18 95       	reti

00007d5e <__vector_117>:
   }

}/*End ISR( TCF1_CCA_vect)*/

ISR( TCF1_CCB_vect)
{
    7d5e:	1f 92       	push	r1
    7d60:	0f 92       	push	r0
    7d62:	0f b6       	in	r0, 0x3f	; 63
    7d64:	0f 92       	push	r0
    7d66:	08 b6       	in	r0, 0x38	; 56
    7d68:	0f 92       	push	r0
    7d6a:	09 b6       	in	r0, 0x39	; 57
    7d6c:	0f 92       	push	r0
    7d6e:	0b b6       	in	r0, 0x3b	; 59
    7d70:	0f 92       	push	r0
    7d72:	11 24       	eor	r1, r1
    7d74:	18 be       	out	0x38, r1	; 56
    7d76:	19 be       	out	0x39, r1	; 57
    7d78:	1b be       	out	0x3b, r1	; 59
    7d7a:	2f 93       	push	r18
    7d7c:	3f 93       	push	r19
    7d7e:	4f 93       	push	r20
    7d80:	5f 93       	push	r21
    7d82:	6f 93       	push	r22
    7d84:	7f 93       	push	r23
    7d86:	8f 93       	push	r24
    7d88:	9f 93       	push	r25
    7d8a:	af 93       	push	r26
    7d8c:	bf 93       	push	r27
    7d8e:	ef 93       	push	r30
    7d90:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_COMP_B);
    7d92:	84 e2       	ldi	r24, 0x24	; 36
    7d94:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7d98:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7d9a:	00 97       	sbiw	r24, 0x00	; 0
    7d9c:	31 f0       	breq	.+12     	; 0x7daa <__vector_117+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7d9e:	01 80       	ldd	r0, Z+1	; 0x01
    7da0:	f2 81       	ldd	r31, Z+2	; 0x02
    7da2:	e0 2d       	mov	r30, r0
    7da4:	30 97       	sbiw	r30, 0x00	; 0
    7da6:	09 f0       	breq	.+2      	; 0x7daa <__vector_117+0x4c>
         pt_intHndl->pf_funPtr();
    7da8:	19 95       	eicall
   }

}/*End ISR( TCF1_CCB_vect)*/
    7daa:	ff 91       	pop	r31
    7dac:	ef 91       	pop	r30
    7dae:	bf 91       	pop	r27
    7db0:	af 91       	pop	r26
    7db2:	9f 91       	pop	r25
    7db4:	8f 91       	pop	r24
    7db6:	7f 91       	pop	r23
    7db8:	6f 91       	pop	r22
    7dba:	5f 91       	pop	r21
    7dbc:	4f 91       	pop	r20
    7dbe:	3f 91       	pop	r19
    7dc0:	2f 91       	pop	r18
    7dc2:	0f 90       	pop	r0
    7dc4:	0b be       	out	0x3b, r0	; 59
    7dc6:	0f 90       	pop	r0
    7dc8:	09 be       	out	0x39, r0	; 57
    7dca:	0f 90       	pop	r0
    7dcc:	08 be       	out	0x38, r0	; 56
    7dce:	0f 90       	pop	r0
    7dd0:	0f be       	out	0x3f, r0	; 63
    7dd2:	0f 90       	pop	r0
    7dd4:	1f 90       	pop	r1
    7dd6:	18 95       	reti

00007dd8 <__vector_116>:
   }

}/*End ISR( TCF0_OVF_vect)*/

ISR( TCF1_CCA_vect)
{
    7dd8:	1f 92       	push	r1
    7dda:	0f 92       	push	r0
    7ddc:	0f b6       	in	r0, 0x3f	; 63
    7dde:	0f 92       	push	r0
    7de0:	08 b6       	in	r0, 0x38	; 56
    7de2:	0f 92       	push	r0
    7de4:	09 b6       	in	r0, 0x39	; 57
    7de6:	0f 92       	push	r0
    7de8:	0b b6       	in	r0, 0x3b	; 59
    7dea:	0f 92       	push	r0
    7dec:	11 24       	eor	r1, r1
    7dee:	18 be       	out	0x38, r1	; 56
    7df0:	19 be       	out	0x39, r1	; 57
    7df2:	1b be       	out	0x3b, r1	; 59
    7df4:	2f 93       	push	r18
    7df6:	3f 93       	push	r19
    7df8:	4f 93       	push	r20
    7dfa:	5f 93       	push	r21
    7dfc:	6f 93       	push	r22
    7dfe:	7f 93       	push	r23
    7e00:	8f 93       	push	r24
    7e02:	9f 93       	push	r25
    7e04:	af 93       	push	r26
    7e06:	bf 93       	push	r27
    7e08:	ef 93       	push	r30
    7e0a:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_8_COMP_A);
    7e0c:	83 e2       	ldi	r24, 0x23	; 35
    7e0e:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7e12:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7e14:	00 97       	sbiw	r24, 0x00	; 0
    7e16:	31 f0       	breq	.+12     	; 0x7e24 <__vector_116+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7e18:	01 80       	ldd	r0, Z+1	; 0x01
    7e1a:	f2 81       	ldd	r31, Z+2	; 0x02
    7e1c:	e0 2d       	mov	r30, r0
    7e1e:	30 97       	sbiw	r30, 0x00	; 0
    7e20:	09 f0       	breq	.+2      	; 0x7e24 <__vector_116+0x4c>
         pt_intHndl->pf_funPtr();
    7e22:	19 95       	eicall
   }

}/*End ISR( TCF1_CCA_vect)*/
    7e24:	ff 91       	pop	r31
    7e26:	ef 91       	pop	r30
    7e28:	bf 91       	pop	r27
    7e2a:	af 91       	pop	r26
    7e2c:	9f 91       	pop	r25
    7e2e:	8f 91       	pop	r24
    7e30:	7f 91       	pop	r23
    7e32:	6f 91       	pop	r22
    7e34:	5f 91       	pop	r21
    7e36:	4f 91       	pop	r20
    7e38:	3f 91       	pop	r19
    7e3a:	2f 91       	pop	r18
    7e3c:	0f 90       	pop	r0
    7e3e:	0b be       	out	0x3b, r0	; 59
    7e40:	0f 90       	pop	r0
    7e42:	09 be       	out	0x39, r0	; 57
    7e44:	0f 90       	pop	r0
    7e46:	08 be       	out	0x38, r0	; 56
    7e48:	0f 90       	pop	r0
    7e4a:	0f be       	out	0x3f, r0	; 63
    7e4c:	0f 90       	pop	r0
    7e4e:	1f 90       	pop	r1
    7e50:	18 95       	reti

00007e52 <__vector_108>:
   }

}/*End ISR( TCF0_CCD_vect)*/

ISR( TCF0_OVF_vect)
{
    7e52:	1f 92       	push	r1
    7e54:	0f 92       	push	r0
    7e56:	0f b6       	in	r0, 0x3f	; 63
    7e58:	0f 92       	push	r0
    7e5a:	08 b6       	in	r0, 0x38	; 56
    7e5c:	0f 92       	push	r0
    7e5e:	09 b6       	in	r0, 0x39	; 57
    7e60:	0f 92       	push	r0
    7e62:	0b b6       	in	r0, 0x3b	; 59
    7e64:	0f 92       	push	r0
    7e66:	11 24       	eor	r1, r1
    7e68:	18 be       	out	0x38, r1	; 56
    7e6a:	19 be       	out	0x39, r1	; 57
    7e6c:	1b be       	out	0x3b, r1	; 59
    7e6e:	2f 93       	push	r18
    7e70:	3f 93       	push	r19
    7e72:	4f 93       	push	r20
    7e74:	5f 93       	push	r21
    7e76:	6f 93       	push	r22
    7e78:	7f 93       	push	r23
    7e7a:	8f 93       	push	r24
    7e7c:	9f 93       	push	r25
    7e7e:	af 93       	push	r26
    7e80:	bf 93       	push	r27
    7e82:	ef 93       	push	r30
    7e84:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_OVERFLOW);
    7e86:	82 e2       	ldi	r24, 0x22	; 34
    7e88:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7e8c:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7e8e:	00 97       	sbiw	r24, 0x00	; 0
    7e90:	31 f0       	breq	.+12     	; 0x7e9e <__vector_108+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7e92:	01 80       	ldd	r0, Z+1	; 0x01
    7e94:	f2 81       	ldd	r31, Z+2	; 0x02
    7e96:	e0 2d       	mov	r30, r0
    7e98:	30 97       	sbiw	r30, 0x00	; 0
    7e9a:	09 f0       	breq	.+2      	; 0x7e9e <__vector_108+0x4c>
         pt_intHndl->pf_funPtr();
    7e9c:	19 95       	eicall
   }

}/*End ISR( TCF0_OVF_vect)*/
    7e9e:	ff 91       	pop	r31
    7ea0:	ef 91       	pop	r30
    7ea2:	bf 91       	pop	r27
    7ea4:	af 91       	pop	r26
    7ea6:	9f 91       	pop	r25
    7ea8:	8f 91       	pop	r24
    7eaa:	7f 91       	pop	r23
    7eac:	6f 91       	pop	r22
    7eae:	5f 91       	pop	r21
    7eb0:	4f 91       	pop	r20
    7eb2:	3f 91       	pop	r19
    7eb4:	2f 91       	pop	r18
    7eb6:	0f 90       	pop	r0
    7eb8:	0b be       	out	0x3b, r0	; 59
    7eba:	0f 90       	pop	r0
    7ebc:	09 be       	out	0x39, r0	; 57
    7ebe:	0f 90       	pop	r0
    7ec0:	08 be       	out	0x38, r0	; 56
    7ec2:	0f 90       	pop	r0
    7ec4:	0f be       	out	0x3f, r0	; 63
    7ec6:	0f 90       	pop	r0
    7ec8:	1f 90       	pop	r1
    7eca:	18 95       	reti

00007ecc <__vector_113>:
   }

}/*End ISR( TCF0_CCC_vect)*/

ISR( TCF0_CCD_vect)
{
    7ecc:	1f 92       	push	r1
    7ece:	0f 92       	push	r0
    7ed0:	0f b6       	in	r0, 0x3f	; 63
    7ed2:	0f 92       	push	r0
    7ed4:	08 b6       	in	r0, 0x38	; 56
    7ed6:	0f 92       	push	r0
    7ed8:	09 b6       	in	r0, 0x39	; 57
    7eda:	0f 92       	push	r0
    7edc:	0b b6       	in	r0, 0x3b	; 59
    7ede:	0f 92       	push	r0
    7ee0:	11 24       	eor	r1, r1
    7ee2:	18 be       	out	0x38, r1	; 56
    7ee4:	19 be       	out	0x39, r1	; 57
    7ee6:	1b be       	out	0x3b, r1	; 59
    7ee8:	2f 93       	push	r18
    7eea:	3f 93       	push	r19
    7eec:	4f 93       	push	r20
    7eee:	5f 93       	push	r21
    7ef0:	6f 93       	push	r22
    7ef2:	7f 93       	push	r23
    7ef4:	8f 93       	push	r24
    7ef6:	9f 93       	push	r25
    7ef8:	af 93       	push	r26
    7efa:	bf 93       	push	r27
    7efc:	ef 93       	push	r30
    7efe:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_D);
    7f00:	81 e2       	ldi	r24, 0x21	; 33
    7f02:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7f06:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7f08:	00 97       	sbiw	r24, 0x00	; 0
    7f0a:	31 f0       	breq	.+12     	; 0x7f18 <__vector_113+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7f0c:	01 80       	ldd	r0, Z+1	; 0x01
    7f0e:	f2 81       	ldd	r31, Z+2	; 0x02
    7f10:	e0 2d       	mov	r30, r0
    7f12:	30 97       	sbiw	r30, 0x00	; 0
    7f14:	09 f0       	breq	.+2      	; 0x7f18 <__vector_113+0x4c>
         pt_intHndl->pf_funPtr();
    7f16:	19 95       	eicall
   }

}/*End ISR( TCF0_CCD_vect)*/
    7f18:	ff 91       	pop	r31
    7f1a:	ef 91       	pop	r30
    7f1c:	bf 91       	pop	r27
    7f1e:	af 91       	pop	r26
    7f20:	9f 91       	pop	r25
    7f22:	8f 91       	pop	r24
    7f24:	7f 91       	pop	r23
    7f26:	6f 91       	pop	r22
    7f28:	5f 91       	pop	r21
    7f2a:	4f 91       	pop	r20
    7f2c:	3f 91       	pop	r19
    7f2e:	2f 91       	pop	r18
    7f30:	0f 90       	pop	r0
    7f32:	0b be       	out	0x3b, r0	; 59
    7f34:	0f 90       	pop	r0
    7f36:	09 be       	out	0x39, r0	; 57
    7f38:	0f 90       	pop	r0
    7f3a:	08 be       	out	0x38, r0	; 56
    7f3c:	0f 90       	pop	r0
    7f3e:	0f be       	out	0x3f, r0	; 63
    7f40:	0f 90       	pop	r0
    7f42:	1f 90       	pop	r1
    7f44:	18 95       	reti

00007f46 <__vector_112>:
   }

}/*End ISR( TCF0_CCB_vect)*/

ISR( TCF0_CCC_vect)
{
    7f46:	1f 92       	push	r1
    7f48:	0f 92       	push	r0
    7f4a:	0f b6       	in	r0, 0x3f	; 63
    7f4c:	0f 92       	push	r0
    7f4e:	08 b6       	in	r0, 0x38	; 56
    7f50:	0f 92       	push	r0
    7f52:	09 b6       	in	r0, 0x39	; 57
    7f54:	0f 92       	push	r0
    7f56:	0b b6       	in	r0, 0x3b	; 59
    7f58:	0f 92       	push	r0
    7f5a:	11 24       	eor	r1, r1
    7f5c:	18 be       	out	0x38, r1	; 56
    7f5e:	19 be       	out	0x39, r1	; 57
    7f60:	1b be       	out	0x3b, r1	; 59
    7f62:	2f 93       	push	r18
    7f64:	3f 93       	push	r19
    7f66:	4f 93       	push	r20
    7f68:	5f 93       	push	r21
    7f6a:	6f 93       	push	r22
    7f6c:	7f 93       	push	r23
    7f6e:	8f 93       	push	r24
    7f70:	9f 93       	push	r25
    7f72:	af 93       	push	r26
    7f74:	bf 93       	push	r27
    7f76:	ef 93       	push	r30
    7f78:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_C);
    7f7a:	80 e2       	ldi	r24, 0x20	; 32
    7f7c:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7f80:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7f82:	00 97       	sbiw	r24, 0x00	; 0
    7f84:	31 f0       	breq	.+12     	; 0x7f92 <__vector_112+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    7f86:	01 80       	ldd	r0, Z+1	; 0x01
    7f88:	f2 81       	ldd	r31, Z+2	; 0x02
    7f8a:	e0 2d       	mov	r30, r0
    7f8c:	30 97       	sbiw	r30, 0x00	; 0
    7f8e:	09 f0       	breq	.+2      	; 0x7f92 <__vector_112+0x4c>
         pt_intHndl->pf_funPtr();
    7f90:	19 95       	eicall
   }

}/*End ISR( TCF0_CCC_vect)*/
    7f92:	ff 91       	pop	r31
    7f94:	ef 91       	pop	r30
    7f96:	bf 91       	pop	r27
    7f98:	af 91       	pop	r26
    7f9a:	9f 91       	pop	r25
    7f9c:	8f 91       	pop	r24
    7f9e:	7f 91       	pop	r23
    7fa0:	6f 91       	pop	r22
    7fa2:	5f 91       	pop	r21
    7fa4:	4f 91       	pop	r20
    7fa6:	3f 91       	pop	r19
    7fa8:	2f 91       	pop	r18
    7faa:	0f 90       	pop	r0
    7fac:	0b be       	out	0x3b, r0	; 59
    7fae:	0f 90       	pop	r0
    7fb0:	09 be       	out	0x39, r0	; 57
    7fb2:	0f 90       	pop	r0
    7fb4:	08 be       	out	0x38, r0	; 56
    7fb6:	0f 90       	pop	r0
    7fb8:	0f be       	out	0x3f, r0	; 63
    7fba:	0f 90       	pop	r0
    7fbc:	1f 90       	pop	r1
    7fbe:	18 95       	reti

00007fc0 <__vector_111>:
   }

}/*End ISR( TCF0_CCA_vect)*/

ISR( TCF0_CCB_vect)
{
    7fc0:	1f 92       	push	r1
    7fc2:	0f 92       	push	r0
    7fc4:	0f b6       	in	r0, 0x3f	; 63
    7fc6:	0f 92       	push	r0
    7fc8:	08 b6       	in	r0, 0x38	; 56
    7fca:	0f 92       	push	r0
    7fcc:	09 b6       	in	r0, 0x39	; 57
    7fce:	0f 92       	push	r0
    7fd0:	0b b6       	in	r0, 0x3b	; 59
    7fd2:	0f 92       	push	r0
    7fd4:	11 24       	eor	r1, r1
    7fd6:	18 be       	out	0x38, r1	; 56
    7fd8:	19 be       	out	0x39, r1	; 57
    7fda:	1b be       	out	0x3b, r1	; 59
    7fdc:	2f 93       	push	r18
    7fde:	3f 93       	push	r19
    7fe0:	4f 93       	push	r20
    7fe2:	5f 93       	push	r21
    7fe4:	6f 93       	push	r22
    7fe6:	7f 93       	push	r23
    7fe8:	8f 93       	push	r24
    7fea:	9f 93       	push	r25
    7fec:	af 93       	push	r26
    7fee:	bf 93       	push	r27
    7ff0:	ef 93       	push	r30
    7ff2:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_B);
    7ff4:	8f e1       	ldi	r24, 0x1F	; 31
    7ff6:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    7ffa:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    7ffc:	00 97       	sbiw	r24, 0x00	; 0
    7ffe:	31 f0       	breq	.+12     	; 0x800c <__vector_111+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8000:	01 80       	ldd	r0, Z+1	; 0x01
    8002:	f2 81       	ldd	r31, Z+2	; 0x02
    8004:	e0 2d       	mov	r30, r0
    8006:	30 97       	sbiw	r30, 0x00	; 0
    8008:	09 f0       	breq	.+2      	; 0x800c <__vector_111+0x4c>
         pt_intHndl->pf_funPtr();
    800a:	19 95       	eicall
   }

}/*End ISR( TCF0_CCB_vect)*/
    800c:	ff 91       	pop	r31
    800e:	ef 91       	pop	r30
    8010:	bf 91       	pop	r27
    8012:	af 91       	pop	r26
    8014:	9f 91       	pop	r25
    8016:	8f 91       	pop	r24
    8018:	7f 91       	pop	r23
    801a:	6f 91       	pop	r22
    801c:	5f 91       	pop	r21
    801e:	4f 91       	pop	r20
    8020:	3f 91       	pop	r19
    8022:	2f 91       	pop	r18
    8024:	0f 90       	pop	r0
    8026:	0b be       	out	0x3b, r0	; 59
    8028:	0f 90       	pop	r0
    802a:	09 be       	out	0x39, r0	; 57
    802c:	0f 90       	pop	r0
    802e:	08 be       	out	0x38, r0	; 56
    8030:	0f 90       	pop	r0
    8032:	0f be       	out	0x3f, r0	; 63
    8034:	0f 90       	pop	r0
    8036:	1f 90       	pop	r1
    8038:	18 95       	reti

0000803a <__vector_110>:
   }

}/*End ISR( TCE1_OVF_vect)*/

ISR( TCF0_CCA_vect)
{
    803a:	1f 92       	push	r1
    803c:	0f 92       	push	r0
    803e:	0f b6       	in	r0, 0x3f	; 63
    8040:	0f 92       	push	r0
    8042:	08 b6       	in	r0, 0x38	; 56
    8044:	0f 92       	push	r0
    8046:	09 b6       	in	r0, 0x39	; 57
    8048:	0f 92       	push	r0
    804a:	0b b6       	in	r0, 0x3b	; 59
    804c:	0f 92       	push	r0
    804e:	11 24       	eor	r1, r1
    8050:	18 be       	out	0x38, r1	; 56
    8052:	19 be       	out	0x39, r1	; 57
    8054:	1b be       	out	0x3b, r1	; 59
    8056:	2f 93       	push	r18
    8058:	3f 93       	push	r19
    805a:	4f 93       	push	r20
    805c:	5f 93       	push	r21
    805e:	6f 93       	push	r22
    8060:	7f 93       	push	r23
    8062:	8f 93       	push	r24
    8064:	9f 93       	push	r25
    8066:	af 93       	push	r26
    8068:	bf 93       	push	r27
    806a:	ef 93       	push	r30
    806c:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_7_COMP_A);
    806e:	8e e1       	ldi	r24, 0x1E	; 30
    8070:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8074:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8076:	00 97       	sbiw	r24, 0x00	; 0
    8078:	31 f0       	breq	.+12     	; 0x8086 <__vector_110+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    807a:	01 80       	ldd	r0, Z+1	; 0x01
    807c:	f2 81       	ldd	r31, Z+2	; 0x02
    807e:	e0 2d       	mov	r30, r0
    8080:	30 97       	sbiw	r30, 0x00	; 0
    8082:	09 f0       	breq	.+2      	; 0x8086 <__vector_110+0x4c>
         pt_intHndl->pf_funPtr();
    8084:	19 95       	eicall
   }

}/*End ISR( TCF0_CCA_vect)*/
    8086:	ff 91       	pop	r31
    8088:	ef 91       	pop	r30
    808a:	bf 91       	pop	r27
    808c:	af 91       	pop	r26
    808e:	9f 91       	pop	r25
    8090:	8f 91       	pop	r24
    8092:	7f 91       	pop	r23
    8094:	6f 91       	pop	r22
    8096:	5f 91       	pop	r21
    8098:	4f 91       	pop	r20
    809a:	3f 91       	pop	r19
    809c:	2f 91       	pop	r18
    809e:	0f 90       	pop	r0
    80a0:	0b be       	out	0x3b, r0	; 59
    80a2:	0f 90       	pop	r0
    80a4:	09 be       	out	0x39, r0	; 57
    80a6:	0f 90       	pop	r0
    80a8:	08 be       	out	0x38, r0	; 56
    80aa:	0f 90       	pop	r0
    80ac:	0f be       	out	0x3f, r0	; 63
    80ae:	0f 90       	pop	r0
    80b0:	1f 90       	pop	r1
    80b2:	18 95       	reti

000080b4 <__vector_53>:
   }

}/*End ISR( TCE1_CCB_vect)*/

ISR( TCE1_OVF_vect)
{
    80b4:	1f 92       	push	r1
    80b6:	0f 92       	push	r0
    80b8:	0f b6       	in	r0, 0x3f	; 63
    80ba:	0f 92       	push	r0
    80bc:	08 b6       	in	r0, 0x38	; 56
    80be:	0f 92       	push	r0
    80c0:	09 b6       	in	r0, 0x39	; 57
    80c2:	0f 92       	push	r0
    80c4:	0b b6       	in	r0, 0x3b	; 59
    80c6:	0f 92       	push	r0
    80c8:	11 24       	eor	r1, r1
    80ca:	18 be       	out	0x38, r1	; 56
    80cc:	19 be       	out	0x39, r1	; 57
    80ce:	1b be       	out	0x3b, r1	; 59
    80d0:	2f 93       	push	r18
    80d2:	3f 93       	push	r19
    80d4:	4f 93       	push	r20
    80d6:	5f 93       	push	r21
    80d8:	6f 93       	push	r22
    80da:	7f 93       	push	r23
    80dc:	8f 93       	push	r24
    80de:	9f 93       	push	r25
    80e0:	af 93       	push	r26
    80e2:	bf 93       	push	r27
    80e4:	ef 93       	push	r30
    80e6:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_OVERFLOW);
    80e8:	8d e1       	ldi	r24, 0x1D	; 29
    80ea:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    80ee:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    80f0:	00 97       	sbiw	r24, 0x00	; 0
    80f2:	31 f0       	breq	.+12     	; 0x8100 <__vector_53+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    80f4:	01 80       	ldd	r0, Z+1	; 0x01
    80f6:	f2 81       	ldd	r31, Z+2	; 0x02
    80f8:	e0 2d       	mov	r30, r0
    80fa:	30 97       	sbiw	r30, 0x00	; 0
    80fc:	09 f0       	breq	.+2      	; 0x8100 <__vector_53+0x4c>
         pt_intHndl->pf_funPtr();
    80fe:	19 95       	eicall
   }

}/*End ISR( TCE1_OVF_vect)*/
    8100:	ff 91       	pop	r31
    8102:	ef 91       	pop	r30
    8104:	bf 91       	pop	r27
    8106:	af 91       	pop	r26
    8108:	9f 91       	pop	r25
    810a:	8f 91       	pop	r24
    810c:	7f 91       	pop	r23
    810e:	6f 91       	pop	r22
    8110:	5f 91       	pop	r21
    8112:	4f 91       	pop	r20
    8114:	3f 91       	pop	r19
    8116:	2f 91       	pop	r18
    8118:	0f 90       	pop	r0
    811a:	0b be       	out	0x3b, r0	; 59
    811c:	0f 90       	pop	r0
    811e:	09 be       	out	0x39, r0	; 57
    8120:	0f 90       	pop	r0
    8122:	08 be       	out	0x38, r0	; 56
    8124:	0f 90       	pop	r0
    8126:	0f be       	out	0x3f, r0	; 63
    8128:	0f 90       	pop	r0
    812a:	1f 90       	pop	r1
    812c:	18 95       	reti

0000812e <__vector_56>:
   }

}/*End ISR( TCE1_CCA_vect)*/

ISR( TCE1_CCB_vect)
{
    812e:	1f 92       	push	r1
    8130:	0f 92       	push	r0
    8132:	0f b6       	in	r0, 0x3f	; 63
    8134:	0f 92       	push	r0
    8136:	08 b6       	in	r0, 0x38	; 56
    8138:	0f 92       	push	r0
    813a:	09 b6       	in	r0, 0x39	; 57
    813c:	0f 92       	push	r0
    813e:	0b b6       	in	r0, 0x3b	; 59
    8140:	0f 92       	push	r0
    8142:	11 24       	eor	r1, r1
    8144:	18 be       	out	0x38, r1	; 56
    8146:	19 be       	out	0x39, r1	; 57
    8148:	1b be       	out	0x3b, r1	; 59
    814a:	2f 93       	push	r18
    814c:	3f 93       	push	r19
    814e:	4f 93       	push	r20
    8150:	5f 93       	push	r21
    8152:	6f 93       	push	r22
    8154:	7f 93       	push	r23
    8156:	8f 93       	push	r24
    8158:	9f 93       	push	r25
    815a:	af 93       	push	r26
    815c:	bf 93       	push	r27
    815e:	ef 93       	push	r30
    8160:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_COMP_B);
    8162:	8a e1       	ldi	r24, 0x1A	; 26
    8164:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8168:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    816a:	00 97       	sbiw	r24, 0x00	; 0
    816c:	31 f0       	breq	.+12     	; 0x817a <__vector_56+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    816e:	01 80       	ldd	r0, Z+1	; 0x01
    8170:	f2 81       	ldd	r31, Z+2	; 0x02
    8172:	e0 2d       	mov	r30, r0
    8174:	30 97       	sbiw	r30, 0x00	; 0
    8176:	09 f0       	breq	.+2      	; 0x817a <__vector_56+0x4c>
         pt_intHndl->pf_funPtr();
    8178:	19 95       	eicall
   }

}/*End ISR( TCE1_CCB_vect)*/
    817a:	ff 91       	pop	r31
    817c:	ef 91       	pop	r30
    817e:	bf 91       	pop	r27
    8180:	af 91       	pop	r26
    8182:	9f 91       	pop	r25
    8184:	8f 91       	pop	r24
    8186:	7f 91       	pop	r23
    8188:	6f 91       	pop	r22
    818a:	5f 91       	pop	r21
    818c:	4f 91       	pop	r20
    818e:	3f 91       	pop	r19
    8190:	2f 91       	pop	r18
    8192:	0f 90       	pop	r0
    8194:	0b be       	out	0x3b, r0	; 59
    8196:	0f 90       	pop	r0
    8198:	09 be       	out	0x39, r0	; 57
    819a:	0f 90       	pop	r0
    819c:	08 be       	out	0x38, r0	; 56
    819e:	0f 90       	pop	r0
    81a0:	0f be       	out	0x3f, r0	; 63
    81a2:	0f 90       	pop	r0
    81a4:	1f 90       	pop	r1
    81a6:	18 95       	reti

000081a8 <__vector_55>:
   }

}/*End ISR( TCE0_OVF_vect)*/

ISR( TCE1_CCA_vect)
{
    81a8:	1f 92       	push	r1
    81aa:	0f 92       	push	r0
    81ac:	0f b6       	in	r0, 0x3f	; 63
    81ae:	0f 92       	push	r0
    81b0:	08 b6       	in	r0, 0x38	; 56
    81b2:	0f 92       	push	r0
    81b4:	09 b6       	in	r0, 0x39	; 57
    81b6:	0f 92       	push	r0
    81b8:	0b b6       	in	r0, 0x3b	; 59
    81ba:	0f 92       	push	r0
    81bc:	11 24       	eor	r1, r1
    81be:	18 be       	out	0x38, r1	; 56
    81c0:	19 be       	out	0x39, r1	; 57
    81c2:	1b be       	out	0x3b, r1	; 59
    81c4:	2f 93       	push	r18
    81c6:	3f 93       	push	r19
    81c8:	4f 93       	push	r20
    81ca:	5f 93       	push	r21
    81cc:	6f 93       	push	r22
    81ce:	7f 93       	push	r23
    81d0:	8f 93       	push	r24
    81d2:	9f 93       	push	r25
    81d4:	af 93       	push	r26
    81d6:	bf 93       	push	r27
    81d8:	ef 93       	push	r30
    81da:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_6_COMP_A);
    81dc:	89 e1       	ldi	r24, 0x19	; 25
    81de:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    81e2:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    81e4:	00 97       	sbiw	r24, 0x00	; 0
    81e6:	31 f0       	breq	.+12     	; 0x81f4 <__vector_55+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    81e8:	01 80       	ldd	r0, Z+1	; 0x01
    81ea:	f2 81       	ldd	r31, Z+2	; 0x02
    81ec:	e0 2d       	mov	r30, r0
    81ee:	30 97       	sbiw	r30, 0x00	; 0
    81f0:	09 f0       	breq	.+2      	; 0x81f4 <__vector_55+0x4c>
         pt_intHndl->pf_funPtr();
    81f2:	19 95       	eicall
   }

}/*End ISR( TCE1_CCA_vect)*/
    81f4:	ff 91       	pop	r31
    81f6:	ef 91       	pop	r30
    81f8:	bf 91       	pop	r27
    81fa:	af 91       	pop	r26
    81fc:	9f 91       	pop	r25
    81fe:	8f 91       	pop	r24
    8200:	7f 91       	pop	r23
    8202:	6f 91       	pop	r22
    8204:	5f 91       	pop	r21
    8206:	4f 91       	pop	r20
    8208:	3f 91       	pop	r19
    820a:	2f 91       	pop	r18
    820c:	0f 90       	pop	r0
    820e:	0b be       	out	0x3b, r0	; 59
    8210:	0f 90       	pop	r0
    8212:	09 be       	out	0x39, r0	; 57
    8214:	0f 90       	pop	r0
    8216:	08 be       	out	0x38, r0	; 56
    8218:	0f 90       	pop	r0
    821a:	0f be       	out	0x3f, r0	; 63
    821c:	0f 90       	pop	r0
    821e:	1f 90       	pop	r1
    8220:	18 95       	reti

00008222 <__vector_47>:
   }

}/*End ISR( TCE0_CCD_vect)*/

ISR( TCE0_OVF_vect)
{
    8222:	1f 92       	push	r1
    8224:	0f 92       	push	r0
    8226:	0f b6       	in	r0, 0x3f	; 63
    8228:	0f 92       	push	r0
    822a:	08 b6       	in	r0, 0x38	; 56
    822c:	0f 92       	push	r0
    822e:	09 b6       	in	r0, 0x39	; 57
    8230:	0f 92       	push	r0
    8232:	0b b6       	in	r0, 0x3b	; 59
    8234:	0f 92       	push	r0
    8236:	11 24       	eor	r1, r1
    8238:	18 be       	out	0x38, r1	; 56
    823a:	19 be       	out	0x39, r1	; 57
    823c:	1b be       	out	0x3b, r1	; 59
    823e:	2f 93       	push	r18
    8240:	3f 93       	push	r19
    8242:	4f 93       	push	r20
    8244:	5f 93       	push	r21
    8246:	6f 93       	push	r22
    8248:	7f 93       	push	r23
    824a:	8f 93       	push	r24
    824c:	9f 93       	push	r25
    824e:	af 93       	push	r26
    8250:	bf 93       	push	r27
    8252:	ef 93       	push	r30
    8254:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_OVERFLOW);
    8256:	88 e1       	ldi	r24, 0x18	; 24
    8258:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    825c:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    825e:	00 97       	sbiw	r24, 0x00	; 0
    8260:	31 f0       	breq	.+12     	; 0x826e <__vector_47+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8262:	01 80       	ldd	r0, Z+1	; 0x01
    8264:	f2 81       	ldd	r31, Z+2	; 0x02
    8266:	e0 2d       	mov	r30, r0
    8268:	30 97       	sbiw	r30, 0x00	; 0
    826a:	09 f0       	breq	.+2      	; 0x826e <__vector_47+0x4c>
         pt_intHndl->pf_funPtr();
    826c:	19 95       	eicall
   }

}/*End ISR( TCE0_OVF_vect)*/
    826e:	ff 91       	pop	r31
    8270:	ef 91       	pop	r30
    8272:	bf 91       	pop	r27
    8274:	af 91       	pop	r26
    8276:	9f 91       	pop	r25
    8278:	8f 91       	pop	r24
    827a:	7f 91       	pop	r23
    827c:	6f 91       	pop	r22
    827e:	5f 91       	pop	r21
    8280:	4f 91       	pop	r20
    8282:	3f 91       	pop	r19
    8284:	2f 91       	pop	r18
    8286:	0f 90       	pop	r0
    8288:	0b be       	out	0x3b, r0	; 59
    828a:	0f 90       	pop	r0
    828c:	09 be       	out	0x39, r0	; 57
    828e:	0f 90       	pop	r0
    8290:	08 be       	out	0x38, r0	; 56
    8292:	0f 90       	pop	r0
    8294:	0f be       	out	0x3f, r0	; 63
    8296:	0f 90       	pop	r0
    8298:	1f 90       	pop	r1
    829a:	18 95       	reti

0000829c <__vector_52>:
   }

}/*End ISR( TCE0_CCC_vect)*/

ISR( TCE0_CCD_vect)
{
    829c:	1f 92       	push	r1
    829e:	0f 92       	push	r0
    82a0:	0f b6       	in	r0, 0x3f	; 63
    82a2:	0f 92       	push	r0
    82a4:	08 b6       	in	r0, 0x38	; 56
    82a6:	0f 92       	push	r0
    82a8:	09 b6       	in	r0, 0x39	; 57
    82aa:	0f 92       	push	r0
    82ac:	0b b6       	in	r0, 0x3b	; 59
    82ae:	0f 92       	push	r0
    82b0:	11 24       	eor	r1, r1
    82b2:	18 be       	out	0x38, r1	; 56
    82b4:	19 be       	out	0x39, r1	; 57
    82b6:	1b be       	out	0x3b, r1	; 59
    82b8:	2f 93       	push	r18
    82ba:	3f 93       	push	r19
    82bc:	4f 93       	push	r20
    82be:	5f 93       	push	r21
    82c0:	6f 93       	push	r22
    82c2:	7f 93       	push	r23
    82c4:	8f 93       	push	r24
    82c6:	9f 93       	push	r25
    82c8:	af 93       	push	r26
    82ca:	bf 93       	push	r27
    82cc:	ef 93       	push	r30
    82ce:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_D);
    82d0:	87 e1       	ldi	r24, 0x17	; 23
    82d2:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    82d6:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    82d8:	00 97       	sbiw	r24, 0x00	; 0
    82da:	31 f0       	breq	.+12     	; 0x82e8 <__vector_52+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    82dc:	01 80       	ldd	r0, Z+1	; 0x01
    82de:	f2 81       	ldd	r31, Z+2	; 0x02
    82e0:	e0 2d       	mov	r30, r0
    82e2:	30 97       	sbiw	r30, 0x00	; 0
    82e4:	09 f0       	breq	.+2      	; 0x82e8 <__vector_52+0x4c>
         pt_intHndl->pf_funPtr();
    82e6:	19 95       	eicall
   }

}/*End ISR( TCE0_CCD_vect)*/
    82e8:	ff 91       	pop	r31
    82ea:	ef 91       	pop	r30
    82ec:	bf 91       	pop	r27
    82ee:	af 91       	pop	r26
    82f0:	9f 91       	pop	r25
    82f2:	8f 91       	pop	r24
    82f4:	7f 91       	pop	r23
    82f6:	6f 91       	pop	r22
    82f8:	5f 91       	pop	r21
    82fa:	4f 91       	pop	r20
    82fc:	3f 91       	pop	r19
    82fe:	2f 91       	pop	r18
    8300:	0f 90       	pop	r0
    8302:	0b be       	out	0x3b, r0	; 59
    8304:	0f 90       	pop	r0
    8306:	09 be       	out	0x39, r0	; 57
    8308:	0f 90       	pop	r0
    830a:	08 be       	out	0x38, r0	; 56
    830c:	0f 90       	pop	r0
    830e:	0f be       	out	0x3f, r0	; 63
    8310:	0f 90       	pop	r0
    8312:	1f 90       	pop	r1
    8314:	18 95       	reti

00008316 <__vector_51>:
   }

}/*End ISR( TCE0_CCB_vect)*/

ISR( TCE0_CCC_vect)
{
    8316:	1f 92       	push	r1
    8318:	0f 92       	push	r0
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	0f 92       	push	r0
    831e:	08 b6       	in	r0, 0x38	; 56
    8320:	0f 92       	push	r0
    8322:	09 b6       	in	r0, 0x39	; 57
    8324:	0f 92       	push	r0
    8326:	0b b6       	in	r0, 0x3b	; 59
    8328:	0f 92       	push	r0
    832a:	11 24       	eor	r1, r1
    832c:	18 be       	out	0x38, r1	; 56
    832e:	19 be       	out	0x39, r1	; 57
    8330:	1b be       	out	0x3b, r1	; 59
    8332:	2f 93       	push	r18
    8334:	3f 93       	push	r19
    8336:	4f 93       	push	r20
    8338:	5f 93       	push	r21
    833a:	6f 93       	push	r22
    833c:	7f 93       	push	r23
    833e:	8f 93       	push	r24
    8340:	9f 93       	push	r25
    8342:	af 93       	push	r26
    8344:	bf 93       	push	r27
    8346:	ef 93       	push	r30
    8348:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_C);
    834a:	86 e1       	ldi	r24, 0x16	; 22
    834c:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8350:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8352:	00 97       	sbiw	r24, 0x00	; 0
    8354:	31 f0       	breq	.+12     	; 0x8362 <__vector_51+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8356:	01 80       	ldd	r0, Z+1	; 0x01
    8358:	f2 81       	ldd	r31, Z+2	; 0x02
    835a:	e0 2d       	mov	r30, r0
    835c:	30 97       	sbiw	r30, 0x00	; 0
    835e:	09 f0       	breq	.+2      	; 0x8362 <__vector_51+0x4c>
         pt_intHndl->pf_funPtr();
    8360:	19 95       	eicall
   }

}/*End ISR( TCE0_CCC_vect)*/
    8362:	ff 91       	pop	r31
    8364:	ef 91       	pop	r30
    8366:	bf 91       	pop	r27
    8368:	af 91       	pop	r26
    836a:	9f 91       	pop	r25
    836c:	8f 91       	pop	r24
    836e:	7f 91       	pop	r23
    8370:	6f 91       	pop	r22
    8372:	5f 91       	pop	r21
    8374:	4f 91       	pop	r20
    8376:	3f 91       	pop	r19
    8378:	2f 91       	pop	r18
    837a:	0f 90       	pop	r0
    837c:	0b be       	out	0x3b, r0	; 59
    837e:	0f 90       	pop	r0
    8380:	09 be       	out	0x39, r0	; 57
    8382:	0f 90       	pop	r0
    8384:	08 be       	out	0x38, r0	; 56
    8386:	0f 90       	pop	r0
    8388:	0f be       	out	0x3f, r0	; 63
    838a:	0f 90       	pop	r0
    838c:	1f 90       	pop	r1
    838e:	18 95       	reti

00008390 <__vector_50>:
   }

}/*End ISR( TCE0_CCA_vect)*/

ISR( TCE0_CCB_vect)
{
    8390:	1f 92       	push	r1
    8392:	0f 92       	push	r0
    8394:	0f b6       	in	r0, 0x3f	; 63
    8396:	0f 92       	push	r0
    8398:	08 b6       	in	r0, 0x38	; 56
    839a:	0f 92       	push	r0
    839c:	09 b6       	in	r0, 0x39	; 57
    839e:	0f 92       	push	r0
    83a0:	0b b6       	in	r0, 0x3b	; 59
    83a2:	0f 92       	push	r0
    83a4:	11 24       	eor	r1, r1
    83a6:	18 be       	out	0x38, r1	; 56
    83a8:	19 be       	out	0x39, r1	; 57
    83aa:	1b be       	out	0x3b, r1	; 59
    83ac:	2f 93       	push	r18
    83ae:	3f 93       	push	r19
    83b0:	4f 93       	push	r20
    83b2:	5f 93       	push	r21
    83b4:	6f 93       	push	r22
    83b6:	7f 93       	push	r23
    83b8:	8f 93       	push	r24
    83ba:	9f 93       	push	r25
    83bc:	af 93       	push	r26
    83be:	bf 93       	push	r27
    83c0:	ef 93       	push	r30
    83c2:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_B);
    83c4:	85 e1       	ldi	r24, 0x15	; 21
    83c6:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    83ca:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    83cc:	00 97       	sbiw	r24, 0x00	; 0
    83ce:	31 f0       	breq	.+12     	; 0x83dc <__vector_50+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    83d0:	01 80       	ldd	r0, Z+1	; 0x01
    83d2:	f2 81       	ldd	r31, Z+2	; 0x02
    83d4:	e0 2d       	mov	r30, r0
    83d6:	30 97       	sbiw	r30, 0x00	; 0
    83d8:	09 f0       	breq	.+2      	; 0x83dc <__vector_50+0x4c>
         pt_intHndl->pf_funPtr();
    83da:	19 95       	eicall
   }

}/*End ISR( TCE0_CCB_vect)*/
    83dc:	ff 91       	pop	r31
    83de:	ef 91       	pop	r30
    83e0:	bf 91       	pop	r27
    83e2:	af 91       	pop	r26
    83e4:	9f 91       	pop	r25
    83e6:	8f 91       	pop	r24
    83e8:	7f 91       	pop	r23
    83ea:	6f 91       	pop	r22
    83ec:	5f 91       	pop	r21
    83ee:	4f 91       	pop	r20
    83f0:	3f 91       	pop	r19
    83f2:	2f 91       	pop	r18
    83f4:	0f 90       	pop	r0
    83f6:	0b be       	out	0x3b, r0	; 59
    83f8:	0f 90       	pop	r0
    83fa:	09 be       	out	0x39, r0	; 57
    83fc:	0f 90       	pop	r0
    83fe:	08 be       	out	0x38, r0	; 56
    8400:	0f 90       	pop	r0
    8402:	0f be       	out	0x3f, r0	; 63
    8404:	0f 90       	pop	r0
    8406:	1f 90       	pop	r1
    8408:	18 95       	reti

0000840a <__vector_49>:
   }

}/*End ISR( TCD1_OVF_vect)*/

ISR( TCE0_CCA_vect)
{
    840a:	1f 92       	push	r1
    840c:	0f 92       	push	r0
    840e:	0f b6       	in	r0, 0x3f	; 63
    8410:	0f 92       	push	r0
    8412:	08 b6       	in	r0, 0x38	; 56
    8414:	0f 92       	push	r0
    8416:	09 b6       	in	r0, 0x39	; 57
    8418:	0f 92       	push	r0
    841a:	0b b6       	in	r0, 0x3b	; 59
    841c:	0f 92       	push	r0
    841e:	11 24       	eor	r1, r1
    8420:	18 be       	out	0x38, r1	; 56
    8422:	19 be       	out	0x39, r1	; 57
    8424:	1b be       	out	0x3b, r1	; 59
    8426:	2f 93       	push	r18
    8428:	3f 93       	push	r19
    842a:	4f 93       	push	r20
    842c:	5f 93       	push	r21
    842e:	6f 93       	push	r22
    8430:	7f 93       	push	r23
    8432:	8f 93       	push	r24
    8434:	9f 93       	push	r25
    8436:	af 93       	push	r26
    8438:	bf 93       	push	r27
    843a:	ef 93       	push	r30
    843c:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_5_COMP_A);
    843e:	84 e1       	ldi	r24, 0x14	; 20
    8440:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8444:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8446:	00 97       	sbiw	r24, 0x00	; 0
    8448:	31 f0       	breq	.+12     	; 0x8456 <__vector_49+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    844a:	01 80       	ldd	r0, Z+1	; 0x01
    844c:	f2 81       	ldd	r31, Z+2	; 0x02
    844e:	e0 2d       	mov	r30, r0
    8450:	30 97       	sbiw	r30, 0x00	; 0
    8452:	09 f0       	breq	.+2      	; 0x8456 <__vector_49+0x4c>
         pt_intHndl->pf_funPtr();
    8454:	19 95       	eicall
   }

}/*End ISR( TCE0_CCA_vect)*/
    8456:	ff 91       	pop	r31
    8458:	ef 91       	pop	r30
    845a:	bf 91       	pop	r27
    845c:	af 91       	pop	r26
    845e:	9f 91       	pop	r25
    8460:	8f 91       	pop	r24
    8462:	7f 91       	pop	r23
    8464:	6f 91       	pop	r22
    8466:	5f 91       	pop	r21
    8468:	4f 91       	pop	r20
    846a:	3f 91       	pop	r19
    846c:	2f 91       	pop	r18
    846e:	0f 90       	pop	r0
    8470:	0b be       	out	0x3b, r0	; 59
    8472:	0f 90       	pop	r0
    8474:	09 be       	out	0x39, r0	; 57
    8476:	0f 90       	pop	r0
    8478:	08 be       	out	0x38, r0	; 56
    847a:	0f 90       	pop	r0
    847c:	0f be       	out	0x3f, r0	; 63
    847e:	0f 90       	pop	r0
    8480:	1f 90       	pop	r1
    8482:	18 95       	reti

00008484 <__vector_83>:
   }

}/*End ISR( TCD1_CCB_vect)*/

ISR( TCD1_OVF_vect)
{
    8484:	1f 92       	push	r1
    8486:	0f 92       	push	r0
    8488:	0f b6       	in	r0, 0x3f	; 63
    848a:	0f 92       	push	r0
    848c:	08 b6       	in	r0, 0x38	; 56
    848e:	0f 92       	push	r0
    8490:	09 b6       	in	r0, 0x39	; 57
    8492:	0f 92       	push	r0
    8494:	0b b6       	in	r0, 0x3b	; 59
    8496:	0f 92       	push	r0
    8498:	11 24       	eor	r1, r1
    849a:	18 be       	out	0x38, r1	; 56
    849c:	19 be       	out	0x39, r1	; 57
    849e:	1b be       	out	0x3b, r1	; 59
    84a0:	2f 93       	push	r18
    84a2:	3f 93       	push	r19
    84a4:	4f 93       	push	r20
    84a6:	5f 93       	push	r21
    84a8:	6f 93       	push	r22
    84aa:	7f 93       	push	r23
    84ac:	8f 93       	push	r24
    84ae:	9f 93       	push	r25
    84b0:	af 93       	push	r26
    84b2:	bf 93       	push	r27
    84b4:	ef 93       	push	r30
    84b6:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_OVERFLOW);
    84b8:	83 e1       	ldi	r24, 0x13	; 19
    84ba:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    84be:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    84c0:	00 97       	sbiw	r24, 0x00	; 0
    84c2:	31 f0       	breq	.+12     	; 0x84d0 <__vector_83+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    84c4:	01 80       	ldd	r0, Z+1	; 0x01
    84c6:	f2 81       	ldd	r31, Z+2	; 0x02
    84c8:	e0 2d       	mov	r30, r0
    84ca:	30 97       	sbiw	r30, 0x00	; 0
    84cc:	09 f0       	breq	.+2      	; 0x84d0 <__vector_83+0x4c>
         pt_intHndl->pf_funPtr();
    84ce:	19 95       	eicall
   }

}/*End ISR( TCD1_OVF_vect)*/
    84d0:	ff 91       	pop	r31
    84d2:	ef 91       	pop	r30
    84d4:	bf 91       	pop	r27
    84d6:	af 91       	pop	r26
    84d8:	9f 91       	pop	r25
    84da:	8f 91       	pop	r24
    84dc:	7f 91       	pop	r23
    84de:	6f 91       	pop	r22
    84e0:	5f 91       	pop	r21
    84e2:	4f 91       	pop	r20
    84e4:	3f 91       	pop	r19
    84e6:	2f 91       	pop	r18
    84e8:	0f 90       	pop	r0
    84ea:	0b be       	out	0x3b, r0	; 59
    84ec:	0f 90       	pop	r0
    84ee:	09 be       	out	0x39, r0	; 57
    84f0:	0f 90       	pop	r0
    84f2:	08 be       	out	0x38, r0	; 56
    84f4:	0f 90       	pop	r0
    84f6:	0f be       	out	0x3f, r0	; 63
    84f8:	0f 90       	pop	r0
    84fa:	1f 90       	pop	r1
    84fc:	18 95       	reti

000084fe <__vector_86>:
   }

}/*End ISR( TCD1_CCA_vect)*/

ISR( TCD1_CCB_vect)
{
    84fe:	1f 92       	push	r1
    8500:	0f 92       	push	r0
    8502:	0f b6       	in	r0, 0x3f	; 63
    8504:	0f 92       	push	r0
    8506:	08 b6       	in	r0, 0x38	; 56
    8508:	0f 92       	push	r0
    850a:	09 b6       	in	r0, 0x39	; 57
    850c:	0f 92       	push	r0
    850e:	0b b6       	in	r0, 0x3b	; 59
    8510:	0f 92       	push	r0
    8512:	11 24       	eor	r1, r1
    8514:	18 be       	out	0x38, r1	; 56
    8516:	19 be       	out	0x39, r1	; 57
    8518:	1b be       	out	0x3b, r1	; 59
    851a:	2f 93       	push	r18
    851c:	3f 93       	push	r19
    851e:	4f 93       	push	r20
    8520:	5f 93       	push	r21
    8522:	6f 93       	push	r22
    8524:	7f 93       	push	r23
    8526:	8f 93       	push	r24
    8528:	9f 93       	push	r25
    852a:	af 93       	push	r26
    852c:	bf 93       	push	r27
    852e:	ef 93       	push	r30
    8530:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_COMP_B);
    8532:	80 e1       	ldi	r24, 0x10	; 16
    8534:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8538:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    853a:	00 97       	sbiw	r24, 0x00	; 0
    853c:	31 f0       	breq	.+12     	; 0x854a <__vector_86+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    853e:	01 80       	ldd	r0, Z+1	; 0x01
    8540:	f2 81       	ldd	r31, Z+2	; 0x02
    8542:	e0 2d       	mov	r30, r0
    8544:	30 97       	sbiw	r30, 0x00	; 0
    8546:	09 f0       	breq	.+2      	; 0x854a <__vector_86+0x4c>
         pt_intHndl->pf_funPtr();
    8548:	19 95       	eicall
   }

}/*End ISR( TCD1_CCB_vect)*/
    854a:	ff 91       	pop	r31
    854c:	ef 91       	pop	r30
    854e:	bf 91       	pop	r27
    8550:	af 91       	pop	r26
    8552:	9f 91       	pop	r25
    8554:	8f 91       	pop	r24
    8556:	7f 91       	pop	r23
    8558:	6f 91       	pop	r22
    855a:	5f 91       	pop	r21
    855c:	4f 91       	pop	r20
    855e:	3f 91       	pop	r19
    8560:	2f 91       	pop	r18
    8562:	0f 90       	pop	r0
    8564:	0b be       	out	0x3b, r0	; 59
    8566:	0f 90       	pop	r0
    8568:	09 be       	out	0x39, r0	; 57
    856a:	0f 90       	pop	r0
    856c:	08 be       	out	0x38, r0	; 56
    856e:	0f 90       	pop	r0
    8570:	0f be       	out	0x3f, r0	; 63
    8572:	0f 90       	pop	r0
    8574:	1f 90       	pop	r1
    8576:	18 95       	reti

00008578 <__vector_85>:
   }

}/*End ISR( TCD0_OVF_vect)*/

ISR( TCD1_CCA_vect)
{
    8578:	1f 92       	push	r1
    857a:	0f 92       	push	r0
    857c:	0f b6       	in	r0, 0x3f	; 63
    857e:	0f 92       	push	r0
    8580:	08 b6       	in	r0, 0x38	; 56
    8582:	0f 92       	push	r0
    8584:	09 b6       	in	r0, 0x39	; 57
    8586:	0f 92       	push	r0
    8588:	0b b6       	in	r0, 0x3b	; 59
    858a:	0f 92       	push	r0
    858c:	11 24       	eor	r1, r1
    858e:	18 be       	out	0x38, r1	; 56
    8590:	19 be       	out	0x39, r1	; 57
    8592:	1b be       	out	0x3b, r1	; 59
    8594:	2f 93       	push	r18
    8596:	3f 93       	push	r19
    8598:	4f 93       	push	r20
    859a:	5f 93       	push	r21
    859c:	6f 93       	push	r22
    859e:	7f 93       	push	r23
    85a0:	8f 93       	push	r24
    85a2:	9f 93       	push	r25
    85a4:	af 93       	push	r26
    85a6:	bf 93       	push	r27
    85a8:	ef 93       	push	r30
    85aa:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_4_COMP_A);
    85ac:	8f e0       	ldi	r24, 0x0F	; 15
    85ae:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    85b2:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    85b4:	00 97       	sbiw	r24, 0x00	; 0
    85b6:	31 f0       	breq	.+12     	; 0x85c4 <__vector_85+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    85b8:	01 80       	ldd	r0, Z+1	; 0x01
    85ba:	f2 81       	ldd	r31, Z+2	; 0x02
    85bc:	e0 2d       	mov	r30, r0
    85be:	30 97       	sbiw	r30, 0x00	; 0
    85c0:	09 f0       	breq	.+2      	; 0x85c4 <__vector_85+0x4c>
         pt_intHndl->pf_funPtr();
    85c2:	19 95       	eicall
   }

}/*End ISR( TCD1_CCA_vect)*/
    85c4:	ff 91       	pop	r31
    85c6:	ef 91       	pop	r30
    85c8:	bf 91       	pop	r27
    85ca:	af 91       	pop	r26
    85cc:	9f 91       	pop	r25
    85ce:	8f 91       	pop	r24
    85d0:	7f 91       	pop	r23
    85d2:	6f 91       	pop	r22
    85d4:	5f 91       	pop	r21
    85d6:	4f 91       	pop	r20
    85d8:	3f 91       	pop	r19
    85da:	2f 91       	pop	r18
    85dc:	0f 90       	pop	r0
    85de:	0b be       	out	0x3b, r0	; 59
    85e0:	0f 90       	pop	r0
    85e2:	09 be       	out	0x39, r0	; 57
    85e4:	0f 90       	pop	r0
    85e6:	08 be       	out	0x38, r0	; 56
    85e8:	0f 90       	pop	r0
    85ea:	0f be       	out	0x3f, r0	; 63
    85ec:	0f 90       	pop	r0
    85ee:	1f 90       	pop	r1
    85f0:	18 95       	reti

000085f2 <__vector_77>:
   }

}/*End ISR( TCD0_CCD_vect)*/

ISR( TCD0_OVF_vect)
{
    85f2:	1f 92       	push	r1
    85f4:	0f 92       	push	r0
    85f6:	0f b6       	in	r0, 0x3f	; 63
    85f8:	0f 92       	push	r0
    85fa:	08 b6       	in	r0, 0x38	; 56
    85fc:	0f 92       	push	r0
    85fe:	09 b6       	in	r0, 0x39	; 57
    8600:	0f 92       	push	r0
    8602:	0b b6       	in	r0, 0x3b	; 59
    8604:	0f 92       	push	r0
    8606:	11 24       	eor	r1, r1
    8608:	18 be       	out	0x38, r1	; 56
    860a:	19 be       	out	0x39, r1	; 57
    860c:	1b be       	out	0x3b, r1	; 59
    860e:	2f 93       	push	r18
    8610:	3f 93       	push	r19
    8612:	4f 93       	push	r20
    8614:	5f 93       	push	r21
    8616:	6f 93       	push	r22
    8618:	7f 93       	push	r23
    861a:	8f 93       	push	r24
    861c:	9f 93       	push	r25
    861e:	af 93       	push	r26
    8620:	bf 93       	push	r27
    8622:	ef 93       	push	r30
    8624:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_OVERFLOW);
    8626:	8e e0       	ldi	r24, 0x0E	; 14
    8628:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    862c:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    862e:	00 97       	sbiw	r24, 0x00	; 0
    8630:	31 f0       	breq	.+12     	; 0x863e <__vector_77+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8632:	01 80       	ldd	r0, Z+1	; 0x01
    8634:	f2 81       	ldd	r31, Z+2	; 0x02
    8636:	e0 2d       	mov	r30, r0
    8638:	30 97       	sbiw	r30, 0x00	; 0
    863a:	09 f0       	breq	.+2      	; 0x863e <__vector_77+0x4c>
         pt_intHndl->pf_funPtr();
    863c:	19 95       	eicall
   }

}/*End ISR( TCD0_OVF_vect)*/
    863e:	ff 91       	pop	r31
    8640:	ef 91       	pop	r30
    8642:	bf 91       	pop	r27
    8644:	af 91       	pop	r26
    8646:	9f 91       	pop	r25
    8648:	8f 91       	pop	r24
    864a:	7f 91       	pop	r23
    864c:	6f 91       	pop	r22
    864e:	5f 91       	pop	r21
    8650:	4f 91       	pop	r20
    8652:	3f 91       	pop	r19
    8654:	2f 91       	pop	r18
    8656:	0f 90       	pop	r0
    8658:	0b be       	out	0x3b, r0	; 59
    865a:	0f 90       	pop	r0
    865c:	09 be       	out	0x39, r0	; 57
    865e:	0f 90       	pop	r0
    8660:	08 be       	out	0x38, r0	; 56
    8662:	0f 90       	pop	r0
    8664:	0f be       	out	0x3f, r0	; 63
    8666:	0f 90       	pop	r0
    8668:	1f 90       	pop	r1
    866a:	18 95       	reti

0000866c <__vector_82>:
   }

}/*End ISR( TCD0_CCC_vect)*/

ISR( TCD0_CCD_vect)
{
    866c:	1f 92       	push	r1
    866e:	0f 92       	push	r0
    8670:	0f b6       	in	r0, 0x3f	; 63
    8672:	0f 92       	push	r0
    8674:	08 b6       	in	r0, 0x38	; 56
    8676:	0f 92       	push	r0
    8678:	09 b6       	in	r0, 0x39	; 57
    867a:	0f 92       	push	r0
    867c:	0b b6       	in	r0, 0x3b	; 59
    867e:	0f 92       	push	r0
    8680:	11 24       	eor	r1, r1
    8682:	18 be       	out	0x38, r1	; 56
    8684:	19 be       	out	0x39, r1	; 57
    8686:	1b be       	out	0x3b, r1	; 59
    8688:	2f 93       	push	r18
    868a:	3f 93       	push	r19
    868c:	4f 93       	push	r20
    868e:	5f 93       	push	r21
    8690:	6f 93       	push	r22
    8692:	7f 93       	push	r23
    8694:	8f 93       	push	r24
    8696:	9f 93       	push	r25
    8698:	af 93       	push	r26
    869a:	bf 93       	push	r27
    869c:	ef 93       	push	r30
    869e:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_D);
    86a0:	8d e0       	ldi	r24, 0x0D	; 13
    86a2:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    86a6:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    86a8:	00 97       	sbiw	r24, 0x00	; 0
    86aa:	31 f0       	breq	.+12     	; 0x86b8 <__vector_82+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    86ac:	01 80       	ldd	r0, Z+1	; 0x01
    86ae:	f2 81       	ldd	r31, Z+2	; 0x02
    86b0:	e0 2d       	mov	r30, r0
    86b2:	30 97       	sbiw	r30, 0x00	; 0
    86b4:	09 f0       	breq	.+2      	; 0x86b8 <__vector_82+0x4c>
         pt_intHndl->pf_funPtr();
    86b6:	19 95       	eicall
   }

}/*End ISR( TCD0_CCD_vect)*/
    86b8:	ff 91       	pop	r31
    86ba:	ef 91       	pop	r30
    86bc:	bf 91       	pop	r27
    86be:	af 91       	pop	r26
    86c0:	9f 91       	pop	r25
    86c2:	8f 91       	pop	r24
    86c4:	7f 91       	pop	r23
    86c6:	6f 91       	pop	r22
    86c8:	5f 91       	pop	r21
    86ca:	4f 91       	pop	r20
    86cc:	3f 91       	pop	r19
    86ce:	2f 91       	pop	r18
    86d0:	0f 90       	pop	r0
    86d2:	0b be       	out	0x3b, r0	; 59
    86d4:	0f 90       	pop	r0
    86d6:	09 be       	out	0x39, r0	; 57
    86d8:	0f 90       	pop	r0
    86da:	08 be       	out	0x38, r0	; 56
    86dc:	0f 90       	pop	r0
    86de:	0f be       	out	0x3f, r0	; 63
    86e0:	0f 90       	pop	r0
    86e2:	1f 90       	pop	r1
    86e4:	18 95       	reti

000086e6 <__vector_81>:
   }

}/*End ISR( TCD0_CCB_vect)*/

ISR( TCD0_CCC_vect)
{
    86e6:	1f 92       	push	r1
    86e8:	0f 92       	push	r0
    86ea:	0f b6       	in	r0, 0x3f	; 63
    86ec:	0f 92       	push	r0
    86ee:	08 b6       	in	r0, 0x38	; 56
    86f0:	0f 92       	push	r0
    86f2:	09 b6       	in	r0, 0x39	; 57
    86f4:	0f 92       	push	r0
    86f6:	0b b6       	in	r0, 0x3b	; 59
    86f8:	0f 92       	push	r0
    86fa:	11 24       	eor	r1, r1
    86fc:	18 be       	out	0x38, r1	; 56
    86fe:	19 be       	out	0x39, r1	; 57
    8700:	1b be       	out	0x3b, r1	; 59
    8702:	2f 93       	push	r18
    8704:	3f 93       	push	r19
    8706:	4f 93       	push	r20
    8708:	5f 93       	push	r21
    870a:	6f 93       	push	r22
    870c:	7f 93       	push	r23
    870e:	8f 93       	push	r24
    8710:	9f 93       	push	r25
    8712:	af 93       	push	r26
    8714:	bf 93       	push	r27
    8716:	ef 93       	push	r30
    8718:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_C);
    871a:	8c e0       	ldi	r24, 0x0C	; 12
    871c:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8720:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8722:	00 97       	sbiw	r24, 0x00	; 0
    8724:	31 f0       	breq	.+12     	; 0x8732 <__vector_81+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8726:	01 80       	ldd	r0, Z+1	; 0x01
    8728:	f2 81       	ldd	r31, Z+2	; 0x02
    872a:	e0 2d       	mov	r30, r0
    872c:	30 97       	sbiw	r30, 0x00	; 0
    872e:	09 f0       	breq	.+2      	; 0x8732 <__vector_81+0x4c>
         pt_intHndl->pf_funPtr();
    8730:	19 95       	eicall
   }

}/*End ISR( TCD0_CCC_vect)*/
    8732:	ff 91       	pop	r31
    8734:	ef 91       	pop	r30
    8736:	bf 91       	pop	r27
    8738:	af 91       	pop	r26
    873a:	9f 91       	pop	r25
    873c:	8f 91       	pop	r24
    873e:	7f 91       	pop	r23
    8740:	6f 91       	pop	r22
    8742:	5f 91       	pop	r21
    8744:	4f 91       	pop	r20
    8746:	3f 91       	pop	r19
    8748:	2f 91       	pop	r18
    874a:	0f 90       	pop	r0
    874c:	0b be       	out	0x3b, r0	; 59
    874e:	0f 90       	pop	r0
    8750:	09 be       	out	0x39, r0	; 57
    8752:	0f 90       	pop	r0
    8754:	08 be       	out	0x38, r0	; 56
    8756:	0f 90       	pop	r0
    8758:	0f be       	out	0x3f, r0	; 63
    875a:	0f 90       	pop	r0
    875c:	1f 90       	pop	r1
    875e:	18 95       	reti

00008760 <__vector_80>:
   }

}/*End ISR( TCD0_CCA_vect)*/

ISR( TCD0_CCB_vect)
{
    8760:	1f 92       	push	r1
    8762:	0f 92       	push	r0
    8764:	0f b6       	in	r0, 0x3f	; 63
    8766:	0f 92       	push	r0
    8768:	08 b6       	in	r0, 0x38	; 56
    876a:	0f 92       	push	r0
    876c:	09 b6       	in	r0, 0x39	; 57
    876e:	0f 92       	push	r0
    8770:	0b b6       	in	r0, 0x3b	; 59
    8772:	0f 92       	push	r0
    8774:	11 24       	eor	r1, r1
    8776:	18 be       	out	0x38, r1	; 56
    8778:	19 be       	out	0x39, r1	; 57
    877a:	1b be       	out	0x3b, r1	; 59
    877c:	2f 93       	push	r18
    877e:	3f 93       	push	r19
    8780:	4f 93       	push	r20
    8782:	5f 93       	push	r21
    8784:	6f 93       	push	r22
    8786:	7f 93       	push	r23
    8788:	8f 93       	push	r24
    878a:	9f 93       	push	r25
    878c:	af 93       	push	r26
    878e:	bf 93       	push	r27
    8790:	ef 93       	push	r30
    8792:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_B);
    8794:	8b e0       	ldi	r24, 0x0B	; 11
    8796:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    879a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    879c:	00 97       	sbiw	r24, 0x00	; 0
    879e:	31 f0       	breq	.+12     	; 0x87ac <__vector_80+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    87a0:	01 80       	ldd	r0, Z+1	; 0x01
    87a2:	f2 81       	ldd	r31, Z+2	; 0x02
    87a4:	e0 2d       	mov	r30, r0
    87a6:	30 97       	sbiw	r30, 0x00	; 0
    87a8:	09 f0       	breq	.+2      	; 0x87ac <__vector_80+0x4c>
         pt_intHndl->pf_funPtr();
    87aa:	19 95       	eicall
   }

}/*End ISR( TCD0_CCB_vect)*/
    87ac:	ff 91       	pop	r31
    87ae:	ef 91       	pop	r30
    87b0:	bf 91       	pop	r27
    87b2:	af 91       	pop	r26
    87b4:	9f 91       	pop	r25
    87b6:	8f 91       	pop	r24
    87b8:	7f 91       	pop	r23
    87ba:	6f 91       	pop	r22
    87bc:	5f 91       	pop	r21
    87be:	4f 91       	pop	r20
    87c0:	3f 91       	pop	r19
    87c2:	2f 91       	pop	r18
    87c4:	0f 90       	pop	r0
    87c6:	0b be       	out	0x3b, r0	; 59
    87c8:	0f 90       	pop	r0
    87ca:	09 be       	out	0x39, r0	; 57
    87cc:	0f 90       	pop	r0
    87ce:	08 be       	out	0x38, r0	; 56
    87d0:	0f 90       	pop	r0
    87d2:	0f be       	out	0x3f, r0	; 63
    87d4:	0f 90       	pop	r0
    87d6:	1f 90       	pop	r1
    87d8:	18 95       	reti

000087da <__vector_79>:
   }

}/*End ISR( TCC1_OVF_vect)*/

ISR( TCD0_CCA_vect)
{
    87da:	1f 92       	push	r1
    87dc:	0f 92       	push	r0
    87de:	0f b6       	in	r0, 0x3f	; 63
    87e0:	0f 92       	push	r0
    87e2:	08 b6       	in	r0, 0x38	; 56
    87e4:	0f 92       	push	r0
    87e6:	09 b6       	in	r0, 0x39	; 57
    87e8:	0f 92       	push	r0
    87ea:	0b b6       	in	r0, 0x3b	; 59
    87ec:	0f 92       	push	r0
    87ee:	11 24       	eor	r1, r1
    87f0:	18 be       	out	0x38, r1	; 56
    87f2:	19 be       	out	0x39, r1	; 57
    87f4:	1b be       	out	0x3b, r1	; 59
    87f6:	2f 93       	push	r18
    87f8:	3f 93       	push	r19
    87fa:	4f 93       	push	r20
    87fc:	5f 93       	push	r21
    87fe:	6f 93       	push	r22
    8800:	7f 93       	push	r23
    8802:	8f 93       	push	r24
    8804:	9f 93       	push	r25
    8806:	af 93       	push	r26
    8808:	bf 93       	push	r27
    880a:	ef 93       	push	r30
    880c:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_3_COMP_A);
    880e:	8a e0       	ldi	r24, 0x0A	; 10
    8810:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8814:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8816:	00 97       	sbiw	r24, 0x00	; 0
    8818:	31 f0       	breq	.+12     	; 0x8826 <__vector_79+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    881a:	01 80       	ldd	r0, Z+1	; 0x01
    881c:	f2 81       	ldd	r31, Z+2	; 0x02
    881e:	e0 2d       	mov	r30, r0
    8820:	30 97       	sbiw	r30, 0x00	; 0
    8822:	09 f0       	breq	.+2      	; 0x8826 <__vector_79+0x4c>
         pt_intHndl->pf_funPtr();
    8824:	19 95       	eicall
   }

}/*End ISR( TCD0_CCA_vect)*/
    8826:	ff 91       	pop	r31
    8828:	ef 91       	pop	r30
    882a:	bf 91       	pop	r27
    882c:	af 91       	pop	r26
    882e:	9f 91       	pop	r25
    8830:	8f 91       	pop	r24
    8832:	7f 91       	pop	r23
    8834:	6f 91       	pop	r22
    8836:	5f 91       	pop	r21
    8838:	4f 91       	pop	r20
    883a:	3f 91       	pop	r19
    883c:	2f 91       	pop	r18
    883e:	0f 90       	pop	r0
    8840:	0b be       	out	0x3b, r0	; 59
    8842:	0f 90       	pop	r0
    8844:	09 be       	out	0x39, r0	; 57
    8846:	0f 90       	pop	r0
    8848:	08 be       	out	0x38, r0	; 56
    884a:	0f 90       	pop	r0
    884c:	0f be       	out	0x3f, r0	; 63
    884e:	0f 90       	pop	r0
    8850:	1f 90       	pop	r1
    8852:	18 95       	reti

00008854 <__vector_20>:
   }

}/*End ISR( TCC1_CCB_vect)*/

ISR( TCC1_OVF_vect)
{
    8854:	1f 92       	push	r1
    8856:	0f 92       	push	r0
    8858:	0f b6       	in	r0, 0x3f	; 63
    885a:	0f 92       	push	r0
    885c:	08 b6       	in	r0, 0x38	; 56
    885e:	0f 92       	push	r0
    8860:	09 b6       	in	r0, 0x39	; 57
    8862:	0f 92       	push	r0
    8864:	0b b6       	in	r0, 0x3b	; 59
    8866:	0f 92       	push	r0
    8868:	11 24       	eor	r1, r1
    886a:	18 be       	out	0x38, r1	; 56
    886c:	19 be       	out	0x39, r1	; 57
    886e:	1b be       	out	0x3b, r1	; 59
    8870:	2f 93       	push	r18
    8872:	3f 93       	push	r19
    8874:	4f 93       	push	r20
    8876:	5f 93       	push	r21
    8878:	6f 93       	push	r22
    887a:	7f 93       	push	r23
    887c:	8f 93       	push	r24
    887e:	9f 93       	push	r25
    8880:	af 93       	push	r26
    8882:	bf 93       	push	r27
    8884:	ef 93       	push	r30
    8886:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_OVERFLOW);
    8888:	89 e0       	ldi	r24, 0x09	; 9
    888a:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    888e:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8890:	00 97       	sbiw	r24, 0x00	; 0
    8892:	31 f0       	breq	.+12     	; 0x88a0 <__vector_20+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8894:	01 80       	ldd	r0, Z+1	; 0x01
    8896:	f2 81       	ldd	r31, Z+2	; 0x02
    8898:	e0 2d       	mov	r30, r0
    889a:	30 97       	sbiw	r30, 0x00	; 0
    889c:	09 f0       	breq	.+2      	; 0x88a0 <__vector_20+0x4c>
         pt_intHndl->pf_funPtr();
    889e:	19 95       	eicall
   }

}/*End ISR( TCC1_OVF_vect)*/
    88a0:	ff 91       	pop	r31
    88a2:	ef 91       	pop	r30
    88a4:	bf 91       	pop	r27
    88a6:	af 91       	pop	r26
    88a8:	9f 91       	pop	r25
    88aa:	8f 91       	pop	r24
    88ac:	7f 91       	pop	r23
    88ae:	6f 91       	pop	r22
    88b0:	5f 91       	pop	r21
    88b2:	4f 91       	pop	r20
    88b4:	3f 91       	pop	r19
    88b6:	2f 91       	pop	r18
    88b8:	0f 90       	pop	r0
    88ba:	0b be       	out	0x3b, r0	; 59
    88bc:	0f 90       	pop	r0
    88be:	09 be       	out	0x39, r0	; 57
    88c0:	0f 90       	pop	r0
    88c2:	08 be       	out	0x38, r0	; 56
    88c4:	0f 90       	pop	r0
    88c6:	0f be       	out	0x3f, r0	; 63
    88c8:	0f 90       	pop	r0
    88ca:	1f 90       	pop	r1
    88cc:	18 95       	reti

000088ce <__vector_23>:
   }

}/*End ISR( TCC1_CCA_vect)*/

ISR( TCC1_CCB_vect)
{
    88ce:	1f 92       	push	r1
    88d0:	0f 92       	push	r0
    88d2:	0f b6       	in	r0, 0x3f	; 63
    88d4:	0f 92       	push	r0
    88d6:	08 b6       	in	r0, 0x38	; 56
    88d8:	0f 92       	push	r0
    88da:	09 b6       	in	r0, 0x39	; 57
    88dc:	0f 92       	push	r0
    88de:	0b b6       	in	r0, 0x3b	; 59
    88e0:	0f 92       	push	r0
    88e2:	11 24       	eor	r1, r1
    88e4:	18 be       	out	0x38, r1	; 56
    88e6:	19 be       	out	0x39, r1	; 57
    88e8:	1b be       	out	0x3b, r1	; 59
    88ea:	2f 93       	push	r18
    88ec:	3f 93       	push	r19
    88ee:	4f 93       	push	r20
    88f0:	5f 93       	push	r21
    88f2:	6f 93       	push	r22
    88f4:	7f 93       	push	r23
    88f6:	8f 93       	push	r24
    88f8:	9f 93       	push	r25
    88fa:	af 93       	push	r26
    88fc:	bf 93       	push	r27
    88fe:	ef 93       	push	r30
    8900:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_COMP_B);
    8902:	86 e0       	ldi	r24, 0x06	; 6
    8904:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8908:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    890a:	00 97       	sbiw	r24, 0x00	; 0
    890c:	31 f0       	breq	.+12     	; 0x891a <__vector_23+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    890e:	01 80       	ldd	r0, Z+1	; 0x01
    8910:	f2 81       	ldd	r31, Z+2	; 0x02
    8912:	e0 2d       	mov	r30, r0
    8914:	30 97       	sbiw	r30, 0x00	; 0
    8916:	09 f0       	breq	.+2      	; 0x891a <__vector_23+0x4c>
         pt_intHndl->pf_funPtr();
    8918:	19 95       	eicall
   }

}/*End ISR( TCC1_CCB_vect)*/
    891a:	ff 91       	pop	r31
    891c:	ef 91       	pop	r30
    891e:	bf 91       	pop	r27
    8920:	af 91       	pop	r26
    8922:	9f 91       	pop	r25
    8924:	8f 91       	pop	r24
    8926:	7f 91       	pop	r23
    8928:	6f 91       	pop	r22
    892a:	5f 91       	pop	r21
    892c:	4f 91       	pop	r20
    892e:	3f 91       	pop	r19
    8930:	2f 91       	pop	r18
    8932:	0f 90       	pop	r0
    8934:	0b be       	out	0x3b, r0	; 59
    8936:	0f 90       	pop	r0
    8938:	09 be       	out	0x39, r0	; 57
    893a:	0f 90       	pop	r0
    893c:	08 be       	out	0x38, r0	; 56
    893e:	0f 90       	pop	r0
    8940:	0f be       	out	0x3f, r0	; 63
    8942:	0f 90       	pop	r0
    8944:	1f 90       	pop	r1
    8946:	18 95       	reti

00008948 <__vector_22>:
   }

}/*End ISR( TCC0_OVF_vect)*/

ISR( TCC1_CCA_vect)
{
    8948:	1f 92       	push	r1
    894a:	0f 92       	push	r0
    894c:	0f b6       	in	r0, 0x3f	; 63
    894e:	0f 92       	push	r0
    8950:	08 b6       	in	r0, 0x38	; 56
    8952:	0f 92       	push	r0
    8954:	09 b6       	in	r0, 0x39	; 57
    8956:	0f 92       	push	r0
    8958:	0b b6       	in	r0, 0x3b	; 59
    895a:	0f 92       	push	r0
    895c:	11 24       	eor	r1, r1
    895e:	18 be       	out	0x38, r1	; 56
    8960:	19 be       	out	0x39, r1	; 57
    8962:	1b be       	out	0x3b, r1	; 59
    8964:	2f 93       	push	r18
    8966:	3f 93       	push	r19
    8968:	4f 93       	push	r20
    896a:	5f 93       	push	r21
    896c:	6f 93       	push	r22
    896e:	7f 93       	push	r23
    8970:	8f 93       	push	r24
    8972:	9f 93       	push	r25
    8974:	af 93       	push	r26
    8976:	bf 93       	push	r27
    8978:	ef 93       	push	r30
    897a:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_2_COMP_A);
    897c:	85 e0       	ldi	r24, 0x05	; 5
    897e:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8982:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8984:	00 97       	sbiw	r24, 0x00	; 0
    8986:	31 f0       	breq	.+12     	; 0x8994 <__vector_22+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8988:	01 80       	ldd	r0, Z+1	; 0x01
    898a:	f2 81       	ldd	r31, Z+2	; 0x02
    898c:	e0 2d       	mov	r30, r0
    898e:	30 97       	sbiw	r30, 0x00	; 0
    8990:	09 f0       	breq	.+2      	; 0x8994 <__vector_22+0x4c>
         pt_intHndl->pf_funPtr();
    8992:	19 95       	eicall
   }

}/*End ISR( TCC1_CCA_vect)*/
    8994:	ff 91       	pop	r31
    8996:	ef 91       	pop	r30
    8998:	bf 91       	pop	r27
    899a:	af 91       	pop	r26
    899c:	9f 91       	pop	r25
    899e:	8f 91       	pop	r24
    89a0:	7f 91       	pop	r23
    89a2:	6f 91       	pop	r22
    89a4:	5f 91       	pop	r21
    89a6:	4f 91       	pop	r20
    89a8:	3f 91       	pop	r19
    89aa:	2f 91       	pop	r18
    89ac:	0f 90       	pop	r0
    89ae:	0b be       	out	0x3b, r0	; 59
    89b0:	0f 90       	pop	r0
    89b2:	09 be       	out	0x39, r0	; 57
    89b4:	0f 90       	pop	r0
    89b6:	08 be       	out	0x38, r0	; 56
    89b8:	0f 90       	pop	r0
    89ba:	0f be       	out	0x3f, r0	; 63
    89bc:	0f 90       	pop	r0
    89be:	1f 90       	pop	r1
    89c0:	18 95       	reti

000089c2 <__vector_14>:
   }

}/*End ISR( TCC0_CCD_vect)*/

ISR( TCC0_OVF_vect)//, ISR_NAKED)
{
    89c2:	1f 92       	push	r1
    89c4:	0f 92       	push	r0
    89c6:	0f b6       	in	r0, 0x3f	; 63
    89c8:	0f 92       	push	r0
    89ca:	08 b6       	in	r0, 0x38	; 56
    89cc:	0f 92       	push	r0
    89ce:	09 b6       	in	r0, 0x39	; 57
    89d0:	0f 92       	push	r0
    89d2:	0b b6       	in	r0, 0x3b	; 59
    89d4:	0f 92       	push	r0
    89d6:	11 24       	eor	r1, r1
    89d8:	18 be       	out	0x38, r1	; 56
    89da:	19 be       	out	0x39, r1	; 57
    89dc:	1b be       	out	0x3b, r1	; 59
    89de:	2f 93       	push	r18
    89e0:	3f 93       	push	r19
    89e2:	4f 93       	push	r20
    89e4:	5f 93       	push	r21
    89e6:	6f 93       	push	r22
    89e8:	7f 93       	push	r23
    89ea:	8f 93       	push	r24
    89ec:	9f 93       	push	r25
    89ee:	af 93       	push	r26
    89f0:	bf 93       	push	r27
    89f2:	ef 93       	push	r30
    89f4:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_OVERFLOW);
    89f6:	84 e0       	ldi	r24, 0x04	; 4
    89f8:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    89fc:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    89fe:	00 97       	sbiw	r24, 0x00	; 0
    8a00:	31 f0       	breq	.+12     	; 0x8a0e <__vector_14+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8a02:	01 80       	ldd	r0, Z+1	; 0x01
    8a04:	f2 81       	ldd	r31, Z+2	; 0x02
    8a06:	e0 2d       	mov	r30, r0
    8a08:	30 97       	sbiw	r30, 0x00	; 0
    8a0a:	09 f0       	breq	.+2      	; 0x8a0e <__vector_14+0x4c>
         pt_intHndl->pf_funPtr();
    8a0c:	19 95       	eicall
   }

}/*End ISR( TCC0_OVF_vect)*/
    8a0e:	ff 91       	pop	r31
    8a10:	ef 91       	pop	r30
    8a12:	bf 91       	pop	r27
    8a14:	af 91       	pop	r26
    8a16:	9f 91       	pop	r25
    8a18:	8f 91       	pop	r24
    8a1a:	7f 91       	pop	r23
    8a1c:	6f 91       	pop	r22
    8a1e:	5f 91       	pop	r21
    8a20:	4f 91       	pop	r20
    8a22:	3f 91       	pop	r19
    8a24:	2f 91       	pop	r18
    8a26:	0f 90       	pop	r0
    8a28:	0b be       	out	0x3b, r0	; 59
    8a2a:	0f 90       	pop	r0
    8a2c:	09 be       	out	0x39, r0	; 57
    8a2e:	0f 90       	pop	r0
    8a30:	08 be       	out	0x38, r0	; 56
    8a32:	0f 90       	pop	r0
    8a34:	0f be       	out	0x3f, r0	; 63
    8a36:	0f 90       	pop	r0
    8a38:	1f 90       	pop	r1
    8a3a:	18 95       	reti

00008a3c <__vector_19>:
   }

}/*End ISR( TCC0_CCC_vect)*/

ISR( TCC0_CCD_vect)
{
    8a3c:	1f 92       	push	r1
    8a3e:	0f 92       	push	r0
    8a40:	0f b6       	in	r0, 0x3f	; 63
    8a42:	0f 92       	push	r0
    8a44:	08 b6       	in	r0, 0x38	; 56
    8a46:	0f 92       	push	r0
    8a48:	09 b6       	in	r0, 0x39	; 57
    8a4a:	0f 92       	push	r0
    8a4c:	0b b6       	in	r0, 0x3b	; 59
    8a4e:	0f 92       	push	r0
    8a50:	11 24       	eor	r1, r1
    8a52:	18 be       	out	0x38, r1	; 56
    8a54:	19 be       	out	0x39, r1	; 57
    8a56:	1b be       	out	0x3b, r1	; 59
    8a58:	2f 93       	push	r18
    8a5a:	3f 93       	push	r19
    8a5c:	4f 93       	push	r20
    8a5e:	5f 93       	push	r21
    8a60:	6f 93       	push	r22
    8a62:	7f 93       	push	r23
    8a64:	8f 93       	push	r24
    8a66:	9f 93       	push	r25
    8a68:	af 93       	push	r26
    8a6a:	bf 93       	push	r27
    8a6c:	ef 93       	push	r30
    8a6e:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_D);
    8a70:	83 e0       	ldi	r24, 0x03	; 3
    8a72:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8a76:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8a78:	00 97       	sbiw	r24, 0x00	; 0
    8a7a:	31 f0       	breq	.+12     	; 0x8a88 <__vector_19+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8a7c:	01 80       	ldd	r0, Z+1	; 0x01
    8a7e:	f2 81       	ldd	r31, Z+2	; 0x02
    8a80:	e0 2d       	mov	r30, r0
    8a82:	30 97       	sbiw	r30, 0x00	; 0
    8a84:	09 f0       	breq	.+2      	; 0x8a88 <__vector_19+0x4c>
         pt_intHndl->pf_funPtr();
    8a86:	19 95       	eicall
   }

}/*End ISR( TCC0_CCD_vect)*/
    8a88:	ff 91       	pop	r31
    8a8a:	ef 91       	pop	r30
    8a8c:	bf 91       	pop	r27
    8a8e:	af 91       	pop	r26
    8a90:	9f 91       	pop	r25
    8a92:	8f 91       	pop	r24
    8a94:	7f 91       	pop	r23
    8a96:	6f 91       	pop	r22
    8a98:	5f 91       	pop	r21
    8a9a:	4f 91       	pop	r20
    8a9c:	3f 91       	pop	r19
    8a9e:	2f 91       	pop	r18
    8aa0:	0f 90       	pop	r0
    8aa2:	0b be       	out	0x3b, r0	; 59
    8aa4:	0f 90       	pop	r0
    8aa6:	09 be       	out	0x39, r0	; 57
    8aa8:	0f 90       	pop	r0
    8aaa:	08 be       	out	0x38, r0	; 56
    8aac:	0f 90       	pop	r0
    8aae:	0f be       	out	0x3f, r0	; 63
    8ab0:	0f 90       	pop	r0
    8ab2:	1f 90       	pop	r1
    8ab4:	18 95       	reti

00008ab6 <__vector_18>:
   }

}/*End ISR( TCC0_CCB_vect)*/

ISR( TCC0_CCC_vect)
{
    8ab6:	1f 92       	push	r1
    8ab8:	0f 92       	push	r0
    8aba:	0f b6       	in	r0, 0x3f	; 63
    8abc:	0f 92       	push	r0
    8abe:	08 b6       	in	r0, 0x38	; 56
    8ac0:	0f 92       	push	r0
    8ac2:	09 b6       	in	r0, 0x39	; 57
    8ac4:	0f 92       	push	r0
    8ac6:	0b b6       	in	r0, 0x3b	; 59
    8ac8:	0f 92       	push	r0
    8aca:	11 24       	eor	r1, r1
    8acc:	18 be       	out	0x38, r1	; 56
    8ace:	19 be       	out	0x39, r1	; 57
    8ad0:	1b be       	out	0x3b, r1	; 59
    8ad2:	2f 93       	push	r18
    8ad4:	3f 93       	push	r19
    8ad6:	4f 93       	push	r20
    8ad8:	5f 93       	push	r21
    8ada:	6f 93       	push	r22
    8adc:	7f 93       	push	r23
    8ade:	8f 93       	push	r24
    8ae0:	9f 93       	push	r25
    8ae2:	af 93       	push	r26
    8ae4:	bf 93       	push	r27
    8ae6:	ef 93       	push	r30
    8ae8:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_C);
    8aea:	82 e0       	ldi	r24, 0x02	; 2
    8aec:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8af0:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8af2:	00 97       	sbiw	r24, 0x00	; 0
    8af4:	31 f0       	breq	.+12     	; 0x8b02 <__vector_18+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8af6:	01 80       	ldd	r0, Z+1	; 0x01
    8af8:	f2 81       	ldd	r31, Z+2	; 0x02
    8afa:	e0 2d       	mov	r30, r0
    8afc:	30 97       	sbiw	r30, 0x00	; 0
    8afe:	09 f0       	breq	.+2      	; 0x8b02 <__vector_18+0x4c>
         pt_intHndl->pf_funPtr();
    8b00:	19 95       	eicall
   }

}/*End ISR( TCC0_CCC_vect)*/
    8b02:	ff 91       	pop	r31
    8b04:	ef 91       	pop	r30
    8b06:	bf 91       	pop	r27
    8b08:	af 91       	pop	r26
    8b0a:	9f 91       	pop	r25
    8b0c:	8f 91       	pop	r24
    8b0e:	7f 91       	pop	r23
    8b10:	6f 91       	pop	r22
    8b12:	5f 91       	pop	r21
    8b14:	4f 91       	pop	r20
    8b16:	3f 91       	pop	r19
    8b18:	2f 91       	pop	r18
    8b1a:	0f 90       	pop	r0
    8b1c:	0b be       	out	0x3b, r0	; 59
    8b1e:	0f 90       	pop	r0
    8b20:	09 be       	out	0x39, r0	; 57
    8b22:	0f 90       	pop	r0
    8b24:	08 be       	out	0x38, r0	; 56
    8b26:	0f 90       	pop	r0
    8b28:	0f be       	out	0x3f, r0	; 63
    8b2a:	0f 90       	pop	r0
    8b2c:	1f 90       	pop	r1
    8b2e:	18 95       	reti

00008b30 <__vector_17>:
   }

}/*End ISR( TCC0_CCA_vect)*/

ISR( TCC0_CCB_vect)
{
    8b30:	1f 92       	push	r1
    8b32:	0f 92       	push	r0
    8b34:	0f b6       	in	r0, 0x3f	; 63
    8b36:	0f 92       	push	r0
    8b38:	08 b6       	in	r0, 0x38	; 56
    8b3a:	0f 92       	push	r0
    8b3c:	09 b6       	in	r0, 0x39	; 57
    8b3e:	0f 92       	push	r0
    8b40:	0b b6       	in	r0, 0x3b	; 59
    8b42:	0f 92       	push	r0
    8b44:	11 24       	eor	r1, r1
    8b46:	18 be       	out	0x38, r1	; 56
    8b48:	19 be       	out	0x39, r1	; 57
    8b4a:	1b be       	out	0x3b, r1	; 59
    8b4c:	2f 93       	push	r18
    8b4e:	3f 93       	push	r19
    8b50:	4f 93       	push	r20
    8b52:	5f 93       	push	r21
    8b54:	6f 93       	push	r22
    8b56:	7f 93       	push	r23
    8b58:	8f 93       	push	r24
    8b5a:	9f 93       	push	r25
    8b5c:	af 93       	push	r26
    8b5e:	bf 93       	push	r27
    8b60:	ef 93       	push	r30
    8b62:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_B);
    8b64:	81 e0       	ldi	r24, 0x01	; 1
    8b66:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8b6a:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8b6c:	00 97       	sbiw	r24, 0x00	; 0
    8b6e:	31 f0       	breq	.+12     	; 0x8b7c <__vector_17+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8b70:	01 80       	ldd	r0, Z+1	; 0x01
    8b72:	f2 81       	ldd	r31, Z+2	; 0x02
    8b74:	e0 2d       	mov	r30, r0
    8b76:	30 97       	sbiw	r30, 0x00	; 0
    8b78:	09 f0       	breq	.+2      	; 0x8b7c <__vector_17+0x4c>
         pt_intHndl->pf_funPtr();
    8b7a:	19 95       	eicall
   }

}/*End ISR( TCC0_CCB_vect)*/
    8b7c:	ff 91       	pop	r31
    8b7e:	ef 91       	pop	r30
    8b80:	bf 91       	pop	r27
    8b82:	af 91       	pop	r26
    8b84:	9f 91       	pop	r25
    8b86:	8f 91       	pop	r24
    8b88:	7f 91       	pop	r23
    8b8a:	6f 91       	pop	r22
    8b8c:	5f 91       	pop	r21
    8b8e:	4f 91       	pop	r20
    8b90:	3f 91       	pop	r19
    8b92:	2f 91       	pop	r18
    8b94:	0f 90       	pop	r0
    8b96:	0b be       	out	0x3b, r0	; 59
    8b98:	0f 90       	pop	r0
    8b9a:	09 be       	out	0x39, r0	; 57
    8b9c:	0f 90       	pop	r0
    8b9e:	08 be       	out	0x38, r0	; 56
    8ba0:	0f 90       	pop	r0
    8ba2:	0f be       	out	0x3f, r0	; 63
    8ba4:	0f 90       	pop	r0
    8ba6:	1f 90       	pop	r1
    8ba8:	18 95       	reti

00008baa <__vector_16>:
{

}/*End ISR( TCC0_ERR_vect)*/

ISR( TCC0_CCA_vect)
{
    8baa:	1f 92       	push	r1
    8bac:	0f 92       	push	r0
    8bae:	0f b6       	in	r0, 0x3f	; 63
    8bb0:	0f 92       	push	r0
    8bb2:	08 b6       	in	r0, 0x38	; 56
    8bb4:	0f 92       	push	r0
    8bb6:	09 b6       	in	r0, 0x39	; 57
    8bb8:	0f 92       	push	r0
    8bba:	0b b6       	in	r0, 0x3b	; 59
    8bbc:	0f 92       	push	r0
    8bbe:	11 24       	eor	r1, r1
    8bc0:	18 be       	out	0x38, r1	; 56
    8bc2:	19 be       	out	0x39, r1	; 57
    8bc4:	1b be       	out	0x3b, r1	; 59
    8bc6:	2f 93       	push	r18
    8bc8:	3f 93       	push	r19
    8bca:	4f 93       	push	r20
    8bcc:	5f 93       	push	r21
    8bce:	6f 93       	push	r22
    8bd0:	7f 93       	push	r23
    8bd2:	8f 93       	push	r24
    8bd4:	9f 93       	push	r25
    8bd6:	af 93       	push	r26
    8bd8:	bf 93       	push	r27
    8bda:	ef 93       	push	r30
    8bdc:	ff 93       	push	r31
   t_timerIntHndl *pt_intHndl = NULL;

   /*---------------------------------------------------------------------*
    * See if there is a handle on the list for this timer interrupt.
    *---------------------------------------------------------------------*/
   pt_intHndl = findTimerIntElement( TIMER_1_COMP_A);
    8bde:	80 e0       	ldi	r24, 0x00	; 0
    8be0:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>
    8be4:	fc 01       	movw	r30, r24

   if( pt_intHndl != NULL)
    8be6:	00 97       	sbiw	r24, 0x00	; 0
    8be8:	31 f0       	breq	.+12     	; 0x8bf6 <__vector_16+0x4c>
   {
      if( pt_intHndl->pf_funPtr != NULL)
    8bea:	01 80       	ldd	r0, Z+1	; 0x01
    8bec:	f2 81       	ldd	r31, Z+2	; 0x02
    8bee:	e0 2d       	mov	r30, r0
    8bf0:	30 97       	sbiw	r30, 0x00	; 0
    8bf2:	09 f0       	breq	.+2      	; 0x8bf6 <__vector_16+0x4c>
         pt_intHndl->pf_funPtr();
    8bf4:	19 95       	eicall
   }

}/*End ISR( TCC0_CCA_vect)*/
    8bf6:	ff 91       	pop	r31
    8bf8:	ef 91       	pop	r30
    8bfa:	bf 91       	pop	r27
    8bfc:	af 91       	pop	r26
    8bfe:	9f 91       	pop	r25
    8c00:	8f 91       	pop	r24
    8c02:	7f 91       	pop	r23
    8c04:	6f 91       	pop	r22
    8c06:	5f 91       	pop	r21
    8c08:	4f 91       	pop	r20
    8c0a:	3f 91       	pop	r19
    8c0c:	2f 91       	pop	r18
    8c0e:	0f 90       	pop	r0
    8c10:	0b be       	out	0x3b, r0	; 59
    8c12:	0f 90       	pop	r0
    8c14:	09 be       	out	0x39, r0	; 57
    8c16:	0f 90       	pop	r0
    8c18:	08 be       	out	0x38, r0	; 56
    8c1a:	0f 90       	pop	r0
    8c1c:	0f be       	out	0x3f, r0	; 63
    8c1e:	0f 90       	pop	r0
    8c20:	1f 90       	pop	r1
    8c22:	18 95       	reti

00008c24 <hal_configureTimer>:

}/*End hal_releaseTimer*/

t_timerError hal_configureTimer( t_TIMERHNDL t_handle,
                                 t_timerConfig t_conf)
{
    8c24:	7f 92       	push	r7
    8c26:	8f 92       	push	r8
    8c28:	9f 92       	push	r9
    8c2a:	af 92       	push	r10
    8c2c:	bf 92       	push	r11
    8c2e:	cf 92       	push	r12
    8c30:	df 92       	push	r13
    8c32:	ef 92       	push	r14
    8c34:	ff 92       	push	r15
    8c36:	0f 93       	push	r16
    8c38:	1f 93       	push	r17
    8c3a:	df 93       	push	r29
    8c3c:	cf 93       	push	r28
    8c3e:	cd b7       	in	r28, 0x3d	; 61
    8c40:	de b7       	in	r29, 0x3e	; 62
    8c42:	67 97       	sbiw	r28, 0x17	; 23
    8c44:	cd bf       	out	0x3d, r28	; 61
    8c46:	de bf       	out	0x3e, r29	; 62
    8c48:	88 8b       	std	Y+16, r24	; 0x10
    8c4a:	99 8b       	std	Y+17, r25	; 0x11
    8c4c:	2a 8b       	std	Y+18, r18	; 0x12
    8c4e:	3b 8b       	std	Y+19, r19	; 0x13
    8c50:	4c 8b       	std	Y+20, r20	; 0x14
    8c52:	5d 8b       	std	Y+21, r21	; 0x15
    8c54:	6e 8b       	std	Y+22, r22	; 0x16
    8c56:	7f 8b       	std	Y+23, r23	; 0x17
    8c58:	92 2e       	mov	r9, r18
    8c5a:	e3 2e       	mov	r14, r19
    8c5c:	4c 89       	ldd	r20, Y+20	; 0x14
    8c5e:	5d 89       	ldd	r21, Y+21	; 0x15
    8c60:	6e 89       	ldd	r22, Y+22	; 0x16
    8c62:	7f 89       	ldd	r23, Y+23	; 0x17
   t_timerModHndl *pt_timerHndl;
   int32_t i_topTicks = 0;
   uint16_t as_divisor[7] = {1,2,4,8,64,256,1024};
    8c64:	de 01       	movw	r26, r28
    8c66:	12 96       	adiw	r26, 0x02	; 2
    8c68:	e4 ee       	ldi	r30, 0xE4	; 228
    8c6a:	f0 e2       	ldi	r31, 0x20	; 32
    8c6c:	8e e0       	ldi	r24, 0x0E	; 14
    8c6e:	01 90       	ld	r0, Z+
    8c70:	0d 92       	st	X+, r0
    8c72:	81 50       	subi	r24, 0x01	; 1
    8c74:	e1 f7       	brne	.-8      	; 0x8c6e <hal_configureTimer+0x4a>

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    8c76:	8f b7       	in	r24, 0x3f	; 63
    8c78:	89 83       	std	Y+1, r24	; 0x01
    8c7a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    8c7c:	e8 89       	ldd	r30, Y+16	; 0x10
    8c7e:	f9 89       	ldd	r31, Y+17	; 0x11
    8c80:	20 91 d4 20 	lds	r18, 0x20D4
    8c84:	30 91 d5 20 	lds	r19, 0x20D5
    8c88:	84 81       	ldd	r24, Z+4	; 0x04
    8c8a:	95 81       	ldd	r25, Z+5	; 0x05
    8c8c:	82 17       	cp	r24, r18
    8c8e:	93 07       	cpc	r25, r19
    8c90:	21 f0       	breq	.+8      	; 0x8c9a <hal_configureTimer+0x76>
   {
      HAL_END_CRITICAL();//Enable interrupts
    8c92:	89 81       	ldd	r24, Y+1	; 0x01
    8c94:	8f bf       	out	0x3f, r24	; 63
    8c96:	8b ef       	ldi	r24, 0xFB	; 251
    8c98:	df c0       	rjmp	.+446    	; 0x8e58 <hal_configureTimer+0x234>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8c9a:	e8 89       	ldd	r30, Y+16	; 0x10
    8c9c:	f9 89       	ldd	r31, Y+17	; 0x11
    8c9e:	80 80       	ld	r8, Z
    8ca0:	71 80       	ldd	r7, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( (t_conf.t_mode < NORMAL) || (t_conf.t_mode > DUAL_SLOPE_BOTTOM)
    8ca2:	86 e0       	ldi	r24, 0x06	; 6
    8ca4:	89 15       	cp	r24, r9
    8ca6:	18 f0       	brcs	.+6      	; 0x8cae <hal_configureTimer+0x8a>
    8ca8:	e2 e0       	ldi	r30, 0x02	; 2
    8caa:	9e 16       	cp	r9, r30
    8cac:	21 f4       	brne	.+8      	; 0x8cb6 <hal_configureTimer+0x92>
          || (t_conf.t_mode == UNDEFINED))
      {
         HAL_END_CRITICAL();//Enable interrupts
    8cae:	89 81       	ldd	r24, Y+1	; 0x01
    8cb0:	8f bf       	out	0x3f, r24	; 63
    8cb2:	86 ef       	ldi	r24, 0xF6	; 246
    8cb4:	d1 c0       	rjmp	.+418    	; 0x8e58 <hal_configureTimer+0x234>
         return TIMER_INVALID_WF_MODE;
      }

      if( (t_conf.t_dir < DIRECTION_UP) || (t_conf.t_dir > DIRECTION_DOWN))
    8cb6:	f1 e0       	ldi	r31, 0x01	; 1
    8cb8:	fe 15       	cp	r31, r14
    8cba:	20 f4       	brcc	.+8      	; 0x8cc4 <hal_configureTimer+0xa0>
      {
         HAL_END_CRITICAL();//Enable interrupts
    8cbc:	89 81       	ldd	r24, Y+1	; 0x01
    8cbe:	8f bf       	out	0x3f, r24	; 63
    8cc0:	85 ef       	ldi	r24, 0xF5	; 245
    8cc2:	ca c0       	rjmp	.+404    	; 0x8e58 <hal_configureTimer+0x234>
       * Find a clock divisor that gives enough resolution for the requested
       * period.
       *---------------------------------------------------------------------*/
      for( c_index = 0; c_index < 7; c_index++)
      {
         i_topTicks = (int32_t)(((float)F_CPU*t_conf.f_period) /
    8cc4:	cb 01       	movw	r24, r22
    8cc6:	ba 01       	movw	r22, r20
    8cc8:	20 e0       	ldi	r18, 0x00	; 0
    8cca:	34 e2       	ldi	r19, 0x24	; 36
    8ccc:	44 ef       	ldi	r20, 0xF4	; 244
    8cce:	5b e4       	ldi	r21, 0x4B	; 75
    8cd0:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    8cd4:	5b 01       	movw	r10, r22
    8cd6:	6c 01       	movw	r12, r24
    8cd8:	8e 01       	movw	r16, r28
    8cda:	0e 5f       	subi	r16, 0xFE	; 254
    8cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    8cde:	ff 24       	eor	r15, r15
    8ce0:	f8 01       	movw	r30, r16
    8ce2:	60 81       	ld	r22, Z
    8ce4:	71 81       	ldd	r23, Z+1	; 0x01
    8ce6:	80 e0       	ldi	r24, 0x00	; 0
    8ce8:	90 e0       	ldi	r25, 0x00	; 0
    8cea:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    8cee:	9b 01       	movw	r18, r22
    8cf0:	ac 01       	movw	r20, r24
    8cf2:	c6 01       	movw	r24, r12
    8cf4:	b5 01       	movw	r22, r10
    8cf6:	0e 94 de af 	call	0x15fbc	; 0x15fbc <__divsf3>
    8cfa:	0e 94 80 b0 	call	0x16100	; 0x16100 <__fixsfsi>
    8cfe:	9b 01       	movw	r18, r22
    8d00:	ac 01       	movw	r20, r24
         as_divisor[c_index]);

         if( i_topTicks < MAX_TIMER_RANGE)
    8d02:	6f 3f       	cpi	r22, 0xFF	; 255
    8d04:	ff e7       	ldi	r31, 0x7F	; 127
    8d06:	7f 07       	cpc	r23, r31
    8d08:	f0 e0       	ldi	r31, 0x00	; 0
    8d0a:	8f 07       	cpc	r24, r31
    8d0c:	f0 e0       	ldi	r31, 0x00	; 0
    8d0e:	9f 07       	cpc	r25, r31
    8d10:	34 f0       	brlt	.+12     	; 0x8d1e <hal_configureTimer+0xfa>

      /*---------------------------------------------------------------------*
       * Find a clock divisor that gives enough resolution for the requested
       * period.
       *---------------------------------------------------------------------*/
      for( c_index = 0; c_index < 7; c_index++)
    8d12:	f3 94       	inc	r15
    8d14:	0e 5f       	subi	r16, 0xFE	; 254
    8d16:	1f 4f       	sbci	r17, 0xFF	; 255
    8d18:	87 e0       	ldi	r24, 0x07	; 7
    8d1a:	f8 16       	cp	r15, r24
    8d1c:	09 f7       	brne	.-62     	; 0x8ce0 <hal_configureTimer+0xbc>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8d1e:	a8 2d       	mov	r26, r8
    8d20:	b7 2d       	mov	r27, r7
         if( i_topTicks < MAX_TIMER_RANGE)
            break;

      }/*End for( c_index = 0; c_index < 7; c_index++)*/

      switch( as_divisor[c_index])
    8d22:	ef 2d       	mov	r30, r15
    8d24:	f0 e0       	ldi	r31, 0x00	; 0
    8d26:	ee 0f       	add	r30, r30
    8d28:	ff 1f       	adc	r31, r31
    8d2a:	ec 0f       	add	r30, r28
    8d2c:	fd 1f       	adc	r31, r29
    8d2e:	02 80       	ldd	r0, Z+2	; 0x02
    8d30:	f3 81       	ldd	r31, Z+3	; 0x03
    8d32:	e0 2d       	mov	r30, r0
    8d34:	e8 30       	cpi	r30, 0x08	; 8
    8d36:	f1 05       	cpc	r31, r1
    8d38:	f1 f0       	breq	.+60     	; 0x8d76 <hal_configureTimer+0x152>
    8d3a:	e9 30       	cpi	r30, 0x09	; 9
    8d3c:	f1 05       	cpc	r31, r1
    8d3e:	48 f4       	brcc	.+18     	; 0x8d52 <hal_configureTimer+0x12e>
    8d40:	e2 30       	cpi	r30, 0x02	; 2
    8d42:	f1 05       	cpc	r31, r1
    8d44:	a1 f0       	breq	.+40     	; 0x8d6e <hal_configureTimer+0x14a>
    8d46:	e4 30       	cpi	r30, 0x04	; 4
    8d48:	f1 05       	cpc	r31, r1
    8d4a:	99 f0       	breq	.+38     	; 0x8d72 <hal_configureTimer+0x14e>
    8d4c:	31 97       	sbiw	r30, 0x01	; 1
    8d4e:	21 f5       	brne	.+72     	; 0x8d98 <hal_configureTimer+0x174>
    8d50:	0c c0       	rjmp	.+24     	; 0x8d6a <hal_configureTimer+0x146>
    8d52:	81 e0       	ldi	r24, 0x01	; 1
    8d54:	e0 30       	cpi	r30, 0x00	; 0
    8d56:	f8 07       	cpc	r31, r24
    8d58:	91 f0       	breq	.+36     	; 0x8d7e <hal_configureTimer+0x15a>
    8d5a:	84 e0       	ldi	r24, 0x04	; 4
    8d5c:	e0 30       	cpi	r30, 0x00	; 0
    8d5e:	f8 07       	cpc	r31, r24
    8d60:	81 f0       	breq	.+32     	; 0x8d82 <hal_configureTimer+0x15e>
    8d62:	e0 34       	cpi	r30, 0x40	; 64
    8d64:	f1 05       	cpc	r31, r1
    8d66:	c1 f4       	brne	.+48     	; 0x8d98 <hal_configureTimer+0x174>
    8d68:	08 c0       	rjmp	.+16     	; 0x8d7a <hal_configureTimer+0x156>
      {
         case 1:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV1_gc;
    8d6a:	81 e0       	ldi	r24, 0x01	; 1
    8d6c:	0b c0       	rjmp	.+22     	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 2:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV2_gc;
    8d6e:	82 e0       	ldi	r24, 0x02	; 2
    8d70:	09 c0       	rjmp	.+18     	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 4:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV4_gc;
    8d72:	83 e0       	ldi	r24, 0x03	; 3
    8d74:	07 c0       	rjmp	.+14     	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 8:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV8_gc;
    8d76:	84 e0       	ldi	r24, 0x04	; 4
    8d78:	05 c0       	rjmp	.+10     	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 64:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV64_gc;
    8d7a:	85 e0       	ldi	r24, 0x05	; 5
    8d7c:	03 c0       	rjmp	.+6      	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 256:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV256_gc;
    8d7e:	86 e0       	ldi	r24, 0x06	; 6
    8d80:	01 c0       	rjmp	.+2      	; 0x8d84 <hal_configureTimer+0x160>
         break;

         case 1024:
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV1024_gc;
    8d82:	87 e0       	ldi	r24, 0x07	; 7
    8d84:	13 96       	adiw	r26, 0x03	; 3
    8d86:	8c 93       	st	X, r24
    8d88:	13 97       	sbiw	r26, 0x03	; 3
      }/*End switch( as_divisor[c_index])*/

      /*---------------------------------------------------------------------*
       * Which timer is being used?
       *---------------------------------------------------------------------*/
      if( pt_timerHndl->pt_timer0 != NULL)
    8d8a:	14 96       	adiw	r26, 0x04	; 4
    8d8c:	ed 91       	ld	r30, X+
    8d8e:	fc 91       	ld	r31, X
    8d90:	15 97       	sbiw	r26, 0x05	; 5
    8d92:	30 97       	sbiw	r30, 0x00	; 0
    8d94:	29 f4       	brne	.+10     	; 0x8da0 <hal_configureTimer+0x17c>
    8d96:	28 c0       	rjmp	.+80     	; 0x8de8 <hal_configureTimer+0x1c4>
            pt_timerHndl->t_clockSelection = TC_CLKSEL_DIV1024_gc;
         break;

         default:

            HAL_END_CRITICAL();//Enable interrupts
    8d98:	89 81       	ldd	r24, Y+1	; 0x01
    8d9a:	8f bf       	out	0x3f, r24	; 63
    8d9c:	84 ef       	ldi	r24, 0xF4	; 244
    8d9e:	5c c0       	rjmp	.+184    	; 0x8e58 <hal_configureTimer+0x234>
      if( pt_timerHndl->pt_timer0 != NULL)
      {
         /*------------------------------------------------------------------*
          * Reset the timer module
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    8da0:	80 81       	ld	r24, Z
    8da2:	80 7f       	andi	r24, 0xF0	; 240
    8da4:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLA |= TC_CLKSEL_OFF_gc;
    8da6:	14 96       	adiw	r26, 0x04	; 4
    8da8:	ed 91       	ld	r30, X+
    8daa:	fc 91       	ld	r31, X
    8dac:	15 97       	sbiw	r26, 0x05	; 5
    8dae:	80 81       	ld	r24, Z
    8db0:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLFSET = TC_CMD_RESET_gc;
    8db2:	14 96       	adiw	r26, 0x04	; 4
    8db4:	ed 91       	ld	r30, X+
    8db6:	fc 91       	ld	r31, X
    8db8:	15 97       	sbiw	r26, 0x05	; 5
    8dba:	8c e0       	ldi	r24, 0x0C	; 12
    8dbc:	81 87       	std	Z+9, r24	; 0x09

         /*------------------------------------------------------------------*
          * Set the waveform generation mode
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->CTRLB &= ~TC0_WGMODE_gm;
    8dbe:	14 96       	adiw	r26, 0x04	; 4
    8dc0:	ed 91       	ld	r30, X+
    8dc2:	fc 91       	ld	r31, X
    8dc4:	15 97       	sbiw	r26, 0x05	; 5
    8dc6:	81 81       	ldd	r24, Z+1	; 0x01
    8dc8:	88 7f       	andi	r24, 0xF8	; 248
    8dca:	81 83       	std	Z+1, r24	; 0x01
         pt_timerHndl->pt_timer0->CTRLB |= (TC_WGMODE_t)t_conf.t_mode;
    8dcc:	14 96       	adiw	r26, 0x04	; 4
    8dce:	ed 91       	ld	r30, X+
    8dd0:	fc 91       	ld	r31, X
    8dd2:	15 97       	sbiw	r26, 0x05	; 5
    8dd4:	81 81       	ldd	r24, Z+1	; 0x01
    8dd6:	89 29       	or	r24, r9
    8dd8:	81 83       	std	Z+1, r24	; 0x01

         /*------------------------------------------------------------------*
          * Set the clock period
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer0->PER = i_topTicks;
    8dda:	14 96       	adiw	r26, 0x04	; 4
    8ddc:	ed 91       	ld	r30, X+
    8dde:	fc 91       	ld	r31, X
    8de0:	15 97       	sbiw	r26, 0x05	; 5
    8de2:	26 a3       	std	Z+38, r18	; 0x26
    8de4:	37 a3       	std	Z+39, r19	; 0x27
    8de6:	2b c0       	rjmp	.+86     	; 0x8e3e <hal_configureTimer+0x21a>
      else
      {
         /*------------------------------------------------------------------*
          * Reset the timer module
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    8de8:	16 96       	adiw	r26, 0x06	; 6
    8dea:	ed 91       	ld	r30, X+
    8dec:	fc 91       	ld	r31, X
    8dee:	17 97       	sbiw	r26, 0x07	; 7
    8df0:	80 81       	ld	r24, Z
    8df2:	80 7f       	andi	r24, 0xF0	; 240
    8df4:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLA |= TC_CLKSEL_OFF_gc;
    8df6:	16 96       	adiw	r26, 0x06	; 6
    8df8:	ed 91       	ld	r30, X+
    8dfa:	fc 91       	ld	r31, X
    8dfc:	17 97       	sbiw	r26, 0x07	; 7
    8dfe:	80 81       	ld	r24, Z
    8e00:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLFSET = TC_CMD_RESET_gc;
    8e02:	16 96       	adiw	r26, 0x06	; 6
    8e04:	ed 91       	ld	r30, X+
    8e06:	fc 91       	ld	r31, X
    8e08:	17 97       	sbiw	r26, 0x07	; 7
    8e0a:	8c e0       	ldi	r24, 0x0C	; 12
    8e0c:	81 87       	std	Z+9, r24	; 0x09

         /*------------------------------------------------------------------*
          * Set the waveform generation mode
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->CTRLB &= ~TC0_WGMODE_gm;
    8e0e:	16 96       	adiw	r26, 0x06	; 6
    8e10:	ed 91       	ld	r30, X+
    8e12:	fc 91       	ld	r31, X
    8e14:	17 97       	sbiw	r26, 0x07	; 7
    8e16:	81 81       	ldd	r24, Z+1	; 0x01
    8e18:	88 7f       	andi	r24, 0xF8	; 248
    8e1a:	81 83       	std	Z+1, r24	; 0x01
         pt_timerHndl->pt_timer1->CTRLB |= (TC_WGMODE_t)t_conf.t_mode;
    8e1c:	16 96       	adiw	r26, 0x06	; 6
    8e1e:	ed 91       	ld	r30, X+
    8e20:	fc 91       	ld	r31, X
    8e22:	17 97       	sbiw	r26, 0x07	; 7
    8e24:	81 81       	ldd	r24, Z+1	; 0x01
    8e26:	89 29       	or	r24, r9
    8e28:	81 83       	std	Z+1, r24	; 0x01

         /*------------------------------------------------------------------*
          * Set the clock period
          *------------------------------------------------------------------*/
         pt_timerHndl->pt_timer1->PER = i_topTicks;
    8e2a:	16 96       	adiw	r26, 0x06	; 6
    8e2c:	ed 91       	ld	r30, X+
    8e2e:	fc 91       	ld	r31, X
    8e30:	17 97       	sbiw	r26, 0x07	; 7
    8e32:	26 a3       	std	Z+38, r18	; 0x26
    8e34:	37 a3       	std	Z+39, r19	; 0x27
    8e36:	14 96       	adiw	r26, 0x04	; 4
    8e38:	ed 91       	ld	r30, X+
    8e3a:	fc 91       	ld	r31, X
    8e3c:	15 97       	sbiw	r26, 0x05	; 5

         /*------------------------------------------------------------------*
          * Set the clock direction.
          *------------------------------------------------------------------*/
         if( t_conf.t_dir == DIRECTION_DOWN)
    8e3e:	81 e0       	ldi	r24, 0x01	; 1
    8e40:	e8 16       	cp	r14, r24
    8e42:	11 f4       	brne	.+4      	; 0x8e48 <hal_configureTimer+0x224>
            pt_timerHndl->pt_timer0->CTRLFSET = TC1_DIR_bm;
    8e44:	e1 86       	std	Z+9, r14	; 0x09
    8e46:	02 c0       	rjmp	.+4      	; 0x8e4c <hal_configureTimer+0x228>
         else
            pt_timerHndl->pt_timer0->CTRLFCLR = TC1_DIR_bm;
    8e48:	81 e0       	ldi	r24, 0x01	; 1
    8e4a:	80 87       	std	Z+8, r24	; 0x08
      }

      pt_timerHndl->b_validConfig = true;
    8e4c:	81 e0       	ldi	r24, 0x01	; 1
    8e4e:	11 96       	adiw	r26, 0x01	; 1
    8e50:	8c 93       	st	X, r24

   }

   HAL_END_CRITICAL();//Enable interrupts
    8e52:	89 81       	ldd	r24, Y+1	; 0x01
    8e54:	8f bf       	out	0x3f, r24	; 63
    8e56:	80 e0       	ldi	r24, 0x00	; 0

   return TIMER_PASSED;

}/*End hal_configureTimer*/
    8e58:	67 96       	adiw	r28, 0x17	; 23
    8e5a:	cd bf       	out	0x3d, r28	; 61
    8e5c:	de bf       	out	0x3e, r29	; 62
    8e5e:	cf 91       	pop	r28
    8e60:	df 91       	pop	r29
    8e62:	1f 91       	pop	r17
    8e64:	0f 91       	pop	r16
    8e66:	ff 90       	pop	r15
    8e68:	ef 90       	pop	r14
    8e6a:	df 90       	pop	r13
    8e6c:	cf 90       	pop	r12
    8e6e:	bf 90       	pop	r11
    8e70:	af 90       	pop	r10
    8e72:	9f 90       	pop	r9
    8e74:	8f 90       	pop	r8
    8e76:	7f 90       	pop	r7
    8e78:	08 95       	ret

00008e7a <hal_startTimer>:

t_timerError hal_startTimer( t_TIMERHNDL t_handle)
{
    8e7a:	df 93       	push	r29
    8e7c:	cf 93       	push	r28
    8e7e:	00 d0       	rcall	.+0      	; 0x8e80 <hal_startTimer+0x6>
    8e80:	cd b7       	in	r28, 0x3d	; 61
    8e82:	de b7       	in	r29, 0x3e	; 62
    8e84:	8a 83       	std	Y+2, r24	; 0x02
    8e86:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    8e88:	8f b7       	in	r24, 0x3f	; 63
    8e8a:	89 83       	std	Y+1, r24	; 0x01
    8e8c:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    8e8e:	ea 81       	ldd	r30, Y+2	; 0x02
    8e90:	fb 81       	ldd	r31, Y+3	; 0x03
    8e92:	20 91 d4 20 	lds	r18, 0x20D4
    8e96:	30 91 d5 20 	lds	r19, 0x20D5
    8e9a:	84 81       	ldd	r24, Z+4	; 0x04
    8e9c:	95 81       	ldd	r25, Z+5	; 0x05
    8e9e:	82 17       	cp	r24, r18
    8ea0:	93 07       	cpc	r25, r19
    8ea2:	21 f0       	breq	.+8      	; 0x8eac <hal_startTimer+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    8ea4:	89 81       	ldd	r24, Y+1	; 0x01
    8ea6:	8f bf       	out	0x3f, r24	; 63
    8ea8:	8b ef       	ldi	r24, 0xFB	; 251
    8eaa:	2e c0       	rjmp	.+92     	; 0x8f08 <hal_startTimer+0x8e>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8eac:	ea 81       	ldd	r30, Y+2	; 0x02
    8eae:	fb 81       	ldd	r31, Y+3	; 0x03
    8eb0:	a0 81       	ld	r26, Z
    8eb2:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->b_validConfig == false)
    8eb4:	11 96       	adiw	r26, 0x01	; 1
    8eb6:	8c 91       	ld	r24, X
    8eb8:	11 97       	sbiw	r26, 0x01	; 1
    8eba:	88 23       	and	r24, r24
    8ebc:	21 f4       	brne	.+8      	; 0x8ec6 <hal_startTimer+0x4c>
      {
         HAL_END_CRITICAL();//Enable interrupts
    8ebe:	89 81       	ldd	r24, Y+1	; 0x01
    8ec0:	8f bf       	out	0x3f, r24	; 63
    8ec2:	83 ef       	ldi	r24, 0xF3	; 243
    8ec4:	21 c0       	rjmp	.+66     	; 0x8f08 <hal_startTimer+0x8e>
         return TIMER_NO_CONFIG;
      }

      if( pt_timerHndl->pt_timer0 != NULL)
    8ec6:	14 96       	adiw	r26, 0x04	; 4
    8ec8:	ed 91       	ld	r30, X+
    8eca:	fc 91       	ld	r31, X
    8ecc:	15 97       	sbiw	r26, 0x05	; 5
    8ece:	30 97       	sbiw	r30, 0x00	; 0
    8ed0:	41 f0       	breq	.+16     	; 0x8ee2 <hal_startTimer+0x68>
      {
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    8ed2:	80 81       	ld	r24, Z
    8ed4:	80 7f       	andi	r24, 0xF0	; 240
    8ed6:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLA |= pt_timerHndl->t_clockSelection;
    8ed8:	14 96       	adiw	r26, 0x04	; 4
    8eda:	ed 91       	ld	r30, X+
    8edc:	fc 91       	ld	r31, X
    8ede:	15 97       	sbiw	r26, 0x05	; 5
    8ee0:	0b c0       	rjmp	.+22     	; 0x8ef8 <hal_startTimer+0x7e>
      }
      else
      {
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    8ee2:	16 96       	adiw	r26, 0x06	; 6
    8ee4:	ed 91       	ld	r30, X+
    8ee6:	fc 91       	ld	r31, X
    8ee8:	17 97       	sbiw	r26, 0x07	; 7
    8eea:	80 81       	ld	r24, Z
    8eec:	80 7f       	andi	r24, 0xF0	; 240
    8eee:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLA |= pt_timerHndl->t_clockSelection;
    8ef0:	16 96       	adiw	r26, 0x06	; 6
    8ef2:	ed 91       	ld	r30, X+
    8ef4:	fc 91       	ld	r31, X
    8ef6:	17 97       	sbiw	r26, 0x07	; 7
    8ef8:	80 81       	ld	r24, Z
    8efa:	13 96       	adiw	r26, 0x03	; 3
    8efc:	9c 91       	ld	r25, X
    8efe:	89 2b       	or	r24, r25
    8f00:	80 83       	st	Z, r24
      }

   }/*End if( pt_timerHndl != NULL)*/

   HAL_END_CRITICAL();//Enable interrupts
    8f02:	89 81       	ldd	r24, Y+1	; 0x01
    8f04:	8f bf       	out	0x3f, r24	; 63
    8f06:	80 e0       	ldi	r24, 0x00	; 0

   return TIMER_PASSED;

}/*End hal_startTimer*/
    8f08:	23 96       	adiw	r28, 0x03	; 3
    8f0a:	cd bf       	out	0x3d, r28	; 61
    8f0c:	de bf       	out	0x3e, r29	; 62
    8f0e:	cf 91       	pop	r28
    8f10:	df 91       	pop	r29
    8f12:	08 95       	ret

00008f14 <hal_stopTimer>:

t_timerError hal_stopTimer( t_TIMERHNDL t_handle)
{
    8f14:	df 93       	push	r29
    8f16:	cf 93       	push	r28
    8f18:	00 d0       	rcall	.+0      	; 0x8f1a <hal_stopTimer+0x6>
    8f1a:	cd b7       	in	r28, 0x3d	; 61
    8f1c:	de b7       	in	r29, 0x3e	; 62
    8f1e:	8a 83       	std	Y+2, r24	; 0x02
    8f20:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    8f22:	8f b7       	in	r24, 0x3f	; 63
    8f24:	89 83       	std	Y+1, r24	; 0x01
    8f26:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    8f28:	ea 81       	ldd	r30, Y+2	; 0x02
    8f2a:	fb 81       	ldd	r31, Y+3	; 0x03
    8f2c:	20 91 d4 20 	lds	r18, 0x20D4
    8f30:	30 91 d5 20 	lds	r19, 0x20D5
    8f34:	84 81       	ldd	r24, Z+4	; 0x04
    8f36:	95 81       	ldd	r25, Z+5	; 0x05
    8f38:	82 17       	cp	r24, r18
    8f3a:	93 07       	cpc	r25, r19
    8f3c:	21 f0       	breq	.+8      	; 0x8f46 <hal_stopTimer+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    8f3e:	89 81       	ldd	r24, Y+1	; 0x01
    8f40:	8f bf       	out	0x3f, r24	; 63
    8f42:	8b ef       	ldi	r24, 0xFB	; 251
    8f44:	22 c0       	rjmp	.+68     	; 0x8f8a <hal_stopTimer+0x76>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8f46:	ea 81       	ldd	r30, Y+2	; 0x02
    8f48:	fb 81       	ldd	r31, Y+3	; 0x03
    8f4a:	a0 81       	ld	r26, Z
    8f4c:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    8f4e:	14 96       	adiw	r26, 0x04	; 4
    8f50:	ed 91       	ld	r30, X+
    8f52:	fc 91       	ld	r31, X
    8f54:	15 97       	sbiw	r26, 0x05	; 5
    8f56:	30 97       	sbiw	r30, 0x00	; 0
    8f58:	41 f0       	breq	.+16     	; 0x8f6a <hal_stopTimer+0x56>
      {
         pt_timerHndl->pt_timer0->CTRLA &= ~TC0_CLKSEL_gm;
    8f5a:	80 81       	ld	r24, Z
    8f5c:	80 7f       	andi	r24, 0xF0	; 240
    8f5e:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer0->CTRLA |= TC_CLKSEL_OFF_gc;
    8f60:	14 96       	adiw	r26, 0x04	; 4
    8f62:	ed 91       	ld	r30, X+
    8f64:	fc 91       	ld	r31, X
    8f66:	15 97       	sbiw	r26, 0x05	; 5
    8f68:	0b c0       	rjmp	.+22     	; 0x8f80 <hal_stopTimer+0x6c>
      }
      else
      {
         pt_timerHndl->pt_timer1->CTRLA &= ~TC1_CLKSEL_gm;
    8f6a:	16 96       	adiw	r26, 0x06	; 6
    8f6c:	ed 91       	ld	r30, X+
    8f6e:	fc 91       	ld	r31, X
    8f70:	17 97       	sbiw	r26, 0x07	; 7
    8f72:	80 81       	ld	r24, Z
    8f74:	80 7f       	andi	r24, 0xF0	; 240
    8f76:	80 83       	st	Z, r24
         pt_timerHndl->pt_timer1->CTRLA |= TC_CLKSEL_OFF_gc;
    8f78:	16 96       	adiw	r26, 0x06	; 6
    8f7a:	ed 91       	ld	r30, X+
    8f7c:	fc 91       	ld	r31, X
    8f7e:	17 97       	sbiw	r26, 0x07	; 7
    8f80:	80 81       	ld	r24, Z
    8f82:	80 83       	st	Z, r24
      }

   }

   HAL_END_CRITICAL();//Enable interrupts
    8f84:	89 81       	ldd	r24, Y+1	; 0x01
    8f86:	8f bf       	out	0x3f, r24	; 63
    8f88:	80 e0       	ldi	r24, 0x00	; 0

   return TIMER_PASSED;

}/*End hal_stopTimer*/
    8f8a:	23 96       	adiw	r28, 0x03	; 3
    8f8c:	cd bf       	out	0x3d, r28	; 61
    8f8e:	de bf       	out	0x3e, r29	; 62
    8f90:	cf 91       	pop	r28
    8f92:	df 91       	pop	r29
    8f94:	08 95       	ret

00008f96 <hal_getTimerCount>:

int32_t hal_getTimerCount( t_TIMERHNDL t_handle)
{
    8f96:	df 93       	push	r29
    8f98:	cf 93       	push	r28
    8f9a:	0f 92       	push	r0
    8f9c:	0f 92       	push	r0
    8f9e:	cd b7       	in	r28, 0x3d	; 61
    8fa0:	de b7       	in	r29, 0x3e	; 62
    8fa2:	89 83       	std	Y+1, r24	; 0x01
    8fa4:	9a 83       	std	Y+2, r25	; 0x02
   int32_t i_count;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    8fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    8fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    8faa:	20 91 d4 20 	lds	r18, 0x20D4
    8fae:	30 91 d5 20 	lds	r19, 0x20D5
    8fb2:	84 81       	ldd	r24, Z+4	; 0x04
    8fb4:	95 81       	ldd	r25, Z+5	; 0x05
    8fb6:	82 17       	cp	r24, r18
    8fb8:	93 07       	cpc	r25, r19
    8fba:	29 f0       	breq	.+10     	; 0x8fc6 <hal_getTimerCount+0x30>
    8fbc:	2b ef       	ldi	r18, 0xFB	; 251
    8fbe:	3f ef       	ldi	r19, 0xFF	; 255
    8fc0:	4f ef       	ldi	r20, 0xFF	; 255
    8fc2:	5f ef       	ldi	r21, 0xFF	; 255
    8fc4:	16 c0       	rjmp	.+44     	; 0x8ff2 <hal_getTimerCount+0x5c>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    8fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    8fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    8fca:	01 90       	ld	r0, Z+
    8fcc:	f0 81       	ld	r31, Z
    8fce:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    8fd0:	a4 81       	ldd	r26, Z+4	; 0x04
    8fd2:	b5 81       	ldd	r27, Z+5	; 0x05
    8fd4:	10 97       	sbiw	r26, 0x00	; 0
    8fd6:	29 f0       	breq	.+10     	; 0x8fe2 <hal_getTimerCount+0x4c>
      {
         i_count = pt_timerHndl->pt_timer0->CNT;
    8fd8:	90 96       	adiw	r26, 0x20	; 32
    8fda:	8d 91       	ld	r24, X+
    8fdc:	9c 91       	ld	r25, X
    8fde:	91 97       	sbiw	r26, 0x21	; 33
    8fe0:	05 c0       	rjmp	.+10     	; 0x8fec <hal_getTimerCount+0x56>
      }
      else
      {
         i_count = pt_timerHndl->pt_timer1->CNT;
    8fe2:	06 80       	ldd	r0, Z+6	; 0x06
    8fe4:	f7 81       	ldd	r31, Z+7	; 0x07
    8fe6:	e0 2d       	mov	r30, r0
    8fe8:	80 a1       	ldd	r24, Z+32	; 0x20
    8fea:	91 a1       	ldd	r25, Z+33	; 0x21
    8fec:	9c 01       	movw	r18, r24
    8fee:	40 e0       	ldi	r20, 0x00	; 0
    8ff0:	50 e0       	ldi	r21, 0x00	; 0

   }

   return i_count;

}/*End hal_getTimerCount*/
    8ff2:	b9 01       	movw	r22, r18
    8ff4:	ca 01       	movw	r24, r20
    8ff6:	0f 90       	pop	r0
    8ff8:	0f 90       	pop	r0
    8ffa:	cf 91       	pop	r28
    8ffc:	df 91       	pop	r29
    8ffe:	08 95       	ret

00009000 <hal_getIntStatus>:

}/*End hal_getCompareValue*/

int16_t hal_getIntStatus( t_TIMERHNDL t_handle,
                          t_compType   t_type)
{
    9000:	df 93       	push	r29
    9002:	cf 93       	push	r28
    9004:	0f 92       	push	r0
    9006:	0f 92       	push	r0
    9008:	cd b7       	in	r28, 0x3d	; 61
    900a:	de b7       	in	r29, 0x3e	; 62
    900c:	89 83       	std	Y+1, r24	; 0x01
    900e:	9a 83       	std	Y+2, r25	; 0x02
   t_timerModHndl *pt_timerHndl;

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    9010:	e9 81       	ldd	r30, Y+1	; 0x01
    9012:	fa 81       	ldd	r31, Y+2	; 0x02
    9014:	20 91 d4 20 	lds	r18, 0x20D4
    9018:	30 91 d5 20 	lds	r19, 0x20D5
    901c:	84 81       	ldd	r24, Z+4	; 0x04
    901e:	95 81       	ldd	r25, Z+5	; 0x05
    9020:	82 17       	cp	r24, r18
    9022:	93 07       	cpc	r25, r19
    9024:	19 f0       	breq	.+6      	; 0x902c <hal_getIntStatus+0x2c>
    9026:	eb ef       	ldi	r30, 0xFB	; 251
    9028:	ff ef       	ldi	r31, 0xFF	; 255
    902a:	53 c0       	rjmp	.+166    	; 0x90d2 <hal_getIntStatus+0xd2>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    902c:	e9 81       	ldd	r30, Y+1	; 0x01
    902e:	fa 81       	ldd	r31, Y+2	; 0x02
    9030:	01 90       	ld	r0, Z+
    9032:	f0 81       	ld	r31, Z
    9034:	e0 2d       	mov	r30, r0
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_timerHndl->pt_timer0 != NULL)
    9036:	a4 81       	ldd	r26, Z+4	; 0x04
    9038:	b5 81       	ldd	r27, Z+5	; 0x05
    903a:	10 97       	sbiw	r26, 0x00	; 0
    903c:	31 f1       	breq	.+76     	; 0x908a <hal_getIntStatus+0x8a>
      {
         switch( t_type)
    903e:	62 30       	cpi	r22, 0x02	; 2
    9040:	99 f0       	breq	.+38     	; 0x9068 <hal_getIntStatus+0x68>
    9042:	63 30       	cpi	r22, 0x03	; 3
    9044:	30 f4       	brcc	.+12     	; 0x9052 <hal_getIntStatus+0x52>
    9046:	66 23       	and	r22, r22
    9048:	49 f0       	breq	.+18     	; 0x905c <hal_getIntStatus+0x5c>
    904a:	61 30       	cpi	r22, 0x01	; 1
    904c:	09 f0       	breq	.+2      	; 0x9050 <hal_getIntStatus+0x50>
    904e:	3f c0       	rjmp	.+126    	; 0x90ce <hal_getIntStatus+0xce>
    9050:	08 c0       	rjmp	.+16     	; 0x9062 <hal_getIntStatus+0x62>
    9052:	63 30       	cpi	r22, 0x03	; 3
    9054:	81 f0       	breq	.+32     	; 0x9076 <hal_getIntStatus+0x76>
    9056:	64 30       	cpi	r22, 0x04	; 4
    9058:	d1 f5       	brne	.+116    	; 0x90ce <hal_getIntStatus+0xce>
    905a:	14 c0       	rjmp	.+40     	; 0x9084 <hal_getIntStatus+0x84>
         {
            case COMPAREA:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    905c:	1c 96       	adiw	r26, 0x0c	; 12
    905e:	8c 91       	ld	r24, X
    9060:	1f c0       	rjmp	.+62     	; 0x90a0 <hal_getIntStatus+0xa0>
               (int16_t)TC0_CCAIF_bm);
            break;

            case COMPAREB:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    9062:	1c 96       	adiw	r26, 0x0c	; 12
    9064:	8c 91       	ld	r24, X
    9066:	25 c0       	rjmp	.+74     	; 0x90b2 <hal_getIntStatus+0xb2>
               (int16_t)TC0_CCBIF_bm);
            break;

            case COMPAREC:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    9068:	1c 96       	adiw	r26, 0x0c	; 12
    906a:	8c 91       	ld	r24, X
    906c:	e8 2f       	mov	r30, r24
    906e:	f0 e0       	ldi	r31, 0x00	; 0
    9070:	e0 74       	andi	r30, 0x40	; 64
    9072:	f0 70       	andi	r31, 0x00	; 0
    9074:	2e c0       	rjmp	.+92     	; 0x90d2 <hal_getIntStatus+0xd2>
               (int16_t)TC0_CCCIF_bm);
            break;

            case COMPARED:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    9076:	1c 96       	adiw	r26, 0x0c	; 12
    9078:	8c 91       	ld	r24, X
    907a:	e8 2f       	mov	r30, r24
    907c:	f0 e0       	ldi	r31, 0x00	; 0
    907e:	e0 78       	andi	r30, 0x80	; 128
    9080:	f0 70       	andi	r31, 0x00	; 0
    9082:	27 c0       	rjmp	.+78     	; 0x90d2 <hal_getIntStatus+0xd2>
               (int16_t)TC0_CCDIF_bm);
            break;

            case OVERFLOW:
               return ((int16_t)pt_timerHndl->pt_timer0->INTFLAGS &
    9084:	1c 96       	adiw	r26, 0x0c	; 12
    9086:	8c 91       	ld	r24, X
    9088:	1d c0       	rjmp	.+58     	; 0x90c4 <hal_getIntStatus+0xc4>
         }/*End switch( t_type)*/

      }
      else
      {
         switch( t_type)
    908a:	61 30       	cpi	r22, 0x01	; 1
    908c:	71 f0       	breq	.+28     	; 0x90aa <hal_getIntStatus+0xaa>
    908e:	61 30       	cpi	r22, 0x01	; 1
    9090:	18 f0       	brcs	.+6      	; 0x9098 <hal_getIntStatus+0x98>
    9092:	64 30       	cpi	r22, 0x04	; 4
    9094:	e1 f4       	brne	.+56     	; 0x90ce <hal_getIntStatus+0xce>
    9096:	12 c0       	rjmp	.+36     	; 0x90bc <hal_getIntStatus+0xbc>
         {
            case COMPAREA:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    9098:	06 80       	ldd	r0, Z+6	; 0x06
    909a:	f7 81       	ldd	r31, Z+7	; 0x07
    909c:	e0 2d       	mov	r30, r0
    909e:	84 85       	ldd	r24, Z+12	; 0x0c
    90a0:	e8 2f       	mov	r30, r24
    90a2:	f0 e0       	ldi	r31, 0x00	; 0
    90a4:	e0 71       	andi	r30, 0x10	; 16
    90a6:	f0 70       	andi	r31, 0x00	; 0
    90a8:	14 c0       	rjmp	.+40     	; 0x90d2 <hal_getIntStatus+0xd2>
               (int16_t)TC1_CCAIF_bm);
            break;

            case COMPAREB:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    90aa:	06 80       	ldd	r0, Z+6	; 0x06
    90ac:	f7 81       	ldd	r31, Z+7	; 0x07
    90ae:	e0 2d       	mov	r30, r0
    90b0:	84 85       	ldd	r24, Z+12	; 0x0c
    90b2:	e8 2f       	mov	r30, r24
    90b4:	f0 e0       	ldi	r31, 0x00	; 0
    90b6:	e0 72       	andi	r30, 0x20	; 32
    90b8:	f0 70       	andi	r31, 0x00	; 0
    90ba:	0b c0       	rjmp	.+22     	; 0x90d2 <hal_getIntStatus+0xd2>
               (int16_t)TC1_CCBIF_bm);
            break;

            case OVERFLOW:
               return ((int16_t)pt_timerHndl->pt_timer1->INTFLAGS &
    90bc:	06 80       	ldd	r0, Z+6	; 0x06
    90be:	f7 81       	ldd	r31, Z+7	; 0x07
    90c0:	e0 2d       	mov	r30, r0
    90c2:	84 85       	ldd	r24, Z+12	; 0x0c
    90c4:	e8 2f       	mov	r30, r24
    90c6:	f0 e0       	ldi	r31, 0x00	; 0
    90c8:	e1 70       	andi	r30, 0x01	; 1
    90ca:	f0 70       	andi	r31, 0x00	; 0
    90cc:	02 c0       	rjmp	.+4      	; 0x90d2 <hal_getIntStatus+0xd2>
    90ce:	ea ef       	ldi	r30, 0xFA	; 250
    90d0:	ff ef       	ldi	r31, 0xFF	; 255

   }

   return (int16_t)TIMER_INVALID_COMP;

}/*End hal_getIntStatus*/
    90d2:	cf 01       	movw	r24, r30
    90d4:	0f 90       	pop	r0
    90d6:	0f 90       	pop	r0
    90d8:	cf 91       	pop	r28
    90da:	df 91       	pop	r29
    90dc:	08 95       	ret

000090de <hal_requestTimer>:

/*---------------------------------------------------------------------------*
 * Request access to a particular timer module
 *---------------------------------------------------------------------------*/
t_TIMERHNDL hal_requestTimer( t_timerModId t_id)
{
    90de:	1f 93       	push	r17
    90e0:	df 93       	push	r29
    90e2:	cf 93       	push	r28
    90e4:	cd b7       	in	r28, 0x3d	; 61
    90e6:	de b7       	in	r29, 0x3e	; 62
    90e8:	25 97       	sbiw	r28, 0x05	; 5
    90ea:	cd bf       	out	0x3d, r28	; 61
    90ec:	de bf       	out	0x3e, r29	; 62
    90ee:	18 2f       	mov	r17, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    90f0:	8f b7       	in	r24, 0x3f	; 63
    90f2:	89 83       	std	Y+1, r24	; 0x01
    90f4:	f8 94       	cli

   if( (t_id < TIMER_1) || (t_id > TIMER_8))
    90f6:	14 32       	cpi	r17, 0x24	; 36
    90f8:	28 f0       	brcs	.+10     	; 0x9104 <hal_requestTimer+0x26>
   {
      HAL_END_CRITICAL();//Enable interrupts
    90fa:	89 81       	ldd	r24, Y+1	; 0x01
    90fc:	8f bf       	out	0x3f, r24	; 63
    90fe:	2c ef       	ldi	r18, 0xFC	; 252
    9100:	3f ef       	ldi	r19, 0xFF	; 255
    9102:	94 c0       	rjmp	.+296    	; 0x922c <hal_requestTimer+0x14e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerHndlList, s_count)
    9104:	e0 91 d4 20 	lds	r30, 0x20D4
    9108:	f0 91 d5 20 	lds	r31, 0x20D5
    910c:	22 81       	ldd	r18, Z+2	; 0x02
    910e:	33 81       	ldd	r19, Z+3	; 0x03
    9110:	e0 91 d4 20 	lds	r30, 0x20D4
    9114:	f0 91 d5 20 	lds	r31, 0x20D5
    9118:	0c c0       	rjmp	.+24     	; 0x9132 <hal_requestTimer+0x54>
   {
      pt_element = (t_timerModHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    911a:	ec 81       	ldd	r30, Y+4	; 0x04
    911c:	fd 81       	ldd	r31, Y+5	; 0x05
    911e:	01 90       	ld	r0, Z+
    9120:	f0 81       	ld	r31, Z
    9122:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    9124:	80 81       	ld	r24, Z
    9126:	81 17       	cp	r24, r17
    9128:	61 f0       	breq	.+24     	; 0x9142 <hal_requestTimer+0x64>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the Timer list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_timerHndlList, s_count)
    912a:	21 50       	subi	r18, 0x01	; 1
    912c:	30 40       	sbci	r19, 0x00	; 0
    912e:	ec 81       	ldd	r30, Y+4	; 0x04
    9130:	fd 81       	ldd	r31, Y+5	; 0x05
    9132:	80 85       	ldd	r24, Z+8	; 0x08
    9134:	91 85       	ldd	r25, Z+9	; 0x09
    9136:	8c 83       	std	Y+4, r24	; 0x04
    9138:	9d 83       	std	Y+5, r25	; 0x05
    913a:	12 16       	cp	r1, r18
    913c:	13 06       	cpc	r1, r19
    913e:	6c f3       	brlt	.-38     	; 0x911a <hal_requestTimer+0x3c>
    9140:	03 c0       	rjmp	.+6      	; 0x9148 <hal_requestTimer+0x6a>
   pt_timerHndl = findTimerElement( t_id);

   /*------------------------------------------------------------------------*
    * Has this timer already been opened?
    *------------------------------------------------------------------------*/
   if( pt_timerHndl == NULL) /*No*/
    9142:	ef 2b       	or	r30, r31
    9144:	09 f0       	breq	.+2      	; 0x9148 <hal_requestTimer+0x6a>
    9146:	69 c0       	rjmp	.+210    	; 0x921a <hal_requestTimer+0x13c>
   t_linkedListError t_err;

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the Timer information will be stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerModHndl));
    9148:	88 e0       	ldi	r24, 0x08	; 8
    914a:	90 e0       	ldi	r25, 0x00	; 0
    914c:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    9150:	8c 83       	std	Y+4, r24	; 0x04
    9152:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    9154:	8c 81       	ldd	r24, Y+4	; 0x04
    9156:	9d 81       	ldd	r25, Y+5	; 0x05
    9158:	97 ff       	sbrs	r25, 7
    915a:	03 c0       	rjmp	.+6      	; 0x9162 <hal_requestTimer+0x84>
    915c:	8f ef       	ldi	r24, 0xFF	; 255
    915e:	9f ef       	ldi	r25, 0xFF	; 255
    9160:	0b c0       	rjmp	.+22     	; 0x9178 <hal_requestTimer+0x9a>
   }

   /*------------------------------------------------------------------------*
    * Add the Timer link onto the list open Timers.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_timerHndlList,
    9162:	80 91 d4 20 	lds	r24, 0x20D4
    9166:	90 91 d5 20 	lds	r25, 0x20D5
    916a:	6c 81       	ldd	r22, Y+4	; 0x04
    916c:	7d 81       	ldd	r23, Y+5	; 0x05
    916e:	41 e0       	ldi	r20, 0x01	; 1
    9170:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    9174:	8c 81       	ldd	r24, Y+4	; 0x04
    9176:	9d 81       	ldd	r25, Y+5	; 0x05
    * Has this timer already been opened?
    *------------------------------------------------------------------------*/
   if( pt_timerHndl == NULL) /*No*/
   {

      t_linkHndl = createTimerHandle();
    9178:	8a 83       	std	Y+2, r24	; 0x02
    917a:	9b 83       	std	Y+3, r25	; 0x03
      if( t_linkHndl < 0)
    917c:	8a 81       	ldd	r24, Y+2	; 0x02
    917e:	9b 81       	ldd	r25, Y+3	; 0x03
    9180:	97 ff       	sbrs	r25, 7
    9182:	05 c0       	rjmp	.+10     	; 0x918e <hal_requestTimer+0xb0>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9184:	89 81       	ldd	r24, Y+1	; 0x01
    9186:	8f bf       	out	0x3f, r24	; 63
    9188:	2f ef       	ldi	r18, 0xFF	; 255
    918a:	3f ef       	ldi	r19, 0xFF	; 255
    918c:	4f c0       	rjmp	.+158    	; 0x922c <hal_requestTimer+0x14e>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    918e:	ea 81       	ldd	r30, Y+2	; 0x02
    9190:	fb 81       	ldd	r31, Y+3	; 0x03
    9192:	01 90       	ld	r0, Z+
    9194:	f0 81       	ld	r31, Z
    9196:	e0 2d       	mov	r30, r0

      pt_timerHndl->b_validConfig = false;
    9198:	11 82       	std	Z+1, r1	; 0x01

      pt_timerHndl->t_id = t_id;
    919a:	10 83       	st	Z, r17

      /*---------------------------------------------------------------------*
       * Clock isn't configured until configureTimer gets called.
       *---------------------------------------------------------------------*/
      pt_timerHndl->t_clockSelection = TC_CLKSEL_OFF_gc;
    919c:	13 82       	std	Z+3, r1	; 0x03

      /*---------------------------------------------------------------------*
       * No interrupts opened against this handle.
       *---------------------------------------------------------------------*/
      pt_timerHndl->c_intCount = 0;
    919e:	12 82       	std	Z+2, r1	; 0x02

      switch( t_id)
    91a0:	1f 30       	cpi	r17, 0x0F	; 15
    91a2:	01 f1       	breq	.+64     	; 0x91e4 <hal_requestTimer+0x106>
    91a4:	10 31       	cpi	r17, 0x10	; 16
    91a6:	38 f4       	brcc	.+14     	; 0x91b6 <hal_requestTimer+0xd8>
    91a8:	15 30       	cpi	r17, 0x05	; 5
    91aa:	a1 f0       	breq	.+40     	; 0x91d4 <hal_requestTimer+0xf6>
    91ac:	1a 30       	cpi	r17, 0x0A	; 10
    91ae:	b9 f0       	breq	.+46     	; 0x91de <hal_requestTimer+0x100>
    91b0:	11 23       	and	r17, r17
    91b2:	69 f0       	breq	.+26     	; 0x91ce <hal_requestTimer+0xf0>
    91b4:	37 c0       	rjmp	.+110    	; 0x9224 <hal_requestTimer+0x146>
    91b6:	19 31       	cpi	r17, 0x19	; 25
    91b8:	e9 f0       	breq	.+58     	; 0x91f4 <hal_requestTimer+0x116>
    91ba:	1a 31       	cpi	r17, 0x1A	; 26
    91bc:	18 f4       	brcc	.+6      	; 0x91c4 <hal_requestTimer+0xe6>
    91be:	14 31       	cpi	r17, 0x14	; 20
    91c0:	89 f5       	brne	.+98     	; 0x9224 <hal_requestTimer+0x146>
    91c2:	15 c0       	rjmp	.+42     	; 0x91ee <hal_requestTimer+0x110>
    91c4:	1e 31       	cpi	r17, 0x1E	; 30
    91c6:	d9 f0       	breq	.+54     	; 0x91fe <hal_requestTimer+0x120>
    91c8:	13 32       	cpi	r17, 0x23	; 35
    91ca:	61 f5       	brne	.+88     	; 0x9224 <hal_requestTimer+0x146>
    91cc:	1f c0       	rjmp	.+62     	; 0x920c <hal_requestTimer+0x12e>
      {
         case TIMER_1:

            pt_timerHndl->pt_timer0 = &TCC0;
    91ce:	80 e0       	ldi	r24, 0x00	; 0
    91d0:	98 e0       	ldi	r25, 0x08	; 8
    91d2:	17 c0       	rjmp	.+46     	; 0x9202 <hal_requestTimer+0x124>

         break;

         case TIMER_2:

            pt_timerHndl->pt_timer0 = NULL;
    91d4:	14 82       	std	Z+4, r1	; 0x04
    91d6:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCC1;
    91d8:	80 e4       	ldi	r24, 0x40	; 64
    91da:	98 e0       	ldi	r25, 0x08	; 8
    91dc:	1b c0       	rjmp	.+54     	; 0x9214 <hal_requestTimer+0x136>

         break;

         case TIMER_3:

            pt_timerHndl->pt_timer0 = &TCD0;
    91de:	80 e0       	ldi	r24, 0x00	; 0
    91e0:	99 e0       	ldi	r25, 0x09	; 9
    91e2:	0f c0       	rjmp	.+30     	; 0x9202 <hal_requestTimer+0x124>

         break;

         case TIMER_4:

            pt_timerHndl->pt_timer0 = NULL;
    91e4:	14 82       	std	Z+4, r1	; 0x04
    91e6:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCD1;
    91e8:	80 e4       	ldi	r24, 0x40	; 64
    91ea:	99 e0       	ldi	r25, 0x09	; 9
    91ec:	13 c0       	rjmp	.+38     	; 0x9214 <hal_requestTimer+0x136>

         break;

         case TIMER_5:

            pt_timerHndl->pt_timer0 = &TCE0;
    91ee:	80 e0       	ldi	r24, 0x00	; 0
    91f0:	9a e0       	ldi	r25, 0x0A	; 10
    91f2:	07 c0       	rjmp	.+14     	; 0x9202 <hal_requestTimer+0x124>

         break;

         case TIMER_6:

            pt_timerHndl->pt_timer0 = NULL;
    91f4:	14 82       	std	Z+4, r1	; 0x04
    91f6:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCE1;
    91f8:	80 e4       	ldi	r24, 0x40	; 64
    91fa:	9a e0       	ldi	r25, 0x0A	; 10
    91fc:	0b c0       	rjmp	.+22     	; 0x9214 <hal_requestTimer+0x136>

         break;

         case TIMER_7:

            pt_timerHndl->pt_timer0 = &TCF0;
    91fe:	80 e0       	ldi	r24, 0x00	; 0
    9200:	9b e0       	ldi	r25, 0x0B	; 11
    9202:	84 83       	std	Z+4, r24	; 0x04
    9204:	95 83       	std	Z+5, r25	; 0x05
            pt_timerHndl->pt_timer1 = NULL;
    9206:	16 82       	std	Z+6, r1	; 0x06
    9208:	17 82       	std	Z+7, r1	; 0x07
    920a:	0c c0       	rjmp	.+24     	; 0x9224 <hal_requestTimer+0x146>

         break;

         case TIMER_8:

            pt_timerHndl->pt_timer0 = NULL;
    920c:	14 82       	std	Z+4, r1	; 0x04
    920e:	15 82       	std	Z+5, r1	; 0x05
            pt_timerHndl->pt_timer1 = &TCF1;
    9210:	80 e4       	ldi	r24, 0x40	; 64
    9212:	9b e0       	ldi	r25, 0x0B	; 11
    9214:	86 83       	std	Z+6, r24	; 0x06
    9216:	97 83       	std	Z+7, r25	; 0x07
    9218:	05 c0       	rjmp	.+10     	; 0x9224 <hal_requestTimer+0x146>
      }/*End switch( t_id)*/

   }/*End if( pt_timerHndl == NULL)*/
   else /*Yes*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    921a:	89 81       	ldd	r24, Y+1	; 0x01
    921c:	8f bf       	out	0x3f, r24	; 63
    921e:	27 ef       	ldi	r18, 0xF7	; 247
    9220:	3f ef       	ldi	r19, 0xFF	; 255
    9222:	04 c0       	rjmp	.+8      	; 0x922c <hal_requestTimer+0x14e>
      return (t_TIMERHNDL)TIMER_MODULE_OPEN;
   }

   HAL_END_CRITICAL();//Enable interrupts
    9224:	89 81       	ldd	r24, Y+1	; 0x01
    9226:	8f bf       	out	0x3f, r24	; 63

   return (t_TIMERHNDL)t_linkHndl;
    9228:	2a 81       	ldd	r18, Y+2	; 0x02
    922a:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End hal_requestTimer*/
    922c:	c9 01       	movw	r24, r18
    922e:	25 96       	adiw	r28, 0x05	; 5
    9230:	cd bf       	out	0x3d, r28	; 61
    9232:	de bf       	out	0x3e, r29	; 62
    9234:	cf 91       	pop	r28
    9236:	df 91       	pop	r29
    9238:	1f 91       	pop	r17
    923a:	08 95       	ret

0000923c <hal_requestTimerInterrupt>:
}/*End createTimerHandle*/

t_timerError hal_requestTimerInterrupt( t_TIMERHNDL t_handle,
                                        t_compType t_type,
                                        void (*pf_funPtr)( void))
{
    923c:	cf 92       	push	r12
    923e:	df 92       	push	r13
    9240:	ef 92       	push	r14
    9242:	ff 92       	push	r15
    9244:	0f 93       	push	r16
    9246:	1f 93       	push	r17
    9248:	df 93       	push	r29
    924a:	cf 93       	push	r28
    924c:	cd b7       	in	r28, 0x3d	; 61
    924e:	de b7       	in	r29, 0x3e	; 62
    9250:	27 97       	sbiw	r28, 0x07	; 7
    9252:	cd bf       	out	0x3d, r28	; 61
    9254:	de bf       	out	0x3e, r29	; 62
    9256:	8e 83       	std	Y+6, r24	; 0x06
    9258:	9f 83       	std	Y+7, r25	; 0x07
    925a:	e6 2e       	mov	r14, r22
    925c:	6a 01       	movw	r12, r20

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    925e:	8f b7       	in	r24, 0x3f	; 63
    9260:	89 83       	std	Y+1, r24	; 0x01
    9262:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a Timer channel?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_timerHndlList) == false)
    9264:	ee 81       	ldd	r30, Y+6	; 0x06
    9266:	ff 81       	ldd	r31, Y+7	; 0x07
    9268:	20 91 d4 20 	lds	r18, 0x20D4
    926c:	30 91 d5 20 	lds	r19, 0x20D5
    9270:	84 81       	ldd	r24, Z+4	; 0x04
    9272:	95 81       	ldd	r25, Z+5	; 0x05
    9274:	82 17       	cp	r24, r18
    9276:	93 07       	cpc	r25, r19
    9278:	21 f0       	breq	.+8      	; 0x9282 <hal_requestTimerInterrupt+0x46>
   {
      HAL_END_CRITICAL();//Enable interrupts
    927a:	89 81       	ldd	r24, Y+1	; 0x01
    927c:	8f bf       	out	0x3f, r24	; 63
    927e:	8b ef       	ldi	r24, 0xFB	; 251
    9280:	bd c0       	rjmp	.+378    	; 0x93fc <hal_requestTimerInterrupt+0x1c0>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the Timer 
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_timerHndl = (t_timerModHndl *)
    9282:	ee 81       	ldd	r30, Y+6	; 0x06
    9284:	ff 81       	ldd	r31, Y+7	; 0x07
    9286:	00 81       	ld	r16, Z
    9288:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Use the timer module id and interrrupt type as an index into the list
       * of possible interrupts.
       *---------------------------------------------------------------------*/
      t_intId = (t_timerIntId)pt_timerHndl->t_id + (t_timerIntId)t_type;
    928a:	d8 01       	movw	r26, r16
    928c:	fc 90       	ld	r15, X
    928e:	f6 0e       	add	r15, r22

      if( (t_intId == TIMER_2_NA_C) || (t_intId == TIMER_2_NA_D) ||
    9290:	8f 2d       	mov	r24, r15
    9292:	87 50       	subi	r24, 0x07	; 7
    9294:	82 30       	cpi	r24, 0x02	; 2
    9296:	a8 f0       	brcs	.+42     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    9298:	b1 e1       	ldi	r27, 0x11	; 17
    929a:	fb 16       	cp	r15, r27
    929c:	91 f0       	breq	.+36     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    929e:	e2 e1       	ldi	r30, 0x12	; 18
    92a0:	fe 16       	cp	r15, r30
    92a2:	79 f0       	breq	.+30     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    92a4:	fb e1       	ldi	r31, 0x1B	; 27
    92a6:	ff 16       	cp	r15, r31
    92a8:	61 f0       	breq	.+24     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    92aa:	8c e1       	ldi	r24, 0x1C	; 28
    92ac:	f8 16       	cp	r15, r24
    92ae:	49 f0       	breq	.+18     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    92b0:	a5 e2       	ldi	r26, 0x25	; 37
    92b2:	fa 16       	cp	r15, r26
    92b4:	31 f0       	breq	.+12     	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    92b6:	b6 e2       	ldi	r27, 0x26	; 38
    92b8:	fb 16       	cp	r15, r27
    92ba:	19 f0       	breq	.+6      	; 0x92c2 <hal_requestTimerInterrupt+0x86>
    92bc:	e7 e2       	ldi	r30, 0x27	; 39
    92be:	ef 15       	cp	r30, r15
    92c0:	20 f4       	brcc	.+8      	; 0x92ca <hal_requestTimerInterrupt+0x8e>
          (t_intId == TIMER_4_NA_C) || (t_intId == TIMER_4_NA_D) ||
          (t_intId == TIMER_6_NA_C) || (t_intId == TIMER_6_NA_D) ||
          (t_intId == TIMER_8_NA_C) || (t_intId == TIMER_8_NA_D) ||
          (t_intId < TIMER_1_COMP_A) || (t_intId > TIMER_8_OVERFLOW))
      {
         HAL_END_CRITICAL();//Enable interrupts
    92c2:	89 81       	ldd	r24, Y+1	; 0x01
    92c4:	8f bf       	out	0x3f, r24	; 63
    92c6:	8a ef       	ldi	r24, 0xFA	; 250
    92c8:	99 c0       	rjmp	.+306    	; 0x93fc <hal_requestTimerInterrupt+0x1c0>
         return TIMER_INVALID_COMP;
      }

      pt_timerIntHndl = findTimerIntElement( t_intId);
    92ca:	8f 2d       	mov	r24, r15
    92cc:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <findTimerIntElement>

      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_timerIntHndl == NULL) /*No*/
    92d0:	89 2b       	or	r24, r25
    92d2:	09 f0       	breq	.+2      	; 0x92d6 <hal_requestTimerInterrupt+0x9a>
    92d4:	8c c0       	rjmp	.+280    	; 0x93ee <hal_requestTimerInterrupt+0x1b2>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link where the Timer interrupt information 
    * will be stored.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_timerIntHndl));
    92d6:	83 e0       	ldi	r24, 0x03	; 3
    92d8:	90 e0       	ldi	r25, 0x00	; 0
    92da:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    92de:	8c 83       	std	Y+4, r24	; 0x04
    92e0:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    92e2:	8c 81       	ldd	r24, Y+4	; 0x04
    92e4:	9d 81       	ldd	r25, Y+5	; 0x05
    92e6:	97 ff       	sbrs	r25, 7
    92e8:	03 c0       	rjmp	.+6      	; 0x92f0 <hal_requestTimerInterrupt+0xb4>
    92ea:	8f ef       	ldi	r24, 0xFF	; 255
    92ec:	9f ef       	ldi	r25, 0xFF	; 255
    92ee:	0b c0       	rjmp	.+22     	; 0x9306 <hal_requestTimerInterrupt+0xca>
   }

   /*------------------------------------------------------------------------*
    * Add the Timer interrupt link onto the list open Timer interrupts.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_timerIntHndlList,
    92f0:	80 91 e2 20 	lds	r24, 0x20E2
    92f4:	90 91 e3 20 	lds	r25, 0x20E3
    92f8:	6c 81       	ldd	r22, Y+4	; 0x04
    92fa:	7d 81       	ldd	r23, Y+5	; 0x05
    92fc:	41 e0       	ldi	r20, 0x01	; 1
    92fe:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    9302:	8c 81       	ldd	r24, Y+4	; 0x04
    9304:	9d 81       	ldd	r25, Y+5	; 0x05
      /*---------------------------------------------------------------------*
       * Is there already and open handle for this interrupt?
       *---------------------------------------------------------------------*/
      if( pt_timerIntHndl == NULL) /*No*/
      {
         t_linkHndl = createIntHandle();
    9306:	8a 83       	std	Y+2, r24	; 0x02
    9308:	9b 83       	std	Y+3, r25	; 0x03
         if( t_linkHndl < 0)
    930a:	8a 81       	ldd	r24, Y+2	; 0x02
    930c:	9b 81       	ldd	r25, Y+3	; 0x03
    930e:	97 ff       	sbrs	r25, 7
    9310:	04 c0       	rjmp	.+8      	; 0x931a <hal_requestTimerInterrupt+0xde>
         {
            HAL_END_CRITICAL();//Enable interrupts
    9312:	89 81       	ldd	r24, Y+1	; 0x01
    9314:	8f bf       	out	0x3f, r24	; 63
    9316:	8f ef       	ldi	r24, 0xFF	; 255
    9318:	71 c0       	rjmp	.+226    	; 0x93fc <hal_requestTimerInterrupt+0x1c0>

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the Timer 
          * interrupt information is being stored.
          *------------------------------------------------------------------*/
         pt_timerIntHndl = (t_timerIntHndl *)
    931a:	ea 81       	ldd	r30, Y+2	; 0x02
    931c:	fb 81       	ldd	r31, Y+3	; 0x03
    931e:	01 90       	ld	r0, Z+
    9320:	f0 81       	ld	r31, Z
    9322:	e0 2d       	mov	r30, r0
         UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_linkHndl);

         pt_timerIntHndl->t_id = t_intId;
    9324:	f0 82       	st	Z, r15
         pt_timerIntHndl->pf_funPtr = pf_funPtr;
    9326:	c1 82       	std	Z+1, r12	; 0x01
    9328:	d2 82       	std	Z+2, r13	; 0x02

         /*------------------------------------------------------------------*
          * Keep track of how many interrupts this handle has open.
          *------------------------------------------------------------------*/
         pt_timerHndl->c_intCount++;
    932a:	d8 01       	movw	r26, r16
    932c:	12 96       	adiw	r26, 0x02	; 2
    932e:	8c 91       	ld	r24, X
    9330:	12 97       	sbiw	r26, 0x02	; 2
    9332:	8f 5f       	subi	r24, 0xFF	; 255
    9334:	12 96       	adiw	r26, 0x02	; 2
    9336:	8c 93       	st	X, r24

         if( t_type == OVERFLOW)
    9338:	b4 e0       	ldi	r27, 0x04	; 4
    933a:	eb 16       	cp	r14, r27
    933c:	81 f4       	brne	.+32     	; 0x935e <hal_requestTimerInterrupt+0x122>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    933e:	d8 01       	movw	r26, r16
    9340:	14 96       	adiw	r26, 0x04	; 4
    9342:	ed 91       	ld	r30, X+
    9344:	fc 91       	ld	r31, X
    9346:	15 97       	sbiw	r26, 0x05	; 5
    9348:	30 97       	sbiw	r30, 0x00	; 0
    934a:	29 f4       	brne	.+10     	; 0x9356 <hal_requestTimerInterrupt+0x11a>
               pt_timerHndl->pt_timer0->INTCTRLA |= TC_OVFINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLA |= TC_OVFINTLVL_HI_gc;
    934c:	d8 01       	movw	r26, r16
    934e:	16 96       	adiw	r26, 0x06	; 6
    9350:	ed 91       	ld	r30, X+
    9352:	fc 91       	ld	r31, X
    9354:	17 97       	sbiw	r26, 0x07	; 7
    9356:	86 81       	ldd	r24, Z+6	; 0x06
    9358:	83 60       	ori	r24, 0x03	; 3
    935a:	86 83       	std	Z+6, r24	; 0x06
    935c:	4c c0       	rjmp	.+152    	; 0x93f6 <hal_requestTimerInterrupt+0x1ba>

         }/*End if( t_type == OVERFLOW)*/
         else if( t_type == COMPAREA)
    935e:	ee 20       	and	r14, r14
    9360:	79 f4       	brne	.+30     	; 0x9380 <hal_requestTimerInterrupt+0x144>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    9362:	d8 01       	movw	r26, r16
    9364:	14 96       	adiw	r26, 0x04	; 4
    9366:	ed 91       	ld	r30, X+
    9368:	fc 91       	ld	r31, X
    936a:	15 97       	sbiw	r26, 0x05	; 5
    936c:	30 97       	sbiw	r30, 0x00	; 0
    936e:	29 f4       	brne	.+10     	; 0x937a <hal_requestTimerInterrupt+0x13e>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCAINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCAINTLVL_HI_gc;
    9370:	d8 01       	movw	r26, r16
    9372:	16 96       	adiw	r26, 0x06	; 6
    9374:	ed 91       	ld	r30, X+
    9376:	fc 91       	ld	r31, X
    9378:	17 97       	sbiw	r26, 0x07	; 7
    937a:	87 81       	ldd	r24, Z+7	; 0x07
    937c:	83 60       	ori	r24, 0x03	; 3
    937e:	11 c0       	rjmp	.+34     	; 0x93a2 <hal_requestTimerInterrupt+0x166>

         }
         else if( t_type == COMPAREB)
    9380:	b1 e0       	ldi	r27, 0x01	; 1
    9382:	eb 16       	cp	r14, r27
    9384:	81 f4       	brne	.+32     	; 0x93a6 <hal_requestTimerInterrupt+0x16a>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    9386:	d8 01       	movw	r26, r16
    9388:	14 96       	adiw	r26, 0x04	; 4
    938a:	ed 91       	ld	r30, X+
    938c:	fc 91       	ld	r31, X
    938e:	15 97       	sbiw	r26, 0x05	; 5
    9390:	30 97       	sbiw	r30, 0x00	; 0
    9392:	29 f4       	brne	.+10     	; 0x939e <hal_requestTimerInterrupt+0x162>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCBINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCBINTLVL_HI_gc;
    9394:	d8 01       	movw	r26, r16
    9396:	16 96       	adiw	r26, 0x06	; 6
    9398:	ed 91       	ld	r30, X+
    939a:	fc 91       	ld	r31, X
    939c:	17 97       	sbiw	r26, 0x07	; 7
    939e:	87 81       	ldd	r24, Z+7	; 0x07
    93a0:	8c 60       	ori	r24, 0x0C	; 12
    93a2:	87 83       	std	Z+7, r24	; 0x07
    93a4:	28 c0       	rjmp	.+80     	; 0x93f6 <hal_requestTimerInterrupt+0x1ba>
         }
         else if( t_type == COMPAREC)
    93a6:	b2 e0       	ldi	r27, 0x02	; 2
    93a8:	eb 16       	cp	r14, r27
    93aa:	79 f4       	brne	.+30     	; 0x93ca <hal_requestTimerInterrupt+0x18e>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    93ac:	d8 01       	movw	r26, r16
    93ae:	14 96       	adiw	r26, 0x04	; 4
    93b0:	ed 91       	ld	r30, X+
    93b2:	fc 91       	ld	r31, X
    93b4:	15 97       	sbiw	r26, 0x05	; 5
    93b6:	30 97       	sbiw	r30, 0x00	; 0
    93b8:	29 f4       	brne	.+10     	; 0x93c4 <hal_requestTimerInterrupt+0x188>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCCINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCCINTLVL_HI_gc;
    93ba:	d8 01       	movw	r26, r16
    93bc:	16 96       	adiw	r26, 0x06	; 6
    93be:	ed 91       	ld	r30, X+
    93c0:	fc 91       	ld	r31, X
    93c2:	17 97       	sbiw	r26, 0x07	; 7
    93c4:	87 81       	ldd	r24, Z+7	; 0x07
    93c6:	80 63       	ori	r24, 0x30	; 48
    93c8:	ec cf       	rjmp	.-40     	; 0x93a2 <hal_requestTimerInterrupt+0x166>
         }
         else if( t_type == COMPARED)
    93ca:	b3 e0       	ldi	r27, 0x03	; 3
    93cc:	eb 16       	cp	r14, r27
    93ce:	99 f4       	brne	.+38     	; 0x93f6 <hal_requestTimerInterrupt+0x1ba>
         {
            if( pt_timerHndl->pt_timer0 != NULL)
    93d0:	d8 01       	movw	r26, r16
    93d2:	14 96       	adiw	r26, 0x04	; 4
    93d4:	ed 91       	ld	r30, X+
    93d6:	fc 91       	ld	r31, X
    93d8:	15 97       	sbiw	r26, 0x05	; 5
    93da:	30 97       	sbiw	r30, 0x00	; 0
    93dc:	29 f4       	brne	.+10     	; 0x93e8 <hal_requestTimerInterrupt+0x1ac>
               pt_timerHndl->pt_timer0->INTCTRLB |= TC_CCDINTLVL_HI_gc;
            else
               pt_timerHndl->pt_timer1->INTCTRLB |= TC_CCDINTLVL_HI_gc;
    93de:	d8 01       	movw	r26, r16
    93e0:	16 96       	adiw	r26, 0x06	; 6
    93e2:	ed 91       	ld	r30, X+
    93e4:	fc 91       	ld	r31, X
    93e6:	17 97       	sbiw	r26, 0x07	; 7
    93e8:	87 81       	ldd	r24, Z+7	; 0x07
    93ea:	80 6c       	ori	r24, 0xC0	; 192
    93ec:	da cf       	rjmp	.-76     	; 0x93a2 <hal_requestTimerInterrupt+0x166>
         }

      }/*End if( pt_timerIntHndl == NULL)*/
      else /*Yes*/
      {
         HAL_END_CRITICAL();//Enable interrupts
    93ee:	89 81       	ldd	r24, Y+1	; 0x01
    93f0:	8f bf       	out	0x3f, r24	; 63
    93f2:	89 ef       	ldi	r24, 0xF9	; 249
    93f4:	03 c0       	rjmp	.+6      	; 0x93fc <hal_requestTimerInterrupt+0x1c0>
         return TIMER_INTERRUPT_OPEN;
      }

   }/*End if( pt_timerHndl != NULL)*/

   HAL_END_CRITICAL();//Enable interrupts
    93f6:	89 81       	ldd	r24, Y+1	; 0x01
    93f8:	8f bf       	out	0x3f, r24	; 63
    93fa:	80 e0       	ldi	r24, 0x00	; 0

   return TIMER_PASSED;

}/*End hal_requestTimerInterrupt*/
    93fc:	27 96       	adiw	r28, 0x07	; 7
    93fe:	cd bf       	out	0x3d, r28	; 61
    9400:	de bf       	out	0x3e, r29	; 62
    9402:	cf 91       	pop	r28
    9404:	df 91       	pop	r29
    9406:	1f 91       	pop	r17
    9408:	0f 91       	pop	r16
    940a:	ff 90       	pop	r15
    940c:	ef 90       	pop	r14
    940e:	df 90       	pop	r13
    9410:	cf 90       	pop	r12
    9412:	08 95       	ret

00009414 <hal_slaveInterrupt>:
   }/*End else if (c_busStatus & TWI_MASTER_RIF_bm)*/

}/*End hal_masterInterrupt*/

static void hal_slaveInterrupt( volatile t_twiChanHndl *pt_handle)
{
    9414:	0f 93       	push	r16
    9416:	1f 93       	push	r17
    9418:	df 93       	push	r29
    941a:	cf 93       	push	r28
    941c:	0f 92       	push	r0
    941e:	cd b7       	in	r28, 0x3d	; 61
    9420:	de b7       	in	r29, 0x3e	; 62
    9422:	8c 01       	movw	r16, r24
   volatile uint8_t c_busStatus = 0;
    9424:	19 82       	std	Y+1, r1	; 0x01
   volatile uint16_t *ps_wrPtr  = NULL;
   int8_t c_temp       = 0;

   c_busStatus = pt_handle->pt_slave->STATUS;
    9426:	dc 01       	movw	r26, r24
    9428:	19 96       	adiw	r26, 0x09	; 9
    942a:	ed 91       	ld	r30, X+
    942c:	fc 91       	ld	r31, X
    942e:	1a 97       	sbiw	r26, 0x0a	; 10
    9430:	82 81       	ldd	r24, Z+2	; 0x02
    9432:	89 83       	std	Y+1, r24	; 0x01
   ps_wrPtr    = &pt_handle->s_bufIndex;

   if( c_busStatus & TWI_SLAVE_BUSERR_bm) /*Bus error*/
    9434:	89 81       	ldd	r24, Y+1	; 0x01
    9436:	82 ff       	sbrs	r24, 2
    9438:	02 c0       	rjmp	.+4      	; 0x943e <hal_slaveInterrupt+0x2a>
   {
      pt_handle->t_status = TWI_BUS_ERROR;
    943a:	82 e0       	ldi	r24, 0x02	; 2
    943c:	2e c0       	rjmp	.+92     	; 0x949a <hal_slaveInterrupt+0x86>
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);

   }/*End if( c_busStatus & TWI_SLAVE_BUSERR_bm)*/
   else if( c_busStatus & TWI_SLAVE_COLL_bm) /*Bus collision*/
    943e:	89 81       	ldd	r24, Y+1	; 0x01
    9440:	83 ff       	sbrs	r24, 3
    9442:	11 c0       	rjmp	.+34     	; 0x9466 <hal_slaveInterrupt+0x52>
   {
      pt_handle->t_status = TWI_COLLISION;
    9444:	89 e0       	ldi	r24, 0x09	; 9
    9446:	f8 01       	movw	r30, r16
    9448:	86 83       	std	Z+6, r24	; 0x06

      /*---------------------------------------------------------------------*
       * Signal that the transaction has finished...
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
    944a:	83 85       	ldd	r24, Z+11	; 0x0b
    944c:	94 85       	ldd	r25, Z+12	; 0x0c
    944e:	89 2b       	or	r24, r25
    9450:	09 f4       	brne	.+2      	; 0x9454 <hal_slaveInterrupt+0x40>
    9452:	86 c0       	rjmp	.+268    	; 0x9560 <hal_slaveInterrupt+0x14c>
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    9454:	03 84       	ldd	r0, Z+11	; 0x0b
    9456:	f4 85       	ldd	r31, Z+12	; 0x0c
    9458:	e0 2d       	mov	r30, r0
    945a:	d8 01       	movw	r26, r16
    945c:	16 96       	adiw	r26, 0x06	; 6
    945e:	8c 91       	ld	r24, X
    9460:	60 e0       	ldi	r22, 0x00	; 0
    9462:	19 95       	eicall
    9464:	7d c0       	rjmp	.+250    	; 0x9560 <hal_slaveInterrupt+0x14c>

   }/*End else if( c_busStatus & TWI_SLAVE_COLL_bm)*/
   else if( (c_busStatus & TWI_SLAVE_APIF_bm) &&
    9466:	89 81       	ldd	r24, Y+1	; 0x01
    9468:	86 ff       	sbrs	r24, 6
    946a:	0b c0       	rjmp	.+22     	; 0x9482 <hal_slaveInterrupt+0x6e>
    946c:	89 81       	ldd	r24, Y+1	; 0x01
    946e:	80 ff       	sbrs	r24, 0
    9470:	08 c0       	rjmp	.+16     	; 0x9482 <hal_slaveInterrupt+0x6e>
            (c_busStatus & TWI_SLAVE_AP_bm)) /*Address match*/
   {
      pt_handle->t_status = TWI_TRANSACTION_BUSY;
    9472:	f8 01       	movw	r30, r16
    9474:	16 82       	std	Z+6, r1	; 0x06

      /*---------------------------------------------------------------------*
       * The buffer index is used during slave mode to keep track of how many
       * bytes have been read/written to and from the master device.
       *---------------------------------------------------------------------*/
      (*ps_wrPtr) = 0;
    9476:	11 8a       	std	Z+17, r1	; 0x11
    9478:	12 8a       	std	Z+18, r1	; 0x12

      /*---------------------------------------------------------------------*
       * Send ACK, and wait for another interrupt...
       *---------------------------------------------------------------------*/
      pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    947a:	01 84       	ldd	r0, Z+9	; 0x09
    947c:	f2 85       	ldd	r31, Z+10	; 0x0a
    947e:	e0 2d       	mov	r30, r0
    9480:	6d c0       	rjmp	.+218    	; 0x955c <hal_slaveInterrupt+0x148>
   }
   else if( c_busStatus & TWI_SLAVE_APIF_bm) /*Stop*/
    9482:	89 81       	ldd	r24, Y+1	; 0x01
    9484:	86 ff       	sbrs	r24, 6
    9486:	18 c0       	rjmp	.+48     	; 0x94b8 <hal_slaveInterrupt+0xa4>
   {
      /*---------------------------------------------------------------------*
       * Clear APIF...
       *---------------------------------------------------------------------*/
      pt_handle->pt_slave->STATUS = c_busStatus | TWI_SLAVE_APIF_bm;
    9488:	d8 01       	movw	r26, r16
    948a:	19 96       	adiw	r26, 0x09	; 9
    948c:	ed 91       	ld	r30, X+
    948e:	fc 91       	ld	r31, X
    9490:	1a 97       	sbiw	r26, 0x0a	; 10
    9492:	89 81       	ldd	r24, Y+1	; 0x01
    9494:	80 64       	ori	r24, 0x40	; 64
    9496:	82 83       	std	Z+2, r24	; 0x02

      pt_handle->t_status = TWI_TRANS_COMPLETE;
    9498:	84 e0       	ldi	r24, 0x04	; 4
    949a:	16 96       	adiw	r26, 0x06	; 6
    949c:	8c 93       	st	X, r24
    949e:	16 97       	sbiw	r26, 0x06	; 6

      /*---------------------------------------------------------------------*
       * Signal that the transaction has finished...
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_transComplete != NULL)
    94a0:	1b 96       	adiw	r26, 0x0b	; 11
    94a2:	8d 91       	ld	r24, X+
    94a4:	9c 91       	ld	r25, X
    94a6:	1c 97       	sbiw	r26, 0x0c	; 12
    94a8:	89 2b       	or	r24, r25
    94aa:	09 f4       	brne	.+2      	; 0x94ae <hal_slaveInterrupt+0x9a>
    94ac:	59 c0       	rjmp	.+178    	; 0x9560 <hal_slaveInterrupt+0x14c>
         c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    94ae:	1b 96       	adiw	r26, 0x0b	; 11
    94b0:	ed 91       	ld	r30, X+
    94b2:	fc 91       	ld	r31, X
    94b4:	1c 97       	sbiw	r26, 0x0c	; 12
    94b6:	d2 cf       	rjmp	.-92     	; 0x945c <hal_slaveInterrupt+0x48>

   }/*End else if( c_busStatus & TWI_SLAVE_APIF_bm)*/
   else if( c_busStatus & TWI_SLAVE_DIF_bm) /*Data interrupt?*/
    94b8:	89 81       	ldd	r24, Y+1	; 0x01
    94ba:	87 ff       	sbrs	r24, 7
    94bc:	51 c0       	rjmp	.+162    	; 0x9560 <hal_slaveInterrupt+0x14c>
   {
      /*---------------------------------------------------------------------*
       * Is the master requesting a read operation?
       *---------------------------------------------------------------------*/
      if( c_busStatus & TWI_SLAVE_DIR_bm) /*Master reading from slave...*/
    94be:	89 81       	ldd	r24, Y+1	; 0x01
    94c0:	81 ff       	sbrs	r24, 1
    94c2:	37 c0       	rjmp	.+110    	; 0x9532 <hal_slaveInterrupt+0x11e>
      {

         /*------------------------------------------------------------------*
          * Have we sent at least 1 byte and received a NACK from the master?
          *------------------------------------------------------------------*/
         if( ((*ps_wrPtr) > 0) && (pt_handle->pt_slave->STATUS &
    94c4:	f8 01       	movw	r30, r16
    94c6:	81 89       	ldd	r24, Z+17	; 0x11
    94c8:	92 89       	ldd	r25, Z+18	; 0x12
    94ca:	89 2b       	or	r24, r25
    94cc:	69 f0       	breq	.+26     	; 0x94e8 <hal_slaveInterrupt+0xd4>
    94ce:	01 84       	ldd	r0, Z+9	; 0x09
    94d0:	f2 85       	ldd	r31, Z+10	; 0x0a
    94d2:	e0 2d       	mov	r30, r0
    94d4:	82 81       	ldd	r24, Z+2	; 0x02
    94d6:	84 ff       	sbrs	r24, 4
    94d8:	07 c0       	rjmp	.+14     	; 0x94e8 <hal_slaveInterrupt+0xd4>
         TWI_SLAVE_RXACK_bm))
         {
            /*---------------------------------------------------------------*
             * Transaction finished...
             *---------------------------------------------------------------*/
            pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    94da:	d8 01       	movw	r26, r16
    94dc:	19 96       	adiw	r26, 0x09	; 9
    94de:	ed 91       	ld	r30, X+
    94e0:	fc 91       	ld	r31, X
    94e2:	1a 97       	sbiw	r26, 0x0a	; 10
    94e4:	82 e0       	ldi	r24, 0x02	; 2
    94e6:	3b c0       	rjmp	.+118    	; 0x955e <hal_slaveInterrupt+0x14a>
         }
         else
         {
            pt_handle->t_status = TWI_SLAVE_READ;
    94e8:	88 e0       	ldi	r24, 0x08	; 8
    94ea:	f8 01       	movw	r30, r16
    94ec:	86 83       	std	Z+6, r24	; 0x06

            /*---------------------------------------------------------------*
             * Signal that the transaction has finished...
             *---------------------------------------------------------------*/
            if( pt_handle->pf_transComplete != NULL)
    94ee:	83 85       	ldd	r24, Z+11	; 0x0b
    94f0:	94 85       	ldd	r25, Z+12	; 0x0c
    94f2:	89 2b       	or	r24, r25
    94f4:	a9 f1       	breq	.+106    	; 0x9560 <hal_slaveInterrupt+0x14c>
            {
               c_temp = pt_handle->pf_transComplete( pt_handle->t_status, 0);
    94f6:	03 84       	ldd	r0, Z+11	; 0x0b
    94f8:	f4 85       	ldd	r31, Z+12	; 0x0c
    94fa:	e0 2d       	mov	r30, r0
    94fc:	d8 01       	movw	r26, r16
    94fe:	16 96       	adiw	r26, 0x06	; 6
    9500:	8c 91       	ld	r24, X
    9502:	60 e0       	ldi	r22, 0x00	; 0
    9504:	19 95       	eicall

               pt_handle->pt_slave->DATA = c_temp;
    9506:	d8 01       	movw	r26, r16
    9508:	19 96       	adiw	r26, 0x09	; 9
    950a:	ed 91       	ld	r30, X+
    950c:	fc 91       	ld	r31, X
    950e:	1a 97       	sbiw	r26, 0x0a	; 10
    9510:	84 83       	std	Z+4, r24	; 0x04

               /*------------------------------------------------------------*
                * Let the master know data is available...
                *------------------------------------------------------------*/
               pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    9512:	19 96       	adiw	r26, 0x09	; 9
    9514:	ed 91       	ld	r30, X+
    9516:	fc 91       	ld	r31, X
    9518:	1a 97       	sbiw	r26, 0x0a	; 10
    951a:	83 e0       	ldi	r24, 0x03	; 3
    951c:	81 83       	std	Z+1, r24	; 0x01

               /*------------------------------------------------------------*
                * Keep track of how much data we have sent to the master during
                * this transaction...
                *------------------------------------------------------------*/
               (*ps_wrPtr)++;
    951e:	51 96       	adiw	r26, 0x11	; 17
    9520:	8d 91       	ld	r24, X+
    9522:	9c 91       	ld	r25, X
    9524:	52 97       	sbiw	r26, 0x12	; 18
    9526:	01 96       	adiw	r24, 0x01	; 1
    9528:	51 96       	adiw	r26, 0x11	; 17
    952a:	8d 93       	st	X+, r24
    952c:	9c 93       	st	X, r25
    952e:	52 97       	sbiw	r26, 0x12	; 18
    9530:	17 c0       	rjmp	.+46     	; 0x9560 <hal_slaveInterrupt+0x14c>

      }/*End if( c_busStatus & TWI_SLAVE_DIR_bm)*/
      else /*Master writing to slave...*/
      {

         pt_handle->t_status = TWI_SLAVE_WRITE;
    9532:	87 e0       	ldi	r24, 0x07	; 7
    9534:	f8 01       	movw	r30, r16
    9536:	86 83       	std	Z+6, r24	; 0x06

         /*------------------------------------------------------------------*
          * Signal that the transaction has finished...
          *------------------------------------------------------------------*/
         if( pt_handle->pf_transComplete != NULL)
    9538:	83 85       	ldd	r24, Z+11	; 0x0b
    953a:	94 85       	ldd	r25, Z+12	; 0x0c
    953c:	89 2b       	or	r24, r25
    953e:	49 f0       	breq	.+18     	; 0x9552 <hal_slaveInterrupt+0x13e>
         {
            c_temp = pt_handle->pf_transComplete( pt_handle->t_status,
    9540:	23 85       	ldd	r18, Z+11	; 0x0b
    9542:	34 85       	ldd	r19, Z+12	; 0x0c
    9544:	86 81       	ldd	r24, Z+6	; 0x06
    9546:	01 84       	ldd	r0, Z+9	; 0x09
    9548:	f2 85       	ldd	r31, Z+10	; 0x0a
    954a:	e0 2d       	mov	r30, r0
    954c:	64 81       	ldd	r22, Z+4	; 0x04
    954e:	f9 01       	movw	r30, r18
    9550:	19 95       	eicall
         }

         /*------------------------------------------------------------------*
          * Send ACK to master...
          *------------------------------------------------------------------*/
         pt_handle->pt_slave->CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    9552:	d8 01       	movw	r26, r16
    9554:	19 96       	adiw	r26, 0x09	; 9
    9556:	ed 91       	ld	r30, X+
    9558:	fc 91       	ld	r31, X
    955a:	1a 97       	sbiw	r26, 0x0a	; 10
    955c:	83 e0       	ldi	r24, 0x03	; 3
    955e:	81 83       	std	Z+1, r24	; 0x01

      }

   }/*End else if( c_busStatus & TWI_SLAVE_DIF_bm)*/

}/*End hal_slaveInterrupt*/
    9560:	0f 90       	pop	r0
    9562:	cf 91       	pop	r28
    9564:	df 91       	pop	r29
    9566:	1f 91       	pop	r17
    9568:	0f 91       	pop	r16
    956a:	08 95       	ret

0000956c <findTwiElement>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIS_vect)*/

static t_twiChanHndl *findTwiElement( t_twiChanId t_id)
{
    956c:	df 93       	push	r29
    956e:	cf 93       	push	r28
    9570:	0f 92       	push	r0
    9572:	0f 92       	push	r0
    9574:	cd b7       	in	r28, 0x3d	; 61
    9576:	de b7       	in	r29, 0x3e	; 62
    9578:	48 2f       	mov	r20, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the twi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_twiChanHndlList, s_count)
    957a:	e0 91 fe 20 	lds	r30, 0x20FE
    957e:	f0 91 ff 20 	lds	r31, 0x20FF
    9582:	22 81       	ldd	r18, Z+2	; 0x02
    9584:	33 81       	ldd	r19, Z+3	; 0x03
    9586:	e0 91 fe 20 	lds	r30, 0x20FE
    958a:	f0 91 ff 20 	lds	r31, 0x20FF
    958e:	0c c0       	rjmp	.+24     	; 0x95a8 <findTwiElement+0x3c>
   {
      pt_element = (t_twiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    9590:	e9 81       	ldd	r30, Y+1	; 0x01
    9592:	fa 81       	ldd	r31, Y+2	; 0x02
    9594:	01 90       	ld	r0, Z+
    9596:	f0 81       	ld	r31, Z
    9598:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    959a:	80 81       	ld	r24, Z
    959c:	84 17       	cp	r24, r20
    959e:	69 f0       	breq	.+26     	; 0x95ba <findTwiElement+0x4e>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the twi list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_twiChanHndlList, s_count)
    95a0:	21 50       	subi	r18, 0x01	; 1
    95a2:	30 40       	sbci	r19, 0x00	; 0
    95a4:	e9 81       	ldd	r30, Y+1	; 0x01
    95a6:	fa 81       	ldd	r31, Y+2	; 0x02
    95a8:	80 85       	ldd	r24, Z+8	; 0x08
    95aa:	91 85       	ldd	r25, Z+9	; 0x09
    95ac:	89 83       	std	Y+1, r24	; 0x01
    95ae:	9a 83       	std	Y+2, r25	; 0x02
    95b0:	12 16       	cp	r1, r18
    95b2:	13 06       	cpc	r1, r19
    95b4:	6c f3       	brlt	.-38     	; 0x9590 <findTwiElement+0x24>
    95b6:	e0 e0       	ldi	r30, 0x00	; 0
    95b8:	f0 e0       	ldi	r31, 0x00	; 0
    * If we make it this far the ID has not been found in the open twi module
    * list.
    *------------------------------------------------------------------------*/
   return NULL;

}/*End findTwiElement*/
    95ba:	cf 01       	movw	r24, r30
    95bc:	0f 90       	pop	r0
    95be:	0f 90       	pop	r0
    95c0:	cf 91       	pop	r28
    95c2:	df 91       	pop	r29
    95c4:	08 95       	ret

000095c6 <__vector_106>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIM_vect)*/

ISR( TWIF_TWIS_vect)
{
    95c6:	1f 92       	push	r1
    95c8:	0f 92       	push	r0
    95ca:	0f b6       	in	r0, 0x3f	; 63
    95cc:	0f 92       	push	r0
    95ce:	08 b6       	in	r0, 0x38	; 56
    95d0:	0f 92       	push	r0
    95d2:	09 b6       	in	r0, 0x39	; 57
    95d4:	0f 92       	push	r0
    95d6:	0b b6       	in	r0, 0x3b	; 59
    95d8:	0f 92       	push	r0
    95da:	11 24       	eor	r1, r1
    95dc:	18 be       	out	0x38, r1	; 56
    95de:	19 be       	out	0x39, r1	; 57
    95e0:	1b be       	out	0x3b, r1	; 59
    95e2:	2f 93       	push	r18
    95e4:	3f 93       	push	r19
    95e6:	4f 93       	push	r20
    95e8:	5f 93       	push	r21
    95ea:	6f 93       	push	r22
    95ec:	7f 93       	push	r23
    95ee:	8f 93       	push	r24
    95f0:	9f 93       	push	r25
    95f2:	af 93       	push	r26
    95f4:	bf 93       	push	r27
    95f6:	ef 93       	push	r30
    95f8:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_4);
    95fa:	83 e0       	ldi	r24, 0x03	; 3
    95fc:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9600:	00 97       	sbiw	r24, 0x00	; 0
    9602:	11 f0       	breq	.+4      	; 0x9608 <__vector_106+0x42>
   {
      hal_slaveInterrupt( pt_handle);
    9604:	0e 94 0a 4a 	call	0x9414	; 0x9414 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIS_vect)*/
    9608:	ff 91       	pop	r31
    960a:	ef 91       	pop	r30
    960c:	bf 91       	pop	r27
    960e:	af 91       	pop	r26
    9610:	9f 91       	pop	r25
    9612:	8f 91       	pop	r24
    9614:	7f 91       	pop	r23
    9616:	6f 91       	pop	r22
    9618:	5f 91       	pop	r21
    961a:	4f 91       	pop	r20
    961c:	3f 91       	pop	r19
    961e:	2f 91       	pop	r18
    9620:	0f 90       	pop	r0
    9622:	0b be       	out	0x3b, r0	; 59
    9624:	0f 90       	pop	r0
    9626:	09 be       	out	0x39, r0	; 57
    9628:	0f 90       	pop	r0
    962a:	08 be       	out	0x38, r0	; 56
    962c:	0f 90       	pop	r0
    962e:	0f be       	out	0x3f, r0	; 63
    9630:	0f 90       	pop	r0
    9632:	1f 90       	pop	r1
    9634:	18 95       	reti

00009636 <__vector_45>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIM_vect)*/

ISR( TWIE_TWIS_vect)
{
    9636:	1f 92       	push	r1
    9638:	0f 92       	push	r0
    963a:	0f b6       	in	r0, 0x3f	; 63
    963c:	0f 92       	push	r0
    963e:	08 b6       	in	r0, 0x38	; 56
    9640:	0f 92       	push	r0
    9642:	09 b6       	in	r0, 0x39	; 57
    9644:	0f 92       	push	r0
    9646:	0b b6       	in	r0, 0x3b	; 59
    9648:	0f 92       	push	r0
    964a:	11 24       	eor	r1, r1
    964c:	18 be       	out	0x38, r1	; 56
    964e:	19 be       	out	0x39, r1	; 57
    9650:	1b be       	out	0x3b, r1	; 59
    9652:	2f 93       	push	r18
    9654:	3f 93       	push	r19
    9656:	4f 93       	push	r20
    9658:	5f 93       	push	r21
    965a:	6f 93       	push	r22
    965c:	7f 93       	push	r23
    965e:	8f 93       	push	r24
    9660:	9f 93       	push	r25
    9662:	af 93       	push	r26
    9664:	bf 93       	push	r27
    9666:	ef 93       	push	r30
    9668:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_3);
    966a:	82 e0       	ldi	r24, 0x02	; 2
    966c:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9670:	00 97       	sbiw	r24, 0x00	; 0
    9672:	11 f0       	breq	.+4      	; 0x9678 <__vector_45+0x42>
   {
      hal_slaveInterrupt( pt_handle);
    9674:	0e 94 0a 4a 	call	0x9414	; 0x9414 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIS_vect)*/
    9678:	ff 91       	pop	r31
    967a:	ef 91       	pop	r30
    967c:	bf 91       	pop	r27
    967e:	af 91       	pop	r26
    9680:	9f 91       	pop	r25
    9682:	8f 91       	pop	r24
    9684:	7f 91       	pop	r23
    9686:	6f 91       	pop	r22
    9688:	5f 91       	pop	r21
    968a:	4f 91       	pop	r20
    968c:	3f 91       	pop	r19
    968e:	2f 91       	pop	r18
    9690:	0f 90       	pop	r0
    9692:	0b be       	out	0x3b, r0	; 59
    9694:	0f 90       	pop	r0
    9696:	09 be       	out	0x39, r0	; 57
    9698:	0f 90       	pop	r0
    969a:	08 be       	out	0x38, r0	; 56
    969c:	0f 90       	pop	r0
    969e:	0f be       	out	0x3f, r0	; 63
    96a0:	0f 90       	pop	r0
    96a2:	1f 90       	pop	r1
    96a4:	18 95       	reti

000096a6 <__vector_75>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIM_vect)*/

ISR( TWID_TWIS_vect)
{
    96a6:	1f 92       	push	r1
    96a8:	0f 92       	push	r0
    96aa:	0f b6       	in	r0, 0x3f	; 63
    96ac:	0f 92       	push	r0
    96ae:	08 b6       	in	r0, 0x38	; 56
    96b0:	0f 92       	push	r0
    96b2:	09 b6       	in	r0, 0x39	; 57
    96b4:	0f 92       	push	r0
    96b6:	0b b6       	in	r0, 0x3b	; 59
    96b8:	0f 92       	push	r0
    96ba:	11 24       	eor	r1, r1
    96bc:	18 be       	out	0x38, r1	; 56
    96be:	19 be       	out	0x39, r1	; 57
    96c0:	1b be       	out	0x3b, r1	; 59
    96c2:	2f 93       	push	r18
    96c4:	3f 93       	push	r19
    96c6:	4f 93       	push	r20
    96c8:	5f 93       	push	r21
    96ca:	6f 93       	push	r22
    96cc:	7f 93       	push	r23
    96ce:	8f 93       	push	r24
    96d0:	9f 93       	push	r25
    96d2:	af 93       	push	r26
    96d4:	bf 93       	push	r27
    96d6:	ef 93       	push	r30
    96d8:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_2);
    96da:	81 e0       	ldi	r24, 0x01	; 1
    96dc:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    96e0:	00 97       	sbiw	r24, 0x00	; 0
    96e2:	11 f0       	breq	.+4      	; 0x96e8 <__vector_75+0x42>
   {
      hal_slaveInterrupt( pt_handle);
    96e4:	0e 94 0a 4a 	call	0x9414	; 0x9414 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIS_vect)*/
    96e8:	ff 91       	pop	r31
    96ea:	ef 91       	pop	r30
    96ec:	bf 91       	pop	r27
    96ee:	af 91       	pop	r26
    96f0:	9f 91       	pop	r25
    96f2:	8f 91       	pop	r24
    96f4:	7f 91       	pop	r23
    96f6:	6f 91       	pop	r22
    96f8:	5f 91       	pop	r21
    96fa:	4f 91       	pop	r20
    96fc:	3f 91       	pop	r19
    96fe:	2f 91       	pop	r18
    9700:	0f 90       	pop	r0
    9702:	0b be       	out	0x3b, r0	; 59
    9704:	0f 90       	pop	r0
    9706:	09 be       	out	0x39, r0	; 57
    9708:	0f 90       	pop	r0
    970a:	08 be       	out	0x38, r0	; 56
    970c:	0f 90       	pop	r0
    970e:	0f be       	out	0x3f, r0	; 63
    9710:	0f 90       	pop	r0
    9712:	1f 90       	pop	r1
    9714:	18 95       	reti

00009716 <__vector_12>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIC_TWIM_vect)*/

ISR(TWIC_TWIS_vect)
{
    9716:	1f 92       	push	r1
    9718:	0f 92       	push	r0
    971a:	0f b6       	in	r0, 0x3f	; 63
    971c:	0f 92       	push	r0
    971e:	08 b6       	in	r0, 0x38	; 56
    9720:	0f 92       	push	r0
    9722:	09 b6       	in	r0, 0x39	; 57
    9724:	0f 92       	push	r0
    9726:	0b b6       	in	r0, 0x3b	; 59
    9728:	0f 92       	push	r0
    972a:	11 24       	eor	r1, r1
    972c:	18 be       	out	0x38, r1	; 56
    972e:	19 be       	out	0x39, r1	; 57
    9730:	1b be       	out	0x3b, r1	; 59
    9732:	2f 93       	push	r18
    9734:	3f 93       	push	r19
    9736:	4f 93       	push	r20
    9738:	5f 93       	push	r21
    973a:	6f 93       	push	r22
    973c:	7f 93       	push	r23
    973e:	8f 93       	push	r24
    9740:	9f 93       	push	r25
    9742:	af 93       	push	r26
    9744:	bf 93       	push	r27
    9746:	ef 93       	push	r30
    9748:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_1);
    974a:	80 e0       	ldi	r24, 0x00	; 0
    974c:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9750:	00 97       	sbiw	r24, 0x00	; 0
    9752:	11 f0       	breq	.+4      	; 0x9758 <__vector_12+0x42>
   {
      hal_slaveInterrupt( pt_handle);
    9754:	0e 94 0a 4a 	call	0x9414	; 0x9414 <hal_slaveInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR(TWIC_TWIS_vect)*/
    9758:	ff 91       	pop	r31
    975a:	ef 91       	pop	r30
    975c:	bf 91       	pop	r27
    975e:	af 91       	pop	r26
    9760:	9f 91       	pop	r25
    9762:	8f 91       	pop	r24
    9764:	7f 91       	pop	r23
    9766:	6f 91       	pop	r22
    9768:	5f 91       	pop	r21
    976a:	4f 91       	pop	r20
    976c:	3f 91       	pop	r19
    976e:	2f 91       	pop	r18
    9770:	0f 90       	pop	r0
    9772:	0b be       	out	0x3b, r0	; 59
    9774:	0f 90       	pop	r0
    9776:	09 be       	out	0x39, r0	; 57
    9778:	0f 90       	pop	r0
    977a:	08 be       	out	0x38, r0	; 56
    977c:	0f 90       	pop	r0
    977e:	0f be       	out	0x3f, r0	; 63
    9780:	0f 90       	pop	r0
    9782:	1f 90       	pop	r1
    9784:	18 95       	reti

00009786 <hal_masterInterrupt>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void hal_masterInterrupt( volatile t_twiChanHndl *pt_handle)
{
    9786:	cf 92       	push	r12
    9788:	df 92       	push	r13
    978a:	ef 92       	push	r14
    978c:	ff 92       	push	r15
    978e:	0f 93       	push	r16
    9790:	1f 93       	push	r17
    9792:	df 93       	push	r29
    9794:	cf 93       	push	r28
    9796:	cd b7       	in	r28, 0x3d	; 61
    9798:	de b7       	in	r29, 0x3e	; 62
    979a:	6c 97       	sbiw	r28, 0x1c	; 28
    979c:	cd bf       	out	0x3d, r28	; 61
    979e:	de bf       	out	0x3e, r29	; 62
    97a0:	7c 01       	movw	r14, r24
   volatile uint8_t c_busStatus = 0;
    97a2:	19 82       	std	Y+1, r1	; 0x01
   volatile uint8_t *pc_data     = NULL;
   volatile uint16_t s_length   = 0;
    97a4:	1a 82       	std	Y+2, r1	; 0x02
    97a6:	1b 82       	std	Y+3, r1	; 0x03
   volatile uint16_t *ps_wrPtr  = NULL;

   c_busStatus = pt_handle->pt_master->STATUS;
    97a8:	dc 01       	movw	r26, r24
    97aa:	17 96       	adiw	r26, 0x07	; 7
    97ac:	ed 91       	ld	r30, X+
    97ae:	fc 91       	ld	r31, X
    97b0:	18 97       	sbiw	r26, 0x08	; 8
    97b2:	83 81       	ldd	r24, Z+3	; 0x03
    97b4:	89 83       	std	Y+1, r24	; 0x01
   pc_data     = pt_handle->pc_data;
    97b6:	1d 96       	adiw	r26, 0x0d	; 13
    97b8:	cd 90       	ld	r12, X+
    97ba:	dc 90       	ld	r13, X
    97bc:	1e 97       	sbiw	r26, 0x0e	; 14
   s_length    = pt_handle->s_length;
    97be:	1f 96       	adiw	r26, 0x0f	; 15
    97c0:	8d 91       	ld	r24, X+
    97c2:	9c 91       	ld	r25, X
    97c4:	50 97       	sbiw	r26, 0x10	; 16
    97c6:	8a 83       	std	Y+2, r24	; 0x02
    97c8:	9b 83       	std	Y+3, r25	; 0x03
   ps_wrPtr   = &pt_handle->s_bufIndex;

   /*------------------------------------------------------------------------*
    * Check bus status
    *------------------------------------------------------------------------*/
   if( c_busStatus & TWI_MASTER_ARBLOST_bm) /*Arbitration lost*/
    97ca:	89 81       	ldd	r24, Y+1	; 0x01
    97cc:	83 ff       	sbrs	r24, 3
    97ce:	15 c0       	rjmp	.+42     	; 0x97fa <hal_masterInterrupt+0x74>
   {

      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    97d0:	17 96       	adiw	r26, 0x07	; 7
    97d2:	ed 91       	ld	r30, X+
    97d4:	fc 91       	ld	r31, X
    97d6:	18 97       	sbiw	r26, 0x08	; 8
    97d8:	93 e0       	ldi	r25, 0x03	; 3
    97da:	92 83       	std	Z+2, r25	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    97dc:	17 96       	adiw	r26, 0x07	; 7
    97de:	ed 91       	ld	r30, X+
    97e0:	fc 91       	ld	r31, X
    97e2:	18 97       	sbiw	r26, 0x08	; 8
    97e4:	92 83       	std	Z+2, r25	; 0x02

      /*---------------------------------------------------------------------*
       * Clear interrupt flag and set the status of the bus back to idle...
       *---------------------------------------------------------------------*/
      pt_handle->pt_master->STATUS = c_busStatus | TWI_MASTER_ARBLOST_bm;
    97e6:	17 96       	adiw	r26, 0x07	; 7
    97e8:	ed 91       	ld	r30, X+
    97ea:	fc 91       	ld	r31, X
    97ec:	18 97       	sbiw	r26, 0x08	; 8
    97ee:	89 81       	ldd	r24, Y+1	; 0x01
    97f0:	88 60       	ori	r24, 0x08	; 8
    97f2:	83 83       	std	Z+3, r24	; 0x03
      pt_handle->t_status          = TWI_ARB_LOST;
    97f4:	16 96       	adiw	r26, 0x06	; 6
    97f6:	9c 93       	st	X, r25
    97f8:	a9 c0       	rjmp	.+338    	; 0x994c <hal_masterInterrupt+0x1c6>


   }/*End if( (c_busStatus & TWI_MASTER_ARBLOST_bm)*/
   else if( c_busStatus & TWI_MASTER_BUSERR_bm) /*Bus error*/
    97fa:	89 81       	ldd	r24, Y+1	; 0x01
    97fc:	82 ff       	sbrs	r24, 2
    97fe:	23 c0       	rjmp	.+70     	; 0x9846 <hal_masterInterrupt+0xc0>
   {
      pt_handle->t_lastIntTime = arb_sysTimeNow();
    9800:	8e 01       	movw	r16, r28
    9802:	0c 5f       	subi	r16, 0xFC	; 252
    9804:	1f 4f       	sbci	r17, 0xFF	; 255
    9806:	c8 01       	movw	r24, r16
    9808:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>
    980c:	d7 01       	movw	r26, r14
    980e:	53 96       	adiw	r26, 0x13	; 19
    9810:	f8 01       	movw	r30, r16
    9812:	89 e1       	ldi	r24, 0x19	; 25
    9814:	01 90       	ld	r0, Z+
    9816:	0d 92       	st	X+, r0
    9818:	81 50       	subi	r24, 0x01	; 1
    981a:	e1 f7       	brne	.-8      	; 0x9814 <hal_masterInterrupt+0x8e>
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    981c:	d7 01       	movw	r26, r14
    981e:	17 96       	adiw	r26, 0x07	; 7
    9820:	ed 91       	ld	r30, X+
    9822:	fc 91       	ld	r31, X
    9824:	18 97       	sbiw	r26, 0x08	; 8
    9826:	83 e0       	ldi	r24, 0x03	; 3
    9828:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    982a:	17 96       	adiw	r26, 0x07	; 7
    982c:	ed 91       	ld	r30, X+
    982e:	fc 91       	ld	r31, X
    9830:	18 97       	sbiw	r26, 0x08	; 8
    9832:	82 83       	std	Z+2, r24	; 0x02

      /*---------------------------------------------------------------------*
       * Clear interrupt flag and set the status of the bus back to idle...
       *---------------------------------------------------------------------*/
      pt_handle->pt_master->STATUS = c_busStatus | TWI_MASTER_ARBLOST_bm;
    9834:	17 96       	adiw	r26, 0x07	; 7
    9836:	ed 91       	ld	r30, X+
    9838:	fc 91       	ld	r31, X
    983a:	18 97       	sbiw	r26, 0x08	; 8
    983c:	89 81       	ldd	r24, Y+1	; 0x01
    983e:	88 60       	ori	r24, 0x08	; 8
    9840:	83 83       	std	Z+3, r24	; 0x03
      pt_handle->t_status          = TWI_BUS_ERROR;
    9842:	82 e0       	ldi	r24, 0x02	; 2
    9844:	81 c0       	rjmp	.+258    	; 0x9948 <hal_masterInterrupt+0x1c2>

   }/*End else if( c_busStatus & TWI_MASTER_BUSERR_bm)*/
   else if( c_busStatus & TWI_MASTER_RXACK_bm) /*Nack from slave...*/
    9846:	89 81       	ldd	r24, Y+1	; 0x01
    9848:	84 ff       	sbrs	r24, 4
    984a:	0e c0       	rjmp	.+28     	; 0x9868 <hal_masterInterrupt+0xe2>
   {
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    984c:	d7 01       	movw	r26, r14
    984e:	17 96       	adiw	r26, 0x07	; 7
    9850:	ed 91       	ld	r30, X+
    9852:	fc 91       	ld	r31, X
    9854:	18 97       	sbiw	r26, 0x08	; 8
    9856:	83 e0       	ldi	r24, 0x03	; 3
    9858:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    985a:	17 96       	adiw	r26, 0x07	; 7
    985c:	ed 91       	ld	r30, X+
    985e:	fc 91       	ld	r31, X
    9860:	18 97       	sbiw	r26, 0x08	; 8
    9862:	82 83       	std	Z+2, r24	; 0x02
      pt_handle->t_status         = TWI_NACK_RECEIVED;
    9864:	81 e0       	ldi	r24, 0x01	; 1
    9866:	70 c0       	rjmp	.+224    	; 0x9948 <hal_masterInterrupt+0x1c2>

   }/*End else if( c_busStatus & TWI_MASTER_RXACK_bm)*/
   else if (c_busStatus & TWI_MASTER_WIF_bm) /*Master write interrupt*/
    9868:	89 81       	ldd	r24, Y+1	; 0x01
    986a:	86 ff       	sbrs	r24, 6
    986c:	31 c0       	rjmp	.+98     	; 0x98d0 <hal_masterInterrupt+0x14a>
   {
      pt_handle->t_lastIntTime = arb_sysTimeNow();
    986e:	8e 01       	movw	r16, r28
    9870:	0c 5f       	subi	r16, 0xFC	; 252
    9872:	1f 4f       	sbci	r17, 0xFF	; 255
    9874:	c8 01       	movw	r24, r16
    9876:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>
    987a:	d7 01       	movw	r26, r14
    987c:	53 96       	adiw	r26, 0x13	; 19
    987e:	f8 01       	movw	r30, r16
    9880:	89 e1       	ldi	r24, 0x19	; 25
    9882:	01 90       	ld	r0, Z+
    9884:	0d 92       	st	X+, r0
    9886:	81 50       	subi	r24, 0x01	; 1
    9888:	e1 f7       	brne	.-8      	; 0x9882 <hal_masterInterrupt+0xfc>

      if( (*ps_wrPtr) < s_length)
    988a:	f7 01       	movw	r30, r14
    988c:	21 89       	ldd	r18, Z+17	; 0x11
    988e:	32 89       	ldd	r19, Z+18	; 0x12
    9890:	8a 81       	ldd	r24, Y+2	; 0x02
    9892:	9b 81       	ldd	r25, Y+3	; 0x03
    9894:	28 17       	cp	r18, r24
    9896:	39 07       	cpc	r19, r25
    9898:	a0 f4       	brcc	.+40     	; 0x98c2 <hal_masterInterrupt+0x13c>
      {
         pt_handle->pt_master->DATA = pc_data[*ps_wrPtr];
    989a:	07 80       	ldd	r0, Z+7	; 0x07
    989c:	f0 85       	ldd	r31, Z+8	; 0x08
    989e:	e0 2d       	mov	r30, r0
    98a0:	d7 01       	movw	r26, r14
    98a2:	51 96       	adiw	r26, 0x11	; 17
    98a4:	8d 91       	ld	r24, X+
    98a6:	9c 91       	ld	r25, X
    98a8:	52 97       	sbiw	r26, 0x12	; 18
    98aa:	c8 0e       	add	r12, r24
    98ac:	d9 1e       	adc	r13, r25
    98ae:	d6 01       	movw	r26, r12
    98b0:	8c 91       	ld	r24, X
    98b2:	86 83       	std	Z+6, r24	; 0x06
         (*ps_wrPtr)++;
    98b4:	f7 01       	movw	r30, r14
    98b6:	81 89       	ldd	r24, Z+17	; 0x11
    98b8:	92 89       	ldd	r25, Z+18	; 0x12
    98ba:	01 96       	adiw	r24, 0x01	; 1
    98bc:	81 8b       	std	Z+17, r24	; 0x11
    98be:	92 8b       	std	Z+18, r25	; 0x12
    98c0:	45 c0       	rjmp	.+138    	; 0x994c <hal_masterInterrupt+0x1c6>

      }/*End if( (*ps_wrPtr) < s_length)*/
      else /*Transaction finished...*/
      {
         pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_STOP_gc;
    98c2:	d7 01       	movw	r26, r14
    98c4:	17 96       	adiw	r26, 0x07	; 7
    98c6:	ed 91       	ld	r30, X+
    98c8:	fc 91       	ld	r31, X
    98ca:	18 97       	sbiw	r26, 0x08	; 8
    98cc:	83 e0       	ldi	r24, 0x03	; 3
    98ce:	35 c0       	rjmp	.+106    	; 0x993a <hal_masterInterrupt+0x1b4>
         pt_handle->t_status         = TWI_TRANS_COMPLETE;

      }

   }/*End else if (c_busStatus & TWI_MASTER_WIF_bm)*/
   else if (c_busStatus & TWI_MASTER_RIF_bm) /*Master read interrupt*/
    98d0:	89 81       	ldd	r24, Y+1	; 0x01
    98d2:	87 ff       	sbrs	r24, 7
    98d4:	3b c0       	rjmp	.+118    	; 0x994c <hal_masterInterrupt+0x1c6>
   {

      pt_handle->t_lastIntTime = arb_sysTimeNow();
    98d6:	8e 01       	movw	r16, r28
    98d8:	0c 5f       	subi	r16, 0xFC	; 252
    98da:	1f 4f       	sbci	r17, 0xFF	; 255
    98dc:	c8 01       	movw	r24, r16
    98de:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>
    98e2:	d7 01       	movw	r26, r14
    98e4:	53 96       	adiw	r26, 0x13	; 19
    98e6:	f8 01       	movw	r30, r16
    98e8:	89 e1       	ldi	r24, 0x19	; 25
    98ea:	01 90       	ld	r0, Z+
    98ec:	0d 92       	st	X+, r0
    98ee:	81 50       	subi	r24, 0x01	; 1
    98f0:	e1 f7       	brne	.-8      	; 0x98ea <hal_masterInterrupt+0x164>

      /*---------------------------------------------------------------------*
       * Store data if there is room in the buffer...
       *---------------------------------------------------------------------*/
      if( (*ps_wrPtr) < s_length)
    98f2:	f7 01       	movw	r30, r14
    98f4:	21 89       	ldd	r18, Z+17	; 0x11
    98f6:	32 89       	ldd	r19, Z+18	; 0x12
    98f8:	8a 81       	ldd	r24, Y+2	; 0x02
    98fa:	9b 81       	ldd	r25, Y+3	; 0x03
    98fc:	28 17       	cp	r18, r24
    98fe:	39 07       	cpc	r19, r25
    9900:	b0 f4       	brcc	.+44     	; 0x992e <hal_masterInterrupt+0x1a8>
      {
         pc_data[*ps_wrPtr] = pt_handle->pt_master->DATA;
    9902:	81 89       	ldd	r24, Z+17	; 0x11
    9904:	92 89       	ldd	r25, Z+18	; 0x12
    9906:	c8 0e       	add	r12, r24
    9908:	d9 1e       	adc	r13, r25
    990a:	07 80       	ldd	r0, Z+7	; 0x07
    990c:	f0 85       	ldd	r31, Z+8	; 0x08
    990e:	e0 2d       	mov	r30, r0
    9910:	86 81       	ldd	r24, Z+6	; 0x06
    9912:	d6 01       	movw	r26, r12
    9914:	8c 93       	st	X, r24
         (*ps_wrPtr)++;
    9916:	f7 01       	movw	r30, r14
    9918:	81 89       	ldd	r24, Z+17	; 0x11
    991a:	92 89       	ldd	r25, Z+18	; 0x12
    991c:	01 96       	adiw	r24, 0x01	; 1
    991e:	81 8b       	std	Z+17, r24	; 0x11
    9920:	92 8b       	std	Z+18, r25	; 0x12

         /*------------------------------------------------------------------*
          * We still need to read more data out of the slave...
          *------------------------------------------------------------------*/
         pt_handle->pt_master->CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    9922:	07 80       	ldd	r0, Z+7	; 0x07
    9924:	f0 85       	ldd	r31, Z+8	; 0x08
    9926:	e0 2d       	mov	r30, r0
    9928:	82 e0       	ldi	r24, 0x02	; 2
    992a:	82 83       	std	Z+2, r24	; 0x02
    992c:	0f c0       	rjmp	.+30     	; 0x994c <hal_masterInterrupt+0x1c6>

      }/*End if( (*ps_wrPtr) < s_length)*/
      else
      {
         pt_handle->pt_master->CTRLC = TWI_MASTER_ACKACT_bm |
    992e:	d7 01       	movw	r26, r14
    9930:	17 96       	adiw	r26, 0x07	; 7
    9932:	ed 91       	ld	r30, X+
    9934:	fc 91       	ld	r31, X
    9936:	18 97       	sbiw	r26, 0x08	; 8
    9938:	87 e0       	ldi	r24, 0x07	; 7
    993a:	82 83       	std	Z+2, r24	; 0x02
         TWI_MASTER_CMD_STOP_gc;
         pt_handle->pt_master->CTRLC = TWI_MASTER_ACKACT_bm |
    993c:	17 96       	adiw	r26, 0x07	; 7
    993e:	ed 91       	ld	r30, X+
    9940:	fc 91       	ld	r31, X
    9942:	18 97       	sbiw	r26, 0x08	; 8
    9944:	82 83       	std	Z+2, r24	; 0x02
         TWI_MASTER_CMD_STOP_gc;
         pt_handle->t_status = TWI_TRANS_COMPLETE;
    9946:	84 e0       	ldi	r24, 0x04	; 4
    9948:	16 96       	adiw	r26, 0x06	; 6
    994a:	8c 93       	st	X, r24

      }

   }/*End else if (c_busStatus & TWI_MASTER_RIF_bm)*/

}/*End hal_masterInterrupt*/
    994c:	6c 96       	adiw	r28, 0x1c	; 28
    994e:	cd bf       	out	0x3d, r28	; 61
    9950:	de bf       	out	0x3e, r29	; 62
    9952:	cf 91       	pop	r28
    9954:	df 91       	pop	r29
    9956:	1f 91       	pop	r17
    9958:	0f 91       	pop	r16
    995a:	ff 90       	pop	r15
    995c:	ef 90       	pop	r14
    995e:	df 90       	pop	r13
    9960:	cf 90       	pop	r12
    9962:	08 95       	ret

00009964 <__vector_107>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIS_vect)*/

ISR( TWIF_TWIM_vect)
{
    9964:	1f 92       	push	r1
    9966:	0f 92       	push	r0
    9968:	0f b6       	in	r0, 0x3f	; 63
    996a:	0f 92       	push	r0
    996c:	08 b6       	in	r0, 0x38	; 56
    996e:	0f 92       	push	r0
    9970:	09 b6       	in	r0, 0x39	; 57
    9972:	0f 92       	push	r0
    9974:	0b b6       	in	r0, 0x3b	; 59
    9976:	0f 92       	push	r0
    9978:	11 24       	eor	r1, r1
    997a:	18 be       	out	0x38, r1	; 56
    997c:	19 be       	out	0x39, r1	; 57
    997e:	1b be       	out	0x3b, r1	; 59
    9980:	2f 93       	push	r18
    9982:	3f 93       	push	r19
    9984:	4f 93       	push	r20
    9986:	5f 93       	push	r21
    9988:	6f 93       	push	r22
    998a:	7f 93       	push	r23
    998c:	8f 93       	push	r24
    998e:	9f 93       	push	r25
    9990:	af 93       	push	r26
    9992:	bf 93       	push	r27
    9994:	ef 93       	push	r30
    9996:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_4);
    9998:	83 e0       	ldi	r24, 0x03	; 3
    999a:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    999e:	00 97       	sbiw	r24, 0x00	; 0
    99a0:	11 f0       	breq	.+4      	; 0x99a6 <__vector_107+0x42>
   {
      hal_masterInterrupt( pt_handle);
    99a2:	0e 94 c3 4b 	call	0x9786	; 0x9786 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIF_TWIM_vect)*/
    99a6:	ff 91       	pop	r31
    99a8:	ef 91       	pop	r30
    99aa:	bf 91       	pop	r27
    99ac:	af 91       	pop	r26
    99ae:	9f 91       	pop	r25
    99b0:	8f 91       	pop	r24
    99b2:	7f 91       	pop	r23
    99b4:	6f 91       	pop	r22
    99b6:	5f 91       	pop	r21
    99b8:	4f 91       	pop	r20
    99ba:	3f 91       	pop	r19
    99bc:	2f 91       	pop	r18
    99be:	0f 90       	pop	r0
    99c0:	0b be       	out	0x3b, r0	; 59
    99c2:	0f 90       	pop	r0
    99c4:	09 be       	out	0x39, r0	; 57
    99c6:	0f 90       	pop	r0
    99c8:	08 be       	out	0x38, r0	; 56
    99ca:	0f 90       	pop	r0
    99cc:	0f be       	out	0x3f, r0	; 63
    99ce:	0f 90       	pop	r0
    99d0:	1f 90       	pop	r1
    99d2:	18 95       	reti

000099d4 <__vector_46>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIS_vect)*/

ISR( TWIE_TWIM_vect)
{
    99d4:	1f 92       	push	r1
    99d6:	0f 92       	push	r0
    99d8:	0f b6       	in	r0, 0x3f	; 63
    99da:	0f 92       	push	r0
    99dc:	08 b6       	in	r0, 0x38	; 56
    99de:	0f 92       	push	r0
    99e0:	09 b6       	in	r0, 0x39	; 57
    99e2:	0f 92       	push	r0
    99e4:	0b b6       	in	r0, 0x3b	; 59
    99e6:	0f 92       	push	r0
    99e8:	11 24       	eor	r1, r1
    99ea:	18 be       	out	0x38, r1	; 56
    99ec:	19 be       	out	0x39, r1	; 57
    99ee:	1b be       	out	0x3b, r1	; 59
    99f0:	2f 93       	push	r18
    99f2:	3f 93       	push	r19
    99f4:	4f 93       	push	r20
    99f6:	5f 93       	push	r21
    99f8:	6f 93       	push	r22
    99fa:	7f 93       	push	r23
    99fc:	8f 93       	push	r24
    99fe:	9f 93       	push	r25
    9a00:	af 93       	push	r26
    9a02:	bf 93       	push	r27
    9a04:	ef 93       	push	r30
    9a06:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_3);
    9a08:	82 e0       	ldi	r24, 0x02	; 2
    9a0a:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9a0e:	00 97       	sbiw	r24, 0x00	; 0
    9a10:	11 f0       	breq	.+4      	; 0x9a16 <__vector_46+0x42>
   {
      hal_masterInterrupt( pt_handle);
    9a12:	0e 94 c3 4b 	call	0x9786	; 0x9786 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIE_TWIM_vect)*/
    9a16:	ff 91       	pop	r31
    9a18:	ef 91       	pop	r30
    9a1a:	bf 91       	pop	r27
    9a1c:	af 91       	pop	r26
    9a1e:	9f 91       	pop	r25
    9a20:	8f 91       	pop	r24
    9a22:	7f 91       	pop	r23
    9a24:	6f 91       	pop	r22
    9a26:	5f 91       	pop	r21
    9a28:	4f 91       	pop	r20
    9a2a:	3f 91       	pop	r19
    9a2c:	2f 91       	pop	r18
    9a2e:	0f 90       	pop	r0
    9a30:	0b be       	out	0x3b, r0	; 59
    9a32:	0f 90       	pop	r0
    9a34:	09 be       	out	0x39, r0	; 57
    9a36:	0f 90       	pop	r0
    9a38:	08 be       	out	0x38, r0	; 56
    9a3a:	0f 90       	pop	r0
    9a3c:	0f be       	out	0x3f, r0	; 63
    9a3e:	0f 90       	pop	r0
    9a40:	1f 90       	pop	r1
    9a42:	18 95       	reti

00009a44 <__vector_76>:
   }/*End if( pt_handle != NULL)*/

}/*End ISR(TWIC_TWIS_vect)*/

ISR( TWID_TWIM_vect)
{
    9a44:	1f 92       	push	r1
    9a46:	0f 92       	push	r0
    9a48:	0f b6       	in	r0, 0x3f	; 63
    9a4a:	0f 92       	push	r0
    9a4c:	08 b6       	in	r0, 0x38	; 56
    9a4e:	0f 92       	push	r0
    9a50:	09 b6       	in	r0, 0x39	; 57
    9a52:	0f 92       	push	r0
    9a54:	0b b6       	in	r0, 0x3b	; 59
    9a56:	0f 92       	push	r0
    9a58:	11 24       	eor	r1, r1
    9a5a:	18 be       	out	0x38, r1	; 56
    9a5c:	19 be       	out	0x39, r1	; 57
    9a5e:	1b be       	out	0x3b, r1	; 59
    9a60:	2f 93       	push	r18
    9a62:	3f 93       	push	r19
    9a64:	4f 93       	push	r20
    9a66:	5f 93       	push	r21
    9a68:	6f 93       	push	r22
    9a6a:	7f 93       	push	r23
    9a6c:	8f 93       	push	r24
    9a6e:	9f 93       	push	r25
    9a70:	af 93       	push	r26
    9a72:	bf 93       	push	r27
    9a74:	ef 93       	push	r30
    9a76:	ff 93       	push	r31
    t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_2);
    9a78:	81 e0       	ldi	r24, 0x01	; 1
    9a7a:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9a7e:	00 97       	sbiw	r24, 0x00	; 0
    9a80:	11 f0       	breq	.+4      	; 0x9a86 <__vector_76+0x42>
   {
      hal_masterInterrupt( pt_handle);
    9a82:	0e 94 c3 4b 	call	0x9786	; 0x9786 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWID_TWIM_vect)*/
    9a86:	ff 91       	pop	r31
    9a88:	ef 91       	pop	r30
    9a8a:	bf 91       	pop	r27
    9a8c:	af 91       	pop	r26
    9a8e:	9f 91       	pop	r25
    9a90:	8f 91       	pop	r24
    9a92:	7f 91       	pop	r23
    9a94:	6f 91       	pop	r22
    9a96:	5f 91       	pop	r21
    9a98:	4f 91       	pop	r20
    9a9a:	3f 91       	pop	r19
    9a9c:	2f 91       	pop	r18
    9a9e:	0f 90       	pop	r0
    9aa0:	0b be       	out	0x3b, r0	; 59
    9aa2:	0f 90       	pop	r0
    9aa4:	09 be       	out	0x39, r0	; 57
    9aa6:	0f 90       	pop	r0
    9aa8:	08 be       	out	0x38, r0	; 56
    9aaa:	0f 90       	pop	r0
    9aac:	0f be       	out	0x3f, r0	; 63
    9aae:	0f 90       	pop	r0
    9ab0:	1f 90       	pop	r1
    9ab2:	18 95       	reti

00009ab4 <__vector_13>:
   }/*End else if( c_busStatus & TWI_SLAVE_DIF_bm)*/

}/*End hal_slaveInterrupt*/

ISR( TWIC_TWIM_vect)
{
    9ab4:	1f 92       	push	r1
    9ab6:	0f 92       	push	r0
    9ab8:	0f b6       	in	r0, 0x3f	; 63
    9aba:	0f 92       	push	r0
    9abc:	08 b6       	in	r0, 0x38	; 56
    9abe:	0f 92       	push	r0
    9ac0:	09 b6       	in	r0, 0x39	; 57
    9ac2:	0f 92       	push	r0
    9ac4:	0b b6       	in	r0, 0x3b	; 59
    9ac6:	0f 92       	push	r0
    9ac8:	11 24       	eor	r1, r1
    9aca:	18 be       	out	0x38, r1	; 56
    9acc:	19 be       	out	0x39, r1	; 57
    9ace:	1b be       	out	0x3b, r1	; 59
    9ad0:	2f 93       	push	r18
    9ad2:	3f 93       	push	r19
    9ad4:	4f 93       	push	r20
    9ad6:	5f 93       	push	r21
    9ad8:	6f 93       	push	r22
    9ada:	7f 93       	push	r23
    9adc:	8f 93       	push	r24
    9ade:	9f 93       	push	r25
    9ae0:	af 93       	push	r26
    9ae2:	bf 93       	push	r27
    9ae4:	ef 93       	push	r30
    9ae6:	ff 93       	push	r31
   t_twiChanHndl *pt_handle = NULL;

   /*------------------------------------------------------------------------*
    * See if there is a handle on the list for this twi interrupt.
    *------------------------------------------------------------------------*/
   pt_handle = findTwiElement( (uint8_t)TWI_1);
    9ae8:	80 e0       	ldi	r24, 0x00	; 0
    9aea:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   if( pt_handle != NULL)
    9aee:	00 97       	sbiw	r24, 0x00	; 0
    9af0:	11 f0       	breq	.+4      	; 0x9af6 <__vector_13+0x42>
   {
      hal_masterInterrupt( pt_handle);
    9af2:	0e 94 c3 4b 	call	0x9786	; 0x9786 <hal_masterInterrupt>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( TWIC_TWIM_vect)*/
    9af6:	ff 91       	pop	r31
    9af8:	ef 91       	pop	r30
    9afa:	bf 91       	pop	r27
    9afc:	af 91       	pop	r26
    9afe:	9f 91       	pop	r25
    9b00:	8f 91       	pop	r24
    9b02:	7f 91       	pop	r23
    9b04:	6f 91       	pop	r22
    9b06:	5f 91       	pop	r21
    9b08:	4f 91       	pop	r20
    9b0a:	3f 91       	pop	r19
    9b0c:	2f 91       	pop	r18
    9b0e:	0f 90       	pop	r0
    9b10:	0b be       	out	0x3b, r0	; 59
    9b12:	0f 90       	pop	r0
    9b14:	09 be       	out	0x39, r0	; 57
    9b16:	0f 90       	pop	r0
    9b18:	08 be       	out	0x38, r0	; 56
    9b1a:	0f 90       	pop	r0
    9b1c:	0f be       	out	0x3f, r0	; 63
    9b1e:	0f 90       	pop	r0
    9b20:	1f 90       	pop	r1
    9b22:	18 95       	reti

00009b24 <hal_twiMasterWrite>:
t_twiError hal_twiMasterWrite( t_TWIHNDL t_handle,
                               uint8_t *pc_data,
                               uint16_t s_length,
                               uint8_t c_slaveAdd,
                               int8_t c_numRetries)
{
    9b24:	2f 92       	push	r2
    9b26:	3f 92       	push	r3
    9b28:	4f 92       	push	r4
    9b2a:	5f 92       	push	r5
    9b2c:	6f 92       	push	r6
    9b2e:	7f 92       	push	r7
    9b30:	8f 92       	push	r8
    9b32:	9f 92       	push	r9
    9b34:	af 92       	push	r10
    9b36:	bf 92       	push	r11
    9b38:	cf 92       	push	r12
    9b3a:	df 92       	push	r13
    9b3c:	ef 92       	push	r14
    9b3e:	ff 92       	push	r15
    9b40:	0f 93       	push	r16
    9b42:	1f 93       	push	r17
    9b44:	df 93       	push	r29
    9b46:	cf 93       	push	r28
    9b48:	cd b7       	in	r28, 0x3d	; 61
    9b4a:	de b7       	in	r29, 0x3e	; 62
    9b4c:	e8 97       	sbiw	r28, 0x38	; 56
    9b4e:	cd bf       	out	0x3d, r28	; 61
    9b50:	de bf       	out	0x3e, r29	; 62
    9b52:	8e 8f       	std	Y+30, r24	; 0x1e
    9b54:	9f 8f       	std	Y+31, r25	; 0x1f
    9b56:	4b 01       	movw	r8, r22
    9b58:	5a 01       	movw	r10, r20
    9b5a:	42 2f       	mov	r20, r18
    9b5c:	f0 2e       	mov	r15, r16
   volatile int32_t i_deltaUsec;
   
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a twi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_twiChanHndlList) == 
    9b5e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    9b60:	ff 8d       	ldd	r31, Y+31	; 0x1f
    9b62:	20 91 fe 20 	lds	r18, 0x20FE
    9b66:	30 91 ff 20 	lds	r19, 0x20FF
    9b6a:	84 81       	ldd	r24, Z+4	; 0x04
    9b6c:	95 81       	ldd	r25, Z+5	; 0x05
    9b6e:	82 17       	cp	r24, r18
    9b70:	93 07       	cpc	r25, r19
    9b72:	11 f0       	breq	.+4      	; 0x9b78 <hal_twiMasterWrite+0x54>
    9b74:	8e ef       	ldi	r24, 0xFE	; 254
    9b76:	a9 c0       	rjmp	.+338    	; 0x9cca <hal_twiMasterWrite+0x1a6>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
    9b78:	ee 8d       	ldd	r30, Y+30	; 0x1e
    9b7a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    9b7c:	00 81       	ld	r16, Z
    9b7e:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Is this handle opened against a master twi?
       *---------------------------------------------------------------------*/
      if( pt_twiChanHndl->pt_master != NULL)
    9b80:	d8 01       	movw	r26, r16
    9b82:	17 96       	adiw	r26, 0x07	; 7
    9b84:	8d 91       	ld	r24, X+
    9b86:	9c 91       	ld	r25, X
    9b88:	18 97       	sbiw	r26, 0x08	; 8
    9b8a:	89 2b       	or	r24, r25
    9b8c:	11 f4       	brne	.+4      	; 0x9b92 <hal_twiMasterWrite+0x6e>
    9b8e:	88 ef       	ldi	r24, 0xF8	; 248
    9b90:	9c c0       	rjmp	.+312    	; 0x9cca <hal_twiMasterWrite+0x1a6>
      {
         
         pt_twiChanHndl->t_status = TWI_TRANSACTION_BUSY;
    9b92:	f8 01       	movw	r30, r16
    9b94:	16 82       	std	Z+6, r1	; 0x06
            /*---------------------------------------------------------------*
             * Begin write operation by copying the slave address into this
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;
    9b96:	e4 2e       	mov	r14, r20
    9b98:	ee 0c       	add	r14, r14
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pc_data    = pc_data;
            pt_twiChanHndl->s_length   = s_length;
            pt_twiChanHndl->s_bufIndex = 0;

            pt_twiChanHndl->t_lastIntTime = arb_sysTimeNow();
    9b9a:	70 e2       	ldi	r23, 0x20	; 32
    9b9c:	67 2e       	mov	r6, r23
    9b9e:	71 2c       	mov	r7, r1
    9ba0:	6c 0e       	add	r6, r28
    9ba2:	7d 1e       	adc	r7, r29
    9ba4:	63 e1       	ldi	r22, 0x13	; 19
    9ba6:	c6 2e       	mov	r12, r22
    9ba8:	d1 2c       	mov	r13, r1
    9baa:	c0 0e       	add	r12, r16
    9bac:	d1 1e       	adc	r13, r17
            TWI_MASTER_BUSSTATE_gm) == TWI_MASTER_BUSSTATE_IDLE_gc))
            {

               hal_masterInterrupt( pt_twiChanHndl);

               t_currTime = arb_sysTimeNow();
    9bae:	55 e0       	ldi	r21, 0x05	; 5
    9bb0:	45 2e       	mov	r4, r21
    9bb2:	51 2c       	mov	r5, r1
    9bb4:	4c 0e       	add	r4, r28
    9bb6:	5d 1e       	adc	r5, r29
                   * Reset the module so that we can recover from the locked
                   * bus condition...
                   *---------------------------------------------------------*/
                  pt_twiChanHndl->pt_master->CTRLA &= ~TWI_MASTER_ENABLE_bm;
                  pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
                  pt_twiChanHndl->t_status = TWI_BUS_LOCKED;
    9bb8:	4a e0       	ldi	r20, 0x0A	; 10
    9bba:	24 2e       	mov	r2, r20

                  pt_twiChanHndl->pt_master->STATUS = 
    9bbc:	33 24       	eor	r3, r3
    9bbe:	33 94       	inc	r3
    9bc0:	7d c0       	rjmp	.+250    	; 0x9cbc <hal_twiMasterWrite+0x198>
         {

            /*---------------------------------------------------------------*
             * Wait for the bus to become available...
             *---------------------------------------------------------------*/
            while( !((pt_twiChanHndl->pt_master->STATUS & 
    9bc2:	d8 01       	movw	r26, r16
    9bc4:	17 96       	adiw	r26, 0x07	; 7
    9bc6:	ed 91       	ld	r30, X+
    9bc8:	fc 91       	ld	r31, X
    9bca:	18 97       	sbiw	r26, 0x08	; 8
    9bcc:	83 81       	ldd	r24, Z+3	; 0x03
    9bce:	83 70       	andi	r24, 0x03	; 3
    9bd0:	81 30       	cpi	r24, 0x01	; 1
    9bd2:	b9 f7       	brne	.-18     	; 0x9bc2 <hal_twiMasterWrite+0x9e>

            /*---------------------------------------------------------------*
             * Store the address and length of the data buffer this particular
             * twi is accessing.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pc_data    = pc_data;
    9bd4:	1d 96       	adiw	r26, 0x0d	; 13
    9bd6:	8d 92       	st	X+, r8
    9bd8:	9c 92       	st	X, r9
    9bda:	1e 97       	sbiw	r26, 0x0e	; 14
            pt_twiChanHndl->s_length   = s_length;
    9bdc:	1f 96       	adiw	r26, 0x0f	; 15
    9bde:	ad 92       	st	X+, r10
    9be0:	bc 92       	st	X, r11
    9be2:	50 97       	sbiw	r26, 0x10	; 16
            pt_twiChanHndl->s_bufIndex = 0;
    9be4:	51 96       	adiw	r26, 0x11	; 17
    9be6:	1d 92       	st	X+, r1
    9be8:	1c 92       	st	X, r1
    9bea:	52 97       	sbiw	r26, 0x12	; 18

            pt_twiChanHndl->t_lastIntTime = arb_sysTimeNow();
    9bec:	c3 01       	movw	r24, r6
    9bee:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>
    9bf2:	d6 01       	movw	r26, r12
    9bf4:	f3 01       	movw	r30, r6
    9bf6:	89 e1       	ldi	r24, 0x19	; 25
    9bf8:	01 90       	ld	r0, Z+
    9bfa:	0d 92       	st	X+, r0
    9bfc:	81 50       	subi	r24, 0x01	; 1
    9bfe:	e1 f7       	brne	.-8      	; 0x9bf8 <hal_twiMasterWrite+0xd4>
            /*---------------------------------------------------------------*
             * Begin write operation by copying the slave address into this
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;
    9c00:	d8 01       	movw	r26, r16
    9c02:	17 96       	adiw	r26, 0x07	; 7
    9c04:	ed 91       	ld	r30, X+
    9c06:	fc 91       	ld	r31, X
    9c08:	18 97       	sbiw	r26, 0x08	; 8
    9c0a:	e5 82       	std	Z+5, r14	; 0x05
    9c0c:	4c c0       	rjmp	.+152    	; 0x9ca6 <hal_twiMasterWrite+0x182>

            while( !((pt_twiChanHndl->pt_master->STATUS & 
            TWI_MASTER_BUSSTATE_gm) == TWI_MASTER_BUSSTATE_IDLE_gc))
            {

               hal_masterInterrupt( pt_twiChanHndl);
    9c0e:	c8 01       	movw	r24, r16
    9c10:	0e 94 c3 4b 	call	0x9786	; 0x9786 <hal_masterInterrupt>

               t_currTime = arb_sysTimeNow();
    9c14:	c2 01       	movw	r24, r4
    9c16:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>

               i_deltaUsec = t_currTime.i_usec - pt_twiChanHndl->t_lastIntTime.
    9c1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9c1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9c1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    9c20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    9c22:	f8 01       	movw	r30, r16
    9c24:	20 a5       	ldd	r18, Z+40	; 0x28
    9c26:	31 a5       	ldd	r19, Z+41	; 0x29
    9c28:	42 a5       	ldd	r20, Z+42	; 0x2a
    9c2a:	53 a5       	ldd	r21, Z+43	; 0x2b
    9c2c:	82 1b       	sub	r24, r18
    9c2e:	93 0b       	sbc	r25, r19
    9c30:	a4 0b       	sbc	r26, r20
    9c32:	b5 0b       	sbc	r27, r21
    9c34:	89 83       	std	Y+1, r24	; 0x01
    9c36:	9a 83       	std	Y+2, r25	; 0x02
    9c38:	ab 83       	std	Y+3, r26	; 0x03
    9c3a:	bc 83       	std	Y+4, r27	; 0x04
               i_usec;

               if( i_deltaUsec >= 1000000)
    9c3c:	89 81       	ldd	r24, Y+1	; 0x01
    9c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    9c40:	ab 81       	ldd	r26, Y+3	; 0x03
    9c42:	bc 81       	ldd	r27, Y+4	; 0x04
    9c44:	80 54       	subi	r24, 0x40	; 64
    9c46:	92 44       	sbci	r25, 0x42	; 66
    9c48:	af 40       	sbci	r26, 0x0F	; 15
    9c4a:	b0 40       	sbci	r27, 0x00	; 0
    9c4c:	64 f0       	brlt	.+24     	; 0x9c66 <hal_twiMasterWrite+0x142>
                  i_deltaUsec -= 1000000;
    9c4e:	89 81       	ldd	r24, Y+1	; 0x01
    9c50:	9a 81       	ldd	r25, Y+2	; 0x02
    9c52:	ab 81       	ldd	r26, Y+3	; 0x03
    9c54:	bc 81       	ldd	r27, Y+4	; 0x04
    9c56:	80 54       	subi	r24, 0x40	; 64
    9c58:	92 44       	sbci	r25, 0x42	; 66
    9c5a:	af 40       	sbci	r26, 0x0F	; 15
    9c5c:	b0 40       	sbci	r27, 0x00	; 0
    9c5e:	89 83       	std	Y+1, r24	; 0x01
    9c60:	9a 83       	std	Y+2, r25	; 0x02
    9c62:	ab 83       	std	Y+3, r26	; 0x03
    9c64:	bc 83       	std	Y+4, r27	; 0x04

               /*------------------------------------------------------------*
                * Have we encountered a bus lock condition?
                *------------------------------------------------------------*/
               if( i_deltaUsec >= TWI_BUS_RESET_TIMEOUT)
    9c66:	89 81       	ldd	r24, Y+1	; 0x01
    9c68:	9a 81       	ldd	r25, Y+2	; 0x02
    9c6a:	ab 81       	ldd	r26, Y+3	; 0x03
    9c6c:	bc 81       	ldd	r27, Y+4	; 0x04
    9c6e:	80 52       	subi	r24, 0x20	; 32
    9c70:	91 4a       	sbci	r25, 0xA1	; 161
    9c72:	a7 40       	sbci	r26, 0x07	; 7
    9c74:	b0 40       	sbci	r27, 0x00	; 0
    9c76:	bc f0       	brlt	.+46     	; 0x9ca6 <hal_twiMasterWrite+0x182>
               {
                  /*---------------------------------------------------------*
                   * Reset the module so that we can recover from the locked
                   * bus condition...
                   *---------------------------------------------------------*/
                  pt_twiChanHndl->pt_master->CTRLA &= ~TWI_MASTER_ENABLE_bm;
    9c78:	d8 01       	movw	r26, r16
    9c7a:	17 96       	adiw	r26, 0x07	; 7
    9c7c:	ed 91       	ld	r30, X+
    9c7e:	fc 91       	ld	r31, X
    9c80:	18 97       	sbiw	r26, 0x08	; 8
    9c82:	80 81       	ld	r24, Z
    9c84:	87 7f       	andi	r24, 0xF7	; 247
    9c86:	80 83       	st	Z, r24
                  pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
    9c88:	17 96       	adiw	r26, 0x07	; 7
    9c8a:	ed 91       	ld	r30, X+
    9c8c:	fc 91       	ld	r31, X
    9c8e:	18 97       	sbiw	r26, 0x08	; 8
    9c90:	80 81       	ld	r24, Z
    9c92:	88 60       	ori	r24, 0x08	; 8
    9c94:	80 83       	st	Z, r24
                  pt_twiChanHndl->t_status = TWI_BUS_LOCKED;
    9c96:	16 96       	adiw	r26, 0x06	; 6
    9c98:	2c 92       	st	X, r2
    9c9a:	16 97       	sbiw	r26, 0x06	; 6

                  pt_twiChanHndl->pt_master->STATUS = 
    9c9c:	17 96       	adiw	r26, 0x07	; 7
    9c9e:	ed 91       	ld	r30, X+
    9ca0:	fc 91       	ld	r31, X
    9ca2:	18 97       	sbiw	r26, 0x08	; 8
    9ca4:	33 82       	std	Z+3, r3	; 0x03
             * particular twi's slave address register and setting the write 
             * bit.
             *---------------------------------------------------------------*/
            pt_twiChanHndl->pt_master->ADDR = (c_slaveAdd << 1) & ~0x01;

            while( !((pt_twiChanHndl->pt_master->STATUS & 
    9ca6:	d8 01       	movw	r26, r16
    9ca8:	17 96       	adiw	r26, 0x07	; 7
    9caa:	ed 91       	ld	r30, X+
    9cac:	fc 91       	ld	r31, X
    9cae:	18 97       	sbiw	r26, 0x08	; 8
    9cb0:	83 81       	ldd	r24, Z+3	; 0x03
    9cb2:	83 70       	andi	r24, 0x03	; 3
    9cb4:	81 30       	cpi	r24, 0x01	; 1
    9cb6:	09 f0       	breq	.+2      	; 0x9cba <hal_twiMasterWrite+0x196>
    9cb8:	aa cf       	rjmp	.-172    	; 0x9c0e <hal_twiMasterWrite+0xea>

               }/*End if( i_deltaUsec >= TWI_BUS_RESET_TIMEOUT)*/

            }

            c_numRetries--;
    9cba:	fa 94       	dec	r15

         /*------------------------------------------------------------------*
          * Keep retrying the transaction until it completes, or hits the
          * timeout condition.
          *------------------------------------------------------------------*/
         while( (pt_twiChanHndl->t_status != TWI_TRANS_COMPLETE) &&
    9cbc:	f8 01       	movw	r30, r16
    9cbe:	86 81       	ldd	r24, Z+6	; 0x06
    9cc0:	84 30       	cpi	r24, 0x04	; 4
    9cc2:	11 f0       	breq	.+4      	; 0x9cc8 <hal_twiMasterWrite+0x1a4>
    9cc4:	f7 fe       	sbrs	r15, 7
    9cc6:	7d cf       	rjmp	.-262    	; 0x9bc2 <hal_twiMasterWrite+0x9e>
    9cc8:	80 e0       	ldi	r24, 0x00	; 0
      
   }

   return TWI_PASSED;

}/*End hal_twiMasterWrite*/
    9cca:	e8 96       	adiw	r28, 0x38	; 56
    9ccc:	cd bf       	out	0x3d, r28	; 61
    9cce:	de bf       	out	0x3e, r29	; 62
    9cd0:	cf 91       	pop	r28
    9cd2:	df 91       	pop	r29
    9cd4:	1f 91       	pop	r17
    9cd6:	0f 91       	pop	r16
    9cd8:	ff 90       	pop	r15
    9cda:	ef 90       	pop	r14
    9cdc:	df 90       	pop	r13
    9cde:	cf 90       	pop	r12
    9ce0:	bf 90       	pop	r11
    9ce2:	af 90       	pop	r10
    9ce4:	9f 90       	pop	r9
    9ce6:	8f 90       	pop	r8
    9ce8:	7f 90       	pop	r7
    9cea:	6f 90       	pop	r6
    9cec:	5f 90       	pop	r5
    9cee:	4f 90       	pop	r4
    9cf0:	3f 90       	pop	r3
    9cf2:	2f 90       	pop	r2
    9cf4:	08 95       	ret

00009cf6 <hal_configureTwiChannel>:

}/*End hal_releaseTwiChannel*/

t_twiError hal_configureTwiChannel( t_TWIHNDL t_handle,
                                    t_twiConfig t_conf)
{
    9cf6:	8f 92       	push	r8
    9cf8:	9f 92       	push	r9
    9cfa:	af 92       	push	r10
    9cfc:	bf 92       	push	r11
    9cfe:	cf 92       	push	r12
    9d00:	df 92       	push	r13
    9d02:	ef 92       	push	r14
    9d04:	ff 92       	push	r15
    9d06:	0f 93       	push	r16
    9d08:	1f 93       	push	r17
    9d0a:	df 93       	push	r29
    9d0c:	cf 93       	push	r28
    9d0e:	cd b7       	in	r28, 0x3d	; 61
    9d10:	de b7       	in	r29, 0x3e	; 62
    9d12:	60 97       	sbiw	r28, 0x10	; 16
    9d14:	cd bf       	out	0x3d, r28	; 61
    9d16:	de bf       	out	0x3e, r29	; 62
    9d18:	8f 83       	std	Y+7, r24	; 0x07
    9d1a:	98 87       	std	Y+8, r25	; 0x08
    9d1c:	90 2f       	mov	r25, r16
    9d1e:	09 87       	std	Y+9, r16	; 0x09
    9d20:	1a 87       	std	Y+10, r17	; 0x0a
    9d22:	2b 87       	std	Y+11, r18	; 0x0b
    9d24:	3c 87       	std	Y+12, r19	; 0x0c
    9d26:	4d 87       	std	Y+13, r20	; 0x0d
    9d28:	85 2f       	mov	r24, r21
    9d2a:	5e 87       	std	Y+14, r21	; 0x0e
    9d2c:	6f 87       	std	Y+15, r22	; 0x0f
    9d2e:	78 8b       	std	Y+16, r23	; 0x10
    9d30:	5c 01       	movw	r10, r24
    9d32:	ca 84       	ldd	r12, Y+10	; 0x0a
    9d34:	db 84       	ldd	r13, Y+11	; 0x0b
    9d36:	ec 84       	ldd	r14, Y+12	; 0x0c
    9d38:	fd 84       	ldd	r15, Y+13	; 0x0d
    9d3a:	8f 84       	ldd	r8, Y+15	; 0x0f
    9d3c:	98 88       	ldd	r9, Y+16	; 0x10

   /*------------------------------------------------------------------------*
    * We are going to be configuring registers and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9d3e:	8f b7       	in	r24, 0x3f	; 63
    9d40:	89 83       	std	Y+1, r24	; 0x01
    9d42:	f8 94       	cli

   if( (t_conf.t_mode < TWI_MASTER) || (t_conf.t_mode > TWI_SLAVE))
    9d44:	81 e0       	ldi	r24, 0x01	; 1
    9d46:	8b 15       	cp	r24, r11
    9d48:	20 f4       	brcc	.+8      	; 0x9d52 <hal_configureTwiChannel+0x5c>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9d4a:	89 81       	ldd	r24, Y+1	; 0x01
    9d4c:	8f bf       	out	0x3f, r24	; 63
    9d4e:	8a ef       	ldi	r24, 0xFA	; 250
    9d50:	fd c0       	rjmp	.+506    	; 0x9f4c <hal_configureTwiChannel+0x256>
      return TWI_INVALID_MODE;
   }

   if( (t_conf.t_mode == TWI_SLAVE) && 
    9d52:	a1 e0       	ldi	r26, 0x01	; 1
    9d54:	ba 16       	cp	r11, r26
    9d56:	31 f4       	brne	.+12     	; 0x9d64 <hal_configureTwiChannel+0x6e>
    9d58:	a7 fe       	sbrs	r10, 7
    9d5a:	04 c0       	rjmp	.+8      	; 0x9d64 <hal_configureTwiChannel+0x6e>
       (t_conf.c_slaveAddress > TWI_MAX_SLAVE_ADDRESS))
   {
      HAL_END_CRITICAL();//Enable interrupts
    9d5c:	89 81       	ldd	r24, Y+1	; 0x01
    9d5e:	8f bf       	out	0x3f, r24	; 63
    9d60:	89 ef       	ldi	r24, 0xF9	; 249
    9d62:	f4 c0       	rjmp	.+488    	; 0x9f4c <hal_configureTwiChannel+0x256>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a twi module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_twiChanHndlList) == false)
    9d64:	ef 81       	ldd	r30, Y+7	; 0x07
    9d66:	f8 85       	ldd	r31, Y+8	; 0x08
    9d68:	20 91 fe 20 	lds	r18, 0x20FE
    9d6c:	30 91 ff 20 	lds	r19, 0x20FF
    9d70:	84 81       	ldd	r24, Z+4	; 0x04
    9d72:	95 81       	ldd	r25, Z+5	; 0x05
    9d74:	82 17       	cp	r24, r18
    9d76:	93 07       	cpc	r25, r19
    9d78:	21 f0       	breq	.+8      	; 0x9d82 <hal_configureTwiChannel+0x8c>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9d7a:	89 81       	ldd	r24, Y+1	; 0x01
    9d7c:	8f bf       	out	0x3f, r24	; 63
    9d7e:	8e ef       	ldi	r24, 0xFE	; 254
    9d80:	e5 c0       	rjmp	.+458    	; 0x9f4c <hal_configureTwiChannel+0x256>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)
    9d82:	ef 81       	ldd	r30, Y+7	; 0x07
    9d84:	f8 85       	ldd	r31, Y+8	; 0x08
    9d86:	00 81       	ld	r16, Z
    9d88:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Configure the output pins the TWI will use.
       *---------------------------------------------------------------------*/
      if( t_conf.t_mode == TWI_MASTER)
    9d8a:	bb 20       	and	r11, r11
    9d8c:	39 f4       	brne	.+14     	; 0x9d9c <hal_configureTwiChannel+0xa6>
      {
         t_gConf.c_inputMask    = 0;
    9d8e:	1a 82       	std	Y+2, r1	; 0x02
         t_gConf.c_outputMask   = PIN_0 | PIN_1;
    9d90:	83 e0       	ldi	r24, 0x03	; 3
    9d92:	8b 83       	std	Y+3, r24	; 0x03
         t_gConf.b_setOutputLow = true;
    9d94:	81 e0       	ldi	r24, 0x01	; 1
    9d96:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.t_outConf      = TOTEM;
    9d98:	1e 82       	std	Y+6, r1	; 0x06
    9d9a:	07 c0       	rjmp	.+14     	; 0x9daa <hal_configureTwiChannel+0xb4>
      }
      else
      {
         t_gConf.c_inputMask    = PIN_0 | PIN_1;
    9d9c:	83 e0       	ldi	r24, 0x03	; 3
    9d9e:	8a 83       	std	Y+2, r24	; 0x02
         t_gConf.c_outputMask   = 0;
    9da0:	1b 82       	std	Y+3, r1	; 0x03
         t_gConf.b_setOutputLow = true;
    9da2:	81 e0       	ldi	r24, 0x01	; 1
    9da4:	8c 83       	std	Y+4, r24	; 0x04
         t_gConf.t_inConf       = PULLUP;
    9da6:	85 e0       	ldi	r24, 0x05	; 5
    9da8:	8d 83       	std	Y+5, r24	; 0x05
      }

      switch( pt_twiChanHndl->t_id)
    9daa:	f8 01       	movw	r30, r16
    9dac:	80 81       	ld	r24, Z
    9dae:	81 30       	cpi	r24, 0x01	; 1
    9db0:	b1 f0       	breq	.+44     	; 0x9dde <hal_configureTwiChannel+0xe8>
    9db2:	81 30       	cpi	r24, 0x01	; 1
    9db4:	28 f0       	brcs	.+10     	; 0x9dc0 <hal_configureTwiChannel+0xca>
    9db6:	82 30       	cpi	r24, 0x02	; 2
    9db8:	e9 f0       	breq	.+58     	; 0x9df4 <hal_configureTwiChannel+0xfe>
    9dba:	83 30       	cpi	r24, 0x03	; 3
    9dbc:	d9 f5       	brne	.+118    	; 0x9e34 <hal_configureTwiChannel+0x13e>
    9dbe:	29 c0       	rjmp	.+82     	; 0x9e12 <hal_configureTwiChannel+0x11c>
      {
         case TWI_1:

            pt_twiChanHndl->pt_master = &TWIC.MASTER;
    9dc0:	81 e8       	ldi	r24, 0x81	; 129
    9dc2:	94 e0       	ldi	r25, 0x04	; 4
    9dc4:	d8 01       	movw	r26, r16
    9dc6:	17 96       	adiw	r26, 0x07	; 7
    9dc8:	8d 93       	st	X+, r24
    9dca:	9c 93       	st	X, r25
    9dcc:	18 97       	sbiw	r26, 0x08	; 8
            pt_twiChanHndl->pt_slave  = &TWIC.SLAVE;
    9dce:	88 e8       	ldi	r24, 0x88	; 136
    9dd0:	94 e0       	ldi	r25, 0x04	; 4
    9dd2:	19 96       	adiw	r26, 0x09	; 9
    9dd4:	8d 93       	st	X+, r24
    9dd6:	9c 93       	st	X, r25
    9dd8:	1a 97       	sbiw	r26, 0x0a	; 10
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_gConf);
    9dda:	82 e0       	ldi	r24, 0x02	; 2
    9ddc:	24 c0       	rjmp	.+72     	; 0x9e26 <hal_configureTwiChannel+0x130>

         break;

         case TWI_2:

            pt_twiChanHndl->pt_master = &TWID.MASTER;
    9dde:	81 e9       	ldi	r24, 0x91	; 145
    9de0:	94 e0       	ldi	r25, 0x04	; 4
    9de2:	f8 01       	movw	r30, r16
    9de4:	87 83       	std	Z+7, r24	; 0x07
    9de6:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWID.SLAVE;
    9de8:	88 e9       	ldi	r24, 0x98	; 152
    9dea:	94 e0       	ldi	r25, 0x04	; 4
    9dec:	81 87       	std	Z+9, r24	; 0x09
    9dee:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_gConf);
    9df0:	83 e0       	ldi	r24, 0x03	; 3
    9df2:	19 c0       	rjmp	.+50     	; 0x9e26 <hal_configureTwiChannel+0x130>

         break;

         case TWI_3:

            pt_twiChanHndl->pt_master = &TWIE.MASTER;
    9df4:	81 ea       	ldi	r24, 0xA1	; 161
    9df6:	94 e0       	ldi	r25, 0x04	; 4
    9df8:	d8 01       	movw	r26, r16
    9dfa:	17 96       	adiw	r26, 0x07	; 7
    9dfc:	8d 93       	st	X+, r24
    9dfe:	9c 93       	st	X, r25
    9e00:	18 97       	sbiw	r26, 0x08	; 8
            pt_twiChanHndl->pt_slave  = &TWIE.SLAVE;
    9e02:	88 ea       	ldi	r24, 0xA8	; 168
    9e04:	94 e0       	ldi	r25, 0x04	; 4
    9e06:	19 96       	adiw	r26, 0x09	; 9
    9e08:	8d 93       	st	X+, r24
    9e0a:	9c 93       	st	X, r25
    9e0c:	1a 97       	sbiw	r26, 0x0a	; 10
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_gConf);
    9e0e:	84 e0       	ldi	r24, 0x04	; 4
    9e10:	0a c0       	rjmp	.+20     	; 0x9e26 <hal_configureTwiChannel+0x130>

         break;

         case TWI_4:

            pt_twiChanHndl->pt_master = &TWIF.MASTER;
    9e12:	81 eb       	ldi	r24, 0xB1	; 177
    9e14:	94 e0       	ldi	r25, 0x04	; 4
    9e16:	f8 01       	movw	r30, r16
    9e18:	87 83       	std	Z+7, r24	; 0x07
    9e1a:	90 87       	std	Z+8, r25	; 0x08
            pt_twiChanHndl->pt_slave  = &TWIF.SLAVE;
    9e1c:	88 eb       	ldi	r24, 0xB8	; 184
    9e1e:	94 e0       	ldi	r25, 0x04	; 4
    9e20:	81 87       	std	Z+9, r24	; 0x09
    9e22:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the TWI will use.
             *---------------------------------------------------------------*/
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_gConf);
    9e24:	85 e0       	ldi	r24, 0x05	; 5
    9e26:	2a 81       	ldd	r18, Y+2	; 0x02
    9e28:	3b 81       	ldd	r19, Y+3	; 0x03
    9e2a:	4c 81       	ldd	r20, Y+4	; 0x04
    9e2c:	5d 81       	ldd	r21, Y+5	; 0x05
    9e2e:	6e 81       	ldd	r22, Y+6	; 0x06
    9e30:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>

         break;

      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
    9e34:	d8 01       	movw	r26, r16
    9e36:	17 96       	adiw	r26, 0x07	; 7
    9e38:	ed 91       	ld	r30, X+
    9e3a:	fc 91       	ld	r31, X
    9e3c:	18 97       	sbiw	r26, 0x08	; 8

}/*End createTwiHandle*/

static void hal_resetTwiMaster( TWI_MASTER_t *pt_master)
{
   pt_master->ADDR   = 0;
    9e3e:	15 82       	std	Z+5, r1	; 0x05
   pt_master->BAUD   = 0;
    9e40:	14 82       	std	Z+4, r1	; 0x04
   pt_master->CTRLA  = 0;
    9e42:	10 82       	st	Z, r1
   pt_master->CTRLB  = 0;
    9e44:	11 82       	std	Z+1, r1	; 0x01
   pt_master->CTRLC  = 0;
    9e46:	12 82       	std	Z+2, r1	; 0x02
   pt_master->DATA   = 0;
    9e48:	16 82       	std	Z+6, r1	; 0x06
   pt_master->STATUS = 0;
    9e4a:	13 82       	std	Z+3, r1	; 0x03
         break;

      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
      hal_resetTwiSlave( (TWI_SLAVE_t *)pt_twiChanHndl->pt_slave);
    9e4c:	19 96       	adiw	r26, 0x09	; 9
    9e4e:	ed 91       	ld	r30, X+
    9e50:	fc 91       	ld	r31, X
    9e52:	1a 97       	sbiw	r26, 0x0a	; 10

}/*End hal_resetTwiMaster*/

static void hal_resetTwiSlave( TWI_SLAVE_t *pt_slave)
{
   pt_slave->ADDR     = 0;
    9e54:	13 82       	std	Z+3, r1	; 0x03
   pt_slave->ADDRMASK = 0;
    9e56:	15 82       	std	Z+5, r1	; 0x05
   pt_slave->CTRLA    = 0;
    9e58:	10 82       	st	Z, r1
   pt_slave->CTRLB    = 0;
    9e5a:	11 82       	std	Z+1, r1	; 0x01
   pt_slave->DATA     = 0;
    9e5c:	14 82       	std	Z+4, r1	; 0x04
   pt_slave->STATUS   = 0;
    9e5e:	12 82       	std	Z+2, r1	; 0x02
      }/*End switch( pt_twiChanHndl->t_id)*/

      hal_resetTwiMaster( (TWI_MASTER_t *)pt_twiChanHndl->pt_master);
      hal_resetTwiSlave( (TWI_SLAVE_t *)pt_twiChanHndl->pt_slave);

      if( t_conf.t_mode == TWI_MASTER)
    9e60:	bb 20       	and	r11, r11
    9e62:	d1 f5       	brne	.+116    	; 0x9ed8 <hal_configureTwiChannel+0x1e2>
          * Calculate the baud register setting which is defined in the users
          * manual. Where s_twmbr can range from 0 to 255, representing a max
          * frequency of getCpuFreq() / 5 and min frequency of getCpuFreq() /
          * 520.
          *------------------------------------------------------------------*/
         s_twmbr = (hal_getCpuFreq() / (2*t_conf.i_baud)) - 5;
    9e64:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    9e68:	cc 0c       	add	r12, r12
    9e6a:	dd 1c       	adc	r13, r13
    9e6c:	ee 1c       	adc	r14, r14
    9e6e:	ff 1c       	adc	r15, r15
    9e70:	a7 01       	movw	r20, r14
    9e72:	96 01       	movw	r18, r12
    9e74:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
    9e78:	79 01       	movw	r14, r18
    9e7a:	25 50       	subi	r18, 0x05	; 5
    9e7c:	30 40       	sbci	r19, 0x00	; 0

         if( (s_twmbr <= 0) || (s_twmbr > 255))
    9e7e:	c7 01       	movw	r24, r14
    9e80:	06 97       	sbiw	r24, 0x06	; 6
    9e82:	8f 3f       	cpi	r24, 0xFF	; 255
    9e84:	91 05       	cpc	r25, r1
    9e86:	20 f0       	brcs	.+8      	; 0x9e90 <hal_configureTwiChannel+0x19a>
         {
            HAL_END_CRITICAL();//Enable interrupts
    9e88:	89 81       	ldd	r24, Y+1	; 0x01
    9e8a:	8f bf       	out	0x3f, r24	; 63
    9e8c:	8c ef       	ldi	r24, 0xFC	; 252
    9e8e:	5e c0       	rjmp	.+188    	; 0x9f4c <hal_configureTwiChannel+0x256>
         }

         /*------------------------------------------------------------------*
          * We are not using the slave channel.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave = NULL;
    9e90:	f8 01       	movw	r30, r16
    9e92:	11 86       	std	Z+9, r1	; 0x09
    9e94:	12 86       	std	Z+10, r1	; 0x0a
         //}/*End if( t_conf.b_mastPolling == false)*/

         /*------------------------------------------------------------------*
          * Enable master mode.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->CTRLA |= TWI_MASTER_ENABLE_bm;
    9e96:	07 80       	ldd	r0, Z+7	; 0x07
    9e98:	f0 85       	ldd	r31, Z+8	; 0x08
    9e9a:	e0 2d       	mov	r30, r0
    9e9c:	80 81       	ld	r24, Z
    9e9e:	88 60       	ori	r24, 0x08	; 8
    9ea0:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Configure the baud rate.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->BAUD = s_twmbr;
    9ea2:	d8 01       	movw	r26, r16
    9ea4:	17 96       	adiw	r26, 0x07	; 7
    9ea6:	ed 91       	ld	r30, X+
    9ea8:	fc 91       	ld	r31, X
    9eaa:	18 97       	sbiw	r26, 0x08	; 8
    9eac:	24 83       	std	Z+4, r18	; 0x04

         /*------------------------------------------------------------------*
          * Configure the state of the bus.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master->STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    9eae:	17 96       	adiw	r26, 0x07	; 7
    9eb0:	ed 91       	ld	r30, X+
    9eb2:	fc 91       	ld	r31, X
    9eb4:	18 97       	sbiw	r26, 0x08	; 8
    9eb6:	81 e0       	ldi	r24, 0x01	; 1
    9eb8:	83 83       	std	Z+3, r24	; 0x03

         /*------------------------------------------------------------------*
          * Back calculate the 'true' baud by taking the reverse of the
          * equation used to calculate s_twmbr.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->i_baudRate = (uint32_t)(hal_getCpuFreq() /
    9eba:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    9ebe:	ee 0c       	add	r14, r14
    9ec0:	ff 1c       	adc	r15, r15
    9ec2:	97 01       	movw	r18, r14
    9ec4:	40 e0       	ldi	r20, 0x00	; 0
    9ec6:	50 e0       	ldi	r21, 0x00	; 0
    9ec8:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
    9ecc:	f8 01       	movw	r30, r16
    9ece:	22 83       	std	Z+2, r18	; 0x02
    9ed0:	33 83       	std	Z+3, r19	; 0x03
    9ed2:	44 83       	std	Z+4, r20	; 0x04
    9ed4:	55 83       	std	Z+5, r21	; 0x05
    9ed6:	32 c0       	rjmp	.+100    	; 0x9f3c <hal_configureTwiChannel+0x246>
      {

         /*------------------------------------------------------------------*
          * We are not using the master channel.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_master = NULL;
    9ed8:	d8 01       	movw	r26, r16
    9eda:	17 96       	adiw	r26, 0x07	; 7
    9edc:	1d 92       	st	X+, r1
    9ede:	1c 92       	st	X, r1
    9ee0:	18 97       	sbiw	r26, 0x08	; 8

         /*------------------------------------------------------------------*
          * Configure high level interrupts.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_INTLVL_HI_gc;
    9ee2:	19 96       	adiw	r26, 0x09	; 9
    9ee4:	ed 91       	ld	r30, X+
    9ee6:	fc 91       	ld	r31, X
    9ee8:	1a 97       	sbiw	r26, 0x0a	; 10
    9eea:	80 81       	ld	r24, Z
    9eec:	80 6c       	ori	r24, 0xC0	; 192
    9eee:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Enable data and stop interrupts.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_DIEN_bm;
    9ef0:	19 96       	adiw	r26, 0x09	; 9
    9ef2:	ed 91       	ld	r30, X+
    9ef4:	fc 91       	ld	r31, X
    9ef6:	1a 97       	sbiw	r26, 0x0a	; 10
    9ef8:	80 81       	ld	r24, Z
    9efa:	80 62       	ori	r24, 0x20	; 32
    9efc:	80 83       	st	Z, r24
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_APIEN_bm;
    9efe:	19 96       	adiw	r26, 0x09	; 9
    9f00:	ed 91       	ld	r30, X+
    9f02:	fc 91       	ld	r31, X
    9f04:	1a 97       	sbiw	r26, 0x0a	; 10
    9f06:	80 81       	ld	r24, Z
    9f08:	80 61       	ori	r24, 0x10	; 16
    9f0a:	80 83       	st	Z, r24
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_PIEN_bm;
    9f0c:	19 96       	adiw	r26, 0x09	; 9
    9f0e:	ed 91       	ld	r30, X+
    9f10:	fc 91       	ld	r31, X
    9f12:	1a 97       	sbiw	r26, 0x0a	; 10
    9f14:	80 81       	ld	r24, Z
    9f16:	84 60       	ori	r24, 0x04	; 4
    9f18:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Enable slave mode.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->CTRLA |= TWI_SLAVE_ENABLE_bm;
    9f1a:	19 96       	adiw	r26, 0x09	; 9
    9f1c:	ed 91       	ld	r30, X+
    9f1e:	fc 91       	ld	r31, X
    9f20:	1a 97       	sbiw	r26, 0x0a	; 10
    9f22:	80 81       	ld	r24, Z
    9f24:	88 60       	ori	r24, 0x08	; 8
    9f26:	80 83       	st	Z, r24

         /*------------------------------------------------------------------*
          * Set the slave address.
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pt_slave->ADDR =  t_conf.c_slaveAddress << 1;
    9f28:	19 96       	adiw	r26, 0x09	; 9
    9f2a:	ed 91       	ld	r30, X+
    9f2c:	fc 91       	ld	r31, X
    9f2e:	1a 97       	sbiw	r26, 0x0a	; 10
    9f30:	aa 0c       	add	r10, r10
    9f32:	a3 82       	std	Z+3, r10	; 0x03

         /*------------------------------------------------------------------*
          * Store the call-back function
          *------------------------------------------------------------------*/
         pt_twiChanHndl->pf_transComplete = t_conf.pf_transComplete;
    9f34:	1b 96       	adiw	r26, 0x0b	; 11
    9f36:	8d 92       	st	X+, r8
    9f38:	9c 92       	st	X, r9
    9f3a:	1c 97       	sbiw	r26, 0x0c	; 12
      }

      /*---------------------------------------------------------------------*
       * Reset the bus status.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl->t_status = TWI_IDLE;
    9f3c:	85 e0       	ldi	r24, 0x05	; 5
    9f3e:	f8 01       	movw	r30, r16
    9f40:	86 83       	std	Z+6, r24	; 0x06

      /*---------------------------------------------------------------------*
       * Configuration completed.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl->b_validConfig = true;
    9f42:	81 e0       	ldi	r24, 0x01	; 1
    9f44:	81 83       	std	Z+1, r24	; 0x01

   }

   HAL_END_CRITICAL();//Enable interrupts
    9f46:	89 81       	ldd	r24, Y+1	; 0x01
    9f48:	8f bf       	out	0x3f, r24	; 63
    9f4a:	80 e0       	ldi	r24, 0x00	; 0

   return TWI_PASSED;

}/*End hal_configureTwiChannel*/
    9f4c:	60 96       	adiw	r28, 0x10	; 16
    9f4e:	cd bf       	out	0x3d, r28	; 61
    9f50:	de bf       	out	0x3e, r29	; 62
    9f52:	cf 91       	pop	r28
    9f54:	df 91       	pop	r29
    9f56:	1f 91       	pop	r17
    9f58:	0f 91       	pop	r16
    9f5a:	ff 90       	pop	r15
    9f5c:	ef 90       	pop	r14
    9f5e:	df 90       	pop	r13
    9f60:	cf 90       	pop	r12
    9f62:	bf 90       	pop	r11
    9f64:	af 90       	pop	r10
    9f66:	9f 90       	pop	r9
    9f68:	8f 90       	pop	r8
    9f6a:	08 95       	ret

00009f6c <hal_requestTwiChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular twi module
 *---------------------------------------------------------------------------*/
t_TWIHNDL hal_requestTwiChannel( t_twiChanId t_chanId)
{
    9f6c:	1f 93       	push	r17
    9f6e:	df 93       	push	r29
    9f70:	cf 93       	push	r28
    9f72:	cd b7       	in	r28, 0x3d	; 61
    9f74:	de b7       	in	r29, 0x3e	; 62
    9f76:	25 97       	sbiw	r28, 0x05	; 5
    9f78:	cd bf       	out	0x3d, r28	; 61
    9f7a:	de bf       	out	0x3e, r29	; 62
    9f7c:	18 2f       	mov	r17, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    9f7e:	8f b7       	in	r24, 0x3f	; 63
    9f80:	89 83       	std	Y+1, r24	; 0x01
    9f82:	f8 94       	cli

   if( (t_chanId < TWI_1) || (t_chanId > TWI_4))
    9f84:	14 30       	cpi	r17, 0x04	; 4
    9f86:	28 f0       	brcs	.+10     	; 0x9f92 <hal_requestTwiChannel+0x26>
   {
      HAL_END_CRITICAL();//Enable interrupts
    9f88:	89 81       	ldd	r24, Y+1	; 0x01
    9f8a:	8f bf       	out	0x3f, r24	; 63
    9f8c:	2b ef       	ldi	r18, 0xFB	; 251
    9f8e:	3f ef       	ldi	r19, 0xFF	; 255
    9f90:	3a c0       	rjmp	.+116    	; 0xa006 <hal_requestTwiChannel+0x9a>
      return (t_TWIHNDL)TWI_INVALID_CHAN;
   }

   pt_twiChanHndl = findTwiElement( t_chanId);
    9f92:	81 2f       	mov	r24, r17
    9f94:	0e 94 b6 4a 	call	0x956c	; 0x956c <findTwiElement>

   /*------------------------------------------------------------------------*
    * Is this channel available?
    *------------------------------------------------------------------------*/
   if( pt_twiChanHndl == NULL) /*Yes*/
    9f98:	89 2b       	or	r24, r25
    9f9a:	89 f5       	brne	.+98     	; 0x9ffe <hal_requestTwiChannel+0x92>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular twi module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_twiChanHndl));
    9f9c:	8c e2       	ldi	r24, 0x2C	; 44
    9f9e:	90 e0       	ldi	r25, 0x00	; 0
    9fa0:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    9fa4:	8c 83       	std	Y+4, r24	; 0x04
    9fa6:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    9fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    9faa:	9d 81       	ldd	r25, Y+5	; 0x05
    9fac:	97 ff       	sbrs	r25, 7
    9fae:	03 c0       	rjmp	.+6      	; 0x9fb6 <hal_requestTwiChannel+0x4a>
    9fb0:	8f ef       	ldi	r24, 0xFF	; 255
    9fb2:	9f ef       	ldi	r25, 0xFF	; 255
    9fb4:	0b c0       	rjmp	.+22     	; 0x9fcc <hal_requestTwiChannel+0x60>
   }

   /*------------------------------------------------------------------------*
    * Add the twi module link onto the list open twi modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_twiChanHndlList,
    9fb6:	80 91 fe 20 	lds	r24, 0x20FE
    9fba:	90 91 ff 20 	lds	r25, 0x20FF
    9fbe:	6c 81       	ldd	r22, Y+4	; 0x04
    9fc0:	7d 81       	ldd	r23, Y+5	; 0x05
    9fc2:	41 e0       	ldi	r20, 0x01	; 1
    9fc4:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    9fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    9fca:	9d 81       	ldd	r25, Y+5	; 0x05
    * Is this channel available?
    *------------------------------------------------------------------------*/
   if( pt_twiChanHndl == NULL) /*Yes*/
   {

      t_linkHndl = createTwiHandle();
    9fcc:	8a 83       	std	Y+2, r24	; 0x02
    9fce:	9b 83       	std	Y+3, r25	; 0x03
      if( t_linkHndl < 0)
    9fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    9fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    9fd4:	97 ff       	sbrs	r25, 7
    9fd6:	05 c0       	rjmp	.+10     	; 0x9fe2 <hal_requestTwiChannel+0x76>
      {
         HAL_END_CRITICAL();//Enable interrupts
    9fd8:	89 81       	ldd	r24, Y+1	; 0x01
    9fda:	8f bf       	out	0x3f, r24	; 63
    9fdc:	2f ef       	ldi	r18, 0xFF	; 255
    9fde:	3f ef       	ldi	r19, 0xFF	; 255
    9fe0:	12 c0       	rjmp	.+36     	; 0xa006 <hal_requestTwiChannel+0x9a>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the twi 
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_twiChanHndl = (t_twiChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    9fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    9fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    9fe6:	01 90       	ld	r0, Z+
    9fe8:	f0 81       	ld	r31, Z
    9fea:	e0 2d       	mov	r30, r0

      pt_twiChanHndl->b_validConfig = false;
    9fec:	11 82       	std	Z+1, r1	; 0x01
      pt_twiChanHndl->t_id          = t_chanId;
    9fee:	10 83       	st	Z, r17
      pt_twiChanHndl->t_status      = TWI_IDLE;
    9ff0:	85 e0       	ldi	r24, 0x05	; 5
    9ff2:	86 83       	std	Z+6, r24	; 0x06
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_TWIHNDL)TWI_CHAN_UNAVAILABLE;
   }

   HAL_END_CRITICAL();//Enable interrupts
    9ff4:	89 81       	ldd	r24, Y+1	; 0x01
    9ff6:	8f bf       	out	0x3f, r24	; 63

   return (t_TWIHNDL)t_linkHndl;
    9ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    9ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    9ffc:	04 c0       	rjmp	.+8      	; 0xa006 <hal_requestTwiChannel+0x9a>
      pt_twiChanHndl->t_status      = TWI_IDLE;

   }/*End if( pt_twiChanHndl == NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    9ffe:	89 81       	ldd	r24, Y+1	; 0x01
    a000:	8f bf       	out	0x3f, r24	; 63
    a002:	2d ef       	ldi	r18, 0xFD	; 253
    a004:	3f ef       	ldi	r19, 0xFF	; 255

   HAL_END_CRITICAL();//Enable interrupts

   return (t_TWIHNDL)t_linkHndl;

}/*End hal_requestTwiChannel*/
    a006:	c9 01       	movw	r24, r18
    a008:	25 96       	adiw	r28, 0x05	; 5
    a00a:	cd bf       	out	0x3d, r28	; 61
    a00c:	de bf       	out	0x3e, r29	; 62
    a00e:	cf 91       	pop	r28
    a010:	df 91       	pop	r29
    a012:	1f 91       	pop	r17
    a014:	08 95       	ret

0000a016 <updateRxBuffer>:
   pt_handle->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;

}/*End updateRxDmaInt*/

static void updateRxBuffer( t_uartChanHndl *pt_handle)
{
    a016:	cf 93       	push	r28
    a018:	df 93       	push	r29
    a01a:	ec 01       	movw	r28, r24
	int8_t *pc_rxBuf = pt_handle->pc_rxData;
    a01c:	af 85       	ldd	r26, Y+15	; 0x0f
    a01e:	b8 89       	ldd	r27, Y+16	; 0x10
	uint16_t *ps_bufIndex = &pt_handle->s_rxBufIndex;

   /*------------------------------------------------------------------------*
    * Is there a block transfer being performed?
    *------------------------------------------------------------------------*/
   if( pc_rxBuf == NULL) /*No*/
    a020:	10 97       	sbiw	r26, 0x00	; 0
    a022:	61 f4       	brne	.+24     	; 0xa03c <updateRxBuffer+0x26>

      /*---------------------------------------------------------------------*
       * Execute the call-back function returning the byte in the UART
       * buffer.
       *---------------------------------------------------------------------*/
      if( pt_handle->pf_rxCallBack != NULL)
    a024:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a026:	3e 8d       	ldd	r19, Y+30	; 0x1e
    a028:	21 15       	cp	r18, r1
    a02a:	31 05       	cpc	r19, r1
    a02c:	29 f1       	breq	.+74     	; 0xa078 <updateRxBuffer+0x62>
         pt_handle->pf_rxCallBack( (uint16_t)pt_handle->pt_uart->DATA);
    a02e:	e9 85       	ldd	r30, Y+9	; 0x09
    a030:	fa 85       	ldd	r31, Y+10	; 0x0a
    a032:	80 81       	ld	r24, Z
    a034:	90 e0       	ldi	r25, 0x00	; 0
    a036:	f9 01       	movw	r30, r18
    a038:	19 95       	eicall
    a03a:	1e c0       	rjmp	.+60     	; 0xa078 <updateRxBuffer+0x62>
   else
   {
      /*---------------------------------------------------------------------*
       * Store any received bytes...
       *---------------------------------------------------------------------*/
      pc_rxBuf[(*ps_bufIndex)] = pt_handle->pt_uart->DATA;
    a03c:	e9 85       	ldd	r30, Y+9	; 0x09
    a03e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a040:	20 81       	ld	r18, Z
    a042:	8f 89       	ldd	r24, Y+23	; 0x17
    a044:	98 8d       	ldd	r25, Y+24	; 0x18
    a046:	a8 0f       	add	r26, r24
    a048:	b9 1f       	adc	r27, r25
    a04a:	2c 93       	st	X, r18
      (*ps_bufIndex)++;
    a04c:	2f 89       	ldd	r18, Y+23	; 0x17
    a04e:	38 8d       	ldd	r19, Y+24	; 0x18
    a050:	2f 5f       	subi	r18, 0xFF	; 255
    a052:	3f 4f       	sbci	r19, 0xFF	; 255
    a054:	2f 8b       	std	Y+23, r18	; 0x17
    a056:	38 8f       	std	Y+24, r19	; 0x18

      /*---------------------------------------------------------------------*
       * Is there more room in the buffer
       *---------------------------------------------------------------------*/
	   if( (*ps_bufIndex) == pt_handle->s_rxBufLength) /*No*/
    a058:	8b 89       	ldd	r24, Y+19	; 0x13
    a05a:	9c 89       	ldd	r25, Y+20	; 0x14
    a05c:	28 17       	cp	r18, r24
    a05e:	39 07       	cpc	r19, r25
    a060:	59 f4       	brne	.+22     	; 0xa078 <updateRxBuffer+0x62>
	   {
         /*------------------------------------------------------------------*
          * Execute the call-back function returning the size of the
          * transfer.
          *------------------------------------------------------------------*/
         if( pt_handle->pf_rxCallBack != NULL)
    a062:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a064:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a066:	30 97       	sbiw	r30, 0x00	; 0
    a068:	11 f0       	breq	.+4      	; 0xa06e <updateRxBuffer+0x58>
            pt_handle->pf_rxCallBack( (*ps_bufIndex));
    a06a:	c9 01       	movw	r24, r18
    a06c:	19 95       	eicall

         pc_rxBuf = NULL;
         (*ps_bufIndex) = 0;
    a06e:	1f 8a       	std	Y+23, r1	; 0x17
    a070:	18 8e       	std	Y+24, r1	; 0x18
         pt_handle->s_rxBufLength = 0;
    a072:	1b 8a       	std	Y+19, r1	; 0x13
    a074:	1c 8a       	std	Y+20, r1	; 0x14
         pt_handle->b_rxBusLocked = false;
    a076:	1c 86       	std	Y+12, r1	; 0x0c
	   }
   }

}/*End updateRxBuffer*/
    a078:	df 91       	pop	r29
    a07a:	cf 91       	pop	r28
    a07c:	08 95       	ret

0000a07e <updateTxBuffer>:

static void updateTxBuffer( t_uartChanHndl *pt_handle)
{
    a07e:	cf 93       	push	r28
    a080:	df 93       	push	r29
    a082:	ec 01       	movw	r28, r24
	int8_t *pc_txBuf = pt_handle->pc_txData;
    a084:	ad 85       	ldd	r26, Y+13	; 0x0d
    a086:	be 85       	ldd	r27, Y+14	; 0x0e
	uint16_t *ps_bufIndex = &pt_handle->s_txBufIndex;

   if( pc_txBuf != NULL)
    a088:	10 97       	sbiw	r26, 0x00	; 0
    a08a:	29 f1       	breq	.+74     	; 0xa0d6 <updateTxBuffer+0x58>
   {
	   /*------------------------------------------------------------------------*
	    * Send the data to the UART.
	    *------------------------------------------------------------------------*/
      pt_handle->pt_uart->DATA = pc_txBuf[(*ps_bufIndex)];
    a08c:	e9 85       	ldd	r30, Y+9	; 0x09
    a08e:	fa 85       	ldd	r31, Y+10	; 0x0a
    a090:	8d 89       	ldd	r24, Y+21	; 0x15
    a092:	9e 89       	ldd	r25, Y+22	; 0x16
    a094:	a8 0f       	add	r26, r24
    a096:	b9 1f       	adc	r27, r25
    a098:	8c 91       	ld	r24, X
    a09a:	80 83       	st	Z, r24
      (*ps_bufIndex)++;
    a09c:	8d 89       	ldd	r24, Y+21	; 0x15
    a09e:	9e 89       	ldd	r25, Y+22	; 0x16
    a0a0:	01 96       	adiw	r24, 0x01	; 1
    a0a2:	8d 8b       	std	Y+21, r24	; 0x15
    a0a4:	9e 8b       	std	Y+22, r25	; 0x16

	   /*------------------------------------------------------------------------*
	    * Is the buffer empty?
	    *------------------------------------------------------------------------*/
	   if( (*ps_bufIndex) == pt_handle->s_txBufLength)
    a0a6:	29 89       	ldd	r18, Y+17	; 0x11
    a0a8:	3a 89       	ldd	r19, Y+18	; 0x12
    a0aa:	82 17       	cp	r24, r18
    a0ac:	93 07       	cpc	r25, r19
    a0ae:	99 f4       	brne	.+38     	; 0xa0d6 <updateTxBuffer+0x58>
	   {
	      /*---------------------------------------------------------------------*
          * Disable interrupts until another interrupt driven block transfer has
          * been requested.
          *---------------------------------------------------------------------*/
         pt_handle->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    a0b0:	e9 85       	ldd	r30, Y+9	; 0x09
    a0b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    a0b4:	83 81       	ldd	r24, Z+3	; 0x03
    a0b6:	8c 7f       	andi	r24, 0xFC	; 252
    a0b8:	83 83       	std	Z+3, r24	; 0x03

         if( pt_handle->pf_txCallBack != NULL)
    a0ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a0bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    a0be:	30 97       	sbiw	r30, 0x00	; 0
    a0c0:	19 f0       	breq	.+6      	; 0xa0c8 <updateTxBuffer+0x4a>
            pt_handle->pf_txCallBack( (*ps_bufIndex));
    a0c2:	8d 89       	ldd	r24, Y+21	; 0x15
    a0c4:	9e 89       	ldd	r25, Y+22	; 0x16
    a0c6:	19 95       	eicall

         /*---------------------------------------------------------------------*
          * Release the TX UART bus.
          *---------------------------------------------------------------------*/
         pt_handle->pc_txData = NULL;
    a0c8:	1d 86       	std	Y+13, r1	; 0x0d
    a0ca:	1e 86       	std	Y+14, r1	; 0x0e
         pt_handle->s_txBufIndex = 0;
    a0cc:	1d 8a       	std	Y+21, r1	; 0x15
    a0ce:	1e 8a       	std	Y+22, r1	; 0x16
         pt_handle->s_txBufLength = 0;
    a0d0:	19 8a       	std	Y+17, r1	; 0x11
    a0d2:	1a 8a       	std	Y+18, r1	; 0x12
         pt_handle->b_txBusLocked = false;
    a0d4:	1b 86       	std	Y+11, r1	; 0x0b
	   }

   }/*End if( pc_txBuf != NULL)*/

}/*End updateTxBuffer*/
    a0d6:	df 91       	pop	r29
    a0d8:	cf 91       	pop	r28
    a0da:	08 95       	ret

0000a0dc <uart1TxDmaInt>:
   }/*End if( pt_handle != NULL)*/

}/*End uart8RxDmaInt*/

static void uart1TxDmaInt( void)
{
    a0dc:	cf 93       	push	r28
    a0de:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a0e0:	c0 91 c0 22 	lds	r28, 0x22C0
    a0e4:	d0 91 c1 22 	lds	r29, 0x22C1

   if( pt_handle != NULL)
    a0e8:	20 97       	sbiw	r28, 0x00	; 0
    a0ea:	71 f0       	breq	.+28     	; 0xa108 <uart1TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a0ec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a0ee:	f8 a1       	ldd	r31, Y+32	; 0x20
    a0f0:	30 97       	sbiw	r30, 0x00	; 0
    a0f2:	19 f0       	breq	.+6      	; 0xa0fa <uart1TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a0f4:	89 89       	ldd	r24, Y+17	; 0x11
    a0f6:	9a 89       	ldd	r25, Y+18	; 0x12
    a0f8:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a0fa:	1d 86       	std	Y+13, r1	; 0x0d
    a0fc:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a0fe:	1d 8a       	std	Y+21, r1	; 0x15
    a100:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a102:	19 8a       	std	Y+17, r1	; 0x11
    a104:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a106:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart1TxDmaInt*/
    a108:	df 91       	pop	r29
    a10a:	cf 91       	pop	r28
    a10c:	08 95       	ret

0000a10e <uart2TxDmaInt>:

static void uart2TxDmaInt( void)
{
    a10e:	cf 93       	push	r28
    a110:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a112:	c0 91 c2 22 	lds	r28, 0x22C2
    a116:	d0 91 c3 22 	lds	r29, 0x22C3

   if( pt_handle != NULL)
    a11a:	20 97       	sbiw	r28, 0x00	; 0
    a11c:	71 f0       	breq	.+28     	; 0xa13a <uart2TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a11e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a120:	f8 a1       	ldd	r31, Y+32	; 0x20
    a122:	30 97       	sbiw	r30, 0x00	; 0
    a124:	19 f0       	breq	.+6      	; 0xa12c <uart2TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a126:	89 89       	ldd	r24, Y+17	; 0x11
    a128:	9a 89       	ldd	r25, Y+18	; 0x12
    a12a:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a12c:	1d 86       	std	Y+13, r1	; 0x0d
    a12e:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a130:	1d 8a       	std	Y+21, r1	; 0x15
    a132:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a134:	19 8a       	std	Y+17, r1	; 0x11
    a136:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a138:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart2TxDmaInt*/
    a13a:	df 91       	pop	r29
    a13c:	cf 91       	pop	r28
    a13e:	08 95       	ret

0000a140 <uart3TxDmaInt>:

static void uart3TxDmaInt( void)
{
    a140:	cf 93       	push	r28
    a142:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a144:	c0 91 c4 22 	lds	r28, 0x22C4
    a148:	d0 91 c5 22 	lds	r29, 0x22C5

   if( pt_handle != NULL)
    a14c:	20 97       	sbiw	r28, 0x00	; 0
    a14e:	71 f0       	breq	.+28     	; 0xa16c <uart3TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a150:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a152:	f8 a1       	ldd	r31, Y+32	; 0x20
    a154:	30 97       	sbiw	r30, 0x00	; 0
    a156:	19 f0       	breq	.+6      	; 0xa15e <uart3TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a158:	89 89       	ldd	r24, Y+17	; 0x11
    a15a:	9a 89       	ldd	r25, Y+18	; 0x12
    a15c:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a15e:	1d 86       	std	Y+13, r1	; 0x0d
    a160:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a162:	1d 8a       	std	Y+21, r1	; 0x15
    a164:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a166:	19 8a       	std	Y+17, r1	; 0x11
    a168:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a16a:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart3TxDmaInt*/
    a16c:	df 91       	pop	r29
    a16e:	cf 91       	pop	r28
    a170:	08 95       	ret

0000a172 <uart4TxDmaInt>:

static void uart4TxDmaInt( void)
{
    a172:	cf 93       	push	r28
    a174:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a176:	c0 91 c6 22 	lds	r28, 0x22C6
    a17a:	d0 91 c7 22 	lds	r29, 0x22C7

   if( pt_handle != NULL)
    a17e:	20 97       	sbiw	r28, 0x00	; 0
    a180:	71 f0       	breq	.+28     	; 0xa19e <uart4TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a182:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a184:	f8 a1       	ldd	r31, Y+32	; 0x20
    a186:	30 97       	sbiw	r30, 0x00	; 0
    a188:	19 f0       	breq	.+6      	; 0xa190 <uart4TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a18a:	89 89       	ldd	r24, Y+17	; 0x11
    a18c:	9a 89       	ldd	r25, Y+18	; 0x12
    a18e:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a190:	1d 86       	std	Y+13, r1	; 0x0d
    a192:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a194:	1d 8a       	std	Y+21, r1	; 0x15
    a196:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a198:	19 8a       	std	Y+17, r1	; 0x11
    a19a:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a19c:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart4TxDmaInt*/
    a19e:	df 91       	pop	r29
    a1a0:	cf 91       	pop	r28
    a1a2:	08 95       	ret

0000a1a4 <uart5TxDmaInt>:

static void uart5TxDmaInt( void)
{
    a1a4:	cf 93       	push	r28
    a1a6:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a1a8:	c0 91 c8 22 	lds	r28, 0x22C8
    a1ac:	d0 91 c9 22 	lds	r29, 0x22C9

   if( pt_handle != NULL)
    a1b0:	20 97       	sbiw	r28, 0x00	; 0
    a1b2:	71 f0       	breq	.+28     	; 0xa1d0 <uart5TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a1b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a1b6:	f8 a1       	ldd	r31, Y+32	; 0x20
    a1b8:	30 97       	sbiw	r30, 0x00	; 0
    a1ba:	19 f0       	breq	.+6      	; 0xa1c2 <uart5TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a1bc:	89 89       	ldd	r24, Y+17	; 0x11
    a1be:	9a 89       	ldd	r25, Y+18	; 0x12
    a1c0:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a1c2:	1d 86       	std	Y+13, r1	; 0x0d
    a1c4:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a1c6:	1d 8a       	std	Y+21, r1	; 0x15
    a1c8:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a1ca:	19 8a       	std	Y+17, r1	; 0x11
    a1cc:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a1ce:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart5TxDmaInt*/
    a1d0:	df 91       	pop	r29
    a1d2:	cf 91       	pop	r28
    a1d4:	08 95       	ret

0000a1d6 <uart6TxDmaInt>:

static void uart6TxDmaInt( void)
{
    a1d6:	cf 93       	push	r28
    a1d8:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    a1da:	c0 91 ca 22 	lds	r28, 0x22CA
    a1de:	d0 91 cb 22 	lds	r29, 0x22CB

   if( pt_handle != NULL)
    a1e2:	20 97       	sbiw	r28, 0x00	; 0
    a1e4:	71 f0       	breq	.+28     	; 0xa202 <uart6TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a1e6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a1e8:	f8 a1       	ldd	r31, Y+32	; 0x20
    a1ea:	30 97       	sbiw	r30, 0x00	; 0
    a1ec:	19 f0       	breq	.+6      	; 0xa1f4 <uart6TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a1ee:	89 89       	ldd	r24, Y+17	; 0x11
    a1f0:	9a 89       	ldd	r25, Y+18	; 0x12
    a1f2:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a1f4:	1d 86       	std	Y+13, r1	; 0x0d
    a1f6:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a1f8:	1d 8a       	std	Y+21, r1	; 0x15
    a1fa:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a1fc:	19 8a       	std	Y+17, r1	; 0x11
    a1fe:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a200:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart6TxDmaInt*/
    a202:	df 91       	pop	r29
    a204:	cf 91       	pop	r28
    a206:	08 95       	ret

0000a208 <uart7TxDmaInt>:

static void uart7TxDmaInt( void)
{
    a208:	cf 93       	push	r28
    a20a:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    a20c:	c0 91 cc 22 	lds	r28, 0x22CC
    a210:	d0 91 cd 22 	lds	r29, 0x22CD

   if( pt_handle != NULL)
    a214:	20 97       	sbiw	r28, 0x00	; 0
    a216:	71 f0       	breq	.+28     	; 0xa234 <uart7TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a218:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a21a:	f8 a1       	ldd	r31, Y+32	; 0x20
    a21c:	30 97       	sbiw	r30, 0x00	; 0
    a21e:	19 f0       	breq	.+6      	; 0xa226 <uart7TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a220:	89 89       	ldd	r24, Y+17	; 0x11
    a222:	9a 89       	ldd	r25, Y+18	; 0x12
    a224:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a226:	1d 86       	std	Y+13, r1	; 0x0d
    a228:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a22a:	1d 8a       	std	Y+21, r1	; 0x15
    a22c:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a22e:	19 8a       	std	Y+17, r1	; 0x11
    a230:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a232:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart7TxDmaInt*/
    a234:	df 91       	pop	r29
    a236:	cf 91       	pop	r28
    a238:	08 95       	ret

0000a23a <uart8TxDmaInt>:

static void uart8TxDmaInt( void)
{
    a23a:	cf 93       	push	r28
    a23c:	df 93       	push	r29
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    a23e:	c0 91 ce 22 	lds	r28, 0x22CE
    a242:	d0 91 cf 22 	lds	r29, 0x22CF

   if( pt_handle != NULL)
    a246:	20 97       	sbiw	r28, 0x00	; 0
    a248:	71 f0       	breq	.+28     	; 0xa266 <uart8TxDmaInt+0x2c>
   {

      if( pt_handle->pf_txCallBack != NULL)
    a24a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    a24c:	f8 a1       	ldd	r31, Y+32	; 0x20
    a24e:	30 97       	sbiw	r30, 0x00	; 0
    a250:	19 f0       	breq	.+6      	; 0xa258 <uart8TxDmaInt+0x1e>
         pt_handle->pf_txCallBack( pt_handle->s_txBufLength);
    a252:	89 89       	ldd	r24, Y+17	; 0x11
    a254:	9a 89       	ldd	r25, Y+18	; 0x12
    a256:	19 95       	eicall

      pt_handle->pc_txData = NULL;
    a258:	1d 86       	std	Y+13, r1	; 0x0d
    a25a:	1e 86       	std	Y+14, r1	; 0x0e
      pt_handle->s_txBufIndex = 0;
    a25c:	1d 8a       	std	Y+21, r1	; 0x15
    a25e:	1e 8a       	std	Y+22, r1	; 0x16
      pt_handle->s_txBufLength = 0;
    a260:	19 8a       	std	Y+17, r1	; 0x11
    a262:	1a 8a       	std	Y+18, r1	; 0x12
      pt_handle->b_txBusLocked = false;
    a264:	1b 86       	std	Y+11, r1	; 0x0b
   }

}/*End uart8TxDmaInt*/
    a266:	df 91       	pop	r29
    a268:	cf 91       	pop	r28
    a26a:	08 95       	ret

0000a26c <__vector_25>:

ISR( USARTC0_RXC_vect)
{
    a26c:	1f 92       	push	r1
    a26e:	0f 92       	push	r0
    a270:	0f b6       	in	r0, 0x3f	; 63
    a272:	0f 92       	push	r0
    a274:	08 b6       	in	r0, 0x38	; 56
    a276:	0f 92       	push	r0
    a278:	09 b6       	in	r0, 0x39	; 57
    a27a:	0f 92       	push	r0
    a27c:	0b b6       	in	r0, 0x3b	; 59
    a27e:	0f 92       	push	r0
    a280:	11 24       	eor	r1, r1
    a282:	18 be       	out	0x38, r1	; 56
    a284:	19 be       	out	0x39, r1	; 57
    a286:	1b be       	out	0x3b, r1	; 59
    a288:	2f 93       	push	r18
    a28a:	3f 93       	push	r19
    a28c:	4f 93       	push	r20
    a28e:	5f 93       	push	r21
    a290:	6f 93       	push	r22
    a292:	7f 93       	push	r23
    a294:	8f 93       	push	r24
    a296:	9f 93       	push	r25
    a298:	af 93       	push	r26
    a29a:	bf 93       	push	r27
    a29c:	ef 93       	push	r30
    a29e:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a2a0:	80 91 c0 22 	lds	r24, 0x22C0
    a2a4:	90 91 c1 22 	lds	r25, 0x22C1

   if( pt_handle != NULL)
    a2a8:	00 97       	sbiw	r24, 0x00	; 0
    a2aa:	11 f0       	breq	.+4      	; 0xa2b0 <__vector_25+0x44>
   {
		updateRxBuffer( pt_handle);
    a2ac:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC0_RXC_vect)*/
    a2b0:	ff 91       	pop	r31
    a2b2:	ef 91       	pop	r30
    a2b4:	bf 91       	pop	r27
    a2b6:	af 91       	pop	r26
    a2b8:	9f 91       	pop	r25
    a2ba:	8f 91       	pop	r24
    a2bc:	7f 91       	pop	r23
    a2be:	6f 91       	pop	r22
    a2c0:	5f 91       	pop	r21
    a2c2:	4f 91       	pop	r20
    a2c4:	3f 91       	pop	r19
    a2c6:	2f 91       	pop	r18
    a2c8:	0f 90       	pop	r0
    a2ca:	0b be       	out	0x3b, r0	; 59
    a2cc:	0f 90       	pop	r0
    a2ce:	09 be       	out	0x39, r0	; 57
    a2d0:	0f 90       	pop	r0
    a2d2:	08 be       	out	0x38, r0	; 56
    a2d4:	0f 90       	pop	r0
    a2d6:	0f be       	out	0x3f, r0	; 63
    a2d8:	0f 90       	pop	r0
    a2da:	1f 90       	pop	r1
    a2dc:	18 95       	reti

0000a2de <__vector_26>:

ISR( USARTC0_DRE_vect)
{
    a2de:	1f 92       	push	r1
    a2e0:	0f 92       	push	r0
    a2e2:	0f b6       	in	r0, 0x3f	; 63
    a2e4:	0f 92       	push	r0
    a2e6:	08 b6       	in	r0, 0x38	; 56
    a2e8:	0f 92       	push	r0
    a2ea:	09 b6       	in	r0, 0x39	; 57
    a2ec:	0f 92       	push	r0
    a2ee:	0b b6       	in	r0, 0x3b	; 59
    a2f0:	0f 92       	push	r0
    a2f2:	11 24       	eor	r1, r1
    a2f4:	18 be       	out	0x38, r1	; 56
    a2f6:	19 be       	out	0x39, r1	; 57
    a2f8:	1b be       	out	0x3b, r1	; 59
    a2fa:	2f 93       	push	r18
    a2fc:	3f 93       	push	r19
    a2fe:	4f 93       	push	r20
    a300:	5f 93       	push	r21
    a302:	6f 93       	push	r22
    a304:	7f 93       	push	r23
    a306:	8f 93       	push	r24
    a308:	9f 93       	push	r25
    a30a:	af 93       	push	r26
    a30c:	bf 93       	push	r27
    a30e:	ef 93       	push	r30
    a310:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    a312:	80 91 c0 22 	lds	r24, 0x22C0
    a316:	90 91 c1 22 	lds	r25, 0x22C1

   if( pt_handle != NULL)
    a31a:	00 97       	sbiw	r24, 0x00	; 0
    a31c:	11 f0       	breq	.+4      	; 0xa322 <__vector_26+0x44>
   {
      updateTxBuffer( pt_handle);
    a31e:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC0_DRE_vect)*/
    a322:	ff 91       	pop	r31
    a324:	ef 91       	pop	r30
    a326:	bf 91       	pop	r27
    a328:	af 91       	pop	r26
    a32a:	9f 91       	pop	r25
    a32c:	8f 91       	pop	r24
    a32e:	7f 91       	pop	r23
    a330:	6f 91       	pop	r22
    a332:	5f 91       	pop	r21
    a334:	4f 91       	pop	r20
    a336:	3f 91       	pop	r19
    a338:	2f 91       	pop	r18
    a33a:	0f 90       	pop	r0
    a33c:	0b be       	out	0x3b, r0	; 59
    a33e:	0f 90       	pop	r0
    a340:	09 be       	out	0x39, r0	; 57
    a342:	0f 90       	pop	r0
    a344:	08 be       	out	0x38, r0	; 56
    a346:	0f 90       	pop	r0
    a348:	0f be       	out	0x3f, r0	; 63
    a34a:	0f 90       	pop	r0
    a34c:	1f 90       	pop	r1
    a34e:	18 95       	reti

0000a350 <__vector_28>:

ISR( USARTC1_RXC_vect)
{
    a350:	1f 92       	push	r1
    a352:	0f 92       	push	r0
    a354:	0f b6       	in	r0, 0x3f	; 63
    a356:	0f 92       	push	r0
    a358:	08 b6       	in	r0, 0x38	; 56
    a35a:	0f 92       	push	r0
    a35c:	09 b6       	in	r0, 0x39	; 57
    a35e:	0f 92       	push	r0
    a360:	0b b6       	in	r0, 0x3b	; 59
    a362:	0f 92       	push	r0
    a364:	11 24       	eor	r1, r1
    a366:	18 be       	out	0x38, r1	; 56
    a368:	19 be       	out	0x39, r1	; 57
    a36a:	1b be       	out	0x3b, r1	; 59
    a36c:	2f 93       	push	r18
    a36e:	3f 93       	push	r19
    a370:	4f 93       	push	r20
    a372:	5f 93       	push	r21
    a374:	6f 93       	push	r22
    a376:	7f 93       	push	r23
    a378:	8f 93       	push	r24
    a37a:	9f 93       	push	r25
    a37c:	af 93       	push	r26
    a37e:	bf 93       	push	r27
    a380:	ef 93       	push	r30
    a382:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a384:	80 91 c2 22 	lds	r24, 0x22C2
    a388:	90 91 c3 22 	lds	r25, 0x22C3

   if( pt_handle != NULL)
    a38c:	00 97       	sbiw	r24, 0x00	; 0
    a38e:	11 f0       	breq	.+4      	; 0xa394 <__vector_28+0x44>
   {
		updateRxBuffer( pt_handle);
    a390:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC1_RXC_vect)*/
    a394:	ff 91       	pop	r31
    a396:	ef 91       	pop	r30
    a398:	bf 91       	pop	r27
    a39a:	af 91       	pop	r26
    a39c:	9f 91       	pop	r25
    a39e:	8f 91       	pop	r24
    a3a0:	7f 91       	pop	r23
    a3a2:	6f 91       	pop	r22
    a3a4:	5f 91       	pop	r21
    a3a6:	4f 91       	pop	r20
    a3a8:	3f 91       	pop	r19
    a3aa:	2f 91       	pop	r18
    a3ac:	0f 90       	pop	r0
    a3ae:	0b be       	out	0x3b, r0	; 59
    a3b0:	0f 90       	pop	r0
    a3b2:	09 be       	out	0x39, r0	; 57
    a3b4:	0f 90       	pop	r0
    a3b6:	08 be       	out	0x38, r0	; 56
    a3b8:	0f 90       	pop	r0
    a3ba:	0f be       	out	0x3f, r0	; 63
    a3bc:	0f 90       	pop	r0
    a3be:	1f 90       	pop	r1
    a3c0:	18 95       	reti

0000a3c2 <__vector_29>:

ISR( USARTC1_DRE_vect)
{
    a3c2:	1f 92       	push	r1
    a3c4:	0f 92       	push	r0
    a3c6:	0f b6       	in	r0, 0x3f	; 63
    a3c8:	0f 92       	push	r0
    a3ca:	08 b6       	in	r0, 0x38	; 56
    a3cc:	0f 92       	push	r0
    a3ce:	09 b6       	in	r0, 0x39	; 57
    a3d0:	0f 92       	push	r0
    a3d2:	0b b6       	in	r0, 0x3b	; 59
    a3d4:	0f 92       	push	r0
    a3d6:	11 24       	eor	r1, r1
    a3d8:	18 be       	out	0x38, r1	; 56
    a3da:	19 be       	out	0x39, r1	; 57
    a3dc:	1b be       	out	0x3b, r1	; 59
    a3de:	2f 93       	push	r18
    a3e0:	3f 93       	push	r19
    a3e2:	4f 93       	push	r20
    a3e4:	5f 93       	push	r21
    a3e6:	6f 93       	push	r22
    a3e8:	7f 93       	push	r23
    a3ea:	8f 93       	push	r24
    a3ec:	9f 93       	push	r25
    a3ee:	af 93       	push	r26
    a3f0:	bf 93       	push	r27
    a3f2:	ef 93       	push	r30
    a3f4:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    a3f6:	80 91 c2 22 	lds	r24, 0x22C2
    a3fa:	90 91 c3 22 	lds	r25, 0x22C3

   if( pt_handle != NULL)
    a3fe:	00 97       	sbiw	r24, 0x00	; 0
    a400:	11 f0       	breq	.+4      	; 0xa406 <__vector_29+0x44>
   {
      updateTxBuffer( pt_handle);
    a402:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTC1_DRE_vect)*/
    a406:	ff 91       	pop	r31
    a408:	ef 91       	pop	r30
    a40a:	bf 91       	pop	r27
    a40c:	af 91       	pop	r26
    a40e:	9f 91       	pop	r25
    a410:	8f 91       	pop	r24
    a412:	7f 91       	pop	r23
    a414:	6f 91       	pop	r22
    a416:	5f 91       	pop	r21
    a418:	4f 91       	pop	r20
    a41a:	3f 91       	pop	r19
    a41c:	2f 91       	pop	r18
    a41e:	0f 90       	pop	r0
    a420:	0b be       	out	0x3b, r0	; 59
    a422:	0f 90       	pop	r0
    a424:	09 be       	out	0x39, r0	; 57
    a426:	0f 90       	pop	r0
    a428:	08 be       	out	0x38, r0	; 56
    a42a:	0f 90       	pop	r0
    a42c:	0f be       	out	0x3f, r0	; 63
    a42e:	0f 90       	pop	r0
    a430:	1f 90       	pop	r1
    a432:	18 95       	reti

0000a434 <__vector_88>:

ISR( USARTD0_RXC_vect)
{
    a434:	1f 92       	push	r1
    a436:	0f 92       	push	r0
    a438:	0f b6       	in	r0, 0x3f	; 63
    a43a:	0f 92       	push	r0
    a43c:	08 b6       	in	r0, 0x38	; 56
    a43e:	0f 92       	push	r0
    a440:	09 b6       	in	r0, 0x39	; 57
    a442:	0f 92       	push	r0
    a444:	0b b6       	in	r0, 0x3b	; 59
    a446:	0f 92       	push	r0
    a448:	11 24       	eor	r1, r1
    a44a:	18 be       	out	0x38, r1	; 56
    a44c:	19 be       	out	0x39, r1	; 57
    a44e:	1b be       	out	0x3b, r1	; 59
    a450:	2f 93       	push	r18
    a452:	3f 93       	push	r19
    a454:	4f 93       	push	r20
    a456:	5f 93       	push	r21
    a458:	6f 93       	push	r22
    a45a:	7f 93       	push	r23
    a45c:	8f 93       	push	r24
    a45e:	9f 93       	push	r25
    a460:	af 93       	push	r26
    a462:	bf 93       	push	r27
    a464:	ef 93       	push	r30
    a466:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a468:	80 91 c4 22 	lds	r24, 0x22C4
    a46c:	90 91 c5 22 	lds	r25, 0x22C5

   if( pt_handle != NULL)
    a470:	00 97       	sbiw	r24, 0x00	; 0
    a472:	11 f0       	breq	.+4      	; 0xa478 <__vector_88+0x44>
   {
		updateRxBuffer( pt_handle);
    a474:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD0_RXC_vect)*/
    a478:	ff 91       	pop	r31
    a47a:	ef 91       	pop	r30
    a47c:	bf 91       	pop	r27
    a47e:	af 91       	pop	r26
    a480:	9f 91       	pop	r25
    a482:	8f 91       	pop	r24
    a484:	7f 91       	pop	r23
    a486:	6f 91       	pop	r22
    a488:	5f 91       	pop	r21
    a48a:	4f 91       	pop	r20
    a48c:	3f 91       	pop	r19
    a48e:	2f 91       	pop	r18
    a490:	0f 90       	pop	r0
    a492:	0b be       	out	0x3b, r0	; 59
    a494:	0f 90       	pop	r0
    a496:	09 be       	out	0x39, r0	; 57
    a498:	0f 90       	pop	r0
    a49a:	08 be       	out	0x38, r0	; 56
    a49c:	0f 90       	pop	r0
    a49e:	0f be       	out	0x3f, r0	; 63
    a4a0:	0f 90       	pop	r0
    a4a2:	1f 90       	pop	r1
    a4a4:	18 95       	reti

0000a4a6 <__vector_89>:

ISR( USARTD0_DRE_vect)
{
    a4a6:	1f 92       	push	r1
    a4a8:	0f 92       	push	r0
    a4aa:	0f b6       	in	r0, 0x3f	; 63
    a4ac:	0f 92       	push	r0
    a4ae:	08 b6       	in	r0, 0x38	; 56
    a4b0:	0f 92       	push	r0
    a4b2:	09 b6       	in	r0, 0x39	; 57
    a4b4:	0f 92       	push	r0
    a4b6:	0b b6       	in	r0, 0x3b	; 59
    a4b8:	0f 92       	push	r0
    a4ba:	11 24       	eor	r1, r1
    a4bc:	18 be       	out	0x38, r1	; 56
    a4be:	19 be       	out	0x39, r1	; 57
    a4c0:	1b be       	out	0x3b, r1	; 59
    a4c2:	2f 93       	push	r18
    a4c4:	3f 93       	push	r19
    a4c6:	4f 93       	push	r20
    a4c8:	5f 93       	push	r21
    a4ca:	6f 93       	push	r22
    a4cc:	7f 93       	push	r23
    a4ce:	8f 93       	push	r24
    a4d0:	9f 93       	push	r25
    a4d2:	af 93       	push	r26
    a4d4:	bf 93       	push	r27
    a4d6:	ef 93       	push	r30
    a4d8:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    a4da:	80 91 c4 22 	lds	r24, 0x22C4
    a4de:	90 91 c5 22 	lds	r25, 0x22C5

   if( pt_handle != NULL)
    a4e2:	00 97       	sbiw	r24, 0x00	; 0
    a4e4:	11 f0       	breq	.+4      	; 0xa4ea <__vector_89+0x44>
   {
      updateTxBuffer( pt_handle);
    a4e6:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD0_DRE_vect)*/
    a4ea:	ff 91       	pop	r31
    a4ec:	ef 91       	pop	r30
    a4ee:	bf 91       	pop	r27
    a4f0:	af 91       	pop	r26
    a4f2:	9f 91       	pop	r25
    a4f4:	8f 91       	pop	r24
    a4f6:	7f 91       	pop	r23
    a4f8:	6f 91       	pop	r22
    a4fa:	5f 91       	pop	r21
    a4fc:	4f 91       	pop	r20
    a4fe:	3f 91       	pop	r19
    a500:	2f 91       	pop	r18
    a502:	0f 90       	pop	r0
    a504:	0b be       	out	0x3b, r0	; 59
    a506:	0f 90       	pop	r0
    a508:	09 be       	out	0x39, r0	; 57
    a50a:	0f 90       	pop	r0
    a50c:	08 be       	out	0x38, r0	; 56
    a50e:	0f 90       	pop	r0
    a510:	0f be       	out	0x3f, r0	; 63
    a512:	0f 90       	pop	r0
    a514:	1f 90       	pop	r1
    a516:	18 95       	reti

0000a518 <__vector_91>:

ISR( USARTD1_RXC_vect)
{
    a518:	1f 92       	push	r1
    a51a:	0f 92       	push	r0
    a51c:	0f b6       	in	r0, 0x3f	; 63
    a51e:	0f 92       	push	r0
    a520:	08 b6       	in	r0, 0x38	; 56
    a522:	0f 92       	push	r0
    a524:	09 b6       	in	r0, 0x39	; 57
    a526:	0f 92       	push	r0
    a528:	0b b6       	in	r0, 0x3b	; 59
    a52a:	0f 92       	push	r0
    a52c:	11 24       	eor	r1, r1
    a52e:	18 be       	out	0x38, r1	; 56
    a530:	19 be       	out	0x39, r1	; 57
    a532:	1b be       	out	0x3b, r1	; 59
    a534:	2f 93       	push	r18
    a536:	3f 93       	push	r19
    a538:	4f 93       	push	r20
    a53a:	5f 93       	push	r21
    a53c:	6f 93       	push	r22
    a53e:	7f 93       	push	r23
    a540:	8f 93       	push	r24
    a542:	9f 93       	push	r25
    a544:	af 93       	push	r26
    a546:	bf 93       	push	r27
    a548:	ef 93       	push	r30
    a54a:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a54c:	80 91 c6 22 	lds	r24, 0x22C6
    a550:	90 91 c7 22 	lds	r25, 0x22C7

   if( pt_handle != NULL)
    a554:	00 97       	sbiw	r24, 0x00	; 0
    a556:	11 f0       	breq	.+4      	; 0xa55c <__vector_91+0x44>
   {
		updateRxBuffer( pt_handle);
    a558:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD1_RXC_vect)*/
    a55c:	ff 91       	pop	r31
    a55e:	ef 91       	pop	r30
    a560:	bf 91       	pop	r27
    a562:	af 91       	pop	r26
    a564:	9f 91       	pop	r25
    a566:	8f 91       	pop	r24
    a568:	7f 91       	pop	r23
    a56a:	6f 91       	pop	r22
    a56c:	5f 91       	pop	r21
    a56e:	4f 91       	pop	r20
    a570:	3f 91       	pop	r19
    a572:	2f 91       	pop	r18
    a574:	0f 90       	pop	r0
    a576:	0b be       	out	0x3b, r0	; 59
    a578:	0f 90       	pop	r0
    a57a:	09 be       	out	0x39, r0	; 57
    a57c:	0f 90       	pop	r0
    a57e:	08 be       	out	0x38, r0	; 56
    a580:	0f 90       	pop	r0
    a582:	0f be       	out	0x3f, r0	; 63
    a584:	0f 90       	pop	r0
    a586:	1f 90       	pop	r1
    a588:	18 95       	reti

0000a58a <__vector_92>:

ISR( USARTD1_DRE_vect)
{
    a58a:	1f 92       	push	r1
    a58c:	0f 92       	push	r0
    a58e:	0f b6       	in	r0, 0x3f	; 63
    a590:	0f 92       	push	r0
    a592:	08 b6       	in	r0, 0x38	; 56
    a594:	0f 92       	push	r0
    a596:	09 b6       	in	r0, 0x39	; 57
    a598:	0f 92       	push	r0
    a59a:	0b b6       	in	r0, 0x3b	; 59
    a59c:	0f 92       	push	r0
    a59e:	11 24       	eor	r1, r1
    a5a0:	18 be       	out	0x38, r1	; 56
    a5a2:	19 be       	out	0x39, r1	; 57
    a5a4:	1b be       	out	0x3b, r1	; 59
    a5a6:	2f 93       	push	r18
    a5a8:	3f 93       	push	r19
    a5aa:	4f 93       	push	r20
    a5ac:	5f 93       	push	r21
    a5ae:	6f 93       	push	r22
    a5b0:	7f 93       	push	r23
    a5b2:	8f 93       	push	r24
    a5b4:	9f 93       	push	r25
    a5b6:	af 93       	push	r26
    a5b8:	bf 93       	push	r27
    a5ba:	ef 93       	push	r30
    a5bc:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    a5be:	80 91 c6 22 	lds	r24, 0x22C6
    a5c2:	90 91 c7 22 	lds	r25, 0x22C7

   if( pt_handle != NULL)
    a5c6:	00 97       	sbiw	r24, 0x00	; 0
    a5c8:	11 f0       	breq	.+4      	; 0xa5ce <__vector_92+0x44>
   {
      updateTxBuffer( pt_handle);
    a5ca:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTD1_DRE_vect)*/
    a5ce:	ff 91       	pop	r31
    a5d0:	ef 91       	pop	r30
    a5d2:	bf 91       	pop	r27
    a5d4:	af 91       	pop	r26
    a5d6:	9f 91       	pop	r25
    a5d8:	8f 91       	pop	r24
    a5da:	7f 91       	pop	r23
    a5dc:	6f 91       	pop	r22
    a5de:	5f 91       	pop	r21
    a5e0:	4f 91       	pop	r20
    a5e2:	3f 91       	pop	r19
    a5e4:	2f 91       	pop	r18
    a5e6:	0f 90       	pop	r0
    a5e8:	0b be       	out	0x3b, r0	; 59
    a5ea:	0f 90       	pop	r0
    a5ec:	09 be       	out	0x39, r0	; 57
    a5ee:	0f 90       	pop	r0
    a5f0:	08 be       	out	0x38, r0	; 56
    a5f2:	0f 90       	pop	r0
    a5f4:	0f be       	out	0x3f, r0	; 63
    a5f6:	0f 90       	pop	r0
    a5f8:	1f 90       	pop	r1
    a5fa:	18 95       	reti

0000a5fc <__vector_58>:

ISR( USARTE0_RXC_vect)
{
    a5fc:	1f 92       	push	r1
    a5fe:	0f 92       	push	r0
    a600:	0f b6       	in	r0, 0x3f	; 63
    a602:	0f 92       	push	r0
    a604:	08 b6       	in	r0, 0x38	; 56
    a606:	0f 92       	push	r0
    a608:	09 b6       	in	r0, 0x39	; 57
    a60a:	0f 92       	push	r0
    a60c:	0b b6       	in	r0, 0x3b	; 59
    a60e:	0f 92       	push	r0
    a610:	11 24       	eor	r1, r1
    a612:	18 be       	out	0x38, r1	; 56
    a614:	19 be       	out	0x39, r1	; 57
    a616:	1b be       	out	0x3b, r1	; 59
    a618:	2f 93       	push	r18
    a61a:	3f 93       	push	r19
    a61c:	4f 93       	push	r20
    a61e:	5f 93       	push	r21
    a620:	6f 93       	push	r22
    a622:	7f 93       	push	r23
    a624:	8f 93       	push	r24
    a626:	9f 93       	push	r25
    a628:	af 93       	push	r26
    a62a:	bf 93       	push	r27
    a62c:	ef 93       	push	r30
    a62e:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a630:	80 91 c8 22 	lds	r24, 0x22C8
    a634:	90 91 c9 22 	lds	r25, 0x22C9

   if( pt_handle != NULL)
    a638:	00 97       	sbiw	r24, 0x00	; 0
    a63a:	11 f0       	breq	.+4      	; 0xa640 <__vector_58+0x44>
   {
		updateRxBuffer( pt_handle);
    a63c:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE0_RXC_vect)*/
    a640:	ff 91       	pop	r31
    a642:	ef 91       	pop	r30
    a644:	bf 91       	pop	r27
    a646:	af 91       	pop	r26
    a648:	9f 91       	pop	r25
    a64a:	8f 91       	pop	r24
    a64c:	7f 91       	pop	r23
    a64e:	6f 91       	pop	r22
    a650:	5f 91       	pop	r21
    a652:	4f 91       	pop	r20
    a654:	3f 91       	pop	r19
    a656:	2f 91       	pop	r18
    a658:	0f 90       	pop	r0
    a65a:	0b be       	out	0x3b, r0	; 59
    a65c:	0f 90       	pop	r0
    a65e:	09 be       	out	0x39, r0	; 57
    a660:	0f 90       	pop	r0
    a662:	08 be       	out	0x38, r0	; 56
    a664:	0f 90       	pop	r0
    a666:	0f be       	out	0x3f, r0	; 63
    a668:	0f 90       	pop	r0
    a66a:	1f 90       	pop	r1
    a66c:	18 95       	reti

0000a66e <__vector_59>:

ISR( USARTE0_DRE_vect)
{
    a66e:	1f 92       	push	r1
    a670:	0f 92       	push	r0
    a672:	0f b6       	in	r0, 0x3f	; 63
    a674:	0f 92       	push	r0
    a676:	08 b6       	in	r0, 0x38	; 56
    a678:	0f 92       	push	r0
    a67a:	09 b6       	in	r0, 0x39	; 57
    a67c:	0f 92       	push	r0
    a67e:	0b b6       	in	r0, 0x3b	; 59
    a680:	0f 92       	push	r0
    a682:	11 24       	eor	r1, r1
    a684:	18 be       	out	0x38, r1	; 56
    a686:	19 be       	out	0x39, r1	; 57
    a688:	1b be       	out	0x3b, r1	; 59
    a68a:	2f 93       	push	r18
    a68c:	3f 93       	push	r19
    a68e:	4f 93       	push	r20
    a690:	5f 93       	push	r21
    a692:	6f 93       	push	r22
    a694:	7f 93       	push	r23
    a696:	8f 93       	push	r24
    a698:	9f 93       	push	r25
    a69a:	af 93       	push	r26
    a69c:	bf 93       	push	r27
    a69e:	ef 93       	push	r30
    a6a0:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    a6a2:	80 91 c8 22 	lds	r24, 0x22C8
    a6a6:	90 91 c9 22 	lds	r25, 0x22C9

   if( pt_handle != NULL)
    a6aa:	00 97       	sbiw	r24, 0x00	; 0
    a6ac:	11 f0       	breq	.+4      	; 0xa6b2 <__vector_59+0x44>
   {
      updateTxBuffer( pt_handle);
    a6ae:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE0_DRE_vect)*/
    a6b2:	ff 91       	pop	r31
    a6b4:	ef 91       	pop	r30
    a6b6:	bf 91       	pop	r27
    a6b8:	af 91       	pop	r26
    a6ba:	9f 91       	pop	r25
    a6bc:	8f 91       	pop	r24
    a6be:	7f 91       	pop	r23
    a6c0:	6f 91       	pop	r22
    a6c2:	5f 91       	pop	r21
    a6c4:	4f 91       	pop	r20
    a6c6:	3f 91       	pop	r19
    a6c8:	2f 91       	pop	r18
    a6ca:	0f 90       	pop	r0
    a6cc:	0b be       	out	0x3b, r0	; 59
    a6ce:	0f 90       	pop	r0
    a6d0:	09 be       	out	0x39, r0	; 57
    a6d2:	0f 90       	pop	r0
    a6d4:	08 be       	out	0x38, r0	; 56
    a6d6:	0f 90       	pop	r0
    a6d8:	0f be       	out	0x3f, r0	; 63
    a6da:	0f 90       	pop	r0
    a6dc:	1f 90       	pop	r1
    a6de:	18 95       	reti

0000a6e0 <__vector_61>:

ISR( USARTE1_RXC_vect)
{
    a6e0:	1f 92       	push	r1
    a6e2:	0f 92       	push	r0
    a6e4:	0f b6       	in	r0, 0x3f	; 63
    a6e6:	0f 92       	push	r0
    a6e8:	08 b6       	in	r0, 0x38	; 56
    a6ea:	0f 92       	push	r0
    a6ec:	09 b6       	in	r0, 0x39	; 57
    a6ee:	0f 92       	push	r0
    a6f0:	0b b6       	in	r0, 0x3b	; 59
    a6f2:	0f 92       	push	r0
    a6f4:	11 24       	eor	r1, r1
    a6f6:	18 be       	out	0x38, r1	; 56
    a6f8:	19 be       	out	0x39, r1	; 57
    a6fa:	1b be       	out	0x3b, r1	; 59
    a6fc:	2f 93       	push	r18
    a6fe:	3f 93       	push	r19
    a700:	4f 93       	push	r20
    a702:	5f 93       	push	r21
    a704:	6f 93       	push	r22
    a706:	7f 93       	push	r23
    a708:	8f 93       	push	r24
    a70a:	9f 93       	push	r25
    a70c:	af 93       	push	r26
    a70e:	bf 93       	push	r27
    a710:	ef 93       	push	r30
    a712:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    a714:	80 91 ca 22 	lds	r24, 0x22CA
    a718:	90 91 cb 22 	lds	r25, 0x22CB

   if( pt_handle != NULL)
    a71c:	00 97       	sbiw	r24, 0x00	; 0
    a71e:	11 f0       	breq	.+4      	; 0xa724 <__vector_61+0x44>
   {
		updateRxBuffer( pt_handle);
    a720:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE1_RXC_vect)*/
    a724:	ff 91       	pop	r31
    a726:	ef 91       	pop	r30
    a728:	bf 91       	pop	r27
    a72a:	af 91       	pop	r26
    a72c:	9f 91       	pop	r25
    a72e:	8f 91       	pop	r24
    a730:	7f 91       	pop	r23
    a732:	6f 91       	pop	r22
    a734:	5f 91       	pop	r21
    a736:	4f 91       	pop	r20
    a738:	3f 91       	pop	r19
    a73a:	2f 91       	pop	r18
    a73c:	0f 90       	pop	r0
    a73e:	0b be       	out	0x3b, r0	; 59
    a740:	0f 90       	pop	r0
    a742:	09 be       	out	0x39, r0	; 57
    a744:	0f 90       	pop	r0
    a746:	08 be       	out	0x38, r0	; 56
    a748:	0f 90       	pop	r0
    a74a:	0f be       	out	0x3f, r0	; 63
    a74c:	0f 90       	pop	r0
    a74e:	1f 90       	pop	r1
    a750:	18 95       	reti

0000a752 <__vector_62>:

ISR( USARTE1_DRE_vect)
{
    a752:	1f 92       	push	r1
    a754:	0f 92       	push	r0
    a756:	0f b6       	in	r0, 0x3f	; 63
    a758:	0f 92       	push	r0
    a75a:	08 b6       	in	r0, 0x38	; 56
    a75c:	0f 92       	push	r0
    a75e:	09 b6       	in	r0, 0x39	; 57
    a760:	0f 92       	push	r0
    a762:	0b b6       	in	r0, 0x3b	; 59
    a764:	0f 92       	push	r0
    a766:	11 24       	eor	r1, r1
    a768:	18 be       	out	0x38, r1	; 56
    a76a:	19 be       	out	0x39, r1	; 57
    a76c:	1b be       	out	0x3b, r1	; 59
    a76e:	2f 93       	push	r18
    a770:	3f 93       	push	r19
    a772:	4f 93       	push	r20
    a774:	5f 93       	push	r21
    a776:	6f 93       	push	r22
    a778:	7f 93       	push	r23
    a77a:	8f 93       	push	r24
    a77c:	9f 93       	push	r25
    a77e:	af 93       	push	r26
    a780:	bf 93       	push	r27
    a782:	ef 93       	push	r30
    a784:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    a786:	80 91 ca 22 	lds	r24, 0x22CA
    a78a:	90 91 cb 22 	lds	r25, 0x22CB

   if( pt_handle != NULL)
    a78e:	00 97       	sbiw	r24, 0x00	; 0
    a790:	11 f0       	breq	.+4      	; 0xa796 <__vector_62+0x44>
   {
      updateTxBuffer( pt_handle);
    a792:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTE1_DRE_vect)*/
    a796:	ff 91       	pop	r31
    a798:	ef 91       	pop	r30
    a79a:	bf 91       	pop	r27
    a79c:	af 91       	pop	r26
    a79e:	9f 91       	pop	r25
    a7a0:	8f 91       	pop	r24
    a7a2:	7f 91       	pop	r23
    a7a4:	6f 91       	pop	r22
    a7a6:	5f 91       	pop	r21
    a7a8:	4f 91       	pop	r20
    a7aa:	3f 91       	pop	r19
    a7ac:	2f 91       	pop	r18
    a7ae:	0f 90       	pop	r0
    a7b0:	0b be       	out	0x3b, r0	; 59
    a7b2:	0f 90       	pop	r0
    a7b4:	09 be       	out	0x39, r0	; 57
    a7b6:	0f 90       	pop	r0
    a7b8:	08 be       	out	0x38, r0	; 56
    a7ba:	0f 90       	pop	r0
    a7bc:	0f be       	out	0x3f, r0	; 63
    a7be:	0f 90       	pop	r0
    a7c0:	1f 90       	pop	r1
    a7c2:	18 95       	reti

0000a7c4 <__vector_119>:

ISR( USARTF0_RXC_vect)
{
    a7c4:	1f 92       	push	r1
    a7c6:	0f 92       	push	r0
    a7c8:	0f b6       	in	r0, 0x3f	; 63
    a7ca:	0f 92       	push	r0
    a7cc:	08 b6       	in	r0, 0x38	; 56
    a7ce:	0f 92       	push	r0
    a7d0:	09 b6       	in	r0, 0x39	; 57
    a7d2:	0f 92       	push	r0
    a7d4:	0b b6       	in	r0, 0x3b	; 59
    a7d6:	0f 92       	push	r0
    a7d8:	11 24       	eor	r1, r1
    a7da:	18 be       	out	0x38, r1	; 56
    a7dc:	19 be       	out	0x39, r1	; 57
    a7de:	1b be       	out	0x3b, r1	; 59
    a7e0:	2f 93       	push	r18
    a7e2:	3f 93       	push	r19
    a7e4:	4f 93       	push	r20
    a7e6:	5f 93       	push	r21
    a7e8:	6f 93       	push	r22
    a7ea:	7f 93       	push	r23
    a7ec:	8f 93       	push	r24
    a7ee:	9f 93       	push	r25
    a7f0:	af 93       	push	r26
    a7f2:	bf 93       	push	r27
    a7f4:	ef 93       	push	r30
    a7f6:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    a7f8:	80 91 cc 22 	lds	r24, 0x22CC
    a7fc:	90 91 cd 22 	lds	r25, 0x22CD

   if( pt_handle != NULL)
    a800:	00 97       	sbiw	r24, 0x00	; 0
    a802:	11 f0       	breq	.+4      	; 0xa808 <__vector_119+0x44>
   {
		updateRxBuffer( pt_handle);
    a804:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF0_RXC_vect)*/
    a808:	ff 91       	pop	r31
    a80a:	ef 91       	pop	r30
    a80c:	bf 91       	pop	r27
    a80e:	af 91       	pop	r26
    a810:	9f 91       	pop	r25
    a812:	8f 91       	pop	r24
    a814:	7f 91       	pop	r23
    a816:	6f 91       	pop	r22
    a818:	5f 91       	pop	r21
    a81a:	4f 91       	pop	r20
    a81c:	3f 91       	pop	r19
    a81e:	2f 91       	pop	r18
    a820:	0f 90       	pop	r0
    a822:	0b be       	out	0x3b, r0	; 59
    a824:	0f 90       	pop	r0
    a826:	09 be       	out	0x39, r0	; 57
    a828:	0f 90       	pop	r0
    a82a:	08 be       	out	0x38, r0	; 56
    a82c:	0f 90       	pop	r0
    a82e:	0f be       	out	0x3f, r0	; 63
    a830:	0f 90       	pop	r0
    a832:	1f 90       	pop	r1
    a834:	18 95       	reti

0000a836 <__vector_120>:

ISR( USARTF0_DRE_vect)
{
    a836:	1f 92       	push	r1
    a838:	0f 92       	push	r0
    a83a:	0f b6       	in	r0, 0x3f	; 63
    a83c:	0f 92       	push	r0
    a83e:	08 b6       	in	r0, 0x38	; 56
    a840:	0f 92       	push	r0
    a842:	09 b6       	in	r0, 0x39	; 57
    a844:	0f 92       	push	r0
    a846:	0b b6       	in	r0, 0x3b	; 59
    a848:	0f 92       	push	r0
    a84a:	11 24       	eor	r1, r1
    a84c:	18 be       	out	0x38, r1	; 56
    a84e:	19 be       	out	0x39, r1	; 57
    a850:	1b be       	out	0x3b, r1	; 59
    a852:	2f 93       	push	r18
    a854:	3f 93       	push	r19
    a856:	4f 93       	push	r20
    a858:	5f 93       	push	r21
    a85a:	6f 93       	push	r22
    a85c:	7f 93       	push	r23
    a85e:	8f 93       	push	r24
    a860:	9f 93       	push	r25
    a862:	af 93       	push	r26
    a864:	bf 93       	push	r27
    a866:	ef 93       	push	r30
    a868:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    a86a:	80 91 cc 22 	lds	r24, 0x22CC
    a86e:	90 91 cd 22 	lds	r25, 0x22CD

   if( pt_handle != NULL)
    a872:	00 97       	sbiw	r24, 0x00	; 0
    a874:	11 f0       	breq	.+4      	; 0xa87a <__vector_120+0x44>
   {
      updateTxBuffer( pt_handle);
    a876:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF0_DRE_vect)*/
    a87a:	ff 91       	pop	r31
    a87c:	ef 91       	pop	r30
    a87e:	bf 91       	pop	r27
    a880:	af 91       	pop	r26
    a882:	9f 91       	pop	r25
    a884:	8f 91       	pop	r24
    a886:	7f 91       	pop	r23
    a888:	6f 91       	pop	r22
    a88a:	5f 91       	pop	r21
    a88c:	4f 91       	pop	r20
    a88e:	3f 91       	pop	r19
    a890:	2f 91       	pop	r18
    a892:	0f 90       	pop	r0
    a894:	0b be       	out	0x3b, r0	; 59
    a896:	0f 90       	pop	r0
    a898:	09 be       	out	0x39, r0	; 57
    a89a:	0f 90       	pop	r0
    a89c:	08 be       	out	0x38, r0	; 56
    a89e:	0f 90       	pop	r0
    a8a0:	0f be       	out	0x3f, r0	; 63
    a8a2:	0f 90       	pop	r0
    a8a4:	1f 90       	pop	r1
    a8a6:	18 95       	reti

0000a8a8 <__vector_122>:

ISR( USARTF1_RXC_vect)
{
    a8a8:	1f 92       	push	r1
    a8aa:	0f 92       	push	r0
    a8ac:	0f b6       	in	r0, 0x3f	; 63
    a8ae:	0f 92       	push	r0
    a8b0:	08 b6       	in	r0, 0x38	; 56
    a8b2:	0f 92       	push	r0
    a8b4:	09 b6       	in	r0, 0x39	; 57
    a8b6:	0f 92       	push	r0
    a8b8:	0b b6       	in	r0, 0x3b	; 59
    a8ba:	0f 92       	push	r0
    a8bc:	11 24       	eor	r1, r1
    a8be:	18 be       	out	0x38, r1	; 56
    a8c0:	19 be       	out	0x39, r1	; 57
    a8c2:	1b be       	out	0x3b, r1	; 59
    a8c4:	2f 93       	push	r18
    a8c6:	3f 93       	push	r19
    a8c8:	4f 93       	push	r20
    a8ca:	5f 93       	push	r21
    a8cc:	6f 93       	push	r22
    a8ce:	7f 93       	push	r23
    a8d0:	8f 93       	push	r24
    a8d2:	9f 93       	push	r25
    a8d4:	af 93       	push	r26
    a8d6:	bf 93       	push	r27
    a8d8:	ef 93       	push	r30
    a8da:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    a8dc:	80 91 ce 22 	lds	r24, 0x22CE
    a8e0:	90 91 cf 22 	lds	r25, 0x22CF

   if( pt_handle != NULL)
    a8e4:	00 97       	sbiw	r24, 0x00	; 0
    a8e6:	11 f0       	breq	.+4      	; 0xa8ec <__vector_122+0x44>
   {
		updateRxBuffer( pt_handle);
    a8e8:	0e 94 0b 50 	call	0xa016	; 0xa016 <updateRxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF1_RXC_vect)*/
    a8ec:	ff 91       	pop	r31
    a8ee:	ef 91       	pop	r30
    a8f0:	bf 91       	pop	r27
    a8f2:	af 91       	pop	r26
    a8f4:	9f 91       	pop	r25
    a8f6:	8f 91       	pop	r24
    a8f8:	7f 91       	pop	r23
    a8fa:	6f 91       	pop	r22
    a8fc:	5f 91       	pop	r21
    a8fe:	4f 91       	pop	r20
    a900:	3f 91       	pop	r19
    a902:	2f 91       	pop	r18
    a904:	0f 90       	pop	r0
    a906:	0b be       	out	0x3b, r0	; 59
    a908:	0f 90       	pop	r0
    a90a:	09 be       	out	0x39, r0	; 57
    a90c:	0f 90       	pop	r0
    a90e:	08 be       	out	0x38, r0	; 56
    a910:	0f 90       	pop	r0
    a912:	0f be       	out	0x3f, r0	; 63
    a914:	0f 90       	pop	r0
    a916:	1f 90       	pop	r1
    a918:	18 95       	reti

0000a91a <__vector_123>:

ISR( USARTF1_DRE_vect)
{
    a91a:	1f 92       	push	r1
    a91c:	0f 92       	push	r0
    a91e:	0f b6       	in	r0, 0x3f	; 63
    a920:	0f 92       	push	r0
    a922:	08 b6       	in	r0, 0x38	; 56
    a924:	0f 92       	push	r0
    a926:	09 b6       	in	r0, 0x39	; 57
    a928:	0f 92       	push	r0
    a92a:	0b b6       	in	r0, 0x3b	; 59
    a92c:	0f 92       	push	r0
    a92e:	11 24       	eor	r1, r1
    a930:	18 be       	out	0x38, r1	; 56
    a932:	19 be       	out	0x39, r1	; 57
    a934:	1b be       	out	0x3b, r1	; 59
    a936:	2f 93       	push	r18
    a938:	3f 93       	push	r19
    a93a:	4f 93       	push	r20
    a93c:	5f 93       	push	r21
    a93e:	6f 93       	push	r22
    a940:	7f 93       	push	r23
    a942:	8f 93       	push	r24
    a944:	9f 93       	push	r25
    a946:	af 93       	push	r26
    a948:	bf 93       	push	r27
    a94a:	ef 93       	push	r30
    a94c:	ff 93       	push	r31
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    a94e:	80 91 ce 22 	lds	r24, 0x22CE
    a952:	90 91 cf 22 	lds	r25, 0x22CF

   if( pt_handle != NULL)
    a956:	00 97       	sbiw	r24, 0x00	; 0
    a958:	11 f0       	breq	.+4      	; 0xa95e <__vector_123+0x44>
   {
      updateTxBuffer( pt_handle);
    a95a:	0e 94 3f 50 	call	0xa07e	; 0xa07e <updateTxBuffer>
   }/*End if( pt_handle != NULL)*/

}/*End ISR( USARTF1_DRE_vect)*/
    a95e:	ff 91       	pop	r31
    a960:	ef 91       	pop	r30
    a962:	bf 91       	pop	r27
    a964:	af 91       	pop	r26
    a966:	9f 91       	pop	r25
    a968:	8f 91       	pop	r24
    a96a:	7f 91       	pop	r23
    a96c:	6f 91       	pop	r22
    a96e:	5f 91       	pop	r21
    a970:	4f 91       	pop	r20
    a972:	3f 91       	pop	r19
    a974:	2f 91       	pop	r18
    a976:	0f 90       	pop	r0
    a978:	0b be       	out	0x3b, r0	; 59
    a97a:	0f 90       	pop	r0
    a97c:	09 be       	out	0x39, r0	; 57
    a97e:	0f 90       	pop	r0
    a980:	08 be       	out	0x38, r0	; 56
    a982:	0f 90       	pop	r0
    a984:	0f be       	out	0x3f, r0	; 63
    a986:	0f 90       	pop	r0
    a988:	1f 90       	pop	r1
    a98a:	18 95       	reti

0000a98c <hal_enableUartRxInt>:
   return t_linkHndl;

}/*End createUartHandle*/

t_uartError hal_enableUartRxInt( t_UARTHNDL t_handle)
{
    a98c:	df 93       	push	r29
    a98e:	cf 93       	push	r28
    a990:	00 d0       	rcall	.+0      	; 0xa992 <hal_enableUartRxInt+0x6>
    a992:	cd b7       	in	r28, 0x3d	; 61
    a994:	de b7       	in	r29, 0x3e	; 62
    a996:	8a 83       	std	Y+2, r24	; 0x02
    a998:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    a99a:	8f b7       	in	r24, 0x3f	; 63
    a99c:	89 83       	std	Y+1, r24	; 0x01
    a99e:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    a9a0:	ea 81       	ldd	r30, Y+2	; 0x02
    a9a2:	fb 81       	ldd	r31, Y+3	; 0x03
    a9a4:	20 91 0c 21 	lds	r18, 0x210C
    a9a8:	30 91 0d 21 	lds	r19, 0x210D
    a9ac:	84 81       	ldd	r24, Z+4	; 0x04
    a9ae:	95 81       	ldd	r25, Z+5	; 0x05
    a9b0:	82 17       	cp	r24, r18
    a9b2:	93 07       	cpc	r25, r19
    a9b4:	21 f0       	breq	.+8      	; 0xa9be <hal_enableUartRxInt+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    a9b6:	89 81       	ldd	r24, Y+1	; 0x01
    a9b8:	8f bf       	out	0x3f, r24	; 63
    a9ba:	8e ef       	ldi	r24, 0xFE	; 254
    a9bc:	15 c0       	rjmp	.+42     	; 0xa9e8 <hal_enableUartRxInt+0x5c>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    a9be:	ea 81       	ldd	r30, Y+2	; 0x02
    a9c0:	fb 81       	ldd	r31, Y+3	; 0x03
    a9c2:	a0 81       	ld	r26, Z
    a9c4:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    a9c6:	19 96       	adiw	r26, 0x09	; 9
    a9c8:	ed 91       	ld	r30, X+
    a9ca:	fc 91       	ld	r31, X
    a9cc:	1a 97       	sbiw	r26, 0x0a	; 10
    a9ce:	83 81       	ldd	r24, Z+3	; 0x03
    a9d0:	8f 7c       	andi	r24, 0xCF	; 207
    a9d2:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    a9d4:	19 96       	adiw	r26, 0x09	; 9
    a9d6:	ed 91       	ld	r30, X+
    a9d8:	fc 91       	ld	r31, X
    a9da:	1a 97       	sbiw	r26, 0x0a	; 10
    a9dc:	83 81       	ldd	r24, Z+3	; 0x03
    a9de:	80 63       	ori	r24, 0x30	; 48
    a9e0:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    a9e2:	89 81       	ldd	r24, Y+1	; 0x01
    a9e4:	8f bf       	out	0x3f, r24	; 63
    a9e6:	80 e0       	ldi	r24, 0x00	; 0

   return UART_PASSED;

}/*End hal_enableUartRxInt*/
    a9e8:	23 96       	adiw	r28, 0x03	; 3
    a9ea:	cd bf       	out	0x3d, r28	; 61
    a9ec:	de bf       	out	0x3e, r29	; 62
    a9ee:	cf 91       	pop	r28
    a9f0:	df 91       	pop	r29
    a9f2:	08 95       	ret

0000a9f4 <hal_disableUartRxInt>:

t_uartError hal_disableUartRxInt( t_UARTHNDL t_handle)
{
    a9f4:	df 93       	push	r29
    a9f6:	cf 93       	push	r28
    a9f8:	00 d0       	rcall	.+0      	; 0xa9fa <hal_disableUartRxInt+0x6>
    a9fa:	cd b7       	in	r28, 0x3d	; 61
    a9fc:	de b7       	in	r29, 0x3e	; 62
    a9fe:	8a 83       	std	Y+2, r24	; 0x02
    aa00:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    aa02:	8f b7       	in	r24, 0x3f	; 63
    aa04:	89 83       	std	Y+1, r24	; 0x01
    aa06:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    aa08:	ea 81       	ldd	r30, Y+2	; 0x02
    aa0a:	fb 81       	ldd	r31, Y+3	; 0x03
    aa0c:	20 91 0c 21 	lds	r18, 0x210C
    aa10:	30 91 0d 21 	lds	r19, 0x210D
    aa14:	84 81       	ldd	r24, Z+4	; 0x04
    aa16:	95 81       	ldd	r25, Z+5	; 0x05
    aa18:	82 17       	cp	r24, r18
    aa1a:	93 07       	cpc	r25, r19
    aa1c:	21 f0       	breq	.+8      	; 0xaa26 <hal_disableUartRxInt+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    aa1e:	89 81       	ldd	r24, Y+1	; 0x01
    aa20:	8f bf       	out	0x3f, r24	; 63
    aa22:	8e ef       	ldi	r24, 0xFE	; 254
    aa24:	0e c0       	rjmp	.+28     	; 0xaa42 <hal_disableUartRxInt+0x4e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    aa26:	ea 81       	ldd	r30, Y+2	; 0x02
    aa28:	fb 81       	ldd	r31, Y+3	; 0x03
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    aa2a:	01 90       	ld	r0, Z+
    aa2c:	f0 81       	ld	r31, Z
    aa2e:	e0 2d       	mov	r30, r0
    aa30:	01 84       	ldd	r0, Z+9	; 0x09
    aa32:	f2 85       	ldd	r31, Z+10	; 0x0a
    aa34:	e0 2d       	mov	r30, r0
    aa36:	83 81       	ldd	r24, Z+3	; 0x03
    aa38:	8f 7c       	andi	r24, 0xCF	; 207
    aa3a:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    aa3c:	89 81       	ldd	r24, Y+1	; 0x01
    aa3e:	8f bf       	out	0x3f, r24	; 63
    aa40:	80 e0       	ldi	r24, 0x00	; 0

   return UART_PASSED;

}/*End hal_disableUartRxInt*/
    aa42:	23 96       	adiw	r28, 0x03	; 3
    aa44:	cd bf       	out	0x3d, r28	; 61
    aa46:	de bf       	out	0x3e, r29	; 62
    aa48:	cf 91       	pop	r28
    aa4a:	df 91       	pop	r29
    aa4c:	08 95       	ret

0000aa4e <hal_uartWriteByte>:

t_uartError hal_uartWriteByte( t_UARTHNDL t_handle,
                               uint8_t c_byte)
{
    aa4e:	df 93       	push	r29
    aa50:	cf 93       	push	r28
    aa52:	00 d0       	rcall	.+0      	; 0xaa54 <hal_uartWriteByte+0x6>
    aa54:	cd b7       	in	r28, 0x3d	; 61
    aa56:	de b7       	in	r29, 0x3e	; 62
    aa58:	8a 83       	std	Y+2, r24	; 0x02
    aa5a:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    aa5c:	8f b7       	in	r24, 0x3f	; 63
    aa5e:	89 83       	std	Y+1, r24	; 0x01
    aa60:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    aa62:	ea 81       	ldd	r30, Y+2	; 0x02
    aa64:	fb 81       	ldd	r31, Y+3	; 0x03
    aa66:	20 91 0c 21 	lds	r18, 0x210C
    aa6a:	30 91 0d 21 	lds	r19, 0x210D
    aa6e:	84 81       	ldd	r24, Z+4	; 0x04
    aa70:	95 81       	ldd	r25, Z+5	; 0x05
    aa72:	82 17       	cp	r24, r18
    aa74:	93 07       	cpc	r25, r19
    aa76:	21 f0       	breq	.+8      	; 0xaa80 <hal_uartWriteByte+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    aa78:	89 81       	ldd	r24, Y+1	; 0x01
    aa7a:	8f bf       	out	0x3f, r24	; 63
    aa7c:	8e ef       	ldi	r24, 0xFE	; 254
    aa7e:	1a c0       	rjmp	.+52     	; 0xaab4 <hal_uartWriteByte+0x66>
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    aa80:	ea 81       	ldd	r30, Y+2	; 0x02
    aa82:	fb 81       	ldd	r31, Y+3	; 0x03
    aa84:	01 90       	ld	r0, Z+
    aa86:	f0 81       	ld	r31, Z
    aa88:	e0 2d       	mov	r30, r0
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_txBusLocked == true)
    aa8a:	83 85       	ldd	r24, Z+11	; 0x0b
    aa8c:	88 23       	and	r24, r24
    aa8e:	21 f0       	breq	.+8      	; 0xaa98 <hal_uartWriteByte+0x4a>
	{
      HAL_END_CRITICAL();//Enable interrupts
    aa90:	89 81       	ldd	r24, Y+1	; 0x01
    aa92:	8f bf       	out	0x3f, r24	; 63
    aa94:	81 ef       	ldi	r24, 0xF1	; 241
    aa96:	0e c0       	rjmp	.+28     	; 0xaab4 <hal_uartWriteByte+0x66>
   	return UART_BUSY; /*Yes*/
   }

   pt_uartChanHndl->b_txBusLocked = true;
    aa98:	81 e0       	ldi	r24, 0x01	; 1
    aa9a:	83 87       	std	Z+11, r24	; 0x0b

   HAL_END_CRITICAL();//Enable interrupts
    aa9c:	89 81       	ldd	r24, Y+1	; 0x01
    aa9e:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Wait for room to become available in the TX buffer.
    *------------------------------------------------------------------------*/
   while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    aaa0:	a1 85       	ldd	r26, Z+9	; 0x09
    aaa2:	b2 85       	ldd	r27, Z+10	; 0x0a
    aaa4:	11 96       	adiw	r26, 0x01	; 1
    aaa6:	8c 91       	ld	r24, X
    aaa8:	11 97       	sbiw	r26, 0x01	; 1
    aaaa:	85 ff       	sbrs	r24, 5
    aaac:	fb cf       	rjmp	.-10     	; 0xaaa4 <hal_uartWriteByte+0x56>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where the UART
    * module information is being stored.
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->pt_uart->DATA = c_byte;
    aaae:	6c 93       	st	X, r22

   /*------------------------------------------------------------------------*
    * Release bus lock
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->b_txBusLocked = false;
    aab0:	13 86       	std	Z+11, r1	; 0x0b
    aab2:	80 e0       	ldi	r24, 0x00	; 0

   return UART_PASSED;

}/*End hal_uartWriteByte*/
    aab4:	23 96       	adiw	r28, 0x03	; 3
    aab6:	cd bf       	out	0x3d, r28	; 61
    aab8:	de bf       	out	0x3e, r29	; 62
    aaba:	cf 91       	pop	r28
    aabc:	df 91       	pop	r29
    aabe:	08 95       	ret

0000aac0 <hal_uartGetBaudRate>:
   return UART_PASSED;

}/*End hal_uartWriteBlock*/

int32_t hal_uartGetBaudRate( t_UARTHNDL t_handle)
{
    aac0:	df 93       	push	r29
    aac2:	cf 93       	push	r28
    aac4:	00 d0       	rcall	.+0      	; 0xaac6 <hal_uartGetBaudRate+0x6>
    aac6:	cd b7       	in	r28, 0x3d	; 61
    aac8:	de b7       	in	r29, 0x3e	; 62
    aaca:	8a 83       	std	Y+2, r24	; 0x02
    aacc:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    aace:	8f b7       	in	r24, 0x3f	; 63
    aad0:	89 83       	std	Y+1, r24	; 0x01
    aad2:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    aad4:	ea 81       	ldd	r30, Y+2	; 0x02
    aad6:	fb 81       	ldd	r31, Y+3	; 0x03
    aad8:	20 91 0c 21 	lds	r18, 0x210C
    aadc:	30 91 0d 21 	lds	r19, 0x210D
    aae0:	84 81       	ldd	r24, Z+4	; 0x04
    aae2:	95 81       	ldd	r25, Z+5	; 0x05
    aae4:	82 17       	cp	r24, r18
    aae6:	93 07       	cpc	r25, r19
    aae8:	39 f0       	breq	.+14     	; 0xaaf8 <hal_uartGetBaudRate+0x38>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    aaea:	89 81       	ldd	r24, Y+1	; 0x01
    aaec:	8f bf       	out	0x3f, r24	; 63
    aaee:	2e ef       	ldi	r18, 0xFE	; 254
    aaf0:	3f ef       	ldi	r19, 0xFF	; 255
    aaf2:	4f ef       	ldi	r20, 0xFF	; 255
    aaf4:	5f ef       	ldi	r21, 0xFF	; 255
    aaf6:	0b c0       	rjmp	.+22     	; 0xab0e <hal_uartGetBaudRate+0x4e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    aaf8:	ea 81       	ldd	r30, Y+2	; 0x02
    aafa:	fb 81       	ldd	r31, Y+3	; 0x03
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);
   }

   HAL_END_CRITICAL();//Enable interrupts
    aafc:	89 81       	ldd	r24, Y+1	; 0x01
    aafe:	8f bf       	out	0x3f, r24	; 63

   return (int32_t)pt_uartChanHndl->i_baudRate;
    ab00:	01 90       	ld	r0, Z+
    ab02:	f0 81       	ld	r31, Z
    ab04:	e0 2d       	mov	r30, r0
    ab06:	21 81       	ldd	r18, Z+1	; 0x01
    ab08:	32 81       	ldd	r19, Z+2	; 0x02
    ab0a:	43 81       	ldd	r20, Z+3	; 0x03
    ab0c:	54 81       	ldd	r21, Z+4	; 0x04

}/*End hal_uartGetBaudRate*/
    ab0e:	b9 01       	movw	r22, r18
    ab10:	ca 01       	movw	r24, r20
    ab12:	23 96       	adiw	r28, 0x03	; 3
    ab14:	cd bf       	out	0x3d, r28	; 61
    ab16:	de bf       	out	0x3e, r29	; 62
    ab18:	cf 91       	pop	r28
    ab1a:	df 91       	pop	r29
    ab1c:	08 95       	ret

0000ab1e <hal_configureUartChannel>:

}/*End hal_releaseUartChannel*/

t_uartError hal_configureUartChannel( t_UARTHNDL t_handle,
                                      t_uartConfig t_conf)
{
    ab1e:	2f 92       	push	r2
    ab20:	3f 92       	push	r3
    ab22:	4f 92       	push	r4
    ab24:	5f 92       	push	r5
    ab26:	6f 92       	push	r6
    ab28:	7f 92       	push	r7
    ab2a:	8f 92       	push	r8
    ab2c:	9f 92       	push	r9
    ab2e:	af 92       	push	r10
    ab30:	bf 92       	push	r11
    ab32:	cf 92       	push	r12
    ab34:	df 92       	push	r13
    ab36:	ef 92       	push	r14
    ab38:	ff 92       	push	r15
    ab3a:	0f 93       	push	r16
    ab3c:	1f 93       	push	r17
    ab3e:	df 93       	push	r29
    ab40:	cf 93       	push	r28
    ab42:	cd b7       	in	r28, 0x3d	; 61
    ab44:	de b7       	in	r29, 0x3e	; 62
    ab46:	6a 97       	sbiw	r28, 0x1a	; 26
    ab48:	cd bf       	out	0x3d, r28	; 61
    ab4a:	de bf       	out	0x3e, r29	; 62
    ab4c:	8a 83       	std	Y+2, r24	; 0x02
    ab4e:	9b 83       	std	Y+3, r25	; 0x03
    ab50:	ac 82       	std	Y+4, r10	; 0x04
    ab52:	bd 82       	std	Y+5, r11	; 0x05
    ab54:	ce 82       	std	Y+6, r12	; 0x06
    ab56:	df 82       	std	Y+7, r13	; 0x07
    ab58:	e8 86       	std	Y+8, r14	; 0x08
    ab5a:	f9 86       	std	Y+9, r15	; 0x09
    ab5c:	0a 87       	std	Y+10, r16	; 0x0a
    ab5e:	1b 87       	std	Y+11, r17	; 0x0b
    ab60:	e2 2f       	mov	r30, r18
    ab62:	2c 87       	std	Y+12, r18	; 0x0c
    ab64:	83 2f       	mov	r24, r19
    ab66:	3d 87       	std	Y+13, r19	; 0x0d
    ab68:	4e 87       	std	Y+14, r20	; 0x0e
    ab6a:	5f 87       	std	Y+15, r21	; 0x0f
    ab6c:	68 8b       	std	Y+16, r22	; 0x10
    ab6e:	79 8b       	std	Y+17, r23	; 0x11
    ab70:	1c 2d       	mov	r17, r12
    ab72:	fb 2c       	mov	r15, r11
    ab74:	0d 2d       	mov	r16, r13
    ab76:	28 85       	ldd	r18, Y+8	; 0x08
    ab78:	39 85       	ldd	r19, Y+9	; 0x09
    ab7a:	4a 85       	ldd	r20, Y+10	; 0x0a
    ab7c:	5b 85       	ldd	r21, Y+11	; 0x0b
    ab7e:	2f 8b       	std	Y+23, r18	; 0x17
    ab80:	38 8f       	std	Y+24, r19	; 0x18
    ab82:	49 8f       	std	Y+25, r20	; 0x19
    ab84:	5a 8f       	std	Y+26, r21	; 0x1a
    ab86:	68 2e       	mov	r6, r24
    ab88:	ee 8b       	std	Y+22, r30	; 0x16
    ab8a:	4e 85       	ldd	r20, Y+14	; 0x0e
    ab8c:	5f 85       	ldd	r21, Y+15	; 0x0f
    ab8e:	4c 8b       	std	Y+20, r20	; 0x14
    ab90:	5d 8b       	std	Y+21, r21	; 0x15
    ab92:	a8 89       	ldd	r26, Y+16	; 0x10
    ab94:	b9 89       	ldd	r27, Y+17	; 0x11
    ab96:	aa 8b       	std	Y+18, r26	; 0x12
    ab98:	bb 8b       	std	Y+19, r27	; 0x13

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ab9a:	8f b7       	in	r24, 0x3f	; 63
    ab9c:	89 83       	std	Y+1, r24	; 0x01
    ab9e:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * At this time only async mode is supported!
    *------------------------------------------------------------------------*/
   if( t_conf.t_comMd != ASYNC)
    aba0:	aa 20       	and	r10, r10
    aba2:	21 f0       	breq	.+8      	; 0xabac <hal_configureUartChannel+0x8e>
   {
      HAL_END_CRITICAL();//Enable interrupts
    aba4:	89 81       	ldd	r24, Y+1	; 0x01
    aba6:	8f bf       	out	0x3f, r24	; 63
    aba8:	88 ef       	ldi	r24, 0xF8	; 248
    abaa:	58 c2       	rjmp	.+1200   	; 0xb05c <hal_configureUartChannel+0x53e>
      return UART_INVALID_COM_MODE;
   }/*End if( t_conf.t_comMd != ASYNC)*/

   if( (t_conf.t_parityMd < NO_PARITY) || (t_conf.t_parityMd > ODD_PARITY))
    abac:	13 30       	cpi	r17, 0x03	; 3
    abae:	20 f0       	brcs	.+8      	; 0xabb8 <hal_configureUartChannel+0x9a>
   {
      HAL_END_CRITICAL();//Enable interrupts
    abb0:	89 81       	ldd	r24, Y+1	; 0x01
    abb2:	8f bf       	out	0x3f, r24	; 63
    abb4:	86 ef       	ldi	r24, 0xF6	; 246
    abb6:	52 c2       	rjmp	.+1188   	; 0xb05c <hal_configureUartChannel+0x53e>
      return UART_INVALID_PARITY_MODE;
   }/*End if( (t_conf.t_parityMd < NO_PARITY) || (t_conf.t_parityMd >
   ODD_PARITY))*/

   if( (t_conf.t_charSz < CHAR_5BIT) || (t_conf.t_charSz > CHAR_8BIT))
    abb8:	b3 e0       	ldi	r27, 0x03	; 3
    abba:	bb 15       	cp	r27, r11
    abbc:	20 f4       	brcc	.+8      	; 0xabc6 <hal_configureUartChannel+0xa8>
   {
      HAL_END_CRITICAL();//Enable interrupts
    abbe:	89 81       	ldd	r24, Y+1	; 0x01
    abc0:	8f bf       	out	0x3f, r24	; 63
    abc2:	87 ef       	ldi	r24, 0xF7	; 247
    abc4:	4b c2       	rjmp	.+1174   	; 0xb05c <hal_configureUartChannel+0x53e>
      return UART_INVALID_CHAR_SIZE;
   }/*End if( (t_conf.t_charSz < CHAR_5BIT) || (t_conf.t_charSz > CHAR_8BIT))*/

   if( (t_conf.t_stopBitMd < ONE_STOP_BIT) || (t_conf.t_stopBitMd >
    abc6:	02 30       	cpi	r16, 0x02	; 2
    abc8:	20 f0       	brcs	.+8      	; 0xabd2 <hal_configureUartChannel+0xb4>
   TWO_STOP_BITS))
   {
      HAL_END_CRITICAL();//Enable interrupts
    abca:	89 81       	ldd	r24, Y+1	; 0x01
    abcc:	8f bf       	out	0x3f, r24	; 63
    abce:	85 ef       	ldi	r24, 0xF5	; 245
    abd0:	45 c2       	rjmp	.+1162   	; 0xb05c <hal_configureUartChannel+0x53e>
      return UART_INVALID_STOPBIT_MODE;
   }/*End if( (t_conf.t_stopBitMd < ONE_STOP_BIT) || (t_conf.t_stopBitMd >
   TWO_STOP_BITS))*/

   if( ((float)t_conf.i_baudRate < ((float)hal_getCpuFreq() / 8388608.0f)) ||
    abd2:	6f 89       	ldd	r22, Y+23	; 0x17
    abd4:	78 8d       	ldd	r23, Y+24	; 0x18
    abd6:	89 8d       	ldd	r24, Y+25	; 0x19
    abd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    abda:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    abde:	1b 01       	movw	r2, r22
    abe0:	2c 01       	movw	r4, r24
    abe2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    abe6:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    abea:	20 e0       	ldi	r18, 0x00	; 0
    abec:	30 e0       	ldi	r19, 0x00	; 0
    abee:	40 e0       	ldi	r20, 0x00	; 0
    abf0:	54 e3       	ldi	r21, 0x34	; 52
    abf2:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    abf6:	9b 01       	movw	r18, r22
    abf8:	ac 01       	movw	r20, r24
    abfa:	c2 01       	movw	r24, r4
    abfc:	b1 01       	movw	r22, r2
    abfe:	0e 94 da af 	call	0x15fb4	; 0x15fb4 <__cmpsf2>
    ac02:	87 fd       	sbrc	r24, 7
    ac04:	12 c0       	rjmp	.+36     	; 0xac2a <hal_configureUartChannel+0x10c>
    ac06:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    ac0a:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    ac0e:	20 e0       	ldi	r18, 0x00	; 0
    ac10:	30 e0       	ldi	r19, 0x00	; 0
    ac12:	40 e8       	ldi	r20, 0x80	; 128
    ac14:	5d e3       	ldi	r21, 0x3D	; 61
    ac16:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    ac1a:	9b 01       	movw	r18, r22
    ac1c:	ac 01       	movw	r20, r24
    ac1e:	c2 01       	movw	r24, r4
    ac20:	b1 01       	movw	r22, r2
    ac22:	0e 94 b1 b1 	call	0x16362	; 0x16362 <__gesf2>
    ac26:	18 16       	cp	r1, r24
    ac28:	24 f4       	brge	.+8      	; 0xac32 <hal_configureUartChannel+0x114>
   ((float)t_conf.i_baudRate > ((float)hal_getCpuFreq() / 16.0f)))
   {
      HAL_END_CRITICAL();//Enable interrupts
    ac2a:	89 81       	ldd	r24, Y+1	; 0x01
    ac2c:	8f bf       	out	0x3f, r24	; 63
    ac2e:	84 ef       	ldi	r24, 0xF4	; 244
    ac30:	15 c2       	rjmp	.+1066   	; 0xb05c <hal_configureUartChannel+0x53e>
   }

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    ac32:	ea 81       	ldd	r30, Y+2	; 0x02
    ac34:	fb 81       	ldd	r31, Y+3	; 0x03
    ac36:	20 91 0c 21 	lds	r18, 0x210C
    ac3a:	30 91 0d 21 	lds	r19, 0x210D
    ac3e:	84 81       	ldd	r24, Z+4	; 0x04
    ac40:	95 81       	ldd	r25, Z+5	; 0x05
    ac42:	82 17       	cp	r24, r18
    ac44:	93 07       	cpc	r25, r19
    ac46:	21 f0       	breq	.+8      	; 0xac50 <hal_configureUartChannel+0x132>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    ac48:	89 81       	ldd	r24, Y+1	; 0x01
    ac4a:	8f bf       	out	0x3f, r24	; 63
    ac4c:	8e ef       	ldi	r24, 0xFE	; 254
    ac4e:	06 c2       	rjmp	.+1036   	; 0xb05c <hal_configureUartChannel+0x53e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    ac50:	ea 81       	ldd	r30, Y+2	; 0x02
    ac52:	fb 81       	ldd	r31, Y+3	; 0x03
    ac54:	80 80       	ld	r8, Z
    ac56:	91 80       	ldd	r9, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      /*---------------------------------------------------------------------*
       * Disable all UART interrupts for this channel
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    ac58:	d4 01       	movw	r26, r8
    ac5a:	19 96       	adiw	r26, 0x09	; 9
    ac5c:	ed 91       	ld	r30, X+
    ac5e:	fc 91       	ld	r31, X
    ac60:	1a 97       	sbiw	r26, 0x0a	; 10
    ac62:	83 81       	ldd	r24, Z+3	; 0x03
    ac64:	8f 7c       	andi	r24, 0xCF	; 207
    ac66:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    ac68:	83 81       	ldd	r24, Z+3	; 0x03
    ac6a:	8c 7f       	andi	r24, 0xFC	; 252
    ac6c:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    ac6e:	83 81       	ldd	r24, Z+3	; 0x03
    ac70:	83 7f       	andi	r24, 0xF3	; 243
    ac72:	83 83       	std	Z+3, r24	; 0x03

      /*---------------------------------------------------------------------*
       * Disable RX and TX UARTS.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_RXEN_bm;
    ac74:	84 81       	ldd	r24, Z+4	; 0x04
    ac76:	8f 7e       	andi	r24, 0xEF	; 239
    ac78:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_TXEN_bm;
    ac7a:	84 81       	ldd	r24, Z+4	; 0x04
    ac7c:	87 7f       	andi	r24, 0xF7	; 247
    ac7e:	84 83       	std	Z+4, r24	; 0x04

      /*---------------------------------------------------------------------*
       * Reset and configure the UART mode.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CMODE_gm;
    ac80:	85 81       	ldd	r24, Z+5	; 0x05
    ac82:	8f 73       	andi	r24, 0x3F	; 63
    ac84:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= (t_conf.t_comMd << 6);
    ac86:	85 81       	ldd	r24, Z+5	; 0x05
    ac88:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the parity mode.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_PMODE_gm;
    ac8a:	85 81       	ldd	r24, Z+5	; 0x05
    ac8c:	8f 7c       	andi	r24, 0xCF	; 207
    ac8e:	85 83       	std	Z+5, r24	; 0x05

      switch( t_conf.t_parityMd)
    ac90:	11 30       	cpi	r17, 0x01	; 1
    ac92:	39 f0       	breq	.+14     	; 0xaca2 <hal_configureUartChannel+0x184>
    ac94:	11 30       	cpi	r17, 0x01	; 1
    ac96:	18 f0       	brcs	.+6      	; 0xac9e <hal_configureUartChannel+0x180>
    ac98:	12 30       	cpi	r17, 0x02	; 2
    ac9a:	49 f4       	brne	.+18     	; 0xacae <hal_configureUartChannel+0x190>
    ac9c:	05 c0       	rjmp	.+10     	; 0xaca8 <hal_configureUartChannel+0x18a>
      {
         case NO_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_DISABLED_gc;
    ac9e:	85 81       	ldd	r24, Z+5	; 0x05
    aca0:	05 c0       	rjmp	.+10     	; 0xacac <hal_configureUartChannel+0x18e>
         break;

         case EVEN_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_EVEN_gc;
    aca2:	85 81       	ldd	r24, Z+5	; 0x05
    aca4:	80 62       	ori	r24, 0x20	; 32
    aca6:	02 c0       	rjmp	.+4      	; 0xacac <hal_configureUartChannel+0x18e>
         break;

         case ODD_PARITY:
            pt_uartChanHndl->pt_uart->CTRLC |= USART_PMODE_ODD_gc;
    aca8:	85 81       	ldd	r24, Z+5	; 0x05
    acaa:	80 63       	ori	r24, 0x30	; 48
    acac:	85 83       	std	Z+5, r24	; 0x05
      }/*End switch( t_conf.t_parityMd)*/

      /*---------------------------------------------------------------------*
       * Reset and configure the character size.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CHSIZE_gm;
    acae:	85 81       	ldd	r24, Z+5	; 0x05
    acb0:	88 7f       	andi	r24, 0xF8	; 248
    acb2:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= t_conf.t_charSz;
    acb4:	85 81       	ldd	r24, Z+5	; 0x05
    acb6:	8f 29       	or	r24, r15
    acb8:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the number of stop bits.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_SBMODE_bm;
    acba:	85 81       	ldd	r24, Z+5	; 0x05
    acbc:	87 7f       	andi	r24, 0xF7	; 247
    acbe:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC |= (t_conf.t_stopBitMd << 3);
    acc0:	85 81       	ldd	r24, Z+5	; 0x05
    acc2:	00 0f       	add	r16, r16
    acc4:	00 0f       	add	r16, r16
    acc6:	00 0f       	add	r16, r16
    acc8:	80 2b       	or	r24, r16
    acca:	85 83       	std	Z+5, r24	; 0x05

      /*---------------------------------------------------------------------*
       * Reset and configure the baud rate
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->BAUDCTRLA &= ~USART_BSEL_gm;
    accc:	86 81       	ldd	r24, Z+6	; 0x06
    acce:	16 82       	std	Z+6, r1	; 0x06
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~0x0F; /*BSEL in control B reg*/
    acd0:	87 81       	ldd	r24, Z+7	; 0x07
    acd2:	80 7f       	andi	r24, 0xF0	; 240
    acd4:	87 83       	std	Z+7, r24	; 0x07
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~USART_BSCALE_gm;
    acd6:	87 81       	ldd	r24, Z+7	; 0x07
    acd8:	8f 70       	andi	r24, 0x0F	; 15
    acda:	87 83       	std	Z+7, r24	; 0x07
       * value of BSEL and the final value BSCALE are loaded into the baud
       * rate registers and the overall error in the baud rate is minimized.
       *---------------------------------------------------------------------*/

      /*Using part 2 of equation 1*/
      f_bselPlus1 = ((float)hal_getCpuFreq() /
    acdc:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    ace0:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    ace4:	7b 01       	movw	r14, r22
    ace6:	8c 01       	movw	r16, r24
    ace8:	c2 01       	movw	r24, r4
    acea:	b1 01       	movw	r22, r2
    acec:	20 e0       	ldi	r18, 0x00	; 0
    acee:	30 e0       	ldi	r19, 0x00	; 0
    acf0:	40 e8       	ldi	r20, 0x80	; 128
    acf2:	51 e4       	ldi	r21, 0x41	; 65
    acf4:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    acf8:	9b 01       	movw	r18, r22
    acfa:	ac 01       	movw	r20, r24
    acfc:	c8 01       	movw	r24, r16
    acfe:	b7 01       	movw	r22, r14
    ad00:	0e 94 de af 	call	0x15fbc	; 0x15fbc <__divsf3>
    ad04:	5b 01       	movw	r10, r22
    ad06:	6c 01       	movw	r12, r24
      ((float)t_conf.i_baudRate*16.0f));

      if( (f_bselPlus1 - 1.0f) >= (float)BSEL_MAX_RANGE) /* Too high need to
    ad08:	20 e0       	ldi	r18, 0x00	; 0
    ad0a:	30 e0       	ldi	r19, 0x00	; 0
    ad0c:	40 e8       	ldi	r20, 0x80	; 128
    ad0e:	5f e3       	ldi	r21, 0x3F	; 63
    ad10:	0e 94 75 af 	call	0x15eea	; 0x15eea <__subsf3>
    ad14:	7b 01       	movw	r14, r22
    ad16:	8c 01       	movw	r16, r24
    ad18:	20 e0       	ldi	r18, 0x00	; 0
    ad1a:	30 ef       	ldi	r19, 0xF0	; 240
    ad1c:	4f e7       	ldi	r20, 0x7F	; 127
    ad1e:	55 e4       	ldi	r21, 0x45	; 69
    ad20:	0e 94 b1 b1 	call	0x16362	; 0x16362 <__gesf2>
    ad24:	88 23       	and	r24, r24
    ad26:	1c f1       	brlt	.+70     	; 0xad6e <hal_configureUartChannel+0x250>
    ad28:	77 24       	eor	r7, r7
    ad2a:	0e c0       	rjmp	.+28     	; 0xad48 <hal_configureUartChannel+0x22a>
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 > (float)BSEL_MAX_RANGE)
         {
            f_bselPlus1 = f_bselPlus1 / 2.0f;
    ad2c:	c6 01       	movw	r24, r12
    ad2e:	b5 01       	movw	r22, r10
    ad30:	20 e0       	ldi	r18, 0x00	; 0
    ad32:	30 e0       	ldi	r19, 0x00	; 0
    ad34:	40 e0       	ldi	r20, 0x00	; 0
    ad36:	5f e3       	ldi	r21, 0x3F	; 63
    ad38:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    ad3c:	5b 01       	movw	r10, r22
    ad3e:	6c 01       	movw	r12, r24
            c_bscale++;
    ad40:	73 94       	inc	r7
            if( c_bscale == 7)
    ad42:	b7 e0       	ldi	r27, 0x07	; 7
    ad44:	7b 16       	cp	r7, r27
    ad46:	51 f0       	breq	.+20     	; 0xad5c <hal_configureUartChannel+0x23e>
                                                            BSCALE*/
      {
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 > (float)BSEL_MAX_RANGE)
    ad48:	c6 01       	movw	r24, r12
    ad4a:	b5 01       	movw	r22, r10
    ad4c:	20 e0       	ldi	r18, 0x00	; 0
    ad4e:	30 ef       	ldi	r19, 0xF0	; 240
    ad50:	4f e7       	ldi	r20, 0x7F	; 127
    ad52:	55 e4       	ldi	r21, 0x45	; 69
    ad54:	0e 94 b1 b1 	call	0x16362	; 0x16362 <__gesf2>
    ad58:	18 16       	cp	r1, r24
    ad5a:	44 f3       	brlt	.-48     	; 0xad2c <hal_configureUartChannel+0x20e>
            c_bscale++;
            if( c_bscale == 7)
               break;
         }

         s_bsel = (uint16_t)(f_bselPlus1 - 1.0f);
    ad5c:	c6 01       	movw	r24, r12
    ad5e:	b5 01       	movw	r22, r10
    ad60:	20 e0       	ldi	r18, 0x00	; 0
    ad62:	30 e0       	ldi	r19, 0x00	; 0
    ad64:	40 e8       	ldi	r20, 0x80	; 128
    ad66:	5f e3       	ldi	r21, 0x3F	; 63
    ad68:	0e 94 75 af 	call	0x15eea	; 0x15eea <__subsf3>
    ad6c:	38 c0       	rjmp	.+112    	; 0xadde <hal_configureUartChannel+0x2c0>

      }/*End if( (f_bselPlus1 - 1.0f) >= BSEL_MAX_RANGE)*/
      else if( (f_bselPlus1 - 1.0f) < (float)BSEL_MAX_RANGE) /* Lower than
    ad6e:	c8 01       	movw	r24, r16
    ad70:	b7 01       	movw	r22, r14
    ad72:	20 e0       	ldi	r18, 0x00	; 0
    ad74:	30 ef       	ldi	r19, 0xF0	; 240
    ad76:	4f e7       	ldi	r20, 0x7F	; 127
    ad78:	55 e4       	ldi	r21, 0x45	; 69
    ad7a:	0e 94 da af 	call	0x15fb4	; 0x15fb4 <__cmpsf2>
    ad7e:	88 23       	and	r24, r24
    ad80:	0c f0       	brlt	.+2      	; 0xad84 <hal_configureUartChannel+0x266>
    ad82:	50 c0       	rjmp	.+160    	; 0xae24 <hal_configureUartChannel+0x306>
    ad84:	dd 24       	eor	r13, r13
         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 < (float)BSEL_MAX_RANGE)
         {
            f_bselPlus1 = f_bselPlus1*2.0f;
    ad86:	c8 01       	movw	r24, r16
    ad88:	b7 01       	movw	r22, r14
    ad8a:	a8 01       	movw	r20, r16
    ad8c:	97 01       	movw	r18, r14
    ad8e:	0e 94 76 af 	call	0x15eec	; 0x15eec <__addsf3>
    ad92:	7b 01       	movw	r14, r22
    ad94:	8c 01       	movw	r16, r24
            c_bscale--;
    ad96:	da 94       	dec	r13
            if( c_bscale == -7)
    ad98:	e9 ef       	ldi	r30, 0xF9	; 249
    ad9a:	de 16       	cp	r13, r30
    ad9c:	41 f0       	breq	.+16     	; 0xadae <hal_configureUartChannel+0x290>
         f_bselPlus1 = f_bselPlus1 - 1.0f;

         /*------------------------------------------------------------------*
          * Find the number of powers-of-2 'f_bselPlus1' is above 4095
          *------------------------------------------------------------------*/
         while( f_bselPlus1 < (float)BSEL_MAX_RANGE)
    ad9e:	20 e0       	ldi	r18, 0x00	; 0
    ada0:	30 ef       	ldi	r19, 0xF0	; 240
    ada2:	4f e7       	ldi	r20, 0x7F	; 127
    ada4:	55 e4       	ldi	r21, 0x45	; 69
    ada6:	0e 94 da af 	call	0x15fb4	; 0x15fb4 <__cmpsf2>
    adaa:	87 fd       	sbrc	r24, 7
    adac:	ec cf       	rjmp	.-40     	; 0xad86 <hal_configureUartChannel+0x268>
    adae:	7d 2c       	mov	r7, r13
            c_bscale--;
            if( c_bscale == -7)
               break;
         }

         if( f_bselPlus1 > (float)BSEL_MAX_RANGE)
    adb0:	c8 01       	movw	r24, r16
    adb2:	b7 01       	movw	r22, r14
    adb4:	20 e0       	ldi	r18, 0x00	; 0
    adb6:	30 ef       	ldi	r19, 0xF0	; 240
    adb8:	4f e7       	ldi	r20, 0x7F	; 127
    adba:	55 e4       	ldi	r21, 0x45	; 69
    adbc:	0e 94 b1 b1 	call	0x16362	; 0x16362 <__gesf2>
    adc0:	18 16       	cp	r1, r24
    adc2:	5c f4       	brge	.+22     	; 0xadda <hal_configureUartChannel+0x2bc>
         {
            /*One step too far*/
            f_bselPlus1 /= 2.0;
    adc4:	c8 01       	movw	r24, r16
    adc6:	b7 01       	movw	r22, r14
    adc8:	20 e0       	ldi	r18, 0x00	; 0
    adca:	30 e0       	ldi	r19, 0x00	; 0
    adcc:	40 e0       	ldi	r20, 0x00	; 0
    adce:	5f e3       	ldi	r21, 0x3F	; 63
    add0:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    add4:	7b 01       	movw	r14, r22
    add6:	8c 01       	movw	r16, r24
            c_bscale++;
    add8:	73 94       	inc	r7
         }

         s_bsel = (uint16_t)f_bselPlus1;
    adda:	c8 01       	movw	r24, r16
    addc:	b7 01       	movw	r22, r14
    adde:	0e 94 85 b0 	call	0x1610a	; 0x1610a <__fixunssfsi>
    ade2:	6b 01       	movw	r12, r22
      }/*End else if( (f_bselPlus1 - 1.0f) < (float)BSEL_MAX_RANGE)*/

      /*---------------------------------------------------------------------*
       * Calculate the baud rate error
       *---------------------------------------------------------------------*/
      if( c_bscale > 0)
    ade4:	17 14       	cp	r1, r7
    ade6:	0c f5       	brge	.+66     	; 0xae2a <hal_configureUartChannel+0x30c>
      {
          i_baud = hal_getCpuFreq() / ((uint32_t)16*((uint32_t)1 << c_bscale)*
    ade8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    adec:	7b 01       	movw	r14, r22
    adee:	8c 01       	movw	r16, r24
    adf0:	b6 01       	movw	r22, r12
    adf2:	80 e0       	ldi	r24, 0x00	; 0
    adf4:	90 e0       	ldi	r25, 0x00	; 0
    adf6:	6f 5f       	subi	r22, 0xFF	; 255
    adf8:	7f 4f       	sbci	r23, 0xFF	; 255
    adfa:	8f 4f       	sbci	r24, 0xFF	; 255
    adfc:	9f 4f       	sbci	r25, 0xFF	; 255
    adfe:	20 e1       	ldi	r18, 0x10	; 16
    ae00:	30 e0       	ldi	r19, 0x00	; 0
    ae02:	40 e0       	ldi	r20, 0x00	; 0
    ae04:	50 e0       	ldi	r21, 0x00	; 0
    ae06:	07 2c       	mov	r0, r7
    ae08:	04 c0       	rjmp	.+8      	; 0xae12 <hal_configureUartChannel+0x2f4>
    ae0a:	22 0f       	add	r18, r18
    ae0c:	33 1f       	adc	r19, r19
    ae0e:	44 1f       	adc	r20, r20
    ae10:	55 1f       	adc	r21, r21
    ae12:	0a 94       	dec	r0
    ae14:	d2 f7       	brpl	.-12     	; 0xae0a <hal_configureUartChannel+0x2ec>
    ae16:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
    ae1a:	9b 01       	movw	r18, r22
    ae1c:	ac 01       	movw	r20, r24
    ae1e:	c8 01       	movw	r24, r16
    ae20:	b7 01       	movw	r22, r14
    ae22:	21 c0       	rjmp	.+66     	; 0xae66 <hal_configureUartChannel+0x348>
    ae24:	cc 24       	eor	r12, r12
    ae26:	dd 24       	eor	r13, r13
    ae28:	77 24       	eor	r7, r7
          ((uint32_t)s_bsel + 1));
      }
      else
      {
          i_baud = ((uint32_t)hal_getCpuFreq()) / ((((uint32_t)16*
    ae2a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
    ae2e:	96 01       	movw	r18, r12
    ae30:	40 e0       	ldi	r20, 0x00	; 0
    ae32:	50 e0       	ldi	r21, 0x00	; 0
    ae34:	f4 e0       	ldi	r31, 0x04	; 4
    ae36:	22 0f       	add	r18, r18
    ae38:	33 1f       	adc	r19, r19
    ae3a:	44 1f       	adc	r20, r20
    ae3c:	55 1f       	adc	r21, r21
    ae3e:	fa 95       	dec	r31
    ae40:	d1 f7       	brne	.-12     	; 0xae36 <hal_configureUartChannel+0x318>
    ae42:	e7 2d       	mov	r30, r7
    ae44:	ff 27       	eor	r31, r31
    ae46:	e7 fd       	sbrc	r30, 7
    ae48:	f0 95       	com	r31
    ae4a:	f0 95       	com	r31
    ae4c:	e1 95       	neg	r30
    ae4e:	ff 4f       	sbci	r31, 0xFF	; 255
    ae50:	04 c0       	rjmp	.+8      	; 0xae5a <hal_configureUartChannel+0x33c>
    ae52:	56 95       	lsr	r21
    ae54:	47 95       	ror	r20
    ae56:	37 95       	ror	r19
    ae58:	27 95       	ror	r18
    ae5a:	ea 95       	dec	r30
    ae5c:	d2 f7       	brpl	.-12     	; 0xae52 <hal_configureUartChannel+0x334>
    ae5e:	20 5f       	subi	r18, 0xF0	; 240
    ae60:	3f 4f       	sbci	r19, 0xFF	; 255
    ae62:	4f 4f       	sbci	r20, 0xFF	; 255
    ae64:	5f 4f       	sbci	r21, 0xFF	; 255
    ae66:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
    ae6a:	c9 01       	movw	r24, r18
    ae6c:	da 01       	movw	r26, r20
    ae6e:	bc 01       	movw	r22, r24
    ae70:	cd 01       	movw	r24, r26
          (uint32_t)s_bsel) / ((uint32_t)1 << -c_bscale)) + 16);
      }

      pt_uartChanHndl->f_percentBaudError = (((float)i_baud -
    ae72:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
    ae76:	a2 01       	movw	r20, r4
    ae78:	91 01       	movw	r18, r2
    ae7a:	0e 94 75 af 	call	0x15eea	; 0x15eea <__subsf3>
    ae7e:	a2 01       	movw	r20, r4
    ae80:	91 01       	movw	r18, r2
    ae82:	0e 94 de af 	call	0x15fbc	; 0x15fbc <__divsf3>
    ae86:	20 e0       	ldi	r18, 0x00	; 0
    ae88:	30 e0       	ldi	r19, 0x00	; 0
    ae8a:	48 ec       	ldi	r20, 0xC8	; 200
    ae8c:	52 e4       	ldi	r21, 0x42	; 66
    ae8e:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
    ae92:	d4 01       	movw	r26, r8
    ae94:	15 96       	adiw	r26, 0x05	; 5
    ae96:	6d 93       	st	X+, r22
    ae98:	7d 93       	st	X+, r23
    ae9a:	8d 93       	st	X+, r24
    ae9c:	9c 93       	st	X, r25
    ae9e:	18 97       	sbiw	r26, 0x08	; 8
      (float)t_conf.i_baudRate) / ((float)t_conf.i_baudRate))*100.0f;

      switch( pt_uartChanHndl->t_id)
    aea0:	8c 91       	ld	r24, X
    aea2:	89 30       	cpi	r24, 0x09	; 9
    aea4:	79 f1       	breq	.+94     	; 0xaf04 <hal_configureUartChannel+0x3e6>
    aea6:	8a 30       	cpi	r24, 0x0A	; 10
    aea8:	38 f4       	brcc	.+14     	; 0xaeb8 <hal_configureUartChannel+0x39a>
    aeaa:	83 30       	cpi	r24, 0x03	; 3
    aeac:	e9 f0       	breq	.+58     	; 0xaee8 <hal_configureUartChannel+0x3ca>
    aeae:	86 30       	cpi	r24, 0x06	; 6
    aeb0:	11 f1       	breq	.+68     	; 0xaef6 <hal_configureUartChannel+0x3d8>
    aeb2:	88 23       	and	r24, r24
    aeb4:	69 f0       	breq	.+26     	; 0xaed0 <hal_configureUartChannel+0x3b2>
    aeb6:	13 c0       	rjmp	.+38     	; 0xaede <hal_configureUartChannel+0x3c0>
    aeb8:	8f 30       	cpi	r24, 0x0F	; 15
    aeba:	91 f1       	breq	.+100    	; 0xaf20 <hal_configureUartChannel+0x402>
    aebc:	80 31       	cpi	r24, 0x10	; 16
    aebe:	18 f4       	brcc	.+6      	; 0xaec6 <hal_configureUartChannel+0x3a8>
    aec0:	8c 30       	cpi	r24, 0x0C	; 12
    aec2:	69 f4       	brne	.+26     	; 0xaede <hal_configureUartChannel+0x3c0>
    aec4:	26 c0       	rjmp	.+76     	; 0xaf12 <hal_configureUartChannel+0x3f4>
    aec6:	82 31       	cpi	r24, 0x12	; 18
    aec8:	91 f1       	breq	.+100    	; 0xaf2e <hal_configureUartChannel+0x410>
    aeca:	85 31       	cpi	r24, 0x15	; 21
    aecc:	41 f4       	brne	.+16     	; 0xaede <hal_configureUartChannel+0x3c0>
    aece:	36 c0       	rjmp	.+108    	; 0xaf3c <hal_configureUartChannel+0x41e>
    aed0:	04 ea       	ldi	r16, 0xA4	; 164
    aed2:	18 e5       	ldi	r17, 0x58	; 88
    aed4:	ee e6       	ldi	r30, 0x6E	; 110
    aed6:	ee 2e       	mov	r14, r30
    aed8:	e0 e5       	ldi	r30, 0x50	; 80
    aeda:	fe 2e       	mov	r15, r30
    aedc:	35 c0       	rjmp	.+106    	; 0xaf48 <hal_configureUartChannel+0x42a>
    aede:	00 e0       	ldi	r16, 0x00	; 0
    aee0:	10 e0       	ldi	r17, 0x00	; 0
    aee2:	ee 24       	eor	r14, r14
    aee4:	ff 24       	eor	r15, r15
    aee6:	30 c0       	rjmp	.+96     	; 0xaf48 <hal_configureUartChannel+0x42a>
    aee8:	0b e9       	ldi	r16, 0x9B	; 155
    aeea:	18 e5       	ldi	r17, 0x58	; 88
    aeec:	77 e8       	ldi	r23, 0x87	; 135
    aeee:	e7 2e       	mov	r14, r23
    aef0:	70 e5       	ldi	r23, 0x50	; 80
    aef2:	f7 2e       	mov	r15, r23
    aef4:	29 c0       	rjmp	.+82     	; 0xaf48 <hal_configureUartChannel+0x42a>
         break;

         case UART_2:
            pf_rxDmaCallback = &uart2RxDmaInt;
            pf_txDmaCallback = &uart2TxDmaInt;
         break;
    aef6:	02 e9       	ldi	r16, 0x92	; 146
    aef8:	18 e5       	ldi	r17, 0x58	; 88
    aefa:	60 ea       	ldi	r22, 0xA0	; 160
    aefc:	e6 2e       	mov	r14, r22
    aefe:	60 e5       	ldi	r22, 0x50	; 80
    af00:	f6 2e       	mov	r15, r22
    af02:	22 c0       	rjmp	.+68     	; 0xaf48 <hal_configureUartChannel+0x42a>

         case UART_3:
            pf_rxDmaCallback = &uart3RxDmaInt;
            pf_txDmaCallback = &uart3TxDmaInt;
         break;
    af04:	09 e8       	ldi	r16, 0x89	; 137
    af06:	18 e5       	ldi	r17, 0x58	; 88
    af08:	59 eb       	ldi	r21, 0xB9	; 185
    af0a:	e5 2e       	mov	r14, r21
    af0c:	50 e5       	ldi	r21, 0x50	; 80
    af0e:	f5 2e       	mov	r15, r21
    af10:	1b c0       	rjmp	.+54     	; 0xaf48 <hal_configureUartChannel+0x42a>

         case UART_4:
            pf_rxDmaCallback = &uart4RxDmaInt;
            pf_txDmaCallback = &uart4TxDmaInt;
         break;
    af12:	00 e8       	ldi	r16, 0x80	; 128
    af14:	18 e5       	ldi	r17, 0x58	; 88
    af16:	42 ed       	ldi	r20, 0xD2	; 210
    af18:	e4 2e       	mov	r14, r20
    af1a:	40 e5       	ldi	r20, 0x50	; 80
    af1c:	f4 2e       	mov	r15, r20
    af1e:	14 c0       	rjmp	.+40     	; 0xaf48 <hal_configureUartChannel+0x42a>

         case UART_5:
            pf_rxDmaCallback = &uart5RxDmaInt;
            pf_txDmaCallback = &uart5TxDmaInt;
         break;
    af20:	07 e7       	ldi	r16, 0x77	; 119
    af22:	18 e5       	ldi	r17, 0x58	; 88
    af24:	3b ee       	ldi	r19, 0xEB	; 235
    af26:	e3 2e       	mov	r14, r19
    af28:	30 e5       	ldi	r19, 0x50	; 80
    af2a:	f3 2e       	mov	r15, r19
    af2c:	0d c0       	rjmp	.+26     	; 0xaf48 <hal_configureUartChannel+0x42a>

         case UART_6:
            pf_rxDmaCallback = &uart6RxDmaInt;
            pf_txDmaCallback = &uart6TxDmaInt;
         break;
    af2e:	0e e6       	ldi	r16, 0x6E	; 110
    af30:	18 e5       	ldi	r17, 0x58	; 88
    af32:	24 e0       	ldi	r18, 0x04	; 4
    af34:	e2 2e       	mov	r14, r18
    af36:	21 e5       	ldi	r18, 0x51	; 81
    af38:	f2 2e       	mov	r15, r18
    af3a:	06 c0       	rjmp	.+12     	; 0xaf48 <hal_configureUartChannel+0x42a>

         case UART_7:
            pf_rxDmaCallback = &uart7RxDmaInt;
            pf_txDmaCallback = &uart7TxDmaInt;
         break;
    af3c:	05 e6       	ldi	r16, 0x65	; 101
    af3e:	18 e5       	ldi	r17, 0x58	; 88
    af40:	9d e1       	ldi	r25, 0x1D	; 29
    af42:	e9 2e       	mov	r14, r25
    af44:	91 e5       	ldi	r25, 0x51	; 81
    af46:	f9 2e       	mov	r15, r25
      }/*End switch( pt_uartChanHndl->t_id)*/

      /*---------------------------------------------------------------------*
       * Is DMA being used for tx or rx transactions?
       *---------------------------------------------------------------------*/
      if( t_conf.b_enRxDma == true)
    af48:	66 20       	and	r6, r6
    af4a:	b9 f0       	breq	.+46     	; 0xaf7a <hal_configureUartChannel+0x45c>
      {
         pt_uartChanHndl->t_rxDmaHndl = hal_requestDmaChannel();
    af4c:	0e 94 8f 23 	call	0x471e	; 0x471e <hal_requestDmaChannel>
    af50:	f4 01       	movw	r30, r8
    af52:	83 8f       	std	Z+27, r24	; 0x1b
    af54:	94 8f       	std	Z+28, r25	; 0x1c
         if( pt_uartChanHndl->t_rxDmaHndl  < 0)
    af56:	83 8d       	ldd	r24, Z+27	; 0x1b
    af58:	94 8d       	ldd	r25, Z+28	; 0x1c
    af5a:	97 ff       	sbrs	r25, 7
    af5c:	05 c0       	rjmp	.+10     	; 0xaf68 <hal_configureUartChannel+0x44a>
         {
            HAL_END_CRITICAL();//Enable interrupts
    af5e:	89 81       	ldd	r24, Y+1	; 0x01
    af60:	8f bf       	out	0x3f, r24	; 63
            if( pt_uartChanHndl->t_rxDmaHndl == DMA_NO_CHANNELS_OPEN)
    af62:	83 8d       	ldd	r24, Z+27	; 0x1b
    af64:	94 8d       	ldd	r25, Z+28	; 0x1c
    af66:	19 c0       	rjmp	.+50     	; 0xaf9a <hal_configureUartChannel+0x47c>
            else
               return UART_OUT_OF_HEAP;

         }/*End if( pt_uartChanHndl->t_rxDmaHndl  < 0)*/

         hal_requestDmaInterrupt( pt_uartChanHndl->t_rxDmaHndl,
    af68:	d4 01       	movw	r26, r8
    af6a:	5b 96       	adiw	r26, 0x1b	; 27
    af6c:	8d 91       	ld	r24, X+
    af6e:	9c 91       	ld	r25, X
    af70:	5c 97       	sbiw	r26, 0x1c	; 28
    af72:	60 e0       	ldi	r22, 0x00	; 0
    af74:	a8 01       	movw	r20, r16
    af76:	0e 94 39 24 	call	0x4872	; 0x4872 <hal_requestDmaInterrupt>
                                  DMA_TRANSFER_COMPLETE,
                                  pf_rxDmaCallback);

      }/*End if( t_conf.b_enRxDma == true)*/

      if( t_conf.b_enTxDma == true)
    af7a:	be 89       	ldd	r27, Y+22	; 0x16
    af7c:	bb 23       	and	r27, r27
    af7e:	d9 f0       	breq	.+54     	; 0xafb6 <hal_configureUartChannel+0x498>
      {
         pt_uartChanHndl->t_txDmaHndl = hal_requestDmaChannel();
    af80:	0e 94 8f 23 	call	0x471e	; 0x471e <hal_requestDmaChannel>
    af84:	f4 01       	movw	r30, r8
    af86:	81 8f       	std	Z+25, r24	; 0x19
    af88:	92 8f       	std	Z+26, r25	; 0x1a
         if( pt_uartChanHndl->t_txDmaHndl  < 0)
    af8a:	81 8d       	ldd	r24, Z+25	; 0x19
    af8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    af8e:	97 ff       	sbrs	r25, 7
    af90:	09 c0       	rjmp	.+18     	; 0xafa4 <hal_configureUartChannel+0x486>
         {

            HAL_END_CRITICAL();//Enable interrupts
    af92:	89 81       	ldd	r24, Y+1	; 0x01
    af94:	8f bf       	out	0x3f, r24	; 63
            if( pt_uartChanHndl->t_txDmaHndl == DMA_NO_CHANNELS_OPEN)
    af96:	81 8d       	ldd	r24, Z+25	; 0x19
    af98:	92 8d       	ldd	r25, Z+26	; 0x1a
    af9a:	89 5f       	subi	r24, 0xF9	; 249
    af9c:	9f 4f       	sbci	r25, 0xFF	; 255
    af9e:	09 f4       	brne	.+2      	; 0xafa2 <hal_configureUartChannel+0x484>
    afa0:	5a c0       	rjmp	.+180    	; 0xb056 <hal_configureUartChannel+0x538>
    afa2:	5b c0       	rjmp	.+182    	; 0xb05a <hal_configureUartChannel+0x53c>
            else
               return UART_OUT_OF_HEAP;

         }/*End if( pt_spiChanHndl->t_txDmaHndl  < 0)*/

         hal_requestDmaInterrupt( pt_uartChanHndl->t_txDmaHndl,
    afa4:	d4 01       	movw	r26, r8
    afa6:	59 96       	adiw	r26, 0x19	; 25
    afa8:	8d 91       	ld	r24, X+
    afaa:	9c 91       	ld	r25, X
    afac:	5a 97       	sbiw	r26, 0x1a	; 26
    afae:	60 e0       	ldi	r22, 0x00	; 0
    afb0:	a7 01       	movw	r20, r14
    afb2:	0e 94 39 24 	call	0x4872	; 0x4872 <hal_requestDmaInterrupt>
      }/*End if( t_conf.b_enTxDma == true)*/

      /*---------------------------------------------------------------------*
       * Keep track of the current baud rate for this particular UART.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->i_baudRate = t_conf.i_baudRate;
    afb6:	2f 89       	ldd	r18, Y+23	; 0x17
    afb8:	38 8d       	ldd	r19, Y+24	; 0x18
    afba:	49 8d       	ldd	r20, Y+25	; 0x19
    afbc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    afbe:	d4 01       	movw	r26, r8
    afc0:	11 96       	adiw	r26, 0x01	; 1
    afc2:	2d 93       	st	X+, r18
    afc4:	3d 93       	st	X+, r19
    afc6:	4d 93       	st	X+, r20
    afc8:	5c 93       	st	X, r21
    afca:	14 97       	sbiw	r26, 0x04	; 4

      /*---------------------------------------------------------------------*
       * Configure the baud rate generator registers
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->BAUDCTRLA = (uint8_t)s_bsel;
    afcc:	19 96       	adiw	r26, 0x09	; 9
    afce:	ed 91       	ld	r30, X+
    afd0:	fc 91       	ld	r31, X
    afd2:	1a 97       	sbiw	r26, 0x0a	; 10
    afd4:	c6 82       	std	Z+6, r12	; 0x06
      pt_uartChanHndl->pt_uart->BAUDCTRLB = (c_bscale << USART_BSCALE0_bp) |
    afd6:	72 94       	swap	r7
    afd8:	80 ef       	ldi	r24, 0xF0	; 240
    afda:	78 22       	and	r7, r24
    afdc:	7d 28       	or	r7, r13
    afde:	77 82       	std	Z+7, r7	; 0x07
      (s_bsel >> 8);

      /*---------------------------------------------------------------------*
       * Enable RX and TX UARTS.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLB |= USART_RXEN_bm;
    afe0:	84 81       	ldd	r24, Z+4	; 0x04
    afe2:	80 61       	ori	r24, 0x10	; 16
    afe4:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLB |= USART_TXEN_bm;
    afe6:	84 81       	ldd	r24, Z+4	; 0x04
    afe8:	88 60       	ori	r24, 0x08	; 8
    afea:	84 83       	std	Z+4, r24	; 0x04

      /*---------------------------------------------------------------------*
       * No transactions in progress.
       *---------------------------------------------------------------------*/
		pt_uartChanHndl->b_txBusLocked = false;
    afec:	1b 96       	adiw	r26, 0x0b	; 11
    afee:	1c 92       	st	X, r1
    aff0:	1b 97       	sbiw	r26, 0x0b	; 11
      pt_uartChanHndl->b_rxBusLocked = false;
    aff2:	1c 96       	adiw	r26, 0x0c	; 12
    aff4:	1c 92       	st	X, r1
    aff6:	1c 97       	sbiw	r26, 0x0c	; 12

      /*---------------------------------------------------------------------*
       * Buffers are only used during block transfers.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pc_rxData = NULL;
    aff8:	1f 96       	adiw	r26, 0x0f	; 15
    affa:	1d 92       	st	X+, r1
    affc:	1c 92       	st	X, r1
    affe:	50 97       	sbiw	r26, 0x10	; 16
      pt_uartChanHndl->pc_txData = NULL;
    b000:	1d 96       	adiw	r26, 0x0d	; 13
    b002:	1d 92       	st	X+, r1
    b004:	1c 92       	st	X, r1
    b006:	1e 97       	sbiw	r26, 0x0e	; 14
      pt_uartChanHndl->s_rxBufIndex = 0;
    b008:	57 96       	adiw	r26, 0x17	; 23
    b00a:	1d 92       	st	X+, r1
    b00c:	1c 92       	st	X, r1
    b00e:	58 97       	sbiw	r26, 0x18	; 24
      pt_uartChanHndl->s_rxBufLength = 0;
    b010:	53 96       	adiw	r26, 0x13	; 19
    b012:	1d 92       	st	X+, r1
    b014:	1c 92       	st	X, r1
    b016:	54 97       	sbiw	r26, 0x14	; 20
      pt_uartChanHndl->s_txBufIndex = 0;
    b018:	55 96       	adiw	r26, 0x15	; 21
    b01a:	1d 92       	st	X+, r1
    b01c:	1c 92       	st	X, r1
    b01e:	56 97       	sbiw	r26, 0x16	; 22
      pt_uartChanHndl->s_txBufLength = 0;
    b020:	51 96       	adiw	r26, 0x11	; 17
    b022:	1d 92       	st	X+, r1
    b024:	1c 92       	st	X, r1
    b026:	52 97       	sbiw	r26, 0x12	; 18

      /*---------------------------------------------------------------------*
       * Map the RX complete interrupt callback function.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pf_rxCallBack = t_conf.pf_rxCallBack;
    b028:	ec 89       	ldd	r30, Y+20	; 0x14
    b02a:	fd 89       	ldd	r31, Y+21	; 0x15
    b02c:	5d 96       	adiw	r26, 0x1d	; 29
    b02e:	ed 93       	st	X+, r30
    b030:	fc 93       	st	X, r31
    b032:	5e 97       	sbiw	r26, 0x1e	; 30
      pt_uartChanHndl->pf_txCallBack = t_conf.pf_txCallBack;
    b034:	2a 89       	ldd	r18, Y+18	; 0x12
    b036:	3b 89       	ldd	r19, Y+19	; 0x13
    b038:	5f 96       	adiw	r26, 0x1f	; 31
    b03a:	2d 93       	st	X+, r18
    b03c:	3c 93       	st	X, r19
    b03e:	90 97       	sbiw	r26, 0x20	; 32

      /*---------------------------------------------------------------------*
       * Enable RX complete interrupt.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    b040:	19 96       	adiw	r26, 0x09	; 9
    b042:	ed 91       	ld	r30, X+
    b044:	fc 91       	ld	r31, X
    b046:	1a 97       	sbiw	r26, 0x0a	; 10
    b048:	83 81       	ldd	r24, Z+3	; 0x03
    b04a:	80 63       	ori	r24, 0x30	; 48
    b04c:	83 83       	std	Z+3, r24	; 0x03

   }

   HAL_END_CRITICAL();//Enable interrupts
    b04e:	89 81       	ldd	r24, Y+1	; 0x01
    b050:	8f bf       	out	0x3f, r24	; 63
    b052:	80 e0       	ldi	r24, 0x00	; 0
    b054:	03 c0       	rjmp	.+6      	; 0xb05c <hal_configureUartChannel+0x53e>

   return UART_PASSED;
    b056:	8a ef       	ldi	r24, 0xFA	; 250
    b058:	01 c0       	rjmp	.+2      	; 0xb05c <hal_configureUartChannel+0x53e>
    b05a:	8f ef       	ldi	r24, 0xFF	; 255

}/*End hal_configureUartChannel*/
    b05c:	6a 96       	adiw	r28, 0x1a	; 26
    b05e:	cd bf       	out	0x3d, r28	; 61
    b060:	de bf       	out	0x3e, r29	; 62
    b062:	cf 91       	pop	r28
    b064:	df 91       	pop	r29
    b066:	1f 91       	pop	r17
    b068:	0f 91       	pop	r16
    b06a:	ff 90       	pop	r15
    b06c:	ef 90       	pop	r14
    b06e:	df 90       	pop	r13
    b070:	cf 90       	pop	r12
    b072:	bf 90       	pop	r11
    b074:	af 90       	pop	r10
    b076:	9f 90       	pop	r9
    b078:	8f 90       	pop	r8
    b07a:	7f 90       	pop	r7
    b07c:	6f 90       	pop	r6
    b07e:	5f 90       	pop	r5
    b080:	4f 90       	pop	r4
    b082:	3f 90       	pop	r3
    b084:	2f 90       	pop	r2
    b086:	08 95       	ret

0000b088 <updateRxDmaInt>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void updateRxDmaInt( t_uartChanHndl *pt_handle)
{
    b088:	cf 93       	push	r28
    b08a:	df 93       	push	r29
    b08c:	ec 01       	movw	r28, r24
   /*------------------------------------------------------------------------*
    * Disable the DMA channel.
    *------------------------------------------------------------------------*/
   hal_dmaDisableChannel( pt_handle->t_rxDmaHndl);
    b08e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b092:	0e 94 a8 22 	call	0x4550	; 0x4550 <hal_dmaDisableChannel>

   pt_handle->s_rxBufIndex = hal_getDmaTransferCount( pt_handle->t_rxDmaHndl);
    b096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b09a:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <hal_getDmaTransferCount>
    b09e:	8f 8b       	std	Y+23, r24	; 0x17
    b0a0:	98 8f       	std	Y+24, r25	; 0x18

   /*------------------------------------------------------------------------*
    * Execute the call-back function, returning the size of the data.
    *------------------------------------------------------------------------*/
	if( pt_handle->pf_rxCallBack != NULL)
    b0a2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    b0a4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    b0a6:	30 97       	sbiw	r30, 0x00	; 0
    b0a8:	09 f0       	breq	.+2      	; 0xb0ac <updateRxDmaInt+0x24>
      pt_handle->pf_rxCallBack( pt_handle->s_rxBufIndex);
    b0aa:	19 95       	eicall

   /*------------------------------------------------------------------------*
    * Release the RX UART bus.
    *------------------------------------------------------------------------*/
	pt_handle->b_rxBusLocked = false;
    b0ac:	1c 86       	std	Y+12, r1	; 0x0c
   pt_handle->pc_rxData = NULL;
    b0ae:	1f 86       	std	Y+15, r1	; 0x0f
    b0b0:	18 8a       	std	Y+16, r1	; 0x10
   pt_handle->s_rxBufIndex = 0;
    b0b2:	1f 8a       	std	Y+23, r1	; 0x17
    b0b4:	18 8e       	std	Y+24, r1	; 0x18
   pt_handle->s_rxBufLength = 0;
    b0b6:	1b 8a       	std	Y+19, r1	; 0x13
    b0b8:	1c 8a       	std	Y+20, r1	; 0x14

   /*------------------------------------------------------------------------*
    * Enable RX interrupts - so that the RX channel can be used for non DMA
    * transfers.
    *------------------------------------------------------------------------*/
   pt_handle->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    b0ba:	e9 85       	ldd	r30, Y+9	; 0x09
    b0bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    b0be:	83 81       	ldd	r24, Z+3	; 0x03
    b0c0:	80 63       	ori	r24, 0x30	; 48
    b0c2:	83 83       	std	Z+3, r24	; 0x03

}/*End updateRxDmaInt*/
    b0c4:	df 91       	pop	r29
    b0c6:	cf 91       	pop	r28
    b0c8:	08 95       	ret

0000b0ca <uart8RxDmaInt>:

static void uart8RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart8Chan;
    b0ca:	80 91 ce 22 	lds	r24, 0x22CE
    b0ce:	90 91 cf 22 	lds	r25, 0x22CF

   if( pt_handle != NULL)
    b0d2:	00 97       	sbiw	r24, 0x00	; 0
    b0d4:	11 f0       	breq	.+4      	; 0xb0da <uart8RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b0d6:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b0da:	08 95       	ret

0000b0dc <uart7RxDmaInt>:

static void uart7RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart7Chan;
    b0dc:	80 91 cc 22 	lds	r24, 0x22CC
    b0e0:	90 91 cd 22 	lds	r25, 0x22CD

   if( pt_handle != NULL)
    b0e4:	00 97       	sbiw	r24, 0x00	; 0
    b0e6:	11 f0       	breq	.+4      	; 0xb0ec <uart7RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b0e8:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b0ec:	08 95       	ret

0000b0ee <uart6RxDmaInt>:

static void uart6RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart6Chan;
    b0ee:	80 91 ca 22 	lds	r24, 0x22CA
    b0f2:	90 91 cb 22 	lds	r25, 0x22CB

   if( pt_handle != NULL)
    b0f6:	00 97       	sbiw	r24, 0x00	; 0
    b0f8:	11 f0       	breq	.+4      	; 0xb0fe <uart6RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b0fa:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b0fe:	08 95       	ret

0000b100 <uart5RxDmaInt>:

static void uart5RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart5Chan;
    b100:	80 91 c8 22 	lds	r24, 0x22C8
    b104:	90 91 c9 22 	lds	r25, 0x22C9

   if( pt_handle != NULL)
    b108:	00 97       	sbiw	r24, 0x00	; 0
    b10a:	11 f0       	breq	.+4      	; 0xb110 <uart5RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b10c:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b110:	08 95       	ret

0000b112 <uart4RxDmaInt>:

static void uart4RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart4Chan;
    b112:	80 91 c6 22 	lds	r24, 0x22C6
    b116:	90 91 c7 22 	lds	r25, 0x22C7

   if( pt_handle != NULL)
    b11a:	00 97       	sbiw	r24, 0x00	; 0
    b11c:	11 f0       	breq	.+4      	; 0xb122 <uart4RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b11e:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b122:	08 95       	ret

0000b124 <uart3RxDmaInt>:

static void uart3RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart3Chan;
    b124:	80 91 c4 22 	lds	r24, 0x22C4
    b128:	90 91 c5 22 	lds	r25, 0x22C5

   if( pt_handle != NULL)
    b12c:	00 97       	sbiw	r24, 0x00	; 0
    b12e:	11 f0       	breq	.+4      	; 0xb134 <uart3RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b130:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b134:	08 95       	ret

0000b136 <uart2RxDmaInt>:

static void uart2RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart2Chan;
    b136:	80 91 c2 22 	lds	r24, 0x22C2
    b13a:	90 91 c3 22 	lds	r25, 0x22C3

   if( pt_handle != NULL)
    b13e:	00 97       	sbiw	r24, 0x00	; 0
    b140:	11 f0       	breq	.+4      	; 0xb146 <uart2RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b142:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b146:	08 95       	ret

0000b148 <uart1RxDmaInt>:

static void uart1RxDmaInt( void)
{
   t_uartChanHndl *pt_handle = NULL;

   pt_handle = gt_intChanMap.pt_uart1Chan;
    b148:	80 91 c0 22 	lds	r24, 0x22C0
    b14c:	90 91 c1 22 	lds	r25, 0x22C1

   if( pt_handle != NULL)
    b150:	00 97       	sbiw	r24, 0x00	; 0
    b152:	11 f0       	breq	.+4      	; 0xb158 <uart1RxDmaInt+0x10>
   {
      updateRxDmaInt( pt_handle);
    b154:	0e 94 44 58 	call	0xb088	; 0xb088 <updateRxDmaInt>
    b158:	08 95       	ret

0000b15a <hal_releaseUartChannel>:
   return (t_UARTHNDL)t_linkHndl;

}/*End hal_requestUartChannel*/

t_uartError hal_releaseUartChannel( t_UARTHNDL t_handle)
{
    b15a:	df 93       	push	r29
    b15c:	cf 93       	push	r28
    b15e:	00 d0       	rcall	.+0      	; 0xb160 <hal_releaseUartChannel+0x6>
    b160:	cd b7       	in	r28, 0x3d	; 61
    b162:	de b7       	in	r29, 0x3e	; 62
    b164:	8a 83       	std	Y+2, r24	; 0x02
    b166:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b168:	8f b7       	in	r24, 0x3f	; 63
    b16a:	89 83       	std	Y+1, r24	; 0x01
    b16c:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b16e:	ea 81       	ldd	r30, Y+2	; 0x02
    b170:	fb 81       	ldd	r31, Y+3	; 0x03
    b172:	20 91 0c 21 	lds	r18, 0x210C
    b176:	30 91 0d 21 	lds	r19, 0x210D
    b17a:	84 81       	ldd	r24, Z+4	; 0x04
    b17c:	95 81       	ldd	r25, Z+5	; 0x05
    b17e:	82 17       	cp	r24, r18
    b180:	93 07       	cpc	r25, r19
    b182:	21 f0       	breq	.+8      	; 0xb18c <hal_releaseUartChannel+0x32>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b184:	89 81       	ldd	r24, Y+1	; 0x01
    b186:	8f bf       	out	0x3f, r24	; 63
    b188:	8e ef       	ldi	r24, 0xFE	; 254
    b18a:	7e c0       	rjmp	.+252    	; 0xb288 <hal_releaseUartChannel+0x12e>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b18c:	ea 81       	ldd	r30, Y+2	; 0x02
    b18e:	fb 81       	ldd	r31, Y+3	; 0x03
    b190:	a0 81       	ld	r26, Z
    b192:	b1 81       	ldd	r27, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b194:	19 96       	adiw	r26, 0x09	; 9
    b196:	ed 91       	ld	r30, X+
    b198:	fc 91       	ld	r31, X
    b19a:	1a 97       	sbiw	r26, 0x0a	; 10
    b19c:	83 81       	ldd	r24, Z+3	; 0x03
    b19e:	8f 7c       	andi	r24, 0xCF	; 207
    b1a0:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    b1a2:	83 81       	ldd	r24, Z+3	; 0x03
    b1a4:	8c 7f       	andi	r24, 0xFC	; 252
    b1a6:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    b1a8:	83 81       	ldd	r24, Z+3	; 0x03
    b1aa:	83 7f       	andi	r24, 0xF3	; 243
    b1ac:	83 83       	std	Z+3, r24	; 0x03

      /*---------------------------------------------------------------------*
       * Disable and reset this UART channel.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b1ae:	83 81       	ldd	r24, Z+3	; 0x03
    b1b0:	8f 7c       	andi	r24, 0xCF	; 207
    b1b2:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_gm;
    b1b4:	83 81       	ldd	r24, Z+3	; 0x03
    b1b6:	8c 7f       	andi	r24, 0xFC	; 252
    b1b8:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLA &= ~USART_TXCINTLVL_gm;
    b1ba:	83 81       	ldd	r24, Z+3	; 0x03
    b1bc:	83 7f       	andi	r24, 0xF3	; 243
    b1be:	83 83       	std	Z+3, r24	; 0x03
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_RXEN_bm;
    b1c0:	84 81       	ldd	r24, Z+4	; 0x04
    b1c2:	8f 7e       	andi	r24, 0xEF	; 239
    b1c4:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLB &= ~USART_TXEN_bm;
    b1c6:	84 81       	ldd	r24, Z+4	; 0x04
    b1c8:	87 7f       	andi	r24, 0xF7	; 247
    b1ca:	84 83       	std	Z+4, r24	; 0x04
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CMODE_gm;
    b1cc:	85 81       	ldd	r24, Z+5	; 0x05
    b1ce:	8f 73       	andi	r24, 0x3F	; 63
    b1d0:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_PMODE_gm;
    b1d2:	85 81       	ldd	r24, Z+5	; 0x05
    b1d4:	8f 7c       	andi	r24, 0xCF	; 207
    b1d6:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_CHSIZE_gm;
    b1d8:	85 81       	ldd	r24, Z+5	; 0x05
    b1da:	88 7f       	andi	r24, 0xF8	; 248
    b1dc:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->CTRLC &= ~USART_SBMODE_bm;
    b1de:	85 81       	ldd	r24, Z+5	; 0x05
    b1e0:	87 7f       	andi	r24, 0xF7	; 247
    b1e2:	85 83       	std	Z+5, r24	; 0x05
      pt_uartChanHndl->pt_uart->BAUDCTRLA &= ~USART_BSEL_gm;
    b1e4:	86 81       	ldd	r24, Z+6	; 0x06
    b1e6:	16 82       	std	Z+6, r1	; 0x06
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~0x0F; /*BSEL in control B reg*/
    b1e8:	87 81       	ldd	r24, Z+7	; 0x07
    b1ea:	80 7f       	andi	r24, 0xF0	; 240
    b1ec:	87 83       	std	Z+7, r24	; 0x07
      pt_uartChanHndl->pt_uart->BAUDCTRLB &= ~USART_BSCALE_gm;
    b1ee:	87 81       	ldd	r24, Z+7	; 0x07
    b1f0:	8f 70       	andi	r24, 0x0F	; 15
    b1f2:	87 83       	std	Z+7, r24	; 0x07

      switch( pt_uartChanHndl->t_id)
    b1f4:	ac 91       	ld	r26, X
    b1f6:	a9 30       	cpi	r26, 0x09	; 9
    b1f8:	21 f1       	breq	.+72     	; 0xb242 <hal_releaseUartChannel+0xe8>
    b1fa:	aa 30       	cpi	r26, 0x0A	; 10
    b1fc:	38 f4       	brcc	.+14     	; 0xb20c <hal_releaseUartChannel+0xb2>
    b1fe:	a3 30       	cpi	r26, 0x03	; 3
    b200:	b1 f0       	breq	.+44     	; 0xb22e <hal_releaseUartChannel+0xd4>
    b202:	a6 30       	cpi	r26, 0x06	; 6
    b204:	c9 f0       	breq	.+50     	; 0xb238 <hal_releaseUartChannel+0xde>
    b206:	aa 23       	and	r26, r26
    b208:	69 f0       	breq	.+26     	; 0xb224 <hal_releaseUartChannel+0xca>
    b20a:	33 c0       	rjmp	.+102    	; 0xb272 <hal_releaseUartChannel+0x118>
    b20c:	af 30       	cpi	r26, 0x0F	; 15
    b20e:	19 f1       	breq	.+70     	; 0xb256 <hal_releaseUartChannel+0xfc>
    b210:	a0 31       	cpi	r26, 0x10	; 16
    b212:	18 f4       	brcc	.+6      	; 0xb21a <hal_releaseUartChannel+0xc0>
    b214:	ac 30       	cpi	r26, 0x0C	; 12
    b216:	69 f5       	brne	.+90     	; 0xb272 <hal_releaseUartChannel+0x118>
    b218:	19 c0       	rjmp	.+50     	; 0xb24c <hal_releaseUartChannel+0xf2>
    b21a:	a2 31       	cpi	r26, 0x12	; 18
    b21c:	09 f1       	breq	.+66     	; 0xb260 <hal_releaseUartChannel+0x106>
    b21e:	a5 31       	cpi	r26, 0x15	; 21
    b220:	41 f5       	brne	.+80     	; 0xb272 <hal_releaseUartChannel+0x118>
    b222:	23 c0       	rjmp	.+70     	; 0xb26a <hal_releaseUartChannel+0x110>
      {
         case UART_1:
            gt_intChanMap.pt_uart1Chan = NULL;
    b224:	10 92 c0 22 	sts	0x22C0, r1
    b228:	10 92 c1 22 	sts	0x22C1, r1
    b22c:	22 c0       	rjmp	.+68     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_2:
            gt_intChanMap.pt_uart2Chan = NULL;
    b22e:	10 92 c2 22 	sts	0x22C2, r1
    b232:	10 92 c3 22 	sts	0x22C3, r1
    b236:	1d c0       	rjmp	.+58     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_3:
            gt_intChanMap.pt_uart3Chan = NULL;
    b238:	10 92 c4 22 	sts	0x22C4, r1
    b23c:	10 92 c5 22 	sts	0x22C5, r1
    b240:	18 c0       	rjmp	.+48     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_4:
            gt_intChanMap.pt_uart4Chan = NULL;
    b242:	10 92 c6 22 	sts	0x22C6, r1
    b246:	10 92 c7 22 	sts	0x22C7, r1
    b24a:	13 c0       	rjmp	.+38     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_5:
            gt_intChanMap.pt_uart5Chan = NULL;
    b24c:	10 92 c8 22 	sts	0x22C8, r1
    b250:	10 92 c9 22 	sts	0x22C9, r1
    b254:	0e c0       	rjmp	.+28     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_6:
            gt_intChanMap.pt_uart6Chan = NULL;
    b256:	10 92 ca 22 	sts	0x22CA, r1
    b25a:	10 92 cb 22 	sts	0x22CB, r1
    b25e:	09 c0       	rjmp	.+18     	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_7:
            gt_intChanMap.pt_uart7Chan = NULL;
    b260:	10 92 cc 22 	sts	0x22CC, r1
    b264:	10 92 cd 22 	sts	0x22CD, r1
    b268:	04 c0       	rjmp	.+8      	; 0xb272 <hal_releaseUartChannel+0x118>
         break;

         case UART_8:
            gt_intChanMap.pt_uart8Chan = NULL;
    b26a:	10 92 ce 22 	sts	0x22CE, r1
    b26e:	10 92 cf 22 	sts	0x22CF, r1
         break;

      }/*End switch( pt_uartChanHndl->t_id)*/

      t_lErr = utl_destroyLink( gt_uartChanHndlList,
    b272:	80 91 0c 21 	lds	r24, 0x210C
    b276:	90 91 0d 21 	lds	r25, 0x210D
    b27a:	6a 81       	ldd	r22, Y+2	; 0x02
    b27c:	7b 81       	ldd	r23, Y+3	; 0x03
    b27e:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                                (t_LINKHNDL)t_handle);

   }

   HAL_END_CRITICAL();//Enable interrupts
    b282:	89 81       	ldd	r24, Y+1	; 0x01
    b284:	8f bf       	out	0x3f, r24	; 63
    b286:	80 e0       	ldi	r24, 0x00	; 0

   return UART_PASSED;

}/*End hal_releaseUartChannel*/
    b288:	23 96       	adiw	r28, 0x03	; 3
    b28a:	cd bf       	out	0x3d, r28	; 61
    b28c:	de bf       	out	0x3e, r29	; 62
    b28e:	cf 91       	pop	r28
    b290:	df 91       	pop	r29
    b292:	08 95       	ret

0000b294 <hal_requestUartChannel>:

/*---------------------------------------------------------------------------*
 * Request access to a particular UART module
 *---------------------------------------------------------------------------*/
t_UARTHNDL hal_requestUartChannel( t_uartChanId t_chanId)
{
    b294:	ff 92       	push	r15
    b296:	0f 93       	push	r16
    b298:	1f 93       	push	r17
    b29a:	df 93       	push	r29
    b29c:	cf 93       	push	r28
    b29e:	cd b7       	in	r28, 0x3d	; 61
    b2a0:	de b7       	in	r29, 0x3e	; 62
    b2a2:	2a 97       	sbiw	r28, 0x0a	; 10
    b2a4:	cd bf       	out	0x3d, r28	; 61
    b2a6:	de bf       	out	0x3e, r29	; 62
    b2a8:	f8 2e       	mov	r15, r24

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b2aa:	8f b7       	in	r24, 0x3f	; 63
    b2ac:	89 83       	std	Y+1, r24	; 0x01
    b2ae:	f8 94       	cli

   if( (t_chanId < UART_1) || (t_chanId > UART_8))
    b2b0:	85 e1       	ldi	r24, 0x15	; 21
    b2b2:	8f 15       	cp	r24, r15
    b2b4:	28 f4       	brcc	.+10     	; 0xb2c0 <hal_requestUartChannel+0x2c>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b2b6:	89 81       	ldd	r24, Y+1	; 0x01
    b2b8:	8f bf       	out	0x3f, r24	; 63
    b2ba:	22 ef       	ldi	r18, 0xF2	; 242
    b2bc:	3f ef       	ldi	r19, 0xFF	; 255
    b2be:	4e c1       	rjmp	.+668    	; 0xb55c <hal_requestUartChannel+0x2c8>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the UART list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_uartChanHndlList, s_count)
    b2c0:	e0 91 0c 21 	lds	r30, 0x210C
    b2c4:	f0 91 0d 21 	lds	r31, 0x210D
    b2c8:	22 81       	ldd	r18, Z+2	; 0x02
    b2ca:	33 81       	ldd	r19, Z+3	; 0x03
    b2cc:	e0 91 0c 21 	lds	r30, 0x210C
    b2d0:	f0 91 0d 21 	lds	r31, 0x210D
    b2d4:	0c c0       	rjmp	.+24     	; 0xb2ee <hal_requestUartChannel+0x5a>
   {
      pt_element = (t_uartChanHndl *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    b2d6:	ec 81       	ldd	r30, Y+4	; 0x04
    b2d8:	fd 81       	ldd	r31, Y+5	; 0x05
    b2da:	01 90       	ld	r0, Z+
    b2dc:	f0 81       	ld	r31, Z
    b2de:	e0 2d       	mov	r30, r0
      if( pt_element->t_id == t_id)
    b2e0:	80 81       	ld	r24, Z
    b2e2:	8f 15       	cp	r24, r15
    b2e4:	61 f0       	breq	.+24     	; 0xb2fe <hal_requestUartChannel+0x6a>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Search the UART list for the requested ID
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_uartChanHndlList, s_count)
    b2e6:	21 50       	subi	r18, 0x01	; 1
    b2e8:	30 40       	sbci	r19, 0x00	; 0
    b2ea:	ec 81       	ldd	r30, Y+4	; 0x04
    b2ec:	fd 81       	ldd	r31, Y+5	; 0x05
    b2ee:	80 85       	ldd	r24, Z+8	; 0x08
    b2f0:	91 85       	ldd	r25, Z+9	; 0x09
    b2f2:	8c 83       	std	Y+4, r24	; 0x04
    b2f4:	9d 83       	std	Y+5, r25	; 0x05
    b2f6:	12 16       	cp	r1, r18
    b2f8:	13 06       	cpc	r1, r19
    b2fa:	6c f3       	brlt	.-38     	; 0xb2d6 <hal_requestUartChannel+0x42>
    b2fc:	03 c0       	rjmp	.+6      	; 0xb304 <hal_requestUartChannel+0x70>
   pt_uartChanHndl = findUartElement( t_chanId);

   /*------------------------------------------------------------------------*
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl == NULL) /*Yes*/
    b2fe:	ef 2b       	or	r30, r31
    b300:	09 f0       	breq	.+2      	; 0xb304 <hal_requestUartChannel+0x70>
    b302:	23 c1       	rjmp	.+582    	; 0xb54a <hal_requestUartChannel+0x2b6>

   /*------------------------------------------------------------------------*
    * Allocated memory for the link (and element) that contains information
    * specific to this particular UART module
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof( t_uartChanHndl));
    b304:	81 e2       	ldi	r24, 0x21	; 33
    b306:	90 e0       	ldi	r25, 0x00	; 0
    b308:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    b30c:	8c 83       	std	Y+4, r24	; 0x04
    b30e:	9d 83       	std	Y+5, r25	; 0x05

   if( t_linkHndl < 0)
    b310:	8c 81       	ldd	r24, Y+4	; 0x04
    b312:	9d 81       	ldd	r25, Y+5	; 0x05
    b314:	97 ff       	sbrs	r25, 7
    b316:	03 c0       	rjmp	.+6      	; 0xb31e <hal_requestUartChannel+0x8a>
    b318:	8f ef       	ldi	r24, 0xFF	; 255
    b31a:	9f ef       	ldi	r25, 0xFF	; 255
    b31c:	0b c0       	rjmp	.+22     	; 0xb334 <hal_requestUartChannel+0xa0>
   }

   /*------------------------------------------------------------------------*
    * Add the UART module link onto the list open UART modules.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_uartChanHndlList,
    b31e:	80 91 0c 21 	lds	r24, 0x210C
    b322:	90 91 0d 21 	lds	r25, 0x210D
    b326:	6c 81       	ldd	r22, Y+4	; 0x04
    b328:	7d 81       	ldd	r23, Y+5	; 0x05
    b32a:	41 e0       	ldi	r20, 0x01	; 1
    b32c:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   return t_linkHndl;
    b330:	8c 81       	ldd	r24, Y+4	; 0x04
    b332:	9d 81       	ldd	r25, Y+5	; 0x05
    * Is there a channel available?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl == NULL) /*Yes*/
   {

      t_linkHndl = createUartHandle();
    b334:	8a 83       	std	Y+2, r24	; 0x02
    b336:	9b 83       	std	Y+3, r25	; 0x03
      if( t_linkHndl < 0)
    b338:	8a 81       	ldd	r24, Y+2	; 0x02
    b33a:	9b 81       	ldd	r25, Y+3	; 0x03
    b33c:	97 ff       	sbrs	r25, 7
    b33e:	05 c0       	rjmp	.+10     	; 0xb34a <hal_requestUartChannel+0xb6>
      {
         HAL_END_CRITICAL();//Enable interrupts
    b340:	89 81       	ldd	r24, Y+1	; 0x01
    b342:	8f bf       	out	0x3f, r24	; 63
    b344:	2f ef       	ldi	r18, 0xFF	; 255
    b346:	3f ef       	ldi	r19, 0xFF	; 255
    b348:	09 c1       	rjmp	.+530    	; 0xb55c <hal_requestUartChannel+0x2c8>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the UART
       * module information is being stored.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl = (t_uartChanHndl *)
    b34a:	ea 81       	ldd	r30, Y+2	; 0x02
    b34c:	fb 81       	ldd	r31, Y+3	; 0x03
    b34e:	00 81       	ld	r16, Z
    b350:	11 81       	ldd	r17, Z+1	; 0x01
      UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);

      pt_uartChanHndl->t_id = t_chanId;
    b352:	f8 01       	movw	r30, r16
    b354:	f0 82       	st	Z, r15
      pt_uartChanHndl->i_baudRate = 0;
    b356:	11 82       	std	Z+1, r1	; 0x01
    b358:	12 82       	std	Z+2, r1	; 0x02
    b35a:	13 82       	std	Z+3, r1	; 0x03
    b35c:	14 82       	std	Z+4, r1	; 0x04

      switch( t_chanId)
    b35e:	f9 e0       	ldi	r31, 0x09	; 9
    b360:	ff 16       	cp	r15, r31
    b362:	09 f4       	brne	.+2      	; 0xb366 <hal_requestUartChannel+0xd2>
    b364:	6e c0       	rjmp	.+220    	; 0xb442 <hal_requestUartChannel+0x1ae>
    b366:	ff 15       	cp	r31, r15
    b368:	50 f0       	brcs	.+20     	; 0xb37e <hal_requestUartChannel+0xea>
    b36a:	83 e0       	ldi	r24, 0x03	; 3
    b36c:	f8 16       	cp	r15, r24
    b36e:	a9 f1       	breq	.+106    	; 0xb3da <hal_requestUartChannel+0x146>
    b370:	e6 e0       	ldi	r30, 0x06	; 6
    b372:	fe 16       	cp	r15, r30
    b374:	09 f4       	brne	.+2      	; 0xb378 <hal_requestUartChannel+0xe4>
    b376:	4b c0       	rjmp	.+150    	; 0xb40e <hal_requestUartChannel+0x17a>
    b378:	ff 20       	and	r15, r15
    b37a:	a9 f0       	breq	.+42     	; 0xb3a6 <hal_requestUartChannel+0x112>
    b37c:	eb c0       	rjmp	.+470    	; 0xb554 <hal_requestUartChannel+0x2c0>
    b37e:	ff e0       	ldi	r31, 0x0F	; 15
    b380:	ff 16       	cp	r15, r31
    b382:	09 f4       	brne	.+2      	; 0xb386 <hal_requestUartChannel+0xf2>
    b384:	93 c0       	rjmp	.+294    	; 0xb4ac <hal_requestUartChannel+0x218>
    b386:	ff 15       	cp	r31, r15
    b388:	28 f0       	brcs	.+10     	; 0xb394 <hal_requestUartChannel+0x100>
    b38a:	8c e0       	ldi	r24, 0x0C	; 12
    b38c:	f8 16       	cp	r15, r24
    b38e:	09 f0       	breq	.+2      	; 0xb392 <hal_requestUartChannel+0xfe>
    b390:	e1 c0       	rjmp	.+450    	; 0xb554 <hal_requestUartChannel+0x2c0>
    b392:	71 c0       	rjmp	.+226    	; 0xb476 <hal_requestUartChannel+0x1e2>
    b394:	e2 e1       	ldi	r30, 0x12	; 18
    b396:	fe 16       	cp	r15, r30
    b398:	09 f4       	brne	.+2      	; 0xb39c <hal_requestUartChannel+0x108>
    b39a:	a3 c0       	rjmp	.+326    	; 0xb4e2 <hal_requestUartChannel+0x24e>
    b39c:	f5 e1       	ldi	r31, 0x15	; 21
    b39e:	ff 16       	cp	r15, r31
    b3a0:	09 f0       	breq	.+2      	; 0xb3a4 <hal_requestUartChannel+0x110>
    b3a2:	d8 c0       	rjmp	.+432    	; 0xb554 <hal_requestUartChannel+0x2c0>
    b3a4:	b8 c0       	rjmp	.+368    	; 0xb516 <hal_requestUartChannel+0x282>
      {
         case UART_1:

            pt_uartChanHndl->pt_uart = &USARTC0;
    b3a6:	80 ea       	ldi	r24, 0xA0	; 160
    b3a8:	98 e0       	ldi	r25, 0x08	; 8
    b3aa:	f8 01       	movw	r30, r16
    b3ac:	81 87       	std	Z+9, r24	; 0x09
    b3ae:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b3b0:	84 e0       	ldi	r24, 0x04	; 4
    b3b2:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b3b4:	88 e0       	ldi	r24, 0x08	; 8
    b3b6:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b3b8:	81 e0       	ldi	r24, 0x01	; 1
    b3ba:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b3bc:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b3be:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_conf);
    b3c0:	82 e0       	ldi	r24, 0x02	; 2
    b3c2:	24 e0       	ldi	r18, 0x04	; 4
    b3c4:	38 e0       	ldi	r19, 0x08	; 8
    b3c6:	41 e0       	ldi	r20, 0x01	; 1
    b3c8:	50 e0       	ldi	r21, 0x00	; 0
    b3ca:	60 e0       	ldi	r22, 0x00	; 0
    b3cc:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart1Chan = pt_uartChanHndl;
    b3d0:	00 93 c0 22 	sts	0x22C0, r16
    b3d4:	10 93 c1 22 	sts	0x22C1, r17
    b3d8:	bd c0       	rjmp	.+378    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_2:

            pt_uartChanHndl->pt_uart = &USARTC1;
    b3da:	80 eb       	ldi	r24, 0xB0	; 176
    b3dc:	98 e0       	ldi	r25, 0x08	; 8
    b3de:	f8 01       	movw	r30, r16
    b3e0:	81 87       	std	Z+9, r24	; 0x09
    b3e2:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b3e4:	80 e4       	ldi	r24, 0x40	; 64
    b3e6:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b3e8:	80 e8       	ldi	r24, 0x80	; 128
    b3ea:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b3ec:	81 e0       	ldi	r24, 0x01	; 1
    b3ee:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b3f0:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b3f2:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTC, t_conf);
    b3f4:	82 e0       	ldi	r24, 0x02	; 2
    b3f6:	20 e4       	ldi	r18, 0x40	; 64
    b3f8:	30 e8       	ldi	r19, 0x80	; 128
    b3fa:	41 e0       	ldi	r20, 0x01	; 1
    b3fc:	50 e0       	ldi	r21, 0x00	; 0
    b3fe:	60 e0       	ldi	r22, 0x00	; 0
    b400:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart2Chan = pt_uartChanHndl;
    b404:	00 93 c2 22 	sts	0x22C2, r16
    b408:	10 93 c3 22 	sts	0x22C3, r17
    b40c:	a3 c0       	rjmp	.+326    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_3:

            pt_uartChanHndl->pt_uart = &USARTD0;
    b40e:	80 ea       	ldi	r24, 0xA0	; 160
    b410:	99 e0       	ldi	r25, 0x09	; 9
    b412:	f8 01       	movw	r30, r16
    b414:	81 87       	std	Z+9, r24	; 0x09
    b416:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b418:	84 e0       	ldi	r24, 0x04	; 4
    b41a:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b41c:	88 e0       	ldi	r24, 0x08	; 8
    b41e:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b420:	81 e0       	ldi	r24, 0x01	; 1
    b422:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b424:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b426:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_conf);
    b428:	83 e0       	ldi	r24, 0x03	; 3
    b42a:	24 e0       	ldi	r18, 0x04	; 4
    b42c:	38 e0       	ldi	r19, 0x08	; 8
    b42e:	41 e0       	ldi	r20, 0x01	; 1
    b430:	50 e0       	ldi	r21, 0x00	; 0
    b432:	60 e0       	ldi	r22, 0x00	; 0
    b434:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart3Chan = pt_uartChanHndl;
    b438:	00 93 c4 22 	sts	0x22C4, r16
    b43c:	10 93 c5 22 	sts	0x22C5, r17
    b440:	89 c0       	rjmp	.+274    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_4:

            pt_uartChanHndl->pt_uart = &USARTD1;
    b442:	80 eb       	ldi	r24, 0xB0	; 176
    b444:	99 e0       	ldi	r25, 0x09	; 9
    b446:	f8 01       	movw	r30, r16
    b448:	81 87       	std	Z+9, r24	; 0x09
    b44a:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b44c:	80 e4       	ldi	r24, 0x40	; 64
    b44e:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b450:	80 e8       	ldi	r24, 0x80	; 128
    b452:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b454:	81 e0       	ldi	r24, 0x01	; 1
    b456:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = TOTEM;
    b458:	19 86       	std	Y+9, r1	; 0x09
            t_conf.t_outConf      = TOTEM;
    b45a:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTD, t_conf);
    b45c:	83 e0       	ldi	r24, 0x03	; 3
    b45e:	20 e4       	ldi	r18, 0x40	; 64
    b460:	30 e8       	ldi	r19, 0x80	; 128
    b462:	41 e0       	ldi	r20, 0x01	; 1
    b464:	50 e0       	ldi	r21, 0x00	; 0
    b466:	60 e0       	ldi	r22, 0x00	; 0
    b468:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart4Chan = pt_uartChanHndl;
    b46c:	00 93 c6 22 	sts	0x22C6, r16
    b470:	10 93 c7 22 	sts	0x22C7, r17
    b474:	6f c0       	rjmp	.+222    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_5:

            pt_uartChanHndl->pt_uart = &USARTE0;
    b476:	80 ea       	ldi	r24, 0xA0	; 160
    b478:	9a e0       	ldi	r25, 0x0A	; 10
    b47a:	f8 01       	movw	r30, r16
    b47c:	81 87       	std	Z+9, r24	; 0x09
    b47e:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b480:	84 e0       	ldi	r24, 0x04	; 4
    b482:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b484:	88 e0       	ldi	r24, 0x08	; 8
    b486:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b488:	81 e0       	ldi	r24, 0x01	; 1
    b48a:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b48c:	85 e0       	ldi	r24, 0x05	; 5
    b48e:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b490:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_conf);
    b492:	84 e0       	ldi	r24, 0x04	; 4
    b494:	24 e0       	ldi	r18, 0x04	; 4
    b496:	38 e0       	ldi	r19, 0x08	; 8
    b498:	41 e0       	ldi	r20, 0x01	; 1
    b49a:	55 e0       	ldi	r21, 0x05	; 5
    b49c:	60 e0       	ldi	r22, 0x00	; 0
    b49e:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart5Chan = pt_uartChanHndl;
    b4a2:	00 93 c8 22 	sts	0x22C8, r16
    b4a6:	10 93 c9 22 	sts	0x22C9, r17
    b4aa:	54 c0       	rjmp	.+168    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_6:

            pt_uartChanHndl->pt_uart = &USARTE1;
    b4ac:	80 eb       	ldi	r24, 0xB0	; 176
    b4ae:	9a e0       	ldi	r25, 0x0A	; 10
    b4b0:	f8 01       	movw	r30, r16
    b4b2:	81 87       	std	Z+9, r24	; 0x09
    b4b4:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b4b6:	80 e4       	ldi	r24, 0x40	; 64
    b4b8:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b4ba:	80 e8       	ldi	r24, 0x80	; 128
    b4bc:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b4be:	81 e0       	ldi	r24, 0x01	; 1
    b4c0:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b4c2:	85 e0       	ldi	r24, 0x05	; 5
    b4c4:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b4c6:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTE, t_conf);
    b4c8:	84 e0       	ldi	r24, 0x04	; 4
    b4ca:	20 e4       	ldi	r18, 0x40	; 64
    b4cc:	30 e8       	ldi	r19, 0x80	; 128
    b4ce:	41 e0       	ldi	r20, 0x01	; 1
    b4d0:	55 e0       	ldi	r21, 0x05	; 5
    b4d2:	60 e0       	ldi	r22, 0x00	; 0
    b4d4:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart6Chan = pt_uartChanHndl;
    b4d8:	00 93 ca 22 	sts	0x22CA, r16
    b4dc:	10 93 cb 22 	sts	0x22CB, r17
    b4e0:	39 c0       	rjmp	.+114    	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_7:

            pt_uartChanHndl->pt_uart = &USARTF0;
    b4e2:	80 ea       	ldi	r24, 0xA0	; 160
    b4e4:	9b e0       	ldi	r25, 0x0B	; 11
    b4e6:	f8 01       	movw	r30, r16
    b4e8:	81 87       	std	Z+9, r24	; 0x09
    b4ea:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the UART will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_2;
    b4ec:	84 e0       	ldi	r24, 0x04	; 4
    b4ee:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_3;
    b4f0:	88 e0       	ldi	r24, 0x08	; 8
    b4f2:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b4f4:	81 e0       	ldi	r24, 0x01	; 1
    b4f6:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b4f8:	85 e0       	ldi	r24, 0x05	; 5
    b4fa:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b4fc:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_conf);
    b4fe:	24 e0       	ldi	r18, 0x04	; 4
    b500:	38 e0       	ldi	r19, 0x08	; 8
    b502:	41 e0       	ldi	r20, 0x01	; 1
    b504:	55 e0       	ldi	r21, 0x05	; 5
    b506:	60 e0       	ldi	r22, 0x00	; 0
    b508:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart7Chan = pt_uartChanHndl;
    b50c:	00 93 cc 22 	sts	0x22CC, r16
    b510:	10 93 cd 22 	sts	0x22CD, r17
    b514:	1f c0       	rjmp	.+62     	; 0xb554 <hal_requestUartChannel+0x2c0>

         break;

         case UART_8:

            pt_uartChanHndl->pt_uart = &USARTF1;
    b516:	80 eb       	ldi	r24, 0xB0	; 176
    b518:	9b e0       	ldi	r25, 0x0B	; 11
    b51a:	f8 01       	movw	r30, r16
    b51c:	81 87       	std	Z+9, r24	; 0x09
    b51e:	92 87       	std	Z+10, r25	; 0x0a
            /*---------------------------------------------------------------*
             * Configure the output pins the console will use.
             *---------------------------------------------------------------*/
            t_conf.c_inputMask    = PIN_6;
    b520:	80 e4       	ldi	r24, 0x40	; 64
    b522:	8e 83       	std	Y+6, r24	; 0x06
            t_conf.c_outputMask   = PIN_7;
    b524:	80 e8       	ldi	r24, 0x80	; 128
    b526:	8f 83       	std	Y+7, r24	; 0x07
            t_conf.b_setOutputLow = true;
    b528:	81 e0       	ldi	r24, 0x01	; 1
    b52a:	88 87       	std	Y+8, r24	; 0x08
            t_conf.t_inConf       = PULLUP;//TOTEM;
    b52c:	85 e0       	ldi	r24, 0x05	; 5
    b52e:	89 87       	std	Y+9, r24	; 0x09
            t_conf.t_outConf      = TOTEM;
    b530:	1a 86       	std	Y+10, r1	; 0x0a
            t_gErr = hal_configureGpioPort( GPIO_PORTF, t_conf);
    b532:	20 e4       	ldi	r18, 0x40	; 64
    b534:	30 e8       	ldi	r19, 0x80	; 128
    b536:	41 e0       	ldi	r20, 0x01	; 1
    b538:	55 e0       	ldi	r21, 0x05	; 5
    b53a:	60 e0       	ldi	r22, 0x00	; 0
    b53c:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
            gt_intChanMap.pt_uart8Chan = pt_uartChanHndl;
    b540:	00 93 ce 22 	sts	0x22CE, r16
    b544:	10 93 cf 22 	sts	0x22CF, r17
    b548:	05 c0       	rjmp	.+10     	; 0xb554 <hal_requestUartChannel+0x2c0>
      }/*End switch( t_chanId)*/

   }/*End if( pt_uartChanHndl == NULL)*/
   else /*No*/
   {
      HAL_END_CRITICAL();//Enable interrupts
    b54a:	89 81       	ldd	r24, Y+1	; 0x01
    b54c:	8f bf       	out	0x3f, r24	; 63
    b54e:	29 ef       	ldi	r18, 0xF9	; 249
    b550:	3f ef       	ldi	r19, 0xFF	; 255
    b552:	04 c0       	rjmp	.+8      	; 0xb55c <hal_requestUartChannel+0x2c8>
      return (t_UARTHNDL)UART_CHANNEL_OPEN;
   }

   HAL_END_CRITICAL();//Enable interrupts
    b554:	89 81       	ldd	r24, Y+1	; 0x01
    b556:	8f bf       	out	0x3f, r24	; 63

   return (t_UARTHNDL)t_linkHndl;
    b558:	2a 81       	ldd	r18, Y+2	; 0x02
    b55a:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End hal_requestUartChannel*/
    b55c:	c9 01       	movw	r24, r18
    b55e:	2a 96       	adiw	r28, 0x0a	; 10
    b560:	cd bf       	out	0x3d, r28	; 61
    b562:	de bf       	out	0x3e, r29	; 62
    b564:	cf 91       	pop	r28
    b566:	df 91       	pop	r29
    b568:	1f 91       	pop	r17
    b56a:	0f 91       	pop	r16
    b56c:	ff 90       	pop	r15
    b56e:	08 95       	ret

0000b570 <hal_uartWriteBlock>:
 * Write a block of data to a particular UART channel.
 *---------------------------------------------------------------------------*/
t_uartError hal_uartWriteBlock( t_UARTHNDL t_handle,
								        int8_t *pc_txBuffer,
								        uint16_t s_numBytes)
{
    b570:	8f 92       	push	r8
    b572:	9f 92       	push	r9
    b574:	af 92       	push	r10
    b576:	bf 92       	push	r11
    b578:	cf 92       	push	r12
    b57a:	df 92       	push	r13
    b57c:	ef 92       	push	r14
    b57e:	ff 92       	push	r15
    b580:	0f 93       	push	r16
    b582:	1f 93       	push	r17
    b584:	df 93       	push	r29
    b586:	cf 93       	push	r28
    b588:	cd b7       	in	r28, 0x3d	; 61
    b58a:	de b7       	in	r29, 0x3e	; 62
    b58c:	61 97       	sbiw	r28, 0x11	; 17
    b58e:	cd bf       	out	0x3d, r28	; 61
    b590:	de bf       	out	0x3e, r29	; 62
    b592:	88 8b       	std	Y+16, r24	; 0x10
    b594:	99 8b       	std	Y+17, r25	; 0x11

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b596:	8f b7       	in	r24, 0x3f	; 63
    b598:	89 83       	std	Y+1, r24	; 0x01
    b59a:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b59c:	e8 89       	ldd	r30, Y+16	; 0x10
    b59e:	f9 89       	ldd	r31, Y+17	; 0x11
    b5a0:	20 91 0c 21 	lds	r18, 0x210C
    b5a4:	30 91 0d 21 	lds	r19, 0x210D
    b5a8:	84 81       	ldd	r24, Z+4	; 0x04
    b5aa:	95 81       	ldd	r25, Z+5	; 0x05
    b5ac:	82 17       	cp	r24, r18
    b5ae:	93 07       	cpc	r25, r19
    b5b0:	21 f0       	breq	.+8      	; 0xb5ba <hal_uartWriteBlock+0x4a>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b5b2:	89 81       	ldd	r24, Y+1	; 0x01
    b5b4:	8f bf       	out	0x3f, r24	; 63
    b5b6:	8e ef       	ldi	r24, 0xFE	; 254
    b5b8:	c2 c0       	rjmp	.+388    	; 0xb73e <hal_uartWriteBlock+0x1ce>
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    b5ba:	e8 89       	ldd	r30, Y+16	; 0x10
    b5bc:	f9 89       	ldd	r31, Y+17	; 0x11
    b5be:	80 80       	ld	r8, Z
    b5c0:	91 80       	ldd	r9, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_txBusLocked == true)
    b5c2:	d4 01       	movw	r26, r8
    b5c4:	1b 96       	adiw	r26, 0x0b	; 11
    b5c6:	8c 91       	ld	r24, X
    b5c8:	88 23       	and	r24, r24
    b5ca:	21 f0       	breq	.+8      	; 0xb5d4 <hal_uartWriteBlock+0x64>
	{
      HAL_END_CRITICAL();//Enable interrupts
    b5cc:	89 81       	ldd	r24, Y+1	; 0x01
    b5ce:	8f bf       	out	0x3f, r24	; 63
    b5d0:	81 ef       	ldi	r24, 0xF1	; 241
    b5d2:	b5 c0       	rjmp	.+362    	; 0xb73e <hal_uartWriteBlock+0x1ce>
   	return UART_BUSY; /*Yes*/
   }

   pt_uartChanHndl->b_txBusLocked = true;
    b5d4:	81 e0       	ldi	r24, 0x01	; 1
    b5d6:	f4 01       	movw	r30, r8
    b5d8:	83 87       	std	Z+11, r24	; 0x0b

   pt_uartChanHndl->pt_uart->CTRLA &= ~USART_DREINTLVL_HI_gc;
    b5da:	01 84       	ldd	r0, Z+9	; 0x09
    b5dc:	f2 85       	ldd	r31, Z+10	; 0x0a
    b5de:	e0 2d       	mov	r30, r0
    b5e0:	83 81       	ldd	r24, Z+3	; 0x03
    b5e2:	8c 7f       	andi	r24, 0xFC	; 252
    b5e4:	83 83       	std	Z+3, r24	; 0x03

   HAL_END_CRITICAL();//Enable interrupts
    b5e6:	89 81       	ldd	r24, Y+1	; 0x01
    b5e8:	8f bf       	out	0x3f, r24	; 63

   pt_uartChanHndl->pc_txData = pc_txBuffer;
    b5ea:	d4 01       	movw	r26, r8
    b5ec:	1d 96       	adiw	r26, 0x0d	; 13
    b5ee:	6d 93       	st	X+, r22
    b5f0:	7c 93       	st	X, r23
    b5f2:	1e 97       	sbiw	r26, 0x0e	; 14
   pt_uartChanHndl->s_txBufLength = s_numBytes;
    b5f4:	51 96       	adiw	r26, 0x11	; 17
    b5f6:	4d 93       	st	X+, r20
    b5f8:	5c 93       	st	X, r21
    b5fa:	52 97       	sbiw	r26, 0x12	; 18
   pt_uartChanHndl->s_txBufIndex = 0;
    b5fc:	55 96       	adiw	r26, 0x15	; 21
    b5fe:	1d 92       	st	X+, r1
    b600:	1c 92       	st	X, r1
    b602:	56 97       	sbiw	r26, 0x16	; 22
	/*------------------------------------------------------------------------*
    * Are interrupts enabled, is this function being called from an
    * active int, or is the tx callback function not defined? If so, then
    * transmit the block of data "in-place".
    *------------------------------------------------------------------------*/
   if( (HAL_ARE_INTS_EN() == 0) ||
    b604:	0f b6       	in	r0, 0x3f	; 63
    b606:	07 fe       	sbrs	r0, 7
    b608:	1c c0       	rjmp	.+56     	; 0xb642 <hal_uartWriteBlock+0xd2>
    b60a:	80 91 a0 00 	lds	r24, 0x00A0
    b60e:	81 30       	cpi	r24, 0x01	; 1
    b610:	c1 f0       	breq	.+48     	; 0xb642 <hal_uartWriteBlock+0xd2>
    b612:	5f 96       	adiw	r26, 0x1f	; 31
    b614:	8d 91       	ld	r24, X+
    b616:	9c 91       	ld	r25, X
    b618:	90 97       	sbiw	r26, 0x20	; 32
    b61a:	89 2b       	or	r24, r25
    b61c:	81 f5       	brne	.+96     	; 0xb67e <hal_uartWriteBlock+0x10e>
    b61e:	11 c0       	rjmp	.+34     	; 0xb642 <hal_uartWriteBlock+0xd2>
      for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength; s_index++)
      {
         /*------------------------------------------------------------------*
          * Wait for room to become available in the TX buffer.
          *------------------------------------------------------------------*/
         while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    b620:	fa 01       	movw	r30, r20
    b622:	81 81       	ldd	r24, Z+1	; 0x01
    b624:	85 ff       	sbrs	r24, 5
    b626:	fc cf       	rjmp	.-8      	; 0xb620 <hal_uartWriteBlock+0xb0>

         /*------------------------------------------------------------------*
          * Get a ptr to the link's element- which is the area where the UART
          * module information is being stored.
          *------------------------------------------------------------------*/
         pt_uartChanHndl->pt_uart->DATA = pt_uartChanHndl->pc_txData[s_index];
    b628:	d4 01       	movw	r26, r8
    b62a:	1d 96       	adiw	r26, 0x0d	; 13
    b62c:	ed 91       	ld	r30, X+
    b62e:	fc 91       	ld	r31, X
    b630:	1e 97       	sbiw	r26, 0x0e	; 14
    b632:	e2 0f       	add	r30, r18
    b634:	f3 1f       	adc	r31, r19
    b636:	80 81       	ld	r24, Z
    b638:	fa 01       	movw	r30, r20
    b63a:	80 83       	st	Z, r24
       (HAL_IS_ACTIVE_INT() == 1) ||
       (pt_uartChanHndl->pf_txCallBack == NULL))
   {
      uint16_t s_index;
   
      for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength; s_index++)
    b63c:	2f 5f       	subi	r18, 0xFF	; 255
    b63e:	3f 4f       	sbci	r19, 0xFF	; 255
    b640:	02 c0       	rjmp	.+4      	; 0xb646 <hal_uartWriteBlock+0xd6>
    b642:	20 e0       	ldi	r18, 0x00	; 0
    b644:	30 e0       	ldi	r19, 0x00	; 0
    b646:	d4 01       	movw	r26, r8
    b648:	51 96       	adiw	r26, 0x11	; 17
    b64a:	8d 91       	ld	r24, X+
    b64c:	9c 91       	ld	r25, X
    b64e:	52 97       	sbiw	r26, 0x12	; 18
    b650:	28 17       	cp	r18, r24
    b652:	39 07       	cpc	r19, r25
    b654:	28 f4       	brcc	.+10     	; 0xb660 <hal_uartWriteBlock+0xf0>
      {
         /*------------------------------------------------------------------*
          * Wait for room to become available in the TX buffer.
          *------------------------------------------------------------------*/
         while( !(pt_uartChanHndl->pt_uart->STATUS & USART_DREIF_bm));
    b656:	19 96       	adiw	r26, 0x09	; 9
    b658:	4d 91       	ld	r20, X+
    b65a:	5c 91       	ld	r21, X
    b65c:	1a 97       	sbiw	r26, 0x0a	; 10
    b65e:	e0 cf       	rjmp	.-64     	; 0xb620 <hal_uartWriteBlock+0xb0>
         pt_uartChanHndl->pt_uart->DATA = pt_uartChanHndl->pc_txData[s_index];

      }/*End for( s_index = 0; s_index < pt_uartChanHndl->s_txBufLength;
         s_index++)*/

      if( pt_uartChanHndl->pf_txCallBack != NULL)
    b660:	d4 01       	movw	r26, r8
    b662:	5f 96       	adiw	r26, 0x1f	; 31
    b664:	ed 91       	ld	r30, X+
    b666:	fc 91       	ld	r31, X
    b668:	90 97       	sbiw	r26, 0x20	; 32
    b66a:	30 97       	sbiw	r30, 0x00	; 0
    b66c:	09 f0       	breq	.+2      	; 0xb670 <hal_uartWriteBlock+0x100>
         pt_uartChanHndl->pf_txCallBack( pt_uartChanHndl->s_txBufLength);
    b66e:	19 95       	eicall

      pt_uartChanHndl->s_txBufLength = 0;
    b670:	f4 01       	movw	r30, r8
    b672:	11 8a       	std	Z+17, r1	; 0x11
    b674:	12 8a       	std	Z+18, r1	; 0x12
      pt_uartChanHndl->pc_txData = NULL;
    b676:	15 86       	std	Z+13, r1	; 0x0d
    b678:	16 86       	std	Z+14, r1	; 0x0e
      pt_uartChanHndl->b_txBusLocked = false;
    b67a:	13 86       	std	Z+11, r1	; 0x0b
    b67c:	5f c0       	rjmp	.+190    	; 0xb73c <hal_uartWriteBlock+0x1cc>
   else
   {
	   /*---------------------------------------------------------------------*
       * Does this transaction use DMA?
       *---------------------------------------------------------------------*/
      if( pt_uartChanHndl->t_txDmaHndl > 0)
    b67e:	d4 01       	movw	r26, r8
    b680:	59 96       	adiw	r26, 0x19	; 25
    b682:	8d 91       	ld	r24, X+
    b684:	9c 91       	ld	r25, X
    b686:	5a 97       	sbiw	r26, 0x1a	; 26
    b688:	18 16       	cp	r1, r24
    b68a:	19 06       	cpc	r1, r25
    b68c:	0c f0       	brlt	.+2      	; 0xb690 <hal_uartWriteBlock+0x120>
    b68e:	4e c0       	rjmp	.+156    	; 0xb72c <hal_uartWriteBlock+0x1bc>
      {
         t_dmaChanConfig t_chanConf;
         t_dmaTriggerSource t_trigger;

         switch( pt_uartChanHndl->t_id)
    b690:	8c 91       	ld	r24, X
    b692:	8c 30       	cpi	r24, 0x0C	; 12
    b694:	c1 f0       	breq	.+48     	; 0xb6c6 <hal_uartWriteBlock+0x156>
    b696:	8d 30       	cpi	r24, 0x0D	; 13
    b698:	38 f4       	brcc	.+14     	; 0xb6a8 <hal_uartWriteBlock+0x138>
    b69a:	86 30       	cpi	r24, 0x06	; 6
    b69c:	81 f0       	breq	.+32     	; 0xb6be <hal_uartWriteBlock+0x14e>
    b69e:	89 30       	cpi	r24, 0x09	; 9
    b6a0:	81 f0       	breq	.+32     	; 0xb6c2 <hal_uartWriteBlock+0x152>
    b6a2:	83 30       	cpi	r24, 0x03	; 3
    b6a4:	51 f4       	brne	.+20     	; 0xb6ba <hal_uartWriteBlock+0x14a>
    b6a6:	07 c0       	rjmp	.+14     	; 0xb6b6 <hal_uartWriteBlock+0x146>
    b6a8:	82 31       	cpi	r24, 0x12	; 18
    b6aa:	89 f0       	breq	.+34     	; 0xb6ce <hal_uartWriteBlock+0x15e>
    b6ac:	85 31       	cpi	r24, 0x15	; 21
    b6ae:	89 f0       	breq	.+34     	; 0xb6d2 <hal_uartWriteBlock+0x162>
    b6b0:	8f 30       	cpi	r24, 0x0F	; 15
    b6b2:	19 f4       	brne	.+6      	; 0xb6ba <hal_uartWriteBlock+0x14a>
    b6b4:	0a c0       	rjmp	.+20     	; 0xb6ca <hal_uartWriteBlock+0x15a>
    b6b6:	6f e4       	ldi	r22, 0x4F	; 79
    b6b8:	0d c0       	rjmp	.+26     	; 0xb6d4 <hal_uartWriteBlock+0x164>
    b6ba:	6c e4       	ldi	r22, 0x4C	; 76
    b6bc:	0b c0       	rjmp	.+22     	; 0xb6d4 <hal_uartWriteBlock+0x164>
    b6be:	6c e6       	ldi	r22, 0x6C	; 108
    b6c0:	09 c0       	rjmp	.+18     	; 0xb6d4 <hal_uartWriteBlock+0x164>
               t_trigger = UART2_DATA_REG_EMPTY;
            break;

            case UART_3:
               t_trigger = UART3_DATA_REG_EMPTY;
            break;
    b6c2:	6f e6       	ldi	r22, 0x6F	; 111
    b6c4:	07 c0       	rjmp	.+14     	; 0xb6d4 <hal_uartWriteBlock+0x164>

            case UART_4:
               t_trigger = UART4_DATA_REG_EMPTY;
            break;
    b6c6:	6c e8       	ldi	r22, 0x8C	; 140
    b6c8:	05 c0       	rjmp	.+10     	; 0xb6d4 <hal_uartWriteBlock+0x164>

            case UART_5:
               t_trigger = UART5_DATA_REG_EMPTY;
            break;
    b6ca:	6f e8       	ldi	r22, 0x8F	; 143
    b6cc:	03 c0       	rjmp	.+6      	; 0xb6d4 <hal_uartWriteBlock+0x164>

            case UART_6:
               t_trigger = UART6_DATA_REG_EMPTY;
            break;
    b6ce:	6c ea       	ldi	r22, 0xAC	; 172
    b6d0:	01 c0       	rjmp	.+2      	; 0xb6d4 <hal_uartWriteBlock+0x164>

            case UART_7:
               t_trigger = UART7_DATA_REG_EMPTY;
            break;
    b6d2:	6f ea       	ldi	r22, 0xAF	; 175
               t_trigger = UART1_DATA_REG_EMPTY;
            break;

         }/*End switch( pt_uartChanHndl->t_id)*/

         t_chanConf.pi_srcAddress   = (uint32_t *)&pt_uartChanHndl->pc_txData[0];
    b6d4:	f4 01       	movw	r30, r8
    b6d6:	85 85       	ldd	r24, Z+13	; 0x0d
    b6d8:	96 85       	ldd	r25, Z+14	; 0x0e
    b6da:	8a 83       	std	Y+2, r24	; 0x02
    b6dc:	9b 83       	std	Y+3, r25	; 0x03
         t_chanConf.pi_destAddress  = (uint32_t *)&pt_uartChanHndl->pt_uart->DATA;
    b6de:	c1 84       	ldd	r12, Z+9	; 0x09
    b6e0:	d2 84       	ldd	r13, Z+10	; 0x0a
    b6e2:	cc 82       	std	Y+4, r12	; 0x04
    b6e4:	dd 82       	std	Y+5, r13	; 0x05
         t_chanConf.t_srcAddDir     = INCREMENT;
    b6e6:	81 e0       	ldi	r24, 0x01	; 1
    b6e8:	8e 83       	std	Y+6, r24	; 0x06
         t_chanConf.t_destAddDir    = FIXED;
    b6ea:	1f 82       	std	Y+7, r1	; 0x07
         t_chanConf.t_srcAddReload  = RELOAD_END_OF_BLOCK;
    b6ec:	88 87       	std	Y+8, r24	; 0x08
         t_chanConf.t_destAddReload = NO_RELOAD;
    b6ee:	19 86       	std	Y+9, r1	; 0x09
         t_chanConf.s_blockSize     = s_numBytes;
    b6f0:	4a 87       	std	Y+10, r20	; 0x0a
    b6f2:	5b 87       	std	Y+11, r21	; 0x0b
         t_chanConf.t_burstMode     = ONE_BYTE;
    b6f4:	1c 86       	std	Y+12, r1	; 0x0c
         t_chanConf.t_transferType  = SINGLE_SHOT;
    b6f6:	8d 87       	std	Y+13, r24	; 0x0d
         t_chanConf.t_triggerSrc    = t_trigger;
    b6f8:	6e 87       	std	Y+14, r22	; 0x0e
         t_chanConf.c_repeatCount   = 0;
    b6fa:	1f 86       	std	Y+15, r1	; 0x0f

         hal_configureDmaChannel( pt_uartChanHndl->t_txDmaHndl,
    b6fc:	81 8d       	ldd	r24, Z+25	; 0x19
    b6fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    b700:	aa 80       	ldd	r10, Y+2	; 0x02
    b702:	bb 80       	ldd	r11, Y+3	; 0x03
    b704:	ee 24       	eor	r14, r14
    b706:	e3 94       	inc	r14
    b708:	ff 24       	eor	r15, r15
    b70a:	01 e0       	ldi	r16, 0x01	; 1
    b70c:	10 e0       	ldi	r17, 0x00	; 0
    b70e:	2a 85       	ldd	r18, Y+10	; 0x0a
    b710:	3b 85       	ldd	r19, Y+11	; 0x0b
    b712:	40 e0       	ldi	r20, 0x00	; 0
    b714:	51 e0       	ldi	r21, 0x01	; 1
    b716:	70 e0       	ldi	r23, 0x00	; 0
    b718:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                                  t_chanConf);

         hal_dmaEnableChannel( pt_uartChanHndl->t_txDmaHndl);
    b71c:	d4 01       	movw	r26, r8
    b71e:	59 96       	adiw	r26, 0x19	; 25
    b720:	8d 91       	ld	r24, X+
    b722:	9c 91       	ld	r25, X
    b724:	5a 97       	sbiw	r26, 0x1a	; 26
    b726:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>
    b72a:	08 c0       	rjmp	.+16     	; 0xb73c <hal_uartWriteBlock+0x1cc>
      else
      {
         /*------------------------------------------------------------------*
          * Transmit data via the DRE interrupt.
          *------------------------------------------------------------------*/
         pt_uartChanHndl->pt_uart->CTRLA |= USART_DREINTLVL_HI_gc;
    b72c:	d4 01       	movw	r26, r8
    b72e:	19 96       	adiw	r26, 0x09	; 9
    b730:	ed 91       	ld	r30, X+
    b732:	fc 91       	ld	r31, X
    b734:	1a 97       	sbiw	r26, 0x0a	; 10
    b736:	83 81       	ldd	r24, Z+3	; 0x03
    b738:	83 60       	ori	r24, 0x03	; 3
    b73a:	83 83       	std	Z+3, r24	; 0x03
    b73c:	80 e0       	ldi	r24, 0x00	; 0
      }
   }

   return UART_PASSED;

}/*End hal_uartWriteBlock*/
    b73e:	61 96       	adiw	r28, 0x11	; 17
    b740:	cd bf       	out	0x3d, r28	; 61
    b742:	de bf       	out	0x3e, r29	; 62
    b744:	cf 91       	pop	r28
    b746:	df 91       	pop	r29
    b748:	1f 91       	pop	r17
    b74a:	0f 91       	pop	r16
    b74c:	ff 90       	pop	r15
    b74e:	ef 90       	pop	r14
    b750:	df 90       	pop	r13
    b752:	cf 90       	pop	r12
    b754:	bf 90       	pop	r11
    b756:	af 90       	pop	r10
    b758:	9f 90       	pop	r9
    b75a:	8f 90       	pop	r8
    b75c:	08 95       	ret

0000b75e <hal_uartReadBlock>:
 * Read a block of data from a particular UART channel.
 *---------------------------------------------------------------------------*/
t_uartError hal_uartReadBlock( t_UARTHNDL t_handle,
								       int8_t *pc_rxBuffer,
								       uint16_t s_numBytes)
{
    b75e:	8f 92       	push	r8
    b760:	9f 92       	push	r9
    b762:	af 92       	push	r10
    b764:	bf 92       	push	r11
    b766:	cf 92       	push	r12
    b768:	df 92       	push	r13
    b76a:	ef 92       	push	r14
    b76c:	ff 92       	push	r15
    b76e:	0f 93       	push	r16
    b770:	1f 93       	push	r17
    b772:	df 93       	push	r29
    b774:	cf 93       	push	r28
    b776:	cd b7       	in	r28, 0x3d	; 61
    b778:	de b7       	in	r29, 0x3e	; 62
    b77a:	61 97       	sbiw	r28, 0x11	; 17
    b77c:	cd bf       	out	0x3d, r28	; 61
    b77e:	de bf       	out	0x3e, r29	; 62
    b780:	88 8b       	std	Y+16, r24	; 0x10
    b782:	99 8b       	std	Y+17, r25	; 0x11

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b784:	8f b7       	in	r24, 0x3f	; 63
    b786:	89 83       	std	Y+1, r24	; 0x01
    b788:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is this a valid handle to a UART module?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_uartChanHndlList) ==
    b78a:	e8 89       	ldd	r30, Y+16	; 0x10
    b78c:	f9 89       	ldd	r31, Y+17	; 0x11
    b78e:	20 91 0c 21 	lds	r18, 0x210C
    b792:	30 91 0d 21 	lds	r19, 0x210D
    b796:	84 81       	ldd	r24, Z+4	; 0x04
    b798:	95 81       	ldd	r25, Z+5	; 0x05
    b79a:	82 17       	cp	r24, r18
    b79c:	93 07       	cpc	r25, r19
    b79e:	21 f0       	breq	.+8      	; 0xb7a8 <hal_uartReadBlock+0x4a>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
    b7a0:	89 81       	ldd	r24, Y+1	; 0x01
    b7a2:	8f bf       	out	0x3f, r24	; 63
    b7a4:	8e ef       	ldi	r24, 0xFE	; 254
    b7a6:	87 c0       	rjmp	.+270    	; 0xb8b6 <hal_uartReadBlock+0x158>
      return UART_INVALID_HANDLE;
   }

   pt_uartChanHndl = (t_uartChanHndl *)
    b7a8:	e8 89       	ldd	r30, Y+16	; 0x10
    b7aa:	f9 89       	ldd	r31, Y+17	; 0x11
    b7ac:	80 80       	ld	r8, Z
    b7ae:	91 80       	ldd	r9, Z+1	; 0x01
   UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

	/*------------------------------------------------------------------------*
	 * Is the bus locked by someone other than this user?
	 *------------------------------------------------------------------------*/
	if( pt_uartChanHndl->b_rxBusLocked == true)
    b7b0:	d4 01       	movw	r26, r8
    b7b2:	1c 96       	adiw	r26, 0x0c	; 12
    b7b4:	8c 91       	ld	r24, X
    b7b6:	88 23       	and	r24, r24
    b7b8:	21 f0       	breq	.+8      	; 0xb7c2 <hal_uartReadBlock+0x64>
	{
      HAL_END_CRITICAL();//Enable interrupts
    b7ba:	89 81       	ldd	r24, Y+1	; 0x01
    b7bc:	8f bf       	out	0x3f, r24	; 63
    b7be:	81 ef       	ldi	r24, 0xF1	; 241
    b7c0:	7a c0       	rjmp	.+244    	; 0xb8b6 <hal_uartReadBlock+0x158>
   	return UART_BUSY; /*Yes*/
   }

   pt_uartChanHndl->b_rxBusLocked = true;
    b7c2:	81 e0       	ldi	r24, 0x01	; 1
    b7c4:	f4 01       	movw	r30, r8
    b7c6:	84 87       	std	Z+12, r24	; 0x0c

	/*------------------------------------------------------------------------*
    * Disable interrupts until its known whether the transaction uses DMA.
    *------------------------------------------------------------------------*/
   pt_uartChanHndl->pt_uart->CTRLA &= ~USART_RXCINTLVL_gm;
    b7c8:	01 84       	ldd	r0, Z+9	; 0x09
    b7ca:	f2 85       	ldd	r31, Z+10	; 0x0a
    b7cc:	e0 2d       	mov	r30, r0
    b7ce:	83 81       	ldd	r24, Z+3	; 0x03
    b7d0:	8f 7c       	andi	r24, 0xCF	; 207
    b7d2:	83 83       	std	Z+3, r24	; 0x03

   HAL_END_CRITICAL();//Enable interrupts
    b7d4:	89 81       	ldd	r24, Y+1	; 0x01
    b7d6:	8f bf       	out	0x3f, r24	; 63

   pt_uartChanHndl->pc_rxData = pc_rxBuffer;
    b7d8:	d4 01       	movw	r26, r8
    b7da:	1f 96       	adiw	r26, 0x0f	; 15
    b7dc:	6d 93       	st	X+, r22
    b7de:	7c 93       	st	X, r23
    b7e0:	50 97       	sbiw	r26, 0x10	; 16
   pt_uartChanHndl->s_rxBufLength = s_numBytes;
    b7e2:	53 96       	adiw	r26, 0x13	; 19
    b7e4:	4d 93       	st	X+, r20
    b7e6:	5c 93       	st	X, r21
    b7e8:	54 97       	sbiw	r26, 0x14	; 20
   pt_uartChanHndl->s_rxBufIndex = 0;
    b7ea:	57 96       	adiw	r26, 0x17	; 23
    b7ec:	1d 92       	st	X+, r1
    b7ee:	1c 92       	st	X, r1
    b7f0:	58 97       	sbiw	r26, 0x18	; 24

	/*------------------------------------------------------------------------*
    * Does this transaction use DMA?
    *------------------------------------------------------------------------*/
   if( pt_uartChanHndl->t_rxDmaHndl > 0)
    b7f2:	5b 96       	adiw	r26, 0x1b	; 27
    b7f4:	8d 91       	ld	r24, X+
    b7f6:	9c 91       	ld	r25, X
    b7f8:	5c 97       	sbiw	r26, 0x1c	; 28
    b7fa:	18 16       	cp	r1, r24
    b7fc:	19 06       	cpc	r1, r25
    b7fe:	0c f0       	brlt	.+2      	; 0xb802 <hal_uartReadBlock+0xa4>
    b800:	51 c0       	rjmp	.+162    	; 0xb8a4 <hal_uartReadBlock+0x146>
   {
      t_dmaChanConfig t_chanConf;
      t_dmaTriggerSource t_trigger;

      switch( pt_uartChanHndl->t_id)
    b802:	8c 91       	ld	r24, X
    b804:	8c 30       	cpi	r24, 0x0C	; 12
    b806:	c1 f0       	breq	.+48     	; 0xb838 <hal_uartReadBlock+0xda>
    b808:	8d 30       	cpi	r24, 0x0D	; 13
    b80a:	38 f4       	brcc	.+14     	; 0xb81a <hal_uartReadBlock+0xbc>
    b80c:	86 30       	cpi	r24, 0x06	; 6
    b80e:	81 f0       	breq	.+32     	; 0xb830 <hal_uartReadBlock+0xd2>
    b810:	89 30       	cpi	r24, 0x09	; 9
    b812:	81 f0       	breq	.+32     	; 0xb834 <hal_uartReadBlock+0xd6>
    b814:	83 30       	cpi	r24, 0x03	; 3
    b816:	51 f4       	brne	.+20     	; 0xb82c <hal_uartReadBlock+0xce>
    b818:	07 c0       	rjmp	.+14     	; 0xb828 <hal_uartReadBlock+0xca>
    b81a:	82 31       	cpi	r24, 0x12	; 18
    b81c:	89 f0       	breq	.+34     	; 0xb840 <hal_uartReadBlock+0xe2>
    b81e:	85 31       	cpi	r24, 0x15	; 21
    b820:	89 f0       	breq	.+34     	; 0xb844 <hal_uartReadBlock+0xe6>
    b822:	8f 30       	cpi	r24, 0x0F	; 15
    b824:	19 f4       	brne	.+6      	; 0xb82c <hal_uartReadBlock+0xce>
    b826:	0a c0       	rjmp	.+20     	; 0xb83c <hal_uartReadBlock+0xde>
    b828:	ee e4       	ldi	r30, 0x4E	; 78
    b82a:	0d c0       	rjmp	.+26     	; 0xb846 <hal_uartReadBlock+0xe8>
    b82c:	eb e4       	ldi	r30, 0x4B	; 75
    b82e:	0b c0       	rjmp	.+22     	; 0xb846 <hal_uartReadBlock+0xe8>
    b830:	eb e6       	ldi	r30, 0x6B	; 107
    b832:	09 c0       	rjmp	.+18     	; 0xb846 <hal_uartReadBlock+0xe8>
            t_trigger = UART2_RX_COMPLETE;
         break;

         case UART_3:
            t_trigger = UART3_RX_COMPLETE;
         break;
    b834:	ee e6       	ldi	r30, 0x6E	; 110
    b836:	07 c0       	rjmp	.+14     	; 0xb846 <hal_uartReadBlock+0xe8>

         case UART_4:
            t_trigger = UART4_RX_COMPLETE;
         break;
    b838:	eb e8       	ldi	r30, 0x8B	; 139
    b83a:	05 c0       	rjmp	.+10     	; 0xb846 <hal_uartReadBlock+0xe8>

         case UART_5:
            t_trigger = UART5_RX_COMPLETE;
         break;
    b83c:	ee e8       	ldi	r30, 0x8E	; 142
    b83e:	03 c0       	rjmp	.+6      	; 0xb846 <hal_uartReadBlock+0xe8>

         case UART_6:
            t_trigger = UART6_RX_COMPLETE;
         break;
    b840:	eb ea       	ldi	r30, 0xAB	; 171
    b842:	01 c0       	rjmp	.+2      	; 0xb846 <hal_uartReadBlock+0xe8>

         case UART_7:
            t_trigger = UART7_RX_COMPLETE;
         break;
    b844:	ee ea       	ldi	r30, 0xAE	; 174
            t_trigger = UART1_RX_COMPLETE;
         break;

      }/*End switch( pt_uartChanHndl->t_id)*/

      t_chanConf.pi_srcAddress   = (uint32_t *)&pt_uartChanHndl->pt_uart->DATA;
    b846:	d4 01       	movw	r26, r8
    b848:	19 96       	adiw	r26, 0x09	; 9
    b84a:	ac 90       	ld	r10, X
    b84c:	19 97       	sbiw	r26, 0x09	; 9
    b84e:	1a 96       	adiw	r26, 0x0a	; 10
    b850:	bc 90       	ld	r11, X
    b852:	1a 97       	sbiw	r26, 0x0a	; 10
    b854:	aa 82       	std	Y+2, r10	; 0x02
    b856:	bb 82       	std	Y+3, r11	; 0x03
      t_chanConf.pi_destAddress  = (uint32_t *)pc_rxBuffer;
    b858:	6c 83       	std	Y+4, r22	; 0x04
    b85a:	7d 83       	std	Y+5, r23	; 0x05
      t_chanConf.t_srcAddDir     = FIXED;
    b85c:	1e 82       	std	Y+6, r1	; 0x06
      t_chanConf.t_destAddDir    = INCREMENT;
    b85e:	81 e0       	ldi	r24, 0x01	; 1
    b860:	8f 83       	std	Y+7, r24	; 0x07
      t_chanConf.t_srcAddReload  = NO_RELOAD;
    b862:	18 86       	std	Y+8, r1	; 0x08
      t_chanConf.t_destAddReload = RELOAD_END_OF_BLOCK;
    b864:	89 87       	std	Y+9, r24	; 0x09
      t_chanConf.s_blockSize     = s_numBytes;
    b866:	4a 87       	std	Y+10, r20	; 0x0a
    b868:	5b 87       	std	Y+11, r21	; 0x0b
      t_chanConf.t_burstMode     = ONE_BYTE;
    b86a:	1c 86       	std	Y+12, r1	; 0x0c
      t_chanConf.t_transferType  = SINGLE_SHOT;
    b86c:	8d 87       	std	Y+13, r24	; 0x0d
      t_chanConf.t_triggerSrc    = t_trigger;
    b86e:	ee 87       	std	Y+14, r30	; 0x0e
      t_chanConf.c_repeatCount   = 0;
    b870:	1f 86       	std	Y+15, r1	; 0x0f

      hal_configureDmaChannel( pt_uartChanHndl->t_rxDmaHndl,
    b872:	5b 96       	adiw	r26, 0x1b	; 27
    b874:	8d 91       	ld	r24, X+
    b876:	9c 91       	ld	r25, X
    b878:	5c 97       	sbiw	r26, 0x1c	; 28
    b87a:	cc 80       	ldd	r12, Y+4	; 0x04
    b87c:	dd 80       	ldd	r13, Y+5	; 0x05
    b87e:	ee 24       	eor	r14, r14
    b880:	ff 24       	eor	r15, r15
    b882:	f3 94       	inc	r15
    b884:	00 e0       	ldi	r16, 0x00	; 0
    b886:	11 e0       	ldi	r17, 0x01	; 1
    b888:	2a 85       	ldd	r18, Y+10	; 0x0a
    b88a:	3b 85       	ldd	r19, Y+11	; 0x0b
    b88c:	40 e0       	ldi	r20, 0x00	; 0
    b88e:	51 e0       	ldi	r21, 0x01	; 1
    b890:	6e 2f       	mov	r22, r30
    b892:	70 e0       	ldi	r23, 0x00	; 0
    b894:	0e 94 18 21 	call	0x4230	; 0x4230 <hal_configureDmaChannel>
                               t_chanConf);

      hal_dmaEnableChannel( pt_uartChanHndl->t_rxDmaHndl);
    b898:	f4 01       	movw	r30, r8
    b89a:	83 8d       	ldd	r24, Z+27	; 0x1b
    b89c:	94 8d       	ldd	r25, Z+28	; 0x1c
    b89e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <hal_dmaEnableChannel>
    b8a2:	08 c0       	rjmp	.+16     	; 0xb8b4 <hal_uartReadBlock+0x156>
   else
   {
      /*---------------------------------------------------------------------*
       * Receive data via the RX complete interrupt.
       *---------------------------------------------------------------------*/
      pt_uartChanHndl->pt_uart->CTRLA |= USART_RXCINTLVL_HI_gc;
    b8a4:	d4 01       	movw	r26, r8
    b8a6:	19 96       	adiw	r26, 0x09	; 9
    b8a8:	ed 91       	ld	r30, X+
    b8aa:	fc 91       	ld	r31, X
    b8ac:	1a 97       	sbiw	r26, 0x0a	; 10
    b8ae:	83 81       	ldd	r24, Z+3	; 0x03
    b8b0:	80 63       	ori	r24, 0x30	; 48
    b8b2:	83 83       	std	Z+3, r24	; 0x03
    b8b4:	80 e0       	ldi	r24, 0x00	; 0
   }

   return UART_PASSED;

}/*End hal_uartReadBlock*/
    b8b6:	61 96       	adiw	r28, 0x11	; 17
    b8b8:	cd bf       	out	0x3d, r28	; 61
    b8ba:	de bf       	out	0x3e, r29	; 62
    b8bc:	cf 91       	pop	r28
    b8be:	df 91       	pop	r29
    b8c0:	1f 91       	pop	r17
    b8c2:	0f 91       	pop	r16
    b8c4:	ff 90       	pop	r15
    b8c6:	ef 90       	pop	r14
    b8c8:	df 90       	pop	r13
    b8ca:	cf 90       	pop	r12
    b8cc:	bf 90       	pop	r11
    b8ce:	af 90       	pop	r10
    b8d0:	9f 90       	pop	r9
    b8d2:	8f 90       	pop	r8
    b8d4:	08 95       	ret

0000b8d6 <hal_configureWd>:
 * Configures the DMA transaction for the channel pointed to by
 * 't_handle'.
 *---------------------------------------------------------------------------*/
t_wdError hal_configureWd( t_WDHNDL t_handle,
                           t_wdConfig t_conf)
{
    b8d6:	ef 92       	push	r14
    b8d8:	ff 92       	push	r15
    b8da:	0f 93       	push	r16
    b8dc:	1f 93       	push	r17
    b8de:	df 93       	push	r29
    b8e0:	cf 93       	push	r28
    b8e2:	00 d0       	rcall	.+0      	; 0xb8e4 <hal_configureWd+0xe>
    b8e4:	cd b7       	in	r28, 0x3d	; 61
    b8e6:	de b7       	in	r29, 0x3e	; 62
    b8e8:	8a 83       	std	Y+2, r24	; 0x02
    b8ea:	9b 83       	std	Y+3, r25	; 0x03
    b8ec:	7a 01       	movw	r14, r20
    b8ee:	8b 01       	movw	r16, r22
    b8f0:	d8 01       	movw	r26, r16
    b8f2:	c7 01       	movw	r24, r14

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    b8f4:	2f b7       	in	r18, 0x3f	; 63
    b8f6:	29 83       	std	Y+1, r18	; 0x01
    b8f8:	f8 94       	cli

   if( t_conf.i_period <= 8) /*msec*/
    b8fa:	09 97       	sbiw	r24, 0x09	; 9
    b8fc:	a1 05       	cpc	r26, r1
    b8fe:	b1 05       	cpc	r27, r1
    b900:	08 f4       	brcc	.+2      	; 0xb904 <hal_configureWd+0x2e>
    b902:	63 c0       	rjmp	.+198    	; 0xb9ca <hal_configureWd+0xf4>
    {
       t_per = WDT_PER_8CLK_gc;
    }
    else if( t_conf.i_period <= 16) /*msec*/
    b904:	81 e1       	ldi	r24, 0x11	; 17
    b906:	e8 16       	cp	r14, r24
    b908:	f1 04       	cpc	r15, r1
    b90a:	01 05       	cpc	r16, r1
    b90c:	11 05       	cpc	r17, r1
    b90e:	10 f4       	brcc	.+4      	; 0xb914 <hal_configureWd+0x3e>
    b910:	44 e0       	ldi	r20, 0x04	; 4
    b912:	5c c0       	rjmp	.+184    	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_16CLK_gc;
    }
    else if( t_conf.i_period <= 32) /*msec*/
    b914:	81 e2       	ldi	r24, 0x21	; 33
    b916:	e8 16       	cp	r14, r24
    b918:	f1 04       	cpc	r15, r1
    b91a:	01 05       	cpc	r16, r1
    b91c:	11 05       	cpc	r17, r1
    b91e:	10 f4       	brcc	.+4      	; 0xb924 <hal_configureWd+0x4e>
    b920:	48 e0       	ldi	r20, 0x08	; 8
    b922:	54 c0       	rjmp	.+168    	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_32CLK_gc;
    }
    else if( t_conf.i_period <= 64) /*msec*/
    b924:	81 e4       	ldi	r24, 0x41	; 65
    b926:	e8 16       	cp	r14, r24
    b928:	f1 04       	cpc	r15, r1
    b92a:	01 05       	cpc	r16, r1
    b92c:	11 05       	cpc	r17, r1
    b92e:	10 f4       	brcc	.+4      	; 0xb934 <hal_configureWd+0x5e>
    b930:	4c e0       	ldi	r20, 0x0C	; 12
    b932:	4c c0       	rjmp	.+152    	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_64CLK_gc;
    }
    else if( t_conf.i_period <= 125) /*msec*/
    b934:	8e e7       	ldi	r24, 0x7E	; 126
    b936:	e8 16       	cp	r14, r24
    b938:	f1 04       	cpc	r15, r1
    b93a:	01 05       	cpc	r16, r1
    b93c:	11 05       	cpc	r17, r1
    b93e:	10 f4       	brcc	.+4      	; 0xb944 <hal_configureWd+0x6e>
    b940:	40 e1       	ldi	r20, 0x10	; 16
    b942:	44 c0       	rjmp	.+136    	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_128CLK_gc;
    }
    else if( t_conf.i_period <= 250) /*msec*/
    b944:	8b ef       	ldi	r24, 0xFB	; 251
    b946:	e8 16       	cp	r14, r24
    b948:	f1 04       	cpc	r15, r1
    b94a:	01 05       	cpc	r16, r1
    b94c:	11 05       	cpc	r17, r1
    b94e:	10 f4       	brcc	.+4      	; 0xb954 <hal_configureWd+0x7e>
    b950:	44 e1       	ldi	r20, 0x14	; 20
    b952:	3c c0       	rjmp	.+120    	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_256CLK_gc;
    }
    else if( t_conf.i_period <= 500) /*msec*/
    b954:	85 ef       	ldi	r24, 0xF5	; 245
    b956:	e8 16       	cp	r14, r24
    b958:	81 e0       	ldi	r24, 0x01	; 1
    b95a:	f8 06       	cpc	r15, r24
    b95c:	80 e0       	ldi	r24, 0x00	; 0
    b95e:	08 07       	cpc	r16, r24
    b960:	80 e0       	ldi	r24, 0x00	; 0
    b962:	18 07       	cpc	r17, r24
    b964:	10 f4       	brcc	.+4      	; 0xb96a <hal_configureWd+0x94>
    b966:	48 e1       	ldi	r20, 0x18	; 24
    b968:	31 c0       	rjmp	.+98     	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_512CLK_gc;
    }
    else if( t_conf.i_period <= 1000) /*msec*/
    b96a:	89 ee       	ldi	r24, 0xE9	; 233
    b96c:	e8 16       	cp	r14, r24
    b96e:	83 e0       	ldi	r24, 0x03	; 3
    b970:	f8 06       	cpc	r15, r24
    b972:	80 e0       	ldi	r24, 0x00	; 0
    b974:	08 07       	cpc	r16, r24
    b976:	80 e0       	ldi	r24, 0x00	; 0
    b978:	18 07       	cpc	r17, r24
    b97a:	10 f4       	brcc	.+4      	; 0xb980 <hal_configureWd+0xaa>
    b97c:	4c e1       	ldi	r20, 0x1C	; 28
    b97e:	26 c0       	rjmp	.+76     	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_1KCLK_gc;
    }
    else if( t_conf.i_period <= 2000) /*msec*/
    b980:	81 ed       	ldi	r24, 0xD1	; 209
    b982:	e8 16       	cp	r14, r24
    b984:	87 e0       	ldi	r24, 0x07	; 7
    b986:	f8 06       	cpc	r15, r24
    b988:	80 e0       	ldi	r24, 0x00	; 0
    b98a:	08 07       	cpc	r16, r24
    b98c:	80 e0       	ldi	r24, 0x00	; 0
    b98e:	18 07       	cpc	r17, r24
    b990:	10 f4       	brcc	.+4      	; 0xb996 <hal_configureWd+0xc0>
    b992:	40 e2       	ldi	r20, 0x20	; 32
    b994:	1b c0       	rjmp	.+54     	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_2KCLK_gc;
    }
    else if( t_conf.i_period <= 4000) /*msec*/
    b996:	81 ea       	ldi	r24, 0xA1	; 161
    b998:	e8 16       	cp	r14, r24
    b99a:	8f e0       	ldi	r24, 0x0F	; 15
    b99c:	f8 06       	cpc	r15, r24
    b99e:	80 e0       	ldi	r24, 0x00	; 0
    b9a0:	08 07       	cpc	r16, r24
    b9a2:	80 e0       	ldi	r24, 0x00	; 0
    b9a4:	18 07       	cpc	r17, r24
    b9a6:	10 f4       	brcc	.+4      	; 0xb9ac <hal_configureWd+0xd6>
    b9a8:	44 e2       	ldi	r20, 0x24	; 36
    b9aa:	10 c0       	rjmp	.+32     	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_4KCLK_gc;
    }
    else if( t_conf.i_period <= 8000) /*msec*/
    b9ac:	81 e4       	ldi	r24, 0x41	; 65
    b9ae:	e8 16       	cp	r14, r24
    b9b0:	8f e1       	ldi	r24, 0x1F	; 31
    b9b2:	f8 06       	cpc	r15, r24
    b9b4:	80 e0       	ldi	r24, 0x00	; 0
    b9b6:	08 07       	cpc	r16, r24
    b9b8:	80 e0       	ldi	r24, 0x00	; 0
    b9ba:	18 07       	cpc	r17, r24
    b9bc:	10 f4       	brcc	.+4      	; 0xb9c2 <hal_configureWd+0xec>
    b9be:	48 e2       	ldi	r20, 0x28	; 40
    b9c0:	05 c0       	rjmp	.+10     	; 0xb9cc <hal_configureWd+0xf6>
    {
       t_per = WDT_PER_8KCLK_gc;
    }
    else
    {
      HAL_END_CRITICAL();//Enable interrupts
    b9c2:	89 81       	ldd	r24, Y+1	; 0x01
    b9c4:	8f bf       	out	0x3f, r24	; 63
    b9c6:	8c ef       	ldi	r24, 0xFC	; 252
    b9c8:	2a c0       	rjmp	.+84     	; 0xba1e <hal_configureWd+0x148>
      return WD_INVALID_PERIOD;	
    b9ca:	40 e0       	ldi	r20, 0x00	; 0
    }
    
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a watchdog timer?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_wdAccessList) == false)
    b9cc:	ea 81       	ldd	r30, Y+2	; 0x02
    b9ce:	fb 81       	ldd	r31, Y+3	; 0x03
    b9d0:	20 91 1a 21 	lds	r18, 0x211A
    b9d4:	30 91 1b 21 	lds	r19, 0x211B
    b9d8:	84 81       	ldd	r24, Z+4	; 0x04
    b9da:	95 81       	ldd	r25, Z+5	; 0x05
    b9dc:	82 17       	cp	r24, r18
    b9de:	93 07       	cpc	r25, r19
    b9e0:	21 f0       	breq	.+8      	; 0xb9ea <hal_configureWd+0x114>
   {
      HAL_END_CRITICAL();//Enable interrupts
    b9e2:	89 81       	ldd	r24, Y+1	; 0x01
    b9e4:	8f bf       	out	0x3f, r24	; 63
    b9e6:	8e ef       	ldi	r24, 0xFE	; 254
    b9e8:	1a c0       	rjmp	.+52     	; 0xba1e <hal_configureWd+0x148>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)
    b9ea:	ea 81       	ldd	r30, Y+2	; 0x02
    b9ec:	fb 81       	ldd	r31, Y+3	; 0x03
    b9ee:	01 90       	ld	r0, Z+
    b9f0:	f0 81       	ld	r31, Z
    b9f2:	e0 2d       	mov	r30, r0

      /*---------------------------------------------------------------------*
       * Reset the watchdog
       *---------------------------------------------------------------------*/
      c_temp = 0;
      CCP = CCP_IOREG_gc;
    b9f4:	88 ed       	ldi	r24, 0xD8	; 216
    b9f6:	84 bf       	out	0x34, r24	; 52
      WDT.CTRL = c_temp;
    b9f8:	10 92 80 00 	sts	0x0080, r1

      /*---------------------------------------------------------------------*
       * Configure the period
       *---------------------------------------------------------------------*/
      c_temp = (uint8_t)(WDT_ENABLE_bm | WDT_CEN_bm | t_per);
    b9fc:	43 60       	ori	r20, 0x03	; 3
      CCP = CCP_IOREG_gc;
    b9fe:	84 bf       	out	0x34, r24	; 52
      WDT.CTRL = c_temp;
    ba00:	40 93 80 00 	sts	0x0080, r20
 
      pt_element->i_period      = t_conf.i_period;
    ba04:	e1 82       	std	Z+1, r14	; 0x01
    ba06:	f2 82       	std	Z+2, r15	; 0x02
    ba08:	03 83       	std	Z+3, r16	; 0x03
    ba0a:	14 83       	std	Z+4, r17	; 0x04
      pt_element->b_validConfig = true;
    ba0c:	81 e0       	ldi	r24, 0x01	; 1
    ba0e:	80 83       	st	Z, r24

      /*---------------------------------------------------------------------*
       * Wait for WD to synchronize with new settings.
       *---------------------------------------------------------------------*/
      while(HAL_WD_IS_SYNC_BUSY())
    ba10:	80 91 82 00 	lds	r24, 0x0082
    ba14:	80 fd       	sbrc	r24, 0
    ba16:	fc cf       	rjmp	.-8      	; 0xba10 <hal_configureWd+0x13a>

      }
      
   }

   HAL_END_CRITICAL();//Enable interrupts
    ba18:	89 81       	ldd	r24, Y+1	; 0x01
    ba1a:	8f bf       	out	0x3f, r24	; 63
    ba1c:	80 e0       	ldi	r24, 0x00	; 0

   return WD_PASSED;

}
    ba1e:	23 96       	adiw	r28, 0x03	; 3
    ba20:	cd bf       	out	0x3d, r28	; 61
    ba22:	de bf       	out	0x3e, r29	; 62
    ba24:	cf 91       	pop	r28
    ba26:	df 91       	pop	r29
    ba28:	1f 91       	pop	r17
    ba2a:	0f 91       	pop	r16
    ba2c:	ff 90       	pop	r15
    ba2e:	ef 90       	pop	r14
    ba30:	08 95       	ret

0000ba32 <hal_wdEnable>:
   return WD_PASSED;
    
}/*End hal_wdDisable*/

t_wdError hal_wdEnable( t_WDHNDL t_handle)
{
    ba32:	df 93       	push	r29
    ba34:	cf 93       	push	r28
    ba36:	00 d0       	rcall	.+0      	; 0xba38 <hal_wdEnable+0x6>
    ba38:	cd b7       	in	r28, 0x3d	; 61
    ba3a:	de b7       	in	r29, 0x3e	; 62
    ba3c:	8a 83       	std	Y+2, r24	; 0x02
    ba3e:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ba40:	8f b7       	in	r24, 0x3f	; 63
    ba42:	89 83       	std	Y+1, r24	; 0x01
    ba44:	f8 94       	cli
    
   /*------------------------------------------------------------------------*
    * Is this a valid handle to a watchdog timer?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_handle, gt_wdAccessList) == false)
    ba46:	ea 81       	ldd	r30, Y+2	; 0x02
    ba48:	fb 81       	ldd	r31, Y+3	; 0x03
    ba4a:	20 91 1a 21 	lds	r18, 0x211A
    ba4e:	30 91 1b 21 	lds	r19, 0x211B
    ba52:	84 81       	ldd	r24, Z+4	; 0x04
    ba54:	95 81       	ldd	r25, Z+5	; 0x05
    ba56:	82 17       	cp	r24, r18
    ba58:	93 07       	cpc	r25, r19
    ba5a:	21 f0       	breq	.+8      	; 0xba64 <hal_wdEnable+0x32>
   {
      HAL_END_CRITICAL();//Enable interrupts
    ba5c:	89 81       	ldd	r24, Y+1	; 0x01
    ba5e:	8f bf       	out	0x3f, r24	; 63
    ba60:	8e ef       	ldi	r24, 0xFE	; 254
    ba62:	1a c0       	rjmp	.+52     	; 0xba98 <hal_wdEnable+0x66>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the DMA
       * channel information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)
    ba64:	ea 81       	ldd	r30, Y+2	; 0x02
    ba66:	fb 81       	ldd	r31, Y+3	; 0x03
      UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)t_handle);

      if( pt_element->b_validConfig == false)
    ba68:	01 90       	ld	r0, Z+
    ba6a:	f0 81       	ld	r31, Z
    ba6c:	e0 2d       	mov	r30, r0
    ba6e:	80 81       	ld	r24, Z
    ba70:	88 23       	and	r24, r24
    ba72:	21 f4       	brne	.+8      	; 0xba7c <hal_wdEnable+0x4a>
      {
         HAL_END_CRITICAL();//Enable interrupts
    ba74:	89 81       	ldd	r24, Y+1	; 0x01
    ba76:	8f bf       	out	0x3f, r24	; 63
    ba78:	8b ef       	ldi	r24, 0xFB	; 251
    ba7a:	0e c0       	rjmp	.+28     	; 0xba98 <hal_wdEnable+0x66>

      /*---------------------------------------------------------------------*
       * Enable the watchdog
       *---------------------------------------------------------------------*/
      c_temp = (WDT_ENABLE_bm | WDT_CEN_bm);
      CCP = CCP_IOREG_gc;
    ba7c:	88 ed       	ldi	r24, 0xD8	; 216
    ba7e:	84 bf       	out	0x34, r24	; 52
      WDT.CTRL |= c_temp;
    ba80:	80 91 80 00 	lds	r24, 0x0080
    ba84:	83 60       	ori	r24, 0x03	; 3
    ba86:	80 93 80 00 	sts	0x0080, r24
        
      /*---------------------------------------------------------------------*
       * Wait for WD to synchronize with new settings.
       *---------------------------------------------------------------------*/
      while(HAL_WD_IS_SYNC_BUSY())
    ba8a:	80 91 82 00 	lds	r24, 0x0082
    ba8e:	80 fd       	sbrc	r24, 0
    ba90:	fc cf       	rjmp	.-8      	; 0xba8a <hal_wdEnable+0x58>
      {

      }		
   }
    
   HAL_END_CRITICAL();//Enable interrupts
    ba92:	89 81       	ldd	r24, Y+1	; 0x01
    ba94:	8f bf       	out	0x3f, r24	; 63
    ba96:	80 e0       	ldi	r24, 0x00	; 0

   return WD_PASSED;
    
}/*End hal_wdEnable*/
    ba98:	23 96       	adiw	r28, 0x03	; 3
    ba9a:	cd bf       	out	0x3d, r28	; 61
    ba9c:	de bf       	out	0x3e, r29	; 62
    ba9e:	cf 91       	pop	r28
    baa0:	df 91       	pop	r29
    baa2:	08 95       	ret

0000baa4 <hal_requestWdAccess>:
 
/*---------------------------------------------------------------------------*
 * Request access to the watchdog timer.
 *---------------------------------------------------------------------------*/
t_WDHNDL hal_requestWdAccess( void)
{
    baa4:	df 93       	push	r29
    baa6:	cf 93       	push	r28
    baa8:	00 d0       	rcall	.+0      	; 0xbaaa <hal_requestWdAccess+0x6>
    baaa:	cd b7       	in	r28, 0x3d	; 61
    baac:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * We are going to be configuring pin register and can't have another
    * thread try and access them why the change is happening.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
    baae:	8f b7       	in	r24, 0x3f	; 63
    bab0:	89 83       	std	Y+1, r24	; 0x01
    bab2:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Is the watchdog available?
    *------------------------------------------------------------------------*/
   if( UTL_GET_NUM_LINKS_CONT( gt_wdAccessList) == 0)
    bab4:	e0 91 1a 21 	lds	r30, 0x211A
    bab8:	f0 91 1b 21 	lds	r31, 0x211B
    babc:	82 81       	ldd	r24, Z+2	; 0x02
    babe:	93 81       	ldd	r25, Z+3	; 0x03
    bac0:	89 2b       	or	r24, r25
    bac2:	29 f5       	brne	.+74     	; 0xbb0e <hal_requestWdAccess+0x6a>
      
      /*---------------------------------------------------------------------*
       * Allocated memory for the link where the DMA channel information will 
       * be stored.
       *---------------------------------------------------------------------*/
      t_linkHndl = utl_createLink( sizeof(t_wdObject));
    bac4:	85 e0       	ldi	r24, 0x05	; 5
    bac6:	90 e0       	ldi	r25, 0x00	; 0
    bac8:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
    bacc:	8a 83       	std	Y+2, r24	; 0x02
    bace:	9b 83       	std	Y+3, r25	; 0x03

      if( t_linkHndl < 0)
    bad0:	8a 81       	ldd	r24, Y+2	; 0x02
    bad2:	9b 81       	ldd	r25, Y+3	; 0x03
    bad4:	97 ff       	sbrs	r25, 7
    bad6:	03 c0       	rjmp	.+6      	; 0xbade <hal_requestWdAccess+0x3a>
    bad8:	2f ef       	ldi	r18, 0xFF	; 255
    bada:	3f ef       	ldi	r19, 0xFF	; 255
    badc:	1c c0       	rjmp	.+56     	; 0xbb16 <hal_requestWdAccess+0x72>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the WD 
       * timer information is being stored.
       *---------------------------------------------------------------------*/
      pt_element = (t_wdObject *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
    bade:	ea 81       	ldd	r30, Y+2	; 0x02
    bae0:	fb 81       	ldd	r31, Y+3	; 0x03
    bae2:	01 90       	ld	r0, Z+
    bae4:	f0 81       	ld	r31, Z
    bae6:	e0 2d       	mov	r30, r0
      pt_element->b_validConfig = false;
    bae8:	10 82       	st	Z, r1
      pt_element->i_period = 0;
    baea:	11 82       	std	Z+1, r1	; 0x01
    baec:	12 82       	std	Z+2, r1	; 0x02
    baee:	13 82       	std	Z+3, r1	; 0x03
    baf0:	14 82       	std	Z+4, r1	; 0x04

      /*---------------------------------------------------------------------*
       * Add the DMA channel link onto the list open channels.
       *---------------------------------------------------------------------*/
      t_err = utl_insertLink( gt_wdAccessList,
    baf2:	80 91 1a 21 	lds	r24, 0x211A
    baf6:	90 91 1b 21 	lds	r25, 0x211B
    bafa:	6a 81       	ldd	r22, Y+2	; 0x02
    bafc:	7b 81       	ldd	r23, Y+3	; 0x03
    bafe:	41 e0       	ldi	r20, 0x01	; 1
    bb00:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return (t_WDHNDL)WD_UNAVAILABLE;	
   }
    
   HAL_END_CRITICAL();//Enable interrupts
    bb04:	89 81       	ldd	r24, Y+1	; 0x01
    bb06:	8f bf       	out	0x3f, r24	; 63
   
   return (t_WDHNDL)t_linkHndl;
    bb08:	2a 81       	ldd	r18, Y+2	; 0x02
    bb0a:	3b 81       	ldd	r19, Y+3	; 0x03
    bb0c:	04 c0       	rjmp	.+8      	; 0xbb16 <hal_requestWdAccess+0x72>
                              t_linkHndl,
                              true);	
   }
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
    bb0e:	89 81       	ldd	r24, Y+1	; 0x01
    bb10:	8f bf       	out	0x3f, r24	; 63
    bb12:	2d ef       	ldi	r18, 0xFD	; 253
    bb14:	3f ef       	ldi	r19, 0xFF	; 255
    
   HAL_END_CRITICAL();//Enable interrupts
   
   return (t_WDHNDL)t_linkHndl;

}/*End hal_requestWdAccess*/
    bb16:	c9 01       	movw	r24, r18
    bb18:	23 96       	adiw	r28, 0x03	; 3
    bb1a:	cd bf       	out	0x3d, r28	; 61
    bb1c:	de bf       	out	0x3e, r29	; 62
    bb1e:	cf 91       	pop	r28
    bb20:	df 91       	pop	r29
    bb22:	08 95       	ret

0000bb24 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    bb24:	cf 92       	push	r12
    bb26:	df 92       	push	r13
    bb28:	ef 92       	push	r14
    bb2a:	ff 92       	push	r15
    bb2c:	0f 93       	push	r16
    bb2e:	1f 93       	push	r17
    bb30:	cf 93       	push	r28
    bb32:	df 93       	push	r29
    bb34:	7c 01       	movw	r14, r24
    bb36:	6b 01       	movw	r12, r22
    bb38:	8a 01       	movw	r16, r20
    bb3a:	c0 e0       	ldi	r28, 0x00	; 0
    bb3c:	d0 e0       	ldi	r29, 0x00	; 0
    bb3e:	0f c0       	rjmp	.+30     	; 0xbb5e <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    bb40:	d6 01       	movw	r26, r12
    bb42:	6d 91       	ld	r22, X+
    bb44:	6d 01       	movw	r12, r26
    bb46:	d7 01       	movw	r26, r14
    bb48:	ed 91       	ld	r30, X+
    bb4a:	fc 91       	ld	r31, X
    bb4c:	01 90       	ld	r0, Z+
    bb4e:	f0 81       	ld	r31, Z
    bb50:	e0 2d       	mov	r30, r0
    bb52:	c7 01       	movw	r24, r14
    bb54:	19 95       	eicall
    bb56:	c8 0f       	add	r28, r24
    bb58:	d9 1f       	adc	r29, r25
    bb5a:	01 50       	subi	r16, 0x01	; 1
    bb5c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    bb5e:	01 15       	cp	r16, r1
    bb60:	11 05       	cpc	r17, r1
    bb62:	71 f7       	brne	.-36     	; 0xbb40 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    bb64:	ce 01       	movw	r24, r28
    bb66:	df 91       	pop	r29
    bb68:	cf 91       	pop	r28
    bb6a:	1f 91       	pop	r17
    bb6c:	0f 91       	pop	r16
    bb6e:	ff 90       	pop	r15
    bb70:	ef 90       	pop	r14
    bb72:	df 90       	pop	r13
    bb74:	cf 90       	pop	r12
    bb76:	08 95       	ret

0000bb78 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    bb78:	ef 92       	push	r14
    bb7a:	ff 92       	push	r15
    bb7c:	0f 93       	push	r16
    bb7e:	1f 93       	push	r17
    bb80:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    bb82:	dc 01       	movw	r26, r24
    bb84:	ed 91       	ld	r30, X+
    bb86:	fc 91       	ld	r31, X
    bb88:	01 90       	ld	r0, Z+
    bb8a:	f0 81       	ld	r31, Z
    bb8c:	e0 2d       	mov	r30, r0
    bb8e:	6d e0       	ldi	r22, 0x0D	; 13
    bb90:	19 95       	eicall
    bb92:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    bb94:	d8 01       	movw	r26, r16
    bb96:	ed 91       	ld	r30, X+
    bb98:	fc 91       	ld	r31, X
    bb9a:	01 90       	ld	r0, Z+
    bb9c:	f0 81       	ld	r31, Z
    bb9e:	e0 2d       	mov	r30, r0
    bba0:	c8 01       	movw	r24, r16
    bba2:	6a e0       	ldi	r22, 0x0A	; 10
    bba4:	19 95       	eicall
    bba6:	9c 01       	movw	r18, r24
    bba8:	2e 0d       	add	r18, r14
    bbaa:	3f 1d       	adc	r19, r15
    bbac:	c9 01       	movw	r24, r18
    bbae:	1f 91       	pop	r17
    bbb0:	0f 91       	pop	r16
    bbb2:	ff 90       	pop	r15
    bbb4:	ef 90       	pop	r14
    bbb6:	08 95       	ret

0000bbb8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    bbb8:	cf 93       	push	r28
    bbba:	df 93       	push	r29
    bbbc:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    bbbe:	61 15       	cp	r22, r1
    bbc0:	71 05       	cpc	r23, r1
    bbc2:	19 f4       	brne	.+6      	; 0xbbca <_ZN5Print5writeEPKc+0x12>
    bbc4:	20 e0       	ldi	r18, 0x00	; 0
    bbc6:	30 e0       	ldi	r19, 0x00	; 0
    bbc8:	0f c0       	rjmp	.+30     	; 0xbbe8 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    bbca:	db 01       	movw	r26, r22
    bbcc:	0d 90       	ld	r0, X+
    bbce:	00 20       	and	r0, r0
    bbd0:	e9 f7       	brne	.-6      	; 0xbbcc <_ZN5Print5writeEPKc+0x14>
    bbd2:	11 97       	sbiw	r26, 0x01	; 1
    bbd4:	a6 1b       	sub	r26, r22
    bbd6:	b7 0b       	sbc	r27, r23
    bbd8:	e8 81       	ld	r30, Y
    bbda:	f9 81       	ldd	r31, Y+1	; 0x01
    bbdc:	02 80       	ldd	r0, Z+2	; 0x02
    bbde:	f3 81       	ldd	r31, Z+3	; 0x03
    bbe0:	e0 2d       	mov	r30, r0
    bbe2:	ad 01       	movw	r20, r26
    bbe4:	19 95       	eicall
    bbe6:	9c 01       	movw	r18, r24
    }
    bbe8:	c9 01       	movw	r24, r18
    bbea:	df 91       	pop	r29
    bbec:	cf 91       	pop	r28
    bbee:	08 95       	ret

0000bbf0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    bbf0:	4f 92       	push	r4
    bbf2:	5f 92       	push	r5
    bbf4:	7f 92       	push	r7
    bbf6:	8f 92       	push	r8
    bbf8:	9f 92       	push	r9
    bbfa:	af 92       	push	r10
    bbfc:	bf 92       	push	r11
    bbfe:	cf 92       	push	r12
    bc00:	df 92       	push	r13
    bc02:	ef 92       	push	r14
    bc04:	ff 92       	push	r15
    bc06:	0f 93       	push	r16
    bc08:	1f 93       	push	r17
    bc0a:	df 93       	push	r29
    bc0c:	cf 93       	push	r28
    bc0e:	cd b7       	in	r28, 0x3d	; 61
    bc10:	de b7       	in	r29, 0x3e	; 62
    bc12:	a1 97       	sbiw	r28, 0x21	; 33
    bc14:	cd bf       	out	0x3d, r28	; 61
    bc16:	de bf       	out	0x3e, r29	; 62
    bc18:	2c 01       	movw	r4, r24
    bc1a:	74 2e       	mov	r7, r20
    bc1c:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    bc1e:	22 30       	cpi	r18, 0x02	; 2
    bc20:	08 f4       	brcc	.+2      	; 0xbc24 <_ZN5Print11printNumberEmh+0x34>
    bc22:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    bc24:	19 a2       	std	Y+33, r1	; 0x21
    bc26:	31 e2       	ldi	r19, 0x21	; 33
    bc28:	c3 2e       	mov	r12, r19
    bc2a:	d1 2c       	mov	r13, r1
    bc2c:	cc 0e       	add	r12, r28
    bc2e:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    bc30:	82 2e       	mov	r8, r18
    bc32:	99 24       	eor	r9, r9
    bc34:	aa 24       	eor	r10, r10
    bc36:	bb 24       	eor	r11, r11
    bc38:	67 2d       	mov	r22, r7
    bc3a:	75 2f       	mov	r23, r21
    bc3c:	a5 01       	movw	r20, r10
    bc3e:	94 01       	movw	r18, r8
    bc40:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
    bc44:	79 01       	movw	r14, r18
    bc46:	8a 01       	movw	r16, r20
    char c = m - base * n;
    bc48:	c8 01       	movw	r24, r16
    bc4a:	b7 01       	movw	r22, r14
    bc4c:	a5 01       	movw	r20, r10
    bc4e:	94 01       	movw	r18, r8
    bc50:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
    bc54:	47 2d       	mov	r20, r7
    bc56:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    bc58:	08 94       	sec
    bc5a:	c1 08       	sbc	r12, r1
    bc5c:	d1 08       	sbc	r13, r1
    bc5e:	4a 30       	cpi	r20, 0x0A	; 10
    bc60:	10 f4       	brcc	.+4      	; 0xbc66 <_ZN5Print11printNumberEmh+0x76>
    bc62:	40 5d       	subi	r20, 0xD0	; 208
    bc64:	01 c0       	rjmp	.+2      	; 0xbc68 <_ZN5Print11printNumberEmh+0x78>
    bc66:	49 5c       	subi	r20, 0xC9	; 201
    bc68:	f6 01       	movw	r30, r12
    bc6a:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    bc6c:	e1 14       	cp	r14, r1
    bc6e:	f1 04       	cpc	r15, r1
    bc70:	01 05       	cpc	r16, r1
    bc72:	11 05       	cpc	r17, r1
    bc74:	21 f0       	breq	.+8      	; 0xbc7e <_ZN5Print11printNumberEmh+0x8e>
    bc76:	7e 2c       	mov	r7, r14
    bc78:	5f 2d       	mov	r21, r15
    bc7a:	c8 01       	movw	r24, r16
    bc7c:	dd cf       	rjmp	.-70     	; 0xbc38 <_ZN5Print11printNumberEmh+0x48>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    bc7e:	c2 01       	movw	r24, r4
    bc80:	b6 01       	movw	r22, r12
    bc82:	0e 94 dc 5d 	call	0xbbb8	; 0xbbb8 <_ZN5Print5writeEPKc>
}
    bc86:	a1 96       	adiw	r28, 0x21	; 33
    bc88:	cd bf       	out	0x3d, r28	; 61
    bc8a:	de bf       	out	0x3e, r29	; 62
    bc8c:	cf 91       	pop	r28
    bc8e:	df 91       	pop	r29
    bc90:	1f 91       	pop	r17
    bc92:	0f 91       	pop	r16
    bc94:	ff 90       	pop	r15
    bc96:	ef 90       	pop	r14
    bc98:	df 90       	pop	r13
    bc9a:	cf 90       	pop	r12
    bc9c:	bf 90       	pop	r11
    bc9e:	af 90       	pop	r10
    bca0:	9f 90       	pop	r9
    bca2:	8f 90       	pop	r8
    bca4:	7f 90       	pop	r7
    bca6:	5f 90       	pop	r5
    bca8:	4f 90       	pop	r4
    bcaa:	08 95       	ret

0000bcac <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    bcac:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    bcae:	21 15       	cp	r18, r1
    bcb0:	31 05       	cpc	r19, r1
    bcb2:	41 f4       	brne	.+16     	; 0xbcc4 <_ZN5Print5printEmi+0x18>
    bcb4:	ed 91       	ld	r30, X+
    bcb6:	fc 91       	ld	r31, X
    bcb8:	01 90       	ld	r0, Z+
    bcba:	f0 81       	ld	r31, Z
    bcbc:	e0 2d       	mov	r30, r0
    bcbe:	64 2f       	mov	r22, r20
    bcc0:	19 95       	eicall
    bcc2:	08 95       	ret
  else return printNumber(n, base);
    bcc4:	0e 94 f8 5d 	call	0xbbf0	; 0xbbf0 <_ZN5Print11printNumberEmh>
}
    bcc8:	08 95       	ret

0000bcca <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    bcca:	ef 92       	push	r14
    bccc:	ff 92       	push	r15
    bcce:	0f 93       	push	r16
    bcd0:	1f 93       	push	r17
    bcd2:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    bcd4:	7b 01       	movw	r14, r22
    bcd6:	00 e0       	ldi	r16, 0x00	; 0
    bcd8:	10 e0       	ldi	r17, 0x00	; 0
    bcda:	b8 01       	movw	r22, r16
    bcdc:	a7 01       	movw	r20, r14
    bcde:	0e 94 56 5e 	call	0xbcac	; 0xbcac <_ZN5Print5printEmi>
}
    bce2:	1f 91       	pop	r17
    bce4:	0f 91       	pop	r16
    bce6:	ff 90       	pop	r15
    bce8:	ef 90       	pop	r14
    bcea:	08 95       	ret

0000bcec <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    bcec:	ef 92       	push	r14
    bcee:	ff 92       	push	r15
    bcf0:	0f 93       	push	r16
    bcf2:	1f 93       	push	r17
    bcf4:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
    bcf6:	e6 2e       	mov	r14, r22
    bcf8:	ff 24       	eor	r15, r15
    bcfa:	00 e0       	ldi	r16, 0x00	; 0
    bcfc:	10 e0       	ldi	r17, 0x00	; 0
    bcfe:	b8 01       	movw	r22, r16
    bd00:	a7 01       	movw	r20, r14
    bd02:	0e 94 56 5e 	call	0xbcac	; 0xbcac <_ZN5Print5printEmi>
}
    bd06:	1f 91       	pop	r17
    bd08:	0f 91       	pop	r16
    bd0a:	ff 90       	pop	r15
    bd0c:	ef 90       	pop	r14
    bd0e:	08 95       	ret

0000bd10 <_GLOBAL__I__ZN13MinimumSerial5beginEm>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    bd10:	10 92 d2 22 	sts	0x22D2, r1
    bd14:	10 92 d3 22 	sts	0x22D3, r1
#include <Arduino.h>
/**
 * \class MinimumSerial
 * \brief mini serial class for the %SdFat library.
 */
class MinimumSerial : public Print {
    bd18:	80 e2       	ldi	r24, 0x20	; 32
    bd1a:	91 e2       	ldi	r25, 0x21	; 33
    bd1c:	80 93 d0 22 	sts	0x22D0, r24
    bd20:	90 93 d1 22 	sts	0x22D1, r25
#else
   arb_sysPrintChar( (const char)b);
#endif
  return 1;
}
MinimumSerial MiniSerial;
    bd24:	08 95       	ret

0000bd26 <_ZN13MinimumSerial5writeEh>:
 * Unbuffered write
 *
 * \param[in] b byte to write.
 * \return 1
 */
size_t MinimumSerial::write(uint8_t b) {
    bd26:	86 2f       	mov	r24, r22
#ifndef ARBITROS_CMP
  while (((1 << UDRIE0) & UCSR0B) || !(UCSR0A & (1 << UDRE0))) {}
  UDR0 = b;
#else
   arb_sysPrintChar( (const char)b);
    bd28:	0e 94 44 8c 	call	0x11888	; 0x11888 <arb_sysPrintChar>
#endif
  return 1;
}
    bd2c:	81 e0       	ldi	r24, 0x01	; 1
    bd2e:	90 e0       	ldi	r25, 0x00	; 0
    bd30:	08 95       	ret

0000bd32 <_ZL18blockTransCompletePaj>:
static bool b_bTransComplete = false;

static void blockTransComplete( int8_t *pc_rxData,
                                uint16_t s_size)
{
   b_bTransComplete = true;
    bd32:	81 e0       	ldi	r24, 0x01	; 1
    bd34:	80 93 d6 22 	sts	0x22D6, r24
}/*End blockTransComplete*/
    bd38:	08 95       	ret

0000bd3a <_ZL9CRC_CCITTPKhj>:
}
//------------------------------------------------------------------------------
#if USE_SD_CRC == 1
// slower CRC-CCITT
// uses the x^16,x^12,x^5,x^1 polynomial.
static uint16_t CRC_CCITT(const uint8_t *data, size_t n) {
    bd3a:	cf 93       	push	r28
    bd3c:	df 93       	push	r29
    bd3e:	ec 01       	movw	r28, r24
    bd40:	40 e0       	ldi	r20, 0x00	; 0
    bd42:	50 e0       	ldi	r21, 0x00	; 0
    bd44:	a0 e0       	ldi	r26, 0x00	; 0
    bd46:	b0 e0       	ldi	r27, 0x00	; 0
    bd48:	27 c0       	rjmp	.+78     	; 0xbd98 <_ZL9CRC_CCITTPKhj+0x5e>
  uint16_t crc = 0;
  for (size_t i = 0; i < n; i++) {
    crc = (uint8_t)(crc >> 8) | (crc << 8);
    bd4a:	25 2f       	mov	r18, r21
    bd4c:	30 e0       	ldi	r19, 0x00	; 0
    bd4e:	94 2f       	mov	r25, r20
    bd50:	88 27       	eor	r24, r24
    bd52:	28 2b       	or	r18, r24
    bd54:	39 2b       	or	r19, r25
    crc ^= data[i];
    bd56:	fe 01       	movw	r30, r28
    bd58:	ea 0f       	add	r30, r26
    bd5a:	fb 1f       	adc	r31, r27
    bd5c:	80 81       	ld	r24, Z
    bd5e:	90 e0       	ldi	r25, 0x00	; 0
    bd60:	28 27       	eor	r18, r24
    bd62:	39 27       	eor	r19, r25
    crc ^= (uint8_t)(crc & 0xff) >> 4;
    bd64:	82 2f       	mov	r24, r18
    bd66:	90 e0       	ldi	r25, 0x00	; 0
    bd68:	54 e0       	ldi	r21, 0x04	; 4
    bd6a:	95 95       	asr	r25
    bd6c:	87 95       	ror	r24
    bd6e:	5a 95       	dec	r21
    bd70:	e1 f7       	brne	.-8      	; 0xbd6a <_ZL9CRC_CCITTPKhj+0x30>
    bd72:	82 27       	eor	r24, r18
    bd74:	93 27       	eor	r25, r19
    crc ^= crc << 12;
    bd76:	9c 01       	movw	r18, r24
    bd78:	32 2f       	mov	r19, r18
    bd7a:	22 27       	eor	r18, r18
    bd7c:	32 95       	swap	r19
    bd7e:	30 7f       	andi	r19, 0xF0	; 240
    bd80:	28 27       	eor	r18, r24
    bd82:	39 27       	eor	r19, r25
    crc ^= (crc & 0xff) << 5;
    bd84:	a9 01       	movw	r20, r18
    bd86:	50 70       	andi	r21, 0x00	; 0
    bd88:	85 e0       	ldi	r24, 0x05	; 5
    bd8a:	44 0f       	add	r20, r20
    bd8c:	55 1f       	adc	r21, r21
    bd8e:	8a 95       	dec	r24
    bd90:	e1 f7       	brne	.-8      	; 0xbd8a <_ZL9CRC_CCITTPKhj+0x50>
    bd92:	42 27       	eor	r20, r18
    bd94:	53 27       	eor	r21, r19
#if USE_SD_CRC == 1
// slower CRC-CCITT
// uses the x^16,x^12,x^5,x^1 polynomial.
static uint16_t CRC_CCITT(const uint8_t *data, size_t n) {
  uint16_t crc = 0;
  for (size_t i = 0; i < n; i++) {
    bd96:	11 96       	adiw	r26, 0x01	; 1
    bd98:	a6 17       	cp	r26, r22
    bd9a:	b7 07       	cpc	r27, r23
    bd9c:	b0 f2       	brcs	.-84     	; 0xbd4a <_ZL9CRC_CCITTPKhj+0x10>
    crc ^= (uint8_t)(crc & 0xff) >> 4;
    crc ^= crc << 12;
    crc ^= (crc & 0xff) << 5;
  }
  return crc;
}
    bd9e:	ca 01       	movw	r24, r20
    bda0:	df 91       	pop	r29
    bda2:	cf 91       	pop	r28
    bda4:	08 95       	ret

0000bda6 <_ZL6spiRecv>:
   return (unsigned long)arb_sysMsecDelta( (uint64_t)l_currTime, (uint64_t)l_prevTime);
}/*End millisDelta*/

//------------------------------------------------------------------------------
/** SPI receive a byte */
static  uint8_t spiRec() {
    bda6:	df 93       	push	r29
    bda8:	cf 93       	push	r28
    bdaa:	0f 92       	push	r0
    bdac:	cd b7       	in	r28, 0x3d	; 61
    bdae:	de b7       	in	r29, 0x3e	; 62
  uint8_t c;
  hal_spiReadByte( gt_spiHandle,
                   (int8_t *)&c);
    bdb0:	80 91 d4 22 	lds	r24, 0x22D4
    bdb4:	90 91 d5 22 	lds	r25, 0x22D5
    bdb8:	be 01       	movw	r22, r28
    bdba:	6f 5f       	subi	r22, 0xFF	; 255
    bdbc:	7f 4f       	sbci	r23, 0xFF	; 255
    bdbe:	0e 94 62 31 	call	0x62c4	; 0x62c4 <hal_spiReadByte>
  return c;
}
    bdc2:	89 81       	ldd	r24, Y+1	; 0x01
    bdc4:	0f 90       	pop	r0
    bdc6:	cf 91       	pop	r28
    bdc8:	df 91       	pop	r29
    bdca:	08 95       	ret

0000bdcc <_ZN7Sd2Card13chipSelectLowEv>:
#ifndef ARBITROS_CMP
  spiInit(spiRate_);
  digitalWrite(chipSelectPin_, LOW);
#else
  hal_spiSetChipSelect( gt_spiHandle,
                        SPI_CS_EN);
    bdcc:	80 91 d4 22 	lds	r24, 0x22D4
    bdd0:	90 91 d5 22 	lds	r25, 0x22D5
    bdd4:	60 e0       	ldi	r22, 0x00	; 0
    bdd6:	0e 94 1d 30 	call	0x603a	; 0x603a <hal_spiSetChipSelect>
#endif
}
    bdda:	08 95       	ret

0000bddc <_ZN7Sd2Card14chipSelectHighEv>:
  digitalWrite(chipSelectPin_, HIGH);
  // insure MISO goes high impedance
  spiSend(0XFF);
#else
  hal_spiSetChipSelect( gt_spiHandle,
                        SPI_CS_DIS);
    bddc:	80 91 d4 22 	lds	r24, 0x22D4
    bde0:	90 91 d5 22 	lds	r25, 0x22D5
    bde4:	61 e0       	ldi	r22, 0x01	; 1
    bde6:	0e 94 1d 30 	call	0x603a	; 0x603a <hal_spiSetChipSelect>
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    bdea:	80 91 d4 22 	lds	r24, 0x22D4
    bdee:	90 91 d5 22 	lds	r25, 0x22D5
    bdf2:	6f ef       	ldi	r22, 0xFF	; 255
    bdf4:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
#else
  hal_spiSetChipSelect( gt_spiHandle,
                        SPI_CS_DIS);
  spiSend(0XFF);
#endif
}
    bdf8:	08 95       	ret

0000bdfa <_Z11millisDeltamm>:
   return (unsigned long)arb_sysMsecNow();

}/*End millis*/

unsigned long millisDelta( unsigned long l_currTime,
                           unsigned long l_prevTime)
    bdfa:	2f 92       	push	r2
    bdfc:	3f 92       	push	r3
    bdfe:	4f 92       	push	r4
    be00:	5f 92       	push	r5
    be02:	6f 92       	push	r6
    be04:	7f 92       	push	r7
    be06:	8f 92       	push	r8
    be08:	9f 92       	push	r9
    be0a:	af 92       	push	r10
    be0c:	bf 92       	push	r11
    be0e:	cf 92       	push	r12
    be10:	df 92       	push	r13
    be12:	ef 92       	push	r14
    be14:	ff 92       	push	r15
    be16:	0f 93       	push	r16
    be18:	1f 93       	push	r17
    be1a:	5b 01       	movw	r10, r22
    be1c:	6c 01       	movw	r12, r24
    be1e:	19 01       	movw	r2, r18
    be20:	2a 01       	movw	r4, r20
{
   return (unsigned long)arb_sysMsecDelta( (uint64_t)l_currTime, (uint64_t)l_prevTime);
    be22:	9b 01       	movw	r18, r22
    be24:	a6 01       	movw	r20, r12
    be26:	60 e0       	ldi	r22, 0x00	; 0
    be28:	70 e0       	ldi	r23, 0x00	; 0
    be2a:	80 e0       	ldi	r24, 0x00	; 0
    be2c:	90 e0       	ldi	r25, 0x00	; 0
    be2e:	51 01       	movw	r10, r2
    be30:	62 01       	movw	r12, r4
    be32:	ee 24       	eor	r14, r14
    be34:	ff 24       	eor	r15, r15
    be36:	00 e0       	ldi	r16, 0x00	; 0
    be38:	10 e0       	ldi	r17, 0x00	; 0
    be3a:	0e 94 a1 9b 	call	0x13742	; 0x13742 <arb_sysMsecDelta>
    be3e:	95 2f       	mov	r25, r21
    be40:	b9 01       	movw	r22, r18
    be42:	84 2f       	mov	r24, r20
}/*End millisDelta*/
    be44:	1f 91       	pop	r17
    be46:	0f 91       	pop	r16
    be48:	ff 90       	pop	r15
    be4a:	ef 90       	pop	r14
    be4c:	df 90       	pop	r13
    be4e:	cf 90       	pop	r12
    be50:	bf 90       	pop	r11
    be52:	af 90       	pop	r10
    be54:	9f 90       	pop	r9
    be56:	8f 90       	pop	r8
    be58:	7f 90       	pop	r7
    be5a:	6f 90       	pop	r6
    be5c:	5f 90       	pop	r5
    be5e:	4f 90       	pop	r4
    be60:	3f 90       	pop	r3
    be62:	2f 90       	pop	r2
    be64:	08 95       	ret

0000be66 <_ZN7Sd2Card9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    be66:	af 92       	push	r10
    be68:	bf 92       	push	r11
    be6a:	cf 92       	push	r12
    be6c:	df 92       	push	r13
    be6e:	ef 92       	push	r14
    be70:	ff 92       	push	r15
    be72:	0f 93       	push	r16
    be74:	1f 93       	push	r17
    be76:	cf 93       	push	r28
    be78:	df 93       	push	r29
    be7a:	6c 01       	movw	r12, r24
    be7c:	16 2f       	mov	r17, r22
    be7e:	7a 01       	movw	r14, r20
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
    be80:	ca 01       	movw	r24, r20
    be82:	60 e0       	ldi	r22, 0x00	; 0
    be84:	72 e0       	ldi	r23, 0x02	; 2
    be86:	0e 94 9d 5e 	call	0xbd3a	; 0xbd3a <_ZL9CRC_CCITTPKhj>
    be8a:	5c 01       	movw	r10, r24
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    be8c:	80 91 d4 22 	lds	r24, 0x22D4
    be90:	90 91 d5 22 	lds	r25, 0x22D5
    be94:	61 2f       	mov	r22, r17
    be96:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
  unsigned long t0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    be9a:	0e 94 4f 9c 	call	0x1389e	; 0x1389e <arb_sysTimerEnabled>
    be9e:	88 23       	and	r24, r24
    bea0:	19 f0       	breq	.+6      	; 0xbea8 <_ZN7Sd2Card9writeDataEhPKh+0x42>
    bea2:	0f b6       	in	r0, 0x3f	; 63
    bea4:	07 fc       	sbrc	r0, 7
    bea6:	50 c0       	rjmp	.+160    	; 0xbf48 <_ZN7Sd2Card9writeDataEhPKh+0xe2>
    bea8:	c0 e0       	ldi	r28, 0x00	; 0
    beaa:	d0 e0       	ldi	r29, 0x00	; 0
  {
    for( uint32_t i = 0; i < n; i++)
      hal_spiWriteByte( gt_spiHandle,
                        buf[i]);
    beac:	80 91 d4 22 	lds	r24, 0x22D4
    beb0:	90 91 d5 22 	lds	r25, 0x22D5
    beb4:	f7 01       	movw	r30, r14
    beb6:	ec 0f       	add	r30, r28
    beb8:	fd 1f       	adc	r31, r29
    beba:	60 81       	ld	r22, Z
    bebc:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
    bec0:	21 96       	adiw	r28, 0x01	; 1
  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
  {
    for( uint32_t i = 0; i < n; i++)
    bec2:	22 e0       	ldi	r18, 0x02	; 2
    bec4:	c0 30       	cpi	r28, 0x00	; 0
    bec6:	d2 07       	cpc	r29, r18
    bec8:	89 f7       	brne	.-30     	; 0xbeac <_ZN7Sd2Card9writeDataEhPKh+0x46>
    beca:	15 c0       	rjmp	.+42     	; 0xbef6 <_ZN7Sd2Card9writeDataEhPKh+0x90>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    becc:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>

     t0 = millis();

     while( b_bTransComplete == false)
     {
        if(  millisDelta( millis(), t0) > (SD_WRITE_TIMEOUT*5))
    bed0:	b9 01       	movw	r22, r18
    bed2:	ca 01       	movw	r24, r20
    bed4:	20 2f       	mov	r18, r16
    bed6:	3e 2d       	mov	r19, r14
    bed8:	4f 2d       	mov	r20, r15
    beda:	51 2f       	mov	r21, r17
    bedc:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    bee0:	69 5b       	subi	r22, 0xB9	; 185
    bee2:	7b 40       	sbci	r23, 0x0B	; 11
    bee4:	80 40       	sbci	r24, 0x00	; 0
    bee6:	90 40       	sbci	r25, 0x00	; 0
    bee8:	20 f4       	brcc	.+8      	; 0xbef2 <_ZN7Sd2Card9writeDataEhPKh+0x8c>
                        (int8_t *)buf,
                        (uint16_t)n);

     t0 = millis();

     while( b_bTransComplete == false)
    beea:	80 91 d6 22 	lds	r24, 0x22D6
    beee:	88 23       	and	r24, r24
    bef0:	69 f3       	breq	.-38     	; 0xbecc <_ZN7Sd2Card9writeDataEhPKh+0x66>
        {
           break;
        }
     }

     b_bTransComplete = false;
    bef2:	10 92 d6 22 	sts	0x22D6, r1
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    bef6:	80 91 d4 22 	lds	r24, 0x22D4
    befa:	90 91 d5 22 	lds	r25, 0x22D5
    befe:	6b 2d       	mov	r22, r11
    bf00:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  status_ = spiRec();
    bf04:	80 91 d4 22 	lds	r24, 0x22D4
    bf08:	90 91 d5 22 	lds	r25, 0x22D5
    bf0c:	6a 2d       	mov	r22, r10
    bf0e:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
    bf12:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    bf16:	f6 01       	movw	r30, r12
    bf18:	83 83       	std	Z+3, r24	; 0x03
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    bf1a:	8f 71       	andi	r24, 0x1F	; 31
    bf1c:	85 30       	cpi	r24, 0x05	; 5
    bf1e:	11 f4       	brne	.+4      	; 0xbf24 <_ZN7Sd2Card9writeDataEhPKh+0xbe>
    bf20:	81 e0       	ldi	r24, 0x01	; 1
    bf22:	07 c0       	rjmp	.+14     	; 0xbf32 <_ZN7Sd2Card9writeDataEhPKh+0xcc>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    bf24:	83 e1       	ldi	r24, 0x13	; 19
    bf26:	f6 01       	movw	r30, r12
    bf28:	81 83       	std	Z+1, r24	; 0x01
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    bf2a:	c6 01       	movw	r24, r12
    bf2c:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    bf30:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    bf32:	df 91       	pop	r29
    bf34:	cf 91       	pop	r28
    bf36:	1f 91       	pop	r17
    bf38:	0f 91       	pop	r16
    bf3a:	ff 90       	pop	r15
    bf3c:	ef 90       	pop	r14
    bf3e:	df 90       	pop	r13
    bf40:	cf 90       	pop	r12
    bf42:	bf 90       	pop	r11
    bf44:	af 90       	pop	r10
    bf46:	08 95       	ret
  {

     hal_spiWriteBlock( gt_spiHandle,
                        false,
                        (int8_t *)buf,
                        (uint16_t)n);
    bf48:	80 91 d4 22 	lds	r24, 0x22D4
    bf4c:	90 91 d5 22 	lds	r25, 0x22D5
    bf50:	60 e0       	ldi	r22, 0x00	; 0
    bf52:	a7 01       	movw	r20, r14
    bf54:	20 e0       	ldi	r18, 0x00	; 0
    bf56:	32 e0       	ldi	r19, 0x02	; 2
    bf58:	0e 94 ec 3a 	call	0x75d8	; 0x75d8 <hal_spiWriteBlock>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    bf5c:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    bf60:	02 2f       	mov	r16, r18
    bf62:	e3 2e       	mov	r14, r19
    bf64:	f4 2e       	mov	r15, r20
    bf66:	15 2f       	mov	r17, r21
    bf68:	c0 cf       	rjmp	.-128    	; 0xbeea <_ZN7Sd2Card9writeDataEhPKh+0x84>

0000bf6a <_ZN7Sd2Card11waitNotBusyEj>:
  spiRate_ = sckRateID;
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    bf6a:	af 92       	push	r10
    bf6c:	bf 92       	push	r11
    bf6e:	cf 92       	push	r12
    bf70:	df 92       	push	r13
    bf72:	ef 92       	push	r14
    bf74:	ff 92       	push	r15
    bf76:	0f 93       	push	r16
    bf78:	1f 93       	push	r17
    bf7a:	8b 01       	movw	r16, r22
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    bf7c:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    bf80:	59 01       	movw	r10, r18
    bf82:	6a 01       	movw	r12, r20
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  unsigned long t0 = millis();
  while (spiRec() != 0XFF) {
    if (millisDelta( millis(), t0) >= timeoutMillis) goto fail;
    bf84:	78 01       	movw	r14, r16
    bf86:	00 e0       	ldi	r16, 0x00	; 0
    bf88:	10 e0       	ldi	r17, 0x00	; 0
    bf8a:	0f c0       	rjmp	.+30     	; 0xbfaa <_ZN7Sd2Card11waitNotBusyEj+0x40>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  unsigned long t0 = millis();
  while (spiRec() != 0XFF) {
    bf8c:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    if (millisDelta( millis(), t0) >= timeoutMillis) goto fail;
    bf90:	b9 01       	movw	r22, r18
    bf92:	ca 01       	movw	r24, r20
    bf94:	95 01       	movw	r18, r10
    bf96:	a6 01       	movw	r20, r12
    bf98:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    bf9c:	6e 15       	cp	r22, r14
    bf9e:	7f 05       	cpc	r23, r15
    bfa0:	80 07       	cpc	r24, r16
    bfa2:	91 07       	cpc	r25, r17
    bfa4:	10 f0       	brcs	.+4      	; 0xbfaa <_ZN7Sd2Card11waitNotBusyEj+0x40>
    bfa6:	80 e0       	ldi	r24, 0x00	; 0
    bfa8:	05 c0       	rjmp	.+10     	; 0xbfb4 <_ZN7Sd2Card11waitNotBusyEj+0x4a>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  unsigned long t0 = millis();
  while (spiRec() != 0XFF) {
    bfaa:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    bfae:	8f 3f       	cpi	r24, 0xFF	; 255
    bfb0:	69 f7       	brne	.-38     	; 0xbf8c <_ZN7Sd2Card11waitNotBusyEj+0x22>
    bfb2:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;

 fail:
  return false;
}
    bfb4:	1f 91       	pop	r17
    bfb6:	0f 91       	pop	r16
    bfb8:	ff 90       	pop	r15
    bfba:	ef 90       	pop	r14
    bfbc:	df 90       	pop	r13
    bfbe:	cf 90       	pop	r12
    bfc0:	bf 90       	pop	r11
    bfc2:	af 90       	pop	r10
    bfc4:	08 95       	ret

0000bfc6 <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStop() {
    bfc6:	cf 93       	push	r28
    bfc8:	df 93       	push	r29
    bfca:	ec 01       	movw	r28, r24
  chipSelectLow();
    bfcc:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <_ZN7Sd2Card13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    bfd0:	ce 01       	movw	r24, r28
    bfd2:	68 e5       	ldi	r22, 0x58	; 88
    bfd4:	72 e0       	ldi	r23, 0x02	; 2
    bfd6:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <_ZN7Sd2Card11waitNotBusyEj>
    bfda:	88 23       	and	r24, r24
    bfdc:	99 f0       	breq	.+38     	; 0xc004 <_ZN7Sd2Card9writeStopEv+0x3e>
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    bfde:	80 91 d4 22 	lds	r24, 0x22D4
    bfe2:	90 91 d5 22 	lds	r25, 0x22D5
    bfe6:	6d ef       	ldi	r22, 0xFD	; 253
    bfe8:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
 */
bool Sd2Card::writeStop() {
  chipSelectLow();
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  spiSend(STOP_TRAN_TOKEN);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    bfec:	ce 01       	movw	r24, r28
    bfee:	68 e5       	ldi	r22, 0x58	; 88
    bff0:	72 e0       	ldi	r23, 0x02	; 2
    bff2:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <_ZN7Sd2Card11waitNotBusyEj>
    bff6:	88 23       	and	r24, r24
    bff8:	29 f0       	breq	.+10     	; 0xc004 <_ZN7Sd2Card9writeStopEv+0x3e>
  chipSelectHigh();
    bffa:	ce 01       	movw	r24, r28
    bffc:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c000:	81 e0       	ldi	r24, 0x01	; 1
    c002:	06 c0       	rjmp	.+12     	; 0xc010 <_ZN7Sd2Card9writeStopEv+0x4a>
    c004:	82 e1       	ldi	r24, 0x12	; 18
    c006:	89 83       	std	Y+1, r24	; 0x01
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
    c008:	ce 01       	movw	r24, r28
    c00a:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c00e:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    c010:	df 91       	pop	r29
    c012:	cf 91       	pop	r28
    c014:	08 95       	ret

0000c016 <_ZN7Sd2Card9writeDataEPKh>:
/** Write one data block in a multiple block write sequence
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeData(const uint8_t* src) {
    c016:	0f 93       	push	r16
    c018:	1f 93       	push	r17
    c01a:	cf 93       	push	r28
    c01c:	df 93       	push	r29
    c01e:	ec 01       	movw	r28, r24
    c020:	8b 01       	movw	r16, r22
  chipSelectLow();
    c022:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <_ZN7Sd2Card13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
    c026:	ce 01       	movw	r24, r28
    c028:	68 e5       	ldi	r22, 0x58	; 88
    c02a:	72 e0       	ldi	r23, 0x02	; 2
    c02c:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <_ZN7Sd2Card11waitNotBusyEj>
    c030:	88 23       	and	r24, r24
    c032:	61 f0       	breq	.+24     	; 0xc04c <_ZN7Sd2Card9writeDataEPKh+0x36>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    c034:	ce 01       	movw	r24, r28
    c036:	6c ef       	ldi	r22, 0xFC	; 252
    c038:	a8 01       	movw	r20, r16
    c03a:	0e 94 33 5f 	call	0xbe66	; 0xbe66 <_ZN7Sd2Card9writeDataEhPKh>
    c03e:	88 23       	and	r24, r24
    c040:	29 f0       	breq	.+10     	; 0xc04c <_ZN7Sd2Card9writeDataEPKh+0x36>
  chipSelectHigh();
    c042:	ce 01       	movw	r24, r28
    c044:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c048:	81 e0       	ldi	r24, 0x01	; 1
    c04a:	06 c0       	rjmp	.+12     	; 0xc058 <_ZN7Sd2Card9writeDataEPKh+0x42>
    c04c:	85 e1       	ldi	r24, 0x15	; 21
    c04e:	89 83       	std	Y+1, r24	; 0x01
  return true;

 fail:
  error(SD_CARD_ERROR_WRITE_MULTIPLE);
  chipSelectHigh();
    c050:	ce 01       	movw	r24, r28
    c052:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c056:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    c058:	df 91       	pop	r29
    c05a:	cf 91       	pop	r28
    c05c:	1f 91       	pop	r17
    c05e:	0f 91       	pop	r16
    c060:	08 95       	ret

0000c062 <_ZN7Sd2Card11cardCommandEhm>:
#endif  // USE_SD_CRC
//==============================================================================
// Sd2Card member functions
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    c062:	bf 92       	push	r11
    c064:	cf 92       	push	r12
    c066:	df 92       	push	r13
    c068:	ef 92       	push	r14
    c06a:	ff 92       	push	r15
    c06c:	0f 93       	push	r16
    c06e:	1f 93       	push	r17
    c070:	df 93       	push	r29
    c072:	cf 93       	push	r28
    c074:	cd b7       	in	r28, 0x3d	; 61
    c076:	de b7       	in	r29, 0x3e	; 62
    c078:	2a 97       	sbiw	r28, 0x0a	; 10
    c07a:	cd bf       	out	0x3d, r28	; 61
    c07c:	de bf       	out	0x3e, r29	; 62
    c07e:	6c 01       	movw	r12, r24
    c080:	b6 2e       	mov	r11, r22
    c082:	2f 83       	std	Y+7, r18	; 0x07
    c084:	38 87       	std	Y+8, r19	; 0x08
    c086:	49 87       	std	Y+9, r20	; 0x09
    c088:	5a 87       	std	Y+10, r21	; 0x0a
  // select card
  chipSelectLow();
    c08a:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    c08e:	c6 01       	movw	r24, r12
    c090:	6c e2       	ldi	r22, 0x2C	; 44
    c092:	71 e0       	ldi	r23, 0x01	; 1
    c094:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <_ZN7Sd2Card11waitNotBusyEj>

  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
    c098:	fe 01       	movw	r30, r28
    c09a:	37 96       	adiw	r30, 0x07	; 7

#if USE_SD_CRC
  // form message
  uint8_t d[6] = {cmd | 0X40, pa[3], pa[2], pa[1], pa[0]};
    c09c:	9e 01       	movw	r18, r28
    c09e:	2f 5f       	subi	r18, 0xFF	; 255
    c0a0:	3f 4f       	sbci	r19, 0xFF	; 255
    c0a2:	86 e0       	ldi	r24, 0x06	; 6
    c0a4:	d9 01       	movw	r26, r18
    c0a6:	1d 92       	st	X+, r1
    c0a8:	8a 95       	dec	r24
    c0aa:	e9 f7       	brne	.-6      	; 0xc0a6 <_ZN7Sd2Card11cardCommandEhm+0x44>
    c0ac:	8b 2d       	mov	r24, r11
    c0ae:	80 64       	ori	r24, 0x40	; 64
    c0b0:	89 83       	std	Y+1, r24	; 0x01
    c0b2:	83 81       	ldd	r24, Z+3	; 0x03
    c0b4:	8a 83       	std	Y+2, r24	; 0x02
    c0b6:	82 81       	ldd	r24, Z+2	; 0x02
    c0b8:	8b 83       	std	Y+3, r24	; 0x03
    c0ba:	81 81       	ldd	r24, Z+1	; 0x01
    c0bc:	8c 83       	std	Y+4, r24	; 0x04
    c0be:	8f 81       	ldd	r24, Y+7	; 0x07
    c0c0:	8d 83       	std	Y+5, r24	; 0x05
    c0c2:	89 01       	movw	r16, r18
    c0c4:	f9 01       	movw	r30, r18
    c0c6:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    uint8_t d = data[i];
    for (uint8_t j = 0; j < 8; j++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    c0c8:	69 e0       	ldi	r22, 0x09	; 9
#if USE_SD_CRC
// CRC functions
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    c0ca:	ae 01       	movw	r20, r28
    c0cc:	4a 5f       	subi	r20, 0xFA	; 250
    c0ce:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t d = data[i];
    c0d0:	30 81       	ld	r19, Z
    c0d2:	20 e0       	ldi	r18, 0x00	; 0
    for (uint8_t j = 0; j < 8; j++) {
      crc <<= 1;
    c0d4:	99 0f       	add	r25, r25
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    c0d6:	89 2f       	mov	r24, r25
    c0d8:	83 27       	eor	r24, r19
    c0da:	87 fd       	sbrc	r24, 7
    c0dc:	96 27       	eor	r25, r22
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    uint8_t d = data[i];
    for (uint8_t j = 0; j < 8; j++) {
    c0de:	2f 5f       	subi	r18, 0xFF	; 255
    c0e0:	28 30       	cpi	r18, 0x08	; 8
    c0e2:	11 f0       	breq	.+4      	; 0xc0e8 <_ZN7Sd2Card11cardCommandEhm+0x86>
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    c0e4:	33 0f       	add	r19, r19
    c0e6:	f6 cf       	rjmp	.-20     	; 0xc0d4 <_ZN7Sd2Card11cardCommandEhm+0x72>
    c0e8:	31 96       	adiw	r30, 0x01	; 1
#if USE_SD_CRC
// CRC functions
//------------------------------------------------------------------------------
static uint8_t CRC7(const uint8_t* data, uint8_t n) {
  uint8_t crc = 0;
  for (uint8_t i = 0; i < n; i++) {
    c0ea:	e4 17       	cp	r30, r20
    c0ec:	f5 07       	cpc	r31, r21
    c0ee:	81 f7       	brne	.-32     	; 0xc0d0 <_ZN7Sd2Card11cardCommandEhm+0x6e>
#if USE_SD_CRC
  // form message
  uint8_t d[6] = {cmd | 0X40, pa[3], pa[2], pa[1], pa[0]};

  // add crc
  d[5] = CRC7(d, 5);
    c0f0:	99 0f       	add	r25, r25
    c0f2:	91 60       	ori	r25, 0x01	; 1
    c0f4:	9e 83       	std	Y+6, r25	; 0x06

  // send message
  for (uint8_t k = 0; k < 6; k++) spiSend(d[k]);
    c0f6:	f7 e0       	ldi	r31, 0x07	; 7
    c0f8:	ef 2e       	mov	r14, r31
    c0fa:	f1 2c       	mov	r15, r1
    c0fc:	ec 0e       	add	r14, r28
    c0fe:	fd 1e       	adc	r15, r29
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    c100:	80 91 d4 22 	lds	r24, 0x22D4
    c104:	90 91 d5 22 	lds	r25, 0x22D5
    c108:	f8 01       	movw	r30, r16
    c10a:	61 91       	ld	r22, Z+
    c10c:	8f 01       	movw	r16, r30
    c10e:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>

  // add crc
  d[5] = CRC7(d, 5);

  // send message
  for (uint8_t k = 0; k < 6; k++) spiSend(d[k]);
    c112:	0e 15       	cp	r16, r14
    c114:	1f 05       	cpc	r17, r15
    c116:	a1 f7       	brne	.-24     	; 0xc100 <_ZN7Sd2Card11cardCommandEhm+0x9e>
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) spiRec();
    c118:	fc e0       	ldi	r31, 0x0C	; 12
    c11a:	bf 16       	cp	r11, r31
    c11c:	11 f4       	brne	.+4      	; 0xc122 <_ZN7Sd2Card11cardCommandEhm+0xc0>
    c11e:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c122:	10 e0       	ldi	r17, 0x00	; 0

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    c124:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c128:	d6 01       	movw	r26, r12
    c12a:	13 96       	adiw	r26, 0x03	; 3
    c12c:	8c 93       	st	X, r24
    c12e:	87 ff       	sbrs	r24, 7
    c130:	02 c0       	rjmp	.+4      	; 0xc136 <_ZN7Sd2Card11cardCommandEhm+0xd4>
    c132:	11 50       	subi	r17, 0x01	; 1
    c134:	b9 f7       	brne	.-18     	; 0xc124 <_ZN7Sd2Card11cardCommandEhm+0xc2>
  return status_;
}
    c136:	2a 96       	adiw	r28, 0x0a	; 10
    c138:	cd bf       	out	0x3d, r28	; 61
    c13a:	de bf       	out	0x3e, r29	; 62
    c13c:	cf 91       	pop	r28
    c13e:	df 91       	pop	r29
    c140:	1f 91       	pop	r17
    c142:	0f 91       	pop	r16
    c144:	ff 90       	pop	r15
    c146:	ef 90       	pop	r14
    c148:	df 90       	pop	r13
    c14a:	cf 90       	pop	r12
    c14c:	bf 90       	pop	r11
    c14e:	08 95       	ret

0000c150 <_ZN7Sd2Card10writeStartEmm>:
 * for optimized multiple block writes.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
    c150:	af 92       	push	r10
    c152:	bf 92       	push	r11
    c154:	cf 92       	push	r12
    c156:	df 92       	push	r13
    c158:	ef 92       	push	r14
    c15a:	ff 92       	push	r15
    c15c:	0f 93       	push	r16
    c15e:	1f 93       	push	r17
    c160:	cf 93       	push	r28
    c162:	df 93       	push	r29
    c164:	ec 01       	movw	r28, r24
    c166:	5a 01       	movw	r10, r20
    c168:	6b 01       	movw	r12, r22
    c16a:	78 01       	movw	r14, r16
    c16c:	89 01       	movw	r16, r18
  uint8_t spiRate_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c16e:	67 e3       	ldi	r22, 0x37	; 55
    c170:	20 e0       	ldi	r18, 0x00	; 0
    c172:	30 e0       	ldi	r19, 0x00	; 0
    c174:	40 e0       	ldi	r20, 0x00	; 0
    c176:	50 e0       	ldi	r21, 0x00	; 0
    c178:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    c17c:	ce 01       	movw	r24, r28
    c17e:	67 e1       	ldi	r22, 0x17	; 23
    c180:	a8 01       	movw	r20, r16
    c182:	97 01       	movw	r18, r14
    c184:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
    c188:	88 23       	and	r24, r24
    c18a:	11 f0       	breq	.+4      	; 0xc190 <_ZN7Sd2Card10writeStartEmm+0x40>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c18c:	89 e0       	ldi	r24, 0x09	; 9
    c18e:	13 c0       	rjmp	.+38     	; 0xc1b6 <_ZN7Sd2Card10writeStartEmm+0x66>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c190:	8c 81       	ldd	r24, Y+4	; 0x04
    c192:	83 30       	cpi	r24, 0x03	; 3
    c194:	39 f0       	breq	.+14     	; 0xc1a4 <_ZN7Sd2Card10writeStartEmm+0x54>
    c196:	a9 e0       	ldi	r26, 0x09	; 9
    c198:	aa 0c       	add	r10, r10
    c19a:	bb 1c       	adc	r11, r11
    c19c:	cc 1c       	adc	r12, r12
    c19e:	dd 1c       	adc	r13, r13
    c1a0:	aa 95       	dec	r26
    c1a2:	d1 f7       	brne	.-12     	; 0xc198 <_ZN7Sd2Card10writeStartEmm+0x48>
  if (cardCommand(CMD25, blockNumber)) {
    c1a4:	ce 01       	movw	r24, r28
    c1a6:	69 e1       	ldi	r22, 0x19	; 25
    c1a8:	a6 01       	movw	r20, r12
    c1aa:	95 01       	movw	r18, r10
    c1ac:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c1b0:	88 23       	and	r24, r24
    c1b2:	39 f0       	breq	.+14     	; 0xc1c2 <_ZN7Sd2Card10writeStartEmm+0x72>
    c1b4:	87 e0       	ldi	r24, 0x07	; 7
    c1b6:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c1b8:	ce 01       	movw	r24, r28
    c1ba:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c1be:	80 e0       	ldi	r24, 0x00	; 0
    c1c0:	04 c0       	rjmp	.+8      	; 0xc1ca <_ZN7Sd2Card10writeStartEmm+0x7a>
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  chipSelectHigh();
    c1c2:	ce 01       	movw	r24, r28
    c1c4:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c1c8:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    c1ca:	df 91       	pop	r29
    c1cc:	cf 91       	pop	r28
    c1ce:	1f 91       	pop	r17
    c1d0:	0f 91       	pop	r16
    c1d2:	ff 90       	pop	r15
    c1d4:	ef 90       	pop	r14
    c1d6:	df 90       	pop	r13
    c1d8:	cf 90       	pop	r12
    c1da:	bf 90       	pop	r11
    c1dc:	af 90       	pop	r10
    c1de:	08 95       	ret

0000c1e0 <_ZN7Sd2Card8readStopEv>:
/** End a read multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStop() {
    c1e0:	cf 93       	push	r28
    c1e2:	df 93       	push	r29
    c1e4:	ec 01       	movw	r28, r24
  chipSelectLow();
    c1e6:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <_ZN7Sd2Card13chipSelectLowEv>
  if (cardCommand(CMD12, 0)) {
    c1ea:	ce 01       	movw	r24, r28
    c1ec:	6c e0       	ldi	r22, 0x0C	; 12
    c1ee:	20 e0       	ldi	r18, 0x00	; 0
    c1f0:	30 e0       	ldi	r19, 0x00	; 0
    c1f2:	40 e0       	ldi	r20, 0x00	; 0
    c1f4:	50 e0       	ldi	r21, 0x00	; 0
    c1f6:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c1fa:	88 23       	and	r24, r24
    c1fc:	39 f0       	breq	.+14     	; 0xc20c <_ZN7Sd2Card8readStopEv+0x2c>
    c1fe:	83 e0       	ldi	r24, 0x03	; 3
    c200:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c202:	ce 01       	movw	r24, r28
    c204:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c208:	80 e0       	ldi	r24, 0x00	; 0
    c20a:	04 c0       	rjmp	.+8      	; 0xc214 <_ZN7Sd2Card8readStopEv+0x34>
  chipSelectLow();
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
    c20c:	ce 01       	movw	r24, r28
    c20e:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c212:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    c214:	df 91       	pop	r29
    c216:	cf 91       	pop	r28
    c218:	08 95       	ret

0000c21a <_ZN7Sd2Card9readStartEm>:
 * multiple block reads.  SPI chipSelect must be low for the entire sequence.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readStart(uint32_t blockNumber) {
    c21a:	cf 93       	push	r28
    c21c:	df 93       	push	r29
    c21e:	ec 01       	movw	r28, r24
    c220:	9a 01       	movw	r18, r20
    c222:	ab 01       	movw	r20, r22
  SD_TRACE("RS", blockNumber);
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c224:	8c 81       	ldd	r24, Y+4	; 0x04
    c226:	83 30       	cpi	r24, 0x03	; 3
    c228:	39 f0       	breq	.+14     	; 0xc238 <_ZN7Sd2Card9readStartEm+0x1e>
    c22a:	b9 e0       	ldi	r27, 0x09	; 9
    c22c:	22 0f       	add	r18, r18
    c22e:	33 1f       	adc	r19, r19
    c230:	44 1f       	adc	r20, r20
    c232:	55 1f       	adc	r21, r21
    c234:	ba 95       	dec	r27
    c236:	d1 f7       	brne	.-12     	; 0xc22c <_ZN7Sd2Card9readStartEm+0x12>
  if (cardCommand(CMD18, blockNumber)) {
    c238:	ce 01       	movw	r24, r28
    c23a:	62 e1       	ldi	r22, 0x12	; 18
    c23c:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c240:	88 23       	and	r24, r24
    c242:	39 f0       	breq	.+14     	; 0xc252 <_ZN7Sd2Card9readStartEm+0x38>
    c244:	85 e0       	ldi	r24, 0x05	; 5
    c246:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c248:	ce 01       	movw	r24, r28
    c24a:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c24e:	80 e0       	ldi	r24, 0x00	; 0
    c250:	04 c0       	rjmp	.+8      	; 0xc25a <_ZN7Sd2Card9readStartEm+0x40>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  chipSelectHigh();
    c252:	ce 01       	movw	r24, r28
    c254:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c258:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    c25a:	df 91       	pop	r29
    c25c:	cf 91       	pop	r28
    c25e:	08 95       	ret

0000c260 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    c260:	cf 92       	push	r12
    c262:	df 92       	push	r13
    c264:	ef 92       	push	r14
    c266:	ff 92       	push	r15
    c268:	0f 93       	push	r16
    c26a:	1f 93       	push	r17
    c26c:	cf 93       	push	r28
    c26e:	df 93       	push	r29
    c270:	ec 01       	movw	r28, r24
    c272:	7a 01       	movw	r14, r20
    c274:	8b 01       	movw	r16, r22
    c276:	69 01       	movw	r12, r18
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c278:	8c 81       	ldd	r24, Y+4	; 0x04
    c27a:	83 30       	cpi	r24, 0x03	; 3
    c27c:	39 f0       	breq	.+14     	; 0xc28c <_ZN7Sd2Card10writeBlockEmPKh+0x2c>
    c27e:	89 e0       	ldi	r24, 0x09	; 9
    c280:	ee 0c       	add	r14, r14
    c282:	ff 1c       	adc	r15, r15
    c284:	00 1f       	adc	r16, r16
    c286:	11 1f       	adc	r17, r17
    c288:	8a 95       	dec	r24
    c28a:	d1 f7       	brne	.-12     	; 0xc280 <_ZN7Sd2Card10writeBlockEmPKh+0x20>
  if (cardCommand(CMD24, blockNumber)) {
    c28c:	ce 01       	movw	r24, r28
    c28e:	68 e1       	ldi	r22, 0x18	; 24
    c290:	a8 01       	movw	r20, r16
    c292:	97 01       	movw	r18, r14
    c294:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c298:	88 23       	and	r24, r24
    c29a:	11 f0       	breq	.+4      	; 0xc2a0 <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    c29c:	86 e0       	ldi	r24, 0x06	; 6
    c29e:	1f c0       	rjmp	.+62     	; 0xc2de <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    c2a0:	ce 01       	movw	r24, r28
    c2a2:	6e ef       	ldi	r22, 0xFE	; 254
    c2a4:	a6 01       	movw	r20, r12
    c2a6:	0e 94 33 5f 	call	0xbe66	; 0xbe66 <_ZN7Sd2Card9writeDataEhPKh>
    c2aa:	88 23       	and	r24, r24
    c2ac:	c9 f0       	breq	.+50     	; 0xc2e0 <_ZN7Sd2Card10writeBlockEmPKh+0x80>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    c2ae:	ce 01       	movw	r24, r28
    c2b0:	68 e5       	ldi	r22, 0x58	; 88
    c2b2:	72 e0       	ldi	r23, 0x02	; 2
    c2b4:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <_ZN7Sd2Card11waitNotBusyEj>
    c2b8:	88 23       	and	r24, r24
    c2ba:	11 f4       	brne	.+4      	; 0xc2c0 <_ZN7Sd2Card10writeBlockEmPKh+0x60>
    c2bc:	87 e1       	ldi	r24, 0x17	; 23
    c2be:	0f c0       	rjmp	.+30     	; 0xc2de <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    c2c0:	ce 01       	movw	r24, r28
    c2c2:	6d e0       	ldi	r22, 0x0D	; 13
    c2c4:	20 e0       	ldi	r18, 0x00	; 0
    c2c6:	30 e0       	ldi	r19, 0x00	; 0
    c2c8:	40 e0       	ldi	r20, 0x00	; 0
    c2ca:	50 e0       	ldi	r21, 0x00	; 0
    c2cc:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c2d0:	88 23       	and	r24, r24
    c2d2:	21 f4       	brne	.+8      	; 0xc2dc <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    c2d4:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c2d8:	88 23       	and	r24, r24
    c2da:	79 f0       	breq	.+30     	; 0xc2fa <_ZN7Sd2Card10writeBlockEmPKh+0x9a>
    c2dc:	86 e1       	ldi	r24, 0x16	; 22
    c2de:	89 83       	std	Y+1, r24	; 0x01
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c2e0:	ce 01       	movw	r24, r28
    c2e2:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c2e6:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    c2e8:	df 91       	pop	r29
    c2ea:	cf 91       	pop	r28
    c2ec:	1f 91       	pop	r17
    c2ee:	0f 91       	pop	r16
    c2f0:	ff 90       	pop	r15
    c2f2:	ef 90       	pop	r14
    c2f4:	df 90       	pop	r13
    c2f6:	cf 90       	pop	r12
    c2f8:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    c2fa:	ce 01       	movw	r24, r28
    c2fc:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c300:	81 e0       	ldi	r24, 0x01	; 1
    c302:	f2 cf       	rjmp	.-28     	; 0xc2e8 <_ZN7Sd2Card10writeBlockEmPKh+0x88>

0000c304 <_ZN7Sd2Card8readDataEPhj>:
bool Sd2Card::readData(uint8_t *dst) {
  chipSelectLow();
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
    c304:	6f 92       	push	r6
    c306:	7f 92       	push	r7
    c308:	8f 92       	push	r8
    c30a:	9f 92       	push	r9
    c30c:	af 92       	push	r10
    c30e:	bf 92       	push	r11
    c310:	cf 92       	push	r12
    c312:	df 92       	push	r13
    c314:	ef 92       	push	r14
    c316:	ff 92       	push	r15
    c318:	0f 93       	push	r16
    c31a:	1f 93       	push	r17
    c31c:	cf 93       	push	r28
    c31e:	df 93       	push	r29
    c320:	ec 01       	movw	r28, r24
    c322:	4b 01       	movw	r8, r22
    c324:	3a 01       	movw	r6, r20
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c326:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    c32a:	79 01       	movw	r14, r18
    c32c:	8a 01       	movw	r16, r20
    c32e:	0f c0       	rjmp	.+30     	; 0xc34e <_ZN7Sd2Card8readDataEPhj+0x4a>
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
  uint16_t crc;
  // wait for start block token
  unsigned long t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    c330:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    if ( millisDelta( millis(), t0) > SD_READ_TIMEOUT) {
    c334:	b9 01       	movw	r22, r18
    c336:	ca 01       	movw	r24, r20
    c338:	97 01       	movw	r18, r14
    c33a:	a8 01       	movw	r20, r16
    c33c:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    c340:	6d 52       	subi	r22, 0x2D	; 45
    c342:	71 40       	sbci	r23, 0x01	; 1
    c344:	80 40       	sbci	r24, 0x00	; 0
    c346:	90 40       	sbci	r25, 0x00	; 0
    c348:	10 f0       	brcs	.+4      	; 0xc34e <_ZN7Sd2Card8readDataEPhj+0x4a>
    c34a:	81 e1       	ldi	r24, 0x11	; 17
    c34c:	53 c0       	rjmp	.+166    	; 0xc3f4 <_ZN7Sd2Card8readDataEPhj+0xf0>
//------------------------------------------------------------------------------
bool Sd2Card::readData(uint8_t* dst, size_t count) {
  uint16_t crc;
  // wait for start block token
  unsigned long t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    c34e:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c352:	8b 83       	std	Y+3, r24	; 0x03
    c354:	8f 3f       	cpi	r24, 0xFF	; 255
    c356:	61 f3       	breq	.-40     	; 0xc330 <_ZN7Sd2Card8readDataEPhj+0x2c>
    if ( millisDelta( millis(), t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    c358:	8e 3f       	cpi	r24, 0xFE	; 254
    c35a:	11 f0       	breq	.+4      	; 0xc360 <_ZN7Sd2Card8readDataEPhj+0x5c>
    c35c:	8f e0       	ldi	r24, 0x0F	; 15
    c35e:	4a c0       	rjmp	.+148    	; 0xc3f4 <_ZN7Sd2Card8readDataEPhj+0xf0>
  uint8_t c_status = 0;

  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
    c360:	0e 94 4f 9c 	call	0x1389e	; 0x1389e <arb_sysTimerEnabled>
    c364:	88 23       	and	r24, r24
    c366:	99 f0       	breq	.+38     	; 0xc38e <_ZN7Sd2Card8readDataEPhj+0x8a>
    c368:	0f b6       	in	r0, 0x3f	; 63
    c36a:	07 fe       	sbrs	r0, 7
    c36c:	10 c0       	rjmp	.+32     	; 0xc38e <_ZN7Sd2Card8readDataEPhj+0x8a>
    c36e:	5b c0       	rjmp	.+182    	; 0xc426 <_ZN7Sd2Card8readDataEPhj+0x122>
  {
     for( uint32_t i = 0; i < n; i++)
       hal_spiReadByte( gt_spiHandle,
                        (int8_t *)&buf[i]);
    c370:	80 91 d4 22 	lds	r24, 0x22D4
    c374:	90 91 d5 22 	lds	r25, 0x22D5
    c378:	b4 01       	movw	r22, r8
    c37a:	6e 0d       	add	r22, r14
    c37c:	7f 1d       	adc	r23, r15
    c37e:	0e 94 62 31 	call	0x62c4	; 0x62c4 <hal_spiReadByte>
  /*-------------------------------------------------------------------------*
   * Allow fast block transfers after the OS is operational.
   *-------------------------------------------------------------------------*/
  if( (arb_sysTimerEnabled() == false) || (HAL_ARE_INTS_EN() == 0))
  {
     for( uint32_t i = 0; i < n; i++)
    c382:	08 94       	sec
    c384:	e1 1c       	adc	r14, r1
    c386:	f1 1c       	adc	r15, r1
    c388:	01 1d       	adc	r16, r1
    c38a:	11 1d       	adc	r17, r1
    c38c:	06 c0       	rjmp	.+12     	; 0xc39a <_ZN7Sd2Card8readDataEPhj+0x96>
    c38e:	ee 24       	eor	r14, r14
    c390:	ff 24       	eor	r15, r15
    c392:	87 01       	movw	r16, r14
    c394:	53 01       	movw	r10, r6
    c396:	cc 24       	eor	r12, r12
    c398:	dd 24       	eor	r13, r13
    c39a:	ea 14       	cp	r14, r10
    c39c:	fb 04       	cpc	r15, r11
    c39e:	0c 05       	cpc	r16, r12
    c3a0:	1d 05       	cpc	r17, r13
    c3a2:	30 f3       	brcs	.-52     	; 0xc370 <_ZN7Sd2Card8readDataEPhj+0x6c>
    c3a4:	13 c0       	rjmp	.+38     	; 0xc3cc <_ZN7Sd2Card8readDataEPhj+0xc8>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c3a6:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
     t0 = millis();

     while( b_bTransComplete == false)
     {

        if( millisDelta( millis(), t0) > (SD_READ_TIMEOUT*5))
    c3aa:	b9 01       	movw	r22, r18
    c3ac:	ca 01       	movw	r24, r20
    c3ae:	97 01       	movw	r18, r14
    c3b0:	a8 01       	movw	r20, r16
    c3b2:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    c3b6:	6d 5d       	subi	r22, 0xDD	; 221
    c3b8:	75 40       	sbci	r23, 0x05	; 5
    c3ba:	80 40       	sbci	r24, 0x00	; 0
    c3bc:	90 40       	sbci	r25, 0x00	; 0
    c3be:	20 f4       	brcc	.+8      	; 0xc3c8 <_ZN7Sd2Card8readDataEPhj+0xc4>
                       (int8_t *)buf,
                       (uint16_t)n);

     t0 = millis();

     while( b_bTransComplete == false)
    c3c0:	80 91 d6 22 	lds	r24, 0x22D6
    c3c4:	88 23       	and	r24, r24
    c3c6:	79 f3       	breq	.-34     	; 0xc3a6 <_ZN7Sd2Card8readDataEPhj+0xa2>
           break;
           c_status = 1;
        }
     }

     b_bTransComplete = false;
    c3c8:	10 92 d6 22 	sts	0x22D6, r1
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if (status_ = spiRec(dst, count)) {
    c3cc:	1b 82       	std	Y+3, r1	; 0x03
    error(SD_CARD_ERROR_SPI_DMA);
    goto fail;
  }
  // get crc
  crc = (spiRec() << 8) | spiRec();
    c3ce:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c3d2:	f8 2e       	mov	r15, r24
    c3d4:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c3d8:	08 2f       	mov	r16, r24
#if USE_SD_CRC
  if (crc != CRC_CCITT(dst, count)) {
    c3da:	c4 01       	movw	r24, r8
    c3dc:	b3 01       	movw	r22, r6
    c3de:	0e 94 9d 5e 	call	0xbd3a	; 0xbd3a <_ZL9CRC_CCITTPKhj>
    c3e2:	3f 2d       	mov	r19, r15
    c3e4:	20 e0       	ldi	r18, 0x00	; 0
    c3e6:	10 e0       	ldi	r17, 0x00	; 0
    c3e8:	20 2b       	or	r18, r16
    c3ea:	31 2b       	or	r19, r17
    c3ec:	28 17       	cp	r18, r24
    c3ee:	39 07       	cpc	r19, r25
    c3f0:	39 f0       	breq	.+14     	; 0xc400 <_ZN7Sd2Card8readDataEPhj+0xfc>
    c3f2:	8b e1       	ldi	r24, 0x1B	; 27
    c3f4:	89 83       	std	Y+1, r24	; 0x01

  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    c3f6:	ce 01       	movw	r24, r28
    c3f8:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c3fc:	80 e0       	ldi	r24, 0x00	; 0
    c3fe:	04 c0       	rjmp	.+8      	; 0xc408 <_ZN7Sd2Card8readDataEPhj+0x104>
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#endif  // USE_SD_CRC

  chipSelectHigh();
    c400:	ce 01       	movw	r24, r28
    c402:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c406:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    c408:	df 91       	pop	r29
    c40a:	cf 91       	pop	r28
    c40c:	1f 91       	pop	r17
    c40e:	0f 91       	pop	r16
    c410:	ff 90       	pop	r15
    c412:	ef 90       	pop	r14
    c414:	df 90       	pop	r13
    c416:	cf 90       	pop	r12
    c418:	bf 90       	pop	r11
    c41a:	af 90       	pop	r10
    c41c:	9f 90       	pop	r9
    c41e:	8f 90       	pop	r8
    c420:	7f 90       	pop	r7
    c422:	6f 90       	pop	r6
    c424:	08 95       	ret
  else
  {
     hal_spiReadBlock( gt_spiHandle,
                       false,
                       (int8_t *)buf,
                       (uint16_t)n);
    c426:	80 91 d4 22 	lds	r24, 0x22D4
    c42a:	90 91 d5 22 	lds	r25, 0x22D5
    c42e:	60 e0       	ldi	r22, 0x00	; 0
    c430:	a4 01       	movw	r20, r8
    c432:	93 01       	movw	r18, r6
    c434:	0e 94 8b 3c 	call	0x7916	; 0x7916 <hal_spiReadBlock>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c438:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    c43c:	79 01       	movw	r14, r18
    c43e:	8a 01       	movw	r16, r20
    c440:	bf cf       	rjmp	.-130    	; 0xc3c0 <_ZN7Sd2Card8readDataEPhj+0xbc>

0000c442 <_ZN7Sd2Card8readDataEPh>:
 * \param[in] dst Pointer to the location for the data to be read.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readData(uint8_t *dst) {
    c442:	ef 92       	push	r14
    c444:	ff 92       	push	r15
    c446:	0f 93       	push	r16
    c448:	1f 93       	push	r17
    c44a:	8c 01       	movw	r16, r24
    c44c:	7b 01       	movw	r14, r22
  chipSelectLow();
    c44e:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <_ZN7Sd2Card13chipSelectLowEv>
  return readData(dst, 512);
    c452:	c8 01       	movw	r24, r16
    c454:	b7 01       	movw	r22, r14
    c456:	40 e0       	ldi	r20, 0x00	; 0
    c458:	52 e0       	ldi	r21, 0x02	; 2
    c45a:	0e 94 82 61 	call	0xc304	; 0xc304 <_ZN7Sd2Card8readDataEPhj>
}
    c45e:	1f 91       	pop	r17
    c460:	0f 91       	pop	r16
    c462:	ff 90       	pop	r15
    c464:	ef 90       	pop	r14
    c466:	08 95       	ret

0000c468 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool Sd2Card::readBlock(uint32_t blockNumber, uint8_t* dst) {
    c468:	cf 92       	push	r12
    c46a:	df 92       	push	r13
    c46c:	ef 92       	push	r14
    c46e:	ff 92       	push	r15
    c470:	0f 93       	push	r16
    c472:	1f 93       	push	r17
    c474:	cf 93       	push	r28
    c476:	df 93       	push	r29
    c478:	ec 01       	movw	r28, r24
    c47a:	7a 01       	movw	r14, r20
    c47c:	8b 01       	movw	r16, r22
    c47e:	69 01       	movw	r12, r18
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    c480:	8c 81       	ldd	r24, Y+4	; 0x04
    c482:	83 30       	cpi	r24, 0x03	; 3
    c484:	39 f0       	breq	.+14     	; 0xc494 <_ZN7Sd2Card9readBlockEmPh+0x2c>
    c486:	79 e0       	ldi	r23, 0x09	; 9
    c488:	ee 0c       	add	r14, r14
    c48a:	ff 1c       	adc	r15, r15
    c48c:	00 1f       	adc	r16, r16
    c48e:	11 1f       	adc	r17, r17
    c490:	7a 95       	dec	r23
    c492:	d1 f7       	brne	.-12     	; 0xc488 <_ZN7Sd2Card9readBlockEmPh+0x20>
  if (cardCommand(CMD17, blockNumber)) {
    c494:	ce 01       	movw	r24, r28
    c496:	61 e1       	ldi	r22, 0x11	; 17
    c498:	a8 01       	movw	r20, r16
    c49a:	97 01       	movw	r18, r14
    c49c:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c4a0:	88 23       	and	r24, r24
    c4a2:	39 f0       	breq	.+14     	; 0xc4b2 <_ZN7Sd2Card9readBlockEmPh+0x4a>
    c4a4:	84 e0       	ldi	r24, 0x04	; 4
    c4a6:	89 83       	std	Y+1, r24	; 0x01
    goto fail;
  }
  return readData(dst, 512);

 fail:
  chipSelectHigh();
    c4a8:	ce 01       	movw	r24, r28
    c4aa:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	06 c0       	rjmp	.+12     	; 0xc4be <_ZN7Sd2Card9readBlockEmPh+0x56>
  if (type()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (cardCommand(CMD17, blockNumber)) {
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return readData(dst, 512);
    c4b2:	ce 01       	movw	r24, r28
    c4b4:	b6 01       	movw	r22, r12
    c4b6:	40 e0       	ldi	r20, 0x00	; 0
    c4b8:	52 e0       	ldi	r21, 0x02	; 2
    c4ba:	0e 94 82 61 	call	0xc304	; 0xc304 <_ZN7Sd2Card8readDataEPhj>

 fail:
  chipSelectHigh();
  return false;
}
    c4be:	df 91       	pop	r29
    c4c0:	cf 91       	pop	r28
    c4c2:	1f 91       	pop	r17
    c4c4:	0f 91       	pop	r16
    c4c6:	ff 90       	pop	r15
    c4c8:	ef 90       	pop	r14
    c4ca:	df 90       	pop	r13
    c4cc:	cf 90       	pop	r12
    c4ce:	08 95       	ret

0000c4d0 <_ZN7Sd2Card4initEi>:
 */

#ifndef ARBITROS_CMP
bool Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
#else
bool Sd2Card::init( t_SPIHNDL t_handle) {
    c4d0:	8f 92       	push	r8
    c4d2:	9f 92       	push	r9
    c4d4:	af 92       	push	r10
    c4d6:	bf 92       	push	r11
    c4d8:	cf 92       	push	r12
    c4da:	df 92       	push	r13
    c4dc:	ef 92       	push	r14
    c4de:	ff 92       	push	r15
    c4e0:	0f 93       	push	r16
    c4e2:	1f 93       	push	r17
    c4e4:	df 93       	push	r29
    c4e6:	cf 93       	push	r28
    c4e8:	0f 92       	push	r0
    c4ea:	0f 92       	push	r0
    c4ec:	cd b7       	in	r28, 0x3d	; 61
    c4ee:	de b7       	in	r29, 0x3e	; 62
    c4f0:	7c 01       	movw	r14, r24
    c4f2:	69 83       	std	Y+1, r22	; 0x01
    c4f4:	7a 83       	std	Y+2, r23	; 0x02
#endif

  errorCode_ = type_ = 0;
    c4f6:	fc 01       	movw	r30, r24
    c4f8:	14 82       	std	Z+4, r1	; 0x04
    c4fa:	11 82       	std	Z+1, r1	; 0x01
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c4fc:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
  // 16-bit init start time allows over a minute
  unsigned long t0 = millis();
  uint32_t arg;

#ifdef ARBITROS_CMP
  gt_spiHandle = t_handle;
    c500:	89 81       	ldd	r24, Y+1	; 0x01
    c502:	9a 81       	ldd	r25, Y+2	; 0x02
    c504:	80 93 d4 22 	sts	0x22D4, r24
    c508:	90 93 d5 22 	sts	0x22D5, r25

  b_bTransComplete = false;
    c50c:	10 92 d6 22 	sts	0x22D6, r1
  hal_spiConfCallBack( gt_spiHandle,
                       &blockTransComplete);
    c510:	80 91 d4 22 	lds	r24, 0x22D4
    c514:	90 91 d5 22 	lds	r25, 0x22D5
    c518:	69 e9       	ldi	r22, 0x99	; 153
    c51a:	7e e5       	ldi	r23, 0x5E	; 94
    c51c:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <hal_spiConfCallBack>
  // set SCK rate for initialization commands
  spiRate_ = SPI_SD_INIT_RATE;
  spiInit(spiRate_);
#endif

  chipSelectHigh();
    c520:	c7 01       	movw	r24, r14
    c522:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c526:	10 e0       	ldi	r17, 0x00	; 0
//------------------------------------------------------------------------------
/** SPI send a byte */
static void spiSend(uint8_t b) {

  hal_spiWriteByte( gt_spiHandle,
                    b);
    c528:	80 91 d4 22 	lds	r24, 0x22D4
    c52c:	90 91 d5 22 	lds	r25, 0x22D5
    c530:	6f ef       	ldi	r22, 0xFF	; 255
    c532:	0e 94 ba 31 	call	0x6374	; 0x6374 <hal_spiWriteByte>
#endif

  chipSelectHigh();

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    c536:	1f 5f       	subi	r17, 0xFF	; 255
    c538:	1a 30       	cpi	r17, 0x0A	; 10
    c53a:	b1 f7       	brne	.-20     	; 0xc528 <_ZN7Sd2Card4initEi+0x58>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c53c:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    c540:	b2 2e       	mov	r11, r18
    c542:	c3 2e       	mov	r12, r19
    c544:	d4 2e       	mov	r13, r20
    c546:	15 2f       	mov	r17, r21
    c548:	11 c0       	rjmp	.+34     	; 0xc56c <_ZN7Sd2Card4initEi+0x9c>
  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  // command to go idle in SPI mode
  t0 = millis();
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    c54a:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c54e:	b9 01       	movw	r22, r18
    c550:	ca 01       	movw	r24, r20
    c552:	2b 2d       	mov	r18, r11
    c554:	3c 2d       	mov	r19, r12
    c556:	4d 2d       	mov	r20, r13
    c558:	51 2f       	mov	r21, r17
    c55a:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    c55e:	61 5d       	subi	r22, 0xD1	; 209
    c560:	77 40       	sbci	r23, 0x07	; 7
    c562:	80 40       	sbci	r24, 0x00	; 0
    c564:	90 40       	sbci	r25, 0x00	; 0
    c566:	10 f0       	brcs	.+4      	; 0xc56c <_ZN7Sd2Card4initEi+0x9c>
    c568:	81 e0       	ldi	r24, 0x01	; 1
    c56a:	87 c0       	rjmp	.+270    	; 0xc67a <_ZN7Sd2Card4initEi+0x1aa>
  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  // command to go idle in SPI mode
  t0 = millis();
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
    c56c:	c7 01       	movw	r24, r14
    c56e:	60 e0       	ldi	r22, 0x00	; 0
    c570:	20 e0       	ldi	r18, 0x00	; 0
    c572:	30 e0       	ldi	r19, 0x00	; 0
    c574:	40 e0       	ldi	r20, 0x00	; 0
    c576:	50 e0       	ldi	r21, 0x00	; 0
    c578:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c57c:	81 30       	cpi	r24, 0x01	; 1
    c57e:	29 f7       	brne	.-54     	; 0xc54a <_ZN7Sd2Card4initEi+0x7a>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
#if USE_SD_CRC
  if (cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    c580:	c7 01       	movw	r24, r14
    c582:	6b e3       	ldi	r22, 0x3B	; 59
    c584:	21 e0       	ldi	r18, 0x01	; 1
    c586:	30 e0       	ldi	r19, 0x00	; 0
    c588:	40 e0       	ldi	r20, 0x00	; 0
    c58a:	50 e0       	ldi	r21, 0x00	; 0
    c58c:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c590:	81 30       	cpi	r24, 0x01	; 1
    c592:	11 f0       	breq	.+4      	; 0xc598 <_ZN7Sd2Card4initEi+0xc8>
    c594:	8a e1       	ldi	r24, 0x1A	; 26
    c596:	71 c0       	rjmp	.+226    	; 0xc67a <_ZN7Sd2Card4initEi+0x1aa>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c598:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    c59c:	b2 2e       	mov	r11, r18
    c59e:	c3 2e       	mov	r12, r19
    c5a0:	d4 2e       	mov	r13, r20
    c5a2:	05 2f       	mov	r16, r21
  }
#endif  // USE_SD_CRC
  // check SD version
  t0 = millis();
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    c5a4:	c7 01       	movw	r24, r14
    c5a6:	68 e0       	ldi	r22, 0x08	; 8
    c5a8:	2a ea       	ldi	r18, 0xAA	; 170
    c5aa:	31 e0       	ldi	r19, 0x01	; 1
    c5ac:	40 e0       	ldi	r20, 0x00	; 0
    c5ae:	50 e0       	ldi	r21, 0x00	; 0
    c5b0:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c5b4:	85 30       	cpi	r24, 0x05	; 5
    c5b6:	19 f4       	brne	.+6      	; 0xc5be <_ZN7Sd2Card4initEi+0xee>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void type(uint8_t value) {type_ = value;}
    c5b8:	81 e0       	ldi	r24, 0x01	; 1
    c5ba:	f7 01       	movw	r30, r14
    c5bc:	0b c0       	rjmp	.+22     	; 0xc5d4 <_ZN7Sd2Card4initEi+0x104>
      type(SD_CARD_TYPE_SD1);
      break;
    c5be:	10 e0       	ldi	r17, 0x00	; 0
    }
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    c5c0:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c5c4:	f7 01       	movw	r30, r14
    c5c6:	83 83       	std	Z+3, r24	; 0x03
    c5c8:	1f 5f       	subi	r17, 0xFF	; 255
    c5ca:	14 30       	cpi	r17, 0x04	; 4
    c5cc:	c9 f7       	brne	.-14     	; 0xc5c0 <_ZN7Sd2Card4initEi+0xf0>
    if (status_ == 0XAA) {
    c5ce:	8a 3a       	cpi	r24, 0xAA	; 170
    c5d0:	39 f4       	brne	.+14     	; 0xc5e0 <_ZN7Sd2Card4initEi+0x110>
    c5d2:	82 e0       	ldi	r24, 0x02	; 2
    c5d4:	84 83       	std	Z+4, r24	; 0x04
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c5d6:	f7 01       	movw	r30, r14
    c5d8:	84 81       	ldd	r24, Z+4	; 0x04
    c5da:	82 30       	cpi	r24, 0x02	; 2
    c5dc:	91 f4       	brne	.+36     	; 0xc602 <_ZN7Sd2Card4initEi+0x132>
    c5de:	15 c0       	rjmp	.+42     	; 0xc60a <_ZN7Sd2Card4initEi+0x13a>
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c5e0:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c5e4:	b9 01       	movw	r22, r18
    c5e6:	ca 01       	movw	r24, r20
    c5e8:	2b 2d       	mov	r18, r11
    c5ea:	3c 2d       	mov	r19, r12
    c5ec:	4d 2d       	mov	r20, r13
    c5ee:	50 2f       	mov	r21, r16
    c5f0:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    c5f4:	61 5d       	subi	r22, 0xD1	; 209
    c5f6:	77 40       	sbci	r23, 0x07	; 7
    c5f8:	80 40       	sbci	r24, 0x00	; 0
    c5fa:	90 40       	sbci	r25, 0x00	; 0
    c5fc:	98 f2       	brcs	.-90     	; 0xc5a4 <_ZN7Sd2Card4initEi+0xd4>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c5fe:	82 e0       	ldi	r24, 0x02	; 2
    c600:	3c c0       	rjmp	.+120    	; 0xc67a <_ZN7Sd2Card4initEi+0x1aa>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    c602:	aa 24       	eor	r10, r10
    c604:	bb 24       	eor	r11, r11
    c606:	65 01       	movw	r12, r10
    c608:	05 c0       	rjmp	.+10     	; 0xc614 <_ZN7Sd2Card4initEi+0x144>
    c60a:	a1 2c       	mov	r10, r1
    c60c:	b1 2c       	mov	r11, r1
    c60e:	c1 2c       	mov	r12, r1
    c610:	e0 e4       	ldi	r30, 0x40	; 64
    c612:	de 2e       	mov	r13, r30
}/*End blockTransComplete*/

unsigned long millis( void)
{

   return (unsigned long)arb_sysMsecNow();
    c614:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    c618:	49 01       	movw	r8, r18
    c61a:	8a 01       	movw	r16, r20
    c61c:	0f c0       	rjmp	.+30     	; 0xc63c <_ZN7Sd2Card4initEi+0x16c>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  t0 = millis();
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c61e:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
    // check for timeout
    if ( millisDelta( millis(), t0) > SD_INIT_TIMEOUT) {
    c622:	b9 01       	movw	r22, r18
    c624:	ca 01       	movw	r24, r20
    c626:	94 01       	movw	r18, r8
    c628:	a8 01       	movw	r20, r16
    c62a:	0e 94 fd 5e 	call	0xbdfa	; 0xbdfa <_Z11millisDeltamm>
    c62e:	61 5d       	subi	r22, 0xD1	; 209
    c630:	77 40       	sbci	r23, 0x07	; 7
    c632:	80 40       	sbci	r24, 0x00	; 0
    c634:	90 40       	sbci	r25, 0x00	; 0
    c636:	10 f0       	brcs	.+4      	; 0xc63c <_ZN7Sd2Card4initEi+0x16c>
    c638:	8a e0       	ldi	r24, 0x0A	; 10
    c63a:	1f c0       	rjmp	.+62     	; 0xc67a <_ZN7Sd2Card4initEi+0x1aa>
  uint8_t spiRate_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    c63c:	c7 01       	movw	r24, r14
    c63e:	67 e3       	ldi	r22, 0x37	; 55
    c640:	20 e0       	ldi	r18, 0x00	; 0
    c642:	30 e0       	ldi	r19, 0x00	; 0
    c644:	40 e0       	ldi	r20, 0x00	; 0
    c646:	50 e0       	ldi	r21, 0x00	; 0
    c648:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    c64c:	c7 01       	movw	r24, r14
    c64e:	69 e2       	ldi	r22, 0x29	; 41
    c650:	a6 01       	movw	r20, r12
    c652:	95 01       	movw	r18, r10
    c654:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  t0 = millis();
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    c658:	88 23       	and	r24, r24
    c65a:	09 f7       	brne	.-62     	; 0xc61e <_ZN7Sd2Card4initEi+0x14e>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    c65c:	f7 01       	movw	r30, r14
    c65e:	84 81       	ldd	r24, Z+4	; 0x04
    c660:	82 30       	cpi	r24, 0x02	; 2
    c662:	01 f5       	brne	.+64     	; 0xc6a4 <_ZN7Sd2Card4initEi+0x1d4>
    if (cardCommand(CMD58, 0)) {
    c664:	c7 01       	movw	r24, r14
    c666:	6a e3       	ldi	r22, 0x3A	; 58
    c668:	20 e0       	ldi	r18, 0x00	; 0
    c66a:	30 e0       	ldi	r19, 0x00	; 0
    c66c:	40 e0       	ldi	r20, 0x00	; 0
    c66e:	50 e0       	ldi	r21, 0x00	; 0
    c670:	0e 94 31 60 	call	0xc062	; 0xc062 <_ZN7Sd2Card11cardCommandEhm>
    c674:	88 23       	and	r24, r24
    c676:	41 f0       	breq	.+16     	; 0xc688 <_ZN7Sd2Card4initEi+0x1b8>
  bool eraseSingleBlockEnable();
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {errorCode_ = code;}
    c678:	88 e0       	ldi	r24, 0x08	; 8
    c67a:	f7 01       	movw	r30, r14
    c67c:	81 83       	std	Z+1, r24	; 0x01
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    c67e:	c7 01       	movw	r24, r14
    c680:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
    c684:	80 e0       	ldi	r24, 0x00	; 0
    c686:	1f c0       	rjmp	.+62     	; 0xc6c6 <_ZN7Sd2Card4initEi+0x1f6>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    c688:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c68c:	80 7c       	andi	r24, 0xC0	; 192
    c68e:	80 3c       	cpi	r24, 0xC0	; 192
    c690:	19 f4       	brne	.+6      	; 0xc698 <_ZN7Sd2Card4initEi+0x1c8>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void chipSelectHigh();
  void chipSelectLow();
  void type(uint8_t value) {type_ = value;}
    c692:	83 e0       	ldi	r24, 0x03	; 3
    c694:	f7 01       	movw	r30, r14
    c696:	84 83       	std	Z+4, r24	; 0x04
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    c698:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c69c:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
    c6a0:	0e 94 d3 5e 	call	0xbda6	; 0xbda6 <_ZL6spiRecv>
  }
  chipSelectHigh();
    c6a4:	c7 01       	movw	r24, r14
    c6a6:	0e 94 ee 5e 	call	0xbddc	; 0xbddc <_ZN7Sd2Card14chipSelectHighEv>
#ifndef SOFTWARE_SPI
#ifndef ARBITROS_CMP
  return setSckRate(sckRateID);
#else
     if( hal_spiSetBaudRate( gt_spiHandle, 8000000) < 0)
    c6aa:	80 91 d4 22 	lds	r24, 0x22D4
    c6ae:	90 91 d5 22 	lds	r25, 0x22D5
    c6b2:	40 e0       	ldi	r20, 0x00	; 0
    c6b4:	52 e1       	ldi	r21, 0x12	; 18
    c6b6:	6a e7       	ldi	r22, 0x7A	; 122
    c6b8:	70 e0       	ldi	r23, 0x00	; 0
    c6ba:	0e 94 0e 32 	call	0x641c	; 0x641c <hal_spiSetBaudRate>
    c6be:	80 95       	com	r24
    c6c0:	88 1f       	adc	r24, r24
    c6c2:	88 27       	eor	r24, r24
    c6c4:	88 1f       	adc	r24, r24
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    c6c6:	0f 90       	pop	r0
    c6c8:	0f 90       	pop	r0
    c6ca:	cf 91       	pop	r28
    c6cc:	df 91       	pop	r29
    c6ce:	1f 91       	pop	r17
    c6d0:	0f 91       	pop	r16
    c6d2:	ff 90       	pop	r15
    c6d4:	ef 90       	pop	r14
    c6d6:	df 90       	pop	r13
    c6d8:	cf 90       	pop	r12
    c6da:	bf 90       	pop	r11
    c6dc:	af 90       	pop	r10
    c6de:	9f 90       	pop	r9
    c6e0:	8f 90       	pop	r8
    c6e2:	08 95       	ret

0000c6e4 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>:
 * \a name in standard 8.3 short name format.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
    c6e4:	cf 93       	push	r28
    c6e6:	df 93       	push	r29
    c6e8:	eb 01       	movw	r28, r22
    c6ea:	dc 01       	movw	r26, r24
    c6ec:	90 e0       	ldi	r25, 0x00	; 0
    c6ee:	20 e0       	ldi	r18, 0x00	; 0
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    c6f0:	3e e2       	ldi	r19, 0x2E	; 46
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir.name[i] == ' ')continue;
    c6f2:	8c 91       	ld	r24, X
    c6f4:	80 32       	cpi	r24, 0x20	; 32
    c6f6:	69 f0       	breq	.+26     	; 0xc712 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x2e>
    if (i == 8) name[j++] = '.';
    c6f8:	28 30       	cpi	r18, 0x08	; 8
    c6fa:	29 f4       	brne	.+10     	; 0xc706 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0x22>
    c6fc:	fe 01       	movw	r30, r28
    c6fe:	e9 0f       	add	r30, r25
    c700:	f1 1d       	adc	r31, r1
    c702:	30 83       	st	Z, r19
    c704:	9f 5f       	subi	r25, 0xFF	; 255
    name[j++] = dir.name[i];
    c706:	fe 01       	movw	r30, r28
    c708:	e9 0f       	add	r30, r25
    c70a:	f1 1d       	adc	r31, r1
    c70c:	8c 91       	ld	r24, X
    c70e:	80 83       	st	Z, r24
    c710:	9f 5f       	subi	r25, 0xFF	; 255
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdBaseFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    c712:	2f 5f       	subi	r18, 0xFF	; 255
    c714:	11 96       	adiw	r26, 0x01	; 1
    c716:	2b 30       	cpi	r18, 0x0B	; 11
    c718:	61 f7       	brne	.-40     	; 0xc6f2 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc+0xe>
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    name[j++] = dir.name[i];
  }
  name[j] = 0;
    c71a:	c9 0f       	add	r28, r25
    c71c:	d1 1d       	adc	r29, r1
    c71e:	18 82       	st	Y, r1
}
    c720:	df 91       	pop	r29
    c722:	cf 91       	pop	r28
    c724:	08 95       	ret

0000c726 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>:
  pr->println();
  return DIR_IS_FILE(&dir) ? 1 : 2;
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
bool SdBaseFile::make83Name(const char* str, uint8_t* name, const char** ptr) {
    c726:	cf 93       	push	r28
    c728:	df 93       	push	r29
    c72a:	dc 01       	movw	r26, r24
    c72c:	eb 01       	movw	r28, r22
    c72e:	ba 01       	movw	r22, r20
    c730:	80 e0       	ldi	r24, 0x00	; 0
    c732:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    c734:	20 e2       	ldi	r18, 0x20	; 32
    c736:	fe 01       	movw	r30, r28
    c738:	e8 0f       	add	r30, r24
    c73a:	f9 1f       	adc	r31, r25
    c73c:	20 83       	st	Z, r18
    c73e:	01 96       	adiw	r24, 0x01	; 1
    c740:	8b 30       	cpi	r24, 0x0B	; 11
    c742:	91 05       	cpc	r25, r1
    c744:	c1 f7       	brne	.-16     	; 0xc736 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x10>
    c746:	57 e0       	ldi	r21, 0x07	; 7
    c748:	40 e0       	ldi	r20, 0x00	; 0
    c74a:	22 c0       	rjmp	.+68     	; 0xc790 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x6a>
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    if (c == '.') {
    c74c:	2e 32       	cpi	r18, 0x2E	; 46
    c74e:	19 f0       	breq	.+6      	; 0xc756 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x30>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
    c750:	87 ef       	ldi	r24, 0xF7	; 247
    c752:	91 e0       	ldi	r25, 0x01	; 1
    c754:	07 c0       	rjmp	.+14     	; 0xc764 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x3e>
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    if (c == '.') {
      if (n == 10) {
    c756:	5a 30       	cpi	r21, 0x0A	; 10
    c758:	49 f1       	breq	.+82     	; 0xc7ac <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
        // only one dot allowed
        DBG_FAIL_MACRO;
        goto fail;
    c75a:	5a e0       	ldi	r21, 0x0A	; 10
    c75c:	48 e0       	ldi	r20, 0x08	; 8
    c75e:	17 c0       	rjmp	.+46     	; 0xc78e <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x68>
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) {
    c760:	32 17       	cp	r19, r18
    c762:	21 f1       	breq	.+72     	; 0xc7ac <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
        DBG_FAIL_MACRO;
        goto fail;
    c764:	fc 01       	movw	r30, r24
      // illegal FAT characters
#ifdef __AVR__
      // store chars in flash
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) {
    c766:	01 96       	adiw	r24, 0x01	; 1
    c768:	34 91       	lpm	r19, Z+
    c76a:	33 23       	and	r19, r19
    c76c:	c9 f7       	brne	.-14     	; 0xc760 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x3a>
        goto fail;
      }
#endif  // __AVR__

      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E) {
    c76e:	54 17       	cp	r21, r20
    c770:	e8 f0       	brcs	.+58     	; 0xc7ac <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
    c772:	21 32       	cpi	r18, 0x21	; 33
    c774:	d8 f0       	brcs	.+54     	; 0xc7ac <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
    c776:	2f 37       	cpi	r18, 0x7F	; 127
    c778:	c8 f4       	brcc	.+50     	; 0xc7ac <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    c77a:	82 2f       	mov	r24, r18
    c77c:	81 56       	subi	r24, 0x61	; 97
    c77e:	8a 31       	cpi	r24, 0x1A	; 26
    c780:	08 f4       	brcc	.+2      	; 0xc784 <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x5e>
    c782:	20 52       	subi	r18, 0x20	; 32
    c784:	fe 01       	movw	r30, r28
    c786:	e4 0f       	add	r30, r20
    c788:	f1 1d       	adc	r31, r1
    c78a:	20 83       	st	Z, r18
    c78c:	4f 5f       	subi	r20, 0xFF	; 255
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    c = *str++;
    c78e:	11 96       	adiw	r26, 0x01	; 1
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while (*str != '\0' && *str != '/') {
    c790:	2c 91       	ld	r18, X
    c792:	22 23       	and	r18, r18
    c794:	11 f0       	breq	.+4      	; 0xc79a <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x74>
    c796:	2f 32       	cpi	r18, 0x2F	; 47
    c798:	c9 f6       	brne	.-78     	; 0xc74c <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x26>
      }
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  *ptr = str;
    c79a:	fb 01       	movw	r30, r22
    c79c:	a0 83       	st	Z, r26
    c79e:	b1 83       	std	Z+1, r27	; 0x01
  // must have a file name, extension is optional
  return name[0] != ' ';
    c7a0:	90 e0       	ldi	r25, 0x00	; 0
    c7a2:	88 81       	ld	r24, Y
    c7a4:	80 32       	cpi	r24, 0x20	; 32
    c7a6:	19 f0       	breq	.+6      	; 0xc7ae <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x88>
    c7a8:	91 e0       	ldi	r25, 0x01	; 1
    c7aa:	01 c0       	rjmp	.+2      	; 0xc7ae <_ZN10SdBaseFile10make83NameEPKcPhPS1_+0x88>
    c7ac:	90 e0       	ldi	r25, 0x00	; 0

 fail:
  return false;
}
    c7ae:	89 2f       	mov	r24, r25
    c7b0:	df 91       	pop	r29
    c7b2:	cf 91       	pop	r28
    c7b4:	08 95       	ret

0000c7b6 <_ZN10SdBaseFile10setDirSizeEv>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// set fileSize_ for a directory
bool SdBaseFile::setDirSize() {
    c7b6:	cf 92       	push	r12
    c7b8:	df 92       	push	r13
    c7ba:	ef 92       	push	r14
    c7bc:	ff 92       	push	r15
    c7be:	0f 93       	push	r16
    c7c0:	1f 93       	push	r17
    c7c2:	df 93       	push	r29
    c7c4:	cf 93       	push	r28
    c7c6:	00 d0       	rcall	.+0      	; 0xc7c8 <_ZN10SdBaseFile10setDirSizeEv+0x12>
    c7c8:	0f 92       	push	r0
    c7ca:	cd b7       	in	r28, 0x3d	; 61
    c7cc:	de b7       	in	r29, 0x3e	; 62
    c7ce:	7c 01       	movw	r14, r24
  uint16_t s = 0;
  uint32_t cluster = firstCluster_;
    c7d0:	fc 01       	movw	r30, r24
    c7d2:	87 89       	ldd	r24, Z+23	; 0x17
    c7d4:	90 8d       	ldd	r25, Z+24	; 0x18
    c7d6:	a1 8d       	ldd	r26, Z+25	; 0x19
    c7d8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    c7da:	89 83       	std	Y+1, r24	; 0x01
    c7dc:	9a 83       	std	Y+2, r25	; 0x02
    c7de:	ab 83       	std	Y+3, r26	; 0x03
    c7e0:	bc 83       	std	Y+4, r27	; 0x04
    c7e2:	00 e0       	ldi	r16, 0x00	; 0
    c7e4:	10 e0       	ldi	r17, 0x00	; 0
  do {
    if (!vol_->fatGet(cluster, &cluster)) {
    c7e6:	6e 01       	movw	r12, r28
    c7e8:	08 94       	sec
    c7ea:	c1 1c       	adc	r12, r1
    c7ec:	d1 1c       	adc	r13, r1
    c7ee:	49 81       	ldd	r20, Y+1	; 0x01
    c7f0:	5a 81       	ldd	r21, Y+2	; 0x02
    c7f2:	6b 81       	ldd	r22, Y+3	; 0x03
    c7f4:	7c 81       	ldd	r23, Y+4	; 0x04
    c7f6:	d7 01       	movw	r26, r14
    c7f8:	15 96       	adiw	r26, 0x05	; 5
    c7fa:	8d 91       	ld	r24, X+
    c7fc:	9c 91       	ld	r25, X
    c7fe:	16 97       	sbiw	r26, 0x06	; 6
    c800:	96 01       	movw	r18, r12
    c802:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    c806:	88 23       	and	r24, r24
    c808:	79 f1       	breq	.+94     	; 0xc868 <_ZN10SdBaseFile10setDirSizeEv+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    s += vol_->blocksPerCluster();
    c80a:	d7 01       	movw	r26, r14
    c80c:	15 96       	adiw	r26, 0x05	; 5
    c80e:	ed 91       	ld	r30, X+
    c810:	fc 91       	ld	r31, X
    c812:	16 97       	sbiw	r26, 0x06	; 6
    c814:	84 81       	ldd	r24, Z+4	; 0x04
    c816:	08 0f       	add	r16, r24
    c818:	11 1d       	adc	r17, r1
    // max size if a directory file is 4096 blocks
    if (s >= 4096) {
    c81a:	b0 e1       	ldi	r27, 0x10	; 16
    c81c:	00 30       	cpi	r16, 0x00	; 0
    c81e:	1b 07       	cpc	r17, r27
    c820:	18 f5       	brcc	.+70     	; 0xc868 <_ZN10SdBaseFile10setDirSizeEv+0xb2>
//------------------------------------------------------------------------------
// set fileSize_ for a directory
bool SdBaseFile::setDirSize() {
  uint16_t s = 0;
  uint32_t cluster = firstCluster_;
  do {
    c822:	29 81       	ldd	r18, Y+1	; 0x01
    c824:	3a 81       	ldd	r19, Y+2	; 0x02
    c826:	4b 81       	ldd	r20, Y+3	; 0x03
    c828:	5c 81       	ldd	r21, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    c82a:	87 89       	ldd	r24, Z+23	; 0x17
    c82c:	80 31       	cpi	r24, 0x10	; 16
    c82e:	31 f4       	brne	.+12     	; 0xc83c <_ZN10SdBaseFile10setDirSizeEv+0x86>
    c830:	28 5f       	subi	r18, 0xF8	; 248
    c832:	3f 4f       	sbci	r19, 0xFF	; 255
    c834:	40 40       	sbci	r20, 0x00	; 0
    c836:	50 40       	sbci	r21, 0x00	; 0
    c838:	d0 f2       	brcs	.-76     	; 0xc7ee <_ZN10SdBaseFile10setDirSizeEv+0x38>
    c83a:	05 c0       	rjmp	.+10     	; 0xc846 <_ZN10SdBaseFile10setDirSizeEv+0x90>
    return  cluster >= FAT32EOC_MIN;
    c83c:	28 5f       	subi	r18, 0xF8	; 248
    c83e:	3f 4f       	sbci	r19, 0xFF	; 255
    c840:	4f 4f       	sbci	r20, 0xFF	; 255
    c842:	5f 40       	sbci	r21, 0x0F	; 15
    c844:	a0 f2       	brcs	.-88     	; 0xc7ee <_ZN10SdBaseFile10setDirSizeEv+0x38>
    if (s >= 4096) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } while (!vol_->isEOC(cluster));
  fileSize_ = 512L*s;
    c846:	c8 01       	movw	r24, r16
    c848:	a0 e0       	ldi	r26, 0x00	; 0
    c84a:	b0 e0       	ldi	r27, 0x00	; 0
    c84c:	29 e0       	ldi	r18, 0x09	; 9
    c84e:	88 0f       	add	r24, r24
    c850:	99 1f       	adc	r25, r25
    c852:	aa 1f       	adc	r26, r26
    c854:	bb 1f       	adc	r27, r27
    c856:	2a 95       	dec	r18
    c858:	d1 f7       	brne	.-12     	; 0xc84e <_ZN10SdBaseFile10setDirSizeEv+0x98>
    c85a:	f7 01       	movw	r30, r14
    c85c:	83 8b       	std	Z+19, r24	; 0x13
    c85e:	94 8b       	std	Z+20, r25	; 0x14
    c860:	a5 8b       	std	Z+21, r26	; 0x15
    c862:	b6 8b       	std	Z+22, r27	; 0x16
    c864:	81 e0       	ldi	r24, 0x01	; 1
    c866:	01 c0       	rjmp	.+2      	; 0xc86a <_ZN10SdBaseFile10setDirSizeEv+0xb4>
  return true;
    c868:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    c86a:	24 96       	adiw	r28, 0x04	; 4
    c86c:	cd bf       	out	0x3d, r28	; 61
    c86e:	de bf       	out	0x3e, r29	; 62
    c870:	cf 91       	pop	r28
    c872:	df 91       	pop	r29
    c874:	1f 91       	pop	r17
    c876:	0f 91       	pop	r16
    c878:	ff 90       	pop	r15
    c87a:	ef 90       	pop	r14
    c87c:	df 90       	pop	r13
    c87e:	cf 90       	pop	r12
    c880:	08 95       	ret

0000c882 <_ZN10SdBaseFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is already open, the FAT volume has
 * not been initialized or it a FAT12 volume.
 */
bool SdBaseFile::openRoot(SdVolume* vol) {
    c882:	cf 93       	push	r28
    c884:	df 93       	push	r29
    c886:	ec 01       	movw	r28, r24
    c888:	fb 01       	movw	r30, r22
  // error if file is already open
  if (isOpen()) {
    c88a:	8b 81       	ldd	r24, Y+3	; 0x03
    c88c:	88 23       	and	r24, r24
    c88e:	d1 f5       	brne	.+116    	; 0xc904 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  vol_ = vol;
    c890:	6d 83       	std	Y+5, r22	; 0x05
    c892:	7e 83       	std	Y+6, r23	; 0x06
  /** \return The number of FAT structures on the volume. */
  uint8_t fatCount() const {return fatCount_;}
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock() const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {return fatType_;}
    c894:	87 89       	ldd	r24, Z+23	; 0x17
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    c896:	80 31       	cpi	r24, 0x10	; 16
    c898:	c9 f5       	brne	.+114    	; 0xc90c <_ZN10SdBaseFile8openRootEP8SdVolume+0x8a>
    type_ = FAT_FILE_TYPE_ROOT_FIXED;
    c89a:	82 e0       	ldi	r24, 0x02	; 2
    c89c:	8b 83       	std	Y+3, r24	; 0x03
    firstCluster_ = 0;
    c89e:	1f 8a       	std	Y+23, r1	; 0x17
    c8a0:	18 8e       	std	Y+24, r1	; 0x18
    c8a2:	19 8e       	std	Y+25, r1	; 0x19
    c8a4:	1a 8e       	std	Y+26, r1	; 0x1a
    fileSize_ = 32 * vol->rootDirEntryCount();
    c8a6:	80 8d       	ldd	r24, Z+24	; 0x18
    c8a8:	91 8d       	ldd	r25, Z+25	; 0x19
    c8aa:	a0 e0       	ldi	r26, 0x00	; 0
    c8ac:	b0 e0       	ldi	r27, 0x00	; 0
    c8ae:	35 e0       	ldi	r19, 0x05	; 5
    c8b0:	88 0f       	add	r24, r24
    c8b2:	99 1f       	adc	r25, r25
    c8b4:	aa 1f       	adc	r26, r26
    c8b6:	bb 1f       	adc	r27, r27
    c8b8:	3a 95       	dec	r19
    c8ba:	d1 f7       	brne	.-12     	; 0xc8b0 <_ZN10SdBaseFile8openRootEP8SdVolume+0x2e>
    c8bc:	8b 8b       	std	Y+19, r24	; 0x13
    c8be:	9c 8b       	std	Y+20, r25	; 0x14
    c8c0:	ad 8b       	std	Y+21, r26	; 0x15
    c8c2:	be 8b       	std	Y+22, r27	; 0x16
    c8c4:	0f c0       	rjmp	.+30     	; 0xc8e4 <_ZN10SdBaseFile8openRootEP8SdVolume+0x62>
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    c8c6:	83 e0       	ldi	r24, 0x03	; 3
    c8c8:	8b 83       	std	Y+3, r24	; 0x03
    firstCluster_ = vol->rootDirStart();
    c8ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    c8cc:	93 8d       	ldd	r25, Z+27	; 0x1b
    c8ce:	a4 8d       	ldd	r26, Z+28	; 0x1c
    c8d0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    c8d2:	8f 8b       	std	Y+23, r24	; 0x17
    c8d4:	98 8f       	std	Y+24, r25	; 0x18
    c8d6:	a9 8f       	std	Y+25, r26	; 0x19
    c8d8:	ba 8f       	std	Y+26, r27	; 0x1a
    if (!setDirSize()) {
    c8da:	ce 01       	movw	r24, r28
    c8dc:	0e 94 db 63 	call	0xc7b6	; 0xc7b6 <_ZN10SdBaseFile10setDirSizeEv>
    c8e0:	88 23       	and	r24, r24
    c8e2:	81 f0       	breq	.+32     	; 0xc904 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    // volume is not initialized, invalid, or FAT12 without support
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  flags_ = O_READ;
    c8e4:	81 e0       	ldi	r24, 0x01	; 1
    c8e6:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  curCluster_ = 0;
    c8e8:	1f 82       	std	Y+7, r1	; 0x07
    c8ea:	18 86       	std	Y+8, r1	; 0x08
    c8ec:	19 86       	std	Y+9, r1	; 0x09
    c8ee:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    c8f0:	1b 86       	std	Y+11, r1	; 0x0b
    c8f2:	1c 86       	std	Y+12, r1	; 0x0c
    c8f4:	1d 86       	std	Y+13, r1	; 0x0d
    c8f6:	1e 86       	std	Y+14, r1	; 0x0e

  // root has no directory entry
  dirBlock_ = 0;
    c8f8:	1f 86       	std	Y+15, r1	; 0x0f
    c8fa:	18 8a       	std	Y+16, r1	; 0x10
    c8fc:	19 8a       	std	Y+17, r1	; 0x11
    c8fe:	1a 8a       	std	Y+18, r1	; 0x12
  dirIndex_ = 0;
    c900:	1c 82       	std	Y+4, r1	; 0x04
    c902:	01 c0       	rjmp	.+2      	; 0xc906 <_ZN10SdBaseFile8openRootEP8SdVolume+0x84>
  return true;
    c904:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    c906:	df 91       	pop	r29
    c908:	cf 91       	pop	r28
    c90a:	08 95       	ret
  vol_ = vol;
  if (vol->fatType() == 16 || (FAT12_SUPPORT && vol->fatType() == 12)) {
    type_ = FAT_FILE_TYPE_ROOT_FIXED;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    c90c:	80 32       	cpi	r24, 0x20	; 32
    c90e:	d1 f7       	brne	.-12     	; 0xc904 <_ZN10SdBaseFile8openRootEP8SdVolume+0x82>
    c910:	da cf       	rjmp	.-76     	; 0xc8c6 <_ZN10SdBaseFile8openRootEP8SdVolume+0x44>

0000c912 <_ZN10SdBaseFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::seekSet(uint32_t pos) {
    c912:	6f 92       	push	r6
    c914:	7f 92       	push	r7
    c916:	8f 92       	push	r8
    c918:	9f 92       	push	r9
    c91a:	af 92       	push	r10
    c91c:	bf 92       	push	r11
    c91e:	cf 92       	push	r12
    c920:	df 92       	push	r13
    c922:	ef 92       	push	r14
    c924:	ff 92       	push	r15
    c926:	0f 93       	push	r16
    c928:	1f 93       	push	r17
    c92a:	cf 93       	push	r28
    c92c:	df 93       	push	r29
    c92e:	ec 01       	movw	r28, r24
    c930:	7a 01       	movw	r14, r20
    c932:	8b 01       	movw	r16, r22
  /** \return True if this is a directory else false. */
  bool isDir() const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a normal file else false. */
  bool isFile() const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return type_ != FAT_FILE_TYPE_CLOSED;}
    c934:	2b 81       	ldd	r18, Y+3	; 0x03
  uint32_t nCur;
  uint32_t nNew;
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) {
    c936:	22 23       	and	r18, r18
    c938:	09 f4       	brne	.+2      	; 0xc93c <_ZN10SdBaseFile7seekSetEm+0x2a>
    c93a:	80 c0       	rjmp	.+256    	; 0xca3c <_ZN10SdBaseFile7seekSetEm+0x12a>
    c93c:	8b 89       	ldd	r24, Y+19	; 0x13
    c93e:	9c 89       	ldd	r25, Y+20	; 0x14
    c940:	ad 89       	ldd	r26, Y+21	; 0x15
    c942:	be 89       	ldd	r27, Y+22	; 0x16
    c944:	84 17       	cp	r24, r20
    c946:	95 07       	cpc	r25, r21
    c948:	a6 07       	cpc	r26, r22
    c94a:	b7 07       	cpc	r27, r23
    c94c:	08 f4       	brcc	.+2      	; 0xc950 <_ZN10SdBaseFile7seekSetEm+0x3e>
    c94e:	76 c0       	rjmp	.+236    	; 0xca3c <_ZN10SdBaseFile7seekSetEm+0x12a>
    c950:	85 c0       	rjmp	.+266    	; 0xca5c <_ZN10SdBaseFile7seekSetEm+0x14a>
  }
  if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    curPosition_ = pos;
    goto done;
  }
  if (pos == 0) {
    c952:	e1 14       	cp	r14, r1
    c954:	f1 04       	cpc	r15, r1
    c956:	01 05       	cpc	r16, r1
    c958:	11 05       	cpc	r17, r1
    c95a:	51 f4       	brne	.+20     	; 0xc970 <_ZN10SdBaseFile7seekSetEm+0x5e>
    // set position to start of file
    curCluster_ = 0;
    c95c:	1f 82       	std	Y+7, r1	; 0x07
    c95e:	18 86       	std	Y+8, r1	; 0x08
    c960:	19 86       	std	Y+9, r1	; 0x09
    c962:	1a 86       	std	Y+10, r1	; 0x0a
    curPosition_ = 0;
    c964:	1b 86       	std	Y+11, r1	; 0x0b
    c966:	1c 86       	std	Y+12, r1	; 0x0c
    c968:	1d 86       	std	Y+13, r1	; 0x0d
    c96a:	1e 86       	std	Y+14, r1	; 0x0e
    c96c:	81 e0       	ldi	r24, 0x01	; 1
    c96e:	67 c0       	rjmp	.+206    	; 0xca3e <_ZN10SdBaseFile7seekSetEm+0x12c>
    goto done;
  }
  // calculate cluster index for cur and new position
  nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    c970:	2b 85       	ldd	r18, Y+11	; 0x0b
    c972:	3c 85       	ldd	r19, Y+12	; 0x0c
    c974:	4d 85       	ldd	r20, Y+13	; 0x0d
    c976:	5e 85       	ldd	r21, Y+14	; 0x0e
    c978:	ed 81       	ldd	r30, Y+5	; 0x05
    c97a:	fe 81       	ldd	r31, Y+6	; 0x06
    c97c:	85 85       	ldd	r24, Z+13	; 0x0d
    c97e:	90 e0       	ldi	r25, 0x00	; 0
    c980:	09 96       	adiw	r24, 0x09	; 9
    c982:	21 50       	subi	r18, 0x01	; 1
    c984:	30 40       	sbci	r19, 0x00	; 0
    c986:	40 40       	sbci	r20, 0x00	; 0
    c988:	50 40       	sbci	r21, 0x00	; 0
    c98a:	39 01       	movw	r6, r18
    c98c:	4a 01       	movw	r8, r20
    c98e:	08 2e       	mov	r0, r24
    c990:	04 c0       	rjmp	.+8      	; 0xc99a <_ZN10SdBaseFile7seekSetEm+0x88>
    c992:	96 94       	lsr	r9
    c994:	87 94       	ror	r8
    c996:	77 94       	ror	r7
    c998:	67 94       	ror	r6
    c99a:	0a 94       	dec	r0
    c99c:	d2 f7       	brpl	.-12     	; 0xc992 <_ZN10SdBaseFile7seekSetEm+0x80>
    c99e:	2f 5f       	subi	r18, 0xFF	; 255
    c9a0:	3f 4f       	sbci	r19, 0xFF	; 255
    c9a2:	4f 4f       	sbci	r20, 0xFF	; 255
    c9a4:	5f 4f       	sbci	r21, 0xFF	; 255
  nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    c9a6:	08 94       	sec
    c9a8:	e1 08       	sbc	r14, r1
    c9aa:	f1 08       	sbc	r15, r1
    c9ac:	01 09       	sbc	r16, r1
    c9ae:	11 09       	sbc	r17, r1
    c9b0:	57 01       	movw	r10, r14
    c9b2:	68 01       	movw	r12, r16
    c9b4:	04 c0       	rjmp	.+8      	; 0xc9be <_ZN10SdBaseFile7seekSetEm+0xac>
    c9b6:	d6 94       	lsr	r13
    c9b8:	c7 94       	ror	r12
    c9ba:	b7 94       	ror	r11
    c9bc:	a7 94       	ror	r10
    c9be:	8a 95       	dec	r24
    c9c0:	d2 f7       	brpl	.-12     	; 0xc9b6 <_ZN10SdBaseFile7seekSetEm+0xa4>
    c9c2:	08 94       	sec
    c9c4:	e1 1c       	adc	r14, r1
    c9c6:	f1 1c       	adc	r15, r1
    c9c8:	01 1d       	adc	r16, r1
    c9ca:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
    c9cc:	a6 14       	cp	r10, r6
    c9ce:	b7 04       	cpc	r11, r7
    c9d0:	c8 04       	cpc	r12, r8
    c9d2:	d9 04       	cpc	r13, r9
    c9d4:	28 f0       	brcs	.+10     	; 0xc9e0 <_ZN10SdBaseFile7seekSetEm+0xce>
    c9d6:	21 15       	cp	r18, r1
    c9d8:	31 05       	cpc	r19, r1
    c9da:	41 05       	cpc	r20, r1
    c9dc:	51 05       	cpc	r21, r1
    c9de:	49 f4       	brne	.+18     	; 0xc9f2 <_ZN10SdBaseFile7seekSetEm+0xe0>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    c9e0:	8f 89       	ldd	r24, Y+23	; 0x17
    c9e2:	98 8d       	ldd	r25, Y+24	; 0x18
    c9e4:	a9 8d       	ldd	r26, Y+25	; 0x19
    c9e6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    c9e8:	8f 83       	std	Y+7, r24	; 0x07
    c9ea:	98 87       	std	Y+8, r25	; 0x08
    c9ec:	a9 87       	std	Y+9, r26	; 0x09
    c9ee:	ba 87       	std	Y+10, r27	; 0x0a
    c9f0:	16 c0       	rjmp	.+44     	; 0xca1e <_ZN10SdBaseFile7seekSetEm+0x10c>
  } else {
    // advance from curPosition
    nNew -= nCur;
    c9f2:	a6 18       	sub	r10, r6
    c9f4:	b7 08       	sbc	r11, r7
    c9f6:	c8 08       	sbc	r12, r8
    c9f8:	d9 08       	sbc	r13, r9
    c9fa:	11 c0       	rjmp	.+34     	; 0xca1e <_ZN10SdBaseFile7seekSetEm+0x10c>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) {
    c9fc:	4f 81       	ldd	r20, Y+7	; 0x07
    c9fe:	58 85       	ldd	r21, Y+8	; 0x08
    ca00:	69 85       	ldd	r22, Y+9	; 0x09
    ca02:	7a 85       	ldd	r23, Y+10	; 0x0a
    ca04:	8d 81       	ldd	r24, Y+5	; 0x05
    ca06:	9e 81       	ldd	r25, Y+6	; 0x06
    ca08:	94 01       	movw	r18, r8
    ca0a:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    ca0e:	08 94       	sec
    ca10:	a1 08       	sbc	r10, r1
    ca12:	b1 08       	sbc	r11, r1
    ca14:	c1 08       	sbc	r12, r1
    ca16:	d1 08       	sbc	r13, r1
    ca18:	88 23       	and	r24, r24
    ca1a:	31 f4       	brne	.+12     	; 0xca28 <_ZN10SdBaseFile7seekSetEm+0x116>
    ca1c:	0f c0       	rjmp	.+30     	; 0xca3c <_ZN10SdBaseFile7seekSetEm+0x12a>
    ca1e:	47 e0       	ldi	r20, 0x07	; 7
    ca20:	84 2e       	mov	r8, r20
    ca22:	91 2c       	mov	r9, r1
    ca24:	8c 0e       	add	r8, r28
    ca26:	9d 1e       	adc	r9, r29
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    ca28:	a1 14       	cp	r10, r1
    ca2a:	b1 04       	cpc	r11, r1
    ca2c:	c1 04       	cpc	r12, r1
    ca2e:	d1 04       	cpc	r13, r1
    ca30:	29 f7       	brne	.-54     	; 0xc9fc <_ZN10SdBaseFile7seekSetEm+0xea>
    if (!vol_->fatGet(curCluster_, &curCluster_)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  curPosition_ = pos;
    ca32:	eb 86       	std	Y+11, r14	; 0x0b
    ca34:	fc 86       	std	Y+12, r15	; 0x0c
    ca36:	0d 87       	std	Y+13, r16	; 0x0d
    ca38:	1e 87       	std	Y+14, r17	; 0x0e
    ca3a:	98 cf       	rjmp	.-208    	; 0xc96c <_ZN10SdBaseFile7seekSetEm+0x5a>
    ca3c:	80 e0       	ldi	r24, 0x00	; 0
 done:
  return true;

 fail:
  return false;
}
    ca3e:	df 91       	pop	r29
    ca40:	cf 91       	pop	r28
    ca42:	1f 91       	pop	r17
    ca44:	0f 91       	pop	r16
    ca46:	ff 90       	pop	r15
    ca48:	ef 90       	pop	r14
    ca4a:	df 90       	pop	r13
    ca4c:	cf 90       	pop	r12
    ca4e:	bf 90       	pop	r11
    ca50:	af 90       	pop	r10
    ca52:	9f 90       	pop	r9
    ca54:	8f 90       	pop	r8
    ca56:	7f 90       	pop	r7
    ca58:	6f 90       	pop	r6
    ca5a:	08 95       	ret
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    ca5c:	22 30       	cpi	r18, 0x02	; 2
    ca5e:	09 f0       	breq	.+2      	; 0xca62 <_ZN10SdBaseFile7seekSetEm+0x150>
    ca60:	78 cf       	rjmp	.-272    	; 0xc952 <_ZN10SdBaseFile7seekSetEm+0x40>
    ca62:	e7 cf       	rjmp	.-50     	; 0xca32 <_ZN10SdBaseFile7seekSetEm+0x120>

0000ca64 <_ZN10SdBaseFile13cacheDirEntryEh>:
  return 0;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdBaseFile::cacheDirEntry(uint8_t action) {
    ca64:	cf 93       	push	r28
    ca66:	df 93       	push	r29
    ca68:	ec 01       	movw	r28, r24
    ca6a:	46 2f       	mov	r20, r22
  cache_t* pc;
  pc = vol_->cacheFetch(dirBlock_, action);
    ca6c:	6f 85       	ldd	r22, Y+15	; 0x0f
    ca6e:	78 89       	ldd	r23, Y+16	; 0x10
    ca70:	89 89       	ldd	r24, Y+17	; 0x11
    ca72:	9a 89       	ldd	r25, Y+18	; 0x12
    ca74:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
    ca78:	ac 01       	movw	r20, r24
  if (!pc) {
    ca7a:	00 97       	sbiw	r24, 0x00	; 0
    ca7c:	19 f4       	brne	.+6      	; 0xca84 <_ZN10SdBaseFile13cacheDirEntryEh+0x20>
    ca7e:	20 e0       	ldi	r18, 0x00	; 0
    ca80:	30 e0       	ldi	r19, 0x00	; 0
    ca82:	0a c0       	rjmp	.+20     	; 0xca98 <_ZN10SdBaseFile13cacheDirEntryEh+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + dirIndex_;
    ca84:	8c 81       	ldd	r24, Y+4	; 0x04
    ca86:	28 2f       	mov	r18, r24
    ca88:	30 e0       	ldi	r19, 0x00	; 0
    ca8a:	65 e0       	ldi	r22, 0x05	; 5
    ca8c:	22 0f       	add	r18, r18
    ca8e:	33 1f       	adc	r19, r19
    ca90:	6a 95       	dec	r22
    ca92:	e1 f7       	brne	.-8      	; 0xca8c <_ZN10SdBaseFile13cacheDirEntryEh+0x28>
    ca94:	24 0f       	add	r18, r20
    ca96:	35 1f       	adc	r19, r21

 fail:
  return 0;
}
    ca98:	c9 01       	movw	r24, r18
    ca9a:	df 91       	pop	r29
    ca9c:	cf 91       	pop	r28
    ca9e:	08 95       	ret

0000caa0 <_ZN10SdBaseFile11getFilenameEPc>:
 * \param[out] name An array of 13 characters for the file's name.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::getFilename(char* name) {
    caa0:	cf 93       	push	r28
    caa2:	df 93       	push	r29
    caa4:	fc 01       	movw	r30, r24
    caa6:	eb 01       	movw	r28, r22
    caa8:	83 81       	ldd	r24, Z+3	; 0x03
  dir_t* p;
  if (!isOpen()) {
    caaa:	88 23       	and	r24, r24
    caac:	91 f0       	breq	.+36     	; 0xcad2 <_ZN10SdBaseFile11getFilenameEPc+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    caae:	82 50       	subi	r24, 0x02	; 2
    cab0:	82 30       	cpi	r24, 0x02	; 2
    cab2:	20 f4       	brcc	.+8      	; 0xcabc <_ZN10SdBaseFile11getFilenameEPc+0x1c>
    name[0] = '/';
    cab4:	8f e2       	ldi	r24, 0x2F	; 47
    cab6:	88 83       	st	Y, r24
    name[1] = '\0';
    cab8:	19 82       	std	Y+1, r1	; 0x01
    caba:	09 c0       	rjmp	.+18     	; 0xcace <_ZN10SdBaseFile11getFilenameEPc+0x2e>
    return true;
  }
  // cache entry
  p = cacheDirEntry(SdVolume::CACHE_FOR_READ);
    cabc:	cf 01       	movw	r24, r30
    cabe:	60 e0       	ldi	r22, 0x00	; 0
    cac0:	0e 94 32 65 	call	0xca64	; 0xca64 <_ZN10SdBaseFile13cacheDirEntryEh>
  if (!p) {
    cac4:	00 97       	sbiw	r24, 0x00	; 0
    cac6:	29 f0       	breq	.+10     	; 0xcad2 <_ZN10SdBaseFile11getFilenameEPc+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(*p, name);
    cac8:	be 01       	movw	r22, r28
    caca:	0e 94 72 63 	call	0xc6e4	; 0xc6e4 <_ZN10SdBaseFile7dirNameERK14directoryEntryPc>
    cace:	81 e0       	ldi	r24, 0x01	; 1
    cad0:	01 c0       	rjmp	.+2      	; 0xcad4 <_ZN10SdBaseFile11getFilenameEPc+0x34>
  return true;
    cad2:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    cad4:	df 91       	pop	r29
    cad6:	cf 91       	pop	r28
    cad8:	08 95       	ret

0000cada <_ZN10SdBaseFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
bool SdBaseFile::sync() {
    cada:	0f 93       	push	r16
    cadc:	1f 93       	push	r17
    cade:	cf 93       	push	r28
    cae0:	df 93       	push	r29
    cae2:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) {
    cae4:	fc 01       	movw	r30, r24
    cae6:	83 81       	ldd	r24, Z+3	; 0x03
    cae8:	88 23       	and	r24, r24
    caea:	e1 f1       	breq	.+120    	; 0xcb64 <_ZN10SdBaseFile4syncEv+0x8a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (flags_ & F_FILE_DIR_DIRTY) {
    caec:	81 81       	ldd	r24, Z+1	; 0x01
    caee:	87 ff       	sbrs	r24, 7
    caf0:	36 c0       	rjmp	.+108    	; 0xcb5e <_ZN10SdBaseFile4syncEv+0x84>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    caf2:	c8 01       	movw	r24, r16
    caf4:	61 e0       	ldi	r22, 0x01	; 1
    caf6:	0e 94 32 65 	call	0xca64	; 0xca64 <_ZN10SdBaseFile13cacheDirEntryEh>
    cafa:	ec 01       	movw	r28, r24
    // check for deleted by another open file object
    if (!d || d->name[0] == DIR_NAME_DELETED) {
    cafc:	00 97       	sbiw	r24, 0x00	; 0
    cafe:	91 f1       	breq	.+100    	; 0xcb64 <_ZN10SdBaseFile4syncEv+0x8a>
    cb00:	88 81       	ld	r24, Y
    cb02:	85 3e       	cpi	r24, 0xE5	; 229
    cb04:	79 f1       	breq	.+94     	; 0xcb64 <_ZN10SdBaseFile4syncEv+0x8a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    cb06:	f8 01       	movw	r30, r16
    cb08:	83 81       	ldd	r24, Z+3	; 0x03
    cb0a:	82 30       	cpi	r24, 0x02	; 2
    cb0c:	40 f4       	brcc	.+16     	; 0xcb1e <_ZN10SdBaseFile4syncEv+0x44>
    cb0e:	83 89       	ldd	r24, Z+19	; 0x13
    cb10:	94 89       	ldd	r25, Z+20	; 0x14
    cb12:	a5 89       	ldd	r26, Z+21	; 0x15
    cb14:	b6 89       	ldd	r27, Z+22	; 0x16
    cb16:	8c 8f       	std	Y+28, r24	; 0x1c
    cb18:	9d 8f       	std	Y+29, r25	; 0x1d
    cb1a:	ae 8f       	std	Y+30, r26	; 0x1e
    cb1c:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    cb1e:	f8 01       	movw	r30, r16
    cb20:	87 89       	ldd	r24, Z+23	; 0x17
    cb22:	90 8d       	ldd	r25, Z+24	; 0x18
    cb24:	a1 8d       	ldd	r26, Z+25	; 0x19
    cb26:	b2 8d       	ldd	r27, Z+26	; 0x1a
    cb28:	8a 8f       	std	Y+26, r24	; 0x1a
    cb2a:	9b 8f       	std	Y+27, r25	; 0x1b
    d->firstClusterHigh = firstCluster_ >> 16;
    cb2c:	cd 01       	movw	r24, r26
    cb2e:	aa 27       	eor	r26, r26
    cb30:	bb 27       	eor	r27, r27
    cb32:	8c 8b       	std	Y+20, r24	; 0x14
    cb34:	9d 8b       	std	Y+21, r25	; 0x15

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    cb36:	e0 91 d9 22 	lds	r30, 0x22D9
    cb3a:	f0 91 da 22 	lds	r31, 0x22DA
    cb3e:	30 97       	sbiw	r30, 0x00	; 0
    cb40:	51 f0       	breq	.+20     	; 0xcb56 <_ZN10SdBaseFile4syncEv+0x7c>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    cb42:	be 01       	movw	r22, r28
    cb44:	6a 5e       	subi	r22, 0xEA	; 234
    cb46:	7f 4f       	sbci	r23, 0xFF	; 255
    cb48:	ce 01       	movw	r24, r28
    cb4a:	48 96       	adiw	r24, 0x18	; 24
    cb4c:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
    cb4e:	88 8d       	ldd	r24, Y+24	; 0x18
    cb50:	99 8d       	ldd	r25, Y+25	; 0x19
    cb52:	8a 8b       	std	Y+18, r24	; 0x12
    cb54:	9b 8b       	std	Y+19, r25	; 0x13
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    cb56:	f8 01       	movw	r30, r16
    cb58:	81 81       	ldd	r24, Z+1	; 0x01
    cb5a:	8f 77       	andi	r24, 0x7F	; 127
    cb5c:	81 83       	std	Z+1, r24	; 0x01
  }
  return vol_->cacheSync();
    cb5e:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    cb62:	04 c0       	rjmp	.+8      	; 0xcb6c <_ZN10SdBaseFile4syncEv+0x92>

 fail:
  writeError = true;
    cb64:	81 e0       	ldi	r24, 0x01	; 1
    cb66:	f8 01       	movw	r30, r16
    cb68:	80 83       	st	Z, r24
    cb6a:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    cb6c:	df 91       	pop	r29
    cb6e:	cf 91       	pop	r28
    cb70:	1f 91       	pop	r17
    cb72:	0f 91       	pop	r16
    cb74:	08 95       	ret

0000cb76 <_ZN10SdBaseFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
bool SdBaseFile::truncate(uint32_t length) {
    cb76:	6f 92       	push	r6
    cb78:	7f 92       	push	r7
    cb7a:	8f 92       	push	r8
    cb7c:	9f 92       	push	r9
    cb7e:	af 92       	push	r10
    cb80:	bf 92       	push	r11
    cb82:	cf 92       	push	r12
    cb84:	df 92       	push	r13
    cb86:	ef 92       	push	r14
    cb88:	ff 92       	push	r15
    cb8a:	0f 93       	push	r16
    cb8c:	1f 93       	push	r17
    cb8e:	df 93       	push	r29
    cb90:	cf 93       	push	r28
    cb92:	00 d0       	rcall	.+0      	; 0xcb94 <_ZN10SdBaseFile8truncateEm+0x1e>
    cb94:	0f 92       	push	r0
    cb96:	cd b7       	in	r28, 0x3d	; 61
    cb98:	de b7       	in	r29, 0x3e	; 62
    cb9a:	7c 01       	movw	r14, r24
    cb9c:	5a 01       	movw	r10, r20
    cb9e:	6b 01       	movw	r12, r22
  uint32_t newPos;
  // error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    cba0:	dc 01       	movw	r26, r24
    cba2:	13 96       	adiw	r26, 0x03	; 3
    cba4:	8c 91       	ld	r24, X
    cba6:	13 97       	sbiw	r26, 0x03	; 3
    cba8:	81 30       	cpi	r24, 0x01	; 1
    cbaa:	09 f0       	breq	.+2      	; 0xcbae <_ZN10SdBaseFile8truncateEm+0x38>
    cbac:	91 c0       	rjmp	.+290    	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
    cbae:	11 96       	adiw	r26, 0x01	; 1
    cbb0:	8c 91       	ld	r24, X
    cbb2:	81 ff       	sbrs	r24, 1
    cbb4:	8d c0       	rjmp	.+282    	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
    cbb6:	9f c0       	rjmp	.+318    	; 0xccf6 <_ZN10SdBaseFile8truncateEm+0x180>
  if (length > fileSize_) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    cbb8:	00 97       	sbiw	r24, 0x00	; 0
    cbba:	a1 05       	cpc	r26, r1
    cbbc:	b1 05       	cpc	r27, r1
    cbbe:	11 f4       	brne	.+4      	; 0xcbc4 <_ZN10SdBaseFile8truncateEm+0x4e>
    cbc0:	81 e0       	ldi	r24, 0x01	; 1
    cbc2:	87 c0       	rjmp	.+270    	; 0xccd2 <_ZN10SdBaseFile8truncateEm+0x15c>

  // remember position for seek after truncation
  newPos = curPosition_ > length ? length : curPosition_;
    cbc4:	f7 01       	movw	r30, r14
    cbc6:	63 84       	ldd	r6, Z+11	; 0x0b
    cbc8:	74 84       	ldd	r7, Z+12	; 0x0c
    cbca:	85 84       	ldd	r8, Z+13	; 0x0d
    cbcc:	96 84       	ldd	r9, Z+14	; 0x0e

  // position to last cluster in truncated file
  if (!seekSet(length)) {
    cbce:	c7 01       	movw	r24, r14
    cbd0:	b6 01       	movw	r22, r12
    cbd2:	a5 01       	movw	r20, r10
    cbd4:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    cbd8:	88 23       	and	r24, r24
    cbda:	09 f4       	brne	.+2      	; 0xcbde <_ZN10SdBaseFile8truncateEm+0x68>
    cbdc:	79 c0       	rjmp	.+242    	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
    cbde:	d7 01       	movw	r26, r14
    cbe0:	15 96       	adiw	r26, 0x05	; 5
    cbe2:	8d 91       	ld	r24, X+
    cbe4:	9c 91       	ld	r25, X
    cbe6:	16 97       	sbiw	r26, 0x06	; 6
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (length == 0) {
    cbe8:	a1 14       	cp	r10, r1
    cbea:	b1 04       	cpc	r11, r1
    cbec:	c1 04       	cpc	r12, r1
    cbee:	d1 04       	cpc	r13, r1
    cbf0:	89 f4       	brne	.+34     	; 0xcc14 <_ZN10SdBaseFile8truncateEm+0x9e>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) {
    cbf2:	57 96       	adiw	r26, 0x17	; 23
    cbf4:	4d 91       	ld	r20, X+
    cbf6:	5d 91       	ld	r21, X+
    cbf8:	6d 91       	ld	r22, X+
    cbfa:	7c 91       	ld	r23, X
    cbfc:	5a 97       	sbiw	r26, 0x1a	; 26
    cbfe:	0e 94 91 75 	call	0xeb22	; 0xeb22 <_ZN8SdVolume9freeChainEm>
    cc02:	88 23       	and	r24, r24
    cc04:	09 f4       	brne	.+2      	; 0xcc08 <_ZN10SdBaseFile8truncateEm+0x92>
    cc06:	64 c0       	rjmp	.+200    	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    firstCluster_ = 0;
    cc08:	f7 01       	movw	r30, r14
    cc0a:	17 8a       	std	Z+23, r1	; 0x17
    cc0c:	10 8e       	std	Z+24, r1	; 0x18
    cc0e:	11 8e       	std	Z+25, r1	; 0x19
    cc10:	12 8e       	std	Z+26, r1	; 0x1a
    cc12:	44 c0       	rjmp	.+136    	; 0xcc9c <_ZN10SdBaseFile8truncateEm+0x126>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) {
    cc14:	d7 01       	movw	r26, r14
    cc16:	17 96       	adiw	r26, 0x07	; 7
    cc18:	4d 91       	ld	r20, X+
    cc1a:	5d 91       	ld	r21, X+
    cc1c:	6d 91       	ld	r22, X+
    cc1e:	7c 91       	ld	r23, X
    cc20:	1a 97       	sbiw	r26, 0x0a	; 10
    cc22:	9e 01       	movw	r18, r28
    cc24:	2f 5f       	subi	r18, 0xFF	; 255
    cc26:	3f 4f       	sbci	r19, 0xFF	; 255
    cc28:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    cc2c:	88 23       	and	r24, r24
    cc2e:	09 f4       	brne	.+2      	; 0xcc32 <_ZN10SdBaseFile8truncateEm+0xbc>
    cc30:	4f c0       	rjmp	.+158    	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!vol_->isEOC(toFree)) {
    cc32:	d7 01       	movw	r26, r14
    cc34:	15 96       	adiw	r26, 0x05	; 5
    cc36:	ed 91       	ld	r30, X+
    cc38:	fc 91       	ld	r31, X
    cc3a:	16 97       	sbiw	r26, 0x06	; 6
    cc3c:	49 81       	ldd	r20, Y+1	; 0x01
    cc3e:	5a 81       	ldd	r21, Y+2	; 0x02
    cc40:	6b 81       	ldd	r22, Y+3	; 0x03
    cc42:	7c 81       	ldd	r23, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    cc44:	87 89       	ldd	r24, Z+23	; 0x17
    cc46:	80 31       	cpi	r24, 0x10	; 16
    cc48:	49 f4       	brne	.+18     	; 0xcc5c <_ZN10SdBaseFile8truncateEm+0xe6>
    cc4a:	48 3f       	cpi	r20, 0xF8	; 248
    cc4c:	bf ef       	ldi	r27, 0xFF	; 255
    cc4e:	5b 07       	cpc	r21, r27
    cc50:	b0 e0       	ldi	r27, 0x00	; 0
    cc52:	6b 07       	cpc	r22, r27
    cc54:	b0 e0       	ldi	r27, 0x00	; 0
    cc56:	7b 07       	cpc	r23, r27
    cc58:	48 f0       	brcs	.+18     	; 0xcc6c <_ZN10SdBaseFile8truncateEm+0xf6>
    cc5a:	20 c0       	rjmp	.+64     	; 0xcc9c <_ZN10SdBaseFile8truncateEm+0x126>
    return  cluster >= FAT32EOC_MIN;
    cc5c:	48 3f       	cpi	r20, 0xF8	; 248
    cc5e:	8f ef       	ldi	r24, 0xFF	; 255
    cc60:	58 07       	cpc	r21, r24
    cc62:	8f ef       	ldi	r24, 0xFF	; 255
    cc64:	68 07       	cpc	r22, r24
    cc66:	8f e0       	ldi	r24, 0x0F	; 15
    cc68:	78 07       	cpc	r23, r24
    cc6a:	c0 f4       	brcc	.+48     	; 0xcc9c <_ZN10SdBaseFile8truncateEm+0x126>
      // free extra clusters
      if (!vol_->freeChain(toFree)) {
    cc6c:	cf 01       	movw	r24, r30
    cc6e:	0e 94 91 75 	call	0xeb22	; 0xeb22 <_ZN8SdVolume9freeChainEm>
    cc72:	88 23       	and	r24, r24
    cc74:	69 f1       	breq	.+90     	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    cc76:	d7 01       	movw	r26, r14
    cc78:	17 96       	adiw	r26, 0x07	; 7
    cc7a:	4d 91       	ld	r20, X+
    cc7c:	5d 91       	ld	r21, X+
    cc7e:	6d 91       	ld	r22, X+
    cc80:	7c 91       	ld	r23, X
    cc82:	1a 97       	sbiw	r26, 0x0a	; 10
    cc84:	15 96       	adiw	r26, 0x05	; 5
    cc86:	8d 91       	ld	r24, X+
    cc88:	9c 91       	ld	r25, X
    cc8a:	16 97       	sbiw	r26, 0x06	; 6
    cc8c:	0f ef       	ldi	r16, 0xFF	; 255
    cc8e:	1f ef       	ldi	r17, 0xFF	; 255
    cc90:	2f ef       	ldi	r18, 0xFF	; 255
    cc92:	3f e0       	ldi	r19, 0x0F	; 15
    cc94:	0e 94 b2 74 	call	0xe964	; 0xe964 <_ZN8SdVolume6fatPutEmm>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) {
    cc98:	88 23       	and	r24, r24
    cc9a:	d1 f0       	breq	.+52     	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  fileSize_ = length;
    cc9c:	f7 01       	movw	r30, r14
    cc9e:	a3 8a       	std	Z+19, r10	; 0x13
    cca0:	b4 8a       	std	Z+20, r11	; 0x14
    cca2:	c5 8a       	std	Z+21, r12	; 0x15
    cca4:	d6 8a       	std	Z+22, r13	; 0x16

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    cca6:	81 81       	ldd	r24, Z+1	; 0x01
    cca8:	80 68       	ori	r24, 0x80	; 128
    ccaa:	81 83       	std	Z+1, r24	; 0x01

  if (!sync()) {
    ccac:	c7 01       	movw	r24, r14
    ccae:	0e 94 6d 65 	call	0xcada	; 0xcada <_ZN10SdBaseFile4syncEv>
    ccb2:	88 23       	and	r24, r24
    ccb4:	69 f0       	breq	.+26     	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // set file to correct position
  return seekSet(newPos);
    ccb6:	b6 01       	movw	r22, r12
    ccb8:	a5 01       	movw	r20, r10
    ccba:	6a 14       	cp	r6, r10
    ccbc:	7b 04       	cpc	r7, r11
    ccbe:	8c 04       	cpc	r8, r12
    ccc0:	9d 04       	cpc	r9, r13
    ccc2:	10 f4       	brcc	.+4      	; 0xccc8 <_ZN10SdBaseFile8truncateEm+0x152>
    ccc4:	b4 01       	movw	r22, r8
    ccc6:	a3 01       	movw	r20, r6
    ccc8:	c7 01       	movw	r24, r14
    ccca:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    ccce:	01 c0       	rjmp	.+2      	; 0xccd2 <_ZN10SdBaseFile8truncateEm+0x15c>
    ccd0:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    ccd2:	24 96       	adiw	r28, 0x04	; 4
    ccd4:	cd bf       	out	0x3d, r28	; 61
    ccd6:	de bf       	out	0x3e, r29	; 62
    ccd8:	cf 91       	pop	r28
    ccda:	df 91       	pop	r29
    ccdc:	1f 91       	pop	r17
    ccde:	0f 91       	pop	r16
    cce0:	ff 90       	pop	r15
    cce2:	ef 90       	pop	r14
    cce4:	df 90       	pop	r13
    cce6:	cf 90       	pop	r12
    cce8:	bf 90       	pop	r11
    ccea:	af 90       	pop	r10
    ccec:	9f 90       	pop	r9
    ccee:	8f 90       	pop	r8
    ccf0:	7f 90       	pop	r7
    ccf2:	6f 90       	pop	r6
    ccf4:	08 95       	ret
  if (!isFile() || !(flags_ & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if length is greater than current size
  if (length > fileSize_) {
    ccf6:	f7 01       	movw	r30, r14
    ccf8:	83 89       	ldd	r24, Z+19	; 0x13
    ccfa:	94 89       	ldd	r25, Z+20	; 0x14
    ccfc:	a5 89       	ldd	r26, Z+21	; 0x15
    ccfe:	b6 89       	ldd	r27, Z+22	; 0x16
    cd00:	84 17       	cp	r24, r20
    cd02:	95 07       	cpc	r25, r21
    cd04:	a6 07       	cpc	r26, r22
    cd06:	b7 07       	cpc	r27, r23
    cd08:	08 f0       	brcs	.+2      	; 0xcd0c <_ZN10SdBaseFile8truncateEm+0x196>
    cd0a:	56 cf       	rjmp	.-340    	; 0xcbb8 <_ZN10SdBaseFile8truncateEm+0x42>
    cd0c:	e1 cf       	rjmp	.-62     	; 0xccd0 <_ZN10SdBaseFile8truncateEm+0x15a>

0000cd0e <_ZN10SdBaseFile15openCachedEntryEhh>:

  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initialized
bool SdBaseFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    cd0e:	1f 93       	push	r17
    cd10:	cf 93       	push	r28
    cd12:	df 93       	push	r29
    cd14:	ec 01       	movw	r28, r24
    cd16:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = &vol_->cacheAddress()->dir[dirIndex];
    cd18:	26 2f       	mov	r18, r22
    cd1a:	30 e0       	ldi	r19, 0x00	; 0

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    cd1c:	f9 01       	movw	r30, r18
    cd1e:	85 e0       	ldi	r24, 0x05	; 5
    cd20:	ee 0f       	add	r30, r30
    cd22:	ff 1f       	adc	r31, r31
    cd24:	8a 95       	dec	r24
    cd26:	e1 f7       	brne	.-8      	; 0xcd20 <_ZN10SdBaseFile15openCachedEntryEhh+0x12>
    cd28:	e5 52       	subi	r30, 0x25	; 37
    cd2a:	fd 4d       	sbci	r31, 0xDD	; 221
    cd2c:	83 85       	ldd	r24, Z+11	; 0x0b
    cd2e:	81 71       	andi	r24, 0x11	; 17
    cd30:	21 f0       	breq	.+8      	; 0xcd3a <_ZN10SdBaseFile15openCachedEntryEhh+0x2c>
    if (oflag & (O_WRITE | O_TRUNC)) {
    cd32:	84 2f       	mov	r24, r20
    cd34:	82 71       	andi	r24, 0x12	; 18
    cd36:	09 f0       	breq	.+2      	; 0xcd3a <_ZN10SdBaseFile15openCachedEntryEhh+0x2c>
    cd38:	64 c0       	rjmp	.+200    	; 0xce02 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // remember location of directory entry on SD
  dirBlock_ = vol_->cacheBlockNumber();
    cd3a:	80 91 db 24 	lds	r24, 0x24DB
    cd3e:	90 91 dc 24 	lds	r25, 0x24DC
    cd42:	a0 91 dd 24 	lds	r26, 0x24DD
    cd46:	b0 91 de 24 	lds	r27, 0x24DE
    cd4a:	8f 87       	std	Y+15, r24	; 0x0f
    cd4c:	98 8b       	std	Y+16, r25	; 0x10
    cd4e:	a9 8b       	std	Y+17, r26	; 0x11
    cd50:	ba 8b       	std	Y+18, r27	; 0x12
  dirIndex_ = dirIndex;
    cd52:	6c 83       	std	Y+4, r22	; 0x04

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    cd54:	f9 01       	movw	r30, r18
    cd56:	b5 e0       	ldi	r27, 0x05	; 5
    cd58:	ee 0f       	add	r30, r30
    cd5a:	ff 1f       	adc	r31, r31
    cd5c:	ba 95       	dec	r27
    cd5e:	e1 f7       	brne	.-8      	; 0xcd58 <_ZN10SdBaseFile15openCachedEntryEhh+0x4a>
    cd60:	e5 52       	subi	r30, 0x25	; 37
    cd62:	fd 4d       	sbci	r31, 0xDD	; 221
    cd64:	24 89       	ldd	r18, Z+20	; 0x14
    cd66:	35 89       	ldd	r19, Z+21	; 0x15
    cd68:	40 e0       	ldi	r20, 0x00	; 0
    cd6a:	50 e0       	ldi	r21, 0x00	; 0
    cd6c:	a9 01       	movw	r20, r18
    cd6e:	33 27       	eor	r19, r19
    cd70:	22 27       	eor	r18, r18
    cd72:	2f 8b       	std	Y+23, r18	; 0x17
    cd74:	38 8f       	std	Y+24, r19	; 0x18
    cd76:	49 8f       	std	Y+25, r20	; 0x19
    cd78:	5a 8f       	std	Y+26, r21	; 0x1a
  firstCluster_ |= p->firstClusterLow;
    cd7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    cd7c:	93 8d       	ldd	r25, Z+27	; 0x1b
    cd7e:	a0 e0       	ldi	r26, 0x00	; 0
    cd80:	b0 e0       	ldi	r27, 0x00	; 0
    cd82:	28 2b       	or	r18, r24
    cd84:	39 2b       	or	r19, r25
    cd86:	4a 2b       	or	r20, r26
    cd88:	5b 2b       	or	r21, r27
    cd8a:	2f 8b       	std	Y+23, r18	; 0x17
    cd8c:	38 8f       	std	Y+24, r19	; 0x18
    cd8e:	49 8f       	std	Y+25, r20	; 0x19
    cd90:	5a 8f       	std	Y+26, r21	; 0x1a
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file else false.
 */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    cd92:	83 85       	ldd	r24, Z+11	; 0x0b
    cd94:	90 e0       	ldi	r25, 0x00	; 0
    cd96:	88 71       	andi	r24, 0x18	; 24
    cd98:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    cd9a:	00 97       	sbiw	r24, 0x00	; 0
    cd9c:	51 f4       	brne	.+20     	; 0xcdb2 <_ZN10SdBaseFile15openCachedEntryEhh+0xa4>
    fileSize_ = p->fileSize;
    cd9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    cda0:	95 8d       	ldd	r25, Z+29	; 0x1d
    cda2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    cda4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    cda6:	8b 8b       	std	Y+19, r24	; 0x13
    cda8:	9c 8b       	std	Y+20, r25	; 0x14
    cdaa:	ad 8b       	std	Y+21, r26	; 0x15
    cdac:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    cdae:	81 e0       	ldi	r24, 0x01	; 1
    cdb0:	08 c0       	rjmp	.+16     	; 0xcdc2 <_ZN10SdBaseFile15openCachedEntryEhh+0xb4>
  } else if (DIR_IS_SUBDIR(p)) {
    cdb2:	40 97       	sbiw	r24, 0x10	; 16
    cdb4:	31 f5       	brne	.+76     	; 0xce02 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
    if (!setDirSize()) {
    cdb6:	ce 01       	movw	r24, r28
    cdb8:	0e 94 db 63 	call	0xc7b6	; 0xc7b6 <_ZN10SdBaseFile10setDirSizeEv>
    cdbc:	88 23       	and	r24, r24
    cdbe:	09 f1       	breq	.+66     	; 0xce02 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    type_ = FAT_FILE_TYPE_SUBDIR;
    cdc0:	84 e0       	ldi	r24, 0x04	; 4
    cdc2:	8b 83       	std	Y+3, r24	; 0x03
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save open flags for read/write
  flags_ = oflag & F_OFLAG;
    cdc4:	81 2f       	mov	r24, r17
    cdc6:	8f 70       	andi	r24, 0x0F	; 15
    cdc8:	89 83       	std	Y+1, r24	; 0x01

  // set to start of file
  curCluster_ = 0;
    cdca:	1f 82       	std	Y+7, r1	; 0x07
    cdcc:	18 86       	std	Y+8, r1	; 0x08
    cdce:	19 86       	std	Y+9, r1	; 0x09
    cdd0:	1a 86       	std	Y+10, r1	; 0x0a
  curPosition_ = 0;
    cdd2:	1b 86       	std	Y+11, r1	; 0x0b
    cdd4:	1c 86       	std	Y+12, r1	; 0x0c
    cdd6:	1d 86       	std	Y+13, r1	; 0x0d
    cdd8:	1e 86       	std	Y+14, r1	; 0x0e
  if ((oflag & O_TRUNC) && !truncate(0)) {
    cdda:	14 ff       	sbrs	r17, 4
    cddc:	18 c0       	rjmp	.+48     	; 0xce0e <_ZN10SdBaseFile15openCachedEntryEhh+0x100>
    cdde:	ce 01       	movw	r24, r28
    cde0:	40 e0       	ldi	r20, 0x00	; 0
    cde2:	50 e0       	ldi	r21, 0x00	; 0
    cde4:	60 e0       	ldi	r22, 0x00	; 0
    cde6:	70 e0       	ldi	r23, 0x00	; 0
    cde8:	0e 94 bb 65 	call	0xcb76	; 0xcb76 <_ZN10SdBaseFile8truncateEm>
    cdec:	88 23       	and	r24, r24
    cdee:	79 f4       	brne	.+30     	; 0xce0e <_ZN10SdBaseFile15openCachedEntryEhh+0x100>
    cdf0:	08 c0       	rjmp	.+16     	; 0xce02 <_ZN10SdBaseFile15openCachedEntryEhh+0xf4>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}
    cdf2:	4b 89       	ldd	r20, Y+19	; 0x13
    cdf4:	5c 89       	ldd	r21, Y+20	; 0x14
    cdf6:	6d 89       	ldd	r22, Y+21	; 0x15
    cdf8:	7e 89       	ldd	r23, Y+22	; 0x16
    cdfa:	ce 01       	movw	r24, r28
    cdfc:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    ce00:	02 c0       	rjmp	.+4      	; 0xce06 <_ZN10SdBaseFile15openCachedEntryEhh+0xf8>
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;

 fail:
  type_ = FAT_FILE_TYPE_CLOSED;
    ce02:	1b 82       	std	Y+3, r1	; 0x03
    ce04:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    ce06:	df 91       	pop	r29
    ce08:	cf 91       	pop	r28
    ce0a:	1f 91       	pop	r17
    ce0c:	08 95       	ret
  curPosition_ = 0;
  if ((oflag & O_TRUNC) && !truncate(0)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return oflag & O_AT_END ? seekEnd(0) : true;
    ce0e:	15 fd       	sbrc	r17, 5
    ce10:	f0 cf       	rjmp	.-32     	; 0xcdf2 <_ZN10SdBaseFile15openCachedEntryEhh+0xe4>
    ce12:	81 e0       	ldi	r24, 0x01	; 1
    ce14:	f8 cf       	rjmp	.-16     	; 0xce06 <_ZN10SdBaseFile15openCachedEntryEhh+0xf8>

0000ce16 <_ZN10SdBaseFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
bool SdBaseFile::close() {
    ce16:	0f 93       	push	r16
    ce18:	1f 93       	push	r17
    ce1a:	8c 01       	movw	r16, r24
  bool rtn = sync();
    ce1c:	0e 94 6d 65 	call	0xcada	; 0xcada <_ZN10SdBaseFile4syncEv>
  type_ = FAT_FILE_TYPE_CLOSED;
    ce20:	f8 01       	movw	r30, r16
    ce22:	13 82       	std	Z+3, r1	; 0x03
  return rtn;
}
    ce24:	1f 91       	pop	r17
    ce26:	0f 91       	pop	r16
    ce28:	08 95       	ret

0000ce2a <_ZN10SdBaseFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
bool SdBaseFile::remove() {
    ce2a:	cf 93       	push	r28
    ce2c:	df 93       	push	r29
    ce2e:	ec 01       	movw	r28, r24
  dir_t* d;
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) {
    ce30:	40 e0       	ldi	r20, 0x00	; 0
    ce32:	50 e0       	ldi	r21, 0x00	; 0
    ce34:	60 e0       	ldi	r22, 0x00	; 0
    ce36:	70 e0       	ldi	r23, 0x00	; 0
    ce38:	0e 94 bb 65 	call	0xcb76	; 0xcb76 <_ZN10SdBaseFile8truncateEm>
    ce3c:	88 23       	and	r24, r24
    ce3e:	69 f0       	breq	.+26     	; 0xce5a <_ZN10SdBaseFile6removeEv+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache directory entry
  d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    ce40:	ce 01       	movw	r24, r28
    ce42:	61 e0       	ldi	r22, 0x01	; 1
    ce44:	0e 94 32 65 	call	0xca64	; 0xca64 <_ZN10SdBaseFile13cacheDirEntryEh>
    ce48:	fc 01       	movw	r30, r24
  if (!d) {
    ce4a:	00 97       	sbiw	r24, 0x00	; 0
    ce4c:	31 f0       	breq	.+12     	; 0xce5a <_ZN10SdBaseFile6removeEv+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    ce4e:	85 ee       	ldi	r24, 0xE5	; 229
    ce50:	80 83       	st	Z, r24

  // set this file closed
  type_ = FAT_FILE_TYPE_CLOSED;
    ce52:	1b 82       	std	Y+3, r1	; 0x03

  // write entry to SD
  return vol_->cacheSync();
    ce54:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    ce58:	01 c0       	rjmp	.+2      	; 0xce5c <_ZN10SdBaseFile6removeEv+0x32>
    ce5a:	80 e0       	ldi	r24, 0x00	; 0
  return true;

 fail:
  return false;
}
    ce5c:	df 91       	pop	r29
    ce5e:	cf 91       	pop	r28
    ce60:	08 95       	ret

0000ce62 <_ZN10SdBaseFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
    ce62:	2f 92       	push	r2
    ce64:	3f 92       	push	r3
    ce66:	4f 92       	push	r4
    ce68:	5f 92       	push	r5
    ce6a:	7f 92       	push	r7
    ce6c:	8f 92       	push	r8
    ce6e:	9f 92       	push	r9
    ce70:	af 92       	push	r10
    ce72:	bf 92       	push	r11
    ce74:	cf 92       	push	r12
    ce76:	df 92       	push	r13
    ce78:	ef 92       	push	r14
    ce7a:	ff 92       	push	r15
    ce7c:	0f 93       	push	r16
    ce7e:	1f 93       	push	r17
    ce80:	df 93       	push	r29
    ce82:	cf 93       	push	r28
    ce84:	cd b7       	in	r28, 0x3d	; 61
    ce86:	de b7       	in	r29, 0x3e	; 62
    ce88:	28 97       	sbiw	r28, 0x08	; 8
    ce8a:	cd bf       	out	0x3d, r28	; 61
    ce8c:	de bf       	out	0x3e, r29	; 62
    ce8e:	8f 83       	std	Y+7, r24	; 0x07
    ce90:	98 87       	std	Y+8, r25	; 0x08
    ce92:	4d 83       	std	Y+5, r20	; 0x05
    ce94:	5e 83       	std	Y+6, r21	; 0x06
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) {
    ce96:	dc 01       	movw	r26, r24
    ce98:	13 96       	adiw	r26, 0x03	; 3
    ce9a:	8c 91       	ld	r24, X
    ce9c:	13 97       	sbiw	r26, 0x03	; 3
    ce9e:	88 23       	and	r24, r24
    cea0:	09 f4       	brne	.+2      	; 0xcea4 <_ZN10SdBaseFile4readEPvj+0x42>
    cea2:	1e c1       	rjmp	.+572    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
    cea4:	11 96       	adiw	r26, 0x01	; 1
    cea6:	8c 91       	ld	r24, X
    cea8:	80 ff       	sbrs	r24, 0
    ceaa:	1a c1       	rjmp	.+564    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
    ceac:	31 c1       	rjmp	.+610    	; 0xd110 <_ZN10SdBaseFile4readEPvj+0x2ae>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (fileSize_ - curPosition_)) {
    nbyte = fileSize_ - curPosition_;
    ceae:	f5 01       	movw	r30, r10
    ceb0:	ee 19       	sub	r30, r14
    ceb2:	ff 09       	sbc	r31, r15
    ceb4:	ed 83       	std	Y+5, r30	; 0x05
    ceb6:	fe 83       	std	Y+6, r31	; 0x06
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int SdBaseFile::read(void* buf, size_t nbyte) {
  uint8_t blockOfCluster;
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    ceb8:	69 83       	std	Y+1, r22	; 0x01
    ceba:	7a 83       	std	Y+2, r23	; 0x02
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) {
    cebc:	8f 81       	ldd	r24, Y+7	; 0x07
    cebe:	98 85       	ldd	r25, Y+8	; 0x08
    cec0:	07 96       	adiw	r24, 0x07	; 7
    cec2:	8b 83       	std	Y+3, r24	; 0x03
    cec4:	9c 83       	std	Y+4, r25	; 0x04
    cec6:	4d 80       	ldd	r4, Y+5	; 0x05
    cec8:	5e 80       	ldd	r5, Y+6	; 0x06
    ceca:	03 c1       	rjmp	.+518    	; 0xd0d2 <_ZN10SdBaseFile4readEPvj+0x270>
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    size_t n;
    offset = curPosition_ & 0X1FF;  // offset in block
    cecc:	af 81       	ldd	r26, Y+7	; 0x07
    cece:	b8 85       	ldd	r27, Y+8	; 0x08
    ced0:	1b 96       	adiw	r26, 0x0b	; 11
    ced2:	2d 91       	ld	r18, X+
    ced4:	3d 91       	ld	r19, X+
    ced6:	4d 91       	ld	r20, X+
    ced8:	5c 91       	ld	r21, X
    ceda:	1e 97       	sbiw	r26, 0x0e	; 14
    cedc:	8f ef       	ldi	r24, 0xFF	; 255
    cede:	28 2e       	mov	r2, r24
    cee0:	81 e0       	ldi	r24, 0x01	; 1
    cee2:	38 2e       	mov	r3, r24
    cee4:	22 22       	and	r2, r18
    cee6:	33 22       	and	r3, r19
    blockOfCluster = vol_->blockOfCluster(curPosition_);
    cee8:	15 96       	adiw	r26, 0x05	; 5
    ceea:	ed 91       	ld	r30, X+
    ceec:	fc 91       	ld	r31, X
    ceee:	16 97       	sbiw	r26, 0x06	; 6
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    cef0:	59 01       	movw	r10, r18
    cef2:	6a 01       	movw	r12, r20
    cef4:	09 e0       	ldi	r16, 0x09	; 9
    cef6:	d6 94       	lsr	r13
    cef8:	c7 94       	ror	r12
    cefa:	b7 94       	ror	r11
    cefc:	a7 94       	ror	r10
    cefe:	0a 95       	dec	r16
    cf00:	d1 f7       	brne	.-12     	; 0xcef6 <_ZN10SdBaseFile4readEPvj+0x94>
    cf02:	74 80       	ldd	r7, Z+4	; 0x04
    cf04:	7a 94       	dec	r7
    cf06:	7a 20       	and	r7, r10
    if (type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    cf08:	13 96       	adiw	r26, 0x03	; 3
    cf0a:	8c 91       	ld	r24, X
    cf0c:	82 30       	cpi	r24, 0x02	; 2
    cf0e:	49 f4       	brne	.+18     	; 0xcf22 <_ZN10SdBaseFile4readEPvj+0xc0>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    cf10:	e2 8c       	ldd	r14, Z+26	; 0x1a
    cf12:	f3 8c       	ldd	r15, Z+27	; 0x1b
    cf14:	04 8d       	ldd	r16, Z+28	; 0x1c
    cf16:	15 8d       	ldd	r17, Z+29	; 0x1d
    cf18:	ea 0c       	add	r14, r10
    cf1a:	fb 1c       	adc	r15, r11
    cf1c:	0c 1d       	adc	r16, r12
    cf1e:	1d 1d       	adc	r17, r13
    cf20:	35 c0       	rjmp	.+106    	; 0xcf8c <_ZN10SdBaseFile4readEPvj+0x12a>
    } else {
      if (offset == 0 && blockOfCluster == 0) {
    cf22:	21 14       	cp	r2, r1
    cf24:	31 04       	cpc	r3, r1
    cf26:	11 f5       	brne	.+68     	; 0xcf6c <_ZN10SdBaseFile4readEPvj+0x10a>
    cf28:	77 20       	and	r7, r7
    cf2a:	01 f5       	brne	.+64     	; 0xcf6c <_ZN10SdBaseFile4readEPvj+0x10a>
        // start of new cluster
        if (curPosition_ == 0) {
    cf2c:	21 15       	cp	r18, r1
    cf2e:	31 05       	cpc	r19, r1
    cf30:	41 05       	cpc	r20, r1
    cf32:	51 05       	cpc	r21, r1
    cf34:	59 f4       	brne	.+22     	; 0xcf4c <_ZN10SdBaseFile4readEPvj+0xea>
          // use first cluster in file
          curCluster_ = firstCluster_;
    cf36:	ef 81       	ldd	r30, Y+7	; 0x07
    cf38:	f8 85       	ldd	r31, Y+8	; 0x08
    cf3a:	87 89       	ldd	r24, Z+23	; 0x17
    cf3c:	90 8d       	ldd	r25, Z+24	; 0x18
    cf3e:	a1 8d       	ldd	r26, Z+25	; 0x19
    cf40:	b2 8d       	ldd	r27, Z+26	; 0x1a
    cf42:	87 83       	std	Z+7, r24	; 0x07
    cf44:	90 87       	std	Z+8, r25	; 0x08
    cf46:	a1 87       	std	Z+9, r26	; 0x09
    cf48:	b2 87       	std	Z+10, r27	; 0x0a
    cf4a:	10 c0       	rjmp	.+32     	; 0xcf6c <_ZN10SdBaseFile4readEPvj+0x10a>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) {
    cf4c:	af 81       	ldd	r26, Y+7	; 0x07
    cf4e:	b8 85       	ldd	r27, Y+8	; 0x08
    cf50:	17 96       	adiw	r26, 0x07	; 7
    cf52:	4d 91       	ld	r20, X+
    cf54:	5d 91       	ld	r21, X+
    cf56:	6d 91       	ld	r22, X+
    cf58:	7c 91       	ld	r23, X
    cf5a:	1a 97       	sbiw	r26, 0x0a	; 10
    cf5c:	cf 01       	movw	r24, r30
    cf5e:	2b 81       	ldd	r18, Y+3	; 0x03
    cf60:	3c 81       	ldd	r19, Y+4	; 0x04
    cf62:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    cf66:	88 23       	and	r24, r24
    cf68:	09 f4       	brne	.+2      	; 0xcf6c <_ZN10SdBaseFile4readEPvj+0x10a>
    cf6a:	ba c0       	rjmp	.+372    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    cf6c:	ef 81       	ldd	r30, Y+7	; 0x07
    cf6e:	f8 85       	ldd	r31, Y+8	; 0x08
    cf70:	47 81       	ldd	r20, Z+7	; 0x07
    cf72:	50 85       	ldd	r21, Z+8	; 0x08
    cf74:	61 85       	ldd	r22, Z+9	; 0x09
    cf76:	72 85       	ldd	r23, Z+10	; 0x0a
    cf78:	85 81       	ldd	r24, Z+5	; 0x05
    cf7a:	96 81       	ldd	r25, Z+6	; 0x06
    cf7c:	0e 94 90 72 	call	0xe520	; 0xe520 <_ZNK8SdVolume17clusterStartBlockEm>
    cf80:	7b 01       	movw	r14, r22
    cf82:	8c 01       	movw	r16, r24
    cf84:	e7 0c       	add	r14, r7
    cf86:	f1 1c       	adc	r15, r1
    cf88:	01 1d       	adc	r16, r1
    cf8a:	11 1d       	adc	r17, r1
    }
    if (offset != 0 || toRead < 512 || block == vol_->cacheBlockNumber()) {
    cf8c:	21 14       	cp	r2, r1
    cf8e:	31 04       	cpc	r3, r1
    cf90:	99 f4       	brne	.+38     	; 0xcfb8 <_ZN10SdBaseFile4readEPvj+0x156>
    cf92:	f0 e0       	ldi	r31, 0x00	; 0
    cf94:	4f 16       	cp	r4, r31
    cf96:	f2 e0       	ldi	r31, 0x02	; 2
    cf98:	5f 06       	cpc	r5, r31
    cf9a:	70 f0       	brcs	.+28     	; 0xcfb8 <_ZN10SdBaseFile4readEPvj+0x156>
#endif  // USE_SEPARATE_FAT_CACHE
  static Sd2Card* sdCard_;            // Sd2Card object for cache
#endif  // USE_MULTIPLE_CARDS

  cache_t *cacheAddress() {return &cacheBuffer_;}
  uint32_t cacheBlockNumber() {return cacheBlockNumber_;}
    cf9c:	20 91 db 24 	lds	r18, 0x24DB
    cfa0:	30 91 dc 24 	lds	r19, 0x24DC
    cfa4:	40 91 dd 24 	lds	r20, 0x24DD
    cfa8:	50 91 de 24 	lds	r21, 0x24DE
    cfac:	e2 16       	cp	r14, r18
    cfae:	f3 06       	cpc	r15, r19
    cfb0:	04 07       	cpc	r16, r20
    cfb2:	15 07       	cpc	r17, r21
    cfb4:	09 f0       	breq	.+2      	; 0xcfb8 <_ZN10SdBaseFile4readEPvj+0x156>
    cfb6:	cc c0       	rjmp	.+408    	; 0xd150 <_ZN10SdBaseFile4readEPvj+0x2ee>
      // amount to be read from current block
      n = 512 - offset;
      if (n > toRead) n = toRead;
      // read block to cache and copy data to caller
      pc = vol_->cacheFetch(block, SdVolume::CACHE_FOR_READ);
    cfb8:	c8 01       	movw	r24, r16
    cfba:	b7 01       	movw	r22, r14
    cfbc:	40 e0       	ldi	r20, 0x00	; 0
    cfbe:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
      if (!pc) {
    cfc2:	00 97       	sbiw	r24, 0x00	; 0
    cfc4:	09 f4       	brne	.+2      	; 0xcfc8 <_ZN10SdBaseFile4readEPvj+0x166>
    cfc6:	8c c0       	rjmp	.+280    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == vol_->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
    cfc8:	40 e0       	ldi	r20, 0x00	; 0
    cfca:	52 e0       	ldi	r21, 0x02	; 2
    cfcc:	42 19       	sub	r20, r2
    cfce:	53 09       	sbc	r21, r3
    cfd0:	42 01       	movw	r8, r4
    cfd2:	44 15       	cp	r20, r4
    cfd4:	55 05       	cpc	r21, r5
    cfd6:	08 f4       	brcc	.+2      	; 0xcfda <_ZN10SdBaseFile4readEPvj+0x178>
    cfd8:	4a 01       	movw	r8, r20
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    cfda:	9c 01       	movw	r18, r24
    cfdc:	22 0d       	add	r18, r2
    cfde:	33 1d       	adc	r19, r3
    cfe0:	89 81       	ldd	r24, Y+1	; 0x01
    cfe2:	9a 81       	ldd	r25, Y+2	; 0x02
    cfe4:	b9 01       	movw	r22, r18
    cfe6:	a4 01       	movw	r20, r8
    cfe8:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
    cfec:	59 c0       	rjmp	.+178    	; 0xd0a0 <_ZN10SdBaseFile4readEPvj+0x23e>
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    return  cluster >= FAT32EOC_MIN;
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
    cfee:	80 91 e4 24 	lds	r24, 0x24E4
    cff2:	90 91 e5 24 	lds	r25, 0x24E5
    cff6:	b8 01       	movw	r22, r16
    cff8:	a7 01       	movw	r20, r14
    cffa:	29 81       	ldd	r18, Y+1	; 0x01
    cffc:	3a 81       	ldd	r19, Y+2	; 0x02
    cffe:	0e 94 34 62 	call	0xc468	; 0xc468 <_ZN7Sd2Card9readBlockEmPh>
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
      // read single block
      n = 512;
      if (!vol_->readBlock(block, dst)) {
    d002:	88 23       	and	r24, r24
    d004:	09 f4       	brne	.+2      	; 0xd008 <_ZN10SdBaseFile4readEPvj+0x1a6>
    d006:	6c c0       	rjmp	.+216    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
        DBG_FAIL_MACRO;
        goto fail;
    d008:	81 2c       	mov	r8, r1
    d00a:	12 e0       	ldi	r17, 0x02	; 2
    d00c:	91 2e       	mov	r9, r17
    d00e:	48 c0       	rjmp	.+144    	; 0xd0a0 <_ZN10SdBaseFile4readEPvj+0x23e>
      }
    } else {
      uint8_t nb = toRead >> 9;
    d010:	d5 2c       	mov	r13, r5
    d012:	d6 94       	lsr	r13
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
    d014:	af 81       	ldd	r26, Y+7	; 0x07
    d016:	b8 85       	ldd	r27, Y+8	; 0x08
    d018:	13 96       	adiw	r26, 0x03	; 3
    d01a:	8c 91       	ld	r24, X
    d01c:	13 97       	sbiw	r26, 0x03	; 3
    d01e:	82 30       	cpi	r24, 0x02	; 2
    d020:	49 f0       	breq	.+18     	; 0xd034 <_ZN10SdBaseFile4readEPvj+0x1d2>
    d022:	15 96       	adiw	r26, 0x05	; 5
    d024:	ed 91       	ld	r30, X+
    d026:	fc 91       	ld	r31, X
    d028:	16 97       	sbiw	r26, 0x06	; 6
    d02a:	84 81       	ldd	r24, Z+4	; 0x04
    d02c:	87 19       	sub	r24, r7
    d02e:	8d 15       	cp	r24, r13
    d030:	08 f4       	brcc	.+2      	; 0xd034 <_ZN10SdBaseFile4readEPvj+0x1d2>
    d032:	d8 2e       	mov	r13, r24
        uint8_t mb = vol_->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
      if (vol_->cacheBlockNumber() <= block
    d034:	e2 16       	cp	r14, r18
    d036:	f3 06       	cpc	r15, r19
    d038:	04 07       	cpc	r16, r20
    d03a:	15 07       	cpc	r17, r21
    d03c:	70 f0       	brcs	.+28     	; 0xd05a <_ZN10SdBaseFile4readEPvj+0x1f8>
    d03e:	2d 0d       	add	r18, r13
    d040:	31 1d       	adc	r19, r1
    d042:	41 1d       	adc	r20, r1
    d044:	51 1d       	adc	r21, r1
    d046:	e2 16       	cp	r14, r18
    d048:	f3 06       	cpc	r15, r19
    d04a:	04 07       	cpc	r16, r20
    d04c:	15 07       	cpc	r17, r21
    d04e:	28 f4       	brcc	.+10     	; 0xd05a <_ZN10SdBaseFile4readEPvj+0x1f8>
        && block < (vol_->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!vol_->cacheSync()) {
    d050:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    d054:	88 23       	and	r24, r24
    d056:	09 f4       	brne	.+2      	; 0xd05a <_ZN10SdBaseFile4readEPvj+0x1f8>
    d058:	43 c0       	rjmp	.+134    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->readStart(block)) {
    d05a:	80 91 e4 24 	lds	r24, 0x24E4
    d05e:	90 91 e5 24 	lds	r25, 0x24E5
    d062:	b8 01       	movw	r22, r16
    d064:	a7 01       	movw	r20, r14
    d066:	0e 94 0d 61 	call	0xc21a	; 0xc21a <_ZN7Sd2Card9readStartEm>
    d06a:	88 23       	and	r24, r24
    d06c:	c9 f1       	breq	.+114    	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
        DBG_FAIL_MACRO;
        goto fail;
    d06e:	09 81       	ldd	r16, Y+1	; 0x01
    d070:	1a 81       	ldd	r17, Y+2	; 0x02
    d072:	ff 24       	eor	r15, r15
    d074:	08 c0       	rjmp	.+16     	; 0xd086 <_ZN10SdBaseFile4readEPvj+0x224>
      }
      for (uint8_t b = 0; b < nb; b++) {
        if (!vol_->sdCard()->readData(dst + b*512)) {
    d076:	b8 01       	movw	r22, r16
    d078:	0e 94 21 62 	call	0xc442	; 0xc442 <_ZN7Sd2Card8readDataEPh>
    d07c:	00 50       	subi	r16, 0x00	; 0
    d07e:	1e 4f       	sbci	r17, 0xFE	; 254
    d080:	88 23       	and	r24, r24
    d082:	71 f1       	breq	.+92     	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
      }
      if (!vol_->sdCard()->readStart(block)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nb; b++) {
    d084:	f3 94       	inc	r15
    d086:	80 91 e4 24 	lds	r24, 0x24E4
    d08a:	90 91 e5 24 	lds	r25, 0x24E5
    d08e:	fd 14       	cp	r15, r13
    d090:	90 f3       	brcs	.-28     	; 0xd076 <_ZN10SdBaseFile4readEPvj+0x214>
        if (!vol_->sdCard()->readData(dst + b*512)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->readStop()) {
    d092:	0e 94 f0 60 	call	0xc1e0	; 0xc1e0 <_ZN7Sd2Card8readStopEv>
    d096:	88 23       	and	r24, r24
    d098:	19 f1       	breq	.+70     	; 0xd0e0 <_ZN10SdBaseFile4readEPvj+0x27e>
      uint8_t nb = toRead >> 9;
      if (type_ != FAT_FILE_TYPE_ROOT_FIXED) {
        uint8_t mb = vol_->blocksPerCluster() - blockOfCluster;
        if (mb < nb) nb = mb;
      }
      n = 512*nb;
    d09a:	9d 2c       	mov	r9, r13
    d09c:	99 0c       	add	r9, r9
    d09e:	88 24       	eor	r8, r8
      if (!vol_->sdCard()->readStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    d0a0:	e9 81       	ldd	r30, Y+1	; 0x01
    d0a2:	fa 81       	ldd	r31, Y+2	; 0x02
    d0a4:	e8 0d       	add	r30, r8
    d0a6:	f9 1d       	adc	r31, r9
    d0a8:	e9 83       	std	Y+1, r30	; 0x01
    d0aa:	fa 83       	std	Y+2, r31	; 0x02
    curPosition_ += n;
    d0ac:	94 01       	movw	r18, r8
    d0ae:	40 e0       	ldi	r20, 0x00	; 0
    d0b0:	50 e0       	ldi	r21, 0x00	; 0
    d0b2:	ef 81       	ldd	r30, Y+7	; 0x07
    d0b4:	f8 85       	ldd	r31, Y+8	; 0x08
    d0b6:	83 85       	ldd	r24, Z+11	; 0x0b
    d0b8:	94 85       	ldd	r25, Z+12	; 0x0c
    d0ba:	a5 85       	ldd	r26, Z+13	; 0x0d
    d0bc:	b6 85       	ldd	r27, Z+14	; 0x0e
    d0be:	82 0f       	add	r24, r18
    d0c0:	93 1f       	adc	r25, r19
    d0c2:	a4 1f       	adc	r26, r20
    d0c4:	b5 1f       	adc	r27, r21
    d0c6:	83 87       	std	Z+11, r24	; 0x0b
    d0c8:	94 87       	std	Z+12, r25	; 0x0c
    d0ca:	a5 87       	std	Z+13, r26	; 0x0d
    d0cc:	b6 87       	std	Z+14, r27	; 0x0e
    toRead -= n;
    d0ce:	48 18       	sub	r4, r8
    d0d0:	59 08       	sbc	r5, r9
  if (nbyte >= (fileSize_ - curPosition_)) {
    nbyte = fileSize_ - curPosition_;
  }
  // amount left to read
  toRead = nbyte;
  while (toRead > 0) {
    d0d2:	41 14       	cp	r4, r1
    d0d4:	51 04       	cpc	r5, r1
    d0d6:	09 f0       	breq	.+2      	; 0xd0da <_ZN10SdBaseFile4readEPvj+0x278>
    d0d8:	f9 ce       	rjmp	.-526    	; 0xcecc <_ZN10SdBaseFile4readEPvj+0x6a>
    }
    dst += n;
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    d0da:	4d 81       	ldd	r20, Y+5	; 0x05
    d0dc:	5e 81       	ldd	r21, Y+6	; 0x06
    d0de:	02 c0       	rjmp	.+4      	; 0xd0e4 <_ZN10SdBaseFile4readEPvj+0x282>
    d0e0:	4f ef       	ldi	r20, 0xFF	; 255
    d0e2:	5f ef       	ldi	r21, 0xFF	; 255

 fail:
  return -1;
}
    d0e4:	ca 01       	movw	r24, r20
    d0e6:	28 96       	adiw	r28, 0x08	; 8
    d0e8:	cd bf       	out	0x3d, r28	; 61
    d0ea:	de bf       	out	0x3e, r29	; 62
    d0ec:	cf 91       	pop	r28
    d0ee:	df 91       	pop	r29
    d0f0:	1f 91       	pop	r17
    d0f2:	0f 91       	pop	r16
    d0f4:	ff 90       	pop	r15
    d0f6:	ef 90       	pop	r14
    d0f8:	df 90       	pop	r13
    d0fa:	cf 90       	pop	r12
    d0fc:	bf 90       	pop	r11
    d0fe:	af 90       	pop	r10
    d100:	9f 90       	pop	r9
    d102:	8f 90       	pop	r8
    d104:	7f 90       	pop	r7
    d106:	5f 90       	pop	r5
    d108:	4f 90       	pop	r4
    d10a:	3f 90       	pop	r3
    d10c:	2f 90       	pop	r2
    d10e:	08 95       	ret
  if (!isOpen() || !(flags_ & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max bytes left in file
  if (nbyte >= (fileSize_ - curPosition_)) {
    d110:	af 81       	ldd	r26, Y+7	; 0x07
    d112:	b8 85       	ldd	r27, Y+8	; 0x08
    d114:	53 96       	adiw	r26, 0x13	; 19
    d116:	ad 90       	ld	r10, X+
    d118:	bd 90       	ld	r11, X+
    d11a:	cd 90       	ld	r12, X+
    d11c:	dc 90       	ld	r13, X
    d11e:	56 97       	sbiw	r26, 0x16	; 22
    d120:	1b 96       	adiw	r26, 0x0b	; 11
    d122:	ed 90       	ld	r14, X+
    d124:	fd 90       	ld	r15, X+
    d126:	0d 91       	ld	r16, X+
    d128:	1c 91       	ld	r17, X
    d12a:	1e 97       	sbiw	r26, 0x0e	; 14
    d12c:	ed 81       	ldd	r30, Y+5	; 0x05
    d12e:	fe 81       	ldd	r31, Y+6	; 0x06
    d130:	9f 01       	movw	r18, r30
    d132:	40 e0       	ldi	r20, 0x00	; 0
    d134:	50 e0       	ldi	r21, 0x00	; 0
    d136:	d6 01       	movw	r26, r12
    d138:	c5 01       	movw	r24, r10
    d13a:	8e 19       	sub	r24, r14
    d13c:	9f 09       	sbc	r25, r15
    d13e:	a0 0b       	sbc	r26, r16
    d140:	b1 0b       	sbc	r27, r17
    d142:	28 17       	cp	r18, r24
    d144:	39 07       	cpc	r19, r25
    d146:	4a 07       	cpc	r20, r26
    d148:	5b 07       	cpc	r21, r27
    d14a:	08 f0       	brcs	.+2      	; 0xd14e <_ZN10SdBaseFile4readEPvj+0x2ec>
    d14c:	b0 ce       	rjmp	.-672    	; 0xceae <_ZN10SdBaseFile4readEPvj+0x4c>
    d14e:	b4 ce       	rjmp	.-664    	; 0xceb8 <_ZN10SdBaseFile4readEPvj+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    } else if (!USE_MULTI_BLOCK_SD_IO || toRead < 1024) {
    d150:	f0 e0       	ldi	r31, 0x00	; 0
    d152:	4f 16       	cp	r4, r31
    d154:	f4 e0       	ldi	r31, 0x04	; 4
    d156:	5f 06       	cpc	r5, r31
    d158:	08 f0       	brcs	.+2      	; 0xd15c <_ZN10SdBaseFile4readEPvj+0x2fa>
    d15a:	5a cf       	rjmp	.-332    	; 0xd010 <_ZN10SdBaseFile4readEPvj+0x1ae>
    d15c:	48 cf       	rjmp	.-368    	; 0xcfee <_ZN10SdBaseFile4readEPvj+0x18c>

0000d15e <_ZN10SdBaseFile4readEv>:
/** Read the next byte from a file.
 *
 * \return For success read returns the next byte in the file as an int.
 * If an error occurs or end of file is reached -1 is returned.
 */
int16_t SdBaseFile::read() {
    d15e:	df 93       	push	r29
    d160:	cf 93       	push	r28
    d162:	0f 92       	push	r0
    d164:	cd b7       	in	r28, 0x3d	; 61
    d166:	de b7       	in	r29, 0x3e	; 62
  uint8_t b;
  return read(&b, 1) == 1 ? b : -1;
    d168:	be 01       	movw	r22, r28
    d16a:	6f 5f       	subi	r22, 0xFF	; 255
    d16c:	7f 4f       	sbci	r23, 0xFF	; 255
    d16e:	41 e0       	ldi	r20, 0x01	; 1
    d170:	50 e0       	ldi	r21, 0x00	; 0
    d172:	0e 94 31 67 	call	0xce62	; 0xce62 <_ZN10SdBaseFile4readEPvj>
    d176:	01 97       	sbiw	r24, 0x01	; 1
    d178:	19 f0       	breq	.+6      	; 0xd180 <_ZN10SdBaseFile4readEv+0x22>
    d17a:	2f ef       	ldi	r18, 0xFF	; 255
    d17c:	3f ef       	ldi	r19, 0xFF	; 255
    d17e:	03 c0       	rjmp	.+6      	; 0xd186 <_ZN10SdBaseFile4readEv+0x28>
    d180:	89 81       	ldd	r24, Y+1	; 0x01
    d182:	28 2f       	mov	r18, r24
    d184:	30 e0       	ldi	r19, 0x00	; 0
}
    d186:	c9 01       	movw	r24, r18
    d188:	0f 90       	pop	r0
    d18a:	cf 91       	pop	r28
    d18c:	df 91       	pop	r29
    d18e:	08 95       	ret

0000d190 <_ZN10SdBaseFile12readDirCacheEv>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdBaseFile::readDirCache() {
    d190:	ef 92       	push	r14
    d192:	ff 92       	push	r15
    d194:	0f 93       	push	r16
    d196:	1f 93       	push	r17
    d198:	cf 93       	push	r28
    d19a:	df 93       	push	r29
    d19c:	ec 01       	movw	r28, r24
  uint8_t i;
  // error if not directory
  if (!isDir()) {
    d19e:	8b 81       	ldd	r24, Y+3	; 0x03
    d1a0:	82 30       	cpi	r24, 0x02	; 2
    d1a2:	38 f1       	brcs	.+78     	; 0xd1f2 <_ZN10SdBaseFile12readDirCacheEv+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // index of entry in cache
  i = (curPosition_ >> 5) & 0XF;
    d1a4:	eb 84       	ldd	r14, Y+11	; 0x0b
    d1a6:	fc 84       	ldd	r15, Y+12	; 0x0c
    d1a8:	0d 85       	ldd	r16, Y+13	; 0x0d
    d1aa:	1e 85       	ldd	r17, Y+14	; 0x0e

  // use read to locate and cache block
  if (read() < 0) {
    d1ac:	ce 01       	movw	r24, r28
    d1ae:	0e 94 af 68 	call	0xd15e	; 0xd15e <_ZN10SdBaseFile4readEv>
    d1b2:	97 fd       	sbrc	r25, 7
    d1b4:	1e c0       	rjmp	.+60     	; 0xd1f2 <_ZN10SdBaseFile12readDirCacheEv+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // advance to next entry
  curPosition_ += 31;
    d1b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    d1b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    d1ba:	ad 85       	ldd	r26, Y+13	; 0x0d
    d1bc:	be 85       	ldd	r27, Y+14	; 0x0e
    d1be:	4f 96       	adiw	r24, 0x1f	; 31
    d1c0:	a1 1d       	adc	r26, r1
    d1c2:	b1 1d       	adc	r27, r1
    d1c4:	8b 87       	std	Y+11, r24	; 0x0b
    d1c6:	9c 87       	std	Y+12, r25	; 0x0c
    d1c8:	ad 87       	std	Y+13, r26	; 0x0d
    d1ca:	be 87       	std	Y+14, r27	; 0x0e

  // return pointer to entry
  return vol_->cacheAddress()->dir + i;
    d1cc:	25 e0       	ldi	r18, 0x05	; 5
    d1ce:	16 95       	lsr	r17
    d1d0:	07 95       	ror	r16
    d1d2:	f7 94       	ror	r15
    d1d4:	e7 94       	ror	r14
    d1d6:	2a 95       	dec	r18
    d1d8:	d1 f7       	brne	.-12     	; 0xd1ce <_ZN10SdBaseFile12readDirCacheEv+0x3e>
    d1da:	2e 2d       	mov	r18, r14
    d1dc:	30 e0       	ldi	r19, 0x00	; 0
    d1de:	2f 70       	andi	r18, 0x0F	; 15
    d1e0:	30 70       	andi	r19, 0x00	; 0
    d1e2:	95 e0       	ldi	r25, 0x05	; 5
    d1e4:	22 0f       	add	r18, r18
    d1e6:	33 1f       	adc	r19, r19
    d1e8:	9a 95       	dec	r25
    d1ea:	e1 f7       	brne	.-8      	; 0xd1e4 <_ZN10SdBaseFile12readDirCacheEv+0x54>
    d1ec:	25 52       	subi	r18, 0x25	; 37
    d1ee:	3d 4d       	sbci	r19, 0xDD	; 221
    d1f0:	02 c0       	rjmp	.+4      	; 0xd1f6 <_ZN10SdBaseFile12readDirCacheEv+0x66>
    d1f2:	20 e0       	ldi	r18, 0x00	; 0
    d1f4:	30 e0       	ldi	r19, 0x00	; 0

 fail:
  return 0;
}
    d1f6:	c9 01       	movw	r24, r18
    d1f8:	df 91       	pop	r29
    d1fa:	cf 91       	pop	r28
    d1fc:	1f 91       	pop	r17
    d1fe:	0f 91       	pop	r16
    d200:	ff 90       	pop	r15
    d202:	ef 90       	pop	r14
    d204:	08 95       	ret

0000d206 <_ZN10SdBaseFile5rmdirEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is not a directory, is the root
 * directory, is not empty, or an I/O error occurred.
 */
bool SdBaseFile::rmdir() {
    d206:	cf 93       	push	r28
    d208:	df 93       	push	r29
    d20a:	ec 01       	movw	r28, r24
  // must be open subdirectory
  if (!isSubDir()) {
    d20c:	8b 81       	ldd	r24, Y+3	; 0x03
    d20e:	84 30       	cpi	r24, 0x04	; 4
    d210:	71 f5       	brne	.+92     	; 0xd26e <_ZN10SdBaseFile5rmdirEv+0x68>
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    d212:	ce 01       	movw	r24, r28
    d214:	40 e0       	ldi	r20, 0x00	; 0
    d216:	50 e0       	ldi	r21, 0x00	; 0
    d218:	60 e0       	ldi	r22, 0x00	; 0
    d21a:	70 e0       	ldi	r23, 0x00	; 0
    d21c:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    d220:	10 c0       	rjmp	.+32     	; 0xd242 <_ZN10SdBaseFile5rmdirEv+0x3c>
  }
  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    dir_t* p = readDirCache();
    d222:	ce 01       	movw	r24, r28
    d224:	0e 94 c8 68 	call	0xd190	; 0xd190 <_ZN10SdBaseFile12readDirCacheEv>
    d228:	fc 01       	movw	r30, r24
    if (!p) {
    d22a:	00 97       	sbiw	r24, 0x00	; 0
    d22c:	01 f1       	breq	.+64     	; 0xd26e <_ZN10SdBaseFile5rmdirEv+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    d22e:	80 81       	ld	r24, Z
    d230:	88 23       	and	r24, r24
    d232:	a1 f0       	breq	.+40     	; 0xd25c <_ZN10SdBaseFile5rmdirEv+0x56>
    // skip empty slot, '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    d234:	85 3e       	cpi	r24, 0xE5	; 229
    d236:	29 f0       	breq	.+10     	; 0xd242 <_ZN10SdBaseFile5rmdirEv+0x3c>
    d238:	8e 32       	cpi	r24, 0x2E	; 46
    d23a:	19 f0       	breq	.+6      	; 0xd242 <_ZN10SdBaseFile5rmdirEv+0x3c>
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) {
    d23c:	83 85       	ldd	r24, Z+11	; 0x0b
    d23e:	83 ff       	sbrs	r24, 3
    d240:	16 c0       	rjmp	.+44     	; 0xd26e <_ZN10SdBaseFile5rmdirEv+0x68>
    goto fail;
  }
  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    d242:	2b 85       	ldd	r18, Y+11	; 0x0b
    d244:	3c 85       	ldd	r19, Y+12	; 0x0c
    d246:	4d 85       	ldd	r20, Y+13	; 0x0d
    d248:	5e 85       	ldd	r21, Y+14	; 0x0e
    d24a:	8b 89       	ldd	r24, Y+19	; 0x13
    d24c:	9c 89       	ldd	r25, Y+20	; 0x14
    d24e:	ad 89       	ldd	r26, Y+21	; 0x15
    d250:	be 89       	ldd	r27, Y+22	; 0x16
    d252:	28 17       	cp	r18, r24
    d254:	39 07       	cpc	r19, r25
    d256:	4a 07       	cpc	r20, r26
    d258:	5b 07       	cpc	r21, r27
    d25a:	18 f3       	brcs	.-58     	; 0xd222 <_ZN10SdBaseFile5rmdirEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  type_ = FAT_FILE_TYPE_NORMAL;
    d25c:	81 e0       	ldi	r24, 0x01	; 1
    d25e:	8b 83       	std	Y+3, r24	; 0x03
  flags_ |= O_WRITE;
    d260:	89 81       	ldd	r24, Y+1	; 0x01
    d262:	82 60       	ori	r24, 0x02	; 2
    d264:	89 83       	std	Y+1, r24	; 0x01
  return remove();
    d266:	ce 01       	movw	r24, r28
    d268:	0e 94 15 67 	call	0xce2a	; 0xce2a <_ZN10SdBaseFile6removeEv>
    d26c:	01 c0       	rjmp	.+2      	; 0xd270 <_ZN10SdBaseFile5rmdirEv+0x6a>
    d26e:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    d270:	df 91       	pop	r29
    d272:	cf 91       	pop	r28
    d274:	08 95       	ret

0000d276 <_ZN10SdBaseFile4openEPS_jh>:
 * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
 *
 * See open() by path for definition of flags.
 * \return true for success or false for failure.
 */
bool SdBaseFile::open(SdBaseFile* dirFile, uint16_t index, uint8_t oflag) {
    d276:	df 92       	push	r13
    d278:	ef 92       	push	r14
    d27a:	ff 92       	push	r15
    d27c:	0f 93       	push	r16
    d27e:	1f 93       	push	r17
    d280:	cf 93       	push	r28
    d282:	df 93       	push	r29
    d284:	8c 01       	movw	r16, r24
    d286:	eb 01       	movw	r28, r22
    d288:	7a 01       	movw	r14, r20
    d28a:	d2 2e       	mov	r13, r18
  dir_t* p;

  vol_ = dirFile->vol_;
    d28c:	8d 81       	ldd	r24, Y+5	; 0x05
    d28e:	9e 81       	ldd	r25, Y+6	; 0x06
    d290:	f8 01       	movw	r30, r16
    d292:	85 83       	std	Z+5, r24	; 0x05
    d294:	96 83       	std	Z+6, r25	; 0x06

  // error if already open
  if (isOpen() || !dirFile) {
    d296:	83 81       	ldd	r24, Z+3	; 0x03
    d298:	88 23       	and	r24, r24
    d29a:	29 f5       	brne	.+74     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
    d29c:	61 15       	cp	r22, r1
    d29e:	71 05       	cpc	r23, r1
    d2a0:	59 f5       	brne	.+86     	; 0xd2f8 <_ZN10SdBaseFile4openEPS_jh+0x82>
    d2a2:	21 c0       	rjmp	.+66     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) {
    d2a4:	a7 01       	movw	r20, r14
    d2a6:	65 e0       	ldi	r22, 0x05	; 5
    d2a8:	44 0f       	add	r20, r20
    d2aa:	55 1f       	adc	r21, r21
    d2ac:	6a 95       	dec	r22
    d2ae:	e1 f7       	brne	.-8      	; 0xd2a8 <_ZN10SdBaseFile4openEPS_jh+0x32>
    d2b0:	60 e0       	ldi	r22, 0x00	; 0
    d2b2:	70 e0       	ldi	r23, 0x00	; 0
    d2b4:	ce 01       	movw	r24, r28
    d2b6:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    d2ba:	88 23       	and	r24, r24
    d2bc:	a1 f0       	breq	.+40     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read entry into cache
  p = dirFile->readDirCache();
    d2be:	ce 01       	movw	r24, r28
    d2c0:	0e 94 c8 68 	call	0xd190	; 0xd190 <_ZN10SdBaseFile12readDirCacheEv>
    d2c4:	fc 01       	movw	r30, r24
  if (!p) {
    d2c6:	00 97       	sbiw	r24, 0x00	; 0
    d2c8:	71 f0       	breq	.+28     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
    d2ca:	80 81       	ld	r24, Z
    d2cc:	88 23       	and	r24, r24
    d2ce:	59 f0       	breq	.+22     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
    d2d0:	85 3e       	cpi	r24, 0xE5	; 229
    d2d2:	49 f0       	breq	.+18     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
    d2d4:	8e 32       	cpi	r24, 0x2E	; 46
    d2d6:	39 f0       	breq	.+14     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
    d2d8:	6e 2d       	mov	r22, r14
    d2da:	6f 70       	andi	r22, 0x0F	; 15
    d2dc:	c8 01       	movw	r24, r16
    d2de:	4d 2d       	mov	r20, r13
    d2e0:	0e 94 87 66 	call	0xcd0e	; 0xcd0e <_ZN10SdBaseFile15openCachedEntryEhh>
    d2e4:	01 c0       	rjmp	.+2      	; 0xd2e8 <_ZN10SdBaseFile4openEPS_jh+0x72>
    d2e6:	80 e0       	ldi	r24, 0x00	; 0

 fail:

  return false;
}
    d2e8:	df 91       	pop	r29
    d2ea:	cf 91       	pop	r28
    d2ec:	1f 91       	pop	r17
    d2ee:	0f 91       	pop	r16
    d2f0:	ff 90       	pop	r15
    d2f2:	ef 90       	pop	r14
    d2f4:	df 90       	pop	r13
    d2f6:	08 95       	ret
    DBG_FAIL_MACRO;
    goto fail;
  }

  // don't open existing file if O_EXCL - user call error
  if (oflag & O_EXCL) {
    d2f8:	27 ff       	sbrs	r18, 7
    d2fa:	d4 cf       	rjmp	.-88     	; 0xd2a4 <_ZN10SdBaseFile4openEPS_jh+0x2e>
    d2fc:	f4 cf       	rjmp	.-24     	; 0xd2e6 <_ZN10SdBaseFile4openEPS_jh+0x70>

0000d2fe <_ZN10SdBaseFile8rmRfStarEv>:
 * a directory that has a long name.  See remove() and rmdir().
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdBaseFile::rmRfStar() {
    d2fe:	af 92       	push	r10
    d300:	bf 92       	push	r11
    d302:	cf 92       	push	r12
    d304:	df 92       	push	r13
    d306:	ef 92       	push	r14
    d308:	ff 92       	push	r15
    d30a:	0f 93       	push	r16
    d30c:	1f 93       	push	r17
    d30e:	df 93       	push	r29
    d310:	cf 93       	push	r28
    d312:	cd b7       	in	r28, 0x3d	; 61
    d314:	de b7       	in	r29, 0x3e	; 62
    d316:	6b 97       	sbiw	r28, 0x1b	; 27
    d318:	cd bf       	out	0x3d, r28	; 61
    d31a:	de bf       	out	0x3e, r29	; 62
    d31c:	8c 01       	movw	r16, r24
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    d31e:	19 82       	std	Y+1, r1	; 0x01
    d320:	1c 82       	std	Y+4, r1	; 0x04
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    d322:	40 e0       	ldi	r20, 0x00	; 0
    d324:	50 e0       	ldi	r21, 0x00	; 0
    d326:	60 e0       	ldi	r22, 0x00	; 0
    d328:	70 e0       	ldi	r23, 0x00	; 0
    d32a:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    if (!f.open(this, index, O_READ)) {
    d32e:	5e 01       	movw	r10, r28
    d330:	08 94       	sec
    d332:	a1 1c       	adc	r10, r1
    d334:	b1 1c       	adc	r11, r1
    d336:	52 c0       	rjmp	.+164    	; 0xd3dc <_ZN10SdBaseFile8rmRfStarEv+0xde>
  rewind();
  while (curPosition_ < fileSize_) {
    // remember position
    index = curPosition_/32;

    dir_t* p = readDirCache();
    d338:	c8 01       	movw	r24, r16
    d33a:	0e 94 c8 68 	call	0xd190	; 0xd190 <_ZN10SdBaseFile12readDirCacheEv>
    d33e:	fc 01       	movw	r30, r24
    if (!p) {
    d340:	00 97       	sbiw	r24, 0x00	; 0
    d342:	09 f4       	brne	.+2      	; 0xd346 <_ZN10SdBaseFile8rmRfStarEv+0x48>
    d344:	66 c0       	rjmp	.+204    	; 0xd412 <_ZN10SdBaseFile8rmRfStarEv+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last entry
    if (p->name[0] == DIR_NAME_FREE) break;
    d346:	80 81       	ld	r24, Z
    d348:	88 23       	and	r24, r24
    d34a:	09 f4       	brne	.+2      	; 0xd34e <_ZN10SdBaseFile8rmRfStarEv+0x50>
    d34c:	56 c0       	rjmp	.+172    	; 0xd3fa <_ZN10SdBaseFile8rmRfStarEv+0xfc>

    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    d34e:	85 3e       	cpi	r24, 0xE5	; 229
    d350:	09 f4       	brne	.+2      	; 0xd354 <_ZN10SdBaseFile8rmRfStarEv+0x56>
    d352:	44 c0       	rjmp	.+136    	; 0xd3dc <_ZN10SdBaseFile8rmRfStarEv+0xde>
    d354:	8e 32       	cpi	r24, 0x2E	; 46
    d356:	09 f4       	brne	.+2      	; 0xd35a <_ZN10SdBaseFile8rmRfStarEv+0x5c>
    d358:	41 c0       	rjmp	.+130    	; 0xd3dc <_ZN10SdBaseFile8rmRfStarEv+0xde>

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    d35a:	83 85       	ldd	r24, Z+11	; 0x0b
    d35c:	83 fd       	sbrc	r24, 3
    d35e:	3e c0       	rjmp	.+124    	; 0xd3dc <_ZN10SdBaseFile8rmRfStarEv+0xde>
  uint16_t index;
  SdBaseFile f;
  rewind();
  while (curPosition_ < fileSize_) {
    // remember position
    index = curPosition_/32;
    d360:	a7 01       	movw	r20, r14
    d362:	96 01       	movw	r18, r12
    d364:	f5 e0       	ldi	r31, 0x05	; 5
    d366:	56 95       	lsr	r21
    d368:	47 95       	ror	r20
    d36a:	37 95       	ror	r19
    d36c:	27 95       	ror	r18
    d36e:	fa 95       	dec	r31
    d370:	d1 f7       	brne	.-12     	; 0xd366 <_ZN10SdBaseFile8rmRfStarEv+0x68>
    d372:	79 01       	movw	r14, r18
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;

    if (!f.open(this, index, O_READ)) {
    d374:	c5 01       	movw	r24, r10
    d376:	b8 01       	movw	r22, r16
    d378:	a9 01       	movw	r20, r18
    d37a:	21 e0       	ldi	r18, 0x01	; 1
    d37c:	0e 94 3b 69 	call	0xd276	; 0xd276 <_ZN10SdBaseFile4openEPS_jh>
    d380:	88 23       	and	r24, r24
    d382:	09 f4       	brne	.+2      	; 0xd386 <_ZN10SdBaseFile8rmRfStarEv+0x88>
    d384:	46 c0       	rjmp	.+140    	; 0xd412 <_ZN10SdBaseFile8rmRfStarEv+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f.isSubDir()) {
    d386:	8c 81       	ldd	r24, Y+4	; 0x04
    d388:	84 30       	cpi	r24, 0x04	; 4
    d38a:	21 f4       	brne	.+8      	; 0xd394 <_ZN10SdBaseFile8rmRfStarEv+0x96>
      // recursively delete
      if (!f.rmRfStar()) {
    d38c:	c5 01       	movw	r24, r10
    d38e:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <_ZN10SdBaseFile8rmRfStarEv>
    d392:	06 c0       	rjmp	.+12     	; 0xd3a0 <_ZN10SdBaseFile8rmRfStarEv+0xa2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      // ignore read-only
      f.flags_ |= O_WRITE;
    d394:	8a 81       	ldd	r24, Y+2	; 0x02
    d396:	82 60       	ori	r24, 0x02	; 2
    d398:	8a 83       	std	Y+2, r24	; 0x02
      if (!f.remove()) {
    d39a:	c5 01       	movw	r24, r10
    d39c:	0e 94 15 67 	call	0xce2a	; 0xce2a <_ZN10SdBaseFile6removeEv>
    d3a0:	88 23       	and	r24, r24
    d3a2:	b9 f1       	breq	.+110    	; 0xd412 <_ZN10SdBaseFile8rmRfStarEv+0x114>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    // position to next entry if required
    if (curPosition_ != (32UL*(index + 1))) {
    d3a4:	08 94       	sec
    d3a6:	e1 1c       	adc	r14, r1
    d3a8:	f1 1c       	adc	r15, r1
    d3aa:	a7 01       	movw	r20, r14
    d3ac:	60 e0       	ldi	r22, 0x00	; 0
    d3ae:	70 e0       	ldi	r23, 0x00	; 0
    d3b0:	e5 e0       	ldi	r30, 0x05	; 5
    d3b2:	44 0f       	add	r20, r20
    d3b4:	55 1f       	adc	r21, r21
    d3b6:	66 1f       	adc	r22, r22
    d3b8:	77 1f       	adc	r23, r23
    d3ba:	ea 95       	dec	r30
    d3bc:	d1 f7       	brne	.-12     	; 0xd3b2 <_ZN10SdBaseFile8rmRfStarEv+0xb4>
    d3be:	f8 01       	movw	r30, r16
    d3c0:	83 85       	ldd	r24, Z+11	; 0x0b
    d3c2:	94 85       	ldd	r25, Z+12	; 0x0c
    d3c4:	a5 85       	ldd	r26, Z+13	; 0x0d
    d3c6:	b6 85       	ldd	r27, Z+14	; 0x0e
    d3c8:	84 17       	cp	r24, r20
    d3ca:	95 07       	cpc	r25, r21
    d3cc:	a6 07       	cpc	r26, r22
    d3ce:	b7 07       	cpc	r27, r23
    d3d0:	29 f0       	breq	.+10     	; 0xd3dc <_ZN10SdBaseFile8rmRfStarEv+0xde>
      if (!seekSet(32UL*(index + 1))) {
    d3d2:	c8 01       	movw	r24, r16
    d3d4:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    d3d8:	88 23       	and	r24, r24
    d3da:	d9 f0       	breq	.+54     	; 0xd412 <_ZN10SdBaseFile8rmRfStarEv+0x114>
 */
bool SdBaseFile::rmRfStar() {
  uint16_t index;
  SdBaseFile f;
  rewind();
  while (curPosition_ < fileSize_) {
    d3dc:	f8 01       	movw	r30, r16
    d3de:	c3 84       	ldd	r12, Z+11	; 0x0b
    d3e0:	d4 84       	ldd	r13, Z+12	; 0x0c
    d3e2:	e5 84       	ldd	r14, Z+13	; 0x0d
    d3e4:	f6 84       	ldd	r15, Z+14	; 0x0e
    d3e6:	83 89       	ldd	r24, Z+19	; 0x13
    d3e8:	94 89       	ldd	r25, Z+20	; 0x14
    d3ea:	a5 89       	ldd	r26, Z+21	; 0x15
    d3ec:	b6 89       	ldd	r27, Z+22	; 0x16
    d3ee:	c8 16       	cp	r12, r24
    d3f0:	d9 06       	cpc	r13, r25
    d3f2:	ea 06       	cpc	r14, r26
    d3f4:	fb 06       	cpc	r15, r27
    d3f6:	08 f4       	brcc	.+2      	; 0xd3fa <_ZN10SdBaseFile8rmRfStarEv+0xfc>
    d3f8:	9f cf       	rjmp	.-194    	; 0xd338 <_ZN10SdBaseFile8rmRfStarEv+0x3a>
        goto fail;
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    d3fa:	f8 01       	movw	r30, r16
    d3fc:	83 81       	ldd	r24, Z+3	; 0x03
    d3fe:	82 50       	subi	r24, 0x02	; 2
    d400:	82 30       	cpi	r24, 0x02	; 2
    d402:	28 f0       	brcs	.+10     	; 0xd40e <_ZN10SdBaseFile8rmRfStarEv+0x110>
    if (!rmdir()) {
    d404:	c8 01       	movw	r24, r16
    d406:	0e 94 03 69 	call	0xd206	; 0xd206 <_ZN10SdBaseFile5rmdirEv>
    d40a:	88 23       	and	r24, r24
    d40c:	19 f0       	breq	.+6      	; 0xd414 <_ZN10SdBaseFile8rmRfStarEv+0x116>
    d40e:	81 e0       	ldi	r24, 0x01	; 1
    d410:	01 c0       	rjmp	.+2      	; 0xd414 <_ZN10SdBaseFile8rmRfStarEv+0x116>
      DBG_FAIL_MACRO;
      goto fail;
    d412:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    d414:	6b 96       	adiw	r28, 0x1b	; 27
    d416:	cd bf       	out	0x3d, r28	; 61
    d418:	de bf       	out	0x3e, r29	; 62
    d41a:	cf 91       	pop	r28
    d41c:	df 91       	pop	r29
    d41e:	1f 91       	pop	r17
    d420:	0f 91       	pop	r16
    d422:	ff 90       	pop	r15
    d424:	ef 90       	pop	r14
    d426:	df 90       	pop	r13
    d428:	cf 90       	pop	r12
    d42a:	bf 90       	pop	r11
    d42c:	af 90       	pop	r10
    d42e:	08 95       	ret

0000d430 <_ZL7print2uP5Printh>:
    w++;
  }
}
//------------------------------------------------------------------------------
// print uint8_t with width 2
static void print2u(Print* pr, uint8_t v) {
    d430:	1f 93       	push	r17
    d432:	cf 93       	push	r28
    d434:	df 93       	push	r29
    d436:	ec 01       	movw	r28, r24
    d438:	16 2f       	mov	r17, r22
  if (v < 10) pr->write('0');
    d43a:	6a 30       	cpi	r22, 0x0A	; 10
    d43c:	38 f4       	brcc	.+14     	; 0xd44c <_ZL7print2uP5Printh+0x1c>
    d43e:	e8 81       	ld	r30, Y
    d440:	f9 81       	ldd	r31, Y+1	; 0x01
    d442:	01 90       	ld	r0, Z+
    d444:	f0 81       	ld	r31, Z
    d446:	e0 2d       	mov	r30, r0
    d448:	60 e3       	ldi	r22, 0x30	; 48
    d44a:	19 95       	eicall
  pr->print(v, DEC);
    d44c:	ce 01       	movw	r24, r28
    d44e:	61 2f       	mov	r22, r17
    d450:	4a e0       	ldi	r20, 0x0A	; 10
    d452:	50 e0       	ldi	r21, 0x00	; 0
    d454:	0e 94 76 5e 	call	0xbcec	; 0xbcec <_ZN5Print5printEhi>
}
    d458:	df 91       	pop	r29
    d45a:	cf 91       	pop	r28
    d45c:	1f 91       	pop	r17
    d45e:	08 95       	ret

0000d460 <_ZN10SdBaseFile12printFatTimeEP5Printj>:
 * Format is hh:mm:ss.
 *
 * \param[in] pr Print stream for output.
 * \param[in] fatTime The time field from a directory entry.
 */
void SdBaseFile::printFatTime(Print* pr, uint16_t fatTime) {
    d460:	ef 92       	push	r14
    d462:	ff 92       	push	r15
    d464:	0f 93       	push	r16
    d466:	1f 93       	push	r17
    d468:	8c 01       	movw	r16, r24
    d46a:	7b 01       	movw	r14, r22
  print2u(pr, FAT_HOUR(fatTime));
    d46c:	6f 2d       	mov	r22, r15
    d46e:	66 95       	lsr	r22
    d470:	66 95       	lsr	r22
    d472:	66 95       	lsr	r22
    d474:	0e 94 18 6a 	call	0xd430	; 0xd430 <_ZL7print2uP5Printh>
  pr->write(':');
    d478:	d8 01       	movw	r26, r16
    d47a:	ed 91       	ld	r30, X+
    d47c:	fc 91       	ld	r31, X
    d47e:	01 90       	ld	r0, Z+
    d480:	f0 81       	ld	r31, Z
    d482:	e0 2d       	mov	r30, r0
    d484:	c8 01       	movw	r24, r16
    d486:	6a e3       	ldi	r22, 0x3A	; 58
    d488:	19 95       	eicall
  print2u(pr, FAT_MINUTE(fatTime));
    d48a:	b7 01       	movw	r22, r14
    d48c:	a5 e0       	ldi	r26, 0x05	; 5
    d48e:	76 95       	lsr	r23
    d490:	67 95       	ror	r22
    d492:	aa 95       	dec	r26
    d494:	e1 f7       	brne	.-8      	; 0xd48e <_ZN10SdBaseFile12printFatTimeEP5Printj+0x2e>
    d496:	6f 73       	andi	r22, 0x3F	; 63
    d498:	c8 01       	movw	r24, r16
    d49a:	0e 94 18 6a 	call	0xd430	; 0xd430 <_ZL7print2uP5Printh>
  pr->write(':');
    d49e:	d8 01       	movw	r26, r16
    d4a0:	ed 91       	ld	r30, X+
    d4a2:	fc 91       	ld	r31, X
    d4a4:	01 90       	ld	r0, Z+
    d4a6:	f0 81       	ld	r31, Z
    d4a8:	e0 2d       	mov	r30, r0
    d4aa:	c8 01       	movw	r24, r16
    d4ac:	6a e3       	ldi	r22, 0x3A	; 58
    d4ae:	19 95       	eicall
  print2u(pr, FAT_SECOND(fatTime));
    d4b0:	bf e1       	ldi	r27, 0x1F	; 31
    d4b2:	eb 22       	and	r14, r27
    d4b4:	ff 24       	eor	r15, r15
    d4b6:	ee 0c       	add	r14, r14
    d4b8:	ff 1c       	adc	r15, r15
    d4ba:	c8 01       	movw	r24, r16
    d4bc:	6e 2d       	mov	r22, r14
    d4be:	0e 94 18 6a 	call	0xd430	; 0xd430 <_ZL7print2uP5Printh>
}
    d4c2:	1f 91       	pop	r17
    d4c4:	0f 91       	pop	r16
    d4c6:	ff 90       	pop	r15
    d4c8:	ef 90       	pop	r14
    d4ca:	08 95       	ret

0000d4cc <_ZN10SdBaseFile12printFatDateEP5Printj>:
 *  Format is yyyy-mm-dd.
 *
 * \param[in] pr Print stream for output.
 * \param[in] fatDate The date field from a directory entry.
 */
void SdBaseFile::printFatDate(Print* pr, uint16_t fatDate) {
    d4cc:	ef 92       	push	r14
    d4ce:	ff 92       	push	r15
    d4d0:	0f 93       	push	r16
    d4d2:	1f 93       	push	r17
    d4d4:	8c 01       	movw	r16, r24
    d4d6:	7b 01       	movw	r14, r22
  pr->print(FAT_YEAR(fatDate));
    d4d8:	67 2f       	mov	r22, r23
    d4da:	77 27       	eor	r23, r23
    d4dc:	66 95       	lsr	r22
    d4de:	64 54       	subi	r22, 0x44	; 68
    d4e0:	78 4f       	sbci	r23, 0xF8	; 248
    d4e2:	c8 01       	movw	r24, r16
    d4e4:	4a e0       	ldi	r20, 0x0A	; 10
    d4e6:	50 e0       	ldi	r21, 0x00	; 0
    d4e8:	0e 94 65 5e 	call	0xbcca	; 0xbcca <_ZN5Print5printEji>
  pr->write('-');
    d4ec:	d8 01       	movw	r26, r16
    d4ee:	ed 91       	ld	r30, X+
    d4f0:	fc 91       	ld	r31, X
    d4f2:	01 90       	ld	r0, Z+
    d4f4:	f0 81       	ld	r31, Z
    d4f6:	e0 2d       	mov	r30, r0
    d4f8:	c8 01       	movw	r24, r16
    d4fa:	6d e2       	ldi	r22, 0x2D	; 45
    d4fc:	19 95       	eicall
  print2u(pr, FAT_MONTH(fatDate));
    d4fe:	b7 01       	movw	r22, r14
    d500:	b5 e0       	ldi	r27, 0x05	; 5
    d502:	76 95       	lsr	r23
    d504:	67 95       	ror	r22
    d506:	ba 95       	dec	r27
    d508:	e1 f7       	brne	.-8      	; 0xd502 <_ZN10SdBaseFile12printFatDateEP5Printj+0x36>
    d50a:	6f 70       	andi	r22, 0x0F	; 15
    d50c:	c8 01       	movw	r24, r16
    d50e:	0e 94 18 6a 	call	0xd430	; 0xd430 <_ZL7print2uP5Printh>
  pr->write('-');
    d512:	d8 01       	movw	r26, r16
    d514:	ed 91       	ld	r30, X+
    d516:	fc 91       	ld	r31, X
    d518:	01 90       	ld	r0, Z+
    d51a:	f0 81       	ld	r31, Z
    d51c:	e0 2d       	mov	r30, r0
    d51e:	c8 01       	movw	r24, r16
    d520:	6d e2       	ldi	r22, 0x2D	; 45
    d522:	19 95       	eicall
  print2u(pr, FAT_DAY(fatDate));
    d524:	bf e1       	ldi	r27, 0x1F	; 31
    d526:	eb 22       	and	r14, r27
    d528:	c8 01       	movw	r24, r16
    d52a:	6e 2d       	mov	r22, r14
    d52c:	0e 94 18 6a 	call	0xd430	; 0xd430 <_ZL7print2uP5Printh>
}
    d530:	1f 91       	pop	r17
    d532:	0f 91       	pop	r16
    d534:	ff 90       	pop	r15
    d536:	ef 90       	pop	r14
    d538:	08 95       	ret

0000d53a <_ZN10SdBaseFile11lsPrintNextEP5Printhh>:
  }
}
//------------------------------------------------------------------------------
// saves 32 bytes on stack for ls recursion
// return 0 - EOF, 1 - normal file, or 2 - directory
int8_t SdBaseFile::lsPrintNext(Print *pr, uint8_t flags, uint8_t indent) {
    d53a:	7f 92       	push	r7
    d53c:	8f 92       	push	r8
    d53e:	9f 92       	push	r9
    d540:	af 92       	push	r10
    d542:	bf 92       	push	r11
    d544:	cf 92       	push	r12
    d546:	df 92       	push	r13
    d548:	ef 92       	push	r14
    d54a:	ff 92       	push	r15
    d54c:	0f 93       	push	r16
    d54e:	1f 93       	push	r17
    d550:	df 93       	push	r29
    d552:	cf 93       	push	r28
    d554:	cd b7       	in	r28, 0x3d	; 61
    d556:	de b7       	in	r29, 0x3e	; 62
    d558:	a0 97       	sbiw	r28, 0x20	; 32
    d55a:	cd bf       	out	0x3d, r28	; 61
    d55c:	de bf       	out	0x3e, r29	; 62
    d55e:	7c 01       	movw	r14, r24
    d560:	8b 01       	movw	r16, r22
    d562:	74 2e       	mov	r7, r20
    d564:	b2 2e       	mov	r11, r18
  dir_t dir;
  uint8_t w = 0;

  while (1) {
    if (read(&dir, sizeof(dir)) != sizeof(dir)) return 0;
    d566:	6e 01       	movw	r12, r28
    d568:	08 94       	sec
    d56a:	c1 1c       	adc	r12, r1
    d56c:	d1 1c       	adc	r13, r1
    d56e:	c7 01       	movw	r24, r14
    d570:	b6 01       	movw	r22, r12
    d572:	40 e2       	ldi	r20, 0x20	; 32
    d574:	50 e0       	ldi	r21, 0x00	; 0
    d576:	0e 94 31 67 	call	0xce62	; 0xce62 <_ZN10SdBaseFile4readEPvj>
    d57a:	80 97       	sbiw	r24, 0x20	; 32
    d57c:	09 f0       	breq	.+2      	; 0xd580 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x46>
    d57e:	aa c0       	rjmp	.+340    	; 0xd6d4 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x19a>
    if (dir.name[0] == DIR_NAME_FREE) return 0;
    d580:	89 81       	ldd	r24, Y+1	; 0x01
    d582:	88 23       	and	r24, r24
    d584:	09 f4       	brne	.+2      	; 0xd588 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x4e>
    d586:	a6 c0       	rjmp	.+332    	; 0xd6d4 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x19a>

    // skip deleted entry and entries for . and  ..
    if (dir.name[0] != DIR_NAME_DELETED && dir.name[0] != '.'
    d588:	85 3e       	cpi	r24, 0xE5	; 229
    d58a:	89 f3       	breq	.-30     	; 0xd56e <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x34>
    d58c:	8e 32       	cpi	r24, 0x2E	; 46
    d58e:	79 f3       	breq	.-34     	; 0xd56e <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x34>
    d590:	8c 85       	ldd	r24, Y+12	; 0x0c
    d592:	83 fd       	sbrc	r24, 3
    d594:	ec cf       	rjmp	.-40     	; 0xd56e <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x34>
    d596:	ff 24       	eor	r15, r15
    d598:	0a c0       	rjmp	.+20     	; 0xd5ae <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x74>
      && DIR_IS_FILE_OR_SUBDIR(&dir)) break;
  }
  // indent for dir level
  for (uint8_t i = 0; i < indent; i++) pr->write(' ');
    d59a:	d8 01       	movw	r26, r16
    d59c:	ed 91       	ld	r30, X+
    d59e:	fc 91       	ld	r31, X
    d5a0:	01 90       	ld	r0, Z+
    d5a2:	f0 81       	ld	r31, Z
    d5a4:	e0 2d       	mov	r30, r0
    d5a6:	c8 01       	movw	r24, r16
    d5a8:	60 e2       	ldi	r22, 0x20	; 32
    d5aa:	19 95       	eicall
    d5ac:	f3 94       	inc	r15
    d5ae:	fb 14       	cp	r15, r11
    d5b0:	a0 f3       	brcs	.-24     	; 0xd59a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x60>
    d5b2:	5e 01       	movw	r10, r28
    d5b4:	08 94       	sec
    d5b6:	a1 1c       	adc	r10, r1
    d5b8:	b1 1c       	adc	r11, r1
    d5ba:	75 01       	movw	r14, r10
    d5bc:	dd 24       	eor	r13, r13

  // print name
  for (uint8_t i = 0; i < 11; i++) {
    d5be:	9c e0       	ldi	r25, 0x0C	; 12
    d5c0:	89 2e       	mov	r8, r25
    d5c2:	91 2c       	mov	r9, r1
    d5c4:	8c 0e       	add	r8, r28
    d5c6:	9d 1e       	adc	r9, r29
    if (dir.name[i] == ' ')continue;
    d5c8:	f7 01       	movw	r30, r14
    d5ca:	80 81       	ld	r24, Z
    d5cc:	80 32       	cpi	r24, 0x20	; 32
    d5ce:	c9 f0       	breq	.+50     	; 0xd602 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xc8>
    if (i == 8) {
    d5d0:	8e 2d       	mov	r24, r14
    d5d2:	8a 19       	sub	r24, r10
    d5d4:	88 30       	cpi	r24, 0x08	; 8
    d5d6:	51 f4       	brne	.+20     	; 0xd5ec <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xb2>
      pr->write('.');
    d5d8:	d8 01       	movw	r26, r16
    d5da:	ed 91       	ld	r30, X+
    d5dc:	fc 91       	ld	r31, X
    d5de:	01 90       	ld	r0, Z+
    d5e0:	f0 81       	ld	r31, Z
    d5e2:	e0 2d       	mov	r30, r0
    d5e4:	c8 01       	movw	r24, r16
    d5e6:	6e e2       	ldi	r22, 0x2E	; 46
    d5e8:	19 95       	eicall
      w++;
    d5ea:	d3 94       	inc	r13
    }
    pr->write(dir.name[i]);
    d5ec:	d8 01       	movw	r26, r16
    d5ee:	ed 91       	ld	r30, X+
    d5f0:	fc 91       	ld	r31, X
    d5f2:	01 90       	ld	r0, Z+
    d5f4:	f0 81       	ld	r31, Z
    d5f6:	e0 2d       	mov	r30, r0
    d5f8:	c8 01       	movw	r24, r16
    d5fa:	d7 01       	movw	r26, r14
    d5fc:	6c 91       	ld	r22, X
    d5fe:	19 95       	eicall
    w++;
    d600:	d3 94       	inc	r13
    d602:	08 94       	sec
    d604:	e1 1c       	adc	r14, r1
    d606:	f1 1c       	adc	r15, r1
  }
  // indent for dir level
  for (uint8_t i = 0; i < indent; i++) pr->write(' ');

  // print name
  for (uint8_t i = 0; i < 11; i++) {
    d608:	e8 14       	cp	r14, r8
    d60a:	f9 04       	cpc	r15, r9
    d60c:	e9 f6       	brne	.-70     	; 0xd5c8 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x8e>
      w++;
    }
    pr->write(dir.name[i]);
    w++;
  }
  if (DIR_IS_SUBDIR(&dir)) {
    d60e:	8c 85       	ldd	r24, Y+12	; 0x0c
    d610:	88 71       	andi	r24, 0x18	; 24
    d612:	80 31       	cpi	r24, 0x10	; 16
    d614:	51 f4       	brne	.+20     	; 0xd62a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0xf0>
    pr->write('/');
    d616:	d8 01       	movw	r26, r16
    d618:	ed 91       	ld	r30, X+
    d61a:	fc 91       	ld	r31, X
    d61c:	01 90       	ld	r0, Z+
    d61e:	f0 81       	ld	r31, Z
    d620:	e0 2d       	mov	r30, r0
    d622:	c8 01       	movw	r24, r16
    d624:	6f e2       	ldi	r22, 0x2F	; 47
    d626:	19 95       	eicall
    w++;
    d628:	d3 94       	inc	r13
  }
  if (flags & (LS_DATE | LS_SIZE)) {
    d62a:	e7 2c       	mov	r14, r7
    d62c:	ff 24       	eor	r15, r15
    d62e:	c7 01       	movw	r24, r14
    d630:	83 70       	andi	r24, 0x03	; 3
    d632:	90 70       	andi	r25, 0x00	; 0
    d634:	89 2b       	or	r24, r25
    d636:	59 f4       	brne	.+22     	; 0xd64e <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x114>
    d638:	0d c0       	rjmp	.+26     	; 0xd654 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x11a>
    while (w++ < 14) pr->write(' ');
    d63a:	d8 01       	movw	r26, r16
    d63c:	ed 91       	ld	r30, X+
    d63e:	fc 91       	ld	r31, X
    d640:	01 90       	ld	r0, Z+
    d642:	f0 81       	ld	r31, Z
    d644:	e0 2d       	mov	r30, r0
    d646:	c8 01       	movw	r24, r16
    d648:	60 e2       	ldi	r22, 0x20	; 32
    d64a:	19 95       	eicall
    d64c:	d3 94       	inc	r13
    d64e:	bd e0       	ldi	r27, 0x0D	; 13
    d650:	bd 15       	cp	r27, r13
    d652:	98 f7       	brcc	.-26     	; 0xd63a <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x100>
  }
  // print modify date/time if requested
  if (flags & LS_DATE) {
    d654:	e0 fe       	sbrs	r14, 0
    d656:	1c c0       	rjmp	.+56     	; 0xd690 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x156>
    pr->write(' ');
    d658:	d8 01       	movw	r26, r16
    d65a:	ed 91       	ld	r30, X+
    d65c:	fc 91       	ld	r31, X
    d65e:	01 90       	ld	r0, Z+
    d660:	f0 81       	ld	r31, Z
    d662:	e0 2d       	mov	r30, r0
    d664:	c8 01       	movw	r24, r16
    d666:	60 e2       	ldi	r22, 0x20	; 32
    d668:	19 95       	eicall
    printFatDate(pr, dir.lastWriteDate);
    d66a:	69 8d       	ldd	r22, Y+25	; 0x19
    d66c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    d66e:	c8 01       	movw	r24, r16
    d670:	0e 94 66 6a 	call	0xd4cc	; 0xd4cc <_ZN10SdBaseFile12printFatDateEP5Printj>
    pr->write(' ');
    d674:	d8 01       	movw	r26, r16
    d676:	ed 91       	ld	r30, X+
    d678:	fc 91       	ld	r31, X
    d67a:	01 90       	ld	r0, Z+
    d67c:	f0 81       	ld	r31, Z
    d67e:	e0 2d       	mov	r30, r0
    d680:	c8 01       	movw	r24, r16
    d682:	60 e2       	ldi	r22, 0x20	; 32
    d684:	19 95       	eicall
    printFatTime(pr, dir.lastWriteTime);
    d686:	6f 89       	ldd	r22, Y+23	; 0x17
    d688:	78 8d       	ldd	r23, Y+24	; 0x18
    d68a:	c8 01       	movw	r24, r16
    d68c:	0e 94 30 6a 	call	0xd460	; 0xd460 <_ZN10SdBaseFile12printFatTimeEP5Printj>
  }
  // print size if requested
  if (!DIR_IS_SUBDIR(&dir) && (flags & LS_SIZE)) {
    d690:	8c 85       	ldd	r24, Y+12	; 0x0c
    d692:	88 71       	andi	r24, 0x18	; 24
    d694:	80 31       	cpi	r24, 0x10	; 16
    d696:	a1 f0       	breq	.+40     	; 0xd6c0 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x186>
    d698:	e1 fe       	sbrs	r14, 1
    d69a:	12 c0       	rjmp	.+36     	; 0xd6c0 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x186>
    pr->write(' ');
    d69c:	d8 01       	movw	r26, r16
    d69e:	ed 91       	ld	r30, X+
    d6a0:	fc 91       	ld	r31, X
    d6a2:	01 90       	ld	r0, Z+
    d6a4:	f0 81       	ld	r31, Z
    d6a6:	e0 2d       	mov	r30, r0
    d6a8:	c8 01       	movw	r24, r16
    d6aa:	60 e2       	ldi	r22, 0x20	; 32
    d6ac:	19 95       	eicall
    pr->print(dir.fileSize);
    d6ae:	4d 8d       	ldd	r20, Y+29	; 0x1d
    d6b0:	5e 8d       	ldd	r21, Y+30	; 0x1e
    d6b2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    d6b4:	78 a1       	ldd	r23, Y+32	; 0x20
    d6b6:	c8 01       	movw	r24, r16
    d6b8:	2a e0       	ldi	r18, 0x0A	; 10
    d6ba:	30 e0       	ldi	r19, 0x00	; 0
    d6bc:	0e 94 56 5e 	call	0xbcac	; 0xbcac <_ZN5Print5printEmi>
  }
  pr->println();
    d6c0:	c8 01       	movw	r24, r16
    d6c2:	0e 94 bc 5d 	call	0xbb78	; 0xbb78 <_ZN5Print7printlnEv>
  return DIR_IS_FILE(&dir) ? 1 : 2;
    d6c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    d6c8:	88 71       	andi	r24, 0x18	; 24
    d6ca:	11 f0       	breq	.+4      	; 0xd6d0 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x196>
    d6cc:	82 e0       	ldi	r24, 0x02	; 2
    d6ce:	03 c0       	rjmp	.+6      	; 0xd6d6 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x19c>
    d6d0:	81 e0       	ldi	r24, 0x01	; 1
    d6d2:	01 c0       	rjmp	.+2      	; 0xd6d6 <_ZN10SdBaseFile11lsPrintNextEP5Printhh+0x19c>
    d6d4:	80 e0       	ldi	r24, 0x00	; 0
}
    d6d6:	a0 96       	adiw	r28, 0x20	; 32
    d6d8:	cd bf       	out	0x3d, r28	; 61
    d6da:	de bf       	out	0x3e, r29	; 62
    d6dc:	cf 91       	pop	r28
    d6de:	df 91       	pop	r29
    d6e0:	1f 91       	pop	r17
    d6e2:	0f 91       	pop	r16
    d6e4:	ff 90       	pop	r15
    d6e6:	ef 90       	pop	r14
    d6e8:	df 90       	pop	r13
    d6ea:	cf 90       	pop	r12
    d6ec:	bf 90       	pop	r11
    d6ee:	af 90       	pop	r10
    d6f0:	9f 90       	pop	r9
    d6f2:	8f 90       	pop	r8
    d6f4:	7f 90       	pop	r7
    d6f6:	08 95       	ret

0000d6f8 <_ZN10SdBaseFile2lsEP5Printhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
    d6f8:	5f 92       	push	r5
    d6fa:	6f 92       	push	r6
    d6fc:	7f 92       	push	r7
    d6fe:	8f 92       	push	r8
    d700:	9f 92       	push	r9
    d702:	af 92       	push	r10
    d704:	bf 92       	push	r11
    d706:	cf 92       	push	r12
    d708:	df 92       	push	r13
    d70a:	ef 92       	push	r14
    d70c:	ff 92       	push	r15
    d70e:	0f 93       	push	r16
    d710:	1f 93       	push	r17
    d712:	df 93       	push	r29
    d714:	cf 93       	push	r28
    d716:	cd b7       	in	r28, 0x3d	; 61
    d718:	de b7       	in	r29, 0x3e	; 62
    d71a:	6b 97       	sbiw	r28, 0x1b	; 27
    d71c:	cd bf       	out	0x3d, r28	; 61
    d71e:	de bf       	out	0x3e, r29	; 62
    d720:	7c 01       	movw	r14, r24
    d722:	4b 01       	movw	r8, r22
    d724:	b4 2e       	mov	r11, r20
    d726:	a2 2e       	mov	r10, r18
    d728:	40 e0       	ldi	r20, 0x00	; 0
    d72a:	50 e0       	ldi	r21, 0x00	; 0
    d72c:	60 e0       	ldi	r22, 0x00	; 0
    d72e:	70 e0       	ldi	r23, 0x00	; 0
    d730:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
  rewind();
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    if (status > 1 && (flags & LS_R)) {
    d734:	cb 2c       	mov	r12, r11
    d736:	dd 24       	eor	r13, r13
    d738:	84 e0       	ldi	r24, 0x04	; 4
    d73a:	c8 22       	and	r12, r24
    d73c:	dd 24       	eor	r13, r13
      uint16_t index = curPosition()/32 - 1;
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
    d73e:	3e 01       	movw	r6, r28
    d740:	08 94       	sec
    d742:	61 1c       	adc	r6, r1
    d744:	71 1c       	adc	r7, r1
    d746:	42 e0       	ldi	r20, 0x02	; 2
    d748:	54 2e       	mov	r5, r20
    d74a:	5a 0c       	add	r5, r10
    d74c:	2f c0       	rjmp	.+94     	; 0xd7ac <_ZN10SdBaseFile2lsEP5Printhh+0xb4>
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
  rewind();
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    if (status > 1 && (flags & LS_R)) {
    d74e:	82 30       	cpi	r24, 0x02	; 2
    d750:	6c f1       	brlt	.+90     	; 0xd7ac <_ZN10SdBaseFile2lsEP5Printhh+0xb4>
    d752:	c1 14       	cp	r12, r1
    d754:	d1 04       	cpc	r13, r1
    d756:	51 f1       	breq	.+84     	; 0xd7ac <_ZN10SdBaseFile2lsEP5Printhh+0xb4>
      uint16_t index = curPosition()/32 - 1;
    d758:	f7 01       	movw	r30, r14
    d75a:	83 85       	ldd	r24, Z+11	; 0x0b
    d75c:	94 85       	ldd	r25, Z+12	; 0x0c
    d75e:	a5 85       	ldd	r26, Z+13	; 0x0d
    d760:	b6 85       	ldd	r27, Z+14	; 0x0e
    d762:	35 e0       	ldi	r19, 0x05	; 5
    d764:	b6 95       	lsr	r27
    d766:	a7 95       	ror	r26
    d768:	97 95       	ror	r25
    d76a:	87 95       	ror	r24
    d76c:	3a 95       	dec	r19
    d76e:	d1 f7       	brne	.-12     	; 0xd764 <_ZN10SdBaseFile2lsEP5Printhh+0x6c>
    d770:	8c 01       	movw	r16, r24
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    d772:	19 82       	std	Y+1, r1	; 0x01
    d774:	1c 82       	std	Y+4, r1	; 0x04
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
    d776:	ac 01       	movw	r20, r24
    d778:	41 50       	subi	r20, 0x01	; 1
    d77a:	50 40       	sbci	r21, 0x00	; 0
    d77c:	c3 01       	movw	r24, r6
    d77e:	b7 01       	movw	r22, r14
    d780:	21 e0       	ldi	r18, 0x01	; 1
    d782:	0e 94 3b 69 	call	0xd276	; 0xd276 <_ZN10SdBaseFile4openEPS_jh>
    d786:	88 23       	and	r24, r24
    d788:	31 f0       	breq	.+12     	; 0xd796 <_ZN10SdBaseFile2lsEP5Printhh+0x9e>
    d78a:	c3 01       	movw	r24, r6
    d78c:	b4 01       	movw	r22, r8
    d78e:	4b 2d       	mov	r20, r11
    d790:	25 2d       	mov	r18, r5
    d792:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <_ZN10SdBaseFile2lsEP5Printhh>
      seekSet(32 * (index + 1));
    d796:	25 e0       	ldi	r18, 0x05	; 5
    d798:	00 0f       	add	r16, r16
    d79a:	11 1f       	adc	r17, r17
    d79c:	2a 95       	dec	r18
    d79e:	e1 f7       	brne	.-8      	; 0xd798 <_ZN10SdBaseFile2lsEP5Printhh+0xa0>
    d7a0:	a8 01       	movw	r20, r16
    d7a2:	60 e0       	ldi	r22, 0x00	; 0
    d7a4:	70 e0       	ldi	r23, 0x00	; 0
    d7a6:	c7 01       	movw	r24, r14
    d7a8:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
 * list to indicate subdirectory level.
 */
void SdBaseFile::ls(Print* pr, uint8_t flags, uint8_t indent) {
  rewind();
  int8_t status;
  while ((status = lsPrintNext(pr, flags, indent))) {
    d7ac:	c7 01       	movw	r24, r14
    d7ae:	b4 01       	movw	r22, r8
    d7b0:	4b 2d       	mov	r20, r11
    d7b2:	2a 2d       	mov	r18, r10
    d7b4:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <_ZN10SdBaseFile11lsPrintNextEP5Printhh>
    d7b8:	88 23       	and	r24, r24
    d7ba:	49 f6       	brne	.-110    	; 0xd74e <_ZN10SdBaseFile2lsEP5Printhh+0x56>
      SdBaseFile s;
      if (s.open(this, index, O_READ)) s.ls(pr, flags, indent + 2);
      seekSet(32 * (index + 1));
    }
  }
}
    d7bc:	6b 96       	adiw	r28, 0x1b	; 27
    d7be:	cd bf       	out	0x3d, r28	; 61
    d7c0:	de bf       	out	0x3e, r29	; 62
    d7c2:	cf 91       	pop	r28
    d7c4:	df 91       	pop	r29
    d7c6:	1f 91       	pop	r17
    d7c8:	0f 91       	pop	r16
    d7ca:	ff 90       	pop	r15
    d7cc:	ef 90       	pop	r14
    d7ce:	df 90       	pop	r13
    d7d0:	cf 90       	pop	r12
    d7d2:	bf 90       	pop	r11
    d7d4:	af 90       	pop	r10
    d7d6:	9f 90       	pop	r9
    d7d8:	8f 90       	pop	r8
    d7da:	7f 90       	pop	r7
    d7dc:	6f 90       	pop	r6
    d7de:	5f 90       	pop	r5
    d7e0:	08 95       	ret

0000d7e2 <_ZN10SdBaseFile10addClusterEv>:
SdBaseFile* SdBaseFile::cwd_ = 0;
// callback function for date/time
void (*SdBaseFile::dateTime_)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// add a cluster to a file
bool SdBaseFile::addCluster() {
    d7e2:	cf 93       	push	r28
    d7e4:	df 93       	push	r29
    d7e6:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) {
    d7e8:	9c 01       	movw	r18, r24
    d7ea:	29 5f       	subi	r18, 0xF9	; 249
    d7ec:	3f 4f       	sbci	r19, 0xFF	; 255
    d7ee:	8d 81       	ldd	r24, Y+5	; 0x05
    d7f0:	9e 81       	ldd	r25, Y+6	; 0x06
    d7f2:	41 e0       	ldi	r20, 0x01	; 1
    d7f4:	50 e0       	ldi	r21, 0x00	; 0
    d7f6:	60 e0       	ldi	r22, 0x00	; 0
    d7f8:	70 e0       	ldi	r23, 0x00	; 0
    d7fa:	0e 94 ee 75 	call	0xebdc	; 0xebdc <_ZN8SdVolume15allocContiguousEmPm>
    d7fe:	88 23       	and	r24, r24
    d800:	a1 f0       	breq	.+40     	; 0xd82a <_ZN10SdBaseFile10addClusterEv+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    d802:	8f 89       	ldd	r24, Y+23	; 0x17
    d804:	98 8d       	ldd	r25, Y+24	; 0x18
    d806:	a9 8d       	ldd	r26, Y+25	; 0x19
    d808:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d80a:	00 97       	sbiw	r24, 0x00	; 0
    d80c:	a1 05       	cpc	r26, r1
    d80e:	b1 05       	cpc	r27, r1
    d810:	59 f4       	brne	.+22     	; 0xd828 <_ZN10SdBaseFile10addClusterEv+0x46>
    firstCluster_ = curCluster_;
    d812:	8f 81       	ldd	r24, Y+7	; 0x07
    d814:	98 85       	ldd	r25, Y+8	; 0x08
    d816:	a9 85       	ldd	r26, Y+9	; 0x09
    d818:	ba 85       	ldd	r27, Y+10	; 0x0a
    d81a:	8f 8b       	std	Y+23, r24	; 0x17
    d81c:	98 8f       	std	Y+24, r25	; 0x18
    d81e:	a9 8f       	std	Y+25, r26	; 0x19
    d820:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    d822:	89 81       	ldd	r24, Y+1	; 0x01
    d824:	80 68       	ori	r24, 0x80	; 128
    d826:	89 83       	std	Y+1, r24	; 0x01
    d828:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;

 fail:
  return false;
}
    d82a:	df 91       	pop	r29
    d82c:	cf 91       	pop	r28
    d82e:	08 95       	ret

0000d830 <_ZN10SdBaseFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdBaseFile::write(const void* buf, size_t nbyte) {
    d830:	3f 92       	push	r3
    d832:	4f 92       	push	r4
    d834:	5f 92       	push	r5
    d836:	6f 92       	push	r6
    d838:	7f 92       	push	r7
    d83a:	8f 92       	push	r8
    d83c:	9f 92       	push	r9
    d83e:	af 92       	push	r10
    d840:	bf 92       	push	r11
    d842:	cf 92       	push	r12
    d844:	df 92       	push	r13
    d846:	ef 92       	push	r14
    d848:	ff 92       	push	r15
    d84a:	0f 93       	push	r16
    d84c:	1f 93       	push	r17
    d84e:	df 93       	push	r29
    d850:	cf 93       	push	r28
    d852:	cd b7       	in	r28, 0x3d	; 61
    d854:	de b7       	in	r29, 0x3e	; 62
    d856:	2a 97       	sbiw	r28, 0x0a	; 10
    d858:	cd bf       	out	0x3d, r28	; 61
    d85a:	de bf       	out	0x3e, r29	; 62
    d85c:	4c 01       	movw	r8, r24
    d85e:	16 2f       	mov	r17, r22
    d860:	07 2f       	mov	r16, r23
    d862:	49 87       	std	Y+9, r20	; 0x09
    d864:	5a 87       	std	Y+10, r21	; 0x0a
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    d866:	dc 01       	movw	r26, r24
    d868:	13 96       	adiw	r26, 0x03	; 3
    d86a:	8c 91       	ld	r24, X
    d86c:	13 97       	sbiw	r26, 0x03	; 3
    d86e:	81 30       	cpi	r24, 0x01	; 1
    d870:	09 f0       	breq	.+2      	; 0xd874 <_ZN10SdBaseFile5writeEPKvj+0x44>
    d872:	b0 c1       	rjmp	.+864    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
    d874:	11 96       	adiw	r26, 0x01	; 1
    d876:	8c 91       	ld	r24, X
    d878:	81 ff       	sbrs	r24, 1
    d87a:	ac c1       	rjmp	.+856    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
    d87c:	c6 c1       	rjmp	.+908    	; 0xdc0a <_ZN10SdBaseFile5writeEPKvj+0x3da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    d87e:	f4 01       	movw	r30, r8
    d880:	43 89       	ldd	r20, Z+19	; 0x13
    d882:	54 89       	ldd	r21, Z+20	; 0x14
    d884:	65 89       	ldd	r22, Z+21	; 0x15
    d886:	76 89       	ldd	r23, Z+22	; 0x16
    d888:	83 85       	ldd	r24, Z+11	; 0x0b
    d88a:	94 85       	ldd	r25, Z+12	; 0x0c
    d88c:	a5 85       	ldd	r26, Z+13	; 0x0d
    d88e:	b6 85       	ldd	r27, Z+14	; 0x0e
    d890:	84 17       	cp	r24, r20
    d892:	95 07       	cpc	r25, r21
    d894:	a6 07       	cpc	r26, r22
    d896:	b7 07       	cpc	r27, r23
    d898:	31 f0       	breq	.+12     	; 0xd8a6 <_ZN10SdBaseFile5writeEPKvj+0x76>
  }
  /** Set the files position to end-of-file + \a offset. See seekSet().
   * \param[in] offset The new position in bytes from end-of-file.
   * \return true for success or false for failure.
   */
  bool seekEnd(int32_t offset = 0) {return seekSet(fileSize_ + offset);}
    d89a:	c4 01       	movw	r24, r8
    d89c:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    if (!seekEnd()) {
    d8a0:	88 23       	and	r24, r24
    d8a2:	09 f4       	brne	.+2      	; 0xd8a6 <_ZN10SdBaseFile5writeEPKvj+0x76>
    d8a4:	97 c1       	rjmp	.+814    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdBaseFile::write(const void* buf, size_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    d8a6:	81 2f       	mov	r24, r17
    d8a8:	90 2f       	mov	r25, r16
    d8aa:	9c 01       	movw	r18, r24
    d8ac:	2f 83       	std	Y+7, r18	; 0x07
    d8ae:	38 87       	std	Y+8, r19	; 0x08
    d8b0:	29 85       	ldd	r18, Y+9	; 0x09
    d8b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    d8b4:	2d 83       	std	Y+5, r18	; 0x05
    d8b6:	3e 83       	std	Y+6, r19	; 0x06
    d8b8:	51 c1       	rjmp	.+674    	; 0xdb5c <_ZN10SdBaseFile5writeEPKvj+0x32c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (nToWrite) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    d8ba:	d4 01       	movw	r26, r8
    d8bc:	15 96       	adiw	r26, 0x05	; 5
    d8be:	ed 91       	ld	r30, X+
    d8c0:	fc 91       	ld	r31, X
    d8c2:	16 97       	sbiw	r26, 0x06	; 6
  static bool cacheWriteFat();
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
  bool allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    d8c4:	da 01       	movw	r26, r20
    d8c6:	c9 01       	movw	r24, r18
    d8c8:	69 e0       	ldi	r22, 0x09	; 9
    d8ca:	b6 95       	lsr	r27
    d8cc:	a7 95       	ror	r26
    d8ce:	97 95       	ror	r25
    d8d0:	87 95       	ror	r24
    d8d2:	6a 95       	dec	r22
    d8d4:	d1 f7       	brne	.-12     	; 0xd8ca <_ZN10SdBaseFile5writeEPKvj+0x9a>
    d8d6:	f4 80       	ldd	r15, Z+4	; 0x04
    d8d8:	fa 94       	dec	r15
    d8da:	f8 22       	and	r15, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    d8dc:	89 01       	movw	r16, r18
    d8de:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    d8e0:	ff 20       	and	r15, r15
    d8e2:	09 f0       	breq	.+2      	; 0xd8e6 <_ZN10SdBaseFile5writeEPKvj+0xb6>
    d8e4:	52 c0       	rjmp	.+164    	; 0xd98a <_ZN10SdBaseFile5writeEPKvj+0x15a>
    d8e6:	01 15       	cp	r16, r1
    d8e8:	11 05       	cpc	r17, r1
    d8ea:	09 f0       	breq	.+2      	; 0xd8ee <_ZN10SdBaseFile5writeEPKvj+0xbe>
    d8ec:	4e c0       	rjmp	.+156    	; 0xd98a <_ZN10SdBaseFile5writeEPKvj+0x15a>
      // start of new cluster
      if (curCluster_ != 0) {
    d8ee:	d4 01       	movw	r26, r8
    d8f0:	17 96       	adiw	r26, 0x07	; 7
    d8f2:	4d 91       	ld	r20, X+
    d8f4:	5d 91       	ld	r21, X+
    d8f6:	6d 91       	ld	r22, X+
    d8f8:	7c 91       	ld	r23, X
    d8fa:	1a 97       	sbiw	r26, 0x0a	; 10
    d8fc:	41 15       	cp	r20, r1
    d8fe:	51 05       	cpc	r21, r1
    d900:	61 05       	cpc	r22, r1
    d902:	71 05       	cpc	r23, r1
    d904:	71 f1       	breq	.+92     	; 0xd962 <_ZN10SdBaseFile5writeEPKvj+0x132>
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    d906:	cf 01       	movw	r24, r30
    d908:	9e 01       	movw	r18, r28
    d90a:	2f 5f       	subi	r18, 0xFF	; 255
    d90c:	3f 4f       	sbci	r19, 0xFF	; 255
    d90e:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    d912:	88 23       	and	r24, r24
    d914:	09 f4       	brne	.+2      	; 0xd918 <_ZN10SdBaseFile5writeEPKvj+0xe8>
    d916:	5e c1       	rjmp	.+700    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (vol_->isEOC(next)) {
    d918:	29 81       	ldd	r18, Y+1	; 0x01
    d91a:	3a 81       	ldd	r19, Y+2	; 0x02
    d91c:	4b 81       	ldd	r20, Y+3	; 0x03
    d91e:	5c 81       	ldd	r21, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    d920:	d4 01       	movw	r26, r8
    d922:	15 96       	adiw	r26, 0x05	; 5
    d924:	ed 91       	ld	r30, X+
    d926:	fc 91       	ld	r31, X
    d928:	16 97       	sbiw	r26, 0x06	; 6
    d92a:	87 89       	ldd	r24, Z+23	; 0x17
    d92c:	80 31       	cpi	r24, 0x10	; 16
    d92e:	49 f4       	brne	.+18     	; 0xd942 <_ZN10SdBaseFile5writeEPKvj+0x112>
    d930:	28 3f       	cpi	r18, 0xF8	; 248
    d932:	bf ef       	ldi	r27, 0xFF	; 255
    d934:	3b 07       	cpc	r19, r27
    d936:	b0 e0       	ldi	r27, 0x00	; 0
    d938:	4b 07       	cpc	r20, r27
    d93a:	b0 e0       	ldi	r27, 0x00	; 0
    d93c:	5b 07       	cpc	r21, r27
    d93e:	48 f0       	brcs	.+18     	; 0xd952 <_ZN10SdBaseFile5writeEPKvj+0x122>
    d940:	19 c0       	rjmp	.+50     	; 0xd974 <_ZN10SdBaseFile5writeEPKvj+0x144>
    return  cluster >= FAT32EOC_MIN;
    d942:	28 3f       	cpi	r18, 0xF8	; 248
    d944:	ef ef       	ldi	r30, 0xFF	; 255
    d946:	3e 07       	cpc	r19, r30
    d948:	ef ef       	ldi	r30, 0xFF	; 255
    d94a:	4e 07       	cpc	r20, r30
    d94c:	ef e0       	ldi	r30, 0x0F	; 15
    d94e:	5e 07       	cpc	r21, r30
    d950:	88 f4       	brcc	.+34     	; 0xd974 <_ZN10SdBaseFile5writeEPKvj+0x144>
          if (!addCluster()) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        } else {
          curCluster_ = next;
    d952:	d4 01       	movw	r26, r8
    d954:	17 96       	adiw	r26, 0x07	; 7
    d956:	2d 93       	st	X+, r18
    d958:	3d 93       	st	X+, r19
    d95a:	4d 93       	st	X+, r20
    d95c:	5c 93       	st	X, r21
    d95e:	1a 97       	sbiw	r26, 0x0a	; 10
    d960:	14 c0       	rjmp	.+40     	; 0xd98a <_ZN10SdBaseFile5writeEPKvj+0x15a>
        }
      } else {
        if (firstCluster_ == 0) {
    d962:	f4 01       	movw	r30, r8
    d964:	87 89       	ldd	r24, Z+23	; 0x17
    d966:	90 8d       	ldd	r25, Z+24	; 0x18
    d968:	a1 8d       	ldd	r26, Z+25	; 0x19
    d96a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    d96c:	00 97       	sbiw	r24, 0x00	; 0
    d96e:	a1 05       	cpc	r26, r1
    d970:	b1 05       	cpc	r27, r1
    d972:	31 f4       	brne	.+12     	; 0xd980 <_ZN10SdBaseFile5writeEPKvj+0x150>
          // allocate first cluster of file
          if (!addCluster()) {
    d974:	c4 01       	movw	r24, r8
    d976:	0e 94 f1 6b 	call	0xd7e2	; 0xd7e2 <_ZN10SdBaseFile10addClusterEv>
    d97a:	88 23       	and	r24, r24
    d97c:	31 f4       	brne	.+12     	; 0xd98a <_ZN10SdBaseFile5writeEPKvj+0x15a>
    d97e:	2a c1       	rjmp	.+596    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
            DBG_FAIL_MACRO;
            goto fail;
          }
        } else {
          curCluster_ = firstCluster_;
    d980:	f4 01       	movw	r30, r8
    d982:	87 83       	std	Z+7, r24	; 0x07
    d984:	90 87       	std	Z+8, r25	; 0x08
    d986:	a1 87       	std	Z+9, r26	; 0x09
    d988:	b2 87       	std	Z+10, r27	; 0x0a
        }
      }
    }
    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    d98a:	d4 01       	movw	r26, r8
    d98c:	17 96       	adiw	r26, 0x07	; 7
    d98e:	4d 91       	ld	r20, X+
    d990:	5d 91       	ld	r21, X+
    d992:	6d 91       	ld	r22, X+
    d994:	7c 91       	ld	r23, X
    d996:	1a 97       	sbiw	r26, 0x0a	; 10
    d998:	15 96       	adiw	r26, 0x05	; 5
    d99a:	8d 91       	ld	r24, X+
    d99c:	9c 91       	ld	r25, X
    d99e:	16 97       	sbiw	r26, 0x06	; 6
    d9a0:	0e 94 90 72 	call	0xe520	; 0xe520 <_ZNK8SdVolume17clusterStartBlockEm>
    d9a4:	5b 01       	movw	r10, r22
    d9a6:	6c 01       	movw	r12, r24
    d9a8:	af 0c       	add	r10, r15
    d9aa:	b1 1c       	adc	r11, r1
    d9ac:	c1 1c       	adc	r12, r1
    d9ae:	d1 1c       	adc	r13, r1

    if (blockOffset != 0 || nToWrite < 512) {
    d9b0:	01 15       	cp	r16, r1
    d9b2:	11 05       	cpc	r17, r1
    d9b4:	c9 f4       	brne	.+50     	; 0xd9e8 <_ZN10SdBaseFile5writeEPKvj+0x1b8>
    d9b6:	ed 81       	ldd	r30, Y+5	; 0x05
    d9b8:	fe 81       	ldd	r31, Y+6	; 0x06
    d9ba:	e0 50       	subi	r30, 0x00	; 0
    d9bc:	f2 40       	sbci	r31, 0x02	; 2
    d9be:	d8 f5       	brcc	.+118    	; 0xda36 <_ZN10SdBaseFile5writeEPKvj+0x206>
      // max space in block
      n = 512 - blockOffset;
      // lesser of space and amount to write
      if (n > nToWrite) n = nToWrite;

      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    d9c0:	d4 01       	movw	r26, r8
    d9c2:	1b 96       	adiw	r26, 0x0b	; 11
    d9c4:	2d 91       	ld	r18, X+
    d9c6:	3d 91       	ld	r19, X+
    d9c8:	4d 91       	ld	r20, X+
    d9ca:	5c 91       	ld	r21, X
    d9cc:	1e 97       	sbiw	r26, 0x0e	; 14
    d9ce:	53 96       	adiw	r26, 0x13	; 19
    d9d0:	8d 91       	ld	r24, X+
    d9d2:	9d 91       	ld	r25, X+
    d9d4:	0d 90       	ld	r0, X+
    d9d6:	bc 91       	ld	r27, X
    d9d8:	a0 2d       	mov	r26, r0
    d9da:	28 17       	cp	r18, r24
    d9dc:	39 07       	cpc	r19, r25
    d9de:	4a 07       	cpc	r20, r26
    d9e0:	5b 07       	cpc	r21, r27
    d9e2:	10 f0       	brcs	.+4      	; 0xd9e8 <_ZN10SdBaseFile5writeEPKvj+0x1b8>
    d9e4:	45 e0       	ldi	r20, 0x05	; 5
    d9e6:	01 c0       	rjmp	.+2      	; 0xd9ea <_ZN10SdBaseFile5writeEPKvj+0x1ba>
    d9e8:	41 e0       	ldi	r20, 0x01	; 1
        cacheOption = SdVolume::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of block
        cacheOption = SdVolume::CACHE_FOR_WRITE;
        }
        pc = vol_->cacheFetch(block, cacheOption);
    d9ea:	c6 01       	movw	r24, r12
    d9ec:	b5 01       	movw	r22, r10
    d9ee:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
        if (!pc) {
    d9f2:	00 97       	sbiw	r24, 0x00	; 0
    d9f4:	09 f4       	brne	.+2      	; 0xd9f8 <_ZN10SdBaseFile5writeEPKvj+0x1c8>
    d9f6:	ee c0       	rjmp	.+476    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;

    if (blockOffset != 0 || nToWrite < 512) {
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
    d9f8:	40 e0       	ldi	r20, 0x00	; 0
    d9fa:	52 e0       	ldi	r21, 0x02	; 2
    d9fc:	40 1b       	sub	r20, r16
    d9fe:	51 0b       	sbc	r21, r17
    da00:	4d 80       	ldd	r4, Y+5	; 0x05
    da02:	5e 80       	ldd	r5, Y+6	; 0x06
    da04:	44 15       	cp	r20, r4
    da06:	55 05       	cpc	r21, r5
    da08:	08 f4       	brcc	.+2      	; 0xda0c <_ZN10SdBaseFile5writeEPKvj+0x1dc>
    da0a:	2a 01       	movw	r4, r20
        if (!pc) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
    da0c:	9c 01       	movw	r18, r24
    da0e:	20 0f       	add	r18, r16
    da10:	31 1f       	adc	r19, r17
    da12:	c9 01       	movw	r24, r18
    da14:	6f 81       	ldd	r22, Y+7	; 0x07
    da16:	78 85       	ldd	r23, Y+8	; 0x08
    da18:	a2 01       	movw	r20, r4
    da1a:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
      if (512 == (n + blockOffset)) {
    da1e:	04 0d       	add	r16, r4
    da20:	15 1d       	adc	r17, r5
    da22:	00 50       	subi	r16, 0x00	; 0
    da24:	12 40       	sbci	r17, 0x02	; 2
    da26:	09 f0       	breq	.+2      	; 0xda2a <_ZN10SdBaseFile5writeEPKvj+0x1fa>
    da28:	7d c0       	rjmp	.+250    	; 0xdb24 <_ZN10SdBaseFile5writeEPKvj+0x2f4>
        if (!vol_->cacheWriteData()) {
    da2a:	0e 94 f6 72 	call	0xe5ec	; 0xe5ec <_ZN8SdVolume14cacheWriteDataEv>
    da2e:	88 23       	and	r24, r24
    da30:	09 f0       	breq	.+2      	; 0xda34 <_ZN10SdBaseFile5writeEPKvj+0x204>
    da32:	78 c0       	rjmp	.+240    	; 0xdb24 <_ZN10SdBaseFile5writeEPKvj+0x2f4>
    da34:	cf c0       	rjmp	.+414    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else if (!USE_MULTI_BLOCK_SD_IO || nToWrite < 1024) {
    da36:	ed 81       	ldd	r30, Y+5	; 0x05
    da38:	fe 81       	ldd	r31, Y+6	; 0x06
    da3a:	e0 50       	subi	r30, 0x00	; 0
    da3c:	f4 40       	sbci	r31, 0x04	; 4
    da3e:	00 f5       	brcc	.+64     	; 0xda80 <_ZN10SdBaseFile5writeEPKvj+0x250>
      // use single block write command
      n = 512;
      if (vol_->cacheBlockNumber() == block) {
    da40:	80 91 db 24 	lds	r24, 0x24DB
    da44:	90 91 dc 24 	lds	r25, 0x24DC
    da48:	a0 91 dd 24 	lds	r26, 0x24DD
    da4c:	b0 91 de 24 	lds	r27, 0x24DE
    da50:	8a 15       	cp	r24, r10
    da52:	9b 05       	cpc	r25, r11
    da54:	ac 05       	cpc	r26, r12
    da56:	bd 05       	cpc	r27, r13
    da58:	11 f4       	brne	.+4      	; 0xda5e <_ZN10SdBaseFile5writeEPKvj+0x22e>
        vol_->cacheInvalidate();
    da5a:	0e 94 81 72 	call	0xe502	; 0xe502 <_ZN8SdVolume15cacheInvalidateEv>
  }
  bool readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  bool writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    da5e:	80 91 e4 24 	lds	r24, 0x24E4
    da62:	90 91 e5 24 	lds	r25, 0x24E5
    da66:	b6 01       	movw	r22, r12
    da68:	a5 01       	movw	r20, r10
    da6a:	2f 81       	ldd	r18, Y+7	; 0x07
    da6c:	38 85       	ldd	r19, Y+8	; 0x08
    da6e:	0e 94 30 61 	call	0xc260	; 0xc260 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) {
    da72:	88 23       	and	r24, r24
    da74:	09 f4       	brne	.+2      	; 0xda78 <_ZN10SdBaseFile5writeEPKvj+0x248>
    da76:	ae c0       	rjmp	.+348    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
        DBG_FAIL_MACRO;
        goto fail;
    da78:	41 2c       	mov	r4, r1
    da7a:	52 e0       	ldi	r21, 0x02	; 2
    da7c:	55 2e       	mov	r5, r21
    da7e:	52 c0       	rjmp	.+164    	; 0xdb24 <_ZN10SdBaseFile5writeEPKvj+0x2f4>
      }
    } else {
      // use multiple block write command
      uint8_t maxBlocks = vol_->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
    da80:	d4 01       	movw	r26, r8
    da82:	15 96       	adiw	r26, 0x05	; 5
    da84:	ed 91       	ld	r30, X+
    da86:	fc 91       	ld	r31, X
    da88:	16 97       	sbiw	r26, 0x06	; 6
    da8a:	84 81       	ldd	r24, Z+4	; 0x04
    da8c:	8f 19       	sub	r24, r15
    da8e:	3e 80       	ldd	r3, Y+6	; 0x06
    da90:	36 94       	lsr	r3
    da92:	83 15       	cp	r24, r3
    da94:	08 f4       	brcc	.+2      	; 0xda98 <_ZN10SdBaseFile5writeEPKvj+0x268>
    da96:	38 2e       	mov	r3, r24
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
      if (!vol_->sdCard()->writeStart(block, nBlock)) {
    da98:	03 2d       	mov	r16, r3
    da9a:	10 e0       	ldi	r17, 0x00	; 0
    da9c:	20 e0       	ldi	r18, 0x00	; 0
    da9e:	30 e0       	ldi	r19, 0x00	; 0
    daa0:	80 91 e4 24 	lds	r24, 0x24E4
    daa4:	90 91 e5 24 	lds	r25, 0x24E5
    daa8:	b6 01       	movw	r22, r12
    daaa:	a5 01       	movw	r20, r10
    daac:	0e 94 a8 60 	call	0xc150	; 0xc150 <_ZN7Sd2Card10writeStartEmm>
    dab0:	88 23       	and	r24, r24
    dab2:	09 f4       	brne	.+2      	; 0xdab6 <_ZN10SdBaseFile5writeEPKvj+0x286>
    dab4:	8f c0       	rjmp	.+286    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
        DBG_FAIL_MACRO;
        goto fail;
    dab6:	6f 80       	ldd	r6, Y+7	; 0x07
    dab8:	78 84       	ldd	r7, Y+8	; 0x08
    daba:	86 01       	movw	r16, r12
    dabc:	75 01       	movw	r14, r10
    dabe:	22 c0       	rjmp	.+68     	; 0xdb04 <_ZN10SdBaseFile5writeEPKvj+0x2d4>
      }
      for (uint8_t b = 0; b < nBlock; b++) {
        // invalidate cache if block is in cache
        if ((block + b) == vol_->cacheBlockNumber()) {
    dac0:	80 91 db 24 	lds	r24, 0x24DB
    dac4:	90 91 dc 24 	lds	r25, 0x24DC
    dac8:	a0 91 dd 24 	lds	r26, 0x24DD
    dacc:	b0 91 de 24 	lds	r27, 0x24DE
    dad0:	e8 16       	cp	r14, r24
    dad2:	f9 06       	cpc	r15, r25
    dad4:	0a 07       	cpc	r16, r26
    dad6:	1b 07       	cpc	r17, r27
    dad8:	11 f4       	brne	.+4      	; 0xdade <_ZN10SdBaseFile5writeEPKvj+0x2ae>
          vol_->cacheInvalidate();
    dada:	0e 94 81 72 	call	0xe502	; 0xe502 <_ZN8SdVolume15cacheInvalidateEv>
        }
        if (!vol_->sdCard()->writeData(src + 512*b)) {
    dade:	80 91 e4 24 	lds	r24, 0x24E4
    dae2:	90 91 e5 24 	lds	r25, 0x24E5
    dae6:	b3 01       	movw	r22, r6
    dae8:	0e 94 0b 60 	call	0xc016	; 0xc016 <_ZN7Sd2Card9writeDataEPKh>
    daec:	e0 e0       	ldi	r30, 0x00	; 0
    daee:	f2 e0       	ldi	r31, 0x02	; 2
    daf0:	6e 0e       	add	r6, r30
    daf2:	7f 1e       	adc	r7, r31
    daf4:	08 94       	sec
    daf6:	e1 1c       	adc	r14, r1
    daf8:	f1 1c       	adc	r15, r1
    dafa:	01 1d       	adc	r16, r1
    dafc:	11 1d       	adc	r17, r1
    dafe:	88 23       	and	r24, r24
    db00:	09 f4       	brne	.+2      	; 0xdb04 <_ZN10SdBaseFile5writeEPKvj+0x2d4>
    db02:	68 c0       	rjmp	.+208    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
      n = 512*nBlock;
      if (!vol_->sdCard()->writeStart(block, nBlock)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      for (uint8_t b = 0; b < nBlock; b++) {
    db04:	8e 2d       	mov	r24, r14
    db06:	8a 19       	sub	r24, r10
    db08:	83 15       	cp	r24, r3
    db0a:	d0 f2       	brcs	.-76     	; 0xdac0 <_ZN10SdBaseFile5writeEPKvj+0x290>
        if (!vol_->sdCard()->writeData(src + 512*b)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!vol_->sdCard()->writeStop()) {
    db0c:	80 91 e4 24 	lds	r24, 0x24E4
    db10:	90 91 e5 24 	lds	r25, 0x24E5
    db14:	0e 94 e3 5f 	call	0xbfc6	; 0xbfc6 <_ZN7Sd2Card9writeStopEv>
    db18:	88 23       	and	r24, r24
    db1a:	09 f4       	brne	.+2      	; 0xdb1e <_ZN10SdBaseFile5writeEPKvj+0x2ee>
    db1c:	5b c0       	rjmp	.+182    	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
      // use multiple block write command
      uint8_t maxBlocks = vol_->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) nBlock = maxBlocks;

      n = 512*nBlock;
    db1e:	53 2c       	mov	r5, r3
    db20:	55 0c       	add	r5, r5
    db22:	44 24       	eor	r4, r4
      if (!vol_->sdCard()->writeStop()) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    curPosition_ += n;
    db24:	92 01       	movw	r18, r4
    db26:	40 e0       	ldi	r20, 0x00	; 0
    db28:	50 e0       	ldi	r21, 0x00	; 0
    db2a:	f4 01       	movw	r30, r8
    db2c:	83 85       	ldd	r24, Z+11	; 0x0b
    db2e:	94 85       	ldd	r25, Z+12	; 0x0c
    db30:	a5 85       	ldd	r26, Z+13	; 0x0d
    db32:	b6 85       	ldd	r27, Z+14	; 0x0e
    db34:	82 0f       	add	r24, r18
    db36:	93 1f       	adc	r25, r19
    db38:	a4 1f       	adc	r26, r20
    db3a:	b5 1f       	adc	r27, r21
    db3c:	83 87       	std	Z+11, r24	; 0x0b
    db3e:	94 87       	std	Z+12, r25	; 0x0c
    db40:	a5 87       	std	Z+13, r26	; 0x0d
    db42:	b6 87       	std	Z+14, r27	; 0x0e
    src += n;
    db44:	2f 81       	ldd	r18, Y+7	; 0x07
    db46:	38 85       	ldd	r19, Y+8	; 0x08
    db48:	24 0d       	add	r18, r4
    db4a:	35 1d       	adc	r19, r5
    db4c:	2f 83       	std	Y+7, r18	; 0x07
    db4e:	38 87       	std	Y+8, r19	; 0x08
    nToWrite -= n;
    db50:	8d 81       	ldd	r24, Y+5	; 0x05
    db52:	9e 81       	ldd	r25, Y+6	; 0x06
    db54:	84 19       	sub	r24, r4
    db56:	95 09       	sbc	r25, r5
    db58:	8d 83       	std	Y+5, r24	; 0x05
    db5a:	9e 83       	std	Y+6, r25	; 0x06
    db5c:	d4 01       	movw	r26, r8
    db5e:	1b 96       	adiw	r26, 0x0b	; 11
    db60:	2d 91       	ld	r18, X+
    db62:	3d 91       	ld	r19, X+
    db64:	4d 91       	ld	r20, X+
    db66:	5c 91       	ld	r21, X
    db68:	1e 97       	sbiw	r26, 0x0e	; 14
    if (!seekEnd()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (nToWrite) {
    db6a:	ed 81       	ldd	r30, Y+5	; 0x05
    db6c:	fe 81       	ldd	r31, Y+6	; 0x06
    db6e:	ef 2b       	or	r30, r31
    db70:	09 f0       	breq	.+2      	; 0xdb74 <_ZN10SdBaseFile5writeEPKvj+0x344>
    db72:	a3 ce       	rjmp	.-698    	; 0xd8ba <_ZN10SdBaseFile5writeEPKvj+0x8a>
    }
    curPosition_ += n;
    src += n;
    nToWrite -= n;
  }
  if (curPosition_ > fileSize_) {
    db74:	53 96       	adiw	r26, 0x13	; 19
    db76:	8d 91       	ld	r24, X+
    db78:	9d 91       	ld	r25, X+
    db7a:	0d 90       	ld	r0, X+
    db7c:	bc 91       	ld	r27, X
    db7e:	a0 2d       	mov	r26, r0
    db80:	82 17       	cp	r24, r18
    db82:	93 07       	cpc	r25, r19
    db84:	a4 07       	cpc	r26, r20
    db86:	b5 07       	cpc	r27, r21
    db88:	40 f4       	brcc	.+16     	; 0xdb9a <_ZN10SdBaseFile5writeEPKvj+0x36a>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    db8a:	d4 01       	movw	r26, r8
    db8c:	53 96       	adiw	r26, 0x13	; 19
    db8e:	2d 93       	st	X+, r18
    db90:	3d 93       	st	X+, r19
    db92:	4d 93       	st	X+, r20
    db94:	5c 93       	st	X, r21
    db96:	56 97       	sbiw	r26, 0x16	; 22
    db98:	0b c0       	rjmp	.+22     	; 0xdbb0 <_ZN10SdBaseFile5writeEPKvj+0x380>
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    db9a:	80 91 d9 22 	lds	r24, 0x22D9
    db9e:	90 91 da 22 	lds	r25, 0x22DA
    dba2:	89 2b       	or	r24, r25
    dba4:	59 f0       	breq	.+22     	; 0xdbbc <_ZN10SdBaseFile5writeEPKvj+0x38c>
    dba6:	e9 85       	ldd	r30, Y+9	; 0x09
    dba8:	fa 85       	ldd	r31, Y+10	; 0x0a
    dbaa:	ef 2b       	or	r30, r31
    dbac:	39 f0       	breq	.+14     	; 0xdbbc <_ZN10SdBaseFile5writeEPKvj+0x38c>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    dbae:	d4 01       	movw	r26, r8
    dbb0:	11 96       	adiw	r26, 0x01	; 1
    dbb2:	8c 91       	ld	r24, X
    dbb4:	11 97       	sbiw	r26, 0x01	; 1
    dbb6:	80 68       	ori	r24, 0x80	; 128
    dbb8:	11 96       	adiw	r26, 0x01	; 1
    dbba:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    dbbc:	f4 01       	movw	r30, r8
    dbbe:	81 81       	ldd	r24, Z+1	; 0x01
    dbc0:	83 ff       	sbrs	r24, 3
    dbc2:	05 c0       	rjmp	.+10     	; 0xdbce <_ZN10SdBaseFile5writeEPKvj+0x39e>
    if (!sync()) {
    dbc4:	c4 01       	movw	r24, r8
    dbc6:	0e 94 6d 65 	call	0xcada	; 0xcada <_ZN10SdBaseFile4syncEv>
    dbca:	88 23       	and	r24, r24
    dbcc:	19 f0       	breq	.+6      	; 0xdbd4 <_ZN10SdBaseFile5writeEPKvj+0x3a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
    dbce:	49 85       	ldd	r20, Y+9	; 0x09
    dbd0:	5a 85       	ldd	r21, Y+10	; 0x0a
    dbd2:	05 c0       	rjmp	.+10     	; 0xdbde <_ZN10SdBaseFile5writeEPKvj+0x3ae>

 fail:
  // return for write error
  writeError = true;
    dbd4:	81 e0       	ldi	r24, 0x01	; 1
    dbd6:	d4 01       	movw	r26, r8
    dbd8:	8c 93       	st	X, r24
    dbda:	4f ef       	ldi	r20, 0xFF	; 255
    dbdc:	5f ef       	ldi	r21, 0xFF	; 255
  return -1;
}
    dbde:	ca 01       	movw	r24, r20
    dbe0:	2a 96       	adiw	r28, 0x0a	; 10
    dbe2:	cd bf       	out	0x3d, r28	; 61
    dbe4:	de bf       	out	0x3e, r29	; 62
    dbe6:	cf 91       	pop	r28
    dbe8:	df 91       	pop	r29
    dbea:	1f 91       	pop	r17
    dbec:	0f 91       	pop	r16
    dbee:	ff 90       	pop	r15
    dbf0:	ef 90       	pop	r14
    dbf2:	df 90       	pop	r13
    dbf4:	cf 90       	pop	r12
    dbf6:	bf 90       	pop	r11
    dbf8:	af 90       	pop	r10
    dbfa:	9f 90       	pop	r9
    dbfc:	8f 90       	pop	r8
    dbfe:	7f 90       	pop	r7
    dc00:	6f 90       	pop	r6
    dc02:	5f 90       	pop	r5
    dc04:	4f 90       	pop	r4
    dc06:	3f 90       	pop	r3
    dc08:	08 95       	ret
  if (!isFile() || !(flags_ & O_WRITE)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    dc0a:	82 fd       	sbrc	r24, 2
    dc0c:	38 ce       	rjmp	.-912    	; 0xd87e <_ZN10SdBaseFile5writeEPKvj+0x4e>
    dc0e:	4b ce       	rjmp	.-874    	; 0xd8a6 <_ZN10SdBaseFile5writeEPKvj+0x76>

0000dc10 <_ZN10SdBaseFile13addDirClusterEv>:
  return false;
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
cache_t* SdBaseFile::addDirCluster() {
    dc10:	9f 92       	push	r9
    dc12:	af 92       	push	r10
    dc14:	bf 92       	push	r11
    dc16:	cf 92       	push	r12
    dc18:	df 92       	push	r13
    dc1a:	ef 92       	push	r14
    dc1c:	ff 92       	push	r15
    dc1e:	0f 93       	push	r16
    dc20:	1f 93       	push	r17
    dc22:	cf 93       	push	r28
    dc24:	df 93       	push	r29
    dc26:	8c 01       	movw	r16, r24
  uint32_t block;
  cache_t* pc;
  // max folder size
  if (fileSize_/sizeof(dir_t) >= 0XFFFF) {
    dc28:	fc 01       	movw	r30, r24
    dc2a:	83 89       	ldd	r24, Z+19	; 0x13
    dc2c:	94 89       	ldd	r25, Z+20	; 0x14
    dc2e:	a5 89       	ldd	r26, Z+21	; 0x15
    dc30:	b6 89       	ldd	r27, Z+22	; 0x16
    dc32:	80 5e       	subi	r24, 0xE0	; 224
    dc34:	9f 4f       	sbci	r25, 0xFF	; 255
    dc36:	af 41       	sbci	r26, 0x1F	; 31
    dc38:	b0 40       	sbci	r27, 0x00	; 0
    dc3a:	08 f0       	brcs	.+2      	; 0xdc3e <_ZN10SdBaseFile13addDirClusterEv+0x2e>
    dc3c:	5c c0       	rjmp	.+184    	; 0xdcf6 <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    dc3e:	c8 01       	movw	r24, r16
    dc40:	0e 94 f1 6b 	call	0xd7e2	; 0xd7e2 <_ZN10SdBaseFile10addClusterEv>
    dc44:	88 23       	and	r24, r24
    dc46:	09 f4       	brne	.+2      	; 0xdc4a <_ZN10SdBaseFile13addDirClusterEv+0x3a>
    dc48:	56 c0       	rjmp	.+172    	; 0xdcf6 <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = vol_->clusterStartBlock(curCluster_);
    dc4a:	d8 01       	movw	r26, r16
    dc4c:	17 96       	adiw	r26, 0x07	; 7
    dc4e:	4d 91       	ld	r20, X+
    dc50:	5d 91       	ld	r21, X+
    dc52:	6d 91       	ld	r22, X+
    dc54:	7c 91       	ld	r23, X
    dc56:	1a 97       	sbiw	r26, 0x0a	; 10
    dc58:	15 96       	adiw	r26, 0x05	; 5
    dc5a:	8d 91       	ld	r24, X+
    dc5c:	9c 91       	ld	r25, X
    dc5e:	16 97       	sbiw	r26, 0x06	; 6
    dc60:	0e 94 90 72 	call	0xe520	; 0xe520 <_ZNK8SdVolume17clusterStartBlockEm>
    dc64:	5b 01       	movw	r10, r22
    dc66:	6c 01       	movw	r12, r24
  pc = vol_->cacheFetch(block, SdVolume::CACHE_RESERVE_FOR_WRITE);
    dc68:	45 e0       	ldi	r20, 0x05	; 5
    dc6a:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
    dc6e:	ec 01       	movw	r28, r24
  if (!pc) {
    dc70:	00 97       	sbiw	r24, 0x00	; 0
    dc72:	09 f4       	brne	.+2      	; 0xdc76 <_ZN10SdBaseFile13addDirClusterEv+0x66>
    dc74:	42 c0       	rjmp	.+132    	; 0xdcfa <_ZN10SdBaseFile13addDirClusterEv+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
    dc76:	80 e0       	ldi	r24, 0x00	; 0
    dc78:	92 e0       	ldi	r25, 0x02	; 2
    dc7a:	fe 01       	movw	r30, r28
    dc7c:	9c 01       	movw	r18, r24
    dc7e:	11 92       	st	Z+, r1
    dc80:	21 50       	subi	r18, 0x01	; 1
    dc82:	30 40       	sbci	r19, 0x00	; 0
    dc84:	e1 f7       	brne	.-8      	; 0xdc7e <_ZN10SdBaseFile13addDirClusterEv+0x6e>
  // zero rest of clusters
  for (uint8_t i = 1; i < vol_->blocksPerCluster_; i++) {
    if (!vol_->writeBlock(block + i, pc->data)) {
    dc86:	9c 2e       	mov	r9, r28
    dc88:	ed 2e       	mov	r14, r29
    dc8a:	ff 24       	eor	r15, r15
    dc8c:	f3 94       	inc	r15
    dc8e:	11 c0       	rjmp	.+34     	; 0xdcb2 <_ZN10SdBaseFile13addDirClusterEv+0xa2>
    dc90:	b6 01       	movw	r22, r12
    dc92:	a5 01       	movw	r20, r10
    dc94:	4f 0d       	add	r20, r15
    dc96:	51 1d       	adc	r21, r1
    dc98:	61 1d       	adc	r22, r1
    dc9a:	71 1d       	adc	r23, r1
    dc9c:	80 91 e4 24 	lds	r24, 0x24E4
    dca0:	90 91 e5 24 	lds	r25, 0x24E5
    dca4:	29 2d       	mov	r18, r9
    dca6:	3e 2d       	mov	r19, r14
    dca8:	0e 94 30 61 	call	0xc260	; 0xc260 <_ZN7Sd2Card10writeBlockEmPKh>
    dcac:	88 23       	and	r24, r24
    dcae:	19 f1       	breq	.+70     	; 0xdcf6 <_ZN10SdBaseFile13addDirClusterEv+0xe6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < vol_->blocksPerCluster_; i++) {
    dcb0:	f3 94       	inc	r15
    dcb2:	d8 01       	movw	r26, r16
    dcb4:	15 96       	adiw	r26, 0x05	; 5
    dcb6:	ed 91       	ld	r30, X+
    dcb8:	fc 91       	ld	r31, X
    dcba:	16 97       	sbiw	r26, 0x06	; 6
    dcbc:	24 81       	ldd	r18, Z+4	; 0x04
    dcbe:	f2 16       	cp	r15, r18
    dcc0:	38 f3       	brcs	.-50     	; 0xdc90 <_ZN10SdBaseFile13addDirClusterEv+0x80>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL*vol_->blocksPerCluster_;
    dcc2:	30 e0       	ldi	r19, 0x00	; 0
    dcc4:	40 e0       	ldi	r20, 0x00	; 0
    dcc6:	50 e0       	ldi	r21, 0x00	; 0
    dcc8:	89 e0       	ldi	r24, 0x09	; 9
    dcca:	22 0f       	add	r18, r18
    dccc:	33 1f       	adc	r19, r19
    dcce:	44 1f       	adc	r20, r20
    dcd0:	55 1f       	adc	r21, r21
    dcd2:	8a 95       	dec	r24
    dcd4:	d1 f7       	brne	.-12     	; 0xdcca <_ZN10SdBaseFile13addDirClusterEv+0xba>
    dcd6:	53 96       	adiw	r26, 0x13	; 19
    dcd8:	8d 91       	ld	r24, X+
    dcda:	9d 91       	ld	r25, X+
    dcdc:	0d 90       	ld	r0, X+
    dcde:	bc 91       	ld	r27, X
    dce0:	a0 2d       	mov	r26, r0
    dce2:	82 0f       	add	r24, r18
    dce4:	93 1f       	adc	r25, r19
    dce6:	a4 1f       	adc	r26, r20
    dce8:	b5 1f       	adc	r27, r21
    dcea:	f8 01       	movw	r30, r16
    dcec:	83 8b       	std	Z+19, r24	; 0x13
    dcee:	94 8b       	std	Z+20, r25	; 0x14
    dcf0:	a5 8b       	std	Z+21, r26	; 0x15
    dcf2:	b6 8b       	std	Z+22, r27	; 0x16
    dcf4:	02 c0       	rjmp	.+4      	; 0xdcfa <_ZN10SdBaseFile13addDirClusterEv+0xea>
  return pc;
    dcf6:	c0 e0       	ldi	r28, 0x00	; 0
    dcf8:	d0 e0       	ldi	r29, 0x00	; 0

 fail:
  return 0;
}
    dcfa:	ce 01       	movw	r24, r28
    dcfc:	df 91       	pop	r29
    dcfe:	cf 91       	pop	r28
    dd00:	1f 91       	pop	r17
    dd02:	0f 91       	pop	r16
    dd04:	ff 90       	pop	r15
    dd06:	ef 90       	pop	r14
    dd08:	df 90       	pop	r13
    dd0a:	cf 90       	pop	r12
    dd0c:	bf 90       	pop	r11
    dd0e:	af 90       	pop	r10
    dd10:	9f 90       	pop	r9
    dd12:	08 95       	ret

0000dd14 <_ZN10SdBaseFile4openEPS_PKhh>:
  return false;
}
//------------------------------------------------------------------------------
// open with filename in dname
bool SdBaseFile::open(SdBaseFile* dirFile,
  const uint8_t dname[11], uint8_t oflag) {
    dd14:	8f 92       	push	r8
    dd16:	9f 92       	push	r9
    dd18:	af 92       	push	r10
    dd1a:	bf 92       	push	r11
    dd1c:	cf 92       	push	r12
    dd1e:	df 92       	push	r13
    dd20:	ef 92       	push	r14
    dd22:	ff 92       	push	r15
    dd24:	0f 93       	push	r16
    dd26:	1f 93       	push	r17
    dd28:	cf 93       	push	r28
    dd2a:	df 93       	push	r29
    dd2c:	6c 01       	movw	r12, r24
    dd2e:	eb 01       	movw	r28, r22
    dd30:	94 2e       	mov	r9, r20
    dd32:	85 2e       	mov	r8, r21
    dd34:	a2 2e       	mov	r10, r18
  bool emptyFound = false;
  bool fileFound = false;
  uint8_t index;
  dir_t* p;

  vol_ = dirFile->vol_;
    dd36:	8d 81       	ldd	r24, Y+5	; 0x05
    dd38:	9e 81       	ldd	r25, Y+6	; 0x06
    dd3a:	f6 01       	movw	r30, r12
    dd3c:	85 83       	std	Z+5, r24	; 0x05
    dd3e:	96 83       	std	Z+6, r25	; 0x06
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    dd40:	cb 01       	movw	r24, r22
    dd42:	40 e0       	ldi	r20, 0x00	; 0
    dd44:	50 e0       	ldi	r21, 0x00	; 0
    dd46:	60 e0       	ldi	r22, 0x00	; 0
    dd48:	70 e0       	ldi	r23, 0x00	; 0
    dd4a:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
    dd4e:	bb 24       	eor	r11, r11
    dd50:	34 c0       	rjmp	.+104    	; 0xddba <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    dd52:	ce 01       	movw	r24, r28
    dd54:	0e 94 c8 68 	call	0xd190	; 0xd190 <_ZN10SdBaseFile12readDirCacheEv>
    dd58:	fc 01       	movw	r30, r24
    if (!p) {
    dd5a:	00 97       	sbiw	r24, 0x00	; 0
    dd5c:	09 f4       	brne	.+2      	; 0xdd60 <_ZN10SdBaseFile4openEPS_PKhh+0x4c>
    dd5e:	8e c0       	rjmp	.+284    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>

  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    index = 0XF & (dirFile->curPosition_ >> 5);
    dd60:	95 e0       	ldi	r25, 0x05	; 5
    dd62:	16 95       	lsr	r17
    dd64:	07 95       	ror	r16
    dd66:	f7 94       	ror	r15
    dd68:	e7 94       	ror	r14
    dd6a:	9a 95       	dec	r25
    dd6c:	d1 f7       	brne	.-12     	; 0xdd62 <_ZN10SdBaseFile4openEPS_PKhh+0x4e>
    dd6e:	1e 2d       	mov	r17, r14
    dd70:	1f 70       	andi	r17, 0x0F	; 15
    p = dirFile->readDirCache();
    if (!p) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    dd72:	20 81       	ld	r18, Z
    dd74:	22 23       	and	r18, r18
    dd76:	11 f0       	breq	.+4      	; 0xdd7c <_ZN10SdBaseFile4openEPS_PKhh+0x68>
    dd78:	25 3e       	cpi	r18, 0xE5	; 229
    dd7a:	a9 f4       	brne	.+42     	; 0xdda6 <_ZN10SdBaseFile4openEPS_PKhh+0x92>
      // remember first empty slot
      if (!emptyFound) {
    dd7c:	bb 20       	and	r11, r11
    dd7e:	81 f4       	brne	.+32     	; 0xdda0 <_ZN10SdBaseFile4openEPS_PKhh+0x8c>
        dirBlock_ = vol_->cacheBlockNumber();
    dd80:	80 91 db 24 	lds	r24, 0x24DB
    dd84:	90 91 dc 24 	lds	r25, 0x24DC
    dd88:	a0 91 dd 24 	lds	r26, 0x24DD
    dd8c:	b0 91 de 24 	lds	r27, 0x24DE
    dd90:	f6 01       	movw	r30, r12
    dd92:	87 87       	std	Z+15, r24	; 0x0f
    dd94:	90 8b       	std	Z+16, r25	; 0x10
    dd96:	a1 8b       	std	Z+17, r26	; 0x11
    dd98:	b2 8b       	std	Z+18, r27	; 0x12
        dirIndex_ = index;
    dd9a:	14 83       	std	Z+4, r17	; 0x04
    dd9c:	bb 24       	eor	r11, r11
    dd9e:	b3 94       	inc	r11
        emptyFound = true;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    dda0:	22 23       	and	r18, r18
    dda2:	59 f4       	brne	.+22     	; 0xddba <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
    dda4:	18 c0       	rjmp	.+48     	; 0xddd6 <_ZN10SdBaseFile4openEPS_PKhh+0xc2>
    } else if (!memcmp(dname, p->name, 11)) {
    dda6:	89 2d       	mov	r24, r9
    dda8:	98 2d       	mov	r25, r8
    ddaa:	bf 01       	movw	r22, r30
    ddac:	4b e0       	ldi	r20, 0x0B	; 11
    ddae:	50 e0       	ldi	r21, 0x00	; 0
    ddb0:	0e 94 e3 b7 	call	0x16fc6	; 0x16fc6 <memcmp>
    ddb4:	00 97       	sbiw	r24, 0x00	; 0
    ddb6:	09 f4       	brne	.+2      	; 0xddba <_ZN10SdBaseFile4openEPS_PKhh+0xa6>
    ddb8:	6f c0       	rjmp	.+222    	; 0xde98 <_ZN10SdBaseFile4openEPS_PKhh+0x184>
  vol_ = dirFile->vol_;

  dirFile->rewind();
  // search for file

  while (dirFile->curPosition_ < dirFile->fileSize_) {
    ddba:	eb 84       	ldd	r14, Y+11	; 0x0b
    ddbc:	fc 84       	ldd	r15, Y+12	; 0x0c
    ddbe:	0d 85       	ldd	r16, Y+13	; 0x0d
    ddc0:	1e 85       	ldd	r17, Y+14	; 0x0e
    ddc2:	8b 89       	ldd	r24, Y+19	; 0x13
    ddc4:	9c 89       	ldd	r25, Y+20	; 0x14
    ddc6:	ad 89       	ldd	r26, Y+21	; 0x15
    ddc8:	be 89       	ldd	r27, Y+22	; 0x16
    ddca:	e8 16       	cp	r14, r24
    ddcc:	f9 06       	cpc	r15, r25
    ddce:	0a 07       	cpc	r16, r26
    ddd0:	1b 07       	cpc	r17, r27
    ddd2:	08 f4       	brcc	.+2      	; 0xddd6 <_ZN10SdBaseFile4openEPS_PKhh+0xc2>
    ddd4:	be cf       	rjmp	.-132    	; 0xdd52 <_ZN10SdBaseFile4openEPS_PKhh+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create unless O_CREAT and O_WRITE
    if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
    ddd6:	a6 fe       	sbrs	r10, 6
    ddd8:	51 c0       	rjmp	.+162    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
    ddda:	a1 fe       	sbrs	r10, 1
    dddc:	4f c0       	rjmp	.+158    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (emptyFound) {
    ddde:	bb 20       	and	r11, r11
    dde0:	51 f0       	breq	.+20     	; 0xddf6 <_ZN10SdBaseFile4openEPS_PKhh+0xe2>
      index = dirIndex_;
    dde2:	f6 01       	movw	r30, r12
    dde4:	14 81       	ldd	r17, Z+4	; 0x04
      p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    dde6:	c6 01       	movw	r24, r12
    dde8:	61 e0       	ldi	r22, 0x01	; 1
    ddea:	0e 94 32 65 	call	0xca64	; 0xca64 <_ZN10SdBaseFile13cacheDirEntryEh>
    ddee:	ec 01       	movw	r28, r24
      if (!p) {
    ddf0:	00 97       	sbiw	r24, 0x00	; 0
    ddf2:	61 f4       	brne	.+24     	; 0xde0c <_ZN10SdBaseFile4openEPS_PKhh+0xf8>
    ddf4:	43 c0       	rjmp	.+134    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (dirFile->type_ == FAT_FILE_TYPE_ROOT_FIXED) {
    ddf6:	8b 81       	ldd	r24, Y+3	; 0x03
    ddf8:	82 30       	cpi	r24, 0x02	; 2
    ddfa:	09 f4       	brne	.+2      	; 0xddfe <_ZN10SdBaseFile4openEPS_PKhh+0xea>
    ddfc:	3f c0       	rjmp	.+126    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // add and zero cluster for dirFile - first cluster is in cache for write
      pc = dirFile->addDirCluster();
    ddfe:	ce 01       	movw	r24, r28
    de00:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <_ZN10SdBaseFile13addDirClusterEv>
      if (!pc) {
    de04:	00 97       	sbiw	r24, 0x00	; 0
    de06:	d1 f1       	breq	.+116    	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
        DBG_FAIL_MACRO;
        goto fail;
      }
      // use first entry in cluster
      p = pc->dir;
    de08:	ec 01       	movw	r28, r24
    de0a:	10 e0       	ldi	r17, 0x00	; 0
      index = 0;
    }
    // initialize as empty file
    memset(p, 0, sizeof(dir_t));
    de0c:	80 e2       	ldi	r24, 0x20	; 32
    de0e:	fe 01       	movw	r30, r28
    de10:	11 92       	st	Z+, r1
    de12:	8a 95       	dec	r24
    de14:	e9 f7       	brne	.-6      	; 0xde10 <_ZN10SdBaseFile4openEPS_PKhh+0xfc>
    memcpy(p->name, dname, 11);
    de16:	de 01       	movw	r26, r28
    de18:	29 2d       	mov	r18, r9
    de1a:	38 2d       	mov	r19, r8
    de1c:	c9 01       	movw	r24, r18
    de1e:	fc 01       	movw	r30, r24
    de20:	8b e0       	ldi	r24, 0x0B	; 11
    de22:	01 90       	ld	r0, Z+
    de24:	0d 92       	st	X+, r0
    de26:	81 50       	subi	r24, 0x01	; 1
    de28:	e1 f7       	brne	.-8      	; 0xde22 <_ZN10SdBaseFile4openEPS_PKhh+0x10e>

    // set timestamps
    if (dateTime_) {
    de2a:	e0 91 d9 22 	lds	r30, 0x22D9
    de2e:	f0 91 da 22 	lds	r31, 0x22DA
    de32:	30 97       	sbiw	r30, 0x00	; 0
    de34:	39 f0       	breq	.+14     	; 0xde44 <_ZN10SdBaseFile4openEPS_PKhh+0x130>
      // call user date/time function
      dateTime_(&p->creationDate, &p->creationTime);
    de36:	be 01       	movw	r22, r28
    de38:	62 5f       	subi	r22, 0xF2	; 242
    de3a:	7f 4f       	sbci	r23, 0xFF	; 255
    de3c:	ce 01       	movw	r24, r28
    de3e:	40 96       	adiw	r24, 0x10	; 16
    de40:	19 95       	eicall
    de42:	08 c0       	rjmp	.+16     	; 0xde54 <_ZN10SdBaseFile4openEPS_PKhh+0x140>
    } else {
      // use default date/time
      p->creationDate = FAT_DEFAULT_DATE;
    de44:	81 e2       	ldi	r24, 0x21	; 33
    de46:	98 e2       	ldi	r25, 0x28	; 40
    de48:	88 8b       	std	Y+16, r24	; 0x10
    de4a:	99 8b       	std	Y+17, r25	; 0x11
      p->creationTime = FAT_DEFAULT_TIME;
    de4c:	80 e0       	ldi	r24, 0x00	; 0
    de4e:	98 e0       	ldi	r25, 0x08	; 8
    de50:	8e 87       	std	Y+14, r24	; 0x0e
    de52:	9f 87       	std	Y+15, r25	; 0x0f
    }
    p->lastAccessDate = p->creationDate;
    de54:	88 89       	ldd	r24, Y+16	; 0x10
    de56:	99 89       	ldd	r25, Y+17	; 0x11
    de58:	8a 8b       	std	Y+18, r24	; 0x12
    de5a:	9b 8b       	std	Y+19, r25	; 0x13
    p->lastWriteDate = p->creationDate;
    de5c:	88 8f       	std	Y+24, r24	; 0x18
    de5e:	99 8f       	std	Y+25, r25	; 0x19
    p->lastWriteTime = p->creationTime;
    de60:	8e 85       	ldd	r24, Y+14	; 0x0e
    de62:	9f 85       	ldd	r25, Y+15	; 0x0f
    de64:	8e 8b       	std	Y+22, r24	; 0x16
    de66:	9f 8b       	std	Y+23, r25	; 0x17

    // write entry to SD
    if (!dirFile->vol_->cacheSync()) {
    de68:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    de6c:	88 23       	and	r24, r24
    de6e:	31 f0       	breq	.+12     	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // open entry in cache
  return openCachedEntry(index, oflag);
    de70:	c6 01       	movw	r24, r12
    de72:	61 2f       	mov	r22, r17
    de74:	4a 2d       	mov	r20, r10
    de76:	0e 94 87 66 	call	0xcd0e	; 0xcd0e <_ZN10SdBaseFile15openCachedEntryEhh>
    de7a:	01 c0       	rjmp	.+2      	; 0xde7e <_ZN10SdBaseFile4openEPS_PKhh+0x16a>
    de7c:	80 e0       	ldi	r24, 0x00	; 0

 fail:

  return false;
}
    de7e:	df 91       	pop	r29
    de80:	cf 91       	pop	r28
    de82:	1f 91       	pop	r17
    de84:	0f 91       	pop	r16
    de86:	ff 90       	pop	r15
    de88:	ef 90       	pop	r14
    de8a:	df 90       	pop	r13
    de8c:	cf 90       	pop	r12
    de8e:	bf 90       	pop	r11
    de90:	af 90       	pop	r10
    de92:	9f 90       	pop	r9
    de94:	8f 90       	pop	r8
    de96:	08 95       	ret
      break;
    }
  }
  if (fileFound) {
    // don't open existing file if O_EXCL
    if (oflag & O_EXCL) {
    de98:	a7 fe       	sbrs	r10, 7
    de9a:	ea cf       	rjmp	.-44     	; 0xde70 <_ZN10SdBaseFile4openEPS_PKhh+0x15c>
    de9c:	ef cf       	rjmp	.-34     	; 0xde7c <_ZN10SdBaseFile4openEPS_PKhh+0x168>

0000de9e <_ZN10SdBaseFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this file is already open, \a dirFile is not
 * a directory, \a path is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
bool SdBaseFile::open(SdBaseFile* dirFile, const char* path, uint8_t oflag) {
    de9e:	2f 92       	push	r2
    dea0:	3f 92       	push	r3
    dea2:	4f 92       	push	r4
    dea4:	5f 92       	push	r5
    dea6:	6f 92       	push	r6
    dea8:	7f 92       	push	r7
    deaa:	8f 92       	push	r8
    deac:	9f 92       	push	r9
    deae:	af 92       	push	r10
    deb0:	bf 92       	push	r11
    deb2:	cf 92       	push	r12
    deb4:	df 92       	push	r13
    deb6:	ef 92       	push	r14
    deb8:	ff 92       	push	r15
    deba:	0f 93       	push	r16
    debc:	1f 93       	push	r17
    debe:	df 93       	push	r29
    dec0:	cf 93       	push	r28
    dec2:	cd b7       	in	r28, 0x3d	; 61
    dec4:	de b7       	in	r29, 0x3e	; 62
    dec6:	c6 54       	subi	r28, 0x46	; 70
    dec8:	d0 40       	sbci	r29, 0x00	; 0
    deca:	cd bf       	out	0x3d, r28	; 61
    decc:	de bf       	out	0x3e, r29	; 62
    dece:	3c 01       	movw	r6, r24
    ded0:	6b 01       	movw	r12, r22
    ded2:	de 01       	movw	r26, r28
    ded4:	ae 5b       	subi	r26, 0xBE	; 190
    ded6:	bf 4f       	sbci	r27, 0xFF	; 255
    ded8:	4d 93       	st	X+, r20
    deda:	5c 93       	st	X, r21
    dedc:	11 97       	sbiw	r26, 0x01	; 1
    dede:	25 96       	adiw	r28, 0x05	; 5
    dee0:	2f af       	std	Y+63, r18	; 0x3f
    dee2:	25 97       	sbiw	r28, 0x05	; 5
  uint8_t dname[11];
  SdBaseFile dir1, dir2;
  SdBaseFile *parent = dirFile;
  SdBaseFile *sub = &dir1;

  if (!dirFile) {
    dee4:	61 15       	cp	r22, r1
    dee6:	71 05       	cpc	r23, r1
    dee8:	09 f4       	brne	.+2      	; 0xdeec <_ZN10SdBaseFile4openEPS_PKch+0x4e>
    deea:	83 c0       	rjmp	.+262    	; 0xdff2 <_ZN10SdBaseFile4openEPS_PKch+0x154>
 * \brief Base class for SdFile with Print and C++ streams.
 */
class SdBaseFile {
 public:
  /** Create an instance. */
  SdBaseFile() : writeError(false), type_(FAT_FILE_TYPE_CLOSED) {}
    deec:	1f 86       	std	Y+15, r1	; 0x0f
    DBG_FAIL_MACRO;
    goto fail;
  }
  // error if already open
  if (isOpen()) {
    deee:	1a a6       	std	Y+42, r1	; 0x2a
    def0:	fc 01       	movw	r30, r24
    def2:	83 81       	ldd	r24, Z+3	; 0x03
    def4:	88 23       	and	r24, r24
    def6:	09 f0       	breq	.+2      	; 0xdefa <_ZN10SdBaseFile4openEPS_PKch+0x5c>
    def8:	7c c0       	rjmp	.+248    	; 0xdff2 <_ZN10SdBaseFile4openEPS_PKch+0x154>
    defa:	1c 86       	std	Y+12, r1	; 0x0c
    defc:	1f a2       	std	Y+39, r1	; 0x27
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    defe:	fa 01       	movw	r30, r20
    df00:	80 81       	ld	r24, Z
    df02:	8f 32       	cpi	r24, 0x2F	; 47
    df04:	f1 f0       	breq	.+60     	; 0xdf42 <_ZN10SdBaseFile4openEPS_PKch+0xa4>
    df06:	86 01       	movw	r16, r12
    df08:	4c e0       	ldi	r20, 0x0C	; 12
    df0a:	e4 2e       	mov	r14, r20
    df0c:	f1 2c       	mov	r15, r1
    df0e:	ec 0e       	add	r14, r28
    df10:	fd 1e       	adc	r15, r29
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    df12:	32 e4       	ldi	r19, 0x42	; 66
    df14:	a3 2e       	mov	r10, r19
    df16:	b1 2c       	mov	r11, r1
    df18:	ac 0e       	add	r10, r28
    df1a:	bd 1e       	adc	r11, r29
    df1c:	4e 01       	movw	r8, r28
    df1e:	08 94       	sec
    df20:	81 1c       	adc	r8, r1
    df22:	91 1c       	adc	r9, r1
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    df24:	27 96       	adiw	r28, 0x07	; 7
    df26:	ee ae       	std	Y+62, r14	; 0x3e
    df28:	ff ae       	std	Y+63, r15	; 0x3f
    df2a:	27 97       	sbiw	r28, 0x07	; 7
    df2c:	27 e2       	ldi	r18, 0x27	; 39
    df2e:	22 2e       	mov	r2, r18
    df30:	31 2c       	mov	r3, r1
    df32:	2c 0e       	add	r2, r28
    df34:	3d 1e       	adc	r3, r29
  if (*path == '/') {
    while (*path == '/') path++;
    if (!dirFile->isRoot()) {
      if (!dir2.openRoot(dirFile->vol_)) {
        DBG_FAIL_MACRO;
        goto fail;
    df36:	27 01       	movw	r4, r14
    df38:	24 c0       	rjmp	.+72     	; 0xdf82 <_ZN10SdBaseFile4openEPS_PKch+0xe4>
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    df3a:	11 96       	adiw	r26, 0x01	; 1
    df3c:	a0 83       	st	Z, r26
    df3e:	b1 83       	std	Z+1, r27	; 0x01
    df40:	01 c0       	rjmp	.+2      	; 0xdf44 <_ZN10SdBaseFile4openEPS_PKch+0xa6>
    df42:	fd 01       	movw	r30, r26
    df44:	a0 81       	ld	r26, Z
    df46:	b1 81       	ldd	r27, Z+1	; 0x01
    df48:	8c 91       	ld	r24, X
    df4a:	8f 32       	cpi	r24, 0x2F	; 47
    df4c:	b1 f3       	breq	.-20     	; 0xdf3a <_ZN10SdBaseFile4openEPS_PKch+0x9c>
    if (!dirFile->isRoot()) {
    df4e:	d6 01       	movw	r26, r12
    df50:	13 96       	adiw	r26, 0x03	; 3
    df52:	8c 91       	ld	r24, X
    df54:	13 97       	sbiw	r26, 0x03	; 3
    df56:	82 50       	subi	r24, 0x02	; 2
    df58:	82 30       	cpi	r24, 0x02	; 2
    df5a:	a8 f2       	brcs	.-86     	; 0xdf06 <_ZN10SdBaseFile4openEPS_PKch+0x68>
      if (!dir2.openRoot(dirFile->vol_)) {
    df5c:	8e 01       	movw	r16, r28
    df5e:	09 5d       	subi	r16, 0xD9	; 217
    df60:	1f 4f       	sbci	r17, 0xFF	; 255
    df62:	15 96       	adiw	r26, 0x05	; 5
    df64:	6d 91       	ld	r22, X+
    df66:	7c 91       	ld	r23, X
    df68:	16 97       	sbiw	r26, 0x06	; 6
    df6a:	c8 01       	movw	r24, r16
    df6c:	0e 94 41 64 	call	0xc882	; 0xc882 <_ZN10SdBaseFile8openRootEP8SdVolume>
    df70:	88 23       	and	r24, r24
    df72:	51 f6       	brne	.-108    	; 0xdf08 <_ZN10SdBaseFile4openEPS_PKch+0x6a>
    df74:	3e c0       	rjmp	.+124    	; 0xdff2 <_ZN10SdBaseFile4openEPS_PKch+0x154>
        DBG_FAIL_MACRO;
        goto fail;
    df76:	34 2d       	mov	r19, r4
    df78:	25 2d       	mov	r18, r5
    df7a:	87 01       	movw	r16, r14
    df7c:	83 2f       	mov	r24, r19
    df7e:	92 2f       	mov	r25, r18
    df80:	7c 01       	movw	r14, r24
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    df82:	f5 01       	movw	r30, r10
    df84:	80 81       	ld	r24, Z
    df86:	91 81       	ldd	r25, Z+1	; 0x01
    df88:	b4 01       	movw	r22, r8
    df8a:	a5 01       	movw	r20, r10
    df8c:	0e 94 93 63 	call	0xc726	; 0xc726 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    df90:	88 23       	and	r24, r24
    df92:	29 f4       	brne	.+10     	; 0xdf9e <_ZN10SdBaseFile4openEPS_PKch+0x100>
    df94:	2e c0       	rjmp	.+92     	; 0xdff2 <_ZN10SdBaseFile4openEPS_PKch+0x154>
      DBG_FAIL_MACRO;
      goto fail;
    }
    while (*path == '/') path++;
    df96:	31 96       	adiw	r30, 0x01	; 1
    df98:	d5 01       	movw	r26, r10
    df9a:	ed 93       	st	X+, r30
    df9c:	fc 93       	st	X, r31
    df9e:	d5 01       	movw	r26, r10
    dfa0:	ed 91       	ld	r30, X+
    dfa2:	fc 91       	ld	r31, X
    dfa4:	80 81       	ld	r24, Z
    dfa6:	8f 32       	cpi	r24, 0x2F	; 47
    dfa8:	b1 f3       	breq	.-20     	; 0xdf96 <_ZN10SdBaseFile4openEPS_PKch+0xf8>
    if (!*path) break;
    dfaa:	88 23       	and	r24, r24
    dfac:	c9 f0       	breq	.+50     	; 0xdfe0 <_ZN10SdBaseFile4openEPS_PKch+0x142>
    if (!sub->open(parent, dname, O_READ)) {
    dfae:	c7 01       	movw	r24, r14
    dfb0:	b8 01       	movw	r22, r16
    dfb2:	a4 01       	movw	r20, r8
    dfb4:	21 e0       	ldi	r18, 0x01	; 1
    dfb6:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <_ZN10SdBaseFile4openEPS_PKhh>
    dfba:	88 23       	and	r24, r24
    dfbc:	d1 f0       	breq	.+52     	; 0xdff2 <_ZN10SdBaseFile4openEPS_PKch+0x154>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (parent != dirFile) parent->close();
    dfbe:	0c 15       	cp	r16, r12
    dfc0:	1d 05       	cpc	r17, r13
    dfc2:	19 f0       	breq	.+6      	; 0xdfca <_ZN10SdBaseFile4openEPS_PKch+0x12c>
    dfc4:	c8 01       	movw	r24, r16
    dfc6:	0e 94 0b 67 	call	0xce16	; 0xce16 <_ZN10SdBaseFile5closeEv>
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    dfca:	27 96       	adiw	r28, 0x07	; 7
    dfcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    dfce:	ff ad       	ldd	r31, Y+63	; 0x3f
    dfd0:	27 97       	sbiw	r28, 0x07	; 7
    dfd2:	ee 16       	cp	r14, r30
    dfd4:	ff 06       	cpc	r15, r31
    dfd6:	79 f6       	brne	.-98     	; 0xdf76 <_ZN10SdBaseFile4openEPS_PKch+0xd8>
    dfd8:	c1 01       	movw	r24, r2
    dfda:	32 2d       	mov	r19, r2
    dfdc:	29 2f       	mov	r18, r25
    dfde:	cd cf       	rjmp	.-102    	; 0xdf7a <_ZN10SdBaseFile4openEPS_PKch+0xdc>
  }

  return open(parent, dname, oflag);
    dfe0:	c3 01       	movw	r24, r6
    dfe2:	b8 01       	movw	r22, r16
    dfe4:	a4 01       	movw	r20, r8
    dfe6:	25 96       	adiw	r28, 0x05	; 5
    dfe8:	2f ad       	ldd	r18, Y+63	; 0x3f
    dfea:	25 97       	sbiw	r28, 0x05	; 5
    dfec:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <_ZN10SdBaseFile4openEPS_PKhh>
    dff0:	01 c0       	rjmp	.+2      	; 0xdff4 <_ZN10SdBaseFile4openEPS_PKch+0x156>
    dff2:	80 e0       	ldi	r24, 0x00	; 0

 fail:

  return false;
}
    dff4:	ca 5b       	subi	r28, 0xBA	; 186
    dff6:	df 4f       	sbci	r29, 0xFF	; 255
    dff8:	cd bf       	out	0x3d, r28	; 61
    dffa:	de bf       	out	0x3e, r29	; 62
    dffc:	cf 91       	pop	r28
    dffe:	df 91       	pop	r29
    e000:	1f 91       	pop	r17
    e002:	0f 91       	pop	r16
    e004:	ff 90       	pop	r15
    e006:	ef 90       	pop	r14
    e008:	df 90       	pop	r13
    e00a:	cf 90       	pop	r12
    e00c:	bf 90       	pop	r11
    e00e:	af 90       	pop	r10
    e010:	9f 90       	pop	r9
    e012:	8f 90       	pop	r8
    e014:	7f 90       	pop	r7
    e016:	6f 90       	pop	r6
    e018:	5f 90       	pop	r5
    e01a:	4f 90       	pop	r4
    e01c:	3f 90       	pop	r3
    e01e:	2f 90       	pop	r2
    e020:	08 95       	ret

0000e022 <_ZN10SdBaseFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a path is not found
 * or an I/O error occurred.
 */
bool SdBaseFile::remove(SdBaseFile* dirFile, const char* path) {
    e022:	0f 93       	push	r16
    e024:	1f 93       	push	r17
    e026:	df 93       	push	r29
    e028:	cf 93       	push	r28
    e02a:	cd b7       	in	r28, 0x3d	; 61
    e02c:	de b7       	in	r29, 0x3e	; 62
    e02e:	6b 97       	sbiw	r28, 0x1b	; 27
    e030:	cd bf       	out	0x3d, r28	; 61
    e032:	de bf       	out	0x3e, r29	; 62
    e034:	9c 01       	movw	r18, r24
    e036:	ab 01       	movw	r20, r22
    e038:	19 82       	std	Y+1, r1	; 0x01
    e03a:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile file;
  if (!file.open(dirFile, path, O_WRITE)) {
    e03c:	8e 01       	movw	r16, r28
    e03e:	0f 5f       	subi	r16, 0xFF	; 255
    e040:	1f 4f       	sbci	r17, 0xFF	; 255
    e042:	c8 01       	movw	r24, r16
    e044:	b9 01       	movw	r22, r18
    e046:	22 e0       	ldi	r18, 0x02	; 2
    e048:	0e 94 4f 6f 	call	0xde9e	; 0xde9e <_ZN10SdBaseFile4openEPS_PKch>
    e04c:	88 23       	and	r24, r24
    e04e:	19 f0       	breq	.+6      	; 0xe056 <_ZN10SdBaseFile6removeEPS_PKc+0x34>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
    e050:	c8 01       	movw	r24, r16
    e052:	0e 94 15 67 	call	0xce2a	; 0xce2a <_ZN10SdBaseFile6removeEv>

 fail:
  return false;
}
    e056:	6b 96       	adiw	r28, 0x1b	; 27
    e058:	cd bf       	out	0x3d, r28	; 61
    e05a:	de bf       	out	0x3e, r29	; 62
    e05c:	cf 91       	pop	r28
    e05e:	df 91       	pop	r29
    e060:	1f 91       	pop	r17
    e062:	0f 91       	pop	r16
    e064:	08 95       	ret

0000e066 <_ZN10SdBaseFile4openEPKch>:
  * OR of open flags. see SdBaseFile::open(SdBaseFile*, const char*, uint8_t).
  *
  * \return The value one, true, is returned for success and
  * the value zero, false, is returned for failure.
  */
  bool SdBaseFile::open(const char* path, uint8_t oflag) {
    e066:	fb 01       	movw	r30, r22
    e068:	24 2f       	mov	r18, r20
    return open(cwd_, path, oflag);
    e06a:	60 91 d7 22 	lds	r22, 0x22D7
    e06e:	70 91 d8 22 	lds	r23, 0x22D8
    e072:	af 01       	movw	r20, r30
    e074:	0e 94 4f 6f 	call	0xde9e	; 0xde9e <_ZN10SdBaseFile4openEPS_PKch>
  }
    e078:	08 95       	ret

0000e07a <_ZN10SdBaseFile5mkdirEPS_PKh>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdBaseFile::mkdir(SdBaseFile* parent, const uint8_t dname[11]) {
    e07a:	ef 92       	push	r14
    e07c:	ff 92       	push	r15
    e07e:	0f 93       	push	r16
    e080:	1f 93       	push	r17
    e082:	df 93       	push	r29
    e084:	cf 93       	push	r28
    e086:	cd b7       	in	r28, 0x3d	; 61
    e088:	de b7       	in	r29, 0x3e	; 62
    e08a:	a0 97       	sbiw	r28, 0x20	; 32
    e08c:	cd bf       	out	0x3d, r28	; 61
    e08e:	de bf       	out	0x3e, r29	; 62
    e090:	8c 01       	movw	r16, r24
    e092:	7b 01       	movw	r14, r22
  uint32_t block;
  dir_t d;
  dir_t* p;
  cache_t* pc;

  if (!parent->isDir()) {
    e094:	fb 01       	movw	r30, r22
    e096:	83 81       	ldd	r24, Z+3	; 0x03
    e098:	82 30       	cpi	r24, 0x02	; 2
    e09a:	08 f4       	brcc	.+2      	; 0xe09e <_ZN10SdBaseFile5mkdirEPS_PKh+0x24>
    e09c:	71 c0       	rjmp	.+226    	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, dname, O_CREAT | O_EXCL | O_RDWR)) {
    e09e:	c8 01       	movw	r24, r16
    e0a0:	23 ec       	ldi	r18, 0xC3	; 195
    e0a2:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <_ZN10SdBaseFile4openEPS_PKhh>
    e0a6:	88 23       	and	r24, r24
    e0a8:	09 f4       	brne	.+2      	; 0xe0ac <_ZN10SdBaseFile5mkdirEPS_PKh+0x32>
    e0aa:	6a c0       	rjmp	.+212    	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  flags_ = O_READ;
    e0ac:	81 e0       	ldi	r24, 0x01	; 1
    e0ae:	f8 01       	movw	r30, r16
    e0b0:	81 83       	std	Z+1, r24	; 0x01
  type_ = FAT_FILE_TYPE_SUBDIR;
    e0b2:	84 e0       	ldi	r24, 0x04	; 4
    e0b4:	83 83       	std	Z+3, r24	; 0x03

  // allocate and zero first cluster
  if (!addDirCluster()) {
    e0b6:	c8 01       	movw	r24, r16
    e0b8:	0e 94 08 6e 	call	0xdc10	; 0xdc10 <_ZN10SdBaseFile13addDirClusterEv>
    e0bc:	89 2b       	or	r24, r25
    e0be:	09 f4       	brne	.+2      	; 0xe0c2 <_ZN10SdBaseFile5mkdirEPS_PKh+0x48>
    e0c0:	5f c0       	rjmp	.+190    	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // force entry to SD
  if (!sync()) {
    e0c2:	c8 01       	movw	r24, r16
    e0c4:	0e 94 6d 65 	call	0xcada	; 0xcada <_ZN10SdBaseFile4syncEv>
    e0c8:	88 23       	and	r24, r24
    e0ca:	09 f4       	brne	.+2      	; 0xe0ce <_ZN10SdBaseFile5mkdirEPS_PKh+0x54>
    e0cc:	59 c0       	rjmp	.+178    	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    e0ce:	c8 01       	movw	r24, r16
    e0d0:	61 e0       	ldi	r22, 0x01	; 1
    e0d2:	0e 94 32 65 	call	0xca64	; 0xca64 <_ZN10SdBaseFile13cacheDirEntryEh>
    e0d6:	fc 01       	movw	r30, r24
  if (!p) {
    e0d8:	00 97       	sbiw	r24, 0x00	; 0
    e0da:	09 f4       	brne	.+2      	; 0xe0de <_ZN10SdBaseFile5mkdirEPS_PKh+0x64>
    e0dc:	51 c0       	rjmp	.+162    	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;
    e0de:	80 e1       	ldi	r24, 0x10	; 16
    e0e0:	83 87       	std	Z+11, r24	; 0x0b

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    e0e2:	de 01       	movw	r26, r28
    e0e4:	11 96       	adiw	r26, 0x01	; 1
    e0e6:	80 e2       	ldi	r24, 0x20	; 32
    e0e8:	01 90       	ld	r0, Z+
    e0ea:	0d 92       	st	X+, r0
    e0ec:	81 50       	subi	r24, 0x01	; 1
    e0ee:	e1 f7       	brne	.-8      	; 0xe0e8 <_ZN10SdBaseFile5mkdirEPS_PKh+0x6e>
  d.name[0] = '.';
    e0f0:	8e e2       	ldi	r24, 0x2E	; 46
    e0f2:	89 83       	std	Y+1, r24	; 0x01
    e0f4:	fe 01       	movw	r30, r28
    e0f6:	32 96       	adiw	r30, 0x02	; 2
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
    e0f8:	20 e2       	ldi	r18, 0x20	; 32
    e0fa:	ce 01       	movw	r24, r28
    e0fc:	0c 96       	adiw	r24, 0x0c	; 12
    e0fe:	21 93       	st	Z+, r18
    e100:	e8 17       	cp	r30, r24
    e102:	f9 07       	cpc	r31, r25
    e104:	e1 f7       	brne	.-8      	; 0xe0fe <_ZN10SdBaseFile5mkdirEPS_PKh+0x84>

  // cache block for '.'  and '..'
  block = vol_->clusterStartBlock(firstCluster_);
    e106:	f8 01       	movw	r30, r16
    e108:	47 89       	ldd	r20, Z+23	; 0x17
    e10a:	50 8d       	ldd	r21, Z+24	; 0x18
    e10c:	61 8d       	ldd	r22, Z+25	; 0x19
    e10e:	72 8d       	ldd	r23, Z+26	; 0x1a
    e110:	85 81       	ldd	r24, Z+5	; 0x05
    e112:	96 81       	ldd	r25, Z+6	; 0x06
    e114:	0e 94 90 72 	call	0xe520	; 0xe520 <_ZNK8SdVolume17clusterStartBlockEm>
  pc = vol_->cacheFetch(block, SdVolume::CACHE_FOR_WRITE);
    e118:	41 e0       	ldi	r20, 0x01	; 1
    e11a:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
    e11e:	9c 01       	movw	r18, r24
  if (!pc) {
    e120:	00 97       	sbiw	r24, 0x00	; 0
    e122:	71 f1       	breq	.+92     	; 0xe180 <_ZN10SdBaseFile5mkdirEPS_PKh+0x106>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to block
  memcpy(&pc->dir[0], &d, sizeof(d));
    e124:	dc 01       	movw	r26, r24
    e126:	fe 01       	movw	r30, r28
    e128:	31 96       	adiw	r30, 0x01	; 1
    e12a:	80 e2       	ldi	r24, 0x20	; 32
    e12c:	01 90       	ld	r0, Z+
    e12e:	0d 92       	st	X+, r0
    e130:	81 50       	subi	r24, 0x01	; 1
    e132:	e1 f7       	brne	.-8      	; 0xe12c <_ZN10SdBaseFile5mkdirEPS_PKh+0xb2>
  // make entry for '..'
  d.name[1] = '.';
    e134:	8e e2       	ldi	r24, 0x2E	; 46
    e136:	8a 83       	std	Y+2, r24	; 0x02
  if (parent->isRoot()) {
    e138:	f7 01       	movw	r30, r14
    e13a:	83 81       	ldd	r24, Z+3	; 0x03
    e13c:	82 50       	subi	r24, 0x02	; 2
    e13e:	82 30       	cpi	r24, 0x02	; 2
    e140:	28 f4       	brcc	.+10     	; 0xe14c <_ZN10SdBaseFile5mkdirEPS_PKh+0xd2>
    d.firstClusterLow = 0;
    e142:	1b 8e       	std	Y+27, r1	; 0x1b
    e144:	1c 8e       	std	Y+28, r1	; 0x1c
    d.firstClusterHigh = 0;
    e146:	1d 8a       	std	Y+21, r1	; 0x15
    e148:	1e 8a       	std	Y+22, r1	; 0x16
    e14a:	0e c0       	rjmp	.+28     	; 0xe168 <_ZN10SdBaseFile5mkdirEPS_PKh+0xee>
  } else {
    d.firstClusterLow = parent->firstCluster_ & 0XFFFF;
    e14c:	f7 01       	movw	r30, r14
    e14e:	87 89       	ldd	r24, Z+23	; 0x17
    e150:	90 8d       	ldd	r25, Z+24	; 0x18
    e152:	8b 8f       	std	Y+27, r24	; 0x1b
    e154:	9c 8f       	std	Y+28, r25	; 0x1c
    d.firstClusterHigh = parent->firstCluster_ >> 16;
    e156:	87 89       	ldd	r24, Z+23	; 0x17
    e158:	90 8d       	ldd	r25, Z+24	; 0x18
    e15a:	a1 8d       	ldd	r26, Z+25	; 0x19
    e15c:	b2 8d       	ldd	r27, Z+26	; 0x1a
    e15e:	cd 01       	movw	r24, r26
    e160:	aa 27       	eor	r26, r26
    e162:	bb 27       	eor	r27, r27
    e164:	8d 8b       	std	Y+21, r24	; 0x15
    e166:	9e 8b       	std	Y+22, r25	; 0x16
  }
  // copy '..' to block
  memcpy(&pc->dir[1], &d, sizeof(d));
    e168:	d9 01       	movw	r26, r18
    e16a:	90 96       	adiw	r26, 0x20	; 32
    e16c:	fe 01       	movw	r30, r28
    e16e:	31 96       	adiw	r30, 0x01	; 1
    e170:	80 e2       	ldi	r24, 0x20	; 32
    e172:	01 90       	ld	r0, Z+
    e174:	0d 92       	st	X+, r0
    e176:	81 50       	subi	r24, 0x01	; 1
    e178:	e1 f7       	brne	.-8      	; 0xe172 <_ZN10SdBaseFile5mkdirEPS_PKh+0xf8>
  // write first block
  return vol_->cacheSync();
    e17a:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    e17e:	01 c0       	rjmp	.+2      	; 0xe182 <_ZN10SdBaseFile5mkdirEPS_PKh+0x108>
    e180:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    e182:	a0 96       	adiw	r28, 0x20	; 32
    e184:	cd bf       	out	0x3d, r28	; 61
    e186:	de bf       	out	0x3e, r29	; 62
    e188:	cf 91       	pop	r28
    e18a:	df 91       	pop	r29
    e18c:	1f 91       	pop	r17
    e18e:	0f 91       	pop	r16
    e190:	ff 90       	pop	r15
    e192:	ef 90       	pop	r14
    e194:	08 95       	ret

0000e196 <_ZN10SdBaseFile5mkdirEPS_PKcb>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this file is already open, \a parent is not a
 * directory, \a path is invalid or already exists in \a parent.
 */
bool SdBaseFile::mkdir(SdBaseFile* parent, const char* path, bool pFlag) {
    e196:	2f 92       	push	r2
    e198:	3f 92       	push	r3
    e19a:	4f 92       	push	r4
    e19c:	5f 92       	push	r5
    e19e:	6f 92       	push	r6
    e1a0:	7f 92       	push	r7
    e1a2:	8f 92       	push	r8
    e1a4:	9f 92       	push	r9
    e1a6:	af 92       	push	r10
    e1a8:	bf 92       	push	r11
    e1aa:	cf 92       	push	r12
    e1ac:	df 92       	push	r13
    e1ae:	ef 92       	push	r14
    e1b0:	ff 92       	push	r15
    e1b2:	0f 93       	push	r16
    e1b4:	1f 93       	push	r17
    e1b6:	df 93       	push	r29
    e1b8:	cf 93       	push	r28
    e1ba:	cd b7       	in	r28, 0x3d	; 61
    e1bc:	de b7       	in	r29, 0x3e	; 62
    e1be:	c6 54       	subi	r28, 0x46	; 70
    e1c0:	d0 40       	sbci	r29, 0x00	; 0
    e1c2:	cd bf       	out	0x3d, r28	; 61
    e1c4:	de bf       	out	0x3e, r29	; 62
    e1c6:	3c 01       	movw	r6, r24
    e1c8:	6b 01       	movw	r12, r22
    e1ca:	de 01       	movw	r26, r28
    e1cc:	ae 5b       	subi	r26, 0xBE	; 190
    e1ce:	bf 4f       	sbci	r27, 0xFF	; 255
    e1d0:	4d 93       	st	X+, r20
    e1d2:	5c 93       	st	X, r21
    e1d4:	11 97       	sbiw	r26, 0x01	; 1
    e1d6:	25 96       	adiw	r28, 0x05	; 5
    e1d8:	2f af       	std	Y+63, r18	; 0x3f
    e1da:	25 97       	sbiw	r28, 0x05	; 5
  uint8_t dname[11];
  SdBaseFile dir1, dir2;
  SdBaseFile* sub = &dir1;
  SdBaseFile* start = parent;

  if (!parent || isOpen()) {
    e1dc:	61 15       	cp	r22, r1
    e1de:	71 05       	cpc	r23, r1
    e1e0:	09 f4       	brne	.+2      	; 0xe1e4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x4e>
    e1e2:	87 c0       	rjmp	.+270    	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
    e1e4:	1f 86       	std	Y+15, r1	; 0x0f
    e1e6:	1a a6       	std	Y+42, r1	; 0x2a
    e1e8:	fc 01       	movw	r30, r24
    e1ea:	83 81       	ldd	r24, Z+3	; 0x03
    e1ec:	88 23       	and	r24, r24
    e1ee:	09 f0       	breq	.+2      	; 0xe1f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x5c>
    e1f0:	80 c0       	rjmp	.+256    	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
    e1f2:	97 c0       	rjmp	.+302    	; 0xe322 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x18c>
    e1f4:	86 01       	movw	r16, r12
    e1f6:	ec e0       	ldi	r30, 0x0C	; 12
    e1f8:	ee 2e       	mov	r14, r30
    e1fa:	f1 2c       	mov	r15, r1
    e1fc:	ec 0e       	add	r14, r28
    e1fe:	fd 1e       	adc	r15, r29
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    e200:	72 e4       	ldi	r23, 0x42	; 66
    e202:	a7 2e       	mov	r10, r23
    e204:	b1 2c       	mov	r11, r1
    e206:	ac 0e       	add	r10, r28
    e208:	bd 1e       	adc	r11, r29
    e20a:	4e 01       	movw	r8, r28
    e20c:	08 94       	sec
    e20e:	81 1c       	adc	r8, r1
    e210:	91 1c       	adc	r9, r1
        goto fail;
      }
    }
    if (parent != start) parent->close();
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    e212:	27 96       	adiw	r28, 0x07	; 7
    e214:	ee ae       	std	Y+62, r14	; 0x3e
    e216:	ff ae       	std	Y+63, r15	; 0x3f
    e218:	27 97       	sbiw	r28, 0x07	; 7
    e21a:	67 e2       	ldi	r22, 0x27	; 39
    e21c:	26 2e       	mov	r2, r22
    e21e:	31 2c       	mov	r3, r1
    e220:	2c 0e       	add	r2, r28
    e222:	3d 1e       	adc	r3, r29
  if (*path == '/') {
    while (*path == '/') path++;
    if (!parent->isRoot()) {
      if (!dir2.openRoot(parent->vol_)) {
        DBG_FAIL_MACRO;
        goto fail;
    e224:	27 01       	movw	r4, r14
    e226:	24 c0       	rjmp	.+72     	; 0xe270 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xda>
  if (!parent || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    while (*path == '/') path++;
    e228:	11 96       	adiw	r26, 0x01	; 1
    e22a:	a0 83       	st	Z, r26
    e22c:	b1 83       	std	Z+1, r27	; 0x01
    e22e:	01 c0       	rjmp	.+2      	; 0xe232 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x9c>
    e230:	fd 01       	movw	r30, r26
    e232:	a0 81       	ld	r26, Z
    e234:	b1 81       	ldd	r27, Z+1	; 0x01
    e236:	8c 91       	ld	r24, X
    e238:	8f 32       	cpi	r24, 0x2F	; 47
    e23a:	b1 f3       	breq	.-20     	; 0xe228 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x92>
    if (!parent->isRoot()) {
    e23c:	d6 01       	movw	r26, r12
    e23e:	13 96       	adiw	r26, 0x03	; 3
    e240:	8c 91       	ld	r24, X
    e242:	13 97       	sbiw	r26, 0x03	; 3
    e244:	82 50       	subi	r24, 0x02	; 2
    e246:	82 30       	cpi	r24, 0x02	; 2
    e248:	a8 f2       	brcs	.-86     	; 0xe1f4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x5e>
      if (!dir2.openRoot(parent->vol_)) {
    e24a:	8e 01       	movw	r16, r28
    e24c:	09 5d       	subi	r16, 0xD9	; 217
    e24e:	1f 4f       	sbci	r17, 0xFF	; 255
    e250:	15 96       	adiw	r26, 0x05	; 5
    e252:	6d 91       	ld	r22, X+
    e254:	7c 91       	ld	r23, X
    e256:	16 97       	sbiw	r26, 0x06	; 6
    e258:	c8 01       	movw	r24, r16
    e25a:	0e 94 41 64 	call	0xc882	; 0xc882 <_ZN10SdBaseFile8openRootEP8SdVolume>
    e25e:	88 23       	and	r24, r24
    e260:	51 f6       	brne	.-108    	; 0xe1f6 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x60>
    e262:	47 c0       	rjmp	.+142    	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
        DBG_FAIL_MACRO;
        goto fail;
    e264:	34 2d       	mov	r19, r4
    e266:	25 2d       	mov	r18, r5
    e268:	87 01       	movw	r16, r14
    e26a:	83 2f       	mov	r24, r19
    e26c:	92 2f       	mov	r25, r18
    e26e:	7c 01       	movw	r14, r24
      }
      parent = &dir2;
    }
  }
  while (1) {
    if (!make83Name(path, dname, &path)) {
    e270:	f5 01       	movw	r30, r10
    e272:	80 81       	ld	r24, Z
    e274:	91 81       	ldd	r25, Z+1	; 0x01
    e276:	b4 01       	movw	r22, r8
    e278:	a5 01       	movw	r20, r10
    e27a:	0e 94 93 63 	call	0xc726	; 0xc726 <_ZN10SdBaseFile10make83NameEPKcPhPS1_>
    e27e:	88 23       	and	r24, r24
    e280:	29 f4       	brne	.+10     	; 0xe28c <_ZN10SdBaseFile5mkdirEPS_PKcb+0xf6>
    e282:	37 c0       	rjmp	.+110    	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    while (*path == '/') path++;
    e284:	31 96       	adiw	r30, 0x01	; 1
    e286:	d5 01       	movw	r26, r10
    e288:	ed 93       	st	X+, r30
    e28a:	fc 93       	st	X, r31
    e28c:	d5 01       	movw	r26, r10
    e28e:	ed 91       	ld	r30, X+
    e290:	fc 91       	ld	r31, X
    e292:	80 81       	ld	r24, Z
    e294:	8f 32       	cpi	r24, 0x2F	; 47
    e296:	b1 f3       	breq	.-20     	; 0xe284 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xee>
    if (!*path) break;
    e298:	88 23       	and	r24, r24
    e29a:	29 f1       	breq	.+74     	; 0xe2e6 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x150>
    if (!sub->open(parent, dname, O_READ)) {
    e29c:	c7 01       	movw	r24, r14
    e29e:	b8 01       	movw	r22, r16
    e2a0:	a4 01       	movw	r20, r8
    e2a2:	21 e0       	ldi	r18, 0x01	; 1
    e2a4:	0e 94 8a 6e 	call	0xdd14	; 0xdd14 <_ZN10SdBaseFile4openEPS_PKhh>
    e2a8:	88 23       	and	r24, r24
    e2aa:	61 f4       	brne	.+24     	; 0xe2c4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x12e>
      if (!pFlag || !sub->mkdir(parent, dname)) {
    e2ac:	25 96       	adiw	r28, 0x05	; 5
    e2ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    e2b0:	25 97       	sbiw	r28, 0x05	; 5
    e2b2:	bb 23       	and	r27, r27
    e2b4:	f1 f0       	breq	.+60     	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
    e2b6:	c7 01       	movw	r24, r14
    e2b8:	b8 01       	movw	r22, r16
    e2ba:	a4 01       	movw	r20, r8
    e2bc:	0e 94 3d 70 	call	0xe07a	; 0xe07a <_ZN10SdBaseFile5mkdirEPS_PKh>
    e2c0:	88 23       	and	r24, r24
    e2c2:	b9 f0       	breq	.+46     	; 0xe2f2 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    if (parent != start) parent->close();
    e2c4:	0c 15       	cp	r16, r12
    e2c6:	1d 05       	cpc	r17, r13
    e2c8:	19 f0       	breq	.+6      	; 0xe2d0 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x13a>
    e2ca:	c8 01       	movw	r24, r16
    e2cc:	0e 94 0b 67 	call	0xce16	; 0xce16 <_ZN10SdBaseFile5closeEv>
    parent = sub;
    sub = parent != &dir1 ? &dir1 : &dir2;
    e2d0:	27 96       	adiw	r28, 0x07	; 7
    e2d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    e2d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    e2d6:	27 97       	sbiw	r28, 0x07	; 7
    e2d8:	ee 16       	cp	r14, r30
    e2da:	ff 06       	cpc	r15, r31
    e2dc:	19 f6       	brne	.-122    	; 0xe264 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xce>
    e2de:	c1 01       	movw	r24, r2
    e2e0:	32 2d       	mov	r19, r2
    e2e2:	29 2f       	mov	r18, r25
    e2e4:	c1 cf       	rjmp	.-126    	; 0xe268 <_ZN10SdBaseFile5mkdirEPS_PKcb+0xd2>
  }
  return mkdir(parent, dname);
    e2e6:	c3 01       	movw	r24, r6
    e2e8:	b8 01       	movw	r22, r16
    e2ea:	a4 01       	movw	r20, r8
    e2ec:	0e 94 3d 70 	call	0xe07a	; 0xe07a <_ZN10SdBaseFile5mkdirEPS_PKh>
    e2f0:	01 c0       	rjmp	.+2      	; 0xe2f4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x15e>
    e2f2:	80 e0       	ldi	r24, 0x00	; 0

 fail:
  return false;
}
    e2f4:	ca 5b       	subi	r28, 0xBA	; 186
    e2f6:	df 4f       	sbci	r29, 0xFF	; 255
    e2f8:	cd bf       	out	0x3d, r28	; 61
    e2fa:	de bf       	out	0x3e, r29	; 62
    e2fc:	cf 91       	pop	r28
    e2fe:	df 91       	pop	r29
    e300:	1f 91       	pop	r17
    e302:	0f 91       	pop	r16
    e304:	ff 90       	pop	r15
    e306:	ef 90       	pop	r14
    e308:	df 90       	pop	r13
    e30a:	cf 90       	pop	r12
    e30c:	bf 90       	pop	r11
    e30e:	af 90       	pop	r10
    e310:	9f 90       	pop	r9
    e312:	8f 90       	pop	r8
    e314:	7f 90       	pop	r7
    e316:	6f 90       	pop	r6
    e318:	5f 90       	pop	r5
    e31a:	4f 90       	pop	r4
    e31c:	3f 90       	pop	r3
    e31e:	2f 90       	pop	r2
    e320:	08 95       	ret
    e322:	1c 86       	std	Y+12, r1	; 0x0c
    e324:	1f a2       	std	Y+39, r1	; 0x27

  if (!parent || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (*path == '/') {
    e326:	ed 91       	ld	r30, X+
    e328:	fc 91       	ld	r31, X
    e32a:	11 97       	sbiw	r26, 0x01	; 1
    e32c:	80 81       	ld	r24, Z
    e32e:	8f 32       	cpi	r24, 0x2F	; 47
    e330:	09 f0       	breq	.+2      	; 0xe334 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x19e>
    e332:	60 cf       	rjmp	.-320    	; 0xe1f4 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x5e>
    e334:	7d cf       	rjmp	.-262    	; 0xe230 <_ZN10SdBaseFile5mkdirEPS_PKcb+0x9a>

0000e336 <_ZN5SdFat5rmdirEPKc>:
 * The subdirectory file will be removed only if it is empty.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::rmdir(const char* path) {
    e336:	0f 93       	push	r16
    e338:	1f 93       	push	r17
    e33a:	df 93       	push	r29
    e33c:	cf 93       	push	r28
    e33e:	cd b7       	in	r28, 0x3d	; 61
    e340:	de b7       	in	r29, 0x3e	; 62
    e342:	6b 97       	sbiw	r28, 0x1b	; 27
    e344:	cd bf       	out	0x3d, r28	; 61
    e346:	de bf       	out	0x3e, r29	; 62
    e348:	19 82       	std	Y+1, r1	; 0x01
    e34a:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile sub;
  if (!sub.open(path, O_READ)) return false;
    e34c:	8e 01       	movw	r16, r28
    e34e:	0f 5f       	subi	r16, 0xFF	; 255
    e350:	1f 4f       	sbci	r17, 0xFF	; 255
    e352:	c8 01       	movw	r24, r16
    e354:	41 e0       	ldi	r20, 0x01	; 1
    e356:	0e 94 33 70 	call	0xe066	; 0xe066 <_ZN10SdBaseFile4openEPKch>
    e35a:	88 23       	and	r24, r24
    e35c:	19 f0       	breq	.+6      	; 0xe364 <_ZN5SdFat5rmdirEPKc+0x2e>
  return sub.rmdir();
    e35e:	c8 01       	movw	r24, r16
    e360:	0e 94 03 69 	call	0xd206	; 0xd206 <_ZN10SdBaseFile5rmdirEv>
}
    e364:	6b 96       	adiw	r28, 0x1b	; 27
    e366:	cd bf       	out	0x3d, r28	; 61
    e368:	de bf       	out	0x3e, r29	; 62
    e36a:	cf 91       	pop	r28
    e36c:	df 91       	pop	r29
    e36e:	1f 91       	pop	r17
    e370:	0f 91       	pop	r16
    e372:	08 95       	ret

0000e374 <_ZN5SdFat6removeEPKc>:
*
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*/
bool SdFat::remove(const char* path) {
  return SdBaseFile::remove(&vwd_, path);
    e374:	83 96       	adiw	r24, 0x23	; 35
    e376:	0e 94 11 70 	call	0xe022	; 0xe022 <_ZN10SdBaseFile6removeEPS_PKc>
}
    e37a:	08 95       	ret

0000e37c <_ZN5SdFat5mkdirEPKcb>:
 * \param[in] pFlag Create missing parent directories if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::mkdir(const char* path, bool pFlag) {
    e37c:	df 93       	push	r29
    e37e:	cf 93       	push	r28
    e380:	cd b7       	in	r28, 0x3d	; 61
    e382:	de b7       	in	r29, 0x3e	; 62
    e384:	6b 97       	sbiw	r28, 0x1b	; 27
    e386:	cd bf       	out	0x3d, r28	; 61
    e388:	de bf       	out	0x3e, r29	; 62
    e38a:	fb 01       	movw	r30, r22
    e38c:	24 2f       	mov	r18, r20
    e38e:	19 82       	std	Y+1, r1	; 0x01
    e390:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile sub;
  return sub.mkdir(&vwd_, path, pFlag);
    e392:	bc 01       	movw	r22, r24
    e394:	6d 5d       	subi	r22, 0xDD	; 221
    e396:	7f 4f       	sbci	r23, 0xFF	; 255
    e398:	ce 01       	movw	r24, r28
    e39a:	01 96       	adiw	r24, 0x01	; 1
    e39c:	af 01       	movw	r20, r30
    e39e:	0e 94 cb 70 	call	0xe196	; 0xe196 <_ZN10SdBaseFile5mkdirEPS_PKcb>
}
    e3a2:	6b 96       	adiw	r28, 0x1b	; 27
    e3a4:	cd bf       	out	0x3d, r28	; 61
    e3a6:	de bf       	out	0x3e, r29	; 62
    e3a8:	cf 91       	pop	r28
    e3aa:	df 91       	pop	r29
    e3ac:	08 95       	ret

0000e3ae <_ZN5SdFat2lsEh>:
 *
 * LS_SIZE - %Print file size.
 *
 * LS_R - Recursive list of subdirectories.
 */
void SdFat::ls(uint8_t flags) {
    e3ae:	46 2f       	mov	r20, r22
  vwd_.ls(stdOut_, flags);
    e3b0:	60 91 24 21 	lds	r22, 0x2124
    e3b4:	70 91 25 21 	lds	r23, 0x2125
    e3b8:	83 96       	adiw	r24, 0x23	; 35
    e3ba:	20 e0       	ldi	r18, 0x00	; 0
    e3bc:	0e 94 7c 6b 	call	0xd6f8	; 0xd6f8 <_ZN10SdBaseFile2lsEP5Printhh>
}
    e3c0:	08 95       	ret

0000e3c2 <_ZN5SdFat5chdirEb>:
 *  working directory if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::chdir(bool set_cwd) {
    e3c2:	cf 93       	push	r28
    e3c4:	df 93       	push	r29
    e3c6:	ec 01       	movw	r28, r24
  if (set_cwd) SdBaseFile::cwd_ = &vwd_;
    e3c8:	66 23       	and	r22, r22
    e3ca:	31 f0       	breq	.+12     	; 0xe3d8 <_ZN5SdFat5chdirEb+0x16>
    e3cc:	a3 96       	adiw	r28, 0x23	; 35
    e3ce:	c0 93 d7 22 	sts	0x22D7, r28
    e3d2:	d0 93 d8 22 	sts	0x22D8, r29
    e3d6:	a3 97       	sbiw	r28, 0x23	; 35
  if (vwd_.isOpen()) vwd_.close();
    e3d8:	8e a1       	ldd	r24, Y+38	; 0x26
    e3da:	88 23       	and	r24, r24
    e3dc:	21 f0       	breq	.+8      	; 0xe3e6 <_ZN5SdFat5chdirEb+0x24>
    e3de:	ce 01       	movw	r24, r28
    e3e0:	83 96       	adiw	r24, 0x23	; 35
    e3e2:	0e 94 0b 67 	call	0xce16	; 0xce16 <_ZN10SdBaseFile5closeEv>
  return vwd_.openRoot(&vol_);
    e3e6:	ce 01       	movw	r24, r28
    e3e8:	83 96       	adiw	r24, 0x23	; 35
    e3ea:	25 96       	adiw	r28, 0x05	; 5
    e3ec:	be 01       	movw	r22, r28
    e3ee:	0e 94 41 64 	call	0xc882	; 0xc882 <_ZN10SdBaseFile8openRootEP8SdVolume>
}
    e3f2:	df 91       	pop	r29
    e3f4:	cf 91       	pop	r28
    e3f6:	08 95       	ret

0000e3f8 <_ZN5SdFat5chdirEPKcb>:
 *  working directory if true.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
bool SdFat::chdir(const char *path, bool set_cwd) {
    e3f8:	df 92       	push	r13
    e3fa:	ef 92       	push	r14
    e3fc:	ff 92       	push	r15
    e3fe:	0f 93       	push	r16
    e400:	1f 93       	push	r17
    e402:	df 93       	push	r29
    e404:	cf 93       	push	r28
    e406:	cd b7       	in	r28, 0x3d	; 61
    e408:	de b7       	in	r29, 0x3e	; 62
    e40a:	6b 97       	sbiw	r28, 0x1b	; 27
    e40c:	cd bf       	out	0x3d, r28	; 61
    e40e:	de bf       	out	0x3e, r29	; 62
    e410:	9c 01       	movw	r18, r24
    e412:	fb 01       	movw	r30, r22
    e414:	d4 2e       	mov	r13, r20
    e416:	19 82       	std	Y+1, r1	; 0x01
    e418:	1c 82       	std	Y+4, r1	; 0x04
  SdBaseFile dir;
  if (path[0] == '/' && path[1] == '\0') return chdir(set_cwd);
    e41a:	80 81       	ld	r24, Z
    e41c:	8f 32       	cpi	r24, 0x2F	; 47
    e41e:	41 f4       	brne	.+16     	; 0xe430 <_ZN5SdFat5chdirEPKcb+0x38>
    e420:	81 81       	ldd	r24, Z+1	; 0x01
    e422:	88 23       	and	r24, r24
    e424:	29 f4       	brne	.+10     	; 0xe430 <_ZN5SdFat5chdirEPKcb+0x38>
    e426:	c9 01       	movw	r24, r18
    e428:	64 2f       	mov	r22, r20
    e42a:	0e 94 e1 71 	call	0xe3c2	; 0xe3c2 <_ZN5SdFat5chdirEb>
    e42e:	22 c0       	rjmp	.+68     	; 0xe474 <_ZN5SdFat5chdirEPKcb+0x7c>
  if (!dir.open(&vwd_, path, O_READ)) goto fail;
    e430:	89 01       	movw	r16, r18
    e432:	0d 5d       	subi	r16, 0xDD	; 221
    e434:	1f 4f       	sbci	r17, 0xFF	; 255
    e436:	7e 01       	movw	r14, r28
    e438:	08 94       	sec
    e43a:	e1 1c       	adc	r14, r1
    e43c:	f1 1c       	adc	r15, r1
    e43e:	c7 01       	movw	r24, r14
    e440:	b8 01       	movw	r22, r16
    e442:	af 01       	movw	r20, r30
    e444:	21 e0       	ldi	r18, 0x01	; 1
    e446:	0e 94 4f 6f 	call	0xde9e	; 0xde9e <_ZN10SdBaseFile4openEPS_PKch>
    e44a:	88 23       	and	r24, r24
    e44c:	91 f0       	breq	.+36     	; 0xe472 <_ZN5SdFat5chdirEPKcb+0x7a>
  if (!dir.isDir()) goto fail;
    e44e:	8c 81       	ldd	r24, Y+4	; 0x04
    e450:	82 30       	cpi	r24, 0x02	; 2
    e452:	78 f0       	brcs	.+30     	; 0xe472 <_ZN5SdFat5chdirEPKcb+0x7a>
  vwd_ = dir;
    e454:	d8 01       	movw	r26, r16
    e456:	f7 01       	movw	r30, r14
    e458:	8b e1       	ldi	r24, 0x1B	; 27
    e45a:	01 90       	ld	r0, Z+
    e45c:	0d 92       	st	X+, r0
    e45e:	81 50       	subi	r24, 0x01	; 1
    e460:	e1 f7       	brne	.-8      	; 0xe45a <_ZN5SdFat5chdirEPKcb+0x62>
  if (set_cwd) SdBaseFile::cwd_ = &vwd_;
    e462:	dd 20       	and	r13, r13
    e464:	21 f0       	breq	.+8      	; 0xe46e <_ZN5SdFat5chdirEPKcb+0x76>
    e466:	00 93 d7 22 	sts	0x22D7, r16
    e46a:	10 93 d8 22 	sts	0x22D8, r17
    e46e:	81 e0       	ldi	r24, 0x01	; 1
    e470:	01 c0       	rjmp	.+2      	; 0xe474 <_ZN5SdFat5chdirEPKcb+0x7c>
    e472:	80 e0       	ldi	r24, 0x00	; 0
  return true;

 fail:
  return false;
}
    e474:	6b 96       	adiw	r28, 0x1b	; 27
    e476:	cd bf       	out	0x3d, r28	; 61
    e478:	de bf       	out	0x3e, r29	; 62
    e47a:	cf 91       	pop	r28
    e47c:	df 91       	pop	r29
    e47e:	1f 91       	pop	r17
    e480:	0f 91       	pop	r16
    e482:	ff 90       	pop	r15
    e484:	ef 90       	pop	r14
    e486:	df 90       	pop	r13
    e488:	08 95       	ret

0000e48a <_ZN5SdFat5beginEi>:
#ifndef ARBITROS_CMP
bool SdFat::begin(uint8_t chipSelectPin, uint8_t sckRateID) {
  return card_.init(sckRateID, chipSelectPin) && vol_.init(&card_) && chdir(1);
}
#else
bool SdFat::begin(t_SPIHNDL t_handle) {
    e48a:	ef 92       	push	r14
    e48c:	ff 92       	push	r15
    e48e:	0f 93       	push	r16
    e490:	1f 93       	push	r17
    e492:	df 93       	push	r29
    e494:	cf 93       	push	r28
    e496:	0f 92       	push	r0
    e498:	0f 92       	push	r0
    e49a:	cd b7       	in	r28, 0x3d	; 61
    e49c:	de b7       	in	r29, 0x3e	; 62
    e49e:	8c 01       	movw	r16, r24
    e4a0:	69 83       	std	Y+1, r22	; 0x01
    e4a2:	7a 83       	std	Y+2, r23	; 0x02
   return card_.init(t_handle) && vol_.init(&card_) && chdir(1);
    e4a4:	69 81       	ldd	r22, Y+1	; 0x01
    e4a6:	7a 81       	ldd	r23, Y+2	; 0x02
    e4a8:	0e 94 68 62 	call	0xc4d0	; 0xc4d0 <_ZN7Sd2Card4initEi>
    e4ac:	88 23       	and	r24, r24
    e4ae:	d9 f0       	breq	.+54     	; 0xe4e6 <_ZN5SdFat5beginEi+0x5c>
    e4b0:	85 e0       	ldi	r24, 0x05	; 5
    e4b2:	e8 2e       	mov	r14, r24
    e4b4:	f1 2c       	mov	r15, r1
    e4b6:	e0 0e       	add	r14, r16
    e4b8:	f1 1e       	adc	r15, r17
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  bool init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    e4ba:	c7 01       	movw	r24, r14
    e4bc:	b8 01       	movw	r22, r16
    e4be:	41 e0       	ldi	r20, 0x01	; 1
    e4c0:	0e 94 3d 73 	call	0xe67a	; 0xe67a <_ZN8SdVolume4initEP7Sd2Cardh>
    e4c4:	88 23       	and	r24, r24
    e4c6:	39 f4       	brne	.+14     	; 0xe4d6 <_ZN5SdFat5beginEi+0x4c>
    e4c8:	c7 01       	movw	r24, r14
    e4ca:	b8 01       	movw	r22, r16
    e4cc:	40 e0       	ldi	r20, 0x00	; 0
    e4ce:	0e 94 3d 73 	call	0xe67a	; 0xe67a <_ZN8SdVolume4initEP7Sd2Cardh>
    e4d2:	88 23       	and	r24, r24
    e4d4:	41 f0       	breq	.+16     	; 0xe4e6 <_ZN5SdFat5beginEi+0x5c>
    e4d6:	c8 01       	movw	r24, r16
    e4d8:	61 e0       	ldi	r22, 0x01	; 1
    e4da:	0e 94 e1 71 	call	0xe3c2	; 0xe3c2 <_ZN5SdFat5chdirEb>
    e4de:	88 23       	and	r24, r24
    e4e0:	19 f0       	breq	.+6      	; 0xe4e8 <_ZN5SdFat5beginEi+0x5e>
    e4e2:	81 e0       	ldi	r24, 0x01	; 1
    e4e4:	01 c0       	rjmp	.+2      	; 0xe4e8 <_ZN5SdFat5beginEi+0x5e>
    e4e6:	80 e0       	ldi	r24, 0x00	; 0
}
    e4e8:	0f 90       	pop	r0
    e4ea:	0f 90       	pop	r0
    e4ec:	cf 91       	pop	r28
    e4ee:	df 91       	pop	r29
    e4f0:	1f 91       	pop	r17
    e4f2:	0f 91       	pop	r16
    e4f4:	ff 90       	pop	r15
    e4f6:	ef 90       	pop	r14
    e4f8:	08 95       	ret

0000e4fa <_ZN6SdFile5writeEPKvj>:
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
int SdFile::write(const void* buf, size_t nbyte) {
  return SdBaseFile::write(buf, nbyte);
    e4fa:	04 96       	adiw	r24, 0x04	; 4
    e4fc:	0e 94 18 6c 	call	0xd830	; 0xd830 <_ZN10SdBaseFile5writeEPKvj>
}
    e500:	08 95       	ret

0000e502 <_ZN8SdVolume15cacheInvalidateEv>:
  return cacheSync();
}
#endif  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
void SdVolume::cacheInvalidate() {
    cacheBlockNumber_ = 0XFFFFFFFF;
    e502:	8f ef       	ldi	r24, 0xFF	; 255
    e504:	9f ef       	ldi	r25, 0xFF	; 255
    e506:	af ef       	ldi	r26, 0xFF	; 255
    e508:	bf ef       	ldi	r27, 0xFF	; 255
    e50a:	80 93 db 24 	sts	0x24DB, r24
    e50e:	90 93 dc 24 	sts	0x24DC, r25
    e512:	a0 93 dd 24 	sts	0x24DD, r26
    e516:	b0 93 de 24 	sts	0x24DE, r27
    cacheStatus_ = 0;
    e51a:	10 92 df 24 	sts	0x24DF, r1
}
    e51e:	08 95       	ret

0000e520 <_ZNK8SdVolume17clusterStartBlockEm>:
//==============================================================================
//------------------------------------------------------------------------------
uint32_t SdVolume::clusterStartBlock(uint32_t cluster) const {
    e520:	0f 93       	push	r16
    e522:	1f 93       	push	r17
    e524:	8c 01       	movw	r16, r24
    e526:	cb 01       	movw	r24, r22
    e528:	ba 01       	movw	r22, r20
    e52a:	62 50       	subi	r22, 0x02	; 2
    e52c:	70 40       	sbci	r23, 0x00	; 0
    e52e:	80 40       	sbci	r24, 0x00	; 0
    e530:	90 40       	sbci	r25, 0x00	; 0
    e532:	f8 01       	movw	r30, r16
    e534:	24 81       	ldd	r18, Z+4	; 0x04
    e536:	30 e0       	ldi	r19, 0x00	; 0
    e538:	40 e0       	ldi	r20, 0x00	; 0
    e53a:	50 e0       	ldi	r21, 0x00	; 0
    e53c:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
    e540:	9b 01       	movw	r18, r22
    e542:	ac 01       	movw	r20, r24
    e544:	f8 01       	movw	r30, r16
    e546:	86 85       	ldd	r24, Z+14	; 0x0e
    e548:	97 85       	ldd	r25, Z+15	; 0x0f
    e54a:	a0 89       	ldd	r26, Z+16	; 0x10
    e54c:	b1 89       	ldd	r27, Z+17	; 0x11
    e54e:	28 0f       	add	r18, r24
    e550:	39 1f       	adc	r19, r25
    e552:	4a 1f       	adc	r20, r26
    e554:	5b 1f       	adc	r21, r27
  return dataStartBlock_ + ((cluster - 2)*blocksPerCluster_);
}
    e556:	b9 01       	movw	r22, r18
    e558:	ca 01       	movw	r24, r20
    e55a:	1f 91       	pop	r17
    e55c:	0f 91       	pop	r16
    e55e:	08 95       	ret

0000e560 <_ZN8SdVolume9cacheSyncEv>:
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
}
//------------------------------------------------------------------------------
bool SdVolume::cacheSync() {
  if (cacheStatus_ & CACHE_STATUS_DIRTY) {
    e560:	80 91 df 24 	lds	r24, 0x24DF
    e564:	80 ff       	sbrs	r24, 0
    e566:	3e c0       	rjmp	.+124    	; 0xe5e4 <_ZN8SdVolume9cacheSyncEv+0x84>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    e568:	40 91 db 24 	lds	r20, 0x24DB
    e56c:	50 91 dc 24 	lds	r21, 0x24DC
    e570:	60 91 dd 24 	lds	r22, 0x24DD
    e574:	70 91 de 24 	lds	r23, 0x24DE
    e578:	80 91 e4 24 	lds	r24, 0x24E4
    e57c:	90 91 e5 24 	lds	r25, 0x24E5
    e580:	2b ed       	ldi	r18, 0xDB	; 219
    e582:	32 e2       	ldi	r19, 0x22	; 34
    e584:	0e 94 30 61 	call	0xc260	; 0xc260 <_ZN7Sd2Card10writeBlockEmPKh>
    e588:	88 23       	and	r24, r24
    e58a:	71 f1       	breq	.+92     	; 0xe5e8 <_ZN8SdVolume9cacheSyncEv+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if ((cacheStatus_ & CACHE_STATUS_FAT_BLOCK) && cacheFatOffset_) {
    e58c:	80 91 df 24 	lds	r24, 0x24DF
    e590:	81 ff       	sbrs	r24, 1
    e592:	23 c0       	rjmp	.+70     	; 0xe5da <_ZN8SdVolume9cacheSyncEv+0x7a>
    e594:	40 91 e0 24 	lds	r20, 0x24E0
    e598:	50 91 e1 24 	lds	r21, 0x24E1
    e59c:	60 91 e2 24 	lds	r22, 0x24E2
    e5a0:	70 91 e3 24 	lds	r23, 0x24E3
    e5a4:	41 15       	cp	r20, r1
    e5a6:	51 05       	cpc	r21, r1
    e5a8:	61 05       	cpc	r22, r1
    e5aa:	71 05       	cpc	r23, r1
    e5ac:	b1 f0       	breq	.+44     	; 0xe5da <_ZN8SdVolume9cacheSyncEv+0x7a>
      uint32_t lbn = cacheBlockNumber_ + cacheFatOffset_;
      if (!sdCard_->writeBlock(lbn, cacheBuffer_.data)) {
    e5ae:	80 91 db 24 	lds	r24, 0x24DB
    e5b2:	90 91 dc 24 	lds	r25, 0x24DC
    e5b6:	a0 91 dd 24 	lds	r26, 0x24DD
    e5ba:	b0 91 de 24 	lds	r27, 0x24DE
    e5be:	48 0f       	add	r20, r24
    e5c0:	59 1f       	adc	r21, r25
    e5c2:	6a 1f       	adc	r22, r26
    e5c4:	7b 1f       	adc	r23, r27
    e5c6:	80 91 e4 24 	lds	r24, 0x24E4
    e5ca:	90 91 e5 24 	lds	r25, 0x24E5
    e5ce:	2b ed       	ldi	r18, 0xDB	; 219
    e5d0:	32 e2       	ldi	r19, 0x22	; 34
    e5d2:	0e 94 30 61 	call	0xc260	; 0xc260 <_ZN7Sd2Card10writeBlockEmPKh>
    e5d6:	88 23       	and	r24, r24
    e5d8:	39 f0       	breq	.+14     	; 0xe5e8 <_ZN8SdVolume9cacheSyncEv+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cacheStatus_ &= ~CACHE_STATUS_DIRTY;
    e5da:	80 91 df 24 	lds	r24, 0x24DF
    e5de:	8e 7f       	andi	r24, 0xFE	; 254
    e5e0:	80 93 df 24 	sts	0x24DF, r24
    e5e4:	81 e0       	ldi	r24, 0x01	; 1
    e5e6:	08 95       	ret
    e5e8:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    e5ea:	08 95       	ret

0000e5ec <_ZN8SdVolume14cacheWriteDataEv>:
//------------------------------------------------------------------------------
bool SdVolume::cacheWriteData() {
  return cacheSync();
    e5ec:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
}
    e5f0:	08 95       	ret

0000e5f2 <_ZN8SdVolume10cacheFetchEmh>:
 fail:
  return false;
}
#else  // USE_SEPARATE_FAT_CACHE
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetch(uint32_t blockNumber, uint8_t options) {
    e5f2:	df 92       	push	r13
    e5f4:	ef 92       	push	r14
    e5f6:	ff 92       	push	r15
    e5f8:	0f 93       	push	r16
    e5fa:	1f 93       	push	r17
    e5fc:	7b 01       	movw	r14, r22
    e5fe:	8c 01       	movw	r16, r24
    e600:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
    e602:	80 91 db 24 	lds	r24, 0x24DB
    e606:	90 91 dc 24 	lds	r25, 0x24DC
    e60a:	a0 91 dd 24 	lds	r26, 0x24DD
    e60e:	b0 91 de 24 	lds	r27, 0x24DE
    e612:	8e 15       	cp	r24, r14
    e614:	9f 05       	cpc	r25, r15
    e616:	a0 07       	cpc	r26, r16
    e618:	b1 07       	cpc	r27, r17
    e61a:	e1 f0       	breq	.+56     	; 0xe654 <_ZN8SdVolume10cacheFetchEmh+0x62>
    if (!cacheSync()) {
    e61c:	0e 94 b0 72 	call	0xe560	; 0xe560 <_ZN8SdVolume9cacheSyncEv>
    e620:	88 23       	and	r24, r24
    e622:	11 f1       	breq	.+68     	; 0xe668 <_ZN8SdVolume10cacheFetchEmh+0x76>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(options & CACHE_OPTION_NO_READ)) {
    e624:	d2 fc       	sbrc	r13, 2
    e626:	0c c0       	rjmp	.+24     	; 0xe640 <_ZN8SdVolume10cacheFetchEmh+0x4e>
      if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    e628:	80 91 e4 24 	lds	r24, 0x24E4
    e62c:	90 91 e5 24 	lds	r25, 0x24E5
    e630:	b8 01       	movw	r22, r16
    e632:	a7 01       	movw	r20, r14
    e634:	2b ed       	ldi	r18, 0xDB	; 219
    e636:	32 e2       	ldi	r19, 0x22	; 34
    e638:	0e 94 34 62 	call	0xc468	; 0xc468 <_ZN7Sd2Card9readBlockEmPh>
    e63c:	88 23       	and	r24, r24
    e63e:	a1 f0       	breq	.+40     	; 0xe668 <_ZN8SdVolume10cacheFetchEmh+0x76>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cacheStatus_ = 0;
    e640:	10 92 df 24 	sts	0x24DF, r1
    cacheBlockNumber_ = blockNumber;
    e644:	e0 92 db 24 	sts	0x24DB, r14
    e648:	f0 92 dc 24 	sts	0x24DC, r15
    e64c:	00 93 dd 24 	sts	0x24DD, r16
    e650:	10 93 de 24 	sts	0x24DE, r17
  }
  cacheStatus_ |= options & CACHE_STATUS_MASK;
    e654:	83 e0       	ldi	r24, 0x03	; 3
    e656:	d8 22       	and	r13, r24
    e658:	80 91 df 24 	lds	r24, 0x24DF
    e65c:	8d 29       	or	r24, r13
    e65e:	80 93 df 24 	sts	0x24DF, r24
    e662:	2b ed       	ldi	r18, 0xDB	; 219
    e664:	32 e2       	ldi	r19, 0x22	; 34
    e666:	02 c0       	rjmp	.+4      	; 0xe66c <_ZN8SdVolume10cacheFetchEmh+0x7a>
  return &cacheBuffer_;
    e668:	20 e0       	ldi	r18, 0x00	; 0
    e66a:	30 e0       	ldi	r19, 0x00	; 0

 fail:
  return 0;
}
    e66c:	c9 01       	movw	r24, r18
    e66e:	1f 91       	pop	r17
    e670:	0f 91       	pop	r16
    e672:	ff 90       	pop	r15
    e674:	ef 90       	pop	r14
    e676:	df 90       	pop	r13
    e678:	08 95       	ret

0000e67a <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
bool SdVolume::init(Sd2Card* dev, uint8_t part) {
    e67a:	6f 92       	push	r6
    e67c:	7f 92       	push	r7
    e67e:	8f 92       	push	r8
    e680:	9f 92       	push	r9
    e682:	af 92       	push	r10
    e684:	bf 92       	push	r11
    e686:	cf 92       	push	r12
    e688:	df 92       	push	r13
    e68a:	ef 92       	push	r14
    e68c:	ff 92       	push	r15
    e68e:	0f 93       	push	r16
    e690:	1f 93       	push	r17
    e692:	cf 93       	push	r28
    e694:	df 93       	push	r29
    e696:	5c 01       	movw	r10, r24
    e698:	14 2f       	mov	r17, r20
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  sdCard_ = dev;
    e69a:	60 93 e4 24 	sts	0x24E4, r22
    e69e:	70 93 e5 24 	sts	0x24E5, r23
  fatType_ = 0;
    e6a2:	dc 01       	movw	r26, r24
    e6a4:	57 96       	adiw	r26, 0x17	; 23
    e6a6:	1c 92       	st	X, r1
  allocSearchStart_ = 2;
    e6a8:	82 e0       	ldi	r24, 0x02	; 2
    e6aa:	90 e0       	ldi	r25, 0x00	; 0
    e6ac:	a0 e0       	ldi	r26, 0x00	; 0
    e6ae:	b0 e0       	ldi	r27, 0x00	; 0
    e6b0:	f5 01       	movw	r30, r10
    e6b2:	80 83       	st	Z, r24
    e6b4:	91 83       	std	Z+1, r25	; 0x01
    e6b6:	a2 83       	std	Z+2, r26	; 0x02
    e6b8:	b3 83       	std	Z+3, r27	; 0x03
  cacheStatus_ = 0;  // cacheSync() will write block if true
    e6ba:	10 92 df 24 	sts	0x24DF, r1
  cacheBlockNumber_ = 0XFFFFFFFF;
    e6be:	8f ef       	ldi	r24, 0xFF	; 255
    e6c0:	9f ef       	ldi	r25, 0xFF	; 255
    e6c2:	af ef       	ldi	r26, 0xFF	; 255
    e6c4:	bf ef       	ldi	r27, 0xFF	; 255
    e6c6:	80 93 db 24 	sts	0x24DB, r24
    e6ca:	90 93 dc 24 	sts	0x24DC, r25
    e6ce:	a0 93 dd 24 	sts	0x24DD, r26
    e6d2:	b0 93 de 24 	sts	0x24DE, r27
  cacheFatOffset_ = 0;
    e6d6:	10 92 e0 24 	sts	0x24E0, r1
    e6da:	10 92 e1 24 	sts	0x24E1, r1
    e6de:	10 92 e2 24 	sts	0x24E2, r1
    e6e2:	10 92 e3 24 	sts	0x24E3, r1
  cacheFatStatus_ = 0;  // cacheSync() will write block if true
  cacheFatBlockNumber_ = 0XFFFFFFFF;
#endif  // USE_SERARATEFAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    e6e6:	44 23       	and	r20, r20
    e6e8:	21 f4       	brne	.+8      	; 0xe6f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x78>
    e6ea:	66 24       	eor	r6, r6
    e6ec:	77 24       	eor	r7, r7
    e6ee:	43 01       	movw	r8, r6
    e6f0:	44 c0       	rjmp	.+136    	; 0xe77a <_ZN8SdVolume4initEP7Sd2Cardh+0x100>
    if (part > 4) {
    e6f2:	45 30       	cpi	r20, 0x05	; 5
    e6f4:	08 f0       	brcs	.+2      	; 0xe6f8 <_ZN8SdVolume4initEP7Sd2Cardh+0x7e>
    e6f6:	22 c1       	rjmp	.+580    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    e6f8:	60 e0       	ldi	r22, 0x00	; 0
    e6fa:	70 e0       	ldi	r23, 0x00	; 0
    e6fc:	80 e0       	ldi	r24, 0x00	; 0
    e6fe:	90 e0       	ldi	r25, 0x00	; 0
    e700:	40 e0       	ldi	r20, 0x00	; 0
    e702:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
    e706:	ec 01       	movw	r28, r24
    if (!pc) {
    e708:	00 97       	sbiw	r24, 0x00	; 0
    e70a:	09 f4       	brne	.+2      	; 0xe70e <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    e70c:	17 c1       	rjmp	.+558    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part-1];
    e70e:	41 2f       	mov	r20, r17
    e710:	50 e0       	ldi	r21, 0x00	; 0
    e712:	41 50       	subi	r20, 0x01	; 1
    e714:	50 40       	sbci	r21, 0x00	; 0
    if ((p->boot & 0X7F) !=0  ||
    e716:	fa 01       	movw	r30, r20
    e718:	74 e0       	ldi	r23, 0x04	; 4
    e71a:	ee 0f       	add	r30, r30
    e71c:	ff 1f       	adc	r31, r31
    e71e:	7a 95       	dec	r23
    e720:	e1 f7       	brne	.-8      	; 0xe71a <_ZN8SdVolume4initEP7Sd2Cardh+0xa0>
    e722:	e8 0f       	add	r30, r24
    e724:	f9 1f       	adc	r31, r25
    e726:	e2 54       	subi	r30, 0x42	; 66
    e728:	fe 4f       	sbci	r31, 0xFE	; 254
    e72a:	80 81       	ld	r24, Z
    e72c:	ee 5b       	subi	r30, 0xBE	; 190
    e72e:	f1 40       	sbci	r31, 0x01	; 1
    e730:	90 e0       	ldi	r25, 0x00	; 0
    e732:	8f 77       	andi	r24, 0x7F	; 127
    e734:	90 70       	andi	r25, 0x00	; 0
    e736:	89 2b       	or	r24, r25
    e738:	09 f0       	breq	.+2      	; 0xe73c <_ZN8SdVolume4initEP7Sd2Cardh+0xc2>
    e73a:	00 c1       	rjmp	.+512    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    e73c:	e6 53       	subi	r30, 0x36	; 54
    e73e:	fe 4f       	sbci	r31, 0xFE	; 254
    e740:	80 81       	ld	r24, Z
    e742:	91 81       	ldd	r25, Z+1	; 0x01
    e744:	a2 81       	ldd	r26, Z+2	; 0x02
    e746:	b3 81       	ldd	r27, Z+3	; 0x03
    e748:	84 36       	cpi	r24, 0x64	; 100
    e74a:	91 05       	cpc	r25, r1
    e74c:	a1 05       	cpc	r26, r1
    e74e:	b1 05       	cpc	r27, r1
    e750:	08 f4       	brcc	.+2      	; 0xe754 <_ZN8SdVolume4initEP7Sd2Cardh+0xda>
    e752:	f4 c0       	rjmp	.+488    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    e754:	64 e0       	ldi	r22, 0x04	; 4
    e756:	44 0f       	add	r20, r20
    e758:	55 1f       	adc	r21, r21
    e75a:	6a 95       	dec	r22
    e75c:	e1 f7       	brne	.-8      	; 0xe756 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    e75e:	c4 0f       	add	r28, r20
    e760:	d5 1f       	adc	r29, r21
    e762:	ca 53       	subi	r28, 0x3A	; 58
    e764:	de 4f       	sbci	r29, 0xFE	; 254
    e766:	68 80       	ld	r6, Y
    e768:	79 80       	ldd	r7, Y+1	; 0x01
    e76a:	8a 80       	ldd	r8, Y+2	; 0x02
    e76c:	9b 80       	ldd	r9, Y+3	; 0x03
    e76e:	61 14       	cp	r6, r1
    e770:	71 04       	cpc	r7, r1
    e772:	81 04       	cpc	r8, r1
    e774:	91 04       	cpc	r9, r1
    e776:	09 f4       	brne	.+2      	; 0xe77a <_ZN8SdVolume4initEP7Sd2Cardh+0x100>
    e778:	e1 c0       	rjmp	.+450    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetch(volumeStartBlock, CACHE_FOR_READ);
    e77a:	c4 01       	movw	r24, r8
    e77c:	b3 01       	movw	r22, r6
    e77e:	40 e0       	ldi	r20, 0x00	; 0
    e780:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
    e784:	ec 01       	movw	r28, r24
  if (!pc) {
    e786:	00 97       	sbiw	r24, 0x00	; 0
    e788:	09 f4       	brne	.+2      	; 0xe78c <_ZN8SdVolume4initEP7Sd2Cardh+0x112>
    e78a:	d8 c0       	rjmp	.+432    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
    e78c:	8b 85       	ldd	r24, Y+11	; 0x0b
    e78e:	9c 85       	ldd	r25, Y+12	; 0x0c
    e790:	80 50       	subi	r24, 0x00	; 0
    e792:	92 40       	sbci	r25, 0x02	; 2
    e794:	09 f0       	breq	.+2      	; 0xe798 <_ZN8SdVolume4initEP7Sd2Cardh+0x11e>
    e796:	d2 c0       	rjmp	.+420    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    e798:	68 89       	ldd	r22, Y+16	; 0x10
    e79a:	66 23       	and	r22, r22
    e79c:	09 f4       	brne	.+2      	; 0xe7a0 <_ZN8SdVolume4initEP7Sd2Cardh+0x126>
    e79e:	ce c0       	rjmp	.+412    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    e7a0:	ee 85       	ldd	r30, Y+14	; 0x0e
    e7a2:	ff 85       	ldd	r31, Y+15	; 0x0f
    e7a4:	30 97       	sbiw	r30, 0x00	; 0
    e7a6:	09 f4       	brne	.+2      	; 0xe7aa <_ZN8SdVolume4initEP7Sd2Cardh+0x130>
    e7a8:	c9 c0       	rjmp	.+402    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    e7aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    e7ac:	88 23       	and	r24, r24
    e7ae:	09 f4       	brne	.+2      	; 0xe7b2 <_ZN8SdVolume4initEP7Sd2Cardh+0x138>
    e7b0:	c5 c0       	rjmp	.+394    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    fbs->sectorsPerCluster == 0) {
       // not valid FAT volume
      DBG_FAIL_MACRO;
      goto fail;
  }
  fatCount_ = fbs->fatCount;
    e7b2:	d5 01       	movw	r26, r10
    e7b4:	52 96       	adiw	r26, 0x12	; 18
    e7b6:	6c 93       	st	X, r22
    e7b8:	52 97       	sbiw	r26, 0x12	; 18
  blocksPerCluster_ = fbs->sectorsPerCluster;
    e7ba:	14 96       	adiw	r26, 0x04	; 4
    e7bc:	8c 93       	st	X, r24
    e7be:	14 97       	sbiw	r26, 0x04	; 4
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    e7c0:	1d 96       	adiw	r26, 0x0d	; 13
    e7c2:	1c 92       	st	X, r1
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e7c4:	01 e0       	ldi	r16, 0x01	; 1
    e7c6:	10 e0       	ldi	r17, 0x00	; 0
    e7c8:	08 c0       	rjmp	.+16     	; 0xe7da <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    e7ca:	4f 5f       	subi	r20, 0xFF	; 255
    e7cc:	d5 01       	movw	r26, r10
    e7ce:	1d 96       	adiw	r26, 0x0d	; 13
    e7d0:	4c 93       	st	X, r20
    e7d2:	41 50       	subi	r20, 0x01	; 1
    e7d4:	48 30       	cpi	r20, 0x08	; 8
    e7d6:	08 f0       	brcs	.+2      	; 0xe7da <_ZN8SdVolume4initEP7Sd2Cardh+0x160>
    e7d8:	b1 c0       	rjmp	.+354    	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
  }
  fatCount_ = fbs->fatCount;
  blocksPerCluster_ = fbs->sectorsPerCluster;
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    e7da:	d5 01       	movw	r26, r10
    e7dc:	1d 96       	adiw	r26, 0x0d	; 13
    e7de:	4c 91       	ld	r20, X
    e7e0:	1d 97       	sbiw	r26, 0x0d	; 13
    e7e2:	14 96       	adiw	r26, 0x04	; 4
    e7e4:	8c 91       	ld	r24, X
    e7e6:	90 e0       	ldi	r25, 0x00	; 0
    e7e8:	98 01       	movw	r18, r16
    e7ea:	04 2e       	mov	r0, r20
    e7ec:	02 c0       	rjmp	.+4      	; 0xe7f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x178>
    e7ee:	22 0f       	add	r18, r18
    e7f0:	33 1f       	adc	r19, r19
    e7f2:	0a 94       	dec	r0
    e7f4:	e2 f7       	brpl	.-8      	; 0xe7ee <_ZN8SdVolume4initEP7Sd2Cardh+0x174>
    e7f6:	82 17       	cp	r24, r18
    e7f8:	93 07       	cpc	r25, r19
    e7fa:	39 f7       	brne	.-50     	; 0xe7ca <_ZN8SdVolume4initEP7Sd2Cardh+0x150>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  blocksPerFat_ = fbs->sectorsPerFat16 ?
                    fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
    e7fc:	8e 89       	ldd	r24, Y+22	; 0x16
    e7fe:	9f 89       	ldd	r25, Y+23	; 0x17
    e800:	00 97       	sbiw	r24, 0x00	; 0
    e802:	21 f0       	breq	.+8      	; 0xe80c <_ZN8SdVolume4initEP7Sd2Cardh+0x192>
    e804:	9c 01       	movw	r18, r24
    e806:	40 e0       	ldi	r20, 0x00	; 0
    e808:	50 e0       	ldi	r21, 0x00	; 0
    e80a:	04 c0       	rjmp	.+8      	; 0xe814 <_ZN8SdVolume4initEP7Sd2Cardh+0x19a>
    e80c:	2c a1       	ldd	r18, Y+36	; 0x24
    e80e:	3d a1       	ldd	r19, Y+37	; 0x25
    e810:	4e a1       	ldd	r20, Y+38	; 0x26
    e812:	5f a1       	ldd	r21, Y+39	; 0x27
    e814:	d5 01       	movw	r26, r10
    e816:	15 96       	adiw	r26, 0x05	; 5
    e818:	2d 93       	st	X+, r18
    e81a:	3d 93       	st	X+, r19
    e81c:	4d 93       	st	X+, r20
    e81e:	5c 93       	st	X, r21
    e820:	18 97       	sbiw	r26, 0x08	; 8

  if (fatCount_ > 0) cacheFatOffset_ = blocksPerFat_;
    e822:	52 96       	adiw	r26, 0x12	; 18
    e824:	8c 91       	ld	r24, X
    e826:	88 23       	and	r24, r24
    e828:	41 f0       	breq	.+16     	; 0xe83a <_ZN8SdVolume4initEP7Sd2Cardh+0x1c0>
    e82a:	20 93 e0 24 	sts	0x24E0, r18
    e82e:	30 93 e1 24 	sts	0x24E1, r19
    e832:	40 93 e2 24 	sts	0x24E2, r20
    e836:	50 93 e3 24 	sts	0x24E3, r21
  fatStartBlock_ = volumeStartBlock + fbs->reservedSectorCount;
    e83a:	6f 01       	movw	r12, r30
    e83c:	ee 24       	eor	r14, r14
    e83e:	ff 24       	eor	r15, r15
    e840:	c6 0c       	add	r12, r6
    e842:	d7 1c       	adc	r13, r7
    e844:	e8 1c       	adc	r14, r8
    e846:	f9 1c       	adc	r15, r9
    e848:	f5 01       	movw	r30, r10
    e84a:	c3 8a       	std	Z+19, r12	; 0x13
    e84c:	d4 8a       	std	Z+20, r13	; 0x14
    e84e:	e5 8a       	std	Z+21, r14	; 0x15
    e850:	f6 8a       	std	Z+22, r15	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = fbs->rootDirEntryCount;
    e852:	09 89       	ldd	r16, Y+17	; 0x11
    e854:	1a 89       	ldd	r17, Y+18	; 0x12
    e856:	00 8f       	std	Z+24, r16	; 0x18
    e858:	11 8f       	std	Z+25, r17	; 0x19

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + fbs->fatCount * blocksPerFat_;
    e85a:	70 e0       	ldi	r23, 0x00	; 0
    e85c:	80 e0       	ldi	r24, 0x00	; 0
    e85e:	90 e0       	ldi	r25, 0x00	; 0
    e860:	25 81       	ldd	r18, Z+5	; 0x05
    e862:	36 81       	ldd	r19, Z+6	; 0x06
    e864:	47 81       	ldd	r20, Z+7	; 0x07
    e866:	50 85       	ldd	r21, Z+8	; 0x08
    e868:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
    e86c:	6c 0d       	add	r22, r12
    e86e:	7d 1d       	adc	r23, r13
    e870:	8e 1d       	adc	r24, r14
    e872:	9f 1d       	adc	r25, r15
    e874:	d5 01       	movw	r26, r10
    e876:	5a 96       	adiw	r26, 0x1a	; 26
    e878:	6d 93       	st	X+, r22
    e87a:	7d 93       	st	X+, r23
    e87c:	8d 93       	st	X+, r24
    e87e:	9c 93       	st	X, r25
    e880:	5d 97       	sbiw	r26, 0x1d	; 29

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * fbs->rootDirEntryCount + 511)/512);
    e882:	35 e0       	ldi	r19, 0x05	; 5
    e884:	00 0f       	add	r16, r16
    e886:	11 1f       	adc	r17, r17
    e888:	3a 95       	dec	r19
    e88a:	e1 f7       	brne	.-8      	; 0xe884 <_ZN8SdVolume4initEP7Sd2Cardh+0x20a>
    e88c:	01 50       	subi	r16, 0x01	; 1
    e88e:	1e 4f       	sbci	r17, 0xFE	; 254
    e890:	01 2f       	mov	r16, r17
    e892:	11 27       	eor	r17, r17
    e894:	06 95       	lsr	r16
    e896:	98 01       	movw	r18, r16
    e898:	40 e0       	ldi	r20, 0x00	; 0
    e89a:	50 e0       	ldi	r21, 0x00	; 0
    e89c:	26 0f       	add	r18, r22
    e89e:	37 1f       	adc	r19, r23
    e8a0:	48 1f       	adc	r20, r24
    e8a2:	59 1f       	adc	r21, r25
    e8a4:	f5 01       	movw	r30, r10
    e8a6:	26 87       	std	Z+14, r18	; 0x0e
    e8a8:	37 87       	std	Z+15, r19	; 0x0f
    e8aa:	40 8b       	std	Z+16, r20	; 0x10
    e8ac:	51 8b       	std	Z+17, r21	; 0x11

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
                           fbs->totalSectors16 : fbs->totalSectors32;
    e8ae:	8b 89       	ldd	r24, Y+19	; 0x13
    e8b0:	9c 89       	ldd	r25, Y+20	; 0x14
    e8b2:	00 97       	sbiw	r24, 0x00	; 0
    e8b4:	21 f0       	breq	.+8      	; 0xe8be <_ZN8SdVolume4initEP7Sd2Cardh+0x244>
    e8b6:	7c 01       	movw	r14, r24
    e8b8:	00 e0       	ldi	r16, 0x00	; 0
    e8ba:	10 e0       	ldi	r17, 0x00	; 0
    e8bc:	04 c0       	rjmp	.+8      	; 0xe8c6 <_ZN8SdVolume4initEP7Sd2Cardh+0x24c>
    e8be:	e8 a0       	ldd	r14, Y+32	; 0x20
    e8c0:	f9 a0       	ldd	r15, Y+33	; 0x21
    e8c2:	0a a1       	ldd	r16, Y+34	; 0x22
    e8c4:	1b a1       	ldd	r17, Y+35	; 0x23
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    e8c6:	c4 01       	movw	r24, r8
    e8c8:	b3 01       	movw	r22, r6
    e8ca:	62 1b       	sub	r22, r18
    e8cc:	73 0b       	sbc	r23, r19
    e8ce:	84 0b       	sbc	r24, r20
    e8d0:	95 0b       	sbc	r25, r21
    e8d2:	6e 0d       	add	r22, r14
    e8d4:	7f 1d       	adc	r23, r15
    e8d6:	80 1f       	adc	r24, r16
    e8d8:	91 1f       	adc	r25, r17

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    e8da:	d5 01       	movw	r26, r10
    e8dc:	1d 96       	adiw	r26, 0x0d	; 13
    e8de:	0c 90       	ld	r0, X
    e8e0:	1d 97       	sbiw	r26, 0x0d	; 13
    e8e2:	04 c0       	rjmp	.+8      	; 0xe8ec <_ZN8SdVolume4initEP7Sd2Cardh+0x272>
    e8e4:	96 95       	lsr	r25
    e8e6:	87 95       	ror	r24
    e8e8:	77 95       	ror	r23
    e8ea:	67 95       	ror	r22
    e8ec:	0a 94       	dec	r0
    e8ee:	d2 f7       	brpl	.-12     	; 0xe8e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x26a>
    e8f0:	f5 01       	movw	r30, r10
    e8f2:	61 87       	std	Z+9, r22	; 0x09
    e8f4:	72 87       	std	Z+10, r23	; 0x0a
    e8f6:	83 87       	std	Z+11, r24	; 0x0b
    e8f8:	94 87       	std	Z+12, r25	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    e8fa:	65 3f       	cpi	r22, 0xF5	; 245
    e8fc:	ff e0       	ldi	r31, 0x0F	; 15
    e8fe:	7f 07       	cpc	r23, r31
    e900:	f0 e0       	ldi	r31, 0x00	; 0
    e902:	8f 07       	cpc	r24, r31
    e904:	f0 e0       	ldi	r31, 0x00	; 0
    e906:	9f 07       	cpc	r25, r31
    e908:	20 f4       	brcc	.+8      	; 0xe912 <_ZN8SdVolume4initEP7Sd2Cardh+0x298>
    fatType_ = 12;
    e90a:	8c e0       	ldi	r24, 0x0C	; 12
    e90c:	57 96       	adiw	r26, 0x17	; 23
    e90e:	8c 93       	st	X, r24
    e910:	15 c0       	rjmp	.+42     	; 0xe93c <_ZN8SdVolume4initEP7Sd2Cardh+0x2c2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount_ < 65525) {
    e912:	65 5f       	subi	r22, 0xF5	; 245
    e914:	7f 4f       	sbci	r23, 0xFF	; 255
    e916:	80 40       	sbci	r24, 0x00	; 0
    e918:	90 40       	sbci	r25, 0x00	; 0
    e91a:	18 f4       	brcc	.+6      	; 0xe922 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a8>
    fatType_ = 16;
    e91c:	80 e1       	ldi	r24, 0x10	; 16
    e91e:	f5 01       	movw	r30, r10
    e920:	0a c0       	rjmp	.+20     	; 0xe936 <_ZN8SdVolume4initEP7Sd2Cardh+0x2bc>
  } else {
    rootDirStart_ = fbs->fat32RootCluster;
    e922:	8c a5       	ldd	r24, Y+44	; 0x2c
    e924:	9d a5       	ldd	r25, Y+45	; 0x2d
    e926:	ae a5       	ldd	r26, Y+46	; 0x2e
    e928:	bf a5       	ldd	r27, Y+47	; 0x2f
    e92a:	f5 01       	movw	r30, r10
    e92c:	82 8f       	std	Z+26, r24	; 0x1a
    e92e:	93 8f       	std	Z+27, r25	; 0x1b
    e930:	a4 8f       	std	Z+28, r26	; 0x1c
    e932:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    e934:	80 e2       	ldi	r24, 0x20	; 32
    e936:	87 8b       	std	Z+23, r24	; 0x17
    e938:	81 e0       	ldi	r24, 0x01	; 1
    e93a:	01 c0       	rjmp	.+2      	; 0xe93e <_ZN8SdVolume4initEP7Sd2Cardh+0x2c4>
    e93c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    e93e:	df 91       	pop	r29
    e940:	cf 91       	pop	r28
    e942:	1f 91       	pop	r17
    e944:	0f 91       	pop	r16
    e946:	ff 90       	pop	r15
    e948:	ef 90       	pop	r14
    e94a:	df 90       	pop	r13
    e94c:	cf 90       	pop	r12
    e94e:	bf 90       	pop	r11
    e950:	af 90       	pop	r10
    e952:	9f 90       	pop	r9
    e954:	8f 90       	pop	r8
    e956:	7f 90       	pop	r7
    e958:	6f 90       	pop	r6
    e95a:	08 95       	ret

0000e95c <_ZN8SdVolume13cacheFetchFatEmh>:
 fail:
  return 0;
}
//------------------------------------------------------------------------------
cache_t* SdVolume::cacheFetchFat(uint32_t blockNumber, uint8_t options) {
  return cacheFetch(blockNumber, options | CACHE_STATUS_FAT_BLOCK);
    e95c:	42 60       	ori	r20, 0x02	; 2
    e95e:	0e 94 f9 72 	call	0xe5f2	; 0xe5f2 <_ZN8SdVolume10cacheFetchEmh>
}
    e962:	08 95       	ret

0000e964 <_ZN8SdVolume6fatPutEmm>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    e964:	8f 92       	push	r8
    e966:	9f 92       	push	r9
    e968:	af 92       	push	r10
    e96a:	bf 92       	push	r11
    e96c:	cf 92       	push	r12
    e96e:	df 92       	push	r13
    e970:	ef 92       	push	r14
    e972:	ff 92       	push	r15
    e974:	0f 93       	push	r16
    e976:	1f 93       	push	r17
    e978:	cf 93       	push	r28
    e97a:	df 93       	push	r29
    e97c:	ec 01       	movw	r28, r24
    e97e:	6a 01       	movw	r12, r20
    e980:	7b 01       	movw	r14, r22
    e982:	48 01       	movw	r8, r16
    e984:	59 01       	movw	r10, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > (clusterCount_ + 1)) {
    e986:	42 30       	cpi	r20, 0x02	; 2
    e988:	51 05       	cpc	r21, r1
    e98a:	61 05       	cpc	r22, r1
    e98c:	71 05       	cpc	r23, r1
    e98e:	08 f4       	brcc	.+2      	; 0xe992 <_ZN8SdVolume6fatPutEmm+0x2e>
    e990:	4b c0       	rjmp	.+150    	; 0xea28 <_ZN8SdVolume6fatPutEmm+0xc4>
    e992:	89 85       	ldd	r24, Y+9	; 0x09
    e994:	9a 85       	ldd	r25, Y+10	; 0x0a
    e996:	ab 85       	ldd	r26, Y+11	; 0x0b
    e998:	bc 85       	ldd	r27, Y+12	; 0x0c
    e99a:	01 96       	adiw	r24, 0x01	; 1
    e99c:	a1 1d       	adc	r26, r1
    e99e:	b1 1d       	adc	r27, r1
    e9a0:	84 17       	cp	r24, r20
    e9a2:	95 07       	cpc	r25, r21
    e9a4:	a6 07       	cpc	r26, r22
    e9a6:	b7 07       	cpc	r27, r23
    e9a8:	08 f4       	brcc	.+2      	; 0xe9ac <_ZN8SdVolume6fatPutEmm+0x48>
    e9aa:	3e c0       	rjmp	.+124    	; 0xea28 <_ZN8SdVolume6fatPutEmm+0xc4>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  }
  if (fatType_ == 16) {
    e9ac:	8f 89       	ldd	r24, Y+23	; 0x17
    e9ae:	80 31       	cpi	r24, 0x10	; 16
    e9b0:	29 f4       	brne	.+10     	; 0xe9bc <_ZN8SdVolume6fatPutEmm+0x58>
    lba = fatStartBlock_ + (cluster >> 8);
    e9b2:	25 2f       	mov	r18, r21
    e9b4:	36 2f       	mov	r19, r22
    e9b6:	47 2f       	mov	r20, r23
    e9b8:	55 27       	eor	r21, r21
    e9ba:	0b c0       	rjmp	.+22     	; 0xe9d2 <_ZN8SdVolume6fatPutEmm+0x6e>
  } else if (fatType_ == 32) {
    e9bc:	80 32       	cpi	r24, 0x20	; 32
    e9be:	a1 f5       	brne	.+104    	; 0xea28 <_ZN8SdVolume6fatPutEmm+0xc4>
    lba = fatStartBlock_ + (cluster >> 7);
    e9c0:	9a 01       	movw	r18, r20
    e9c2:	ab 01       	movw	r20, r22
    e9c4:	17 e0       	ldi	r17, 0x07	; 7
    e9c6:	56 95       	lsr	r21
    e9c8:	47 95       	ror	r20
    e9ca:	37 95       	ror	r19
    e9cc:	27 95       	ror	r18
    e9ce:	1a 95       	dec	r17
    e9d0:	d1 f7       	brne	.-12     	; 0xe9c6 <_ZN8SdVolume6fatPutEmm+0x62>
    e9d2:	8b 89       	ldd	r24, Y+19	; 0x13
    e9d4:	9c 89       	ldd	r25, Y+20	; 0x14
    e9d6:	ad 89       	ldd	r26, Y+21	; 0x15
    e9d8:	be 89       	ldd	r27, Y+22	; 0x16
    e9da:	28 0f       	add	r18, r24
    e9dc:	39 1f       	adc	r19, r25
    e9de:	4a 1f       	adc	r20, r26
    e9e0:	5b 1f       	adc	r21, r27
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_WRITE);
    e9e2:	ca 01       	movw	r24, r20
    e9e4:	b9 01       	movw	r22, r18
    e9e6:	41 e0       	ldi	r20, 0x01	; 1
    e9e8:	0e 94 ae 74 	call	0xe95c	; 0xe95c <_ZN8SdVolume13cacheFetchFatEmh>
    e9ec:	9c 01       	movw	r18, r24
  if (!pc) {
    e9ee:	00 97       	sbiw	r24, 0x00	; 0
    e9f0:	d9 f0       	breq	.+54     	; 0xea28 <_ZN8SdVolume6fatPutEmm+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // store entry
  if (fatType_ == 16) {
    e9f2:	8f 89       	ldd	r24, Y+23	; 0x17
    e9f4:	80 31       	cpi	r24, 0x10	; 16
    e9f6:	49 f4       	brne	.+18     	; 0xea0a <_ZN8SdVolume6fatPutEmm+0xa6>
    pc->fat16[cluster & 0XFF] = value;
    e9f8:	f6 01       	movw	r30, r12
    e9fa:	f0 70       	andi	r31, 0x00	; 0
    e9fc:	ee 0f       	add	r30, r30
    e9fe:	ff 1f       	adc	r31, r31
    ea00:	e2 0f       	add	r30, r18
    ea02:	f3 1f       	adc	r31, r19
    ea04:	80 82       	st	Z, r8
    ea06:	91 82       	std	Z+1, r9	; 0x01
    ea08:	0d c0       	rjmp	.+26     	; 0xea24 <_ZN8SdVolume6fatPutEmm+0xc0>
  } else {
    pc->fat32[cluster & 0X7F] = value;
    ea0a:	f6 01       	movw	r30, r12
    ea0c:	ef 77       	andi	r30, 0x7F	; 127
    ea0e:	f0 70       	andi	r31, 0x00	; 0
    ea10:	ee 0f       	add	r30, r30
    ea12:	ff 1f       	adc	r31, r31
    ea14:	ee 0f       	add	r30, r30
    ea16:	ff 1f       	adc	r31, r31
    ea18:	e2 0f       	add	r30, r18
    ea1a:	f3 1f       	adc	r31, r19
    ea1c:	80 82       	st	Z, r8
    ea1e:	91 82       	std	Z+1, r9	; 0x01
    ea20:	a2 82       	std	Z+2, r10	; 0x02
    ea22:	b3 82       	std	Z+3, r11	; 0x03
    ea24:	81 e0       	ldi	r24, 0x01	; 1
    ea26:	01 c0       	rjmp	.+2      	; 0xea2a <_ZN8SdVolume6fatPutEmm+0xc6>
    ea28:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    ea2a:	df 91       	pop	r29
    ea2c:	cf 91       	pop	r28
    ea2e:	1f 91       	pop	r17
    ea30:	0f 91       	pop	r16
    ea32:	ff 90       	pop	r15
    ea34:	ef 90       	pop	r14
    ea36:	df 90       	pop	r13
    ea38:	cf 90       	pop	r12
    ea3a:	bf 90       	pop	r11
    ea3c:	af 90       	pop	r10
    ea3e:	9f 90       	pop	r9
    ea40:	8f 90       	pop	r8
    ea42:	08 95       	ret

0000ea44 <_ZN8SdVolume6fatGetEmPm>:
uint32_t SdVolume::clusterStartBlock(uint32_t cluster) const {
  return dataStartBlock_ + ((cluster - 2)*blocksPerCluster_);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
bool SdVolume::fatGet(uint32_t cluster, uint32_t* value) {
    ea44:	cf 92       	push	r12
    ea46:	df 92       	push	r13
    ea48:	ef 92       	push	r14
    ea4a:	ff 92       	push	r15
    ea4c:	0f 93       	push	r16
    ea4e:	1f 93       	push	r17
    ea50:	cf 93       	push	r28
    ea52:	df 93       	push	r29
    ea54:	ec 01       	movw	r28, r24
    ea56:	7a 01       	movw	r14, r20
    ea58:	8b 01       	movw	r16, r22
    ea5a:	69 01       	movw	r12, r18
  uint32_t lba;
  cache_t* pc;
  // error if reserved cluster of beyond FAT
  if (cluster < 2  || cluster > (clusterCount_ + 1)) {
    ea5c:	42 30       	cpi	r20, 0x02	; 2
    ea5e:	51 05       	cpc	r21, r1
    ea60:	61 05       	cpc	r22, r1
    ea62:	71 05       	cpc	r23, r1
    ea64:	08 f4       	brcc	.+2      	; 0xea68 <_ZN8SdVolume6fatGetEmPm+0x24>
    ea66:	53 c0       	rjmp	.+166    	; 0xeb0e <_ZN8SdVolume6fatGetEmPm+0xca>
    ea68:	89 85       	ldd	r24, Y+9	; 0x09
    ea6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ea6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    ea6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    ea70:	01 96       	adiw	r24, 0x01	; 1
    ea72:	a1 1d       	adc	r26, r1
    ea74:	b1 1d       	adc	r27, r1
    ea76:	84 17       	cp	r24, r20
    ea78:	95 07       	cpc	r25, r21
    ea7a:	a6 07       	cpc	r26, r22
    ea7c:	b7 07       	cpc	r27, r23
    ea7e:	08 f4       	brcc	.+2      	; 0xea82 <_ZN8SdVolume6fatGetEmPm+0x3e>
    ea80:	46 c0       	rjmp	.+140    	; 0xeb0e <_ZN8SdVolume6fatGetEmPm+0xca>
    }
    tmp |= pc->data[index] << 8;
    *value = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    return true;
  }
  if (fatType_ == 16) {
    ea82:	8f 89       	ldd	r24, Y+23	; 0x17
    ea84:	80 31       	cpi	r24, 0x10	; 16
    ea86:	29 f4       	brne	.+10     	; 0xea92 <_ZN8SdVolume6fatGetEmPm+0x4e>
    lba = fatStartBlock_ + (cluster >> 8);
    ea88:	55 27       	eor	r21, r21
    ea8a:	41 2f       	mov	r20, r17
    ea8c:	30 2f       	mov	r19, r16
    ea8e:	2f 2d       	mov	r18, r15
    ea90:	0b c0       	rjmp	.+22     	; 0xeaa8 <_ZN8SdVolume6fatGetEmPm+0x64>
  } else if (fatType_ == 32) {
    ea92:	80 32       	cpi	r24, 0x20	; 32
    ea94:	e1 f5       	brne	.+120    	; 0xeb0e <_ZN8SdVolume6fatGetEmPm+0xca>
    lba = fatStartBlock_ + (cluster >> 7);
    ea96:	9a 01       	movw	r18, r20
    ea98:	ab 01       	movw	r20, r22
    ea9a:	67 e0       	ldi	r22, 0x07	; 7
    ea9c:	56 95       	lsr	r21
    ea9e:	47 95       	ror	r20
    eaa0:	37 95       	ror	r19
    eaa2:	27 95       	ror	r18
    eaa4:	6a 95       	dec	r22
    eaa6:	d1 f7       	brne	.-12     	; 0xea9c <_ZN8SdVolume6fatGetEmPm+0x58>
    eaa8:	8b 89       	ldd	r24, Y+19	; 0x13
    eaaa:	9c 89       	ldd	r25, Y+20	; 0x14
    eaac:	ad 89       	ldd	r26, Y+21	; 0x15
    eaae:	be 89       	ldd	r27, Y+22	; 0x16
    eab0:	28 0f       	add	r18, r24
    eab2:	39 1f       	adc	r19, r25
    eab4:	4a 1f       	adc	r20, r26
    eab6:	5b 1f       	adc	r21, r27
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  pc = cacheFetchFat(lba, CACHE_FOR_READ);
    eab8:	ca 01       	movw	r24, r20
    eaba:	b9 01       	movw	r22, r18
    eabc:	40 e0       	ldi	r20, 0x00	; 0
    eabe:	0e 94 ae 74 	call	0xe95c	; 0xe95c <_ZN8SdVolume13cacheFetchFatEmh>
    eac2:	9c 01       	movw	r18, r24
  if (!pc) {
    eac4:	00 97       	sbiw	r24, 0x00	; 0
    eac6:	19 f1       	breq	.+70     	; 0xeb0e <_ZN8SdVolume6fatGetEmPm+0xca>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (fatType_ == 16) {
    eac8:	8f 89       	ldd	r24, Y+23	; 0x17
    eaca:	80 31       	cpi	r24, 0x10	; 16
    eacc:	59 f4       	brne	.+22     	; 0xeae4 <_ZN8SdVolume6fatGetEmPm+0xa0>
    *value = pc->fat16[cluster & 0XFF];
    eace:	f7 01       	movw	r30, r14
    ead0:	f0 70       	andi	r31, 0x00	; 0
    ead2:	ee 0f       	add	r30, r30
    ead4:	ff 1f       	adc	r31, r31
    ead6:	e2 0f       	add	r30, r18
    ead8:	f3 1f       	adc	r31, r19
    eada:	80 81       	ld	r24, Z
    eadc:	91 81       	ldd	r25, Z+1	; 0x01
    eade:	a0 e0       	ldi	r26, 0x00	; 0
    eae0:	b0 e0       	ldi	r27, 0x00	; 0
    eae2:	0e c0       	rjmp	.+28     	; 0xeb00 <_ZN8SdVolume6fatGetEmPm+0xbc>
  } else {
    *value = pc->fat32[cluster & 0X7F] & FAT32MASK;
    eae4:	f7 01       	movw	r30, r14
    eae6:	ef 77       	andi	r30, 0x7F	; 127
    eae8:	f0 70       	andi	r31, 0x00	; 0
    eaea:	ee 0f       	add	r30, r30
    eaec:	ff 1f       	adc	r31, r31
    eaee:	ee 0f       	add	r30, r30
    eaf0:	ff 1f       	adc	r31, r31
    eaf2:	e2 0f       	add	r30, r18
    eaf4:	f3 1f       	adc	r31, r19
    eaf6:	80 81       	ld	r24, Z
    eaf8:	91 81       	ldd	r25, Z+1	; 0x01
    eafa:	a2 81       	ldd	r26, Z+2	; 0x02
    eafc:	b3 81       	ldd	r27, Z+3	; 0x03
    eafe:	bf 70       	andi	r27, 0x0F	; 15
    eb00:	f6 01       	movw	r30, r12
    eb02:	80 83       	st	Z, r24
    eb04:	91 83       	std	Z+1, r25	; 0x01
    eb06:	a2 83       	std	Z+2, r26	; 0x02
    eb08:	b3 83       	std	Z+3, r27	; 0x03
    eb0a:	81 e0       	ldi	r24, 0x01	; 1
    eb0c:	01 c0       	rjmp	.+2      	; 0xeb10 <_ZN8SdVolume6fatGetEmPm+0xcc>
    eb0e:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;

 fail:
  return false;
}
    eb10:	df 91       	pop	r29
    eb12:	cf 91       	pop	r28
    eb14:	1f 91       	pop	r17
    eb16:	0f 91       	pop	r16
    eb18:	ff 90       	pop	r15
    eb1a:	ef 90       	pop	r14
    eb1c:	df 90       	pop	r13
    eb1e:	cf 90       	pop	r12
    eb20:	08 95       	ret

0000eb22 <_ZN8SdVolume9freeChainEm>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool SdVolume::freeChain(uint32_t cluster) {
    eb22:	af 92       	push	r10
    eb24:	bf 92       	push	r11
    eb26:	cf 92       	push	r12
    eb28:	df 92       	push	r13
    eb2a:	ef 92       	push	r14
    eb2c:	ff 92       	push	r15
    eb2e:	0f 93       	push	r16
    eb30:	1f 93       	push	r17
    eb32:	df 93       	push	r29
    eb34:	cf 93       	push	r28
    eb36:	00 d0       	rcall	.+0      	; 0xeb38 <_ZN8SdVolume9freeChainEm+0x16>
    eb38:	0f 92       	push	r0
    eb3a:	cd b7       	in	r28, 0x3d	; 61
    eb3c:	de b7       	in	r29, 0x3e	; 62
    eb3e:	6c 01       	movw	r12, r24
    eb40:	7a 01       	movw	r14, r20
    eb42:	8b 01       	movw	r16, r22
  uint32_t next;

  // clear free cluster location
  allocSearchStart_ = 2;
    eb44:	82 e0       	ldi	r24, 0x02	; 2
    eb46:	90 e0       	ldi	r25, 0x00	; 0
    eb48:	a0 e0       	ldi	r26, 0x00	; 0
    eb4a:	b0 e0       	ldi	r27, 0x00	; 0
    eb4c:	f6 01       	movw	r30, r12
    eb4e:	80 83       	st	Z, r24
    eb50:	91 83       	std	Z+1, r25	; 0x01
    eb52:	a2 83       	std	Z+2, r26	; 0x02
    eb54:	b3 83       	std	Z+3, r27	; 0x03

  do {
    if (!fatGet(cluster, &next)) {
    eb56:	5e 01       	movw	r10, r28
    eb58:	08 94       	sec
    eb5a:	a1 1c       	adc	r10, r1
    eb5c:	b1 1c       	adc	r11, r1
    eb5e:	c6 01       	movw	r24, r12
    eb60:	b8 01       	movw	r22, r16
    eb62:	a7 01       	movw	r20, r14
    eb64:	95 01       	movw	r18, r10
    eb66:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    eb6a:	88 23       	and	r24, r24
    eb6c:	41 f1       	breq	.+80     	; 0xebbe <_ZN8SdVolume9freeChainEm+0x9c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    eb6e:	c6 01       	movw	r24, r12
    eb70:	b8 01       	movw	r22, r16
    eb72:	a7 01       	movw	r20, r14
    eb74:	00 e0       	ldi	r16, 0x00	; 0
    eb76:	10 e0       	ldi	r17, 0x00	; 0
    eb78:	20 e0       	ldi	r18, 0x00	; 0
    eb7a:	30 e0       	ldi	r19, 0x00	; 0
    eb7c:	0e 94 b2 74 	call	0xe964	; 0xe964 <_ZN8SdVolume6fatPutEmm>
    eb80:	88 23       	and	r24, r24
    eb82:	e9 f0       	breq	.+58     	; 0xebbe <_ZN8SdVolume9freeChainEm+0x9c>
      DBG_FAIL_MACRO;
      goto fail;
    }

    cluster = next;
    eb84:	e9 80       	ldd	r14, Y+1	; 0x01
    eb86:	fa 80       	ldd	r15, Y+2	; 0x02
    eb88:	0b 81       	ldd	r16, Y+3	; 0x03
    eb8a:	1c 81       	ldd	r17, Y+4	; 0x04
    return fatPut(cluster, 0x0FFFFFFF);
  }
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const {
    if (FAT12_SUPPORT && fatType_ == 12) return  cluster >= FAT12EOC_MIN;
    if (fatType_ == 16) return cluster >= FAT16EOC_MIN;
    eb8c:	f6 01       	movw	r30, r12
    eb8e:	87 89       	ldd	r24, Z+23	; 0x17
    eb90:	80 31       	cpi	r24, 0x10	; 16
    eb92:	51 f4       	brne	.+20     	; 0xeba8 <_ZN8SdVolume9freeChainEm+0x86>
    eb94:	f8 ef       	ldi	r31, 0xF8	; 248
    eb96:	ef 16       	cp	r14, r31
    eb98:	ff ef       	ldi	r31, 0xFF	; 255
    eb9a:	ff 06       	cpc	r15, r31
    eb9c:	f0 e0       	ldi	r31, 0x00	; 0
    eb9e:	0f 07       	cpc	r16, r31
    eba0:	f0 e0       	ldi	r31, 0x00	; 0
    eba2:	1f 07       	cpc	r17, r31
    eba4:	e0 f2       	brcs	.-72     	; 0xeb5e <_ZN8SdVolume9freeChainEm+0x3c>
    eba6:	09 c0       	rjmp	.+18     	; 0xebba <_ZN8SdVolume9freeChainEm+0x98>
    return  cluster >= FAT32EOC_MIN;
    eba8:	88 ef       	ldi	r24, 0xF8	; 248
    ebaa:	e8 16       	cp	r14, r24
    ebac:	8f ef       	ldi	r24, 0xFF	; 255
    ebae:	f8 06       	cpc	r15, r24
    ebb0:	8f ef       	ldi	r24, 0xFF	; 255
    ebb2:	08 07       	cpc	r16, r24
    ebb4:	8f e0       	ldi	r24, 0x0F	; 15
    ebb6:	18 07       	cpc	r17, r24
    ebb8:	90 f2       	brcs	.-92     	; 0xeb5e <_ZN8SdVolume9freeChainEm+0x3c>
  uint32_t next;

  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    ebba:	81 e0       	ldi	r24, 0x01	; 1
    ebbc:	01 c0       	rjmp	.+2      	; 0xebc0 <_ZN8SdVolume9freeChainEm+0x9e>
    ebbe:	80 e0       	ldi	r24, 0x00	; 0

  return true;

 fail:
  return false;
}
    ebc0:	24 96       	adiw	r28, 0x04	; 4
    ebc2:	cd bf       	out	0x3d, r28	; 61
    ebc4:	de bf       	out	0x3e, r29	; 62
    ebc6:	cf 91       	pop	r28
    ebc8:	df 91       	pop	r29
    ebca:	1f 91       	pop	r17
    ebcc:	0f 91       	pop	r16
    ebce:	ff 90       	pop	r15
    ebd0:	ef 90       	pop	r14
    ebd2:	df 90       	pop	r13
    ebd4:	cf 90       	pop	r12
    ebd6:	bf 90       	pop	r11
    ebd8:	af 90       	pop	r10
    ebda:	08 95       	ret

0000ebdc <_ZN8SdVolume15allocContiguousEmPm>:
#endif  // USE_SEPARATE_FAT_CACHE
Sd2Card* SdVolume::sdCard_;            // pointer to SD card object
#endif  // USE_MULTIPLE_CARDS
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    ebdc:	2f 92       	push	r2
    ebde:	3f 92       	push	r3
    ebe0:	4f 92       	push	r4
    ebe2:	5f 92       	push	r5
    ebe4:	6f 92       	push	r6
    ebe6:	7f 92       	push	r7
    ebe8:	8f 92       	push	r8
    ebea:	9f 92       	push	r9
    ebec:	af 92       	push	r10
    ebee:	bf 92       	push	r11
    ebf0:	cf 92       	push	r12
    ebf2:	df 92       	push	r13
    ebf4:	ef 92       	push	r14
    ebf6:	ff 92       	push	r15
    ebf8:	0f 93       	push	r16
    ebfa:	1f 93       	push	r17
    ebfc:	df 93       	push	r29
    ebfe:	cf 93       	push	r28
    ec00:	cd b7       	in	r28, 0x3d	; 61
    ec02:	de b7       	in	r29, 0x3e	; 62
    ec04:	2f 97       	sbiw	r28, 0x0f	; 15
    ec06:	cd bf       	out	0x3d, r28	; 61
    ec08:	de bf       	out	0x3e, r29	; 62
    ec0a:	1c 01       	movw	r2, r24
    ec0c:	4a 87       	std	Y+10, r20	; 0x0a
    ec0e:	5b 87       	std	Y+11, r21	; 0x0b
    ec10:	6c 87       	std	Y+12, r22	; 0x0c
    ec12:	7d 87       	std	Y+13, r23	; 0x0d
    ec14:	2e 87       	std	Y+14, r18	; 0x0e
    ec16:	3f 87       	std	Y+15, r19	; 0x0f
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    ec18:	dc 01       	movw	r26, r24
    ec1a:	19 96       	adiw	r26, 0x09	; 9
    ec1c:	8d 91       	ld	r24, X+
    ec1e:	9d 91       	ld	r25, X+
    ec20:	0d 90       	ld	r0, X+
    ec22:	bc 91       	ld	r27, X
    ec24:	a0 2d       	mov	r26, r0
    ec26:	01 96       	adiw	r24, 0x01	; 1
    ec28:	a1 1d       	adc	r26, r1
    ec2a:	b1 1d       	adc	r27, r1
    ec2c:	8e 83       	std	Y+6, r24	; 0x06
    ec2e:	9f 83       	std	Y+7, r25	; 0x07
    ec30:	a8 87       	std	Y+8, r26	; 0x08
    ec32:	b9 87       	std	Y+9, r27	; 0x09

  // flag to save place to start next search
  bool setStart;

  // set search start cluster
  if (*curCluster) {
    ec34:	f9 01       	movw	r30, r18
    ec36:	00 81       	ld	r16, Z
    ec38:	11 81       	ldd	r17, Z+1	; 0x01
    ec3a:	22 81       	ldd	r18, Z+2	; 0x02
    ec3c:	33 81       	ldd	r19, Z+3	; 0x03
    ec3e:	01 15       	cp	r16, r1
    ec40:	11 05       	cpc	r17, r1
    ec42:	21 05       	cpc	r18, r1
    ec44:	31 05       	cpc	r19, r1
    ec46:	49 f0       	breq	.+18     	; 0xec5a <_ZN8SdVolume15allocContiguousEmPm+0x7e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    ec48:	48 01       	movw	r8, r16
    ec4a:	59 01       	movw	r10, r18
    ec4c:	08 94       	sec
    ec4e:	81 1c       	adc	r8, r1
    ec50:	91 1c       	adc	r9, r1
    ec52:	a1 1c       	adc	r10, r1
    ec54:	b1 1c       	adc	r11, r1
    ec56:	1d 82       	std	Y+5, r1	; 0x05
    ec58:	10 c0       	rjmp	.+32     	; 0xec7a <_ZN8SdVolume15allocContiguousEmPm+0x9e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    ec5a:	d1 01       	movw	r26, r2
    ec5c:	8d 90       	ld	r8, X+
    ec5e:	9d 90       	ld	r9, X+
    ec60:	ad 90       	ld	r10, X+
    ec62:	bc 90       	ld	r11, X

    // save next search start if one cluster
    setStart = count == 1;
    ec64:	1d 82       	std	Y+5, r1	; 0x05
    ec66:	8a 85       	ldd	r24, Y+10	; 0x0a
    ec68:	9b 85       	ldd	r25, Y+11	; 0x0b
    ec6a:	ac 85       	ldd	r26, Y+12	; 0x0c
    ec6c:	bd 85       	ldd	r27, Y+13	; 0x0d
    ec6e:	01 97       	sbiw	r24, 0x01	; 1
    ec70:	a1 05       	cpc	r26, r1
    ec72:	b1 05       	cpc	r27, r1
    ec74:	11 f4       	brne	.+4      	; 0xec7a <_ZN8SdVolume15allocContiguousEmPm+0x9e>
    ec76:	91 e0       	ldi	r25, 0x01	; 1
    ec78:	9d 83       	std	Y+5, r25	; 0x05
    ec7a:	75 01       	movw	r14, r10
    ec7c:	64 01       	movw	r12, r8
    ec7e:	44 24       	eor	r4, r4
    ec80:	55 24       	eor	r5, r5
    ec82:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    ec84:	8e 01       	movw	r16, r28
    ec86:	0f 5f       	subi	r16, 0xFF	; 255
    ec88:	1f 4f       	sbci	r17, 0xFF	; 255
  endCluster = bgnCluster;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    ec8a:	f1 01       	movw	r30, r2
    ec8c:	81 85       	ldd	r24, Z+9	; 0x09
    ec8e:	92 85       	ldd	r25, Z+10	; 0x0a
    ec90:	a3 85       	ldd	r26, Z+11	; 0x0b
    ec92:	b4 85       	ldd	r27, Z+12	; 0x0c
    ec94:	48 16       	cp	r4, r24
    ec96:	59 06       	cpc	r5, r25
    ec98:	6a 06       	cpc	r6, r26
    ec9a:	7b 06       	cpc	r7, r27
    ec9c:	08 f0       	brcs	.+2      	; 0xeca0 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    ec9e:	90 c0       	rjmp	.+288    	; 0xedc0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    eca0:	8e 81       	ldd	r24, Y+6	; 0x06
    eca2:	9f 81       	ldd	r25, Y+7	; 0x07
    eca4:	a8 85       	ldd	r26, Y+8	; 0x08
    eca6:	b9 85       	ldd	r27, Y+9	; 0x09
    eca8:	8c 15       	cp	r24, r12
    ecaa:	9d 05       	cpc	r25, r13
    ecac:	ae 05       	cpc	r26, r14
    ecae:	bf 05       	cpc	r27, r15
    ecb0:	50 f4       	brcc	.+20     	; 0xecc6 <_ZN8SdVolume15allocContiguousEmPm+0xea>
    ecb2:	f2 e0       	ldi	r31, 0x02	; 2
    ecb4:	8f 2e       	mov	r8, r31
    ecb6:	91 2c       	mov	r9, r1
    ecb8:	a1 2c       	mov	r10, r1
    ecba:	b1 2c       	mov	r11, r1
    ecbc:	e2 e0       	ldi	r30, 0x02	; 2
    ecbe:	ce 2e       	mov	r12, r30
    ecc0:	d1 2c       	mov	r13, r1
    ecc2:	e1 2c       	mov	r14, r1
    ecc4:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    ecc6:	c1 01       	movw	r24, r2
    ecc8:	b7 01       	movw	r22, r14
    ecca:	a6 01       	movw	r20, r12
    eccc:	98 01       	movw	r18, r16
    ecce:	0e 94 22 75 	call	0xea44	; 0xea44 <_ZN8SdVolume6fatGetEmPm>
    ecd2:	88 23       	and	r24, r24
    ecd4:	09 f4       	brne	.+2      	; 0xecd8 <_ZN8SdVolume15allocContiguousEmPm+0xfc>
    ecd6:	74 c0       	rjmp	.+232    	; 0xedc0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }

    if (f != 0) {
    ecd8:	89 81       	ldd	r24, Y+1	; 0x01
    ecda:	9a 81       	ldd	r25, Y+2	; 0x02
    ecdc:	ab 81       	ldd	r26, Y+3	; 0x03
    ecde:	bc 81       	ldd	r27, Y+4	; 0x04
    ece0:	a7 01       	movw	r20, r14
    ece2:	96 01       	movw	r18, r12
    ece4:	2f 5f       	subi	r18, 0xFF	; 255
    ece6:	3f 4f       	sbci	r19, 0xFF	; 255
    ece8:	4f 4f       	sbci	r20, 0xFF	; 255
    ecea:	5f 4f       	sbci	r21, 0xFF	; 255
    ecec:	00 97       	sbiw	r24, 0x00	; 0
    ecee:	a1 05       	cpc	r26, r1
    ecf0:	b1 05       	cpc	r27, r1
    ecf2:	19 f0       	breq	.+6      	; 0xecfa <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    ecf4:	49 01       	movw	r8, r18
    ecf6:	5a 01       	movw	r10, r20
    ecf8:	0d c0       	rjmp	.+26     	; 0xed14 <_ZN8SdVolume15allocContiguousEmPm+0x138>
    } else if ((endCluster - bgnCluster + 1) == count) {
    ecfa:	28 19       	sub	r18, r8
    ecfc:	39 09       	sbc	r19, r9
    ecfe:	4a 09       	sbc	r20, r10
    ed00:	5b 09       	sbc	r21, r11
    ed02:	8a 85       	ldd	r24, Y+10	; 0x0a
    ed04:	9b 85       	ldd	r25, Y+11	; 0x0b
    ed06:	ac 85       	ldd	r26, Y+12	; 0x0c
    ed08:	bd 85       	ldd	r27, Y+13	; 0x0d
    ed0a:	28 17       	cp	r18, r24
    ed0c:	39 07       	cpc	r19, r25
    ed0e:	4a 07       	cpc	r20, r26
    ed10:	5b 07       	cpc	r21, r27
    ed12:	59 f0       	breq	.+22     	; 0xed2a <_ZN8SdVolume15allocContiguousEmPm+0x14e>
  }
  // end of group
  endCluster = bgnCluster;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    ed14:	08 94       	sec
    ed16:	41 1c       	adc	r4, r1
    ed18:	51 1c       	adc	r5, r1
    ed1a:	61 1c       	adc	r6, r1
    ed1c:	71 1c       	adc	r7, r1
    ed1e:	08 94       	sec
    ed20:	c1 1c       	adc	r12, r1
    ed22:	d1 1c       	adc	r13, r1
    ed24:	e1 1c       	adc	r14, r1
    ed26:	f1 1c       	adc	r15, r1
    ed28:	b0 cf       	rjmp	.-160    	; 0xec8a <_ZN8SdVolume15allocContiguousEmPm+0xae>
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const;
  bool fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    ed2a:	c1 01       	movw	r24, r2
    ed2c:	a6 01       	movw	r20, r12
    ed2e:	b7 01       	movw	r22, r14
    ed30:	0f ef       	ldi	r16, 0xFF	; 255
    ed32:	1f ef       	ldi	r17, 0xFF	; 255
    ed34:	2f ef       	ldi	r18, 0xFF	; 255
    ed36:	3f e0       	ldi	r19, 0x0F	; 15
    ed38:	0e 94 b2 74 	call	0xe964	; 0xe964 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    ed3c:	88 23       	and	r24, r24
    ed3e:	99 f4       	brne	.+38     	; 0xed66 <_ZN8SdVolume15allocContiguousEmPm+0x18a>
    ed40:	3f c0       	rjmp	.+126    	; 0xedc0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) {
    ed42:	26 01       	movw	r4, r12
    ed44:	37 01       	movw	r6, r14
    ed46:	08 94       	sec
    ed48:	41 08       	sbc	r4, r1
    ed4a:	51 08       	sbc	r5, r1
    ed4c:	61 08       	sbc	r6, r1
    ed4e:	71 08       	sbc	r7, r1
    ed50:	c1 01       	movw	r24, r2
    ed52:	b3 01       	movw	r22, r6
    ed54:	a2 01       	movw	r20, r4
    ed56:	97 01       	movw	r18, r14
    ed58:	86 01       	movw	r16, r12
    ed5a:	0e 94 b2 74 	call	0xe964	; 0xe964 <_ZN8SdVolume6fatPutEmm>
    ed5e:	88 23       	and	r24, r24
    ed60:	79 f1       	breq	.+94     	; 0xedc0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    ed62:	73 01       	movw	r14, r6
    ed64:	62 01       	movw	r12, r4
  if (!fatPutEOC(endCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    ed66:	8c 14       	cp	r8, r12
    ed68:	9d 04       	cpc	r9, r13
    ed6a:	ae 04       	cpc	r10, r14
    ed6c:	bf 04       	cpc	r11, r15
    ed6e:	48 f3       	brcs	.-46     	; 0xed42 <_ZN8SdVolume15allocContiguousEmPm+0x166>
      DBG_FAIL_MACRO;
      goto fail;
    }
    endCluster--;
  }
  if (*curCluster != 0) {
    ed70:	ae 85       	ldd	r26, Y+14	; 0x0e
    ed72:	bf 85       	ldd	r27, Y+15	; 0x0f
    ed74:	4d 91       	ld	r20, X+
    ed76:	5d 91       	ld	r21, X+
    ed78:	6d 91       	ld	r22, X+
    ed7a:	7c 91       	ld	r23, X
    ed7c:	41 15       	cp	r20, r1
    ed7e:	51 05       	cpc	r21, r1
    ed80:	61 05       	cpc	r22, r1
    ed82:	71 05       	cpc	r23, r1
    ed84:	39 f0       	breq	.+14     	; 0xed94 <_ZN8SdVolume15allocContiguousEmPm+0x1b8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    ed86:	c1 01       	movw	r24, r2
    ed88:	95 01       	movw	r18, r10
    ed8a:	84 01       	movw	r16, r8
    ed8c:	0e 94 b2 74 	call	0xe964	; 0xe964 <_ZN8SdVolume6fatPutEmm>
    ed90:	88 23       	and	r24, r24
    ed92:	b1 f0       	breq	.+44     	; 0xedc0 <_ZN8SdVolume15allocContiguousEmPm+0x1e4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    ed94:	ee 85       	ldd	r30, Y+14	; 0x0e
    ed96:	ff 85       	ldd	r31, Y+15	; 0x0f
    ed98:	80 82       	st	Z, r8
    ed9a:	91 82       	std	Z+1, r9	; 0x01
    ed9c:	a2 82       	std	Z+2, r10	; 0x02
    ed9e:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    eda0:	fd 81       	ldd	r31, Y+5	; 0x05
    eda2:	ff 23       	and	r31, r31
    eda4:	59 f0       	breq	.+22     	; 0xedbc <_ZN8SdVolume15allocContiguousEmPm+0x1e0>
    eda6:	08 94       	sec
    eda8:	81 1c       	adc	r8, r1
    edaa:	91 1c       	adc	r9, r1
    edac:	a1 1c       	adc	r10, r1
    edae:	b1 1c       	adc	r11, r1
    edb0:	d1 01       	movw	r26, r2
    edb2:	8d 92       	st	X+, r8
    edb4:	9d 92       	st	X+, r9
    edb6:	ad 92       	st	X+, r10
    edb8:	bc 92       	st	X, r11
    edba:	13 97       	sbiw	r26, 0x03	; 3
    edbc:	81 e0       	ldi	r24, 0x01	; 1
    edbe:	01 c0       	rjmp	.+2      	; 0xedc2 <_ZN8SdVolume15allocContiguousEmPm+0x1e6>
    edc0:	80 e0       	ldi	r24, 0x00	; 0

  return true;

 fail:
  return false;
}
    edc2:	2f 96       	adiw	r28, 0x0f	; 15
    edc4:	cd bf       	out	0x3d, r28	; 61
    edc6:	de bf       	out	0x3e, r29	; 62
    edc8:	cf 91       	pop	r28
    edca:	df 91       	pop	r29
    edcc:	1f 91       	pop	r17
    edce:	0f 91       	pop	r16
    edd0:	ff 90       	pop	r15
    edd2:	ef 90       	pop	r14
    edd4:	df 90       	pop	r13
    edd6:	cf 90       	pop	r12
    edd8:	bf 90       	pop	r11
    edda:	af 90       	pop	r10
    eddc:	9f 90       	pop	r9
    edde:	8f 90       	pop	r8
    ede0:	7f 90       	pop	r7
    ede2:	6f 90       	pop	r6
    ede4:	5f 90       	pop	r5
    ede6:	4f 90       	pop	r4
    ede8:	3f 90       	pop	r3
    edea:	2f 90       	pop	r2
    edec:	08 95       	ret

0000edee <sd_fileSize>:

   return i_size;

}/*End sd_read*/

int32_t sd_fileSize( void *pv_fileHndle)
    edee:	fc 01       	movw	r30, r24
    edf0:	67 89       	ldd	r22, Z+23	; 0x17
    edf2:	70 8d       	ldd	r23, Z+24	; 0x18
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;

   return pt_file->fileSize();

}/*End sd_close*/
    edf4:	81 8d       	ldd	r24, Z+25	; 0x19
    edf6:	92 8d       	ldd	r25, Z+26	; 0x1a
    edf8:	08 95       	ret

0000edfa <_GLOBAL__I_sd_begin>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card() : errorCode_(SD_CARD_ERROR_INIT_NOT_CALLED), type_(0) {}
    edfa:	89 e1       	ldi	r24, 0x19	; 25
    edfc:	80 93 e7 24 	sts	0x24E7, r24
    ee00:	10 92 ea 24 	sts	0x24EA, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume() : fatType_(0) {}
    ee04:	10 92 02 25 	sts	0x2502, r1
    ee08:	10 92 09 25 	sts	0x2509, r1
    ee0c:	10 92 0c 25 	sts	0x250C, r1
bool sd_truncate( void *pv_fileHndle,
                  uint32_t i_length)
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   return pt_file->truncate( i_length);
}/*End sd_truncate*/
    ee10:	08 95       	ret

0000ee12 <sd_truncate>:

bool sd_truncate( void *pv_fileHndle,
                  uint32_t i_length)
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   return pt_file->truncate( i_length);
    ee12:	04 96       	adiw	r24, 0x04	; 4
    ee14:	0e 94 bb 65 	call	0xcb76	; 0xcb76 <_ZN10SdBaseFile8truncateEm>
}/*End sd_truncate*/
    ee18:	08 95       	ret

0000ee1a <sd_rewind>:
  int read(void* buf, size_t nbyte);
  int8_t readDir(dir_t* dir);
  static bool remove(SdBaseFile* dirFile, const char* path);
  bool remove();
  /** Set the file's current position to zero. */
  void rewind() {seekSet(0);}
    ee1a:	04 96       	adiw	r24, 0x04	; 4
    ee1c:	40 e0       	ldi	r20, 0x00	; 0
    ee1e:	50 e0       	ldi	r21, 0x00	; 0
    ee20:	60 e0       	ldi	r22, 0x00	; 0
    ee22:	70 e0       	ldi	r23, 0x00	; 0
    ee24:	0e 94 89 64 	call	0xc912	; 0xc912 <_ZN10SdBaseFile7seekSetEm>
void sd_rewind( void *pv_fileHndle)
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   pt_file->rewind();

}/*End sd_rewind*/
    ee28:	08 95       	ret

0000ee2a <sd_read>:
}/*End sd_write*/

int32_t sd_read( t_SPIHNDL t_spiHndl,
                 void *pv_fileHndle,
                 uint8_t *pc_data,
                 uint16_t s_size)
    ee2a:	df 93       	push	r29
    ee2c:	cf 93       	push	r28
    ee2e:	0f 92       	push	r0
    ee30:	0f 92       	push	r0
    ee32:	cd b7       	in	r28, 0x3d	; 61
    ee34:	de b7       	in	r29, 0x3e	; 62
    ee36:	89 83       	std	Y+1, r24	; 0x01
    ee38:	9a 83       	std	Y+2, r25	; 0x02
    ee3a:	cb 01       	movw	r24, r22
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   int32_t i_size;

   i_size = (int32_t)pt_file->read( (void *)pc_data, s_size);
    ee3c:	04 96       	adiw	r24, 0x04	; 4
    ee3e:	ba 01       	movw	r22, r20
    ee40:	a9 01       	movw	r20, r18
    ee42:	0e 94 31 67 	call	0xce62	; 0xce62 <_ZN10SdBaseFile4readEPvj>
    ee46:	9c 01       	movw	r18, r24
    ee48:	44 27       	eor	r20, r20
    ee4a:	37 fd       	sbrc	r19, 7
    ee4c:	40 95       	com	r20
    ee4e:	54 2f       	mov	r21, r20

   return i_size;

}/*End sd_read*/
    ee50:	b9 01       	movw	r22, r18
    ee52:	ca 01       	movw	r24, r20
    ee54:	0f 90       	pop	r0
    ee56:	0f 90       	pop	r0
    ee58:	cf 91       	pop	r28
    ee5a:	df 91       	pop	r29
    ee5c:	08 95       	ret

0000ee5e <sd_write>:
}/*End sd_rmDashR*/

int32_t sd_write( t_SPIHNDL t_spiHndl,
                  void *pv_fileHndle,
                  uint8_t *pc_data,
                  uint16_t s_size)
    ee5e:	df 93       	push	r29
    ee60:	cf 93       	push	r28
    ee62:	0f 92       	push	r0
    ee64:	0f 92       	push	r0
    ee66:	cd b7       	in	r28, 0x3d	; 61
    ee68:	de b7       	in	r29, 0x3e	; 62
    ee6a:	89 83       	std	Y+1, r24	; 0x01
    ee6c:	9a 83       	std	Y+2, r25	; 0x02
    ee6e:	cb 01       	movw	r24, r22
{
   SdFile *pt_file = (SdFile *)pv_fileHndle;
   int32_t i_size;

   i_size = (int32_t)pt_file->write( (void *)pc_data, s_size);
    ee70:	ba 01       	movw	r22, r20
    ee72:	a9 01       	movw	r20, r18
    ee74:	0e 94 7d 72 	call	0xe4fa	; 0xe4fa <_ZN6SdFile5writeEPKvj>
    ee78:	9c 01       	movw	r18, r24
    ee7a:	44 27       	eor	r20, r20
    ee7c:	37 fd       	sbrc	r19, 7
    ee7e:	40 95       	com	r20
    ee80:	54 2f       	mov	r21, r20

   return i_size;

}/*End sd_write*/
    ee82:	b9 01       	movw	r22, r18
    ee84:	ca 01       	movw	r24, r20
    ee86:	0f 90       	pop	r0
    ee88:	0f 90       	pop	r0
    ee8a:	cf 91       	pop	r28
    ee8c:	df 91       	pop	r29
    ee8e:	08 95       	ret

0000ee90 <sd_rmDashR>:
bool sd_rmDashR( void)
{
   /*------------------------------------------------------------------------*
    * Remove all the files within, and the current working directory itself.
    *------------------------------------------------------------------------*/
   return sd.vwd()->rmRfStar();
    ee90:	89 e0       	ldi	r24, 0x09	; 9
    ee92:	95 e2       	ldi	r25, 0x25	; 37
    ee94:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <_ZN10SdBaseFile8rmRfStarEv>
}/*End sd_rmDashR*/
    ee98:	08 95       	ret

0000ee9a <sd_remove>:
bool sd_rmdir(char *pc_filepath)
{
   return sd.rmdir( pc_filepath);
}/*End sd_rmdir*/

bool sd_remove(char *pc_filepath)
    ee9a:	bc 01       	movw	r22, r24
{
   return sd.remove( pc_filepath);
    ee9c:	86 ee       	ldi	r24, 0xE6	; 230
    ee9e:	94 e2       	ldi	r25, 0x24	; 36
    eea0:	0e 94 ba 71 	call	0xe374	; 0xe374 <_ZN5SdFat6removeEPKc>
}/*End sd_remove*/
    eea4:	08 95       	ret

0000eea6 <sd_rmdir>:
      return sd.mkdir( pc_filepath, true);

   return false;
}/*End sd_mkdir*/

bool sd_rmdir(char *pc_filepath)
    eea6:	bc 01       	movw	r22, r24
{
   return sd.rmdir( pc_filepath);
    eea8:	86 ee       	ldi	r24, 0xE6	; 230
    eeaa:	94 e2       	ldi	r25, 0x24	; 36
    eeac:	0e 94 9b 71 	call	0xe336	; 0xe336 <_ZN5SdFat5rmdirEPKc>
}/*End sd_rmdir*/
    eeb0:	08 95       	ret

0000eeb2 <sd_mkdir>:
bool sd_chdir(char *pc_filepath)
{
   return sd.chdir( pc_filepath);
}/*sd_lsPrint*/

bool sd_mkdir(char *pc_filepath)
    eeb2:	cf 93       	push	r28
    eeb4:	df 93       	push	r29
    eeb6:	ec 01       	movw	r28, r24
{
   if( sd.chdir( *pc_filepath) == false)
    eeb8:	60 e0       	ldi	r22, 0x00	; 0
    eeba:	88 81       	ld	r24, Y
    eebc:	81 11       	cpse	r24, r1
    eebe:	61 e0       	ldi	r22, 0x01	; 1
    eec0:	86 ee       	ldi	r24, 0xE6	; 230
    eec2:	94 e2       	ldi	r25, 0x24	; 36
    eec4:	0e 94 e1 71 	call	0xe3c2	; 0xe3c2 <_ZN5SdFat5chdirEb>
    eec8:	88 23       	and	r24, r24
    eeca:	11 f0       	breq	.+4      	; 0xeed0 <sd_mkdir+0x1e>
    eecc:	80 e0       	ldi	r24, 0x00	; 0
    eece:	06 c0       	rjmp	.+12     	; 0xeedc <sd_mkdir+0x2a>
      return sd.mkdir( pc_filepath, true);
    eed0:	86 ee       	ldi	r24, 0xE6	; 230
    eed2:	94 e2       	ldi	r25, 0x24	; 36
    eed4:	be 01       	movw	r22, r28
    eed6:	41 e0       	ldi	r20, 0x01	; 1
    eed8:	0e 94 be 71 	call	0xe37c	; 0xe37c <_ZN5SdFat5mkdirEPKcb>

   return false;
}/*End sd_mkdir*/
    eedc:	df 91       	pop	r29
    eede:	cf 91       	pop	r28
    eee0:	08 95       	ret

0000eee2 <sd_chdir>:
void sd_ls( void)
{
   sd.ls(LS_DATE | LS_SIZE | LS_R);
}/*sd_ls*/

bool sd_chdir(char *pc_filepath)
    eee2:	bc 01       	movw	r22, r24
{
   return sd.chdir( pc_filepath);
    eee4:	86 ee       	ldi	r24, 0xE6	; 230
    eee6:	94 e2       	ldi	r25, 0x24	; 36
    eee8:	40 e0       	ldi	r20, 0x00	; 0
    eeea:	0e 94 fc 71 	call	0xe3f8	; 0xe3f8 <_ZN5SdFat5chdirEPKcb>
}/*sd_lsPrint*/
    eeee:	08 95       	ret

0000eef0 <sd_ls>:

}/*End sd_gcf*/

void sd_ls( void)
{
   sd.ls(LS_DATE | LS_SIZE | LS_R);
    eef0:	86 ee       	ldi	r24, 0xE6	; 230
    eef2:	94 e2       	ldi	r25, 0x24	; 36
    eef4:	67 e0       	ldi	r22, 0x07	; 7
    eef6:	0e 94 d7 71 	call	0xe3ae	; 0xe3ae <_ZN5SdFat2lsEh>
}/*sd_ls*/
    eefa:	08 95       	ret

0000eefc <sd_close>:
      return NULL;
   }

}/*End sd_open*/

bool sd_close( void *pv_fileHndle)
    eefc:	1f 93       	push	r17
    eefe:	df 93       	push	r29
    ef00:	cf 93       	push	r28
    ef02:	0f 92       	push	r0
    ef04:	0f 92       	push	r0
    ef06:	cd b7       	in	r28, 0x3d	; 61
    ef08:	de b7       	in	r29, 0x3e	; 62
{
   bool b_status;
   SdFile *pt_file = (SdFile *)pv_fileHndle;
    ef0a:	89 83       	std	Y+1, r24	; 0x01
    ef0c:	9a 83       	std	Y+2, r25	; 0x02
   b_status = pt_file->close();
    ef0e:	04 96       	adiw	r24, 0x04	; 4
    ef10:	0e 94 0b 67 	call	0xce16	; 0xce16 <_ZN10SdBaseFile5closeEv>
    ef14:	18 2f       	mov	r17, r24
   if( b_status == true)
    ef16:	88 23       	and	r24, r24
    ef18:	21 f0       	breq	.+8      	; 0xef22 <sd_close+0x26>
   {
      arb_free( (void **)&pt_file);
    ef1a:	ce 01       	movw	r24, r28
    ef1c:	01 96       	adiw	r24, 0x01	; 1
    ef1e:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
      pt_file = NULL;
   }

   return b_status;

}/*End sd_close*/
    ef22:	81 2f       	mov	r24, r17
    ef24:	0f 90       	pop	r0
    ef26:	0f 90       	pop	r0
    ef28:	cf 91       	pop	r28
    ef2a:	df 91       	pop	r29
    ef2c:	1f 91       	pop	r17
    ef2e:	08 95       	ret

0000ef30 <sd_open>:
bool sd_init( t_SPIHNDL t_spiHndl)
{
   return sd.card()->init( t_spiHndl);
}/*End sd_init*/

void *sd_open( char *pc_filepath, uint8_t c_mode)
    ef30:	3f 92       	push	r3
    ef32:	4f 92       	push	r4
    ef34:	5f 92       	push	r5
    ef36:	6f 92       	push	r6
    ef38:	7f 92       	push	r7
    ef3a:	8f 92       	push	r8
    ef3c:	9f 92       	push	r9
    ef3e:	af 92       	push	r10
    ef40:	bf 92       	push	r11
    ef42:	cf 92       	push	r12
    ef44:	df 92       	push	r13
    ef46:	ef 92       	push	r14
    ef48:	ff 92       	push	r15
    ef4a:	0f 93       	push	r16
    ef4c:	1f 93       	push	r17
    ef4e:	df 93       	push	r29
    ef50:	cf 93       	push	r28
    ef52:	cd b7       	in	r28, 0x3d	; 61
    ef54:	de b7       	in	r29, 0x3e	; 62
    ef56:	67 97       	sbiw	r28, 0x17	; 23
    ef58:	cd bf       	out	0x3d, r28	; 61
    ef5a:	de bf       	out	0x3e, r29	; 62
    ef5c:	8c 01       	movw	r16, r24
    ef5e:	36 2e       	mov	r3, r22
   int32_t i_tokCount = 0;
   int32_t i_index;
   SdBaseFile *pt_vol;
   static char ac_currDir[13];

   HAL_BEGIN_CRITICAL(); //Disable interrupts
    ef60:	8f b7       	in	r24, 0x3f	; 63
    ef62:	89 83       	std	Y+1, r24	; 0x01
    ef64:	f8 94       	cli

   arb_malloc( sizeof(SdFile),
               (void **)&pt_file);
    ef66:	8f e1       	ldi	r24, 0x1F	; 31
    ef68:	90 e0       	ldi	r25, 0x00	; 0
    ef6a:	be 01       	movw	r22, r28
    ef6c:	6e 5f       	subi	r22, 0xFE	; 254
    ef6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef70:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <arb_malloc>

   /*------------------------------------------------------------------------*
    * Make sure the status of the file is initialized to 'FAT_FILE_TYPE_CLOSED'
    * otherwise the call to 'open' will return an error.
    *------------------------------------------------------------------------*/
   pt_file->close();
    ef74:	8a 81       	ldd	r24, Y+2	; 0x02
    ef76:	9b 81       	ldd	r25, Y+3	; 0x03
    ef78:	04 96       	adiw	r24, 0x04	; 4
    ef7a:	0e 94 0b 67 	call	0xce16	; 0xce16 <_ZN10SdBaseFile5closeEv>

   if( pt_file != NULL)
    ef7e:	8a 81       	ldd	r24, Y+2	; 0x02
    ef80:	9b 81       	ldd	r25, Y+3	; 0x03
    ef82:	89 2b       	or	r24, r25
    ef84:	09 f4       	brne	.+2      	; 0xef88 <sd_open+0x58>
    ef86:	96 c0       	rjmp	.+300    	; 0xf0b4 <sd_open+0x184>
   {
      /*---------------------------------------------------------------------*
       * Get the name of the current directory
       *---------------------------------------------------------------------*/
      pt_vol = sd.vwd();
      pt_vol->getFilename( ac_currDir);
    ef88:	89 e0       	ldi	r24, 0x09	; 9
    ef8a:	95 e2       	ldi	r25, 0x25	; 37
    ef8c:	64 e2       	ldi	r22, 0x24	; 36
    ef8e:	75 e2       	ldi	r23, 0x25	; 37
    ef90:	0e 94 50 65 	call	0xcaa0	; 0xcaa0 <_ZN10SdBaseFile11getFilenameEPc>

      /*---------------------------------------------------------------------*
       * Find all the directories within the path
       *---------------------------------------------------------------------*/
      pc_tok[i_tokCount] = strtok( pc_filepath, "/");
    ef94:	c8 01       	movw	r24, r16
    ef96:	66 e2       	ldi	r22, 0x26	; 38
    ef98:	71 e2       	ldi	r23, 0x21	; 33
    ef9a:	0e 94 de b7 	call	0x16fbc	; 0x16fbc <strtok>
    ef9e:	8c 83       	std	Y+4, r24	; 0x04
    efa0:	9d 83       	std	Y+5, r25	; 0x05
    efa2:	44 e0       	ldi	r20, 0x04	; 4
    efa4:	84 2e       	mov	r8, r20
    efa6:	91 2c       	mov	r9, r1
    efa8:	8c 0e       	add	r8, r28
    efaa:	9d 1e       	adc	r9, r29
    efac:	64 01       	movw	r12, r8
    efae:	ee 24       	eor	r14, r14
    efb0:	ff 24       	eor	r15, r15
    efb2:	87 01       	movw	r16, r14
      while( (pc_tok[i_tokCount] != NULL) &&
    efb4:	3a e1       	ldi	r19, 0x1A	; 26
    efb6:	a3 2e       	mov	r10, r19
    efb8:	b1 2c       	mov	r11, r1
    efba:	ac 0e       	add	r10, r28
    efbc:	bd 1e       	adc	r11, r29
    efbe:	0e c0       	rjmp	.+28     	; 0xefdc <sd_open+0xac>
             (i_tokCount < SD_MAX_DIRECTORIES))
      {
         i_tokCount++;
    efc0:	08 94       	sec
    efc2:	e1 1c       	adc	r14, r1
    efc4:	f1 1c       	adc	r15, r1
    efc6:	01 1d       	adc	r16, r1
    efc8:	11 1d       	adc	r17, r1
         pc_tok[i_tokCount] = strtok( NULL, "/");
    efca:	80 e0       	ldi	r24, 0x00	; 0
    efcc:	90 e0       	ldi	r25, 0x00	; 0
    efce:	66 e2       	ldi	r22, 0x26	; 38
    efd0:	71 e2       	ldi	r23, 0x21	; 33
    efd2:	0e 94 de b7 	call	0x16fbc	; 0x16fbc <strtok>
    efd6:	f6 01       	movw	r30, r12
    efd8:	80 83       	st	Z, r24
    efda:	91 83       	std	Z+1, r25	; 0x01

      /*---------------------------------------------------------------------*
       * Find all the directories within the path
       *---------------------------------------------------------------------*/
      pc_tok[i_tokCount] = strtok( pc_filepath, "/");
      while( (pc_tok[i_tokCount] != NULL) &&
    efdc:	f6 01       	movw	r30, r12
    efde:	80 81       	ld	r24, Z
    efe0:	91 81       	ldd	r25, Z+1	; 0x01
    efe2:	89 2b       	or	r24, r25
    efe4:	81 f4       	brne	.+32     	; 0xf006 <sd_open+0xd6>
    efe6:	aa 24       	eor	r10, r10
    efe8:	bb 24       	eor	r11, r11
    efea:	65 01       	movw	r12, r10

      /*---------------------------------------------------------------------*
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
    efec:	27 01       	movw	r4, r14
    efee:	38 01       	movw	r6, r16
    eff0:	08 94       	sec
    eff2:	41 08       	sbc	r4, r1
    eff4:	51 08       	sbc	r5, r1
    eff6:	61 08       	sbc	r6, r1
    eff8:	71 08       	sbc	r7, r1
      {
         if( sd.chdir( pc_tok[i_index]) == false)
         {
            if( c_mode & SD_FILE_WRITE)
    effa:	e3 2c       	mov	r14, r3
    effc:	ff 24       	eor	r15, r15
    effe:	f2 e0       	ldi	r31, 0x02	; 2
    f000:	ef 22       	and	r14, r31
    f002:	ff 24       	eor	r15, r15
    f004:	2b c0       	rjmp	.+86     	; 0xf05c <sd_open+0x12c>

      /*---------------------------------------------------------------------*
       * Find all the directories within the path
       *---------------------------------------------------------------------*/
      pc_tok[i_tokCount] = strtok( pc_filepath, "/");
      while( (pc_tok[i_tokCount] != NULL) &&
    f006:	82 e0       	ldi	r24, 0x02	; 2
    f008:	90 e0       	ldi	r25, 0x00	; 0
    f00a:	c8 0e       	add	r12, r24
    f00c:	d9 1e       	adc	r13, r25
    f00e:	ca 14       	cp	r12, r10
    f010:	db 04       	cpc	r13, r11
    f012:	b1 f6       	brne	.-84     	; 0xefc0 <sd_open+0x90>
    f014:	e8 cf       	rjmp	.-48     	; 0xefe6 <sd_open+0xb6>
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
      {
         if( sd.chdir( pc_tok[i_index]) == false)
    f016:	f4 01       	movw	r30, r8
    f018:	00 81       	ld	r16, Z
    f01a:	11 81       	ldd	r17, Z+1	; 0x01
    f01c:	86 ee       	ldi	r24, 0xE6	; 230
    f01e:	94 e2       	ldi	r25, 0x24	; 36
    f020:	b8 01       	movw	r22, r16
    f022:	40 e0       	ldi	r20, 0x00	; 0
    f024:	0e 94 fc 71 	call	0xe3f8	; 0xe3f8 <_ZN5SdFat5chdirEPKcb>
    f028:	88 23       	and	r24, r24
    f02a:	79 f4       	brne	.+30     	; 0xf04a <sd_open+0x11a>
         {
            if( c_mode & SD_FILE_WRITE)
    f02c:	e1 14       	cp	r14, r1
    f02e:	f1 04       	cpc	r15, r1
    f030:	61 f0       	breq	.+24     	; 0xf04a <sd_open+0x11a>
            {

               sd.mkdir( pc_tok[i_index]);
    f032:	86 ee       	ldi	r24, 0xE6	; 230
    f034:	94 e2       	ldi	r25, 0x24	; 36
    f036:	b8 01       	movw	r22, r16
    f038:	41 e0       	ldi	r20, 0x01	; 1
    f03a:	0e 94 be 71 	call	0xe37c	; 0xe37c <_ZN5SdFat5mkdirEPKcb>
               sd.chdir( pc_tok[i_index]);
    f03e:	86 ee       	ldi	r24, 0xE6	; 230
    f040:	94 e2       	ldi	r25, 0x24	; 36
    f042:	b8 01       	movw	r22, r16
    f044:	40 e0       	ldi	r20, 0x00	; 0
    f046:	0e 94 fc 71 	call	0xe3f8	; 0xe3f8 <_ZN5SdFat5chdirEPKcb>

      /*---------------------------------------------------------------------*
       * Create the directories if the aren't already available and a write
       * request has been issued - last token is the file name.
       *---------------------------------------------------------------------*/
      for( i_index = 0; i_index < (i_tokCount - 1); i_index++)
    f04a:	08 94       	sec
    f04c:	a1 1c       	adc	r10, r1
    f04e:	b1 1c       	adc	r11, r1
    f050:	c1 1c       	adc	r12, r1
    f052:	d1 1c       	adc	r13, r1
    f054:	82 e0       	ldi	r24, 0x02	; 2
    f056:	90 e0       	ldi	r25, 0x00	; 0
    f058:	88 0e       	add	r8, r24
    f05a:	99 1e       	adc	r9, r25
    f05c:	a4 14       	cp	r10, r4
    f05e:	b5 04       	cpc	r11, r5
    f060:	c6 04       	cpc	r12, r6
    f062:	d7 04       	cpc	r13, r7
    f064:	c4 f2       	brlt	.-80     	; 0xf016 <sd_open+0xe6>

            }
         }
      }

      b_status = pt_file->open( pc_tok[(i_tokCount - 1)], c_mode);
    f066:	8a 81       	ldd	r24, Y+2	; 0x02
    f068:	9b 81       	ldd	r25, Y+3	; 0x03
    f06a:	f2 01       	movw	r30, r4
    f06c:	ee 0f       	add	r30, r30
    f06e:	ff 1f       	adc	r31, r31
    f070:	ec 0f       	add	r30, r28
    f072:	fd 1f       	adc	r31, r29
    f074:	64 81       	ldd	r22, Z+4	; 0x04
    f076:	75 81       	ldd	r23, Z+5	; 0x05
    f078:	04 96       	adiw	r24, 0x04	; 4
    f07a:	43 2d       	mov	r20, r3
    f07c:	0e 94 33 70 	call	0xe066	; 0xe066 <_ZN10SdBaseFile4openEPKch>
    f080:	18 2f       	mov	r17, r24

      /*---------------------------------------------------------------------*
       * Change back to the initial directory.
       *---------------------------------------------------------------------*/
      sd.chdir( ac_currDir);
    f082:	86 ee       	ldi	r24, 0xE6	; 230
    f084:	94 e2       	ldi	r25, 0x24	; 36
    f086:	64 e2       	ldi	r22, 0x24	; 36
    f088:	75 e2       	ldi	r23, 0x25	; 37
    f08a:	40 e0       	ldi	r20, 0x00	; 0
    f08c:	0e 94 fc 71 	call	0xe3f8	; 0xe3f8 <_ZN5SdFat5chdirEPKcb>

      HAL_END_CRITICAL(); //Disable interrupts
    f090:	89 81       	ldd	r24, Y+1	; 0x01
    f092:	8f bf       	out	0x3f, r24	; 63

      if( b_status == true)
    f094:	11 23       	and	r17, r17
    f096:	49 f0       	breq	.+18     	; 0xf0aa <sd_open+0x17a>
      {
         pt_vol = sd.vwd();
         pt_vol->getFilename( ac_currDir);
    f098:	89 e0       	ldi	r24, 0x09	; 9
    f09a:	95 e2       	ldi	r25, 0x25	; 37
    f09c:	64 e2       	ldi	r22, 0x24	; 36
    f09e:	75 e2       	ldi	r23, 0x25	; 37
    f0a0:	0e 94 50 65 	call	0xcaa0	; 0xcaa0 <_ZN10SdBaseFile11getFilenameEPc>
         return (void *)pt_file;
    f0a4:	2a 81       	ldd	r18, Y+2	; 0x02
    f0a6:	3b 81       	ldd	r19, Y+3	; 0x03
    f0a8:	09 c0       	rjmp	.+18     	; 0xf0bc <sd_open+0x18c>
      }
      else
      {
         arb_free( (void **)&pt_file);
    f0aa:	ce 01       	movw	r24, r28
    f0ac:	02 96       	adiw	r24, 0x02	; 2
    f0ae:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
    f0b2:	02 c0       	rjmp	.+4      	; 0xf0b8 <sd_open+0x188>
      }

   }/*End if( pt_file != NULL)*/
   else
   {
      HAL_END_CRITICAL(); //Disable interrupts
    f0b4:	89 81       	ldd	r24, Y+1	; 0x01
    f0b6:	8f bf       	out	0x3f, r24	; 63
    f0b8:	20 e0       	ldi	r18, 0x00	; 0
    f0ba:	30 e0       	ldi	r19, 0x00	; 0

      return NULL;
   }

}/*End sd_open*/
    f0bc:	c9 01       	movw	r24, r18
    f0be:	67 96       	adiw	r28, 0x17	; 23
    f0c0:	cd bf       	out	0x3d, r28	; 61
    f0c2:	de bf       	out	0x3e, r29	; 62
    f0c4:	cf 91       	pop	r28
    f0c6:	df 91       	pop	r29
    f0c8:	1f 91       	pop	r17
    f0ca:	0f 91       	pop	r16
    f0cc:	ff 90       	pop	r15
    f0ce:	ef 90       	pop	r14
    f0d0:	df 90       	pop	r13
    f0d2:	cf 90       	pop	r12
    f0d4:	bf 90       	pop	r11
    f0d6:	af 90       	pop	r10
    f0d8:	9f 90       	pop	r9
    f0da:	8f 90       	pop	r8
    f0dc:	7f 90       	pop	r7
    f0de:	6f 90       	pop	r6
    f0e0:	5f 90       	pop	r5
    f0e2:	4f 90       	pop	r4
    f0e4:	3f 90       	pop	r3
    f0e6:	08 95       	ret

0000f0e8 <sd_init>:
bool sd_begin( t_SPIHNDL t_spiHndl)
{
   return sd.begin( t_spiHndl);
}/*End sd_begin*/

bool sd_init( t_SPIHNDL t_spiHndl)
    f0e8:	df 93       	push	r29
    f0ea:	cf 93       	push	r28
    f0ec:	0f 92       	push	r0
    f0ee:	0f 92       	push	r0
    f0f0:	cd b7       	in	r28, 0x3d	; 61
    f0f2:	de b7       	in	r29, 0x3e	; 62
    f0f4:	89 83       	std	Y+1, r24	; 0x01
    f0f6:	9a 83       	std	Y+2, r25	; 0x02
{
   return sd.card()->init( t_spiHndl);
    f0f8:	69 81       	ldd	r22, Y+1	; 0x01
    f0fa:	7a 81       	ldd	r23, Y+2	; 0x02
    f0fc:	86 ee       	ldi	r24, 0xE6	; 230
    f0fe:	94 e2       	ldi	r25, 0x24	; 36
    f100:	0e 94 68 62 	call	0xc4d0	; 0xc4d0 <_ZN7Sd2Card4initEi>
}/*End sd_init*/
    f104:	0f 90       	pop	r0
    f106:	0f 90       	pop	r0
    f108:	cf 91       	pop	r28
    f10a:	df 91       	pop	r29
    f10c:	08 95       	ret

0000f10e <sd_begin>:
 *---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * Public functions
 *---------------------------------------------------------------------------*/
bool sd_begin( t_SPIHNDL t_spiHndl)
    f10e:	df 93       	push	r29
    f110:	cf 93       	push	r28
    f112:	0f 92       	push	r0
    f114:	0f 92       	push	r0
    f116:	cd b7       	in	r28, 0x3d	; 61
    f118:	de b7       	in	r29, 0x3e	; 62
    f11a:	89 83       	std	Y+1, r24	; 0x01
    f11c:	9a 83       	std	Y+2, r25	; 0x02
{
   return sd.begin( t_spiHndl);
    f11e:	69 81       	ldd	r22, Y+1	; 0x01
    f120:	7a 81       	ldd	r23, Y+2	; 0x02
    f122:	86 ee       	ldi	r24, 0xE6	; 230
    f124:	94 e2       	ldi	r25, 0x24	; 36
    f126:	0e 94 45 72 	call	0xe48a	; 0xe48a <_ZN5SdFat5beginEi>
}/*End sd_begin*/
    f12a:	0f 90       	pop	r0
    f12c:	0f 90       	pop	r0
    f12e:	cf 91       	pop	r28
    f130:	df 91       	pop	r29
    f132:	08 95       	ret

0000f134 <arb_consoleInit>:
                         t_stackSize t_stack,
                         t_thrdPrio t_pri,
                         bool (*pf_funPtr)( t_DEVHANDLE t_consoleHndl,
                                            int8_t *pc_buff,
                                            t_consoleTokHndl *pt_tokHndl))
{
    f134:	cf 92       	push	r12
    f136:	df 92       	push	r13
    f138:	ef 92       	push	r14
    f13a:	ff 92       	push	r15
    f13c:	0f 93       	push	r16
    f13e:	1f 93       	push	r17
    f140:	cf 93       	push	r28
    f142:	df 93       	push	r29
    f144:	ec 01       	movw	r28, r24
    f146:	6b 01       	movw	r12, r22
    f148:	fa 01       	movw	r30, r20
    f14a:	a2 2f       	mov	r26, r18
    f14c:	78 01       	movw	r14, r16

   /*------------------------------------------------------------------------*
    * Create a new thread.
    *------------------------------------------------------------------------*/
   gt_conObject.t_consoleThread = arb_threadCreate( arb_console,
    f14e:	80 e0       	ldi	r24, 0x00	; 0
    f150:	99 e7       	ldi	r25, 0x79	; 121
    f152:	61 e0       	ldi	r22, 0x01	; 1
    f154:	70 e0       	ldi	r23, 0x00	; 0
    f156:	40 e0       	ldi	r20, 0x00	; 0
    f158:	50 e0       	ldi	r21, 0x00	; 0
    f15a:	9f 01       	movw	r18, r30
    f15c:	0a 2f       	mov	r16, r26
    f15e:	0e 94 60 9f 	call	0x13ec0	; 0x13ec0 <arb_threadCreate>
    f162:	80 93 31 25 	sts	0x2531, r24
    f166:	90 93 32 25 	sts	0x2532, r25
                                                    1,
                                                    0,
                                                    t_stack,
                                                    t_pri);

   if( gt_conObject.t_consoleThread < 0)
    f16a:	80 91 31 25 	lds	r24, 0x2531
    f16e:	90 91 32 25 	lds	r25, 0x2532
    f172:	97 ff       	sbrs	r25, 7
    f174:	05 c0       	rjmp	.+10     	; 0xf180 <arb_consoleInit+0x4c>
   {
      return (t_error)gt_conObject.t_consoleThread;
    f176:	80 91 31 25 	lds	r24, 0x2531
    f17a:	90 91 32 25 	lds	r25, 0x2532
    f17e:	37 c0       	rjmp	.+110    	; 0xf1ee <arb_consoleInit+0xba>
   }/*End if( gt_conObject.t_consoleThread < 0)*/

   /*------------------------------------------------------------------------*
    * Open a handle to the console driver.
    *------------------------------------------------------------------------*/
   gt_conObject.t_consoleHndl = arb_open( pc_consDriver,
    f180:	ce 01       	movw	r24, r28
    f182:	63 e0       	ldi	r22, 0x03	; 3
    f184:	0e 94 67 85 	call	0x10ace	; 0x10ace <arb_open>
    f188:	80 93 33 25 	sts	0x2533, r24
    f18c:	90 93 34 25 	sts	0x2534, r25
                                          ARB_O_READ |
                                          ARB_O_WRITE);

   if( gt_conObject.t_consoleHndl < 0)
    f190:	80 91 33 25 	lds	r24, 0x2533
    f194:	90 91 34 25 	lds	r25, 0x2534
    f198:	97 ff       	sbrs	r25, 7
    f19a:	05 c0       	rjmp	.+10     	; 0xf1a6 <arb_consoleInit+0x72>
   {
      return (t_error)gt_conObject.t_consoleHndl;
    f19c:	80 91 33 25 	lds	r24, 0x2533
    f1a0:	90 91 34 25 	lds	r25, 0x2534
    f1a4:	24 c0       	rjmp	.+72     	; 0xf1ee <arb_consoleInit+0xba>
   }

   gt_conObject.pf_funPtr = pf_funPtr;
    f1a6:	e0 92 37 25 	sts	0x2537, r14
    f1aa:	f0 92 38 25 	sts	0x2538, r15

   /*------------------------------------------------------------------------*
    * Open a handle to the sd card driver.
    *------------------------------------------------------------------------*/
   gt_conObject.t_sdHndl = arb_open( pc_sdDriver,
    f1ae:	c6 01       	movw	r24, r12
    f1b0:	63 e0       	ldi	r22, 0x03	; 3
    f1b2:	0e 94 67 85 	call	0x10ace	; 0x10ace <arb_open>
    f1b6:	80 93 35 25 	sts	0x2535, r24
    f1ba:	90 93 36 25 	sts	0x2536, r25

   /*------------------------------------------------------------------------*
    * If there is no sd card present on the system then set the handle to
    * 0.
    *------------------------------------------------------------------------*/
   if( gt_conObject.t_sdHndl == ARB_DEVICE_NOT_FOUND)
    f1be:	80 91 35 25 	lds	r24, 0x2535
    f1c2:	90 91 36 25 	lds	r25, 0x2536
    f1c6:	87 5f       	subi	r24, 0xF7	; 247
    f1c8:	9f 4f       	sbci	r25, 0xFF	; 255
    f1ca:	29 f4       	brne	.+10     	; 0xf1d6 <arb_consoleInit+0xa2>
   {
      gt_conObject.t_sdHndl = 0;
    f1cc:	10 92 35 25 	sts	0x2535, r1
    f1d0:	10 92 36 25 	sts	0x2536, r1
    f1d4:	06 c0       	rjmp	.+12     	; 0xf1e2 <arb_consoleInit+0xae>
   }/*End if( gt_conObject.t_sdHndl == ARB_DEVICE_NOT_FOUND)*/
   else if( gt_conObject.t_sdHndl < 0)
    f1d6:	80 91 35 25 	lds	r24, 0x2535
    f1da:	90 91 36 25 	lds	r25, 0x2536
    f1de:	97 fd       	sbrc	r25, 7
    f1e0:	02 c0       	rjmp	.+4      	; 0xf1e6 <arb_consoleInit+0xb2>
    f1e2:	80 e0       	ldi	r24, 0x00	; 0
    f1e4:	04 c0       	rjmp	.+8      	; 0xf1ee <arb_consoleInit+0xba>
   {
      return (t_error)gt_conObject.t_sdHndl;
    f1e6:	80 91 35 25 	lds	r24, 0x2535
    f1ea:	90 91 36 25 	lds	r25, 0x2536
   }/*End else if( gt_conObject.t_sdHndl < 0)*/

   return ARB_PASSED;

}/*End arb_consoleInit*/
    f1ee:	df 91       	pop	r29
    f1f0:	cf 91       	pop	r28
    f1f2:	1f 91       	pop	r17
    f1f4:	0f 91       	pop	r16
    f1f6:	ff 90       	pop	r15
    f1f8:	ef 90       	pop	r14
    f1fa:	df 90       	pop	r13
    f1fc:	cf 90       	pop	r12
    f1fe:	08 95       	ret

0000f200 <arb_console>:
 *
 * @return None.
 *****************************************************************************/
static void arb_console( t_parameters t_param,
                         t_arguments  t_args)
{
    f200:	2f 92       	push	r2
    f202:	3f 92       	push	r3
    f204:	4f 92       	push	r4
    f206:	5f 92       	push	r5
    f208:	6f 92       	push	r6
    f20a:	7f 92       	push	r7
    f20c:	8f 92       	push	r8
    f20e:	9f 92       	push	r9
    f210:	af 92       	push	r10
    f212:	bf 92       	push	r11
    f214:	cf 92       	push	r12
    f216:	df 92       	push	r13
    f218:	ef 92       	push	r14
    f21a:	ff 92       	push	r15
    f21c:	0f 93       	push	r16
    f21e:	1f 93       	push	r17
    f220:	df 93       	push	r29
    f222:	cf 93       	push	r28
    f224:	cd b7       	in	r28, 0x3d	; 61
    f226:	de b7       	in	r29, 0x3e	; 62
    f228:	cb 50       	subi	r28, 0x0B	; 11
    f22a:	d2 40       	sbci	r29, 0x02	; 2
    f22c:	cd bf       	out	0x3d, r28	; 61
    f22e:	de bf       	out	0x3e, r29	; 62

   /*------------------------------------------------------------------------*
    * Banner designed using a text to ascii art generator provided by
    * http://www.patorjk.com/software/taag
    *------------------------------------------------------------------------*/
   int8_t ac_banner[] = "\
    f230:	de 01       	movw	r26, r28
    f232:	5a 96       	adiw	r26, 0x1a	; 26
    f234:	e0 e3       	ldi	r30, 0x30	; 48
    f236:	f1 e2       	ldi	r31, 0x21	; 33
    f238:	81 e3       	ldi	r24, 0x31	; 49
    f23a:	01 90       	ld	r0, Z+
    f23c:	0d 92       	st	X+, r0
    f23e:	81 50       	subi	r24, 0x01	; 1
    f240:	e1 f7       	brne	.-8      	; 0xf23a <arb_console+0x3a>
    * command window.
    *------------------------------------------------------------------------*/
   t_consoleTokHndl t_tokHndl;
   t_consoleError t_conError;

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f242:	80 91 33 25 	lds	r24, 0x2533
    f246:	90 91 34 25 	lds	r25, 0x2534
    f24a:	66 e0       	ldi	r22, 0x06	; 6
    f24c:	70 e0       	ldi	r23, 0x00	; 0
    f24e:	20 e0       	ldi	r18, 0x00	; 0
    f250:	30 e0       	ldi	r19, 0x00	; 0
    f252:	40 e0       	ldi	r20, 0x00	; 0
    f254:	50 e0       	ldi	r21, 0x00	; 0
    f256:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                           CONSOLE_RESET_TERMINAL,
                           0);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f25a:	80 91 33 25 	lds	r24, 0x2533
    f25e:	90 91 34 25 	lds	r25, 0x2534
    f262:	67 e0       	ldi	r22, 0x07	; 7
    f264:	70 e0       	ldi	r23, 0x00	; 0
    f266:	20 e3       	ldi	r18, 0x30	; 48
    f268:	30 e0       	ldi	r19, 0x00	; 0
    f26a:	40 e0       	ldi	r20, 0x00	; 0
    f26c:	50 e0       	ldi	r21, 0x00	; 0
    f26e:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                           CONSOLE_SET_BG_COLOR,
                           CONSOLE_BLACK);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f272:	80 91 33 25 	lds	r24, 0x2533
    f276:	90 91 34 25 	lds	r25, 0x2534
    f27a:	68 e0       	ldi	r22, 0x08	; 8
    f27c:	70 e0       	ldi	r23, 0x00	; 0
    f27e:	22 e3       	ldi	r18, 0x32	; 50
    f280:	30 e0       	ldi	r19, 0x00	; 0
    f282:	40 e0       	ldi	r20, 0x00	; 0
    f284:	50 e0       	ldi	r21, 0x00	; 0
    f286:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                           CONSOLE_SET_PROMPT_COLOR,
                           CONSOLE_GREEN);

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f28a:	80 91 33 25 	lds	r24, 0x2533
    f28e:	90 91 34 25 	lds	r25, 0x2534
    f292:	69 e0       	ldi	r22, 0x09	; 9
    f294:	70 e0       	ldi	r23, 0x00	; 0
    f296:	21 e3       	ldi	r18, 0x31	; 49
    f298:	30 e0       	ldi	r19, 0x00	; 0
    f29a:	40 e0       	ldi	r20, 0x00	; 0
    f29c:	50 e0       	ldi	r21, 0x00	; 0
    f29e:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                           CONSOLE_SET_FG_COLOR,
                           CONSOLE_RED);

   arb_write( gt_conObject.t_consoleHndl,
    f2a2:	80 91 33 25 	lds	r24, 0x2533
    f2a6:	90 91 34 25 	lds	r25, 0x2534
    f2aa:	be 01       	movw	r22, r28
    f2ac:	66 5e       	subi	r22, 0xE6	; 230
    f2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    f2b0:	41 e3       	ldi	r20, 0x31	; 49
    f2b2:	50 e0       	ldi	r21, 0x00	; 0
    f2b4:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              ac_banner,
              (uint16_t)sizeof(ac_banner));

   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f2b8:	80 91 33 25 	lds	r24, 0x2533
    f2bc:	90 91 34 25 	lds	r25, 0x2534
    f2c0:	69 e0       	ldi	r22, 0x09	; 9
    f2c2:	70 e0       	ldi	r23, 0x00	; 0
    f2c4:	27 e3       	ldi	r18, 0x37	; 55
    f2c6:	30 e0       	ldi	r19, 0x00	; 0
    f2c8:	40 e0       	ldi	r20, 0x00	; 0
    f2ca:	50 e0       	ldi	r21, 0x00	; 0
    f2cc:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                           CONSOLE_WHITE);

   /*-------------------------------------------------------------------------*
    * Display prompt...
    *-------------------------------------------------------------------------*/
   t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f2d0:	80 91 33 25 	lds	r24, 0x2533
    f2d4:	90 91 34 25 	lds	r25, 0x2534
    f2d8:	64 e0       	ldi	r22, 0x04	; 4
    f2da:	70 e0       	ldi	r23, 0x00	; 0
    f2dc:	20 e0       	ldi	r18, 0x00	; 0
    f2de:	30 e0       	ldi	r19, 0x00	; 0
    f2e0:	40 e0       	ldi	r20, 0x00	; 0
    f2e2:	50 e0       	ldi	r21, 0x00	; 0
    f2e4:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
   {

      /*---------------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f2e8:	8e 01       	movw	r16, r28
    f2ea:	05 5b       	subi	r16, 0xB5	; 181
    f2ec:	1f 4f       	sbci	r17, 0xFF	; 255
    f2ee:	c6 5f       	subi	r28, 0xF6	; 246
    f2f0:	dd 4f       	sbci	r29, 0xFD	; 253
    f2f2:	08 83       	st	Y, r16
    f2f4:	19 83       	std	Y+1, r17	; 0x01
    f2f6:	ca 50       	subi	r28, 0x0A	; 10
    f2f8:	d2 40       	sbci	r29, 0x02	; 2
    f2fa:	98 01       	movw	r18, r16
    f2fc:	40 e0       	ldi	r20, 0x00	; 0
    f2fe:	50 e0       	ldi	r21, 0x00	; 0
    f300:	c4 51       	subi	r28, 0x14	; 20
    f302:	de 4f       	sbci	r29, 0xFE	; 254
    f304:	28 83       	st	Y, r18
    f306:	39 83       	std	Y+1, r19	; 0x01
    f308:	4a 83       	std	Y+2, r20	; 0x02
    f30a:	5b 83       	std	Y+3, r21	; 0x03
    f30c:	cc 5e       	subi	r28, 0xEC	; 236
    f30e:	d1 40       	sbci	r29, 0x01	; 1

   /*------------------------------------------------------------------------*
    * Concatenate the hard drive device name with the file name so that
    * 'arb_device.c' knows where to look.
    *------------------------------------------------------------------------*/
   s_numBytes = sprintf( (char *)pc_buff,
    f310:	b8 01       	movw	r22, r16
    f312:	60 5f       	subi	r22, 0xF0	; 240
    f314:	7f 4f       	sbci	r23, 0xFF	; 255
    f316:	c0 51       	subi	r28, 0x10	; 16
    f318:	de 4f       	sbci	r29, 0xFE	; 254
    f31a:	68 83       	st	Y, r22
    f31c:	79 83       	std	Y+1, r23	; 0x01
    f31e:	c0 5f       	subi	r28, 0xF0	; 240
    f320:	d1 40       	sbci	r29, 0x01	; 1
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("cd")) == 0)
      && (t_tokHndl.c_numTokens == 2))
      {
         t_sdError t_err;

         t_err = (t_sdError)arb_ioctl( gt_conObject.t_sdHndl,
    f322:	cb 01       	movw	r24, r22
    f324:	a0 e0       	ldi	r26, 0x00	; 0
    f326:	b0 e0       	ldi	r27, 0x00	; 0
    f328:	ce 50       	subi	r28, 0x0E	; 14
    f32a:	de 4f       	sbci	r29, 0xFE	; 254
    f32c:	88 83       	st	Y, r24
    f32e:	99 83       	std	Y+1, r25	; 0x01
    f330:	aa 83       	std	Y+2, r26	; 0x02
    f332:	bb 83       	std	Y+3, r27	; 0x03
    f334:	c2 5f       	subi	r28, 0xF2	; 242
    f336:	d1 40       	sbci	r29, 0x01	; 1
   int32_t i_bssSize;
   int32_t i_freeSize;
   int32_t i_ramUsed;
   int32_t i_percUsed;

   i_dataSize = (int32_t)(uint16_t)&__data_end - (int32_t)(uint16_t)&__data_start;
    f338:	e6 e8       	ldi	r30, 0x86	; 134
    f33a:	f2 e2       	ldi	r31, 0x22	; 34
    f33c:	cf 01       	movw	r24, r30
    f33e:	a0 e0       	ldi	r26, 0x00	; 0
    f340:	b0 e0       	ldi	r27, 0x00	; 0
    f342:	70 e0       	ldi	r23, 0x00	; 0
    f344:	e7 2e       	mov	r14, r23
    f346:	70 e2       	ldi	r23, 0x20	; 32
    f348:	f7 2e       	mov	r15, r23
    f34a:	97 01       	movw	r18, r14
    f34c:	40 e0       	ldi	r20, 0x00	; 0
    f34e:	50 e0       	ldi	r21, 0x00	; 0
    f350:	7c 01       	movw	r14, r24
    f352:	8d 01       	movw	r16, r26
    f354:	e2 1a       	sub	r14, r18
    f356:	f3 0a       	sbc	r15, r19
    f358:	04 0b       	sbc	r16, r20
    f35a:	15 0b       	sbc	r17, r21
    f35c:	ca 50       	subi	r28, 0x0A	; 10
    f35e:	de 4f       	sbci	r29, 0xFE	; 254
    f360:	e8 82       	st	Y, r14
    f362:	f9 82       	std	Y+1, r15	; 0x01
    f364:	0a 83       	std	Y+2, r16	; 0x02
    f366:	1b 83       	std	Y+3, r17	; 0x03
    f368:	c6 5f       	subi	r28, 0xF6	; 246
    f36a:	d1 40       	sbci	r29, 0x01	; 1
   i_bssSize  = (int32_t)(uint16_t)&__bss_end - (int32_t)(uint16_t)&__data_end;
    f36c:	08 e0       	ldi	r16, 0x08	; 8
    f36e:	16 e2       	ldi	r17, 0x26	; 38
    f370:	78 01       	movw	r14, r16
    f372:	00 e0       	ldi	r16, 0x00	; 0
    f374:	10 e0       	ldi	r17, 0x00	; 0
    f376:	c6 50       	subi	r28, 0x06	; 6
    f378:	de 4f       	sbci	r29, 0xFE	; 254
    f37a:	e8 82       	st	Y, r14
    f37c:	f9 82       	std	Y+1, r15	; 0x01
    f37e:	0a 83       	std	Y+2, r16	; 0x02
    f380:	1b 83       	std	Y+3, r17	; 0x03
    f382:	ca 5f       	subi	r28, 0xFA	; 250
    f384:	d1 40       	sbci	r29, 0x01	; 1
    f386:	e8 1a       	sub	r14, r24
    f388:	f9 0a       	sbc	r15, r25
    f38a:	0a 0b       	sbc	r16, r26
    f38c:	1b 0b       	sbc	r17, r27
    f38e:	c2 50       	subi	r28, 0x02	; 2
    f390:	de 4f       	sbci	r29, 0xFE	; 254
    f392:	e8 82       	st	Y, r14
    f394:	f9 82       	std	Y+1, r15	; 0x01
    f396:	0a 83       	std	Y+2, r16	; 0x02
    f398:	1b 83       	std	Y+3, r17	; 0x03
    f39a:	ce 5f       	subi	r28, 0xFE	; 254
    f39c:	d1 40       	sbci	r29, 0x01	; 1
   i_heapSize = (int32_t)(uint16_t)__brkval - (int32_t)(uint16_t)&__bss_end;
   i_freeSize = (int32_t)RAMEND - (int32_t)(uint16_t)__brkval - (int32_t)__malloc_margin;
   i_ramUsed  = i_dataSize + i_bssSize + i_heapSize;
    f39e:	ca 50       	subi	r28, 0x0A	; 10
    f3a0:	de 4f       	sbci	r29, 0xFE	; 254
    f3a2:	68 81       	ld	r22, Y
    f3a4:	79 81       	ldd	r23, Y+1	; 0x01
    f3a6:	8a 81       	ldd	r24, Y+2	; 0x02
    f3a8:	9b 81       	ldd	r25, Y+3	; 0x03
    f3aa:	c6 5f       	subi	r28, 0xF6	; 246
    f3ac:	d1 40       	sbci	r29, 0x01	; 1
    f3ae:	e6 0e       	add	r14, r22
    f3b0:	f7 1e       	adc	r15, r23
    f3b2:	08 1f       	adc	r16, r24
    f3b4:	19 1f       	adc	r17, r25
    f3b6:	ce 5f       	subi	r28, 0xFE	; 254
    f3b8:	dd 4f       	sbci	r29, 0xFD	; 253
    f3ba:	e8 82       	st	Y, r14
    f3bc:	f9 82       	std	Y+1, r15	; 0x01
    f3be:	0a 83       	std	Y+2, r16	; 0x02
    f3c0:	1b 83       	std	Y+3, r17	; 0x03
    f3c2:	c2 50       	subi	r28, 0x02	; 2
    f3c4:	d2 40       	sbci	r29, 0x02	; 2
   i_percUsed = (i_ramUsed*(int32_t)100)/(RAMEND - (int32_t)(uint16_t)&__data_start);
    f3c6:	8f ef       	ldi	r24, 0xFF	; 255
    f3c8:	9f e3       	ldi	r25, 0x3F	; 63
    f3ca:	a0 e0       	ldi	r26, 0x00	; 0
    f3cc:	b0 e0       	ldi	r27, 0x00	; 0
    f3ce:	82 1b       	sub	r24, r18
    f3d0:	93 0b       	sbc	r25, r19
    f3d2:	a4 0b       	sbc	r26, r20
    f3d4:	b5 0b       	sbc	r27, r21
    f3d6:	ca 5f       	subi	r28, 0xFA	; 250
    f3d8:	dd 4f       	sbci	r29, 0xFD	; 253
    f3da:	88 83       	st	Y, r24
    f3dc:	99 83       	std	Y+1, r25	; 0x01
    f3de:	aa 83       	std	Y+2, r26	; 0x02
    f3e0:	bb 83       	std	Y+3, r27	; 0x03
    f3e2:	c6 50       	subi	r28, 0x06	; 6
    f3e4:	d2 40       	sbci	r29, 0x02	; 2
   {

      /*---------------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f3e6:	80 91 33 25 	lds	r24, 0x2533
    f3ea:	90 91 34 25 	lds	r25, 0x2534
    f3ee:	63 e0       	ldi	r22, 0x03	; 3
    f3f0:	70 e0       	ldi	r23, 0x00	; 0
    f3f2:	c4 51       	subi	r28, 0x14	; 20
    f3f4:	de 4f       	sbci	r29, 0xFE	; 254
    f3f6:	28 81       	ld	r18, Y
    f3f8:	39 81       	ldd	r19, Y+1	; 0x01
    f3fa:	4a 81       	ldd	r20, Y+2	; 0x02
    f3fc:	5b 81       	ldd	r21, Y+3	; 0x03
    f3fe:	cc 5e       	subi	r28, 0xEC	; 236
    f400:	d1 40       	sbci	r29, 0x01	; 1
    f402:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                              CONSOLE_PARSE_CMD_LINE,
                              (uint32_t)((uint16_t)&t_tokHndl));

      if( t_conError == CONSOLE_TOKEN_TOO_LARGE)
    f406:	6b 3f       	cpi	r22, 0xFB	; 251
    f408:	79 f4       	brne	.+30     	; 0xf428 <arb_console+0x228>
      {
         s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid token size\n\r"));
    f40a:	00 d0       	rcall	.+0      	; 0xf40c <arb_console+0x20c>
    f40c:	0f 92       	push	r0
    f40e:	ec eb       	ldi	r30, 0xBC	; 188
    f410:	f0 e0       	ldi	r31, 0x00	; 0
    f412:	ec 0f       	add	r30, r28
    f414:	fd 1f       	adc	r31, r29
    f416:	ad b7       	in	r26, 0x3d	; 61
    f418:	be b7       	in	r27, 0x3e	; 62
    f41a:	11 96       	adiw	r26, 0x01	; 1
    f41c:	ed 93       	st	X+, r30
    f41e:	fc 93       	st	X, r31
    f420:	12 97       	sbiw	r26, 0x02	; 2
    f422:	84 e6       	ldi	r24, 0x64	; 100
    f424:	92 e0       	ldi	r25, 0x02	; 2
    f426:	10 c0       	rjmp	.+32     	; 0xf448 <arb_console+0x248>
         arb_write( gt_conObject.t_consoleHndl, 
                    ac_buff, 
                    s_size);
      }/*End if( t_conError == CONSOLE_TOKEN_TOO_LARGE)*/
      else if( t_conError == CONSOLE_TOO_MANY_TOKENS)
    f428:	6a 3f       	cpi	r22, 0xFA	; 250
    f42a:	a1 f4       	brne	.+40     	; 0xf454 <arb_console+0x254>
      {
         s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid number of tokens\n\r"));
    f42c:	00 d0       	rcall	.+0      	; 0xf42e <arb_console+0x22e>
    f42e:	0f 92       	push	r0
    f430:	ec eb       	ldi	r30, 0xBC	; 188
    f432:	f0 e0       	ldi	r31, 0x00	; 0
    f434:	ec 0f       	add	r30, r28
    f436:	fd 1f       	adc	r31, r29
    f438:	ad b7       	in	r26, 0x3d	; 61
    f43a:	be b7       	in	r27, 0x3e	; 62
    f43c:	11 96       	adiw	r26, 0x01	; 1
    f43e:	ed 93       	st	X+, r30
    f440:	fc 93       	st	X, r31
    f442:	12 97       	sbiw	r26, 0x02	; 2
    f444:	89 e4       	ldi	r24, 0x49	; 73
    f446:	92 e0       	ldi	r25, 0x02	; 2
    f448:	13 96       	adiw	r26, 0x03	; 3
    f44a:	8d 93       	st	X+, r24
    f44c:	9c 93       	st	X, r25
    f44e:	14 97       	sbiw	r26, 0x04	; 4
    f450:	0c 94 d8 82 	jmp	0x105b0	; 0x105b0 <arb_console+0x13b0>
         arb_write( gt_conObject.t_consoleHndl, 
                    ac_buff, 
                    s_size);
      }/*End else if( t_conError == CONSOLE_TOO_MANY_TOKENS)*/
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("sct")) == 0)
    f454:	ce 01       	movw	r24, r28
    f456:	85 5b       	subi	r24, 0xB5	; 181
    f458:	9f 4f       	sbci	r25, 0xFF	; 255
    f45a:	65 e4       	ldi	r22, 0x45	; 69
    f45c:	72 e0       	ldi	r23, 0x02	; 2
    f45e:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
    f462:	89 2b       	or	r24, r25
    f464:	31 f5       	brne	.+76     	; 0xf4b2 <arb_console+0x2b2>
    f466:	c5 54       	subi	r28, 0x45	; 69
    f468:	df 4f       	sbci	r29, 0xFF	; 255
    f46a:	88 81       	ld	r24, Y
    f46c:	cb 5b       	subi	r28, 0xBB	; 187
    f46e:	d0 40       	sbci	r29, 0x00	; 0
    f470:	84 30       	cpi	r24, 0x04	; 4
    f472:	f9 f4       	brne	.+62     	; 0xf4b2 <arb_console+0x2b2>
      {
         uint8_t c_hours;
         uint8_t c_min;
         uint8_t c_sec;

         c_hours = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[1]);
    f474:	c0 51       	subi	r28, 0x10	; 16
    f476:	de 4f       	sbci	r29, 0xFE	; 254
    f478:	88 81       	ld	r24, Y
    f47a:	99 81       	ldd	r25, Y+1	; 0x01
    f47c:	c0 5f       	subi	r28, 0xF0	; 240
    f47e:	d1 40       	sbci	r29, 0x01	; 1
    f480:	0e 94 c7 b6 	call	0x16d8e	; 0x16d8e <atoi>
    f484:	08 2f       	mov	r16, r24
         c_min = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[2]);
    f486:	8b e4       	ldi	r24, 0x4B	; 75
    f488:	90 e0       	ldi	r25, 0x00	; 0
    f48a:	8c 0f       	add	r24, r28
    f48c:	9d 1f       	adc	r25, r29
    f48e:	80 96       	adiw	r24, 0x20	; 32
    f490:	0e 94 c7 b6 	call	0x16d8e	; 0x16d8e <atoi>
    f494:	18 2f       	mov	r17, r24
         c_sec = (uint8_t)atoi( (const char *)t_tokHndl.ac_tok[3]);
    f496:	8b e4       	ldi	r24, 0x4B	; 75
    f498:	90 e0       	ldi	r25, 0x00	; 0
    f49a:	8c 0f       	add	r24, r28
    f49c:	9d 1f       	adc	r25, r29
    f49e:	c0 96       	adiw	r24, 0x30	; 48
    f4a0:	0e 94 c7 b6 	call	0x16d8e	; 0x16d8e <atoi>
    f4a4:	48 2f       	mov	r20, r24

         arb_setSysTime( c_hours,
    f4a6:	80 2f       	mov	r24, r16
    f4a8:	61 2f       	mov	r22, r17
    f4aa:	0e 94 52 9c 	call	0x138a4	; 0x138a4 <arb_setSysTime>
    f4ae:	0c 94 e8 82 	jmp	0x105d0	; 0x105d0 <arb_console+0x13d0>
                         c_min,
                         c_sec);
      }/*End else if( strcasecmp( (char *)t_tokHndl.ac_tok[0], "sct") == 0)*/
      else if( strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("help")) == 0)
    f4b2:	ce 01       	movw	r24, r28
    f4b4:	85 5b       	subi	r24, 0xB5	; 181
    f4b6:	9f 4f       	sbci	r25, 0xFF	; 255
    f4b8:	60 e4       	ldi	r22, 0x40	; 64
    f4ba:	72 e0       	ldi	r23, 0x02	; 2
    f4bc:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
    f4c0:	89 2b       	or	r24, r25
    f4c2:	09 f0       	breq	.+2      	; 0xf4c6 <arb_console+0x2c6>
    f4c4:	eb c1       	rjmp	.+982    	; 0xf89c <arb_console+0x69c>
 *****************************************************************************/
static void arb_displayKernelHelp( int8_t *pc_buff)
{
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
    f4c6:	00 d0       	rcall	.+0      	; 0xf4c8 <arb_console+0x2c8>
    f4c8:	0f 92       	push	r0
    f4ca:	ec eb       	ldi	r30, 0xBC	; 188
    f4cc:	f0 e0       	ldi	r31, 0x00	; 0
    f4ce:	ec 0f       	add	r30, r28
    f4d0:	fd 1f       	adc	r31, r29
    f4d2:	ad b7       	in	r26, 0x3d	; 61
    f4d4:	be b7       	in	r27, 0x3e	; 62
    f4d6:	11 96       	adiw	r26, 0x01	; 1
    f4d8:	ed 93       	st	X+, r30
    f4da:	fc 93       	st	X, r31
    f4dc:	12 97       	sbiw	r26, 0x02	; 2
    f4de:	8f ea       	ldi	r24, 0xAF	; 175
    f4e0:	96 e0       	ldi	r25, 0x06	; 6
    f4e2:	13 96       	adiw	r26, 0x03	; 3
    f4e4:	8d 93       	st	X+, r24
    f4e6:	9c 93       	st	X, r25
    f4e8:	14 97       	sbiw	r26, 0x04	; 4
    f4ea:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f4ee:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f4f0:	80 91 33 25 	lds	r24, 0x2533
    f4f4:	90 91 34 25 	lds	r25, 0x2534
    f4f8:	0f 90       	pop	r0
    f4fa:	0f 90       	pop	r0
    f4fc:	0f 90       	pop	r0
    f4fe:	0f 90       	pop	r0
    f500:	be 01       	movw	r22, r28
    f502:	64 54       	subi	r22, 0x44	; 68
    f504:	7f 4f       	sbci	r23, 0xFF	; 255
    f506:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Command |     Arguments     |              Description                 |\n\r"));
    f50a:	00 d0       	rcall	.+0      	; 0xf50c <arb_console+0x30c>
    f50c:	0f 92       	push	r0
    f50e:	ec eb       	ldi	r30, 0xBC	; 188
    f510:	f0 e0       	ldi	r31, 0x00	; 0
    f512:	ec 0f       	add	r30, r28
    f514:	fd 1f       	adc	r31, r29
    f516:	ad b7       	in	r26, 0x3d	; 61
    f518:	be b7       	in	r27, 0x3e	; 62
    f51a:	11 96       	adiw	r26, 0x01	; 1
    f51c:	ed 93       	st	X+, r30
    f51e:	fc 93       	st	X, r31
    f520:	12 97       	sbiw	r26, 0x02	; 2
    f522:	82 e6       	ldi	r24, 0x62	; 98
    f524:	96 e0       	ldi	r25, 0x06	; 6
    f526:	13 96       	adiw	r26, 0x03	; 3
    f528:	8d 93       	st	X+, r24
    f52a:	9c 93       	st	X, r25
    f52c:	14 97       	sbiw	r26, 0x04	; 4
    f52e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f532:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f534:	80 91 33 25 	lds	r24, 0x2533
    f538:	90 91 34 25 	lds	r25, 0x2534
    f53c:	0f 90       	pop	r0
    f53e:	0f 90       	pop	r0
    f540:	0f 90       	pop	r0
    f542:	0f 90       	pop	r0
    f544:	be 01       	movw	r22, r28
    f546:	64 54       	subi	r22, 0x44	; 68
    f548:	7f 4f       	sbci	r23, 0xFF	; 255
    f54a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|-------------------|------------------------------------------|\n\r"));
    f54e:	00 d0       	rcall	.+0      	; 0xf550 <arb_console+0x350>
    f550:	0f 92       	push	r0
    f552:	ec eb       	ldi	r30, 0xBC	; 188
    f554:	f0 e0       	ldi	r31, 0x00	; 0
    f556:	ec 0f       	add	r30, r28
    f558:	fd 1f       	adc	r31, r29
    f55a:	ad b7       	in	r26, 0x3d	; 61
    f55c:	be b7       	in	r27, 0x3e	; 62
    f55e:	11 96       	adiw	r26, 0x01	; 1
    f560:	ed 93       	st	X+, r30
    f562:	fc 93       	st	X, r31
    f564:	12 97       	sbiw	r26, 0x02	; 2
    f566:	85 e1       	ldi	r24, 0x15	; 21
    f568:	96 e0       	ldi	r25, 0x06	; 6
    f56a:	13 96       	adiw	r26, 0x03	; 3
    f56c:	8d 93       	st	X+, r24
    f56e:	9c 93       	st	X, r25
    f570:	14 97       	sbiw	r26, 0x04	; 4
    f572:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f576:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f578:	80 91 33 25 	lds	r24, 0x2533
    f57c:	90 91 34 25 	lds	r25, 0x2534
    f580:	0f 90       	pop	r0
    f582:	0f 90       	pop	r0
    f584:	0f 90       	pop	r0
    f586:	0f 90       	pop	r0
    f588:	be 01       	movw	r22, r28
    f58a:	64 54       	subi	r22, 0x44	; 68
    f58c:	7f 4f       	sbci	r23, 0xFF	; 255
    f58e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| sdl     | <arg1>            | Set the debug level, where <arg1> =      |\n\r"));
    f592:	00 d0       	rcall	.+0      	; 0xf594 <arb_console+0x394>
    f594:	0f 92       	push	r0
    f596:	ec eb       	ldi	r30, 0xBC	; 188
    f598:	f0 e0       	ldi	r31, 0x00	; 0
    f59a:	ec 0f       	add	r30, r28
    f59c:	fd 1f       	adc	r31, r29
    f59e:	ad b7       	in	r26, 0x3d	; 61
    f5a0:	be b7       	in	r27, 0x3e	; 62
    f5a2:	11 96       	adiw	r26, 0x01	; 1
    f5a4:	ed 93       	st	X+, r30
    f5a6:	fc 93       	st	X, r31
    f5a8:	12 97       	sbiw	r26, 0x02	; 2
    f5aa:	88 ec       	ldi	r24, 0xC8	; 200
    f5ac:	95 e0       	ldi	r25, 0x05	; 5
    f5ae:	13 96       	adiw	r26, 0x03	; 3
    f5b0:	8d 93       	st	X+, r24
    f5b2:	9c 93       	st	X, r25
    f5b4:	14 97       	sbiw	r26, 0x04	; 4
    f5b6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f5ba:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f5bc:	80 91 33 25 	lds	r24, 0x2533
    f5c0:	90 91 34 25 	lds	r25, 0x2534
    f5c4:	0f 90       	pop	r0
    f5c6:	0f 90       	pop	r0
    f5c8:	0f 90       	pop	r0
    f5ca:	0f 90       	pop	r0
    f5cc:	be 01       	movw	r22, r28
    f5ce:	64 54       	subi	r22, 0x44	; 68
    f5d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f5d2:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |                   | 0,1,2 (low, med, high)                   |\n\r"));
    f5d6:	00 d0       	rcall	.+0      	; 0xf5d8 <arb_console+0x3d8>
    f5d8:	0f 92       	push	r0
    f5da:	ec eb       	ldi	r30, 0xBC	; 188
    f5dc:	f0 e0       	ldi	r31, 0x00	; 0
    f5de:	ec 0f       	add	r30, r28
    f5e0:	fd 1f       	adc	r31, r29
    f5e2:	ad b7       	in	r26, 0x3d	; 61
    f5e4:	be b7       	in	r27, 0x3e	; 62
    f5e6:	11 96       	adiw	r26, 0x01	; 1
    f5e8:	ed 93       	st	X+, r30
    f5ea:	fc 93       	st	X, r31
    f5ec:	12 97       	sbiw	r26, 0x02	; 2
    f5ee:	8b e7       	ldi	r24, 0x7B	; 123
    f5f0:	95 e0       	ldi	r25, 0x05	; 5
    f5f2:	13 96       	adiw	r26, 0x03	; 3
    f5f4:	8d 93       	st	X+, r24
    f5f6:	9c 93       	st	X, r25
    f5f8:	14 97       	sbiw	r26, 0x04	; 4
    f5fa:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f5fe:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f600:	80 91 33 25 	lds	r24, 0x2533
    f604:	90 91 34 25 	lds	r25, 0x2534
    f608:	0f 90       	pop	r0
    f60a:	0f 90       	pop	r0
    f60c:	0f 90       	pop	r0
    f60e:	0f 90       	pop	r0
    f610:	be 01       	movw	r22, r28
    f612:	64 54       	subi	r22, 0x44	; 68
    f614:	7f 4f       	sbci	r23, 0xFF	; 255
    f616:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| dev     |                   | Returns a list of active drivers.        |\n\r"));
    f61a:	00 d0       	rcall	.+0      	; 0xf61c <arb_console+0x41c>
    f61c:	0f 92       	push	r0
    f61e:	ec eb       	ldi	r30, 0xBC	; 188
    f620:	f0 e0       	ldi	r31, 0x00	; 0
    f622:	ec 0f       	add	r30, r28
    f624:	fd 1f       	adc	r31, r29
    f626:	ad b7       	in	r26, 0x3d	; 61
    f628:	be b7       	in	r27, 0x3e	; 62
    f62a:	11 96       	adiw	r26, 0x01	; 1
    f62c:	ed 93       	st	X+, r30
    f62e:	fc 93       	st	X, r31
    f630:	12 97       	sbiw	r26, 0x02	; 2
    f632:	8e e2       	ldi	r24, 0x2E	; 46
    f634:	95 e0       	ldi	r25, 0x05	; 5
    f636:	13 96       	adiw	r26, 0x03	; 3
    f638:	8d 93       	st	X+, r24
    f63a:	9c 93       	st	X, r25
    f63c:	14 97       	sbiw	r26, 0x04	; 4
    f63e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f642:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f644:	80 91 33 25 	lds	r24, 0x2533
    f648:	90 91 34 25 	lds	r25, 0x2534
    f64c:	0f 90       	pop	r0
    f64e:	0f 90       	pop	r0
    f650:	0f 90       	pop	r0
    f652:	0f 90       	pop	r0
    f654:	be 01       	movw	r22, r28
    f656:	64 54       	subi	r22, 0x44	; 68
    f658:	7f 4f       	sbci	r23, 0xFF	; 255
    f65a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| top     |                   | Displays system statistics.              |\n\r"));
    f65e:	00 d0       	rcall	.+0      	; 0xf660 <arb_console+0x460>
    f660:	0f 92       	push	r0
    f662:	ec eb       	ldi	r30, 0xBC	; 188
    f664:	f0 e0       	ldi	r31, 0x00	; 0
    f666:	ec 0f       	add	r30, r28
    f668:	fd 1f       	adc	r31, r29
    f66a:	ad b7       	in	r26, 0x3d	; 61
    f66c:	be b7       	in	r27, 0x3e	; 62
    f66e:	11 96       	adiw	r26, 0x01	; 1
    f670:	ed 93       	st	X+, r30
    f672:	fc 93       	st	X, r31
    f674:	12 97       	sbiw	r26, 0x02	; 2
    f676:	81 ee       	ldi	r24, 0xE1	; 225
    f678:	94 e0       	ldi	r25, 0x04	; 4
    f67a:	13 96       	adiw	r26, 0x03	; 3
    f67c:	8d 93       	st	X+, r24
    f67e:	9c 93       	st	X, r25
    f680:	14 97       	sbiw	r26, 0x04	; 4
    f682:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f686:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f688:	80 91 33 25 	lds	r24, 0x2533
    f68c:	90 91 34 25 	lds	r25, 0x2534
    f690:	0f 90       	pop	r0
    f692:	0f 90       	pop	r0
    f694:	0f 90       	pop	r0
    f696:	0f 90       	pop	r0
    f698:	be 01       	movw	r22, r28
    f69a:	64 54       	subi	r22, 0x44	; 68
    f69c:	7f 4f       	sbci	r23, 0xFF	; 255
    f69e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| ls      | <arg1>            | Displays the contents of dir <arg1>.     |\n\r"));
    f6a2:	00 d0       	rcall	.+0      	; 0xf6a4 <arb_console+0x4a4>
    f6a4:	0f 92       	push	r0
    f6a6:	ec eb       	ldi	r30, 0xBC	; 188
    f6a8:	f0 e0       	ldi	r31, 0x00	; 0
    f6aa:	ec 0f       	add	r30, r28
    f6ac:	fd 1f       	adc	r31, r29
    f6ae:	ad b7       	in	r26, 0x3d	; 61
    f6b0:	be b7       	in	r27, 0x3e	; 62
    f6b2:	11 96       	adiw	r26, 0x01	; 1
    f6b4:	ed 93       	st	X+, r30
    f6b6:	fc 93       	st	X, r31
    f6b8:	12 97       	sbiw	r26, 0x02	; 2
    f6ba:	84 e9       	ldi	r24, 0x94	; 148
    f6bc:	94 e0       	ldi	r25, 0x04	; 4
    f6be:	13 96       	adiw	r26, 0x03	; 3
    f6c0:	8d 93       	st	X+, r24
    f6c2:	9c 93       	st	X, r25
    f6c4:	14 97       	sbiw	r26, 0x04	; 4
    f6c6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f6ca:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f6cc:	80 91 33 25 	lds	r24, 0x2533
    f6d0:	90 91 34 25 	lds	r25, 0x2534
    f6d4:	0f 90       	pop	r0
    f6d6:	0f 90       	pop	r0
    f6d8:	0f 90       	pop	r0
    f6da:	0f 90       	pop	r0
    f6dc:	be 01       	movw	r22, r28
    f6de:	64 54       	subi	r22, 0x44	; 68
    f6e0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6e2:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| cd      | <arg1>            | Change to dir <arg1>.                    |\n\r"));
    f6e6:	00 d0       	rcall	.+0      	; 0xf6e8 <arb_console+0x4e8>
    f6e8:	0f 92       	push	r0
    f6ea:	ec eb       	ldi	r30, 0xBC	; 188
    f6ec:	f0 e0       	ldi	r31, 0x00	; 0
    f6ee:	ec 0f       	add	r30, r28
    f6f0:	fd 1f       	adc	r31, r29
    f6f2:	ad b7       	in	r26, 0x3d	; 61
    f6f4:	be b7       	in	r27, 0x3e	; 62
    f6f6:	11 96       	adiw	r26, 0x01	; 1
    f6f8:	ed 93       	st	X+, r30
    f6fa:	fc 93       	st	X, r31
    f6fc:	12 97       	sbiw	r26, 0x02	; 2
    f6fe:	87 e4       	ldi	r24, 0x47	; 71
    f700:	94 e0       	ldi	r25, 0x04	; 4
    f702:	13 96       	adiw	r26, 0x03	; 3
    f704:	8d 93       	st	X+, r24
    f706:	9c 93       	st	X, r25
    f708:	14 97       	sbiw	r26, 0x04	; 4
    f70a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f70e:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f710:	80 91 33 25 	lds	r24, 0x2533
    f714:	90 91 34 25 	lds	r25, 0x2534
    f718:	0f 90       	pop	r0
    f71a:	0f 90       	pop	r0
    f71c:	0f 90       	pop	r0
    f71e:	0f 90       	pop	r0
    f720:	be 01       	movw	r22, r28
    f722:	64 54       	subi	r22, 0x44	; 68
    f724:	7f 4f       	sbci	r23, 0xFF	; 255
    f726:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| rm      | <arg1>            | Remove a file <arg1>.                    |\n\r"));
    f72a:	00 d0       	rcall	.+0      	; 0xf72c <arb_console+0x52c>
    f72c:	0f 92       	push	r0
    f72e:	ec eb       	ldi	r30, 0xBC	; 188
    f730:	f0 e0       	ldi	r31, 0x00	; 0
    f732:	ec 0f       	add	r30, r28
    f734:	fd 1f       	adc	r31, r29
    f736:	ad b7       	in	r26, 0x3d	; 61
    f738:	be b7       	in	r27, 0x3e	; 62
    f73a:	11 96       	adiw	r26, 0x01	; 1
    f73c:	ed 93       	st	X+, r30
    f73e:	fc 93       	st	X, r31
    f740:	12 97       	sbiw	r26, 0x02	; 2
    f742:	8a ef       	ldi	r24, 0xFA	; 250
    f744:	93 e0       	ldi	r25, 0x03	; 3
    f746:	13 96       	adiw	r26, 0x03	; 3
    f748:	8d 93       	st	X+, r24
    f74a:	9c 93       	st	X, r25
    f74c:	14 97       	sbiw	r26, 0x04	; 4
    f74e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f752:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f754:	80 91 33 25 	lds	r24, 0x2533
    f758:	90 91 34 25 	lds	r25, 0x2534
    f75c:	0f 90       	pop	r0
    f75e:	0f 90       	pop	r0
    f760:	0f 90       	pop	r0
    f762:	0f 90       	pop	r0
    f764:	be 01       	movw	r22, r28
    f766:	64 54       	subi	r22, 0x44	; 68
    f768:	7f 4f       	sbci	r23, 0xFF	; 255
    f76a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| rmdir   | <arg1>            | Remove a directory.                      |\n\r"));
    f76e:	00 d0       	rcall	.+0      	; 0xf770 <arb_console+0x570>
    f770:	0f 92       	push	r0
    f772:	ec eb       	ldi	r30, 0xBC	; 188
    f774:	f0 e0       	ldi	r31, 0x00	; 0
    f776:	ec 0f       	add	r30, r28
    f778:	fd 1f       	adc	r31, r29
    f77a:	ad b7       	in	r26, 0x3d	; 61
    f77c:	be b7       	in	r27, 0x3e	; 62
    f77e:	11 96       	adiw	r26, 0x01	; 1
    f780:	ed 93       	st	X+, r30
    f782:	fc 93       	st	X, r31
    f784:	12 97       	sbiw	r26, 0x02	; 2
    f786:	8d ea       	ldi	r24, 0xAD	; 173
    f788:	93 e0       	ldi	r25, 0x03	; 3
    f78a:	13 96       	adiw	r26, 0x03	; 3
    f78c:	8d 93       	st	X+, r24
    f78e:	9c 93       	st	X, r25
    f790:	14 97       	sbiw	r26, 0x04	; 4
    f792:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f796:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f798:	80 91 33 25 	lds	r24, 0x2533
    f79c:	90 91 34 25 	lds	r25, 0x2534
    f7a0:	0f 90       	pop	r0
    f7a2:	0f 90       	pop	r0
    f7a4:	0f 90       	pop	r0
    f7a6:	0f 90       	pop	r0
    f7a8:	be 01       	movw	r22, r28
    f7aa:	64 54       	subi	r22, 0x44	; 68
    f7ac:	7f 4f       	sbci	r23, 0xFF	; 255
    f7ae:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| mkdir   | <arg1>            | Create a directory <arg1>.               |\n\r"));
    f7b2:	00 d0       	rcall	.+0      	; 0xf7b4 <arb_console+0x5b4>
    f7b4:	0f 92       	push	r0
    f7b6:	ec eb       	ldi	r30, 0xBC	; 188
    f7b8:	f0 e0       	ldi	r31, 0x00	; 0
    f7ba:	ec 0f       	add	r30, r28
    f7bc:	fd 1f       	adc	r31, r29
    f7be:	ad b7       	in	r26, 0x3d	; 61
    f7c0:	be b7       	in	r27, 0x3e	; 62
    f7c2:	11 96       	adiw	r26, 0x01	; 1
    f7c4:	ed 93       	st	X+, r30
    f7c6:	fc 93       	st	X, r31
    f7c8:	12 97       	sbiw	r26, 0x02	; 2
    f7ca:	80 e6       	ldi	r24, 0x60	; 96
    f7cc:	93 e0       	ldi	r25, 0x03	; 3
    f7ce:	13 96       	adiw	r26, 0x03	; 3
    f7d0:	8d 93       	st	X+, r24
    f7d2:	9c 93       	st	X, r25
    f7d4:	14 97       	sbiw	r26, 0x04	; 4
    f7d6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f7da:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f7dc:	80 91 33 25 	lds	r24, 0x2533
    f7e0:	90 91 34 25 	lds	r25, 0x2534
    f7e4:	0f 90       	pop	r0
    f7e6:	0f 90       	pop	r0
    f7e8:	0f 90       	pop	r0
    f7ea:	0f 90       	pop	r0
    f7ec:	be 01       	movw	r22, r28
    f7ee:	64 54       	subi	r22, 0x44	; 68
    f7f0:	7f 4f       	sbci	r23, 0xFF	; 255
    f7f2:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| touch   | <arg1>            | Create file <arg1>.                      |\n\r"));
    f7f6:	00 d0       	rcall	.+0      	; 0xf7f8 <arb_console+0x5f8>
    f7f8:	0f 92       	push	r0
    f7fa:	ec eb       	ldi	r30, 0xBC	; 188
    f7fc:	f0 e0       	ldi	r31, 0x00	; 0
    f7fe:	ec 0f       	add	r30, r28
    f800:	fd 1f       	adc	r31, r29
    f802:	ad b7       	in	r26, 0x3d	; 61
    f804:	be b7       	in	r27, 0x3e	; 62
    f806:	11 96       	adiw	r26, 0x01	; 1
    f808:	ed 93       	st	X+, r30
    f80a:	fc 93       	st	X, r31
    f80c:	12 97       	sbiw	r26, 0x02	; 2
    f80e:	83 e1       	ldi	r24, 0x13	; 19
    f810:	93 e0       	ldi	r25, 0x03	; 3
    f812:	13 96       	adiw	r26, 0x03	; 3
    f814:	8d 93       	st	X+, r24
    f816:	9c 93       	st	X, r25
    f818:	14 97       	sbiw	r26, 0x04	; 4
    f81a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f81e:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f820:	80 91 33 25 	lds	r24, 0x2533
    f824:	90 91 34 25 	lds	r25, 0x2534
    f828:	0f 90       	pop	r0
    f82a:	0f 90       	pop	r0
    f82c:	0f 90       	pop	r0
    f82e:	0f 90       	pop	r0
    f830:	be 01       	movw	r22, r28
    f832:	64 54       	subi	r22, 0x44	; 68
    f834:	7f 4f       	sbci	r23, 0xFF	; 255
    f836:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| head    | <arg1>            | Prints a file <arg1> to the terminal.    |\n\r"));
    f83a:	00 d0       	rcall	.+0      	; 0xf83c <arb_console+0x63c>
    f83c:	0f 92       	push	r0
    f83e:	ec eb       	ldi	r30, 0xBC	; 188
    f840:	f0 e0       	ldi	r31, 0x00	; 0
    f842:	ec 0f       	add	r30, r28
    f844:	fd 1f       	adc	r31, r29
    f846:	ad b7       	in	r26, 0x3d	; 61
    f848:	be b7       	in	r27, 0x3e	; 62
    f84a:	11 96       	adiw	r26, 0x01	; 1
    f84c:	ed 93       	st	X+, r30
    f84e:	fc 93       	st	X, r31
    f850:	12 97       	sbiw	r26, 0x02	; 2
    f852:	86 ec       	ldi	r24, 0xC6	; 198
    f854:	92 e0       	ldi	r25, 0x02	; 2
    f856:	13 96       	adiw	r26, 0x03	; 3
    f858:	8d 93       	st	X+, r24
    f85a:	9c 93       	st	X, r25
    f85c:	14 97       	sbiw	r26, 0x04	; 4
    f85e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f862:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f864:	80 91 33 25 	lds	r24, 0x2533
    f868:	90 91 34 25 	lds	r25, 0x2534
    f86c:	0f 90       	pop	r0
    f86e:	0f 90       	pop	r0
    f870:	0f 90       	pop	r0
    f872:	0f 90       	pop	r0
    f874:	be 01       	movw	r22, r28
    f876:	64 54       	subi	r22, 0x44	; 68
    f878:	7f 4f       	sbci	r23, 0xFF	; 255
    f87a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'-------------------'------------------------------------------'\n\r"));
    f87e:	00 d0       	rcall	.+0      	; 0xf880 <arb_console+0x680>
    f880:	0f 92       	push	r0
    f882:	ec eb       	ldi	r30, 0xBC	; 188
    f884:	f0 e0       	ldi	r31, 0x00	; 0
    f886:	ec 0f       	add	r30, r28
    f888:	fd 1f       	adc	r31, r29
    f88a:	ad b7       	in	r26, 0x3d	; 61
    f88c:	be b7       	in	r27, 0x3e	; 62
    f88e:	11 96       	adiw	r26, 0x01	; 1
    f890:	ed 93       	st	X+, r30
    f892:	fc 93       	st	X, r31
    f894:	12 97       	sbiw	r26, 0x02	; 2
    f896:	89 e7       	ldi	r24, 0x79	; 121
    f898:	92 e0       	ldi	r25, 0x02	; 2
    f89a:	d6 cd       	rjmp	.-1108   	; 0xf448 <arb_console+0x248>
         /*------------------------------------------------------------------*
          * Display a list of all the possible RTOS specific commands.
          *------------------------------------------------------------------*/
         arb_displayKernelHelp( ac_buff);
      }/*End else if( strcasecmp( (char *)t_tokHndl.ac_tok[0], "help") == 0)*/
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("sdl")) == 0)
    f89c:	ce 01       	movw	r24, r28
    f89e:	85 5b       	subi	r24, 0xB5	; 181
    f8a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f8a2:	6c e3       	ldi	r22, 0x3C	; 60
    f8a4:	72 e0       	ldi	r23, 0x02	; 2
    f8a6:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
    f8aa:	89 2b       	or	r24, r25
    f8ac:	09 f0       	breq	.+2      	; 0xf8b0 <arb_console+0x6b0>
    f8ae:	6e c0       	rjmp	.+220    	; 0xf98c <arb_console+0x78c>
    f8b0:	c5 54       	subi	r28, 0x45	; 69
    f8b2:	df 4f       	sbci	r29, 0xFF	; 255
    f8b4:	88 81       	ld	r24, Y
    f8b6:	cb 5b       	subi	r28, 0xBB	; 187
    f8b8:	d0 40       	sbci	r29, 0x00	; 0
    f8ba:	82 30       	cpi	r24, 0x02	; 2
    f8bc:	09 f0       	breq	.+2      	; 0xf8c0 <arb_console+0x6c0>
    f8be:	66 c0       	rjmp	.+204    	; 0xf98c <arb_console+0x78c>
{
   uint8_t c_dbg = PRINTF_DBG_OFF;
   t_consoleError t_conError;
   uint16_t s_size;

   if( pt_tokHndl->ac_tok[1][0] == '0')
    f8c0:	6c 96       	adiw	r28, 0x1c	; 28
    f8c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    f8c4:	6c 97       	sbiw	r28, 0x1c	; 28
    f8c6:	80 33       	cpi	r24, 0x30	; 48
    f8c8:	b9 f0       	breq	.+46     	; 0xf8f8 <arb_console+0x6f8>
      c_dbg = PRINTF_DBG_LOW;
   else if( pt_tokHndl->ac_tok[1][0] == '1')
    f8ca:	81 33       	cpi	r24, 0x31	; 49
    f8cc:	11 f4       	brne	.+4      	; 0xf8d2 <arb_console+0x6d2>
    f8ce:	12 e0       	ldi	r17, 0x02	; 2
    f8d0:	14 c0       	rjmp	.+40     	; 0xf8fa <arb_console+0x6fa>
      c_dbg = PRINTF_DBG_MED;
   else if( pt_tokHndl->ac_tok[1][0] == '2')
    f8d2:	82 33       	cpi	r24, 0x32	; 50
    f8d4:	11 f4       	brne	.+4      	; 0xf8da <arb_console+0x6da>
    f8d6:	14 e0       	ldi	r17, 0x04	; 4
    f8d8:	10 c0       	rjmp	.+32     	; 0xf8fa <arb_console+0x6fa>
      c_dbg = PRINTF_DBG_HIGH;
   else
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid Level\n\r"));
    f8da:	00 d0       	rcall	.+0      	; 0xf8dc <arb_console+0x6dc>
    f8dc:	0f 92       	push	r0
    f8de:	ec eb       	ldi	r30, 0xBC	; 188
    f8e0:	f0 e0       	ldi	r31, 0x00	; 0
    f8e2:	ec 0f       	add	r30, r28
    f8e4:	fd 1f       	adc	r31, r29
    f8e6:	ad b7       	in	r26, 0x3d	; 61
    f8e8:	be b7       	in	r27, 0x3e	; 62
    f8ea:	11 96       	adiw	r26, 0x01	; 1
    f8ec:	ed 93       	st	X+, r30
    f8ee:	fc 93       	st	X, r31
    f8f0:	12 97       	sbiw	r26, 0x02	; 2
    f8f2:	84 e5       	ldi	r24, 0x54	; 84
    f8f4:	97 e0       	ldi	r25, 0x07	; 7
    f8f6:	a8 cd       	rjmp	.-1200   	; 0xf448 <arb_console+0x248>
      arb_write( gt_conObject.t_consoleHndl,
    f8f8:	11 e0       	ldi	r17, 0x01	; 1
                 s_size);
   }

   if( c_dbg <= PRINTF_DBG_HIGH)
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("The 'Enter' button will enable/disable a debugging session. Press 'Enter' to begin...\n\r"));
    f8fa:	00 d0       	rcall	.+0      	; 0xf8fc <arb_console+0x6fc>
    f8fc:	0f 92       	push	r0
    f8fe:	ec eb       	ldi	r30, 0xBC	; 188
    f900:	f0 e0       	ldi	r31, 0x00	; 0
    f902:	ec 0f       	add	r30, r28
    f904:	fd 1f       	adc	r31, r29
    f906:	ad b7       	in	r26, 0x3d	; 61
    f908:	be b7       	in	r27, 0x3e	; 62
    f90a:	11 96       	adiw	r26, 0x01	; 1
    f90c:	ed 93       	st	X+, r30
    f90e:	fc 93       	st	X, r31
    f910:	12 97       	sbiw	r26, 0x02	; 2
    f912:	8c ef       	ldi	r24, 0xFC	; 252
    f914:	96 e0       	ldi	r25, 0x06	; 6
    f916:	13 96       	adiw	r26, 0x03	; 3
    f918:	8d 93       	st	X+, r24
    f91a:	9c 93       	st	X, r25
    f91c:	14 97       	sbiw	r26, 0x04	; 4
    f91e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f922:	ac 01       	movw	r20, r24
      arb_write( gt_conObject.t_consoleHndl,
    f924:	80 91 33 25 	lds	r24, 0x2533
    f928:	90 91 34 25 	lds	r25, 0x2534
    f92c:	0f 90       	pop	r0
    f92e:	0f 90       	pop	r0
    f930:	0f 90       	pop	r0
    f932:	0f 90       	pop	r0
    f934:	be 01       	movw	r22, r28
    f936:	64 54       	subi	r22, 0x44	; 68
    f938:	7f 4f       	sbci	r23, 0xFF	; 255
    f93a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 s_size);

      /*---------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f93e:	80 91 33 25 	lds	r24, 0x2533
    f942:	90 91 34 25 	lds	r25, 0x2534
    f946:	63 e0       	ldi	r22, 0x03	; 3
    f948:	70 e0       	ldi	r23, 0x00	; 0
    f94a:	c4 51       	subi	r28, 0x14	; 20
    f94c:	de 4f       	sbci	r29, 0xFE	; 254
    f94e:	28 81       	ld	r18, Y
    f950:	39 81       	ldd	r19, Y+1	; 0x01
    f952:	4a 81       	ldd	r20, Y+2	; 0x02
    f954:	5b 81       	ldd	r21, Y+3	; 0x03
    f956:	cc 5e       	subi	r28, 0xEC	; 236
    f958:	d1 40       	sbci	r29, 0x01	; 1
    f95a:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                              (uint32_t)((uint16_t)pt_tokHndl));

      /*---------------------------------------------------------------*
       * Enable debug...
       *---------------------------------------------------------------*/
      arb_setPrintfDbgLevel( c_dbg);
    f95e:	81 2f       	mov	r24, r17
    f960:	0e 94 db 8b 	call	0x117b6	; 0x117b6 <arb_setPrintfDbgLevel>

      /*---------------------------------------------------------------*
       * Block until a carriage return has been entered.
       *---------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
    f964:	80 91 33 25 	lds	r24, 0x2533
    f968:	90 91 34 25 	lds	r25, 0x2534
    f96c:	63 e0       	ldi	r22, 0x03	; 3
    f96e:	70 e0       	ldi	r23, 0x00	; 0
    f970:	c4 51       	subi	r28, 0x14	; 20
    f972:	de 4f       	sbci	r29, 0xFE	; 254
    f974:	28 81       	ld	r18, Y
    f976:	39 81       	ldd	r19, Y+1	; 0x01
    f978:	4a 81       	ldd	r20, Y+2	; 0x02
    f97a:	5b 81       	ldd	r21, Y+3	; 0x03
    f97c:	cc 5e       	subi	r28, 0xEC	; 236
    f97e:	d1 40       	sbci	r29, 0x01	; 1
    f980:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                              (uint32_t)((uint16_t)pt_tokHndl));

      /*---------------------------------------------------------------*
       * Disable debug...
       *---------------------------------------------------------------*/
      arb_setPrintfDbgLevel( PRINTF_DBG_OFF);
    f984:	80 e2       	ldi	r24, 0x20	; 32
    f986:	0e 94 db 8b 	call	0x117b6	; 0x117b6 <arb_setPrintfDbgLevel>
    f98a:	22 c6       	rjmp	.+3140   	; 0x105d0 <arb_console+0x13d0>
          * Turn on/off a given level of system debug.
          *------------------------------------------------------------------*/
         arb_setDebugLevel( &t_tokHndl,
                            ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("dev")) == 0)
    f98c:	ce 01       	movw	r24, r28
    f98e:	85 5b       	subi	r24, 0xB5	; 181
    f990:	9f 4f       	sbci	r25, 0xFF	; 255
    f992:	68 e3       	ldi	r22, 0x38	; 56
    f994:	72 e0       	ldi	r23, 0x02	; 2
    f996:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
    f99a:	89 2b       	or	r24, r25
    f99c:	09 f0       	breq	.+2      	; 0xf9a0 <arb_console+0x7a0>
    f99e:	d8 c0       	rjmp	.+432    	; 0xfb50 <arb_console+0x950>
    f9a0:	c5 54       	subi	r28, 0x45	; 69
    f9a2:	df 4f       	sbci	r29, 0xFF	; 255
    f9a4:	88 81       	ld	r24, Y
    f9a6:	cb 5b       	subi	r28, 0xBB	; 187
    f9a8:	d0 40       	sbci	r29, 0x00	; 0
    f9aa:	81 30       	cpi	r24, 0x01	; 1
    f9ac:	09 f0       	breq	.+2      	; 0xf9b0 <arb_console+0x7b0>
    f9ae:	d0 c0       	rjmp	.+416    	; 0xfb50 <arb_console+0x950>
 *
 * @return None.
 *****************************************************************************/
static void arb_displayDeviceList( int8_t *pc_buff)
{
   t_CONTHNDL t_deviceList = arb_getDeviceList();
    f9b0:	0e 94 f6 82 	call	0x105ec	; 0x105ec <arb_getDeviceList>
    f9b4:	89 83       	std	Y+1, r24	; 0x01
    f9b6:	9a 83       	std	Y+2, r25	; 0x02
   t_LINKHNDL t_curr;
   t_device *pt_dev;
   uint16_t s_count;
   uint16_t s_size;

   s_size = sprintf_P( (char *)pc_buff, PSTR(".-------------------------------------------------------------.\n\r"));
    f9b8:	00 d0       	rcall	.+0      	; 0xf9ba <arb_console+0x7ba>
    f9ba:	0f 92       	push	r0
    f9bc:	ec eb       	ldi	r30, 0xBC	; 188
    f9be:	f0 e0       	ldi	r31, 0x00	; 0
    f9c0:	ec 0f       	add	r30, r28
    f9c2:	fd 1f       	adc	r31, r29
    f9c4:	ad b7       	in	r26, 0x3d	; 61
    f9c6:	be b7       	in	r27, 0x3e	; 62
    f9c8:	11 96       	adiw	r26, 0x01	; 1
    f9ca:	ed 93       	st	X+, r30
    f9cc:	fc 93       	st	X, r31
    f9ce:	12 97       	sbiw	r26, 0x02	; 2
    f9d0:	83 e6       	ldi	r24, 0x63	; 99
    f9d2:	98 e0       	ldi	r25, 0x08	; 8
    f9d4:	13 96       	adiw	r26, 0x03	; 3
    f9d6:	8d 93       	st	X+, r24
    f9d8:	9c 93       	st	X, r25
    f9da:	14 97       	sbiw	r26, 0x04	; 4
    f9dc:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    f9e0:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    f9e2:	80 91 33 25 	lds	r24, 0x2533
    f9e6:	90 91 34 25 	lds	r25, 0x2534
    f9ea:	0f 90       	pop	r0
    f9ec:	0f 90       	pop	r0
    f9ee:	0f 90       	pop	r0
    f9f0:	0f 90       	pop	r0
    f9f2:	be 01       	movw	r22, r28
    f9f4:	64 54       	subi	r22, 0x44	; 68
    f9f6:	7f 4f       	sbci	r23, 0xFF	; 255
    f9f8:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   Driver Name   | Major Number | Minor Number| # of Handles |\n\r"));
    f9fc:	00 d0       	rcall	.+0      	; 0xf9fe <arb_console+0x7fe>
    f9fe:	0f 92       	push	r0
    fa00:	ec eb       	ldi	r30, 0xBC	; 188
    fa02:	f0 e0       	ldi	r31, 0x00	; 0
    fa04:	ec 0f       	add	r30, r28
    fa06:	fd 1f       	adc	r31, r29
    fa08:	ad b7       	in	r26, 0x3d	; 61
    fa0a:	be b7       	in	r27, 0x3e	; 62
    fa0c:	11 96       	adiw	r26, 0x01	; 1
    fa0e:	ed 93       	st	X+, r30
    fa10:	fc 93       	st	X, r31
    fa12:	12 97       	sbiw	r26, 0x02	; 2
    fa14:	81 e2       	ldi	r24, 0x21	; 33
    fa16:	98 e0       	ldi	r25, 0x08	; 8
    fa18:	13 96       	adiw	r26, 0x03	; 3
    fa1a:	8d 93       	st	X+, r24
    fa1c:	9c 93       	st	X, r25
    fa1e:	14 97       	sbiw	r26, 0x04	; 4
    fa20:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fa24:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fa26:	80 91 33 25 	lds	r24, 0x2533
    fa2a:	90 91 34 25 	lds	r25, 0x2534
    fa2e:	0f 90       	pop	r0
    fa30:	0f 90       	pop	r0
    fa32:	0f 90       	pop	r0
    fa34:	0f 90       	pop	r0
    fa36:	be 01       	movw	r22, r28
    fa38:	64 54       	subi	r22, 0x44	; 68
    fa3a:	7f 4f       	sbci	r23, 0xFF	; 255
    fa3c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|-----------------|--------------|-------------|--------------|\n\r"));
    fa40:	00 d0       	rcall	.+0      	; 0xfa42 <arb_console+0x842>
    fa42:	0f 92       	push	r0
    fa44:	ec eb       	ldi	r30, 0xBC	; 188
    fa46:	f0 e0       	ldi	r31, 0x00	; 0
    fa48:	ec 0f       	add	r30, r28
    fa4a:	fd 1f       	adc	r31, r29
    fa4c:	ad b7       	in	r26, 0x3d	; 61
    fa4e:	be b7       	in	r27, 0x3e	; 62
    fa50:	11 96       	adiw	r26, 0x01	; 1
    fa52:	ed 93       	st	X+, r30
    fa54:	fc 93       	st	X, r31
    fa56:	12 97       	sbiw	r26, 0x02	; 2
    fa58:	8f ed       	ldi	r24, 0xDF	; 223
    fa5a:	97 e0       	ldi	r25, 0x07	; 7
    fa5c:	13 96       	adiw	r26, 0x03	; 3
    fa5e:	8d 93       	st	X+, r24
    fa60:	9c 93       	st	X, r25
    fa62:	14 97       	sbiw	r26, 0x04	; 4
    fa64:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fa68:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fa6a:	80 91 33 25 	lds	r24, 0x2533
    fa6e:	90 91 34 25 	lds	r25, 0x2534
    fa72:	0f 90       	pop	r0
    fa74:	0f 90       	pop	r0
    fa76:	0f 90       	pop	r0
    fa78:	0f 90       	pop	r0
    fa7a:	be 01       	movw	r22, r28
    fa7c:	64 54       	subi	r22, 0x44	; 68
    fa7e:	7f 4f       	sbci	r23, 0xFF	; 255
    fa80:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
    fa84:	e9 81       	ldd	r30, Y+1	; 0x01
    fa86:	fa 81       	ldd	r31, Y+2	; 0x02
    fa88:	02 81       	ldd	r16, Z+2	; 0x02
    fa8a:	13 81       	ldd	r17, Z+3	; 0x03
    fa8c:	e9 81       	ldd	r30, Y+1	; 0x01
    fa8e:	fa 81       	ldd	r31, Y+2	; 0x02
    fa90:	48 c0       	rjmp	.+144    	; 0xfb22 <arb_console+0x922>
   {
      pt_dev = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
    fa92:	eb 81       	ldd	r30, Y+3	; 0x03
    fa94:	fc 81       	ldd	r31, Y+4	; 0x04
    fa96:	20 81       	ld	r18, Z
    fa98:	31 81       	ldd	r19, Z+1	; 0x01
      s_size = sprintf_P( (char *)pc_buff, PSTR("| %16s| %2d           | %2d          | %2d           |\n\r"),
    fa9a:	d9 01       	movw	r26, r18
    fa9c:	8d 91       	ld	r24, X+
    fa9e:	9c 91       	ld	r25, X
    faa0:	f9 01       	movw	r30, r18
    faa2:	41 91       	ld	r20, Z+
    faa4:	51 91       	ld	r21, Z+
    faa6:	7f 01       	movw	r14, r30
    faa8:	6d b7       	in	r22, 0x3d	; 61
    faaa:	7e b7       	in	r23, 0x3e	; 62
    faac:	6c 50       	subi	r22, 0x0C	; 12
    faae:	70 40       	sbci	r23, 0x00	; 0
    fab0:	6d bf       	out	0x3d, r22	; 61
    fab2:	7e bf       	out	0x3e, r23	; 62
    fab4:	ed b7       	in	r30, 0x3d	; 61
    fab6:	fe b7       	in	r31, 0x3e	; 62
    fab8:	31 96       	adiw	r30, 0x01	; 1
    faba:	6c eb       	ldi	r22, 0xBC	; 188
    fabc:	70 e0       	ldi	r23, 0x00	; 0
    fabe:	6c 0f       	add	r22, r28
    fac0:	7d 1f       	adc	r23, r29
    fac2:	ad b7       	in	r26, 0x3d	; 61
    fac4:	be b7       	in	r27, 0x3e	; 62
    fac6:	11 96       	adiw	r26, 0x01	; 1
    fac8:	6d 93       	st	X+, r22
    faca:	7c 93       	st	X, r23
    facc:	12 97       	sbiw	r26, 0x02	; 2
    face:	a6 ea       	ldi	r26, 0xA6	; 166
    fad0:	b7 e0       	ldi	r27, 0x07	; 7
    fad2:	a2 83       	std	Z+2, r26	; 0x02
    fad4:	b3 83       	std	Z+3, r27	; 0x03
    fad6:	e4 82       	std	Z+4, r14	; 0x04
    fad8:	f5 82       	std	Z+5, r15	; 0x05
    fada:	89 2f       	mov	r24, r25
    fadc:	99 0f       	add	r25, r25
    fade:	99 0b       	sbc	r25, r25
    fae0:	86 83       	std	Z+6, r24	; 0x06
    fae2:	17 82       	std	Z+7, r1	; 0x07
    fae4:	40 87       	std	Z+8, r20	; 0x08
    fae6:	11 86       	std	Z+9, r1	; 0x09
    fae8:	d9 01       	movw	r26, r18
    faea:	52 96       	adiw	r26, 0x12	; 18
    faec:	8c 91       	ld	r24, X
    faee:	99 27       	eor	r25, r25
    faf0:	87 fd       	sbrc	r24, 7
    faf2:	90 95       	com	r25
    faf4:	82 87       	std	Z+10, r24	; 0x0a
    faf6:	93 87       	std	Z+11, r25	; 0x0b
    faf8:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fafc:	ac 01       	movw	r20, r24
      pt_dev->ac_deviceName,
      ARB_GET_DEV_MAJOR(pt_dev->t_devId),
      ARB_GET_DEV_MINOR(pt_dev->t_devId),
      pt_dev->c_numDevHandles);

      arb_write( gt_conObject.t_consoleHndl,
    fafe:	80 91 33 25 	lds	r24, 0x2533
    fb02:	90 91 34 25 	lds	r25, 0x2534
    fb06:	ed b7       	in	r30, 0x3d	; 61
    fb08:	fe b7       	in	r31, 0x3e	; 62
    fb0a:	3c 96       	adiw	r30, 0x0c	; 12
    fb0c:	ed bf       	out	0x3d, r30	; 61
    fb0e:	fe bf       	out	0x3e, r31	; 62
    fb10:	be 01       	movw	r22, r28
    fb12:	64 54       	subi	r22, 0x44	; 68
    fb14:	7f 4f       	sbci	r23, 0xFF	; 255
    fb16:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   s_size = sprintf_P( (char *)pc_buff, PSTR("|-----------------|--------------|-------------|--------------|\n\r"));
   arb_write( gt_conObject.t_consoleHndl,
              pc_buff,
              s_size);

   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, t_deviceList, s_count)
    fb1a:	01 50       	subi	r16, 0x01	; 1
    fb1c:	10 40       	sbci	r17, 0x00	; 0
    fb1e:	eb 81       	ldd	r30, Y+3	; 0x03
    fb20:	fc 81       	ldd	r31, Y+4	; 0x04
    fb22:	80 85       	ldd	r24, Z+8	; 0x08
    fb24:	91 85       	ldd	r25, Z+9	; 0x09
    fb26:	8b 83       	std	Y+3, r24	; 0x03
    fb28:	9c 83       	std	Y+4, r25	; 0x04
    fb2a:	01 15       	cp	r16, r1
    fb2c:	11 05       	cpc	r17, r1
    fb2e:	09 f0       	breq	.+2      	; 0xfb32 <arb_console+0x932>
    fb30:	b0 cf       	rjmp	.-160    	; 0xfa92 <arb_console+0x892>
      arb_write( gt_conObject.t_consoleHndl,
                 pc_buff,
                 s_size);
   }

   s_size = sprintf_P( (char *)pc_buff, PSTR("'-----------------'--------------'-------------'--------------'\n\r"));
    fb32:	00 d0       	rcall	.+0      	; 0xfb34 <arb_console+0x934>
    fb34:	0f 92       	push	r0
    fb36:	ec eb       	ldi	r30, 0xBC	; 188
    fb38:	f0 e0       	ldi	r31, 0x00	; 0
    fb3a:	ec 0f       	add	r30, r28
    fb3c:	fd 1f       	adc	r31, r29
    fb3e:	ad b7       	in	r26, 0x3d	; 61
    fb40:	be b7       	in	r27, 0x3e	; 62
    fb42:	11 96       	adiw	r26, 0x01	; 1
    fb44:	ed 93       	st	X+, r30
    fb46:	fc 93       	st	X, r31
    fb48:	12 97       	sbiw	r26, 0x02	; 2
    fb4a:	84 e6       	ldi	r24, 0x64	; 100
    fb4c:	97 e0       	ldi	r25, 0x07	; 7
    fb4e:	7c cc       	rjmp	.-1800   	; 0xf448 <arb_console+0x248>
          * Display a list of all the device drivers registered with the
          * kernel.
          *------------------------------------------------------------------*/
         arb_displayDeviceList( ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("top")) == 0)
    fb50:	ce 01       	movw	r24, r28
    fb52:	85 5b       	subi	r24, 0xB5	; 181
    fb54:	9f 4f       	sbci	r25, 0xFF	; 255
    fb56:	64 e3       	ldi	r22, 0x34	; 52
    fb58:	72 e0       	ldi	r23, 0x02	; 2
    fb5a:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
    fb5e:	89 2b       	or	r24, r25
    fb60:	09 f0       	breq	.+2      	; 0xfb64 <arb_console+0x964>
    fb62:	33 c3       	rjmp	.+1638   	; 0x101ca <arb_console+0xfca>
    fb64:	c5 54       	subi	r28, 0x45	; 69
    fb66:	df 4f       	sbci	r29, 0xFF	; 255
    fb68:	88 81       	ld	r24, Y
    fb6a:	cb 5b       	subi	r28, 0xBB	; 187
    fb6c:	d0 40       	sbci	r29, 0x00	; 0
    fb6e:	81 30       	cpi	r24, 0x01	; 1
    fb70:	09 f0       	breq	.+2      	; 0xfb74 <arb_console+0x974>
    fb72:	2b c3       	rjmp	.+1622   	; 0x101ca <arb_console+0xfca>
   int32_t i_ramUsed;
   int32_t i_percUsed;

   i_dataSize = (int32_t)(uint16_t)&__data_end - (int32_t)(uint16_t)&__data_start;
   i_bssSize  = (int32_t)(uint16_t)&__bss_end - (int32_t)(uint16_t)&__data_end;
   i_heapSize = (int32_t)(uint16_t)__brkval - (int32_t)(uint16_t)&__bss_end;
    fb74:	80 91 04 26 	lds	r24, 0x2604
    fb78:	90 91 05 26 	lds	r25, 0x2605
    fb7c:	a0 e0       	ldi	r26, 0x00	; 0
    fb7e:	b0 e0       	ldi	r27, 0x00	; 0
    fb80:	1c 01       	movw	r2, r24
    fb82:	2d 01       	movw	r4, r26
    fb84:	c6 50       	subi	r28, 0x06	; 6
    fb86:	de 4f       	sbci	r29, 0xFE	; 254
    fb88:	e8 80       	ld	r14, Y
    fb8a:	f9 80       	ldd	r15, Y+1	; 0x01
    fb8c:	0a 81       	ldd	r16, Y+2	; 0x02
    fb8e:	1b 81       	ldd	r17, Y+3	; 0x03
    fb90:	ca 5f       	subi	r28, 0xFA	; 250
    fb92:	d1 40       	sbci	r29, 0x01	; 1
    fb94:	2e 18       	sub	r2, r14
    fb96:	3f 08       	sbc	r3, r15
    fb98:	40 0a       	sbc	r4, r16
    fb9a:	51 0a       	sbc	r5, r17
   i_freeSize = (int32_t)RAMEND - (int32_t)(uint16_t)__brkval - (int32_t)__malloc_margin;
    fb9c:	5f ef       	ldi	r21, 0xFF	; 255
    fb9e:	a5 2e       	mov	r10, r21
    fba0:	5f e3       	ldi	r21, 0x3F	; 63
    fba2:	b5 2e       	mov	r11, r21
    fba4:	c1 2c       	mov	r12, r1
    fba6:	d1 2c       	mov	r13, r1
    fba8:	a8 1a       	sub	r10, r24
    fbaa:	b9 0a       	sbc	r11, r25
    fbac:	ca 0a       	sbc	r12, r26
    fbae:	db 0a       	sbc	r13, r27
    fbb0:	80 91 7f 22 	lds	r24, 0x227F
    fbb4:	90 91 80 22 	lds	r25, 0x2280
    fbb8:	a0 e0       	ldi	r26, 0x00	; 0
    fbba:	b0 e0       	ldi	r27, 0x00	; 0
    fbbc:	a8 1a       	sub	r10, r24
    fbbe:	b9 0a       	sbc	r11, r25
    fbc0:	ca 0a       	sbc	r12, r26
    fbc2:	db 0a       	sbc	r13, r27
   i_ramUsed  = i_dataSize + i_bssSize + i_heapSize;
    fbc4:	ce 5f       	subi	r28, 0xFE	; 254
    fbc6:	dd 4f       	sbci	r29, 0xFD	; 253
    fbc8:	08 81       	ld	r16, Y
    fbca:	19 81       	ldd	r17, Y+1	; 0x01
    fbcc:	2a 81       	ldd	r18, Y+2	; 0x02
    fbce:	3b 81       	ldd	r19, Y+3	; 0x03
    fbd0:	c2 50       	subi	r28, 0x02	; 2
    fbd2:	d2 40       	sbci	r29, 0x02	; 2
    fbd4:	02 0d       	add	r16, r2
    fbd6:	13 1d       	adc	r17, r3
    fbd8:	24 1d       	adc	r18, r4
    fbda:	35 1d       	adc	r19, r5
    fbdc:	c8 51       	subi	r28, 0x18	; 24
    fbde:	de 4f       	sbci	r29, 0xFE	; 254
    fbe0:	08 83       	st	Y, r16
    fbe2:	19 83       	std	Y+1, r17	; 0x01
    fbe4:	2a 83       	std	Y+2, r18	; 0x02
    fbe6:	3b 83       	std	Y+3, r19	; 0x03
    fbe8:	c8 5e       	subi	r28, 0xE8	; 232
    fbea:	d1 40       	sbci	r29, 0x01	; 1
   i_percUsed = (i_ramUsed*(int32_t)100)/(RAMEND - (int32_t)(uint16_t)&__data_start);
    fbec:	44 e6       	ldi	r20, 0x64	; 100
    fbee:	64 2e       	mov	r6, r20
    fbf0:	71 2c       	mov	r7, r1
    fbf2:	81 2c       	mov	r8, r1
    fbf4:	91 2c       	mov	r9, r1
    fbf6:	c9 01       	movw	r24, r18
    fbf8:	b8 01       	movw	r22, r16
    fbfa:	24 e6       	ldi	r18, 0x64	; 100
    fbfc:	30 e0       	ldi	r19, 0x00	; 0
    fbfe:	40 e0       	ldi	r20, 0x00	; 0
    fc00:	50 e0       	ldi	r21, 0x00	; 0
    fc02:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
    fc06:	ca 5f       	subi	r28, 0xFA	; 250
    fc08:	dd 4f       	sbci	r29, 0xFD	; 253
    fc0a:	28 81       	ld	r18, Y
    fc0c:	39 81       	ldd	r19, Y+1	; 0x01
    fc0e:	4a 81       	ldd	r20, Y+2	; 0x02
    fc10:	5b 81       	ldd	r21, Y+3	; 0x03
    fc12:	c6 50       	subi	r28, 0x06	; 6
    fc14:	d2 40       	sbci	r29, 0x02	; 2
    fc16:	0e 94 98 b9 	call	0x17330	; 0x17330 <__divmodsi4>
    fc1a:	79 01       	movw	r14, r18
    fc1c:	8a 01       	movw	r16, r20

   s_size = sprintf_P( (char *)pc_buff, PSTR(".---------.---------------.---------------.\n\r"));
    fc1e:	00 d0       	rcall	.+0      	; 0xfc20 <arb_console+0xa20>
    fc20:	0f 92       	push	r0
    fc22:	ec eb       	ldi	r30, 0xBC	; 188
    fc24:	f0 e0       	ldi	r31, 0x00	; 0
    fc26:	ec 0f       	add	r30, r28
    fc28:	fd 1f       	adc	r31, r29
    fc2a:	ad b7       	in	r26, 0x3d	; 61
    fc2c:	be b7       	in	r27, 0x3e	; 62
    fc2e:	11 96       	adiw	r26, 0x01	; 1
    fc30:	ed 93       	st	X+, r30
    fc32:	fc 93       	st	X, r31
    fc34:	12 97       	sbiw	r26, 0x02	; 2
    fc36:	2a e3       	ldi	r18, 0x3A	; 58
    fc38:	3b e0       	ldi	r19, 0x0B	; 11
    fc3a:	13 96       	adiw	r26, 0x03	; 3
    fc3c:	2d 93       	st	X+, r18
    fc3e:	3c 93       	st	X, r19
    fc40:	14 97       	sbiw	r26, 0x04	; 4
    fc42:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fc46:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fc48:	80 91 33 25 	lds	r24, 0x2533
    fc4c:	90 91 34 25 	lds	r25, 0x2534
    fc50:	0f 90       	pop	r0
    fc52:	0f 90       	pop	r0
    fc54:	0f 90       	pop	r0
    fc56:	0f 90       	pop	r0
    fc58:	be 01       	movw	r22, r28
    fc5a:	64 54       	subi	r22, 0x44	; 68
    fc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    fc5e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Section |    Address    |   Size Bytes  |\n\r"));
    fc62:	00 d0       	rcall	.+0      	; 0xfc64 <arb_console+0xa64>
    fc64:	0f 92       	push	r0
    fc66:	ec eb       	ldi	r30, 0xBC	; 188
    fc68:	f0 e0       	ldi	r31, 0x00	; 0
    fc6a:	ec 0f       	add	r30, r28
    fc6c:	fd 1f       	adc	r31, r29
    fc6e:	ad b7       	in	r26, 0x3d	; 61
    fc70:	be b7       	in	r27, 0x3e	; 62
    fc72:	11 96       	adiw	r26, 0x01	; 1
    fc74:	ed 93       	st	X+, r30
    fc76:	fc 93       	st	X, r31
    fc78:	12 97       	sbiw	r26, 0x02	; 2
    fc7a:	8c e0       	ldi	r24, 0x0C	; 12
    fc7c:	9b e0       	ldi	r25, 0x0B	; 11
    fc7e:	13 96       	adiw	r26, 0x03	; 3
    fc80:	8d 93       	st	X+, r24
    fc82:	9c 93       	st	X, r25
    fc84:	14 97       	sbiw	r26, 0x04	; 4
    fc86:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fc8a:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fc8c:	80 91 33 25 	lds	r24, 0x2533
    fc90:	90 91 34 25 	lds	r25, 0x2534
    fc94:	0f 90       	pop	r0
    fc96:	0f 90       	pop	r0
    fc98:	0f 90       	pop	r0
    fc9a:	0f 90       	pop	r0
    fc9c:	be 01       	movw	r22, r28
    fc9e:	64 54       	subi	r22, 0x44	; 68
    fca0:	7f 4f       	sbci	r23, 0xFF	; 255
    fca2:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|---------------|---------------|\n\r"));
    fca6:	00 d0       	rcall	.+0      	; 0xfca8 <arb_console+0xaa8>
    fca8:	0f 92       	push	r0
    fcaa:	ec eb       	ldi	r30, 0xBC	; 188
    fcac:	f0 e0       	ldi	r31, 0x00	; 0
    fcae:	ec 0f       	add	r30, r28
    fcb0:	fd 1f       	adc	r31, r29
    fcb2:	ad b7       	in	r26, 0x3d	; 61
    fcb4:	be b7       	in	r27, 0x3e	; 62
    fcb6:	11 96       	adiw	r26, 0x01	; 1
    fcb8:	ed 93       	st	X+, r30
    fcba:	fc 93       	st	X, r31
    fcbc:	12 97       	sbiw	r26, 0x02	; 2
    fcbe:	8e ed       	ldi	r24, 0xDE	; 222
    fcc0:	9a e0       	ldi	r25, 0x0A	; 10
    fcc2:	13 96       	adiw	r26, 0x03	; 3
    fcc4:	8d 93       	st	X+, r24
    fcc6:	9c 93       	st	X, r25
    fcc8:	14 97       	sbiw	r26, 0x04	; 4
    fcca:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fcce:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fcd0:	80 91 33 25 	lds	r24, 0x2533
    fcd4:	90 91 34 25 	lds	r25, 0x2534
    fcd8:	0f 90       	pop	r0
    fcda:	0f 90       	pop	r0
    fcdc:	0f 90       	pop	r0
    fcde:	0f 90       	pop	r0
    fce0:	be 01       	movw	r22, r28
    fce2:	64 54       	subi	r22, 0x44	; 68
    fce4:	7f 4f       	sbci	r23, 0xFF	; 255
    fce6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   .data |        0x%x | %13d |\n\r"), (uint16_t)&__data_start, i_dataSize);
    fcea:	2d b7       	in	r18, 0x3d	; 61
    fcec:	3e b7       	in	r19, 0x3e	; 62
    fcee:	2a 50       	subi	r18, 0x0A	; 10
    fcf0:	30 40       	sbci	r19, 0x00	; 0
    fcf2:	2d bf       	out	0x3d, r18	; 61
    fcf4:	3e bf       	out	0x3e, r19	; 62
    fcf6:	ed b7       	in	r30, 0x3d	; 61
    fcf8:	fe b7       	in	r31, 0x3e	; 62
    fcfa:	31 96       	adiw	r30, 0x01	; 1
    fcfc:	2c eb       	ldi	r18, 0xBC	; 188
    fcfe:	30 e0       	ldi	r19, 0x00	; 0
    fd00:	2c 0f       	add	r18, r28
    fd02:	3d 1f       	adc	r19, r29
    fd04:	ad b7       	in	r26, 0x3d	; 61
    fd06:	be b7       	in	r27, 0x3e	; 62
    fd08:	11 96       	adiw	r26, 0x01	; 1
    fd0a:	2d 93       	st	X+, r18
    fd0c:	3c 93       	st	X, r19
    fd0e:	12 97       	sbiw	r26, 0x02	; 2
    fd10:	8b eb       	ldi	r24, 0xBB	; 187
    fd12:	9a e0       	ldi	r25, 0x0A	; 10
    fd14:	82 83       	std	Z+2, r24	; 0x02
    fd16:	93 83       	std	Z+3, r25	; 0x03
    fd18:	40 e0       	ldi	r20, 0x00	; 0
    fd1a:	50 e2       	ldi	r21, 0x20	; 32
    fd1c:	44 83       	std	Z+4, r20	; 0x04
    fd1e:	55 83       	std	Z+5, r21	; 0x05
    fd20:	ca 50       	subi	r28, 0x0A	; 10
    fd22:	de 4f       	sbci	r29, 0xFE	; 254
    fd24:	68 81       	ld	r22, Y
    fd26:	79 81       	ldd	r23, Y+1	; 0x01
    fd28:	8a 81       	ldd	r24, Y+2	; 0x02
    fd2a:	9b 81       	ldd	r25, Y+3	; 0x03
    fd2c:	c6 5f       	subi	r28, 0xF6	; 246
    fd2e:	d1 40       	sbci	r29, 0x01	; 1
    fd30:	66 83       	std	Z+6, r22	; 0x06
    fd32:	77 83       	std	Z+7, r23	; 0x07
    fd34:	80 87       	std	Z+8, r24	; 0x08
    fd36:	91 87       	std	Z+9, r25	; 0x09
    fd38:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fd3c:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fd3e:	80 91 33 25 	lds	r24, 0x2533
    fd42:	90 91 34 25 	lds	r25, 0x2534
    fd46:	ad b7       	in	r26, 0x3d	; 61
    fd48:	be b7       	in	r27, 0x3e	; 62
    fd4a:	1a 96       	adiw	r26, 0x0a	; 10
    fd4c:	ad bf       	out	0x3d, r26	; 61
    fd4e:	be bf       	out	0x3e, r27	; 62
    fd50:	be 01       	movw	r22, r28
    fd52:	64 54       	subi	r22, 0x44	; 68
    fd54:	7f 4f       	sbci	r23, 0xFF	; 255
    fd56:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|    .bss |        0x%x | %13d |\n\r"), (uint16_t)&__data_end, i_bssSize);
    fd5a:	ed b7       	in	r30, 0x3d	; 61
    fd5c:	fe b7       	in	r31, 0x3e	; 62
    fd5e:	3a 97       	sbiw	r30, 0x0a	; 10
    fd60:	ed bf       	out	0x3d, r30	; 61
    fd62:	fe bf       	out	0x3e, r31	; 62
    fd64:	31 96       	adiw	r30, 0x01	; 1
    fd66:	2c eb       	ldi	r18, 0xBC	; 188
    fd68:	30 e0       	ldi	r19, 0x00	; 0
    fd6a:	2c 0f       	add	r18, r28
    fd6c:	3d 1f       	adc	r19, r29
    fd6e:	ad b7       	in	r26, 0x3d	; 61
    fd70:	be b7       	in	r27, 0x3e	; 62
    fd72:	11 96       	adiw	r26, 0x01	; 1
    fd74:	2d 93       	st	X+, r18
    fd76:	3c 93       	st	X, r19
    fd78:	12 97       	sbiw	r26, 0x02	; 2
    fd7a:	88 e9       	ldi	r24, 0x98	; 152
    fd7c:	9a e0       	ldi	r25, 0x0A	; 10
    fd7e:	82 83       	std	Z+2, r24	; 0x02
    fd80:	93 83       	std	Z+3, r25	; 0x03
    fd82:	46 e8       	ldi	r20, 0x86	; 134
    fd84:	52 e2       	ldi	r21, 0x22	; 34
    fd86:	44 83       	std	Z+4, r20	; 0x04
    fd88:	55 83       	std	Z+5, r21	; 0x05
    fd8a:	c2 50       	subi	r28, 0x02	; 2
    fd8c:	de 4f       	sbci	r29, 0xFE	; 254
    fd8e:	68 81       	ld	r22, Y
    fd90:	79 81       	ldd	r23, Y+1	; 0x01
    fd92:	8a 81       	ldd	r24, Y+2	; 0x02
    fd94:	9b 81       	ldd	r25, Y+3	; 0x03
    fd96:	ce 5f       	subi	r28, 0xFE	; 254
    fd98:	d1 40       	sbci	r29, 0x01	; 1
    fd9a:	66 83       	std	Z+6, r22	; 0x06
    fd9c:	77 83       	std	Z+7, r23	; 0x07
    fd9e:	80 87       	std	Z+8, r24	; 0x08
    fda0:	91 87       	std	Z+9, r25	; 0x09
    fda2:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fda6:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fda8:	80 91 33 25 	lds	r24, 0x2533
    fdac:	90 91 34 25 	lds	r25, 0x2534
    fdb0:	ad b7       	in	r26, 0x3d	; 61
    fdb2:	be b7       	in	r27, 0x3e	; 62
    fdb4:	1a 96       	adiw	r26, 0x0a	; 10
    fdb6:	ad bf       	out	0x3d, r26	; 61
    fdb8:	be bf       	out	0x3e, r27	; 62
    fdba:	be 01       	movw	r22, r28
    fdbc:	64 54       	subi	r22, 0x44	; 68
    fdbe:	7f 4f       	sbci	r23, 0xFF	; 255
    fdc0:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|   .heap |        0x%x | %13d |\n\r"), (uint16_t)&__bss_end, i_heapSize);
    fdc4:	ed b7       	in	r30, 0x3d	; 61
    fdc6:	fe b7       	in	r31, 0x3e	; 62
    fdc8:	3a 97       	sbiw	r30, 0x0a	; 10
    fdca:	ed bf       	out	0x3d, r30	; 61
    fdcc:	fe bf       	out	0x3e, r31	; 62
    fdce:	31 96       	adiw	r30, 0x01	; 1
    fdd0:	2c eb       	ldi	r18, 0xBC	; 188
    fdd2:	30 e0       	ldi	r19, 0x00	; 0
    fdd4:	2c 0f       	add	r18, r28
    fdd6:	3d 1f       	adc	r19, r29
    fdd8:	ad b7       	in	r26, 0x3d	; 61
    fdda:	be b7       	in	r27, 0x3e	; 62
    fddc:	11 96       	adiw	r26, 0x01	; 1
    fdde:	2d 93       	st	X+, r18
    fde0:	3c 93       	st	X, r19
    fde2:	12 97       	sbiw	r26, 0x02	; 2
    fde4:	85 e7       	ldi	r24, 0x75	; 117
    fde6:	9a e0       	ldi	r25, 0x0A	; 10
    fde8:	82 83       	std	Z+2, r24	; 0x02
    fdea:	93 83       	std	Z+3, r25	; 0x03
    fdec:	48 e0       	ldi	r20, 0x08	; 8
    fdee:	56 e2       	ldi	r21, 0x26	; 38
    fdf0:	44 83       	std	Z+4, r20	; 0x04
    fdf2:	55 83       	std	Z+5, r21	; 0x05
    fdf4:	26 82       	std	Z+6, r2	; 0x06
    fdf6:	37 82       	std	Z+7, r3	; 0x07
    fdf8:	40 86       	std	Z+8, r4	; 0x08
    fdfa:	51 86       	std	Z+9, r5	; 0x09
    fdfc:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fe00:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fe02:	80 91 33 25 	lds	r24, 0x2533
    fe06:	90 91 34 25 	lds	r25, 0x2534
    fe0a:	6d b7       	in	r22, 0x3d	; 61
    fe0c:	7e b7       	in	r23, 0x3e	; 62
    fe0e:	66 5f       	subi	r22, 0xF6	; 246
    fe10:	7f 4f       	sbci	r23, 0xFF	; 255
    fe12:	6d bf       	out	0x3d, r22	; 61
    fe14:	7e bf       	out	0x3e, r23	; 62
    fe16:	be 01       	movw	r22, r28
    fe18:	64 54       	subi	r22, 0x44	; 68
    fe1a:	7f 4f       	sbci	r23, 0xFF	; 255
    fe1c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
    fe20:	00 d0       	rcall	.+0      	; 0xfe22 <arb_console+0xc22>
    fe22:	0f 92       	push	r0
    fe24:	ec eb       	ldi	r30, 0xBC	; 188
    fe26:	f0 e0       	ldi	r31, 0x00	; 0
    fe28:	ec 0f       	add	r30, r28
    fe2a:	fd 1f       	adc	r31, r29
    fe2c:	ad b7       	in	r26, 0x3d	; 61
    fe2e:	be b7       	in	r27, 0x3e	; 62
    fe30:	11 96       	adiw	r26, 0x01	; 1
    fe32:	ed 93       	st	X+, r30
    fe34:	fc 93       	st	X, r31
    fe36:	12 97       	sbiw	r26, 0x02	; 2
    fe38:	87 e4       	ldi	r24, 0x47	; 71
    fe3a:	9a e0       	ldi	r25, 0x0A	; 10
    fe3c:	13 96       	adiw	r26, 0x03	; 3
    fe3e:	8d 93       	st	X+, r24
    fe40:	9c 93       	st	X, r25
    fe42:	14 97       	sbiw	r26, 0x04	; 4
    fe44:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    fe48:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    fe4a:	80 91 33 25 	lds	r24, 0x2533
    fe4e:	90 91 34 25 	lds	r25, 0x2534
    fe52:	0f 90       	pop	r0
    fe54:	0f 90       	pop	r0
    fe56:	0f 90       	pop	r0
    fe58:	0f 90       	pop	r0
    fe5a:	be 01       	movw	r22, r28
    fe5c:	64 54       	subi	r22, 0x44	; 68
    fe5e:	7f 4f       	sbci	r23, 0xFF	; 255
    fe60:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Used RAM |               | %13d |\n\r"), i_ramUsed);
    fe64:	2d b7       	in	r18, 0x3d	; 61
    fe66:	3e b7       	in	r19, 0x3e	; 62
    fe68:	28 50       	subi	r18, 0x08	; 8
    fe6a:	30 40       	sbci	r19, 0x00	; 0
    fe6c:	2d bf       	out	0x3d, r18	; 61
    fe6e:	3e bf       	out	0x3e, r19	; 62
    fe70:	ed b7       	in	r30, 0x3d	; 61
    fe72:	fe b7       	in	r31, 0x3e	; 62
    fe74:	31 96       	adiw	r30, 0x01	; 1
    fe76:	2c eb       	ldi	r18, 0xBC	; 188
    fe78:	30 e0       	ldi	r19, 0x00	; 0
    fe7a:	2c 0f       	add	r18, r28
    fe7c:	3d 1f       	adc	r19, r29
    fe7e:	ad b7       	in	r26, 0x3d	; 61
    fe80:	be b7       	in	r27, 0x3e	; 62
    fe82:	11 96       	adiw	r26, 0x01	; 1
    fe84:	2d 93       	st	X+, r18
    fe86:	3c 93       	st	X, r19
    fe88:	12 97       	sbiw	r26, 0x02	; 2
    fe8a:	82 e2       	ldi	r24, 0x22	; 34
    fe8c:	9a e0       	ldi	r25, 0x0A	; 10
    fe8e:	82 83       	std	Z+2, r24	; 0x02
    fe90:	93 83       	std	Z+3, r25	; 0x03
    fe92:	c8 51       	subi	r28, 0x18	; 24
    fe94:	de 4f       	sbci	r29, 0xFE	; 254
    fe96:	48 81       	ld	r20, Y
    fe98:	59 81       	ldd	r21, Y+1	; 0x01
    fe9a:	6a 81       	ldd	r22, Y+2	; 0x02
    fe9c:	7b 81       	ldd	r23, Y+3	; 0x03
    fe9e:	c8 5e       	subi	r28, 0xE8	; 232
    fea0:	d1 40       	sbci	r29, 0x01	; 1
    fea2:	44 83       	std	Z+4, r20	; 0x04
    fea4:	55 83       	std	Z+5, r21	; 0x05
    fea6:	66 83       	std	Z+6, r22	; 0x06
    fea8:	77 83       	std	Z+7, r23	; 0x07
    feaa:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    feae:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    feb0:	80 91 33 25 	lds	r24, 0x2533
    feb4:	90 91 34 25 	lds	r25, 0x2534
    feb8:	6d b7       	in	r22, 0x3d	; 61
    feba:	7e b7       	in	r23, 0x3e	; 62
    febc:	68 5f       	subi	r22, 0xF8	; 248
    febe:	7f 4f       	sbci	r23, 0xFF	; 255
    fec0:	6d bf       	out	0x3d, r22	; 61
    fec2:	7e bf       	out	0x3e, r23	; 62
    fec4:	be 01       	movw	r22, r28
    fec6:	64 54       	subi	r22, 0x44	; 68
    fec8:	7f 4f       	sbci	r23, 0xFF	; 255
    feca:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |               | %12d%% |\n\r"), i_percUsed);
    fece:	8d b7       	in	r24, 0x3d	; 61
    fed0:	9e b7       	in	r25, 0x3e	; 62
    fed2:	08 97       	sbiw	r24, 0x08	; 8
    fed4:	8d bf       	out	0x3d, r24	; 61
    fed6:	9e bf       	out	0x3e, r25	; 62
    fed8:	ed b7       	in	r30, 0x3d	; 61
    feda:	fe b7       	in	r31, 0x3e	; 62
    fedc:	31 96       	adiw	r30, 0x01	; 1
    fede:	2c eb       	ldi	r18, 0xBC	; 188
    fee0:	30 e0       	ldi	r19, 0x00	; 0
    fee2:	2c 0f       	add	r18, r28
    fee4:	3d 1f       	adc	r19, r29
    fee6:	ad b7       	in	r26, 0x3d	; 61
    fee8:	be b7       	in	r27, 0x3e	; 62
    feea:	11 96       	adiw	r26, 0x01	; 1
    feec:	2d 93       	st	X+, r18
    feee:	3c 93       	st	X, r19
    fef0:	12 97       	sbiw	r26, 0x02	; 2
    fef2:	8b ef       	ldi	r24, 0xFB	; 251
    fef4:	99 e0       	ldi	r25, 0x09	; 9
    fef6:	82 83       	std	Z+2, r24	; 0x02
    fef8:	93 83       	std	Z+3, r25	; 0x03
    fefa:	e4 82       	std	Z+4, r14	; 0x04
    fefc:	f5 82       	std	Z+5, r15	; 0x05
    fefe:	06 83       	std	Z+6, r16	; 0x06
    ff00:	17 83       	std	Z+7, r17	; 0x07
    ff02:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    ff06:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ff08:	80 91 33 25 	lds	r24, 0x2533
    ff0c:	90 91 34 25 	lds	r25, 0x2534
    ff10:	6d b7       	in	r22, 0x3d	; 61
    ff12:	7e b7       	in	r23, 0x3e	; 62
    ff14:	68 5f       	subi	r22, 0xF8	; 248
    ff16:	7f 4f       	sbci	r23, 0xFF	; 255
    ff18:	6d bf       	out	0x3d, r22	; 61
    ff1a:	7e bf       	out	0x3e, r23	; 62
    ff1c:	be 01       	movw	r22, r28
    ff1e:	64 54       	subi	r22, 0x44	; 68
    ff20:	7f 4f       	sbci	r23, 0xFF	; 255
    ff22:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
    ff26:	00 d0       	rcall	.+0      	; 0xff28 <arb_console+0xd28>
    ff28:	0f 92       	push	r0
    ff2a:	ec eb       	ldi	r30, 0xBC	; 188
    ff2c:	f0 e0       	ldi	r31, 0x00	; 0
    ff2e:	ec 0f       	add	r30, r28
    ff30:	fd 1f       	adc	r31, r29
    ff32:	ad b7       	in	r26, 0x3d	; 61
    ff34:	be b7       	in	r27, 0x3e	; 62
    ff36:	11 96       	adiw	r26, 0x01	; 1
    ff38:	ed 93       	st	X+, r30
    ff3a:	fc 93       	st	X, r31
    ff3c:	12 97       	sbiw	r26, 0x02	; 2
    ff3e:	8d ec       	ldi	r24, 0xCD	; 205
    ff40:	99 e0       	ldi	r25, 0x09	; 9
    ff42:	13 96       	adiw	r26, 0x03	; 3
    ff44:	8d 93       	st	X+, r24
    ff46:	9c 93       	st	X, r25
    ff48:	14 97       	sbiw	r26, 0x04	; 4
    ff4a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    ff4e:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ff50:	80 91 33 25 	lds	r24, 0x2533
    ff54:	90 91 34 25 	lds	r25, 0x2534
    ff58:	0f 90       	pop	r0
    ff5a:	0f 90       	pop	r0
    ff5c:	0f 90       	pop	r0
    ff5e:	0f 90       	pop	r0
    ff60:	be 01       	movw	r22, r28
    ff62:	64 54       	subi	r22, 0x44	; 68
    ff64:	7f 4f       	sbci	r23, 0xFF	; 255
    ff66:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Free RAM |               | %13d |\n\r"), i_freeSize);
    ff6a:	2d b7       	in	r18, 0x3d	; 61
    ff6c:	3e b7       	in	r19, 0x3e	; 62
    ff6e:	28 50       	subi	r18, 0x08	; 8
    ff70:	30 40       	sbci	r19, 0x00	; 0
    ff72:	2d bf       	out	0x3d, r18	; 61
    ff74:	3e bf       	out	0x3e, r19	; 62
    ff76:	ed b7       	in	r30, 0x3d	; 61
    ff78:	fe b7       	in	r31, 0x3e	; 62
    ff7a:	31 96       	adiw	r30, 0x01	; 1
    ff7c:	2c eb       	ldi	r18, 0xBC	; 188
    ff7e:	30 e0       	ldi	r19, 0x00	; 0
    ff80:	2c 0f       	add	r18, r28
    ff82:	3d 1f       	adc	r19, r29
    ff84:	ad b7       	in	r26, 0x3d	; 61
    ff86:	be b7       	in	r27, 0x3e	; 62
    ff88:	11 96       	adiw	r26, 0x01	; 1
    ff8a:	2d 93       	st	X+, r18
    ff8c:	3c 93       	st	X, r19
    ff8e:	12 97       	sbiw	r26, 0x02	; 2
    ff90:	88 ea       	ldi	r24, 0xA8	; 168
    ff92:	99 e0       	ldi	r25, 0x09	; 9
    ff94:	82 83       	std	Z+2, r24	; 0x02
    ff96:	93 83       	std	Z+3, r25	; 0x03
    ff98:	a4 82       	std	Z+4, r10	; 0x04
    ff9a:	b5 82       	std	Z+5, r11	; 0x05
    ff9c:	c6 82       	std	Z+6, r12	; 0x06
    ff9e:	d7 82       	std	Z+7, r13	; 0x07
    ffa0:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
    ffa4:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
    ffa6:	80 91 33 25 	lds	r24, 0x2533
    ffaa:	90 91 34 25 	lds	r25, 0x2534
    ffae:	6d b7       	in	r22, 0x3d	; 61
    ffb0:	7e b7       	in	r23, 0x3e	; 62
    ffb2:	68 5f       	subi	r22, 0xF8	; 248
    ffb4:	7f 4f       	sbci	r23, 0xFF	; 255
    ffb6:	6d bf       	out	0x3d, r22	; 61
    ffb8:	7e bf       	out	0x3e, r23	; 62
    ffba:	be 01       	movw	r22, r28
    ffbc:	64 54       	subi	r22, 0x44	; 68
    ffbe:	7f 4f       	sbci	r23, 0xFF	; 255
    ffc0:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|         |               | %12d%% |\n\r"), (100 - i_percUsed));
    ffc4:	8d b7       	in	r24, 0x3d	; 61
    ffc6:	9e b7       	in	r25, 0x3e	; 62
    ffc8:	08 97       	sbiw	r24, 0x08	; 8
    ffca:	8d bf       	out	0x3d, r24	; 61
    ffcc:	9e bf       	out	0x3e, r25	; 62
    ffce:	ed b7       	in	r30, 0x3d	; 61
    ffd0:	fe b7       	in	r31, 0x3e	; 62
    ffd2:	31 96       	adiw	r30, 0x01	; 1
    ffd4:	2c eb       	ldi	r18, 0xBC	; 188
    ffd6:	30 e0       	ldi	r19, 0x00	; 0
    ffd8:	2c 0f       	add	r18, r28
    ffda:	3d 1f       	adc	r19, r29
    ffdc:	ad b7       	in	r26, 0x3d	; 61
    ffde:	be b7       	in	r27, 0x3e	; 62
    ffe0:	11 96       	adiw	r26, 0x01	; 1
    ffe2:	2d 93       	st	X+, r18
    ffe4:	3c 93       	st	X, r19
    ffe6:	12 97       	sbiw	r26, 0x02	; 2
    ffe8:	81 e8       	ldi	r24, 0x81	; 129
    ffea:	99 e0       	ldi	r25, 0x09	; 9
    ffec:	82 83       	std	Z+2, r24	; 0x02
    ffee:	93 83       	std	Z+3, r25	; 0x03
    fff0:	6e 18       	sub	r6, r14
    fff2:	7f 08       	sbc	r7, r15
    fff4:	80 0a       	sbc	r8, r16
    fff6:	91 0a       	sbc	r9, r17
    fff8:	64 82       	std	Z+4, r6	; 0x04
    fffa:	75 82       	std	Z+5, r7	; 0x05
    fffc:	86 82       	std	Z+6, r8	; 0x06
    fffe:	97 82       	std	Z+7, r9	; 0x07
   10000:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   10004:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   10006:	80 91 33 25 	lds	r24, 0x2533
   1000a:	90 91 34 25 	lds	r25, 0x2534
   1000e:	6d b7       	in	r22, 0x3d	; 61
   10010:	7e b7       	in	r23, 0x3e	; 62
   10012:	68 5f       	subi	r22, 0xF8	; 248
   10014:	7f 4f       	sbci	r23, 0xFF	; 255
   10016:	6d bf       	out	0x3d, r22	; 61
   10018:	7e bf       	out	0x3e, r23	; 62
   1001a:	be 01       	movw	r22, r28
   1001c:	64 54       	subi	r22, 0x44	; 68
   1001e:	7f 4f       	sbci	r23, 0xFF	; 255
   10020:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'---------------'---------------'\n\r"));
   10024:	00 d0       	rcall	.+0      	; 0x10026 <arb_console+0xe26>
   10026:	0f 92       	push	r0
   10028:	ec eb       	ldi	r30, 0xBC	; 188
   1002a:	f0 e0       	ldi	r31, 0x00	; 0
   1002c:	ec 0f       	add	r30, r28
   1002e:	fd 1f       	adc	r31, r29
   10030:	ad b7       	in	r26, 0x3d	; 61
   10032:	be b7       	in	r27, 0x3e	; 62
   10034:	11 96       	adiw	r26, 0x01	; 1
   10036:	ed 93       	st	X+, r30
   10038:	fc 93       	st	X, r31
   1003a:	12 97       	sbiw	r26, 0x02	; 2
   1003c:	83 e5       	ldi	r24, 0x53	; 83
   1003e:	99 e0       	ldi	r25, 0x09	; 9
   10040:	13 96       	adiw	r26, 0x03	; 3
   10042:	8d 93       	st	X+, r24
   10044:	9c 93       	st	X, r25
   10046:	14 97       	sbiw	r26, 0x04	; 4
   10048:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1004c:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   1004e:	80 91 33 25 	lds	r24, 0x2533
   10052:	90 91 34 25 	lds	r25, 0x2534
   10056:	0f 90       	pop	r0
   10058:	0f 90       	pop	r0
   1005a:	0f 90       	pop	r0
   1005c:	0f 90       	pop	r0
   1005e:	be 01       	movw	r22, r28
   10060:	64 54       	subi	r22, 0x44	; 68
   10062:	7f 4f       	sbci	r23, 0xFF	; 255
   10064:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Sys Load after 1 minute  | %12.1f%% |\n\r"), ((float)arb_getOneMinLoadingEst()*100.0f) / ARB_LOAD_EST_ONE);
   10068:	0e 94 b2 8e 	call	0x11d64	; 0x11d64 <arb_getOneMinLoadingEst>
   1006c:	0d b7       	in	r16, 0x3d	; 61
   1006e:	1e b7       	in	r17, 0x3e	; 62
   10070:	08 50       	subi	r16, 0x08	; 8
   10072:	10 40       	sbci	r17, 0x00	; 0
   10074:	0d bf       	out	0x3d, r16	; 61
   10076:	1e bf       	out	0x3e, r17	; 62
   10078:	0f 5f       	subi	r16, 0xFF	; 255
   1007a:	1f 4f       	sbci	r17, 0xFF	; 255
   1007c:	ec eb       	ldi	r30, 0xBC	; 188
   1007e:	f0 e0       	ldi	r31, 0x00	; 0
   10080:	ec 0f       	add	r30, r28
   10082:	fd 1f       	adc	r31, r29
   10084:	ad b7       	in	r26, 0x3d	; 61
   10086:	be b7       	in	r27, 0x3e	; 62
   10088:	11 96       	adiw	r26, 0x01	; 1
   1008a:	ed 93       	st	X+, r30
   1008c:	fc 93       	st	X, r31
   1008e:	12 97       	sbiw	r26, 0x02	; 2
   10090:	2a e2       	ldi	r18, 0x2A	; 42
   10092:	39 e0       	ldi	r19, 0x09	; 9
   10094:	d8 01       	movw	r26, r16
   10096:	12 96       	adiw	r26, 0x02	; 2
   10098:	2d 93       	st	X+, r18
   1009a:	3c 93       	st	X, r19
   1009c:	13 97       	sbiw	r26, 0x03	; 3
   1009e:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
   100a2:	20 e0       	ldi	r18, 0x00	; 0
   100a4:	30 e0       	ldi	r19, 0x00	; 0
   100a6:	48 ec       	ldi	r20, 0xC8	; 200
   100a8:	52 e4       	ldi	r21, 0x42	; 66
   100aa:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
   100ae:	20 e0       	ldi	r18, 0x00	; 0
   100b0:	30 e0       	ldi	r19, 0x00	; 0
   100b2:	40 e0       	ldi	r20, 0x00	; 0
   100b4:	58 e3       	ldi	r21, 0x38	; 56
   100b6:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
   100ba:	f8 01       	movw	r30, r16
   100bc:	64 83       	std	Z+4, r22	; 0x04
   100be:	75 83       	std	Z+5, r23	; 0x05
   100c0:	86 83       	std	Z+6, r24	; 0x06
   100c2:	97 83       	std	Z+7, r25	; 0x07
   100c4:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   100c8:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   100ca:	80 91 33 25 	lds	r24, 0x2533
   100ce:	90 91 34 25 	lds	r25, 0x2534
   100d2:	0d b7       	in	r16, 0x3d	; 61
   100d4:	1e b7       	in	r17, 0x3e	; 62
   100d6:	08 5f       	subi	r16, 0xF8	; 248
   100d8:	1f 4f       	sbci	r17, 0xFF	; 255
   100da:	0d bf       	out	0x3d, r16	; 61
   100dc:	1e bf       	out	0x3e, r17	; 62
   100de:	be 01       	movw	r22, r28
   100e0:	64 54       	subi	r22, 0x44	; 68
   100e2:	7f 4f       	sbci	r23, 0xFF	; 255
   100e4:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'-------------------------'---------------'\n\r"));
   100e8:	00 d0       	rcall	.+0      	; 0x100ea <arb_console+0xeea>
   100ea:	0f 92       	push	r0
   100ec:	ec eb       	ldi	r30, 0xBC	; 188
   100ee:	f0 e0       	ldi	r31, 0x00	; 0
   100f0:	ec 0f       	add	r30, r28
   100f2:	fd 1f       	adc	r31, r29
   100f4:	ad b7       	in	r26, 0x3d	; 61
   100f6:	be b7       	in	r27, 0x3e	; 62
   100f8:	11 96       	adiw	r26, 0x01	; 1
   100fa:	ed 93       	st	X+, r30
   100fc:	fc 93       	st	X, r31
   100fe:	12 97       	sbiw	r26, 0x02	; 2
   10100:	8c ef       	ldi	r24, 0xFC	; 252
   10102:	98 e0       	ldi	r25, 0x08	; 8
   10104:	13 96       	adiw	r26, 0x03	; 3
   10106:	8d 93       	st	X+, r24
   10108:	9c 93       	st	X, r25
   1010a:	14 97       	sbiw	r26, 0x04	; 4
   1010c:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   10110:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   10112:	80 91 33 25 	lds	r24, 0x2533
   10116:	90 91 34 25 	lds	r25, 0x2534
   1011a:	0f 90       	pop	r0
   1011c:	0f 90       	pop	r0
   1011e:	0f 90       	pop	r0
   10120:	0f 90       	pop	r0
   10122:	be 01       	movw	r22, r28
   10124:	64 54       	subi	r22, 0x44	; 68
   10126:	7f 4f       	sbci	r23, 0xFF	; 255
   10128:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|Sys Load after 5 minutes | %12.1f%% |\n\r"), ((float)arb_getFiveMinLoadingEst()*100.0f) / ARB_LOAD_EST_ONE);
   1012c:	0e 94 bb 8e 	call	0x11d76	; 0x11d76 <arb_getFiveMinLoadingEst>
   10130:	0d b7       	in	r16, 0x3d	; 61
   10132:	1e b7       	in	r17, 0x3e	; 62
   10134:	08 50       	subi	r16, 0x08	; 8
   10136:	10 40       	sbci	r17, 0x00	; 0
   10138:	0d bf       	out	0x3d, r16	; 61
   1013a:	1e bf       	out	0x3e, r17	; 62
   1013c:	0f 5f       	subi	r16, 0xFF	; 255
   1013e:	1f 4f       	sbci	r17, 0xFF	; 255
   10140:	ec eb       	ldi	r30, 0xBC	; 188
   10142:	f0 e0       	ldi	r31, 0x00	; 0
   10144:	ec 0f       	add	r30, r28
   10146:	fd 1f       	adc	r31, r29
   10148:	ad b7       	in	r26, 0x3d	; 61
   1014a:	be b7       	in	r27, 0x3e	; 62
   1014c:	11 96       	adiw	r26, 0x01	; 1
   1014e:	ed 93       	st	X+, r30
   10150:	fc 93       	st	X, r31
   10152:	12 97       	sbiw	r26, 0x02	; 2
   10154:	23 ed       	ldi	r18, 0xD3	; 211
   10156:	38 e0       	ldi	r19, 0x08	; 8
   10158:	d8 01       	movw	r26, r16
   1015a:	12 96       	adiw	r26, 0x02	; 2
   1015c:	2d 93       	st	X+, r18
   1015e:	3c 93       	st	X, r19
   10160:	13 97       	sbiw	r26, 0x03	; 3
   10162:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
   10166:	20 e0       	ldi	r18, 0x00	; 0
   10168:	30 e0       	ldi	r19, 0x00	; 0
   1016a:	48 ec       	ldi	r20, 0xC8	; 200
   1016c:	52 e4       	ldi	r21, 0x42	; 66
   1016e:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
   10172:	20 e0       	ldi	r18, 0x00	; 0
   10174:	30 e0       	ldi	r19, 0x00	; 0
   10176:	40 e0       	ldi	r20, 0x00	; 0
   10178:	58 e3       	ldi	r21, 0x38	; 56
   1017a:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
   1017e:	f8 01       	movw	r30, r16
   10180:	64 83       	std	Z+4, r22	; 0x04
   10182:	75 83       	std	Z+5, r23	; 0x05
   10184:	86 83       	std	Z+6, r24	; 0x06
   10186:	97 83       	std	Z+7, r25	; 0x07
   10188:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1018c:	ac 01       	movw	r20, r24
   arb_write( gt_conObject.t_consoleHndl,
   1018e:	80 91 33 25 	lds	r24, 0x2533
   10192:	90 91 34 25 	lds	r25, 0x2534
   10196:	0d b7       	in	r16, 0x3d	; 61
   10198:	1e b7       	in	r17, 0x3e	; 62
   1019a:	08 5f       	subi	r16, 0xF8	; 248
   1019c:	1f 4f       	sbci	r17, 0xFF	; 255
   1019e:	0d bf       	out	0x3d, r16	; 61
   101a0:	1e bf       	out	0x3e, r17	; 62
   101a2:	be 01       	movw	r22, r28
   101a4:	64 54       	subi	r22, 0x44	; 68
   101a6:	7f 4f       	sbci	r23, 0xFF	; 255
   101a8:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'-------------------------'---------------'\n\r"));
   101ac:	00 d0       	rcall	.+0      	; 0x101ae <arb_console+0xfae>
   101ae:	0f 92       	push	r0
   101b0:	ec eb       	ldi	r30, 0xBC	; 188
   101b2:	f0 e0       	ldi	r31, 0x00	; 0
   101b4:	ec 0f       	add	r30, r28
   101b6:	fd 1f       	adc	r31, r29
   101b8:	ad b7       	in	r26, 0x3d	; 61
   101ba:	be b7       	in	r27, 0x3e	; 62
   101bc:	11 96       	adiw	r26, 0x01	; 1
   101be:	ed 93       	st	X+, r30
   101c0:	fc 93       	st	X, r31
   101c2:	12 97       	sbiw	r26, 0x02	; 2
   101c4:	85 ea       	ldi	r24, 0xA5	; 165
   101c6:	98 e0       	ldi	r25, 0x08	; 8
   101c8:	3f c9       	rjmp	.-3458   	; 0xf448 <arb_console+0x248>
         /*------------------------------------------------------------------*
          * Display the memory footprint of the system.
          *------------------------------------------------------------------*/
         arb_displaySystemStatistics( ac_buff);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("ls")) == 0)
   101ca:	ce 01       	movw	r24, r28
   101cc:	85 5b       	subi	r24, 0xB5	; 181
   101ce:	9f 4f       	sbci	r25, 0xFF	; 255
   101d0:	61 e3       	ldi	r22, 0x31	; 49
   101d2:	72 e0       	ldi	r23, 0x02	; 2
   101d4:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   101d8:	89 2b       	or	r24, r25
   101da:	71 f4       	brne	.+28     	; 0x101f8 <arb_console+0xff8>
   101dc:	c5 54       	subi	r28, 0x45	; 69
   101de:	df 4f       	sbci	r29, 0xFF	; 255
   101e0:	88 81       	ld	r24, Y
   101e2:	cb 5b       	subi	r28, 0xBB	; 187
   101e4:	d0 40       	sbci	r29, 0x00	; 0
   101e6:	81 30       	cpi	r24, 0x01	; 1
   101e8:	39 f4       	brne	.+14     	; 0x101f8 <arb_console+0xff8>
      && (t_tokHndl.c_numTokens == 1))
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   101ea:	80 91 35 25 	lds	r24, 0x2535
   101ee:	90 91 36 25 	lds	r25, 0x2536
   101f2:	65 e0       	ldi	r22, 0x05	; 5
   101f4:	70 e0       	ldi	r23, 0x00	; 0
   101f6:	22 c0       	rjmp	.+68     	; 0x1023c <arb_console+0x103c>
                    SD_LS,
                    0);
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("rm")) == 0)
   101f8:	ce 01       	movw	r24, r28
   101fa:	85 5b       	subi	r24, 0xB5	; 181
   101fc:	9f 4f       	sbci	r25, 0xFF	; 255
   101fe:	6e e2       	ldi	r22, 0x2E	; 46
   10200:	72 e0       	ldi	r23, 0x02	; 2
   10202:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   10206:	89 2b       	or	r24, r25
   10208:	39 f5       	brne	.+78     	; 0x10258 <arb_console+0x1058>
   1020a:	c5 54       	subi	r28, 0x45	; 69
   1020c:	df 4f       	sbci	r29, 0xFF	; 255
   1020e:	88 81       	ld	r24, Y
   10210:	cb 5b       	subi	r28, 0xBB	; 187
   10212:	d0 40       	sbci	r29, 0x00	; 0
   10214:	82 30       	cpi	r24, 0x02	; 2
   10216:	01 f5       	brne	.+64     	; 0x10258 <arb_console+0x1058>
      && (t_tokHndl.c_numTokens == 2))
      {
         if( strcasecmp_P( (char *)t_tokHndl.ac_tok[1], PSTR("-r")) == 0)
   10218:	c0 51       	subi	r28, 0x10	; 16
   1021a:	de 4f       	sbci	r29, 0xFE	; 254
   1021c:	88 81       	ld	r24, Y
   1021e:	99 81       	ldd	r25, Y+1	; 0x01
   10220:	c0 5f       	subi	r28, 0xF0	; 240
   10222:	d1 40       	sbci	r29, 0x01	; 1
   10224:	6b e2       	ldi	r22, 0x2B	; 43
   10226:	72 e0       	ldi	r23, 0x02	; 2
   10228:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   1022c:	89 2b       	or	r24, r25
   1022e:	69 f4       	brne	.+26     	; 0x1024a <arb_console+0x104a>
         {
            /*---------------------------------------------------------------*
             * Remove all the files within, and the current working directory
             * itself.
             *---------------------------------------------------------------*/
            arb_ioctl( gt_conObject.t_sdHndl,
   10230:	80 91 35 25 	lds	r24, 0x2535
   10234:	90 91 36 25 	lds	r25, 0x2536
   10238:	61 e0       	ldi	r22, 0x01	; 1
   1023a:	70 e0       	ldi	r23, 0x00	; 0
   1023c:	20 e0       	ldi	r18, 0x00	; 0
   1023e:	30 e0       	ldi	r19, 0x00	; 0
   10240:	40 e0       	ldi	r20, 0x00	; 0
   10242:	50 e0       	ldi	r21, 0x00	; 0
   10244:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
   10248:	c3 c1       	rjmp	.+902    	; 0x105d0 <arb_console+0x13d0>
         else
         {
            /*---------------------------------------------------------------*
             * Remove the file specified by 't_tokHndl.ac_tok[1]'.
             *---------------------------------------------------------------*/
            arb_ioctl( gt_conObject.t_sdHndl,
   1024a:	80 91 35 25 	lds	r24, 0x2535
   1024e:	90 91 36 25 	lds	r25, 0x2536
   10252:	68 e0       	ldi	r22, 0x08	; 8
   10254:	70 e0       	ldi	r23, 0x00	; 0
   10256:	2d c0       	rjmp	.+90     	; 0x102b2 <arb_console+0x10b2>
                       SD_RM,
                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
         }

      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("rmdir")) == 0)
   10258:	ce 01       	movw	r24, r28
   1025a:	85 5b       	subi	r24, 0xB5	; 181
   1025c:	9f 4f       	sbci	r25, 0xFF	; 255
   1025e:	65 e2       	ldi	r22, 0x25	; 37
   10260:	72 e0       	ldi	r23, 0x02	; 2
   10262:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   10266:	89 2b       	or	r24, r25
   10268:	71 f4       	brne	.+28     	; 0x10286 <arb_console+0x1086>
   1026a:	c5 54       	subi	r28, 0x45	; 69
   1026c:	df 4f       	sbci	r29, 0xFF	; 255
   1026e:	88 81       	ld	r24, Y
   10270:	cb 5b       	subi	r28, 0xBB	; 187
   10272:	d0 40       	sbci	r29, 0x00	; 0
   10274:	82 30       	cpi	r24, 0x02	; 2
   10276:	39 f4       	brne	.+14     	; 0x10286 <arb_console+0x1086>
      && (t_tokHndl.c_numTokens == 2))
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   10278:	80 91 35 25 	lds	r24, 0x2535
   1027c:	90 91 36 25 	lds	r25, 0x2536
   10280:	67 e0       	ldi	r22, 0x07	; 7
   10282:	70 e0       	ldi	r23, 0x00	; 0
   10284:	16 c0       	rjmp	.+44     	; 0x102b2 <arb_console+0x10b2>
                    SD_RMDIR,
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("mkdir")) == 0)
   10286:	ce 01       	movw	r24, r28
   10288:	85 5b       	subi	r24, 0xB5	; 181
   1028a:	9f 4f       	sbci	r25, 0xFF	; 255
   1028c:	6f e1       	ldi	r22, 0x1F	; 31
   1028e:	72 e0       	ldi	r23, 0x02	; 2
   10290:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   10294:	89 2b       	or	r24, r25
   10296:	b1 f4       	brne	.+44     	; 0x102c4 <arb_console+0x10c4>
   10298:	c5 54       	subi	r28, 0x45	; 69
   1029a:	df 4f       	sbci	r29, 0xFF	; 255
   1029c:	88 81       	ld	r24, Y
   1029e:	cb 5b       	subi	r28, 0xBB	; 187
   102a0:	d0 40       	sbci	r29, 0x00	; 0
   102a2:	82 30       	cpi	r24, 0x02	; 2
   102a4:	79 f4       	brne	.+30     	; 0x102c4 <arb_console+0x10c4>
      && (t_tokHndl.c_numTokens == 2))
      {
         arb_ioctl( gt_conObject.t_sdHndl,
   102a6:	80 91 35 25 	lds	r24, 0x2535
   102aa:	90 91 36 25 	lds	r25, 0x2536
   102ae:	66 e0       	ldi	r22, 0x06	; 6
   102b0:	70 e0       	ldi	r23, 0x00	; 0
   102b2:	ce 50       	subi	r28, 0x0E	; 14
   102b4:	de 4f       	sbci	r29, 0xFE	; 254
   102b6:	28 81       	ld	r18, Y
   102b8:	39 81       	ldd	r19, Y+1	; 0x01
   102ba:	4a 81       	ldd	r20, Y+2	; 0x02
   102bc:	5b 81       	ldd	r21, Y+3	; 0x03
   102be:	c2 5f       	subi	r28, 0xF2	; 242
   102c0:	d1 40       	sbci	r29, 0x01	; 1
   102c2:	c0 cf       	rjmp	.-128    	; 0x10244 <arb_console+0x1044>
                    SD_MKDIR,
                    (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("cd")) == 0)
   102c4:	ce 01       	movw	r24, r28
   102c6:	85 5b       	subi	r24, 0xB5	; 181
   102c8:	9f 4f       	sbci	r25, 0xFF	; 255
   102ca:	6c e1       	ldi	r22, 0x1C	; 28
   102cc:	72 e0       	ldi	r23, 0x02	; 2
   102ce:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   102d2:	89 2b       	or	r24, r25
   102d4:	09 f0       	breq	.+2      	; 0x102d8 <arb_console+0x10d8>
   102d6:	4d c0       	rjmp	.+154    	; 0x10372 <arb_console+0x1172>
   102d8:	c5 54       	subi	r28, 0x45	; 69
   102da:	df 4f       	sbci	r29, 0xFF	; 255
   102dc:	88 81       	ld	r24, Y
   102de:	cb 5b       	subi	r28, 0xBB	; 187
   102e0:	d0 40       	sbci	r29, 0x00	; 0
   102e2:	82 30       	cpi	r24, 0x02	; 2
   102e4:	09 f0       	breq	.+2      	; 0x102e8 <arb_console+0x10e8>
   102e6:	45 c0       	rjmp	.+138    	; 0x10372 <arb_console+0x1172>
      && (t_tokHndl.c_numTokens == 2))
      {
         t_sdError t_err;

         t_err = (t_sdError)arb_ioctl( gt_conObject.t_sdHndl,
   102e8:	80 91 35 25 	lds	r24, 0x2535
   102ec:	90 91 36 25 	lds	r25, 0x2536
   102f0:	69 e0       	ldi	r22, 0x09	; 9
   102f2:	70 e0       	ldi	r23, 0x00	; 0
   102f4:	ce 50       	subi	r28, 0x0E	; 14
   102f6:	de 4f       	sbci	r29, 0xFE	; 254
   102f8:	28 81       	ld	r18, Y
   102fa:	39 81       	ldd	r19, Y+1	; 0x01
   102fc:	4a 81       	ldd	r20, Y+2	; 0x02
   102fe:	5b 81       	ldd	r21, Y+3	; 0x03
   10300:	c2 5f       	subi	r28, 0xF2	; 242
   10302:	d1 40       	sbci	r29, 0x01	; 1
   10304:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));

         /*------------------------------------------------------------------*
          * If directory change accepted, update the prompt.
          *------------------------------------------------------------------*/
         if( t_err == SD_PASSED)
   10308:	66 23       	and	r22, r22
   1030a:	09 f0       	breq	.+2      	; 0x1030e <arb_console+0x110e>
   1030c:	61 c1       	rjmp	.+706    	; 0x105d0 <arb_console+0x13d0>
         {
            arb_ioctl( gt_conObject.t_consoleHndl,
   1030e:	80 91 33 25 	lds	r24, 0x2533
   10312:	90 91 34 25 	lds	r25, 0x2534
   10316:	65 e0       	ldi	r22, 0x05	; 5
   10318:	70 e0       	ldi	r23, 0x00	; 0
   1031a:	ce 50       	subi	r28, 0x0E	; 14
   1031c:	de 4f       	sbci	r29, 0xFE	; 254
   1031e:	28 81       	ld	r18, Y
   10320:	39 81       	ldd	r19, Y+1	; 0x01
   10322:	4a 81       	ldd	r20, Y+2	; 0x02
   10324:	5b 81       	ldd	r21, Y+3	; 0x03
   10326:	c2 5f       	subi	r28, 0xF2	; 242
   10328:	d1 40       	sbci	r29, 0x01	; 1
   1032a:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                       CONSOLE_SET_PROMPT,
                       (int32_t)((uint16_t)&t_tokHndl.ac_tok[1]));

            if( strcasecmp_P( (char *)t_tokHndl.ac_tok[1], PSTR("/")) == 0)
   1032e:	c0 51       	subi	r28, 0x10	; 16
   10330:	de 4f       	sbci	r29, 0xFE	; 254
   10332:	88 81       	ld	r24, Y
   10334:	99 81       	ldd	r25, Y+1	; 0x01
   10336:	c0 5f       	subi	r28, 0xF0	; 240
   10338:	d1 40       	sbci	r29, 0x01	; 1
   1033a:	6a e1       	ldi	r22, 0x1A	; 26
   1033c:	72 e0       	ldi	r23, 0x02	; 2
   1033e:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   10342:	89 2b       	or	r24, r25
   10344:	59 f4       	brne	.+22     	; 0x1035c <arb_console+0x115c>
            {
               arb_ioctl( gt_conObject.t_consoleHndl,
   10346:	80 91 33 25 	lds	r24, 0x2533
   1034a:	90 91 34 25 	lds	r25, 0x2534
   1034e:	68 e0       	ldi	r22, 0x08	; 8
   10350:	70 e0       	ldi	r23, 0x00	; 0
   10352:	22 e3       	ldi	r18, 0x32	; 50
   10354:	30 e0       	ldi	r19, 0x00	; 0
   10356:	40 e0       	ldi	r20, 0x00	; 0
   10358:	50 e0       	ldi	r21, 0x00	; 0
   1035a:	74 cf       	rjmp	.-280    	; 0x10244 <arb_console+0x1044>
                          CONSOLE_SET_PROMPT_COLOR,
                          CONSOLE_GREEN);
            }
            else
            {
               arb_ioctl( gt_conObject.t_consoleHndl,
   1035c:	80 91 33 25 	lds	r24, 0x2533
   10360:	90 91 34 25 	lds	r25, 0x2534
   10364:	68 e0       	ldi	r22, 0x08	; 8
   10366:	70 e0       	ldi	r23, 0x00	; 0
   10368:	21 e3       	ldi	r18, 0x31	; 49
   1036a:	30 e0       	ldi	r19, 0x00	; 0
   1036c:	40 e0       	ldi	r20, 0x00	; 0
   1036e:	50 e0       	ldi	r21, 0x00	; 0
   10370:	69 cf       	rjmp	.-302    	; 0x10244 <arb_console+0x1044>
                          CONSOLE_SET_PROMPT_COLOR,
                          CONSOLE_RED);
            }
         }/*End if( t_err == SD_PASSED)*/
      }
      else if( (strcasecmp_P( (char *)t_tokHndl.ac_tok[0], PSTR("head")) == 0)
   10372:	ce 01       	movw	r24, r28
   10374:	85 5b       	subi	r24, 0xB5	; 181
   10376:	9f 4f       	sbci	r25, 0xFF	; 255
   10378:	65 e1       	ldi	r22, 0x15	; 21
   1037a:	72 e0       	ldi	r23, 0x02	; 2
   1037c:	0e 94 c0 b7 	call	0x16f80	; 0x16f80 <strcasecmp_P>
   10380:	89 2b       	or	r24, r25
   10382:	09 f0       	breq	.+2      	; 0x10386 <arb_console+0x1186>
   10384:	ee c0       	rjmp	.+476    	; 0x10562 <arb_console+0x1362>
   10386:	c5 54       	subi	r28, 0x45	; 69
   10388:	df 4f       	sbci	r29, 0xFF	; 255
   1038a:	88 81       	ld	r24, Y
   1038c:	cb 5b       	subi	r28, 0xBB	; 187
   1038e:	d0 40       	sbci	r29, 0x00	; 0
   10390:	82 30       	cpi	r24, 0x02	; 2
   10392:	09 f0       	breq	.+2      	; 0x10396 <arb_console+0x1196>
   10394:	e6 c0       	rjmp	.+460    	; 0x10562 <arb_console+0x1362>
   int16_t s_size;
   uint8_t c_lineCount;
   int32_t i_fileSize;
   char *pc_newLinePos;

   ac_data[20] = '\0';
   10396:	19 8e       	std	Y+25, r1	; 0x19

   pc_devName = arb_getDevName( gt_conObject.t_sdHndl);
   10398:	80 91 35 25 	lds	r24, 0x2535
   1039c:	90 91 36 25 	lds	r25, 0x2536
   103a0:	0e 94 6c 83 	call	0x106d8	; 0x106d8 <arb_getDevName>

   /*------------------------------------------------------------------------*
    * Concatenate the hard drive device name with the file name so that
    * 'arb_device.c' knows where to look.
    *------------------------------------------------------------------------*/
   s_numBytes = sprintf( (char *)pc_buff,
   103a4:	0d b7       	in	r16, 0x3d	; 61
   103a6:	1e b7       	in	r17, 0x3e	; 62
   103a8:	08 50       	subi	r16, 0x08	; 8
   103aa:	10 40       	sbci	r17, 0x00	; 0
   103ac:	0d bf       	out	0x3d, r16	; 61
   103ae:	1e bf       	out	0x3e, r17	; 62
   103b0:	ed b7       	in	r30, 0x3d	; 61
   103b2:	fe b7       	in	r31, 0x3e	; 62
   103b4:	31 96       	adiw	r30, 0x01	; 1
   103b6:	2c eb       	ldi	r18, 0xBC	; 188
   103b8:	e2 2e       	mov	r14, r18
   103ba:	f1 2c       	mov	r15, r1
   103bc:	ec 0e       	add	r14, r28
   103be:	fd 1e       	adc	r15, r29
   103c0:	ad b7       	in	r26, 0x3d	; 61
   103c2:	be b7       	in	r27, 0x3e	; 62
   103c4:	11 96       	adiw	r26, 0x01	; 1
   103c6:	ed 92       	st	X+, r14
   103c8:	fc 92       	st	X, r15
   103ca:	12 97       	sbiw	r26, 0x02	; 2
   103cc:	08 e2       	ldi	r16, 0x28	; 40
   103ce:	11 e2       	ldi	r17, 0x21	; 33
   103d0:	02 83       	std	Z+2, r16	; 0x02
   103d2:	13 83       	std	Z+3, r17	; 0x03
   103d4:	84 83       	std	Z+4, r24	; 0x04
   103d6:	95 83       	std	Z+5, r25	; 0x05
   103d8:	c0 51       	subi	r28, 0x10	; 16
   103da:	de 4f       	sbci	r29, 0xFE	; 254
   103dc:	28 81       	ld	r18, Y
   103de:	39 81       	ldd	r19, Y+1	; 0x01
   103e0:	c0 5f       	subi	r28, 0xF0	; 240
   103e2:	d1 40       	sbci	r29, 0x01	; 1
   103e4:	26 83       	std	Z+6, r18	; 0x06
   103e6:	37 83       	std	Z+7, r19	; 0x07
   103e8:	0e 94 a3 b8 	call	0x17146	; 0x17146 <sprintf>
                          (char *)&pt_tokHndl->ac_tok[1]);

   /*------------------------------------------------------------------------*
    * Open the file for reading
    *------------------------------------------------------------------------*/
   t_fileHndl = arb_open( (char *)pc_buff,
   103ec:	4d b7       	in	r20, 0x3d	; 61
   103ee:	5e b7       	in	r21, 0x3e	; 62
   103f0:	48 5f       	subi	r20, 0xF8	; 248
   103f2:	5f 4f       	sbci	r21, 0xFF	; 255
   103f4:	4d bf       	out	0x3d, r20	; 61
   103f6:	5e bf       	out	0x3e, r21	; 62
   103f8:	c7 01       	movw	r24, r14
   103fa:	61 e0       	ldi	r22, 0x01	; 1
   103fc:	0e 94 67 85 	call	0x10ace	; 0x10ace <arb_open>
   10400:	8b 83       	std	Y+3, r24	; 0x03
   10402:	9c 83       	std	Y+4, r25	; 0x04
                          ARB_O_READ);

   if( t_fileHndl > 0)
   10404:	8b 81       	ldd	r24, Y+3	; 0x03
   10406:	9c 81       	ldd	r25, Y+4	; 0x04
   10408:	18 16       	cp	r1, r24
   1040a:	19 06       	cpc	r1, r25
   1040c:	0c f0       	brlt	.+2      	; 0x10410 <arb_console+0x1210>
   1040e:	e0 c0       	rjmp	.+448    	; 0x105d0 <arb_console+0x13d0>
   {

      i_fileSize = arb_ioctl( t_fileHndl,
   10410:	8b 81       	ldd	r24, Y+3	; 0x03
   10412:	9c 81       	ldd	r25, Y+4	; 0x04
   10414:	6a e0       	ldi	r22, 0x0A	; 10
   10416:	70 e0       	ldi	r23, 0x00	; 0
   10418:	20 e0       	ldi	r18, 0x00	; 0
   1041a:	30 e0       	ldi	r19, 0x00	; 0
   1041c:	40 e0       	ldi	r20, 0x00	; 0
   1041e:	50 e0       	ldi	r21, 0x00	; 0
   10420:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
   10424:	5b 01       	movw	r10, r22
   10426:	6c 01       	movw	r12, r24
   10428:	ff 24       	eor	r15, r15
      {

         /*------------------------------------------------------------------*
          * Read 'PRINTF_NUM_LINES_TO_PRINT' bytes from the file...
          *------------------------------------------------------------------*/
         s_numBytes = arb_read( t_fileHndl,
   1042a:	95 e0       	ldi	r25, 0x05	; 5
   1042c:	69 2e       	mov	r6, r25
   1042e:	71 2c       	mov	r7, r1
   10430:	6c 0e       	add	r6, r28
   10432:	7d 1e       	adc	r7, r29
   10434:	8b 81       	ldd	r24, Y+3	; 0x03
   10436:	9c 81       	ldd	r25, Y+4	; 0x04
   10438:	b3 01       	movw	r22, r6
   1043a:	44 e1       	ldi	r20, 0x14	; 20
   1043c:	50 e0       	ldi	r21, 0x00	; 0
   1043e:	0e 94 fc 82 	call	0x105f8	; 0x105f8 <arb_read>
   10442:	4c 01       	movw	r8, r24
         i_fileSize = i_fileSize - s_numBytes;

         /*------------------------------------------------------------------*
          * Find first occurrence of new line character.
          *------------------------------------------------------------------*/
         pc_newLinePos = strchr( (char *)ac_data, '\n');
   10444:	c3 01       	movw	r24, r6
   10446:	6a e0       	ldi	r22, 0x0A	; 10
   10448:	70 e0       	ldi	r23, 0x00	; 0
   1044a:	0e 94 13 b8 	call	0x17026	; 0x17026 <strchr>
   1044e:	8c 01       	movw	r16, r24

         /*------------------------------------------------------------------*
          * Does the buffer contain a new line?
          *------------------------------------------------------------------*/
         if( pc_newLinePos != NULL) /*Yes*/
   10450:	00 97       	sbiw	r24, 0x00	; 0
   10452:	09 f4       	brne	.+2      	; 0x10456 <arb_console+0x1256>
   10454:	62 c0       	rjmp	.+196    	; 0x1051a <arb_console+0x131a>
         {

            /*---------------------------------------------------------------*
             * Have 'PRINTF_NUM_LINES_TO_PRINT' lines been displayed?
             *---------------------------------------------------------------*/
            c_lineCount++;
   10456:	f3 94       	inc	r15
            if( c_lineCount == PRINTF_NUM_LINES_TO_PRINT) /*Yes*/
   10458:	54 e1       	ldi	r21, 0x14	; 20
   1045a:	f5 16       	cp	r15, r21
   1045c:	09 f0       	breq	.+2      	; 0x10460 <arb_console+0x1260>
   1045e:	5d c0       	rjmp	.+186    	; 0x1051a <arb_console+0x131a>
            {

               /*------------------------------------------------------------*
                * Print all the characters up to and including the new line.
                *------------------------------------------------------------*/
               s_numBytesToNewLine = (int16_t)pc_newLinePos -
   10460:	7c 01       	movw	r14, r24
   10462:	e6 18       	sub	r14, r6
   10464:	f7 08       	sbc	r15, r7
               (int16_t)&ac_data[0];

               if( s_numBytesToNewLine > 0)
   10466:	1e 14       	cp	r1, r14
   10468:	1f 04       	cpc	r1, r15
   1046a:	54 f4       	brge	.+20     	; 0x10480 <arb_console+0x1280>
               {
                  arb_write( gt_conObject.t_consoleHndl,
   1046c:	80 91 33 25 	lds	r24, 0x2533
   10470:	90 91 34 25 	lds	r25, 0x2534
   10474:	a7 01       	movw	r20, r14
   10476:	4f 5f       	subi	r20, 0xFF	; 255
   10478:	5f 4f       	sbci	r21, 0xFF	; 255
   1047a:	b3 01       	movw	r22, r6
   1047c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                             ac_data,
                             s_numBytesToNewLine+1);

               }/*End if( s_numBytes > 0)*/

               s_size = sprintf_P( (char *)pc_buff, PSTR("\r\nPress 'Enter' to resume, 'q' to stop.\n\r"));
   10480:	00 d0       	rcall	.+0      	; 0x10482 <arb_console+0x1282>
   10482:	0f 92       	push	r0
   10484:	ec eb       	ldi	r30, 0xBC	; 188
   10486:	f0 e0       	ldi	r31, 0x00	; 0
   10488:	ec 0f       	add	r30, r28
   1048a:	fd 1f       	adc	r31, r29
   1048c:	ad b7       	in	r26, 0x3d	; 61
   1048e:	be b7       	in	r27, 0x3e	; 62
   10490:	11 96       	adiw	r26, 0x01	; 1
   10492:	ed 93       	st	X+, r30
   10494:	fc 93       	st	X, r31
   10496:	12 97       	sbiw	r26, 0x02	; 2
   10498:	28 e6       	ldi	r18, 0x68	; 104
   1049a:	3b e0       	ldi	r19, 0x0B	; 11
   1049c:	13 96       	adiw	r26, 0x03	; 3
   1049e:	2d 93       	st	X+, r18
   104a0:	3c 93       	st	X, r19
   104a2:	14 97       	sbiw	r26, 0x04	; 4
   104a4:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   104a8:	ac 01       	movw	r20, r24
               arb_write( gt_conObject.t_consoleHndl,
   104aa:	80 91 33 25 	lds	r24, 0x2533
   104ae:	90 91 34 25 	lds	r25, 0x2534
   104b2:	0f 90       	pop	r0
   104b4:	0f 90       	pop	r0
   104b6:	0f 90       	pop	r0
   104b8:	0f 90       	pop	r0
   104ba:	be 01       	movw	r22, r28
   104bc:	64 54       	subi	r22, 0x44	; 68
   104be:	7f 4f       	sbci	r23, 0xFF	; 255
   104c0:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                          s_size);

               /*------------------------------------------------------------*
                * Block until user responds to message.
                *------------------------------------------------------------*/
               arb_ioctl( gt_conObject.t_consoleHndl,
   104c4:	80 91 33 25 	lds	r24, 0x2533
   104c8:	90 91 34 25 	lds	r25, 0x2534
   104cc:	63 e0       	ldi	r22, 0x03	; 3
   104ce:	70 e0       	ldi	r23, 0x00	; 0
   104d0:	c4 51       	subi	r28, 0x14	; 20
   104d2:	de 4f       	sbci	r29, 0xFE	; 254
   104d4:	28 81       	ld	r18, Y
   104d6:	39 81       	ldd	r19, Y+1	; 0x01
   104d8:	4a 81       	ldd	r20, Y+2	; 0x02
   104da:	5b 81       	ldd	r21, Y+3	; 0x03
   104dc:	cc 5e       	subi	r28, 0xEC	; 236
   104de:	d1 40       	sbci	r29, 0x01	; 1
   104e0:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
                          (uint32_t)((uint16_t)pt_tokHndl));

               /*------------------------------------------------------------*
                * Quit reading the file?
                *------------------------------------------------------------*/
               if( strcasecmp( (char *)&pt_tokHndl[0], "q") == 0) /*Yes*/
   104e4:	ce 01       	movw	r24, r28
   104e6:	85 5b       	subi	r24, 0xB5	; 181
   104e8:	9f 4f       	sbci	r25, 0xFF	; 255
   104ea:	6e e2       	ldi	r22, 0x2E	; 46
   104ec:	71 e2       	ldi	r23, 0x21	; 33
   104ee:	0e 94 00 b8 	call	0x17000	; 0x17000 <strcasecmp>
   104f2:	89 2b       	or	r24, r25
   104f4:	89 f1       	breq	.+98     	; 0x10558 <arb_console+0x1358>

               /*------------------------------------------------------------*
                * Print the rest of the data in the buffer that occurred after
                * the position of the new line character.
                *------------------------------------------------------------*/
               s_numBytes = s_numBytes - (s_numBytesToNewLine + 1);
   104f6:	a7 01       	movw	r20, r14
   104f8:	40 95       	com	r20
   104fa:	50 95       	com	r21
   104fc:	48 0d       	add	r20, r8
   104fe:	59 1d       	adc	r21, r9
               if( s_numBytes > 0)
   10500:	14 16       	cp	r1, r20
   10502:	15 06       	cpc	r1, r21
   10504:	cc f4       	brge	.+50     	; 0x10538 <arb_console+0x1338>
               {
                  arb_write( gt_conObject.t_consoleHndl,
   10506:	80 91 33 25 	lds	r24, 0x2533
   1050a:	90 91 34 25 	lds	r25, 0x2534
   1050e:	0f 5f       	subi	r16, 0xFF	; 255
   10510:	1f 4f       	sbci	r17, 0xFF	; 255
   10512:	b8 01       	movw	r22, r16
   10514:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   10518:	0f c0       	rjmp	.+30     	; 0x10538 <arb_console+0x1338>

         /*------------------------------------------------------------------*
          * If c_lineCount = 'PRINTF_NUM_LINES_TO_PRINT' then the data
          * contained in the buffer 'ac_data' has already been displayed.
          *------------------------------------------------------------------*/
         if( c_lineCount < PRINTF_NUM_LINES_TO_PRINT)
   1051a:	33 e1       	ldi	r19, 0x13	; 19
   1051c:	3f 15       	cp	r19, r15
   1051e:	60 f0       	brcs	.+24     	; 0x10538 <arb_console+0x1338>
         {
            if( s_numBytes > 0)
   10520:	18 14       	cp	r1, r8
   10522:	19 04       	cpc	r1, r9
   10524:	54 f4       	brge	.+20     	; 0x1053a <arb_console+0x133a>
            {
               arb_write( gt_conObject.t_consoleHndl,
   10526:	80 91 33 25 	lds	r24, 0x2533
   1052a:	90 91 34 25 	lds	r25, 0x2534
   1052e:	b3 01       	movw	r22, r6
   10530:	a4 01       	movw	r20, r8
   10532:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   10536:	01 c0       	rjmp	.+2      	; 0x1053a <arb_console+0x133a>
   10538:	ff 24       	eor	r15, r15
          *------------------------------------------------------------------*/
         s_numBytes = arb_read( t_fileHndl,
                                ac_data,
                                20);

         i_fileSize = i_fileSize - s_numBytes;
   1053a:	c4 01       	movw	r24, r8
   1053c:	aa 27       	eor	r26, r26
   1053e:	97 fd       	sbrc	r25, 7
   10540:	a0 95       	com	r26
   10542:	ba 2f       	mov	r27, r26
   10544:	a8 1a       	sub	r10, r24
   10546:	b9 0a       	sbc	r11, r25
   10548:	ca 0a       	sbc	r12, r26
   1054a:	db 0a       	sbc	r13, r27
            }/*End if( s_numBytes > 0)*/
         }
         else
            c_lineCount = 0;

      }while( i_fileSize > 0);
   1054c:	1a 14       	cp	r1, r10
   1054e:	1b 04       	cpc	r1, r11
   10550:	1c 04       	cpc	r1, r12
   10552:	1d 04       	cpc	r1, r13
   10554:	0c f4       	brge	.+2      	; 0x10558 <arb_console+0x1358>
   10556:	6e cf       	rjmp	.-292    	; 0x10434 <arb_console+0x1234>
      return false;

   /*------------------------------------------------------------------------*
    * Close the file.
    *------------------------------------------------------------------------*/
   arb_close( t_fileHndl);
   10558:	8b 81       	ldd	r24, Y+3	; 0x03
   1055a:	9c 81       	ldd	r25, Y+4	; 0x04
   1055c:	0e 94 d3 83 	call	0x107a6	; 0x107a6 <arb_close>
   10560:	37 c0       	rjmp	.+110    	; 0x105d0 <arb_console+0x13d0>
          * 'arb_console' that is modifiable from a user-space perspective.
          * If the user-space application requires control over its various
          * threads via a CMD line interface then all subsequent commands
          * should be placed within the function pointed to by 'pf_funPtr'.
          *------------------------------------------------------------------*/
         if( gt_conObject.pf_funPtr != NULL)
   10562:	e0 91 37 25 	lds	r30, 0x2537
   10566:	f0 91 38 25 	lds	r31, 0x2538
   1056a:	30 97       	sbiw	r30, 0x00	; 0
   1056c:	89 f1       	breq	.+98     	; 0x105d0 <arb_console+0x13d0>
         {
            if( gt_conObject.pf_funPtr( gt_conObject.t_consoleHndl,
   1056e:	80 91 33 25 	lds	r24, 0x2533
   10572:	90 91 34 25 	lds	r25, 0x2534
   10576:	be 01       	movw	r22, r28
   10578:	64 54       	subi	r22, 0x44	; 68
   1057a:	7f 4f       	sbci	r23, 0xFF	; 255
   1057c:	ae 01       	movw	r20, r28
   1057e:	45 5b       	subi	r20, 0xB5	; 181
   10580:	5f 4f       	sbci	r21, 0xFF	; 255
   10582:	19 95       	eicall
   10584:	88 23       	and	r24, r24
   10586:	21 f5       	brne	.+72     	; 0x105d0 <arb_console+0x13d0>
                                        ac_buff,
                                        &t_tokHndl) == false)
            {
               s_size = sprintf_P( (char *)ac_buff, PSTR("Invalid CMD\n\r"));
   10588:	00 d0       	rcall	.+0      	; 0x1058a <arb_console+0x138a>
   1058a:	0f 92       	push	r0
   1058c:	ec eb       	ldi	r30, 0xBC	; 188
   1058e:	f0 e0       	ldi	r31, 0x00	; 0
   10590:	ec 0f       	add	r30, r28
   10592:	fd 1f       	adc	r31, r29
   10594:	ad b7       	in	r26, 0x3d	; 61
   10596:	be b7       	in	r27, 0x3e	; 62
   10598:	11 96       	adiw	r26, 0x01	; 1
   1059a:	ed 93       	st	X+, r30
   1059c:	fc 93       	st	X, r31
   1059e:	12 97       	sbiw	r26, 0x02	; 2
   105a0:	87 e0       	ldi	r24, 0x07	; 7
   105a2:	e8 2e       	mov	r14, r24
   105a4:	82 e0       	ldi	r24, 0x02	; 2
   105a6:	f8 2e       	mov	r15, r24
   105a8:	13 96       	adiw	r26, 0x03	; 3
   105aa:	ed 92       	st	X+, r14
   105ac:	fc 92       	st	X, r15
   105ae:	14 97       	sbiw	r26, 0x04	; 4
   105b0:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   105b4:	ac 01       	movw	r20, r24
               arb_write( gt_conObject.t_consoleHndl,
   105b6:	80 91 33 25 	lds	r24, 0x2533
   105ba:	90 91 34 25 	lds	r25, 0x2534
   105be:	0f 90       	pop	r0
   105c0:	0f 90       	pop	r0
   105c2:	0f 90       	pop	r0
   105c4:	0f 90       	pop	r0
   105c6:	be 01       	movw	r22, r28
   105c8:	64 54       	subi	r22, 0x44	; 68
   105ca:	7f 4f       	sbci	r23, 0xFF	; 255
   105cc:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      }

      /*---------------------------------------------------------------------*
       * Display prompt...
       *---------------------------------------------------------------------*/
      t_conError = arb_ioctl( gt_conObject.t_consoleHndl,
   105d0:	80 91 33 25 	lds	r24, 0x2533
   105d4:	90 91 34 25 	lds	r25, 0x2534
   105d8:	64 e0       	ldi	r22, 0x04	; 4
   105da:	70 e0       	ldi	r23, 0x00	; 0
   105dc:	20 e0       	ldi	r18, 0x00	; 0
   105de:	30 e0       	ldi	r19, 0x00	; 0
   105e0:	40 e0       	ldi	r20, 0x00	; 0
   105e2:	50 e0       	ldi	r21, 0x00	; 0
   105e4:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
   105e8:	0c 94 f3 79 	jmp	0xf3e6	; 0xf3e6 <arb_console+0x1e6>

000105ec <arb_getDeviceList>:
/*---------------------------------------------------------------------------*
 * This function returns a handle to the list of active device drivers.
 *---------------------------------------------------------------------------*/
t_CONTHNDL arb_getDeviceList( void)
{
   return gt_activeDevices;
   105ec:	20 91 6f 21 	lds	r18, 0x216F
   105f0:	30 91 70 21 	lds	r19, 0x2170
}/*End arb_getDeviceList*/
   105f4:	c9 01       	movw	r24, r18
   105f6:	08 95       	ret

000105f8 <arb_read>:
}/*End open*/

int16_t arb_read( t_DEVHANDLE t_handle,
                  int8_t *pc_buff,
                  uint16_t s_size)
{
   105f8:	0f 93       	push	r16
   105fa:	1f 93       	push	r17
   105fc:	df 93       	push	r29
   105fe:	cf 93       	push	r28
   10600:	0f 92       	push	r0
   10602:	0f 92       	push	r0
   10604:	cd b7       	in	r28, 0x3d	; 61
   10606:	de b7       	in	r29, 0x3e	; 62
   10608:	89 83       	std	Y+1, r24	; 0x01
   1060a:	9a 83       	std	Y+2, r25	; 0x02
   1060c:	8a 01       	movw	r16, r20
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1060e:	e9 81       	ldd	r30, Y+1	; 0x01
   10610:	fa 81       	ldd	r31, Y+2	; 0x02
   10612:	40 81       	ld	r20, Z
   10614:	51 81       	ldd	r21, Z+1	; 0x01
   int16_t s_amountRead = 0;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'read' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   10616:	e9 81       	ldd	r30, Y+1	; 0x01
   10618:	fa 81       	ldd	r31, Y+2	; 0x02
   1061a:	20 91 7d 21 	lds	r18, 0x217D
   1061e:	30 91 7e 21 	lds	r19, 0x217E
   10622:	84 81       	ldd	r24, Z+4	; 0x04
   10624:	95 81       	ldd	r25, Z+5	; 0x05
   10626:	82 17       	cp	r24, r18
   10628:	93 07       	cpc	r25, r19
   1062a:	19 f0       	breq	.+6      	; 0x10632 <arb_read+0x3a>
   1062c:	29 ef       	ldi	r18, 0xF9	; 249
   1062e:	3f ef       	ldi	r19, 0xFF	; 255
   10630:	13 c0       	rjmp	.+38     	; 0x10658 <arb_read+0x60>
int16_t arb_read( t_DEVHANDLE t_handle,
                  int8_t *pc_buff,
                  uint16_t s_size)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   10632:	da 01       	movw	r26, r20
   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'read' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   10634:	ed 91       	ld	r30, X+
   10636:	fc 91       	ld	r31, X
   10638:	11 97       	sbiw	r26, 0x01	; 1
   1063a:	03 88       	ldd	r0, Z+19	; 0x13
   1063c:	f4 89       	ldd	r31, Z+20	; 0x14
   1063e:	e0 2d       	mov	r30, r0
   10640:	30 97       	sbiw	r30, 0x00	; 0
   10642:	19 f4       	brne	.+6      	; 0x1064a <arb_read+0x52>
   10644:	2d ef       	ldi	r18, 0xFD	; 253
   10646:	3f ef       	ldi	r19, 0xFF	; 255
   10648:	07 c0       	rjmp	.+14     	; 0x10658 <arb_read+0x60>
      {
         s_amountRead = pt_devHandle->pt_dev->pt_devOps->pf_read(
   1064a:	02 80       	ldd	r0, Z+2	; 0x02
   1064c:	f3 81       	ldd	r31, Z+3	; 0x03
   1064e:	e0 2d       	mov	r30, r0
   10650:	cd 01       	movw	r24, r26
   10652:	a8 01       	movw	r20, r16
   10654:	19 95       	eicall
   10656:	9c 01       	movw	r18, r24
   else
      s_amountRead = (int16_t)ARB_INVALID_HANDLE;

   return s_amountRead;

}/*End arb_read*/
   10658:	c9 01       	movw	r24, r18
   1065a:	0f 90       	pop	r0
   1065c:	0f 90       	pop	r0
   1065e:	cf 91       	pop	r28
   10660:	df 91       	pop	r29
   10662:	1f 91       	pop	r17
   10664:	0f 91       	pop	r16
   10666:	08 95       	ret

00010668 <arb_write>:

int16_t arb_write( t_DEVHANDLE t_handle,
                   int8_t *pc_buff,
                   uint16_t s_size)
{
   10668:	0f 93       	push	r16
   1066a:	1f 93       	push	r17
   1066c:	df 93       	push	r29
   1066e:	cf 93       	push	r28
   10670:	0f 92       	push	r0
   10672:	0f 92       	push	r0
   10674:	cd b7       	in	r28, 0x3d	; 61
   10676:	de b7       	in	r29, 0x3e	; 62
   10678:	89 83       	std	Y+1, r24	; 0x01
   1067a:	9a 83       	std	Y+2, r25	; 0x02
   1067c:	8a 01       	movw	r16, r20
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1067e:	e9 81       	ldd	r30, Y+1	; 0x01
   10680:	fa 81       	ldd	r31, Y+2	; 0x02
   10682:	40 81       	ld	r20, Z
   10684:	51 81       	ldd	r21, Z+1	; 0x01
   int16_t s_amountWrote     = (int16_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'write' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   10686:	e9 81       	ldd	r30, Y+1	; 0x01
   10688:	fa 81       	ldd	r31, Y+2	; 0x02
   1068a:	20 91 7d 21 	lds	r18, 0x217D
   1068e:	30 91 7e 21 	lds	r19, 0x217E
   10692:	84 81       	ldd	r24, Z+4	; 0x04
   10694:	95 81       	ldd	r25, Z+5	; 0x05
   10696:	82 17       	cp	r24, r18
   10698:	93 07       	cpc	r25, r19
   1069a:	19 f0       	breq	.+6      	; 0x106a2 <arb_write+0x3a>
   1069c:	29 ef       	ldi	r18, 0xF9	; 249
   1069e:	3f ef       	ldi	r19, 0xFF	; 255
   106a0:	13 c0       	rjmp	.+38     	; 0x106c8 <arb_write+0x60>
int16_t arb_write( t_DEVHANDLE t_handle,
                   int8_t *pc_buff,
                   uint16_t s_size)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   106a2:	da 01       	movw	r26, r20
   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'write' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   106a4:	ed 91       	ld	r30, X+
   106a6:	fc 91       	ld	r31, X
   106a8:	11 97       	sbiw	r26, 0x01	; 1
   106aa:	03 88       	ldd	r0, Z+19	; 0x13
   106ac:	f4 89       	ldd	r31, Z+20	; 0x14
   106ae:	e0 2d       	mov	r30, r0
   106b0:	30 97       	sbiw	r30, 0x00	; 0
   106b2:	19 f4       	brne	.+6      	; 0x106ba <arb_write+0x52>
   106b4:	2d ef       	ldi	r18, 0xFD	; 253
   106b6:	3f ef       	ldi	r19, 0xFF	; 255
   106b8:	07 c0       	rjmp	.+14     	; 0x106c8 <arb_write+0x60>
      {
         s_amountWrote = pt_devHandle->pt_dev->pt_devOps->pf_write(
   106ba:	04 80       	ldd	r0, Z+4	; 0x04
   106bc:	f5 81       	ldd	r31, Z+5	; 0x05
   106be:	e0 2d       	mov	r30, r0
   106c0:	cd 01       	movw	r24, r26
   106c2:	a8 01       	movw	r20, r16
   106c4:	19 95       	eicall
   106c6:	9c 01       	movw	r18, r24
   else
      s_amountWrote = (int16_t)ARB_INVALID_HANDLE;

   return s_amountWrote;

}/*End arb_write*/
   106c8:	c9 01       	movw	r24, r18
   106ca:	0f 90       	pop	r0
   106cc:	0f 90       	pop	r0
   106ce:	cf 91       	pop	r28
   106d0:	df 91       	pop	r29
   106d2:	1f 91       	pop	r17
   106d4:	0f 91       	pop	r16
   106d6:	08 95       	ret

000106d8 <arb_getDevName>:

int8_t *arb_getDevName( t_DEVHANDLE t_handle)
{
   106d8:	df 93       	push	r29
   106da:	cf 93       	push	r28
   106dc:	0f 92       	push	r0
   106de:	0f 92       	push	r0
   106e0:	cd b7       	in	r28, 0x3d	; 61
   106e2:	de b7       	in	r29, 0x3e	; 62
   106e4:	89 83       	std	Y+1, r24	; 0x01
   106e6:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   106e8:	e9 81       	ldd	r30, Y+1	; 0x01
   106ea:	fa 81       	ldd	r31, Y+2	; 0x02
   106ec:	a0 81       	ld	r26, Z
   106ee:	b1 81       	ldd	r27, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'write' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   106f0:	e9 81       	ldd	r30, Y+1	; 0x01
   106f2:	fa 81       	ldd	r31, Y+2	; 0x02
   106f4:	20 91 7d 21 	lds	r18, 0x217D
   106f8:	30 91 7e 21 	lds	r19, 0x217E
   106fc:	84 81       	ldd	r24, Z+4	; 0x04
   106fe:	95 81       	ldd	r25, Z+5	; 0x05
   10700:	82 17       	cp	r24, r18
   10702:	93 07       	cpc	r25, r19
   10704:	19 f0       	breq	.+6      	; 0x1070c <arb_getDevName+0x34>
   10706:	e0 e0       	ldi	r30, 0x00	; 0
   10708:	f0 e0       	ldi	r31, 0x00	; 0
   1070a:	03 c0       	rjmp	.+6      	; 0x10712 <arb_getDevName+0x3a>
   {
      return pt_devHandle->pt_dev->ac_deviceName;
   1070c:	ed 91       	ld	r30, X+
   1070e:	fc 91       	ld	r31, X
   10710:	32 96       	adiw	r30, 0x02	; 2
   }/*End if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))*/

   return NULL;

}/*End arb_getDevName*/
   10712:	cf 01       	movw	r24, r30
   10714:	0f 90       	pop	r0
   10716:	0f 90       	pop	r0
   10718:	cf 91       	pop	r28
   1071a:	df 91       	pop	r29
   1071c:	08 95       	ret

0001071e <arb_ioctl>:

int32_t arb_ioctl( t_DEVHANDLE t_handle,
                   uint16_t s_command,
                   int32_t i_argument)
{
   1071e:	ef 92       	push	r14
   10720:	ff 92       	push	r15
   10722:	0f 93       	push	r16
   10724:	1f 93       	push	r17
   10726:	df 93       	push	r29
   10728:	cf 93       	push	r28
   1072a:	0f 92       	push	r0
   1072c:	0f 92       	push	r0
   1072e:	cd b7       	in	r28, 0x3d	; 61
   10730:	de b7       	in	r29, 0x3e	; 62
   10732:	89 83       	std	Y+1, r24	; 0x01
   10734:	9a 83       	std	Y+2, r25	; 0x02
   10736:	79 01       	movw	r14, r18
   10738:	8a 01       	movw	r16, r20
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1073a:	e9 81       	ldd	r30, Y+1	; 0x01
   1073c:	fa 81       	ldd	r31, Y+2	; 0x02
   1073e:	40 81       	ld	r20, Z
   10740:	51 81       	ldd	r21, Z+1	; 0x01
   int32_t i_status = (int32_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'ioctl' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   10742:	e9 81       	ldd	r30, Y+1	; 0x01
   10744:	fa 81       	ldd	r31, Y+2	; 0x02
   10746:	20 91 7d 21 	lds	r18, 0x217D
   1074a:	30 91 7e 21 	lds	r19, 0x217E
   1074e:	84 81       	ldd	r24, Z+4	; 0x04
   10750:	95 81       	ldd	r25, Z+5	; 0x05
   10752:	82 17       	cp	r24, r18
   10754:	93 07       	cpc	r25, r19
   10756:	29 f0       	breq	.+10     	; 0x10762 <arb_ioctl+0x44>
   10758:	29 ef       	ldi	r18, 0xF9	; 249
   1075a:	3f ef       	ldi	r19, 0xFF	; 255
   1075c:	4f ef       	ldi	r20, 0xFF	; 255
   1075e:	5f ef       	ldi	r21, 0xFF	; 255
   10760:	17 c0       	rjmp	.+46     	; 0x10790 <arb_ioctl+0x72>
int32_t arb_ioctl( t_DEVHANDLE t_handle,
                   uint16_t s_command,
                   int32_t i_argument)
{
   t_devHandle *pt_devHandle = (t_devHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   10762:	da 01       	movw	r26, r20
   /*------------------------------------------------------------------------*
    * If the handle is valid, call the device's 'ioctl' method
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   {
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   10764:	ed 91       	ld	r30, X+
   10766:	fc 91       	ld	r31, X
   10768:	11 97       	sbiw	r26, 0x01	; 1
   1076a:	03 88       	ldd	r0, Z+19	; 0x13
   1076c:	f4 89       	ldd	r31, Z+20	; 0x14
   1076e:	e0 2d       	mov	r30, r0
   10770:	30 97       	sbiw	r30, 0x00	; 0
   10772:	29 f4       	brne	.+10     	; 0x1077e <arb_ioctl+0x60>
   10774:	2d ef       	ldi	r18, 0xFD	; 253
   10776:	3f ef       	ldi	r19, 0xFF	; 255
   10778:	4f ef       	ldi	r20, 0xFF	; 255
   1077a:	5f ef       	ldi	r21, 0xFF	; 255
   1077c:	09 c0       	rjmp	.+18     	; 0x10790 <arb_ioctl+0x72>
      {
         i_status = pt_devHandle->pt_dev->pt_devOps->pf_ioctl( (t_DEVHANDLE)
   1077e:	06 80       	ldd	r0, Z+6	; 0x06
   10780:	f7 81       	ldd	r31, Z+7	; 0x07
   10782:	e0 2d       	mov	r30, r0
   10784:	cd 01       	movw	r24, r26
   10786:	a8 01       	movw	r20, r16
   10788:	97 01       	movw	r18, r14
   1078a:	19 95       	eicall
   1078c:	9b 01       	movw	r18, r22
   1078e:	ac 01       	movw	r20, r24
   else
      i_status = (int32_t)ARB_INVALID_HANDLE;

   return i_status;

}/*End arb_ioctl*/
   10790:	b9 01       	movw	r22, r18
   10792:	ca 01       	movw	r24, r20
   10794:	0f 90       	pop	r0
   10796:	0f 90       	pop	r0
   10798:	cf 91       	pop	r28
   1079a:	df 91       	pop	r29
   1079c:	1f 91       	pop	r17
   1079e:	0f 91       	pop	r16
   107a0:	ff 90       	pop	r15
   107a2:	ef 90       	pop	r14
   107a4:	08 95       	ret

000107a6 <arb_close>:

t_error arb_close( t_DEVHANDLE t_handle)
{
   107a6:	0f 93       	push	r16
   107a8:	1f 93       	push	r17
   107aa:	df 93       	push	r29
   107ac:	cf 93       	push	r28
   107ae:	0f 92       	push	r0
   107b0:	0f 92       	push	r0
   107b2:	cd b7       	in	r28, 0x3d	; 61
   107b4:	de b7       	in	r29, 0x3e	; 62
   107b6:	89 83       	std	Y+1, r24	; 0x01
   107b8:	9a 83       	std	Y+2, r25	; 0x02
   t_devHandle *pt_devHandle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR(\
   107ba:	e9 81       	ldd	r30, Y+1	; 0x01
   107bc:	fa 81       	ldd	r31, Y+2	; 0x02
   107be:	40 81       	ld	r20, Z
   107c0:	51 81       	ldd	r21, Z+1	; 0x01
   t_error t_err;

   /*------------------------------------------------------------------------*
    * If this is a valid 'user-space' handle then close the connection...
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( t_handle, gt_activeHandles))
   107c2:	e9 81       	ldd	r30, Y+1	; 0x01
   107c4:	fa 81       	ldd	r31, Y+2	; 0x02
   107c6:	20 91 7d 21 	lds	r18, 0x217D
   107ca:	30 91 7e 21 	lds	r19, 0x217E
   107ce:	84 81       	ldd	r24, Z+4	; 0x04
   107d0:	95 81       	ldd	r25, Z+5	; 0x05
   107d2:	82 17       	cp	r24, r18
   107d4:	93 07       	cpc	r25, r19
   107d6:	11 f0       	breq	.+4      	; 0x107dc <arb_close+0x36>
   107d8:	89 ef       	ldi	r24, 0xF9	; 249
   107da:	21 c0       	rjmp	.+66     	; 0x1081e <arb_close+0x78>

}/*End arb_ioctl*/

t_error arb_close( t_DEVHANDLE t_handle)
{
   t_devHandle *pt_devHandle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR(\
   107dc:	8a 01       	movw	r16, r20
   {

      /*---------------------------------------------------------------------*
       * Call device driver's close method.
       *---------------------------------------------------------------------*/
      if( pt_devHandle->pt_dev->pt_devOps != NULL)
   107de:	d8 01       	movw	r26, r16
   107e0:	ed 91       	ld	r30, X+
   107e2:	fc 91       	ld	r31, X
   107e4:	03 88       	ldd	r0, Z+19	; 0x13
   107e6:	f4 89       	ldd	r31, Z+20	; 0x14
   107e8:	e0 2d       	mov	r30, r0
   107ea:	30 97       	sbiw	r30, 0x00	; 0
   107ec:	11 f4       	brne	.+4      	; 0x107f2 <arb_close+0x4c>
   107ee:	8d ef       	ldi	r24, 0xFD	; 253
   107f0:	16 c0       	rjmp	.+44     	; 0x1081e <arb_close+0x78>
      {
         t_err = pt_devHandle->pt_dev->pt_devOps->pf_close( (t_DEVHANDLE)
   107f2:	00 84       	ldd	r0, Z+8	; 0x08
   107f4:	f1 85       	ldd	r31, Z+9	; 0x09
   107f6:	e0 2d       	mov	r30, r0
   107f8:	c8 01       	movw	r24, r16
   107fa:	19 95       	eicall
         pt_devHandle);

         if( t_err < 0)
   107fc:	87 fd       	sbrc	r24, 7
   107fe:	0f c0       	rjmp	.+30     	; 0x1081e <arb_close+0x78>

         /*------------------------------------------------------------------*
          * Decrement the count of handles opened against this particular
          * device driver.
          *------------------------------------------------------------------*/
         pt_devHandle->pt_dev->c_numDevHandles--;
   10800:	d8 01       	movw	r26, r16
   10802:	ed 91       	ld	r30, X+
   10804:	fc 91       	ld	r31, X
   10806:	82 89       	ldd	r24, Z+18	; 0x12
   10808:	81 50       	subi	r24, 0x01	; 1
   1080a:	82 8b       	std	Z+18, r24	; 0x12

         t_err = utl_destroyLink( gt_activeHandles,
   1080c:	80 91 7d 21 	lds	r24, 0x217D
   10810:	90 91 7e 21 	lds	r25, 0x217E
   10814:	69 81       	ldd	r22, Y+1	; 0x01
   10816:	7a 81       	ldd	r23, Y+2	; 0x02
   10818:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
   1081c:	80 e0       	ldi	r24, 0x00	; 0
   else
      return ARB_INVALID_HANDLE;

   return ARB_PASSED;

}/*End arb_close*/
   1081e:	0f 90       	pop	r0
   10820:	0f 90       	pop	r0
   10822:	cf 91       	pop	r28
   10824:	df 91       	pop	r29
   10826:	1f 91       	pop	r17
   10828:	0f 91       	pop	r16
   1082a:	08 95       	ret

0001082c <arb_getDeviceLinkByName>:
   (*pt_new)->pv_privateData = (void *)(*pc_fileName);

}/*End arb_initDeviceHandle*/

static t_LINKHNDL arb_getDeviceLinkByName( char *pc_name)
{
   1082c:	ef 92       	push	r14
   1082e:	ff 92       	push	r15
   10830:	0f 93       	push	r16
   10832:	1f 93       	push	r17
   10834:	df 93       	push	r29
   10836:	cf 93       	push	r28
   10838:	0f 92       	push	r0
   1083a:	0f 92       	push	r0
   1083c:	cd b7       	in	r28, 0x3d	; 61
   1083e:	de b7       	in	r29, 0x3e	; 62
   10840:	7c 01       	movw	r14, r24
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with a name of pc_name
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10842:	e0 91 6f 21 	lds	r30, 0x216F
   10846:	f0 91 70 21 	lds	r31, 0x2170
   1084a:	02 81       	ldd	r16, Z+2	; 0x02
   1084c:	13 81       	ldd	r17, Z+3	; 0x03
   1084e:	e0 91 6f 21 	lds	r30, 0x216F
   10852:	f0 91 70 21 	lds	r31, 0x2170
   10856:	11 c0       	rjmp	.+34     	; 0x1087a <arb_getDeviceLinkByName+0x4e>
   {
      pt_curr = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   10858:	e9 81       	ldd	r30, Y+1	; 0x01
   1085a:	fa 81       	ldd	r31, Y+2	; 0x02
      if( strcmp( (char *)pt_curr->ac_deviceName, (char *)pc_name) == 0)
   1085c:	80 81       	ld	r24, Z
   1085e:	91 81       	ldd	r25, Z+1	; 0x01
   10860:	02 96       	adiw	r24, 0x02	; 2
   10862:	b7 01       	movw	r22, r14
   10864:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   10868:	00 97       	sbiw	r24, 0x00	; 0
   1086a:	19 f4       	brne	.+6      	; 0x10872 <arb_getDeviceLinkByName+0x46>
      {
         return t_linkHndl;
   1086c:	29 81       	ldd	r18, Y+1	; 0x01
   1086e:	3a 81       	ldd	r19, Y+2	; 0x02
   10870:	0d c0       	rjmp	.+26     	; 0x1088c <arb_getDeviceLinkByName+0x60>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with a name of pc_name
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10872:	01 50       	subi	r16, 0x01	; 1
   10874:	10 40       	sbci	r17, 0x00	; 0
   10876:	e9 81       	ldd	r30, Y+1	; 0x01
   10878:	fa 81       	ldd	r31, Y+2	; 0x02
   1087a:	80 85       	ldd	r24, Z+8	; 0x08
   1087c:	91 85       	ldd	r25, Z+9	; 0x09
   1087e:	89 83       	std	Y+1, r24	; 0x01
   10880:	9a 83       	std	Y+2, r25	; 0x02
   10882:	10 16       	cp	r1, r16
   10884:	11 06       	cpc	r1, r17
   10886:	44 f3       	brlt	.-48     	; 0x10858 <arb_getDeviceLinkByName+0x2c>
   10888:	27 ef       	ldi	r18, 0xF7	; 247
   1088a:	3f ef       	ldi	r19, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * If we make it this far the name has not been found in the device list
    *------------------------------------------------------------------------*/
   return (t_LINKHNDL)ARB_DEVICE_NOT_FOUND;

}/*End arb_getDeviceLinkByName*/
   1088c:	c9 01       	movw	r24, r18
   1088e:	0f 90       	pop	r0
   10890:	0f 90       	pop	r0
   10892:	cf 91       	pop	r28
   10894:	df 91       	pop	r29
   10896:	1f 91       	pop	r17
   10898:	0f 91       	pop	r16
   1089a:	ff 90       	pop	r15
   1089c:	ef 90       	pop	r14
   1089e:	08 95       	ret

000108a0 <arb_destroyDevice>:
   return ARB_PASSED;

}/*End arb_registerDevice*/

t_error arb_destroyDevice( char *pc_name)
{
   108a0:	ef 92       	push	r14
   108a2:	ff 92       	push	r15
   108a4:	0f 93       	push	r16
   108a6:	1f 93       	push	r17
   108a8:	df 93       	push	r29
   108aa:	cf 93       	push	r28
   108ac:	0f 92       	push	r0
   108ae:	cd b7       	in	r28, 0x3d	; 61
   108b0:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables- in this case the
    * handle to the device driver, we need to protect against interruption
    * from another process while the driver is being removed from the list.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   108b2:	2f b7       	in	r18, 0x3f	; 63
   108b4:	29 83       	std	Y+1, r18	; 0x01
   108b6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Search the active device list for this particular ID.
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_name);
   108b8:	0e 94 16 84 	call	0x1082c	; 0x1082c <arb_getDeviceLinkByName>
   108bc:	80 93 3d 25 	sts	0x253D, r24
   108c0:	90 93 3e 25 	sts	0x253E, r25

   if( t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND)
   108c4:	80 91 3d 25 	lds	r24, 0x253D
   108c8:	90 91 3e 25 	lds	r25, 0x253E
   108cc:	87 5f       	subi	r24, 0xF7	; 247
   108ce:	9f 4f       	sbci	r25, 0xFF	; 255
   108d0:	21 f4       	brne	.+8      	; 0x108da <arb_destroyDevice+0x3a>
   {
      HAL_END_CRITICAL();//Enable interrupts
   108d2:	89 81       	ldd	r24, Y+1	; 0x01
   108d4:	8f bf       	out	0x3f, r24	; 63
   108d6:	87 ef       	ldi	r24, 0xF7	; 247
   108d8:	54 c0       	rjmp	.+168    	; 0x10982 <arb_destroyDevice+0xe2>
      return ARB_DEVICE_NOT_FOUND;
   }/*End if( t_devLink == NULL)*/

   pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_devLink);
   108da:	e0 91 3d 25 	lds	r30, 0x253D
   108de:	f0 91 3e 25 	lds	r31, 0x253E
   108e2:	e0 80       	ld	r14, Z
   108e4:	f1 80       	ldd	r15, Z+1	; 0x01
    * list changing the value of 't_hndlLink' on each iteration, once
    * 't_hndlLink' has been deleted information about the next position on the
    * list is lost. This issue is resolved by using a previous ptr to change
    * 't_hndlLink' back to a valid location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_hndlLink, gt_activeHandles, s_count)
   108e6:	e0 91 7d 21 	lds	r30, 0x217D
   108ea:	f0 91 7e 21 	lds	r31, 0x217E
   108ee:	02 81       	ldd	r16, Z+2	; 0x02
   108f0:	13 81       	ldd	r17, Z+3	; 0x03
   108f2:	e0 91 7d 21 	lds	r30, 0x217D
   108f6:	f0 91 7e 21 	lds	r31, 0x217E
   108fa:	2d c0       	rjmp	.+90     	; 0x10956 <arb_destroyDevice+0xb6>
   {
      pt_handle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR( t_hndlLink);
   108fc:	e0 91 3b 25 	lds	r30, 0x253B
   10900:	f0 91 3c 25 	lds	r31, 0x253C
   10904:	a0 81       	ld	r26, Z
   10906:	b1 81       	ldd	r27, Z+1	; 0x01
      t_prevHndlLink = UTL_GET_PREV_LINK( t_hndlLink);
   10908:	e0 91 3b 25 	lds	r30, 0x253B
   1090c:	f0 91 3c 25 	lds	r31, 0x253C
   10910:	82 85       	ldd	r24, Z+10	; 0x0a
   10912:	93 85       	ldd	r25, Z+11	; 0x0b
   10914:	80 93 39 25 	sts	0x2539, r24
   10918:	90 93 3a 25 	sts	0x253A, r25
      if( pt_handle->pt_dev == pt_device)
   1091c:	8d 91       	ld	r24, X+
   1091e:	9c 91       	ld	r25, X
   10920:	8e 15       	cp	r24, r14
   10922:	9f 05       	cpc	r25, r15
   10924:	91 f4       	brne	.+36     	; 0x1094a <arb_destroyDevice+0xaa>
      {
         t_err = utl_destroyLink( gt_activeHandles, t_hndlLink);
   10926:	80 91 7d 21 	lds	r24, 0x217D
   1092a:	90 91 7e 21 	lds	r25, 0x217E
   1092e:	60 91 3b 25 	lds	r22, 0x253B
   10932:	70 91 3c 25 	lds	r23, 0x253C
   10936:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
         t_hndlLink = t_prevHndlLink;
   1093a:	80 91 39 25 	lds	r24, 0x2539
   1093e:	90 91 3a 25 	lds	r25, 0x253A
   10942:	80 93 3b 25 	sts	0x253B, r24
   10946:	90 93 3c 25 	sts	0x253C, r25
    * list changing the value of 't_hndlLink' on each iteration, once
    * 't_hndlLink' has been deleted information about the next position on the
    * list is lost. This issue is resolved by using a previous ptr to change
    * 't_hndlLink' back to a valid location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_hndlLink, gt_activeHandles, s_count)
   1094a:	01 50       	subi	r16, 0x01	; 1
   1094c:	10 40       	sbci	r17, 0x00	; 0
   1094e:	e0 91 3b 25 	lds	r30, 0x253B
   10952:	f0 91 3c 25 	lds	r31, 0x253C
   10956:	80 85       	ldd	r24, Z+8	; 0x08
   10958:	91 85       	ldd	r25, Z+9	; 0x09
   1095a:	80 93 3b 25 	sts	0x253B, r24
   1095e:	90 93 3c 25 	sts	0x253C, r25
   10962:	10 16       	cp	r1, r16
   10964:	11 06       	cpc	r1, r17
   10966:	54 f2       	brlt	.-108    	; 0x108fc <arb_destroyDevice+0x5c>
   }

   /*------------------------------------------------------------------------*
    * Remove the device driver from the driver list.
    *------------------------------------------------------------------------*/
   t_err = utl_destroyLink( gt_activeDevices,
   10968:	80 91 6f 21 	lds	r24, 0x216F
   1096c:	90 91 70 21 	lds	r25, 0x2170
   10970:	60 91 3d 25 	lds	r22, 0x253D
   10974:	70 91 3e 25 	lds	r23, 0x253E
   10978:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                            (t_LINKHNDL)t_devLink);

   HAL_END_CRITICAL();//Enable interrupts
   1097c:	89 81       	ldd	r24, Y+1	; 0x01
   1097e:	8f bf       	out	0x3f, r24	; 63
   10980:	80 e0       	ldi	r24, 0x00	; 0

   return ARB_PASSED;

}/*End arb_destroyDevice*/
   10982:	0f 90       	pop	r0
   10984:	cf 91       	pop	r28
   10986:	df 91       	pop	r29
   10988:	1f 91       	pop	r17
   1098a:	0f 91       	pop	r16
   1098c:	ff 90       	pop	r15
   1098e:	ef 90       	pop	r14
   10990:	08 95       	ret

00010992 <arb_registerDevice>:
}/*End arb_close*/

t_error arb_registerDevice( char *pc_name,
                            t_deviceId t_devId,
                            t_deviceOperations *pt_devOps)
{
   10992:	ef 92       	push	r14
   10994:	ff 92       	push	r15
   10996:	0f 93       	push	r16
   10998:	1f 93       	push	r17
   1099a:	df 93       	push	r29
   1099c:	cf 93       	push	r28
   1099e:	cd b7       	in	r28, 0x3d	; 61
   109a0:	de b7       	in	r29, 0x3e	; 62
   109a2:	29 97       	sbiw	r28, 0x09	; 9
   109a4:	cd bf       	out	0x3d, r28	; 61
   109a6:	de bf       	out	0x3e, r29	; 62
   109a8:	18 2f       	mov	r17, r24
   109aa:	09 2f       	mov	r16, r25
   109ac:	68 87       	std	Y+8, r22	; 0x08
   109ae:	79 87       	std	Y+9, r23	; 0x09
   109b0:	7a 01       	movw	r14, r20
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables- in this case the
    * handle to the device driver, we need to protect against interruption
    * from another process while the driver is being added to the list.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   109b2:	8f b7       	in	r24, 0x3f	; 63
   109b4:	89 83       	std	Y+1, r24	; 0x01
   109b6:	f8 94       	cli

   if( strlen( pc_name) > MAX_DEVICE_NAME_BYTES)
   109b8:	a1 2f       	mov	r26, r17
   109ba:	b9 2f       	mov	r27, r25
   109bc:	fd 01       	movw	r30, r26
   109be:	01 90       	ld	r0, Z+
   109c0:	00 20       	and	r0, r0
   109c2:	e9 f7       	brne	.-6      	; 0x109be <arb_registerDevice+0x2c>
   109c4:	31 97       	sbiw	r30, 0x01	; 1
   109c6:	ea 1b       	sub	r30, r26
   109c8:	fb 0b       	sbc	r31, r27
   109ca:	71 97       	sbiw	r30, 0x11	; 17
   109cc:	20 f0       	brcs	.+8      	; 0x109d6 <arb_registerDevice+0x44>
   {
      HAL_END_CRITICAL();//Enable interrupts
   109ce:	89 81       	ldd	r24, Y+1	; 0x01
   109d0:	8f bf       	out	0x3f, r24	; 63
   109d2:	8c ef       	ldi	r24, 0xFC	; 252
   109d4:	72 c0       	rjmp	.+228    	; 0x10aba <arb_registerDevice+0x128>
   }/*End if( s_length > MAX_DEVICE_NAME_BYTES)*/

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same name
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_name);
   109d6:	81 2f       	mov	r24, r17
   109d8:	0e 94 16 84 	call	0x1082c	; 0x1082c <arb_getDeviceLinkByName>
   109dc:	8a 83       	std	Y+2, r24	; 0x02
   109de:	9b 83       	std	Y+3, r25	; 0x03

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same ID
    *------------------------------------------------------------------------*/
   t_devLink2 = arb_getDeviceLinkById( t_devId);
   109e0:	88 85       	ldd	r24, Y+8	; 0x08
   109e2:	99 85       	ldd	r25, Y+9	; 0x09
   109e4:	78 2f       	mov	r23, r24
   109e6:	69 2f       	mov	r22, r25
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with an ID of t_devId
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   109e8:	e0 91 6f 21 	lds	r30, 0x216F
   109ec:	f0 91 70 21 	lds	r31, 0x2170
   109f0:	42 81       	ldd	r20, Z+2	; 0x02
   109f2:	53 81       	ldd	r21, Z+3	; 0x03
   109f4:	e0 91 6f 21 	lds	r30, 0x216F
   109f8:	f0 91 70 21 	lds	r31, 0x2170
   109fc:	13 c0       	rjmp	.+38     	; 0x10a24 <arb_registerDevice+0x92>
   {
      pt_curr = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   109fe:	ee 81       	ldd	r30, Y+6	; 0x06
   10a00:	ff 81       	ldd	r31, Y+7	; 0x07
   10a02:	01 90       	ld	r0, Z+
   10a04:	f0 81       	ld	r31, Z
   10a06:	e0 2d       	mov	r30, r0
      if( pt_curr->t_devId == t_devId)
   10a08:	20 81       	ld	r18, Z
   10a0a:	31 81       	ldd	r19, Z+1	; 0x01
   10a0c:	87 2f       	mov	r24, r23
   10a0e:	96 2f       	mov	r25, r22
   10a10:	28 17       	cp	r18, r24
   10a12:	39 07       	cpc	r19, r25
   10a14:	19 f4       	brne	.+6      	; 0x10a1c <arb_registerDevice+0x8a>
      {
         return t_linkHndl;
   10a16:	8e 81       	ldd	r24, Y+6	; 0x06
   10a18:	9f 81       	ldd	r25, Y+7	; 0x07
   10a1a:	0d c0       	rjmp	.+26     	; 0x10a36 <arb_registerDevice+0xa4>
   int16_t s_count;

   /*------------------------------------------------------------------------*
    * Find the device with an ID of t_devId
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeDevices, s_count)
   10a1c:	41 50       	subi	r20, 0x01	; 1
   10a1e:	50 40       	sbci	r21, 0x00	; 0
   10a20:	ee 81       	ldd	r30, Y+6	; 0x06
   10a22:	ff 81       	ldd	r31, Y+7	; 0x07
   10a24:	80 85       	ldd	r24, Z+8	; 0x08
   10a26:	91 85       	ldd	r25, Z+9	; 0x09
   10a28:	8e 83       	std	Y+6, r24	; 0x06
   10a2a:	9f 83       	std	Y+7, r25	; 0x07
   10a2c:	14 16       	cp	r1, r20
   10a2e:	15 06       	cpc	r1, r21
   10a30:	34 f3       	brlt	.-52     	; 0x109fe <arb_registerDevice+0x6c>
   10a32:	87 ef       	ldi	r24, 0xF7	; 247
   10a34:	9f ef       	ldi	r25, 0xFF	; 255
   t_devLink = arb_getDeviceLinkByName( pc_name);

   /*------------------------------------------------------------------------*
    * Check to see if there is another device with the same ID
    *------------------------------------------------------------------------*/
   t_devLink2 = arb_getDeviceLinkById( t_devId);
   10a36:	8c 83       	std	Y+4, r24	; 0x04
   10a38:	9d 83       	std	Y+5, r25	; 0x05

   if( (t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND) && (t_devLink2
   10a3a:	8a 81       	ldd	r24, Y+2	; 0x02
   10a3c:	9b 81       	ldd	r25, Y+3	; 0x03
   10a3e:	87 5f       	subi	r24, 0xF7	; 247
   10a40:	9f 4f       	sbci	r25, 0xFF	; 255
   10a42:	c1 f5       	brne	.+112    	; 0x10ab4 <arb_registerDevice+0x122>
   10a44:	8c 81       	ldd	r24, Y+4	; 0x04
   10a46:	9d 81       	ldd	r25, Y+5	; 0x05
   10a48:	87 5f       	subi	r24, 0xF7	; 247
   10a4a:	9f 4f       	sbci	r25, 0xFF	; 255
   10a4c:	99 f5       	brne	.+102    	; 0x10ab4 <arb_registerDevice+0x122>
   {

      /*---------------------------------------------------------------------*
       * Create a new link where the device driver information will be stored.
       *---------------------------------------------------------------------*/
      t_devLink = utl_createLink( sizeof(t_device));
   10a4e:	85 e1       	ldi	r24, 0x15	; 21
   10a50:	90 e0       	ldi	r25, 0x00	; 0
   10a52:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   10a56:	8a 83       	std	Y+2, r24	; 0x02
   10a58:	9b 83       	std	Y+3, r25	; 0x03

      if( t_devLink < 0)
   10a5a:	8a 81       	ldd	r24, Y+2	; 0x02
   10a5c:	9b 81       	ldd	r25, Y+3	; 0x03
   10a5e:	97 ff       	sbrs	r25, 7
   10a60:	04 c0       	rjmp	.+8      	; 0x10a6a <arb_registerDevice+0xd8>
      {
         HAL_END_CRITICAL();//Enable interrupts
   10a62:	89 81       	ldd	r24, Y+1	; 0x01
   10a64:	8f bf       	out	0x3f, r24	; 63
   10a66:	8f ef       	ldi	r24, 0xFF	; 255
   10a68:	28 c0       	rjmp	.+80     	; 0x10aba <arb_registerDevice+0x128>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where the device
       * information is being stored.
       *---------------------------------------------------------------------*/
      pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR( t_devLink);
   10a6a:	ea 81       	ldd	r30, Y+2	; 0x02
   10a6c:	fb 81       	ldd	r31, Y+3	; 0x03
   10a6e:	01 90       	ld	r0, Z+
   10a70:	f0 81       	ld	r31, Z
   10a72:	e0 2d       	mov	r30, r0

      /*---------------------------------------------------------------------*
       * Configure the device by storing the callback functions, name, and
       * device ID.
       *---------------------------------------------------------------------*/
      arb_initDevice( &pt_device,
   10a74:	28 85       	ldd	r18, Y+8	; 0x08
   10a76:	39 85       	ldd	r19, Y+9	; 0x09
{

   /*------------------------------------------------------------------------*
    * Initialize this new memory region to 0
    *------------------------------------------------------------------------*/
   memset( (*pt_newDevice), 0, sizeof( t_device));
   10a78:	85 e1       	ldi	r24, 0x15	; 21
   10a7a:	df 01       	movw	r26, r30
   10a7c:	1d 92       	st	X+, r1
   10a7e:	8a 95       	dec	r24
   10a80:	e9 f7       	brne	.-6      	; 0x10a7c <arb_registerDevice+0xea>

   (*pt_newDevice)->t_devId = t_devId;
   10a82:	20 83       	st	Z, r18
   10a84:	31 83       	std	Z+1, r19	; 0x01

   (*pt_newDevice)->pt_devOps = (*pt_devOps);
   10a86:	e3 8a       	std	Z+19, r14	; 0x13
   10a88:	f4 8a       	std	Z+20, r15	; 0x14

   strncpy( (char *)(*pt_newDevice)->ac_deviceName, (char *)(*pc_name),
   10a8a:	cf 01       	movw	r24, r30
   10a8c:	02 96       	adiw	r24, 0x02	; 2
   10a8e:	61 2f       	mov	r22, r17
   10a90:	70 2f       	mov	r23, r16
   10a92:	40 e1       	ldi	r20, 0x10	; 16
   10a94:	50 e0       	ldi	r21, 0x00	; 0
   10a96:	0e 94 2e b8 	call	0x1705c	; 0x1705c <strncpy>
                      t_devId);

      /*---------------------------------------------------------------------*
       * Add the device onto the list of available device drivers.
       *---------------------------------------------------------------------*/
      t_err = utl_insertLink( gt_activeDevices,
   10a9a:	80 91 6f 21 	lds	r24, 0x216F
   10a9e:	90 91 70 21 	lds	r25, 0x2170
   10aa2:	6a 81       	ldd	r22, Y+2	; 0x02
   10aa4:	7b 81       	ldd	r23, Y+3	; 0x03
   10aa6:	41 e0       	ldi	r20, 0x01	; 1
   10aa8:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return ARB_DEVICE_PRESENT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   10aac:	89 81       	ldd	r24, Y+1	; 0x01
   10aae:	8f bf       	out	0x3f, r24	; 63
   10ab0:	80 e0       	ldi	r24, 0x00	; 0
   10ab2:	03 c0       	rjmp	.+6      	; 0x10aba <arb_registerDevice+0x128>
                              true);

   }
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   10ab4:	89 81       	ldd	r24, Y+1	; 0x01
   10ab6:	8f bf       	out	0x3f, r24	; 63
   10ab8:	8e ef       	ldi	r24, 0xFE	; 254

   HAL_END_CRITICAL();//Enable interrupts

   return ARB_PASSED;

}/*End arb_registerDevice*/
   10aba:	29 96       	adiw	r28, 0x09	; 9
   10abc:	cd bf       	out	0x3d, r28	; 61
   10abe:	de bf       	out	0x3e, r29	; 62
   10ac0:	cf 91       	pop	r28
   10ac2:	df 91       	pop	r29
   10ac4:	1f 91       	pop	r17
   10ac6:	0f 91       	pop	r16
   10ac8:	ff 90       	pop	r15
   10aca:	ef 90       	pop	r14
   10acc:	08 95       	ret

00010ace <arb_open>:
   return gt_activeDevices;
}/*End arb_getDeviceList*/

t_DEVHANDLE arb_open( char *pc_name,
                      uint8_t c_flags)
{
   10ace:	9f 92       	push	r9
   10ad0:	af 92       	push	r10
   10ad2:	bf 92       	push	r11
   10ad4:	cf 92       	push	r12
   10ad6:	df 92       	push	r13
   10ad8:	ef 92       	push	r14
   10ada:	ff 92       	push	r15
   10adc:	0f 93       	push	r16
   10ade:	1f 93       	push	r17
   10ae0:	df 93       	push	r29
   10ae2:	cf 93       	push	r28
   10ae4:	cd b7       	in	r28, 0x3d	; 61
   10ae6:	de b7       	in	r29, 0x3e	; 62
   10ae8:	25 97       	sbiw	r28, 0x05	; 5
   10aea:	cd bf       	out	0x3d, r28	; 61
   10aec:	de bf       	out	0x3e, r29	; 62
   10aee:	96 2e       	mov	r9, r22

   /*------------------------------------------------------------------------*
    * A new handle is being dynamically created make sure operation acting on
    * the global variable are atomic.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   10af0:	2f b7       	in	r18, 0x3f	; 63
   10af2:	29 83       	std	Y+1, r18	; 0x01
   10af4:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * The device name is located at the begging of 'pc_name' and can be
    * found by extracting the characters up until the first '/'.
    *------------------------------------------------------------------------*/
   s_size1 = strlen( pc_name);
   10af6:	dc 01       	movw	r26, r24
   10af8:	0d 90       	ld	r0, X+
   10afa:	00 20       	and	r0, r0
   10afc:	e9 f7       	brne	.-6      	; 0x10af8 <arb_open+0x2a>
   10afe:	7d 01       	movw	r14, r26
   10b00:	08 94       	sec
   10b02:	e1 08       	sbc	r14, r1
   10b04:	f1 08       	sbc	r15, r1
   10b06:	e8 1a       	sub	r14, r24
   10b08:	f9 0a       	sbc	r15, r25

   pc_devName = strtok( pc_name, "/");
   10b0a:	61 e6       	ldi	r22, 0x61	; 97
   10b0c:	71 e2       	ldi	r23, 0x21	; 33
   10b0e:	0e 94 de b7 	call	0x16fbc	; 0x16fbc <strtok>
   10b12:	b8 2e       	mov	r11, r24
   10b14:	a9 2e       	mov	r10, r25

   s_size1 -= (strlen( pc_devName) + 1);
   10b16:	e8 2f       	mov	r30, r24
   10b18:	f9 2f       	mov	r31, r25
   10b1a:	df 01       	movw	r26, r30
   10b1c:	0d 90       	ld	r0, X+
   10b1e:	00 20       	and	r0, r0
   10b20:	e9 f7       	brne	.-6      	; 0x10b1c <arb_open+0x4e>
   10b22:	8d 01       	movw	r16, r26
   10b24:	01 50       	subi	r16, 0x01	; 1
   10b26:	10 40       	sbci	r17, 0x00	; 0
   10b28:	0e 1b       	sub	r16, r30
   10b2a:	1f 0b       	sbc	r17, r31

   /*------------------------------------------------------------------------*
    * The characters after the first '/' represent the file path
    *------------------------------------------------------------------------*/
   pc_fileName = strtok( NULL, "/");
   10b2c:	80 e0       	ldi	r24, 0x00	; 0
   10b2e:	90 e0       	ldi	r25, 0x00	; 0
   10b30:	61 e6       	ldi	r22, 0x61	; 97
   10b32:	71 e2       	ldi	r23, 0x21	; 33
   10b34:	0e 94 de b7 	call	0x16fbc	; 0x16fbc <strtok>
   10b38:	6c 01       	movw	r12, r24

   s_size2 = strlen( pc_fileName);
   10b3a:	dc 01       	movw	r26, r24
   10b3c:	0d 90       	ld	r0, X+
   10b3e:	00 20       	and	r0, r0
   10b40:	e9 f7       	brne	.-6      	; 0x10b3c <arb_open+0x6e>
   10b42:	11 97       	sbiw	r26, 0x01	; 1
   10b44:	a8 1b       	sub	r26, r24
   10b46:	b9 0b       	sbc	r27, r25

   /*------------------------------------------------------------------------*
    * Are there characters left after the second token?
    *------------------------------------------------------------------------*/
   if( (s_size1 > s_size2) && (pc_fileName != NULL)) /*Yes*/
   10b48:	00 95       	com	r16
   10b4a:	10 95       	com	r17
   10b4c:	0e 0d       	add	r16, r14
   10b4e:	1f 1d       	adc	r17, r15
   10b50:	a0 17       	cp	r26, r16
   10b52:	b1 07       	cpc	r27, r17
   10b54:	34 f4       	brge	.+12     	; 0x10b62 <arb_open+0x94>
   10b56:	00 97       	sbiw	r24, 0x00	; 0
   10b58:	21 f0       	breq	.+8      	; 0x10b62 <arb_open+0x94>
   {

      /*---------------------------------------------------------------------*
       * Replace the backslash removed by strtok.
       *---------------------------------------------------------------------*/
      pc_fileName[s_size2] = '/';
   10b5a:	a8 0f       	add	r26, r24
   10b5c:	b9 1f       	adc	r27, r25
   10b5e:	8f e2       	ldi	r24, 0x2F	; 47
   10b60:	8c 93       	st	X, r24
   }

   /*------------------------------------------------------------------------*
    * Search the active device list for a device with this name...
    *------------------------------------------------------------------------*/
   t_devLink = arb_getDeviceLinkByName( pc_devName);
   10b62:	8b 2d       	mov	r24, r11
   10b64:	9a 2d       	mov	r25, r10
   10b66:	0e 94 16 84 	call	0x1082c	; 0x1082c <arb_getDeviceLinkByName>
   10b6a:	8a 83       	std	Y+2, r24	; 0x02
   10b6c:	9b 83       	std	Y+3, r25	; 0x03

   if( t_devLink == (t_LINKHNDL)ARB_DEVICE_NOT_FOUND)
   10b6e:	8a 81       	ldd	r24, Y+2	; 0x02
   10b70:	9b 81       	ldd	r25, Y+3	; 0x03
   10b72:	87 5f       	subi	r24, 0xF7	; 247
   10b74:	9f 4f       	sbci	r25, 0xFF	; 255
   10b76:	29 f4       	brne	.+10     	; 0x10b82 <arb_open+0xb4>
   {
      HAL_END_CRITICAL(); //Enable interrupts
   10b78:	89 81       	ldd	r24, Y+1	; 0x01
   10b7a:	8f bf       	out	0x3f, r24	; 63
   10b7c:	27 ef       	ldi	r18, 0xF7	; 247
   10b7e:	3f ef       	ldi	r19, 0xFF	; 255
   10b80:	5c c0       	rjmp	.+184    	; 0x10c3a <arb_open+0x16c>

   /*------------------------------------------------------------------------*
    * Create a new 'link' in the list which we will use as a  'user space'
    * handle to this device
    *-----------------------------------------------------------------------*/
   t_hndlLink = utl_createLink( sizeof(t_devHandle));
   10b82:	89 e0       	ldi	r24, 0x09	; 9
   10b84:	90 e0       	ldi	r25, 0x00	; 0
   10b86:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   10b8a:	8c 83       	std	Y+4, r24	; 0x04
   10b8c:	9d 83       	std	Y+5, r25	; 0x05

   if( t_hndlLink < 0)
   10b8e:	8c 81       	ldd	r24, Y+4	; 0x04
   10b90:	9d 81       	ldd	r25, Y+5	; 0x05
   10b92:	97 ff       	sbrs	r25, 7
   10b94:	05 c0       	rjmp	.+10     	; 0x10ba0 <arb_open+0xd2>
   {
      HAL_END_CRITICAL(); //Enable interrupts
   10b96:	89 81       	ldd	r24, Y+1	; 0x01
   10b98:	8f bf       	out	0x3f, r24	; 63
   10b9a:	2f ef       	ldi	r18, 0xFF	; 255
   10b9c:	3f ef       	ldi	r19, 0xFF	; 255
   10b9e:	4d c0       	rjmp	.+154    	; 0x10c3a <arb_open+0x16c>

   /*------------------------------------------------------------------------*
    * Grab the record for this particular device driver the handle is being
    * opened against.
    *------------------------------------------------------------------------*/
   pt_device = (t_device *)UTL_GET_LINK_ELEMENT_PTR(t_devLink);
   10ba0:	ea 81       	ldd	r30, Y+2	; 0x02
   10ba2:	fb 81       	ldd	r31, Y+3	; 0x03
   10ba4:	a0 81       	ld	r26, Z
   10ba6:	b1 81       	ldd	r27, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * Grab the a ptr to the record for the user-space handle
    *------------------------------------------------------------------------*/
   pt_devHandle = (t_devHandle *)UTL_GET_LINK_ELEMENT_PTR(t_hndlLink);
   10ba8:	ec 81       	ldd	r30, Y+4	; 0x04
   10baa:	fd 81       	ldd	r31, Y+5	; 0x05
   10bac:	00 81       	ld	r16, Z
   10bae:	11 81       	ldd	r17, Z+1	; 0x01
{

   /*------------------------------------------------------------------------*
    * Initialize this new memory region to 0
    *------------------------------------------------------------------------*/
   memset( (*pt_new), 0, sizeof( t_devHandle));
   10bb0:	89 e0       	ldi	r24, 0x09	; 9
   10bb2:	f8 01       	movw	r30, r16
   10bb4:	11 92       	st	Z+, r1
   10bb6:	8a 95       	dec	r24
   10bb8:	e9 f7       	brne	.-6      	; 0x10bb4 <arb_open+0xe6>

   /*------------------------------------------------------------------------*
    * Increment the count of handles opened against this particular device
    * driver.
    *------------------------------------------------------------------------*/
   (*pt_dev)->c_numDevHandles++;
   10bba:	52 96       	adiw	r26, 0x12	; 18
   10bbc:	8c 91       	ld	r24, X
   10bbe:	52 97       	sbiw	r26, 0x12	; 18
   10bc0:	8f 5f       	subi	r24, 0xFF	; 255
   10bc2:	52 96       	adiw	r26, 0x12	; 18
   10bc4:	8c 93       	st	X, r24
   10bc6:	52 97       	sbiw	r26, 0x12	; 18

   (*pt_new)->pt_dev = (*pt_dev);
   10bc8:	f8 01       	movw	r30, r16
   10bca:	a0 83       	st	Z, r26
   10bcc:	b1 83       	std	Z+1, r27	; 0x01

   (*pt_new)->c_flags = c_flags;
   10bce:	94 82       	std	Z+4, r9	; 0x04

   /*------------------------------------------------------------------------*
    * Temporarily use the private data ptr to store the location of the
    * file name- this is only used for files being stored on the hard drive.
    *------------------------------------------------------------------------*/
   (*pt_new)->pv_privateData = (void *)(*pc_fileName);
   10bd0:	c2 82       	std	Z+2, r12	; 0x02
   10bd2:	d3 82       	std	Z+3, r13	; 0x03

   /*------------------------------------------------------------------------*
    * Add the new handle to this particular device on the list of open
    * user-space handles.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeHandles,
   10bd4:	80 91 7d 21 	lds	r24, 0x217D
   10bd8:	90 91 7e 21 	lds	r25, 0x217E
   10bdc:	6c 81       	ldd	r22, Y+4	; 0x04
   10bde:	7d 81       	ldd	r23, Y+5	; 0x05
   10be0:	41 e0       	ldi	r20, 0x01	; 1
   10be2:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           true);

   /*------------------------------------------------------------------------*
    * Finished creating handle, enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   10be6:	89 81       	ldd	r24, Y+1	; 0x01
   10be8:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Call the device driver's 'open' routine
    *------------------------------------------------------------------------*/
   if( pt_devHandle->pt_dev->pt_devOps != NULL)
   10bea:	d8 01       	movw	r26, r16
   10bec:	ed 91       	ld	r30, X+
   10bee:	fc 91       	ld	r31, X
   10bf0:	03 88       	ldd	r0, Z+19	; 0x13
   10bf2:	f4 89       	ldd	r31, Z+20	; 0x14
   10bf4:	e0 2d       	mov	r30, r0
   10bf6:	30 97       	sbiw	r30, 0x00	; 0
   10bf8:	19 f4       	brne	.+6      	; 0x10c00 <arb_open+0x132>
   10bfa:	2d ef       	ldi	r18, 0xFD	; 253
   10bfc:	3f ef       	ldi	r19, 0xFF	; 255
   10bfe:	1d c0       	rjmp	.+58     	; 0x10c3a <arb_open+0x16c>
   {
      t_err = pt_devHandle->pt_dev->pt_devOps->pf_open( (t_DEVHANDLE)
   10c00:	01 90       	ld	r0, Z+
   10c02:	f0 81       	ld	r31, Z
   10c04:	e0 2d       	mov	r30, r0
   10c06:	c8 01       	movw	r24, r16
   10c08:	19 95       	eicall
   10c0a:	e8 2e       	mov	r14, r24
      pt_devHandle);

      if( t_err < 0)
   10c0c:	87 ff       	sbrs	r24, 7
   10c0e:	13 c0       	rjmp	.+38     	; 0x10c36 <arb_open+0x168>

         /*------------------------------------------------------------------*
          * Decrement the count of handles opened against this particular
          * device driver.
          *------------------------------------------------------------------*/
         pt_devHandle->pt_dev->c_numDevHandles--;
   10c10:	d8 01       	movw	r26, r16
   10c12:	ed 91       	ld	r30, X+
   10c14:	fc 91       	ld	r31, X
   10c16:	82 89       	ldd	r24, Z+18	; 0x12
   10c18:	81 50       	subi	r24, 0x01	; 1
   10c1a:	82 8b       	std	Z+18, r24	; 0x12

         utl_destroyLink( gt_activeHandles,
   10c1c:	80 91 7d 21 	lds	r24, 0x217D
   10c20:	90 91 7e 21 	lds	r25, 0x217E
   10c24:	6c 81       	ldd	r22, Y+4	; 0x04
   10c26:	7d 81       	ldd	r23, Y+5	; 0x05
   10c28:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                          t_hndlLink);

         return (t_DEVHANDLE)t_err;
   10c2c:	2e 2d       	mov	r18, r14
   10c2e:	33 27       	eor	r19, r19
   10c30:	27 fd       	sbrc	r18, 7
   10c32:	30 95       	com	r19
   10c34:	02 c0       	rjmp	.+4      	; 0x10c3a <arb_open+0x16c>
   else
   {
      return (t_DEVHANDLE)ARB_NULL_PTR;
   }

   return (t_DEVHANDLE)t_hndlLink;
   10c36:	2c 81       	ldd	r18, Y+4	; 0x04
   10c38:	3d 81       	ldd	r19, Y+5	; 0x05

}/*End open*/
   10c3a:	c9 01       	movw	r24, r18
   10c3c:	25 96       	adiw	r28, 0x05	; 5
   10c3e:	cd bf       	out	0x3d, r28	; 61
   10c40:	de bf       	out	0x3e, r29	; 62
   10c42:	cf 91       	pop	r28
   10c44:	df 91       	pop	r29
   10c46:	1f 91       	pop	r17
   10c48:	0f 91       	pop	r16
   10c4a:	ff 90       	pop	r15
   10c4c:	ef 90       	pop	r14
   10c4e:	df 90       	pop	r13
   10c50:	cf 90       	pop	r12
   10c52:	bf 90       	pop	r11
   10c54:	af 90       	pop	r10
   10c56:	9f 90       	pop	r9
   10c58:	08 95       	ret

00010c5a <arb_stackOverflow>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_stackOverflow( void)
{
   10c5a:	0f 93       	push	r16
   10c5c:	1f 93       	push	r17
   10c5e:	df 93       	push	r29
   10c60:	cf 93       	push	r28
   10c62:	0f 92       	push	r0
   10c64:	cd b7       	in	r28, 0x3d	; 61
   10c66:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * If you have reached this point, a thread's stack has overflowed. This
    * function can never return.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL( );
   10c68:	8f b7       	in	r24, 0x3f	; 63
   10c6a:	89 83       	std	Y+1, r24	; 0x01
   10c6c:	f8 94       	cli

   arb_setPrintfDbgLevel( PRINTF_DBG_HIGH);
   10c6e:	84 e0       	ldi	r24, 0x04	; 4
   10c70:	0e 94 db 8b 	call	0x117b6	; 0x117b6 <arb_setPrintfDbgLevel>

   sprintf( (char *)ac_buff,
   10c74:	00 d0       	rcall	.+0      	; 0x10c76 <arb_stackOverflow+0x1c>
   10c76:	00 d0       	rcall	.+0      	; 0x10c78 <arb_stackOverflow+0x1e>
   10c78:	ad b7       	in	r26, 0x3d	; 61
   10c7a:	be b7       	in	r27, 0x3e	; 62
   10c7c:	11 96       	adiw	r26, 0x01	; 1
   10c7e:	0f e3       	ldi	r16, 0x3F	; 63
   10c80:	15 e2       	ldi	r17, 0x25	; 37
   10c82:	ed b7       	in	r30, 0x3d	; 61
   10c84:	fe b7       	in	r31, 0x3e	; 62
   10c86:	01 83       	std	Z+1, r16	; 0x01
   10c88:	12 83       	std	Z+2, r17	; 0x02
   10c8a:	8f e7       	ldi	r24, 0x7F	; 127
   10c8c:	91 e2       	ldi	r25, 0x21	; 33
   10c8e:	12 96       	adiw	r26, 0x02	; 2
   10c90:	8d 93       	st	X+, r24
   10c92:	9c 93       	st	X, r25
   10c94:	13 97       	sbiw	r26, 0x03	; 3
   10c96:	e0 91 70 25 	lds	r30, 0x2570
   10c9a:	f0 91 71 25 	lds	r31, 0x2571
   10c9e:	80 81       	ld	r24, Z
   10ca0:	14 96       	adiw	r26, 0x04	; 4
   10ca2:	8c 93       	st	X, r24
   10ca4:	14 97       	sbiw	r26, 0x04	; 4
   10ca6:	15 96       	adiw	r26, 0x05	; 5
   10ca8:	1c 92       	st	X, r1
   10caa:	0e 94 a3 b8 	call	0x17146	; 0x17146 <sprintf>
            "\n\rStack Overflow Thread = %d\n\r",
            gpt_activeThread->c_id);

   arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
   10cae:	8d b7       	in	r24, 0x3d	; 61
   10cb0:	9e b7       	in	r25, 0x3e	; 62
   10cb2:	06 96       	adiw	r24, 0x06	; 6
   10cb4:	8d bf       	out	0x3d, r24	; 61
   10cb6:	9e bf       	out	0x3e, r25	; 62
   10cb8:	84 e4       	ldi	r24, 0x44	; 68
   10cba:	b8 01       	movw	r22, r16
   10cbc:	0e 94 6a 8d 	call	0x11ad4	; 0x11ad4 <arb_printf>
               (char *)ac_buff);

   /*------------------------------------------------------------------------*
    * Write the contents of the buffer to the registered devices.
    *------------------------------------------------------------------------*/
   arb_printfFlushBuf();
   10cc0:	0e 94 59 8c 	call	0x118b2	; 0x118b2 <arb_printfFlushBuf>
      
   exit(0);
   10cc4:	80 e0       	ldi	r24, 0x00	; 0
   10cc6:	90 e0       	ldi	r25, 0x00	; 0
   10cc8:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>

00010ccc <arb_idleInit>:

}/*End arb_idle*/

t_THRDHANDLE arb_idleInit( t_stackSize t_idlStack,
                           t_thrdPrio t_pri)
{
   10ccc:	0f 93       	push	r16
   10cce:	9c 01       	movw	r18, r24
   10cd0:	06 2f       	mov	r16, r22
   t_wdConfig t_conf;

   gt_idleObject.t_idleThrdHndl = arb_threadCreate( arb_idle,
   10cd2:	8d e9       	ldi	r24, 0x9D	; 157
   10cd4:	96 e8       	ldi	r25, 0x86	; 134
   10cd6:	6a ea       	ldi	r22, 0xAA	; 170
   10cd8:	70 e0       	ldi	r23, 0x00	; 0
   10cda:	4b eb       	ldi	r20, 0xBB	; 187
   10cdc:	50 e0       	ldi	r21, 0x00	; 0
   10cde:	0e 94 60 9f 	call	0x13ec0	; 0x13ec0 <arb_threadCreate>
   10ce2:	80 93 5d 25 	sts	0x255D, r24
   10ce6:	90 93 5e 25 	sts	0x255E, r25
                                                    0xAA,
                                                    0xBB,
                                                    t_idlStack,
                                                    t_pri);

   if( gt_idleObject.t_idleThrdHndl < 0)
   10cea:	80 91 5d 25 	lds	r24, 0x255D
   10cee:	90 91 5e 25 	lds	r25, 0x255E
   10cf2:	97 fd       	sbrc	r25, 7
   10cf4:	18 c0       	rjmp	.+48     	; 0x10d26 <arb_idleInit+0x5a>
   {
      return (t_THRDHANDLE)gt_idleObject.t_idleThrdHndl;

   }/*End if( gt_idleObject.t_idleThrdHndl < 0)*/

   gt_idleObject.t_wdHndle = hal_requestWdAccess();
   10cf6:	0e 94 52 5d 	call	0xbaa4	; 0xbaa4 <hal_requestWdAccess>
   10cfa:	80 93 5f 25 	sts	0x255F, r24
   10cfe:	90 93 60 25 	sts	0x2560, r25

   if( gt_idleObject.t_wdHndle < 0)
   10d02:	80 91 5f 25 	lds	r24, 0x255F
   10d06:	90 91 60 25 	lds	r25, 0x2560
   10d0a:	97 fd       	sbrc	r25, 7
   10d0c:	11 c0       	rjmp	.+34     	; 0x10d30 <arb_idleInit+0x64>
      return (t_THRDHANDLE)ARB_HAL_ERROR;
   }

   t_conf.i_period = IDLE_WATCHDOG_RESET_PERIOD; /*msec*/

   if( hal_configureWd( gt_idleObject.t_wdHndle, t_conf))
   10d0e:	80 91 5f 25 	lds	r24, 0x255F
   10d12:	90 91 60 25 	lds	r25, 0x2560
   10d16:	40 e4       	ldi	r20, 0x40	; 64
   10d18:	5f e1       	ldi	r21, 0x1F	; 31
   10d1a:	60 e0       	ldi	r22, 0x00	; 0
   10d1c:	70 e0       	ldi	r23, 0x00	; 0
   10d1e:	0e 94 6b 5c 	call	0xb8d6	; 0xb8d6 <hal_configureWd>
   10d22:	88 23       	and	r24, r24
   10d24:	29 f4       	brne	.+10     	; 0x10d30 <arb_idleInit+0x64>
   {
     return (t_THRDHANDLE)ARB_HAL_ERROR;
   }

   return gt_idleObject.t_idleThrdHndl;
   10d26:	20 91 5d 25 	lds	r18, 0x255D
   10d2a:	30 91 5e 25 	lds	r19, 0x255E
   10d2e:	02 c0       	rjmp	.+4      	; 0x10d34 <arb_idleInit+0x68>
   10d30:	26 ef       	ldi	r18, 0xF6	; 246
   10d32:	3f ef       	ldi	r19, 0xFF	; 255

}/*End arb_idleInit*/
   10d34:	c9 01       	movw	r24, r18
   10d36:	0f 91       	pop	r16
   10d38:	08 95       	ret

00010d3a <arb_idle>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_idle( t_parameters t_param,
               t_arguments  t_args)
{
   10d3a:	2f 92       	push	r2
   10d3c:	3f 92       	push	r3
   10d3e:	4f 92       	push	r4
   10d40:	5f 92       	push	r5
   10d42:	6f 92       	push	r6
   10d44:	7f 92       	push	r7
   10d46:	8f 92       	push	r8
   10d48:	9f 92       	push	r9
   10d4a:	af 92       	push	r10
   10d4c:	bf 92       	push	r11
   10d4e:	cf 92       	push	r12
   10d50:	df 92       	push	r13
   10d52:	ef 92       	push	r14
   10d54:	ff 92       	push	r15
   10d56:	0f 93       	push	r16
   10d58:	1f 93       	push	r17
   10d5a:	df 93       	push	r29
   10d5c:	cf 93       	push	r28
   10d5e:	cd b7       	in	r28, 0x3d	; 61
   10d60:	de b7       	in	r29, 0x3e	; 62
   10d62:	c8 56       	subi	r28, 0x68	; 104
   10d64:	d0 40       	sbci	r29, 0x00	; 0
   10d66:	cd bf       	out	0x3d, r28	; 61
   10d68:	de bf       	out	0x3e, r29	; 62
   uint32_t i_counter = 0;

   /*------------------------------------------------------------------------*
    * Start the watchdog timer.
    *------------------------------------------------------------------------*/
   hal_wdEnable( gt_idleObject.t_wdHndle);
   10d6a:	80 91 5f 25 	lds	r24, 0x255F
   10d6e:	90 91 60 25 	lds	r25, 0x2560
   10d72:	0e 94 19 5d 	call	0xba32	; 0xba32 <hal_wdEnable>
   10d76:	a6 96       	adiw	r28, 0x26	; 38
   10d78:	1f ae       	std	Y+63, r1	; 0x3f
   10d7a:	a6 97       	sbiw	r28, 0x26	; 38
   10d7c:	a7 96       	adiw	r28, 0x27	; 39
   10d7e:	1f ae       	std	Y+63, r1	; 0x3f
   10d80:	a7 97       	sbiw	r28, 0x27	; 39
   10d82:	a8 96       	adiw	r28, 0x28	; 40
   10d84:	1f ae       	std	Y+63, r1	; 0x3f
   10d86:	a8 97       	sbiw	r28, 0x28	; 40
   10d88:	a9 96       	adiw	r28, 0x29	; 41
   10d8a:	1f ae       	std	Y+63, r1	; 0x3f
   10d8c:	a9 97       	sbiw	r28, 0x29	; 41
   10d8e:	22 24       	eor	r2, r2
   10d90:	33 24       	eor	r3, r3
   10d92:	44 24       	eor	r4, r4
   10d94:	55 24       	eor	r5, r5
   10d96:	66 24       	eor	r6, r6
   10d98:	77 24       	eor	r7, r7
   10d9a:	43 01       	movw	r8, r6

   l_prevM = 0;

   while( RUN_FOREVER)
   {
      l_currM = arb_sysMsecNow();
   10d9c:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>

      l_delta = arb_sysMsecDelta( l_currM,
   10da0:	a6 96       	adiw	r28, 0x26	; 38
   10da2:	af ac       	ldd	r10, Y+63	; 0x3f
   10da4:	a6 97       	sbiw	r28, 0x26	; 38
   10da6:	a7 96       	adiw	r28, 0x27	; 39
   10da8:	bf ac       	ldd	r11, Y+63	; 0x3f
   10daa:	a7 97       	sbiw	r28, 0x27	; 39
   10dac:	a8 96       	adiw	r28, 0x28	; 40
   10dae:	cf ac       	ldd	r12, Y+63	; 0x3f
   10db0:	a8 97       	sbiw	r28, 0x28	; 40
   10db2:	a9 96       	adiw	r28, 0x29	; 41
   10db4:	df ac       	ldd	r13, Y+63	; 0x3f
   10db6:	a9 97       	sbiw	r28, 0x29	; 41
   10db8:	71 01       	movw	r14, r2
   10dba:	82 01       	movw	r16, r4
   10dbc:	0e 94 a1 9b 	call	0x13742	; 0x13742 <arb_sysMsecDelta>
                                  l_prevM);

      if( l_delta >= IDLE_WATCHDOG_PET_RATE)
   10dc0:	99 23       	and	r25, r25
   10dc2:	91 f4       	brne	.+36     	; 0x10de8 <arb_idle+0xae>
   10dc4:	88 23       	and	r24, r24
   10dc6:	81 f4       	brne	.+32     	; 0x10de8 <arb_idle+0xae>
   10dc8:	77 23       	and	r23, r23
   10dca:	71 f4       	brne	.+28     	; 0x10de8 <arb_idle+0xae>
   10dcc:	66 23       	and	r22, r22
   10dce:	61 f4       	brne	.+24     	; 0x10de8 <arb_idle+0xae>
   10dd0:	55 23       	and	r21, r21
   10dd2:	51 f4       	brne	.+20     	; 0x10de8 <arb_idle+0xae>
   10dd4:	44 23       	and	r20, r20
   10dd6:	41 f4       	brne	.+16     	; 0x10de8 <arb_idle+0xae>
   10dd8:	38 30       	cpi	r19, 0x08	; 8
   10dda:	30 f4       	brcc	.+12     	; 0x10de8 <arb_idle+0xae>
   10ddc:	37 30       	cpi	r19, 0x07	; 7
   10dde:	09 f0       	breq	.+2      	; 0x10de2 <arb_idle+0xa8>
   10de0:	45 c0       	rjmp	.+138    	; 0x10e6c <arb_idle+0x132>
   10de2:	20 3d       	cpi	r18, 0xD0	; 208
   10de4:	08 f4       	brcc	.+2      	; 0x10de8 <arb_idle+0xae>
   10de6:	42 c0       	rjmp	.+132    	; 0x10e6c <arb_idle+0x132>
      {
         i_counter++;
   10de8:	08 94       	sec
   10dea:	61 1c       	adc	r6, r1
   10dec:	71 1c       	adc	r7, r1
   10dee:	81 1c       	adc	r8, r1
   10df0:	91 1c       	adc	r9, r1

         /*------------------------------------------------------------------*
          * Store the previous time...
          *------------------------------------------------------------------*/
         l_prevM = arb_sysMsecNow();
   10df2:	0e 94 90 9b 	call	0x13720	; 0x13720 <arb_sysMsecNow>
   10df6:	a6 96       	adiw	r28, 0x26	; 38
   10df8:	2f af       	std	Y+63, r18	; 0x3f
   10dfa:	a6 97       	sbiw	r28, 0x26	; 38
   10dfc:	a7 96       	adiw	r28, 0x27	; 39
   10dfe:	3f af       	std	Y+63, r19	; 0x3f
   10e00:	a7 97       	sbiw	r28, 0x27	; 39
   10e02:	a8 96       	adiw	r28, 0x28	; 40
   10e04:	4f af       	std	Y+63, r20	; 0x3f
   10e06:	a8 97       	sbiw	r28, 0x28	; 40
   10e08:	a9 96       	adiw	r28, 0x29	; 41
   10e0a:	5f af       	std	Y+63, r21	; 0x3f
   10e0c:	a9 97       	sbiw	r28, 0x29	; 41
   10e0e:	1b 01       	movw	r2, r22
   10e10:	2c 01       	movw	r4, r24

         sprintf( (void *)ac_msg,
   10e12:	8d b7       	in	r24, 0x3d	; 61
   10e14:	9e b7       	in	r25, 0x3e	; 62
   10e16:	08 97       	sbiw	r24, 0x08	; 8
   10e18:	8d bf       	out	0x3d, r24	; 61
   10e1a:	9e bf       	out	0x3e, r25	; 62
   10e1c:	0d b7       	in	r16, 0x3d	; 61
   10e1e:	1e b7       	in	r17, 0x3e	; 62
   10e20:	0f 5f       	subi	r16, 0xFF	; 255
   10e22:	1f 4f       	sbci	r17, 0xFF	; 255
   10e24:	81 e0       	ldi	r24, 0x01	; 1
   10e26:	90 e0       	ldi	r25, 0x00	; 0
   10e28:	8c 0f       	add	r24, r28
   10e2a:	9d 1f       	adc	r25, r29
   10e2c:	ed b7       	in	r30, 0x3d	; 61
   10e2e:	fe b7       	in	r31, 0x3e	; 62
   10e30:	81 83       	std	Z+1, r24	; 0x01
   10e32:	92 83       	std	Z+2, r25	; 0x02
   10e34:	8e e9       	ldi	r24, 0x9E	; 158
   10e36:	91 e2       	ldi	r25, 0x21	; 33
   10e38:	f8 01       	movw	r30, r16
   10e3a:	82 83       	std	Z+2, r24	; 0x02
   10e3c:	93 83       	std	Z+3, r25	; 0x03
   10e3e:	c4 01       	movw	r24, r8
   10e40:	b3 01       	movw	r22, r6
   10e42:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
   10e46:	f8 01       	movw	r30, r16
   10e48:	64 83       	std	Z+4, r22	; 0x04
   10e4a:	75 83       	std	Z+5, r23	; 0x05
   10e4c:	86 83       	std	Z+6, r24	; 0x06
   10e4e:	97 83       	std	Z+7, r25	; 0x07
   10e50:	0e 94 a3 b8 	call	0x17146	; 0x17146 <sprintf>
                  "Petting watchdog timer %7.0f\r",
                  (double)i_counter);

         arb_printf( PRINTF_DBG_LOW | PRINTF_DBG_SHOW_TIME,
   10e54:	8d b7       	in	r24, 0x3d	; 61
   10e56:	9e b7       	in	r25, 0x3e	; 62
   10e58:	08 96       	adiw	r24, 0x08	; 8
   10e5a:	8d bf       	out	0x3d, r24	; 61
   10e5c:	9e bf       	out	0x3e, r25	; 62
   10e5e:	81 e4       	ldi	r24, 0x41	; 65
   10e60:	be 01       	movw	r22, r28
   10e62:	6f 5f       	subi	r22, 0xFF	; 255
   10e64:	7f 4f       	sbci	r23, 0xFF	; 255
   10e66:	0e 94 6a 8d 	call	0x11ad4	; 0x11ad4 <arb_printf>
                     ac_msg);

         /*------------------------------------------------------------------*
          * Pet the watchdog timer...
          *------------------------------------------------------------------*/
         HAL_WD_RESET();
   10e6a:	a8 95       	wdr
      }/*End if( i_delta >= IDLE_WATCHDOG_PET_RATE)*/

      /*---------------------------------------------------------------------*
       * Write the contents of the buffer to the registered devices.
       *---------------------------------------------------------------------*/
      arb_printfFlushBuf();
   10e6c:	0e 94 59 8c 	call	0x118b2	; 0x118b2 <arb_printfFlushBuf>
   10e70:	95 cf       	rjmp	.-214    	; 0x10d9c <arb_idle+0x62>

00010e72 <arb_mailboxGetQueueMaxSize>:
   return ARB_PASSED;

}/*End arb_mailboxDestroy*/

int16_t arb_mailboxGetQueueMaxSize( t_MAILBOXHNDL t_mbxHandle)
{
   10e72:	df 93       	push	r29
   10e74:	cf 93       	push	r28
   10e76:	0f 92       	push	r0
   10e78:	0f 92       	push	r0
   10e7a:	cd b7       	in	r28, 0x3d	; 61
   10e7c:	de b7       	in	r29, 0x3e	; 62
   10e7e:	89 83       	std	Y+1, r24	; 0x01
   10e80:	9a 83       	std	Y+2, r25	; 0x02
   t_mailbox *pt_mbx;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   10e82:	e9 81       	ldd	r30, Y+1	; 0x01
   10e84:	fa 81       	ldd	r31, Y+2	; 0x02
   10e86:	20 91 c8 21 	lds	r18, 0x21C8
   10e8a:	30 91 c9 21 	lds	r19, 0x21C9
   10e8e:	84 81       	ldd	r24, Z+4	; 0x04
   10e90:	95 81       	ldd	r25, Z+5	; 0x05
   10e92:	82 17       	cp	r24, r18
   10e94:	93 07       	cpc	r25, r19
   10e96:	19 f0       	breq	.+6      	; 0x10e9e <arb_mailboxGetQueueMaxSize+0x2c>
   10e98:	29 ef       	ldi	r18, 0xF9	; 249
   10e9a:	3f ef       	ldi	r19, 0xFF	; 255
   10e9c:	07 c0       	rjmp	.+14     	; 0x10eac <arb_mailboxGetQueueMaxSize+0x3a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   10e9e:	e9 81       	ldd	r30, Y+1	; 0x01
   10ea0:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_mbx->s_queueSize;
   10ea2:	01 90       	ld	r0, Z+
   10ea4:	f0 81       	ld	r31, Z
   10ea6:	e0 2d       	mov	r30, r0
   10ea8:	26 81       	ldd	r18, Z+6	; 0x06
   10eaa:	37 81       	ldd	r19, Z+7	; 0x07

}/*End arb_mailboxGetQueueMaxSize*/
   10eac:	c9 01       	movw	r24, r18
   10eae:	0f 90       	pop	r0
   10eb0:	0f 90       	pop	r0
   10eb2:	cf 91       	pop	r28
   10eb4:	df 91       	pop	r29
   10eb6:	08 95       	ret

00010eb8 <arb_mailboxGetNumMessages>:

int16_t arb_mailboxGetNumMessages( t_MAILBOXHNDL t_mbxHandle)
{
   10eb8:	df 93       	push	r29
   10eba:	cf 93       	push	r28
   10ebc:	0f 92       	push	r0
   10ebe:	0f 92       	push	r0
   10ec0:	cd b7       	in	r28, 0x3d	; 61
   10ec2:	de b7       	in	r29, 0x3e	; 62
   10ec4:	89 83       	std	Y+1, r24	; 0x01
   10ec6:	9a 83       	std	Y+2, r25	; 0x02
   t_mailbox *pt_mbx;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   10ec8:	e9 81       	ldd	r30, Y+1	; 0x01
   10eca:	fa 81       	ldd	r31, Y+2	; 0x02
   10ecc:	20 91 c8 21 	lds	r18, 0x21C8
   10ed0:	30 91 c9 21 	lds	r19, 0x21C9
   10ed4:	84 81       	ldd	r24, Z+4	; 0x04
   10ed6:	95 81       	ldd	r25, Z+5	; 0x05
   10ed8:	82 17       	cp	r24, r18
   10eda:	93 07       	cpc	r25, r19
   10edc:	19 f0       	breq	.+6      	; 0x10ee4 <arb_mailboxGetNumMessages+0x2c>
   10ede:	29 ef       	ldi	r18, 0xF9	; 249
   10ee0:	3f ef       	ldi	r19, 0xFF	; 255
   10ee2:	07 c0       	rjmp	.+14     	; 0x10ef2 <arb_mailboxGetNumMessages+0x3a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   10ee4:	e9 81       	ldd	r30, Y+1	; 0x01
   10ee6:	fa 81       	ldd	r31, Y+2	; 0x02

   return pt_mbx->s_numMessages;
   10ee8:	01 90       	ld	r0, Z+
   10eea:	f0 81       	ld	r31, Z
   10eec:	e0 2d       	mov	r30, r0
   10eee:	26 85       	ldd	r18, Z+14	; 0x0e
   10ef0:	37 85       	ldd	r19, Z+15	; 0x0f

}/*End arb_mailboxGetNumMessages*/
   10ef2:	c9 01       	movw	r24, r18
   10ef4:	0f 90       	pop	r0
   10ef6:	0f 90       	pop	r0
   10ef8:	cf 91       	pop	r28
   10efa:	df 91       	pop	r29
   10efc:	08 95       	ret

00010efe <arb_mailboxCreate>:
   return (int16_t)s_size; /*Return the number of bytes written*/

}/*End arb_mailboxWrite*/

t_MAILBOXHNDL arb_mailboxCreate( t_mailboxConfig t_config)
{
   10efe:	8f 92       	push	r8
   10f00:	9f 92       	push	r9
   10f02:	af 92       	push	r10
   10f04:	bf 92       	push	r11
   10f06:	cf 92       	push	r12
   10f08:	df 92       	push	r13
   10f0a:	ef 92       	push	r14
   10f0c:	ff 92       	push	r15
   10f0e:	0f 93       	push	r16
   10f10:	1f 93       	push	r17
   10f12:	df 93       	push	r29
   10f14:	cf 93       	push	r28
   10f16:	cd b7       	in	r28, 0x3d	; 61
   10f18:	de b7       	in	r29, 0x3e	; 62
   10f1a:	2a 97       	sbiw	r28, 0x0a	; 10
   10f1c:	cd bf       	out	0x3d, r28	; 61
   10f1e:	de bf       	out	0x3e, r29	; 62
   10f20:	2b 83       	std	Y+3, r18	; 0x03
   10f22:	3c 83       	std	Y+4, r19	; 0x04
   10f24:	4d 83       	std	Y+5, r20	; 0x05
   10f26:	5e 83       	std	Y+6, r21	; 0x06
   10f28:	6f 83       	std	Y+7, r22	; 0x07
   10f2a:	78 87       	std	Y+8, r23	; 0x08
   10f2c:	89 87       	std	Y+9, r24	; 0x09
   10f2e:	9a 87       	std	Y+10, r25	; 0x0a
   10f30:	a8 2e       	mov	r10, r24
   10f32:	b6 2e       	mov	r11, r22
   10f34:	eb 80       	ldd	r14, Y+3	; 0x03
   10f36:	fc 80       	ldd	r15, Y+4	; 0x04
   10f38:	cd 80       	ldd	r12, Y+5	; 0x05
   10f3a:	de 80       	ldd	r13, Y+6	; 0x06
   10f3c:	97 2e       	mov	r9, r23
   10f3e:	89 2e       	mov	r8, r25
   t_linkedListError t_err;

   /*------------------------------------------------------------------------*
    * Is this a bad configuration?
    *------------------------------------------------------------------------*/
   if( (t_config.b_wrtFromInt == true) && (t_config.t_writeMode == BLOCKING))
   10f40:	88 23       	and	r24, r24
   10f42:	29 f0       	breq	.+10     	; 0x10f4e <arb_mailboxCreate+0x50>
   10f44:	66 23       	and	r22, r22
   10f46:	19 f4       	brne	.+6      	; 0x10f4e <arb_mailboxCreate+0x50>
   10f48:	ea ef       	ldi	r30, 0xFA	; 250
   10f4a:	ff ef       	ldi	r31, 0xFF	; 255
   10f4c:	8c c0       	rjmp	.+280    	; 0x11066 <arb_mailboxCreate+0x168>

   /*------------------------------------------------------------------------*
    * Create a new link handle that will store information about this
    * particular mailbox
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_mailbox) + (t_config.s_queueSize + \
   10f4e:	22 e0       	ldi	r18, 0x02	; 2
   10f50:	30 e0       	ldi	r19, 0x00	; 0
   10f52:	e2 0e       	add	r14, r18
   10f54:	f3 1e       	adc	r15, r19
   10f56:	ec 9c       	mul	r14, r12
   10f58:	c0 01       	movw	r24, r0
   10f5a:	ed 9c       	mul	r14, r13
   10f5c:	90 0d       	add	r25, r0
   10f5e:	fc 9c       	mul	r15, r12
   10f60:	90 0d       	add	r25, r0
   10f62:	11 24       	eor	r1, r1
   10f64:	ae ef       	ldi	r26, 0xFE	; 254
   10f66:	bf ef       	ldi	r27, 0xFF	; 255
   10f68:	ea 0e       	add	r14, r26
   10f6a:	fb 1e       	adc	r15, r27
   10f6c:	46 96       	adiw	r24, 0x16	; 22
   10f6e:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   10f72:	89 83       	std	Y+1, r24	; 0x01
   10f74:	9a 83       	std	Y+2, r25	; 0x02
   MBX_HDR_FIELD_BYTES)*t_config.s_queueDepth);

   if( t_linkHndl < 0)
   10f76:	89 81       	ldd	r24, Y+1	; 0x01
   10f78:	9a 81       	ldd	r25, Y+2	; 0x02
   10f7a:	97 ff       	sbrs	r25, 7
   10f7c:	03 c0       	rjmp	.+6      	; 0x10f84 <arb_mailboxCreate+0x86>
   10f7e:	ef ef       	ldi	r30, 0xFF	; 255
   10f80:	ff ef       	ldi	r31, 0xFF	; 255
   10f82:	71 c0       	rjmp	.+226    	; 0x11066 <arb_mailboxCreate+0x168>

   /*------------------------------------------------------------------------*
    * Add the mailbox 'link' onto the list containing all the open mailbox's 
    * on the system.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeMbx,
   10f84:	80 91 c8 21 	lds	r24, 0x21C8
   10f88:	90 91 c9 21 	lds	r25, 0x21C9
   10f8c:	69 81       	ldd	r22, Y+1	; 0x01
   10f8e:	7a 81       	ldd	r23, Y+2	; 0x02
   10f90:	41 e0       	ldi	r20, 0x01	; 1
   10f92:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the mailbox is stored.
    *------------------------------------------------------------------------*/
   pt_newMbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   10f96:	e9 81       	ldd	r30, Y+1	; 0x01
   10f98:	fa 81       	ldd	r31, Y+2	; 0x02
   10f9a:	00 81       	ld	r16, Z
   10f9c:	11 81       	ldd	r17, Z+1	; 0x01

   pt_newMbx->t_semFillCount = arb_semaphoreCreate( COUNTING);
   10f9e:	80 e0       	ldi	r24, 0x00	; 0
   10fa0:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
   10fa4:	f8 01       	movw	r30, r16
   10fa6:	82 83       	std	Z+2, r24	; 0x02
   10fa8:	93 83       	std	Z+3, r25	; 0x03

   if( pt_newMbx->t_semFillCount < 0)
   10faa:	82 81       	ldd	r24, Z+2	; 0x02
   10fac:	93 81       	ldd	r25, Z+3	; 0x03
   10fae:	97 ff       	sbrs	r25, 7
   10fb0:	04 c0       	rjmp	.+8      	; 0x10fba <arb_mailboxCreate+0xbc>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_semFillCount;
   10fb2:	02 80       	ldd	r0, Z+2	; 0x02
   10fb4:	f3 81       	ldd	r31, Z+3	; 0x03
   10fb6:	e0 2d       	mov	r30, r0
   10fb8:	56 c0       	rjmp	.+172    	; 0x11066 <arb_mailboxCreate+0x168>

   }/*End if( pt_newMbx->t_semFillCount < 0)*/

   arb_semaphoreInit( pt_newMbx->t_semFillCount,
   10fba:	d8 01       	movw	r26, r16
   10fbc:	12 96       	adiw	r26, 0x02	; 2
   10fbe:	8d 91       	ld	r24, X+
   10fc0:	9c 91       	ld	r25, X
   10fc2:	13 97       	sbiw	r26, 0x03	; 3
   10fc4:	60 e0       	ldi	r22, 0x00	; 0
   10fc6:	70 e0       	ldi	r23, 0x00	; 0
   10fc8:	0e 94 cd 93 	call	0x1279a	; 0x1279a <arb_semaphoreInit>
                      0); /*No data in mailbox*/

   pt_newMbx->t_semEmptyCount = arb_semaphoreCreate( COUNTING);
   10fcc:	80 e0       	ldi	r24, 0x00	; 0
   10fce:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
   10fd2:	f8 01       	movw	r30, r16
   10fd4:	84 83       	std	Z+4, r24	; 0x04
   10fd6:	95 83       	std	Z+5, r25	; 0x05

   if( pt_newMbx->t_semEmptyCount < 0)
   10fd8:	84 81       	ldd	r24, Z+4	; 0x04
   10fda:	95 81       	ldd	r25, Z+5	; 0x05
   10fdc:	97 ff       	sbrs	r25, 7
   10fde:	04 c0       	rjmp	.+8      	; 0x10fe8 <arb_mailboxCreate+0xea>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_semEmptyCount;
   10fe0:	04 80       	ldd	r0, Z+4	; 0x04
   10fe2:	f5 81       	ldd	r31, Z+5	; 0x05
   10fe4:	e0 2d       	mov	r30, r0
   10fe6:	3f c0       	rjmp	.+126    	; 0x11066 <arb_mailboxCreate+0x168>

   }/*End if( pt_newMbx->t_semEmptyCount < 0)*/

   arb_semaphoreInit( pt_newMbx->t_semEmptyCount,
   10fe8:	d8 01       	movw	r26, r16
   10fea:	14 96       	adiw	r26, 0x04	; 4
   10fec:	8d 91       	ld	r24, X+
   10fee:	9c 91       	ld	r25, X
   10ff0:	15 97       	sbiw	r26, 0x05	; 5
   10ff2:	b6 01       	movw	r22, r12
   10ff4:	0e 94 cd 93 	call	0x1279a	; 0x1279a <arb_semaphoreInit>
                      t_config.s_queueDepth); /*All slots open*/

   pt_newMbx->t_mutex = arb_semaphoreCreate( MUTEX);
   10ff8:	82 e0       	ldi	r24, 0x02	; 2
   10ffa:	0e 94 66 94 	call	0x128cc	; 0x128cc <arb_semaphoreCreate>
   10ffe:	f8 01       	movw	r30, r16
   11000:	80 83       	st	Z, r24
   11002:	91 83       	std	Z+1, r25	; 0x01

   if( pt_newMbx->t_mutex < 0)
   11004:	80 81       	ld	r24, Z
   11006:	91 81       	ldd	r25, Z+1	; 0x01
   11008:	97 ff       	sbrs	r25, 7
   1100a:	04 c0       	rjmp	.+8      	; 0x11014 <arb_mailboxCreate+0x116>
   {
      return (t_MAILBOXHNDL)pt_newMbx->t_mutex;
   1100c:	01 90       	ld	r0, Z+
   1100e:	f0 81       	ld	r31, Z
   11010:	e0 2d       	mov	r30, r0
   11012:	29 c0       	rjmp	.+82     	; 0x11066 <arb_mailboxCreate+0x168>

   }/*End if( pt_newMbx->t_mutex < 0)*/

   pt_newMbx->t_writeMode   = t_config.t_writeMode;
   11014:	d8 01       	movw	r26, r16
   11016:	50 96       	adiw	r26, 0x10	; 16
   11018:	bc 92       	st	X, r11
   1101a:	50 97       	sbiw	r26, 0x10	; 16
   pt_newMbx->t_readMode    = t_config.t_readMode;
   1101c:	51 96       	adiw	r26, 0x11	; 17
   1101e:	9c 92       	st	X, r9
   11020:	51 97       	sbiw	r26, 0x11	; 17
   pt_newMbx->s_queueSize   = t_config.s_queueSize;
   11022:	16 96       	adiw	r26, 0x06	; 6
   11024:	ed 92       	st	X+, r14
   11026:	fc 92       	st	X, r15
   11028:	17 97       	sbiw	r26, 0x07	; 7
   pt_newMbx->s_queueDepth  = t_config.s_queueDepth;
   1102a:	18 96       	adiw	r26, 0x08	; 8
   1102c:	cd 92       	st	X+, r12
   1102e:	dc 92       	st	X, r13
   11030:	19 97       	sbiw	r26, 0x09	; 9
   pt_newMbx->s_numMessages = 0;
   11032:	1e 96       	adiw	r26, 0x0e	; 14
   11034:	1d 92       	st	X+, r1
   11036:	1c 92       	st	X, r1
   11038:	1f 97       	sbiw	r26, 0x0f	; 15
   pt_newMbx->s_wrPtr       = 0;
   1103a:	1a 96       	adiw	r26, 0x0a	; 10
   1103c:	1d 92       	st	X+, r1
   1103e:	1c 92       	st	X, r1
   11040:	1b 97       	sbiw	r26, 0x0b	; 11
   pt_newMbx->s_rdPtr       = 0;
   11042:	1c 96       	adiw	r26, 0x0c	; 12
   11044:	1d 92       	st	X+, r1
   11046:	1c 92       	st	X, r1
   11048:	1d 97       	sbiw	r26, 0x0d	; 13
   pt_newMbx->b_wrtFromInt  = t_config.b_wrtFromInt;
   1104a:	52 96       	adiw	r26, 0x12	; 18
   1104c:	ac 92       	st	X, r10
   1104e:	52 97       	sbiw	r26, 0x12	; 18
   pt_newMbx->b_multRdWr    = t_config.b_multRdWr;
   11050:	53 96       	adiw	r26, 0x13	; 19
   11052:	8c 92       	st	X, r8
   11054:	53 97       	sbiw	r26, 0x13	; 19

   /*------------------------------------------------------------------------*
    * Initialize the queue ptr to the location of the queue which starts
    * with the adjacent address location.
    *------------------------------------------------------------------------*/
   pt_newMbx->pc_queue = (int8_t *)((&pt_newMbx->pc_queue) + 1);
   11056:	c8 01       	movw	r24, r16
   11058:	46 96       	adiw	r24, 0x16	; 22
   1105a:	54 96       	adiw	r26, 0x14	; 20
   1105c:	8d 93       	st	X+, r24
   1105e:	9c 93       	st	X, r25
   11060:	55 97       	sbiw	r26, 0x15	; 21

   /*------------------------------------------------------------------------*
    * Return a handle (or address ) to this semaphore.
    *------------------------------------------------------------------------*/
   return (t_MAILBOXHNDL)t_linkHndl;
   11062:	e9 81       	ldd	r30, Y+1	; 0x01
   11064:	fa 81       	ldd	r31, Y+2	; 0x02

}/*End arb_mailboxCreate*/
   11066:	cf 01       	movw	r24, r30
   11068:	2a 96       	adiw	r28, 0x0a	; 10
   1106a:	cd bf       	out	0x3d, r28	; 61
   1106c:	de bf       	out	0x3e, r29	; 62
   1106e:	cf 91       	pop	r28
   11070:	df 91       	pop	r29
   11072:	1f 91       	pop	r17
   11074:	0f 91       	pop	r16
   11076:	ff 90       	pop	r15
   11078:	ef 90       	pop	r14
   1107a:	df 90       	pop	r13
   1107c:	cf 90       	pop	r12
   1107e:	bf 90       	pop	r11
   11080:	af 90       	pop	r10
   11082:	9f 90       	pop	r9
   11084:	8f 90       	pop	r8
   11086:	08 95       	ret

00011088 <arb_mailboxWrite>:

int16_t arb_mailboxWrite( t_MAILBOXHNDL t_mbxHandle, 
                          /*int8_t c_ID,-Todo allow for multiple readers*/
                          int8_t *pc_buf, 
                          uint16_t s_size) /*Size of the message in pc_buf*/
{
   11088:	ef 92       	push	r14
   1108a:	ff 92       	push	r15
   1108c:	0f 93       	push	r16
   1108e:	1f 93       	push	r17
   11090:	df 93       	push	r29
   11092:	cf 93       	push	r28
   11094:	cd b7       	in	r28, 0x3d	; 61
   11096:	de b7       	in	r29, 0x3e	; 62
   11098:	25 97       	sbiw	r28, 0x05	; 5
   1109a:	cd bf       	out	0x3d, r28	; 61
   1109c:	de bf       	out	0x3e, r29	; 62
   1109e:	8a 83       	std	Y+2, r24	; 0x02
   110a0:	9b 83       	std	Y+3, r25	; 0x03
   110a2:	f6 2e       	mov	r15, r22
   110a4:	e7 2e       	mov	r14, r23
   110a6:	4c 83       	std	Y+4, r20	; 0x04
   110a8:	5d 83       	std	Y+5, r21	; 0x05
   t_error t_err;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   110aa:	ea 81       	ldd	r30, Y+2	; 0x02
   110ac:	fb 81       	ldd	r31, Y+3	; 0x03
   110ae:	20 91 c8 21 	lds	r18, 0x21C8
   110b2:	30 91 c9 21 	lds	r19, 0x21C9
   110b6:	84 81       	ldd	r24, Z+4	; 0x04
   110b8:	95 81       	ldd	r25, Z+5	; 0x05
   110ba:	82 17       	cp	r24, r18
   110bc:	93 07       	cpc	r25, r19
   110be:	19 f0       	breq	.+6      	; 0x110c6 <arb_mailboxWrite+0x3e>
   110c0:	29 ef       	ldi	r18, 0xF9	; 249
   110c2:	3f ef       	ldi	r19, 0xFF	; 255
   110c4:	d3 c0       	rjmp	.+422    	; 0x1126c <arb_mailboxWrite+0x1e4>
   {
      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where information
       * about the mailbox is stored.
       *---------------------------------------------------------------------*/
      pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   110c6:	ea 81       	ldd	r30, Y+2	; 0x02
   110c8:	fb 81       	ldd	r31, Y+3	; 0x03
   110ca:	00 81       	ld	r16, Z
   110cc:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Can the data fit on the queue?
       *---------------------------------------------------------------------*/
      if( s_size > pt_mbx->s_queueSize) /*No*/
   110ce:	2c 81       	ldd	r18, Y+4	; 0x04
   110d0:	3d 81       	ldd	r19, Y+5	; 0x05
   110d2:	d8 01       	movw	r26, r16
   110d4:	16 96       	adiw	r26, 0x06	; 6
   110d6:	8d 91       	ld	r24, X+
   110d8:	9c 91       	ld	r25, X
   110da:	17 97       	sbiw	r26, 0x07	; 7
   110dc:	82 17       	cp	r24, r18
   110de:	93 07       	cpc	r25, r19
   110e0:	18 f4       	brcc	.+6      	; 0x110e8 <arb_mailboxWrite+0x60>
   110e2:	25 ef       	ldi	r18, 0xF5	; 245
   110e4:	3f ef       	ldi	r19, 0xFF	; 255
   110e6:	c2 c0       	rjmp	.+388    	; 0x1126c <arb_mailboxWrite+0x1e4>
      }

      /*---------------------------------------------------------------------*
       * Wait for room on the queue..
       *---------------------------------------------------------------------*/
      t_err = arb_wait( pt_mbx->t_semEmptyCount, pt_mbx->t_writeMode);
   110e8:	f8 01       	movw	r30, r16
   110ea:	84 81       	ldd	r24, Z+4	; 0x04
   110ec:	95 81       	ldd	r25, Z+5	; 0x05
   110ee:	60 89       	ldd	r22, Z+16	; 0x10
   110f0:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
      if( t_err == ARB_PASSED)
   110f4:	88 23       	and	r24, r24
   110f6:	09 f0       	breq	.+2      	; 0x110fa <arb_mailboxWrite+0x72>
   110f8:	b2 c0       	rjmp	.+356    	; 0x1125e <arb_mailboxWrite+0x1d6>
      {
         int8_t *pc_size;
         int16_t s_index;

         if( pt_mbx->b_wrtFromInt == true) /*Always assume multiple 
   110fa:	d8 01       	movw	r26, r16
   110fc:	52 96       	adiw	r26, 0x12	; 18
   110fe:	8c 91       	ld	r24, X
   11100:	88 23       	and	r24, r24
   11102:	09 f4       	brne	.+2      	; 0x11106 <arb_mailboxWrite+0x7e>
   11104:	49 c0       	rjmp	.+146    	; 0x11198 <arb_mailboxWrite+0x110>
         {
            /*---------------------------------------------------------------*
             * We can't perform a mutex inside an interrupt so make sure this 
             * call is atomic by another means.
             *---------------------------------------------------------------*/
            HAL_BEGIN_CRITICAL(); //Disable interrupts
   11106:	8f b7       	in	r24, 0x3f	; 63
   11108:	89 83       	std	Y+1, r24	; 0x01
   1110a:	f8 94       	cli

            /*---------------------------------------------------------------*
             * Store the size in the first two bytes of the current queue
             * location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_wrPtr)*(pt_mbx->s_queueSize + \
   1110c:	f8 01       	movw	r30, r16
   1110e:	86 81       	ldd	r24, Z+6	; 0x06
   11110:	97 81       	ldd	r25, Z+7	; 0x07
   11112:	02 96       	adiw	r24, 0x02	; 2
   11114:	22 85       	ldd	r18, Z+10	; 0x0a
   11116:	33 85       	ldd	r19, Z+11	; 0x0b
   11118:	ac 01       	movw	r20, r24
   1111a:	42 9f       	mul	r20, r18
   1111c:	c0 01       	movw	r24, r0
   1111e:	43 9f       	mul	r20, r19
   11120:	90 0d       	add	r25, r0
   11122:	52 9f       	mul	r21, r18
   11124:	90 0d       	add	r25, r0
   11126:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            pt_mbx->pc_queue[s_index]     = pc_size[0];
   11128:	04 88       	ldd	r0, Z+20	; 0x14
   1112a:	f5 89       	ldd	r31, Z+21	; 0x15
   1112c:	e0 2d       	mov	r30, r0
   1112e:	e8 0f       	add	r30, r24
   11130:	f9 1f       	adc	r31, r25
   11132:	2c 81       	ldd	r18, Y+4	; 0x04
   11134:	20 83       	st	Z, r18
            pt_mbx->pc_queue[s_index + 1] = pc_size[1];
   11136:	d8 01       	movw	r26, r16
   11138:	54 96       	adiw	r26, 0x14	; 20
   1113a:	ed 91       	ld	r30, X+
   1113c:	fc 91       	ld	r31, X
   1113e:	55 97       	sbiw	r26, 0x15	; 21
   11140:	e8 0f       	add	r30, r24
   11142:	f9 1f       	adc	r31, r25
   11144:	2d 81       	ldd	r18, Y+5	; 0x05
   11146:	21 83       	std	Z+1, r18	; 0x01

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   11148:	02 96       	adiw	r24, 0x02	; 2
   1114a:	54 96       	adiw	r26, 0x14	; 20
   1114c:	2d 91       	ld	r18, X+
   1114e:	3c 91       	ld	r19, X
   11150:	55 97       	sbiw	r26, 0x15	; 21
   11152:	28 0f       	add	r18, r24
   11154:	39 1f       	adc	r19, r25
   11156:	4c 81       	ldd	r20, Y+4	; 0x04
   11158:	5d 81       	ldd	r21, Y+5	; 0x05
   1115a:	c9 01       	movw	r24, r18
   1115c:	6f 2d       	mov	r22, r15
   1115e:	7e 2d       	mov	r23, r14
   11160:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
                    s_size);

            /*---------------------------------------------------------------*
             * Increment the write pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_wrPtr++;
   11164:	f8 01       	movw	r30, r16
   11166:	82 85       	ldd	r24, Z+10	; 0x0a
   11168:	93 85       	ldd	r25, Z+11	; 0x0b
   1116a:	01 96       	adiw	r24, 0x01	; 1
   1116c:	82 87       	std	Z+10, r24	; 0x0a
   1116e:	93 87       	std	Z+11, r25	; 0x0b
            if( pt_mbx->s_wrPtr == pt_mbx->s_queueDepth)
   11170:	20 85       	ldd	r18, Z+8	; 0x08
   11172:	31 85       	ldd	r19, Z+9	; 0x09
   11174:	82 17       	cp	r24, r18
   11176:	93 07       	cpc	r25, r19
   11178:	11 f4       	brne	.+4      	; 0x1117e <arb_mailboxWrite+0xf6>
               pt_mbx->s_wrPtr = 0;
   1117a:	12 86       	std	Z+10, r1	; 0x0a
   1117c:	13 86       	std	Z+11, r1	; 0x0b

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages++;
   1117e:	d8 01       	movw	r26, r16
   11180:	1e 96       	adiw	r26, 0x0e	; 14
   11182:	8d 91       	ld	r24, X+
   11184:	9c 91       	ld	r25, X
   11186:	1f 97       	sbiw	r26, 0x0f	; 15
   11188:	01 96       	adiw	r24, 0x01	; 1
   1118a:	1e 96       	adiw	r26, 0x0e	; 14
   1118c:	8d 93       	st	X+, r24
   1118e:	9c 93       	st	X, r25
   11190:	1f 97       	sbiw	r26, 0x0f	; 15

            HAL_END_CRITICAL(); //Enable interrupts
   11192:	89 81       	ldd	r24, Y+1	; 0x01
   11194:	8f bf       	out	0x3f, r24	; 63
   11196:	5b c0       	rjmp	.+182    	; 0x1124e <arb_mailboxWrite+0x1c6>

         }/*End if( pt_mbx->b_wrtFromInt == true)*/
         else
         {
            if( pt_mbx->b_multRdWr == true)
   11198:	f8 01       	movw	r30, r16
   1119a:	83 89       	ldd	r24, Z+19	; 0x13
   1119c:	88 23       	and	r24, r24
   1119e:	29 f0       	breq	.+10     	; 0x111aa <arb_mailboxWrite+0x122>
               t_err = arb_wait( pt_mbx->t_mutex, BLOCKING); /*Lock shared 
   111a0:	80 81       	ld	r24, Z
   111a2:	91 81       	ldd	r25, Z+1	; 0x01
   111a4:	60 e0       	ldi	r22, 0x00	; 0
   111a6:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>

            /*---------------------------------------------------------------*
             * Store the size in the first two bytes of the current queue
             * location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_wrPtr)*(pt_mbx->s_queueSize + \
   111aa:	d8 01       	movw	r26, r16
   111ac:	16 96       	adiw	r26, 0x06	; 6
   111ae:	8d 91       	ld	r24, X+
   111b0:	9c 91       	ld	r25, X
   111b2:	17 97       	sbiw	r26, 0x07	; 7
   111b4:	02 96       	adiw	r24, 0x02	; 2
   111b6:	1a 96       	adiw	r26, 0x0a	; 10
   111b8:	2d 91       	ld	r18, X+
   111ba:	3c 91       	ld	r19, X
   111bc:	1b 97       	sbiw	r26, 0x0b	; 11
   111be:	fc 01       	movw	r30, r24
   111c0:	e2 9f       	mul	r30, r18
   111c2:	c0 01       	movw	r24, r0
   111c4:	e3 9f       	mul	r30, r19
   111c6:	90 0d       	add	r25, r0
   111c8:	f2 9f       	mul	r31, r18
   111ca:	90 0d       	add	r25, r0
   111cc:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            pt_mbx->pc_queue[s_index]     = pc_size[0];
   111ce:	54 96       	adiw	r26, 0x14	; 20
   111d0:	ed 91       	ld	r30, X+
   111d2:	fc 91       	ld	r31, X
   111d4:	55 97       	sbiw	r26, 0x15	; 21
   111d6:	e8 0f       	add	r30, r24
   111d8:	f9 1f       	adc	r31, r25
   111da:	2c 81       	ldd	r18, Y+4	; 0x04
   111dc:	20 83       	st	Z, r18
            pt_mbx->pc_queue[s_index + 1] = pc_size[1];
   111de:	54 96       	adiw	r26, 0x14	; 20
   111e0:	ed 91       	ld	r30, X+
   111e2:	fc 91       	ld	r31, X
   111e4:	55 97       	sbiw	r26, 0x15	; 21
   111e6:	e8 0f       	add	r30, r24
   111e8:	f9 1f       	adc	r31, r25
   111ea:	2d 81       	ldd	r18, Y+5	; 0x05
   111ec:	21 83       	std	Z+1, r18	; 0x01

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)&pt_mbx->pc_queue[ s_index + MBX_HDR_FIELD_BYTES], 
   111ee:	02 96       	adiw	r24, 0x02	; 2
   111f0:	54 96       	adiw	r26, 0x14	; 20
   111f2:	2d 91       	ld	r18, X+
   111f4:	3c 91       	ld	r19, X
   111f6:	55 97       	sbiw	r26, 0x15	; 21
   111f8:	28 0f       	add	r18, r24
   111fa:	39 1f       	adc	r19, r25
   111fc:	4c 81       	ldd	r20, Y+4	; 0x04
   111fe:	5d 81       	ldd	r21, Y+5	; 0x05
   11200:	c9 01       	movw	r24, r18
   11202:	6f 2d       	mov	r22, r15
   11204:	7e 2d       	mov	r23, r14
   11206:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
                    s_size);

            /*---------------------------------------------------------------*
             * Increment the write pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_wrPtr++;
   1120a:	d8 01       	movw	r26, r16
   1120c:	1a 96       	adiw	r26, 0x0a	; 10
   1120e:	8d 91       	ld	r24, X+
   11210:	9c 91       	ld	r25, X
   11212:	1b 97       	sbiw	r26, 0x0b	; 11
   11214:	01 96       	adiw	r24, 0x01	; 1
   11216:	1a 96       	adiw	r26, 0x0a	; 10
   11218:	8d 93       	st	X+, r24
   1121a:	9c 93       	st	X, r25
   1121c:	1b 97       	sbiw	r26, 0x0b	; 11
            if( pt_mbx->s_wrPtr == pt_mbx->s_queueDepth)
   1121e:	18 96       	adiw	r26, 0x08	; 8
   11220:	2d 91       	ld	r18, X+
   11222:	3c 91       	ld	r19, X
   11224:	19 97       	sbiw	r26, 0x09	; 9
   11226:	82 17       	cp	r24, r18
   11228:	93 07       	cpc	r25, r19
   1122a:	21 f4       	brne	.+8      	; 0x11234 <arb_mailboxWrite+0x1ac>
               pt_mbx->s_wrPtr = 0;
   1122c:	1a 96       	adiw	r26, 0x0a	; 10
   1122e:	1d 92       	st	X+, r1
   11230:	1c 92       	st	X, r1
   11232:	1b 97       	sbiw	r26, 0x0b	; 11

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages++;
   11234:	f8 01       	movw	r30, r16
   11236:	86 85       	ldd	r24, Z+14	; 0x0e
   11238:	97 85       	ldd	r25, Z+15	; 0x0f
   1123a:	01 96       	adiw	r24, 0x01	; 1
   1123c:	86 87       	std	Z+14, r24	; 0x0e
   1123e:	97 87       	std	Z+15, r25	; 0x0f

            if( pt_mbx->b_multRdWr == true)
   11240:	83 89       	ldd	r24, Z+19	; 0x13
   11242:	88 23       	and	r24, r24
   11244:	21 f0       	breq	.+8      	; 0x1124e <arb_mailboxWrite+0x1c6>
               t_err = arb_signal( pt_mbx->t_mutex);
   11246:	80 81       	ld	r24, Z
   11248:	91 81       	ldd	r25, Z+1	; 0x01
   1124a:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
         }

         /*------------------------------------------------------------------*
          * Tell the consumer to read the new message
          *------------------------------------------------------------------*/
         arb_signal( pt_mbx->t_semFillCount); /*Increment the fill count*/
   1124e:	d8 01       	movw	r26, r16
   11250:	12 96       	adiw	r26, 0x02	; 2
   11252:	8d 91       	ld	r24, X+
   11254:	9c 91       	ld	r25, X
   11256:	13 97       	sbiw	r26, 0x03	; 3
   11258:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
   1125c:	05 c0       	rjmp	.+10     	; 0x11268 <arb_mailboxWrite+0x1e0>

      }/*End if( t_err == ARB_PASSED)*/
      else if( t_err == ARB_SEM_DEC_ERROR) /*Non blocking mode*/
   1125e:	83 3f       	cpi	r24, 0xF3	; 243
   11260:	19 f4       	brne	.+6      	; 0x11268 <arb_mailboxWrite+0x1e0>
   11262:	22 ef       	ldi	r18, 0xF2	; 242
   11264:	3f ef       	ldi	r19, 0xFF	; 255
   11266:	02 c0       	rjmp	.+4      	; 0x1126c <arb_mailboxWrite+0x1e4>
          *------------------------------------------------------------------*/
         return (int16_t)ARB_MBX_FULL;
      }
   }

   return (int16_t)s_size; /*Return the number of bytes written*/
   11268:	2c 81       	ldd	r18, Y+4	; 0x04
   1126a:	3d 81       	ldd	r19, Y+5	; 0x05

}/*End arb_mailboxWrite*/
   1126c:	c9 01       	movw	r24, r18
   1126e:	25 96       	adiw	r28, 0x05	; 5
   11270:	cd bf       	out	0x3d, r28	; 61
   11272:	de bf       	out	0x3e, r29	; 62
   11274:	cf 91       	pop	r28
   11276:	df 91       	pop	r29
   11278:	1f 91       	pop	r17
   1127a:	0f 91       	pop	r16
   1127c:	ff 90       	pop	r15
   1127e:	ef 90       	pop	r14
   11280:	08 95       	ret

00011282 <arb_mailboxRead>:
 *---------------------------------------------------------------------------*/
int16_t arb_mailboxRead( t_MAILBOXHNDL t_mbxHandle,
                         /*int8_t c_ID,-Todo allow for multiple readers*/
                         int8_t *pc_buf,
                         uint16_t s_size)
{
   11282:	cf 92       	push	r12
   11284:	df 92       	push	r13
   11286:	ef 92       	push	r14
   11288:	ff 92       	push	r15
   1128a:	0f 93       	push	r16
   1128c:	1f 93       	push	r17
   1128e:	df 93       	push	r29
   11290:	cf 93       	push	r28
   11292:	00 d0       	rcall	.+0      	; 0x11294 <arb_mailboxRead+0x12>
   11294:	cd b7       	in	r28, 0x3d	; 61
   11296:	de b7       	in	r29, 0x3e	; 62
   11298:	8a 83       	std	Y+2, r24	; 0x02
   1129a:	9b 83       	std	Y+3, r25	; 0x03
   1129c:	d6 2e       	mov	r13, r22
   1129e:	c7 2e       	mov	r12, r23
   int16_t s_size1 = 0;

   /*------------------------------------------------------------------------*
    * Is this a valid mailbox handle?
    *------------------------------------------------------------------------*/
   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_mbxHandle, gt_activeMbx) == 
   112a0:	ea 81       	ldd	r30, Y+2	; 0x02
   112a2:	fb 81       	ldd	r31, Y+3	; 0x03
   112a4:	20 91 c8 21 	lds	r18, 0x21C8
   112a8:	30 91 c9 21 	lds	r19, 0x21C9
   112ac:	84 81       	ldd	r24, Z+4	; 0x04
   112ae:	95 81       	ldd	r25, Z+5	; 0x05
   112b0:	82 17       	cp	r24, r18
   112b2:	93 07       	cpc	r25, r19
   112b4:	29 f0       	breq	.+10     	; 0x112c0 <arb_mailboxRead+0x3e>
   112b6:	29 ef       	ldi	r18, 0xF9	; 249
   112b8:	e2 2e       	mov	r14, r18
   112ba:	2f ef       	ldi	r18, 0xFF	; 255
   112bc:	f2 2e       	mov	r15, r18
   112be:	ab c0       	rjmp	.+342    	; 0x11416 <arb_mailboxRead+0x194>

      /*---------------------------------------------------------------------*
       * Get a ptr to the link's element- which is the area where information
       * about the mailbox is stored.
       *---------------------------------------------------------------------*/
      pt_mbx = (t_mailbox *)UTL_GET_LINK_ELEMENT_PTR( t_mbxHandle);
   112c0:	ea 81       	ldd	r30, Y+2	; 0x02
   112c2:	fb 81       	ldd	r31, Y+3	; 0x03
   112c4:	00 81       	ld	r16, Z
   112c6:	11 81       	ldd	r17, Z+1	; 0x01

      /*---------------------------------------------------------------------*
       * Can the user-space buffer hold the data?
       *---------------------------------------------------------------------*/
      if( s_size < pt_mbx->s_queueSize) /*No*/
   112c8:	f8 01       	movw	r30, r16
   112ca:	86 81       	ldd	r24, Z+6	; 0x06
   112cc:	97 81       	ldd	r25, Z+7	; 0x07
   112ce:	48 17       	cp	r20, r24
   112d0:	59 07       	cpc	r21, r25
   112d2:	28 f4       	brcc	.+10     	; 0x112de <arb_mailboxRead+0x5c>
   112d4:	94 ef       	ldi	r25, 0xF4	; 244
   112d6:	e9 2e       	mov	r14, r25
   112d8:	9f ef       	ldi	r25, 0xFF	; 255
   112da:	f9 2e       	mov	r15, r25
   112dc:	9c c0       	rjmp	.+312    	; 0x11416 <arb_mailboxRead+0x194>
      }

      /*---------------------------------------------------------------------*
       * Wait for data to become available on the queue
       *---------------------------------------------------------------------*/
      t_err = arb_wait( pt_mbx->t_semFillCount, pt_mbx->t_readMode);
   112de:	f8 01       	movw	r30, r16
   112e0:	82 81       	ldd	r24, Z+2	; 0x02
   112e2:	93 81       	ldd	r25, Z+3	; 0x03
   112e4:	61 89       	ldd	r22, Z+17	; 0x11
   112e6:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>
      if( t_err == ARB_PASSED)
   112ea:	88 23       	and	r24, r24
   112ec:	09 f0       	breq	.+2      	; 0x112f0 <arb_mailboxRead+0x6e>
   112ee:	8a c0       	rjmp	.+276    	; 0x11404 <arb_mailboxRead+0x182>
         int16_t s_index;

         /*------------------------------------------------------------------*
          * The buffer has data...Copy data from the mailbox into pc_buf
          *------------------------------------------------------------------*/
         if( pt_mbx->b_wrtFromInt == true) /*Always assume multiple 
   112f0:	f8 01       	movw	r30, r16
   112f2:	82 89       	ldd	r24, Z+18	; 0x12
   112f4:	88 23       	and	r24, r24
   112f6:	d9 f1       	breq	.+118    	; 0x1136e <arb_mailboxRead+0xec>
         {
            /*---------------------------------------------------------------*
             * We can't perform a mutex inside an interrupt so make sure this 
             * call is atomic by another means.
             *---------------------------------------------------------------*/
            HAL_BEGIN_CRITICAL(); //Disable interrupts
   112f8:	8f b7       	in	r24, 0x3f	; 63
   112fa:	89 83       	std	Y+1, r24	; 0x01
   112fc:	f8 94       	cli

            /*---------------------------------------------------------------*
             * Grab the size of this data field from the first two bytes of 
             * this queue location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_rdPtr)*(pt_mbx->s_queueSize + \
   112fe:	f8 01       	movw	r30, r16
   11300:	86 81       	ldd	r24, Z+6	; 0x06
   11302:	97 81       	ldd	r25, Z+7	; 0x07
   11304:	02 96       	adiw	r24, 0x02	; 2
   11306:	24 85       	ldd	r18, Z+12	; 0x0c
   11308:	35 85       	ldd	r19, Z+13	; 0x0d
   1130a:	a9 01       	movw	r20, r18
   1130c:	84 9f       	mul	r24, r20
   1130e:	90 01       	movw	r18, r0
   11310:	85 9f       	mul	r24, r21
   11312:	30 0d       	add	r19, r0
   11314:	94 9f       	mul	r25, r20
   11316:	30 0d       	add	r19, r0
   11318:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];
   1131a:	44 89       	ldd	r20, Z+20	; 0x14
   1131c:	55 89       	ldd	r21, Z+21	; 0x15
   1131e:	fa 01       	movw	r30, r20
   11320:	e2 0f       	add	r30, r18
   11322:	f3 1f       	adc	r31, r19
   11324:	80 81       	ld	r24, Z
   11326:	e8 2e       	mov	r14, r24
   11328:	ff 24       	eor	r15, r15
   1132a:	e7 fc       	sbrc	r14, 7
   1132c:	f0 94       	com	r15

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
   1132e:	2e 5f       	subi	r18, 0xFE	; 254
   11330:	3f 4f       	sbci	r19, 0xFF	; 255
   11332:	24 0f       	add	r18, r20
   11334:	35 1f       	adc	r19, r21
   11336:	8d 2d       	mov	r24, r13
   11338:	9c 2d       	mov	r25, r12
   1133a:	b9 01       	movw	r22, r18
   1133c:	a7 01       	movw	r20, r14
   1133e:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
                    s_size1);

            /*---------------------------------------------------------------*
             * Increment the read pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_rdPtr++;
   11342:	f8 01       	movw	r30, r16
   11344:	84 85       	ldd	r24, Z+12	; 0x0c
   11346:	95 85       	ldd	r25, Z+13	; 0x0d
   11348:	01 96       	adiw	r24, 0x01	; 1
   1134a:	84 87       	std	Z+12, r24	; 0x0c
   1134c:	95 87       	std	Z+13, r25	; 0x0d
            if( pt_mbx->s_rdPtr == pt_mbx->s_queueDepth)
   1134e:	20 85       	ldd	r18, Z+8	; 0x08
   11350:	31 85       	ldd	r19, Z+9	; 0x09
   11352:	82 17       	cp	r24, r18
   11354:	93 07       	cpc	r25, r19
   11356:	11 f4       	brne	.+4      	; 0x1135c <arb_mailboxRead+0xda>
               pt_mbx->s_rdPtr = 0;
   11358:	14 86       	std	Z+12, r1	; 0x0c
   1135a:	15 86       	std	Z+13, r1	; 0x0d

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages--;
   1135c:	f8 01       	movw	r30, r16
   1135e:	86 85       	ldd	r24, Z+14	; 0x0e
   11360:	97 85       	ldd	r25, Z+15	; 0x0f
   11362:	01 97       	sbiw	r24, 0x01	; 1
   11364:	86 87       	std	Z+14, r24	; 0x0e
   11366:	97 87       	std	Z+15, r25	; 0x0f

            HAL_END_CRITICAL(); //Enable interrupts
   11368:	89 81       	ldd	r24, Y+1	; 0x01
   1136a:	8f bf       	out	0x3f, r24	; 63
   1136c:	45 c0       	rjmp	.+138    	; 0x113f8 <arb_mailboxRead+0x176>

         }/*End if( pt_mbx->b_wrtFromInt == true)*/
         else
         {
            if( pt_mbx->b_multRdWr == true)
   1136e:	f8 01       	movw	r30, r16
   11370:	83 89       	ldd	r24, Z+19	; 0x13
   11372:	88 23       	and	r24, r24
   11374:	29 f0       	breq	.+10     	; 0x11380 <arb_mailboxRead+0xfe>
               t_err = arb_wait( pt_mbx->t_mutex, BLOCKING); /*Lock shared
   11376:	80 81       	ld	r24, Z
   11378:	91 81       	ldd	r25, Z+1	; 0x01
   1137a:	60 e0       	ldi	r22, 0x00	; 0
   1137c:	0e 94 c8 99 	call	0x13390	; 0x13390 <arb_wait>

            /*---------------------------------------------------------------*
             * Grab the size of this data field from the first two bytes of 
             * this queue location.
             *---------------------------------------------------------------*/
            s_index = (pt_mbx->s_rdPtr)*(pt_mbx->s_queueSize + \
   11380:	f8 01       	movw	r30, r16
   11382:	86 81       	ldd	r24, Z+6	; 0x06
   11384:	97 81       	ldd	r25, Z+7	; 0x07
   11386:	02 96       	adiw	r24, 0x02	; 2
   11388:	24 85       	ldd	r18, Z+12	; 0x0c
   1138a:	35 85       	ldd	r19, Z+13	; 0x0d
   1138c:	a9 01       	movw	r20, r18
   1138e:	84 9f       	mul	r24, r20
   11390:	90 01       	movw	r18, r0
   11392:	85 9f       	mul	r24, r21
   11394:	30 0d       	add	r19, r0
   11396:	94 9f       	mul	r25, r20
   11398:	30 0d       	add	r19, r0
   1139a:	11 24       	eor	r1, r1
            MBX_HDR_FIELD_BYTES);
            s_size1 = (uint16_t)pt_mbx->pc_queue[ s_index];
   1139c:	44 89       	ldd	r20, Z+20	; 0x14
   1139e:	55 89       	ldd	r21, Z+21	; 0x15
   113a0:	fa 01       	movw	r30, r20
   113a2:	e2 0f       	add	r30, r18
   113a4:	f3 1f       	adc	r31, r19
   113a6:	80 81       	ld	r24, Z
   113a8:	e8 2e       	mov	r14, r24
   113aa:	ff 24       	eor	r15, r15
   113ac:	e7 fc       	sbrc	r14, 7
   113ae:	f0 94       	com	r15

            /*---------------------------------------------------------------*
             * Store the data in the remaining bytes...
             *---------------------------------------------------------------*/
            memcpy( (void *)pc_buf, 
   113b0:	2e 5f       	subi	r18, 0xFE	; 254
   113b2:	3f 4f       	sbci	r19, 0xFF	; 255
   113b4:	24 0f       	add	r18, r20
   113b6:	35 1f       	adc	r19, r21
   113b8:	8d 2d       	mov	r24, r13
   113ba:	9c 2d       	mov	r25, r12
   113bc:	b9 01       	movw	r22, r18
   113be:	a7 01       	movw	r20, r14
   113c0:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
                    s_size1);

            /*---------------------------------------------------------------*
             * Increment the read pointer
             *---------------------------------------------------------------*/
            pt_mbx->s_rdPtr++;
   113c4:	f8 01       	movw	r30, r16
   113c6:	84 85       	ldd	r24, Z+12	; 0x0c
   113c8:	95 85       	ldd	r25, Z+13	; 0x0d
   113ca:	01 96       	adiw	r24, 0x01	; 1
   113cc:	84 87       	std	Z+12, r24	; 0x0c
   113ce:	95 87       	std	Z+13, r25	; 0x0d
            if( pt_mbx->s_rdPtr == pt_mbx->s_queueDepth)
   113d0:	20 85       	ldd	r18, Z+8	; 0x08
   113d2:	31 85       	ldd	r19, Z+9	; 0x09
   113d4:	82 17       	cp	r24, r18
   113d6:	93 07       	cpc	r25, r19
   113d8:	11 f4       	brne	.+4      	; 0x113de <arb_mailboxRead+0x15c>
               pt_mbx->s_rdPtr = 0;
   113da:	14 86       	std	Z+12, r1	; 0x0c
   113dc:	15 86       	std	Z+13, r1	; 0x0d

            /*---------------------------------------------------------------*
             * Keep track of the number of open slots on the queue.
             *---------------------------------------------------------------*/
            pt_mbx->s_numMessages--;
   113de:	f8 01       	movw	r30, r16
   113e0:	86 85       	ldd	r24, Z+14	; 0x0e
   113e2:	97 85       	ldd	r25, Z+15	; 0x0f
   113e4:	01 97       	sbiw	r24, 0x01	; 1
   113e6:	86 87       	std	Z+14, r24	; 0x0e
   113e8:	97 87       	std	Z+15, r25	; 0x0f

            if( pt_mbx->b_multRdWr == true)
   113ea:	83 89       	ldd	r24, Z+19	; 0x13
   113ec:	88 23       	and	r24, r24
   113ee:	21 f0       	breq	.+8      	; 0x113f8 <arb_mailboxRead+0x176>
               t_err = arb_signal( pt_mbx->t_mutex);
   113f0:	80 81       	ld	r24, Z
   113f2:	91 81       	ldd	r25, Z+1	; 0x01
   113f4:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
         }

         /*------------------------------------------------------------------*
          * Tell the producer to put more data in the buffer.
          *------------------------------------------------------------------*/
         arb_signal( pt_mbx->t_semEmptyCount); /*Increment the empty count*/
   113f8:	f8 01       	movw	r30, r16
   113fa:	84 81       	ldd	r24, Z+4	; 0x04
   113fc:	95 81       	ldd	r25, Z+5	; 0x05
   113fe:	0e 94 81 96 	call	0x12d02	; 0x12d02 <arb_signal>
   11402:	09 c0       	rjmp	.+18     	; 0x11416 <arb_mailboxRead+0x194>

      }/*End if( t_err == ARB_PASSED)*/
      else if( t_err == ARB_SEM_DEC_ERROR) /*Non blocking mode*/
   11404:	83 3f       	cpi	r24, 0xF3	; 243
   11406:	19 f0       	breq	.+6      	; 0x1140e <arb_mailboxRead+0x18c>
   11408:	ee 24       	eor	r14, r14
   1140a:	ff 24       	eor	r15, r15
   1140c:	04 c0       	rjmp	.+8      	; 0x11416 <arb_mailboxRead+0x194>
   1140e:	81 ef       	ldi	r24, 0xF1	; 241
   11410:	e8 2e       	mov	r14, r24
   11412:	8f ef       	ldi	r24, 0xFF	; 255
   11414:	f8 2e       	mov	r15, r24
      }
   }

   return (int16_t)s_size1; /*Return the number of bytes read*/

}/*End arb_mailboxRead*/
   11416:	c7 01       	movw	r24, r14
   11418:	23 96       	adiw	r28, 0x03	; 3
   1141a:	cd bf       	out	0x3d, r28	; 61
   1141c:	de bf       	out	0x3e, r29	; 62
   1141e:	cf 91       	pop	r28
   11420:	df 91       	pop	r29
   11422:	1f 91       	pop	r17
   11424:	0f 91       	pop	r16
   11426:	ff 90       	pop	r15
   11428:	ef 90       	pop	r14
   1142a:	df 90       	pop	r13
   1142c:	cf 90       	pop	r12
   1142e:	08 95       	ret

00011430 <main>:
{

   /*------------------------------------------------------------------------*
    * Configure CPU clock for 32Mhz operation
    *------------------------------------------------------------------------*/
   hal_setCpuFreq( 32000000);
   11430:	60 e0       	ldi	r22, 0x00	; 0
   11432:	78 e4       	ldi	r23, 0x48	; 72
   11434:	88 ee       	ldi	r24, 0xE8	; 232
   11436:	91 e0       	ldi	r25, 0x01	; 1
   11438:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <hal_setCpuFreq>

   /*------------------------------------------------------------------------*
    * Configure the highest level of interrupts - nesting is not allowed.
    *------------------------------------------------------------------------*/
   hal_configureIntLevel( INT_LEVEL_2);
   1143c:	84 e0       	ldi	r24, 0x04	; 4
   1143e:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <hal_configureIntLevel>
    * drivers with the kernel, initialize the scheduler, and configure any
    * user-space threads. The operations herein are completely platform
    * dependent leaving the choice of device drivers and arbitros settings
    * completely up to the user-space layer.
    *------------------------------------------------------------------------*/
   usr_appInit();
   11442:	0e 94 9f a6 	call	0x14d3e	; 0x14d3e <usr_appInit>

   /*------------------------------------------------------------------------*
    * Return control over to the kernel layer which will launch the highest
    * priority thread- up to this point interrupts have been disabled.
    *------------------------------------------------------------------------*/
   arb_schedulerStart();
   11446:	0e 94 a0 92 	call	0x12540	; 0x12540 <arb_schedulerStart>

   return 0;

}/*End main*/
   1144a:	80 e0       	ldi	r24, 0x00	; 0
   1144c:	90 e0       	ldi	r25, 0x00	; 0
   1144e:	08 95       	ret

00011450 <arb_createMemIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   11450:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   11452:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   11454:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   11456:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   11458:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   1145a:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   1145c:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   1145e:	0f 92       	push	r0
      asm( "push r1");
   11460:	1f 92       	push	r1
      asm( "clr r1");
   11462:	11 24       	eor	r1, r1
      asm( "push r2");
   11464:	2f 92       	push	r2
      asm( "push r3");
   11466:	3f 92       	push	r3
      asm( "push r4");
   11468:	4f 92       	push	r4
      asm( "push r5");
   1146a:	5f 92       	push	r5
      asm( "push r6");
   1146c:	6f 92       	push	r6
      asm( "push r7");
   1146e:	7f 92       	push	r7
      asm( "push r8");
   11470:	8f 92       	push	r8
      asm( "push r9");
   11472:	9f 92       	push	r9
      asm( "push r10");
   11474:	af 92       	push	r10
      asm( "push r11");
   11476:	bf 92       	push	r11
      asm( "push r12");
   11478:	cf 92       	push	r12
      asm( "push r13");
   1147a:	df 92       	push	r13
      asm( "push r14");
   1147c:	ef 92       	push	r14
      asm( "push r15");
   1147e:	ff 92       	push	r15
      asm( "push r16");
   11480:	0f 93       	push	r16
      asm( "push r17");
   11482:	1f 93       	push	r17
      asm( "push r18");
   11484:	2f 93       	push	r18
      asm( "push r19");
   11486:	3f 93       	push	r19
      asm( "push r20");
   11488:	4f 93       	push	r20
      asm( "push r21");
   1148a:	5f 93       	push	r21
      asm( "push r22");
   1148c:	6f 93       	push	r22
      asm( "push r23");
   1148e:	7f 93       	push	r23
      asm( "push r24");
   11490:	8f 93       	push	r24
      asm( "push r25");
   11492:	9f 93       	push	r25
      asm( "push r26");
   11494:	af 93       	push	r26
      asm( "push r27");
   11496:	bf 93       	push	r27
      asm( "push r28");
   11498:	cf 93       	push	r28
      asm( "push r29");
   1149a:	df 93       	push	r29
      asm( "push r30");
   1149c:	ef 93       	push	r30
      asm( "push r31");
   1149e:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   114a0:	e0 91 29 22 	lds	r30, 0x2229
   114a4:	f0 91 2a 22 	lds	r31, 0x222A
   114a8:	06 80       	ldd	r0, Z+6	; 0x06
   114aa:	f7 81       	ldd	r31, Z+7	; 0x07
   114ac:	e0 2d       	mov	r30, r0
   114ae:	01 90       	ld	r0, Z+
   114b0:	f0 81       	ld	r31, Z
   114b2:	e0 2d       	mov	r30, r0
   114b4:	e0 93 bb 25 	sts	0x25BB, r30
   114b8:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   114bc:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   114be:	4e b7       	in	r20, 0x3e	; 62
   114c0:	94 2f       	mov	r25, r20
   114c2:	80 e0       	ldi	r24, 0x00	; 0
   114c4:	30 e0       	ldi	r19, 0x00	; 0
   114c6:	82 2b       	or	r24, r18
   114c8:	93 2b       	or	r25, r19
   114ca:	81 87       	std	Z+9, r24	; 0x09
   114cc:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   114ce:	8f ef       	ldi	r24, 0xFF	; 255
   114d0:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   114d2:	8f e3       	ldi	r24, 0x3F	; 63
   114d4:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   114d6:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   114da:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   114de:	e0 91 29 22 	lds	r30, 0x2229
   114e2:	f0 91 2a 22 	lds	r31, 0x222A
   114e6:	06 80       	ldd	r0, Z+6	; 0x06
   114e8:	f7 81       	ldd	r31, Z+7	; 0x07
   114ea:	e0 2d       	mov	r30, r0
   114ec:	a0 81       	ld	r26, Z
   114ee:	b1 81       	ldd	r27, Z+1	; 0x01
   114f0:	a0 93 66 25 	sts	0x2566, r26
   114f4:	b0 93 67 25 	sts	0x2567, r27
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   if( (gt_memObject.pt_temp->ps_stack[0] !=
   114f8:	1b 96       	adiw	r26, 0x0b	; 11
   114fa:	ed 91       	ld	r30, X+
   114fc:	fc 91       	ld	r31, X
   114fe:	1c 97       	sbiw	r26, 0x0c	; 12
   11500:	80 81       	ld	r24, Z
   11502:	91 81       	ldd	r25, Z+1	; 0x01
   11504:	8d 5a       	subi	r24, 0xAD	; 173
   11506:	9e 4d       	sbci	r25, 0xDE	; 222
   11508:	21 f0       	breq	.+8      	; 0x11512 <arb_createMemIntsOn+0xc2>
   1150a:	ab 2b       	or	r26, r27
   1150c:	11 f0       	breq	.+4      	; 0x11512 <arb_createMemIntsOn+0xc2>
       ARB_STACK_OVERFLOW_CHECK) && (gt_memObject.pt_temp != NULL))
   {
      arb_stackOverflow();
   1150e:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   if( gt_memObject.b_performMalloc == true)
   11512:	80 91 65 25 	lds	r24, 0x2565
   11516:	88 23       	and	r24, r24
   11518:	71 f0       	breq	.+28     	; 0x11536 <arb_createMemIntsOn+0xe6>
   {
      *(gt_memObject.gpv_newMem) = malloc( gt_memObject.gs_sizeMem);
   1151a:	00 91 63 25 	lds	r16, 0x2563
   1151e:	10 91 64 25 	lds	r17, 0x2564
   11522:	80 91 61 25 	lds	r24, 0x2561
   11526:	90 91 62 25 	lds	r25, 0x2562
   1152a:	0e 94 c2 b5 	call	0x16b84	; 0x16b84 <malloc>
   1152e:	f8 01       	movw	r30, r16
   11530:	80 83       	st	Z, r24
   11532:	91 83       	std	Z+1, r25	; 0x01
   11534:	08 c0       	rjmp	.+16     	; 0x11546 <arb_createMemIntsOn+0xf6>
   }
   else
      free( *(gt_memObject.gpv_newMem));
   11536:	e0 91 63 25 	lds	r30, 0x2563
   1153a:	f0 91 64 25 	lds	r31, 0x2564
   1153e:	80 81       	ld	r24, Z
   11540:	91 81       	ldd	r25, Z+1	; 0x01
   11542:	0e 94 6f b6 	call	0x16cde	; 0x16cde <free>

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   11546:	e0 91 29 22 	lds	r30, 0x2229
   1154a:	f0 91 2a 22 	lds	r31, 0x222A
   1154e:	06 80       	ldd	r0, Z+6	; 0x06
   11550:	f7 81       	ldd	r31, Z+7	; 0x07
   11552:	e0 2d       	mov	r30, r0
   11554:	01 90       	ld	r0, Z+
   11556:	f0 81       	ld	r31, Z
   11558:	e0 2d       	mov	r30, r0
   1155a:	e0 93 bb 25 	sts	0x25BB, r30
   1155e:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   11562:	81 85       	ldd	r24, Z+9	; 0x09
   11564:	92 85       	ldd	r25, Z+10	; 0x0a
   11566:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   11568:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   1156a:	ff 91       	pop	r31
      asm( "pop r30");
   1156c:	ef 91       	pop	r30
      asm( "pop r29");
   1156e:	df 91       	pop	r29
      asm( "pop r28");
   11570:	cf 91       	pop	r28
      asm( "pop r27");
   11572:	bf 91       	pop	r27
      asm( "pop r26");
   11574:	af 91       	pop	r26
      asm( "pop r25");
   11576:	9f 91       	pop	r25
      asm( "pop r24");
   11578:	8f 91       	pop	r24
      asm( "pop r23");
   1157a:	7f 91       	pop	r23
      asm( "pop r22");
   1157c:	6f 91       	pop	r22
      asm( "pop r21");
   1157e:	5f 91       	pop	r21
      asm( "pop r20");
   11580:	4f 91       	pop	r20
      asm( "pop r19");
   11582:	3f 91       	pop	r19
      asm( "pop r18");
   11584:	2f 91       	pop	r18
      asm( "pop r17");
   11586:	1f 91       	pop	r17
      asm( "pop r16");
   11588:	0f 91       	pop	r16
      asm( "pop r15");
   1158a:	ff 90       	pop	r15
      asm( "pop r14");
   1158c:	ef 90       	pop	r14
      asm( "pop r13");
   1158e:	df 90       	pop	r13
      asm( "pop r12");
   11590:	cf 90       	pop	r12
      asm( "pop r11");
   11592:	bf 90       	pop	r11
      asm( "pop r10");
   11594:	af 90       	pop	r10
      asm( "pop r9");
   11596:	9f 90       	pop	r9
      asm( "pop r8");
   11598:	8f 90       	pop	r8
      asm( "pop r7");
   1159a:	7f 90       	pop	r7
      asm( "pop r6");
   1159c:	6f 90       	pop	r6
      asm( "pop r5");
   1159e:	5f 90       	pop	r5
      asm( "pop r4");
   115a0:	4f 90       	pop	r4
      asm( "pop r3");
   115a2:	3f 90       	pop	r3
      asm( "pop r2");
   115a4:	2f 90       	pop	r2
      asm( "pop r1");
   115a6:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   115a8:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   115aa:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   115ac:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
    HAL_RET();
   115ae:	08 95       	ret

000115b0 <arb_createMemIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   115b0:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   115b2:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   115b4:	0f 92       	push	r0
      asm( "push r1");
   115b6:	1f 92       	push	r1
      asm( "clr r1");
   115b8:	11 24       	eor	r1, r1
      asm( "push r2");
   115ba:	2f 92       	push	r2
      asm( "push r3");
   115bc:	3f 92       	push	r3
      asm( "push r4");
   115be:	4f 92       	push	r4
      asm( "push r5");
   115c0:	5f 92       	push	r5
      asm( "push r6");
   115c2:	6f 92       	push	r6
      asm( "push r7");
   115c4:	7f 92       	push	r7
      asm( "push r8");
   115c6:	8f 92       	push	r8
      asm( "push r9");
   115c8:	9f 92       	push	r9
      asm( "push r10");
   115ca:	af 92       	push	r10
      asm( "push r11");
   115cc:	bf 92       	push	r11
      asm( "push r12");
   115ce:	cf 92       	push	r12
      asm( "push r13");
   115d0:	df 92       	push	r13
      asm( "push r14");
   115d2:	ef 92       	push	r14
      asm( "push r15");
   115d4:	ff 92       	push	r15
      asm( "push r16");
   115d6:	0f 93       	push	r16
      asm( "push r17");
   115d8:	1f 93       	push	r17
      asm( "push r18");
   115da:	2f 93       	push	r18
      asm( "push r19");
   115dc:	3f 93       	push	r19
      asm( "push r20");
   115de:	4f 93       	push	r20
      asm( "push r21");
   115e0:	5f 93       	push	r21
      asm( "push r22");
   115e2:	6f 93       	push	r22
      asm( "push r23");
   115e4:	7f 93       	push	r23
      asm( "push r24");
   115e6:	8f 93       	push	r24
      asm( "push r25");
   115e8:	9f 93       	push	r25
      asm( "push r26");
   115ea:	af 93       	push	r26
      asm( "push r27");
   115ec:	bf 93       	push	r27
      asm( "push r28");
   115ee:	cf 93       	push	r28
      asm( "push r29");
   115f0:	df 93       	push	r29
      asm( "push r30");
   115f2:	ef 93       	push	r30
      asm( "push r31");
   115f4:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   115f6:	e0 91 29 22 	lds	r30, 0x2229
   115fa:	f0 91 2a 22 	lds	r31, 0x222A
   115fe:	06 80       	ldd	r0, Z+6	; 0x06
   11600:	f7 81       	ldd	r31, Z+7	; 0x07
   11602:	e0 2d       	mov	r30, r0
   11604:	01 90       	ld	r0, Z+
   11606:	f0 81       	ld	r31, Z
   11608:	e0 2d       	mov	r30, r0
   1160a:	e0 93 bb 25 	sts	0x25BB, r30
   1160e:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   11612:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   11614:	4e b7       	in	r20, 0x3e	; 62
   11616:	94 2f       	mov	r25, r20
   11618:	80 e0       	ldi	r24, 0x00	; 0
   1161a:	30 e0       	ldi	r19, 0x00	; 0
   1161c:	82 2b       	or	r24, r18
   1161e:	93 2b       	or	r25, r19
   11620:	81 87       	std	Z+9, r24	; 0x09
   11622:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   11624:	8f ef       	ldi	r24, 0xFF	; 255
   11626:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   11628:	8f e3       	ldi	r24, 0x3F	; 63
   1162a:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   1162c:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   11630:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gt_memObject.pt_temp =
   11634:	e0 91 29 22 	lds	r30, 0x2229
   11638:	f0 91 2a 22 	lds	r31, 0x222A
   1163c:	06 80       	ldd	r0, Z+6	; 0x06
   1163e:	f7 81       	ldd	r31, Z+7	; 0x07
   11640:	e0 2d       	mov	r30, r0
   11642:	a0 81       	ld	r26, Z
   11644:	b1 81       	ldd	r27, Z+1	; 0x01
   11646:	a0 93 66 25 	sts	0x2566, r26
   1164a:	b0 93 67 25 	sts	0x2567, r27
   (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   if( (gt_memObject.pt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   1164e:	1b 96       	adiw	r26, 0x0b	; 11
   11650:	ed 91       	ld	r30, X+
   11652:	fc 91       	ld	r31, X
   11654:	1c 97       	sbiw	r26, 0x0c	; 12
   11656:	80 81       	ld	r24, Z
   11658:	91 81       	ldd	r25, Z+1	; 0x01
   1165a:	8d 5a       	subi	r24, 0xAD	; 173
   1165c:	9e 4d       	sbci	r25, 0xDE	; 222
   1165e:	21 f0       	breq	.+8      	; 0x11668 <arb_createMemIntsOff+0xb8>
   11660:	ab 2b       	or	r26, r27
   11662:	11 f0       	breq	.+4      	; 0x11668 <arb_createMemIntsOff+0xb8>
       && (gt_memObject.pt_temp != NULL))
   {
      arb_stackOverflow();
   11664:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   if( gt_memObject.b_performMalloc == true)
   11668:	80 91 65 25 	lds	r24, 0x2565
   1166c:	88 23       	and	r24, r24
   1166e:	71 f0       	breq	.+28     	; 0x1168c <arb_createMemIntsOff+0xdc>
   {
      *(gt_memObject.gpv_newMem) = malloc( gt_memObject.gs_sizeMem);
   11670:	00 91 63 25 	lds	r16, 0x2563
   11674:	10 91 64 25 	lds	r17, 0x2564
   11678:	80 91 61 25 	lds	r24, 0x2561
   1167c:	90 91 62 25 	lds	r25, 0x2562
   11680:	0e 94 c2 b5 	call	0x16b84	; 0x16b84 <malloc>
   11684:	f8 01       	movw	r30, r16
   11686:	80 83       	st	Z, r24
   11688:	91 83       	std	Z+1, r25	; 0x01
   1168a:	08 c0       	rjmp	.+16     	; 0x1169c <arb_createMemIntsOff+0xec>
   }
   else
      free( *gt_memObject.gpv_newMem);
   1168c:	e0 91 63 25 	lds	r30, 0x2563
   11690:	f0 91 64 25 	lds	r31, 0x2564
   11694:	80 81       	ld	r24, Z
   11696:	91 81       	ldd	r25, Z+1	; 0x01
   11698:	0e 94 6f b6 	call	0x16cde	; 0x16cde <free>

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1169c:	e0 91 29 22 	lds	r30, 0x2229
   116a0:	f0 91 2a 22 	lds	r31, 0x222A
   116a4:	06 80       	ldd	r0, Z+6	; 0x06
   116a6:	f7 81       	ldd	r31, Z+7	; 0x07
   116a8:	e0 2d       	mov	r30, r0
   116aa:	01 90       	ld	r0, Z+
   116ac:	f0 81       	ld	r31, Z
   116ae:	e0 2d       	mov	r30, r0
   116b0:	e0 93 bb 25 	sts	0x25BB, r30
   116b4:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   116b8:	81 85       	ldd	r24, Z+9	; 0x09
   116ba:	92 85       	ldd	r25, Z+10	; 0x0a
   116bc:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   116be:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   116c0:	ff 91       	pop	r31
      asm( "pop r30");
   116c2:	ef 91       	pop	r30
      asm( "pop r29");
   116c4:	df 91       	pop	r29
      asm( "pop r28");
   116c6:	cf 91       	pop	r28
      asm( "pop r27");
   116c8:	bf 91       	pop	r27
      asm( "pop r26");
   116ca:	af 91       	pop	r26
      asm( "pop r25");
   116cc:	9f 91       	pop	r25
      asm( "pop r24");
   116ce:	8f 91       	pop	r24
      asm( "pop r23");
   116d0:	7f 91       	pop	r23
      asm( "pop r22");
   116d2:	6f 91       	pop	r22
      asm( "pop r21");
   116d4:	5f 91       	pop	r21
      asm( "pop r20");
   116d6:	4f 91       	pop	r20
      asm( "pop r19");
   116d8:	3f 91       	pop	r19
      asm( "pop r18");
   116da:	2f 91       	pop	r18
      asm( "pop r17");
   116dc:	1f 91       	pop	r17
      asm( "pop r16");
   116de:	0f 91       	pop	r16
      asm( "pop r15");
   116e0:	ff 90       	pop	r15
      asm( "pop r14");
   116e2:	ef 90       	pop	r14
      asm( "pop r13");
   116e4:	df 90       	pop	r13
      asm( "pop r12");
   116e6:	cf 90       	pop	r12
      asm( "pop r11");
   116e8:	bf 90       	pop	r11
      asm( "pop r10");
   116ea:	af 90       	pop	r10
      asm( "pop r9");
   116ec:	9f 90       	pop	r9
      asm( "pop r8");
   116ee:	8f 90       	pop	r8
      asm( "pop r7");
   116f0:	7f 90       	pop	r7
      asm( "pop r6");
   116f2:	6f 90       	pop	r6
      asm( "pop r5");
   116f4:	5f 90       	pop	r5
      asm( "pop r4");
   116f6:	4f 90       	pop	r4
      asm( "pop r3");
   116f8:	3f 90       	pop	r3
      asm( "pop r2");
   116fa:	2f 90       	pop	r2
      asm( "pop r1");
   116fc:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   116fe:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   11700:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   11702:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
    HAL_RET();
   11704:	08 95       	ret

00011706 <arb_free>:
   }

}/*End arb_malloc*/

void arb_free( void **pv_newMem)
{
   11706:	cf 93       	push	r28
   11708:	df 93       	push	r29
   1170a:	ec 01       	movw	r28, r24
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( arb_sysTimerEnabled() == true)
   1170c:	0e 94 4f 9c 	call	0x1389e	; 0x1389e <arb_sysTimerEnabled>
   11710:	88 23       	and	r24, r24
   11712:	b1 f0       	breq	.+44     	; 0x11740 <arb_free+0x3a>
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are running within thread space!
       * Threads are active - use context switching in order to save the state
       * of the system while allocating a new memory region.
       *---------------------------------------------------------------------*/
      if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   11714:	0f b6       	in	r0, 0x3f	; 63
   11716:	07 fe       	sbrs	r0, 7
   11718:	0a c0       	rjmp	.+20     	; 0x1172e <arb_free+0x28>
      {
         /*------------------------------------------------------------------*
          * Perform mutual exclusion.
          *------------------------------------------------------------------*/
         HAL_CLI();
   1171a:	f8 94       	cli
         gt_memObject.b_performMalloc = false;
   1171c:	10 92 65 25 	sts	0x2565, r1
         gt_memObject.gpv_newMem = pv_newMem;
   11720:	c0 93 63 25 	sts	0x2563, r28
   11724:	d0 93 64 25 	sts	0x2564, r29
         arb_createMemIntsOn();
   11728:	0e 94 28 8a 	call	0x11450	; 0x11450 <arb_createMemIntsOn>
   1172c:	0d c0       	rjmp	.+26     	; 0x11748 <arb_free+0x42>

      }/*End if( HAL_ARE_INTS_EN())*/
      else
      {
         gt_memObject.b_performMalloc = false;
   1172e:	10 92 65 25 	sts	0x2565, r1
         gt_memObject.gpv_newMem = pv_newMem;
   11732:	c0 93 63 25 	sts	0x2563, r28
   11736:	d0 93 64 25 	sts	0x2564, r29
         arb_createMemIntsOff();
   1173a:	0e 94 d8 8a 	call	0x115b0	; 0x115b0 <arb_createMemIntsOff>
   1173e:	04 c0       	rjmp	.+8      	; 0x11748 <arb_free+0x42>
   {
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are not running within thread space!
       * Threads are not active, no context switching required.
       *---------------------------------------------------------------------*/
      free( (*pv_newMem));
   11740:	88 81       	ld	r24, Y
   11742:	99 81       	ldd	r25, Y+1	; 0x01
   11744:	0e 94 6f b6 	call	0x16cde	; 0x16cde <free>
   }

   11748:	df 91       	pop	r29
   1174a:	cf 91       	pop	r28
   1174c:	08 95       	ret

0001174e <arb_malloc>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_malloc( size_t t_size,
                 void **pv_newMem)
{
   1174e:	0f 93       	push	r16
   11750:	1f 93       	push	r17
   11752:	cf 93       	push	r28
   11754:	df 93       	push	r29
   11756:	8c 01       	movw	r16, r24
   11758:	eb 01       	movw	r28, r22
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( arb_sysTimerEnabled() == true)
   1175a:	0e 94 4f 9c 	call	0x1389e	; 0x1389e <arb_sysTimerEnabled>
   1175e:	88 23       	and	r24, r24
   11760:	01 f1       	breq	.+64     	; 0x117a2 <arb_malloc+0x54>
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are running within thread space!
       * Threads are active - use context switching in order to save the state
       * of the system while allocating a new memory region.
       *---------------------------------------------------------------------*/
      if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   11762:	0f b6       	in	r0, 0x3f	; 63
   11764:	07 fe       	sbrs	r0, 7
   11766:	0f c0       	rjmp	.+30     	; 0x11786 <arb_malloc+0x38>
      {
         /*------------------------------------------------------------------*
          * Perform mutual exclusion.
          *------------------------------------------------------------------*/
         HAL_CLI();
   11768:	f8 94       	cli
         gt_memObject.b_performMalloc = true;
   1176a:	81 e0       	ldi	r24, 0x01	; 1
   1176c:	80 93 65 25 	sts	0x2565, r24
         gt_memObject.gpv_newMem = pv_newMem;
   11770:	c0 93 63 25 	sts	0x2563, r28
   11774:	d0 93 64 25 	sts	0x2564, r29
         gt_memObject.gs_sizeMem = t_size;
   11778:	00 93 61 25 	sts	0x2561, r16
   1177c:	10 93 62 25 	sts	0x2562, r17
         arb_createMemIntsOn();
   11780:	0e 94 28 8a 	call	0x11450	; 0x11450 <arb_createMemIntsOn>
   11784:	13 c0       	rjmp	.+38     	; 0x117ac <arb_malloc+0x5e>

      }/*End if( HAL_ARE_INTS_EN())*/
      else
      {
         gt_memObject.b_performMalloc = true;
   11786:	81 e0       	ldi	r24, 0x01	; 1
   11788:	80 93 65 25 	sts	0x2565, r24
         gt_memObject.gpv_newMem = pv_newMem;
   1178c:	c0 93 63 25 	sts	0x2563, r28
   11790:	d0 93 64 25 	sts	0x2564, r29
         gt_memObject.gs_sizeMem = t_size;
   11794:	00 93 61 25 	sts	0x2561, r16
   11798:	10 93 62 25 	sts	0x2562, r17
         arb_createMemIntsOff();
   1179c:	0e 94 d8 8a 	call	0x115b0	; 0x115b0 <arb_createMemIntsOff>
   117a0:	05 c0       	rjmp	.+10     	; 0x117ac <arb_malloc+0x5e>
   {
      /*---------------------------------------------------------------------*
       * WARNING - this assumes we are not running within thread space!
       * Threads are not active, no context switching required.
       *---------------------------------------------------------------------*/
      (*pv_newMem) = malloc( t_size);
   117a2:	c8 01       	movw	r24, r16
   117a4:	0e 94 c2 b5 	call	0x16b84	; 0x16b84 <malloc>
   117a8:	88 83       	st	Y, r24
   117aa:	99 83       	std	Y+1, r25	; 0x01
   }

}/*End arb_malloc*/
   117ac:	df 91       	pop	r29
   117ae:	cf 91       	pop	r28
   117b0:	1f 91       	pop	r17
   117b2:	0f 91       	pop	r16
   117b4:	08 95       	ret

000117b6 <arb_setPrintfDbgLevel>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_error arb_setPrintfDbgLevel( uint8_t c_dbg)
{
   gt_pObject.c_termDbgLevel = c_dbg;
   117b6:	80 93 6e 25 	sts	0x256E, r24
   switch( c_dbg)
   117ba:	84 30       	cpi	r24, 0x04	; 4
   117bc:	59 f0       	breq	.+22     	; 0x117d4 <arb_setPrintfDbgLevel+0x1e>
   117be:	85 30       	cpi	r24, 0x05	; 5
   117c0:	20 f4       	brcc	.+8      	; 0x117ca <arb_setPrintfDbgLevel+0x14>
   117c2:	81 50       	subi	r24, 0x01	; 1
   117c4:	82 30       	cpi	r24, 0x02	; 2
   117c6:	18 f4       	brcc	.+6      	; 0x117ce <arb_setPrintfDbgLevel+0x18>
   117c8:	05 c0       	rjmp	.+10     	; 0x117d4 <arb_setPrintfDbgLevel+0x1e>
   117ca:	80 32       	cpi	r24, 0x20	; 32
   117cc:	19 f0       	breq	.+6      	; 0x117d4 <arb_setPrintfDbgLevel+0x1e>
      case PRINTF_DBG_MED:
      case PRINTF_DBG_HIGH:
      case PRINTF_DBG_OFF:
      break;
      default:
         gt_pObject.c_termDbgLevel = PRINTF_DBG_HIGH;
   117ce:	84 e0       	ldi	r24, 0x04	; 4
   117d0:	80 93 6e 25 	sts	0x256E, r24
      break;
   }/*End if( (t_dbg >= 0) && (t_dbg <= PRINTF_DBG_OFF))*/

   return ARB_PASSED;

}/*End arb_setPrintfDbgLevel*/
   117d4:	80 e0       	ldi	r24, 0x00	; 0
   117d6:	08 95       	ret

000117d8 <arb_printfInit>:
}/*End arb_printfFlushBuf*/

t_error arb_printfInit( char *pc_driver,
                        int16_t s_bufSize,
                        char *pc_logFile)
{
   117d8:	0f 93       	push	r16
   117da:	1f 93       	push	r17
   117dc:	cf 93       	push	r28
   117de:	df 93       	push	r29
   117e0:	8b 01       	movw	r16, r22
   117e2:	ea 01       	movw	r28, r20

   gt_pObject.c_termDbgLevel = PRINTF_DBG_OFF;
   117e4:	20 e2       	ldi	r18, 0x20	; 32
   117e6:	20 93 6e 25 	sts	0x256E, r18
   gt_pObject.b_wrtLogFile   = false;
   117ea:	10 92 6f 25 	sts	0x256F, r1

   /*------------------------------------------------------------------------*
    * Open a handle to the printf driver.
    *------------------------------------------------------------------------*/
   gt_pObject.t_printfHndl = arb_open( pc_driver,
   117ee:	63 e0       	ldi	r22, 0x03	; 3
   117f0:	0e 94 67 85 	call	0x10ace	; 0x10ace <arb_open>
   117f4:	80 93 68 25 	sts	0x2568, r24
   117f8:	90 93 69 25 	sts	0x2569, r25
                                       ARB_O_READ |
                                       ARB_O_WRITE);

   if( gt_pObject.t_printfHndl < 0)
   117fc:	80 91 68 25 	lds	r24, 0x2568
   11800:	90 91 69 25 	lds	r25, 0x2569
   11804:	97 ff       	sbrs	r25, 7
   11806:	05 c0       	rjmp	.+10     	; 0x11812 <arb_printfInit+0x3a>
   {
      return (t_error)gt_pObject.t_printfHndl;
   11808:	80 91 68 25 	lds	r24, 0x2568
   1180c:	90 91 69 25 	lds	r25, 0x2569
   11810:	36 c0       	rjmp	.+108    	; 0x1187e <arb_printfInit+0xa6>

   /*------------------------------------------------------------------------*
    * If a valid file extension has been entered log printf messages to a 
    * file.
    *------------------------------------------------------------------------*/ 
   if( pc_logFile != NULL)
   11812:	20 97       	sbiw	r28, 0x00	; 0
   11814:	31 f1       	breq	.+76     	; 0x11862 <arb_printfInit+0x8a>
   {

      /*---------------------------------------------------------------------*
       * Open a file for logging debug information.
       *---------------------------------------------------------------------*/
      gt_pObject.t_logFileHndl = arb_open( pc_logFile,
   11816:	ce 01       	movw	r24, r28
   11818:	6a e4       	ldi	r22, 0x4A	; 74
   1181a:	0e 94 67 85 	call	0x10ace	; 0x10ace <arb_open>
   1181e:	80 93 6a 25 	sts	0x256A, r24
   11822:	90 93 6b 25 	sts	0x256B, r25
                                           ARB_O_SYNC);

      /*---------------------------------------------------------------------*
       * Don't return a failure if the file couldn't be opened.
       *---------------------------------------------------------------------*/
      if( gt_pObject.t_logFileHndl < 0)
   11826:	80 91 6a 25 	lds	r24, 0x256A
   1182a:	90 91 6b 25 	lds	r25, 0x256B
   1182e:	97 ff       	sbrs	r25, 7
   11830:	05 c0       	rjmp	.+10     	; 0x1183c <arb_printfInit+0x64>
      {
         return (t_error)gt_pObject.t_logFileHndl;
   11832:	80 91 6a 25 	lds	r24, 0x256A
   11836:	90 91 6b 25 	lds	r25, 0x256B
   1183a:	21 c0       	rjmp	.+66     	; 0x1187e <arb_printfInit+0xa6>
      }

      if( arb_ioctl( gt_pObject.t_logFileHndl,
   1183c:	80 91 6a 25 	lds	r24, 0x256A
   11840:	90 91 6b 25 	lds	r25, 0x256B
   11844:	62 e0       	ldi	r22, 0x02	; 2
   11846:	70 e0       	ldi	r23, 0x00	; 0
   11848:	20 e0       	ldi	r18, 0x00	; 0
   1184a:	30 e0       	ldi	r19, 0x00	; 0
   1184c:	40 e0       	ldi	r20, 0x00	; 0
   1184e:	50 e0       	ldi	r21, 0x00	; 0
   11850:	0e 94 8f 83 	call	0x1071e	; 0x1071e <arb_ioctl>
   11854:	97 ff       	sbrs	r25, 7
   11856:	02 c0       	rjmp	.+4      	; 0x1185c <arb_printfInit+0x84>
   11858:	80 ef       	ldi	r24, 0xF0	; 240
   1185a:	11 c0       	rjmp	.+34     	; 0x1187e <arb_printfInit+0xa6>
                     0) < 0)
      {
         return ARB_OPEN_ERROR;
      }

      gt_pObject.b_wrtLogFile = true;
   1185c:	81 e0       	ldi	r24, 0x01	; 1
   1185e:	80 93 6f 25 	sts	0x256F, r24
   }/*End if( pc_logFile != NULL)*/

   /*------------------------------------------------------------------------*
    * Allocate a circular buffer for holding the debug messages.
    *------------------------------------------------------------------------*/
   gt_pObject.t_logBuffer = utl_createBuffer( s_bufSize);
   11862:	c8 01       	movw	r24, r16
   11864:	0e 94 65 a2 	call	0x144ca	; 0x144ca <utl_createBuffer>
   11868:	80 93 6c 25 	sts	0x256C, r24
   1186c:	90 93 6d 25 	sts	0x256D, r25
   if( gt_pObject.t_logBuffer < 0)
   11870:	80 91 6c 25 	lds	r24, 0x256C
   11874:	90 91 6d 25 	lds	r25, 0x256D
   11878:	89 2f       	mov	r24, r25
   1187a:	88 0f       	add	r24, r24
   1187c:	88 0b       	sbc	r24, r24
      return ARB_OUT_OF_HEAP;
   }/*End if( gt_pObject.t_logBuffer < 0)*/

   return ARB_PASSED;

}/*End arb_printfInit*/
   1187e:	df 91       	pop	r29
   11880:	cf 91       	pop	r28
   11882:	1f 91       	pop	r17
   11884:	0f 91       	pop	r16
   11886:	08 95       	ret

00011888 <arb_sysPrintChar>:
{
   return gt_pObject.c_termDbgLevel;
}/*End arb_getPrintfDbgLevel*/

void arb_sysPrintChar( const char c_buff)
{
   11888:	df 93       	push	r29
   1188a:	cf 93       	push	r28
   1188c:	0f 92       	push	r0
   1188e:	cd b7       	in	r28, 0x3d	; 61
   11890:	de b7       	in	r29, 0x3e	; 62
   11892:	89 83       	std	Y+1, r24	; 0x01
   /*------------------------------------------------------------------------*
    * Write directly to the console, do not buffer the data...
    *------------------------------------------------------------------------*/
   arb_write( gt_pObject.t_printfHndl,
   11894:	80 91 68 25 	lds	r24, 0x2568
   11898:	90 91 69 25 	lds	r25, 0x2569
   1189c:	be 01       	movw	r22, r28
   1189e:	6f 5f       	subi	r22, 0xFF	; 255
   118a0:	7f 4f       	sbci	r23, 0xFF	; 255
   118a2:	41 e0       	ldi	r20, 0x01	; 1
   118a4:	50 e0       	ldi	r21, 0x00	; 0
   118a6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              (int8_t *)&c_buff,
              (uint16_t)1);

}/*End arb_sysPrintChar*/
   118aa:	0f 90       	pop	r0
   118ac:	cf 91       	pop	r28
   118ae:	df 91       	pop	r29
   118b0:	08 95       	ret

000118b2 <arb_printfFlushBuf>:
   HAL_END_CRITICAL();

}/*End arb_printf*/

void arb_printfFlushBuf( void)
{
   118b2:	6f 92       	push	r6
   118b4:	7f 92       	push	r7
   118b6:	8f 92       	push	r8
   118b8:	9f 92       	push	r9
   118ba:	af 92       	push	r10
   118bc:	bf 92       	push	r11
   118be:	cf 92       	push	r12
   118c0:	df 92       	push	r13
   118c2:	ef 92       	push	r14
   118c4:	ff 92       	push	r15
   118c6:	0f 93       	push	r16
   118c8:	1f 93       	push	r17
   118ca:	df 93       	push	r29
   118cc:	cf 93       	push	r28
   118ce:	cd b7       	in	r28, 0x3d	; 61
   118d0:	de b7       	in	r29, 0x3e	; 62
   118d2:	66 97       	sbiw	r28, 0x16	; 22
   118d4:	cd bf       	out	0x3d, r28	; 61
   118d6:	de bf       	out	0x3e, r29	; 62
   int16_t s_bytes;

   /*------------------------------------------------------------------------*
    * Get the head location of the log buffer...
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   118d8:	8f b7       	in	r24, 0x3f	; 63
   118da:	89 83       	std	Y+1, r24	; 0x01
   118dc:	f8 94       	cli
   pc_headPtr = utl_getBufferPtr( gt_pObject.t_logBuffer);
   118de:	80 91 6c 25 	lds	r24, 0x256C
   118e2:	90 91 6d 25 	lds	r25, 0x256D
   118e6:	0e 94 73 a1 	call	0x142e6	; 0x142e6 <utl_getBufferPtr>
   118ea:	4c 01       	movw	r8, r24
   s_level    = utl_getBufferFullLevel( gt_pObject.t_logBuffer);
   118ec:	80 91 6c 25 	lds	r24, 0x256C
   118f0:	90 91 6d 25 	lds	r25, 0x256D
   118f4:	0e 94 4b a1 	call	0x14296	; 0x14296 <utl_getBufferFullLevel>
   118f8:	6c 01       	movw	r12, r24
   s_size     = utl_getBufferSize( gt_pObject.t_logBuffer);
   118fa:	80 91 6c 25 	lds	r24, 0x256C
   118fe:	90 91 6d 25 	lds	r25, 0x256D
   11902:	0e 94 5f a1 	call	0x142be	; 0x142be <utl_getBufferSize>
   11906:	8c 01       	movw	r16, r24
   s_rdPtr    = utl_getBufRdPtr(gt_pObject.t_logBuffer);
   11908:	80 91 6c 25 	lds	r24, 0x256C
   1190c:	90 91 6d 25 	lds	r25, 0x256D
   11910:	0e 94 e3 a1 	call	0x143c6	; 0x143c6 <utl_getBufRdPtr>
   11914:	bc 01       	movw	r22, r24
   HAL_END_CRITICAL();
   11916:	89 81       	ldd	r24, Y+1	; 0x01
   11918:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Write the entire contents of the buffer...
    *------------------------------------------------------------------------*/
   if( s_level >= s_size)
   1191a:	c0 16       	cp	r12, r16
   1191c:	d1 06       	cpc	r13, r17
   1191e:	c4 f1       	brlt	.+112    	; 0x11990 <arb_printfFlushBuf+0xde>
   {
      /*---------------------------------------------------------------------*
       * Print only s_size bytes...
       *---------------------------------------------------------------------*/
      arb_write( gt_pObject.t_printfHndl,
   11920:	80 91 68 25 	lds	r24, 0x2568
   11924:	90 91 69 25 	lds	r25, 0x2569
   11928:	b4 01       	movw	r22, r8
   1192a:	a8 01       	movw	r20, r16
   1192c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 (int8_t *)pc_headPtr,
                 (uint16_t)s_size);

      if( gt_pObject.b_wrtLogFile == true)
   11930:	80 91 6f 25 	lds	r24, 0x256F
   11934:	88 23       	and	r24, r24
   11936:	11 f1       	breq	.+68     	; 0x1197c <arb_printfFlushBuf+0xca>
      {

         s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11938:	80 91 6a 25 	lds	r24, 0x256A
   1193c:	90 91 6b 25 	lds	r25, 0x256B
   11940:	b4 01       	movw	r22, r8
   11942:	a8 01       	movw	r20, r16
   11944:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                              (int8_t *)pc_headPtr,
                              s_size);

         if( s_bytes != s_size)
   11948:	80 17       	cp	r24, r16
   1194a:	91 07       	cpc	r25, r17
   1194c:	b9 f0       	breq	.+46     	; 0x1197c <arb_printfFlushBuf+0xca>
         {
            sprintf( (char *)ac_buff, "sd write failed\r");
   1194e:	8e 01       	movw	r16, r28
   11950:	0d 5f       	subi	r16, 0xFD	; 253
   11952:	1f 4f       	sbci	r17, 0xFF	; 255
   11954:	c8 01       	movw	r24, r16
   11956:	6a ec       	ldi	r22, 0xCA	; 202
   11958:	71 e2       	ldi	r23, 0x21	; 33
   1195a:	0e 94 27 b8 	call	0x1704e	; 0x1704e <strcpy>
            arb_write( gt_pObject.t_printfHndl,
   1195e:	80 91 68 25 	lds	r24, 0x2568
   11962:	90 91 69 25 	lds	r25, 0x2569
   11966:	f8 01       	movw	r30, r16
   11968:	01 90       	ld	r0, Z+
   1196a:	00 20       	and	r0, r0
   1196c:	e9 f7       	brne	.-6      	; 0x11968 <arb_printfFlushBuf+0xb6>
   1196e:	31 97       	sbiw	r30, 0x01	; 1
   11970:	e0 1b       	sub	r30, r16
   11972:	f1 0b       	sbc	r31, r17
   11974:	b8 01       	movw	r22, r16
   11976:	af 01       	movw	r20, r30
   11978:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      }/*End if( gt_pObject.b_wrtLogFile == true)*/

      /*---------------------------------------------------------------------*
       * Buffer overflowed so reset...
       *---------------------------------------------------------------------*/
      HAL_BEGIN_CRITICAL();
   1197c:	8f b7       	in	r24, 0x3f	; 63
   1197e:	8a 83       	std	Y+2, r24	; 0x02
   11980:	f8 94       	cli
      ult_resetBuffer(gt_pObject.t_logBuffer);
   11982:	80 91 6c 25 	lds	r24, 0x256C
   11986:	90 91 6d 25 	lds	r25, 0x256D
   1198a:	0e 94 2c a2 	call	0x14458	; 0x14458 <ult_resetBuffer>
   1198e:	8e c0       	rjmp	.+284    	; 0x11aac <arb_printfFlushBuf+0x1fa>
      HAL_END_CRITICAL();

   }/*End if( s_level > s_size)*/
   else if( s_level > 0)
   11990:	1c 14       	cp	r1, r12
   11992:	1d 04       	cpc	r1, r13
   11994:	0c f0       	brlt	.+2      	; 0x11998 <arb_printfFlushBuf+0xe6>
   11996:	8c c0       	rjmp	.+280    	; 0x11ab0 <arb_printfFlushBuf+0x1fe>
   {
      /*---------------------------------------------------------------------*
       * If wrapping the end of the buffer, print to console twice...
       *---------------------------------------------------------------------*/
      s_room = s_size - s_rdPtr;
   11998:	06 1b       	sub	r16, r22
   1199a:	17 0b       	sbc	r17, r23
   1199c:	54 01       	movw	r10, r8
   1199e:	a6 0e       	add	r10, r22
   119a0:	b7 1e       	adc	r11, r23
      if( s_room < s_level)
   119a2:	0c 15       	cp	r16, r12
   119a4:	1d 05       	cpc	r17, r13
   119a6:	0c f0       	brlt	.+2      	; 0x119aa <arb_printfFlushBuf+0xf8>
   119a8:	49 c0       	rjmp	.+146    	; 0x11a3c <arb_printfFlushBuf+0x18a>
      {
         arb_write( gt_pObject.t_printfHndl,
   119aa:	80 91 68 25 	lds	r24, 0x2568
   119ae:	90 91 69 25 	lds	r25, 0x2569
   119b2:	b5 01       	movw	r22, r10
   119b4:	a8 01       	movw	r20, r16
   119b6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                    (int8_t *)&pc_headPtr[s_rdPtr],
                    (uint16_t)s_room);

         arb_write( gt_pObject.t_printfHndl,
   119ba:	80 91 68 25 	lds	r24, 0x2568
   119be:	90 91 69 25 	lds	r25, 0x2569
   119c2:	76 01       	movw	r14, r12
   119c4:	e0 1a       	sub	r14, r16
   119c6:	f1 0a       	sbc	r15, r17
   119c8:	7e 2c       	mov	r7, r14
   119ca:	6f 2c       	mov	r6, r15
   119cc:	b4 01       	movw	r22, r8
   119ce:	a7 01       	movw	r20, r14
   119d0:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                    (int8_t *)&pc_headPtr[0],
                    (uint16_t)(s_level - s_room));

         if( gt_pObject.b_wrtLogFile == true)
   119d4:	80 91 6f 25 	lds	r24, 0x256F
   119d8:	88 23       	and	r24, r24
   119da:	09 f4       	brne	.+2      	; 0x119de <arb_printfFlushBuf+0x12c>
   119dc:	5d c0       	rjmp	.+186    	; 0x11a98 <arb_printfFlushBuf+0x1e6>
         {
            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   119de:	80 91 6a 25 	lds	r24, 0x256A
   119e2:	90 91 6b 25 	lds	r25, 0x256B
   119e6:	b5 01       	movw	r22, r10
   119e8:	a8 01       	movw	r20, r16
   119ea:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                                 (int8_t *)&pc_headPtr[s_rdPtr],
                                 (uint16_t)s_room);

            if( s_bytes != s_room)
   119ee:	80 17       	cp	r24, r16
   119f0:	91 07       	cpc	r25, r17
   119f2:	b9 f0       	breq	.+46     	; 0x11a22 <arb_printfFlushBuf+0x170>
            {
               sprintf( (char *)ac_buff, "sd write failed\r");
   119f4:	8e 01       	movw	r16, r28
   119f6:	0d 5f       	subi	r16, 0xFD	; 253
   119f8:	1f 4f       	sbci	r17, 0xFF	; 255
   119fa:	c8 01       	movw	r24, r16
   119fc:	6a ec       	ldi	r22, 0xCA	; 202
   119fe:	71 e2       	ldi	r23, 0x21	; 33
   11a00:	0e 94 27 b8 	call	0x1704e	; 0x1704e <strcpy>
               arb_write( gt_pObject.t_printfHndl,
   11a04:	80 91 68 25 	lds	r24, 0x2568
   11a08:	90 91 69 25 	lds	r25, 0x2569
   11a0c:	f8 01       	movw	r30, r16
   11a0e:	01 90       	ld	r0, Z+
   11a10:	00 20       	and	r0, r0
   11a12:	e9 f7       	brne	.-6      	; 0x11a0e <arb_printfFlushBuf+0x15c>
   11a14:	31 97       	sbiw	r30, 0x01	; 1
   11a16:	e0 1b       	sub	r30, r16
   11a18:	f1 0b       	sbc	r31, r17
   11a1a:	b8 01       	movw	r22, r16
   11a1c:	af 01       	movw	r20, r30
   11a1e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                          (int8_t *)ac_buff,
                          (uint16_t)strlen( (char *)ac_buff));
            }/*End if( s_bytes != s_room)*/

            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11a22:	80 91 6a 25 	lds	r24, 0x256A
   11a26:	90 91 6b 25 	lds	r25, 0x256B
   11a2a:	b4 01       	movw	r22, r8
   11a2c:	47 2d       	mov	r20, r7
   11a2e:	56 2d       	mov	r21, r6
   11a30:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                                 (int8_t *)&pc_headPtr[0],
                                 (uint16_t)(s_level - s_room));

            if( s_bytes != (uint16_t)(s_level - s_room))
   11a34:	8e 15       	cp	r24, r14
   11a36:	9f 05       	cpc	r25, r15
   11a38:	79 f1       	breq	.+94     	; 0x11a98 <arb_printfFlushBuf+0x1e6>
   11a3a:	17 c0       	rjmp	.+46     	; 0x11a6a <arb_printfFlushBuf+0x1b8>
         }/*End if( gt_pObject.b_wrtLogFile == true)*/

      }/*End if( s_room < s_level)*/
      else
      {
         arb_write( gt_pObject.t_printfHndl,
   11a3c:	80 91 68 25 	lds	r24, 0x2568
   11a40:	90 91 69 25 	lds	r25, 0x2569
   11a44:	b5 01       	movw	r22, r10
   11a46:	a6 01       	movw	r20, r12
   11a48:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                   (int8_t *)&pc_headPtr[s_rdPtr],
                   (uint16_t)s_level);

         if( gt_pObject.b_wrtLogFile == true)
   11a4c:	80 91 6f 25 	lds	r24, 0x256F
   11a50:	88 23       	and	r24, r24
   11a52:	11 f1       	breq	.+68     	; 0x11a98 <arb_printfFlushBuf+0x1e6>
         {

            s_bytes = arb_write( gt_pObject.t_logFileHndl,
   11a54:	80 91 6a 25 	lds	r24, 0x256A
   11a58:	90 91 6b 25 	lds	r25, 0x256B
   11a5c:	b5 01       	movw	r22, r10
   11a5e:	a6 01       	movw	r20, r12
   11a60:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                                 (int8_t *)&pc_headPtr[s_rdPtr],
                                 (uint16_t)s_level);

            if( s_bytes != s_level)
   11a64:	8c 15       	cp	r24, r12
   11a66:	9d 05       	cpc	r25, r13
   11a68:	b9 f0       	breq	.+46     	; 0x11a98 <arb_printfFlushBuf+0x1e6>
            {
               sprintf( (char *)ac_buff, "sd write failed\r");
   11a6a:	8e 01       	movw	r16, r28
   11a6c:	0d 5f       	subi	r16, 0xFD	; 253
   11a6e:	1f 4f       	sbci	r17, 0xFF	; 255
   11a70:	c8 01       	movw	r24, r16
   11a72:	6a ec       	ldi	r22, 0xCA	; 202
   11a74:	71 e2       	ldi	r23, 0x21	; 33
   11a76:	0e 94 27 b8 	call	0x1704e	; 0x1704e <strcpy>
               arb_write( gt_pObject.t_printfHndl,
   11a7a:	80 91 68 25 	lds	r24, 0x2568
   11a7e:	90 91 69 25 	lds	r25, 0x2569
   11a82:	f8 01       	movw	r30, r16
   11a84:	01 90       	ld	r0, Z+
   11a86:	00 20       	and	r0, r0
   11a88:	e9 f7       	brne	.-6      	; 0x11a84 <arb_printfFlushBuf+0x1d2>
   11a8a:	31 97       	sbiw	r30, 0x01	; 1
   11a8c:	e0 1b       	sub	r30, r16
   11a8e:	f1 0b       	sbc	r31, r17
   11a90:	b8 01       	movw	r22, r16
   11a92:	af 01       	movw	r20, r30
   11a94:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
            }/*End if( s_bytes != s_level)*/

         }/*End if( gt_pObject.b_wrtLogFile == true)*/
      }
      
      HAL_BEGIN_CRITICAL();
   11a98:	8f b7       	in	r24, 0x3f	; 63
   11a9a:	8a 83       	std	Y+2, r24	; 0x02
   11a9c:	f8 94       	cli
      utl_incrBufRdPtr( gt_pObject.t_logBuffer,
   11a9e:	80 91 6c 25 	lds	r24, 0x256C
   11aa2:	90 91 6d 25 	lds	r25, 0x256D
   11aa6:	b6 01       	movw	r22, r12
   11aa8:	0e 94 bc a1 	call	0x14378	; 0x14378 <utl_incrBufRdPtr>
                        (uint16_t)s_level);
      HAL_END_CRITICAL();
   11aac:	8a 81       	ldd	r24, Y+2	; 0x02
   11aae:	8f bf       	out	0x3f, r24	; 63
      
   }/*End else if( s_level > 0)*/

}/*End arb_printfFlushBuf*/
   11ab0:	66 96       	adiw	r28, 0x16	; 22
   11ab2:	cd bf       	out	0x3d, r28	; 61
   11ab4:	de bf       	out	0x3e, r29	; 62
   11ab6:	cf 91       	pop	r28
   11ab8:	df 91       	pop	r29
   11aba:	1f 91       	pop	r17
   11abc:	0f 91       	pop	r16
   11abe:	ff 90       	pop	r15
   11ac0:	ef 90       	pop	r14
   11ac2:	df 90       	pop	r13
   11ac4:	cf 90       	pop	r12
   11ac6:	bf 90       	pop	r11
   11ac8:	af 90       	pop	r10
   11aca:	9f 90       	pop	r9
   11acc:	8f 90       	pop	r8
   11ace:	7f 90       	pop	r7
   11ad0:	6f 90       	pop	r6
   11ad2:	08 95       	ret

00011ad4 <arb_printf>:

}/*End arb_sysPrintChar*/

void arb_printf( uint8_t c_flags,
                 const char *pc_buff)
{
   11ad4:	af 92       	push	r10
   11ad6:	bf 92       	push	r11
   11ad8:	cf 92       	push	r12
   11ada:	df 92       	push	r13
   11adc:	ef 92       	push	r14
   11ade:	ff 92       	push	r15
   11ae0:	0f 93       	push	r16
   11ae2:	1f 93       	push	r17
   11ae4:	df 93       	push	r29
   11ae6:	cf 93       	push	r28
   11ae8:	cd b7       	in	r28, 0x3d	; 61
   11aea:	de b7       	in	r29, 0x3e	; 62
   11aec:	ae 97       	sbiw	r28, 0x2e	; 46
   11aee:	cd bf       	out	0x3d, r28	; 61
   11af0:	de bf       	out	0x3e, r29	; 62
   11af2:	b6 2e       	mov	r11, r22
   11af4:	a7 2e       	mov	r10, r23
   t_sysTime t_time;
   uint16_t s_size = 0;
   uint8_t ac_buff[20];
   int16_t s_msec;

   HAL_BEGIN_CRITICAL();
   11af6:	9f b7       	in	r25, 0x3f	; 63
   11af8:	99 83       	std	Y+1, r25	; 0x01
   11afa:	f8 94       	cli

   if( (c_flags &  PRINTF_DBG_SHOW_TIME) &&
   11afc:	e8 2e       	mov	r14, r24
   11afe:	ff 24       	eor	r15, r15
   11b00:	86 ff       	sbrs	r24, 6
   11b02:	fe c0       	rjmp	.+508    	; 0x11d00 <arb_printf+0x22c>
   11b04:	97 01       	movw	r18, r14
   11b06:	27 70       	andi	r18, 0x07	; 7
   11b08:	30 70       	andi	r19, 0x00	; 0
   11b0a:	80 91 6e 25 	lds	r24, 0x256E
   11b0e:	90 e0       	ldi	r25, 0x00	; 0
   11b10:	28 17       	cp	r18, r24
   11b12:	39 07       	cpc	r19, r25
   11b14:	0c f4       	brge	.+2      	; 0x11b18 <arb_printf+0x44>
   11b16:	f4 c0       	rjmp	.+488    	; 0x11d00 <arb_printf+0x22c>
       ((c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel))
   {
      t_time = arb_sysTimeNow();
   11b18:	ce 01       	movw	r24, r28
   11b1a:	46 96       	adiw	r24, 0x16	; 22
   11b1c:	0e 94 a9 9d 	call	0x13b52	; 0x13b52 <arb_sysTimeNow>
   11b20:	ca a4       	ldd	r12, Y+42	; 0x2a
   11b22:	d9 a4       	ldd	r13, Y+41	; 0x29
   11b24:	28 a5       	ldd	r18, Y+40	; 0x28
   11b26:	ce 01       	movw	r24, r28
   11b28:	02 96       	adiw	r24, 0x02	; 2
      if( t_time.c_hours < 10)
   11b2a:	2a 30       	cpi	r18, 0x0A	; 10
   11b2c:	70 f4       	brcc	.+28     	; 0x11b4a <arb_printf+0x76>
         s_size = sprintf_P( (char *)ac_buff,
   11b2e:	00 d0       	rcall	.+0      	; 0x11b30 <arb_printf+0x5c>
   11b30:	00 d0       	rcall	.+0      	; 0x11b32 <arb_printf+0x5e>
   11b32:	ed b7       	in	r30, 0x3d	; 61
   11b34:	fe b7       	in	r31, 0x3e	; 62
   11b36:	31 96       	adiw	r30, 0x01	; 1
   11b38:	ad b7       	in	r26, 0x3d	; 61
   11b3a:	be b7       	in	r27, 0x3e	; 62
   11b3c:	11 96       	adiw	r26, 0x01	; 1
   11b3e:	8d 93       	st	X+, r24
   11b40:	9c 93       	st	X, r25
   11b42:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("[%02d:"),
   11b44:	86 ec       	ldi	r24, 0xC6	; 198
   11b46:	9b e0       	ldi	r25, 0x0B	; 11
   11b48:	0d c0       	rjmp	.+26     	; 0x11b64 <arb_printf+0x90>
                              t_time.c_hours);
      else
         s_size = sprintf_P( (char *)ac_buff,
   11b4a:	00 d0       	rcall	.+0      	; 0x11b4c <arb_printf+0x78>
   11b4c:	00 d0       	rcall	.+0      	; 0x11b4e <arb_printf+0x7a>
   11b4e:	ed b7       	in	r30, 0x3d	; 61
   11b50:	fe b7       	in	r31, 0x3e	; 62
   11b52:	31 96       	adiw	r30, 0x01	; 1
   11b54:	ad b7       	in	r26, 0x3d	; 61
   11b56:	be b7       	in	r27, 0x3e	; 62
   11b58:	11 96       	adiw	r26, 0x01	; 1
   11b5a:	8d 93       	st	X+, r24
   11b5c:	9c 93       	st	X, r25
   11b5e:	12 97       	sbiw	r26, 0x02	; 2
                             PSTR("[%2d:"),
   11b60:	80 ec       	ldi	r24, 0xC0	; 192
   11b62:	9b e0       	ldi	r25, 0x0B	; 11
   11b64:	82 83       	std	Z+2, r24	; 0x02
   11b66:	93 83       	std	Z+3, r25	; 0x03
   11b68:	24 83       	std	Z+4, r18	; 0x04
   11b6a:	15 82       	std	Z+5, r1	; 0x05
   11b6c:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
      if( t_time.c_hours < 10)
         s_size = sprintf_P( (char *)ac_buff,
                              PSTR("[%02d:"),
                              t_time.c_hours);
      else
         s_size = sprintf_P( (char *)ac_buff,
   11b70:	8c 01       	movw	r16, r24
   11b72:	8d b7       	in	r24, 0x3d	; 61
   11b74:	9e b7       	in	r25, 0x3e	; 62
   11b76:	06 96       	adiw	r24, 0x06	; 6
   11b78:	8d bf       	out	0x3d, r24	; 61
   11b7a:	9e bf       	out	0x3e, r25	; 62
   11b7c:	ce 01       	movw	r24, r28
   11b7e:	02 96       	adiw	r24, 0x02	; 2
                             PSTR("[%2d:"),
                             t_time.c_hours);

      if( t_time.c_min < 10)
   11b80:	a9 e0       	ldi	r26, 0x09	; 9
   11b82:	ad 15       	cp	r26, r13
   11b84:	80 f0       	brcs	.+32     	; 0x11ba6 <arb_printf+0xd2>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11b86:	00 d0       	rcall	.+0      	; 0x11b88 <arb_printf+0xb4>
   11b88:	00 d0       	rcall	.+0      	; 0x11b8a <arb_printf+0xb6>
   11b8a:	ed b7       	in	r30, 0x3d	; 61
   11b8c:	fe b7       	in	r31, 0x3e	; 62
   11b8e:	31 96       	adiw	r30, 0x01	; 1
   11b90:	80 0f       	add	r24, r16
   11b92:	91 1f       	adc	r25, r17
   11b94:	ad b7       	in	r26, 0x3d	; 61
   11b96:	be b7       	in	r27, 0x3e	; 62
   11b98:	11 96       	adiw	r26, 0x01	; 1
   11b9a:	8d 93       	st	X+, r24
   11b9c:	9c 93       	st	X, r25
   11b9e:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%02d:"),
   11ba0:	8a eb       	ldi	r24, 0xBA	; 186
   11ba2:	9b e0       	ldi	r25, 0x0B	; 11
   11ba4:	0f c0       	rjmp	.+30     	; 0x11bc4 <arb_printf+0xf0>
                              t_time.c_min);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11ba6:	00 d0       	rcall	.+0      	; 0x11ba8 <arb_printf+0xd4>
   11ba8:	00 d0       	rcall	.+0      	; 0x11baa <arb_printf+0xd6>
   11baa:	ed b7       	in	r30, 0x3d	; 61
   11bac:	fe b7       	in	r31, 0x3e	; 62
   11bae:	31 96       	adiw	r30, 0x01	; 1
   11bb0:	80 0f       	add	r24, r16
   11bb2:	91 1f       	adc	r25, r17
   11bb4:	ad b7       	in	r26, 0x3d	; 61
   11bb6:	be b7       	in	r27, 0x3e	; 62
   11bb8:	11 96       	adiw	r26, 0x01	; 1
   11bba:	8d 93       	st	X+, r24
   11bbc:	9c 93       	st	X, r25
   11bbe:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%2d:"),
   11bc0:	85 eb       	ldi	r24, 0xB5	; 181
   11bc2:	9b e0       	ldi	r25, 0x0B	; 11
   11bc4:	82 83       	std	Z+2, r24	; 0x02
   11bc6:	93 83       	std	Z+3, r25	; 0x03
   11bc8:	d4 82       	std	Z+4, r13	; 0x04
   11bca:	15 82       	std	Z+5, r1	; 0x05
   11bcc:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
      if( t_time.c_min < 10)
         s_size += sprintf_P( (char *)&ac_buff[s_size],
                              PSTR("%02d:"),
                              t_time.c_min);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11bd0:	08 0f       	add	r16, r24
   11bd2:	19 1f       	adc	r17, r25
   11bd4:	8d b7       	in	r24, 0x3d	; 61
   11bd6:	9e b7       	in	r25, 0x3e	; 62
   11bd8:	06 96       	adiw	r24, 0x06	; 6
   11bda:	8d bf       	out	0x3d, r24	; 61
   11bdc:	9e bf       	out	0x3e, r25	; 62
   11bde:	ce 01       	movw	r24, r28
   11be0:	02 96       	adiw	r24, 0x02	; 2
                              PSTR("%2d:"),
                              t_time.c_min);

      if( t_time.c_sec < 10)
   11be2:	a9 e0       	ldi	r26, 0x09	; 9
   11be4:	ac 15       	cp	r26, r12
   11be6:	80 f0       	brcs	.+32     	; 0x11c08 <arb_printf+0x134>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11be8:	00 d0       	rcall	.+0      	; 0x11bea <arb_printf+0x116>
   11bea:	00 d0       	rcall	.+0      	; 0x11bec <arb_printf+0x118>
   11bec:	ed b7       	in	r30, 0x3d	; 61
   11bee:	fe b7       	in	r31, 0x3e	; 62
   11bf0:	31 96       	adiw	r30, 0x01	; 1
   11bf2:	80 0f       	add	r24, r16
   11bf4:	91 1f       	adc	r25, r17
   11bf6:	ad b7       	in	r26, 0x3d	; 61
   11bf8:	be b7       	in	r27, 0x3e	; 62
   11bfa:	11 96       	adiw	r26, 0x01	; 1
   11bfc:	8d 93       	st	X+, r24
   11bfe:	9c 93       	st	X, r25
   11c00:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%02d:"),
   11c02:	8f ea       	ldi	r24, 0xAF	; 175
   11c04:	9b e0       	ldi	r25, 0x0B	; 11
   11c06:	0f c0       	rjmp	.+30     	; 0x11c26 <arb_printf+0x152>
                              t_time.c_sec);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11c08:	00 d0       	rcall	.+0      	; 0x11c0a <arb_printf+0x136>
   11c0a:	00 d0       	rcall	.+0      	; 0x11c0c <arb_printf+0x138>
   11c0c:	ed b7       	in	r30, 0x3d	; 61
   11c0e:	fe b7       	in	r31, 0x3e	; 62
   11c10:	31 96       	adiw	r30, 0x01	; 1
   11c12:	80 0f       	add	r24, r16
   11c14:	91 1f       	adc	r25, r17
   11c16:	ad b7       	in	r26, 0x3d	; 61
   11c18:	be b7       	in	r27, 0x3e	; 62
   11c1a:	11 96       	adiw	r26, 0x01	; 1
   11c1c:	8d 93       	st	X+, r24
   11c1e:	9c 93       	st	X, r25
   11c20:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%2d:"),
   11c22:	8a ea       	ldi	r24, 0xAA	; 170
   11c24:	9b e0       	ldi	r25, 0x0B	; 11
   11c26:	82 83       	std	Z+2, r24	; 0x02
   11c28:	93 83       	std	Z+3, r25	; 0x03
   11c2a:	c4 82       	std	Z+4, r12	; 0x04
   11c2c:	15 82       	std	Z+5, r1	; 0x05
   11c2e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
      if( t_time.c_sec < 10)
         s_size += sprintf_P( (char *)&ac_buff[s_size],
                              PSTR("%02d:"),
                              t_time.c_sec);
      else
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11c32:	08 0f       	add	r16, r24
   11c34:	19 1f       	adc	r17, r25
   11c36:	8d b7       	in	r24, 0x3d	; 61
   11c38:	9e b7       	in	r25, 0x3e	; 62
   11c3a:	06 96       	adiw	r24, 0x06	; 6
   11c3c:	8d bf       	out	0x3d, r24	; 61
   11c3e:	9e bf       	out	0x3e, r25	; 62
                              PSTR("%2d:"),
                              t_time.c_sec);

      s_msec = t_time.i_usec/1000;
   11c40:	6b a5       	ldd	r22, Y+43	; 0x2b
   11c42:	7c a5       	ldd	r23, Y+44	; 0x2c
   11c44:	8d a5       	ldd	r24, Y+45	; 0x2d
   11c46:	9e a5       	ldd	r25, Y+46	; 0x2e
   11c48:	28 ee       	ldi	r18, 0xE8	; 232
   11c4a:	33 e0       	ldi	r19, 0x03	; 3
   11c4c:	40 e0       	ldi	r20, 0x00	; 0
   11c4e:	50 e0       	ldi	r21, 0x00	; 0
   11c50:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
      if( s_msec < 10)
   11c54:	2a 30       	cpi	r18, 0x0A	; 10
   11c56:	31 05       	cpc	r19, r1
   11c58:	94 f4       	brge	.+36     	; 0x11c7e <arb_printf+0x1aa>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11c5a:	00 d0       	rcall	.+0      	; 0x11c5c <arb_printf+0x188>
   11c5c:	00 d0       	rcall	.+0      	; 0x11c5e <arb_printf+0x18a>
   11c5e:	ed b7       	in	r30, 0x3d	; 61
   11c60:	fe b7       	in	r31, 0x3e	; 62
   11c62:	31 96       	adiw	r30, 0x01	; 1
   11c64:	ce 01       	movw	r24, r28
   11c66:	02 96       	adiw	r24, 0x02	; 2
   11c68:	80 0f       	add	r24, r16
   11c6a:	91 1f       	adc	r25, r17
   11c6c:	ad b7       	in	r26, 0x3d	; 61
   11c6e:	be b7       	in	r27, 0x3e	; 62
   11c70:	11 96       	adiw	r26, 0x01	; 1
   11c72:	8d 93       	st	X+, r24
   11c74:	9c 93       	st	X, r25
   11c76:	12 97       	sbiw	r26, 0x02	; 2
                               PSTR("%003d]  "),
   11c78:	81 ea       	ldi	r24, 0xA1	; 161
   11c7a:	9b e0       	ldi	r25, 0x0B	; 11
   11c7c:	2a c0       	rjmp	.+84     	; 0x11cd2 <arb_printf+0x1fe>
                               s_msec);
      else if( s_msec < 100)
   11c7e:	24 36       	cpi	r18, 0x64	; 100
   11c80:	31 05       	cpc	r19, r1
   11c82:	94 f4       	brge	.+36     	; 0x11ca8 <arb_printf+0x1d4>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11c84:	00 d0       	rcall	.+0      	; 0x11c86 <arb_printf+0x1b2>
   11c86:	00 d0       	rcall	.+0      	; 0x11c88 <arb_printf+0x1b4>
   11c88:	ed b7       	in	r30, 0x3d	; 61
   11c8a:	fe b7       	in	r31, 0x3e	; 62
   11c8c:	31 96       	adiw	r30, 0x01	; 1
   11c8e:	ce 01       	movw	r24, r28
   11c90:	02 96       	adiw	r24, 0x02	; 2
   11c92:	80 0f       	add	r24, r16
   11c94:	91 1f       	adc	r25, r17
   11c96:	ad b7       	in	r26, 0x3d	; 61
   11c98:	be b7       	in	r27, 0x3e	; 62
   11c9a:	11 96       	adiw	r26, 0x01	; 1
   11c9c:	8d 93       	st	X+, r24
   11c9e:	9c 93       	st	X, r25
   11ca0:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%03d]  "),
   11ca2:	89 e9       	ldi	r24, 0x99	; 153
   11ca4:	9b e0       	ldi	r25, 0x0B	; 11
   11ca6:	15 c0       	rjmp	.+42     	; 0x11cd2 <arb_printf+0x1fe>
                              s_msec);
      else if( s_msec < 1000)
   11ca8:	a3 e0       	ldi	r26, 0x03	; 3
   11caa:	28 3e       	cpi	r18, 0xE8	; 232
   11cac:	3a 07       	cpc	r19, r26
   11cae:	f4 f4       	brge	.+60     	; 0x11cec <arb_printf+0x218>
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11cb0:	00 d0       	rcall	.+0      	; 0x11cb2 <arb_printf+0x1de>
   11cb2:	00 d0       	rcall	.+0      	; 0x11cb4 <arb_printf+0x1e0>
   11cb4:	ed b7       	in	r30, 0x3d	; 61
   11cb6:	fe b7       	in	r31, 0x3e	; 62
   11cb8:	31 96       	adiw	r30, 0x01	; 1
   11cba:	ce 01       	movw	r24, r28
   11cbc:	02 96       	adiw	r24, 0x02	; 2
   11cbe:	80 0f       	add	r24, r16
   11cc0:	91 1f       	adc	r25, r17
   11cc2:	ad b7       	in	r26, 0x3d	; 61
   11cc4:	be b7       	in	r27, 0x3e	; 62
   11cc6:	11 96       	adiw	r26, 0x01	; 1
   11cc8:	8d 93       	st	X+, r24
   11cca:	9c 93       	st	X, r25
   11ccc:	12 97       	sbiw	r26, 0x02	; 2
                              PSTR("%3d]  "),
   11cce:	82 e9       	ldi	r24, 0x92	; 146
   11cd0:	9b e0       	ldi	r25, 0x0B	; 11
   11cd2:	82 83       	std	Z+2, r24	; 0x02
   11cd4:	93 83       	std	Z+3, r25	; 0x03
   11cd6:	24 83       	std	Z+4, r18	; 0x04
   11cd8:	35 83       	std	Z+5, r19	; 0x05
   11cda:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
      else if( s_msec < 100)
         s_size += sprintf_P( (char *)&ac_buff[s_size],
                              PSTR("%03d]  "),
                              s_msec);
      else if( s_msec < 1000)
         s_size += sprintf_P( (char *)&ac_buff[s_size],
   11cde:	08 0f       	add	r16, r24
   11ce0:	19 1f       	adc	r17, r25
   11ce2:	8d b7       	in	r24, 0x3d	; 61
   11ce4:	9e b7       	in	r25, 0x3e	; 62
   11ce6:	06 96       	adiw	r24, 0x06	; 6
   11ce8:	8d bf       	out	0x3d, r24	; 61
   11cea:	9e bf       	out	0x3e, r25	; 62
                              s_msec);

      /*---------------------------------------------------------------------*
       * Store the current time in the circular buffer.
       *---------------------------------------------------------------------*/
      utl_writeBlock( gt_pObject.t_logBuffer,
   11cec:	80 91 6c 25 	lds	r24, 0x256C
   11cf0:	90 91 6d 25 	lds	r25, 0x256D
   11cf4:	be 01       	movw	r22, r28
   11cf6:	6e 5f       	subi	r22, 0xFE	; 254
   11cf8:	7f 4f       	sbci	r23, 0xFF	; 255
   11cfa:	a8 01       	movw	r20, r16
   11cfc:	0e 94 17 a3 	call	0x1462e	; 0x1462e <utl_writeBlock>
   }

   /*------------------------------------------------------------------------*
    * Store the debug message in the circular buffer based on priority.
    *------------------------------------------------------------------------*/
   if( (c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel)
   11d00:	97 e0       	ldi	r25, 0x07	; 7
   11d02:	e9 22       	and	r14, r25
   11d04:	ff 24       	eor	r15, r15
   11d06:	80 91 6e 25 	lds	r24, 0x256E
   11d0a:	90 e0       	ldi	r25, 0x00	; 0
   11d0c:	e8 16       	cp	r14, r24
   11d0e:	f9 06       	cpc	r15, r25
   11d10:	cc f0       	brlt	.+50     	; 0x11d44 <arb_printf+0x270>
   {

      utl_writeBlock( gt_pObject.t_logBuffer,
   11d12:	80 91 6c 25 	lds	r24, 0x256C
   11d16:	90 91 6d 25 	lds	r25, 0x256D
   11d1a:	eb 2d       	mov	r30, r11
   11d1c:	fa 2d       	mov	r31, r10
   11d1e:	df 01       	movw	r26, r30
   11d20:	0d 90       	ld	r0, X+
   11d22:	00 20       	and	r0, r0
   11d24:	e9 f7       	brne	.-6      	; 0x11d20 <arb_printf+0x24c>
   11d26:	11 97       	sbiw	r26, 0x01	; 1
   11d28:	ae 1b       	sub	r26, r30
   11d2a:	bf 0b       	sbc	r27, r31
   11d2c:	6b 2d       	mov	r22, r11
   11d2e:	7a 2d       	mov	r23, r10
   11d30:	ad 01       	movw	r20, r26
   11d32:	0e 94 17 a3 	call	0x1462e	; 0x1462e <utl_writeBlock>
                      (uint16_t)strlen( (char *)pc_buff));

      /*------------------------------------------------------------------------*
       * Append a new line to the end of the buffer.
       *------------------------------------------------------------------------*/
      utl_writeByte( gt_pObject.t_logBuffer,
   11d36:	80 91 6c 25 	lds	r24, 0x256C
   11d3a:	90 91 6d 25 	lds	r25, 0x256D
   11d3e:	6a e0       	ldi	r22, 0x0A	; 10
   11d40:	0e 94 87 a1 	call	0x1430e	; 0x1430e <utl_writeByte>
                     '\n');

   }/*End if( (c_flags & PRINTF_DBG_PRIORITY_MASK) >= gt_pObject.c_termDbgLevel)*/

   HAL_END_CRITICAL();
   11d44:	89 81       	ldd	r24, Y+1	; 0x01
   11d46:	8f bf       	out	0x3f, r24	; 63

}/*End arb_printf*/
   11d48:	ae 96       	adiw	r28, 0x2e	; 46
   11d4a:	cd bf       	out	0x3d, r28	; 61
   11d4c:	de bf       	out	0x3e, r29	; 62
   11d4e:	cf 91       	pop	r28
   11d50:	df 91       	pop	r29
   11d52:	1f 91       	pop	r17
   11d54:	0f 91       	pop	r16
   11d56:	ff 90       	pop	r15
   11d58:	ef 90       	pop	r14
   11d5a:	df 90       	pop	r13
   11d5c:	cf 90       	pop	r12
   11d5e:	bf 90       	pop	r11
   11d60:	af 90       	pop	r10
   11d62:	08 95       	ret

00011d64 <arb_getOneMinLoadingEst>:
   HAL_RET();

}/*End arb_schedulerStart*/

uint32_t arb_getOneMinLoadingEst( void)
{
   11d64:	60 91 77 25 	lds	r22, 0x2577
   11d68:	70 91 78 25 	lds	r23, 0x2578
   return gt_schedObject.ai_loading[0];
}/*End arb_getOneMinLoadingEst*/
   11d6c:	80 91 79 25 	lds	r24, 0x2579
   11d70:	90 91 7a 25 	lds	r25, 0x257A
   11d74:	08 95       	ret

00011d76 <arb_getFiveMinLoadingEst>:

uint32_t arb_getFiveMinLoadingEst( void)
{
   11d76:	60 91 7b 25 	lds	r22, 0x257B
   11d7a:	70 91 7c 25 	lds	r23, 0x257C
   return gt_schedObject.ai_loading[1];
}/*End arb_getFiveMinLoadingEst*/
   11d7e:	80 91 7d 25 	lds	r24, 0x257D
   11d82:	90 91 7e 25 	lds	r25, 0x257E
   11d86:	08 95       	ret

00011d88 <arb_roundRobinScheduler>:

/*---------------------------------------------------------------------------*
 * Round-robin scheduler
 *---------------------------------------------------------------------------*/
static void arb_roundRobinScheduler( void)
{
   11d88:	4f 92       	push	r4
   11d8a:	5f 92       	push	r5
   11d8c:	6f 92       	push	r6
   11d8e:	7f 92       	push	r7
   11d90:	8f 92       	push	r8
   11d92:	9f 92       	push	r9
   11d94:	af 92       	push	r10
   11d96:	bf 92       	push	r11
   11d98:	cf 92       	push	r12
   11d9a:	df 92       	push	r13
   11d9c:	ef 92       	push	r14
   11d9e:	ff 92       	push	r15
   11da0:	0f 93       	push	r16
   11da2:	1f 93       	push	r17
   11da4:	df 93       	push	r29
   11da6:	cf 93       	push	r28
   11da8:	00 d0       	rcall	.+0      	; 0x11daa <arb_roundRobinScheduler+0x22>
   11daa:	0f 92       	push	r0
   11dac:	cd b7       	in	r28, 0x3d	; 61
   11dae:	de b7       	in	r29, 0x3e	; 62
   t_LINKHNDL t_curr = UTL_GET_CURR_OF_CONT( gt_activeThreads);
   11db0:	e0 91 29 22 	lds	r30, 0x2229
   11db4:	f0 91 2a 22 	lds	r31, 0x222A
   11db8:	86 81       	ldd	r24, Z+6	; 0x06
   11dba:	97 81       	ldd	r25, Z+7	; 0x07
   11dbc:	89 83       	std	Y+1, r24	; 0x01
   11dbe:	9a 83       	std	Y+2, r25	; 0x02
   t_tcb *pt_temp;

   if( gt_schedObject.b_enableScheduler == true)
   11dc0:	80 91 74 25 	lds	r24, 0x2574
   11dc4:	88 23       	and	r24, r24
   11dc6:	09 f4       	brne	.+2      	; 0x11dca <arb_roundRobinScheduler+0x42>
   11dc8:	a3 c1       	rjmp	.+838    	; 0x12110 <arb_roundRobinScheduler+0x388>
      /*---------------------------------------------------------------------*
       * Sequentially search for the next thread that isn't sleeping
       *---------------------------------------------------------------------*/
      do
      {
         t_curr  = UTL_GET_NEXT_LINK( t_curr);
   11dca:	e9 81       	ldd	r30, Y+1	; 0x01
   11dcc:	fa 81       	ldd	r31, Y+2	; 0x02
   11dce:	80 85       	ldd	r24, Z+8	; 0x08
   11dd0:	91 85       	ldd	r25, Z+9	; 0x09
   11dd2:	89 83       	std	Y+1, r24	; 0x01
   11dd4:	9a 83       	std	Y+2, r25	; 0x02
         pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   11dd6:	e9 81       	ldd	r30, Y+1	; 0x01
   11dd8:	fa 81       	ldd	r31, Y+2	; 0x02
   11dda:	a0 81       	ld	r26, Z
   11ddc:	b1 81       	ldd	r27, Z+1	; 0x01

      }while( pt_temp->t_status == SLEEPING);
   11dde:	11 96       	adiw	r26, 0x01	; 1
   11de0:	8c 91       	ld	r24, X
   11de2:	11 97       	sbiw	r26, 0x01	; 1
   11de4:	83 30       	cpi	r24, 0x03	; 3
   11de6:	89 f3       	breq	.-30     	; 0x11dca <arb_roundRobinScheduler+0x42>

      /*---------------------------------------------------------------------*
       * Set the location of the new 'current' thread
       *---------------------------------------------------------------------*/
      UTL_SET_CURR_OF_CONT( gt_activeThreads, t_curr);
   11de8:	e0 91 29 22 	lds	r30, 0x2229
   11dec:	f0 91 2a 22 	lds	r31, 0x222A
   11df0:	89 81       	ldd	r24, Y+1	; 0x01
   11df2:	9a 81       	ldd	r25, Y+2	; 0x02
   11df4:	86 83       	std	Z+6, r24	; 0x06
   11df6:	97 83       	std	Z+7, r25	; 0x07

      gpt_activeThread = pt_temp;
   11df8:	a0 93 70 25 	sts	0x2570, r26
   11dfc:	b0 93 71 25 	sts	0x2571, r27

      /*---------------------------------------------------------------------*
       * Change the status of this new thread to RUNNING
       *---------------------------------------------------------------------*/
      pt_temp->t_status = RUNNING;
   11e00:	81 e0       	ldi	r24, 0x01	; 1
   11e02:	11 96       	adiw	r26, 0x01	; 1
   11e04:	8c 93       	st	X, r24

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   11e06:	e0 91 29 22 	lds	r30, 0x2229
   11e0a:	f0 91 2a 22 	lds	r31, 0x222A
   11e0e:	62 81       	ldd	r22, Z+2	; 0x02
   11e10:	73 81       	ldd	r23, Z+3	; 0x03
   11e12:	e0 91 29 22 	lds	r30, 0x2229
   11e16:	f0 91 2a 22 	lds	r31, 0x222A
   11e1a:	80 85       	ldd	r24, Z+8	; 0x08
   11e1c:	91 85       	ldd	r25, Z+9	; 0x09
   11e1e:	8b 83       	std	Y+3, r24	; 0x03
   11e20:	9c 83       	std	Y+4, r25	; 0x04
   11e22:	20 91 7f 25 	lds	r18, 0x257F
   11e26:	30 91 80 25 	lds	r19, 0x2580
   11e2a:	40 91 81 25 	lds	r20, 0x2581
   11e2e:	50 91 82 25 	lds	r21, 0x2582
   11e32:	17 c0       	rjmp	.+46     	; 0x11e62 <arb_roundRobinScheduler+0xda>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   11e34:	eb 81       	ldd	r30, Y+3	; 0x03
   11e36:	fc 81       	ldd	r31, Y+4	; 0x04
   11e38:	01 90       	ld	r0, Z+
   11e3a:	f0 81       	ld	r31, Z
   11e3c:	e0 2d       	mov	r30, r0
      if( ((pt_temp->t_status == READY) ||
   11e3e:	81 81       	ldd	r24, Z+1	; 0x01
   11e40:	82 30       	cpi	r24, 0x02	; 2
   11e42:	38 f4       	brcc	.+14     	; 0x11e52 <arb_roundRobinScheduler+0xca>
   11e44:	82 81       	ldd	r24, Z+2	; 0x02
   11e46:	8f 3f       	cpi	r24, 0xFF	; 255
   11e48:	21 f0       	breq	.+8      	; 0x11e52 <arb_roundRobinScheduler+0xca>
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   11e4a:	2f 5f       	subi	r18, 0xFF	; 255
   11e4c:	3f 4f       	sbci	r19, 0xFF	; 255
   11e4e:	4f 4f       	sbci	r20, 0xFF	; 255
   11e50:	5f 4f       	sbci	r21, 0xFF	; 255

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   11e52:	61 50       	subi	r22, 0x01	; 1
   11e54:	70 40       	sbci	r23, 0x00	; 0
   11e56:	eb 81       	ldd	r30, Y+3	; 0x03
   11e58:	fc 81       	ldd	r31, Y+4	; 0x04
   11e5a:	80 85       	ldd	r24, Z+8	; 0x08
   11e5c:	91 85       	ldd	r25, Z+9	; 0x09
   11e5e:	8b 83       	std	Y+3, r24	; 0x03
   11e60:	9c 83       	std	Y+4, r25	; 0x04
   11e62:	61 15       	cp	r22, r1
   11e64:	71 05       	cpc	r23, r1
   11e66:	31 f7       	brne	.-52     	; 0x11e34 <arb_roundRobinScheduler+0xac>
   11e68:	20 93 7f 25 	sts	0x257F, r18
   11e6c:	30 93 80 25 	sts	0x2580, r19
   11e70:	40 93 81 25 	sts	0x2581, r20
   11e74:	50 93 82 25 	sts	0x2582, r21
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   }

   gt_schedObject.s_loadUpdateCount++;
   11e78:	80 91 75 25 	lds	r24, 0x2575
   11e7c:	90 91 76 25 	lds	r25, 0x2576
   11e80:	01 96       	adiw	r24, 0x01	; 1
   11e82:	80 93 75 25 	sts	0x2575, r24
   11e86:	90 93 76 25 	sts	0x2576, r25
   if( gt_schedObject.s_loadUpdateCount == ARB_LOAD_UPDATE_RATE)
   11e8a:	84 5f       	subi	r24, 0xF4	; 244
   11e8c:	91 40       	sbci	r25, 0x01	; 1
   11e8e:	09 f0       	breq	.+2      	; 0x11e92 <arb_roundRobinScheduler+0x10a>
   11e90:	3f c1       	rjmp	.+638    	; 0x12110 <arb_roundRobinScheduler+0x388>
   {

      i_load = (gt_schedObject.i_activeCount*(uint32_t)ARB_LOAD_EST_ONE) /
   11e92:	6f e0       	ldi	r22, 0x0F	; 15
   11e94:	22 0f       	add	r18, r18
   11e96:	33 1f       	adc	r19, r19
   11e98:	44 1f       	adc	r20, r20
   11e9a:	55 1f       	adc	r21, r21
   11e9c:	6a 95       	dec	r22
   11e9e:	d1 f7       	brne	.-12     	; 0x11e94 <arb_roundRobinScheduler+0x10c>
   11ea0:	ca 01       	movw	r24, r20
   11ea2:	b9 01       	movw	r22, r18
   11ea4:	24 ef       	ldi	r18, 0xF4	; 244
   11ea6:	31 e0       	ldi	r19, 0x01	; 1
   11ea8:	40 e0       	ldi	r20, 0x00	; 0
   11eaa:	50 e0       	ldi	r21, 0x00	; 0
   11eac:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
   11eb0:	72 2e       	mov	r7, r18
   11eb2:	63 2e       	mov	r6, r19
   11eb4:	54 2e       	mov	r5, r20
   11eb6:	45 2e       	mov	r4, r21
      ARB_LOAD_UPDATE_RATE;

      gt_schedObject.i_activeCount = 0;
   11eb8:	10 92 7f 25 	sts	0x257F, r1
   11ebc:	10 92 80 25 	sts	0x2580, r1
   11ec0:	10 92 81 25 	sts	0x2581, r1
   11ec4:	10 92 82 25 	sts	0x2582, r1
      gt_schedObject.s_loadUpdateCount = 0;
   11ec8:	10 92 75 25 	sts	0x2575, r1
   11ecc:	10 92 76 25 	sts	0x2576, r1
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   11ed0:	60 91 77 25 	lds	r22, 0x2577
   11ed4:	70 91 78 25 	lds	r23, 0x2578
   11ed8:	80 91 79 25 	lds	r24, 0x2579
   11edc:	90 91 7a 25 	lds	r25, 0x257A
   11ee0:	25 e5       	ldi	r18, 0x55	; 85
   11ee2:	35 e7       	ldi	r19, 0x75	; 117
   11ee4:	40 e0       	ldi	r20, 0x00	; 0
   11ee6:	50 e0       	ldi	r21, 0x00	; 0
   11ee8:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   11eec:	8b 01       	movw	r16, r22
   11eee:	9c 01       	movw	r18, r24
   11ef0:	40 e0       	ldi	r20, 0x00	; 0
   11ef2:	50 e0       	ldi	r21, 0x00	; 0
   11ef4:	60 e0       	ldi	r22, 0x00	; 0
   11ef6:	70 e0       	ldi	r23, 0x00	; 0
   11ef8:	a0 2e       	mov	r10, r16
   11efa:	90 e4       	ldi	r25, 0x40	; 64
   11efc:	f9 2e       	mov	r15, r25
   11efe:	f1 0e       	add	r15, r17
   11f00:	91 e0       	ldi	r25, 0x01	; 1
   11f02:	f1 16       	cp	r15, r17
   11f04:	08 f0       	brcs	.+2      	; 0x11f08 <arb_roundRobinScheduler+0x180>
   11f06:	90 e0       	ldi	r25, 0x00	; 0
   11f08:	e9 2e       	mov	r14, r25
   11f0a:	e2 0e       	add	r14, r18
   11f0c:	91 e0       	ldi	r25, 0x01	; 1
   11f0e:	e2 16       	cp	r14, r18
   11f10:	08 f0       	brcs	.+2      	; 0x11f14 <arb_roundRobinScheduler+0x18c>
   11f12:	90 e0       	ldi	r25, 0x00	; 0
   11f14:	d9 2e       	mov	r13, r25
   11f16:	d3 0e       	add	r13, r19
   11f18:	91 e0       	ldi	r25, 0x01	; 1
   11f1a:	d3 16       	cp	r13, r19
   11f1c:	08 f0       	brcs	.+2      	; 0x11f20 <arb_roundRobinScheduler+0x198>
   11f1e:	90 e0       	ldi	r25, 0x00	; 0
   11f20:	99 2e       	mov	r9, r25
   11f22:	cc 24       	eor	r12, r12
   11f24:	c3 94       	inc	r12
   11f26:	44 23       	and	r20, r20
   11f28:	09 f4       	brne	.+2      	; 0x11f2c <arb_roundRobinScheduler+0x1a4>
   11f2a:	cc 24       	eor	r12, r12
   11f2c:	bb 24       	eor	r11, r11
   11f2e:	b3 94       	inc	r11
   11f30:	55 23       	and	r21, r21
   11f32:	09 f4       	brne	.+2      	; 0x11f36 <arb_roundRobinScheduler+0x1ae>
   11f34:	bb 24       	eor	r11, r11
   11f36:	88 24       	eor	r8, r8
   11f38:	83 94       	inc	r8
   11f3a:	66 23       	and	r22, r22
   11f3c:	09 f4       	brne	.+2      	; 0x11f40 <arb_roundRobinScheduler+0x1b8>
   11f3e:	88 24       	eor	r8, r8
   11f40:	67 2d       	mov	r22, r7
   11f42:	76 2d       	mov	r23, r6
   11f44:	85 2d       	mov	r24, r5
   11f46:	94 2d       	mov	r25, r4
   11f48:	2b ea       	ldi	r18, 0xAB	; 171
   11f4a:	3a e0       	ldi	r19, 0x0A	; 10
   11f4c:	40 e0       	ldi	r20, 0x00	; 0
   11f4e:	50 e0       	ldi	r21, 0x00	; 0
   11f50:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   11f54:	9b 01       	movw	r18, r22
   11f56:	ac 01       	movw	r20, r24
   11f58:	0a 2d       	mov	r16, r10
   11f5a:	06 0f       	add	r16, r22
   11f5c:	f1 e0       	ldi	r31, 0x01	; 1
   11f5e:	0a 15       	cp	r16, r10
   11f60:	08 f0       	brcs	.+2      	; 0x11f64 <arb_roundRobinScheduler+0x1dc>
   11f62:	f0 e0       	ldi	r31, 0x00	; 0
   11f64:	ef 2d       	mov	r30, r15
   11f66:	e3 0f       	add	r30, r19
   11f68:	a1 e0       	ldi	r26, 0x01	; 1
   11f6a:	ef 15       	cp	r30, r15
   11f6c:	08 f0       	brcs	.+2      	; 0x11f70 <arb_roundRobinScheduler+0x1e8>
   11f6e:	a0 e0       	ldi	r26, 0x00	; 0
   11f70:	1f 2f       	mov	r17, r31
   11f72:	1e 0f       	add	r17, r30
   11f74:	f1 e0       	ldi	r31, 0x01	; 1
   11f76:	1e 17       	cp	r17, r30
   11f78:	08 f0       	brcs	.+2      	; 0x11f7c <arb_roundRobinScheduler+0x1f4>
   11f7a:	f0 e0       	ldi	r31, 0x00	; 0
   11f7c:	af 2b       	or	r26, r31
   11f7e:	ee 2d       	mov	r30, r14
   11f80:	e4 0f       	add	r30, r20
   11f82:	b1 e0       	ldi	r27, 0x01	; 1
   11f84:	ee 15       	cp	r30, r14
   11f86:	08 f0       	brcs	.+2      	; 0x11f8a <arb_roundRobinScheduler+0x202>
   11f88:	b0 e0       	ldi	r27, 0x00	; 0
   11f8a:	ae 0f       	add	r26, r30
   11f8c:	f1 e0       	ldi	r31, 0x01	; 1
   11f8e:	ae 17       	cp	r26, r30
   11f90:	08 f0       	brcs	.+2      	; 0x11f94 <arb_roundRobinScheduler+0x20c>
   11f92:	f0 e0       	ldi	r31, 0x00	; 0
   11f94:	bf 2b       	or	r27, r31
   11f96:	6d 2d       	mov	r22, r13
   11f98:	65 0f       	add	r22, r21
   11f9a:	91 e0       	ldi	r25, 0x01	; 1
   11f9c:	6d 15       	cp	r22, r13
   11f9e:	08 f0       	brcs	.+2      	; 0x11fa2 <arb_roundRobinScheduler+0x21a>
   11fa0:	90 e0       	ldi	r25, 0x00	; 0
   11fa2:	5b 2f       	mov	r21, r27
   11fa4:	56 0f       	add	r21, r22
   11fa6:	81 e0       	ldi	r24, 0x01	; 1
   11fa8:	56 17       	cp	r21, r22
   11faa:	08 f0       	brcs	.+2      	; 0x11fae <arb_roundRobinScheduler+0x226>
   11fac:	80 e0       	ldi	r24, 0x00	; 0
   11fae:	69 2f       	mov	r22, r25
   11fb0:	68 2b       	or	r22, r24
   11fb2:	69 0d       	add	r22, r9
   11fb4:	71 e0       	ldi	r23, 0x01	; 1
   11fb6:	69 15       	cp	r22, r9
   11fb8:	08 f0       	brcs	.+2      	; 0x11fbc <arb_roundRobinScheduler+0x234>
   11fba:	70 e0       	ldi	r23, 0x00	; 0
   11fbc:	7c 0d       	add	r23, r12
   11fbe:	81 e0       	ldi	r24, 0x01	; 1
   11fc0:	7c 15       	cp	r23, r12
   11fc2:	08 f0       	brcs	.+2      	; 0x11fc6 <arb_roundRobinScheduler+0x23e>
   11fc4:	80 e0       	ldi	r24, 0x00	; 0
   11fc6:	8b 0d       	add	r24, r11
   11fc8:	91 e0       	ldi	r25, 0x01	; 1
   11fca:	8b 15       	cp	r24, r11
   11fcc:	08 f0       	brcs	.+2      	; 0x11fd0 <arb_roundRobinScheduler+0x248>
   11fce:	90 e0       	ldi	r25, 0x00	; 0
   11fd0:	98 01       	movw	r18, r16
   11fd2:	4a 2f       	mov	r20, r26
   11fd4:	98 0d       	add	r25, r8
   11fd6:	0f e0       	ldi	r16, 0x0F	; 15
   11fd8:	0e 94 5f 0c 	call	0x18be	; 0x18be <__lshrdi3>
   11fdc:	c9 01       	movw	r24, r18
   11fde:	ba 01       	movw	r22, r20
   11fe0:	20 93 77 25 	sts	0x2577, r18
   11fe4:	90 93 78 25 	sts	0x2578, r25
   11fe8:	40 93 79 25 	sts	0x2579, r20
   11fec:	70 93 7a 25 	sts	0x257A, r23
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   11ff0:	60 91 7b 25 	lds	r22, 0x257B
   11ff4:	70 91 7c 25 	lds	r23, 0x257C
   11ff8:	80 91 7d 25 	lds	r24, 0x257D
   11ffc:	90 91 7e 25 	lds	r25, 0x257E
   12000:	2d ed       	ldi	r18, 0xDD	; 221
   12002:	3d e7       	ldi	r19, 0x7D	; 125
   12004:	40 e0       	ldi	r20, 0x00	; 0
   12006:	50 e0       	ldi	r21, 0x00	; 0
   12008:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   1200c:	8b 01       	movw	r16, r22
   1200e:	9c 01       	movw	r18, r24
   12010:	40 e0       	ldi	r20, 0x00	; 0
   12012:	50 e0       	ldi	r21, 0x00	; 0
   12014:	60 e0       	ldi	r22, 0x00	; 0
   12016:	70 e0       	ldi	r23, 0x00	; 0
   12018:	a0 2e       	mov	r10, r16
   1201a:	80 e4       	ldi	r24, 0x40	; 64
   1201c:	f8 2e       	mov	r15, r24
   1201e:	f1 0e       	add	r15, r17
   12020:	91 e0       	ldi	r25, 0x01	; 1
   12022:	f1 16       	cp	r15, r17
   12024:	08 f0       	brcs	.+2      	; 0x12028 <arb_roundRobinScheduler+0x2a0>
   12026:	90 e0       	ldi	r25, 0x00	; 0
   12028:	e9 2e       	mov	r14, r25
   1202a:	e2 0e       	add	r14, r18
   1202c:	91 e0       	ldi	r25, 0x01	; 1
   1202e:	e2 16       	cp	r14, r18
   12030:	08 f0       	brcs	.+2      	; 0x12034 <arb_roundRobinScheduler+0x2ac>
   12032:	90 e0       	ldi	r25, 0x00	; 0
   12034:	d9 2e       	mov	r13, r25
   12036:	d3 0e       	add	r13, r19
   12038:	91 e0       	ldi	r25, 0x01	; 1
   1203a:	d3 16       	cp	r13, r19
   1203c:	08 f0       	brcs	.+2      	; 0x12040 <arb_roundRobinScheduler+0x2b8>
   1203e:	90 e0       	ldi	r25, 0x00	; 0
   12040:	99 2e       	mov	r9, r25
   12042:	cc 24       	eor	r12, r12
   12044:	c3 94       	inc	r12
   12046:	44 23       	and	r20, r20
   12048:	09 f4       	brne	.+2      	; 0x1204c <arb_roundRobinScheduler+0x2c4>
   1204a:	cc 24       	eor	r12, r12
   1204c:	bb 24       	eor	r11, r11
   1204e:	b3 94       	inc	r11
   12050:	55 23       	and	r21, r21
   12052:	09 f4       	brne	.+2      	; 0x12056 <arb_roundRobinScheduler+0x2ce>
   12054:	bb 24       	eor	r11, r11
   12056:	88 24       	eor	r8, r8
   12058:	83 94       	inc	r8
   1205a:	66 23       	and	r22, r22
   1205c:	09 f4       	brne	.+2      	; 0x12060 <arb_roundRobinScheduler+0x2d8>
   1205e:	88 24       	eor	r8, r8
   12060:	67 2d       	mov	r22, r7
   12062:	76 2d       	mov	r23, r6
   12064:	85 2d       	mov	r24, r5
   12066:	94 2d       	mov	r25, r4
   12068:	23 e2       	ldi	r18, 0x23	; 35
   1206a:	32 e0       	ldi	r19, 0x02	; 2
   1206c:	40 e0       	ldi	r20, 0x00	; 0
   1206e:	50 e0       	ldi	r21, 0x00	; 0
   12070:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   12074:	9b 01       	movw	r18, r22
   12076:	ac 01       	movw	r20, r24
   12078:	0a 2d       	mov	r16, r10
   1207a:	06 0f       	add	r16, r22
   1207c:	f1 e0       	ldi	r31, 0x01	; 1
   1207e:	0a 15       	cp	r16, r10
   12080:	08 f0       	brcs	.+2      	; 0x12084 <arb_roundRobinScheduler+0x2fc>
   12082:	f0 e0       	ldi	r31, 0x00	; 0
   12084:	ef 2d       	mov	r30, r15
   12086:	e3 0f       	add	r30, r19
   12088:	a1 e0       	ldi	r26, 0x01	; 1
   1208a:	ef 15       	cp	r30, r15
   1208c:	08 f0       	brcs	.+2      	; 0x12090 <arb_roundRobinScheduler+0x308>
   1208e:	a0 e0       	ldi	r26, 0x00	; 0
   12090:	1f 2f       	mov	r17, r31
   12092:	1e 0f       	add	r17, r30
   12094:	f1 e0       	ldi	r31, 0x01	; 1
   12096:	1e 17       	cp	r17, r30
   12098:	08 f0       	brcs	.+2      	; 0x1209c <arb_roundRobinScheduler+0x314>
   1209a:	f0 e0       	ldi	r31, 0x00	; 0
   1209c:	af 2b       	or	r26, r31
   1209e:	ee 2d       	mov	r30, r14
   120a0:	e4 0f       	add	r30, r20
   120a2:	b1 e0       	ldi	r27, 0x01	; 1
   120a4:	ee 15       	cp	r30, r14
   120a6:	08 f0       	brcs	.+2      	; 0x120aa <arb_roundRobinScheduler+0x322>
   120a8:	b0 e0       	ldi	r27, 0x00	; 0
   120aa:	ae 0f       	add	r26, r30
   120ac:	f1 e0       	ldi	r31, 0x01	; 1
   120ae:	ae 17       	cp	r26, r30
   120b0:	08 f0       	brcs	.+2      	; 0x120b4 <arb_roundRobinScheduler+0x32c>
   120b2:	f0 e0       	ldi	r31, 0x00	; 0
   120b4:	bf 2b       	or	r27, r31
   120b6:	6d 2d       	mov	r22, r13
   120b8:	65 0f       	add	r22, r21
   120ba:	91 e0       	ldi	r25, 0x01	; 1
   120bc:	6d 15       	cp	r22, r13
   120be:	08 f0       	brcs	.+2      	; 0x120c2 <arb_roundRobinScheduler+0x33a>
   120c0:	90 e0       	ldi	r25, 0x00	; 0
   120c2:	5b 2f       	mov	r21, r27
   120c4:	56 0f       	add	r21, r22
   120c6:	81 e0       	ldi	r24, 0x01	; 1
   120c8:	56 17       	cp	r21, r22
   120ca:	08 f0       	brcs	.+2      	; 0x120ce <arb_roundRobinScheduler+0x346>
   120cc:	80 e0       	ldi	r24, 0x00	; 0
   120ce:	69 2f       	mov	r22, r25
   120d0:	68 2b       	or	r22, r24
   120d2:	69 0d       	add	r22, r9
   120d4:	71 e0       	ldi	r23, 0x01	; 1
   120d6:	69 15       	cp	r22, r9
   120d8:	08 f0       	brcs	.+2      	; 0x120dc <arb_roundRobinScheduler+0x354>
   120da:	70 e0       	ldi	r23, 0x00	; 0
   120dc:	7c 0d       	add	r23, r12
   120de:	81 e0       	ldi	r24, 0x01	; 1
   120e0:	7c 15       	cp	r23, r12
   120e2:	08 f0       	brcs	.+2      	; 0x120e6 <arb_roundRobinScheduler+0x35e>
   120e4:	80 e0       	ldi	r24, 0x00	; 0
   120e6:	8b 0d       	add	r24, r11
   120e8:	91 e0       	ldi	r25, 0x01	; 1
   120ea:	8b 15       	cp	r24, r11
   120ec:	08 f0       	brcs	.+2      	; 0x120f0 <arb_roundRobinScheduler+0x368>
   120ee:	90 e0       	ldi	r25, 0x00	; 0
   120f0:	98 01       	movw	r18, r16
   120f2:	4a 2f       	mov	r20, r26
   120f4:	98 0d       	add	r25, r8
   120f6:	0f e0       	ldi	r16, 0x0F	; 15
   120f8:	0e 94 5f 0c 	call	0x18be	; 0x18be <__lshrdi3>
   120fc:	c9 01       	movw	r24, r18
   120fe:	ba 01       	movw	r22, r20
   12100:	20 93 7b 25 	sts	0x257B, r18
   12104:	90 93 7c 25 	sts	0x257C, r25
   12108:	40 93 7d 25 	sts	0x257D, r20
   1210c:	70 93 7e 25 	sts	0x257E, r23
       *---------------------------------------------------------------------*/
      arb_updateLoadingEst();

   }/*End if( gt_schedObject.b_enableScheduler == true)*/

}/*End arb_roundRobinScheduler*/
   12110:	24 96       	adiw	r28, 0x04	; 4
   12112:	cd bf       	out	0x3d, r28	; 61
   12114:	de bf       	out	0x3e, r29	; 62
   12116:	cf 91       	pop	r28
   12118:	df 91       	pop	r29
   1211a:	1f 91       	pop	r17
   1211c:	0f 91       	pop	r16
   1211e:	ff 90       	pop	r15
   12120:	ef 90       	pop	r14
   12122:	df 90       	pop	r13
   12124:	cf 90       	pop	r12
   12126:	bf 90       	pop	r11
   12128:	af 90       	pop	r10
   1212a:	9f 90       	pop	r9
   1212c:	8f 90       	pop	r8
   1212e:	7f 90       	pop	r7
   12130:	6f 90       	pop	r6
   12132:	5f 90       	pop	r5
   12134:	4f 90       	pop	r4
   12136:	08 95       	ret

00012138 <arb_priorityScheduler>:

/*---------------------------------------------------------------------------*
 * Priority based scheduler
 *---------------------------------------------------------------------------*/
static void arb_priorityScheduler( void)
{
   12138:	4f 92       	push	r4
   1213a:	5f 92       	push	r5
   1213c:	6f 92       	push	r6
   1213e:	7f 92       	push	r7
   12140:	8f 92       	push	r8
   12142:	9f 92       	push	r9
   12144:	af 92       	push	r10
   12146:	bf 92       	push	r11
   12148:	cf 92       	push	r12
   1214a:	df 92       	push	r13
   1214c:	ef 92       	push	r14
   1214e:	ff 92       	push	r15
   12150:	0f 93       	push	r16
   12152:	1f 93       	push	r17
   12154:	df 93       	push	r29
   12156:	cf 93       	push	r28
   12158:	00 d0       	rcall	.+0      	; 0x1215a <arb_priorityScheduler+0x22>
   1215a:	00 d0       	rcall	.+0      	; 0x1215c <arb_priorityScheduler+0x24>
   1215c:	cd b7       	in	r28, 0x3d	; 61
   1215e:	de b7       	in	r29, 0x3e	; 62
   t_LINKHNDL t_highest;
   uint16_t s_highest;
   uint16_t s_count;
   t_tcb *pt_temp;

   if( gt_schedObject.b_enableScheduler == true)
   12160:	80 91 74 25 	lds	r24, 0x2574
   12164:	88 23       	and	r24, r24
   12166:	09 f4       	brne	.+2      	; 0x1216a <arb_priorityScheduler+0x32>
   12168:	d7 c1       	rjmp	.+942    	; 0x12518 <arb_priorityScheduler+0x3e0>
   {

      /*---------------------------------------------------------------------*
       * Find the thread with the highest priority that isn't sleeping.
       *---------------------------------------------------------------------*/
      t_highest = UTL_GET_HEAD_OF_CONT( gt_activeThreads);
   1216a:	e0 91 29 22 	lds	r30, 0x2229
   1216e:	f0 91 2a 22 	lds	r31, 0x222A
   12172:	80 85       	ldd	r24, Z+8	; 0x08
   12174:	91 85       	ldd	r25, Z+9	; 0x09
   12176:	8b 83       	std	Y+3, r24	; 0x03
   12178:	9c 83       	std	Y+4, r25	; 0x04
      pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   1217a:	eb 81       	ldd	r30, Y+3	; 0x03
   1217c:	fc 81       	ldd	r31, Y+4	; 0x04
      s_highest = pt_temp->t_priority;
   1217e:	01 90       	ld	r0, Z+
   12180:	f0 81       	ld	r31, Z
   12182:	e0 2d       	mov	r30, r0
   12184:	82 81       	ldd	r24, Z+2	; 0x02
   12186:	48 2f       	mov	r20, r24
   12188:	50 e0       	ldi	r21, 0x00	; 0

      UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   1218a:	e0 91 29 22 	lds	r30, 0x2229
   1218e:	f0 91 2a 22 	lds	r31, 0x222A
   12192:	62 81       	ldd	r22, Z+2	; 0x02
   12194:	73 81       	ldd	r23, Z+3	; 0x03
   12196:	e0 91 29 22 	lds	r30, 0x2229
   1219a:	f0 91 2a 22 	lds	r31, 0x222A
   1219e:	80 85       	ldd	r24, Z+8	; 0x08
   121a0:	91 85       	ldd	r25, Z+9	; 0x09
   121a2:	89 83       	std	Y+1, r24	; 0x01
   121a4:	9a 83       	std	Y+2, r25	; 0x02
   121a6:	1d c0       	rjmp	.+58     	; 0x121e2 <arb_priorityScheduler+0xaa>
      {
         pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   121a8:	e9 81       	ldd	r30, Y+1	; 0x01
   121aa:	fa 81       	ldd	r31, Y+2	; 0x02
   121ac:	01 90       	ld	r0, Z+
   121ae:	f0 81       	ld	r31, Z
   121b0:	e0 2d       	mov	r30, r0
         if( (pt_temp->t_priority < s_highest) && (pt_temp->t_status !=
   121b2:	82 81       	ldd	r24, Z+2	; 0x02
   121b4:	28 2f       	mov	r18, r24
   121b6:	30 e0       	ldi	r19, 0x00	; 0
   121b8:	24 17       	cp	r18, r20
   121ba:	35 07       	cpc	r19, r21
   121bc:	40 f4       	brcc	.+16     	; 0x121ce <arb_priorityScheduler+0x96>
   121be:	81 81       	ldd	r24, Z+1	; 0x01
   121c0:	83 30       	cpi	r24, 0x03	; 3
   121c2:	29 f0       	breq	.+10     	; 0x121ce <arb_priorityScheduler+0x96>
         SLEEPING))
         {
            s_highest = pt_temp->t_priority;
            t_highest = t_curr;
   121c4:	89 81       	ldd	r24, Y+1	; 0x01
   121c6:	9a 81       	ldd	r25, Y+2	; 0x02
   121c8:	8b 83       	std	Y+3, r24	; 0x03
   121ca:	9c 83       	std	Y+4, r25	; 0x04
   121cc:	01 c0       	rjmp	.+2      	; 0x121d0 <arb_priorityScheduler+0x98>
   121ce:	9a 01       	movw	r18, r20
       *---------------------------------------------------------------------*/
      t_highest = UTL_GET_HEAD_OF_CONT( gt_activeThreads);
      pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
      s_highest = pt_temp->t_priority;

      UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   121d0:	61 50       	subi	r22, 0x01	; 1
   121d2:	70 40       	sbci	r23, 0x00	; 0
   121d4:	e9 81       	ldd	r30, Y+1	; 0x01
   121d6:	fa 81       	ldd	r31, Y+2	; 0x02
   121d8:	80 85       	ldd	r24, Z+8	; 0x08
   121da:	91 85       	ldd	r25, Z+9	; 0x09
   121dc:	89 83       	std	Y+1, r24	; 0x01
   121de:	9a 83       	std	Y+2, r25	; 0x02
   121e0:	a9 01       	movw	r20, r18
   121e2:	61 15       	cp	r22, r1
   121e4:	71 05       	cpc	r23, r1
   121e6:	01 f7       	brne	.-64     	; 0x121a8 <arb_priorityScheduler+0x70>
      }

      /*---------------------------------------------------------------------*
       * Set the next thread to run to the one with the highest priority
       *---------------------------------------------------------------------*/
      UTL_SET_CURR_OF_CONT( gt_activeThreads, t_highest);
   121e8:	e0 91 29 22 	lds	r30, 0x2229
   121ec:	f0 91 2a 22 	lds	r31, 0x222A
   121f0:	8b 81       	ldd	r24, Y+3	; 0x03
   121f2:	9c 81       	ldd	r25, Y+4	; 0x04
   121f4:	86 83       	std	Z+6, r24	; 0x06
   121f6:	97 83       	std	Z+7, r25	; 0x07

      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   121f8:	eb 81       	ldd	r30, Y+3	; 0x03
   121fa:	fc 81       	ldd	r31, Y+4	; 0x04
   121fc:	01 90       	ld	r0, Z+
   121fe:	f0 81       	ld	r31, Z
   12200:	e0 2d       	mov	r30, r0

      gpt_activeThread = pt_temp;
   12202:	e0 93 70 25 	sts	0x2570, r30
   12206:	f0 93 71 25 	sts	0x2571, r31

      /*---------------------------------------------------------------------*
       * Change the status of this new thread to RUNNING
       *---------------------------------------------------------------------*/
      pt_temp->t_status = RUNNING;
   1220a:	81 e0       	ldi	r24, 0x01	; 1
   1220c:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   1220e:	e0 91 29 22 	lds	r30, 0x2229
   12212:	f0 91 2a 22 	lds	r31, 0x222A
   12216:	62 81       	ldd	r22, Z+2	; 0x02
   12218:	73 81       	ldd	r23, Z+3	; 0x03
   1221a:	e0 91 29 22 	lds	r30, 0x2229
   1221e:	f0 91 2a 22 	lds	r31, 0x222A
   12222:	80 85       	ldd	r24, Z+8	; 0x08
   12224:	91 85       	ldd	r25, Z+9	; 0x09
   12226:	8d 83       	std	Y+5, r24	; 0x05
   12228:	9e 83       	std	Y+6, r25	; 0x06
   1222a:	20 91 7f 25 	lds	r18, 0x257F
   1222e:	30 91 80 25 	lds	r19, 0x2580
   12232:	40 91 81 25 	lds	r20, 0x2581
   12236:	50 91 82 25 	lds	r21, 0x2582
   1223a:	17 c0       	rjmp	.+46     	; 0x1226a <arb_priorityScheduler+0x132>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   1223c:	ed 81       	ldd	r30, Y+5	; 0x05
   1223e:	fe 81       	ldd	r31, Y+6	; 0x06
   12240:	01 90       	ld	r0, Z+
   12242:	f0 81       	ld	r31, Z
   12244:	e0 2d       	mov	r30, r0
      if( ((pt_temp->t_status == READY) ||
   12246:	81 81       	ldd	r24, Z+1	; 0x01
   12248:	82 30       	cpi	r24, 0x02	; 2
   1224a:	38 f4       	brcc	.+14     	; 0x1225a <arb_priorityScheduler+0x122>
   1224c:	82 81       	ldd	r24, Z+2	; 0x02
   1224e:	8f 3f       	cpi	r24, 0xFF	; 255
   12250:	21 f0       	breq	.+8      	; 0x1225a <arb_priorityScheduler+0x122>
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   12252:	2f 5f       	subi	r18, 0xFF	; 255
   12254:	3f 4f       	sbci	r19, 0xFF	; 255
   12256:	4f 4f       	sbci	r20, 0xFF	; 255
   12258:	5f 4f       	sbci	r21, 0xFF	; 255

   /*------------------------------------------------------------------------*
    * Count all the active and ready threads for loading analysis-except for
    * the idle thread.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gt_activeThreads, s_count)
   1225a:	61 50       	subi	r22, 0x01	; 1
   1225c:	70 40       	sbci	r23, 0x00	; 0
   1225e:	ed 81       	ldd	r30, Y+5	; 0x05
   12260:	fe 81       	ldd	r31, Y+6	; 0x06
   12262:	80 85       	ldd	r24, Z+8	; 0x08
   12264:	91 85       	ldd	r25, Z+9	; 0x09
   12266:	8d 83       	std	Y+5, r24	; 0x05
   12268:	9e 83       	std	Y+6, r25	; 0x06
   1226a:	61 15       	cp	r22, r1
   1226c:	71 05       	cpc	r23, r1
   1226e:	31 f7       	brne	.-52     	; 0x1223c <arb_priorityScheduler+0x104>
   12270:	20 93 7f 25 	sts	0x257F, r18
   12274:	30 93 80 25 	sts	0x2580, r19
   12278:	40 93 81 25 	sts	0x2581, r20
   1227c:	50 93 82 25 	sts	0x2582, r21
           (pt_temp->t_status == RUNNING)) &&
           (pt_temp->t_priority != ARB_IDLE_PRIORITY))
         gt_schedObject.i_activeCount++;
   }

   gt_schedObject.s_loadUpdateCount++;
   12280:	80 91 75 25 	lds	r24, 0x2575
   12284:	90 91 76 25 	lds	r25, 0x2576
   12288:	01 96       	adiw	r24, 0x01	; 1
   1228a:	80 93 75 25 	sts	0x2575, r24
   1228e:	90 93 76 25 	sts	0x2576, r25
   if( gt_schedObject.s_loadUpdateCount == ARB_LOAD_UPDATE_RATE)
   12292:	84 5f       	subi	r24, 0xF4	; 244
   12294:	91 40       	sbci	r25, 0x01	; 1
   12296:	09 f0       	breq	.+2      	; 0x1229a <arb_priorityScheduler+0x162>
   12298:	3f c1       	rjmp	.+638    	; 0x12518 <arb_priorityScheduler+0x3e0>
   {

      i_load = (gt_schedObject.i_activeCount*(uint32_t)ARB_LOAD_EST_ONE) /
   1229a:	ff e0       	ldi	r31, 0x0F	; 15
   1229c:	22 0f       	add	r18, r18
   1229e:	33 1f       	adc	r19, r19
   122a0:	44 1f       	adc	r20, r20
   122a2:	55 1f       	adc	r21, r21
   122a4:	fa 95       	dec	r31
   122a6:	d1 f7       	brne	.-12     	; 0x1229c <arb_priorityScheduler+0x164>
   122a8:	ca 01       	movw	r24, r20
   122aa:	b9 01       	movw	r22, r18
   122ac:	24 ef       	ldi	r18, 0xF4	; 244
   122ae:	31 e0       	ldi	r19, 0x01	; 1
   122b0:	40 e0       	ldi	r20, 0x00	; 0
   122b2:	50 e0       	ldi	r21, 0x00	; 0
   122b4:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
   122b8:	72 2e       	mov	r7, r18
   122ba:	63 2e       	mov	r6, r19
   122bc:	54 2e       	mov	r5, r20
   122be:	45 2e       	mov	r4, r21
      ARB_LOAD_UPDATE_RATE;

      gt_schedObject.i_activeCount = 0;
   122c0:	10 92 7f 25 	sts	0x257F, r1
   122c4:	10 92 80 25 	sts	0x2580, r1
   122c8:	10 92 81 25 	sts	0x2581, r1
   122cc:	10 92 82 25 	sts	0x2582, r1
      gt_schedObject.s_loadUpdateCount = 0;
   122d0:	10 92 75 25 	sts	0x2575, r1
   122d4:	10 92 76 25 	sts	0x2576, r1
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[0]*
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_ONE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[0] = (uint32_t)(((uint64_t)i_temp1 +
   122d8:	60 91 77 25 	lds	r22, 0x2577
   122dc:	70 91 78 25 	lds	r23, 0x2578
   122e0:	80 91 79 25 	lds	r24, 0x2579
   122e4:	90 91 7a 25 	lds	r25, 0x257A
   122e8:	25 e5       	ldi	r18, 0x55	; 85
   122ea:	35 e7       	ldi	r19, 0x75	; 117
   122ec:	40 e0       	ldi	r20, 0x00	; 0
   122ee:	50 e0       	ldi	r21, 0x00	; 0
   122f0:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   122f4:	8b 01       	movw	r16, r22
   122f6:	9c 01       	movw	r18, r24
   122f8:	40 e0       	ldi	r20, 0x00	; 0
   122fa:	50 e0       	ldi	r21, 0x00	; 0
   122fc:	60 e0       	ldi	r22, 0x00	; 0
   122fe:	70 e0       	ldi	r23, 0x00	; 0
   12300:	a0 2e       	mov	r10, r16
   12302:	e0 e4       	ldi	r30, 0x40	; 64
   12304:	fe 2e       	mov	r15, r30
   12306:	f1 0e       	add	r15, r17
   12308:	91 e0       	ldi	r25, 0x01	; 1
   1230a:	f1 16       	cp	r15, r17
   1230c:	08 f0       	brcs	.+2      	; 0x12310 <arb_priorityScheduler+0x1d8>
   1230e:	90 e0       	ldi	r25, 0x00	; 0
   12310:	e9 2e       	mov	r14, r25
   12312:	e2 0e       	add	r14, r18
   12314:	91 e0       	ldi	r25, 0x01	; 1
   12316:	e2 16       	cp	r14, r18
   12318:	08 f0       	brcs	.+2      	; 0x1231c <arb_priorityScheduler+0x1e4>
   1231a:	90 e0       	ldi	r25, 0x00	; 0
   1231c:	d9 2e       	mov	r13, r25
   1231e:	d3 0e       	add	r13, r19
   12320:	91 e0       	ldi	r25, 0x01	; 1
   12322:	d3 16       	cp	r13, r19
   12324:	08 f0       	brcs	.+2      	; 0x12328 <arb_priorityScheduler+0x1f0>
   12326:	90 e0       	ldi	r25, 0x00	; 0
   12328:	99 2e       	mov	r9, r25
   1232a:	cc 24       	eor	r12, r12
   1232c:	c3 94       	inc	r12
   1232e:	44 23       	and	r20, r20
   12330:	09 f4       	brne	.+2      	; 0x12334 <arb_priorityScheduler+0x1fc>
   12332:	cc 24       	eor	r12, r12
   12334:	bb 24       	eor	r11, r11
   12336:	b3 94       	inc	r11
   12338:	55 23       	and	r21, r21
   1233a:	09 f4       	brne	.+2      	; 0x1233e <arb_priorityScheduler+0x206>
   1233c:	bb 24       	eor	r11, r11
   1233e:	88 24       	eor	r8, r8
   12340:	83 94       	inc	r8
   12342:	66 23       	and	r22, r22
   12344:	09 f4       	brne	.+2      	; 0x12348 <arb_priorityScheduler+0x210>
   12346:	88 24       	eor	r8, r8
   12348:	67 2d       	mov	r22, r7
   1234a:	76 2d       	mov	r23, r6
   1234c:	85 2d       	mov	r24, r5
   1234e:	94 2d       	mov	r25, r4
   12350:	2b ea       	ldi	r18, 0xAB	; 171
   12352:	3a e0       	ldi	r19, 0x0A	; 10
   12354:	40 e0       	ldi	r20, 0x00	; 0
   12356:	50 e0       	ldi	r21, 0x00	; 0
   12358:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   1235c:	9b 01       	movw	r18, r22
   1235e:	ac 01       	movw	r20, r24
   12360:	0a 2d       	mov	r16, r10
   12362:	06 0f       	add	r16, r22
   12364:	f1 e0       	ldi	r31, 0x01	; 1
   12366:	0a 15       	cp	r16, r10
   12368:	08 f0       	brcs	.+2      	; 0x1236c <arb_priorityScheduler+0x234>
   1236a:	f0 e0       	ldi	r31, 0x00	; 0
   1236c:	ef 2d       	mov	r30, r15
   1236e:	e3 0f       	add	r30, r19
   12370:	a1 e0       	ldi	r26, 0x01	; 1
   12372:	ef 15       	cp	r30, r15
   12374:	08 f0       	brcs	.+2      	; 0x12378 <arb_priorityScheduler+0x240>
   12376:	a0 e0       	ldi	r26, 0x00	; 0
   12378:	1f 2f       	mov	r17, r31
   1237a:	1e 0f       	add	r17, r30
   1237c:	f1 e0       	ldi	r31, 0x01	; 1
   1237e:	1e 17       	cp	r17, r30
   12380:	08 f0       	brcs	.+2      	; 0x12384 <arb_priorityScheduler+0x24c>
   12382:	f0 e0       	ldi	r31, 0x00	; 0
   12384:	af 2b       	or	r26, r31
   12386:	ee 2d       	mov	r30, r14
   12388:	e4 0f       	add	r30, r20
   1238a:	b1 e0       	ldi	r27, 0x01	; 1
   1238c:	ee 15       	cp	r30, r14
   1238e:	08 f0       	brcs	.+2      	; 0x12392 <arb_priorityScheduler+0x25a>
   12390:	b0 e0       	ldi	r27, 0x00	; 0
   12392:	ae 0f       	add	r26, r30
   12394:	f1 e0       	ldi	r31, 0x01	; 1
   12396:	ae 17       	cp	r26, r30
   12398:	08 f0       	brcs	.+2      	; 0x1239c <arb_priorityScheduler+0x264>
   1239a:	f0 e0       	ldi	r31, 0x00	; 0
   1239c:	bf 2b       	or	r27, r31
   1239e:	6d 2d       	mov	r22, r13
   123a0:	65 0f       	add	r22, r21
   123a2:	91 e0       	ldi	r25, 0x01	; 1
   123a4:	6d 15       	cp	r22, r13
   123a6:	08 f0       	brcs	.+2      	; 0x123aa <arb_priorityScheduler+0x272>
   123a8:	90 e0       	ldi	r25, 0x00	; 0
   123aa:	5b 2f       	mov	r21, r27
   123ac:	56 0f       	add	r21, r22
   123ae:	81 e0       	ldi	r24, 0x01	; 1
   123b0:	56 17       	cp	r21, r22
   123b2:	08 f0       	brcs	.+2      	; 0x123b6 <arb_priorityScheduler+0x27e>
   123b4:	80 e0       	ldi	r24, 0x00	; 0
   123b6:	69 2f       	mov	r22, r25
   123b8:	68 2b       	or	r22, r24
   123ba:	69 0d       	add	r22, r9
   123bc:	71 e0       	ldi	r23, 0x01	; 1
   123be:	69 15       	cp	r22, r9
   123c0:	08 f0       	brcs	.+2      	; 0x123c4 <arb_priorityScheduler+0x28c>
   123c2:	70 e0       	ldi	r23, 0x00	; 0
   123c4:	7c 0d       	add	r23, r12
   123c6:	81 e0       	ldi	r24, 0x01	; 1
   123c8:	7c 15       	cp	r23, r12
   123ca:	08 f0       	brcs	.+2      	; 0x123ce <arb_priorityScheduler+0x296>
   123cc:	80 e0       	ldi	r24, 0x00	; 0
   123ce:	8b 0d       	add	r24, r11
   123d0:	91 e0       	ldi	r25, 0x01	; 1
   123d2:	8b 15       	cp	r24, r11
   123d4:	08 f0       	brcs	.+2      	; 0x123d8 <arb_priorityScheduler+0x2a0>
   123d6:	90 e0       	ldi	r25, 0x00	; 0
   123d8:	98 01       	movw	r18, r16
   123da:	4a 2f       	mov	r20, r26
   123dc:	98 0d       	add	r25, r8
   123de:	0f e0       	ldi	r16, 0x0F	; 15
   123e0:	0e 94 5f 0c 	call	0x18be	; 0x18be <__lshrdi3>
   123e4:	c9 01       	movw	r24, r18
   123e6:	ba 01       	movw	r22, r20
   123e8:	20 93 77 25 	sts	0x2577, r18
   123ec:	90 93 78 25 	sts	0x2578, r25
   123f0:	40 93 79 25 	sts	0x2579, r20
   123f4:	70 93 7a 25 	sts	0x257A, r23
      i_temp1 = (uint32_t)gt_schedObject.ai_loading[1]*
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA;
      i_temp2 = ((uint32_t)ARB_LOAD_EST_ONE -
      (uint32_t)ARB_LOAD_FIVE_MIN_ALPHA)*i_load;

      gt_schedObject.ai_loading[1] = (uint32_t)(((uint64_t)i_temp1 +
   123f8:	60 91 7b 25 	lds	r22, 0x257B
   123fc:	70 91 7c 25 	lds	r23, 0x257C
   12400:	80 91 7d 25 	lds	r24, 0x257D
   12404:	90 91 7e 25 	lds	r25, 0x257E
   12408:	2d ed       	ldi	r18, 0xDD	; 221
   1240a:	3d e7       	ldi	r19, 0x7D	; 125
   1240c:	40 e0       	ldi	r20, 0x00	; 0
   1240e:	50 e0       	ldi	r21, 0x00	; 0
   12410:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   12414:	8b 01       	movw	r16, r22
   12416:	9c 01       	movw	r18, r24
   12418:	40 e0       	ldi	r20, 0x00	; 0
   1241a:	50 e0       	ldi	r21, 0x00	; 0
   1241c:	60 e0       	ldi	r22, 0x00	; 0
   1241e:	70 e0       	ldi	r23, 0x00	; 0
   12420:	a0 2e       	mov	r10, r16
   12422:	70 e4       	ldi	r23, 0x40	; 64
   12424:	f7 2e       	mov	r15, r23
   12426:	f1 0e       	add	r15, r17
   12428:	91 e0       	ldi	r25, 0x01	; 1
   1242a:	f1 16       	cp	r15, r17
   1242c:	08 f0       	brcs	.+2      	; 0x12430 <arb_priorityScheduler+0x2f8>
   1242e:	90 e0       	ldi	r25, 0x00	; 0
   12430:	e9 2e       	mov	r14, r25
   12432:	e2 0e       	add	r14, r18
   12434:	91 e0       	ldi	r25, 0x01	; 1
   12436:	e2 16       	cp	r14, r18
   12438:	08 f0       	brcs	.+2      	; 0x1243c <arb_priorityScheduler+0x304>
   1243a:	90 e0       	ldi	r25, 0x00	; 0
   1243c:	d9 2e       	mov	r13, r25
   1243e:	d3 0e       	add	r13, r19
   12440:	91 e0       	ldi	r25, 0x01	; 1
   12442:	d3 16       	cp	r13, r19
   12444:	08 f0       	brcs	.+2      	; 0x12448 <arb_priorityScheduler+0x310>
   12446:	90 e0       	ldi	r25, 0x00	; 0
   12448:	99 2e       	mov	r9, r25
   1244a:	cc 24       	eor	r12, r12
   1244c:	c3 94       	inc	r12
   1244e:	44 23       	and	r20, r20
   12450:	09 f4       	brne	.+2      	; 0x12454 <arb_priorityScheduler+0x31c>
   12452:	cc 24       	eor	r12, r12
   12454:	bb 24       	eor	r11, r11
   12456:	b3 94       	inc	r11
   12458:	55 23       	and	r21, r21
   1245a:	09 f4       	brne	.+2      	; 0x1245e <arb_priorityScheduler+0x326>
   1245c:	bb 24       	eor	r11, r11
   1245e:	88 24       	eor	r8, r8
   12460:	83 94       	inc	r8
   12462:	66 23       	and	r22, r22
   12464:	09 f4       	brne	.+2      	; 0x12468 <arb_priorityScheduler+0x330>
   12466:	88 24       	eor	r8, r8
   12468:	67 2d       	mov	r22, r7
   1246a:	76 2d       	mov	r23, r6
   1246c:	85 2d       	mov	r24, r5
   1246e:	94 2d       	mov	r25, r4
   12470:	23 e2       	ldi	r18, 0x23	; 35
   12472:	32 e0       	ldi	r19, 0x02	; 2
   12474:	40 e0       	ldi	r20, 0x00	; 0
   12476:	50 e0       	ldi	r21, 0x00	; 0
   12478:	0e 94 57 b9 	call	0x172ae	; 0x172ae <__mulsi3>
   1247c:	9b 01       	movw	r18, r22
   1247e:	ac 01       	movw	r20, r24
   12480:	0a 2d       	mov	r16, r10
   12482:	06 0f       	add	r16, r22
   12484:	f1 e0       	ldi	r31, 0x01	; 1
   12486:	0a 15       	cp	r16, r10
   12488:	08 f0       	brcs	.+2      	; 0x1248c <arb_priorityScheduler+0x354>
   1248a:	f0 e0       	ldi	r31, 0x00	; 0
   1248c:	ef 2d       	mov	r30, r15
   1248e:	e3 0f       	add	r30, r19
   12490:	a1 e0       	ldi	r26, 0x01	; 1
   12492:	ef 15       	cp	r30, r15
   12494:	08 f0       	brcs	.+2      	; 0x12498 <arb_priorityScheduler+0x360>
   12496:	a0 e0       	ldi	r26, 0x00	; 0
   12498:	1f 2f       	mov	r17, r31
   1249a:	1e 0f       	add	r17, r30
   1249c:	f1 e0       	ldi	r31, 0x01	; 1
   1249e:	1e 17       	cp	r17, r30
   124a0:	08 f0       	brcs	.+2      	; 0x124a4 <arb_priorityScheduler+0x36c>
   124a2:	f0 e0       	ldi	r31, 0x00	; 0
   124a4:	af 2b       	or	r26, r31
   124a6:	ee 2d       	mov	r30, r14
   124a8:	e4 0f       	add	r30, r20
   124aa:	b1 e0       	ldi	r27, 0x01	; 1
   124ac:	ee 15       	cp	r30, r14
   124ae:	08 f0       	brcs	.+2      	; 0x124b2 <arb_priorityScheduler+0x37a>
   124b0:	b0 e0       	ldi	r27, 0x00	; 0
   124b2:	ae 0f       	add	r26, r30
   124b4:	f1 e0       	ldi	r31, 0x01	; 1
   124b6:	ae 17       	cp	r26, r30
   124b8:	08 f0       	brcs	.+2      	; 0x124bc <arb_priorityScheduler+0x384>
   124ba:	f0 e0       	ldi	r31, 0x00	; 0
   124bc:	bf 2b       	or	r27, r31
   124be:	6d 2d       	mov	r22, r13
   124c0:	65 0f       	add	r22, r21
   124c2:	91 e0       	ldi	r25, 0x01	; 1
   124c4:	6d 15       	cp	r22, r13
   124c6:	08 f0       	brcs	.+2      	; 0x124ca <arb_priorityScheduler+0x392>
   124c8:	90 e0       	ldi	r25, 0x00	; 0
   124ca:	5b 2f       	mov	r21, r27
   124cc:	56 0f       	add	r21, r22
   124ce:	81 e0       	ldi	r24, 0x01	; 1
   124d0:	56 17       	cp	r21, r22
   124d2:	08 f0       	brcs	.+2      	; 0x124d6 <arb_priorityScheduler+0x39e>
   124d4:	80 e0       	ldi	r24, 0x00	; 0
   124d6:	69 2f       	mov	r22, r25
   124d8:	68 2b       	or	r22, r24
   124da:	69 0d       	add	r22, r9
   124dc:	71 e0       	ldi	r23, 0x01	; 1
   124de:	69 15       	cp	r22, r9
   124e0:	08 f0       	brcs	.+2      	; 0x124e4 <arb_priorityScheduler+0x3ac>
   124e2:	70 e0       	ldi	r23, 0x00	; 0
   124e4:	7c 0d       	add	r23, r12
   124e6:	81 e0       	ldi	r24, 0x01	; 1
   124e8:	7c 15       	cp	r23, r12
   124ea:	08 f0       	brcs	.+2      	; 0x124ee <arb_priorityScheduler+0x3b6>
   124ec:	80 e0       	ldi	r24, 0x00	; 0
   124ee:	8b 0d       	add	r24, r11
   124f0:	91 e0       	ldi	r25, 0x01	; 1
   124f2:	8b 15       	cp	r24, r11
   124f4:	08 f0       	brcs	.+2      	; 0x124f8 <arb_priorityScheduler+0x3c0>
   124f6:	90 e0       	ldi	r25, 0x00	; 0
   124f8:	98 01       	movw	r18, r16
   124fa:	4a 2f       	mov	r20, r26
   124fc:	98 0d       	add	r25, r8
   124fe:	0f e0       	ldi	r16, 0x0F	; 15
   12500:	0e 94 5f 0c 	call	0x18be	; 0x18be <__lshrdi3>
   12504:	c9 01       	movw	r24, r18
   12506:	ba 01       	movw	r22, r20
   12508:	20 93 7b 25 	sts	0x257B, r18
   1250c:	90 93 7c 25 	sts	0x257C, r25
   12510:	40 93 7d 25 	sts	0x257D, r20
   12514:	70 93 7e 25 	sts	0x257E, r23
       *---------------------------------------------------------------------*/
      arb_updateLoadingEst();

   }/*End if( gt_schedObject.b_enableScheduler == true)*/

}/*End arb_priorityScheduler*/
   12518:	26 96       	adiw	r28, 0x06	; 6
   1251a:	cd bf       	out	0x3d, r28	; 61
   1251c:	de bf       	out	0x3e, r29	; 62
   1251e:	cf 91       	pop	r28
   12520:	df 91       	pop	r29
   12522:	1f 91       	pop	r17
   12524:	0f 91       	pop	r16
   12526:	ff 90       	pop	r15
   12528:	ef 90       	pop	r14
   1252a:	df 90       	pop	r13
   1252c:	cf 90       	pop	r12
   1252e:	bf 90       	pop	r11
   12530:	af 90       	pop	r10
   12532:	9f 90       	pop	r9
   12534:	8f 90       	pop	r8
   12536:	7f 90       	pop	r7
   12538:	6f 90       	pop	r6
   1253a:	5f 90       	pop	r5
   1253c:	4f 90       	pop	r4
   1253e:	08 95       	ret

00012540 <arb_schedulerStart>:
   return ARB_PASSED;

}/*End arb_schedulerInit*/

void arb_schedulerStart( void)
{
   12540:	ef 92       	push	r14
   12542:	ff 92       	push	r15
   12544:	0f 93       	push	r16
   12546:	1f 93       	push	r17
   12548:	df 93       	push	r29
   1254a:	cf 93       	push	r28
   1254c:	cd b7       	in	r28, 0x3d	; 61
   1254e:	de b7       	in	r29, 0x3e	; 62
   12550:	e3 97       	sbiw	r28, 0x33	; 51
   12552:	cd bf       	out	0x3d, r28	; 61
   12554:	de bf       	out	0x3e, r29	; 62
   char ac_buff[50];

   /*------------------------------------------------------------------------*
    * Enable the scheduler
    *------------------------------------------------------------------------*/
   gt_schedObject.b_enableScheduler = true;
   12556:	11 e0       	ldi	r17, 0x01	; 1
   12558:	10 93 74 25 	sts	0x2574, r17

   /*------------------------------------------------------------------------*
    * Start the system timer
    *------------------------------------------------------------------------*/
   t_err = arb_sysTimerStart();
   1255c:	0e 94 98 9d 	call	0x13b30	; 0x13b30 <arb_sysTimerStart>
   12560:	28 2f       	mov	r18, r24
   if( t_err < 0)
   12562:	87 ff       	sbrs	r24, 7
   12564:	27 c0       	rjmp	.+78     	; 0x125b4 <arb_schedulerStart+0x74>
   {
      sprintf_P((char *)ac_buff, PSTR("arb_sysTimerStart failed with %d.\n\r"), t_err);
   12566:	00 d0       	rcall	.+0      	; 0x12568 <arb_schedulerStart+0x28>
   12568:	00 d0       	rcall	.+0      	; 0x1256a <arb_schedulerStart+0x2a>
   1256a:	ed b7       	in	r30, 0x3d	; 61
   1256c:	fe b7       	in	r31, 0x3e	; 62
   1256e:	31 96       	adiw	r30, 0x01	; 1
   12570:	8e 01       	movw	r16, r28
   12572:	0e 5f       	subi	r16, 0xFE	; 254
   12574:	1f 4f       	sbci	r17, 0xFF	; 255
   12576:	ad b7       	in	r26, 0x3d	; 61
   12578:	be b7       	in	r27, 0x3e	; 62
   1257a:	11 96       	adiw	r26, 0x01	; 1
   1257c:	0d 93       	st	X+, r16
   1257e:	1c 93       	st	X, r17
   12580:	12 97       	sbiw	r26, 0x02	; 2
   12582:	8d ec       	ldi	r24, 0xCD	; 205
   12584:	9b e0       	ldi	r25, 0x0B	; 11
   12586:	82 83       	std	Z+2, r24	; 0x02
   12588:	93 83       	std	Z+3, r25	; 0x03
   1258a:	82 2f       	mov	r24, r18
   1258c:	99 27       	eor	r25, r25
   1258e:	87 fd       	sbrc	r24, 7
   12590:	90 95       	com	r25
   12592:	84 83       	std	Z+4, r24	; 0x04
   12594:	95 83       	std	Z+5, r25	; 0x05
   12596:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>

      arb_printf( PRINTF_DBG_HIGH,
   1259a:	8d b7       	in	r24, 0x3d	; 61
   1259c:	9e b7       	in	r25, 0x3e	; 62
   1259e:	06 96       	adiw	r24, 0x06	; 6
   125a0:	8d bf       	out	0x3d, r24	; 61
   125a2:	9e bf       	out	0x3e, r25	; 62
   125a4:	84 e0       	ldi	r24, 0x04	; 4
   125a6:	b8 01       	movw	r22, r16
   125a8:	0e 94 6a 8d 	call	0x11ad4	; 0x11ad4 <arb_printf>
                  ac_buff);

      exit(0);
   125ac:	80 e0       	ldi	r24, 0x00	; 0
   125ae:	90 e0       	ldi	r25, 0x00	; 0
   125b0:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   }/*End if( arb_sysTimerStart() < 0)*/

   /*------------------------------------------------------------------------*
    * Change the status of this thread
    *------------------------------------------------------------------------*/
   pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   125b4:	e0 91 29 22 	lds	r30, 0x2229
   125b8:	f0 91 2a 22 	lds	r31, 0x222A
   125bc:	06 80       	ldd	r0, Z+6	; 0x06
   125be:	f7 81       	ldd	r31, Z+7	; 0x07
   125c0:	e0 2d       	mov	r30, r0
   125c2:	01 90       	ld	r0, Z+
   125c4:	f0 81       	ld	r31, Z
   125c6:	e0 2d       	mov	r30, r0
   125c8:	e0 93 72 25 	sts	0x2572, r30
   125cc:	f0 93 73 25 	sts	0x2573, r31
   pt_temp->t_status = RUNNING;
   125d0:	11 83       	std	Z+1, r17	; 0x01

   /*------------------------------------------------------------------------*
    * Disable debug...
    *------------------------------------------------------------------------*/
   arb_setPrintfDbgLevel( PRINTF_DBG_OFF);
   125d2:	80 e2       	ldi	r24, 0x20	; 32
   125d4:	0e 94 db 8b 	call	0x117b6	; 0x117b6 <arb_setPrintfDbgLevel>

   /*------------------------------------------------------------------------*
    * Wait one second before launching first thread.
    *------------------------------------------------------------------------*/
   hal_busyDelayMs( 1000, hal_getCpuFreq());
   125d8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <hal_getCpuFreq>
   static inline void __attribute__((always_inline)) 
   hal_busyDelayMs(uint32_t i_msec, uint32_t i_cpuSpeed) 
   {

	   uint16_t __ticks;
	   double __tmp = ((i_cpuSpeed) / 4e3) * i_msec;
   125dc:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
   125e0:	20 e0       	ldi	r18, 0x00	; 0
   125e2:	30 e0       	ldi	r19, 0x00	; 0
   125e4:	4a e7       	ldi	r20, 0x7A	; 122
   125e6:	55 e4       	ldi	r21, 0x45	; 69
   125e8:	0e 94 de af 	call	0x15fbc	; 0x15fbc <__divsf3>
   125ec:	20 e0       	ldi	r18, 0x00	; 0
   125ee:	30 e0       	ldi	r19, 0x00	; 0
   125f0:	4a e7       	ldi	r20, 0x7A	; 122
   125f2:	54 e4       	ldi	r21, 0x44	; 68
   125f4:	0e 94 b5 b1 	call	0x1636a	; 0x1636a <__mulsf3>
   125f8:	7b 01       	movw	r14, r22
   125fa:	8c 01       	movw	r16, r24
  
      HAL_BEGIN_CRITICAL();
   125fc:	8f b7       	in	r24, 0x3f	; 63
   125fe:	89 83       	std	Y+1, r24	; 0x01
   12600:	f8 94       	cli

	   if (__tmp < 1.0)
   12602:	c8 01       	movw	r24, r16
   12604:	b7 01       	movw	r22, r14
   12606:	20 e0       	ldi	r18, 0x00	; 0
   12608:	30 e0       	ldi	r19, 0x00	; 0
   1260a:	40 e8       	ldi	r20, 0x80	; 128
   1260c:	5f e3       	ldi	r21, 0x3F	; 63
   1260e:	0e 94 da af 	call	0x15fb4	; 0x15fb4 <__cmpsf2>
   12612:	88 23       	and	r24, r24
   12614:	1c f4       	brge	.+6      	; 0x1261c <arb_schedulerStart+0xdc>
   12616:	81 e0       	ldi	r24, 0x01	; 1
   12618:	90 e0       	ldi	r25, 0x00	; 0
   1261a:	19 c0       	rjmp	.+50     	; 0x1264e <arb_schedulerStart+0x10e>
	   __ticks = 1;
	   else if (__tmp > 65535)
   1261c:	c8 01       	movw	r24, r16
   1261e:	b7 01       	movw	r22, r14
   12620:	20 e0       	ldi	r18, 0x00	; 0
   12622:	3f ef       	ldi	r19, 0xFF	; 255
   12624:	4f e7       	ldi	r20, 0x7F	; 127
   12626:	57 e4       	ldi	r21, 0x47	; 71
   12628:	0e 94 b1 b1 	call	0x16362	; 0x16362 <__gesf2>
   1262c:	18 16       	cp	r1, r24
   1262e:	54 f4       	brge	.+20     	; 0x12644 <arb_schedulerStart+0x104>
   12630:	80 e1       	ldi	r24, 0x10	; 16
   12632:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   12634:	20 e2       	ldi	r18, 0x20	; 32
   12636:	33 e0       	ldi	r19, 0x03	; 3
   12638:	f9 01       	movw	r30, r18
   1263a:	31 97       	sbiw	r30, 0x01	; 1
   1263c:	f1 f7       	brne	.-4      	; 0x1263a <arb_schedulerStart+0xfa>
   	   __ticks = (uint16_t) (i_msec * 10);
   	   while(__ticks)
   	   {
      	   // wait 1/10 ms
      	   _delay_loop_2(((F_CPU) / 4e3) / 10);
      	   __ticks --;
   1263e:	01 97       	sbiw	r24, 0x01	; 1
	   __ticks = 1;
	   else if (__tmp > 65535)
	   {
   	   //	__ticks = requested delay in 1/10 ms
   	   __ticks = (uint16_t) (i_msec * 10);
   	   while(__ticks)
   12640:	d9 f7       	brne	.-10     	; 0x12638 <arb_schedulerStart+0xf8>
   12642:	09 c0       	rjmp	.+18     	; 0x12656 <arb_schedulerStart+0x116>
      	   __ticks --;
   	   }
   	   return;
	   }
	   else
	      __ticks = (uint16_t)__tmp;
   12644:	c8 01       	movw	r24, r16
   12646:	b7 01       	movw	r22, r14
   12648:	0e 94 85 b0 	call	0x1610a	; 0x1610a <__fixunssfsi>
   1264c:	cb 01       	movw	r24, r22

	   __asm__ volatile (
   1264e:	01 97       	sbiw	r24, 0x01	; 1
   12650:	f1 f7       	brne	.-4      	; 0x1264e <arb_schedulerStart+0x10e>
	   "brne 1b"
	   : "=w" (__ticks)
	   : "0" (__ticks)
	   );

      HAL_END_CRITICAL();
   12652:	89 81       	ldd	r24, Y+1	; 0x01
   12654:	8f bf       	out	0x3f, r24	; 63

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12656:	e0 91 29 22 	lds	r30, 0x2229
   1265a:	f0 91 2a 22 	lds	r31, 0x222A
   1265e:	06 80       	ldd	r0, Z+6	; 0x06
   12660:	f7 81       	ldd	r31, Z+7	; 0x07
   12662:	e0 2d       	mov	r30, r0
   12664:	01 90       	ld	r0, Z+
   12666:	f0 81       	ld	r31, Z
   12668:	e0 2d       	mov	r30, r0
   1266a:	e0 93 bb 25 	sts	0x25BB, r30
   1266e:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12672:	81 85       	ldd	r24, Z+9	; 0x09
   12674:	92 85       	ldd	r25, Z+10	; 0x0a
   12676:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12678:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   1267a:	ff 91       	pop	r31
      asm( "pop r30");
   1267c:	ef 91       	pop	r30
      asm( "pop r29");
   1267e:	df 91       	pop	r29
      asm( "pop r28");
   12680:	cf 91       	pop	r28
      asm( "pop r27");
   12682:	bf 91       	pop	r27
      asm( "pop r26");
   12684:	af 91       	pop	r26
      asm( "pop r25");
   12686:	9f 91       	pop	r25
      asm( "pop r24");
   12688:	8f 91       	pop	r24
      asm( "pop r23");
   1268a:	7f 91       	pop	r23
      asm( "pop r22");
   1268c:	6f 91       	pop	r22
      asm( "pop r21");
   1268e:	5f 91       	pop	r21
      asm( "pop r20");
   12690:	4f 91       	pop	r20
      asm( "pop r19");
   12692:	3f 91       	pop	r19
      asm( "pop r18");
   12694:	2f 91       	pop	r18
      asm( "pop r17");
   12696:	1f 91       	pop	r17
      asm( "pop r16");
   12698:	0f 91       	pop	r16
      asm( "pop r15");
   1269a:	ff 90       	pop	r15
      asm( "pop r14");
   1269c:	ef 90       	pop	r14
      asm( "pop r13");
   1269e:	df 90       	pop	r13
      asm( "pop r12");
   126a0:	cf 90       	pop	r12
      asm( "pop r11");
   126a2:	bf 90       	pop	r11
      asm( "pop r10");
   126a4:	af 90       	pop	r10
      asm( "pop r9");
   126a6:	9f 90       	pop	r9
      asm( "pop r8");
   126a8:	8f 90       	pop	r8
      asm( "pop r7");
   126aa:	7f 90       	pop	r7
      asm( "pop r6");
   126ac:	6f 90       	pop	r6
      asm( "pop r5");
   126ae:	5f 90       	pop	r5
      asm( "pop r4");
   126b0:	4f 90       	pop	r4
      asm( "pop r3");
   126b2:	3f 90       	pop	r3
      asm( "pop r2");
   126b4:	2f 90       	pop	r2
      asm( "pop r1");
   126b6:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   126b8:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   126ba:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   126bc:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
   HAL_RET();
   126be:	08 95       	ret

}/*End arb_schedulerStart*/
   126c0:	e3 96       	adiw	r28, 0x33	; 51
   126c2:	cd bf       	out	0x3d, r28	; 61
   126c4:	de bf       	out	0x3e, r29	; 62
   126c6:	cf 91       	pop	r28
   126c8:	df 91       	pop	r29
   126ca:	1f 91       	pop	r17
   126cc:	0f 91       	pop	r16
   126ce:	ff 90       	pop	r15
   126d0:	ef 90       	pop	r14
   126d2:	08 95       	ret

000126d4 <arb_schedulerInit>:
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_error arb_schedulerInit( t_schedulerType t_schedType,
                           t_stackSize t_idlStack,
                           t_timerModId t_timerId)
{
   126d4:	ff 92       	push	r15
   126d6:	0f 93       	push	r16
   126d8:	1f 93       	push	r17
   126da:	df 93       	push	r29
   126dc:	cf 93       	push	r28
   126de:	0f 92       	push	r0
   126e0:	0f 92       	push	r0
   126e2:	cd b7       	in	r28, 0x3d	; 61
   126e4:	de b7       	in	r29, 0x3e	; 62
   126e6:	f8 2e       	mov	r15, r24
   126e8:	8b 01       	movw	r16, r22
   126ea:	84 2f       	mov	r24, r20
   t_THRDHANDLE t_idleThrdHndl;

   /*------------------------------------------------------------------------*
    * Scheduler is not enabled until 'arb_schedulerStart' gets called.
    *------------------------------------------------------------------------*/
   gt_schedObject.b_enableScheduler = false;
   126ec:	10 92 74 25 	sts	0x2574, r1
   gt_schedObject.ai_loading[0] = 0;
   126f0:	10 92 77 25 	sts	0x2577, r1
   126f4:	10 92 78 25 	sts	0x2578, r1
   126f8:	10 92 79 25 	sts	0x2579, r1
   126fc:	10 92 7a 25 	sts	0x257A, r1
   gt_schedObject.ai_loading[1] = 0;
   12700:	10 92 7b 25 	sts	0x257B, r1
   12704:	10 92 7c 25 	sts	0x257C, r1
   12708:	10 92 7d 25 	sts	0x257D, r1
   1270c:	10 92 7e 25 	sts	0x257E, r1
   gt_schedObject.s_loadUpdateCount = 0;
   12710:	10 92 75 25 	sts	0x2575, r1
   12714:	10 92 76 25 	sts	0x2576, r1
   gt_schedObject.i_activeCount = 0;
   12718:	10 92 7f 25 	sts	0x257F, r1
   1271c:	10 92 80 25 	sts	0x2580, r1
   12720:	10 92 81 25 	sts	0x2581, r1
   12724:	10 92 82 25 	sts	0x2582, r1

   /*------------------------------------------------------------------------*
    * Global Interrupt Disable
    *------------------------------------------------------------------------*/
   HAL_CLI();
   12728:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Configure OS system timer for a period of 10msec
    *------------------------------------------------------------------------*/
   arb_sysTimerInit( t_timerId);
   1272a:	0e 94 a9 9c 	call	0x13952	; 0x13952 <arb_sysTimerInit>

   /*------------------------------------------------------------------------*
    * Create the idle thread.
    *------------------------------------------------------------------------*/
   t_idleThrdHndl = arb_idleInit( t_idlStack, ARB_IDLE_PRIORITY);
   1272e:	c8 01       	movw	r24, r16
   12730:	6f ef       	ldi	r22, 0xFF	; 255
   12732:	0e 94 66 86 	call	0x10ccc	; 0x10ccc <arb_idleInit>
   12736:	89 83       	std	Y+1, r24	; 0x01
   12738:	9a 83       	std	Y+2, r25	; 0x02
   if( t_idleThrdHndl < 0)
   1273a:	89 81       	ldd	r24, Y+1	; 0x01
   1273c:	9a 81       	ldd	r25, Y+2	; 0x02
   1273e:	97 ff       	sbrs	r25, 7
   12740:	08 c0       	rjmp	.+16     	; 0x12752 <arb_schedulerInit+0x7e>
   {
      arb_printf( PRINTF_DBG_HIGH,
   12742:	84 e0       	ldi	r24, 0x04	; 4
   12744:	6b ed       	ldi	r22, 0xDB	; 219
   12746:	71 e2       	ldi	r23, 0x21	; 33
   12748:	0e 94 6a 8d 	call	0x11ad4	; 0x11ad4 <arb_printf>
                  "Idle thread failed init.\n\r");

      return (t_error)t_idleThrdHndl;
   1274c:	89 81       	ldd	r24, Y+1	; 0x01
   1274e:	9a 81       	ldd	r25, Y+2	; 0x02
   12750:	1c c0       	rjmp	.+56     	; 0x1278a <arb_schedulerInit+0xb6>
   }

   /*------------------------------------------------------------------------*
    * Make sure the idle thread is the first thread the scheduler runs.
    *------------------------------------------------------------------------*/
   UTL_SET_CURR_OF_CONT( gt_activeThreads, t_idleThrdHndl);
   12752:	e0 91 29 22 	lds	r30, 0x2229
   12756:	f0 91 2a 22 	lds	r31, 0x222A
   1275a:	89 81       	ldd	r24, Y+1	; 0x01
   1275c:	9a 81       	ldd	r25, Y+2	; 0x02
   1275e:	86 83       	std	Z+6, r24	; 0x06
   12760:	97 83       	std	Z+7, r25	; 0x07

   /*------------------------------------------------------------------------*
    * Point the function pointer to the correct scheduler
    *------------------------------------------------------------------------*/
   switch( t_schedType)
   12762:	ff 20       	and	r15, r15
   12764:	31 f0       	breq	.+12     	; 0x12772 <arb_schedulerInit+0x9e>
   12766:	81 e0       	ldi	r24, 0x01	; 1
   12768:	f8 16       	cp	r15, r24
   1276a:	19 f4       	brne	.+6      	; 0x12772 <arb_schedulerInit+0x9e>

      break;/*End  case ROUNDROBIN:*/

      case PRIORITY:

         gpt_scheduler = &arb_priorityScheduler;
   1276c:	8c e9       	ldi	r24, 0x9C	; 156
   1276e:	90 e9       	ldi	r25, 0x90	; 144
   12770:	02 c0       	rjmp	.+4      	; 0x12776 <arb_schedulerInit+0xa2>

      break;/*End case PRIORITY:*/

      default:

         gpt_scheduler = &arb_roundRobinScheduler;
   12772:	84 ec       	ldi	r24, 0xC4	; 196
   12774:	9e e8       	ldi	r25, 0x8E	; 142
   12776:	80 93 bd 25 	sts	0x25BD, r24
   1277a:	90 93 be 25 	sts	0x25BE, r25

      break;/*End default:*/

   }/*End switch( t_schedType)*/

   arb_printf( PRINTF_DBG_HIGH,
   1277e:	84 e0       	ldi	r24, 0x04	; 4
   12780:	66 ef       	ldi	r22, 0xF6	; 246
   12782:	71 e2       	ldi	r23, 0x21	; 33
   12784:	0e 94 6a 8d 	call	0x11ad4	; 0x11ad4 <arb_printf>
   12788:	80 e0       	ldi	r24, 0x00	; 0
               "Scheduler initialized\n\r");

   return ARB_PASSED;

}/*End arb_schedulerInit*/
   1278a:	0f 90       	pop	r0
   1278c:	0f 90       	pop	r0
   1278e:	cf 91       	pop	r28
   12790:	df 91       	pop	r29
   12792:	1f 91       	pop	r17
   12794:	0f 91       	pop	r16
   12796:	ff 90       	pop	r15
   12798:	08 95       	ret

0001279a <arb_semaphoreInit>:

}/*End arb_semaphoreDestroy*/

t_error arb_semaphoreInit( t_SEMHANDLE t_semHandle,/*Pointer to the semaphores handle*/
                           int16_t     s_value)
{
   1279a:	df 93       	push	r29
   1279c:	cf 93       	push	r28
   1279e:	0f 92       	push	r0
   127a0:	0f 92       	push	r0
   127a2:	cd b7       	in	r28, 0x3d	; 61
   127a4:	de b7       	in	r29, 0x3e	; 62
   127a6:	89 83       	std	Y+1, r24	; 0x01
   127a8:	9a 83       	std	Y+2, r25	; 0x02
   t_semaphore *pt_sem = NULL;

   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) == false)
   127aa:	e9 81       	ldd	r30, Y+1	; 0x01
   127ac:	fa 81       	ldd	r31, Y+2	; 0x02
   127ae:	20 91 1a 22 	lds	r18, 0x221A
   127b2:	30 91 1b 22 	lds	r19, 0x221B
   127b6:	84 81       	ldd	r24, Z+4	; 0x04
   127b8:	95 81       	ldd	r25, Z+5	; 0x05
   127ba:	82 17       	cp	r24, r18
   127bc:	93 07       	cpc	r25, r19
   127be:	11 f0       	breq	.+4      	; 0x127c4 <arb_semaphoreInit+0x2a>
   127c0:	89 ef       	ldi	r24, 0xF9	; 249
   127c2:	08 c0       	rjmp	.+16     	; 0x127d4 <arb_semaphoreInit+0x3a>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_sem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   127c4:	e9 81       	ldd	r30, Y+1	; 0x01
   127c6:	fa 81       	ldd	r31, Y+2	; 0x02
   t_semHandle);

   pt_sem->s_count = s_value;
   127c8:	01 90       	ld	r0, Z+
   127ca:	f0 81       	ld	r31, Z
   127cc:	e0 2d       	mov	r30, r0
   127ce:	61 83       	std	Z+1, r22	; 0x01
   127d0:	72 83       	std	Z+2, r23	; 0x02
   127d2:	80 e0       	ldi	r24, 0x00	; 0

   return ARB_PASSED;

}/*End arb_semaphoreInit*/
   127d4:	0f 90       	pop	r0
   127d6:	0f 90       	pop	r0
   127d8:	cf 91       	pop	r28
   127da:	df 91       	pop	r29
   127dc:	08 95       	ret

000127de <arb_semaphoreDestroy>:
   return (t_SEMHANDLE)t_linkHndl;

}/*End arb_semaphoreCreate*/

t_error arb_semaphoreDestroy( t_SEMHANDLE t_semHandle)
{
   127de:	ef 92       	push	r14
   127e0:	ff 92       	push	r15
   127e2:	0f 93       	push	r16
   127e4:	1f 93       	push	r17
   127e6:	df 93       	push	r29
   127e8:	cf 93       	push	r28
   127ea:	cd b7       	in	r28, 0x3d	; 61
   127ec:	de b7       	in	r29, 0x3e	; 62
   127ee:	27 97       	sbiw	r28, 0x07	; 7
   127f0:	cd bf       	out	0x3d, r28	; 61
   127f2:	de bf       	out	0x3e, r29	; 62
   127f4:	8e 83       	std	Y+6, r24	; 0x06
   127f6:	9f 83       	std	Y+7, r25	; 0x07

   /*------------------------------------------------------------------------*
    * We are going to be removing a global element so perform mutual
    * exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   127f8:	8f b7       	in	r24, 0x3f	; 63
   127fa:	89 83       	std	Y+1, r24	; 0x01
   127fc:	f8 94       	cli

   if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   127fe:	ee 81       	ldd	r30, Y+6	; 0x06
   12800:	ff 81       	ldd	r31, Y+7	; 0x07
   12802:	20 91 1a 22 	lds	r18, 0x221A
   12806:	30 91 1b 22 	lds	r19, 0x221B
   1280a:	84 81       	ldd	r24, Z+4	; 0x04
   1280c:	95 81       	ldd	r25, Z+5	; 0x05
   1280e:	82 17       	cp	r24, r18
   12810:	93 07       	cpc	r25, r19
   12812:	21 f0       	breq	.+8      	; 0x1281c <arb_semaphoreDestroy+0x3e>
   false)
   {
      HAL_END_CRITICAL();//Enable interrupts
   12814:	89 81       	ldd	r24, Y+1	; 0x01
   12816:	8f bf       	out	0x3f, r24	; 63
   12818:	89 ef       	ldi	r24, 0xF9	; 249
   1281a:	4e c0       	rjmp	.+156    	; 0x128b8 <arb_semaphoreDestroy+0xda>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_sem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   1281c:	ee 81       	ldd	r30, Y+6	; 0x06
   1281e:	ff 81       	ldd	r31, Y+7	; 0x07
   12820:	00 81       	ld	r16, Z
   12822:	11 81       	ldd	r17, Z+1	; 0x01
    * entire list using the current position of t_curr once its deleted the
    * loop will not be unable to move to the next ptr location. This issue is
    * resolved by using a previous ptr to change t_curr back to a valid
    * location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, pt_sem->t_blockedList, s_count)
   12824:	d8 01       	movw	r26, r16
   12826:	13 96       	adiw	r26, 0x03	; 3
   12828:	ed 91       	ld	r30, X+
   1282a:	fc 91       	ld	r31, X
   1282c:	14 97       	sbiw	r26, 0x04	; 4
   1282e:	e2 80       	ldd	r14, Z+2	; 0x02
   12830:	f3 80       	ldd	r15, Z+3	; 0x03
   12832:	13 96       	adiw	r26, 0x03	; 3
   12834:	ed 91       	ld	r30, X+
   12836:	fc 91       	ld	r31, X
   12838:	14 97       	sbiw	r26, 0x04	; 4
   1283a:	25 c0       	rjmp	.+74     	; 0x12886 <arb_semaphoreDestroy+0xa8>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   1283c:	ea 81       	ldd	r30, Y+2	; 0x02
   1283e:	fb 81       	ldd	r31, Y+3	; 0x03

      pt_temp->t_status = READY;
   12840:	01 90       	ld	r0, Z+
   12842:	f0 81       	ld	r31, Z
   12844:	e0 2d       	mov	r30, r0
   12846:	11 82       	std	Z+1, r1	; 0x01

      t_prevLink = UTL_GET_PREV_LINK( t_curr);
   12848:	ea 81       	ldd	r30, Y+2	; 0x02
   1284a:	fb 81       	ldd	r31, Y+3	; 0x03
   1284c:	82 85       	ldd	r24, Z+10	; 0x0a
   1284e:	93 85       	ldd	r25, Z+11	; 0x0b
   12850:	8c 83       	std	Y+4, r24	; 0x04
   12852:	9d 83       	std	Y+5, r25	; 0x05

      t_err = utl_removeLink( pt_sem->t_blockedList,
   12854:	f8 01       	movw	r30, r16
   12856:	83 81       	ldd	r24, Z+3	; 0x03
   12858:	94 81       	ldd	r25, Z+4	; 0x04
   1285a:	6a 81       	ldd	r22, Y+2	; 0x02
   1285c:	7b 81       	ldd	r23, Y+3	; 0x03
   1285e:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
                              t_curr);

      t_err = utl_insertLink( gt_activeThreads,
   12862:	80 91 29 22 	lds	r24, 0x2229
   12866:	90 91 2a 22 	lds	r25, 0x222A
   1286a:	6a 81       	ldd	r22, Y+2	; 0x02
   1286c:	7b 81       	ldd	r23, Y+3	; 0x03
   1286e:	41 e0       	ldi	r20, 0x01	; 1
   12870:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                              t_curr,
                              true);
      t_curr = t_prevLink;
   12874:	8c 81       	ldd	r24, Y+4	; 0x04
   12876:	9d 81       	ldd	r25, Y+5	; 0x05
   12878:	8a 83       	std	Y+2, r24	; 0x02
   1287a:	9b 83       	std	Y+3, r25	; 0x03
    * entire list using the current position of t_curr once its deleted the
    * loop will not be unable to move to the next ptr location. This issue is
    * resolved by using a previous ptr to change t_curr back to a valid
    * location once an item has been removed.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_curr, pt_sem->t_blockedList, s_count)
   1287c:	08 94       	sec
   1287e:	e1 08       	sbc	r14, r1
   12880:	f1 08       	sbc	r15, r1
   12882:	ea 81       	ldd	r30, Y+2	; 0x02
   12884:	fb 81       	ldd	r31, Y+3	; 0x03
   12886:	80 85       	ldd	r24, Z+8	; 0x08
   12888:	91 85       	ldd	r25, Z+9	; 0x09
   1288a:	8a 83       	std	Y+2, r24	; 0x02
   1288c:	9b 83       	std	Y+3, r25	; 0x03
   1288e:	e1 14       	cp	r14, r1
   12890:	f1 04       	cpc	r15, r1
   12892:	a1 f6       	brne	.-88     	; 0x1283c <arb_semaphoreDestroy+0x5e>
   }

   /*------------------------------------------------------------------------*
    * Destroy the blocked list for this semaphore.
    *------------------------------------------------------------------------*/
   t_err = utl_destroyContainer( pt_sem->t_blockedList);
   12894:	d8 01       	movw	r26, r16
   12896:	13 96       	adiw	r26, 0x03	; 3
   12898:	8d 91       	ld	r24, X+
   1289a:	9c 91       	ld	r25, X
   1289c:	14 97       	sbiw	r26, 0x04	; 4
   1289e:	0e 94 20 a5 	call	0x14a40	; 0x14a40 <utl_destroyContainer>

   /*------------------------------------------------------------------------*
    * Destroy the semaphore
    *------------------------------------------------------------------------*/
   t_err = utl_destroyLink( gt_activeSems, (t_LINKHNDL)t_semHandle);
   128a2:	80 91 1a 22 	lds	r24, 0x221A
   128a6:	90 91 1b 22 	lds	r25, 0x221B
   128aa:	6e 81       	ldd	r22, Y+6	; 0x06
   128ac:	7f 81       	ldd	r23, Y+7	; 0x07
   128ae:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>

   HAL_END_CRITICAL();//Enable interrupts
   128b2:	89 81       	ldd	r24, Y+1	; 0x01
   128b4:	8f bf       	out	0x3f, r24	; 63
   128b6:	80 e0       	ldi	r24, 0x00	; 0

   return ARB_PASSED;

}/*End arb_semaphoreDestroy*/
   128b8:	27 96       	adiw	r28, 0x07	; 7
   128ba:	cd bf       	out	0x3d, r28	; 61
   128bc:	de bf       	out	0x3e, r29	; 62
   128be:	cf 91       	pop	r28
   128c0:	df 91       	pop	r29
   128c2:	1f 91       	pop	r17
   128c4:	0f 91       	pop	r16
   128c6:	ff 90       	pop	r15
   128c8:	ef 90       	pop	r14
   128ca:	08 95       	ret

000128cc <arb_semaphoreCreate>:
   return ARB_PASSED;

}/*End arb_signal( t_SEMHANDLE *pt_semHandle)*/

t_SEMHANDLE arb_semaphoreCreate( t_semType t_type)
{
   128cc:	ff 92       	push	r15
   128ce:	0f 93       	push	r16
   128d0:	1f 93       	push	r17
   128d2:	df 93       	push	r29
   128d4:	cf 93       	push	r28
   128d6:	00 d0       	rcall	.+0      	; 0x128d8 <arb_semaphoreCreate+0xc>
   128d8:	cd b7       	in	r28, 0x3d	; 61
   128da:	de b7       	in	r29, 0x3e	; 62
   128dc:	f8 2e       	mov	r15, r24

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   128de:	8f b7       	in	r24, 0x3f	; 63
   128e0:	89 83       	std	Y+1, r24	; 0x01
   128e2:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Create a new link handle that will store information about this
    * semaphore.
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_semaphore));
   128e4:	85 e0       	ldi	r24, 0x05	; 5
   128e6:	90 e0       	ldi	r25, 0x00	; 0
   128e8:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   128ec:	8a 83       	std	Y+2, r24	; 0x02
   128ee:	9b 83       	std	Y+3, r25	; 0x03

   if( t_linkHndl < 0)
   128f0:	8a 81       	ldd	r24, Y+2	; 0x02
   128f2:	9b 81       	ldd	r25, Y+3	; 0x03
   128f4:	97 fd       	sbrc	r25, 7
   128f6:	1e c0       	rjmp	.+60     	; 0x12934 <arb_semaphoreCreate+0x68>

   /*------------------------------------------------------------------------*
    * Add the semaphore 'link' onto the list containing all the open
    * semaphores on the system.
    *------------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeSems,
   128f8:	80 91 1a 22 	lds	r24, 0x221A
   128fc:	90 91 1b 22 	lds	r25, 0x221B
   12900:	6a 81       	ldd	r22, Y+2	; 0x02
   12902:	7b 81       	ldd	r23, Y+3	; 0x03
   12904:	41 e0       	ldi	r20, 0x01	; 1
   12906:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the semaphore is stored.
    *------------------------------------------------------------------------*/
   pt_newSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   1290a:	ea 81       	ldd	r30, Y+2	; 0x02
   1290c:	fb 81       	ldd	r31, Y+3	; 0x03
   1290e:	00 81       	ld	r16, Z
   12910:	11 81       	ldd	r17, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * Each semaphore contains a blocked list where threads waiting on the
    * semaphore will be stored.
    *------------------------------------------------------------------------*/
   pt_newSem->t_blockedList = utl_createContainer();
   12912:	0e 94 cf a5 	call	0x14b9e	; 0x14b9e <utl_createContainer>
   12916:	f8 01       	movw	r30, r16
   12918:	83 83       	std	Z+3, r24	; 0x03
   1291a:	94 83       	std	Z+4, r25	; 0x04
   if( pt_newSem->t_blockedList < 0)
   1291c:	83 81       	ldd	r24, Z+3	; 0x03
   1291e:	94 81       	ldd	r25, Z+4	; 0x04
   12920:	97 ff       	sbrs	r25, 7
   12922:	0d c0       	rjmp	.+26     	; 0x1293e <arb_semaphoreCreate+0x72>
   {
      t_err = utl_destroyLink( gt_activeSems,
   12924:	80 91 1a 22 	lds	r24, 0x221A
   12928:	90 91 1b 22 	lds	r25, 0x221B
   1292c:	6a 81       	ldd	r22, Y+2	; 0x02
   1292e:	7b 81       	ldd	r23, Y+3	; 0x03
   12930:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                               t_linkHndl);
      HAL_END_CRITICAL();//Enable interrupts
   12934:	89 81       	ldd	r24, Y+1	; 0x01
   12936:	8f bf       	out	0x3f, r24	; 63
   12938:	2f ef       	ldi	r18, 0xFF	; 255
   1293a:	3f ef       	ldi	r19, 0xFF	; 255
   1293c:	12 c0       	rjmp	.+36     	; 0x12962 <arb_semaphoreCreate+0x96>
   }

   /*------------------------------------------------------------------------*
    * Are we a SIGNAL or COUNTING semaphore?
    *------------------------------------------------------------------------*/
   pt_newSem->t_type = t_type;
   1293e:	f8 01       	movw	r30, r16
   12940:	f0 82       	st	Z, r15

   if( t_type == MUTEX)
   12942:	f2 e0       	ldi	r31, 0x02	; 2
   12944:	ff 16       	cp	r15, r31
   12946:	31 f4       	brne	.+12     	; 0x12954 <arb_semaphoreCreate+0x88>
   {
      /*---------------------------------------------------------------------*
       * This semaphore is used for mutual exclusion initialize to 1 or
       * 'unlocked'.
       *---------------------------------------------------------------------*/
      pt_newSem->s_count = 1;
   12948:	81 e0       	ldi	r24, 0x01	; 1
   1294a:	90 e0       	ldi	r25, 0x00	; 0
   1294c:	f8 01       	movw	r30, r16
   1294e:	81 83       	std	Z+1, r24	; 0x01
   12950:	92 83       	std	Z+2, r25	; 0x02
   12952:	03 c0       	rjmp	.+6      	; 0x1295a <arb_semaphoreCreate+0x8e>
   }
   else
      pt_newSem->s_count = 0;
   12954:	f8 01       	movw	r30, r16
   12956:	11 82       	std	Z+1, r1	; 0x01
   12958:	12 82       	std	Z+2, r1	; 0x02

   HAL_END_CRITICAL();//Enable interrupts
   1295a:	89 81       	ldd	r24, Y+1	; 0x01
   1295c:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Return a handle (or address ) to this semaphore.
    *------------------------------------------------------------------------*/
   return (t_SEMHANDLE)t_linkHndl;
   1295e:	2a 81       	ldd	r18, Y+2	; 0x02
   12960:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End arb_semaphoreCreate*/
   12962:	c9 01       	movw	r24, r18
   12964:	23 96       	adiw	r28, 0x03	; 3
   12966:	cd bf       	out	0x3d, r28	; 61
   12968:	de bf       	out	0x3e, r29	; 62
   1296a:	cf 91       	pop	r28
   1296c:	df 91       	pop	r29
   1296e:	1f 91       	pop	r17
   12970:	0f 91       	pop	r16
   12972:	ff 90       	pop	r15
   12974:	08 95       	ret

00012976 <arb_yieldFromSignalActiveInt>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12976:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12978:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   1297a:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   1297c:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   1297e:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   12980:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   12982:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   12984:	0f 92       	push	r0
      asm( "push r1");
   12986:	1f 92       	push	r1
      asm( "clr r1");
   12988:	11 24       	eor	r1, r1
      asm( "push r2");
   1298a:	2f 92       	push	r2
      asm( "push r3");
   1298c:	3f 92       	push	r3
      asm( "push r4");
   1298e:	4f 92       	push	r4
      asm( "push r5");
   12990:	5f 92       	push	r5
      asm( "push r6");
   12992:	6f 92       	push	r6
      asm( "push r7");
   12994:	7f 92       	push	r7
      asm( "push r8");
   12996:	8f 92       	push	r8
      asm( "push r9");
   12998:	9f 92       	push	r9
      asm( "push r10");
   1299a:	af 92       	push	r10
      asm( "push r11");
   1299c:	bf 92       	push	r11
      asm( "push r12");
   1299e:	cf 92       	push	r12
      asm( "push r13");
   129a0:	df 92       	push	r13
      asm( "push r14");
   129a2:	ef 92       	push	r14
      asm( "push r15");
   129a4:	ff 92       	push	r15
      asm( "push r16");
   129a6:	0f 93       	push	r16
      asm( "push r17");
   129a8:	1f 93       	push	r17
      asm( "push r18");
   129aa:	2f 93       	push	r18
      asm( "push r19");
   129ac:	3f 93       	push	r19
      asm( "push r20");
   129ae:	4f 93       	push	r20
      asm( "push r21");
   129b0:	5f 93       	push	r21
      asm( "push r22");
   129b2:	6f 93       	push	r22
      asm( "push r23");
   129b4:	7f 93       	push	r23
      asm( "push r24");
   129b6:	8f 93       	push	r24
      asm( "push r25");
   129b8:	9f 93       	push	r25
      asm( "push r26");
   129ba:	af 93       	push	r26
      asm( "push r27");
   129bc:	bf 93       	push	r27
      asm( "push r28");
   129be:	cf 93       	push	r28
      asm( "push r29");
   129c0:	df 93       	push	r29
      asm( "push r30");
   129c2:	ef 93       	push	r30
      asm( "push r31");
   129c4:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   129c6:	e0 91 29 22 	lds	r30, 0x2229
   129ca:	f0 91 2a 22 	lds	r31, 0x222A
   129ce:	06 80       	ldd	r0, Z+6	; 0x06
   129d0:	f7 81       	ldd	r31, Z+7	; 0x07
   129d2:	e0 2d       	mov	r30, r0
   129d4:	01 90       	ld	r0, Z+
   129d6:	f0 81       	ld	r31, Z
   129d8:	e0 2d       	mov	r30, r0
   129da:	e0 93 bb 25 	sts	0x25BB, r30
   129de:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   129e2:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   129e4:	4e b7       	in	r20, 0x3e	; 62
   129e6:	94 2f       	mov	r25, r20
   129e8:	80 e0       	ldi	r24, 0x00	; 0
   129ea:	30 e0       	ldi	r19, 0x00	; 0
   129ec:	82 2b       	or	r24, r18
   129ee:	93 2b       	or	r25, r19
   129f0:	81 87       	std	Z+9, r24	; 0x09
   129f2:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   129f4:	8f ef       	ldi	r24, 0xFF	; 255
   129f6:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   129f8:	8f e3       	ldi	r24, 0x3F	; 63
   129fa:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   129fc:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12a00:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12a04:	e0 91 29 22 	lds	r30, 0x2229
   12a08:	f0 91 2a 22 	lds	r31, 0x222A
   12a0c:	06 80       	ldd	r0, Z+6	; 0x06
   12a0e:	f7 81       	ldd	r31, Z+7	; 0x07
   12a10:	e0 2d       	mov	r30, r0
   12a12:	01 90       	ld	r0, Z+
   12a14:	f0 81       	ld	r31, Z
   12a16:	e0 2d       	mov	r30, r0
   12a18:	e0 93 85 25 	sts	0x2585, r30
   12a1c:	f0 93 86 25 	sts	0x2586, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12a20:	03 84       	ldd	r0, Z+11	; 0x0b
   12a22:	f4 85       	ldd	r31, Z+12	; 0x0c
   12a24:	e0 2d       	mov	r30, r0
   12a26:	80 81       	ld	r24, Z
   12a28:	91 81       	ldd	r25, Z+1	; 0x01
   12a2a:	8d 5a       	subi	r24, 0xAD	; 173
   12a2c:	9e 4d       	sbci	r25, 0xDE	; 222
   12a2e:	11 f0       	breq	.+4      	; 0x12a34 <arb_yieldFromSignalActiveInt+0xbe>
   {
      arb_stackOverflow();
   12a30:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12a34:	e0 91 bd 25 	lds	r30, 0x25BD
   12a38:	f0 91 be 25 	lds	r31, 0x25BE
   12a3c:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12a3e:	e0 91 29 22 	lds	r30, 0x2229
   12a42:	f0 91 2a 22 	lds	r31, 0x222A
   12a46:	06 80       	ldd	r0, Z+6	; 0x06
   12a48:	f7 81       	ldd	r31, Z+7	; 0x07
   12a4a:	e0 2d       	mov	r30, r0
   12a4c:	01 90       	ld	r0, Z+
   12a4e:	f0 81       	ld	r31, Z
   12a50:	e0 2d       	mov	r30, r0
   12a52:	e0 93 bb 25 	sts	0x25BB, r30
   12a56:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12a5a:	81 85       	ldd	r24, Z+9	; 0x09
   12a5c:	92 85       	ldd	r25, Z+10	; 0x0a
   12a5e:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12a60:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12a62:	ff 91       	pop	r31
      asm( "pop r30");
   12a64:	ef 91       	pop	r30
      asm( "pop r29");
   12a66:	df 91       	pop	r29
      asm( "pop r28");
   12a68:	cf 91       	pop	r28
      asm( "pop r27");
   12a6a:	bf 91       	pop	r27
      asm( "pop r26");
   12a6c:	af 91       	pop	r26
      asm( "pop r25");
   12a6e:	9f 91       	pop	r25
      asm( "pop r24");
   12a70:	8f 91       	pop	r24
      asm( "pop r23");
   12a72:	7f 91       	pop	r23
      asm( "pop r22");
   12a74:	6f 91       	pop	r22
      asm( "pop r21");
   12a76:	5f 91       	pop	r21
      asm( "pop r20");
   12a78:	4f 91       	pop	r20
      asm( "pop r19");
   12a7a:	3f 91       	pop	r19
      asm( "pop r18");
   12a7c:	2f 91       	pop	r18
      asm( "pop r17");
   12a7e:	1f 91       	pop	r17
      asm( "pop r16");
   12a80:	0f 91       	pop	r16
      asm( "pop r15");
   12a82:	ff 90       	pop	r15
      asm( "pop r14");
   12a84:	ef 90       	pop	r14
      asm( "pop r13");
   12a86:	df 90       	pop	r13
      asm( "pop r12");
   12a88:	cf 90       	pop	r12
      asm( "pop r11");
   12a8a:	bf 90       	pop	r11
      asm( "pop r10");
   12a8c:	af 90       	pop	r10
      asm( "pop r9");
   12a8e:	9f 90       	pop	r9
      asm( "pop r8");
   12a90:	8f 90       	pop	r8
      asm( "pop r7");
   12a92:	7f 90       	pop	r7
      asm( "pop r6");
   12a94:	6f 90       	pop	r6
      asm( "pop r5");
   12a96:	5f 90       	pop	r5
      asm( "pop r4");
   12a98:	4f 90       	pop	r4
      asm( "pop r3");
   12a9a:	3f 90       	pop	r3
      asm( "pop r2");
   12a9c:	2f 90       	pop	r2
      asm( "pop r1");
   12a9e:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12aa0:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12aa2:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12aa4:	0f 90       	pop	r0
    * clearing the '.... Interrupt Executing flag'. Otherwise interrupts
    * won't be enabled until the calling thread is given back the processor
    * by the scheduler and the initial interrupt that indirectly made this
    * yield call is allowed to finish.
    *------------------------------------------------------------------------*/
	HAL_RETI();
   12aa6:	18 95       	reti

00012aa8 <arb_yieldFromSignalIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12aa8:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12aaa:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   12aac:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   12aae:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   12ab0:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   12ab2:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   12ab4:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   12ab6:	0f 92       	push	r0
      asm( "push r1");
   12ab8:	1f 92       	push	r1
      asm( "clr r1");
   12aba:	11 24       	eor	r1, r1
      asm( "push r2");
   12abc:	2f 92       	push	r2
      asm( "push r3");
   12abe:	3f 92       	push	r3
      asm( "push r4");
   12ac0:	4f 92       	push	r4
      asm( "push r5");
   12ac2:	5f 92       	push	r5
      asm( "push r6");
   12ac4:	6f 92       	push	r6
      asm( "push r7");
   12ac6:	7f 92       	push	r7
      asm( "push r8");
   12ac8:	8f 92       	push	r8
      asm( "push r9");
   12aca:	9f 92       	push	r9
      asm( "push r10");
   12acc:	af 92       	push	r10
      asm( "push r11");
   12ace:	bf 92       	push	r11
      asm( "push r12");
   12ad0:	cf 92       	push	r12
      asm( "push r13");
   12ad2:	df 92       	push	r13
      asm( "push r14");
   12ad4:	ef 92       	push	r14
      asm( "push r15");
   12ad6:	ff 92       	push	r15
      asm( "push r16");
   12ad8:	0f 93       	push	r16
      asm( "push r17");
   12ada:	1f 93       	push	r17
      asm( "push r18");
   12adc:	2f 93       	push	r18
      asm( "push r19");
   12ade:	3f 93       	push	r19
      asm( "push r20");
   12ae0:	4f 93       	push	r20
      asm( "push r21");
   12ae2:	5f 93       	push	r21
      asm( "push r22");
   12ae4:	6f 93       	push	r22
      asm( "push r23");
   12ae6:	7f 93       	push	r23
      asm( "push r24");
   12ae8:	8f 93       	push	r24
      asm( "push r25");
   12aea:	9f 93       	push	r25
      asm( "push r26");
   12aec:	af 93       	push	r26
      asm( "push r27");
   12aee:	bf 93       	push	r27
      asm( "push r28");
   12af0:	cf 93       	push	r28
      asm( "push r29");
   12af2:	df 93       	push	r29
      asm( "push r30");
   12af4:	ef 93       	push	r30
      asm( "push r31");
   12af6:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12af8:	e0 91 29 22 	lds	r30, 0x2229
   12afc:	f0 91 2a 22 	lds	r31, 0x222A
   12b00:	06 80       	ldd	r0, Z+6	; 0x06
   12b02:	f7 81       	ldd	r31, Z+7	; 0x07
   12b04:	e0 2d       	mov	r30, r0
   12b06:	01 90       	ld	r0, Z+
   12b08:	f0 81       	ld	r31, Z
   12b0a:	e0 2d       	mov	r30, r0
   12b0c:	e0 93 bb 25 	sts	0x25BB, r30
   12b10:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   12b14:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   12b16:	4e b7       	in	r20, 0x3e	; 62
   12b18:	94 2f       	mov	r25, r20
   12b1a:	80 e0       	ldi	r24, 0x00	; 0
   12b1c:	30 e0       	ldi	r19, 0x00	; 0
   12b1e:	82 2b       	or	r24, r18
   12b20:	93 2b       	or	r25, r19
   12b22:	81 87       	std	Z+9, r24	; 0x09
   12b24:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   12b26:	8f ef       	ldi	r24, 0xFF	; 255
   12b28:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   12b2a:	8f e3       	ldi	r24, 0x3F	; 63
   12b2c:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   12b2e:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12b32:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12b36:	e0 91 29 22 	lds	r30, 0x2229
   12b3a:	f0 91 2a 22 	lds	r31, 0x222A
   12b3e:	06 80       	ldd	r0, Z+6	; 0x06
   12b40:	f7 81       	ldd	r31, Z+7	; 0x07
   12b42:	e0 2d       	mov	r30, r0
   12b44:	01 90       	ld	r0, Z+
   12b46:	f0 81       	ld	r31, Z
   12b48:	e0 2d       	mov	r30, r0
   12b4a:	e0 93 85 25 	sts	0x2585, r30
   12b4e:	f0 93 86 25 	sts	0x2586, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12b52:	03 84       	ldd	r0, Z+11	; 0x0b
   12b54:	f4 85       	ldd	r31, Z+12	; 0x0c
   12b56:	e0 2d       	mov	r30, r0
   12b58:	80 81       	ld	r24, Z
   12b5a:	91 81       	ldd	r25, Z+1	; 0x01
   12b5c:	8d 5a       	subi	r24, 0xAD	; 173
   12b5e:	9e 4d       	sbci	r25, 0xDE	; 222
   12b60:	11 f0       	breq	.+4      	; 0x12b66 <arb_yieldFromSignalIntsOn+0xbe>
   {
      arb_stackOverflow();
   12b62:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12b66:	e0 91 bd 25 	lds	r30, 0x25BD
   12b6a:	f0 91 be 25 	lds	r31, 0x25BE
   12b6e:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12b70:	e0 91 29 22 	lds	r30, 0x2229
   12b74:	f0 91 2a 22 	lds	r31, 0x222A
   12b78:	06 80       	ldd	r0, Z+6	; 0x06
   12b7a:	f7 81       	ldd	r31, Z+7	; 0x07
   12b7c:	e0 2d       	mov	r30, r0
   12b7e:	01 90       	ld	r0, Z+
   12b80:	f0 81       	ld	r31, Z
   12b82:	e0 2d       	mov	r30, r0
   12b84:	e0 93 bb 25 	sts	0x25BB, r30
   12b88:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12b8c:	81 85       	ldd	r24, Z+9	; 0x09
   12b8e:	92 85       	ldd	r25, Z+10	; 0x0a
   12b90:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12b92:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12b94:	ff 91       	pop	r31
      asm( "pop r30");
   12b96:	ef 91       	pop	r30
      asm( "pop r29");
   12b98:	df 91       	pop	r29
      asm( "pop r28");
   12b9a:	cf 91       	pop	r28
      asm( "pop r27");
   12b9c:	bf 91       	pop	r27
      asm( "pop r26");
   12b9e:	af 91       	pop	r26
      asm( "pop r25");
   12ba0:	9f 91       	pop	r25
      asm( "pop r24");
   12ba2:	8f 91       	pop	r24
      asm( "pop r23");
   12ba4:	7f 91       	pop	r23
      asm( "pop r22");
   12ba6:	6f 91       	pop	r22
      asm( "pop r21");
   12ba8:	5f 91       	pop	r21
      asm( "pop r20");
   12baa:	4f 91       	pop	r20
      asm( "pop r19");
   12bac:	3f 91       	pop	r19
      asm( "pop r18");
   12bae:	2f 91       	pop	r18
      asm( "pop r17");
   12bb0:	1f 91       	pop	r17
      asm( "pop r16");
   12bb2:	0f 91       	pop	r16
      asm( "pop r15");
   12bb4:	ff 90       	pop	r15
      asm( "pop r14");
   12bb6:	ef 90       	pop	r14
      asm( "pop r13");
   12bb8:	df 90       	pop	r13
      asm( "pop r12");
   12bba:	cf 90       	pop	r12
      asm( "pop r11");
   12bbc:	bf 90       	pop	r11
      asm( "pop r10");
   12bbe:	af 90       	pop	r10
      asm( "pop r9");
   12bc0:	9f 90       	pop	r9
      asm( "pop r8");
   12bc2:	8f 90       	pop	r8
      asm( "pop r7");
   12bc4:	7f 90       	pop	r7
      asm( "pop r6");
   12bc6:	6f 90       	pop	r6
      asm( "pop r5");
   12bc8:	5f 90       	pop	r5
      asm( "pop r4");
   12bca:	4f 90       	pop	r4
      asm( "pop r3");
   12bcc:	3f 90       	pop	r3
      asm( "pop r2");
   12bce:	2f 90       	pop	r2
      asm( "pop r1");
   12bd0:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12bd2:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12bd4:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12bd6:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   12bd8:	08 95       	ret

00012bda <arb_yieldFromSignalIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   12bda:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   12bdc:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   12bde:	0f 92       	push	r0
      asm( "push r1");
   12be0:	1f 92       	push	r1
      asm( "clr r1");
   12be2:	11 24       	eor	r1, r1
      asm( "push r2");
   12be4:	2f 92       	push	r2
      asm( "push r3");
   12be6:	3f 92       	push	r3
      asm( "push r4");
   12be8:	4f 92       	push	r4
      asm( "push r5");
   12bea:	5f 92       	push	r5
      asm( "push r6");
   12bec:	6f 92       	push	r6
      asm( "push r7");
   12bee:	7f 92       	push	r7
      asm( "push r8");
   12bf0:	8f 92       	push	r8
      asm( "push r9");
   12bf2:	9f 92       	push	r9
      asm( "push r10");
   12bf4:	af 92       	push	r10
      asm( "push r11");
   12bf6:	bf 92       	push	r11
      asm( "push r12");
   12bf8:	cf 92       	push	r12
      asm( "push r13");
   12bfa:	df 92       	push	r13
      asm( "push r14");
   12bfc:	ef 92       	push	r14
      asm( "push r15");
   12bfe:	ff 92       	push	r15
      asm( "push r16");
   12c00:	0f 93       	push	r16
      asm( "push r17");
   12c02:	1f 93       	push	r17
      asm( "push r18");
   12c04:	2f 93       	push	r18
      asm( "push r19");
   12c06:	3f 93       	push	r19
      asm( "push r20");
   12c08:	4f 93       	push	r20
      asm( "push r21");
   12c0a:	5f 93       	push	r21
      asm( "push r22");
   12c0c:	6f 93       	push	r22
      asm( "push r23");
   12c0e:	7f 93       	push	r23
      asm( "push r24");
   12c10:	8f 93       	push	r24
      asm( "push r25");
   12c12:	9f 93       	push	r25
      asm( "push r26");
   12c14:	af 93       	push	r26
      asm( "push r27");
   12c16:	bf 93       	push	r27
      asm( "push r28");
   12c18:	cf 93       	push	r28
      asm( "push r29");
   12c1a:	df 93       	push	r29
      asm( "push r30");
   12c1c:	ef 93       	push	r30
      asm( "push r31");
   12c1e:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12c20:	e0 91 29 22 	lds	r30, 0x2229
   12c24:	f0 91 2a 22 	lds	r31, 0x222A
   12c28:	06 80       	ldd	r0, Z+6	; 0x06
   12c2a:	f7 81       	ldd	r31, Z+7	; 0x07
   12c2c:	e0 2d       	mov	r30, r0
   12c2e:	01 90       	ld	r0, Z+
   12c30:	f0 81       	ld	r31, Z
   12c32:	e0 2d       	mov	r30, r0
   12c34:	e0 93 bb 25 	sts	0x25BB, r30
   12c38:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   12c3c:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   12c3e:	4e b7       	in	r20, 0x3e	; 62
   12c40:	94 2f       	mov	r25, r20
   12c42:	80 e0       	ldi	r24, 0x00	; 0
   12c44:	30 e0       	ldi	r19, 0x00	; 0
   12c46:	82 2b       	or	r24, r18
   12c48:	93 2b       	or	r25, r19
   12c4a:	81 87       	std	Z+9, r24	; 0x09
   12c4c:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   12c4e:	8f ef       	ldi	r24, 0xFF	; 255
   12c50:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   12c52:	8f e3       	ldi	r24, 0x3F	; 63
   12c54:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   12c56:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   12c5a:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12c5e:	e0 91 29 22 	lds	r30, 0x2229
   12c62:	f0 91 2a 22 	lds	r31, 0x222A
   12c66:	06 80       	ldd	r0, Z+6	; 0x06
   12c68:	f7 81       	ldd	r31, Z+7	; 0x07
   12c6a:	e0 2d       	mov	r30, r0
   12c6c:	01 90       	ld	r0, Z+
   12c6e:	f0 81       	ld	r31, Z
   12c70:	e0 2d       	mov	r30, r0
   12c72:	e0 93 85 25 	sts	0x2585, r30
   12c76:	f0 93 86 25 	sts	0x2586, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   12c7a:	03 84       	ldd	r0, Z+11	; 0x0b
   12c7c:	f4 85       	ldd	r31, Z+12	; 0x0c
   12c7e:	e0 2d       	mov	r30, r0
   12c80:	80 81       	ld	r24, Z
   12c82:	91 81       	ldd	r25, Z+1	; 0x01
   12c84:	8d 5a       	subi	r24, 0xAD	; 173
   12c86:	9e 4d       	sbci	r25, 0xDE	; 222
   12c88:	11 f0       	breq	.+4      	; 0x12c8e <arb_yieldFromSignalIntsOff+0xb4>
   {
      arb_stackOverflow();
   12c8a:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   12c8e:	e0 91 bd 25 	lds	r30, 0x25BD
   12c92:	f0 91 be 25 	lds	r31, 0x25BE
   12c96:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   12c98:	e0 91 29 22 	lds	r30, 0x2229
   12c9c:	f0 91 2a 22 	lds	r31, 0x222A
   12ca0:	06 80       	ldd	r0, Z+6	; 0x06
   12ca2:	f7 81       	ldd	r31, Z+7	; 0x07
   12ca4:	e0 2d       	mov	r30, r0
   12ca6:	01 90       	ld	r0, Z+
   12ca8:	f0 81       	ld	r31, Z
   12caa:	e0 2d       	mov	r30, r0
   12cac:	e0 93 bb 25 	sts	0x25BB, r30
   12cb0:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   12cb4:	81 85       	ldd	r24, Z+9	; 0x09
   12cb6:	92 85       	ldd	r25, Z+10	; 0x0a
   12cb8:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   12cba:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   12cbc:	ff 91       	pop	r31
      asm( "pop r30");
   12cbe:	ef 91       	pop	r30
      asm( "pop r29");
   12cc0:	df 91       	pop	r29
      asm( "pop r28");
   12cc2:	cf 91       	pop	r28
      asm( "pop r27");
   12cc4:	bf 91       	pop	r27
      asm( "pop r26");
   12cc6:	af 91       	pop	r26
      asm( "pop r25");
   12cc8:	9f 91       	pop	r25
      asm( "pop r24");
   12cca:	8f 91       	pop	r24
      asm( "pop r23");
   12ccc:	7f 91       	pop	r23
      asm( "pop r22");
   12cce:	6f 91       	pop	r22
      asm( "pop r21");
   12cd0:	5f 91       	pop	r21
      asm( "pop r20");
   12cd2:	4f 91       	pop	r20
      asm( "pop r19");
   12cd4:	3f 91       	pop	r19
      asm( "pop r18");
   12cd6:	2f 91       	pop	r18
      asm( "pop r17");
   12cd8:	1f 91       	pop	r17
      asm( "pop r16");
   12cda:	0f 91       	pop	r16
      asm( "pop r15");
   12cdc:	ff 90       	pop	r15
      asm( "pop r14");
   12cde:	ef 90       	pop	r14
      asm( "pop r13");
   12ce0:	df 90       	pop	r13
      asm( "pop r12");
   12ce2:	cf 90       	pop	r12
      asm( "pop r11");
   12ce4:	bf 90       	pop	r11
      asm( "pop r10");
   12ce6:	af 90       	pop	r10
      asm( "pop r9");
   12ce8:	9f 90       	pop	r9
      asm( "pop r8");
   12cea:	8f 90       	pop	r8
      asm( "pop r7");
   12cec:	7f 90       	pop	r7
      asm( "pop r6");
   12cee:	6f 90       	pop	r6
      asm( "pop r5");
   12cf0:	5f 90       	pop	r5
      asm( "pop r4");
   12cf2:	4f 90       	pop	r4
      asm( "pop r3");
   12cf4:	3f 90       	pop	r3
      asm( "pop r2");
   12cf6:	2f 90       	pop	r2
      asm( "pop r1");
   12cf8:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12cfa:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   12cfc:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   12cfe:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   12d00:	08 95       	ret

00012d02 <arb_signal>:
   return ARB_PASSED;

}/*End arb_wait( )*/

t_error arb_signal( t_SEMHANDLE t_semHandle)
{
   12d02:	0f 93       	push	r16
   12d04:	1f 93       	push	r17
   12d06:	df 93       	push	r29
   12d08:	cf 93       	push	r28
   12d0a:	cd b7       	in	r28, 0x3d	; 61
   12d0c:	de b7       	in	r29, 0x3e	; 62
   12d0e:	28 97       	sbiw	r28, 0x08	; 8
   12d10:	cd bf       	out	0x3d, r28	; 61
   12d12:	de bf       	out	0x3e, r29	; 62
   12d14:	8f 83       	std	Y+7, r24	; 0x07
   12d16:	98 87       	std	Y+8, r25	; 0x08
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is larger enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( HAL_ARE_INTS_EN()) /*Interrupts enabled?*/
   12d18:	0f b6       	in	r0, 0x3f	; 63
   12d1a:	07 fe       	sbrs	r0, 7
   12d1c:	e3 c0       	rjmp	.+454    	; 0x12ee4 <arb_signal+0x1e2>
   {
      /*---------------------------------------------------------------------*
       * Mutual exclusion
       *---------------------------------------------------------------------*/
      HAL_CLI();
   12d1e:	f8 94       	cli

      /*---------------------------------------------------------------------*
       * Is this semaphore valid?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   12d20:	ef 81       	ldd	r30, Y+7	; 0x07
   12d22:	f8 85       	ldd	r31, Y+8	; 0x08
   12d24:	20 91 1a 22 	lds	r18, 0x221A
   12d28:	30 91 1b 22 	lds	r19, 0x221B
   12d2c:	84 81       	ldd	r24, Z+4	; 0x04
   12d2e:	95 81       	ldd	r25, Z+5	; 0x05
   12d30:	82 17       	cp	r24, r18
   12d32:	93 07       	cpc	r25, r19
   12d34:	11 f0       	breq	.+4      	; 0x12d3a <arb_signal+0x38>
      false)
      {
         HAL_SEI();
   12d36:	78 94       	sei
   12d38:	e0 c0       	rjmp	.+448    	; 0x12efa <arb_signal+0x1f8>
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   12d3a:	ef 81       	ldd	r30, Y+7	; 0x07
   12d3c:	f8 85       	ldd	r31, Y+8	; 0x08
   12d3e:	a0 81       	ld	r26, Z
   12d40:	b1 81       	ldd	r27, Z+1	; 0x01
   12d42:	a0 93 83 25 	sts	0x2583, r26
   12d46:	b0 93 84 25 	sts	0x2584, r27
      t_semHandle);

      /*---------------------------------------------------------------------*
       * Remove a thread from the waiting count.
       *---------------------------------------------------------------------*/
      gpt_currentSem->s_count++;
   12d4a:	11 96       	adiw	r26, 0x01	; 1
   12d4c:	8d 91       	ld	r24, X+
   12d4e:	9c 91       	ld	r25, X
   12d50:	12 97       	sbiw	r26, 0x02	; 2
   12d52:	01 96       	adiw	r24, 0x01	; 1
   12d54:	11 96       	adiw	r26, 0x01	; 1
   12d56:	8d 93       	st	X+, r24
   12d58:	9c 93       	st	X, r25
   12d5a:	12 97       	sbiw	r26, 0x02	; 2

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   12d5c:	18 16       	cp	r1, r24
   12d5e:	19 06       	cpc	r1, r25
   12d60:	0c f4       	brge	.+2      	; 0x12d64 <arb_signal+0x62>
   12d62:	be c0       	rjmp	.+380    	; 0x12ee0 <arb_signal+0x1de>
   12d64:	13 96       	adiw	r26, 0x03	; 3
   12d66:	ed 91       	ld	r30, X+
   12d68:	fc 91       	ld	r31, X
   12d6a:	14 97       	sbiw	r26, 0x04	; 4
   12d6c:	82 81       	ldd	r24, Z+2	; 0x02
   12d6e:	93 81       	ldd	r25, Z+3	; 0x03
   12d70:	89 2b       	or	r24, r25
   12d72:	09 f4       	brne	.+2      	; 0x12d76 <arb_signal+0x74>
   12d74:	b5 c0       	rjmp	.+362    	; 0x12ee0 <arb_signal+0x1de>

         /*------------------------------------------------------------------*
          * Find the thread with the highest priority on the blocked
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
   12d76:	13 96       	adiw	r26, 0x03	; 3
   12d78:	ed 91       	ld	r30, X+
   12d7a:	fc 91       	ld	r31, X
   12d7c:	14 97       	sbiw	r26, 0x04	; 4
   12d7e:	80 85       	ldd	r24, Z+8	; 0x08
   12d80:	91 85       	ldd	r25, Z+9	; 0x09
   12d82:	8b 83       	std	Y+3, r24	; 0x03
   12d84:	9c 83       	std	Y+4, r25	; 0x04
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12d86:	eb 81       	ldd	r30, Y+3	; 0x03
   12d88:	fc 81       	ldd	r31, Y+4	; 0x04
         s_highest = pt_temp->t_priority;
   12d8a:	01 90       	ld	r0, Z+
   12d8c:	f0 81       	ld	r31, Z
   12d8e:	e0 2d       	mov	r30, r0
   12d90:	82 81       	ldd	r24, Z+2	; 0x02
   12d92:	48 2f       	mov	r20, r24
   12d94:	50 e0       	ldi	r21, 0x00	; 0
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12d96:	13 96       	adiw	r26, 0x03	; 3
   12d98:	ed 91       	ld	r30, X+
   12d9a:	fc 91       	ld	r31, X
   12d9c:	14 97       	sbiw	r26, 0x04	; 4
   12d9e:	62 81       	ldd	r22, Z+2	; 0x02
   12da0:	73 81       	ldd	r23, Z+3	; 0x03
   12da2:	13 96       	adiw	r26, 0x03	; 3
   12da4:	ed 91       	ld	r30, X+
   12da6:	fc 91       	ld	r31, X
   12da8:	14 97       	sbiw	r26, 0x04	; 4
   12daa:	80 85       	ldd	r24, Z+8	; 0x08
   12dac:	91 85       	ldd	r25, Z+9	; 0x09
   12dae:	89 83       	std	Y+1, r24	; 0x01
   12db0:	9a 83       	std	Y+2, r25	; 0x02
   12db2:	1a c0       	rjmp	.+52     	; 0x12de8 <arb_signal+0xe6>
         s_count)
         {
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12db4:	e9 81       	ldd	r30, Y+1	; 0x01
   12db6:	fa 81       	ldd	r31, Y+2	; 0x02
            if( pt_temp->t_priority < s_highest)
   12db8:	01 90       	ld	r0, Z+
   12dba:	f0 81       	ld	r31, Z
   12dbc:	e0 2d       	mov	r30, r0
   12dbe:	82 81       	ldd	r24, Z+2	; 0x02
   12dc0:	28 2f       	mov	r18, r24
   12dc2:	30 e0       	ldi	r19, 0x00	; 0
   12dc4:	24 17       	cp	r18, r20
   12dc6:	35 07       	cpc	r19, r21
   12dc8:	10 f0       	brcs	.+4      	; 0x12dce <arb_signal+0xcc>
   12dca:	9a 01       	movw	r18, r20
   12dcc:	04 c0       	rjmp	.+8      	; 0x12dd6 <arb_signal+0xd4>
            {
               s_highest = pt_temp->t_priority;
               t_highest = t_curr;
   12dce:	89 81       	ldd	r24, Y+1	; 0x01
   12dd0:	9a 81       	ldd	r25, Y+2	; 0x02
   12dd2:	8b 83       	std	Y+3, r24	; 0x03
   12dd4:	9c 83       	std	Y+4, r25	; 0x04
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
         s_highest = pt_temp->t_priority;
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12dd6:	61 50       	subi	r22, 0x01	; 1
   12dd8:	70 40       	sbci	r23, 0x00	; 0
   12dda:	e9 81       	ldd	r30, Y+1	; 0x01
   12ddc:	fa 81       	ldd	r31, Y+2	; 0x02
   12dde:	80 85       	ldd	r24, Z+8	; 0x08
   12de0:	91 85       	ldd	r25, Z+9	; 0x09
   12de2:	89 83       	std	Y+1, r24	; 0x01
   12de4:	9a 83       	std	Y+2, r25	; 0x02
   12de6:	a9 01       	movw	r20, r18
   12de8:	61 15       	cp	r22, r1
   12dea:	71 05       	cpc	r23, r1
   12dec:	19 f7       	brne	.-58     	; 0x12db4 <arb_signal+0xb2>

         /*------------------------------------------------------------------*
          * Only move the highest priority thread off the blocked list and
          * insert back on the active list.
          *------------------------------------------------------------------*/
         if( gpt_currentSem->t_type != SIGNAL) /*Remove highest...*/
   12dee:	8c 91       	ld	r24, X
   12df0:	81 30       	cpi	r24, 0x01	; 1
   12df2:	c1 f0       	breq	.+48     	; 0x12e24 <arb_signal+0x122>
         {
            /*---------------------------------------------------------------*
             * Change the status of the highest priority thread on the
             * blocked list to READY.
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12df4:	eb 81       	ldd	r30, Y+3	; 0x03
   12df6:	fc 81       	ldd	r31, Y+4	; 0x04
            pt_temp->t_status = READY;
   12df8:	01 90       	ld	r0, Z+
   12dfa:	f0 81       	ld	r31, Z
   12dfc:	e0 2d       	mov	r30, r0
   12dfe:	11 82       	std	Z+1, r1	; 0x01

            /*---------------------------------------------------------------*
             * Remove the highest priority thread from the blocked list
             *---------------------------------------------------------------*/
            t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   12e00:	13 96       	adiw	r26, 0x03	; 3
   12e02:	8d 91       	ld	r24, X+
   12e04:	9c 91       	ld	r25, X
   12e06:	14 97       	sbiw	r26, 0x04	; 4
   12e08:	6b 81       	ldd	r22, Y+3	; 0x03
   12e0a:	7c 81       	ldd	r23, Y+4	; 0x04
   12e0c:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
                                          t_highest);

            /*---------------------------------------------------------------*
             * Insert this thread onto the active list.
             *---------------------------------------------------------------*/
            t_linkError = utl_insertLink( gt_activeThreads,
   12e10:	80 91 29 22 	lds	r24, 0x2229
   12e14:	90 91 2a 22 	lds	r25, 0x222A
   12e18:	6b 81       	ldd	r22, Y+3	; 0x03
   12e1a:	7c 81       	ldd	r23, Y+4	; 0x04
   12e1c:	41 e0       	ldi	r20, 0x01	; 1
   12e1e:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   12e22:	3f c0       	rjmp	.+126    	; 0x12ea2 <arb_signal+0x1a0>
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12e24:	13 96       	adiw	r26, 0x03	; 3
   12e26:	ed 91       	ld	r30, X+
   12e28:	fc 91       	ld	r31, X
   12e2a:	14 97       	sbiw	r26, 0x04	; 4
   12e2c:	02 81       	ldd	r16, Z+2	; 0x02
   12e2e:	13 81       	ldd	r17, Z+3	; 0x03
   12e30:	13 96       	adiw	r26, 0x03	; 3
   12e32:	ed 91       	ld	r30, X+
   12e34:	fc 91       	ld	r31, X
   12e36:	14 97       	sbiw	r26, 0x04	; 4
   12e38:	25 c0       	rjmp	.+74     	; 0x12e84 <arb_signal+0x182>
            s_count)
            {
               pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12e3a:	e9 81       	ldd	r30, Y+1	; 0x01
   12e3c:	fa 81       	ldd	r31, Y+2	; 0x02

               pt_temp->t_status = READY;
   12e3e:	01 90       	ld	r0, Z+
   12e40:	f0 81       	ld	r31, Z
   12e42:	e0 2d       	mov	r30, r0
   12e44:	11 82       	std	Z+1, r1	; 0x01

               t_prevLink = UTL_GET_PREV_LINK( t_curr);
   12e46:	e9 81       	ldd	r30, Y+1	; 0x01
   12e48:	fa 81       	ldd	r31, Y+2	; 0x02
   12e4a:	82 85       	ldd	r24, Z+10	; 0x0a
   12e4c:	93 85       	ldd	r25, Z+11	; 0x0b
   12e4e:	8d 83       	std	Y+5, r24	; 0x05
   12e50:	9e 83       	std	Y+6, r25	; 0x06

               t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   12e52:	13 96       	adiw	r26, 0x03	; 3
   12e54:	8d 91       	ld	r24, X+
   12e56:	9c 91       	ld	r25, X
   12e58:	14 97       	sbiw	r26, 0x04	; 4
   12e5a:	69 81       	ldd	r22, Y+1	; 0x01
   12e5c:	7a 81       	ldd	r23, Y+2	; 0x02
   12e5e:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
                                             t_curr);

               t_linkError = utl_insertLink( gt_activeThreads,
   12e62:	80 91 29 22 	lds	r24, 0x2229
   12e66:	90 91 2a 22 	lds	r25, 0x222A
   12e6a:	69 81       	ldd	r22, Y+1	; 0x01
   12e6c:	7a 81       	ldd	r23, Y+2	; 0x02
   12e6e:	41 e0       	ldi	r20, 0x01	; 1
   12e70:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                                             t_curr,
                                             true);
               t_curr = t_prevLink;
   12e74:	8d 81       	ldd	r24, Y+5	; 0x05
   12e76:	9e 81       	ldd	r25, Y+6	; 0x06
   12e78:	89 83       	std	Y+1, r24	; 0x01
   12e7a:	9a 83       	std	Y+2, r25	; 0x02
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12e7c:	01 50       	subi	r16, 0x01	; 1
   12e7e:	10 40       	sbci	r17, 0x00	; 0
   12e80:	e9 81       	ldd	r30, Y+1	; 0x01
   12e82:	fa 81       	ldd	r31, Y+2	; 0x02
   12e84:	80 85       	ldd	r24, Z+8	; 0x08
   12e86:	91 85       	ldd	r25, Z+9	; 0x09
   12e88:	89 83       	std	Y+1, r24	; 0x01
   12e8a:	9a 83       	std	Y+2, r25	; 0x02
   12e8c:	a0 91 83 25 	lds	r26, 0x2583
   12e90:	b0 91 84 25 	lds	r27, 0x2584
   12e94:	01 15       	cp	r16, r1
   12e96:	11 05       	cpc	r17, r1
   12e98:	81 f6       	brne	.-96     	; 0x12e3a <arb_signal+0x138>

            /*---------------------------------------------------------------*
             * Since we removed all the threads from the blocked list, set
             * the count back to 0.
             *---------------------------------------------------------------*/
            gpt_currentSem->s_count = 0;
   12e9a:	11 96       	adiw	r26, 0x01	; 1
   12e9c:	1d 92       	st	X+, r1
   12e9e:	1c 92       	st	X, r1
   12ea0:	12 97       	sbiw	r26, 0x02	; 2
         /*------------------------------------------------------------------*
          * If the highest priority thread we removed from the BLOCKED list
          * has a higher priority then the current running thread then
          * suspend the current thread.
          *------------------------------------------------------------------*/
         pt_temp  = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12ea2:	ab 81       	ldd	r26, Y+3	; 0x03
   12ea4:	bc 81       	ldd	r27, Y+4	; 0x04
         pt_temp2 = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   12ea6:	e0 91 29 22 	lds	r30, 0x2229
   12eaa:	f0 91 2a 22 	lds	r31, 0x222A
   12eae:	06 80       	ldd	r0, Z+6	; 0x06
   12eb0:	f7 81       	ldd	r31, Z+7	; 0x07
   12eb2:	e0 2d       	mov	r30, r0
   12eb4:	20 81       	ld	r18, Z
   12eb6:	31 81       	ldd	r19, Z+1	; 0x01
         (gt_activeThreads);
         if( pt_temp->t_priority <= pt_temp2->t_priority)
   12eb8:	ed 91       	ld	r30, X+
   12eba:	fc 91       	ld	r31, X
   12ebc:	92 81       	ldd	r25, Z+2	; 0x02
   12ebe:	f9 01       	movw	r30, r18
   12ec0:	82 81       	ldd	r24, Z+2	; 0x02
   12ec2:	89 17       	cp	r24, r25
   12ec4:	58 f0       	brcs	.+22     	; 0x12edc <arb_signal+0x1da>
         {

            /*---------------------------------------------------------------*
             * Change the status of the current thread from active to READY.
             *---------------------------------------------------------------*/
            pt_temp2->t_status = READY;
   12ec6:	11 82       	std	Z+1, r1	; 0x01
             * thread. Calling yield will cause the signaling thread to
             * give up its time slice and allow the next higher priority
             * thread (which should be the one we just removed from the
             * BLOCKED list) to run.
             *---------------------------------------------------------------*/
            if( HAL_IS_ACTIVE_INT() > 0)
   12ec8:	80 91 a0 00 	lds	r24, 0x00A0
   12ecc:	88 23       	and	r24, r24
   12ece:	19 f0       	breq	.+6      	; 0x12ed6 <arb_signal+0x1d4>
               /*------------------------------------------------------------*
                * This routine was called from an active interrupt.
                * Therefore, we are calling a special yield function that
                * re enables interrupts when it switches in a new thread.
                *------------------------------------------------------------*/
               arb_yieldFromSignalActiveInt();
   12ed0:	0e 94 bb 94 	call	0x12976	; 0x12976 <arb_yieldFromSignalActiveInt>
   12ed4:	dd c0       	rjmp	.+442    	; 0x13090 <arb_signal+0x38e>
            }/*End if( HAL_IS_ACTIVE_INT > 0)*/
            else
            {
               arb_yieldFromSignalIntsOn();
   12ed6:	0e 94 54 95 	call	0x12aa8	; 0x12aa8 <arb_yieldFromSignalIntsOn>
   12eda:	da c0       	rjmp	.+436    	; 0x13090 <arb_signal+0x38e>
             *---------------------------------------------------------------*/

         }
         else
         {
            HAL_SEI();
   12edc:	78 94       	sei
   12ede:	d8 c0       	rjmp	.+432    	; 0x13090 <arb_signal+0x38e>
         }

      }/*End if( gpt_currentSem->s_count <= 0)*/
      else
      {
         HAL_SEI();
   12ee0:	78 94       	sei
   12ee2:	d6 c0       	rjmp	.+428    	; 0x13090 <arb_signal+0x38e>

   }/*End if( HAL_ARE_INTS_EN())*/
   else
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   12ee4:	ef 81       	ldd	r30, Y+7	; 0x07
   12ee6:	f8 85       	ldd	r31, Y+8	; 0x08
   12ee8:	20 91 1a 22 	lds	r18, 0x221A
   12eec:	30 91 1b 22 	lds	r19, 0x221B
   12ef0:	84 81       	ldd	r24, Z+4	; 0x04
   12ef2:	95 81       	ldd	r25, Z+5	; 0x05
   12ef4:	82 17       	cp	r24, r18
   12ef6:	93 07       	cpc	r25, r19
   12ef8:	11 f0       	breq	.+4      	; 0x12efe <arb_signal+0x1fc>
   12efa:	89 ef       	ldi	r24, 0xF9	; 249
   12efc:	ca c0       	rjmp	.+404    	; 0x13092 <arb_signal+0x390>
      false)
      {
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   12efe:	ef 81       	ldd	r30, Y+7	; 0x07
   12f00:	f8 85       	ldd	r31, Y+8	; 0x08
   12f02:	a0 81       	ld	r26, Z
   12f04:	b1 81       	ldd	r27, Z+1	; 0x01
   12f06:	a0 93 83 25 	sts	0x2583, r26
   12f0a:	b0 93 84 25 	sts	0x2584, r27
      t_semHandle);

      /*---------------------------------------------------------------------*
       * Remove a thread from the waiting count.
       *---------------------------------------------------------------------*/
      gpt_currentSem->s_count++;
   12f0e:	11 96       	adiw	r26, 0x01	; 1
   12f10:	8d 91       	ld	r24, X+
   12f12:	9c 91       	ld	r25, X
   12f14:	12 97       	sbiw	r26, 0x02	; 2
   12f16:	01 96       	adiw	r24, 0x01	; 1
   12f18:	11 96       	adiw	r26, 0x01	; 1
   12f1a:	8d 93       	st	X+, r24
   12f1c:	9c 93       	st	X, r25
   12f1e:	12 97       	sbiw	r26, 0x02	; 2

      /*---------------------------------------------------------------------*
       * Are there threads waiting on this semaphore, if so then wake
       * according to priority.
       *---------------------------------------------------------------------*/
      if( (gpt_currentSem->s_count <= 0) &&
   12f20:	18 16       	cp	r1, r24
   12f22:	19 06       	cpc	r1, r25
   12f24:	0c f4       	brge	.+2      	; 0x12f28 <arb_signal+0x226>
   12f26:	b4 c0       	rjmp	.+360    	; 0x13090 <arb_signal+0x38e>
   12f28:	13 96       	adiw	r26, 0x03	; 3
   12f2a:	ed 91       	ld	r30, X+
   12f2c:	fc 91       	ld	r31, X
   12f2e:	14 97       	sbiw	r26, 0x04	; 4
   12f30:	82 81       	ldd	r24, Z+2	; 0x02
   12f32:	93 81       	ldd	r25, Z+3	; 0x03
   12f34:	89 2b       	or	r24, r25
   12f36:	09 f4       	brne	.+2      	; 0x12f3a <arb_signal+0x238>
   12f38:	ab c0       	rjmp	.+342    	; 0x13090 <arb_signal+0x38e>
      {
         /*------------------------------------------------------------------*
          * Find the thread with the highest priority on the blocked
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
   12f3a:	13 96       	adiw	r26, 0x03	; 3
   12f3c:	ed 91       	ld	r30, X+
   12f3e:	fc 91       	ld	r31, X
   12f40:	14 97       	sbiw	r26, 0x04	; 4
   12f42:	80 85       	ldd	r24, Z+8	; 0x08
   12f44:	91 85       	ldd	r25, Z+9	; 0x09
   12f46:	8b 83       	std	Y+3, r24	; 0x03
   12f48:	9c 83       	std	Y+4, r25	; 0x04
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12f4a:	eb 81       	ldd	r30, Y+3	; 0x03
   12f4c:	fc 81       	ldd	r31, Y+4	; 0x04
         s_highest = pt_temp->t_priority;
   12f4e:	01 90       	ld	r0, Z+
   12f50:	f0 81       	ld	r31, Z
   12f52:	e0 2d       	mov	r30, r0
   12f54:	82 81       	ldd	r24, Z+2	; 0x02
   12f56:	48 2f       	mov	r20, r24
   12f58:	50 e0       	ldi	r21, 0x00	; 0
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12f5a:	13 96       	adiw	r26, 0x03	; 3
   12f5c:	ed 91       	ld	r30, X+
   12f5e:	fc 91       	ld	r31, X
   12f60:	14 97       	sbiw	r26, 0x04	; 4
   12f62:	62 81       	ldd	r22, Z+2	; 0x02
   12f64:	73 81       	ldd	r23, Z+3	; 0x03
   12f66:	13 96       	adiw	r26, 0x03	; 3
   12f68:	ed 91       	ld	r30, X+
   12f6a:	fc 91       	ld	r31, X
   12f6c:	14 97       	sbiw	r26, 0x04	; 4
   12f6e:	80 85       	ldd	r24, Z+8	; 0x08
   12f70:	91 85       	ldd	r25, Z+9	; 0x09
   12f72:	89 83       	std	Y+1, r24	; 0x01
   12f74:	9a 83       	std	Y+2, r25	; 0x02
   12f76:	1a c0       	rjmp	.+52     	; 0x12fac <arb_signal+0x2aa>
         s_count)
         {
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12f78:	e9 81       	ldd	r30, Y+1	; 0x01
   12f7a:	fa 81       	ldd	r31, Y+2	; 0x02
            if( pt_temp->t_priority < s_highest)
   12f7c:	01 90       	ld	r0, Z+
   12f7e:	f0 81       	ld	r31, Z
   12f80:	e0 2d       	mov	r30, r0
   12f82:	82 81       	ldd	r24, Z+2	; 0x02
   12f84:	28 2f       	mov	r18, r24
   12f86:	30 e0       	ldi	r19, 0x00	; 0
   12f88:	24 17       	cp	r18, r20
   12f8a:	35 07       	cpc	r19, r21
   12f8c:	10 f0       	brcs	.+4      	; 0x12f92 <arb_signal+0x290>
   12f8e:	9a 01       	movw	r18, r20
   12f90:	04 c0       	rjmp	.+8      	; 0x12f9a <arb_signal+0x298>
            {
               s_highest = pt_temp->t_priority;
               t_highest = t_curr;
   12f92:	89 81       	ldd	r24, Y+1	; 0x01
   12f94:	9a 81       	ldd	r25, Y+2	; 0x02
   12f96:	8b 83       	std	Y+3, r24	; 0x03
   12f98:	9c 83       	std	Y+4, r25	; 0x04
          * list for this semaphore.
          *------------------------------------------------------------------*/
         t_highest = UTL_GET_HEAD_OF_CONT( gpt_currentSem->t_blockedList);
         pt_temp   = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
         s_highest = pt_temp->t_priority;
         UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12f9a:	61 50       	subi	r22, 0x01	; 1
   12f9c:	70 40       	sbci	r23, 0x00	; 0
   12f9e:	e9 81       	ldd	r30, Y+1	; 0x01
   12fa0:	fa 81       	ldd	r31, Y+2	; 0x02
   12fa2:	80 85       	ldd	r24, Z+8	; 0x08
   12fa4:	91 85       	ldd	r25, Z+9	; 0x09
   12fa6:	89 83       	std	Y+1, r24	; 0x01
   12fa8:	9a 83       	std	Y+2, r25	; 0x02
   12faa:	a9 01       	movw	r20, r18
   12fac:	61 15       	cp	r22, r1
   12fae:	71 05       	cpc	r23, r1
   12fb0:	19 f7       	brne	.-58     	; 0x12f78 <arb_signal+0x276>

         /*------------------------------------------------------------------*
          * Only move the highest priority thread off the blocked list and
          * insert back on the active list.
          *------------------------------------------------------------------*/
         if( gpt_currentSem->t_type != SIGNAL)
   12fb2:	8c 91       	ld	r24, X
   12fb4:	81 30       	cpi	r24, 0x01	; 1
   12fb6:	c1 f0       	breq	.+48     	; 0x12fe8 <arb_signal+0x2e6>
         {
            /*---------------------------------------------------------------*
             * Change the status of the highest priority thread on the
             * blocked list to READY.
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   12fb8:	eb 81       	ldd	r30, Y+3	; 0x03
   12fba:	fc 81       	ldd	r31, Y+4	; 0x04
            pt_temp->t_status = READY;
   12fbc:	01 90       	ld	r0, Z+
   12fbe:	f0 81       	ld	r31, Z
   12fc0:	e0 2d       	mov	r30, r0
   12fc2:	11 82       	std	Z+1, r1	; 0x01

            /*---------------------------------------------------------------*
             * Remove the highest priority thread from the blocked list
             *---------------------------------------------------------------*/
            t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   12fc4:	13 96       	adiw	r26, 0x03	; 3
   12fc6:	8d 91       	ld	r24, X+
   12fc8:	9c 91       	ld	r25, X
   12fca:	14 97       	sbiw	r26, 0x04	; 4
   12fcc:	6b 81       	ldd	r22, Y+3	; 0x03
   12fce:	7c 81       	ldd	r23, Y+4	; 0x04
   12fd0:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
                                          t_highest);

            /*---------------------------------------------------------------*
             * Insert this thread onto the active list.
             *---------------------------------------------------------------*/
            t_linkError = utl_insertLink( gt_activeThreads,
   12fd4:	80 91 29 22 	lds	r24, 0x2229
   12fd8:	90 91 2a 22 	lds	r25, 0x222A
   12fdc:	6b 81       	ldd	r22, Y+3	; 0x03
   12fde:	7c 81       	ldd	r23, Y+4	; 0x04
   12fe0:	41 e0       	ldi	r20, 0x01	; 1
   12fe2:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   12fe6:	3f c0       	rjmp	.+126    	; 0x13066 <arb_signal+0x364>
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   12fe8:	13 96       	adiw	r26, 0x03	; 3
   12fea:	ed 91       	ld	r30, X+
   12fec:	fc 91       	ld	r31, X
   12fee:	14 97       	sbiw	r26, 0x04	; 4
   12ff0:	02 81       	ldd	r16, Z+2	; 0x02
   12ff2:	13 81       	ldd	r17, Z+3	; 0x03
   12ff4:	13 96       	adiw	r26, 0x03	; 3
   12ff6:	ed 91       	ld	r30, X+
   12ff8:	fc 91       	ld	r31, X
   12ffa:	14 97       	sbiw	r26, 0x04	; 4
   12ffc:	25 c0       	rjmp	.+74     	; 0x13048 <arb_signal+0x346>
            s_count)
            {
               pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_curr);
   12ffe:	e9 81       	ldd	r30, Y+1	; 0x01
   13000:	fa 81       	ldd	r31, Y+2	; 0x02

               pt_temp->t_status = READY;
   13002:	01 90       	ld	r0, Z+
   13004:	f0 81       	ld	r31, Z
   13006:	e0 2d       	mov	r30, r0
   13008:	11 82       	std	Z+1, r1	; 0x01

               t_prevLink = UTL_GET_PREV_LINK( t_curr);
   1300a:	e9 81       	ldd	r30, Y+1	; 0x01
   1300c:	fa 81       	ldd	r31, Y+2	; 0x02
   1300e:	82 85       	ldd	r24, Z+10	; 0x0a
   13010:	93 85       	ldd	r25, Z+11	; 0x0b
   13012:	8d 83       	std	Y+5, r24	; 0x05
   13014:	9e 83       	std	Y+6, r25	; 0x06

               t_linkError = utl_removeLink( gpt_currentSem->t_blockedList,
   13016:	13 96       	adiw	r26, 0x03	; 3
   13018:	8d 91       	ld	r24, X+
   1301a:	9c 91       	ld	r25, X
   1301c:	14 97       	sbiw	r26, 0x04	; 4
   1301e:	69 81       	ldd	r22, Y+1	; 0x01
   13020:	7a 81       	ldd	r23, Y+2	; 0x02
   13022:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
                                             t_curr);

               t_linkError = utl_insertLink( gt_activeThreads,
   13026:	80 91 29 22 	lds	r24, 0x2229
   1302a:	90 91 2a 22 	lds	r25, 0x222A
   1302e:	69 81       	ldd	r22, Y+1	; 0x01
   13030:	7a 81       	ldd	r23, Y+2	; 0x02
   13032:	41 e0       	ldi	r20, 0x01	; 1
   13034:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                                             t_curr,
                                             true);
               t_curr = t_prevLink;
   13038:	8d 81       	ldd	r24, Y+5	; 0x05
   1303a:	9e 81       	ldd	r25, Y+6	; 0x06
   1303c:	89 83       	std	Y+1, r24	; 0x01
   1303e:	9a 83       	std	Y+2, r25	; 0x02
             * t_curr once its deleted the loop will not be unable to move to
             * the next ptr location. This issue is resolved by using a
             * previous ptr to change t_curr back to a valid location once an
             * item has been removed.
             *----------------------------------------------------------------*/
            UTL_TRAVERSE_CONTAINER_HEAD( t_curr, gpt_currentSem->t_blockedList,\
   13040:	01 50       	subi	r16, 0x01	; 1
   13042:	10 40       	sbci	r17, 0x00	; 0
   13044:	e9 81       	ldd	r30, Y+1	; 0x01
   13046:	fa 81       	ldd	r31, Y+2	; 0x02
   13048:	80 85       	ldd	r24, Z+8	; 0x08
   1304a:	91 85       	ldd	r25, Z+9	; 0x09
   1304c:	89 83       	std	Y+1, r24	; 0x01
   1304e:	9a 83       	std	Y+2, r25	; 0x02
   13050:	a0 91 83 25 	lds	r26, 0x2583
   13054:	b0 91 84 25 	lds	r27, 0x2584
   13058:	01 15       	cp	r16, r1
   1305a:	11 05       	cpc	r17, r1
   1305c:	81 f6       	brne	.-96     	; 0x12ffe <arb_signal+0x2fc>

            /*---------------------------------------------------------------*
             * Since we removed all the threads from the blocked list, set
             * the count back to 0.
             *---------------------------------------------------------------*/
            gpt_currentSem->s_count = 0;
   1305e:	11 96       	adiw	r26, 0x01	; 1
   13060:	1d 92       	st	X+, r1
   13062:	1c 92       	st	X, r1
   13064:	12 97       	sbiw	r26, 0x02	; 2
         /*------------------------------------------------------------------*
          * If the highest priority thread we removed from the BLOCKED list
          * has a higher priority then the current running thread then
          * suspend the current thread.
          *------------------------------------------------------------------*/
         pt_temp  = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_highest);
   13066:	ab 81       	ldd	r26, Y+3	; 0x03
   13068:	bc 81       	ldd	r27, Y+4	; 0x04
         pt_temp2 = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   1306a:	e0 91 29 22 	lds	r30, 0x2229
   1306e:	f0 91 2a 22 	lds	r31, 0x222A
   13072:	06 80       	ldd	r0, Z+6	; 0x06
   13074:	f7 81       	ldd	r31, Z+7	; 0x07
   13076:	e0 2d       	mov	r30, r0
   13078:	20 81       	ld	r18, Z
   1307a:	31 81       	ldd	r19, Z+1	; 0x01
         (gt_activeThreads);
         if( pt_temp->t_priority <= pt_temp2->t_priority)
   1307c:	ed 91       	ld	r30, X+
   1307e:	fc 91       	ld	r31, X
   13080:	92 81       	ldd	r25, Z+2	; 0x02
   13082:	f9 01       	movw	r30, r18
   13084:	82 81       	ldd	r24, Z+2	; 0x02
   13086:	89 17       	cp	r24, r25
   13088:	18 f0       	brcs	.+6      	; 0x13090 <arb_signal+0x38e>
         {

            /*---------------------------------------------------------------*
             * Change the status of the current thread from active to READY.
             *---------------------------------------------------------------*/
            pt_temp2->t_status = READY;
   1308a:	11 82       	std	Z+1, r1	; 0x01
             * thread. Calling yield will cause the signaling thread to
             * give up its time slice and allow the next higher priority
             * thread (which should be the one we just removed from the
             * BLOCKED list) to run.
             *---------------------------------------------------------------*/
            arb_yieldFromSignalIntsOff();
   1308c:	0e 94 ed 95 	call	0x12bda	; 0x12bda <arb_yieldFromSignalIntsOff>
   13090:	80 e0       	ldi	r24, 0x00	; 0
    * Since the call into 'signal' wasn't 'naked' we will let the compiler
    * return us to the calling thread's next program counter location.
    *------------------------------------------------------------------------*/
   return ARB_PASSED;

}/*End arb_signal( t_SEMHANDLE *pt_semHandle)*/
   13092:	28 96       	adiw	r28, 0x08	; 8
   13094:	cd bf       	out	0x3d, r28	; 61
   13096:	de bf       	out	0x3e, r29	; 62
   13098:	cf 91       	pop	r28
   1309a:	df 91       	pop	r29
   1309c:	1f 91       	pop	r17
   1309e:	0f 91       	pop	r16
   130a0:	08 95       	ret

000130a2 <arb_yieldFromWaitIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   130a2:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   130a4:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   130a6:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   130a8:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   130aa:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   130ac:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   130ae:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   130b0:	0f 92       	push	r0
      asm( "push r1");
   130b2:	1f 92       	push	r1
      asm( "clr r1");
   130b4:	11 24       	eor	r1, r1
      asm( "push r2");
   130b6:	2f 92       	push	r2
      asm( "push r3");
   130b8:	3f 92       	push	r3
      asm( "push r4");
   130ba:	4f 92       	push	r4
      asm( "push r5");
   130bc:	5f 92       	push	r5
      asm( "push r6");
   130be:	6f 92       	push	r6
      asm( "push r7");
   130c0:	7f 92       	push	r7
      asm( "push r8");
   130c2:	8f 92       	push	r8
      asm( "push r9");
   130c4:	9f 92       	push	r9
      asm( "push r10");
   130c6:	af 92       	push	r10
      asm( "push r11");
   130c8:	bf 92       	push	r11
      asm( "push r12");
   130ca:	cf 92       	push	r12
      asm( "push r13");
   130cc:	df 92       	push	r13
      asm( "push r14");
   130ce:	ef 92       	push	r14
      asm( "push r15");
   130d0:	ff 92       	push	r15
      asm( "push r16");
   130d2:	0f 93       	push	r16
      asm( "push r17");
   130d4:	1f 93       	push	r17
      asm( "push r18");
   130d6:	2f 93       	push	r18
      asm( "push r19");
   130d8:	3f 93       	push	r19
      asm( "push r20");
   130da:	4f 93       	push	r20
      asm( "push r21");
   130dc:	5f 93       	push	r21
      asm( "push r22");
   130de:	6f 93       	push	r22
      asm( "push r23");
   130e0:	7f 93       	push	r23
      asm( "push r24");
   130e2:	8f 93       	push	r24
      asm( "push r25");
   130e4:	9f 93       	push	r25
      asm( "push r26");
   130e6:	af 93       	push	r26
      asm( "push r27");
   130e8:	bf 93       	push	r27
      asm( "push r28");
   130ea:	cf 93       	push	r28
      asm( "push r29");
   130ec:	df 93       	push	r29
      asm( "push r30");
   130ee:	ef 93       	push	r30
      asm( "push r31");
   130f0:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   130f2:	e0 91 29 22 	lds	r30, 0x2229
   130f6:	f0 91 2a 22 	lds	r31, 0x222A
   130fa:	06 80       	ldd	r0, Z+6	; 0x06
   130fc:	f7 81       	ldd	r31, Z+7	; 0x07
   130fe:	e0 2d       	mov	r30, r0
   13100:	01 90       	ld	r0, Z+
   13102:	f0 81       	ld	r31, Z
   13104:	e0 2d       	mov	r30, r0
   13106:	e0 93 bb 25 	sts	0x25BB, r30
   1310a:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   1310e:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   13110:	4e b7       	in	r20, 0x3e	; 62
   13112:	94 2f       	mov	r25, r20
   13114:	80 e0       	ldi	r24, 0x00	; 0
   13116:	30 e0       	ldi	r19, 0x00	; 0
   13118:	82 2b       	or	r24, r18
   1311a:	93 2b       	or	r25, r19
   1311c:	81 87       	std	Z+9, r24	; 0x09
   1311e:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13120:	8f ef       	ldi	r24, 0xFF	; 255
   13122:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13124:	8f e3       	ldi	r24, 0x3F	; 63
   13126:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   13128:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1312c:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number that was inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13130:	e0 91 29 22 	lds	r30, 0x2229
   13134:	f0 91 2a 22 	lds	r31, 0x222A
   13138:	06 80       	ldd	r0, Z+6	; 0x06
   1313a:	f7 81       	ldd	r31, Z+7	; 0x07
   1313c:	e0 2d       	mov	r30, r0
   1313e:	01 90       	ld	r0, Z+
   13140:	f0 81       	ld	r31, Z
   13142:	e0 2d       	mov	r30, r0
   13144:	e0 93 85 25 	sts	0x2585, r30
   13148:	f0 93 86 25 	sts	0x2586, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   1314c:	03 84       	ldd	r0, Z+11	; 0x0b
   1314e:	f4 85       	ldd	r31, Z+12	; 0x0c
   13150:	e0 2d       	mov	r30, r0
   13152:	80 81       	ld	r24, Z
   13154:	91 81       	ldd	r25, Z+1	; 0x01
   13156:	8d 5a       	subi	r24, 0xAD	; 173
   13158:	9e 4d       	sbci	r25, 0xDE	; 222
   1315a:	11 f0       	breq	.+4      	; 0x13160 <arb_yieldFromWaitIntsOn+0xbe>
   {
      arb_stackOverflow();
   1315c:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status to BLOCKED.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = BLOCKED;
   13160:	e0 91 85 25 	lds	r30, 0x2585
   13164:	f0 91 86 25 	lds	r31, 0x2586
   13168:	82 e0       	ldi	r24, 0x02	; 2
   1316a:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   1316c:	80 91 29 22 	lds	r24, 0x2229
   13170:	90 91 2a 22 	lds	r25, 0x222A
   13174:	e0 91 29 22 	lds	r30, 0x2229
   13178:	f0 91 2a 22 	lds	r31, 0x222A
   1317c:	66 81       	ldd	r22, Z+6	; 0x06
   1317e:	77 81       	ldd	r23, Z+7	; 0x07
   13180:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
   13184:	80 93 87 25 	sts	0x2587, r24
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   13188:	e0 91 83 25 	lds	r30, 0x2583
   1318c:	f0 91 84 25 	lds	r31, 0x2584
   13190:	83 81       	ldd	r24, Z+3	; 0x03
   13192:	94 81       	ldd	r25, Z+4	; 0x04
   13194:	e0 91 29 22 	lds	r30, 0x2229
   13198:	f0 91 2a 22 	lds	r31, 0x222A
   1319c:	66 81       	ldd	r22, Z+6	; 0x06
   1319e:	77 81       	ldd	r23, Z+7	; 0x07
   131a0:	41 e0       	ldi	r20, 0x01	; 1
   131a2:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   131a6:	80 93 87 25 	sts	0x2587, r24
                                  true);

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   131aa:	e0 91 bd 25 	lds	r30, 0x25BD
   131ae:	f0 91 be 25 	lds	r31, 0x25BE
   131b2:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   131b4:	e0 91 29 22 	lds	r30, 0x2229
   131b8:	f0 91 2a 22 	lds	r31, 0x222A
   131bc:	06 80       	ldd	r0, Z+6	; 0x06
   131be:	f7 81       	ldd	r31, Z+7	; 0x07
   131c0:	e0 2d       	mov	r30, r0
   131c2:	01 90       	ld	r0, Z+
   131c4:	f0 81       	ld	r31, Z
   131c6:	e0 2d       	mov	r30, r0
   131c8:	e0 93 bb 25 	sts	0x25BB, r30
   131cc:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   131d0:	81 85       	ldd	r24, Z+9	; 0x09
   131d2:	92 85       	ldd	r25, Z+10	; 0x0a
   131d4:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   131d6:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   131d8:	ff 91       	pop	r31
      asm( "pop r30");
   131da:	ef 91       	pop	r30
      asm( "pop r29");
   131dc:	df 91       	pop	r29
      asm( "pop r28");
   131de:	cf 91       	pop	r28
      asm( "pop r27");
   131e0:	bf 91       	pop	r27
      asm( "pop r26");
   131e2:	af 91       	pop	r26
      asm( "pop r25");
   131e4:	9f 91       	pop	r25
      asm( "pop r24");
   131e6:	8f 91       	pop	r24
      asm( "pop r23");
   131e8:	7f 91       	pop	r23
      asm( "pop r22");
   131ea:	6f 91       	pop	r22
      asm( "pop r21");
   131ec:	5f 91       	pop	r21
      asm( "pop r20");
   131ee:	4f 91       	pop	r20
      asm( "pop r19");
   131f0:	3f 91       	pop	r19
      asm( "pop r18");
   131f2:	2f 91       	pop	r18
      asm( "pop r17");
   131f4:	1f 91       	pop	r17
      asm( "pop r16");
   131f6:	0f 91       	pop	r16
      asm( "pop r15");
   131f8:	ff 90       	pop	r15
      asm( "pop r14");
   131fa:	ef 90       	pop	r14
      asm( "pop r13");
   131fc:	df 90       	pop	r13
      asm( "pop r12");
   131fe:	cf 90       	pop	r12
      asm( "pop r11");
   13200:	bf 90       	pop	r11
      asm( "pop r10");
   13202:	af 90       	pop	r10
      asm( "pop r9");
   13204:	9f 90       	pop	r9
      asm( "pop r8");
   13206:	8f 90       	pop	r8
      asm( "pop r7");
   13208:	7f 90       	pop	r7
      asm( "pop r6");
   1320a:	6f 90       	pop	r6
      asm( "pop r5");
   1320c:	5f 90       	pop	r5
      asm( "pop r4");
   1320e:	4f 90       	pop	r4
      asm( "pop r3");
   13210:	3f 90       	pop	r3
      asm( "pop r2");
   13212:	2f 90       	pop	r2
      asm( "pop r1");
   13214:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13216:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   13218:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1321a:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
	HAL_RET();
   1321c:	08 95       	ret

0001321e <arb_yieldFromWaitIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   1321e:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   13220:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   13222:	0f 92       	push	r0
      asm( "push r1");
   13224:	1f 92       	push	r1
      asm( "clr r1");
   13226:	11 24       	eor	r1, r1
      asm( "push r2");
   13228:	2f 92       	push	r2
      asm( "push r3");
   1322a:	3f 92       	push	r3
      asm( "push r4");
   1322c:	4f 92       	push	r4
      asm( "push r5");
   1322e:	5f 92       	push	r5
      asm( "push r6");
   13230:	6f 92       	push	r6
      asm( "push r7");
   13232:	7f 92       	push	r7
      asm( "push r8");
   13234:	8f 92       	push	r8
      asm( "push r9");
   13236:	9f 92       	push	r9
      asm( "push r10");
   13238:	af 92       	push	r10
      asm( "push r11");
   1323a:	bf 92       	push	r11
      asm( "push r12");
   1323c:	cf 92       	push	r12
      asm( "push r13");
   1323e:	df 92       	push	r13
      asm( "push r14");
   13240:	ef 92       	push	r14
      asm( "push r15");
   13242:	ff 92       	push	r15
      asm( "push r16");
   13244:	0f 93       	push	r16
      asm( "push r17");
   13246:	1f 93       	push	r17
      asm( "push r18");
   13248:	2f 93       	push	r18
      asm( "push r19");
   1324a:	3f 93       	push	r19
      asm( "push r20");
   1324c:	4f 93       	push	r20
      asm( "push r21");
   1324e:	5f 93       	push	r21
      asm( "push r22");
   13250:	6f 93       	push	r22
      asm( "push r23");
   13252:	7f 93       	push	r23
      asm( "push r24");
   13254:	8f 93       	push	r24
      asm( "push r25");
   13256:	9f 93       	push	r25
      asm( "push r26");
   13258:	af 93       	push	r26
      asm( "push r27");
   1325a:	bf 93       	push	r27
      asm( "push r28");
   1325c:	cf 93       	push	r28
      asm( "push r29");
   1325e:	df 93       	push	r29
      asm( "push r30");
   13260:	ef 93       	push	r30
      asm( "push r31");
   13262:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13264:	e0 91 29 22 	lds	r30, 0x2229
   13268:	f0 91 2a 22 	lds	r31, 0x222A
   1326c:	06 80       	ldd	r0, Z+6	; 0x06
   1326e:	f7 81       	ldd	r31, Z+7	; 0x07
   13270:	e0 2d       	mov	r30, r0
   13272:	01 90       	ld	r0, Z+
   13274:	f0 81       	ld	r31, Z
   13276:	e0 2d       	mov	r30, r0
   13278:	e0 93 bb 25 	sts	0x25BB, r30
   1327c:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   13280:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   13282:	4e b7       	in	r20, 0x3e	; 62
   13284:	94 2f       	mov	r25, r20
   13286:	80 e0       	ldi	r24, 0x00	; 0
   13288:	30 e0       	ldi	r19, 0x00	; 0
   1328a:	82 2b       	or	r24, r18
   1328c:	93 2b       	or	r25, r19
   1328e:	81 87       	std	Z+9, r24	; 0x09
   13290:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13292:	8f ef       	ldi	r24, 0xFF	; 255
   13294:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13296:	8f e3       	ldi	r24, 0x3F	; 63
   13298:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   1329a:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1329e:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   132a2:	e0 91 29 22 	lds	r30, 0x2229
   132a6:	f0 91 2a 22 	lds	r31, 0x222A
   132aa:	06 80       	ldd	r0, Z+6	; 0x06
   132ac:	f7 81       	ldd	r31, Z+7	; 0x07
   132ae:	e0 2d       	mov	r30, r0
   132b0:	01 90       	ld	r0, Z+
   132b2:	f0 81       	ld	r31, Z
   132b4:	e0 2d       	mov	r30, r0
   132b6:	e0 93 85 25 	sts	0x2585, r30
   132ba:	f0 93 86 25 	sts	0x2586, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   132be:	03 84       	ldd	r0, Z+11	; 0x0b
   132c0:	f4 85       	ldd	r31, Z+12	; 0x0c
   132c2:	e0 2d       	mov	r30, r0
   132c4:	80 81       	ld	r24, Z
   132c6:	91 81       	ldd	r25, Z+1	; 0x01
   132c8:	8d 5a       	subi	r24, 0xAD	; 173
   132ca:	9e 4d       	sbci	r25, 0xDE	; 222
   132cc:	11 f0       	breq	.+4      	; 0x132d2 <arb_yieldFromWaitIntsOff+0xb4>
   {
      arb_stackOverflow();
   132ce:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status to BLOCKED.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = BLOCKED;
   132d2:	e0 91 85 25 	lds	r30, 0x2585
   132d6:	f0 91 86 25 	lds	r31, 0x2586
   132da:	82 e0       	ldi	r24, 0x02	; 2
   132dc:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * Remove the currently running thread from the active list.
    *------------------------------------------------------------------------*/
   gt_linkError = utl_removeLink( gt_activeThreads,
   132de:	80 91 29 22 	lds	r24, 0x2229
   132e2:	90 91 2a 22 	lds	r25, 0x222A
   132e6:	e0 91 29 22 	lds	r30, 0x2229
   132ea:	f0 91 2a 22 	lds	r31, 0x222A
   132ee:	66 81       	ldd	r22, Z+6	; 0x06
   132f0:	77 81       	ldd	r23, Z+7	; 0x07
   132f2:	0e 94 f0 a3 	call	0x147e0	; 0x147e0 <utl_removeLink>
   132f6:	80 93 87 25 	sts	0x2587, r24
                                  UTL_GET_CURR_OF_CONT( gt_activeThreads));

   /*------------------------------------------------------------------------*
    * Insert this thread onto the blocked list for this semaphore...
    *------------------------------------------------------------------------*/
   gt_linkError = utl_insertLink( gpt_currentSem->t_blockedList,
   132fa:	e0 91 83 25 	lds	r30, 0x2583
   132fe:	f0 91 84 25 	lds	r31, 0x2584
   13302:	83 81       	ldd	r24, Z+3	; 0x03
   13304:	94 81       	ldd	r25, Z+4	; 0x04
   13306:	e0 91 29 22 	lds	r30, 0x2229
   1330a:	f0 91 2a 22 	lds	r31, 0x222A
   1330e:	66 81       	ldd	r22, Z+6	; 0x06
   13310:	77 81       	ldd	r23, Z+7	; 0x07
   13312:	41 e0       	ldi	r20, 0x01	; 1
   13314:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
   13318:	80 93 87 25 	sts	0x2587, r24
                                  true);

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   1331c:	e0 91 bd 25 	lds	r30, 0x25BD
   13320:	f0 91 be 25 	lds	r31, 0x25BE
   13324:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13326:	e0 91 29 22 	lds	r30, 0x2229
   1332a:	f0 91 2a 22 	lds	r31, 0x222A
   1332e:	06 80       	ldd	r0, Z+6	; 0x06
   13330:	f7 81       	ldd	r31, Z+7	; 0x07
   13332:	e0 2d       	mov	r30, r0
   13334:	01 90       	ld	r0, Z+
   13336:	f0 81       	ld	r31, Z
   13338:	e0 2d       	mov	r30, r0
   1333a:	e0 93 bb 25 	sts	0x25BB, r30
   1333e:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   13342:	81 85       	ldd	r24, Z+9	; 0x09
   13344:	92 85       	ldd	r25, Z+10	; 0x0a
   13346:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   13348:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   1334a:	ff 91       	pop	r31
      asm( "pop r30");
   1334c:	ef 91       	pop	r30
      asm( "pop r29");
   1334e:	df 91       	pop	r29
      asm( "pop r28");
   13350:	cf 91       	pop	r28
      asm( "pop r27");
   13352:	bf 91       	pop	r27
      asm( "pop r26");
   13354:	af 91       	pop	r26
      asm( "pop r25");
   13356:	9f 91       	pop	r25
      asm( "pop r24");
   13358:	8f 91       	pop	r24
      asm( "pop r23");
   1335a:	7f 91       	pop	r23
      asm( "pop r22");
   1335c:	6f 91       	pop	r22
      asm( "pop r21");
   1335e:	5f 91       	pop	r21
      asm( "pop r20");
   13360:	4f 91       	pop	r20
      asm( "pop r19");
   13362:	3f 91       	pop	r19
      asm( "pop r18");
   13364:	2f 91       	pop	r18
      asm( "pop r17");
   13366:	1f 91       	pop	r17
      asm( "pop r16");
   13368:	0f 91       	pop	r16
      asm( "pop r15");
   1336a:	ff 90       	pop	r15
      asm( "pop r14");
   1336c:	ef 90       	pop	r14
      asm( "pop r13");
   1336e:	df 90       	pop	r13
      asm( "pop r12");
   13370:	cf 90       	pop	r12
      asm( "pop r11");
   13372:	bf 90       	pop	r11
      asm( "pop r10");
   13374:	af 90       	pop	r10
      asm( "pop r9");
   13376:	9f 90       	pop	r9
      asm( "pop r8");
   13378:	8f 90       	pop	r8
      asm( "pop r7");
   1337a:	7f 90       	pop	r7
      asm( "pop r6");
   1337c:	6f 90       	pop	r6
      asm( "pop r5");
   1337e:	5f 90       	pop	r5
      asm( "pop r4");
   13380:	4f 90       	pop	r4
      asm( "pop r3");
   13382:	3f 90       	pop	r3
      asm( "pop r2");
   13384:	2f 90       	pop	r2
      asm( "pop r1");
   13386:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13388:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   1338a:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1338c:	0f 90       	pop	r0
    * cause any issues - but I am not completely certain. I may need to make
    * an additional 'yield' routing that is called outside and interrupt and
    * make a decision on which one to run based on the status of the PMIC
    * controller.
    *------------------------------------------------------------------------*/
	HAL_RET();
   1338e:	08 95       	ret

00013390 <arb_wait>:

}/*End arb_yieldFromWaitIntsOff*/

t_error arb_wait( t_SEMHANDLE t_semHandle,
                  t_semMode t_mode)
{
   13390:	df 93       	push	r29
   13392:	cf 93       	push	r28
   13394:	0f 92       	push	r0
   13396:	0f 92       	push	r0
   13398:	cd b7       	in	r28, 0x3d	; 61
   1339a:	de b7       	in	r29, 0x3e	; 62
   1339c:	89 83       	std	Y+1, r24	; 0x01
   1339e:	9a 83       	std	Y+2, r25	; 0x02
    * (remembering the program counter, stack variables, and CPU registers of
    * the calling thread). Any use of the stack from within this function will
    * be stored on the stack of the calling thread and care needs to be
    * taken to make sure it size is large enough to handle the extra workload.
    *------------------------------------------------------------------------*/
   if( HAL_ARE_INTS_EN()) /*Interrupt enabled?*/
   133a0:	0f b6       	in	r0, 0x3f	; 63
   133a2:	07 fe       	sbrs	r0, 7
   133a4:	33 c0       	rjmp	.+102    	; 0x1340c <arb_wait+0x7c>
   {

      /*---------------------------------------------------------------------*
       * Perform mutual exclusion.
       *---------------------------------------------------------------------*/
      HAL_CLI();
   133a6:	f8 94       	cli

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   133a8:	e9 81       	ldd	r30, Y+1	; 0x01
   133aa:	fa 81       	ldd	r31, Y+2	; 0x02
   133ac:	20 91 1a 22 	lds	r18, 0x221A
   133b0:	30 91 1b 22 	lds	r19, 0x221B
   133b4:	84 81       	ldd	r24, Z+4	; 0x04
   133b6:	95 81       	ldd	r25, Z+5	; 0x05
   133b8:	82 17       	cp	r24, r18
   133ba:	93 07       	cpc	r25, r19
   133bc:	11 f0       	breq	.+4      	; 0x133c2 <arb_wait+0x32>
      false)
      {
         HAL_SEI();
   133be:	78 94       	sei
   133c0:	30 c0       	rjmp	.+96     	; 0x13422 <arb_wait+0x92>
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   133c2:	e9 81       	ldd	r30, Y+1	; 0x01
   133c4:	fa 81       	ldd	r31, Y+2	; 0x02
   133c6:	01 90       	ld	r0, Z+
   133c8:	f0 81       	ld	r31, Z
   133ca:	e0 2d       	mov	r30, r0
   133cc:	e0 93 83 25 	sts	0x2583, r30
   133d0:	f0 93 84 25 	sts	0x2584, r31
   133d4:	81 81       	ldd	r24, Z+1	; 0x01
   133d6:	92 81       	ldd	r25, Z+2	; 0x02
      t_semHandle);

      if( t_mode == BLOCKING)
   133d8:	66 23       	and	r22, r22
   133da:	71 f4       	brne	.+28     	; 0x133f8 <arb_wait+0x68>
      {
         /*------------------------------------------------------------------*
          * Decrement the waiting count.
          *------------------------------------------------------------------*/
         gpt_currentSem->s_count--;
   133dc:	01 97       	sbiw	r24, 0x01	; 1
   133de:	81 83       	std	Z+1, r24	; 0x01
   133e0:	92 83       	std	Z+2, r25	; 0x02

         /*------------------------------------------------------------------*
          * Is it time for this thread to be blocked?
          *------------------------------------------------------------------*/
         if( gpt_currentSem->s_count < 0) /*Yes, block process*/
   133e2:	97 ff       	sbrs	r25, 7
   133e4:	07 c0       	rjmp	.+14     	; 0x133f4 <arb_wait+0x64>
         {
            /*---------------------------------------------------------------*
             * Record the maximum time this thread will wait on this semaphore
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   133e6:	80 91 29 22 	lds	r24, 0x2229
   133ea:	90 91 2a 22 	lds	r25, 0x222A
             * Since we previously disabled interrupts this yield call saves
             * the contents of the SREG with the GIE bit enabled. It assumes
             * that the thread being restored with the context save has
             * interrupts already enabled.
             *---------------------------------------------------------------*/
            arb_yieldFromWaitIntsOn();
   133ee:	0e 94 51 98 	call	0x130a2	; 0x130a2 <arb_yieldFromWaitIntsOn>
   133f2:	3a c0       	rjmp	.+116    	; 0x13468 <arb_wait+0xd8>
             * the stack of the thread that initially made the call into 'wait'
             *---------------------------------------------------------------*/

         }/*End if( pt_semHandle->s_count < 0)*/
         else /*No, continue process*/
            HAL_SEI(); /*Enable interrupts*/
   133f4:	78 94       	sei
   133f6:	38 c0       	rjmp	.+112    	; 0x13468 <arb_wait+0xd8>
      }
      else /*Non blocking*/
      {
         if( gpt_currentSem->s_count > 0)
   133f8:	18 16       	cp	r1, r24
   133fa:	19 06       	cpc	r1, r25
   133fc:	2c f4       	brge	.+10     	; 0x13408 <arb_wait+0x78>
         {
            gpt_currentSem->s_count--;
   133fe:	01 97       	sbiw	r24, 0x01	; 1
   13400:	81 83       	std	Z+1, r24	; 0x01
   13402:	92 83       	std	Z+2, r25	; 0x02
            HAL_SEI(); /*Enable interrupts*/
   13404:	78 94       	sei
   13406:	30 c0       	rjmp	.+96     	; 0x13468 <arb_wait+0xd8>
         }
         else
         {
            HAL_SEI(); /*Enable interrupts*/
   13408:	78 94       	sei
   1340a:	29 c0       	rjmp	.+82     	; 0x1345e <arb_wait+0xce>

   }/*End if( HAL_ARE_INTS_EN())*/
   else
   {

      if( UTL_IS_LINK_ON_LIST( (t_LINKHNDL)t_semHandle, gt_activeSems) ==
   1340c:	e9 81       	ldd	r30, Y+1	; 0x01
   1340e:	fa 81       	ldd	r31, Y+2	; 0x02
   13410:	20 91 1a 22 	lds	r18, 0x221A
   13414:	30 91 1b 22 	lds	r19, 0x221B
   13418:	84 81       	ldd	r24, Z+4	; 0x04
   1341a:	95 81       	ldd	r25, Z+5	; 0x05
   1341c:	82 17       	cp	r24, r18
   1341e:	93 07       	cpc	r25, r19
   13420:	11 f0       	breq	.+4      	; 0x13426 <arb_wait+0x96>
   13422:	89 ef       	ldi	r24, 0xF9	; 249
   13424:	22 c0       	rjmp	.+68     	; 0x1346a <arb_wait+0xda>
      false)
      {
         return ARB_INVALID_HANDLE;
      }

      gpt_currentSem = (t_semaphore *)UTL_GET_LINK_ELEMENT_PTR( (t_LINKHNDL)\
   13426:	e9 81       	ldd	r30, Y+1	; 0x01
   13428:	fa 81       	ldd	r31, Y+2	; 0x02
   1342a:	01 90       	ld	r0, Z+
   1342c:	f0 81       	ld	r31, Z
   1342e:	e0 2d       	mov	r30, r0
   13430:	e0 93 83 25 	sts	0x2583, r30
   13434:	f0 93 84 25 	sts	0x2584, r31
   13438:	81 81       	ldd	r24, Z+1	; 0x01
   1343a:	92 81       	ldd	r25, Z+2	; 0x02
      t_semHandle);

      if( t_mode == BLOCKING)
   1343c:	66 23       	and	r22, r22
   1343e:	61 f4       	brne	.+24     	; 0x13458 <arb_wait+0xc8>
      {

         /*------------------------------------------------------------------*
          * Decrement the waiting count.
          *------------------------------------------------------------------*/
         gpt_currentSem->s_count--;
   13440:	01 97       	sbiw	r24, 0x01	; 1
   13442:	81 83       	std	Z+1, r24	; 0x01
   13444:	92 83       	std	Z+2, r25	; 0x02

         /*------------------------------------------------------------------*
          * Is it time for this thread to be blocked?
          *------------------------------------------------------------------*/
         if( gpt_currentSem->s_count < 0) /*Yes, block process*/
   13446:	97 ff       	sbrs	r25, 7
   13448:	0f c0       	rjmp	.+30     	; 0x13468 <arb_wait+0xd8>
         {
            /*---------------------------------------------------------------*
             * Record the maximum time this thread will wait on this semaphore
             *---------------------------------------------------------------*/
            pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR\
   1344a:	80 91 29 22 	lds	r24, 0x2229
   1344e:	90 91 2a 22 	lds	r25, 0x222A

            /*---------------------------------------------------------------*
             * Since we previously disabled interrupts this yield call saves
             * the contents of the SREG with the GIE bit enabled.
             *---------------------------------------------------------------*/
            arb_yieldFromWaitIntsOff();
   13452:	0e 94 0f 99 	call	0x1321e	; 0x1321e <arb_yieldFromWaitIntsOff>
   13456:	08 c0       	rjmp	.+16     	; 0x13468 <arb_wait+0xd8>
         }/*End if( pt_semHandle->s_count < 0)*/

      }
      else /*Non blocking*/
      {
         if( gpt_currentSem->s_count > 0)
   13458:	18 16       	cp	r1, r24
   1345a:	19 06       	cpc	r1, r25
   1345c:	14 f0       	brlt	.+4      	; 0x13462 <arb_wait+0xd2>
   1345e:	83 ef       	ldi	r24, 0xF3	; 243
   13460:	04 c0       	rjmp	.+8      	; 0x1346a <arb_wait+0xda>
         {
            gpt_currentSem->s_count--;
   13462:	01 97       	sbiw	r24, 0x01	; 1
   13464:	81 83       	std	Z+1, r24	; 0x01
   13466:	92 83       	std	Z+2, r25	; 0x02
   13468:	80 e0       	ldi	r24, 0x00	; 0
    * Since the call into 'wait' wasn't 'naked' we will let the compiler
    * return us to the calling thread's next program counter location.
    *------------------------------------------------------------------------*/
   return ARB_PASSED;

}/*End arb_wait( )*/
   1346a:	0f 90       	pop	r0
   1346c:	0f 90       	pop	r0
   1346e:	cf 91       	pop	r28
   13470:	df 91       	pop	r29
   13472:	08 95       	ret

00013474 <updateSystemTime>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void updateSystemTime( void)
{
   13474:	cf 92       	push	r12
   13476:	df 92       	push	r13
   13478:	ef 92       	push	r14
   1347a:	ff 92       	push	r15
   1347c:	0f 93       	push	r16
   1347e:	1f 93       	push	r17
   gt_sysTime.l_ticks += ARB_SYS_TIMER_PERIOD_IN_TICKS;
   13480:	80 91 90 25 	lds	r24, 0x2590
   13484:	30 91 91 25 	lds	r19, 0x2591
   13488:	40 91 92 25 	lds	r20, 0x2592
   1348c:	60 91 93 25 	lds	r22, 0x2593
   13490:	70 91 94 25 	lds	r23, 0x2594
   13494:	f0 91 95 25 	lds	r31, 0x2595
   13498:	a0 91 96 25 	lds	r26, 0x2596
   1349c:	00 91 97 25 	lds	r16, 0x2597
   134a0:	b8 2f       	mov	r27, r24
   134a2:	b9 57       	subi	r27, 0x79	; 121
   134a4:	91 e0       	ldi	r25, 0x01	; 1
   134a6:	b8 17       	cp	r27, r24
   134a8:	08 f0       	brcs	.+2      	; 0x134ac <updateSystemTime+0x38>
   134aa:	90 e0       	ldi	r25, 0x00	; 0
   134ac:	83 2f       	mov	r24, r19
   134ae:	8d 5e       	subi	r24, 0xED	; 237
   134b0:	21 e0       	ldi	r18, 0x01	; 1
   134b2:	83 17       	cp	r24, r19
   134b4:	08 f0       	brcs	.+2      	; 0x134b8 <updateSystemTime+0x44>
   134b6:	20 e0       	ldi	r18, 0x00	; 0
   134b8:	e9 2f       	mov	r30, r25
   134ba:	e8 0f       	add	r30, r24
   134bc:	91 e0       	ldi	r25, 0x01	; 1
   134be:	e8 17       	cp	r30, r24
   134c0:	08 f0       	brcs	.+2      	; 0x134c4 <updateSystemTime+0x50>
   134c2:	90 e0       	ldi	r25, 0x00	; 0
   134c4:	92 2b       	or	r25, r18
   134c6:	94 0f       	add	r25, r20
   134c8:	81 e0       	ldi	r24, 0x01	; 1
   134ca:	94 17       	cp	r25, r20
   134cc:	08 f0       	brcs	.+2      	; 0x134d0 <updateSystemTime+0x5c>
   134ce:	80 e0       	ldi	r24, 0x00	; 0
   134d0:	58 2f       	mov	r21, r24
   134d2:	56 0f       	add	r21, r22
   134d4:	81 e0       	ldi	r24, 0x01	; 1
   134d6:	56 17       	cp	r21, r22
   134d8:	08 f0       	brcs	.+2      	; 0x134dc <updateSystemTime+0x68>
   134da:	80 e0       	ldi	r24, 0x00	; 0
   134dc:	48 2f       	mov	r20, r24
   134de:	47 0f       	add	r20, r23
   134e0:	81 e0       	ldi	r24, 0x01	; 1
   134e2:	47 17       	cp	r20, r23
   134e4:	08 f0       	brcs	.+2      	; 0x134e8 <updateSystemTime+0x74>
   134e6:	80 e0       	ldi	r24, 0x00	; 0
   134e8:	38 2f       	mov	r19, r24
   134ea:	3f 0f       	add	r19, r31
   134ec:	81 e0       	ldi	r24, 0x01	; 1
   134ee:	3f 17       	cp	r19, r31
   134f0:	08 f0       	brcs	.+2      	; 0x134f4 <updateSystemTime+0x80>
   134f2:	80 e0       	ldi	r24, 0x00	; 0
   134f4:	28 2f       	mov	r18, r24
   134f6:	2a 0f       	add	r18, r26
   134f8:	81 e0       	ldi	r24, 0x01	; 1
   134fa:	2a 17       	cp	r18, r26
   134fc:	08 f0       	brcs	.+2      	; 0x13500 <updateSystemTime+0x8c>
   134fe:	80 e0       	ldi	r24, 0x00	; 0
   13500:	80 0f       	add	r24, r16
   13502:	b0 93 90 25 	sts	0x2590, r27
   13506:	e0 93 91 25 	sts	0x2591, r30
   1350a:	90 93 92 25 	sts	0x2592, r25
   1350e:	50 93 93 25 	sts	0x2593, r21
   13512:	40 93 94 25 	sts	0x2594, r20
   13516:	30 93 95 25 	sts	0x2595, r19
   1351a:	20 93 96 25 	sts	0x2596, r18
   1351e:	80 93 97 25 	sts	0x2597, r24
   gt_sysTime.i_usec += ARB_SYS_TIMER_PERIOD_IN_USEC;
   13522:	60 91 9d 25 	lds	r22, 0x259D
   13526:	70 91 9e 25 	lds	r23, 0x259E
   1352a:	80 91 9f 25 	lds	r24, 0x259F
   1352e:	90 91 a0 25 	lds	r25, 0x25A0
   13532:	0e 94 b1 b0 	call	0x16162	; 0x16162 <__floatunsisf>
   13536:	20 e0       	ldi	r18, 0x00	; 0
   13538:	30 e4       	ldi	r19, 0x40	; 64
   1353a:	4c e1       	ldi	r20, 0x1C	; 28
   1353c:	56 e4       	ldi	r21, 0x46	; 70
   1353e:	0e 94 76 af 	call	0x15eec	; 0x15eec <__addsf3>
   13542:	0e 94 85 b0 	call	0x1610a	; 0x1610a <__fixunssfsi>
   13546:	6b 01       	movw	r12, r22
   13548:	7c 01       	movw	r14, r24
   1354a:	60 93 9d 25 	sts	0x259D, r22
   1354e:	70 93 9e 25 	sts	0x259E, r23
   13552:	80 93 9f 25 	sts	0x259F, r24
   13556:	90 93 a0 25 	sts	0x25A0, r25
   gt_sysTime.l_msec += ARB_SYS_TIMER_PERIOD_IN_MSEC;
   1355a:	08 e8       	ldi	r16, 0x88	; 136
   1355c:	15 e2       	ldi	r17, 0x25	; 37
   1355e:	20 91 88 25 	lds	r18, 0x2588
   13562:	30 91 89 25 	lds	r19, 0x2589
   13566:	40 91 8a 25 	lds	r20, 0x258A
   1356a:	50 91 8b 25 	lds	r21, 0x258B
   1356e:	60 91 8c 25 	lds	r22, 0x258C
   13572:	70 91 8d 25 	lds	r23, 0x258D
   13576:	80 91 8e 25 	lds	r24, 0x258E
   1357a:	90 91 8f 25 	lds	r25, 0x258F
   1357e:	0e 94 ee b0 	call	0x161dc	; 0x161dc <__floatundisf>
   13582:	20 e0       	ldi	r18, 0x00	; 0
   13584:	30 e0       	ldi	r19, 0x00	; 0
   13586:	40 e2       	ldi	r20, 0x20	; 32
   13588:	51 e4       	ldi	r21, 0x41	; 65
   1358a:	0e 94 76 af 	call	0x15eec	; 0x15eec <__addsf3>
   1358e:	0e 94 4b b0 	call	0x16096	; 0x16096 <__fixunssfdi>
   13592:	20 93 88 25 	sts	0x2588, r18
   13596:	f8 01       	movw	r30, r16
   13598:	31 83       	std	Z+1, r19	; 0x01
   1359a:	42 83       	std	Z+2, r20	; 0x02
   1359c:	53 83       	std	Z+3, r21	; 0x03
   1359e:	64 83       	std	Z+4, r22	; 0x04
   135a0:	75 83       	std	Z+5, r23	; 0x05
   135a2:	86 83       	std	Z+6, r24	; 0x06
   135a4:	97 83       	std	Z+7, r25	; 0x07

   if( gt_sysTime.l_msec >= ARB_SYS_TIMER_MAX_MSEC)
   135a6:	99 23       	and	r25, r25
   135a8:	a9 f4       	brne	.+42     	; 0x135d4 <updateSystemTime+0x160>
   135aa:	88 23       	and	r24, r24
   135ac:	99 f4       	brne	.+38     	; 0x135d4 <updateSystemTime+0x160>
   135ae:	77 23       	and	r23, r23
   135b0:	89 f4       	brne	.+34     	; 0x135d4 <updateSystemTime+0x160>
   135b2:	66 23       	and	r22, r22
   135b4:	79 f4       	brne	.+30     	; 0x135d4 <updateSystemTime+0x160>
   135b6:	55 23       	and	r21, r21
   135b8:	69 f4       	brne	.+26     	; 0x135d4 <updateSystemTime+0x160>
   135ba:	47 33       	cpi	r20, 0x37	; 55
   135bc:	58 f4       	brcc	.+22     	; 0x135d4 <updateSystemTime+0x160>
   135be:	46 33       	cpi	r20, 0x36	; 54
   135c0:	09 f0       	breq	.+2      	; 0x135c4 <updateSystemTime+0x150>
   135c2:	6c c0       	rjmp	.+216    	; 0x1369c <updateSystemTime+0x228>
   135c4:	3f 3e       	cpi	r19, 0xEF	; 239
   135c6:	30 f4       	brcc	.+12     	; 0x135d4 <updateSystemTime+0x160>
   135c8:	3e 3e       	cpi	r19, 0xEE	; 238
   135ca:	09 f0       	breq	.+2      	; 0x135ce <updateSystemTime+0x15a>
   135cc:	67 c0       	rjmp	.+206    	; 0x1369c <updateSystemTime+0x228>
   135ce:	20 38       	cpi	r18, 0x80	; 128
   135d0:	08 f4       	brcc	.+2      	; 0x135d4 <updateSystemTime+0x160>
   135d2:	64 c0       	rjmp	.+200    	; 0x1369c <updateSystemTime+0x228>
      gt_sysTime.l_msec -= ARB_SYS_TIMER_MAX_MSEC;
   135d4:	02 2f       	mov	r16, r18
   135d6:	00 58       	subi	r16, 0x80	; 128
   135d8:	f1 e0       	ldi	r31, 0x01	; 1
   135da:	02 17       	cp	r16, r18
   135dc:	08 f0       	brcs	.+2      	; 0x135e0 <updateSystemTime+0x16c>
   135de:	f0 e0       	ldi	r31, 0x00	; 0
   135e0:	23 2f       	mov	r18, r19
   135e2:	2f 5e       	subi	r18, 0xEF	; 239
   135e4:	e1 e0       	ldi	r30, 0x01	; 1
   135e6:	23 17       	cp	r18, r19
   135e8:	08 f0       	brcs	.+2      	; 0x135ec <updateSystemTime+0x178>
   135ea:	e0 e0       	ldi	r30, 0x00	; 0
   135ec:	bf 2f       	mov	r27, r31
   135ee:	b2 0f       	add	r27, r18
   135f0:	31 e0       	ldi	r19, 0x01	; 1
   135f2:	b2 17       	cp	r27, r18
   135f4:	08 f0       	brcs	.+2      	; 0x135f8 <updateSystemTime+0x184>
   135f6:	30 e0       	ldi	r19, 0x00	; 0
   135f8:	e3 2b       	or	r30, r19
   135fa:	24 2f       	mov	r18, r20
   135fc:	27 53       	subi	r18, 0x37	; 55
   135fe:	f1 e0       	ldi	r31, 0x01	; 1
   13600:	24 17       	cp	r18, r20
   13602:	08 f0       	brcs	.+2      	; 0x13606 <updateSystemTime+0x192>
   13604:	f0 e0       	ldi	r31, 0x00	; 0
   13606:	ae 2f       	mov	r26, r30
   13608:	a2 0f       	add	r26, r18
   1360a:	31 e0       	ldi	r19, 0x01	; 1
   1360c:	a2 17       	cp	r26, r18
   1360e:	08 f0       	brcs	.+2      	; 0x13612 <updateSystemTime+0x19e>
   13610:	30 e0       	ldi	r19, 0x00	; 0
   13612:	f3 2b       	or	r31, r19
   13614:	25 2f       	mov	r18, r21
   13616:	21 50       	subi	r18, 0x01	; 1
   13618:	41 e0       	ldi	r20, 0x01	; 1
   1361a:	25 17       	cp	r18, r21
   1361c:	08 f0       	brcs	.+2      	; 0x13620 <updateSystemTime+0x1ac>
   1361e:	40 e0       	ldi	r20, 0x00	; 0
   13620:	ef 2f       	mov	r30, r31
   13622:	e2 0f       	add	r30, r18
   13624:	31 e0       	ldi	r19, 0x01	; 1
   13626:	e2 17       	cp	r30, r18
   13628:	08 f0       	brcs	.+2      	; 0x1362c <updateSystemTime+0x1b8>
   1362a:	30 e0       	ldi	r19, 0x00	; 0
   1362c:	43 2b       	or	r20, r19
   1362e:	26 2f       	mov	r18, r22
   13630:	21 50       	subi	r18, 0x01	; 1
   13632:	51 e0       	ldi	r21, 0x01	; 1
   13634:	26 17       	cp	r18, r22
   13636:	08 f0       	brcs	.+2      	; 0x1363a <updateSystemTime+0x1c6>
   13638:	50 e0       	ldi	r21, 0x00	; 0
   1363a:	64 2f       	mov	r22, r20
   1363c:	62 0f       	add	r22, r18
   1363e:	31 e0       	ldi	r19, 0x01	; 1
   13640:	62 17       	cp	r22, r18
   13642:	08 f0       	brcs	.+2      	; 0x13646 <updateSystemTime+0x1d2>
   13644:	30 e0       	ldi	r19, 0x00	; 0
   13646:	53 2b       	or	r21, r19
   13648:	27 2f       	mov	r18, r23
   1364a:	21 50       	subi	r18, 0x01	; 1
   1364c:	41 e0       	ldi	r20, 0x01	; 1
   1364e:	27 17       	cp	r18, r23
   13650:	08 f0       	brcs	.+2      	; 0x13654 <updateSystemTime+0x1e0>
   13652:	40 e0       	ldi	r20, 0x00	; 0
   13654:	52 0f       	add	r21, r18
   13656:	31 e0       	ldi	r19, 0x01	; 1
   13658:	52 17       	cp	r21, r18
   1365a:	08 f0       	brcs	.+2      	; 0x1365e <updateSystemTime+0x1ea>
   1365c:	30 e0       	ldi	r19, 0x00	; 0
   1365e:	43 2b       	or	r20, r19
   13660:	28 2f       	mov	r18, r24
   13662:	21 50       	subi	r18, 0x01	; 1
   13664:	31 e0       	ldi	r19, 0x01	; 1
   13666:	28 17       	cp	r18, r24
   13668:	08 f0       	brcs	.+2      	; 0x1366c <updateSystemTime+0x1f8>
   1366a:	30 e0       	ldi	r19, 0x00	; 0
   1366c:	42 0f       	add	r20, r18
   1366e:	81 e0       	ldi	r24, 0x01	; 1
   13670:	42 17       	cp	r20, r18
   13672:	08 f0       	brcs	.+2      	; 0x13676 <updateSystemTime+0x202>
   13674:	80 e0       	ldi	r24, 0x00	; 0
   13676:	38 2b       	or	r19, r24
   13678:	91 50       	subi	r25, 0x01	; 1
   1367a:	39 0f       	add	r19, r25
   1367c:	00 93 88 25 	sts	0x2588, r16
   13680:	b0 93 89 25 	sts	0x2589, r27
   13684:	a0 93 8a 25 	sts	0x258A, r26
   13688:	e0 93 8b 25 	sts	0x258B, r30
   1368c:	60 93 8c 25 	sts	0x258C, r22
   13690:	50 93 8d 25 	sts	0x258D, r21
   13694:	40 93 8e 25 	sts	0x258E, r20
   13698:	30 93 8f 25 	sts	0x258F, r19

   if( gt_sysTime.i_usec >= ((uint32_t)1000000))
   1369c:	f0 e4       	ldi	r31, 0x40	; 64
   1369e:	cf 16       	cp	r12, r31
   136a0:	f2 e4       	ldi	r31, 0x42	; 66
   136a2:	df 06       	cpc	r13, r31
   136a4:	ff e0       	ldi	r31, 0x0F	; 15
   136a6:	ef 06       	cpc	r14, r31
   136a8:	f0 e0       	ldi	r31, 0x00	; 0
   136aa:	ff 06       	cpc	r15, r31
   136ac:	90 f1       	brcs	.+100    	; 0x13712 <updateSystemTime+0x29e>
   {
      gt_sysTime.i_usec -= ((uint32_t)1000000);
   136ae:	d7 01       	movw	r26, r14
   136b0:	c6 01       	movw	r24, r12
   136b2:	80 54       	subi	r24, 0x40	; 64
   136b4:	92 44       	sbci	r25, 0x42	; 66
   136b6:	af 40       	sbci	r26, 0x0F	; 15
   136b8:	b0 40       	sbci	r27, 0x00	; 0
   136ba:	80 93 9d 25 	sts	0x259D, r24
   136be:	90 93 9e 25 	sts	0x259E, r25
   136c2:	a0 93 9f 25 	sts	0x259F, r26
   136c6:	b0 93 a0 25 	sts	0x25A0, r27
      gt_sysTime.c_sec++;
   136ca:	80 91 9c 25 	lds	r24, 0x259C
   136ce:	8f 5f       	subi	r24, 0xFF	; 255
   136d0:	80 93 9c 25 	sts	0x259C, r24
      if( gt_sysTime.c_sec == 60)
   136d4:	8c 33       	cpi	r24, 0x3C	; 60
   136d6:	e9 f4       	brne	.+58     	; 0x13712 <updateSystemTime+0x29e>
      {
         gt_sysTime.c_sec = 0;
   136d8:	10 92 9c 25 	sts	0x259C, r1
         gt_sysTime.c_min++;
   136dc:	80 91 9b 25 	lds	r24, 0x259B
   136e0:	8f 5f       	subi	r24, 0xFF	; 255
   136e2:	80 93 9b 25 	sts	0x259B, r24
         if( gt_sysTime.c_min == 60)
   136e6:	8c 33       	cpi	r24, 0x3C	; 60
   136e8:	a1 f4       	brne	.+40     	; 0x13712 <updateSystemTime+0x29e>
         {
            gt_sysTime.c_min = 0;
   136ea:	10 92 9b 25 	sts	0x259B, r1
            gt_sysTime.c_hours++;
   136ee:	80 91 9a 25 	lds	r24, 0x259A
   136f2:	8f 5f       	subi	r24, 0xFF	; 255
   136f4:	80 93 9a 25 	sts	0x259A, r24
            if( gt_sysTime.c_hours == 24)
   136f8:	88 31       	cpi	r24, 0x18	; 24
   136fa:	59 f4       	brne	.+22     	; 0x13712 <updateSystemTime+0x29e>
            {
               gt_sysTime.c_hours = 0;
   136fc:	10 92 9a 25 	sts	0x259A, r1
               gt_sysTime.s_days++;
   13700:	80 91 98 25 	lds	r24, 0x2598
   13704:	90 91 99 25 	lds	r25, 0x2599
   13708:	01 96       	adiw	r24, 0x01	; 1
   1370a:	80 93 98 25 	sts	0x2598, r24
   1370e:	90 93 99 25 	sts	0x2599, r25

      }/*End if( gt_sysTime.c_sec == 60)*/

   }/*End if( gt_sysTime.i_usec >= 1000000)*/

}/*End updateSystemTime*/
   13712:	1f 91       	pop	r17
   13714:	0f 91       	pop	r16
   13716:	ff 90       	pop	r15
   13718:	ef 90       	pop	r14
   1371a:	df 90       	pop	r13
   1371c:	cf 90       	pop	r12
   1371e:	08 95       	ret

00013720 <arb_sysMsecNow>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
uint64_t arb_sysMsecNow( void)
{
   13720:	20 91 88 25 	lds	r18, 0x2588
   13724:	30 91 89 25 	lds	r19, 0x2589
   13728:	40 91 8a 25 	lds	r20, 0x258A
   1372c:	50 91 8b 25 	lds	r21, 0x258B
   13730:	60 91 8c 25 	lds	r22, 0x258C
   13734:	70 91 8d 25 	lds	r23, 0x258D
   return gt_sysTime.l_msec;
}/*End arb_sysMsecNow*/
   13738:	80 91 8e 25 	lds	r24, 0x258E
   1373c:	90 91 8f 25 	lds	r25, 0x258F
   13740:	08 95       	ret

00013742 <arb_sysMsecDelta>:

uint64_t arb_sysMsecDelta( uint64_t l_currTime,
                           uint64_t l_prevTime)
{
   13742:	af 92       	push	r10
   13744:	bf 92       	push	r11
   13746:	cf 92       	push	r12
   13748:	df 92       	push	r13
   1374a:	ef 92       	push	r14
   1374c:	ff 92       	push	r15
   1374e:	0f 93       	push	r16
   13750:	1f 93       	push	r17
   int64_t l_delta;

   l_delta = (int64_t)l_currTime - (int64_t)l_prevTime;
   13752:	e2 2f       	mov	r30, r18
   13754:	ea 19       	sub	r30, r10
   13756:	ae 2e       	mov	r10, r30
   13758:	f1 e0       	ldi	r31, 0x01	; 1
   1375a:	2e 17       	cp	r18, r30
   1375c:	08 f0       	brcs	.+2      	; 0x13760 <arb_sysMsecDelta+0x1e>
   1375e:	f0 e0       	ldi	r31, 0x00	; 0
   13760:	23 2f       	mov	r18, r19
   13762:	2b 19       	sub	r18, r11
   13764:	b2 2e       	mov	r11, r18
   13766:	e1 e0       	ldi	r30, 0x01	; 1
   13768:	32 17       	cp	r19, r18
   1376a:	08 f0       	brcs	.+2      	; 0x1376e <arb_sysMsecDelta+0x2c>
   1376c:	e0 e0       	ldi	r30, 0x00	; 0
   1376e:	bb 2d       	mov	r27, r11
   13770:	bf 1b       	sub	r27, r31
   13772:	21 e0       	ldi	r18, 0x01	; 1
   13774:	bb 16       	cp	r11, r27
   13776:	08 f0       	brcs	.+2      	; 0x1377a <arb_sysMsecDelta+0x38>
   13778:	20 e0       	ldi	r18, 0x00	; 0
   1377a:	e2 2b       	or	r30, r18
   1377c:	24 2f       	mov	r18, r20
   1377e:	2c 19       	sub	r18, r12
   13780:	c2 2e       	mov	r12, r18
   13782:	31 e0       	ldi	r19, 0x01	; 1
   13784:	42 17       	cp	r20, r18
   13786:	08 f0       	brcs	.+2      	; 0x1378a <arb_sysMsecDelta+0x48>
   13788:	30 e0       	ldi	r19, 0x00	; 0
   1378a:	bc 2c       	mov	r11, r12
   1378c:	be 1a       	sub	r11, r30
   1378e:	21 e0       	ldi	r18, 0x01	; 1
   13790:	cb 14       	cp	r12, r11
   13792:	08 f0       	brcs	.+2      	; 0x13796 <arb_sysMsecDelta+0x54>
   13794:	20 e0       	ldi	r18, 0x00	; 0
   13796:	32 2b       	or	r19, r18
   13798:	e5 2f       	mov	r30, r21
   1379a:	ed 19       	sub	r30, r13
   1379c:	de 2e       	mov	r13, r30
   1379e:	41 e0       	ldi	r20, 0x01	; 1
   137a0:	5e 17       	cp	r21, r30
   137a2:	08 f0       	brcs	.+2      	; 0x137a6 <arb_sysMsecDelta+0x64>
   137a4:	40 e0       	ldi	r20, 0x00	; 0
   137a6:	cd 2c       	mov	r12, r13
   137a8:	c3 1a       	sub	r12, r19
   137aa:	21 e0       	ldi	r18, 0x01	; 1
   137ac:	dc 14       	cp	r13, r12
   137ae:	08 f0       	brcs	.+2      	; 0x137b2 <arb_sysMsecDelta+0x70>
   137b0:	20 e0       	ldi	r18, 0x00	; 0
   137b2:	42 2b       	or	r20, r18
   137b4:	26 2f       	mov	r18, r22
   137b6:	2e 19       	sub	r18, r14
   137b8:	e2 2e       	mov	r14, r18
   137ba:	31 e0       	ldi	r19, 0x01	; 1
   137bc:	62 17       	cp	r22, r18
   137be:	08 f0       	brcs	.+2      	; 0x137c2 <arb_sysMsecDelta+0x80>
   137c0:	30 e0       	ldi	r19, 0x00	; 0
   137c2:	ae 2d       	mov	r26, r14
   137c4:	a4 1b       	sub	r26, r20
   137c6:	21 e0       	ldi	r18, 0x01	; 1
   137c8:	ea 16       	cp	r14, r26
   137ca:	08 f0       	brcs	.+2      	; 0x137ce <arb_sysMsecDelta+0x8c>
   137cc:	20 e0       	ldi	r18, 0x00	; 0
   137ce:	32 2b       	or	r19, r18
   137d0:	e7 2f       	mov	r30, r23
   137d2:	ef 19       	sub	r30, r15
   137d4:	fe 2e       	mov	r15, r30
   137d6:	41 e0       	ldi	r20, 0x01	; 1
   137d8:	7e 17       	cp	r23, r30
   137da:	08 f0       	brcs	.+2      	; 0x137de <arb_sysMsecDelta+0x9c>
   137dc:	40 e0       	ldi	r20, 0x00	; 0
   137de:	ff 2d       	mov	r31, r15
   137e0:	f3 1b       	sub	r31, r19
   137e2:	21 e0       	ldi	r18, 0x01	; 1
   137e4:	ff 16       	cp	r15, r31
   137e6:	08 f0       	brcs	.+2      	; 0x137ea <arb_sysMsecDelta+0xa8>
   137e8:	20 e0       	ldi	r18, 0x00	; 0
   137ea:	42 2b       	or	r20, r18
   137ec:	28 2f       	mov	r18, r24
   137ee:	20 1b       	sub	r18, r16
   137f0:	02 2f       	mov	r16, r18
   137f2:	21 e0       	ldi	r18, 0x01	; 1
   137f4:	80 17       	cp	r24, r16
   137f6:	08 f0       	brcs	.+2      	; 0x137fa <arb_sysMsecDelta+0xb8>
   137f8:	20 e0       	ldi	r18, 0x00	; 0
   137fa:	e0 2f       	mov	r30, r16
   137fc:	e4 1b       	sub	r30, r20
   137fe:	81 e0       	ldi	r24, 0x01	; 1
   13800:	0e 17       	cp	r16, r30
   13802:	08 f0       	brcs	.+2      	; 0x13806 <arb_sysMsecDelta+0xc4>
   13804:	80 e0       	ldi	r24, 0x00	; 0
   13806:	28 2b       	or	r18, r24
   13808:	91 1b       	sub	r25, r17
   1380a:	19 2f       	mov	r17, r25
   1380c:	12 1b       	sub	r17, r18
   1380e:	2a 2d       	mov	r18, r10
   13810:	3b 2f       	mov	r19, r27
   13812:	4b 2d       	mov	r20, r11
   13814:	5c 2d       	mov	r21, r12
   13816:	6a 2f       	mov	r22, r26
   13818:	7f 2f       	mov	r23, r31
   1381a:	8e 2f       	mov	r24, r30
   1381c:	91 2f       	mov	r25, r17

   if( l_delta < 0)
   1381e:	b2 f5       	brpl	.+108    	; 0x1388c <arb_sysMsecDelta+0x14a>
      l_delta += ((int64_t)ARB_SYS_TIMER_MAX_MSEC);
   13820:	2a 2d       	mov	r18, r10
   13822:	20 58       	subi	r18, 0x80	; 128
   13824:	31 e0       	ldi	r19, 0x01	; 1
   13826:	2a 15       	cp	r18, r10
   13828:	08 f0       	brcs	.+2      	; 0x1382c <arb_sysMsecDelta+0xea>
   1382a:	30 e0       	ldi	r19, 0x00	; 0
   1382c:	8b 2f       	mov	r24, r27
   1382e:	82 51       	subi	r24, 0x12	; 18
   13830:	51 e0       	ldi	r21, 0x01	; 1
   13832:	8b 17       	cp	r24, r27
   13834:	08 f0       	brcs	.+2      	; 0x13838 <arb_sysMsecDelta+0xf6>
   13836:	50 e0       	ldi	r21, 0x00	; 0
   13838:	38 0f       	add	r19, r24
   1383a:	41 e0       	ldi	r20, 0x01	; 1
   1383c:	38 17       	cp	r19, r24
   1383e:	08 f0       	brcs	.+2      	; 0x13842 <arb_sysMsecDelta+0x100>
   13840:	40 e0       	ldi	r20, 0x00	; 0
   13842:	54 2b       	or	r21, r20
   13844:	8b 2d       	mov	r24, r11
   13846:	8a 5c       	subi	r24, 0xCA	; 202
   13848:	61 e0       	ldi	r22, 0x01	; 1
   1384a:	8b 15       	cp	r24, r11
   1384c:	08 f0       	brcs	.+2      	; 0x13850 <arb_sysMsecDelta+0x10e>
   1384e:	60 e0       	ldi	r22, 0x00	; 0
   13850:	45 2f       	mov	r20, r21
   13852:	48 0f       	add	r20, r24
   13854:	51 e0       	ldi	r21, 0x01	; 1
   13856:	48 17       	cp	r20, r24
   13858:	08 f0       	brcs	.+2      	; 0x1385c <arb_sysMsecDelta+0x11a>
   1385a:	50 e0       	ldi	r21, 0x00	; 0
   1385c:	56 2b       	or	r21, r22
   1385e:	5c 0d       	add	r21, r12
   13860:	81 e0       	ldi	r24, 0x01	; 1
   13862:	5c 15       	cp	r21, r12
   13864:	08 f0       	brcs	.+2      	; 0x13868 <arb_sysMsecDelta+0x126>
   13866:	80 e0       	ldi	r24, 0x00	; 0
   13868:	68 2f       	mov	r22, r24
   1386a:	6a 0f       	add	r22, r26
   1386c:	81 e0       	ldi	r24, 0x01	; 1
   1386e:	6a 17       	cp	r22, r26
   13870:	08 f0       	brcs	.+2      	; 0x13874 <arb_sysMsecDelta+0x132>
   13872:	80 e0       	ldi	r24, 0x00	; 0
   13874:	78 2f       	mov	r23, r24
   13876:	7f 0f       	add	r23, r31
   13878:	81 e0       	ldi	r24, 0x01	; 1
   1387a:	7f 17       	cp	r23, r31
   1387c:	08 f0       	brcs	.+2      	; 0x13880 <arb_sysMsecDelta+0x13e>
   1387e:	80 e0       	ldi	r24, 0x00	; 0
   13880:	8e 0f       	add	r24, r30
   13882:	91 e0       	ldi	r25, 0x01	; 1
   13884:	8e 17       	cp	r24, r30
   13886:	08 f0       	brcs	.+2      	; 0x1388a <arb_sysMsecDelta+0x148>
   13888:	90 e0       	ldi	r25, 0x00	; 0
   1388a:	91 0f       	add	r25, r17

   return (uint64_t)l_delta;

}/*End arb_sysMsecDelta*/
   1388c:	1f 91       	pop	r17
   1388e:	0f 91       	pop	r16
   13890:	ff 90       	pop	r15
   13892:	ef 90       	pop	r14
   13894:	df 90       	pop	r13
   13896:	cf 90       	pop	r12
   13898:	bf 90       	pop	r11
   1389a:	af 90       	pop	r10
   1389c:	08 95       	ret

0001389e <arb_sysTimerEnabled>:

bool arb_sysTimerEnabled( void)
{
   return gb_sysTimerEnabled;
}/*End arb_sysTimerEnabled*/
   1389e:	80 91 a1 25 	lds	r24, 0x25A1
   138a2:	08 95       	ret

000138a4 <arb_setSysTime>:
}/*End arb_sysTimeNow*/

void arb_setSysTime( uint8_t c_hours,
                     uint8_t c_min,
                     uint8_t c_sec)
{
   138a4:	df 93       	push	r29
   138a6:	cf 93       	push	r28
   138a8:	0f 92       	push	r0
   138aa:	cd b7       	in	r28, 0x3d	; 61
   138ac:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * Momentarily disable interrupts while we set the system time
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   138ae:	9f b7       	in	r25, 0x3f	; 63
   138b0:	99 83       	std	Y+1, r25	; 0x01
   138b2:	f8 94       	cli

   gt_sysTime.l_ticks = 0;
   138b4:	10 92 90 25 	sts	0x2590, r1
   138b8:	10 92 91 25 	sts	0x2591, r1
   138bc:	10 92 92 25 	sts	0x2592, r1
   138c0:	10 92 93 25 	sts	0x2593, r1
   138c4:	10 92 94 25 	sts	0x2594, r1
   138c8:	10 92 95 25 	sts	0x2595, r1
   138cc:	10 92 96 25 	sts	0x2596, r1
   138d0:	10 92 97 25 	sts	0x2597, r1
   gt_sysTime.l_msec  = 0;
   138d4:	e8 e8       	ldi	r30, 0x88	; 136
   138d6:	f5 e2       	ldi	r31, 0x25	; 37
   138d8:	10 82       	st	Z, r1
   138da:	11 82       	std	Z+1, r1	; 0x01
   138dc:	12 82       	std	Z+2, r1	; 0x02
   138de:	13 82       	std	Z+3, r1	; 0x03
   138e0:	14 82       	std	Z+4, r1	; 0x04
   138e2:	15 82       	std	Z+5, r1	; 0x05
   138e4:	16 82       	std	Z+6, r1	; 0x06
   138e6:	17 82       	std	Z+7, r1	; 0x07
   gt_sysTime.c_sec   = c_sec;
   138e8:	40 93 9c 25 	sts	0x259C, r20
   gt_sysTime.c_min   = c_min;
   138ec:	60 93 9b 25 	sts	0x259B, r22
   gt_sysTime.c_hours = c_hours;
   138f0:	80 93 9a 25 	sts	0x259A, r24
   gt_sysTime.s_days  = 0;
   138f4:	10 92 98 25 	sts	0x2598, r1
   138f8:	10 92 99 25 	sts	0x2599, r1

   /*------------------------------------------------------------------------*
    * Re-enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   138fc:	89 81       	ldd	r24, Y+1	; 0x01
   138fe:	8f bf       	out	0x3f, r24	; 63

}/*End arb_setSysTime*/
   13900:	0f 90       	pop	r0
   13902:	cf 91       	pop	r28
   13904:	df 91       	pop	r29
   13906:	08 95       	ret

00013908 <arb_resetSysTime>:

void arb_resetSysTime( void)
{
   gt_sysTime.l_ticks = 0;
   13908:	10 92 90 25 	sts	0x2590, r1
   1390c:	10 92 91 25 	sts	0x2591, r1
   13910:	10 92 92 25 	sts	0x2592, r1
   13914:	10 92 93 25 	sts	0x2593, r1
   13918:	10 92 94 25 	sts	0x2594, r1
   1391c:	10 92 95 25 	sts	0x2595, r1
   13920:	10 92 96 25 	sts	0x2596, r1
   13924:	10 92 97 25 	sts	0x2597, r1
   gt_sysTime.l_msec  = 0;
   13928:	e8 e8       	ldi	r30, 0x88	; 136
   1392a:	f5 e2       	ldi	r31, 0x25	; 37
   1392c:	10 82       	st	Z, r1
   1392e:	11 82       	std	Z+1, r1	; 0x01
   13930:	12 82       	std	Z+2, r1	; 0x02
   13932:	13 82       	std	Z+3, r1	; 0x03
   13934:	14 82       	std	Z+4, r1	; 0x04
   13936:	15 82       	std	Z+5, r1	; 0x05
   13938:	16 82       	std	Z+6, r1	; 0x06
   1393a:	17 82       	std	Z+7, r1	; 0x07
   gt_sysTime.c_sec   = 0;
   1393c:	10 92 9c 25 	sts	0x259C, r1
   gt_sysTime.c_min   = 0;
   13940:	10 92 9b 25 	sts	0x259B, r1
   gt_sysTime.c_hours = 0;
   13944:	10 92 9a 25 	sts	0x259A, r1
   gt_sysTime.s_days  = 0;
   13948:	10 92 98 25 	sts	0x2598, r1
   1394c:	10 92 99 25 	sts	0x2599, r1

}/*End arb_resetSysTime*/
   13950:	08 95       	ret

00013952 <arb_sysTimerInit>:
   gb_sysTimerEnabled = false;

}/*End arb_sysTimerStop*/

void arb_sysTimerInit( t_timerModId t_timerId)
{
   13952:	1f 93       	push	r17
   13954:	df 93       	push	r29
   13956:	cf 93       	push	r28
   13958:	00 d0       	rcall	.+0      	; 0x1395a <arb_sysTimerInit+0x8>
   1395a:	00 d0       	rcall	.+0      	; 0x1395c <arb_sysTimerInit+0xa>
   1395c:	cd b7       	in	r28, 0x3d	; 61
   1395e:	de b7       	in	r29, 0x3e	; 62
   13960:	18 2f       	mov	r17, r24
   t_timerConfig t_config;

   /*------------------------------------------------------------------------*
    * Reset the system time
    *------------------------------------------------------------------------*/
   arb_resetSysTime();
   13962:	0e 94 84 9c 	call	0x13908	; 0x13908 <arb_resetSysTime>

   t_sysTimerHandle = hal_requestTimer( t_timerId);
   13966:	81 2f       	mov	r24, r17
   13968:	0e 94 6f 48 	call	0x90de	; 0x90de <hal_requestTimer>
   1396c:	80 93 a2 25 	sts	0x25A2, r24
   13970:	90 93 a3 25 	sts	0x25A3, r25

   if( t_sysTimerHandle < 0)
   13974:	80 91 a2 25 	lds	r24, 0x25A2
   13978:	90 91 a3 25 	lds	r25, 0x25A3
   1397c:	97 fd       	sbrc	r25, 7
   1397e:	23 c0       	rjmp	.+70     	; 0x139c6 <arb_sysTimerInit+0x74>
   {
      exit(0);
   }/*End if( t_sysTimerHandle < 0)*/

   t_config.t_mode   = NORMAL;
   13980:	19 82       	std	Y+1, r1	; 0x01
   t_config.t_dir    = DIRECTION_UP;
   13982:	1a 82       	std	Y+2, r1	; 0x02
   t_config.f_period = ARB_SYS_TIMER_PERIOD;
   13984:	8a e0       	ldi	r24, 0x0A	; 10
   13986:	97 ed       	ldi	r25, 0xD7	; 215
   13988:	a3 e2       	ldi	r26, 0x23	; 35
   1398a:	bc e3       	ldi	r27, 0x3C	; 60
   1398c:	8b 83       	std	Y+3, r24	; 0x03
   1398e:	9c 83       	std	Y+4, r25	; 0x04
   13990:	ad 83       	std	Y+5, r26	; 0x05
   13992:	be 83       	std	Y+6, r27	; 0x06

   if( hal_configureTimer( t_sysTimerHandle, t_config) < 0)
   13994:	80 91 a2 25 	lds	r24, 0x25A2
   13998:	90 91 a3 25 	lds	r25, 0x25A3
   1399c:	20 e0       	ldi	r18, 0x00	; 0
   1399e:	30 e0       	ldi	r19, 0x00	; 0
   139a0:	4b 81       	ldd	r20, Y+3	; 0x03
   139a2:	5c 81       	ldd	r21, Y+4	; 0x04
   139a4:	6d 81       	ldd	r22, Y+5	; 0x05
   139a6:	7e 81       	ldd	r23, Y+6	; 0x06
   139a8:	0e 94 12 46 	call	0x8c24	; 0x8c24 <hal_configureTimer>
   139ac:	87 fd       	sbrc	r24, 7
   139ae:	0b c0       	rjmp	.+22     	; 0x139c6 <arb_sysTimerInit+0x74>
   {
      exit(0);
   }

   if( hal_requestTimerInterrupt( t_sysTimerHandle,
   139b0:	80 91 a2 25 	lds	r24, 0x25A2
   139b4:	90 91 a3 25 	lds	r25, 0x25A3
   139b8:	64 e0       	ldi	r22, 0x04	; 4
   139ba:	4e ee       	ldi	r20, 0xEE	; 238
   139bc:	5c e9       	ldi	r21, 0x9C	; 156
   139be:	0e 94 1e 49 	call	0x923c	; 0x923c <hal_requestTimerInterrupt>
   139c2:	87 ff       	sbrs	r24, 7
   139c4:	04 c0       	rjmp	.+8      	; 0x139ce <arb_sysTimerInit+0x7c>
                                  OVERFLOW,
                                  &sysTimerInterrupt) < 0)
   {
      exit(0);
   139c6:	80 e0       	ldi	r24, 0x00	; 0
   139c8:	90 e0       	ldi	r25, 0x00	; 0
   139ca:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   }

}/*End arb_sysTimerInit*/
   139ce:	26 96       	adiw	r28, 0x06	; 6
   139d0:	cd bf       	out	0x3d, r28	; 61
   139d2:	de bf       	out	0x3e, r29	; 62
   139d4:	cf 91       	pop	r28
   139d6:	df 91       	pop	r29
   139d8:	1f 91       	pop	r17
   139da:	08 95       	ret

000139dc <sysTimerInterrupt>:
{

   /*------------------------------------------------------------------------*
    * Make sure all interrupts are disabled.
    *------------------------------------------------------------------------*/
   HAL_CLI();
   139dc:	f8 94       	cli
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   139de:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   139e0:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   139e2:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   139e4:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   139e6:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   139e8:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   139ea:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   139ec:	0f 92       	push	r0
      asm( "push r1");
   139ee:	1f 92       	push	r1
      asm( "clr r1");
   139f0:	11 24       	eor	r1, r1
      asm( "push r2");
   139f2:	2f 92       	push	r2
      asm( "push r3");
   139f4:	3f 92       	push	r3
      asm( "push r4");
   139f6:	4f 92       	push	r4
      asm( "push r5");
   139f8:	5f 92       	push	r5
      asm( "push r6");
   139fa:	6f 92       	push	r6
      asm( "push r7");
   139fc:	7f 92       	push	r7
      asm( "push r8");
   139fe:	8f 92       	push	r8
      asm( "push r9");
   13a00:	9f 92       	push	r9
      asm( "push r10");
   13a02:	af 92       	push	r10
      asm( "push r11");
   13a04:	bf 92       	push	r11
      asm( "push r12");
   13a06:	cf 92       	push	r12
      asm( "push r13");
   13a08:	df 92       	push	r13
      asm( "push r14");
   13a0a:	ef 92       	push	r14
      asm( "push r15");
   13a0c:	ff 92       	push	r15
      asm( "push r16");
   13a0e:	0f 93       	push	r16
      asm( "push r17");
   13a10:	1f 93       	push	r17
      asm( "push r18");
   13a12:	2f 93       	push	r18
      asm( "push r19");
   13a14:	3f 93       	push	r19
      asm( "push r20");
   13a16:	4f 93       	push	r20
      asm( "push r21");
   13a18:	5f 93       	push	r21
      asm( "push r22");
   13a1a:	6f 93       	push	r22
      asm( "push r23");
   13a1c:	7f 93       	push	r23
      asm( "push r24");
   13a1e:	8f 93       	push	r24
      asm( "push r25");
   13a20:	9f 93       	push	r25
      asm( "push r26");
   13a22:	af 93       	push	r26
      asm( "push r27");
   13a24:	bf 93       	push	r27
      asm( "push r28");
   13a26:	cf 93       	push	r28
      asm( "push r29");
   13a28:	df 93       	push	r29
      asm( "push r30");
   13a2a:	ef 93       	push	r30
      asm( "push r31");
   13a2c:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13a2e:	e0 91 29 22 	lds	r30, 0x2229
   13a32:	f0 91 2a 22 	lds	r31, 0x222A
   13a36:	06 80       	ldd	r0, Z+6	; 0x06
   13a38:	f7 81       	ldd	r31, Z+7	; 0x07
   13a3a:	e0 2d       	mov	r30, r0
   13a3c:	01 90       	ld	r0, Z+
   13a3e:	f0 81       	ld	r31, Z
   13a40:	e0 2d       	mov	r30, r0
   13a42:	e0 93 bb 25 	sts	0x25BB, r30
   13a46:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   13a4a:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   13a4c:	4e b7       	in	r20, 0x3e	; 62
   13a4e:	94 2f       	mov	r25, r20
   13a50:	80 e0       	ldi	r24, 0x00	; 0
   13a52:	30 e0       	ldi	r19, 0x00	; 0
   13a54:	82 2b       	or	r24, r18
   13a56:	93 2b       	or	r25, r19
   13a58:	81 87       	std	Z+9, r24	; 0x09
   13a5a:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   13a5c:	8f ef       	ldi	r24, 0xFF	; 255
   13a5e:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   13a60:	8f e3       	ldi	r24, 0x3F	; 63
   13a62:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   13a64:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   13a68:	d0 91 3e 00 	lds	r29, 0x003E
//PORTF.OUTTGL = PIN_3;
   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13a6c:	e0 91 29 22 	lds	r30, 0x2229
   13a70:	f0 91 2a 22 	lds	r31, 0x222A
   13a74:	06 80       	ldd	r0, Z+6	; 0x06
   13a76:	f7 81       	ldd	r31, Z+7	; 0x07
   13a78:	e0 2d       	mov	r30, r0
   13a7a:	01 90       	ld	r0, Z+
   13a7c:	f0 81       	ld	r31, Z
   13a7e:	e0 2d       	mov	r30, r0
   13a80:	e0 93 a4 25 	sts	0x25A4, r30
   13a84:	f0 93 a5 25 	sts	0x25A5, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   13a88:	03 84       	ldd	r0, Z+11	; 0x0b
   13a8a:	f4 85       	ldd	r31, Z+12	; 0x0c
   13a8c:	e0 2d       	mov	r30, r0
   13a8e:	80 81       	ld	r24, Z
   13a90:	91 81       	ldd	r25, Z+1	; 0x01
   13a92:	8d 5a       	subi	r24, 0xAD	; 173
   13a94:	9e 4d       	sbci	r25, 0xDE	; 222
   13a96:	11 f0       	breq	.+4      	; 0x13a9c <sysTimerInterrupt+0xc0>
   {
      arb_stackOverflow();
   13a98:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change the status of this thread from active to READY.
    *------------------------------------------------------------------------*/
   gpt_temp->t_status = READY;
   13a9c:	e0 91 a4 25 	lds	r30, 0x25A4
   13aa0:	f0 91 a5 25 	lds	r31, 0x25A5
   13aa4:	11 82       	std	Z+1, r1	; 0x01
    *------------------------------------------------------------------------*/

   /*------------------------------------------------------------------------*
    * Update the system timer tick
    *------------------------------------------------------------------------*/
   if( gb_updateSysTime == true)
   13aa6:	80 91 1c 22 	lds	r24, 0x221C
   13aaa:	88 23       	and	r24, r24
   13aac:	11 f0       	breq	.+4      	; 0x13ab2 <sysTimerInterrupt+0xd6>
      updateSystemTime();
   13aae:	0e 94 3a 9a 	call	0x13474	; 0x13474 <updateSystemTime>

   /*------------------------------------------------------------------------*
    * Make sure the system time is updated on each call unless a timer
    * overflow interrupt occurred during a call to 'arb_sysTimeNow'.
    *------------------------------------------------------------------------*/
   gb_updateSysTime = true;
   13ab2:	81 e0       	ldi	r24, 0x01	; 1
   13ab4:	80 93 1c 22 	sts	0x221C, r24

   /*------------------------------------------------------------------------*
    * Decrement the quantum counter for each of the sleeping threads.
    *------------------------------------------------------------------------*/
   arb_updateSleepingThreads();
   13ab8:	0e 94 2f 9f 	call	0x13e5e	; 0x13e5e <arb_updateSleepingThreads>

   /*------------------------------------------------------------------------*
    * See if there is a higher priority thread ready to run.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   13abc:	e0 91 bd 25 	lds	r30, 0x25BD
   13ac0:	f0 91 be 25 	lds	r31, 0x25BE
   13ac4:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   13ac6:	e0 91 29 22 	lds	r30, 0x2229
   13aca:	f0 91 2a 22 	lds	r31, 0x222A
   13ace:	06 80       	ldd	r0, Z+6	; 0x06
   13ad0:	f7 81       	ldd	r31, Z+7	; 0x07
   13ad2:	e0 2d       	mov	r30, r0
   13ad4:	01 90       	ld	r0, Z+
   13ad6:	f0 81       	ld	r31, Z
   13ad8:	e0 2d       	mov	r30, r0
   13ada:	e0 93 bb 25 	sts	0x25BB, r30
   13ade:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   13ae2:	81 85       	ldd	r24, Z+9	; 0x09
   13ae4:	92 85       	ldd	r25, Z+10	; 0x0a
   13ae6:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   13ae8:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   13aea:	ff 91       	pop	r31
      asm( "pop r30");
   13aec:	ef 91       	pop	r30
      asm( "pop r29");
   13aee:	df 91       	pop	r29
      asm( "pop r28");
   13af0:	cf 91       	pop	r28
      asm( "pop r27");
   13af2:	bf 91       	pop	r27
      asm( "pop r26");
   13af4:	af 91       	pop	r26
      asm( "pop r25");
   13af6:	9f 91       	pop	r25
      asm( "pop r24");
   13af8:	8f 91       	pop	r24
      asm( "pop r23");
   13afa:	7f 91       	pop	r23
      asm( "pop r22");
   13afc:	6f 91       	pop	r22
      asm( "pop r21");
   13afe:	5f 91       	pop	r21
      asm( "pop r20");
   13b00:	4f 91       	pop	r20
      asm( "pop r19");
   13b02:	3f 91       	pop	r19
      asm( "pop r18");
   13b04:	2f 91       	pop	r18
      asm( "pop r17");
   13b06:	1f 91       	pop	r17
      asm( "pop r16");
   13b08:	0f 91       	pop	r16
      asm( "pop r15");
   13b0a:	ff 90       	pop	r15
      asm( "pop r14");
   13b0c:	ef 90       	pop	r14
      asm( "pop r13");
   13b0e:	df 90       	pop	r13
      asm( "pop r12");
   13b10:	cf 90       	pop	r12
      asm( "pop r11");
   13b12:	bf 90       	pop	r11
      asm( "pop r10");
   13b14:	af 90       	pop	r10
      asm( "pop r9");
   13b16:	9f 90       	pop	r9
      asm( "pop r8");
   13b18:	8f 90       	pop	r8
      asm( "pop r7");
   13b1a:	7f 90       	pop	r7
      asm( "pop r6");
   13b1c:	6f 90       	pop	r6
      asm( "pop r5");
   13b1e:	5f 90       	pop	r5
      asm( "pop r4");
   13b20:	4f 90       	pop	r4
      asm( "pop r3");
   13b22:	3f 90       	pop	r3
      asm( "pop r2");
   13b24:	2f 90       	pop	r2
      asm( "pop r1");
   13b26:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13b28:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   13b2a:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   13b2c:	0f 90       	pop	r0
    * other AVR's using a reti DOES NOT set the GIE bit in the status register
    * (SREG), rather it returns the PMIC to the state it had before enter-
    * ing the interrupt - which means untoggling the '.... Interrupt Executing
    * flag'.
    *------------------------------------------------------------------------*/
   HAL_RETI();
   13b2e:	18 95       	reti

00013b30 <arb_sysTimerStart>:

t_error arb_sysTimerStart( void)
{
   t_timerError t_err;

   t_err = hal_startTimer( t_sysTimerHandle);
   13b30:	80 91 a2 25 	lds	r24, 0x25A2
   13b34:	90 91 a3 25 	lds	r25, 0x25A3
   13b38:	0e 94 3d 47 	call	0x8e7a	; 0x8e7a <hal_startTimer>

   if( t_err < 0)
   13b3c:	87 ff       	sbrs	r24, 7
   13b3e:	02 c0       	rjmp	.+4      	; 0x13b44 <arb_sysTimerStart+0x14>
   13b40:	86 ef       	ldi	r24, 0xF6	; 246
   13b42:	08 95       	ret
      return ARB_HAL_ERROR;

   gb_sysTimerEnabled = true;
   13b44:	81 e0       	ldi	r24, 0x01	; 1
   13b46:	80 93 a1 25 	sts	0x25A1, r24
   gb_updateSysTime = true;
   13b4a:	80 93 1c 22 	sts	0x221C, r24
   13b4e:	80 e0       	ldi	r24, 0x00	; 0

   return ARB_PASSED;

}/*End arb_sysTimerStart*/
   13b50:	08 95       	ret

00013b52 <arb_sysTimeNow>:
{
   return gb_sysTimerEnabled;
}/*End arb_sysTimerEnabled*/

t_sysTime arb_sysTimeNow( void)
{
   13b52:	2f 92       	push	r2
   13b54:	3f 92       	push	r3
   13b56:	4f 92       	push	r4
   13b58:	5f 92       	push	r5
   13b5a:	6f 92       	push	r6
   13b5c:	7f 92       	push	r7
   13b5e:	8f 92       	push	r8
   13b60:	9f 92       	push	r9
   13b62:	af 92       	push	r10
   13b64:	bf 92       	push	r11
   13b66:	cf 92       	push	r12
   13b68:	df 92       	push	r13
   13b6a:	ef 92       	push	r14
   13b6c:	ff 92       	push	r15
   13b6e:	0f 93       	push	r16
   13b70:	1f 93       	push	r17
   13b72:	df 93       	push	r29
   13b74:	cf 93       	push	r28
   13b76:	cd b7       	in	r28, 0x3d	; 61
   13b78:	de b7       	in	r29, 0x3e	; 62
   13b7a:	2d 97       	sbiw	r28, 0x0d	; 13
   13b7c:	cd bf       	out	0x3d, r28	; 61
   13b7e:	de bf       	out	0x3e, r29	; 62
   13b80:	8c 01       	movw	r16, r24
   uint32_t i_temp;

   /*------------------------------------------------------------------------*
    * Momentarily disable interrupts while we read the system time
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   13b82:	8f b7       	in	r24, 0x3f	; 63
   13b84:	89 83       	std	Y+1, r24	; 0x01
   13b86:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Has the timer period expired?
    *------------------------------------------------------------------------*/
   if( hal_getIntStatus( t_sysTimerHandle, OVERFLOW) > 0)
   13b88:	80 91 a2 25 	lds	r24, 0x25A2
   13b8c:	90 91 a3 25 	lds	r25, 0x25A3
   13b90:	64 e0       	ldi	r22, 0x04	; 4
   13b92:	0e 94 00 48 	call	0x9000	; 0x9000 <hal_getIntStatus>
   13b96:	18 16       	cp	r1, r24
   13b98:	19 06       	cpc	r1, r25
   13b9a:	24 f4       	brge	.+8      	; 0x13ba4 <arb_sysTimeNow+0x52>
      /*---------------------------------------------------------------------*
       * Interrupt occurred while reading the system timer, therefore since
       * the system will vector to the interrupt routine only allow one update
       * of the system time.
       *---------------------------------------------------------------------*/
      gb_updateSysTime = false;
   13b9c:	10 92 1c 22 	sts	0x221C, r1
      updateSystemTime();
   13ba0:	0e 94 3a 9a 	call	0x13474	; 0x13474 <updateSystemTime>
   }

   /*------------------------------------------------------------------------*
    * Read the timer register
    *------------------------------------------------------------------------*/
   s_curTick = hal_getTimerCount( t_sysTimerHandle);
   13ba4:	80 91 a2 25 	lds	r24, 0x25A2
   13ba8:	90 91 a3 25 	lds	r25, 0x25A3
   13bac:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <hal_getTimerCount>
   13bb0:	5b 01       	movw	r10, r22

   /*------------------------------------------------------------------------*
    * Get current time snapshot
    *------------------------------------------------------------------------*/
   t_currTime.l_ticks = gt_sysTime.l_ticks + (uint64_t)s_curTick;
   13bb2:	9b 01       	movw	r18, r22
   13bb4:	40 e0       	ldi	r20, 0x00	; 0
   13bb6:	50 e0       	ldi	r21, 0x00	; 0
   13bb8:	60 e0       	ldi	r22, 0x00	; 0
   13bba:	70 e0       	ldi	r23, 0x00	; 0
   13bbc:	80 e0       	ldi	r24, 0x00	; 0
   13bbe:	90 e0       	ldi	r25, 0x00	; 0
   13bc0:	40 90 90 25 	lds	r4, 0x2590
   13bc4:	e0 91 91 25 	lds	r30, 0x2591
   13bc8:	b0 91 92 25 	lds	r27, 0x2592
   13bcc:	f0 90 93 25 	lds	r15, 0x2593
   13bd0:	e0 90 94 25 	lds	r14, 0x2594
   13bd4:	d0 90 95 25 	lds	r13, 0x2595
   13bd8:	c0 90 96 25 	lds	r12, 0x2596
   13bdc:	90 90 97 25 	lds	r9, 0x2597
   13be0:	4a 0c       	add	r4, r10
   13be2:	a1 e0       	ldi	r26, 0x01	; 1
   13be4:	4a 14       	cp	r4, r10
   13be6:	08 f0       	brcs	.+2      	; 0x13bea <arb_sysTimeNow+0x98>
   13be8:	a0 e0       	ldi	r26, 0x00	; 0
   13bea:	e3 0f       	add	r30, r19
   13bec:	f1 e0       	ldi	r31, 0x01	; 1
   13bee:	e3 17       	cp	r30, r19
   13bf0:	08 f0       	brcs	.+2      	; 0x13bf4 <arb_sysTimeNow+0xa2>
   13bf2:	f0 e0       	ldi	r31, 0x00	; 0
   13bf4:	ae 0f       	add	r26, r30
   13bf6:	af 83       	std	Y+7, r26	; 0x07
   13bf8:	a1 e0       	ldi	r26, 0x01	; 1
   13bfa:	8f 80       	ldd	r8, Y+7	; 0x07
   13bfc:	8e 16       	cp	r8, r30
   13bfe:	08 f0       	brcs	.+2      	; 0x13c02 <arb_sysTimeNow+0xb0>
   13c00:	a0 e0       	ldi	r26, 0x00	; 0
   13c02:	fa 2b       	or	r31, r26
   13c04:	e1 e0       	ldi	r30, 0x01	; 1
   13c06:	b4 17       	cp	r27, r20
   13c08:	08 f0       	brcs	.+2      	; 0x13c0c <arb_sysTimeNow+0xba>
   13c0a:	e0 e0       	ldi	r30, 0x00	; 0
   13c0c:	fb 0f       	add	r31, r27
   13c0e:	f8 87       	std	Y+8, r31	; 0x08
   13c10:	f1 e0       	ldi	r31, 0x01	; 1
   13c12:	a8 85       	ldd	r26, Y+8	; 0x08
   13c14:	ab 17       	cp	r26, r27
   13c16:	08 f0       	brcs	.+2      	; 0x13c1a <arb_sysTimeNow+0xc8>
   13c18:	f0 e0       	ldi	r31, 0x00	; 0
   13c1a:	ef 2b       	or	r30, r31
   13c1c:	f1 e0       	ldi	r31, 0x01	; 1
   13c1e:	f5 16       	cp	r15, r21
   13c20:	08 f0       	brcs	.+2      	; 0x13c24 <arb_sysTimeNow+0xd2>
   13c22:	f0 e0       	ldi	r31, 0x00	; 0
   13c24:	ef 0d       	add	r30, r15
   13c26:	e9 87       	std	Y+9, r30	; 0x09
   13c28:	e1 e0       	ldi	r30, 0x01	; 1
   13c2a:	b9 85       	ldd	r27, Y+9	; 0x09
   13c2c:	bf 15       	cp	r27, r15
   13c2e:	08 f0       	brcs	.+2      	; 0x13c32 <arb_sysTimeNow+0xe0>
   13c30:	e0 e0       	ldi	r30, 0x00	; 0
   13c32:	fe 2b       	or	r31, r30
   13c34:	e1 e0       	ldi	r30, 0x01	; 1
   13c36:	e6 16       	cp	r14, r22
   13c38:	08 f0       	brcs	.+2      	; 0x13c3c <arb_sysTimeNow+0xea>
   13c3a:	e0 e0       	ldi	r30, 0x00	; 0
   13c3c:	fe 0d       	add	r31, r14
   13c3e:	fa 87       	std	Y+10, r31	; 0x0a
   13c40:	f1 e0       	ldi	r31, 0x01	; 1
   13c42:	8a 84       	ldd	r8, Y+10	; 0x0a
   13c44:	8e 14       	cp	r8, r14
   13c46:	08 f0       	brcs	.+2      	; 0x13c4a <arb_sysTimeNow+0xf8>
   13c48:	f0 e0       	ldi	r31, 0x00	; 0
   13c4a:	ef 2b       	or	r30, r31
   13c4c:	f1 e0       	ldi	r31, 0x01	; 1
   13c4e:	d7 16       	cp	r13, r23
   13c50:	08 f0       	brcs	.+2      	; 0x13c54 <arb_sysTimeNow+0x102>
   13c52:	f0 e0       	ldi	r31, 0x00	; 0
   13c54:	ed 0d       	add	r30, r13
   13c56:	eb 87       	std	Y+11, r30	; 0x0b
   13c58:	e1 e0       	ldi	r30, 0x01	; 1
   13c5a:	ab 85       	ldd	r26, Y+11	; 0x0b
   13c5c:	ad 15       	cp	r26, r13
   13c5e:	08 f0       	brcs	.+2      	; 0x13c62 <arb_sysTimeNow+0x110>
   13c60:	e0 e0       	ldi	r30, 0x00	; 0
   13c62:	fe 2b       	or	r31, r30
   13c64:	e1 e0       	ldi	r30, 0x01	; 1
   13c66:	c8 16       	cp	r12, r24
   13c68:	08 f0       	brcs	.+2      	; 0x13c6c <arb_sysTimeNow+0x11a>
   13c6a:	e0 e0       	ldi	r30, 0x00	; 0
   13c6c:	fc 0d       	add	r31, r12
   13c6e:	fc 87       	std	Y+12, r31	; 0x0c
   13c70:	21 e0       	ldi	r18, 0x01	; 1
   13c72:	fc 15       	cp	r31, r12
   13c74:	08 f0       	brcs	.+2      	; 0x13c78 <arb_sysTimeNow+0x126>
   13c76:	20 e0       	ldi	r18, 0x00	; 0
   13c78:	6e 2e       	mov	r6, r30
   13c7a:	62 2a       	or	r6, r18
   13c7c:	69 0c       	add	r6, r9
   t_currTime.c_sec   = gt_sysTime.c_sec;
   13c7e:	b0 91 9c 25 	lds	r27, 0x259C
   13c82:	be 83       	std	Y+6, r27	; 0x06
   t_currTime.c_min   = gt_sysTime.c_min;
   13c84:	e0 91 9b 25 	lds	r30, 0x259B
   13c88:	ed 83       	std	Y+5, r30	; 0x05
   t_currTime.c_hours = gt_sysTime.c_hours;
   13c8a:	f0 91 9a 25 	lds	r31, 0x259A
   13c8e:	fc 83       	std	Y+4, r31	; 0x04
   t_currTime.s_days  = gt_sysTime.s_days;
   13c90:	80 91 98 25 	lds	r24, 0x2598
   13c94:	90 91 99 25 	lds	r25, 0x2599
   13c98:	8a 83       	std	Y+2, r24	; 0x02
   13c9a:	9b 83       	std	Y+3, r25	; 0x03
   i_temp = (uint32_t)s_curTick*(uint32_t)ARB_SYS_TIMER_USEC_PER_TICK;
   13c9c:	b5 01       	movw	r22, r10
   13c9e:	80 e0       	ldi	r24, 0x00	; 0
   13ca0:	90 e0       	ldi	r25, 0x00	; 0
   13ca2:	66 0f       	add	r22, r22
   13ca4:	77 1f       	adc	r23, r23
   13ca6:	88 1f       	adc	r24, r24
   13ca8:	99 1f       	adc	r25, r25
   t_currTime.i_usec  = gt_sysTime.i_usec + i_temp;
   13caa:	c0 90 9d 25 	lds	r12, 0x259D
   13cae:	d0 90 9e 25 	lds	r13, 0x259E
   13cb2:	e0 90 9f 25 	lds	r14, 0x259F
   13cb6:	f0 90 a0 25 	lds	r15, 0x25A0
   13cba:	c6 0e       	add	r12, r22
   13cbc:	d7 1e       	adc	r13, r23
   13cbe:	e8 1e       	adc	r14, r24
   13cc0:	f9 1e       	adc	r15, r25
   t_currTime.l_msec  = gt_sysTime.l_msec + (uint64_t)(i_temp / 1000);

   /*------------------------------------------------------------------------*
    * Re-enable interrupts
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
   13cc2:	29 81       	ldd	r18, Y+1	; 0x01
   13cc4:	2f bf       	out	0x3f, r18	; 63

   return t_currTime;
   13cc6:	28 ee       	ldi	r18, 0xE8	; 232
   13cc8:	33 e0       	ldi	r19, 0x03	; 3
   13cca:	40 e0       	ldi	r20, 0x00	; 0
   13ccc:	50 e0       	ldi	r21, 0x00	; 0
   13cce:	0e 94 76 b9 	call	0x172ec	; 0x172ec <__udivmodsi4>
   13cd2:	60 e0       	ldi	r22, 0x00	; 0
   13cd4:	70 e0       	ldi	r23, 0x00	; 0
   13cd6:	80 e0       	ldi	r24, 0x00	; 0
   13cd8:	90 e0       	ldi	r25, 0x00	; 0
   13cda:	90 90 88 25 	lds	r9, 0x2588
   13cde:	e0 91 89 25 	lds	r30, 0x2589
   13ce2:	b0 91 8a 25 	lds	r27, 0x258A
   13ce6:	70 90 8b 25 	lds	r7, 0x258B
   13cea:	b0 90 8c 25 	lds	r11, 0x258C
   13cee:	a0 90 8d 25 	lds	r10, 0x258D
   13cf2:	80 90 8e 25 	lds	r8, 0x258E
   13cf6:	20 90 8f 25 	lds	r2, 0x258F
   13cfa:	92 0e       	add	r9, r18
   13cfc:	f1 e0       	ldi	r31, 0x01	; 1
   13cfe:	92 16       	cp	r9, r18
   13d00:	08 f0       	brcs	.+2      	; 0x13d04 <arb_sysTimeNow+0x1b2>
   13d02:	f0 e0       	ldi	r31, 0x00	; 0
   13d04:	e3 0f       	add	r30, r19
   13d06:	a1 e0       	ldi	r26, 0x01	; 1
   13d08:	e3 17       	cp	r30, r19
   13d0a:	08 f0       	brcs	.+2      	; 0x13d0e <arb_sysTimeNow+0x1bc>
   13d0c:	a0 e0       	ldi	r26, 0x00	; 0
   13d0e:	3f 2e       	mov	r3, r31
   13d10:	3e 0e       	add	r3, r30
   13d12:	f1 e0       	ldi	r31, 0x01	; 1
   13d14:	3e 16       	cp	r3, r30
   13d16:	08 f0       	brcs	.+2      	; 0x13d1a <arb_sysTimeNow+0x1c8>
   13d18:	f0 e0       	ldi	r31, 0x00	; 0
   13d1a:	af 2b       	or	r26, r31
   13d1c:	e4 2f       	mov	r30, r20
   13d1e:	eb 0f       	add	r30, r27
   13d20:	b1 e0       	ldi	r27, 0x01	; 1
   13d22:	e4 17       	cp	r30, r20
   13d24:	08 f0       	brcs	.+2      	; 0x13d28 <arb_sysTimeNow+0x1d6>
   13d26:	b0 e0       	ldi	r27, 0x00	; 0
   13d28:	5a 2e       	mov	r5, r26
   13d2a:	5e 0e       	add	r5, r30
   13d2c:	f1 e0       	ldi	r31, 0x01	; 1
   13d2e:	5e 16       	cp	r5, r30
   13d30:	08 f0       	brcs	.+2      	; 0x13d34 <arb_sysTimeNow+0x1e2>
   13d32:	f0 e0       	ldi	r31, 0x00	; 0
   13d34:	bf 2b       	or	r27, r31
   13d36:	e5 2f       	mov	r30, r21
   13d38:	e7 0d       	add	r30, r7
   13d3a:	f1 e0       	ldi	r31, 0x01	; 1
   13d3c:	e5 17       	cp	r30, r21
   13d3e:	08 f0       	brcs	.+2      	; 0x13d42 <arb_sysTimeNow+0x1f0>
   13d40:	f0 e0       	ldi	r31, 0x00	; 0
   13d42:	7b 2e       	mov	r7, r27
   13d44:	7e 0e       	add	r7, r30
   13d46:	a1 e0       	ldi	r26, 0x01	; 1
   13d48:	7e 16       	cp	r7, r30
   13d4a:	08 f0       	brcs	.+2      	; 0x13d4e <arb_sysTimeNow+0x1fc>
   13d4c:	a0 e0       	ldi	r26, 0x00	; 0
   13d4e:	fa 2b       	or	r31, r26
   13d50:	e1 e0       	ldi	r30, 0x01	; 1
   13d52:	b6 16       	cp	r11, r22
   13d54:	08 f0       	brcs	.+2      	; 0x13d58 <arb_sysTimeNow+0x206>
   13d56:	e0 e0       	ldi	r30, 0x00	; 0
   13d58:	fb 0d       	add	r31, r11
   13d5a:	fd 87       	std	Y+13, r31	; 0x0d
   13d5c:	f1 e0       	ldi	r31, 0x01	; 1
   13d5e:	ad 85       	ldd	r26, Y+13	; 0x0d
   13d60:	ab 15       	cp	r26, r11
   13d62:	08 f0       	brcs	.+2      	; 0x13d66 <arb_sysTimeNow+0x214>
   13d64:	f0 e0       	ldi	r31, 0x00	; 0
   13d66:	ef 2b       	or	r30, r31
   13d68:	f1 e0       	ldi	r31, 0x01	; 1
   13d6a:	a7 16       	cp	r10, r23
   13d6c:	08 f0       	brcs	.+2      	; 0x13d70 <arb_sysTimeNow+0x21e>
   13d6e:	f0 e0       	ldi	r31, 0x00	; 0
   13d70:	be 2e       	mov	r11, r30
   13d72:	ba 0c       	add	r11, r10
   13d74:	e1 e0       	ldi	r30, 0x01	; 1
   13d76:	ba 14       	cp	r11, r10
   13d78:	08 f0       	brcs	.+2      	; 0x13d7c <arb_sysTimeNow+0x22a>
   13d7a:	e0 e0       	ldi	r30, 0x00	; 0
   13d7c:	fe 2b       	or	r31, r30
   13d7e:	e1 e0       	ldi	r30, 0x01	; 1
   13d80:	88 16       	cp	r8, r24
   13d82:	08 f0       	brcs	.+2      	; 0x13d86 <arb_sysTimeNow+0x234>
   13d84:	e0 e0       	ldi	r30, 0x00	; 0
   13d86:	9f 2f       	mov	r25, r31
   13d88:	98 0d       	add	r25, r8
   13d8a:	81 e0       	ldi	r24, 0x01	; 1
   13d8c:	98 15       	cp	r25, r8
   13d8e:	08 f0       	brcs	.+2      	; 0x13d92 <arb_sysTimeNow+0x240>
   13d90:	80 e0       	ldi	r24, 0x00	; 0
   13d92:	e8 2b       	or	r30, r24
   13d94:	e2 0d       	add	r30, r2
   13d96:	d8 01       	movw	r26, r16
   13d98:	9c 92       	st	X, r9
   13d9a:	11 96       	adiw	r26, 0x01	; 1
   13d9c:	3c 92       	st	X, r3
   13d9e:	11 97       	sbiw	r26, 0x01	; 1
   13da0:	12 96       	adiw	r26, 0x02	; 2
   13da2:	5c 92       	st	X, r5
   13da4:	12 97       	sbiw	r26, 0x02	; 2
   13da6:	13 96       	adiw	r26, 0x03	; 3
   13da8:	7c 92       	st	X, r7
   13daa:	13 97       	sbiw	r26, 0x03	; 3
   13dac:	fd 85       	ldd	r31, Y+13	; 0x0d
   13dae:	14 96       	adiw	r26, 0x04	; 4
   13db0:	fc 93       	st	X, r31
   13db2:	14 97       	sbiw	r26, 0x04	; 4
   13db4:	15 96       	adiw	r26, 0x05	; 5
   13db6:	bc 92       	st	X, r11
   13db8:	15 97       	sbiw	r26, 0x05	; 5
   13dba:	16 96       	adiw	r26, 0x06	; 6
   13dbc:	9c 93       	st	X, r25
   13dbe:	16 97       	sbiw	r26, 0x06	; 6
   13dc0:	17 96       	adiw	r26, 0x07	; 7
   13dc2:	ec 93       	st	X, r30
   13dc4:	17 97       	sbiw	r26, 0x07	; 7
   13dc6:	55 96       	adiw	r26, 0x15	; 21
   13dc8:	cd 92       	st	X+, r12
   13dca:	dd 92       	st	X+, r13
   13dcc:	ed 92       	st	X+, r14
   13dce:	fc 92       	st	X, r15
   13dd0:	58 97       	sbiw	r26, 0x18	; 24
   13dd2:	ea 81       	ldd	r30, Y+2	; 0x02
   13dd4:	fb 81       	ldd	r31, Y+3	; 0x03
   13dd6:	50 96       	adiw	r26, 0x10	; 16
   13dd8:	ed 93       	st	X+, r30
   13dda:	fc 93       	st	X, r31
   13ddc:	51 97       	sbiw	r26, 0x11	; 17
   13dde:	fc 81       	ldd	r31, Y+4	; 0x04
   13de0:	52 96       	adiw	r26, 0x12	; 18
   13de2:	fc 93       	st	X, r31
   13de4:	52 97       	sbiw	r26, 0x12	; 18
   13de6:	8d 80       	ldd	r8, Y+5	; 0x05
   13de8:	53 96       	adiw	r26, 0x13	; 19
   13dea:	8c 92       	st	X, r8
   13dec:	53 97       	sbiw	r26, 0x13	; 19
   13dee:	8e 81       	ldd	r24, Y+6	; 0x06
   13df0:	54 96       	adiw	r26, 0x14	; 20
   13df2:	8c 93       	st	X, r24
   13df4:	54 97       	sbiw	r26, 0x14	; 20
   13df6:	18 96       	adiw	r26, 0x08	; 8
   13df8:	4c 92       	st	X, r4
   13dfa:	18 97       	sbiw	r26, 0x08	; 8
   13dfc:	9f 81       	ldd	r25, Y+7	; 0x07
   13dfe:	19 96       	adiw	r26, 0x09	; 9
   13e00:	9c 93       	st	X, r25
   13e02:	19 97       	sbiw	r26, 0x09	; 9
   13e04:	e8 85       	ldd	r30, Y+8	; 0x08
   13e06:	1a 96       	adiw	r26, 0x0a	; 10
   13e08:	ec 93       	st	X, r30
   13e0a:	1a 97       	sbiw	r26, 0x0a	; 10
   13e0c:	f9 85       	ldd	r31, Y+9	; 0x09
   13e0e:	1b 96       	adiw	r26, 0x0b	; 11
   13e10:	fc 93       	st	X, r31
   13e12:	1b 97       	sbiw	r26, 0x0b	; 11
   13e14:	8a 84       	ldd	r8, Y+10	; 0x0a
   13e16:	1c 96       	adiw	r26, 0x0c	; 12
   13e18:	8c 92       	st	X, r8
   13e1a:	1c 97       	sbiw	r26, 0x0c	; 12
   13e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
   13e1e:	1d 96       	adiw	r26, 0x0d	; 13
   13e20:	8c 93       	st	X, r24
   13e22:	1d 97       	sbiw	r26, 0x0d	; 13
   13e24:	9c 85       	ldd	r25, Y+12	; 0x0c
   13e26:	1e 96       	adiw	r26, 0x0e	; 14
   13e28:	9c 93       	st	X, r25
   13e2a:	1e 97       	sbiw	r26, 0x0e	; 14
   13e2c:	1f 96       	adiw	r26, 0x0f	; 15
   13e2e:	6c 92       	st	X, r6

}/*End arb_sysTimeNow*/
   13e30:	c8 01       	movw	r24, r16
   13e32:	2d 96       	adiw	r28, 0x0d	; 13
   13e34:	cd bf       	out	0x3d, r28	; 61
   13e36:	de bf       	out	0x3e, r29	; 62
   13e38:	cf 91       	pop	r28
   13e3a:	df 91       	pop	r29
   13e3c:	1f 91       	pop	r17
   13e3e:	0f 91       	pop	r16
   13e40:	ff 90       	pop	r15
   13e42:	ef 90       	pop	r14
   13e44:	df 90       	pop	r13
   13e46:	cf 90       	pop	r12
   13e48:	bf 90       	pop	r11
   13e4a:	af 90       	pop	r10
   13e4c:	9f 90       	pop	r9
   13e4e:	8f 90       	pop	r8
   13e50:	7f 90       	pop	r7
   13e52:	6f 90       	pop	r6
   13e54:	5f 90       	pop	r5
   13e56:	4f 90       	pop	r4
   13e58:	3f 90       	pop	r3
   13e5a:	2f 90       	pop	r2
   13e5c:	08 95       	ret

00013e5e <arb_updateSleepingThreads>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void arb_updateSleepingThreads( void)
{
   13e5e:	df 93       	push	r29
   13e60:	cf 93       	push	r28
   13e62:	0f 92       	push	r0
   13e64:	0f 92       	push	r0
   13e66:	cd b7       	in	r28, 0x3d	; 61
   13e68:	de b7       	in	r29, 0x3e	; 62

	/*------------------------------------------------------------------------*
	 * Starting with the head of the list, loop through all the threads
    * and update the ones that are sleeping.
	 *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   13e6a:	e0 91 29 22 	lds	r30, 0x2229
   13e6e:	f0 91 2a 22 	lds	r31, 0x222A
   13e72:	22 81       	ldd	r18, Z+2	; 0x02
   13e74:	33 81       	ldd	r19, Z+3	; 0x03
   13e76:	e0 91 29 22 	lds	r30, 0x2229
   13e7a:	f0 91 2a 22 	lds	r31, 0x222A
   13e7e:	14 c0       	rjmp	.+40     	; 0x13ea8 <arb_updateSleepingThreads+0x4a>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   13e80:	e9 81       	ldd	r30, Y+1	; 0x01
   13e82:	fa 81       	ldd	r31, Y+2	; 0x02
   13e84:	01 90       	ld	r0, Z+
   13e86:	f0 81       	ld	r31, Z
   13e88:	e0 2d       	mov	r30, r0
      if( pt_temp->t_status == SLEEPING)
   13e8a:	81 81       	ldd	r24, Z+1	; 0x01
   13e8c:	83 30       	cpi	r24, 0x03	; 3
   13e8e:	41 f4       	brne	.+16     	; 0x13ea0 <arb_updateSleepingThreads+0x42>
      {
         pt_temp->s_quantum--;
   13e90:	83 81       	ldd	r24, Z+3	; 0x03
   13e92:	94 81       	ldd	r25, Z+4	; 0x04
   13e94:	01 97       	sbiw	r24, 0x01	; 1
   13e96:	83 83       	std	Z+3, r24	; 0x03
   13e98:	94 83       	std	Z+4, r25	; 0x04

         /*------------------------------------------------------------------*
          * Are we done with our nap?
          *------------------------------------------------------------------*/
         if( pt_temp->s_quantum <= 0)
   13e9a:	89 2b       	or	r24, r25
   13e9c:	09 f4       	brne	.+2      	; 0x13ea0 <arb_updateSleepingThreads+0x42>
         {
            pt_temp->t_status = READY;
   13e9e:	11 82       	std	Z+1, r1	; 0x01

	/*------------------------------------------------------------------------*
	 * Starting with the head of the list, loop through all the threads
    * and update the ones that are sleeping.
	 *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   13ea0:	21 50       	subi	r18, 0x01	; 1
   13ea2:	30 40       	sbci	r19, 0x00	; 0
   13ea4:	e9 81       	ldd	r30, Y+1	; 0x01
   13ea6:	fa 81       	ldd	r31, Y+2	; 0x02
   13ea8:	80 85       	ldd	r24, Z+8	; 0x08
   13eaa:	91 85       	ldd	r25, Z+9	; 0x09
   13eac:	89 83       	std	Y+1, r24	; 0x01
   13eae:	9a 83       	std	Y+2, r25	; 0x02
   13eb0:	21 15       	cp	r18, r1
   13eb2:	31 05       	cpc	r19, r1
   13eb4:	29 f7       	brne	.-54     	; 0x13e80 <arb_updateSleepingThreads+0x22>
         }/*End if( pt_temp->s_quantum <= 0)*/

      }/*End if( pt_temp->t_status == SLEEPING)*/
   }

}/*End arb_updateSleepingThreads*/
   13eb6:	0f 90       	pop	r0
   13eb8:	0f 90       	pop	r0
   13eba:	cf 91       	pop	r28
   13ebc:	df 91       	pop	r29
   13ebe:	08 95       	ret

00013ec0 <arb_threadCreate>:
                               t_parameters t_parms,
                               t_arguments t_args,
                               t_stackSize t_stack,
                               t_thrdPrio t_priority)

{
   13ec0:	5f 92       	push	r5
   13ec2:	6f 92       	push	r6
   13ec4:	7f 92       	push	r7
   13ec6:	8f 92       	push	r8
   13ec8:	9f 92       	push	r9
   13eca:	af 92       	push	r10
   13ecc:	bf 92       	push	r11
   13ece:	cf 92       	push	r12
   13ed0:	df 92       	push	r13
   13ed2:	ef 92       	push	r14
   13ed4:	ff 92       	push	r15
   13ed6:	0f 93       	push	r16
   13ed8:	1f 93       	push	r17
   13eda:	df 93       	push	r29
   13edc:	cf 93       	push	r28
   13ede:	00 d0       	rcall	.+0      	; 0x13ee0 <arb_threadCreate+0x20>
   13ee0:	cd b7       	in	r28, 0x3d	; 61
   13ee2:	de b7       	in	r29, 0x3e	; 62
   13ee4:	5c 01       	movw	r10, r24
   13ee6:	4b 01       	movw	r8, r22
   13ee8:	3a 01       	movw	r6, r20
   13eea:	79 01       	movw	r14, r18
   13eec:	50 2e       	mov	r5, r16
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   13eee:	8f b7       	in	r24, 0x3f	; 63
   13ef0:	89 83       	std	Y+1, r24	; 0x01
   13ef2:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * See if this thread has the same priority as another.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   13ef4:	e0 91 29 22 	lds	r30, 0x2229
   13ef8:	f0 91 2a 22 	lds	r31, 0x222A
   13efc:	22 81       	ldd	r18, Z+2	; 0x02
   13efe:	33 81       	ldd	r19, Z+3	; 0x03
   13f00:	e0 91 29 22 	lds	r30, 0x2229
   13f04:	f0 91 2a 22 	lds	r31, 0x222A
   13f08:	11 c0       	rjmp	.+34     	; 0x13f2c <arb_threadCreate+0x6c>
   {
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   13f0a:	ea 81       	ldd	r30, Y+2	; 0x02
   13f0c:	fb 81       	ldd	r31, Y+3	; 0x03
      if( pt_temp->t_priority == t_priority)
   13f0e:	01 90       	ld	r0, Z+
   13f10:	f0 81       	ld	r31, Z
   13f12:	e0 2d       	mov	r30, r0
   13f14:	82 81       	ldd	r24, Z+2	; 0x02
   13f16:	85 15       	cp	r24, r5
   13f18:	29 f4       	brne	.+10     	; 0x13f24 <arb_threadCreate+0x64>
      {
         HAL_END_CRITICAL();
   13f1a:	89 81       	ldd	r24, Y+1	; 0x01
   13f1c:	8f bf       	out	0x3f, r24	; 63
   13f1e:	28 ef       	ldi	r18, 0xF8	; 248
   13f20:	3f ef       	ldi	r19, 0xFF	; 255
   13f22:	52 c0       	rjmp	.+164    	; 0x13fc8 <arb_threadCreate+0x108>
   HAL_BEGIN_CRITICAL();

   /*------------------------------------------------------------------------*
    * See if this thread has the same priority as another.
    *------------------------------------------------------------------------*/
   UTL_TRAVERSE_CONTAINER_HEAD( t_linkHndl, gt_activeThreads, s_count)
   13f24:	21 50       	subi	r18, 0x01	; 1
   13f26:	30 40       	sbci	r19, 0x00	; 0
   13f28:	ea 81       	ldd	r30, Y+2	; 0x02
   13f2a:	fb 81       	ldd	r31, Y+3	; 0x03
   13f2c:	80 85       	ldd	r24, Z+8	; 0x08
   13f2e:	91 85       	ldd	r25, Z+9	; 0x09
   13f30:	8a 83       	std	Y+2, r24	; 0x02
   13f32:	9b 83       	std	Y+3, r25	; 0x03
   13f34:	21 15       	cp	r18, r1
   13f36:	31 05       	cpc	r19, r1
   13f38:	41 f7       	brne	.-48     	; 0x13f0a <arb_threadCreate+0x4a>
   }

   /*------------------------------------------------------------------------*
    * Create a new link handle with room at the end for the thread's stack...
    *------------------------------------------------------------------------*/
   t_linkHndl = utl_createLink( sizeof(t_tcb) + (uint16_t)t_stack +
   13f3a:	c7 01       	movw	r24, r14
   13f3c:	ca 96       	adiw	r24, 0x3a	; 58
   13f3e:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   13f42:	8a 83       	std	Y+2, r24	; 0x02
   13f44:	9b 83       	std	Y+3, r25	; 0x03
   (uint16_t)ARB_EXTRA_STACK_BYTES);

   if( t_linkHndl < 0)
   13f46:	8a 81       	ldd	r24, Y+2	; 0x02
   13f48:	9b 81       	ldd	r25, Y+3	; 0x03
   13f4a:	97 ff       	sbrs	r25, 7
   13f4c:	05 c0       	rjmp	.+10     	; 0x13f58 <arb_threadCreate+0x98>
   {
      HAL_END_CRITICAL();//Enable interrupts
   13f4e:	89 81       	ldd	r24, Y+1	; 0x01
   13f50:	8f bf       	out	0x3f, r24	; 63
   13f52:	2f ef       	ldi	r18, 0xFF	; 255
   13f54:	3f ef       	ldi	r19, 0xFF	; 255
   13f56:	38 c0       	rjmp	.+112    	; 0x13fc8 <arb_threadCreate+0x108>

   /*------------------------------------------------------------------------*
    * Get a ptr to the link's element- which is the area where information
    * about the thread is stored.
    *------------------------------------------------------------------------*/
   pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR( t_linkHndl);
   13f58:	ea 81       	ldd	r30, Y+2	; 0x02
   13f5a:	fb 81       	ldd	r31, Y+3	; 0x03
   13f5c:	c0 80       	ld	r12, Z
   13f5e:	d1 80       	ldd	r13, Z+1	; 0x01

   /*------------------------------------------------------------------------*
    * Initialize the stack ptr to the location of the buffer which starts
    * with the adjacent address location.
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->ps_stack = (uint16_t *)((&(*pt_newTcb)->ps_stack) + 1);
   13f60:	96 01       	movw	r18, r12
   13f62:	23 5f       	subi	r18, 0xF3	; 243
   13f64:	3f 4f       	sbci	r19, 0xFF	; 255
   13f66:	f6 01       	movw	r30, r12
   13f68:	23 87       	std	Z+11, r18	; 0x0b
   13f6a:	34 87       	std	Z+12, r19	; 0x0c

   /*------------------------------------------------------------------------*
    * Insert the overflow checksum at the start of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->ps_stack[0] = ARB_STACK_OVERFLOW_CHECK;
   13f6c:	8d ea       	ldi	r24, 0xAD	; 173
   13f6e:	9e ed       	ldi	r25, 0xDE	; 222
   13f70:	85 87       	std	Z+13, r24	; 0x0d
   13f72:	96 87       	std	Z+14, r25	; 0x0e
   pc_stackPtr = (uint8_t *)&(*pt_newTcb)->ps_stack[0];

   /*------------------------------------------------------------------------*
    * Save the starting address of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_stackStart = (uint16_t)pc_stackPtr;
   13f74:	25 83       	std	Z+5, r18	; 0x05
   13f76:	36 83       	std	Z+6, r19	; 0x06

   /*------------------------------------------------------------------------*
    * Point to the last byte in the stack
    *------------------------------------------------------------------------*/
   pc_stackPtr = (pc_stackPtr + t_stack + ARB_EXTRA_STACK_BYTES) - 1;
   13f78:	87 01       	movw	r16, r14
   13f7a:	04 5d       	subi	r16, 0xD4	; 212
   13f7c:	1f 4f       	sbci	r17, 0xFF	; 255
   13f7e:	02 0f       	add	r16, r18
   13f80:	13 1f       	adc	r17, r19

   /*------------------------------------------------------------------------*
    * Save the ending address of the stack
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_stackEnd = (uint16_t)pc_stackPtr;
   13f82:	07 83       	std	Z+7, r16	; 0x07
   13f84:	10 87       	std	Z+8, r17	; 0x08

   /*------------------------------------------------------------------------*
    * Store the new thread's priority
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->t_priority = t_priority;
   13f86:	52 82       	std	Z+2, r5	; 0x02

   /*------------------------------------------------------------------------*
    * Make sure the thread is ready to run
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->t_status = INITIALIZED;
   13f88:	84 e0       	ldi	r24, 0x04	; 4
   13f8a:	81 83       	std	Z+1, r24	; 0x01

   /*------------------------------------------------------------------------*
    * This thread is not sleeping
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->s_quantum = 0;
   13f8c:	13 82       	std	Z+3, r1	; 0x03
   13f8e:	14 82       	std	Z+4, r1	; 0x04

   /*------------------------------------------------------------------------*
    * Initialize the stack's CPU registers so that a context restore works
    * correctly the first time call the newly allocated thread.
    *------------------------------------------------------------------------*/
   hal_initThreadStack( pt_function,
   13f90:	39 96       	adiw	r30, 0x09	; 9
   13f92:	c5 01       	movw	r24, r10
   13f94:	b4 01       	movw	r22, r8
   13f96:	a3 01       	movw	r20, r6
   13f98:	98 01       	movw	r18, r16
   13f9a:	7f 01       	movw	r14, r30
   13f9c:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <hal_initThreadStack>
                        &(*pt_newTcb)->s_sP);

   /*------------------------------------------------------------------------*
    * Use this number as the thread identification number
    *------------------------------------------------------------------------*/
   (*pt_newTcb)->c_id = UTL_GET_NUM_LINKS_CONT( gt_activeThreads);
   13fa0:	e0 91 29 22 	lds	r30, 0x2229
   13fa4:	f0 91 2a 22 	lds	r31, 0x222A
   13fa8:	82 81       	ldd	r24, Z+2	; 0x02
   13faa:	f6 01       	movw	r30, r12
   13fac:	80 83       	st	Z, r24

   /*---------------------------------------------------------------------*
    * Add the thread 'link' onto the list containing all the open threads
    * on the system.
    *---------------------------------------------------------------------*/
   t_err = utl_insertLink( gt_activeThreads,
   13fae:	80 91 29 22 	lds	r24, 0x2229
   13fb2:	90 91 2a 22 	lds	r25, 0x222A
   13fb6:	6a 81       	ldd	r22, Y+2	; 0x02
   13fb8:	7b 81       	ldd	r23, Y+3	; 0x03
   13fba:	41 e0       	ldi	r20, 0x01	; 1
   13fbc:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_linkHndl,
                           true);

   HAL_END_CRITICAL();
   13fc0:	89 81       	ldd	r24, Y+1	; 0x01
   13fc2:	8f bf       	out	0x3f, r24	; 63

   /*------------------------------------------------------------------------*
    * Return the 'link' to the allocated thread.
    *------------------------------------------------------------------------*/
   return (t_THRDHANDLE)t_linkHndl;
   13fc4:	2a 81       	ldd	r18, Y+2	; 0x02
   13fc6:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End arb_threadCreate*/
   13fc8:	c9 01       	movw	r24, r18
   13fca:	23 96       	adiw	r28, 0x03	; 3
   13fcc:	cd bf       	out	0x3d, r28	; 61
   13fce:	de bf       	out	0x3e, r29	; 62
   13fd0:	cf 91       	pop	r28
   13fd2:	df 91       	pop	r29
   13fd4:	1f 91       	pop	r17
   13fd6:	0f 91       	pop	r16
   13fd8:	ff 90       	pop	r15
   13fda:	ef 90       	pop	r14
   13fdc:	df 90       	pop	r13
   13fde:	cf 90       	pop	r12
   13fe0:	bf 90       	pop	r11
   13fe2:	af 90       	pop	r10
   13fe4:	9f 90       	pop	r9
   13fe6:	8f 90       	pop	r8
   13fe8:	7f 90       	pop	r7
   13fea:	6f 90       	pop	r6
   13fec:	5f 90       	pop	r5
   13fee:	08 95       	ret

00013ff0 <arb_yieldFromSleepIntsOn>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   13ff0:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   13ff2:	0f b6       	in	r0, 0x3f	; 63
      asm(" push r16");        /*Save the contents of r16 so we can use it*/
   13ff4:	0f 93       	push	r16
      asm( "mov r16, r0");     /*Can't directly set a bit in r0 so copy it to
   13ff6:	00 2d       	mov	r16, r0
                                r16*/
      asm( "sbr r16, 128");    /*Turn interrupts back on in the stored SREG*/
   13ff8:	00 68       	ori	r16, 0x80	; 128
      asm( "mov r0, r16");     /*Copy the change back into r0*/
   13ffa:	00 2e       	mov	r0, r16
      asm( "pop r16");         /*Get back the old value of r16*/
   13ffc:	0f 91       	pop	r16
      asm( "push r0");         /*Save SREG with GIE enabled*/
   13ffe:	0f 92       	push	r0
      asm( "push r1");
   14000:	1f 92       	push	r1
      asm( "clr r1");
   14002:	11 24       	eor	r1, r1
      asm( "push r2");
   14004:	2f 92       	push	r2
      asm( "push r3");
   14006:	3f 92       	push	r3
      asm( "push r4");
   14008:	4f 92       	push	r4
      asm( "push r5");
   1400a:	5f 92       	push	r5
      asm( "push r6");
   1400c:	6f 92       	push	r6
      asm( "push r7");
   1400e:	7f 92       	push	r7
      asm( "push r8");
   14010:	8f 92       	push	r8
      asm( "push r9");
   14012:	9f 92       	push	r9
      asm( "push r10");
   14014:	af 92       	push	r10
      asm( "push r11");
   14016:	bf 92       	push	r11
      asm( "push r12");
   14018:	cf 92       	push	r12
      asm( "push r13");
   1401a:	df 92       	push	r13
      asm( "push r14");
   1401c:	ef 92       	push	r14
      asm( "push r15");
   1401e:	ff 92       	push	r15
      asm( "push r16");
   14020:	0f 93       	push	r16
      asm( "push r17");
   14022:	1f 93       	push	r17
      asm( "push r18");
   14024:	2f 93       	push	r18
      asm( "push r19");
   14026:	3f 93       	push	r19
      asm( "push r20");
   14028:	4f 93       	push	r20
      asm( "push r21");
   1402a:	5f 93       	push	r21
      asm( "push r22");
   1402c:	6f 93       	push	r22
      asm( "push r23");
   1402e:	7f 93       	push	r23
      asm( "push r24");
   14030:	8f 93       	push	r24
      asm( "push r25");
   14032:	9f 93       	push	r25
      asm( "push r26");
   14034:	af 93       	push	r26
      asm( "push r27");
   14036:	bf 93       	push	r27
      asm( "push r28");
   14038:	cf 93       	push	r28
      asm( "push r29");
   1403a:	df 93       	push	r29
      asm( "push r30");
   1403c:	ef 93       	push	r30
      asm( "push r31");
   1403e:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   14040:	e0 91 29 22 	lds	r30, 0x2229
   14044:	f0 91 2a 22 	lds	r31, 0x222A
   14048:	06 80       	ldd	r0, Z+6	; 0x06
   1404a:	f7 81       	ldd	r31, Z+7	; 0x07
   1404c:	e0 2d       	mov	r30, r0
   1404e:	01 90       	ld	r0, Z+
   14050:	f0 81       	ld	r31, Z
   14052:	e0 2d       	mov	r30, r0
   14054:	e0 93 bb 25 	sts	0x25BB, r30
   14058:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   1405c:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   1405e:	4e b7       	in	r20, 0x3e	; 62
   14060:	94 2f       	mov	r25, r20
   14062:	80 e0       	ldi	r24, 0x00	; 0
   14064:	30 e0       	ldi	r19, 0x00	; 0
   14066:	82 2b       	or	r24, r18
   14068:	93 2b       	or	r25, r19
   1406a:	81 87       	std	Z+9, r24	; 0x09
   1406c:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   1406e:	8f ef       	ldi	r24, 0xFF	; 255
   14070:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   14072:	8f e3       	ldi	r24, 0x3F	; 63
   14074:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   14076:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   1407a:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   1407e:	e0 91 29 22 	lds	r30, 0x2229
   14082:	f0 91 2a 22 	lds	r31, 0x222A
   14086:	06 80       	ldd	r0, Z+6	; 0x06
   14088:	f7 81       	ldd	r31, Z+7	; 0x07
   1408a:	e0 2d       	mov	r30, r0
   1408c:	01 90       	ld	r0, Z+
   1408e:	f0 81       	ld	r31, Z
   14090:	e0 2d       	mov	r30, r0
   14092:	e0 93 a6 25 	sts	0x25A6, r30
   14096:	f0 93 a7 25 	sts	0x25A7, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   1409a:	03 84       	ldd	r0, Z+11	; 0x0b
   1409c:	f4 85       	ldd	r31, Z+12	; 0x0c
   1409e:	e0 2d       	mov	r30, r0
   140a0:	80 81       	ld	r24, Z
   140a2:	91 81       	ldd	r25, Z+1	; 0x01
   140a4:	8d 5a       	subi	r24, 0xAD	; 173
   140a6:	9e 4d       	sbci	r25, 0xDE	; 222
   140a8:	11 f0       	breq	.+4      	; 0x140ae <arb_yieldFromSleepIntsOn+0xbe>
   {
      arb_stackOverflow();
   140aa:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   140ae:	e0 91 bd 25 	lds	r30, 0x25BD
   140b2:	f0 91 be 25 	lds	r31, 0x25BE
   140b6:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   140b8:	e0 91 29 22 	lds	r30, 0x2229
   140bc:	f0 91 2a 22 	lds	r31, 0x222A
   140c0:	06 80       	ldd	r0, Z+6	; 0x06
   140c2:	f7 81       	ldd	r31, Z+7	; 0x07
   140c4:	e0 2d       	mov	r30, r0
   140c6:	01 90       	ld	r0, Z+
   140c8:	f0 81       	ld	r31, Z
   140ca:	e0 2d       	mov	r30, r0
   140cc:	e0 93 bb 25 	sts	0x25BB, r30
   140d0:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   140d4:	81 85       	ldd	r24, Z+9	; 0x09
   140d6:	92 85       	ldd	r25, Z+10	; 0x0a
   140d8:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   140da:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   140dc:	ff 91       	pop	r31
      asm( "pop r30");
   140de:	ef 91       	pop	r30
      asm( "pop r29");
   140e0:	df 91       	pop	r29
      asm( "pop r28");
   140e2:	cf 91       	pop	r28
      asm( "pop r27");
   140e4:	bf 91       	pop	r27
      asm( "pop r26");
   140e6:	af 91       	pop	r26
      asm( "pop r25");
   140e8:	9f 91       	pop	r25
      asm( "pop r24");
   140ea:	8f 91       	pop	r24
      asm( "pop r23");
   140ec:	7f 91       	pop	r23
      asm( "pop r22");
   140ee:	6f 91       	pop	r22
      asm( "pop r21");
   140f0:	5f 91       	pop	r21
      asm( "pop r20");
   140f2:	4f 91       	pop	r20
      asm( "pop r19");
   140f4:	3f 91       	pop	r19
      asm( "pop r18");
   140f6:	2f 91       	pop	r18
      asm( "pop r17");
   140f8:	1f 91       	pop	r17
      asm( "pop r16");
   140fa:	0f 91       	pop	r16
      asm( "pop r15");
   140fc:	ff 90       	pop	r15
      asm( "pop r14");
   140fe:	ef 90       	pop	r14
      asm( "pop r13");
   14100:	df 90       	pop	r13
      asm( "pop r12");
   14102:	cf 90       	pop	r12
      asm( "pop r11");
   14104:	bf 90       	pop	r11
      asm( "pop r10");
   14106:	af 90       	pop	r10
      asm( "pop r9");
   14108:	9f 90       	pop	r9
      asm( "pop r8");
   1410a:	8f 90       	pop	r8
      asm( "pop r7");
   1410c:	7f 90       	pop	r7
      asm( "pop r6");
   1410e:	6f 90       	pop	r6
      asm( "pop r5");
   14110:	5f 90       	pop	r5
      asm( "pop r4");
   14112:	4f 90       	pop	r4
      asm( "pop r3");
   14114:	3f 90       	pop	r3
      asm( "pop r2");
   14116:	2f 90       	pop	r2
      asm( "pop r1");
   14118:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1411a:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   1411c:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   1411e:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   14120:	08 95       	ret

00014122 <arb_yieldFromSleepIntsOff>:
       * thread's stack (starting with the first address after the PC).
       * After storing R1 we need to set it to zero so we are performing the
       * same operation as the compiler if it were explicitly doing the
       * context save for us.
       *---------------------------------------------------------------------*/
      asm(" push r0");
   14122:	0f 92       	push	r0

      /*---------------------------------------------------------------------*
       * We disabled interrupts before calling this function, therefore we
       * need to make sure that the SREG is saved with the GIE bit set.
       *---------------------------------------------------------------------*/
      asm( "in r0, __SREG__");
   14124:	0f b6       	in	r0, 0x3f	; 63
      asm( "push r0");         /*Save SREG*/
   14126:	0f 92       	push	r0
      asm( "push r1");
   14128:	1f 92       	push	r1
      asm( "clr r1");
   1412a:	11 24       	eor	r1, r1
      asm( "push r2");
   1412c:	2f 92       	push	r2
      asm( "push r3");
   1412e:	3f 92       	push	r3
      asm( "push r4");
   14130:	4f 92       	push	r4
      asm( "push r5");
   14132:	5f 92       	push	r5
      asm( "push r6");
   14134:	6f 92       	push	r6
      asm( "push r7");
   14136:	7f 92       	push	r7
      asm( "push r8");
   14138:	8f 92       	push	r8
      asm( "push r9");
   1413a:	9f 92       	push	r9
      asm( "push r10");
   1413c:	af 92       	push	r10
      asm( "push r11");
   1413e:	bf 92       	push	r11
      asm( "push r12");
   14140:	cf 92       	push	r12
      asm( "push r13");
   14142:	df 92       	push	r13
      asm( "push r14");
   14144:	ef 92       	push	r14
      asm( "push r15");
   14146:	ff 92       	push	r15
      asm( "push r16");
   14148:	0f 93       	push	r16
      asm( "push r17");
   1414a:	1f 93       	push	r17
      asm( "push r18");
   1414c:	2f 93       	push	r18
      asm( "push r19");
   1414e:	3f 93       	push	r19
      asm( "push r20");
   14150:	4f 93       	push	r20
      asm( "push r21");
   14152:	5f 93       	push	r21
      asm( "push r22");
   14154:	6f 93       	push	r22
      asm( "push r23");
   14156:	7f 93       	push	r23
      asm( "push r24");
   14158:	8f 93       	push	r24
      asm( "push r25");
   1415a:	9f 93       	push	r25
      asm( "push r26");
   1415c:	af 93       	push	r26
      asm( "push r27");
   1415e:	bf 93       	push	r27
      asm( "push r28");
   14160:	cf 93       	push	r28
      asm( "push r29");
   14162:	df 93       	push	r29
      asm( "push r30");
   14164:	ef 93       	push	r30
      asm( "push r31");
   14166:	ff 93       	push	r31

      /*---------------------------------------------------------------------*
       * Now save the stack pointer low byte first, then high byte for the
       * currently running thread. The stack pointer will be pointing to r31
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   14168:	e0 91 29 22 	lds	r30, 0x2229
   1416c:	f0 91 2a 22 	lds	r31, 0x222A
   14170:	06 80       	ldd	r0, Z+6	; 0x06
   14172:	f7 81       	ldd	r31, Z+7	; 0x07
   14174:	e0 2d       	mov	r30, r0
   14176:	01 90       	ld	r0, Z+
   14178:	f0 81       	ld	r31, Z
   1417a:	e0 2d       	mov	r30, r0
   1417c:	e0 93 bb 25 	sts	0x25BB, r30
   14180:	f0 93 bc 25 	sts	0x25BC, r31
      pt_csTemp->s_sP = (0x00FF & (uint16_t)SPL);
   14184:	2d b7       	in	r18, 0x3d	; 61
      pt_csTemp->s_sP |= (((uint16_t)SPH << 8) & 0xFF00);
   14186:	4e b7       	in	r20, 0x3e	; 62
   14188:	94 2f       	mov	r25, r20
   1418a:	80 e0       	ldi	r24, 0x00	; 0
   1418c:	30 e0       	ldi	r19, 0x00	; 0
   1418e:	82 2b       	or	r24, r18
   14190:	93 2b       	or	r25, r19
   14192:	81 87       	std	Z+9, r24	; 0x09
   14194:	92 87       	std	Z+10, r25	; 0x0a
   ( void)
   {
      /*---------------------------------------------------------------------*
       * The kernel stack is located at the end of SRAM
       *---------------------------------------------------------------------*/
      SPL = (uint8_t)(RAMEND & 0x00FF);
   14196:	8f ef       	ldi	r24, 0xFF	; 255
   14198:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)((RAMEND >> 8) & 0x00FF);
   1419a:	8f e3       	ldi	r24, 0x3F	; 63
   1419c:	8e bf       	out	0x3e, r24	; 62

      /*---------------------------------------------------------------------*
       * Point the frame pointer (Y register) to the new stack location
       *---------------------------------------------------------------------*/
      asm("lds r28, 0x3D");
   1419e:	c0 91 3d 00 	lds	r28, 0x003D
      asm("lds r29, 0x3E");
   141a2:	d0 91 3e 00 	lds	r29, 0x003E

   /*------------------------------------------------------------------------*
    * Check to see if this thread overflowed its stack by checking the
    * secret number we inserted at the end of the stack.
    *------------------------------------------------------------------------*/
   gpt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   141a6:	e0 91 29 22 	lds	r30, 0x2229
   141aa:	f0 91 2a 22 	lds	r31, 0x222A
   141ae:	06 80       	ldd	r0, Z+6	; 0x06
   141b0:	f7 81       	ldd	r31, Z+7	; 0x07
   141b2:	e0 2d       	mov	r30, r0
   141b4:	01 90       	ld	r0, Z+
   141b6:	f0 81       	ld	r31, Z
   141b8:	e0 2d       	mov	r30, r0
   141ba:	e0 93 a6 25 	sts	0x25A6, r30
   141be:	f0 93 a7 25 	sts	0x25A7, r31
   if( gpt_temp->ps_stack[0] != ARB_STACK_OVERFLOW_CHECK)
   141c2:	03 84       	ldd	r0, Z+11	; 0x0b
   141c4:	f4 85       	ldd	r31, Z+12	; 0x0c
   141c6:	e0 2d       	mov	r30, r0
   141c8:	80 81       	ld	r24, Z
   141ca:	91 81       	ldd	r25, Z+1	; 0x01
   141cc:	8d 5a       	subi	r24, 0xAD	; 173
   141ce:	9e 4d       	sbci	r25, 0xDE	; 222
   141d0:	11 f0       	breq	.+4      	; 0x141d6 <arb_yieldFromSleepIntsOff+0xb4>
   {
      arb_stackOverflow();
   141d2:	0e 94 2d 86 	call	0x10c5a	; 0x10c5a <arb_stackOverflow>
   }

   /*------------------------------------------------------------------------*
    * Change to a new thread.
    *------------------------------------------------------------------------*/
   gpt_scheduler();
   141d6:	e0 91 bd 25 	lds	r30, 0x25BD
   141da:	f0 91 be 25 	lds	r31, 0x25BE
   141de:	19 95       	eicall

      /*---------------------------------------------------------------------*
       * Get the current thread's stack pointer from the TCB and load the
       * CPU stack register
       *---------------------------------------------------------------------*/
      pt_csTemp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   141e0:	e0 91 29 22 	lds	r30, 0x2229
   141e4:	f0 91 2a 22 	lds	r31, 0x222A
   141e8:	06 80       	ldd	r0, Z+6	; 0x06
   141ea:	f7 81       	ldd	r31, Z+7	; 0x07
   141ec:	e0 2d       	mov	r30, r0
   141ee:	01 90       	ld	r0, Z+
   141f0:	f0 81       	ld	r31, Z
   141f2:	e0 2d       	mov	r30, r0
   141f4:	e0 93 bb 25 	sts	0x25BB, r30
   141f8:	f0 93 bc 25 	sts	0x25BC, r31
      SPL = (uint8_t)((pt_csTemp->s_sP) & 0x00FF);
   141fc:	81 85       	ldd	r24, Z+9	; 0x09
   141fe:	92 85       	ldd	r25, Z+10	; 0x0a
   14200:	8d bf       	out	0x3d, r24	; 61
      SPH = (uint8_t)(((pt_csTemp->s_sP) >> 8) & 0x00FF);
   14202:	9e bf       	out	0x3e, r25	; 62
      /*---------------------------------------------------------------------*
       * Now that the CPU stack ptr is pointing to the stack for this thread,
       * restore the general purpose registers to the place where the thread
       * last left off by popping there values off the thread's stack.
       *---------------------------------------------------------------------*/
      asm( "pop r31");
   14204:	ff 91       	pop	r31
      asm( "pop r30");
   14206:	ef 91       	pop	r30
      asm( "pop r29");
   14208:	df 91       	pop	r29
      asm( "pop r28");
   1420a:	cf 91       	pop	r28
      asm( "pop r27");
   1420c:	bf 91       	pop	r27
      asm( "pop r26");
   1420e:	af 91       	pop	r26
      asm( "pop r25");
   14210:	9f 91       	pop	r25
      asm( "pop r24");
   14212:	8f 91       	pop	r24
      asm( "pop r23");
   14214:	7f 91       	pop	r23
      asm( "pop r22");
   14216:	6f 91       	pop	r22
      asm( "pop r21");
   14218:	5f 91       	pop	r21
      asm( "pop r20");
   1421a:	4f 91       	pop	r20
      asm( "pop r19");
   1421c:	3f 91       	pop	r19
      asm( "pop r18");
   1421e:	2f 91       	pop	r18
      asm( "pop r17");
   14220:	1f 91       	pop	r17
      asm( "pop r16");
   14222:	0f 91       	pop	r16
      asm( "pop r15");
   14224:	ff 90       	pop	r15
      asm( "pop r14");
   14226:	ef 90       	pop	r14
      asm( "pop r13");
   14228:	df 90       	pop	r13
      asm( "pop r12");
   1422a:	cf 90       	pop	r12
      asm( "pop r11");
   1422c:	bf 90       	pop	r11
      asm( "pop r10");
   1422e:	af 90       	pop	r10
      asm( "pop r9");
   14230:	9f 90       	pop	r9
      asm( "pop r8");
   14232:	8f 90       	pop	r8
      asm( "pop r7");
   14234:	7f 90       	pop	r7
      asm( "pop r6");
   14236:	6f 90       	pop	r6
      asm( "pop r5");
   14238:	5f 90       	pop	r5
      asm( "pop r4");
   1423a:	4f 90       	pop	r4
      asm( "pop r3");
   1423c:	3f 90       	pop	r3
      asm( "pop r2");
   1423e:	2f 90       	pop	r2
      asm( "pop r1");
   14240:	1f 90       	pop	r1

      /*---------------------------------------------------------------------*
       * The pop of this stack location into r0 contains the SREG
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   14242:	0f 90       	pop	r0

      /*---------------------------------------------------------------------*
       * Now restore the thread's old SREG value using the 'out' cmd. This cmd
       * is used whenever we write to an IO location.
       *---------------------------------------------------------------------*/
      asm( "out __SREG__, r0");
   14244:	0f be       	out	0x3f, r0	; 63

      /*---------------------------------------------------------------------*
       * This pop contains the thread's saved r0 value
       *---------------------------------------------------------------------*/
      asm( "pop r0");
   14246:	0f 90       	pop	r0
    * location where the thread's program counter last left off. Issuing a
    * 'ret' or 'reti' cmd will cause this location to be popped off the stack
    * and into the CPUs program counter where the last line of code the
    * thread was running at the time of preemption will be executed.
    *------------------------------------------------------------------------*/
	HAL_RET();
   14248:	08 95       	ret

0001424a <arb_sleep>:

void arb_sleep( const uint16_t s_quantum)
{
   t_tcb *pt_temp;

   if( HAL_ARE_INTS_EN()) /*Interrupts enabled?*/
   1424a:	0f b6       	in	r0, 0x3f	; 63
   1424c:	07 fe       	sbrs	r0, 7
   1424e:	12 c0       	rjmp	.+36     	; 0x14274 <arb_sleep+0x2a>
   {

      /*---------------------------------------------------------------------*
       * Mutual exclusion
       *---------------------------------------------------------------------*/
      HAL_CLI();
   14250:	f8 94       	cli

      /*---------------------------------------------------------------------*
       * Record the time to sleep. i.e. 1 quantum is 1 timer period.
       *---------------------------------------------------------------------*/
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   14252:	e0 91 29 22 	lds	r30, 0x2229
   14256:	f0 91 2a 22 	lds	r31, 0x222A
   1425a:	06 80       	ldd	r0, Z+6	; 0x06
   1425c:	f7 81       	ldd	r31, Z+7	; 0x07
   1425e:	e0 2d       	mov	r30, r0
   14260:	01 90       	ld	r0, Z+
   14262:	f0 81       	ld	r31, Z
   14264:	e0 2d       	mov	r30, r0
      pt_temp->s_quantum = s_quantum;
   14266:	83 83       	std	Z+3, r24	; 0x03
   14268:	94 83       	std	Z+4, r25	; 0x04
      pt_temp->t_status  = SLEEPING;
   1426a:	83 e0       	ldi	r24, 0x03	; 3
   1426c:	81 83       	std	Z+1, r24	; 0x01
       * Calling yield from within the sleep routine will cause everything up
       * to this point to be remembered and pushed onto the thread's stack.
       * This thread will give up its time slice and when it wakes the OS will
       * return to the next instruction after the 'yield' call.
       *---------------------------------------------------------------------*/
      arb_yieldFromSleepIntsOn(); /*Give up the current thread's time slice*/
   1426e:	0e 94 f8 9f 	call	0x13ff0	; 0x13ff0 <arb_yieldFromSleepIntsOn>
   14272:	08 95       	ret
   else
   {
      /*---------------------------------------------------------------------*
       * Record the time to sleep. i.e. 1 quantum is 1 timer period.
       *---------------------------------------------------------------------*/
      pt_temp = (t_tcb *)UTL_GET_LINK_ELEMENT_PTR_CONT_CURR(gt_activeThreads);
   14274:	e0 91 29 22 	lds	r30, 0x2229
   14278:	f0 91 2a 22 	lds	r31, 0x222A
   1427c:	06 80       	ldd	r0, Z+6	; 0x06
   1427e:	f7 81       	ldd	r31, Z+7	; 0x07
   14280:	e0 2d       	mov	r30, r0
   14282:	01 90       	ld	r0, Z+
   14284:	f0 81       	ld	r31, Z
   14286:	e0 2d       	mov	r30, r0
      pt_temp->s_quantum = s_quantum;
   14288:	83 83       	std	Z+3, r24	; 0x03
   1428a:	94 83       	std	Z+4, r25	; 0x04
      pt_temp->t_status  = SLEEPING;
   1428c:	83 e0       	ldi	r24, 0x03	; 3
   1428e:	81 83       	std	Z+1, r24	; 0x01
       * Calling yield from within the sleep routine will cause everything up
       * to this point to be remembered and pushed onto the thread's stack.
       * This thread will give up its time slice and when it wakes the OS will
       * return to the next instruction after the 'yield' call.
       *---------------------------------------------------------------------*/
      arb_yieldFromSleepIntsOff(); /*Give up the current thread's time slice*/
   14290:	0e 94 91 a0 	call	0x14122	; 0x14122 <arb_yieldFromSleepIntsOff>
   14294:	08 95       	ret

00014296 <utl_getBufferFullLevel>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
int16_t utl_getBufferFullLevel( t_BUFFHANDLE t_handle)
{
   14296:	df 93       	push	r29
   14298:	cf 93       	push	r28
   1429a:	0f 92       	push	r0
   1429c:	0f 92       	push	r0
   1429e:	cd b7       	in	r28, 0x3d	; 61
   142a0:	de b7       	in	r29, 0x3e	; 62
   142a2:	89 83       	std	Y+1, r24	; 0x01
   142a4:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle =
   (t_bufferHandle *)UTL_GET_LINK_ELEMENT_PTR(t_handle);
   142a6:	e9 81       	ldd	r30, Y+1	; 0x01
   142a8:	fa 81       	ldd	r31, Y+2	; 0x02
   142aa:	01 90       	ld	r0, Z+
   142ac:	f0 81       	ld	r31, Z
   142ae:	e0 2d       	mov	r30, r0

   return pt_handle->s_fillCount; /*Return the number of bytes in the buffer*/

}/*End utl_getBufferFullLevel*/
   142b0:	84 81       	ldd	r24, Z+4	; 0x04
   142b2:	95 81       	ldd	r25, Z+5	; 0x05
   142b4:	0f 90       	pop	r0
   142b6:	0f 90       	pop	r0
   142b8:	cf 91       	pop	r28
   142ba:	df 91       	pop	r29
   142bc:	08 95       	ret

000142be <utl_getBufferSize>:
   return ((int16_t)pt_handle->s_sizeBytes - pt_handle->s_fillCount);

}/*End utl_getBufferEmptyLevel*/

int16_t utl_getBufferSize( t_BUFFHANDLE t_handle)
{
   142be:	df 93       	push	r29
   142c0:	cf 93       	push	r28
   142c2:	0f 92       	push	r0
   142c4:	0f 92       	push	r0
   142c6:	cd b7       	in	r28, 0x3d	; 61
   142c8:	de b7       	in	r29, 0x3e	; 62
   142ca:	89 83       	std	Y+1, r24	; 0x01
   142cc:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   142ce:	e9 81       	ldd	r30, Y+1	; 0x01
   142d0:	fa 81       	ldd	r31, Y+2	; 0x02
   142d2:	01 90       	ld	r0, Z+
   142d4:	f0 81       	ld	r31, Z
   142d6:	e0 2d       	mov	r30, r0

   return ((int16_t)pt_handle->s_sizeBytes);

}/*End utl_getBufferSize*/
   142d8:	86 81       	ldd	r24, Z+6	; 0x06
   142da:	97 81       	ldd	r25, Z+7	; 0x07
   142dc:	0f 90       	pop	r0
   142de:	0f 90       	pop	r0
   142e0:	cf 91       	pop	r28
   142e2:	df 91       	pop	r29
   142e4:	08 95       	ret

000142e6 <utl_getBufferPtr>:
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   return (bool)(pt_handle->s_fillCount < 0);
}/*End hasBufferUnderflowed*/

int8_t *utl_getBufferPtr( t_BUFFHANDLE t_handle)
{
   142e6:	df 93       	push	r29
   142e8:	cf 93       	push	r28
   142ea:	0f 92       	push	r0
   142ec:	0f 92       	push	r0
   142ee:	cd b7       	in	r28, 0x3d	; 61
   142f0:	de b7       	in	r29, 0x3e	; 62
   142f2:	89 83       	std	Y+1, r24	; 0x01
   142f4:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   142f6:	e9 81       	ldd	r30, Y+1	; 0x01
   142f8:	fa 81       	ldd	r31, Y+2	; 0x02
   142fa:	01 90       	ld	r0, Z+
   142fc:	f0 81       	ld	r31, Z
   142fe:	e0 2d       	mov	r30, r0
   return pt_handle->pc_buffer;
}/*End utl_getBufferPtr*/
   14300:	80 85       	ldd	r24, Z+8	; 0x08
   14302:	91 85       	ldd	r25, Z+9	; 0x09
   14304:	0f 90       	pop	r0
   14306:	0f 90       	pop	r0
   14308:	cf 91       	pop	r28
   1430a:	df 91       	pop	r29
   1430c:	08 95       	ret

0001430e <utl_writeByte>:

void utl_writeByte( t_BUFFHANDLE t_handle,
                    int8_t c_byte)
{
   1430e:	df 93       	push	r29
   14310:	cf 93       	push	r28
   14312:	0f 92       	push	r0
   14314:	0f 92       	push	r0
   14316:	cd b7       	in	r28, 0x3d	; 61
   14318:	de b7       	in	r29, 0x3e	; 62
   1431a:	89 83       	std	Y+1, r24	; 0x01
   1431c:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   1431e:	e9 81       	ldd	r30, Y+1	; 0x01
   14320:	fa 81       	ldd	r31, Y+2	; 0x02
   14322:	a0 81       	ld	r26, Z
   14324:	b1 81       	ldd	r27, Z+1	; 0x01

   pt_handle->pc_buffer[pt_handle->s_wrIndex] = c_byte;
   14326:	18 96       	adiw	r26, 0x08	; 8
   14328:	ed 91       	ld	r30, X+
   1432a:	fc 91       	ld	r31, X
   1432c:	19 97       	sbiw	r26, 0x09	; 9
   1432e:	8d 91       	ld	r24, X+
   14330:	9c 91       	ld	r25, X
   14332:	11 97       	sbiw	r26, 0x01	; 1
   14334:	e8 0f       	add	r30, r24
   14336:	f9 1f       	adc	r31, r25
   14338:	60 83       	st	Z, r22
   pt_handle->s_wrIndex++;
   1433a:	8d 91       	ld	r24, X+
   1433c:	9c 91       	ld	r25, X
   1433e:	11 97       	sbiw	r26, 0x01	; 1
   14340:	01 96       	adiw	r24, 0x01	; 1
   14342:	8d 93       	st	X+, r24
   14344:	9c 93       	st	X, r25
   14346:	11 97       	sbiw	r26, 0x01	; 1
   if( pt_handle->s_wrIndex == pt_handle->s_sizeBytes)
   14348:	16 96       	adiw	r26, 0x06	; 6
   1434a:	2d 91       	ld	r18, X+
   1434c:	3c 91       	ld	r19, X
   1434e:	17 97       	sbiw	r26, 0x07	; 7
   14350:	82 17       	cp	r24, r18
   14352:	93 07       	cpc	r25, r19
   14354:	19 f4       	brne	.+6      	; 0x1435c <utl_writeByte+0x4e>
      pt_handle->s_wrIndex = 0;
   14356:	1d 92       	st	X+, r1
   14358:	1c 92       	st	X, r1
   1435a:	11 97       	sbiw	r26, 0x01	; 1

   pt_handle->s_fillCount++;
   1435c:	14 96       	adiw	r26, 0x04	; 4
   1435e:	8d 91       	ld	r24, X+
   14360:	9c 91       	ld	r25, X
   14362:	15 97       	sbiw	r26, 0x05	; 5
   14364:	01 96       	adiw	r24, 0x01	; 1
   14366:	14 96       	adiw	r26, 0x04	; 4
   14368:	8d 93       	st	X+, r24
   1436a:	9c 93       	st	X, r25
   1436c:	15 97       	sbiw	r26, 0x05	; 5

}/*End utl_writeByte*/
   1436e:	0f 90       	pop	r0
   14370:	0f 90       	pop	r0
   14372:	cf 91       	pop	r28
   14374:	df 91       	pop	r29
   14376:	08 95       	ret

00014378 <utl_incrBufRdPtr>:

}/*End utl_incrBufWrtPtr*/

void utl_incrBufRdPtr( t_BUFFHANDLE t_handle,
                       uint16_t s_size)
{
   14378:	df 93       	push	r29
   1437a:	cf 93       	push	r28
   1437c:	0f 92       	push	r0
   1437e:	0f 92       	push	r0
   14380:	cd b7       	in	r28, 0x3d	; 61
   14382:	de b7       	in	r29, 0x3e	; 62
   14384:	89 83       	std	Y+1, r24	; 0x01
   14386:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14388:	e9 81       	ldd	r30, Y+1	; 0x01
   1438a:	fa 81       	ldd	r31, Y+2	; 0x02
   1438c:	01 90       	ld	r0, Z+
   1438e:	f0 81       	ld	r31, Z
   14390:	e0 2d       	mov	r30, r0
   int16_t *ps_rdIndex       = &pt_handle->s_rdIndex;

   *ps_rdIndex += s_size;
   14392:	82 81       	ldd	r24, Z+2	; 0x02
   14394:	93 81       	ldd	r25, Z+3	; 0x03
   14396:	86 0f       	add	r24, r22
   14398:	97 1f       	adc	r25, r23
   1439a:	82 83       	std	Z+2, r24	; 0x02
   1439c:	93 83       	std	Z+3, r25	; 0x03
   if( *ps_rdIndex >= pt_handle->s_sizeBytes)
   1439e:	26 81       	ldd	r18, Z+6	; 0x06
   143a0:	37 81       	ldd	r19, Z+7	; 0x07
   143a2:	82 17       	cp	r24, r18
   143a4:	93 07       	cpc	r25, r19
   143a6:	20 f0       	brcs	.+8      	; 0x143b0 <utl_incrBufRdPtr+0x38>
   {
      *ps_rdIndex -= pt_handle->s_sizeBytes;
   143a8:	82 1b       	sub	r24, r18
   143aa:	93 0b       	sbc	r25, r19
   143ac:	82 83       	std	Z+2, r24	; 0x02
   143ae:	93 83       	std	Z+3, r25	; 0x03
   }

   pt_handle->s_fillCount -= (int16_t)s_size;
   143b0:	84 81       	ldd	r24, Z+4	; 0x04
   143b2:	95 81       	ldd	r25, Z+5	; 0x05
   143b4:	86 1b       	sub	r24, r22
   143b6:	97 0b       	sbc	r25, r23
   143b8:	84 83       	std	Z+4, r24	; 0x04
   143ba:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_incrBufRdPtr*/
   143bc:	0f 90       	pop	r0
   143be:	0f 90       	pop	r0
   143c0:	cf 91       	pop	r28
   143c2:	df 91       	pop	r29
   143c4:	08 95       	ret

000143c6 <utl_getBufRdPtr>:

int16_t utl_getBufRdPtr( t_BUFFHANDLE t_handle)
{
   143c6:	df 93       	push	r29
   143c8:	cf 93       	push	r28
   143ca:	0f 92       	push	r0
   143cc:	0f 92       	push	r0
   143ce:	cd b7       	in	r28, 0x3d	; 61
   143d0:	de b7       	in	r29, 0x3e	; 62
   143d2:	89 83       	std	Y+1, r24	; 0x01
   143d4:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   143d6:	e9 81       	ldd	r30, Y+1	; 0x01
   143d8:	fa 81       	ldd	r31, Y+2	; 0x02
   143da:	01 90       	ld	r0, Z+
   143dc:	f0 81       	ld	r31, Z
   143de:	e0 2d       	mov	r30, r0

   return pt_handle->s_rdIndex;
}/*End utl_getBufRdPtr*/
   143e0:	82 81       	ldd	r24, Z+2	; 0x02
   143e2:	93 81       	ldd	r25, Z+3	; 0x03
   143e4:	0f 90       	pop	r0
   143e6:	0f 90       	pop	r0
   143e8:	cf 91       	pop	r28
   143ea:	df 91       	pop	r29
   143ec:	08 95       	ret

000143ee <utl_buffEraseTailByte>:
   return c_byte;

}/*End utl_readByte*/

void utl_buffEraseTailByte( t_BUFFHANDLE t_handle)
{
   143ee:	df 93       	push	r29
   143f0:	cf 93       	push	r28
   143f2:	0f 92       	push	r0
   143f4:	0f 92       	push	r0
   143f6:	cd b7       	in	r28, 0x3d	; 61
   143f8:	de b7       	in	r29, 0x3e	; 62
   143fa:	89 83       	std	Y+1, r24	; 0x01
   143fc:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   143fe:	e9 81       	ldd	r30, Y+1	; 0x01
   14400:	fa 81       	ldd	r31, Y+2	; 0x02
   14402:	a0 81       	ld	r26, Z
   14404:	b1 81       	ldd	r27, Z+1	; 0x01

   pt_handle->s_wrIndex--;
   14406:	8d 91       	ld	r24, X+
   14408:	9c 91       	ld	r25, X
   1440a:	11 97       	sbiw	r26, 0x01	; 1
   1440c:	01 97       	sbiw	r24, 0x01	; 1
   1440e:	8d 93       	st	X+, r24
   14410:	9c 93       	st	X, r25
   14412:	11 97       	sbiw	r26, 0x01	; 1
   if( pt_handle->s_wrIndex < 0)
   14414:	97 ff       	sbrs	r25, 7
   14416:	08 c0       	rjmp	.+16     	; 0x14428 <utl_buffEraseTailByte+0x3a>
      pt_handle->s_wrIndex = pt_handle->s_sizeBytes - 1;
   14418:	16 96       	adiw	r26, 0x06	; 6
   1441a:	8d 91       	ld	r24, X+
   1441c:	9c 91       	ld	r25, X
   1441e:	17 97       	sbiw	r26, 0x07	; 7
   14420:	01 97       	sbiw	r24, 0x01	; 1
   14422:	8d 93       	st	X+, r24
   14424:	9c 93       	st	X, r25
   14426:	11 97       	sbiw	r26, 0x01	; 1

   pt_handle->pc_buffer[pt_handle->s_wrIndex] = 0;
   14428:	18 96       	adiw	r26, 0x08	; 8
   1442a:	ed 91       	ld	r30, X+
   1442c:	fc 91       	ld	r31, X
   1442e:	19 97       	sbiw	r26, 0x09	; 9
   14430:	8d 91       	ld	r24, X+
   14432:	9c 91       	ld	r25, X
   14434:	11 97       	sbiw	r26, 0x01	; 1
   14436:	e8 0f       	add	r30, r24
   14438:	f9 1f       	adc	r31, r25
   1443a:	10 82       	st	Z, r1

   pt_handle->s_fillCount--;
   1443c:	14 96       	adiw	r26, 0x04	; 4
   1443e:	8d 91       	ld	r24, X+
   14440:	9c 91       	ld	r25, X
   14442:	15 97       	sbiw	r26, 0x05	; 5
   14444:	01 97       	sbiw	r24, 0x01	; 1
   14446:	14 96       	adiw	r26, 0x04	; 4
   14448:	8d 93       	st	X+, r24
   1444a:	9c 93       	st	X, r25
   1444c:	15 97       	sbiw	r26, 0x05	; 5

}/*End utl_buffEraseTailByte*/
   1444e:	0f 90       	pop	r0
   14450:	0f 90       	pop	r0
   14452:	cf 91       	pop	r28
   14454:	df 91       	pop	r29
   14456:	08 95       	ret

00014458 <ult_resetBuffer>:
   pt_handle->s_fillCount -= (int16_t)s_size;

}/*End utl_readBlock*/

void ult_resetBuffer( t_BUFFHANDLE t_handle)
{
   14458:	df 93       	push	r29
   1445a:	cf 93       	push	r28
   1445c:	0f 92       	push	r0
   1445e:	0f 92       	push	r0
   14460:	cd b7       	in	r28, 0x3d	; 61
   14462:	de b7       	in	r29, 0x3e	; 62
   14464:	89 83       	std	Y+1, r24	; 0x01
   14466:	9a 83       	std	Y+2, r25	; 0x02
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14468:	e9 81       	ldd	r30, Y+1	; 0x01
   1446a:	fa 81       	ldd	r31, Y+2	; 0x02
   1446c:	01 90       	ld	r0, Z+
   1446e:	f0 81       	ld	r31, Z
   14470:	e0 2d       	mov	r30, r0

   pt_handle->s_rdIndex   = 0;
   14472:	12 82       	std	Z+2, r1	; 0x02
   14474:	13 82       	std	Z+3, r1	; 0x03
   pt_handle->s_wrIndex   = 0;
   14476:	10 82       	st	Z, r1
   14478:	11 82       	std	Z+1, r1	; 0x01
   pt_handle->s_fillCount = 0;
   1447a:	14 82       	std	Z+4, r1	; 0x04
   1447c:	15 82       	std	Z+5, r1	; 0x05

}/*End ult_resetBuffer*/
   1447e:	0f 90       	pop	r0
   14480:	0f 90       	pop	r0
   14482:	cf 91       	pop	r28
   14484:	df 91       	pop	r29
   14486:	08 95       	ret

00014488 <utl_destroyBuffer>:
   return (t_BUFFHANDLE)t_newLinkHndl;

}/*End utl_createBuffer*/

t_bufferError utl_destroyBuffer( t_BUFFHANDLE t_handle)
{
   14488:	df 93       	push	r29
   1448a:	cf 93       	push	r28
   1448c:	00 d0       	rcall	.+0      	; 0x1448e <utl_destroyBuffer+0x6>
   1448e:	cd b7       	in	r28, 0x3d	; 61
   14490:	de b7       	in	r29, 0x3e	; 62
   14492:	8a 83       	std	Y+2, r24	; 0x02
   14494:	9b 83       	std	Y+3, r25	; 0x03
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   14496:	8f b7       	in	r24, 0x3f	; 63
   14498:	89 83       	std	Y+1, r24	; 0x01
   1449a:	f8 94       	cli

   t_err = utl_destroyLink( gt_bufferList,
   1449c:	80 91 37 22 	lds	r24, 0x2237
   144a0:	90 91 38 22 	lds	r25, 0x2238
   144a4:	6a 81       	ldd	r22, Y+2	; 0x02
   144a6:	7b 81       	ldd	r23, Y+3	; 0x03
   144a8:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <utl_destroyLink>
                            (t_LINKHNDL)t_handle);

   if( t_err < 0)
   144ac:	87 ff       	sbrs	r24, 7
   144ae:	04 c0       	rjmp	.+8      	; 0x144b8 <utl_destroyBuffer+0x30>
   {
      HAL_END_CRITICAL();//Enable interrupts
   144b0:	89 81       	ldd	r24, Y+1	; 0x01
   144b2:	8f bf       	out	0x3f, r24	; 63
   144b4:	8d ef       	ldi	r24, 0xFD	; 253
   144b6:	03 c0       	rjmp	.+6      	; 0x144be <utl_destroyBuffer+0x36>
      return BUFFER_INVALID_HNDL;
   }

   HAL_END_CRITICAL();//Enable interrupts
   144b8:	89 81       	ldd	r24, Y+1	; 0x01
   144ba:	8f bf       	out	0x3f, r24	; 63
   144bc:	80 e0       	ldi	r24, 0x00	; 0
   return BUFFER_PASSED;

}/*End utl_destroyBuffer*/
   144be:	23 96       	adiw	r28, 0x03	; 3
   144c0:	cd bf       	out	0x3d, r28	; 61
   144c2:	de bf       	out	0x3e, r29	; 62
   144c4:	cf 91       	pop	r28
   144c6:	df 91       	pop	r29
   144c8:	08 95       	ret

000144ca <utl_createBuffer>:
   pt_handle->s_fillCount = 0;

}/*End ult_resetBuffer*/

t_BUFFHANDLE utl_createBuffer( int16_t s_sizeBytes)
{
   144ca:	df 92       	push	r13
   144cc:	ef 92       	push	r14
   144ce:	ff 92       	push	r15
   144d0:	0f 93       	push	r16
   144d2:	1f 93       	push	r17
   144d4:	df 93       	push	r29
   144d6:	cf 93       	push	r28
   144d8:	00 d0       	rcall	.+0      	; 0x144da <utl_createBuffer+0x10>
   144da:	cd b7       	in	r28, 0x3d	; 61
   144dc:	de b7       	in	r29, 0x3e	; 62
   144de:	d9 2e       	mov	r13, r25
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   144e0:	9f b7       	in	r25, 0x3f	; 63
   144e2:	99 83       	std	Y+1, r25	; 0x01
   144e4:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Create a new link handle with room at the end for the buffer..
    *------------------------------------------------------------------------*/
   t_newLinkHndl = utl_createLink( sizeof(t_bufferHandle) + s_sizeBytes);
   144e6:	e8 2e       	mov	r14, r24
   144e8:	fd 2c       	mov	r15, r13
   144ea:	c7 01       	movw	r24, r14
   144ec:	0a 96       	adiw	r24, 0x0a	; 10
   144ee:	0e 94 65 a5 	call	0x14aca	; 0x14aca <utl_createLink>
   144f2:	8a 83       	std	Y+2, r24	; 0x02
   144f4:	9b 83       	std	Y+3, r25	; 0x03

   if( t_newLinkHndl < 0)
   144f6:	8a 81       	ldd	r24, Y+2	; 0x02
   144f8:	9b 81       	ldd	r25, Y+3	; 0x03
   144fa:	97 ff       	sbrs	r25, 7
   144fc:	05 c0       	rjmp	.+10     	; 0x14508 <utl_createBuffer+0x3e>
   {
      HAL_END_CRITICAL();//Enable interrupts
   144fe:	89 81       	ldd	r24, Y+1	; 0x01
   14500:	8f bf       	out	0x3f, r24	; 63
   14502:	2f ef       	ldi	r18, 0xFF	; 255
   14504:	3f ef       	ldi	r19, 0xFF	; 255
   14506:	27 c0       	rjmp	.+78     	; 0x14556 <utl_createBuffer+0x8c>
   }/*End if( t_newLinkHndl < 0)*/

   /*------------------------------------------------------------------------*
    * Initialize the read and write index's.
    *------------------------------------------------------------------------*/
   pt_newBuff = (t_bufferHandle *)UTL_GET_LINK_ELEMENT_PTR(t_newLinkHndl);
   14508:	ea 81       	ldd	r30, Y+2	; 0x02
   1450a:	fb 81       	ldd	r31, Y+3	; 0x03
   1450c:	00 81       	ld	r16, Z
   1450e:	11 81       	ldd	r17, Z+1	; 0x01

   pt_newBuff->s_wrIndex   = 0;
   14510:	f8 01       	movw	r30, r16
   14512:	10 82       	st	Z, r1
   14514:	11 82       	std	Z+1, r1	; 0x01
   pt_newBuff->s_rdIndex   = 0;
   14516:	12 82       	std	Z+2, r1	; 0x02
   14518:	13 82       	std	Z+3, r1	; 0x03
   pt_newBuff->s_fillCount = 0;
   1451a:	14 82       	std	Z+4, r1	; 0x04
   1451c:	15 82       	std	Z+5, r1	; 0x05

   /*------------------------------------------------------------------------*
    * Initialize the buffer ptr to the location of the buffer which starts
    * at the next address location as the address of the buffer pointer.
    *------------------------------------------------------------------------*/
   pt_newBuff->pc_buffer = (int8_t *)(&pt_newBuff->pc_buffer + 1);
   1451e:	98 01       	movw	r18, r16
   14520:	26 5f       	subi	r18, 0xF6	; 246
   14522:	3f 4f       	sbci	r19, 0xFF	; 255
   14524:	20 87       	std	Z+8, r18	; 0x08
   14526:	31 87       	std	Z+9, r19	; 0x09

   /*------------------------------------------------------------------------*
    * Initialize the buffer to all NULL's.
    *------------------------------------------------------------------------*/
   memset( (void *)pt_newBuff->pc_buffer, '\0', s_sizeBytes);
   14528:	c9 01       	movw	r24, r18
   1452a:	60 e0       	ldi	r22, 0x00	; 0
   1452c:	70 e0       	ldi	r23, 0x00	; 0
   1452e:	4e 2d       	mov	r20, r14
   14530:	5d 2d       	mov	r21, r13
   14532:	0e 94 f9 b7 	call	0x16ff2	; 0x16ff2 <memset>

   /*------------------------------------------------------------------------*
    * The size of the buffer in 8-bit words.
    *------------------------------------------------------------------------*/
   pt_newBuff->s_sizeBytes = s_sizeBytes;
   14536:	f8 01       	movw	r30, r16
   14538:	e6 82       	std	Z+6, r14	; 0x06
   1453a:	f7 82       	std	Z+7, r15	; 0x07

   t_err = utl_insertLink( gt_bufferList,
   1453c:	80 91 37 22 	lds	r24, 0x2237
   14540:	90 91 38 22 	lds	r25, 0x2238
   14544:	6a 81       	ldd	r22, Y+2	; 0x02
   14546:	7b 81       	ldd	r23, Y+3	; 0x03
   14548:	41 e0       	ldi	r20, 0x01	; 1
   1454a:	0e 94 75 a3 	call	0x146ea	; 0x146ea <utl_insertLink>
                           t_newLinkHndl,
                           true);

   HAL_END_CRITICAL();//Enable interrupts
   1454e:	89 81       	ldd	r24, Y+1	; 0x01
   14550:	8f bf       	out	0x3f, r24	; 63

   return (t_BUFFHANDLE)t_newLinkHndl;
   14552:	2a 81       	ldd	r18, Y+2	; 0x02
   14554:	3b 81       	ldd	r19, Y+3	; 0x03

}/*End utl_createBuffer*/
   14556:	c9 01       	movw	r24, r18
   14558:	23 96       	adiw	r28, 0x03	; 3
   1455a:	cd bf       	out	0x3d, r28	; 61
   1455c:	de bf       	out	0x3e, r29	; 62
   1455e:	cf 91       	pop	r28
   14560:	df 91       	pop	r29
   14562:	1f 91       	pop	r17
   14564:	0f 91       	pop	r16
   14566:	ff 90       	pop	r15
   14568:	ef 90       	pop	r14
   1456a:	df 90       	pop	r13
   1456c:	08 95       	ret

0001456e <utl_readBlock>:
}/*End utl_buffEraseTailByte*/

void utl_readBlock( t_BUFFHANDLE t_handle,
                    int8_t *pc_buff,
                    uint16_t s_size)
{
   1456e:	8f 92       	push	r8
   14570:	9f 92       	push	r9
   14572:	af 92       	push	r10
   14574:	bf 92       	push	r11
   14576:	cf 92       	push	r12
   14578:	df 92       	push	r13
   1457a:	ef 92       	push	r14
   1457c:	ff 92       	push	r15
   1457e:	0f 93       	push	r16
   14580:	1f 93       	push	r17
   14582:	df 93       	push	r29
   14584:	cf 93       	push	r28
   14586:	0f 92       	push	r0
   14588:	0f 92       	push	r0
   1458a:	cd b7       	in	r28, 0x3d	; 61
   1458c:	de b7       	in	r29, 0x3e	; 62
   1458e:	89 83       	std	Y+1, r24	; 0x01
   14590:	9a 83       	std	Y+2, r25	; 0x02
   14592:	6b 01       	movw	r12, r22
   14594:	4a 01       	movw	r8, r20
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14596:	e9 81       	ldd	r30, Y+1	; 0x01
   14598:	fa 81       	ldd	r31, Y+2	; 0x02
   1459a:	e0 80       	ld	r14, Z
   1459c:	f1 80       	ldd	r15, Z+1	; 0x01
   int8_t *pc_buffer         = pt_handle->pc_buffer;
   1459e:	f7 01       	movw	r30, r14
   145a0:	a0 84       	ldd	r10, Z+8	; 0x08
   145a2:	b1 84       	ldd	r11, Z+9	; 0x09
   int16_t *ps_rdIndex       = &pt_handle->s_rdIndex;
   uint16_t s_room           = 0;

   s_room = pt_handle->s_sizeBytes - pt_handle->s_rdIndex;
   145a4:	82 81       	ldd	r24, Z+2	; 0x02
   145a6:	93 81       	ldd	r25, Z+3	; 0x03
   145a8:	06 81       	ldd	r16, Z+6	; 0x06
   145aa:	17 81       	ldd	r17, Z+7	; 0x07
   145ac:	08 1b       	sub	r16, r24
   145ae:	19 0b       	sbc	r17, r25
   145b0:	95 01       	movw	r18, r10
   145b2:	28 0f       	add	r18, r24
   145b4:	39 1f       	adc	r19, r25
   if( s_room < s_size)
   145b6:	04 17       	cp	r16, r20
   145b8:	15 07       	cpc	r17, r21
   145ba:	78 f4       	brcc	.+30     	; 0x145da <utl_readBlock+0x6c>
   {
      /*---------------------------------------------------------------------*
       * Copy from current location to the end of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)pc_buff, (void *)&pc_buffer[*ps_rdIndex], s_room);
   145bc:	cb 01       	movw	r24, r22
   145be:	b9 01       	movw	r22, r18
   145c0:	a8 01       	movw	r20, r16
   145c2:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>

      /*---------------------------------------------------------------------*
       * Copy the rest of the data starting at the beginning of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)&pc_buff[s_room], (void *)pc_buffer, s_size - s_room);
   145c6:	96 01       	movw	r18, r12
   145c8:	20 0f       	add	r18, r16
   145ca:	31 1f       	adc	r19, r17
   145cc:	f4 01       	movw	r30, r8
   145ce:	e0 1b       	sub	r30, r16
   145d0:	f1 0b       	sbc	r31, r17
   145d2:	c9 01       	movw	r24, r18
   145d4:	b5 01       	movw	r22, r10
   145d6:	af 01       	movw	r20, r30
   145d8:	02 c0       	rjmp	.+4      	; 0x145de <utl_readBlock+0x70>
   }
   else
   {
      memcpy( (void *)pc_buff, (void *)&pc_buffer[*ps_rdIndex], s_size);
   145da:	cb 01       	movw	r24, r22
   145dc:	b9 01       	movw	r22, r18
   145de:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
   }

   *ps_rdIndex += s_size;
   145e2:	f7 01       	movw	r30, r14
   145e4:	82 81       	ldd	r24, Z+2	; 0x02
   145e6:	93 81       	ldd	r25, Z+3	; 0x03
   145e8:	88 0d       	add	r24, r8
   145ea:	99 1d       	adc	r25, r9
   145ec:	82 83       	std	Z+2, r24	; 0x02
   145ee:	93 83       	std	Z+3, r25	; 0x03
   if( *ps_rdIndex >= pt_handle->s_sizeBytes)
   145f0:	26 81       	ldd	r18, Z+6	; 0x06
   145f2:	37 81       	ldd	r19, Z+7	; 0x07
   145f4:	82 17       	cp	r24, r18
   145f6:	93 07       	cpc	r25, r19
   145f8:	20 f0       	brcs	.+8      	; 0x14602 <utl_readBlock+0x94>
   {
      *ps_rdIndex -= pt_handle->s_sizeBytes;
   145fa:	82 1b       	sub	r24, r18
   145fc:	93 0b       	sbc	r25, r19
   145fe:	82 83       	std	Z+2, r24	; 0x02
   14600:	93 83       	std	Z+3, r25	; 0x03
   }

   pt_handle->s_fillCount -= (int16_t)s_size;
   14602:	f7 01       	movw	r30, r14
   14604:	84 81       	ldd	r24, Z+4	; 0x04
   14606:	95 81       	ldd	r25, Z+5	; 0x05
   14608:	88 19       	sub	r24, r8
   1460a:	99 09       	sbc	r25, r9
   1460c:	84 83       	std	Z+4, r24	; 0x04
   1460e:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_readBlock*/
   14610:	0f 90       	pop	r0
   14612:	0f 90       	pop	r0
   14614:	cf 91       	pop	r28
   14616:	df 91       	pop	r29
   14618:	1f 91       	pop	r17
   1461a:	0f 91       	pop	r16
   1461c:	ff 90       	pop	r15
   1461e:	ef 90       	pop	r14
   14620:	df 90       	pop	r13
   14622:	cf 90       	pop	r12
   14624:	bf 90       	pop	r11
   14626:	af 90       	pop	r10
   14628:	9f 90       	pop	r9
   1462a:	8f 90       	pop	r8
   1462c:	08 95       	ret

0001462e <utl_writeBlock>:
}/*End utl_getBufWrtPtr*/

void utl_writeBlock( t_BUFFHANDLE t_handle,
                     int8_t *pc_buff,
                     uint16_t s_size)
{
   1462e:	8f 92       	push	r8
   14630:	9f 92       	push	r9
   14632:	af 92       	push	r10
   14634:	bf 92       	push	r11
   14636:	cf 92       	push	r12
   14638:	df 92       	push	r13
   1463a:	ef 92       	push	r14
   1463c:	ff 92       	push	r15
   1463e:	0f 93       	push	r16
   14640:	1f 93       	push	r17
   14642:	df 93       	push	r29
   14644:	cf 93       	push	r28
   14646:	0f 92       	push	r0
   14648:	0f 92       	push	r0
   1464a:	cd b7       	in	r28, 0x3d	; 61
   1464c:	de b7       	in	r29, 0x3e	; 62
   1464e:	89 83       	std	Y+1, r24	; 0x01
   14650:	9a 83       	std	Y+2, r25	; 0x02
   14652:	6b 01       	movw	r12, r22
   14654:	4a 01       	movw	r8, r20
   t_bufferHandle *pt_handle = (t_bufferHandle *)
   UTL_GET_LINK_ELEMENT_PTR(t_handle);
   14656:	e9 81       	ldd	r30, Y+1	; 0x01
   14658:	fa 81       	ldd	r31, Y+2	; 0x02
   1465a:	e0 80       	ld	r14, Z
   1465c:	f1 80       	ldd	r15, Z+1	; 0x01
   int8_t *pc_buffer         = pt_handle->pc_buffer;
   1465e:	f7 01       	movw	r30, r14
   14660:	a0 84       	ldd	r10, Z+8	; 0x08
   14662:	b1 84       	ldd	r11, Z+9	; 0x09
   int16_t *ps_wrIndex       = &pt_handle->s_wrIndex;
   uint16_t s_room           = 0;

   s_room = pt_handle->s_sizeBytes - pt_handle->s_wrIndex;
   14664:	80 81       	ld	r24, Z
   14666:	91 81       	ldd	r25, Z+1	; 0x01
   14668:	06 81       	ldd	r16, Z+6	; 0x06
   1466a:	17 81       	ldd	r17, Z+7	; 0x07
   1466c:	08 1b       	sub	r16, r24
   1466e:	19 0b       	sbc	r17, r25
   14670:	95 01       	movw	r18, r10
   14672:	28 0f       	add	r18, r24
   14674:	39 1f       	adc	r19, r25
   if( s_room < s_size)
   14676:	04 17       	cp	r16, r20
   14678:	15 07       	cpc	r17, r21
   1467a:	70 f4       	brcc	.+28     	; 0x14698 <utl_writeBlock+0x6a>
   {
      /*---------------------------------------------------------------------*
       * Copy from current location to the end of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)&pc_buffer[*ps_wrIndex], (void *)pc_buff, s_room);
   1467c:	c9 01       	movw	r24, r18
   1467e:	a8 01       	movw	r20, r16
   14680:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>

      /*---------------------------------------------------------------------*
       * Copy the rest of the data starting at the beginning of the buffer.
       *---------------------------------------------------------------------*/
      memcpy( (void *)pc_buffer, (void *)&pc_buff[s_room], s_size - s_room);
   14684:	f4 01       	movw	r30, r8
   14686:	e0 1b       	sub	r30, r16
   14688:	f1 0b       	sbc	r31, r17
   1468a:	96 01       	movw	r18, r12
   1468c:	20 0f       	add	r18, r16
   1468e:	31 1f       	adc	r19, r17
   14690:	c5 01       	movw	r24, r10
   14692:	b9 01       	movw	r22, r18
   14694:	af 01       	movw	r20, r30
   14696:	01 c0       	rjmp	.+2      	; 0x1469a <utl_writeBlock+0x6c>
   }
   else
   {
      memcpy( (void *)&pc_buffer[*ps_wrIndex], (void *)pc_buff, s_size);
   14698:	c9 01       	movw	r24, r18
   1469a:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
   }

   *ps_wrIndex += s_size;
   1469e:	f7 01       	movw	r30, r14
   146a0:	80 81       	ld	r24, Z
   146a2:	91 81       	ldd	r25, Z+1	; 0x01
   146a4:	88 0d       	add	r24, r8
   146a6:	99 1d       	adc	r25, r9
   146a8:	80 83       	st	Z, r24
   146aa:	91 83       	std	Z+1, r25	; 0x01
   if( *ps_wrIndex >= pt_handle->s_sizeBytes)
   146ac:	26 81       	ldd	r18, Z+6	; 0x06
   146ae:	37 81       	ldd	r19, Z+7	; 0x07
   146b0:	82 17       	cp	r24, r18
   146b2:	93 07       	cpc	r25, r19
   146b4:	20 f0       	brcs	.+8      	; 0x146be <utl_writeBlock+0x90>
   {
      *ps_wrIndex -= pt_handle->s_sizeBytes;
   146b6:	82 1b       	sub	r24, r18
   146b8:	93 0b       	sbc	r25, r19
   146ba:	80 83       	st	Z, r24
   146bc:	91 83       	std	Z+1, r25	; 0x01
   }

   pt_handle->s_fillCount += (int16_t)s_size;
   146be:	f7 01       	movw	r30, r14
   146c0:	84 81       	ldd	r24, Z+4	; 0x04
   146c2:	95 81       	ldd	r25, Z+5	; 0x05
   146c4:	88 0d       	add	r24, r8
   146c6:	99 1d       	adc	r25, r9
   146c8:	84 83       	std	Z+4, r24	; 0x04
   146ca:	95 83       	std	Z+5, r25	; 0x05

}/*End utl_writeBlock*/
   146cc:	0f 90       	pop	r0
   146ce:	0f 90       	pop	r0
   146d0:	cf 91       	pop	r28
   146d2:	df 91       	pop	r29
   146d4:	1f 91       	pop	r17
   146d6:	0f 91       	pop	r16
   146d8:	ff 90       	pop	r15
   146da:	ef 90       	pop	r14
   146dc:	df 90       	pop	r13
   146de:	cf 90       	pop	r12
   146e0:	bf 90       	pop	r11
   146e2:	af 90       	pop	r10
   146e4:	9f 90       	pop	r9
   146e6:	8f 90       	pop	r8
   146e8:	08 95       	ret

000146ea <utl_insertLink>:
}/*End utl_createLink*/

t_linkedListError utl_insertLink( t_CONTHNDL t_contHndl,
                                  t_LINKHNDL t_linkHndl,
                                  bool b_tail)
{
   146ea:	df 93       	push	r29
   146ec:	cf 93       	push	r28
   146ee:	cd b7       	in	r28, 0x3d	; 61
   146f0:	de b7       	in	r29, 0x3e	; 62
   146f2:	25 97       	sbiw	r28, 0x05	; 5
   146f4:	cd bf       	out	0x3d, r28	; 61
   146f6:	de bf       	out	0x3e, r29	; 62
   146f8:	8a 83       	std	Y+2, r24	; 0x02
   146fa:	9b 83       	std	Y+3, r25	; 0x03
   146fc:	6c 83       	std	Y+4, r22	; 0x04
   146fe:	7d 83       	std	Y+5, r23	; 0x05

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14700:	8f b7       	in	r24, 0x3f	; 63
   14702:	89 83       	std	Y+1, r24	; 0x01
   14704:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   14706:	6a 81       	ldd	r22, Y+2	; 0x02
   14708:	7b 81       	ldd	r23, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Is this a valid container?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   1470a:	fb 01       	movw	r30, r22
   1470c:	80 81       	ld	r24, Z
   1470e:	91 81       	ldd	r25, Z+1	; 0x01
   14710:	8e 5d       	subi	r24, 0xDE	; 222
   14712:	9a 4f       	sbci	r25, 0xFA	; 250
   14714:	09 f0       	breq	.+2      	; 0x14718 <utl_insertLink+0x2e>
   14716:	5b c0       	rjmp	.+182    	; 0x147ce <utl_insertLink+0xe4>
   {

      pt_link = (t_listLink *)t_linkHndl;
   14718:	ac 81       	ldd	r26, Y+4	; 0x04
   1471a:	bd 81       	ldd	r27, Y+5	; 0x05

      /*---------------------------------------------------------------------*
       * Is this 'link' already on this list or another one?
       *---------------------------------------------------------------------*/
      if( pt_link->s_contAddr != LINKEDLIST_LINK_UNMAPPED) /*Yes*/
   1471c:	14 96       	adiw	r26, 0x04	; 4
   1471e:	8d 91       	ld	r24, X+
   14720:	9c 91       	ld	r25, X
   14722:	15 97       	sbiw	r26, 0x05	; 5
   14724:	89 2b       	or	r24, r25
   14726:	21 f0       	breq	.+8      	; 0x14730 <utl_insertLink+0x46>
      {
         HAL_END_CRITICAL();//Enable interrupts
   14728:	89 81       	ldd	r24, Y+1	; 0x01
   1472a:	8f bf       	out	0x3f, r24	; 63
   1472c:	8c ef       	ldi	r24, 0xFC	; 252
   1472e:	52 c0       	rjmp	.+164    	; 0x147d4 <utl_insertLink+0xea>
      }

      /*---------------------------------------------------------------------*
       * Keep track of the 'container' where this 'link' belongs...
       *---------------------------------------------------------------------*/
      pt_link->s_contAddr = t_contHndl;
   14730:	8a 81       	ldd	r24, Y+2	; 0x02
   14732:	9b 81       	ldd	r25, Y+3	; 0x03
   14734:	14 96       	adiw	r26, 0x04	; 4
   14736:	8d 93       	st	X+, r24
   14738:	9c 93       	st	X, r25
   1473a:	15 97       	sbiw	r26, 0x05	; 5

      /*---------------------------------------------------------------------*
       * Are we adding the very first node on the list
       *---------------------------------------------------------------------*/
      if( (pt_cont->pt_head == NULL) && (pt_cont->pt_tail == NULL))
   1473c:	fb 01       	movw	r30, r22
   1473e:	20 85       	ldd	r18, Z+8	; 0x08
   14740:	31 85       	ldd	r19, Z+9	; 0x09
   14742:	21 15       	cp	r18, r1
   14744:	31 05       	cpc	r19, r1
   14746:	a9 f4       	brne	.+42     	; 0x14772 <utl_insertLink+0x88>
   14748:	82 85       	ldd	r24, Z+10	; 0x0a
   1474a:	93 85       	ldd	r25, Z+11	; 0x0b
   1474c:	89 2b       	or	r24, r25
   1474e:	89 f4       	brne	.+34     	; 0x14772 <utl_insertLink+0x88>
      {
         /*------------------------------------------------------------------*
          * Establish circular link
          *------------------------------------------------------------------*/
         pt_link->pt_prev = pt_link;
   14750:	0a 2e       	mov	r0, r26
   14752:	1b 2e       	mov	r1, r27
   14754:	1a 96       	adiw	r26, 0x0a	; 10
   14756:	0d 92       	st	X+, r0
   14758:	1c 92       	st	X, r1
   1475a:	11 24       	eor	r1, r1
   1475c:	1b 97       	sbiw	r26, 0x0b	; 11
         pt_link->pt_next = pt_link;
   1475e:	0a 2e       	mov	r0, r26
   14760:	1b 2e       	mov	r1, r27
   14762:	18 96       	adiw	r26, 0x08	; 8
   14764:	0d 92       	st	X+, r0
   14766:	1c 92       	st	X, r1
   14768:	11 24       	eor	r1, r1
   1476a:	19 97       	sbiw	r26, 0x09	; 9

         /*------------------------------------------------------------------*
          * Move head and tail location
          *------------------------------------------------------------------*/
         (pt_cont->pt_head) = pt_link;
   1476c:	a0 87       	std	Z+8, r26	; 0x08
   1476e:	b1 87       	std	Z+9, r27	; 0x09
   14770:	14 c0       	rjmp	.+40     	; 0x1479a <utl_insertLink+0xb0>

      }/*End if( (pt_cont->pt_head == NULL) && (pt_cont->pt_tail == NULL))*/
      else
      {

         pt_link->pt_prev  = (pt_cont->pt_tail);
   14772:	fb 01       	movw	r30, r22
   14774:	82 85       	ldd	r24, Z+10	; 0x0a
   14776:	93 85       	ldd	r25, Z+11	; 0x0b
   14778:	1a 96       	adiw	r26, 0x0a	; 10
   1477a:	8d 93       	st	X+, r24
   1477c:	9c 93       	st	X, r25
   1477e:	1b 97       	sbiw	r26, 0x0b	; 11
         pt_link->pt_next  = (pt_cont->pt_head);
   14780:	18 96       	adiw	r26, 0x08	; 8
   14782:	2d 93       	st	X+, r18
   14784:	3c 93       	st	X, r19
   14786:	19 97       	sbiw	r26, 0x09	; 9
         (pt_cont->pt_head)->pt_prev = pt_link;
   14788:	f9 01       	movw	r30, r18
   1478a:	a2 87       	std	Z+10, r26	; 0x0a
   1478c:	b3 87       	std	Z+11, r27	; 0x0b
         (pt_cont->pt_tail)->pt_next = pt_link;
   1478e:	fc 01       	movw	r30, r24
   14790:	a0 87       	std	Z+8, r26	; 0x08
   14792:	b1 87       	std	Z+9, r27	; 0x09

         if( b_tail == true)
   14794:	44 23       	and	r20, r20
   14796:	21 f0       	breq	.+8      	; 0x147a0 <utl_insertLink+0xb6>
         {
            /*---------------------------------------------------------------*
             * Move tail location
             *---------------------------------------------------------------*/
            (pt_cont->pt_tail) = pt_link;
   14798:	fb 01       	movw	r30, r22
   1479a:	a2 87       	std	Z+10, r26	; 0x0a
   1479c:	b3 87       	std	Z+11, r27	; 0x0b
   1479e:	03 c0       	rjmp	.+6      	; 0x147a6 <utl_insertLink+0xbc>
         else
         {
             /*---------------------------------------------------------------*
             * Move head location
             *---------------------------------------------------------------*/
            (pt_cont->pt_head) = pt_link;
   147a0:	fb 01       	movw	r30, r22
   147a2:	a0 87       	std	Z+8, r26	; 0x08
   147a4:	b1 87       	std	Z+9, r27	; 0x09
      }

      /*---------------------------------------------------------------------*
       * Update the status for this container...
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks++;
   147a6:	fb 01       	movw	r30, r22
   147a8:	82 81       	ldd	r24, Z+2	; 0x02
   147aa:	93 81       	ldd	r25, Z+3	; 0x03
   147ac:	01 96       	adiw	r24, 0x01	; 1
   147ae:	82 83       	std	Z+2, r24	; 0x02
   147b0:	93 83       	std	Z+3, r25	; 0x03
      pt_cont->s_contSizeBytes += pt_link->s_linkSizeBytes;
   147b2:	84 81       	ldd	r24, Z+4	; 0x04
   147b4:	95 81       	ldd	r25, Z+5	; 0x05
   147b6:	16 96       	adiw	r26, 0x06	; 6
   147b8:	2d 91       	ld	r18, X+
   147ba:	3c 91       	ld	r19, X
   147bc:	17 97       	sbiw	r26, 0x07	; 7
   147be:	82 0f       	add	r24, r18
   147c0:	93 1f       	adc	r25, r19
   147c2:	84 83       	std	Z+4, r24	; 0x04
   147c4:	95 83       	std	Z+5, r25	; 0x05
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   147c6:	89 81       	ldd	r24, Y+1	; 0x01
   147c8:	8f bf       	out	0x3f, r24	; 63
   147ca:	80 e0       	ldi	r24, 0x00	; 0
   147cc:	03 c0       	rjmp	.+6      	; 0x147d4 <utl_insertLink+0xea>
      pt_cont->s_contSizeBytes += pt_link->s_linkSizeBytes;

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   147ce:	89 81       	ldd	r24, Y+1	; 0x01
   147d0:	8f bf       	out	0x3f, r24	; 63
   147d2:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_insertLink*/
   147d4:	25 96       	adiw	r28, 0x05	; 5
   147d6:	cd bf       	out	0x3d, r28	; 61
   147d8:	de bf       	out	0x3e, r29	; 62
   147da:	cf 91       	pop	r28
   147dc:	df 91       	pop	r29
   147de:	08 95       	ret

000147e0 <utl_removeLink>:

}/*End utl_destroyLink*/

t_linkedListError utl_removeLink( t_CONTHNDL t_contHndl,
                                  t_LINKHNDL t_linkHndl)
{
   147e0:	df 93       	push	r29
   147e2:	cf 93       	push	r28
   147e4:	cd b7       	in	r28, 0x3d	; 61
   147e6:	de b7       	in	r29, 0x3e	; 62
   147e8:	25 97       	sbiw	r28, 0x05	; 5
   147ea:	cd bf       	out	0x3d, r28	; 61
   147ec:	de bf       	out	0x3e, r29	; 62
   147ee:	8a 83       	std	Y+2, r24	; 0x02
   147f0:	9b 83       	std	Y+3, r25	; 0x03
   147f2:	6c 83       	std	Y+4, r22	; 0x04
   147f4:	7d 83       	std	Y+5, r23	; 0x05
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   147f6:	8f b7       	in	r24, 0x3f	; 63
   147f8:	89 83       	std	Y+1, r24	; 0x01
   147fa:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   147fc:	4a 81       	ldd	r20, Y+2	; 0x02
   147fe:	5b 81       	ldd	r21, Y+3	; 0x03

   /*------------------------------------------------------------------------*
    * Is this a valid container handle?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   14800:	fa 01       	movw	r30, r20
   14802:	80 81       	ld	r24, Z
   14804:	91 81       	ldd	r25, Z+1	; 0x01
   14806:	8e 5d       	subi	r24, 0xDE	; 222
   14808:	9a 4f       	sbci	r25, 0xFA	; 250
   1480a:	09 f0       	breq	.+2      	; 0x1480e <utl_removeLink+0x2e>
   1480c:	61 c0       	rjmp	.+194    	; 0x148d0 <utl_removeLink+0xf0>
   {
      pt_curr = (t_listLink *)t_linkHndl;
   1480e:	ac 81       	ldd	r26, Y+4	; 0x04
   14810:	bd 81       	ldd	r27, Y+5	; 0x05

      /*---------------------------------------------------------------------*
       * Is this 'link' on the list?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( t_linkHndl, t_contHndl) == false) /*No*/
   14812:	ec 81       	ldd	r30, Y+4	; 0x04
   14814:	fd 81       	ldd	r31, Y+5	; 0x05
   14816:	2a 81       	ldd	r18, Y+2	; 0x02
   14818:	3b 81       	ldd	r19, Y+3	; 0x03
   1481a:	84 81       	ldd	r24, Z+4	; 0x04
   1481c:	95 81       	ldd	r25, Z+5	; 0x05
   1481e:	82 17       	cp	r24, r18
   14820:	93 07       	cpc	r25, r19
   14822:	21 f0       	breq	.+8      	; 0x1482c <utl_removeLink+0x4c>
      {
         HAL_END_CRITICAL();//Enable interrupts
   14824:	89 81       	ldd	r24, Y+1	; 0x01
   14826:	8f bf       	out	0x3f, r24	; 63
   14828:	8e ef       	ldi	r24, 0xFE	; 254
   1482a:	55 c0       	rjmp	.+170    	; 0x148d6 <utl_removeLink+0xf6>
      }

      /*---------------------------------------------------------------------*
       * Make sure the link is no longer mapped to this particular container.
       *---------------------------------------------------------------------*/
      pt_curr->s_contAddr = LINKEDLIST_LINK_UNMAPPED;
   1482c:	14 96       	adiw	r26, 0x04	; 4
   1482e:	1d 92       	st	X+, r1
   14830:	1c 92       	st	X, r1
   14832:	15 97       	sbiw	r26, 0x05	; 5

      pt_prev = pt_curr->pt_prev;
   14834:	1a 96       	adiw	r26, 0x0a	; 10
   14836:	2d 91       	ld	r18, X+
   14838:	3c 91       	ld	r19, X
   1483a:	1b 97       	sbiw	r26, 0x0b	; 11
   1483c:	20 93 aa 25 	sts	0x25AA, r18
   14840:	30 93 ab 25 	sts	0x25AB, r19
      pt_next = pt_curr->pt_next;
   14844:	18 96       	adiw	r26, 0x08	; 8
   14846:	6d 91       	ld	r22, X+
   14848:	7c 91       	ld	r23, X
   1484a:	19 97       	sbiw	r26, 0x09	; 9
   1484c:	60 93 a8 25 	sts	0x25A8, r22
   14850:	70 93 a9 25 	sts	0x25A9, r23

      /*---------------------------------------------------------------------*
       * Are there other 'links' still on the list?
       *---------------------------------------------------------------------*/
      if( pt_curr != pt_next)
   14854:	a6 17       	cp	r26, r22
   14856:	b7 07       	cpc	r27, r23
   14858:	c1 f0       	breq	.+48     	; 0x1488a <utl_removeLink+0xaa>
      {
         /*------------------------------------------------------------------*
          * Remove the node from this list.
          *------------------------------------------------------------------*/
         pt_prev->pt_next = pt_next;
   1485a:	f9 01       	movw	r30, r18
   1485c:	60 87       	std	Z+8, r22	; 0x08
   1485e:	71 87       	std	Z+9, r23	; 0x09
         pt_next->pt_prev = pt_prev;
   14860:	fb 01       	movw	r30, r22
   14862:	22 87       	std	Z+10, r18	; 0x0a
   14864:	33 87       	std	Z+11, r19	; 0x0b

         /*------------------------------------------------------------------*
          * Were we at the start or end of the list?
          *------------------------------------------------------------------*/
         if( pt_curr == pt_cont->pt_head)
   14866:	fa 01       	movw	r30, r20
   14868:	80 85       	ldd	r24, Z+8	; 0x08
   1486a:	91 85       	ldd	r25, Z+9	; 0x09
   1486c:	a8 17       	cp	r26, r24
   1486e:	b9 07       	cpc	r27, r25
   14870:	19 f4       	brne	.+6      	; 0x14878 <utl_removeLink+0x98>
            pt_cont->pt_head = pt_next;
   14872:	60 87       	std	Z+8, r22	; 0x08
   14874:	71 87       	std	Z+9, r23	; 0x09
   14876:	0e c0       	rjmp	.+28     	; 0x14894 <utl_removeLink+0xb4>
         else if( pt_curr == pt_cont->pt_tail)
   14878:	fa 01       	movw	r30, r20
   1487a:	82 85       	ldd	r24, Z+10	; 0x0a
   1487c:	93 85       	ldd	r25, Z+11	; 0x0b
   1487e:	a8 17       	cp	r26, r24
   14880:	b9 07       	cpc	r27, r25
   14882:	41 f4       	brne	.+16     	; 0x14894 <utl_removeLink+0xb4>
            pt_cont->pt_tail = pt_prev;
   14884:	22 87       	std	Z+10, r18	; 0x0a
   14886:	33 87       	std	Z+11, r19	; 0x0b
   14888:	05 c0       	rjmp	.+10     	; 0x14894 <utl_removeLink+0xb4>

      }
      else /*Last node*/
      {
         pt_cont->pt_head = NULL;
   1488a:	fa 01       	movw	r30, r20
   1488c:	10 86       	std	Z+8, r1	; 0x08
   1488e:	11 86       	std	Z+9, r1	; 0x09
         pt_cont->pt_tail = NULL;
   14890:	12 86       	std	Z+10, r1	; 0x0a
   14892:	13 86       	std	Z+11, r1	; 0x0b
      }

      /*---------------------------------------------------------------------*
       * This link is no longer mapped to a list...
       *---------------------------------------------------------------------*/
      pt_curr->s_contAddr = LINKEDLIST_LINK_UNMAPPED;
   14894:	14 96       	adiw	r26, 0x04	; 4
   14896:	1d 92       	st	X+, r1
   14898:	1c 92       	st	X, r1
   1489a:	15 97       	sbiw	r26, 0x05	; 5
      pt_curr->pt_next    = NULL;
   1489c:	18 96       	adiw	r26, 0x08	; 8
   1489e:	1d 92       	st	X+, r1
   148a0:	1c 92       	st	X, r1
   148a2:	19 97       	sbiw	r26, 0x09	; 9
      pt_curr->pt_prev    = NULL;
   148a4:	1a 96       	adiw	r26, 0x0a	; 10
   148a6:	1d 92       	st	X+, r1
   148a8:	1c 92       	st	X, r1
   148aa:	1b 97       	sbiw	r26, 0x0b	; 11

      /*---------------------------------------------------------------------*
       * Keep track of the size of the container...
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks--;
   148ac:	fa 01       	movw	r30, r20
   148ae:	82 81       	ldd	r24, Z+2	; 0x02
   148b0:	93 81       	ldd	r25, Z+3	; 0x03
   148b2:	01 97       	sbiw	r24, 0x01	; 1
   148b4:	82 83       	std	Z+2, r24	; 0x02
   148b6:	93 83       	std	Z+3, r25	; 0x03
      pt_cont->s_contSizeBytes -= pt_curr->s_linkSizeBytes;
   148b8:	84 81       	ldd	r24, Z+4	; 0x04
   148ba:	95 81       	ldd	r25, Z+5	; 0x05
   148bc:	16 96       	adiw	r26, 0x06	; 6
   148be:	2d 91       	ld	r18, X+
   148c0:	3c 91       	ld	r19, X
   148c2:	17 97       	sbiw	r26, 0x07	; 7
   148c4:	82 1b       	sub	r24, r18
   148c6:	93 0b       	sbc	r25, r19
   148c8:	84 83       	std	Z+4, r24	; 0x04
   148ca:	95 83       	std	Z+5, r25	; 0x05
   148cc:	80 e0       	ldi	r24, 0x00	; 0
   148ce:	03 c0       	rjmp	.+6      	; 0x148d6 <utl_removeLink+0xf6>

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   148d0:	89 81       	ldd	r24, Y+1	; 0x01
   148d2:	8f bf       	out	0x3f, r24	; 63
   148d4:	8d ef       	ldi	r24, 0xFD	; 253
      return LINKEDLIST_INVALID_CONT;
   }

   return LINKEDLIST_PASSED;

}/*End utl_removeLink*/
   148d6:	25 96       	adiw	r28, 0x05	; 5
   148d8:	cd bf       	out	0x3d, r28	; 61
   148da:	de bf       	out	0x3e, r29	; 62
   148dc:	cf 91       	pop	r28
   148de:	df 91       	pop	r29
   148e0:	08 95       	ret

000148e2 <utl_destroyLink>:

}/*End utl_insertLink*/

t_linkedListError utl_destroyLink( t_CONTHNDL t_contHndl,
                                   t_LINKHNDL t_linkHndl)
{
   148e2:	df 93       	push	r29
   148e4:	cf 93       	push	r28
   148e6:	cd b7       	in	r28, 0x3d	; 61
   148e8:	de b7       	in	r29, 0x3e	; 62
   148ea:	27 97       	sbiw	r28, 0x07	; 7
   148ec:	cd bf       	out	0x3d, r28	; 61
   148ee:	de bf       	out	0x3e, r29	; 62
   148f0:	8c 83       	std	Y+4, r24	; 0x04
   148f2:	9d 83       	std	Y+5, r25	; 0x05
   148f4:	6e 83       	std	Y+6, r22	; 0x06
   148f6:	7f 83       	std	Y+7, r23	; 0x07
   /*------------------------------------------------------------------------*
    * Since we are about to act on global variables, protect this region
    * of code against higher priority threads interrupting us while we are
    * trying to register.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
   148f8:	8f b7       	in	r24, 0x3f	; 63
   148fa:	89 83       	std	Y+1, r24	; 0x01
   148fc:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   148fe:	ac 81       	ldd	r26, Y+4	; 0x04
   14900:	bd 81       	ldd	r27, Y+5	; 0x05

   /*------------------------------------------------------------------------*
    * Is this a valid container?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   14902:	8d 91       	ld	r24, X+
   14904:	9c 91       	ld	r25, X
   14906:	11 97       	sbiw	r26, 0x01	; 1
   14908:	8e 5d       	subi	r24, 0xDE	; 222
   1490a:	9a 4f       	sbci	r25, 0xFA	; 250
   1490c:	09 f0       	breq	.+2      	; 0x14910 <utl_destroyLink+0x2e>
   1490e:	8f c0       	rjmp	.+286    	; 0x14a2e <utl_destroyLink+0x14c>
   {
      pt_curr = (t_listLink *)t_linkHndl;
   14910:	6e 81       	ldd	r22, Y+6	; 0x06
   14912:	7f 81       	ldd	r23, Y+7	; 0x07

      /*---------------------------------------------------------------------*
       * Is this 'link' on the list?
       *---------------------------------------------------------------------*/
      if( UTL_IS_LINK_ON_LIST( t_linkHndl, t_contHndl) == false) /*No*/
   14914:	ee 81       	ldd	r30, Y+6	; 0x06
   14916:	ff 81       	ldd	r31, Y+7	; 0x07
   14918:	2c 81       	ldd	r18, Y+4	; 0x04
   1491a:	3d 81       	ldd	r19, Y+5	; 0x05
   1491c:	84 81       	ldd	r24, Z+4	; 0x04
   1491e:	95 81       	ldd	r25, Z+5	; 0x05
   14920:	82 17       	cp	r24, r18
   14922:	93 07       	cpc	r25, r19
   14924:	21 f0       	breq	.+8      	; 0x1492e <utl_destroyLink+0x4c>
      {
         HAL_END_CRITICAL();//Enable interrupts
   14926:	89 81       	ldd	r24, Y+1	; 0x01
   14928:	8f bf       	out	0x3f, r24	; 63
   1492a:	8e ef       	ldi	r24, 0xFE	; 254
   1492c:	83 c0       	rjmp	.+262    	; 0x14a34 <utl_destroyLink+0x152>
         return LINKEDLIST_INVALID_LINK;
      }

      pt_prev = pt_curr->pt_prev;
   1492e:	fb 01       	movw	r30, r22
   14930:	22 85       	ldd	r18, Z+10	; 0x0a
   14932:	33 85       	ldd	r19, Z+11	; 0x0b
   14934:	20 93 b2 25 	sts	0x25B2, r18
   14938:	30 93 b3 25 	sts	0x25B3, r19
      pt_next = pt_curr->pt_next;
   1493c:	40 85       	ldd	r20, Z+8	; 0x08
   1493e:	51 85       	ldd	r21, Z+9	; 0x09
   14940:	40 93 b0 25 	sts	0x25B0, r20
   14944:	50 93 b1 25 	sts	0x25B1, r21

      /*---------------------------------------------------------------------*
       * Are there other 'links' still on the list?
       *---------------------------------------------------------------------*/
      if( pt_curr != pt_next)
   14948:	64 17       	cp	r22, r20
   1494a:	75 07       	cpc	r23, r21
   1494c:	f1 f0       	breq	.+60     	; 0x1498a <utl_destroyLink+0xa8>
      {
         /*------------------------------------------------------------------*
          * Remove the node from this list.
          *------------------------------------------------------------------*/
         pt_prev->pt_next = pt_next;
   1494e:	f9 01       	movw	r30, r18
   14950:	40 87       	std	Z+8, r20	; 0x08
   14952:	51 87       	std	Z+9, r21	; 0x09
         pt_next->pt_prev = pt_prev;
   14954:	fa 01       	movw	r30, r20
   14956:	22 87       	std	Z+10, r18	; 0x0a
   14958:	33 87       	std	Z+11, r19	; 0x0b

         /*------------------------------------------------------------------*
          * Were we at the start or end of the list?
          *------------------------------------------------------------------*/
         if( pt_curr == pt_cont->pt_head)
   1495a:	18 96       	adiw	r26, 0x08	; 8
   1495c:	8d 91       	ld	r24, X+
   1495e:	9c 91       	ld	r25, X
   14960:	19 97       	sbiw	r26, 0x09	; 9
   14962:	68 17       	cp	r22, r24
   14964:	79 07       	cpc	r23, r25
   14966:	29 f4       	brne	.+10     	; 0x14972 <utl_destroyLink+0x90>
            pt_cont->pt_head = pt_next;
   14968:	18 96       	adiw	r26, 0x08	; 8
   1496a:	4d 93       	st	X+, r20
   1496c:	5c 93       	st	X, r21
   1496e:	19 97       	sbiw	r26, 0x09	; 9
   14970:	14 c0       	rjmp	.+40     	; 0x1499a <utl_destroyLink+0xb8>
         else if( pt_curr == pt_cont->pt_tail)
   14972:	1a 96       	adiw	r26, 0x0a	; 10
   14974:	8d 91       	ld	r24, X+
   14976:	9c 91       	ld	r25, X
   14978:	1b 97       	sbiw	r26, 0x0b	; 11
   1497a:	68 17       	cp	r22, r24
   1497c:	79 07       	cpc	r23, r25
   1497e:	69 f4       	brne	.+26     	; 0x1499a <utl_destroyLink+0xb8>
            pt_cont->pt_tail = pt_prev;
   14980:	1a 96       	adiw	r26, 0x0a	; 10
   14982:	2d 93       	st	X+, r18
   14984:	3c 93       	st	X, r19
   14986:	1b 97       	sbiw	r26, 0x0b	; 11
   14988:	08 c0       	rjmp	.+16     	; 0x1499a <utl_destroyLink+0xb8>

      }
      else /*Last node*/
      {
         pt_cont->pt_head = NULL;
   1498a:	18 96       	adiw	r26, 0x08	; 8
   1498c:	1d 92       	st	X+, r1
   1498e:	1c 92       	st	X, r1
   14990:	19 97       	sbiw	r26, 0x09	; 9
         pt_cont->pt_tail = NULL;
   14992:	1a 96       	adiw	r26, 0x0a	; 10
   14994:	1d 92       	st	X+, r1
   14996:	1c 92       	st	X, r1
   14998:	1b 97       	sbiw	r26, 0x0b	; 11
      }

      /*---------------------------------------------------------------------*
       * Keep track of our memory usage.
       *---------------------------------------------------------------------*/
      pt_cont->s_numLinks--;
   1499a:	12 96       	adiw	r26, 0x02	; 2
   1499c:	8d 91       	ld	r24, X+
   1499e:	9c 91       	ld	r25, X
   149a0:	13 97       	sbiw	r26, 0x03	; 3
   149a2:	01 97       	sbiw	r24, 0x01	; 1
   149a4:	12 96       	adiw	r26, 0x02	; 2
   149a6:	8d 93       	st	X+, r24
   149a8:	9c 93       	st	X, r25
   149aa:	13 97       	sbiw	r26, 0x03	; 3
      pt_cont->s_contSizeBytes -= pt_curr->s_linkSizeBytes;
   149ac:	fb 01       	movw	r30, r22
   149ae:	26 81       	ldd	r18, Z+6	; 0x06
   149b0:	37 81       	ldd	r19, Z+7	; 0x07
   149b2:	14 96       	adiw	r26, 0x04	; 4
   149b4:	8d 91       	ld	r24, X+
   149b6:	9c 91       	ld	r25, X
   149b8:	15 97       	sbiw	r26, 0x05	; 5
   149ba:	82 1b       	sub	r24, r18
   149bc:	93 0b       	sbc	r25, r19
   149be:	14 96       	adiw	r26, 0x04	; 4
   149c0:	8d 93       	st	X+, r24
   149c2:	9c 93       	st	X, r25
   149c4:	15 97       	sbiw	r26, 0x05	; 5

      /*---------------------------------------------------------------------*
       * Keep track of the total amount of memory being consumed...
       *---------------------------------------------------------------------*/
      gi_dynListMemUsage -= pt_curr->s_linkSizeBytes;
   149c6:	40 e0       	ldi	r20, 0x00	; 0
   149c8:	50 e0       	ldi	r21, 0x00	; 0
   149ca:	80 91 ac 25 	lds	r24, 0x25AC
   149ce:	90 91 ad 25 	lds	r25, 0x25AD
   149d2:	a0 91 ae 25 	lds	r26, 0x25AE
   149d6:	b0 91 af 25 	lds	r27, 0x25AF
   149da:	82 1b       	sub	r24, r18
   149dc:	93 0b       	sbc	r25, r19
   149de:	a4 0b       	sbc	r26, r20
   149e0:	b5 0b       	sbc	r27, r21
   149e2:	80 93 ac 25 	sts	0x25AC, r24
   149e6:	90 93 ad 25 	sts	0x25AD, r25
   149ea:	a0 93 ae 25 	sts	0x25AE, r26
   149ee:	b0 93 af 25 	sts	0x25AF, r27
   /*------------------------------------------------------------------------*
    * Is this a valid container?
    *------------------------------------------------------------------------*/
   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM) /*Yes*/
   {
      pt_curr = (t_listLink *)t_linkHndl;
   149f2:	6a 83       	std	Y+2, r22	; 0x02
   149f4:	7b 83       	std	Y+3, r23	; 0x03
      gi_dynListMemUsage -= pt_curr->s_linkSizeBytes;

      /*---------------------------------------------------------------------*
       * Delete the 'element' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_curr->pv_element);
   149f6:	cb 01       	movw	r24, r22
   149f8:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
      //free( pt_curr->pv_element);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_curr->pv_element, 0, pt_curr->s_elementSizeBytes);
   149fc:	ea 81       	ldd	r30, Y+2	; 0x02
   149fe:	fb 81       	ldd	r31, Y+3	; 0x03
   14a00:	42 81       	ldd	r20, Z+2	; 0x02
   14a02:	53 81       	ldd	r21, Z+3	; 0x03
   14a04:	80 81       	ld	r24, Z
   14a06:	91 81       	ldd	r25, Z+1	; 0x01
   14a08:	60 e0       	ldi	r22, 0x00	; 0
   14a0a:	70 e0       	ldi	r23, 0x00	; 0
   14a0c:	0e 94 f9 b7 	call	0x16ff2	; 0x16ff2 <memset>

      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_curr);
   14a10:	ce 01       	movw	r24, r28
   14a12:	02 96       	adiw	r24, 0x02	; 2
   14a14:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
      //free( (void *)pt_curr);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_curr, 0, sizeof( t_listLink));
   14a18:	ea 81       	ldd	r30, Y+2	; 0x02
   14a1a:	fb 81       	ldd	r31, Y+3	; 0x03
   14a1c:	8c e0       	ldi	r24, 0x0C	; 12
   14a1e:	df 01       	movw	r26, r30
   14a20:	1d 92       	st	X+, r1
   14a22:	8a 95       	dec	r24
   14a24:	e9 f7       	brne	.-6      	; 0x14a20 <utl_destroyLink+0x13e>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   14a26:	89 81       	ldd	r24, Y+1	; 0x01
   14a28:	8f bf       	out	0x3f, r24	; 63
   14a2a:	80 e0       	ldi	r24, 0x00	; 0
   14a2c:	03 c0       	rjmp	.+6      	; 0x14a34 <utl_destroyLink+0x152>
      memset( pt_curr, 0, sizeof( t_listLink));

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   14a2e:	89 81       	ldd	r24, Y+1	; 0x01
   14a30:	8f bf       	out	0x3f, r24	; 63
   14a32:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_destroyLink*/
   14a34:	27 96       	adiw	r28, 0x07	; 7
   14a36:	cd bf       	out	0x3d, r28	; 61
   14a38:	de bf       	out	0x3e, r29	; 62
   14a3a:	cf 91       	pop	r28
   14a3c:	df 91       	pop	r29
   14a3e:	08 95       	ret

00014a40 <utl_destroyContainer>:
   return (t_CONTHNDL)pt_cont;

}/*End utl_createContainer*/

t_linkedListError utl_destroyContainer( t_CONTHNDL t_contHndl)
{
   14a40:	df 93       	push	r29
   14a42:	cf 93       	push	r28
   14a44:	cd b7       	in	r28, 0x3d	; 61
   14a46:	de b7       	in	r29, 0x3e	; 62
   14a48:	25 97       	sbiw	r28, 0x05	; 5
   14a4a:	cd bf       	out	0x3d, r28	; 61
   14a4c:	de bf       	out	0x3e, r29	; 62
   14a4e:	8c 83       	std	Y+4, r24	; 0x04
   14a50:	9d 83       	std	Y+5, r25	; 0x05

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14a52:	8f b7       	in	r24, 0x3f	; 63
   14a54:	89 83       	std	Y+1, r24	; 0x01
   14a56:	f8 94       	cli

   pt_cont = (t_listContainer *)t_contHndl;
   14a58:	ec 81       	ldd	r30, Y+4	; 0x04
   14a5a:	fd 81       	ldd	r31, Y+5	; 0x05

   if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)
   14a5c:	80 81       	ld	r24, Z
   14a5e:	91 81       	ldd	r25, Z+1	; 0x01
   14a60:	8e 5d       	subi	r24, 0xDE	; 222
   14a62:	9a 4f       	sbci	r25, 0xFA	; 250
   14a64:	49 f5       	brne	.+82     	; 0x14ab8 <utl_destroyContainer+0x78>
   {
      /*---------------------------------------------------------------------*
       * Keep track of the total amount of memory being consumed...
       *---------------------------------------------------------------------*/
      gi_dynListMemUsage -= pt_cont->s_contSizeBytes;
   14a66:	24 81       	ldd	r18, Z+4	; 0x04
   14a68:	35 81       	ldd	r19, Z+5	; 0x05
   14a6a:	40 e0       	ldi	r20, 0x00	; 0
   14a6c:	50 e0       	ldi	r21, 0x00	; 0
   14a6e:	80 91 ac 25 	lds	r24, 0x25AC
   14a72:	90 91 ad 25 	lds	r25, 0x25AD
   14a76:	a0 91 ae 25 	lds	r26, 0x25AE
   14a7a:	b0 91 af 25 	lds	r27, 0x25AF
   14a7e:	82 1b       	sub	r24, r18
   14a80:	93 0b       	sbc	r25, r19
   14a82:	a4 0b       	sbc	r26, r20
   14a84:	b5 0b       	sbc	r27, r21
   14a86:	80 93 ac 25 	sts	0x25AC, r24
   14a8a:	90 93 ad 25 	sts	0x25AD, r25
   14a8e:	a0 93 ae 25 	sts	0x25AE, r26
   14a92:	b0 93 af 25 	sts	0x25AF, r27
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts

   pt_cont = (t_listContainer *)t_contHndl;
   14a96:	ea 83       	std	Y+2, r30	; 0x02
   14a98:	fb 83       	std	Y+3, r31	; 0x03
      gi_dynListMemUsage -= pt_cont->s_contSizeBytes;

      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_cont);
   14a9a:	ce 01       	movw	r24, r28
   14a9c:	02 96       	adiw	r24, 0x02	; 2
   14a9e:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
      //free( (void *)pt_cont);

      /*---------------------------------------------------------------------*
       * Clear the old memory region.
       *---------------------------------------------------------------------*/
      memset( pt_cont, 0, sizeof( t_listContainer));
   14aa2:	ea 81       	ldd	r30, Y+2	; 0x02
   14aa4:	fb 81       	ldd	r31, Y+3	; 0x03
   14aa6:	8c e0       	ldi	r24, 0x0C	; 12
   14aa8:	df 01       	movw	r26, r30
   14aaa:	1d 92       	st	X+, r1
   14aac:	8a 95       	dec	r24
   14aae:	e9 f7       	brne	.-6      	; 0x14aaa <utl_destroyContainer+0x6a>
   {
      HAL_END_CRITICAL();//Enable interrupts
      return LINKEDLIST_INVALID_CONT;
   }

   HAL_END_CRITICAL();//Enable interrupts
   14ab0:	89 81       	ldd	r24, Y+1	; 0x01
   14ab2:	8f bf       	out	0x3f, r24	; 63
   14ab4:	80 e0       	ldi	r24, 0x00	; 0
   14ab6:	03 c0       	rjmp	.+6      	; 0x14abe <utl_destroyContainer+0x7e>
      memset( pt_cont, 0, sizeof( t_listContainer));

   }/*End if( pt_cont->s_checkSum == LINKEDLIST_CHECKSUM)*/
   else
   {
      HAL_END_CRITICAL();//Enable interrupts
   14ab8:	89 81       	ldd	r24, Y+1	; 0x01
   14aba:	8f bf       	out	0x3f, r24	; 63
   14abc:	8d ef       	ldi	r24, 0xFD	; 253

   HAL_END_CRITICAL();//Enable interrupts

   return LINKEDLIST_PASSED;

}/*End utl_destroyContainer*/
   14abe:	25 96       	adiw	r28, 0x05	; 5
   14ac0:	cd bf       	out	0x3d, r28	; 61
   14ac2:	de bf       	out	0x3e, r29	; 62
   14ac4:	cf 91       	pop	r28
   14ac6:	df 91       	pop	r29
   14ac8:	08 95       	ret

00014aca <utl_createLink>:

t_LINKHNDL utl_createLink( uint16_t s_elementSizeBytes)
{
   14aca:	ef 92       	push	r14
   14acc:	ff 92       	push	r15
   14ace:	0f 93       	push	r16
   14ad0:	1f 93       	push	r17
   14ad2:	df 93       	push	r29
   14ad4:	cf 93       	push	r28
   14ad6:	cd b7       	in	r28, 0x3d	; 61
   14ad8:	de b7       	in	r29, 0x3e	; 62
   14ada:	25 97       	sbiw	r28, 0x05	; 5
   14adc:	cd bf       	out	0x3d, r28	; 61
   14ade:	de bf       	out	0x3e, r29	; 62
   14ae0:	8c 01       	movw	r16, r24

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14ae2:	8f b7       	in	r24, 0x3f	; 63
   14ae4:	89 83       	std	Y+1, r24	; 0x01
   14ae6:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Allocated memory for the new linked-list 'link'
    *------------------------------------------------------------------------*/
   arb_malloc( sizeof(t_listLink),
   14ae8:	82 e0       	ldi	r24, 0x02	; 2
   14aea:	e8 2e       	mov	r14, r24
   14aec:	f1 2c       	mov	r15, r1
   14aee:	ec 0e       	add	r14, r28
   14af0:	fd 1e       	adc	r15, r29
   14af2:	8c e0       	ldi	r24, 0x0C	; 12
   14af4:	90 e0       	ldi	r25, 0x00	; 0
   14af6:	b7 01       	movw	r22, r14
   14af8:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <arb_malloc>
               (void **)&pt_link);

   //pt_link = (t_listLink *)malloc( sizeof(t_listLink));

   if( pt_link == NULL)
   14afc:	8a 81       	ldd	r24, Y+2	; 0x02
   14afe:	9b 81       	ldd	r25, Y+3	; 0x03
   14b00:	89 2b       	or	r24, r25
   14b02:	69 f0       	breq	.+26     	; 0x14b1e <utl_createLink+0x54>
   }/*End if( pt_link == NULL)*/

   /*------------------------------------------------------------------------*
    * Allocated memory for the new linked-list 'element'
    *------------------------------------------------------------------------*/
   arb_malloc( (size_t)s_elementSizeBytes,
   14b04:	c8 01       	movw	r24, r16
   14b06:	be 01       	movw	r22, r28
   14b08:	6c 5f       	subi	r22, 0xFC	; 252
   14b0a:	7f 4f       	sbci	r23, 0xFF	; 255
   14b0c:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <arb_malloc>
               (void **)&pv_element);

   //pv_element = (void *)malloc( s_elementSizeBytes);

   if( pv_element == NULL)
   14b10:	8c 81       	ldd	r24, Y+4	; 0x04
   14b12:	9d 81       	ldd	r25, Y+5	; 0x05
   14b14:	00 97       	sbiw	r24, 0x00	; 0
   14b16:	41 f4       	brne	.+16     	; 0x14b28 <utl_createLink+0x5e>
   {
      /*---------------------------------------------------------------------*
       * Delete this 'link' from memory.
       *---------------------------------------------------------------------*/
      arb_free( (void **)&pt_link);
   14b18:	c7 01       	movw	r24, r14
   14b1a:	0e 94 83 8b 	call	0x11706	; 0x11706 <arb_free>
      //free( (void *)pt_link);
      HAL_END_CRITICAL();//Enable interrupts
   14b1e:	89 81       	ldd	r24, Y+1	; 0x01
   14b20:	8f bf       	out	0x3f, r24	; 63
   14b22:	ef ef       	ldi	r30, 0xFF	; 255
   14b24:	ff ef       	ldi	r31, 0xFF	; 255
   14b26:	30 c0       	rjmp	.+96     	; 0x14b88 <utl_createLink+0xbe>
   }/*End if( pv_element == NULL)*/

   /*------------------------------------------------------------------------*
    * Initialize the element memory with 0xFF's
    *------------------------------------------------------------------------*/
   memset( pv_element, 0xFF, s_elementSizeBytes);
   14b28:	6f ef       	ldi	r22, 0xFF	; 255
   14b2a:	70 e0       	ldi	r23, 0x00	; 0
   14b2c:	a8 01       	movw	r20, r16
   14b2e:	0e 94 f9 b7 	call	0x16ff2	; 0x16ff2 <memset>

   pt_link->pv_element         = pv_element;
   14b32:	ea 81       	ldd	r30, Y+2	; 0x02
   14b34:	fb 81       	ldd	r31, Y+3	; 0x03
   14b36:	8c 81       	ldd	r24, Y+4	; 0x04
   14b38:	9d 81       	ldd	r25, Y+5	; 0x05
   14b3a:	80 83       	st	Z, r24
   14b3c:	91 83       	std	Z+1, r25	; 0x01
   pt_link->s_contAddr         = LINKEDLIST_LINK_UNMAPPED;
   14b3e:	14 82       	std	Z+4, r1	; 0x04
   14b40:	15 82       	std	Z+5, r1	; 0x05
   pt_link->s_elementSizeBytes = s_elementSizeBytes;
   14b42:	02 83       	std	Z+2, r16	; 0x02
   14b44:	13 83       	std	Z+3, r17	; 0x03
   pt_link->s_linkSizeBytes    = (uint16_t)sizeof( t_listLink) +
   14b46:	98 01       	movw	r18, r16
   14b48:	24 5f       	subi	r18, 0xF4	; 244
   14b4a:	3f 4f       	sbci	r19, 0xFF	; 255
   14b4c:	26 83       	std	Z+6, r18	; 0x06
   14b4e:	37 83       	std	Z+7, r19	; 0x07
   s_elementSizeBytes;
   pt_link->pt_next            = NULL;
   14b50:	10 86       	std	Z+8, r1	; 0x08
   14b52:	11 86       	std	Z+9, r1	; 0x09
   pt_link->pt_prev            = NULL;
   14b54:	12 86       	std	Z+10, r1	; 0x0a
   14b56:	13 86       	std	Z+11, r1	; 0x0b

   /*------------------------------------------------------------------------*
    * Keep track of the total memory usage...
    *------------------------------------------------------------------------*/
   gi_dynListMemUsage += pt_link->s_linkSizeBytes;
   14b58:	40 e0       	ldi	r20, 0x00	; 0
   14b5a:	50 e0       	ldi	r21, 0x00	; 0
   14b5c:	80 91 ac 25 	lds	r24, 0x25AC
   14b60:	90 91 ad 25 	lds	r25, 0x25AD
   14b64:	a0 91 ae 25 	lds	r26, 0x25AE
   14b68:	b0 91 af 25 	lds	r27, 0x25AF
   14b6c:	82 0f       	add	r24, r18
   14b6e:	93 1f       	adc	r25, r19
   14b70:	a4 1f       	adc	r26, r20
   14b72:	b5 1f       	adc	r27, r21
   14b74:	80 93 ac 25 	sts	0x25AC, r24
   14b78:	90 93 ad 25 	sts	0x25AD, r25
   14b7c:	a0 93 ae 25 	sts	0x25AE, r26
   14b80:	b0 93 af 25 	sts	0x25AF, r27

   HAL_END_CRITICAL();//Enable interrupts
   14b84:	89 81       	ldd	r24, Y+1	; 0x01
   14b86:	8f bf       	out	0x3f, r24	; 63

   return (t_LINKHNDL)pt_link;

}/*End utl_createLink*/
   14b88:	cf 01       	movw	r24, r30
   14b8a:	25 96       	adiw	r28, 0x05	; 5
   14b8c:	cd bf       	out	0x3d, r28	; 61
   14b8e:	de bf       	out	0x3e, r29	; 62
   14b90:	cf 91       	pop	r28
   14b92:	df 91       	pop	r29
   14b94:	1f 91       	pop	r17
   14b96:	0f 91       	pop	r16
   14b98:	ff 90       	pop	r15
   14b9a:	ef 90       	pop	r14
   14b9c:	08 95       	ret

00014b9e <utl_createContainer>:
{
   return gi_dynListMemUsage;
}/*End utl_getDynListMemUsage*/

t_CONTHNDL utl_createContainer( void)
{
   14b9e:	df 93       	push	r29
   14ba0:	cf 93       	push	r28
   14ba2:	00 d0       	rcall	.+0      	; 0x14ba4 <utl_createContainer+0x6>
   14ba4:	cd b7       	in	r28, 0x3d	; 61
   14ba6:	de b7       	in	r29, 0x3e	; 62

   /*------------------------------------------------------------------------*
    * We are going to be adding an element to a shared list so enforce
    * mutual exclusion.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL(); //Disable interrupts
   14ba8:	8f b7       	in	r24, 0x3f	; 63
   14baa:	89 83       	std	Y+1, r24	; 0x01
   14bac:	f8 94       	cli

   /*------------------------------------------------------------------------*
    * Allocated memory the new linked-list 'container'
    *------------------------------------------------------------------------*/
   arb_malloc( sizeof( t_listContainer),
   14bae:	8c e0       	ldi	r24, 0x0C	; 12
   14bb0:	90 e0       	ldi	r25, 0x00	; 0
   14bb2:	be 01       	movw	r22, r28
   14bb4:	6e 5f       	subi	r22, 0xFE	; 254
   14bb6:	7f 4f       	sbci	r23, 0xFF	; 255
   14bb8:	0e 94 a7 8b 	call	0x1174e	; 0x1174e <arb_malloc>
               (void **)&pt_cont);

   //pt_cont = (t_listContainer *)malloc( sizeof( t_listContainer));

   if( pt_cont == NULL)
   14bbc:	ea 81       	ldd	r30, Y+2	; 0x02
   14bbe:	fb 81       	ldd	r31, Y+3	; 0x03
   14bc0:	30 97       	sbiw	r30, 0x00	; 0
   14bc2:	29 f4       	brne	.+10     	; 0x14bce <utl_createContainer+0x30>
   {
      HAL_END_CRITICAL();//Enable interrupts
   14bc4:	89 81       	ldd	r24, Y+1	; 0x01
   14bc6:	8f bf       	out	0x3f, r24	; 63
   14bc8:	2f ef       	ldi	r18, 0xFF	; 255
   14bca:	3f ef       	ldi	r19, 0xFF	; 255
   14bcc:	24 c0       	rjmp	.+72     	; 0x14c16 <utl_createContainer+0x78>
      return (t_CONTHNDL)LINKEDLIST_OUT_OF_HEAP;
   }/*End if( pt_cont == NULL)*/

   pt_cont->s_checkSum      = LINKEDLIST_CHECKSUM;
   14bce:	8e ed       	ldi	r24, 0xDE	; 222
   14bd0:	9a ef       	ldi	r25, 0xFA	; 250
   14bd2:	80 83       	st	Z, r24
   14bd4:	91 83       	std	Z+1, r25	; 0x01
   pt_cont->s_numLinks      = 0;
   14bd6:	12 82       	std	Z+2, r1	; 0x02
   14bd8:	13 82       	std	Z+3, r1	; 0x03
   pt_cont->s_contSizeBytes = (uint16_t)sizeof( t_listContainer);
   14bda:	8c e0       	ldi	r24, 0x0C	; 12
   14bdc:	90 e0       	ldi	r25, 0x00	; 0
   14bde:	84 83       	std	Z+4, r24	; 0x04
   14be0:	95 83       	std	Z+5, r25	; 0x05
   pt_cont->pt_head         = NULL;
   14be2:	10 86       	std	Z+8, r1	; 0x08
   14be4:	11 86       	std	Z+9, r1	; 0x09
   pt_cont->pt_tail         = NULL;
   14be6:	12 86       	std	Z+10, r1	; 0x0a
   14be8:	13 86       	std	Z+11, r1	; 0x0b

   /*------------------------------------------------------------------------*
    * Keep track of the total memory usage...
    *------------------------------------------------------------------------*/
   gi_dynListMemUsage += pt_cont->s_contSizeBytes;
   14bea:	80 91 ac 25 	lds	r24, 0x25AC
   14bee:	90 91 ad 25 	lds	r25, 0x25AD
   14bf2:	a0 91 ae 25 	lds	r26, 0x25AE
   14bf6:	b0 91 af 25 	lds	r27, 0x25AF
   14bfa:	0c 96       	adiw	r24, 0x0c	; 12
   14bfc:	a1 1d       	adc	r26, r1
   14bfe:	b1 1d       	adc	r27, r1
   14c00:	80 93 ac 25 	sts	0x25AC, r24
   14c04:	90 93 ad 25 	sts	0x25AD, r25
   14c08:	a0 93 ae 25 	sts	0x25AE, r26
   14c0c:	b0 93 af 25 	sts	0x25AF, r27

   HAL_END_CRITICAL();//Enable interrupts
   14c10:	89 81       	ldd	r24, Y+1	; 0x01
   14c12:	8f bf       	out	0x3f, r24	; 63

   return (t_CONTHNDL)pt_cont;
   14c14:	9f 01       	movw	r18, r30

}/*End utl_createContainer*/
   14c16:	c9 01       	movw	r24, r18
   14c18:	23 96       	adiw	r28, 0x03	; 3
   14c1a:	cd bf       	out	0x3d, r28	; 61
   14c1c:	de bf       	out	0x3e, r29	; 62
   14c1e:	cf 91       	pop	r28
   14c20:	df 91       	pop	r29
   14c22:	08 95       	ret

00014c24 <usr_driverRegistration>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_driverRegistration( void)
{
   14c24:	df 93       	push	r29
   14c26:	cf 93       	push	r28
   14c28:	cd b7       	in	r28, 0x3d	; 61
   14c2a:	de b7       	in	r29, 0x3e	; 62
   14c2c:	2f 97       	sbiw	r28, 0x0f	; 15
   14c2e:	cd bf       	out	0x3d, r28	; 61
   14c30:	de bf       	out	0x3e, r29	; 62
   /*------------------------------------------------------------------------*
    * Register the LED signaling driver with the kernel. The driver uses
    * GPIOS on PIN_1, PIN_2, PIN_3, and PIN_5 (of PORT K) all configured as
    * outputs.
    *------------------------------------------------------------------------*/
   t_sigSetup.c_signalPort  = GPIO_PORTK;
   14c32:	88 e0       	ldi	r24, 0x08	; 8
   14c34:	89 83       	std	Y+1, r24	; 0x01
   t_sigSetup.c_majorNum    = 3;
   14c36:	83 e0       	ldi	r24, 0x03	; 3
   14c38:	8d 83       	std	Y+5, r24	; 0x05
   t_sigSetup.ac_ledPins[0] = PIN_0; /*Red LED pin*/
   14c3a:	81 e0       	ldi	r24, 0x01	; 1
   14c3c:	8a 83       	std	Y+2, r24	; 0x02
   t_sigSetup.ac_ledPins[1] = PIN_1; /*Yellow LED pin*/
   14c3e:	82 e0       	ldi	r24, 0x02	; 2
   14c40:	8b 83       	std	Y+3, r24	; 0x03
   t_sigSetup.ac_ledPins[2] = PIN_2; /*Green LED pin*/
   14c42:	84 e0       	ldi	r24, 0x04	; 4
   14c44:	8c 83       	std	Y+4, r24	; 0x04
   if( drv_signalInit( t_sigSetup) < 0)
   14c46:	49 81       	ldd	r20, Y+1	; 0x01
   14c48:	5a 81       	ldd	r21, Y+2	; 0x02
   14c4a:	6b 81       	ldd	r22, Y+3	; 0x03
   14c4c:	7c 81       	ldd	r23, Y+4	; 0x04
   14c4e:	8d 81       	ldd	r24, Y+5	; 0x05
   14c50:	0e 94 46 1c 	call	0x388c	; 0x388c <drv_signalInit>
   14c54:	88 23       	and	r24, r24
   14c56:	24 f4       	brge	.+8      	; 0x14c60 <usr_driverRegistration+0x3c>
      exit(0);
   14c58:	80 e0       	ldi	r24, 0x00	; 0
   14c5a:	90 e0       	ldi	r25, 0x00	; 0
   14c5c:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   /*------------------------------------------------------------------------*
    * Register the console driver with the kernel. The driver uses UART C0
    * which uses GPIO's on PIN_2 and PIN_3 (of PORT C) configured as an input
    * and output, respectively.
    *------------------------------------------------------------------------*/
   t_conSetup.c_uartId   = UART_1;
   14c60:	1a 86       	std	Y+10, r1	; 0x0a
   t_conSetup.i_baudRate = 115200;
   14c62:	80 e0       	ldi	r24, 0x00	; 0
   14c64:	92 ec       	ldi	r25, 0xC2	; 194
   14c66:	a1 e0       	ldi	r26, 0x01	; 1
   14c68:	b0 e0       	ldi	r27, 0x00	; 0
   14c6a:	8e 83       	std	Y+6, r24	; 0x06
   14c6c:	9f 83       	std	Y+7, r25	; 0x07
   14c6e:	a8 87       	std	Y+8, r26	; 0x08
   14c70:	b9 87       	std	Y+9, r27	; 0x09
   t_conSetup.c_majorNum = 4;
   14c72:	84 e0       	ldi	r24, 0x04	; 4
   14c74:	8b 87       	std	Y+11, r24	; 0x0b

   if( drv_consoleInit( t_conSetup) < 0)
   14c76:	4e 81       	ldd	r20, Y+6	; 0x06
   14c78:	5f 81       	ldd	r21, Y+7	; 0x07
   14c7a:	68 85       	ldd	r22, Y+8	; 0x08
   14c7c:	79 85       	ldd	r23, Y+9	; 0x09
   14c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14c80:	9b 85       	ldd	r25, Y+11	; 0x0b
   14c82:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <drv_consoleInit>
   14c86:	88 23       	and	r24, r24
   14c88:	24 f4       	brge	.+8      	; 0x14c92 <usr_driverRegistration+0x6e>
      exit(0);
   14c8a:	80 e0       	ldi	r24, 0x00	; 0
   14c8c:	90 e0       	ldi	r25, 0x00	; 0
   14c8e:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>

   /*------------------------------------------------------------------------*
    * Register the sd card driver with the kernel.
    *------------------------------------------------------------------------*/
   t_sdCardSetup.t_csPort   = GPIO_PORTC;
   14c92:	82 e0       	ldi	r24, 0x02	; 2
   14c94:	8d 87       	std	Y+13, r24	; 0x0d
   t_sdCardSetup.t_csPin    = PIN_4;
   14c96:	80 e1       	ldi	r24, 0x10	; 16
   14c98:	8e 87       	std	Y+14, r24	; 0x0e
   t_sdCardSetup.t_spiChan  = SPI_1;
   14c9a:	1c 86       	std	Y+12, r1	; 0x0c
   t_sdCardSetup.c_majorNum = 5;
   14c9c:	85 e0       	ldi	r24, 0x05	; 5
   14c9e:	8f 87       	std	Y+15, r24	; 0x0f

   if( drv_sdInit( t_sdCardSetup) < 0)
   14ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
   14ca2:	9d 85       	ldd	r25, Y+13	; 0x0d
   14ca4:	ae 85       	ldd	r26, Y+14	; 0x0e
   14ca6:	bf 85       	ldd	r27, Y+15	; 0x0f
   14ca8:	bc 01       	movw	r22, r24
   14caa:	cd 01       	movw	r24, r26
   14cac:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <drv_sdInit>
   14cb0:	88 23       	and	r24, r24
   14cb2:	24 f4       	brge	.+8      	; 0x14cbc <usr_driverRegistration+0x98>
      exit(0);
   14cb4:	80 e0       	ldi	r24, 0x00	; 0
   14cb6:	90 e0       	ldi	r25, 0x00	; 0
   14cb8:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>

}/*End usr_driverRegistration*/
   14cbc:	2f 96       	adiw	r28, 0x0f	; 15
   14cbe:	cd bf       	out	0x3d, r28	; 61
   14cc0:	de bf       	out	0x3e, r29	; 62
   14cc2:	cf 91       	pop	r28
   14cc4:	df 91       	pop	r29
   14cc6:	08 95       	ret

00014cc8 <usr_platformInit>:

static void usr_platformInit( void)
{
   14cc8:	0f 93       	push	r16
   14cca:	1f 93       	push	r17
   14ccc:	df 93       	push	r29
   14cce:	cf 93       	push	r28
   14cd0:	cd b7       	in	r28, 0x3d	; 61
   14cd2:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Register drivers with the kernel here...
    *------------------------------------------------------------------------*/
   usr_driverRegistration();
   14cd4:	0e 94 12 a6 	call	0x14c24	; 0x14c24 <usr_driverRegistration>

   /*------------------------------------------------------------------------*
    * Initialize the debug interface.
    *------------------------------------------------------------------------*/
   if( arb_printfInit( "consoleDevice0",
   14cd8:	89 e3       	ldi	r24, 0x39	; 57
   14cda:	92 e2       	ldi	r25, 0x22	; 34
   14cdc:	28 e4       	ldi	r18, 0x48	; 72
   14cde:	32 e2       	ldi	r19, 0x22	; 34
   14ce0:	60 e0       	ldi	r22, 0x00	; 0
   14ce2:	71 e0       	ldi	r23, 0x01	; 1
   14ce4:	a9 01       	movw	r20, r18
   14ce6:	0e 94 ec 8b 	call	0x117d8	; 0x117d8 <arb_printfInit>
   14cea:	88 23       	and	r24, r24
   14cec:	24 f4       	brge	.+8      	; 0x14cf6 <usr_platformInit+0x2e>
                       256,
                       "sdDevice0/logs/dmsg.txt") < 0)
   {
      exit(0);
   14cee:	80 e0       	ldi	r24, 0x00	; 0
   14cf0:	90 e0       	ldi	r25, 0x00	; 0
   14cf2:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   }

   /*------------------------------------------------------------------------*
    * Initialize the console interface.
    *------------------------------------------------------------------------*/
   if( arb_consoleInit( "consoleDevice0",
   14cf6:	89 e3       	ldi	r24, 0x39	; 57
   14cf8:	92 e2       	ldi	r25, 0x22	; 34
   14cfa:	20 e6       	ldi	r18, 0x60	; 96
   14cfc:	32 e2       	ldi	r19, 0x22	; 34
   14cfe:	ef e1       	ldi	r30, 0x1F	; 31
   14d00:	fa ea       	ldi	r31, 0xAA	; 170
   14d02:	b9 01       	movw	r22, r18
   14d04:	40 e0       	ldi	r20, 0x00	; 0
   14d06:	58 e0       	ldi	r21, 0x08	; 8
   14d08:	2e ef       	ldi	r18, 0xFE	; 254
   14d0a:	8f 01       	movw	r16, r30
   14d0c:	0e 94 9a 78 	call	0xf134	; 0xf134 <arb_consoleInit>
   14d10:	88 23       	and	r24, r24
   14d12:	24 f4       	brge	.+8      	; 0x14d1c <usr_platformInit+0x54>
                        "sdDevice0",
                        ARB_STACK_2048B,
                        254,
                        &usr_console) < 0)
   {
      exit(0);
   14d14:	80 e0       	ldi	r24, 0x00	; 0
   14d16:	90 e0       	ldi	r25, 0x00	; 0
   14d18:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   }

   /*------------------------------------------------------------------------*
    * Initialize the scheduler specifically for this application.
    *------------------------------------------------------------------------*/
   if( arb_schedulerInit( PRIORITY,
   14d1c:	81 e0       	ldi	r24, 0x01	; 1
   14d1e:	60 e0       	ldi	r22, 0x00	; 0
   14d20:	72 e0       	ldi	r23, 0x02	; 2
   14d22:	4e e1       	ldi	r20, 0x1E	; 30
   14d24:	0e 94 6a 93 	call	0x126d4	; 0x126d4 <arb_schedulerInit>
   14d28:	88 23       	and	r24, r24
   14d2a:	24 f4       	brge	.+8      	; 0x14d34 <usr_platformInit+0x6c>
                          ARB_STACK_512B,
                          TIMER_7) < 0)
   {
      exit(0);
   14d2c:	80 e0       	ldi	r24, 0x00	; 0
   14d2e:	90 e0       	ldi	r25, 0x00	; 0
   14d30:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>
   }

}/*End usr_platformInit*/
   14d34:	cf 91       	pop	r28
   14d36:	df 91       	pop	r29
   14d38:	1f 91       	pop	r17
   14d3a:	0f 91       	pop	r16
   14d3c:	08 95       	ret

00014d3e <usr_appInit>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void usr_appInit( void)
{
   14d3e:	df 93       	push	r29
   14d40:	cf 93       	push	r28
   14d42:	cd b7       	in	r28, 0x3d	; 61
   14d44:	de b7       	in	r29, 0x3e	; 62
   /*------------------------------------------------------------------------*
    * Enable global interrupts, configure the CPU frequency, and register
    * drivers with the kernel for this particular computing platform.
    *------------------------------------------------------------------------*/
   usr_platformInit();
   14d46:	0e 94 64 a6 	call	0x14cc8	; 0x14cc8 <usr_platformInit>

   usr_platformTestInit();
   14d4a:	0e 94 72 ad 	call	0x15ae4	; 0x15ae4 <usr_platformTestInit>

   /*------------------------------------------------------------------------*
    * Once we have exited this function the OS will begin running.
    *------------------------------------------------------------------------*/

}/*End usr_appInit*/
   14d4e:	cf 91       	pop	r28
   14d50:	df 91       	pop	r29
   14d52:	08 95       	ret

00014d54 <usr_loopbackTest>:
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_loopbackTest( t_DEVHANDLE t_consoleHndl,
                              int8_t *pc_buff,
                              t_testType t_type)
{
   14d54:	2f 92       	push	r2
   14d56:	3f 92       	push	r3
   14d58:	4f 92       	push	r4
   14d5a:	5f 92       	push	r5
   14d5c:	6f 92       	push	r6
   14d5e:	7f 92       	push	r7
   14d60:	8f 92       	push	r8
   14d62:	9f 92       	push	r9
   14d64:	af 92       	push	r10
   14d66:	bf 92       	push	r11
   14d68:	cf 92       	push	r12
   14d6a:	df 92       	push	r13
   14d6c:	ef 92       	push	r14
   14d6e:	ff 92       	push	r15
   14d70:	0f 93       	push	r16
   14d72:	1f 93       	push	r17
   14d74:	df 93       	push	r29
   14d76:	cf 93       	push	r28
   14d78:	cd b7       	in	r28, 0x3d	; 61
   14d7a:	de b7       	in	r29, 0x3e	; 62
   14d7c:	c6 54       	subi	r28, 0x46	; 70
   14d7e:	d0 40       	sbci	r29, 0x00	; 0
   14d80:	cd bf       	out	0x3d, r28	; 61
   14d82:	de bf       	out	0x3e, r29	; 62
   14d84:	25 e4       	ldi	r18, 0x45	; 69
   14d86:	e2 2e       	mov	r14, r18
   14d88:	f1 2c       	mov	r15, r1
   14d8a:	ec 0e       	add	r14, r28
   14d8c:	fd 1e       	adc	r15, r29
   14d8e:	d7 01       	movw	r26, r14
   14d90:	8d 93       	st	X+, r24
   14d92:	9c 93       	st	X, r25
   14d94:	11 97       	sbiw	r26, 0x01	; 1
   14d96:	d6 2e       	mov	r13, r22
   14d98:	c7 2e       	mov	r12, r23
   14d9a:	94 2e       	mov	r9, r20
   int16_t s_numRxBytes;
   int8_t ac_txMessage[32];
   int8_t ac_rxMessage[32];
   int8_t c_index;
   int32_t i_byteErrors = 0;
   t_MAILBOXHNDL t_platTestInMbx  = usr_getPlatTestInMailbox();
   14d9c:	0e 94 03 ad 	call	0x15a06	; 0x15a06 <usr_getPlatTestInMailbox>
   14da0:	89 83       	std	Y+1, r24	; 0x01
   14da2:	9a 83       	std	Y+2, r25	; 0x02
   t_MAILBOXHNDL t_platTestOutMbx = usr_getPlatTestOutMailbox();
   14da4:	0e 94 09 ad 	call	0x15a12	; 0x15a12 <usr_getPlatTestOutMailbox>
   14da8:	8b 83       	std	Y+3, r24	; 0x03
   14daa:	9c 83       	std	Y+4, r25	; 0x04

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   14dac:	00 d0       	rcall	.+0      	; 0x14dae <usr_loopbackTest+0x5a>
   14dae:	0f 92       	push	r0
   14db0:	ed b7       	in	r30, 0x3d	; 61
   14db2:	fe b7       	in	r31, 0x3e	; 62
   14db4:	31 96       	adiw	r30, 0x01	; 1
   14db6:	ad b7       	in	r26, 0x3d	; 61
   14db8:	be b7       	in	r27, 0x3e	; 62
   14dba:	11 96       	adiw	r26, 0x01	; 1
   14dbc:	dc 92       	st	X, r13
   14dbe:	c1 82       	std	Z+1, r12	; 0x01
   14dc0:	84 e3       	ldi	r24, 0x34	; 52
   14dc2:	94 e1       	ldi	r25, 0x14	; 20
   14dc4:	82 83       	std	Z+2, r24	; 0x02
   14dc6:	93 83       	std	Z+3, r25	; 0x03
   14dc8:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14dcc:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14dce:	f7 01       	movw	r30, r14
   14dd0:	80 81       	ld	r24, Z
   14dd2:	91 81       	ldd	r25, Z+1	; 0x01
   14dd4:	0f 90       	pop	r0
   14dd6:	0f 90       	pop	r0
   14dd8:	0f 90       	pop	r0
   14dda:	0f 90       	pop	r0
   14ddc:	6d 2d       	mov	r22, r13
   14dde:	7c 2d       	mov	r23, r12
   14de0:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|        Test        |          Description          |       Setup       |\n\r"));
   14de4:	00 d0       	rcall	.+0      	; 0x14de6 <usr_loopbackTest+0x92>
   14de6:	0f 92       	push	r0
   14de8:	ed b7       	in	r30, 0x3d	; 61
   14dea:	fe b7       	in	r31, 0x3e	; 62
   14dec:	31 96       	adiw	r30, 0x01	; 1
   14dee:	ad b7       	in	r26, 0x3d	; 61
   14df0:	be b7       	in	r27, 0x3e	; 62
   14df2:	11 96       	adiw	r26, 0x01	; 1
   14df4:	dc 92       	st	X, r13
   14df6:	c1 82       	std	Z+1, r12	; 0x01
   14df8:	87 ee       	ldi	r24, 0xE7	; 231
   14dfa:	93 e1       	ldi	r25, 0x13	; 19
   14dfc:	82 83       	std	Z+2, r24	; 0x02
   14dfe:	93 83       	std	Z+3, r25	; 0x03
   14e00:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14e04:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14e06:	f7 01       	movw	r30, r14
   14e08:	80 81       	ld	r24, Z
   14e0a:	91 81       	ldd	r25, Z+1	; 0x01
   14e0c:	0f 90       	pop	r0
   14e0e:	0f 90       	pop	r0
   14e10:	0f 90       	pop	r0
   14e12:	0f 90       	pop	r0
   14e14:	6d 2d       	mov	r22, r13
   14e16:	7c 2d       	mov	r23, r12
   14e18:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|--------------------|-------------------------------|-------------------|\n\r"));
   14e1c:	00 d0       	rcall	.+0      	; 0x14e1e <usr_loopbackTest+0xca>
   14e1e:	0f 92       	push	r0
   14e20:	ed b7       	in	r30, 0x3d	; 61
   14e22:	fe b7       	in	r31, 0x3e	; 62
   14e24:	31 96       	adiw	r30, 0x01	; 1
   14e26:	ad b7       	in	r26, 0x3d	; 61
   14e28:	be b7       	in	r27, 0x3e	; 62
   14e2a:	11 96       	adiw	r26, 0x01	; 1
   14e2c:	dc 92       	st	X, r13
   14e2e:	c1 82       	std	Z+1, r12	; 0x01
   14e30:	8a e9       	ldi	r24, 0x9A	; 154
   14e32:	93 e1       	ldi	r25, 0x13	; 19
   14e34:	82 83       	std	Z+2, r24	; 0x02
   14e36:	93 83       	std	Z+3, r25	; 0x03
   14e38:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14e3c:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   14e3e:	f7 01       	movw	r30, r14
   14e40:	80 81       	ld	r24, Z
   14e42:	91 81       	ldd	r25, Z+1	; 0x01
   14e44:	0f 90       	pop	r0
   14e46:	0f 90       	pop	r0
   14e48:	0f 90       	pop	r0
   14e4a:	0f 90       	pop	r0
   14e4c:	6d 2d       	mov	r22, r13
   14e4e:	7c 2d       	mov	r23, r12
   14e50:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);

   if( t_type == UART_LOOPBACK_TEST)
   14e54:	99 20       	and	r9, r9
   14e56:	09 f0       	breq	.+2      	; 0x14e5a <usr_loopbackTest+0x106>
   14e58:	7d c0       	rjmp	.+250    	; 0x14f54 <usr_loopbackTest+0x200>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| UART loopback test | Loops back a message between  | Connect pins PE6  |\n\r"));
   14e5a:	00 d0       	rcall	.+0      	; 0x14e5c <usr_loopbackTest+0x108>
   14e5c:	0f 92       	push	r0
   14e5e:	ed b7       	in	r30, 0x3d	; 61
   14e60:	fe b7       	in	r31, 0x3e	; 62
   14e62:	31 96       	adiw	r30, 0x01	; 1
   14e64:	ad b7       	in	r26, 0x3d	; 61
   14e66:	be b7       	in	r27, 0x3e	; 62
   14e68:	11 96       	adiw	r26, 0x01	; 1
   14e6a:	dc 92       	st	X, r13
   14e6c:	c1 82       	std	Z+1, r12	; 0x01
   14e6e:	8d e4       	ldi	r24, 0x4D	; 77
   14e70:	93 e1       	ldi	r25, 0x13	; 19
   14e72:	82 83       	std	Z+2, r24	; 0x02
   14e74:	93 83       	std	Z+3, r25	; 0x03
   14e76:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14e7a:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14e7c:	f7 01       	movw	r30, r14
   14e7e:	80 81       	ld	r24, Z
   14e80:	91 81       	ldd	r25, Z+1	; 0x01
   14e82:	0f 90       	pop	r0
   14e84:	0f 90       	pop	r0
   14e86:	0f 90       	pop	r0
   14e88:	0f 90       	pop	r0
   14e8a:	6d 2d       	mov	r22, r13
   14e8c:	7c 2d       	mov	r23, r12
   14e8e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PE7.          |\n\r"));
   14e92:	00 d0       	rcall	.+0      	; 0x14e94 <usr_loopbackTest+0x140>
   14e94:	0f 92       	push	r0
   14e96:	ed b7       	in	r30, 0x3d	; 61
   14e98:	fe b7       	in	r31, 0x3e	; 62
   14e9a:	31 96       	adiw	r30, 0x01	; 1
   14e9c:	ad b7       	in	r26, 0x3d	; 61
   14e9e:	be b7       	in	r27, 0x3e	; 62
   14ea0:	11 96       	adiw	r26, 0x01	; 1
   14ea2:	dc 92       	st	X, r13
   14ea4:	c1 82       	std	Z+1, r12	; 0x01
   14ea6:	80 e0       	ldi	r24, 0x00	; 0
   14ea8:	93 e1       	ldi	r25, 0x13	; 19
   14eaa:	82 83       	std	Z+2, r24	; 0x02
   14eac:	93 83       	std	Z+3, r25	; 0x03
   14eae:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14eb2:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14eb4:	f7 01       	movw	r30, r14
   14eb6:	80 81       	ld	r24, Z
   14eb8:	91 81       	ldd	r25, Z+1	; 0x01
   14eba:	0f 90       	pop	r0
   14ebc:	0f 90       	pop	r0
   14ebe:	0f 90       	pop	r0
   14ec0:	0f 90       	pop	r0
   14ec2:	6d 2d       	mov	r22, r13
   14ec4:	7c 2d       	mov	r23, r12
   14ec6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using UART6, two |                   |\n\r"));
   14eca:	00 d0       	rcall	.+0      	; 0x14ecc <usr_loopbackTest+0x178>
   14ecc:	0f 92       	push	r0
   14ece:	ed b7       	in	r30, 0x3d	; 61
   14ed0:	fe b7       	in	r31, 0x3e	; 62
   14ed2:	31 96       	adiw	r30, 0x01	; 1
   14ed4:	ad b7       	in	r26, 0x3d	; 61
   14ed6:	be b7       	in	r27, 0x3e	; 62
   14ed8:	11 96       	adiw	r26, 0x01	; 1
   14eda:	dc 92       	st	X, r13
   14edc:	c1 82       	std	Z+1, r12	; 0x01
   14ede:	83 eb       	ldi	r24, 0xB3	; 179
   14ee0:	92 e1       	ldi	r25, 0x12	; 18
   14ee2:	82 83       	std	Z+2, r24	; 0x02
   14ee4:	93 83       	std	Z+3, r25	; 0x03
   14ee6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14eea:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14eec:	f7 01       	movw	r30, r14
   14eee:	80 81       	ld	r24, Z
   14ef0:	91 81       	ldd	r25, Z+1	; 0x01
   14ef2:	0f 90       	pop	r0
   14ef4:	0f 90       	pop	r0
   14ef6:	0f 90       	pop	r0
   14ef8:	0f 90       	pop	r0
   14efa:	6d 2d       	mov	r22, r13
   14efc:	7c 2d       	mov	r23, r12
   14efe:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | DMA's, and two mailbox modules|                   |\n\r"));
   14f02:	00 d0       	rcall	.+0      	; 0x14f04 <usr_loopbackTest+0x1b0>
   14f04:	0f 92       	push	r0
   14f06:	ed b7       	in	r30, 0x3d	; 61
   14f08:	fe b7       	in	r31, 0x3e	; 62
   14f0a:	31 96       	adiw	r30, 0x01	; 1
   14f0c:	ad b7       	in	r26, 0x3d	; 61
   14f0e:	be b7       	in	r27, 0x3e	; 62
   14f10:	11 96       	adiw	r26, 0x01	; 1
   14f12:	dc 92       	st	X, r13
   14f14:	c1 82       	std	Z+1, r12	; 0x01
   14f16:	86 e6       	ldi	r24, 0x66	; 102
   14f18:	92 e1       	ldi	r25, 0x12	; 18
   14f1a:	82 83       	std	Z+2, r24	; 0x02
   14f1c:	93 83       	std	Z+3, r25	; 0x03
   14f1e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14f22:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14f24:	f7 01       	movw	r30, r14
   14f26:	80 81       	ld	r24, Z
   14f28:	91 81       	ldd	r25, Z+1	; 0x01
   14f2a:	0f 90       	pop	r0
   14f2c:	0f 90       	pop	r0
   14f2e:	0f 90       	pop	r0
   14f30:	0f 90       	pop	r0
   14f32:	6d 2d       	mov	r22, r13
   14f34:	7c 2d       	mov	r23, r12
   14f36:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   14f3a:	00 d0       	rcall	.+0      	; 0x14f3c <usr_loopbackTest+0x1e8>
   14f3c:	0f 92       	push	r0
   14f3e:	ed b7       	in	r30, 0x3d	; 61
   14f40:	fe b7       	in	r31, 0x3e	; 62
   14f42:	31 96       	adiw	r30, 0x01	; 1
   14f44:	ad b7       	in	r26, 0x3d	; 61
   14f46:	be b7       	in	r27, 0x3e	; 62
   14f48:	11 96       	adiw	r26, 0x01	; 1
   14f4a:	dc 92       	st	X, r13
   14f4c:	c1 82       	std	Z+1, r12	; 0x01
   14f4e:	89 e1       	ldi	r24, 0x19	; 25
   14f50:	92 e1       	ldi	r25, 0x12	; 18
   14f52:	01 c1       	rjmp	.+514    	; 0x15156 <usr_loopbackTest+0x402>
      arb_write( t_consoleHndl,
                 pc_buff,
                 s_size);
   }/*End if( t_type == UART_LOOPBACK_TEST)*/
   else if( t_type == TWI_LOOPBACK_TEST)
   14f54:	f1 e0       	ldi	r31, 0x01	; 1
   14f56:	9f 16       	cp	r9, r31
   14f58:	09 f0       	breq	.+2      	; 0x14f5c <usr_loopbackTest+0x208>
   14f5a:	7d c0       	rjmp	.+250    	; 0x15056 <usr_loopbackTest+0x302>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| TWI loopback test  | Loops back a message between  | Connect pins PD0  |\n\r"));
   14f5c:	00 d0       	rcall	.+0      	; 0x14f5e <usr_loopbackTest+0x20a>
   14f5e:	0f 92       	push	r0
   14f60:	ed b7       	in	r30, 0x3d	; 61
   14f62:	fe b7       	in	r31, 0x3e	; 62
   14f64:	31 96       	adiw	r30, 0x01	; 1
   14f66:	ad b7       	in	r26, 0x3d	; 61
   14f68:	be b7       	in	r27, 0x3e	; 62
   14f6a:	11 96       	adiw	r26, 0x01	; 1
   14f6c:	dc 92       	st	X, r13
   14f6e:	c1 82       	std	Z+1, r12	; 0x01
   14f70:	8c ec       	ldi	r24, 0xCC	; 204
   14f72:	91 e1       	ldi	r25, 0x11	; 17
   14f74:	82 83       	std	Z+2, r24	; 0x02
   14f76:	93 83       	std	Z+3, r25	; 0x03
   14f78:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14f7c:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14f7e:	f7 01       	movw	r30, r14
   14f80:	80 81       	ld	r24, Z
   14f82:	91 81       	ldd	r25, Z+1	; 0x01
   14f84:	0f 90       	pop	r0
   14f86:	0f 90       	pop	r0
   14f88:	0f 90       	pop	r0
   14f8a:	0f 90       	pop	r0
   14f8c:	6d 2d       	mov	r22, r13
   14f8e:	7c 2d       	mov	r23, r12
   14f90:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PE0 as well as|\n\r"));
   14f94:	00 d0       	rcall	.+0      	; 0x14f96 <usr_loopbackTest+0x242>
   14f96:	0f 92       	push	r0
   14f98:	ed b7       	in	r30, 0x3d	; 61
   14f9a:	fe b7       	in	r31, 0x3e	; 62
   14f9c:	31 96       	adiw	r30, 0x01	; 1
   14f9e:	ad b7       	in	r26, 0x3d	; 61
   14fa0:	be b7       	in	r27, 0x3e	; 62
   14fa2:	11 96       	adiw	r26, 0x01	; 1
   14fa4:	dc 92       	st	X, r13
   14fa6:	c1 82       	std	Z+1, r12	; 0x01
   14fa8:	8f e7       	ldi	r24, 0x7F	; 127
   14faa:	91 e1       	ldi	r25, 0x11	; 17
   14fac:	82 83       	std	Z+2, r24	; 0x02
   14fae:	93 83       	std	Z+3, r25	; 0x03
   14fb0:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14fb4:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14fb6:	f7 01       	movw	r30, r14
   14fb8:	80 81       	ld	r24, Z
   14fba:	91 81       	ldd	r25, Z+1	; 0x01
   14fbc:	0f 90       	pop	r0
   14fbe:	0f 90       	pop	r0
   14fc0:	0f 90       	pop	r0
   14fc2:	0f 90       	pop	r0
   14fc4:	6d 2d       	mov	r22, r13
   14fc6:	7c 2d       	mov	r23, r12
   14fc8:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using TWI2, TWI3 | pins PD1 and PE1. |\n\r"));
   14fcc:	00 d0       	rcall	.+0      	; 0x14fce <usr_loopbackTest+0x27a>
   14fce:	0f 92       	push	r0
   14fd0:	ed b7       	in	r30, 0x3d	; 61
   14fd2:	fe b7       	in	r31, 0x3e	; 62
   14fd4:	31 96       	adiw	r30, 0x01	; 1
   14fd6:	ad b7       	in	r26, 0x3d	; 61
   14fd8:	be b7       	in	r27, 0x3e	; 62
   14fda:	11 96       	adiw	r26, 0x01	; 1
   14fdc:	dc 92       	st	X, r13
   14fde:	c1 82       	std	Z+1, r12	; 0x01
   14fe0:	82 e3       	ldi	r24, 0x32	; 50
   14fe2:	91 e1       	ldi	r25, 0x11	; 17
   14fe4:	82 83       	std	Z+2, r24	; 0x02
   14fe6:	93 83       	std	Z+3, r25	; 0x03
   14fe8:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   14fec:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   14fee:	f7 01       	movw	r30, r14
   14ff0:	80 81       	ld	r24, Z
   14ff2:	91 81       	ldd	r25, Z+1	; 0x01
   14ff4:	0f 90       	pop	r0
   14ff6:	0f 90       	pop	r0
   14ff8:	0f 90       	pop	r0
   14ffa:	0f 90       	pop	r0
   14ffc:	6d 2d       	mov	r22, r13
   14ffe:	7c 2d       	mov	r23, r12
   15000:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | and two mailbox modules.      |                   |\n\r"));
   15004:	00 d0       	rcall	.+0      	; 0x15006 <usr_loopbackTest+0x2b2>
   15006:	0f 92       	push	r0
   15008:	ed b7       	in	r30, 0x3d	; 61
   1500a:	fe b7       	in	r31, 0x3e	; 62
   1500c:	31 96       	adiw	r30, 0x01	; 1
   1500e:	ad b7       	in	r26, 0x3d	; 61
   15010:	be b7       	in	r27, 0x3e	; 62
   15012:	11 96       	adiw	r26, 0x01	; 1
   15014:	dc 92       	st	X, r13
   15016:	c1 82       	std	Z+1, r12	; 0x01
   15018:	85 ee       	ldi	r24, 0xE5	; 229
   1501a:	90 e1       	ldi	r25, 0x10	; 16
   1501c:	82 83       	std	Z+2, r24	; 0x02
   1501e:	93 83       	std	Z+3, r25	; 0x03
   15020:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15024:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15026:	f7 01       	movw	r30, r14
   15028:	80 81       	ld	r24, Z
   1502a:	91 81       	ldd	r25, Z+1	; 0x01
   1502c:	0f 90       	pop	r0
   1502e:	0f 90       	pop	r0
   15030:	0f 90       	pop	r0
   15032:	0f 90       	pop	r0
   15034:	6d 2d       	mov	r22, r13
   15036:	7c 2d       	mov	r23, r12
   15038:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                 pc_buff,
                 s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   1503c:	00 d0       	rcall	.+0      	; 0x1503e <usr_loopbackTest+0x2ea>
   1503e:	0f 92       	push	r0
   15040:	ed b7       	in	r30, 0x3d	; 61
   15042:	fe b7       	in	r31, 0x3e	; 62
   15044:	31 96       	adiw	r30, 0x01	; 1
   15046:	ad b7       	in	r26, 0x3d	; 61
   15048:	be b7       	in	r27, 0x3e	; 62
   1504a:	11 96       	adiw	r26, 0x01	; 1
   1504c:	dc 92       	st	X, r13
   1504e:	c1 82       	std	Z+1, r12	; 0x01
   15050:	88 e9       	ldi	r24, 0x98	; 152
   15052:	90 e1       	ldi	r25, 0x10	; 16
   15054:	80 c0       	rjmp	.+256    	; 0x15156 <usr_loopbackTest+0x402>
      arb_write( t_consoleHndl,
                 pc_buff,
                 s_size);
   }/*End else if( t_type == TWI_LOOPBACK_TEST)*/
   else if( t_type == SPI_LOOPBACK_TEST)
   15056:	f2 e0       	ldi	r31, 0x02	; 2
   15058:	9f 16       	cp	r9, r31
   1505a:	09 f0       	breq	.+2      	; 0x1505e <usr_loopbackTest+0x30a>
   1505c:	8c c0       	rjmp	.+280    	; 0x15176 <usr_loopbackTest+0x422>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("| SPI loopback test  | Loops back a message between  | Connect pins PF5  |\n\r"));
   1505e:	00 d0       	rcall	.+0      	; 0x15060 <usr_loopbackTest+0x30c>
   15060:	0f 92       	push	r0
   15062:	ed b7       	in	r30, 0x3d	; 61
   15064:	fe b7       	in	r31, 0x3e	; 62
   15066:	31 96       	adiw	r30, 0x01	; 1
   15068:	ad b7       	in	r26, 0x3d	; 61
   1506a:	be b7       	in	r27, 0x3e	; 62
   1506c:	11 96       	adiw	r26, 0x01	; 1
   1506e:	dc 92       	st	X, r13
   15070:	c1 82       	std	Z+1, r12	; 0x01
   15072:	8b e4       	ldi	r24, 0x4B	; 75
   15074:	90 e1       	ldi	r25, 0x10	; 16
   15076:	82 83       	std	Z+2, r24	; 0x02
   15078:	93 83       	std	Z+3, r25	; 0x03
   1507a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1507e:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15080:	f7 01       	movw	r30, r14
   15082:	80 81       	ld	r24, Z
   15084:	91 81       	ldd	r25, Z+1	; 0x01
   15086:	0f 90       	pop	r0
   15088:	0f 90       	pop	r0
   1508a:	0f 90       	pop	r0
   1508c:	0f 90       	pop	r0
   1508e:	6d 2d       	mov	r22, r13
   15090:	7c 2d       	mov	r23, r12
   15092:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | the console and usr_platform- | and PF6.          |\n\r"));
   15096:	00 d0       	rcall	.+0      	; 0x15098 <usr_loopbackTest+0x344>
   15098:	0f 92       	push	r0
   1509a:	ed b7       	in	r30, 0x3d	; 61
   1509c:	fe b7       	in	r31, 0x3e	; 62
   1509e:	31 96       	adiw	r30, 0x01	; 1
   150a0:	ad b7       	in	r26, 0x3d	; 61
   150a2:	be b7       	in	r27, 0x3e	; 62
   150a4:	11 96       	adiw	r26, 0x01	; 1
   150a6:	dc 92       	st	X, r13
   150a8:	c1 82       	std	Z+1, r12	; 0x01
   150aa:	8e ef       	ldi	r24, 0xFE	; 254
   150ac:	9f e0       	ldi	r25, 0x0F	; 15
   150ae:	82 83       	std	Z+2, r24	; 0x02
   150b0:	93 83       	std	Z+3, r25	; 0x03
   150b2:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   150b6:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   150b8:	f7 01       	movw	r30, r14
   150ba:	80 81       	ld	r24, Z
   150bc:	91 81       	ldd	r25, Z+1	; 0x01
   150be:	0f 90       	pop	r0
   150c0:	0f 90       	pop	r0
   150c2:	0f 90       	pop	r0
   150c4:	0f 90       	pop	r0
   150c6:	6d 2d       	mov	r22, r13
   150c8:	7c 2d       	mov	r23, r12
   150ca:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | Test threads using SPI2       |                   |\n\r"));
   150ce:	00 d0       	rcall	.+0      	; 0x150d0 <usr_loopbackTest+0x37c>
   150d0:	0f 92       	push	r0
   150d2:	ed b7       	in	r30, 0x3d	; 61
   150d4:	fe b7       	in	r31, 0x3e	; 62
   150d6:	31 96       	adiw	r30, 0x01	; 1
   150d8:	ad b7       	in	r26, 0x3d	; 61
   150da:	be b7       	in	r27, 0x3e	; 62
   150dc:	11 96       	adiw	r26, 0x01	; 1
   150de:	dc 92       	st	X, r13
   150e0:	c1 82       	std	Z+1, r12	; 0x01
   150e2:	81 eb       	ldi	r24, 0xB1	; 177
   150e4:	9f e0       	ldi	r25, 0x0F	; 15
   150e6:	82 83       	std	Z+2, r24	; 0x02
   150e8:	93 83       	std	Z+3, r25	; 0x03
   150ea:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   150ee:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   150f0:	f7 01       	movw	r30, r14
   150f2:	80 81       	ld	r24, Z
   150f4:	91 81       	ldd	r25, Z+1	; 0x01
   150f6:	0f 90       	pop	r0
   150f8:	0f 90       	pop	r0
   150fa:	0f 90       	pop	r0
   150fc:	0f 90       	pop	r0
   150fe:	6d 2d       	mov	r22, r13
   15100:	7c 2d       	mov	r23, r12
   15102:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | and two mailbox modules.      |                   |\n\r"));
   15106:	00 d0       	rcall	.+0      	; 0x15108 <usr_loopbackTest+0x3b4>
   15108:	0f 92       	push	r0
   1510a:	ed b7       	in	r30, 0x3d	; 61
   1510c:	fe b7       	in	r31, 0x3e	; 62
   1510e:	31 96       	adiw	r30, 0x01	; 1
   15110:	ad b7       	in	r26, 0x3d	; 61
   15112:	be b7       	in	r27, 0x3e	; 62
   15114:	11 96       	adiw	r26, 0x01	; 1
   15116:	dc 92       	st	X, r13
   15118:	c1 82       	std	Z+1, r12	; 0x01
   1511a:	84 e6       	ldi	r24, 0x64	; 100
   1511c:	9f e0       	ldi	r25, 0x0F	; 15
   1511e:	82 83       	std	Z+2, r24	; 0x02
   15120:	93 83       	std	Z+3, r25	; 0x03
   15122:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15126:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15128:	f7 01       	movw	r30, r14
   1512a:	80 81       	ld	r24, Z
   1512c:	91 81       	ldd	r25, Z+1	; 0x01
   1512e:	0f 90       	pop	r0
   15130:	0f 90       	pop	r0
   15132:	0f 90       	pop	r0
   15134:	0f 90       	pop	r0
   15136:	6d 2d       	mov	r22, r13
   15138:	7c 2d       	mov	r23, r12
   1513a:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      pc_buff,
      s_size);
      s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   1513e:	00 d0       	rcall	.+0      	; 0x15140 <usr_loopbackTest+0x3ec>
   15140:	0f 92       	push	r0
   15142:	ed b7       	in	r30, 0x3d	; 61
   15144:	fe b7       	in	r31, 0x3e	; 62
   15146:	31 96       	adiw	r30, 0x01	; 1
   15148:	ad b7       	in	r26, 0x3d	; 61
   1514a:	be b7       	in	r27, 0x3e	; 62
   1514c:	11 96       	adiw	r26, 0x01	; 1
   1514e:	dc 92       	st	X, r13
   15150:	c1 82       	std	Z+1, r12	; 0x01
   15152:	87 e1       	ldi	r24, 0x17	; 23
   15154:	9f e0       	ldi	r25, 0x0F	; 15
   15156:	82 83       	std	Z+2, r24	; 0x02
   15158:	93 83       	std	Z+3, r25	; 0x03
   1515a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1515e:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15160:	f7 01       	movw	r30, r14
   15162:	80 81       	ld	r24, Z
   15164:	91 81       	ldd	r25, Z+1	; 0x01
   15166:	0f 90       	pop	r0
   15168:	0f 90       	pop	r0
   1516a:	0f 90       	pop	r0
   1516c:	0f 90       	pop	r0
   1516e:	6d 2d       	mov	r22, r13
   15170:	7c 2d       	mov	r23, r12
   15172:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      pc_buff,
      s_size);
   }/*End else if( t_type == SPI_LOOPBACK_TEST)*/

   s_size = sprintf_P( (char *)pc_buff, PSTR("Select number of trials (0<->10000), press enter-> "));
   15176:	00 d0       	rcall	.+0      	; 0x15178 <usr_loopbackTest+0x424>
   15178:	0f 92       	push	r0
   1517a:	ed b7       	in	r30, 0x3d	; 61
   1517c:	fe b7       	in	r31, 0x3e	; 62
   1517e:	31 96       	adiw	r30, 0x01	; 1
   15180:	ad b7       	in	r26, 0x3d	; 61
   15182:	be b7       	in	r27, 0x3e	; 62
   15184:	11 96       	adiw	r26, 0x01	; 1
   15186:	dc 92       	st	X, r13
   15188:	c1 82       	std	Z+1, r12	; 0x01
   1518a:	83 ee       	ldi	r24, 0xE3	; 227
   1518c:	9e e0       	ldi	r25, 0x0E	; 14
   1518e:	82 83       	std	Z+2, r24	; 0x02
   15190:	93 83       	std	Z+3, r25	; 0x03
   15192:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15196:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15198:	85 e4       	ldi	r24, 0x45	; 69
   1519a:	e8 2e       	mov	r14, r24
   1519c:	f1 2c       	mov	r15, r1
   1519e:	ec 0e       	add	r14, r28
   151a0:	fd 1e       	adc	r15, r29
   151a2:	f7 01       	movw	r30, r14
   151a4:	80 81       	ld	r24, Z
   151a6:	91 81       	ldd	r25, Z+1	; 0x01
   151a8:	0f 90       	pop	r0
   151aa:	0f 90       	pop	r0
   151ac:	0f 90       	pop	r0
   151ae:	0f 90       	pop	r0
   151b0:	6d 2d       	mov	r22, r13
   151b2:	7c 2d       	mov	r23, r12
   151b4:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   /*------------------------------------------------------------------------*
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
   151b8:	d7 01       	movw	r26, r14
   151ba:	8d 91       	ld	r24, X+
   151bc:	9c 91       	ld	r25, X
   151be:	8e 01       	movw	r16, r28
   151c0:	0b 5f       	subi	r16, 0xFB	; 251
   151c2:	1f 4f       	sbci	r17, 0xFF	; 255
   151c4:	b8 01       	movw	r22, r16
   151c6:	40 e2       	ldi	r20, 0x20	; 32
   151c8:	50 e0       	ldi	r21, 0x00	; 0
   151ca:	0e 94 fc 82 	call	0x105f8	; 0x105f8 <arb_read>
                            ac_txMessage,
                            (uint16_t)sizeof( ac_txMessage));

   s_numOfTrials = (int16_t)atoi( (char *)ac_txMessage);
   151ce:	c8 01       	movw	r24, r16
   151d0:	0e 94 c7 b6 	call	0x16d8e	; 0x16d8e <atoi>
   151d4:	2c 01       	movw	r4, r24
   if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))
   151d6:	01 97       	sbiw	r24, 0x01	; 1
   151d8:	80 51       	subi	r24, 0x10	; 16
   151da:	97 42       	sbci	r25, 0x27	; 39
   151dc:	98 f0       	brcs	.+38     	; 0x15204 <usr_loopbackTest+0x4b0>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid CMD\n\r"));
   151de:	00 d0       	rcall	.+0      	; 0x151e0 <usr_loopbackTest+0x48c>
   151e0:	0f 92       	push	r0
   151e2:	ed b7       	in	r30, 0x3d	; 61
   151e4:	fe b7       	in	r31, 0x3e	; 62
   151e6:	31 96       	adiw	r30, 0x01	; 1
   151e8:	ad b7       	in	r26, 0x3d	; 61
   151ea:	be b7       	in	r27, 0x3e	; 62
   151ec:	11 96       	adiw	r26, 0x01	; 1
   151ee:	dc 92       	st	X, r13
   151f0:	c1 82       	std	Z+1, r12	; 0x01
   151f2:	85 ed       	ldi	r24, 0xD5	; 213
   151f4:	9e e0       	ldi	r25, 0x0E	; 14
   151f6:	82 83       	std	Z+2, r24	; 0x02
   151f8:	93 83       	std	Z+3, r25	; 0x03
   151fa:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   151fe:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15200:	f7 01       	movw	r30, r14
   15202:	42 c0       	rjmp	.+132    	; 0x15288 <usr_loopbackTest+0x534>
                 pc_buff,
                 s_size);
   }/*End if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))*/
   else
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Enter the test message-> "));
   15204:	00 d0       	rcall	.+0      	; 0x15206 <usr_loopbackTest+0x4b2>
   15206:	0f 92       	push	r0
   15208:	ed b7       	in	r30, 0x3d	; 61
   1520a:	fe b7       	in	r31, 0x3e	; 62
   1520c:	31 96       	adiw	r30, 0x01	; 1
   1520e:	ad b7       	in	r26, 0x3d	; 61
   15210:	be b7       	in	r27, 0x3e	; 62
   15212:	11 96       	adiw	r26, 0x01	; 1
   15214:	dc 92       	st	X, r13
   15216:	c1 82       	std	Z+1, r12	; 0x01
   15218:	8b eb       	ldi	r24, 0xBB	; 187
   1521a:	9e e0       	ldi	r25, 0x0E	; 14
   1521c:	82 83       	std	Z+2, r24	; 0x02
   1521e:	93 83       	std	Z+3, r25	; 0x03
   15220:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15224:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   15226:	f7 01       	movw	r30, r14
   15228:	80 81       	ld	r24, Z
   1522a:	91 81       	ldd	r25, Z+1	; 0x01
   1522c:	0f 90       	pop	r0
   1522e:	0f 90       	pop	r0
   15230:	0f 90       	pop	r0
   15232:	0f 90       	pop	r0
   15234:	6d 2d       	mov	r22, r13
   15236:	7c 2d       	mov	r23, r12
   15238:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
      /*---------------------------------------------------------------------*
       * Wait for response. The 'arb_read' method is used instead of
       * 'arb_ioctl' because we are reading the entire contents of the
       * command line without parsing the message into arguments.
       *---------------------------------------------------------------------*/
      s_numTxBytes = arb_read( t_consoleHndl,
   1523c:	d7 01       	movw	r26, r14
   1523e:	8d 91       	ld	r24, X+
   15240:	9c 91       	ld	r25, X
   15242:	b8 01       	movw	r22, r16
   15244:	40 e2       	ldi	r20, 0x20	; 32
   15246:	50 e0       	ldi	r21, 0x00	; 0
   15248:	0e 94 fc 82 	call	0x105f8	; 0x105f8 <arb_read>
   1524c:	7c 01       	movw	r14, r24
                               (uint16_t)sizeof( ac_txMessage));

      /*---------------------------------------------------------------------*
       * Is the message too big for the queue?
       *---------------------------------------------------------------------*/
      if( (s_numTxBytes < 0) || (s_numTxBytes > (arb_mailboxGetQueueMaxSize(
   1524e:	97 fd       	sbrc	r25, 7
   15250:	07 c0       	rjmp	.+14     	; 0x15260 <usr_loopbackTest+0x50c>
   15252:	89 81       	ldd	r24, Y+1	; 0x01
   15254:	9a 81       	ldd	r25, Y+2	; 0x02
   15256:	0e 94 39 87 	call	0x10e72	; 0x10e72 <arb_mailboxGetQueueMaxSize>
   1525a:	e8 16       	cp	r14, r24
   1525c:	f9 06       	cpc	r15, r25
   1525e:	dc f0       	brlt	.+54     	; 0x15296 <usr_loopbackTest+0x542>
      t_platTestInMbx) - 1)))
      {
         s_size = sprintf_P( (char *)pc_buff, PSTR("Message too big for mailbox.\n\r"));
   15260:	00 d0       	rcall	.+0      	; 0x15262 <usr_loopbackTest+0x50e>
   15262:	0f 92       	push	r0
   15264:	ed b7       	in	r30, 0x3d	; 61
   15266:	fe b7       	in	r31, 0x3e	; 62
   15268:	31 96       	adiw	r30, 0x01	; 1
   1526a:	ad b7       	in	r26, 0x3d	; 61
   1526c:	be b7       	in	r27, 0x3e	; 62
   1526e:	11 96       	adiw	r26, 0x01	; 1
   15270:	dc 92       	st	X, r13
   15272:	c1 82       	std	Z+1, r12	; 0x01
   15274:	8c e9       	ldi	r24, 0x9C	; 156
   15276:	9e e0       	ldi	r25, 0x0E	; 14
   15278:	82 83       	std	Z+2, r24	; 0x02
   1527a:	93 83       	std	Z+3, r25	; 0x03
   1527c:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15280:	ac 01       	movw	r20, r24
         arb_write( t_consoleHndl,
   15282:	fe 01       	movw	r30, r28
   15284:	eb 5b       	subi	r30, 0xBB	; 187
   15286:	ff 4f       	sbci	r31, 0xFF	; 255
   15288:	80 81       	ld	r24, Z
   1528a:	91 81       	ldd	r25, Z+1	; 0x01
   1528c:	0f 90       	pop	r0
   1528e:	0f 90       	pop	r0
   15290:	0f 90       	pop	r0
   15292:	0f 90       	pop	r0
   15294:	b9 c0       	rjmp	.+370    	; 0x15408 <usr_loopbackTest+0x6b4>

         /*------------------------------------------------------------------*
          * Prefix the message with a header that lets the platformTest
          * interface know that a uart loop test is being performed.
          *------------------------------------------------------------------*/
         memcpy( (void *)&ac_rxMessage, (void *)ac_txMessage, s_numTxBytes);
   15296:	be 2c       	mov	r11, r14
   15298:	af 2c       	mov	r10, r15
   1529a:	9e 01       	movw	r18, r28
   1529c:	2b 5d       	subi	r18, 0xDB	; 219
   1529e:	3f 4f       	sbci	r19, 0xFF	; 255
   152a0:	c9 01       	movw	r24, r18
   152a2:	b8 01       	movw	r22, r16
   152a4:	a7 01       	movw	r20, r14
   152a6:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>

         if( t_type == UART_LOOPBACK_TEST)
   152aa:	99 20       	and	r9, r9
   152ac:	11 f4       	brne	.+4      	; 0x152b2 <usr_loopbackTest+0x55e>
            ac_txMessage[0] = PLAT_UART_TEST;
   152ae:	1d 82       	std	Y+5, r1	; 0x05
   152b0:	0a c0       	rjmp	.+20     	; 0x152c6 <usr_loopbackTest+0x572>
         else if( t_type == TWI_LOOPBACK_TEST)
   152b2:	b1 e0       	ldi	r27, 0x01	; 1
   152b4:	9b 16       	cp	r9, r27
   152b6:	11 f4       	brne	.+4      	; 0x152bc <usr_loopbackTest+0x568>
            ac_txMessage[0] = PLAT_TWI_TEST;
   152b8:	9d 82       	std	Y+5, r9	; 0x05
   152ba:	05 c0       	rjmp	.+10     	; 0x152c6 <usr_loopbackTest+0x572>
         else if( t_type == SPI_LOOPBACK_TEST)
   152bc:	e2 e0       	ldi	r30, 0x02	; 2
   152be:	9e 16       	cp	r9, r30
   152c0:	11 f4       	brne	.+4      	; 0x152c6 <usr_loopbackTest+0x572>
            ac_txMessage[0] = PLAT_SPI_TEST;
   152c2:	83 e0       	ldi	r24, 0x03	; 3
   152c4:	8d 83       	std	Y+5, r24	; 0x05

         memcpy( (void *)&ac_txMessage[1], (void *)ac_rxMessage,
   152c6:	9e 01       	movw	r18, r28
   152c8:	2a 5f       	subi	r18, 0xFA	; 250
   152ca:	3f 4f       	sbci	r19, 0xFF	; 255
   152cc:	8e 01       	movw	r16, r28
   152ce:	0b 5d       	subi	r16, 0xDB	; 219
   152d0:	1f 4f       	sbci	r17, 0xFF	; 255
   152d2:	c9 01       	movw	r24, r18
   152d4:	b8 01       	movw	r22, r16
   152d6:	4b 2d       	mov	r20, r11
   152d8:	5a 2d       	mov	r21, r10
   152da:	0e 94 f0 b7 	call	0x16fe0	; 0x16fe0 <memcpy>
         s_numTxBytes);

         /*------------------------------------------------------------------*
          * Increase the message size by the size of the header.
          *------------------------------------------------------------------*/
         s_numTxBytes++;
   152de:	08 94       	sec
   152e0:	e1 1c       	adc	r14, r1
   152e2:	f1 1c       	adc	r15, r1
   152e4:	66 24       	eor	r6, r6
   152e6:	77 24       	eor	r7, r7
   152e8:	88 24       	eor	r8, r8
   152ea:	99 24       	eor	r9, r9
   152ec:	54 01       	movw	r10, r8
            {

               /*------------------------------------------------------------*
                * Send the message to the platform test thread
                *------------------------------------------------------------*/
               s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
   152ee:	18 01       	movw	r2, r16
                  }/*End for( c_index = 0; c_index < s_numTxBytes; c_index++)*/

                  /*---------------------------------------------------------*
                   * Echo the received message, ignoring the header...
                   *---------------------------------------------------------*/
                  arb_write( t_consoleHndl,
   152f0:	8e 01       	movw	r16, r28
   152f2:	0b 5b       	subi	r16, 0xBB	; 187
   152f4:	1f 4f       	sbci	r17, 0xFF	; 255
   152f6:	60 c0       	rjmp	.+192    	; 0x153b8 <usr_loopbackTest+0x664>
            /*---------------------------------------------------------------*
             * Send the message to the platformTest interface where it will
             * be looped between two peripherals and returned to this calling
             * thread with a subsequent mailbox message.
             *---------------------------------------------------------------*/
            s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   152f8:	89 81       	ldd	r24, Y+1	; 0x01
   152fa:	9a 81       	ldd	r25, Y+2	; 0x02
   152fc:	be 01       	movw	r22, r28
   152fe:	6b 5f       	subi	r22, 0xFB	; 251
   15300:	7f 4f       	sbci	r23, 0xFF	; 255
   15302:	a7 01       	movw	r20, r14
   15304:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
   15308:	7c 01       	movw	r14, r24
                                             s_numTxBytes);

            /*---------------------------------------------------------------*
             * Was the message successfully sent?
             *---------------------------------------------------------------*/
            if( s_numTxBytes > 0) /*Yes*/
   1530a:	18 16       	cp	r1, r24
   1530c:	19 06       	cpc	r1, r25
   1530e:	0c f0       	brlt	.+2      	; 0x15312 <usr_loopbackTest+0x5be>
   15310:	4c c0       	rjmp	.+152    	; 0x153aa <usr_loopbackTest+0x656>
            {

               /*------------------------------------------------------------*
                * Send the message to the platform test thread
                *------------------------------------------------------------*/
               s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
   15312:	8b 81       	ldd	r24, Y+3	; 0x03
   15314:	9c 81       	ldd	r25, Y+4	; 0x04
   15316:	b1 01       	movw	r22, r2
   15318:	40 e2       	ldi	r20, 0x20	; 32
   1531a:	50 e0       	ldi	r21, 0x00	; 0
   1531c:	0e 94 41 89 	call	0x11282	; 0x11282 <arb_mailboxRead>
   15320:	ac 01       	movw	r20, r24
                                               ac_rxMessage,
                                               (uint16_t)sizeof( ac_rxMessage));

               if( s_numRxBytes > 0)
   15322:	18 16       	cp	r1, r24
   15324:	19 06       	cpc	r1, r25
   15326:	0c f0       	brlt	.+2      	; 0x1532a <usr_loopbackTest+0x5d6>
   15328:	40 c0       	rjmp	.+128    	; 0x153aa <usr_loopbackTest+0x656>
   1532a:	20 e0       	ldi	r18, 0x00	; 0
   1532c:	30 e0       	ldi	r19, 0x00	; 0
   1532e:	14 c0       	rjmp	.+40     	; 0x15358 <usr_loopbackTest+0x604>
               {
                  for( c_index = 0; c_index < s_numTxBytes; c_index++)
                  {
                     if( ac_txMessage[c_index] != ac_rxMessage[c_index])
   15330:	e5 e0       	ldi	r30, 0x05	; 5
   15332:	f0 e0       	ldi	r31, 0x00	; 0
   15334:	ec 0f       	add	r30, r28
   15336:	fd 1f       	adc	r31, r29
   15338:	e2 0f       	add	r30, r18
   1533a:	f3 1f       	adc	r31, r19
   1533c:	d1 01       	movw	r26, r2
   1533e:	a2 0f       	add	r26, r18
   15340:	b3 1f       	adc	r27, r19
   15342:	90 81       	ld	r25, Z
   15344:	8c 91       	ld	r24, X
   15346:	98 17       	cp	r25, r24
   15348:	29 f0       	breq	.+10     	; 0x15354 <usr_loopbackTest+0x600>
                        i_byteErrors++;
   1534a:	08 94       	sec
   1534c:	81 1c       	adc	r8, r1
   1534e:	91 1c       	adc	r9, r1
   15350:	a1 1c       	adc	r10, r1
   15352:	b1 1c       	adc	r11, r1
   15354:	2f 5f       	subi	r18, 0xFF	; 255
   15356:	3f 4f       	sbci	r19, 0xFF	; 255
                                               ac_rxMessage,
                                               (uint16_t)sizeof( ac_rxMessage));

               if( s_numRxBytes > 0)
               {
                  for( c_index = 0; c_index < s_numTxBytes; c_index++)
   15358:	2e 15       	cp	r18, r14
   1535a:	3f 05       	cpc	r19, r15
   1535c:	4c f3       	brlt	.-46     	; 0x15330 <usr_loopbackTest+0x5dc>
                  }/*End for( c_index = 0; c_index < s_numTxBytes; c_index++)*/

                  /*---------------------------------------------------------*
                   * Echo the received message, ignoring the header...
                   *---------------------------------------------------------*/
                  arb_write( t_consoleHndl,
   1535e:	d8 01       	movw	r26, r16
   15360:	8d 91       	ld	r24, X+
   15362:	9c 91       	ld	r25, X
   15364:	41 50       	subi	r20, 0x01	; 1
   15366:	50 40       	sbci	r21, 0x00	; 0
   15368:	be 01       	movw	r22, r28
   1536a:	6a 5d       	subi	r22, 0xDA	; 218
   1536c:	7f 4f       	sbci	r23, 0xFF	; 255
   1536e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                             &ac_rxMessage[1],
                             (s_numRxBytes - 1));

                  s_size = sprintf_P( (char *)pc_buff, PSTR("\n\r"));
   15372:	00 d0       	rcall	.+0      	; 0x15374 <usr_loopbackTest+0x620>
   15374:	0f 92       	push	r0
   15376:	ed b7       	in	r30, 0x3d	; 61
   15378:	fe b7       	in	r31, 0x3e	; 62
   1537a:	31 96       	adiw	r30, 0x01	; 1
   1537c:	ad b7       	in	r26, 0x3d	; 61
   1537e:	be b7       	in	r27, 0x3e	; 62
   15380:	11 96       	adiw	r26, 0x01	; 1
   15382:	dc 92       	st	X, r13
   15384:	c1 82       	std	Z+1, r12	; 0x01
   15386:	29 e9       	ldi	r18, 0x99	; 153
   15388:	3e e0       	ldi	r19, 0x0E	; 14
   1538a:	22 83       	std	Z+2, r18	; 0x02
   1538c:	33 83       	std	Z+3, r19	; 0x03
   1538e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15392:	ac 01       	movw	r20, r24
                  arb_write( t_consoleHndl,
   15394:	d8 01       	movw	r26, r16
   15396:	8d 91       	ld	r24, X+
   15398:	9c 91       	ld	r25, X
   1539a:	0f 90       	pop	r0
   1539c:	0f 90       	pop	r0
   1539e:	0f 90       	pop	r0
   153a0:	0f 90       	pop	r0
   153a2:	6d 2d       	mov	r22, r13
   153a4:	7c 2d       	mov	r23, r12
   153a6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>

               }/*End if( s_numRxBytes > 0)*/

            }/*End if( s_numTxBytes > 0)*/

            s_count++;
   153aa:	08 94       	sec
   153ac:	61 1c       	adc	r6, r1
   153ae:	71 1c       	adc	r7, r1

            arb_sleep(1);
   153b0:	81 e0       	ldi	r24, 0x01	; 1
   153b2:	90 e0       	ldi	r25, 0x00	; 0
   153b4:	0e 94 25 a1 	call	0x1424a	; 0x1424a <arb_sleep>
         /*------------------------------------------------------------------*
          * Increase the message size by the size of the header.
          *------------------------------------------------------------------*/
         s_numTxBytes++;

         while( s_count < s_numOfTrials)
   153b8:	64 14       	cp	r6, r4
   153ba:	75 04       	cpc	r7, r5
   153bc:	0c f4       	brge	.+2      	; 0x153c0 <usr_loopbackTest+0x66c>
   153be:	9c cf       	rjmp	.-200    	; 0x152f8 <usr_loopbackTest+0x5a4>

            arb_sleep(1);

         }/*End while( s_count < s_numOfTrials)*/

         s_size = sprintf_P( (char *)pc_buff, PSTR("Test finished. Received %d out of %d messages with %d errors.\n\r"),
   153c0:	ed b7       	in	r30, 0x3d	; 61
   153c2:	fe b7       	in	r31, 0x3e	; 62
   153c4:	3c 97       	sbiw	r30, 0x0c	; 12
   153c6:	ed bf       	out	0x3d, r30	; 61
   153c8:	fe bf       	out	0x3e, r31	; 62
   153ca:	31 96       	adiw	r30, 0x01	; 1
   153cc:	ad b7       	in	r26, 0x3d	; 61
   153ce:	be b7       	in	r27, 0x3e	; 62
   153d0:	11 96       	adiw	r26, 0x01	; 1
   153d2:	dc 92       	st	X, r13
   153d4:	c1 82       	std	Z+1, r12	; 0x01
   153d6:	89 e5       	ldi	r24, 0x59	; 89
   153d8:	9e e0       	ldi	r25, 0x0E	; 14
   153da:	82 83       	std	Z+2, r24	; 0x02
   153dc:	93 83       	std	Z+3, r25	; 0x03
   153de:	44 82       	std	Z+4, r4	; 0x04
   153e0:	55 82       	std	Z+5, r5	; 0x05
   153e2:	46 82       	std	Z+6, r4	; 0x06
   153e4:	57 82       	std	Z+7, r5	; 0x07
   153e6:	80 86       	std	Z+8, r8	; 0x08
   153e8:	91 86       	std	Z+9, r9	; 0x09
   153ea:	a2 86       	std	Z+10, r10	; 0x0a
   153ec:	b3 86       	std	Z+11, r11	; 0x0b
   153ee:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   153f2:	ac 01       	movw	r20, r24
         s_count, s_numOfTrials, i_byteErrors);
         arb_write( t_consoleHndl,
   153f4:	fe 01       	movw	r30, r28
   153f6:	eb 5b       	subi	r30, 0xBB	; 187
   153f8:	ff 4f       	sbci	r31, 0xFF	; 255
   153fa:	80 81       	ld	r24, Z
   153fc:	91 81       	ldd	r25, Z+1	; 0x01
   153fe:	ed b7       	in	r30, 0x3d	; 61
   15400:	fe b7       	in	r31, 0x3e	; 62
   15402:	3c 96       	adiw	r30, 0x0c	; 12
   15404:	ed bf       	out	0x3d, r30	; 61
   15406:	fe bf       	out	0x3e, r31	; 62
   15408:	6d 2d       	mov	r22, r13
   1540a:	7c 2d       	mov	r23, r12
   1540c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
                    s_size);

      }
   }

}/*End usr_loopbackTest*/
   15410:	ca 5b       	subi	r28, 0xBA	; 186
   15412:	df 4f       	sbci	r29, 0xFF	; 255
   15414:	cd bf       	out	0x3d, r28	; 61
   15416:	de bf       	out	0x3e, r29	; 62
   15418:	cf 91       	pop	r28
   1541a:	df 91       	pop	r29
   1541c:	1f 91       	pop	r17
   1541e:	0f 91       	pop	r16
   15420:	ff 90       	pop	r15
   15422:	ef 90       	pop	r14
   15424:	df 90       	pop	r13
   15426:	cf 90       	pop	r12
   15428:	bf 90       	pop	r11
   1542a:	af 90       	pop	r10
   1542c:	9f 90       	pop	r9
   1542e:	8f 90       	pop	r8
   15430:	7f 90       	pop	r7
   15432:	6f 90       	pop	r6
   15434:	5f 90       	pop	r5
   15436:	4f 90       	pop	r4
   15438:	3f 90       	pop	r3
   1543a:	2f 90       	pop	r2
   1543c:	08 95       	ret

0001543e <usr_console>:
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
bool usr_console( t_DEVHANDLE t_consoleHndl,
                  int8_t *pc_buff,
                  t_consoleTokHndl *pt_tokHndl)
{
   1543e:	6f 92       	push	r6
   15440:	7f 92       	push	r7
   15442:	8f 92       	push	r8
   15444:	9f 92       	push	r9
   15446:	af 92       	push	r10
   15448:	bf 92       	push	r11
   1544a:	cf 92       	push	r12
   1544c:	df 92       	push	r13
   1544e:	ef 92       	push	r14
   15450:	ff 92       	push	r15
   15452:	0f 93       	push	r16
   15454:	1f 93       	push	r17
   15456:	df 93       	push	r29
   15458:	cf 93       	push	r28
   1545a:	cd b7       	in	r28, 0x3d	; 61
   1545c:	de b7       	in	r29, 0x3e	; 62
   1545e:	a6 97       	sbiw	r28, 0x26	; 38
   15460:	cd bf       	out	0x3d, r28	; 61
   15462:	de bf       	out	0x3e, r29	; 62
   15464:	8d a3       	std	Y+37, r24	; 0x25
   15466:	9e a3       	std	Y+38, r25	; 0x26
   15468:	f6 2e       	mov	r15, r22
   1546a:	e7 2e       	mov	r14, r23
   1546c:	8a 01       	movw	r16, r20

   bool b_success = true; /*A valid command was found...*/

   if( strcmp( (char *)pt_tokHndl->ac_tok[0], "hlpu") == 0)
   1546e:	d4 2e       	mov	r13, r20
   15470:	c1 2e       	mov	r12, r17
   15472:	ca 01       	movw	r24, r20
   15474:	6a e6       	ldi	r22, 0x6A	; 106
   15476:	72 e2       	ldi	r23, 0x22	; 34
   15478:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   1547c:	00 97       	sbiw	r24, 0x00	; 0
   1547e:	09 f0       	breq	.+2      	; 0x15482 <usr_console+0x44>
   15480:	c5 c0       	rjmp	.+394    	; 0x1560c <usr_console+0x1ce>
   {
      /*---------------------------------------------------------------------*
       * Display a list of all the possible user-space specific commands.
       *---------------------------------------------------------------------*/
      usr_displayUserHelp( t_consoleHndl,
   15482:	0d a1       	ldd	r16, Y+37	; 0x25
   15484:	1e a1       	ldd	r17, Y+38	; 0x26

   /*------------------------------------------------------------------------*
    * Display a list of all the possible console commands specific
    * to a user-space application.
    *------------------------------------------------------------------------*/
   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   15486:	00 d0       	rcall	.+0      	; 0x15488 <usr_console+0x4a>
   15488:	0f 92       	push	r0
   1548a:	ed b7       	in	r30, 0x3d	; 61
   1548c:	fe b7       	in	r31, 0x3e	; 62
   1548e:	31 96       	adiw	r30, 0x01	; 1
   15490:	ad b7       	in	r26, 0x3d	; 61
   15492:	be b7       	in	r27, 0x3e	; 62
   15494:	11 96       	adiw	r26, 0x01	; 1
   15496:	fc 92       	st	X, r15
   15498:	e1 82       	std	Z+1, r14	; 0x01
   1549a:	8c e0       	ldi	r24, 0x0C	; 12
   1549c:	9e e0       	ldi	r25, 0x0E	; 14
   1549e:	82 83       	std	Z+2, r24	; 0x02
   154a0:	93 83       	std	Z+3, r25	; 0x03
   154a2:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   154a6:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   154a8:	0f 90       	pop	r0
   154aa:	0f 90       	pop	r0
   154ac:	0f 90       	pop	r0
   154ae:	0f 90       	pop	r0
   154b0:	c8 01       	movw	r24, r16
   154b2:	6f 2d       	mov	r22, r15
   154b4:	7e 2d       	mov	r23, r14
   154b6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Command |     Arguments     |              Description                 |\n\r"));
   154ba:	00 d0       	rcall	.+0      	; 0x154bc <usr_console+0x7e>
   154bc:	0f 92       	push	r0
   154be:	ed b7       	in	r30, 0x3d	; 61
   154c0:	fe b7       	in	r31, 0x3e	; 62
   154c2:	31 96       	adiw	r30, 0x01	; 1
   154c4:	ad b7       	in	r26, 0x3d	; 61
   154c6:	be b7       	in	r27, 0x3e	; 62
   154c8:	11 96       	adiw	r26, 0x01	; 1
   154ca:	fc 92       	st	X, r15
   154cc:	e1 82       	std	Z+1, r14	; 0x01
   154ce:	8f eb       	ldi	r24, 0xBF	; 191
   154d0:	9d e0       	ldi	r25, 0x0D	; 13
   154d2:	82 83       	std	Z+2, r24	; 0x02
   154d4:	93 83       	std	Z+3, r25	; 0x03
   154d6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   154da:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   154dc:	0f 90       	pop	r0
   154de:	0f 90       	pop	r0
   154e0:	0f 90       	pop	r0
   154e2:	0f 90       	pop	r0
   154e4:	c8 01       	movw	r24, r16
   154e6:	6f 2d       	mov	r22, r15
   154e8:	7e 2d       	mov	r23, r14
   154ea:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|---------|-------------------|------------------------------------------|\n\r"));
   154ee:	00 d0       	rcall	.+0      	; 0x154f0 <usr_console+0xb2>
   154f0:	0f 92       	push	r0
   154f2:	ed b7       	in	r30, 0x3d	; 61
   154f4:	fe b7       	in	r31, 0x3e	; 62
   154f6:	31 96       	adiw	r30, 0x01	; 1
   154f8:	ad b7       	in	r26, 0x3d	; 61
   154fa:	be b7       	in	r27, 0x3e	; 62
   154fc:	11 96       	adiw	r26, 0x01	; 1
   154fe:	fc 92       	st	X, r15
   15500:	e1 82       	std	Z+1, r14	; 0x01
   15502:	82 e7       	ldi	r24, 0x72	; 114
   15504:	9d e0       	ldi	r25, 0x0D	; 13
   15506:	82 83       	std	Z+2, r24	; 0x02
   15508:	93 83       	std	Z+3, r25	; 0x03
   1550a:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1550e:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15510:	0f 90       	pop	r0
   15512:	0f 90       	pop	r0
   15514:	0f 90       	pop	r0
   15516:	0f 90       	pop	r0
   15518:	c8 01       	movw	r24, r16
   1551a:	6f 2d       	mov	r22, r15
   1551c:	7e 2d       	mov	r23, r14
   1551e:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| ult     |                   | Performs a UART loopback test.           |\n\r"));
   15522:	00 d0       	rcall	.+0      	; 0x15524 <usr_console+0xe6>
   15524:	0f 92       	push	r0
   15526:	ed b7       	in	r30, 0x3d	; 61
   15528:	fe b7       	in	r31, 0x3e	; 62
   1552a:	31 96       	adiw	r30, 0x01	; 1
   1552c:	ad b7       	in	r26, 0x3d	; 61
   1552e:	be b7       	in	r27, 0x3e	; 62
   15530:	11 96       	adiw	r26, 0x01	; 1
   15532:	fc 92       	st	X, r15
   15534:	e1 82       	std	Z+1, r14	; 0x01
   15536:	85 e2       	ldi	r24, 0x25	; 37
   15538:	9d e0       	ldi	r25, 0x0D	; 13
   1553a:	82 83       	std	Z+2, r24	; 0x02
   1553c:	93 83       	std	Z+3, r25	; 0x03
   1553e:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15542:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15544:	0f 90       	pop	r0
   15546:	0f 90       	pop	r0
   15548:	0f 90       	pop	r0
   1554a:	0f 90       	pop	r0
   1554c:	c8 01       	movw	r24, r16
   1554e:	6f 2d       	mov	r22, r15
   15550:	7e 2d       	mov	r23, r14
   15552:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| tlt     |                   | Performs a TWI loopback test.            |\n\r"));
   15556:	00 d0       	rcall	.+0      	; 0x15558 <usr_console+0x11a>
   15558:	0f 92       	push	r0
   1555a:	ed b7       	in	r30, 0x3d	; 61
   1555c:	fe b7       	in	r31, 0x3e	; 62
   1555e:	31 96       	adiw	r30, 0x01	; 1
   15560:	ad b7       	in	r26, 0x3d	; 61
   15562:	be b7       	in	r27, 0x3e	; 62
   15564:	11 96       	adiw	r26, 0x01	; 1
   15566:	fc 92       	st	X, r15
   15568:	e1 82       	std	Z+1, r14	; 0x01
   1556a:	88 ed       	ldi	r24, 0xD8	; 216
   1556c:	9c e0       	ldi	r25, 0x0C	; 12
   1556e:	82 83       	std	Z+2, r24	; 0x02
   15570:	93 83       	std	Z+3, r25	; 0x03
   15572:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15576:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15578:	0f 90       	pop	r0
   1557a:	0f 90       	pop	r0
   1557c:	0f 90       	pop	r0
   1557e:	0f 90       	pop	r0
   15580:	c8 01       	movw	r24, r16
   15582:	6f 2d       	mov	r22, r15
   15584:	7e 2d       	mov	r23, r14
   15586:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| tgt     |                   | Performs a test using a timer and 2 gpios|\n\r"));
   1558a:	00 d0       	rcall	.+0      	; 0x1558c <usr_console+0x14e>
   1558c:	0f 92       	push	r0
   1558e:	ed b7       	in	r30, 0x3d	; 61
   15590:	fe b7       	in	r31, 0x3e	; 62
   15592:	31 96       	adiw	r30, 0x01	; 1
   15594:	ad b7       	in	r26, 0x3d	; 61
   15596:	be b7       	in	r27, 0x3e	; 62
   15598:	11 96       	adiw	r26, 0x01	; 1
   1559a:	fc 92       	st	X, r15
   1559c:	e1 82       	std	Z+1, r14	; 0x01
   1559e:	8b e8       	ldi	r24, 0x8B	; 139
   155a0:	9c e0       	ldi	r25, 0x0C	; 12
   155a2:	82 83       	std	Z+2, r24	; 0x02
   155a4:	93 83       	std	Z+3, r25	; 0x03
   155a6:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   155aa:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   155ac:	0f 90       	pop	r0
   155ae:	0f 90       	pop	r0
   155b0:	0f 90       	pop	r0
   155b2:	0f 90       	pop	r0
   155b4:	c8 01       	movw	r24, r16
   155b6:	6f 2d       	mov	r22, r15
   155b8:	7e 2d       	mov	r23, r14
   155ba:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| slt     |                   | Performs a SPI loopback test.            |\n\r"));
   155be:	00 d0       	rcall	.+0      	; 0x155c0 <usr_console+0x182>
   155c0:	0f 92       	push	r0
   155c2:	ed b7       	in	r30, 0x3d	; 61
   155c4:	fe b7       	in	r31, 0x3e	; 62
   155c6:	31 96       	adiw	r30, 0x01	; 1
   155c8:	ad b7       	in	r26, 0x3d	; 61
   155ca:	be b7       	in	r27, 0x3e	; 62
   155cc:	11 96       	adiw	r26, 0x01	; 1
   155ce:	fc 92       	st	X, r15
   155d0:	e1 82       	std	Z+1, r14	; 0x01
   155d2:	8e e3       	ldi	r24, 0x3E	; 62
   155d4:	9c e0       	ldi	r25, 0x0C	; 12
   155d6:	82 83       	std	Z+2, r24	; 0x02
   155d8:	93 83       	std	Z+3, r25	; 0x03
   155da:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   155de:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   155e0:	0f 90       	pop	r0
   155e2:	0f 90       	pop	r0
   155e4:	0f 90       	pop	r0
   155e6:	0f 90       	pop	r0
   155e8:	c8 01       	movw	r24, r16
   155ea:	6f 2d       	mov	r22, r15
   155ec:	7e 2d       	mov	r23, r14
   155ee:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'---------'-------------------'------------------------------------------'\n\r"));
   155f2:	00 d0       	rcall	.+0      	; 0x155f4 <usr_console+0x1b6>
   155f4:	0f 92       	push	r0
   155f6:	ed b7       	in	r30, 0x3d	; 61
   155f8:	fe b7       	in	r31, 0x3e	; 62
   155fa:	31 96       	adiw	r30, 0x01	; 1
   155fc:	ad b7       	in	r26, 0x3d	; 61
   155fe:	be b7       	in	r27, 0x3e	; 62
   15600:	11 96       	adiw	r26, 0x01	; 1
   15602:	fc 92       	st	X, r15
   15604:	e1 82       	std	Z+1, r14	; 0x01
   15606:	81 ef       	ldi	r24, 0xF1	; 241
   15608:	9b e0       	ldi	r25, 0x0B	; 11
   1560a:	69 c1       	rjmp	.+722    	; 0x158de <usr_console+0x4a0>
       *---------------------------------------------------------------------*/
      usr_displayUserHelp( t_consoleHndl,
                           pc_buff);

   }/*End else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "hlpu") == 0)*/
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "ult") == 0)
   1560c:	c8 01       	movw	r24, r16
   1560e:	6f e6       	ldi	r22, 0x6F	; 111
   15610:	72 e2       	ldi	r23, 0x22	; 34
   15612:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   15616:	00 97       	sbiw	r24, 0x00	; 0
   15618:	71 f4       	brne	.+28     	; 0x15636 <usr_console+0x1f8>
   1561a:	00 59       	subi	r16, 0x90	; 144
   1561c:	1f 4f       	sbci	r17, 0xFF	; 255
   1561e:	f8 01       	movw	r30, r16
   15620:	80 81       	ld	r24, Z
   15622:	00 57       	subi	r16, 0x70	; 112
   15624:	10 40       	sbci	r17, 0x00	; 0
   15626:	81 30       	cpi	r24, 0x01	; 1
   15628:	31 f4       	brne	.+12     	; 0x15636 <usr_console+0x1f8>
   && (pt_tokHndl->c_numTokens == 1))
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using UART6, a DMA, and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   1562a:	8d a1       	ldd	r24, Y+37	; 0x25
   1562c:	9e a1       	ldd	r25, Y+38	; 0x26
   1562e:	6f 2d       	mov	r22, r15
   15630:	7e 2d       	mov	r23, r14
   15632:	40 e0       	ldi	r20, 0x00	; 0
   15634:	2b c0       	rjmp	.+86     	; 0x1568c <usr_console+0x24e>
                        pc_buff,
                        UART_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "tlt") == 0)
   15636:	8d 2d       	mov	r24, r13
   15638:	9c 2d       	mov	r25, r12
   1563a:	63 e7       	ldi	r22, 0x73	; 115
   1563c:	72 e2       	ldi	r23, 0x22	; 34
   1563e:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   15642:	00 97       	sbiw	r24, 0x00	; 0
   15644:	71 f4       	brne	.+28     	; 0x15662 <usr_console+0x224>
   15646:	00 59       	subi	r16, 0x90	; 144
   15648:	1f 4f       	sbci	r17, 0xFF	; 255
   1564a:	d8 01       	movw	r26, r16
   1564c:	8c 91       	ld	r24, X
   1564e:	00 57       	subi	r16, 0x70	; 112
   15650:	10 40       	sbci	r17, 0x00	; 0
   15652:	81 30       	cpi	r24, 0x01	; 1
   15654:	31 f4       	brne	.+12     	; 0x15662 <usr_console+0x224>
   && (pt_tokHndl->c_numTokens == 1))
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using TWI2, TWI3, and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   15656:	8d a1       	ldd	r24, Y+37	; 0x25
   15658:	9e a1       	ldd	r25, Y+38	; 0x26
   1565a:	6f 2d       	mov	r22, r15
   1565c:	7e 2d       	mov	r23, r14
   1565e:	41 e0       	ldi	r20, 0x01	; 1
   15660:	15 c0       	rjmp	.+42     	; 0x1568c <usr_console+0x24e>
                        pc_buff,
                        TWI_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "slt") == 0)
   15662:	8d 2d       	mov	r24, r13
   15664:	9c 2d       	mov	r25, r12
   15666:	67 e7       	ldi	r22, 0x77	; 119
   15668:	72 e2       	ldi	r23, 0x22	; 34
   1566a:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   1566e:	00 97       	sbiw	r24, 0x00	; 0
   15670:	81 f4       	brne	.+32     	; 0x15692 <usr_console+0x254>
   15672:	00 59       	subi	r16, 0x90	; 144
   15674:	1f 4f       	sbci	r17, 0xFF	; 255
   15676:	f8 01       	movw	r30, r16
   15678:	80 81       	ld	r24, Z
   1567a:	00 57       	subi	r16, 0x70	; 112
   1567c:	10 40       	sbci	r17, 0x00	; 0
   1567e:	81 30       	cpi	r24, 0x01	; 1
   15680:	41 f4       	brne	.+16     	; 0x15692 <usr_console+0x254>
   && (pt_tokHndl->c_numTokens == 1))
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using SPI2 and two mailbox modules.
       *---------------------------------------------------------------------*/
      usr_loopbackTest( t_consoleHndl,
   15682:	8d a1       	ldd	r24, Y+37	; 0x25
   15684:	9e a1       	ldd	r25, Y+38	; 0x26
   15686:	6f 2d       	mov	r22, r15
   15688:	7e 2d       	mov	r23, r14
   1568a:	42 e0       	ldi	r20, 0x02	; 2
   1568c:	0e 94 aa a6 	call	0x14d54	; 0x14d54 <usr_loopbackTest>
   15690:	34 c1       	rjmp	.+616    	; 0x158fa <usr_console+0x4bc>
                        pc_buff,
                        SPI_LOOPBACK_TEST);
   }
   else if( (strcmp( (char *)pt_tokHndl->ac_tok[0], "tgt") == 0)
   15692:	8d 2d       	mov	r24, r13
   15694:	9c 2d       	mov	r25, r12
   15696:	6b e7       	ldi	r22, 0x7B	; 123
   15698:	72 e2       	ldi	r23, 0x22	; 34
   1569a:	0e 94 1e b8 	call	0x1703c	; 0x1703c <strcmp>
   1569e:	00 97       	sbiw	r24, 0x00	; 0
   156a0:	09 f0       	breq	.+2      	; 0x156a4 <usr_console+0x266>
   156a2:	95 c1       	rjmp	.+810    	; 0x159ce <usr_console+0x590>
   156a4:	00 59       	subi	r16, 0x90	; 144
   156a6:	1f 4f       	sbci	r17, 0xFF	; 255
   156a8:	d8 01       	movw	r26, r16
   156aa:	9c 90       	ld	r9, X
   156ac:	b1 e0       	ldi	r27, 0x01	; 1
   156ae:	9b 16       	cp	r9, r27
   156b0:	09 f0       	breq	.+2      	; 0x156b4 <usr_console+0x276>
   156b2:	8d c1       	rjmp	.+794    	; 0x159ce <usr_console+0x590>
   {
      /*---------------------------------------------------------------------*
       * Perform a loopback test using TIMER_1, GPIO_1, GPIO_2, and one
       * mailbox module.
       *---------------------------------------------------------------------*/
      usr_timerGpioTest( t_consoleHndl,
   156b4:	0d a1       	ldd	r16, Y+37	; 0x25
   156b6:	1e a1       	ldd	r17, Y+38	; 0x26
   156b8:	70 2e       	mov	r7, r16
   156ba:	61 2e       	mov	r6, r17
   uint16_t s_size;
   int16_t s_numOfTrials;
   int16_t s_numTxBytes;
   int16_t s_numRxBytes;
   int8_t ac_buff[32];
   t_MAILBOXHNDL t_platTestInMbx  = usr_getPlatTestInMailbox();
   156bc:	0e 94 03 ad 	call	0x15a06	; 0x15a06 <usr_getPlatTestInMailbox>
   156c0:	89 83       	std	Y+1, r24	; 0x01
   156c2:	9a 83       	std	Y+2, r25	; 0x02
   t_MAILBOXHNDL t_platTestOutMbx = usr_getPlatTestOutMailbox();
   156c4:	0e 94 09 ad 	call	0x15a12	; 0x15a12 <usr_getPlatTestOutMailbox>
   156c8:	8b 83       	std	Y+3, r24	; 0x03
   156ca:	9c 83       	std	Y+4, r25	; 0x04

   s_size = sprintf_P( (char *)pc_buff, PSTR(".------------------------------------------------------------------------.\n\r"));
   156cc:	00 d0       	rcall	.+0      	; 0x156ce <usr_console+0x290>
   156ce:	0f 92       	push	r0
   156d0:	ed b7       	in	r30, 0x3d	; 61
   156d2:	fe b7       	in	r31, 0x3e	; 62
   156d4:	31 96       	adiw	r30, 0x01	; 1
   156d6:	ad b7       	in	r26, 0x3d	; 61
   156d8:	be b7       	in	r27, 0x3e	; 62
   156da:	11 96       	adiw	r26, 0x01	; 1
   156dc:	fc 92       	st	X, r15
   156de:	e1 82       	std	Z+1, r14	; 0x01
   156e0:	84 e0       	ldi	r24, 0x04	; 4
   156e2:	97 e1       	ldi	r25, 0x17	; 23
   156e4:	82 83       	std	Z+2, r24	; 0x02
   156e6:	93 83       	std	Z+3, r25	; 0x03
   156e8:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   156ec:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   156ee:	0f 90       	pop	r0
   156f0:	0f 90       	pop	r0
   156f2:	0f 90       	pop	r0
   156f4:	0f 90       	pop	r0
   156f6:	c8 01       	movw	r24, r16
   156f8:	6f 2d       	mov	r22, r15
   156fa:	7e 2d       	mov	r23, r14
   156fc:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|        Test        |          Description          |       Setup       |\n\r"));
   15700:	00 d0       	rcall	.+0      	; 0x15702 <usr_console+0x2c4>
   15702:	0f 92       	push	r0
   15704:	ed b7       	in	r30, 0x3d	; 61
   15706:	fe b7       	in	r31, 0x3e	; 62
   15708:	31 96       	adiw	r30, 0x01	; 1
   1570a:	ad b7       	in	r26, 0x3d	; 61
   1570c:	be b7       	in	r27, 0x3e	; 62
   1570e:	11 96       	adiw	r26, 0x01	; 1
   15710:	fc 92       	st	X, r15
   15712:	e1 82       	std	Z+1, r14	; 0x01
   15714:	87 eb       	ldi	r24, 0xB7	; 183
   15716:	96 e1       	ldi	r25, 0x16	; 22
   15718:	82 83       	std	Z+2, r24	; 0x02
   1571a:	93 83       	std	Z+3, r25	; 0x03
   1571c:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15720:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15722:	0f 90       	pop	r0
   15724:	0f 90       	pop	r0
   15726:	0f 90       	pop	r0
   15728:	0f 90       	pop	r0
   1572a:	c8 01       	movw	r24, r16
   1572c:	6f 2d       	mov	r22, r15
   1572e:	7e 2d       	mov	r23, r14
   15730:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|--------------------|-------------------------------|-------------------|\n\r"));
   15734:	00 d0       	rcall	.+0      	; 0x15736 <usr_console+0x2f8>
   15736:	0f 92       	push	r0
   15738:	ed b7       	in	r30, 0x3d	; 61
   1573a:	fe b7       	in	r31, 0x3e	; 62
   1573c:	31 96       	adiw	r30, 0x01	; 1
   1573e:	ad b7       	in	r26, 0x3d	; 61
   15740:	be b7       	in	r27, 0x3e	; 62
   15742:	11 96       	adiw	r26, 0x01	; 1
   15744:	fc 92       	st	X, r15
   15746:	e1 82       	std	Z+1, r14	; 0x01
   15748:	8a e6       	ldi	r24, 0x6A	; 106
   1574a:	96 e1       	ldi	r25, 0x16	; 22
   1574c:	82 83       	std	Z+2, r24	; 0x02
   1574e:	93 83       	std	Z+3, r25	; 0x03
   15750:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15754:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15756:	0f 90       	pop	r0
   15758:	0f 90       	pop	r0
   1575a:	0f 90       	pop	r0
   1575c:	0f 90       	pop	r0
   1575e:	c8 01       	movw	r24, r16
   15760:	6f 2d       	mov	r22, r15
   15762:	7e 2d       	mov	r23, r14
   15764:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("| Timer/GPIO test    | Enables TIMER_1 which goes off| Connect pins PH3  |\n\r"));
   15768:	00 d0       	rcall	.+0      	; 0x1576a <usr_console+0x32c>
   1576a:	0f 92       	push	r0
   1576c:	ed b7       	in	r30, 0x3d	; 61
   1576e:	fe b7       	in	r31, 0x3e	; 62
   15770:	31 96       	adiw	r30, 0x01	; 1
   15772:	ad b7       	in	r26, 0x3d	; 61
   15774:	be b7       	in	r27, 0x3e	; 62
   15776:	11 96       	adiw	r26, 0x01	; 1
   15778:	fc 92       	st	X, r15
   1577a:	e1 82       	std	Z+1, r14	; 0x01
   1577c:	8d e1       	ldi	r24, 0x1D	; 29
   1577e:	96 e1       	ldi	r25, 0x16	; 22
   15780:	82 83       	std	Z+2, r24	; 0x02
   15782:	93 83       	std	Z+3, r25	; 0x03
   15784:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15788:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1578a:	0f 90       	pop	r0
   1578c:	0f 90       	pop	r0
   1578e:	0f 90       	pop	r0
   15790:	0f 90       	pop	r0
   15792:	c8 01       	movw	r24, r16
   15794:	6f 2d       	mov	r22, r15
   15796:	7e 2d       	mov	r23, r14
   15798:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | at a one second rate. The     | and PH4.          |\n\r"));
   1579c:	00 d0       	rcall	.+0      	; 0x1579e <usr_console+0x360>
   1579e:	0f 92       	push	r0
   157a0:	ed b7       	in	r30, 0x3d	; 61
   157a2:	fe b7       	in	r31, 0x3e	; 62
   157a4:	31 96       	adiw	r30, 0x01	; 1
   157a6:	ad b7       	in	r26, 0x3d	; 61
   157a8:	be b7       	in	r27, 0x3e	; 62
   157aa:	11 96       	adiw	r26, 0x01	; 1
   157ac:	fc 92       	st	X, r15
   157ae:	e1 82       	std	Z+1, r14	; 0x01
   157b0:	80 ed       	ldi	r24, 0xD0	; 208
   157b2:	95 e1       	ldi	r25, 0x15	; 21
   157b4:	82 83       	std	Z+2, r24	; 0x02
   157b6:	93 83       	std	Z+3, r25	; 0x03
   157b8:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   157bc:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   157be:	0f 90       	pop	r0
   157c0:	0f 90       	pop	r0
   157c2:	0f 90       	pop	r0
   157c4:	0f 90       	pop	r0
   157c6:	c8 01       	movw	r24, r16
   157c8:	6f 2d       	mov	r22, r15
   157ca:	7e 2d       	mov	r23, r14
   157cc:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | timer toggles GPIO_2 which    |                   |\n\r"));
   157d0:	00 d0       	rcall	.+0      	; 0x157d2 <usr_console+0x394>
   157d2:	0f 92       	push	r0
   157d4:	ed b7       	in	r30, 0x3d	; 61
   157d6:	fe b7       	in	r31, 0x3e	; 62
   157d8:	31 96       	adiw	r30, 0x01	; 1
   157da:	ad b7       	in	r26, 0x3d	; 61
   157dc:	be b7       	in	r27, 0x3e	; 62
   157de:	11 96       	adiw	r26, 0x01	; 1
   157e0:	fc 92       	st	X, r15
   157e2:	e1 82       	std	Z+1, r14	; 0x01
   157e4:	83 e8       	ldi	r24, 0x83	; 131
   157e6:	95 e1       	ldi	r25, 0x15	; 21
   157e8:	82 83       	std	Z+2, r24	; 0x02
   157ea:	93 83       	std	Z+3, r25	; 0x03
   157ec:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   157f0:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   157f2:	0f 90       	pop	r0
   157f4:	0f 90       	pop	r0
   157f6:	0f 90       	pop	r0
   157f8:	0f 90       	pop	r0
   157fa:	c8 01       	movw	r24, r16
   157fc:	6f 2d       	mov	r22, r15
   157fe:	7e 2d       	mov	r23, r14
   15800:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("|                    | causes an interrupt on GPIO_1.|                   |\n\r"));
   15804:	00 d0       	rcall	.+0      	; 0x15806 <usr_console+0x3c8>
   15806:	0f 92       	push	r0
   15808:	ed b7       	in	r30, 0x3d	; 61
   1580a:	fe b7       	in	r31, 0x3e	; 62
   1580c:	31 96       	adiw	r30, 0x01	; 1
   1580e:	ad b7       	in	r26, 0x3d	; 61
   15810:	be b7       	in	r27, 0x3e	; 62
   15812:	11 96       	adiw	r26, 0x01	; 1
   15814:	fc 92       	st	X, r15
   15816:	e1 82       	std	Z+1, r14	; 0x01
   15818:	86 e3       	ldi	r24, 0x36	; 54
   1581a:	95 e1       	ldi	r25, 0x15	; 21
   1581c:	82 83       	std	Z+2, r24	; 0x02
   1581e:	93 83       	std	Z+3, r25	; 0x03
   15820:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15824:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   15826:	0f 90       	pop	r0
   15828:	0f 90       	pop	r0
   1582a:	0f 90       	pop	r0
   1582c:	0f 90       	pop	r0
   1582e:	c8 01       	movw	r24, r16
   15830:	6f 2d       	mov	r22, r15
   15832:	7e 2d       	mov	r23, r14
   15834:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);
   s_size = sprintf_P( (char *)pc_buff, PSTR("'--------------------'-------------------------------'-------------------'\n\r"));
   15838:	00 d0       	rcall	.+0      	; 0x1583a <usr_console+0x3fc>
   1583a:	0f 92       	push	r0
   1583c:	ed b7       	in	r30, 0x3d	; 61
   1583e:	fe b7       	in	r31, 0x3e	; 62
   15840:	31 96       	adiw	r30, 0x01	; 1
   15842:	ad b7       	in	r26, 0x3d	; 61
   15844:	be b7       	in	r27, 0x3e	; 62
   15846:	11 96       	adiw	r26, 0x01	; 1
   15848:	fc 92       	st	X, r15
   1584a:	e1 82       	std	Z+1, r14	; 0x01
   1584c:	89 ee       	ldi	r24, 0xE9	; 233
   1584e:	94 e1       	ldi	r25, 0x14	; 20
   15850:	82 83       	std	Z+2, r24	; 0x02
   15852:	93 83       	std	Z+3, r25	; 0x03
   15854:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15858:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1585a:	0f 90       	pop	r0
   1585c:	0f 90       	pop	r0
   1585e:	0f 90       	pop	r0
   15860:	0f 90       	pop	r0
   15862:	c8 01       	movw	r24, r16
   15864:	6f 2d       	mov	r22, r15
   15866:	7e 2d       	mov	r23, r14
   15868:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
              pc_buff,
              s_size);

   s_size = sprintf_P( (char *)pc_buff, PSTR("Select number of trials (0<->10000), press enter-> "));
   1586c:	00 d0       	rcall	.+0      	; 0x1586e <usr_console+0x430>
   1586e:	0f 92       	push	r0
   15870:	ed b7       	in	r30, 0x3d	; 61
   15872:	fe b7       	in	r31, 0x3e	; 62
   15874:	31 96       	adiw	r30, 0x01	; 1
   15876:	ad b7       	in	r26, 0x3d	; 61
   15878:	be b7       	in	r27, 0x3e	; 62
   1587a:	11 96       	adiw	r26, 0x01	; 1
   1587c:	fc 92       	st	X, r15
   1587e:	e1 82       	std	Z+1, r14	; 0x01
   15880:	85 eb       	ldi	r24, 0xB5	; 181
   15882:	94 e1       	ldi	r25, 0x14	; 20
   15884:	82 83       	std	Z+2, r24	; 0x02
   15886:	93 83       	std	Z+3, r25	; 0x03
   15888:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   1588c:	ac 01       	movw	r20, r24
   arb_write( t_consoleHndl,
   1588e:	0f 90       	pop	r0
   15890:	0f 90       	pop	r0
   15892:	0f 90       	pop	r0
   15894:	0f 90       	pop	r0
   15896:	c8 01       	movw	r24, r16
   15898:	6f 2d       	mov	r22, r15
   1589a:	7e 2d       	mov	r23, r14
   1589c:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   /*------------------------------------------------------------------------*
    * Wait for response. The 'arb_read' method is used instead of 'arb_ioctl'
    * because we are reading the entire contents of the command line without
    * parsing the message into arguments.
    *------------------------------------------------------------------------*/
   s_numTxBytes = arb_read( t_consoleHndl,
   158a0:	45 e0       	ldi	r20, 0x05	; 5
   158a2:	c4 2e       	mov	r12, r20
   158a4:	d1 2c       	mov	r13, r1
   158a6:	cc 0e       	add	r12, r28
   158a8:	dd 1e       	adc	r13, r29
   158aa:	c8 01       	movw	r24, r16
   158ac:	b6 01       	movw	r22, r12
   158ae:	40 e2       	ldi	r20, 0x20	; 32
   158b0:	50 e0       	ldi	r21, 0x00	; 0
   158b2:	0e 94 fc 82 	call	0x105f8	; 0x105f8 <arb_read>
                            ac_buff,
                            (uint16_t)sizeof( ac_buff));

   s_numOfTrials = (int16_t)atoi( (char *)ac_buff);
   158b6:	c6 01       	movw	r24, r12
   158b8:	0e 94 c7 b6 	call	0x16d8e	; 0x16d8e <atoi>
   158bc:	5c 01       	movw	r10, r24
   if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))
   158be:	01 97       	sbiw	r24, 0x01	; 1
   158c0:	80 51       	subi	r24, 0x10	; 16
   158c2:	97 42       	sbci	r25, 0x27	; 39
   158c4:	e0 f0       	brcs	.+56     	; 0x158fe <usr_console+0x4c0>
   {
      s_size = sprintf_P( (char *)pc_buff, PSTR("Invalid CMD\n\r"));
   158c6:	00 d0       	rcall	.+0      	; 0x158c8 <usr_console+0x48a>
   158c8:	0f 92       	push	r0
   158ca:	ed b7       	in	r30, 0x3d	; 61
   158cc:	fe b7       	in	r31, 0x3e	; 62
   158ce:	31 96       	adiw	r30, 0x01	; 1
   158d0:	ad b7       	in	r26, 0x3d	; 61
   158d2:	be b7       	in	r27, 0x3e	; 62
   158d4:	11 96       	adiw	r26, 0x01	; 1
   158d6:	fc 92       	st	X, r15
   158d8:	e1 82       	std	Z+1, r14	; 0x01
   158da:	87 ea       	ldi	r24, 0xA7	; 167
   158dc:	94 e1       	ldi	r25, 0x14	; 20
   158de:	82 83       	std	Z+2, r24	; 0x02
   158e0:	93 83       	std	Z+3, r25	; 0x03
   158e2:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   158e6:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   158e8:	0f 90       	pop	r0
   158ea:	0f 90       	pop	r0
   158ec:	0f 90       	pop	r0
   158ee:	0f 90       	pop	r0
   158f0:	c8 01       	movw	r24, r16
   158f2:	6f 2d       	mov	r22, r15
   158f4:	7e 2d       	mov	r23, r14
   158f6:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>
   158fa:	81 e0       	ldi	r24, 0x01	; 1
   158fc:	69 c0       	rjmp	.+210    	; 0x159d0 <usr_console+0x592>
   }/*End if( (s_numOfTrials <= 0) || (s_numOfTrials > 10000))*/
   else
   {
      int8_t s_count = 0;

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
   158fe:	82 e0       	ldi	r24, 0x02	; 2
   15900:	8d 83       	std	Y+5, r24	; 0x05
      ac_buff[1] = 1; /*Start timer*/
   15902:	9e 82       	std	Y+6, r9	; 0x06
   15904:	00 e0       	ldi	r16, 0x00	; 0
   15906:	10 e0       	ldi	r17, 0x00	; 0
   15908:	c6 01       	movw	r24, r12
   1590a:	dc 2c       	mov	r13, r12
   1590c:	c9 2e       	mov	r12, r25
                                            (uint16_t)sizeof( ac_buff));

            if( s_numRxBytes > 0)
            {

               s_size = sprintf_P( (char *)pc_buff, PSTR("Timer interrupt...\n\r"));
   1590e:	32 e9       	ldi	r19, 0x92	; 146
   15910:	83 2e       	mov	r8, r19
   15912:	34 e1       	ldi	r19, 0x14	; 20
   15914:	93 2e       	mov	r9, r19
   15916:	35 c0       	rjmp	.+106    	; 0x15982 <usr_console+0x544>
         /*------------------------------------------------------------------*
          * Send the message to the platformTest interface where it will
          * be looped between two peripherals and returned to this calling
          * thread with a subsequent mailbox message.
          *------------------------------------------------------------------*/
         s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   15918:	89 81       	ldd	r24, Y+1	; 0x01
   1591a:	9a 81       	ldd	r25, Y+2	; 0x02
   1591c:	6d 2d       	mov	r22, r13
   1591e:	7c 2d       	mov	r23, r12
   15920:	42 e0       	ldi	r20, 0x02	; 2
   15922:	50 e0       	ldi	r21, 0x00	; 0
   15924:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                          2);

         /*---------------------------------------------------------------*
          * Was the message successfully sent?
          *---------------------------------------------------------------*/
         if( s_numTxBytes > 0) /*Yes*/
   15928:	18 16       	cp	r1, r24
   1592a:	19 06       	cpc	r1, r25
   1592c:	24 f5       	brge	.+72     	; 0x15976 <usr_console+0x538>
         {

            /*------------------------------------------------------------*
             * Send the message to the platform test thread
             *------------------------------------------------------------*/
            s_numRxBytes = arb_mailboxRead( t_platTestOutMbx,
   1592e:	8b 81       	ldd	r24, Y+3	; 0x03
   15930:	9c 81       	ldd	r25, Y+4	; 0x04
   15932:	6d 2d       	mov	r22, r13
   15934:	7c 2d       	mov	r23, r12
   15936:	40 e2       	ldi	r20, 0x20	; 32
   15938:	50 e0       	ldi	r21, 0x00	; 0
   1593a:	0e 94 41 89 	call	0x11282	; 0x11282 <arb_mailboxRead>
                                            ac_buff,
                                            (uint16_t)sizeof( ac_buff));

            if( s_numRxBytes > 0)
   1593e:	18 16       	cp	r1, r24
   15940:	19 06       	cpc	r1, r25
   15942:	cc f4       	brge	.+50     	; 0x15976 <usr_console+0x538>
            {

               s_size = sprintf_P( (char *)pc_buff, PSTR("Timer interrupt...\n\r"));
   15944:	00 d0       	rcall	.+0      	; 0x15946 <usr_console+0x508>
   15946:	0f 92       	push	r0
   15948:	ed b7       	in	r30, 0x3d	; 61
   1594a:	fe b7       	in	r31, 0x3e	; 62
   1594c:	31 96       	adiw	r30, 0x01	; 1
   1594e:	ad b7       	in	r26, 0x3d	; 61
   15950:	be b7       	in	r27, 0x3e	; 62
   15952:	11 96       	adiw	r26, 0x01	; 1
   15954:	fc 92       	st	X, r15
   15956:	e1 82       	std	Z+1, r14	; 0x01
   15958:	82 82       	std	Z+2, r8	; 0x02
   1595a:	93 82       	std	Z+3, r9	; 0x03
   1595c:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   15960:	ac 01       	movw	r20, r24
               arb_write( t_consoleHndl,
   15962:	0f 90       	pop	r0
   15964:	0f 90       	pop	r0
   15966:	0f 90       	pop	r0
   15968:	0f 90       	pop	r0
   1596a:	87 2d       	mov	r24, r7
   1596c:	96 2d       	mov	r25, r6
   1596e:	6f 2d       	mov	r22, r15
   15970:	7e 2d       	mov	r23, r14
   15972:	0e 94 34 83 	call	0x10668	; 0x10668 <arb_write>

         }/*End if( s_numTxBytes > 0)*/

         s_count++;

         arb_sleep(1);
   15976:	81 e0       	ldi	r24, 0x01	; 1
   15978:	90 e0       	ldi	r25, 0x00	; 0
   1597a:	0e 94 25 a1 	call	0x1424a	; 0x1424a <arb_sleep>
   1597e:	0f 5f       	subi	r16, 0xFF	; 255
   15980:	1f 4f       	sbci	r17, 0xFF	; 255
      int8_t s_count = 0;

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
      ac_buff[1] = 1; /*Start timer*/

      while( s_count < s_numOfTrials)
   15982:	0a 15       	cp	r16, r10
   15984:	1b 05       	cpc	r17, r11
   15986:	44 f2       	brlt	.-112    	; 0x15918 <usr_console+0x4da>

         arb_sleep(1);

      }/*End while( s_count < s_numOfTrials)*/

      ac_buff[0] = PLAT_TIMER_GPIO_TEST;
   15988:	82 e0       	ldi	r24, 0x02	; 2
   1598a:	8d 83       	std	Y+5, r24	; 0x05
      ac_buff[1] = 0; /*Stop timer*/
   1598c:	1e 82       	std	Y+6, r1	; 0x06

      s_numTxBytes = arb_mailboxWrite( t_platTestInMbx,
   1598e:	89 81       	ldd	r24, Y+1	; 0x01
   15990:	9a 81       	ldd	r25, Y+2	; 0x02
   15992:	6d 2d       	mov	r22, r13
   15994:	7c 2d       	mov	r23, r12
   15996:	42 e0       	ldi	r20, 0x02	; 2
   15998:	50 e0       	ldi	r21, 0x00	; 0
   1599a:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                       ac_buff,
                                       2);

      s_size = sprintf_P( (char *)pc_buff, PSTR("Test finished.\n\r"));
   1599e:	00 d0       	rcall	.+0      	; 0x159a0 <usr_console+0x562>
   159a0:	0f 92       	push	r0
   159a2:	ed b7       	in	r30, 0x3d	; 61
   159a4:	fe b7       	in	r31, 0x3e	; 62
   159a6:	31 96       	adiw	r30, 0x01	; 1
   159a8:	ad b7       	in	r26, 0x3d	; 61
   159aa:	be b7       	in	r27, 0x3e	; 62
   159ac:	11 96       	adiw	r26, 0x01	; 1
   159ae:	fc 92       	st	X, r15
   159b0:	e1 82       	std	Z+1, r14	; 0x01
   159b2:	81 e8       	ldi	r24, 0x81	; 129
   159b4:	94 e1       	ldi	r25, 0x14	; 20
   159b6:	82 83       	std	Z+2, r24	; 0x02
   159b8:	93 83       	std	Z+3, r25	; 0x03
   159ba:	0e 94 ce b8 	call	0x1719c	; 0x1719c <sprintf_P>
   159be:	ac 01       	movw	r20, r24
      arb_write( t_consoleHndl,
   159c0:	0f 90       	pop	r0
   159c2:	0f 90       	pop	r0
   159c4:	0f 90       	pop	r0
   159c6:	0f 90       	pop	r0
   159c8:	87 2d       	mov	r24, r7
   159ca:	96 2d       	mov	r25, r6
   159cc:	92 cf       	rjmp	.-220    	; 0x158f2 <usr_console+0x4b4>
   159ce:	80 e0       	ldi	r24, 0x00	; 0
   /*------------------------------------------------------------------------*
    * Return control over the console to the kernel...
    *------------------------------------------------------------------------*/
   return b_success;

}/*End usr_console*/
   159d0:	a6 96       	adiw	r28, 0x26	; 38
   159d2:	cd bf       	out	0x3d, r28	; 61
   159d4:	de bf       	out	0x3e, r29	; 62
   159d6:	cf 91       	pop	r28
   159d8:	df 91       	pop	r29
   159da:	1f 91       	pop	r17
   159dc:	0f 91       	pop	r16
   159de:	ff 90       	pop	r15
   159e0:	ef 90       	pop	r14
   159e2:	df 90       	pop	r13
   159e4:	cf 90       	pop	r12
   159e6:	bf 90       	pop	r11
   159e8:	af 90       	pop	r10
   159ea:	9f 90       	pop	r9
   159ec:	8f 90       	pop	r8
   159ee:	7f 90       	pop	r7
   159f0:	6f 90       	pop	r6
   159f2:	08 95       	ret

000159f4 <usr_timerTestInterrupt>:
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   159f4:	80 91 e0 06 	lds	r24, 0x06E0
   159f8:	84 ff       	sbrs	r24, 4
   159fa:	04 c0       	rjmp	.+8      	; 0x15a04 <usr_timerTestInterrupt+0x10>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   159fc:	80 e1       	ldi	r24, 0x10	; 16
   159fe:	e0 ee       	ldi	r30, 0xE0	; 224
   15a00:	f6 e0       	ldi	r31, 0x06	; 6
   15a02:	87 83       	std	Z+7, r24	; 0x07
   15a04:	08 95       	ret

00015a06 <usr_getPlatTestInMailbox>:
/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
t_MAILBOXHNDL usr_getPlatTestInMailbox( void)
{
   return gt_platTestObject.t_inMbxHndl;
   15a06:	20 91 c5 25 	lds	r18, 0x25C5
   15a0a:	30 91 c6 25 	lds	r19, 0x25C6
}/*End usr_getPlatTestInMailbox*/
   15a0e:	c9 01       	movw	r24, r18
   15a10:	08 95       	ret

00015a12 <usr_getPlatTestOutMailbox>:

t_MAILBOXHNDL usr_getPlatTestOutMailbox( void)
{
   return gt_platTestObject.t_outMbxHndl;
   15a12:	20 91 c7 25 	lds	r18, 0x25C7
   15a16:	30 91 c8 25 	lds	r19, 0x25C8
}/*End usr_getPlatTestOutMailbox*/
   15a1a:	c9 01       	movw	r24, r18
   15a1c:	08 95       	ret

00015a1e <usr_timerTestGpioInterrupt>:

}/*End usr_timerTestInterrupt*/

static void usr_timerTestGpioInterrupt( t_gpioPort t_port,
                                        uint8_t c_pin)
{
   15a1e:	df 93       	push	r29
   15a20:	cf 93       	push	r28
   15a22:	0f 92       	push	r0
   15a24:	cd b7       	in	r28, 0x3d	; 61
   15a26:	de b7       	in	r29, 0x3e	; 62
   uint8_t ac_temp[1];

   /*------------------------------------------------------------------------*
    * Send the message back to the console...
    *------------------------------------------------------------------------*/
   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15a28:	80 91 c7 25 	lds	r24, 0x25C7
   15a2c:	90 91 c8 25 	lds	r25, 0x25C8
   15a30:	be 01       	movw	r22, r28
   15a32:	6f 5f       	subi	r22, 0xFF	; 255
   15a34:	7f 4f       	sbci	r23, 0xFF	; 255
   15a36:	41 e0       	ldi	r20, 0x01	; 1
   15a38:	50 e0       	ldi	r21, 0x00	; 0
   15a3a:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                  (int8_t *)ac_temp,
                                  (uint16_t)sizeof( ac_temp));

}/*End usr_timerTestGpioInterrupt*/
   15a3e:	0f 90       	pop	r0
   15a40:	cf 91       	pop	r28
   15a42:	df 91       	pop	r29
   15a44:	08 95       	ret

00015a46 <spiMasterComplete>:

static void spiMasterComplete( int8_t *pc_rxData,
                               uint16_t s_length)
{
   15a46:	9c 01       	movw	r18, r24
   15a48:	ab 01       	movw	r20, r22
   int16_t s_numBytes;

   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15a4a:	80 91 c7 25 	lds	r24, 0x25C7
   15a4e:	90 91 c8 25 	lds	r25, 0x25C8
   15a52:	b9 01       	movw	r22, r18
   15a54:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                  pc_rxData,
                                  (uint16_t)s_length);

}/*End spiMasterComplete*/
   15a58:	08 95       	ret

00015a5a <uartRxComplete>:
   return c_return; /*If a read operation from the master return valid data*/

}/*End usr_twiSlaveTransFinished*/

static void uartRxComplete( uint16_t s_size)
{
   15a5a:	0f 93       	push	r16
   15a5c:	1f 93       	push	r17
   15a5e:	ac 01       	movw	r20, r24
   int16_t s_numBytes;

   /*------------------------------------------------------------------------*
    * Send the message back to the console...
    *------------------------------------------------------------------------*/
   s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15a60:	80 91 c7 25 	lds	r24, 0x25C7
   15a64:	90 91 c8 25 	lds	r25, 0x25C8
   15a68:	0c ee       	ldi	r16, 0xEC	; 236
   15a6a:	15 e2       	ldi	r17, 0x25	; 37
   15a6c:	b8 01       	movw	r22, r16
   15a6e:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                  gt_platTestObject.ac_rxData,
                                  s_size);

   memset( (void *)gt_platTestObject.ac_rxData, 0,
   15a72:	88 e1       	ldi	r24, 0x18	; 24
   15a74:	f8 01       	movw	r30, r16
   15a76:	11 92       	st	Z+, r1
   15a78:	8a 95       	dec	r24
   15a7a:	e9 f7       	brne	.-6      	; 0x15a76 <uartRxComplete+0x1c>
   sizeof( gt_platTestObject.ac_rxData));

}/*End uartRxComplete*/
   15a7c:	1f 91       	pop	r17
   15a7e:	0f 91       	pop	r16
   15a80:	08 95       	ret

00015a82 <usr_twiSlaveTransFinished>:

}/*End usr_platformTest*/

static int8_t usr_twiSlaveTransFinished( t_twiStatus t_status,
                                         int8_t c_data)
{
   15a82:	0f 93       	push	r16
   15a84:	1f 93       	push	r17
   int8_t c_return = 0;
   static int8_t c_rxDataPtr = 0;
   int16_t s_numBytes;

   switch( t_status)
   15a86:	84 30       	cpi	r24, 0x04	; 4
   15a88:	19 f0       	breq	.+6      	; 0x15a90 <usr_twiSlaveTransFinished+0xe>
   15a8a:	87 30       	cpi	r24, 0x07	; 7
   15a8c:	39 f5       	brne	.+78     	; 0x15adc <usr_twiSlaveTransFinished+0x5a>
   15a8e:	16 c0       	rjmp	.+44     	; 0x15abc <usr_twiSlaveTransFinished+0x3a>
      case TWI_TRANS_COMPLETE:

         /*------------------------------------------------------------------*
          * Send the message back to the console...
          *------------------------------------------------------------------*/
         s_numBytes = arb_mailboxWrite( gt_platTestObject.t_outMbxHndl,
   15a90:	80 91 c7 25 	lds	r24, 0x25C7
   15a94:	90 91 c8 25 	lds	r25, 0x25C8
   15a98:	0c ee       	ldi	r16, 0xEC	; 236
   15a9a:	15 e2       	ldi	r17, 0x25	; 37
   15a9c:	40 91 b4 25 	lds	r20, 0x25B4
   15aa0:	55 27       	eor	r21, r21
   15aa2:	47 fd       	sbrc	r20, 7
   15aa4:	50 95       	com	r21
   15aa6:	b8 01       	movw	r22, r16
   15aa8:	0e 94 44 88 	call	0x11088	; 0x11088 <arb_mailboxWrite>
                                        gt_platTestObject.ac_rxData,
                                        (uint16_t)c_rxDataPtr);

         c_rxDataPtr = 0;
   15aac:	10 92 b4 25 	sts	0x25B4, r1
         memset( (void *)gt_platTestObject.ac_rxData, 0,
   15ab0:	88 e1       	ldi	r24, 0x18	; 24
   15ab2:	f8 01       	movw	r30, r16
   15ab4:	11 92       	st	Z+, r1
   15ab6:	8a 95       	dec	r24
   15ab8:	e9 f7       	brne	.-6      	; 0x15ab4 <usr_twiSlaveTransFinished+0x32>
   15aba:	10 c0       	rjmp	.+32     	; 0x15adc <usr_twiSlaveTransFinished+0x5a>

      break;/*End TWI_SLAVE_READ*/

      case TWI_SLAVE_WRITE: /*Store byte sent from master*/

         gt_platTestObject.ac_rxData[c_rxDataPtr] = c_data;
   15abc:	80 91 b4 25 	lds	r24, 0x25B4
   15ac0:	e8 2f       	mov	r30, r24
   15ac2:	ff 27       	eor	r31, r31
   15ac4:	e7 fd       	sbrc	r30, 7
   15ac6:	f0 95       	com	r31
   15ac8:	e1 54       	subi	r30, 0x41	; 65
   15aca:	fa 4d       	sbci	r31, 0xDA	; 218
   15acc:	65 a7       	std	Z+45, r22	; 0x2d
         c_rxDataPtr++;
   15ace:	8f 5f       	subi	r24, 0xFF	; 255
   15ad0:	80 93 b4 25 	sts	0x25B4, r24
         if( c_rxDataPtr == MAX_BUFFER_SIZE)
   15ad4:	88 31       	cpi	r24, 0x18	; 24
   15ad6:	11 f4       	brne	.+4      	; 0x15adc <usr_twiSlaveTransFinished+0x5a>
            c_rxDataPtr = 0;
   15ad8:	10 92 b4 25 	sts	0x25B4, r1

   }/*End switch( t_status)*/

   return c_return; /*If a read operation from the master return valid data*/

}/*End usr_twiSlaveTransFinished*/
   15adc:	80 e0       	ldi	r24, 0x00	; 0
   15ade:	1f 91       	pop	r17
   15ae0:	0f 91       	pop	r16
   15ae2:	08 95       	ret

00015ae4 <usr_platformTestInit>:
{
   return gt_platTestObject.t_outMbxHndl;
}/*End usr_getPlatTestOutMailbox*/

void usr_platformTestInit( void)
{
   15ae4:	9f 92       	push	r9
   15ae6:	af 92       	push	r10
   15ae8:	bf 92       	push	r11
   15aea:	cf 92       	push	r12
   15aec:	df 92       	push	r13
   15aee:	ef 92       	push	r14
   15af0:	ff 92       	push	r15
   15af2:	0f 93       	push	r16
   15af4:	1f 93       	push	r17
   15af6:	df 93       	push	r29
   15af8:	cf 93       	push	r28
   15afa:	cd b7       	in	r28, 0x3d	; 61
   15afc:	de b7       	in	r29, 0x3e	; 62
   15afe:	e1 97       	sbiw	r28, 0x31	; 49
   15b00:	cd bf       	out	0x3d, r28	; 61
   15b02:	de bf       	out	0x3e, r29	; 62
   t_mailboxConfig t_mConfig;

   /*------------------------------------------------------------------------*
    * Create a new thread that will provide an interface to the console.
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_platformTest = arb_threadCreate( usr_platformTest,
   15b04:	87 e0       	ldi	r24, 0x07	; 7
   15b06:	9f ea       	ldi	r25, 0xAF	; 175
   15b08:	61 e0       	ldi	r22, 0x01	; 1
   15b0a:	70 e0       	ldi	r23, 0x00	; 0
   15b0c:	40 e0       	ldi	r20, 0x00	; 0
   15b0e:	50 e0       	ldi	r21, 0x00	; 0
   15b10:	20 e0       	ldi	r18, 0x00	; 0
   15b12:	32 e0       	ldi	r19, 0x02	; 2
   15b14:	02 e0       	ldi	r16, 0x02	; 2
   15b16:	0e 94 60 9f 	call	0x13ec0	; 0x13ec0 <arb_threadCreate>
   15b1a:	80 93 bf 25 	sts	0x25BF, r24
   15b1e:	90 93 c0 25 	sts	0x25C0, r25
                                                        1,
                                                        0,
                                                        ARB_STACK_512B,
                                                        2);

   if( gt_platTestObject.t_platformTest < 0)
   15b22:	80 91 bf 25 	lds	r24, 0x25BF
   15b26:	90 91 c0 25 	lds	r25, 0x25C0
   15b2a:	97 fd       	sbrc	r25, 7
   15b2c:	58 c1       	rjmp	.+688    	; 0x15dde <usr_platformTestInit+0x2fa>
   {
      exit(0);

   }/*End if( gt_platTestObject.t_platformTest < 0)*/

gt_platTestObject.t_platformTest2 = arb_threadCreate( usr_platformTest2,
   15b2e:	82 e0       	ldi	r24, 0x02	; 2
   15b30:	9f ea       	ldi	r25, 0xAF	; 175
   15b32:	61 e0       	ldi	r22, 0x01	; 1
   15b34:	70 e0       	ldi	r23, 0x00	; 0
   15b36:	40 e0       	ldi	r20, 0x00	; 0
   15b38:	50 e0       	ldi	r21, 0x00	; 0
   15b3a:	20 e0       	ldi	r18, 0x00	; 0
   15b3c:	31 e0       	ldi	r19, 0x01	; 1
   15b3e:	01 e0       	ldi	r16, 0x01	; 1
   15b40:	0e 94 60 9f 	call	0x13ec0	; 0x13ec0 <arb_threadCreate>
   15b44:	80 93 c1 25 	sts	0x25C1, r24
   15b48:	90 93 c2 25 	sts	0x25C2, r25
                                                      1,
                                                      0,
                                                      ARB_STACK_256B,
                                                      1);

if( gt_platTestObject.t_platformTest2 < 0)
   15b4c:	80 91 c1 25 	lds	r24, 0x25C1
   15b50:	90 91 c2 25 	lds	r25, 0x25C2
   15b54:	97 fd       	sbrc	r25, 7
   15b56:	43 c1       	rjmp	.+646    	; 0x15dde <usr_platformTestInit+0x2fa>
}/*End if( gt_platTestObject.t_platformTest2 < 0)*/

   /*------------------------------------------------------------------------*
    * Create a mailbox for receiving messages from the console.
    *------------------------------------------------------------------------*/
   t_mConfig.s_queueSize  = sizeof( gt_platTestObject.ac_txData);
   15b58:	38 e1       	ldi	r19, 0x18	; 24
   15b5a:	e3 2e       	mov	r14, r19
   15b5c:	f1 2c       	mov	r15, r1
   15b5e:	2e 2d       	mov	r18, r14
   15b60:	ec 86       	std	Y+12, r14	; 0x0c
   15b62:	fd 86       	std	Y+13, r15	; 0x0d
   t_mConfig.s_queueDepth = 2;
   15b64:	02 e0       	ldi	r16, 0x02	; 2
   15b66:	10 e0       	ldi	r17, 0x00	; 0
   15b68:	40 2f       	mov	r20, r16
   15b6a:	0e 87       	std	Y+14, r16	; 0x0e
   15b6c:	1f 87       	std	Y+15, r17	; 0x0f
   t_mConfig.t_writeMode  = BLOCKING;    /*Threads writing block*/
   15b6e:	18 8a       	std	Y+16, r1	; 0x10
   t_mConfig.t_readMode   = NONBLOCKING; /*Threads reading poll*/
   15b70:	99 24       	eor	r9, r9
   15b72:	93 94       	inc	r9
   15b74:	99 8a       	std	Y+17, r9	; 0x11
   t_mConfig.b_wrtFromInt = false;
   15b76:	1a 8a       	std	Y+18, r1	; 0x12
   t_mConfig.b_multRdWr   = false;
   15b78:	1b 8a       	std	Y+19, r1	; 0x13

   gt_platTestObject.t_inMbxHndl = arb_mailboxCreate( t_mConfig);
   15b7a:	3d 85       	ldd	r19, Y+13	; 0x0d
   15b7c:	5f 85       	ldd	r21, Y+15	; 0x0f
   15b7e:	60 e0       	ldi	r22, 0x00	; 0
   15b80:	71 e0       	ldi	r23, 0x01	; 1
   15b82:	80 e0       	ldi	r24, 0x00	; 0
   15b84:	90 e0       	ldi	r25, 0x00	; 0
   15b86:	0e 94 7f 87 	call	0x10efe	; 0x10efe <arb_mailboxCreate>
   15b8a:	80 93 c5 25 	sts	0x25C5, r24
   15b8e:	90 93 c6 25 	sts	0x25C6, r25

   if( gt_platTestObject.t_inMbxHndl < 0)
   15b92:	80 91 c5 25 	lds	r24, 0x25C5
   15b96:	90 91 c6 25 	lds	r25, 0x25C6
   15b9a:	97 fd       	sbrc	r25, 7
   15b9c:	20 c1       	rjmp	.+576    	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   /*------------------------------------------------------------------------*
    * Create a mailbox for sending messages to the console.
    *------------------------------------------------------------------------*/
   t_mConfig.s_queueSize  = sizeof( gt_platTestObject.ac_rxData);
   15b9e:	2e 2d       	mov	r18, r14
   15ba0:	ec 86       	std	Y+12, r14	; 0x0c
   15ba2:	fd 86       	std	Y+13, r15	; 0x0d
   t_mConfig.s_queueDepth = 2;
   15ba4:	40 2f       	mov	r20, r16
   15ba6:	0e 87       	std	Y+14, r16	; 0x0e
   15ba8:	1f 87       	std	Y+15, r17	; 0x0f
   t_mConfig.t_writeMode  = NONBLOCKING; /*Threads writing poll*/
   15baa:	98 8a       	std	Y+16, r9	; 0x10
   t_mConfig.t_readMode   = BLOCKING;    /*Threads reading block*/
   15bac:	19 8a       	std	Y+17, r1	; 0x11
   t_mConfig.b_wrtFromInt = true;
   15bae:	9a 8a       	std	Y+18, r9	; 0x12
   t_mConfig.b_multRdWr   = false;
   15bb0:	1b 8a       	std	Y+19, r1	; 0x13

   gt_platTestObject.t_outMbxHndl = arb_mailboxCreate( t_mConfig);
   15bb2:	3d 85       	ldd	r19, Y+13	; 0x0d
   15bb4:	5f 85       	ldd	r21, Y+15	; 0x0f
   15bb6:	61 e0       	ldi	r22, 0x01	; 1
   15bb8:	70 e0       	ldi	r23, 0x00	; 0
   15bba:	81 e0       	ldi	r24, 0x01	; 1
   15bbc:	90 e0       	ldi	r25, 0x00	; 0
   15bbe:	0e 94 7f 87 	call	0x10efe	; 0x10efe <arb_mailboxCreate>
   15bc2:	80 93 c7 25 	sts	0x25C7, r24
   15bc6:	90 93 c8 25 	sts	0x25C8, r25

   if( gt_platTestObject.t_outMbxHndl < 0)
   15bca:	80 91 c7 25 	lds	r24, 0x25C7
   15bce:	90 91 c8 25 	lds	r25, 0x25C8
   15bd2:	97 fd       	sbrc	r25, 7
   15bd4:	04 c1       	rjmp	.+520    	; 0x15dde <usr_platformTestInit+0x2fa>
   t_uartConfig t_uConf;

   /*------------------------------------------------------------------------*
    * Request access to UART 6
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_uHandle = hal_requestUartChannel( UART_6); /*UART E1*/
   15bd6:	8f e0       	ldi	r24, 0x0F	; 15
   15bd8:	0e 94 4a 59 	call	0xb294	; 0xb294 <hal_requestUartChannel>
   15bdc:	80 93 c3 25 	sts	0x25C3, r24
   15be0:	90 93 c4 25 	sts	0x25C4, r25
   if( gt_platTestObject.t_uHandle < 0)
   15be4:	80 91 c3 25 	lds	r24, 0x25C3
   15be8:	90 91 c4 25 	lds	r25, 0x25C4
   15bec:	97 fd       	sbrc	r25, 7
   15bee:	f7 c0       	rjmp	.+494    	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   t_uConf.t_comMd       = ASYNC;
   15bf0:	1c a2       	std	Y+36, r1	; 0x24
   t_uConf.t_charSz      = CHAR_8BIT;
   15bf2:	83 e0       	ldi	r24, 0x03	; 3
   15bf4:	8d a3       	std	Y+37, r24	; 0x25
   t_uConf.t_parityMd    = NO_PARITY;
   15bf6:	1e a2       	std	Y+38, r1	; 0x26
   t_uConf.t_stopBitMd   = ONE_STOP_BIT;
   15bf8:	1f a2       	std	Y+39, r1	; 0x27
   t_uConf.i_baudRate    = 112500;
   15bfa:	84 e7       	ldi	r24, 0x74	; 116
   15bfc:	97 eb       	ldi	r25, 0xB7	; 183
   15bfe:	a1 e0       	ldi	r26, 0x01	; 1
   15c00:	b0 e0       	ldi	r27, 0x00	; 0
   15c02:	88 a7       	std	Y+40, r24	; 0x28
   15c04:	99 a7       	std	Y+41, r25	; 0x29
   15c06:	aa a7       	std	Y+42, r26	; 0x2a
   15c08:	bb a7       	std	Y+43, r27	; 0x2b
   t_uConf.b_enRxDma     = false;
   15c0a:	1d a6       	std	Y+45, r1	; 0x2d
   t_uConf.b_enTxDma     = false;
   15c0c:	1c a6       	std	Y+44, r1	; 0x2c
   t_uConf.pf_rxCallBack = &uartRxComplete;
   15c0e:	8d e2       	ldi	r24, 0x2D	; 45
   15c10:	9d ea       	ldi	r25, 0xAD	; 173
   15c12:	8e a7       	std	Y+46, r24	; 0x2e
   15c14:	9f a7       	std	Y+47, r25	; 0x2f
   t_uConf.pf_txCallBack = NULL;
   15c16:	18 aa       	std	Y+48, r1	; 0x30
   15c18:	19 aa       	std	Y+49, r1	; 0x31

   /*------------------------------------------------------------------------*
    * Configure UART 6
    *------------------------------------------------------------------------*/
   t_err = hal_configureUartChannel( gt_platTestObject.t_uHandle,
   15c1a:	80 91 c3 25 	lds	r24, 0x25C3
   15c1e:	90 91 c4 25 	lds	r25, 0x25C4
   15c22:	aa 24       	eor	r10, r10
   15c24:	23 e0       	ldi	r18, 0x03	; 3
   15c26:	b2 2e       	mov	r11, r18
   15c28:	cc 24       	eor	r12, r12
   15c2a:	dd 24       	eor	r13, r13
   15c2c:	e8 a4       	ldd	r14, Y+40	; 0x28
   15c2e:	f9 a4       	ldd	r15, Y+41	; 0x29
   15c30:	0a a5       	ldd	r16, Y+42	; 0x2a
   15c32:	1b a5       	ldd	r17, Y+43	; 0x2b
   15c34:	20 e0       	ldi	r18, 0x00	; 0
   15c36:	30 e0       	ldi	r19, 0x00	; 0
   15c38:	4e a5       	ldd	r20, Y+46	; 0x2e
   15c3a:	5f a5       	ldd	r21, Y+47	; 0x2f
   15c3c:	68 a9       	ldd	r22, Y+48	; 0x30
   15c3e:	79 a9       	ldd	r23, Y+49	; 0x31
   15c40:	0e 94 8f 55 	call	0xab1e	; 0xab1e <hal_configureUartChannel>
                                     t_uConf);

   if( t_err < 0)
   15c44:	87 fd       	sbrc	r24, 7
   15c46:	cb c0       	rjmp	.+406    	; 0x15dde <usr_platformTestInit+0x2fa>
   t_twiError t_err;

   /*------------------------------------------------------------------------*
    * Request access to TWI channel 2...
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_twiMaster = hal_requestTwiChannel( TWI_2);
   15c48:	81 e0       	ldi	r24, 0x01	; 1
   15c4a:	0e 94 b6 4f 	call	0x9f6c	; 0x9f6c <hal_requestTwiChannel>
   15c4e:	80 93 cb 25 	sts	0x25CB, r24
   15c52:	90 93 cc 25 	sts	0x25CC, r25

   if( gt_platTestObject.t_twiMaster < 0)
   15c56:	80 91 cb 25 	lds	r24, 0x25CB
   15c5a:	90 91 cc 25 	lds	r25, 0x25CC
   15c5e:	97 fd       	sbrc	r25, 7
   15c60:	be c0       	rjmp	.+380    	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   /*------------------------------------------------------------------------*
    * Configure TWI channel 2 as master...
    *------------------------------------------------------------------------*/
   t_tConfig.t_mode         = TWI_MASTER;
   15c62:	1c 8a       	std	Y+20, r1	; 0x14
   t_tConfig.i_baud         = 400000;
   15c64:	80 e8       	ldi	r24, 0x80	; 128
   15c66:	9a e1       	ldi	r25, 0x1A	; 26
   15c68:	a6 e0       	ldi	r26, 0x06	; 6
   15c6a:	b0 e0       	ldi	r27, 0x00	; 0
   15c6c:	8d 8b       	std	Y+21, r24	; 0x15
   15c6e:	9e 8b       	std	Y+22, r25	; 0x16
   15c70:	af 8b       	std	Y+23, r26	; 0x17
   15c72:	b8 8f       	std	Y+24, r27	; 0x18

   t_err = hal_configureTwiChannel( gt_platTestObject.t_twiMaster,
   15c74:	80 91 cb 25 	lds	r24, 0x25CB
   15c78:	90 91 cc 25 	lds	r25, 0x25CC
   15c7c:	00 e0       	ldi	r16, 0x00	; 0
   15c7e:	1d 89       	ldd	r17, Y+21	; 0x15
   15c80:	2e 89       	ldd	r18, Y+22	; 0x16
   15c82:	3f 89       	ldd	r19, Y+23	; 0x17
   15c84:	48 8d       	ldd	r20, Y+24	; 0x18
   15c86:	59 8d       	ldd	r21, Y+25	; 0x19
   15c88:	6a 8d       	ldd	r22, Y+26	; 0x1a
   15c8a:	7b 8d       	ldd	r23, Y+27	; 0x1b
   15c8c:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <hal_configureTwiChannel>
                                    t_tConfig);

   if( t_err < 0)
   15c90:	87 fd       	sbrc	r24, 7
   15c92:	a5 c0       	rjmp	.+330    	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   /*------------------------------------------------------------------------*
    * Request access to TWI channel 3...
    *------------------------------------------------------------------------*/
   gt_platTestObject.t_twiSlave = hal_requestTwiChannel( TWI_3);
   15c94:	82 e0       	ldi	r24, 0x02	; 2
   15c96:	0e 94 b6 4f 	call	0x9f6c	; 0x9f6c <hal_requestTwiChannel>
   15c9a:	80 93 c9 25 	sts	0x25C9, r24
   15c9e:	90 93 ca 25 	sts	0x25CA, r25

   if( gt_platTestObject.t_twiSlave < 0)
   15ca2:	80 91 c9 25 	lds	r24, 0x25C9
   15ca6:	90 91 ca 25 	lds	r25, 0x25CA
   15caa:	97 fd       	sbrc	r25, 7
   15cac:	98 c0       	rjmp	.+304    	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   t_tConfig.t_mode           = TWI_SLAVE;
   15cae:	9c 8a       	std	Y+20, r9	; 0x14
   t_tConfig.c_slaveAddress   = TWI_SLAVE_ADDRESS;
   15cb0:	8f e7       	ldi	r24, 0x7F	; 127
   15cb2:	89 8f       	std	Y+25, r24	; 0x19
   t_tConfig.pf_transComplete = &usr_twiSlaveTransFinished;
   15cb4:	81 e4       	ldi	r24, 0x41	; 65
   15cb6:	9d ea       	ldi	r25, 0xAD	; 173
   15cb8:	8a 8f       	std	Y+26, r24	; 0x1a
   15cba:	9b 8f       	std	Y+27, r25	; 0x1b

   /*------------------------------------------------------------------------*
    * Configure TWI channel 3 as slave
    *------------------------------------------------------------------------*/
   t_err = hal_configureTwiChannel( gt_platTestObject.t_twiSlave,
   15cbc:	80 91 c9 25 	lds	r24, 0x25C9
   15cc0:	90 91 ca 25 	lds	r25, 0x25CA
   15cc4:	01 e0       	ldi	r16, 0x01	; 1
   15cc6:	1d 89       	ldd	r17, Y+21	; 0x15
   15cc8:	2e 89       	ldd	r18, Y+22	; 0x16
   15cca:	3f 89       	ldd	r19, Y+23	; 0x17
   15ccc:	48 8d       	ldd	r20, Y+24	; 0x18
   15cce:	5f e7       	ldi	r21, 0x7F	; 127
   15cd0:	6a 8d       	ldd	r22, Y+26	; 0x1a
   15cd2:	7b 8d       	ldd	r23, Y+27	; 0x1b
   15cd4:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <hal_configureTwiChannel>
                                    t_tConfig);

   if( t_err < 0)
   15cd8:	87 fd       	sbrc	r24, 7
   15cda:	81 c0       	rjmp	.+258    	; 0x15dde <usr_platformTestInit+0x2fa>

   t_timerConfig t_config;
   t_intConf t_iConf;
   t_gpioConf t_gConf;

   gt_platTestObject.t_tHandle = hal_requestTimer( TIMER_1);
   15cdc:	80 e0       	ldi	r24, 0x00	; 0
   15cde:	0e 94 6f 48 	call	0x90de	; 0x90de <hal_requestTimer>
   15ce2:	80 93 cd 25 	sts	0x25CD, r24
   15ce6:	90 93 ce 25 	sts	0x25CE, r25

   if( gt_platTestObject.t_tHandle < 0)
   15cea:	80 91 cd 25 	lds	r24, 0x25CD
   15cee:	90 91 ce 25 	lds	r25, 0x25CE
   15cf2:	97 fd       	sbrc	r25, 7
   15cf4:	74 c0       	rjmp	.+232    	; 0x15dde <usr_platformTestInit+0x2fa>
   {
      exit(0);
   }/*End if( gt_platTestObject.t_tHandle < 0)*/

   t_config.t_mode   = NORMAL;
   15cf6:	1e 82       	std	Y+6, r1	; 0x06
   t_config.t_dir    = DIRECTION_UP;
   15cf8:	1f 82       	std	Y+7, r1	; 0x07
   t_config.f_period = 1.0f;
   15cfa:	80 e0       	ldi	r24, 0x00	; 0
   15cfc:	90 e0       	ldi	r25, 0x00	; 0
   15cfe:	a0 e8       	ldi	r26, 0x80	; 128
   15d00:	bf e3       	ldi	r27, 0x3F	; 63
   15d02:	88 87       	std	Y+8, r24	; 0x08
   15d04:	99 87       	std	Y+9, r25	; 0x09
   15d06:	aa 87       	std	Y+10, r26	; 0x0a
   15d08:	bb 87       	std	Y+11, r27	; 0x0b

   if( hal_configureTimer( gt_platTestObject.t_tHandle, t_config) < 0)
   15d0a:	80 91 cd 25 	lds	r24, 0x25CD
   15d0e:	90 91 ce 25 	lds	r25, 0x25CE
   15d12:	20 e0       	ldi	r18, 0x00	; 0
   15d14:	30 e0       	ldi	r19, 0x00	; 0
   15d16:	48 85       	ldd	r20, Y+8	; 0x08
   15d18:	59 85       	ldd	r21, Y+9	; 0x09
   15d1a:	6a 85       	ldd	r22, Y+10	; 0x0a
   15d1c:	7b 85       	ldd	r23, Y+11	; 0x0b
   15d1e:	0e 94 12 46 	call	0x8c24	; 0x8c24 <hal_configureTimer>
   15d22:	87 fd       	sbrc	r24, 7
   15d24:	5c c0       	rjmp	.+184    	; 0x15dde <usr_platformTestInit+0x2fa>
   {
      exit(0);
   }

   if( hal_requestTimerInterrupt( gt_platTestObject.t_tHandle,
   15d26:	80 91 cd 25 	lds	r24, 0x25CD
   15d2a:	90 91 ce 25 	lds	r25, 0x25CE
   15d2e:	64 e0       	ldi	r22, 0x04	; 4
   15d30:	4a ef       	ldi	r20, 0xFA	; 250
   15d32:	5c ea       	ldi	r21, 0xAC	; 172
   15d34:	0e 94 1e 49 	call	0x923c	; 0x923c <hal_requestTimerInterrupt>
   15d38:	87 fd       	sbrc	r24, 7
   15d3a:	51 c0       	rjmp	.+162    	; 0x15dde <usr_platformTestInit+0x2fa>
   }

   /*---------------------------------------------------------------*
    * Configure the output pins the test will use.
    *---------------------------------------------------------------*/
   t_gConf.c_inputMask  = PIN_3;
   15d3c:	88 e0       	ldi	r24, 0x08	; 8
   15d3e:	89 83       	std	Y+1, r24	; 0x01
   t_gConf.c_outputMask = PIN_4;
   15d40:	80 e1       	ldi	r24, 0x10	; 16
   15d42:	8a 83       	std	Y+2, r24	; 0x02
   t_gConf.t_inConf     = PULLDOWN;
   15d44:	84 e0       	ldi	r24, 0x04	; 4
   15d46:	8c 83       	std	Y+4, r24	; 0x04
   t_gConf.t_outConf    = TOTEM;
   15d48:	1d 82       	std	Y+5, r1	; 0x05

   if( hal_configureGpioPort( GPIO_PORTH,
   15d4a:	86 e0       	ldi	r24, 0x06	; 6
   15d4c:	28 e0       	ldi	r18, 0x08	; 8
   15d4e:	30 e1       	ldi	r19, 0x10	; 16
   15d50:	4b 81       	ldd	r20, Y+3	; 0x03
   15d52:	54 e0       	ldi	r21, 0x04	; 4
   15d54:	60 e0       	ldi	r22, 0x00	; 0
   15d56:	0e 94 ab 2a 	call	0x5556	; 0x5556 <hal_configureGpioPort>
   15d5a:	87 fd       	sbrc	r24, 7
   15d5c:	40 c0       	rjmp	.+128    	; 0x15dde <usr_platformTestInit+0x2fa>
                              t_gConf) < 0)
   {
      exit(0);
   }

   t_iConf.c_pin     = PIN_3;
   15d5e:	48 e0       	ldi	r20, 0x08	; 8
   15d60:	50 e0       	ldi	r21, 0x00	; 0
   15d62:	60 e0       	ldi	r22, 0x00	; 0
   15d64:	70 e0       	ldi	r23, 0x00	; 0
   t_iConf.t_inSense = GPIO_BOTH_EDGES;
   15d66:	50 e0       	ldi	r21, 0x00	; 0
   t_iConf.pf_funPtr = &usr_timerTestGpioInterrupt;
   15d68:	6f e0       	ldi	r22, 0x0F	; 15
   15d6a:	7d ea       	ldi	r23, 0xAD	; 173

   gt_platTestObject.t_gHandle = hal_requestGpioInt( GPIO_PORTH,
   15d6c:	86 e0       	ldi	r24, 0x06	; 6
   15d6e:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <hal_requestGpioInt>
   15d72:	80 93 cf 25 	sts	0x25CF, r24
   15d76:	90 93 d0 25 	sts	0x25D0, r25
                                                     t_iConf);

   if( gt_platTestObject.t_gHandle < 0)
   15d7a:	80 91 cf 25 	lds	r24, 0x25CF
   15d7e:	90 91 d0 25 	lds	r25, 0x25D0
   15d82:	97 fd       	sbrc	r25, 7
   15d84:	2c c0       	rjmp	.+88     	; 0x15dde <usr_platformTestInit+0x2fa>

static void usr_spiLoopbackTestInit( void)
{
   t_spiConfig t_conf;

   t_conf.i_baudRate = 16000000;
   15d86:	80 e0       	ldi	r24, 0x00	; 0
   15d88:	94 e2       	ldi	r25, 0x24	; 36
   15d8a:	a4 ef       	ldi	r26, 0xF4	; 244
   15d8c:	b0 e0       	ldi	r27, 0x00	; 0
   15d8e:	38 2f       	mov	r19, r24
   15d90:	8f 8f       	std	Y+31, r24	; 0x1f
   15d92:	98 a3       	std	Y+32, r25	; 0x20
   15d94:	a9 a3       	std	Y+33, r26	; 0x21
   15d96:	ba a3       	std	Y+34, r27	; 0x22
   t_conf.t_spiMd    = SPI_MODE_3;
   15d98:	83 e0       	ldi	r24, 0x03	; 3
   15d9a:	8c 8f       	std	Y+28, r24	; 0x1c
   t_conf.t_spiOp    = SPI_MASTER;
   15d9c:	1d 8e       	std	Y+29, r1	; 0x1d
   t_conf.t_spiOrder = SPI_MSB_FIRST;
   15d9e:	81 e0       	ldi	r24, 0x01	; 1
   15da0:	8e 8f       	std	Y+30, r24	; 0x1e
   t_conf.b_enDma    = false;
   15da2:	1b a2       	std	Y+35, r1	; 0x23

   if( hal_configureSpiChannel( SPI_4, t_conf) < 0)
   15da4:	83 e0       	ldi	r24, 0x03	; 3
   15da6:	03 e0       	ldi	r16, 0x03	; 3
   15da8:	10 e0       	ldi	r17, 0x00	; 0
   15daa:	21 e0       	ldi	r18, 0x01	; 1
   15dac:	48 a1       	ldd	r20, Y+32	; 0x20
   15dae:	59 a1       	ldd	r21, Y+33	; 0x21
   15db0:	6a a1       	ldd	r22, Y+34	; 0x22
   15db2:	70 e0       	ldi	r23, 0x00	; 0
   15db4:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <hal_configureSpiChannel>
   15db8:	87 fd       	sbrc	r24, 7
   15dba:	11 c0       	rjmp	.+34     	; 0x15dde <usr_platformTestInit+0x2fa>
      exit(0);

   gt_platTestObject.t_spiMaster = hal_requestSpiChannel( SPI_4,
   15dbc:	83 e0       	ldi	r24, 0x03	; 3
   15dbe:	63 e2       	ldi	r22, 0x23	; 35
   15dc0:	7d ea       	ldi	r23, 0xAD	; 173
   15dc2:	45 e0       	ldi	r20, 0x05	; 5
   15dc4:	20 e1       	ldi	r18, 0x10	; 16
   15dc6:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <hal_requestSpiChannel>
   15dca:	80 93 d1 25 	sts	0x25D1, r24
   15dce:	90 93 d2 25 	sts	0x25D2, r25
                                                          spiMasterComplete,
                                                          GPIO_PORTF,
                                                          PIN_4);
   if( gt_platTestObject.t_spiMaster < 0)
   15dd2:	80 91 d1 25 	lds	r24, 0x25D1
   15dd6:	90 91 d2 25 	lds	r25, 0x25D2
   15dda:	97 ff       	sbrs	r25, 7
   15ddc:	04 c0       	rjmp	.+8      	; 0x15de6 <usr_platformTestInit+0x302>
      exit(0);
   15dde:	80 e0       	ldi	r24, 0x00	; 0
   15de0:	90 e0       	ldi	r25, 0x00	; 0
   15de2:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>

   usr_timerTestInit();

   usr_spiLoopbackTestInit();

}/*End usr_platformTestInit*/
   15de6:	e1 96       	adiw	r28, 0x31	; 49
   15de8:	cd bf       	out	0x3d, r28	; 61
   15dea:	de bf       	out	0x3e, r29	; 62
   15dec:	cf 91       	pop	r28
   15dee:	df 91       	pop	r29
   15df0:	1f 91       	pop	r17
   15df2:	0f 91       	pop	r16
   15df4:	ff 90       	pop	r15
   15df6:	ef 90       	pop	r14
   15df8:	df 90       	pop	r13
   15dfa:	cf 90       	pop	r12
   15dfc:	bf 90       	pop	r11
   15dfe:	af 90       	pop	r10
   15e00:	9f 90       	pop	r9
   15e02:	08 95       	ret

00015e04 <usr_platformTest2>:
                              t_arguments  t_args)
{

   while( RUN_FOREVER)
   {
      arb_sleep(20);
   15e04:	84 e1       	ldi	r24, 0x14	; 20
   15e06:	90 e0       	ldi	r25, 0x00	; 0
   15e08:	0e 94 25 a1 	call	0x1424a	; 0x1424a <arb_sleep>
   15e0c:	fb cf       	rjmp	.-10     	; 0x15e04 <usr_platformTest2>

00015e0e <usr_platformTest>:
   }
}

static void usr_platformTest( t_parameters t_param,
                              t_arguments  t_args)
{
   15e0e:	0f 93       	push	r16
   15e10:	1f 93       	push	r17
   {

      /*---------------------------------------------------------------------*
       * Block until a message is received from the console.
       *---------------------------------------------------------------------*/
      s_numBytes = arb_mailboxRead( gt_platTestObject.t_inMbxHndl,
   15e12:	80 91 c5 25 	lds	r24, 0x25C5
   15e16:	90 91 c6 25 	lds	r25, 0x25C6
   15e1a:	64 ed       	ldi	r22, 0xD4	; 212
   15e1c:	75 e2       	ldi	r23, 0x25	; 37
   15e1e:	48 e1       	ldi	r20, 0x18	; 24
   15e20:	50 e0       	ldi	r21, 0x00	; 0
   15e22:	0e 94 41 89 	call	0x11282	; 0x11282 <arb_mailboxRead>
   15e26:	8c 01       	movw	r16, r24
                                    gt_platTestObject.ac_txData,
                                    (uint16_t)sizeof( gt_platTestObject.
                                    ac_txData));

      if( s_numBytes > 0)
   15e28:	18 16       	cp	r1, r24
   15e2a:	19 06       	cpc	r1, r25
   15e2c:	0c f0       	brlt	.+2      	; 0x15e30 <usr_platformTest+0x22>
   15e2e:	58 c0       	rjmp	.+176    	; 0x15ee0 <usr_platformTest+0xd2>
      {
         s_numMessages = arb_mailboxGetNumMessages( gt_platTestObject.
   15e30:	80 91 c5 25 	lds	r24, 0x25C5
   15e34:	90 91 c6 25 	lds	r25, 0x25C6
   15e38:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <arb_mailboxGetNumMessages>
         t_inMbxHndl);

         switch( gt_platTestObject.ac_txData[0])
   15e3c:	80 91 d4 25 	lds	r24, 0x25D4
   15e40:	81 30       	cpi	r24, 0x01	; 1
   15e42:	01 f1       	breq	.+64     	; 0x15e84 <usr_platformTest+0x76>
   15e44:	82 30       	cpi	r24, 0x02	; 2
   15e46:	1c f4       	brge	.+6      	; 0x15e4e <usr_platformTest+0x40>
   15e48:	88 23       	and	r24, r24
   15e4a:	39 f0       	breq	.+14     	; 0x15e5a <usr_platformTest+0x4c>
   15e4c:	49 c0       	rjmp	.+146    	; 0x15ee0 <usr_platformTest+0xd2>
   15e4e:	82 30       	cpi	r24, 0x02	; 2
   15e50:	51 f1       	breq	.+84     	; 0x15ea6 <usr_platformTest+0x98>
   15e52:	83 30       	cpi	r24, 0x03	; 3
   15e54:	09 f0       	breq	.+2      	; 0x15e58 <usr_platformTest+0x4a>
   15e56:	44 c0       	rjmp	.+136    	; 0x15ee0 <usr_platformTest+0xd2>
   15e58:	38 c0       	rjmp	.+112    	; 0x15eca <usr_platformTest+0xbc>
               /*------------------------------------------------------------*
                * Store the number of bytes received so we know how much
                * the DMA transfered when the message is sent back to the
                * console via the mailbox.
                *------------------------------------------------------------*/
               gt_platTestObject.c_numBytesTrans = s_numBytes;
   15e5a:	00 93 d3 25 	sts	0x25D3, r16

               hal_uartReadBlock( gt_platTestObject.t_uHandle,
   15e5e:	80 91 c3 25 	lds	r24, 0x25C3
   15e62:	90 91 c4 25 	lds	r25, 0x25C4
   15e66:	6c ee       	ldi	r22, 0xEC	; 236
   15e68:	75 e2       	ldi	r23, 0x25	; 37
   15e6a:	a8 01       	movw	r20, r16
   15e6c:	0e 94 af 5b 	call	0xb75e	; 0xb75e <hal_uartReadBlock>
                                  gt_platTestObject.ac_rxData,
                                  s_numBytes);

               hal_uartWriteBlock( gt_platTestObject.t_uHandle,
   15e70:	80 91 c3 25 	lds	r24, 0x25C3
   15e74:	90 91 c4 25 	lds	r25, 0x25C4
   15e78:	64 ed       	ldi	r22, 0xD4	; 212
   15e7a:	75 e2       	ldi	r23, 0x25	; 37
   15e7c:	a8 01       	movw	r20, r16
   15e7e:	0e 94 b8 5a 	call	0xb570	; 0xb570 <hal_uartWriteBlock>
   15e82:	2e c0       	rjmp	.+92     	; 0x15ee0 <usr_platformTest+0xd2>
            case PLAT_TWI_TEST:

               /*------------------------------------------------------------*
                * Write the message from the master TWI to the slave TWI.
                *------------------------------------------------------------*/
               t_tErr = hal_twiMasterWrite( gt_platTestObject.t_twiMaster,
   15e84:	80 91 cb 25 	lds	r24, 0x25CB
   15e88:	90 91 cc 25 	lds	r25, 0x25CC
   15e8c:	64 ed       	ldi	r22, 0xD4	; 212
   15e8e:	75 e2       	ldi	r23, 0x25	; 37
   15e90:	a8 01       	movw	r20, r16
   15e92:	2f e7       	ldi	r18, 0x7F	; 127
   15e94:	00 e0       	ldi	r16, 0x00	; 0
   15e96:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <hal_twiMasterWrite>
                                            ac_txData,
                                            s_numBytes,
                                            TWI_SLAVE_ADDRESS,
                                            0);

               if( t_tErr < 0)
   15e9a:	87 ff       	sbrs	r24, 7
   15e9c:	21 c0       	rjmp	.+66     	; 0x15ee0 <usr_platformTest+0xd2>
                  exit(0);
   15e9e:	80 e0       	ldi	r24, 0x00	; 0
   15ea0:	90 e0       	ldi	r25, 0x00	; 0
   15ea2:	0e 94 e5 b6 	call	0x16dca	; 0x16dca <exit>

            break;/*End case PLAT_TWI_TEST:*/

            case PLAT_TIMER_GPIO_TEST:

               if( gt_platTestObject.ac_txData[1] == 1)
   15ea6:	80 91 d5 25 	lds	r24, 0x25D5
   15eaa:	81 30       	cpi	r24, 0x01	; 1
   15eac:	39 f4       	brne	.+14     	; 0x15ebc <usr_platformTest+0xae>
                  hal_startTimer( gt_platTestObject.t_tHandle);
   15eae:	80 91 cd 25 	lds	r24, 0x25CD
   15eb2:	90 91 ce 25 	lds	r25, 0x25CE
   15eb6:	0e 94 3d 47 	call	0x8e7a	; 0x8e7a <hal_startTimer>
   15eba:	12 c0       	rjmp	.+36     	; 0x15ee0 <usr_platformTest+0xd2>
               else
                  hal_stopTimer( gt_platTestObject.t_tHandle);
   15ebc:	80 91 cd 25 	lds	r24, 0x25CD
   15ec0:	90 91 ce 25 	lds	r25, 0x25CE
   15ec4:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <hal_stopTimer>
   15ec8:	0b c0       	rjmp	.+22     	; 0x15ee0 <usr_platformTest+0xd2>

            break;/*End case PLAT_TIMER_GPIO_TEST:*/

            case PLAT_SPI_TEST:

               t_sErr = hal_spiReadWrite( gt_platTestObject.t_spiMaster,
   15eca:	80 91 d1 25 	lds	r24, 0x25D1
   15ece:	90 91 d2 25 	lds	r25, 0x25D2
   15ed2:	60 e0       	ldi	r22, 0x00	; 0
   15ed4:	44 ed       	ldi	r20, 0xD4	; 212
   15ed6:	55 e2       	ldi	r21, 0x25	; 37
   15ed8:	2c ee       	ldi	r18, 0xEC	; 236
   15eda:	35 e2       	ldi	r19, 0x25	; 37
   15edc:	0e 94 51 39 	call	0x72a2	; 0x72a2 <hal_spiReadWrite>

         }/*End switch( gt_platTestObject.ac_txData[0])*/

      }/*End if( s_numBytes > 0)*/

      arb_sleep(10);
   15ee0:	8a e0       	ldi	r24, 0x0A	; 10
   15ee2:	90 e0       	ldi	r25, 0x00	; 0
   15ee4:	0e 94 25 a1 	call	0x1424a	; 0x1424a <arb_sleep>
   15ee8:	94 cf       	rjmp	.-216    	; 0x15e12 <usr_platformTest+0x4>

00015eea <__subsf3>:
   15eea:	50 58       	subi	r21, 0x80	; 128

00015eec <__addsf3>:
   15eec:	bb 27       	eor	r27, r27
   15eee:	aa 27       	eor	r26, r26
   15ef0:	0e d0       	rcall	.+28     	; 0x15f0e <__addsf3x>
   15ef2:	fd c1       	rjmp	.+1018   	; 0x162ee <__fp_round>
   15ef4:	ee d1       	rcall	.+988    	; 0x162d2 <__fp_pscA>
   15ef6:	30 f0       	brcs	.+12     	; 0x15f04 <__addsf3+0x18>
   15ef8:	f3 d1       	rcall	.+998    	; 0x162e0 <__fp_pscB>
   15efa:	20 f0       	brcs	.+8      	; 0x15f04 <__addsf3+0x18>
   15efc:	31 f4       	brne	.+12     	; 0x15f0a <__addsf3+0x1e>
   15efe:	9f 3f       	cpi	r25, 0xFF	; 255
   15f00:	11 f4       	brne	.+4      	; 0x15f06 <__addsf3+0x1a>
   15f02:	1e f4       	brtc	.+6      	; 0x15f0a <__addsf3+0x1e>
   15f04:	d3 c1       	rjmp	.+934    	; 0x162ac <__fp_nan>
   15f06:	0e f4       	brtc	.+2      	; 0x15f0a <__addsf3+0x1e>
   15f08:	e0 95       	com	r30
   15f0a:	e7 fb       	bst	r30, 7
   15f0c:	c9 c1       	rjmp	.+914    	; 0x162a0 <__fp_inf>

00015f0e <__addsf3x>:
   15f0e:	e9 2f       	mov	r30, r25
   15f10:	ff d1       	rcall	.+1022   	; 0x16310 <__fp_split3>
   15f12:	80 f3       	brcs	.-32     	; 0x15ef4 <__addsf3+0x8>
   15f14:	ba 17       	cp	r27, r26
   15f16:	62 07       	cpc	r22, r18
   15f18:	73 07       	cpc	r23, r19
   15f1a:	84 07       	cpc	r24, r20
   15f1c:	95 07       	cpc	r25, r21
   15f1e:	18 f0       	brcs	.+6      	; 0x15f26 <__addsf3x+0x18>
   15f20:	71 f4       	brne	.+28     	; 0x15f3e <__addsf3x+0x30>
   15f22:	9e f5       	brtc	.+102    	; 0x15f8a <__addsf3x+0x7c>
   15f24:	17 c2       	rjmp	.+1070   	; 0x16354 <__fp_zero>
   15f26:	0e f4       	brtc	.+2      	; 0x15f2a <__addsf3x+0x1c>
   15f28:	e0 95       	com	r30
   15f2a:	0b 2e       	mov	r0, r27
   15f2c:	ba 2f       	mov	r27, r26
   15f2e:	a0 2d       	mov	r26, r0
   15f30:	0b 01       	movw	r0, r22
   15f32:	b9 01       	movw	r22, r18
   15f34:	90 01       	movw	r18, r0
   15f36:	0c 01       	movw	r0, r24
   15f38:	ca 01       	movw	r24, r20
   15f3a:	a0 01       	movw	r20, r0
   15f3c:	11 24       	eor	r1, r1
   15f3e:	ff 27       	eor	r31, r31
   15f40:	59 1b       	sub	r21, r25
   15f42:	99 f0       	breq	.+38     	; 0x15f6a <__addsf3x+0x5c>
   15f44:	59 3f       	cpi	r21, 0xF9	; 249
   15f46:	50 f4       	brcc	.+20     	; 0x15f5c <__addsf3x+0x4e>
   15f48:	50 3e       	cpi	r21, 0xE0	; 224
   15f4a:	68 f1       	brcs	.+90     	; 0x15fa6 <__addsf3x+0x98>
   15f4c:	1a 16       	cp	r1, r26
   15f4e:	f0 40       	sbci	r31, 0x00	; 0
   15f50:	a2 2f       	mov	r26, r18
   15f52:	23 2f       	mov	r18, r19
   15f54:	34 2f       	mov	r19, r20
   15f56:	44 27       	eor	r20, r20
   15f58:	58 5f       	subi	r21, 0xF8	; 248
   15f5a:	f3 cf       	rjmp	.-26     	; 0x15f42 <__addsf3x+0x34>
   15f5c:	46 95       	lsr	r20
   15f5e:	37 95       	ror	r19
   15f60:	27 95       	ror	r18
   15f62:	a7 95       	ror	r26
   15f64:	f0 40       	sbci	r31, 0x00	; 0
   15f66:	53 95       	inc	r21
   15f68:	c9 f7       	brne	.-14     	; 0x15f5c <__addsf3x+0x4e>
   15f6a:	7e f4       	brtc	.+30     	; 0x15f8a <__addsf3x+0x7c>
   15f6c:	1f 16       	cp	r1, r31
   15f6e:	ba 0b       	sbc	r27, r26
   15f70:	62 0b       	sbc	r22, r18
   15f72:	73 0b       	sbc	r23, r19
   15f74:	84 0b       	sbc	r24, r20
   15f76:	ba f0       	brmi	.+46     	; 0x15fa6 <__addsf3x+0x98>
   15f78:	91 50       	subi	r25, 0x01	; 1
   15f7a:	a1 f0       	breq	.+40     	; 0x15fa4 <__addsf3x+0x96>
   15f7c:	ff 0f       	add	r31, r31
   15f7e:	bb 1f       	adc	r27, r27
   15f80:	66 1f       	adc	r22, r22
   15f82:	77 1f       	adc	r23, r23
   15f84:	88 1f       	adc	r24, r24
   15f86:	c2 f7       	brpl	.-16     	; 0x15f78 <__addsf3x+0x6a>
   15f88:	0e c0       	rjmp	.+28     	; 0x15fa6 <__addsf3x+0x98>
   15f8a:	ba 0f       	add	r27, r26
   15f8c:	62 1f       	adc	r22, r18
   15f8e:	73 1f       	adc	r23, r19
   15f90:	84 1f       	adc	r24, r20
   15f92:	48 f4       	brcc	.+18     	; 0x15fa6 <__addsf3x+0x98>
   15f94:	87 95       	ror	r24
   15f96:	77 95       	ror	r23
   15f98:	67 95       	ror	r22
   15f9a:	b7 95       	ror	r27
   15f9c:	f7 95       	ror	r31
   15f9e:	9e 3f       	cpi	r25, 0xFE	; 254
   15fa0:	08 f0       	brcs	.+2      	; 0x15fa4 <__addsf3x+0x96>
   15fa2:	b3 cf       	rjmp	.-154    	; 0x15f0a <__addsf3+0x1e>
   15fa4:	93 95       	inc	r25
   15fa6:	88 0f       	add	r24, r24
   15fa8:	08 f0       	brcs	.+2      	; 0x15fac <__addsf3x+0x9e>
   15faa:	99 27       	eor	r25, r25
   15fac:	ee 0f       	add	r30, r30
   15fae:	97 95       	ror	r25
   15fb0:	87 95       	ror	r24
   15fb2:	08 95       	ret

00015fb4 <__cmpsf2>:
   15fb4:	51 d1       	rcall	.+674    	; 0x16258 <__fp_cmp>
   15fb6:	08 f4       	brcc	.+2      	; 0x15fba <__cmpsf2+0x6>
   15fb8:	81 e0       	ldi	r24, 0x01	; 1
   15fba:	08 95       	ret

00015fbc <__divsf3>:
   15fbc:	0c d0       	rcall	.+24     	; 0x15fd6 <__divsf3x>
   15fbe:	97 c1       	rjmp	.+814    	; 0x162ee <__fp_round>
   15fc0:	8f d1       	rcall	.+798    	; 0x162e0 <__fp_pscB>
   15fc2:	40 f0       	brcs	.+16     	; 0x15fd4 <__divsf3+0x18>
   15fc4:	86 d1       	rcall	.+780    	; 0x162d2 <__fp_pscA>
   15fc6:	30 f0       	brcs	.+12     	; 0x15fd4 <__divsf3+0x18>
   15fc8:	21 f4       	brne	.+8      	; 0x15fd2 <__divsf3+0x16>
   15fca:	5f 3f       	cpi	r21, 0xFF	; 255
   15fcc:	19 f0       	breq	.+6      	; 0x15fd4 <__divsf3+0x18>
   15fce:	68 c1       	rjmp	.+720    	; 0x162a0 <__fp_inf>
   15fd0:	51 11       	cpse	r21, r1
   15fd2:	c1 c1       	rjmp	.+898    	; 0x16356 <__fp_szero>
   15fd4:	6b c1       	rjmp	.+726    	; 0x162ac <__fp_nan>

00015fd6 <__divsf3x>:
   15fd6:	9c d1       	rcall	.+824    	; 0x16310 <__fp_split3>
   15fd8:	98 f3       	brcs	.-26     	; 0x15fc0 <__divsf3+0x4>

00015fda <__divsf3_pse>:
   15fda:	99 23       	and	r25, r25
   15fdc:	c9 f3       	breq	.-14     	; 0x15fd0 <__divsf3+0x14>
   15fde:	55 23       	and	r21, r21
   15fe0:	b1 f3       	breq	.-20     	; 0x15fce <__divsf3+0x12>
   15fe2:	95 1b       	sub	r25, r21
   15fe4:	55 0b       	sbc	r21, r21
   15fe6:	bb 27       	eor	r27, r27
   15fe8:	aa 27       	eor	r26, r26
   15fea:	62 17       	cp	r22, r18
   15fec:	73 07       	cpc	r23, r19
   15fee:	84 07       	cpc	r24, r20
   15ff0:	38 f0       	brcs	.+14     	; 0x16000 <__divsf3_pse+0x26>
   15ff2:	9f 5f       	subi	r25, 0xFF	; 255
   15ff4:	5f 4f       	sbci	r21, 0xFF	; 255
   15ff6:	22 0f       	add	r18, r18
   15ff8:	33 1f       	adc	r19, r19
   15ffa:	44 1f       	adc	r20, r20
   15ffc:	aa 1f       	adc	r26, r26
   15ffe:	a9 f3       	breq	.-22     	; 0x15fea <__divsf3_pse+0x10>
   16000:	33 d0       	rcall	.+102    	; 0x16068 <__divsf3_pse+0x8e>
   16002:	0e 2e       	mov	r0, r30
   16004:	3a f0       	brmi	.+14     	; 0x16014 <__divsf3_pse+0x3a>
   16006:	e0 e8       	ldi	r30, 0x80	; 128
   16008:	30 d0       	rcall	.+96     	; 0x1606a <__divsf3_pse+0x90>
   1600a:	91 50       	subi	r25, 0x01	; 1
   1600c:	50 40       	sbci	r21, 0x00	; 0
   1600e:	e6 95       	lsr	r30
   16010:	00 1c       	adc	r0, r0
   16012:	ca f7       	brpl	.-14     	; 0x16006 <__divsf3_pse+0x2c>
   16014:	29 d0       	rcall	.+82     	; 0x16068 <__divsf3_pse+0x8e>
   16016:	fe 2f       	mov	r31, r30
   16018:	27 d0       	rcall	.+78     	; 0x16068 <__divsf3_pse+0x8e>
   1601a:	66 0f       	add	r22, r22
   1601c:	77 1f       	adc	r23, r23
   1601e:	88 1f       	adc	r24, r24
   16020:	bb 1f       	adc	r27, r27
   16022:	26 17       	cp	r18, r22
   16024:	37 07       	cpc	r19, r23
   16026:	48 07       	cpc	r20, r24
   16028:	ab 07       	cpc	r26, r27
   1602a:	b0 e8       	ldi	r27, 0x80	; 128
   1602c:	09 f0       	breq	.+2      	; 0x16030 <__divsf3_pse+0x56>
   1602e:	bb 0b       	sbc	r27, r27
   16030:	80 2d       	mov	r24, r0
   16032:	bf 01       	movw	r22, r30
   16034:	ff 27       	eor	r31, r31
   16036:	93 58       	subi	r25, 0x83	; 131
   16038:	5f 4f       	sbci	r21, 0xFF	; 255
   1603a:	2a f0       	brmi	.+10     	; 0x16046 <__divsf3_pse+0x6c>
   1603c:	9e 3f       	cpi	r25, 0xFE	; 254
   1603e:	51 05       	cpc	r21, r1
   16040:	68 f0       	brcs	.+26     	; 0x1605c <__divsf3_pse+0x82>
   16042:	2e c1       	rjmp	.+604    	; 0x162a0 <__fp_inf>
   16044:	88 c1       	rjmp	.+784    	; 0x16356 <__fp_szero>
   16046:	5f 3f       	cpi	r21, 0xFF	; 255
   16048:	ec f3       	brlt	.-6      	; 0x16044 <__divsf3_pse+0x6a>
   1604a:	98 3e       	cpi	r25, 0xE8	; 232
   1604c:	dc f3       	brlt	.-10     	; 0x16044 <__divsf3_pse+0x6a>
   1604e:	86 95       	lsr	r24
   16050:	77 95       	ror	r23
   16052:	67 95       	ror	r22
   16054:	b7 95       	ror	r27
   16056:	f7 95       	ror	r31
   16058:	9f 5f       	subi	r25, 0xFF	; 255
   1605a:	c9 f7       	brne	.-14     	; 0x1604e <__divsf3_pse+0x74>
   1605c:	88 0f       	add	r24, r24
   1605e:	91 1d       	adc	r25, r1
   16060:	96 95       	lsr	r25
   16062:	87 95       	ror	r24
   16064:	97 f9       	bld	r25, 7
   16066:	08 95       	ret
   16068:	e1 e0       	ldi	r30, 0x01	; 1
   1606a:	66 0f       	add	r22, r22
   1606c:	77 1f       	adc	r23, r23
   1606e:	88 1f       	adc	r24, r24
   16070:	bb 1f       	adc	r27, r27
   16072:	62 17       	cp	r22, r18
   16074:	73 07       	cpc	r23, r19
   16076:	84 07       	cpc	r24, r20
   16078:	ba 07       	cpc	r27, r26
   1607a:	20 f0       	brcs	.+8      	; 0x16084 <__divsf3_pse+0xaa>
   1607c:	62 1b       	sub	r22, r18
   1607e:	73 0b       	sbc	r23, r19
   16080:	84 0b       	sbc	r24, r20
   16082:	ba 0b       	sbc	r27, r26
   16084:	ee 1f       	adc	r30, r30
   16086:	88 f7       	brcc	.-30     	; 0x1606a <__divsf3_pse+0x90>
   16088:	e0 95       	com	r30
   1608a:	08 95       	ret

0001608c <__fixsfdi>:
   1608c:	be e3       	ldi	r27, 0x3E	; 62
   1608e:	04 d0       	rcall	.+8      	; 0x16098 <__fixunssfdi+0x2>
   16090:	08 f4       	brcc	.+2      	; 0x16094 <__fixsfdi+0x8>
   16092:	90 e8       	ldi	r25, 0x80	; 128
   16094:	08 95       	ret

00016096 <__fixunssfdi>:
   16096:	bf e3       	ldi	r27, 0x3F	; 63
   16098:	22 27       	eor	r18, r18
   1609a:	33 27       	eor	r19, r19
   1609c:	a9 01       	movw	r20, r18
   1609e:	40 d1       	rcall	.+640    	; 0x16320 <__fp_splitA>
   160a0:	58 f1       	brcs	.+86     	; 0x160f8 <__fixunssfdi+0x62>
   160a2:	9f 57       	subi	r25, 0x7F	; 127
   160a4:	40 f1       	brcs	.+80     	; 0x160f6 <__fixunssfdi+0x60>
   160a6:	b9 17       	cp	r27, r25
   160a8:	38 f1       	brcs	.+78     	; 0x160f8 <__fixunssfdi+0x62>
   160aa:	bf e3       	ldi	r27, 0x3F	; 63
   160ac:	b9 1b       	sub	r27, r25
   160ae:	99 27       	eor	r25, r25
   160b0:	b8 50       	subi	r27, 0x08	; 8
   160b2:	3a f4       	brpl	.+14     	; 0x160c2 <__fixunssfdi+0x2c>
   160b4:	66 0f       	add	r22, r22
   160b6:	77 1f       	adc	r23, r23
   160b8:	88 1f       	adc	r24, r24
   160ba:	99 1f       	adc	r25, r25
   160bc:	b3 95       	inc	r27
   160be:	d2 f3       	brmi	.-12     	; 0x160b4 <__fixunssfdi+0x1e>
   160c0:	16 c0       	rjmp	.+44     	; 0x160ee <__fixunssfdi+0x58>
   160c2:	b8 50       	subi	r27, 0x08	; 8
   160c4:	4a f0       	brmi	.+18     	; 0x160d8 <__fixunssfdi+0x42>
   160c6:	23 2f       	mov	r18, r19
   160c8:	34 2f       	mov	r19, r20
   160ca:	45 2f       	mov	r20, r21
   160cc:	56 2f       	mov	r21, r22
   160ce:	67 2f       	mov	r22, r23
   160d0:	78 2f       	mov	r23, r24
   160d2:	88 27       	eor	r24, r24
   160d4:	b8 50       	subi	r27, 0x08	; 8
   160d6:	ba f7       	brpl	.-18     	; 0x160c6 <__fixunssfdi+0x30>
   160d8:	b8 5f       	subi	r27, 0xF8	; 248
   160da:	49 f0       	breq	.+18     	; 0x160ee <__fixunssfdi+0x58>
   160dc:	86 95       	lsr	r24
   160de:	77 95       	ror	r23
   160e0:	67 95       	ror	r22
   160e2:	57 95       	ror	r21
   160e4:	47 95       	ror	r20
   160e6:	37 95       	ror	r19
   160e8:	27 95       	ror	r18
   160ea:	ba 95       	dec	r27
   160ec:	b9 f7       	brne	.-18     	; 0x160dc <__fixunssfdi+0x46>
   160ee:	0e f4       	brtc	.+2      	; 0x160f2 <__fixunssfdi+0x5c>
   160f0:	e0 d0       	rcall	.+448    	; 0x162b2 <__fp_negdi>
   160f2:	88 94       	clc
   160f4:	08 95       	ret
   160f6:	88 94       	clc
   160f8:	60 e0       	ldi	r22, 0x00	; 0
   160fa:	70 e0       	ldi	r23, 0x00	; 0
   160fc:	cb 01       	movw	r24, r22
   160fe:	08 95       	ret

00016100 <__fixsfsi>:
   16100:	04 d0       	rcall	.+8      	; 0x1610a <__fixunssfsi>
   16102:	68 94       	set
   16104:	b1 11       	cpse	r27, r1
   16106:	27 c1       	rjmp	.+590    	; 0x16356 <__fp_szero>
   16108:	08 95       	ret

0001610a <__fixunssfsi>:
   1610a:	0a d1       	rcall	.+532    	; 0x16320 <__fp_splitA>
   1610c:	88 f0       	brcs	.+34     	; 0x16130 <__fixunssfsi+0x26>
   1610e:	9f 57       	subi	r25, 0x7F	; 127
   16110:	90 f0       	brcs	.+36     	; 0x16136 <__fixunssfsi+0x2c>
   16112:	b9 2f       	mov	r27, r25
   16114:	99 27       	eor	r25, r25
   16116:	b7 51       	subi	r27, 0x17	; 23
   16118:	a0 f0       	brcs	.+40     	; 0x16142 <__fixunssfsi+0x38>
   1611a:	d1 f0       	breq	.+52     	; 0x16150 <__fixunssfsi+0x46>
   1611c:	66 0f       	add	r22, r22
   1611e:	77 1f       	adc	r23, r23
   16120:	88 1f       	adc	r24, r24
   16122:	99 1f       	adc	r25, r25
   16124:	1a f0       	brmi	.+6      	; 0x1612c <__fixunssfsi+0x22>
   16126:	ba 95       	dec	r27
   16128:	c9 f7       	brne	.-14     	; 0x1611c <__fixunssfsi+0x12>
   1612a:	12 c0       	rjmp	.+36     	; 0x16150 <__fixunssfsi+0x46>
   1612c:	b1 30       	cpi	r27, 0x01	; 1
   1612e:	81 f0       	breq	.+32     	; 0x16150 <__fixunssfsi+0x46>
   16130:	11 d1       	rcall	.+546    	; 0x16354 <__fp_zero>
   16132:	b1 e0       	ldi	r27, 0x01	; 1
   16134:	08 95       	ret
   16136:	0e c1       	rjmp	.+540    	; 0x16354 <__fp_zero>
   16138:	67 2f       	mov	r22, r23
   1613a:	78 2f       	mov	r23, r24
   1613c:	88 27       	eor	r24, r24
   1613e:	b8 5f       	subi	r27, 0xF8	; 248
   16140:	39 f0       	breq	.+14     	; 0x16150 <__fixunssfsi+0x46>
   16142:	b9 3f       	cpi	r27, 0xF9	; 249
   16144:	cc f3       	brlt	.-14     	; 0x16138 <__fixunssfsi+0x2e>
   16146:	86 95       	lsr	r24
   16148:	77 95       	ror	r23
   1614a:	67 95       	ror	r22
   1614c:	b3 95       	inc	r27
   1614e:	d9 f7       	brne	.-10     	; 0x16146 <__fixunssfsi+0x3c>
   16150:	3e f4       	brtc	.+14     	; 0x16160 <__fixunssfsi+0x56>
   16152:	90 95       	com	r25
   16154:	80 95       	com	r24
   16156:	70 95       	com	r23
   16158:	61 95       	neg	r22
   1615a:	7f 4f       	sbci	r23, 0xFF	; 255
   1615c:	8f 4f       	sbci	r24, 0xFF	; 255
   1615e:	9f 4f       	sbci	r25, 0xFF	; 255
   16160:	08 95       	ret

00016162 <__floatunsisf>:
   16162:	e8 94       	clt
   16164:	09 c0       	rjmp	.+18     	; 0x16178 <__floatsisf+0x12>

00016166 <__floatsisf>:
   16166:	97 fb       	bst	r25, 7
   16168:	3e f4       	brtc	.+14     	; 0x16178 <__floatsisf+0x12>
   1616a:	90 95       	com	r25
   1616c:	80 95       	com	r24
   1616e:	70 95       	com	r23
   16170:	61 95       	neg	r22
   16172:	7f 4f       	sbci	r23, 0xFF	; 255
   16174:	8f 4f       	sbci	r24, 0xFF	; 255
   16176:	9f 4f       	sbci	r25, 0xFF	; 255
   16178:	99 23       	and	r25, r25
   1617a:	a9 f0       	breq	.+42     	; 0x161a6 <__floatsisf+0x40>
   1617c:	f9 2f       	mov	r31, r25
   1617e:	96 e9       	ldi	r25, 0x96	; 150
   16180:	bb 27       	eor	r27, r27
   16182:	93 95       	inc	r25
   16184:	f6 95       	lsr	r31
   16186:	87 95       	ror	r24
   16188:	77 95       	ror	r23
   1618a:	67 95       	ror	r22
   1618c:	b7 95       	ror	r27
   1618e:	f1 11       	cpse	r31, r1
   16190:	f8 cf       	rjmp	.-16     	; 0x16182 <__floatsisf+0x1c>
   16192:	fa f4       	brpl	.+62     	; 0x161d2 <__floatsisf+0x6c>
   16194:	bb 0f       	add	r27, r27
   16196:	11 f4       	brne	.+4      	; 0x1619c <__floatsisf+0x36>
   16198:	60 ff       	sbrs	r22, 0
   1619a:	1b c0       	rjmp	.+54     	; 0x161d2 <__floatsisf+0x6c>
   1619c:	6f 5f       	subi	r22, 0xFF	; 255
   1619e:	7f 4f       	sbci	r23, 0xFF	; 255
   161a0:	8f 4f       	sbci	r24, 0xFF	; 255
   161a2:	9f 4f       	sbci	r25, 0xFF	; 255
   161a4:	16 c0       	rjmp	.+44     	; 0x161d2 <__floatsisf+0x6c>
   161a6:	88 23       	and	r24, r24
   161a8:	11 f0       	breq	.+4      	; 0x161ae <__floatsisf+0x48>
   161aa:	96 e9       	ldi	r25, 0x96	; 150
   161ac:	11 c0       	rjmp	.+34     	; 0x161d0 <__floatsisf+0x6a>
   161ae:	77 23       	and	r23, r23
   161b0:	21 f0       	breq	.+8      	; 0x161ba <__floatsisf+0x54>
   161b2:	9e e8       	ldi	r25, 0x8E	; 142
   161b4:	87 2f       	mov	r24, r23
   161b6:	76 2f       	mov	r23, r22
   161b8:	05 c0       	rjmp	.+10     	; 0x161c4 <__floatsisf+0x5e>
   161ba:	66 23       	and	r22, r22
   161bc:	71 f0       	breq	.+28     	; 0x161da <__floatsisf+0x74>
   161be:	96 e8       	ldi	r25, 0x86	; 134
   161c0:	86 2f       	mov	r24, r22
   161c2:	70 e0       	ldi	r23, 0x00	; 0
   161c4:	60 e0       	ldi	r22, 0x00	; 0
   161c6:	2a f0       	brmi	.+10     	; 0x161d2 <__floatsisf+0x6c>
   161c8:	9a 95       	dec	r25
   161ca:	66 0f       	add	r22, r22
   161cc:	77 1f       	adc	r23, r23
   161ce:	88 1f       	adc	r24, r24
   161d0:	da f7       	brpl	.-10     	; 0x161c8 <__floatsisf+0x62>
   161d2:	88 0f       	add	r24, r24
   161d4:	96 95       	lsr	r25
   161d6:	87 95       	ror	r24
   161d8:	97 f9       	bld	r25, 7
   161da:	08 95       	ret

000161dc <__floatundisf>:
   161dc:	e8 94       	clt

000161de <__fp_di2sf>:
   161de:	f9 2f       	mov	r31, r25
   161e0:	96 eb       	ldi	r25, 0xB6	; 182
   161e2:	ff 23       	and	r31, r31
   161e4:	81 f0       	breq	.+32     	; 0x16206 <__fp_di2sf+0x28>
   161e6:	12 16       	cp	r1, r18
   161e8:	13 06       	cpc	r1, r19
   161ea:	14 06       	cpc	r1, r20
   161ec:	44 0b       	sbc	r20, r20
   161ee:	93 95       	inc	r25
   161f0:	f6 95       	lsr	r31
   161f2:	87 95       	ror	r24
   161f4:	77 95       	ror	r23
   161f6:	67 95       	ror	r22
   161f8:	57 95       	ror	r21
   161fa:	40 40       	sbci	r20, 0x00	; 0
   161fc:	ff 23       	and	r31, r31
   161fe:	b9 f7       	brne	.-18     	; 0x161ee <__fp_di2sf+0x10>
   16200:	1b c0       	rjmp	.+54     	; 0x16238 <__fp_di2sf+0x5a>
   16202:	99 27       	eor	r25, r25
   16204:	08 95       	ret
   16206:	88 23       	and	r24, r24
   16208:	51 f4       	brne	.+20     	; 0x1621e <__fp_di2sf+0x40>
   1620a:	98 50       	subi	r25, 0x08	; 8
   1620c:	d2 f7       	brpl	.-12     	; 0x16202 <__fp_di2sf+0x24>
   1620e:	87 2b       	or	r24, r23
   16210:	76 2f       	mov	r23, r22
   16212:	65 2f       	mov	r22, r21
   16214:	54 2f       	mov	r21, r20
   16216:	43 2f       	mov	r20, r19
   16218:	32 2f       	mov	r19, r18
   1621a:	20 e0       	ldi	r18, 0x00	; 0
   1621c:	b1 f3       	breq	.-20     	; 0x1620a <__fp_di2sf+0x2c>
   1621e:	12 16       	cp	r1, r18
   16220:	13 06       	cpc	r1, r19
   16222:	14 06       	cpc	r1, r20
   16224:	44 0b       	sbc	r20, r20
   16226:	88 23       	and	r24, r24
   16228:	3a f0       	brmi	.+14     	; 0x16238 <__fp_di2sf+0x5a>
   1622a:	9a 95       	dec	r25
   1622c:	44 0f       	add	r20, r20
   1622e:	55 1f       	adc	r21, r21
   16230:	66 1f       	adc	r22, r22
   16232:	77 1f       	adc	r23, r23
   16234:	88 1f       	adc	r24, r24
   16236:	ca f7       	brpl	.-14     	; 0x1622a <__fp_di2sf+0x4c>
   16238:	55 23       	and	r21, r21
   1623a:	4a f4       	brpl	.+18     	; 0x1624e <__fp_di2sf+0x70>
   1623c:	44 0f       	add	r20, r20
   1623e:	55 1f       	adc	r21, r21
   16240:	11 f4       	brne	.+4      	; 0x16246 <__fp_di2sf+0x68>
   16242:	60 ff       	sbrs	r22, 0
   16244:	04 c0       	rjmp	.+8      	; 0x1624e <__fp_di2sf+0x70>
   16246:	6f 5f       	subi	r22, 0xFF	; 255
   16248:	7f 4f       	sbci	r23, 0xFF	; 255
   1624a:	8f 4f       	sbci	r24, 0xFF	; 255
   1624c:	9f 4f       	sbci	r25, 0xFF	; 255
   1624e:	88 0f       	add	r24, r24
   16250:	96 95       	lsr	r25
   16252:	87 95       	ror	r24
   16254:	97 f9       	bld	r25, 7
   16256:	08 95       	ret

00016258 <__fp_cmp>:
   16258:	99 0f       	add	r25, r25
   1625a:	00 08       	sbc	r0, r0
   1625c:	55 0f       	add	r21, r21
   1625e:	aa 0b       	sbc	r26, r26
   16260:	e0 e8       	ldi	r30, 0x80	; 128
   16262:	fe ef       	ldi	r31, 0xFE	; 254
   16264:	16 16       	cp	r1, r22
   16266:	17 06       	cpc	r1, r23
   16268:	e8 07       	cpc	r30, r24
   1626a:	f9 07       	cpc	r31, r25
   1626c:	c0 f0       	brcs	.+48     	; 0x1629e <__fp_cmp+0x46>
   1626e:	12 16       	cp	r1, r18
   16270:	13 06       	cpc	r1, r19
   16272:	e4 07       	cpc	r30, r20
   16274:	f5 07       	cpc	r31, r21
   16276:	98 f0       	brcs	.+38     	; 0x1629e <__fp_cmp+0x46>
   16278:	62 1b       	sub	r22, r18
   1627a:	73 0b       	sbc	r23, r19
   1627c:	84 0b       	sbc	r24, r20
   1627e:	95 0b       	sbc	r25, r21
   16280:	39 f4       	brne	.+14     	; 0x16290 <__fp_cmp+0x38>
   16282:	0a 26       	eor	r0, r26
   16284:	61 f0       	breq	.+24     	; 0x1629e <__fp_cmp+0x46>
   16286:	23 2b       	or	r18, r19
   16288:	24 2b       	or	r18, r20
   1628a:	25 2b       	or	r18, r21
   1628c:	21 f4       	brne	.+8      	; 0x16296 <__fp_cmp+0x3e>
   1628e:	08 95       	ret
   16290:	0a 26       	eor	r0, r26
   16292:	09 f4       	brne	.+2      	; 0x16296 <__fp_cmp+0x3e>
   16294:	a1 40       	sbci	r26, 0x01	; 1
   16296:	a6 95       	lsr	r26
   16298:	8f ef       	ldi	r24, 0xFF	; 255
   1629a:	81 1d       	adc	r24, r1
   1629c:	81 1d       	adc	r24, r1
   1629e:	08 95       	ret

000162a0 <__fp_inf>:
   162a0:	97 f9       	bld	r25, 7
   162a2:	9f 67       	ori	r25, 0x7F	; 127
   162a4:	80 e8       	ldi	r24, 0x80	; 128
   162a6:	70 e0       	ldi	r23, 0x00	; 0
   162a8:	60 e0       	ldi	r22, 0x00	; 0
   162aa:	08 95       	ret

000162ac <__fp_nan>:
   162ac:	9f ef       	ldi	r25, 0xFF	; 255
   162ae:	80 ec       	ldi	r24, 0xC0	; 192
   162b0:	08 95       	ret

000162b2 <__fp_negdi>:
   162b2:	90 95       	com	r25
   162b4:	80 95       	com	r24
   162b6:	70 95       	com	r23
   162b8:	60 95       	com	r22
   162ba:	50 95       	com	r21
   162bc:	40 95       	com	r20
   162be:	30 95       	com	r19
   162c0:	21 95       	neg	r18
   162c2:	3f 4f       	sbci	r19, 0xFF	; 255
   162c4:	4f 4f       	sbci	r20, 0xFF	; 255
   162c6:	5f 4f       	sbci	r21, 0xFF	; 255
   162c8:	6f 4f       	sbci	r22, 0xFF	; 255
   162ca:	7f 4f       	sbci	r23, 0xFF	; 255
   162cc:	8f 4f       	sbci	r24, 0xFF	; 255
   162ce:	9f 4f       	sbci	r25, 0xFF	; 255
   162d0:	08 95       	ret

000162d2 <__fp_pscA>:
   162d2:	00 24       	eor	r0, r0
   162d4:	0a 94       	dec	r0
   162d6:	16 16       	cp	r1, r22
   162d8:	17 06       	cpc	r1, r23
   162da:	18 06       	cpc	r1, r24
   162dc:	09 06       	cpc	r0, r25
   162de:	08 95       	ret

000162e0 <__fp_pscB>:
   162e0:	00 24       	eor	r0, r0
   162e2:	0a 94       	dec	r0
   162e4:	12 16       	cp	r1, r18
   162e6:	13 06       	cpc	r1, r19
   162e8:	14 06       	cpc	r1, r20
   162ea:	05 06       	cpc	r0, r21
   162ec:	08 95       	ret

000162ee <__fp_round>:
   162ee:	09 2e       	mov	r0, r25
   162f0:	03 94       	inc	r0
   162f2:	00 0c       	add	r0, r0
   162f4:	11 f4       	brne	.+4      	; 0x162fa <__fp_round+0xc>
   162f6:	88 23       	and	r24, r24
   162f8:	52 f0       	brmi	.+20     	; 0x1630e <__fp_round+0x20>
   162fa:	bb 0f       	add	r27, r27
   162fc:	40 f4       	brcc	.+16     	; 0x1630e <__fp_round+0x20>
   162fe:	bf 2b       	or	r27, r31
   16300:	11 f4       	brne	.+4      	; 0x16306 <__fp_round+0x18>
   16302:	60 ff       	sbrs	r22, 0
   16304:	04 c0       	rjmp	.+8      	; 0x1630e <__fp_round+0x20>
   16306:	6f 5f       	subi	r22, 0xFF	; 255
   16308:	7f 4f       	sbci	r23, 0xFF	; 255
   1630a:	8f 4f       	sbci	r24, 0xFF	; 255
   1630c:	9f 4f       	sbci	r25, 0xFF	; 255
   1630e:	08 95       	ret

00016310 <__fp_split3>:
   16310:	57 fd       	sbrc	r21, 7
   16312:	90 58       	subi	r25, 0x80	; 128
   16314:	44 0f       	add	r20, r20
   16316:	55 1f       	adc	r21, r21
   16318:	59 f0       	breq	.+22     	; 0x16330 <__fp_splitA+0x10>
   1631a:	5f 3f       	cpi	r21, 0xFF	; 255
   1631c:	71 f0       	breq	.+28     	; 0x1633a <__fp_splitA+0x1a>
   1631e:	47 95       	ror	r20

00016320 <__fp_splitA>:
   16320:	88 0f       	add	r24, r24
   16322:	97 fb       	bst	r25, 7
   16324:	99 1f       	adc	r25, r25
   16326:	61 f0       	breq	.+24     	; 0x16340 <__fp_splitA+0x20>
   16328:	9f 3f       	cpi	r25, 0xFF	; 255
   1632a:	79 f0       	breq	.+30     	; 0x1634a <__fp_splitA+0x2a>
   1632c:	87 95       	ror	r24
   1632e:	08 95       	ret
   16330:	12 16       	cp	r1, r18
   16332:	13 06       	cpc	r1, r19
   16334:	14 06       	cpc	r1, r20
   16336:	55 1f       	adc	r21, r21
   16338:	f2 cf       	rjmp	.-28     	; 0x1631e <__fp_split3+0xe>
   1633a:	46 95       	lsr	r20
   1633c:	f1 df       	rcall	.-30     	; 0x16320 <__fp_splitA>
   1633e:	08 c0       	rjmp	.+16     	; 0x16350 <__fp_splitA+0x30>
   16340:	16 16       	cp	r1, r22
   16342:	17 06       	cpc	r1, r23
   16344:	18 06       	cpc	r1, r24
   16346:	99 1f       	adc	r25, r25
   16348:	f1 cf       	rjmp	.-30     	; 0x1632c <__fp_splitA+0xc>
   1634a:	86 95       	lsr	r24
   1634c:	71 05       	cpc	r23, r1
   1634e:	61 05       	cpc	r22, r1
   16350:	08 94       	sec
   16352:	08 95       	ret

00016354 <__fp_zero>:
   16354:	e8 94       	clt

00016356 <__fp_szero>:
   16356:	bb 27       	eor	r27, r27
   16358:	66 27       	eor	r22, r22
   1635a:	77 27       	eor	r23, r23
   1635c:	cb 01       	movw	r24, r22
   1635e:	97 f9       	bld	r25, 7
   16360:	08 95       	ret

00016362 <__gesf2>:
   16362:	7a df       	rcall	.-268    	; 0x16258 <__fp_cmp>
   16364:	08 f4       	brcc	.+2      	; 0x16368 <__gesf2+0x6>
   16366:	8f ef       	ldi	r24, 0xFF	; 255
   16368:	08 95       	ret

0001636a <__mulsf3>:
   1636a:	0b d0       	rcall	.+22     	; 0x16382 <__mulsf3x>
   1636c:	c0 cf       	rjmp	.-128    	; 0x162ee <__fp_round>
   1636e:	b1 df       	rcall	.-158    	; 0x162d2 <__fp_pscA>
   16370:	28 f0       	brcs	.+10     	; 0x1637c <__mulsf3+0x12>
   16372:	b6 df       	rcall	.-148    	; 0x162e0 <__fp_pscB>
   16374:	18 f0       	brcs	.+6      	; 0x1637c <__mulsf3+0x12>
   16376:	95 23       	and	r25, r21
   16378:	09 f0       	breq	.+2      	; 0x1637c <__mulsf3+0x12>
   1637a:	92 cf       	rjmp	.-220    	; 0x162a0 <__fp_inf>
   1637c:	97 cf       	rjmp	.-210    	; 0x162ac <__fp_nan>
   1637e:	11 24       	eor	r1, r1
   16380:	ea cf       	rjmp	.-44     	; 0x16356 <__fp_szero>

00016382 <__mulsf3x>:
   16382:	c6 df       	rcall	.-116    	; 0x16310 <__fp_split3>
   16384:	a0 f3       	brcs	.-24     	; 0x1636e <__mulsf3+0x4>

00016386 <__mulsf3_pse>:
   16386:	95 9f       	mul	r25, r21
   16388:	d1 f3       	breq	.-12     	; 0x1637e <__mulsf3+0x14>
   1638a:	95 0f       	add	r25, r21
   1638c:	50 e0       	ldi	r21, 0x00	; 0
   1638e:	55 1f       	adc	r21, r21
   16390:	62 9f       	mul	r22, r18
   16392:	f0 01       	movw	r30, r0
   16394:	72 9f       	mul	r23, r18
   16396:	bb 27       	eor	r27, r27
   16398:	f0 0d       	add	r31, r0
   1639a:	b1 1d       	adc	r27, r1
   1639c:	63 9f       	mul	r22, r19
   1639e:	aa 27       	eor	r26, r26
   163a0:	f0 0d       	add	r31, r0
   163a2:	b1 1d       	adc	r27, r1
   163a4:	aa 1f       	adc	r26, r26
   163a6:	64 9f       	mul	r22, r20
   163a8:	66 27       	eor	r22, r22
   163aa:	b0 0d       	add	r27, r0
   163ac:	a1 1d       	adc	r26, r1
   163ae:	66 1f       	adc	r22, r22
   163b0:	82 9f       	mul	r24, r18
   163b2:	22 27       	eor	r18, r18
   163b4:	b0 0d       	add	r27, r0
   163b6:	a1 1d       	adc	r26, r1
   163b8:	62 1f       	adc	r22, r18
   163ba:	73 9f       	mul	r23, r19
   163bc:	b0 0d       	add	r27, r0
   163be:	a1 1d       	adc	r26, r1
   163c0:	62 1f       	adc	r22, r18
   163c2:	83 9f       	mul	r24, r19
   163c4:	a0 0d       	add	r26, r0
   163c6:	61 1d       	adc	r22, r1
   163c8:	22 1f       	adc	r18, r18
   163ca:	74 9f       	mul	r23, r20
   163cc:	33 27       	eor	r19, r19
   163ce:	a0 0d       	add	r26, r0
   163d0:	61 1d       	adc	r22, r1
   163d2:	23 1f       	adc	r18, r19
   163d4:	84 9f       	mul	r24, r20
   163d6:	60 0d       	add	r22, r0
   163d8:	21 1d       	adc	r18, r1
   163da:	82 2f       	mov	r24, r18
   163dc:	76 2f       	mov	r23, r22
   163de:	6a 2f       	mov	r22, r26
   163e0:	11 24       	eor	r1, r1
   163e2:	9f 57       	subi	r25, 0x7F	; 127
   163e4:	50 40       	sbci	r21, 0x00	; 0
   163e6:	8a f0       	brmi	.+34     	; 0x1640a <__mulsf3_pse+0x84>
   163e8:	e1 f0       	breq	.+56     	; 0x16422 <__mulsf3_pse+0x9c>
   163ea:	88 23       	and	r24, r24
   163ec:	4a f0       	brmi	.+18     	; 0x16400 <__mulsf3_pse+0x7a>
   163ee:	ee 0f       	add	r30, r30
   163f0:	ff 1f       	adc	r31, r31
   163f2:	bb 1f       	adc	r27, r27
   163f4:	66 1f       	adc	r22, r22
   163f6:	77 1f       	adc	r23, r23
   163f8:	88 1f       	adc	r24, r24
   163fa:	91 50       	subi	r25, 0x01	; 1
   163fc:	50 40       	sbci	r21, 0x00	; 0
   163fe:	a9 f7       	brne	.-22     	; 0x163ea <__mulsf3_pse+0x64>
   16400:	9e 3f       	cpi	r25, 0xFE	; 254
   16402:	51 05       	cpc	r21, r1
   16404:	70 f0       	brcs	.+28     	; 0x16422 <__mulsf3_pse+0x9c>
   16406:	4c cf       	rjmp	.-360    	; 0x162a0 <__fp_inf>
   16408:	a6 cf       	rjmp	.-180    	; 0x16356 <__fp_szero>
   1640a:	5f 3f       	cpi	r21, 0xFF	; 255
   1640c:	ec f3       	brlt	.-6      	; 0x16408 <__mulsf3_pse+0x82>
   1640e:	98 3e       	cpi	r25, 0xE8	; 232
   16410:	dc f3       	brlt	.-10     	; 0x16408 <__mulsf3_pse+0x82>
   16412:	86 95       	lsr	r24
   16414:	77 95       	ror	r23
   16416:	67 95       	ror	r22
   16418:	b7 95       	ror	r27
   1641a:	f7 95       	ror	r31
   1641c:	e7 95       	ror	r30
   1641e:	9f 5f       	subi	r25, 0xFF	; 255
   16420:	c1 f7       	brne	.-16     	; 0x16412 <__mulsf3_pse+0x8c>
   16422:	fe 2b       	or	r31, r30
   16424:	88 0f       	add	r24, r24
   16426:	91 1d       	adc	r25, r1
   16428:	96 95       	lsr	r25
   1642a:	87 95       	ror	r24
   1642c:	97 f9       	bld	r25, 7
   1642e:	08 95       	ret

00016430 <vfprintf>:
   16430:	2f 92       	push	r2
   16432:	3f 92       	push	r3
   16434:	4f 92       	push	r4
   16436:	5f 92       	push	r5
   16438:	6f 92       	push	r6
   1643a:	7f 92       	push	r7
   1643c:	8f 92       	push	r8
   1643e:	9f 92       	push	r9
   16440:	af 92       	push	r10
   16442:	bf 92       	push	r11
   16444:	cf 92       	push	r12
   16446:	df 92       	push	r13
   16448:	ef 92       	push	r14
   1644a:	ff 92       	push	r15
   1644c:	0f 93       	push	r16
   1644e:	1f 93       	push	r17
   16450:	df 93       	push	r29
   16452:	cf 93       	push	r28
   16454:	cd b7       	in	r28, 0x3d	; 61
   16456:	de b7       	in	r29, 0x3e	; 62
   16458:	61 97       	sbiw	r28, 0x11	; 17
   1645a:	cd bf       	out	0x3d, r28	; 61
   1645c:	de bf       	out	0x3e, r29	; 62
   1645e:	3c 01       	movw	r6, r24
   16460:	6e 87       	std	Y+14, r22	; 0x0e
   16462:	7f 87       	std	Y+15, r23	; 0x0f
   16464:	6a 01       	movw	r12, r20
   16466:	fc 01       	movw	r30, r24
   16468:	16 82       	std	Z+6, r1	; 0x06
   1646a:	17 82       	std	Z+7, r1	; 0x07
   1646c:	83 81       	ldd	r24, Z+3	; 0x03
   1646e:	81 fd       	sbrc	r24, 1
   16470:	03 c0       	rjmp	.+6      	; 0x16478 <vfprintf+0x48>
   16472:	6f ef       	ldi	r22, 0xFF	; 255
   16474:	7f ef       	ldi	r23, 0xFF	; 255
   16476:	6f c3       	rjmp	.+1758   	; 0x16b56 <vfprintf+0x726>
   16478:	9e 01       	movw	r18, r28
   1647a:	2f 5f       	subi	r18, 0xFF	; 255
   1647c:	3f 4f       	sbci	r19, 0xFF	; 255
   1647e:	28 8b       	std	Y+16, r18	; 0x10
   16480:	39 8b       	std	Y+17, r19	; 0x11
   16482:	f3 01       	movw	r30, r6
   16484:	23 81       	ldd	r18, Z+3	; 0x03
   16486:	ee 85       	ldd	r30, Y+14	; 0x0e
   16488:	ff 85       	ldd	r31, Y+15	; 0x0f
   1648a:	23 fd       	sbrc	r18, 3
   1648c:	85 91       	lpm	r24, Z+
   1648e:	23 ff       	sbrs	r18, 3
   16490:	81 91       	ld	r24, Z+
   16492:	ee 87       	std	Y+14, r30	; 0x0e
   16494:	ff 87       	std	Y+15, r31	; 0x0f
   16496:	88 23       	and	r24, r24
   16498:	09 f4       	brne	.+2      	; 0x1649c <vfprintf+0x6c>
   1649a:	5a c3       	rjmp	.+1716   	; 0x16b50 <vfprintf+0x720>
   1649c:	85 32       	cpi	r24, 0x25	; 37
   1649e:	51 f4       	brne	.+20     	; 0x164b4 <vfprintf+0x84>
   164a0:	ee 85       	ldd	r30, Y+14	; 0x0e
   164a2:	ff 85       	ldd	r31, Y+15	; 0x0f
   164a4:	23 fd       	sbrc	r18, 3
   164a6:	85 91       	lpm	r24, Z+
   164a8:	23 ff       	sbrs	r18, 3
   164aa:	81 91       	ld	r24, Z+
   164ac:	ee 87       	std	Y+14, r30	; 0x0e
   164ae:	ff 87       	std	Y+15, r31	; 0x0f
   164b0:	85 32       	cpi	r24, 0x25	; 37
   164b2:	29 f4       	brne	.+10     	; 0x164be <vfprintf+0x8e>
   164b4:	90 e0       	ldi	r25, 0x00	; 0
   164b6:	b3 01       	movw	r22, r6
   164b8:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   164bc:	e2 cf       	rjmp	.-60     	; 0x16482 <vfprintf+0x52>
   164be:	98 2f       	mov	r25, r24
   164c0:	10 e0       	ldi	r17, 0x00	; 0
   164c2:	88 24       	eor	r8, r8
   164c4:	99 24       	eor	r9, r9
   164c6:	10 32       	cpi	r17, 0x20	; 32
   164c8:	b0 f4       	brcc	.+44     	; 0x164f6 <vfprintf+0xc6>
   164ca:	9b 32       	cpi	r25, 0x2B	; 43
   164cc:	69 f0       	breq	.+26     	; 0x164e8 <vfprintf+0xb8>
   164ce:	9c 32       	cpi	r25, 0x2C	; 44
   164d0:	28 f4       	brcc	.+10     	; 0x164dc <vfprintf+0xac>
   164d2:	90 32       	cpi	r25, 0x20	; 32
   164d4:	51 f0       	breq	.+20     	; 0x164ea <vfprintf+0xba>
   164d6:	93 32       	cpi	r25, 0x23	; 35
   164d8:	71 f4       	brne	.+28     	; 0x164f6 <vfprintf+0xc6>
   164da:	0b c0       	rjmp	.+22     	; 0x164f2 <vfprintf+0xc2>
   164dc:	9d 32       	cpi	r25, 0x2D	; 45
   164de:	39 f0       	breq	.+14     	; 0x164ee <vfprintf+0xbe>
   164e0:	90 33       	cpi	r25, 0x30	; 48
   164e2:	49 f4       	brne	.+18     	; 0x164f6 <vfprintf+0xc6>
   164e4:	11 60       	ori	r17, 0x01	; 1
   164e6:	28 c0       	rjmp	.+80     	; 0x16538 <vfprintf+0x108>
   164e8:	12 60       	ori	r17, 0x02	; 2
   164ea:	14 60       	ori	r17, 0x04	; 4
   164ec:	25 c0       	rjmp	.+74     	; 0x16538 <vfprintf+0x108>
   164ee:	18 60       	ori	r17, 0x08	; 8
   164f0:	23 c0       	rjmp	.+70     	; 0x16538 <vfprintf+0x108>
   164f2:	10 61       	ori	r17, 0x10	; 16
   164f4:	21 c0       	rjmp	.+66     	; 0x16538 <vfprintf+0x108>
   164f6:	17 fd       	sbrc	r17, 7
   164f8:	2a c0       	rjmp	.+84     	; 0x1654e <vfprintf+0x11e>
   164fa:	89 2f       	mov	r24, r25
   164fc:	80 53       	subi	r24, 0x30	; 48
   164fe:	8a 30       	cpi	r24, 0x0A	; 10
   16500:	78 f4       	brcc	.+30     	; 0x16520 <vfprintf+0xf0>
   16502:	16 ff       	sbrs	r17, 6
   16504:	06 c0       	rjmp	.+12     	; 0x16512 <vfprintf+0xe2>
   16506:	fa e0       	ldi	r31, 0x0A	; 10
   16508:	9f 9e       	mul	r9, r31
   1650a:	90 2c       	mov	r9, r0
   1650c:	11 24       	eor	r1, r1
   1650e:	98 0e       	add	r9, r24
   16510:	13 c0       	rjmp	.+38     	; 0x16538 <vfprintf+0x108>
   16512:	3a e0       	ldi	r19, 0x0A	; 10
   16514:	83 9e       	mul	r8, r19
   16516:	80 2c       	mov	r8, r0
   16518:	11 24       	eor	r1, r1
   1651a:	88 0e       	add	r8, r24
   1651c:	10 62       	ori	r17, 0x20	; 32
   1651e:	0c c0       	rjmp	.+24     	; 0x16538 <vfprintf+0x108>
   16520:	9e 32       	cpi	r25, 0x2E	; 46
   16522:	21 f4       	brne	.+8      	; 0x1652c <vfprintf+0xfc>
   16524:	16 fd       	sbrc	r17, 6
   16526:	14 c3       	rjmp	.+1576   	; 0x16b50 <vfprintf+0x720>
   16528:	10 64       	ori	r17, 0x40	; 64
   1652a:	06 c0       	rjmp	.+12     	; 0x16538 <vfprintf+0x108>
   1652c:	9c 36       	cpi	r25, 0x6C	; 108
   1652e:	11 f4       	brne	.+4      	; 0x16534 <vfprintf+0x104>
   16530:	10 68       	ori	r17, 0x80	; 128
   16532:	02 c0       	rjmp	.+4      	; 0x16538 <vfprintf+0x108>
   16534:	98 36       	cpi	r25, 0x68	; 104
   16536:	59 f4       	brne	.+22     	; 0x1654e <vfprintf+0x11e>
   16538:	ee 85       	ldd	r30, Y+14	; 0x0e
   1653a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1653c:	23 fd       	sbrc	r18, 3
   1653e:	95 91       	lpm	r25, Z+
   16540:	23 ff       	sbrs	r18, 3
   16542:	91 91       	ld	r25, Z+
   16544:	ee 87       	std	Y+14, r30	; 0x0e
   16546:	ff 87       	std	Y+15, r31	; 0x0f
   16548:	99 23       	and	r25, r25
   1654a:	09 f0       	breq	.+2      	; 0x1654e <vfprintf+0x11e>
   1654c:	bc cf       	rjmp	.-136    	; 0x164c6 <vfprintf+0x96>
   1654e:	89 2f       	mov	r24, r25
   16550:	85 54       	subi	r24, 0x45	; 69
   16552:	83 30       	cpi	r24, 0x03	; 3
   16554:	20 f4       	brcc	.+8      	; 0x1655e <vfprintf+0x12e>
   16556:	81 2f       	mov	r24, r17
   16558:	80 61       	ori	r24, 0x10	; 16
   1655a:	90 5e       	subi	r25, 0xE0	; 224
   1655c:	07 c0       	rjmp	.+14     	; 0x1656c <vfprintf+0x13c>
   1655e:	89 2f       	mov	r24, r25
   16560:	85 56       	subi	r24, 0x65	; 101
   16562:	83 30       	cpi	r24, 0x03	; 3
   16564:	08 f0       	brcs	.+2      	; 0x16568 <vfprintf+0x138>
   16566:	9f c1       	rjmp	.+830    	; 0x168a6 <vfprintf+0x476>
   16568:	81 2f       	mov	r24, r17
   1656a:	8f 7e       	andi	r24, 0xEF	; 239
   1656c:	86 fd       	sbrc	r24, 6
   1656e:	02 c0       	rjmp	.+4      	; 0x16574 <vfprintf+0x144>
   16570:	76 e0       	ldi	r23, 0x06	; 6
   16572:	97 2e       	mov	r9, r23
   16574:	6f e3       	ldi	r22, 0x3F	; 63
   16576:	f6 2e       	mov	r15, r22
   16578:	f8 22       	and	r15, r24
   1657a:	95 36       	cpi	r25, 0x65	; 101
   1657c:	19 f4       	brne	.+6      	; 0x16584 <vfprintf+0x154>
   1657e:	f0 e4       	ldi	r31, 0x40	; 64
   16580:	ff 2a       	or	r15, r31
   16582:	07 c0       	rjmp	.+14     	; 0x16592 <vfprintf+0x162>
   16584:	96 36       	cpi	r25, 0x66	; 102
   16586:	19 f4       	brne	.+6      	; 0x1658e <vfprintf+0x15e>
   16588:	20 e8       	ldi	r18, 0x80	; 128
   1658a:	f2 2a       	or	r15, r18
   1658c:	02 c0       	rjmp	.+4      	; 0x16592 <vfprintf+0x162>
   1658e:	91 10       	cpse	r9, r1
   16590:	9a 94       	dec	r9
   16592:	f7 fe       	sbrs	r15, 7
   16594:	0a c0       	rjmp	.+20     	; 0x165aa <vfprintf+0x17a>
   16596:	3b e3       	ldi	r19, 0x3B	; 59
   16598:	39 15       	cp	r19, r9
   1659a:	18 f4       	brcc	.+6      	; 0x165a2 <vfprintf+0x172>
   1659c:	5c e3       	ldi	r21, 0x3C	; 60
   1659e:	b5 2e       	mov	r11, r21
   165a0:	02 c0       	rjmp	.+4      	; 0x165a6 <vfprintf+0x176>
   165a2:	b9 2c       	mov	r11, r9
   165a4:	b3 94       	inc	r11
   165a6:	27 e0       	ldi	r18, 0x07	; 7
   165a8:	09 c0       	rjmp	.+18     	; 0x165bc <vfprintf+0x18c>
   165aa:	47 e0       	ldi	r20, 0x07	; 7
   165ac:	49 15       	cp	r20, r9
   165ae:	20 f4       	brcc	.+8      	; 0x165b8 <vfprintf+0x188>
   165b0:	bb 24       	eor	r11, r11
   165b2:	47 e0       	ldi	r20, 0x07	; 7
   165b4:	94 2e       	mov	r9, r20
   165b6:	f7 cf       	rjmp	.-18     	; 0x165a6 <vfprintf+0x176>
   165b8:	29 2d       	mov	r18, r9
   165ba:	bb 24       	eor	r11, r11
   165bc:	c6 01       	movw	r24, r12
   165be:	04 96       	adiw	r24, 0x04	; 4
   165c0:	8c 87       	std	Y+12, r24	; 0x0c
   165c2:	9d 87       	std	Y+13, r25	; 0x0d
   165c4:	f6 01       	movw	r30, r12
   165c6:	60 81       	ld	r22, Z
   165c8:	71 81       	ldd	r23, Z+1	; 0x01
   165ca:	82 81       	ldd	r24, Z+2	; 0x02
   165cc:	93 81       	ldd	r25, Z+3	; 0x03
   165ce:	ae 01       	movw	r20, r28
   165d0:	4f 5f       	subi	r20, 0xFF	; 255
   165d2:	5f 4f       	sbci	r21, 0xFF	; 255
   165d4:	0b 2d       	mov	r16, r11
   165d6:	0e 94 e8 b6 	call	0x16dd0	; 0x16dd0 <__ftoa_engine>
   165da:	6c 01       	movw	r12, r24
   165dc:	09 81       	ldd	r16, Y+1	; 0x01
   165de:	20 2e       	mov	r2, r16
   165e0:	33 24       	eor	r3, r3
   165e2:	00 ff       	sbrs	r16, 0
   165e4:	04 c0       	rjmp	.+8      	; 0x165ee <vfprintf+0x1be>
   165e6:	03 fd       	sbrc	r16, 3
   165e8:	02 c0       	rjmp	.+4      	; 0x165ee <vfprintf+0x1be>
   165ea:	1d e2       	ldi	r17, 0x2D	; 45
   165ec:	09 c0       	rjmp	.+18     	; 0x16600 <vfprintf+0x1d0>
   165ee:	f1 fe       	sbrs	r15, 1
   165f0:	02 c0       	rjmp	.+4      	; 0x165f6 <vfprintf+0x1c6>
   165f2:	1b e2       	ldi	r17, 0x2B	; 43
   165f4:	05 c0       	rjmp	.+10     	; 0x16600 <vfprintf+0x1d0>
   165f6:	f2 fc       	sbrc	r15, 2
   165f8:	02 c0       	rjmp	.+4      	; 0x165fe <vfprintf+0x1ce>
   165fa:	10 e0       	ldi	r17, 0x00	; 0
   165fc:	01 c0       	rjmp	.+2      	; 0x16600 <vfprintf+0x1d0>
   165fe:	10 e2       	ldi	r17, 0x20	; 32
   16600:	c1 01       	movw	r24, r2
   16602:	8c 70       	andi	r24, 0x0C	; 12
   16604:	90 70       	andi	r25, 0x00	; 0
   16606:	89 2b       	or	r24, r25
   16608:	b9 f1       	breq	.+110    	; 0x16678 <vfprintf+0x248>
   1660a:	11 23       	and	r17, r17
   1660c:	11 f4       	brne	.+4      	; 0x16612 <vfprintf+0x1e2>
   1660e:	83 e0       	ldi	r24, 0x03	; 3
   16610:	01 c0       	rjmp	.+2      	; 0x16614 <vfprintf+0x1e4>
   16612:	84 e0       	ldi	r24, 0x04	; 4
   16614:	88 15       	cp	r24, r8
   16616:	10 f0       	brcs	.+4      	; 0x1661c <vfprintf+0x1ec>
   16618:	88 24       	eor	r8, r8
   1661a:	0a c0       	rjmp	.+20     	; 0x16630 <vfprintf+0x200>
   1661c:	88 1a       	sub	r8, r24
   1661e:	f3 fc       	sbrc	r15, 3
   16620:	07 c0       	rjmp	.+14     	; 0x16630 <vfprintf+0x200>
   16622:	80 e2       	ldi	r24, 0x20	; 32
   16624:	90 e0       	ldi	r25, 0x00	; 0
   16626:	b3 01       	movw	r22, r6
   16628:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1662c:	8a 94       	dec	r8
   1662e:	c9 f7       	brne	.-14     	; 0x16622 <vfprintf+0x1f2>
   16630:	11 23       	and	r17, r17
   16632:	29 f0       	breq	.+10     	; 0x1663e <vfprintf+0x20e>
   16634:	81 2f       	mov	r24, r17
   16636:	90 e0       	ldi	r25, 0x00	; 0
   16638:	b3 01       	movw	r22, r6
   1663a:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1663e:	23 fe       	sbrs	r2, 3
   16640:	03 c0       	rjmp	.+6      	; 0x16648 <vfprintf+0x218>
   16642:	01 e5       	ldi	r16, 0x51	; 81
   16644:	17 e1       	ldi	r17, 0x17	; 23
   16646:	0e c0       	rjmp	.+28     	; 0x16664 <vfprintf+0x234>
   16648:	05 e5       	ldi	r16, 0x55	; 85
   1664a:	17 e1       	ldi	r17, 0x17	; 23
   1664c:	0b c0       	rjmp	.+22     	; 0x16664 <vfprintf+0x234>
   1664e:	e1 14       	cp	r14, r1
   16650:	f1 04       	cpc	r15, r1
   16652:	09 f0       	breq	.+2      	; 0x16656 <vfprintf+0x226>
   16654:	80 52       	subi	r24, 0x20	; 32
   16656:	90 e0       	ldi	r25, 0x00	; 0
   16658:	b3 01       	movw	r22, r6
   1665a:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1665e:	0f 5f       	subi	r16, 0xFF	; 255
   16660:	1f 4f       	sbci	r17, 0xFF	; 255
   16662:	05 c0       	rjmp	.+10     	; 0x1666e <vfprintf+0x23e>
   16664:	ef 2c       	mov	r14, r15
   16666:	ff 24       	eor	r15, r15
   16668:	f0 e1       	ldi	r31, 0x10	; 16
   1666a:	ef 22       	and	r14, r31
   1666c:	ff 24       	eor	r15, r15
   1666e:	f8 01       	movw	r30, r16
   16670:	84 91       	lpm	r24, Z+
   16672:	88 23       	and	r24, r24
   16674:	61 f7       	brne	.-40     	; 0x1664e <vfprintf+0x21e>
   16676:	14 c1       	rjmp	.+552    	; 0x168a0 <vfprintf+0x470>
   16678:	f7 fe       	sbrs	r15, 7
   1667a:	12 c0       	rjmp	.+36     	; 0x166a0 <vfprintf+0x270>
   1667c:	bc 0c       	add	r11, r12
   1667e:	24 fe       	sbrs	r2, 4
   16680:	04 c0       	rjmp	.+8      	; 0x1668a <vfprintf+0x25a>
   16682:	8a 81       	ldd	r24, Y+2	; 0x02
   16684:	81 33       	cpi	r24, 0x31	; 49
   16686:	09 f4       	brne	.+2      	; 0x1668a <vfprintf+0x25a>
   16688:	ba 94       	dec	r11
   1668a:	1b 14       	cp	r1, r11
   1668c:	1c f0       	brlt	.+6      	; 0x16694 <vfprintf+0x264>
   1668e:	bb 24       	eor	r11, r11
   16690:	b3 94       	inc	r11
   16692:	2d c0       	rjmp	.+90     	; 0x166ee <vfprintf+0x2be>
   16694:	f8 e0       	ldi	r31, 0x08	; 8
   16696:	fb 15       	cp	r31, r11
   16698:	50 f5       	brcc	.+84     	; 0x166ee <vfprintf+0x2be>
   1669a:	38 e0       	ldi	r19, 0x08	; 8
   1669c:	b3 2e       	mov	r11, r19
   1669e:	27 c0       	rjmp	.+78     	; 0x166ee <vfprintf+0x2be>
   166a0:	f6 fc       	sbrc	r15, 6
   166a2:	25 c0       	rjmp	.+74     	; 0x166ee <vfprintf+0x2be>
   166a4:	89 2d       	mov	r24, r9
   166a6:	90 e0       	ldi	r25, 0x00	; 0
   166a8:	8c 15       	cp	r24, r12
   166aa:	9d 05       	cpc	r25, r13
   166ac:	4c f0       	brlt	.+18     	; 0x166c0 <vfprintf+0x290>
   166ae:	2c ef       	ldi	r18, 0xFC	; 252
   166b0:	c2 16       	cp	r12, r18
   166b2:	2f ef       	ldi	r18, 0xFF	; 255
   166b4:	d2 06       	cpc	r13, r18
   166b6:	24 f0       	brlt	.+8      	; 0x166c0 <vfprintf+0x290>
   166b8:	30 e8       	ldi	r19, 0x80	; 128
   166ba:	f3 2a       	or	r15, r19
   166bc:	01 c0       	rjmp	.+2      	; 0x166c0 <vfprintf+0x290>
   166be:	9a 94       	dec	r9
   166c0:	99 20       	and	r9, r9
   166c2:	49 f0       	breq	.+18     	; 0x166d6 <vfprintf+0x2a6>
   166c4:	e2 e0       	ldi	r30, 0x02	; 2
   166c6:	f0 e0       	ldi	r31, 0x00	; 0
   166c8:	ec 0f       	add	r30, r28
   166ca:	fd 1f       	adc	r31, r29
   166cc:	e9 0d       	add	r30, r9
   166ce:	f1 1d       	adc	r31, r1
   166d0:	80 81       	ld	r24, Z
   166d2:	80 33       	cpi	r24, 0x30	; 48
   166d4:	a1 f3       	breq	.-24     	; 0x166be <vfprintf+0x28e>
   166d6:	f7 fe       	sbrs	r15, 7
   166d8:	0a c0       	rjmp	.+20     	; 0x166ee <vfprintf+0x2be>
   166da:	b9 2c       	mov	r11, r9
   166dc:	b3 94       	inc	r11
   166de:	89 2d       	mov	r24, r9
   166e0:	90 e0       	ldi	r25, 0x00	; 0
   166e2:	c8 16       	cp	r12, r24
   166e4:	d9 06       	cpc	r13, r25
   166e6:	14 f0       	brlt	.+4      	; 0x166ec <vfprintf+0x2bc>
   166e8:	99 24       	eor	r9, r9
   166ea:	01 c0       	rjmp	.+2      	; 0x166ee <vfprintf+0x2be>
   166ec:	9c 18       	sub	r9, r12
   166ee:	f7 fc       	sbrc	r15, 7
   166f0:	03 c0       	rjmp	.+6      	; 0x166f8 <vfprintf+0x2c8>
   166f2:	25 e0       	ldi	r18, 0x05	; 5
   166f4:	30 e0       	ldi	r19, 0x00	; 0
   166f6:	09 c0       	rjmp	.+18     	; 0x1670a <vfprintf+0x2da>
   166f8:	1c 14       	cp	r1, r12
   166fa:	1d 04       	cpc	r1, r13
   166fc:	1c f0       	brlt	.+6      	; 0x16704 <vfprintf+0x2d4>
   166fe:	21 e0       	ldi	r18, 0x01	; 1
   16700:	30 e0       	ldi	r19, 0x00	; 0
   16702:	03 c0       	rjmp	.+6      	; 0x1670a <vfprintf+0x2da>
   16704:	96 01       	movw	r18, r12
   16706:	2f 5f       	subi	r18, 0xFF	; 255
   16708:	3f 4f       	sbci	r19, 0xFF	; 255
   1670a:	11 23       	and	r17, r17
   1670c:	11 f0       	breq	.+4      	; 0x16712 <vfprintf+0x2e2>
   1670e:	2f 5f       	subi	r18, 0xFF	; 255
   16710:	3f 4f       	sbci	r19, 0xFF	; 255
   16712:	99 20       	and	r9, r9
   16714:	29 f0       	breq	.+10     	; 0x16720 <vfprintf+0x2f0>
   16716:	89 2d       	mov	r24, r9
   16718:	90 e0       	ldi	r25, 0x00	; 0
   1671a:	01 96       	adiw	r24, 0x01	; 1
   1671c:	28 0f       	add	r18, r24
   1671e:	39 1f       	adc	r19, r25
   16720:	88 2d       	mov	r24, r8
   16722:	90 e0       	ldi	r25, 0x00	; 0
   16724:	28 17       	cp	r18, r24
   16726:	39 07       	cpc	r19, r25
   16728:	14 f0       	brlt	.+4      	; 0x1672e <vfprintf+0x2fe>
   1672a:	88 24       	eor	r8, r8
   1672c:	01 c0       	rjmp	.+2      	; 0x16730 <vfprintf+0x300>
   1672e:	82 1a       	sub	r8, r18
   16730:	4f 2c       	mov	r4, r15
   16732:	55 24       	eor	r5, r5
   16734:	c2 01       	movw	r24, r4
   16736:	89 70       	andi	r24, 0x09	; 9
   16738:	90 70       	andi	r25, 0x00	; 0
   1673a:	89 2b       	or	r24, r25
   1673c:	39 f0       	breq	.+14     	; 0x1674c <vfprintf+0x31c>
   1673e:	08 c0       	rjmp	.+16     	; 0x16750 <vfprintf+0x320>
   16740:	80 e2       	ldi	r24, 0x20	; 32
   16742:	90 e0       	ldi	r25, 0x00	; 0
   16744:	b3 01       	movw	r22, r6
   16746:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1674a:	8a 94       	dec	r8
   1674c:	88 20       	and	r8, r8
   1674e:	c1 f7       	brne	.-16     	; 0x16740 <vfprintf+0x310>
   16750:	11 23       	and	r17, r17
   16752:	29 f0       	breq	.+10     	; 0x1675e <vfprintf+0x32e>
   16754:	81 2f       	mov	r24, r17
   16756:	90 e0       	ldi	r25, 0x00	; 0
   16758:	b3 01       	movw	r22, r6
   1675a:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1675e:	43 fe       	sbrs	r4, 3
   16760:	07 c0       	rjmp	.+14     	; 0x16770 <vfprintf+0x340>
   16762:	08 c0       	rjmp	.+16     	; 0x16774 <vfprintf+0x344>
   16764:	80 e3       	ldi	r24, 0x30	; 48
   16766:	90 e0       	ldi	r25, 0x00	; 0
   16768:	b3 01       	movw	r22, r6
   1676a:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1676e:	8a 94       	dec	r8
   16770:	88 20       	and	r8, r8
   16772:	c1 f7       	brne	.-16     	; 0x16764 <vfprintf+0x334>
   16774:	f7 fe       	sbrs	r15, 7
   16776:	46 c0       	rjmp	.+140    	; 0x16804 <vfprintf+0x3d4>
   16778:	86 01       	movw	r16, r12
   1677a:	d7 fe       	sbrs	r13, 7
   1677c:	02 c0       	rjmp	.+4      	; 0x16782 <vfprintf+0x352>
   1677e:	00 e0       	ldi	r16, 0x00	; 0
   16780:	10 e0       	ldi	r17, 0x00	; 0
   16782:	76 01       	movw	r14, r12
   16784:	08 94       	sec
   16786:	e1 1c       	adc	r14, r1
   16788:	f1 1c       	adc	r15, r1
   1678a:	e0 1a       	sub	r14, r16
   1678c:	f1 0a       	sbc	r15, r17
   1678e:	41 e0       	ldi	r20, 0x01	; 1
   16790:	50 e0       	ldi	r21, 0x00	; 0
   16792:	4c 0f       	add	r20, r28
   16794:	5d 1f       	adc	r21, r29
   16796:	e4 0e       	add	r14, r20
   16798:	f5 1e       	adc	r15, r21
   1679a:	26 01       	movw	r4, r12
   1679c:	4b 18       	sub	r4, r11
   1679e:	51 08       	sbc	r5, r1
   167a0:	89 2d       	mov	r24, r9
   167a2:	90 e0       	ldi	r25, 0x00	; 0
   167a4:	aa 24       	eor	r10, r10
   167a6:	bb 24       	eor	r11, r11
   167a8:	a8 1a       	sub	r10, r24
   167aa:	b9 0a       	sbc	r11, r25
   167ac:	5f ef       	ldi	r21, 0xFF	; 255
   167ae:	0f 3f       	cpi	r16, 0xFF	; 255
   167b0:	15 07       	cpc	r17, r21
   167b2:	29 f4       	brne	.+10     	; 0x167be <vfprintf+0x38e>
   167b4:	8e e2       	ldi	r24, 0x2E	; 46
   167b6:	90 e0       	ldi	r25, 0x00	; 0
   167b8:	b3 01       	movw	r22, r6
   167ba:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   167be:	c0 16       	cp	r12, r16
   167c0:	d1 06       	cpc	r13, r17
   167c2:	34 f0       	brlt	.+12     	; 0x167d0 <vfprintf+0x3a0>
   167c4:	40 16       	cp	r4, r16
   167c6:	51 06       	cpc	r5, r17
   167c8:	1c f4       	brge	.+6      	; 0x167d0 <vfprintf+0x3a0>
   167ca:	f7 01       	movw	r30, r14
   167cc:	80 81       	ld	r24, Z
   167ce:	01 c0       	rjmp	.+2      	; 0x167d2 <vfprintf+0x3a2>
   167d0:	80 e3       	ldi	r24, 0x30	; 48
   167d2:	01 50       	subi	r16, 0x01	; 1
   167d4:	10 40       	sbci	r17, 0x00	; 0
   167d6:	08 94       	sec
   167d8:	e1 1c       	adc	r14, r1
   167da:	f1 1c       	adc	r15, r1
   167dc:	0a 15       	cp	r16, r10
   167de:	1b 05       	cpc	r17, r11
   167e0:	2c f0       	brlt	.+10     	; 0x167ec <vfprintf+0x3bc>
   167e2:	90 e0       	ldi	r25, 0x00	; 0
   167e4:	b3 01       	movw	r22, r6
   167e6:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   167ea:	e0 cf       	rjmp	.-64     	; 0x167ac <vfprintf+0x37c>
   167ec:	0c 15       	cp	r16, r12
   167ee:	1d 05       	cpc	r17, r13
   167f0:	39 f4       	brne	.+14     	; 0x16800 <vfprintf+0x3d0>
   167f2:	9a 81       	ldd	r25, Y+2	; 0x02
   167f4:	96 33       	cpi	r25, 0x36	; 54
   167f6:	18 f4       	brcc	.+6      	; 0x167fe <vfprintf+0x3ce>
   167f8:	95 33       	cpi	r25, 0x35	; 53
   167fa:	11 f4       	brne	.+4      	; 0x16800 <vfprintf+0x3d0>
   167fc:	24 fe       	sbrs	r2, 4
   167fe:	81 e3       	ldi	r24, 0x31	; 49
   16800:	90 e0       	ldi	r25, 0x00	; 0
   16802:	4b c0       	rjmp	.+150    	; 0x1689a <vfprintf+0x46a>
   16804:	8a 81       	ldd	r24, Y+2	; 0x02
   16806:	81 33       	cpi	r24, 0x31	; 49
   16808:	09 f0       	breq	.+2      	; 0x1680c <vfprintf+0x3dc>
   1680a:	0f 7e       	andi	r16, 0xEF	; 239
   1680c:	90 e0       	ldi	r25, 0x00	; 0
   1680e:	b3 01       	movw	r22, r6
   16810:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16814:	99 20       	and	r9, r9
   16816:	a1 f0       	breq	.+40     	; 0x16840 <vfprintf+0x410>
   16818:	8e e2       	ldi	r24, 0x2E	; 46
   1681a:	90 e0       	ldi	r25, 0x00	; 0
   1681c:	b3 01       	movw	r22, r6
   1681e:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16822:	12 e0       	ldi	r17, 0x02	; 2
   16824:	e1 e0       	ldi	r30, 0x01	; 1
   16826:	f0 e0       	ldi	r31, 0x00	; 0
   16828:	ec 0f       	add	r30, r28
   1682a:	fd 1f       	adc	r31, r29
   1682c:	e1 0f       	add	r30, r17
   1682e:	f1 1d       	adc	r31, r1
   16830:	1f 5f       	subi	r17, 0xFF	; 255
   16832:	80 81       	ld	r24, Z
   16834:	90 e0       	ldi	r25, 0x00	; 0
   16836:	b3 01       	movw	r22, r6
   16838:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   1683c:	9a 94       	dec	r9
   1683e:	91 f7       	brne	.-28     	; 0x16824 <vfprintf+0x3f4>
   16840:	44 fc       	sbrc	r4, 4
   16842:	03 c0       	rjmp	.+6      	; 0x1684a <vfprintf+0x41a>
   16844:	85 e6       	ldi	r24, 0x65	; 101
   16846:	90 e0       	ldi	r25, 0x00	; 0
   16848:	02 c0       	rjmp	.+4      	; 0x1684e <vfprintf+0x41e>
   1684a:	85 e4       	ldi	r24, 0x45	; 69
   1684c:	90 e0       	ldi	r25, 0x00	; 0
   1684e:	b3 01       	movw	r22, r6
   16850:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16854:	d7 fc       	sbrc	r13, 7
   16856:	05 c0       	rjmp	.+10     	; 0x16862 <vfprintf+0x432>
   16858:	c1 14       	cp	r12, r1
   1685a:	d1 04       	cpc	r13, r1
   1685c:	41 f4       	brne	.+16     	; 0x1686e <vfprintf+0x43e>
   1685e:	04 ff       	sbrs	r16, 4
   16860:	06 c0       	rjmp	.+12     	; 0x1686e <vfprintf+0x43e>
   16862:	d0 94       	com	r13
   16864:	c1 94       	neg	r12
   16866:	d1 08       	sbc	r13, r1
   16868:	d3 94       	inc	r13
   1686a:	8d e2       	ldi	r24, 0x2D	; 45
   1686c:	01 c0       	rjmp	.+2      	; 0x16870 <vfprintf+0x440>
   1686e:	8b e2       	ldi	r24, 0x2B	; 43
   16870:	90 e0       	ldi	r25, 0x00	; 0
   16872:	b3 01       	movw	r22, r6
   16874:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16878:	80 e3       	ldi	r24, 0x30	; 48
   1687a:	05 c0       	rjmp	.+10     	; 0x16886 <vfprintf+0x456>
   1687c:	8f 5f       	subi	r24, 0xFF	; 255
   1687e:	26 ef       	ldi	r18, 0xF6	; 246
   16880:	3f ef       	ldi	r19, 0xFF	; 255
   16882:	c2 0e       	add	r12, r18
   16884:	d3 1e       	adc	r13, r19
   16886:	3a e0       	ldi	r19, 0x0A	; 10
   16888:	c3 16       	cp	r12, r19
   1688a:	d1 04       	cpc	r13, r1
   1688c:	bc f7       	brge	.-18     	; 0x1687c <vfprintf+0x44c>
   1688e:	90 e0       	ldi	r25, 0x00	; 0
   16890:	b3 01       	movw	r22, r6
   16892:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16896:	c6 01       	movw	r24, r12
   16898:	c0 96       	adiw	r24, 0x30	; 48
   1689a:	b3 01       	movw	r22, r6
   1689c:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   168a0:	cc 84       	ldd	r12, Y+12	; 0x0c
   168a2:	dd 84       	ldd	r13, Y+13	; 0x0d
   168a4:	52 c1       	rjmp	.+676    	; 0x16b4a <vfprintf+0x71a>
   168a6:	93 36       	cpi	r25, 0x63	; 99
   168a8:	31 f0       	breq	.+12     	; 0x168b6 <vfprintf+0x486>
   168aa:	93 37       	cpi	r25, 0x73	; 115
   168ac:	99 f0       	breq	.+38     	; 0x168d4 <vfprintf+0x4a4>
   168ae:	93 35       	cpi	r25, 0x53	; 83
   168b0:	09 f0       	breq	.+2      	; 0x168b4 <vfprintf+0x484>
   168b2:	59 c0       	rjmp	.+178    	; 0x16966 <vfprintf+0x536>
   168b4:	23 c0       	rjmp	.+70     	; 0x168fc <vfprintf+0x4cc>
   168b6:	f6 01       	movw	r30, r12
   168b8:	80 81       	ld	r24, Z
   168ba:	89 83       	std	Y+1, r24	; 0x01
   168bc:	5e 01       	movw	r10, r28
   168be:	08 94       	sec
   168c0:	a1 1c       	adc	r10, r1
   168c2:	b1 1c       	adc	r11, r1
   168c4:	22 e0       	ldi	r18, 0x02	; 2
   168c6:	30 e0       	ldi	r19, 0x00	; 0
   168c8:	c2 0e       	add	r12, r18
   168ca:	d3 1e       	adc	r13, r19
   168cc:	21 e0       	ldi	r18, 0x01	; 1
   168ce:	e2 2e       	mov	r14, r18
   168d0:	f1 2c       	mov	r15, r1
   168d2:	12 c0       	rjmp	.+36     	; 0x168f8 <vfprintf+0x4c8>
   168d4:	f6 01       	movw	r30, r12
   168d6:	a0 80       	ld	r10, Z
   168d8:	b1 80       	ldd	r11, Z+1	; 0x01
   168da:	16 fd       	sbrc	r17, 6
   168dc:	03 c0       	rjmp	.+6      	; 0x168e4 <vfprintf+0x4b4>
   168de:	6f ef       	ldi	r22, 0xFF	; 255
   168e0:	7f ef       	ldi	r23, 0xFF	; 255
   168e2:	02 c0       	rjmp	.+4      	; 0x168e8 <vfprintf+0x4b8>
   168e4:	69 2d       	mov	r22, r9
   168e6:	70 e0       	ldi	r23, 0x00	; 0
   168e8:	22 e0       	ldi	r18, 0x02	; 2
   168ea:	30 e0       	ldi	r19, 0x00	; 0
   168ec:	c2 0e       	add	r12, r18
   168ee:	d3 1e       	adc	r13, r19
   168f0:	c5 01       	movw	r24, r10
   168f2:	0e 94 3d b8 	call	0x1707a	; 0x1707a <strnlen>
   168f6:	7c 01       	movw	r14, r24
   168f8:	1f 77       	andi	r17, 0x7F	; 127
   168fa:	13 c0       	rjmp	.+38     	; 0x16922 <vfprintf+0x4f2>
   168fc:	f6 01       	movw	r30, r12
   168fe:	a0 80       	ld	r10, Z
   16900:	b1 80       	ldd	r11, Z+1	; 0x01
   16902:	16 fd       	sbrc	r17, 6
   16904:	03 c0       	rjmp	.+6      	; 0x1690c <vfprintf+0x4dc>
   16906:	6f ef       	ldi	r22, 0xFF	; 255
   16908:	7f ef       	ldi	r23, 0xFF	; 255
   1690a:	02 c0       	rjmp	.+4      	; 0x16910 <vfprintf+0x4e0>
   1690c:	69 2d       	mov	r22, r9
   1690e:	70 e0       	ldi	r23, 0x00	; 0
   16910:	22 e0       	ldi	r18, 0x02	; 2
   16912:	30 e0       	ldi	r19, 0x00	; 0
   16914:	c2 0e       	add	r12, r18
   16916:	d3 1e       	adc	r13, r19
   16918:	c5 01       	movw	r24, r10
   1691a:	0e 94 d3 b7 	call	0x16fa6	; 0x16fa6 <strnlen_P>
   1691e:	7c 01       	movw	r14, r24
   16920:	10 68       	ori	r17, 0x80	; 128
   16922:	13 ff       	sbrs	r17, 3
   16924:	07 c0       	rjmp	.+14     	; 0x16934 <vfprintf+0x504>
   16926:	1b c0       	rjmp	.+54     	; 0x1695e <vfprintf+0x52e>
   16928:	80 e2       	ldi	r24, 0x20	; 32
   1692a:	90 e0       	ldi	r25, 0x00	; 0
   1692c:	b3 01       	movw	r22, r6
   1692e:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16932:	8a 94       	dec	r8
   16934:	88 2d       	mov	r24, r8
   16936:	90 e0       	ldi	r25, 0x00	; 0
   16938:	e8 16       	cp	r14, r24
   1693a:	f9 06       	cpc	r15, r25
   1693c:	a8 f3       	brcs	.-22     	; 0x16928 <vfprintf+0x4f8>
   1693e:	0f c0       	rjmp	.+30     	; 0x1695e <vfprintf+0x52e>
   16940:	f5 01       	movw	r30, r10
   16942:	17 fd       	sbrc	r17, 7
   16944:	85 91       	lpm	r24, Z+
   16946:	17 ff       	sbrs	r17, 7
   16948:	81 91       	ld	r24, Z+
   1694a:	5f 01       	movw	r10, r30
   1694c:	90 e0       	ldi	r25, 0x00	; 0
   1694e:	b3 01       	movw	r22, r6
   16950:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16954:	81 10       	cpse	r8, r1
   16956:	8a 94       	dec	r8
   16958:	08 94       	sec
   1695a:	e1 08       	sbc	r14, r1
   1695c:	f1 08       	sbc	r15, r1
   1695e:	e1 14       	cp	r14, r1
   16960:	f1 04       	cpc	r15, r1
   16962:	71 f7       	brne	.-36     	; 0x16940 <vfprintf+0x510>
   16964:	f2 c0       	rjmp	.+484    	; 0x16b4a <vfprintf+0x71a>
   16966:	94 36       	cpi	r25, 0x64	; 100
   16968:	11 f0       	breq	.+4      	; 0x1696e <vfprintf+0x53e>
   1696a:	99 36       	cpi	r25, 0x69	; 105
   1696c:	89 f5       	brne	.+98     	; 0x169d0 <vfprintf+0x5a0>
   1696e:	17 ff       	sbrs	r17, 7
   16970:	08 c0       	rjmp	.+16     	; 0x16982 <vfprintf+0x552>
   16972:	f6 01       	movw	r30, r12
   16974:	20 81       	ld	r18, Z
   16976:	31 81       	ldd	r19, Z+1	; 0x01
   16978:	42 81       	ldd	r20, Z+2	; 0x02
   1697a:	53 81       	ldd	r21, Z+3	; 0x03
   1697c:	84 e0       	ldi	r24, 0x04	; 4
   1697e:	90 e0       	ldi	r25, 0x00	; 0
   16980:	0a c0       	rjmp	.+20     	; 0x16996 <vfprintf+0x566>
   16982:	f6 01       	movw	r30, r12
   16984:	80 81       	ld	r24, Z
   16986:	91 81       	ldd	r25, Z+1	; 0x01
   16988:	9c 01       	movw	r18, r24
   1698a:	44 27       	eor	r20, r20
   1698c:	37 fd       	sbrc	r19, 7
   1698e:	40 95       	com	r20
   16990:	54 2f       	mov	r21, r20
   16992:	82 e0       	ldi	r24, 0x02	; 2
   16994:	90 e0       	ldi	r25, 0x00	; 0
   16996:	c8 0e       	add	r12, r24
   16998:	d9 1e       	adc	r13, r25
   1699a:	9f e6       	ldi	r25, 0x6F	; 111
   1699c:	f9 2e       	mov	r15, r25
   1699e:	f1 22       	and	r15, r17
   169a0:	57 ff       	sbrs	r21, 7
   169a2:	09 c0       	rjmp	.+18     	; 0x169b6 <vfprintf+0x586>
   169a4:	50 95       	com	r21
   169a6:	40 95       	com	r20
   169a8:	30 95       	com	r19
   169aa:	21 95       	neg	r18
   169ac:	3f 4f       	sbci	r19, 0xFF	; 255
   169ae:	4f 4f       	sbci	r20, 0xFF	; 255
   169b0:	5f 4f       	sbci	r21, 0xFF	; 255
   169b2:	90 e8       	ldi	r25, 0x80	; 128
   169b4:	f9 2a       	or	r15, r25
   169b6:	ca 01       	movw	r24, r20
   169b8:	b9 01       	movw	r22, r18
   169ba:	ae 01       	movw	r20, r28
   169bc:	4f 5f       	subi	r20, 0xFF	; 255
   169be:	5f 4f       	sbci	r21, 0xFF	; 255
   169c0:	2a e0       	ldi	r18, 0x0A	; 10
   169c2:	30 e0       	ldi	r19, 0x00	; 0
   169c4:	0e 94 f9 b8 	call	0x171f2	; 0x171f2 <__ultoa_invert>
   169c8:	e8 2e       	mov	r14, r24
   169ca:	e8 89       	ldd	r30, Y+16	; 0x10
   169cc:	ee 1a       	sub	r14, r30
   169ce:	41 c0       	rjmp	.+130    	; 0x16a52 <vfprintf+0x622>
   169d0:	95 37       	cpi	r25, 0x75	; 117
   169d2:	21 f4       	brne	.+8      	; 0x169dc <vfprintf+0x5ac>
   169d4:	1f 7e       	andi	r17, 0xEF	; 239
   169d6:	2a e0       	ldi	r18, 0x0A	; 10
   169d8:	30 e0       	ldi	r19, 0x00	; 0
   169da:	1c c0       	rjmp	.+56     	; 0x16a14 <vfprintf+0x5e4>
   169dc:	19 7f       	andi	r17, 0xF9	; 249
   169de:	9f 36       	cpi	r25, 0x6F	; 111
   169e0:	61 f0       	breq	.+24     	; 0x169fa <vfprintf+0x5ca>
   169e2:	90 37       	cpi	r25, 0x70	; 112
   169e4:	20 f4       	brcc	.+8      	; 0x169ee <vfprintf+0x5be>
   169e6:	98 35       	cpi	r25, 0x58	; 88
   169e8:	09 f0       	breq	.+2      	; 0x169ec <vfprintf+0x5bc>
   169ea:	b2 c0       	rjmp	.+356    	; 0x16b50 <vfprintf+0x720>
   169ec:	0f c0       	rjmp	.+30     	; 0x16a0c <vfprintf+0x5dc>
   169ee:	90 37       	cpi	r25, 0x70	; 112
   169f0:	39 f0       	breq	.+14     	; 0x16a00 <vfprintf+0x5d0>
   169f2:	98 37       	cpi	r25, 0x78	; 120
   169f4:	09 f0       	breq	.+2      	; 0x169f8 <vfprintf+0x5c8>
   169f6:	ac c0       	rjmp	.+344    	; 0x16b50 <vfprintf+0x720>
   169f8:	04 c0       	rjmp	.+8      	; 0x16a02 <vfprintf+0x5d2>
   169fa:	28 e0       	ldi	r18, 0x08	; 8
   169fc:	30 e0       	ldi	r19, 0x00	; 0
   169fe:	0a c0       	rjmp	.+20     	; 0x16a14 <vfprintf+0x5e4>
   16a00:	10 61       	ori	r17, 0x10	; 16
   16a02:	14 fd       	sbrc	r17, 4
   16a04:	14 60       	ori	r17, 0x04	; 4
   16a06:	20 e1       	ldi	r18, 0x10	; 16
   16a08:	30 e0       	ldi	r19, 0x00	; 0
   16a0a:	04 c0       	rjmp	.+8      	; 0x16a14 <vfprintf+0x5e4>
   16a0c:	14 fd       	sbrc	r17, 4
   16a0e:	16 60       	ori	r17, 0x06	; 6
   16a10:	20 e1       	ldi	r18, 0x10	; 16
   16a12:	32 e0       	ldi	r19, 0x02	; 2
   16a14:	17 ff       	sbrs	r17, 7
   16a16:	08 c0       	rjmp	.+16     	; 0x16a28 <vfprintf+0x5f8>
   16a18:	f6 01       	movw	r30, r12
   16a1a:	60 81       	ld	r22, Z
   16a1c:	71 81       	ldd	r23, Z+1	; 0x01
   16a1e:	82 81       	ldd	r24, Z+2	; 0x02
   16a20:	93 81       	ldd	r25, Z+3	; 0x03
   16a22:	44 e0       	ldi	r20, 0x04	; 4
   16a24:	50 e0       	ldi	r21, 0x00	; 0
   16a26:	08 c0       	rjmp	.+16     	; 0x16a38 <vfprintf+0x608>
   16a28:	f6 01       	movw	r30, r12
   16a2a:	80 81       	ld	r24, Z
   16a2c:	91 81       	ldd	r25, Z+1	; 0x01
   16a2e:	bc 01       	movw	r22, r24
   16a30:	80 e0       	ldi	r24, 0x00	; 0
   16a32:	90 e0       	ldi	r25, 0x00	; 0
   16a34:	42 e0       	ldi	r20, 0x02	; 2
   16a36:	50 e0       	ldi	r21, 0x00	; 0
   16a38:	c4 0e       	add	r12, r20
   16a3a:	d5 1e       	adc	r13, r21
   16a3c:	ae 01       	movw	r20, r28
   16a3e:	4f 5f       	subi	r20, 0xFF	; 255
   16a40:	5f 4f       	sbci	r21, 0xFF	; 255
   16a42:	0e 94 f9 b8 	call	0x171f2	; 0x171f2 <__ultoa_invert>
   16a46:	e8 2e       	mov	r14, r24
   16a48:	58 89       	ldd	r21, Y+16	; 0x10
   16a4a:	e5 1a       	sub	r14, r21
   16a4c:	8f e7       	ldi	r24, 0x7F	; 127
   16a4e:	f8 2e       	mov	r15, r24
   16a50:	f1 22       	and	r15, r17
   16a52:	f6 fe       	sbrs	r15, 6
   16a54:	0b c0       	rjmp	.+22     	; 0x16a6c <vfprintf+0x63c>
   16a56:	8e ef       	ldi	r24, 0xFE	; 254
   16a58:	f8 22       	and	r15, r24
   16a5a:	e9 14       	cp	r14, r9
   16a5c:	38 f4       	brcc	.+14     	; 0x16a6c <vfprintf+0x63c>
   16a5e:	f4 fe       	sbrs	r15, 4
   16a60:	07 c0       	rjmp	.+14     	; 0x16a70 <vfprintf+0x640>
   16a62:	f2 fc       	sbrc	r15, 2
   16a64:	05 c0       	rjmp	.+10     	; 0x16a70 <vfprintf+0x640>
   16a66:	9f ee       	ldi	r25, 0xEF	; 239
   16a68:	f9 22       	and	r15, r25
   16a6a:	02 c0       	rjmp	.+4      	; 0x16a70 <vfprintf+0x640>
   16a6c:	1e 2d       	mov	r17, r14
   16a6e:	01 c0       	rjmp	.+2      	; 0x16a72 <vfprintf+0x642>
   16a70:	19 2d       	mov	r17, r9
   16a72:	f4 fe       	sbrs	r15, 4
   16a74:	0d c0       	rjmp	.+26     	; 0x16a90 <vfprintf+0x660>
   16a76:	fe 01       	movw	r30, r28
   16a78:	ee 0d       	add	r30, r14
   16a7a:	f1 1d       	adc	r31, r1
   16a7c:	80 81       	ld	r24, Z
   16a7e:	80 33       	cpi	r24, 0x30	; 48
   16a80:	19 f4       	brne	.+6      	; 0x16a88 <vfprintf+0x658>
   16a82:	e9 ee       	ldi	r30, 0xE9	; 233
   16a84:	fe 22       	and	r15, r30
   16a86:	08 c0       	rjmp	.+16     	; 0x16a98 <vfprintf+0x668>
   16a88:	1f 5f       	subi	r17, 0xFF	; 255
   16a8a:	f2 fe       	sbrs	r15, 2
   16a8c:	05 c0       	rjmp	.+10     	; 0x16a98 <vfprintf+0x668>
   16a8e:	03 c0       	rjmp	.+6      	; 0x16a96 <vfprintf+0x666>
   16a90:	8f 2d       	mov	r24, r15
   16a92:	86 78       	andi	r24, 0x86	; 134
   16a94:	09 f0       	breq	.+2      	; 0x16a98 <vfprintf+0x668>
   16a96:	1f 5f       	subi	r17, 0xFF	; 255
   16a98:	0f 2d       	mov	r16, r15
   16a9a:	f3 fc       	sbrc	r15, 3
   16a9c:	14 c0       	rjmp	.+40     	; 0x16ac6 <vfprintf+0x696>
   16a9e:	f0 fe       	sbrs	r15, 0
   16aa0:	0f c0       	rjmp	.+30     	; 0x16ac0 <vfprintf+0x690>
   16aa2:	18 15       	cp	r17, r8
   16aa4:	10 f0       	brcs	.+4      	; 0x16aaa <vfprintf+0x67a>
   16aa6:	9e 2c       	mov	r9, r14
   16aa8:	0b c0       	rjmp	.+22     	; 0x16ac0 <vfprintf+0x690>
   16aaa:	9e 2c       	mov	r9, r14
   16aac:	98 0c       	add	r9, r8
   16aae:	91 1a       	sub	r9, r17
   16ab0:	18 2d       	mov	r17, r8
   16ab2:	06 c0       	rjmp	.+12     	; 0x16ac0 <vfprintf+0x690>
   16ab4:	80 e2       	ldi	r24, 0x20	; 32
   16ab6:	90 e0       	ldi	r25, 0x00	; 0
   16ab8:	b3 01       	movw	r22, r6
   16aba:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16abe:	1f 5f       	subi	r17, 0xFF	; 255
   16ac0:	18 15       	cp	r17, r8
   16ac2:	c0 f3       	brcs	.-16     	; 0x16ab4 <vfprintf+0x684>
   16ac4:	04 c0       	rjmp	.+8      	; 0x16ace <vfprintf+0x69e>
   16ac6:	18 15       	cp	r17, r8
   16ac8:	10 f4       	brcc	.+4      	; 0x16ace <vfprintf+0x69e>
   16aca:	81 1a       	sub	r8, r17
   16acc:	01 c0       	rjmp	.+2      	; 0x16ad0 <vfprintf+0x6a0>
   16ace:	88 24       	eor	r8, r8
   16ad0:	04 ff       	sbrs	r16, 4
   16ad2:	0f c0       	rjmp	.+30     	; 0x16af2 <vfprintf+0x6c2>
   16ad4:	80 e3       	ldi	r24, 0x30	; 48
   16ad6:	90 e0       	ldi	r25, 0x00	; 0
   16ad8:	b3 01       	movw	r22, r6
   16ada:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16ade:	02 ff       	sbrs	r16, 2
   16ae0:	1d c0       	rjmp	.+58     	; 0x16b1c <vfprintf+0x6ec>
   16ae2:	01 fd       	sbrc	r16, 1
   16ae4:	03 c0       	rjmp	.+6      	; 0x16aec <vfprintf+0x6bc>
   16ae6:	88 e7       	ldi	r24, 0x78	; 120
   16ae8:	90 e0       	ldi	r25, 0x00	; 0
   16aea:	0e c0       	rjmp	.+28     	; 0x16b08 <vfprintf+0x6d8>
   16aec:	88 e5       	ldi	r24, 0x58	; 88
   16aee:	90 e0       	ldi	r25, 0x00	; 0
   16af0:	0b c0       	rjmp	.+22     	; 0x16b08 <vfprintf+0x6d8>
   16af2:	80 2f       	mov	r24, r16
   16af4:	86 78       	andi	r24, 0x86	; 134
   16af6:	91 f0       	breq	.+36     	; 0x16b1c <vfprintf+0x6ec>
   16af8:	01 ff       	sbrs	r16, 1
   16afa:	02 c0       	rjmp	.+4      	; 0x16b00 <vfprintf+0x6d0>
   16afc:	8b e2       	ldi	r24, 0x2B	; 43
   16afe:	01 c0       	rjmp	.+2      	; 0x16b02 <vfprintf+0x6d2>
   16b00:	80 e2       	ldi	r24, 0x20	; 32
   16b02:	f7 fc       	sbrc	r15, 7
   16b04:	8d e2       	ldi	r24, 0x2D	; 45
   16b06:	90 e0       	ldi	r25, 0x00	; 0
   16b08:	b3 01       	movw	r22, r6
   16b0a:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16b0e:	06 c0       	rjmp	.+12     	; 0x16b1c <vfprintf+0x6ec>
   16b10:	80 e3       	ldi	r24, 0x30	; 48
   16b12:	90 e0       	ldi	r25, 0x00	; 0
   16b14:	b3 01       	movw	r22, r6
   16b16:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16b1a:	9a 94       	dec	r9
   16b1c:	e9 14       	cp	r14, r9
   16b1e:	c0 f3       	brcs	.-16     	; 0x16b10 <vfprintf+0x6e0>
   16b20:	ea 94       	dec	r14
   16b22:	e1 e0       	ldi	r30, 0x01	; 1
   16b24:	f0 e0       	ldi	r31, 0x00	; 0
   16b26:	ec 0f       	add	r30, r28
   16b28:	fd 1f       	adc	r31, r29
   16b2a:	ee 0d       	add	r30, r14
   16b2c:	f1 1d       	adc	r31, r1
   16b2e:	80 81       	ld	r24, Z
   16b30:	90 e0       	ldi	r25, 0x00	; 0
   16b32:	b3 01       	movw	r22, r6
   16b34:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16b38:	ee 20       	and	r14, r14
   16b3a:	91 f7       	brne	.-28     	; 0x16b20 <vfprintf+0x6f0>
   16b3c:	06 c0       	rjmp	.+12     	; 0x16b4a <vfprintf+0x71a>
   16b3e:	80 e2       	ldi	r24, 0x20	; 32
   16b40:	90 e0       	ldi	r25, 0x00	; 0
   16b42:	b3 01       	movw	r22, r6
   16b44:	0e 94 77 b8 	call	0x170ee	; 0x170ee <fputc>
   16b48:	8a 94       	dec	r8
   16b4a:	88 20       	and	r8, r8
   16b4c:	c1 f7       	brne	.-16     	; 0x16b3e <vfprintf+0x70e>
   16b4e:	99 cc       	rjmp	.-1742   	; 0x16482 <vfprintf+0x52>
   16b50:	f3 01       	movw	r30, r6
   16b52:	66 81       	ldd	r22, Z+6	; 0x06
   16b54:	77 81       	ldd	r23, Z+7	; 0x07
   16b56:	cb 01       	movw	r24, r22
   16b58:	61 96       	adiw	r28, 0x11	; 17
   16b5a:	cd bf       	out	0x3d, r28	; 61
   16b5c:	de bf       	out	0x3e, r29	; 62
   16b5e:	cf 91       	pop	r28
   16b60:	df 91       	pop	r29
   16b62:	1f 91       	pop	r17
   16b64:	0f 91       	pop	r16
   16b66:	ff 90       	pop	r15
   16b68:	ef 90       	pop	r14
   16b6a:	df 90       	pop	r13
   16b6c:	cf 90       	pop	r12
   16b6e:	bf 90       	pop	r11
   16b70:	af 90       	pop	r10
   16b72:	9f 90       	pop	r9
   16b74:	8f 90       	pop	r8
   16b76:	7f 90       	pop	r7
   16b78:	6f 90       	pop	r6
   16b7a:	5f 90       	pop	r5
   16b7c:	4f 90       	pop	r4
   16b7e:	3f 90       	pop	r3
   16b80:	2f 90       	pop	r2
   16b82:	08 95       	ret

00016b84 <malloc>:
   16b84:	cf 93       	push	r28
   16b86:	df 93       	push	r29
   16b88:	bc 01       	movw	r22, r24
   16b8a:	82 30       	cpi	r24, 0x02	; 2
   16b8c:	91 05       	cpc	r25, r1
   16b8e:	10 f4       	brcc	.+4      	; 0x16b94 <malloc+0x10>
   16b90:	62 e0       	ldi	r22, 0x02	; 2
   16b92:	70 e0       	ldi	r23, 0x00	; 0
   16b94:	a0 91 06 26 	lds	r26, 0x2606
   16b98:	b0 91 07 26 	lds	r27, 0x2607
   16b9c:	ed 01       	movw	r28, r26
   16b9e:	e0 e0       	ldi	r30, 0x00	; 0
   16ba0:	f0 e0       	ldi	r31, 0x00	; 0
   16ba2:	40 e0       	ldi	r20, 0x00	; 0
   16ba4:	50 e0       	ldi	r21, 0x00	; 0
   16ba6:	21 c0       	rjmp	.+66     	; 0x16bea <malloc+0x66>
   16ba8:	88 81       	ld	r24, Y
   16baa:	99 81       	ldd	r25, Y+1	; 0x01
   16bac:	86 17       	cp	r24, r22
   16bae:	97 07       	cpc	r25, r23
   16bb0:	69 f4       	brne	.+26     	; 0x16bcc <malloc+0x48>
   16bb2:	8a 81       	ldd	r24, Y+2	; 0x02
   16bb4:	9b 81       	ldd	r25, Y+3	; 0x03
   16bb6:	30 97       	sbiw	r30, 0x00	; 0
   16bb8:	19 f0       	breq	.+6      	; 0x16bc0 <malloc+0x3c>
   16bba:	82 83       	std	Z+2, r24	; 0x02
   16bbc:	93 83       	std	Z+3, r25	; 0x03
   16bbe:	04 c0       	rjmp	.+8      	; 0x16bc8 <malloc+0x44>
   16bc0:	80 93 06 26 	sts	0x2606, r24
   16bc4:	90 93 07 26 	sts	0x2607, r25
   16bc8:	fe 01       	movw	r30, r28
   16bca:	34 c0       	rjmp	.+104    	; 0x16c34 <malloc+0xb0>
   16bcc:	68 17       	cp	r22, r24
   16bce:	79 07       	cpc	r23, r25
   16bd0:	38 f4       	brcc	.+14     	; 0x16be0 <malloc+0x5c>
   16bd2:	41 15       	cp	r20, r1
   16bd4:	51 05       	cpc	r21, r1
   16bd6:	19 f0       	breq	.+6      	; 0x16bde <malloc+0x5a>
   16bd8:	84 17       	cp	r24, r20
   16bda:	95 07       	cpc	r25, r21
   16bdc:	08 f4       	brcc	.+2      	; 0x16be0 <malloc+0x5c>
   16bde:	ac 01       	movw	r20, r24
   16be0:	fe 01       	movw	r30, r28
   16be2:	8a 81       	ldd	r24, Y+2	; 0x02
   16be4:	9b 81       	ldd	r25, Y+3	; 0x03
   16be6:	9c 01       	movw	r18, r24
   16be8:	e9 01       	movw	r28, r18
   16bea:	20 97       	sbiw	r28, 0x00	; 0
   16bec:	e9 f6       	brne	.-70     	; 0x16ba8 <malloc+0x24>
   16bee:	41 15       	cp	r20, r1
   16bf0:	51 05       	cpc	r21, r1
   16bf2:	a9 f1       	breq	.+106    	; 0x16c5e <malloc+0xda>
   16bf4:	ca 01       	movw	r24, r20
   16bf6:	86 1b       	sub	r24, r22
   16bf8:	97 0b       	sbc	r25, r23
   16bfa:	04 97       	sbiw	r24, 0x04	; 4
   16bfc:	08 f4       	brcc	.+2      	; 0x16c00 <malloc+0x7c>
   16bfe:	ba 01       	movw	r22, r20
   16c00:	e0 e0       	ldi	r30, 0x00	; 0
   16c02:	f0 e0       	ldi	r31, 0x00	; 0
   16c04:	2a c0       	rjmp	.+84     	; 0x16c5a <malloc+0xd6>
   16c06:	8d 91       	ld	r24, X+
   16c08:	9c 91       	ld	r25, X
   16c0a:	11 97       	sbiw	r26, 0x01	; 1
   16c0c:	84 17       	cp	r24, r20
   16c0e:	95 07       	cpc	r25, r21
   16c10:	f9 f4       	brne	.+62     	; 0x16c50 <malloc+0xcc>
   16c12:	64 17       	cp	r22, r20
   16c14:	75 07       	cpc	r23, r21
   16c16:	81 f4       	brne	.+32     	; 0x16c38 <malloc+0xb4>
   16c18:	12 96       	adiw	r26, 0x02	; 2
   16c1a:	8d 91       	ld	r24, X+
   16c1c:	9c 91       	ld	r25, X
   16c1e:	13 97       	sbiw	r26, 0x03	; 3
   16c20:	30 97       	sbiw	r30, 0x00	; 0
   16c22:	19 f0       	breq	.+6      	; 0x16c2a <malloc+0xa6>
   16c24:	82 83       	std	Z+2, r24	; 0x02
   16c26:	93 83       	std	Z+3, r25	; 0x03
   16c28:	04 c0       	rjmp	.+8      	; 0x16c32 <malloc+0xae>
   16c2a:	80 93 06 26 	sts	0x2606, r24
   16c2e:	90 93 07 26 	sts	0x2607, r25
   16c32:	fd 01       	movw	r30, r26
   16c34:	32 96       	adiw	r30, 0x02	; 2
   16c36:	4f c0       	rjmp	.+158    	; 0x16cd6 <malloc+0x152>
   16c38:	ca 01       	movw	r24, r20
   16c3a:	86 1b       	sub	r24, r22
   16c3c:	97 0b       	sbc	r25, r23
   16c3e:	fd 01       	movw	r30, r26
   16c40:	e8 0f       	add	r30, r24
   16c42:	f9 1f       	adc	r31, r25
   16c44:	61 93       	st	Z+, r22
   16c46:	71 93       	st	Z+, r23
   16c48:	02 97       	sbiw	r24, 0x02	; 2
   16c4a:	8d 93       	st	X+, r24
   16c4c:	9c 93       	st	X, r25
   16c4e:	43 c0       	rjmp	.+134    	; 0x16cd6 <malloc+0x152>
   16c50:	fd 01       	movw	r30, r26
   16c52:	82 81       	ldd	r24, Z+2	; 0x02
   16c54:	93 81       	ldd	r25, Z+3	; 0x03
   16c56:	9c 01       	movw	r18, r24
   16c58:	d9 01       	movw	r26, r18
   16c5a:	10 97       	sbiw	r26, 0x00	; 0
   16c5c:	a1 f6       	brne	.-88     	; 0x16c06 <malloc+0x82>
   16c5e:	80 91 04 26 	lds	r24, 0x2604
   16c62:	90 91 05 26 	lds	r25, 0x2605
   16c66:	89 2b       	or	r24, r25
   16c68:	41 f4       	brne	.+16     	; 0x16c7a <malloc+0xf6>
   16c6a:	80 91 81 22 	lds	r24, 0x2281
   16c6e:	90 91 82 22 	lds	r25, 0x2282
   16c72:	80 93 04 26 	sts	0x2604, r24
   16c76:	90 93 05 26 	sts	0x2605, r25
   16c7a:	40 91 83 22 	lds	r20, 0x2283
   16c7e:	50 91 84 22 	lds	r21, 0x2284
   16c82:	41 15       	cp	r20, r1
   16c84:	51 05       	cpc	r21, r1
   16c86:	41 f4       	brne	.+16     	; 0x16c98 <malloc+0x114>
   16c88:	4d b7       	in	r20, 0x3d	; 61
   16c8a:	5e b7       	in	r21, 0x3e	; 62
   16c8c:	80 91 7f 22 	lds	r24, 0x227F
   16c90:	90 91 80 22 	lds	r25, 0x2280
   16c94:	48 1b       	sub	r20, r24
   16c96:	59 0b       	sbc	r21, r25
   16c98:	20 91 04 26 	lds	r18, 0x2604
   16c9c:	30 91 05 26 	lds	r19, 0x2605
   16ca0:	24 17       	cp	r18, r20
   16ca2:	35 07       	cpc	r19, r21
   16ca4:	b0 f4       	brcc	.+44     	; 0x16cd2 <malloc+0x14e>
   16ca6:	ca 01       	movw	r24, r20
   16ca8:	82 1b       	sub	r24, r18
   16caa:	93 0b       	sbc	r25, r19
   16cac:	86 17       	cp	r24, r22
   16cae:	97 07       	cpc	r25, r23
   16cb0:	80 f0       	brcs	.+32     	; 0x16cd2 <malloc+0x14e>
   16cb2:	ab 01       	movw	r20, r22
   16cb4:	4e 5f       	subi	r20, 0xFE	; 254
   16cb6:	5f 4f       	sbci	r21, 0xFF	; 255
   16cb8:	84 17       	cp	r24, r20
   16cba:	95 07       	cpc	r25, r21
   16cbc:	50 f0       	brcs	.+20     	; 0x16cd2 <malloc+0x14e>
   16cbe:	42 0f       	add	r20, r18
   16cc0:	53 1f       	adc	r21, r19
   16cc2:	40 93 04 26 	sts	0x2604, r20
   16cc6:	50 93 05 26 	sts	0x2605, r21
   16cca:	f9 01       	movw	r30, r18
   16ccc:	61 93       	st	Z+, r22
   16cce:	71 93       	st	Z+, r23
   16cd0:	02 c0       	rjmp	.+4      	; 0x16cd6 <malloc+0x152>
   16cd2:	e0 e0       	ldi	r30, 0x00	; 0
   16cd4:	f0 e0       	ldi	r31, 0x00	; 0
   16cd6:	cf 01       	movw	r24, r30
   16cd8:	df 91       	pop	r29
   16cda:	cf 91       	pop	r28
   16cdc:	08 95       	ret

00016cde <free>:
   16cde:	cf 93       	push	r28
   16ce0:	df 93       	push	r29
   16ce2:	00 97       	sbiw	r24, 0x00	; 0
   16ce4:	09 f4       	brne	.+2      	; 0x16ce8 <free+0xa>
   16ce6:	50 c0       	rjmp	.+160    	; 0x16d88 <free+0xaa>
   16ce8:	ec 01       	movw	r28, r24
   16cea:	22 97       	sbiw	r28, 0x02	; 2
   16cec:	1a 82       	std	Y+2, r1	; 0x02
   16cee:	1b 82       	std	Y+3, r1	; 0x03
   16cf0:	a0 91 06 26 	lds	r26, 0x2606
   16cf4:	b0 91 07 26 	lds	r27, 0x2607
   16cf8:	10 97       	sbiw	r26, 0x00	; 0
   16cfa:	09 f1       	breq	.+66     	; 0x16d3e <free+0x60>
   16cfc:	40 e0       	ldi	r20, 0x00	; 0
   16cfe:	50 e0       	ldi	r21, 0x00	; 0
   16d00:	ac 17       	cp	r26, r28
   16d02:	bd 07       	cpc	r27, r29
   16d04:	08 f1       	brcs	.+66     	; 0x16d48 <free+0x6a>
   16d06:	aa 83       	std	Y+2, r26	; 0x02
   16d08:	bb 83       	std	Y+3, r27	; 0x03
   16d0a:	fe 01       	movw	r30, r28
   16d0c:	21 91       	ld	r18, Z+
   16d0e:	31 91       	ld	r19, Z+
   16d10:	e2 0f       	add	r30, r18
   16d12:	f3 1f       	adc	r31, r19
   16d14:	ae 17       	cp	r26, r30
   16d16:	bf 07       	cpc	r27, r31
   16d18:	79 f4       	brne	.+30     	; 0x16d38 <free+0x5a>
   16d1a:	8d 91       	ld	r24, X+
   16d1c:	9c 91       	ld	r25, X
   16d1e:	11 97       	sbiw	r26, 0x01	; 1
   16d20:	28 0f       	add	r18, r24
   16d22:	39 1f       	adc	r19, r25
   16d24:	2e 5f       	subi	r18, 0xFE	; 254
   16d26:	3f 4f       	sbci	r19, 0xFF	; 255
   16d28:	28 83       	st	Y, r18
   16d2a:	39 83       	std	Y+1, r19	; 0x01
   16d2c:	12 96       	adiw	r26, 0x02	; 2
   16d2e:	8d 91       	ld	r24, X+
   16d30:	9c 91       	ld	r25, X
   16d32:	13 97       	sbiw	r26, 0x03	; 3
   16d34:	8a 83       	std	Y+2, r24	; 0x02
   16d36:	9b 83       	std	Y+3, r25	; 0x03
   16d38:	41 15       	cp	r20, r1
   16d3a:	51 05       	cpc	r21, r1
   16d3c:	71 f4       	brne	.+28     	; 0x16d5a <free+0x7c>
   16d3e:	c0 93 06 26 	sts	0x2606, r28
   16d42:	d0 93 07 26 	sts	0x2607, r29
   16d46:	20 c0       	rjmp	.+64     	; 0x16d88 <free+0xaa>
   16d48:	12 96       	adiw	r26, 0x02	; 2
   16d4a:	8d 91       	ld	r24, X+
   16d4c:	9c 91       	ld	r25, X
   16d4e:	13 97       	sbiw	r26, 0x03	; 3
   16d50:	ad 01       	movw	r20, r26
   16d52:	00 97       	sbiw	r24, 0x00	; 0
   16d54:	11 f0       	breq	.+4      	; 0x16d5a <free+0x7c>
   16d56:	dc 01       	movw	r26, r24
   16d58:	d3 cf       	rjmp	.-90     	; 0x16d00 <free+0x22>
   16d5a:	fa 01       	movw	r30, r20
   16d5c:	c2 83       	std	Z+2, r28	; 0x02
   16d5e:	d3 83       	std	Z+3, r29	; 0x03
   16d60:	21 91       	ld	r18, Z+
   16d62:	31 91       	ld	r19, Z+
   16d64:	e2 0f       	add	r30, r18
   16d66:	f3 1f       	adc	r31, r19
   16d68:	ce 17       	cp	r28, r30
   16d6a:	df 07       	cpc	r29, r31
   16d6c:	69 f4       	brne	.+26     	; 0x16d88 <free+0xaa>
   16d6e:	88 81       	ld	r24, Y
   16d70:	99 81       	ldd	r25, Y+1	; 0x01
   16d72:	28 0f       	add	r18, r24
   16d74:	39 1f       	adc	r19, r25
   16d76:	2e 5f       	subi	r18, 0xFE	; 254
   16d78:	3f 4f       	sbci	r19, 0xFF	; 255
   16d7a:	fa 01       	movw	r30, r20
   16d7c:	20 83       	st	Z, r18
   16d7e:	31 83       	std	Z+1, r19	; 0x01
   16d80:	8a 81       	ldd	r24, Y+2	; 0x02
   16d82:	9b 81       	ldd	r25, Y+3	; 0x03
   16d84:	82 83       	std	Z+2, r24	; 0x02
   16d86:	93 83       	std	Z+3, r25	; 0x03
   16d88:	df 91       	pop	r29
   16d8a:	cf 91       	pop	r28
   16d8c:	08 95       	ret

00016d8e <atoi>:
   16d8e:	fc 01       	movw	r30, r24
   16d90:	88 27       	eor	r24, r24
   16d92:	99 27       	eor	r25, r25
   16d94:	e8 94       	clt
   16d96:	21 91       	ld	r18, Z+
   16d98:	20 32       	cpi	r18, 0x20	; 32
   16d9a:	e9 f3       	breq	.-6      	; 0x16d96 <atoi+0x8>
   16d9c:	29 30       	cpi	r18, 0x09	; 9
   16d9e:	10 f0       	brcs	.+4      	; 0x16da4 <atoi+0x16>
   16da0:	2e 30       	cpi	r18, 0x0E	; 14
   16da2:	c8 f3       	brcs	.-14     	; 0x16d96 <atoi+0x8>
   16da4:	2b 32       	cpi	r18, 0x2B	; 43
   16da6:	41 f0       	breq	.+16     	; 0x16db8 <atoi+0x2a>
   16da8:	2d 32       	cpi	r18, 0x2D	; 45
   16daa:	39 f4       	brne	.+14     	; 0x16dba <atoi+0x2c>
   16dac:	68 94       	set
   16dae:	04 c0       	rjmp	.+8      	; 0x16db8 <atoi+0x2a>
   16db0:	0e 94 6f b8 	call	0x170de	; 0x170de <__mulhi_const_10>
   16db4:	82 0f       	add	r24, r18
   16db6:	91 1d       	adc	r25, r1
   16db8:	21 91       	ld	r18, Z+
   16dba:	20 53       	subi	r18, 0x30	; 48
   16dbc:	2a 30       	cpi	r18, 0x0A	; 10
   16dbe:	c0 f3       	brcs	.-16     	; 0x16db0 <atoi+0x22>
   16dc0:	1e f4       	brtc	.+6      	; 0x16dc8 <atoi+0x3a>
   16dc2:	90 95       	com	r25
   16dc4:	81 95       	neg	r24
   16dc6:	9f 4f       	sbci	r25, 0xFF	; 255
   16dc8:	08 95       	ret

00016dca <exit>:
   16dca:	f8 94       	cli
   16dcc:	0c 94 b9 b9 	jmp	0x17372	; 0x17372 <_exit>

00016dd0 <__ftoa_engine>:
   16dd0:	28 30       	cpi	r18, 0x08	; 8
   16dd2:	08 f0       	brcs	.+2      	; 0x16dd6 <__ftoa_engine+0x6>
   16dd4:	27 e0       	ldi	r18, 0x07	; 7
   16dd6:	33 27       	eor	r19, r19
   16dd8:	da 01       	movw	r26, r20
   16dda:	99 0f       	add	r25, r25
   16ddc:	31 1d       	adc	r19, r1
   16dde:	87 fd       	sbrc	r24, 7
   16de0:	91 60       	ori	r25, 0x01	; 1
   16de2:	00 96       	adiw	r24, 0x00	; 0
   16de4:	61 05       	cpc	r22, r1
   16de6:	71 05       	cpc	r23, r1
   16de8:	39 f4       	brne	.+14     	; 0x16df8 <__ftoa_engine+0x28>
   16dea:	32 60       	ori	r19, 0x02	; 2
   16dec:	2e 5f       	subi	r18, 0xFE	; 254
   16dee:	3d 93       	st	X+, r19
   16df0:	30 e3       	ldi	r19, 0x30	; 48
   16df2:	2a 95       	dec	r18
   16df4:	e1 f7       	brne	.-8      	; 0x16dee <__ftoa_engine+0x1e>
   16df6:	08 95       	ret
   16df8:	9f 3f       	cpi	r25, 0xFF	; 255
   16dfa:	30 f0       	brcs	.+12     	; 0x16e08 <__ftoa_engine+0x38>
   16dfc:	80 38       	cpi	r24, 0x80	; 128
   16dfe:	71 05       	cpc	r23, r1
   16e00:	61 05       	cpc	r22, r1
   16e02:	09 f0       	breq	.+2      	; 0x16e06 <__ftoa_engine+0x36>
   16e04:	3c 5f       	subi	r19, 0xFC	; 252
   16e06:	3c 5f       	subi	r19, 0xFC	; 252
   16e08:	3d 93       	st	X+, r19
   16e0a:	91 30       	cpi	r25, 0x01	; 1
   16e0c:	08 f0       	brcs	.+2      	; 0x16e10 <__ftoa_engine+0x40>
   16e0e:	80 68       	ori	r24, 0x80	; 128
   16e10:	91 1d       	adc	r25, r1
   16e12:	df 93       	push	r29
   16e14:	cf 93       	push	r28
   16e16:	1f 93       	push	r17
   16e18:	0f 93       	push	r16
   16e1a:	ff 92       	push	r15
   16e1c:	ef 92       	push	r14
   16e1e:	19 2f       	mov	r17, r25
   16e20:	98 7f       	andi	r25, 0xF8	; 248
   16e22:	96 95       	lsr	r25
   16e24:	e9 2f       	mov	r30, r25
   16e26:	96 95       	lsr	r25
   16e28:	96 95       	lsr	r25
   16e2a:	e9 0f       	add	r30, r25
   16e2c:	ff 27       	eor	r31, r31
   16e2e:	ed 54       	subi	r30, 0x4D	; 77
   16e30:	f8 4e       	sbci	r31, 0xE8	; 232
   16e32:	99 27       	eor	r25, r25
   16e34:	33 27       	eor	r19, r19
   16e36:	ee 24       	eor	r14, r14
   16e38:	ff 24       	eor	r15, r15
   16e3a:	a7 01       	movw	r20, r14
   16e3c:	e7 01       	movw	r28, r14
   16e3e:	05 90       	lpm	r0, Z+
   16e40:	08 94       	sec
   16e42:	07 94       	ror	r0
   16e44:	28 f4       	brcc	.+10     	; 0x16e50 <__ftoa_engine+0x80>
   16e46:	36 0f       	add	r19, r22
   16e48:	e7 1e       	adc	r14, r23
   16e4a:	f8 1e       	adc	r15, r24
   16e4c:	49 1f       	adc	r20, r25
   16e4e:	51 1d       	adc	r21, r1
   16e50:	66 0f       	add	r22, r22
   16e52:	77 1f       	adc	r23, r23
   16e54:	88 1f       	adc	r24, r24
   16e56:	99 1f       	adc	r25, r25
   16e58:	06 94       	lsr	r0
   16e5a:	a1 f7       	brne	.-24     	; 0x16e44 <__ftoa_engine+0x74>
   16e5c:	05 90       	lpm	r0, Z+
   16e5e:	07 94       	ror	r0
   16e60:	28 f4       	brcc	.+10     	; 0x16e6c <__ftoa_engine+0x9c>
   16e62:	e7 0e       	add	r14, r23
   16e64:	f8 1e       	adc	r15, r24
   16e66:	49 1f       	adc	r20, r25
   16e68:	56 1f       	adc	r21, r22
   16e6a:	c1 1d       	adc	r28, r1
   16e6c:	77 0f       	add	r23, r23
   16e6e:	88 1f       	adc	r24, r24
   16e70:	99 1f       	adc	r25, r25
   16e72:	66 1f       	adc	r22, r22
   16e74:	06 94       	lsr	r0
   16e76:	a1 f7       	brne	.-24     	; 0x16e60 <__ftoa_engine+0x90>
   16e78:	05 90       	lpm	r0, Z+
   16e7a:	07 94       	ror	r0
   16e7c:	28 f4       	brcc	.+10     	; 0x16e88 <__ftoa_engine+0xb8>
   16e7e:	f8 0e       	add	r15, r24
   16e80:	49 1f       	adc	r20, r25
   16e82:	56 1f       	adc	r21, r22
   16e84:	c7 1f       	adc	r28, r23
   16e86:	d1 1d       	adc	r29, r1
   16e88:	88 0f       	add	r24, r24
   16e8a:	99 1f       	adc	r25, r25
   16e8c:	66 1f       	adc	r22, r22
   16e8e:	77 1f       	adc	r23, r23
   16e90:	06 94       	lsr	r0
   16e92:	a1 f7       	brne	.-24     	; 0x16e7c <__ftoa_engine+0xac>
   16e94:	05 90       	lpm	r0, Z+
   16e96:	07 94       	ror	r0
   16e98:	20 f4       	brcc	.+8      	; 0x16ea2 <__ftoa_engine+0xd2>
   16e9a:	49 0f       	add	r20, r25
   16e9c:	56 1f       	adc	r21, r22
   16e9e:	c7 1f       	adc	r28, r23
   16ea0:	d8 1f       	adc	r29, r24
   16ea2:	99 0f       	add	r25, r25
   16ea4:	66 1f       	adc	r22, r22
   16ea6:	77 1f       	adc	r23, r23
   16ea8:	88 1f       	adc	r24, r24
   16eaa:	06 94       	lsr	r0
   16eac:	a9 f7       	brne	.-22     	; 0x16e98 <__ftoa_engine+0xc8>
   16eae:	84 91       	lpm	r24, Z+
   16eb0:	10 95       	com	r17
   16eb2:	17 70       	andi	r17, 0x07	; 7
   16eb4:	41 f0       	breq	.+16     	; 0x16ec6 <__ftoa_engine+0xf6>
   16eb6:	d6 95       	lsr	r29
   16eb8:	c7 95       	ror	r28
   16eba:	57 95       	ror	r21
   16ebc:	47 95       	ror	r20
   16ebe:	f7 94       	ror	r15
   16ec0:	e7 94       	ror	r14
   16ec2:	1a 95       	dec	r17
   16ec4:	c1 f7       	brne	.-16     	; 0x16eb6 <__ftoa_engine+0xe6>
   16ec6:	e9 e5       	ldi	r30, 0x59	; 89
   16ec8:	f7 e1       	ldi	r31, 0x17	; 23
   16eca:	68 94       	set
   16ecc:	15 90       	lpm	r1, Z+
   16ece:	15 91       	lpm	r17, Z+
   16ed0:	35 91       	lpm	r19, Z+
   16ed2:	65 91       	lpm	r22, Z+
   16ed4:	95 91       	lpm	r25, Z+
   16ed6:	05 90       	lpm	r0, Z+
   16ed8:	7f e2       	ldi	r23, 0x2F	; 47
   16eda:	73 95       	inc	r23
   16edc:	e1 18       	sub	r14, r1
   16ede:	f1 0a       	sbc	r15, r17
   16ee0:	43 0b       	sbc	r20, r19
   16ee2:	56 0b       	sbc	r21, r22
   16ee4:	c9 0b       	sbc	r28, r25
   16ee6:	d0 09       	sbc	r29, r0
   16ee8:	c0 f7       	brcc	.-16     	; 0x16eda <__ftoa_engine+0x10a>
   16eea:	e1 0c       	add	r14, r1
   16eec:	f1 1e       	adc	r15, r17
   16eee:	43 1f       	adc	r20, r19
   16ef0:	56 1f       	adc	r21, r22
   16ef2:	c9 1f       	adc	r28, r25
   16ef4:	d0 1d       	adc	r29, r0
   16ef6:	7e f4       	brtc	.+30     	; 0x16f16 <__ftoa_engine+0x146>
   16ef8:	70 33       	cpi	r23, 0x30	; 48
   16efa:	11 f4       	brne	.+4      	; 0x16f00 <__ftoa_engine+0x130>
   16efc:	8a 95       	dec	r24
   16efe:	e6 cf       	rjmp	.-52     	; 0x16ecc <__ftoa_engine+0xfc>
   16f00:	e8 94       	clt
   16f02:	01 50       	subi	r16, 0x01	; 1
   16f04:	30 f0       	brcs	.+12     	; 0x16f12 <__ftoa_engine+0x142>
   16f06:	08 0f       	add	r16, r24
   16f08:	0a f4       	brpl	.+2      	; 0x16f0c <__ftoa_engine+0x13c>
   16f0a:	00 27       	eor	r16, r16
   16f0c:	02 17       	cp	r16, r18
   16f0e:	08 f4       	brcc	.+2      	; 0x16f12 <__ftoa_engine+0x142>
   16f10:	20 2f       	mov	r18, r16
   16f12:	23 95       	inc	r18
   16f14:	02 2f       	mov	r16, r18
   16f16:	7a 33       	cpi	r23, 0x3A	; 58
   16f18:	28 f0       	brcs	.+10     	; 0x16f24 <__ftoa_engine+0x154>
   16f1a:	79 e3       	ldi	r23, 0x39	; 57
   16f1c:	7d 93       	st	X+, r23
   16f1e:	2a 95       	dec	r18
   16f20:	e9 f7       	brne	.-6      	; 0x16f1c <__ftoa_engine+0x14c>
   16f22:	10 c0       	rjmp	.+32     	; 0x16f44 <__ftoa_engine+0x174>
   16f24:	7d 93       	st	X+, r23
   16f26:	2a 95       	dec	r18
   16f28:	89 f6       	brne	.-94     	; 0x16ecc <__ftoa_engine+0xfc>
   16f2a:	06 94       	lsr	r0
   16f2c:	97 95       	ror	r25
   16f2e:	67 95       	ror	r22
   16f30:	37 95       	ror	r19
   16f32:	17 95       	ror	r17
   16f34:	17 94       	ror	r1
   16f36:	e1 18       	sub	r14, r1
   16f38:	f1 0a       	sbc	r15, r17
   16f3a:	43 0b       	sbc	r20, r19
   16f3c:	56 0b       	sbc	r21, r22
   16f3e:	c9 0b       	sbc	r28, r25
   16f40:	d0 09       	sbc	r29, r0
   16f42:	98 f0       	brcs	.+38     	; 0x16f6a <__ftoa_engine+0x19a>
   16f44:	23 95       	inc	r18
   16f46:	7e 91       	ld	r23, -X
   16f48:	73 95       	inc	r23
   16f4a:	7a 33       	cpi	r23, 0x3A	; 58
   16f4c:	08 f0       	brcs	.+2      	; 0x16f50 <__ftoa_engine+0x180>
   16f4e:	70 e3       	ldi	r23, 0x30	; 48
   16f50:	7c 93       	st	X, r23
   16f52:	20 13       	cpse	r18, r16
   16f54:	b8 f7       	brcc	.-18     	; 0x16f44 <__ftoa_engine+0x174>
   16f56:	7e 91       	ld	r23, -X
   16f58:	70 61       	ori	r23, 0x10	; 16
   16f5a:	7d 93       	st	X+, r23
   16f5c:	30 f0       	brcs	.+12     	; 0x16f6a <__ftoa_engine+0x19a>
   16f5e:	83 95       	inc	r24
   16f60:	71 e3       	ldi	r23, 0x31	; 49
   16f62:	7d 93       	st	X+, r23
   16f64:	70 e3       	ldi	r23, 0x30	; 48
   16f66:	2a 95       	dec	r18
   16f68:	e1 f7       	brne	.-8      	; 0x16f62 <__ftoa_engine+0x192>
   16f6a:	11 24       	eor	r1, r1
   16f6c:	ef 90       	pop	r14
   16f6e:	ff 90       	pop	r15
   16f70:	0f 91       	pop	r16
   16f72:	1f 91       	pop	r17
   16f74:	cf 91       	pop	r28
   16f76:	df 91       	pop	r29
   16f78:	99 27       	eor	r25, r25
   16f7a:	87 fd       	sbrc	r24, 7
   16f7c:	90 95       	com	r25
   16f7e:	08 95       	ret

00016f80 <strcasecmp_P>:
   16f80:	fb 01       	movw	r30, r22
   16f82:	dc 01       	movw	r26, r24
   16f84:	8d 91       	ld	r24, X+
   16f86:	81 34       	cpi	r24, 0x41	; 65
   16f88:	1c f0       	brlt	.+6      	; 0x16f90 <strcasecmp_P+0x10>
   16f8a:	8b 35       	cpi	r24, 0x5B	; 91
   16f8c:	0c f4       	brge	.+2      	; 0x16f90 <strcasecmp_P+0x10>
   16f8e:	80 5e       	subi	r24, 0xE0	; 224
   16f90:	65 91       	lpm	r22, Z+
   16f92:	61 34       	cpi	r22, 0x41	; 65
   16f94:	1c f0       	brlt	.+6      	; 0x16f9c <strcasecmp_P+0x1c>
   16f96:	6b 35       	cpi	r22, 0x5B	; 91
   16f98:	0c f4       	brge	.+2      	; 0x16f9c <strcasecmp_P+0x1c>
   16f9a:	60 5e       	subi	r22, 0xE0	; 224
   16f9c:	86 1b       	sub	r24, r22
   16f9e:	61 11       	cpse	r22, r1
   16fa0:	89 f3       	breq	.-30     	; 0x16f84 <strcasecmp_P+0x4>
   16fa2:	99 0b       	sbc	r25, r25
   16fa4:	08 95       	ret

00016fa6 <strnlen_P>:
   16fa6:	fc 01       	movw	r30, r24
   16fa8:	05 90       	lpm	r0, Z+
   16faa:	61 50       	subi	r22, 0x01	; 1
   16fac:	70 40       	sbci	r23, 0x00	; 0
   16fae:	01 10       	cpse	r0, r1
   16fb0:	d8 f7       	brcc	.-10     	; 0x16fa8 <strnlen_P+0x2>
   16fb2:	80 95       	com	r24
   16fb4:	90 95       	com	r25
   16fb6:	8e 0f       	add	r24, r30
   16fb8:	9f 1f       	adc	r25, r31
   16fba:	08 95       	ret

00016fbc <strtok>:
   16fbc:	45 eb       	ldi	r20, 0xB5	; 181
   16fbe:	55 e2       	ldi	r21, 0x25	; 37
   16fc0:	0e 94 48 b8 	call	0x17090	; 0x17090 <strtok_r>
   16fc4:	08 95       	ret

00016fc6 <memcmp>:
   16fc6:	fb 01       	movw	r30, r22
   16fc8:	dc 01       	movw	r26, r24
   16fca:	04 c0       	rjmp	.+8      	; 0x16fd4 <memcmp+0xe>
   16fcc:	8d 91       	ld	r24, X+
   16fce:	01 90       	ld	r0, Z+
   16fd0:	80 19       	sub	r24, r0
   16fd2:	21 f4       	brne	.+8      	; 0x16fdc <memcmp+0x16>
   16fd4:	41 50       	subi	r20, 0x01	; 1
   16fd6:	50 40       	sbci	r21, 0x00	; 0
   16fd8:	c8 f7       	brcc	.-14     	; 0x16fcc <memcmp+0x6>
   16fda:	88 1b       	sub	r24, r24
   16fdc:	99 0b       	sbc	r25, r25
   16fde:	08 95       	ret

00016fe0 <memcpy>:
   16fe0:	fb 01       	movw	r30, r22
   16fe2:	dc 01       	movw	r26, r24
   16fe4:	02 c0       	rjmp	.+4      	; 0x16fea <memcpy+0xa>
   16fe6:	01 90       	ld	r0, Z+
   16fe8:	0d 92       	st	X+, r0
   16fea:	41 50       	subi	r20, 0x01	; 1
   16fec:	50 40       	sbci	r21, 0x00	; 0
   16fee:	d8 f7       	brcc	.-10     	; 0x16fe6 <memcpy+0x6>
   16ff0:	08 95       	ret

00016ff2 <memset>:
   16ff2:	dc 01       	movw	r26, r24
   16ff4:	01 c0       	rjmp	.+2      	; 0x16ff8 <memset+0x6>
   16ff6:	6d 93       	st	X+, r22
   16ff8:	41 50       	subi	r20, 0x01	; 1
   16ffa:	50 40       	sbci	r21, 0x00	; 0
   16ffc:	e0 f7       	brcc	.-8      	; 0x16ff6 <memset+0x4>
   16ffe:	08 95       	ret

00017000 <strcasecmp>:
   17000:	fb 01       	movw	r30, r22
   17002:	dc 01       	movw	r26, r24
   17004:	8d 91       	ld	r24, X+
   17006:	81 34       	cpi	r24, 0x41	; 65
   17008:	1c f0       	brlt	.+6      	; 0x17010 <strcasecmp+0x10>
   1700a:	8b 35       	cpi	r24, 0x5B	; 91
   1700c:	0c f4       	brge	.+2      	; 0x17010 <strcasecmp+0x10>
   1700e:	80 5e       	subi	r24, 0xE0	; 224
   17010:	61 91       	ld	r22, Z+
   17012:	61 34       	cpi	r22, 0x41	; 65
   17014:	1c f0       	brlt	.+6      	; 0x1701c <strcasecmp+0x1c>
   17016:	6b 35       	cpi	r22, 0x5B	; 91
   17018:	0c f4       	brge	.+2      	; 0x1701c <strcasecmp+0x1c>
   1701a:	60 5e       	subi	r22, 0xE0	; 224
   1701c:	86 1b       	sub	r24, r22
   1701e:	61 11       	cpse	r22, r1
   17020:	89 f3       	breq	.-30     	; 0x17004 <strcasecmp+0x4>
   17022:	99 0b       	sbc	r25, r25
   17024:	08 95       	ret

00017026 <strchr>:
   17026:	fc 01       	movw	r30, r24
   17028:	81 91       	ld	r24, Z+
   1702a:	86 17       	cp	r24, r22
   1702c:	21 f0       	breq	.+8      	; 0x17036 <strchr+0x10>
   1702e:	88 23       	and	r24, r24
   17030:	d9 f7       	brne	.-10     	; 0x17028 <strchr+0x2>
   17032:	99 27       	eor	r25, r25
   17034:	08 95       	ret
   17036:	31 97       	sbiw	r30, 0x01	; 1
   17038:	cf 01       	movw	r24, r30
   1703a:	08 95       	ret

0001703c <strcmp>:
   1703c:	fb 01       	movw	r30, r22
   1703e:	dc 01       	movw	r26, r24
   17040:	8d 91       	ld	r24, X+
   17042:	01 90       	ld	r0, Z+
   17044:	80 19       	sub	r24, r0
   17046:	01 10       	cpse	r0, r1
   17048:	d9 f3       	breq	.-10     	; 0x17040 <strcmp+0x4>
   1704a:	99 0b       	sbc	r25, r25
   1704c:	08 95       	ret

0001704e <strcpy>:
   1704e:	fb 01       	movw	r30, r22
   17050:	dc 01       	movw	r26, r24
   17052:	01 90       	ld	r0, Z+
   17054:	0d 92       	st	X+, r0
   17056:	00 20       	and	r0, r0
   17058:	e1 f7       	brne	.-8      	; 0x17052 <strcpy+0x4>
   1705a:	08 95       	ret

0001705c <strncpy>:
   1705c:	fb 01       	movw	r30, r22
   1705e:	dc 01       	movw	r26, r24
   17060:	41 50       	subi	r20, 0x01	; 1
   17062:	50 40       	sbci	r21, 0x00	; 0
   17064:	48 f0       	brcs	.+18     	; 0x17078 <strncpy+0x1c>
   17066:	01 90       	ld	r0, Z+
   17068:	0d 92       	st	X+, r0
   1706a:	00 20       	and	r0, r0
   1706c:	c9 f7       	brne	.-14     	; 0x17060 <strncpy+0x4>
   1706e:	01 c0       	rjmp	.+2      	; 0x17072 <strncpy+0x16>
   17070:	1d 92       	st	X+, r1
   17072:	41 50       	subi	r20, 0x01	; 1
   17074:	50 40       	sbci	r21, 0x00	; 0
   17076:	e0 f7       	brcc	.-8      	; 0x17070 <strncpy+0x14>
   17078:	08 95       	ret

0001707a <strnlen>:
   1707a:	fc 01       	movw	r30, r24
   1707c:	61 50       	subi	r22, 0x01	; 1
   1707e:	70 40       	sbci	r23, 0x00	; 0
   17080:	01 90       	ld	r0, Z+
   17082:	01 10       	cpse	r0, r1
   17084:	d8 f7       	brcc	.-10     	; 0x1707c <strnlen+0x2>
   17086:	80 95       	com	r24
   17088:	90 95       	com	r25
   1708a:	8e 0f       	add	r24, r30
   1708c:	9f 1f       	adc	r25, r31
   1708e:	08 95       	ret

00017090 <strtok_r>:
   17090:	fa 01       	movw	r30, r20
   17092:	a1 91       	ld	r26, Z+
   17094:	b0 81       	ld	r27, Z
   17096:	00 97       	sbiw	r24, 0x00	; 0
   17098:	19 f4       	brne	.+6      	; 0x170a0 <strtok_r+0x10>
   1709a:	10 97       	sbiw	r26, 0x00	; 0
   1709c:	e1 f0       	breq	.+56     	; 0x170d6 <strtok_r+0x46>
   1709e:	cd 01       	movw	r24, r26
   170a0:	dc 01       	movw	r26, r24
   170a2:	cd 01       	movw	r24, r26
   170a4:	0d 90       	ld	r0, X+
   170a6:	00 20       	and	r0, r0
   170a8:	11 f4       	brne	.+4      	; 0x170ae <strtok_r+0x1e>
   170aa:	c0 01       	movw	r24, r0
   170ac:	13 c0       	rjmp	.+38     	; 0x170d4 <strtok_r+0x44>
   170ae:	fb 01       	movw	r30, r22
   170b0:	21 91       	ld	r18, Z+
   170b2:	22 23       	and	r18, r18
   170b4:	19 f0       	breq	.+6      	; 0x170bc <strtok_r+0x2c>
   170b6:	20 15       	cp	r18, r0
   170b8:	d9 f7       	brne	.-10     	; 0x170b0 <strtok_r+0x20>
   170ba:	f3 cf       	rjmp	.-26     	; 0x170a2 <strtok_r+0x12>
   170bc:	fb 01       	movw	r30, r22
   170be:	21 91       	ld	r18, Z+
   170c0:	20 15       	cp	r18, r0
   170c2:	19 f4       	brne	.+6      	; 0x170ca <strtok_r+0x3a>
   170c4:	1e 92       	st	-X, r1
   170c6:	11 96       	adiw	r26, 0x01	; 1
   170c8:	06 c0       	rjmp	.+12     	; 0x170d6 <strtok_r+0x46>
   170ca:	22 23       	and	r18, r18
   170cc:	c1 f7       	brne	.-16     	; 0x170be <strtok_r+0x2e>
   170ce:	0d 90       	ld	r0, X+
   170d0:	00 20       	and	r0, r0
   170d2:	a1 f7       	brne	.-24     	; 0x170bc <strtok_r+0x2c>
   170d4:	d0 01       	movw	r26, r0
   170d6:	fa 01       	movw	r30, r20
   170d8:	a1 93       	st	Z+, r26
   170da:	b0 83       	st	Z, r27
   170dc:	08 95       	ret

000170de <__mulhi_const_10>:
   170de:	7a e0       	ldi	r23, 0x0A	; 10
   170e0:	97 9f       	mul	r25, r23
   170e2:	90 2d       	mov	r25, r0
   170e4:	87 9f       	mul	r24, r23
   170e6:	80 2d       	mov	r24, r0
   170e8:	91 0d       	add	r25, r1
   170ea:	11 24       	eor	r1, r1
   170ec:	08 95       	ret

000170ee <fputc>:
   170ee:	0f 93       	push	r16
   170f0:	1f 93       	push	r17
   170f2:	cf 93       	push	r28
   170f4:	df 93       	push	r29
   170f6:	8c 01       	movw	r16, r24
   170f8:	eb 01       	movw	r28, r22
   170fa:	8b 81       	ldd	r24, Y+3	; 0x03
   170fc:	81 ff       	sbrs	r24, 1
   170fe:	1b c0       	rjmp	.+54     	; 0x17136 <fputc+0x48>
   17100:	82 ff       	sbrs	r24, 2
   17102:	0d c0       	rjmp	.+26     	; 0x1711e <fputc+0x30>
   17104:	2e 81       	ldd	r18, Y+6	; 0x06
   17106:	3f 81       	ldd	r19, Y+7	; 0x07
   17108:	8c 81       	ldd	r24, Y+4	; 0x04
   1710a:	9d 81       	ldd	r25, Y+5	; 0x05
   1710c:	28 17       	cp	r18, r24
   1710e:	39 07       	cpc	r19, r25
   17110:	64 f4       	brge	.+24     	; 0x1712a <fputc+0x3c>
   17112:	e8 81       	ld	r30, Y
   17114:	f9 81       	ldd	r31, Y+1	; 0x01
   17116:	01 93       	st	Z+, r16
   17118:	e8 83       	st	Y, r30
   1711a:	f9 83       	std	Y+1, r31	; 0x01
   1711c:	06 c0       	rjmp	.+12     	; 0x1712a <fputc+0x3c>
   1711e:	e8 85       	ldd	r30, Y+8	; 0x08
   17120:	f9 85       	ldd	r31, Y+9	; 0x09
   17122:	80 2f       	mov	r24, r16
   17124:	19 95       	eicall
   17126:	89 2b       	or	r24, r25
   17128:	31 f4       	brne	.+12     	; 0x17136 <fputc+0x48>
   1712a:	8e 81       	ldd	r24, Y+6	; 0x06
   1712c:	9f 81       	ldd	r25, Y+7	; 0x07
   1712e:	01 96       	adiw	r24, 0x01	; 1
   17130:	8e 83       	std	Y+6, r24	; 0x06
   17132:	9f 83       	std	Y+7, r25	; 0x07
   17134:	02 c0       	rjmp	.+4      	; 0x1713a <fputc+0x4c>
   17136:	0f ef       	ldi	r16, 0xFF	; 255
   17138:	1f ef       	ldi	r17, 0xFF	; 255
   1713a:	c8 01       	movw	r24, r16
   1713c:	df 91       	pop	r29
   1713e:	cf 91       	pop	r28
   17140:	1f 91       	pop	r17
   17142:	0f 91       	pop	r16
   17144:	08 95       	ret

00017146 <sprintf>:
   17146:	0f 93       	push	r16
   17148:	1f 93       	push	r17
   1714a:	df 93       	push	r29
   1714c:	cf 93       	push	r28
   1714e:	cd b7       	in	r28, 0x3d	; 61
   17150:	de b7       	in	r29, 0x3e	; 62
   17152:	2e 97       	sbiw	r28, 0x0e	; 14
   17154:	cd bf       	out	0x3d, r28	; 61
   17156:	de bf       	out	0x3e, r29	; 62
   17158:	0e 89       	ldd	r16, Y+22	; 0x16
   1715a:	1f 89       	ldd	r17, Y+23	; 0x17
   1715c:	86 e0       	ldi	r24, 0x06	; 6
   1715e:	8c 83       	std	Y+4, r24	; 0x04
   17160:	09 83       	std	Y+1, r16	; 0x01
   17162:	1a 83       	std	Y+2, r17	; 0x02
   17164:	8f ef       	ldi	r24, 0xFF	; 255
   17166:	9f e7       	ldi	r25, 0x7F	; 127
   17168:	8d 83       	std	Y+5, r24	; 0x05
   1716a:	9e 83       	std	Y+6, r25	; 0x06
   1716c:	9e 01       	movw	r18, r28
   1716e:	26 5e       	subi	r18, 0xE6	; 230
   17170:	3f 4f       	sbci	r19, 0xFF	; 255
   17172:	ce 01       	movw	r24, r28
   17174:	01 96       	adiw	r24, 0x01	; 1
   17176:	68 8d       	ldd	r22, Y+24	; 0x18
   17178:	79 8d       	ldd	r23, Y+25	; 0x19
   1717a:	a9 01       	movw	r20, r18
   1717c:	0e 94 18 b2 	call	0x16430	; 0x16430 <vfprintf>
   17180:	2f 81       	ldd	r18, Y+7	; 0x07
   17182:	38 85       	ldd	r19, Y+8	; 0x08
   17184:	02 0f       	add	r16, r18
   17186:	13 1f       	adc	r17, r19
   17188:	f8 01       	movw	r30, r16
   1718a:	10 82       	st	Z, r1
   1718c:	2e 96       	adiw	r28, 0x0e	; 14
   1718e:	cd bf       	out	0x3d, r28	; 61
   17190:	de bf       	out	0x3e, r29	; 62
   17192:	cf 91       	pop	r28
   17194:	df 91       	pop	r29
   17196:	1f 91       	pop	r17
   17198:	0f 91       	pop	r16
   1719a:	08 95       	ret

0001719c <sprintf_P>:
   1719c:	0f 93       	push	r16
   1719e:	1f 93       	push	r17
   171a0:	df 93       	push	r29
   171a2:	cf 93       	push	r28
   171a4:	cd b7       	in	r28, 0x3d	; 61
   171a6:	de b7       	in	r29, 0x3e	; 62
   171a8:	2e 97       	sbiw	r28, 0x0e	; 14
   171aa:	cd bf       	out	0x3d, r28	; 61
   171ac:	de bf       	out	0x3e, r29	; 62
   171ae:	0e 89       	ldd	r16, Y+22	; 0x16
   171b0:	1f 89       	ldd	r17, Y+23	; 0x17
   171b2:	8e e0       	ldi	r24, 0x0E	; 14
   171b4:	8c 83       	std	Y+4, r24	; 0x04
   171b6:	09 83       	std	Y+1, r16	; 0x01
   171b8:	1a 83       	std	Y+2, r17	; 0x02
   171ba:	8f ef       	ldi	r24, 0xFF	; 255
   171bc:	9f e7       	ldi	r25, 0x7F	; 127
   171be:	8d 83       	std	Y+5, r24	; 0x05
   171c0:	9e 83       	std	Y+6, r25	; 0x06
   171c2:	9e 01       	movw	r18, r28
   171c4:	26 5e       	subi	r18, 0xE6	; 230
   171c6:	3f 4f       	sbci	r19, 0xFF	; 255
   171c8:	ce 01       	movw	r24, r28
   171ca:	01 96       	adiw	r24, 0x01	; 1
   171cc:	68 8d       	ldd	r22, Y+24	; 0x18
   171ce:	79 8d       	ldd	r23, Y+25	; 0x19
   171d0:	a9 01       	movw	r20, r18
   171d2:	0e 94 18 b2 	call	0x16430	; 0x16430 <vfprintf>
   171d6:	2f 81       	ldd	r18, Y+7	; 0x07
   171d8:	38 85       	ldd	r19, Y+8	; 0x08
   171da:	02 0f       	add	r16, r18
   171dc:	13 1f       	adc	r17, r19
   171de:	f8 01       	movw	r30, r16
   171e0:	10 82       	st	Z, r1
   171e2:	2e 96       	adiw	r28, 0x0e	; 14
   171e4:	cd bf       	out	0x3d, r28	; 61
   171e6:	de bf       	out	0x3e, r29	; 62
   171e8:	cf 91       	pop	r28
   171ea:	df 91       	pop	r29
   171ec:	1f 91       	pop	r17
   171ee:	0f 91       	pop	r16
   171f0:	08 95       	ret

000171f2 <__ultoa_invert>:
   171f2:	fa 01       	movw	r30, r20
   171f4:	aa 27       	eor	r26, r26
   171f6:	28 30       	cpi	r18, 0x08	; 8
   171f8:	51 f1       	breq	.+84     	; 0x1724e <__ultoa_invert+0x5c>
   171fa:	20 31       	cpi	r18, 0x10	; 16
   171fc:	81 f1       	breq	.+96     	; 0x1725e <__ultoa_invert+0x6c>
   171fe:	e8 94       	clt
   17200:	6f 93       	push	r22
   17202:	6e 7f       	andi	r22, 0xFE	; 254
   17204:	6e 5f       	subi	r22, 0xFE	; 254
   17206:	7f 4f       	sbci	r23, 0xFF	; 255
   17208:	8f 4f       	sbci	r24, 0xFF	; 255
   1720a:	9f 4f       	sbci	r25, 0xFF	; 255
   1720c:	af 4f       	sbci	r26, 0xFF	; 255
   1720e:	b1 e0       	ldi	r27, 0x01	; 1
   17210:	3e d0       	rcall	.+124    	; 0x1728e <__ultoa_invert+0x9c>
   17212:	b4 e0       	ldi	r27, 0x04	; 4
   17214:	3c d0       	rcall	.+120    	; 0x1728e <__ultoa_invert+0x9c>
   17216:	67 0f       	add	r22, r23
   17218:	78 1f       	adc	r23, r24
   1721a:	89 1f       	adc	r24, r25
   1721c:	9a 1f       	adc	r25, r26
   1721e:	a1 1d       	adc	r26, r1
   17220:	68 0f       	add	r22, r24
   17222:	79 1f       	adc	r23, r25
   17224:	8a 1f       	adc	r24, r26
   17226:	91 1d       	adc	r25, r1
   17228:	a1 1d       	adc	r26, r1
   1722a:	6a 0f       	add	r22, r26
   1722c:	71 1d       	adc	r23, r1
   1722e:	81 1d       	adc	r24, r1
   17230:	91 1d       	adc	r25, r1
   17232:	a1 1d       	adc	r26, r1
   17234:	20 d0       	rcall	.+64     	; 0x17276 <__ultoa_invert+0x84>
   17236:	09 f4       	brne	.+2      	; 0x1723a <__ultoa_invert+0x48>
   17238:	68 94       	set
   1723a:	3f 91       	pop	r19
   1723c:	2a e0       	ldi	r18, 0x0A	; 10
   1723e:	26 9f       	mul	r18, r22
   17240:	11 24       	eor	r1, r1
   17242:	30 19       	sub	r19, r0
   17244:	30 5d       	subi	r19, 0xD0	; 208
   17246:	31 93       	st	Z+, r19
   17248:	de f6       	brtc	.-74     	; 0x17200 <__ultoa_invert+0xe>
   1724a:	cf 01       	movw	r24, r30
   1724c:	08 95       	ret
   1724e:	46 2f       	mov	r20, r22
   17250:	47 70       	andi	r20, 0x07	; 7
   17252:	40 5d       	subi	r20, 0xD0	; 208
   17254:	41 93       	st	Z+, r20
   17256:	b3 e0       	ldi	r27, 0x03	; 3
   17258:	0f d0       	rcall	.+30     	; 0x17278 <__ultoa_invert+0x86>
   1725a:	c9 f7       	brne	.-14     	; 0x1724e <__ultoa_invert+0x5c>
   1725c:	f6 cf       	rjmp	.-20     	; 0x1724a <__ultoa_invert+0x58>
   1725e:	46 2f       	mov	r20, r22
   17260:	4f 70       	andi	r20, 0x0F	; 15
   17262:	40 5d       	subi	r20, 0xD0	; 208
   17264:	4a 33       	cpi	r20, 0x3A	; 58
   17266:	18 f0       	brcs	.+6      	; 0x1726e <__ultoa_invert+0x7c>
   17268:	49 5d       	subi	r20, 0xD9	; 217
   1726a:	31 fd       	sbrc	r19, 1
   1726c:	40 52       	subi	r20, 0x20	; 32
   1726e:	41 93       	st	Z+, r20
   17270:	02 d0       	rcall	.+4      	; 0x17276 <__ultoa_invert+0x84>
   17272:	a9 f7       	brne	.-22     	; 0x1725e <__ultoa_invert+0x6c>
   17274:	ea cf       	rjmp	.-44     	; 0x1724a <__ultoa_invert+0x58>
   17276:	b4 e0       	ldi	r27, 0x04	; 4
   17278:	a6 95       	lsr	r26
   1727a:	97 95       	ror	r25
   1727c:	87 95       	ror	r24
   1727e:	77 95       	ror	r23
   17280:	67 95       	ror	r22
   17282:	ba 95       	dec	r27
   17284:	c9 f7       	brne	.-14     	; 0x17278 <__ultoa_invert+0x86>
   17286:	00 97       	sbiw	r24, 0x00	; 0
   17288:	61 05       	cpc	r22, r1
   1728a:	71 05       	cpc	r23, r1
   1728c:	08 95       	ret
   1728e:	9b 01       	movw	r18, r22
   17290:	ac 01       	movw	r20, r24
   17292:	0a 2e       	mov	r0, r26
   17294:	06 94       	lsr	r0
   17296:	57 95       	ror	r21
   17298:	47 95       	ror	r20
   1729a:	37 95       	ror	r19
   1729c:	27 95       	ror	r18
   1729e:	ba 95       	dec	r27
   172a0:	c9 f7       	brne	.-14     	; 0x17294 <__ultoa_invert+0xa2>
   172a2:	62 0f       	add	r22, r18
   172a4:	73 1f       	adc	r23, r19
   172a6:	84 1f       	adc	r24, r20
   172a8:	95 1f       	adc	r25, r21
   172aa:	a0 1d       	adc	r26, r0
   172ac:	08 95       	ret

000172ae <__mulsi3>:
   172ae:	62 9f       	mul	r22, r18
   172b0:	d0 01       	movw	r26, r0
   172b2:	73 9f       	mul	r23, r19
   172b4:	f0 01       	movw	r30, r0
   172b6:	82 9f       	mul	r24, r18
   172b8:	e0 0d       	add	r30, r0
   172ba:	f1 1d       	adc	r31, r1
   172bc:	64 9f       	mul	r22, r20
   172be:	e0 0d       	add	r30, r0
   172c0:	f1 1d       	adc	r31, r1
   172c2:	92 9f       	mul	r25, r18
   172c4:	f0 0d       	add	r31, r0
   172c6:	83 9f       	mul	r24, r19
   172c8:	f0 0d       	add	r31, r0
   172ca:	74 9f       	mul	r23, r20
   172cc:	f0 0d       	add	r31, r0
   172ce:	65 9f       	mul	r22, r21
   172d0:	f0 0d       	add	r31, r0
   172d2:	99 27       	eor	r25, r25
   172d4:	72 9f       	mul	r23, r18
   172d6:	b0 0d       	add	r27, r0
   172d8:	e1 1d       	adc	r30, r1
   172da:	f9 1f       	adc	r31, r25
   172dc:	63 9f       	mul	r22, r19
   172de:	b0 0d       	add	r27, r0
   172e0:	e1 1d       	adc	r30, r1
   172e2:	f9 1f       	adc	r31, r25
   172e4:	bd 01       	movw	r22, r26
   172e6:	cf 01       	movw	r24, r30
   172e8:	11 24       	eor	r1, r1
   172ea:	08 95       	ret

000172ec <__udivmodsi4>:
   172ec:	a1 e2       	ldi	r26, 0x21	; 33
   172ee:	1a 2e       	mov	r1, r26
   172f0:	aa 1b       	sub	r26, r26
   172f2:	bb 1b       	sub	r27, r27
   172f4:	fd 01       	movw	r30, r26
   172f6:	0d c0       	rjmp	.+26     	; 0x17312 <__udivmodsi4_ep>

000172f8 <__udivmodsi4_loop>:
   172f8:	aa 1f       	adc	r26, r26
   172fa:	bb 1f       	adc	r27, r27
   172fc:	ee 1f       	adc	r30, r30
   172fe:	ff 1f       	adc	r31, r31
   17300:	a2 17       	cp	r26, r18
   17302:	b3 07       	cpc	r27, r19
   17304:	e4 07       	cpc	r30, r20
   17306:	f5 07       	cpc	r31, r21
   17308:	20 f0       	brcs	.+8      	; 0x17312 <__udivmodsi4_ep>
   1730a:	a2 1b       	sub	r26, r18
   1730c:	b3 0b       	sbc	r27, r19
   1730e:	e4 0b       	sbc	r30, r20
   17310:	f5 0b       	sbc	r31, r21

00017312 <__udivmodsi4_ep>:
   17312:	66 1f       	adc	r22, r22
   17314:	77 1f       	adc	r23, r23
   17316:	88 1f       	adc	r24, r24
   17318:	99 1f       	adc	r25, r25
   1731a:	1a 94       	dec	r1
   1731c:	69 f7       	brne	.-38     	; 0x172f8 <__udivmodsi4_loop>
   1731e:	60 95       	com	r22
   17320:	70 95       	com	r23
   17322:	80 95       	com	r24
   17324:	90 95       	com	r25
   17326:	9b 01       	movw	r18, r22
   17328:	ac 01       	movw	r20, r24
   1732a:	bd 01       	movw	r22, r26
   1732c:	cf 01       	movw	r24, r30
   1732e:	08 95       	ret

00017330 <__divmodsi4>:
   17330:	97 fb       	bst	r25, 7
   17332:	09 2e       	mov	r0, r25
   17334:	05 26       	eor	r0, r21
   17336:	0e d0       	rcall	.+28     	; 0x17354 <__divmodsi4_neg1>
   17338:	57 fd       	sbrc	r21, 7
   1733a:	04 d0       	rcall	.+8      	; 0x17344 <__divmodsi4_neg2>
   1733c:	d7 df       	rcall	.-82     	; 0x172ec <__udivmodsi4>
   1733e:	0a d0       	rcall	.+20     	; 0x17354 <__divmodsi4_neg1>
   17340:	00 1c       	adc	r0, r0
   17342:	38 f4       	brcc	.+14     	; 0x17352 <__divmodsi4_exit>

00017344 <__divmodsi4_neg2>:
   17344:	50 95       	com	r21
   17346:	40 95       	com	r20
   17348:	30 95       	com	r19
   1734a:	21 95       	neg	r18
   1734c:	3f 4f       	sbci	r19, 0xFF	; 255
   1734e:	4f 4f       	sbci	r20, 0xFF	; 255
   17350:	5f 4f       	sbci	r21, 0xFF	; 255

00017352 <__divmodsi4_exit>:
   17352:	08 95       	ret

00017354 <__divmodsi4_neg1>:
   17354:	f6 f7       	brtc	.-4      	; 0x17352 <__divmodsi4_exit>
   17356:	90 95       	com	r25
   17358:	80 95       	com	r24
   1735a:	70 95       	com	r23
   1735c:	61 95       	neg	r22
   1735e:	7f 4f       	sbci	r23, 0xFF	; 255
   17360:	8f 4f       	sbci	r24, 0xFF	; 255
   17362:	9f 4f       	sbci	r25, 0xFF	; 255
   17364:	08 95       	ret

00017366 <__tablejump2__>:
   17366:	ee 0f       	add	r30, r30
   17368:	ff 1f       	adc	r31, r31

0001736a <__tablejump__>:
   1736a:	05 90       	lpm	r0, Z+
   1736c:	f4 91       	lpm	r31, Z+
   1736e:	e0 2d       	mov	r30, r0
   17370:	19 94       	eijmp

00017372 <_exit>:
   17372:	f8 94       	cli

00017374 <__stop_program>:
   17374:	ff cf       	rjmp	.-2      	; 0x17374 <__stop_program>
