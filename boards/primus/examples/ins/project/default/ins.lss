
ins.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001f560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d8  00802000  0001f560  0001f5f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000866  008023d8  008023d8  0001f9cc  2**0
                  ALLOC
  3 .stab         000049a4  00000000  00000000  0001f9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001052  00000000  00000000  00024370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004f0  00000000  00000000  000253c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006800  00000000  00000000  000258b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001599  00000000  00000000  0002c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003817  00000000  00000000  0002d651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e50  00000000  00000000  00030e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000247c  00000000  00000000  00031cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f3d  00000000  00000000  00034134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  00038071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__ctors_end>
       4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
       8:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_2>
       c:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_3>
      10:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_4>
      14:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_5>
      18:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__vector_6>
      1c:	0c 94 82 25 	jmp	0x4b04	; 0x4b04 <__vector_7>
      20:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__vector_8>
      24:	0c 94 18 26 	jmp	0x4c30	; 0x4c30 <__vector_9>
      28:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      2c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      30:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__vector_12>
      34:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__vector_13>
      38:	0c 94 5f 2d 	jmp	0x5abe	; 0x5abe <__vector_14>
      3c:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <__vector_15>
      40:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__vector_16>
      44:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <__vector_17>
      48:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__vector_18>
      4c:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <__vector_19>
      50:	0c 94 10 2e 	jmp	0x5c20	; 0x5c20 <__vector_20>
      54:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      58:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__vector_22>
      5c:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__vector_23>
      60:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      64:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__vector_25>
      68:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_26>
      6c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      70:	0c 94 25 1a 	jmp	0x344a	; 0x344a <__vector_28>
      74:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__vector_29>
      78:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      7c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      80:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      84:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      88:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_34>
      8c:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_35>
      90:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      94:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      98:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      9c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      a0:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      a4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      a8:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      ac:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_43>
      b0:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_44>
      b4:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_45>
      b8:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__vector_46>
      bc:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__vector_47>
      c0:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      c4:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__vector_49>
      c8:	0c 94 5e 30 	jmp	0x60bc	; 0x60bc <__vector_50>
      cc:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__vector_51>
      d0:	0c 94 d4 30 	jmp	0x61a8	; 0x61a8 <__vector_52>
      d4:	0c 94 c0 31 	jmp	0x6380	; 0x6380 <__vector_53>
      d8:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      dc:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <__vector_55>
      e0:	0c 94 85 31 	jmp	0x630a	; 0x630a <__vector_56>
      e4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      e8:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__vector_58>
      ec:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__vector_59>
      f0:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
      f4:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__vector_61>
      f8:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__vector_62>
      fc:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     100:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_64>
     104:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_65>
     108:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_66>
     10c:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_67>
     110:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     114:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     118:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     11c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     120:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     124:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     128:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     12c:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__vector_75>
     130:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__vector_76>
     134:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__vector_77>
     138:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     13c:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <__vector_79>
     140:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <__vector_80>
     144:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <__vector_81>
     148:	0c 94 fc 2e 	jmp	0x5df8	; 0x5df8 <__vector_82>
     14c:	0c 94 e8 2f 	jmp	0x5fd0	; 0x5fd0 <__vector_83>
     150:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     154:	0c 94 72 2f 	jmp	0x5ee4	; 0x5ee4 <__vector_85>
     158:	0c 94 ad 2f 	jmp	0x5f5a	; 0x5f5a <__vector_86>
     15c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     160:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__vector_88>
     164:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__vector_89>
     168:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     16c:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__vector_91>
     170:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__vector_92>
     174:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     178:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_94>
     17c:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_95>
     180:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__vector_96>
     184:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <__vector_97>
     188:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_98>
     18c:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__vector_99>
     190:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_100>
     194:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_101>
     198:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     19c:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1a0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_104>
     1a4:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_105>
     1a8:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__vector_106>
     1ac:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__vector_107>
     1b0:	0c 94 e7 32 	jmp	0x65ce	; 0x65ce <__vector_108>
     1b4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1b8:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__vector_110>
     1bc:	0c 94 36 32 	jmp	0x646c	; 0x646c <__vector_111>
     1c0:	0c 94 71 32 	jmp	0x64e2	; 0x64e2 <__vector_112>
     1c4:	0c 94 ac 32 	jmp	0x6558	; 0x6558 <__vector_113>
     1c8:	0c 94 98 33 	jmp	0x6730	; 0x6730 <__vector_114>
     1cc:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1d0:	0c 94 22 33 	jmp	0x6644	; 0x6644 <__vector_116>
     1d4:	0c 94 5d 33 	jmp	0x66ba	; 0x66ba <__vector_117>
     1d8:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1dc:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <__vector_119>
     1e0:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__vector_120>
     1e4:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1e8:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__vector_122>
     1ec:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__vector_123>
     1f0:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__bad_interrupt>
     1f4:	55 10       	cpse	r5, r5
     1f6:	5a 10       	cpse	r5, r10
     1f8:	5f 10       	cpse	r5, r15
     1fa:	67 10       	cpse	r6, r7
     1fc:	6c 10       	cpse	r6, r12
     1fe:	71 10       	cpse	r7, r1
     200:	76 10       	cpse	r7, r6
     202:	7b 10       	cpse	r7, r11
     204:	80 10       	cpse	r8, r0
     206:	85 10       	cpse	r8, r5
     208:	8a 10       	cpse	r8, r10
     20a:	8f 10       	cpse	r8, r15
     20c:	94 10       	cpse	r9, r4
     20e:	99 10       	cpse	r9, r9
     210:	9e 10       	cpse	r9, r14
     212:	a3 10       	cpse	r10, r3
     214:	a8 10       	cpse	r10, r8
     216:	ad 10       	cpse	r10, r13
     218:	b2 10       	cpse	r11, r2
     21a:	b7 10       	cpse	r11, r7
     21c:	bc 10       	cpse	r11, r12
     21e:	c1 10       	cpse	r12, r1

00000220 <__c.4344>:
     220:	1b 63 00                                            .c.

00000223 <__c.4941>:
     223:	72 6f 6c 6c 20 3d 20 5b 25 34 64 2c 25 34 64 5d     roll = [%4d,%4d]
     233:	2c 20 70 69 74 63 68 20 3d 20 5b 25 34 64 2c 25     , pitch = [%4d,%
     243:	34 64 5d 2c 20 79 61 77 20 3d 20 5b 25 34 64 2c     4d], yaw = [%4d,
     253:	25 34 64 5d 2c 20 64 79 6e 61 6d 69 63 73 20 3d     %4d], dynamics =
     263:	20 25 64 0d 00                                       %d..

00000268 <__c.4943>:
     268:	67 79 72 6f 20 73 63 61 6c 65 20 78 20 3d 20 25     gyro scale x = %
     278:	34 64 2c 20 67 79 72 6f 20 73 63 61 6c 65 20 79     4d, gyro scale y
     288:	20 3d 20 25 34 64 2c 20 67 79 72 6f 20 73 63 61      = %4d, gyro sca
     298:	6c 65 20 7a 20 3d 20 25 34 64 0d 00                 le z = %4d..

000002a4 <__c.4945>:
     2a4:	67 79 72 6f 20 62 69 61 73 20 78 20 3d 20 25 34     gyro bias x = %4
     2b4:	64 2c 20 67 79 72 6f 20 62 69 61 73 20 79 20 3d     d, gyro bias y =
     2c4:	20 25 34 64 2c 20 67 79 72 6f 20 62 69 61 73 20      %4d, gyro bias 
     2d4:	7a 20 3d 20 25 34 64 0d 00                          z = %4d..

000002dd <__c.4493>:
     2dd:	23 63 73 64 20 25 66 20 25 66 20 25 66 20 25 66     #csd %f %f %f %f
     2ed:	20 25 66 20 25 66 20 25 66 20 25 66 20 25 66 20      %f %f %f %f %f 
     2fd:	25 66 20 25 66 0d 0a 00                             %f %f...

00000305 <__c.4459>:
     305:	23 63 61 6c 6d 73 67 20 23 63 6f 6c 6c 65 63 74     #calmsg #collect
     315:	20 52 6f 74 61 74 65 20 64 65 76 69 63 65 20 74      Rotate device t
     325:	6f 20 61 20 6e 65 77 20 6c 6f 63 61 74 69 6f 6e     o a new location
     335:	2c 20 70 72 65 73 73 20 65 6e 74 65 72 20 77 68     , press enter wh
     345:	65 6e 20 72 65 61 64 79 0d 0a 00                    en ready...

00000350 <__c.4462>:
     350:	23 63 61 6c 6d 73 67 20 23 63 61 6c 33 64 70 6f     #calmsg #cal3dpo
     360:	69 6e 74 20 25 66 20 25 66 20 25 66 20 25 66 20     int %f %f %f %f 
     370:	25 66 0d 0a 00                                      %f...

00000375 <__c.4467>:
     375:	23 63 61 6c 6d 73 67 20 23 63 6f 6c 6c 65 63 74     #calmsg #collect
     385:	20 52 6f 74 61 74 65 20 64 65 76 69 63 65 20 74      Rotate device t
     395:	6f 20 61 20 6e 65 77 20 6c 6f 63 61 74 69 6f 6e     o a new location
     3a5:	2c 20 70 72 65 73 73 20 65 6e 74 65 72 20 77 68     , press enter wh
     3b5:	65 6e 20 72 65 61 64 79 0d 0a 00                    en ready...

000003c0 <__c.4470>:
     3c0:	23 63 61 6c 6d 73 67 20 23 63 61 6c 33 64 70 6f     #calmsg #cal3dpo
     3d0:	69 6e 74 20 25 66 20 25 66 20 25 66 20 25 66 20     int %f %f %f %f 
     3e0:	25 66 0d 0a 00                                      %f...

000003e5 <__c.4474>:
     3e5:	23 63 61 6c 6d 73 67 20 23 63 61 6c 72 6f 74 6d     #calmsg #calrotm
     3f5:	61 74 72 69 78 20 25 2e 34 66 20 25 2e 34 66 20     atrix %.4f %.4f 
     405:	25 2e 34 66 20 25 2e 34 66 20 25 2e 34 66 20 25     %.4f %.4f %.4f %
     415:	2e 34 66 20 25 2e 34 66 20 25 2e 34 66 20 25 2e     .4f %.4f %.4f %.
     425:	34 66 0d 0a 00                                      4f...

0000042a <__c.4476>:
     42a:	23 63 61 6c 6d 73 67 20 23 61 78 69 73 73 63 61     #calmsg #axissca
     43a:	6c 65 20 25 2e 34 66 20 25 2e 34 66 20 25 2e 34     le %.4f %.4f %.4
     44a:	66 0d 0a 00                                         f...

0000044e <__c.4478>:
     44e:	23 63 61 6c 6d 73 67 20 23 61 78 69 73 62 69 61     #calmsg #axisbia
     45e:	73 20 25 2e 34 66 20 25 2e 34 66 20 25 2e 34 66     s %.4f %.4f %.4f
     46e:	0d 0a 00                                            ...

00000471 <__c.4480>:
     471:	23 63 61 6c 6d 73 67 20 23 72 65 73 75 6c 74 20     #calmsg #result 
     481:	70 61 73 73 65 64 0d 0a 00                          passed...

0000048a <__c.4482>:
     48a:	23 63 61 6c 6d 73 67 20 23 72 65 73 75 6c 74 20     #calmsg #result 
     49a:	66 61 69 6c 65 64 0d 0a 00                          failed...

000004a3 <__c.4813>:
     4a3:	49 6e 76 61 6c 69 64 20 74 6f 6b 65 6e 20 73 69     Invalid token si
     4b3:	7a 65 0a 0d 00                                      ze...

000004b8 <__c.4815>:
     4b8:	49 6e 76 61 6c 69 64 20 6e 75 6d 62 65 72 20 6f     Invalid number o
     4c8:	66 20 74 6f 6b 65 6e 73 0a 0d 00                    f tokens...

000004d3 <__c.4817>:
     4d3:	73 63 74 00                                         sct.

000004d7 <__c.4822>:
     4d7:	68 65 6c 70 00                                      help.

000004dc <__c.4824>:
     4dc:	73 64 6c 00                                         sdl.

000004e0 <__c.4826>:
     4e0:	64 65 76 00                                         dev.

000004e4 <__c.4828>:
     4e4:	74 6f 70 00                                         top.

000004e8 <__c.4830>:
     4e8:	6c 73 00                                            ls.

000004eb <__c.4832>:
     4eb:	72 6d 00                                            rm.

000004ee <__c.4834>:
     4ee:	2d 72 00                                            -r.

000004f1 <__c.4836>:
     4f1:	72 6d 64 69 72 00                                   rmdir.

000004f7 <__c.4838>:
     4f7:	6d 6b 64 69 72 00                                   mkdir.

000004fd <__c.4840>:
     4fd:	63 64 00                                            cd.

00000500 <__c.4843>:
     500:	2f 00                                               /.

00000502 <__c.4845>:
     502:	68 65 61 64 00                                      head.

00000507 <__c.4847>:
     507:	49 6e 76 61 6c 69 64 20 43 4d 44 0a 0d 00           Invalid CMD...

00000515 <__c.4688>:
     515:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     525:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     535:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     545:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     555:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00              ---------....

00000562 <__c.4690>:
     562:	7c 20 43 6f 6d 6d 61 6e 64 20 7c 20 20 20 20 20     | Command |     
     572:	41 72 67 75 6d 65 6e 74 73 20 20 20 20 20 7c 20     Arguments     | 
     582:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 65 73                  Des
     592:	63 72 69 70 74 69 6f 6e 20 20 20 20 20 20 20 20     cription        
     5a2:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000005af <__c.4692>:
     5af:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     5bf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d     --------------|-
     5cf:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     5df:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     5ef:	2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00              ---------|...

000005fc <__c.4694>:
     5fc:	7c 20 73 64 6c 20 20 20 20 20 7c 20 3c 61 72 67     | sdl     | <arg
     60c:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     61c:	53 65 74 20 74 68 65 20 64 65 62 75 67 20 6c 65     Set the debug le
     62c:	76 65 6c 2c 20 77 68 65 72 65 20 3c 61 72 67 31     vel, where <arg1
     63c:	3e 20 3d 20 20 20 20 20 20 7c 0a 0d 00              > =      |...

00000649 <__c.4696>:
     649:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     659:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     669:	30 2c 31 2c 32 20 28 6c 6f 77 2c 20 6d 65 64 2c     0,1,2 (low, med,
     679:	20 68 69 67 68 29 20 20 20 20 20 20 20 20 20 20      high)          
     689:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000696 <__c.4698>:
     696:	7c 20 64 65 76 20 20 20 20 20 7c 20 20 20 20 20     | dev     |     
     6a6:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     6b6:	52 65 74 75 72 6e 73 20 61 20 6c 69 73 74 20 6f     Returns a list o
     6c6:	66 20 61 63 74 69 76 65 20 64 72 69 76 65 72 73     f active drivers
     6d6:	2e 20 20 20 20 20 20 20 20 7c 0a 0d 00              .        |...

000006e3 <__c.4700>:
     6e3:	7c 20 74 6f 70 20 20 20 20 20 7c 20 20 20 20 20     | top     |     
     6f3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7c 20                   | 
     703:	44 69 73 70 6c 61 79 73 20 73 79 73 74 65 6d 20     Displays system 
     713:	73 74 61 74 69 73 74 69 63 73 2e 20 20 20 20 20     statistics.     
     723:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000730 <__c.4702>:
     730:	7c 20 6c 73 20 20 20 20 20 20 7c 20 3c 61 72 67     | ls      | <arg
     740:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     750:	44 69 73 70 6c 61 79 73 20 74 68 65 20 63 6f 6e     Displays the con
     760:	74 65 6e 74 73 20 6f 66 20 64 69 72 20 3c 61 72     tents of dir <ar
     770:	67 31 3e 2e 20 20 20 20 20 7c 0a 0d 00              g1>.     |...

0000077d <__c.4704>:
     77d:	7c 20 63 64 20 20 20 20 20 20 7c 20 3c 61 72 67     | cd      | <arg
     78d:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     79d:	43 68 61 6e 67 65 20 74 6f 20 64 69 72 20 3c 61     Change to dir <a
     7ad:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     7bd:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000007ca <__c.4706>:
     7ca:	7c 20 72 6d 20 20 20 20 20 20 7c 20 3c 61 72 67     | rm      | <arg
     7da:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     7ea:	52 65 6d 6f 76 65 20 61 20 66 69 6c 65 20 3c 61     Remove a file <a
     7fa:	72 67 31 3e 2e 20 20 20 20 20 20 20 20 20 20 20     rg1>.           
     80a:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000817 <__c.4708>:
     817:	7c 20 72 6d 64 69 72 20 20 20 7c 20 3c 61 72 67     | rmdir   | <arg
     827:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     837:	52 65 6d 6f 76 65 20 61 20 64 69 72 65 63 74 6f     Remove a directo
     847:	72 79 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     ry.             
     857:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

00000864 <__c.4710>:
     864:	7c 20 6d 6b 64 69 72 20 20 20 7c 20 3c 61 72 67     | mkdir   | <arg
     874:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     884:	43 72 65 61 74 65 20 61 20 64 69 72 65 63 74 6f     Create a directo
     894:	72 79 20 3c 61 72 67 31 3e 2e 20 20 20 20 20 20     ry <arg1>.      
     8a4:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000008b1 <__c.4712>:
     8b1:	7c 20 74 6f 75 63 68 20 20 20 7c 20 3c 61 72 67     | touch   | <arg
     8c1:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     8d1:	43 72 65 61 74 65 20 66 69 6c 65 20 3c 61 72 67     Create file <arg
     8e1:	31 3e 2e 20 20 20 20 20 20 20 20 20 20 20 20 20     1>.             
     8f1:	20 20 20 20 20 20 20 20 20 7c 0a 0d 00                       |...

000008fe <__c.4714>:
     8fe:	7c 20 68 65 61 64 20 20 20 20 7c 20 3c 61 72 67     | head    | <arg
     90e:	31 3e 20 20 20 20 20 20 20 20 20 20 20 20 7c 20     1>            | 
     91e:	50 72 69 6e 74 73 20 61 20 66 69 6c 65 20 3c 61     Prints a file <a
     92e:	72 67 31 3e 20 74 6f 20 74 68 65 20 74 65 72 6d     rg1> to the term
     93e:	69 6e 61 6c 2e 20 20 20 20 7c 0a 0d 00              inal.    |...

0000094b <__c.4716>:
     94b:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     95b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d     --------------'-
     96b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     97b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     98b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00              ---------'...

00000998 <__c.4725>:
     998:	49 6e 76 61 6c 69 64 20 4c 65 76 65 6c 0a 0d 00     Invalid Level...

000009a8 <__c.4727>:
     9a8:	54 68 65 20 27 45 6e 74 65 72 27 20 62 75 74 74     The 'Enter' butt
     9b8:	6f 6e 20 77 69 6c 6c 20 65 6e 61 62 6c 65 2f 64     on will enable/d
     9c8:	69 73 61 62 6c 65 20 61 20 64 65 62 75 67 67 69     isable a debuggi
     9d8:	6e 67 20 73 65 73 73 69 6f 6e 2e 20 50 72 65 73     ng session. Pres
     9e8:	73 20 27 45 6e 74 65 72 27 20 74 6f 20 62 65 67     s 'Enter' to beg
     9f8:	69 6e 2e 2e 2e 0a 0d 00                             in......

00000a00 <__c.4737>:
     a00:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     .---------------
     a10:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a20:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a30:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a     --------------..
     a40:	0d 00                                               ..

00000a42 <__c.4739>:
     a42:	7c 20 20 20 44 72 69 76 65 72 20 4e 61 6d 65 20     |   Driver Name 
     a52:	20 20 7c 20 4d 61 6a 6f 72 20 4e 75 6d 62 65 72       | Major Number
     a62:	20 7c 20 4d 69 6e 6f 72 20 4e 75 6d 62 65 72 7c      | Minor Number|
     a72:	20 23 20 6f 66 20 48 61 6e 64 6c 65 73 20 7c 0a      # of Handles |.
     a82:	0d 00                                               ..

00000a84 <__c.4741>:
     a84:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |---------------
     a94:	2d 2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --|-------------
     aa4:	2d 7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c     -|-------------|
     ab4:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a     --------------|.
     ac4:	0d 00                                               ..

00000ac6 <__c.4743>:
     ac6:	7c 20 25 31 36 73 7c 20 25 32 64 20 20 20 20 20     | %16s| %2d     
     ad6:	20 20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20           | %2d     
     ae6:	20 20 20 20 20 7c 20 25 32 64 20 20 20 20 20 20          | %2d      
     af6:	20 20 20 20 20 7c 0a 0d 00                               |...

00000aff <__c.4748>:
     aff:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     b0f:	2d 2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     --'-------------
     b1f:	2d 27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27     -'-------------'
     b2f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a     --------------'.
     b3f:	0d 00                                               ..

00000b41 <__c.4765>:
     b41:	2e 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     .---------.-----
     b51:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 2d 2d 2d 2d 2d     ----------.-----
     b61:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2e 0a 0d 00           ----------....

00000b6f <__c.4767>:
     b6f:	7c 20 53 65 63 74 69 6f 6e 20 7c 20 20 20 20 41     | Section |    A
     b7f:	64 64 72 65 73 73 20 20 20 20 7c 20 20 20 53 69     ddress    |   Si
     b8f:	7a 65 20 42 79 74 65 73 20 20 7c 0a 0d 00           ze Bytes  |...

00000b9d <__c.4769>:
     b9d:	7c 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     |---------|-----
     bad:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 2d 2d 2d 2d 2d     ----------|-----
     bbd:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 7c 0a 0d 00           ----------|...

00000bcb <__c.4771>:
     bcb:	7c 20 20 20 2e 64 61 74 61 20 7c 20 20 20 20 20     |   .data |     
     bdb:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     beb:	0a 0d 00                                            ...

00000bee <__c.4773>:
     bee:	7c 20 20 20 20 2e 62 73 73 20 7c 20 20 20 20 20     |    .bss |     
     bfe:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     c0e:	0a 0d 00                                            ...

00000c11 <__c.4775>:
     c11:	7c 20 20 20 2e 68 65 61 70 20 7c 20 20 20 20 20     |   .heap |     
     c21:	20 20 20 30 78 25 78 20 7c 20 25 31 33 64 20 7c        0x%x | %13d |
     c31:	0a 0d 00                                            ...

00000c34 <__c.4777>:
     c34:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     c44:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     c54:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000c62 <__c.4779>:
     c62:	7c 55 73 65 64 20 52 41 4d 20 7c 20 20 20 20 20     |Used RAM |     
     c72:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     c82:	20 7c 0a 0d 00                                       |...

00000c87 <__c.4781>:
     c87:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     c97:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     ca7:	25 25 20 7c 0a 0d 00                                %% |...

00000cae <__c.4783>:
     cae:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     cbe:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     cce:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000cdc <__c.4785>:
     cdc:	7c 46 72 65 65 20 52 41 4d 20 7c 20 20 20 20 20     |Free RAM |     
     cec:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 33 64               | %13d
     cfc:	20 7c 0a 0d 00                                       |...

00000d01 <__c.4787>:
     d01:	7c 20 20 20 20 20 20 20 20 20 7c 20 20 20 20 20     |         |     
     d11:	20 20 20 20 20 20 20 20 20 20 7c 20 25 31 32 64               | %12d
     d21:	25 25 20 7c 0a 0d 00                                %% |...

00000d28 <__c.4789>:
     d28:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     '---------'-----
     d38:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     d48:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000d56 <__c.4791>:
     d56:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     d66:	31 20 6d 69 6e 75 74 65 20 20 7c 20 25 31 32 2e     1 minute  | %12.
     d76:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

00000d7f <__c.4793>:
     d7f:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     d8f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     d9f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000dad <__c.4795>:
     dad:	7c 53 79 73 20 4c 6f 61 64 20 61 66 74 65 72 20     |Sys Load after 
     dbd:	35 20 6d 69 6e 75 74 65 73 20 7c 20 25 31 32 2e     5 minutes | %12.
     dcd:	31 66 25 25 20 7c 0a 0d 00                          1f%% |...

00000dd6 <__c.4797>:
     dd6:	27 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     '---------------
     de6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 2d 2d 2d 2d 2d     ----------'-----
     df6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 27 0a 0d 00           ----------'...

00000e04 <__c.4680>:
     e04:	0d 0a 50 72 65 73 73 20 27 45 6e 74 65 72 27 20     ..Press 'Enter' 
     e14:	74 6f 20 72 65 73 75 6d 65 2c 20 27 71 27 20 74     to resume, 'q' t
     e24:	6f 20 73 74 6f 70 2e 0a 0d 00                       o stop....

00000e2e <__c.4700>:
     e2e:	5b 25 30 32 64 3a 00                                [%02d:.

00000e35 <__c.4702>:
     e35:	5b 25 32 64 3a 00                                   [%2d:.

00000e3b <__c.4704>:
     e3b:	25 30 32 64 3a 00                                   %02d:.

00000e41 <__c.4706>:
     e41:	25 32 64 3a 00                                      %2d:.

00000e46 <__c.4708>:
     e46:	25 30 32 64 3a 00                                   %02d:.

00000e4c <__c.4710>:
     e4c:	25 32 64 3a 00                                      %2d:.

00000e51 <__c.4712>:
     e51:	25 30 30 33 64 5d 20 20 00                          %003d]  .

00000e5a <__c.4714>:
     e5a:	25 30 33 64 5d 20 20 00                             %03d]  .

00000e62 <__c.4716>:
     e62:	25 33 64 5d 20 20 00                                %3d]  .

00000e69 <__c.4068>:
     e69:	61 72 62 5f 73 79 73 54 69 6d 65 72 53 74 61 72     arb_sysTimerStar
     e79:	74 20 66 61 69 6c 65 64 20 77 69 74 68 20 25 64     t failed with %d
     e89:	2e 0a 0d 00                                         ....

00000e8d <__c.1905>:
     e8d:	6e 61 6e 00                                         nan.

00000e91 <__c.1903>:
     e91:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     ea1:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     eb1:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     ec1:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     ed1:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     ee1:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     ef1:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     f01:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     f11:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     f21:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     f31:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     f41:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     f51:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     f61:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     f71:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     f81:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000f90 <__ctors_end>:
     f90:	11 24       	eor	r1, r1
     f92:	1f be       	out	0x3f, r1	; 63
     f94:	cf ef       	ldi	r28, 0xFF	; 255
     f96:	df e3       	ldi	r29, 0x3F	; 63
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	0c bf       	out	0x3c, r16	; 60
     fa0:	18 be       	out	0x38, r1	; 56
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	1a be       	out	0x3a, r1	; 58
     fa6:	1b be       	out	0x3b, r1	; 59

00000fa8 <__do_copy_data>:
     fa8:	13 e2       	ldi	r17, 0x23	; 35
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e2       	ldi	r27, 0x20	; 32
     fae:	e0 e6       	ldi	r30, 0x60	; 96
     fb0:	f5 ef       	ldi	r31, 0xF5	; 245
     fb2:	01 e0       	ldi	r16, 0x01	; 1
     fb4:	0b bf       	out	0x3b, r16	; 59
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <__do_copy_data+0x14>
     fb8:	07 90       	elpm	r0, Z+
     fba:	0d 92       	st	X+, r0
     fbc:	a8 3d       	cpi	r26, 0xD8	; 216
     fbe:	b1 07       	cpc	r27, r17
     fc0:	d9 f7       	brne	.-10     	; 0xfb8 <__do_copy_data+0x10>
     fc2:	1b be       	out	0x3b, r1	; 59

00000fc4 <__do_clear_bss>:
     fc4:	1c e2       	ldi	r17, 0x2C	; 44
     fc6:	a8 ed       	ldi	r26, 0xD8	; 216
     fc8:	b3 e2       	ldi	r27, 0x23	; 35
     fca:	01 c0       	rjmp	.+2      	; 0xfce <.do_clear_bss_start>

00000fcc <.do_clear_bss_loop>:
     fcc:	1d 92       	st	X+, r1

00000fce <.do_clear_bss_start>:
     fce:	ae 33       	cpi	r26, 0x3E	; 62
     fd0:	b1 07       	cpc	r27, r17
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <.do_clear_bss_loop>
     fd4:	0e 94 31 c0 	call	0x18062	; 0x18062 <main>
     fd8:	0c 94 09 f6 	jmp	0x1ec12	; 0x1ec12 <exit>

00000fdc <__bad_interrupt>:
     fdc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000fe0 <findGpioIntElement>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	0f 92       	push	r0
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	e0 91 bd 20 	lds	r30, 0x20BD
     ff0:	f0 91 be 20 	lds	r31, 0x20BE
     ff4:	22 81       	ldd	r18, Z+2	; 0x02
     ff6:	33 81       	ldd	r19, Z+3	; 0x03
     ff8:	e0 91 bd 20 	lds	r30, 0x20BD
     ffc:	f0 91 be 20 	lds	r31, 0x20BE
    1000:	0c c0       	rjmp	.+24     	; 0x101a <findGpioIntElement+0x3a>
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	01 90       	ld	r0, Z+
    1008:	f0 81       	ld	r31, Z
    100a:	e0 2d       	mov	r30, r0
    100c:	90 81       	ld	r25, Z
    100e:	98 17       	cp	r25, r24
    1010:	69 f0       	breq	.+26     	; 0x102c <findGpioIntElement+0x4c>
    1012:	21 50       	subi	r18, 0x01	; 1
    1014:	30 40       	sbci	r19, 0x00	; 0
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	40 85       	ldd	r20, Z+8	; 0x08
    101c:	51 85       	ldd	r21, Z+9	; 0x09
    101e:	49 83       	std	Y+1, r20	; 0x01
    1020:	5a 83       	std	Y+2, r21	; 0x02
    1022:	12 16       	cp	r1, r18
    1024:	13 06       	cpc	r1, r19
    1026:	6c f3       	brlt	.-38     	; 0x1002 <findGpioIntElement+0x22>
    1028:	e0 e0       	ldi	r30, 0x00	; 0
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	cf 01       	movw	r24, r30
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <createIntHandle>:
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	0f 92       	push	r0
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	97 fd       	sbrc	r25, 7
    1056:	0c c0       	rjmp	.+24     	; 0x1070 <createIntHandle+0x38>
    1058:	80 91 bd 20 	lds	r24, 0x20BD
    105c:	90 91 be 20 	lds	r25, 0x20BE
    1060:	69 81       	ldd	r22, Y+1	; 0x01
    1062:	7a 81       	ldd	r23, Y+2	; 0x02
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <createIntHandle+0x3c>
    1070:	8e ef       	ldi	r24, 0xFE	; 254
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <confInt>:
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	0f 92       	push	r0
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	8c 01       	movw	r16, r24
    1098:	7b 01       	movw	r14, r22
    109a:	c4 2e       	mov	r12, r20
    109c:	d2 2e       	mov	r13, r18
    109e:	db 01       	movw	r26, r22
    10a0:	8c 91       	ld	r24, X
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	c1 f0       	breq	.+48     	; 0x10d6 <confInt+0x58>
    10a6:	89 30       	cpi	r24, 0x09	; 9
    10a8:	48 f4       	brcc	.+18     	; 0x10bc <confInt+0x3e>
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <confInt+0x32>
    10ae:	26 c1       	rjmp	.+588    	; 0x12fc <confInt+0x27e>
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	88 f0       	brcs	.+34     	; 0x10d6 <confInt+0x58>
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	09 f0       	breq	.+2      	; 0x10ba <confInt+0x3c>
    10b8:	21 c1       	rjmp	.+578    	; 0x12fc <confInt+0x27e>
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <confInt+0x58>
    10bc:	80 32       	cpi	r24, 0x20	; 32
    10be:	59 f0       	breq	.+22     	; 0x10d6 <confInt+0x58>
    10c0:	81 32       	cpi	r24, 0x21	; 33
    10c2:	20 f4       	brcc	.+8      	; 0x10cc <confInt+0x4e>
    10c4:	80 31       	cpi	r24, 0x10	; 16
    10c6:	09 f0       	breq	.+2      	; 0x10ca <confInt+0x4c>
    10c8:	19 c1       	rjmp	.+562    	; 0x12fc <confInt+0x27e>
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <confInt+0x58>
    10cc:	80 34       	cpi	r24, 0x40	; 64
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <confInt+0x58>
    10d0:	80 38       	cpi	r24, 0x80	; 128
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <confInt+0x58>
    10d4:	13 c1       	rjmp	.+550    	; 0x12fc <confInt+0x27e>
    10d6:	f8 01       	movw	r30, r16
    10d8:	90 81       	ld	r25, Z
    10da:	98 23       	and	r25, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <confInt+0x62>
    10de:	11 c1       	rjmp	.+546    	; 0x1302 <confInt+0x284>
    10e0:	8c 2d       	mov	r24, r12
    10e2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	09 f0       	breq	.+2      	; 0x10ec <confInt+0x6e>
    10ea:	80 c0       	rjmp	.+256    	; 0x11ec <confInt+0x16e>
    10ec:	0e 94 1c 08 	call	0x1038	; 0x1038 <createIntHandle>
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	97 fd       	sbrc	r25, 7
    10fa:	09 c1       	rjmp	.+530    	; 0x130e <confInt+0x290>
    10fc:	e9 81       	ldd	r30, Y+1	; 0x01
    10fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1100:	01 90       	ld	r0, Z+
    1102:	f0 81       	ld	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	c0 82       	st	Z, r12
    1108:	d7 01       	movw	r26, r14
    110a:	8c 91       	ld	r24, X
    110c:	81 83       	std	Z+1, r24	; 0x01
    110e:	12 96       	adiw	r26, 0x02	; 2
    1110:	8d 91       	ld	r24, X+
    1112:	9c 91       	ld	r25, X
    1114:	13 97       	sbiw	r26, 0x03	; 3
    1116:	82 83       	std	Z+2, r24	; 0x02
    1118:	93 83       	std	Z+3, r25	; 0x03
    111a:	8c 91       	ld	r24, X
    111c:	88 30       	cpi	r24, 0x08	; 8
    111e:	99 f1       	breq	.+102    	; 0x1186 <confInt+0x108>
    1120:	89 30       	cpi	r24, 0x09	; 9
    1122:	40 f4       	brcc	.+16     	; 0x1134 <confInt+0xb6>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	e9 f0       	breq	.+58     	; 0x1162 <confInt+0xe4>
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	21 f1       	breq	.+72     	; 0x1174 <confInt+0xf6>
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	09 f0       	breq	.+2      	; 0x1132 <confInt+0xb4>
    1130:	55 c0       	rjmp	.+170    	; 0x11dc <confInt+0x15e>
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <confInt+0xd2>
    1134:	80 32       	cpi	r24, 0x20	; 32
    1136:	c9 f1       	breq	.+114    	; 0x11aa <confInt+0x12c>
    1138:	81 32       	cpi	r24, 0x21	; 33
    113a:	20 f4       	brcc	.+8      	; 0x1144 <confInt+0xc6>
    113c:	80 31       	cpi	r24, 0x10	; 16
    113e:	09 f0       	breq	.+2      	; 0x1142 <confInt+0xc4>
    1140:	4d c0       	rjmp	.+154    	; 0x11dc <confInt+0x15e>
    1142:	2a c0       	rjmp	.+84     	; 0x1198 <confInt+0x11a>
    1144:	80 34       	cpi	r24, 0x40	; 64
    1146:	d1 f1       	breq	.+116    	; 0x11bc <confInt+0x13e>
    1148:	80 38       	cpi	r24, 0x80	; 128
    114a:	09 f0       	breq	.+2      	; 0x114e <confInt+0xd0>
    114c:	47 c0       	rjmp	.+142    	; 0x11dc <confInt+0x15e>
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <confInt+0x150>
    1150:	f8 01       	movw	r30, r16
    1152:	80 89       	ldd	r24, Z+16	; 0x10
    1154:	d7 01       	movw	r26, r14
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	9c 91       	ld	r25, X
    115a:	11 97       	sbiw	r26, 0x01	; 1
    115c:	89 2b       	or	r24, r25
    115e:	80 8b       	std	Z+16, r24	; 0x10
    1160:	3d c0       	rjmp	.+122    	; 0x11dc <confInt+0x15e>
    1162:	f8 01       	movw	r30, r16
    1164:	81 89       	ldd	r24, Z+17	; 0x11
    1166:	d7 01       	movw	r26, r14
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	9c 91       	ld	r25, X
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	89 2b       	or	r24, r25
    1170:	81 8b       	std	Z+17, r24	; 0x11
    1172:	34 c0       	rjmp	.+104    	; 0x11dc <confInt+0x15e>
    1174:	f8 01       	movw	r30, r16
    1176:	82 89       	ldd	r24, Z+18	; 0x12
    1178:	d7 01       	movw	r26, r14
    117a:	11 96       	adiw	r26, 0x01	; 1
    117c:	9c 91       	ld	r25, X
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	89 2b       	or	r24, r25
    1182:	82 8b       	std	Z+18, r24	; 0x12
    1184:	2b c0       	rjmp	.+86     	; 0x11dc <confInt+0x15e>
    1186:	f8 01       	movw	r30, r16
    1188:	83 89       	ldd	r24, Z+19	; 0x13
    118a:	d7 01       	movw	r26, r14
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	9c 91       	ld	r25, X
    1190:	11 97       	sbiw	r26, 0x01	; 1
    1192:	89 2b       	or	r24, r25
    1194:	83 8b       	std	Z+19, r24	; 0x13
    1196:	22 c0       	rjmp	.+68     	; 0x11dc <confInt+0x15e>
    1198:	f8 01       	movw	r30, r16
    119a:	84 89       	ldd	r24, Z+20	; 0x14
    119c:	d7 01       	movw	r26, r14
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	9c 91       	ld	r25, X
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	89 2b       	or	r24, r25
    11a6:	84 8b       	std	Z+20, r24	; 0x14
    11a8:	19 c0       	rjmp	.+50     	; 0x11dc <confInt+0x15e>
    11aa:	f8 01       	movw	r30, r16
    11ac:	85 89       	ldd	r24, Z+21	; 0x15
    11ae:	d7 01       	movw	r26, r14
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	9c 91       	ld	r25, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	89 2b       	or	r24, r25
    11b8:	85 8b       	std	Z+21, r24	; 0x15
    11ba:	10 c0       	rjmp	.+32     	; 0x11dc <confInt+0x15e>
    11bc:	f8 01       	movw	r30, r16
    11be:	86 89       	ldd	r24, Z+22	; 0x16
    11c0:	d7 01       	movw	r26, r14
    11c2:	11 96       	adiw	r26, 0x01	; 1
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	89 2b       	or	r24, r25
    11ca:	86 8b       	std	Z+22, r24	; 0x16
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <confInt+0x15e>
    11ce:	f8 01       	movw	r30, r16
    11d0:	87 89       	ldd	r24, Z+23	; 0x17
    11d2:	d7 01       	movw	r26, r14
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	9c 91       	ld	r25, X
    11d8:	89 2b       	or	r24, r25
    11da:	87 8b       	std	Z+23, r24	; 0x17
    11dc:	f8 01       	movw	r30, r16
    11de:	81 85       	ldd	r24, Z+9	; 0x09
    11e0:	83 60       	ori	r24, 0x03	; 3
    11e2:	81 87       	std	Z+9, r24	; 0x09
    11e4:	d7 01       	movw	r26, r14
    11e6:	8c 91       	ld	r24, X
    11e8:	82 87       	std	Z+10, r24	; 0x0a
    11ea:	85 c0       	rjmp	.+266    	; 0x12f6 <confInt+0x278>
    11ec:	8d 2d       	mov	r24, r13
    11ee:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <confInt+0x17a>
    11f6:	88 c0       	rjmp	.+272    	; 0x1308 <confInt+0x28a>
    11f8:	0e 94 1c 08 	call	0x1038	; 0x1038 <createIntHandle>
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	97 fd       	sbrc	r25, 7
    1206:	83 c0       	rjmp	.+262    	; 0x130e <confInt+0x290>
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	01 90       	ld	r0, Z+
    120e:	f0 81       	ld	r31, Z
    1210:	e0 2d       	mov	r30, r0
    1212:	d0 82       	st	Z, r13
    1214:	d7 01       	movw	r26, r14
    1216:	8c 91       	ld	r24, X
    1218:	81 83       	std	Z+1, r24	; 0x01
    121a:	12 96       	adiw	r26, 0x02	; 2
    121c:	8d 91       	ld	r24, X+
    121e:	9c 91       	ld	r25, X
    1220:	13 97       	sbiw	r26, 0x03	; 3
    1222:	82 83       	std	Z+2, r24	; 0x02
    1224:	93 83       	std	Z+3, r25	; 0x03
    1226:	8c 91       	ld	r24, X
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	99 f1       	breq	.+102    	; 0x1292 <confInt+0x214>
    122c:	89 30       	cpi	r24, 0x09	; 9
    122e:	40 f4       	brcc	.+16     	; 0x1240 <confInt+0x1c2>
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	e9 f0       	breq	.+58     	; 0x126e <confInt+0x1f0>
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	21 f1       	breq	.+72     	; 0x1280 <confInt+0x202>
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	09 f0       	breq	.+2      	; 0x123e <confInt+0x1c0>
    123c:	55 c0       	rjmp	.+170    	; 0x12e8 <confInt+0x26a>
    123e:	0e c0       	rjmp	.+28     	; 0x125c <confInt+0x1de>
    1240:	80 32       	cpi	r24, 0x20	; 32
    1242:	c9 f1       	breq	.+114    	; 0x12b6 <confInt+0x238>
    1244:	81 32       	cpi	r24, 0x21	; 33
    1246:	20 f4       	brcc	.+8      	; 0x1250 <confInt+0x1d2>
    1248:	80 31       	cpi	r24, 0x10	; 16
    124a:	09 f0       	breq	.+2      	; 0x124e <confInt+0x1d0>
    124c:	4d c0       	rjmp	.+154    	; 0x12e8 <confInt+0x26a>
    124e:	2a c0       	rjmp	.+84     	; 0x12a4 <confInt+0x226>
    1250:	80 34       	cpi	r24, 0x40	; 64
    1252:	d1 f1       	breq	.+116    	; 0x12c8 <confInt+0x24a>
    1254:	80 38       	cpi	r24, 0x80	; 128
    1256:	09 f0       	breq	.+2      	; 0x125a <confInt+0x1dc>
    1258:	47 c0       	rjmp	.+142    	; 0x12e8 <confInt+0x26a>
    125a:	3f c0       	rjmp	.+126    	; 0x12da <confInt+0x25c>
    125c:	f8 01       	movw	r30, r16
    125e:	80 89       	ldd	r24, Z+16	; 0x10
    1260:	d7 01       	movw	r26, r14
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	9c 91       	ld	r25, X
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	89 2b       	or	r24, r25
    126a:	80 8b       	std	Z+16, r24	; 0x10
    126c:	3d c0       	rjmp	.+122    	; 0x12e8 <confInt+0x26a>
    126e:	f8 01       	movw	r30, r16
    1270:	81 89       	ldd	r24, Z+17	; 0x11
    1272:	d7 01       	movw	r26, r14
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 91       	ld	r25, X
    1278:	11 97       	sbiw	r26, 0x01	; 1
    127a:	89 2b       	or	r24, r25
    127c:	81 8b       	std	Z+17, r24	; 0x11
    127e:	34 c0       	rjmp	.+104    	; 0x12e8 <confInt+0x26a>
    1280:	f8 01       	movw	r30, r16
    1282:	82 89       	ldd	r24, Z+18	; 0x12
    1284:	d7 01       	movw	r26, r14
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	9c 91       	ld	r25, X
    128a:	11 97       	sbiw	r26, 0x01	; 1
    128c:	89 2b       	or	r24, r25
    128e:	82 8b       	std	Z+18, r24	; 0x12
    1290:	2b c0       	rjmp	.+86     	; 0x12e8 <confInt+0x26a>
    1292:	f8 01       	movw	r30, r16
    1294:	83 89       	ldd	r24, Z+19	; 0x13
    1296:	d7 01       	movw	r26, r14
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	9c 91       	ld	r25, X
    129c:	11 97       	sbiw	r26, 0x01	; 1
    129e:	89 2b       	or	r24, r25
    12a0:	83 8b       	std	Z+19, r24	; 0x13
    12a2:	22 c0       	rjmp	.+68     	; 0x12e8 <confInt+0x26a>
    12a4:	f8 01       	movw	r30, r16
    12a6:	84 89       	ldd	r24, Z+20	; 0x14
    12a8:	d7 01       	movw	r26, r14
    12aa:	11 96       	adiw	r26, 0x01	; 1
    12ac:	9c 91       	ld	r25, X
    12ae:	11 97       	sbiw	r26, 0x01	; 1
    12b0:	89 2b       	or	r24, r25
    12b2:	84 8b       	std	Z+20, r24	; 0x14
    12b4:	19 c0       	rjmp	.+50     	; 0x12e8 <confInt+0x26a>
    12b6:	f8 01       	movw	r30, r16
    12b8:	85 89       	ldd	r24, Z+21	; 0x15
    12ba:	d7 01       	movw	r26, r14
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	9c 91       	ld	r25, X
    12c0:	11 97       	sbiw	r26, 0x01	; 1
    12c2:	89 2b       	or	r24, r25
    12c4:	85 8b       	std	Z+21, r24	; 0x15
    12c6:	10 c0       	rjmp	.+32     	; 0x12e8 <confInt+0x26a>
    12c8:	f8 01       	movw	r30, r16
    12ca:	86 89       	ldd	r24, Z+22	; 0x16
    12cc:	d7 01       	movw	r26, r14
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	9c 91       	ld	r25, X
    12d2:	11 97       	sbiw	r26, 0x01	; 1
    12d4:	89 2b       	or	r24, r25
    12d6:	86 8b       	std	Z+22, r24	; 0x16
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <confInt+0x26a>
    12da:	f8 01       	movw	r30, r16
    12dc:	87 89       	ldd	r24, Z+23	; 0x17
    12de:	d7 01       	movw	r26, r14
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	9c 91       	ld	r25, X
    12e4:	89 2b       	or	r24, r25
    12e6:	87 8b       	std	Z+23, r24	; 0x17
    12e8:	f8 01       	movw	r30, r16
    12ea:	81 85       	ldd	r24, Z+9	; 0x09
    12ec:	8c 60       	ori	r24, 0x0C	; 12
    12ee:	81 87       	std	Z+9, r24	; 0x09
    12f0:	d7 01       	movw	r26, r14
    12f2:	8c 91       	ld	r24, X
    12f4:	83 87       	std	Z+11, r24	; 0x0b
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	0b c0       	rjmp	.+22     	; 0x1312 <confInt+0x294>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	9f ef       	ldi	r25, 0xFF	; 255
    1300:	08 c0       	rjmp	.+16     	; 0x1312 <confInt+0x294>
    1302:	8a ef       	ldi	r24, 0xFA	; 250
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <confInt+0x294>
    1308:	89 ef       	ldi	r24, 0xF9	; 249
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <confInt+0x294>
    130e:	8e ef       	ldi	r24, 0xFE	; 254
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	08 95       	ret

00001328 <confPort>:
    1328:	fc 01       	movw	r30, r24
    132a:	db 01       	movw	r26, r22
    132c:	11 96       	adiw	r26, 0x01	; 1
    132e:	8c 91       	ld	r24, X
    1330:	11 97       	sbiw	r26, 0x01	; 1
    1332:	88 23       	and	r24, r24
    1334:	09 f1       	breq	.+66     	; 0x1378 <confPort+0x50>
    1336:	12 96       	adiw	r26, 0x02	; 2
    1338:	9c 91       	ld	r25, X
    133a:	12 97       	sbiw	r26, 0x02	; 2
    133c:	99 23       	and	r25, r25
    133e:	11 f0       	breq	.+4      	; 0x1344 <confPort+0x1c>
    1340:	86 83       	std	Z+6, r24	; 0x06
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <confPort+0x1e>
    1344:	85 83       	std	Z+5, r24	; 0x05
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	8c 91       	ld	r24, X
    134a:	11 97       	sbiw	r26, 0x01	; 1
    134c:	81 83       	std	Z+1, r24	; 0x01
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	8c 91       	ld	r24, X
    1352:	11 97       	sbiw	r26, 0x01	; 1
    1354:	80 93 b0 00 	sts	0x00B0, r24
    1358:	14 96       	adiw	r26, 0x04	; 4
    135a:	8c 91       	ld	r24, X
    135c:	14 97       	sbiw	r26, 0x04	; 4
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	29 f0       	breq	.+10     	; 0x136c <confPort+0x44>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	40 f0       	brcs	.+16     	; 0x1376 <confPort+0x4e>
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	31 f4       	brne	.+12     	; 0x1376 <confPort+0x4e>
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <confPort+0x48>
    136c:	80 e2       	ldi	r24, 0x20	; 32
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <confPort+0x4a>
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	80 8b       	std	Z+16, r24	; 0x10
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <confPort+0x50>
    1376:	10 8a       	std	Z+16, r1	; 0x10
    1378:	8c 91       	ld	r24, X
    137a:	88 23       	and	r24, r24
    137c:	c1 f0       	breq	.+48     	; 0x13ae <confPort+0x86>
    137e:	11 86       	std	Z+9, r1	; 0x09
    1380:	8c 91       	ld	r24, X
    1382:	82 83       	std	Z+2, r24	; 0x02
    1384:	8c 91       	ld	r24, X
    1386:	80 93 b0 00 	sts	0x00B0, r24
    138a:	13 96       	adiw	r26, 0x03	; 3
    138c:	8c 91       	ld	r24, X
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	29 f0       	breq	.+10     	; 0x139e <confPort+0x76>
    1394:	85 30       	cpi	r24, 0x05	; 5
    1396:	29 f0       	breq	.+10     	; 0x13a2 <confPort+0x7a>
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	41 f4       	brne	.+16     	; 0x13ac <confPort+0x84>
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <confPort+0x7e>
    139e:	80 e1       	ldi	r24, 0x10	; 16
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <confPort+0x80>
    13a2:	88 e1       	ldi	r24, 0x18	; 24
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <confPort+0x80>
    13a6:	88 e0       	ldi	r24, 0x08	; 8
    13a8:	80 8b       	std	Z+16, r24	; 0x10
    13aa:	08 95       	ret
    13ac:	10 8a       	std	Z+16, r1	; 0x10
    13ae:	08 95       	ret

000013b0 <__vector_66>:
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	08 b6       	in	r0, 0x38	; 56
    13ba:	0f 92       	push	r0
    13bc:	09 b6       	in	r0, 0x39	; 57
    13be:	0f 92       	push	r0
    13c0:	0b b6       	in	r0, 0x3b	; 59
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    13e4:	dc 01       	movw	r26, r24
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	51 f0       	breq	.+20     	; 0x13fe <__vector_66+0x4e>
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	ed 91       	ld	r30, X+
    13ee:	fc 91       	ld	r31, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	21 f0       	breq	.+8      	; 0x13fe <__vector_66+0x4e>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	6c 91       	ld	r22, X
    13fc:	19 95       	eicall
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0b be       	out	0x3b, r0	; 59
    141a:	0f 90       	pop	r0
    141c:	09 be       	out	0x39, r0	; 57
    141e:	0f 90       	pop	r0
    1420:	08 be       	out	0x38, r0	; 56
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_67>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	08 b6       	in	r0, 0x38	; 56
    1436:	0f 92       	push	r0
    1438:	09 b6       	in	r0, 0x39	; 57
    143a:	0f 92       	push	r0
    143c:	0b b6       	in	r0, 0x3b	; 59
    143e:	0f 92       	push	r0
    1440:	11 24       	eor	r1, r1
    1442:	2f 93       	push	r18
    1444:	3f 93       	push	r19
    1446:	4f 93       	push	r20
    1448:	5f 93       	push	r21
    144a:	6f 93       	push	r22
    144c:	7f 93       	push	r23
    144e:	8f 93       	push	r24
    1450:	9f 93       	push	r25
    1452:	af 93       	push	r26
    1454:	bf 93       	push	r27
    1456:	ef 93       	push	r30
    1458:	ff 93       	push	r31
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1460:	dc 01       	movw	r26, r24
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	51 f0       	breq	.+20     	; 0x147a <__vector_67+0x4e>
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	13 97       	sbiw	r26, 0x03	; 3
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	21 f0       	breq	.+8      	; 0x147a <__vector_67+0x4e>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	6c 91       	ld	r22, X
    1478:	19 95       	eicall
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0b be       	out	0x3b, r0	; 59
    1496:	0f 90       	pop	r0
    1498:	09 be       	out	0x39, r0	; 57
    149a:	0f 90       	pop	r0
    149c:	08 be       	out	0x38, r0	; 56
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_34>:
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	08 b6       	in	r0, 0x38	; 56
    14b2:	0f 92       	push	r0
    14b4:	09 b6       	in	r0, 0x39	; 57
    14b6:	0f 92       	push	r0
    14b8:	0b b6       	in	r0, 0x3b	; 59
    14ba:	0f 92       	push	r0
    14bc:	11 24       	eor	r1, r1
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    14dc:	dc 01       	movw	r26, r24
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	51 f0       	breq	.+20     	; 0x14f6 <__vector_34+0x4e>
    14e2:	12 96       	adiw	r26, 0x02	; 2
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	13 97       	sbiw	r26, 0x03	; 3
    14ea:	30 97       	sbiw	r30, 0x00	; 0
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <__vector_34+0x4e>
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	6c 91       	ld	r22, X
    14f4:	19 95       	eicall
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0b be       	out	0x3b, r0	; 59
    1512:	0f 90       	pop	r0
    1514:	09 be       	out	0x39, r0	; 57
    1516:	0f 90       	pop	r0
    1518:	08 be       	out	0x38, r0	; 56
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_35>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	08 b6       	in	r0, 0x38	; 56
    152e:	0f 92       	push	r0
    1530:	09 b6       	in	r0, 0x39	; 57
    1532:	0f 92       	push	r0
    1534:	0b b6       	in	r0, 0x3b	; 59
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1558:	dc 01       	movw	r26, r24
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	51 f0       	breq	.+20     	; 0x1572 <__vector_35+0x4e>
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	ed 91       	ld	r30, X+
    1562:	fc 91       	ld	r31, X
    1564:	13 97       	sbiw	r26, 0x03	; 3
    1566:	30 97       	sbiw	r30, 0x00	; 0
    1568:	21 f0       	breq	.+8      	; 0x1572 <__vector_35+0x4e>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	6c 91       	ld	r22, X
    1570:	19 95       	eicall
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0b be       	out	0x3b, r0	; 59
    158e:	0f 90       	pop	r0
    1590:	09 be       	out	0x39, r0	; 57
    1592:	0f 90       	pop	r0
    1594:	08 be       	out	0x38, r0	; 56
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_2>:
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	08 b6       	in	r0, 0x38	; 56
    15aa:	0f 92       	push	r0
    15ac:	09 b6       	in	r0, 0x39	; 57
    15ae:	0f 92       	push	r0
    15b0:	0b b6       	in	r0, 0x3b	; 59
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	84 e0       	ldi	r24, 0x04	; 4
    15d0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    15d4:	dc 01       	movw	r26, r24
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	51 f0       	breq	.+20     	; 0x15ee <__vector_2+0x4e>
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	ed 91       	ld	r30, X+
    15de:	fc 91       	ld	r31, X
    15e0:	13 97       	sbiw	r26, 0x03	; 3
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	21 f0       	breq	.+8      	; 0x15ee <__vector_2+0x4e>
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	6c 91       	ld	r22, X
    15ec:	19 95       	eicall
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0b be       	out	0x3b, r0	; 59
    160a:	0f 90       	pop	r0
    160c:	09 be       	out	0x39, r0	; 57
    160e:	0f 90       	pop	r0
    1610:	08 be       	out	0x38, r0	; 56
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <__vector_3>:
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	08 b6       	in	r0, 0x38	; 56
    1626:	0f 92       	push	r0
    1628:	09 b6       	in	r0, 0x39	; 57
    162a:	0f 92       	push	r0
    162c:	0b b6       	in	r0, 0x3b	; 59
    162e:	0f 92       	push	r0
    1630:	11 24       	eor	r1, r1
    1632:	2f 93       	push	r18
    1634:	3f 93       	push	r19
    1636:	4f 93       	push	r20
    1638:	5f 93       	push	r21
    163a:	6f 93       	push	r22
    163c:	7f 93       	push	r23
    163e:	8f 93       	push	r24
    1640:	9f 93       	push	r25
    1642:	af 93       	push	r26
    1644:	bf 93       	push	r27
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	85 e0       	ldi	r24, 0x05	; 5
    164c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1650:	dc 01       	movw	r26, r24
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	51 f0       	breq	.+20     	; 0x166a <__vector_3+0x4e>
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	ed 91       	ld	r30, X+
    165a:	fc 91       	ld	r31, X
    165c:	13 97       	sbiw	r26, 0x03	; 3
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	21 f0       	breq	.+8      	; 0x166a <__vector_3+0x4e>
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	6c 91       	ld	r22, X
    1668:	19 95       	eicall
    166a:	ff 91       	pop	r31
    166c:	ef 91       	pop	r30
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	7f 91       	pop	r23
    1678:	6f 91       	pop	r22
    167a:	5f 91       	pop	r21
    167c:	4f 91       	pop	r20
    167e:	3f 91       	pop	r19
    1680:	2f 91       	pop	r18
    1682:	0f 90       	pop	r0
    1684:	0b be       	out	0x3b, r0	; 59
    1686:	0f 90       	pop	r0
    1688:	09 be       	out	0x39, r0	; 57
    168a:	0f 90       	pop	r0
    168c:	08 be       	out	0x38, r0	; 56
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_64>:
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	08 b6       	in	r0, 0x38	; 56
    16a2:	0f 92       	push	r0
    16a4:	09 b6       	in	r0, 0x39	; 57
    16a6:	0f 92       	push	r0
    16a8:	0b b6       	in	r0, 0x3b	; 59
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    16cc:	dc 01       	movw	r26, r24
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	51 f0       	breq	.+20     	; 0x16e6 <__vector_64+0x4e>
    16d2:	12 96       	adiw	r26, 0x02	; 2
    16d4:	ed 91       	ld	r30, X+
    16d6:	fc 91       	ld	r31, X
    16d8:	13 97       	sbiw	r26, 0x03	; 3
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <__vector_64+0x4e>
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	6c 91       	ld	r22, X
    16e4:	19 95       	eicall
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0b be       	out	0x3b, r0	; 59
    1702:	0f 90       	pop	r0
    1704:	09 be       	out	0x39, r0	; 57
    1706:	0f 90       	pop	r0
    1708:	08 be       	out	0x38, r0	; 56
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti

00001714 <__vector_65>:
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	08 b6       	in	r0, 0x38	; 56
    171e:	0f 92       	push	r0
    1720:	09 b6       	in	r0, 0x39	; 57
    1722:	0f 92       	push	r0
    1724:	0b b6       	in	r0, 0x3b	; 59
    1726:	0f 92       	push	r0
    1728:	11 24       	eor	r1, r1
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
    1742:	87 e0       	ldi	r24, 0x07	; 7
    1744:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1748:	dc 01       	movw	r26, r24
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	51 f0       	breq	.+20     	; 0x1762 <__vector_65+0x4e>
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	13 97       	sbiw	r26, 0x03	; 3
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	21 f0       	breq	.+8      	; 0x1762 <__vector_65+0x4e>
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	6c 91       	ld	r22, X
    1760:	19 95       	eicall
    1762:	ff 91       	pop	r31
    1764:	ef 91       	pop	r30
    1766:	bf 91       	pop	r27
    1768:	af 91       	pop	r26
    176a:	9f 91       	pop	r25
    176c:	8f 91       	pop	r24
    176e:	7f 91       	pop	r23
    1770:	6f 91       	pop	r22
    1772:	5f 91       	pop	r21
    1774:	4f 91       	pop	r20
    1776:	3f 91       	pop	r19
    1778:	2f 91       	pop	r18
    177a:	0f 90       	pop	r0
    177c:	0b be       	out	0x3b, r0	; 59
    177e:	0f 90       	pop	r0
    1780:	09 be       	out	0x39, r0	; 57
    1782:	0f 90       	pop	r0
    1784:	08 be       	out	0x38, r0	; 56
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <__vector_43>:
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	08 b6       	in	r0, 0x38	; 56
    179a:	0f 92       	push	r0
    179c:	09 b6       	in	r0, 0x39	; 57
    179e:	0f 92       	push	r0
    17a0:	0b b6       	in	r0, 0x3b	; 59
    17a2:	0f 92       	push	r0
    17a4:	11 24       	eor	r1, r1
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	88 e0       	ldi	r24, 0x08	; 8
    17c0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    17c4:	dc 01       	movw	r26, r24
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	51 f0       	breq	.+20     	; 0x17de <__vector_43+0x4e>
    17ca:	12 96       	adiw	r26, 0x02	; 2
    17cc:	ed 91       	ld	r30, X+
    17ce:	fc 91       	ld	r31, X
    17d0:	13 97       	sbiw	r26, 0x03	; 3
    17d2:	30 97       	sbiw	r30, 0x00	; 0
    17d4:	21 f0       	breq	.+8      	; 0x17de <__vector_43+0x4e>
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	11 96       	adiw	r26, 0x01	; 1
    17da:	6c 91       	ld	r22, X
    17dc:	19 95       	eicall
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0b be       	out	0x3b, r0	; 59
    17fa:	0f 90       	pop	r0
    17fc:	09 be       	out	0x39, r0	; 57
    17fe:	0f 90       	pop	r0
    1800:	08 be       	out	0x38, r0	; 56
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_44>:
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	08 b6       	in	r0, 0x38	; 56
    1816:	0f 92       	push	r0
    1818:	09 b6       	in	r0, 0x39	; 57
    181a:	0f 92       	push	r0
    181c:	0b b6       	in	r0, 0x3b	; 59
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	2f 93       	push	r18
    1824:	3f 93       	push	r19
    1826:	4f 93       	push	r20
    1828:	5f 93       	push	r21
    182a:	6f 93       	push	r22
    182c:	7f 93       	push	r23
    182e:	8f 93       	push	r24
    1830:	9f 93       	push	r25
    1832:	af 93       	push	r26
    1834:	bf 93       	push	r27
    1836:	ef 93       	push	r30
    1838:	ff 93       	push	r31
    183a:	89 e0       	ldi	r24, 0x09	; 9
    183c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1840:	dc 01       	movw	r26, r24
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	51 f0       	breq	.+20     	; 0x185a <__vector_44+0x4e>
    1846:	12 96       	adiw	r26, 0x02	; 2
    1848:	ed 91       	ld	r30, X+
    184a:	fc 91       	ld	r31, X
    184c:	13 97       	sbiw	r26, 0x03	; 3
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	21 f0       	breq	.+8      	; 0x185a <__vector_44+0x4e>
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	6c 91       	ld	r22, X
    1858:	19 95       	eicall
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0b be       	out	0x3b, r0	; 59
    1876:	0f 90       	pop	r0
    1878:	09 be       	out	0x39, r0	; 57
    187a:	0f 90       	pop	r0
    187c:	08 be       	out	0x38, r0	; 56
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_104>:
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	08 b6       	in	r0, 0x38	; 56
    1892:	0f 92       	push	r0
    1894:	09 b6       	in	r0, 0x39	; 57
    1896:	0f 92       	push	r0
    1898:	0b b6       	in	r0, 0x3b	; 59
    189a:	0f 92       	push	r0
    189c:	11 24       	eor	r1, r1
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	6f 93       	push	r22
    18a8:	7f 93       	push	r23
    18aa:	8f 93       	push	r24
    18ac:	9f 93       	push	r25
    18ae:	af 93       	push	r26
    18b0:	bf 93       	push	r27
    18b2:	ef 93       	push	r30
    18b4:	ff 93       	push	r31
    18b6:	8a e0       	ldi	r24, 0x0A	; 10
    18b8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    18bc:	dc 01       	movw	r26, r24
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	51 f0       	breq	.+20     	; 0x18d6 <__vector_104+0x4e>
    18c2:	12 96       	adiw	r26, 0x02	; 2
    18c4:	ed 91       	ld	r30, X+
    18c6:	fc 91       	ld	r31, X
    18c8:	13 97       	sbiw	r26, 0x03	; 3
    18ca:	30 97       	sbiw	r30, 0x00	; 0
    18cc:	21 f0       	breq	.+8      	; 0x18d6 <__vector_104+0x4e>
    18ce:	85 e0       	ldi	r24, 0x05	; 5
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	6c 91       	ld	r22, X
    18d4:	19 95       	eicall
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	0f 90       	pop	r0
    18f0:	0b be       	out	0x3b, r0	; 59
    18f2:	0f 90       	pop	r0
    18f4:	09 be       	out	0x39, r0	; 57
    18f6:	0f 90       	pop	r0
    18f8:	08 be       	out	0x38, r0	; 56
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_105>:
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	08 b6       	in	r0, 0x38	; 56
    190e:	0f 92       	push	r0
    1910:	09 b6       	in	r0, 0x39	; 57
    1912:	0f 92       	push	r0
    1914:	0b b6       	in	r0, 0x3b	; 59
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
    1932:	8b e0       	ldi	r24, 0x0B	; 11
    1934:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1938:	dc 01       	movw	r26, r24
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	51 f0       	breq	.+20     	; 0x1952 <__vector_105+0x4e>
    193e:	12 96       	adiw	r26, 0x02	; 2
    1940:	ed 91       	ld	r30, X+
    1942:	fc 91       	ld	r31, X
    1944:	13 97       	sbiw	r26, 0x03	; 3
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	21 f0       	breq	.+8      	; 0x1952 <__vector_105+0x4e>
    194a:	85 e0       	ldi	r24, 0x05	; 5
    194c:	11 96       	adiw	r26, 0x01	; 1
    194e:	6c 91       	ld	r22, X
    1950:	19 95       	eicall
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0b be       	out	0x3b, r0	; 59
    196e:	0f 90       	pop	r0
    1970:	09 be       	out	0x39, r0	; 57
    1972:	0f 90       	pop	r0
    1974:	08 be       	out	0x38, r0	; 56
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti

00001980 <__vector_96>:
    1980:	1f 92       	push	r1
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	0f 92       	push	r0
    1988:	08 b6       	in	r0, 0x38	; 56
    198a:	0f 92       	push	r0
    198c:	09 b6       	in	r0, 0x39	; 57
    198e:	0f 92       	push	r0
    1990:	0b b6       	in	r0, 0x3b	; 59
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	2f 93       	push	r18
    1998:	3f 93       	push	r19
    199a:	4f 93       	push	r20
    199c:	5f 93       	push	r21
    199e:	6f 93       	push	r22
    19a0:	7f 93       	push	r23
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	8c e0       	ldi	r24, 0x0C	; 12
    19b0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    19b4:	dc 01       	movw	r26, r24
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	51 f0       	breq	.+20     	; 0x19ce <__vector_96+0x4e>
    19ba:	12 96       	adiw	r26, 0x02	; 2
    19bc:	ed 91       	ld	r30, X+
    19be:	fc 91       	ld	r31, X
    19c0:	13 97       	sbiw	r26, 0x03	; 3
    19c2:	30 97       	sbiw	r30, 0x00	; 0
    19c4:	21 f0       	breq	.+8      	; 0x19ce <__vector_96+0x4e>
    19c6:	86 e0       	ldi	r24, 0x06	; 6
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	6c 91       	ld	r22, X
    19cc:	19 95       	eicall
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	0f 90       	pop	r0
    19e8:	0b be       	out	0x3b, r0	; 59
    19ea:	0f 90       	pop	r0
    19ec:	09 be       	out	0x39, r0	; 57
    19ee:	0f 90       	pop	r0
    19f0:	08 be       	out	0x38, r0	; 56
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <__vector_97>:
    19fc:	1f 92       	push	r1
    19fe:	0f 92       	push	r0
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	0f 92       	push	r0
    1a04:	08 b6       	in	r0, 0x38	; 56
    1a06:	0f 92       	push	r0
    1a08:	09 b6       	in	r0, 0x39	; 57
    1a0a:	0f 92       	push	r0
    1a0c:	0b b6       	in	r0, 0x3b	; 59
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	2f 93       	push	r18
    1a14:	3f 93       	push	r19
    1a16:	4f 93       	push	r20
    1a18:	5f 93       	push	r21
    1a1a:	6f 93       	push	r22
    1a1c:	7f 93       	push	r23
    1a1e:	8f 93       	push	r24
    1a20:	9f 93       	push	r25
    1a22:	af 93       	push	r26
    1a24:	bf 93       	push	r27
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
    1a2a:	8d e0       	ldi	r24, 0x0D	; 13
    1a2c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1a30:	dc 01       	movw	r26, r24
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	51 f0       	breq	.+20     	; 0x1a4a <__vector_97+0x4e>
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	ed 91       	ld	r30, X+
    1a3a:	fc 91       	ld	r31, X
    1a3c:	13 97       	sbiw	r26, 0x03	; 3
    1a3e:	30 97       	sbiw	r30, 0x00	; 0
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <__vector_97+0x4e>
    1a42:	86 e0       	ldi	r24, 0x06	; 6
    1a44:	11 96       	adiw	r26, 0x01	; 1
    1a46:	6c 91       	ld	r22, X
    1a48:	19 95       	eicall
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	bf 91       	pop	r27
    1a50:	af 91       	pop	r26
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	7f 91       	pop	r23
    1a58:	6f 91       	pop	r22
    1a5a:	5f 91       	pop	r21
    1a5c:	4f 91       	pop	r20
    1a5e:	3f 91       	pop	r19
    1a60:	2f 91       	pop	r18
    1a62:	0f 90       	pop	r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	0f 90       	pop	r0
    1a68:	09 be       	out	0x39, r0	; 57
    1a6a:	0f 90       	pop	r0
    1a6c:	08 be       	out	0x38, r0	; 56
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <__vector_98>:
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	08 b6       	in	r0, 0x38	; 56
    1a82:	0f 92       	push	r0
    1a84:	09 b6       	in	r0, 0x39	; 57
    1a86:	0f 92       	push	r0
    1a88:	0b b6       	in	r0, 0x3b	; 59
    1a8a:	0f 92       	push	r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	2f 93       	push	r18
    1a90:	3f 93       	push	r19
    1a92:	4f 93       	push	r20
    1a94:	5f 93       	push	r21
    1a96:	6f 93       	push	r22
    1a98:	7f 93       	push	r23
    1a9a:	8f 93       	push	r24
    1a9c:	9f 93       	push	r25
    1a9e:	af 93       	push	r26
    1aa0:	bf 93       	push	r27
    1aa2:	ef 93       	push	r30
    1aa4:	ff 93       	push	r31
    1aa6:	8e e0       	ldi	r24, 0x0E	; 14
    1aa8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1aac:	dc 01       	movw	r26, r24
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	51 f0       	breq	.+20     	; 0x1ac6 <__vector_98+0x4e>
    1ab2:	12 96       	adiw	r26, 0x02	; 2
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	13 97       	sbiw	r26, 0x03	; 3
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	21 f0       	breq	.+8      	; 0x1ac6 <__vector_98+0x4e>
    1abe:	87 e0       	ldi	r24, 0x07	; 7
    1ac0:	11 96       	adiw	r26, 0x01	; 1
    1ac2:	6c 91       	ld	r22, X
    1ac4:	19 95       	eicall
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	bf 91       	pop	r27
    1acc:	af 91       	pop	r26
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	7f 91       	pop	r23
    1ad4:	6f 91       	pop	r22
    1ad6:	5f 91       	pop	r21
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0b be       	out	0x3b, r0	; 59
    1ae2:	0f 90       	pop	r0
    1ae4:	09 be       	out	0x39, r0	; 57
    1ae6:	0f 90       	pop	r0
    1ae8:	08 be       	out	0x38, r0	; 56
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	0f 90       	pop	r0
    1af0:	1f 90       	pop	r1
    1af2:	18 95       	reti

00001af4 <__vector_99>:
    1af4:	1f 92       	push	r1
    1af6:	0f 92       	push	r0
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	0f 92       	push	r0
    1afc:	08 b6       	in	r0, 0x38	; 56
    1afe:	0f 92       	push	r0
    1b00:	09 b6       	in	r0, 0x39	; 57
    1b02:	0f 92       	push	r0
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
    1b22:	8f e0       	ldi	r24, 0x0F	; 15
    1b24:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <__vector_99+0x4e>
    1b2e:	12 96       	adiw	r26, 0x02	; 2
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	13 97       	sbiw	r26, 0x03	; 3
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	21 f0       	breq	.+8      	; 0x1b42 <__vector_99+0x4e>
    1b3a:	87 e0       	ldi	r24, 0x07	; 7
    1b3c:	11 96       	adiw	r26, 0x01	; 1
    1b3e:	6c 91       	ld	r22, X
    1b40:	19 95       	eicall
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	0f 90       	pop	r0
    1b5c:	0b be       	out	0x3b, r0	; 59
    1b5e:	0f 90       	pop	r0
    1b60:	09 be       	out	0x39, r0	; 57
    1b62:	0f 90       	pop	r0
    1b64:	08 be       	out	0x38, r0	; 56
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_100>:
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	08 b6       	in	r0, 0x38	; 56
    1b7a:	0f 92       	push	r0
    1b7c:	09 b6       	in	r0, 0x39	; 57
    1b7e:	0f 92       	push	r0
    1b80:	0b b6       	in	r0, 0x3b	; 59
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	80 e1       	ldi	r24, 0x10	; 16
    1ba0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	51 f0       	breq	.+20     	; 0x1bbe <__vector_100+0x4e>
    1baa:	12 96       	adiw	r26, 0x02	; 2
    1bac:	ed 91       	ld	r30, X+
    1bae:	fc 91       	ld	r31, X
    1bb0:	13 97       	sbiw	r26, 0x03	; 3
    1bb2:	30 97       	sbiw	r30, 0x00	; 0
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <__vector_100+0x4e>
    1bb6:	88 e0       	ldi	r24, 0x08	; 8
    1bb8:	11 96       	adiw	r26, 0x01	; 1
    1bba:	6c 91       	ld	r22, X
    1bbc:	19 95       	eicall
    1bbe:	ff 91       	pop	r31
    1bc0:	ef 91       	pop	r30
    1bc2:	bf 91       	pop	r27
    1bc4:	af 91       	pop	r26
    1bc6:	9f 91       	pop	r25
    1bc8:	8f 91       	pop	r24
    1bca:	7f 91       	pop	r23
    1bcc:	6f 91       	pop	r22
    1bce:	5f 91       	pop	r21
    1bd0:	4f 91       	pop	r20
    1bd2:	3f 91       	pop	r19
    1bd4:	2f 91       	pop	r18
    1bd6:	0f 90       	pop	r0
    1bd8:	0b be       	out	0x3b, r0	; 59
    1bda:	0f 90       	pop	r0
    1bdc:	09 be       	out	0x39, r0	; 57
    1bde:	0f 90       	pop	r0
    1be0:	08 be       	out	0x38, r0	; 56
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_101>:
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	08 b6       	in	r0, 0x38	; 56
    1bf6:	0f 92       	push	r0
    1bf8:	09 b6       	in	r0, 0x39	; 57
    1bfa:	0f 92       	push	r0
    1bfc:	0b b6       	in	r0, 0x3b	; 59
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	81 e1       	ldi	r24, 0x11	; 17
    1c1c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1c20:	dc 01       	movw	r26, r24
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	51 f0       	breq	.+20     	; 0x1c3a <__vector_101+0x4e>
    1c26:	12 96       	adiw	r26, 0x02	; 2
    1c28:	ed 91       	ld	r30, X+
    1c2a:	fc 91       	ld	r31, X
    1c2c:	13 97       	sbiw	r26, 0x03	; 3
    1c2e:	30 97       	sbiw	r30, 0x00	; 0
    1c30:	21 f0       	breq	.+8      	; 0x1c3a <__vector_101+0x4e>
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	6c 91       	ld	r22, X
    1c38:	19 95       	eicall
    1c3a:	ff 91       	pop	r31
    1c3c:	ef 91       	pop	r30
    1c3e:	bf 91       	pop	r27
    1c40:	af 91       	pop	r26
    1c42:	9f 91       	pop	r25
    1c44:	8f 91       	pop	r24
    1c46:	7f 91       	pop	r23
    1c48:	6f 91       	pop	r22
    1c4a:	5f 91       	pop	r21
    1c4c:	4f 91       	pop	r20
    1c4e:	3f 91       	pop	r19
    1c50:	2f 91       	pop	r18
    1c52:	0f 90       	pop	r0
    1c54:	0b be       	out	0x3b, r0	; 59
    1c56:	0f 90       	pop	r0
    1c58:	09 be       	out	0x39, r0	; 57
    1c5a:	0f 90       	pop	r0
    1c5c:	08 be       	out	0x38, r0	; 56
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <__vector_94>:
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	08 b6       	in	r0, 0x38	; 56
    1c72:	0f 92       	push	r0
    1c74:	09 b6       	in	r0, 0x39	; 57
    1c76:	0f 92       	push	r0
    1c78:	0b b6       	in	r0, 0x3b	; 59
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	2f 93       	push	r18
    1c80:	3f 93       	push	r19
    1c82:	4f 93       	push	r20
    1c84:	5f 93       	push	r21
    1c86:	6f 93       	push	r22
    1c88:	7f 93       	push	r23
    1c8a:	8f 93       	push	r24
    1c8c:	9f 93       	push	r25
    1c8e:	af 93       	push	r26
    1c90:	bf 93       	push	r27
    1c92:	ef 93       	push	r30
    1c94:	ff 93       	push	r31
    1c96:	82 e1       	ldi	r24, 0x12	; 18
    1c98:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <__vector_94+0x4e>
    1ca2:	12 96       	adiw	r26, 0x02	; 2
    1ca4:	ed 91       	ld	r30, X+
    1ca6:	fc 91       	ld	r31, X
    1ca8:	13 97       	sbiw	r26, 0x03	; 3
    1caa:	30 97       	sbiw	r30, 0x00	; 0
    1cac:	21 f0       	breq	.+8      	; 0x1cb6 <__vector_94+0x4e>
    1cae:	89 e0       	ldi	r24, 0x09	; 9
    1cb0:	11 96       	adiw	r26, 0x01	; 1
    1cb2:	6c 91       	ld	r22, X
    1cb4:	19 95       	eicall
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0b be       	out	0x3b, r0	; 59
    1cd2:	0f 90       	pop	r0
    1cd4:	09 be       	out	0x39, r0	; 57
    1cd6:	0f 90       	pop	r0
    1cd8:	08 be       	out	0x38, r0	; 56
    1cda:	0f 90       	pop	r0
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	0f 90       	pop	r0
    1ce0:	1f 90       	pop	r1
    1ce2:	18 95       	reti

00001ce4 <__vector_95>:
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	0f 92       	push	r0
    1cec:	08 b6       	in	r0, 0x38	; 56
    1cee:	0f 92       	push	r0
    1cf0:	09 b6       	in	r0, 0x39	; 57
    1cf2:	0f 92       	push	r0
    1cf4:	0b b6       	in	r0, 0x3b	; 59
    1cf6:	0f 92       	push	r0
    1cf8:	11 24       	eor	r1, r1
    1cfa:	2f 93       	push	r18
    1cfc:	3f 93       	push	r19
    1cfe:	4f 93       	push	r20
    1d00:	5f 93       	push	r21
    1d02:	6f 93       	push	r22
    1d04:	7f 93       	push	r23
    1d06:	8f 93       	push	r24
    1d08:	9f 93       	push	r25
    1d0a:	af 93       	push	r26
    1d0c:	bf 93       	push	r27
    1d0e:	ef 93       	push	r30
    1d10:	ff 93       	push	r31
    1d12:	83 e1       	ldi	r24, 0x13	; 19
    1d14:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	51 f0       	breq	.+20     	; 0x1d32 <__vector_95+0x4e>
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	13 97       	sbiw	r26, 0x03	; 3
    1d26:	30 97       	sbiw	r30, 0x00	; 0
    1d28:	21 f0       	breq	.+8      	; 0x1d32 <__vector_95+0x4e>
    1d2a:	89 e0       	ldi	r24, 0x09	; 9
    1d2c:	11 96       	adiw	r26, 0x01	; 1
    1d2e:	6c 91       	ld	r22, X
    1d30:	19 95       	eicall
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0b be       	out	0x3b, r0	; 59
    1d4e:	0f 90       	pop	r0
    1d50:	09 be       	out	0x39, r0	; 57
    1d52:	0f 90       	pop	r0
    1d54:	08 be       	out	0x38, r0	; 56
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__vector_4>:
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	08 b6       	in	r0, 0x38	; 56
    1d6a:	0f 92       	push	r0
    1d6c:	09 b6       	in	r0, 0x39	; 57
    1d6e:	0f 92       	push	r0
    1d70:	0b b6       	in	r0, 0x3b	; 59
    1d72:	0f 92       	push	r0
    1d74:	11 24       	eor	r1, r1
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	84 e1       	ldi	r24, 0x14	; 20
    1d90:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1d94:	dc 01       	movw	r26, r24
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	51 f0       	breq	.+20     	; 0x1dae <__vector_4+0x4e>
    1d9a:	12 96       	adiw	r26, 0x02	; 2
    1d9c:	ed 91       	ld	r30, X+
    1d9e:	fc 91       	ld	r31, X
    1da0:	13 97       	sbiw	r26, 0x03	; 3
    1da2:	30 97       	sbiw	r30, 0x00	; 0
    1da4:	21 f0       	breq	.+8      	; 0x1dae <__vector_4+0x4e>
    1da6:	8a e0       	ldi	r24, 0x0A	; 10
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	6c 91       	ld	r22, X
    1dac:	19 95       	eicall
    1dae:	ff 91       	pop	r31
    1db0:	ef 91       	pop	r30
    1db2:	bf 91       	pop	r27
    1db4:	af 91       	pop	r26
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	7f 91       	pop	r23
    1dbc:	6f 91       	pop	r22
    1dbe:	5f 91       	pop	r21
    1dc0:	4f 91       	pop	r20
    1dc2:	3f 91       	pop	r19
    1dc4:	2f 91       	pop	r18
    1dc6:	0f 90       	pop	r0
    1dc8:	0b be       	out	0x3b, r0	; 59
    1dca:	0f 90       	pop	r0
    1dcc:	09 be       	out	0x39, r0	; 57
    1dce:	0f 90       	pop	r0
    1dd0:	08 be       	out	0x38, r0	; 56
    1dd2:	0f 90       	pop	r0
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	0f 90       	pop	r0
    1dd8:	1f 90       	pop	r1
    1dda:	18 95       	reti

00001ddc <__vector_5>:
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	08 b6       	in	r0, 0x38	; 56
    1de6:	0f 92       	push	r0
    1de8:	09 b6       	in	r0, 0x39	; 57
    1dea:	0f 92       	push	r0
    1dec:	0b b6       	in	r0, 0x3b	; 59
    1dee:	0f 92       	push	r0
    1df0:	11 24       	eor	r1, r1
    1df2:	2f 93       	push	r18
    1df4:	3f 93       	push	r19
    1df6:	4f 93       	push	r20
    1df8:	5f 93       	push	r21
    1dfa:	6f 93       	push	r22
    1dfc:	7f 93       	push	r23
    1dfe:	8f 93       	push	r24
    1e00:	9f 93       	push	r25
    1e02:	af 93       	push	r26
    1e04:	bf 93       	push	r27
    1e06:	ef 93       	push	r30
    1e08:	ff 93       	push	r31
    1e0a:	85 e1       	ldi	r24, 0x15	; 21
    1e0c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <findGpioIntElement>
    1e10:	dc 01       	movw	r26, r24
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	51 f0       	breq	.+20     	; 0x1e2a <__vector_5+0x4e>
    1e16:	12 96       	adiw	r26, 0x02	; 2
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	13 97       	sbiw	r26, 0x03	; 3
    1e1e:	30 97       	sbiw	r30, 0x00	; 0
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <__vector_5+0x4e>
    1e22:	8a e0       	ldi	r24, 0x0A	; 10
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	6c 91       	ld	r22, X
    1e28:	19 95       	eicall
    1e2a:	ff 91       	pop	r31
    1e2c:	ef 91       	pop	r30
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	7f 91       	pop	r23
    1e38:	6f 91       	pop	r22
    1e3a:	5f 91       	pop	r21
    1e3c:	4f 91       	pop	r20
    1e3e:	3f 91       	pop	r19
    1e40:	2f 91       	pop	r18
    1e42:	0f 90       	pop	r0
    1e44:	0b be       	out	0x3b, r0	; 59
    1e46:	0f 90       	pop	r0
    1e48:	09 be       	out	0x39, r0	; 57
    1e4a:	0f 90       	pop	r0
    1e4c:	08 be       	out	0x38, r0	; 56
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	0f 90       	pop	r0
    1e54:	1f 90       	pop	r1
    1e56:	18 95       	reti

00001e58 <hal_configureGpioPort>:
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <hal_configureGpioPort+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <hal_configureGpioPort+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	2a 83       	std	Y+2, r18	; 0x02
    1e66:	3b 83       	std	Y+3, r19	; 0x03
    1e68:	4c 83       	std	Y+4, r20	; 0x04
    1e6a:	5d 83       	std	Y+5, r21	; 0x05
    1e6c:	6e 83       	std	Y+6, r22	; 0x06
    1e6e:	9f b7       	in	r25, 0x3f	; 63
    1e70:	99 83       	std	Y+1, r25	; 0x01
    1e72:	f8 94       	cli
    1e74:	85 30       	cpi	r24, 0x05	; 5
    1e76:	69 f1       	breq	.+90     	; 0x1ed2 <hal_configureGpioPort+0x7a>
    1e78:	86 30       	cpi	r24, 0x06	; 6
    1e7a:	70 f4       	brcc	.+28     	; 0x1e98 <hal_configureGpioPort+0x40>
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	01 f1       	breq	.+64     	; 0x1ec0 <hal_configureGpioPort+0x68>
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	28 f4       	brcc	.+10     	; 0x1e8e <hal_configureGpioPort+0x36>
    1e84:	88 23       	and	r24, r24
    1e86:	b1 f0       	breq	.+44     	; 0x1eb4 <hal_configureGpioPort+0x5c>
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	d9 f5       	brne	.+118    	; 0x1f02 <hal_configureGpioPort+0xaa>
    1e8c:	16 c0       	rjmp	.+44     	; 0x1eba <hal_configureGpioPort+0x62>
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	d1 f0       	breq	.+52     	; 0x1ec6 <hal_configureGpioPort+0x6e>
    1e92:	84 30       	cpi	r24, 0x04	; 4
    1e94:	b1 f5       	brne	.+108    	; 0x1f02 <hal_configureGpioPort+0xaa>
    1e96:	1a c0       	rjmp	.+52     	; 0x1ecc <hal_configureGpioPort+0x74>
    1e98:	88 30       	cpi	r24, 0x08	; 8
    1e9a:	21 f1       	breq	.+72     	; 0x1ee4 <hal_configureGpioPort+0x8c>
    1e9c:	89 30       	cpi	r24, 0x09	; 9
    1e9e:	28 f4       	brcc	.+10     	; 0x1eaa <hal_configureGpioPort+0x52>
    1ea0:	86 30       	cpi	r24, 0x06	; 6
    1ea2:	d1 f0       	breq	.+52     	; 0x1ed8 <hal_configureGpioPort+0x80>
    1ea4:	87 30       	cpi	r24, 0x07	; 7
    1ea6:	69 f5       	brne	.+90     	; 0x1f02 <hal_configureGpioPort+0xaa>
    1ea8:	1a c0       	rjmp	.+52     	; 0x1ede <hal_configureGpioPort+0x86>
    1eaa:	89 30       	cpi	r24, 0x09	; 9
    1eac:	f1 f0       	breq	.+60     	; 0x1eea <hal_configureGpioPort+0x92>
    1eae:	8a 30       	cpi	r24, 0x0A	; 10
    1eb0:	41 f5       	brne	.+80     	; 0x1f02 <hal_configureGpioPort+0xaa>
    1eb2:	1e c0       	rjmp	.+60     	; 0x1ef0 <hal_configureGpioPort+0x98>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	96 e0       	ldi	r25, 0x06	; 6
    1eb8:	1d c0       	rjmp	.+58     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1eba:	80 e2       	ldi	r24, 0x20	; 32
    1ebc:	96 e0       	ldi	r25, 0x06	; 6
    1ebe:	1a c0       	rjmp	.+52     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ec0:	80 e4       	ldi	r24, 0x40	; 64
    1ec2:	96 e0       	ldi	r25, 0x06	; 6
    1ec4:	17 c0       	rjmp	.+46     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ec6:	80 e6       	ldi	r24, 0x60	; 96
    1ec8:	96 e0       	ldi	r25, 0x06	; 6
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	96 e0       	ldi	r25, 0x06	; 6
    1ed0:	11 c0       	rjmp	.+34     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ed2:	80 ea       	ldi	r24, 0xA0	; 160
    1ed4:	96 e0       	ldi	r25, 0x06	; 6
    1ed6:	0e c0       	rjmp	.+28     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ed8:	80 ee       	ldi	r24, 0xE0	; 224
    1eda:	96 e0       	ldi	r25, 0x06	; 6
    1edc:	0b c0       	rjmp	.+22     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	97 e0       	ldi	r25, 0x07	; 7
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ee4:	80 e2       	ldi	r24, 0x20	; 32
    1ee6:	97 e0       	ldi	r25, 0x07	; 7
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1eea:	80 ec       	ldi	r24, 0xC0	; 192
    1eec:	97 e0       	ldi	r25, 0x07	; 7
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <hal_configureGpioPort+0x9c>
    1ef0:	80 ee       	ldi	r24, 0xE0	; 224
    1ef2:	97 e0       	ldi	r25, 0x07	; 7
    1ef4:	be 01       	movw	r22, r28
    1ef6:	6e 5f       	subi	r22, 0xFE	; 254
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	0e 94 94 09 	call	0x1328	; 0x1328 <confPort>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <hal_configureGpioPort+0xac>
    1f02:	8c ef       	ldi	r24, 0xFC	; 252
    1f04:	99 81       	ldd	r25, Y+1	; 0x01
    1f06:	9f bf       	out	0x3f, r25	; 63
    1f08:	26 96       	adiw	r28, 0x06	; 6
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <hal_requestGpioInt>:
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	27 97       	sbiw	r28, 0x07	; 7
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	4c 83       	std	Y+4, r20	; 0x04
    1f24:	5d 83       	std	Y+5, r21	; 0x05
    1f26:	6e 83       	std	Y+6, r22	; 0x06
    1f28:	7f 83       	std	Y+7, r23	; 0x07
    1f2a:	9f b7       	in	r25, 0x3f	; 63
    1f2c:	99 83       	std	Y+1, r25	; 0x01
    1f2e:	f8 94       	cli
    1f30:	85 30       	cpi	r24, 0x05	; 5
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <hal_requestGpioInt+0x22>
    1f34:	4c c0       	rjmp	.+152    	; 0x1fce <hal_requestGpioInt+0xba>
    1f36:	86 30       	cpi	r24, 0x06	; 6
    1f38:	80 f4       	brcc	.+32     	; 0x1f5a <hal_requestGpioInt+0x46>
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	81 f1       	breq	.+96     	; 0x1f9e <hal_requestGpioInt+0x8a>
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	30 f4       	brcc	.+12     	; 0x1f4e <hal_requestGpioInt+0x3a>
    1f42:	88 23       	and	r24, r24
    1f44:	e1 f0       	breq	.+56     	; 0x1f7e <hal_requestGpioInt+0x6a>
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <hal_requestGpioInt+0x38>
    1f4a:	79 c0       	rjmp	.+242    	; 0x203e <hal_requestGpioInt+0x12a>
    1f4c:	20 c0       	rjmp	.+64     	; 0x1f8e <hal_requestGpioInt+0x7a>
    1f4e:	83 30       	cpi	r24, 0x03	; 3
    1f50:	71 f1       	breq	.+92     	; 0x1fae <hal_requestGpioInt+0x9a>
    1f52:	84 30       	cpi	r24, 0x04	; 4
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <hal_requestGpioInt+0x44>
    1f56:	73 c0       	rjmp	.+230    	; 0x203e <hal_requestGpioInt+0x12a>
    1f58:	32 c0       	rjmp	.+100    	; 0x1fbe <hal_requestGpioInt+0xaa>
    1f5a:	88 30       	cpi	r24, 0x08	; 8
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <hal_requestGpioInt+0x4c>
    1f5e:	4f c0       	rjmp	.+158    	; 0x1ffe <hal_requestGpioInt+0xea>
    1f60:	89 30       	cpi	r24, 0x09	; 9
    1f62:	30 f4       	brcc	.+12     	; 0x1f70 <hal_requestGpioInt+0x5c>
    1f64:	86 30       	cpi	r24, 0x06	; 6
    1f66:	d9 f1       	breq	.+118    	; 0x1fde <hal_requestGpioInt+0xca>
    1f68:	87 30       	cpi	r24, 0x07	; 7
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <hal_requestGpioInt+0x5a>
    1f6c:	68 c0       	rjmp	.+208    	; 0x203e <hal_requestGpioInt+0x12a>
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <hal_requestGpioInt+0xda>
    1f70:	89 30       	cpi	r24, 0x09	; 9
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <hal_requestGpioInt+0x62>
    1f74:	4c c0       	rjmp	.+152    	; 0x200e <hal_requestGpioInt+0xfa>
    1f76:	8a 30       	cpi	r24, 0x0A	; 10
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <hal_requestGpioInt+0x68>
    1f7a:	61 c0       	rjmp	.+194    	; 0x203e <hal_requestGpioInt+0x12a>
    1f7c:	50 c0       	rjmp	.+160    	; 0x201e <hal_requestGpioInt+0x10a>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	96 e0       	ldi	r25, 0x06	; 6
    1f82:	be 01       	movw	r22, r28
    1f84:	6c 5f       	subi	r22, 0xFC	; 252
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	21 e0       	ldi	r18, 0x01	; 1
    1f8c:	4f c0       	rjmp	.+158    	; 0x202c <hal_requestGpioInt+0x118>
    1f8e:	80 e2       	ldi	r24, 0x20	; 32
    1f90:	96 e0       	ldi	r25, 0x06	; 6
    1f92:	be 01       	movw	r22, r28
    1f94:	6c 5f       	subi	r22, 0xFC	; 252
    1f96:	7f 4f       	sbci	r23, 0xFF	; 255
    1f98:	42 e0       	ldi	r20, 0x02	; 2
    1f9a:	23 e0       	ldi	r18, 0x03	; 3
    1f9c:	47 c0       	rjmp	.+142    	; 0x202c <hal_requestGpioInt+0x118>
    1f9e:	80 e4       	ldi	r24, 0x40	; 64
    1fa0:	96 e0       	ldi	r25, 0x06	; 6
    1fa2:	be 01       	movw	r22, r28
    1fa4:	6c 5f       	subi	r22, 0xFC	; 252
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	44 e0       	ldi	r20, 0x04	; 4
    1faa:	25 e0       	ldi	r18, 0x05	; 5
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <hal_requestGpioInt+0x118>
    1fae:	80 e6       	ldi	r24, 0x60	; 96
    1fb0:	96 e0       	ldi	r25, 0x06	; 6
    1fb2:	be 01       	movw	r22, r28
    1fb4:	6c 5f       	subi	r22, 0xFC	; 252
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	46 e0       	ldi	r20, 0x06	; 6
    1fba:	27 e0       	ldi	r18, 0x07	; 7
    1fbc:	37 c0       	rjmp	.+110    	; 0x202c <hal_requestGpioInt+0x118>
    1fbe:	80 e8       	ldi	r24, 0x80	; 128
    1fc0:	96 e0       	ldi	r25, 0x06	; 6
    1fc2:	be 01       	movw	r22, r28
    1fc4:	6c 5f       	subi	r22, 0xFC	; 252
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	48 e0       	ldi	r20, 0x08	; 8
    1fca:	29 e0       	ldi	r18, 0x09	; 9
    1fcc:	2f c0       	rjmp	.+94     	; 0x202c <hal_requestGpioInt+0x118>
    1fce:	80 ea       	ldi	r24, 0xA0	; 160
    1fd0:	96 e0       	ldi	r25, 0x06	; 6
    1fd2:	be 01       	movw	r22, r28
    1fd4:	6c 5f       	subi	r22, 0xFC	; 252
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	4a e0       	ldi	r20, 0x0A	; 10
    1fda:	2b e0       	ldi	r18, 0x0B	; 11
    1fdc:	27 c0       	rjmp	.+78     	; 0x202c <hal_requestGpioInt+0x118>
    1fde:	80 ee       	ldi	r24, 0xE0	; 224
    1fe0:	96 e0       	ldi	r25, 0x06	; 6
    1fe2:	be 01       	movw	r22, r28
    1fe4:	6c 5f       	subi	r22, 0xFC	; 252
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	4c e0       	ldi	r20, 0x0C	; 12
    1fea:	2d e0       	ldi	r18, 0x0D	; 13
    1fec:	1f c0       	rjmp	.+62     	; 0x202c <hal_requestGpioInt+0x118>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	97 e0       	ldi	r25, 0x07	; 7
    1ff2:	be 01       	movw	r22, r28
    1ff4:	6c 5f       	subi	r22, 0xFC	; 252
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	4e e0       	ldi	r20, 0x0E	; 14
    1ffa:	2f e0       	ldi	r18, 0x0F	; 15
    1ffc:	17 c0       	rjmp	.+46     	; 0x202c <hal_requestGpioInt+0x118>
    1ffe:	80 e2       	ldi	r24, 0x20	; 32
    2000:	97 e0       	ldi	r25, 0x07	; 7
    2002:	be 01       	movw	r22, r28
    2004:	6c 5f       	subi	r22, 0xFC	; 252
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	40 e1       	ldi	r20, 0x10	; 16
    200a:	21 e1       	ldi	r18, 0x11	; 17
    200c:	0f c0       	rjmp	.+30     	; 0x202c <hal_requestGpioInt+0x118>
    200e:	80 ec       	ldi	r24, 0xC0	; 192
    2010:	97 e0       	ldi	r25, 0x07	; 7
    2012:	be 01       	movw	r22, r28
    2014:	6c 5f       	subi	r22, 0xFC	; 252
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	42 e1       	ldi	r20, 0x12	; 18
    201a:	23 e1       	ldi	r18, 0x13	; 19
    201c:	07 c0       	rjmp	.+14     	; 0x202c <hal_requestGpioInt+0x118>
    201e:	80 ee       	ldi	r24, 0xE0	; 224
    2020:	97 e0       	ldi	r25, 0x07	; 7
    2022:	be 01       	movw	r22, r28
    2024:	6c 5f       	subi	r22, 0xFC	; 252
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	44 e1       	ldi	r20, 0x14	; 20
    202a:	25 e1       	ldi	r18, 0x15	; 21
    202c:	0e 94 3f 08 	call	0x107e	; 0x107e <confInt>
    2030:	8a 83       	std	Y+2, r24	; 0x02
    2032:	9b 83       	std	Y+3, r25	; 0x03
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	8f bf       	out	0x3f, r24	; 63
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <hal_requestGpioInt+0x132>
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	8f bf       	out	0x3f, r24	; 63
    2042:	8c ef       	ldi	r24, 0xFC	; 252
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	27 96       	adiw	r28, 0x07	; 7
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <hal_releaseGpioInt>:
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	00 d0       	rcall	.+0      	; 0x2058 <hal_releaseGpioInt+0x6>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	8a 83       	std	Y+2, r24	; 0x02
    205e:	9b 83       	std	Y+3, r25	; 0x03
    2060:	8f b7       	in	r24, 0x3f	; 63
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	f8 94       	cli
    2066:	ea 81       	ldd	r30, Y+2	; 0x02
    2068:	fb 81       	ldd	r31, Y+3	; 0x03
    206a:	80 91 bd 20 	lds	r24, 0x20BD
    206e:	90 91 be 20 	lds	r25, 0x20BE
    2072:	24 81       	ldd	r18, Z+4	; 0x04
    2074:	35 81       	ldd	r19, Z+5	; 0x05
    2076:	28 17       	cp	r18, r24
    2078:	39 07       	cpc	r19, r25
    207a:	21 f0       	breq	.+8      	; 0x2084 <hal_releaseGpioInt+0x32>
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	8f bf       	out	0x3f, r24	; 63
    2080:	88 ef       	ldi	r24, 0xF8	; 248
    2082:	91 c0       	rjmp	.+290    	; 0x21a6 <hal_releaseGpioInt+0x154>
    2084:	ea 81       	ldd	r30, Y+2	; 0x02
    2086:	fb 81       	ldd	r31, Y+3	; 0x03
    2088:	01 90       	ld	r0, Z+
    208a:	f0 81       	ld	r31, Z
    208c:	e0 2d       	mov	r30, r0
    208e:	e0 81       	ld	r30, Z
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	e6 31       	cpi	r30, 0x16	; 22
    2094:	f1 05       	cpc	r31, r1
    2096:	08 f0       	brcs	.+2      	; 0x209a <hal_releaseGpioInt+0x48>
    2098:	7b c0       	rjmp	.+246    	; 0x2190 <hal_releaseGpioInt+0x13e>
    209a:	e6 50       	subi	r30, 0x06	; 6
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	05 90       	lpm	r0, Z+
    20a4:	f4 91       	lpm	r31, Z
    20a6:	e0 2d       	mov	r30, r0
    20a8:	19 94       	eijmp
    20aa:	e0 e0       	ldi	r30, 0x00	; 0
    20ac:	f6 e0       	ldi	r31, 0x06	; 6
    20ae:	80 91 09 06 	lds	r24, 0x0609
    20b2:	09 c0       	rjmp	.+18     	; 0x20c6 <hal_releaseGpioInt+0x74>
    20b4:	e0 e0       	ldi	r30, 0x00	; 0
    20b6:	f6 e0       	ldi	r31, 0x06	; 6
    20b8:	80 91 09 06 	lds	r24, 0x0609
    20bc:	66 c0       	rjmp	.+204    	; 0x218a <hal_releaseGpioInt+0x138>
    20be:	e0 e2       	ldi	r30, 0x20	; 32
    20c0:	f6 e0       	ldi	r31, 0x06	; 6
    20c2:	80 91 29 06 	lds	r24, 0x0629
    20c6:	8c 7f       	andi	r24, 0xFC	; 252
    20c8:	81 87       	std	Z+9, r24	; 0x09
    20ca:	12 86       	std	Z+10, r1	; 0x0a
    20cc:	61 c0       	rjmp	.+194    	; 0x2190 <hal_releaseGpioInt+0x13e>
    20ce:	e0 e2       	ldi	r30, 0x20	; 32
    20d0:	f6 e0       	ldi	r31, 0x06	; 6
    20d2:	80 91 29 06 	lds	r24, 0x0629
    20d6:	59 c0       	rjmp	.+178    	; 0x218a <hal_releaseGpioInt+0x138>
    20d8:	e0 e4       	ldi	r30, 0x40	; 64
    20da:	f6 e0       	ldi	r31, 0x06	; 6
    20dc:	80 91 49 06 	lds	r24, 0x0649
    20e0:	f2 cf       	rjmp	.-28     	; 0x20c6 <hal_releaseGpioInt+0x74>
    20e2:	e0 e4       	ldi	r30, 0x40	; 64
    20e4:	f6 e0       	ldi	r31, 0x06	; 6
    20e6:	80 91 49 06 	lds	r24, 0x0649
    20ea:	4f c0       	rjmp	.+158    	; 0x218a <hal_releaseGpioInt+0x138>
    20ec:	e0 e6       	ldi	r30, 0x60	; 96
    20ee:	f6 e0       	ldi	r31, 0x06	; 6
    20f0:	80 91 69 06 	lds	r24, 0x0669
    20f4:	e8 cf       	rjmp	.-48     	; 0x20c6 <hal_releaseGpioInt+0x74>
    20f6:	e0 e6       	ldi	r30, 0x60	; 96
    20f8:	f6 e0       	ldi	r31, 0x06	; 6
    20fa:	80 91 69 06 	lds	r24, 0x0669
    20fe:	45 c0       	rjmp	.+138    	; 0x218a <hal_releaseGpioInt+0x138>
    2100:	e0 e8       	ldi	r30, 0x80	; 128
    2102:	f6 e0       	ldi	r31, 0x06	; 6
    2104:	80 91 89 06 	lds	r24, 0x0689
    2108:	de cf       	rjmp	.-68     	; 0x20c6 <hal_releaseGpioInt+0x74>
    210a:	e0 e8       	ldi	r30, 0x80	; 128
    210c:	f6 e0       	ldi	r31, 0x06	; 6
    210e:	80 91 89 06 	lds	r24, 0x0689
    2112:	3b c0       	rjmp	.+118    	; 0x218a <hal_releaseGpioInt+0x138>
    2114:	e0 ea       	ldi	r30, 0xA0	; 160
    2116:	f6 e0       	ldi	r31, 0x06	; 6
    2118:	80 91 a9 06 	lds	r24, 0x06A9
    211c:	d4 cf       	rjmp	.-88     	; 0x20c6 <hal_releaseGpioInt+0x74>
    211e:	e0 ea       	ldi	r30, 0xA0	; 160
    2120:	f6 e0       	ldi	r31, 0x06	; 6
    2122:	80 91 a9 06 	lds	r24, 0x06A9
    2126:	31 c0       	rjmp	.+98     	; 0x218a <hal_releaseGpioInt+0x138>
    2128:	e0 ee       	ldi	r30, 0xE0	; 224
    212a:	f6 e0       	ldi	r31, 0x06	; 6
    212c:	80 91 e9 06 	lds	r24, 0x06E9
    2130:	ca cf       	rjmp	.-108    	; 0x20c6 <hal_releaseGpioInt+0x74>
    2132:	e0 ee       	ldi	r30, 0xE0	; 224
    2134:	f6 e0       	ldi	r31, 0x06	; 6
    2136:	80 91 e9 06 	lds	r24, 0x06E9
    213a:	27 c0       	rjmp	.+78     	; 0x218a <hal_releaseGpioInt+0x138>
    213c:	e0 e0       	ldi	r30, 0x00	; 0
    213e:	f7 e0       	ldi	r31, 0x07	; 7
    2140:	80 91 09 07 	lds	r24, 0x0709
    2144:	c0 cf       	rjmp	.-128    	; 0x20c6 <hal_releaseGpioInt+0x74>
    2146:	e0 e0       	ldi	r30, 0x00	; 0
    2148:	f7 e0       	ldi	r31, 0x07	; 7
    214a:	80 91 09 07 	lds	r24, 0x0709
    214e:	1d c0       	rjmp	.+58     	; 0x218a <hal_releaseGpioInt+0x138>
    2150:	e0 e2       	ldi	r30, 0x20	; 32
    2152:	f7 e0       	ldi	r31, 0x07	; 7
    2154:	80 91 29 07 	lds	r24, 0x0729
    2158:	b6 cf       	rjmp	.-148    	; 0x20c6 <hal_releaseGpioInt+0x74>
    215a:	e0 e2       	ldi	r30, 0x20	; 32
    215c:	f7 e0       	ldi	r31, 0x07	; 7
    215e:	80 91 29 07 	lds	r24, 0x0729
    2162:	13 c0       	rjmp	.+38     	; 0x218a <hal_releaseGpioInt+0x138>
    2164:	e0 ec       	ldi	r30, 0xC0	; 192
    2166:	f7 e0       	ldi	r31, 0x07	; 7
    2168:	80 91 c9 07 	lds	r24, 0x07C9
    216c:	ac cf       	rjmp	.-168    	; 0x20c6 <hal_releaseGpioInt+0x74>
    216e:	e0 ec       	ldi	r30, 0xC0	; 192
    2170:	f7 e0       	ldi	r31, 0x07	; 7
    2172:	80 91 c9 07 	lds	r24, 0x07C9
    2176:	09 c0       	rjmp	.+18     	; 0x218a <hal_releaseGpioInt+0x138>
    2178:	e0 ee       	ldi	r30, 0xE0	; 224
    217a:	f7 e0       	ldi	r31, 0x07	; 7
    217c:	80 91 e9 07 	lds	r24, 0x07E9
    2180:	a2 cf       	rjmp	.-188    	; 0x20c6 <hal_releaseGpioInt+0x74>
    2182:	e0 ee       	ldi	r30, 0xE0	; 224
    2184:	f7 e0       	ldi	r31, 0x07	; 7
    2186:	80 91 e9 07 	lds	r24, 0x07E9
    218a:	83 7f       	andi	r24, 0xF3	; 243
    218c:	81 87       	std	Z+9, r24	; 0x09
    218e:	13 86       	std	Z+11, r1	; 0x0b
    2190:	80 91 bd 20 	lds	r24, 0x20BD
    2194:	90 91 be 20 	lds	r25, 0x20BE
    2198:	6a 81       	ldd	r22, Y+2	; 0x02
    219a:	7b 81       	ldd	r23, Y+3	; 0x03
    219c:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	8f bf       	out	0x3f, r24	; 63
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	23 96       	adiw	r28, 0x03	; 3
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <hal_slaveInterrupt>:
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	8c 01       	movw	r16, r24
    21c2:	19 82       	std	Y+1, r1	; 0x01
    21c4:	dc 01       	movw	r26, r24
    21c6:	19 96       	adiw	r26, 0x09	; 9
    21c8:	ed 91       	ld	r30, X+
    21ca:	fc 91       	ld	r31, X
    21cc:	1a 97       	sbiw	r26, 0x0a	; 10
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	82 ff       	sbrs	r24, 2
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <hal_slaveInterrupt+0x2a>
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	2e c0       	rjmp	.+92     	; 0x2238 <hal_slaveInterrupt+0x86>
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	83 ff       	sbrs	r24, 3
    21e0:	11 c0       	rjmp	.+34     	; 0x2204 <hal_slaveInterrupt+0x52>
    21e2:	89 e0       	ldi	r24, 0x09	; 9
    21e4:	f8 01       	movw	r30, r16
    21e6:	86 83       	std	Z+6, r24	; 0x06
    21e8:	83 85       	ldd	r24, Z+11	; 0x0b
    21ea:	94 85       	ldd	r25, Z+12	; 0x0c
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <hal_slaveInterrupt+0x40>
    21f0:	86 c0       	rjmp	.+268    	; 0x22fe <hal_slaveInterrupt+0x14c>
    21f2:	03 84       	ldd	r0, Z+11	; 0x0b
    21f4:	f4 85       	ldd	r31, Z+12	; 0x0c
    21f6:	e0 2d       	mov	r30, r0
    21f8:	d8 01       	movw	r26, r16
    21fa:	16 96       	adiw	r26, 0x06	; 6
    21fc:	8c 91       	ld	r24, X
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	19 95       	eicall
    2202:	7d c0       	rjmp	.+250    	; 0x22fe <hal_slaveInterrupt+0x14c>
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	86 ff       	sbrs	r24, 6
    2208:	0b c0       	rjmp	.+22     	; 0x2220 <hal_slaveInterrupt+0x6e>
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	80 ff       	sbrs	r24, 0
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <hal_slaveInterrupt+0x6e>
    2210:	f8 01       	movw	r30, r16
    2212:	16 82       	std	Z+6, r1	; 0x06
    2214:	11 8a       	std	Z+17, r1	; 0x11
    2216:	12 8a       	std	Z+18, r1	; 0x12
    2218:	01 84       	ldd	r0, Z+9	; 0x09
    221a:	f2 85       	ldd	r31, Z+10	; 0x0a
    221c:	e0 2d       	mov	r30, r0
    221e:	6d c0       	rjmp	.+218    	; 0x22fa <hal_slaveInterrupt+0x148>
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	86 ff       	sbrs	r24, 6
    2224:	18 c0       	rjmp	.+48     	; 0x2256 <hal_slaveInterrupt+0xa4>
    2226:	d8 01       	movw	r26, r16
    2228:	19 96       	adiw	r26, 0x09	; 9
    222a:	ed 91       	ld	r30, X+
    222c:	fc 91       	ld	r31, X
    222e:	1a 97       	sbiw	r26, 0x0a	; 10
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	80 64       	ori	r24, 0x40	; 64
    2234:	82 83       	std	Z+2, r24	; 0x02
    2236:	84 e0       	ldi	r24, 0x04	; 4
    2238:	16 96       	adiw	r26, 0x06	; 6
    223a:	8c 93       	st	X, r24
    223c:	16 97       	sbiw	r26, 0x06	; 6
    223e:	1b 96       	adiw	r26, 0x0b	; 11
    2240:	8d 91       	ld	r24, X+
    2242:	9c 91       	ld	r25, X
    2244:	1c 97       	sbiw	r26, 0x0c	; 12
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	09 f4       	brne	.+2      	; 0x224c <hal_slaveInterrupt+0x9a>
    224a:	59 c0       	rjmp	.+178    	; 0x22fe <hal_slaveInterrupt+0x14c>
    224c:	1b 96       	adiw	r26, 0x0b	; 11
    224e:	ed 91       	ld	r30, X+
    2250:	fc 91       	ld	r31, X
    2252:	1c 97       	sbiw	r26, 0x0c	; 12
    2254:	d2 cf       	rjmp	.-92     	; 0x21fa <hal_slaveInterrupt+0x48>
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	87 ff       	sbrs	r24, 7
    225a:	51 c0       	rjmp	.+162    	; 0x22fe <hal_slaveInterrupt+0x14c>
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	81 ff       	sbrs	r24, 1
    2260:	37 c0       	rjmp	.+110    	; 0x22d0 <hal_slaveInterrupt+0x11e>
    2262:	f8 01       	movw	r30, r16
    2264:	81 89       	ldd	r24, Z+17	; 0x11
    2266:	92 89       	ldd	r25, Z+18	; 0x12
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f0       	breq	.+26     	; 0x2286 <hal_slaveInterrupt+0xd4>
    226c:	01 84       	ldd	r0, Z+9	; 0x09
    226e:	f2 85       	ldd	r31, Z+10	; 0x0a
    2270:	e0 2d       	mov	r30, r0
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	84 ff       	sbrs	r24, 4
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <hal_slaveInterrupt+0xd4>
    2278:	d8 01       	movw	r26, r16
    227a:	19 96       	adiw	r26, 0x09	; 9
    227c:	ed 91       	ld	r30, X+
    227e:	fc 91       	ld	r31, X
    2280:	1a 97       	sbiw	r26, 0x0a	; 10
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	3b c0       	rjmp	.+118    	; 0x22fc <hal_slaveInterrupt+0x14a>
    2286:	88 e0       	ldi	r24, 0x08	; 8
    2288:	f8 01       	movw	r30, r16
    228a:	86 83       	std	Z+6, r24	; 0x06
    228c:	83 85       	ldd	r24, Z+11	; 0x0b
    228e:	94 85       	ldd	r25, Z+12	; 0x0c
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	a9 f1       	breq	.+106    	; 0x22fe <hal_slaveInterrupt+0x14c>
    2294:	03 84       	ldd	r0, Z+11	; 0x0b
    2296:	f4 85       	ldd	r31, Z+12	; 0x0c
    2298:	e0 2d       	mov	r30, r0
    229a:	d8 01       	movw	r26, r16
    229c:	16 96       	adiw	r26, 0x06	; 6
    229e:	8c 91       	ld	r24, X
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	19 95       	eicall
    22a4:	d8 01       	movw	r26, r16
    22a6:	19 96       	adiw	r26, 0x09	; 9
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	1a 97       	sbiw	r26, 0x0a	; 10
    22ae:	84 83       	std	Z+4, r24	; 0x04
    22b0:	19 96       	adiw	r26, 0x09	; 9
    22b2:	ed 91       	ld	r30, X+
    22b4:	fc 91       	ld	r31, X
    22b6:	1a 97       	sbiw	r26, 0x0a	; 10
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	81 83       	std	Z+1, r24	; 0x01
    22bc:	51 96       	adiw	r26, 0x11	; 17
    22be:	8d 91       	ld	r24, X+
    22c0:	9c 91       	ld	r25, X
    22c2:	52 97       	sbiw	r26, 0x12	; 18
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	51 96       	adiw	r26, 0x11	; 17
    22c8:	8d 93       	st	X+, r24
    22ca:	9c 93       	st	X, r25
    22cc:	52 97       	sbiw	r26, 0x12	; 18
    22ce:	17 c0       	rjmp	.+46     	; 0x22fe <hal_slaveInterrupt+0x14c>
    22d0:	87 e0       	ldi	r24, 0x07	; 7
    22d2:	f8 01       	movw	r30, r16
    22d4:	86 83       	std	Z+6, r24	; 0x06
    22d6:	83 85       	ldd	r24, Z+11	; 0x0b
    22d8:	94 85       	ldd	r25, Z+12	; 0x0c
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	49 f0       	breq	.+18     	; 0x22f0 <hal_slaveInterrupt+0x13e>
    22de:	23 85       	ldd	r18, Z+11	; 0x0b
    22e0:	34 85       	ldd	r19, Z+12	; 0x0c
    22e2:	86 81       	ldd	r24, Z+6	; 0x06
    22e4:	a1 85       	ldd	r26, Z+9	; 0x09
    22e6:	b2 85       	ldd	r27, Z+10	; 0x0a
    22e8:	14 96       	adiw	r26, 0x04	; 4
    22ea:	6c 91       	ld	r22, X
    22ec:	f9 01       	movw	r30, r18
    22ee:	19 95       	eicall
    22f0:	d8 01       	movw	r26, r16
    22f2:	19 96       	adiw	r26, 0x09	; 9
    22f4:	ed 91       	ld	r30, X+
    22f6:	fc 91       	ld	r31, X
    22f8:	1a 97       	sbiw	r26, 0x0a	; 10
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	81 83       	std	Z+1, r24	; 0x01
    22fe:	0f 90       	pop	r0
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <findTwiElement>:
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	0f 92       	push	r0
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	e0 91 cb 20 	lds	r30, 0x20CB
    231a:	f0 91 cc 20 	lds	r31, 0x20CC
    231e:	22 81       	ldd	r18, Z+2	; 0x02
    2320:	33 81       	ldd	r19, Z+3	; 0x03
    2322:	e0 91 cb 20 	lds	r30, 0x20CB
    2326:	f0 91 cc 20 	lds	r31, 0x20CC
    232a:	0c c0       	rjmp	.+24     	; 0x2344 <findTwiElement+0x3a>
    232c:	e9 81       	ldd	r30, Y+1	; 0x01
    232e:	fa 81       	ldd	r31, Y+2	; 0x02
    2330:	01 90       	ld	r0, Z+
    2332:	f0 81       	ld	r31, Z
    2334:	e0 2d       	mov	r30, r0
    2336:	90 81       	ld	r25, Z
    2338:	98 17       	cp	r25, r24
    233a:	69 f0       	breq	.+26     	; 0x2356 <findTwiElement+0x4c>
    233c:	21 50       	subi	r18, 0x01	; 1
    233e:	30 40       	sbci	r19, 0x00	; 0
    2340:	e9 81       	ldd	r30, Y+1	; 0x01
    2342:	fa 81       	ldd	r31, Y+2	; 0x02
    2344:	40 85       	ldd	r20, Z+8	; 0x08
    2346:	51 85       	ldd	r21, Z+9	; 0x09
    2348:	49 83       	std	Y+1, r20	; 0x01
    234a:	5a 83       	std	Y+2, r21	; 0x02
    234c:	12 16       	cp	r1, r18
    234e:	13 06       	cpc	r1, r19
    2350:	6c f3       	brlt	.-38     	; 0x232c <findTwiElement+0x22>
    2352:	e0 e0       	ldi	r30, 0x00	; 0
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	cf 01       	movw	r24, r30
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <hal_masterInterrupt>:
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	6c 97       	sbiw	r28, 0x1c	; 28
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	8c 01       	movw	r16, r24
    237a:	19 82       	std	Y+1, r1	; 0x01
    237c:	1a 82       	std	Y+2, r1	; 0x02
    237e:	1b 82       	std	Y+3, r1	; 0x03
    2380:	dc 01       	movw	r26, r24
    2382:	17 96       	adiw	r26, 0x07	; 7
    2384:	ed 91       	ld	r30, X+
    2386:	fc 91       	ld	r31, X
    2388:	18 97       	sbiw	r26, 0x08	; 8
    238a:	83 81       	ldd	r24, Z+3	; 0x03
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	1d 96       	adiw	r26, 0x0d	; 13
    2390:	ed 90       	ld	r14, X+
    2392:	fc 90       	ld	r15, X
    2394:	1e 97       	sbiw	r26, 0x0e	; 14
    2396:	1f 96       	adiw	r26, 0x0f	; 15
    2398:	8d 91       	ld	r24, X+
    239a:	9c 91       	ld	r25, X
    239c:	50 97       	sbiw	r26, 0x10	; 16
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	9b 83       	std	Y+3, r25	; 0x03
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	83 ff       	sbrs	r24, 3
    23a6:	13 c0       	rjmp	.+38     	; 0x23ce <hal_masterInterrupt+0x6c>
    23a8:	17 96       	adiw	r26, 0x07	; 7
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	18 97       	sbiw	r26, 0x08	; 8
    23b0:	83 e0       	ldi	r24, 0x03	; 3
    23b2:	82 83       	std	Z+2, r24	; 0x02
    23b4:	17 96       	adiw	r26, 0x07	; 7
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	18 97       	sbiw	r26, 0x08	; 8
    23bc:	82 83       	std	Z+2, r24	; 0x02
    23be:	17 96       	adiw	r26, 0x07	; 7
    23c0:	ed 91       	ld	r30, X+
    23c2:	fc 91       	ld	r31, X
    23c4:	18 97       	sbiw	r26, 0x08	; 8
    23c6:	99 81       	ldd	r25, Y+1	; 0x01
    23c8:	98 60       	ori	r25, 0x08	; 8
    23ca:	93 83       	std	Z+3, r25	; 0x03
    23cc:	a6 c0       	rjmp	.+332    	; 0x251a <hal_masterInterrupt+0x1b8>
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	82 ff       	sbrs	r24, 2
    23d2:	22 c0       	rjmp	.+68     	; 0x2418 <hal_masterInterrupt+0xb6>
    23d4:	ce 01       	movw	r24, r28
    23d6:	04 96       	adiw	r24, 0x04	; 4
    23d8:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    23dc:	d8 01       	movw	r26, r16
    23de:	53 96       	adiw	r26, 0x13	; 19
    23e0:	fe 01       	movw	r30, r28
    23e2:	34 96       	adiw	r30, 0x04	; 4
    23e4:	89 e1       	ldi	r24, 0x19	; 25
    23e6:	01 90       	ld	r0, Z+
    23e8:	0d 92       	st	X+, r0
    23ea:	81 50       	subi	r24, 0x01	; 1
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <hal_masterInterrupt+0x84>
    23ee:	d8 01       	movw	r26, r16
    23f0:	17 96       	adiw	r26, 0x07	; 7
    23f2:	ed 91       	ld	r30, X+
    23f4:	fc 91       	ld	r31, X
    23f6:	18 97       	sbiw	r26, 0x08	; 8
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	82 83       	std	Z+2, r24	; 0x02
    23fc:	17 96       	adiw	r26, 0x07	; 7
    23fe:	ed 91       	ld	r30, X+
    2400:	fc 91       	ld	r31, X
    2402:	18 97       	sbiw	r26, 0x08	; 8
    2404:	82 83       	std	Z+2, r24	; 0x02
    2406:	17 96       	adiw	r26, 0x07	; 7
    2408:	ed 91       	ld	r30, X+
    240a:	fc 91       	ld	r31, X
    240c:	18 97       	sbiw	r26, 0x08	; 8
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	88 60       	ori	r24, 0x08	; 8
    2412:	83 83       	std	Z+3, r24	; 0x03
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	81 c0       	rjmp	.+258    	; 0x251a <hal_masterInterrupt+0x1b8>
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	84 ff       	sbrs	r24, 4
    241c:	0e c0       	rjmp	.+28     	; 0x243a <hal_masterInterrupt+0xd8>
    241e:	d8 01       	movw	r26, r16
    2420:	17 96       	adiw	r26, 0x07	; 7
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	18 97       	sbiw	r26, 0x08	; 8
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	82 83       	std	Z+2, r24	; 0x02
    242c:	17 96       	adiw	r26, 0x07	; 7
    242e:	ed 91       	ld	r30, X+
    2430:	fc 91       	ld	r31, X
    2432:	18 97       	sbiw	r26, 0x08	; 8
    2434:	82 83       	std	Z+2, r24	; 0x02
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	70 c0       	rjmp	.+224    	; 0x251a <hal_masterInterrupt+0x1b8>
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	86 ff       	sbrs	r24, 6
    243e:	2e c0       	rjmp	.+92     	; 0x249c <hal_masterInterrupt+0x13a>
    2440:	ce 01       	movw	r24, r28
    2442:	04 96       	adiw	r24, 0x04	; 4
    2444:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    2448:	f8 01       	movw	r30, r16
    244a:	73 96       	adiw	r30, 0x13	; 19
    244c:	de 01       	movw	r26, r28
    244e:	14 96       	adiw	r26, 0x04	; 4
    2450:	89 e1       	ldi	r24, 0x19	; 25
    2452:	0d 90       	ld	r0, X+
    2454:	01 92       	st	Z+, r0
    2456:	81 50       	subi	r24, 0x01	; 1
    2458:	e1 f7       	brne	.-8      	; 0x2452 <hal_masterInterrupt+0xf0>
    245a:	f8 01       	movw	r30, r16
    245c:	21 89       	ldd	r18, Z+17	; 0x11
    245e:	32 89       	ldd	r19, Z+18	; 0x12
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	98 f4       	brcc	.+38     	; 0x2490 <hal_masterInterrupt+0x12e>
    246a:	27 81       	ldd	r18, Z+7	; 0x07
    246c:	30 85       	ldd	r19, Z+8	; 0x08
    246e:	01 88       	ldd	r0, Z+17	; 0x11
    2470:	f2 89       	ldd	r31, Z+18	; 0x12
    2472:	e0 2d       	mov	r30, r0
    2474:	ee 0d       	add	r30, r14
    2476:	ff 1d       	adc	r31, r15
    2478:	80 81       	ld	r24, Z
    247a:	d9 01       	movw	r26, r18
    247c:	16 96       	adiw	r26, 0x06	; 6
    247e:	8c 93       	st	X, r24
    2480:	16 97       	sbiw	r26, 0x06	; 6
    2482:	f8 01       	movw	r30, r16
    2484:	81 89       	ldd	r24, Z+17	; 0x11
    2486:	92 89       	ldd	r25, Z+18	; 0x12
    2488:	01 96       	adiw	r24, 0x01	; 1
    248a:	81 8b       	std	Z+17, r24	; 0x11
    248c:	92 8b       	std	Z+18, r25	; 0x12
    248e:	48 c0       	rjmp	.+144    	; 0x2520 <hal_masterInterrupt+0x1be>
    2490:	d8 01       	movw	r26, r16
    2492:	07 80       	ldd	r0, Z+7	; 0x07
    2494:	f0 85       	ldd	r31, Z+8	; 0x08
    2496:	e0 2d       	mov	r30, r0
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	38 c0       	rjmp	.+112    	; 0x250c <hal_masterInterrupt+0x1aa>
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	87 ff       	sbrs	r24, 7
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <hal_masterInterrupt+0x1be>
    24a2:	ce 01       	movw	r24, r28
    24a4:	04 96       	adiw	r24, 0x04	; 4
    24a6:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    24aa:	f8 01       	movw	r30, r16
    24ac:	73 96       	adiw	r30, 0x13	; 19
    24ae:	de 01       	movw	r26, r28
    24b0:	14 96       	adiw	r26, 0x04	; 4
    24b2:	89 e1       	ldi	r24, 0x19	; 25
    24b4:	0d 90       	ld	r0, X+
    24b6:	01 92       	st	Z+, r0
    24b8:	81 50       	subi	r24, 0x01	; 1
    24ba:	e1 f7       	brne	.-8      	; 0x24b4 <hal_masterInterrupt+0x152>
    24bc:	f8 01       	movw	r30, r16
    24be:	21 89       	ldd	r18, Z+17	; 0x11
    24c0:	32 89       	ldd	r19, Z+18	; 0x12
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	28 17       	cp	r18, r24
    24c8:	39 07       	cpc	r19, r25
    24ca:	d8 f4       	brcc	.+54     	; 0x2502 <hal_masterInterrupt+0x1a0>
    24cc:	01 88       	ldd	r0, Z+17	; 0x11
    24ce:	f2 89       	ldd	r31, Z+18	; 0x12
    24d0:	e0 2d       	mov	r30, r0
    24d2:	ee 0d       	add	r30, r14
    24d4:	ff 1d       	adc	r31, r15
    24d6:	d8 01       	movw	r26, r16
    24d8:	17 96       	adiw	r26, 0x07	; 7
    24da:	8d 91       	ld	r24, X+
    24dc:	9c 91       	ld	r25, X
    24de:	18 97       	sbiw	r26, 0x08	; 8
    24e0:	dc 01       	movw	r26, r24
    24e2:	16 96       	adiw	r26, 0x06	; 6
    24e4:	8c 91       	ld	r24, X
    24e6:	16 97       	sbiw	r26, 0x06	; 6
    24e8:	80 83       	st	Z, r24
    24ea:	f8 01       	movw	r30, r16
    24ec:	81 89       	ldd	r24, Z+17	; 0x11
    24ee:	92 89       	ldd	r25, Z+18	; 0x12
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	81 8b       	std	Z+17, r24	; 0x11
    24f4:	92 8b       	std	Z+18, r25	; 0x12
    24f6:	07 80       	ldd	r0, Z+7	; 0x07
    24f8:	f0 85       	ldd	r31, Z+8	; 0x08
    24fa:	e0 2d       	mov	r30, r0
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	82 83       	std	Z+2, r24	; 0x02
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <hal_masterInterrupt+0x1be>
    2502:	d8 01       	movw	r26, r16
    2504:	07 80       	ldd	r0, Z+7	; 0x07
    2506:	f0 85       	ldd	r31, Z+8	; 0x08
    2508:	e0 2d       	mov	r30, r0
    250a:	87 e0       	ldi	r24, 0x07	; 7
    250c:	82 83       	std	Z+2, r24	; 0x02
    250e:	17 96       	adiw	r26, 0x07	; 7
    2510:	ed 91       	ld	r30, X+
    2512:	fc 91       	ld	r31, X
    2514:	18 97       	sbiw	r26, 0x08	; 8
    2516:	82 83       	std	Z+2, r24	; 0x02
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	16 96       	adiw	r26, 0x06	; 6
    251c:	8c 93       	st	X, r24
    251e:	16 97       	sbiw	r26, 0x06	; 6
    2520:	6c 96       	adiw	r28, 0x1c	; 28
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <__vector_13>:
    2534:	1f 92       	push	r1
    2536:	0f 92       	push	r0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	0f 92       	push	r0
    253c:	08 b6       	in	r0, 0x38	; 56
    253e:	0f 92       	push	r0
    2540:	09 b6       	in	r0, 0x39	; 57
    2542:	0f 92       	push	r0
    2544:	0b b6       	in	r0, 0x3b	; 59
    2546:	0f 92       	push	r0
    2548:	11 24       	eor	r1, r1
    254a:	2f 93       	push	r18
    254c:	3f 93       	push	r19
    254e:	4f 93       	push	r20
    2550:	5f 93       	push	r21
    2552:	6f 93       	push	r22
    2554:	7f 93       	push	r23
    2556:	8f 93       	push	r24
    2558:	9f 93       	push	r25
    255a:	af 93       	push	r26
    255c:	bf 93       	push	r27
    255e:	ef 93       	push	r30
    2560:	ff 93       	push	r31
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	11 f0       	breq	.+4      	; 0x2570 <__vector_13+0x3c>
    256c:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    2570:	ff 91       	pop	r31
    2572:	ef 91       	pop	r30
    2574:	bf 91       	pop	r27
    2576:	af 91       	pop	r26
    2578:	9f 91       	pop	r25
    257a:	8f 91       	pop	r24
    257c:	7f 91       	pop	r23
    257e:	6f 91       	pop	r22
    2580:	5f 91       	pop	r21
    2582:	4f 91       	pop	r20
    2584:	3f 91       	pop	r19
    2586:	2f 91       	pop	r18
    2588:	0f 90       	pop	r0
    258a:	0b be       	out	0x3b, r0	; 59
    258c:	0f 90       	pop	r0
    258e:	09 be       	out	0x39, r0	; 57
    2590:	0f 90       	pop	r0
    2592:	08 be       	out	0x38, r0	; 56
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <__vector_12>:
    259e:	1f 92       	push	r1
    25a0:	0f 92       	push	r0
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	0f 92       	push	r0
    25a6:	08 b6       	in	r0, 0x38	; 56
    25a8:	0f 92       	push	r0
    25aa:	09 b6       	in	r0, 0x39	; 57
    25ac:	0f 92       	push	r0
    25ae:	0b b6       	in	r0, 0x3b	; 59
    25b0:	0f 92       	push	r0
    25b2:	11 24       	eor	r1, r1
    25b4:	2f 93       	push	r18
    25b6:	3f 93       	push	r19
    25b8:	4f 93       	push	r20
    25ba:	5f 93       	push	r21
    25bc:	6f 93       	push	r22
    25be:	7f 93       	push	r23
    25c0:	8f 93       	push	r24
    25c2:	9f 93       	push	r25
    25c4:	af 93       	push	r26
    25c6:	bf 93       	push	r27
    25c8:	ef 93       	push	r30
    25ca:	ff 93       	push	r31
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	11 f0       	breq	.+4      	; 0x25da <__vector_12+0x3c>
    25d6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <hal_slaveInterrupt>
    25da:	ff 91       	pop	r31
    25dc:	ef 91       	pop	r30
    25de:	bf 91       	pop	r27
    25e0:	af 91       	pop	r26
    25e2:	9f 91       	pop	r25
    25e4:	8f 91       	pop	r24
    25e6:	7f 91       	pop	r23
    25e8:	6f 91       	pop	r22
    25ea:	5f 91       	pop	r21
    25ec:	4f 91       	pop	r20
    25ee:	3f 91       	pop	r19
    25f0:	2f 91       	pop	r18
    25f2:	0f 90       	pop	r0
    25f4:	0b be       	out	0x3b, r0	; 59
    25f6:	0f 90       	pop	r0
    25f8:	09 be       	out	0x39, r0	; 57
    25fa:	0f 90       	pop	r0
    25fc:	08 be       	out	0x38, r0	; 56
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <__vector_76>:
    2608:	1f 92       	push	r1
    260a:	0f 92       	push	r0
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	0f 92       	push	r0
    2610:	08 b6       	in	r0, 0x38	; 56
    2612:	0f 92       	push	r0
    2614:	09 b6       	in	r0, 0x39	; 57
    2616:	0f 92       	push	r0
    2618:	0b b6       	in	r0, 0x3b	; 59
    261a:	0f 92       	push	r0
    261c:	11 24       	eor	r1, r1
    261e:	2f 93       	push	r18
    2620:	3f 93       	push	r19
    2622:	4f 93       	push	r20
    2624:	5f 93       	push	r21
    2626:	6f 93       	push	r22
    2628:	7f 93       	push	r23
    262a:	8f 93       	push	r24
    262c:	9f 93       	push	r25
    262e:	af 93       	push	r26
    2630:	bf 93       	push	r27
    2632:	ef 93       	push	r30
    2634:	ff 93       	push	r31
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	11 f0       	breq	.+4      	; 0x2644 <__vector_76+0x3c>
    2640:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    2644:	ff 91       	pop	r31
    2646:	ef 91       	pop	r30
    2648:	bf 91       	pop	r27
    264a:	af 91       	pop	r26
    264c:	9f 91       	pop	r25
    264e:	8f 91       	pop	r24
    2650:	7f 91       	pop	r23
    2652:	6f 91       	pop	r22
    2654:	5f 91       	pop	r21
    2656:	4f 91       	pop	r20
    2658:	3f 91       	pop	r19
    265a:	2f 91       	pop	r18
    265c:	0f 90       	pop	r0
    265e:	0b be       	out	0x3b, r0	; 59
    2660:	0f 90       	pop	r0
    2662:	09 be       	out	0x39, r0	; 57
    2664:	0f 90       	pop	r0
    2666:	08 be       	out	0x38, r0	; 56
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	1f 90       	pop	r1
    2670:	18 95       	reti

00002672 <__vector_75>:
    2672:	1f 92       	push	r1
    2674:	0f 92       	push	r0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	0f 92       	push	r0
    267a:	08 b6       	in	r0, 0x38	; 56
    267c:	0f 92       	push	r0
    267e:	09 b6       	in	r0, 0x39	; 57
    2680:	0f 92       	push	r0
    2682:	0b b6       	in	r0, 0x3b	; 59
    2684:	0f 92       	push	r0
    2686:	11 24       	eor	r1, r1
    2688:	2f 93       	push	r18
    268a:	3f 93       	push	r19
    268c:	4f 93       	push	r20
    268e:	5f 93       	push	r21
    2690:	6f 93       	push	r22
    2692:	7f 93       	push	r23
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	af 93       	push	r26
    269a:	bf 93       	push	r27
    269c:	ef 93       	push	r30
    269e:	ff 93       	push	r31
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	11 f0       	breq	.+4      	; 0x26ae <__vector_75+0x3c>
    26aa:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <hal_slaveInterrupt>
    26ae:	ff 91       	pop	r31
    26b0:	ef 91       	pop	r30
    26b2:	bf 91       	pop	r27
    26b4:	af 91       	pop	r26
    26b6:	9f 91       	pop	r25
    26b8:	8f 91       	pop	r24
    26ba:	7f 91       	pop	r23
    26bc:	6f 91       	pop	r22
    26be:	5f 91       	pop	r21
    26c0:	4f 91       	pop	r20
    26c2:	3f 91       	pop	r19
    26c4:	2f 91       	pop	r18
    26c6:	0f 90       	pop	r0
    26c8:	0b be       	out	0x3b, r0	; 59
    26ca:	0f 90       	pop	r0
    26cc:	09 be       	out	0x39, r0	; 57
    26ce:	0f 90       	pop	r0
    26d0:	08 be       	out	0x38, r0	; 56
    26d2:	0f 90       	pop	r0
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <__vector_46>:
    26dc:	1f 92       	push	r1
    26de:	0f 92       	push	r0
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	0f 92       	push	r0
    26e4:	08 b6       	in	r0, 0x38	; 56
    26e6:	0f 92       	push	r0
    26e8:	09 b6       	in	r0, 0x39	; 57
    26ea:	0f 92       	push	r0
    26ec:	0b b6       	in	r0, 0x3b	; 59
    26ee:	0f 92       	push	r0
    26f0:	11 24       	eor	r1, r1
    26f2:	2f 93       	push	r18
    26f4:	3f 93       	push	r19
    26f6:	4f 93       	push	r20
    26f8:	5f 93       	push	r21
    26fa:	6f 93       	push	r22
    26fc:	7f 93       	push	r23
    26fe:	8f 93       	push	r24
    2700:	9f 93       	push	r25
    2702:	af 93       	push	r26
    2704:	bf 93       	push	r27
    2706:	ef 93       	push	r30
    2708:	ff 93       	push	r31
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	11 f0       	breq	.+4      	; 0x2718 <__vector_46+0x3c>
    2714:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    2718:	ff 91       	pop	r31
    271a:	ef 91       	pop	r30
    271c:	bf 91       	pop	r27
    271e:	af 91       	pop	r26
    2720:	9f 91       	pop	r25
    2722:	8f 91       	pop	r24
    2724:	7f 91       	pop	r23
    2726:	6f 91       	pop	r22
    2728:	5f 91       	pop	r21
    272a:	4f 91       	pop	r20
    272c:	3f 91       	pop	r19
    272e:	2f 91       	pop	r18
    2730:	0f 90       	pop	r0
    2732:	0b be       	out	0x3b, r0	; 59
    2734:	0f 90       	pop	r0
    2736:	09 be       	out	0x39, r0	; 57
    2738:	0f 90       	pop	r0
    273a:	08 be       	out	0x38, r0	; 56
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_45>:
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	08 b6       	in	r0, 0x38	; 56
    2750:	0f 92       	push	r0
    2752:	09 b6       	in	r0, 0x39	; 57
    2754:	0f 92       	push	r0
    2756:	0b b6       	in	r0, 0x3b	; 59
    2758:	0f 92       	push	r0
    275a:	11 24       	eor	r1, r1
    275c:	2f 93       	push	r18
    275e:	3f 93       	push	r19
    2760:	4f 93       	push	r20
    2762:	5f 93       	push	r21
    2764:	6f 93       	push	r22
    2766:	7f 93       	push	r23
    2768:	8f 93       	push	r24
    276a:	9f 93       	push	r25
    276c:	af 93       	push	r26
    276e:	bf 93       	push	r27
    2770:	ef 93       	push	r30
    2772:	ff 93       	push	r31
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	11 f0       	breq	.+4      	; 0x2782 <__vector_45+0x3c>
    277e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <hal_slaveInterrupt>
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0b be       	out	0x3b, r0	; 59
    279e:	0f 90       	pop	r0
    27a0:	09 be       	out	0x39, r0	; 57
    27a2:	0f 90       	pop	r0
    27a4:	08 be       	out	0x38, r0	; 56
    27a6:	0f 90       	pop	r0
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	0f 90       	pop	r0
    27ac:	1f 90       	pop	r1
    27ae:	18 95       	reti

000027b0 <__vector_107>:
    27b0:	1f 92       	push	r1
    27b2:	0f 92       	push	r0
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	0f 92       	push	r0
    27b8:	08 b6       	in	r0, 0x38	; 56
    27ba:	0f 92       	push	r0
    27bc:	09 b6       	in	r0, 0x39	; 57
    27be:	0f 92       	push	r0
    27c0:	0b b6       	in	r0, 0x3b	; 59
    27c2:	0f 92       	push	r0
    27c4:	11 24       	eor	r1, r1
    27c6:	2f 93       	push	r18
    27c8:	3f 93       	push	r19
    27ca:	4f 93       	push	r20
    27cc:	5f 93       	push	r21
    27ce:	6f 93       	push	r22
    27d0:	7f 93       	push	r23
    27d2:	8f 93       	push	r24
    27d4:	9f 93       	push	r25
    27d6:	af 93       	push	r26
    27d8:	bf 93       	push	r27
    27da:	ef 93       	push	r30
    27dc:	ff 93       	push	r31
    27de:	83 e0       	ldi	r24, 0x03	; 3
    27e0:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	11 f0       	breq	.+4      	; 0x27ec <__vector_107+0x3c>
    27e8:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	bf 91       	pop	r27
    27f2:	af 91       	pop	r26
    27f4:	9f 91       	pop	r25
    27f6:	8f 91       	pop	r24
    27f8:	7f 91       	pop	r23
    27fa:	6f 91       	pop	r22
    27fc:	5f 91       	pop	r21
    27fe:	4f 91       	pop	r20
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	0b be       	out	0x3b, r0	; 59
    2808:	0f 90       	pop	r0
    280a:	09 be       	out	0x39, r0	; 57
    280c:	0f 90       	pop	r0
    280e:	08 be       	out	0x38, r0	; 56
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <__vector_106>:
    281a:	1f 92       	push	r1
    281c:	0f 92       	push	r0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	08 b6       	in	r0, 0x38	; 56
    2824:	0f 92       	push	r0
    2826:	09 b6       	in	r0, 0x39	; 57
    2828:	0f 92       	push	r0
    282a:	0b b6       	in	r0, 0x3b	; 59
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	83 e0       	ldi	r24, 0x03	; 3
    284a:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	11 f0       	breq	.+4      	; 0x2856 <__vector_106+0x3c>
    2852:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <hal_slaveInterrupt>
    2856:	ff 91       	pop	r31
    2858:	ef 91       	pop	r30
    285a:	bf 91       	pop	r27
    285c:	af 91       	pop	r26
    285e:	9f 91       	pop	r25
    2860:	8f 91       	pop	r24
    2862:	7f 91       	pop	r23
    2864:	6f 91       	pop	r22
    2866:	5f 91       	pop	r21
    2868:	4f 91       	pop	r20
    286a:	3f 91       	pop	r19
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0b be       	out	0x3b, r0	; 59
    2872:	0f 90       	pop	r0
    2874:	09 be       	out	0x39, r0	; 57
    2876:	0f 90       	pop	r0
    2878:	08 be       	out	0x38, r0	; 56
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	0f 90       	pop	r0
    2880:	1f 90       	pop	r1
    2882:	18 95       	reti

00002884 <hal_twiGetBaudRate>:
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	0f 92       	push	r0
    288e:	0f 92       	push	r0
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	e9 81       	ldd	r30, Y+1	; 0x01
    289a:	fa 81       	ldd	r31, Y+2	; 0x02
    289c:	80 91 cb 20 	lds	r24, 0x20CB
    28a0:	90 91 cc 20 	lds	r25, 0x20CC
    28a4:	24 81       	ldd	r18, Z+4	; 0x04
    28a6:	35 81       	ldd	r19, Z+5	; 0x05
    28a8:	28 17       	cp	r18, r24
    28aa:	39 07       	cpc	r19, r25
    28ac:	51 f4       	brne	.+20     	; 0x28c2 <hal_twiGetBaudRate+0x3e>
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	01 90       	ld	r0, Z+
    28b4:	f0 81       	ld	r31, Z
    28b6:	e0 2d       	mov	r30, r0
    28b8:	02 81       	ldd	r16, Z+2	; 0x02
    28ba:	13 81       	ldd	r17, Z+3	; 0x03
    28bc:	24 81       	ldd	r18, Z+4	; 0x04
    28be:	35 81       	ldd	r19, Z+5	; 0x05
    28c0:	04 c0       	rjmp	.+8      	; 0x28ca <hal_twiGetBaudRate+0x46>
    28c2:	0e ef       	ldi	r16, 0xFE	; 254
    28c4:	1f ef       	ldi	r17, 0xFF	; 255
    28c6:	2f ef       	ldi	r18, 0xFF	; 255
    28c8:	3f ef       	ldi	r19, 0xFF	; 255
    28ca:	b8 01       	movw	r22, r16
    28cc:	c9 01       	movw	r24, r18
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	1f 91       	pop	r17
    28d8:	0f 91       	pop	r16
    28da:	08 95       	ret

000028dc <hal_requestTwiChannel>:
    28dc:	1f 93       	push	r17
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	25 97       	sbiw	r28, 0x05	; 5
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	18 2f       	mov	r17, r24
    28ee:	8f b7       	in	r24, 0x3f	; 63
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	f8 94       	cli
    28f4:	14 30       	cpi	r17, 0x04	; 4
    28f6:	28 f0       	brcs	.+10     	; 0x2902 <hal_requestTwiChannel+0x26>
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	8f bf       	out	0x3f, r24	; 63
    28fc:	8b ef       	ldi	r24, 0xFB	; 251
    28fe:	9f ef       	ldi	r25, 0xFF	; 255
    2900:	3a c0       	rjmp	.+116    	; 0x2976 <hal_requestTwiChannel+0x9a>
    2902:	81 2f       	mov	r24, r17
    2904:	0e 94 85 11 	call	0x230a	; 0x230a <findTwiElement>
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	89 f5       	brne	.+98     	; 0x296e <hal_requestTwiChannel+0x92>
    290c:	8c e2       	ldi	r24, 0x2C	; 44
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    2914:	8a 83       	std	Y+2, r24	; 0x02
    2916:	9b 83       	std	Y+3, r25	; 0x03
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	97 fd       	sbrc	r25, 7
    291e:	0c c0       	rjmp	.+24     	; 0x2938 <hal_requestTwiChannel+0x5c>
    2920:	80 91 cb 20 	lds	r24, 0x20CB
    2924:	90 91 cc 20 	lds	r25, 0x20CC
    2928:	6a 81       	ldd	r22, Y+2	; 0x02
    292a:	7b 81       	ldd	r23, Y+3	; 0x03
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	02 c0       	rjmp	.+4      	; 0x293c <hal_requestTwiChannel+0x60>
    2938:	8f ef       	ldi	r24, 0xFF	; 255
    293a:	9f ef       	ldi	r25, 0xFF	; 255
    293c:	8c 83       	std	Y+4, r24	; 0x04
    293e:	9d 83       	std	Y+5, r25	; 0x05
    2940:	8c 81       	ldd	r24, Y+4	; 0x04
    2942:	9d 81       	ldd	r25, Y+5	; 0x05
    2944:	97 ff       	sbrs	r25, 7
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <hal_requestTwiChannel+0x76>
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	8f bf       	out	0x3f, r24	; 63
    294c:	8f ef       	ldi	r24, 0xFF	; 255
    294e:	9f ef       	ldi	r25, 0xFF	; 255
    2950:	12 c0       	rjmp	.+36     	; 0x2976 <hal_requestTwiChannel+0x9a>
    2952:	ec 81       	ldd	r30, Y+4	; 0x04
    2954:	fd 81       	ldd	r31, Y+5	; 0x05
    2956:	01 90       	ld	r0, Z+
    2958:	f0 81       	ld	r31, Z
    295a:	e0 2d       	mov	r30, r0
    295c:	11 82       	std	Z+1, r1	; 0x01
    295e:	10 83       	st	Z, r17
    2960:	85 e0       	ldi	r24, 0x05	; 5
    2962:	86 83       	std	Z+6, r24	; 0x06
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	8f bf       	out	0x3f, r24	; 63
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <hal_requestTwiChannel+0x9a>
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	8f bf       	out	0x3f, r24	; 63
    2972:	8d ef       	ldi	r24, 0xFD	; 253
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	25 96       	adiw	r28, 0x05	; 5
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	08 95       	ret

00002984 <hal_releaseTwiChannel>:
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	00 d0       	rcall	.+0      	; 0x298a <hal_releaseTwiChannel+0x6>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	8a 83       	std	Y+2, r24	; 0x02
    2990:	9b 83       	std	Y+3, r25	; 0x03
    2992:	8f b7       	in	r24, 0x3f	; 63
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	f8 94       	cli
    2998:	ea 81       	ldd	r30, Y+2	; 0x02
    299a:	fb 81       	ldd	r31, Y+3	; 0x03
    299c:	80 91 cb 20 	lds	r24, 0x20CB
    29a0:	90 91 cc 20 	lds	r25, 0x20CC
    29a4:	24 81       	ldd	r18, Z+4	; 0x04
    29a6:	35 81       	ldd	r19, Z+5	; 0x05
    29a8:	28 17       	cp	r18, r24
    29aa:	39 07       	cpc	r19, r25
    29ac:	21 f0       	breq	.+8      	; 0x29b6 <hal_releaseTwiChannel+0x32>
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	8f bf       	out	0x3f, r24	; 63
    29b2:	8e ef       	ldi	r24, 0xFE	; 254
    29b4:	27 c0       	rjmp	.+78     	; 0x2a04 <hal_releaseTwiChannel+0x80>
    29b6:	ea 81       	ldd	r30, Y+2	; 0x02
    29b8:	fb 81       	ldd	r31, Y+3	; 0x03
    29ba:	a0 81       	ld	r26, Z
    29bc:	b1 81       	ldd	r27, Z+1	; 0x01
    29be:	17 96       	adiw	r26, 0x07	; 7
    29c0:	ed 91       	ld	r30, X+
    29c2:	fc 91       	ld	r31, X
    29c4:	18 97       	sbiw	r26, 0x08	; 8
    29c6:	30 97       	sbiw	r30, 0x00	; 0
    29c8:	59 f4       	brne	.+22     	; 0x29e0 <hal_releaseTwiChannel+0x5c>
    29ca:	19 96       	adiw	r26, 0x09	; 9
    29cc:	ed 91       	ld	r30, X+
    29ce:	fc 91       	ld	r31, X
    29d0:	1a 97       	sbiw	r26, 0x0a	; 10
    29d2:	13 82       	std	Z+3, r1	; 0x03
    29d4:	15 82       	std	Z+5, r1	; 0x05
    29d6:	10 82       	st	Z, r1
    29d8:	11 82       	std	Z+1, r1	; 0x01
    29da:	14 82       	std	Z+4, r1	; 0x04
    29dc:	12 82       	std	Z+2, r1	; 0x02
    29de:	07 c0       	rjmp	.+14     	; 0x29ee <hal_releaseTwiChannel+0x6a>
    29e0:	15 82       	std	Z+5, r1	; 0x05
    29e2:	14 82       	std	Z+4, r1	; 0x04
    29e4:	10 82       	st	Z, r1
    29e6:	11 82       	std	Z+1, r1	; 0x01
    29e8:	12 82       	std	Z+2, r1	; 0x02
    29ea:	16 82       	std	Z+6, r1	; 0x06
    29ec:	13 82       	std	Z+3, r1	; 0x03
    29ee:	80 91 cb 20 	lds	r24, 0x20CB
    29f2:	90 91 cc 20 	lds	r25, 0x20CC
    29f6:	6a 81       	ldd	r22, Y+2	; 0x02
    29f8:	7b 81       	ldd	r23, Y+3	; 0x03
    29fa:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8f bf       	out	0x3f, r24	; 63
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	23 96       	adiw	r28, 0x03	; 3
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	08 95       	ret

00002a10 <hal_configureTwiChannel>:
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	60 97       	sbiw	r28, 0x10	; 16
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	8f 83       	std	Y+7, r24	; 0x07
    2a28:	98 87       	std	Y+8, r25	; 0x08
    2a2a:	f0 2e       	mov	r15, r16
    2a2c:	09 87       	std	Y+9, r16	; 0x09
    2a2e:	1a 87       	std	Y+10, r17	; 0x0a
    2a30:	2b 87       	std	Y+11, r18	; 0x0b
    2a32:	3c 87       	std	Y+12, r19	; 0x0c
    2a34:	4d 87       	std	Y+13, r20	; 0x0d
    2a36:	e5 2e       	mov	r14, r21
    2a38:	5e 87       	std	Y+14, r21	; 0x0e
    2a3a:	6f 87       	std	Y+15, r22	; 0x0f
    2a3c:	78 8b       	std	Y+16, r23	; 0x10
    2a3e:	8f b7       	in	r24, 0x3f	; 63
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	f8 94       	cli
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	80 17       	cp	r24, r16
    2a48:	20 f4       	brcc	.+8      	; 0x2a52 <hal_configureTwiChannel+0x42>
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	8f bf       	out	0x3f, r24	; 63
    2a4e:	8a ef       	ldi	r24, 0xFA	; 250
    2a50:	f7 c0       	rjmp	.+494    	; 0x2c40 <hal_configureTwiChannel+0x230>
    2a52:	a1 e0       	ldi	r26, 0x01	; 1
    2a54:	0a 17       	cp	r16, r26
    2a56:	31 f4       	brne	.+12     	; 0x2a64 <hal_configureTwiChannel+0x54>
    2a58:	57 ff       	sbrs	r21, 7
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <hal_configureTwiChannel+0x54>
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	8f bf       	out	0x3f, r24	; 63
    2a60:	89 ef       	ldi	r24, 0xF9	; 249
    2a62:	ee c0       	rjmp	.+476    	; 0x2c40 <hal_configureTwiChannel+0x230>
    2a64:	ef 81       	ldd	r30, Y+7	; 0x07
    2a66:	f8 85       	ldd	r31, Y+8	; 0x08
    2a68:	80 91 cb 20 	lds	r24, 0x20CB
    2a6c:	90 91 cc 20 	lds	r25, 0x20CC
    2a70:	24 81       	ldd	r18, Z+4	; 0x04
    2a72:	35 81       	ldd	r19, Z+5	; 0x05
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	21 f0       	breq	.+8      	; 0x2a82 <hal_configureTwiChannel+0x72>
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	8f bf       	out	0x3f, r24	; 63
    2a7e:	8e ef       	ldi	r24, 0xFE	; 254
    2a80:	df c0       	rjmp	.+446    	; 0x2c40 <hal_configureTwiChannel+0x230>
    2a82:	ef 81       	ldd	r30, Y+7	; 0x07
    2a84:	f8 85       	ldd	r31, Y+8	; 0x08
    2a86:	00 81       	ld	r16, Z
    2a88:	11 81       	ldd	r17, Z+1	; 0x01
    2a8a:	ff 20       	and	r15, r15
    2a8c:	39 f4       	brne	.+14     	; 0x2a9c <hal_configureTwiChannel+0x8c>
    2a8e:	1a 82       	std	Y+2, r1	; 0x02
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	8b 83       	std	Y+3, r24	; 0x03
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	8c 83       	std	Y+4, r24	; 0x04
    2a98:	1e 82       	std	Y+6, r1	; 0x06
    2a9a:	07 c0       	rjmp	.+14     	; 0x2aaa <hal_configureTwiChannel+0x9a>
    2a9c:	83 e0       	ldi	r24, 0x03	; 3
    2a9e:	8a 83       	std	Y+2, r24	; 0x02
    2aa0:	1b 82       	std	Y+3, r1	; 0x03
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	8c 83       	std	Y+4, r24	; 0x04
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	f8 01       	movw	r30, r16
    2aac:	80 81       	ld	r24, Z
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	89 f0       	breq	.+34     	; 0x2ad4 <hal_configureTwiChannel+0xc4>
    2ab2:	81 30       	cpi	r24, 0x01	; 1
    2ab4:	28 f0       	brcs	.+10     	; 0x2ac0 <hal_configureTwiChannel+0xb0>
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	c1 f0       	breq	.+48     	; 0x2aea <hal_configureTwiChannel+0xda>
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	89 f5       	brne	.+98     	; 0x2b20 <hal_configureTwiChannel+0x110>
    2abe:	1f c0       	rjmp	.+62     	; 0x2afe <hal_configureTwiChannel+0xee>
    2ac0:	81 e8       	ldi	r24, 0x81	; 129
    2ac2:	94 e0       	ldi	r25, 0x04	; 4
    2ac4:	87 83       	std	Z+7, r24	; 0x07
    2ac6:	90 87       	std	Z+8, r25	; 0x08
    2ac8:	88 e8       	ldi	r24, 0x88	; 136
    2aca:	94 e0       	ldi	r25, 0x04	; 4
    2acc:	81 87       	std	Z+9, r24	; 0x09
    2ace:	92 87       	std	Z+10, r25	; 0x0a
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	1f c0       	rjmp	.+62     	; 0x2b12 <hal_configureTwiChannel+0x102>
    2ad4:	81 e9       	ldi	r24, 0x91	; 145
    2ad6:	94 e0       	ldi	r25, 0x04	; 4
    2ad8:	f8 01       	movw	r30, r16
    2ada:	87 83       	std	Z+7, r24	; 0x07
    2adc:	90 87       	std	Z+8, r25	; 0x08
    2ade:	88 e9       	ldi	r24, 0x98	; 152
    2ae0:	94 e0       	ldi	r25, 0x04	; 4
    2ae2:	81 87       	std	Z+9, r24	; 0x09
    2ae4:	92 87       	std	Z+10, r25	; 0x0a
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	14 c0       	rjmp	.+40     	; 0x2b12 <hal_configureTwiChannel+0x102>
    2aea:	81 ea       	ldi	r24, 0xA1	; 161
    2aec:	94 e0       	ldi	r25, 0x04	; 4
    2aee:	87 83       	std	Z+7, r24	; 0x07
    2af0:	90 87       	std	Z+8, r25	; 0x08
    2af2:	88 ea       	ldi	r24, 0xA8	; 168
    2af4:	94 e0       	ldi	r25, 0x04	; 4
    2af6:	81 87       	std	Z+9, r24	; 0x09
    2af8:	92 87       	std	Z+10, r25	; 0x0a
    2afa:	84 e0       	ldi	r24, 0x04	; 4
    2afc:	0a c0       	rjmp	.+20     	; 0x2b12 <hal_configureTwiChannel+0x102>
    2afe:	81 eb       	ldi	r24, 0xB1	; 177
    2b00:	94 e0       	ldi	r25, 0x04	; 4
    2b02:	f8 01       	movw	r30, r16
    2b04:	87 83       	std	Z+7, r24	; 0x07
    2b06:	90 87       	std	Z+8, r25	; 0x08
    2b08:	88 eb       	ldi	r24, 0xB8	; 184
    2b0a:	94 e0       	ldi	r25, 0x04	; 4
    2b0c:	81 87       	std	Z+9, r24	; 0x09
    2b0e:	92 87       	std	Z+10, r25	; 0x0a
    2b10:	85 e0       	ldi	r24, 0x05	; 5
    2b12:	2a 81       	ldd	r18, Y+2	; 0x02
    2b14:	3b 81       	ldd	r19, Y+3	; 0x03
    2b16:	4c 81       	ldd	r20, Y+4	; 0x04
    2b18:	5d 81       	ldd	r21, Y+5	; 0x05
    2b1a:	6e 81       	ldd	r22, Y+6	; 0x06
    2b1c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    2b20:	d8 01       	movw	r26, r16
    2b22:	17 96       	adiw	r26, 0x07	; 7
    2b24:	ed 91       	ld	r30, X+
    2b26:	fc 91       	ld	r31, X
    2b28:	18 97       	sbiw	r26, 0x08	; 8
    2b2a:	15 82       	std	Z+5, r1	; 0x05
    2b2c:	14 82       	std	Z+4, r1	; 0x04
    2b2e:	10 82       	st	Z, r1
    2b30:	11 82       	std	Z+1, r1	; 0x01
    2b32:	12 82       	std	Z+2, r1	; 0x02
    2b34:	16 82       	std	Z+6, r1	; 0x06
    2b36:	13 82       	std	Z+3, r1	; 0x03
    2b38:	19 96       	adiw	r26, 0x09	; 9
    2b3a:	ed 91       	ld	r30, X+
    2b3c:	fc 91       	ld	r31, X
    2b3e:	1a 97       	sbiw	r26, 0x0a	; 10
    2b40:	13 82       	std	Z+3, r1	; 0x03
    2b42:	15 82       	std	Z+5, r1	; 0x05
    2b44:	10 82       	st	Z, r1
    2b46:	11 82       	std	Z+1, r1	; 0x01
    2b48:	14 82       	std	Z+4, r1	; 0x04
    2b4a:	12 82       	std	Z+2, r1	; 0x02
    2b4c:	ff 20       	and	r15, r15
    2b4e:	e1 f5       	brne	.+120    	; 0x2bc8 <hal_configureTwiChannel+0x1b8>
    2b50:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    2b54:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b56:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b58:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    2b5c:	22 0f       	add	r18, r18
    2b5e:	33 1f       	adc	r19, r19
    2b60:	44 1f       	adc	r20, r20
    2b62:	55 1f       	adc	r21, r21
    2b64:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
    2b68:	79 01       	movw	r14, r18
    2b6a:	c9 01       	movw	r24, r18
    2b6c:	06 97       	sbiw	r24, 0x06	; 6
    2b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b70:	91 05       	cpc	r25, r1
    2b72:	20 f0       	brcs	.+8      	; 0x2b7c <hal_configureTwiChannel+0x16c>
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	8f bf       	out	0x3f, r24	; 63
    2b78:	8c ef       	ldi	r24, 0xFC	; 252
    2b7a:	62 c0       	rjmp	.+196    	; 0x2c40 <hal_configureTwiChannel+0x230>
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	11 86       	std	Z+9, r1	; 0x09
    2b80:	12 86       	std	Z+10, r1	; 0x0a
    2b82:	07 80       	ldd	r0, Z+7	; 0x07
    2b84:	f0 85       	ldd	r31, Z+8	; 0x08
    2b86:	e0 2d       	mov	r30, r0
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 60       	ori	r24, 0x08	; 8
    2b8c:	80 83       	st	Z, r24
    2b8e:	d8 01       	movw	r26, r16
    2b90:	17 96       	adiw	r26, 0x07	; 7
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	18 97       	sbiw	r26, 0x08	; 8
    2b98:	c9 01       	movw	r24, r18
    2b9a:	05 97       	sbiw	r24, 0x05	; 5
    2b9c:	84 83       	std	Z+4, r24	; 0x04
    2b9e:	17 96       	adiw	r26, 0x07	; 7
    2ba0:	ed 91       	ld	r30, X+
    2ba2:	fc 91       	ld	r31, X
    2ba4:	18 97       	sbiw	r26, 0x08	; 8
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	83 83       	std	Z+3, r24	; 0x03
    2baa:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    2bae:	97 01       	movw	r18, r14
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	22 83       	std	Z+2, r18	; 0x02
    2bc0:	33 83       	std	Z+3, r19	; 0x03
    2bc2:	44 83       	std	Z+4, r20	; 0x04
    2bc4:	55 83       	std	Z+5, r21	; 0x05
    2bc6:	34 c0       	rjmp	.+104    	; 0x2c30 <hal_configureTwiChannel+0x220>
    2bc8:	d8 01       	movw	r26, r16
    2bca:	17 96       	adiw	r26, 0x07	; 7
    2bcc:	1d 92       	st	X+, r1
    2bce:	1c 92       	st	X, r1
    2bd0:	18 97       	sbiw	r26, 0x08	; 8
    2bd2:	19 96       	adiw	r26, 0x09	; 9
    2bd4:	ed 91       	ld	r30, X+
    2bd6:	fc 91       	ld	r31, X
    2bd8:	1a 97       	sbiw	r26, 0x0a	; 10
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 6c       	ori	r24, 0xC0	; 192
    2bde:	80 83       	st	Z, r24
    2be0:	19 96       	adiw	r26, 0x09	; 9
    2be2:	ed 91       	ld	r30, X+
    2be4:	fc 91       	ld	r31, X
    2be6:	1a 97       	sbiw	r26, 0x0a	; 10
    2be8:	80 81       	ld	r24, Z
    2bea:	80 62       	ori	r24, 0x20	; 32
    2bec:	80 83       	st	Z, r24
    2bee:	19 96       	adiw	r26, 0x09	; 9
    2bf0:	ed 91       	ld	r30, X+
    2bf2:	fc 91       	ld	r31, X
    2bf4:	1a 97       	sbiw	r26, 0x0a	; 10
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 61       	ori	r24, 0x10	; 16
    2bfa:	80 83       	st	Z, r24
    2bfc:	19 96       	adiw	r26, 0x09	; 9
    2bfe:	ed 91       	ld	r30, X+
    2c00:	fc 91       	ld	r31, X
    2c02:	1a 97       	sbiw	r26, 0x0a	; 10
    2c04:	80 81       	ld	r24, Z
    2c06:	84 60       	ori	r24, 0x04	; 4
    2c08:	80 83       	st	Z, r24
    2c0a:	19 96       	adiw	r26, 0x09	; 9
    2c0c:	ed 91       	ld	r30, X+
    2c0e:	fc 91       	ld	r31, X
    2c10:	1a 97       	sbiw	r26, 0x0a	; 10
    2c12:	80 81       	ld	r24, Z
    2c14:	88 60       	ori	r24, 0x08	; 8
    2c16:	80 83       	st	Z, r24
    2c18:	19 96       	adiw	r26, 0x09	; 9
    2c1a:	ed 91       	ld	r30, X+
    2c1c:	fc 91       	ld	r31, X
    2c1e:	1a 97       	sbiw	r26, 0x0a	; 10
    2c20:	ee 0c       	add	r14, r14
    2c22:	e3 82       	std	Z+3, r14	; 0x03
    2c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c26:	98 89       	ldd	r25, Y+16	; 0x10
    2c28:	1b 96       	adiw	r26, 0x0b	; 11
    2c2a:	8d 93       	st	X+, r24
    2c2c:	9c 93       	st	X, r25
    2c2e:	1c 97       	sbiw	r26, 0x0c	; 12
    2c30:	85 e0       	ldi	r24, 0x05	; 5
    2c32:	f8 01       	movw	r30, r16
    2c34:	86 83       	std	Z+6, r24	; 0x06
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	81 83       	std	Z+1, r24	; 0x01
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8f bf       	out	0x3f, r24	; 63
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	60 96       	adiw	r28, 0x10	; 16
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	08 95       	ret

00002c54 <hal_twiMasterWrite>:
    2c54:	2f 92       	push	r2
    2c56:	3f 92       	push	r3
    2c58:	4f 92       	push	r4
    2c5a:	5f 92       	push	r5
    2c5c:	6f 92       	push	r6
    2c5e:	7f 92       	push	r7
    2c60:	8f 92       	push	r8
    2c62:	9f 92       	push	r9
    2c64:	af 92       	push	r10
    2c66:	bf 92       	push	r11
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	e8 97       	sbiw	r28, 0x38	; 56
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	8e 8f       	std	Y+30, r24	; 0x1e
    2c84:	9f 8f       	std	Y+31, r25	; 0x1f
    2c86:	1b 01       	movw	r2, r22
    2c88:	2a 01       	movw	r4, r20
    2c8a:	f0 2e       	mov	r15, r16
    2c8c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c8e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c90:	40 91 cb 20 	lds	r20, 0x20CB
    2c94:	50 91 cc 20 	lds	r21, 0x20CC
    2c98:	84 81       	ldd	r24, Z+4	; 0x04
    2c9a:	95 81       	ldd	r25, Z+5	; 0x05
    2c9c:	84 17       	cp	r24, r20
    2c9e:	95 07       	cpc	r25, r21
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <hal_twiMasterWrite+0x50>
    2ca2:	b9 c0       	rjmp	.+370    	; 0x2e16 <hal_twiMasterWrite+0x1c2>
    2ca4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ca6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ca8:	00 81       	ld	r16, Z
    2caa:	11 81       	ldd	r17, Z+1	; 0x01
    2cac:	d8 01       	movw	r26, r16
    2cae:	17 96       	adiw	r26, 0x07	; 7
    2cb0:	8d 91       	ld	r24, X+
    2cb2:	9c 91       	ld	r25, X
    2cb4:	18 97       	sbiw	r26, 0x08	; 8
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <hal_twiMasterWrite+0x68>
    2cba:	af c0       	rjmp	.+350    	; 0x2e1a <hal_twiMasterWrite+0x1c6>
    2cbc:	16 96       	adiw	r26, 0x06	; 6
    2cbe:	1c 92       	st	X, r1
    2cc0:	16 97       	sbiw	r26, 0x06	; 6
    2cc2:	e2 2e       	mov	r14, r18
    2cc4:	ee 0c       	add	r14, r14
    2cc6:	f3 e1       	ldi	r31, 0x13	; 19
    2cc8:	6f 2e       	mov	r6, r31
    2cca:	71 2c       	mov	r7, r1
    2ccc:	60 0e       	add	r6, r16
    2cce:	71 1e       	adc	r7, r17
    2cd0:	8a e0       	ldi	r24, 0x0A	; 10
    2cd2:	d8 2e       	mov	r13, r24
    2cd4:	cc 24       	eor	r12, r12
    2cd6:	c3 94       	inc	r12
    2cd8:	90 e2       	ldi	r25, 0x20	; 32
    2cda:	89 2e       	mov	r8, r25
    2cdc:	91 ea       	ldi	r25, 0xA1	; 161
    2cde:	99 2e       	mov	r9, r25
    2ce0:	97 e0       	ldi	r25, 0x07	; 7
    2ce2:	a9 2e       	mov	r10, r25
    2ce4:	b1 2c       	mov	r11, r1
    2ce6:	90 c0       	rjmp	.+288    	; 0x2e08 <hal_twiMasterWrite+0x1b4>
    2ce8:	d8 01       	movw	r26, r16
    2cea:	17 96       	adiw	r26, 0x07	; 7
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	18 97       	sbiw	r26, 0x08	; 8
    2cf2:	83 81       	ldd	r24, Z+3	; 0x03
    2cf4:	83 70       	andi	r24, 0x03	; 3
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	b9 f7       	brne	.-18     	; 0x2ce8 <hal_twiMasterWrite+0x94>
    2cfa:	1d 96       	adiw	r26, 0x0d	; 13
    2cfc:	2d 92       	st	X+, r2
    2cfe:	3c 92       	st	X, r3
    2d00:	1e 97       	sbiw	r26, 0x0e	; 14
    2d02:	1f 96       	adiw	r26, 0x0f	; 15
    2d04:	4d 92       	st	X+, r4
    2d06:	5c 92       	st	X, r5
    2d08:	50 97       	sbiw	r26, 0x10	; 16
    2d0a:	51 96       	adiw	r26, 0x11	; 17
    2d0c:	1d 92       	st	X+, r1
    2d0e:	1c 92       	st	X, r1
    2d10:	52 97       	sbiw	r26, 0x12	; 18
    2d12:	ce 01       	movw	r24, r28
    2d14:	80 96       	adiw	r24, 0x20	; 32
    2d16:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    2d1a:	f3 01       	movw	r30, r6
    2d1c:	de 01       	movw	r26, r28
    2d1e:	90 96       	adiw	r26, 0x20	; 32
    2d20:	89 e1       	ldi	r24, 0x19	; 25
    2d22:	0d 90       	ld	r0, X+
    2d24:	01 92       	st	Z+, r0
    2d26:	81 50       	subi	r24, 0x01	; 1
    2d28:	e1 f7       	brne	.-8      	; 0x2d22 <hal_twiMasterWrite+0xce>
    2d2a:	d8 01       	movw	r26, r16
    2d2c:	17 96       	adiw	r26, 0x07	; 7
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	18 97       	sbiw	r26, 0x08	; 8
    2d34:	e5 82       	std	Z+5, r14	; 0x05
    2d36:	5d c0       	rjmp	.+186    	; 0x2df2 <hal_twiMasterWrite+0x19e>
    2d38:	c8 01       	movw	r24, r16
    2d3a:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    2d3e:	ce 01       	movw	r24, r28
    2d40:	05 96       	adiw	r24, 0x05	; 5
    2d42:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    2d46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d4a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2d4c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2d4e:	f8 01       	movw	r30, r16
    2d50:	40 a5       	lds	r20, 0x60
    2d52:	51 a5       	lds	r21, 0x61
    2d54:	62 a5       	lds	r22, 0x62
    2d56:	73 a5       	lds	r23, 0x63
    2d58:	84 1b       	sub	r24, r20
    2d5a:	95 0b       	sbc	r25, r21
    2d5c:	a6 0b       	sbc	r26, r22
    2d5e:	b7 0b       	sbc	r27, r23
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	ab 83       	std	Y+3, r26	; 0x03
    2d66:	bc 83       	std	Y+4, r27	; 0x04
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2d6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2d70:	b7 ff       	sbrs	r27, 7
    2d72:	04 c0       	rjmp	.+8      	; 0x2d7c <hal_twiMasterWrite+0x128>
    2d74:	89 82       	std	Y+1, r8	; 0x01
    2d76:	9a 82       	std	Y+2, r9	; 0x02
    2d78:	ab 82       	std	Y+3, r10	; 0x03
    2d7a:	bc 82       	std	Y+4, r11	; 0x04
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	ab 81       	ldd	r26, Y+3	; 0x03
    2d82:	bc 81       	ldd	r27, Y+4	; 0x04
    2d84:	80 34       	cpi	r24, 0x40	; 64
    2d86:	f2 e4       	ldi	r31, 0x42	; 66
    2d88:	9f 07       	cpc	r25, r31
    2d8a:	ff e0       	ldi	r31, 0x0F	; 15
    2d8c:	af 07       	cpc	r26, r31
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	bf 07       	cpc	r27, r31
    2d92:	64 f0       	brlt	.+24     	; 0x2dac <hal_twiMasterWrite+0x158>
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	ab 81       	ldd	r26, Y+3	; 0x03
    2d9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d9c:	80 54       	subi	r24, 0x40	; 64
    2d9e:	92 44       	sbci	r25, 0x42	; 66
    2da0:	af 40       	sbci	r26, 0x0F	; 15
    2da2:	b0 40       	sbci	r27, 0x00	; 0
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	ab 83       	std	Y+3, r26	; 0x03
    2daa:	bc 83       	std	Y+4, r27	; 0x04
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	ab 81       	ldd	r26, Y+3	; 0x03
    2db2:	bc 81       	ldd	r27, Y+4	; 0x04
    2db4:	80 32       	cpi	r24, 0x20	; 32
    2db6:	21 ea       	ldi	r18, 0xA1	; 161
    2db8:	92 07       	cpc	r25, r18
    2dba:	27 e0       	ldi	r18, 0x07	; 7
    2dbc:	a2 07       	cpc	r26, r18
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	b2 07       	cpc	r27, r18
    2dc2:	bc f0       	brlt	.+46     	; 0x2df2 <hal_twiMasterWrite+0x19e>
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	17 96       	adiw	r26, 0x07	; 7
    2dc8:	ed 91       	ld	r30, X+
    2dca:	fc 91       	ld	r31, X
    2dcc:	18 97       	sbiw	r26, 0x08	; 8
    2dce:	80 81       	ld	r24, Z
    2dd0:	87 7f       	andi	r24, 0xF7	; 247
    2dd2:	80 83       	st	Z, r24
    2dd4:	17 96       	adiw	r26, 0x07	; 7
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	18 97       	sbiw	r26, 0x08	; 8
    2ddc:	80 81       	ld	r24, Z
    2dde:	88 60       	ori	r24, 0x08	; 8
    2de0:	80 83       	st	Z, r24
    2de2:	16 96       	adiw	r26, 0x06	; 6
    2de4:	dc 92       	st	X, r13
    2de6:	16 97       	sbiw	r26, 0x06	; 6
    2de8:	17 96       	adiw	r26, 0x07	; 7
    2dea:	ed 91       	ld	r30, X+
    2dec:	fc 91       	ld	r31, X
    2dee:	18 97       	sbiw	r26, 0x08	; 8
    2df0:	c3 82       	std	Z+3, r12	; 0x03
    2df2:	d8 01       	movw	r26, r16
    2df4:	17 96       	adiw	r26, 0x07	; 7
    2df6:	ed 91       	ld	r30, X+
    2df8:	fc 91       	ld	r31, X
    2dfa:	18 97       	sbiw	r26, 0x08	; 8
    2dfc:	83 81       	ldd	r24, Z+3	; 0x03
    2dfe:	83 70       	andi	r24, 0x03	; 3
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <hal_twiMasterWrite+0x1b2>
    2e04:	99 cf       	rjmp	.-206    	; 0x2d38 <hal_twiMasterWrite+0xe4>
    2e06:	fa 94       	dec	r15
    2e08:	f8 01       	movw	r30, r16
    2e0a:	86 81       	ldd	r24, Z+6	; 0x06
    2e0c:	84 30       	cpi	r24, 0x04	; 4
    2e0e:	39 f0       	breq	.+14     	; 0x2e1e <hal_twiMasterWrite+0x1ca>
    2e10:	f7 fe       	sbrs	r15, 7
    2e12:	6a cf       	rjmp	.-300    	; 0x2ce8 <hal_twiMasterWrite+0x94>
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <hal_twiMasterWrite+0x1ca>
    2e16:	8e ef       	ldi	r24, 0xFE	; 254
    2e18:	03 c0       	rjmp	.+6      	; 0x2e20 <hal_twiMasterWrite+0x1cc>
    2e1a:	88 ef       	ldi	r24, 0xF8	; 248
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <hal_twiMasterWrite+0x1cc>
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	e8 96       	adiw	r28, 0x38	; 56
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	1f 91       	pop	r17
    2e2c:	0f 91       	pop	r16
    2e2e:	ff 90       	pop	r15
    2e30:	ef 90       	pop	r14
    2e32:	df 90       	pop	r13
    2e34:	cf 90       	pop	r12
    2e36:	bf 90       	pop	r11
    2e38:	af 90       	pop	r10
    2e3a:	9f 90       	pop	r9
    2e3c:	8f 90       	pop	r8
    2e3e:	7f 90       	pop	r7
    2e40:	6f 90       	pop	r6
    2e42:	5f 90       	pop	r5
    2e44:	4f 90       	pop	r4
    2e46:	3f 90       	pop	r3
    2e48:	2f 90       	pop	r2
    2e4a:	08 95       	ret

00002e4c <hal_getTwiStatus>:
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	0f 92       	push	r0
    2e52:	0f 92       	push	r0
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e60:	80 91 cb 20 	lds	r24, 0x20CB
    2e64:	90 91 cc 20 	lds	r25, 0x20CC
    2e68:	24 81       	ldd	r18, Z+4	; 0x04
    2e6a:	35 81       	ldd	r19, Z+5	; 0x05
    2e6c:	28 17       	cp	r18, r24
    2e6e:	39 07       	cpc	r19, r25
    2e70:	39 f4       	brne	.+14     	; 0x2e80 <hal_getTwiStatus+0x34>
    2e72:	e9 81       	ldd	r30, Y+1	; 0x01
    2e74:	fa 81       	ldd	r31, Y+2	; 0x02
    2e76:	01 90       	ld	r0, Z+
    2e78:	f0 81       	ld	r31, Z
    2e7a:	e0 2d       	mov	r30, r0
    2e7c:	86 81       	ldd	r24, Z+6	; 0x06
    2e7e:	01 c0       	rjmp	.+2      	; 0x2e82 <hal_getTwiStatus+0x36>
    2e80:	8b e0       	ldi	r24, 0x0B	; 11
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <hal_twiMasterRead>:
    2e8c:	6f 92       	push	r6
    2e8e:	7f 92       	push	r7
    2e90:	8f 92       	push	r8
    2e92:	9f 92       	push	r9
    2e94:	af 92       	push	r10
    2e96:	bf 92       	push	r11
    2e98:	cf 92       	push	r12
    2e9a:	df 92       	push	r13
    2e9c:	ef 92       	push	r14
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	e8 97       	sbiw	r28, 0x38	; 56
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	8e 8f       	std	Y+30, r24	; 0x1e
    2eb4:	9f 8f       	std	Y+31, r25	; 0x1f
    2eb6:	3b 01       	movw	r6, r22
    2eb8:	4a 01       	movw	r8, r20
    2eba:	e0 2e       	mov	r14, r16
    2ebc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ebe:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ec0:	40 91 cb 20 	lds	r20, 0x20CB
    2ec4:	50 91 cc 20 	lds	r21, 0x20CC
    2ec8:	84 81       	ldd	r24, Z+4	; 0x04
    2eca:	95 81       	ldd	r25, Z+5	; 0x05
    2ecc:	84 17       	cp	r24, r20
    2ece:	95 07       	cpc	r25, r21
    2ed0:	09 f0       	breq	.+2      	; 0x2ed4 <hal_twiMasterRead+0x48>
    2ed2:	a8 c0       	rjmp	.+336    	; 0x3024 <hal_twiMasterRead+0x198>
    2ed4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ed6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2ed8:	00 81       	ld	r16, Z
    2eda:	11 81       	ldd	r17, Z+1	; 0x01
    2edc:	d8 01       	movw	r26, r16
    2ede:	17 96       	adiw	r26, 0x07	; 7
    2ee0:	8d 91       	ld	r24, X+
    2ee2:	9c 91       	ld	r25, X
    2ee4:	18 97       	sbiw	r26, 0x08	; 8
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <hal_twiMasterRead+0x60>
    2eea:	9e c0       	rjmp	.+316    	; 0x3028 <hal_twiMasterRead+0x19c>
    2eec:	16 96       	adiw	r26, 0x06	; 6
    2eee:	1c 92       	st	X, r1
    2ef0:	f2 2e       	mov	r15, r18
    2ef2:	ff 0c       	add	r15, r15
    2ef4:	b1 e0       	ldi	r27, 0x01	; 1
    2ef6:	fb 2a       	or	r15, r27
    2ef8:	23 e1       	ldi	r18, 0x13	; 19
    2efa:	a2 2e       	mov	r10, r18
    2efc:	b1 2c       	mov	r11, r1
    2efe:	a0 0e       	add	r10, r16
    2f00:	b1 1e       	adc	r11, r17
    2f02:	3a e0       	ldi	r19, 0x0A	; 10
    2f04:	d3 2e       	mov	r13, r19
    2f06:	cc 24       	eor	r12, r12
    2f08:	c3 94       	inc	r12
    2f0a:	85 c0       	rjmp	.+266    	; 0x3016 <hal_twiMasterRead+0x18a>
    2f0c:	d8 01       	movw	r26, r16
    2f0e:	17 96       	adiw	r26, 0x07	; 7
    2f10:	ed 91       	ld	r30, X+
    2f12:	fc 91       	ld	r31, X
    2f14:	18 97       	sbiw	r26, 0x08	; 8
    2f16:	83 81       	ldd	r24, Z+3	; 0x03
    2f18:	83 70       	andi	r24, 0x03	; 3
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	b9 f7       	brne	.-18     	; 0x2f0c <hal_twiMasterRead+0x80>
    2f1e:	1d 96       	adiw	r26, 0x0d	; 13
    2f20:	6d 92       	st	X+, r6
    2f22:	7c 92       	st	X, r7
    2f24:	1e 97       	sbiw	r26, 0x0e	; 14
    2f26:	1f 96       	adiw	r26, 0x0f	; 15
    2f28:	8d 92       	st	X+, r8
    2f2a:	9c 92       	st	X, r9
    2f2c:	50 97       	sbiw	r26, 0x10	; 16
    2f2e:	51 96       	adiw	r26, 0x11	; 17
    2f30:	1d 92       	st	X+, r1
    2f32:	1c 92       	st	X, r1
    2f34:	52 97       	sbiw	r26, 0x12	; 18
    2f36:	ce 01       	movw	r24, r28
    2f38:	80 96       	adiw	r24, 0x20	; 32
    2f3a:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    2f3e:	f5 01       	movw	r30, r10
    2f40:	de 01       	movw	r26, r28
    2f42:	90 96       	adiw	r26, 0x20	; 32
    2f44:	89 e1       	ldi	r24, 0x19	; 25
    2f46:	0d 90       	ld	r0, X+
    2f48:	01 92       	st	Z+, r0
    2f4a:	81 50       	subi	r24, 0x01	; 1
    2f4c:	e1 f7       	brne	.-8      	; 0x2f46 <hal_twiMasterRead+0xba>
    2f4e:	d8 01       	movw	r26, r16
    2f50:	17 96       	adiw	r26, 0x07	; 7
    2f52:	ed 91       	ld	r30, X+
    2f54:	fc 91       	ld	r31, X
    2f56:	18 97       	sbiw	r26, 0x08	; 8
    2f58:	f5 82       	std	Z+5, r15	; 0x05
    2f5a:	53 c0       	rjmp	.+166    	; 0x3002 <hal_twiMasterRead+0x176>
    2f5c:	c8 01       	movw	r24, r16
    2f5e:	0e 94 b1 11 	call	0x2362	; 0x2362 <hal_masterInterrupt>
    2f62:	ce 01       	movw	r24, r28
    2f64:	05 96       	adiw	r24, 0x05	; 5
    2f66:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
    2f6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2f70:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2f72:	f8 01       	movw	r30, r16
    2f74:	40 a5       	lds	r20, 0x60
    2f76:	51 a5       	lds	r21, 0x61
    2f78:	62 a5       	lds	r22, 0x62
    2f7a:	73 a5       	lds	r23, 0x63
    2f7c:	84 1b       	sub	r24, r20
    2f7e:	95 0b       	sbc	r25, r21
    2f80:	a6 0b       	sbc	r26, r22
    2f82:	b7 0b       	sbc	r27, r23
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	ab 83       	std	Y+3, r26	; 0x03
    2f8a:	bc 83       	std	Y+4, r27	; 0x04
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	ab 81       	ldd	r26, Y+3	; 0x03
    2f92:	bc 81       	ldd	r27, Y+4	; 0x04
    2f94:	80 34       	cpi	r24, 0x40	; 64
    2f96:	f2 e4       	ldi	r31, 0x42	; 66
    2f98:	9f 07       	cpc	r25, r31
    2f9a:	ff e0       	ldi	r31, 0x0F	; 15
    2f9c:	af 07       	cpc	r26, r31
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	bf 07       	cpc	r27, r31
    2fa2:	64 f0       	brlt	.+24     	; 0x2fbc <hal_twiMasterRead+0x130>
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	ab 81       	ldd	r26, Y+3	; 0x03
    2faa:	bc 81       	ldd	r27, Y+4	; 0x04
    2fac:	80 54       	subi	r24, 0x40	; 64
    2fae:	92 44       	sbci	r25, 0x42	; 66
    2fb0:	af 40       	sbci	r26, 0x0F	; 15
    2fb2:	b0 40       	sbci	r27, 0x00	; 0
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	ab 83       	std	Y+3, r26	; 0x03
    2fba:	bc 83       	std	Y+4, r27	; 0x04
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	ab 81       	ldd	r26, Y+3	; 0x03
    2fc2:	bc 81       	ldd	r27, Y+4	; 0x04
    2fc4:	80 32       	cpi	r24, 0x20	; 32
    2fc6:	21 ea       	ldi	r18, 0xA1	; 161
    2fc8:	92 07       	cpc	r25, r18
    2fca:	27 e0       	ldi	r18, 0x07	; 7
    2fcc:	a2 07       	cpc	r26, r18
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	b2 07       	cpc	r27, r18
    2fd2:	bc f0       	brlt	.+46     	; 0x3002 <hal_twiMasterRead+0x176>
    2fd4:	d8 01       	movw	r26, r16
    2fd6:	17 96       	adiw	r26, 0x07	; 7
    2fd8:	ed 91       	ld	r30, X+
    2fda:	fc 91       	ld	r31, X
    2fdc:	18 97       	sbiw	r26, 0x08	; 8
    2fde:	80 81       	ld	r24, Z
    2fe0:	87 7f       	andi	r24, 0xF7	; 247
    2fe2:	80 83       	st	Z, r24
    2fe4:	17 96       	adiw	r26, 0x07	; 7
    2fe6:	ed 91       	ld	r30, X+
    2fe8:	fc 91       	ld	r31, X
    2fea:	18 97       	sbiw	r26, 0x08	; 8
    2fec:	80 81       	ld	r24, Z
    2fee:	88 60       	ori	r24, 0x08	; 8
    2ff0:	80 83       	st	Z, r24
    2ff2:	16 96       	adiw	r26, 0x06	; 6
    2ff4:	dc 92       	st	X, r13
    2ff6:	16 97       	sbiw	r26, 0x06	; 6
    2ff8:	17 96       	adiw	r26, 0x07	; 7
    2ffa:	ed 91       	ld	r30, X+
    2ffc:	fc 91       	ld	r31, X
    2ffe:	18 97       	sbiw	r26, 0x08	; 8
    3000:	c3 82       	std	Z+3, r12	; 0x03
    3002:	d8 01       	movw	r26, r16
    3004:	17 96       	adiw	r26, 0x07	; 7
    3006:	ed 91       	ld	r30, X+
    3008:	fc 91       	ld	r31, X
    300a:	18 97       	sbiw	r26, 0x08	; 8
    300c:	83 81       	ldd	r24, Z+3	; 0x03
    300e:	83 70       	andi	r24, 0x03	; 3
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	09 f0       	breq	.+2      	; 0x3016 <hal_twiMasterRead+0x18a>
    3014:	a3 cf       	rjmp	.-186    	; 0x2f5c <hal_twiMasterRead+0xd0>
    3016:	f8 01       	movw	r30, r16
    3018:	86 81       	ldd	r24, Z+6	; 0x06
    301a:	84 30       	cpi	r24, 0x04	; 4
    301c:	39 f0       	breq	.+14     	; 0x302c <hal_twiMasterRead+0x1a0>
    301e:	e7 fe       	sbrs	r14, 7
    3020:	75 cf       	rjmp	.-278    	; 0x2f0c <hal_twiMasterRead+0x80>
    3022:	04 c0       	rjmp	.+8      	; 0x302c <hal_twiMasterRead+0x1a0>
    3024:	8e ef       	ldi	r24, 0xFE	; 254
    3026:	03 c0       	rjmp	.+6      	; 0x302e <hal_twiMasterRead+0x1a2>
    3028:	88 ef       	ldi	r24, 0xF8	; 248
    302a:	01 c0       	rjmp	.+2      	; 0x302e <hal_twiMasterRead+0x1a2>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	e8 96       	adiw	r28, 0x38	; 56
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	df 90       	pop	r13
    3042:	cf 90       	pop	r12
    3044:	bf 90       	pop	r11
    3046:	af 90       	pop	r10
    3048:	9f 90       	pop	r9
    304a:	8f 90       	pop	r8
    304c:	7f 90       	pop	r7
    304e:	6f 90       	pop	r6
    3050:	08 95       	ret

00003052 <uart1TxDmaInt>:
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	c0 91 91 2b 	lds	r28, 0x2B91
    305a:	d0 91 92 2b 	lds	r29, 0x2B92
    305e:	20 97       	sbiw	r28, 0x00	; 0
    3060:	71 f0       	breq	.+28     	; 0x307e <uart1TxDmaInt+0x2c>
    3062:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3064:	f8 a1       	lds	r31, 0x48
    3066:	30 97       	sbiw	r30, 0x00	; 0
    3068:	19 f0       	breq	.+6      	; 0x3070 <uart1TxDmaInt+0x1e>
    306a:	89 89       	ldd	r24, Y+17	; 0x11
    306c:	9a 89       	ldd	r25, Y+18	; 0x12
    306e:	19 95       	eicall
    3070:	1d 86       	std	Y+13, r1	; 0x0d
    3072:	1e 86       	std	Y+14, r1	; 0x0e
    3074:	1d 8a       	std	Y+21, r1	; 0x15
    3076:	1e 8a       	std	Y+22, r1	; 0x16
    3078:	19 8a       	std	Y+17, r1	; 0x11
    307a:	1a 8a       	std	Y+18, r1	; 0x12
    307c:	1b 86       	std	Y+11, r1	; 0x0b
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	08 95       	ret

00003084 <uart2TxDmaInt>:
    3084:	cf 93       	push	r28
    3086:	df 93       	push	r29
    3088:	c0 91 93 2b 	lds	r28, 0x2B93
    308c:	d0 91 94 2b 	lds	r29, 0x2B94
    3090:	20 97       	sbiw	r28, 0x00	; 0
    3092:	71 f0       	breq	.+28     	; 0x30b0 <uart2TxDmaInt+0x2c>
    3094:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3096:	f8 a1       	lds	r31, 0x48
    3098:	30 97       	sbiw	r30, 0x00	; 0
    309a:	19 f0       	breq	.+6      	; 0x30a2 <uart2TxDmaInt+0x1e>
    309c:	89 89       	ldd	r24, Y+17	; 0x11
    309e:	9a 89       	ldd	r25, Y+18	; 0x12
    30a0:	19 95       	eicall
    30a2:	1d 86       	std	Y+13, r1	; 0x0d
    30a4:	1e 86       	std	Y+14, r1	; 0x0e
    30a6:	1d 8a       	std	Y+21, r1	; 0x15
    30a8:	1e 8a       	std	Y+22, r1	; 0x16
    30aa:	19 8a       	std	Y+17, r1	; 0x11
    30ac:	1a 8a       	std	Y+18, r1	; 0x12
    30ae:	1b 86       	std	Y+11, r1	; 0x0b
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <uart3TxDmaInt>:
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	c0 91 95 2b 	lds	r28, 0x2B95
    30be:	d0 91 96 2b 	lds	r29, 0x2B96
    30c2:	20 97       	sbiw	r28, 0x00	; 0
    30c4:	71 f0       	breq	.+28     	; 0x30e2 <uart3TxDmaInt+0x2c>
    30c6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30c8:	f8 a1       	lds	r31, 0x48
    30ca:	30 97       	sbiw	r30, 0x00	; 0
    30cc:	19 f0       	breq	.+6      	; 0x30d4 <uart3TxDmaInt+0x1e>
    30ce:	89 89       	ldd	r24, Y+17	; 0x11
    30d0:	9a 89       	ldd	r25, Y+18	; 0x12
    30d2:	19 95       	eicall
    30d4:	1d 86       	std	Y+13, r1	; 0x0d
    30d6:	1e 86       	std	Y+14, r1	; 0x0e
    30d8:	1d 8a       	std	Y+21, r1	; 0x15
    30da:	1e 8a       	std	Y+22, r1	; 0x16
    30dc:	19 8a       	std	Y+17, r1	; 0x11
    30de:	1a 8a       	std	Y+18, r1	; 0x12
    30e0:	1b 86       	std	Y+11, r1	; 0x0b
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	08 95       	ret

000030e8 <uart4TxDmaInt>:
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	c0 91 97 2b 	lds	r28, 0x2B97
    30f0:	d0 91 98 2b 	lds	r29, 0x2B98
    30f4:	20 97       	sbiw	r28, 0x00	; 0
    30f6:	71 f0       	breq	.+28     	; 0x3114 <uart4TxDmaInt+0x2c>
    30f8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30fa:	f8 a1       	lds	r31, 0x48
    30fc:	30 97       	sbiw	r30, 0x00	; 0
    30fe:	19 f0       	breq	.+6      	; 0x3106 <uart4TxDmaInt+0x1e>
    3100:	89 89       	ldd	r24, Y+17	; 0x11
    3102:	9a 89       	ldd	r25, Y+18	; 0x12
    3104:	19 95       	eicall
    3106:	1d 86       	std	Y+13, r1	; 0x0d
    3108:	1e 86       	std	Y+14, r1	; 0x0e
    310a:	1d 8a       	std	Y+21, r1	; 0x15
    310c:	1e 8a       	std	Y+22, r1	; 0x16
    310e:	19 8a       	std	Y+17, r1	; 0x11
    3110:	1a 8a       	std	Y+18, r1	; 0x12
    3112:	1b 86       	std	Y+11, r1	; 0x0b
    3114:	df 91       	pop	r29
    3116:	cf 91       	pop	r28
    3118:	08 95       	ret

0000311a <uart5TxDmaInt>:
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	c0 91 99 2b 	lds	r28, 0x2B99
    3122:	d0 91 9a 2b 	lds	r29, 0x2B9A
    3126:	20 97       	sbiw	r28, 0x00	; 0
    3128:	71 f0       	breq	.+28     	; 0x3146 <uart5TxDmaInt+0x2c>
    312a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    312c:	f8 a1       	lds	r31, 0x48
    312e:	30 97       	sbiw	r30, 0x00	; 0
    3130:	19 f0       	breq	.+6      	; 0x3138 <uart5TxDmaInt+0x1e>
    3132:	89 89       	ldd	r24, Y+17	; 0x11
    3134:	9a 89       	ldd	r25, Y+18	; 0x12
    3136:	19 95       	eicall
    3138:	1d 86       	std	Y+13, r1	; 0x0d
    313a:	1e 86       	std	Y+14, r1	; 0x0e
    313c:	1d 8a       	std	Y+21, r1	; 0x15
    313e:	1e 8a       	std	Y+22, r1	; 0x16
    3140:	19 8a       	std	Y+17, r1	; 0x11
    3142:	1a 8a       	std	Y+18, r1	; 0x12
    3144:	1b 86       	std	Y+11, r1	; 0x0b
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	08 95       	ret

0000314c <uart6TxDmaInt>:
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	c0 91 9b 2b 	lds	r28, 0x2B9B
    3154:	d0 91 9c 2b 	lds	r29, 0x2B9C
    3158:	20 97       	sbiw	r28, 0x00	; 0
    315a:	71 f0       	breq	.+28     	; 0x3178 <uart6TxDmaInt+0x2c>
    315c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    315e:	f8 a1       	lds	r31, 0x48
    3160:	30 97       	sbiw	r30, 0x00	; 0
    3162:	19 f0       	breq	.+6      	; 0x316a <uart6TxDmaInt+0x1e>
    3164:	89 89       	ldd	r24, Y+17	; 0x11
    3166:	9a 89       	ldd	r25, Y+18	; 0x12
    3168:	19 95       	eicall
    316a:	1d 86       	std	Y+13, r1	; 0x0d
    316c:	1e 86       	std	Y+14, r1	; 0x0e
    316e:	1d 8a       	std	Y+21, r1	; 0x15
    3170:	1e 8a       	std	Y+22, r1	; 0x16
    3172:	19 8a       	std	Y+17, r1	; 0x11
    3174:	1a 8a       	std	Y+18, r1	; 0x12
    3176:	1b 86       	std	Y+11, r1	; 0x0b
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <uart7TxDmaInt>:
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	c0 91 9d 2b 	lds	r28, 0x2B9D
    3186:	d0 91 9e 2b 	lds	r29, 0x2B9E
    318a:	20 97       	sbiw	r28, 0x00	; 0
    318c:	71 f0       	breq	.+28     	; 0x31aa <uart7TxDmaInt+0x2c>
    318e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3190:	f8 a1       	lds	r31, 0x48
    3192:	30 97       	sbiw	r30, 0x00	; 0
    3194:	19 f0       	breq	.+6      	; 0x319c <uart7TxDmaInt+0x1e>
    3196:	89 89       	ldd	r24, Y+17	; 0x11
    3198:	9a 89       	ldd	r25, Y+18	; 0x12
    319a:	19 95       	eicall
    319c:	1d 86       	std	Y+13, r1	; 0x0d
    319e:	1e 86       	std	Y+14, r1	; 0x0e
    31a0:	1d 8a       	std	Y+21, r1	; 0x15
    31a2:	1e 8a       	std	Y+22, r1	; 0x16
    31a4:	19 8a       	std	Y+17, r1	; 0x11
    31a6:	1a 8a       	std	Y+18, r1	; 0x12
    31a8:	1b 86       	std	Y+11, r1	; 0x0b
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	08 95       	ret

000031b0 <uart8TxDmaInt>:
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	c0 91 9f 2b 	lds	r28, 0x2B9F
    31b8:	d0 91 a0 2b 	lds	r29, 0x2BA0
    31bc:	20 97       	sbiw	r28, 0x00	; 0
    31be:	71 f0       	breq	.+28     	; 0x31dc <uart8TxDmaInt+0x2c>
    31c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    31c2:	f8 a1       	lds	r31, 0x48
    31c4:	30 97       	sbiw	r30, 0x00	; 0
    31c6:	19 f0       	breq	.+6      	; 0x31ce <uart8TxDmaInt+0x1e>
    31c8:	89 89       	ldd	r24, Y+17	; 0x11
    31ca:	9a 89       	ldd	r25, Y+18	; 0x12
    31cc:	19 95       	eicall
    31ce:	1d 86       	std	Y+13, r1	; 0x0d
    31d0:	1e 86       	std	Y+14, r1	; 0x0e
    31d2:	1d 8a       	std	Y+21, r1	; 0x15
    31d4:	1e 8a       	std	Y+22, r1	; 0x16
    31d6:	19 8a       	std	Y+17, r1	; 0x11
    31d8:	1a 8a       	std	Y+18, r1	; 0x12
    31da:	1b 86       	std	Y+11, r1	; 0x0b
    31dc:	df 91       	pop	r29
    31de:	cf 91       	pop	r28
    31e0:	08 95       	ret

000031e2 <updateRxDmaInt>:
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	ec 01       	movw	r28, r24
    31e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ec:	0e 94 06 2c 	call	0x580c	; 0x580c <hal_dmaDisableChannel>
    31f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f4:	0e 94 a2 29 	call	0x5344	; 0x5344 <hal_getDmaTransferCount>
    31f8:	8f 8b       	std	Y+23, r24	; 0x17
    31fa:	98 8f       	std	Y+24, r25	; 0x18
    31fc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    31fe:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3200:	30 97       	sbiw	r30, 0x00	; 0
    3202:	09 f0       	breq	.+2      	; 0x3206 <updateRxDmaInt+0x24>
    3204:	19 95       	eicall
    3206:	1c 86       	std	Y+12, r1	; 0x0c
    3208:	1f 86       	std	Y+15, r1	; 0x0f
    320a:	18 8a       	std	Y+16, r1	; 0x10
    320c:	1f 8a       	std	Y+23, r1	; 0x17
    320e:	18 8e       	std	Y+24, r1	; 0x18
    3210:	1b 8a       	std	Y+19, r1	; 0x13
    3212:	1c 8a       	std	Y+20, r1	; 0x14
    3214:	e9 85       	ldd	r30, Y+9	; 0x09
    3216:	fa 85       	ldd	r31, Y+10	; 0x0a
    3218:	83 81       	ldd	r24, Z+3	; 0x03
    321a:	80 63       	ori	r24, 0x30	; 48
    321c:	83 83       	std	Z+3, r24	; 0x03
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	08 95       	ret

00003224 <uart8RxDmaInt>:
    3224:	80 91 9f 2b 	lds	r24, 0x2B9F
    3228:	90 91 a0 2b 	lds	r25, 0x2BA0
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	11 f0       	breq	.+4      	; 0x3234 <uart8RxDmaInt+0x10>
    3230:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    3234:	08 95       	ret

00003236 <uart7RxDmaInt>:
    3236:	80 91 9d 2b 	lds	r24, 0x2B9D
    323a:	90 91 9e 2b 	lds	r25, 0x2B9E
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	11 f0       	breq	.+4      	; 0x3246 <uart7RxDmaInt+0x10>
    3242:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    3246:	08 95       	ret

00003248 <uart6RxDmaInt>:
    3248:	80 91 9b 2b 	lds	r24, 0x2B9B
    324c:	90 91 9c 2b 	lds	r25, 0x2B9C
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	11 f0       	breq	.+4      	; 0x3258 <uart6RxDmaInt+0x10>
    3254:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    3258:	08 95       	ret

0000325a <uart5RxDmaInt>:
    325a:	80 91 99 2b 	lds	r24, 0x2B99
    325e:	90 91 9a 2b 	lds	r25, 0x2B9A
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	11 f0       	breq	.+4      	; 0x326a <uart5RxDmaInt+0x10>
    3266:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    326a:	08 95       	ret

0000326c <uart4RxDmaInt>:
    326c:	80 91 97 2b 	lds	r24, 0x2B97
    3270:	90 91 98 2b 	lds	r25, 0x2B98
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	11 f0       	breq	.+4      	; 0x327c <uart4RxDmaInt+0x10>
    3278:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    327c:	08 95       	ret

0000327e <uart3RxDmaInt>:
    327e:	80 91 95 2b 	lds	r24, 0x2B95
    3282:	90 91 96 2b 	lds	r25, 0x2B96
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	11 f0       	breq	.+4      	; 0x328e <uart3RxDmaInt+0x10>
    328a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    328e:	08 95       	ret

00003290 <uart2RxDmaInt>:
    3290:	80 91 93 2b 	lds	r24, 0x2B93
    3294:	90 91 94 2b 	lds	r25, 0x2B94
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	11 f0       	breq	.+4      	; 0x32a0 <uart2RxDmaInt+0x10>
    329c:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    32a0:	08 95       	ret

000032a2 <uart1RxDmaInt>:
    32a2:	80 91 91 2b 	lds	r24, 0x2B91
    32a6:	90 91 92 2b 	lds	r25, 0x2B92
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	11 f0       	breq	.+4      	; 0x32b2 <uart1RxDmaInt+0x10>
    32ae:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <updateRxDmaInt>
    32b2:	08 95       	ret

000032b4 <updateRxBuffer>:
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	ec 01       	movw	r28, r24
    32ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    32bc:	98 89       	ldd	r25, Y+16	; 0x10
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	51 f4       	brne	.+20     	; 0x32d6 <updateRxBuffer+0x22>
    32c2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    32c4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    32c6:	30 97       	sbiw	r30, 0x00	; 0
    32c8:	11 f1       	breq	.+68     	; 0x330e <updateRxBuffer+0x5a>
    32ca:	a9 85       	ldd	r26, Y+9	; 0x09
    32cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    32ce:	8c 91       	ld	r24, X
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	19 95       	eicall
    32d4:	1c c0       	rjmp	.+56     	; 0x330e <updateRxBuffer+0x5a>
    32d6:	e9 85       	ldd	r30, Y+9	; 0x09
    32d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    32da:	20 81       	ld	r18, Z
    32dc:	ef 89       	ldd	r30, Y+23	; 0x17
    32de:	f8 8d       	ldd	r31, Y+24	; 0x18
    32e0:	e8 0f       	add	r30, r24
    32e2:	f9 1f       	adc	r31, r25
    32e4:	20 83       	st	Z, r18
    32e6:	8f 89       	ldd	r24, Y+23	; 0x17
    32e8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	8f 8b       	std	Y+23, r24	; 0x17
    32ee:	98 8f       	std	Y+24, r25	; 0x18
    32f0:	2b 89       	ldd	r18, Y+19	; 0x13
    32f2:	3c 89       	ldd	r19, Y+20	; 0x14
    32f4:	82 17       	cp	r24, r18
    32f6:	93 07       	cpc	r25, r19
    32f8:	51 f4       	brne	.+20     	; 0x330e <updateRxBuffer+0x5a>
    32fa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    32fc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    32fe:	30 97       	sbiw	r30, 0x00	; 0
    3300:	09 f0       	breq	.+2      	; 0x3304 <updateRxBuffer+0x50>
    3302:	19 95       	eicall
    3304:	1f 8a       	std	Y+23, r1	; 0x17
    3306:	18 8e       	std	Y+24, r1	; 0x18
    3308:	1b 8a       	std	Y+19, r1	; 0x13
    330a:	1c 8a       	std	Y+20, r1	; 0x14
    330c:	1c 86       	std	Y+12, r1	; 0x0c
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	08 95       	ret

00003314 <updateTxBuffer>:
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	ec 01       	movw	r28, r24
    331a:	8d 85       	ldd	r24, Y+13	; 0x0d
    331c:	9e 85       	ldd	r25, Y+14	; 0x0e
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	29 f1       	breq	.+74     	; 0x336c <updateTxBuffer+0x58>
    3322:	a9 85       	ldd	r26, Y+9	; 0x09
    3324:	ba 85       	ldd	r27, Y+10	; 0x0a
    3326:	ed 89       	ldd	r30, Y+21	; 0x15
    3328:	fe 89       	ldd	r31, Y+22	; 0x16
    332a:	e8 0f       	add	r30, r24
    332c:	f9 1f       	adc	r31, r25
    332e:	80 81       	ld	r24, Z
    3330:	8c 93       	st	X, r24
    3332:	8d 89       	ldd	r24, Y+21	; 0x15
    3334:	9e 89       	ldd	r25, Y+22	; 0x16
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	8d 8b       	std	Y+21, r24	; 0x15
    333a:	9e 8b       	std	Y+22, r25	; 0x16
    333c:	29 89       	ldd	r18, Y+17	; 0x11
    333e:	3a 89       	ldd	r19, Y+18	; 0x12
    3340:	82 17       	cp	r24, r18
    3342:	93 07       	cpc	r25, r19
    3344:	99 f4       	brne	.+38     	; 0x336c <updateTxBuffer+0x58>
    3346:	e9 85       	ldd	r30, Y+9	; 0x09
    3348:	fa 85       	ldd	r31, Y+10	; 0x0a
    334a:	83 81       	ldd	r24, Z+3	; 0x03
    334c:	8c 7f       	andi	r24, 0xFC	; 252
    334e:	83 83       	std	Z+3, r24	; 0x03
    3350:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3352:	f8 a1       	lds	r31, 0x48
    3354:	30 97       	sbiw	r30, 0x00	; 0
    3356:	19 f0       	breq	.+6      	; 0x335e <updateTxBuffer+0x4a>
    3358:	8d 89       	ldd	r24, Y+21	; 0x15
    335a:	9e 89       	ldd	r25, Y+22	; 0x16
    335c:	19 95       	eicall
    335e:	1d 86       	std	Y+13, r1	; 0x0d
    3360:	1e 86       	std	Y+14, r1	; 0x0e
    3362:	1d 8a       	std	Y+21, r1	; 0x15
    3364:	1e 8a       	std	Y+22, r1	; 0x16
    3366:	19 8a       	std	Y+17, r1	; 0x11
    3368:	1a 8a       	std	Y+18, r1	; 0x12
    336a:	1b 86       	std	Y+11, r1	; 0x0b
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <__vector_25>:
    3372:	1f 92       	push	r1
    3374:	0f 92       	push	r0
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	0f 92       	push	r0
    337a:	08 b6       	in	r0, 0x38	; 56
    337c:	0f 92       	push	r0
    337e:	09 b6       	in	r0, 0x39	; 57
    3380:	0f 92       	push	r0
    3382:	0b b6       	in	r0, 0x3b	; 59
    3384:	0f 92       	push	r0
    3386:	11 24       	eor	r1, r1
    3388:	2f 93       	push	r18
    338a:	3f 93       	push	r19
    338c:	4f 93       	push	r20
    338e:	5f 93       	push	r21
    3390:	6f 93       	push	r22
    3392:	7f 93       	push	r23
    3394:	8f 93       	push	r24
    3396:	9f 93       	push	r25
    3398:	af 93       	push	r26
    339a:	bf 93       	push	r27
    339c:	ef 93       	push	r30
    339e:	ff 93       	push	r31
    33a0:	80 91 91 2b 	lds	r24, 0x2B91
    33a4:	90 91 92 2b 	lds	r25, 0x2B92
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	11 f0       	breq	.+4      	; 0x33b0 <__vector_25+0x3e>
    33ac:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    33b0:	ff 91       	pop	r31
    33b2:	ef 91       	pop	r30
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	7f 91       	pop	r23
    33be:	6f 91       	pop	r22
    33c0:	5f 91       	pop	r21
    33c2:	4f 91       	pop	r20
    33c4:	3f 91       	pop	r19
    33c6:	2f 91       	pop	r18
    33c8:	0f 90       	pop	r0
    33ca:	0b be       	out	0x3b, r0	; 59
    33cc:	0f 90       	pop	r0
    33ce:	09 be       	out	0x39, r0	; 57
    33d0:	0f 90       	pop	r0
    33d2:	08 be       	out	0x38, r0	; 56
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <__vector_26>:
    33de:	1f 92       	push	r1
    33e0:	0f 92       	push	r0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	0f 92       	push	r0
    33e6:	08 b6       	in	r0, 0x38	; 56
    33e8:	0f 92       	push	r0
    33ea:	09 b6       	in	r0, 0x39	; 57
    33ec:	0f 92       	push	r0
    33ee:	0b b6       	in	r0, 0x3b	; 59
    33f0:	0f 92       	push	r0
    33f2:	11 24       	eor	r1, r1
    33f4:	2f 93       	push	r18
    33f6:	3f 93       	push	r19
    33f8:	4f 93       	push	r20
    33fa:	5f 93       	push	r21
    33fc:	6f 93       	push	r22
    33fe:	7f 93       	push	r23
    3400:	8f 93       	push	r24
    3402:	9f 93       	push	r25
    3404:	af 93       	push	r26
    3406:	bf 93       	push	r27
    3408:	ef 93       	push	r30
    340a:	ff 93       	push	r31
    340c:	80 91 91 2b 	lds	r24, 0x2B91
    3410:	90 91 92 2b 	lds	r25, 0x2B92
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	11 f0       	breq	.+4      	; 0x341c <__vector_26+0x3e>
    3418:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    341c:	ff 91       	pop	r31
    341e:	ef 91       	pop	r30
    3420:	bf 91       	pop	r27
    3422:	af 91       	pop	r26
    3424:	9f 91       	pop	r25
    3426:	8f 91       	pop	r24
    3428:	7f 91       	pop	r23
    342a:	6f 91       	pop	r22
    342c:	5f 91       	pop	r21
    342e:	4f 91       	pop	r20
    3430:	3f 91       	pop	r19
    3432:	2f 91       	pop	r18
    3434:	0f 90       	pop	r0
    3436:	0b be       	out	0x3b, r0	; 59
    3438:	0f 90       	pop	r0
    343a:	09 be       	out	0x39, r0	; 57
    343c:	0f 90       	pop	r0
    343e:	08 be       	out	0x38, r0	; 56
    3440:	0f 90       	pop	r0
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	0f 90       	pop	r0
    3446:	1f 90       	pop	r1
    3448:	18 95       	reti

0000344a <__vector_28>:
    344a:	1f 92       	push	r1
    344c:	0f 92       	push	r0
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	0f 92       	push	r0
    3452:	08 b6       	in	r0, 0x38	; 56
    3454:	0f 92       	push	r0
    3456:	09 b6       	in	r0, 0x39	; 57
    3458:	0f 92       	push	r0
    345a:	0b b6       	in	r0, 0x3b	; 59
    345c:	0f 92       	push	r0
    345e:	11 24       	eor	r1, r1
    3460:	2f 93       	push	r18
    3462:	3f 93       	push	r19
    3464:	4f 93       	push	r20
    3466:	5f 93       	push	r21
    3468:	6f 93       	push	r22
    346a:	7f 93       	push	r23
    346c:	8f 93       	push	r24
    346e:	9f 93       	push	r25
    3470:	af 93       	push	r26
    3472:	bf 93       	push	r27
    3474:	ef 93       	push	r30
    3476:	ff 93       	push	r31
    3478:	80 91 93 2b 	lds	r24, 0x2B93
    347c:	90 91 94 2b 	lds	r25, 0x2B94
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	11 f0       	breq	.+4      	; 0x3488 <__vector_28+0x3e>
    3484:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    3488:	ff 91       	pop	r31
    348a:	ef 91       	pop	r30
    348c:	bf 91       	pop	r27
    348e:	af 91       	pop	r26
    3490:	9f 91       	pop	r25
    3492:	8f 91       	pop	r24
    3494:	7f 91       	pop	r23
    3496:	6f 91       	pop	r22
    3498:	5f 91       	pop	r21
    349a:	4f 91       	pop	r20
    349c:	3f 91       	pop	r19
    349e:	2f 91       	pop	r18
    34a0:	0f 90       	pop	r0
    34a2:	0b be       	out	0x3b, r0	; 59
    34a4:	0f 90       	pop	r0
    34a6:	09 be       	out	0x39, r0	; 57
    34a8:	0f 90       	pop	r0
    34aa:	08 be       	out	0x38, r0	; 56
    34ac:	0f 90       	pop	r0
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	0f 90       	pop	r0
    34b2:	1f 90       	pop	r1
    34b4:	18 95       	reti

000034b6 <__vector_29>:
    34b6:	1f 92       	push	r1
    34b8:	0f 92       	push	r0
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	0f 92       	push	r0
    34be:	08 b6       	in	r0, 0x38	; 56
    34c0:	0f 92       	push	r0
    34c2:	09 b6       	in	r0, 0x39	; 57
    34c4:	0f 92       	push	r0
    34c6:	0b b6       	in	r0, 0x3b	; 59
    34c8:	0f 92       	push	r0
    34ca:	11 24       	eor	r1, r1
    34cc:	2f 93       	push	r18
    34ce:	3f 93       	push	r19
    34d0:	4f 93       	push	r20
    34d2:	5f 93       	push	r21
    34d4:	6f 93       	push	r22
    34d6:	7f 93       	push	r23
    34d8:	8f 93       	push	r24
    34da:	9f 93       	push	r25
    34dc:	af 93       	push	r26
    34de:	bf 93       	push	r27
    34e0:	ef 93       	push	r30
    34e2:	ff 93       	push	r31
    34e4:	80 91 93 2b 	lds	r24, 0x2B93
    34e8:	90 91 94 2b 	lds	r25, 0x2B94
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	11 f0       	breq	.+4      	; 0x34f4 <__vector_29+0x3e>
    34f0:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    34f4:	ff 91       	pop	r31
    34f6:	ef 91       	pop	r30
    34f8:	bf 91       	pop	r27
    34fa:	af 91       	pop	r26
    34fc:	9f 91       	pop	r25
    34fe:	8f 91       	pop	r24
    3500:	7f 91       	pop	r23
    3502:	6f 91       	pop	r22
    3504:	5f 91       	pop	r21
    3506:	4f 91       	pop	r20
    3508:	3f 91       	pop	r19
    350a:	2f 91       	pop	r18
    350c:	0f 90       	pop	r0
    350e:	0b be       	out	0x3b, r0	; 59
    3510:	0f 90       	pop	r0
    3512:	09 be       	out	0x39, r0	; 57
    3514:	0f 90       	pop	r0
    3516:	08 be       	out	0x38, r0	; 56
    3518:	0f 90       	pop	r0
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <__vector_88>:
    3522:	1f 92       	push	r1
    3524:	0f 92       	push	r0
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	0f 92       	push	r0
    352a:	08 b6       	in	r0, 0x38	; 56
    352c:	0f 92       	push	r0
    352e:	09 b6       	in	r0, 0x39	; 57
    3530:	0f 92       	push	r0
    3532:	0b b6       	in	r0, 0x3b	; 59
    3534:	0f 92       	push	r0
    3536:	11 24       	eor	r1, r1
    3538:	2f 93       	push	r18
    353a:	3f 93       	push	r19
    353c:	4f 93       	push	r20
    353e:	5f 93       	push	r21
    3540:	6f 93       	push	r22
    3542:	7f 93       	push	r23
    3544:	8f 93       	push	r24
    3546:	9f 93       	push	r25
    3548:	af 93       	push	r26
    354a:	bf 93       	push	r27
    354c:	ef 93       	push	r30
    354e:	ff 93       	push	r31
    3550:	80 91 95 2b 	lds	r24, 0x2B95
    3554:	90 91 96 2b 	lds	r25, 0x2B96
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	11 f0       	breq	.+4      	; 0x3560 <__vector_88+0x3e>
    355c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0b be       	out	0x3b, r0	; 59
    357c:	0f 90       	pop	r0
    357e:	09 be       	out	0x39, r0	; 57
    3580:	0f 90       	pop	r0
    3582:	08 be       	out	0x38, r0	; 56
    3584:	0f 90       	pop	r0
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	0f 90       	pop	r0
    358a:	1f 90       	pop	r1
    358c:	18 95       	reti

0000358e <__vector_89>:
    358e:	1f 92       	push	r1
    3590:	0f 92       	push	r0
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	0f 92       	push	r0
    3596:	08 b6       	in	r0, 0x38	; 56
    3598:	0f 92       	push	r0
    359a:	09 b6       	in	r0, 0x39	; 57
    359c:	0f 92       	push	r0
    359e:	0b b6       	in	r0, 0x3b	; 59
    35a0:	0f 92       	push	r0
    35a2:	11 24       	eor	r1, r1
    35a4:	2f 93       	push	r18
    35a6:	3f 93       	push	r19
    35a8:	4f 93       	push	r20
    35aa:	5f 93       	push	r21
    35ac:	6f 93       	push	r22
    35ae:	7f 93       	push	r23
    35b0:	8f 93       	push	r24
    35b2:	9f 93       	push	r25
    35b4:	af 93       	push	r26
    35b6:	bf 93       	push	r27
    35b8:	ef 93       	push	r30
    35ba:	ff 93       	push	r31
    35bc:	80 91 95 2b 	lds	r24, 0x2B95
    35c0:	90 91 96 2b 	lds	r25, 0x2B96
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	11 f0       	breq	.+4      	; 0x35cc <__vector_89+0x3e>
    35c8:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    35cc:	ff 91       	pop	r31
    35ce:	ef 91       	pop	r30
    35d0:	bf 91       	pop	r27
    35d2:	af 91       	pop	r26
    35d4:	9f 91       	pop	r25
    35d6:	8f 91       	pop	r24
    35d8:	7f 91       	pop	r23
    35da:	6f 91       	pop	r22
    35dc:	5f 91       	pop	r21
    35de:	4f 91       	pop	r20
    35e0:	3f 91       	pop	r19
    35e2:	2f 91       	pop	r18
    35e4:	0f 90       	pop	r0
    35e6:	0b be       	out	0x3b, r0	; 59
    35e8:	0f 90       	pop	r0
    35ea:	09 be       	out	0x39, r0	; 57
    35ec:	0f 90       	pop	r0
    35ee:	08 be       	out	0x38, r0	; 56
    35f0:	0f 90       	pop	r0
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	0f 90       	pop	r0
    35f6:	1f 90       	pop	r1
    35f8:	18 95       	reti

000035fa <__vector_91>:
    35fa:	1f 92       	push	r1
    35fc:	0f 92       	push	r0
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	0f 92       	push	r0
    3602:	08 b6       	in	r0, 0x38	; 56
    3604:	0f 92       	push	r0
    3606:	09 b6       	in	r0, 0x39	; 57
    3608:	0f 92       	push	r0
    360a:	0b b6       	in	r0, 0x3b	; 59
    360c:	0f 92       	push	r0
    360e:	11 24       	eor	r1, r1
    3610:	2f 93       	push	r18
    3612:	3f 93       	push	r19
    3614:	4f 93       	push	r20
    3616:	5f 93       	push	r21
    3618:	6f 93       	push	r22
    361a:	7f 93       	push	r23
    361c:	8f 93       	push	r24
    361e:	9f 93       	push	r25
    3620:	af 93       	push	r26
    3622:	bf 93       	push	r27
    3624:	ef 93       	push	r30
    3626:	ff 93       	push	r31
    3628:	80 91 97 2b 	lds	r24, 0x2B97
    362c:	90 91 98 2b 	lds	r25, 0x2B98
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	11 f0       	breq	.+4      	; 0x3638 <__vector_91+0x3e>
    3634:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    3638:	ff 91       	pop	r31
    363a:	ef 91       	pop	r30
    363c:	bf 91       	pop	r27
    363e:	af 91       	pop	r26
    3640:	9f 91       	pop	r25
    3642:	8f 91       	pop	r24
    3644:	7f 91       	pop	r23
    3646:	6f 91       	pop	r22
    3648:	5f 91       	pop	r21
    364a:	4f 91       	pop	r20
    364c:	3f 91       	pop	r19
    364e:	2f 91       	pop	r18
    3650:	0f 90       	pop	r0
    3652:	0b be       	out	0x3b, r0	; 59
    3654:	0f 90       	pop	r0
    3656:	09 be       	out	0x39, r0	; 57
    3658:	0f 90       	pop	r0
    365a:	08 be       	out	0x38, r0	; 56
    365c:	0f 90       	pop	r0
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	0f 90       	pop	r0
    3662:	1f 90       	pop	r1
    3664:	18 95       	reti

00003666 <__vector_92>:
    3666:	1f 92       	push	r1
    3668:	0f 92       	push	r0
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	0f 92       	push	r0
    366e:	08 b6       	in	r0, 0x38	; 56
    3670:	0f 92       	push	r0
    3672:	09 b6       	in	r0, 0x39	; 57
    3674:	0f 92       	push	r0
    3676:	0b b6       	in	r0, 0x3b	; 59
    3678:	0f 92       	push	r0
    367a:	11 24       	eor	r1, r1
    367c:	2f 93       	push	r18
    367e:	3f 93       	push	r19
    3680:	4f 93       	push	r20
    3682:	5f 93       	push	r21
    3684:	6f 93       	push	r22
    3686:	7f 93       	push	r23
    3688:	8f 93       	push	r24
    368a:	9f 93       	push	r25
    368c:	af 93       	push	r26
    368e:	bf 93       	push	r27
    3690:	ef 93       	push	r30
    3692:	ff 93       	push	r31
    3694:	80 91 97 2b 	lds	r24, 0x2B97
    3698:	90 91 98 2b 	lds	r25, 0x2B98
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	11 f0       	breq	.+4      	; 0x36a4 <__vector_92+0x3e>
    36a0:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    36a4:	ff 91       	pop	r31
    36a6:	ef 91       	pop	r30
    36a8:	bf 91       	pop	r27
    36aa:	af 91       	pop	r26
    36ac:	9f 91       	pop	r25
    36ae:	8f 91       	pop	r24
    36b0:	7f 91       	pop	r23
    36b2:	6f 91       	pop	r22
    36b4:	5f 91       	pop	r21
    36b6:	4f 91       	pop	r20
    36b8:	3f 91       	pop	r19
    36ba:	2f 91       	pop	r18
    36bc:	0f 90       	pop	r0
    36be:	0b be       	out	0x3b, r0	; 59
    36c0:	0f 90       	pop	r0
    36c2:	09 be       	out	0x39, r0	; 57
    36c4:	0f 90       	pop	r0
    36c6:	08 be       	out	0x38, r0	; 56
    36c8:	0f 90       	pop	r0
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	0f 90       	pop	r0
    36ce:	1f 90       	pop	r1
    36d0:	18 95       	reti

000036d2 <__vector_58>:
    36d2:	1f 92       	push	r1
    36d4:	0f 92       	push	r0
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	0f 92       	push	r0
    36da:	08 b6       	in	r0, 0x38	; 56
    36dc:	0f 92       	push	r0
    36de:	09 b6       	in	r0, 0x39	; 57
    36e0:	0f 92       	push	r0
    36e2:	0b b6       	in	r0, 0x3b	; 59
    36e4:	0f 92       	push	r0
    36e6:	11 24       	eor	r1, r1
    36e8:	2f 93       	push	r18
    36ea:	3f 93       	push	r19
    36ec:	4f 93       	push	r20
    36ee:	5f 93       	push	r21
    36f0:	6f 93       	push	r22
    36f2:	7f 93       	push	r23
    36f4:	8f 93       	push	r24
    36f6:	9f 93       	push	r25
    36f8:	af 93       	push	r26
    36fa:	bf 93       	push	r27
    36fc:	ef 93       	push	r30
    36fe:	ff 93       	push	r31
    3700:	80 91 99 2b 	lds	r24, 0x2B99
    3704:	90 91 9a 2b 	lds	r25, 0x2B9A
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	11 f0       	breq	.+4      	; 0x3710 <__vector_58+0x3e>
    370c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    3710:	ff 91       	pop	r31
    3712:	ef 91       	pop	r30
    3714:	bf 91       	pop	r27
    3716:	af 91       	pop	r26
    3718:	9f 91       	pop	r25
    371a:	8f 91       	pop	r24
    371c:	7f 91       	pop	r23
    371e:	6f 91       	pop	r22
    3720:	5f 91       	pop	r21
    3722:	4f 91       	pop	r20
    3724:	3f 91       	pop	r19
    3726:	2f 91       	pop	r18
    3728:	0f 90       	pop	r0
    372a:	0b be       	out	0x3b, r0	; 59
    372c:	0f 90       	pop	r0
    372e:	09 be       	out	0x39, r0	; 57
    3730:	0f 90       	pop	r0
    3732:	08 be       	out	0x38, r0	; 56
    3734:	0f 90       	pop	r0
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	0f 90       	pop	r0
    373a:	1f 90       	pop	r1
    373c:	18 95       	reti

0000373e <__vector_59>:
    373e:	1f 92       	push	r1
    3740:	0f 92       	push	r0
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	0f 92       	push	r0
    3746:	08 b6       	in	r0, 0x38	; 56
    3748:	0f 92       	push	r0
    374a:	09 b6       	in	r0, 0x39	; 57
    374c:	0f 92       	push	r0
    374e:	0b b6       	in	r0, 0x3b	; 59
    3750:	0f 92       	push	r0
    3752:	11 24       	eor	r1, r1
    3754:	2f 93       	push	r18
    3756:	3f 93       	push	r19
    3758:	4f 93       	push	r20
    375a:	5f 93       	push	r21
    375c:	6f 93       	push	r22
    375e:	7f 93       	push	r23
    3760:	8f 93       	push	r24
    3762:	9f 93       	push	r25
    3764:	af 93       	push	r26
    3766:	bf 93       	push	r27
    3768:	ef 93       	push	r30
    376a:	ff 93       	push	r31
    376c:	80 91 99 2b 	lds	r24, 0x2B99
    3770:	90 91 9a 2b 	lds	r25, 0x2B9A
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	11 f0       	breq	.+4      	; 0x377c <__vector_59+0x3e>
    3778:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    377c:	ff 91       	pop	r31
    377e:	ef 91       	pop	r30
    3780:	bf 91       	pop	r27
    3782:	af 91       	pop	r26
    3784:	9f 91       	pop	r25
    3786:	8f 91       	pop	r24
    3788:	7f 91       	pop	r23
    378a:	6f 91       	pop	r22
    378c:	5f 91       	pop	r21
    378e:	4f 91       	pop	r20
    3790:	3f 91       	pop	r19
    3792:	2f 91       	pop	r18
    3794:	0f 90       	pop	r0
    3796:	0b be       	out	0x3b, r0	; 59
    3798:	0f 90       	pop	r0
    379a:	09 be       	out	0x39, r0	; 57
    379c:	0f 90       	pop	r0
    379e:	08 be       	out	0x38, r0	; 56
    37a0:	0f 90       	pop	r0
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	0f 90       	pop	r0
    37a6:	1f 90       	pop	r1
    37a8:	18 95       	reti

000037aa <__vector_61>:
    37aa:	1f 92       	push	r1
    37ac:	0f 92       	push	r0
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	0f 92       	push	r0
    37b2:	08 b6       	in	r0, 0x38	; 56
    37b4:	0f 92       	push	r0
    37b6:	09 b6       	in	r0, 0x39	; 57
    37b8:	0f 92       	push	r0
    37ba:	0b b6       	in	r0, 0x3b	; 59
    37bc:	0f 92       	push	r0
    37be:	11 24       	eor	r1, r1
    37c0:	2f 93       	push	r18
    37c2:	3f 93       	push	r19
    37c4:	4f 93       	push	r20
    37c6:	5f 93       	push	r21
    37c8:	6f 93       	push	r22
    37ca:	7f 93       	push	r23
    37cc:	8f 93       	push	r24
    37ce:	9f 93       	push	r25
    37d0:	af 93       	push	r26
    37d2:	bf 93       	push	r27
    37d4:	ef 93       	push	r30
    37d6:	ff 93       	push	r31
    37d8:	80 91 9b 2b 	lds	r24, 0x2B9B
    37dc:	90 91 9c 2b 	lds	r25, 0x2B9C
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	11 f0       	breq	.+4      	; 0x37e8 <__vector_61+0x3e>
    37e4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    37e8:	ff 91       	pop	r31
    37ea:	ef 91       	pop	r30
    37ec:	bf 91       	pop	r27
    37ee:	af 91       	pop	r26
    37f0:	9f 91       	pop	r25
    37f2:	8f 91       	pop	r24
    37f4:	7f 91       	pop	r23
    37f6:	6f 91       	pop	r22
    37f8:	5f 91       	pop	r21
    37fa:	4f 91       	pop	r20
    37fc:	3f 91       	pop	r19
    37fe:	2f 91       	pop	r18
    3800:	0f 90       	pop	r0
    3802:	0b be       	out	0x3b, r0	; 59
    3804:	0f 90       	pop	r0
    3806:	09 be       	out	0x39, r0	; 57
    3808:	0f 90       	pop	r0
    380a:	08 be       	out	0x38, r0	; 56
    380c:	0f 90       	pop	r0
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	0f 90       	pop	r0
    3812:	1f 90       	pop	r1
    3814:	18 95       	reti

00003816 <__vector_62>:
    3816:	1f 92       	push	r1
    3818:	0f 92       	push	r0
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	0f 92       	push	r0
    381e:	08 b6       	in	r0, 0x38	; 56
    3820:	0f 92       	push	r0
    3822:	09 b6       	in	r0, 0x39	; 57
    3824:	0f 92       	push	r0
    3826:	0b b6       	in	r0, 0x3b	; 59
    3828:	0f 92       	push	r0
    382a:	11 24       	eor	r1, r1
    382c:	2f 93       	push	r18
    382e:	3f 93       	push	r19
    3830:	4f 93       	push	r20
    3832:	5f 93       	push	r21
    3834:	6f 93       	push	r22
    3836:	7f 93       	push	r23
    3838:	8f 93       	push	r24
    383a:	9f 93       	push	r25
    383c:	af 93       	push	r26
    383e:	bf 93       	push	r27
    3840:	ef 93       	push	r30
    3842:	ff 93       	push	r31
    3844:	80 91 9b 2b 	lds	r24, 0x2B9B
    3848:	90 91 9c 2b 	lds	r25, 0x2B9C
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	11 f0       	breq	.+4      	; 0x3854 <__vector_62+0x3e>
    3850:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    3854:	ff 91       	pop	r31
    3856:	ef 91       	pop	r30
    3858:	bf 91       	pop	r27
    385a:	af 91       	pop	r26
    385c:	9f 91       	pop	r25
    385e:	8f 91       	pop	r24
    3860:	7f 91       	pop	r23
    3862:	6f 91       	pop	r22
    3864:	5f 91       	pop	r21
    3866:	4f 91       	pop	r20
    3868:	3f 91       	pop	r19
    386a:	2f 91       	pop	r18
    386c:	0f 90       	pop	r0
    386e:	0b be       	out	0x3b, r0	; 59
    3870:	0f 90       	pop	r0
    3872:	09 be       	out	0x39, r0	; 57
    3874:	0f 90       	pop	r0
    3876:	08 be       	out	0x38, r0	; 56
    3878:	0f 90       	pop	r0
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	0f 90       	pop	r0
    387e:	1f 90       	pop	r1
    3880:	18 95       	reti

00003882 <__vector_119>:
    3882:	1f 92       	push	r1
    3884:	0f 92       	push	r0
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	0f 92       	push	r0
    388a:	08 b6       	in	r0, 0x38	; 56
    388c:	0f 92       	push	r0
    388e:	09 b6       	in	r0, 0x39	; 57
    3890:	0f 92       	push	r0
    3892:	0b b6       	in	r0, 0x3b	; 59
    3894:	0f 92       	push	r0
    3896:	11 24       	eor	r1, r1
    3898:	2f 93       	push	r18
    389a:	3f 93       	push	r19
    389c:	4f 93       	push	r20
    389e:	5f 93       	push	r21
    38a0:	6f 93       	push	r22
    38a2:	7f 93       	push	r23
    38a4:	8f 93       	push	r24
    38a6:	9f 93       	push	r25
    38a8:	af 93       	push	r26
    38aa:	bf 93       	push	r27
    38ac:	ef 93       	push	r30
    38ae:	ff 93       	push	r31
    38b0:	80 91 9d 2b 	lds	r24, 0x2B9D
    38b4:	90 91 9e 2b 	lds	r25, 0x2B9E
    38b8:	00 97       	sbiw	r24, 0x00	; 0
    38ba:	11 f0       	breq	.+4      	; 0x38c0 <__vector_119+0x3e>
    38bc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    38c0:	ff 91       	pop	r31
    38c2:	ef 91       	pop	r30
    38c4:	bf 91       	pop	r27
    38c6:	af 91       	pop	r26
    38c8:	9f 91       	pop	r25
    38ca:	8f 91       	pop	r24
    38cc:	7f 91       	pop	r23
    38ce:	6f 91       	pop	r22
    38d0:	5f 91       	pop	r21
    38d2:	4f 91       	pop	r20
    38d4:	3f 91       	pop	r19
    38d6:	2f 91       	pop	r18
    38d8:	0f 90       	pop	r0
    38da:	0b be       	out	0x3b, r0	; 59
    38dc:	0f 90       	pop	r0
    38de:	09 be       	out	0x39, r0	; 57
    38e0:	0f 90       	pop	r0
    38e2:	08 be       	out	0x38, r0	; 56
    38e4:	0f 90       	pop	r0
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	0f 90       	pop	r0
    38ea:	1f 90       	pop	r1
    38ec:	18 95       	reti

000038ee <__vector_120>:
    38ee:	1f 92       	push	r1
    38f0:	0f 92       	push	r0
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	0f 92       	push	r0
    38f6:	08 b6       	in	r0, 0x38	; 56
    38f8:	0f 92       	push	r0
    38fa:	09 b6       	in	r0, 0x39	; 57
    38fc:	0f 92       	push	r0
    38fe:	0b b6       	in	r0, 0x3b	; 59
    3900:	0f 92       	push	r0
    3902:	11 24       	eor	r1, r1
    3904:	2f 93       	push	r18
    3906:	3f 93       	push	r19
    3908:	4f 93       	push	r20
    390a:	5f 93       	push	r21
    390c:	6f 93       	push	r22
    390e:	7f 93       	push	r23
    3910:	8f 93       	push	r24
    3912:	9f 93       	push	r25
    3914:	af 93       	push	r26
    3916:	bf 93       	push	r27
    3918:	ef 93       	push	r30
    391a:	ff 93       	push	r31
    391c:	80 91 9d 2b 	lds	r24, 0x2B9D
    3920:	90 91 9e 2b 	lds	r25, 0x2B9E
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	11 f0       	breq	.+4      	; 0x392c <__vector_120+0x3e>
    3928:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    392c:	ff 91       	pop	r31
    392e:	ef 91       	pop	r30
    3930:	bf 91       	pop	r27
    3932:	af 91       	pop	r26
    3934:	9f 91       	pop	r25
    3936:	8f 91       	pop	r24
    3938:	7f 91       	pop	r23
    393a:	6f 91       	pop	r22
    393c:	5f 91       	pop	r21
    393e:	4f 91       	pop	r20
    3940:	3f 91       	pop	r19
    3942:	2f 91       	pop	r18
    3944:	0f 90       	pop	r0
    3946:	0b be       	out	0x3b, r0	; 59
    3948:	0f 90       	pop	r0
    394a:	09 be       	out	0x39, r0	; 57
    394c:	0f 90       	pop	r0
    394e:	08 be       	out	0x38, r0	; 56
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <__vector_122>:
    395a:	1f 92       	push	r1
    395c:	0f 92       	push	r0
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	0f 92       	push	r0
    3962:	08 b6       	in	r0, 0x38	; 56
    3964:	0f 92       	push	r0
    3966:	09 b6       	in	r0, 0x39	; 57
    3968:	0f 92       	push	r0
    396a:	0b b6       	in	r0, 0x3b	; 59
    396c:	0f 92       	push	r0
    396e:	11 24       	eor	r1, r1
    3970:	2f 93       	push	r18
    3972:	3f 93       	push	r19
    3974:	4f 93       	push	r20
    3976:	5f 93       	push	r21
    3978:	6f 93       	push	r22
    397a:	7f 93       	push	r23
    397c:	8f 93       	push	r24
    397e:	9f 93       	push	r25
    3980:	af 93       	push	r26
    3982:	bf 93       	push	r27
    3984:	ef 93       	push	r30
    3986:	ff 93       	push	r31
    3988:	80 91 9f 2b 	lds	r24, 0x2B9F
    398c:	90 91 a0 2b 	lds	r25, 0x2BA0
    3990:	00 97       	sbiw	r24, 0x00	; 0
    3992:	11 f0       	breq	.+4      	; 0x3998 <__vector_122+0x3e>
    3994:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <updateRxBuffer>
    3998:	ff 91       	pop	r31
    399a:	ef 91       	pop	r30
    399c:	bf 91       	pop	r27
    399e:	af 91       	pop	r26
    39a0:	9f 91       	pop	r25
    39a2:	8f 91       	pop	r24
    39a4:	7f 91       	pop	r23
    39a6:	6f 91       	pop	r22
    39a8:	5f 91       	pop	r21
    39aa:	4f 91       	pop	r20
    39ac:	3f 91       	pop	r19
    39ae:	2f 91       	pop	r18
    39b0:	0f 90       	pop	r0
    39b2:	0b be       	out	0x3b, r0	; 59
    39b4:	0f 90       	pop	r0
    39b6:	09 be       	out	0x39, r0	; 57
    39b8:	0f 90       	pop	r0
    39ba:	08 be       	out	0x38, r0	; 56
    39bc:	0f 90       	pop	r0
    39be:	0f be       	out	0x3f, r0	; 63
    39c0:	0f 90       	pop	r0
    39c2:	1f 90       	pop	r1
    39c4:	18 95       	reti

000039c6 <__vector_123>:
    39c6:	1f 92       	push	r1
    39c8:	0f 92       	push	r0
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	0f 92       	push	r0
    39ce:	08 b6       	in	r0, 0x38	; 56
    39d0:	0f 92       	push	r0
    39d2:	09 b6       	in	r0, 0x39	; 57
    39d4:	0f 92       	push	r0
    39d6:	0b b6       	in	r0, 0x3b	; 59
    39d8:	0f 92       	push	r0
    39da:	11 24       	eor	r1, r1
    39dc:	2f 93       	push	r18
    39de:	3f 93       	push	r19
    39e0:	4f 93       	push	r20
    39e2:	5f 93       	push	r21
    39e4:	6f 93       	push	r22
    39e6:	7f 93       	push	r23
    39e8:	8f 93       	push	r24
    39ea:	9f 93       	push	r25
    39ec:	af 93       	push	r26
    39ee:	bf 93       	push	r27
    39f0:	ef 93       	push	r30
    39f2:	ff 93       	push	r31
    39f4:	80 91 9f 2b 	lds	r24, 0x2B9F
    39f8:	90 91 a0 2b 	lds	r25, 0x2BA0
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	11 f0       	breq	.+4      	; 0x3a04 <__vector_123+0x3e>
    3a00:	0e 94 8a 19 	call	0x3314	; 0x3314 <updateTxBuffer>
    3a04:	ff 91       	pop	r31
    3a06:	ef 91       	pop	r30
    3a08:	bf 91       	pop	r27
    3a0a:	af 91       	pop	r26
    3a0c:	9f 91       	pop	r25
    3a0e:	8f 91       	pop	r24
    3a10:	7f 91       	pop	r23
    3a12:	6f 91       	pop	r22
    3a14:	5f 91       	pop	r21
    3a16:	4f 91       	pop	r20
    3a18:	3f 91       	pop	r19
    3a1a:	2f 91       	pop	r18
    3a1c:	0f 90       	pop	r0
    3a1e:	0b be       	out	0x3b, r0	; 59
    3a20:	0f 90       	pop	r0
    3a22:	09 be       	out	0x39, r0	; 57
    3a24:	0f 90       	pop	r0
    3a26:	08 be       	out	0x38, r0	; 56
    3a28:	0f 90       	pop	r0
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	0f 90       	pop	r0
    3a2e:	1f 90       	pop	r1
    3a30:	18 95       	reti

00003a32 <hal_enableUartRxInt>:
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <hal_enableUartRxInt+0x6>
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	8a 83       	std	Y+2, r24	; 0x02
    3a3e:	9b 83       	std	Y+3, r25	; 0x03
    3a40:	8f b7       	in	r24, 0x3f	; 63
    3a42:	89 83       	std	Y+1, r24	; 0x01
    3a44:	f8 94       	cli
    3a46:	ea 81       	ldd	r30, Y+2	; 0x02
    3a48:	fb 81       	ldd	r31, Y+3	; 0x03
    3a4a:	80 91 d9 20 	lds	r24, 0x20D9
    3a4e:	90 91 da 20 	lds	r25, 0x20DA
    3a52:	24 81       	ldd	r18, Z+4	; 0x04
    3a54:	35 81       	ldd	r19, Z+5	; 0x05
    3a56:	28 17       	cp	r18, r24
    3a58:	39 07       	cpc	r19, r25
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <hal_enableUartRxInt+0x32>
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	8f bf       	out	0x3f, r24	; 63
    3a60:	8e ef       	ldi	r24, 0xFE	; 254
    3a62:	17 c0       	rjmp	.+46     	; 0x3a92 <hal_enableUartRxInt+0x60>
    3a64:	ea 81       	ldd	r30, Y+2	; 0x02
    3a66:	fb 81       	ldd	r31, Y+3	; 0x03
    3a68:	01 90       	ld	r0, Z+
    3a6a:	f0 81       	ld	r31, Z
    3a6c:	e0 2d       	mov	r30, r0
    3a6e:	a1 85       	ldd	r26, Z+9	; 0x09
    3a70:	b2 85       	ldd	r27, Z+10	; 0x0a
    3a72:	13 96       	adiw	r26, 0x03	; 3
    3a74:	8c 91       	ld	r24, X
    3a76:	13 97       	sbiw	r26, 0x03	; 3
    3a78:	8f 7c       	andi	r24, 0xCF	; 207
    3a7a:	13 96       	adiw	r26, 0x03	; 3
    3a7c:	8c 93       	st	X, r24
    3a7e:	13 97       	sbiw	r26, 0x03	; 3
    3a80:	01 84       	ldd	r0, Z+9	; 0x09
    3a82:	f2 85       	ldd	r31, Z+10	; 0x0a
    3a84:	e0 2d       	mov	r30, r0
    3a86:	83 81       	ldd	r24, Z+3	; 0x03
    3a88:	80 63       	ori	r24, 0x30	; 48
    3a8a:	83 83       	std	Z+3, r24	; 0x03
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	8f bf       	out	0x3f, r24	; 63
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	23 96       	adiw	r28, 0x03	; 3
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	08 95       	ret

00003a9e <hal_disableUartRxInt>:
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <hal_disableUartRxInt+0x6>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	8a 83       	std	Y+2, r24	; 0x02
    3aaa:	9b 83       	std	Y+3, r25	; 0x03
    3aac:	8f b7       	in	r24, 0x3f	; 63
    3aae:	89 83       	std	Y+1, r24	; 0x01
    3ab0:	f8 94       	cli
    3ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ab6:	80 91 d9 20 	lds	r24, 0x20D9
    3aba:	90 91 da 20 	lds	r25, 0x20DA
    3abe:	24 81       	ldd	r18, Z+4	; 0x04
    3ac0:	35 81       	ldd	r19, Z+5	; 0x05
    3ac2:	28 17       	cp	r18, r24
    3ac4:	39 07       	cpc	r19, r25
    3ac6:	21 f0       	breq	.+8      	; 0x3ad0 <hal_disableUartRxInt+0x32>
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	8f bf       	out	0x3f, r24	; 63
    3acc:	8e ef       	ldi	r24, 0xFE	; 254
    3ace:	0e c0       	rjmp	.+28     	; 0x3aec <hal_disableUartRxInt+0x4e>
    3ad0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ad2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ad4:	01 90       	ld	r0, Z+
    3ad6:	f0 81       	ld	r31, Z
    3ad8:	e0 2d       	mov	r30, r0
    3ada:	01 84       	ldd	r0, Z+9	; 0x09
    3adc:	f2 85       	ldd	r31, Z+10	; 0x0a
    3ade:	e0 2d       	mov	r30, r0
    3ae0:	83 81       	ldd	r24, Z+3	; 0x03
    3ae2:	8f 7c       	andi	r24, 0xCF	; 207
    3ae4:	83 83       	std	Z+3, r24	; 0x03
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	8f bf       	out	0x3f, r24	; 63
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	23 96       	adiw	r28, 0x03	; 3
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	08 95       	ret

00003af8 <hal_uartWriteByte>:
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <hal_uartWriteByte+0x6>
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	8a 83       	std	Y+2, r24	; 0x02
    3b04:	9b 83       	std	Y+3, r25	; 0x03
    3b06:	8f b7       	in	r24, 0x3f	; 63
    3b08:	89 83       	std	Y+1, r24	; 0x01
    3b0a:	f8 94       	cli
    3b0c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b0e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b10:	80 91 d9 20 	lds	r24, 0x20D9
    3b14:	90 91 da 20 	lds	r25, 0x20DA
    3b18:	24 81       	ldd	r18, Z+4	; 0x04
    3b1a:	35 81       	ldd	r19, Z+5	; 0x05
    3b1c:	28 17       	cp	r18, r24
    3b1e:	39 07       	cpc	r19, r25
    3b20:	21 f0       	breq	.+8      	; 0x3b2a <hal_uartWriteByte+0x32>
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	8f bf       	out	0x3f, r24	; 63
    3b26:	8e ef       	ldi	r24, 0xFE	; 254
    3b28:	1a c0       	rjmp	.+52     	; 0x3b5e <hal_uartWriteByte+0x66>
    3b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    3b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    3b2e:	01 90       	ld	r0, Z+
    3b30:	f0 81       	ld	r31, Z
    3b32:	e0 2d       	mov	r30, r0
    3b34:	83 85       	ldd	r24, Z+11	; 0x0b
    3b36:	88 23       	and	r24, r24
    3b38:	21 f0       	breq	.+8      	; 0x3b42 <hal_uartWriteByte+0x4a>
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	8f bf       	out	0x3f, r24	; 63
    3b3e:	81 ef       	ldi	r24, 0xF1	; 241
    3b40:	0e c0       	rjmp	.+28     	; 0x3b5e <hal_uartWriteByte+0x66>
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	83 87       	std	Z+11, r24	; 0x0b
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	8f bf       	out	0x3f, r24	; 63
    3b4a:	a1 85       	ldd	r26, Z+9	; 0x09
    3b4c:	b2 85       	ldd	r27, Z+10	; 0x0a
    3b4e:	11 96       	adiw	r26, 0x01	; 1
    3b50:	8c 91       	ld	r24, X
    3b52:	11 97       	sbiw	r26, 0x01	; 1
    3b54:	85 ff       	sbrs	r24, 5
    3b56:	fb cf       	rjmp	.-10     	; 0x3b4e <hal_uartWriteByte+0x56>
    3b58:	6c 93       	st	X, r22
    3b5a:	13 86       	std	Z+11, r1	; 0x0b
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	23 96       	adiw	r28, 0x03	; 3
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	08 95       	ret

00003b6a <hal_uartReadBlock>:
    3b6a:	8f 92       	push	r8
    3b6c:	9f 92       	push	r9
    3b6e:	af 92       	push	r10
    3b70:	bf 92       	push	r11
    3b72:	cf 92       	push	r12
    3b74:	df 92       	push	r13
    3b76:	ef 92       	push	r14
    3b78:	ff 92       	push	r15
    3b7a:	0f 93       	push	r16
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	61 97       	sbiw	r28, 0x11	; 17
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	88 8b       	std	Y+16, r24	; 0x10
    3b8e:	99 8b       	std	Y+17, r25	; 0x11
    3b90:	db 01       	movw	r26, r22
    3b92:	8f b7       	in	r24, 0x3f	; 63
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	f8 94       	cli
    3b98:	e8 89       	ldd	r30, Y+16	; 0x10
    3b9a:	f9 89       	ldd	r31, Y+17	; 0x11
    3b9c:	80 91 d9 20 	lds	r24, 0x20D9
    3ba0:	90 91 da 20 	lds	r25, 0x20DA
    3ba4:	24 81       	ldd	r18, Z+4	; 0x04
    3ba6:	35 81       	ldd	r19, Z+5	; 0x05
    3ba8:	28 17       	cp	r18, r24
    3baa:	39 07       	cpc	r19, r25
    3bac:	21 f0       	breq	.+8      	; 0x3bb6 <hal_uartReadBlock+0x4c>
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	8f bf       	out	0x3f, r24	; 63
    3bb2:	8e ef       	ldi	r24, 0xFE	; 254
    3bb4:	5f c0       	rjmp	.+190    	; 0x3c74 <hal_uartReadBlock+0x10a>
    3bb6:	e8 89       	ldd	r30, Y+16	; 0x10
    3bb8:	f9 89       	ldd	r31, Y+17	; 0x11
    3bba:	80 80       	ld	r8, Z
    3bbc:	91 80       	ldd	r9, Z+1	; 0x01
    3bbe:	f4 01       	movw	r30, r8
    3bc0:	84 85       	ldd	r24, Z+12	; 0x0c
    3bc2:	88 23       	and	r24, r24
    3bc4:	21 f0       	breq	.+8      	; 0x3bce <hal_uartReadBlock+0x64>
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	8f bf       	out	0x3f, r24	; 63
    3bca:	81 ef       	ldi	r24, 0xF1	; 241
    3bcc:	53 c0       	rjmp	.+166    	; 0x3c74 <hal_uartReadBlock+0x10a>
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	f4 01       	movw	r30, r8
    3bd2:	84 87       	std	Z+12, r24	; 0x0c
    3bd4:	21 85       	ldd	r18, Z+9	; 0x09
    3bd6:	32 85       	ldd	r19, Z+10	; 0x0a
    3bd8:	f9 01       	movw	r30, r18
    3bda:	83 81       	ldd	r24, Z+3	; 0x03
    3bdc:	8f 7c       	andi	r24, 0xCF	; 207
    3bde:	83 83       	std	Z+3, r24	; 0x03
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	8f bf       	out	0x3f, r24	; 63
    3be4:	f4 01       	movw	r30, r8
    3be6:	67 87       	std	Z+15, r22	; 0x0f
    3be8:	70 8b       	std	Z+16, r23	; 0x10
    3bea:	43 8b       	std	Z+19, r20	; 0x13
    3bec:	54 8b       	std	Z+20, r21	; 0x14
    3bee:	17 8a       	std	Z+23, r1	; 0x17
    3bf0:	10 8e       	std	Z+24, r1	; 0x18
    3bf2:	83 8d       	ldd	r24, Z+27	; 0x1b
    3bf4:	94 8d       	ldd	r25, Z+28	; 0x1c
    3bf6:	18 16       	cp	r1, r24
    3bf8:	19 06       	cpc	r1, r25
    3bfa:	ac f5       	brge	.+106    	; 0x3c66 <hal_uartReadBlock+0xfc>
    3bfc:	80 81       	ld	r24, Z
    3bfe:	83 50       	subi	r24, 0x03	; 3
    3c00:	83 31       	cpi	r24, 0x13	; 19
    3c02:	30 f4       	brcc	.+12     	; 0x3c10 <hal_uartReadBlock+0xa6>
    3c04:	e8 2f       	mov	r30, r24
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	e9 51       	subi	r30, 0x19	; 25
    3c0a:	ff 4d       	sbci	r31, 0xDF	; 223
    3c0c:	60 81       	ld	r22, Z
    3c0e:	01 c0       	rjmp	.+2      	; 0x3c12 <hal_uartReadBlock+0xa8>
    3c10:	6b e4       	ldi	r22, 0x4B	; 75
    3c12:	f4 01       	movw	r30, r8
    3c14:	a1 84       	ldd	r10, Z+9	; 0x09
    3c16:	b2 84       	ldd	r11, Z+10	; 0x0a
    3c18:	aa 82       	std	Y+2, r10	; 0x02
    3c1a:	bb 82       	std	Y+3, r11	; 0x03
    3c1c:	ac 83       	std	Y+4, r26	; 0x04
    3c1e:	bd 83       	std	Y+5, r27	; 0x05
    3c20:	1e 82       	std	Y+6, r1	; 0x06
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	8f 83       	std	Y+7, r24	; 0x07
    3c26:	18 86       	std	Y+8, r1	; 0x08
    3c28:	89 87       	std	Y+9, r24	; 0x09
    3c2a:	4a 87       	std	Y+10, r20	; 0x0a
    3c2c:	5b 87       	std	Y+11, r21	; 0x0b
    3c2e:	1c 86       	std	Y+12, r1	; 0x0c
    3c30:	8d 87       	std	Y+13, r24	; 0x0d
    3c32:	6e 87       	std	Y+14, r22	; 0x0e
    3c34:	1f 86       	std	Y+15, r1	; 0x0f
    3c36:	83 8d       	ldd	r24, Z+27	; 0x1b
    3c38:	94 8d       	ldd	r25, Z+28	; 0x1c
    3c3a:	cc 80       	ldd	r12, Y+4	; 0x04
    3c3c:	dd 80       	ldd	r13, Y+5	; 0x05
    3c3e:	ee 24       	eor	r14, r14
    3c40:	ff 24       	eor	r15, r15
    3c42:	f3 94       	inc	r15
    3c44:	00 e0       	ldi	r16, 0x00	; 0
    3c46:	11 e0       	ldi	r17, 0x01	; 1
    3c48:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	51 e0       	ldi	r21, 0x01	; 1
    3c50:	70 e0       	ldi	r23, 0x00	; 0
    3c52:	0e 94 c7 29 	call	0x538e	; 0x538e <hal_configureDmaChannel>
    3c56:	d4 01       	movw	r26, r8
    3c58:	5b 96       	adiw	r26, 0x1b	; 27
    3c5a:	8d 91       	ld	r24, X+
    3c5c:	9c 91       	ld	r25, X
    3c5e:	5c 97       	sbiw	r26, 0x1c	; 28
    3c60:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <hal_dmaEnableChannel>
    3c64:	06 c0       	rjmp	.+12     	; 0x3c72 <hal_uartReadBlock+0x108>
    3c66:	01 84       	ldd	r0, Z+9	; 0x09
    3c68:	f2 85       	ldd	r31, Z+10	; 0x0a
    3c6a:	e0 2d       	mov	r30, r0
    3c6c:	83 81       	ldd	r24, Z+3	; 0x03
    3c6e:	80 63       	ori	r24, 0x30	; 48
    3c70:	83 83       	std	Z+3, r24	; 0x03
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	61 96       	adiw	r28, 0x11	; 17
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	08 95       	ret

00003c94 <hal_uartWriteBlock>:
    3c94:	8f 92       	push	r8
    3c96:	9f 92       	push	r9
    3c98:	af 92       	push	r10
    3c9a:	bf 92       	push	r11
    3c9c:	cf 92       	push	r12
    3c9e:	df 92       	push	r13
    3ca0:	ef 92       	push	r14
    3ca2:	ff 92       	push	r15
    3ca4:	0f 93       	push	r16
    3ca6:	1f 93       	push	r17
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	61 97       	sbiw	r28, 0x11	; 17
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	88 8b       	std	Y+16, r24	; 0x10
    3cb8:	99 8b       	std	Y+17, r25	; 0x11
    3cba:	db 01       	movw	r26, r22
    3cbc:	8f b7       	in	r24, 0x3f	; 63
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	f8 94       	cli
    3cc2:	e8 89       	ldd	r30, Y+16	; 0x10
    3cc4:	f9 89       	ldd	r31, Y+17	; 0x11
    3cc6:	80 91 d9 20 	lds	r24, 0x20D9
    3cca:	90 91 da 20 	lds	r25, 0x20DA
    3cce:	24 81       	ldd	r18, Z+4	; 0x04
    3cd0:	35 81       	ldd	r19, Z+5	; 0x05
    3cd2:	28 17       	cp	r18, r24
    3cd4:	39 07       	cpc	r19, r25
    3cd6:	21 f0       	breq	.+8      	; 0x3ce0 <hal_uartWriteBlock+0x4c>
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	8f bf       	out	0x3f, r24	; 63
    3cdc:	8e ef       	ldi	r24, 0xFE	; 254
    3cde:	a1 c0       	rjmp	.+322    	; 0x3e22 <hal_uartWriteBlock+0x18e>
    3ce0:	e8 89       	ldd	r30, Y+16	; 0x10
    3ce2:	f9 89       	ldd	r31, Y+17	; 0x11
    3ce4:	80 80       	ld	r8, Z
    3ce6:	91 80       	ldd	r9, Z+1	; 0x01
    3ce8:	f4 01       	movw	r30, r8
    3cea:	83 85       	ldd	r24, Z+11	; 0x0b
    3cec:	88 23       	and	r24, r24
    3cee:	21 f0       	breq	.+8      	; 0x3cf8 <hal_uartWriteBlock+0x64>
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	8f bf       	out	0x3f, r24	; 63
    3cf4:	81 ef       	ldi	r24, 0xF1	; 241
    3cf6:	95 c0       	rjmp	.+298    	; 0x3e22 <hal_uartWriteBlock+0x18e>
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	f4 01       	movw	r30, r8
    3cfc:	83 87       	std	Z+11, r24	; 0x0b
    3cfe:	21 85       	ldd	r18, Z+9	; 0x09
    3d00:	32 85       	ldd	r19, Z+10	; 0x0a
    3d02:	f9 01       	movw	r30, r18
    3d04:	83 81       	ldd	r24, Z+3	; 0x03
    3d06:	8c 7f       	andi	r24, 0xFC	; 252
    3d08:	83 83       	std	Z+3, r24	; 0x03
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	8f bf       	out	0x3f, r24	; 63
    3d0e:	f4 01       	movw	r30, r8
    3d10:	65 87       	std	Z+13, r22	; 0x0d
    3d12:	76 87       	std	Z+14, r23	; 0x0e
    3d14:	41 8b       	std	Z+17, r20	; 0x11
    3d16:	52 8b       	std	Z+18, r21	; 0x12
    3d18:	15 8a       	std	Z+21, r1	; 0x15
    3d1a:	16 8a       	std	Z+22, r1	; 0x16
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	07 fe       	sbrs	r0, 7
    3d20:	1b c0       	rjmp	.+54     	; 0x3d58 <hal_uartWriteBlock+0xc4>
    3d22:	80 91 a0 00 	lds	r24, 0x00A0
    3d26:	81 30       	cpi	r24, 0x01	; 1
    3d28:	b9 f0       	breq	.+46     	; 0x3d58 <hal_uartWriteBlock+0xc4>
    3d2a:	87 8d       	ldd	r24, Z+31	; 0x1f
    3d2c:	90 a1       	lds	r25, 0x40
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	91 f5       	brne	.+100    	; 0x3d96 <hal_uartWriteBlock+0x102>
    3d32:	12 c0       	rjmp	.+36     	; 0x3d58 <hal_uartWriteBlock+0xc4>
    3d34:	da 01       	movw	r26, r20
    3d36:	11 96       	adiw	r26, 0x01	; 1
    3d38:	2c 91       	ld	r18, X
    3d3a:	11 97       	sbiw	r26, 0x01	; 1
    3d3c:	25 ff       	sbrs	r18, 5
    3d3e:	fa cf       	rjmp	.-12     	; 0x3d34 <hal_uartWriteBlock+0xa0>
    3d40:	d4 01       	movw	r26, r8
    3d42:	1d 96       	adiw	r26, 0x0d	; 13
    3d44:	ed 91       	ld	r30, X+
    3d46:	fc 91       	ld	r31, X
    3d48:	1e 97       	sbiw	r26, 0x0e	; 14
    3d4a:	e8 0f       	add	r30, r24
    3d4c:	f9 1f       	adc	r31, r25
    3d4e:	20 81       	ld	r18, Z
    3d50:	fa 01       	movw	r30, r20
    3d52:	20 83       	st	Z, r18
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	02 c0       	rjmp	.+4      	; 0x3d5c <hal_uartWriteBlock+0xc8>
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	d4 01       	movw	r26, r8
    3d5e:	51 96       	adiw	r26, 0x11	; 17
    3d60:	2d 91       	ld	r18, X+
    3d62:	3c 91       	ld	r19, X
    3d64:	52 97       	sbiw	r26, 0x12	; 18
    3d66:	82 17       	cp	r24, r18
    3d68:	93 07       	cpc	r25, r19
    3d6a:	28 f4       	brcc	.+10     	; 0x3d76 <hal_uartWriteBlock+0xe2>
    3d6c:	19 96       	adiw	r26, 0x09	; 9
    3d6e:	4d 91       	ld	r20, X+
    3d70:	5c 91       	ld	r21, X
    3d72:	1a 97       	sbiw	r26, 0x0a	; 10
    3d74:	df cf       	rjmp	.-66     	; 0x3d34 <hal_uartWriteBlock+0xa0>
    3d76:	d4 01       	movw	r26, r8
    3d78:	5f 96       	adiw	r26, 0x1f	; 31
    3d7a:	ed 91       	ld	r30, X+
    3d7c:	fc 91       	ld	r31, X
    3d7e:	90 97       	sbiw	r26, 0x20	; 32
    3d80:	30 97       	sbiw	r30, 0x00	; 0
    3d82:	11 f0       	breq	.+4      	; 0x3d88 <hal_uartWriteBlock+0xf4>
    3d84:	c9 01       	movw	r24, r18
    3d86:	19 95       	eicall
    3d88:	f4 01       	movw	r30, r8
    3d8a:	11 8a       	std	Z+17, r1	; 0x11
    3d8c:	12 8a       	std	Z+18, r1	; 0x12
    3d8e:	15 86       	std	Z+13, r1	; 0x0d
    3d90:	16 86       	std	Z+14, r1	; 0x0e
    3d92:	13 86       	std	Z+11, r1	; 0x0b
    3d94:	45 c0       	rjmp	.+138    	; 0x3e20 <hal_uartWriteBlock+0x18c>
    3d96:	f4 01       	movw	r30, r8
    3d98:	81 8d       	ldd	r24, Z+25	; 0x19
    3d9a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d9c:	18 16       	cp	r1, r24
    3d9e:	19 06       	cpc	r1, r25
    3da0:	cc f5       	brge	.+114    	; 0x3e14 <hal_uartWriteBlock+0x180>
    3da2:	80 81       	ld	r24, Z
    3da4:	83 50       	subi	r24, 0x03	; 3
    3da6:	83 31       	cpi	r24, 0x13	; 19
    3da8:	30 f4       	brcc	.+12     	; 0x3db6 <hal_uartWriteBlock+0x122>
    3daa:	e8 2f       	mov	r30, r24
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	e6 50       	subi	r30, 0x06	; 6
    3db0:	ff 4d       	sbci	r31, 0xDF	; 223
    3db2:	60 81       	ld	r22, Z
    3db4:	01 c0       	rjmp	.+2      	; 0x3db8 <hal_uartWriteBlock+0x124>
    3db6:	6c e4       	ldi	r22, 0x4C	; 76
    3db8:	aa 83       	std	Y+2, r26	; 0x02
    3dba:	bb 83       	std	Y+3, r27	; 0x03
    3dbc:	d4 01       	movw	r26, r8
    3dbe:	19 96       	adiw	r26, 0x09	; 9
    3dc0:	cc 90       	ld	r12, X
    3dc2:	19 97       	sbiw	r26, 0x09	; 9
    3dc4:	1a 96       	adiw	r26, 0x0a	; 10
    3dc6:	dc 90       	ld	r13, X
    3dc8:	1a 97       	sbiw	r26, 0x0a	; 10
    3dca:	cc 82       	std	Y+4, r12	; 0x04
    3dcc:	dd 82       	std	Y+5, r13	; 0x05
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	8e 83       	std	Y+6, r24	; 0x06
    3dd2:	1f 82       	std	Y+7, r1	; 0x07
    3dd4:	88 87       	std	Y+8, r24	; 0x08
    3dd6:	19 86       	std	Y+9, r1	; 0x09
    3dd8:	4a 87       	std	Y+10, r20	; 0x0a
    3dda:	5b 87       	std	Y+11, r21	; 0x0b
    3ddc:	1c 86       	std	Y+12, r1	; 0x0c
    3dde:	8d 87       	std	Y+13, r24	; 0x0d
    3de0:	6e 87       	std	Y+14, r22	; 0x0e
    3de2:	1f 86       	std	Y+15, r1	; 0x0f
    3de4:	59 96       	adiw	r26, 0x19	; 25
    3de6:	8d 91       	ld	r24, X+
    3de8:	9c 91       	ld	r25, X
    3dea:	5a 97       	sbiw	r26, 0x1a	; 26
    3dec:	aa 80       	ldd	r10, Y+2	; 0x02
    3dee:	bb 80       	ldd	r11, Y+3	; 0x03
    3df0:	ee 24       	eor	r14, r14
    3df2:	e3 94       	inc	r14
    3df4:	ff 24       	eor	r15, r15
    3df6:	01 e0       	ldi	r16, 0x01	; 1
    3df8:	10 e0       	ldi	r17, 0x00	; 0
    3dfa:	2a 85       	ldd	r18, Y+10	; 0x0a
    3dfc:	3b 85       	ldd	r19, Y+11	; 0x0b
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	51 e0       	ldi	r21, 0x01	; 1
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	0e 94 c7 29 	call	0x538e	; 0x538e <hal_configureDmaChannel>
    3e08:	f4 01       	movw	r30, r8
    3e0a:	81 8d       	ldd	r24, Z+25	; 0x19
    3e0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    3e0e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <hal_dmaEnableChannel>
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <hal_uartWriteBlock+0x18c>
    3e14:	01 84       	ldd	r0, Z+9	; 0x09
    3e16:	f2 85       	ldd	r31, Z+10	; 0x0a
    3e18:	e0 2d       	mov	r30, r0
    3e1a:	83 81       	ldd	r24, Z+3	; 0x03
    3e1c:	83 60       	ori	r24, 0x03	; 3
    3e1e:	83 83       	std	Z+3, r24	; 0x03
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	61 96       	adiw	r28, 0x11	; 17
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	ff 90       	pop	r15
    3e32:	ef 90       	pop	r14
    3e34:	df 90       	pop	r13
    3e36:	cf 90       	pop	r12
    3e38:	bf 90       	pop	r11
    3e3a:	af 90       	pop	r10
    3e3c:	9f 90       	pop	r9
    3e3e:	8f 90       	pop	r8
    3e40:	08 95       	ret

00003e42 <hal_uartGetBaudRate>:
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <hal_uartGetBaudRate+0xa>
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	8a 83       	std	Y+2, r24	; 0x02
    3e52:	9b 83       	std	Y+3, r25	; 0x03
    3e54:	8f b7       	in	r24, 0x3f	; 63
    3e56:	89 83       	std	Y+1, r24	; 0x01
    3e58:	f8 94       	cli
    3e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e5e:	80 91 d9 20 	lds	r24, 0x20D9
    3e62:	90 91 da 20 	lds	r25, 0x20DA
    3e66:	24 81       	ldd	r18, Z+4	; 0x04
    3e68:	35 81       	ldd	r19, Z+5	; 0x05
    3e6a:	28 17       	cp	r18, r24
    3e6c:	39 07       	cpc	r19, r25
    3e6e:	39 f0       	breq	.+14     	; 0x3e7e <hal_uartGetBaudRate+0x3c>
    3e70:	89 81       	ldd	r24, Y+1	; 0x01
    3e72:	8f bf       	out	0x3f, r24	; 63
    3e74:	0e ef       	ldi	r16, 0xFE	; 254
    3e76:	1f ef       	ldi	r17, 0xFF	; 255
    3e78:	2f ef       	ldi	r18, 0xFF	; 255
    3e7a:	3f ef       	ldi	r19, 0xFF	; 255
    3e7c:	0b c0       	rjmp	.+22     	; 0x3e94 <hal_uartGetBaudRate+0x52>
    3e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e80:	fb 81       	ldd	r31, Y+3	; 0x03
    3e82:	01 90       	ld	r0, Z+
    3e84:	f0 81       	ld	r31, Z
    3e86:	e0 2d       	mov	r30, r0
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	8f bf       	out	0x3f, r24	; 63
    3e8c:	01 81       	ldd	r16, Z+1	; 0x01
    3e8e:	12 81       	ldd	r17, Z+2	; 0x02
    3e90:	23 81       	ldd	r18, Z+3	; 0x03
    3e92:	34 81       	ldd	r19, Z+4	; 0x04
    3e94:	b8 01       	movw	r22, r16
    3e96:	c9 01       	movw	r24, r18
    3e98:	23 96       	adiw	r28, 0x03	; 3
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	08 95       	ret

00003ea8 <hal_uartGetDataAddress>:
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <hal_uartGetDataAddress+0xa>
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	8a 83       	std	Y+2, r24	; 0x02
    3eb8:	9b 83       	std	Y+3, r25	; 0x03
    3eba:	8f b7       	in	r24, 0x3f	; 63
    3ebc:	89 83       	std	Y+1, r24	; 0x01
    3ebe:	f8 94       	cli
    3ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec4:	80 91 d9 20 	lds	r24, 0x20D9
    3ec8:	90 91 da 20 	lds	r25, 0x20DA
    3ecc:	24 81       	ldd	r18, Z+4	; 0x04
    3ece:	35 81       	ldd	r19, Z+5	; 0x05
    3ed0:	28 17       	cp	r18, r24
    3ed2:	39 07       	cpc	r19, r25
    3ed4:	39 f0       	breq	.+14     	; 0x3ee4 <hal_uartGetDataAddress+0x3c>
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	8f bf       	out	0x3f, r24	; 63
    3eda:	0e ef       	ldi	r16, 0xFE	; 254
    3edc:	1f ef       	ldi	r17, 0xFF	; 255
    3ede:	2f ef       	ldi	r18, 0xFF	; 255
    3ee0:	3f ef       	ldi	r19, 0xFF	; 255
    3ee2:	0d c0       	rjmp	.+26     	; 0x3efe <hal_uartGetDataAddress+0x56>
    3ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ee8:	01 90       	ld	r0, Z+
    3eea:	f0 81       	ld	r31, Z
    3eec:	e0 2d       	mov	r30, r0
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	8f bf       	out	0x3f, r24	; 63
    3ef2:	01 85       	ldd	r16, Z+9	; 0x09
    3ef4:	12 85       	ldd	r17, Z+10	; 0x0a
    3ef6:	22 27       	eor	r18, r18
    3ef8:	17 fd       	sbrc	r17, 7
    3efa:	20 95       	com	r18
    3efc:	32 2f       	mov	r19, r18
    3efe:	b8 01       	movw	r22, r16
    3f00:	c9 01       	movw	r24, r18
    3f02:	23 96       	adiw	r28, 0x03	; 3
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	1f 91       	pop	r17
    3f0e:	0f 91       	pop	r16
    3f10:	08 95       	ret

00003f12 <hal_requestUartChannel>:
    3f12:	0f 93       	push	r16
    3f14:	1f 93       	push	r17
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	2b 97       	sbiw	r28, 0x0b	; 11
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	28 2f       	mov	r18, r24
    3f26:	8f b7       	in	r24, 0x3f	; 63
    3f28:	89 83       	std	Y+1, r24	; 0x01
    3f2a:	f8 94       	cli
    3f2c:	26 31       	cpi	r18, 0x16	; 22
    3f2e:	28 f0       	brcs	.+10     	; 0x3f3a <hal_requestUartChannel+0x28>
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	8f bf       	out	0x3f, r24	; 63
    3f34:	82 ef       	ldi	r24, 0xF2	; 242
    3f36:	9f ef       	ldi	r25, 0xFF	; 255
    3f38:	49 c1       	rjmp	.+658    	; 0x41cc <__stack+0x1cd>
    3f3a:	e0 91 d9 20 	lds	r30, 0x20D9
    3f3e:	f0 91 da 20 	lds	r31, 0x20DA
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	e0 91 d9 20 	lds	r30, 0x20D9
    3f4a:	f0 91 da 20 	lds	r31, 0x20DA
    3f4e:	0b c0       	rjmp	.+22     	; 0x3f66 <hal_requestUartChannel+0x54>
    3f50:	ea 81       	ldd	r30, Y+2	; 0x02
    3f52:	fb 81       	ldd	r31, Y+3	; 0x03
    3f54:	01 90       	ld	r0, Z+
    3f56:	f0 81       	ld	r31, Z
    3f58:	e0 2d       	mov	r30, r0
    3f5a:	30 81       	ld	r19, Z
    3f5c:	32 17       	cp	r19, r18
    3f5e:	59 f0       	breq	.+22     	; 0x3f76 <hal_requestUartChannel+0x64>
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	ea 81       	ldd	r30, Y+2	; 0x02
    3f64:	fb 81       	ldd	r31, Y+3	; 0x03
    3f66:	40 85       	ldd	r20, Z+8	; 0x08
    3f68:	51 85       	ldd	r21, Z+9	; 0x09
    3f6a:	4a 83       	std	Y+2, r20	; 0x02
    3f6c:	5b 83       	std	Y+3, r21	; 0x03
    3f6e:	18 16       	cp	r1, r24
    3f70:	19 06       	cpc	r1, r25
    3f72:	74 f3       	brlt	.-36     	; 0x3f50 <hal_requestUartChannel+0x3e>
    3f74:	03 c0       	rjmp	.+6      	; 0x3f7c <hal_requestUartChannel+0x6a>
    3f76:	30 97       	sbiw	r30, 0x00	; 0
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <hal_requestUartChannel+0x6a>
    3f7a:	1f c1       	rjmp	.+574    	; 0x41ba <__stack+0x1bb>
    3f7c:	81 e2       	ldi	r24, 0x21	; 33
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	2b 87       	std	Y+11, r18	; 0x0b
    3f82:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    3f86:	8a 83       	std	Y+2, r24	; 0x02
    3f88:	9b 83       	std	Y+3, r25	; 0x03
    3f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f90:	97 fd       	sbrc	r25, 7
    3f92:	0d c0       	rjmp	.+26     	; 0x3fae <hal_requestUartChannel+0x9c>
    3f94:	80 91 d9 20 	lds	r24, 0x20D9
    3f98:	90 91 da 20 	lds	r25, 0x20DA
    3f9c:	6a 81       	ldd	r22, Y+2	; 0x02
    3f9e:	7b 81       	ldd	r23, Y+3	; 0x03
    3fa0:	41 e0       	ldi	r20, 0x01	; 1
    3fa2:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    3faa:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <hal_requestUartChannel+0xa0>
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	9f ef       	ldi	r25, 0xFF	; 255
    3fb2:	8c 83       	std	Y+4, r24	; 0x04
    3fb4:	9d 83       	std	Y+5, r25	; 0x05
    3fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3fba:	97 ff       	sbrs	r25, 7
    3fbc:	05 c0       	rjmp	.+10     	; 0x3fc8 <hal_requestUartChannel+0xb6>
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	8f bf       	out	0x3f, r24	; 63
    3fc2:	8f ef       	ldi	r24, 0xFF	; 255
    3fc4:	9f ef       	ldi	r25, 0xFF	; 255
    3fc6:	02 c1       	rjmp	.+516    	; 0x41cc <__stack+0x1cd>
    3fc8:	ec 81       	ldd	r30, Y+4	; 0x04
    3fca:	fd 81       	ldd	r31, Y+5	; 0x05
    3fcc:	00 81       	ld	r16, Z
    3fce:	11 81       	ldd	r17, Z+1	; 0x01
    3fd0:	f8 01       	movw	r30, r16
    3fd2:	20 83       	st	Z, r18
    3fd4:	11 82       	std	Z+1, r1	; 0x01
    3fd6:	12 82       	std	Z+2, r1	; 0x02
    3fd8:	13 82       	std	Z+3, r1	; 0x03
    3fda:	14 82       	std	Z+4, r1	; 0x04
    3fdc:	29 30       	cpi	r18, 0x09	; 9
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <hal_requestUartChannel+0xd0>
    3fe0:	68 c0       	rjmp	.+208    	; 0x40b2 <__stack+0xb3>
    3fe2:	2a 30       	cpi	r18, 0x0A	; 10
    3fe4:	40 f4       	brcc	.+16     	; 0x3ff6 <hal_requestUartChannel+0xe4>
    3fe6:	23 30       	cpi	r18, 0x03	; 3
    3fe8:	81 f1       	breq	.+96     	; 0x404a <__stack+0x4b>
    3fea:	26 30       	cpi	r18, 0x06	; 6
    3fec:	09 f4       	brne	.+2      	; 0x3ff0 <hal_requestUartChannel+0xde>
    3fee:	47 c0       	rjmp	.+142    	; 0x407e <__stack+0x7f>
    3ff0:	22 23       	and	r18, r18
    3ff2:	89 f0       	breq	.+34     	; 0x4016 <__stack+0x17>
    3ff4:	e7 c0       	rjmp	.+462    	; 0x41c4 <__stack+0x1c5>
    3ff6:	2f 30       	cpi	r18, 0x0F	; 15
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <hal_requestUartChannel+0xea>
    3ffa:	90 c0       	rjmp	.+288    	; 0x411c <__stack+0x11d>
    3ffc:	20 31       	cpi	r18, 0x10	; 16
    3ffe:	20 f4       	brcc	.+8      	; 0x4008 <__stack+0x9>
    4000:	2c 30       	cpi	r18, 0x0C	; 12
    4002:	09 f0       	breq	.+2      	; 0x4006 <__stack+0x7>
    4004:	df c0       	rjmp	.+446    	; 0x41c4 <__stack+0x1c5>
    4006:	6f c0       	rjmp	.+222    	; 0x40e6 <__stack+0xe7>
    4008:	22 31       	cpi	r18, 0x12	; 18
    400a:	09 f4       	brne	.+2      	; 0x400e <__stack+0xf>
    400c:	a2 c0       	rjmp	.+324    	; 0x4152 <__stack+0x153>
    400e:	25 31       	cpi	r18, 0x15	; 21
    4010:	09 f0       	breq	.+2      	; 0x4014 <__stack+0x15>
    4012:	d8 c0       	rjmp	.+432    	; 0x41c4 <__stack+0x1c5>
    4014:	b8 c0       	rjmp	.+368    	; 0x4186 <__stack+0x187>
    4016:	80 ea       	ldi	r24, 0xA0	; 160
    4018:	98 e0       	ldi	r25, 0x08	; 8
    401a:	f8 01       	movw	r30, r16
    401c:	81 87       	std	Z+9, r24	; 0x09
    401e:	92 87       	std	Z+10, r25	; 0x0a
    4020:	84 e0       	ldi	r24, 0x04	; 4
    4022:	8e 83       	std	Y+6, r24	; 0x06
    4024:	88 e0       	ldi	r24, 0x08	; 8
    4026:	8f 83       	std	Y+7, r24	; 0x07
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	88 87       	std	Y+8, r24	; 0x08
    402c:	19 86       	std	Y+9, r1	; 0x09
    402e:	1a 86       	std	Y+10, r1	; 0x0a
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	24 e0       	ldi	r18, 0x04	; 4
    4034:	38 e0       	ldi	r19, 0x08	; 8
    4036:	41 e0       	ldi	r20, 0x01	; 1
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    4040:	00 93 91 2b 	sts	0x2B91, r16
    4044:	10 93 92 2b 	sts	0x2B92, r17
    4048:	bd c0       	rjmp	.+378    	; 0x41c4 <__stack+0x1c5>
    404a:	80 eb       	ldi	r24, 0xB0	; 176
    404c:	98 e0       	ldi	r25, 0x08	; 8
    404e:	f8 01       	movw	r30, r16
    4050:	81 87       	std	Z+9, r24	; 0x09
    4052:	92 87       	std	Z+10, r25	; 0x0a
    4054:	80 e4       	ldi	r24, 0x40	; 64
    4056:	8e 83       	std	Y+6, r24	; 0x06
    4058:	80 e8       	ldi	r24, 0x80	; 128
    405a:	8f 83       	std	Y+7, r24	; 0x07
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	88 87       	std	Y+8, r24	; 0x08
    4060:	19 86       	std	Y+9, r1	; 0x09
    4062:	1a 86       	std	Y+10, r1	; 0x0a
    4064:	82 e0       	ldi	r24, 0x02	; 2
    4066:	20 e4       	ldi	r18, 0x40	; 64
    4068:	30 e8       	ldi	r19, 0x80	; 128
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    4074:	00 93 93 2b 	sts	0x2B93, r16
    4078:	10 93 94 2b 	sts	0x2B94, r17
    407c:	a3 c0       	rjmp	.+326    	; 0x41c4 <__stack+0x1c5>
    407e:	80 ea       	ldi	r24, 0xA0	; 160
    4080:	99 e0       	ldi	r25, 0x09	; 9
    4082:	f8 01       	movw	r30, r16
    4084:	81 87       	std	Z+9, r24	; 0x09
    4086:	92 87       	std	Z+10, r25	; 0x0a
    4088:	84 e0       	ldi	r24, 0x04	; 4
    408a:	8e 83       	std	Y+6, r24	; 0x06
    408c:	88 e0       	ldi	r24, 0x08	; 8
    408e:	8f 83       	std	Y+7, r24	; 0x07
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	88 87       	std	Y+8, r24	; 0x08
    4094:	19 86       	std	Y+9, r1	; 0x09
    4096:	1a 86       	std	Y+10, r1	; 0x0a
    4098:	83 e0       	ldi	r24, 0x03	; 3
    409a:	24 e0       	ldi	r18, 0x04	; 4
    409c:	38 e0       	ldi	r19, 0x08	; 8
    409e:	41 e0       	ldi	r20, 0x01	; 1
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    40a8:	00 93 95 2b 	sts	0x2B95, r16
    40ac:	10 93 96 2b 	sts	0x2B96, r17
    40b0:	89 c0       	rjmp	.+274    	; 0x41c4 <__stack+0x1c5>
    40b2:	80 eb       	ldi	r24, 0xB0	; 176
    40b4:	99 e0       	ldi	r25, 0x09	; 9
    40b6:	f8 01       	movw	r30, r16
    40b8:	81 87       	std	Z+9, r24	; 0x09
    40ba:	92 87       	std	Z+10, r25	; 0x0a
    40bc:	80 e4       	ldi	r24, 0x40	; 64
    40be:	8e 83       	std	Y+6, r24	; 0x06
    40c0:	80 e8       	ldi	r24, 0x80	; 128
    40c2:	8f 83       	std	Y+7, r24	; 0x07
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	88 87       	std	Y+8, r24	; 0x08
    40c8:	19 86       	std	Y+9, r1	; 0x09
    40ca:	1a 86       	std	Y+10, r1	; 0x0a
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	20 e4       	ldi	r18, 0x40	; 64
    40d0:	30 e8       	ldi	r19, 0x80	; 128
    40d2:	41 e0       	ldi	r20, 0x01	; 1
    40d4:	50 e0       	ldi	r21, 0x00	; 0
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    40dc:	00 93 97 2b 	sts	0x2B97, r16
    40e0:	10 93 98 2b 	sts	0x2B98, r17
    40e4:	6f c0       	rjmp	.+222    	; 0x41c4 <__stack+0x1c5>
    40e6:	80 ea       	ldi	r24, 0xA0	; 160
    40e8:	9a e0       	ldi	r25, 0x0A	; 10
    40ea:	f8 01       	movw	r30, r16
    40ec:	81 87       	std	Z+9, r24	; 0x09
    40ee:	92 87       	std	Z+10, r25	; 0x0a
    40f0:	84 e0       	ldi	r24, 0x04	; 4
    40f2:	8e 83       	std	Y+6, r24	; 0x06
    40f4:	88 e0       	ldi	r24, 0x08	; 8
    40f6:	8f 83       	std	Y+7, r24	; 0x07
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	88 87       	std	Y+8, r24	; 0x08
    40fc:	85 e0       	ldi	r24, 0x05	; 5
    40fe:	89 87       	std	Y+9, r24	; 0x09
    4100:	1a 86       	std	Y+10, r1	; 0x0a
    4102:	84 e0       	ldi	r24, 0x04	; 4
    4104:	24 e0       	ldi	r18, 0x04	; 4
    4106:	38 e0       	ldi	r19, 0x08	; 8
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	55 e0       	ldi	r21, 0x05	; 5
    410c:	60 e0       	ldi	r22, 0x00	; 0
    410e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    4112:	00 93 99 2b 	sts	0x2B99, r16
    4116:	10 93 9a 2b 	sts	0x2B9A, r17
    411a:	54 c0       	rjmp	.+168    	; 0x41c4 <__stack+0x1c5>
    411c:	80 eb       	ldi	r24, 0xB0	; 176
    411e:	9a e0       	ldi	r25, 0x0A	; 10
    4120:	f8 01       	movw	r30, r16
    4122:	81 87       	std	Z+9, r24	; 0x09
    4124:	92 87       	std	Z+10, r25	; 0x0a
    4126:	80 e4       	ldi	r24, 0x40	; 64
    4128:	8e 83       	std	Y+6, r24	; 0x06
    412a:	80 e8       	ldi	r24, 0x80	; 128
    412c:	8f 83       	std	Y+7, r24	; 0x07
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	88 87       	std	Y+8, r24	; 0x08
    4132:	85 e0       	ldi	r24, 0x05	; 5
    4134:	89 87       	std	Y+9, r24	; 0x09
    4136:	1a 86       	std	Y+10, r1	; 0x0a
    4138:	84 e0       	ldi	r24, 0x04	; 4
    413a:	20 e4       	ldi	r18, 0x40	; 64
    413c:	30 e8       	ldi	r19, 0x80	; 128
    413e:	41 e0       	ldi	r20, 0x01	; 1
    4140:	55 e0       	ldi	r21, 0x05	; 5
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    4148:	00 93 9b 2b 	sts	0x2B9B, r16
    414c:	10 93 9c 2b 	sts	0x2B9C, r17
    4150:	39 c0       	rjmp	.+114    	; 0x41c4 <__stack+0x1c5>
    4152:	80 ea       	ldi	r24, 0xA0	; 160
    4154:	9b e0       	ldi	r25, 0x0B	; 11
    4156:	f8 01       	movw	r30, r16
    4158:	81 87       	std	Z+9, r24	; 0x09
    415a:	92 87       	std	Z+10, r25	; 0x0a
    415c:	84 e0       	ldi	r24, 0x04	; 4
    415e:	8e 83       	std	Y+6, r24	; 0x06
    4160:	88 e0       	ldi	r24, 0x08	; 8
    4162:	8f 83       	std	Y+7, r24	; 0x07
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	88 87       	std	Y+8, r24	; 0x08
    4168:	85 e0       	ldi	r24, 0x05	; 5
    416a:	89 87       	std	Y+9, r24	; 0x09
    416c:	1a 86       	std	Y+10, r1	; 0x0a
    416e:	24 e0       	ldi	r18, 0x04	; 4
    4170:	38 e0       	ldi	r19, 0x08	; 8
    4172:	41 e0       	ldi	r20, 0x01	; 1
    4174:	55 e0       	ldi	r21, 0x05	; 5
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    417c:	00 93 9d 2b 	sts	0x2B9D, r16
    4180:	10 93 9e 2b 	sts	0x2B9E, r17
    4184:	1f c0       	rjmp	.+62     	; 0x41c4 <__stack+0x1c5>
    4186:	80 eb       	ldi	r24, 0xB0	; 176
    4188:	9b e0       	ldi	r25, 0x0B	; 11
    418a:	f8 01       	movw	r30, r16
    418c:	81 87       	std	Z+9, r24	; 0x09
    418e:	92 87       	std	Z+10, r25	; 0x0a
    4190:	80 e4       	ldi	r24, 0x40	; 64
    4192:	8e 83       	std	Y+6, r24	; 0x06
    4194:	80 e8       	ldi	r24, 0x80	; 128
    4196:	8f 83       	std	Y+7, r24	; 0x07
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	88 87       	std	Y+8, r24	; 0x08
    419c:	85 e0       	ldi	r24, 0x05	; 5
    419e:	89 87       	std	Y+9, r24	; 0x09
    41a0:	1a 86       	std	Y+10, r1	; 0x0a
    41a2:	20 e4       	ldi	r18, 0x40	; 64
    41a4:	30 e8       	ldi	r19, 0x80	; 128
    41a6:	41 e0       	ldi	r20, 0x01	; 1
    41a8:	55 e0       	ldi	r21, 0x05	; 5
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    41b0:	00 93 9f 2b 	sts	0x2B9F, r16
    41b4:	10 93 a0 2b 	sts	0x2BA0, r17
    41b8:	05 c0       	rjmp	.+10     	; 0x41c4 <__stack+0x1c5>
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	8f bf       	out	0x3f, r24	; 63
    41be:	89 ef       	ldi	r24, 0xF9	; 249
    41c0:	9f ef       	ldi	r25, 0xFF	; 255
    41c2:	04 c0       	rjmp	.+8      	; 0x41cc <__stack+0x1cd>
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	8f bf       	out	0x3f, r24	; 63
    41c8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ca:	9d 81       	ldd	r25, Y+5	; 0x05
    41cc:	2b 96       	adiw	r28, 0x0b	; 11
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	08 95       	ret

000041dc <hal_releaseUartChannel>:
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	00 d0       	rcall	.+0      	; 0x41e2 <hal_releaseUartChannel+0x6>
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	8a 83       	std	Y+2, r24	; 0x02
    41e8:	9b 83       	std	Y+3, r25	; 0x03
    41ea:	8f b7       	in	r24, 0x3f	; 63
    41ec:	89 83       	std	Y+1, r24	; 0x01
    41ee:	f8 94       	cli
    41f0:	ea 81       	ldd	r30, Y+2	; 0x02
    41f2:	fb 81       	ldd	r31, Y+3	; 0x03
    41f4:	80 91 d9 20 	lds	r24, 0x20D9
    41f8:	90 91 da 20 	lds	r25, 0x20DA
    41fc:	24 81       	ldd	r18, Z+4	; 0x04
    41fe:	35 81       	ldd	r19, Z+5	; 0x05
    4200:	28 17       	cp	r18, r24
    4202:	39 07       	cpc	r19, r25
    4204:	21 f0       	breq	.+8      	; 0x420e <hal_releaseUartChannel+0x32>
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	8f bf       	out	0x3f, r24	; 63
    420a:	8e ef       	ldi	r24, 0xFE	; 254
    420c:	c7 c0       	rjmp	.+398    	; 0x439c <hal_releaseUartChannel+0x1c0>
    420e:	ea 81       	ldd	r30, Y+2	; 0x02
    4210:	fb 81       	ldd	r31, Y+3	; 0x03
    4212:	01 90       	ld	r0, Z+
    4214:	f0 81       	ld	r31, Z
    4216:	e0 2d       	mov	r30, r0
    4218:	a1 85       	ldd	r26, Z+9	; 0x09
    421a:	b2 85       	ldd	r27, Z+10	; 0x0a
    421c:	13 96       	adiw	r26, 0x03	; 3
    421e:	8c 91       	ld	r24, X
    4220:	13 97       	sbiw	r26, 0x03	; 3
    4222:	8f 7c       	andi	r24, 0xCF	; 207
    4224:	13 96       	adiw	r26, 0x03	; 3
    4226:	8c 93       	st	X, r24
    4228:	a1 85       	ldd	r26, Z+9	; 0x09
    422a:	b2 85       	ldd	r27, Z+10	; 0x0a
    422c:	13 96       	adiw	r26, 0x03	; 3
    422e:	8c 91       	ld	r24, X
    4230:	13 97       	sbiw	r26, 0x03	; 3
    4232:	8c 7f       	andi	r24, 0xFC	; 252
    4234:	13 96       	adiw	r26, 0x03	; 3
    4236:	8c 93       	st	X, r24
    4238:	a1 85       	ldd	r26, Z+9	; 0x09
    423a:	b2 85       	ldd	r27, Z+10	; 0x0a
    423c:	13 96       	adiw	r26, 0x03	; 3
    423e:	8c 91       	ld	r24, X
    4240:	13 97       	sbiw	r26, 0x03	; 3
    4242:	83 7f       	andi	r24, 0xF3	; 243
    4244:	13 96       	adiw	r26, 0x03	; 3
    4246:	8c 93       	st	X, r24
    4248:	a1 85       	ldd	r26, Z+9	; 0x09
    424a:	b2 85       	ldd	r27, Z+10	; 0x0a
    424c:	13 96       	adiw	r26, 0x03	; 3
    424e:	8c 91       	ld	r24, X
    4250:	13 97       	sbiw	r26, 0x03	; 3
    4252:	8f 7c       	andi	r24, 0xCF	; 207
    4254:	13 96       	adiw	r26, 0x03	; 3
    4256:	8c 93       	st	X, r24
    4258:	a1 85       	ldd	r26, Z+9	; 0x09
    425a:	b2 85       	ldd	r27, Z+10	; 0x0a
    425c:	13 96       	adiw	r26, 0x03	; 3
    425e:	8c 91       	ld	r24, X
    4260:	13 97       	sbiw	r26, 0x03	; 3
    4262:	8c 7f       	andi	r24, 0xFC	; 252
    4264:	13 96       	adiw	r26, 0x03	; 3
    4266:	8c 93       	st	X, r24
    4268:	a1 85       	ldd	r26, Z+9	; 0x09
    426a:	b2 85       	ldd	r27, Z+10	; 0x0a
    426c:	13 96       	adiw	r26, 0x03	; 3
    426e:	8c 91       	ld	r24, X
    4270:	13 97       	sbiw	r26, 0x03	; 3
    4272:	83 7f       	andi	r24, 0xF3	; 243
    4274:	13 96       	adiw	r26, 0x03	; 3
    4276:	8c 93       	st	X, r24
    4278:	a1 85       	ldd	r26, Z+9	; 0x09
    427a:	b2 85       	ldd	r27, Z+10	; 0x0a
    427c:	14 96       	adiw	r26, 0x04	; 4
    427e:	8c 91       	ld	r24, X
    4280:	14 97       	sbiw	r26, 0x04	; 4
    4282:	8f 7e       	andi	r24, 0xEF	; 239
    4284:	14 96       	adiw	r26, 0x04	; 4
    4286:	8c 93       	st	X, r24
    4288:	a1 85       	ldd	r26, Z+9	; 0x09
    428a:	b2 85       	ldd	r27, Z+10	; 0x0a
    428c:	14 96       	adiw	r26, 0x04	; 4
    428e:	8c 91       	ld	r24, X
    4290:	14 97       	sbiw	r26, 0x04	; 4
    4292:	87 7f       	andi	r24, 0xF7	; 247
    4294:	14 96       	adiw	r26, 0x04	; 4
    4296:	8c 93       	st	X, r24
    4298:	a1 85       	ldd	r26, Z+9	; 0x09
    429a:	b2 85       	ldd	r27, Z+10	; 0x0a
    429c:	15 96       	adiw	r26, 0x05	; 5
    429e:	8c 91       	ld	r24, X
    42a0:	15 97       	sbiw	r26, 0x05	; 5
    42a2:	8f 73       	andi	r24, 0x3F	; 63
    42a4:	15 96       	adiw	r26, 0x05	; 5
    42a6:	8c 93       	st	X, r24
    42a8:	a1 85       	ldd	r26, Z+9	; 0x09
    42aa:	b2 85       	ldd	r27, Z+10	; 0x0a
    42ac:	15 96       	adiw	r26, 0x05	; 5
    42ae:	8c 91       	ld	r24, X
    42b0:	15 97       	sbiw	r26, 0x05	; 5
    42b2:	8f 7c       	andi	r24, 0xCF	; 207
    42b4:	15 96       	adiw	r26, 0x05	; 5
    42b6:	8c 93       	st	X, r24
    42b8:	a1 85       	ldd	r26, Z+9	; 0x09
    42ba:	b2 85       	ldd	r27, Z+10	; 0x0a
    42bc:	15 96       	adiw	r26, 0x05	; 5
    42be:	8c 91       	ld	r24, X
    42c0:	15 97       	sbiw	r26, 0x05	; 5
    42c2:	88 7f       	andi	r24, 0xF8	; 248
    42c4:	15 96       	adiw	r26, 0x05	; 5
    42c6:	8c 93       	st	X, r24
    42c8:	a1 85       	ldd	r26, Z+9	; 0x09
    42ca:	b2 85       	ldd	r27, Z+10	; 0x0a
    42cc:	15 96       	adiw	r26, 0x05	; 5
    42ce:	8c 91       	ld	r24, X
    42d0:	15 97       	sbiw	r26, 0x05	; 5
    42d2:	87 7f       	andi	r24, 0xF7	; 247
    42d4:	15 96       	adiw	r26, 0x05	; 5
    42d6:	8c 93       	st	X, r24
    42d8:	a1 85       	ldd	r26, Z+9	; 0x09
    42da:	b2 85       	ldd	r27, Z+10	; 0x0a
    42dc:	16 96       	adiw	r26, 0x06	; 6
    42de:	8c 91       	ld	r24, X
    42e0:	16 97       	sbiw	r26, 0x06	; 6
    42e2:	16 96       	adiw	r26, 0x06	; 6
    42e4:	1c 92       	st	X, r1
    42e6:	a1 85       	ldd	r26, Z+9	; 0x09
    42e8:	b2 85       	ldd	r27, Z+10	; 0x0a
    42ea:	17 96       	adiw	r26, 0x07	; 7
    42ec:	8c 91       	ld	r24, X
    42ee:	17 97       	sbiw	r26, 0x07	; 7
    42f0:	80 7f       	andi	r24, 0xF0	; 240
    42f2:	17 96       	adiw	r26, 0x07	; 7
    42f4:	8c 93       	st	X, r24
    42f6:	a1 85       	ldd	r26, Z+9	; 0x09
    42f8:	b2 85       	ldd	r27, Z+10	; 0x0a
    42fa:	17 96       	adiw	r26, 0x07	; 7
    42fc:	8c 91       	ld	r24, X
    42fe:	17 97       	sbiw	r26, 0x07	; 7
    4300:	8f 70       	andi	r24, 0x0F	; 15
    4302:	17 96       	adiw	r26, 0x07	; 7
    4304:	8c 93       	st	X, r24
    4306:	17 97       	sbiw	r26, 0x07	; 7
    4308:	80 81       	ld	r24, Z
    430a:	89 30       	cpi	r24, 0x09	; 9
    430c:	21 f1       	breq	.+72     	; 0x4356 <hal_releaseUartChannel+0x17a>
    430e:	8a 30       	cpi	r24, 0x0A	; 10
    4310:	38 f4       	brcc	.+14     	; 0x4320 <hal_releaseUartChannel+0x144>
    4312:	83 30       	cpi	r24, 0x03	; 3
    4314:	b1 f0       	breq	.+44     	; 0x4342 <hal_releaseUartChannel+0x166>
    4316:	86 30       	cpi	r24, 0x06	; 6
    4318:	c9 f0       	breq	.+50     	; 0x434c <hal_releaseUartChannel+0x170>
    431a:	88 23       	and	r24, r24
    431c:	69 f0       	breq	.+26     	; 0x4338 <hal_releaseUartChannel+0x15c>
    431e:	33 c0       	rjmp	.+102    	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4320:	8f 30       	cpi	r24, 0x0F	; 15
    4322:	19 f1       	breq	.+70     	; 0x436a <hal_releaseUartChannel+0x18e>
    4324:	80 31       	cpi	r24, 0x10	; 16
    4326:	18 f4       	brcc	.+6      	; 0x432e <hal_releaseUartChannel+0x152>
    4328:	8c 30       	cpi	r24, 0x0C	; 12
    432a:	69 f5       	brne	.+90     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    432c:	19 c0       	rjmp	.+50     	; 0x4360 <hal_releaseUartChannel+0x184>
    432e:	82 31       	cpi	r24, 0x12	; 18
    4330:	09 f1       	breq	.+66     	; 0x4374 <hal_releaseUartChannel+0x198>
    4332:	85 31       	cpi	r24, 0x15	; 21
    4334:	41 f5       	brne	.+80     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4336:	23 c0       	rjmp	.+70     	; 0x437e <hal_releaseUartChannel+0x1a2>
    4338:	10 92 91 2b 	sts	0x2B91, r1
    433c:	10 92 92 2b 	sts	0x2B92, r1
    4340:	22 c0       	rjmp	.+68     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4342:	10 92 93 2b 	sts	0x2B93, r1
    4346:	10 92 94 2b 	sts	0x2B94, r1
    434a:	1d c0       	rjmp	.+58     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    434c:	10 92 95 2b 	sts	0x2B95, r1
    4350:	10 92 96 2b 	sts	0x2B96, r1
    4354:	18 c0       	rjmp	.+48     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4356:	10 92 97 2b 	sts	0x2B97, r1
    435a:	10 92 98 2b 	sts	0x2B98, r1
    435e:	13 c0       	rjmp	.+38     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4360:	10 92 99 2b 	sts	0x2B99, r1
    4364:	10 92 9a 2b 	sts	0x2B9A, r1
    4368:	0e c0       	rjmp	.+28     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    436a:	10 92 9b 2b 	sts	0x2B9B, r1
    436e:	10 92 9c 2b 	sts	0x2B9C, r1
    4372:	09 c0       	rjmp	.+18     	; 0x4386 <hal_releaseUartChannel+0x1aa>
    4374:	10 92 9d 2b 	sts	0x2B9D, r1
    4378:	10 92 9e 2b 	sts	0x2B9E, r1
    437c:	04 c0       	rjmp	.+8      	; 0x4386 <hal_releaseUartChannel+0x1aa>
    437e:	10 92 9f 2b 	sts	0x2B9F, r1
    4382:	10 92 a0 2b 	sts	0x2BA0, r1
    4386:	80 91 d9 20 	lds	r24, 0x20D9
    438a:	90 91 da 20 	lds	r25, 0x20DA
    438e:	6a 81       	ldd	r22, Y+2	; 0x02
    4390:	7b 81       	ldd	r23, Y+3	; 0x03
    4392:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    4396:	89 81       	ldd	r24, Y+1	; 0x01
    4398:	8f bf       	out	0x3f, r24	; 63
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	23 96       	adiw	r28, 0x03	; 3
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	de bf       	out	0x3e, r29	; 62
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	08 95       	ret

000043a8 <hal_configureUartChannel>:
    43a8:	4f 92       	push	r4
    43aa:	5f 92       	push	r5
    43ac:	6f 92       	push	r6
    43ae:	7f 92       	push	r7
    43b0:	8f 92       	push	r8
    43b2:	9f 92       	push	r9
    43b4:	af 92       	push	r10
    43b6:	bf 92       	push	r11
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	69 97       	sbiw	r28, 0x19	; 25
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	8a 83       	std	Y+2, r24	; 0x02
    43d4:	9b 83       	std	Y+3, r25	; 0x03
    43d6:	ac 82       	std	Y+4, r10	; 0x04
    43d8:	bd 82       	std	Y+5, r11	; 0x05
    43da:	ec 2d       	mov	r30, r12
    43dc:	ce 82       	std	Y+6, r12	; 0x06
    43de:	df 82       	std	Y+7, r13	; 0x07
    43e0:	e8 86       	std	Y+8, r14	; 0x08
    43e2:	f9 86       	std	Y+9, r15	; 0x09
    43e4:	0a 87       	std	Y+10, r16	; 0x0a
    43e6:	1b 87       	std	Y+11, r17	; 0x0b
    43e8:	2c 87       	std	Y+12, r18	; 0x0c
    43ea:	3d 87       	std	Y+13, r19	; 0x0d
    43ec:	4e 87       	std	Y+14, r20	; 0x0e
    43ee:	5f 87       	std	Y+15, r21	; 0x0f
    43f0:	68 8b       	std	Y+16, r22	; 0x10
    43f2:	79 8b       	std	Y+17, r23	; 0x11
    43f4:	0b 2d       	mov	r16, r11
    43f6:	1c 2d       	mov	r17, r12
    43f8:	28 85       	ldd	r18, Y+8	; 0x08
    43fa:	39 85       	ldd	r19, Y+9	; 0x09
    43fc:	4a 85       	ldd	r20, Y+10	; 0x0a
    43fe:	5b 85       	ldd	r21, Y+11	; 0x0b
    4400:	2e 8b       	std	Y+22, r18	; 0x16
    4402:	3f 8b       	std	Y+23, r19	; 0x17
    4404:	48 8f       	std	Y+24, r20	; 0x18
    4406:	59 8f       	std	Y+25, r21	; 0x19
    4408:	9f b7       	in	r25, 0x3f	; 63
    440a:	99 83       	std	Y+1, r25	; 0x01
    440c:	f8 94       	cli
    440e:	aa 20       	and	r10, r10
    4410:	21 f0       	breq	.+8      	; 0x441a <hal_configureUartChannel+0x72>
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	8f bf       	out	0x3f, r24	; 63
    4416:	88 ef       	ldi	r24, 0xF8	; 248
    4418:	bc c2       	rjmp	.+1400   	; 0x4992 <hal_configureUartChannel+0x5ea>
    441a:	e3 30       	cpi	r30, 0x03	; 3
    441c:	20 f0       	brcs	.+8      	; 0x4426 <hal_configureUartChannel+0x7e>
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	8f bf       	out	0x3f, r24	; 63
    4422:	86 ef       	ldi	r24, 0xF6	; 246
    4424:	b6 c2       	rjmp	.+1388   	; 0x4992 <hal_configureUartChannel+0x5ea>
    4426:	04 30       	cpi	r16, 0x04	; 4
    4428:	20 f0       	brcs	.+8      	; 0x4432 <hal_configureUartChannel+0x8a>
    442a:	89 81       	ldd	r24, Y+1	; 0x01
    442c:	8f bf       	out	0x3f, r24	; 63
    442e:	87 ef       	ldi	r24, 0xF7	; 247
    4430:	b0 c2       	rjmp	.+1376   	; 0x4992 <hal_configureUartChannel+0x5ea>
    4432:	31 e0       	ldi	r19, 0x01	; 1
    4434:	3d 15       	cp	r19, r13
    4436:	20 f4       	brcc	.+8      	; 0x4440 <hal_configureUartChannel+0x98>
    4438:	89 81       	ldd	r24, Y+1	; 0x01
    443a:	8f bf       	out	0x3f, r24	; 63
    443c:	85 ef       	ldi	r24, 0xF5	; 245
    443e:	a9 c2       	rjmp	.+1362   	; 0x4992 <hal_configureUartChannel+0x5ea>
    4440:	6e 89       	ldd	r22, Y+22	; 0x16
    4442:	7f 89       	ldd	r23, Y+23	; 0x17
    4444:	88 8d       	ldd	r24, Y+24	; 0x18
    4446:	99 8d       	ldd	r25, Y+25	; 0x19
    4448:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    444c:	6a 8b       	std	Y+18, r22	; 0x12
    444e:	7b 8b       	std	Y+19, r23	; 0x13
    4450:	8c 8b       	std	Y+20, r24	; 0x14
    4452:	9d 8b       	std	Y+21, r25	; 0x15
    4454:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    4458:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	54 e3       	ldi	r21, 0x34	; 52
    4464:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    4468:	9b 01       	movw	r18, r22
    446a:	ac 01       	movw	r20, r24
    446c:	6a 89       	ldd	r22, Y+18	; 0x12
    446e:	7b 89       	ldd	r23, Y+19	; 0x13
    4470:	8c 89       	ldd	r24, Y+20	; 0x14
    4472:	9d 89       	ldd	r25, Y+21	; 0x15
    4474:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    4478:	87 fd       	sbrc	r24, 7
    447a:	14 c0       	rjmp	.+40     	; 0x44a4 <hal_configureUartChannel+0xfc>
    447c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    4480:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e8       	ldi	r20, 0x80	; 128
    448a:	5d e3       	ldi	r21, 0x3D	; 61
    448c:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    4490:	9b 01       	movw	r18, r22
    4492:	ac 01       	movw	r20, r24
    4494:	6a 89       	ldd	r22, Y+18	; 0x12
    4496:	7b 89       	ldd	r23, Y+19	; 0x13
    4498:	8c 89       	ldd	r24, Y+20	; 0x14
    449a:	9d 89       	ldd	r25, Y+21	; 0x15
    449c:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
    44a0:	18 16       	cp	r1, r24
    44a2:	24 f4       	brge	.+8      	; 0x44ac <hal_configureUartChannel+0x104>
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	8f bf       	out	0x3f, r24	; 63
    44a8:	84 ef       	ldi	r24, 0xF4	; 244
    44aa:	73 c2       	rjmp	.+1254   	; 0x4992 <hal_configureUartChannel+0x5ea>
    44ac:	ea 81       	ldd	r30, Y+2	; 0x02
    44ae:	fb 81       	ldd	r31, Y+3	; 0x03
    44b0:	80 91 d9 20 	lds	r24, 0x20D9
    44b4:	90 91 da 20 	lds	r25, 0x20DA
    44b8:	24 81       	ldd	r18, Z+4	; 0x04
    44ba:	35 81       	ldd	r19, Z+5	; 0x05
    44bc:	28 17       	cp	r18, r24
    44be:	39 07       	cpc	r19, r25
    44c0:	21 f0       	breq	.+8      	; 0x44ca <hal_configureUartChannel+0x122>
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	8f bf       	out	0x3f, r24	; 63
    44c6:	8e ef       	ldi	r24, 0xFE	; 254
    44c8:	64 c2       	rjmp	.+1224   	; 0x4992 <hal_configureUartChannel+0x5ea>
    44ca:	ea 81       	ldd	r30, Y+2	; 0x02
    44cc:	fb 81       	ldd	r31, Y+3	; 0x03
    44ce:	80 80       	ld	r8, Z
    44d0:	91 80       	ldd	r9, Z+1	; 0x01
    44d2:	d4 01       	movw	r26, r8
    44d4:	19 96       	adiw	r26, 0x09	; 9
    44d6:	ed 91       	ld	r30, X+
    44d8:	fc 91       	ld	r31, X
    44da:	1a 97       	sbiw	r26, 0x0a	; 10
    44dc:	83 81       	ldd	r24, Z+3	; 0x03
    44de:	8f 7c       	andi	r24, 0xCF	; 207
    44e0:	83 83       	std	Z+3, r24	; 0x03
    44e2:	19 96       	adiw	r26, 0x09	; 9
    44e4:	ed 91       	ld	r30, X+
    44e6:	fc 91       	ld	r31, X
    44e8:	1a 97       	sbiw	r26, 0x0a	; 10
    44ea:	83 81       	ldd	r24, Z+3	; 0x03
    44ec:	8c 7f       	andi	r24, 0xFC	; 252
    44ee:	83 83       	std	Z+3, r24	; 0x03
    44f0:	19 96       	adiw	r26, 0x09	; 9
    44f2:	ed 91       	ld	r30, X+
    44f4:	fc 91       	ld	r31, X
    44f6:	1a 97       	sbiw	r26, 0x0a	; 10
    44f8:	83 81       	ldd	r24, Z+3	; 0x03
    44fa:	83 7f       	andi	r24, 0xF3	; 243
    44fc:	83 83       	std	Z+3, r24	; 0x03
    44fe:	19 96       	adiw	r26, 0x09	; 9
    4500:	ed 91       	ld	r30, X+
    4502:	fc 91       	ld	r31, X
    4504:	1a 97       	sbiw	r26, 0x0a	; 10
    4506:	84 81       	ldd	r24, Z+4	; 0x04
    4508:	8f 7e       	andi	r24, 0xEF	; 239
    450a:	84 83       	std	Z+4, r24	; 0x04
    450c:	19 96       	adiw	r26, 0x09	; 9
    450e:	ed 91       	ld	r30, X+
    4510:	fc 91       	ld	r31, X
    4512:	1a 97       	sbiw	r26, 0x0a	; 10
    4514:	84 81       	ldd	r24, Z+4	; 0x04
    4516:	87 7f       	andi	r24, 0xF7	; 247
    4518:	84 83       	std	Z+4, r24	; 0x04
    451a:	19 96       	adiw	r26, 0x09	; 9
    451c:	ed 91       	ld	r30, X+
    451e:	fc 91       	ld	r31, X
    4520:	1a 97       	sbiw	r26, 0x0a	; 10
    4522:	85 81       	ldd	r24, Z+5	; 0x05
    4524:	8f 73       	andi	r24, 0x3F	; 63
    4526:	85 83       	std	Z+5, r24	; 0x05
    4528:	19 96       	adiw	r26, 0x09	; 9
    452a:	ed 91       	ld	r30, X+
    452c:	fc 91       	ld	r31, X
    452e:	1a 97       	sbiw	r26, 0x0a	; 10
    4530:	85 81       	ldd	r24, Z+5	; 0x05
    4532:	85 83       	std	Z+5, r24	; 0x05
    4534:	19 96       	adiw	r26, 0x09	; 9
    4536:	ed 91       	ld	r30, X+
    4538:	fc 91       	ld	r31, X
    453a:	1a 97       	sbiw	r26, 0x0a	; 10
    453c:	85 81       	ldd	r24, Z+5	; 0x05
    453e:	8f 7c       	andi	r24, 0xCF	; 207
    4540:	85 83       	std	Z+5, r24	; 0x05
    4542:	19 96       	adiw	r26, 0x09	; 9
    4544:	ed 91       	ld	r30, X+
    4546:	fc 91       	ld	r31, X
    4548:	1a 97       	sbiw	r26, 0x0a	; 10
    454a:	85 81       	ldd	r24, Z+5	; 0x05
    454c:	11 30       	cpi	r17, 0x01	; 1
    454e:	19 f0       	breq	.+6      	; 0x4556 <hal_configureUartChannel+0x1ae>
    4550:	12 30       	cpi	r17, 0x02	; 2
    4552:	21 f4       	brne	.+8      	; 0x455c <hal_configureUartChannel+0x1b4>
    4554:	02 c0       	rjmp	.+4      	; 0x455a <hal_configureUartChannel+0x1b2>
    4556:	80 62       	ori	r24, 0x20	; 32
    4558:	01 c0       	rjmp	.+2      	; 0x455c <hal_configureUartChannel+0x1b4>
    455a:	80 63       	ori	r24, 0x30	; 48
    455c:	85 83       	std	Z+5, r24	; 0x05
    455e:	d4 01       	movw	r26, r8
    4560:	19 96       	adiw	r26, 0x09	; 9
    4562:	ed 91       	ld	r30, X+
    4564:	fc 91       	ld	r31, X
    4566:	1a 97       	sbiw	r26, 0x0a	; 10
    4568:	85 81       	ldd	r24, Z+5	; 0x05
    456a:	88 7f       	andi	r24, 0xF8	; 248
    456c:	85 83       	std	Z+5, r24	; 0x05
    456e:	19 96       	adiw	r26, 0x09	; 9
    4570:	ed 91       	ld	r30, X+
    4572:	fc 91       	ld	r31, X
    4574:	1a 97       	sbiw	r26, 0x0a	; 10
    4576:	85 81       	ldd	r24, Z+5	; 0x05
    4578:	80 2b       	or	r24, r16
    457a:	85 83       	std	Z+5, r24	; 0x05
    457c:	19 96       	adiw	r26, 0x09	; 9
    457e:	ed 91       	ld	r30, X+
    4580:	fc 91       	ld	r31, X
    4582:	1a 97       	sbiw	r26, 0x0a	; 10
    4584:	85 81       	ldd	r24, Z+5	; 0x05
    4586:	87 7f       	andi	r24, 0xF7	; 247
    4588:	85 83       	std	Z+5, r24	; 0x05
    458a:	19 96       	adiw	r26, 0x09	; 9
    458c:	ed 91       	ld	r30, X+
    458e:	fc 91       	ld	r31, X
    4590:	1a 97       	sbiw	r26, 0x0a	; 10
    4592:	85 81       	ldd	r24, Z+5	; 0x05
    4594:	dd 0c       	add	r13, r13
    4596:	dd 0c       	add	r13, r13
    4598:	dd 0c       	add	r13, r13
    459a:	d8 2a       	or	r13, r24
    459c:	d5 82       	std	Z+5, r13	; 0x05
    459e:	19 96       	adiw	r26, 0x09	; 9
    45a0:	ed 91       	ld	r30, X+
    45a2:	fc 91       	ld	r31, X
    45a4:	1a 97       	sbiw	r26, 0x0a	; 10
    45a6:	86 81       	ldd	r24, Z+6	; 0x06
    45a8:	16 82       	std	Z+6, r1	; 0x06
    45aa:	19 96       	adiw	r26, 0x09	; 9
    45ac:	ed 91       	ld	r30, X+
    45ae:	fc 91       	ld	r31, X
    45b0:	1a 97       	sbiw	r26, 0x0a	; 10
    45b2:	87 81       	ldd	r24, Z+7	; 0x07
    45b4:	80 7f       	andi	r24, 0xF0	; 240
    45b6:	87 83       	std	Z+7, r24	; 0x07
    45b8:	19 96       	adiw	r26, 0x09	; 9
    45ba:	ed 91       	ld	r30, X+
    45bc:	fc 91       	ld	r31, X
    45be:	1a 97       	sbiw	r26, 0x0a	; 10
    45c0:	87 81       	ldd	r24, Z+7	; 0x07
    45c2:	8f 70       	andi	r24, 0x0F	; 15
    45c4:	87 83       	std	Z+7, r24	; 0x07
    45c6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    45ca:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    45ce:	6b 01       	movw	r12, r22
    45d0:	7c 01       	movw	r14, r24
    45d2:	6a 89       	ldd	r22, Y+18	; 0x12
    45d4:	7b 89       	ldd	r23, Y+19	; 0x13
    45d6:	8c 89       	ldd	r24, Y+20	; 0x14
    45d8:	9d 89       	ldd	r25, Y+21	; 0x15
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e8       	ldi	r20, 0x80	; 128
    45e0:	51 e4       	ldi	r21, 0x41	; 65
    45e2:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    45e6:	9b 01       	movw	r18, r22
    45e8:	ac 01       	movw	r20, r24
    45ea:	c7 01       	movw	r24, r14
    45ec:	b6 01       	movw	r22, r12
    45ee:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    45f2:	d6 2e       	mov	r13, r22
    45f4:	c7 2e       	mov	r12, r23
    45f6:	b8 2e       	mov	r11, r24
    45f8:	a9 2e       	mov	r10, r25
    45fa:	a6 01       	movw	r20, r12
    45fc:	95 01       	movw	r18, r10
    45fe:	85 2f       	mov	r24, r21
    4600:	94 2f       	mov	r25, r20
    4602:	a3 2f       	mov	r26, r19
    4604:	b2 2f       	mov	r27, r18
    4606:	bc 01       	movw	r22, r24
    4608:	cd 01       	movw	r24, r26
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e8       	ldi	r20, 0x80	; 128
    4610:	5f e3       	ldi	r21, 0x3F	; 63
    4612:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
    4616:	76 2e       	mov	r7, r22
    4618:	67 2e       	mov	r6, r23
    461a:	58 2e       	mov	r5, r24
    461c:	49 2e       	mov	r4, r25
    461e:	06 2f       	mov	r16, r22
    4620:	17 2f       	mov	r17, r23
    4622:	72 01       	movw	r14, r4
    4624:	a3 01       	movw	r20, r6
    4626:	92 01       	movw	r18, r4
    4628:	85 2f       	mov	r24, r21
    462a:	94 2f       	mov	r25, r20
    462c:	a3 2f       	mov	r26, r19
    462e:	b2 2f       	mov	r27, r18
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	20 e0       	ldi	r18, 0x00	; 0
    4636:	30 ef       	ldi	r19, 0xF0	; 240
    4638:	4f e7       	ldi	r20, 0x7F	; 127
    463a:	55 e4       	ldi	r21, 0x45	; 69
    463c:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
    4640:	87 ff       	sbrs	r24, 7
    4642:	18 c0       	rjmp	.+48     	; 0x4674 <hal_configureUartChannel+0x2cc>
    4644:	37 c0       	rjmp	.+110    	; 0x46b4 <hal_configureUartChannel+0x30c>
    4646:	a6 01       	movw	r20, r12
    4648:	95 01       	movw	r18, r10
    464a:	85 2f       	mov	r24, r21
    464c:	9c 2d       	mov	r25, r12
    464e:	a3 2f       	mov	r26, r19
    4650:	ba 2d       	mov	r27, r10
    4652:	bc 01       	movw	r22, r24
    4654:	cd 01       	movw	r24, r26
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	5f e3       	ldi	r21, 0x3F	; 63
    465e:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    4662:	d6 2e       	mov	r13, r22
    4664:	c7 2e       	mov	r12, r23
    4666:	b8 2e       	mov	r11, r24
    4668:	a9 2e       	mov	r10, r25
    466a:	73 94       	inc	r7
    466c:	b7 e0       	ldi	r27, 0x07	; 7
    466e:	7b 16       	cp	r7, r27
    4670:	11 f4       	brne	.+4      	; 0x4676 <hal_configureUartChannel+0x2ce>
    4672:	11 c0       	rjmp	.+34     	; 0x4696 <hal_configureUartChannel+0x2ee>
    4674:	77 24       	eor	r7, r7
    4676:	a6 01       	movw	r20, r12
    4678:	95 01       	movw	r18, r10
    467a:	85 2f       	mov	r24, r21
    467c:	9c 2d       	mov	r25, r12
    467e:	a3 2f       	mov	r26, r19
    4680:	ba 2d       	mov	r27, r10
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 ef       	ldi	r19, 0xF0	; 240
    468a:	4f e7       	ldi	r20, 0x7F	; 127
    468c:	55 e4       	ldi	r21, 0x45	; 69
    468e:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
    4692:	18 16       	cp	r1, r24
    4694:	c4 f2       	brlt	.-80     	; 0x4646 <hal_configureUartChannel+0x29e>
    4696:	a6 01       	movw	r20, r12
    4698:	95 01       	movw	r18, r10
    469a:	85 2f       	mov	r24, r21
    469c:	9c 2d       	mov	r25, r12
    469e:	a3 2f       	mov	r26, r19
    46a0:	ba 2d       	mov	r27, r10
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	40 e8       	ldi	r20, 0x80	; 128
    46ac:	5f e3       	ldi	r21, 0x3F	; 63
    46ae:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
    46b2:	5f c0       	rjmp	.+190    	; 0x4772 <hal_configureUartChannel+0x3ca>
    46b4:	a3 01       	movw	r20, r6
    46b6:	92 01       	movw	r18, r4
    46b8:	85 2f       	mov	r24, r21
    46ba:	94 2f       	mov	r25, r20
    46bc:	a3 2f       	mov	r26, r19
    46be:	b2 2f       	mov	r27, r18
    46c0:	bc 01       	movw	r22, r24
    46c2:	cd 01       	movw	r24, r26
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 ef       	ldi	r19, 0xF0	; 240
    46c8:	4f e7       	ldi	r20, 0x7F	; 127
    46ca:	55 e4       	ldi	r21, 0x45	; 69
    46cc:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    46d0:	77 24       	eor	r7, r7
    46d2:	87 fd       	sbrc	r24, 7
    46d4:	18 c0       	rjmp	.+48     	; 0x4706 <hal_configureUartChannel+0x35e>
    46d6:	aa 24       	eor	r10, r10
    46d8:	bb 24       	eor	r11, r11
    46da:	71 c0       	rjmp	.+226    	; 0x47be <hal_configureUartChannel+0x416>
    46dc:	97 01       	movw	r18, r14
    46de:	80 2f       	mov	r24, r16
    46e0:	91 2f       	mov	r25, r17
    46e2:	a3 2f       	mov	r26, r19
    46e4:	be 2d       	mov	r27, r14
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	a7 01       	movw	r20, r14
    46ec:	25 2f       	mov	r18, r21
    46ee:	3b 2f       	mov	r19, r27
    46f0:	a9 01       	movw	r20, r18
    46f2:	98 01       	movw	r18, r16
    46f4:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    46f8:	8b 01       	movw	r16, r22
    46fa:	f8 2e       	mov	r15, r24
    46fc:	e9 2e       	mov	r14, r25
    46fe:	7a 94       	dec	r7
    4700:	e9 ef       	ldi	r30, 0xF9	; 249
    4702:	7e 16       	cp	r7, r30
    4704:	79 f0       	breq	.+30     	; 0x4724 <hal_configureUartChannel+0x37c>
    4706:	97 01       	movw	r18, r14
    4708:	80 2f       	mov	r24, r16
    470a:	91 2f       	mov	r25, r17
    470c:	a3 2f       	mov	r26, r19
    470e:	be 2d       	mov	r27, r14
    4710:	bc 01       	movw	r22, r24
    4712:	cd 01       	movw	r24, r26
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 ef       	ldi	r19, 0xF0	; 240
    4718:	4f e7       	ldi	r20, 0x7F	; 127
    471a:	55 e4       	ldi	r21, 0x45	; 69
    471c:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    4720:	87 fd       	sbrc	r24, 7
    4722:	dc cf       	rjmp	.-72     	; 0x46dc <hal_configureUartChannel+0x334>
    4724:	97 01       	movw	r18, r14
    4726:	80 2f       	mov	r24, r16
    4728:	91 2f       	mov	r25, r17
    472a:	a3 2f       	mov	r26, r19
    472c:	be 2d       	mov	r27, r14
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	20 e0       	ldi	r18, 0x00	; 0
    4734:	30 ef       	ldi	r19, 0xF0	; 240
    4736:	4f e7       	ldi	r20, 0x7F	; 127
    4738:	55 e4       	ldi	r21, 0x45	; 69
    473a:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
    473e:	18 16       	cp	r1, r24
    4740:	8c f4       	brge	.+34     	; 0x4764 <hal_configureUartChannel+0x3bc>
    4742:	97 01       	movw	r18, r14
    4744:	80 2f       	mov	r24, r16
    4746:	91 2f       	mov	r25, r17
    4748:	a3 2f       	mov	r26, r19
    474a:	be 2d       	mov	r27, r14
    474c:	bc 01       	movw	r22, r24
    474e:	cd 01       	movw	r24, r26
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	40 e0       	ldi	r20, 0x00	; 0
    4756:	5f e3       	ldi	r21, 0x3F	; 63
    4758:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    475c:	8b 01       	movw	r16, r22
    475e:	f8 2e       	mov	r15, r24
    4760:	e9 2e       	mov	r14, r25
    4762:	73 94       	inc	r7
    4764:	97 01       	movw	r18, r14
    4766:	80 2f       	mov	r24, r16
    4768:	91 2f       	mov	r25, r17
    476a:	a3 2f       	mov	r26, r19
    476c:	be 2d       	mov	r27, r14
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 d2 f2 	call	0x1e5a4	; 0x1e5a4 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	5c 01       	movw	r10, r24
    477c:	17 14       	cp	r1, r7
    477e:	fc f4       	brge	.+62     	; 0x47be <hal_configureUartChannel+0x416>
    4780:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    4784:	6b 01       	movw	r12, r22
    4786:	7c 01       	movw	r14, r24
    4788:	c5 01       	movw	r24, r10
    478a:	a0 e0       	ldi	r26, 0x00	; 0
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	01 96       	adiw	r24, 0x01	; 1
    4790:	a1 1d       	adc	r26, r1
    4792:	b1 1d       	adc	r27, r1
    4794:	20 e1       	ldi	r18, 0x10	; 16
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	07 2c       	mov	r0, r7
    479e:	04 c0       	rjmp	.+8      	; 0x47a8 <hal_configureUartChannel+0x400>
    47a0:	22 0f       	add	r18, r18
    47a2:	33 1f       	adc	r19, r19
    47a4:	44 1f       	adc	r20, r20
    47a6:	55 1f       	adc	r21, r21
    47a8:	0a 94       	dec	r0
    47aa:	d2 f7       	brpl	.-12     	; 0x47a0 <hal_configureUartChannel+0x3f8>
    47ac:	bc 01       	movw	r22, r24
    47ae:	cd 01       	movw	r24, r26
    47b0:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    47b4:	9b 01       	movw	r18, r22
    47b6:	ac 01       	movw	r20, r24
    47b8:	c7 01       	movw	r24, r14
    47ba:	b6 01       	movw	r22, r12
    47bc:	24 c0       	rjmp	.+72     	; 0x4806 <hal_configureUartChannel+0x45e>
    47be:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
    47c2:	ab 01       	movw	r20, r22
    47c4:	bc 01       	movw	r22, r24
    47c6:	85 01       	movw	r16, r10
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	e4 e0       	ldi	r30, 0x04	; 4
    47ce:	00 0f       	add	r16, r16
    47d0:	11 1f       	adc	r17, r17
    47d2:	22 1f       	adc	r18, r18
    47d4:	33 1f       	adc	r19, r19
    47d6:	ea 95       	dec	r30
    47d8:	d1 f7       	brne	.-12     	; 0x47ce <hal_configureUartChannel+0x426>
    47da:	87 2d       	mov	r24, r7
    47dc:	99 27       	eor	r25, r25
    47de:	87 fd       	sbrc	r24, 7
    47e0:	90 95       	com	r25
    47e2:	90 95       	com	r25
    47e4:	81 95       	neg	r24
    47e6:	9f 4f       	sbci	r25, 0xFF	; 255
    47e8:	04 c0       	rjmp	.+8      	; 0x47f2 <hal_configureUartChannel+0x44a>
    47ea:	36 95       	lsr	r19
    47ec:	27 95       	ror	r18
    47ee:	17 95       	ror	r17
    47f0:	07 95       	ror	r16
    47f2:	8a 95       	dec	r24
    47f4:	d2 f7       	brpl	.-12     	; 0x47ea <hal_configureUartChannel+0x442>
    47f6:	00 5f       	subi	r16, 0xF0	; 240
    47f8:	1f 4f       	sbci	r17, 0xFF	; 255
    47fa:	2f 4f       	sbci	r18, 0xFF	; 255
    47fc:	3f 4f       	sbci	r19, 0xFF	; 255
    47fe:	cb 01       	movw	r24, r22
    4800:	ba 01       	movw	r22, r20
    4802:	a9 01       	movw	r20, r18
    4804:	98 01       	movw	r18, r16
    4806:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
    480a:	b9 01       	movw	r22, r18
    480c:	ca 01       	movw	r24, r20
    480e:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    4812:	2a 89       	ldd	r18, Y+18	; 0x12
    4814:	3b 89       	ldd	r19, Y+19	; 0x13
    4816:	4c 89       	ldd	r20, Y+20	; 0x14
    4818:	5d 89       	ldd	r21, Y+21	; 0x15
    481a:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
    481e:	2a 89       	ldd	r18, Y+18	; 0x12
    4820:	3b 89       	ldd	r19, Y+19	; 0x13
    4822:	4c 89       	ldd	r20, Y+20	; 0x14
    4824:	5d 89       	ldd	r21, Y+21	; 0x15
    4826:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	48 ec       	ldi	r20, 0xC8	; 200
    4830:	52 e4       	ldi	r21, 0x42	; 66
    4832:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	f4 01       	movw	r30, r8
    483c:	85 83       	std	Z+5, r24	; 0x05
    483e:	96 83       	std	Z+6, r25	; 0x06
    4840:	a7 83       	std	Z+7, r26	; 0x07
    4842:	b0 87       	std	Z+8, r27	; 0x08
    4844:	80 81       	ld	r24, Z
    4846:	86 31       	cpi	r24, 0x16	; 22
    4848:	78 f4       	brcc	.+30     	; 0x4868 <hal_configureUartChannel+0x4c0>
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	88 0f       	add	r24, r24
    484e:	99 1f       	adc	r25, r25
    4850:	fc 01       	movw	r30, r24
    4852:	e3 5f       	subi	r30, 0xF3	; 243
    4854:	fe 4d       	sbci	r31, 0xDE	; 222
    4856:	00 81       	ld	r16, Z
    4858:	11 81       	ldd	r17, Z+1	; 0x01
    485a:	87 5c       	subi	r24, 0xC7	; 199
    485c:	9e 4d       	sbci	r25, 0xDE	; 222
    485e:	dc 01       	movw	r26, r24
    4860:	ed 90       	ld	r14, X+
    4862:	fc 90       	ld	r15, X
    4864:	11 97       	sbiw	r26, 0x01	; 1
    4866:	04 c0       	rjmp	.+8      	; 0x4870 <hal_configureUartChannel+0x4c8>
    4868:	ee 24       	eor	r14, r14
    486a:	ff 24       	eor	r15, r15
    486c:	00 e0       	ldi	r16, 0x00	; 0
    486e:	10 e0       	ldi	r17, 0x00	; 0
    4870:	8d 85       	ldd	r24, Y+13	; 0x0d
    4872:	88 23       	and	r24, r24
    4874:	a1 f0       	breq	.+40     	; 0x489e <hal_configureUartChannel+0x4f6>
    4876:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <hal_requestDmaChannel>
    487a:	f4 01       	movw	r30, r8
    487c:	83 8f       	std	Z+27, r24	; 0x1b
    487e:	94 8f       	std	Z+28, r25	; 0x1c
    4880:	83 8d       	ldd	r24, Z+27	; 0x1b
    4882:	94 8d       	ldd	r25, Z+28	; 0x1c
    4884:	97 ff       	sbrs	r25, 7
    4886:	05 c0       	rjmp	.+10     	; 0x4892 <hal_configureUartChannel+0x4ea>
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	8f bf       	out	0x3f, r24	; 63
    488c:	83 8d       	ldd	r24, Z+27	; 0x1b
    488e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4890:	16 c0       	rjmp	.+44     	; 0x48be <hal_configureUartChannel+0x516>
    4892:	83 8d       	ldd	r24, Z+27	; 0x1b
    4894:	94 8d       	ldd	r25, Z+28	; 0x1c
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	a8 01       	movw	r20, r16
    489a:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <hal_requestDmaInterrupt>
    489e:	8c 85       	ldd	r24, Y+12	; 0x0c
    48a0:	88 23       	and	r24, r24
    48a2:	d1 f0       	breq	.+52     	; 0x48d8 <hal_configureUartChannel+0x530>
    48a4:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <hal_requestDmaChannel>
    48a8:	f4 01       	movw	r30, r8
    48aa:	81 8f       	std	Z+25, r24	; 0x19
    48ac:	92 8f       	std	Z+26, r25	; 0x1a
    48ae:	81 8d       	ldd	r24, Z+25	; 0x19
    48b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    48b2:	97 ff       	sbrs	r25, 7
    48b4:	0b c0       	rjmp	.+22     	; 0x48cc <hal_configureUartChannel+0x524>
    48b6:	89 81       	ldd	r24, Y+1	; 0x01
    48b8:	8f bf       	out	0x3f, r24	; 63
    48ba:	81 8d       	ldd	r24, Z+25	; 0x19
    48bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    48be:	ff ef       	ldi	r31, 0xFF	; 255
    48c0:	89 3f       	cpi	r24, 0xF9	; 249
    48c2:	9f 07       	cpc	r25, r31
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <hal_configureUartChannel+0x520>
    48c6:	64 c0       	rjmp	.+200    	; 0x4990 <hal_configureUartChannel+0x5e8>
    48c8:	8a ef       	ldi	r24, 0xFA	; 250
    48ca:	63 c0       	rjmp	.+198    	; 0x4992 <hal_configureUartChannel+0x5ea>
    48cc:	81 8d       	ldd	r24, Z+25	; 0x19
    48ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    48d0:	60 e0       	ldi	r22, 0x00	; 0
    48d2:	a7 01       	movw	r20, r14
    48d4:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <hal_requestDmaInterrupt>
    48d8:	2e 89       	ldd	r18, Y+22	; 0x16
    48da:	3f 89       	ldd	r19, Y+23	; 0x17
    48dc:	48 8d       	ldd	r20, Y+24	; 0x18
    48de:	59 8d       	ldd	r21, Y+25	; 0x19
    48e0:	d4 01       	movw	r26, r8
    48e2:	11 96       	adiw	r26, 0x01	; 1
    48e4:	2d 93       	st	X+, r18
    48e6:	3d 93       	st	X+, r19
    48e8:	4d 93       	st	X+, r20
    48ea:	5c 93       	st	X, r21
    48ec:	14 97       	sbiw	r26, 0x04	; 4
    48ee:	19 96       	adiw	r26, 0x09	; 9
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	1a 97       	sbiw	r26, 0x0a	; 10
    48f6:	a6 82       	std	Z+6, r10	; 0x06
    48f8:	19 96       	adiw	r26, 0x09	; 9
    48fa:	ed 91       	ld	r30, X+
    48fc:	fc 91       	ld	r31, X
    48fe:	1a 97       	sbiw	r26, 0x0a	; 10
    4900:	72 94       	swap	r7
    4902:	80 ef       	ldi	r24, 0xF0	; 240
    4904:	78 22       	and	r7, r24
    4906:	7b 28       	or	r7, r11
    4908:	77 82       	std	Z+7, r7	; 0x07
    490a:	19 96       	adiw	r26, 0x09	; 9
    490c:	ed 91       	ld	r30, X+
    490e:	fc 91       	ld	r31, X
    4910:	1a 97       	sbiw	r26, 0x0a	; 10
    4912:	84 81       	ldd	r24, Z+4	; 0x04
    4914:	80 61       	ori	r24, 0x10	; 16
    4916:	84 83       	std	Z+4, r24	; 0x04
    4918:	19 96       	adiw	r26, 0x09	; 9
    491a:	ed 91       	ld	r30, X+
    491c:	fc 91       	ld	r31, X
    491e:	1a 97       	sbiw	r26, 0x0a	; 10
    4920:	84 81       	ldd	r24, Z+4	; 0x04
    4922:	88 60       	ori	r24, 0x08	; 8
    4924:	84 83       	std	Z+4, r24	; 0x04
    4926:	1b 96       	adiw	r26, 0x0b	; 11
    4928:	1c 92       	st	X, r1
    492a:	1b 97       	sbiw	r26, 0x0b	; 11
    492c:	1c 96       	adiw	r26, 0x0c	; 12
    492e:	1c 92       	st	X, r1
    4930:	1c 97       	sbiw	r26, 0x0c	; 12
    4932:	1f 96       	adiw	r26, 0x0f	; 15
    4934:	1d 92       	st	X+, r1
    4936:	1c 92       	st	X, r1
    4938:	50 97       	sbiw	r26, 0x10	; 16
    493a:	1d 96       	adiw	r26, 0x0d	; 13
    493c:	1d 92       	st	X+, r1
    493e:	1c 92       	st	X, r1
    4940:	1e 97       	sbiw	r26, 0x0e	; 14
    4942:	57 96       	adiw	r26, 0x17	; 23
    4944:	1d 92       	st	X+, r1
    4946:	1c 92       	st	X, r1
    4948:	58 97       	sbiw	r26, 0x18	; 24
    494a:	53 96       	adiw	r26, 0x13	; 19
    494c:	1d 92       	st	X+, r1
    494e:	1c 92       	st	X, r1
    4950:	54 97       	sbiw	r26, 0x14	; 20
    4952:	55 96       	adiw	r26, 0x15	; 21
    4954:	1d 92       	st	X+, r1
    4956:	1c 92       	st	X, r1
    4958:	56 97       	sbiw	r26, 0x16	; 22
    495a:	51 96       	adiw	r26, 0x11	; 17
    495c:	1d 92       	st	X+, r1
    495e:	1c 92       	st	X, r1
    4960:	52 97       	sbiw	r26, 0x12	; 18
    4962:	8e 85       	ldd	r24, Y+14	; 0x0e
    4964:	9f 85       	ldd	r25, Y+15	; 0x0f
    4966:	5d 96       	adiw	r26, 0x1d	; 29
    4968:	8d 93       	st	X+, r24
    496a:	9c 93       	st	X, r25
    496c:	5e 97       	sbiw	r26, 0x1e	; 30
    496e:	88 89       	ldd	r24, Y+16	; 0x10
    4970:	99 89       	ldd	r25, Y+17	; 0x11
    4972:	5f 96       	adiw	r26, 0x1f	; 31
    4974:	8d 93       	st	X+, r24
    4976:	9c 93       	st	X, r25
    4978:	90 97       	sbiw	r26, 0x20	; 32
    497a:	19 96       	adiw	r26, 0x09	; 9
    497c:	ed 91       	ld	r30, X+
    497e:	fc 91       	ld	r31, X
    4980:	1a 97       	sbiw	r26, 0x0a	; 10
    4982:	83 81       	ldd	r24, Z+3	; 0x03
    4984:	80 63       	ori	r24, 0x30	; 48
    4986:	83 83       	std	Z+3, r24	; 0x03
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	8f bf       	out	0x3f, r24	; 63
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	01 c0       	rjmp	.+2      	; 0x4992 <hal_configureUartChannel+0x5ea>
    4990:	8f ef       	ldi	r24, 0xFF	; 255
    4992:	69 96       	adiw	r28, 0x19	; 25
    4994:	cd bf       	out	0x3d, r28	; 61
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	df 91       	pop	r29
    499a:	cf 91       	pop	r28
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ff 90       	pop	r15
    49a2:	ef 90       	pop	r14
    49a4:	df 90       	pop	r13
    49a6:	cf 90       	pop	r12
    49a8:	bf 90       	pop	r11
    49aa:	af 90       	pop	r10
    49ac:	9f 90       	pop	r9
    49ae:	8f 90       	pop	r8
    49b0:	7f 90       	pop	r7
    49b2:	6f 90       	pop	r6
    49b4:	5f 90       	pop	r5
    49b6:	4f 90       	pop	r4
    49b8:	08 95       	ret

000049ba <hal_getCpuFreq>:
    49ba:	60 91 32 2c 	lds	r22, 0x2C32
    49be:	70 91 33 2c 	lds	r23, 0x2C33
    49c2:	80 91 34 2c 	lds	r24, 0x2C34
    49c6:	90 91 35 2c 	lds	r25, 0x2C35
    49ca:	08 95       	ret

000049cc <hal_setCpuFreq>:
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	22 e0       	ldi	r18, 0x02	; 2
    49d2:	20 93 50 00 	sts	0x0050, r18
    49d6:	28 ed       	ldi	r18, 0xD8	; 216
    49d8:	24 bf       	out	0x34, r18	; 52
    49da:	e0 e4       	ldi	r30, 0x40	; 64
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	11 82       	std	Z+1, r1	; 0x01
    49e0:	20 91 41 00 	lds	r18, 0x0041
    49e4:	21 83       	std	Z+1, r18	; 0x01
    49e6:	20 91 51 00 	lds	r18, 0x0051
    49ea:	21 ff       	sbrs	r18, 1
    49ec:	fc cf       	rjmp	.-8      	; 0x49e6 <hal_setCpuFreq+0x1a>
    49ee:	28 ed       	ldi	r18, 0xD8	; 216
    49f0:	24 bf       	out	0x34, r18	; 52
    49f2:	21 e0       	ldi	r18, 0x01	; 1
    49f4:	20 93 40 00 	sts	0x0040, r18
    49f8:	20 91 50 00 	lds	r18, 0x0050
    49fc:	2e 7f       	andi	r18, 0xFE	; 254
    49fe:	20 93 50 00 	sts	0x0050, r18
    4a02:	80 93 32 2c 	sts	0x2C32, r24
    4a06:	90 93 33 2c 	sts	0x2C33, r25
    4a0a:	a0 93 34 2c 	sts	0x2C34, r26
    4a0e:	b0 93 35 2c 	sts	0x2C35, r27
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	08 95       	ret

00004a16 <findDmaIntElement>:
    4a16:	cf 93       	push	r28
    4a18:	df 93       	push	r29
    4a1a:	0f 92       	push	r0
    4a1c:	0f 92       	push	r0
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
    4a22:	e0 91 65 21 	lds	r30, 0x2165
    4a26:	f0 91 66 21 	lds	r31, 0x2166
    4a2a:	22 81       	ldd	r18, Z+2	; 0x02
    4a2c:	33 81       	ldd	r19, Z+3	; 0x03
    4a2e:	e0 91 65 21 	lds	r30, 0x2165
    4a32:	f0 91 66 21 	lds	r31, 0x2166
    4a36:	0c c0       	rjmp	.+24     	; 0x4a50 <findDmaIntElement+0x3a>
    4a38:	e9 81       	ldd	r30, Y+1	; 0x01
    4a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a3c:	01 90       	ld	r0, Z+
    4a3e:	f0 81       	ld	r31, Z
    4a40:	e0 2d       	mov	r30, r0
    4a42:	90 81       	ld	r25, Z
    4a44:	98 17       	cp	r25, r24
    4a46:	69 f0       	breq	.+26     	; 0x4a62 <findDmaIntElement+0x4c>
    4a48:	21 50       	subi	r18, 0x01	; 1
    4a4a:	30 40       	sbci	r19, 0x00	; 0
    4a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    4a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    4a50:	40 85       	ldd	r20, Z+8	; 0x08
    4a52:	51 85       	ldd	r21, Z+9	; 0x09
    4a54:	49 83       	std	Y+1, r20	; 0x01
    4a56:	5a 83       	std	Y+2, r21	; 0x02
    4a58:	12 16       	cp	r1, r18
    4a5a:	13 06       	cpc	r1, r19
    4a5c:	6c f3       	brlt	.-38     	; 0x4a38 <findDmaIntElement+0x22>
    4a5e:	e0 e0       	ldi	r30, 0x00	; 0
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	cf 01       	movw	r24, r30
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	08 95       	ret

00004a6e <__vector_6>:
    4a6e:	1f 92       	push	r1
    4a70:	0f 92       	push	r0
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	0f 92       	push	r0
    4a76:	08 b6       	in	r0, 0x38	; 56
    4a78:	0f 92       	push	r0
    4a7a:	09 b6       	in	r0, 0x39	; 57
    4a7c:	0f 92       	push	r0
    4a7e:	0b b6       	in	r0, 0x3b	; 59
    4a80:	0f 92       	push	r0
    4a82:	11 24       	eor	r1, r1
    4a84:	2f 93       	push	r18
    4a86:	3f 93       	push	r19
    4a88:	4f 93       	push	r20
    4a8a:	5f 93       	push	r21
    4a8c:	6f 93       	push	r22
    4a8e:	7f 93       	push	r23
    4a90:	8f 93       	push	r24
    4a92:	9f 93       	push	r25
    4a94:	af 93       	push	r26
    4a96:	bf 93       	push	r27
    4a98:	ef 93       	push	r30
    4a9a:	ff 93       	push	r31
    4a9c:	e0 e0       	ldi	r30, 0x00	; 0
    4a9e:	f1 e0       	ldi	r31, 0x01	; 1
    4aa0:	80 91 11 01 	lds	r24, 0x0111
    4aa4:	85 ff       	sbrs	r24, 5
    4aa6:	06 c0       	rjmp	.+12     	; 0x4ab4 <__vector_6+0x46>
    4aa8:	80 91 11 01 	lds	r24, 0x0111
    4aac:	80 62       	ori	r24, 0x20	; 32
    4aae:	81 8b       	std	Z+17, r24	; 0x11
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	05 c0       	rjmp	.+10     	; 0x4abe <__vector_6+0x50>
    4ab4:	80 91 11 01 	lds	r24, 0x0111
    4ab8:	80 61       	ori	r24, 0x10	; 16
    4aba:	81 8b       	std	Z+17, r24	; 0x11
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <findDmaIntElement>
    4ac2:	00 97       	sbiw	r24, 0x00	; 0
    4ac4:	41 f0       	breq	.+16     	; 0x4ad6 <__vector_6+0x68>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	11 96       	adiw	r26, 0x01	; 1
    4aca:	ed 91       	ld	r30, X+
    4acc:	fc 91       	ld	r31, X
    4ace:	12 97       	sbiw	r26, 0x02	; 2
    4ad0:	30 97       	sbiw	r30, 0x00	; 0
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <__vector_6+0x68>
    4ad4:	19 95       	eicall
    4ad6:	ff 91       	pop	r31
    4ad8:	ef 91       	pop	r30
    4ada:	bf 91       	pop	r27
    4adc:	af 91       	pop	r26
    4ade:	9f 91       	pop	r25
    4ae0:	8f 91       	pop	r24
    4ae2:	7f 91       	pop	r23
    4ae4:	6f 91       	pop	r22
    4ae6:	5f 91       	pop	r21
    4ae8:	4f 91       	pop	r20
    4aea:	3f 91       	pop	r19
    4aec:	2f 91       	pop	r18
    4aee:	0f 90       	pop	r0
    4af0:	0b be       	out	0x3b, r0	; 59
    4af2:	0f 90       	pop	r0
    4af4:	09 be       	out	0x39, r0	; 57
    4af6:	0f 90       	pop	r0
    4af8:	08 be       	out	0x38, r0	; 56
    4afa:	0f 90       	pop	r0
    4afc:	0f be       	out	0x3f, r0	; 63
    4afe:	0f 90       	pop	r0
    4b00:	1f 90       	pop	r1
    4b02:	18 95       	reti

00004b04 <__vector_7>:
    4b04:	1f 92       	push	r1
    4b06:	0f 92       	push	r0
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	0f 92       	push	r0
    4b0c:	08 b6       	in	r0, 0x38	; 56
    4b0e:	0f 92       	push	r0
    4b10:	09 b6       	in	r0, 0x39	; 57
    4b12:	0f 92       	push	r0
    4b14:	0b b6       	in	r0, 0x3b	; 59
    4b16:	0f 92       	push	r0
    4b18:	11 24       	eor	r1, r1
    4b1a:	2f 93       	push	r18
    4b1c:	3f 93       	push	r19
    4b1e:	4f 93       	push	r20
    4b20:	5f 93       	push	r21
    4b22:	6f 93       	push	r22
    4b24:	7f 93       	push	r23
    4b26:	8f 93       	push	r24
    4b28:	9f 93       	push	r25
    4b2a:	af 93       	push	r26
    4b2c:	bf 93       	push	r27
    4b2e:	ef 93       	push	r30
    4b30:	ff 93       	push	r31
    4b32:	e0 e0       	ldi	r30, 0x00	; 0
    4b34:	f1 e0       	ldi	r31, 0x01	; 1
    4b36:	80 91 21 01 	lds	r24, 0x0121
    4b3a:	85 ff       	sbrs	r24, 5
    4b3c:	06 c0       	rjmp	.+12     	; 0x4b4a <__vector_7+0x46>
    4b3e:	80 91 21 01 	lds	r24, 0x0121
    4b42:	80 62       	ori	r24, 0x20	; 32
    4b44:	81 a3       	lds	r24, 0x51
    4b46:	83 e0       	ldi	r24, 0x03	; 3
    4b48:	05 c0       	rjmp	.+10     	; 0x4b54 <__vector_7+0x50>
    4b4a:	80 91 21 01 	lds	r24, 0x0121
    4b4e:	80 61       	ori	r24, 0x10	; 16
    4b50:	81 a3       	lds	r24, 0x51
    4b52:	82 e0       	ldi	r24, 0x02	; 2
    4b54:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <findDmaIntElement>
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	41 f0       	breq	.+16     	; 0x4b6c <__vector_7+0x68>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	11 96       	adiw	r26, 0x01	; 1
    4b60:	ed 91       	ld	r30, X+
    4b62:	fc 91       	ld	r31, X
    4b64:	12 97       	sbiw	r26, 0x02	; 2
    4b66:	30 97       	sbiw	r30, 0x00	; 0
    4b68:	09 f0       	breq	.+2      	; 0x4b6c <__vector_7+0x68>
    4b6a:	19 95       	eicall
    4b6c:	ff 91       	pop	r31
    4b6e:	ef 91       	pop	r30
    4b70:	bf 91       	pop	r27
    4b72:	af 91       	pop	r26
    4b74:	9f 91       	pop	r25
    4b76:	8f 91       	pop	r24
    4b78:	7f 91       	pop	r23
    4b7a:	6f 91       	pop	r22
    4b7c:	5f 91       	pop	r21
    4b7e:	4f 91       	pop	r20
    4b80:	3f 91       	pop	r19
    4b82:	2f 91       	pop	r18
    4b84:	0f 90       	pop	r0
    4b86:	0b be       	out	0x3b, r0	; 59
    4b88:	0f 90       	pop	r0
    4b8a:	09 be       	out	0x39, r0	; 57
    4b8c:	0f 90       	pop	r0
    4b8e:	08 be       	out	0x38, r0	; 56
    4b90:	0f 90       	pop	r0
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	0f 90       	pop	r0
    4b96:	1f 90       	pop	r1
    4b98:	18 95       	reti

00004b9a <__vector_8>:
    4b9a:	1f 92       	push	r1
    4b9c:	0f 92       	push	r0
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	0f 92       	push	r0
    4ba2:	08 b6       	in	r0, 0x38	; 56
    4ba4:	0f 92       	push	r0
    4ba6:	09 b6       	in	r0, 0x39	; 57
    4ba8:	0f 92       	push	r0
    4baa:	0b b6       	in	r0, 0x3b	; 59
    4bac:	0f 92       	push	r0
    4bae:	11 24       	eor	r1, r1
    4bb0:	2f 93       	push	r18
    4bb2:	3f 93       	push	r19
    4bb4:	4f 93       	push	r20
    4bb6:	5f 93       	push	r21
    4bb8:	6f 93       	push	r22
    4bba:	7f 93       	push	r23
    4bbc:	8f 93       	push	r24
    4bbe:	9f 93       	push	r25
    4bc0:	af 93       	push	r26
    4bc2:	bf 93       	push	r27
    4bc4:	ef 93       	push	r30
    4bc6:	ff 93       	push	r31
    4bc8:	e0 e0       	ldi	r30, 0x00	; 0
    4bca:	f1 e0       	ldi	r31, 0x01	; 1
    4bcc:	80 91 31 01 	lds	r24, 0x0131
    4bd0:	85 ff       	sbrs	r24, 5
    4bd2:	06 c0       	rjmp	.+12     	; 0x4be0 <__vector_8+0x46>
    4bd4:	80 91 31 01 	lds	r24, 0x0131
    4bd8:	80 62       	ori	r24, 0x20	; 32
    4bda:	81 ab       	sts	0x51, r24
    4bdc:	85 e0       	ldi	r24, 0x05	; 5
    4bde:	05 c0       	rjmp	.+10     	; 0x4bea <__vector_8+0x50>
    4be0:	80 91 31 01 	lds	r24, 0x0131
    4be4:	80 61       	ori	r24, 0x10	; 16
    4be6:	81 ab       	sts	0x51, r24
    4be8:	84 e0       	ldi	r24, 0x04	; 4
    4bea:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <findDmaIntElement>
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	41 f0       	breq	.+16     	; 0x4c02 <__vector_8+0x68>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	11 96       	adiw	r26, 0x01	; 1
    4bf6:	ed 91       	ld	r30, X+
    4bf8:	fc 91       	ld	r31, X
    4bfa:	12 97       	sbiw	r26, 0x02	; 2
    4bfc:	30 97       	sbiw	r30, 0x00	; 0
    4bfe:	09 f0       	breq	.+2      	; 0x4c02 <__vector_8+0x68>
    4c00:	19 95       	eicall
    4c02:	ff 91       	pop	r31
    4c04:	ef 91       	pop	r30
    4c06:	bf 91       	pop	r27
    4c08:	af 91       	pop	r26
    4c0a:	9f 91       	pop	r25
    4c0c:	8f 91       	pop	r24
    4c0e:	7f 91       	pop	r23
    4c10:	6f 91       	pop	r22
    4c12:	5f 91       	pop	r21
    4c14:	4f 91       	pop	r20
    4c16:	3f 91       	pop	r19
    4c18:	2f 91       	pop	r18
    4c1a:	0f 90       	pop	r0
    4c1c:	0b be       	out	0x3b, r0	; 59
    4c1e:	0f 90       	pop	r0
    4c20:	09 be       	out	0x39, r0	; 57
    4c22:	0f 90       	pop	r0
    4c24:	08 be       	out	0x38, r0	; 56
    4c26:	0f 90       	pop	r0
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	0f 90       	pop	r0
    4c2c:	1f 90       	pop	r1
    4c2e:	18 95       	reti

00004c30 <__vector_9>:
    4c30:	1f 92       	push	r1
    4c32:	0f 92       	push	r0
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	0f 92       	push	r0
    4c38:	08 b6       	in	r0, 0x38	; 56
    4c3a:	0f 92       	push	r0
    4c3c:	09 b6       	in	r0, 0x39	; 57
    4c3e:	0f 92       	push	r0
    4c40:	0b b6       	in	r0, 0x3b	; 59
    4c42:	0f 92       	push	r0
    4c44:	11 24       	eor	r1, r1
    4c46:	2f 93       	push	r18
    4c48:	3f 93       	push	r19
    4c4a:	4f 93       	push	r20
    4c4c:	5f 93       	push	r21
    4c4e:	6f 93       	push	r22
    4c50:	7f 93       	push	r23
    4c52:	8f 93       	push	r24
    4c54:	9f 93       	push	r25
    4c56:	af 93       	push	r26
    4c58:	bf 93       	push	r27
    4c5a:	ef 93       	push	r30
    4c5c:	ff 93       	push	r31
    4c5e:	80 91 41 01 	lds	r24, 0x0141
    4c62:	85 ff       	sbrs	r24, 5
    4c64:	07 c0       	rjmp	.+14     	; 0x4c74 <__vector_9+0x44>
    4c66:	80 91 41 01 	lds	r24, 0x0141
    4c6a:	80 62       	ori	r24, 0x20	; 32
    4c6c:	80 93 41 01 	sts	0x0141, r24
    4c70:	87 e0       	ldi	r24, 0x07	; 7
    4c72:	06 c0       	rjmp	.+12     	; 0x4c80 <__vector_9+0x50>
    4c74:	80 91 41 01 	lds	r24, 0x0141
    4c78:	80 61       	ori	r24, 0x10	; 16
    4c7a:	80 93 41 01 	sts	0x0141, r24
    4c7e:	86 e0       	ldi	r24, 0x06	; 6
    4c80:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <findDmaIntElement>
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	41 f0       	breq	.+16     	; 0x4c98 <__vector_9+0x68>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	11 96       	adiw	r26, 0x01	; 1
    4c8c:	ed 91       	ld	r30, X+
    4c8e:	fc 91       	ld	r31, X
    4c90:	12 97       	sbiw	r26, 0x02	; 2
    4c92:	30 97       	sbiw	r30, 0x00	; 0
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <__vector_9+0x68>
    4c96:	19 95       	eicall
    4c98:	ff 91       	pop	r31
    4c9a:	ef 91       	pop	r30
    4c9c:	bf 91       	pop	r27
    4c9e:	af 91       	pop	r26
    4ca0:	9f 91       	pop	r25
    4ca2:	8f 91       	pop	r24
    4ca4:	7f 91       	pop	r23
    4ca6:	6f 91       	pop	r22
    4ca8:	5f 91       	pop	r21
    4caa:	4f 91       	pop	r20
    4cac:	3f 91       	pop	r19
    4cae:	2f 91       	pop	r18
    4cb0:	0f 90       	pop	r0
    4cb2:	0b be       	out	0x3b, r0	; 59
    4cb4:	0f 90       	pop	r0
    4cb6:	09 be       	out	0x39, r0	; 57
    4cb8:	0f 90       	pop	r0
    4cba:	08 be       	out	0x38, r0	; 56
    4cbc:	0f 90       	pop	r0
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	0f 90       	pop	r0
    4cc2:	1f 90       	pop	r1
    4cc4:	18 95       	reti

00004cc6 <hal_requestDmaInterrupt>:
    4cc6:	cf 92       	push	r12
    4cc8:	df 92       	push	r13
    4cca:	ef 92       	push	r14
    4ccc:	ff 92       	push	r15
    4cce:	0f 93       	push	r16
    4cd0:	1f 93       	push	r17
    4cd2:	cf 93       	push	r28
    4cd4:	df 93       	push	r29
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62
    4cda:	27 97       	sbiw	r28, 0x07	; 7
    4cdc:	cd bf       	out	0x3d, r28	; 61
    4cde:	de bf       	out	0x3e, r29	; 62
    4ce0:	8e 83       	std	Y+6, r24	; 0x06
    4ce2:	9f 83       	std	Y+7, r25	; 0x07
    4ce4:	06 2f       	mov	r16, r22
    4ce6:	6a 01       	movw	r12, r20
    4ce8:	8f b7       	in	r24, 0x3f	; 63
    4cea:	89 83       	std	Y+1, r24	; 0x01
    4cec:	f8 94       	cli
    4cee:	ee 81       	ldd	r30, Y+6	; 0x06
    4cf0:	ff 81       	ldd	r31, Y+7	; 0x07
    4cf2:	80 91 73 21 	lds	r24, 0x2173
    4cf6:	90 91 74 21 	lds	r25, 0x2174
    4cfa:	24 81       	ldd	r18, Z+4	; 0x04
    4cfc:	35 81       	ldd	r19, Z+5	; 0x05
    4cfe:	28 17       	cp	r18, r24
    4d00:	39 07       	cpc	r19, r25
    4d02:	21 f0       	breq	.+8      	; 0x4d0c <hal_requestDmaInterrupt+0x46>
    4d04:	89 81       	ldd	r24, Y+1	; 0x01
    4d06:	8f bf       	out	0x3f, r24	; 63
    4d08:	8e ef       	ldi	r24, 0xFE	; 254
    4d0a:	51 c0       	rjmp	.+162    	; 0x4dae <hal_requestDmaInterrupt+0xe8>
    4d0c:	ee 81       	ldd	r30, Y+6	; 0x06
    4d0e:	ff 81       	ldd	r31, Y+7	; 0x07
    4d10:	e0 80       	ld	r14, Z
    4d12:	f1 80       	ldd	r15, Z+1	; 0x01
    4d14:	d7 01       	movw	r26, r14
    4d16:	1c 91       	ld	r17, X
    4d18:	16 0f       	add	r17, r22
    4d1a:	18 30       	cpi	r17, 0x08	; 8
    4d1c:	20 f0       	brcs	.+8      	; 0x4d26 <hal_requestDmaInterrupt+0x60>
    4d1e:	89 81       	ldd	r24, Y+1	; 0x01
    4d20:	8f bf       	out	0x3f, r24	; 63
    4d22:	8b ef       	ldi	r24, 0xFB	; 251
    4d24:	44 c0       	rjmp	.+136    	; 0x4dae <hal_requestDmaInterrupt+0xe8>
    4d26:	81 2f       	mov	r24, r17
    4d28:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <findDmaIntElement>
    4d2c:	00 97       	sbiw	r24, 0x00	; 0
    4d2e:	e1 f5       	brne	.+120    	; 0x4da8 <hal_requestDmaInterrupt+0xe2>
    4d30:	83 e0       	ldi	r24, 0x03	; 3
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    4d38:	8a 83       	std	Y+2, r24	; 0x02
    4d3a:	9b 83       	std	Y+3, r25	; 0x03
    4d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d40:	97 fd       	sbrc	r25, 7
    4d42:	0c c0       	rjmp	.+24     	; 0x4d5c <hal_requestDmaInterrupt+0x96>
    4d44:	80 91 65 21 	lds	r24, 0x2165
    4d48:	90 91 66 21 	lds	r25, 0x2166
    4d4c:	6a 81       	ldd	r22, Y+2	; 0x02
    4d4e:	7b 81       	ldd	r23, Y+3	; 0x03
    4d50:	41 e0       	ldi	r20, 0x01	; 1
    4d52:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    4d56:	8a 81       	ldd	r24, Y+2	; 0x02
    4d58:	9b 81       	ldd	r25, Y+3	; 0x03
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <hal_requestDmaInterrupt+0x9a>
    4d5c:	8f ef       	ldi	r24, 0xFF	; 255
    4d5e:	9f ef       	ldi	r25, 0xFF	; 255
    4d60:	8c 83       	std	Y+4, r24	; 0x04
    4d62:	9d 83       	std	Y+5, r25	; 0x05
    4d64:	8c 81       	ldd	r24, Y+4	; 0x04
    4d66:	9d 81       	ldd	r25, Y+5	; 0x05
    4d68:	97 ff       	sbrs	r25, 7
    4d6a:	04 c0       	rjmp	.+8      	; 0x4d74 <hal_requestDmaInterrupt+0xae>
    4d6c:	89 81       	ldd	r24, Y+1	; 0x01
    4d6e:	8f bf       	out	0x3f, r24	; 63
    4d70:	8f ef       	ldi	r24, 0xFF	; 255
    4d72:	1d c0       	rjmp	.+58     	; 0x4dae <hal_requestDmaInterrupt+0xe8>
    4d74:	ec 81       	ldd	r30, Y+4	; 0x04
    4d76:	fd 81       	ldd	r31, Y+5	; 0x05
    4d78:	01 90       	ld	r0, Z+
    4d7a:	f0 81       	ld	r31, Z
    4d7c:	e0 2d       	mov	r30, r0
    4d7e:	10 83       	st	Z, r17
    4d80:	c1 82       	std	Z+1, r12	; 0x01
    4d82:	d2 82       	std	Z+2, r13	; 0x02
    4d84:	f7 01       	movw	r30, r14
    4d86:	82 81       	ldd	r24, Z+2	; 0x02
    4d88:	8f 5f       	subi	r24, 0xFF	; 255
    4d8a:	82 83       	std	Z+2, r24	; 0x02
    4d8c:	03 80       	ldd	r0, Z+3	; 0x03
    4d8e:	f4 81       	ldd	r31, Z+4	; 0x04
    4d90:	e0 2d       	mov	r30, r0
    4d92:	81 81       	ldd	r24, Z+1	; 0x01
    4d94:	00 23       	and	r16, r16
    4d96:	11 f4       	brne	.+4      	; 0x4d9c <hal_requestDmaInterrupt+0xd6>
    4d98:	83 60       	ori	r24, 0x03	; 3
    4d9a:	01 c0       	rjmp	.+2      	; 0x4d9e <hal_requestDmaInterrupt+0xd8>
    4d9c:	8c 60       	ori	r24, 0x0C	; 12
    4d9e:	81 83       	std	Z+1, r24	; 0x01
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	8f bf       	out	0x3f, r24	; 63
    4da4:	80 e0       	ldi	r24, 0x00	; 0
    4da6:	03 c0       	rjmp	.+6      	; 0x4dae <hal_requestDmaInterrupt+0xe8>
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	8f bf       	out	0x3f, r24	; 63
    4dac:	8a ef       	ldi	r24, 0xFA	; 250
    4dae:	27 96       	adiw	r28, 0x07	; 7
    4db0:	cd bf       	out	0x3d, r28	; 61
    4db2:	de bf       	out	0x3e, r29	; 62
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	0f 91       	pop	r16
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	df 90       	pop	r13
    4dc2:	cf 90       	pop	r12
    4dc4:	08 95       	ret

00004dc6 <hal_releaseDmaInterrupt>:
    4dc6:	cf 93       	push	r28
    4dc8:	df 93       	push	r29
    4dca:	00 d0       	rcall	.+0      	; 0x4dcc <hal_releaseDmaInterrupt+0x6>
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
    4dd0:	8a 83       	std	Y+2, r24	; 0x02
    4dd2:	9b 83       	std	Y+3, r25	; 0x03
    4dd4:	8f b7       	in	r24, 0x3f	; 63
    4dd6:	89 83       	std	Y+1, r24	; 0x01
    4dd8:	f8 94       	cli
    4dda:	ea 81       	ldd	r30, Y+2	; 0x02
    4ddc:	fb 81       	ldd	r31, Y+3	; 0x03
    4dde:	80 91 73 21 	lds	r24, 0x2173
    4de2:	90 91 74 21 	lds	r25, 0x2174
    4de6:	24 81       	ldd	r18, Z+4	; 0x04
    4de8:	35 81       	ldd	r19, Z+5	; 0x05
    4dea:	28 17       	cp	r18, r24
    4dec:	39 07       	cpc	r19, r25
    4dee:	21 f0       	breq	.+8      	; 0x4df8 <hal_releaseDmaInterrupt+0x32>
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	8f bf       	out	0x3f, r24	; 63
    4df4:	8e ef       	ldi	r24, 0xFE	; 254
    4df6:	4d c0       	rjmp	.+154    	; 0x4e92 <hal_releaseDmaInterrupt+0xcc>
    4df8:	ea 81       	ldd	r30, Y+2	; 0x02
    4dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    4dfc:	a0 81       	ld	r26, Z
    4dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    4e00:	2c 91       	ld	r18, X
    4e02:	26 0f       	add	r18, r22
    4e04:	e0 91 65 21 	lds	r30, 0x2165
    4e08:	f0 91 66 21 	lds	r31, 0x2166
    4e0c:	42 81       	ldd	r20, Z+2	; 0x02
    4e0e:	53 81       	ldd	r21, Z+3	; 0x03
    4e10:	e0 91 65 21 	lds	r30, 0x2165
    4e14:	f0 91 66 21 	lds	r31, 0x2166
    4e18:	30 c0       	rjmp	.+96     	; 0x4e7a <hal_releaseDmaInterrupt+0xb4>
    4e1a:	e0 91 a1 2b 	lds	r30, 0x2BA1
    4e1e:	f0 91 a2 2b 	lds	r31, 0x2BA2
    4e22:	01 90       	ld	r0, Z+
    4e24:	f0 81       	ld	r31, Z
    4e26:	e0 2d       	mov	r30, r0
    4e28:	80 81       	ld	r24, Z
    4e2a:	82 17       	cp	r24, r18
    4e2c:	01 f5       	brne	.+64     	; 0x4e6e <hal_releaseDmaInterrupt+0xa8>
    4e2e:	12 96       	adiw	r26, 0x02	; 2
    4e30:	8c 91       	ld	r24, X
    4e32:	12 97       	sbiw	r26, 0x02	; 2
    4e34:	81 50       	subi	r24, 0x01	; 1
    4e36:	12 96       	adiw	r26, 0x02	; 2
    4e38:	8c 93       	st	X, r24
    4e3a:	12 97       	sbiw	r26, 0x02	; 2
    4e3c:	13 96       	adiw	r26, 0x03	; 3
    4e3e:	ed 91       	ld	r30, X+
    4e40:	fc 91       	ld	r31, X
    4e42:	14 97       	sbiw	r26, 0x04	; 4
    4e44:	81 81       	ldd	r24, Z+1	; 0x01
    4e46:	66 23       	and	r22, r22
    4e48:	11 f4       	brne	.+4      	; 0x4e4e <hal_releaseDmaInterrupt+0x88>
    4e4a:	8c 7f       	andi	r24, 0xFC	; 252
    4e4c:	01 c0       	rjmp	.+2      	; 0x4e50 <hal_releaseDmaInterrupt+0x8a>
    4e4e:	83 7f       	andi	r24, 0xF3	; 243
    4e50:	81 83       	std	Z+1, r24	; 0x01
    4e52:	80 91 65 21 	lds	r24, 0x2165
    4e56:	90 91 66 21 	lds	r25, 0x2166
    4e5a:	60 91 a1 2b 	lds	r22, 0x2BA1
    4e5e:	70 91 a2 2b 	lds	r23, 0x2BA2
    4e62:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	8f bf       	out	0x3f, r24	; 63
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	12 c0       	rjmp	.+36     	; 0x4e92 <hal_releaseDmaInterrupt+0xcc>
    4e6e:	41 50       	subi	r20, 0x01	; 1
    4e70:	50 40       	sbci	r21, 0x00	; 0
    4e72:	e0 91 a1 2b 	lds	r30, 0x2BA1
    4e76:	f0 91 a2 2b 	lds	r31, 0x2BA2
    4e7a:	80 85       	ldd	r24, Z+8	; 0x08
    4e7c:	91 85       	ldd	r25, Z+9	; 0x09
    4e7e:	80 93 a1 2b 	sts	0x2BA1, r24
    4e82:	90 93 a2 2b 	sts	0x2BA2, r25
    4e86:	14 16       	cp	r1, r20
    4e88:	15 06       	cpc	r1, r21
    4e8a:	3c f2       	brlt	.-114    	; 0x4e1a <hal_releaseDmaInterrupt+0x54>
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
    4e8e:	8f bf       	out	0x3f, r24	; 63
    4e90:	8b ef       	ldi	r24, 0xFB	; 251
    4e92:	23 96       	adiw	r28, 0x03	; 3
    4e94:	cd bf       	out	0x3d, r28	; 61
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	08 95       	ret

00004e9e <hal_requestDmaChannel>:
    4e9e:	1f 93       	push	r17
    4ea0:	cf 93       	push	r28
    4ea2:	df 93       	push	r29
    4ea4:	cd b7       	in	r28, 0x3d	; 61
    4ea6:	de b7       	in	r29, 0x3e	; 62
    4ea8:	25 97       	sbiw	r28, 0x05	; 5
    4eaa:	cd bf       	out	0x3d, r28	; 61
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	8f b7       	in	r24, 0x3f	; 63
    4eb0:	89 83       	std	Y+1, r24	; 0x01
    4eb2:	f8 94       	cli
    4eb4:	80 91 81 21 	lds	r24, 0x2181
    4eb8:	88 23       	and	r24, r24
    4eba:	d9 f0       	breq	.+54     	; 0x4ef2 <hal_requestDmaChannel+0x54>
    4ebc:	8f b7       	in	r24, 0x3f	; 63
    4ebe:	8a 83       	std	Y+2, r24	; 0x02
    4ec0:	f8 94       	cli
    4ec2:	80 91 00 01 	lds	r24, 0x0100
    4ec6:	8f 77       	andi	r24, 0x7F	; 127
    4ec8:	80 93 00 01 	sts	0x0100, r24
    4ecc:	80 91 00 01 	lds	r24, 0x0100
    4ed0:	83 7f       	andi	r24, 0xF3	; 243
    4ed2:	80 93 00 01 	sts	0x0100, r24
    4ed6:	80 91 00 01 	lds	r24, 0x0100
    4eda:	83 60       	ori	r24, 0x03	; 3
    4edc:	80 93 00 01 	sts	0x0100, r24
    4ee0:	80 91 00 01 	lds	r24, 0x0100
    4ee4:	80 68       	ori	r24, 0x80	; 128
    4ee6:	80 93 00 01 	sts	0x0100, r24
    4eea:	8a 81       	ldd	r24, Y+2	; 0x02
    4eec:	8f bf       	out	0x3f, r24	; 63
    4eee:	10 92 81 21 	sts	0x2181, r1
    4ef2:	44 e0       	ldi	r20, 0x04	; 4
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	10 e0       	ldi	r17, 0x00	; 0
    4ef8:	e0 91 73 21 	lds	r30, 0x2173
    4efc:	f0 91 74 21 	lds	r31, 0x2174
    4f00:	82 81       	ldd	r24, Z+2	; 0x02
    4f02:	93 81       	ldd	r25, Z+3	; 0x03
    4f04:	e0 91 73 21 	lds	r30, 0x2173
    4f08:	f0 91 74 21 	lds	r31, 0x2174
    4f0c:	0b c0       	rjmp	.+22     	; 0x4f24 <hal_requestDmaChannel+0x86>
    4f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f10:	fb 81       	ldd	r31, Y+3	; 0x03
    4f12:	01 90       	ld	r0, Z+
    4f14:	f0 81       	ld	r31, Z
    4f16:	e0 2d       	mov	r30, r0
    4f18:	20 81       	ld	r18, Z
    4f1a:	21 17       	cp	r18, r17
    4f1c:	59 f0       	breq	.+22     	; 0x4f34 <hal_requestDmaChannel+0x96>
    4f1e:	01 97       	sbiw	r24, 0x01	; 1
    4f20:	ea 81       	ldd	r30, Y+2	; 0x02
    4f22:	fb 81       	ldd	r31, Y+3	; 0x03
    4f24:	20 85       	ldd	r18, Z+8	; 0x08
    4f26:	31 85       	ldd	r19, Z+9	; 0x09
    4f28:	2a 83       	std	Y+2, r18	; 0x02
    4f2a:	3b 83       	std	Y+3, r19	; 0x03
    4f2c:	18 16       	cp	r1, r24
    4f2e:	19 06       	cpc	r1, r25
    4f30:	74 f3       	brlt	.-36     	; 0x4f0e <hal_requestDmaChannel+0x70>
    4f32:	07 c0       	rjmp	.+14     	; 0x4f42 <hal_requestDmaChannel+0xa4>
    4f34:	30 97       	sbiw	r30, 0x00	; 0
    4f36:	29 f0       	breq	.+10     	; 0x4f42 <hal_requestDmaChannel+0xa4>
    4f38:	1e 5f       	subi	r17, 0xFE	; 254
    4f3a:	41 50       	subi	r20, 0x01	; 1
    4f3c:	50 40       	sbci	r21, 0x00	; 0
    4f3e:	e1 f6       	brne	.-72     	; 0x4ef8 <hal_requestDmaChannel+0x5a>
    4f40:	4f c0       	rjmp	.+158    	; 0x4fe0 <hal_requestDmaChannel+0x142>
    4f42:	85 e0       	ldi	r24, 0x05	; 5
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    4f4a:	8a 83       	std	Y+2, r24	; 0x02
    4f4c:	9b 83       	std	Y+3, r25	; 0x03
    4f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f50:	9b 81       	ldd	r25, Y+3	; 0x03
    4f52:	97 fd       	sbrc	r25, 7
    4f54:	2d c0       	rjmp	.+90     	; 0x4fb0 <hal_requestDmaChannel+0x112>
    4f56:	ea 81       	ldd	r30, Y+2	; 0x02
    4f58:	fb 81       	ldd	r31, Y+3	; 0x03
    4f5a:	01 90       	ld	r0, Z+
    4f5c:	f0 81       	ld	r31, Z
    4f5e:	e0 2d       	mov	r30, r0
    4f60:	11 82       	std	Z+1, r1	; 0x01
    4f62:	10 83       	st	Z, r17
    4f64:	12 82       	std	Z+2, r1	; 0x02
    4f66:	12 30       	cpi	r17, 0x02	; 2
    4f68:	69 f0       	breq	.+26     	; 0x4f84 <hal_requestDmaChannel+0xe6>
    4f6a:	13 30       	cpi	r17, 0x03	; 3
    4f6c:	18 f4       	brcc	.+6      	; 0x4f74 <hal_requestDmaChannel+0xd6>
    4f6e:	11 23       	and	r17, r17
    4f70:	31 f0       	breq	.+12     	; 0x4f7e <hal_requestDmaChannel+0xe0>
    4f72:	12 c0       	rjmp	.+36     	; 0x4f98 <hal_requestDmaChannel+0xfa>
    4f74:	14 30       	cpi	r17, 0x04	; 4
    4f76:	49 f0       	breq	.+18     	; 0x4f8a <hal_requestDmaChannel+0xec>
    4f78:	16 30       	cpi	r17, 0x06	; 6
    4f7a:	71 f4       	brne	.+28     	; 0x4f98 <hal_requestDmaChannel+0xfa>
    4f7c:	09 c0       	rjmp	.+18     	; 0x4f90 <hal_requestDmaChannel+0xf2>
    4f7e:	80 e1       	ldi	r24, 0x10	; 16
    4f80:	91 e0       	ldi	r25, 0x01	; 1
    4f82:	08 c0       	rjmp	.+16     	; 0x4f94 <hal_requestDmaChannel+0xf6>
    4f84:	80 e2       	ldi	r24, 0x20	; 32
    4f86:	91 e0       	ldi	r25, 0x01	; 1
    4f88:	05 c0       	rjmp	.+10     	; 0x4f94 <hal_requestDmaChannel+0xf6>
    4f8a:	80 e3       	ldi	r24, 0x30	; 48
    4f8c:	91 e0       	ldi	r25, 0x01	; 1
    4f8e:	02 c0       	rjmp	.+4      	; 0x4f94 <hal_requestDmaChannel+0xf6>
    4f90:	80 e4       	ldi	r24, 0x40	; 64
    4f92:	91 e0       	ldi	r25, 0x01	; 1
    4f94:	83 83       	std	Z+3, r24	; 0x03
    4f96:	94 83       	std	Z+4, r25	; 0x04
    4f98:	80 91 73 21 	lds	r24, 0x2173
    4f9c:	90 91 74 21 	lds	r25, 0x2174
    4fa0:	6a 81       	ldd	r22, Y+2	; 0x02
    4fa2:	7b 81       	ldd	r23, Y+3	; 0x03
    4fa4:	41 e0       	ldi	r20, 0x01	; 1
    4fa6:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    4faa:	8a 81       	ldd	r24, Y+2	; 0x02
    4fac:	9b 81       	ldd	r25, Y+3	; 0x03
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <hal_requestDmaChannel+0x116>
    4fb0:	8f ef       	ldi	r24, 0xFF	; 255
    4fb2:	9f ef       	ldi	r25, 0xFF	; 255
    4fb4:	8c 83       	std	Y+4, r24	; 0x04
    4fb6:	9d 83       	std	Y+5, r25	; 0x05
    4fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    4fba:	9d 81       	ldd	r25, Y+5	; 0x05
    4fbc:	97 ff       	sbrs	r25, 7
    4fbe:	05 c0       	rjmp	.+10     	; 0x4fca <hal_requestDmaChannel+0x12c>
    4fc0:	89 81       	ldd	r24, Y+1	; 0x01
    4fc2:	8f bf       	out	0x3f, r24	; 63
    4fc4:	8f ef       	ldi	r24, 0xFF	; 255
    4fc6:	9f ef       	ldi	r25, 0xFF	; 255
    4fc8:	04 c0       	rjmp	.+8      	; 0x4fd2 <hal_requestDmaChannel+0x134>
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	8f bf       	out	0x3f, r24	; 63
    4fce:	8c 81       	ldd	r24, Y+4	; 0x04
    4fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    4fd2:	25 96       	adiw	r28, 0x05	; 5
    4fd4:	cd bf       	out	0x3d, r28	; 61
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	df 91       	pop	r29
    4fda:	cf 91       	pop	r28
    4fdc:	1f 91       	pop	r17
    4fde:	08 95       	ret
    4fe0:	89 81       	ldd	r24, Y+1	; 0x01
    4fe2:	8f bf       	out	0x3f, r24	; 63
    4fe4:	89 ef       	ldi	r24, 0xF9	; 249
    4fe6:	9f ef       	ldi	r25, 0xFF	; 255
    4fe8:	f4 cf       	rjmp	.-24     	; 0x4fd2 <hal_requestDmaChannel+0x134>

00004fea <hal_releaseDmaChannel>:
    4fea:	af 92       	push	r10
    4fec:	bf 92       	push	r11
    4fee:	cf 92       	push	r12
    4ff0:	df 92       	push	r13
    4ff2:	ef 92       	push	r14
    4ff4:	ff 92       	push	r15
    4ff6:	0f 93       	push	r16
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	00 d0       	rcall	.+0      	; 0x5000 <hal_releaseDmaChannel+0x16>
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	8a 83       	std	Y+2, r24	; 0x02
    5006:	9b 83       	std	Y+3, r25	; 0x03
    5008:	8f b7       	in	r24, 0x3f	; 63
    500a:	89 83       	std	Y+1, r24	; 0x01
    500c:	f8 94       	cli
    500e:	ea 81       	ldd	r30, Y+2	; 0x02
    5010:	fb 81       	ldd	r31, Y+3	; 0x03
    5012:	80 91 73 21 	lds	r24, 0x2173
    5016:	90 91 74 21 	lds	r25, 0x2174
    501a:	24 81       	ldd	r18, Z+4	; 0x04
    501c:	35 81       	ldd	r19, Z+5	; 0x05
    501e:	28 17       	cp	r18, r24
    5020:	39 07       	cpc	r19, r25
    5022:	21 f0       	breq	.+8      	; 0x502c <hal_releaseDmaChannel+0x42>
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	8f bf       	out	0x3f, r24	; 63
    5028:	8e ef       	ldi	r24, 0xFE	; 254
    502a:	8a c0       	rjmp	.+276    	; 0x5140 <hal_releaseDmaChannel+0x156>
    502c:	ea 81       	ldd	r30, Y+2	; 0x02
    502e:	fb 81       	ldd	r31, Y+3	; 0x03
    5030:	00 81       	ld	r16, Z
    5032:	11 81       	ldd	r17, Z+1	; 0x01
    5034:	82 e0       	ldi	r24, 0x02	; 2
    5036:	a8 2e       	mov	r10, r24
    5038:	b1 2c       	mov	r11, r1
    503a:	ff 24       	eor	r15, r15
    503c:	d8 01       	movw	r26, r16
    503e:	ec 90       	ld	r14, X
    5040:	ef 0c       	add	r14, r15
    5042:	e0 91 65 21 	lds	r30, 0x2165
    5046:	f0 91 66 21 	lds	r31, 0x2166
    504a:	c2 80       	ldd	r12, Z+2	; 0x02
    504c:	d3 80       	ldd	r13, Z+3	; 0x03
    504e:	e0 91 65 21 	lds	r30, 0x2165
    5052:	f0 91 66 21 	lds	r31, 0x2166
    5056:	3a c0       	rjmp	.+116    	; 0x50cc <hal_releaseDmaChannel+0xe2>
    5058:	e0 91 a5 2b 	lds	r30, 0x2BA5
    505c:	f0 91 a6 2b 	lds	r31, 0x2BA6
    5060:	a0 81       	ld	r26, Z
    5062:	b1 81       	ldd	r27, Z+1	; 0x01
    5064:	e0 91 a5 2b 	lds	r30, 0x2BA5
    5068:	f0 91 a6 2b 	lds	r31, 0x2BA6
    506c:	82 85       	ldd	r24, Z+10	; 0x0a
    506e:	93 85       	ldd	r25, Z+11	; 0x0b
    5070:	80 93 a3 2b 	sts	0x2BA3, r24
    5074:	90 93 a4 2b 	sts	0x2BA4, r25
    5078:	8c 91       	ld	r24, X
    507a:	8e 15       	cp	r24, r14
    507c:	01 f5       	brne	.+64     	; 0x50be <hal_releaseDmaChannel+0xd4>
    507e:	f8 01       	movw	r30, r16
    5080:	82 81       	ldd	r24, Z+2	; 0x02
    5082:	81 50       	subi	r24, 0x01	; 1
    5084:	82 83       	std	Z+2, r24	; 0x02
    5086:	03 80       	ldd	r0, Z+3	; 0x03
    5088:	f4 81       	ldd	r31, Z+4	; 0x04
    508a:	e0 2d       	mov	r30, r0
    508c:	81 81       	ldd	r24, Z+1	; 0x01
    508e:	ff 20       	and	r15, r15
    5090:	11 f4       	brne	.+4      	; 0x5096 <hal_releaseDmaChannel+0xac>
    5092:	8c 7f       	andi	r24, 0xFC	; 252
    5094:	01 c0       	rjmp	.+2      	; 0x5098 <hal_releaseDmaChannel+0xae>
    5096:	83 7f       	andi	r24, 0xF3	; 243
    5098:	81 83       	std	Z+1, r24	; 0x01
    509a:	80 91 65 21 	lds	r24, 0x2165
    509e:	90 91 66 21 	lds	r25, 0x2166
    50a2:	60 91 a5 2b 	lds	r22, 0x2BA5
    50a6:	70 91 a6 2b 	lds	r23, 0x2BA6
    50aa:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    50ae:	80 91 a3 2b 	lds	r24, 0x2BA3
    50b2:	90 91 a4 2b 	lds	r25, 0x2BA4
    50b6:	80 93 a5 2b 	sts	0x2BA5, r24
    50ba:	90 93 a6 2b 	sts	0x2BA6, r25
    50be:	08 94       	sec
    50c0:	c1 08       	sbc	r12, r1
    50c2:	d1 08       	sbc	r13, r1
    50c4:	e0 91 a5 2b 	lds	r30, 0x2BA5
    50c8:	f0 91 a6 2b 	lds	r31, 0x2BA6
    50cc:	80 85       	ldd	r24, Z+8	; 0x08
    50ce:	91 85       	ldd	r25, Z+9	; 0x09
    50d0:	80 93 a5 2b 	sts	0x2BA5, r24
    50d4:	90 93 a6 2b 	sts	0x2BA6, r25
    50d8:	1c 14       	cp	r1, r12
    50da:	1d 04       	cpc	r1, r13
    50dc:	0c f4       	brge	.+2      	; 0x50e0 <hal_releaseDmaChannel+0xf6>
    50de:	bc cf       	rjmp	.-136    	; 0x5058 <hal_releaseDmaChannel+0x6e>
    50e0:	f3 94       	inc	r15
    50e2:	08 94       	sec
    50e4:	a1 08       	sbc	r10, r1
    50e6:	b1 08       	sbc	r11, r1
    50e8:	a1 14       	cp	r10, r1
    50ea:	b1 04       	cpc	r11, r1
    50ec:	09 f0       	breq	.+2      	; 0x50f0 <hal_releaseDmaChannel+0x106>
    50ee:	a6 cf       	rjmp	.-180    	; 0x503c <hal_releaseDmaChannel+0x52>
    50f0:	d8 01       	movw	r26, r16
    50f2:	13 96       	adiw	r26, 0x03	; 3
    50f4:	ed 91       	ld	r30, X+
    50f6:	fc 91       	ld	r31, X
    50f8:	14 97       	sbiw	r26, 0x04	; 4
    50fa:	80 81       	ld	r24, Z
    50fc:	8f 77       	andi	r24, 0x7F	; 127
    50fe:	80 83       	st	Z, r24
    5100:	13 96       	adiw	r26, 0x03	; 3
    5102:	ed 91       	ld	r30, X+
    5104:	fc 91       	ld	r31, X
    5106:	14 97       	sbiw	r26, 0x04	; 4
    5108:	80 81       	ld	r24, Z
    510a:	8f 77       	andi	r24, 0x7F	; 127
    510c:	80 83       	st	Z, r24
    510e:	13 96       	adiw	r26, 0x03	; 3
    5110:	ed 91       	ld	r30, X+
    5112:	fc 91       	ld	r31, X
    5114:	14 97       	sbiw	r26, 0x04	; 4
    5116:	80 81       	ld	r24, Z
    5118:	80 64       	ori	r24, 0x40	; 64
    511a:	80 83       	st	Z, r24
    511c:	13 96       	adiw	r26, 0x03	; 3
    511e:	ed 91       	ld	r30, X+
    5120:	fc 91       	ld	r31, X
    5122:	14 97       	sbiw	r26, 0x04	; 4
    5124:	80 81       	ld	r24, Z
    5126:	8f 7b       	andi	r24, 0xBF	; 191
    5128:	80 83       	st	Z, r24
    512a:	80 91 73 21 	lds	r24, 0x2173
    512e:	90 91 74 21 	lds	r25, 0x2174
    5132:	6a 81       	ldd	r22, Y+2	; 0x02
    5134:	7b 81       	ldd	r23, Y+3	; 0x03
    5136:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    513a:	89 81       	ldd	r24, Y+1	; 0x01
    513c:	8f bf       	out	0x3f, r24	; 63
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	23 96       	adiw	r28, 0x03	; 3
    5142:	cd bf       	out	0x3d, r28	; 61
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	1f 91       	pop	r17
    514c:	0f 91       	pop	r16
    514e:	ff 90       	pop	r15
    5150:	ef 90       	pop	r14
    5152:	df 90       	pop	r13
    5154:	cf 90       	pop	r12
    5156:	bf 90       	pop	r11
    5158:	af 90       	pop	r10
    515a:	08 95       	ret

0000515c <hal_setDmaBlockSize>:
    515c:	cf 93       	push	r28
    515e:	df 93       	push	r29
    5160:	00 d0       	rcall	.+0      	; 0x5162 <hal_setDmaBlockSize+0x6>
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
    5166:	8a 83       	std	Y+2, r24	; 0x02
    5168:	9b 83       	std	Y+3, r25	; 0x03
    516a:	8f b7       	in	r24, 0x3f	; 63
    516c:	89 83       	std	Y+1, r24	; 0x01
    516e:	f8 94       	cli
    5170:	61 15       	cp	r22, r1
    5172:	71 05       	cpc	r23, r1
    5174:	21 f4       	brne	.+8      	; 0x517e <hal_setDmaBlockSize+0x22>
    5176:	89 81       	ldd	r24, Y+1	; 0x01
    5178:	8f bf       	out	0x3f, r24	; 63
    517a:	84 ef       	ldi	r24, 0xF4	; 244
    517c:	21 c0       	rjmp	.+66     	; 0x51c0 <hal_setDmaBlockSize+0x64>
    517e:	ea 81       	ldd	r30, Y+2	; 0x02
    5180:	fb 81       	ldd	r31, Y+3	; 0x03
    5182:	80 91 73 21 	lds	r24, 0x2173
    5186:	90 91 74 21 	lds	r25, 0x2174
    518a:	24 81       	ldd	r18, Z+4	; 0x04
    518c:	35 81       	ldd	r19, Z+5	; 0x05
    518e:	28 17       	cp	r18, r24
    5190:	39 07       	cpc	r19, r25
    5192:	21 f0       	breq	.+8      	; 0x519c <hal_setDmaBlockSize+0x40>
    5194:	89 81       	ldd	r24, Y+1	; 0x01
    5196:	8f bf       	out	0x3f, r24	; 63
    5198:	8e ef       	ldi	r24, 0xFE	; 254
    519a:	12 c0       	rjmp	.+36     	; 0x51c0 <hal_setDmaBlockSize+0x64>
    519c:	ea 81       	ldd	r30, Y+2	; 0x02
    519e:	fb 81       	ldd	r31, Y+3	; 0x03
    51a0:	01 90       	ld	r0, Z+
    51a2:	f0 81       	ld	r31, Z
    51a4:	e0 2d       	mov	r30, r0
    51a6:	a3 81       	ldd	r26, Z+3	; 0x03
    51a8:	b4 81       	ldd	r27, Z+4	; 0x04
    51aa:	8c 91       	ld	r24, X
    51ac:	8f 77       	andi	r24, 0x7F	; 127
    51ae:	8c 93       	st	X, r24
    51b0:	03 80       	ldd	r0, Z+3	; 0x03
    51b2:	f4 81       	ldd	r31, Z+4	; 0x04
    51b4:	e0 2d       	mov	r30, r0
    51b6:	64 83       	std	Z+4, r22	; 0x04
    51b8:	75 83       	std	Z+5, r23	; 0x05
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	8f bf       	out	0x3f, r24	; 63
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	23 96       	adiw	r28, 0x03	; 3
    51c2:	cd bf       	out	0x3d, r28	; 61
    51c4:	de bf       	out	0x3e, r29	; 62
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	08 95       	ret

000051cc <hal_setDmaSourceAddress>:
    51cc:	cf 92       	push	r12
    51ce:	df 92       	push	r13
    51d0:	ef 92       	push	r14
    51d2:	ff 92       	push	r15
    51d4:	cf 93       	push	r28
    51d6:	df 93       	push	r29
    51d8:	00 d0       	rcall	.+0      	; 0x51da <hal_setDmaSourceAddress+0xe>
    51da:	cd b7       	in	r28, 0x3d	; 61
    51dc:	de b7       	in	r29, 0x3e	; 62
    51de:	8a 83       	std	Y+2, r24	; 0x02
    51e0:	9b 83       	std	Y+3, r25	; 0x03
    51e2:	6a 01       	movw	r12, r20
    51e4:	7b 01       	movw	r14, r22
    51e6:	8f b7       	in	r24, 0x3f	; 63
    51e8:	89 83       	std	Y+1, r24	; 0x01
    51ea:	f8 94       	cli
    51ec:	ea 81       	ldd	r30, Y+2	; 0x02
    51ee:	fb 81       	ldd	r31, Y+3	; 0x03
    51f0:	80 91 73 21 	lds	r24, 0x2173
    51f4:	90 91 74 21 	lds	r25, 0x2174
    51f8:	24 81       	ldd	r18, Z+4	; 0x04
    51fa:	35 81       	ldd	r19, Z+5	; 0x05
    51fc:	28 17       	cp	r18, r24
    51fe:	39 07       	cpc	r19, r25
    5200:	21 f0       	breq	.+8      	; 0x520a <hal_setDmaSourceAddress+0x3e>
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	8f bf       	out	0x3f, r24	; 63
    5206:	8e ef       	ldi	r24, 0xFE	; 254
    5208:	21 c0       	rjmp	.+66     	; 0x524c <hal_setDmaSourceAddress+0x80>
    520a:	ea 81       	ldd	r30, Y+2	; 0x02
    520c:	fb 81       	ldd	r31, Y+3	; 0x03
    520e:	01 90       	ld	r0, Z+
    5210:	f0 81       	ld	r31, Z
    5212:	e0 2d       	mov	r30, r0
    5214:	a3 81       	ldd	r26, Z+3	; 0x03
    5216:	b4 81       	ldd	r27, Z+4	; 0x04
    5218:	8c 91       	ld	r24, X
    521a:	8f 77       	andi	r24, 0x7F	; 127
    521c:	8c 93       	st	X, r24
    521e:	a3 81       	ldd	r26, Z+3	; 0x03
    5220:	b4 81       	ldd	r27, Z+4	; 0x04
    5222:	18 96       	adiw	r26, 0x08	; 8
    5224:	4c 93       	st	X, r20
    5226:	a3 81       	ldd	r26, Z+3	; 0x03
    5228:	b4 81       	ldd	r27, Z+4	; 0x04
    522a:	45 2f       	mov	r20, r21
    522c:	56 2f       	mov	r21, r22
    522e:	67 2f       	mov	r22, r23
    5230:	77 27       	eor	r23, r23
    5232:	19 96       	adiw	r26, 0x09	; 9
    5234:	4c 93       	st	X, r20
    5236:	19 97       	sbiw	r26, 0x09	; 9
    5238:	03 80       	ldd	r0, Z+3	; 0x03
    523a:	f4 81       	ldd	r31, Z+4	; 0x04
    523c:	e0 2d       	mov	r30, r0
    523e:	67 01       	movw	r12, r14
    5240:	ee 24       	eor	r14, r14
    5242:	ff 24       	eor	r15, r15
    5244:	c2 86       	std	Z+10, r12	; 0x0a
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	8f bf       	out	0x3f, r24	; 63
    524a:	80 e0       	ldi	r24, 0x00	; 0
    524c:	23 96       	adiw	r28, 0x03	; 3
    524e:	cd bf       	out	0x3d, r28	; 61
    5250:	de bf       	out	0x3e, r29	; 62
    5252:	df 91       	pop	r29
    5254:	cf 91       	pop	r28
    5256:	ff 90       	pop	r15
    5258:	ef 90       	pop	r14
    525a:	df 90       	pop	r13
    525c:	cf 90       	pop	r12
    525e:	08 95       	ret

00005260 <hal_setDmaDestAddress>:
    5260:	cf 92       	push	r12
    5262:	df 92       	push	r13
    5264:	ef 92       	push	r14
    5266:	ff 92       	push	r15
    5268:	cf 93       	push	r28
    526a:	df 93       	push	r29
    526c:	00 d0       	rcall	.+0      	; 0x526e <hal_setDmaDestAddress+0xe>
    526e:	cd b7       	in	r28, 0x3d	; 61
    5270:	de b7       	in	r29, 0x3e	; 62
    5272:	8a 83       	std	Y+2, r24	; 0x02
    5274:	9b 83       	std	Y+3, r25	; 0x03
    5276:	6a 01       	movw	r12, r20
    5278:	7b 01       	movw	r14, r22
    527a:	8f b7       	in	r24, 0x3f	; 63
    527c:	89 83       	std	Y+1, r24	; 0x01
    527e:	f8 94       	cli
    5280:	ea 81       	ldd	r30, Y+2	; 0x02
    5282:	fb 81       	ldd	r31, Y+3	; 0x03
    5284:	80 91 73 21 	lds	r24, 0x2173
    5288:	90 91 74 21 	lds	r25, 0x2174
    528c:	24 81       	ldd	r18, Z+4	; 0x04
    528e:	35 81       	ldd	r19, Z+5	; 0x05
    5290:	28 17       	cp	r18, r24
    5292:	39 07       	cpc	r19, r25
    5294:	21 f0       	breq	.+8      	; 0x529e <hal_setDmaDestAddress+0x3e>
    5296:	89 81       	ldd	r24, Y+1	; 0x01
    5298:	8f bf       	out	0x3f, r24	; 63
    529a:	8e ef       	ldi	r24, 0xFE	; 254
    529c:	21 c0       	rjmp	.+66     	; 0x52e0 <hal_setDmaDestAddress+0x80>
    529e:	ea 81       	ldd	r30, Y+2	; 0x02
    52a0:	fb 81       	ldd	r31, Y+3	; 0x03
    52a2:	01 90       	ld	r0, Z+
    52a4:	f0 81       	ld	r31, Z
    52a6:	e0 2d       	mov	r30, r0
    52a8:	a3 81       	ldd	r26, Z+3	; 0x03
    52aa:	b4 81       	ldd	r27, Z+4	; 0x04
    52ac:	8c 91       	ld	r24, X
    52ae:	8f 77       	andi	r24, 0x7F	; 127
    52b0:	8c 93       	st	X, r24
    52b2:	a3 81       	ldd	r26, Z+3	; 0x03
    52b4:	b4 81       	ldd	r27, Z+4	; 0x04
    52b6:	1c 96       	adiw	r26, 0x0c	; 12
    52b8:	4c 93       	st	X, r20
    52ba:	a3 81       	ldd	r26, Z+3	; 0x03
    52bc:	b4 81       	ldd	r27, Z+4	; 0x04
    52be:	45 2f       	mov	r20, r21
    52c0:	56 2f       	mov	r21, r22
    52c2:	67 2f       	mov	r22, r23
    52c4:	77 27       	eor	r23, r23
    52c6:	1d 96       	adiw	r26, 0x0d	; 13
    52c8:	4c 93       	st	X, r20
    52ca:	1d 97       	sbiw	r26, 0x0d	; 13
    52cc:	03 80       	ldd	r0, Z+3	; 0x03
    52ce:	f4 81       	ldd	r31, Z+4	; 0x04
    52d0:	e0 2d       	mov	r30, r0
    52d2:	67 01       	movw	r12, r14
    52d4:	ee 24       	eor	r14, r14
    52d6:	ff 24       	eor	r15, r15
    52d8:	c6 86       	std	Z+14, r12	; 0x0e
    52da:	89 81       	ldd	r24, Y+1	; 0x01
    52dc:	8f bf       	out	0x3f, r24	; 63
    52de:	80 e0       	ldi	r24, 0x00	; 0
    52e0:	23 96       	adiw	r28, 0x03	; 3
    52e2:	cd bf       	out	0x3d, r28	; 61
    52e4:	de bf       	out	0x3e, r29	; 62
    52e6:	df 91       	pop	r29
    52e8:	cf 91       	pop	r28
    52ea:	ff 90       	pop	r15
    52ec:	ef 90       	pop	r14
    52ee:	df 90       	pop	r13
    52f0:	cf 90       	pop	r12
    52f2:	08 95       	ret

000052f4 <hal_getDmaStatus>:
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	0f 92       	push	r0
    52fa:	0f 92       	push	r0
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	89 83       	std	Y+1, r24	; 0x01
    5302:	9a 83       	std	Y+2, r25	; 0x02
    5304:	e9 81       	ldd	r30, Y+1	; 0x01
    5306:	fa 81       	ldd	r31, Y+2	; 0x02
    5308:	80 91 73 21 	lds	r24, 0x2173
    530c:	90 91 74 21 	lds	r25, 0x2174
    5310:	24 81       	ldd	r18, Z+4	; 0x04
    5312:	35 81       	ldd	r19, Z+5	; 0x05
    5314:	28 17       	cp	r18, r24
    5316:	39 07       	cpc	r19, r25
    5318:	71 f4       	brne	.+28     	; 0x5336 <hal_getDmaStatus+0x42>
    531a:	e9 81       	ldd	r30, Y+1	; 0x01
    531c:	fa 81       	ldd	r31, Y+2	; 0x02
    531e:	01 90       	ld	r0, Z+
    5320:	f0 81       	ld	r31, Z
    5322:	e0 2d       	mov	r30, r0
    5324:	03 80       	ldd	r0, Z+3	; 0x03
    5326:	f4 81       	ldd	r31, Z+4	; 0x04
    5328:	e0 2d       	mov	r30, r0
    532a:	81 81       	ldd	r24, Z+1	; 0x01
    532c:	88 1f       	adc	r24, r24
    532e:	88 27       	eor	r24, r24
    5330:	88 1f       	adc	r24, r24
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	02 c0       	rjmp	.+4      	; 0x533a <hal_getDmaStatus+0x46>
    5336:	8e ef       	ldi	r24, 0xFE	; 254
    5338:	9f ef       	ldi	r25, 0xFF	; 255
    533a:	0f 90       	pop	r0
    533c:	0f 90       	pop	r0
    533e:	df 91       	pop	r29
    5340:	cf 91       	pop	r28
    5342:	08 95       	ret

00005344 <hal_getDmaTransferCount>:
    5344:	cf 93       	push	r28
    5346:	df 93       	push	r29
    5348:	0f 92       	push	r0
    534a:	0f 92       	push	r0
    534c:	cd b7       	in	r28, 0x3d	; 61
    534e:	de b7       	in	r29, 0x3e	; 62
    5350:	89 83       	std	Y+1, r24	; 0x01
    5352:	9a 83       	std	Y+2, r25	; 0x02
    5354:	e9 81       	ldd	r30, Y+1	; 0x01
    5356:	fa 81       	ldd	r31, Y+2	; 0x02
    5358:	80 91 73 21 	lds	r24, 0x2173
    535c:	90 91 74 21 	lds	r25, 0x2174
    5360:	24 81       	ldd	r18, Z+4	; 0x04
    5362:	35 81       	ldd	r19, Z+5	; 0x05
    5364:	28 17       	cp	r18, r24
    5366:	39 07       	cpc	r19, r25
    5368:	59 f4       	brne	.+22     	; 0x5380 <hal_getDmaTransferCount+0x3c>
    536a:	e9 81       	ldd	r30, Y+1	; 0x01
    536c:	fa 81       	ldd	r31, Y+2	; 0x02
    536e:	01 90       	ld	r0, Z+
    5370:	f0 81       	ld	r31, Z
    5372:	e0 2d       	mov	r30, r0
    5374:	03 80       	ldd	r0, Z+3	; 0x03
    5376:	f4 81       	ldd	r31, Z+4	; 0x04
    5378:	e0 2d       	mov	r30, r0
    537a:	84 81       	ldd	r24, Z+4	; 0x04
    537c:	95 81       	ldd	r25, Z+5	; 0x05
    537e:	02 c0       	rjmp	.+4      	; 0x5384 <hal_getDmaTransferCount+0x40>
    5380:	8e ef       	ldi	r24, 0xFE	; 254
    5382:	9f ef       	ldi	r25, 0xFF	; 255
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	08 95       	ret

0000538e <hal_configureDmaChannel>:
    538e:	af 92       	push	r10
    5390:	bf 92       	push	r11
    5392:	cf 92       	push	r12
    5394:	df 92       	push	r13
    5396:	ef 92       	push	r14
    5398:	ff 92       	push	r15
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	61 97       	sbiw	r28, 0x11	; 17
    53a8:	cd bf       	out	0x3d, r28	; 61
    53aa:	de bf       	out	0x3e, r29	; 62
    53ac:	8a 83       	std	Y+2, r24	; 0x02
    53ae:	9b 83       	std	Y+3, r25	; 0x03
    53b0:	ac 82       	std	Y+4, r10	; 0x04
    53b2:	bd 82       	std	Y+5, r11	; 0x05
    53b4:	ce 82       	std	Y+6, r12	; 0x06
    53b6:	df 82       	std	Y+7, r13	; 0x07
    53b8:	8e 2d       	mov	r24, r14
    53ba:	e8 86       	std	Y+8, r14	; 0x08
    53bc:	9f 2d       	mov	r25, r15
    53be:	f9 86       	std	Y+9, r15	; 0x09
    53c0:	e0 2f       	mov	r30, r16
    53c2:	0a 87       	std	Y+10, r16	; 0x0a
    53c4:	f1 2f       	mov	r31, r17
    53c6:	1b 87       	std	Y+11, r17	; 0x0b
    53c8:	2c 87       	std	Y+12, r18	; 0x0c
    53ca:	3d 87       	std	Y+13, r19	; 0x0d
    53cc:	24 2f       	mov	r18, r20
    53ce:	4e 87       	std	Y+14, r20	; 0x0e
    53d0:	f5 2e       	mov	r15, r21
    53d2:	5f 87       	std	Y+15, r21	; 0x0f
    53d4:	e6 2e       	mov	r14, r22
    53d6:	68 8b       	std	Y+16, r22	; 0x10
    53d8:	37 2f       	mov	r19, r23
    53da:	79 8b       	std	Y+17, r23	; 0x11
    53dc:	8f 01       	movw	r16, r30
    53de:	cc 84       	ldd	r12, Y+12	; 0x0c
    53e0:	dd 84       	ldd	r13, Y+13	; 0x0d
    53e2:	b9 01       	movw	r22, r18
    53e4:	2f b7       	in	r18, 0x3f	; 63
    53e6:	29 83       	std	Y+1, r18	; 0x01
    53e8:	f8 94       	cli
    53ea:	83 30       	cpi	r24, 0x03	; 3
    53ec:	10 f4       	brcc	.+4      	; 0x53f2 <hal_configureDmaChannel+0x64>
    53ee:	93 30       	cpi	r25, 0x03	; 3
    53f0:	20 f0       	brcs	.+8      	; 0x53fa <hal_configureDmaChannel+0x6c>
    53f2:	89 81       	ldd	r24, Y+1	; 0x01
    53f4:	8f bf       	out	0x3f, r24	; 63
    53f6:	86 ef       	ldi	r24, 0xF6	; 246
    53f8:	ec c0       	rjmp	.+472    	; 0x55d2 <hal_configureDmaChannel+0x244>
    53fa:	04 30       	cpi	r16, 0x04	; 4
    53fc:	10 f4       	brcc	.+4      	; 0x5402 <hal_configureDmaChannel+0x74>
    53fe:	14 30       	cpi	r17, 0x04	; 4
    5400:	20 f0       	brcs	.+8      	; 0x540a <hal_configureDmaChannel+0x7c>
    5402:	89 81       	ldd	r24, Y+1	; 0x01
    5404:	8f bf       	out	0x3f, r24	; 63
    5406:	85 ef       	ldi	r24, 0xF5	; 245
    5408:	e4 c0       	rjmp	.+456    	; 0x55d2 <hal_configureDmaChannel+0x244>
    540a:	c1 14       	cp	r12, r1
    540c:	d1 04       	cpc	r13, r1
    540e:	21 f4       	brne	.+8      	; 0x5418 <hal_configureDmaChannel+0x8a>
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	8f bf       	out	0x3f, r24	; 63
    5414:	84 ef       	ldi	r24, 0xF4	; 244
    5416:	dd c0       	rjmp	.+442    	; 0x55d2 <hal_configureDmaChannel+0x244>
    5418:	64 30       	cpi	r22, 0x04	; 4
    541a:	20 f0       	brcs	.+8      	; 0x5424 <hal_configureDmaChannel+0x96>
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	8f bf       	out	0x3f, r24	; 63
    5420:	83 ef       	ldi	r24, 0xF3	; 243
    5422:	d7 c0       	rjmp	.+430    	; 0x55d2 <hal_configureDmaChannel+0x244>
    5424:	21 e0       	ldi	r18, 0x01	; 1
    5426:	25 17       	cp	r18, r21
    5428:	20 f4       	brcc	.+8      	; 0x5432 <hal_configureDmaChannel+0xa4>
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	8f bf       	out	0x3f, r24	; 63
    542e:	82 ef       	ldi	r24, 0xF2	; 242
    5430:	d0 c0       	rjmp	.+416    	; 0x55d2 <hal_configureDmaChannel+0x244>
    5432:	2f ea       	ldi	r18, 0xAF	; 175
    5434:	2e 15       	cp	r18, r14
    5436:	20 f4       	brcc	.+8      	; 0x5440 <hal_configureDmaChannel+0xb2>
    5438:	89 81       	ldd	r24, Y+1	; 0x01
    543a:	8f bf       	out	0x3f, r24	; 63
    543c:	81 ef       	ldi	r24, 0xF1	; 241
    543e:	c9 c0       	rjmp	.+402    	; 0x55d2 <hal_configureDmaChannel+0x244>
    5440:	ea 81       	ldd	r30, Y+2	; 0x02
    5442:	fb 81       	ldd	r31, Y+3	; 0x03
    5444:	20 91 73 21 	lds	r18, 0x2173
    5448:	30 91 74 21 	lds	r19, 0x2174
    544c:	44 81       	ldd	r20, Z+4	; 0x04
    544e:	55 81       	ldd	r21, Z+5	; 0x05
    5450:	42 17       	cp	r20, r18
    5452:	53 07       	cpc	r21, r19
    5454:	21 f0       	breq	.+8      	; 0x545e <hal_configureDmaChannel+0xd0>
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	8f bf       	out	0x3f, r24	; 63
    545a:	8e ef       	ldi	r24, 0xFE	; 254
    545c:	ba c0       	rjmp	.+372    	; 0x55d2 <hal_configureDmaChannel+0x244>
    545e:	ea 81       	ldd	r30, Y+2	; 0x02
    5460:	fb 81       	ldd	r31, Y+3	; 0x03
    5462:	01 90       	ld	r0, Z+
    5464:	f0 81       	ld	r31, Z
    5466:	e0 2d       	mov	r30, r0
    5468:	a3 81       	ldd	r26, Z+3	; 0x03
    546a:	b4 81       	ldd	r27, Z+4	; 0x04
    546c:	2c 91       	ld	r18, X
    546e:	2f 77       	andi	r18, 0x7F	; 127
    5470:	2c 93       	st	X, r18
    5472:	a3 81       	ldd	r26, Z+3	; 0x03
    5474:	b4 81       	ldd	r27, Z+4	; 0x04
    5476:	2c 81       	ldd	r18, Y+4	; 0x04
    5478:	18 96       	adiw	r26, 0x08	; 8
    547a:	2c 93       	st	X, r18
    547c:	a3 81       	ldd	r26, Z+3	; 0x03
    547e:	b4 81       	ldd	r27, Z+4	; 0x04
    5480:	2d 81       	ldd	r18, Y+5	; 0x05
    5482:	19 96       	adiw	r26, 0x09	; 9
    5484:	2c 93       	st	X, r18
    5486:	a3 81       	ldd	r26, Z+3	; 0x03
    5488:	b4 81       	ldd	r27, Z+4	; 0x04
    548a:	1a 96       	adiw	r26, 0x0a	; 10
    548c:	1c 92       	st	X, r1
    548e:	a3 81       	ldd	r26, Z+3	; 0x03
    5490:	b4 81       	ldd	r27, Z+4	; 0x04
    5492:	2e 81       	ldd	r18, Y+6	; 0x06
    5494:	1c 96       	adiw	r26, 0x0c	; 12
    5496:	2c 93       	st	X, r18
    5498:	a3 81       	ldd	r26, Z+3	; 0x03
    549a:	b4 81       	ldd	r27, Z+4	; 0x04
    549c:	2f 81       	ldd	r18, Y+7	; 0x07
    549e:	1d 96       	adiw	r26, 0x0d	; 13
    54a0:	2c 93       	st	X, r18
    54a2:	a3 81       	ldd	r26, Z+3	; 0x03
    54a4:	b4 81       	ldd	r27, Z+4	; 0x04
    54a6:	1e 96       	adiw	r26, 0x0e	; 14
    54a8:	1c 92       	st	X, r1
    54aa:	a3 81       	ldd	r26, Z+3	; 0x03
    54ac:	b4 81       	ldd	r27, Z+4	; 0x04
    54ae:	12 96       	adiw	r26, 0x02	; 2
    54b0:	2c 91       	ld	r18, X
    54b2:	12 97       	sbiw	r26, 0x02	; 2
    54b4:	2f 7c       	andi	r18, 0xCF	; 207
    54b6:	12 96       	adiw	r26, 0x02	; 2
    54b8:	2c 93       	st	X, r18
    54ba:	a3 81       	ldd	r26, Z+3	; 0x03
    54bc:	b4 81       	ldd	r27, Z+4	; 0x04
    54be:	12 96       	adiw	r26, 0x02	; 2
    54c0:	2c 91       	ld	r18, X
    54c2:	12 97       	sbiw	r26, 0x02	; 2
    54c4:	82 95       	swap	r24
    54c6:	80 7f       	andi	r24, 0xF0	; 240
    54c8:	82 2b       	or	r24, r18
    54ca:	12 96       	adiw	r26, 0x02	; 2
    54cc:	8c 93       	st	X, r24
    54ce:	a3 81       	ldd	r26, Z+3	; 0x03
    54d0:	b4 81       	ldd	r27, Z+4	; 0x04
    54d2:	12 96       	adiw	r26, 0x02	; 2
    54d4:	8c 91       	ld	r24, X
    54d6:	12 97       	sbiw	r26, 0x02	; 2
    54d8:	8c 7f       	andi	r24, 0xFC	; 252
    54da:	12 96       	adiw	r26, 0x02	; 2
    54dc:	8c 93       	st	X, r24
    54de:	a3 81       	ldd	r26, Z+3	; 0x03
    54e0:	b4 81       	ldd	r27, Z+4	; 0x04
    54e2:	12 96       	adiw	r26, 0x02	; 2
    54e4:	8c 91       	ld	r24, X
    54e6:	12 97       	sbiw	r26, 0x02	; 2
    54e8:	89 2b       	or	r24, r25
    54ea:	12 96       	adiw	r26, 0x02	; 2
    54ec:	8c 93       	st	X, r24
    54ee:	a3 81       	ldd	r26, Z+3	; 0x03
    54f0:	b4 81       	ldd	r27, Z+4	; 0x04
    54f2:	12 96       	adiw	r26, 0x02	; 2
    54f4:	8c 91       	ld	r24, X
    54f6:	12 97       	sbiw	r26, 0x02	; 2
    54f8:	8f 73       	andi	r24, 0x3F	; 63
    54fa:	12 96       	adiw	r26, 0x02	; 2
    54fc:	8c 93       	st	X, r24
    54fe:	a3 81       	ldd	r26, Z+3	; 0x03
    5500:	b4 81       	ldd	r27, Z+4	; 0x04
    5502:	12 96       	adiw	r26, 0x02	; 2
    5504:	8c 91       	ld	r24, X
    5506:	12 97       	sbiw	r26, 0x02	; 2
    5508:	02 95       	swap	r16
    550a:	00 0f       	add	r16, r16
    550c:	00 0f       	add	r16, r16
    550e:	00 7c       	andi	r16, 0xC0	; 192
    5510:	08 2b       	or	r16, r24
    5512:	12 96       	adiw	r26, 0x02	; 2
    5514:	0c 93       	st	X, r16
    5516:	a3 81       	ldd	r26, Z+3	; 0x03
    5518:	b4 81       	ldd	r27, Z+4	; 0x04
    551a:	12 96       	adiw	r26, 0x02	; 2
    551c:	8c 91       	ld	r24, X
    551e:	12 97       	sbiw	r26, 0x02	; 2
    5520:	83 7f       	andi	r24, 0xF3	; 243
    5522:	12 96       	adiw	r26, 0x02	; 2
    5524:	8c 93       	st	X, r24
    5526:	a3 81       	ldd	r26, Z+3	; 0x03
    5528:	b4 81       	ldd	r27, Z+4	; 0x04
    552a:	12 96       	adiw	r26, 0x02	; 2
    552c:	8c 91       	ld	r24, X
    552e:	12 97       	sbiw	r26, 0x02	; 2
    5530:	11 0f       	add	r17, r17
    5532:	11 0f       	add	r17, r17
    5534:	18 2b       	or	r17, r24
    5536:	12 96       	adiw	r26, 0x02	; 2
    5538:	1c 93       	st	X, r17
    553a:	a3 81       	ldd	r26, Z+3	; 0x03
    553c:	b4 81       	ldd	r27, Z+4	; 0x04
    553e:	14 96       	adiw	r26, 0x04	; 4
    5540:	cd 92       	st	X+, r12
    5542:	dc 92       	st	X, r13
    5544:	15 97       	sbiw	r26, 0x05	; 5
    5546:	a3 81       	ldd	r26, Z+3	; 0x03
    5548:	b4 81       	ldd	r27, Z+4	; 0x04
    554a:	8c 91       	ld	r24, X
    554c:	8c 7f       	andi	r24, 0xFC	; 252
    554e:	8c 93       	st	X, r24
    5550:	a3 81       	ldd	r26, Z+3	; 0x03
    5552:	b4 81       	ldd	r27, Z+4	; 0x04
    5554:	8c 91       	ld	r24, X
    5556:	86 2b       	or	r24, r22
    5558:	8c 93       	st	X, r24
    555a:	a3 81       	ldd	r26, Z+3	; 0x03
    555c:	b4 81       	ldd	r27, Z+4	; 0x04
    555e:	8c 91       	ld	r24, X
    5560:	8f 7d       	andi	r24, 0xDF	; 223
    5562:	8c 93       	st	X, r24
    5564:	a3 81       	ldd	r26, Z+3	; 0x03
    5566:	b4 81       	ldd	r27, Z+4	; 0x04
    5568:	16 96       	adiw	r26, 0x06	; 6
    556a:	1c 92       	st	X, r1
    556c:	a3 81       	ldd	r26, Z+3	; 0x03
    556e:	b4 81       	ldd	r27, Z+4	; 0x04
    5570:	17 16       	cp	r1, r23
    5572:	4c f4       	brge	.+18     	; 0x5586 <hal_configureDmaChannel+0x1f8>
    5574:	8c 91       	ld	r24, X
    5576:	80 62       	ori	r24, 0x20	; 32
    5578:	8c 93       	st	X, r24
    557a:	a3 81       	ldd	r26, Z+3	; 0x03
    557c:	b4 81       	ldd	r27, Z+4	; 0x04
    557e:	16 96       	adiw	r26, 0x06	; 6
    5580:	7c 93       	st	X, r23
    5582:	16 97       	sbiw	r26, 0x06	; 6
    5584:	05 c0       	rjmp	.+10     	; 0x5590 <hal_configureDmaChannel+0x202>
    5586:	77 23       	and	r23, r23
    5588:	19 f0       	breq	.+6      	; 0x5590 <hal_configureDmaChannel+0x202>
    558a:	8c 91       	ld	r24, X
    558c:	80 62       	ori	r24, 0x20	; 32
    558e:	8c 93       	st	X, r24
    5590:	a3 81       	ldd	r26, Z+3	; 0x03
    5592:	b4 81       	ldd	r27, Z+4	; 0x04
    5594:	8c 91       	ld	r24, X
    5596:	8b 7f       	andi	r24, 0xFB	; 251
    5598:	8c 93       	st	X, r24
    559a:	a3 81       	ldd	r26, Z+3	; 0x03
    559c:	b4 81       	ldd	r27, Z+4	; 0x04
    559e:	8c 91       	ld	r24, X
    55a0:	ff 0c       	add	r15, r15
    55a2:	ff 0c       	add	r15, r15
    55a4:	f8 2a       	or	r15, r24
    55a6:	fc 92       	st	X, r15
    55a8:	a3 81       	ldd	r26, Z+3	; 0x03
    55aa:	b4 81       	ldd	r27, Z+4	; 0x04
    55ac:	13 96       	adiw	r26, 0x03	; 3
    55ae:	8c 91       	ld	r24, X
    55b0:	13 97       	sbiw	r26, 0x03	; 3
    55b2:	13 96       	adiw	r26, 0x03	; 3
    55b4:	1c 92       	st	X, r1
    55b6:	a3 81       	ldd	r26, Z+3	; 0x03
    55b8:	b4 81       	ldd	r27, Z+4	; 0x04
    55ba:	13 96       	adiw	r26, 0x03	; 3
    55bc:	8c 91       	ld	r24, X
    55be:	13 97       	sbiw	r26, 0x03	; 3
    55c0:	8e 29       	or	r24, r14
    55c2:	13 96       	adiw	r26, 0x03	; 3
    55c4:	8c 93       	st	X, r24
    55c6:	13 97       	sbiw	r26, 0x03	; 3
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	81 83       	std	Z+1, r24	; 0x01
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	8f bf       	out	0x3f, r24	; 63
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	61 96       	adiw	r28, 0x11	; 17
    55d4:	cd bf       	out	0x3d, r28	; 61
    55d6:	de bf       	out	0x3e, r29	; 62
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	1f 91       	pop	r17
    55de:	0f 91       	pop	r16
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	df 90       	pop	r13
    55e6:	cf 90       	pop	r12
    55e8:	bf 90       	pop	r11
    55ea:	af 90       	pop	r10
    55ec:	08 95       	ret

000055ee <hal_resetDmaController>:
    55ee:	80 91 00 01 	lds	r24, 0x0100
    55f2:	80 64       	ori	r24, 0x40	; 64
    55f4:	80 93 00 01 	sts	0x0100, r24
    55f8:	80 91 00 01 	lds	r24, 0x0100
    55fc:	86 fd       	sbrc	r24, 6
    55fe:	fc cf       	rjmp	.-8      	; 0x55f8 <hal_resetDmaController+0xa>
    5600:	08 95       	ret

00005602 <hal_dmaStartTransfer>:
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	00 d0       	rcall	.+0      	; 0x5608 <hal_dmaStartTransfer+0x6>
    5608:	cd b7       	in	r28, 0x3d	; 61
    560a:	de b7       	in	r29, 0x3e	; 62
    560c:	8a 83       	std	Y+2, r24	; 0x02
    560e:	9b 83       	std	Y+3, r25	; 0x03
    5610:	8f b7       	in	r24, 0x3f	; 63
    5612:	89 83       	std	Y+1, r24	; 0x01
    5614:	f8 94       	cli
    5616:	ea 81       	ldd	r30, Y+2	; 0x02
    5618:	fb 81       	ldd	r31, Y+3	; 0x03
    561a:	80 91 73 21 	lds	r24, 0x2173
    561e:	90 91 74 21 	lds	r25, 0x2174
    5622:	24 81       	ldd	r18, Z+4	; 0x04
    5624:	35 81       	ldd	r19, Z+5	; 0x05
    5626:	28 17       	cp	r18, r24
    5628:	39 07       	cpc	r19, r25
    562a:	21 f0       	breq	.+8      	; 0x5634 <hal_dmaStartTransfer+0x32>
    562c:	89 81       	ldd	r24, Y+1	; 0x01
    562e:	8f bf       	out	0x3f, r24	; 63
    5630:	8e ef       	ldi	r24, 0xFE	; 254
    5632:	1a c0       	rjmp	.+52     	; 0x5668 <hal_dmaStartTransfer+0x66>
    5634:	ea 81       	ldd	r30, Y+2	; 0x02
    5636:	fb 81       	ldd	r31, Y+3	; 0x03
    5638:	01 90       	ld	r0, Z+
    563a:	f0 81       	ld	r31, Z
    563c:	e0 2d       	mov	r30, r0
    563e:	81 81       	ldd	r24, Z+1	; 0x01
    5640:	88 23       	and	r24, r24
    5642:	79 f0       	breq	.+30     	; 0x5662 <hal_dmaStartTransfer+0x60>
    5644:	a3 81       	ldd	r26, Z+3	; 0x03
    5646:	b4 81       	ldd	r27, Z+4	; 0x04
    5648:	8c 91       	ld	r24, X
    564a:	80 68       	ori	r24, 0x80	; 128
    564c:	8c 93       	st	X, r24
    564e:	03 80       	ldd	r0, Z+3	; 0x03
    5650:	f4 81       	ldd	r31, Z+4	; 0x04
    5652:	e0 2d       	mov	r30, r0
    5654:	80 81       	ld	r24, Z
    5656:	80 61       	ori	r24, 0x10	; 16
    5658:	80 83       	st	Z, r24
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	8f bf       	out	0x3f, r24	; 63
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	03 c0       	rjmp	.+6      	; 0x5668 <hal_dmaStartTransfer+0x66>
    5662:	89 81       	ldd	r24, Y+1	; 0x01
    5664:	8f bf       	out	0x3f, r24	; 63
    5666:	8d ef       	ldi	r24, 0xFD	; 253
    5668:	23 96       	adiw	r28, 0x03	; 3
    566a:	cd bf       	out	0x3d, r28	; 61
    566c:	de bf       	out	0x3e, r29	; 62
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	08 95       	ret

00005674 <hal_getDmaIntStatus>:
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	0f 92       	push	r0
    567a:	0f 92       	push	r0
    567c:	cd b7       	in	r28, 0x3d	; 61
    567e:	de b7       	in	r29, 0x3e	; 62
    5680:	89 83       	std	Y+1, r24	; 0x01
    5682:	9a 83       	std	Y+2, r25	; 0x02
    5684:	e9 81       	ldd	r30, Y+1	; 0x01
    5686:	fa 81       	ldd	r31, Y+2	; 0x02
    5688:	80 91 73 21 	lds	r24, 0x2173
    568c:	90 91 74 21 	lds	r25, 0x2174
    5690:	24 81       	ldd	r18, Z+4	; 0x04
    5692:	35 81       	ldd	r19, Z+5	; 0x05
    5694:	28 17       	cp	r18, r24
    5696:	39 07       	cpc	r19, r25
    5698:	e1 f4       	brne	.+56     	; 0x56d2 <hal_getDmaIntStatus+0x5e>
    569a:	e9 81       	ldd	r30, Y+1	; 0x01
    569c:	fa 81       	ldd	r31, Y+2	; 0x02
    569e:	01 90       	ld	r0, Z+
    56a0:	f0 81       	ld	r31, Z
    56a2:	e0 2d       	mov	r30, r0
    56a4:	03 80       	ldd	r0, Z+3	; 0x03
    56a6:	f4 81       	ldd	r31, Z+4	; 0x04
    56a8:	e0 2d       	mov	r30, r0
    56aa:	81 81       	ldd	r24, Z+1	; 0x01
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	66 23       	and	r22, r22
    56b0:	41 f4       	brne	.+16     	; 0x56c2 <hal_getDmaIntStatus+0x4e>
    56b2:	80 71       	andi	r24, 0x10	; 16
    56b4:	90 70       	andi	r25, 0x00	; 0
    56b6:	64 e0       	ldi	r22, 0x04	; 4
    56b8:	95 95       	asr	r25
    56ba:	87 95       	ror	r24
    56bc:	6a 95       	dec	r22
    56be:	e1 f7       	brne	.-8      	; 0x56b8 <hal_getDmaIntStatus+0x44>
    56c0:	0a c0       	rjmp	.+20     	; 0x56d6 <hal_getDmaIntStatus+0x62>
    56c2:	80 72       	andi	r24, 0x20	; 32
    56c4:	90 70       	andi	r25, 0x00	; 0
    56c6:	55 e0       	ldi	r21, 0x05	; 5
    56c8:	95 95       	asr	r25
    56ca:	87 95       	ror	r24
    56cc:	5a 95       	dec	r21
    56ce:	e1 f7       	brne	.-8      	; 0x56c8 <hal_getDmaIntStatus+0x54>
    56d0:	02 c0       	rjmp	.+4      	; 0x56d6 <hal_getDmaIntStatus+0x62>
    56d2:	8e ef       	ldi	r24, 0xFE	; 254
    56d4:	9f ef       	ldi	r25, 0xFF	; 255
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	df 91       	pop	r29
    56dc:	cf 91       	pop	r28
    56de:	08 95       	ret

000056e0 <hal_getDmaChannelId>:
    56e0:	cf 93       	push	r28
    56e2:	df 93       	push	r29
    56e4:	0f 92       	push	r0
    56e6:	0f 92       	push	r0
    56e8:	cd b7       	in	r28, 0x3d	; 61
    56ea:	de b7       	in	r29, 0x3e	; 62
    56ec:	89 83       	std	Y+1, r24	; 0x01
    56ee:	9a 83       	std	Y+2, r25	; 0x02
    56f0:	e9 81       	ldd	r30, Y+1	; 0x01
    56f2:	fa 81       	ldd	r31, Y+2	; 0x02
    56f4:	80 91 73 21 	lds	r24, 0x2173
    56f8:	90 91 74 21 	lds	r25, 0x2174
    56fc:	24 81       	ldd	r18, Z+4	; 0x04
    56fe:	35 81       	ldd	r19, Z+5	; 0x05
    5700:	28 17       	cp	r18, r24
    5702:	39 07       	cpc	r19, r25
    5704:	39 f4       	brne	.+14     	; 0x5714 <hal_getDmaChannelId+0x34>
    5706:	e9 81       	ldd	r30, Y+1	; 0x01
    5708:	fa 81       	ldd	r31, Y+2	; 0x02
    570a:	01 90       	ld	r0, Z+
    570c:	f0 81       	ld	r31, Z
    570e:	e0 2d       	mov	r30, r0
    5710:	80 81       	ld	r24, Z
    5712:	01 c0       	rjmp	.+2      	; 0x5716 <hal_getDmaChannelId+0x36>
    5714:	8e ef       	ldi	r24, 0xFE	; 254
    5716:	0f 90       	pop	r0
    5718:	0f 90       	pop	r0
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	08 95       	ret

00005720 <hal_clearDmaIntStatus>:
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	0f 92       	push	r0
    5726:	0f 92       	push	r0
    5728:	cd b7       	in	r28, 0x3d	; 61
    572a:	de b7       	in	r29, 0x3e	; 62
    572c:	89 83       	std	Y+1, r24	; 0x01
    572e:	9a 83       	std	Y+2, r25	; 0x02
    5730:	e9 81       	ldd	r30, Y+1	; 0x01
    5732:	fa 81       	ldd	r31, Y+2	; 0x02
    5734:	80 91 73 21 	lds	r24, 0x2173
    5738:	90 91 74 21 	lds	r25, 0x2174
    573c:	24 81       	ldd	r18, Z+4	; 0x04
    573e:	35 81       	ldd	r19, Z+5	; 0x05
    5740:	28 17       	cp	r18, r24
    5742:	39 07       	cpc	r19, r25
    5744:	81 f5       	brne	.+96     	; 0x57a6 <hal_clearDmaIntStatus+0x86>
    5746:	e9 81       	ldd	r30, Y+1	; 0x01
    5748:	fa 81       	ldd	r31, Y+2	; 0x02
    574a:	01 90       	ld	r0, Z+
    574c:	f0 81       	ld	r31, Z
    574e:	e0 2d       	mov	r30, r0
    5750:	80 81       	ld	r24, Z
    5752:	88 23       	and	r24, r24
    5754:	41 f4       	brne	.+16     	; 0x5766 <hal_clearDmaIntStatus+0x46>
    5756:	80 91 03 01 	lds	r24, 0x0103
    575a:	66 23       	and	r22, r22
    575c:	11 f4       	brne	.+4      	; 0x5762 <hal_clearDmaIntStatus+0x42>
    575e:	81 60       	ori	r24, 0x01	; 1
    5760:	0b c0       	rjmp	.+22     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    5762:	80 61       	ori	r24, 0x10	; 16
    5764:	09 c0       	rjmp	.+18     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    5766:	82 30       	cpi	r24, 0x02	; 2
    5768:	61 f4       	brne	.+24     	; 0x5782 <hal_clearDmaIntStatus+0x62>
    576a:	80 91 03 01 	lds	r24, 0x0103
    576e:	66 23       	and	r22, r22
    5770:	11 f4       	brne	.+4      	; 0x5776 <hal_clearDmaIntStatus+0x56>
    5772:	82 60       	ori	r24, 0x02	; 2
    5774:	01 c0       	rjmp	.+2      	; 0x5778 <hal_clearDmaIntStatus+0x58>
    5776:	80 62       	ori	r24, 0x20	; 32
    5778:	e0 e0       	ldi	r30, 0x00	; 0
    577a:	f1 e0       	ldi	r31, 0x01	; 1
    577c:	83 83       	std	Z+3, r24	; 0x03
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	13 c0       	rjmp	.+38     	; 0x57a8 <hal_clearDmaIntStatus+0x88>
    5782:	84 30       	cpi	r24, 0x04	; 4
    5784:	41 f4       	brne	.+16     	; 0x5796 <hal_clearDmaIntStatus+0x76>
    5786:	80 91 03 01 	lds	r24, 0x0103
    578a:	66 23       	and	r22, r22
    578c:	11 f4       	brne	.+4      	; 0x5792 <hal_clearDmaIntStatus+0x72>
    578e:	84 60       	ori	r24, 0x04	; 4
    5790:	f3 cf       	rjmp	.-26     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    5792:	80 64       	ori	r24, 0x40	; 64
    5794:	f1 cf       	rjmp	.-30     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    5796:	80 91 03 01 	lds	r24, 0x0103
    579a:	66 23       	and	r22, r22
    579c:	11 f4       	brne	.+4      	; 0x57a2 <hal_clearDmaIntStatus+0x82>
    579e:	88 60       	ori	r24, 0x08	; 8
    57a0:	eb cf       	rjmp	.-42     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    57a2:	80 68       	ori	r24, 0x80	; 128
    57a4:	e9 cf       	rjmp	.-46     	; 0x5778 <hal_clearDmaIntStatus+0x58>
    57a6:	8e ef       	ldi	r24, 0xFE	; 254
    57a8:	0f 90       	pop	r0
    57aa:	0f 90       	pop	r0
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	08 95       	ret

000057b2 <hal_dmaEnableChannel>:
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	00 d0       	rcall	.+0      	; 0x57b8 <hal_dmaEnableChannel+0x6>
    57b8:	cd b7       	in	r28, 0x3d	; 61
    57ba:	de b7       	in	r29, 0x3e	; 62
    57bc:	8a 83       	std	Y+2, r24	; 0x02
    57be:	9b 83       	std	Y+3, r25	; 0x03
    57c0:	8f b7       	in	r24, 0x3f	; 63
    57c2:	89 83       	std	Y+1, r24	; 0x01
    57c4:	f8 94       	cli
    57c6:	ea 81       	ldd	r30, Y+2	; 0x02
    57c8:	fb 81       	ldd	r31, Y+3	; 0x03
    57ca:	80 91 73 21 	lds	r24, 0x2173
    57ce:	90 91 74 21 	lds	r25, 0x2174
    57d2:	24 81       	ldd	r18, Z+4	; 0x04
    57d4:	35 81       	ldd	r19, Z+5	; 0x05
    57d6:	28 17       	cp	r18, r24
    57d8:	39 07       	cpc	r19, r25
    57da:	21 f0       	breq	.+8      	; 0x57e4 <hal_dmaEnableChannel+0x32>
    57dc:	89 81       	ldd	r24, Y+1	; 0x01
    57de:	8f bf       	out	0x3f, r24	; 63
    57e0:	8e ef       	ldi	r24, 0xFE	; 254
    57e2:	0e c0       	rjmp	.+28     	; 0x5800 <hal_dmaEnableChannel+0x4e>
    57e4:	ea 81       	ldd	r30, Y+2	; 0x02
    57e6:	fb 81       	ldd	r31, Y+3	; 0x03
    57e8:	01 90       	ld	r0, Z+
    57ea:	f0 81       	ld	r31, Z
    57ec:	e0 2d       	mov	r30, r0
    57ee:	03 80       	ldd	r0, Z+3	; 0x03
    57f0:	f4 81       	ldd	r31, Z+4	; 0x04
    57f2:	e0 2d       	mov	r30, r0
    57f4:	80 81       	ld	r24, Z
    57f6:	80 68       	ori	r24, 0x80	; 128
    57f8:	80 83       	st	Z, r24
    57fa:	89 81       	ldd	r24, Y+1	; 0x01
    57fc:	8f bf       	out	0x3f, r24	; 63
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	23 96       	adiw	r28, 0x03	; 3
    5802:	cd bf       	out	0x3d, r28	; 61
    5804:	de bf       	out	0x3e, r29	; 62
    5806:	df 91       	pop	r29
    5808:	cf 91       	pop	r28
    580a:	08 95       	ret

0000580c <hal_dmaDisableChannel>:
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	00 d0       	rcall	.+0      	; 0x5812 <hal_dmaDisableChannel+0x6>
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	8a 83       	std	Y+2, r24	; 0x02
    5818:	9b 83       	std	Y+3, r25	; 0x03
    581a:	8f b7       	in	r24, 0x3f	; 63
    581c:	89 83       	std	Y+1, r24	; 0x01
    581e:	f8 94       	cli
    5820:	ea 81       	ldd	r30, Y+2	; 0x02
    5822:	fb 81       	ldd	r31, Y+3	; 0x03
    5824:	80 91 73 21 	lds	r24, 0x2173
    5828:	90 91 74 21 	lds	r25, 0x2174
    582c:	24 81       	ldd	r18, Z+4	; 0x04
    582e:	35 81       	ldd	r19, Z+5	; 0x05
    5830:	28 17       	cp	r18, r24
    5832:	39 07       	cpc	r19, r25
    5834:	21 f0       	breq	.+8      	; 0x583e <hal_dmaDisableChannel+0x32>
    5836:	89 81       	ldd	r24, Y+1	; 0x01
    5838:	8f bf       	out	0x3f, r24	; 63
    583a:	8e ef       	ldi	r24, 0xFE	; 254
    583c:	0e c0       	rjmp	.+28     	; 0x585a <hal_dmaDisableChannel+0x4e>
    583e:	ea 81       	ldd	r30, Y+2	; 0x02
    5840:	fb 81       	ldd	r31, Y+3	; 0x03
    5842:	01 90       	ld	r0, Z+
    5844:	f0 81       	ld	r31, Z
    5846:	e0 2d       	mov	r30, r0
    5848:	03 80       	ldd	r0, Z+3	; 0x03
    584a:	f4 81       	ldd	r31, Z+4	; 0x04
    584c:	e0 2d       	mov	r30, r0
    584e:	80 81       	ld	r24, Z
    5850:	8f 77       	andi	r24, 0x7F	; 127
    5852:	80 83       	st	Z, r24
    5854:	89 81       	ldd	r24, Y+1	; 0x01
    5856:	8f bf       	out	0x3f, r24	; 63
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	23 96       	adiw	r28, 0x03	; 3
    585c:	cd bf       	out	0x3d, r28	; 61
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	df 91       	pop	r29
    5862:	cf 91       	pop	r28
    5864:	08 95       	ret

00005866 <hal_configureIntLevel>:
    5866:	e0 ea       	ldi	r30, 0xA0	; 160
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	92 81       	ldd	r25, Z+2	; 0x02
    586c:	98 2b       	or	r25, r24
    586e:	92 83       	std	Z+2, r25	; 0x02
    5870:	08 95       	ret

00005872 <findTimerIntElement>:
    5872:	cf 93       	push	r28
    5874:	df 93       	push	r29
    5876:	0f 92       	push	r0
    5878:	0f 92       	push	r0
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	e0 91 79 23 	lds	r30, 0x2379
    5882:	f0 91 7a 23 	lds	r31, 0x237A
    5886:	22 81       	ldd	r18, Z+2	; 0x02
    5888:	33 81       	ldd	r19, Z+3	; 0x03
    588a:	e0 91 79 23 	lds	r30, 0x2379
    588e:	f0 91 7a 23 	lds	r31, 0x237A
    5892:	0c c0       	rjmp	.+24     	; 0x58ac <findTimerIntElement+0x3a>
    5894:	e9 81       	ldd	r30, Y+1	; 0x01
    5896:	fa 81       	ldd	r31, Y+2	; 0x02
    5898:	01 90       	ld	r0, Z+
    589a:	f0 81       	ld	r31, Z
    589c:	e0 2d       	mov	r30, r0
    589e:	90 81       	ld	r25, Z
    58a0:	98 17       	cp	r25, r24
    58a2:	69 f0       	breq	.+26     	; 0x58be <findTimerIntElement+0x4c>
    58a4:	21 50       	subi	r18, 0x01	; 1
    58a6:	30 40       	sbci	r19, 0x00	; 0
    58a8:	e9 81       	ldd	r30, Y+1	; 0x01
    58aa:	fa 81       	ldd	r31, Y+2	; 0x02
    58ac:	40 85       	ldd	r20, Z+8	; 0x08
    58ae:	51 85       	ldd	r21, Z+9	; 0x09
    58b0:	49 83       	std	Y+1, r20	; 0x01
    58b2:	5a 83       	std	Y+2, r21	; 0x02
    58b4:	12 16       	cp	r1, r18
    58b6:	13 06       	cpc	r1, r19
    58b8:	6c f3       	brlt	.-38     	; 0x5894 <findTimerIntElement+0x22>
    58ba:	e0 e0       	ldi	r30, 0x00	; 0
    58bc:	f0 e0       	ldi	r31, 0x00	; 0
    58be:	cf 01       	movw	r24, r30
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	df 91       	pop	r29
    58c6:	cf 91       	pop	r28
    58c8:	08 95       	ret

000058ca <__vector_15>:
    58ca:	1f 92       	push	r1
    58cc:	0f 92       	push	r0
    58ce:	0f b6       	in	r0, 0x3f	; 63
    58d0:	0f 92       	push	r0
    58d2:	08 b6       	in	r0, 0x38	; 56
    58d4:	0f 92       	push	r0
    58d6:	11 24       	eor	r1, r1
    58d8:	0f 90       	pop	r0
    58da:	08 be       	out	0x38, r0	; 56
    58dc:	0f 90       	pop	r0
    58de:	0f be       	out	0x3f, r0	; 63
    58e0:	0f 90       	pop	r0
    58e2:	1f 90       	pop	r1
    58e4:	18 95       	reti

000058e6 <__vector_16>:
    58e6:	1f 92       	push	r1
    58e8:	0f 92       	push	r0
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	0f 92       	push	r0
    58ee:	08 b6       	in	r0, 0x38	; 56
    58f0:	0f 92       	push	r0
    58f2:	09 b6       	in	r0, 0x39	; 57
    58f4:	0f 92       	push	r0
    58f6:	0b b6       	in	r0, 0x3b	; 59
    58f8:	0f 92       	push	r0
    58fa:	11 24       	eor	r1, r1
    58fc:	2f 93       	push	r18
    58fe:	3f 93       	push	r19
    5900:	4f 93       	push	r20
    5902:	5f 93       	push	r21
    5904:	6f 93       	push	r22
    5906:	7f 93       	push	r23
    5908:	8f 93       	push	r24
    590a:	9f 93       	push	r25
    590c:	af 93       	push	r26
    590e:	bf 93       	push	r27
    5910:	ef 93       	push	r30
    5912:	ff 93       	push	r31
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	41 f0       	breq	.+16     	; 0x592e <__vector_16+0x48>
    591e:	dc 01       	movw	r26, r24
    5920:	11 96       	adiw	r26, 0x01	; 1
    5922:	ed 91       	ld	r30, X+
    5924:	fc 91       	ld	r31, X
    5926:	12 97       	sbiw	r26, 0x02	; 2
    5928:	30 97       	sbiw	r30, 0x00	; 0
    592a:	09 f0       	breq	.+2      	; 0x592e <__vector_16+0x48>
    592c:	19 95       	eicall
    592e:	ff 91       	pop	r31
    5930:	ef 91       	pop	r30
    5932:	bf 91       	pop	r27
    5934:	af 91       	pop	r26
    5936:	9f 91       	pop	r25
    5938:	8f 91       	pop	r24
    593a:	7f 91       	pop	r23
    593c:	6f 91       	pop	r22
    593e:	5f 91       	pop	r21
    5940:	4f 91       	pop	r20
    5942:	3f 91       	pop	r19
    5944:	2f 91       	pop	r18
    5946:	0f 90       	pop	r0
    5948:	0b be       	out	0x3b, r0	; 59
    594a:	0f 90       	pop	r0
    594c:	09 be       	out	0x39, r0	; 57
    594e:	0f 90       	pop	r0
    5950:	08 be       	out	0x38, r0	; 56
    5952:	0f 90       	pop	r0
    5954:	0f be       	out	0x3f, r0	; 63
    5956:	0f 90       	pop	r0
    5958:	1f 90       	pop	r1
    595a:	18 95       	reti

0000595c <__vector_17>:
    595c:	1f 92       	push	r1
    595e:	0f 92       	push	r0
    5960:	0f b6       	in	r0, 0x3f	; 63
    5962:	0f 92       	push	r0
    5964:	08 b6       	in	r0, 0x38	; 56
    5966:	0f 92       	push	r0
    5968:	09 b6       	in	r0, 0x39	; 57
    596a:	0f 92       	push	r0
    596c:	0b b6       	in	r0, 0x3b	; 59
    596e:	0f 92       	push	r0
    5970:	11 24       	eor	r1, r1
    5972:	2f 93       	push	r18
    5974:	3f 93       	push	r19
    5976:	4f 93       	push	r20
    5978:	5f 93       	push	r21
    597a:	6f 93       	push	r22
    597c:	7f 93       	push	r23
    597e:	8f 93       	push	r24
    5980:	9f 93       	push	r25
    5982:	af 93       	push	r26
    5984:	bf 93       	push	r27
    5986:	ef 93       	push	r30
    5988:	ff 93       	push	r31
    598a:	81 e0       	ldi	r24, 0x01	; 1
    598c:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5990:	00 97       	sbiw	r24, 0x00	; 0
    5992:	41 f0       	breq	.+16     	; 0x59a4 <__vector_17+0x48>
    5994:	dc 01       	movw	r26, r24
    5996:	11 96       	adiw	r26, 0x01	; 1
    5998:	ed 91       	ld	r30, X+
    599a:	fc 91       	ld	r31, X
    599c:	12 97       	sbiw	r26, 0x02	; 2
    599e:	30 97       	sbiw	r30, 0x00	; 0
    59a0:	09 f0       	breq	.+2      	; 0x59a4 <__vector_17+0x48>
    59a2:	19 95       	eicall
    59a4:	ff 91       	pop	r31
    59a6:	ef 91       	pop	r30
    59a8:	bf 91       	pop	r27
    59aa:	af 91       	pop	r26
    59ac:	9f 91       	pop	r25
    59ae:	8f 91       	pop	r24
    59b0:	7f 91       	pop	r23
    59b2:	6f 91       	pop	r22
    59b4:	5f 91       	pop	r21
    59b6:	4f 91       	pop	r20
    59b8:	3f 91       	pop	r19
    59ba:	2f 91       	pop	r18
    59bc:	0f 90       	pop	r0
    59be:	0b be       	out	0x3b, r0	; 59
    59c0:	0f 90       	pop	r0
    59c2:	09 be       	out	0x39, r0	; 57
    59c4:	0f 90       	pop	r0
    59c6:	08 be       	out	0x38, r0	; 56
    59c8:	0f 90       	pop	r0
    59ca:	0f be       	out	0x3f, r0	; 63
    59cc:	0f 90       	pop	r0
    59ce:	1f 90       	pop	r1
    59d0:	18 95       	reti

000059d2 <__vector_18>:
    59d2:	1f 92       	push	r1
    59d4:	0f 92       	push	r0
    59d6:	0f b6       	in	r0, 0x3f	; 63
    59d8:	0f 92       	push	r0
    59da:	08 b6       	in	r0, 0x38	; 56
    59dc:	0f 92       	push	r0
    59de:	09 b6       	in	r0, 0x39	; 57
    59e0:	0f 92       	push	r0
    59e2:	0b b6       	in	r0, 0x3b	; 59
    59e4:	0f 92       	push	r0
    59e6:	11 24       	eor	r1, r1
    59e8:	2f 93       	push	r18
    59ea:	3f 93       	push	r19
    59ec:	4f 93       	push	r20
    59ee:	5f 93       	push	r21
    59f0:	6f 93       	push	r22
    59f2:	7f 93       	push	r23
    59f4:	8f 93       	push	r24
    59f6:	9f 93       	push	r25
    59f8:	af 93       	push	r26
    59fa:	bf 93       	push	r27
    59fc:	ef 93       	push	r30
    59fe:	ff 93       	push	r31
    5a00:	82 e0       	ldi	r24, 0x02	; 2
    5a02:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5a06:	00 97       	sbiw	r24, 0x00	; 0
    5a08:	41 f0       	breq	.+16     	; 0x5a1a <__vector_18+0x48>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	11 96       	adiw	r26, 0x01	; 1
    5a0e:	ed 91       	ld	r30, X+
    5a10:	fc 91       	ld	r31, X
    5a12:	12 97       	sbiw	r26, 0x02	; 2
    5a14:	30 97       	sbiw	r30, 0x00	; 0
    5a16:	09 f0       	breq	.+2      	; 0x5a1a <__vector_18+0x48>
    5a18:	19 95       	eicall
    5a1a:	ff 91       	pop	r31
    5a1c:	ef 91       	pop	r30
    5a1e:	bf 91       	pop	r27
    5a20:	af 91       	pop	r26
    5a22:	9f 91       	pop	r25
    5a24:	8f 91       	pop	r24
    5a26:	7f 91       	pop	r23
    5a28:	6f 91       	pop	r22
    5a2a:	5f 91       	pop	r21
    5a2c:	4f 91       	pop	r20
    5a2e:	3f 91       	pop	r19
    5a30:	2f 91       	pop	r18
    5a32:	0f 90       	pop	r0
    5a34:	0b be       	out	0x3b, r0	; 59
    5a36:	0f 90       	pop	r0
    5a38:	09 be       	out	0x39, r0	; 57
    5a3a:	0f 90       	pop	r0
    5a3c:	08 be       	out	0x38, r0	; 56
    5a3e:	0f 90       	pop	r0
    5a40:	0f be       	out	0x3f, r0	; 63
    5a42:	0f 90       	pop	r0
    5a44:	1f 90       	pop	r1
    5a46:	18 95       	reti

00005a48 <__vector_19>:
    5a48:	1f 92       	push	r1
    5a4a:	0f 92       	push	r0
    5a4c:	0f b6       	in	r0, 0x3f	; 63
    5a4e:	0f 92       	push	r0
    5a50:	08 b6       	in	r0, 0x38	; 56
    5a52:	0f 92       	push	r0
    5a54:	09 b6       	in	r0, 0x39	; 57
    5a56:	0f 92       	push	r0
    5a58:	0b b6       	in	r0, 0x3b	; 59
    5a5a:	0f 92       	push	r0
    5a5c:	11 24       	eor	r1, r1
    5a5e:	2f 93       	push	r18
    5a60:	3f 93       	push	r19
    5a62:	4f 93       	push	r20
    5a64:	5f 93       	push	r21
    5a66:	6f 93       	push	r22
    5a68:	7f 93       	push	r23
    5a6a:	8f 93       	push	r24
    5a6c:	9f 93       	push	r25
    5a6e:	af 93       	push	r26
    5a70:	bf 93       	push	r27
    5a72:	ef 93       	push	r30
    5a74:	ff 93       	push	r31
    5a76:	83 e0       	ldi	r24, 0x03	; 3
    5a78:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5a7c:	00 97       	sbiw	r24, 0x00	; 0
    5a7e:	41 f0       	breq	.+16     	; 0x5a90 <__vector_19+0x48>
    5a80:	dc 01       	movw	r26, r24
    5a82:	11 96       	adiw	r26, 0x01	; 1
    5a84:	ed 91       	ld	r30, X+
    5a86:	fc 91       	ld	r31, X
    5a88:	12 97       	sbiw	r26, 0x02	; 2
    5a8a:	30 97       	sbiw	r30, 0x00	; 0
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <__vector_19+0x48>
    5a8e:	19 95       	eicall
    5a90:	ff 91       	pop	r31
    5a92:	ef 91       	pop	r30
    5a94:	bf 91       	pop	r27
    5a96:	af 91       	pop	r26
    5a98:	9f 91       	pop	r25
    5a9a:	8f 91       	pop	r24
    5a9c:	7f 91       	pop	r23
    5a9e:	6f 91       	pop	r22
    5aa0:	5f 91       	pop	r21
    5aa2:	4f 91       	pop	r20
    5aa4:	3f 91       	pop	r19
    5aa6:	2f 91       	pop	r18
    5aa8:	0f 90       	pop	r0
    5aaa:	0b be       	out	0x3b, r0	; 59
    5aac:	0f 90       	pop	r0
    5aae:	09 be       	out	0x39, r0	; 57
    5ab0:	0f 90       	pop	r0
    5ab2:	08 be       	out	0x38, r0	; 56
    5ab4:	0f 90       	pop	r0
    5ab6:	0f be       	out	0x3f, r0	; 63
    5ab8:	0f 90       	pop	r0
    5aba:	1f 90       	pop	r1
    5abc:	18 95       	reti

00005abe <__vector_14>:
    5abe:	1f 92       	push	r1
    5ac0:	0f 92       	push	r0
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	0f 92       	push	r0
    5ac6:	08 b6       	in	r0, 0x38	; 56
    5ac8:	0f 92       	push	r0
    5aca:	09 b6       	in	r0, 0x39	; 57
    5acc:	0f 92       	push	r0
    5ace:	0b b6       	in	r0, 0x3b	; 59
    5ad0:	0f 92       	push	r0
    5ad2:	11 24       	eor	r1, r1
    5ad4:	2f 93       	push	r18
    5ad6:	3f 93       	push	r19
    5ad8:	4f 93       	push	r20
    5ada:	5f 93       	push	r21
    5adc:	6f 93       	push	r22
    5ade:	7f 93       	push	r23
    5ae0:	8f 93       	push	r24
    5ae2:	9f 93       	push	r25
    5ae4:	af 93       	push	r26
    5ae6:	bf 93       	push	r27
    5ae8:	ef 93       	push	r30
    5aea:	ff 93       	push	r31
    5aec:	84 e0       	ldi	r24, 0x04	; 4
    5aee:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5af2:	00 97       	sbiw	r24, 0x00	; 0
    5af4:	41 f0       	breq	.+16     	; 0x5b06 <__vector_14+0x48>
    5af6:	dc 01       	movw	r26, r24
    5af8:	11 96       	adiw	r26, 0x01	; 1
    5afa:	ed 91       	ld	r30, X+
    5afc:	fc 91       	ld	r31, X
    5afe:	12 97       	sbiw	r26, 0x02	; 2
    5b00:	30 97       	sbiw	r30, 0x00	; 0
    5b02:	09 f0       	breq	.+2      	; 0x5b06 <__vector_14+0x48>
    5b04:	19 95       	eicall
    5b06:	ff 91       	pop	r31
    5b08:	ef 91       	pop	r30
    5b0a:	bf 91       	pop	r27
    5b0c:	af 91       	pop	r26
    5b0e:	9f 91       	pop	r25
    5b10:	8f 91       	pop	r24
    5b12:	7f 91       	pop	r23
    5b14:	6f 91       	pop	r22
    5b16:	5f 91       	pop	r21
    5b18:	4f 91       	pop	r20
    5b1a:	3f 91       	pop	r19
    5b1c:	2f 91       	pop	r18
    5b1e:	0f 90       	pop	r0
    5b20:	0b be       	out	0x3b, r0	; 59
    5b22:	0f 90       	pop	r0
    5b24:	09 be       	out	0x39, r0	; 57
    5b26:	0f 90       	pop	r0
    5b28:	08 be       	out	0x38, r0	; 56
    5b2a:	0f 90       	pop	r0
    5b2c:	0f be       	out	0x3f, r0	; 63
    5b2e:	0f 90       	pop	r0
    5b30:	1f 90       	pop	r1
    5b32:	18 95       	reti

00005b34 <__vector_22>:
    5b34:	1f 92       	push	r1
    5b36:	0f 92       	push	r0
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	0f 92       	push	r0
    5b3c:	08 b6       	in	r0, 0x38	; 56
    5b3e:	0f 92       	push	r0
    5b40:	09 b6       	in	r0, 0x39	; 57
    5b42:	0f 92       	push	r0
    5b44:	0b b6       	in	r0, 0x3b	; 59
    5b46:	0f 92       	push	r0
    5b48:	11 24       	eor	r1, r1
    5b4a:	2f 93       	push	r18
    5b4c:	3f 93       	push	r19
    5b4e:	4f 93       	push	r20
    5b50:	5f 93       	push	r21
    5b52:	6f 93       	push	r22
    5b54:	7f 93       	push	r23
    5b56:	8f 93       	push	r24
    5b58:	9f 93       	push	r25
    5b5a:	af 93       	push	r26
    5b5c:	bf 93       	push	r27
    5b5e:	ef 93       	push	r30
    5b60:	ff 93       	push	r31
    5b62:	85 e0       	ldi	r24, 0x05	; 5
    5b64:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5b68:	00 97       	sbiw	r24, 0x00	; 0
    5b6a:	41 f0       	breq	.+16     	; 0x5b7c <__vector_22+0x48>
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	11 96       	adiw	r26, 0x01	; 1
    5b70:	ed 91       	ld	r30, X+
    5b72:	fc 91       	ld	r31, X
    5b74:	12 97       	sbiw	r26, 0x02	; 2
    5b76:	30 97       	sbiw	r30, 0x00	; 0
    5b78:	09 f0       	breq	.+2      	; 0x5b7c <__vector_22+0x48>
    5b7a:	19 95       	eicall
    5b7c:	ff 91       	pop	r31
    5b7e:	ef 91       	pop	r30
    5b80:	bf 91       	pop	r27
    5b82:	af 91       	pop	r26
    5b84:	9f 91       	pop	r25
    5b86:	8f 91       	pop	r24
    5b88:	7f 91       	pop	r23
    5b8a:	6f 91       	pop	r22
    5b8c:	5f 91       	pop	r21
    5b8e:	4f 91       	pop	r20
    5b90:	3f 91       	pop	r19
    5b92:	2f 91       	pop	r18
    5b94:	0f 90       	pop	r0
    5b96:	0b be       	out	0x3b, r0	; 59
    5b98:	0f 90       	pop	r0
    5b9a:	09 be       	out	0x39, r0	; 57
    5b9c:	0f 90       	pop	r0
    5b9e:	08 be       	out	0x38, r0	; 56
    5ba0:	0f 90       	pop	r0
    5ba2:	0f be       	out	0x3f, r0	; 63
    5ba4:	0f 90       	pop	r0
    5ba6:	1f 90       	pop	r1
    5ba8:	18 95       	reti

00005baa <__vector_23>:
    5baa:	1f 92       	push	r1
    5bac:	0f 92       	push	r0
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	0f 92       	push	r0
    5bb2:	08 b6       	in	r0, 0x38	; 56
    5bb4:	0f 92       	push	r0
    5bb6:	09 b6       	in	r0, 0x39	; 57
    5bb8:	0f 92       	push	r0
    5bba:	0b b6       	in	r0, 0x3b	; 59
    5bbc:	0f 92       	push	r0
    5bbe:	11 24       	eor	r1, r1
    5bc0:	2f 93       	push	r18
    5bc2:	3f 93       	push	r19
    5bc4:	4f 93       	push	r20
    5bc6:	5f 93       	push	r21
    5bc8:	6f 93       	push	r22
    5bca:	7f 93       	push	r23
    5bcc:	8f 93       	push	r24
    5bce:	9f 93       	push	r25
    5bd0:	af 93       	push	r26
    5bd2:	bf 93       	push	r27
    5bd4:	ef 93       	push	r30
    5bd6:	ff 93       	push	r31
    5bd8:	86 e0       	ldi	r24, 0x06	; 6
    5bda:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	41 f0       	breq	.+16     	; 0x5bf2 <__vector_23+0x48>
    5be2:	dc 01       	movw	r26, r24
    5be4:	11 96       	adiw	r26, 0x01	; 1
    5be6:	ed 91       	ld	r30, X+
    5be8:	fc 91       	ld	r31, X
    5bea:	12 97       	sbiw	r26, 0x02	; 2
    5bec:	30 97       	sbiw	r30, 0x00	; 0
    5bee:	09 f0       	breq	.+2      	; 0x5bf2 <__vector_23+0x48>
    5bf0:	19 95       	eicall
    5bf2:	ff 91       	pop	r31
    5bf4:	ef 91       	pop	r30
    5bf6:	bf 91       	pop	r27
    5bf8:	af 91       	pop	r26
    5bfa:	9f 91       	pop	r25
    5bfc:	8f 91       	pop	r24
    5bfe:	7f 91       	pop	r23
    5c00:	6f 91       	pop	r22
    5c02:	5f 91       	pop	r21
    5c04:	4f 91       	pop	r20
    5c06:	3f 91       	pop	r19
    5c08:	2f 91       	pop	r18
    5c0a:	0f 90       	pop	r0
    5c0c:	0b be       	out	0x3b, r0	; 59
    5c0e:	0f 90       	pop	r0
    5c10:	09 be       	out	0x39, r0	; 57
    5c12:	0f 90       	pop	r0
    5c14:	08 be       	out	0x38, r0	; 56
    5c16:	0f 90       	pop	r0
    5c18:	0f be       	out	0x3f, r0	; 63
    5c1a:	0f 90       	pop	r0
    5c1c:	1f 90       	pop	r1
    5c1e:	18 95       	reti

00005c20 <__vector_20>:
    5c20:	1f 92       	push	r1
    5c22:	0f 92       	push	r0
    5c24:	0f b6       	in	r0, 0x3f	; 63
    5c26:	0f 92       	push	r0
    5c28:	08 b6       	in	r0, 0x38	; 56
    5c2a:	0f 92       	push	r0
    5c2c:	09 b6       	in	r0, 0x39	; 57
    5c2e:	0f 92       	push	r0
    5c30:	0b b6       	in	r0, 0x3b	; 59
    5c32:	0f 92       	push	r0
    5c34:	11 24       	eor	r1, r1
    5c36:	2f 93       	push	r18
    5c38:	3f 93       	push	r19
    5c3a:	4f 93       	push	r20
    5c3c:	5f 93       	push	r21
    5c3e:	6f 93       	push	r22
    5c40:	7f 93       	push	r23
    5c42:	8f 93       	push	r24
    5c44:	9f 93       	push	r25
    5c46:	af 93       	push	r26
    5c48:	bf 93       	push	r27
    5c4a:	ef 93       	push	r30
    5c4c:	ff 93       	push	r31
    5c4e:	89 e0       	ldi	r24, 0x09	; 9
    5c50:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5c54:	00 97       	sbiw	r24, 0x00	; 0
    5c56:	41 f0       	breq	.+16     	; 0x5c68 <__vector_20+0x48>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	11 96       	adiw	r26, 0x01	; 1
    5c5c:	ed 91       	ld	r30, X+
    5c5e:	fc 91       	ld	r31, X
    5c60:	12 97       	sbiw	r26, 0x02	; 2
    5c62:	30 97       	sbiw	r30, 0x00	; 0
    5c64:	09 f0       	breq	.+2      	; 0x5c68 <__vector_20+0x48>
    5c66:	19 95       	eicall
    5c68:	ff 91       	pop	r31
    5c6a:	ef 91       	pop	r30
    5c6c:	bf 91       	pop	r27
    5c6e:	af 91       	pop	r26
    5c70:	9f 91       	pop	r25
    5c72:	8f 91       	pop	r24
    5c74:	7f 91       	pop	r23
    5c76:	6f 91       	pop	r22
    5c78:	5f 91       	pop	r21
    5c7a:	4f 91       	pop	r20
    5c7c:	3f 91       	pop	r19
    5c7e:	2f 91       	pop	r18
    5c80:	0f 90       	pop	r0
    5c82:	0b be       	out	0x3b, r0	; 59
    5c84:	0f 90       	pop	r0
    5c86:	09 be       	out	0x39, r0	; 57
    5c88:	0f 90       	pop	r0
    5c8a:	08 be       	out	0x38, r0	; 56
    5c8c:	0f 90       	pop	r0
    5c8e:	0f be       	out	0x3f, r0	; 63
    5c90:	0f 90       	pop	r0
    5c92:	1f 90       	pop	r1
    5c94:	18 95       	reti

00005c96 <__vector_79>:
    5c96:	1f 92       	push	r1
    5c98:	0f 92       	push	r0
    5c9a:	0f b6       	in	r0, 0x3f	; 63
    5c9c:	0f 92       	push	r0
    5c9e:	08 b6       	in	r0, 0x38	; 56
    5ca0:	0f 92       	push	r0
    5ca2:	09 b6       	in	r0, 0x39	; 57
    5ca4:	0f 92       	push	r0
    5ca6:	0b b6       	in	r0, 0x3b	; 59
    5ca8:	0f 92       	push	r0
    5caa:	11 24       	eor	r1, r1
    5cac:	2f 93       	push	r18
    5cae:	3f 93       	push	r19
    5cb0:	4f 93       	push	r20
    5cb2:	5f 93       	push	r21
    5cb4:	6f 93       	push	r22
    5cb6:	7f 93       	push	r23
    5cb8:	8f 93       	push	r24
    5cba:	9f 93       	push	r25
    5cbc:	af 93       	push	r26
    5cbe:	bf 93       	push	r27
    5cc0:	ef 93       	push	r30
    5cc2:	ff 93       	push	r31
    5cc4:	8a e0       	ldi	r24, 0x0A	; 10
    5cc6:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5cca:	00 97       	sbiw	r24, 0x00	; 0
    5ccc:	41 f0       	breq	.+16     	; 0x5cde <__vector_79+0x48>
    5cce:	dc 01       	movw	r26, r24
    5cd0:	11 96       	adiw	r26, 0x01	; 1
    5cd2:	ed 91       	ld	r30, X+
    5cd4:	fc 91       	ld	r31, X
    5cd6:	12 97       	sbiw	r26, 0x02	; 2
    5cd8:	30 97       	sbiw	r30, 0x00	; 0
    5cda:	09 f0       	breq	.+2      	; 0x5cde <__vector_79+0x48>
    5cdc:	19 95       	eicall
    5cde:	ff 91       	pop	r31
    5ce0:	ef 91       	pop	r30
    5ce2:	bf 91       	pop	r27
    5ce4:	af 91       	pop	r26
    5ce6:	9f 91       	pop	r25
    5ce8:	8f 91       	pop	r24
    5cea:	7f 91       	pop	r23
    5cec:	6f 91       	pop	r22
    5cee:	5f 91       	pop	r21
    5cf0:	4f 91       	pop	r20
    5cf2:	3f 91       	pop	r19
    5cf4:	2f 91       	pop	r18
    5cf6:	0f 90       	pop	r0
    5cf8:	0b be       	out	0x3b, r0	; 59
    5cfa:	0f 90       	pop	r0
    5cfc:	09 be       	out	0x39, r0	; 57
    5cfe:	0f 90       	pop	r0
    5d00:	08 be       	out	0x38, r0	; 56
    5d02:	0f 90       	pop	r0
    5d04:	0f be       	out	0x3f, r0	; 63
    5d06:	0f 90       	pop	r0
    5d08:	1f 90       	pop	r1
    5d0a:	18 95       	reti

00005d0c <__vector_80>:
    5d0c:	1f 92       	push	r1
    5d0e:	0f 92       	push	r0
    5d10:	0f b6       	in	r0, 0x3f	; 63
    5d12:	0f 92       	push	r0
    5d14:	08 b6       	in	r0, 0x38	; 56
    5d16:	0f 92       	push	r0
    5d18:	09 b6       	in	r0, 0x39	; 57
    5d1a:	0f 92       	push	r0
    5d1c:	0b b6       	in	r0, 0x3b	; 59
    5d1e:	0f 92       	push	r0
    5d20:	11 24       	eor	r1, r1
    5d22:	2f 93       	push	r18
    5d24:	3f 93       	push	r19
    5d26:	4f 93       	push	r20
    5d28:	5f 93       	push	r21
    5d2a:	6f 93       	push	r22
    5d2c:	7f 93       	push	r23
    5d2e:	8f 93       	push	r24
    5d30:	9f 93       	push	r25
    5d32:	af 93       	push	r26
    5d34:	bf 93       	push	r27
    5d36:	ef 93       	push	r30
    5d38:	ff 93       	push	r31
    5d3a:	8b e0       	ldi	r24, 0x0B	; 11
    5d3c:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5d40:	00 97       	sbiw	r24, 0x00	; 0
    5d42:	41 f0       	breq	.+16     	; 0x5d54 <__vector_80+0x48>
    5d44:	dc 01       	movw	r26, r24
    5d46:	11 96       	adiw	r26, 0x01	; 1
    5d48:	ed 91       	ld	r30, X+
    5d4a:	fc 91       	ld	r31, X
    5d4c:	12 97       	sbiw	r26, 0x02	; 2
    5d4e:	30 97       	sbiw	r30, 0x00	; 0
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <__vector_80+0x48>
    5d52:	19 95       	eicall
    5d54:	ff 91       	pop	r31
    5d56:	ef 91       	pop	r30
    5d58:	bf 91       	pop	r27
    5d5a:	af 91       	pop	r26
    5d5c:	9f 91       	pop	r25
    5d5e:	8f 91       	pop	r24
    5d60:	7f 91       	pop	r23
    5d62:	6f 91       	pop	r22
    5d64:	5f 91       	pop	r21
    5d66:	4f 91       	pop	r20
    5d68:	3f 91       	pop	r19
    5d6a:	2f 91       	pop	r18
    5d6c:	0f 90       	pop	r0
    5d6e:	0b be       	out	0x3b, r0	; 59
    5d70:	0f 90       	pop	r0
    5d72:	09 be       	out	0x39, r0	; 57
    5d74:	0f 90       	pop	r0
    5d76:	08 be       	out	0x38, r0	; 56
    5d78:	0f 90       	pop	r0
    5d7a:	0f be       	out	0x3f, r0	; 63
    5d7c:	0f 90       	pop	r0
    5d7e:	1f 90       	pop	r1
    5d80:	18 95       	reti

00005d82 <__vector_81>:
    5d82:	1f 92       	push	r1
    5d84:	0f 92       	push	r0
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	0f 92       	push	r0
    5d8a:	08 b6       	in	r0, 0x38	; 56
    5d8c:	0f 92       	push	r0
    5d8e:	09 b6       	in	r0, 0x39	; 57
    5d90:	0f 92       	push	r0
    5d92:	0b b6       	in	r0, 0x3b	; 59
    5d94:	0f 92       	push	r0
    5d96:	11 24       	eor	r1, r1
    5d98:	2f 93       	push	r18
    5d9a:	3f 93       	push	r19
    5d9c:	4f 93       	push	r20
    5d9e:	5f 93       	push	r21
    5da0:	6f 93       	push	r22
    5da2:	7f 93       	push	r23
    5da4:	8f 93       	push	r24
    5da6:	9f 93       	push	r25
    5da8:	af 93       	push	r26
    5daa:	bf 93       	push	r27
    5dac:	ef 93       	push	r30
    5dae:	ff 93       	push	r31
    5db0:	8c e0       	ldi	r24, 0x0C	; 12
    5db2:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5db6:	00 97       	sbiw	r24, 0x00	; 0
    5db8:	41 f0       	breq	.+16     	; 0x5dca <__vector_81+0x48>
    5dba:	dc 01       	movw	r26, r24
    5dbc:	11 96       	adiw	r26, 0x01	; 1
    5dbe:	ed 91       	ld	r30, X+
    5dc0:	fc 91       	ld	r31, X
    5dc2:	12 97       	sbiw	r26, 0x02	; 2
    5dc4:	30 97       	sbiw	r30, 0x00	; 0
    5dc6:	09 f0       	breq	.+2      	; 0x5dca <__vector_81+0x48>
    5dc8:	19 95       	eicall
    5dca:	ff 91       	pop	r31
    5dcc:	ef 91       	pop	r30
    5dce:	bf 91       	pop	r27
    5dd0:	af 91       	pop	r26
    5dd2:	9f 91       	pop	r25
    5dd4:	8f 91       	pop	r24
    5dd6:	7f 91       	pop	r23
    5dd8:	6f 91       	pop	r22
    5dda:	5f 91       	pop	r21
    5ddc:	4f 91       	pop	r20
    5dde:	3f 91       	pop	r19
    5de0:	2f 91       	pop	r18
    5de2:	0f 90       	pop	r0
    5de4:	0b be       	out	0x3b, r0	; 59
    5de6:	0f 90       	pop	r0
    5de8:	09 be       	out	0x39, r0	; 57
    5dea:	0f 90       	pop	r0
    5dec:	08 be       	out	0x38, r0	; 56
    5dee:	0f 90       	pop	r0
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	0f 90       	pop	r0
    5df4:	1f 90       	pop	r1
    5df6:	18 95       	reti

00005df8 <__vector_82>:
    5df8:	1f 92       	push	r1
    5dfa:	0f 92       	push	r0
    5dfc:	0f b6       	in	r0, 0x3f	; 63
    5dfe:	0f 92       	push	r0
    5e00:	08 b6       	in	r0, 0x38	; 56
    5e02:	0f 92       	push	r0
    5e04:	09 b6       	in	r0, 0x39	; 57
    5e06:	0f 92       	push	r0
    5e08:	0b b6       	in	r0, 0x3b	; 59
    5e0a:	0f 92       	push	r0
    5e0c:	11 24       	eor	r1, r1
    5e0e:	2f 93       	push	r18
    5e10:	3f 93       	push	r19
    5e12:	4f 93       	push	r20
    5e14:	5f 93       	push	r21
    5e16:	6f 93       	push	r22
    5e18:	7f 93       	push	r23
    5e1a:	8f 93       	push	r24
    5e1c:	9f 93       	push	r25
    5e1e:	af 93       	push	r26
    5e20:	bf 93       	push	r27
    5e22:	ef 93       	push	r30
    5e24:	ff 93       	push	r31
    5e26:	8d e0       	ldi	r24, 0x0D	; 13
    5e28:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5e2c:	00 97       	sbiw	r24, 0x00	; 0
    5e2e:	41 f0       	breq	.+16     	; 0x5e40 <__vector_82+0x48>
    5e30:	dc 01       	movw	r26, r24
    5e32:	11 96       	adiw	r26, 0x01	; 1
    5e34:	ed 91       	ld	r30, X+
    5e36:	fc 91       	ld	r31, X
    5e38:	12 97       	sbiw	r26, 0x02	; 2
    5e3a:	30 97       	sbiw	r30, 0x00	; 0
    5e3c:	09 f0       	breq	.+2      	; 0x5e40 <__vector_82+0x48>
    5e3e:	19 95       	eicall
    5e40:	ff 91       	pop	r31
    5e42:	ef 91       	pop	r30
    5e44:	bf 91       	pop	r27
    5e46:	af 91       	pop	r26
    5e48:	9f 91       	pop	r25
    5e4a:	8f 91       	pop	r24
    5e4c:	7f 91       	pop	r23
    5e4e:	6f 91       	pop	r22
    5e50:	5f 91       	pop	r21
    5e52:	4f 91       	pop	r20
    5e54:	3f 91       	pop	r19
    5e56:	2f 91       	pop	r18
    5e58:	0f 90       	pop	r0
    5e5a:	0b be       	out	0x3b, r0	; 59
    5e5c:	0f 90       	pop	r0
    5e5e:	09 be       	out	0x39, r0	; 57
    5e60:	0f 90       	pop	r0
    5e62:	08 be       	out	0x38, r0	; 56
    5e64:	0f 90       	pop	r0
    5e66:	0f be       	out	0x3f, r0	; 63
    5e68:	0f 90       	pop	r0
    5e6a:	1f 90       	pop	r1
    5e6c:	18 95       	reti

00005e6e <__vector_77>:
    5e6e:	1f 92       	push	r1
    5e70:	0f 92       	push	r0
    5e72:	0f b6       	in	r0, 0x3f	; 63
    5e74:	0f 92       	push	r0
    5e76:	08 b6       	in	r0, 0x38	; 56
    5e78:	0f 92       	push	r0
    5e7a:	09 b6       	in	r0, 0x39	; 57
    5e7c:	0f 92       	push	r0
    5e7e:	0b b6       	in	r0, 0x3b	; 59
    5e80:	0f 92       	push	r0
    5e82:	11 24       	eor	r1, r1
    5e84:	2f 93       	push	r18
    5e86:	3f 93       	push	r19
    5e88:	4f 93       	push	r20
    5e8a:	5f 93       	push	r21
    5e8c:	6f 93       	push	r22
    5e8e:	7f 93       	push	r23
    5e90:	8f 93       	push	r24
    5e92:	9f 93       	push	r25
    5e94:	af 93       	push	r26
    5e96:	bf 93       	push	r27
    5e98:	ef 93       	push	r30
    5e9a:	ff 93       	push	r31
    5e9c:	8e e0       	ldi	r24, 0x0E	; 14
    5e9e:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5ea2:	00 97       	sbiw	r24, 0x00	; 0
    5ea4:	41 f0       	breq	.+16     	; 0x5eb6 <__vector_77+0x48>
    5ea6:	dc 01       	movw	r26, r24
    5ea8:	11 96       	adiw	r26, 0x01	; 1
    5eaa:	ed 91       	ld	r30, X+
    5eac:	fc 91       	ld	r31, X
    5eae:	12 97       	sbiw	r26, 0x02	; 2
    5eb0:	30 97       	sbiw	r30, 0x00	; 0
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <__vector_77+0x48>
    5eb4:	19 95       	eicall
    5eb6:	ff 91       	pop	r31
    5eb8:	ef 91       	pop	r30
    5eba:	bf 91       	pop	r27
    5ebc:	af 91       	pop	r26
    5ebe:	9f 91       	pop	r25
    5ec0:	8f 91       	pop	r24
    5ec2:	7f 91       	pop	r23
    5ec4:	6f 91       	pop	r22
    5ec6:	5f 91       	pop	r21
    5ec8:	4f 91       	pop	r20
    5eca:	3f 91       	pop	r19
    5ecc:	2f 91       	pop	r18
    5ece:	0f 90       	pop	r0
    5ed0:	0b be       	out	0x3b, r0	; 59
    5ed2:	0f 90       	pop	r0
    5ed4:	09 be       	out	0x39, r0	; 57
    5ed6:	0f 90       	pop	r0
    5ed8:	08 be       	out	0x38, r0	; 56
    5eda:	0f 90       	pop	r0
    5edc:	0f be       	out	0x3f, r0	; 63
    5ede:	0f 90       	pop	r0
    5ee0:	1f 90       	pop	r1
    5ee2:	18 95       	reti

00005ee4 <__vector_85>:
    5ee4:	1f 92       	push	r1
    5ee6:	0f 92       	push	r0
    5ee8:	0f b6       	in	r0, 0x3f	; 63
    5eea:	0f 92       	push	r0
    5eec:	08 b6       	in	r0, 0x38	; 56
    5eee:	0f 92       	push	r0
    5ef0:	09 b6       	in	r0, 0x39	; 57
    5ef2:	0f 92       	push	r0
    5ef4:	0b b6       	in	r0, 0x3b	; 59
    5ef6:	0f 92       	push	r0
    5ef8:	11 24       	eor	r1, r1
    5efa:	2f 93       	push	r18
    5efc:	3f 93       	push	r19
    5efe:	4f 93       	push	r20
    5f00:	5f 93       	push	r21
    5f02:	6f 93       	push	r22
    5f04:	7f 93       	push	r23
    5f06:	8f 93       	push	r24
    5f08:	9f 93       	push	r25
    5f0a:	af 93       	push	r26
    5f0c:	bf 93       	push	r27
    5f0e:	ef 93       	push	r30
    5f10:	ff 93       	push	r31
    5f12:	8f e0       	ldi	r24, 0x0F	; 15
    5f14:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5f18:	00 97       	sbiw	r24, 0x00	; 0
    5f1a:	41 f0       	breq	.+16     	; 0x5f2c <__vector_85+0x48>
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	11 96       	adiw	r26, 0x01	; 1
    5f20:	ed 91       	ld	r30, X+
    5f22:	fc 91       	ld	r31, X
    5f24:	12 97       	sbiw	r26, 0x02	; 2
    5f26:	30 97       	sbiw	r30, 0x00	; 0
    5f28:	09 f0       	breq	.+2      	; 0x5f2c <__vector_85+0x48>
    5f2a:	19 95       	eicall
    5f2c:	ff 91       	pop	r31
    5f2e:	ef 91       	pop	r30
    5f30:	bf 91       	pop	r27
    5f32:	af 91       	pop	r26
    5f34:	9f 91       	pop	r25
    5f36:	8f 91       	pop	r24
    5f38:	7f 91       	pop	r23
    5f3a:	6f 91       	pop	r22
    5f3c:	5f 91       	pop	r21
    5f3e:	4f 91       	pop	r20
    5f40:	3f 91       	pop	r19
    5f42:	2f 91       	pop	r18
    5f44:	0f 90       	pop	r0
    5f46:	0b be       	out	0x3b, r0	; 59
    5f48:	0f 90       	pop	r0
    5f4a:	09 be       	out	0x39, r0	; 57
    5f4c:	0f 90       	pop	r0
    5f4e:	08 be       	out	0x38, r0	; 56
    5f50:	0f 90       	pop	r0
    5f52:	0f be       	out	0x3f, r0	; 63
    5f54:	0f 90       	pop	r0
    5f56:	1f 90       	pop	r1
    5f58:	18 95       	reti

00005f5a <__vector_86>:
    5f5a:	1f 92       	push	r1
    5f5c:	0f 92       	push	r0
    5f5e:	0f b6       	in	r0, 0x3f	; 63
    5f60:	0f 92       	push	r0
    5f62:	08 b6       	in	r0, 0x38	; 56
    5f64:	0f 92       	push	r0
    5f66:	09 b6       	in	r0, 0x39	; 57
    5f68:	0f 92       	push	r0
    5f6a:	0b b6       	in	r0, 0x3b	; 59
    5f6c:	0f 92       	push	r0
    5f6e:	11 24       	eor	r1, r1
    5f70:	2f 93       	push	r18
    5f72:	3f 93       	push	r19
    5f74:	4f 93       	push	r20
    5f76:	5f 93       	push	r21
    5f78:	6f 93       	push	r22
    5f7a:	7f 93       	push	r23
    5f7c:	8f 93       	push	r24
    5f7e:	9f 93       	push	r25
    5f80:	af 93       	push	r26
    5f82:	bf 93       	push	r27
    5f84:	ef 93       	push	r30
    5f86:	ff 93       	push	r31
    5f88:	80 e1       	ldi	r24, 0x10	; 16
    5f8a:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    5f8e:	00 97       	sbiw	r24, 0x00	; 0
    5f90:	41 f0       	breq	.+16     	; 0x5fa2 <__vector_86+0x48>
    5f92:	dc 01       	movw	r26, r24
    5f94:	11 96       	adiw	r26, 0x01	; 1
    5f96:	ed 91       	ld	r30, X+
    5f98:	fc 91       	ld	r31, X
    5f9a:	12 97       	sbiw	r26, 0x02	; 2
    5f9c:	30 97       	sbiw	r30, 0x00	; 0
    5f9e:	09 f0       	breq	.+2      	; 0x5fa2 <__vector_86+0x48>
    5fa0:	19 95       	eicall
    5fa2:	ff 91       	pop	r31
    5fa4:	ef 91       	pop	r30
    5fa6:	bf 91       	pop	r27
    5fa8:	af 91       	pop	r26
    5faa:	9f 91       	pop	r25
    5fac:	8f 91       	pop	r24
    5fae:	7f 91       	pop	r23
    5fb0:	6f 91       	pop	r22
    5fb2:	5f 91       	pop	r21
    5fb4:	4f 91       	pop	r20
    5fb6:	3f 91       	pop	r19
    5fb8:	2f 91       	pop	r18
    5fba:	0f 90       	pop	r0
    5fbc:	0b be       	out	0x3b, r0	; 59
    5fbe:	0f 90       	pop	r0
    5fc0:	09 be       	out	0x39, r0	; 57
    5fc2:	0f 90       	pop	r0
    5fc4:	08 be       	out	0x38, r0	; 56
    5fc6:	0f 90       	pop	r0
    5fc8:	0f be       	out	0x3f, r0	; 63
    5fca:	0f 90       	pop	r0
    5fcc:	1f 90       	pop	r1
    5fce:	18 95       	reti

00005fd0 <__vector_83>:
    5fd0:	1f 92       	push	r1
    5fd2:	0f 92       	push	r0
    5fd4:	0f b6       	in	r0, 0x3f	; 63
    5fd6:	0f 92       	push	r0
    5fd8:	08 b6       	in	r0, 0x38	; 56
    5fda:	0f 92       	push	r0
    5fdc:	09 b6       	in	r0, 0x39	; 57
    5fde:	0f 92       	push	r0
    5fe0:	0b b6       	in	r0, 0x3b	; 59
    5fe2:	0f 92       	push	r0
    5fe4:	11 24       	eor	r1, r1
    5fe6:	2f 93       	push	r18
    5fe8:	3f 93       	push	r19
    5fea:	4f 93       	push	r20
    5fec:	5f 93       	push	r21
    5fee:	6f 93       	push	r22
    5ff0:	7f 93       	push	r23
    5ff2:	8f 93       	push	r24
    5ff4:	9f 93       	push	r25
    5ff6:	af 93       	push	r26
    5ff8:	bf 93       	push	r27
    5ffa:	ef 93       	push	r30
    5ffc:	ff 93       	push	r31
    5ffe:	83 e1       	ldi	r24, 0x13	; 19
    6000:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6004:	00 97       	sbiw	r24, 0x00	; 0
    6006:	41 f0       	breq	.+16     	; 0x6018 <__vector_83+0x48>
    6008:	dc 01       	movw	r26, r24
    600a:	11 96       	adiw	r26, 0x01	; 1
    600c:	ed 91       	ld	r30, X+
    600e:	fc 91       	ld	r31, X
    6010:	12 97       	sbiw	r26, 0x02	; 2
    6012:	30 97       	sbiw	r30, 0x00	; 0
    6014:	09 f0       	breq	.+2      	; 0x6018 <__vector_83+0x48>
    6016:	19 95       	eicall
    6018:	ff 91       	pop	r31
    601a:	ef 91       	pop	r30
    601c:	bf 91       	pop	r27
    601e:	af 91       	pop	r26
    6020:	9f 91       	pop	r25
    6022:	8f 91       	pop	r24
    6024:	7f 91       	pop	r23
    6026:	6f 91       	pop	r22
    6028:	5f 91       	pop	r21
    602a:	4f 91       	pop	r20
    602c:	3f 91       	pop	r19
    602e:	2f 91       	pop	r18
    6030:	0f 90       	pop	r0
    6032:	0b be       	out	0x3b, r0	; 59
    6034:	0f 90       	pop	r0
    6036:	09 be       	out	0x39, r0	; 57
    6038:	0f 90       	pop	r0
    603a:	08 be       	out	0x38, r0	; 56
    603c:	0f 90       	pop	r0
    603e:	0f be       	out	0x3f, r0	; 63
    6040:	0f 90       	pop	r0
    6042:	1f 90       	pop	r1
    6044:	18 95       	reti

00006046 <__vector_49>:
    6046:	1f 92       	push	r1
    6048:	0f 92       	push	r0
    604a:	0f b6       	in	r0, 0x3f	; 63
    604c:	0f 92       	push	r0
    604e:	08 b6       	in	r0, 0x38	; 56
    6050:	0f 92       	push	r0
    6052:	09 b6       	in	r0, 0x39	; 57
    6054:	0f 92       	push	r0
    6056:	0b b6       	in	r0, 0x3b	; 59
    6058:	0f 92       	push	r0
    605a:	11 24       	eor	r1, r1
    605c:	2f 93       	push	r18
    605e:	3f 93       	push	r19
    6060:	4f 93       	push	r20
    6062:	5f 93       	push	r21
    6064:	6f 93       	push	r22
    6066:	7f 93       	push	r23
    6068:	8f 93       	push	r24
    606a:	9f 93       	push	r25
    606c:	af 93       	push	r26
    606e:	bf 93       	push	r27
    6070:	ef 93       	push	r30
    6072:	ff 93       	push	r31
    6074:	84 e1       	ldi	r24, 0x14	; 20
    6076:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    607a:	00 97       	sbiw	r24, 0x00	; 0
    607c:	41 f0       	breq	.+16     	; 0x608e <__vector_49+0x48>
    607e:	dc 01       	movw	r26, r24
    6080:	11 96       	adiw	r26, 0x01	; 1
    6082:	ed 91       	ld	r30, X+
    6084:	fc 91       	ld	r31, X
    6086:	12 97       	sbiw	r26, 0x02	; 2
    6088:	30 97       	sbiw	r30, 0x00	; 0
    608a:	09 f0       	breq	.+2      	; 0x608e <__vector_49+0x48>
    608c:	19 95       	eicall
    608e:	ff 91       	pop	r31
    6090:	ef 91       	pop	r30
    6092:	bf 91       	pop	r27
    6094:	af 91       	pop	r26
    6096:	9f 91       	pop	r25
    6098:	8f 91       	pop	r24
    609a:	7f 91       	pop	r23
    609c:	6f 91       	pop	r22
    609e:	5f 91       	pop	r21
    60a0:	4f 91       	pop	r20
    60a2:	3f 91       	pop	r19
    60a4:	2f 91       	pop	r18
    60a6:	0f 90       	pop	r0
    60a8:	0b be       	out	0x3b, r0	; 59
    60aa:	0f 90       	pop	r0
    60ac:	09 be       	out	0x39, r0	; 57
    60ae:	0f 90       	pop	r0
    60b0:	08 be       	out	0x38, r0	; 56
    60b2:	0f 90       	pop	r0
    60b4:	0f be       	out	0x3f, r0	; 63
    60b6:	0f 90       	pop	r0
    60b8:	1f 90       	pop	r1
    60ba:	18 95       	reti

000060bc <__vector_50>:
    60bc:	1f 92       	push	r1
    60be:	0f 92       	push	r0
    60c0:	0f b6       	in	r0, 0x3f	; 63
    60c2:	0f 92       	push	r0
    60c4:	08 b6       	in	r0, 0x38	; 56
    60c6:	0f 92       	push	r0
    60c8:	09 b6       	in	r0, 0x39	; 57
    60ca:	0f 92       	push	r0
    60cc:	0b b6       	in	r0, 0x3b	; 59
    60ce:	0f 92       	push	r0
    60d0:	11 24       	eor	r1, r1
    60d2:	2f 93       	push	r18
    60d4:	3f 93       	push	r19
    60d6:	4f 93       	push	r20
    60d8:	5f 93       	push	r21
    60da:	6f 93       	push	r22
    60dc:	7f 93       	push	r23
    60de:	8f 93       	push	r24
    60e0:	9f 93       	push	r25
    60e2:	af 93       	push	r26
    60e4:	bf 93       	push	r27
    60e6:	ef 93       	push	r30
    60e8:	ff 93       	push	r31
    60ea:	85 e1       	ldi	r24, 0x15	; 21
    60ec:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    60f0:	00 97       	sbiw	r24, 0x00	; 0
    60f2:	41 f0       	breq	.+16     	; 0x6104 <__vector_50+0x48>
    60f4:	dc 01       	movw	r26, r24
    60f6:	11 96       	adiw	r26, 0x01	; 1
    60f8:	ed 91       	ld	r30, X+
    60fa:	fc 91       	ld	r31, X
    60fc:	12 97       	sbiw	r26, 0x02	; 2
    60fe:	30 97       	sbiw	r30, 0x00	; 0
    6100:	09 f0       	breq	.+2      	; 0x6104 <__vector_50+0x48>
    6102:	19 95       	eicall
    6104:	ff 91       	pop	r31
    6106:	ef 91       	pop	r30
    6108:	bf 91       	pop	r27
    610a:	af 91       	pop	r26
    610c:	9f 91       	pop	r25
    610e:	8f 91       	pop	r24
    6110:	7f 91       	pop	r23
    6112:	6f 91       	pop	r22
    6114:	5f 91       	pop	r21
    6116:	4f 91       	pop	r20
    6118:	3f 91       	pop	r19
    611a:	2f 91       	pop	r18
    611c:	0f 90       	pop	r0
    611e:	0b be       	out	0x3b, r0	; 59
    6120:	0f 90       	pop	r0
    6122:	09 be       	out	0x39, r0	; 57
    6124:	0f 90       	pop	r0
    6126:	08 be       	out	0x38, r0	; 56
    6128:	0f 90       	pop	r0
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	0f 90       	pop	r0
    612e:	1f 90       	pop	r1
    6130:	18 95       	reti

00006132 <__vector_51>:
    6132:	1f 92       	push	r1
    6134:	0f 92       	push	r0
    6136:	0f b6       	in	r0, 0x3f	; 63
    6138:	0f 92       	push	r0
    613a:	08 b6       	in	r0, 0x38	; 56
    613c:	0f 92       	push	r0
    613e:	09 b6       	in	r0, 0x39	; 57
    6140:	0f 92       	push	r0
    6142:	0b b6       	in	r0, 0x3b	; 59
    6144:	0f 92       	push	r0
    6146:	11 24       	eor	r1, r1
    6148:	2f 93       	push	r18
    614a:	3f 93       	push	r19
    614c:	4f 93       	push	r20
    614e:	5f 93       	push	r21
    6150:	6f 93       	push	r22
    6152:	7f 93       	push	r23
    6154:	8f 93       	push	r24
    6156:	9f 93       	push	r25
    6158:	af 93       	push	r26
    615a:	bf 93       	push	r27
    615c:	ef 93       	push	r30
    615e:	ff 93       	push	r31
    6160:	86 e1       	ldi	r24, 0x16	; 22
    6162:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6166:	00 97       	sbiw	r24, 0x00	; 0
    6168:	41 f0       	breq	.+16     	; 0x617a <__vector_51+0x48>
    616a:	dc 01       	movw	r26, r24
    616c:	11 96       	adiw	r26, 0x01	; 1
    616e:	ed 91       	ld	r30, X+
    6170:	fc 91       	ld	r31, X
    6172:	12 97       	sbiw	r26, 0x02	; 2
    6174:	30 97       	sbiw	r30, 0x00	; 0
    6176:	09 f0       	breq	.+2      	; 0x617a <__vector_51+0x48>
    6178:	19 95       	eicall
    617a:	ff 91       	pop	r31
    617c:	ef 91       	pop	r30
    617e:	bf 91       	pop	r27
    6180:	af 91       	pop	r26
    6182:	9f 91       	pop	r25
    6184:	8f 91       	pop	r24
    6186:	7f 91       	pop	r23
    6188:	6f 91       	pop	r22
    618a:	5f 91       	pop	r21
    618c:	4f 91       	pop	r20
    618e:	3f 91       	pop	r19
    6190:	2f 91       	pop	r18
    6192:	0f 90       	pop	r0
    6194:	0b be       	out	0x3b, r0	; 59
    6196:	0f 90       	pop	r0
    6198:	09 be       	out	0x39, r0	; 57
    619a:	0f 90       	pop	r0
    619c:	08 be       	out	0x38, r0	; 56
    619e:	0f 90       	pop	r0
    61a0:	0f be       	out	0x3f, r0	; 63
    61a2:	0f 90       	pop	r0
    61a4:	1f 90       	pop	r1
    61a6:	18 95       	reti

000061a8 <__vector_52>:
    61a8:	1f 92       	push	r1
    61aa:	0f 92       	push	r0
    61ac:	0f b6       	in	r0, 0x3f	; 63
    61ae:	0f 92       	push	r0
    61b0:	08 b6       	in	r0, 0x38	; 56
    61b2:	0f 92       	push	r0
    61b4:	09 b6       	in	r0, 0x39	; 57
    61b6:	0f 92       	push	r0
    61b8:	0b b6       	in	r0, 0x3b	; 59
    61ba:	0f 92       	push	r0
    61bc:	11 24       	eor	r1, r1
    61be:	2f 93       	push	r18
    61c0:	3f 93       	push	r19
    61c2:	4f 93       	push	r20
    61c4:	5f 93       	push	r21
    61c6:	6f 93       	push	r22
    61c8:	7f 93       	push	r23
    61ca:	8f 93       	push	r24
    61cc:	9f 93       	push	r25
    61ce:	af 93       	push	r26
    61d0:	bf 93       	push	r27
    61d2:	ef 93       	push	r30
    61d4:	ff 93       	push	r31
    61d6:	87 e1       	ldi	r24, 0x17	; 23
    61d8:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    61dc:	00 97       	sbiw	r24, 0x00	; 0
    61de:	41 f0       	breq	.+16     	; 0x61f0 <__vector_52+0x48>
    61e0:	dc 01       	movw	r26, r24
    61e2:	11 96       	adiw	r26, 0x01	; 1
    61e4:	ed 91       	ld	r30, X+
    61e6:	fc 91       	ld	r31, X
    61e8:	12 97       	sbiw	r26, 0x02	; 2
    61ea:	30 97       	sbiw	r30, 0x00	; 0
    61ec:	09 f0       	breq	.+2      	; 0x61f0 <__vector_52+0x48>
    61ee:	19 95       	eicall
    61f0:	ff 91       	pop	r31
    61f2:	ef 91       	pop	r30
    61f4:	bf 91       	pop	r27
    61f6:	af 91       	pop	r26
    61f8:	9f 91       	pop	r25
    61fa:	8f 91       	pop	r24
    61fc:	7f 91       	pop	r23
    61fe:	6f 91       	pop	r22
    6200:	5f 91       	pop	r21
    6202:	4f 91       	pop	r20
    6204:	3f 91       	pop	r19
    6206:	2f 91       	pop	r18
    6208:	0f 90       	pop	r0
    620a:	0b be       	out	0x3b, r0	; 59
    620c:	0f 90       	pop	r0
    620e:	09 be       	out	0x39, r0	; 57
    6210:	0f 90       	pop	r0
    6212:	08 be       	out	0x38, r0	; 56
    6214:	0f 90       	pop	r0
    6216:	0f be       	out	0x3f, r0	; 63
    6218:	0f 90       	pop	r0
    621a:	1f 90       	pop	r1
    621c:	18 95       	reti

0000621e <__vector_47>:
    621e:	1f 92       	push	r1
    6220:	0f 92       	push	r0
    6222:	0f b6       	in	r0, 0x3f	; 63
    6224:	0f 92       	push	r0
    6226:	08 b6       	in	r0, 0x38	; 56
    6228:	0f 92       	push	r0
    622a:	09 b6       	in	r0, 0x39	; 57
    622c:	0f 92       	push	r0
    622e:	0b b6       	in	r0, 0x3b	; 59
    6230:	0f 92       	push	r0
    6232:	11 24       	eor	r1, r1
    6234:	2f 93       	push	r18
    6236:	3f 93       	push	r19
    6238:	4f 93       	push	r20
    623a:	5f 93       	push	r21
    623c:	6f 93       	push	r22
    623e:	7f 93       	push	r23
    6240:	8f 93       	push	r24
    6242:	9f 93       	push	r25
    6244:	af 93       	push	r26
    6246:	bf 93       	push	r27
    6248:	ef 93       	push	r30
    624a:	ff 93       	push	r31
    624c:	88 e1       	ldi	r24, 0x18	; 24
    624e:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6252:	00 97       	sbiw	r24, 0x00	; 0
    6254:	41 f0       	breq	.+16     	; 0x6266 <__vector_47+0x48>
    6256:	dc 01       	movw	r26, r24
    6258:	11 96       	adiw	r26, 0x01	; 1
    625a:	ed 91       	ld	r30, X+
    625c:	fc 91       	ld	r31, X
    625e:	12 97       	sbiw	r26, 0x02	; 2
    6260:	30 97       	sbiw	r30, 0x00	; 0
    6262:	09 f0       	breq	.+2      	; 0x6266 <__vector_47+0x48>
    6264:	19 95       	eicall
    6266:	ff 91       	pop	r31
    6268:	ef 91       	pop	r30
    626a:	bf 91       	pop	r27
    626c:	af 91       	pop	r26
    626e:	9f 91       	pop	r25
    6270:	8f 91       	pop	r24
    6272:	7f 91       	pop	r23
    6274:	6f 91       	pop	r22
    6276:	5f 91       	pop	r21
    6278:	4f 91       	pop	r20
    627a:	3f 91       	pop	r19
    627c:	2f 91       	pop	r18
    627e:	0f 90       	pop	r0
    6280:	0b be       	out	0x3b, r0	; 59
    6282:	0f 90       	pop	r0
    6284:	09 be       	out	0x39, r0	; 57
    6286:	0f 90       	pop	r0
    6288:	08 be       	out	0x38, r0	; 56
    628a:	0f 90       	pop	r0
    628c:	0f be       	out	0x3f, r0	; 63
    628e:	0f 90       	pop	r0
    6290:	1f 90       	pop	r1
    6292:	18 95       	reti

00006294 <__vector_55>:
    6294:	1f 92       	push	r1
    6296:	0f 92       	push	r0
    6298:	0f b6       	in	r0, 0x3f	; 63
    629a:	0f 92       	push	r0
    629c:	08 b6       	in	r0, 0x38	; 56
    629e:	0f 92       	push	r0
    62a0:	09 b6       	in	r0, 0x39	; 57
    62a2:	0f 92       	push	r0
    62a4:	0b b6       	in	r0, 0x3b	; 59
    62a6:	0f 92       	push	r0
    62a8:	11 24       	eor	r1, r1
    62aa:	2f 93       	push	r18
    62ac:	3f 93       	push	r19
    62ae:	4f 93       	push	r20
    62b0:	5f 93       	push	r21
    62b2:	6f 93       	push	r22
    62b4:	7f 93       	push	r23
    62b6:	8f 93       	push	r24
    62b8:	9f 93       	push	r25
    62ba:	af 93       	push	r26
    62bc:	bf 93       	push	r27
    62be:	ef 93       	push	r30
    62c0:	ff 93       	push	r31
    62c2:	89 e1       	ldi	r24, 0x19	; 25
    62c4:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    62c8:	00 97       	sbiw	r24, 0x00	; 0
    62ca:	41 f0       	breq	.+16     	; 0x62dc <__vector_55+0x48>
    62cc:	dc 01       	movw	r26, r24
    62ce:	11 96       	adiw	r26, 0x01	; 1
    62d0:	ed 91       	ld	r30, X+
    62d2:	fc 91       	ld	r31, X
    62d4:	12 97       	sbiw	r26, 0x02	; 2
    62d6:	30 97       	sbiw	r30, 0x00	; 0
    62d8:	09 f0       	breq	.+2      	; 0x62dc <__vector_55+0x48>
    62da:	19 95       	eicall
    62dc:	ff 91       	pop	r31
    62de:	ef 91       	pop	r30
    62e0:	bf 91       	pop	r27
    62e2:	af 91       	pop	r26
    62e4:	9f 91       	pop	r25
    62e6:	8f 91       	pop	r24
    62e8:	7f 91       	pop	r23
    62ea:	6f 91       	pop	r22
    62ec:	5f 91       	pop	r21
    62ee:	4f 91       	pop	r20
    62f0:	3f 91       	pop	r19
    62f2:	2f 91       	pop	r18
    62f4:	0f 90       	pop	r0
    62f6:	0b be       	out	0x3b, r0	; 59
    62f8:	0f 90       	pop	r0
    62fa:	09 be       	out	0x39, r0	; 57
    62fc:	0f 90       	pop	r0
    62fe:	08 be       	out	0x38, r0	; 56
    6300:	0f 90       	pop	r0
    6302:	0f be       	out	0x3f, r0	; 63
    6304:	0f 90       	pop	r0
    6306:	1f 90       	pop	r1
    6308:	18 95       	reti

0000630a <__vector_56>:
    630a:	1f 92       	push	r1
    630c:	0f 92       	push	r0
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	0f 92       	push	r0
    6312:	08 b6       	in	r0, 0x38	; 56
    6314:	0f 92       	push	r0
    6316:	09 b6       	in	r0, 0x39	; 57
    6318:	0f 92       	push	r0
    631a:	0b b6       	in	r0, 0x3b	; 59
    631c:	0f 92       	push	r0
    631e:	11 24       	eor	r1, r1
    6320:	2f 93       	push	r18
    6322:	3f 93       	push	r19
    6324:	4f 93       	push	r20
    6326:	5f 93       	push	r21
    6328:	6f 93       	push	r22
    632a:	7f 93       	push	r23
    632c:	8f 93       	push	r24
    632e:	9f 93       	push	r25
    6330:	af 93       	push	r26
    6332:	bf 93       	push	r27
    6334:	ef 93       	push	r30
    6336:	ff 93       	push	r31
    6338:	8a e1       	ldi	r24, 0x1A	; 26
    633a:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    633e:	00 97       	sbiw	r24, 0x00	; 0
    6340:	41 f0       	breq	.+16     	; 0x6352 <__vector_56+0x48>
    6342:	dc 01       	movw	r26, r24
    6344:	11 96       	adiw	r26, 0x01	; 1
    6346:	ed 91       	ld	r30, X+
    6348:	fc 91       	ld	r31, X
    634a:	12 97       	sbiw	r26, 0x02	; 2
    634c:	30 97       	sbiw	r30, 0x00	; 0
    634e:	09 f0       	breq	.+2      	; 0x6352 <__vector_56+0x48>
    6350:	19 95       	eicall
    6352:	ff 91       	pop	r31
    6354:	ef 91       	pop	r30
    6356:	bf 91       	pop	r27
    6358:	af 91       	pop	r26
    635a:	9f 91       	pop	r25
    635c:	8f 91       	pop	r24
    635e:	7f 91       	pop	r23
    6360:	6f 91       	pop	r22
    6362:	5f 91       	pop	r21
    6364:	4f 91       	pop	r20
    6366:	3f 91       	pop	r19
    6368:	2f 91       	pop	r18
    636a:	0f 90       	pop	r0
    636c:	0b be       	out	0x3b, r0	; 59
    636e:	0f 90       	pop	r0
    6370:	09 be       	out	0x39, r0	; 57
    6372:	0f 90       	pop	r0
    6374:	08 be       	out	0x38, r0	; 56
    6376:	0f 90       	pop	r0
    6378:	0f be       	out	0x3f, r0	; 63
    637a:	0f 90       	pop	r0
    637c:	1f 90       	pop	r1
    637e:	18 95       	reti

00006380 <__vector_53>:
    6380:	1f 92       	push	r1
    6382:	0f 92       	push	r0
    6384:	0f b6       	in	r0, 0x3f	; 63
    6386:	0f 92       	push	r0
    6388:	08 b6       	in	r0, 0x38	; 56
    638a:	0f 92       	push	r0
    638c:	09 b6       	in	r0, 0x39	; 57
    638e:	0f 92       	push	r0
    6390:	0b b6       	in	r0, 0x3b	; 59
    6392:	0f 92       	push	r0
    6394:	11 24       	eor	r1, r1
    6396:	2f 93       	push	r18
    6398:	3f 93       	push	r19
    639a:	4f 93       	push	r20
    639c:	5f 93       	push	r21
    639e:	6f 93       	push	r22
    63a0:	7f 93       	push	r23
    63a2:	8f 93       	push	r24
    63a4:	9f 93       	push	r25
    63a6:	af 93       	push	r26
    63a8:	bf 93       	push	r27
    63aa:	ef 93       	push	r30
    63ac:	ff 93       	push	r31
    63ae:	8d e1       	ldi	r24, 0x1D	; 29
    63b0:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    63b4:	00 97       	sbiw	r24, 0x00	; 0
    63b6:	41 f0       	breq	.+16     	; 0x63c8 <__vector_53+0x48>
    63b8:	dc 01       	movw	r26, r24
    63ba:	11 96       	adiw	r26, 0x01	; 1
    63bc:	ed 91       	ld	r30, X+
    63be:	fc 91       	ld	r31, X
    63c0:	12 97       	sbiw	r26, 0x02	; 2
    63c2:	30 97       	sbiw	r30, 0x00	; 0
    63c4:	09 f0       	breq	.+2      	; 0x63c8 <__vector_53+0x48>
    63c6:	19 95       	eicall
    63c8:	ff 91       	pop	r31
    63ca:	ef 91       	pop	r30
    63cc:	bf 91       	pop	r27
    63ce:	af 91       	pop	r26
    63d0:	9f 91       	pop	r25
    63d2:	8f 91       	pop	r24
    63d4:	7f 91       	pop	r23
    63d6:	6f 91       	pop	r22
    63d8:	5f 91       	pop	r21
    63da:	4f 91       	pop	r20
    63dc:	3f 91       	pop	r19
    63de:	2f 91       	pop	r18
    63e0:	0f 90       	pop	r0
    63e2:	0b be       	out	0x3b, r0	; 59
    63e4:	0f 90       	pop	r0
    63e6:	09 be       	out	0x39, r0	; 57
    63e8:	0f 90       	pop	r0
    63ea:	08 be       	out	0x38, r0	; 56
    63ec:	0f 90       	pop	r0
    63ee:	0f be       	out	0x3f, r0	; 63
    63f0:	0f 90       	pop	r0
    63f2:	1f 90       	pop	r1
    63f4:	18 95       	reti

000063f6 <__vector_110>:
    63f6:	1f 92       	push	r1
    63f8:	0f 92       	push	r0
    63fa:	0f b6       	in	r0, 0x3f	; 63
    63fc:	0f 92       	push	r0
    63fe:	08 b6       	in	r0, 0x38	; 56
    6400:	0f 92       	push	r0
    6402:	09 b6       	in	r0, 0x39	; 57
    6404:	0f 92       	push	r0
    6406:	0b b6       	in	r0, 0x3b	; 59
    6408:	0f 92       	push	r0
    640a:	11 24       	eor	r1, r1
    640c:	2f 93       	push	r18
    640e:	3f 93       	push	r19
    6410:	4f 93       	push	r20
    6412:	5f 93       	push	r21
    6414:	6f 93       	push	r22
    6416:	7f 93       	push	r23
    6418:	8f 93       	push	r24
    641a:	9f 93       	push	r25
    641c:	af 93       	push	r26
    641e:	bf 93       	push	r27
    6420:	ef 93       	push	r30
    6422:	ff 93       	push	r31
    6424:	8e e1       	ldi	r24, 0x1E	; 30
    6426:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    642a:	00 97       	sbiw	r24, 0x00	; 0
    642c:	41 f0       	breq	.+16     	; 0x643e <__vector_110+0x48>
    642e:	dc 01       	movw	r26, r24
    6430:	11 96       	adiw	r26, 0x01	; 1
    6432:	ed 91       	ld	r30, X+
    6434:	fc 91       	ld	r31, X
    6436:	12 97       	sbiw	r26, 0x02	; 2
    6438:	30 97       	sbiw	r30, 0x00	; 0
    643a:	09 f0       	breq	.+2      	; 0x643e <__vector_110+0x48>
    643c:	19 95       	eicall
    643e:	ff 91       	pop	r31
    6440:	ef 91       	pop	r30
    6442:	bf 91       	pop	r27
    6444:	af 91       	pop	r26
    6446:	9f 91       	pop	r25
    6448:	8f 91       	pop	r24
    644a:	7f 91       	pop	r23
    644c:	6f 91       	pop	r22
    644e:	5f 91       	pop	r21
    6450:	4f 91       	pop	r20
    6452:	3f 91       	pop	r19
    6454:	2f 91       	pop	r18
    6456:	0f 90       	pop	r0
    6458:	0b be       	out	0x3b, r0	; 59
    645a:	0f 90       	pop	r0
    645c:	09 be       	out	0x39, r0	; 57
    645e:	0f 90       	pop	r0
    6460:	08 be       	out	0x38, r0	; 56
    6462:	0f 90       	pop	r0
    6464:	0f be       	out	0x3f, r0	; 63
    6466:	0f 90       	pop	r0
    6468:	1f 90       	pop	r1
    646a:	18 95       	reti

0000646c <__vector_111>:
    646c:	1f 92       	push	r1
    646e:	0f 92       	push	r0
    6470:	0f b6       	in	r0, 0x3f	; 63
    6472:	0f 92       	push	r0
    6474:	08 b6       	in	r0, 0x38	; 56
    6476:	0f 92       	push	r0
    6478:	09 b6       	in	r0, 0x39	; 57
    647a:	0f 92       	push	r0
    647c:	0b b6       	in	r0, 0x3b	; 59
    647e:	0f 92       	push	r0
    6480:	11 24       	eor	r1, r1
    6482:	2f 93       	push	r18
    6484:	3f 93       	push	r19
    6486:	4f 93       	push	r20
    6488:	5f 93       	push	r21
    648a:	6f 93       	push	r22
    648c:	7f 93       	push	r23
    648e:	8f 93       	push	r24
    6490:	9f 93       	push	r25
    6492:	af 93       	push	r26
    6494:	bf 93       	push	r27
    6496:	ef 93       	push	r30
    6498:	ff 93       	push	r31
    649a:	8f e1       	ldi	r24, 0x1F	; 31
    649c:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    64a0:	00 97       	sbiw	r24, 0x00	; 0
    64a2:	41 f0       	breq	.+16     	; 0x64b4 <__vector_111+0x48>
    64a4:	dc 01       	movw	r26, r24
    64a6:	11 96       	adiw	r26, 0x01	; 1
    64a8:	ed 91       	ld	r30, X+
    64aa:	fc 91       	ld	r31, X
    64ac:	12 97       	sbiw	r26, 0x02	; 2
    64ae:	30 97       	sbiw	r30, 0x00	; 0
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <__vector_111+0x48>
    64b2:	19 95       	eicall
    64b4:	ff 91       	pop	r31
    64b6:	ef 91       	pop	r30
    64b8:	bf 91       	pop	r27
    64ba:	af 91       	pop	r26
    64bc:	9f 91       	pop	r25
    64be:	8f 91       	pop	r24
    64c0:	7f 91       	pop	r23
    64c2:	6f 91       	pop	r22
    64c4:	5f 91       	pop	r21
    64c6:	4f 91       	pop	r20
    64c8:	3f 91       	pop	r19
    64ca:	2f 91       	pop	r18
    64cc:	0f 90       	pop	r0
    64ce:	0b be       	out	0x3b, r0	; 59
    64d0:	0f 90       	pop	r0
    64d2:	09 be       	out	0x39, r0	; 57
    64d4:	0f 90       	pop	r0
    64d6:	08 be       	out	0x38, r0	; 56
    64d8:	0f 90       	pop	r0
    64da:	0f be       	out	0x3f, r0	; 63
    64dc:	0f 90       	pop	r0
    64de:	1f 90       	pop	r1
    64e0:	18 95       	reti

000064e2 <__vector_112>:
    64e2:	1f 92       	push	r1
    64e4:	0f 92       	push	r0
    64e6:	0f b6       	in	r0, 0x3f	; 63
    64e8:	0f 92       	push	r0
    64ea:	08 b6       	in	r0, 0x38	; 56
    64ec:	0f 92       	push	r0
    64ee:	09 b6       	in	r0, 0x39	; 57
    64f0:	0f 92       	push	r0
    64f2:	0b b6       	in	r0, 0x3b	; 59
    64f4:	0f 92       	push	r0
    64f6:	11 24       	eor	r1, r1
    64f8:	2f 93       	push	r18
    64fa:	3f 93       	push	r19
    64fc:	4f 93       	push	r20
    64fe:	5f 93       	push	r21
    6500:	6f 93       	push	r22
    6502:	7f 93       	push	r23
    6504:	8f 93       	push	r24
    6506:	9f 93       	push	r25
    6508:	af 93       	push	r26
    650a:	bf 93       	push	r27
    650c:	ef 93       	push	r30
    650e:	ff 93       	push	r31
    6510:	80 e2       	ldi	r24, 0x20	; 32
    6512:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6516:	00 97       	sbiw	r24, 0x00	; 0
    6518:	41 f0       	breq	.+16     	; 0x652a <__vector_112+0x48>
    651a:	dc 01       	movw	r26, r24
    651c:	11 96       	adiw	r26, 0x01	; 1
    651e:	ed 91       	ld	r30, X+
    6520:	fc 91       	ld	r31, X
    6522:	12 97       	sbiw	r26, 0x02	; 2
    6524:	30 97       	sbiw	r30, 0x00	; 0
    6526:	09 f0       	breq	.+2      	; 0x652a <__vector_112+0x48>
    6528:	19 95       	eicall
    652a:	ff 91       	pop	r31
    652c:	ef 91       	pop	r30
    652e:	bf 91       	pop	r27
    6530:	af 91       	pop	r26
    6532:	9f 91       	pop	r25
    6534:	8f 91       	pop	r24
    6536:	7f 91       	pop	r23
    6538:	6f 91       	pop	r22
    653a:	5f 91       	pop	r21
    653c:	4f 91       	pop	r20
    653e:	3f 91       	pop	r19
    6540:	2f 91       	pop	r18
    6542:	0f 90       	pop	r0
    6544:	0b be       	out	0x3b, r0	; 59
    6546:	0f 90       	pop	r0
    6548:	09 be       	out	0x39, r0	; 57
    654a:	0f 90       	pop	r0
    654c:	08 be       	out	0x38, r0	; 56
    654e:	0f 90       	pop	r0
    6550:	0f be       	out	0x3f, r0	; 63
    6552:	0f 90       	pop	r0
    6554:	1f 90       	pop	r1
    6556:	18 95       	reti

00006558 <__vector_113>:
    6558:	1f 92       	push	r1
    655a:	0f 92       	push	r0
    655c:	0f b6       	in	r0, 0x3f	; 63
    655e:	0f 92       	push	r0
    6560:	08 b6       	in	r0, 0x38	; 56
    6562:	0f 92       	push	r0
    6564:	09 b6       	in	r0, 0x39	; 57
    6566:	0f 92       	push	r0
    6568:	0b b6       	in	r0, 0x3b	; 59
    656a:	0f 92       	push	r0
    656c:	11 24       	eor	r1, r1
    656e:	2f 93       	push	r18
    6570:	3f 93       	push	r19
    6572:	4f 93       	push	r20
    6574:	5f 93       	push	r21
    6576:	6f 93       	push	r22
    6578:	7f 93       	push	r23
    657a:	8f 93       	push	r24
    657c:	9f 93       	push	r25
    657e:	af 93       	push	r26
    6580:	bf 93       	push	r27
    6582:	ef 93       	push	r30
    6584:	ff 93       	push	r31
    6586:	81 e2       	ldi	r24, 0x21	; 33
    6588:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    658c:	00 97       	sbiw	r24, 0x00	; 0
    658e:	41 f0       	breq	.+16     	; 0x65a0 <__vector_113+0x48>
    6590:	dc 01       	movw	r26, r24
    6592:	11 96       	adiw	r26, 0x01	; 1
    6594:	ed 91       	ld	r30, X+
    6596:	fc 91       	ld	r31, X
    6598:	12 97       	sbiw	r26, 0x02	; 2
    659a:	30 97       	sbiw	r30, 0x00	; 0
    659c:	09 f0       	breq	.+2      	; 0x65a0 <__vector_113+0x48>
    659e:	19 95       	eicall
    65a0:	ff 91       	pop	r31
    65a2:	ef 91       	pop	r30
    65a4:	bf 91       	pop	r27
    65a6:	af 91       	pop	r26
    65a8:	9f 91       	pop	r25
    65aa:	8f 91       	pop	r24
    65ac:	7f 91       	pop	r23
    65ae:	6f 91       	pop	r22
    65b0:	5f 91       	pop	r21
    65b2:	4f 91       	pop	r20
    65b4:	3f 91       	pop	r19
    65b6:	2f 91       	pop	r18
    65b8:	0f 90       	pop	r0
    65ba:	0b be       	out	0x3b, r0	; 59
    65bc:	0f 90       	pop	r0
    65be:	09 be       	out	0x39, r0	; 57
    65c0:	0f 90       	pop	r0
    65c2:	08 be       	out	0x38, r0	; 56
    65c4:	0f 90       	pop	r0
    65c6:	0f be       	out	0x3f, r0	; 63
    65c8:	0f 90       	pop	r0
    65ca:	1f 90       	pop	r1
    65cc:	18 95       	reti

000065ce <__vector_108>:
    65ce:	1f 92       	push	r1
    65d0:	0f 92       	push	r0
    65d2:	0f b6       	in	r0, 0x3f	; 63
    65d4:	0f 92       	push	r0
    65d6:	08 b6       	in	r0, 0x38	; 56
    65d8:	0f 92       	push	r0
    65da:	09 b6       	in	r0, 0x39	; 57
    65dc:	0f 92       	push	r0
    65de:	0b b6       	in	r0, 0x3b	; 59
    65e0:	0f 92       	push	r0
    65e2:	11 24       	eor	r1, r1
    65e4:	2f 93       	push	r18
    65e6:	3f 93       	push	r19
    65e8:	4f 93       	push	r20
    65ea:	5f 93       	push	r21
    65ec:	6f 93       	push	r22
    65ee:	7f 93       	push	r23
    65f0:	8f 93       	push	r24
    65f2:	9f 93       	push	r25
    65f4:	af 93       	push	r26
    65f6:	bf 93       	push	r27
    65f8:	ef 93       	push	r30
    65fa:	ff 93       	push	r31
    65fc:	82 e2       	ldi	r24, 0x22	; 34
    65fe:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6602:	00 97       	sbiw	r24, 0x00	; 0
    6604:	41 f0       	breq	.+16     	; 0x6616 <__vector_108+0x48>
    6606:	dc 01       	movw	r26, r24
    6608:	11 96       	adiw	r26, 0x01	; 1
    660a:	ed 91       	ld	r30, X+
    660c:	fc 91       	ld	r31, X
    660e:	12 97       	sbiw	r26, 0x02	; 2
    6610:	30 97       	sbiw	r30, 0x00	; 0
    6612:	09 f0       	breq	.+2      	; 0x6616 <__vector_108+0x48>
    6614:	19 95       	eicall
    6616:	ff 91       	pop	r31
    6618:	ef 91       	pop	r30
    661a:	bf 91       	pop	r27
    661c:	af 91       	pop	r26
    661e:	9f 91       	pop	r25
    6620:	8f 91       	pop	r24
    6622:	7f 91       	pop	r23
    6624:	6f 91       	pop	r22
    6626:	5f 91       	pop	r21
    6628:	4f 91       	pop	r20
    662a:	3f 91       	pop	r19
    662c:	2f 91       	pop	r18
    662e:	0f 90       	pop	r0
    6630:	0b be       	out	0x3b, r0	; 59
    6632:	0f 90       	pop	r0
    6634:	09 be       	out	0x39, r0	; 57
    6636:	0f 90       	pop	r0
    6638:	08 be       	out	0x38, r0	; 56
    663a:	0f 90       	pop	r0
    663c:	0f be       	out	0x3f, r0	; 63
    663e:	0f 90       	pop	r0
    6640:	1f 90       	pop	r1
    6642:	18 95       	reti

00006644 <__vector_116>:
    6644:	1f 92       	push	r1
    6646:	0f 92       	push	r0
    6648:	0f b6       	in	r0, 0x3f	; 63
    664a:	0f 92       	push	r0
    664c:	08 b6       	in	r0, 0x38	; 56
    664e:	0f 92       	push	r0
    6650:	09 b6       	in	r0, 0x39	; 57
    6652:	0f 92       	push	r0
    6654:	0b b6       	in	r0, 0x3b	; 59
    6656:	0f 92       	push	r0
    6658:	11 24       	eor	r1, r1
    665a:	2f 93       	push	r18
    665c:	3f 93       	push	r19
    665e:	4f 93       	push	r20
    6660:	5f 93       	push	r21
    6662:	6f 93       	push	r22
    6664:	7f 93       	push	r23
    6666:	8f 93       	push	r24
    6668:	9f 93       	push	r25
    666a:	af 93       	push	r26
    666c:	bf 93       	push	r27
    666e:	ef 93       	push	r30
    6670:	ff 93       	push	r31
    6672:	83 e2       	ldi	r24, 0x23	; 35
    6674:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6678:	00 97       	sbiw	r24, 0x00	; 0
    667a:	41 f0       	breq	.+16     	; 0x668c <__vector_116+0x48>
    667c:	dc 01       	movw	r26, r24
    667e:	11 96       	adiw	r26, 0x01	; 1
    6680:	ed 91       	ld	r30, X+
    6682:	fc 91       	ld	r31, X
    6684:	12 97       	sbiw	r26, 0x02	; 2
    6686:	30 97       	sbiw	r30, 0x00	; 0
    6688:	09 f0       	breq	.+2      	; 0x668c <__vector_116+0x48>
    668a:	19 95       	eicall
    668c:	ff 91       	pop	r31
    668e:	ef 91       	pop	r30
    6690:	bf 91       	pop	r27
    6692:	af 91       	pop	r26
    6694:	9f 91       	pop	r25
    6696:	8f 91       	pop	r24
    6698:	7f 91       	pop	r23
    669a:	6f 91       	pop	r22
    669c:	5f 91       	pop	r21
    669e:	4f 91       	pop	r20
    66a0:	3f 91       	pop	r19
    66a2:	2f 91       	pop	r18
    66a4:	0f 90       	pop	r0
    66a6:	0b be       	out	0x3b, r0	; 59
    66a8:	0f 90       	pop	r0
    66aa:	09 be       	out	0x39, r0	; 57
    66ac:	0f 90       	pop	r0
    66ae:	08 be       	out	0x38, r0	; 56
    66b0:	0f 90       	pop	r0
    66b2:	0f be       	out	0x3f, r0	; 63
    66b4:	0f 90       	pop	r0
    66b6:	1f 90       	pop	r1
    66b8:	18 95       	reti

000066ba <__vector_117>:
    66ba:	1f 92       	push	r1
    66bc:	0f 92       	push	r0
    66be:	0f b6       	in	r0, 0x3f	; 63
    66c0:	0f 92       	push	r0
    66c2:	08 b6       	in	r0, 0x38	; 56
    66c4:	0f 92       	push	r0
    66c6:	09 b6       	in	r0, 0x39	; 57
    66c8:	0f 92       	push	r0
    66ca:	0b b6       	in	r0, 0x3b	; 59
    66cc:	0f 92       	push	r0
    66ce:	11 24       	eor	r1, r1
    66d0:	2f 93       	push	r18
    66d2:	3f 93       	push	r19
    66d4:	4f 93       	push	r20
    66d6:	5f 93       	push	r21
    66d8:	6f 93       	push	r22
    66da:	7f 93       	push	r23
    66dc:	8f 93       	push	r24
    66de:	9f 93       	push	r25
    66e0:	af 93       	push	r26
    66e2:	bf 93       	push	r27
    66e4:	ef 93       	push	r30
    66e6:	ff 93       	push	r31
    66e8:	84 e2       	ldi	r24, 0x24	; 36
    66ea:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    66ee:	00 97       	sbiw	r24, 0x00	; 0
    66f0:	41 f0       	breq	.+16     	; 0x6702 <__vector_117+0x48>
    66f2:	dc 01       	movw	r26, r24
    66f4:	11 96       	adiw	r26, 0x01	; 1
    66f6:	ed 91       	ld	r30, X+
    66f8:	fc 91       	ld	r31, X
    66fa:	12 97       	sbiw	r26, 0x02	; 2
    66fc:	30 97       	sbiw	r30, 0x00	; 0
    66fe:	09 f0       	breq	.+2      	; 0x6702 <__vector_117+0x48>
    6700:	19 95       	eicall
    6702:	ff 91       	pop	r31
    6704:	ef 91       	pop	r30
    6706:	bf 91       	pop	r27
    6708:	af 91       	pop	r26
    670a:	9f 91       	pop	r25
    670c:	8f 91       	pop	r24
    670e:	7f 91       	pop	r23
    6710:	6f 91       	pop	r22
    6712:	5f 91       	pop	r21
    6714:	4f 91       	pop	r20
    6716:	3f 91       	pop	r19
    6718:	2f 91       	pop	r18
    671a:	0f 90       	pop	r0
    671c:	0b be       	out	0x3b, r0	; 59
    671e:	0f 90       	pop	r0
    6720:	09 be       	out	0x39, r0	; 57
    6722:	0f 90       	pop	r0
    6724:	08 be       	out	0x38, r0	; 56
    6726:	0f 90       	pop	r0
    6728:	0f be       	out	0x3f, r0	; 63
    672a:	0f 90       	pop	r0
    672c:	1f 90       	pop	r1
    672e:	18 95       	reti

00006730 <__vector_114>:
    6730:	1f 92       	push	r1
    6732:	0f 92       	push	r0
    6734:	0f b6       	in	r0, 0x3f	; 63
    6736:	0f 92       	push	r0
    6738:	08 b6       	in	r0, 0x38	; 56
    673a:	0f 92       	push	r0
    673c:	09 b6       	in	r0, 0x39	; 57
    673e:	0f 92       	push	r0
    6740:	0b b6       	in	r0, 0x3b	; 59
    6742:	0f 92       	push	r0
    6744:	11 24       	eor	r1, r1
    6746:	2f 93       	push	r18
    6748:	3f 93       	push	r19
    674a:	4f 93       	push	r20
    674c:	5f 93       	push	r21
    674e:	6f 93       	push	r22
    6750:	7f 93       	push	r23
    6752:	8f 93       	push	r24
    6754:	9f 93       	push	r25
    6756:	af 93       	push	r26
    6758:	bf 93       	push	r27
    675a:	ef 93       	push	r30
    675c:	ff 93       	push	r31
    675e:	87 e2       	ldi	r24, 0x27	; 39
    6760:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    6764:	00 97       	sbiw	r24, 0x00	; 0
    6766:	41 f0       	breq	.+16     	; 0x6778 <__vector_114+0x48>
    6768:	dc 01       	movw	r26, r24
    676a:	11 96       	adiw	r26, 0x01	; 1
    676c:	ed 91       	ld	r30, X+
    676e:	fc 91       	ld	r31, X
    6770:	12 97       	sbiw	r26, 0x02	; 2
    6772:	30 97       	sbiw	r30, 0x00	; 0
    6774:	09 f0       	breq	.+2      	; 0x6778 <__vector_114+0x48>
    6776:	19 95       	eicall
    6778:	ff 91       	pop	r31
    677a:	ef 91       	pop	r30
    677c:	bf 91       	pop	r27
    677e:	af 91       	pop	r26
    6780:	9f 91       	pop	r25
    6782:	8f 91       	pop	r24
    6784:	7f 91       	pop	r23
    6786:	6f 91       	pop	r22
    6788:	5f 91       	pop	r21
    678a:	4f 91       	pop	r20
    678c:	3f 91       	pop	r19
    678e:	2f 91       	pop	r18
    6790:	0f 90       	pop	r0
    6792:	0b be       	out	0x3b, r0	; 59
    6794:	0f 90       	pop	r0
    6796:	09 be       	out	0x39, r0	; 57
    6798:	0f 90       	pop	r0
    679a:	08 be       	out	0x38, r0	; 56
    679c:	0f 90       	pop	r0
    679e:	0f be       	out	0x3f, r0	; 63
    67a0:	0f 90       	pop	r0
    67a2:	1f 90       	pop	r1
    67a4:	18 95       	reti

000067a6 <hal_requestTimerInterrupt>:
    67a6:	cf 92       	push	r12
    67a8:	df 92       	push	r13
    67aa:	ef 92       	push	r14
    67ac:	ff 92       	push	r15
    67ae:	0f 93       	push	r16
    67b0:	1f 93       	push	r17
    67b2:	cf 93       	push	r28
    67b4:	df 93       	push	r29
    67b6:	cd b7       	in	r28, 0x3d	; 61
    67b8:	de b7       	in	r29, 0x3e	; 62
    67ba:	27 97       	sbiw	r28, 0x07	; 7
    67bc:	cd bf       	out	0x3d, r28	; 61
    67be:	de bf       	out	0x3e, r29	; 62
    67c0:	8e 83       	std	Y+6, r24	; 0x06
    67c2:	9f 83       	std	Y+7, r25	; 0x07
    67c4:	06 2f       	mov	r16, r22
    67c6:	6a 01       	movw	r12, r20
    67c8:	8f b7       	in	r24, 0x3f	; 63
    67ca:	89 83       	std	Y+1, r24	; 0x01
    67cc:	f8 94       	cli
    67ce:	ee 81       	ldd	r30, Y+6	; 0x06
    67d0:	ff 81       	ldd	r31, Y+7	; 0x07
    67d2:	80 91 87 23 	lds	r24, 0x2387
    67d6:	90 91 88 23 	lds	r25, 0x2388
    67da:	24 81       	ldd	r18, Z+4	; 0x04
    67dc:	35 81       	ldd	r19, Z+5	; 0x05
    67de:	28 17       	cp	r18, r24
    67e0:	39 07       	cpc	r19, r25
    67e2:	21 f0       	breq	.+8      	; 0x67ec <hal_requestTimerInterrupt+0x46>
    67e4:	89 81       	ldd	r24, Y+1	; 0x01
    67e6:	8f bf       	out	0x3f, r24	; 63
    67e8:	8b ef       	ldi	r24, 0xFB	; 251
    67ea:	a5 c0       	rjmp	.+330    	; 0x6936 <hal_requestTimerInterrupt+0x190>
    67ec:	ee 81       	ldd	r30, Y+6	; 0x06
    67ee:	ff 81       	ldd	r31, Y+7	; 0x07
    67f0:	e0 80       	ld	r14, Z
    67f2:	f1 80       	ldd	r15, Z+1	; 0x01
    67f4:	d7 01       	movw	r26, r14
    67f6:	1c 91       	ld	r17, X
    67f8:	16 0f       	add	r17, r22
    67fa:	81 2f       	mov	r24, r17
    67fc:	87 50       	subi	r24, 0x07	; 7
    67fe:	82 30       	cpi	r24, 0x02	; 2
    6800:	70 f0       	brcs	.+28     	; 0x681e <hal_requestTimerInterrupt+0x78>
    6802:	11 31       	cpi	r17, 0x11	; 17
    6804:	61 f0       	breq	.+24     	; 0x681e <hal_requestTimerInterrupt+0x78>
    6806:	12 31       	cpi	r17, 0x12	; 18
    6808:	51 f0       	breq	.+20     	; 0x681e <hal_requestTimerInterrupt+0x78>
    680a:	1b 31       	cpi	r17, 0x1B	; 27
    680c:	41 f0       	breq	.+16     	; 0x681e <hal_requestTimerInterrupt+0x78>
    680e:	1c 31       	cpi	r17, 0x1C	; 28
    6810:	31 f0       	breq	.+12     	; 0x681e <hal_requestTimerInterrupt+0x78>
    6812:	15 32       	cpi	r17, 0x25	; 37
    6814:	21 f0       	breq	.+8      	; 0x681e <hal_requestTimerInterrupt+0x78>
    6816:	16 32       	cpi	r17, 0x26	; 38
    6818:	11 f0       	breq	.+4      	; 0x681e <hal_requestTimerInterrupt+0x78>
    681a:	18 32       	cpi	r17, 0x28	; 40
    681c:	20 f0       	brcs	.+8      	; 0x6826 <hal_requestTimerInterrupt+0x80>
    681e:	89 81       	ldd	r24, Y+1	; 0x01
    6820:	8f bf       	out	0x3f, r24	; 63
    6822:	8a ef       	ldi	r24, 0xFA	; 250
    6824:	88 c0       	rjmp	.+272    	; 0x6936 <hal_requestTimerInterrupt+0x190>
    6826:	81 2f       	mov	r24, r17
    6828:	0e 94 39 2c 	call	0x5872	; 0x5872 <findTimerIntElement>
    682c:	00 97       	sbiw	r24, 0x00	; 0
    682e:	09 f0       	breq	.+2      	; 0x6832 <hal_requestTimerInterrupt+0x8c>
    6830:	7b c0       	rjmp	.+246    	; 0x6928 <hal_requestTimerInterrupt+0x182>
    6832:	83 e0       	ldi	r24, 0x03	; 3
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    683a:	8a 83       	std	Y+2, r24	; 0x02
    683c:	9b 83       	std	Y+3, r25	; 0x03
    683e:	8a 81       	ldd	r24, Y+2	; 0x02
    6840:	9b 81       	ldd	r25, Y+3	; 0x03
    6842:	97 fd       	sbrc	r25, 7
    6844:	0c c0       	rjmp	.+24     	; 0x685e <hal_requestTimerInterrupt+0xb8>
    6846:	80 91 79 23 	lds	r24, 0x2379
    684a:	90 91 7a 23 	lds	r25, 0x237A
    684e:	6a 81       	ldd	r22, Y+2	; 0x02
    6850:	7b 81       	ldd	r23, Y+3	; 0x03
    6852:	41 e0       	ldi	r20, 0x01	; 1
    6854:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    6858:	8a 81       	ldd	r24, Y+2	; 0x02
    685a:	9b 81       	ldd	r25, Y+3	; 0x03
    685c:	02 c0       	rjmp	.+4      	; 0x6862 <hal_requestTimerInterrupt+0xbc>
    685e:	8f ef       	ldi	r24, 0xFF	; 255
    6860:	9f ef       	ldi	r25, 0xFF	; 255
    6862:	8c 83       	std	Y+4, r24	; 0x04
    6864:	9d 83       	std	Y+5, r25	; 0x05
    6866:	8c 81       	ldd	r24, Y+4	; 0x04
    6868:	9d 81       	ldd	r25, Y+5	; 0x05
    686a:	97 ff       	sbrs	r25, 7
    686c:	04 c0       	rjmp	.+8      	; 0x6876 <hal_requestTimerInterrupt+0xd0>
    686e:	89 81       	ldd	r24, Y+1	; 0x01
    6870:	8f bf       	out	0x3f, r24	; 63
    6872:	8f ef       	ldi	r24, 0xFF	; 255
    6874:	60 c0       	rjmp	.+192    	; 0x6936 <hal_requestTimerInterrupt+0x190>
    6876:	ec 81       	ldd	r30, Y+4	; 0x04
    6878:	fd 81       	ldd	r31, Y+5	; 0x05
    687a:	01 90       	ld	r0, Z+
    687c:	f0 81       	ld	r31, Z
    687e:	e0 2d       	mov	r30, r0
    6880:	10 83       	st	Z, r17
    6882:	c1 82       	std	Z+1, r12	; 0x01
    6884:	d2 82       	std	Z+2, r13	; 0x02
    6886:	f7 01       	movw	r30, r14
    6888:	82 81       	ldd	r24, Z+2	; 0x02
    688a:	8f 5f       	subi	r24, 0xFF	; 255
    688c:	82 83       	std	Z+2, r24	; 0x02
    688e:	04 30       	cpi	r16, 0x04	; 4
    6890:	71 f4       	brne	.+28     	; 0x68ae <hal_requestTimerInterrupt+0x108>
    6892:	04 80       	ldd	r0, Z+4	; 0x04
    6894:	f5 81       	ldd	r31, Z+5	; 0x05
    6896:	e0 2d       	mov	r30, r0
    6898:	30 97       	sbiw	r30, 0x00	; 0
    689a:	29 f4       	brne	.+10     	; 0x68a6 <hal_requestTimerInterrupt+0x100>
    689c:	d7 01       	movw	r26, r14
    689e:	16 96       	adiw	r26, 0x06	; 6
    68a0:	ed 91       	ld	r30, X+
    68a2:	fc 91       	ld	r31, X
    68a4:	17 97       	sbiw	r26, 0x07	; 7
    68a6:	86 81       	ldd	r24, Z+6	; 0x06
    68a8:	83 60       	ori	r24, 0x03	; 3
    68aa:	86 83       	std	Z+6, r24	; 0x06
    68ac:	41 c0       	rjmp	.+130    	; 0x6930 <hal_requestTimerInterrupt+0x18a>
    68ae:	00 23       	and	r16, r16
    68b0:	69 f4       	brne	.+26     	; 0x68cc <hal_requestTimerInterrupt+0x126>
    68b2:	04 80       	ldd	r0, Z+4	; 0x04
    68b4:	f5 81       	ldd	r31, Z+5	; 0x05
    68b6:	e0 2d       	mov	r30, r0
    68b8:	30 97       	sbiw	r30, 0x00	; 0
    68ba:	29 f4       	brne	.+10     	; 0x68c6 <hal_requestTimerInterrupt+0x120>
    68bc:	d7 01       	movw	r26, r14
    68be:	16 96       	adiw	r26, 0x06	; 6
    68c0:	ed 91       	ld	r30, X+
    68c2:	fc 91       	ld	r31, X
    68c4:	17 97       	sbiw	r26, 0x07	; 7
    68c6:	87 81       	ldd	r24, Z+7	; 0x07
    68c8:	83 60       	ori	r24, 0x03	; 3
    68ca:	0e c0       	rjmp	.+28     	; 0x68e8 <hal_requestTimerInterrupt+0x142>
    68cc:	01 30       	cpi	r16, 0x01	; 1
    68ce:	71 f4       	brne	.+28     	; 0x68ec <hal_requestTimerInterrupt+0x146>
    68d0:	04 80       	ldd	r0, Z+4	; 0x04
    68d2:	f5 81       	ldd	r31, Z+5	; 0x05
    68d4:	e0 2d       	mov	r30, r0
    68d6:	30 97       	sbiw	r30, 0x00	; 0
    68d8:	29 f4       	brne	.+10     	; 0x68e4 <hal_requestTimerInterrupt+0x13e>
    68da:	d7 01       	movw	r26, r14
    68dc:	16 96       	adiw	r26, 0x06	; 6
    68de:	ed 91       	ld	r30, X+
    68e0:	fc 91       	ld	r31, X
    68e2:	17 97       	sbiw	r26, 0x07	; 7
    68e4:	87 81       	ldd	r24, Z+7	; 0x07
    68e6:	8c 60       	ori	r24, 0x0C	; 12
    68e8:	87 83       	std	Z+7, r24	; 0x07
    68ea:	22 c0       	rjmp	.+68     	; 0x6930 <hal_requestTimerInterrupt+0x18a>
    68ec:	02 30       	cpi	r16, 0x02	; 2
    68ee:	69 f4       	brne	.+26     	; 0x690a <hal_requestTimerInterrupt+0x164>
    68f0:	04 80       	ldd	r0, Z+4	; 0x04
    68f2:	f5 81       	ldd	r31, Z+5	; 0x05
    68f4:	e0 2d       	mov	r30, r0
    68f6:	30 97       	sbiw	r30, 0x00	; 0
    68f8:	29 f4       	brne	.+10     	; 0x6904 <hal_requestTimerInterrupt+0x15e>
    68fa:	d7 01       	movw	r26, r14
    68fc:	16 96       	adiw	r26, 0x06	; 6
    68fe:	ed 91       	ld	r30, X+
    6900:	fc 91       	ld	r31, X
    6902:	17 97       	sbiw	r26, 0x07	; 7
    6904:	87 81       	ldd	r24, Z+7	; 0x07
    6906:	80 63       	ori	r24, 0x30	; 48
    6908:	ef cf       	rjmp	.-34     	; 0x68e8 <hal_requestTimerInterrupt+0x142>
    690a:	03 30       	cpi	r16, 0x03	; 3
    690c:	89 f4       	brne	.+34     	; 0x6930 <hal_requestTimerInterrupt+0x18a>
    690e:	04 80       	ldd	r0, Z+4	; 0x04
    6910:	f5 81       	ldd	r31, Z+5	; 0x05
    6912:	e0 2d       	mov	r30, r0
    6914:	30 97       	sbiw	r30, 0x00	; 0
    6916:	29 f4       	brne	.+10     	; 0x6922 <hal_requestTimerInterrupt+0x17c>
    6918:	d7 01       	movw	r26, r14
    691a:	16 96       	adiw	r26, 0x06	; 6
    691c:	ed 91       	ld	r30, X+
    691e:	fc 91       	ld	r31, X
    6920:	17 97       	sbiw	r26, 0x07	; 7
    6922:	87 81       	ldd	r24, Z+7	; 0x07
    6924:	80 6c       	ori	r24, 0xC0	; 192
    6926:	e0 cf       	rjmp	.-64     	; 0x68e8 <hal_requestTimerInterrupt+0x142>
    6928:	89 81       	ldd	r24, Y+1	; 0x01
    692a:	8f bf       	out	0x3f, r24	; 63
    692c:	89 ef       	ldi	r24, 0xF9	; 249
    692e:	03 c0       	rjmp	.+6      	; 0x6936 <hal_requestTimerInterrupt+0x190>
    6930:	89 81       	ldd	r24, Y+1	; 0x01
    6932:	8f bf       	out	0x3f, r24	; 63
    6934:	80 e0       	ldi	r24, 0x00	; 0
    6936:	27 96       	adiw	r28, 0x07	; 7
    6938:	cd bf       	out	0x3d, r28	; 61
    693a:	de bf       	out	0x3e, r29	; 62
    693c:	df 91       	pop	r29
    693e:	cf 91       	pop	r28
    6940:	1f 91       	pop	r17
    6942:	0f 91       	pop	r16
    6944:	ff 90       	pop	r15
    6946:	ef 90       	pop	r14
    6948:	df 90       	pop	r13
    694a:	cf 90       	pop	r12
    694c:	08 95       	ret

0000694e <hal_releaseTimerInterrupt>:
    694e:	cf 93       	push	r28
    6950:	df 93       	push	r29
    6952:	00 d0       	rcall	.+0      	; 0x6954 <hal_releaseTimerInterrupt+0x6>
    6954:	cd b7       	in	r28, 0x3d	; 61
    6956:	de b7       	in	r29, 0x3e	; 62
    6958:	8a 83       	std	Y+2, r24	; 0x02
    695a:	9b 83       	std	Y+3, r25	; 0x03
    695c:	8f b7       	in	r24, 0x3f	; 63
    695e:	89 83       	std	Y+1, r24	; 0x01
    6960:	f8 94       	cli
    6962:	ea 81       	ldd	r30, Y+2	; 0x02
    6964:	fb 81       	ldd	r31, Y+3	; 0x03
    6966:	80 91 87 23 	lds	r24, 0x2387
    696a:	90 91 88 23 	lds	r25, 0x2388
    696e:	24 81       	ldd	r18, Z+4	; 0x04
    6970:	35 81       	ldd	r19, Z+5	; 0x05
    6972:	28 17       	cp	r18, r24
    6974:	39 07       	cpc	r19, r25
    6976:	21 f0       	breq	.+8      	; 0x6980 <hal_releaseTimerInterrupt+0x32>
    6978:	89 81       	ldd	r24, Y+1	; 0x01
    697a:	8f bf       	out	0x3f, r24	; 63
    697c:	8b ef       	ldi	r24, 0xFB	; 251
    697e:	b7 c0       	rjmp	.+366    	; 0x6aee <hal_releaseTimerInterrupt+0x1a0>
    6980:	ea 81       	ldd	r30, Y+2	; 0x02
    6982:	fb 81       	ldd	r31, Y+3	; 0x03
    6984:	01 90       	ld	r0, Z+
    6986:	f0 81       	ld	r31, Z
    6988:	e0 2d       	mov	r30, r0
    698a:	80 81       	ld	r24, Z
    698c:	86 0f       	add	r24, r22
    698e:	98 2f       	mov	r25, r24
    6990:	97 50       	subi	r25, 0x07	; 7
    6992:	92 30       	cpi	r25, 0x02	; 2
    6994:	70 f0       	brcs	.+28     	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    6996:	81 31       	cpi	r24, 0x11	; 17
    6998:	61 f0       	breq	.+24     	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    699a:	82 31       	cpi	r24, 0x12	; 18
    699c:	51 f0       	breq	.+20     	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    699e:	8b 31       	cpi	r24, 0x1B	; 27
    69a0:	41 f0       	breq	.+16     	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    69a2:	8c 31       	cpi	r24, 0x1C	; 28
    69a4:	31 f0       	breq	.+12     	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    69a6:	85 32       	cpi	r24, 0x25	; 37
    69a8:	21 f0       	breq	.+8      	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    69aa:	86 32       	cpi	r24, 0x26	; 38
    69ac:	11 f0       	breq	.+4      	; 0x69b2 <hal_releaseTimerInterrupt+0x64>
    69ae:	88 32       	cpi	r24, 0x28	; 40
    69b0:	20 f0       	brcs	.+8      	; 0x69ba <hal_releaseTimerInterrupt+0x6c>
    69b2:	89 81       	ldd	r24, Y+1	; 0x01
    69b4:	8f bf       	out	0x3f, r24	; 63
    69b6:	8a ef       	ldi	r24, 0xFA	; 250
    69b8:	9a c0       	rjmp	.+308    	; 0x6aee <hal_releaseTimerInterrupt+0x1a0>
    69ba:	a0 91 79 23 	lds	r26, 0x2379
    69be:	b0 91 7a 23 	lds	r27, 0x237A
    69c2:	12 96       	adiw	r26, 0x02	; 2
    69c4:	4d 91       	ld	r20, X+
    69c6:	5c 91       	ld	r21, X
    69c8:	13 97       	sbiw	r26, 0x03	; 3
    69ca:	a0 91 79 23 	lds	r26, 0x2379
    69ce:	b0 91 7a 23 	lds	r27, 0x237A
    69d2:	7e c0       	rjmp	.+252    	; 0x6ad0 <hal_releaseTimerInterrupt+0x182>
    69d4:	a0 91 25 2c 	lds	r26, 0x2C25
    69d8:	b0 91 26 2c 	lds	r27, 0x2C26
    69dc:	0d 90       	ld	r0, X+
    69de:	bc 91       	ld	r27, X
    69e0:	a0 2d       	mov	r26, r0
    69e2:	9c 91       	ld	r25, X
    69e4:	98 17       	cp	r25, r24
    69e6:	09 f0       	breq	.+2      	; 0x69ea <hal_releaseTimerInterrupt+0x9c>
    69e8:	6d c0       	rjmp	.+218    	; 0x6ac4 <hal_releaseTimerInterrupt+0x176>
    69ea:	82 81       	ldd	r24, Z+2	; 0x02
    69ec:	81 50       	subi	r24, 0x01	; 1
    69ee:	82 83       	std	Z+2, r24	; 0x02
    69f0:	64 30       	cpi	r22, 0x04	; 4
    69f2:	99 f4       	brne	.+38     	; 0x6a1a <hal_releaseTimerInterrupt+0xcc>
    69f4:	a4 81       	ldd	r26, Z+4	; 0x04
    69f6:	b5 81       	ldd	r27, Z+5	; 0x05
    69f8:	10 97       	sbiw	r26, 0x00	; 0
    69fa:	41 f0       	breq	.+16     	; 0x6a0c <hal_releaseTimerInterrupt+0xbe>
    69fc:	16 96       	adiw	r26, 0x06	; 6
    69fe:	8c 91       	ld	r24, X
    6a00:	16 97       	sbiw	r26, 0x06	; 6
    6a02:	8c 7f       	andi	r24, 0xFC	; 252
    6a04:	16 96       	adiw	r26, 0x06	; 6
    6a06:	8c 93       	st	X, r24
    6a08:	16 97       	sbiw	r26, 0x06	; 6
    6a0a:	4e c0       	rjmp	.+156    	; 0x6aa8 <hal_releaseTimerInterrupt+0x15a>
    6a0c:	06 80       	ldd	r0, Z+6	; 0x06
    6a0e:	f7 81       	ldd	r31, Z+7	; 0x07
    6a10:	e0 2d       	mov	r30, r0
    6a12:	86 81       	ldd	r24, Z+6	; 0x06
    6a14:	8c 7f       	andi	r24, 0xFC	; 252
    6a16:	86 83       	std	Z+6, r24	; 0x06
    6a18:	47 c0       	rjmp	.+142    	; 0x6aa8 <hal_releaseTimerInterrupt+0x15a>
    6a1a:	66 23       	and	r22, r22
    6a1c:	79 f4       	brne	.+30     	; 0x6a3c <hal_releaseTimerInterrupt+0xee>
    6a1e:	a4 81       	ldd	r26, Z+4	; 0x04
    6a20:	b5 81       	ldd	r27, Z+5	; 0x05
    6a22:	10 97       	sbiw	r26, 0x00	; 0
    6a24:	29 f0       	breq	.+10     	; 0x6a30 <hal_releaseTimerInterrupt+0xe2>
    6a26:	17 96       	adiw	r26, 0x07	; 7
    6a28:	8c 91       	ld	r24, X
    6a2a:	17 97       	sbiw	r26, 0x07	; 7
    6a2c:	8c 7f       	andi	r24, 0xFC	; 252
    6a2e:	10 c0       	rjmp	.+32     	; 0x6a50 <hal_releaseTimerInterrupt+0x102>
    6a30:	06 80       	ldd	r0, Z+6	; 0x06
    6a32:	f7 81       	ldd	r31, Z+7	; 0x07
    6a34:	e0 2d       	mov	r30, r0
    6a36:	87 81       	ldd	r24, Z+7	; 0x07
    6a38:	8c 7f       	andi	r24, 0xFC	; 252
    6a3a:	35 c0       	rjmp	.+106    	; 0x6aa6 <hal_releaseTimerInterrupt+0x158>
    6a3c:	61 30       	cpi	r22, 0x01	; 1
    6a3e:	91 f4       	brne	.+36     	; 0x6a64 <hal_releaseTimerInterrupt+0x116>
    6a40:	a4 81       	ldd	r26, Z+4	; 0x04
    6a42:	b5 81       	ldd	r27, Z+5	; 0x05
    6a44:	10 97       	sbiw	r26, 0x00	; 0
    6a46:	41 f0       	breq	.+16     	; 0x6a58 <hal_releaseTimerInterrupt+0x10a>
    6a48:	17 96       	adiw	r26, 0x07	; 7
    6a4a:	8c 91       	ld	r24, X
    6a4c:	17 97       	sbiw	r26, 0x07	; 7
    6a4e:	83 7f       	andi	r24, 0xF3	; 243
    6a50:	17 96       	adiw	r26, 0x07	; 7
    6a52:	8c 93       	st	X, r24
    6a54:	17 97       	sbiw	r26, 0x07	; 7
    6a56:	28 c0       	rjmp	.+80     	; 0x6aa8 <hal_releaseTimerInterrupt+0x15a>
    6a58:	06 80       	ldd	r0, Z+6	; 0x06
    6a5a:	f7 81       	ldd	r31, Z+7	; 0x07
    6a5c:	e0 2d       	mov	r30, r0
    6a5e:	87 81       	ldd	r24, Z+7	; 0x07
    6a60:	83 7f       	andi	r24, 0xF3	; 243
    6a62:	21 c0       	rjmp	.+66     	; 0x6aa6 <hal_releaseTimerInterrupt+0x158>
    6a64:	62 30       	cpi	r22, 0x02	; 2
    6a66:	79 f4       	brne	.+30     	; 0x6a86 <hal_releaseTimerInterrupt+0x138>
    6a68:	a4 81       	ldd	r26, Z+4	; 0x04
    6a6a:	b5 81       	ldd	r27, Z+5	; 0x05
    6a6c:	10 97       	sbiw	r26, 0x00	; 0
    6a6e:	29 f0       	breq	.+10     	; 0x6a7a <hal_releaseTimerInterrupt+0x12c>
    6a70:	17 96       	adiw	r26, 0x07	; 7
    6a72:	8c 91       	ld	r24, X
    6a74:	17 97       	sbiw	r26, 0x07	; 7
    6a76:	8f 7c       	andi	r24, 0xCF	; 207
    6a78:	eb cf       	rjmp	.-42     	; 0x6a50 <hal_releaseTimerInterrupt+0x102>
    6a7a:	06 80       	ldd	r0, Z+6	; 0x06
    6a7c:	f7 81       	ldd	r31, Z+7	; 0x07
    6a7e:	e0 2d       	mov	r30, r0
    6a80:	87 81       	ldd	r24, Z+7	; 0x07
    6a82:	8f 7c       	andi	r24, 0xCF	; 207
    6a84:	10 c0       	rjmp	.+32     	; 0x6aa6 <hal_releaseTimerInterrupt+0x158>
    6a86:	63 30       	cpi	r22, 0x03	; 3
    6a88:	79 f4       	brne	.+30     	; 0x6aa8 <hal_releaseTimerInterrupt+0x15a>
    6a8a:	a4 81       	ldd	r26, Z+4	; 0x04
    6a8c:	b5 81       	ldd	r27, Z+5	; 0x05
    6a8e:	10 97       	sbiw	r26, 0x00	; 0
    6a90:	29 f0       	breq	.+10     	; 0x6a9c <hal_releaseTimerInterrupt+0x14e>
    6a92:	17 96       	adiw	r26, 0x07	; 7
    6a94:	8c 91       	ld	r24, X
    6a96:	17 97       	sbiw	r26, 0x07	; 7
    6a98:	8f 73       	andi	r24, 0x3F	; 63
    6a9a:	da cf       	rjmp	.-76     	; 0x6a50 <hal_releaseTimerInterrupt+0x102>
    6a9c:	06 80       	ldd	r0, Z+6	; 0x06
    6a9e:	f7 81       	ldd	r31, Z+7	; 0x07
    6aa0:	e0 2d       	mov	r30, r0
    6aa2:	87 81       	ldd	r24, Z+7	; 0x07
    6aa4:	8f 73       	andi	r24, 0x3F	; 63
    6aa6:	87 83       	std	Z+7, r24	; 0x07
    6aa8:	80 91 79 23 	lds	r24, 0x2379
    6aac:	90 91 7a 23 	lds	r25, 0x237A
    6ab0:	60 91 25 2c 	lds	r22, 0x2C25
    6ab4:	70 91 26 2c 	lds	r23, 0x2C26
    6ab8:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    6abc:	89 81       	ldd	r24, Y+1	; 0x01
    6abe:	8f bf       	out	0x3f, r24	; 63
    6ac0:	80 e0       	ldi	r24, 0x00	; 0
    6ac2:	15 c0       	rjmp	.+42     	; 0x6aee <hal_releaseTimerInterrupt+0x1a0>
    6ac4:	41 50       	subi	r20, 0x01	; 1
    6ac6:	50 40       	sbci	r21, 0x00	; 0
    6ac8:	a0 91 25 2c 	lds	r26, 0x2C25
    6acc:	b0 91 26 2c 	lds	r27, 0x2C26
    6ad0:	18 96       	adiw	r26, 0x08	; 8
    6ad2:	2d 91       	ld	r18, X+
    6ad4:	3c 91       	ld	r19, X
    6ad6:	19 97       	sbiw	r26, 0x09	; 9
    6ad8:	20 93 25 2c 	sts	0x2C25, r18
    6adc:	30 93 26 2c 	sts	0x2C26, r19
    6ae0:	14 16       	cp	r1, r20
    6ae2:	15 06       	cpc	r1, r21
    6ae4:	0c f4       	brge	.+2      	; 0x6ae8 <hal_releaseTimerInterrupt+0x19a>
    6ae6:	76 cf       	rjmp	.-276    	; 0x69d4 <hal_releaseTimerInterrupt+0x86>
    6ae8:	89 81       	ldd	r24, Y+1	; 0x01
    6aea:	8f bf       	out	0x3f, r24	; 63
    6aec:	88 ef       	ldi	r24, 0xF8	; 248
    6aee:	23 96       	adiw	r28, 0x03	; 3
    6af0:	cd bf       	out	0x3d, r28	; 61
    6af2:	de bf       	out	0x3e, r29	; 62
    6af4:	df 91       	pop	r29
    6af6:	cf 91       	pop	r28
    6af8:	08 95       	ret

00006afa <hal_requestTimer>:
    6afa:	1f 93       	push	r17
    6afc:	cf 93       	push	r28
    6afe:	df 93       	push	r29
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
    6b04:	25 97       	sbiw	r28, 0x05	; 5
    6b06:	cd bf       	out	0x3d, r28	; 61
    6b08:	de bf       	out	0x3e, r29	; 62
    6b0a:	18 2f       	mov	r17, r24
    6b0c:	8f b7       	in	r24, 0x3f	; 63
    6b0e:	89 83       	std	Y+1, r24	; 0x01
    6b10:	f8 94       	cli
    6b12:	14 32       	cpi	r17, 0x24	; 36
    6b14:	28 f0       	brcs	.+10     	; 0x6b20 <hal_requestTimer+0x26>
    6b16:	89 81       	ldd	r24, Y+1	; 0x01
    6b18:	8f bf       	out	0x3f, r24	; 63
    6b1a:	8c ef       	ldi	r24, 0xFC	; 252
    6b1c:	9f ef       	ldi	r25, 0xFF	; 255
    6b1e:	93 c0       	rjmp	.+294    	; 0x6c46 <hal_requestTimer+0x14c>
    6b20:	e0 91 87 23 	lds	r30, 0x2387
    6b24:	f0 91 88 23 	lds	r31, 0x2388
    6b28:	82 81       	ldd	r24, Z+2	; 0x02
    6b2a:	93 81       	ldd	r25, Z+3	; 0x03
    6b2c:	e0 91 87 23 	lds	r30, 0x2387
    6b30:	f0 91 88 23 	lds	r31, 0x2388
    6b34:	0b c0       	rjmp	.+22     	; 0x6b4c <hal_requestTimer+0x52>
    6b36:	ea 81       	ldd	r30, Y+2	; 0x02
    6b38:	fb 81       	ldd	r31, Y+3	; 0x03
    6b3a:	01 90       	ld	r0, Z+
    6b3c:	f0 81       	ld	r31, Z
    6b3e:	e0 2d       	mov	r30, r0
    6b40:	20 81       	ld	r18, Z
    6b42:	21 17       	cp	r18, r17
    6b44:	59 f0       	breq	.+22     	; 0x6b5c <hal_requestTimer+0x62>
    6b46:	01 97       	sbiw	r24, 0x01	; 1
    6b48:	ea 81       	ldd	r30, Y+2	; 0x02
    6b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    6b4c:	20 85       	ldd	r18, Z+8	; 0x08
    6b4e:	31 85       	ldd	r19, Z+9	; 0x09
    6b50:	2a 83       	std	Y+2, r18	; 0x02
    6b52:	3b 83       	std	Y+3, r19	; 0x03
    6b54:	18 16       	cp	r1, r24
    6b56:	19 06       	cpc	r1, r25
    6b58:	74 f3       	brlt	.-36     	; 0x6b36 <hal_requestTimer+0x3c>
    6b5a:	03 c0       	rjmp	.+6      	; 0x6b62 <hal_requestTimer+0x68>
    6b5c:	30 97       	sbiw	r30, 0x00	; 0
    6b5e:	09 f0       	breq	.+2      	; 0x6b62 <hal_requestTimer+0x68>
    6b60:	69 c0       	rjmp	.+210    	; 0x6c34 <hal_requestTimer+0x13a>
    6b62:	88 e0       	ldi	r24, 0x08	; 8
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    6b6a:	8a 83       	std	Y+2, r24	; 0x02
    6b6c:	9b 83       	std	Y+3, r25	; 0x03
    6b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b70:	9b 81       	ldd	r25, Y+3	; 0x03
    6b72:	97 fd       	sbrc	r25, 7
    6b74:	0c c0       	rjmp	.+24     	; 0x6b8e <hal_requestTimer+0x94>
    6b76:	80 91 87 23 	lds	r24, 0x2387
    6b7a:	90 91 88 23 	lds	r25, 0x2388
    6b7e:	6a 81       	ldd	r22, Y+2	; 0x02
    6b80:	7b 81       	ldd	r23, Y+3	; 0x03
    6b82:	41 e0       	ldi	r20, 0x01	; 1
    6b84:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    6b88:	8a 81       	ldd	r24, Y+2	; 0x02
    6b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    6b8c:	02 c0       	rjmp	.+4      	; 0x6b92 <hal_requestTimer+0x98>
    6b8e:	8f ef       	ldi	r24, 0xFF	; 255
    6b90:	9f ef       	ldi	r25, 0xFF	; 255
    6b92:	8c 83       	std	Y+4, r24	; 0x04
    6b94:	9d 83       	std	Y+5, r25	; 0x05
    6b96:	8c 81       	ldd	r24, Y+4	; 0x04
    6b98:	9d 81       	ldd	r25, Y+5	; 0x05
    6b9a:	97 ff       	sbrs	r25, 7
    6b9c:	05 c0       	rjmp	.+10     	; 0x6ba8 <hal_requestTimer+0xae>
    6b9e:	89 81       	ldd	r24, Y+1	; 0x01
    6ba0:	8f bf       	out	0x3f, r24	; 63
    6ba2:	8f ef       	ldi	r24, 0xFF	; 255
    6ba4:	9f ef       	ldi	r25, 0xFF	; 255
    6ba6:	4f c0       	rjmp	.+158    	; 0x6c46 <hal_requestTimer+0x14c>
    6ba8:	ec 81       	ldd	r30, Y+4	; 0x04
    6baa:	fd 81       	ldd	r31, Y+5	; 0x05
    6bac:	01 90       	ld	r0, Z+
    6bae:	f0 81       	ld	r31, Z
    6bb0:	e0 2d       	mov	r30, r0
    6bb2:	11 82       	std	Z+1, r1	; 0x01
    6bb4:	10 83       	st	Z, r17
    6bb6:	13 82       	std	Z+3, r1	; 0x03
    6bb8:	12 82       	std	Z+2, r1	; 0x02
    6bba:	1f 30       	cpi	r17, 0x0F	; 15
    6bbc:	01 f1       	breq	.+64     	; 0x6bfe <hal_requestTimer+0x104>
    6bbe:	10 31       	cpi	r17, 0x10	; 16
    6bc0:	38 f4       	brcc	.+14     	; 0x6bd0 <hal_requestTimer+0xd6>
    6bc2:	15 30       	cpi	r17, 0x05	; 5
    6bc4:	a1 f0       	breq	.+40     	; 0x6bee <hal_requestTimer+0xf4>
    6bc6:	1a 30       	cpi	r17, 0x0A	; 10
    6bc8:	b9 f0       	breq	.+46     	; 0x6bf8 <hal_requestTimer+0xfe>
    6bca:	11 23       	and	r17, r17
    6bcc:	69 f0       	breq	.+26     	; 0x6be8 <hal_requestTimer+0xee>
    6bce:	37 c0       	rjmp	.+110    	; 0x6c3e <hal_requestTimer+0x144>
    6bd0:	19 31       	cpi	r17, 0x19	; 25
    6bd2:	e9 f0       	breq	.+58     	; 0x6c0e <hal_requestTimer+0x114>
    6bd4:	1a 31       	cpi	r17, 0x1A	; 26
    6bd6:	18 f4       	brcc	.+6      	; 0x6bde <hal_requestTimer+0xe4>
    6bd8:	14 31       	cpi	r17, 0x14	; 20
    6bda:	89 f5       	brne	.+98     	; 0x6c3e <hal_requestTimer+0x144>
    6bdc:	15 c0       	rjmp	.+42     	; 0x6c08 <hal_requestTimer+0x10e>
    6bde:	1e 31       	cpi	r17, 0x1E	; 30
    6be0:	d9 f0       	breq	.+54     	; 0x6c18 <hal_requestTimer+0x11e>
    6be2:	13 32       	cpi	r17, 0x23	; 35
    6be4:	61 f5       	brne	.+88     	; 0x6c3e <hal_requestTimer+0x144>
    6be6:	1f c0       	rjmp	.+62     	; 0x6c26 <hal_requestTimer+0x12c>
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	98 e0       	ldi	r25, 0x08	; 8
    6bec:	17 c0       	rjmp	.+46     	; 0x6c1c <hal_requestTimer+0x122>
    6bee:	14 82       	std	Z+4, r1	; 0x04
    6bf0:	15 82       	std	Z+5, r1	; 0x05
    6bf2:	80 e4       	ldi	r24, 0x40	; 64
    6bf4:	98 e0       	ldi	r25, 0x08	; 8
    6bf6:	1b c0       	rjmp	.+54     	; 0x6c2e <hal_requestTimer+0x134>
    6bf8:	80 e0       	ldi	r24, 0x00	; 0
    6bfa:	99 e0       	ldi	r25, 0x09	; 9
    6bfc:	0f c0       	rjmp	.+30     	; 0x6c1c <hal_requestTimer+0x122>
    6bfe:	14 82       	std	Z+4, r1	; 0x04
    6c00:	15 82       	std	Z+5, r1	; 0x05
    6c02:	80 e4       	ldi	r24, 0x40	; 64
    6c04:	99 e0       	ldi	r25, 0x09	; 9
    6c06:	13 c0       	rjmp	.+38     	; 0x6c2e <hal_requestTimer+0x134>
    6c08:	80 e0       	ldi	r24, 0x00	; 0
    6c0a:	9a e0       	ldi	r25, 0x0A	; 10
    6c0c:	07 c0       	rjmp	.+14     	; 0x6c1c <hal_requestTimer+0x122>
    6c0e:	14 82       	std	Z+4, r1	; 0x04
    6c10:	15 82       	std	Z+5, r1	; 0x05
    6c12:	80 e4       	ldi	r24, 0x40	; 64
    6c14:	9a e0       	ldi	r25, 0x0A	; 10
    6c16:	0b c0       	rjmp	.+22     	; 0x6c2e <hal_requestTimer+0x134>
    6c18:	80 e0       	ldi	r24, 0x00	; 0
    6c1a:	9b e0       	ldi	r25, 0x0B	; 11
    6c1c:	84 83       	std	Z+4, r24	; 0x04
    6c1e:	95 83       	std	Z+5, r25	; 0x05
    6c20:	16 82       	std	Z+6, r1	; 0x06
    6c22:	17 82       	std	Z+7, r1	; 0x07
    6c24:	0c c0       	rjmp	.+24     	; 0x6c3e <hal_requestTimer+0x144>
    6c26:	14 82       	std	Z+4, r1	; 0x04
    6c28:	15 82       	std	Z+5, r1	; 0x05
    6c2a:	80 e4       	ldi	r24, 0x40	; 64
    6c2c:	9b e0       	ldi	r25, 0x0B	; 11
    6c2e:	86 83       	std	Z+6, r24	; 0x06
    6c30:	97 83       	std	Z+7, r25	; 0x07
    6c32:	05 c0       	rjmp	.+10     	; 0x6c3e <hal_requestTimer+0x144>
    6c34:	89 81       	ldd	r24, Y+1	; 0x01
    6c36:	8f bf       	out	0x3f, r24	; 63
    6c38:	87 ef       	ldi	r24, 0xF7	; 247
    6c3a:	9f ef       	ldi	r25, 0xFF	; 255
    6c3c:	04 c0       	rjmp	.+8      	; 0x6c46 <hal_requestTimer+0x14c>
    6c3e:	89 81       	ldd	r24, Y+1	; 0x01
    6c40:	8f bf       	out	0x3f, r24	; 63
    6c42:	8c 81       	ldd	r24, Y+4	; 0x04
    6c44:	9d 81       	ldd	r25, Y+5	; 0x05
    6c46:	25 96       	adiw	r28, 0x05	; 5
    6c48:	cd bf       	out	0x3d, r28	; 61
    6c4a:	de bf       	out	0x3e, r29	; 62
    6c4c:	df 91       	pop	r29
    6c4e:	cf 91       	pop	r28
    6c50:	1f 91       	pop	r17
    6c52:	08 95       	ret

00006c54 <hal_releaseTimer>:
    6c54:	af 92       	push	r10
    6c56:	bf 92       	push	r11
    6c58:	cf 92       	push	r12
    6c5a:	df 92       	push	r13
    6c5c:	ff 92       	push	r15
    6c5e:	0f 93       	push	r16
    6c60:	1f 93       	push	r17
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	00 d0       	rcall	.+0      	; 0x6c68 <hal_releaseTimer+0x14>
    6c68:	0f 92       	push	r0
    6c6a:	cd b7       	in	r28, 0x3d	; 61
    6c6c:	de b7       	in	r29, 0x3e	; 62
    6c6e:	8a 83       	std	Y+2, r24	; 0x02
    6c70:	9b 83       	std	Y+3, r25	; 0x03
    6c72:	8f b7       	in	r24, 0x3f	; 63
    6c74:	89 83       	std	Y+1, r24	; 0x01
    6c76:	f8 94       	cli
    6c78:	ea 81       	ldd	r30, Y+2	; 0x02
    6c7a:	fb 81       	ldd	r31, Y+3	; 0x03
    6c7c:	80 91 87 23 	lds	r24, 0x2387
    6c80:	90 91 88 23 	lds	r25, 0x2388
    6c84:	24 81       	ldd	r18, Z+4	; 0x04
    6c86:	35 81       	ldd	r19, Z+5	; 0x05
    6c88:	28 17       	cp	r18, r24
    6c8a:	39 07       	cpc	r19, r25
    6c8c:	21 f0       	breq	.+8      	; 0x6c96 <hal_releaseTimer+0x42>
    6c8e:	89 81       	ldd	r24, Y+1	; 0x01
    6c90:	8f bf       	out	0x3f, r24	; 63
    6c92:	8b ef       	ldi	r24, 0xFB	; 251
    6c94:	ce c0       	rjmp	.+412    	; 0x6e32 <hal_releaseTimer+0x1de>
    6c96:	ea 81       	ldd	r30, Y+2	; 0x02
    6c98:	fb 81       	ldd	r31, Y+3	; 0x03
    6c9a:	00 81       	ld	r16, Z
    6c9c:	11 81       	ldd	r17, Z+1	; 0x01
    6c9e:	85 e0       	ldi	r24, 0x05	; 5
    6ca0:	a8 2e       	mov	r10, r24
    6ca2:	b1 2c       	mov	r11, r1
    6ca4:	20 e0       	ldi	r18, 0x00	; 0
    6ca6:	d8 01       	movw	r26, r16
    6ca8:	fc 90       	ld	r15, X
    6caa:	f2 0e       	add	r15, r18
    6cac:	e0 91 79 23 	lds	r30, 0x2379
    6cb0:	f0 91 7a 23 	lds	r31, 0x237A
    6cb4:	c2 80       	ldd	r12, Z+2	; 0x02
    6cb6:	d3 80       	ldd	r13, Z+3	; 0x03
    6cb8:	e0 91 79 23 	lds	r30, 0x2379
    6cbc:	f0 91 7a 23 	lds	r31, 0x237A
    6cc0:	71 c0       	rjmp	.+226    	; 0x6da4 <hal_releaseTimer+0x150>
    6cc2:	e0 91 29 2c 	lds	r30, 0x2C29
    6cc6:	f0 91 2a 2c 	lds	r31, 0x2C2A
    6cca:	a0 81       	ld	r26, Z
    6ccc:	b1 81       	ldd	r27, Z+1	; 0x01
    6cce:	e0 91 29 2c 	lds	r30, 0x2C29
    6cd2:	f0 91 2a 2c 	lds	r31, 0x2C2A
    6cd6:	82 85       	ldd	r24, Z+10	; 0x0a
    6cd8:	93 85       	ldd	r25, Z+11	; 0x0b
    6cda:	80 93 27 2c 	sts	0x2C27, r24
    6cde:	90 93 28 2c 	sts	0x2C28, r25
    6ce2:	8c 91       	ld	r24, X
    6ce4:	8f 15       	cp	r24, r15
    6ce6:	09 f0       	breq	.+2      	; 0x6cea <hal_releaseTimer+0x96>
    6ce8:	56 c0       	rjmp	.+172    	; 0x6d96 <hal_releaseTimer+0x142>
    6cea:	f8 01       	movw	r30, r16
    6cec:	82 81       	ldd	r24, Z+2	; 0x02
    6cee:	81 50       	subi	r24, 0x01	; 1
    6cf0:	82 83       	std	Z+2, r24	; 0x02
    6cf2:	04 80       	ldd	r0, Z+4	; 0x04
    6cf4:	f5 81       	ldd	r31, Z+5	; 0x05
    6cf6:	e0 2d       	mov	r30, r0
    6cf8:	24 30       	cpi	r18, 0x04	; 4
    6cfa:	59 f4       	brne	.+22     	; 0x6d12 <hal_releaseTimer+0xbe>
    6cfc:	30 97       	sbiw	r30, 0x00	; 0
    6cfe:	29 f4       	brne	.+10     	; 0x6d0a <hal_releaseTimer+0xb6>
    6d00:	d8 01       	movw	r26, r16
    6d02:	16 96       	adiw	r26, 0x06	; 6
    6d04:	ed 91       	ld	r30, X+
    6d06:	fc 91       	ld	r31, X
    6d08:	17 97       	sbiw	r26, 0x07	; 7
    6d0a:	86 81       	ldd	r24, Z+6	; 0x06
    6d0c:	8c 7f       	andi	r24, 0xFC	; 252
    6d0e:	86 83       	std	Z+6, r24	; 0x06
    6d10:	2e c0       	rjmp	.+92     	; 0x6d6e <hal_releaseTimer+0x11a>
    6d12:	22 23       	and	r18, r18
    6d14:	51 f4       	brne	.+20     	; 0x6d2a <hal_releaseTimer+0xd6>
    6d16:	30 97       	sbiw	r30, 0x00	; 0
    6d18:	29 f4       	brne	.+10     	; 0x6d24 <hal_releaseTimer+0xd0>
    6d1a:	d8 01       	movw	r26, r16
    6d1c:	16 96       	adiw	r26, 0x06	; 6
    6d1e:	ed 91       	ld	r30, X+
    6d20:	fc 91       	ld	r31, X
    6d22:	17 97       	sbiw	r26, 0x07	; 7
    6d24:	87 81       	ldd	r24, Z+7	; 0x07
    6d26:	8c 7f       	andi	r24, 0xFC	; 252
    6d28:	21 c0       	rjmp	.+66     	; 0x6d6c <hal_releaseTimer+0x118>
    6d2a:	21 30       	cpi	r18, 0x01	; 1
    6d2c:	51 f4       	brne	.+20     	; 0x6d42 <hal_releaseTimer+0xee>
    6d2e:	30 97       	sbiw	r30, 0x00	; 0
    6d30:	29 f4       	brne	.+10     	; 0x6d3c <hal_releaseTimer+0xe8>
    6d32:	d8 01       	movw	r26, r16
    6d34:	16 96       	adiw	r26, 0x06	; 6
    6d36:	ed 91       	ld	r30, X+
    6d38:	fc 91       	ld	r31, X
    6d3a:	17 97       	sbiw	r26, 0x07	; 7
    6d3c:	87 81       	ldd	r24, Z+7	; 0x07
    6d3e:	83 7f       	andi	r24, 0xF3	; 243
    6d40:	15 c0       	rjmp	.+42     	; 0x6d6c <hal_releaseTimer+0x118>
    6d42:	22 30       	cpi	r18, 0x02	; 2
    6d44:	51 f4       	brne	.+20     	; 0x6d5a <hal_releaseTimer+0x106>
    6d46:	30 97       	sbiw	r30, 0x00	; 0
    6d48:	29 f4       	brne	.+10     	; 0x6d54 <hal_releaseTimer+0x100>
    6d4a:	d8 01       	movw	r26, r16
    6d4c:	16 96       	adiw	r26, 0x06	; 6
    6d4e:	ed 91       	ld	r30, X+
    6d50:	fc 91       	ld	r31, X
    6d52:	17 97       	sbiw	r26, 0x07	; 7
    6d54:	87 81       	ldd	r24, Z+7	; 0x07
    6d56:	8f 7c       	andi	r24, 0xCF	; 207
    6d58:	09 c0       	rjmp	.+18     	; 0x6d6c <hal_releaseTimer+0x118>
    6d5a:	30 97       	sbiw	r30, 0x00	; 0
    6d5c:	29 f4       	brne	.+10     	; 0x6d68 <hal_releaseTimer+0x114>
    6d5e:	d8 01       	movw	r26, r16
    6d60:	16 96       	adiw	r26, 0x06	; 6
    6d62:	ed 91       	ld	r30, X+
    6d64:	fc 91       	ld	r31, X
    6d66:	17 97       	sbiw	r26, 0x07	; 7
    6d68:	87 81       	ldd	r24, Z+7	; 0x07
    6d6a:	8f 73       	andi	r24, 0x3F	; 63
    6d6c:	87 83       	std	Z+7, r24	; 0x07
    6d6e:	80 91 79 23 	lds	r24, 0x2379
    6d72:	90 91 7a 23 	lds	r25, 0x237A
    6d76:	60 91 29 2c 	lds	r22, 0x2C29
    6d7a:	70 91 2a 2c 	lds	r23, 0x2C2A
    6d7e:	2c 83       	std	Y+4, r18	; 0x04
    6d80:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    6d84:	80 91 27 2c 	lds	r24, 0x2C27
    6d88:	90 91 28 2c 	lds	r25, 0x2C28
    6d8c:	80 93 29 2c 	sts	0x2C29, r24
    6d90:	90 93 2a 2c 	sts	0x2C2A, r25
    6d94:	2c 81       	ldd	r18, Y+4	; 0x04
    6d96:	08 94       	sec
    6d98:	c1 08       	sbc	r12, r1
    6d9a:	d1 08       	sbc	r13, r1
    6d9c:	e0 91 29 2c 	lds	r30, 0x2C29
    6da0:	f0 91 2a 2c 	lds	r31, 0x2C2A
    6da4:	80 85       	ldd	r24, Z+8	; 0x08
    6da6:	91 85       	ldd	r25, Z+9	; 0x09
    6da8:	80 93 29 2c 	sts	0x2C29, r24
    6dac:	90 93 2a 2c 	sts	0x2C2A, r25
    6db0:	1c 14       	cp	r1, r12
    6db2:	1d 04       	cpc	r1, r13
    6db4:	0c f4       	brge	.+2      	; 0x6db8 <hal_releaseTimer+0x164>
    6db6:	85 cf       	rjmp	.-246    	; 0x6cc2 <hal_releaseTimer+0x6e>
    6db8:	2f 5f       	subi	r18, 0xFF	; 255
    6dba:	08 94       	sec
    6dbc:	a1 08       	sbc	r10, r1
    6dbe:	b1 08       	sbc	r11, r1
    6dc0:	a1 14       	cp	r10, r1
    6dc2:	b1 04       	cpc	r11, r1
    6dc4:	09 f0       	breq	.+2      	; 0x6dc8 <hal_releaseTimer+0x174>
    6dc6:	6f cf       	rjmp	.-290    	; 0x6ca6 <hal_releaseTimer+0x52>
    6dc8:	f8 01       	movw	r30, r16
    6dca:	12 82       	std	Z+2, r1	; 0x02
    6dcc:	04 80       	ldd	r0, Z+4	; 0x04
    6dce:	f5 81       	ldd	r31, Z+5	; 0x05
    6dd0:	e0 2d       	mov	r30, r0
    6dd2:	30 97       	sbiw	r30, 0x00	; 0
    6dd4:	79 f0       	breq	.+30     	; 0x6df4 <hal_releaseTimer+0x1a0>
    6dd6:	80 81       	ld	r24, Z
    6dd8:	80 7f       	andi	r24, 0xF0	; 240
    6dda:	80 83       	st	Z, r24
    6ddc:	d8 01       	movw	r26, r16
    6dde:	14 96       	adiw	r26, 0x04	; 4
    6de0:	ed 91       	ld	r30, X+
    6de2:	fc 91       	ld	r31, X
    6de4:	15 97       	sbiw	r26, 0x05	; 5
    6de6:	80 81       	ld	r24, Z
    6de8:	80 83       	st	Z, r24
    6dea:	14 96       	adiw	r26, 0x04	; 4
    6dec:	ed 91       	ld	r30, X+
    6dee:	fc 91       	ld	r31, X
    6df0:	15 97       	sbiw	r26, 0x05	; 5
    6df2:	12 c0       	rjmp	.+36     	; 0x6e18 <hal_releaseTimer+0x1c4>
    6df4:	d8 01       	movw	r26, r16
    6df6:	16 96       	adiw	r26, 0x06	; 6
    6df8:	ed 91       	ld	r30, X+
    6dfa:	fc 91       	ld	r31, X
    6dfc:	17 97       	sbiw	r26, 0x07	; 7
    6dfe:	80 81       	ld	r24, Z
    6e00:	80 7f       	andi	r24, 0xF0	; 240
    6e02:	80 83       	st	Z, r24
    6e04:	16 96       	adiw	r26, 0x06	; 6
    6e06:	ed 91       	ld	r30, X+
    6e08:	fc 91       	ld	r31, X
    6e0a:	17 97       	sbiw	r26, 0x07	; 7
    6e0c:	80 81       	ld	r24, Z
    6e0e:	80 83       	st	Z, r24
    6e10:	16 96       	adiw	r26, 0x06	; 6
    6e12:	ed 91       	ld	r30, X+
    6e14:	fc 91       	ld	r31, X
    6e16:	17 97       	sbiw	r26, 0x07	; 7
    6e18:	8c e0       	ldi	r24, 0x0C	; 12
    6e1a:	81 87       	std	Z+9, r24	; 0x09
    6e1c:	80 91 87 23 	lds	r24, 0x2387
    6e20:	90 91 88 23 	lds	r25, 0x2388
    6e24:	6a 81       	ldd	r22, Y+2	; 0x02
    6e26:	7b 81       	ldd	r23, Y+3	; 0x03
    6e28:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    6e2c:	89 81       	ldd	r24, Y+1	; 0x01
    6e2e:	8f bf       	out	0x3f, r24	; 63
    6e30:	80 e0       	ldi	r24, 0x00	; 0
    6e32:	24 96       	adiw	r28, 0x04	; 4
    6e34:	cd bf       	out	0x3d, r28	; 61
    6e36:	de bf       	out	0x3e, r29	; 62
    6e38:	df 91       	pop	r29
    6e3a:	cf 91       	pop	r28
    6e3c:	1f 91       	pop	r17
    6e3e:	0f 91       	pop	r16
    6e40:	ff 90       	pop	r15
    6e42:	df 90       	pop	r13
    6e44:	cf 90       	pop	r12
    6e46:	bf 90       	pop	r11
    6e48:	af 90       	pop	r10
    6e4a:	08 95       	ret

00006e4c <hal_configureTimer>:
    6e4c:	6f 92       	push	r6
    6e4e:	7f 92       	push	r7
    6e50:	9f 92       	push	r9
    6e52:	af 92       	push	r10
    6e54:	bf 92       	push	r11
    6e56:	cf 92       	push	r12
    6e58:	df 92       	push	r13
    6e5a:	ef 92       	push	r14
    6e5c:	ff 92       	push	r15
    6e5e:	0f 93       	push	r16
    6e60:	1f 93       	push	r17
    6e62:	cf 93       	push	r28
    6e64:	df 93       	push	r29
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
    6e6a:	67 97       	sbiw	r28, 0x17	; 23
    6e6c:	cd bf       	out	0x3d, r28	; 61
    6e6e:	de bf       	out	0x3e, r29	; 62
    6e70:	88 8b       	std	Y+16, r24	; 0x10
    6e72:	99 8b       	std	Y+17, r25	; 0x11
    6e74:	d2 2e       	mov	r13, r18
    6e76:	2a 8b       	std	Y+18, r18	; 0x12
    6e78:	e3 2e       	mov	r14, r19
    6e7a:	3b 8b       	std	Y+19, r19	; 0x13
    6e7c:	4c 8b       	std	Y+20, r20	; 0x14
    6e7e:	5d 8b       	std	Y+21, r21	; 0x15
    6e80:	6e 8b       	std	Y+22, r22	; 0x16
    6e82:	7f 8b       	std	Y+23, r23	; 0x17
    6e84:	de 01       	movw	r26, r28
    6e86:	12 96       	adiw	r26, 0x02	; 2
    6e88:	eb e6       	ldi	r30, 0x6B	; 107
    6e8a:	f3 e2       	ldi	r31, 0x23	; 35
    6e8c:	8e e0       	ldi	r24, 0x0E	; 14
    6e8e:	01 90       	ld	r0, Z+
    6e90:	0d 92       	st	X+, r0
    6e92:	81 50       	subi	r24, 0x01	; 1
    6e94:	e1 f7       	brne	.-8      	; 0x6e8e <hal_configureTimer+0x42>
    6e96:	8f b7       	in	r24, 0x3f	; 63
    6e98:	89 83       	std	Y+1, r24	; 0x01
    6e9a:	f8 94       	cli
    6e9c:	e8 89       	ldd	r30, Y+16	; 0x10
    6e9e:	f9 89       	ldd	r31, Y+17	; 0x11
    6ea0:	80 91 87 23 	lds	r24, 0x2387
    6ea4:	90 91 88 23 	lds	r25, 0x2388
    6ea8:	24 81       	ldd	r18, Z+4	; 0x04
    6eaa:	35 81       	ldd	r19, Z+5	; 0x05
    6eac:	28 17       	cp	r18, r24
    6eae:	39 07       	cpc	r19, r25
    6eb0:	21 f0       	breq	.+8      	; 0x6eba <hal_configureTimer+0x6e>
    6eb2:	89 81       	ldd	r24, Y+1	; 0x01
    6eb4:	8f bf       	out	0x3f, r24	; 63
    6eb6:	8b ef       	ldi	r24, 0xFB	; 251
    6eb8:	e9 c0       	rjmp	.+466    	; 0x708c <hal_configureTimer+0x240>
    6eba:	e8 89       	ldd	r30, Y+16	; 0x10
    6ebc:	f9 89       	ldd	r31, Y+17	; 0x11
    6ebe:	00 81       	ld	r16, Z
    6ec0:	11 81       	ldd	r17, Z+1	; 0x01
    6ec2:	26 e0       	ldi	r18, 0x06	; 6
    6ec4:	2d 15       	cp	r18, r13
    6ec6:	18 f0       	brcs	.+6      	; 0x6ece <hal_configureTimer+0x82>
    6ec8:	82 e0       	ldi	r24, 0x02	; 2
    6eca:	d8 16       	cp	r13, r24
    6ecc:	21 f4       	brne	.+8      	; 0x6ed6 <hal_configureTimer+0x8a>
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	8f bf       	out	0x3f, r24	; 63
    6ed2:	86 ef       	ldi	r24, 0xF6	; 246
    6ed4:	db c0       	rjmp	.+438    	; 0x708c <hal_configureTimer+0x240>
    6ed6:	a1 e0       	ldi	r26, 0x01	; 1
    6ed8:	ae 15       	cp	r26, r14
    6eda:	20 f4       	brcc	.+8      	; 0x6ee4 <hal_configureTimer+0x98>
    6edc:	89 81       	ldd	r24, Y+1	; 0x01
    6ede:	8f bf       	out	0x3f, r24	; 63
    6ee0:	85 ef       	ldi	r24, 0xF5	; 245
    6ee2:	d4 c0       	rjmp	.+424    	; 0x708c <hal_configureTimer+0x240>
    6ee4:	6c 89       	ldd	r22, Y+20	; 0x14
    6ee6:	7d 89       	ldd	r23, Y+21	; 0x15
    6ee8:	8e 89       	ldd	r24, Y+22	; 0x16
    6eea:	9f 89       	ldd	r25, Y+23	; 0x17
    6eec:	20 e0       	ldi	r18, 0x00	; 0
    6eee:	34 e2       	ldi	r19, 0x24	; 36
    6ef0:	44 ef       	ldi	r20, 0xF4	; 244
    6ef2:	5b e4       	ldi	r21, 0x4B	; 75
    6ef4:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    6ef8:	c6 2e       	mov	r12, r22
    6efa:	b7 2e       	mov	r11, r23
    6efc:	a8 2e       	mov	r10, r24
    6efe:	99 2e       	mov	r9, r25
    6f00:	62 e0       	ldi	r22, 0x02	; 2
    6f02:	66 2e       	mov	r6, r22
    6f04:	71 2c       	mov	r7, r1
    6f06:	6c 0e       	add	r6, r28
    6f08:	7d 1e       	adc	r7, r29
    6f0a:	ff 24       	eor	r15, r15
    6f0c:	f3 01       	movw	r30, r6
    6f0e:	61 91       	ld	r22, Z+
    6f10:	71 91       	ld	r23, Z+
    6f12:	3f 01       	movw	r6, r30
    6f14:	80 e0       	ldi	r24, 0x00	; 0
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
    6f1c:	9b 01       	movw	r18, r22
    6f1e:	ac 01       	movw	r20, r24
    6f20:	8c 2d       	mov	r24, r12
    6f22:	9b 2d       	mov	r25, r11
    6f24:	aa 2d       	mov	r26, r10
    6f26:	b9 2d       	mov	r27, r9
    6f28:	bc 01       	movw	r22, r24
    6f2a:	cd 01       	movw	r24, r26
    6f2c:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    6f30:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    6f34:	ab 01       	movw	r20, r22
    6f36:	bc 01       	movw	r22, r24
    6f38:	4f 3f       	cpi	r20, 0xFF	; 255
    6f3a:	ff e7       	ldi	r31, 0x7F	; 127
    6f3c:	5f 07       	cpc	r21, r31
    6f3e:	f0 e0       	ldi	r31, 0x00	; 0
    6f40:	6f 07       	cpc	r22, r31
    6f42:	f0 e0       	ldi	r31, 0x00	; 0
    6f44:	7f 07       	cpc	r23, r31
    6f46:	24 f0       	brlt	.+8      	; 0x6f50 <hal_configureTimer+0x104>
    6f48:	f3 94       	inc	r15
    6f4a:	27 e0       	ldi	r18, 0x07	; 7
    6f4c:	f2 16       	cp	r15, r18
    6f4e:	f1 f6       	brne	.-68     	; 0x6f0c <hal_configureTimer+0xc0>
    6f50:	ef 2d       	mov	r30, r15
    6f52:	f0 e0       	ldi	r31, 0x00	; 0
    6f54:	ee 0f       	add	r30, r30
    6f56:	ff 1f       	adc	r31, r31
    6f58:	ec 0f       	add	r30, r28
    6f5a:	fd 1f       	adc	r31, r29
    6f5c:	82 81       	ldd	r24, Z+2	; 0x02
    6f5e:	93 81       	ldd	r25, Z+3	; 0x03
    6f60:	88 30       	cpi	r24, 0x08	; 8
    6f62:	91 05       	cpc	r25, r1
    6f64:	09 f1       	breq	.+66     	; 0x6fa8 <hal_configureTimer+0x15c>
    6f66:	89 30       	cpi	r24, 0x09	; 9
    6f68:	91 05       	cpc	r25, r1
    6f6a:	50 f4       	brcc	.+20     	; 0x6f80 <hal_configureTimer+0x134>
    6f6c:	82 30       	cpi	r24, 0x02	; 2
    6f6e:	91 05       	cpc	r25, r1
    6f70:	a9 f0       	breq	.+42     	; 0x6f9c <hal_configureTimer+0x150>
    6f72:	84 30       	cpi	r24, 0x04	; 4
    6f74:	91 05       	cpc	r25, r1
    6f76:	a1 f0       	breq	.+40     	; 0x6fa0 <hal_configureTimer+0x154>
    6f78:	81 30       	cpi	r24, 0x01	; 1
    6f7a:	91 05       	cpc	r25, r1
    6f7c:	09 f5       	brne	.+66     	; 0x6fc0 <hal_configureTimer+0x174>
    6f7e:	0c c0       	rjmp	.+24     	; 0x6f98 <hal_configureTimer+0x14c>
    6f80:	a1 e0       	ldi	r26, 0x01	; 1
    6f82:	80 30       	cpi	r24, 0x00	; 0
    6f84:	9a 07       	cpc	r25, r26
    6f86:	a1 f0       	breq	.+40     	; 0x6fb0 <hal_configureTimer+0x164>
    6f88:	b4 e0       	ldi	r27, 0x04	; 4
    6f8a:	80 30       	cpi	r24, 0x00	; 0
    6f8c:	9b 07       	cpc	r25, r27
    6f8e:	b1 f0       	breq	.+44     	; 0x6fbc <hal_configureTimer+0x170>
    6f90:	80 34       	cpi	r24, 0x40	; 64
    6f92:	91 05       	cpc	r25, r1
    6f94:	a9 f4       	brne	.+42     	; 0x6fc0 <hal_configureTimer+0x174>
    6f96:	0a c0       	rjmp	.+20     	; 0x6fac <hal_configureTimer+0x160>
    6f98:	81 e0       	ldi	r24, 0x01	; 1
    6f9a:	03 c0       	rjmp	.+6      	; 0x6fa2 <hal_configureTimer+0x156>
    6f9c:	82 e0       	ldi	r24, 0x02	; 2
    6f9e:	09 c0       	rjmp	.+18     	; 0x6fb2 <hal_configureTimer+0x166>
    6fa0:	83 e0       	ldi	r24, 0x03	; 3
    6fa2:	f8 01       	movw	r30, r16
    6fa4:	83 83       	std	Z+3, r24	; 0x03
    6fa6:	10 c0       	rjmp	.+32     	; 0x6fc8 <hal_configureTimer+0x17c>
    6fa8:	84 e0       	ldi	r24, 0x04	; 4
    6faa:	03 c0       	rjmp	.+6      	; 0x6fb2 <hal_configureTimer+0x166>
    6fac:	85 e0       	ldi	r24, 0x05	; 5
    6fae:	f9 cf       	rjmp	.-14     	; 0x6fa2 <hal_configureTimer+0x156>
    6fb0:	86 e0       	ldi	r24, 0x06	; 6
    6fb2:	d8 01       	movw	r26, r16
    6fb4:	13 96       	adiw	r26, 0x03	; 3
    6fb6:	8c 93       	st	X, r24
    6fb8:	13 97       	sbiw	r26, 0x03	; 3
    6fba:	06 c0       	rjmp	.+12     	; 0x6fc8 <hal_configureTimer+0x17c>
    6fbc:	87 e0       	ldi	r24, 0x07	; 7
    6fbe:	f1 cf       	rjmp	.-30     	; 0x6fa2 <hal_configureTimer+0x156>
    6fc0:	89 81       	ldd	r24, Y+1	; 0x01
    6fc2:	8f bf       	out	0x3f, r24	; 63
    6fc4:	84 ef       	ldi	r24, 0xF4	; 244
    6fc6:	62 c0       	rjmp	.+196    	; 0x708c <hal_configureTimer+0x240>
    6fc8:	d8 01       	movw	r26, r16
    6fca:	14 96       	adiw	r26, 0x04	; 4
    6fcc:	ed 91       	ld	r30, X+
    6fce:	fc 91       	ld	r31, X
    6fd0:	15 97       	sbiw	r26, 0x05	; 5
    6fd2:	30 97       	sbiw	r30, 0x00	; 0
    6fd4:	11 f1       	breq	.+68     	; 0x701a <hal_configureTimer+0x1ce>
    6fd6:	80 81       	ld	r24, Z
    6fd8:	80 7f       	andi	r24, 0xF0	; 240
    6fda:	80 83       	st	Z, r24
    6fdc:	14 96       	adiw	r26, 0x04	; 4
    6fde:	ed 91       	ld	r30, X+
    6fe0:	fc 91       	ld	r31, X
    6fe2:	15 97       	sbiw	r26, 0x05	; 5
    6fe4:	80 81       	ld	r24, Z
    6fe6:	80 83       	st	Z, r24
    6fe8:	14 96       	adiw	r26, 0x04	; 4
    6fea:	ed 91       	ld	r30, X+
    6fec:	fc 91       	ld	r31, X
    6fee:	15 97       	sbiw	r26, 0x05	; 5
    6ff0:	8c e0       	ldi	r24, 0x0C	; 12
    6ff2:	81 87       	std	Z+9, r24	; 0x09
    6ff4:	14 96       	adiw	r26, 0x04	; 4
    6ff6:	ed 91       	ld	r30, X+
    6ff8:	fc 91       	ld	r31, X
    6ffa:	15 97       	sbiw	r26, 0x05	; 5
    6ffc:	81 81       	ldd	r24, Z+1	; 0x01
    6ffe:	88 7f       	andi	r24, 0xF8	; 248
    7000:	81 83       	std	Z+1, r24	; 0x01
    7002:	14 96       	adiw	r26, 0x04	; 4
    7004:	ed 91       	ld	r30, X+
    7006:	fc 91       	ld	r31, X
    7008:	15 97       	sbiw	r26, 0x05	; 5
    700a:	81 81       	ldd	r24, Z+1	; 0x01
    700c:	8d 29       	or	r24, r13
    700e:	81 83       	std	Z+1, r24	; 0x01
    7010:	14 96       	adiw	r26, 0x04	; 4
    7012:	ed 91       	ld	r30, X+
    7014:	fc 91       	ld	r31, X
    7016:	15 97       	sbiw	r26, 0x05	; 5
    7018:	26 c0       	rjmp	.+76     	; 0x7066 <hal_configureTimer+0x21a>
    701a:	d8 01       	movw	r26, r16
    701c:	16 96       	adiw	r26, 0x06	; 6
    701e:	ed 91       	ld	r30, X+
    7020:	fc 91       	ld	r31, X
    7022:	17 97       	sbiw	r26, 0x07	; 7
    7024:	80 81       	ld	r24, Z
    7026:	80 7f       	andi	r24, 0xF0	; 240
    7028:	80 83       	st	Z, r24
    702a:	16 96       	adiw	r26, 0x06	; 6
    702c:	ed 91       	ld	r30, X+
    702e:	fc 91       	ld	r31, X
    7030:	17 97       	sbiw	r26, 0x07	; 7
    7032:	80 81       	ld	r24, Z
    7034:	80 83       	st	Z, r24
    7036:	16 96       	adiw	r26, 0x06	; 6
    7038:	ed 91       	ld	r30, X+
    703a:	fc 91       	ld	r31, X
    703c:	17 97       	sbiw	r26, 0x07	; 7
    703e:	8c e0       	ldi	r24, 0x0C	; 12
    7040:	81 87       	std	Z+9, r24	; 0x09
    7042:	16 96       	adiw	r26, 0x06	; 6
    7044:	ed 91       	ld	r30, X+
    7046:	fc 91       	ld	r31, X
    7048:	17 97       	sbiw	r26, 0x07	; 7
    704a:	81 81       	ldd	r24, Z+1	; 0x01
    704c:	88 7f       	andi	r24, 0xF8	; 248
    704e:	81 83       	std	Z+1, r24	; 0x01
    7050:	16 96       	adiw	r26, 0x06	; 6
    7052:	ed 91       	ld	r30, X+
    7054:	fc 91       	ld	r31, X
    7056:	17 97       	sbiw	r26, 0x07	; 7
    7058:	81 81       	ldd	r24, Z+1	; 0x01
    705a:	8d 29       	or	r24, r13
    705c:	81 83       	std	Z+1, r24	; 0x01
    705e:	16 96       	adiw	r26, 0x06	; 6
    7060:	ed 91       	ld	r30, X+
    7062:	fc 91       	ld	r31, X
    7064:	17 97       	sbiw	r26, 0x07	; 7
    7066:	46 a3       	lds	r20, 0x56
    7068:	57 a3       	lds	r21, 0x57
    706a:	14 96       	adiw	r26, 0x04	; 4
    706c:	ed 91       	ld	r30, X+
    706e:	fc 91       	ld	r31, X
    7070:	15 97       	sbiw	r26, 0x05	; 5
    7072:	b1 e0       	ldi	r27, 0x01	; 1
    7074:	eb 16       	cp	r14, r27
    7076:	11 f4       	brne	.+4      	; 0x707c <hal_configureTimer+0x230>
    7078:	e1 86       	std	Z+9, r14	; 0x09
    707a:	02 c0       	rjmp	.+4      	; 0x7080 <hal_configureTimer+0x234>
    707c:	81 e0       	ldi	r24, 0x01	; 1
    707e:	80 87       	std	Z+8, r24	; 0x08
    7080:	81 e0       	ldi	r24, 0x01	; 1
    7082:	f8 01       	movw	r30, r16
    7084:	81 83       	std	Z+1, r24	; 0x01
    7086:	89 81       	ldd	r24, Y+1	; 0x01
    7088:	8f bf       	out	0x3f, r24	; 63
    708a:	80 e0       	ldi	r24, 0x00	; 0
    708c:	67 96       	adiw	r28, 0x17	; 23
    708e:	cd bf       	out	0x3d, r28	; 61
    7090:	de bf       	out	0x3e, r29	; 62
    7092:	df 91       	pop	r29
    7094:	cf 91       	pop	r28
    7096:	1f 91       	pop	r17
    7098:	0f 91       	pop	r16
    709a:	ff 90       	pop	r15
    709c:	ef 90       	pop	r14
    709e:	df 90       	pop	r13
    70a0:	cf 90       	pop	r12
    70a2:	bf 90       	pop	r11
    70a4:	af 90       	pop	r10
    70a6:	9f 90       	pop	r9
    70a8:	7f 90       	pop	r7
    70aa:	6f 90       	pop	r6
    70ac:	08 95       	ret

000070ae <hal_startTimer>:
    70ae:	cf 93       	push	r28
    70b0:	df 93       	push	r29
    70b2:	00 d0       	rcall	.+0      	; 0x70b4 <hal_startTimer+0x6>
    70b4:	cd b7       	in	r28, 0x3d	; 61
    70b6:	de b7       	in	r29, 0x3e	; 62
    70b8:	8a 83       	std	Y+2, r24	; 0x02
    70ba:	9b 83       	std	Y+3, r25	; 0x03
    70bc:	8f b7       	in	r24, 0x3f	; 63
    70be:	89 83       	std	Y+1, r24	; 0x01
    70c0:	f8 94       	cli
    70c2:	ea 81       	ldd	r30, Y+2	; 0x02
    70c4:	fb 81       	ldd	r31, Y+3	; 0x03
    70c6:	80 91 87 23 	lds	r24, 0x2387
    70ca:	90 91 88 23 	lds	r25, 0x2388
    70ce:	24 81       	ldd	r18, Z+4	; 0x04
    70d0:	35 81       	ldd	r19, Z+5	; 0x05
    70d2:	28 17       	cp	r18, r24
    70d4:	39 07       	cpc	r19, r25
    70d6:	21 f0       	breq	.+8      	; 0x70e0 <hal_startTimer+0x32>
    70d8:	89 81       	ldd	r24, Y+1	; 0x01
    70da:	8f bf       	out	0x3f, r24	; 63
    70dc:	8b ef       	ldi	r24, 0xFB	; 251
    70de:	24 c0       	rjmp	.+72     	; 0x7128 <hal_startTimer+0x7a>
    70e0:	ea 81       	ldd	r30, Y+2	; 0x02
    70e2:	fb 81       	ldd	r31, Y+3	; 0x03
    70e4:	01 90       	ld	r0, Z+
    70e6:	f0 81       	ld	r31, Z
    70e8:	e0 2d       	mov	r30, r0
    70ea:	81 81       	ldd	r24, Z+1	; 0x01
    70ec:	88 23       	and	r24, r24
    70ee:	21 f4       	brne	.+8      	; 0x70f8 <hal_startTimer+0x4a>
    70f0:	89 81       	ldd	r24, Y+1	; 0x01
    70f2:	8f bf       	out	0x3f, r24	; 63
    70f4:	83 ef       	ldi	r24, 0xF3	; 243
    70f6:	18 c0       	rjmp	.+48     	; 0x7128 <hal_startTimer+0x7a>
    70f8:	a4 81       	ldd	r26, Z+4	; 0x04
    70fa:	b5 81       	ldd	r27, Z+5	; 0x05
    70fc:	10 97       	sbiw	r26, 0x00	; 0
    70fe:	31 f0       	breq	.+12     	; 0x710c <hal_startTimer+0x5e>
    7100:	8c 91       	ld	r24, X
    7102:	80 7f       	andi	r24, 0xF0	; 240
    7104:	8c 93       	st	X, r24
    7106:	a4 81       	ldd	r26, Z+4	; 0x04
    7108:	b5 81       	ldd	r27, Z+5	; 0x05
    710a:	07 c0       	rjmp	.+14     	; 0x711a <hal_startTimer+0x6c>
    710c:	a6 81       	ldd	r26, Z+6	; 0x06
    710e:	b7 81       	ldd	r27, Z+7	; 0x07
    7110:	8c 91       	ld	r24, X
    7112:	80 7f       	andi	r24, 0xF0	; 240
    7114:	8c 93       	st	X, r24
    7116:	a6 81       	ldd	r26, Z+6	; 0x06
    7118:	b7 81       	ldd	r27, Z+7	; 0x07
    711a:	8c 91       	ld	r24, X
    711c:	93 81       	ldd	r25, Z+3	; 0x03
    711e:	89 2b       	or	r24, r25
    7120:	8c 93       	st	X, r24
    7122:	89 81       	ldd	r24, Y+1	; 0x01
    7124:	8f bf       	out	0x3f, r24	; 63
    7126:	80 e0       	ldi	r24, 0x00	; 0
    7128:	23 96       	adiw	r28, 0x03	; 3
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	de bf       	out	0x3e, r29	; 62
    712e:	df 91       	pop	r29
    7130:	cf 91       	pop	r28
    7132:	08 95       	ret

00007134 <hal_stopTimer>:
    7134:	cf 93       	push	r28
    7136:	df 93       	push	r29
    7138:	00 d0       	rcall	.+0      	; 0x713a <hal_stopTimer+0x6>
    713a:	cd b7       	in	r28, 0x3d	; 61
    713c:	de b7       	in	r29, 0x3e	; 62
    713e:	8a 83       	std	Y+2, r24	; 0x02
    7140:	9b 83       	std	Y+3, r25	; 0x03
    7142:	8f b7       	in	r24, 0x3f	; 63
    7144:	89 83       	std	Y+1, r24	; 0x01
    7146:	f8 94       	cli
    7148:	ea 81       	ldd	r30, Y+2	; 0x02
    714a:	fb 81       	ldd	r31, Y+3	; 0x03
    714c:	80 91 87 23 	lds	r24, 0x2387
    7150:	90 91 88 23 	lds	r25, 0x2388
    7154:	24 81       	ldd	r18, Z+4	; 0x04
    7156:	35 81       	ldd	r19, Z+5	; 0x05
    7158:	28 17       	cp	r18, r24
    715a:	39 07       	cpc	r19, r25
    715c:	21 f0       	breq	.+8      	; 0x7166 <hal_stopTimer+0x32>
    715e:	89 81       	ldd	r24, Y+1	; 0x01
    7160:	8f bf       	out	0x3f, r24	; 63
    7162:	8b ef       	ldi	r24, 0xFB	; 251
    7164:	1d c0       	rjmp	.+58     	; 0x71a0 <hal_stopTimer+0x6c>
    7166:	ea 81       	ldd	r30, Y+2	; 0x02
    7168:	fb 81       	ldd	r31, Y+3	; 0x03
    716a:	01 90       	ld	r0, Z+
    716c:	f0 81       	ld	r31, Z
    716e:	e0 2d       	mov	r30, r0
    7170:	a4 81       	ldd	r26, Z+4	; 0x04
    7172:	b5 81       	ldd	r27, Z+5	; 0x05
    7174:	10 97       	sbiw	r26, 0x00	; 0
    7176:	39 f0       	breq	.+14     	; 0x7186 <hal_stopTimer+0x52>
    7178:	8c 91       	ld	r24, X
    717a:	80 7f       	andi	r24, 0xF0	; 240
    717c:	8c 93       	st	X, r24
    717e:	04 80       	ldd	r0, Z+4	; 0x04
    7180:	f5 81       	ldd	r31, Z+5	; 0x05
    7182:	e0 2d       	mov	r30, r0
    7184:	08 c0       	rjmp	.+16     	; 0x7196 <hal_stopTimer+0x62>
    7186:	a6 81       	ldd	r26, Z+6	; 0x06
    7188:	b7 81       	ldd	r27, Z+7	; 0x07
    718a:	8c 91       	ld	r24, X
    718c:	80 7f       	andi	r24, 0xF0	; 240
    718e:	8c 93       	st	X, r24
    7190:	06 80       	ldd	r0, Z+6	; 0x06
    7192:	f7 81       	ldd	r31, Z+7	; 0x07
    7194:	e0 2d       	mov	r30, r0
    7196:	80 81       	ld	r24, Z
    7198:	80 83       	st	Z, r24
    719a:	89 81       	ldd	r24, Y+1	; 0x01
    719c:	8f bf       	out	0x3f, r24	; 63
    719e:	80 e0       	ldi	r24, 0x00	; 0
    71a0:	23 96       	adiw	r28, 0x03	; 3
    71a2:	cd bf       	out	0x3d, r28	; 61
    71a4:	de bf       	out	0x3e, r29	; 62
    71a6:	df 91       	pop	r29
    71a8:	cf 91       	pop	r28
    71aa:	08 95       	ret

000071ac <hal_getTimerCount>:
    71ac:	0f 93       	push	r16
    71ae:	1f 93       	push	r17
    71b0:	cf 93       	push	r28
    71b2:	df 93       	push	r29
    71b4:	0f 92       	push	r0
    71b6:	0f 92       	push	r0
    71b8:	cd b7       	in	r28, 0x3d	; 61
    71ba:	de b7       	in	r29, 0x3e	; 62
    71bc:	89 83       	std	Y+1, r24	; 0x01
    71be:	9a 83       	std	Y+2, r25	; 0x02
    71c0:	e9 81       	ldd	r30, Y+1	; 0x01
    71c2:	fa 81       	ldd	r31, Y+2	; 0x02
    71c4:	80 91 87 23 	lds	r24, 0x2387
    71c8:	90 91 88 23 	lds	r25, 0x2388
    71cc:	24 81       	ldd	r18, Z+4	; 0x04
    71ce:	35 81       	ldd	r19, Z+5	; 0x05
    71d0:	28 17       	cp	r18, r24
    71d2:	39 07       	cpc	r19, r25
    71d4:	b1 f4       	brne	.+44     	; 0x7202 <hal_getTimerCount+0x56>
    71d6:	e9 81       	ldd	r30, Y+1	; 0x01
    71d8:	fa 81       	ldd	r31, Y+2	; 0x02
    71da:	01 90       	ld	r0, Z+
    71dc:	f0 81       	ld	r31, Z
    71de:	e0 2d       	mov	r30, r0
    71e0:	a4 81       	ldd	r26, Z+4	; 0x04
    71e2:	b5 81       	ldd	r27, Z+5	; 0x05
    71e4:	10 97       	sbiw	r26, 0x00	; 0
    71e6:	29 f0       	breq	.+10     	; 0x71f2 <hal_getTimerCount+0x46>
    71e8:	90 96       	adiw	r26, 0x20	; 32
    71ea:	0d 91       	ld	r16, X+
    71ec:	1c 91       	ld	r17, X
    71ee:	91 97       	sbiw	r26, 0x21	; 33
    71f0:	05 c0       	rjmp	.+10     	; 0x71fc <hal_getTimerCount+0x50>
    71f2:	06 80       	ldd	r0, Z+6	; 0x06
    71f4:	f7 81       	ldd	r31, Z+7	; 0x07
    71f6:	e0 2d       	mov	r30, r0
    71f8:	00 a1       	lds	r16, 0x40
    71fa:	11 a1       	lds	r17, 0x41
    71fc:	20 e0       	ldi	r18, 0x00	; 0
    71fe:	30 e0       	ldi	r19, 0x00	; 0
    7200:	04 c0       	rjmp	.+8      	; 0x720a <hal_getTimerCount+0x5e>
    7202:	0b ef       	ldi	r16, 0xFB	; 251
    7204:	1f ef       	ldi	r17, 0xFF	; 255
    7206:	2f ef       	ldi	r18, 0xFF	; 255
    7208:	3f ef       	ldi	r19, 0xFF	; 255
    720a:	b8 01       	movw	r22, r16
    720c:	c9 01       	movw	r24, r18
    720e:	0f 90       	pop	r0
    7210:	0f 90       	pop	r0
    7212:	df 91       	pop	r29
    7214:	cf 91       	pop	r28
    7216:	1f 91       	pop	r17
    7218:	0f 91       	pop	r16
    721a:	08 95       	ret

0000721c <hal_setCompareValue>:
    721c:	cf 93       	push	r28
    721e:	df 93       	push	r29
    7220:	0f 92       	push	r0
    7222:	0f 92       	push	r0
    7224:	cd b7       	in	r28, 0x3d	; 61
    7226:	de b7       	in	r29, 0x3e	; 62
    7228:	89 83       	std	Y+1, r24	; 0x01
    722a:	9a 83       	std	Y+2, r25	; 0x02
    722c:	e9 81       	ldd	r30, Y+1	; 0x01
    722e:	fa 81       	ldd	r31, Y+2	; 0x02
    7230:	20 91 87 23 	lds	r18, 0x2387
    7234:	30 91 88 23 	lds	r19, 0x2388
    7238:	84 81       	ldd	r24, Z+4	; 0x04
    723a:	95 81       	ldd	r25, Z+5	; 0x05
    723c:	82 17       	cp	r24, r18
    723e:	93 07       	cpc	r25, r19
    7240:	99 f5       	brne	.+102    	; 0x72a8 <hal_setCompareValue+0x8c>
    7242:	e9 81       	ldd	r30, Y+1	; 0x01
    7244:	fa 81       	ldd	r31, Y+2	; 0x02
    7246:	a0 81       	ld	r26, Z
    7248:	b1 81       	ldd	r27, Z+1	; 0x01
    724a:	14 96       	adiw	r26, 0x04	; 4
    724c:	ed 91       	ld	r30, X+
    724e:	fc 91       	ld	r31, X
    7250:	15 97       	sbiw	r26, 0x05	; 5
    7252:	30 97       	sbiw	r30, 0x00	; 0
    7254:	a1 f0       	breq	.+40     	; 0x727e <hal_setCompareValue+0x62>
    7256:	86 a1       	lds	r24, 0x46
    7258:	97 a1       	lds	r25, 0x47
    725a:	84 17       	cp	r24, r20
    725c:	95 07       	cpc	r25, r21
    725e:	30 f1       	brcs	.+76     	; 0x72ac <hal_setCompareValue+0x90>
    7260:	61 30       	cpi	r22, 0x01	; 1
    7262:	f1 f0       	breq	.+60     	; 0x72a0 <hal_setCompareValue+0x84>
    7264:	61 30       	cpi	r22, 0x01	; 1
    7266:	c8 f0       	brcs	.+50     	; 0x729a <hal_setCompareValue+0x7e>
    7268:	62 30       	cpi	r22, 0x02	; 2
    726a:	19 f0       	breq	.+6      	; 0x7272 <hal_setCompareValue+0x56>
    726c:	63 30       	cpi	r22, 0x03	; 3
    726e:	01 f5       	brne	.+64     	; 0x72b0 <hal_setCompareValue+0x94>
    7270:	03 c0       	rjmp	.+6      	; 0x7278 <hal_setCompareValue+0x5c>
    7272:	44 a7       	lds	r20, 0x74
    7274:	55 a7       	lds	r21, 0x75
    7276:	16 c0       	rjmp	.+44     	; 0x72a4 <hal_setCompareValue+0x88>
    7278:	46 a7       	lds	r20, 0x76
    727a:	57 a7       	lds	r21, 0x77
    727c:	13 c0       	rjmp	.+38     	; 0x72a4 <hal_setCompareValue+0x88>
    727e:	16 96       	adiw	r26, 0x06	; 6
    7280:	ed 91       	ld	r30, X+
    7282:	fc 91       	ld	r31, X
    7284:	17 97       	sbiw	r26, 0x07	; 7
    7286:	86 a9       	sts	0x46, r24
    7288:	97 a9       	sts	0x47, r25
    728a:	84 17       	cp	r24, r20
    728c:	95 07       	cpc	r25, r21
    728e:	70 f0       	brcs	.+28     	; 0x72ac <hal_setCompareValue+0x90>
    7290:	66 23       	and	r22, r22
    7292:	19 f0       	breq	.+6      	; 0x729a <hal_setCompareValue+0x7e>
    7294:	61 30       	cpi	r22, 0x01	; 1
    7296:	61 f4       	brne	.+24     	; 0x72b0 <hal_setCompareValue+0x94>
    7298:	03 c0       	rjmp	.+6      	; 0x72a0 <hal_setCompareValue+0x84>
    729a:	40 a7       	lds	r20, 0x70
    729c:	51 a7       	lds	r21, 0x71
    729e:	02 c0       	rjmp	.+4      	; 0x72a4 <hal_setCompareValue+0x88>
    72a0:	42 a7       	lds	r20, 0x72
    72a2:	53 a7       	lds	r21, 0x73
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	05 c0       	rjmp	.+10     	; 0x72b2 <hal_setCompareValue+0x96>
    72a8:	8b ef       	ldi	r24, 0xFB	; 251
    72aa:	03 c0       	rjmp	.+6      	; 0x72b2 <hal_setCompareValue+0x96>
    72ac:	82 ef       	ldi	r24, 0xF2	; 242
    72ae:	01 c0       	rjmp	.+2      	; 0x72b2 <hal_setCompareValue+0x96>
    72b0:	8a ef       	ldi	r24, 0xFA	; 250
    72b2:	0f 90       	pop	r0
    72b4:	0f 90       	pop	r0
    72b6:	df 91       	pop	r29
    72b8:	cf 91       	pop	r28
    72ba:	08 95       	ret

000072bc <hal_getPeriodValue>:
    72bc:	0f 93       	push	r16
    72be:	1f 93       	push	r17
    72c0:	cf 93       	push	r28
    72c2:	df 93       	push	r29
    72c4:	0f 92       	push	r0
    72c6:	0f 92       	push	r0
    72c8:	cd b7       	in	r28, 0x3d	; 61
    72ca:	de b7       	in	r29, 0x3e	; 62
    72cc:	89 83       	std	Y+1, r24	; 0x01
    72ce:	9a 83       	std	Y+2, r25	; 0x02
    72d0:	e9 81       	ldd	r30, Y+1	; 0x01
    72d2:	fa 81       	ldd	r31, Y+2	; 0x02
    72d4:	80 91 87 23 	lds	r24, 0x2387
    72d8:	90 91 88 23 	lds	r25, 0x2388
    72dc:	24 81       	ldd	r18, Z+4	; 0x04
    72de:	35 81       	ldd	r19, Z+5	; 0x05
    72e0:	28 17       	cp	r18, r24
    72e2:	39 07       	cpc	r19, r25
    72e4:	b1 f4       	brne	.+44     	; 0x7312 <hal_getPeriodValue+0x56>
    72e6:	e9 81       	ldd	r30, Y+1	; 0x01
    72e8:	fa 81       	ldd	r31, Y+2	; 0x02
    72ea:	01 90       	ld	r0, Z+
    72ec:	f0 81       	ld	r31, Z
    72ee:	e0 2d       	mov	r30, r0
    72f0:	a4 81       	ldd	r26, Z+4	; 0x04
    72f2:	b5 81       	ldd	r27, Z+5	; 0x05
    72f4:	10 97       	sbiw	r26, 0x00	; 0
    72f6:	29 f0       	breq	.+10     	; 0x7302 <hal_getPeriodValue+0x46>
    72f8:	96 96       	adiw	r26, 0x26	; 38
    72fa:	0d 91       	ld	r16, X+
    72fc:	1c 91       	ld	r17, X
    72fe:	97 97       	sbiw	r26, 0x27	; 39
    7300:	05 c0       	rjmp	.+10     	; 0x730c <hal_getPeriodValue+0x50>
    7302:	06 80       	ldd	r0, Z+6	; 0x06
    7304:	f7 81       	ldd	r31, Z+7	; 0x07
    7306:	e0 2d       	mov	r30, r0
    7308:	06 a1       	lds	r16, 0x46
    730a:	17 a1       	lds	r17, 0x47
    730c:	20 e0       	ldi	r18, 0x00	; 0
    730e:	30 e0       	ldi	r19, 0x00	; 0
    7310:	04 c0       	rjmp	.+8      	; 0x731a <hal_getPeriodValue+0x5e>
    7312:	0b ef       	ldi	r16, 0xFB	; 251
    7314:	1f ef       	ldi	r17, 0xFF	; 255
    7316:	2f ef       	ldi	r18, 0xFF	; 255
    7318:	3f ef       	ldi	r19, 0xFF	; 255
    731a:	b8 01       	movw	r22, r16
    731c:	c9 01       	movw	r24, r18
    731e:	0f 90       	pop	r0
    7320:	0f 90       	pop	r0
    7322:	df 91       	pop	r29
    7324:	cf 91       	pop	r28
    7326:	1f 91       	pop	r17
    7328:	0f 91       	pop	r16
    732a:	08 95       	ret

0000732c <hal_getCompareValue>:
    732c:	0f 93       	push	r16
    732e:	1f 93       	push	r17
    7330:	cf 93       	push	r28
    7332:	df 93       	push	r29
    7334:	0f 92       	push	r0
    7336:	0f 92       	push	r0
    7338:	cd b7       	in	r28, 0x3d	; 61
    733a:	de b7       	in	r29, 0x3e	; 62
    733c:	89 83       	std	Y+1, r24	; 0x01
    733e:	9a 83       	std	Y+2, r25	; 0x02
    7340:	e9 81       	ldd	r30, Y+1	; 0x01
    7342:	fa 81       	ldd	r31, Y+2	; 0x02
    7344:	80 91 87 23 	lds	r24, 0x2387
    7348:	90 91 88 23 	lds	r25, 0x2388
    734c:	24 81       	ldd	r18, Z+4	; 0x04
    734e:	35 81       	ldd	r19, Z+5	; 0x05
    7350:	28 17       	cp	r18, r24
    7352:	39 07       	cpc	r19, r25
    7354:	79 f5       	brne	.+94     	; 0x73b4 <hal_getCompareValue+0x88>
    7356:	e9 81       	ldd	r30, Y+1	; 0x01
    7358:	fa 81       	ldd	r31, Y+2	; 0x02
    735a:	a0 81       	ld	r26, Z
    735c:	b1 81       	ldd	r27, Z+1	; 0x01
    735e:	14 96       	adiw	r26, 0x04	; 4
    7360:	ed 91       	ld	r30, X+
    7362:	fc 91       	ld	r31, X
    7364:	15 97       	sbiw	r26, 0x05	; 5
    7366:	30 97       	sbiw	r30, 0x00	; 0
    7368:	a1 f0       	breq	.+40     	; 0x7392 <hal_getCompareValue+0x66>
    736a:	61 30       	cpi	r22, 0x01	; 1
    736c:	39 f0       	breq	.+14     	; 0x737c <hal_getCompareValue+0x50>
    736e:	61 30       	cpi	r22, 0x01	; 1
    7370:	c8 f0       	brcs	.+50     	; 0x73a4 <hal_getCompareValue+0x78>
    7372:	62 30       	cpi	r22, 0x02	; 2
    7374:	41 f0       	breq	.+16     	; 0x7386 <hal_getCompareValue+0x5a>
    7376:	63 30       	cpi	r22, 0x03	; 3
    7378:	11 f5       	brne	.+68     	; 0x73be <hal_getCompareValue+0x92>
    737a:	08 c0       	rjmp	.+16     	; 0x738c <hal_getCompareValue+0x60>
    737c:	02 a5       	lds	r16, 0x62
    737e:	13 a5       	lds	r17, 0x63
    7380:	20 e0       	ldi	r18, 0x00	; 0
    7382:	30 e0       	ldi	r19, 0x00	; 0
    7384:	20 c0       	rjmp	.+64     	; 0x73c6 <hal_getCompareValue+0x9a>
    7386:	04 a5       	lds	r16, 0x64
    7388:	15 a5       	lds	r17, 0x65
    738a:	fa cf       	rjmp	.-12     	; 0x7380 <hal_getCompareValue+0x54>
    738c:	06 a5       	lds	r16, 0x66
    738e:	17 a5       	lds	r17, 0x67
    7390:	f7 cf       	rjmp	.-18     	; 0x7380 <hal_getCompareValue+0x54>
    7392:	66 23       	and	r22, r22
    7394:	19 f0       	breq	.+6      	; 0x739c <hal_getCompareValue+0x70>
    7396:	61 30       	cpi	r22, 0x01	; 1
    7398:	91 f4       	brne	.+36     	; 0x73be <hal_getCompareValue+0x92>
    739a:	07 c0       	rjmp	.+14     	; 0x73aa <hal_getCompareValue+0x7e>
    739c:	16 96       	adiw	r26, 0x06	; 6
    739e:	ed 91       	ld	r30, X+
    73a0:	fc 91       	ld	r31, X
    73a2:	17 97       	sbiw	r26, 0x07	; 7
    73a4:	00 a5       	lds	r16, 0x60
    73a6:	11 a5       	lds	r17, 0x61
    73a8:	eb cf       	rjmp	.-42     	; 0x7380 <hal_getCompareValue+0x54>
    73aa:	16 96       	adiw	r26, 0x06	; 6
    73ac:	ed 91       	ld	r30, X+
    73ae:	fc 91       	ld	r31, X
    73b0:	17 97       	sbiw	r26, 0x07	; 7
    73b2:	e4 cf       	rjmp	.-56     	; 0x737c <hal_getCompareValue+0x50>
    73b4:	0b ef       	ldi	r16, 0xFB	; 251
    73b6:	1f ef       	ldi	r17, 0xFF	; 255
    73b8:	2f ef       	ldi	r18, 0xFF	; 255
    73ba:	3f ef       	ldi	r19, 0xFF	; 255
    73bc:	04 c0       	rjmp	.+8      	; 0x73c6 <hal_getCompareValue+0x9a>
    73be:	0a ef       	ldi	r16, 0xFA	; 250
    73c0:	1f ef       	ldi	r17, 0xFF	; 255
    73c2:	2f ef       	ldi	r18, 0xFF	; 255
    73c4:	3f ef       	ldi	r19, 0xFF	; 255
    73c6:	b8 01       	movw	r22, r16
    73c8:	c9 01       	movw	r24, r18
    73ca:	0f 90       	pop	r0
    73cc:	0f 90       	pop	r0
    73ce:	df 91       	pop	r29
    73d0:	cf 91       	pop	r28
    73d2:	1f 91       	pop	r17
    73d4:	0f 91       	pop	r16
    73d6:	08 95       	ret

000073d8 <hal_getIntStatus>:
    73d8:	cf 93       	push	r28
    73da:	df 93       	push	r29
    73dc:	0f 92       	push	r0
    73de:	0f 92       	push	r0
    73e0:	cd b7       	in	r28, 0x3d	; 61
    73e2:	de b7       	in	r29, 0x3e	; 62
    73e4:	89 83       	std	Y+1, r24	; 0x01
    73e6:	9a 83       	std	Y+2, r25	; 0x02
    73e8:	e9 81       	ldd	r30, Y+1	; 0x01
    73ea:	fa 81       	ldd	r31, Y+2	; 0x02
    73ec:	80 91 87 23 	lds	r24, 0x2387
    73f0:	90 91 88 23 	lds	r25, 0x2388
    73f4:	24 81       	ldd	r18, Z+4	; 0x04
    73f6:	35 81       	ldd	r19, Z+5	; 0x05
    73f8:	28 17       	cp	r18, r24
    73fa:	39 07       	cpc	r19, r25
    73fc:	09 f0       	breq	.+2      	; 0x7400 <hal_getIntStatus+0x28>
    73fe:	44 c0       	rjmp	.+136    	; 0x7488 <hal_getIntStatus+0xb0>
    7400:	e9 81       	ldd	r30, Y+1	; 0x01
    7402:	fa 81       	ldd	r31, Y+2	; 0x02
    7404:	a0 81       	ld	r26, Z
    7406:	b1 81       	ldd	r27, Z+1	; 0x01
    7408:	14 96       	adiw	r26, 0x04	; 4
    740a:	ed 91       	ld	r30, X+
    740c:	fc 91       	ld	r31, X
    740e:	15 97       	sbiw	r26, 0x05	; 5
    7410:	30 97       	sbiw	r30, 0x00	; 0
    7412:	c1 f0       	breq	.+48     	; 0x7444 <hal_getIntStatus+0x6c>
    7414:	62 30       	cpi	r22, 0x02	; 2
    7416:	61 f0       	breq	.+24     	; 0x7430 <hal_getIntStatus+0x58>
    7418:	63 30       	cpi	r22, 0x03	; 3
    741a:	28 f4       	brcc	.+10     	; 0x7426 <hal_getIntStatus+0x4e>
    741c:	66 23       	and	r22, r22
    741e:	e9 f0       	breq	.+58     	; 0x745a <hal_getIntStatus+0x82>
    7420:	61 30       	cpi	r22, 0x01	; 1
    7422:	a9 f5       	brne	.+106    	; 0x748e <hal_getIntStatus+0xb6>
    7424:	23 c0       	rjmp	.+70     	; 0x746c <hal_getIntStatus+0x94>
    7426:	63 30       	cpi	r22, 0x03	; 3
    7428:	41 f0       	breq	.+16     	; 0x743a <hal_getIntStatus+0x62>
    742a:	64 30       	cpi	r22, 0x04	; 4
    742c:	81 f5       	brne	.+96     	; 0x748e <hal_getIntStatus+0xb6>
    742e:	27 c0       	rjmp	.+78     	; 0x747e <hal_getIntStatus+0xa6>
    7430:	84 85       	ldd	r24, Z+12	; 0x0c
    7432:	90 e0       	ldi	r25, 0x00	; 0
    7434:	80 74       	andi	r24, 0x40	; 64
    7436:	90 70       	andi	r25, 0x00	; 0
    7438:	2c c0       	rjmp	.+88     	; 0x7492 <hal_getIntStatus+0xba>
    743a:	84 85       	ldd	r24, Z+12	; 0x0c
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	80 78       	andi	r24, 0x80	; 128
    7440:	90 70       	andi	r25, 0x00	; 0
    7442:	27 c0       	rjmp	.+78     	; 0x7492 <hal_getIntStatus+0xba>
    7444:	61 30       	cpi	r22, 0x01	; 1
    7446:	71 f0       	breq	.+28     	; 0x7464 <hal_getIntStatus+0x8c>
    7448:	61 30       	cpi	r22, 0x01	; 1
    744a:	18 f0       	brcs	.+6      	; 0x7452 <hal_getIntStatus+0x7a>
    744c:	64 30       	cpi	r22, 0x04	; 4
    744e:	f9 f4       	brne	.+62     	; 0x748e <hal_getIntStatus+0xb6>
    7450:	12 c0       	rjmp	.+36     	; 0x7476 <hal_getIntStatus+0x9e>
    7452:	16 96       	adiw	r26, 0x06	; 6
    7454:	ed 91       	ld	r30, X+
    7456:	fc 91       	ld	r31, X
    7458:	17 97       	sbiw	r26, 0x07	; 7
    745a:	84 85       	ldd	r24, Z+12	; 0x0c
    745c:	90 e0       	ldi	r25, 0x00	; 0
    745e:	80 71       	andi	r24, 0x10	; 16
    7460:	90 70       	andi	r25, 0x00	; 0
    7462:	17 c0       	rjmp	.+46     	; 0x7492 <hal_getIntStatus+0xba>
    7464:	16 96       	adiw	r26, 0x06	; 6
    7466:	ed 91       	ld	r30, X+
    7468:	fc 91       	ld	r31, X
    746a:	17 97       	sbiw	r26, 0x07	; 7
    746c:	84 85       	ldd	r24, Z+12	; 0x0c
    746e:	90 e0       	ldi	r25, 0x00	; 0
    7470:	80 72       	andi	r24, 0x20	; 32
    7472:	90 70       	andi	r25, 0x00	; 0
    7474:	0e c0       	rjmp	.+28     	; 0x7492 <hal_getIntStatus+0xba>
    7476:	16 96       	adiw	r26, 0x06	; 6
    7478:	ed 91       	ld	r30, X+
    747a:	fc 91       	ld	r31, X
    747c:	17 97       	sbiw	r26, 0x07	; 7
    747e:	84 85       	ldd	r24, Z+12	; 0x0c
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	81 70       	andi	r24, 0x01	; 1
    7484:	90 70       	andi	r25, 0x00	; 0
    7486:	05 c0       	rjmp	.+10     	; 0x7492 <hal_getIntStatus+0xba>
    7488:	8b ef       	ldi	r24, 0xFB	; 251
    748a:	9f ef       	ldi	r25, 0xFF	; 255
    748c:	02 c0       	rjmp	.+4      	; 0x7492 <hal_getIntStatus+0xba>
    748e:	8a ef       	ldi	r24, 0xFA	; 250
    7490:	9f ef       	ldi	r25, 0xFF	; 255
    7492:	0f 90       	pop	r0
    7494:	0f 90       	pop	r0
    7496:	df 91       	pop	r29
    7498:	cf 91       	pop	r28
    749a:	08 95       	ret

0000749c <hal_clearIntStatus>:
    749c:	cf 93       	push	r28
    749e:	df 93       	push	r29
    74a0:	0f 92       	push	r0
    74a2:	0f 92       	push	r0
    74a4:	cd b7       	in	r28, 0x3d	; 61
    74a6:	de b7       	in	r29, 0x3e	; 62
    74a8:	89 83       	std	Y+1, r24	; 0x01
    74aa:	9a 83       	std	Y+2, r25	; 0x02
    74ac:	e9 81       	ldd	r30, Y+1	; 0x01
    74ae:	fa 81       	ldd	r31, Y+2	; 0x02
    74b0:	80 91 87 23 	lds	r24, 0x2387
    74b4:	90 91 88 23 	lds	r25, 0x2388
    74b8:	24 81       	ldd	r18, Z+4	; 0x04
    74ba:	35 81       	ldd	r19, Z+5	; 0x05
    74bc:	28 17       	cp	r18, r24
    74be:	39 07       	cpc	r19, r25
    74c0:	e1 f5       	brne	.+120    	; 0x753a <hal_clearIntStatus+0x9e>
    74c2:	e9 81       	ldd	r30, Y+1	; 0x01
    74c4:	fa 81       	ldd	r31, Y+2	; 0x02
    74c6:	a0 81       	ld	r26, Z
    74c8:	b1 81       	ldd	r27, Z+1	; 0x01
    74ca:	14 96       	adiw	r26, 0x04	; 4
    74cc:	ed 91       	ld	r30, X+
    74ce:	fc 91       	ld	r31, X
    74d0:	15 97       	sbiw	r26, 0x05	; 5
    74d2:	30 97       	sbiw	r30, 0x00	; 0
    74d4:	a1 f0       	breq	.+40     	; 0x74fe <hal_clearIntStatus+0x62>
    74d6:	62 30       	cpi	r22, 0x02	; 2
    74d8:	61 f0       	breq	.+24     	; 0x74f2 <hal_clearIntStatus+0x56>
    74da:	63 30       	cpi	r22, 0x03	; 3
    74dc:	28 f4       	brcc	.+10     	; 0x74e8 <hal_clearIntStatus+0x4c>
    74de:	66 23       	and	r22, r22
    74e0:	c9 f0       	breq	.+50     	; 0x7514 <hal_clearIntStatus+0x78>
    74e2:	61 30       	cpi	r22, 0x01	; 1
    74e4:	61 f5       	brne	.+88     	; 0x753e <hal_clearIntStatus+0xa2>
    74e6:	1d c0       	rjmp	.+58     	; 0x7522 <hal_clearIntStatus+0x86>
    74e8:	63 30       	cpi	r22, 0x03	; 3
    74ea:	31 f0       	breq	.+12     	; 0x74f8 <hal_clearIntStatus+0x5c>
    74ec:	64 30       	cpi	r22, 0x04	; 4
    74ee:	39 f5       	brne	.+78     	; 0x753e <hal_clearIntStatus+0xa2>
    74f0:	1f c0       	rjmp	.+62     	; 0x7530 <hal_clearIntStatus+0x94>
    74f2:	84 85       	ldd	r24, Z+12	; 0x0c
    74f4:	80 64       	ori	r24, 0x40	; 64
    74f6:	1e c0       	rjmp	.+60     	; 0x7534 <hal_clearIntStatus+0x98>
    74f8:	84 85       	ldd	r24, Z+12	; 0x0c
    74fa:	80 68       	ori	r24, 0x80	; 128
    74fc:	1b c0       	rjmp	.+54     	; 0x7534 <hal_clearIntStatus+0x98>
    74fe:	61 30       	cpi	r22, 0x01	; 1
    7500:	61 f0       	breq	.+24     	; 0x751a <hal_clearIntStatus+0x7e>
    7502:	61 30       	cpi	r22, 0x01	; 1
    7504:	18 f0       	brcs	.+6      	; 0x750c <hal_clearIntStatus+0x70>
    7506:	64 30       	cpi	r22, 0x04	; 4
    7508:	d1 f4       	brne	.+52     	; 0x753e <hal_clearIntStatus+0xa2>
    750a:	0e c0       	rjmp	.+28     	; 0x7528 <hal_clearIntStatus+0x8c>
    750c:	16 96       	adiw	r26, 0x06	; 6
    750e:	ed 91       	ld	r30, X+
    7510:	fc 91       	ld	r31, X
    7512:	17 97       	sbiw	r26, 0x07	; 7
    7514:	84 85       	ldd	r24, Z+12	; 0x0c
    7516:	80 61       	ori	r24, 0x10	; 16
    7518:	0d c0       	rjmp	.+26     	; 0x7534 <hal_clearIntStatus+0x98>
    751a:	16 96       	adiw	r26, 0x06	; 6
    751c:	ed 91       	ld	r30, X+
    751e:	fc 91       	ld	r31, X
    7520:	17 97       	sbiw	r26, 0x07	; 7
    7522:	84 85       	ldd	r24, Z+12	; 0x0c
    7524:	80 62       	ori	r24, 0x20	; 32
    7526:	06 c0       	rjmp	.+12     	; 0x7534 <hal_clearIntStatus+0x98>
    7528:	16 96       	adiw	r26, 0x06	; 6
    752a:	ed 91       	ld	r30, X+
    752c:	fc 91       	ld	r31, X
    752e:	17 97       	sbiw	r26, 0x07	; 7
    7530:	84 85       	ldd	r24, Z+12	; 0x0c
    7532:	81 60       	ori	r24, 0x01	; 1
    7534:	84 87       	std	Z+12, r24	; 0x0c
    7536:	80 e0       	ldi	r24, 0x00	; 0
    7538:	03 c0       	rjmp	.+6      	; 0x7540 <hal_clearIntStatus+0xa4>
    753a:	8b ef       	ldi	r24, 0xFB	; 251
    753c:	01 c0       	rjmp	.+2      	; 0x7540 <hal_clearIntStatus+0xa4>
    753e:	8a ef       	ldi	r24, 0xFA	; 250
    7540:	0f 90       	pop	r0
    7542:	0f 90       	pop	r0
    7544:	df 91       	pop	r29
    7546:	cf 91       	pop	r28
    7548:	08 95       	ret

0000754a <hal_enableCompareChannel>:
    754a:	0f 93       	push	r16
    754c:	1f 93       	push	r17
    754e:	cf 93       	push	r28
    7550:	df 93       	push	r29
    7552:	cd b7       	in	r28, 0x3d	; 61
    7554:	de b7       	in	r29, 0x3e	; 62
    7556:	28 97       	sbiw	r28, 0x08	; 8
    7558:	cd bf       	out	0x3d, r28	; 61
    755a:	de bf       	out	0x3e, r29	; 62
    755c:	8e 83       	std	Y+6, r24	; 0x06
    755e:	9f 83       	std	Y+7, r25	; 0x07
    7560:	04 2f       	mov	r16, r20
    7562:	ee 81       	ldd	r30, Y+6	; 0x06
    7564:	ff 81       	ldd	r31, Y+7	; 0x07
    7566:	80 91 87 23 	lds	r24, 0x2387
    756a:	90 91 88 23 	lds	r25, 0x2388
    756e:	24 81       	ldd	r18, Z+4	; 0x04
    7570:	35 81       	ldd	r19, Z+5	; 0x05
    7572:	28 17       	cp	r18, r24
    7574:	39 07       	cpc	r19, r25
    7576:	09 f0       	breq	.+2      	; 0x757a <hal_enableCompareChannel+0x30>
    7578:	f1 c0       	rjmp	.+482    	; 0x775c <hal_enableCompareChannel+0x212>
    757a:	ee 81       	ldd	r30, Y+6	; 0x06
    757c:	ff 81       	ldd	r31, Y+7	; 0x07
    757e:	01 90       	ld	r0, Z+
    7580:	f0 81       	ld	r31, Z
    7582:	e0 2d       	mov	r30, r0
    7584:	a4 81       	ldd	r26, Z+4	; 0x04
    7586:	b5 81       	ldd	r27, Z+5	; 0x05
    7588:	10 97       	sbiw	r26, 0x00	; 0
    758a:	71 f1       	breq	.+92     	; 0x75e8 <hal_enableCompareChannel+0x9e>
    758c:	61 30       	cpi	r22, 0x01	; 1
    758e:	89 f0       	breq	.+34     	; 0x75b2 <hal_enableCompareChannel+0x68>
    7590:	61 30       	cpi	r22, 0x01	; 1
    7592:	30 f0       	brcs	.+12     	; 0x75a0 <hal_enableCompareChannel+0x56>
    7594:	62 30       	cpi	r22, 0x02	; 2
    7596:	b1 f0       	breq	.+44     	; 0x75c4 <hal_enableCompareChannel+0x7a>
    7598:	63 30       	cpi	r22, 0x03	; 3
    759a:	09 f0       	breq	.+2      	; 0x759e <hal_enableCompareChannel+0x54>
    759c:	e1 c0       	rjmp	.+450    	; 0x7760 <hal_enableCompareChannel+0x216>
    759e:	1b c0       	rjmp	.+54     	; 0x75d6 <hal_enableCompareChannel+0x8c>
    75a0:	11 96       	adiw	r26, 0x01	; 1
    75a2:	8c 91       	ld	r24, X
    75a4:	11 97       	sbiw	r26, 0x01	; 1
    75a6:	80 61       	ori	r24, 0x10	; 16
    75a8:	11 96       	adiw	r26, 0x01	; 1
    75aa:	8c 93       	st	X, r24
    75ac:	11 97       	sbiw	r26, 0x01	; 1
    75ae:	11 e0       	ldi	r17, 0x01	; 1
    75b0:	36 c0       	rjmp	.+108    	; 0x761e <hal_enableCompareChannel+0xd4>
    75b2:	11 96       	adiw	r26, 0x01	; 1
    75b4:	8c 91       	ld	r24, X
    75b6:	11 97       	sbiw	r26, 0x01	; 1
    75b8:	80 62       	ori	r24, 0x20	; 32
    75ba:	11 96       	adiw	r26, 0x01	; 1
    75bc:	8c 93       	st	X, r24
    75be:	11 97       	sbiw	r26, 0x01	; 1
    75c0:	12 e0       	ldi	r17, 0x02	; 2
    75c2:	2d c0       	rjmp	.+90     	; 0x761e <hal_enableCompareChannel+0xd4>
    75c4:	11 96       	adiw	r26, 0x01	; 1
    75c6:	8c 91       	ld	r24, X
    75c8:	11 97       	sbiw	r26, 0x01	; 1
    75ca:	80 64       	ori	r24, 0x40	; 64
    75cc:	11 96       	adiw	r26, 0x01	; 1
    75ce:	8c 93       	st	X, r24
    75d0:	11 97       	sbiw	r26, 0x01	; 1
    75d2:	14 e0       	ldi	r17, 0x04	; 4
    75d4:	24 c0       	rjmp	.+72     	; 0x761e <hal_enableCompareChannel+0xd4>
    75d6:	11 96       	adiw	r26, 0x01	; 1
    75d8:	8c 91       	ld	r24, X
    75da:	11 97       	sbiw	r26, 0x01	; 1
    75dc:	80 68       	ori	r24, 0x80	; 128
    75de:	11 96       	adiw	r26, 0x01	; 1
    75e0:	8c 93       	st	X, r24
    75e2:	11 97       	sbiw	r26, 0x01	; 1
    75e4:	18 e0       	ldi	r17, 0x08	; 8
    75e6:	1b c0       	rjmp	.+54     	; 0x761e <hal_enableCompareChannel+0xd4>
    75e8:	66 23       	and	r22, r22
    75ea:	21 f0       	breq	.+8      	; 0x75f4 <hal_enableCompareChannel+0xaa>
    75ec:	61 30       	cpi	r22, 0x01	; 1
    75ee:	09 f0       	breq	.+2      	; 0x75f2 <hal_enableCompareChannel+0xa8>
    75f0:	b7 c0       	rjmp	.+366    	; 0x7760 <hal_enableCompareChannel+0x216>
    75f2:	0b c0       	rjmp	.+22     	; 0x760a <hal_enableCompareChannel+0xc0>
    75f4:	a6 81       	ldd	r26, Z+6	; 0x06
    75f6:	b7 81       	ldd	r27, Z+7	; 0x07
    75f8:	11 96       	adiw	r26, 0x01	; 1
    75fa:	8c 91       	ld	r24, X
    75fc:	11 97       	sbiw	r26, 0x01	; 1
    75fe:	80 61       	ori	r24, 0x10	; 16
    7600:	11 96       	adiw	r26, 0x01	; 1
    7602:	8c 93       	st	X, r24
    7604:	11 97       	sbiw	r26, 0x01	; 1
    7606:	10 e1       	ldi	r17, 0x10	; 16
    7608:	0a c0       	rjmp	.+20     	; 0x761e <hal_enableCompareChannel+0xd4>
    760a:	a6 81       	ldd	r26, Z+6	; 0x06
    760c:	b7 81       	ldd	r27, Z+7	; 0x07
    760e:	11 96       	adiw	r26, 0x01	; 1
    7610:	8c 91       	ld	r24, X
    7612:	11 97       	sbiw	r26, 0x01	; 1
    7614:	80 62       	ori	r24, 0x20	; 32
    7616:	11 96       	adiw	r26, 0x01	; 1
    7618:	8c 93       	st	X, r24
    761a:	11 97       	sbiw	r26, 0x01	; 1
    761c:	10 e2       	ldi	r17, 0x20	; 32
    761e:	e0 81       	ld	r30, Z
    7620:	ea 50       	subi	r30, 0x0A	; 10
    7622:	ea 31       	cpi	r30, 0x1A	; 26
    7624:	28 f4       	brcc	.+10     	; 0x7630 <hal_enableCompareChannel+0xe6>
    7626:	f0 e0       	ldi	r31, 0x00	; 0
    7628:	eb 56       	subi	r30, 0x6B	; 107
    762a:	fc 4d       	sbci	r31, 0xDC	; 220
    762c:	90 81       	ld	r25, Z
    762e:	01 c0       	rjmp	.+2      	; 0x7632 <hal_enableCompareChannel+0xe8>
    7630:	92 e0       	ldi	r25, 0x02	; 2
    7632:	00 23       	and	r16, r16
    7634:	31 f0       	breq	.+12     	; 0x7642 <hal_enableCompareChannel+0xf8>
    7636:	1a 83       	std	Y+2, r17	; 0x02
    7638:	81 e0       	ldi	r24, 0x01	; 1
    763a:	8b 83       	std	Y+3, r24	; 0x03
    763c:	19 82       	std	Y+1, r1	; 0x01
    763e:	1d 82       	std	Y+5, r1	; 0x05
    7640:	04 c0       	rjmp	.+8      	; 0x764a <hal_enableCompareChannel+0x100>
    7642:	1a 82       	std	Y+2, r1	; 0x02
    7644:	19 83       	std	Y+1, r17	; 0x01
    7646:	84 e0       	ldi	r24, 0x04	; 4
    7648:	8c 83       	std	Y+4, r24	; 0x04
    764a:	89 2f       	mov	r24, r25
    764c:	29 81       	ldd	r18, Y+1	; 0x01
    764e:	3a 81       	ldd	r19, Y+2	; 0x02
    7650:	4b 81       	ldd	r20, Y+3	; 0x03
    7652:	5c 81       	ldd	r21, Y+4	; 0x04
    7654:	6d 81       	ldd	r22, Y+5	; 0x05
    7656:	98 87       	std	Y+8, r25	; 0x08
    7658:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    765c:	98 85       	ldd	r25, Y+8	; 0x08
    765e:	87 fd       	sbrc	r24, 7
    7660:	81 c0       	rjmp	.+258    	; 0x7764 <hal_enableCompareChannel+0x21a>
    7662:	00 23       	and	r16, r16
    7664:	09 f4       	brne	.+2      	; 0x7668 <hal_enableCompareChannel+0x11e>
    7666:	80 c0       	rjmp	.+256    	; 0x7768 <hal_enableCompareChannel+0x21e>
    7668:	95 30       	cpi	r25, 0x05	; 5
    766a:	09 f4       	brne	.+2      	; 0x766e <hal_enableCompareChannel+0x124>
    766c:	4d c0       	rjmp	.+154    	; 0x7708 <hal_enableCompareChannel+0x1be>
    766e:	96 30       	cpi	r25, 0x06	; 6
    7670:	80 f4       	brcc	.+32     	; 0x7692 <hal_enableCompareChannel+0x148>
    7672:	92 30       	cpi	r25, 0x02	; 2
    7674:	91 f1       	breq	.+100    	; 0x76da <hal_enableCompareChannel+0x190>
    7676:	93 30       	cpi	r25, 0x03	; 3
    7678:	30 f4       	brcc	.+12     	; 0x7686 <hal_enableCompareChannel+0x13c>
    767a:	99 23       	and	r25, r25
    767c:	e9 f0       	breq	.+58     	; 0x76b8 <hal_enableCompareChannel+0x16e>
    767e:	91 30       	cpi	r25, 0x01	; 1
    7680:	09 f0       	breq	.+2      	; 0x7684 <hal_enableCompareChannel+0x13a>
    7682:	72 c0       	rjmp	.+228    	; 0x7768 <hal_enableCompareChannel+0x21e>
    7684:	21 c0       	rjmp	.+66     	; 0x76c8 <hal_enableCompareChannel+0x17e>
    7686:	93 30       	cpi	r25, 0x03	; 3
    7688:	81 f1       	breq	.+96     	; 0x76ea <hal_enableCompareChannel+0x1a0>
    768a:	94 30       	cpi	r25, 0x04	; 4
    768c:	09 f0       	breq	.+2      	; 0x7690 <hal_enableCompareChannel+0x146>
    768e:	6c c0       	rjmp	.+216    	; 0x7768 <hal_enableCompareChannel+0x21e>
    7690:	34 c0       	rjmp	.+104    	; 0x76fa <hal_enableCompareChannel+0x1b0>
    7692:	98 30       	cpi	r25, 0x08	; 8
    7694:	09 f4       	brne	.+2      	; 0x7698 <hal_enableCompareChannel+0x14e>
    7696:	4d c0       	rjmp	.+154    	; 0x7732 <hal_enableCompareChannel+0x1e8>
    7698:	99 30       	cpi	r25, 0x09	; 9
    769a:	38 f4       	brcc	.+14     	; 0x76aa <hal_enableCompareChannel+0x160>
    769c:	96 30       	cpi	r25, 0x06	; 6
    769e:	09 f4       	brne	.+2      	; 0x76a2 <hal_enableCompareChannel+0x158>
    76a0:	3a c0       	rjmp	.+116    	; 0x7716 <hal_enableCompareChannel+0x1cc>
    76a2:	97 30       	cpi	r25, 0x07	; 7
    76a4:	09 f0       	breq	.+2      	; 0x76a8 <hal_enableCompareChannel+0x15e>
    76a6:	60 c0       	rjmp	.+192    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76a8:	3d c0       	rjmp	.+122    	; 0x7724 <hal_enableCompareChannel+0x1da>
    76aa:	99 30       	cpi	r25, 0x09	; 9
    76ac:	09 f4       	brne	.+2      	; 0x76b0 <hal_enableCompareChannel+0x166>
    76ae:	48 c0       	rjmp	.+144    	; 0x7740 <hal_enableCompareChannel+0x1f6>
    76b0:	9a 30       	cpi	r25, 0x0A	; 10
    76b2:	09 f0       	breq	.+2      	; 0x76b6 <hal_enableCompareChannel+0x16c>
    76b4:	59 c0       	rjmp	.+178    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76b6:	4b c0       	rjmp	.+150    	; 0x774e <hal_enableCompareChannel+0x204>
    76b8:	80 91 00 06 	lds	r24, 0x0600
    76bc:	81 23       	and	r24, r17
    76be:	09 f4       	brne	.+2      	; 0x76c2 <hal_enableCompareChannel+0x178>
    76c0:	53 c0       	rjmp	.+166    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76c2:	e0 e0       	ldi	r30, 0x00	; 0
    76c4:	f6 e0       	ldi	r31, 0x06	; 6
    76c6:	07 c0       	rjmp	.+14     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    76c8:	80 91 20 06 	lds	r24, 0x0620
    76cc:	81 23       	and	r24, r17
    76ce:	09 f4       	brne	.+2      	; 0x76d2 <hal_enableCompareChannel+0x188>
    76d0:	4b c0       	rjmp	.+150    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76d2:	e0 e2       	ldi	r30, 0x20	; 32
    76d4:	f6 e0       	ldi	r31, 0x06	; 6
    76d6:	16 83       	std	Z+6, r17	; 0x06
    76d8:	47 c0       	rjmp	.+142    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76da:	80 91 40 06 	lds	r24, 0x0640
    76de:	81 23       	and	r24, r17
    76e0:	09 f4       	brne	.+2      	; 0x76e4 <hal_enableCompareChannel+0x19a>
    76e2:	42 c0       	rjmp	.+132    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76e4:	e0 e4       	ldi	r30, 0x40	; 64
    76e6:	f6 e0       	ldi	r31, 0x06	; 6
    76e8:	f6 cf       	rjmp	.-20     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    76ea:	80 91 60 06 	lds	r24, 0x0660
    76ee:	81 23       	and	r24, r17
    76f0:	09 f4       	brne	.+2      	; 0x76f4 <hal_enableCompareChannel+0x1aa>
    76f2:	3a c0       	rjmp	.+116    	; 0x7768 <hal_enableCompareChannel+0x21e>
    76f4:	e0 e6       	ldi	r30, 0x60	; 96
    76f6:	f6 e0       	ldi	r31, 0x06	; 6
    76f8:	ee cf       	rjmp	.-36     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    76fa:	80 91 80 06 	lds	r24, 0x0680
    76fe:	81 23       	and	r24, r17
    7700:	99 f1       	breq	.+102    	; 0x7768 <hal_enableCompareChannel+0x21e>
    7702:	e0 e8       	ldi	r30, 0x80	; 128
    7704:	f6 e0       	ldi	r31, 0x06	; 6
    7706:	e7 cf       	rjmp	.-50     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    7708:	80 91 a0 06 	lds	r24, 0x06A0
    770c:	81 23       	and	r24, r17
    770e:	61 f1       	breq	.+88     	; 0x7768 <hal_enableCompareChannel+0x21e>
    7710:	e0 ea       	ldi	r30, 0xA0	; 160
    7712:	f6 e0       	ldi	r31, 0x06	; 6
    7714:	e0 cf       	rjmp	.-64     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    7716:	80 91 e0 06 	lds	r24, 0x06E0
    771a:	81 23       	and	r24, r17
    771c:	29 f1       	breq	.+74     	; 0x7768 <hal_enableCompareChannel+0x21e>
    771e:	e0 ee       	ldi	r30, 0xE0	; 224
    7720:	f6 e0       	ldi	r31, 0x06	; 6
    7722:	d9 cf       	rjmp	.-78     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    7724:	80 91 00 07 	lds	r24, 0x0700
    7728:	81 23       	and	r24, r17
    772a:	f1 f0       	breq	.+60     	; 0x7768 <hal_enableCompareChannel+0x21e>
    772c:	e0 e0       	ldi	r30, 0x00	; 0
    772e:	f7 e0       	ldi	r31, 0x07	; 7
    7730:	d2 cf       	rjmp	.-92     	; 0x76d6 <hal_enableCompareChannel+0x18c>
    7732:	80 91 20 07 	lds	r24, 0x0720
    7736:	81 23       	and	r24, r17
    7738:	b9 f0       	breq	.+46     	; 0x7768 <hal_enableCompareChannel+0x21e>
    773a:	e0 e2       	ldi	r30, 0x20	; 32
    773c:	f7 e0       	ldi	r31, 0x07	; 7
    773e:	cb cf       	rjmp	.-106    	; 0x76d6 <hal_enableCompareChannel+0x18c>
    7740:	80 91 c0 07 	lds	r24, 0x07C0
    7744:	81 23       	and	r24, r17
    7746:	81 f0       	breq	.+32     	; 0x7768 <hal_enableCompareChannel+0x21e>
    7748:	e0 ec       	ldi	r30, 0xC0	; 192
    774a:	f7 e0       	ldi	r31, 0x07	; 7
    774c:	c4 cf       	rjmp	.-120    	; 0x76d6 <hal_enableCompareChannel+0x18c>
    774e:	80 91 e0 07 	lds	r24, 0x07E0
    7752:	81 23       	and	r24, r17
    7754:	49 f0       	breq	.+18     	; 0x7768 <hal_enableCompareChannel+0x21e>
    7756:	e0 ee       	ldi	r30, 0xE0	; 224
    7758:	f7 e0       	ldi	r31, 0x07	; 7
    775a:	bd cf       	rjmp	.-134    	; 0x76d6 <hal_enableCompareChannel+0x18c>
    775c:	8b ef       	ldi	r24, 0xFB	; 251
    775e:	05 c0       	rjmp	.+10     	; 0x776a <hal_enableCompareChannel+0x220>
    7760:	8a ef       	ldi	r24, 0xFA	; 250
    7762:	03 c0       	rjmp	.+6      	; 0x776a <hal_enableCompareChannel+0x220>
    7764:	81 ef       	ldi	r24, 0xF1	; 241
    7766:	01 c0       	rjmp	.+2      	; 0x776a <hal_enableCompareChannel+0x220>
    7768:	80 e0       	ldi	r24, 0x00	; 0
    776a:	28 96       	adiw	r28, 0x08	; 8
    776c:	cd bf       	out	0x3d, r28	; 61
    776e:	de bf       	out	0x3e, r29	; 62
    7770:	df 91       	pop	r29
    7772:	cf 91       	pop	r28
    7774:	1f 91       	pop	r17
    7776:	0f 91       	pop	r16
    7778:	08 95       	ret

0000777a <hal_disableCompareChannel>:
    777a:	cf 93       	push	r28
    777c:	df 93       	push	r29
    777e:	cd b7       	in	r28, 0x3d	; 61
    7780:	de b7       	in	r29, 0x3e	; 62
    7782:	27 97       	sbiw	r28, 0x07	; 7
    7784:	cd bf       	out	0x3d, r28	; 61
    7786:	de bf       	out	0x3e, r29	; 62
    7788:	8e 83       	std	Y+6, r24	; 0x06
    778a:	9f 83       	std	Y+7, r25	; 0x07
    778c:	ee 81       	ldd	r30, Y+6	; 0x06
    778e:	ff 81       	ldd	r31, Y+7	; 0x07
    7790:	80 91 87 23 	lds	r24, 0x2387
    7794:	90 91 88 23 	lds	r25, 0x2388
    7798:	24 81       	ldd	r18, Z+4	; 0x04
    779a:	35 81       	ldd	r19, Z+5	; 0x05
    779c:	28 17       	cp	r18, r24
    779e:	39 07       	cpc	r19, r25
    77a0:	09 f0       	breq	.+2      	; 0x77a4 <hal_disableCompareChannel+0x2a>
    77a2:	57 c0       	rjmp	.+174    	; 0x7852 <hal_disableCompareChannel+0xd8>
    77a4:	ee 81       	ldd	r30, Y+6	; 0x06
    77a6:	ff 81       	ldd	r31, Y+7	; 0x07
    77a8:	a0 81       	ld	r26, Z
    77aa:	b1 81       	ldd	r27, Z+1	; 0x01
    77ac:	14 96       	adiw	r26, 0x04	; 4
    77ae:	ed 91       	ld	r30, X+
    77b0:	fc 91       	ld	r31, X
    77b2:	15 97       	sbiw	r26, 0x05	; 5
    77b4:	30 97       	sbiw	r30, 0x00	; 0
    77b6:	f1 f0       	breq	.+60     	; 0x77f4 <hal_disableCompareChannel+0x7a>
    77b8:	61 30       	cpi	r22, 0x01	; 1
    77ba:	69 f0       	breq	.+26     	; 0x77d6 <hal_disableCompareChannel+0x5c>
    77bc:	61 30       	cpi	r22, 0x01	; 1
    77be:	30 f0       	brcs	.+12     	; 0x77cc <hal_disableCompareChannel+0x52>
    77c0:	62 30       	cpi	r22, 0x02	; 2
    77c2:	71 f0       	breq	.+28     	; 0x77e0 <hal_disableCompareChannel+0x66>
    77c4:	63 30       	cpi	r22, 0x03	; 3
    77c6:	09 f0       	breq	.+2      	; 0x77ca <hal_disableCompareChannel+0x50>
    77c8:	46 c0       	rjmp	.+140    	; 0x7856 <hal_disableCompareChannel+0xdc>
    77ca:	0f c0       	rjmp	.+30     	; 0x77ea <hal_disableCompareChannel+0x70>
    77cc:	81 81       	ldd	r24, Z+1	; 0x01
    77ce:	8f 7e       	andi	r24, 0xEF	; 239
    77d0:	81 83       	std	Z+1, r24	; 0x01
    77d2:	21 e0       	ldi	r18, 0x01	; 1
    77d4:	25 c0       	rjmp	.+74     	; 0x7820 <hal_disableCompareChannel+0xa6>
    77d6:	81 81       	ldd	r24, Z+1	; 0x01
    77d8:	8f 7d       	andi	r24, 0xDF	; 223
    77da:	81 83       	std	Z+1, r24	; 0x01
    77dc:	22 e0       	ldi	r18, 0x02	; 2
    77de:	20 c0       	rjmp	.+64     	; 0x7820 <hal_disableCompareChannel+0xa6>
    77e0:	81 81       	ldd	r24, Z+1	; 0x01
    77e2:	8f 7b       	andi	r24, 0xBF	; 191
    77e4:	81 83       	std	Z+1, r24	; 0x01
    77e6:	24 e0       	ldi	r18, 0x04	; 4
    77e8:	1b c0       	rjmp	.+54     	; 0x7820 <hal_disableCompareChannel+0xa6>
    77ea:	81 81       	ldd	r24, Z+1	; 0x01
    77ec:	8f 77       	andi	r24, 0x7F	; 127
    77ee:	81 83       	std	Z+1, r24	; 0x01
    77f0:	28 e0       	ldi	r18, 0x08	; 8
    77f2:	16 c0       	rjmp	.+44     	; 0x7820 <hal_disableCompareChannel+0xa6>
    77f4:	66 23       	and	r22, r22
    77f6:	19 f0       	breq	.+6      	; 0x77fe <hal_disableCompareChannel+0x84>
    77f8:	61 30       	cpi	r22, 0x01	; 1
    77fa:	69 f5       	brne	.+90     	; 0x7856 <hal_disableCompareChannel+0xdc>
    77fc:	09 c0       	rjmp	.+18     	; 0x7810 <hal_disableCompareChannel+0x96>
    77fe:	16 96       	adiw	r26, 0x06	; 6
    7800:	ed 91       	ld	r30, X+
    7802:	fc 91       	ld	r31, X
    7804:	17 97       	sbiw	r26, 0x07	; 7
    7806:	81 81       	ldd	r24, Z+1	; 0x01
    7808:	8f 7e       	andi	r24, 0xEF	; 239
    780a:	81 83       	std	Z+1, r24	; 0x01
    780c:	20 e1       	ldi	r18, 0x10	; 16
    780e:	08 c0       	rjmp	.+16     	; 0x7820 <hal_disableCompareChannel+0xa6>
    7810:	16 96       	adiw	r26, 0x06	; 6
    7812:	ed 91       	ld	r30, X+
    7814:	fc 91       	ld	r31, X
    7816:	17 97       	sbiw	r26, 0x07	; 7
    7818:	81 81       	ldd	r24, Z+1	; 0x01
    781a:	8f 7d       	andi	r24, 0xDF	; 223
    781c:	81 83       	std	Z+1, r24	; 0x01
    781e:	20 e2       	ldi	r18, 0x20	; 32
    7820:	ec 91       	ld	r30, X
    7822:	ea 50       	subi	r30, 0x0A	; 10
    7824:	ea 31       	cpi	r30, 0x1A	; 26
    7826:	28 f4       	brcc	.+10     	; 0x7832 <hal_disableCompareChannel+0xb8>
    7828:	f0 e0       	ldi	r31, 0x00	; 0
    782a:	e1 55       	subi	r30, 0x51	; 81
    782c:	fc 4d       	sbci	r31, 0xDC	; 220
    782e:	80 81       	ld	r24, Z
    7830:	01 c0       	rjmp	.+2      	; 0x7834 <hal_disableCompareChannel+0xba>
    7832:	82 e0       	ldi	r24, 0x02	; 2
    7834:	29 83       	std	Y+1, r18	; 0x01
    7836:	1a 82       	std	Y+2, r1	; 0x02
    7838:	1b 82       	std	Y+3, r1	; 0x03
    783a:	94 e0       	ldi	r25, 0x04	; 4
    783c:	9c 83       	std	Y+4, r25	; 0x04
    783e:	30 e0       	ldi	r19, 0x00	; 0
    7840:	40 e0       	ldi	r20, 0x00	; 0
    7842:	54 e0       	ldi	r21, 0x04	; 4
    7844:	6d 81       	ldd	r22, Y+5	; 0x05
    7846:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
    784a:	87 ff       	sbrs	r24, 7
    784c:	06 c0       	rjmp	.+12     	; 0x785a <hal_disableCompareChannel+0xe0>
    784e:	81 ef       	ldi	r24, 0xF1	; 241
    7850:	05 c0       	rjmp	.+10     	; 0x785c <hal_disableCompareChannel+0xe2>
    7852:	8b ef       	ldi	r24, 0xFB	; 251
    7854:	03 c0       	rjmp	.+6      	; 0x785c <hal_disableCompareChannel+0xe2>
    7856:	8a ef       	ldi	r24, 0xFA	; 250
    7858:	01 c0       	rjmp	.+2      	; 0x785c <hal_disableCompareChannel+0xe2>
    785a:	80 e0       	ldi	r24, 0x00	; 0
    785c:	27 96       	adiw	r28, 0x07	; 7
    785e:	cd bf       	out	0x3d, r28	; 61
    7860:	de bf       	out	0x3e, r29	; 62
    7862:	df 91       	pop	r29
    7864:	cf 91       	pop	r28
    7866:	08 95       	ret

00007868 <hal_requestWdAccess>:
    7868:	cf 93       	push	r28
    786a:	df 93       	push	r29
    786c:	00 d0       	rcall	.+0      	; 0x786e <hal_requestWdAccess+0x6>
    786e:	cd b7       	in	r28, 0x3d	; 61
    7870:	de b7       	in	r29, 0x3e	; 62
    7872:	8f b7       	in	r24, 0x3f	; 63
    7874:	89 83       	std	Y+1, r24	; 0x01
    7876:	f8 94       	cli
    7878:	e0 91 c9 23 	lds	r30, 0x23C9
    787c:	f0 91 ca 23 	lds	r31, 0x23CA
    7880:	82 81       	ldd	r24, Z+2	; 0x02
    7882:	93 81       	ldd	r25, Z+3	; 0x03
    7884:	00 97       	sbiw	r24, 0x00	; 0
    7886:	11 f5       	brne	.+68     	; 0x78cc <hal_requestWdAccess+0x64>
    7888:	85 e0       	ldi	r24, 0x05	; 5
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
    7890:	8a 83       	std	Y+2, r24	; 0x02
    7892:	9b 83       	std	Y+3, r25	; 0x03
    7894:	8a 81       	ldd	r24, Y+2	; 0x02
    7896:	9b 81       	ldd	r25, Y+3	; 0x03
    7898:	97 fd       	sbrc	r25, 7
    789a:	1d c0       	rjmp	.+58     	; 0x78d6 <hal_requestWdAccess+0x6e>
    789c:	ea 81       	ldd	r30, Y+2	; 0x02
    789e:	fb 81       	ldd	r31, Y+3	; 0x03
    78a0:	01 90       	ld	r0, Z+
    78a2:	f0 81       	ld	r31, Z
    78a4:	e0 2d       	mov	r30, r0
    78a6:	10 82       	st	Z, r1
    78a8:	11 82       	std	Z+1, r1	; 0x01
    78aa:	12 82       	std	Z+2, r1	; 0x02
    78ac:	13 82       	std	Z+3, r1	; 0x03
    78ae:	14 82       	std	Z+4, r1	; 0x04
    78b0:	80 91 c9 23 	lds	r24, 0x23C9
    78b4:	90 91 ca 23 	lds	r25, 0x23CA
    78b8:	6a 81       	ldd	r22, Y+2	; 0x02
    78ba:	7b 81       	ldd	r23, Y+3	; 0x03
    78bc:	41 e0       	ldi	r20, 0x01	; 1
    78be:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
    78c2:	89 81       	ldd	r24, Y+1	; 0x01
    78c4:	8f bf       	out	0x3f, r24	; 63
    78c6:	8a 81       	ldd	r24, Y+2	; 0x02
    78c8:	9b 81       	ldd	r25, Y+3	; 0x03
    78ca:	07 c0       	rjmp	.+14     	; 0x78da <hal_requestWdAccess+0x72>
    78cc:	89 81       	ldd	r24, Y+1	; 0x01
    78ce:	8f bf       	out	0x3f, r24	; 63
    78d0:	8d ef       	ldi	r24, 0xFD	; 253
    78d2:	9f ef       	ldi	r25, 0xFF	; 255
    78d4:	02 c0       	rjmp	.+4      	; 0x78da <hal_requestWdAccess+0x72>
    78d6:	8f ef       	ldi	r24, 0xFF	; 255
    78d8:	9f ef       	ldi	r25, 0xFF	; 255
    78da:	23 96       	adiw	r28, 0x03	; 3
    78dc:	cd bf       	out	0x3d, r28	; 61
    78de:	de bf       	out	0x3e, r29	; 62
    78e0:	df 91       	pop	r29
    78e2:	cf 91       	pop	r28
    78e4:	08 95       	ret

000078e6 <hal_releaseWdAccess>:
    78e6:	cf 93       	push	r28
    78e8:	df 93       	push	r29
    78ea:	00 d0       	rcall	.+0      	; 0x78ec <hal_releaseWdAccess+0x6>
    78ec:	cd b7       	in	r28, 0x3d	; 61
    78ee:	de b7       	in	r29, 0x3e	; 62
    78f0:	8a 83       	std	Y+2, r24	; 0x02
    78f2:	9b 83       	std	Y+3, r25	; 0x03
    78f4:	8f b7       	in	r24, 0x3f	; 63
    78f6:	89 83       	std	Y+1, r24	; 0x01
    78f8:	f8 94       	cli
    78fa:	ea 81       	ldd	r30, Y+2	; 0x02
    78fc:	fb 81       	ldd	r31, Y+3	; 0x03
    78fe:	80 91 c9 23 	lds	r24, 0x23C9
    7902:	90 91 ca 23 	lds	r25, 0x23CA
    7906:	24 81       	ldd	r18, Z+4	; 0x04
    7908:	35 81       	ldd	r19, Z+5	; 0x05
    790a:	28 17       	cp	r18, r24
    790c:	39 07       	cpc	r19, r25
    790e:	21 f0       	breq	.+8      	; 0x7918 <hal_releaseWdAccess+0x32>
    7910:	89 81       	ldd	r24, Y+1	; 0x01
    7912:	8f bf       	out	0x3f, r24	; 63
    7914:	8e ef       	ldi	r24, 0xFE	; 254
    7916:	11 c0       	rjmp	.+34     	; 0x793a <hal_releaseWdAccess+0x54>
    7918:	8a 81       	ldd	r24, Y+2	; 0x02
    791a:	9b 81       	ldd	r25, Y+3	; 0x03
    791c:	88 ed       	ldi	r24, 0xD8	; 216
    791e:	84 bf       	out	0x34, r24	; 52
    7920:	10 92 80 00 	sts	0x0080, r1
    7924:	80 91 c9 23 	lds	r24, 0x23C9
    7928:	90 91 ca 23 	lds	r25, 0x23CA
    792c:	6a 81       	ldd	r22, Y+2	; 0x02
    792e:	7b 81       	ldd	r23, Y+3	; 0x03
    7930:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
    7934:	89 81       	ldd	r24, Y+1	; 0x01
    7936:	8f bf       	out	0x3f, r24	; 63
    7938:	80 e0       	ldi	r24, 0x00	; 0
    793a:	23 96       	adiw	r28, 0x03	; 3
    793c:	cd bf       	out	0x3d, r28	; 61
    793e:	de bf       	out	0x3e, r29	; 62
    7940:	df 91       	pop	r29
    7942:	cf 91       	pop	r28
    7944:	08 95       	ret

00007946 <hal_configureWd>:
    7946:	cf 93       	push	r28
    7948:	df 93       	push	r29
    794a:	00 d0       	rcall	.+0      	; 0x794c <hal_configureWd+0x6>
    794c:	cd b7       	in	r28, 0x3d	; 61
    794e:	de b7       	in	r29, 0x3e	; 62
    7950:	8a 83       	std	Y+2, r24	; 0x02
    7952:	9b 83       	std	Y+3, r25	; 0x03
    7954:	ca 01       	movw	r24, r20
    7956:	db 01       	movw	r26, r22
    7958:	2f b7       	in	r18, 0x3f	; 63
    795a:	29 83       	std	Y+1, r18	; 0x01
    795c:	f8 94       	cli
    795e:	89 30       	cpi	r24, 0x09	; 9
    7960:	91 05       	cpc	r25, r1
    7962:	a1 05       	cpc	r26, r1
    7964:	b1 05       	cpc	r27, r1
    7966:	08 f4       	brcc	.+2      	; 0x796a <hal_configureWd+0x24>
    7968:	47 c0       	rjmp	.+142    	; 0x79f8 <hal_configureWd+0xb2>
    796a:	81 31       	cpi	r24, 0x11	; 17
    796c:	91 05       	cpc	r25, r1
    796e:	a1 05       	cpc	r26, r1
    7970:	b1 05       	cpc	r27, r1
    7972:	08 f4       	brcc	.+2      	; 0x7976 <hal_configureWd+0x30>
    7974:	43 c0       	rjmp	.+134    	; 0x79fc <hal_configureWd+0xb6>
    7976:	81 32       	cpi	r24, 0x21	; 33
    7978:	91 05       	cpc	r25, r1
    797a:	a1 05       	cpc	r26, r1
    797c:	b1 05       	cpc	r27, r1
    797e:	08 f4       	brcc	.+2      	; 0x7982 <hal_configureWd+0x3c>
    7980:	3f c0       	rjmp	.+126    	; 0x7a00 <hal_configureWd+0xba>
    7982:	81 34       	cpi	r24, 0x41	; 65
    7984:	91 05       	cpc	r25, r1
    7986:	a1 05       	cpc	r26, r1
    7988:	b1 05       	cpc	r27, r1
    798a:	e0 f1       	brcs	.+120    	; 0x7a04 <hal_configureWd+0xbe>
    798c:	8e 37       	cpi	r24, 0x7E	; 126
    798e:	91 05       	cpc	r25, r1
    7990:	a1 05       	cpc	r26, r1
    7992:	b1 05       	cpc	r27, r1
    7994:	c8 f1       	brcs	.+114    	; 0x7a08 <hal_configureWd+0xc2>
    7996:	8b 3f       	cpi	r24, 0xFB	; 251
    7998:	91 05       	cpc	r25, r1
    799a:	a1 05       	cpc	r26, r1
    799c:	b1 05       	cpc	r27, r1
    799e:	b0 f1       	brcs	.+108    	; 0x7a0c <hal_configureWd+0xc6>
    79a0:	85 3f       	cpi	r24, 0xF5	; 245
    79a2:	21 e0       	ldi	r18, 0x01	; 1
    79a4:	92 07       	cpc	r25, r18
    79a6:	20 e0       	ldi	r18, 0x00	; 0
    79a8:	a2 07       	cpc	r26, r18
    79aa:	20 e0       	ldi	r18, 0x00	; 0
    79ac:	b2 07       	cpc	r27, r18
    79ae:	80 f1       	brcs	.+96     	; 0x7a10 <hal_configureWd+0xca>
    79b0:	89 3e       	cpi	r24, 0xE9	; 233
    79b2:	23 e0       	ldi	r18, 0x03	; 3
    79b4:	92 07       	cpc	r25, r18
    79b6:	20 e0       	ldi	r18, 0x00	; 0
    79b8:	a2 07       	cpc	r26, r18
    79ba:	20 e0       	ldi	r18, 0x00	; 0
    79bc:	b2 07       	cpc	r27, r18
    79be:	50 f1       	brcs	.+84     	; 0x7a14 <hal_configureWd+0xce>
    79c0:	81 3d       	cpi	r24, 0xD1	; 209
    79c2:	27 e0       	ldi	r18, 0x07	; 7
    79c4:	92 07       	cpc	r25, r18
    79c6:	20 e0       	ldi	r18, 0x00	; 0
    79c8:	a2 07       	cpc	r26, r18
    79ca:	20 e0       	ldi	r18, 0x00	; 0
    79cc:	b2 07       	cpc	r27, r18
    79ce:	20 f1       	brcs	.+72     	; 0x7a18 <hal_configureWd+0xd2>
    79d0:	81 3a       	cpi	r24, 0xA1	; 161
    79d2:	2f e0       	ldi	r18, 0x0F	; 15
    79d4:	92 07       	cpc	r25, r18
    79d6:	20 e0       	ldi	r18, 0x00	; 0
    79d8:	a2 07       	cpc	r26, r18
    79da:	20 e0       	ldi	r18, 0x00	; 0
    79dc:	b2 07       	cpc	r27, r18
    79de:	f0 f0       	brcs	.+60     	; 0x7a1c <hal_configureWd+0xd6>
    79e0:	81 34       	cpi	r24, 0x41	; 65
    79e2:	2f e1       	ldi	r18, 0x1F	; 31
    79e4:	92 07       	cpc	r25, r18
    79e6:	20 e0       	ldi	r18, 0x00	; 0
    79e8:	a2 07       	cpc	r26, r18
    79ea:	20 e0       	ldi	r18, 0x00	; 0
    79ec:	b2 07       	cpc	r27, r18
    79ee:	c0 f0       	brcs	.+48     	; 0x7a20 <hal_configureWd+0xda>
    79f0:	89 81       	ldd	r24, Y+1	; 0x01
    79f2:	8f bf       	out	0x3f, r24	; 63
    79f4:	8c ef       	ldi	r24, 0xFC	; 252
    79f6:	3e c0       	rjmp	.+124    	; 0x7a74 <hal_configureWd+0x12e>
    79f8:	60 e0       	ldi	r22, 0x00	; 0
    79fa:	13 c0       	rjmp	.+38     	; 0x7a22 <hal_configureWd+0xdc>
    79fc:	64 e0       	ldi	r22, 0x04	; 4
    79fe:	11 c0       	rjmp	.+34     	; 0x7a22 <hal_configureWd+0xdc>
    7a00:	68 e0       	ldi	r22, 0x08	; 8
    7a02:	0f c0       	rjmp	.+30     	; 0x7a22 <hal_configureWd+0xdc>
    7a04:	6c e0       	ldi	r22, 0x0C	; 12
    7a06:	0d c0       	rjmp	.+26     	; 0x7a22 <hal_configureWd+0xdc>
    7a08:	60 e1       	ldi	r22, 0x10	; 16
    7a0a:	0b c0       	rjmp	.+22     	; 0x7a22 <hal_configureWd+0xdc>
    7a0c:	64 e1       	ldi	r22, 0x14	; 20
    7a0e:	09 c0       	rjmp	.+18     	; 0x7a22 <hal_configureWd+0xdc>
    7a10:	68 e1       	ldi	r22, 0x18	; 24
    7a12:	07 c0       	rjmp	.+14     	; 0x7a22 <hal_configureWd+0xdc>
    7a14:	6c e1       	ldi	r22, 0x1C	; 28
    7a16:	05 c0       	rjmp	.+10     	; 0x7a22 <hal_configureWd+0xdc>
    7a18:	60 e2       	ldi	r22, 0x20	; 32
    7a1a:	03 c0       	rjmp	.+6      	; 0x7a22 <hal_configureWd+0xdc>
    7a1c:	64 e2       	ldi	r22, 0x24	; 36
    7a1e:	01 c0       	rjmp	.+2      	; 0x7a22 <hal_configureWd+0xdc>
    7a20:	68 e2       	ldi	r22, 0x28	; 40
    7a22:	ea 81       	ldd	r30, Y+2	; 0x02
    7a24:	fb 81       	ldd	r31, Y+3	; 0x03
    7a26:	40 91 c9 23 	lds	r20, 0x23C9
    7a2a:	50 91 ca 23 	lds	r21, 0x23CA
    7a2e:	24 81       	ldd	r18, Z+4	; 0x04
    7a30:	35 81       	ldd	r19, Z+5	; 0x05
    7a32:	24 17       	cp	r18, r20
    7a34:	35 07       	cpc	r19, r21
    7a36:	21 f0       	breq	.+8      	; 0x7a40 <hal_configureWd+0xfa>
    7a38:	89 81       	ldd	r24, Y+1	; 0x01
    7a3a:	8f bf       	out	0x3f, r24	; 63
    7a3c:	8e ef       	ldi	r24, 0xFE	; 254
    7a3e:	1a c0       	rjmp	.+52     	; 0x7a74 <hal_configureWd+0x12e>
    7a40:	ea 81       	ldd	r30, Y+2	; 0x02
    7a42:	fb 81       	ldd	r31, Y+3	; 0x03
    7a44:	01 90       	ld	r0, Z+
    7a46:	f0 81       	ld	r31, Z
    7a48:	e0 2d       	mov	r30, r0
    7a4a:	28 ed       	ldi	r18, 0xD8	; 216
    7a4c:	24 bf       	out	0x34, r18	; 52
    7a4e:	10 92 80 00 	sts	0x0080, r1
    7a52:	63 60       	ori	r22, 0x03	; 3
    7a54:	24 bf       	out	0x34, r18	; 52
    7a56:	60 93 80 00 	sts	0x0080, r22
    7a5a:	81 83       	std	Z+1, r24	; 0x01
    7a5c:	92 83       	std	Z+2, r25	; 0x02
    7a5e:	a3 83       	std	Z+3, r26	; 0x03
    7a60:	b4 83       	std	Z+4, r27	; 0x04
    7a62:	81 e0       	ldi	r24, 0x01	; 1
    7a64:	80 83       	st	Z, r24
    7a66:	80 91 82 00 	lds	r24, 0x0082
    7a6a:	80 fd       	sbrc	r24, 0
    7a6c:	fc cf       	rjmp	.-8      	; 0x7a66 <hal_configureWd+0x120>
    7a6e:	89 81       	ldd	r24, Y+1	; 0x01
    7a70:	8f bf       	out	0x3f, r24	; 63
    7a72:	80 e0       	ldi	r24, 0x00	; 0
    7a74:	23 96       	adiw	r28, 0x03	; 3
    7a76:	cd bf       	out	0x3d, r28	; 61
    7a78:	de bf       	out	0x3e, r29	; 62
    7a7a:	df 91       	pop	r29
    7a7c:	cf 91       	pop	r28
    7a7e:	08 95       	ret

00007a80 <hal_wdDisable>:
    7a80:	cf 93       	push	r28
    7a82:	df 93       	push	r29
    7a84:	00 d0       	rcall	.+0      	; 0x7a86 <hal_wdDisable+0x6>
    7a86:	cd b7       	in	r28, 0x3d	; 61
    7a88:	de b7       	in	r29, 0x3e	; 62
    7a8a:	8a 83       	std	Y+2, r24	; 0x02
    7a8c:	9b 83       	std	Y+3, r25	; 0x03
    7a8e:	8f b7       	in	r24, 0x3f	; 63
    7a90:	89 83       	std	Y+1, r24	; 0x01
    7a92:	f8 94       	cli
    7a94:	ea 81       	ldd	r30, Y+2	; 0x02
    7a96:	fb 81       	ldd	r31, Y+3	; 0x03
    7a98:	80 91 c9 23 	lds	r24, 0x23C9
    7a9c:	90 91 ca 23 	lds	r25, 0x23CA
    7aa0:	24 81       	ldd	r18, Z+4	; 0x04
    7aa2:	35 81       	ldd	r19, Z+5	; 0x05
    7aa4:	28 17       	cp	r18, r24
    7aa6:	39 07       	cpc	r19, r25
    7aa8:	21 f0       	breq	.+8      	; 0x7ab2 <hal_wdDisable+0x32>
    7aaa:	89 81       	ldd	r24, Y+1	; 0x01
    7aac:	8f bf       	out	0x3f, r24	; 63
    7aae:	8e ef       	ldi	r24, 0xFE	; 254
    7ab0:	0c c0       	rjmp	.+24     	; 0x7aca <hal_wdDisable+0x4a>
    7ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    7ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    7ab6:	88 ed       	ldi	r24, 0xD8	; 216
    7ab8:	84 bf       	out	0x34, r24	; 52
    7aba:	80 91 80 00 	lds	r24, 0x0080
    7abe:	8d 7f       	andi	r24, 0xFD	; 253
    7ac0:	80 93 80 00 	sts	0x0080, r24
    7ac4:	89 81       	ldd	r24, Y+1	; 0x01
    7ac6:	8f bf       	out	0x3f, r24	; 63
    7ac8:	80 e0       	ldi	r24, 0x00	; 0
    7aca:	23 96       	adiw	r28, 0x03	; 3
    7acc:	cd bf       	out	0x3d, r28	; 61
    7ace:	de bf       	out	0x3e, r29	; 62
    7ad0:	df 91       	pop	r29
    7ad2:	cf 91       	pop	r28
    7ad4:	08 95       	ret

00007ad6 <hal_wdEnable>:
    7ad6:	cf 93       	push	r28
    7ad8:	df 93       	push	r29
    7ada:	00 d0       	rcall	.+0      	; 0x7adc <hal_wdEnable+0x6>
    7adc:	cd b7       	in	r28, 0x3d	; 61
    7ade:	de b7       	in	r29, 0x3e	; 62
    7ae0:	8a 83       	std	Y+2, r24	; 0x02
    7ae2:	9b 83       	std	Y+3, r25	; 0x03
    7ae4:	8f b7       	in	r24, 0x3f	; 63
    7ae6:	89 83       	std	Y+1, r24	; 0x01
    7ae8:	f8 94       	cli
    7aea:	ea 81       	ldd	r30, Y+2	; 0x02
    7aec:	fb 81       	ldd	r31, Y+3	; 0x03
    7aee:	80 91 c9 23 	lds	r24, 0x23C9
    7af2:	90 91 ca 23 	lds	r25, 0x23CA
    7af6:	24 81       	ldd	r18, Z+4	; 0x04
    7af8:	35 81       	ldd	r19, Z+5	; 0x05
    7afa:	28 17       	cp	r18, r24
    7afc:	39 07       	cpc	r19, r25
    7afe:	21 f0       	breq	.+8      	; 0x7b08 <hal_wdEnable+0x32>
    7b00:	89 81       	ldd	r24, Y+1	; 0x01
    7b02:	8f bf       	out	0x3f, r24	; 63
    7b04:	8e ef       	ldi	r24, 0xFE	; 254
    7b06:	1a c0       	rjmp	.+52     	; 0x7b3c <hal_wdEnable+0x66>
    7b08:	ea 81       	ldd	r30, Y+2	; 0x02
    7b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    7b0c:	01 90       	ld	r0, Z+
    7b0e:	f0 81       	ld	r31, Z
    7b10:	e0 2d       	mov	r30, r0
    7b12:	80 81       	ld	r24, Z
    7b14:	88 23       	and	r24, r24
    7b16:	21 f4       	brne	.+8      	; 0x7b20 <hal_wdEnable+0x4a>
    7b18:	89 81       	ldd	r24, Y+1	; 0x01
    7b1a:	8f bf       	out	0x3f, r24	; 63
    7b1c:	8b ef       	ldi	r24, 0xFB	; 251
    7b1e:	0e c0       	rjmp	.+28     	; 0x7b3c <hal_wdEnable+0x66>
    7b20:	88 ed       	ldi	r24, 0xD8	; 216
    7b22:	84 bf       	out	0x34, r24	; 52
    7b24:	80 91 80 00 	lds	r24, 0x0080
    7b28:	83 60       	ori	r24, 0x03	; 3
    7b2a:	80 93 80 00 	sts	0x0080, r24
    7b2e:	80 91 82 00 	lds	r24, 0x0082
    7b32:	80 fd       	sbrc	r24, 0
    7b34:	fc cf       	rjmp	.-8      	; 0x7b2e <hal_wdEnable+0x58>
    7b36:	89 81       	ldd	r24, Y+1	; 0x01
    7b38:	8f bf       	out	0x3f, r24	; 63
    7b3a:	80 e0       	ldi	r24, 0x00	; 0
    7b3c:	23 96       	adiw	r28, 0x03	; 3
    7b3e:	cd bf       	out	0x3d, r28	; 61
    7b40:	de bf       	out	0x3e, r29	; 62
    7b42:	df 91       	pop	r29
    7b44:	cf 91       	pop	r28
    7b46:	08 95       	ret

00007b48 <__muldi3>:
    7b48:	a0 e3       	ldi	r26, 0x30	; 48
    7b4a:	b0 e0       	ldi	r27, 0x00	; 0
    7b4c:	ea ea       	ldi	r30, 0xAA	; 170
    7b4e:	fd e3       	ldi	r31, 0x3D	; 61
    7b50:	0c 94 7f fa 	jmp	0x1f4fe	; 0x1f4fe <__prologue_saves__+0x4>
    7b54:	29 8f       	std	Y+25, r18	; 0x19
    7b56:	3a 8f       	std	Y+26, r19	; 0x1a
    7b58:	4b 8f       	std	Y+27, r20	; 0x1b
    7b5a:	5c 8f       	std	Y+28, r21	; 0x1c
    7b5c:	6d 8f       	std	Y+29, r22	; 0x1d
    7b5e:	7e 8f       	std	Y+30, r23	; 0x1e
    7b60:	8f 8f       	std	Y+31, r24	; 0x1f
    7b62:	98 a3       	lds	r25, 0x58
    7b64:	a9 8a       	std	Y+17, r10	; 0x11
    7b66:	ba 8a       	std	Y+18, r11	; 0x12
    7b68:	cb 8a       	std	Y+19, r12	; 0x13
    7b6a:	dc 8a       	std	Y+20, r13	; 0x14
    7b6c:	ed 8a       	std	Y+21, r14	; 0x15
    7b6e:	fe 8a       	std	Y+22, r15	; 0x16
    7b70:	0f 8b       	std	Y+23, r16	; 0x17
    7b72:	18 8f       	std	Y+24, r17	; 0x18
    7b74:	09 8d       	ldd	r16, Y+25	; 0x19
    7b76:	1a 8d       	ldd	r17, Y+26	; 0x1a
    7b78:	2b 8d       	ldd	r18, Y+27	; 0x1b
    7b7a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    7b7c:	09 a3       	lds	r16, 0x59
    7b7e:	1a a3       	lds	r17, 0x5a
    7b80:	2b a3       	lds	r18, 0x5b
    7b82:	3c a3       	lds	r19, 0x5c
    7b84:	68 01       	movw	r12, r16
    7b86:	79 01       	movw	r14, r18
    7b88:	8f ef       	ldi	r24, 0xFF	; 255
    7b8a:	9f ef       	ldi	r25, 0xFF	; 255
    7b8c:	a0 e0       	ldi	r26, 0x00	; 0
    7b8e:	b0 e0       	ldi	r27, 0x00	; 0
    7b90:	c8 22       	and	r12, r24
    7b92:	d9 22       	and	r13, r25
    7b94:	ea 22       	and	r14, r26
    7b96:	fb 22       	and	r15, r27
    7b98:	89 01       	movw	r16, r18
    7b9a:	22 27       	eor	r18, r18
    7b9c:	33 27       	eor	r19, r19
    7b9e:	09 a7       	lds	r16, 0x79
    7ba0:	1a a7       	lds	r17, 0x7a
    7ba2:	2b a7       	lds	r18, 0x7b
    7ba4:	3c a7       	lds	r19, 0x7c
    7ba6:	09 89       	ldd	r16, Y+17	; 0x11
    7ba8:	1a 89       	ldd	r17, Y+18	; 0x12
    7baa:	2b 89       	ldd	r18, Y+19	; 0x13
    7bac:	3c 89       	ldd	r19, Y+20	; 0x14
    7bae:	0d a3       	lds	r16, 0x5d
    7bb0:	1e a3       	lds	r17, 0x5e
    7bb2:	2f a3       	lds	r18, 0x5f
    7bb4:	38 a7       	lds	r19, 0x78
    7bb6:	48 01       	movw	r8, r16
    7bb8:	59 01       	movw	r10, r18
    7bba:	88 22       	and	r8, r24
    7bbc:	99 22       	and	r9, r25
    7bbe:	aa 22       	and	r10, r26
    7bc0:	bb 22       	and	r11, r27
    7bc2:	29 01       	movw	r4, r18
    7bc4:	66 24       	eor	r6, r6
    7bc6:	77 24       	eor	r7, r7
    7bc8:	c5 01       	movw	r24, r10
    7bca:	b4 01       	movw	r22, r8
    7bcc:	a7 01       	movw	r20, r14
    7bce:	96 01       	movw	r18, r12
    7bd0:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7bd4:	6d a7       	lds	r22, 0x7d
    7bd6:	7e a7       	lds	r23, 0x7e
    7bd8:	8f a7       	lds	r24, 0x7f
    7bda:	98 ab       	sts	0x58, r25
    7bdc:	c3 01       	movw	r24, r6
    7bde:	b2 01       	movw	r22, r4
    7be0:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7be4:	6b 01       	movw	r12, r22
    7be6:	7c 01       	movw	r14, r24
    7be8:	c5 01       	movw	r24, r10
    7bea:	b4 01       	movw	r22, r8
    7bec:	29 a5       	lds	r18, 0x69
    7bee:	3a a5       	lds	r19, 0x6a
    7bf0:	4b a5       	lds	r20, 0x6b
    7bf2:	5c a5       	lds	r21, 0x6c
    7bf4:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7bf8:	4b 01       	movw	r8, r22
    7bfa:	5c 01       	movw	r10, r24
    7bfc:	c3 01       	movw	r24, r6
    7bfe:	b2 01       	movw	r22, r4
    7c00:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7c04:	ab 01       	movw	r20, r22
    7c06:	bc 01       	movw	r22, r24
    7c08:	c8 0c       	add	r12, r8
    7c0a:	d9 1c       	adc	r13, r9
    7c0c:	ea 1c       	adc	r14, r10
    7c0e:	fb 1c       	adc	r15, r11
    7c10:	0d a5       	lds	r16, 0x6d
    7c12:	1e a5       	lds	r17, 0x6e
    7c14:	2f a5       	lds	r18, 0x6f
    7c16:	38 a9       	sts	0x48, r19
    7c18:	c9 01       	movw	r24, r18
    7c1a:	aa 27       	eor	r26, r26
    7c1c:	bb 27       	eor	r27, r27
    7c1e:	c8 0e       	add	r12, r24
    7c20:	d9 1e       	adc	r13, r25
    7c22:	ea 1e       	adc	r14, r26
    7c24:	fb 1e       	adc	r15, r27
    7c26:	c8 14       	cp	r12, r8
    7c28:	d9 04       	cpc	r13, r9
    7c2a:	ea 04       	cpc	r14, r10
    7c2c:	fb 04       	cpc	r15, r11
    7c2e:	20 f4       	brcc	.+8      	; 0x7c38 <__muldi3+0xf0>
    7c30:	40 50       	subi	r20, 0x00	; 0
    7c32:	50 40       	sbci	r21, 0x00	; 0
    7c34:	6f 4f       	sbci	r22, 0xFF	; 255
    7c36:	7f 4f       	sbci	r23, 0xFF	; 255
    7c38:	c7 01       	movw	r24, r14
    7c3a:	aa 27       	eor	r26, r26
    7c3c:	bb 27       	eor	r27, r27
    7c3e:	84 0f       	add	r24, r20
    7c40:	95 1f       	adc	r25, r21
    7c42:	a6 1f       	adc	r26, r22
    7c44:	b7 1f       	adc	r27, r23
    7c46:	8d 83       	std	Y+5, r24	; 0x05
    7c48:	9e 83       	std	Y+6, r25	; 0x06
    7c4a:	af 83       	std	Y+7, r26	; 0x07
    7c4c:	b8 87       	std	Y+8, r27	; 0x08
    7c4e:	76 01       	movw	r14, r12
    7c50:	dd 24       	eor	r13, r13
    7c52:	cc 24       	eor	r12, r12
    7c54:	4d a5       	lds	r20, 0x6d
    7c56:	5e a5       	lds	r21, 0x6e
    7c58:	6f a5       	lds	r22, 0x6f
    7c5a:	78 a9       	sts	0x48, r23
    7c5c:	60 70       	andi	r22, 0x00	; 0
    7c5e:	70 70       	andi	r23, 0x00	; 0
    7c60:	c4 0e       	add	r12, r20
    7c62:	d5 1e       	adc	r13, r21
    7c64:	e6 1e       	adc	r14, r22
    7c66:	f7 1e       	adc	r15, r23
    7c68:	c9 82       	std	Y+1, r12	; 0x01
    7c6a:	da 82       	std	Y+2, r13	; 0x02
    7c6c:	eb 82       	std	Y+3, r14	; 0x03
    7c6e:	fc 82       	std	Y+4, r15	; 0x04
    7c70:	1c 2d       	mov	r17, r12
    7c72:	0a 81       	ldd	r16, Y+2	; 0x02
    7c74:	8b 80       	ldd	r8, Y+3	; 0x03
    7c76:	4c 80       	ldd	r4, Y+4	; 0x04
    7c78:	8d 87       	std	Y+13, r24	; 0x0d
    7c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    7c7c:	8e 87       	std	Y+14, r24	; 0x0e
    7c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    7c80:	8f 87       	std	Y+15, r24	; 0x0f
    7c82:	88 85       	ldd	r24, Y+8	; 0x08
    7c84:	88 8b       	std	Y+16, r24	; 0x10
    7c86:	2d 89       	ldd	r18, Y+21	; 0x15
    7c88:	3e 89       	ldd	r19, Y+22	; 0x16
    7c8a:	4f 89       	ldd	r20, Y+23	; 0x17
    7c8c:	58 8d       	ldd	r21, Y+24	; 0x18
    7c8e:	69 a1       	lds	r22, 0x49
    7c90:	7a a1       	lds	r23, 0x4a
    7c92:	8b a1       	lds	r24, 0x4b
    7c94:	9c a1       	lds	r25, 0x4c
    7c96:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7c9a:	6b 01       	movw	r12, r22
    7c9c:	7c 01       	movw	r14, r24
    7c9e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    7ca0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    7ca2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    7ca4:	58 a1       	lds	r21, 0x48
    7ca6:	6d a1       	lds	r22, 0x4d
    7ca8:	7e a1       	lds	r23, 0x4e
    7caa:	8f a1       	lds	r24, 0x4f
    7cac:	98 a5       	lds	r25, 0x68
    7cae:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    7cb2:	dc 01       	movw	r26, r24
    7cb4:	cb 01       	movw	r24, r22
    7cb6:	c8 0e       	add	r12, r24
    7cb8:	d9 1e       	adc	r13, r25
    7cba:	ea 1e       	adc	r14, r26
    7cbc:	fb 1e       	adc	r15, r27
    7cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    7cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7cc2:	af 85       	ldd	r26, Y+15	; 0x0f
    7cc4:	b8 89       	ldd	r27, Y+16	; 0x10
    7cc6:	8c 0d       	add	r24, r12
    7cc8:	9d 1d       	adc	r25, r13
    7cca:	ae 1d       	adc	r26, r14
    7ccc:	bf 1d       	adc	r27, r15
    7cce:	8d 87       	std	Y+13, r24	; 0x0d
    7cd0:	9e 87       	std	Y+14, r25	; 0x0e
    7cd2:	af 87       	std	Y+15, r26	; 0x0f
    7cd4:	b8 8b       	std	Y+16, r27	; 0x10
    7cd6:	68 2f       	mov	r22, r24
    7cd8:	7e 85       	ldd	r23, Y+14	; 0x0e
    7cda:	21 2f       	mov	r18, r17
    7cdc:	30 2f       	mov	r19, r16
    7cde:	48 2d       	mov	r20, r8
    7ce0:	54 2d       	mov	r21, r4
    7ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    7ce4:	98 89       	ldd	r25, Y+16	; 0x10
    7ce6:	e0 96       	adiw	r28, 0x30	; 48
    7ce8:	e0 e1       	ldi	r30, 0x10	; 16
    7cea:	0c 94 98 fa 	jmp	0x1f530	; 0x1f530 <__epilogue_restores__+0x4>

00007cee <__lshrdi3>:
    7cee:	cf 92       	push	r12
    7cf0:	df 92       	push	r13
    7cf2:	ef 92       	push	r14
    7cf4:	ff 92       	push	r15
    7cf6:	0f 93       	push	r16
    7cf8:	cf 93       	push	r28
    7cfa:	df 93       	push	r29
    7cfc:	cd b7       	in	r28, 0x3d	; 61
    7cfe:	de b7       	in	r29, 0x3e	; 62
    7d00:	60 97       	sbiw	r28, 0x10	; 16
    7d02:	cd bf       	out	0x3d, r28	; 61
    7d04:	de bf       	out	0x3e, r29	; 62
    7d06:	00 23       	and	r16, r16
    7d08:	09 f4       	brne	.+2      	; 0x7d0c <__lshrdi3+0x1e>
    7d0a:	5a c0       	rjmp	.+180    	; 0x7dc0 <__lshrdi3+0xd2>
    7d0c:	29 87       	std	Y+9, r18	; 0x09
    7d0e:	3a 87       	std	Y+10, r19	; 0x0a
    7d10:	4b 87       	std	Y+11, r20	; 0x0b
    7d12:	5c 87       	std	Y+12, r21	; 0x0c
    7d14:	6d 87       	std	Y+13, r22	; 0x0d
    7d16:	7e 87       	std	Y+14, r23	; 0x0e
    7d18:	8f 87       	std	Y+15, r24	; 0x0f
    7d1a:	98 8b       	std	Y+16, r25	; 0x10
    7d1c:	80 e2       	ldi	r24, 0x20	; 32
    7d1e:	80 1b       	sub	r24, r16
    7d20:	4d 85       	ldd	r20, Y+13	; 0x0d
    7d22:	5e 85       	ldd	r21, Y+14	; 0x0e
    7d24:	6f 85       	ldd	r22, Y+15	; 0x0f
    7d26:	78 89       	ldd	r23, Y+16	; 0x10
    7d28:	18 16       	cp	r1, r24
    7d2a:	b4 f0       	brlt	.+44     	; 0x7d58 <__lshrdi3+0x6a>
    7d2c:	1d 82       	std	Y+5, r1	; 0x05
    7d2e:	1e 82       	std	Y+6, r1	; 0x06
    7d30:	1f 82       	std	Y+7, r1	; 0x07
    7d32:	18 86       	std	Y+8, r1	; 0x08
    7d34:	99 27       	eor	r25, r25
    7d36:	87 fd       	sbrc	r24, 7
    7d38:	90 95       	com	r25
    7d3a:	90 95       	com	r25
    7d3c:	81 95       	neg	r24
    7d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d40:	04 c0       	rjmp	.+8      	; 0x7d4a <__lshrdi3+0x5c>
    7d42:	76 95       	lsr	r23
    7d44:	67 95       	ror	r22
    7d46:	57 95       	ror	r21
    7d48:	47 95       	ror	r20
    7d4a:	8a 95       	dec	r24
    7d4c:	d2 f7       	brpl	.-12     	; 0x7d42 <__lshrdi3+0x54>
    7d4e:	49 83       	std	Y+1, r20	; 0x01
    7d50:	5a 83       	std	Y+2, r21	; 0x02
    7d52:	6b 83       	std	Y+3, r22	; 0x03
    7d54:	7c 83       	std	Y+4, r23	; 0x04
    7d56:	2c c0       	rjmp	.+88     	; 0x7db0 <__lshrdi3+0xc2>
    7d58:	6a 01       	movw	r12, r20
    7d5a:	7b 01       	movw	r14, r22
    7d5c:	00 2e       	mov	r0, r16
    7d5e:	04 c0       	rjmp	.+8      	; 0x7d68 <__lshrdi3+0x7a>
    7d60:	f6 94       	lsr	r15
    7d62:	e7 94       	ror	r14
    7d64:	d7 94       	ror	r13
    7d66:	c7 94       	ror	r12
    7d68:	0a 94       	dec	r0
    7d6a:	d2 f7       	brpl	.-12     	; 0x7d60 <__lshrdi3+0x72>
    7d6c:	cd 82       	std	Y+5, r12	; 0x05
    7d6e:	de 82       	std	Y+6, r13	; 0x06
    7d70:	ef 82       	std	Y+7, r14	; 0x07
    7d72:	f8 86       	std	Y+8, r15	; 0x08
    7d74:	6a 01       	movw	r12, r20
    7d76:	7b 01       	movw	r14, r22
    7d78:	04 c0       	rjmp	.+8      	; 0x7d82 <__lshrdi3+0x94>
    7d7a:	cc 0c       	add	r12, r12
    7d7c:	dd 1c       	adc	r13, r13
    7d7e:	ee 1c       	adc	r14, r14
    7d80:	ff 1c       	adc	r15, r15
    7d82:	8a 95       	dec	r24
    7d84:	d2 f7       	brpl	.-12     	; 0x7d7a <__lshrdi3+0x8c>
    7d86:	d7 01       	movw	r26, r14
    7d88:	c6 01       	movw	r24, r12
    7d8a:	49 85       	ldd	r20, Y+9	; 0x09
    7d8c:	5a 85       	ldd	r21, Y+10	; 0x0a
    7d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    7d92:	04 c0       	rjmp	.+8      	; 0x7d9c <__lshrdi3+0xae>
    7d94:	76 95       	lsr	r23
    7d96:	67 95       	ror	r22
    7d98:	57 95       	ror	r21
    7d9a:	47 95       	ror	r20
    7d9c:	0a 95       	dec	r16
    7d9e:	d2 f7       	brpl	.-12     	; 0x7d94 <__lshrdi3+0xa6>
    7da0:	84 2b       	or	r24, r20
    7da2:	95 2b       	or	r25, r21
    7da4:	a6 2b       	or	r26, r22
    7da6:	b7 2b       	or	r27, r23
    7da8:	89 83       	std	Y+1, r24	; 0x01
    7daa:	9a 83       	std	Y+2, r25	; 0x02
    7dac:	ab 83       	std	Y+3, r26	; 0x03
    7dae:	bc 83       	std	Y+4, r27	; 0x04
    7db0:	29 81       	ldd	r18, Y+1	; 0x01
    7db2:	3a 81       	ldd	r19, Y+2	; 0x02
    7db4:	4b 81       	ldd	r20, Y+3	; 0x03
    7db6:	5c 81       	ldd	r21, Y+4	; 0x04
    7db8:	6d 81       	ldd	r22, Y+5	; 0x05
    7dba:	7e 81       	ldd	r23, Y+6	; 0x06
    7dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    7dbe:	98 85       	ldd	r25, Y+8	; 0x08
    7dc0:	60 96       	adiw	r28, 0x10	; 16
    7dc2:	cd bf       	out	0x3d, r28	; 61
    7dc4:	de bf       	out	0x3e, r29	; 62
    7dc6:	df 91       	pop	r29
    7dc8:	cf 91       	pop	r28
    7dca:	0f 91       	pop	r16
    7dcc:	ff 90       	pop	r15
    7dce:	ef 90       	pop	r14
    7dd0:	df 90       	pop	r13
    7dd2:	cf 90       	pop	r12
    7dd4:	08 95       	ret

00007dd6 <__ashldi3>:
    7dd6:	cf 92       	push	r12
    7dd8:	df 92       	push	r13
    7dda:	ef 92       	push	r14
    7ddc:	ff 92       	push	r15
    7dde:	0f 93       	push	r16
    7de0:	cf 93       	push	r28
    7de2:	df 93       	push	r29
    7de4:	cd b7       	in	r28, 0x3d	; 61
    7de6:	de b7       	in	r29, 0x3e	; 62
    7de8:	60 97       	sbiw	r28, 0x10	; 16
    7dea:	cd bf       	out	0x3d, r28	; 61
    7dec:	de bf       	out	0x3e, r29	; 62
    7dee:	00 23       	and	r16, r16
    7df0:	09 f4       	brne	.+2      	; 0x7df4 <__ashldi3+0x1e>
    7df2:	5a c0       	rjmp	.+180    	; 0x7ea8 <__ashldi3+0xd2>
    7df4:	29 87       	std	Y+9, r18	; 0x09
    7df6:	3a 87       	std	Y+10, r19	; 0x0a
    7df8:	4b 87       	std	Y+11, r20	; 0x0b
    7dfa:	5c 87       	std	Y+12, r21	; 0x0c
    7dfc:	6d 87       	std	Y+13, r22	; 0x0d
    7dfe:	7e 87       	std	Y+14, r23	; 0x0e
    7e00:	8f 87       	std	Y+15, r24	; 0x0f
    7e02:	98 8b       	std	Y+16, r25	; 0x10
    7e04:	80 e2       	ldi	r24, 0x20	; 32
    7e06:	80 1b       	sub	r24, r16
    7e08:	49 85       	ldd	r20, Y+9	; 0x09
    7e0a:	5a 85       	ldd	r21, Y+10	; 0x0a
    7e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    7e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7e10:	18 16       	cp	r1, r24
    7e12:	b4 f0       	brlt	.+44     	; 0x7e40 <__ashldi3+0x6a>
    7e14:	19 82       	std	Y+1, r1	; 0x01
    7e16:	1a 82       	std	Y+2, r1	; 0x02
    7e18:	1b 82       	std	Y+3, r1	; 0x03
    7e1a:	1c 82       	std	Y+4, r1	; 0x04
    7e1c:	99 27       	eor	r25, r25
    7e1e:	87 fd       	sbrc	r24, 7
    7e20:	90 95       	com	r25
    7e22:	90 95       	com	r25
    7e24:	81 95       	neg	r24
    7e26:	9f 4f       	sbci	r25, 0xFF	; 255
    7e28:	04 c0       	rjmp	.+8      	; 0x7e32 <__ashldi3+0x5c>
    7e2a:	44 0f       	add	r20, r20
    7e2c:	55 1f       	adc	r21, r21
    7e2e:	66 1f       	adc	r22, r22
    7e30:	77 1f       	adc	r23, r23
    7e32:	8a 95       	dec	r24
    7e34:	d2 f7       	brpl	.-12     	; 0x7e2a <__ashldi3+0x54>
    7e36:	4d 83       	std	Y+5, r20	; 0x05
    7e38:	5e 83       	std	Y+6, r21	; 0x06
    7e3a:	6f 83       	std	Y+7, r22	; 0x07
    7e3c:	78 87       	std	Y+8, r23	; 0x08
    7e3e:	2c c0       	rjmp	.+88     	; 0x7e98 <__ashldi3+0xc2>
    7e40:	6a 01       	movw	r12, r20
    7e42:	7b 01       	movw	r14, r22
    7e44:	00 2e       	mov	r0, r16
    7e46:	04 c0       	rjmp	.+8      	; 0x7e50 <__ashldi3+0x7a>
    7e48:	cc 0c       	add	r12, r12
    7e4a:	dd 1c       	adc	r13, r13
    7e4c:	ee 1c       	adc	r14, r14
    7e4e:	ff 1c       	adc	r15, r15
    7e50:	0a 94       	dec	r0
    7e52:	d2 f7       	brpl	.-12     	; 0x7e48 <__ashldi3+0x72>
    7e54:	c9 82       	std	Y+1, r12	; 0x01
    7e56:	da 82       	std	Y+2, r13	; 0x02
    7e58:	eb 82       	std	Y+3, r14	; 0x03
    7e5a:	fc 82       	std	Y+4, r15	; 0x04
    7e5c:	6a 01       	movw	r12, r20
    7e5e:	7b 01       	movw	r14, r22
    7e60:	04 c0       	rjmp	.+8      	; 0x7e6a <__ashldi3+0x94>
    7e62:	f6 94       	lsr	r15
    7e64:	e7 94       	ror	r14
    7e66:	d7 94       	ror	r13
    7e68:	c7 94       	ror	r12
    7e6a:	8a 95       	dec	r24
    7e6c:	d2 f7       	brpl	.-12     	; 0x7e62 <__ashldi3+0x8c>
    7e6e:	d7 01       	movw	r26, r14
    7e70:	c6 01       	movw	r24, r12
    7e72:	4d 85       	ldd	r20, Y+13	; 0x0d
    7e74:	5e 85       	ldd	r21, Y+14	; 0x0e
    7e76:	6f 85       	ldd	r22, Y+15	; 0x0f
    7e78:	78 89       	ldd	r23, Y+16	; 0x10
    7e7a:	04 c0       	rjmp	.+8      	; 0x7e84 <__ashldi3+0xae>
    7e7c:	44 0f       	add	r20, r20
    7e7e:	55 1f       	adc	r21, r21
    7e80:	66 1f       	adc	r22, r22
    7e82:	77 1f       	adc	r23, r23
    7e84:	0a 95       	dec	r16
    7e86:	d2 f7       	brpl	.-12     	; 0x7e7c <__ashldi3+0xa6>
    7e88:	84 2b       	or	r24, r20
    7e8a:	95 2b       	or	r25, r21
    7e8c:	a6 2b       	or	r26, r22
    7e8e:	b7 2b       	or	r27, r23
    7e90:	8d 83       	std	Y+5, r24	; 0x05
    7e92:	9e 83       	std	Y+6, r25	; 0x06
    7e94:	af 83       	std	Y+7, r26	; 0x07
    7e96:	b8 87       	std	Y+8, r27	; 0x08
    7e98:	29 81       	ldd	r18, Y+1	; 0x01
    7e9a:	3a 81       	ldd	r19, Y+2	; 0x02
    7e9c:	4b 81       	ldd	r20, Y+3	; 0x03
    7e9e:	5c 81       	ldd	r21, Y+4	; 0x04
    7ea0:	6d 81       	ldd	r22, Y+5	; 0x05
    7ea2:	7e 81       	ldd	r23, Y+6	; 0x06
    7ea4:	8f 81       	ldd	r24, Y+7	; 0x07
    7ea6:	98 85       	ldd	r25, Y+8	; 0x08
    7ea8:	60 96       	adiw	r28, 0x10	; 16
    7eaa:	cd bf       	out	0x3d, r28	; 61
    7eac:	de bf       	out	0x3e, r29	; 62
    7eae:	df 91       	pop	r29
    7eb0:	cf 91       	pop	r28
    7eb2:	0f 91       	pop	r16
    7eb4:	ff 90       	pop	r15
    7eb6:	ef 90       	pop	r14
    7eb8:	df 90       	pop	r13
    7eba:	cf 90       	pop	r12
    7ebc:	08 95       	ret

00007ebe <__ashrdi3>:
    7ebe:	0f 93       	push	r16
    7ec0:	cf 93       	push	r28
    7ec2:	df 93       	push	r29
    7ec4:	cd b7       	in	r28, 0x3d	; 61
    7ec6:	de b7       	in	r29, 0x3e	; 62
    7ec8:	60 97       	sbiw	r28, 0x10	; 16
    7eca:	cd bf       	out	0x3d, r28	; 61
    7ecc:	de bf       	out	0x3e, r29	; 62
    7ece:	00 23       	and	r16, r16
    7ed0:	09 f4       	brne	.+2      	; 0x7ed4 <__ashrdi3+0x16>
    7ed2:	56 c0       	rjmp	.+172    	; 0x7f80 <__ashrdi3+0xc2>
    7ed4:	29 87       	std	Y+9, r18	; 0x09
    7ed6:	3a 87       	std	Y+10, r19	; 0x0a
    7ed8:	4b 87       	std	Y+11, r20	; 0x0b
    7eda:	5c 87       	std	Y+12, r21	; 0x0c
    7edc:	6d 87       	std	Y+13, r22	; 0x0d
    7ede:	7e 87       	std	Y+14, r23	; 0x0e
    7ee0:	8f 87       	std	Y+15, r24	; 0x0f
    7ee2:	98 8b       	std	Y+16, r25	; 0x10
    7ee4:	20 e2       	ldi	r18, 0x20	; 32
    7ee6:	20 1b       	sub	r18, r16
    7ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    7eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    7eec:	af 85       	ldd	r26, Y+15	; 0x0f
    7eee:	b8 89       	ldd	r27, Y+16	; 0x10
    7ef0:	ac 01       	movw	r20, r24
    7ef2:	bd 01       	movw	r22, r26
    7ef4:	12 16       	cp	r1, r18
    7ef6:	b4 f0       	brlt	.+44     	; 0x7f24 <__ashrdi3+0x66>
    7ef8:	77 0f       	add	r23, r23
    7efa:	44 0b       	sbc	r20, r20
    7efc:	54 2f       	mov	r21, r20
    7efe:	ba 01       	movw	r22, r20
    7f00:	4d 83       	std	Y+5, r20	; 0x05
    7f02:	5e 83       	std	Y+6, r21	; 0x06
    7f04:	6f 83       	std	Y+7, r22	; 0x07
    7f06:	78 87       	std	Y+8, r23	; 0x08
    7f08:	33 27       	eor	r19, r19
    7f0a:	27 fd       	sbrc	r18, 7
    7f0c:	30 95       	com	r19
    7f0e:	30 95       	com	r19
    7f10:	21 95       	neg	r18
    7f12:	3f 4f       	sbci	r19, 0xFF	; 255
    7f14:	04 c0       	rjmp	.+8      	; 0x7f1e <__ashrdi3+0x60>
    7f16:	b5 95       	asr	r27
    7f18:	a7 95       	ror	r26
    7f1a:	97 95       	ror	r25
    7f1c:	87 95       	ror	r24
    7f1e:	2a 95       	dec	r18
    7f20:	d2 f7       	brpl	.-12     	; 0x7f16 <__ashrdi3+0x58>
    7f22:	22 c0       	rjmp	.+68     	; 0x7f68 <__ashrdi3+0xaa>
    7f24:	00 2e       	mov	r0, r16
    7f26:	04 c0       	rjmp	.+8      	; 0x7f30 <__ashrdi3+0x72>
    7f28:	75 95       	asr	r23
    7f2a:	67 95       	ror	r22
    7f2c:	57 95       	ror	r21
    7f2e:	47 95       	ror	r20
    7f30:	0a 94       	dec	r0
    7f32:	d2 f7       	brpl	.-12     	; 0x7f28 <__ashrdi3+0x6a>
    7f34:	4d 83       	std	Y+5, r20	; 0x05
    7f36:	5e 83       	std	Y+6, r21	; 0x06
    7f38:	6f 83       	std	Y+7, r22	; 0x07
    7f3a:	78 87       	std	Y+8, r23	; 0x08
    7f3c:	04 c0       	rjmp	.+8      	; 0x7f46 <__ashrdi3+0x88>
    7f3e:	88 0f       	add	r24, r24
    7f40:	99 1f       	adc	r25, r25
    7f42:	aa 1f       	adc	r26, r26
    7f44:	bb 1f       	adc	r27, r27
    7f46:	2a 95       	dec	r18
    7f48:	d2 f7       	brpl	.-12     	; 0x7f3e <__ashrdi3+0x80>
    7f4a:	49 85       	ldd	r20, Y+9	; 0x09
    7f4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    7f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    7f52:	04 c0       	rjmp	.+8      	; 0x7f5c <__ashrdi3+0x9e>
    7f54:	76 95       	lsr	r23
    7f56:	67 95       	ror	r22
    7f58:	57 95       	ror	r21
    7f5a:	47 95       	ror	r20
    7f5c:	0a 95       	dec	r16
    7f5e:	d2 f7       	brpl	.-12     	; 0x7f54 <__ashrdi3+0x96>
    7f60:	84 2b       	or	r24, r20
    7f62:	95 2b       	or	r25, r21
    7f64:	a6 2b       	or	r26, r22
    7f66:	b7 2b       	or	r27, r23
    7f68:	89 83       	std	Y+1, r24	; 0x01
    7f6a:	9a 83       	std	Y+2, r25	; 0x02
    7f6c:	ab 83       	std	Y+3, r26	; 0x03
    7f6e:	bc 83       	std	Y+4, r27	; 0x04
    7f70:	29 81       	ldd	r18, Y+1	; 0x01
    7f72:	3a 81       	ldd	r19, Y+2	; 0x02
    7f74:	4b 81       	ldd	r20, Y+3	; 0x03
    7f76:	5c 81       	ldd	r21, Y+4	; 0x04
    7f78:	6d 81       	ldd	r22, Y+5	; 0x05
    7f7a:	7e 81       	ldd	r23, Y+6	; 0x06
    7f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    7f7e:	98 85       	ldd	r25, Y+8	; 0x08
    7f80:	60 96       	adiw	r28, 0x10	; 16
    7f82:	cd bf       	out	0x3d, r28	; 61
    7f84:	de bf       	out	0x3e, r29	; 62
    7f86:	df 91       	pop	r29
    7f88:	cf 91       	pop	r28
    7f8a:	0f 91       	pop	r16
    7f8c:	08 95       	ret

00007f8e <consoleClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error consoleClose( t_DEVHANDLE t_handle)
{
    7f8e:	1f 93       	push	r17
    7f90:	cf 93       	push	r28
    7f92:	df 93       	push	r29
    7f94:	0f 92       	push	r0
    7f96:	0f 92       	push	r0
    7f98:	cd b7       	in	r28, 0x3d	; 61
    7f9a:	de b7       	in	r29, 0x3e	; 62
    7f9c:	89 83       	std	Y+1, r24	; 0x01
    7f9e:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    7fa0:	80 91 d8 23 	lds	r24, 0x23D8
    7fa4:	90 91 d9 23 	lds	r25, 0x23D9
    7fa8:	60 e0       	ldi	r22, 0x00	; 0
    7faa:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers--;
    7fae:	80 91 e0 23 	lds	r24, 0x23E0
    7fb2:	81 50       	subi	r24, 0x01	; 1
    7fb4:	80 93 e0 23 	sts	0x23E0, r24

   /*------------------------------------------------------------------------*
    * If there are no more handles attached to this driver than disable the
    * receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 0)
    7fb8:	88 23       	and	r24, r24
    7fba:	41 f4       	brne	.+16     	; 0x7fcc <consoleClose+0x3e>
   {

      t_uErr = hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    7fbc:	80 91 e1 23 	lds	r24, 0x23E1
    7fc0:	90 91 e2 23 	lds	r25, 0x23E2
    7fc4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <hal_disableUartRxInt>

      if( t_uErr < 0)
    7fc8:	87 fd       	sbrc	r24, 7
    7fca:	02 c0       	rjmp	.+4      	; 0x7fd0 <consoleClose+0x42>
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error consoleClose( t_DEVHANDLE t_handle)
{
   t_uartError t_uErr;
   t_error t_err = ARB_PASSED;
    7fcc:	10 e0       	ldi	r17, 0x00	; 0
    7fce:	01 c0       	rjmp	.+2      	; 0x7fd2 <consoleClose+0x44>
   {

      t_uErr = hal_disableUartRxInt( gt_consoleDev.t_uHandle);

      if( t_uErr < 0)
         t_err = ARB_HAL_ERROR;
    7fd0:	16 ef       	ldi	r17, 0xF6	; 246
   }/*End if( gt_consoleDev.c_numUsers == 0)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    7fd2:	20 91 d8 23 	lds	r18, 0x23D8
    7fd6:	30 91 d9 23 	lds	r19, 0x23D9
    7fda:	c9 01       	movw	r24, r18
    7fdc:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return t_err;

}/*End consoleClose*/
    7fe0:	81 2f       	mov	r24, r17
    7fe2:	0f 90       	pop	r0
    7fe4:	0f 90       	pop	r0
    7fe6:	df 91       	pop	r29
    7fe8:	cf 91       	pop	r28
    7fea:	1f 91       	pop	r17
    7fec:	08 95       	ret

00007fee <consoleOpen>:
   }

}/*End rxComplete*/

static t_error consoleOpen( t_DEVHANDLE t_handle)
{
    7fee:	1f 93       	push	r17
    7ff0:	cf 93       	push	r28
    7ff2:	df 93       	push	r29
    7ff4:	0f 92       	push	r0
    7ff6:	0f 92       	push	r0
    7ff8:	cd b7       	in	r28, 0x3d	; 61
    7ffa:	de b7       	in	r29, 0x3e	; 62
    7ffc:	89 83       	std	Y+1, r24	; 0x01
    7ffe:	9a 83       	std	Y+2, r25	; 0x02
   t_error t_err = ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_txMutex,
    8000:	80 91 da 23 	lds	r24, 0x23DA
    8004:	90 91 db 23 	lds	r25, 0x23DB
    8008:	60 e0       	ldi	r22, 0x00	; 0
    800a:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers++;
    800e:	80 91 e0 23 	lds	r24, 0x23E0
    8012:	8f 5f       	subi	r24, 0xFF	; 255
    8014:	80 93 e0 23 	sts	0x23E0, r24

   /*------------------------------------------------------------------------*
    * If there is at least one user-space handle attached to this driver
    * than enable the receive interrupt.
    *------------------------------------------------------------------------*/
   if( gt_consoleDev.c_numUsers == 1)
    8018:	81 30       	cpi	r24, 0x01	; 1
    801a:	41 f4       	brne	.+16     	; 0x802c <consoleOpen+0x3e>
   {

      t_uErr = hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    801c:	80 91 e1 23 	lds	r24, 0x23E1
    8020:	90 91 e2 23 	lds	r25, 0x23E2
    8024:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <hal_enableUartRxInt>

      if( t_uErr < 0)
    8028:	87 fd       	sbrc	r24, 7
    802a:	02 c0       	rjmp	.+4      	; 0x8030 <consoleOpen+0x42>

static t_error consoleOpen( t_DEVHANDLE t_handle)
{

   t_uartError t_uErr;
   t_error t_err = ARB_PASSED;
    802c:	10 e0       	ldi	r17, 0x00	; 0
    802e:	01 c0       	rjmp	.+2      	; 0x8032 <consoleOpen+0x44>
   {

      t_uErr = hal_enableUartRxInt( gt_consoleDev.t_uHandle);

      if( t_uErr < 0)
         t_err = ARB_HAL_ERROR;
    8030:	16 ef       	ldi	r17, 0xF6	; 246
   }/*End if( gt_consoleDev.c_numUsers == 1)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_txMutex);
    8032:	20 91 da 23 	lds	r18, 0x23DA
    8036:	30 91 db 23 	lds	r19, 0x23DB
    803a:	c9 01       	movw	r24, r18
    803c:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return t_err;

}/*End consoleOpen*/
    8040:	81 2f       	mov	r24, r17
    8042:	0f 90       	pop	r0
    8044:	0f 90       	pop	r0
    8046:	df 91       	pop	r29
    8048:	cf 91       	pop	r28
    804a:	1f 91       	pop	r17
    804c:	08 95       	ret

0000804e <consoleWrite>:
}/*End consoleRead*/

static int16_t consoleWrite( t_DEVHANDLE t_handle,
                             int8_t *pc_buff,
                             uint16_t s_size)
{
    804e:	cf 93       	push	r28
    8050:	df 93       	push	r29
    8052:	00 d0       	rcall	.+0      	; 0x8054 <consoleWrite+0x6>
    8054:	cd b7       	in	r28, 0x3d	; 61
    8056:	de b7       	in	r29, 0x3e	; 62
    8058:	8a 83       	std	Y+2, r24	; 0x02
    805a:	9b 83       	std	Y+3, r25	; 0x03
   /*------------------------------------------------------------------------*
    * A call to this function can occur within an interrupt, therefore 
    * mutual exclusion is performed by disabling interrupts for a brief
    * period of time.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();
    805c:	8f b7       	in	r24, 0x3f	; 63
    805e:	89 83       	std	Y+1, r24	; 0x01
    8060:	f8 94       	cli

   s_numBytes = hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    8062:	80 91 e1 23 	lds	r24, 0x23E1
    8066:	90 91 e2 23 	lds	r25, 0x23E2
    806a:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <hal_uartWriteBlock>


   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();
    806e:	99 81       	ldd	r25, Y+1	; 0x01
    8070:	9f bf       	out	0x3f, r25	; 63
    * mutual exclusion is performed by disabling interrupts for a brief
    * period of time.
    *------------------------------------------------------------------------*/
   HAL_BEGIN_CRITICAL();

   s_numBytes = hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    8072:	28 2f       	mov	r18, r24
    8074:	33 27       	eor	r19, r19
    8076:	27 fd       	sbrc	r18, 7
    8078:	30 95       	com	r19
    *------------------------------------------------------------------------*/
   HAL_END_CRITICAL();

   return s_numBytes;

}/*End consoleWrite*/
    807a:	93 2f       	mov	r25, r19
    807c:	23 96       	adiw	r28, 0x03	; 3
    807e:	cd bf       	out	0x3d, r28	; 61
    8080:	de bf       	out	0x3e, r29	; 62
    8082:	df 91       	pop	r29
    8084:	cf 91       	pop	r28
    8086:	08 95       	ret

00008088 <consoleIoctl>:

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
    8088:	cf 92       	push	r12
    808a:	df 92       	push	r13
    808c:	ef 92       	push	r14
    808e:	ff 92       	push	r15
    8090:	0f 93       	push	r16
    8092:	1f 93       	push	r17
    8094:	cf 93       	push	r28
    8096:	df 93       	push	r29
    8098:	cd b7       	in	r28, 0x3d	; 61
    809a:	de b7       	in	r29, 0x3e	; 62
    809c:	aa 97       	sbiw	r28, 0x2a	; 42
    809e:	cd bf       	out	0x3d, r28	; 61
    80a0:	de bf       	out	0x3e, r29	; 62
    80a2:	89 a7       	lds	r24, 0x79
    80a4:	9a a7       	lds	r25, 0x7a
    80a6:	69 01       	movw	r12, r18
    80a8:	7a 01       	movw	r14, r20
   t_consoleTokHndl *pt_tokens = NULL;
   int8_t *pc_rxBuffPtr = NULL;
   uint16_t s_size = 0;
   int8_t ac_buff[40];

   switch( (t_consoleCmd)s_command)
    80aa:	64 30       	cpi	r22, 0x04	; 4
    80ac:	09 f4       	brne	.+2      	; 0x80b0 <consoleIoctl+0x28>
    80ae:	b9 c0       	rjmp	.+370    	; 0x8222 <consoleIoctl+0x19a>
    80b0:	65 30       	cpi	r22, 0x05	; 5
    80b2:	58 f4       	brcc	.+22     	; 0x80ca <consoleIoctl+0x42>
    80b4:	61 30       	cpi	r22, 0x01	; 1
    80b6:	09 f4       	brne	.+2      	; 0x80ba <consoleIoctl+0x32>
    80b8:	f5 c0       	rjmp	.+490    	; 0x82a4 <consoleIoctl+0x21c>
    80ba:	61 30       	cpi	r22, 0x01	; 1
    80bc:	c8 f0       	brcs	.+50     	; 0x80f0 <consoleIoctl+0x68>
    80be:	62 30       	cpi	r22, 0x02	; 2
    80c0:	19 f1       	breq	.+70     	; 0x8108 <consoleIoctl+0x80>
    80c2:	63 30       	cpi	r22, 0x03	; 3
    80c4:	09 f0       	breq	.+2      	; 0x80c8 <consoleIoctl+0x40>
    80c6:	9d c1       	rjmp	.+826    	; 0x8402 <consoleIoctl+0x37a>
    80c8:	28 c0       	rjmp	.+80     	; 0x811a <consoleIoctl+0x92>
    80ca:	67 30       	cpi	r22, 0x07	; 7
    80cc:	09 f4       	brne	.+2      	; 0x80d0 <consoleIoctl+0x48>
    80ce:	1f c1       	rjmp	.+574    	; 0x830e <consoleIoctl+0x286>
    80d0:	68 30       	cpi	r22, 0x08	; 8
    80d2:	38 f4       	brcc	.+14     	; 0x80e2 <consoleIoctl+0x5a>
    80d4:	65 30       	cpi	r22, 0x05	; 5
    80d6:	09 f4       	brne	.+2      	; 0x80da <consoleIoctl+0x52>
    80d8:	e9 c0       	rjmp	.+466    	; 0x82ac <consoleIoctl+0x224>
    80da:	66 30       	cpi	r22, 0x06	; 6
    80dc:	09 f0       	breq	.+2      	; 0x80e0 <consoleIoctl+0x58>
    80de:	91 c1       	rjmp	.+802    	; 0x8402 <consoleIoctl+0x37a>
    80e0:	f2 c0       	rjmp	.+484    	; 0x82c6 <consoleIoctl+0x23e>
    80e2:	68 30       	cpi	r22, 0x08	; 8
    80e4:	09 f4       	brne	.+2      	; 0x80e8 <consoleIoctl+0x60>
    80e6:	36 c1       	rjmp	.+620    	; 0x8354 <consoleIoctl+0x2cc>
    80e8:	69 30       	cpi	r22, 0x09	; 9
    80ea:	09 f0       	breq	.+2      	; 0x80ee <consoleIoctl+0x66>
    80ec:	8a c1       	rjmp	.+788    	; 0x8402 <consoleIoctl+0x37a>
    80ee:	40 c1       	rjmp	.+640    	; 0x8370 <consoleIoctl+0x2e8>
   {
      case CONSOLE_GET_RX_BUFFER_SIZE:

         i_return = (int32_t)utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    80f0:	80 91 de 23 	lds	r24, 0x23DE
    80f4:	90 91 df 23 	lds	r25, 0x23DF
    80f8:	0e 94 07 d7 	call	0x1ae0e	; 0x1ae0e <utl_getBufferSize>
    80fc:	6c 01       	movw	r12, r24
    80fe:	ee 24       	eor	r14, r14
    8100:	d7 fc       	sbrc	r13, 7
    8102:	e0 94       	com	r14
    8104:	fe 2c       	mov	r15, r14

      break;/*End case CONSOLE_GET_RX_BUFFER_SIZE:*/
    8106:	8e c1       	rjmp	.+796    	; 0x8424 <consoleIoctl+0x39c>

      case CONSOLE_GET_BAUD_RATE:

         i_return = (int32_t)hal_uartGetBaudRate( gt_consoleDev.t_uHandle);
    8108:	80 91 e1 23 	lds	r24, 0x23E1
    810c:	90 91 e2 23 	lds	r25, 0x23E2
    8110:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <hal_uartGetBaudRate>
    8114:	6b 01       	movw	r12, r22
    8116:	7c 01       	movw	r14, r24

      break;/*End case CONSOLE_GET_BAUD_RATE:*/
    8118:	85 c1       	rjmp	.+778    	; 0x8424 <consoleIoctl+0x39c>
      case CONSOLE_PARSE_CMD_LINE:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxMutex,
    811a:	80 91 d8 23 	lds	r24, 0x23D8
    811e:	90 91 d9 23 	lds	r25, 0x23D9
    8122:	60 e0       	ldi	r22, 0x00	; 0
    8124:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
         pt_tokens = (t_consoleTokHndl *)((uint16_t)i_arguments);

         /*------------------------------------------------------------------*
          * Wait for data to be available in the RX buffer.
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_rxBlockingSem,
    8128:	80 91 dc 23 	lds	r24, 0x23DC
    812c:	90 91 dd 23 	lds	r25, 0x23DD
    8130:	60 e0       	ldi	r22, 0x00	; 0
    8132:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Get the head location of the RX buffer...
          *------------------------------------------------------------------*/
         pc_rxBuffPtr = utl_getBufferPtr( gt_consoleDev.t_rxBuffer);
    8136:	80 91 de 23 	lds	r24, 0x23DE
    813a:	90 91 df 23 	lds	r25, 0x23DF
    813e:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <utl_getBufferPtr>
    8142:	8c 01       	movw	r16, r24
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
                                               pt_tokens->ac_tok,
    8144:	76 01       	movw	r14, r12
         /*------------------------------------------------------------------*
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
    8146:	50 e7       	ldi	r21, 0x70	; 112
    8148:	c5 2e       	mov	r12, r21
    814a:	d1 2c       	mov	r13, r1
    814c:	ce 0c       	add	r12, r14
    814e:	df 1c       	adc	r13, r15
static t_consoleError drv_parseMessage( int8_t *pc_cbuff,
                                        int8_t ac_tok[][CONSOLE_MAX_TOKEN_SIZE],
                                        uint8_t *pc_tokenCount)
{
   int8_t *pc_nextLoc      = NULL;
   int8_t c_bytesRemaining = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    8150:	80 91 de 23 	lds	r24, 0x23DE
    8154:	90 91 df 23 	lds	r25, 0x23DF
    8158:	0e 94 07 d7 	call	0x1ae0e	; 0x1ae0e <utl_getBufferSize>
    * char. If it exits for another reason, the returned ptr will contain the
    * location of the last character in the buffer i.e. a NULL ptr, '\0', '\n',
    * or whatever is there when reaching the max size.
    *------------------------------------------------------------------------*/
   pc_nextLoc = pc_cbuff;
   (*pc_tokenCount) = 0;
    815c:	d6 01       	movw	r26, r12
    815e:	1c 92       	st	X, r1
   do
   {
      pc_nextLoc = drv_strTok( pc_nextLoc,
                               &ac_tok[(*pc_tokenCount)][0],
    8160:	f6 01       	movw	r30, r12
    8162:	20 81       	ld	r18, Z
    8164:	30 e0       	ldi	r19, 0x00	; 0
    8166:	44 e0       	ldi	r20, 0x04	; 4
    8168:	22 0f       	add	r18, r18
    816a:	33 1f       	adc	r19, r19
    816c:	4a 95       	dec	r20
    816e:	e1 f7       	brne	.-8      	; 0x8168 <consoleIoctl+0xe0>
    *------------------------------------------------------------------------*/
   pc_nextLoc = pc_cbuff;
   (*pc_tokenCount) = 0;
   do
   {
      pc_nextLoc = drv_strTok( pc_nextLoc,
    8170:	2e 0d       	add	r18, r14
    8172:	3f 1d       	adc	r19, r15
    8174:	a8 01       	movw	r20, r16
    8176:	f9 01       	movw	r30, r18
                           int8_t *pc_out,
                           int8_t c_delim,
                           int8_t *pc_bytesRemaining,
                           int8_t *pc_tokenSize)
{
   int8_t c_tokenSizeCount = 0;
    8178:	90 e0       	ldi	r25, 0x00	; 0
    817a:	0a c0       	rjmp	.+20     	; 0x8190 <consoleIoctl+0x108>
   while( (*pc_in != CONSOLE_RETURN_CHAR)
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
    817c:	61 93       	st	Z+, r22
      pc_in++;
      c_tokenSizeCount++;
    817e:	69 2f       	mov	r22, r25
    8180:	6f 5f       	subi	r22, 0xFF	; 255

      /*---------------------------------------------------------------------*
       * Do we have room to insert the NULL character at the end of the
       * sequence?
       *---------------------------------------------------------------------*/
      if( c_tokenSizeCount == CONSOLE_MAX_TOKEN_SIZE)
    8182:	60 31       	cpi	r22, 0x10	; 16
    8184:	21 f4       	brne	.+8      	; 0x818e <consoleIoctl+0x106>
      {
         /*------------------------------------------------------------------*
          * Add one to the count in order to trigger the error condition.
          *------------------------------------------------------------------*/
         c_tokenSizeCount++;
    8186:	9e 5f       	subi	r25, 0xFE	; 254
         *pc_tokenSize = c_tokenSizeCount;
         return NULL;
    8188:	00 e0       	ldi	r16, 0x00	; 0
    818a:	10 e0       	ldi	r17, 0x00	; 0
    818c:	19 c0       	rjmp	.+50     	; 0x81c0 <consoleIoctl+0x138>
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
   {
      pc_out[c_tokenSizeCount] = *pc_in;
      pc_in++;
      c_tokenSizeCount++;
    818e:	96 2f       	mov	r25, r22
      if( c_tokenSizeCount == CONSOLE_MAX_TOKEN_SIZE)
      {
         /*------------------------------------------------------------------*
          * Add one to the count in order to trigger the error condition.
          *------------------------------------------------------------------*/
         c_tokenSizeCount++;
    8190:	8a 01       	movw	r16, r20

   /*------------------------------------------------------------------------*
    * Search for delimiting character, if not found stop at max string size
    * carriage return, or NULL char.
    *------------------------------------------------------------------------*/
   while( (*pc_in != CONSOLE_RETURN_CHAR)
    8192:	da 01       	movw	r26, r20
    8194:	6c 91       	ld	r22, X
    8196:	4f 5f       	subi	r20, 0xFF	; 255
    8198:	5f 4f       	sbci	r21, 0xFF	; 255
    819a:	6d 30       	cpi	r22, 0x0D	; 13
    819c:	41 f0       	breq	.+16     	; 0x81ae <consoleIoctl+0x126>
       && (*pc_in != '\0')
    819e:	66 23       	and	r22, r22
    81a0:	31 f0       	breq	.+12     	; 0x81ae <consoleIoctl+0x126>
       && (*pc_in != c_delim)
    81a2:	60 32       	cpi	r22, 0x20	; 32
    81a4:	11 f4       	brne	.+4      	; 0x81aa <consoleIoctl+0x122>
    * tokens, index the pointer to the next character so that we are starting
    * at the first character of the next token on the next call into this
    * function.
    *------------------------------------------------------------------------*/
   if( *pc_in == c_delim)
      pc_in++;
    81a6:	8a 01       	movw	r16, r20
    81a8:	02 c0       	rjmp	.+4      	; 0x81ae <consoleIoctl+0x126>
    * carriage return, or NULL char.
    *------------------------------------------------------------------------*/
   while( (*pc_in != CONSOLE_RETURN_CHAR)
       && (*pc_in != '\0')
       && (*pc_in != c_delim)
       && (c_tokenSizeCount < *pc_bytesRemaining))
    81aa:	98 17       	cp	r25, r24
    81ac:	3c f3       	brlt	.-50     	; 0x817c <consoleIoctl+0xf4>

   /*------------------------------------------------------------------------*
    * Replace 'ending' character (either c_delim, '\n', '\0' or the character
    * at (c_maxSize) with null character).
    *------------------------------------------------------------------------*/
   pc_out[c_tokenSizeCount] = '\0';
    81ae:	e9 2f       	mov	r30, r25
    81b0:	ff 27       	eor	r31, r31
    81b2:	e7 fd       	sbrc	r30, 7
    81b4:	f0 95       	com	r31
    81b6:	e2 0f       	add	r30, r18
    81b8:	f3 1f       	adc	r31, r19
    81ba:	10 82       	st	Z, r1

   c_tokenSizeCount++;
    81bc:	9f 5f       	subi	r25, 0xFF	; 255
    * Since we are extracting a token decrement *pc_maxSize by the number of
    * characters stored in pc_out. An addition 1 is subtracted for the
    * 'exit' character as well since its not included in the original s_count
    * value.
    *------------------------------------------------------------------------*/
   (*pc_bytesRemaining) = (*pc_bytesRemaining) - c_tokenSizeCount;
    81be:	89 1b       	sub	r24, r25
      pc_nextLoc = drv_strTok( pc_nextLoc,
                               &ac_tok[(*pc_tokenCount)][0],
                               ' ',
                               &c_bytesRemaining,
                               &c_tokenSize);
      (*pc_tokenCount)++;
    81c0:	f6 01       	movw	r30, r12
    81c2:	20 81       	ld	r18, Z
    81c4:	2f 5f       	subi	r18, 0xFF	; 255
    81c6:	20 83       	st	Z, r18
      if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)
    81c8:	28 30       	cpi	r18, 0x08	; 8
    81ca:	78 f4       	brcc	.+30     	; 0x81ea <consoleIoctl+0x162>
         /*------------------------------------------------------------------*
          * Error too many tokens....
          *------------------------------------------------------------------*/
         return CONSOLE_TOO_MANY_TOKENS;
      }/*End if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)*/
      else if( c_tokenSize > CONSOLE_MAX_TOKEN_SIZE)
    81cc:	91 31       	cpi	r25, 0x11	; 17
    81ce:	7c f4       	brge	.+30     	; 0x81ee <consoleIoctl+0x166>
      }

      if( t_err < 0)
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
    81d0:	d8 01       	movw	r26, r16
    81d2:	9c 91       	ld	r25, X
   && (c_bytesRemaining > 0));
    81d4:	9a 30       	cpi	r25, 0x0A	; 10
    81d6:	69 f0       	breq	.+26     	; 0x81f2 <consoleIoctl+0x16a>
      }

      if( t_err < 0)
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
    81d8:	99 23       	and	r25, r25
    81da:	59 f0       	breq	.+22     	; 0x81f2 <consoleIoctl+0x16a>
    81dc:	01 15       	cp	r16, r1
    81de:	11 05       	cpc	r17, r1
    81e0:	41 f0       	breq	.+16     	; 0x81f2 <consoleIoctl+0x16a>
   && (c_bytesRemaining > 0));
    81e2:	18 16       	cp	r1, r24
    81e4:	0c f4       	brge	.+2      	; 0x81e8 <consoleIoctl+0x160>
    81e6:	bc cf       	rjmp	.-136    	; 0x8160 <consoleIoctl+0xd8>
    81e8:	04 c0       	rjmp	.+8      	; 0x81f2 <consoleIoctl+0x16a>
      if( (*pc_tokenCount) > CONSOLE_MAX_TOKENS)
      {
         /*------------------------------------------------------------------*
          * Error too many tokens....
          *------------------------------------------------------------------*/
         return CONSOLE_TOO_MANY_TOKENS;
    81ea:	8a ef       	ldi	r24, 0xFA	; 250
    81ec:	03 c0       	rjmp	.+6      	; 0x81f4 <consoleIoctl+0x16c>
      else if( c_tokenSize > CONSOLE_MAX_TOKEN_SIZE)
      {
         /*------------------------------------------------------------------*
          * Error token too large....
          *------------------------------------------------------------------*/
         return CONSOLE_TOKEN_TOO_LARGE;
    81ee:	8b ef       	ldi	r24, 0xFB	; 251
    81f0:	01 c0       	rjmp	.+2      	; 0x81f4 <consoleIoctl+0x16c>
         return t_err;

   }while( (*pc_nextLoc != '\n') && (*pc_nextLoc != '\0') && (pc_nextLoc != NULL)
   && (c_bytesRemaining > 0));

   return CONSOLE_PASSED;
    81f2:	80 e0       	ldi	r24, 0x00	; 0
         /*------------------------------------------------------------------*
          * Parse the string into tokens represented by...
          * <cmd> <arg1> <arg2> <arg3>, where ac_tok[0] = <cmd>, ac_tok[1] =
          * <arg1>, ac_tok[2] = <arg2>, ac_tok[3] = <arg3>
          *------------------------------------------------------------------*/
         i_return = (int32_t)drv_parseMessage( pc_rxBuffPtr,
    81f4:	c8 2e       	mov	r12, r24
    81f6:	dd 24       	eor	r13, r13
    81f8:	c7 fc       	sbrc	r12, 7
    81fa:	d0 94       	com	r13
    81fc:	ed 2c       	mov	r14, r13
    81fe:	fd 2c       	mov	r15, r13
         /*------------------------------------------------------------------*
          * In order to treat the buffer as if its linear (when using the ioctl
          * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers
          * each time we read its contents.
          *------------------------------------------------------------------*/
         ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    8200:	80 91 de 23 	lds	r24, 0x23DE
    8204:	90 91 df 23 	lds	r25, 0x23DF
    8208:	0e 94 6f d8 	call	0x1b0de	; 0x1b0de <ult_resetBuffer>

         hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    820c:	80 91 e1 23 	lds	r24, 0x23E1
    8210:	90 91 e2 23 	lds	r25, 0x23E2
    8214:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <hal_enableUartRxInt>

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_rxMutex);
    8218:	80 91 d8 23 	lds	r24, 0x23D8
    821c:	90 91 d9 23 	lds	r25, 0x23D9
    8220:	ed c0       	rjmp	.+474    	; 0x83fc <consoleIoctl+0x374>
      case CONSOLE_DISPLAY_PROMPT:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    8222:	80 91 da 23 	lds	r24, 0x23DA
    8226:	90 91 db 23 	lds	r25, 0x23DB
    822a:	60 e0       	ldi	r22, 0x00	; 0
    822c:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Set the background color and repaint the entire screen
          *------------------------------------------------------------------*/
         s_size = sprintf( (char *)ac_buff, 
    8230:	ed b7       	in	r30, 0x3d	; 61
    8232:	fe b7       	in	r31, 0x3e	; 62
    8234:	3a 97       	sbiw	r30, 0x0a	; 10
    8236:	ed bf       	out	0x3d, r30	; 61
    8238:	fe bf       	out	0x3e, r31	; 62
    823a:	31 96       	adiw	r30, 0x01	; 1
    823c:	8e 01       	movw	r16, r28
    823e:	0f 5f       	subi	r16, 0xFF	; 255
    8240:	1f 4f       	sbci	r17, 0xFF	; 255
    8242:	ad b7       	in	r26, 0x3d	; 61
    8244:	be b7       	in	r27, 0x3e	; 62
    8246:	11 96       	adiw	r26, 0x01	; 1
    8248:	0d 93       	st	X+, r16
    824a:	1c 93       	st	X, r17
    824c:	12 97       	sbiw	r26, 0x02	; 2
    824e:	80 e0       	ldi	r24, 0x00	; 0
    8250:	90 e2       	ldi	r25, 0x20	; 32
    8252:	82 83       	std	Z+2, r24	; 0x02
    8254:	93 83       	std	Z+3, r25	; 0x03
    8256:	80 91 e4 23 	lds	r24, 0x23E4
    825a:	99 27       	eor	r25, r25
    825c:	87 fd       	sbrc	r24, 7
    825e:	90 95       	com	r25
    8260:	84 83       	std	Z+4, r24	; 0x04
    8262:	95 83       	std	Z+5, r25	; 0x05
    8264:	86 ee       	ldi	r24, 0xE6	; 230
    8266:	93 e2       	ldi	r25, 0x23	; 35
    8268:	86 83       	std	Z+6, r24	; 0x06
    826a:	97 83       	std	Z+7, r25	; 0x07
    826c:	80 91 e5 23 	lds	r24, 0x23E5
    8270:	99 27       	eor	r25, r25
    8272:	87 fd       	sbrc	r24, 7
    8274:	90 95       	com	r25
    8276:	80 87       	std	Z+8, r24	; 0x08
    8278:	91 87       	std	Z+9, r25	; 0x09
    827a:	0e 94 ba f7 	call	0x1ef74	; 0x1ef74 <sprintf>
    827e:	ac 01       	movw	r20, r24
                           "\e[1;3%cm[%s]#\e[1;3%cm ",
                           gt_consoleDev.c_cmdPromptColor,
                           gt_consoleDev.ac_dirName,
                           gt_consoleDev.c_fgColor);

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    8280:	80 91 e1 23 	lds	r24, 0x23E1
    8284:	90 91 e2 23 	lds	r25, 0x23E2
    8288:	ed b7       	in	r30, 0x3d	; 61
    828a:	fe b7       	in	r31, 0x3e	; 62
    828c:	3a 96       	adiw	r30, 0x0a	; 10
    828e:	ed bf       	out	0x3d, r30	; 61
    8290:	fe bf       	out	0x3e, r31	; 62
    8292:	b8 01       	movw	r22, r16
    8294:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <hal_uartWriteBlock>
                             s_size);

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    8298:	80 91 da 23 	lds	r24, 0x23DA
    829c:	90 91 db 23 	lds	r25, 0x23DB
    82a0:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
   int32_t i_return = (int32_t)CONSOLE_PASSED;
    82a4:	cc 24       	eor	r12, r12
    82a6:	dd 24       	eor	r13, r13
    82a8:	76 01       	movw	r14, r12
         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);

      break;/*End case CONSOLE_DISPLAY_PROMPT:*/
    82aa:	bc c0       	rjmp	.+376    	; 0x8424 <consoleIoctl+0x39c>
      case CONSOLE_SET_PROMPT:
      {
         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    82ac:	80 91 da 23 	lds	r24, 0x23DA
    82b0:	90 91 db 23 	lds	r25, 0x23DB
    82b4:	60 e0       	ldi	r22, 0x00	; 0
    82b6:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         char *pc_name = (char *)((uint16_t)i_arguments);
         sprintf( gt_consoleDev.ac_dirName, "%s", pc_name);
    82ba:	86 ee       	ldi	r24, 0xE6	; 230
    82bc:	93 e2       	ldi	r25, 0x23	; 35
    82be:	b6 01       	movw	r22, r12
    82c0:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <strcpy>
    82c4:	e9 cf       	rjmp	.-46     	; 0x8298 <consoleIoctl+0x210>
      case CONSOLE_RESET_TERMINAL:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    82c6:	80 91 da 23 	lds	r24, 0x23DA
    82ca:	90 91 db 23 	lds	r25, 0x23DB
    82ce:	60 e0       	ldi	r22, 0x00	; 0
    82d0:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         /*------------------------------------------------------------------*
          * Reset the terminal to its default settings...
          *------------------------------------------------------------------*/
         s_size = sprintf_P((char *)ac_buff, PSTR("\ec"));
    82d4:	00 d0       	rcall	.+0      	; 0x82d6 <consoleIoctl+0x24e>
    82d6:	0f 92       	push	r0
    82d8:	8e 01       	movw	r16, r28
    82da:	0f 5f       	subi	r16, 0xFF	; 255
    82dc:	1f 4f       	sbci	r17, 0xFF	; 255
    82de:	ad b7       	in	r26, 0x3d	; 61
    82e0:	be b7       	in	r27, 0x3e	; 62
    82e2:	11 96       	adiw	r26, 0x01	; 1
    82e4:	0d 93       	st	X+, r16
    82e6:	1c 93       	st	X, r17
    82e8:	12 97       	sbiw	r26, 0x02	; 2
    82ea:	80 e2       	ldi	r24, 0x20	; 32
    82ec:	92 e0       	ldi	r25, 0x02	; 2
    82ee:	13 96       	adiw	r26, 0x03	; 3
    82f0:	8d 93       	st	X+, r24
    82f2:	9c 93       	st	X, r25
    82f4:	14 97       	sbiw	r26, 0x04	; 4
    82f6:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
    82fa:	ac 01       	movw	r20, r24

         hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    82fc:	80 91 e1 23 	lds	r24, 0x23E1
    8300:	90 91 e2 23 	lds	r25, 0x23E2
    8304:	0f 90       	pop	r0
    8306:	0f 90       	pop	r0
    8308:	0f 90       	pop	r0
    830a:	0f 90       	pop	r0
    830c:	c2 cf       	rjmp	.-124    	; 0x8292 <consoleIoctl+0x20a>
      case CONSOLE_SET_BG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    830e:	80 91 da 23 	lds	r24, 0x23DA
    8312:	90 91 db 23 	lds	r25, 0x23DB
    8316:	60 e0       	ldi	r22, 0x00	; 0
    8318:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    831c:	d7 01       	movw	r26, r14
    831e:	c6 01       	movw	r24, r12
    8320:	c0 97       	sbiw	r24, 0x30	; 48
    8322:	a1 09       	sbc	r26, r1
    8324:	b1 09       	sbc	r27, r1
    8326:	88 30       	cpi	r24, 0x08	; 8
    8328:	91 05       	cpc	r25, r1
    832a:	a1 05       	cpc	r26, r1
    832c:	b1 05       	cpc	r27, r1
    832e:	08 f0       	brcs	.+2      	; 0x8332 <consoleIoctl+0x2aa>
    8330:	59 c0       	rjmp	.+178    	; 0x83e4 <consoleIoctl+0x35c>
         else
         {
            /*---------------------------------------------------------------*
             * Set the background color and repaint the entire screen
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    8332:	00 d0       	rcall	.+0      	; 0x8334 <consoleIoctl+0x2ac>
    8334:	00 d0       	rcall	.+0      	; 0x8336 <consoleIoctl+0x2ae>
    8336:	ed b7       	in	r30, 0x3d	; 61
    8338:	fe b7       	in	r31, 0x3e	; 62
    833a:	31 96       	adiw	r30, 0x01	; 1
    833c:	8e 01       	movw	r16, r28
    833e:	0f 5f       	subi	r16, 0xFF	; 255
    8340:	1f 4f       	sbci	r17, 0xFF	; 255
    8342:	ad b7       	in	r26, 0x3d	; 61
    8344:	be b7       	in	r27, 0x3e	; 62
    8346:	11 96       	adiw	r26, 0x01	; 1
    8348:	0d 93       	st	X+, r16
    834a:	1c 93       	st	X, r17
    834c:	12 97       	sbiw	r26, 0x02	; 2
    834e:	87 e1       	ldi	r24, 0x17	; 23
    8350:	90 e2       	ldi	r25, 0x20	; 32
    8352:	31 c0       	rjmp	.+98     	; 0x83b6 <consoleIoctl+0x32e>

      break;/*End case CONSOLE_SET_BG_COLOR:*/

      case CONSOLE_SET_PROMPT_COLOR:

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    8354:	da 01       	movw	r26, r20
    8356:	c9 01       	movw	r24, r18
    8358:	c0 97       	sbiw	r24, 0x30	; 48
    835a:	a1 09       	sbc	r26, r1
    835c:	b1 09       	sbc	r27, r1
    835e:	88 30       	cpi	r24, 0x08	; 8
    8360:	91 05       	cpc	r25, r1
    8362:	a1 05       	cpc	r26, r1
    8364:	b1 05       	cpc	r27, r1
    8366:	08 f0       	brcs	.+2      	; 0x836a <consoleIoctl+0x2e2>
    8368:	55 c0       	rjmp	.+170    	; 0x8414 <consoleIoctl+0x38c>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_cmdPromptColor = (int8_t)i_arguments;
    836a:	20 93 e4 23 	sts	0x23E4, r18
    836e:	9a cf       	rjmp	.-204    	; 0x82a4 <consoleIoctl+0x21c>
      case CONSOLE_SET_FG_COLOR:

         /*------------------------------------------------------------------*
          * We are going to access global memory or a register, so perform lock
          *------------------------------------------------------------------*/
         arb_wait( gt_consoleDev.t_txMutex,
    8370:	80 91 da 23 	lds	r24, 0x23DA
    8374:	90 91 db 23 	lds	r25, 0x23DB
    8378:	60 e0       	ldi	r22, 0x00	; 0
    837a:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
    837e:	d7 01       	movw	r26, r14
    8380:	c6 01       	movw	r24, r12
    8382:	c0 97       	sbiw	r24, 0x30	; 48
    8384:	a1 09       	sbc	r26, r1
    8386:	b1 09       	sbc	r27, r1
    8388:	88 30       	cpi	r24, 0x08	; 8
    838a:	91 05       	cpc	r25, r1
    838c:	a1 05       	cpc	r26, r1
    838e:	b1 05       	cpc	r27, r1
    8390:	48 f5       	brcc	.+82     	; 0x83e4 <consoleIoctl+0x35c>
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
         }
         else
         {
            gt_consoleDev.c_fgColor = (int8_t)i_arguments;
    8392:	c0 92 e5 23 	sts	0x23E5, r12
            /*---------------------------------------------------------------*
             * Set the foreground color...
             *---------------------------------------------------------------*/
            s_size = sprintf( (char *)ac_buff, 
    8396:	00 d0       	rcall	.+0      	; 0x8398 <consoleIoctl+0x310>
    8398:	00 d0       	rcall	.+0      	; 0x839a <consoleIoctl+0x312>
    839a:	ed b7       	in	r30, 0x3d	; 61
    839c:	fe b7       	in	r31, 0x3e	; 62
    839e:	31 96       	adiw	r30, 0x01	; 1
    83a0:	8e 01       	movw	r16, r28
    83a2:	0f 5f       	subi	r16, 0xFF	; 255
    83a4:	1f 4f       	sbci	r17, 0xFF	; 255
    83a6:	ad b7       	in	r26, 0x3d	; 61
    83a8:	be b7       	in	r27, 0x3e	; 62
    83aa:	11 96       	adiw	r26, 0x01	; 1
    83ac:	0d 93       	st	X+, r16
    83ae:	1c 93       	st	X, r17
    83b0:	12 97       	sbiw	r26, 0x02	; 2
    83b2:	82 e2       	ldi	r24, 0x22	; 34
    83b4:	90 e2       	ldi	r25, 0x20	; 32
    83b6:	82 83       	std	Z+2, r24	; 0x02
    83b8:	93 83       	std	Z+3, r25	; 0x03
    83ba:	c4 82       	std	Z+4, r12	; 0x04
    83bc:	15 82       	std	Z+5, r1	; 0x05
    83be:	0e 94 ba f7 	call	0x1ef74	; 0x1ef74 <sprintf>
    83c2:	ac 01       	movw	r20, r24
                              "\e[1;3%cm", 
                              (char)i_arguments);

            hal_uartWriteBlock( gt_consoleDev.t_uHandle,
    83c4:	80 91 e1 23 	lds	r24, 0x23E1
    83c8:	90 91 e2 23 	lds	r25, 0x23E2
    83cc:	ed b7       	in	r30, 0x3d	; 61
    83ce:	fe b7       	in	r31, 0x3e	; 62
    83d0:	36 96       	adiw	r30, 0x06	; 6
    83d2:	ed bf       	out	0x3d, r30	; 61
    83d4:	fe bf       	out	0x3e, r31	; 62
    83d6:	b8 01       	movw	r22, r16
    83d8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <hal_uartWriteBlock>

static int32_t consoleIoctl( t_DEVHANDLE t_handle,
                             uint16_t s_command,
                             int32_t i_arguments)
{
   int32_t i_return = (int32_t)CONSOLE_PASSED;
    83dc:	cc 24       	eor	r12, r12
    83de:	dd 24       	eor	r13, r13
    83e0:	76 01       	movw	r14, r12
    83e2:	08 c0       	rjmp	.+16     	; 0x83f4 <consoleIoctl+0x36c>
         arb_wait( gt_consoleDev.t_txMutex,
                   0);

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
    83e4:	29 ef       	ldi	r18, 0xF9	; 249
    83e6:	c2 2e       	mov	r12, r18
    83e8:	2f ef       	ldi	r18, 0xFF	; 255
    83ea:	d2 2e       	mov	r13, r18
    83ec:	2f ef       	ldi	r18, 0xFF	; 255
    83ee:	e2 2e       	mov	r14, r18
    83f0:	2f ef       	ldi	r18, 0xFF	; 255
    83f2:	f2 2e       	mov	r15, r18
         }

         /*------------------------------------------------------------------*
          * Release the lock
          *------------------------------------------------------------------*/
         arb_signal( gt_consoleDev.t_txMutex);
    83f4:	80 91 da 23 	lds	r24, 0x23DA
    83f8:	90 91 db 23 	lds	r25, 0x23DB
    83fc:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

      break;/*End case CONSOLE_SET_FG_COLOR:*/
    8400:	11 c0       	rjmp	.+34     	; 0x8424 <consoleIoctl+0x39c>

      default:

         i_return = (int32_t)CONSOLE_INVALID_CMD;
    8402:	9d ef       	ldi	r25, 0xFD	; 253
    8404:	c9 2e       	mov	r12, r25
    8406:	9f ef       	ldi	r25, 0xFF	; 255
    8408:	d9 2e       	mov	r13, r25
    840a:	9f ef       	ldi	r25, 0xFF	; 255
    840c:	e9 2e       	mov	r14, r25
    840e:	9f ef       	ldi	r25, 0xFF	; 255
    8410:	f9 2e       	mov	r15, r25
    8412:	08 c0       	rjmp	.+16     	; 0x8424 <consoleIoctl+0x39c>

      case CONSOLE_SET_PROMPT_COLOR:

         if( (i_arguments < CONSOLE_BLACK) || (i_arguments > CONSOLE_WHITE))
         {
            i_return = (int32_t)CONSOLE_INVALID_COLOR;
    8414:	89 ef       	ldi	r24, 0xF9	; 249
    8416:	c8 2e       	mov	r12, r24
    8418:	8f ef       	ldi	r24, 0xFF	; 255
    841a:	d8 2e       	mov	r13, r24
    841c:	8f ef       	ldi	r24, 0xFF	; 255
    841e:	e8 2e       	mov	r14, r24
    8420:	8f ef       	ldi	r24, 0xFF	; 255
    8422:	f8 2e       	mov	r15, r24

   }/*End switch( (t_consoleCmd)s_command)*/

   return i_return;

}/*End consoleIoctl*/
    8424:	b6 01       	movw	r22, r12
    8426:	c7 01       	movw	r24, r14
    8428:	aa 96       	adiw	r28, 0x2a	; 42
    842a:	cd bf       	out	0x3d, r28	; 61
    842c:	de bf       	out	0x3e, r29	; 62
    842e:	df 91       	pop	r29
    8430:	cf 91       	pop	r28
    8432:	1f 91       	pop	r17
    8434:	0f 91       	pop	r16
    8436:	ff 90       	pop	r15
    8438:	ef 90       	pop	r14
    843a:	df 90       	pop	r13
    843c:	cf 90       	pop	r12
    843e:	08 95       	ret

00008440 <rxComplete>:
   return CONSOLE_PASSED;

}/*End usr_parseMessage*/

static void rxComplete( uint16_t s_byte)
{
    8440:	0f 93       	push	r16
    8442:	1f 93       	push	r17
    8444:	cf 93       	push	r28
    8446:	df 93       	push	r29
    8448:	ec 01       	movw	r28, r24
   uint16_t s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    844a:	80 91 de 23 	lds	r24, 0x23DE
    844e:	90 91 df 23 	lds	r25, 0x23DF
    8452:	0e 94 f3 d6 	call	0x1ade6	; 0x1ade6 <utl_getBufferFullLevel>
    8456:	8c 01       	movw	r16, r24
   uint16_t s_bufferSize  = utl_getBufferSize( gt_consoleDev.t_rxBuffer);
    8458:	80 91 de 23 	lds	r24, 0x23DE
    845c:	90 91 df 23 	lds	r25, 0x23DF
    8460:	0e 94 07 d7 	call	0x1ae0e	; 0x1ae0e <utl_getBufferSize>

   gt_consoleDev.b_rxActive = true;
    8464:	21 e0       	ldi	r18, 0x01	; 1
    8466:	20 93 e3 23 	sts	0x23E3, r18

   /*------------------------------------------------------------------------*
    * If a backspace has been entered, erase the bytes in the buffer until
    * there is no longer any more data available.
    *------------------------------------------------------------------------*/
   if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))
    846a:	cf 37       	cpi	r28, 0x7F	; 127
    846c:	d1 05       	cpc	r29, r1
    846e:	89 f4       	brne	.+34     	; 0x8492 <rxComplete+0x52>
    8470:	01 15       	cp	r16, r1
    8472:	11 05       	cpc	r17, r1
    8474:	a9 f1       	breq	.+106    	; 0x84e0 <rxComplete+0xa0>
   {
      /*---------------------------------------------------------------------*
       * Echo back received byte- in this case the backspace character.
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    8476:	80 91 e1 23 	lds	r24, 0x23E1
    847a:	90 91 e2 23 	lds	r25, 0x23E2
    847e:	6f e7       	ldi	r22, 0x7F	; 127
    8480:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <hal_uartWriteByte>
                         s_byte);

      /*---------------------------------------------------------------------*
       * Remove the last byte in the buffer...
       *---------------------------------------------------------------------*/
      utl_buffEraseTailByte( gt_consoleDev.t_rxBuffer);
    8484:	80 91 de 23 	lds	r24, 0x23DE
    8488:	90 91 df 23 	lds	r25, 0x23DF
    848c:	0e 94 ec d7 	call	0x1afd8	; 0x1afd8 <utl_buffEraseTailByte>
    8490:	3f c0       	rjmp	.+126    	; 0x8510 <rxComplete+0xd0>

   }/*End if( (s_byte == CONSOLE_BACKSPACE_CHAR) && (s_bufferLevel > 0))*/
   else if( s_byte == CONSOLE_RETURN_CHAR)
    8492:	cd 30       	cpi	r28, 0x0D	; 13
    8494:	d1 05       	cpc	r29, r1
    8496:	21 f5       	brne	.+72     	; 0x84e0 <rxComplete+0xa0>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    8498:	80 91 e1 23 	lds	r24, 0x23E1
    849c:	90 91 e2 23 	lds	r25, 0x23E2
    84a0:	6d e0       	ldi	r22, 0x0D	; 13
    84a2:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <hal_uartWriteByte>
                         s_byte);

      /*------------------------------------------------------------------*
       * Write new line character out uart interface
       *------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    84a6:	80 91 e1 23 	lds	r24, 0x23E1
    84aa:	90 91 e2 23 	lds	r25, 0x23E2
    84ae:	6a e0       	ldi	r22, 0x0A	; 10
    84b0:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <hal_uartWriteByte>
                         '\n');

      gt_consoleDev.b_rxActive = false;
    84b4:	10 92 e3 23 	sts	0x23E3, r1

      /*------------------------------------------------------------------*
       * Disable the receive interrupt until the data has been handled.
       *------------------------------------------------------------------*/
      hal_disableUartRxInt( gt_consoleDev.t_uHandle);
    84b8:	80 91 e1 23 	lds	r24, 0x23E1
    84bc:	90 91 e2 23 	lds	r25, 0x23E2
    84c0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <hal_disableUartRxInt>

      /*------------------------------------------------------------------*
       * Add a the NULL character to the end of the buffer - this is for
       * data parsing purposes only.
       *------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    84c4:	80 91 de 23 	lds	r24, 0x23DE
    84c8:	90 91 df 23 	lds	r25, 0x23DF
    84cc:	60 e0       	ldi	r22, 0x00	; 0
    84ce:	0e 94 2f d7 	call	0x1ae5e	; 0x1ae5e <utl_writeByte>

      /*------------------------------------------------------------------*
       * Signal any waiting threads that a carriage return has been
       * received.
       *------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxBlockingSem);
    84d2:	80 91 dc 23 	lds	r24, 0x23DC
    84d6:	90 91 dd 23 	lds	r25, 0x23DD
    84da:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>
    84de:	18 c0       	rjmp	.+48     	; 0x8510 <rxComplete+0xd0>


   }/*End else if( c_byte == CONSOLE_BACKSPACE_CHAR)*/
   else if( (s_bufferLevel < (s_bufferSize - 1)) && (s_byte !=
    84e0:	01 97       	sbiw	r24, 0x01	; 1
    84e2:	08 17       	cp	r16, r24
    84e4:	19 07       	cpc	r17, r25
    84e6:	a0 f4       	brcc	.+40     	; 0x8510 <rxComplete+0xd0>
    84e8:	cf 37       	cpi	r28, 0x7F	; 127
    84ea:	d1 05       	cpc	r29, r1
    84ec:	89 f0       	breq	.+34     	; 0x8510 <rxComplete+0xd0>
   CONSOLE_BACKSPACE_CHAR) && (s_byte != 27)) /*Leave room for NULL char*/
    84ee:	cb 31       	cpi	r28, 0x1B	; 27
    84f0:	d1 05       	cpc	r29, r1
    84f2:	71 f0       	breq	.+28     	; 0x8510 <rxComplete+0xd0>
   {

      /*---------------------------------------------------------------------*
       * Echo back received byte....
       *---------------------------------------------------------------------*/
      hal_uartWriteByte( gt_consoleDev.t_uHandle,
    84f4:	80 91 e1 23 	lds	r24, 0x23E1
    84f8:	90 91 e2 23 	lds	r25, 0x23E2
    84fc:	6c 2f       	mov	r22, r28
    84fe:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <hal_uartWriteByte>

      /*---------------------------------------------------------------------*
       * Fill RX buffer with received bytes until the buffer is full
       * leaving room for the insertion of the NULL character.
       *---------------------------------------------------------------------*/
      utl_writeByte( gt_consoleDev.t_rxBuffer,
    8502:	80 91 de 23 	lds	r24, 0x23DE
    8506:	90 91 df 23 	lds	r25, 0x23DF
    850a:	6c 2f       	mov	r22, r28
    850c:	0e 94 2f d7 	call	0x1ae5e	; 0x1ae5e <utl_writeByte>
                     s_byte);

   }

}/*End rxComplete*/
    8510:	df 91       	pop	r29
    8512:	cf 91       	pop	r28
    8514:	1f 91       	pop	r17
    8516:	0f 91       	pop	r16
    8518:	08 95       	ret

0000851a <consoleRead>:
}/*End consoleOpen*/

static int16_t consoleRead( t_DEVHANDLE t_handle,
                            int8_t *pc_buff,
                            uint16_t s_size)
{
    851a:	cf 92       	push	r12
    851c:	df 92       	push	r13
    851e:	ef 92       	push	r14
    8520:	ff 92       	push	r15
    8522:	0f 93       	push	r16
    8524:	1f 93       	push	r17
    8526:	cf 93       	push	r28
    8528:	df 93       	push	r29
    852a:	0f 92       	push	r0
    852c:	0f 92       	push	r0
    852e:	cd b7       	in	r28, 0x3d	; 61
    8530:	de b7       	in	r29, 0x3e	; 62
    8532:	89 83       	std	Y+1, r24	; 0x01
    8534:	9a 83       	std	Y+2, r25	; 0x02
    8536:	6b 01       	movw	r12, r22
    8538:	7a 01       	movw	r14, r20
   int16_t s_bufferLevel = 0;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxMutex,
    853a:	80 91 d8 23 	lds	r24, 0x23D8
    853e:	90 91 d9 23 	lds	r25, 0x23D9
    8542:	60 e0       	ldi	r22, 0x00	; 0
    8544:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Wait for data to be available in the RX buffer.
    *------------------------------------------------------------------------*/
   arb_wait( gt_consoleDev.t_rxBlockingSem,
    8548:	80 91 dc 23 	lds	r24, 0x23DC
    854c:	90 91 dd 23 	lds	r25, 0x23DD
    8550:	60 e0       	ldi	r22, 0x00	; 0
    8552:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Level plus an extra NULL character.
    *------------------------------------------------------------------------*/
   s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);
    8556:	80 91 de 23 	lds	r24, 0x23DE
    855a:	90 91 df 23 	lds	r25, 0x23DF
    855e:	0e 94 f3 d6 	call	0x1ade6	; 0x1ade6 <utl_getBufferFullLevel>
    8562:	8c 01       	movw	r16, r24
   /*------------------------------------------------------------------------*
    * Can the user-space buffer hold all the data plus the NULL character?
    *------------------------------------------------------------------------*/
   if( s_bufferLevel > s_size)
   {
      ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    8564:	80 91 de 23 	lds	r24, 0x23DE
    8568:	90 91 df 23 	lds	r25, 0x23DF
   s_bufferLevel = utl_getBufferFullLevel( gt_consoleDev.t_rxBuffer);

   /*------------------------------------------------------------------------*
    * Can the user-space buffer hold all the data plus the NULL character?
    *------------------------------------------------------------------------*/
   if( s_bufferLevel > s_size)
    856c:	e0 16       	cp	r14, r16
    856e:	f1 06       	cpc	r15, r17
    8570:	88 f4       	brcc	.+34     	; 0x8594 <consoleRead+0x7a>
   {
      ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    8572:	0e 94 6f d8 	call	0x1b0de	; 0x1b0de <ult_resetBuffer>

      hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    8576:	80 91 e1 23 	lds	r24, 0x23E1
    857a:	90 91 e2 23 	lds	r25, 0x23E2
    857e:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <hal_enableUartRxInt>

      /*---------------------------------------------------------------------*
       * Release the lock
       *---------------------------------------------------------------------*/
      arb_signal( gt_consoleDev.t_rxMutex);
    8582:	80 91 d8 23 	lds	r24, 0x23D8
    8586:	90 91 d9 23 	lds	r25, 0x23D9
    858a:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>
    858e:	04 ef       	ldi	r16, 0xF4	; 244
    8590:	1f ef       	ldi	r17, 0xFF	; 255
    8592:	16 c0       	rjmp	.+44     	; 0x85c0 <consoleRead+0xa6>
      return (int16_t)ARB_READ_ERROR;

   }/*End if( s_bufferLevel > s_size)*/

   utl_readBlock( gt_consoleDev.t_rxBuffer,
    8594:	b6 01       	movw	r22, r12
    8596:	a8 01       	movw	r20, r16
    8598:	0e 94 16 d8 	call	0x1b02c	; 0x1b02c <utl_readBlock>
   /*------------------------------------------------------------------------*
    * In order to treat the buffer as if its linear (when using the ioctl
    * command 'CONSOLE_PARSE_CMD_LINE') we need to reset the pointers each
    * time we read its contents.
    *------------------------------------------------------------------------*/
   ult_resetBuffer( gt_consoleDev.t_rxBuffer);
    859c:	80 91 de 23 	lds	r24, 0x23DE
    85a0:	90 91 df 23 	lds	r25, 0x23DF
    85a4:	0e 94 6f d8 	call	0x1b0de	; 0x1b0de <ult_resetBuffer>

   hal_enableUartRxInt( gt_consoleDev.t_uHandle);
    85a8:	80 91 e1 23 	lds	r24, 0x23E1
    85ac:	90 91 e2 23 	lds	r25, 0x23E2
    85b0:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <hal_enableUartRxInt>

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_consoleDev.t_rxMutex);
    85b4:	80 91 d8 23 	lds	r24, 0x23D8
    85b8:	90 91 d9 23 	lds	r25, 0x23D9
    85bc:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return s_bufferLevel;

}/*End consoleRead*/
    85c0:	c8 01       	movw	r24, r16
    85c2:	0f 90       	pop	r0
    85c4:	0f 90       	pop	r0
    85c6:	df 91       	pop	r29
    85c8:	cf 91       	pop	r28
    85ca:	1f 91       	pop	r17
    85cc:	0f 91       	pop	r16
    85ce:	ff 90       	pop	r15
    85d0:	ef 90       	pop	r14
    85d2:	df 90       	pop	r13
    85d4:	cf 90       	pop	r12
    85d6:	08 95       	ret

000085d8 <drv_consoleInit>:
   return t_err;

}/*End consoleClose*/

t_error drv_consoleInit( t_consoleSetup t_setup)
{
    85d8:	af 92       	push	r10
    85da:	bf 92       	push	r11
    85dc:	cf 92       	push	r12
    85de:	df 92       	push	r13
    85e0:	ef 92       	push	r14
    85e2:	ff 92       	push	r15
    85e4:	0f 93       	push	r16
    85e6:	1f 93       	push	r17
    85e8:	cf 93       	push	r28
    85ea:	df 93       	push	r29
    85ec:	cd b7       	in	r28, 0x3d	; 61
    85ee:	de b7       	in	r29, 0x3e	; 62
    85f0:	64 97       	sbiw	r28, 0x14	; 20
    85f2:	cd bf       	out	0x3d, r28	; 61
    85f4:	de bf       	out	0x3e, r29	; 62
    85f6:	4f 87       	std	Y+15, r20	; 0x0f
    85f8:	58 8b       	std	Y+16, r21	; 0x10
    85fa:	69 8b       	std	Y+17, r22	; 0x11
    85fc:	7a 8b       	std	Y+18, r23	; 0x12
    85fe:	8b 8b       	std	Y+19, r24	; 0x13
    8600:	9c 8b       	std	Y+20, r25	; 0x14
    * Global Inline functions
    *------------------------------------------------------------------------*/
   static inline t_deviceId __attribute__((always_inline))
   arb_createDevId( uint8_t c_major, uint8_t c_minor)
   {
      return( ((uint16_t)c_major << 8) | (uint16_t)c_minor);
    8602:	79 2f       	mov	r23, r25
   t_uartConfig t_uConf;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "consoleDevice0",
    8604:	8b e2       	ldi	r24, 0x2B	; 43
    8606:	90 e2       	ldi	r25, 0x20	; 32
    8608:	60 e0       	ldi	r22, 0x00	; 0
    860a:	4c e3       	ldi	r20, 0x3C	; 60
    860c:	50 e2       	ldi	r21, 0x20	; 32
    860e:	0e 94 13 bf 	call	0x17e26	; 0x17e26 <arb_registerDevice>
    8612:	18 2f       	mov	r17, r24
                               arb_createDevId( t_setup.c_majorNum, 0),
                               &gt_consoleDevOps);

   if( t_err < 0)
    8614:	87 fd       	sbrc	r24, 7
    8616:	b6 c0       	rjmp	.+364    	; 0x8784 <drv_consoleInit+0x1ac>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxMutex = arb_semaphoreCreate( MUTEX);
    8618:	82 e0       	ldi	r24, 0x02	; 2
    861a:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
    861e:	80 93 d8 23 	sts	0x23D8, r24
    8622:	90 93 d9 23 	sts	0x23D9, r25

   if( gt_consoleDev.t_rxMutex < 0)
    8626:	80 91 d8 23 	lds	r24, 0x23D8
    862a:	90 91 d9 23 	lds	r25, 0x23D9
    862e:	97 ff       	sbrs	r25, 7
    8630:	06 c0       	rjmp	.+12     	; 0x863e <drv_consoleInit+0x66>
   {
      t_err = (t_error)gt_consoleDev.t_rxMutex;
    8632:	80 91 d8 23 	lds	r24, 0x23D8
    8636:	90 91 d9 23 	lds	r25, 0x23D9
    863a:	18 2f       	mov	r17, r24
      goto failed2;
    863c:	9f c0       	rjmp	.+318    	; 0x877c <drv_consoleInit+0x1a4>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. We will use this semaphore for
    * signaling the user-space program when the RX buffer has data.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBlockingSem = arb_semaphoreCreate( COUNTING);
    863e:	80 e0       	ldi	r24, 0x00	; 0
    8640:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
    8644:	80 93 dc 23 	sts	0x23DC, r24
    8648:	90 93 dd 23 	sts	0x23DD, r25

   if( gt_consoleDev.t_rxBlockingSem < 0)
    864c:	80 91 dc 23 	lds	r24, 0x23DC
    8650:	90 91 dd 23 	lds	r25, 0x23DD
    8654:	97 ff       	sbrs	r25, 7
    8656:	06 c0       	rjmp	.+12     	; 0x8664 <drv_consoleInit+0x8c>
   {
      t_err = (t_error)gt_consoleDev.t_rxBlockingSem;
    8658:	80 91 dc 23 	lds	r24, 0x23DC
    865c:	90 91 dd 23 	lds	r25, 0x23DD
    8660:	18 2f       	mov	r17, r24
      goto failed3;
    8662:	85 c0       	rjmp	.+266    	; 0x876e <drv_consoleInit+0x196>
   }/*End if( gt_consoleDev.t_rxBlockingSem < 0)*/

   /*------------------------------------------------------------------------*
    * Grab handle to console UART
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_uHandle = hal_requestUartChannel( t_setup.c_uartId);
    8664:	8b 89       	ldd	r24, Y+19	; 0x13
    8666:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <hal_requestUartChannel>
    866a:	80 93 e1 23 	sts	0x23E1, r24
    866e:	90 93 e2 23 	sts	0x23E2, r25
   if( gt_consoleDev.t_uHandle < 0)
    8672:	80 91 e1 23 	lds	r24, 0x23E1
    8676:	90 91 e2 23 	lds	r25, 0x23E2
    867a:	97 fd       	sbrc	r25, 7
    867c:	70 c0       	rjmp	.+224    	; 0x875e <drv_consoleInit+0x186>
   {
      t_err = ARB_HAL_ERROR;
      goto failed4;
   }

   t_uConf.t_comMd = ASYNC;
    867e:	19 82       	std	Y+1, r1	; 0x01
   t_uConf.t_charSz = CHAR_8BIT;
    8680:	83 e0       	ldi	r24, 0x03	; 3
    8682:	8a 83       	std	Y+2, r24	; 0x02
   t_uConf.t_parityMd = NO_PARITY;
    8684:	1b 82       	std	Y+3, r1	; 0x03
   t_uConf.t_stopBitMd = ONE_STOP_BIT;
    8686:	1c 82       	std	Y+4, r1	; 0x04
   t_uConf.i_baudRate = t_setup.i_baudRate;
    8688:	8f 85       	ldd	r24, Y+15	; 0x0f
    868a:	98 89       	ldd	r25, Y+16	; 0x10
    868c:	a9 89       	ldd	r26, Y+17	; 0x11
    868e:	ba 89       	ldd	r27, Y+18	; 0x12
    8690:	8d 83       	std	Y+5, r24	; 0x05
    8692:	9e 83       	std	Y+6, r25	; 0x06
    8694:	af 83       	std	Y+7, r26	; 0x07
    8696:	b8 87       	std	Y+8, r27	; 0x08
   t_uConf.b_enRxDma = false;
    8698:	1a 86       	std	Y+10, r1	; 0x0a
   t_uConf.b_enTxDma = false;
    869a:	19 86       	std	Y+9, r1	; 0x09
   t_uConf.pf_rxCallBack = &rxComplete;
    869c:	80 e2       	ldi	r24, 0x20	; 32
    869e:	92 e4       	ldi	r25, 0x42	; 66
    86a0:	8b 87       	std	Y+11, r24	; 0x0b
    86a2:	9c 87       	std	Y+12, r25	; 0x0c
   /*------------------------------------------------------------------------*
    * By setting the tx call-back to NULL, all data transfers over the uart
    * are performed "in-place".
    *------------------------------------------------------------------------*/
   t_uConf.pf_txCallBack = NULL;
    86a4:	1d 86       	std	Y+13, r1	; 0x0d
    86a6:	1e 86       	std	Y+14, r1	; 0x0e

   /*------------------------------------------------------------------------*
    * Configure console UART
    *------------------------------------------------------------------------*/
   if( hal_configureUartChannel( gt_consoleDev.t_uHandle,
    86a8:	80 91 e1 23 	lds	r24, 0x23E1
    86ac:	90 91 e2 23 	lds	r25, 0x23E2
    86b0:	aa 24       	eor	r10, r10
    86b2:	63 e0       	ldi	r22, 0x03	; 3
    86b4:	b6 2e       	mov	r11, r22
    86b6:	cc 24       	eor	r12, r12
    86b8:	dd 24       	eor	r13, r13
    86ba:	ed 80       	ldd	r14, Y+5	; 0x05
    86bc:	fe 80       	ldd	r15, Y+6	; 0x06
    86be:	0f 81       	ldd	r16, Y+7	; 0x07
    86c0:	18 85       	ldd	r17, Y+8	; 0x08
    86c2:	20 e0       	ldi	r18, 0x00	; 0
    86c4:	30 e0       	ldi	r19, 0x00	; 0
    86c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    86c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    86ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    86cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    86ce:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <hal_configureUartChannel>
    86d2:	87 fd       	sbrc	r24, 7
    86d4:	39 c0       	rjmp	.+114    	; 0x8748 <drv_consoleInit+0x170>
   /*------------------------------------------------------------------------*
    * Allocate RX buffer of size = A*B1, where A = the max number of
    * possible tokens, B = the size of each token including a terminating
    * character, and 1 byte for the character that ends the string.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBuffer = utl_createBuffer( CONSOLE_MAX_TOKENS*
    86d6:	81 e7       	ldi	r24, 0x71	; 113
    86d8:	90 e0       	ldi	r25, 0x00	; 0
    86da:	0e 94 87 d8 	call	0x1b10e	; 0x1b10e <utl_createBuffer>
    86de:	80 93 de 23 	sts	0x23DE, r24
    86e2:	90 93 df 23 	sts	0x23DF, r25
   CONSOLE_MAX_TOKEN_SIZE + 1);
   if( gt_consoleDev.t_rxBuffer < 0)
    86e6:	80 91 de 23 	lds	r24, 0x23DE
    86ea:	90 91 df 23 	lds	r25, 0x23DF
    86ee:	97 fd       	sbrc	r25, 7
    86f0:	2d c0       	rjmp	.+90     	; 0x874c <drv_consoleInit+0x174>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_txMutex = arb_semaphoreCreate( MUTEX);
    86f2:	82 e0       	ldi	r24, 0x02	; 2
    86f4:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
    86f8:	80 93 da 23 	sts	0x23DA, r24
    86fc:	90 93 db 23 	sts	0x23DB, r25

   if( gt_consoleDev.t_txMutex < 0)
    8700:	80 91 da 23 	lds	r24, 0x23DA
    8704:	90 91 db 23 	lds	r25, 0x23DB
    8708:	97 ff       	sbrs	r25, 7
    870a:	0c c0       	rjmp	.+24     	; 0x8724 <drv_consoleInit+0x14c>
   {
      t_err = (t_error)gt_consoleDev.t_txMutex;
    870c:	80 91 da 23 	lds	r24, 0x23DA
    8710:	90 91 db 23 	lds	r25, 0x23DB
    8714:	18 2f       	mov	r17, r24

   return ARB_PASSED;

failed6:

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);
    8716:	80 91 de 23 	lds	r24, 0x23DE
    871a:	90 91 df 23 	lds	r25, 0x23DF
    871e:	0e 94 d6 d8 	call	0x1b1ac	; 0x1b1ac <utl_destroyBuffer>
    8722:	15 c0       	rjmp	.+42     	; 0x874e <drv_consoleInit+0x176>
   }/*End if( gt_consoleDev.t_txMutex < 0)*/

   /*------------------------------------------------------------------------*
    * We don't have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_numUsers = 0;
    8724:	10 92 e0 23 	sts	0x23E0, r1
   /*------------------------------------------------------------------------*
    * This variable is used as a means of blocking the TX register empty
    * interrupt from sending a byte of data out of the uart interface while
    * the driver is currently receiving data over the user interface.
    *------------------------------------------------------------------------*/
   gt_consoleDev.b_rxActive = false;
    8728:	10 92 e3 23 	sts	0x23E3, r1

   /*------------------------------------------------------------------------*
    * Set the default colors...
    *------------------------------------------------------------------------*/
   gt_consoleDev.c_cmdPromptColor = CONSOLE_GREEN;
    872c:	82 e3       	ldi	r24, 0x32	; 50
    872e:	80 93 e4 23 	sts	0x23E4, r24
   gt_consoleDev.c_fgColor = CONSOLE_WHITE;
    8732:	87 e3       	ldi	r24, 0x37	; 55
    8734:	80 93 e5 23 	sts	0x23E5, r24

   /*------------------------------------------------------------------------*
    * Set the default prompt working directory.
    *------------------------------------------------------------------------*/
   sprintf( gt_consoleDev.ac_dirName, "/");
    8738:	86 ee       	ldi	r24, 0xE6	; 230
    873a:	93 e2       	ldi	r25, 0x23	; 35
    873c:	6a e3       	ldi	r22, 0x3A	; 58
    873e:	70 e2       	ldi	r23, 0x20	; 32
    8740:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <strcpy>

   return ARB_PASSED;
    8744:	10 e0       	ldi	r17, 0x00	; 0
    8746:	1e c0       	rjmp	.+60     	; 0x8784 <drv_consoleInit+0x1ac>
    * Configure console UART
    *------------------------------------------------------------------------*/
   if( hal_configureUartChannel( gt_consoleDev.t_uHandle,
                                 t_uConf) < 0)
   {
      t_err = ARB_HAL_ERROR;
    8748:	16 ef       	ldi	r17, 0xF6	; 246
    874a:	01 c0       	rjmp	.+2      	; 0x874e <drv_consoleInit+0x176>
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_rxBuffer = utl_createBuffer( CONSOLE_MAX_TOKENS*
   CONSOLE_MAX_TOKEN_SIZE + 1);
   if( gt_consoleDev.t_rxBuffer < 0)
   {
      t_err = ARB_OUT_OF_HEAP;
    874c:	1f ef       	ldi	r17, 0xFF	; 255

   utl_destroyBuffer( gt_consoleDev.t_rxBuffer);

failed5:

   hal_releaseUartChannel( gt_consoleDev.t_uHandle);
    874e:	20 91 e1 23 	lds	r18, 0x23E1
    8752:	30 91 e2 23 	lds	r19, 0x23E2
    8756:	c9 01       	movw	r24, r18
    8758:	0e 94 ee 20 	call	0x41dc	; 0x41dc <hal_releaseUartChannel>
    875c:	01 c0       	rjmp	.+2      	; 0x8760 <drv_consoleInit+0x188>
    * Grab handle to console UART
    *------------------------------------------------------------------------*/
   gt_consoleDev.t_uHandle = hal_requestUartChannel( t_setup.c_uartId);
   if( gt_consoleDev.t_uHandle < 0)
   {
      t_err = ARB_HAL_ERROR;
    875e:	16 ef       	ldi	r17, 0xF6	; 246

   hal_releaseUartChannel( gt_consoleDev.t_uHandle);

failed4:

   arb_semaphoreDestroy( gt_consoleDev.t_rxBlockingSem);
    8760:	20 91 dc 23 	lds	r18, 0x23DC
    8764:	30 91 dd 23 	lds	r19, 0x23DD
    8768:	c9 01       	movw	r24, r18
    876a:	0e 94 f8 cd 	call	0x19bf0	; 0x19bf0 <arb_semaphoreDestroy>

failed3:

   arb_semaphoreDestroy( gt_consoleDev.t_rxMutex);
    876e:	20 91 d8 23 	lds	r18, 0x23D8
    8772:	30 91 d9 23 	lds	r19, 0x23D9
    8776:	c9 01       	movw	r24, r18
    8778:	0e 94 f8 cd 	call	0x19bf0	; 0x19bf0 <arb_semaphoreDestroy>

failed2:

   arb_destroyDevice( "consoleDevice0");
    877c:	8b e2       	ldi	r24, 0x2B	; 43
    877e:	90 e2       	ldi	r25, 0x20	; 32
    8780:	0e 94 b4 bf 	call	0x17f68	; 0x17f68 <arb_destroyDevice>

failed1:

   return t_err;

}/*End drv_consoleInit*/
    8784:	81 2f       	mov	r24, r17
    8786:	64 96       	adiw	r28, 0x14	; 20
    8788:	cd bf       	out	0x3d, r28	; 61
    878a:	de bf       	out	0x3e, r29	; 62
    878c:	df 91       	pop	r29
    878e:	cf 91       	pop	r28
    8790:	1f 91       	pop	r17
    8792:	0f 91       	pop	r16
    8794:	ff 90       	pop	r15
    8796:	ef 90       	pop	r14
    8798:	df 90       	pop	r13
    879a:	cf 90       	pop	r12
    879c:	bf 90       	pop	r11
    879e:	af 90       	pop	r10
    87a0:	08 95       	ret

000087a2 <getMagMeas>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static inline void getMagMeas( int16_t *ps_xyz)
{
    87a2:	0f 93       	push	r16
    87a4:	cf 93       	push	r28
    87a6:	df 93       	push	r29
    87a8:	cd b7       	in	r28, 0x3d	; 61
    87aa:	de b7       	in	r29, 0x3e	; 62
    87ac:	29 97       	sbiw	r28, 0x09	; 9
    87ae:	cd bf       	out	0x3d, r28	; 61
    87b0:	de bf       	out	0x3e, r29	; 62
    87b2:	88 87       	std	Y+8, r24	; 0x08
    87b4:	99 87       	std	Y+9, r25	; 0x09
    * 0x04, and 0x05, representing the x,y, and z axis'. There is no need for
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion of a two bytes read (MS byte first) on a particular axis.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x03;
    87b6:	83 e0       	ldi	r24, 0x03	; 3
    87b8:	8a 83       	std	Y+2, r24	; 0x02
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    87ba:	80 91 fe 23 	lds	r24, 0x23FE
    87be:	90 91 ff 23 	lds	r25, 0x23FF
                               ac_data,
    87c2:	9e 01       	movw	r18, r28
    87c4:	2e 5f       	subi	r18, 0xFE	; 254
    87c6:	3f 4f       	sbci	r19, 0xFF	; 255
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion of a two bytes read (MS byte first) on a particular axis.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x03;
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    87c8:	b9 01       	movw	r22, r18
    87ca:	41 e0       	ldi	r20, 0x01	; 1
    87cc:	50 e0       	ldi	r21, 0x00	; 0
    87ce:	2e e1       	ldi	r18, 0x1E	; 30
    87d0:	0a e0       	ldi	r16, 0x0A	; 10
    87d2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
    87d6:	89 83       	std	Y+1, r24	; 0x01
                               ac_data,
                               1,
                               (uint8_t)INS_MAGN_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    87d8:	80 91 fe 23 	lds	r24, 0x23FE
    87dc:	90 91 ff 23 	lds	r25, 0x23FF
                              ac_data,
    87e0:	9e 01       	movw	r18, r28
    87e2:	2e 5f       	subi	r18, 0xFE	; 254
    87e4:	3f 4f       	sbci	r19, 0xFF	; 255
                               ac_data,
                               1,
                               (uint8_t)INS_MAGN_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    87e6:	b9 01       	movw	r22, r18
    87e8:	46 e0       	ldi	r20, 0x06	; 6
    87ea:	50 e0       	ldi	r21, 0x00	; 0
    87ec:	2e e1       	ldi	r18, 0x1E	; 30
    87ee:	0a e0       	ldi	r16, 0x0A	; 10
    87f0:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <hal_twiMasterRead>
    87f4:	89 83       	std	Y+1, r24	; 0x01
    * the particular case of the Sparkfun SEN-10183 this means the x axis
    * points toward the TWI connectors, the y axis points to the right, and
    * the z axis points down. Since this is different then whats on the
    * label the y and z axis need to be negated.
    *------------------------------------------------------------------------*/
   ps_xyz[0] = ((int16_t)ac_data[0] << 8) | (int16_t)ac_data[1];
    87f6:	8a 81       	ldd	r24, Y+2	; 0x02
    87f8:	88 2f       	mov	r24, r24
    87fa:	90 e0       	ldi	r25, 0x00	; 0
    87fc:	38 2f       	mov	r19, r24
    87fe:	22 27       	eor	r18, r18
    8800:	8b 81       	ldd	r24, Y+3	; 0x03
    8802:	88 2f       	mov	r24, r24
    8804:	90 e0       	ldi	r25, 0x00	; 0
    8806:	28 2b       	or	r18, r24
    8808:	39 2b       	or	r19, r25
    880a:	88 85       	ldd	r24, Y+8	; 0x08
    880c:	99 85       	ldd	r25, Y+9	; 0x09
    880e:	fc 01       	movw	r30, r24
    8810:	20 83       	st	Z, r18
    8812:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[1] = -(((int16_t)ac_data[2] << 8) | (int16_t)ac_data[3]);
    8814:	88 85       	ldd	r24, Y+8	; 0x08
    8816:	99 85       	ldd	r25, Y+9	; 0x09
    8818:	02 96       	adiw	r24, 0x02	; 2
    881a:	2c 81       	ldd	r18, Y+4	; 0x04
    881c:	22 2f       	mov	r18, r18
    881e:	30 e0       	ldi	r19, 0x00	; 0
    8820:	52 2f       	mov	r21, r18
    8822:	44 27       	eor	r20, r20
    8824:	2d 81       	ldd	r18, Y+5	; 0x05
    8826:	22 2f       	mov	r18, r18
    8828:	30 e0       	ldi	r19, 0x00	; 0
    882a:	24 2b       	or	r18, r20
    882c:	35 2b       	or	r19, r21
    882e:	30 95       	com	r19
    8830:	21 95       	neg	r18
    8832:	3f 4f       	sbci	r19, 0xFF	; 255
    8834:	fc 01       	movw	r30, r24
    8836:	20 83       	st	Z, r18
    8838:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[2] = -(((int16_t)ac_data[4] << 8) | (int16_t)ac_data[5]);
    883a:	88 85       	ldd	r24, Y+8	; 0x08
    883c:	99 85       	ldd	r25, Y+9	; 0x09
    883e:	04 96       	adiw	r24, 0x04	; 4
    8840:	2e 81       	ldd	r18, Y+6	; 0x06
    8842:	22 2f       	mov	r18, r18
    8844:	30 e0       	ldi	r19, 0x00	; 0
    8846:	52 2f       	mov	r21, r18
    8848:	44 27       	eor	r20, r20
    884a:	2f 81       	ldd	r18, Y+7	; 0x07
    884c:	22 2f       	mov	r18, r18
    884e:	30 e0       	ldi	r19, 0x00	; 0
    8850:	24 2b       	or	r18, r20
    8852:	35 2b       	or	r19, r21
    8854:	30 95       	com	r19
    8856:	21 95       	neg	r18
    8858:	3f 4f       	sbci	r19, 0xFF	; 255
    885a:	fc 01       	movw	r30, r24
    885c:	20 83       	st	Z, r18
    885e:	31 83       	std	Z+1, r19	; 0x01

}/*End getMagMeas*/
    8860:	29 96       	adiw	r28, 0x09	; 9
    8862:	cd bf       	out	0x3d, r28	; 61
    8864:	de bf       	out	0x3e, r29	; 62
    8866:	df 91       	pop	r29
    8868:	cf 91       	pop	r28
    886a:	0f 91       	pop	r16
    886c:	08 95       	ret

0000886e <getGyroMeas>:

static inline void getGyroMeas( int16_t *ps_xyz)
{
    886e:	0f 93       	push	r16
    8870:	cf 93       	push	r28
    8872:	df 93       	push	r29
    8874:	cd b7       	in	r28, 0x3d	; 61
    8876:	de b7       	in	r29, 0x3e	; 62
    8878:	29 97       	sbiw	r28, 0x09	; 9
    887a:	cd bf       	out	0x3d, r28	; 61
    887c:	de bf       	out	0x3e, r29	; 62
    887e:	88 87       	std	Y+8, r24	; 0x08
    8880:	99 87       	std	Y+9, r25	; 0x09
    * 0x1E, and 0x1F, representing the x,y, and z axis'. There is no need for
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion of a two bytes read (MS byte first) on a particular axis.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x1D;
    8882:	8d e1       	ldi	r24, 0x1D	; 29
    8884:	8a 83       	std	Y+2, r24	; 0x02
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    8886:	80 91 fe 23 	lds	r24, 0x23FE
    888a:	90 91 ff 23 	lds	r25, 0x23FF
                               ac_data,
    888e:	9e 01       	movw	r18, r28
    8890:	2e 5f       	subi	r18, 0xFE	; 254
    8892:	3f 4f       	sbci	r19, 0xFF	; 255
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion of a two bytes read (MS byte first) on a particular axis.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x1D;
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    8894:	b9 01       	movw	r22, r18
    8896:	41 e0       	ldi	r20, 0x01	; 1
    8898:	50 e0       	ldi	r21, 0x00	; 0
    889a:	28 e6       	ldi	r18, 0x68	; 104
    889c:	0a e0       	ldi	r16, 0x0A	; 10
    889e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
    88a2:	89 83       	std	Y+1, r24	; 0x01
                               ac_data,
                               1,
                               (uint8_t)INS_GYRO_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    88a4:	80 91 fe 23 	lds	r24, 0x23FE
    88a8:	90 91 ff 23 	lds	r25, 0x23FF
                              ac_data,
    88ac:	9e 01       	movw	r18, r28
    88ae:	2e 5f       	subi	r18, 0xFE	; 254
    88b0:	3f 4f       	sbci	r19, 0xFF	; 255
                               ac_data,
                               1,
                               (uint8_t)INS_GYRO_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    88b2:	b9 01       	movw	r22, r18
    88b4:	46 e0       	ldi	r20, 0x06	; 6
    88b6:	50 e0       	ldi	r21, 0x00	; 0
    88b8:	28 e6       	ldi	r18, 0x68	; 104
    88ba:	0a e0       	ldi	r16, 0x0A	; 10
    88bc:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <hal_twiMasterRead>
    88c0:	89 83       	std	Y+1, r24	; 0x01
    * the particular case of the Sparkfun SEN-10183 this means that gyro axis
    * are different then those printed on the breakout board- 'x' is actually
    * the sensor negative 'y' axis, 'y' is the sensor negative 'x' axis, and
    * 'z' is the sensor negative 'z' axis.
    *------------------------------------------------------------------------*/
   ps_xyz[0] = -(((int16_t)ac_data[2] << 8) | (int16_t)ac_data[3]);
    88c2:	8c 81       	ldd	r24, Y+4	; 0x04
    88c4:	88 2f       	mov	r24, r24
    88c6:	90 e0       	ldi	r25, 0x00	; 0
    88c8:	38 2f       	mov	r19, r24
    88ca:	22 27       	eor	r18, r18
    88cc:	8d 81       	ldd	r24, Y+5	; 0x05
    88ce:	88 2f       	mov	r24, r24
    88d0:	90 e0       	ldi	r25, 0x00	; 0
    88d2:	82 2b       	or	r24, r18
    88d4:	93 2b       	or	r25, r19
    88d6:	22 27       	eor	r18, r18
    88d8:	33 27       	eor	r19, r19
    88da:	28 1b       	sub	r18, r24
    88dc:	39 0b       	sbc	r19, r25
    88de:	88 85       	ldd	r24, Y+8	; 0x08
    88e0:	99 85       	ldd	r25, Y+9	; 0x09
    88e2:	fc 01       	movw	r30, r24
    88e4:	20 83       	st	Z, r18
    88e6:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[1] = -(((int16_t)ac_data[0] << 8) | (int16_t)ac_data[1]);
    88e8:	88 85       	ldd	r24, Y+8	; 0x08
    88ea:	99 85       	ldd	r25, Y+9	; 0x09
    88ec:	02 96       	adiw	r24, 0x02	; 2
    88ee:	2a 81       	ldd	r18, Y+2	; 0x02
    88f0:	22 2f       	mov	r18, r18
    88f2:	30 e0       	ldi	r19, 0x00	; 0
    88f4:	52 2f       	mov	r21, r18
    88f6:	44 27       	eor	r20, r20
    88f8:	2b 81       	ldd	r18, Y+3	; 0x03
    88fa:	22 2f       	mov	r18, r18
    88fc:	30 e0       	ldi	r19, 0x00	; 0
    88fe:	24 2b       	or	r18, r20
    8900:	35 2b       	or	r19, r21
    8902:	30 95       	com	r19
    8904:	21 95       	neg	r18
    8906:	3f 4f       	sbci	r19, 0xFF	; 255
    8908:	fc 01       	movw	r30, r24
    890a:	20 83       	st	Z, r18
    890c:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[2] = -(((int16_t)ac_data[4] << 8) | (int16_t)ac_data[5]);
    890e:	88 85       	ldd	r24, Y+8	; 0x08
    8910:	99 85       	ldd	r25, Y+9	; 0x09
    8912:	04 96       	adiw	r24, 0x04	; 4
    8914:	2e 81       	ldd	r18, Y+6	; 0x06
    8916:	22 2f       	mov	r18, r18
    8918:	30 e0       	ldi	r19, 0x00	; 0
    891a:	52 2f       	mov	r21, r18
    891c:	44 27       	eor	r20, r20
    891e:	2f 81       	ldd	r18, Y+7	; 0x07
    8920:	22 2f       	mov	r18, r18
    8922:	30 e0       	ldi	r19, 0x00	; 0
    8924:	24 2b       	or	r18, r20
    8926:	35 2b       	or	r19, r21
    8928:	30 95       	com	r19
    892a:	21 95       	neg	r18
    892c:	3f 4f       	sbci	r19, 0xFF	; 255
    892e:	fc 01       	movw	r30, r24
    8930:	20 83       	st	Z, r18
    8932:	31 83       	std	Z+1, r19	; 0x01

}/*End getGyroMeas*/
    8934:	29 96       	adiw	r28, 0x09	; 9
    8936:	cd bf       	out	0x3d, r28	; 61
    8938:	de bf       	out	0x3e, r29	; 62
    893a:	df 91       	pop	r29
    893c:	cf 91       	pop	r28
    893e:	0f 91       	pop	r16
    8940:	08 95       	ret

00008942 <getAccelMeas>:

static inline void getAccelMeas( int16_t *ps_xyz)
{
    8942:	0f 93       	push	r16
    8944:	cf 93       	push	r28
    8946:	df 93       	push	r29
    8948:	cd b7       	in	r28, 0x3d	; 61
    894a:	de b7       	in	r29, 0x3e	; 62
    894c:	29 97       	sbiw	r28, 0x09	; 9
    894e:	cd bf       	out	0x3d, r28	; 61
    8950:	de bf       	out	0x3e, r29	; 62
    8952:	88 87       	std	Y+8, r24	; 0x08
    8954:	99 87       	std	Y+9, r25	; 0x09
    * 0x37, representing the x,y, and z axis'. There is no need for
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion each bytes read in LS to MS byte order.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x32;
    8956:	82 e3       	ldi	r24, 0x32	; 50
    8958:	8a 83       	std	Y+2, r24	; 0x02
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    895a:	80 91 fe 23 	lds	r24, 0x23FE
    895e:	90 91 ff 23 	lds	r25, 0x23FF
                               ac_data,
    8962:	9e 01       	movw	r18, r28
    8964:	2e 5f       	subi	r18, 0xFE	; 254
    8966:	3f 4f       	sbci	r19, 0xFF	; 255
    * the master to update the device register when requesting a new axis
    * measurement - the device automatically increments the address after the
    * completion each bytes read in LS to MS byte order.
    *------------------------------------------------------------------------*/
   ac_data[0] = 0x32;
   t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
    8968:	b9 01       	movw	r22, r18
    896a:	41 e0       	ldi	r20, 0x01	; 1
    896c:	50 e0       	ldi	r21, 0x00	; 0
    896e:	23 e5       	ldi	r18, 0x53	; 83
    8970:	0a e0       	ldi	r16, 0x0A	; 10
    8972:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
    8976:	89 83       	std	Y+1, r24	; 0x01
                               ac_data,
                               1,
                               (uint8_t)INS_ACCEL_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    8978:	80 91 fe 23 	lds	r24, 0x23FE
    897c:	90 91 ff 23 	lds	r25, 0x23FF
                              ac_data,
    8980:	9e 01       	movw	r18, r28
    8982:	2e 5f       	subi	r18, 0xFE	; 254
    8984:	3f 4f       	sbci	r19, 0xFF	; 255
                               ac_data,
                               1,
                               (uint8_t)INS_ACCEL_ADDRESS,
                               INS_MAX_TWI_RETRIES);

   t_err = hal_twiMasterRead( gt_insDev.t_tHandle,
    8986:	b9 01       	movw	r22, r18
    8988:	46 e0       	ldi	r20, 0x06	; 6
    898a:	50 e0       	ldi	r21, 0x00	; 0
    898c:	23 e5       	ldi	r18, 0x53	; 83
    898e:	0a e0       	ldi	r16, 0x0A	; 10
    8990:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <hal_twiMasterRead>
    8994:	89 83       	std	Y+1, r24	; 0x01
    * the particular case of the Sparkfun SEN-10183 this means that acceler
    * ometer axis are different then those printed on the breakout board- 'x'
    * is actually the sensor 'y' axis, 'y' is the sensor 'x' axis, and
    * 'z' is unchanged.
    *------------------------------------------------------------------------*/
   ps_xyz[0] = (((int16_t)ac_data[3] << 8) | (int16_t)ac_data[2]);
    8996:	8d 81       	ldd	r24, Y+5	; 0x05
    8998:	88 2f       	mov	r24, r24
    899a:	90 e0       	ldi	r25, 0x00	; 0
    899c:	38 2f       	mov	r19, r24
    899e:	22 27       	eor	r18, r18
    89a0:	8c 81       	ldd	r24, Y+4	; 0x04
    89a2:	88 2f       	mov	r24, r24
    89a4:	90 e0       	ldi	r25, 0x00	; 0
    89a6:	28 2b       	or	r18, r24
    89a8:	39 2b       	or	r19, r25
    89aa:	88 85       	ldd	r24, Y+8	; 0x08
    89ac:	99 85       	ldd	r25, Y+9	; 0x09
    89ae:	fc 01       	movw	r30, r24
    89b0:	20 83       	st	Z, r18
    89b2:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[1] = (((int16_t)ac_data[1] << 8) | (int16_t)ac_data[0]);
    89b4:	88 85       	ldd	r24, Y+8	; 0x08
    89b6:	99 85       	ldd	r25, Y+9	; 0x09
    89b8:	02 96       	adiw	r24, 0x02	; 2
    89ba:	2b 81       	ldd	r18, Y+3	; 0x03
    89bc:	22 2f       	mov	r18, r18
    89be:	30 e0       	ldi	r19, 0x00	; 0
    89c0:	52 2f       	mov	r21, r18
    89c2:	44 27       	eor	r20, r20
    89c4:	2a 81       	ldd	r18, Y+2	; 0x02
    89c6:	22 2f       	mov	r18, r18
    89c8:	30 e0       	ldi	r19, 0x00	; 0
    89ca:	24 2b       	or	r18, r20
    89cc:	35 2b       	or	r19, r21
    89ce:	fc 01       	movw	r30, r24
    89d0:	20 83       	st	Z, r18
    89d2:	31 83       	std	Z+1, r19	; 0x01
   ps_xyz[2] = (((int16_t)ac_data[5] << 8) | (int16_t)ac_data[4]);
    89d4:	88 85       	ldd	r24, Y+8	; 0x08
    89d6:	99 85       	ldd	r25, Y+9	; 0x09
    89d8:	04 96       	adiw	r24, 0x04	; 4
    89da:	2f 81       	ldd	r18, Y+7	; 0x07
    89dc:	22 2f       	mov	r18, r18
    89de:	30 e0       	ldi	r19, 0x00	; 0
    89e0:	52 2f       	mov	r21, r18
    89e2:	44 27       	eor	r20, r20
    89e4:	2e 81       	ldd	r18, Y+6	; 0x06
    89e6:	22 2f       	mov	r18, r18
    89e8:	30 e0       	ldi	r19, 0x00	; 0
    89ea:	24 2b       	or	r18, r20
    89ec:	35 2b       	or	r19, r21
    89ee:	fc 01       	movw	r30, r24
    89f0:	20 83       	st	Z, r18
    89f2:	31 83       	std	Z+1, r19	; 0x01

}/*End getAccelMeas*/
    89f4:	29 96       	adiw	r28, 0x09	; 9
    89f6:	cd bf       	out	0x3d, r28	; 61
    89f8:	de bf       	out	0x3e, r29	; 62
    89fa:	df 91       	pop	r29
    89fc:	cf 91       	pop	r28
    89fe:	0f 91       	pop	r16
    8a00:	08 95       	ret

00008a02 <ellipsoidFit>:

static bool ellipsoidFit( int16_t *ps_R,
                          int16_t *ps_bias,
                          int16_t *ps_scale,
                          int16_t s_envelope)
{
    8a02:	af 92       	push	r10
    8a04:	bf 92       	push	r11
    8a06:	cf 92       	push	r12
    8a08:	df 92       	push	r13
    8a0a:	ef 92       	push	r14
    8a0c:	ff 92       	push	r15
    8a0e:	0f 93       	push	r16
    8a10:	1f 93       	push	r17
    8a12:	cf 93       	push	r28
    8a14:	df 93       	push	r29
    8a16:	cd b7       	in	r28, 0x3d	; 61
    8a18:	de b7       	in	r29, 0x3e	; 62
    8a1a:	c7 57       	subi	r28, 0x77	; 119
    8a1c:	d0 40       	sbci	r29, 0x00	; 0
    8a1e:	cd bf       	out	0x3d, r28	; 61
    8a20:	de bf       	out	0x3e, r29	; 62
    8a22:	fe 01       	movw	r30, r28
    8a24:	e2 59       	subi	r30, 0x92	; 146
    8a26:	ff 4f       	sbci	r31, 0xFF	; 255
    8a28:	80 83       	st	Z, r24
    8a2a:	91 83       	std	Z+1, r25	; 0x01
    8a2c:	ce 01       	movw	r24, r28
    8a2e:	80 59       	subi	r24, 0x90	; 144
    8a30:	9f 4f       	sbci	r25, 0xFF	; 255
    8a32:	fc 01       	movw	r30, r24
    8a34:	60 83       	st	Z, r22
    8a36:	71 83       	std	Z+1, r23	; 0x01
    8a38:	ce 01       	movw	r24, r28
    8a3a:	8e 58       	subi	r24, 0x8E	; 142
    8a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a3e:	fc 01       	movw	r30, r24
    8a40:	40 83       	st	Z, r20
    8a42:	51 83       	std	Z+1, r21	; 0x01
    8a44:	ce 01       	movw	r24, r28
    8a46:	8c 58       	subi	r24, 0x8C	; 140
    8a48:	9f 4f       	sbci	r25, 0xFF	; 255
    8a4a:	fc 01       	movw	r30, r24
    8a4c:	20 83       	st	Z, r18
    8a4e:	31 83       	std	Z+1, r19	; 0x01
   int32_t i_r = 0;
    8a50:	19 82       	std	Y+1, r1	; 0x01
    8a52:	1a 82       	std	Y+2, r1	; 0x02
    8a54:	1b 82       	std	Y+3, r1	; 0x03
    8a56:	1c 82       	std	Y+4, r1	; 0x04
   int32_t i_c = 0;
    8a58:	1d 82       	std	Y+5, r1	; 0x05
    8a5a:	1e 82       	std	Y+6, r1	; 0x06
    8a5c:	1f 82       	std	Y+7, r1	; 0x07
    8a5e:	18 86       	std	Y+8, r1	; 0x08
   bool b_passed = false;
    8a60:	19 86       	std	Y+9, r1	; 0x09
   float f_sum      = 0.0;
    8a62:	80 e0       	ldi	r24, 0x00	; 0
    8a64:	90 e0       	ldi	r25, 0x00	; 0
    8a66:	dc 01       	movw	r26, r24
    8a68:	8a 87       	std	Y+10, r24	; 0x0a
    8a6a:	9b 87       	std	Y+11, r25	; 0x0b
    8a6c:	ac 87       	std	Y+12, r26	; 0x0c
    8a6e:	bd 87       	std	Y+13, r27	; 0x0d
   float *pf_A      = NULL;
    8a70:	1e 86       	std	Y+14, r1	; 0x0e
    8a72:	1f 86       	std	Y+15, r1	; 0x0f
   float *pf_v      = NULL;
    8a74:	18 8a       	std	Y+16, r1	; 0x10
    8a76:	19 8a       	std	Y+17, r1	; 0x11
   float *pf_D      = NULL;
    8a78:	1a 8a       	std	Y+18, r1	; 0x12
    8a7a:	1b 8a       	std	Y+19, r1	; 0x13
   float *pf_DTrans = NULL;
    8a7c:	1c 8a       	std	Y+20, r1	; 0x14
    8a7e:	1d 8a       	std	Y+21, r1	; 0x15
   float *pf_temp1  = NULL;
    8a80:	1e 8a       	std	Y+22, r1	; 0x16
    8a82:	1f 8a       	std	Y+23, r1	; 0x17
   float *pf_temp2  = NULL;
    8a84:	18 8e       	std	Y+24, r1	; 0x18
    8a86:	19 8e       	std	Y+25, r1	; 0x19
   float *pf_temp3  = NULL;
    8a88:	1a 8e       	std	Y+26, r1	; 0x1a
    8a8a:	1b 8e       	std	Y+27, r1	; 0x1b
   float *pf_temp4  = NULL;
    8a8c:	1c 8e       	std	Y+28, r1	; 0x1c
    8a8e:	1d 8e       	std	Y+29, r1	; 0x1d
   float *pf_temp5  = NULL;
    8a90:	1e 8e       	std	Y+30, r1	; 0x1e
    8a92:	1f 8e       	std	Y+31, r1	; 0x1f
   float *pf_temp6  = NULL;
    8a94:	18 a2       	lds	r17, 0x98
    8a96:	19 a2       	lds	r17, 0x99
   float *pf_temp7  = NULL;
    8a98:	1a a2       	lds	r17, 0x9a
    8a9a:	1b a2       	lds	r17, 0x9b
   float *pf_temp8  = NULL;
    8a9c:	1c a2       	lds	r17, 0x9c
    8a9e:	1d a2       	lds	r17, 0x9d

   float af_bias[3];  /*The hard iron bias*/
   float af_scale[3]; /*Scale factor and soft-iron bias compensation*/
   float af_R[3][3];  /*The principle axis rotation matrix*/
   float f_temp1 = 0.0;
    8aa0:	80 e0       	ldi	r24, 0x00	; 0
    8aa2:	90 e0       	ldi	r25, 0x00	; 0
    8aa4:	dc 01       	movw	r26, r24
    8aa6:	8e a3       	lds	r24, 0x5e
    8aa8:	9f a3       	lds	r25, 0x5f
    8aaa:	a8 a7       	lds	r26, 0x78
    8aac:	b9 a7       	lds	r27, 0x79
   float f_temp2 = 0.0;
    8aae:	80 e0       	ldi	r24, 0x00	; 0
    8ab0:	90 e0       	ldi	r25, 0x00	; 0
    8ab2:	dc 01       	movw	r26, r24
    8ab4:	8a a7       	lds	r24, 0x7a
    8ab6:	9b a7       	lds	r25, 0x7b
    8ab8:	ac a7       	lds	r26, 0x7c
    8aba:	bd a7       	lds	r27, 0x7d
   float f_temp3 = 0.0;
    8abc:	80 e0       	ldi	r24, 0x00	; 0
    8abe:	90 e0       	ldi	r25, 0x00	; 0
    8ac0:	dc 01       	movw	r26, r24
    8ac2:	8e a7       	lds	r24, 0x7e
    8ac4:	9f a7       	lds	r25, 0x7f
    8ac6:	a8 ab       	sts	0x58, r26
    8ac8:	b9 ab       	sts	0x59, r27
    * Cz^2 + 2Dxy + 2Exz + 2Fyz + 2Gx + 2Hy + 2Iz = Y. See line 61 in the
    * matlab function ellipsoid_fit for further details. Where the
    * D = [x^2 y^2 z^2 2xy 2xz 2yz 2x 2y 2z] and the 9 coefficients V = [A B C
    * D E F G H I].
    *------------------------------------------------------------------------*/
   pf_D = &gt_insDev.gaf_scratchBuf[0];
    8aca:	8a e7       	ldi	r24, 0x7A	; 122
    8acc:	94 e2       	ldi	r25, 0x24	; 36
    8ace:	8a 8b       	std	Y+18, r24	; 0x12
    8ad0:	9b 8b       	std	Y+19, r25	; 0x13
   for( i_r = 0; i_r < INS_MAX_CAL_SAMPLES; i_r++)
    8ad2:	19 82       	std	Y+1, r1	; 0x01
    8ad4:	1a 82       	std	Y+2, r1	; 0x02
    8ad6:	1b 82       	std	Y+3, r1	; 0x03
    8ad8:	1c 82       	std	Y+4, r1	; 0x04
    8ada:	aa c2       	rjmp	.+1364   	; 0x9030 <ellipsoidFit+0x62e>
   {
      (*(pf_D + i_r*9 + 0)) = (float)gas_H[i_r][0]*
    8adc:	89 81       	ldd	r24, Y+1	; 0x01
    8ade:	9a 81       	ldd	r25, Y+2	; 0x02
    8ae0:	88 0f       	add	r24, r24
    8ae2:	99 1f       	adc	r25, r25
    8ae4:	88 0f       	add	r24, r24
    8ae6:	99 1f       	adc	r25, r25
    8ae8:	9c 01       	movw	r18, r24
    8aea:	22 0f       	add	r18, r18
    8aec:	33 1f       	adc	r19, r19
    8aee:	22 0f       	add	r18, r18
    8af0:	33 1f       	adc	r19, r19
    8af2:	22 0f       	add	r18, r18
    8af4:	33 1f       	adc	r19, r19
    8af6:	82 0f       	add	r24, r18
    8af8:	93 1f       	adc	r25, r19
    8afa:	2a 89       	ldd	r18, Y+18	; 0x12
    8afc:	3b 89       	ldd	r19, Y+19	; 0x13
    8afe:	69 01       	movw	r12, r18
    8b00:	c8 0e       	add	r12, r24
    8b02:	d9 1e       	adc	r13, r25
    8b04:	29 81       	ldd	r18, Y+1	; 0x01
    8b06:	3a 81       	ldd	r19, Y+2	; 0x02
    8b08:	c9 01       	movw	r24, r18
    8b0a:	88 0f       	add	r24, r24
    8b0c:	99 1f       	adc	r25, r25
    8b0e:	82 0f       	add	r24, r18
    8b10:	93 1f       	adc	r25, r19
    8b12:	88 0f       	add	r24, r24
    8b14:	99 1f       	adc	r25, r25
    8b16:	85 50       	subi	r24, 0x05	; 5
    8b18:	95 4d       	sbci	r25, 0xD5	; 213
    8b1a:	fc 01       	movw	r30, r24
    8b1c:	80 81       	ld	r24, Z
    8b1e:	91 81       	ldd	r25, Z+1	; 0x01
    8b20:	aa 27       	eor	r26, r26
    8b22:	97 fd       	sbrc	r25, 7
    8b24:	a0 95       	com	r26
    8b26:	ba 2f       	mov	r27, r26
    8b28:	bc 01       	movw	r22, r24
    8b2a:	cd 01       	movw	r24, r26
    8b2c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8b30:	7b 01       	movw	r14, r22
    8b32:	8c 01       	movw	r16, r24
      (float)gas_H[i_r][0]; /*x*x*/
    8b34:	29 81       	ldd	r18, Y+1	; 0x01
    8b36:	3a 81       	ldd	r19, Y+2	; 0x02
    8b38:	c9 01       	movw	r24, r18
    8b3a:	88 0f       	add	r24, r24
    8b3c:	99 1f       	adc	r25, r25
    8b3e:	82 0f       	add	r24, r18
    8b40:	93 1f       	adc	r25, r19
    8b42:	88 0f       	add	r24, r24
    8b44:	99 1f       	adc	r25, r25
    8b46:	85 50       	subi	r24, 0x05	; 5
    8b48:	95 4d       	sbci	r25, 0xD5	; 213
    8b4a:	fc 01       	movw	r30, r24
    8b4c:	80 81       	ld	r24, Z
    8b4e:	91 81       	ldd	r25, Z+1	; 0x01
    8b50:	aa 27       	eor	r26, r26
    8b52:	97 fd       	sbrc	r25, 7
    8b54:	a0 95       	com	r26
    8b56:	ba 2f       	mov	r27, r26
    8b58:	bc 01       	movw	r22, r24
    8b5a:	cd 01       	movw	r24, r26
    8b5c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8b60:	9b 01       	movw	r18, r22
    8b62:	ac 01       	movw	r20, r24
    * D E F G H I].
    *------------------------------------------------------------------------*/
   pf_D = &gt_insDev.gaf_scratchBuf[0];
   for( i_r = 0; i_r < INS_MAX_CAL_SAMPLES; i_r++)
   {
      (*(pf_D + i_r*9 + 0)) = (float)gas_H[i_r][0]*
    8b64:	c8 01       	movw	r24, r16
    8b66:	b7 01       	movw	r22, r14
    8b68:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8b6c:	dc 01       	movw	r26, r24
    8b6e:	cb 01       	movw	r24, r22
    8b70:	f6 01       	movw	r30, r12
    8b72:	80 83       	st	Z, r24
    8b74:	91 83       	std	Z+1, r25	; 0x01
    8b76:	a2 83       	std	Z+2, r26	; 0x02
    8b78:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][0]; /*x*x*/
      (*(pf_D + i_r*9 + 1)) = (float)gas_H[i_r][1]*
    8b7a:	89 81       	ldd	r24, Y+1	; 0x01
    8b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    8b7e:	88 0f       	add	r24, r24
    8b80:	99 1f       	adc	r25, r25
    8b82:	88 0f       	add	r24, r24
    8b84:	99 1f       	adc	r25, r25
    8b86:	9c 01       	movw	r18, r24
    8b88:	22 0f       	add	r18, r18
    8b8a:	33 1f       	adc	r19, r19
    8b8c:	22 0f       	add	r18, r18
    8b8e:	33 1f       	adc	r19, r19
    8b90:	22 0f       	add	r18, r18
    8b92:	33 1f       	adc	r19, r19
    8b94:	82 0f       	add	r24, r18
    8b96:	93 1f       	adc	r25, r19
    8b98:	04 96       	adiw	r24, 0x04	; 4
    8b9a:	2a 89       	ldd	r18, Y+18	; 0x12
    8b9c:	3b 89       	ldd	r19, Y+19	; 0x13
    8b9e:	69 01       	movw	r12, r18
    8ba0:	c8 0e       	add	r12, r24
    8ba2:	d9 1e       	adc	r13, r25
    8ba4:	29 81       	ldd	r18, Y+1	; 0x01
    8ba6:	3a 81       	ldd	r19, Y+2	; 0x02
    8ba8:	c9 01       	movw	r24, r18
    8baa:	88 0f       	add	r24, r24
    8bac:	99 1f       	adc	r25, r25
    8bae:	82 0f       	add	r24, r18
    8bb0:	93 1f       	adc	r25, r19
    8bb2:	88 0f       	add	r24, r24
    8bb4:	99 1f       	adc	r25, r25
    8bb6:	83 50       	subi	r24, 0x03	; 3
    8bb8:	95 4d       	sbci	r25, 0xD5	; 213
    8bba:	fc 01       	movw	r30, r24
    8bbc:	80 81       	ld	r24, Z
    8bbe:	91 81       	ldd	r25, Z+1	; 0x01
    8bc0:	aa 27       	eor	r26, r26
    8bc2:	97 fd       	sbrc	r25, 7
    8bc4:	a0 95       	com	r26
    8bc6:	ba 2f       	mov	r27, r26
    8bc8:	bc 01       	movw	r22, r24
    8bca:	cd 01       	movw	r24, r26
    8bcc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8bd0:	7b 01       	movw	r14, r22
    8bd2:	8c 01       	movw	r16, r24
      (float)gas_H[i_r][1]; /*y*y*/
    8bd4:	29 81       	ldd	r18, Y+1	; 0x01
    8bd6:	3a 81       	ldd	r19, Y+2	; 0x02
    8bd8:	c9 01       	movw	r24, r18
    8bda:	88 0f       	add	r24, r24
    8bdc:	99 1f       	adc	r25, r25
    8bde:	82 0f       	add	r24, r18
    8be0:	93 1f       	adc	r25, r19
    8be2:	88 0f       	add	r24, r24
    8be4:	99 1f       	adc	r25, r25
    8be6:	83 50       	subi	r24, 0x03	; 3
    8be8:	95 4d       	sbci	r25, 0xD5	; 213
    8bea:	fc 01       	movw	r30, r24
    8bec:	80 81       	ld	r24, Z
    8bee:	91 81       	ldd	r25, Z+1	; 0x01
    8bf0:	aa 27       	eor	r26, r26
    8bf2:	97 fd       	sbrc	r25, 7
    8bf4:	a0 95       	com	r26
    8bf6:	ba 2f       	mov	r27, r26
    8bf8:	bc 01       	movw	r22, r24
    8bfa:	cd 01       	movw	r24, r26
    8bfc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8c00:	9b 01       	movw	r18, r22
    8c02:	ac 01       	movw	r20, r24
   pf_D = &gt_insDev.gaf_scratchBuf[0];
   for( i_r = 0; i_r < INS_MAX_CAL_SAMPLES; i_r++)
   {
      (*(pf_D + i_r*9 + 0)) = (float)gas_H[i_r][0]*
      (float)gas_H[i_r][0]; /*x*x*/
      (*(pf_D + i_r*9 + 1)) = (float)gas_H[i_r][1]*
    8c04:	c8 01       	movw	r24, r16
    8c06:	b7 01       	movw	r22, r14
    8c08:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8c0c:	dc 01       	movw	r26, r24
    8c0e:	cb 01       	movw	r24, r22
    8c10:	f6 01       	movw	r30, r12
    8c12:	80 83       	st	Z, r24
    8c14:	91 83       	std	Z+1, r25	; 0x01
    8c16:	a2 83       	std	Z+2, r26	; 0x02
    8c18:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][1]; /*y*y*/
      (*(pf_D + i_r*9 + 2)) = (float)gas_H[i_r][2]*
    8c1a:	89 81       	ldd	r24, Y+1	; 0x01
    8c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    8c1e:	88 0f       	add	r24, r24
    8c20:	99 1f       	adc	r25, r25
    8c22:	88 0f       	add	r24, r24
    8c24:	99 1f       	adc	r25, r25
    8c26:	9c 01       	movw	r18, r24
    8c28:	22 0f       	add	r18, r18
    8c2a:	33 1f       	adc	r19, r19
    8c2c:	22 0f       	add	r18, r18
    8c2e:	33 1f       	adc	r19, r19
    8c30:	22 0f       	add	r18, r18
    8c32:	33 1f       	adc	r19, r19
    8c34:	82 0f       	add	r24, r18
    8c36:	93 1f       	adc	r25, r19
    8c38:	08 96       	adiw	r24, 0x08	; 8
    8c3a:	2a 89       	ldd	r18, Y+18	; 0x12
    8c3c:	3b 89       	ldd	r19, Y+19	; 0x13
    8c3e:	69 01       	movw	r12, r18
    8c40:	c8 0e       	add	r12, r24
    8c42:	d9 1e       	adc	r13, r25
    8c44:	29 81       	ldd	r18, Y+1	; 0x01
    8c46:	3a 81       	ldd	r19, Y+2	; 0x02
    8c48:	c9 01       	movw	r24, r18
    8c4a:	88 0f       	add	r24, r24
    8c4c:	99 1f       	adc	r25, r25
    8c4e:	82 0f       	add	r24, r18
    8c50:	93 1f       	adc	r25, r19
    8c52:	88 0f       	add	r24, r24
    8c54:	99 1f       	adc	r25, r25
    8c56:	81 50       	subi	r24, 0x01	; 1
    8c58:	95 4d       	sbci	r25, 0xD5	; 213
    8c5a:	fc 01       	movw	r30, r24
    8c5c:	80 81       	ld	r24, Z
    8c5e:	91 81       	ldd	r25, Z+1	; 0x01
    8c60:	aa 27       	eor	r26, r26
    8c62:	97 fd       	sbrc	r25, 7
    8c64:	a0 95       	com	r26
    8c66:	ba 2f       	mov	r27, r26
    8c68:	bc 01       	movw	r22, r24
    8c6a:	cd 01       	movw	r24, r26
    8c6c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8c70:	7b 01       	movw	r14, r22
    8c72:	8c 01       	movw	r16, r24
      (float)gas_H[i_r][2]; /*z*z*/
    8c74:	29 81       	ldd	r18, Y+1	; 0x01
    8c76:	3a 81       	ldd	r19, Y+2	; 0x02
    8c78:	c9 01       	movw	r24, r18
    8c7a:	88 0f       	add	r24, r24
    8c7c:	99 1f       	adc	r25, r25
    8c7e:	82 0f       	add	r24, r18
    8c80:	93 1f       	adc	r25, r19
    8c82:	88 0f       	add	r24, r24
    8c84:	99 1f       	adc	r25, r25
    8c86:	81 50       	subi	r24, 0x01	; 1
    8c88:	95 4d       	sbci	r25, 0xD5	; 213
    8c8a:	fc 01       	movw	r30, r24
    8c8c:	80 81       	ld	r24, Z
    8c8e:	91 81       	ldd	r25, Z+1	; 0x01
    8c90:	aa 27       	eor	r26, r26
    8c92:	97 fd       	sbrc	r25, 7
    8c94:	a0 95       	com	r26
    8c96:	ba 2f       	mov	r27, r26
    8c98:	bc 01       	movw	r22, r24
    8c9a:	cd 01       	movw	r24, r26
    8c9c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8ca0:	9b 01       	movw	r18, r22
    8ca2:	ac 01       	movw	r20, r24
   {
      (*(pf_D + i_r*9 + 0)) = (float)gas_H[i_r][0]*
      (float)gas_H[i_r][0]; /*x*x*/
      (*(pf_D + i_r*9 + 1)) = (float)gas_H[i_r][1]*
      (float)gas_H[i_r][1]; /*y*y*/
      (*(pf_D + i_r*9 + 2)) = (float)gas_H[i_r][2]*
    8ca4:	c8 01       	movw	r24, r16
    8ca6:	b7 01       	movw	r22, r14
    8ca8:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8cac:	dc 01       	movw	r26, r24
    8cae:	cb 01       	movw	r24, r22
    8cb0:	f6 01       	movw	r30, r12
    8cb2:	80 83       	st	Z, r24
    8cb4:	91 83       	std	Z+1, r25	; 0x01
    8cb6:	a2 83       	std	Z+2, r26	; 0x02
    8cb8:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][2]; /*z*z*/
      (*(pf_D + i_r*9 + 3)) = 2*(float)gas_H[i_r][0]*
    8cba:	89 81       	ldd	r24, Y+1	; 0x01
    8cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    8cbe:	88 0f       	add	r24, r24
    8cc0:	99 1f       	adc	r25, r25
    8cc2:	88 0f       	add	r24, r24
    8cc4:	99 1f       	adc	r25, r25
    8cc6:	9c 01       	movw	r18, r24
    8cc8:	22 0f       	add	r18, r18
    8cca:	33 1f       	adc	r19, r19
    8ccc:	22 0f       	add	r18, r18
    8cce:	33 1f       	adc	r19, r19
    8cd0:	22 0f       	add	r18, r18
    8cd2:	33 1f       	adc	r19, r19
    8cd4:	82 0f       	add	r24, r18
    8cd6:	93 1f       	adc	r25, r19
    8cd8:	0c 96       	adiw	r24, 0x0c	; 12
    8cda:	2a 89       	ldd	r18, Y+18	; 0x12
    8cdc:	3b 89       	ldd	r19, Y+19	; 0x13
    8cde:	69 01       	movw	r12, r18
    8ce0:	c8 0e       	add	r12, r24
    8ce2:	d9 1e       	adc	r13, r25
    8ce4:	29 81       	ldd	r18, Y+1	; 0x01
    8ce6:	3a 81       	ldd	r19, Y+2	; 0x02
    8ce8:	c9 01       	movw	r24, r18
    8cea:	88 0f       	add	r24, r24
    8cec:	99 1f       	adc	r25, r25
    8cee:	82 0f       	add	r24, r18
    8cf0:	93 1f       	adc	r25, r19
    8cf2:	88 0f       	add	r24, r24
    8cf4:	99 1f       	adc	r25, r25
    8cf6:	85 50       	subi	r24, 0x05	; 5
    8cf8:	95 4d       	sbci	r25, 0xD5	; 213
    8cfa:	fc 01       	movw	r30, r24
    8cfc:	80 81       	ld	r24, Z
    8cfe:	91 81       	ldd	r25, Z+1	; 0x01
    8d00:	aa 27       	eor	r26, r26
    8d02:	97 fd       	sbrc	r25, 7
    8d04:	a0 95       	com	r26
    8d06:	ba 2f       	mov	r27, r26
    8d08:	bc 01       	movw	r22, r24
    8d0a:	cd 01       	movw	r24, r26
    8d0c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8d10:	9b 01       	movw	r18, r22
    8d12:	ac 01       	movw	r20, r24
    8d14:	ca 01       	movw	r24, r20
    8d16:	b9 01       	movw	r22, r18
    8d18:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    8d1c:	dc 01       	movw	r26, r24
    8d1e:	cb 01       	movw	r24, r22
    8d20:	7c 01       	movw	r14, r24
    8d22:	8d 01       	movw	r16, r26
      (float)gas_H[i_r][1]; /*2*x*y*/
    8d24:	29 81       	ldd	r18, Y+1	; 0x01
    8d26:	3a 81       	ldd	r19, Y+2	; 0x02
    8d28:	c9 01       	movw	r24, r18
    8d2a:	88 0f       	add	r24, r24
    8d2c:	99 1f       	adc	r25, r25
    8d2e:	82 0f       	add	r24, r18
    8d30:	93 1f       	adc	r25, r19
    8d32:	88 0f       	add	r24, r24
    8d34:	99 1f       	adc	r25, r25
    8d36:	83 50       	subi	r24, 0x03	; 3
    8d38:	95 4d       	sbci	r25, 0xD5	; 213
    8d3a:	fc 01       	movw	r30, r24
    8d3c:	80 81       	ld	r24, Z
    8d3e:	91 81       	ldd	r25, Z+1	; 0x01
    8d40:	aa 27       	eor	r26, r26
    8d42:	97 fd       	sbrc	r25, 7
    8d44:	a0 95       	com	r26
    8d46:	ba 2f       	mov	r27, r26
    8d48:	bc 01       	movw	r22, r24
    8d4a:	cd 01       	movw	r24, r26
    8d4c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8d50:	9b 01       	movw	r18, r22
    8d52:	ac 01       	movw	r20, r24
      (float)gas_H[i_r][0]; /*x*x*/
      (*(pf_D + i_r*9 + 1)) = (float)gas_H[i_r][1]*
      (float)gas_H[i_r][1]; /*y*y*/
      (*(pf_D + i_r*9 + 2)) = (float)gas_H[i_r][2]*
      (float)gas_H[i_r][2]; /*z*z*/
      (*(pf_D + i_r*9 + 3)) = 2*(float)gas_H[i_r][0]*
    8d54:	c8 01       	movw	r24, r16
    8d56:	b7 01       	movw	r22, r14
    8d58:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8d5c:	dc 01       	movw	r26, r24
    8d5e:	cb 01       	movw	r24, r22
    8d60:	f6 01       	movw	r30, r12
    8d62:	80 83       	st	Z, r24
    8d64:	91 83       	std	Z+1, r25	; 0x01
    8d66:	a2 83       	std	Z+2, r26	; 0x02
    8d68:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][1]; /*2*x*y*/
      (*(pf_D + i_r*9 + 4)) = 2*(float)gas_H[i_r][0]*
    8d6a:	89 81       	ldd	r24, Y+1	; 0x01
    8d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    8d6e:	88 0f       	add	r24, r24
    8d70:	99 1f       	adc	r25, r25
    8d72:	88 0f       	add	r24, r24
    8d74:	99 1f       	adc	r25, r25
    8d76:	9c 01       	movw	r18, r24
    8d78:	22 0f       	add	r18, r18
    8d7a:	33 1f       	adc	r19, r19
    8d7c:	22 0f       	add	r18, r18
    8d7e:	33 1f       	adc	r19, r19
    8d80:	22 0f       	add	r18, r18
    8d82:	33 1f       	adc	r19, r19
    8d84:	82 0f       	add	r24, r18
    8d86:	93 1f       	adc	r25, r19
    8d88:	40 96       	adiw	r24, 0x10	; 16
    8d8a:	2a 89       	ldd	r18, Y+18	; 0x12
    8d8c:	3b 89       	ldd	r19, Y+19	; 0x13
    8d8e:	69 01       	movw	r12, r18
    8d90:	c8 0e       	add	r12, r24
    8d92:	d9 1e       	adc	r13, r25
    8d94:	29 81       	ldd	r18, Y+1	; 0x01
    8d96:	3a 81       	ldd	r19, Y+2	; 0x02
    8d98:	c9 01       	movw	r24, r18
    8d9a:	88 0f       	add	r24, r24
    8d9c:	99 1f       	adc	r25, r25
    8d9e:	82 0f       	add	r24, r18
    8da0:	93 1f       	adc	r25, r19
    8da2:	88 0f       	add	r24, r24
    8da4:	99 1f       	adc	r25, r25
    8da6:	85 50       	subi	r24, 0x05	; 5
    8da8:	95 4d       	sbci	r25, 0xD5	; 213
    8daa:	fc 01       	movw	r30, r24
    8dac:	80 81       	ld	r24, Z
    8dae:	91 81       	ldd	r25, Z+1	; 0x01
    8db0:	aa 27       	eor	r26, r26
    8db2:	97 fd       	sbrc	r25, 7
    8db4:	a0 95       	com	r26
    8db6:	ba 2f       	mov	r27, r26
    8db8:	bc 01       	movw	r22, r24
    8dba:	cd 01       	movw	r24, r26
    8dbc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8dc0:	9b 01       	movw	r18, r22
    8dc2:	ac 01       	movw	r20, r24
    8dc4:	ca 01       	movw	r24, r20
    8dc6:	b9 01       	movw	r22, r18
    8dc8:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    8dcc:	dc 01       	movw	r26, r24
    8dce:	cb 01       	movw	r24, r22
    8dd0:	7c 01       	movw	r14, r24
    8dd2:	8d 01       	movw	r16, r26
      (float)gas_H[i_r][2]; /*2*x*z*/
    8dd4:	29 81       	ldd	r18, Y+1	; 0x01
    8dd6:	3a 81       	ldd	r19, Y+2	; 0x02
    8dd8:	c9 01       	movw	r24, r18
    8dda:	88 0f       	add	r24, r24
    8ddc:	99 1f       	adc	r25, r25
    8dde:	82 0f       	add	r24, r18
    8de0:	93 1f       	adc	r25, r19
    8de2:	88 0f       	add	r24, r24
    8de4:	99 1f       	adc	r25, r25
    8de6:	81 50       	subi	r24, 0x01	; 1
    8de8:	95 4d       	sbci	r25, 0xD5	; 213
    8dea:	fc 01       	movw	r30, r24
    8dec:	80 81       	ld	r24, Z
    8dee:	91 81       	ldd	r25, Z+1	; 0x01
    8df0:	aa 27       	eor	r26, r26
    8df2:	97 fd       	sbrc	r25, 7
    8df4:	a0 95       	com	r26
    8df6:	ba 2f       	mov	r27, r26
    8df8:	bc 01       	movw	r22, r24
    8dfa:	cd 01       	movw	r24, r26
    8dfc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8e00:	9b 01       	movw	r18, r22
    8e02:	ac 01       	movw	r20, r24
      (float)gas_H[i_r][1]; /*y*y*/
      (*(pf_D + i_r*9 + 2)) = (float)gas_H[i_r][2]*
      (float)gas_H[i_r][2]; /*z*z*/
      (*(pf_D + i_r*9 + 3)) = 2*(float)gas_H[i_r][0]*
      (float)gas_H[i_r][1]; /*2*x*y*/
      (*(pf_D + i_r*9 + 4)) = 2*(float)gas_H[i_r][0]*
    8e04:	c8 01       	movw	r24, r16
    8e06:	b7 01       	movw	r22, r14
    8e08:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8e0c:	dc 01       	movw	r26, r24
    8e0e:	cb 01       	movw	r24, r22
    8e10:	f6 01       	movw	r30, r12
    8e12:	80 83       	st	Z, r24
    8e14:	91 83       	std	Z+1, r25	; 0x01
    8e16:	a2 83       	std	Z+2, r26	; 0x02
    8e18:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][2]; /*2*x*z*/
      (*(pf_D + i_r*9 + 5)) = 2*(float)gas_H[i_r][1]*
    8e1a:	89 81       	ldd	r24, Y+1	; 0x01
    8e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    8e1e:	88 0f       	add	r24, r24
    8e20:	99 1f       	adc	r25, r25
    8e22:	88 0f       	add	r24, r24
    8e24:	99 1f       	adc	r25, r25
    8e26:	9c 01       	movw	r18, r24
    8e28:	22 0f       	add	r18, r18
    8e2a:	33 1f       	adc	r19, r19
    8e2c:	22 0f       	add	r18, r18
    8e2e:	33 1f       	adc	r19, r19
    8e30:	22 0f       	add	r18, r18
    8e32:	33 1f       	adc	r19, r19
    8e34:	82 0f       	add	r24, r18
    8e36:	93 1f       	adc	r25, r19
    8e38:	44 96       	adiw	r24, 0x14	; 20
    8e3a:	2a 89       	ldd	r18, Y+18	; 0x12
    8e3c:	3b 89       	ldd	r19, Y+19	; 0x13
    8e3e:	69 01       	movw	r12, r18
    8e40:	c8 0e       	add	r12, r24
    8e42:	d9 1e       	adc	r13, r25
    8e44:	29 81       	ldd	r18, Y+1	; 0x01
    8e46:	3a 81       	ldd	r19, Y+2	; 0x02
    8e48:	c9 01       	movw	r24, r18
    8e4a:	88 0f       	add	r24, r24
    8e4c:	99 1f       	adc	r25, r25
    8e4e:	82 0f       	add	r24, r18
    8e50:	93 1f       	adc	r25, r19
    8e52:	88 0f       	add	r24, r24
    8e54:	99 1f       	adc	r25, r25
    8e56:	83 50       	subi	r24, 0x03	; 3
    8e58:	95 4d       	sbci	r25, 0xD5	; 213
    8e5a:	fc 01       	movw	r30, r24
    8e5c:	80 81       	ld	r24, Z
    8e5e:	91 81       	ldd	r25, Z+1	; 0x01
    8e60:	aa 27       	eor	r26, r26
    8e62:	97 fd       	sbrc	r25, 7
    8e64:	a0 95       	com	r26
    8e66:	ba 2f       	mov	r27, r26
    8e68:	bc 01       	movw	r22, r24
    8e6a:	cd 01       	movw	r24, r26
    8e6c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8e70:	9b 01       	movw	r18, r22
    8e72:	ac 01       	movw	r20, r24
    8e74:	ca 01       	movw	r24, r20
    8e76:	b9 01       	movw	r22, r18
    8e78:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    8e7c:	dc 01       	movw	r26, r24
    8e7e:	cb 01       	movw	r24, r22
    8e80:	7c 01       	movw	r14, r24
    8e82:	8d 01       	movw	r16, r26
      (float)gas_H[i_r][2]; /*2*y*z*/
    8e84:	29 81       	ldd	r18, Y+1	; 0x01
    8e86:	3a 81       	ldd	r19, Y+2	; 0x02
    8e88:	c9 01       	movw	r24, r18
    8e8a:	88 0f       	add	r24, r24
    8e8c:	99 1f       	adc	r25, r25
    8e8e:	82 0f       	add	r24, r18
    8e90:	93 1f       	adc	r25, r19
    8e92:	88 0f       	add	r24, r24
    8e94:	99 1f       	adc	r25, r25
    8e96:	81 50       	subi	r24, 0x01	; 1
    8e98:	95 4d       	sbci	r25, 0xD5	; 213
    8e9a:	fc 01       	movw	r30, r24
    8e9c:	80 81       	ld	r24, Z
    8e9e:	91 81       	ldd	r25, Z+1	; 0x01
    8ea0:	aa 27       	eor	r26, r26
    8ea2:	97 fd       	sbrc	r25, 7
    8ea4:	a0 95       	com	r26
    8ea6:	ba 2f       	mov	r27, r26
    8ea8:	bc 01       	movw	r22, r24
    8eaa:	cd 01       	movw	r24, r26
    8eac:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8eb0:	9b 01       	movw	r18, r22
    8eb2:	ac 01       	movw	r20, r24
      (float)gas_H[i_r][2]; /*z*z*/
      (*(pf_D + i_r*9 + 3)) = 2*(float)gas_H[i_r][0]*
      (float)gas_H[i_r][1]; /*2*x*y*/
      (*(pf_D + i_r*9 + 4)) = 2*(float)gas_H[i_r][0]*
      (float)gas_H[i_r][2]; /*2*x*z*/
      (*(pf_D + i_r*9 + 5)) = 2*(float)gas_H[i_r][1]*
    8eb4:	c8 01       	movw	r24, r16
    8eb6:	b7 01       	movw	r22, r14
    8eb8:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    8ebc:	dc 01       	movw	r26, r24
    8ebe:	cb 01       	movw	r24, r22
    8ec0:	f6 01       	movw	r30, r12
    8ec2:	80 83       	st	Z, r24
    8ec4:	91 83       	std	Z+1, r25	; 0x01
    8ec6:	a2 83       	std	Z+2, r26	; 0x02
    8ec8:	b3 83       	std	Z+3, r27	; 0x03
      (float)gas_H[i_r][2]; /*2*y*z*/
      (*(pf_D + i_r*9 + 6)) = 2*(float)gas_H[i_r][0]; /*2*x*/
    8eca:	89 81       	ldd	r24, Y+1	; 0x01
    8ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    8ece:	88 0f       	add	r24, r24
    8ed0:	99 1f       	adc	r25, r25
    8ed2:	88 0f       	add	r24, r24
    8ed4:	99 1f       	adc	r25, r25
    8ed6:	9c 01       	movw	r18, r24
    8ed8:	22 0f       	add	r18, r18
    8eda:	33 1f       	adc	r19, r19
    8edc:	22 0f       	add	r18, r18
    8ede:	33 1f       	adc	r19, r19
    8ee0:	22 0f       	add	r18, r18
    8ee2:	33 1f       	adc	r19, r19
    8ee4:	82 0f       	add	r24, r18
    8ee6:	93 1f       	adc	r25, r19
    8ee8:	48 96       	adiw	r24, 0x18	; 24
    8eea:	2a 89       	ldd	r18, Y+18	; 0x12
    8eec:	3b 89       	ldd	r19, Y+19	; 0x13
    8eee:	89 01       	movw	r16, r18
    8ef0:	08 0f       	add	r16, r24
    8ef2:	19 1f       	adc	r17, r25
    8ef4:	29 81       	ldd	r18, Y+1	; 0x01
    8ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    8ef8:	c9 01       	movw	r24, r18
    8efa:	88 0f       	add	r24, r24
    8efc:	99 1f       	adc	r25, r25
    8efe:	82 0f       	add	r24, r18
    8f00:	93 1f       	adc	r25, r19
    8f02:	88 0f       	add	r24, r24
    8f04:	99 1f       	adc	r25, r25
    8f06:	85 50       	subi	r24, 0x05	; 5
    8f08:	95 4d       	sbci	r25, 0xD5	; 213
    8f0a:	fc 01       	movw	r30, r24
    8f0c:	80 81       	ld	r24, Z
    8f0e:	91 81       	ldd	r25, Z+1	; 0x01
    8f10:	aa 27       	eor	r26, r26
    8f12:	97 fd       	sbrc	r25, 7
    8f14:	a0 95       	com	r26
    8f16:	ba 2f       	mov	r27, r26
    8f18:	bc 01       	movw	r22, r24
    8f1a:	cd 01       	movw	r24, r26
    8f1c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8f20:	9b 01       	movw	r18, r22
    8f22:	ac 01       	movw	r20, r24
    8f24:	ca 01       	movw	r24, r20
    8f26:	b9 01       	movw	r22, r18
    8f28:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    8f2c:	dc 01       	movw	r26, r24
    8f2e:	cb 01       	movw	r24, r22
    8f30:	f8 01       	movw	r30, r16
    8f32:	80 83       	st	Z, r24
    8f34:	91 83       	std	Z+1, r25	; 0x01
    8f36:	a2 83       	std	Z+2, r26	; 0x02
    8f38:	b3 83       	std	Z+3, r27	; 0x03
      (*(pf_D + i_r*9 + 7)) = 2*(float)gas_H[i_r][1]; /*2*y*/
    8f3a:	89 81       	ldd	r24, Y+1	; 0x01
    8f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    8f3e:	88 0f       	add	r24, r24
    8f40:	99 1f       	adc	r25, r25
    8f42:	88 0f       	add	r24, r24
    8f44:	99 1f       	adc	r25, r25
    8f46:	9c 01       	movw	r18, r24
    8f48:	22 0f       	add	r18, r18
    8f4a:	33 1f       	adc	r19, r19
    8f4c:	22 0f       	add	r18, r18
    8f4e:	33 1f       	adc	r19, r19
    8f50:	22 0f       	add	r18, r18
    8f52:	33 1f       	adc	r19, r19
    8f54:	82 0f       	add	r24, r18
    8f56:	93 1f       	adc	r25, r19
    8f58:	4c 96       	adiw	r24, 0x1c	; 28
    8f5a:	2a 89       	ldd	r18, Y+18	; 0x12
    8f5c:	3b 89       	ldd	r19, Y+19	; 0x13
    8f5e:	89 01       	movw	r16, r18
    8f60:	08 0f       	add	r16, r24
    8f62:	19 1f       	adc	r17, r25
    8f64:	29 81       	ldd	r18, Y+1	; 0x01
    8f66:	3a 81       	ldd	r19, Y+2	; 0x02
    8f68:	c9 01       	movw	r24, r18
    8f6a:	88 0f       	add	r24, r24
    8f6c:	99 1f       	adc	r25, r25
    8f6e:	82 0f       	add	r24, r18
    8f70:	93 1f       	adc	r25, r19
    8f72:	88 0f       	add	r24, r24
    8f74:	99 1f       	adc	r25, r25
    8f76:	83 50       	subi	r24, 0x03	; 3
    8f78:	95 4d       	sbci	r25, 0xD5	; 213
    8f7a:	fc 01       	movw	r30, r24
    8f7c:	80 81       	ld	r24, Z
    8f7e:	91 81       	ldd	r25, Z+1	; 0x01
    8f80:	aa 27       	eor	r26, r26
    8f82:	97 fd       	sbrc	r25, 7
    8f84:	a0 95       	com	r26
    8f86:	ba 2f       	mov	r27, r26
    8f88:	bc 01       	movw	r22, r24
    8f8a:	cd 01       	movw	r24, r26
    8f8c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    8f90:	9b 01       	movw	r18, r22
    8f92:	ac 01       	movw	r20, r24
    8f94:	ca 01       	movw	r24, r20
    8f96:	b9 01       	movw	r22, r18
    8f98:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    8f9c:	dc 01       	movw	r26, r24
    8f9e:	cb 01       	movw	r24, r22
    8fa0:	f8 01       	movw	r30, r16
    8fa2:	80 83       	st	Z, r24
    8fa4:	91 83       	std	Z+1, r25	; 0x01
    8fa6:	a2 83       	std	Z+2, r26	; 0x02
    8fa8:	b3 83       	std	Z+3, r27	; 0x03
      (*(pf_D + i_r*9 + 8)) = 2*(float)gas_H[i_r][2]; /*2*z*/
    8faa:	89 81       	ldd	r24, Y+1	; 0x01
    8fac:	9a 81       	ldd	r25, Y+2	; 0x02
    8fae:	88 0f       	add	r24, r24
    8fb0:	99 1f       	adc	r25, r25
    8fb2:	88 0f       	add	r24, r24
    8fb4:	99 1f       	adc	r25, r25
    8fb6:	9c 01       	movw	r18, r24
    8fb8:	22 0f       	add	r18, r18
    8fba:	33 1f       	adc	r19, r19
    8fbc:	22 0f       	add	r18, r18
    8fbe:	33 1f       	adc	r19, r19
    8fc0:	22 0f       	add	r18, r18
    8fc2:	33 1f       	adc	r19, r19
    8fc4:	82 0f       	add	r24, r18
    8fc6:	93 1f       	adc	r25, r19
    8fc8:	80 96       	adiw	r24, 0x20	; 32
    8fca:	2a 89       	ldd	r18, Y+18	; 0x12
    8fcc:	3b 89       	ldd	r19, Y+19	; 0x13
    8fce:	89 01       	movw	r16, r18
    8fd0:	08 0f       	add	r16, r24
    8fd2:	19 1f       	adc	r17, r25
    8fd4:	29 81       	ldd	r18, Y+1	; 0x01
    8fd6:	3a 81       	ldd	r19, Y+2	; 0x02
    8fd8:	c9 01       	movw	r24, r18
    8fda:	88 0f       	add	r24, r24
    8fdc:	99 1f       	adc	r25, r25
    8fde:	82 0f       	add	r24, r18
    8fe0:	93 1f       	adc	r25, r19
    8fe2:	88 0f       	add	r24, r24
    8fe4:	99 1f       	adc	r25, r25
    8fe6:	81 50       	subi	r24, 0x01	; 1
    8fe8:	95 4d       	sbci	r25, 0xD5	; 213
    8fea:	fc 01       	movw	r30, r24
    8fec:	80 81       	ld	r24, Z
    8fee:	91 81       	ldd	r25, Z+1	; 0x01
    8ff0:	aa 27       	eor	r26, r26
    8ff2:	97 fd       	sbrc	r25, 7
    8ff4:	a0 95       	com	r26
    8ff6:	ba 2f       	mov	r27, r26
    8ff8:	bc 01       	movw	r22, r24
    8ffa:	cd 01       	movw	r24, r26
    8ffc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    9000:	9b 01       	movw	r18, r22
    9002:	ac 01       	movw	r20, r24
    9004:	ca 01       	movw	r24, r20
    9006:	b9 01       	movw	r22, r18
    9008:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    900c:	dc 01       	movw	r26, r24
    900e:	cb 01       	movw	r24, r22
    9010:	f8 01       	movw	r30, r16
    9012:	80 83       	st	Z, r24
    9014:	91 83       	std	Z+1, r25	; 0x01
    9016:	a2 83       	std	Z+2, r26	; 0x02
    9018:	b3 83       	std	Z+3, r27	; 0x03
    * matlab function ellipsoid_fit for further details. Where the
    * D = [x^2 y^2 z^2 2xy 2xz 2yz 2x 2y 2z] and the 9 coefficients V = [A B C
    * D E F G H I].
    *------------------------------------------------------------------------*/
   pf_D = &gt_insDev.gaf_scratchBuf[0];
   for( i_r = 0; i_r < INS_MAX_CAL_SAMPLES; i_r++)
    901a:	89 81       	ldd	r24, Y+1	; 0x01
    901c:	9a 81       	ldd	r25, Y+2	; 0x02
    901e:	ab 81       	ldd	r26, Y+3	; 0x03
    9020:	bc 81       	ldd	r27, Y+4	; 0x04
    9022:	01 96       	adiw	r24, 0x01	; 1
    9024:	a1 1d       	adc	r26, r1
    9026:	b1 1d       	adc	r27, r1
    9028:	89 83       	std	Y+1, r24	; 0x01
    902a:	9a 83       	std	Y+2, r25	; 0x02
    902c:	ab 83       	std	Y+3, r26	; 0x03
    902e:	bc 83       	std	Y+4, r27	; 0x04
    9030:	89 81       	ldd	r24, Y+1	; 0x01
    9032:	9a 81       	ldd	r25, Y+2	; 0x02
    9034:	ab 81       	ldd	r26, Y+3	; 0x03
    9036:	bc 81       	ldd	r27, Y+4	; 0x04
    9038:	80 31       	cpi	r24, 0x10	; 16
    903a:	91 05       	cpc	r25, r1
    903c:	a1 05       	cpc	r26, r1
    903e:	b1 05       	cpc	r27, r1
    9040:	0c f4       	brge	.+2      	; 0x9044 <ellipsoidFit+0x642>
    9042:	4c cd       	rjmp	.-1384   	; 0x8adc <ellipsoidFit+0xda>
    * The ellipse can be represented by the equation DV = Y where Y represents
    * the magnitude we want the ellipse to have. Solving for v =
    * (( D' * D )^-1)*( D' * ones( INS_MAX_CAL_SAMPLES, 1 ) )...line 109 in the
    * matlab function ellipsoid_fit.
    *------------------------------------------------------------------------*/
   pf_DTrans = &gt_insDev.gaf_scratchBuf[INS_MAX_CAL_SAMPLES*9]; /*D' - 9 x INS_MAX_CAL_SAMPLES matrix*/
    9044:	8a eb       	ldi	r24, 0xBA	; 186
    9046:	96 e2       	ldi	r25, 0x26	; 38
    9048:	8c 8b       	std	Y+20, r24	; 0x14
    904a:	9d 8b       	std	Y+21, r25	; 0x15
   utl_matTransF( pf_D,
    904c:	8a 89       	ldd	r24, Y+18	; 0x12
    904e:	9b 89       	ldd	r25, Y+19	; 0x13
    9050:	2c 89       	ldd	r18, Y+20	; 0x14
    9052:	3d 89       	ldd	r19, Y+21	; 0x15
    9054:	b9 01       	movw	r22, r18
    9056:	20 e1       	ldi	r18, 0x10	; 16
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	40 e0       	ldi	r20, 0x00	; 0
    905c:	50 e0       	ldi	r21, 0x00	; 0
    905e:	0f 2e       	mov	r0, r31
    9060:	f9 e0       	ldi	r31, 0x09	; 9
    9062:	ef 2e       	mov	r14, r31
    9064:	f0 e0       	ldi	r31, 0x00	; 0
    9066:	ff 2e       	mov	r15, r31
    9068:	f0 e0       	ldi	r31, 0x00	; 0
    906a:	0f 2f       	mov	r16, r31
    906c:	f0 e0       	ldi	r31, 0x00	; 0
    906e:	1f 2f       	mov	r17, r31
    9070:	f0 2d       	mov	r31, r0
    9072:	0e 94 b0 e7 	call	0x1cf60	; 0x1cf60 <utl_matTransF>
                  pf_DTrans,
                  INS_MAX_CAL_SAMPLES,
                  9);

   pf_temp1  = &gt_insDev.gaf_scratchBuf[(INS_MAX_CAL_SAMPLES*9)*2]; /*(D'*D) - 9 x 9 matrix*/
    9076:	8a ef       	ldi	r24, 0xFA	; 250
    9078:	98 e2       	ldi	r25, 0x28	; 40
    907a:	8e 8b       	std	Y+22, r24	; 0x16
    907c:	9f 8b       	std	Y+23, r25	; 0x17
   utl_matMultF( pf_DTrans,
    907e:	00 d0       	rcall	.+0      	; 0x9080 <ellipsoidFit+0x67e>
    9080:	00 d0       	rcall	.+0      	; 0x9082 <ellipsoidFit+0x680>
    9082:	2d b7       	in	r18, 0x3d	; 61
    9084:	3e b7       	in	r19, 0x3e	; 62
    9086:	2f 5f       	subi	r18, 0xFF	; 255
    9088:	3f 4f       	sbci	r19, 0xFF	; 255
    908a:	4c 89       	ldd	r20, Y+20	; 0x14
    908c:	5d 89       	ldd	r21, Y+21	; 0x15
    908e:	ea 89       	ldd	r30, Y+18	; 0x12
    9090:	fb 89       	ldd	r31, Y+19	; 0x13
    9092:	e8 96       	adiw	r28, 0x38	; 56
    9094:	ee af       	sts	0x7e, r30
    9096:	ff af       	sts	0x7f, r31
    9098:	e8 97       	sbiw	r28, 0x38	; 56
    909a:	89 e0       	ldi	r24, 0x09	; 9
    909c:	90 e0       	ldi	r25, 0x00	; 0
    909e:	a0 e0       	ldi	r26, 0x00	; 0
    90a0:	b0 e0       	ldi	r27, 0x00	; 0
    90a2:	f9 01       	movw	r30, r18
    90a4:	80 83       	st	Z, r24
    90a6:	91 83       	std	Z+1, r25	; 0x01
    90a8:	a2 83       	std	Z+2, r26	; 0x02
    90aa:	b3 83       	std	Z+3, r27	; 0x03
    90ac:	8e 89       	ldd	r24, Y+22	; 0x16
    90ae:	9f 89       	ldd	r25, Y+23	; 0x17
    90b0:	f9 01       	movw	r30, r18
    90b2:	84 83       	std	Z+4, r24	; 0x04
    90b4:	95 83       	std	Z+5, r25	; 0x05
    90b6:	ca 01       	movw	r24, r20
    90b8:	49 e0       	ldi	r20, 0x09	; 9
    90ba:	50 e0       	ldi	r21, 0x00	; 0
    90bc:	60 e0       	ldi	r22, 0x00	; 0
    90be:	70 e0       	ldi	r23, 0x00	; 0
    90c0:	00 e1       	ldi	r16, 0x10	; 16
    90c2:	10 e0       	ldi	r17, 0x00	; 0
    90c4:	20 e0       	ldi	r18, 0x00	; 0
    90c6:	30 e0       	ldi	r19, 0x00	; 0
    90c8:	e8 96       	adiw	r28, 0x38	; 56
    90ca:	ee ac       	sts	0xae, r30
    90cc:	ff ac       	sts	0xaf, r31
    90ce:	e8 97       	sbiw	r28, 0x38	; 56
    90d0:	aa 24       	eor	r10, r10
    90d2:	bb 24       	eor	r11, r11
    90d4:	65 01       	movw	r12, r10
    90d6:	68 94       	set
    90d8:	a4 f8       	bld	r10, 4
    90da:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    90de:	8d b7       	in	r24, 0x3d	; 61
    90e0:	9e b7       	in	r25, 0x3e	; 62
    90e2:	06 96       	adiw	r24, 0x06	; 6
    90e4:	8d bf       	out	0x3d, r24	; 61
    90e6:	9e bf       	out	0x3e, r25	; 62
                 pf_D,
                 INS_MAX_CAL_SAMPLES,
                 9,
                 pf_temp1);

   pf_temp2 = &gt_insDev.gaf_scratchBuf[0]; /*D'*Y - 9 x 1 matrix*/
    90e8:	8a e7       	ldi	r24, 0x7A	; 122
    90ea:	94 e2       	ldi	r25, 0x24	; 36
    90ec:	88 8f       	std	Y+24, r24	; 0x18
    90ee:	99 8f       	std	Y+25, r25	; 0x19
   for( i_r = 0; i_r < 9; i_r++)
    90f0:	19 82       	std	Y+1, r1	; 0x01
    90f2:	1a 82       	std	Y+2, r1	; 0x02
    90f4:	1b 82       	std	Y+3, r1	; 0x03
    90f6:	1c 82       	std	Y+4, r1	; 0x04
    90f8:	64 c0       	rjmp	.+200    	; 0x91c2 <ellipsoidFit+0x7c0>
   {
      f_sum = 0;
    90fa:	80 e0       	ldi	r24, 0x00	; 0
    90fc:	90 e0       	ldi	r25, 0x00	; 0
    90fe:	dc 01       	movw	r26, r24
    9100:	8a 87       	std	Y+10, r24	; 0x0a
    9102:	9b 87       	std	Y+11, r25	; 0x0b
    9104:	ac 87       	std	Y+12, r26	; 0x0c
    9106:	bd 87       	std	Y+13, r27	; 0x0d
      for( i_c = 0; i_c < INS_MAX_CAL_SAMPLES; i_c++)
    9108:	1d 82       	std	Y+5, r1	; 0x05
    910a:	1e 82       	std	Y+6, r1	; 0x06
    910c:	1f 82       	std	Y+7, r1	; 0x07
    910e:	18 86       	std	Y+8, r1	; 0x08
    9110:	31 c0       	rjmp	.+98     	; 0x9174 <ellipsoidFit+0x772>
      {
         f_sum += (*(pf_DTrans + i_r*INS_MAX_CAL_SAMPLES + i_c));
    9112:	89 81       	ldd	r24, Y+1	; 0x01
    9114:	9a 81       	ldd	r25, Y+2	; 0x02
    9116:	9c 01       	movw	r18, r24
    9118:	22 95       	swap	r18
    911a:	32 95       	swap	r19
    911c:	30 7f       	andi	r19, 0xF0	; 240
    911e:	32 27       	eor	r19, r18
    9120:	20 7f       	andi	r18, 0xF0	; 240
    9122:	32 27       	eor	r19, r18
    9124:	8d 81       	ldd	r24, Y+5	; 0x05
    9126:	9e 81       	ldd	r25, Y+6	; 0x06
    9128:	82 0f       	add	r24, r18
    912a:	93 1f       	adc	r25, r19
    912c:	88 0f       	add	r24, r24
    912e:	99 1f       	adc	r25, r25
    9130:	88 0f       	add	r24, r24
    9132:	99 1f       	adc	r25, r25
    9134:	2c 89       	ldd	r18, Y+20	; 0x14
    9136:	3d 89       	ldd	r19, Y+21	; 0x15
    9138:	82 0f       	add	r24, r18
    913a:	93 1f       	adc	r25, r19
    913c:	fc 01       	movw	r30, r24
    913e:	20 81       	ld	r18, Z
    9140:	31 81       	ldd	r19, Z+1	; 0x01
    9142:	42 81       	ldd	r20, Z+2	; 0x02
    9144:	53 81       	ldd	r21, Z+3	; 0x03
    9146:	6a 85       	ldd	r22, Y+10	; 0x0a
    9148:	7b 85       	ldd	r23, Y+11	; 0x0b
    914a:	8c 85       	ldd	r24, Y+12	; 0x0c
    914c:	9d 85       	ldd	r25, Y+13	; 0x0d
    914e:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
    9152:	dc 01       	movw	r26, r24
    9154:	cb 01       	movw	r24, r22
    9156:	8a 87       	std	Y+10, r24	; 0x0a
    9158:	9b 87       	std	Y+11, r25	; 0x0b
    915a:	ac 87       	std	Y+12, r26	; 0x0c
    915c:	bd 87       	std	Y+13, r27	; 0x0d

   pf_temp2 = &gt_insDev.gaf_scratchBuf[0]; /*D'*Y - 9 x 1 matrix*/
   for( i_r = 0; i_r < 9; i_r++)
   {
      f_sum = 0;
      for( i_c = 0; i_c < INS_MAX_CAL_SAMPLES; i_c++)
    915e:	8d 81       	ldd	r24, Y+5	; 0x05
    9160:	9e 81       	ldd	r25, Y+6	; 0x06
    9162:	af 81       	ldd	r26, Y+7	; 0x07
    9164:	b8 85       	ldd	r27, Y+8	; 0x08
    9166:	01 96       	adiw	r24, 0x01	; 1
    9168:	a1 1d       	adc	r26, r1
    916a:	b1 1d       	adc	r27, r1
    916c:	8d 83       	std	Y+5, r24	; 0x05
    916e:	9e 83       	std	Y+6, r25	; 0x06
    9170:	af 83       	std	Y+7, r26	; 0x07
    9172:	b8 87       	std	Y+8, r27	; 0x08
    9174:	8d 81       	ldd	r24, Y+5	; 0x05
    9176:	9e 81       	ldd	r25, Y+6	; 0x06
    9178:	af 81       	ldd	r26, Y+7	; 0x07
    917a:	b8 85       	ldd	r27, Y+8	; 0x08
    917c:	80 31       	cpi	r24, 0x10	; 16
    917e:	91 05       	cpc	r25, r1
    9180:	a1 05       	cpc	r26, r1
    9182:	b1 05       	cpc	r27, r1
    9184:	34 f2       	brlt	.-116    	; 0x9112 <ellipsoidFit+0x710>
      {
         f_sum += (*(pf_DTrans + i_r*INS_MAX_CAL_SAMPLES + i_c));

      }/*End for( i_c = 0; i_c < INS_MAX_CAL_SAMPLES; i_c++)*/

     pf_temp2[i_r] = f_sum;
    9186:	89 81       	ldd	r24, Y+1	; 0x01
    9188:	9a 81       	ldd	r25, Y+2	; 0x02
    918a:	88 0f       	add	r24, r24
    918c:	99 1f       	adc	r25, r25
    918e:	88 0f       	add	r24, r24
    9190:	99 1f       	adc	r25, r25
    9192:	28 8d       	ldd	r18, Y+24	; 0x18
    9194:	39 8d       	ldd	r19, Y+25	; 0x19
    9196:	28 0f       	add	r18, r24
    9198:	39 1f       	adc	r19, r25
    919a:	8a 85       	ldd	r24, Y+10	; 0x0a
    919c:	9b 85       	ldd	r25, Y+11	; 0x0b
    919e:	ac 85       	ldd	r26, Y+12	; 0x0c
    91a0:	bd 85       	ldd	r27, Y+13	; 0x0d
    91a2:	f9 01       	movw	r30, r18
    91a4:	80 83       	st	Z, r24
    91a6:	91 83       	std	Z+1, r25	; 0x01
    91a8:	a2 83       	std	Z+2, r26	; 0x02
    91aa:	b3 83       	std	Z+3, r27	; 0x03
                 INS_MAX_CAL_SAMPLES,
                 9,
                 pf_temp1);

   pf_temp2 = &gt_insDev.gaf_scratchBuf[0]; /*D'*Y - 9 x 1 matrix*/
   for( i_r = 0; i_r < 9; i_r++)
    91ac:	89 81       	ldd	r24, Y+1	; 0x01
    91ae:	9a 81       	ldd	r25, Y+2	; 0x02
    91b0:	ab 81       	ldd	r26, Y+3	; 0x03
    91b2:	bc 81       	ldd	r27, Y+4	; 0x04
    91b4:	01 96       	adiw	r24, 0x01	; 1
    91b6:	a1 1d       	adc	r26, r1
    91b8:	b1 1d       	adc	r27, r1
    91ba:	89 83       	std	Y+1, r24	; 0x01
    91bc:	9a 83       	std	Y+2, r25	; 0x02
    91be:	ab 83       	std	Y+3, r26	; 0x03
    91c0:	bc 83       	std	Y+4, r27	; 0x04
    91c2:	89 81       	ldd	r24, Y+1	; 0x01
    91c4:	9a 81       	ldd	r25, Y+2	; 0x02
    91c6:	ab 81       	ldd	r26, Y+3	; 0x03
    91c8:	bc 81       	ldd	r27, Y+4	; 0x04
    91ca:	89 30       	cpi	r24, 0x09	; 9
    91cc:	91 05       	cpc	r25, r1
    91ce:	a1 05       	cpc	r26, r1
    91d0:	b1 05       	cpc	r27, r1
    91d2:	0c f4       	brge	.+2      	; 0x91d6 <ellipsoidFit+0x7d4>
    91d4:	92 cf       	rjmp	.-220    	; 0x90fa <ellipsoidFit+0x6f8>

     pf_temp2[i_r] = f_sum;

   }/*End for( i_r = 0; i_r < 9; i_r++)*/

   pf_temp3 = &gt_insDev.gaf_scratchBuf[9]; /*(D'*D)^-1 - 9 x 9 matrix*/
    91d6:	8e e9       	ldi	r24, 0x9E	; 158
    91d8:	94 e2       	ldi	r25, 0x24	; 36
    91da:	8a 8f       	std	Y+26, r24	; 0x1a
    91dc:	9b 8f       	std	Y+27, r25	; 0x1b
   b_passed = utl_matInvF( pf_temp1,
    91de:	8e 89       	ldd	r24, Y+22	; 0x16
    91e0:	9f 89       	ldd	r25, Y+23	; 0x17
    91e2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    91e4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    91e6:	b9 01       	movw	r22, r18
    91e8:	29 e0       	ldi	r18, 0x09	; 9
    91ea:	30 e0       	ldi	r19, 0x00	; 0
    91ec:	40 e0       	ldi	r20, 0x00	; 0
    91ee:	50 e0       	ldi	r21, 0x00	; 0
    91f0:	0e 94 3b e3 	call	0x1c676	; 0x1c676 <utl_matInvF>
    91f4:	89 87       	std	Y+9, r24	; 0x09
                           pf_temp3,
                           9);

   if( b_passed == true)/*Is the matrix invertible?*/
    91f6:	89 85       	ldd	r24, Y+9	; 0x09
    91f8:	88 23       	and	r24, r24
    91fa:	09 f4       	brne	.+2      	; 0x91fe <ellipsoidFit+0x7fc>
    91fc:	da c6       	rjmp	.+3508   	; 0x9fb2 <ellipsoidFit+0x15b0>
   {
      pf_v = &gt_insDev.gaf_scratchBuf[9 + 9*9]; /* (D'*D)^-1*D'*Y - 9 x 1 matrix*/
    91fe:	82 ee       	ldi	r24, 0xE2	; 226
    9200:	95 e2       	ldi	r25, 0x25	; 37
    9202:	88 8b       	std	Y+16, r24	; 0x10
    9204:	99 8b       	std	Y+17, r25	; 0x11
      utl_matMultF( pf_temp3,
    9206:	00 d0       	rcall	.+0      	; 0x9208 <ellipsoidFit+0x806>
    9208:	00 d0       	rcall	.+0      	; 0x920a <ellipsoidFit+0x808>
    920a:	2d b7       	in	r18, 0x3d	; 61
    920c:	3e b7       	in	r19, 0x3e	; 62
    920e:	2f 5f       	subi	r18, 0xFF	; 255
    9210:	3f 4f       	sbci	r19, 0xFF	; 255
    9212:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9214:	5b 8d       	ldd	r21, Y+27	; 0x1b
    9216:	e8 8d       	ldd	r30, Y+24	; 0x18
    9218:	f9 8d       	ldd	r31, Y+25	; 0x19
    921a:	e8 96       	adiw	r28, 0x38	; 56
    921c:	ee af       	sts	0x7e, r30
    921e:	ff af       	sts	0x7f, r31
    9220:	e8 97       	sbiw	r28, 0x38	; 56
    9222:	81 e0       	ldi	r24, 0x01	; 1
    9224:	90 e0       	ldi	r25, 0x00	; 0
    9226:	a0 e0       	ldi	r26, 0x00	; 0
    9228:	b0 e0       	ldi	r27, 0x00	; 0
    922a:	f9 01       	movw	r30, r18
    922c:	80 83       	st	Z, r24
    922e:	91 83       	std	Z+1, r25	; 0x01
    9230:	a2 83       	std	Z+2, r26	; 0x02
    9232:	b3 83       	std	Z+3, r27	; 0x03
    9234:	88 89       	ldd	r24, Y+16	; 0x10
    9236:	99 89       	ldd	r25, Y+17	; 0x11
    9238:	f9 01       	movw	r30, r18
    923a:	84 83       	std	Z+4, r24	; 0x04
    923c:	95 83       	std	Z+5, r25	; 0x05
    923e:	ca 01       	movw	r24, r20
    9240:	49 e0       	ldi	r20, 0x09	; 9
    9242:	50 e0       	ldi	r21, 0x00	; 0
    9244:	60 e0       	ldi	r22, 0x00	; 0
    9246:	70 e0       	ldi	r23, 0x00	; 0
    9248:	09 e0       	ldi	r16, 0x09	; 9
    924a:	10 e0       	ldi	r17, 0x00	; 0
    924c:	20 e0       	ldi	r18, 0x00	; 0
    924e:	30 e0       	ldi	r19, 0x00	; 0
    9250:	e8 96       	adiw	r28, 0x38	; 56
    9252:	ee ac       	sts	0xae, r30
    9254:	ff ac       	sts	0xaf, r31
    9256:	e8 97       	sbiw	r28, 0x38	; 56
    9258:	0f 2e       	mov	r0, r31
    925a:	f9 e0       	ldi	r31, 0x09	; 9
    925c:	af 2e       	mov	r10, r31
    925e:	f0 e0       	ldi	r31, 0x00	; 0
    9260:	bf 2e       	mov	r11, r31
    9262:	f0 e0       	ldi	r31, 0x00	; 0
    9264:	cf 2e       	mov	r12, r31
    9266:	f0 e0       	ldi	r31, 0x00	; 0
    9268:	df 2e       	mov	r13, r31
    926a:	f0 2d       	mov	r31, r0
    926c:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    9270:	8d b7       	in	r24, 0x3d	; 61
    9272:	9e b7       	in	r25, 0x3e	; 62
    9274:	06 96       	adiw	r24, 0x06	; 6
    9276:	8d bf       	out	0x3d, r24	; 61
    9278:	9e bf       	out	0x3e, r25	; 62

      /*---------------------------------------------------------------------*
       * Form the algebraic form of the ellipsoid... line 114 in the matlab
       * function ellipsoid_fit.
       *---------------------------------------------------------------------*/
      pf_A = &gt_insDev.gaf_scratchBuf[0]; /* A = [ v(1) v(4) v(5) v(7); ...
    927a:	8a e7       	ldi	r24, 0x7A	; 122
    927c:	94 e2       	ldi	r25, 0x24	; 36
    927e:	8e 87       	std	Y+14, r24	; 0x0e
    9280:	9f 87       	std	Y+15, r25	; 0x0f
                                                    v(4) v(2) v(6) v(8); ...
                                                    v(5) v(6) v(3) v(9); ...
                                                    v(7) v(8) v(9) -1 ]; - size 4 x 4*/
      *(pf_A + 4*0 + 0) = pf_v[0];
    9282:	88 89       	ldd	r24, Y+16	; 0x10
    9284:	99 89       	ldd	r25, Y+17	; 0x11
    9286:	fc 01       	movw	r30, r24
    9288:	80 81       	ld	r24, Z
    928a:	91 81       	ldd	r25, Z+1	; 0x01
    928c:	a2 81       	ldd	r26, Z+2	; 0x02
    928e:	b3 81       	ldd	r27, Z+3	; 0x03
    9290:	2e 85       	ldd	r18, Y+14	; 0x0e
    9292:	3f 85       	ldd	r19, Y+15	; 0x0f
    9294:	f9 01       	movw	r30, r18
    9296:	80 83       	st	Z, r24
    9298:	91 83       	std	Z+1, r25	; 0x01
    929a:	a2 83       	std	Z+2, r26	; 0x02
    929c:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*0 + 1) = pf_v[3];
    929e:	8e 85       	ldd	r24, Y+14	; 0x0e
    92a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    92a2:	9c 01       	movw	r18, r24
    92a4:	2c 5f       	subi	r18, 0xFC	; 252
    92a6:	3f 4f       	sbci	r19, 0xFF	; 255
    92a8:	88 89       	ldd	r24, Y+16	; 0x10
    92aa:	99 89       	ldd	r25, Y+17	; 0x11
    92ac:	fc 01       	movw	r30, r24
    92ae:	84 85       	ldd	r24, Z+12	; 0x0c
    92b0:	95 85       	ldd	r25, Z+13	; 0x0d
    92b2:	a6 85       	ldd	r26, Z+14	; 0x0e
    92b4:	b7 85       	ldd	r27, Z+15	; 0x0f
    92b6:	f9 01       	movw	r30, r18
    92b8:	80 83       	st	Z, r24
    92ba:	91 83       	std	Z+1, r25	; 0x01
    92bc:	a2 83       	std	Z+2, r26	; 0x02
    92be:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*0 + 2) = pf_v[4];
    92c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    92c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    92c4:	9c 01       	movw	r18, r24
    92c6:	28 5f       	subi	r18, 0xF8	; 248
    92c8:	3f 4f       	sbci	r19, 0xFF	; 255
    92ca:	88 89       	ldd	r24, Y+16	; 0x10
    92cc:	99 89       	ldd	r25, Y+17	; 0x11
    92ce:	fc 01       	movw	r30, r24
    92d0:	80 89       	ldd	r24, Z+16	; 0x10
    92d2:	91 89       	ldd	r25, Z+17	; 0x11
    92d4:	a2 89       	ldd	r26, Z+18	; 0x12
    92d6:	b3 89       	ldd	r27, Z+19	; 0x13
    92d8:	f9 01       	movw	r30, r18
    92da:	80 83       	st	Z, r24
    92dc:	91 83       	std	Z+1, r25	; 0x01
    92de:	a2 83       	std	Z+2, r26	; 0x02
    92e0:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*0 + 3) = pf_v[6];
    92e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    92e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    92e6:	9c 01       	movw	r18, r24
    92e8:	24 5f       	subi	r18, 0xF4	; 244
    92ea:	3f 4f       	sbci	r19, 0xFF	; 255
    92ec:	88 89       	ldd	r24, Y+16	; 0x10
    92ee:	99 89       	ldd	r25, Y+17	; 0x11
    92f0:	fc 01       	movw	r30, r24
    92f2:	80 8d       	ldd	r24, Z+24	; 0x18
    92f4:	91 8d       	ldd	r25, Z+25	; 0x19
    92f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    92f8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    92fa:	f9 01       	movw	r30, r18
    92fc:	80 83       	st	Z, r24
    92fe:	91 83       	std	Z+1, r25	; 0x01
    9300:	a2 83       	std	Z+2, r26	; 0x02
    9302:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*1 + 0) = pf_v[3];
    9304:	8e 85       	ldd	r24, Y+14	; 0x0e
    9306:	9f 85       	ldd	r25, Y+15	; 0x0f
    9308:	9c 01       	movw	r18, r24
    930a:	20 5f       	subi	r18, 0xF0	; 240
    930c:	3f 4f       	sbci	r19, 0xFF	; 255
    930e:	88 89       	ldd	r24, Y+16	; 0x10
    9310:	99 89       	ldd	r25, Y+17	; 0x11
    9312:	fc 01       	movw	r30, r24
    9314:	84 85       	ldd	r24, Z+12	; 0x0c
    9316:	95 85       	ldd	r25, Z+13	; 0x0d
    9318:	a6 85       	ldd	r26, Z+14	; 0x0e
    931a:	b7 85       	ldd	r27, Z+15	; 0x0f
    931c:	f9 01       	movw	r30, r18
    931e:	80 83       	st	Z, r24
    9320:	91 83       	std	Z+1, r25	; 0x01
    9322:	a2 83       	std	Z+2, r26	; 0x02
    9324:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*1 + 1) = pf_v[1];
    9326:	8e 85       	ldd	r24, Y+14	; 0x0e
    9328:	9f 85       	ldd	r25, Y+15	; 0x0f
    932a:	9c 01       	movw	r18, r24
    932c:	2c 5e       	subi	r18, 0xEC	; 236
    932e:	3f 4f       	sbci	r19, 0xFF	; 255
    9330:	88 89       	ldd	r24, Y+16	; 0x10
    9332:	99 89       	ldd	r25, Y+17	; 0x11
    9334:	fc 01       	movw	r30, r24
    9336:	84 81       	ldd	r24, Z+4	; 0x04
    9338:	95 81       	ldd	r25, Z+5	; 0x05
    933a:	a6 81       	ldd	r26, Z+6	; 0x06
    933c:	b7 81       	ldd	r27, Z+7	; 0x07
    933e:	f9 01       	movw	r30, r18
    9340:	80 83       	st	Z, r24
    9342:	91 83       	std	Z+1, r25	; 0x01
    9344:	a2 83       	std	Z+2, r26	; 0x02
    9346:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*1 + 2) = pf_v[5];
    9348:	8e 85       	ldd	r24, Y+14	; 0x0e
    934a:	9f 85       	ldd	r25, Y+15	; 0x0f
    934c:	9c 01       	movw	r18, r24
    934e:	28 5e       	subi	r18, 0xE8	; 232
    9350:	3f 4f       	sbci	r19, 0xFF	; 255
    9352:	88 89       	ldd	r24, Y+16	; 0x10
    9354:	99 89       	ldd	r25, Y+17	; 0x11
    9356:	fc 01       	movw	r30, r24
    9358:	84 89       	ldd	r24, Z+20	; 0x14
    935a:	95 89       	ldd	r25, Z+21	; 0x15
    935c:	a6 89       	ldd	r26, Z+22	; 0x16
    935e:	b7 89       	ldd	r27, Z+23	; 0x17
    9360:	f9 01       	movw	r30, r18
    9362:	80 83       	st	Z, r24
    9364:	91 83       	std	Z+1, r25	; 0x01
    9366:	a2 83       	std	Z+2, r26	; 0x02
    9368:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*1 + 3) = pf_v[7];
    936a:	8e 85       	ldd	r24, Y+14	; 0x0e
    936c:	9f 85       	ldd	r25, Y+15	; 0x0f
    936e:	9c 01       	movw	r18, r24
    9370:	24 5e       	subi	r18, 0xE4	; 228
    9372:	3f 4f       	sbci	r19, 0xFF	; 255
    9374:	88 89       	ldd	r24, Y+16	; 0x10
    9376:	99 89       	ldd	r25, Y+17	; 0x11
    9378:	fc 01       	movw	r30, r24
    937a:	84 8d       	ldd	r24, Z+28	; 0x1c
    937c:	95 8d       	ldd	r25, Z+29	; 0x1d
    937e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9380:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9382:	f9 01       	movw	r30, r18
    9384:	80 83       	st	Z, r24
    9386:	91 83       	std	Z+1, r25	; 0x01
    9388:	a2 83       	std	Z+2, r26	; 0x02
    938a:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*2 + 0) = pf_v[4];
    938c:	8e 85       	ldd	r24, Y+14	; 0x0e
    938e:	9f 85       	ldd	r25, Y+15	; 0x0f
    9390:	9c 01       	movw	r18, r24
    9392:	20 5e       	subi	r18, 0xE0	; 224
    9394:	3f 4f       	sbci	r19, 0xFF	; 255
    9396:	88 89       	ldd	r24, Y+16	; 0x10
    9398:	99 89       	ldd	r25, Y+17	; 0x11
    939a:	fc 01       	movw	r30, r24
    939c:	80 89       	ldd	r24, Z+16	; 0x10
    939e:	91 89       	ldd	r25, Z+17	; 0x11
    93a0:	a2 89       	ldd	r26, Z+18	; 0x12
    93a2:	b3 89       	ldd	r27, Z+19	; 0x13
    93a4:	f9 01       	movw	r30, r18
    93a6:	80 83       	st	Z, r24
    93a8:	91 83       	std	Z+1, r25	; 0x01
    93aa:	a2 83       	std	Z+2, r26	; 0x02
    93ac:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*2 + 1) = pf_v[5];
    93ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    93b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    93b2:	9c 01       	movw	r18, r24
    93b4:	2c 5d       	subi	r18, 0xDC	; 220
    93b6:	3f 4f       	sbci	r19, 0xFF	; 255
    93b8:	88 89       	ldd	r24, Y+16	; 0x10
    93ba:	99 89       	ldd	r25, Y+17	; 0x11
    93bc:	fc 01       	movw	r30, r24
    93be:	84 89       	ldd	r24, Z+20	; 0x14
    93c0:	95 89       	ldd	r25, Z+21	; 0x15
    93c2:	a6 89       	ldd	r26, Z+22	; 0x16
    93c4:	b7 89       	ldd	r27, Z+23	; 0x17
    93c6:	f9 01       	movw	r30, r18
    93c8:	80 83       	st	Z, r24
    93ca:	91 83       	std	Z+1, r25	; 0x01
    93cc:	a2 83       	std	Z+2, r26	; 0x02
    93ce:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*2 + 2) = pf_v[2];
    93d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    93d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    93d4:	9c 01       	movw	r18, r24
    93d6:	28 5d       	subi	r18, 0xD8	; 216
    93d8:	3f 4f       	sbci	r19, 0xFF	; 255
    93da:	88 89       	ldd	r24, Y+16	; 0x10
    93dc:	99 89       	ldd	r25, Y+17	; 0x11
    93de:	fc 01       	movw	r30, r24
    93e0:	80 85       	ldd	r24, Z+8	; 0x08
    93e2:	91 85       	ldd	r25, Z+9	; 0x09
    93e4:	a2 85       	ldd	r26, Z+10	; 0x0a
    93e6:	b3 85       	ldd	r27, Z+11	; 0x0b
    93e8:	f9 01       	movw	r30, r18
    93ea:	80 83       	st	Z, r24
    93ec:	91 83       	std	Z+1, r25	; 0x01
    93ee:	a2 83       	std	Z+2, r26	; 0x02
    93f0:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*2 + 3) = pf_v[8];
    93f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    93f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    93f6:	9c 01       	movw	r18, r24
    93f8:	24 5d       	subi	r18, 0xD4	; 212
    93fa:	3f 4f       	sbci	r19, 0xFF	; 255
    93fc:	88 89       	ldd	r24, Y+16	; 0x10
    93fe:	99 89       	ldd	r25, Y+17	; 0x11
    9400:	fc 01       	movw	r30, r24
    9402:	80 a1       	lds	r24, 0x40
    9404:	91 a1       	lds	r25, 0x41
    9406:	a2 a1       	lds	r26, 0x42
    9408:	b3 a1       	lds	r27, 0x43
    940a:	f9 01       	movw	r30, r18
    940c:	80 83       	st	Z, r24
    940e:	91 83       	std	Z+1, r25	; 0x01
    9410:	a2 83       	std	Z+2, r26	; 0x02
    9412:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*3 + 0) = pf_v[6];
    9414:	8e 85       	ldd	r24, Y+14	; 0x0e
    9416:	9f 85       	ldd	r25, Y+15	; 0x0f
    9418:	9c 01       	movw	r18, r24
    941a:	20 5d       	subi	r18, 0xD0	; 208
    941c:	3f 4f       	sbci	r19, 0xFF	; 255
    941e:	88 89       	ldd	r24, Y+16	; 0x10
    9420:	99 89       	ldd	r25, Y+17	; 0x11
    9422:	fc 01       	movw	r30, r24
    9424:	80 8d       	ldd	r24, Z+24	; 0x18
    9426:	91 8d       	ldd	r25, Z+25	; 0x19
    9428:	a2 8d       	ldd	r26, Z+26	; 0x1a
    942a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    942c:	f9 01       	movw	r30, r18
    942e:	80 83       	st	Z, r24
    9430:	91 83       	std	Z+1, r25	; 0x01
    9432:	a2 83       	std	Z+2, r26	; 0x02
    9434:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*3 + 1) = pf_v[7];
    9436:	8e 85       	ldd	r24, Y+14	; 0x0e
    9438:	9f 85       	ldd	r25, Y+15	; 0x0f
    943a:	9c 01       	movw	r18, r24
    943c:	2c 5c       	subi	r18, 0xCC	; 204
    943e:	3f 4f       	sbci	r19, 0xFF	; 255
    9440:	88 89       	ldd	r24, Y+16	; 0x10
    9442:	99 89       	ldd	r25, Y+17	; 0x11
    9444:	fc 01       	movw	r30, r24
    9446:	84 8d       	ldd	r24, Z+28	; 0x1c
    9448:	95 8d       	ldd	r25, Z+29	; 0x1d
    944a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    944c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    944e:	f9 01       	movw	r30, r18
    9450:	80 83       	st	Z, r24
    9452:	91 83       	std	Z+1, r25	; 0x01
    9454:	a2 83       	std	Z+2, r26	; 0x02
    9456:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*3 + 2) = pf_v[8];
    9458:	8e 85       	ldd	r24, Y+14	; 0x0e
    945a:	9f 85       	ldd	r25, Y+15	; 0x0f
    945c:	9c 01       	movw	r18, r24
    945e:	28 5c       	subi	r18, 0xC8	; 200
    9460:	3f 4f       	sbci	r19, 0xFF	; 255
    9462:	88 89       	ldd	r24, Y+16	; 0x10
    9464:	99 89       	ldd	r25, Y+17	; 0x11
    9466:	fc 01       	movw	r30, r24
    9468:	80 a1       	lds	r24, 0x40
    946a:	91 a1       	lds	r25, 0x41
    946c:	a2 a1       	lds	r26, 0x42
    946e:	b3 a1       	lds	r27, 0x43
    9470:	f9 01       	movw	r30, r18
    9472:	80 83       	st	Z, r24
    9474:	91 83       	std	Z+1, r25	; 0x01
    9476:	a2 83       	std	Z+2, r26	; 0x02
    9478:	b3 83       	std	Z+3, r27	; 0x03
      *(pf_A + 4*3 + 3) = -1;
    947a:	8e 85       	ldd	r24, Y+14	; 0x0e
    947c:	9f 85       	ldd	r25, Y+15	; 0x0f
    947e:	9c 01       	movw	r18, r24
    9480:	24 5c       	subi	r18, 0xC4	; 196
    9482:	3f 4f       	sbci	r19, 0xFF	; 255
    9484:	80 e0       	ldi	r24, 0x00	; 0
    9486:	90 e0       	ldi	r25, 0x00	; 0
    9488:	a0 e8       	ldi	r26, 0x80	; 128
    948a:	bf eb       	ldi	r27, 0xBF	; 191
    948c:	f9 01       	movw	r30, r18
    948e:	80 83       	st	Z, r24
    9490:	91 83       	std	Z+1, r25	; 0x01
    9492:	a2 83       	std	Z+2, r26	; 0x02
    9494:	b3 83       	std	Z+3, r27	; 0x03

      /*---------------------------------------------------------------------*
       * Start...find the center coordinates... line 121 in the matlab function
       * ellipsoid_fit.
       *---------------------------------------------------------------------*/
      pf_temp1 = &gt_insDev.gaf_scratchBuf[16];
    9496:	8a eb       	ldi	r24, 0xBA	; 186
    9498:	94 e2       	ldi	r25, 0x24	; 36
    949a:	8e 8b       	std	Y+22, r24	; 0x16
    949c:	9f 8b       	std	Y+23, r25	; 0x17

      pf_temp1[0] = pf_v[6];
    949e:	88 89       	ldd	r24, Y+16	; 0x10
    94a0:	99 89       	ldd	r25, Y+17	; 0x11
    94a2:	fc 01       	movw	r30, r24
    94a4:	80 8d       	ldd	r24, Z+24	; 0x18
    94a6:	91 8d       	ldd	r25, Z+25	; 0x19
    94a8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    94aa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    94ac:	2e 89       	ldd	r18, Y+22	; 0x16
    94ae:	3f 89       	ldd	r19, Y+23	; 0x17
    94b0:	f9 01       	movw	r30, r18
    94b2:	80 83       	st	Z, r24
    94b4:	91 83       	std	Z+1, r25	; 0x01
    94b6:	a2 83       	std	Z+2, r26	; 0x02
    94b8:	b3 83       	std	Z+3, r27	; 0x03
      pf_temp1[1] = pf_v[7];
    94ba:	8e 89       	ldd	r24, Y+22	; 0x16
    94bc:	9f 89       	ldd	r25, Y+23	; 0x17
    94be:	9c 01       	movw	r18, r24
    94c0:	2c 5f       	subi	r18, 0xFC	; 252
    94c2:	3f 4f       	sbci	r19, 0xFF	; 255
    94c4:	88 89       	ldd	r24, Y+16	; 0x10
    94c6:	99 89       	ldd	r25, Y+17	; 0x11
    94c8:	fc 01       	movw	r30, r24
    94ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    94cc:	95 8d       	ldd	r25, Z+29	; 0x1d
    94ce:	a6 8d       	ldd	r26, Z+30	; 0x1e
    94d0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    94d2:	f9 01       	movw	r30, r18
    94d4:	80 83       	st	Z, r24
    94d6:	91 83       	std	Z+1, r25	; 0x01
    94d8:	a2 83       	std	Z+2, r26	; 0x02
    94da:	b3 83       	std	Z+3, r27	; 0x03
      pf_temp1[2] = pf_v[8];
    94dc:	8e 89       	ldd	r24, Y+22	; 0x16
    94de:	9f 89       	ldd	r25, Y+23	; 0x17
    94e0:	9c 01       	movw	r18, r24
    94e2:	28 5f       	subi	r18, 0xF8	; 248
    94e4:	3f 4f       	sbci	r19, 0xFF	; 255
    94e6:	88 89       	ldd	r24, Y+16	; 0x10
    94e8:	99 89       	ldd	r25, Y+17	; 0x11
    94ea:	fc 01       	movw	r30, r24
    94ec:	80 a1       	lds	r24, 0x40
    94ee:	91 a1       	lds	r25, 0x41
    94f0:	a2 a1       	lds	r26, 0x42
    94f2:	b3 a1       	lds	r27, 0x43
    94f4:	f9 01       	movw	r30, r18
    94f6:	80 83       	st	Z, r24
    94f8:	91 83       	std	Z+1, r25	; 0x01
    94fa:	a2 83       	std	Z+2, r26	; 0x02
    94fc:	b3 83       	std	Z+3, r27	; 0x03

      pf_temp2 = &gt_insDev.gaf_scratchBuf[16+3]; /* -A( 1:3, 1:3 ) - 3 x 3 matrix*/
    94fe:	86 ec       	ldi	r24, 0xC6	; 198
    9500:	94 e2       	ldi	r25, 0x24	; 36
    9502:	88 8f       	std	Y+24, r24	; 0x18
    9504:	99 8f       	std	Y+25, r25	; 0x19

      for( i_r = 0; i_r < 3; i_r++)
    9506:	19 82       	std	Y+1, r1	; 0x01
    9508:	1a 82       	std	Y+2, r1	; 0x02
    950a:	1b 82       	std	Y+3, r1	; 0x03
    950c:	1c 82       	std	Y+4, r1	; 0x04
    950e:	56 c0       	rjmp	.+172    	; 0x95bc <ellipsoidFit+0xbba>
         for( i_c = 0; i_c < 3; i_c++)
    9510:	1d 82       	std	Y+5, r1	; 0x05
    9512:	1e 82       	std	Y+6, r1	; 0x06
    9514:	1f 82       	std	Y+7, r1	; 0x07
    9516:	18 86       	std	Y+8, r1	; 0x08
    9518:	3c c0       	rjmp	.+120    	; 0x9592 <ellipsoidFit+0xb90>
            (*(pf_temp2 + i_r*3 + i_c)) = -(*(pf_A + i_r*4 + i_c));
    951a:	29 81       	ldd	r18, Y+1	; 0x01
    951c:	3a 81       	ldd	r19, Y+2	; 0x02
    951e:	c9 01       	movw	r24, r18
    9520:	88 0f       	add	r24, r24
    9522:	99 1f       	adc	r25, r25
    9524:	28 0f       	add	r18, r24
    9526:	39 1f       	adc	r19, r25
    9528:	8d 81       	ldd	r24, Y+5	; 0x05
    952a:	9e 81       	ldd	r25, Y+6	; 0x06
    952c:	82 0f       	add	r24, r18
    952e:	93 1f       	adc	r25, r19
    9530:	88 0f       	add	r24, r24
    9532:	99 1f       	adc	r25, r25
    9534:	88 0f       	add	r24, r24
    9536:	99 1f       	adc	r25, r25
    9538:	28 8d       	ldd	r18, Y+24	; 0x18
    953a:	39 8d       	ldd	r19, Y+25	; 0x19
    953c:	28 0f       	add	r18, r24
    953e:	39 1f       	adc	r19, r25
    9540:	89 81       	ldd	r24, Y+1	; 0x01
    9542:	9a 81       	ldd	r25, Y+2	; 0x02
    9544:	ac 01       	movw	r20, r24
    9546:	44 0f       	add	r20, r20
    9548:	55 1f       	adc	r21, r21
    954a:	44 0f       	add	r20, r20
    954c:	55 1f       	adc	r21, r21
    954e:	8d 81       	ldd	r24, Y+5	; 0x05
    9550:	9e 81       	ldd	r25, Y+6	; 0x06
    9552:	84 0f       	add	r24, r20
    9554:	95 1f       	adc	r25, r21
    9556:	88 0f       	add	r24, r24
    9558:	99 1f       	adc	r25, r25
    955a:	88 0f       	add	r24, r24
    955c:	99 1f       	adc	r25, r25
    955e:	4e 85       	ldd	r20, Y+14	; 0x0e
    9560:	5f 85       	ldd	r21, Y+15	; 0x0f
    9562:	84 0f       	add	r24, r20
    9564:	95 1f       	adc	r25, r21
    9566:	fc 01       	movw	r30, r24
    9568:	80 81       	ld	r24, Z
    956a:	91 81       	ldd	r25, Z+1	; 0x01
    956c:	a2 81       	ldd	r26, Z+2	; 0x02
    956e:	b3 81       	ldd	r27, Z+3	; 0x03
    9570:	b0 58       	subi	r27, 0x80	; 128
    9572:	f9 01       	movw	r30, r18
    9574:	80 83       	st	Z, r24
    9576:	91 83       	std	Z+1, r25	; 0x01
    9578:	a2 83       	std	Z+2, r26	; 0x02
    957a:	b3 83       	std	Z+3, r27	; 0x03
      pf_temp1[2] = pf_v[8];

      pf_temp2 = &gt_insDev.gaf_scratchBuf[16+3]; /* -A( 1:3, 1:3 ) - 3 x 3 matrix*/

      for( i_r = 0; i_r < 3; i_r++)
         for( i_c = 0; i_c < 3; i_c++)
    957c:	8d 81       	ldd	r24, Y+5	; 0x05
    957e:	9e 81       	ldd	r25, Y+6	; 0x06
    9580:	af 81       	ldd	r26, Y+7	; 0x07
    9582:	b8 85       	ldd	r27, Y+8	; 0x08
    9584:	01 96       	adiw	r24, 0x01	; 1
    9586:	a1 1d       	adc	r26, r1
    9588:	b1 1d       	adc	r27, r1
    958a:	8d 83       	std	Y+5, r24	; 0x05
    958c:	9e 83       	std	Y+6, r25	; 0x06
    958e:	af 83       	std	Y+7, r26	; 0x07
    9590:	b8 87       	std	Y+8, r27	; 0x08
    9592:	8d 81       	ldd	r24, Y+5	; 0x05
    9594:	9e 81       	ldd	r25, Y+6	; 0x06
    9596:	af 81       	ldd	r26, Y+7	; 0x07
    9598:	b8 85       	ldd	r27, Y+8	; 0x08
    959a:	83 30       	cpi	r24, 0x03	; 3
    959c:	91 05       	cpc	r25, r1
    959e:	a1 05       	cpc	r26, r1
    95a0:	b1 05       	cpc	r27, r1
    95a2:	0c f4       	brge	.+2      	; 0x95a6 <ellipsoidFit+0xba4>
    95a4:	ba cf       	rjmp	.-140    	; 0x951a <ellipsoidFit+0xb18>
      pf_temp1[1] = pf_v[7];
      pf_temp1[2] = pf_v[8];

      pf_temp2 = &gt_insDev.gaf_scratchBuf[16+3]; /* -A( 1:3, 1:3 ) - 3 x 3 matrix*/

      for( i_r = 0; i_r < 3; i_r++)
    95a6:	89 81       	ldd	r24, Y+1	; 0x01
    95a8:	9a 81       	ldd	r25, Y+2	; 0x02
    95aa:	ab 81       	ldd	r26, Y+3	; 0x03
    95ac:	bc 81       	ldd	r27, Y+4	; 0x04
    95ae:	01 96       	adiw	r24, 0x01	; 1
    95b0:	a1 1d       	adc	r26, r1
    95b2:	b1 1d       	adc	r27, r1
    95b4:	89 83       	std	Y+1, r24	; 0x01
    95b6:	9a 83       	std	Y+2, r25	; 0x02
    95b8:	ab 83       	std	Y+3, r26	; 0x03
    95ba:	bc 83       	std	Y+4, r27	; 0x04
    95bc:	89 81       	ldd	r24, Y+1	; 0x01
    95be:	9a 81       	ldd	r25, Y+2	; 0x02
    95c0:	ab 81       	ldd	r26, Y+3	; 0x03
    95c2:	bc 81       	ldd	r27, Y+4	; 0x04
    95c4:	83 30       	cpi	r24, 0x03	; 3
    95c6:	91 05       	cpc	r25, r1
    95c8:	a1 05       	cpc	r26, r1
    95ca:	b1 05       	cpc	r27, r1
    95cc:	0c f4       	brge	.+2      	; 0x95d0 <ellipsoidFit+0xbce>
    95ce:	a0 cf       	rjmp	.-192    	; 0x9510 <ellipsoidFit+0xb0e>
         for( i_c = 0; i_c < 3; i_c++)
            (*(pf_temp2 + i_r*3 + i_c)) = -(*(pf_A + i_r*4 + i_c));

      pf_temp3 = &gt_insDev.gaf_scratchBuf[16+3+9]; /* -A( 1:3, 1:3 )' - 3 x 3 matrix*/
    95d0:	8a ee       	ldi	r24, 0xEA	; 234
    95d2:	94 e2       	ldi	r25, 0x24	; 36
    95d4:	8a 8f       	std	Y+26, r24	; 0x1a
    95d6:	9b 8f       	std	Y+27, r25	; 0x1b
      utl_matTransF( pf_temp2,
    95d8:	88 8d       	ldd	r24, Y+24	; 0x18
    95da:	99 8d       	ldd	r25, Y+25	; 0x19
    95dc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    95de:	3b 8d       	ldd	r19, Y+27	; 0x1b
    95e0:	b9 01       	movw	r22, r18
    95e2:	23 e0       	ldi	r18, 0x03	; 3
    95e4:	30 e0       	ldi	r19, 0x00	; 0
    95e6:	40 e0       	ldi	r20, 0x00	; 0
    95e8:	50 e0       	ldi	r21, 0x00	; 0
    95ea:	0f 2e       	mov	r0, r31
    95ec:	f3 e0       	ldi	r31, 0x03	; 3
    95ee:	ef 2e       	mov	r14, r31
    95f0:	f0 e0       	ldi	r31, 0x00	; 0
    95f2:	ff 2e       	mov	r15, r31
    95f4:	f0 e0       	ldi	r31, 0x00	; 0
    95f6:	0f 2f       	mov	r16, r31
    95f8:	f0 e0       	ldi	r31, 0x00	; 0
    95fa:	1f 2f       	mov	r17, r31
    95fc:	f0 2d       	mov	r31, r0
    95fe:	0e 94 b0 e7 	call	0x1cf60	; 0x1cf60 <utl_matTransF>
                     pf_temp3,
                     3,
                     3);

      pf_temp4 = &gt_insDev.gaf_scratchBuf[16+3+9+9]; /* -A( 1:3, 1:3 )'*-A( 1:3, 1:3 ) -
    9602:	8e e0       	ldi	r24, 0x0E	; 14
    9604:	95 e2       	ldi	r25, 0x25	; 37
    9606:	8c 8f       	std	Y+28, r24	; 0x1c
    9608:	9d 8f       	std	Y+29, r25	; 0x1d
                                            3 x 3 matrix*/
      utl_matMultF( pf_temp3,
    960a:	00 d0       	rcall	.+0      	; 0x960c <ellipsoidFit+0xc0a>
    960c:	00 d0       	rcall	.+0      	; 0x960e <ellipsoidFit+0xc0c>
    960e:	2d b7       	in	r18, 0x3d	; 61
    9610:	3e b7       	in	r19, 0x3e	; 62
    9612:	2f 5f       	subi	r18, 0xFF	; 255
    9614:	3f 4f       	sbci	r19, 0xFF	; 255
    9616:	4a 8d       	ldd	r20, Y+26	; 0x1a
    9618:	5b 8d       	ldd	r21, Y+27	; 0x1b
    961a:	e8 8d       	ldd	r30, Y+24	; 0x18
    961c:	f9 8d       	ldd	r31, Y+25	; 0x19
    961e:	e8 96       	adiw	r28, 0x38	; 56
    9620:	ee af       	sts	0x7e, r30
    9622:	ff af       	sts	0x7f, r31
    9624:	e8 97       	sbiw	r28, 0x38	; 56
    9626:	83 e0       	ldi	r24, 0x03	; 3
    9628:	90 e0       	ldi	r25, 0x00	; 0
    962a:	a0 e0       	ldi	r26, 0x00	; 0
    962c:	b0 e0       	ldi	r27, 0x00	; 0
    962e:	f9 01       	movw	r30, r18
    9630:	80 83       	st	Z, r24
    9632:	91 83       	std	Z+1, r25	; 0x01
    9634:	a2 83       	std	Z+2, r26	; 0x02
    9636:	b3 83       	std	Z+3, r27	; 0x03
    9638:	8c 8d       	ldd	r24, Y+28	; 0x1c
    963a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    963c:	f9 01       	movw	r30, r18
    963e:	84 83       	std	Z+4, r24	; 0x04
    9640:	95 83       	std	Z+5, r25	; 0x05
    9642:	ca 01       	movw	r24, r20
    9644:	43 e0       	ldi	r20, 0x03	; 3
    9646:	50 e0       	ldi	r21, 0x00	; 0
    9648:	60 e0       	ldi	r22, 0x00	; 0
    964a:	70 e0       	ldi	r23, 0x00	; 0
    964c:	03 e0       	ldi	r16, 0x03	; 3
    964e:	10 e0       	ldi	r17, 0x00	; 0
    9650:	20 e0       	ldi	r18, 0x00	; 0
    9652:	30 e0       	ldi	r19, 0x00	; 0
    9654:	e8 96       	adiw	r28, 0x38	; 56
    9656:	ee ac       	sts	0xae, r30
    9658:	ff ac       	sts	0xaf, r31
    965a:	e8 97       	sbiw	r28, 0x38	; 56
    965c:	0f 2e       	mov	r0, r31
    965e:	f3 e0       	ldi	r31, 0x03	; 3
    9660:	af 2e       	mov	r10, r31
    9662:	f0 e0       	ldi	r31, 0x00	; 0
    9664:	bf 2e       	mov	r11, r31
    9666:	f0 e0       	ldi	r31, 0x00	; 0
    9668:	cf 2e       	mov	r12, r31
    966a:	f0 e0       	ldi	r31, 0x00	; 0
    966c:	df 2e       	mov	r13, r31
    966e:	f0 2d       	mov	r31, r0
    9670:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    9674:	8d b7       	in	r24, 0x3d	; 61
    9676:	9e b7       	in	r25, 0x3e	; 62
    9678:	06 96       	adiw	r24, 0x06	; 6
    967a:	8d bf       	out	0x3d, r24	; 61
    967c:	9e bf       	out	0x3e, r25	; 62
                    pf_temp2,
                    3,
                    3,
                    pf_temp4);

      b_passed = utl_matInvF( pf_temp4,
    967e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9680:	9d 8d       	ldd	r25, Y+29	; 0x1d
    9682:	28 8d       	ldd	r18, Y+24	; 0x18
    9684:	39 8d       	ldd	r19, Y+25	; 0x19
    9686:	b9 01       	movw	r22, r18
    9688:	23 e0       	ldi	r18, 0x03	; 3
    968a:	30 e0       	ldi	r19, 0x00	; 0
    968c:	40 e0       	ldi	r20, 0x00	; 0
    968e:	50 e0       	ldi	r21, 0x00	; 0
    9690:	0e 94 3b e3 	call	0x1c676	; 0x1c676 <utl_matInvF>
    9694:	89 87       	std	Y+9, r24	; 0x09
                              pf_temp2,
                              3);

      if( b_passed == true)
    9696:	89 85       	ldd	r24, Y+9	; 0x09
    9698:	88 23       	and	r24, r24
    969a:	09 f4       	brne	.+2      	; 0x969e <ellipsoidFit+0xc9c>
    969c:	8a c4       	rjmp	.+2324   	; 0x9fb2 <ellipsoidFit+0x15b0>
      {
         utl_matMultF( pf_temp3,
    969e:	00 d0       	rcall	.+0      	; 0x96a0 <ellipsoidFit+0xc9e>
    96a0:	00 d0       	rcall	.+0      	; 0x96a2 <ellipsoidFit+0xca0>
    96a2:	2d b7       	in	r18, 0x3d	; 61
    96a4:	3e b7       	in	r19, 0x3e	; 62
    96a6:	2f 5f       	subi	r18, 0xFF	; 255
    96a8:	3f 4f       	sbci	r19, 0xFF	; 255
    96aa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    96ac:	5b 8d       	ldd	r21, Y+27	; 0x1b
    96ae:	ee 89       	ldd	r30, Y+22	; 0x16
    96b0:	ff 89       	ldd	r31, Y+23	; 0x17
    96b2:	e8 96       	adiw	r28, 0x38	; 56
    96b4:	ee af       	sts	0x7e, r30
    96b6:	ff af       	sts	0x7f, r31
    96b8:	e8 97       	sbiw	r28, 0x38	; 56
    96ba:	81 e0       	ldi	r24, 0x01	; 1
    96bc:	90 e0       	ldi	r25, 0x00	; 0
    96be:	a0 e0       	ldi	r26, 0x00	; 0
    96c0:	b0 e0       	ldi	r27, 0x00	; 0
    96c2:	f9 01       	movw	r30, r18
    96c4:	80 83       	st	Z, r24
    96c6:	91 83       	std	Z+1, r25	; 0x01
    96c8:	a2 83       	std	Z+2, r26	; 0x02
    96ca:	b3 83       	std	Z+3, r27	; 0x03
    96cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    96ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    96d0:	f9 01       	movw	r30, r18
    96d2:	84 83       	std	Z+4, r24	; 0x04
    96d4:	95 83       	std	Z+5, r25	; 0x05
    96d6:	ca 01       	movw	r24, r20
    96d8:	43 e0       	ldi	r20, 0x03	; 3
    96da:	50 e0       	ldi	r21, 0x00	; 0
    96dc:	60 e0       	ldi	r22, 0x00	; 0
    96de:	70 e0       	ldi	r23, 0x00	; 0
    96e0:	03 e0       	ldi	r16, 0x03	; 3
    96e2:	10 e0       	ldi	r17, 0x00	; 0
    96e4:	20 e0       	ldi	r18, 0x00	; 0
    96e6:	30 e0       	ldi	r19, 0x00	; 0
    96e8:	e8 96       	adiw	r28, 0x38	; 56
    96ea:	ee ac       	sts	0xae, r30
    96ec:	ff ac       	sts	0xaf, r31
    96ee:	e8 97       	sbiw	r28, 0x38	; 56
    96f0:	0f 2e       	mov	r0, r31
    96f2:	f3 e0       	ldi	r31, 0x03	; 3
    96f4:	af 2e       	mov	r10, r31
    96f6:	f0 e0       	ldi	r31, 0x00	; 0
    96f8:	bf 2e       	mov	r11, r31
    96fa:	f0 e0       	ldi	r31, 0x00	; 0
    96fc:	cf 2e       	mov	r12, r31
    96fe:	f0 e0       	ldi	r31, 0x00	; 0
    9700:	df 2e       	mov	r13, r31
    9702:	f0 2d       	mov	r31, r0
    9704:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    9708:	8d b7       	in	r24, 0x3d	; 61
    970a:	9e b7       	in	r25, 0x3e	; 62
    970c:	06 96       	adiw	r24, 0x06	; 6
    970e:	8d bf       	out	0x3d, r24	; 61
    9710:	9e bf       	out	0x3e, r25	; 62
                       pf_temp1,
                       3,
                       1,
                       pf_temp4);

         utl_matMultF( pf_temp2,
    9712:	00 d0       	rcall	.+0      	; 0x9714 <ellipsoidFit+0xd12>
    9714:	00 d0       	rcall	.+0      	; 0x9716 <ellipsoidFit+0xd14>
    9716:	2d b7       	in	r18, 0x3d	; 61
    9718:	3e b7       	in	r19, 0x3e	; 62
    971a:	2f 5f       	subi	r18, 0xFF	; 255
    971c:	3f 4f       	sbci	r19, 0xFF	; 255
    971e:	48 8d       	ldd	r20, Y+24	; 0x18
    9720:	59 8d       	ldd	r21, Y+25	; 0x19
    9722:	ec 8d       	ldd	r30, Y+28	; 0x1c
    9724:	fd 8d       	ldd	r31, Y+29	; 0x1d
    9726:	e8 96       	adiw	r28, 0x38	; 56
    9728:	ee af       	sts	0x7e, r30
    972a:	ff af       	sts	0x7f, r31
    972c:	e8 97       	sbiw	r28, 0x38	; 56
    972e:	81 e0       	ldi	r24, 0x01	; 1
    9730:	90 e0       	ldi	r25, 0x00	; 0
    9732:	a0 e0       	ldi	r26, 0x00	; 0
    9734:	b0 e0       	ldi	r27, 0x00	; 0
    9736:	f9 01       	movw	r30, r18
    9738:	80 83       	st	Z, r24
    973a:	91 83       	std	Z+1, r25	; 0x01
    973c:	a2 83       	std	Z+2, r26	; 0x02
    973e:	b3 83       	std	Z+3, r27	; 0x03
                       3,
                       3,
                       pf_temp4,
                       3,
                       1,
                       af_bias);
    9740:	ce 01       	movw	r24, r28
    9742:	c2 96       	adiw	r24, 0x32	; 50
                       pf_temp1,
                       3,
                       1,
                       pf_temp4);

         utl_matMultF( pf_temp2,
    9744:	f9 01       	movw	r30, r18
    9746:	84 83       	std	Z+4, r24	; 0x04
    9748:	95 83       	std	Z+5, r25	; 0x05
    974a:	ca 01       	movw	r24, r20
    974c:	43 e0       	ldi	r20, 0x03	; 3
    974e:	50 e0       	ldi	r21, 0x00	; 0
    9750:	60 e0       	ldi	r22, 0x00	; 0
    9752:	70 e0       	ldi	r23, 0x00	; 0
    9754:	03 e0       	ldi	r16, 0x03	; 3
    9756:	10 e0       	ldi	r17, 0x00	; 0
    9758:	20 e0       	ldi	r18, 0x00	; 0
    975a:	30 e0       	ldi	r19, 0x00	; 0
    975c:	e8 96       	adiw	r28, 0x38	; 56
    975e:	ee ac       	sts	0xae, r30
    9760:	ff ac       	sts	0xaf, r31
    9762:	e8 97       	sbiw	r28, 0x38	; 56
    9764:	0f 2e       	mov	r0, r31
    9766:	f3 e0       	ldi	r31, 0x03	; 3
    9768:	af 2e       	mov	r10, r31
    976a:	f0 e0       	ldi	r31, 0x00	; 0
    976c:	bf 2e       	mov	r11, r31
    976e:	f0 e0       	ldi	r31, 0x00	; 0
    9770:	cf 2e       	mov	r12, r31
    9772:	f0 e0       	ldi	r31, 0x00	; 0
    9774:	df 2e       	mov	r13, r31
    9776:	f0 2d       	mov	r31, r0
    9778:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    977c:	8d b7       	in	r24, 0x3d	; 61
    977e:	9e b7       	in	r25, 0x3e	; 62
    9780:	06 96       	adiw	r24, 0x06	; 6
    9782:	8d bf       	out	0x3d, r24	; 61
    9784:	9e bf       	out	0x3e, r25	; 62
          *------------------------------------------------------------------*/

         /*------------------------------------------------------------------*
          * Form the translation matrix.
          *------------------------------------------------------------------*/
         pf_temp5 = &gt_insDev.gaf_scratchBuf[16+3+9+9+9]; /* T = eye( 4 ) - 4 x 4
    9786:	82 e3       	ldi	r24, 0x32	; 50
    9788:	95 e2       	ldi	r25, 0x25	; 37
    978a:	8e 8f       	std	Y+30, r24	; 0x1e
    978c:	9f 8f       	std	Y+31, r25	; 0x1f
                                                              matrix*/
         utl_matEyeF( pf_temp5,
    978e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9790:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9792:	44 e0       	ldi	r20, 0x04	; 4
    9794:	50 e0       	ldi	r21, 0x00	; 0
    9796:	60 e0       	ldi	r22, 0x00	; 0
    9798:	70 e0       	ldi	r23, 0x00	; 0
    979a:	00 e0       	ldi	r16, 0x00	; 0
    979c:	10 e0       	ldi	r17, 0x00	; 0
    979e:	20 e8       	ldi	r18, 0x80	; 128
    97a0:	3f e3       	ldi	r19, 0x3F	; 63
    97a2:	0e 94 53 e8 	call	0x1d0a6	; 0x1d0a6 <utl_matEyeF>
                      4,
                      1.0);

         (*(pf_temp5 + 3*4 + 0)) = af_bias[0];
    97a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    97a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    97aa:	9c 01       	movw	r18, r24
    97ac:	20 5d       	subi	r18, 0xD0	; 208
    97ae:	3f 4f       	sbci	r19, 0xFF	; 255
    97b0:	8a a9       	sts	0x4a, r24
    97b2:	9b a9       	sts	0x4b, r25
    97b4:	ac a9       	sts	0x4c, r26
    97b6:	bd a9       	sts	0x4d, r27
    97b8:	f9 01       	movw	r30, r18
    97ba:	80 83       	st	Z, r24
    97bc:	91 83       	std	Z+1, r25	; 0x01
    97be:	a2 83       	std	Z+2, r26	; 0x02
    97c0:	b3 83       	std	Z+3, r27	; 0x03
         (*(pf_temp5 + 3*4 + 1)) = af_bias[1];
    97c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    97c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    97c6:	9c 01       	movw	r18, r24
    97c8:	2c 5c       	subi	r18, 0xCC	; 204
    97ca:	3f 4f       	sbci	r19, 0xFF	; 255
    97cc:	8e a9       	sts	0x4e, r24
    97ce:	9f a9       	sts	0x4f, r25
    97d0:	a8 ad       	sts	0x68, r26
    97d2:	b9 ad       	sts	0x69, r27
    97d4:	f9 01       	movw	r30, r18
    97d6:	80 83       	st	Z, r24
    97d8:	91 83       	std	Z+1, r25	; 0x01
    97da:	a2 83       	std	Z+2, r26	; 0x02
    97dc:	b3 83       	std	Z+3, r27	; 0x03
         (*(pf_temp5 + 3*4 + 2)) = af_bias[2];
    97de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    97e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    97e2:	9c 01       	movw	r18, r24
    97e4:	28 5c       	subi	r18, 0xC8	; 200
    97e6:	3f 4f       	sbci	r19, 0xFF	; 255
    97e8:	8a ad       	sts	0x6a, r24
    97ea:	9b ad       	sts	0x6b, r25
    97ec:	ac ad       	sts	0x6c, r26
    97ee:	bd ad       	sts	0x6d, r27
    97f0:	f9 01       	movw	r30, r18
    97f2:	80 83       	st	Z, r24
    97f4:	91 83       	std	Z+1, r25	; 0x01
    97f6:	a2 83       	std	Z+2, r26	; 0x02
    97f8:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Translate the ellipse to the center using R = T * A * T'... line
          * 126 in the matlab function ellipsoid_fit.
          *------------------------------------------------------------------*/
         pf_temp6 = &gt_insDev.gaf_scratchBuf[16+3+9+9+9+16]; /*T' - 4 x 4 matrix*/
    97fa:	82 e7       	ldi	r24, 0x72	; 114
    97fc:	95 e2       	ldi	r25, 0x25	; 37
    97fe:	88 a3       	lds	r24, 0x58
    9800:	99 a3       	lds	r25, 0x59
         utl_matTransF( pf_temp5,
    9802:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9804:	9f 8d       	ldd	r25, Y+31	; 0x1f
    9806:	28 a1       	lds	r18, 0x48
    9808:	39 a1       	lds	r19, 0x49
    980a:	b9 01       	movw	r22, r18
    980c:	24 e0       	ldi	r18, 0x04	; 4
    980e:	30 e0       	ldi	r19, 0x00	; 0
    9810:	40 e0       	ldi	r20, 0x00	; 0
    9812:	50 e0       	ldi	r21, 0x00	; 0
    9814:	ee 24       	eor	r14, r14
    9816:	ff 24       	eor	r15, r15
    9818:	87 01       	movw	r16, r14
    981a:	68 94       	set
    981c:	e2 f8       	bld	r14, 2
    981e:	0e 94 b0 e7 	call	0x1cf60	; 0x1cf60 <utl_matTransF>
                        pf_temp6,
                        4,
                        4);

         pf_temp7 = &gt_insDev.gaf_scratchBuf[16+3+9+9+9+16+16]; /*A * T' - 4 x 4 matrix*/
    9822:	82 eb       	ldi	r24, 0xB2	; 178
    9824:	95 e2       	ldi	r25, 0x25	; 37
    9826:	8a a3       	lds	r24, 0x5a
    9828:	9b a3       	lds	r25, 0x5b
         utl_matMultF( pf_A,
    982a:	00 d0       	rcall	.+0      	; 0x982c <ellipsoidFit+0xe2a>
    982c:	00 d0       	rcall	.+0      	; 0x982e <ellipsoidFit+0xe2c>
    982e:	2d b7       	in	r18, 0x3d	; 61
    9830:	3e b7       	in	r19, 0x3e	; 62
    9832:	2f 5f       	subi	r18, 0xFF	; 255
    9834:	3f 4f       	sbci	r19, 0xFF	; 255
    9836:	4e 85       	ldd	r20, Y+14	; 0x0e
    9838:	5f 85       	ldd	r21, Y+15	; 0x0f
    983a:	e8 a1       	lds	r30, 0x48
    983c:	f9 a1       	lds	r31, 0x49
    983e:	e8 96       	adiw	r28, 0x38	; 56
    9840:	ee af       	sts	0x7e, r30
    9842:	ff af       	sts	0x7f, r31
    9844:	e8 97       	sbiw	r28, 0x38	; 56
    9846:	84 e0       	ldi	r24, 0x04	; 4
    9848:	90 e0       	ldi	r25, 0x00	; 0
    984a:	a0 e0       	ldi	r26, 0x00	; 0
    984c:	b0 e0       	ldi	r27, 0x00	; 0
    984e:	f9 01       	movw	r30, r18
    9850:	80 83       	st	Z, r24
    9852:	91 83       	std	Z+1, r25	; 0x01
    9854:	a2 83       	std	Z+2, r26	; 0x02
    9856:	b3 83       	std	Z+3, r27	; 0x03
    9858:	8a a1       	lds	r24, 0x4a
    985a:	9b a1       	lds	r25, 0x4b
    985c:	f9 01       	movw	r30, r18
    985e:	84 83       	std	Z+4, r24	; 0x04
    9860:	95 83       	std	Z+5, r25	; 0x05
    9862:	ca 01       	movw	r24, r20
    9864:	44 e0       	ldi	r20, 0x04	; 4
    9866:	50 e0       	ldi	r21, 0x00	; 0
    9868:	60 e0       	ldi	r22, 0x00	; 0
    986a:	70 e0       	ldi	r23, 0x00	; 0
    986c:	04 e0       	ldi	r16, 0x04	; 4
    986e:	10 e0       	ldi	r17, 0x00	; 0
    9870:	20 e0       	ldi	r18, 0x00	; 0
    9872:	30 e0       	ldi	r19, 0x00	; 0
    9874:	e8 96       	adiw	r28, 0x38	; 56
    9876:	ee ac       	sts	0xae, r30
    9878:	ff ac       	sts	0xaf, r31
    987a:	e8 97       	sbiw	r28, 0x38	; 56
    987c:	aa 24       	eor	r10, r10
    987e:	bb 24       	eor	r11, r11
    9880:	65 01       	movw	r12, r10
    9882:	68 94       	set
    9884:	a2 f8       	bld	r10, 2
    9886:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    988a:	8d b7       	in	r24, 0x3d	; 61
    988c:	9e b7       	in	r25, 0x3e	; 62
    988e:	06 96       	adiw	r24, 0x06	; 6
    9890:	8d bf       	out	0x3d, r24	; 61
    9892:	9e bf       	out	0x3e, r25	; 62
                       pf_temp6,
                       4,
                       4,
                       pf_temp7);

         pf_temp8 = &gt_insDev.gaf_scratchBuf[16+3+9+9+9+16+16+16]; /*T * A * T' - 4 x 4
    9894:	82 ef       	ldi	r24, 0xF2	; 242
    9896:	95 e2       	ldi	r25, 0x25	; 37
    9898:	8c a3       	lds	r24, 0x5c
    989a:	9d a3       	lds	r25, 0x5d
                                                                      matrix*/
         utl_matMultF( pf_temp5,
    989c:	00 d0       	rcall	.+0      	; 0x989e <ellipsoidFit+0xe9c>
    989e:	00 d0       	rcall	.+0      	; 0x98a0 <ellipsoidFit+0xe9e>
    98a0:	2d b7       	in	r18, 0x3d	; 61
    98a2:	3e b7       	in	r19, 0x3e	; 62
    98a4:	2f 5f       	subi	r18, 0xFF	; 255
    98a6:	3f 4f       	sbci	r19, 0xFF	; 255
    98a8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    98aa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    98ac:	ea a1       	lds	r30, 0x4a
    98ae:	fb a1       	lds	r31, 0x4b
    98b0:	e8 96       	adiw	r28, 0x38	; 56
    98b2:	ee af       	sts	0x7e, r30
    98b4:	ff af       	sts	0x7f, r31
    98b6:	e8 97       	sbiw	r28, 0x38	; 56
    98b8:	84 e0       	ldi	r24, 0x04	; 4
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	a0 e0       	ldi	r26, 0x00	; 0
    98be:	b0 e0       	ldi	r27, 0x00	; 0
    98c0:	f9 01       	movw	r30, r18
    98c2:	80 83       	st	Z, r24
    98c4:	91 83       	std	Z+1, r25	; 0x01
    98c6:	a2 83       	std	Z+2, r26	; 0x02
    98c8:	b3 83       	std	Z+3, r27	; 0x03
    98ca:	8c a1       	lds	r24, 0x4c
    98cc:	9d a1       	lds	r25, 0x4d
    98ce:	f9 01       	movw	r30, r18
    98d0:	84 83       	std	Z+4, r24	; 0x04
    98d2:	95 83       	std	Z+5, r25	; 0x05
    98d4:	ca 01       	movw	r24, r20
    98d6:	44 e0       	ldi	r20, 0x04	; 4
    98d8:	50 e0       	ldi	r21, 0x00	; 0
    98da:	60 e0       	ldi	r22, 0x00	; 0
    98dc:	70 e0       	ldi	r23, 0x00	; 0
    98de:	04 e0       	ldi	r16, 0x04	; 4
    98e0:	10 e0       	ldi	r17, 0x00	; 0
    98e2:	20 e0       	ldi	r18, 0x00	; 0
    98e4:	30 e0       	ldi	r19, 0x00	; 0
    98e6:	e8 96       	adiw	r28, 0x38	; 56
    98e8:	ee ac       	sts	0xae, r30
    98ea:	ff ac       	sts	0xaf, r31
    98ec:	e8 97       	sbiw	r28, 0x38	; 56
    98ee:	aa 24       	eor	r10, r10
    98f0:	bb 24       	eor	r11, r11
    98f2:	65 01       	movw	r12, r10
    98f4:	68 94       	set
    98f6:	a2 f8       	bld	r10, 2
    98f8:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
    98fc:	8d b7       	in	r24, 0x3d	; 61
    98fe:	9e b7       	in	r25, 0x3e	; 62
    9900:	06 96       	adiw	r24, 0x06	; 6
    9902:	8d bf       	out	0x3d, r24	; 61
    9904:	9e bf       	out	0x3e, r25	; 62
                       pf_temp8);

         /*------------------------------------------------------------------*
          * R( 1:3, 1:3 ) / -R( 4, 4 ) - 3 x 3 matrix
          *------------------------------------------------------------------*/
         for( i_r = 0; i_r < 3; i_r++)
    9906:	19 82       	std	Y+1, r1	; 0x01
    9908:	1a 82       	std	Y+2, r1	; 0x02
    990a:	1b 82       	std	Y+3, r1	; 0x03
    990c:	1c 82       	std	Y+4, r1	; 0x04
    990e:	66 c0       	rjmp	.+204    	; 0x99dc <ellipsoidFit+0xfda>
         {
            for( i_c = 0; i_c < 3; i_c++)
    9910:	1d 82       	std	Y+5, r1	; 0x05
    9912:	1e 82       	std	Y+6, r1	; 0x06
    9914:	1f 82       	std	Y+7, r1	; 0x07
    9916:	18 86       	std	Y+8, r1	; 0x08
    9918:	4c c0       	rjmp	.+152    	; 0x99b2 <ellipsoidFit+0xfb0>
            {
               (*(pf_temp2 + i_r*3 + i_c)) = (*(pf_temp8 + i_r*4 + i_c)) /
    991a:	29 81       	ldd	r18, Y+1	; 0x01
    991c:	3a 81       	ldd	r19, Y+2	; 0x02
    991e:	c9 01       	movw	r24, r18
    9920:	88 0f       	add	r24, r24
    9922:	99 1f       	adc	r25, r25
    9924:	28 0f       	add	r18, r24
    9926:	39 1f       	adc	r19, r25
    9928:	8d 81       	ldd	r24, Y+5	; 0x05
    992a:	9e 81       	ldd	r25, Y+6	; 0x06
    992c:	82 0f       	add	r24, r18
    992e:	93 1f       	adc	r25, r19
    9930:	88 0f       	add	r24, r24
    9932:	99 1f       	adc	r25, r25
    9934:	88 0f       	add	r24, r24
    9936:	99 1f       	adc	r25, r25
    9938:	28 8d       	ldd	r18, Y+24	; 0x18
    993a:	39 8d       	ldd	r19, Y+25	; 0x19
    993c:	89 01       	movw	r16, r18
    993e:	08 0f       	add	r16, r24
    9940:	19 1f       	adc	r17, r25
    9942:	89 81       	ldd	r24, Y+1	; 0x01
    9944:	9a 81       	ldd	r25, Y+2	; 0x02
    9946:	9c 01       	movw	r18, r24
    9948:	22 0f       	add	r18, r18
    994a:	33 1f       	adc	r19, r19
    994c:	22 0f       	add	r18, r18
    994e:	33 1f       	adc	r19, r19
    9950:	8d 81       	ldd	r24, Y+5	; 0x05
    9952:	9e 81       	ldd	r25, Y+6	; 0x06
    9954:	82 0f       	add	r24, r18
    9956:	93 1f       	adc	r25, r19
    9958:	88 0f       	add	r24, r24
    995a:	99 1f       	adc	r25, r25
    995c:	88 0f       	add	r24, r24
    995e:	99 1f       	adc	r25, r25
    9960:	2c a1       	lds	r18, 0x4c
    9962:	3d a1       	lds	r19, 0x4d
    9964:	82 0f       	add	r24, r18
    9966:	93 1f       	adc	r25, r19
    9968:	fc 01       	movw	r30, r24
    996a:	80 81       	ld	r24, Z
    996c:	91 81       	ldd	r25, Z+1	; 0x01
    996e:	a2 81       	ldd	r26, Z+2	; 0x02
    9970:	b3 81       	ldd	r27, Z+3	; 0x03
               (-*(pf_temp8 + 3*4 + 3));
    9972:	2c a1       	lds	r18, 0x4c
    9974:	3d a1       	lds	r19, 0x4d
    9976:	24 5c       	subi	r18, 0xC4	; 196
    9978:	3f 4f       	sbci	r19, 0xFF	; 255
    997a:	f9 01       	movw	r30, r18
    997c:	20 81       	ld	r18, Z
    997e:	31 81       	ldd	r19, Z+1	; 0x01
    9980:	42 81       	ldd	r20, Z+2	; 0x02
    9982:	53 81       	ldd	r21, Z+3	; 0x03
    9984:	50 58       	subi	r21, 0x80	; 128
          *------------------------------------------------------------------*/
         for( i_r = 0; i_r < 3; i_r++)
         {
            for( i_c = 0; i_c < 3; i_c++)
            {
               (*(pf_temp2 + i_r*3 + i_c)) = (*(pf_temp8 + i_r*4 + i_c)) /
    9986:	bc 01       	movw	r22, r24
    9988:	cd 01       	movw	r24, r26
    998a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    998e:	dc 01       	movw	r26, r24
    9990:	cb 01       	movw	r24, r22
    9992:	f8 01       	movw	r30, r16
    9994:	80 83       	st	Z, r24
    9996:	91 83       	std	Z+1, r25	; 0x01
    9998:	a2 83       	std	Z+2, r26	; 0x02
    999a:	b3 83       	std	Z+3, r27	; 0x03
         /*------------------------------------------------------------------*
          * R( 1:3, 1:3 ) / -R( 4, 4 ) - 3 x 3 matrix
          *------------------------------------------------------------------*/
         for( i_r = 0; i_r < 3; i_r++)
         {
            for( i_c = 0; i_c < 3; i_c++)
    999c:	8d 81       	ldd	r24, Y+5	; 0x05
    999e:	9e 81       	ldd	r25, Y+6	; 0x06
    99a0:	af 81       	ldd	r26, Y+7	; 0x07
    99a2:	b8 85       	ldd	r27, Y+8	; 0x08
    99a4:	01 96       	adiw	r24, 0x01	; 1
    99a6:	a1 1d       	adc	r26, r1
    99a8:	b1 1d       	adc	r27, r1
    99aa:	8d 83       	std	Y+5, r24	; 0x05
    99ac:	9e 83       	std	Y+6, r25	; 0x06
    99ae:	af 83       	std	Y+7, r26	; 0x07
    99b0:	b8 87       	std	Y+8, r27	; 0x08
    99b2:	8d 81       	ldd	r24, Y+5	; 0x05
    99b4:	9e 81       	ldd	r25, Y+6	; 0x06
    99b6:	af 81       	ldd	r26, Y+7	; 0x07
    99b8:	b8 85       	ldd	r27, Y+8	; 0x08
    99ba:	83 30       	cpi	r24, 0x03	; 3
    99bc:	91 05       	cpc	r25, r1
    99be:	a1 05       	cpc	r26, r1
    99c0:	b1 05       	cpc	r27, r1
    99c2:	0c f4       	brge	.+2      	; 0x99c6 <ellipsoidFit+0xfc4>
    99c4:	aa cf       	rjmp	.-172    	; 0x991a <ellipsoidFit+0xf18>
                       pf_temp8);

         /*------------------------------------------------------------------*
          * R( 1:3, 1:3 ) / -R( 4, 4 ) - 3 x 3 matrix
          *------------------------------------------------------------------*/
         for( i_r = 0; i_r < 3; i_r++)
    99c6:	89 81       	ldd	r24, Y+1	; 0x01
    99c8:	9a 81       	ldd	r25, Y+2	; 0x02
    99ca:	ab 81       	ldd	r26, Y+3	; 0x03
    99cc:	bc 81       	ldd	r27, Y+4	; 0x04
    99ce:	01 96       	adiw	r24, 0x01	; 1
    99d0:	a1 1d       	adc	r26, r1
    99d2:	b1 1d       	adc	r27, r1
    99d4:	89 83       	std	Y+1, r24	; 0x01
    99d6:	9a 83       	std	Y+2, r25	; 0x02
    99d8:	ab 83       	std	Y+3, r26	; 0x03
    99da:	bc 83       	std	Y+4, r27	; 0x04
    99dc:	89 81       	ldd	r24, Y+1	; 0x01
    99de:	9a 81       	ldd	r25, Y+2	; 0x02
    99e0:	ab 81       	ldd	r26, Y+3	; 0x03
    99e2:	bc 81       	ldd	r27, Y+4	; 0x04
    99e4:	83 30       	cpi	r24, 0x03	; 3
    99e6:	91 05       	cpc	r25, r1
    99e8:	a1 05       	cpc	r26, r1
    99ea:	b1 05       	cpc	r27, r1
    99ec:	0c f4       	brge	.+2      	; 0x99f0 <ellipsoidFit+0xfee>
    99ee:	90 cf       	rjmp	.-224    	; 0x9910 <ellipsoidFit+0xf0e>
          * Find the eigenvalues and eigenvectors which represent the
          * magnitude and directions of the principle axis' of the ellipse
          * given by [ evecs evals ] = eig( R( 1:3, 1:3 ) / -R( 4, 4 ) )...
          * line 128 in the matlab function ellipsoid_fit.
          *------------------------------------------------------------------*/
         pf_temp3 = &gt_insDev.gaf_scratchBuf[16+3+9];/* evals - 1 x 3 matrix*/
    99f0:	8a ee       	ldi	r24, 0xEA	; 234
    99f2:	94 e2       	ldi	r25, 0x24	; 36
    99f4:	8a 8f       	std	Y+26, r24	; 0x1a
    99f6:	9b 8f       	std	Y+27, r25	; 0x1b
         b_passed = utl_matEigsF( pf_temp2,
    99f8:	88 8d       	ldd	r24, Y+24	; 0x18
    99fa:	99 8d       	ldd	r25, Y+25	; 0x19
                                  3,
                                  &af_scale[0],
    99fc:	9e 01       	movw	r18, r28
    99fe:	22 5c       	subi	r18, 0xC2	; 194
    9a00:	3f 4f       	sbci	r19, 0xFF	; 255
                                  &af_R[0][0]);
    9a02:	fe 01       	movw	r30, r28
    9a04:	e6 5b       	subi	r30, 0xB6	; 182
    9a06:	ff 4f       	sbci	r31, 0xFF	; 255
          * magnitude and directions of the principle axis' of the ellipse
          * given by [ evecs evals ] = eig( R( 1:3, 1:3 ) / -R( 4, 4 ) )...
          * line 128 in the matlab function ellipsoid_fit.
          *------------------------------------------------------------------*/
         pf_temp3 = &gt_insDev.gaf_scratchBuf[16+3+9];/* evals - 1 x 3 matrix*/
         b_passed = utl_matEigsF( pf_temp2,
    9a08:	43 e0       	ldi	r20, 0x03	; 3
    9a0a:	50 e0       	ldi	r21, 0x00	; 0
    9a0c:	60 e0       	ldi	r22, 0x00	; 0
    9a0e:	70 e0       	ldi	r23, 0x00	; 0
    9a10:	8f 01       	movw	r16, r30
    9a12:	0e 94 73 ea 	call	0x1d4e6	; 0x1d4e6 <utl_matEigsF>
    9a16:	89 87       	std	Y+9, r24	; 0x09
          * best fit ellipsoid radius is given by radii = sqrt( 1 ./ diag(
          * evals ) ) and the resulting calibration factor is a diagonal matrix
          * with values gf_calibratedEnvelope/ radii...line 129 of the matlab
          * function ellipsoid_fit.
          *------------------------------------------------------------------*/
         f_temp1 = 1.0 / af_scale[0];
    9a18:	ce 01       	movw	r24, r28
    9a1a:	ce 96       	adiw	r24, 0x3e	; 62
    9a1c:	fc 01       	movw	r30, r24
    9a1e:	20 81       	ld	r18, Z
    9a20:	31 81       	ldd	r19, Z+1	; 0x01
    9a22:	42 81       	ldd	r20, Z+2	; 0x02
    9a24:	53 81       	ldd	r21, Z+3	; 0x03
    9a26:	60 e0       	ldi	r22, 0x00	; 0
    9a28:	70 e0       	ldi	r23, 0x00	; 0
    9a2a:	80 e8       	ldi	r24, 0x80	; 128
    9a2c:	9f e3       	ldi	r25, 0x3F	; 63
    9a2e:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9a32:	dc 01       	movw	r26, r24
    9a34:	cb 01       	movw	r24, r22
    9a36:	8e a3       	lds	r24, 0x5e
    9a38:	9f a3       	lds	r25, 0x5f
    9a3a:	a8 a7       	lds	r26, 0x78
    9a3c:	b9 a7       	lds	r27, 0x79
         f_temp2 = 1.0 / af_scale[1];
    9a3e:	ce 01       	movw	r24, r28
    9a40:	8e 5b       	subi	r24, 0xBE	; 190
    9a42:	9f 4f       	sbci	r25, 0xFF	; 255
    9a44:	fc 01       	movw	r30, r24
    9a46:	20 81       	ld	r18, Z
    9a48:	31 81       	ldd	r19, Z+1	; 0x01
    9a4a:	42 81       	ldd	r20, Z+2	; 0x02
    9a4c:	53 81       	ldd	r21, Z+3	; 0x03
    9a4e:	60 e0       	ldi	r22, 0x00	; 0
    9a50:	70 e0       	ldi	r23, 0x00	; 0
    9a52:	80 e8       	ldi	r24, 0x80	; 128
    9a54:	9f e3       	ldi	r25, 0x3F	; 63
    9a56:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9a5a:	dc 01       	movw	r26, r24
    9a5c:	cb 01       	movw	r24, r22
    9a5e:	8a a7       	lds	r24, 0x7a
    9a60:	9b a7       	lds	r25, 0x7b
    9a62:	ac a7       	lds	r26, 0x7c
    9a64:	bd a7       	lds	r27, 0x7d
         f_temp3 = 1.0 / af_scale[2];
    9a66:	ce 01       	movw	r24, r28
    9a68:	8a 5b       	subi	r24, 0xBA	; 186
    9a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a6c:	fc 01       	movw	r30, r24
    9a6e:	20 81       	ld	r18, Z
    9a70:	31 81       	ldd	r19, Z+1	; 0x01
    9a72:	42 81       	ldd	r20, Z+2	; 0x02
    9a74:	53 81       	ldd	r21, Z+3	; 0x03
    9a76:	60 e0       	ldi	r22, 0x00	; 0
    9a78:	70 e0       	ldi	r23, 0x00	; 0
    9a7a:	80 e8       	ldi	r24, 0x80	; 128
    9a7c:	9f e3       	ldi	r25, 0x3F	; 63
    9a7e:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9a82:	dc 01       	movw	r26, r24
    9a84:	cb 01       	movw	r24, r22
    9a86:	8e a7       	lds	r24, 0x7e
    9a88:	9f a7       	lds	r25, 0x7f
    9a8a:	a8 ab       	sts	0x58, r26
    9a8c:	b9 ab       	sts	0x59, r27

         /*------------------------------------------------------------------*
          * If values out of range then exit.
          *------------------------------------------------------------------*/
         if( (f_temp1 <= 0) ||
    9a8e:	11 e0       	ldi	r17, 0x01	; 1
    9a90:	6e a1       	lds	r22, 0x4e
    9a92:	7f a1       	lds	r23, 0x4f
    9a94:	88 a5       	lds	r24, 0x68
    9a96:	99 a5       	lds	r25, 0x69
    9a98:	20 e0       	ldi	r18, 0x00	; 0
    9a9a:	30 e0       	ldi	r19, 0x00	; 0
    9a9c:	a9 01       	movw	r20, r18
    9a9e:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    9aa2:	18 16       	cp	r1, r24
    9aa4:	0c f4       	brge	.+2      	; 0x9aa8 <ellipsoidFit+0x10a6>
    9aa6:	10 e0       	ldi	r17, 0x00	; 0
    9aa8:	11 23       	and	r17, r17
    9aaa:	f1 f4       	brne	.+60     	; 0x9ae8 <ellipsoidFit+0x10e6>
             (f_temp2 <= 0) ||
    9aac:	11 e0       	ldi	r17, 0x01	; 1
    9aae:	6a a5       	lds	r22, 0x6a
    9ab0:	7b a5       	lds	r23, 0x6b
    9ab2:	8c a5       	lds	r24, 0x6c
    9ab4:	9d a5       	lds	r25, 0x6d
    9ab6:	20 e0       	ldi	r18, 0x00	; 0
    9ab8:	30 e0       	ldi	r19, 0x00	; 0
    9aba:	a9 01       	movw	r20, r18
    9abc:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    9ac0:	18 16       	cp	r1, r24
    9ac2:	0c f4       	brge	.+2      	; 0x9ac6 <ellipsoidFit+0x10c4>
    9ac4:	10 e0       	ldi	r17, 0x00	; 0
         f_temp3 = 1.0 / af_scale[2];

         /*------------------------------------------------------------------*
          * If values out of range then exit.
          *------------------------------------------------------------------*/
         if( (f_temp1 <= 0) ||
    9ac6:	11 23       	and	r17, r17
    9ac8:	79 f4       	brne	.+30     	; 0x9ae8 <ellipsoidFit+0x10e6>
             (f_temp2 <= 0) ||
             (f_temp3 <= 0))
    9aca:	11 e0       	ldi	r17, 0x01	; 1
    9acc:	6e a5       	lds	r22, 0x6e
    9ace:	7f a5       	lds	r23, 0x6f
    9ad0:	88 a9       	sts	0x48, r24
    9ad2:	99 a9       	sts	0x49, r25
    9ad4:	20 e0       	ldi	r18, 0x00	; 0
    9ad6:	30 e0       	ldi	r19, 0x00	; 0
    9ad8:	a9 01       	movw	r20, r18
    9ada:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
    9ade:	18 16       	cp	r1, r24
    9ae0:	0c f4       	brge	.+2      	; 0x9ae4 <ellipsoidFit+0x10e2>
    9ae2:	10 e0       	ldi	r17, 0x00	; 0

         /*------------------------------------------------------------------*
          * If values out of range then exit.
          *------------------------------------------------------------------*/
         if( (f_temp1 <= 0) ||
             (f_temp2 <= 0) ||
    9ae4:	11 23       	and	r17, r17
    9ae6:	11 f0       	breq	.+4      	; 0x9aec <ellipsoidFit+0x10ea>
             (f_temp3 <= 0))
         {
            b_passed = false;
    9ae8:	19 86       	std	Y+9, r1	; 0x09
    9aea:	63 c2       	rjmp	.+1222   	; 0x9fb2 <ellipsoidFit+0x15b0>
         }
         else
         {

            af_scale[0] = ((float)s_envelope) / sqrtf( f_temp1);
    9aec:	ce 01       	movw	r24, r28
    9aee:	8c 58       	subi	r24, 0x8C	; 140
    9af0:	9f 4f       	sbci	r25, 0xFF	; 255
    9af2:	fc 01       	movw	r30, r24
    9af4:	80 81       	ld	r24, Z
    9af6:	91 81       	ldd	r25, Z+1	; 0x01
    9af8:	aa 27       	eor	r26, r26
    9afa:	97 fd       	sbrc	r25, 7
    9afc:	a0 95       	com	r26
    9afe:	ba 2f       	mov	r27, r26
    9b00:	bc 01       	movw	r22, r24
    9b02:	cd 01       	movw	r24, r26
    9b04:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    9b08:	7b 01       	movw	r14, r22
    9b0a:	8c 01       	movw	r16, r24
    9b0c:	8e a1       	lds	r24, 0x4e
    9b0e:	9f a1       	lds	r25, 0x4f
    9b10:	a8 a5       	lds	r26, 0x68
    9b12:	b9 a5       	lds	r27, 0x69
    9b14:	bc 01       	movw	r22, r24
    9b16:	cd 01       	movw	r24, r26
    9b18:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
    9b1c:	9b 01       	movw	r18, r22
    9b1e:	ac 01       	movw	r20, r24
    9b20:	c8 01       	movw	r24, r16
    9b22:	b7 01       	movw	r22, r14
    9b24:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9b28:	dc 01       	movw	r26, r24
    9b2a:	cb 01       	movw	r24, r22
    9b2c:	9e 01       	movw	r18, r28
    9b2e:	22 5c       	subi	r18, 0xC2	; 194
    9b30:	3f 4f       	sbci	r19, 0xFF	; 255
    9b32:	f9 01       	movw	r30, r18
    9b34:	80 83       	st	Z, r24
    9b36:	91 83       	std	Z+1, r25	; 0x01
    9b38:	a2 83       	std	Z+2, r26	; 0x02
    9b3a:	b3 83       	std	Z+3, r27	; 0x03
            af_scale[1] = ((float)s_envelope) / sqrtf( f_temp2);
    9b3c:	ce 01       	movw	r24, r28
    9b3e:	8c 58       	subi	r24, 0x8C	; 140
    9b40:	9f 4f       	sbci	r25, 0xFF	; 255
    9b42:	fc 01       	movw	r30, r24
    9b44:	80 81       	ld	r24, Z
    9b46:	91 81       	ldd	r25, Z+1	; 0x01
    9b48:	aa 27       	eor	r26, r26
    9b4a:	97 fd       	sbrc	r25, 7
    9b4c:	a0 95       	com	r26
    9b4e:	ba 2f       	mov	r27, r26
    9b50:	bc 01       	movw	r22, r24
    9b52:	cd 01       	movw	r24, r26
    9b54:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    9b58:	7b 01       	movw	r14, r22
    9b5a:	8c 01       	movw	r16, r24
    9b5c:	8a a5       	lds	r24, 0x6a
    9b5e:	9b a5       	lds	r25, 0x6b
    9b60:	ac a5       	lds	r26, 0x6c
    9b62:	bd a5       	lds	r27, 0x6d
    9b64:	bc 01       	movw	r22, r24
    9b66:	cd 01       	movw	r24, r26
    9b68:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
    9b6c:	9b 01       	movw	r18, r22
    9b6e:	ac 01       	movw	r20, r24
    9b70:	c8 01       	movw	r24, r16
    9b72:	b7 01       	movw	r22, r14
    9b74:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9b78:	dc 01       	movw	r26, r24
    9b7a:	cb 01       	movw	r24, r22
    9b7c:	9e 01       	movw	r18, r28
    9b7e:	2e 5b       	subi	r18, 0xBE	; 190
    9b80:	3f 4f       	sbci	r19, 0xFF	; 255
    9b82:	f9 01       	movw	r30, r18
    9b84:	80 83       	st	Z, r24
    9b86:	91 83       	std	Z+1, r25	; 0x01
    9b88:	a2 83       	std	Z+2, r26	; 0x02
    9b8a:	b3 83       	std	Z+3, r27	; 0x03
            af_scale[2] = ((float)s_envelope) / sqrtf( f_temp3);
    9b8c:	ce 01       	movw	r24, r28
    9b8e:	8c 58       	subi	r24, 0x8C	; 140
    9b90:	9f 4f       	sbci	r25, 0xFF	; 255
    9b92:	fc 01       	movw	r30, r24
    9b94:	80 81       	ld	r24, Z
    9b96:	91 81       	ldd	r25, Z+1	; 0x01
    9b98:	aa 27       	eor	r26, r26
    9b9a:	97 fd       	sbrc	r25, 7
    9b9c:	a0 95       	com	r26
    9b9e:	ba 2f       	mov	r27, r26
    9ba0:	bc 01       	movw	r22, r24
    9ba2:	cd 01       	movw	r24, r26
    9ba4:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
    9ba8:	7b 01       	movw	r14, r22
    9baa:	8c 01       	movw	r16, r24
    9bac:	8e a5       	lds	r24, 0x6e
    9bae:	9f a5       	lds	r25, 0x6f
    9bb0:	a8 a9       	sts	0x48, r26
    9bb2:	b9 a9       	sts	0x49, r27
    9bb4:	bc 01       	movw	r22, r24
    9bb6:	cd 01       	movw	r24, r26
    9bb8:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
    9bbc:	9b 01       	movw	r18, r22
    9bbe:	ac 01       	movw	r20, r24
    9bc0:	c8 01       	movw	r24, r16
    9bc2:	b7 01       	movw	r22, r14
    9bc4:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
    9bc8:	dc 01       	movw	r26, r24
    9bca:	cb 01       	movw	r24, r22
    9bcc:	9e 01       	movw	r18, r28
    9bce:	2a 5b       	subi	r18, 0xBA	; 186
    9bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    9bd2:	f9 01       	movw	r30, r18
    9bd4:	80 83       	st	Z, r24
    9bd6:	91 83       	std	Z+1, r25	; 0x01
    9bd8:	a2 83       	std	Z+2, r26	; 0x02
    9bda:	b3 83       	std	Z+3, r27	; 0x03
            /*---------------------------------------------------------------*
             * Convert the floating point ellipsoid fit parameters into s:m:f
             * fixed-point format where s = 1 is the sign bit, m = 16 is the
             * integer bits, and f = 15 are the fractional bits.
             *---------------------------------------------------------------*/
            ps_bias[0] = (int16_t)af_bias[0];
    9bdc:	8a a9       	sts	0x4a, r24
    9bde:	9b a9       	sts	0x4b, r25
    9be0:	ac a9       	sts	0x4c, r26
    9be2:	bd a9       	sts	0x4d, r27
    9be4:	bc 01       	movw	r22, r24
    9be6:	cd 01       	movw	r24, r26
    9be8:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9bec:	dc 01       	movw	r26, r24
    9bee:	cb 01       	movw	r24, r22
    9bf0:	9c 01       	movw	r18, r24
    9bf2:	ce 01       	movw	r24, r28
    9bf4:	80 59       	subi	r24, 0x90	; 144
    9bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf8:	fc 01       	movw	r30, r24
    9bfa:	80 81       	ld	r24, Z
    9bfc:	91 81       	ldd	r25, Z+1	; 0x01
    9bfe:	fc 01       	movw	r30, r24
    9c00:	20 83       	st	Z, r18
    9c02:	31 83       	std	Z+1, r19	; 0x01
            ps_bias[1] = (int16_t)af_bias[1];
    9c04:	ce 01       	movw	r24, r28
    9c06:	80 59       	subi	r24, 0x90	; 144
    9c08:	9f 4f       	sbci	r25, 0xFF	; 255
    9c0a:	fc 01       	movw	r30, r24
    9c0c:	80 81       	ld	r24, Z
    9c0e:	91 81       	ldd	r25, Z+1	; 0x01
    9c10:	8c 01       	movw	r16, r24
    9c12:	0e 5f       	subi	r16, 0xFE	; 254
    9c14:	1f 4f       	sbci	r17, 0xFF	; 255
    9c16:	8e a9       	sts	0x4e, r24
    9c18:	9f a9       	sts	0x4f, r25
    9c1a:	a8 ad       	sts	0x68, r26
    9c1c:	b9 ad       	sts	0x69, r27
    9c1e:	bc 01       	movw	r22, r24
    9c20:	cd 01       	movw	r24, r26
    9c22:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9c26:	dc 01       	movw	r26, r24
    9c28:	cb 01       	movw	r24, r22
    9c2a:	f8 01       	movw	r30, r16
    9c2c:	80 83       	st	Z, r24
    9c2e:	91 83       	std	Z+1, r25	; 0x01
            ps_bias[2] = (int16_t)af_bias[2];
    9c30:	ce 01       	movw	r24, r28
    9c32:	80 59       	subi	r24, 0x90	; 144
    9c34:	9f 4f       	sbci	r25, 0xFF	; 255
    9c36:	fc 01       	movw	r30, r24
    9c38:	80 81       	ld	r24, Z
    9c3a:	91 81       	ldd	r25, Z+1	; 0x01
    9c3c:	8c 01       	movw	r16, r24
    9c3e:	0c 5f       	subi	r16, 0xFC	; 252
    9c40:	1f 4f       	sbci	r17, 0xFF	; 255
    9c42:	8a ad       	sts	0x6a, r24
    9c44:	9b ad       	sts	0x6b, r25
    9c46:	ac ad       	sts	0x6c, r26
    9c48:	bd ad       	sts	0x6d, r27
    9c4a:	bc 01       	movw	r22, r24
    9c4c:	cd 01       	movw	r24, r26
    9c4e:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9c52:	dc 01       	movw	r26, r24
    9c54:	cb 01       	movw	r24, r22
    9c56:	f8 01       	movw	r30, r16
    9c58:	80 83       	st	Z, r24
    9c5a:	91 83       	std	Z+1, r25	; 0x01

            ps_R[0] = (int16_t)(af_R[0][0]*32767.0);
    9c5c:	ce 01       	movw	r24, r28
    9c5e:	86 5b       	subi	r24, 0xB6	; 182
    9c60:	9f 4f       	sbci	r25, 0xFF	; 255
    9c62:	fc 01       	movw	r30, r24
    9c64:	80 81       	ld	r24, Z
    9c66:	91 81       	ldd	r25, Z+1	; 0x01
    9c68:	a2 81       	ldd	r26, Z+2	; 0x02
    9c6a:	b3 81       	ldd	r27, Z+3	; 0x03
    9c6c:	bc 01       	movw	r22, r24
    9c6e:	cd 01       	movw	r24, r26
    9c70:	20 e0       	ldi	r18, 0x00	; 0
    9c72:	3e ef       	ldi	r19, 0xFE	; 254
    9c74:	4f ef       	ldi	r20, 0xFF	; 255
    9c76:	56 e4       	ldi	r21, 0x46	; 70
    9c78:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9c7c:	dc 01       	movw	r26, r24
    9c7e:	cb 01       	movw	r24, r22
    9c80:	bc 01       	movw	r22, r24
    9c82:	cd 01       	movw	r24, r26
    9c84:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9c88:	dc 01       	movw	r26, r24
    9c8a:	cb 01       	movw	r24, r22
    9c8c:	9c 01       	movw	r18, r24
    9c8e:	ce 01       	movw	r24, r28
    9c90:	82 59       	subi	r24, 0x92	; 146
    9c92:	9f 4f       	sbci	r25, 0xFF	; 255
    9c94:	fc 01       	movw	r30, r24
    9c96:	80 81       	ld	r24, Z
    9c98:	91 81       	ldd	r25, Z+1	; 0x01
    9c9a:	fc 01       	movw	r30, r24
    9c9c:	20 83       	st	Z, r18
    9c9e:	31 83       	std	Z+1, r19	; 0x01
            ps_R[1] = (int16_t)(af_R[0][1]*32767.0);
    9ca0:	ce 01       	movw	r24, r28
    9ca2:	82 59       	subi	r24, 0x92	; 146
    9ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ca6:	fc 01       	movw	r30, r24
    9ca8:	80 81       	ld	r24, Z
    9caa:	91 81       	ldd	r25, Z+1	; 0x01
    9cac:	8c 01       	movw	r16, r24
    9cae:	0e 5f       	subi	r16, 0xFE	; 254
    9cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    9cb2:	ce 01       	movw	r24, r28
    9cb4:	86 5b       	subi	r24, 0xB6	; 182
    9cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9cb8:	fc 01       	movw	r30, r24
    9cba:	84 81       	ldd	r24, Z+4	; 0x04
    9cbc:	95 81       	ldd	r25, Z+5	; 0x05
    9cbe:	a6 81       	ldd	r26, Z+6	; 0x06
    9cc0:	b7 81       	ldd	r27, Z+7	; 0x07
    9cc2:	bc 01       	movw	r22, r24
    9cc4:	cd 01       	movw	r24, r26
    9cc6:	20 e0       	ldi	r18, 0x00	; 0
    9cc8:	3e ef       	ldi	r19, 0xFE	; 254
    9cca:	4f ef       	ldi	r20, 0xFF	; 255
    9ccc:	56 e4       	ldi	r21, 0x46	; 70
    9cce:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9cd2:	dc 01       	movw	r26, r24
    9cd4:	cb 01       	movw	r24, r22
    9cd6:	bc 01       	movw	r22, r24
    9cd8:	cd 01       	movw	r24, r26
    9cda:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9cde:	dc 01       	movw	r26, r24
    9ce0:	cb 01       	movw	r24, r22
    9ce2:	f8 01       	movw	r30, r16
    9ce4:	80 83       	st	Z, r24
    9ce6:	91 83       	std	Z+1, r25	; 0x01
            ps_R[2] = (int16_t)(af_R[0][2]*32767.0);
    9ce8:	ce 01       	movw	r24, r28
    9cea:	82 59       	subi	r24, 0x92	; 146
    9cec:	9f 4f       	sbci	r25, 0xFF	; 255
    9cee:	fc 01       	movw	r30, r24
    9cf0:	80 81       	ld	r24, Z
    9cf2:	91 81       	ldd	r25, Z+1	; 0x01
    9cf4:	8c 01       	movw	r16, r24
    9cf6:	0c 5f       	subi	r16, 0xFC	; 252
    9cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    9cfa:	ce 01       	movw	r24, r28
    9cfc:	86 5b       	subi	r24, 0xB6	; 182
    9cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    9d00:	fc 01       	movw	r30, r24
    9d02:	80 85       	ldd	r24, Z+8	; 0x08
    9d04:	91 85       	ldd	r25, Z+9	; 0x09
    9d06:	a2 85       	ldd	r26, Z+10	; 0x0a
    9d08:	b3 85       	ldd	r27, Z+11	; 0x0b
    9d0a:	bc 01       	movw	r22, r24
    9d0c:	cd 01       	movw	r24, r26
    9d0e:	20 e0       	ldi	r18, 0x00	; 0
    9d10:	3e ef       	ldi	r19, 0xFE	; 254
    9d12:	4f ef       	ldi	r20, 0xFF	; 255
    9d14:	56 e4       	ldi	r21, 0x46	; 70
    9d16:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9d1a:	dc 01       	movw	r26, r24
    9d1c:	cb 01       	movw	r24, r22
    9d1e:	bc 01       	movw	r22, r24
    9d20:	cd 01       	movw	r24, r26
    9d22:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9d26:	dc 01       	movw	r26, r24
    9d28:	cb 01       	movw	r24, r22
    9d2a:	f8 01       	movw	r30, r16
    9d2c:	80 83       	st	Z, r24
    9d2e:	91 83       	std	Z+1, r25	; 0x01
            ps_R[3] = (int16_t)(af_R[1][0]*32767.0);
    9d30:	ce 01       	movw	r24, r28
    9d32:	82 59       	subi	r24, 0x92	; 146
    9d34:	9f 4f       	sbci	r25, 0xFF	; 255
    9d36:	fc 01       	movw	r30, r24
    9d38:	80 81       	ld	r24, Z
    9d3a:	91 81       	ldd	r25, Z+1	; 0x01
    9d3c:	8c 01       	movw	r16, r24
    9d3e:	0a 5f       	subi	r16, 0xFA	; 250
    9d40:	1f 4f       	sbci	r17, 0xFF	; 255
    9d42:	ce 01       	movw	r24, r28
    9d44:	86 5b       	subi	r24, 0xB6	; 182
    9d46:	9f 4f       	sbci	r25, 0xFF	; 255
    9d48:	fc 01       	movw	r30, r24
    9d4a:	84 85       	ldd	r24, Z+12	; 0x0c
    9d4c:	95 85       	ldd	r25, Z+13	; 0x0d
    9d4e:	a6 85       	ldd	r26, Z+14	; 0x0e
    9d50:	b7 85       	ldd	r27, Z+15	; 0x0f
    9d52:	bc 01       	movw	r22, r24
    9d54:	cd 01       	movw	r24, r26
    9d56:	20 e0       	ldi	r18, 0x00	; 0
    9d58:	3e ef       	ldi	r19, 0xFE	; 254
    9d5a:	4f ef       	ldi	r20, 0xFF	; 255
    9d5c:	56 e4       	ldi	r21, 0x46	; 70
    9d5e:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9d62:	dc 01       	movw	r26, r24
    9d64:	cb 01       	movw	r24, r22
    9d66:	bc 01       	movw	r22, r24
    9d68:	cd 01       	movw	r24, r26
    9d6a:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9d6e:	dc 01       	movw	r26, r24
    9d70:	cb 01       	movw	r24, r22
    9d72:	f8 01       	movw	r30, r16
    9d74:	80 83       	st	Z, r24
    9d76:	91 83       	std	Z+1, r25	; 0x01
            ps_R[4] = (int16_t)(af_R[1][1]*32767.0);
    9d78:	ce 01       	movw	r24, r28
    9d7a:	82 59       	subi	r24, 0x92	; 146
    9d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d7e:	fc 01       	movw	r30, r24
    9d80:	80 81       	ld	r24, Z
    9d82:	91 81       	ldd	r25, Z+1	; 0x01
    9d84:	8c 01       	movw	r16, r24
    9d86:	08 5f       	subi	r16, 0xF8	; 248
    9d88:	1f 4f       	sbci	r17, 0xFF	; 255
    9d8a:	ce 01       	movw	r24, r28
    9d8c:	86 5b       	subi	r24, 0xB6	; 182
    9d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d90:	fc 01       	movw	r30, r24
    9d92:	80 89       	ldd	r24, Z+16	; 0x10
    9d94:	91 89       	ldd	r25, Z+17	; 0x11
    9d96:	a2 89       	ldd	r26, Z+18	; 0x12
    9d98:	b3 89       	ldd	r27, Z+19	; 0x13
    9d9a:	bc 01       	movw	r22, r24
    9d9c:	cd 01       	movw	r24, r26
    9d9e:	20 e0       	ldi	r18, 0x00	; 0
    9da0:	3e ef       	ldi	r19, 0xFE	; 254
    9da2:	4f ef       	ldi	r20, 0xFF	; 255
    9da4:	56 e4       	ldi	r21, 0x46	; 70
    9da6:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9daa:	dc 01       	movw	r26, r24
    9dac:	cb 01       	movw	r24, r22
    9dae:	bc 01       	movw	r22, r24
    9db0:	cd 01       	movw	r24, r26
    9db2:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9db6:	dc 01       	movw	r26, r24
    9db8:	cb 01       	movw	r24, r22
    9dba:	f8 01       	movw	r30, r16
    9dbc:	80 83       	st	Z, r24
    9dbe:	91 83       	std	Z+1, r25	; 0x01
            ps_R[5] = (int16_t)(af_R[1][2]*32767.0);
    9dc0:	ce 01       	movw	r24, r28
    9dc2:	82 59       	subi	r24, 0x92	; 146
    9dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    9dc6:	fc 01       	movw	r30, r24
    9dc8:	80 81       	ld	r24, Z
    9dca:	91 81       	ldd	r25, Z+1	; 0x01
    9dcc:	8c 01       	movw	r16, r24
    9dce:	06 5f       	subi	r16, 0xF6	; 246
    9dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    9dd2:	ce 01       	movw	r24, r28
    9dd4:	86 5b       	subi	r24, 0xB6	; 182
    9dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9dd8:	fc 01       	movw	r30, r24
    9dda:	84 89       	ldd	r24, Z+20	; 0x14
    9ddc:	95 89       	ldd	r25, Z+21	; 0x15
    9dde:	a6 89       	ldd	r26, Z+22	; 0x16
    9de0:	b7 89       	ldd	r27, Z+23	; 0x17
    9de2:	bc 01       	movw	r22, r24
    9de4:	cd 01       	movw	r24, r26
    9de6:	20 e0       	ldi	r18, 0x00	; 0
    9de8:	3e ef       	ldi	r19, 0xFE	; 254
    9dea:	4f ef       	ldi	r20, 0xFF	; 255
    9dec:	56 e4       	ldi	r21, 0x46	; 70
    9dee:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9df2:	dc 01       	movw	r26, r24
    9df4:	cb 01       	movw	r24, r22
    9df6:	bc 01       	movw	r22, r24
    9df8:	cd 01       	movw	r24, r26
    9dfa:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9dfe:	dc 01       	movw	r26, r24
    9e00:	cb 01       	movw	r24, r22
    9e02:	f8 01       	movw	r30, r16
    9e04:	80 83       	st	Z, r24
    9e06:	91 83       	std	Z+1, r25	; 0x01
            ps_R[6] = (int16_t)(af_R[2][0]*32767.0);
    9e08:	ce 01       	movw	r24, r28
    9e0a:	82 59       	subi	r24, 0x92	; 146
    9e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    9e0e:	fc 01       	movw	r30, r24
    9e10:	80 81       	ld	r24, Z
    9e12:	91 81       	ldd	r25, Z+1	; 0x01
    9e14:	8c 01       	movw	r16, r24
    9e16:	04 5f       	subi	r16, 0xF4	; 244
    9e18:	1f 4f       	sbci	r17, 0xFF	; 255
    9e1a:	ce 01       	movw	r24, r28
    9e1c:	86 5b       	subi	r24, 0xB6	; 182
    9e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    9e20:	fc 01       	movw	r30, r24
    9e22:	80 8d       	ldd	r24, Z+24	; 0x18
    9e24:	91 8d       	ldd	r25, Z+25	; 0x19
    9e26:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9e28:	b3 8d       	ldd	r27, Z+27	; 0x1b
    9e2a:	bc 01       	movw	r22, r24
    9e2c:	cd 01       	movw	r24, r26
    9e2e:	20 e0       	ldi	r18, 0x00	; 0
    9e30:	3e ef       	ldi	r19, 0xFE	; 254
    9e32:	4f ef       	ldi	r20, 0xFF	; 255
    9e34:	56 e4       	ldi	r21, 0x46	; 70
    9e36:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9e3a:	dc 01       	movw	r26, r24
    9e3c:	cb 01       	movw	r24, r22
    9e3e:	bc 01       	movw	r22, r24
    9e40:	cd 01       	movw	r24, r26
    9e42:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9e46:	dc 01       	movw	r26, r24
    9e48:	cb 01       	movw	r24, r22
    9e4a:	f8 01       	movw	r30, r16
    9e4c:	80 83       	st	Z, r24
    9e4e:	91 83       	std	Z+1, r25	; 0x01
            ps_R[7] = (int16_t)(af_R[2][1]*32767.0);
    9e50:	ce 01       	movw	r24, r28
    9e52:	82 59       	subi	r24, 0x92	; 146
    9e54:	9f 4f       	sbci	r25, 0xFF	; 255
    9e56:	fc 01       	movw	r30, r24
    9e58:	80 81       	ld	r24, Z
    9e5a:	91 81       	ldd	r25, Z+1	; 0x01
    9e5c:	8c 01       	movw	r16, r24
    9e5e:	02 5f       	subi	r16, 0xF2	; 242
    9e60:	1f 4f       	sbci	r17, 0xFF	; 255
    9e62:	ce 01       	movw	r24, r28
    9e64:	86 5b       	subi	r24, 0xB6	; 182
    9e66:	9f 4f       	sbci	r25, 0xFF	; 255
    9e68:	fc 01       	movw	r30, r24
    9e6a:	84 8d       	ldd	r24, Z+28	; 0x1c
    9e6c:	95 8d       	ldd	r25, Z+29	; 0x1d
    9e6e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    9e70:	b7 8d       	ldd	r27, Z+31	; 0x1f
    9e72:	bc 01       	movw	r22, r24
    9e74:	cd 01       	movw	r24, r26
    9e76:	20 e0       	ldi	r18, 0x00	; 0
    9e78:	3e ef       	ldi	r19, 0xFE	; 254
    9e7a:	4f ef       	ldi	r20, 0xFF	; 255
    9e7c:	56 e4       	ldi	r21, 0x46	; 70
    9e7e:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9e82:	dc 01       	movw	r26, r24
    9e84:	cb 01       	movw	r24, r22
    9e86:	bc 01       	movw	r22, r24
    9e88:	cd 01       	movw	r24, r26
    9e8a:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9e8e:	dc 01       	movw	r26, r24
    9e90:	cb 01       	movw	r24, r22
    9e92:	f8 01       	movw	r30, r16
    9e94:	80 83       	st	Z, r24
    9e96:	91 83       	std	Z+1, r25	; 0x01
            ps_R[8] = (int16_t)(af_R[2][2]*32767.0);
    9e98:	ce 01       	movw	r24, r28
    9e9a:	82 59       	subi	r24, 0x92	; 146
    9e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    9e9e:	fc 01       	movw	r30, r24
    9ea0:	80 81       	ld	r24, Z
    9ea2:	91 81       	ldd	r25, Z+1	; 0x01
    9ea4:	8c 01       	movw	r16, r24
    9ea6:	00 5f       	subi	r16, 0xF0	; 240
    9ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    9eaa:	ce 01       	movw	r24, r28
    9eac:	86 5b       	subi	r24, 0xB6	; 182
    9eae:	9f 4f       	sbci	r25, 0xFF	; 255
    9eb0:	fc 01       	movw	r30, r24
    9eb2:	80 a1       	lds	r24, 0x40
    9eb4:	91 a1       	lds	r25, 0x41
    9eb6:	a2 a1       	lds	r26, 0x42
    9eb8:	b3 a1       	lds	r27, 0x43
    9eba:	bc 01       	movw	r22, r24
    9ebc:	cd 01       	movw	r24, r26
    9ebe:	20 e0       	ldi	r18, 0x00	; 0
    9ec0:	3e ef       	ldi	r19, 0xFE	; 254
    9ec2:	4f ef       	ldi	r20, 0xFF	; 255
    9ec4:	56 e4       	ldi	r21, 0x46	; 70
    9ec6:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9eca:	dc 01       	movw	r26, r24
    9ecc:	cb 01       	movw	r24, r22
    9ece:	bc 01       	movw	r22, r24
    9ed0:	cd 01       	movw	r24, r26
    9ed2:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9ed6:	dc 01       	movw	r26, r24
    9ed8:	cb 01       	movw	r24, r22
    9eda:	f8 01       	movw	r30, r16
    9edc:	80 83       	st	Z, r24
    9ede:	91 83       	std	Z+1, r25	; 0x01

            ps_scale[0] = (int16_t)(af_scale[0]*(float)(1 << INS_AXIS_SCALE_Q_FACTOR));
    9ee0:	ce 01       	movw	r24, r28
    9ee2:	ce 96       	adiw	r24, 0x3e	; 62
    9ee4:	fc 01       	movw	r30, r24
    9ee6:	80 81       	ld	r24, Z
    9ee8:	91 81       	ldd	r25, Z+1	; 0x01
    9eea:	a2 81       	ldd	r26, Z+2	; 0x02
    9eec:	b3 81       	ldd	r27, Z+3	; 0x03
    9eee:	bc 01       	movw	r22, r24
    9ef0:	cd 01       	movw	r24, r26
    9ef2:	20 e0       	ldi	r18, 0x00	; 0
    9ef4:	30 e0       	ldi	r19, 0x00	; 0
    9ef6:	40 e0       	ldi	r20, 0x00	; 0
    9ef8:	56 e4       	ldi	r21, 0x46	; 70
    9efa:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9efe:	dc 01       	movw	r26, r24
    9f00:	cb 01       	movw	r24, r22
    9f02:	bc 01       	movw	r22, r24
    9f04:	cd 01       	movw	r24, r26
    9f06:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9f0a:	dc 01       	movw	r26, r24
    9f0c:	cb 01       	movw	r24, r22
    9f0e:	9c 01       	movw	r18, r24
    9f10:	ce 01       	movw	r24, r28
    9f12:	8e 58       	subi	r24, 0x8E	; 142
    9f14:	9f 4f       	sbci	r25, 0xFF	; 255
    9f16:	fc 01       	movw	r30, r24
    9f18:	80 81       	ld	r24, Z
    9f1a:	91 81       	ldd	r25, Z+1	; 0x01
    9f1c:	fc 01       	movw	r30, r24
    9f1e:	20 83       	st	Z, r18
    9f20:	31 83       	std	Z+1, r19	; 0x01
            ps_scale[1] = (int16_t)(af_scale[1]*(float)(1 << INS_AXIS_SCALE_Q_FACTOR));
    9f22:	ce 01       	movw	r24, r28
    9f24:	8e 58       	subi	r24, 0x8E	; 142
    9f26:	9f 4f       	sbci	r25, 0xFF	; 255
    9f28:	fc 01       	movw	r30, r24
    9f2a:	80 81       	ld	r24, Z
    9f2c:	91 81       	ldd	r25, Z+1	; 0x01
    9f2e:	8c 01       	movw	r16, r24
    9f30:	0e 5f       	subi	r16, 0xFE	; 254
    9f32:	1f 4f       	sbci	r17, 0xFF	; 255
    9f34:	ce 01       	movw	r24, r28
    9f36:	8e 5b       	subi	r24, 0xBE	; 190
    9f38:	9f 4f       	sbci	r25, 0xFF	; 255
    9f3a:	fc 01       	movw	r30, r24
    9f3c:	80 81       	ld	r24, Z
    9f3e:	91 81       	ldd	r25, Z+1	; 0x01
    9f40:	a2 81       	ldd	r26, Z+2	; 0x02
    9f42:	b3 81       	ldd	r27, Z+3	; 0x03
    9f44:	bc 01       	movw	r22, r24
    9f46:	cd 01       	movw	r24, r26
    9f48:	20 e0       	ldi	r18, 0x00	; 0
    9f4a:	30 e0       	ldi	r19, 0x00	; 0
    9f4c:	40 e0       	ldi	r20, 0x00	; 0
    9f4e:	56 e4       	ldi	r21, 0x46	; 70
    9f50:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9f54:	dc 01       	movw	r26, r24
    9f56:	cb 01       	movw	r24, r22
    9f58:	bc 01       	movw	r22, r24
    9f5a:	cd 01       	movw	r24, r26
    9f5c:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9f60:	dc 01       	movw	r26, r24
    9f62:	cb 01       	movw	r24, r22
    9f64:	f8 01       	movw	r30, r16
    9f66:	80 83       	st	Z, r24
    9f68:	91 83       	std	Z+1, r25	; 0x01
            ps_scale[2] = (int16_t)(af_scale[2]*(float)(1 << INS_AXIS_SCALE_Q_FACTOR));
    9f6a:	ce 01       	movw	r24, r28
    9f6c:	8e 58       	subi	r24, 0x8E	; 142
    9f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    9f70:	fc 01       	movw	r30, r24
    9f72:	80 81       	ld	r24, Z
    9f74:	91 81       	ldd	r25, Z+1	; 0x01
    9f76:	8c 01       	movw	r16, r24
    9f78:	0c 5f       	subi	r16, 0xFC	; 252
    9f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    9f7c:	ce 01       	movw	r24, r28
    9f7e:	8a 5b       	subi	r24, 0xBA	; 186
    9f80:	9f 4f       	sbci	r25, 0xFF	; 255
    9f82:	fc 01       	movw	r30, r24
    9f84:	80 81       	ld	r24, Z
    9f86:	91 81       	ldd	r25, Z+1	; 0x01
    9f88:	a2 81       	ldd	r26, Z+2	; 0x02
    9f8a:	b3 81       	ldd	r27, Z+3	; 0x03
    9f8c:	bc 01       	movw	r22, r24
    9f8e:	cd 01       	movw	r24, r26
    9f90:	20 e0       	ldi	r18, 0x00	; 0
    9f92:	30 e0       	ldi	r19, 0x00	; 0
    9f94:	40 e0       	ldi	r20, 0x00	; 0
    9f96:	56 e4       	ldi	r21, 0x46	; 70
    9f98:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
    9f9c:	dc 01       	movw	r26, r24
    9f9e:	cb 01       	movw	r24, r22
    9fa0:	bc 01       	movw	r22, r24
    9fa2:	cd 01       	movw	r24, r26
    9fa4:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
    9fa8:	dc 01       	movw	r26, r24
    9faa:	cb 01       	movw	r24, r22
    9fac:	f8 01       	movw	r30, r16
    9fae:	80 83       	st	Z, r24
    9fb0:	91 83       	std	Z+1, r25	; 0x01

      }/*End if( b_passed == true)*/

   }/*End if( b_passed == true)*/

   return b_passed;
    9fb2:	89 85       	ldd	r24, Y+9	; 0x09

}/*End ellipsoidFit*/
    9fb4:	c9 58       	subi	r28, 0x89	; 137
    9fb6:	df 4f       	sbci	r29, 0xFF	; 255
    9fb8:	cd bf       	out	0x3d, r28	; 61
    9fba:	de bf       	out	0x3e, r29	; 62
    9fbc:	df 91       	pop	r29
    9fbe:	cf 91       	pop	r28
    9fc0:	1f 91       	pop	r17
    9fc2:	0f 91       	pop	r16
    9fc4:	ff 90       	pop	r15
    9fc6:	ef 90       	pop	r14
    9fc8:	df 90       	pop	r13
    9fca:	cf 90       	pop	r12
    9fcc:	bf 90       	pop	r11
    9fce:	af 90       	pop	r10
    9fd0:	08 95       	ret

00009fd2 <phaseError>:

static inline int16_t phaseError( int16_t s_phase1,
                                 int16_t s_phase2)

{
    9fd2:	ef 92       	push	r14
    9fd4:	ff 92       	push	r15
    9fd6:	0f 93       	push	r16
    9fd8:	1f 93       	push	r17
    9fda:	cf 93       	push	r28
    9fdc:	df 93       	push	r29
    9fde:	cd b7       	in	r28, 0x3d	; 61
    9fe0:	de b7       	in	r29, 0x3e	; 62
    9fe2:	28 97       	sbiw	r28, 0x08	; 8
    9fe4:	cd bf       	out	0x3d, r28	; 61
    9fe6:	de bf       	out	0x3e, r29	; 62
    9fe8:	8d 83       	std	Y+5, r24	; 0x05
    9fea:	9e 83       	std	Y+6, r25	; 0x06
    9fec:	6f 83       	std	Y+7, r22	; 0x07
    9fee:	78 87       	std	Y+8, r23	; 0x08
   int32_t i_error = (int32_t)s_phase1 - (int32_t)s_phase2;
    9ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    9ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    9ff4:	9c 01       	movw	r18, r24
    9ff6:	44 27       	eor	r20, r20
    9ff8:	37 fd       	sbrc	r19, 7
    9ffa:	40 95       	com	r20
    9ffc:	54 2f       	mov	r21, r20
    9ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    a000:	98 85       	ldd	r25, Y+8	; 0x08
    a002:	aa 27       	eor	r26, r26
    a004:	97 fd       	sbrc	r25, 7
    a006:	a0 95       	com	r26
    a008:	ba 2f       	mov	r27, r26
    a00a:	79 01       	movw	r14, r18
    a00c:	8a 01       	movw	r16, r20
    a00e:	e8 1a       	sub	r14, r24
    a010:	f9 0a       	sbc	r15, r25
    a012:	0a 0b       	sbc	r16, r26
    a014:	1b 0b       	sbc	r17, r27
    a016:	d8 01       	movw	r26, r16
    a018:	c7 01       	movw	r24, r14
    a01a:	89 83       	std	Y+1, r24	; 0x01
    a01c:	9a 83       	std	Y+2, r25	; 0x02
    a01e:	ab 83       	std	Y+3, r26	; 0x03
    a020:	bc 83       	std	Y+4, r27	; 0x04

   if( i_error <= UTL_MATH_FXDPNT_NEGATIVE_PI)
    a022:	89 81       	ldd	r24, Y+1	; 0x01
    a024:	9a 81       	ldd	r25, Y+2	; 0x02
    a026:	ab 81       	ldd	r26, Y+3	; 0x03
    a028:	bc 81       	ldd	r27, Y+4	; 0x04
    a02a:	81 30       	cpi	r24, 0x01	; 1
    a02c:	00 e8       	ldi	r16, 0x80	; 128
    a02e:	90 07       	cpc	r25, r16
    a030:	0f ef       	ldi	r16, 0xFF	; 255
    a032:	a0 07       	cpc	r26, r16
    a034:	0f ef       	ldi	r16, 0xFF	; 255
    a036:	b0 07       	cpc	r27, r16
    a038:	6c f4       	brge	.+26     	; 0xa054 <phaseError+0x82>
      i_error = i_error + UTL_MATH_FXDPNT_TWO_PI_WRAP;
    a03a:	89 81       	ldd	r24, Y+1	; 0x01
    a03c:	9a 81       	ldd	r25, Y+2	; 0x02
    a03e:	ab 81       	ldd	r26, Y+3	; 0x03
    a040:	bc 81       	ldd	r27, Y+4	; 0x04
    a042:	80 50       	subi	r24, 0x00	; 0
    a044:	90 40       	sbci	r25, 0x00	; 0
    a046:	af 4f       	sbci	r26, 0xFF	; 255
    a048:	bf 4f       	sbci	r27, 0xFF	; 255
    a04a:	89 83       	std	Y+1, r24	; 0x01
    a04c:	9a 83       	std	Y+2, r25	; 0x02
    a04e:	ab 83       	std	Y+3, r26	; 0x03
    a050:	bc 83       	std	Y+4, r27	; 0x04
    a052:	18 c0       	rjmp	.+48     	; 0xa084 <phaseError+0xb2>
   else if( i_error > UTL_MATH_FXDPNT_PI)
    a054:	89 81       	ldd	r24, Y+1	; 0x01
    a056:	9a 81       	ldd	r25, Y+2	; 0x02
    a058:	ab 81       	ldd	r26, Y+3	; 0x03
    a05a:	bc 81       	ldd	r27, Y+4	; 0x04
    a05c:	80 30       	cpi	r24, 0x00	; 0
    a05e:	10 e8       	ldi	r17, 0x80	; 128
    a060:	91 07       	cpc	r25, r17
    a062:	10 e0       	ldi	r17, 0x00	; 0
    a064:	a1 07       	cpc	r26, r17
    a066:	10 e0       	ldi	r17, 0x00	; 0
    a068:	b1 07       	cpc	r27, r17
    a06a:	64 f0       	brlt	.+24     	; 0xa084 <phaseError+0xb2>
      i_error = i_error - UTL_MATH_FXDPNT_TWO_PI_WRAP;
    a06c:	89 81       	ldd	r24, Y+1	; 0x01
    a06e:	9a 81       	ldd	r25, Y+2	; 0x02
    a070:	ab 81       	ldd	r26, Y+3	; 0x03
    a072:	bc 81       	ldd	r27, Y+4	; 0x04
    a074:	80 50       	subi	r24, 0x00	; 0
    a076:	90 40       	sbci	r25, 0x00	; 0
    a078:	a1 40       	sbci	r26, 0x01	; 1
    a07a:	b0 40       	sbci	r27, 0x00	; 0
    a07c:	89 83       	std	Y+1, r24	; 0x01
    a07e:	9a 83       	std	Y+2, r25	; 0x02
    a080:	ab 83       	std	Y+3, r26	; 0x03
    a082:	bc 83       	std	Y+4, r27	; 0x04

   return (int16_t)i_error;
    a084:	89 81       	ldd	r24, Y+1	; 0x01
    a086:	9a 81       	ldd	r25, Y+2	; 0x02

}/*End phaseError*/
    a088:	28 96       	adiw	r28, 0x08	; 8
    a08a:	cd bf       	out	0x3d, r28	; 61
    a08c:	de bf       	out	0x3e, r29	; 62
    a08e:	df 91       	pop	r29
    a090:	cf 91       	pop	r28
    a092:	1f 91       	pop	r17
    a094:	0f 91       	pop	r16
    a096:	ff 90       	pop	r15
    a098:	ef 90       	pop	r14
    a09a:	08 95       	ret

0000a09c <eSKalmanResVarEst>:

static inline void eSKalmanResVarEst( int16_t *ps_rawAtt)
{
    a09c:	0f 93       	push	r16
    a09e:	1f 93       	push	r17
    a0a0:	cf 93       	push	r28
    a0a2:	df 93       	push	r29
    a0a4:	cd b7       	in	r28, 0x3d	; 61
    a0a6:	de b7       	in	r29, 0x3e	; 62
    a0a8:	66 97       	sbiw	r28, 0x16	; 22
    a0aa:	cd bf       	out	0x3d, r28	; 61
    a0ac:	de bf       	out	0x3e, r29	; 62
    a0ae:	8d 8b       	std	Y+21, r24	; 0x15
    a0b0:	9e 8b       	std	Y+22, r25	; 0x16
   int32_t *pi_resVar = gt_insDev.ai_avrRes;
    a0b2:	81 ee       	ldi	r24, 0xE1	; 225
    a0b4:	9a e2       	ldi	r25, 0x2A	; 42
    a0b6:	89 83       	std	Y+1, r24	; 0x01
    a0b8:	9a 83       	std	Y+2, r25	; 0x02
   int32_t i_temp;
   int16_t *ps_res = &gt_insDev.as_res[0];
    a0ba:	8d ee       	ldi	r24, 0xED	; 237
    a0bc:	9a e2       	ldi	r25, 0x2A	; 42
    a0be:	8b 83       	std	Y+3, r24	; 0x03
    a0c0:	9c 83       	std	Y+4, r25	; 0x04

   ps_res[0] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[0],
    a0c2:	80 91 6a 24 	lds	r24, 0x246A
    a0c6:	90 91 6b 24 	lds	r25, 0x246B
    a0ca:	2d 89       	ldd	r18, Y+21	; 0x15
    a0cc:	3e 89       	ldd	r19, Y+22	; 0x16
    a0ce:	f9 01       	movw	r30, r18
    a0d0:	20 81       	ld	r18, Z
    a0d2:	31 81       	ldd	r19, Z+1	; 0x01
    a0d4:	b9 01       	movw	r22, r18
    a0d6:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <phaseError>
    a0da:	aa 27       	eor	r26, r26
    a0dc:	97 fd       	sbrc	r25, 7
    a0de:	a0 95       	com	r26
    a0e0:	ba 2f       	mov	r27, r26
    a0e2:	89 87       	std	Y+9, r24	; 0x09
    a0e4:	9a 87       	std	Y+10, r25	; 0x0a
    a0e6:	ab 87       	std	Y+11, r26	; 0x0b
    a0e8:	bc 87       	std	Y+12, r27	; 0x0c
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a0ea:	89 85       	ldd	r24, Y+9	; 0x09
    a0ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    a0f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    a0f2:	bb 23       	and	r27, r27
    a0f4:	7c f4       	brge	.+30     	; 0xa114 <eSKalmanResVarEst+0x78>
         i_y = -i_y;
    a0f6:	89 85       	ldd	r24, Y+9	; 0x09
    a0f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    a0fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    a0fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    a0fe:	b0 95       	com	r27
    a100:	a0 95       	com	r26
    a102:	90 95       	com	r25
    a104:	81 95       	neg	r24
    a106:	9f 4f       	sbci	r25, 0xFF	; 255
    a108:	af 4f       	sbci	r26, 0xFF	; 255
    a10a:	bf 4f       	sbci	r27, 0xFF	; 255
    a10c:	89 87       	std	Y+9, r24	; 0x09
    a10e:	9a 87       	std	Y+10, r25	; 0x0a
    a110:	ab 87       	std	Y+11, r26	; 0x0b
    a112:	bc 87       	std	Y+12, r27	; 0x0c

      return i_y;
    a114:	89 85       	ldd	r24, Y+9	; 0x09
    a116:	9a 85       	ldd	r25, Y+10	; 0x0a
    a118:	ab 85       	ldd	r26, Y+11	; 0x0b
    a11a:	bc 85       	ldd	r27, Y+12	; 0x0c
    a11c:	9c 01       	movw	r18, r24
    a11e:	8b 81       	ldd	r24, Y+3	; 0x03
    a120:	9c 81       	ldd	r25, Y+4	; 0x04
    a122:	fc 01       	movw	r30, r24
    a124:	20 83       	st	Z, r18
    a126:	31 83       	std	Z+1, r19	; 0x01
   ps_rawAtt[0]));
   ps_res[1] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[1],
    a128:	8b 81       	ldd	r24, Y+3	; 0x03
    a12a:	9c 81       	ldd	r25, Y+4	; 0x04
    a12c:	8c 01       	movw	r16, r24
    a12e:	0e 5f       	subi	r16, 0xFE	; 254
    a130:	1f 4f       	sbci	r17, 0xFF	; 255
    a132:	80 91 6c 24 	lds	r24, 0x246C
    a136:	90 91 6d 24 	lds	r25, 0x246D
   ps_rawAtt[1]));
    a13a:	2d 89       	ldd	r18, Y+21	; 0x15
    a13c:	3e 89       	ldd	r19, Y+22	; 0x16
    a13e:	2e 5f       	subi	r18, 0xFE	; 254
    a140:	3f 4f       	sbci	r19, 0xFF	; 255
   int32_t i_temp;
   int16_t *ps_res = &gt_insDev.as_res[0];

   ps_res[0] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[0],
   ps_rawAtt[0]));
   ps_res[1] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[1],
    a142:	f9 01       	movw	r30, r18
    a144:	20 81       	ld	r18, Z
    a146:	31 81       	ldd	r19, Z+1	; 0x01
    a148:	b9 01       	movw	r22, r18
    a14a:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <phaseError>
    a14e:	aa 27       	eor	r26, r26
    a150:	97 fd       	sbrc	r25, 7
    a152:	a0 95       	com	r26
    a154:	ba 2f       	mov	r27, r26
    a156:	8d 87       	std	Y+13, r24	; 0x0d
    a158:	9e 87       	std	Y+14, r25	; 0x0e
    a15a:	af 87       	std	Y+15, r26	; 0x0f
    a15c:	b8 8b       	std	Y+16, r27	; 0x10
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a15e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a160:	9e 85       	ldd	r25, Y+14	; 0x0e
    a162:	af 85       	ldd	r26, Y+15	; 0x0f
    a164:	b8 89       	ldd	r27, Y+16	; 0x10
    a166:	bb 23       	and	r27, r27
    a168:	7c f4       	brge	.+30     	; 0xa188 <eSKalmanResVarEst+0xec>
         i_y = -i_y;
    a16a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a16c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a16e:	af 85       	ldd	r26, Y+15	; 0x0f
    a170:	b8 89       	ldd	r27, Y+16	; 0x10
    a172:	b0 95       	com	r27
    a174:	a0 95       	com	r26
    a176:	90 95       	com	r25
    a178:	81 95       	neg	r24
    a17a:	9f 4f       	sbci	r25, 0xFF	; 255
    a17c:	af 4f       	sbci	r26, 0xFF	; 255
    a17e:	bf 4f       	sbci	r27, 0xFF	; 255
    a180:	8d 87       	std	Y+13, r24	; 0x0d
    a182:	9e 87       	std	Y+14, r25	; 0x0e
    a184:	af 87       	std	Y+15, r26	; 0x0f
    a186:	b8 8b       	std	Y+16, r27	; 0x10

      return i_y;
    a188:	8d 85       	ldd	r24, Y+13	; 0x0d
    a18a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a18c:	af 85       	ldd	r26, Y+15	; 0x0f
    a18e:	b8 89       	ldd	r27, Y+16	; 0x10
    a190:	f8 01       	movw	r30, r16
    a192:	80 83       	st	Z, r24
    a194:	91 83       	std	Z+1, r25	; 0x01
   ps_rawAtt[1]));
   ps_res[2] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[2],
    a196:	8b 81       	ldd	r24, Y+3	; 0x03
    a198:	9c 81       	ldd	r25, Y+4	; 0x04
    a19a:	8c 01       	movw	r16, r24
    a19c:	0c 5f       	subi	r16, 0xFC	; 252
    a19e:	1f 4f       	sbci	r17, 0xFF	; 255
    a1a0:	80 91 6e 24 	lds	r24, 0x246E
    a1a4:	90 91 6f 24 	lds	r25, 0x246F
   ps_rawAtt[2]));
    a1a8:	2d 89       	ldd	r18, Y+21	; 0x15
    a1aa:	3e 89       	ldd	r19, Y+22	; 0x16
    a1ac:	2c 5f       	subi	r18, 0xFC	; 252
    a1ae:	3f 4f       	sbci	r19, 0xFF	; 255

   ps_res[0] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[0],
   ps_rawAtt[0]));
   ps_res[1] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[1],
   ps_rawAtt[1]));
   ps_res[2] = (int16_t)utl_abs32_32( phaseError( gt_insDev.as_dcmAttitude[2],
    a1b0:	f9 01       	movw	r30, r18
    a1b2:	20 81       	ld	r18, Z
    a1b4:	31 81       	ldd	r19, Z+1	; 0x01
    a1b6:	b9 01       	movw	r22, r18
    a1b8:	0e 94 e9 4f 	call	0x9fd2	; 0x9fd2 <phaseError>
    a1bc:	aa 27       	eor	r26, r26
    a1be:	97 fd       	sbrc	r25, 7
    a1c0:	a0 95       	com	r26
    a1c2:	ba 2f       	mov	r27, r26
    a1c4:	89 8b       	std	Y+17, r24	; 0x11
    a1c6:	9a 8b       	std	Y+18, r25	; 0x12
    a1c8:	ab 8b       	std	Y+19, r26	; 0x13
    a1ca:	bc 8b       	std	Y+20, r27	; 0x14
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a1cc:	89 89       	ldd	r24, Y+17	; 0x11
    a1ce:	9a 89       	ldd	r25, Y+18	; 0x12
    a1d0:	ab 89       	ldd	r26, Y+19	; 0x13
    a1d2:	bc 89       	ldd	r27, Y+20	; 0x14
    a1d4:	bb 23       	and	r27, r27
    a1d6:	7c f4       	brge	.+30     	; 0xa1f6 <eSKalmanResVarEst+0x15a>
         i_y = -i_y;
    a1d8:	89 89       	ldd	r24, Y+17	; 0x11
    a1da:	9a 89       	ldd	r25, Y+18	; 0x12
    a1dc:	ab 89       	ldd	r26, Y+19	; 0x13
    a1de:	bc 89       	ldd	r27, Y+20	; 0x14
    a1e0:	b0 95       	com	r27
    a1e2:	a0 95       	com	r26
    a1e4:	90 95       	com	r25
    a1e6:	81 95       	neg	r24
    a1e8:	9f 4f       	sbci	r25, 0xFF	; 255
    a1ea:	af 4f       	sbci	r26, 0xFF	; 255
    a1ec:	bf 4f       	sbci	r27, 0xFF	; 255
    a1ee:	89 8b       	std	Y+17, r24	; 0x11
    a1f0:	9a 8b       	std	Y+18, r25	; 0x12
    a1f2:	ab 8b       	std	Y+19, r26	; 0x13
    a1f4:	bc 8b       	std	Y+20, r27	; 0x14

      return i_y;
    a1f6:	89 89       	ldd	r24, Y+17	; 0x11
    a1f8:	9a 89       	ldd	r25, Y+18	; 0x12
    a1fa:	ab 89       	ldd	r26, Y+19	; 0x13
    a1fc:	bc 89       	ldd	r27, Y+20	; 0x14
    a1fe:	f8 01       	movw	r30, r16
    a200:	80 83       	st	Z, r24
    a202:	91 83       	std	Z+1, r25	; 0x01
   ps_rawAtt[2]));

   i_temp = pi_resVar[0]*(int32_t)INS_ATT_RES_FORGETTING_FACTOR;
    a204:	89 81       	ldd	r24, Y+1	; 0x01
    a206:	9a 81       	ldd	r25, Y+2	; 0x02
    a208:	fc 01       	movw	r30, r24
    a20a:	80 81       	ld	r24, Z
    a20c:	91 81       	ldd	r25, Z+1	; 0x01
    a20e:	a2 81       	ldd	r26, Z+2	; 0x02
    a210:	b3 81       	ldd	r27, Z+3	; 0x03
    a212:	22 e3       	ldi	r18, 0x32	; 50
    a214:	3f e0       	ldi	r19, 0x0F	; 15
    a216:	40 e0       	ldi	r20, 0x00	; 0
    a218:	50 e0       	ldi	r21, 0x00	; 0
    a21a:	bc 01       	movw	r22, r24
    a21c:	cd 01       	movw	r24, r26
    a21e:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a222:	dc 01       	movw	r26, r24
    a224:	cb 01       	movw	r24, r22
    a226:	8d 83       	std	Y+5, r24	; 0x05
    a228:	9e 83       	std	Y+6, r25	; 0x06
    a22a:	af 83       	std	Y+7, r26	; 0x07
    a22c:	b8 87       	std	Y+8, r27	; 0x08
   i_temp = i_temp + ((int32_t)ps_res[0] << (INS_ATT_RES_VAR_EXTRA_RES+1))*(4095 -
    a22e:	8b 81       	ldd	r24, Y+3	; 0x03
    a230:	9c 81       	ldd	r25, Y+4	; 0x04
    a232:	fc 01       	movw	r30, r24
    a234:	80 81       	ld	r24, Z
    a236:	91 81       	ldd	r25, Z+1	; 0x01
    a238:	aa 27       	eor	r26, r26
    a23a:	97 fd       	sbrc	r25, 7
    a23c:	a0 95       	com	r26
    a23e:	ba 2f       	mov	r27, r26
    a240:	88 0f       	add	r24, r24
    a242:	99 1f       	adc	r25, r25
    a244:	aa 1f       	adc	r26, r26
    a246:	bb 1f       	adc	r27, r27
    a248:	88 0f       	add	r24, r24
    a24a:	99 1f       	adc	r25, r25
    a24c:	aa 1f       	adc	r26, r26
    a24e:	bb 1f       	adc	r27, r27
    a250:	88 0f       	add	r24, r24
    a252:	99 1f       	adc	r25, r25
    a254:	aa 1f       	adc	r26, r26
    a256:	bb 1f       	adc	r27, r27
    a258:	88 0f       	add	r24, r24
    a25a:	99 1f       	adc	r25, r25
    a25c:	aa 1f       	adc	r26, r26
    a25e:	bb 1f       	adc	r27, r27
    a260:	88 0f       	add	r24, r24
    a262:	99 1f       	adc	r25, r25
    a264:	aa 1f       	adc	r26, r26
    a266:	bb 1f       	adc	r27, r27
    a268:	2d ec       	ldi	r18, 0xCD	; 205
    a26a:	30 e0       	ldi	r19, 0x00	; 0
    a26c:	40 e0       	ldi	r20, 0x00	; 0
    a26e:	50 e0       	ldi	r21, 0x00	; 0
    a270:	bc 01       	movw	r22, r24
    a272:	cd 01       	movw	r24, r26
    a274:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a278:	dc 01       	movw	r26, r24
    a27a:	cb 01       	movw	r24, r22
    a27c:	2d 81       	ldd	r18, Y+5	; 0x05
    a27e:	3e 81       	ldd	r19, Y+6	; 0x06
    a280:	4f 81       	ldd	r20, Y+7	; 0x07
    a282:	58 85       	ldd	r21, Y+8	; 0x08
    a284:	82 0f       	add	r24, r18
    a286:	93 1f       	adc	r25, r19
    a288:	a4 1f       	adc	r26, r20
    a28a:	b5 1f       	adc	r27, r21
    a28c:	8d 83       	std	Y+5, r24	; 0x05
    a28e:	9e 83       	std	Y+6, r25	; 0x06
    a290:	af 83       	std	Y+7, r26	; 0x07
    a292:	b8 87       	std	Y+8, r27	; 0x08
   INS_ATT_RES_FORGETTING_FACTOR);
   pi_resVar[0] = (int32_t)((i_temp + ((int32_t)1 << (INS_ATT_RES_AVR_Q - 1)))
    a294:	8d 81       	ldd	r24, Y+5	; 0x05
    a296:	9e 81       	ldd	r25, Y+6	; 0x06
    a298:	af 81       	ldd	r26, Y+7	; 0x07
    a29a:	b8 85       	ldd	r27, Y+8	; 0x08
    a29c:	80 50       	subi	r24, 0x00	; 0
    a29e:	98 4f       	sbci	r25, 0xF8	; 248
    a2a0:	af 4f       	sbci	r26, 0xFF	; 255
    a2a2:	bf 4f       	sbci	r27, 0xFF	; 255
    a2a4:	07 2e       	mov	r0, r23
    a2a6:	7c e0       	ldi	r23, 0x0C	; 12
    a2a8:	b5 95       	asr	r27
    a2aa:	a7 95       	ror	r26
    a2ac:	97 95       	ror	r25
    a2ae:	87 95       	ror	r24
    a2b0:	7a 95       	dec	r23
    a2b2:	d1 f7       	brne	.-12     	; 0xa2a8 <eSKalmanResVarEst+0x20c>
    a2b4:	70 2d       	mov	r23, r0
    a2b6:	29 81       	ldd	r18, Y+1	; 0x01
    a2b8:	3a 81       	ldd	r19, Y+2	; 0x02
    a2ba:	f9 01       	movw	r30, r18
    a2bc:	80 83       	st	Z, r24
    a2be:	91 83       	std	Z+1, r25	; 0x01
    a2c0:	a2 83       	std	Z+2, r26	; 0x02
    a2c2:	b3 83       	std	Z+3, r27	; 0x03
   >> INS_ATT_RES_AVR_Q);

   i_temp = pi_resVar[1]*(int32_t)INS_ATT_RES_FORGETTING_FACTOR;
    a2c4:	89 81       	ldd	r24, Y+1	; 0x01
    a2c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a2c8:	04 96       	adiw	r24, 0x04	; 4
    a2ca:	fc 01       	movw	r30, r24
    a2cc:	80 81       	ld	r24, Z
    a2ce:	91 81       	ldd	r25, Z+1	; 0x01
    a2d0:	a2 81       	ldd	r26, Z+2	; 0x02
    a2d2:	b3 81       	ldd	r27, Z+3	; 0x03
    a2d4:	22 e3       	ldi	r18, 0x32	; 50
    a2d6:	3f e0       	ldi	r19, 0x0F	; 15
    a2d8:	40 e0       	ldi	r20, 0x00	; 0
    a2da:	50 e0       	ldi	r21, 0x00	; 0
    a2dc:	bc 01       	movw	r22, r24
    a2de:	cd 01       	movw	r24, r26
    a2e0:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a2e4:	dc 01       	movw	r26, r24
    a2e6:	cb 01       	movw	r24, r22
    a2e8:	8d 83       	std	Y+5, r24	; 0x05
    a2ea:	9e 83       	std	Y+6, r25	; 0x06
    a2ec:	af 83       	std	Y+7, r26	; 0x07
    a2ee:	b8 87       	std	Y+8, r27	; 0x08
   i_temp = i_temp + ((int32_t)ps_res[1] << (INS_ATT_RES_VAR_EXTRA_RES+1))*(4095 -
    a2f0:	8b 81       	ldd	r24, Y+3	; 0x03
    a2f2:	9c 81       	ldd	r25, Y+4	; 0x04
    a2f4:	02 96       	adiw	r24, 0x02	; 2
    a2f6:	fc 01       	movw	r30, r24
    a2f8:	80 81       	ld	r24, Z
    a2fa:	91 81       	ldd	r25, Z+1	; 0x01
    a2fc:	aa 27       	eor	r26, r26
    a2fe:	97 fd       	sbrc	r25, 7
    a300:	a0 95       	com	r26
    a302:	ba 2f       	mov	r27, r26
    a304:	88 0f       	add	r24, r24
    a306:	99 1f       	adc	r25, r25
    a308:	aa 1f       	adc	r26, r26
    a30a:	bb 1f       	adc	r27, r27
    a30c:	88 0f       	add	r24, r24
    a30e:	99 1f       	adc	r25, r25
    a310:	aa 1f       	adc	r26, r26
    a312:	bb 1f       	adc	r27, r27
    a314:	88 0f       	add	r24, r24
    a316:	99 1f       	adc	r25, r25
    a318:	aa 1f       	adc	r26, r26
    a31a:	bb 1f       	adc	r27, r27
    a31c:	88 0f       	add	r24, r24
    a31e:	99 1f       	adc	r25, r25
    a320:	aa 1f       	adc	r26, r26
    a322:	bb 1f       	adc	r27, r27
    a324:	88 0f       	add	r24, r24
    a326:	99 1f       	adc	r25, r25
    a328:	aa 1f       	adc	r26, r26
    a32a:	bb 1f       	adc	r27, r27
    a32c:	2d ec       	ldi	r18, 0xCD	; 205
    a32e:	30 e0       	ldi	r19, 0x00	; 0
    a330:	40 e0       	ldi	r20, 0x00	; 0
    a332:	50 e0       	ldi	r21, 0x00	; 0
    a334:	bc 01       	movw	r22, r24
    a336:	cd 01       	movw	r24, r26
    a338:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a33c:	dc 01       	movw	r26, r24
    a33e:	cb 01       	movw	r24, r22
    a340:	2d 81       	ldd	r18, Y+5	; 0x05
    a342:	3e 81       	ldd	r19, Y+6	; 0x06
    a344:	4f 81       	ldd	r20, Y+7	; 0x07
    a346:	58 85       	ldd	r21, Y+8	; 0x08
    a348:	82 0f       	add	r24, r18
    a34a:	93 1f       	adc	r25, r19
    a34c:	a4 1f       	adc	r26, r20
    a34e:	b5 1f       	adc	r27, r21
    a350:	8d 83       	std	Y+5, r24	; 0x05
    a352:	9e 83       	std	Y+6, r25	; 0x06
    a354:	af 83       	std	Y+7, r26	; 0x07
    a356:	b8 87       	std	Y+8, r27	; 0x08
   INS_ATT_RES_FORGETTING_FACTOR);
   pi_resVar[1] = (int32_t)((i_temp + ((int32_t)1 << (INS_ATT_RES_AVR_Q - 1)))
    a358:	89 81       	ldd	r24, Y+1	; 0x01
    a35a:	9a 81       	ldd	r25, Y+2	; 0x02
    a35c:	9c 01       	movw	r18, r24
    a35e:	2c 5f       	subi	r18, 0xFC	; 252
    a360:	3f 4f       	sbci	r19, 0xFF	; 255
    a362:	8d 81       	ldd	r24, Y+5	; 0x05
    a364:	9e 81       	ldd	r25, Y+6	; 0x06
    a366:	af 81       	ldd	r26, Y+7	; 0x07
    a368:	b8 85       	ldd	r27, Y+8	; 0x08
    a36a:	80 50       	subi	r24, 0x00	; 0
    a36c:	98 4f       	sbci	r25, 0xF8	; 248
    a36e:	af 4f       	sbci	r26, 0xFF	; 255
    a370:	bf 4f       	sbci	r27, 0xFF	; 255
    a372:	07 2e       	mov	r0, r23
    a374:	7c e0       	ldi	r23, 0x0C	; 12
    a376:	b5 95       	asr	r27
    a378:	a7 95       	ror	r26
    a37a:	97 95       	ror	r25
    a37c:	87 95       	ror	r24
    a37e:	7a 95       	dec	r23
    a380:	d1 f7       	brne	.-12     	; 0xa376 <eSKalmanResVarEst+0x2da>
    a382:	70 2d       	mov	r23, r0
    a384:	f9 01       	movw	r30, r18
    a386:	80 83       	st	Z, r24
    a388:	91 83       	std	Z+1, r25	; 0x01
    a38a:	a2 83       	std	Z+2, r26	; 0x02
    a38c:	b3 83       	std	Z+3, r27	; 0x03
   >> INS_ATT_RES_AVR_Q);

   i_temp = pi_resVar[2]*(int32_t)INS_ATT_RES_FORGETTING_FACTOR;
    a38e:	89 81       	ldd	r24, Y+1	; 0x01
    a390:	9a 81       	ldd	r25, Y+2	; 0x02
    a392:	08 96       	adiw	r24, 0x08	; 8
    a394:	fc 01       	movw	r30, r24
    a396:	80 81       	ld	r24, Z
    a398:	91 81       	ldd	r25, Z+1	; 0x01
    a39a:	a2 81       	ldd	r26, Z+2	; 0x02
    a39c:	b3 81       	ldd	r27, Z+3	; 0x03
    a39e:	22 e3       	ldi	r18, 0x32	; 50
    a3a0:	3f e0       	ldi	r19, 0x0F	; 15
    a3a2:	40 e0       	ldi	r20, 0x00	; 0
    a3a4:	50 e0       	ldi	r21, 0x00	; 0
    a3a6:	bc 01       	movw	r22, r24
    a3a8:	cd 01       	movw	r24, r26
    a3aa:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a3ae:	dc 01       	movw	r26, r24
    a3b0:	cb 01       	movw	r24, r22
    a3b2:	8d 83       	std	Y+5, r24	; 0x05
    a3b4:	9e 83       	std	Y+6, r25	; 0x06
    a3b6:	af 83       	std	Y+7, r26	; 0x07
    a3b8:	b8 87       	std	Y+8, r27	; 0x08
   i_temp = i_temp + ((int32_t)ps_res[2] << (INS_ATT_RES_VAR_EXTRA_RES+1))*(4095 -
    a3ba:	8b 81       	ldd	r24, Y+3	; 0x03
    a3bc:	9c 81       	ldd	r25, Y+4	; 0x04
    a3be:	04 96       	adiw	r24, 0x04	; 4
    a3c0:	fc 01       	movw	r30, r24
    a3c2:	80 81       	ld	r24, Z
    a3c4:	91 81       	ldd	r25, Z+1	; 0x01
    a3c6:	aa 27       	eor	r26, r26
    a3c8:	97 fd       	sbrc	r25, 7
    a3ca:	a0 95       	com	r26
    a3cc:	ba 2f       	mov	r27, r26
    a3ce:	88 0f       	add	r24, r24
    a3d0:	99 1f       	adc	r25, r25
    a3d2:	aa 1f       	adc	r26, r26
    a3d4:	bb 1f       	adc	r27, r27
    a3d6:	88 0f       	add	r24, r24
    a3d8:	99 1f       	adc	r25, r25
    a3da:	aa 1f       	adc	r26, r26
    a3dc:	bb 1f       	adc	r27, r27
    a3de:	88 0f       	add	r24, r24
    a3e0:	99 1f       	adc	r25, r25
    a3e2:	aa 1f       	adc	r26, r26
    a3e4:	bb 1f       	adc	r27, r27
    a3e6:	88 0f       	add	r24, r24
    a3e8:	99 1f       	adc	r25, r25
    a3ea:	aa 1f       	adc	r26, r26
    a3ec:	bb 1f       	adc	r27, r27
    a3ee:	88 0f       	add	r24, r24
    a3f0:	99 1f       	adc	r25, r25
    a3f2:	aa 1f       	adc	r26, r26
    a3f4:	bb 1f       	adc	r27, r27
    a3f6:	2d ec       	ldi	r18, 0xCD	; 205
    a3f8:	30 e0       	ldi	r19, 0x00	; 0
    a3fa:	40 e0       	ldi	r20, 0x00	; 0
    a3fc:	50 e0       	ldi	r21, 0x00	; 0
    a3fe:	bc 01       	movw	r22, r24
    a400:	cd 01       	movw	r24, r26
    a402:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a406:	dc 01       	movw	r26, r24
    a408:	cb 01       	movw	r24, r22
    a40a:	2d 81       	ldd	r18, Y+5	; 0x05
    a40c:	3e 81       	ldd	r19, Y+6	; 0x06
    a40e:	4f 81       	ldd	r20, Y+7	; 0x07
    a410:	58 85       	ldd	r21, Y+8	; 0x08
    a412:	82 0f       	add	r24, r18
    a414:	93 1f       	adc	r25, r19
    a416:	a4 1f       	adc	r26, r20
    a418:	b5 1f       	adc	r27, r21
    a41a:	8d 83       	std	Y+5, r24	; 0x05
    a41c:	9e 83       	std	Y+6, r25	; 0x06
    a41e:	af 83       	std	Y+7, r26	; 0x07
    a420:	b8 87       	std	Y+8, r27	; 0x08
   INS_ATT_RES_FORGETTING_FACTOR);
   pi_resVar[2] = (int32_t)((i_temp + ((int32_t)1 << (INS_ATT_RES_AVR_Q - 1)))
    a422:	89 81       	ldd	r24, Y+1	; 0x01
    a424:	9a 81       	ldd	r25, Y+2	; 0x02
    a426:	9c 01       	movw	r18, r24
    a428:	28 5f       	subi	r18, 0xF8	; 248
    a42a:	3f 4f       	sbci	r19, 0xFF	; 255
    a42c:	8d 81       	ldd	r24, Y+5	; 0x05
    a42e:	9e 81       	ldd	r25, Y+6	; 0x06
    a430:	af 81       	ldd	r26, Y+7	; 0x07
    a432:	b8 85       	ldd	r27, Y+8	; 0x08
    a434:	80 50       	subi	r24, 0x00	; 0
    a436:	98 4f       	sbci	r25, 0xF8	; 248
    a438:	af 4f       	sbci	r26, 0xFF	; 255
    a43a:	bf 4f       	sbci	r27, 0xFF	; 255
    a43c:	07 2e       	mov	r0, r23
    a43e:	7c e0       	ldi	r23, 0x0C	; 12
    a440:	b5 95       	asr	r27
    a442:	a7 95       	ror	r26
    a444:	97 95       	ror	r25
    a446:	87 95       	ror	r24
    a448:	7a 95       	dec	r23
    a44a:	d1 f7       	brne	.-12     	; 0xa440 <eSKalmanResVarEst+0x3a4>
    a44c:	70 2d       	mov	r23, r0
    a44e:	f9 01       	movw	r30, r18
    a450:	80 83       	st	Z, r24
    a452:	91 83       	std	Z+1, r25	; 0x01
    a454:	a2 83       	std	Z+2, r26	; 0x02
    a456:	b3 83       	std	Z+3, r27	; 0x03
   >> INS_ATT_RES_AVR_Q);

}/*End eSKalmanResVarEst*/
    a458:	66 96       	adiw	r28, 0x16	; 22
    a45a:	cd bf       	out	0x3d, r28	; 61
    a45c:	de bf       	out	0x3e, r29	; 62
    a45e:	df 91       	pop	r29
    a460:	cf 91       	pop	r28
    a462:	1f 91       	pop	r17
    a464:	0f 91       	pop	r16
    a466:	08 95       	ret

0000a468 <eSKalmanFilterInit>:
   /*-------------------------------------------------------------------------*
    * Initialize the error covariance 9x9 matrix to all zeros except for the
    * diagonals--this will help the Kalman lock faster by letting it know that
    * we are uncertain about the state of the system.
    *-------------------------------------------------------------------------*/
   memset( (void *)gt_insDev.as_P, 0, sizeof( gt_insDev.as_P));
    a468:	22 ea       	ldi	r18, 0xA2	; 162
    a46a:	8f e3       	ldi	r24, 0x3F	; 63
    a46c:	9a e2       	ldi	r25, 0x2A	; 42
    a46e:	fc 01       	movw	r30, r24
    a470:	32 2f       	mov	r19, r18
    a472:	11 92       	st	Z+, r1
    a474:	3a 95       	dec	r19
    a476:	e9 f7       	brne	.-6      	; 0xa472 <eSKalmanFilterInit+0xa>

}/*End eSKalmanFilterInit*/
    a478:	08 95       	ret

0000a47a <eSKalmanUpdateSystemNoise>:

static inline void eSKalmanUpdateSystemNoise( int16_t *ps_Q,
                                              int16_t s_dt)
{
    a47a:	0f 93       	push	r16
    a47c:	1f 93       	push	r17
    a47e:	cf 93       	push	r28
    a480:	df 93       	push	r29
    a482:	cd b7       	in	r28, 0x3d	; 61
    a484:	de b7       	in	r29, 0x3e	; 62
    a486:	64 97       	sbiw	r28, 0x14	; 20
    a488:	cd bf       	out	0x3d, r28	; 61
    a48a:	de bf       	out	0x3e, r29	; 62
    a48c:	89 8b       	std	Y+17, r24	; 0x11
    a48e:	9a 8b       	std	Y+18, r25	; 0x12
    a490:	6b 8b       	std	Y+19, r22	; 0x13
    a492:	7c 8b       	std	Y+20, r23	; 0x14
   int16_t *ps_res = &gt_insDev.as_res[0];
    a494:	8d ee       	ldi	r24, 0xED	; 237
    a496:	9a e2       	ldi	r25, 0x2A	; 42
    a498:	89 83       	std	Y+1, r24	; 0x01
    a49a:	9a 83       	std	Y+2, r25	; 0x02
    * This value represents the random walk error on the gyro bias. The
    * nominal value according to the ITG-3200 states that there is .38 Hz/s of
    * error on average. In order to account for quantization errors, double
    * this amount
    *-------------------------------------------------------------------------*/
   int16_t s_nomQ = utl_mult16x16_16( 213, s_dt, 15); /*(.38*pi/180)*dt rad*/
    a49c:	2b 89       	ldd	r18, Y+19	; 0x13
    a49e:	3c 89       	ldd	r19, Y+20	; 0x14
    a4a0:	85 ed       	ldi	r24, 0xD5	; 213
    a4a2:	90 e0       	ldi	r25, 0x00	; 0
    a4a4:	b9 01       	movw	r22, r18
    a4a6:	4f e0       	ldi	r20, 0x0F	; 15
    a4a8:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a4ac:	8b 83       	std	Y+3, r24	; 0x03
    a4ae:	9c 83       	std	Y+4, r25	; 0x04
    * Update attitude system (process) noise. This step corrects for Kalman
    * tracking errors by increasing the roll, pitch and yaw process noise
    * whenever a large error in DCM estimated attitude (relative to the raw
    * attitude) has been detected.
    *-------------------------------------------------------------------------*/
   if( gt_insDev.b_rollMeasError == true)
    a4b0:	80 91 f4 2a 	lds	r24, 0x2AF4
    a4b4:	88 23       	and	r24, r24
    a4b6:	41 f0       	breq	.+16     	; 0xa4c8 <eSKalmanUpdateSystemNoise+0x4e>
      ps_Q[0] = 1629;
    a4b8:	89 89       	ldd	r24, Y+17	; 0x11
    a4ba:	9a 89       	ldd	r25, Y+18	; 0x12
    a4bc:	2d e5       	ldi	r18, 0x5D	; 93
    a4be:	36 e0       	ldi	r19, 0x06	; 6
    a4c0:	fc 01       	movw	r30, r24
    a4c2:	20 83       	st	Z, r18
    a4c4:	31 83       	std	Z+1, r19	; 0x01
    a4c6:	07 c0       	rjmp	.+14     	; 0xa4d6 <eSKalmanUpdateSystemNoise+0x5c>
   else
      ps_Q[0] = s_nomQ; /*(.38*pi/180)*dt rad*/
    a4c8:	89 89       	ldd	r24, Y+17	; 0x11
    a4ca:	9a 89       	ldd	r25, Y+18	; 0x12
    a4cc:	2b 81       	ldd	r18, Y+3	; 0x03
    a4ce:	3c 81       	ldd	r19, Y+4	; 0x04
    a4d0:	fc 01       	movw	r30, r24
    a4d2:	20 83       	st	Z, r18
    a4d4:	31 83       	std	Z+1, r19	; 0x01

   if( gt_insDev.b_pitchMeasError == true)
    a4d6:	80 91 f5 2a 	lds	r24, 0x2AF5
    a4da:	88 23       	and	r24, r24
    a4dc:	49 f0       	breq	.+18     	; 0xa4f0 <eSKalmanUpdateSystemNoise+0x76>
      ps_Q[1] = 1629;
    a4de:	89 89       	ldd	r24, Y+17	; 0x11
    a4e0:	9a 89       	ldd	r25, Y+18	; 0x12
    a4e2:	02 96       	adiw	r24, 0x02	; 2
    a4e4:	2d e5       	ldi	r18, 0x5D	; 93
    a4e6:	36 e0       	ldi	r19, 0x06	; 6
    a4e8:	fc 01       	movw	r30, r24
    a4ea:	20 83       	st	Z, r18
    a4ec:	31 83       	std	Z+1, r19	; 0x01
    a4ee:	08 c0       	rjmp	.+16     	; 0xa500 <eSKalmanUpdateSystemNoise+0x86>
   else
      ps_Q[1] = s_nomQ; /*(.38*pi/180)*dt rad*/
    a4f0:	89 89       	ldd	r24, Y+17	; 0x11
    a4f2:	9a 89       	ldd	r25, Y+18	; 0x12
    a4f4:	02 96       	adiw	r24, 0x02	; 2
    a4f6:	2b 81       	ldd	r18, Y+3	; 0x03
    a4f8:	3c 81       	ldd	r19, Y+4	; 0x04
    a4fa:	fc 01       	movw	r30, r24
    a4fc:	20 83       	st	Z, r18
    a4fe:	31 83       	std	Z+1, r19	; 0x01

   if( gt_insDev.b_yawMeasError == true)
    a500:	80 91 f6 2a 	lds	r24, 0x2AF6
    a504:	88 23       	and	r24, r24
    a506:	49 f0       	breq	.+18     	; 0xa51a <eSKalmanUpdateSystemNoise+0xa0>
      ps_Q[2] = 1629;
    a508:	89 89       	ldd	r24, Y+17	; 0x11
    a50a:	9a 89       	ldd	r25, Y+18	; 0x12
    a50c:	04 96       	adiw	r24, 0x04	; 4
    a50e:	2d e5       	ldi	r18, 0x5D	; 93
    a510:	36 e0       	ldi	r19, 0x06	; 6
    a512:	fc 01       	movw	r30, r24
    a514:	20 83       	st	Z, r18
    a516:	31 83       	std	Z+1, r19	; 0x01
    a518:	08 c0       	rjmp	.+16     	; 0xa52a <eSKalmanUpdateSystemNoise+0xb0>
   else
      ps_Q[2] = s_nomQ; /*(.38*pi/180)*dt rad*/
    a51a:	89 89       	ldd	r24, Y+17	; 0x11
    a51c:	9a 89       	ldd	r25, Y+18	; 0x12
    a51e:	04 96       	adiw	r24, 0x04	; 4
    a520:	2b 81       	ldd	r18, Y+3	; 0x03
    a522:	3c 81       	ldd	r19, Y+4	; 0x04
    a524:	fc 01       	movw	r30, r24
    a526:	20 83       	st	Z, r18
    a528:	31 83       	std	Z+1, r19	; 0x01

   /*----------------------------------------------------------------------*
    * Update gyro bias system (process) noise. The value is set to 2.5% of the
    * current bias estimate. See section 4.4.1 of [1]
    *----------------------------------------------------------------------*/
   ps_Q[3] = (int16_t)utl_abs32_32( utl_mult16x16_16( utl_mult16x16_16(
    a52a:	89 89       	ldd	r24, Y+17	; 0x11
    a52c:	9a 89       	ldd	r25, Y+18	; 0x12
    a52e:	8c 01       	movw	r16, r24
    a530:	0a 5f       	subi	r16, 0xFA	; 250
    a532:	1f 4f       	sbci	r17, 0xFF	; 255
    a534:	80 91 33 24 	lds	r24, 0x2433
    a538:	90 91 34 24 	lds	r25, 0x2434
    a53c:	63 e3       	ldi	r22, 0x33	; 51
    a53e:	73 e0       	ldi	r23, 0x03	; 3
    a540:	4f e0       	ldi	r20, 0x0F	; 15
    a542:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a546:	2b 89       	ldd	r18, Y+19	; 0x13
    a548:	3c 89       	ldd	r19, Y+20	; 0x14
    a54a:	b9 01       	movw	r22, r18
    a54c:	4f e0       	ldi	r20, 0x0F	; 15
    a54e:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a552:	aa 27       	eor	r26, r26
    a554:	97 fd       	sbrc	r25, 7
    a556:	a0 95       	com	r26
    a558:	ba 2f       	mov	r27, r26
    a55a:	8d 83       	std	Y+5, r24	; 0x05
    a55c:	9e 83       	std	Y+6, r25	; 0x06
    a55e:	af 83       	std	Y+7, r26	; 0x07
    a560:	b8 87       	std	Y+8, r27	; 0x08
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a562:	8d 81       	ldd	r24, Y+5	; 0x05
    a564:	9e 81       	ldd	r25, Y+6	; 0x06
    a566:	af 81       	ldd	r26, Y+7	; 0x07
    a568:	b8 85       	ldd	r27, Y+8	; 0x08
    a56a:	bb 23       	and	r27, r27
    a56c:	7c f4       	brge	.+30     	; 0xa58c <eSKalmanUpdateSystemNoise+0x112>
         i_y = -i_y;
    a56e:	8d 81       	ldd	r24, Y+5	; 0x05
    a570:	9e 81       	ldd	r25, Y+6	; 0x06
    a572:	af 81       	ldd	r26, Y+7	; 0x07
    a574:	b8 85       	ldd	r27, Y+8	; 0x08
    a576:	b0 95       	com	r27
    a578:	a0 95       	com	r26
    a57a:	90 95       	com	r25
    a57c:	81 95       	neg	r24
    a57e:	9f 4f       	sbci	r25, 0xFF	; 255
    a580:	af 4f       	sbci	r26, 0xFF	; 255
    a582:	bf 4f       	sbci	r27, 0xFF	; 255
    a584:	8d 83       	std	Y+5, r24	; 0x05
    a586:	9e 83       	std	Y+6, r25	; 0x06
    a588:	af 83       	std	Y+7, r26	; 0x07
    a58a:	b8 87       	std	Y+8, r27	; 0x08

      return i_y;
    a58c:	8d 81       	ldd	r24, Y+5	; 0x05
    a58e:	9e 81       	ldd	r25, Y+6	; 0x06
    a590:	af 81       	ldd	r26, Y+7	; 0x07
    a592:	b8 85       	ldd	r27, Y+8	; 0x08
    a594:	f8 01       	movw	r30, r16
    a596:	80 83       	st	Z, r24
    a598:	91 83       	std	Z+1, r25	; 0x01
   gt_insDev.t_gyro.as_bias[0], 819, 15), s_dt, 15));
   if( ps_Q[3] < 5)
    a59a:	89 89       	ldd	r24, Y+17	; 0x11
    a59c:	9a 89       	ldd	r25, Y+18	; 0x12
    a59e:	06 96       	adiw	r24, 0x06	; 6
    a5a0:	fc 01       	movw	r30, r24
    a5a2:	80 81       	ld	r24, Z
    a5a4:	91 81       	ldd	r25, Z+1	; 0x01
    a5a6:	85 30       	cpi	r24, 0x05	; 5
    a5a8:	91 05       	cpc	r25, r1
    a5aa:	44 f4       	brge	.+16     	; 0xa5bc <eSKalmanUpdateSystemNoise+0x142>
      ps_Q[3] = 5;
    a5ac:	89 89       	ldd	r24, Y+17	; 0x11
    a5ae:	9a 89       	ldd	r25, Y+18	; 0x12
    a5b0:	06 96       	adiw	r24, 0x06	; 6
    a5b2:	25 e0       	ldi	r18, 0x05	; 5
    a5b4:	30 e0       	ldi	r19, 0x00	; 0
    a5b6:	fc 01       	movw	r30, r24
    a5b8:	20 83       	st	Z, r18
    a5ba:	31 83       	std	Z+1, r19	; 0x01
   ps_Q[4] = (int16_t)utl_abs32_32( utl_mult16x16_16( utl_mult16x16_16(
    a5bc:	89 89       	ldd	r24, Y+17	; 0x11
    a5be:	9a 89       	ldd	r25, Y+18	; 0x12
    a5c0:	8c 01       	movw	r16, r24
    a5c2:	08 5f       	subi	r16, 0xF8	; 248
    a5c4:	1f 4f       	sbci	r17, 0xFF	; 255
    a5c6:	80 91 35 24 	lds	r24, 0x2435
    a5ca:	90 91 36 24 	lds	r25, 0x2436
    a5ce:	63 e3       	ldi	r22, 0x33	; 51
    a5d0:	73 e0       	ldi	r23, 0x03	; 3
    a5d2:	4f e0       	ldi	r20, 0x0F	; 15
    a5d4:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a5d8:	2b 89       	ldd	r18, Y+19	; 0x13
    a5da:	3c 89       	ldd	r19, Y+20	; 0x14
    a5dc:	b9 01       	movw	r22, r18
    a5de:	4f e0       	ldi	r20, 0x0F	; 15
    a5e0:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a5e4:	aa 27       	eor	r26, r26
    a5e6:	97 fd       	sbrc	r25, 7
    a5e8:	a0 95       	com	r26
    a5ea:	ba 2f       	mov	r27, r26
    a5ec:	89 87       	std	Y+9, r24	; 0x09
    a5ee:	9a 87       	std	Y+10, r25	; 0x0a
    a5f0:	ab 87       	std	Y+11, r26	; 0x0b
    a5f2:	bc 87       	std	Y+12, r27	; 0x0c
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a5f4:	89 85       	ldd	r24, Y+9	; 0x09
    a5f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a5f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    a5fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    a5fc:	bb 23       	and	r27, r27
    a5fe:	7c f4       	brge	.+30     	; 0xa61e <eSKalmanUpdateSystemNoise+0x1a4>
         i_y = -i_y;
    a600:	89 85       	ldd	r24, Y+9	; 0x09
    a602:	9a 85       	ldd	r25, Y+10	; 0x0a
    a604:	ab 85       	ldd	r26, Y+11	; 0x0b
    a606:	bc 85       	ldd	r27, Y+12	; 0x0c
    a608:	b0 95       	com	r27
    a60a:	a0 95       	com	r26
    a60c:	90 95       	com	r25
    a60e:	81 95       	neg	r24
    a610:	9f 4f       	sbci	r25, 0xFF	; 255
    a612:	af 4f       	sbci	r26, 0xFF	; 255
    a614:	bf 4f       	sbci	r27, 0xFF	; 255
    a616:	89 87       	std	Y+9, r24	; 0x09
    a618:	9a 87       	std	Y+10, r25	; 0x0a
    a61a:	ab 87       	std	Y+11, r26	; 0x0b
    a61c:	bc 87       	std	Y+12, r27	; 0x0c

      return i_y;
    a61e:	89 85       	ldd	r24, Y+9	; 0x09
    a620:	9a 85       	ldd	r25, Y+10	; 0x0a
    a622:	ab 85       	ldd	r26, Y+11	; 0x0b
    a624:	bc 85       	ldd	r27, Y+12	; 0x0c
    a626:	f8 01       	movw	r30, r16
    a628:	80 83       	st	Z, r24
    a62a:	91 83       	std	Z+1, r25	; 0x01
   gt_insDev.t_gyro.as_bias[1], 819, 15), s_dt, 15));
   if( ps_Q[4] < 5)
    a62c:	89 89       	ldd	r24, Y+17	; 0x11
    a62e:	9a 89       	ldd	r25, Y+18	; 0x12
    a630:	08 96       	adiw	r24, 0x08	; 8
    a632:	fc 01       	movw	r30, r24
    a634:	80 81       	ld	r24, Z
    a636:	91 81       	ldd	r25, Z+1	; 0x01
    a638:	85 30       	cpi	r24, 0x05	; 5
    a63a:	91 05       	cpc	r25, r1
    a63c:	44 f4       	brge	.+16     	; 0xa64e <eSKalmanUpdateSystemNoise+0x1d4>
      ps_Q[4] = 5;
    a63e:	89 89       	ldd	r24, Y+17	; 0x11
    a640:	9a 89       	ldd	r25, Y+18	; 0x12
    a642:	08 96       	adiw	r24, 0x08	; 8
    a644:	25 e0       	ldi	r18, 0x05	; 5
    a646:	30 e0       	ldi	r19, 0x00	; 0
    a648:	fc 01       	movw	r30, r24
    a64a:	20 83       	st	Z, r18
    a64c:	31 83       	std	Z+1, r19	; 0x01
   ps_Q[5] = (int16_t)utl_abs32_32( utl_mult16x16_16( utl_mult16x16_16(
    a64e:	89 89       	ldd	r24, Y+17	; 0x11
    a650:	9a 89       	ldd	r25, Y+18	; 0x12
    a652:	8c 01       	movw	r16, r24
    a654:	06 5f       	subi	r16, 0xF6	; 246
    a656:	1f 4f       	sbci	r17, 0xFF	; 255
    a658:	80 91 37 24 	lds	r24, 0x2437
    a65c:	90 91 38 24 	lds	r25, 0x2438
    a660:	63 e3       	ldi	r22, 0x33	; 51
    a662:	73 e0       	ldi	r23, 0x03	; 3
    a664:	4f e0       	ldi	r20, 0x0F	; 15
    a666:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a66a:	2b 89       	ldd	r18, Y+19	; 0x13
    a66c:	3c 89       	ldd	r19, Y+20	; 0x14
    a66e:	b9 01       	movw	r22, r18
    a670:	4f e0       	ldi	r20, 0x0F	; 15
    a672:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a676:	aa 27       	eor	r26, r26
    a678:	97 fd       	sbrc	r25, 7
    a67a:	a0 95       	com	r26
    a67c:	ba 2f       	mov	r27, r26
    a67e:	8d 87       	std	Y+13, r24	; 0x0d
    a680:	9e 87       	std	Y+14, r25	; 0x0e
    a682:	af 87       	std	Y+15, r26	; 0x0f
    a684:	b8 8b       	std	Y+16, r27	; 0x10
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    a686:	8d 85       	ldd	r24, Y+13	; 0x0d
    a688:	9e 85       	ldd	r25, Y+14	; 0x0e
    a68a:	af 85       	ldd	r26, Y+15	; 0x0f
    a68c:	b8 89       	ldd	r27, Y+16	; 0x10
    a68e:	bb 23       	and	r27, r27
    a690:	7c f4       	brge	.+30     	; 0xa6b0 <eSKalmanUpdateSystemNoise+0x236>
         i_y = -i_y;
    a692:	8d 85       	ldd	r24, Y+13	; 0x0d
    a694:	9e 85       	ldd	r25, Y+14	; 0x0e
    a696:	af 85       	ldd	r26, Y+15	; 0x0f
    a698:	b8 89       	ldd	r27, Y+16	; 0x10
    a69a:	b0 95       	com	r27
    a69c:	a0 95       	com	r26
    a69e:	90 95       	com	r25
    a6a0:	81 95       	neg	r24
    a6a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a6a4:	af 4f       	sbci	r26, 0xFF	; 255
    a6a6:	bf 4f       	sbci	r27, 0xFF	; 255
    a6a8:	8d 87       	std	Y+13, r24	; 0x0d
    a6aa:	9e 87       	std	Y+14, r25	; 0x0e
    a6ac:	af 87       	std	Y+15, r26	; 0x0f
    a6ae:	b8 8b       	std	Y+16, r27	; 0x10

      return i_y;
    a6b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    a6b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    a6b4:	af 85       	ldd	r26, Y+15	; 0x0f
    a6b6:	b8 89       	ldd	r27, Y+16	; 0x10
    a6b8:	f8 01       	movw	r30, r16
    a6ba:	80 83       	st	Z, r24
    a6bc:	91 83       	std	Z+1, r25	; 0x01
   gt_insDev.t_gyro.as_bias[2], 819, 15), s_dt, 15));
   if( ps_Q[5] < 5)
    a6be:	89 89       	ldd	r24, Y+17	; 0x11
    a6c0:	9a 89       	ldd	r25, Y+18	; 0x12
    a6c2:	0a 96       	adiw	r24, 0x0a	; 10
    a6c4:	fc 01       	movw	r30, r24
    a6c6:	80 81       	ld	r24, Z
    a6c8:	91 81       	ldd	r25, Z+1	; 0x01
    a6ca:	85 30       	cpi	r24, 0x05	; 5
    a6cc:	91 05       	cpc	r25, r1
    a6ce:	44 f4       	brge	.+16     	; 0xa6e0 <eSKalmanUpdateSystemNoise+0x266>
      ps_Q[5] = 5;
    a6d0:	89 89       	ldd	r24, Y+17	; 0x11
    a6d2:	9a 89       	ldd	r25, Y+18	; 0x12
    a6d4:	0a 96       	adiw	r24, 0x0a	; 10
    a6d6:	25 e0       	ldi	r18, 0x05	; 5
    a6d8:	30 e0       	ldi	r19, 0x00	; 0
    a6da:	fc 01       	movw	r30, r24
    a6dc:	20 83       	st	Z, r18
    a6de:	31 83       	std	Z+1, r19	; 0x01

   /*------------------------------------------------------------------------*
    * gt_insDev.t_gyro.as_scale has a different Q factor there for we need
    * to make sure that as_QgScale is scaled so that it is Q15.
    *------------------------------------------------------------------------*/
   ps_Q[6] = 5;
    a6e0:	89 89       	ldd	r24, Y+17	; 0x11
    a6e2:	9a 89       	ldd	r25, Y+18	; 0x12
    a6e4:	0c 96       	adiw	r24, 0x0c	; 12
    a6e6:	25 e0       	ldi	r18, 0x05	; 5
    a6e8:	30 e0       	ldi	r19, 0x00	; 0
    a6ea:	fc 01       	movw	r30, r24
    a6ec:	20 83       	st	Z, r18
    a6ee:	31 83       	std	Z+1, r19	; 0x01
   ps_Q[7] = 5;
    a6f0:	89 89       	ldd	r24, Y+17	; 0x11
    a6f2:	9a 89       	ldd	r25, Y+18	; 0x12
    a6f4:	0e 96       	adiw	r24, 0x0e	; 14
    a6f6:	25 e0       	ldi	r18, 0x05	; 5
    a6f8:	30 e0       	ldi	r19, 0x00	; 0
    a6fa:	fc 01       	movw	r30, r24
    a6fc:	20 83       	st	Z, r18
    a6fe:	31 83       	std	Z+1, r19	; 0x01
   ps_Q[8] = 5;
    a700:	89 89       	ldd	r24, Y+17	; 0x11
    a702:	9a 89       	ldd	r25, Y+18	; 0x12
    a704:	40 96       	adiw	r24, 0x10	; 16
    a706:	25 e0       	ldi	r18, 0x05	; 5
    a708:	30 e0       	ldi	r19, 0x00	; 0
    a70a:	fc 01       	movw	r30, r24
    a70c:	20 83       	st	Z, r18
    a70e:	31 83       	std	Z+1, r19	; 0x01

}/*End eSKalmanUpdateSystemNoise*/
    a710:	64 96       	adiw	r28, 0x14	; 20
    a712:	cd bf       	out	0x3d, r28	; 61
    a714:	de bf       	out	0x3e, r29	; 62
    a716:	df 91       	pop	r29
    a718:	cf 91       	pop	r28
    a71a:	1f 91       	pop	r17
    a71c:	0f 91       	pop	r16
    a71e:	08 95       	ret

0000a720 <eSKalmanFilterPredict>:

static inline void eSKalmanFilterPredict( int32_t *pi_gyr,
                                          int16_t s_dt)
{
    a720:	8f 92       	push	r8
    a722:	af 92       	push	r10
    a724:	cf 92       	push	r12
    a726:	df 92       	push	r13
    a728:	ef 92       	push	r14
    a72a:	0f 93       	push	r16
    a72c:	cf 93       	push	r28
    a72e:	df 93       	push	r29
    a730:	cd b7       	in	r28, 0x3d	; 61
    a732:	de b7       	in	r29, 0x3e	; 62
    a734:	c1 50       	subi	r28, 0x01	; 1
    a736:	d2 40       	sbci	r29, 0x02	; 2
    a738:	cd bf       	out	0x3d, r28	; 61
    a73a:	de bf       	out	0x3e, r29	; 62
    a73c:	9e 01       	movw	r18, r28
    a73e:	22 50       	subi	r18, 0x02	; 2
    a740:	3e 4f       	sbci	r19, 0xFE	; 254
    a742:	f9 01       	movw	r30, r18
    a744:	80 83       	st	Z, r24
    a746:	91 83       	std	Z+1, r25	; 0x01
    a748:	ce 01       	movw	r24, r28
    a74a:	80 50       	subi	r24, 0x00	; 0
    a74c:	9e 4f       	sbci	r25, 0xFE	; 254
    a74e:	fc 01       	movw	r30, r24
    a750:	60 83       	st	Z, r22
    a752:	71 83       	std	Z+1, r23	; 0x01
   int16_t as_tmp[9][9];
   int16_t as_tmp2[9][9];
   int8_t c_index;
   int32_t i_temp;

   eSKalmanUpdateSystemNoise( as_Q,
    a754:	ce 01       	movw	r24, r28
    a756:	06 96       	adiw	r24, 0x06	; 6
    a758:	9e 01       	movw	r18, r28
    a75a:	20 50       	subi	r18, 0x00	; 0
    a75c:	3e 4f       	sbci	r19, 0xFE	; 254
    a75e:	f9 01       	movw	r30, r18
    a760:	20 81       	ld	r18, Z
    a762:	31 81       	ldd	r19, Z+1	; 0x01
    a764:	b9 01       	movw	r22, r18
    a766:	0e 94 3d 52 	call	0xa47a	; 0xa47a <eSKalmanUpdateSystemNoise>
    * [2] eq 10 with the rotation rate removed and attitude propagation
    * term negated
    * [3] Section 10.5.3 with xa removed Fg = 0, gyro scale rate added
    * and attitude propagation term negated.
    *------------------------------------------------------------------------*/
   memset( (void *)as_phi, 0, sizeof( as_phi));
    a76a:	ce 01       	movw	r24, r28
    a76c:	48 96       	adiw	r24, 0x18	; 24
    a76e:	22 ea       	ldi	r18, 0xA2	; 162
    a770:	fc 01       	movw	r30, r24
    a772:	32 2f       	mov	r19, r18
    a774:	11 92       	st	Z+, r1
    a776:	3a 95       	dec	r19
    a778:	e9 f7       	brne	.-6      	; 0xa774 <eSKalmanFilterPredict+0x54>

   as_phi[0][0] = 32767;
    a77a:	8f ef       	ldi	r24, 0xFF	; 255
    a77c:	9f e7       	ldi	r25, 0x7F	; 127
    a77e:	88 8f       	std	Y+24, r24	; 0x18
    a780:	99 8f       	std	Y+25, r25	; 0x19
   as_phi[1][1] = 32767;
    a782:	8f ef       	ldi	r24, 0xFF	; 255
    a784:	9f e7       	ldi	r25, 0x7F	; 127
    a786:	8c a7       	lds	r24, 0x7c
    a788:	9d a7       	lds	r25, 0x7d
   as_phi[2][2] = 32767;
    a78a:	ce 01       	movw	r24, r28
    a78c:	80 5c       	subi	r24, 0xC0	; 192
    a78e:	9f 4f       	sbci	r25, 0xFF	; 255
    a790:	2f ef       	ldi	r18, 0xFF	; 255
    a792:	3f e7       	ldi	r19, 0x7F	; 127
    a794:	fc 01       	movw	r30, r24
    a796:	20 83       	st	Z, r18
    a798:	31 83       	std	Z+1, r19	; 0x01
   as_phi[3][3] = 32767;
    a79a:	ce 01       	movw	r24, r28
    a79c:	8c 5a       	subi	r24, 0xAC	; 172
    a79e:	9f 4f       	sbci	r25, 0xFF	; 255
    a7a0:	2f ef       	ldi	r18, 0xFF	; 255
    a7a2:	3f e7       	ldi	r19, 0x7F	; 127
    a7a4:	fc 01       	movw	r30, r24
    a7a6:	20 83       	st	Z, r18
    a7a8:	31 83       	std	Z+1, r19	; 0x01
   as_phi[4][4] = 32767;
    a7aa:	ce 01       	movw	r24, r28
    a7ac:	88 59       	subi	r24, 0x98	; 152
    a7ae:	9f 4f       	sbci	r25, 0xFF	; 255
    a7b0:	2f ef       	ldi	r18, 0xFF	; 255
    a7b2:	3f e7       	ldi	r19, 0x7F	; 127
    a7b4:	fc 01       	movw	r30, r24
    a7b6:	20 83       	st	Z, r18
    a7b8:	31 83       	std	Z+1, r19	; 0x01
   as_phi[5][5] = 32767;
    a7ba:	ce 01       	movw	r24, r28
    a7bc:	84 58       	subi	r24, 0x84	; 132
    a7be:	9f 4f       	sbci	r25, 0xFF	; 255
    a7c0:	2f ef       	ldi	r18, 0xFF	; 255
    a7c2:	3f e7       	ldi	r19, 0x7F	; 127
    a7c4:	fc 01       	movw	r30, r24
    a7c6:	20 83       	st	Z, r18
    a7c8:	31 83       	std	Z+1, r19	; 0x01
   as_phi[6][6] = 32767;
    a7ca:	ce 01       	movw	r24, r28
    a7cc:	80 57       	subi	r24, 0x70	; 112
    a7ce:	9f 4f       	sbci	r25, 0xFF	; 255
    a7d0:	2f ef       	ldi	r18, 0xFF	; 255
    a7d2:	3f e7       	ldi	r19, 0x7F	; 127
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	20 83       	st	Z, r18
    a7d8:	31 83       	std	Z+1, r19	; 0x01
   as_phi[7][7] = 32767;
    a7da:	ce 01       	movw	r24, r28
    a7dc:	8c 55       	subi	r24, 0x5C	; 92
    a7de:	9f 4f       	sbci	r25, 0xFF	; 255
    a7e0:	2f ef       	ldi	r18, 0xFF	; 255
    a7e2:	3f e7       	ldi	r19, 0x7F	; 127
    a7e4:	fc 01       	movw	r30, r24
    a7e6:	20 83       	st	Z, r18
    a7e8:	31 83       	std	Z+1, r19	; 0x01
   as_phi[8][8] = 32767;
    a7ea:	ce 01       	movw	r24, r28
    a7ec:	88 54       	subi	r24, 0x48	; 72
    a7ee:	9f 4f       	sbci	r25, 0xFF	; 255
    a7f0:	2f ef       	ldi	r18, 0xFF	; 255
    a7f2:	3f e7       	ldi	r19, 0x7F	; 127
    a7f4:	fc 01       	movw	r30, r24
    a7f6:	20 83       	st	Z, r18
    a7f8:	31 83       	std	Z+1, r19	; 0x01

   as_phi[0][3] = utl_mult16x16_16( gt_insDev.as_dcm[0][0], s_dt, 15);
    a7fa:	80 91 00 24 	lds	r24, 0x2400
    a7fe:	90 91 01 24 	lds	r25, 0x2401
    a802:	9e 01       	movw	r18, r28
    a804:	20 50       	subi	r18, 0x00	; 0
    a806:	3e 4f       	sbci	r19, 0xFE	; 254
    a808:	f9 01       	movw	r30, r18
    a80a:	20 81       	ld	r18, Z
    a80c:	31 81       	ldd	r19, Z+1	; 0x01
    a80e:	b9 01       	movw	r22, r18
    a810:	4f e0       	ldi	r20, 0x0F	; 15
    a812:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a816:	8e 8f       	std	Y+30, r24	; 0x1e
    a818:	9f 8f       	std	Y+31, r25	; 0x1f
   as_phi[0][4] = utl_mult16x16_16( gt_insDev.as_dcm[0][1], s_dt, 15);
    a81a:	80 91 02 24 	lds	r24, 0x2402
    a81e:	90 91 03 24 	lds	r25, 0x2403
    a822:	9e 01       	movw	r18, r28
    a824:	20 50       	subi	r18, 0x00	; 0
    a826:	3e 4f       	sbci	r19, 0xFE	; 254
    a828:	f9 01       	movw	r30, r18
    a82a:	20 81       	ld	r18, Z
    a82c:	31 81       	ldd	r19, Z+1	; 0x01
    a82e:	b9 01       	movw	r22, r18
    a830:	4f e0       	ldi	r20, 0x0F	; 15
    a832:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a836:	88 a3       	lds	r24, 0x58
    a838:	99 a3       	lds	r25, 0x59
   as_phi[0][5] = utl_mult16x16_16( gt_insDev.as_dcm[0][2], s_dt, 15);
    a83a:	80 91 04 24 	lds	r24, 0x2404
    a83e:	90 91 05 24 	lds	r25, 0x2405
    a842:	9e 01       	movw	r18, r28
    a844:	20 50       	subi	r18, 0x00	; 0
    a846:	3e 4f       	sbci	r19, 0xFE	; 254
    a848:	f9 01       	movw	r30, r18
    a84a:	20 81       	ld	r18, Z
    a84c:	31 81       	ldd	r19, Z+1	; 0x01
    a84e:	b9 01       	movw	r22, r18
    a850:	4f e0       	ldi	r20, 0x0F	; 15
    a852:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a856:	8a a3       	lds	r24, 0x5a
    a858:	9b a3       	lds	r25, 0x5b
   as_phi[1][3] = utl_mult16x16_16( gt_insDev.as_dcm[1][0], s_dt, 15);
    a85a:	80 91 06 24 	lds	r24, 0x2406
    a85e:	90 91 07 24 	lds	r25, 0x2407
    a862:	9e 01       	movw	r18, r28
    a864:	20 50       	subi	r18, 0x00	; 0
    a866:	3e 4f       	sbci	r19, 0xFE	; 254
    a868:	f9 01       	movw	r30, r18
    a86a:	20 81       	ld	r18, Z
    a86c:	31 81       	ldd	r19, Z+1	; 0x01
    a86e:	b9 01       	movw	r22, r18
    a870:	4f e0       	ldi	r20, 0x0F	; 15
    a872:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a876:	88 ab       	sts	0x58, r24
    a878:	99 ab       	sts	0x59, r25
   as_phi[1][4] = utl_mult16x16_16( gt_insDev.as_dcm[1][1], s_dt, 15);
    a87a:	80 91 08 24 	lds	r24, 0x2408
    a87e:	90 91 09 24 	lds	r25, 0x2409
    a882:	9e 01       	movw	r18, r28
    a884:	20 50       	subi	r18, 0x00	; 0
    a886:	3e 4f       	sbci	r19, 0xFE	; 254
    a888:	f9 01       	movw	r30, r18
    a88a:	20 81       	ld	r18, Z
    a88c:	31 81       	ldd	r19, Z+1	; 0x01
    a88e:	b9 01       	movw	r22, r18
    a890:	4f e0       	ldi	r20, 0x0F	; 15
    a892:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a896:	8a ab       	sts	0x5a, r24
    a898:	9b ab       	sts	0x5b, r25
   as_phi[1][5] = utl_mult16x16_16( gt_insDev.as_dcm[1][2], s_dt, 15);
    a89a:	80 91 0a 24 	lds	r24, 0x240A
    a89e:	90 91 0b 24 	lds	r25, 0x240B
    a8a2:	9e 01       	movw	r18, r28
    a8a4:	20 50       	subi	r18, 0x00	; 0
    a8a6:	3e 4f       	sbci	r19, 0xFE	; 254
    a8a8:	f9 01       	movw	r30, r18
    a8aa:	20 81       	ld	r18, Z
    a8ac:	31 81       	ldd	r19, Z+1	; 0x01
    a8ae:	b9 01       	movw	r22, r18
    a8b0:	4f e0       	ldi	r20, 0x0F	; 15
    a8b2:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a8b6:	8c ab       	sts	0x5c, r24
    a8b8:	9d ab       	sts	0x5d, r25
   as_phi[2][3] = utl_mult16x16_16( gt_insDev.as_dcm[2][0], s_dt, 15);
    a8ba:	80 91 0c 24 	lds	r24, 0x240C
    a8be:	90 91 0d 24 	lds	r25, 0x240D
    a8c2:	9e 01       	movw	r18, r28
    a8c4:	20 50       	subi	r18, 0x00	; 0
    a8c6:	3e 4f       	sbci	r19, 0xFE	; 254
    a8c8:	f9 01       	movw	r30, r18
    a8ca:	20 81       	ld	r18, Z
    a8cc:	31 81       	ldd	r19, Z+1	; 0x01
    a8ce:	b9 01       	movw	r22, r18
    a8d0:	4f e0       	ldi	r20, 0x0F	; 15
    a8d2:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a8d6:	9c 01       	movw	r18, r24
    a8d8:	ce 01       	movw	r24, r28
    a8da:	8e 5b       	subi	r24, 0xBE	; 190
    a8dc:	9f 4f       	sbci	r25, 0xFF	; 255
    a8de:	fc 01       	movw	r30, r24
    a8e0:	20 83       	st	Z, r18
    a8e2:	31 83       	std	Z+1, r19	; 0x01
   as_phi[2][4] = utl_mult16x16_16( gt_insDev.as_dcm[2][1], s_dt, 15);
    a8e4:	80 91 0e 24 	lds	r24, 0x240E
    a8e8:	90 91 0f 24 	lds	r25, 0x240F
    a8ec:	9e 01       	movw	r18, r28
    a8ee:	20 50       	subi	r18, 0x00	; 0
    a8f0:	3e 4f       	sbci	r19, 0xFE	; 254
    a8f2:	f9 01       	movw	r30, r18
    a8f4:	20 81       	ld	r18, Z
    a8f6:	31 81       	ldd	r19, Z+1	; 0x01
    a8f8:	b9 01       	movw	r22, r18
    a8fa:	4f e0       	ldi	r20, 0x0F	; 15
    a8fc:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a900:	9c 01       	movw	r18, r24
    a902:	ce 01       	movw	r24, r28
    a904:	8c 5b       	subi	r24, 0xBC	; 188
    a906:	9f 4f       	sbci	r25, 0xFF	; 255
    a908:	fc 01       	movw	r30, r24
    a90a:	20 83       	st	Z, r18
    a90c:	31 83       	std	Z+1, r19	; 0x01
   as_phi[2][5] = utl_mult16x16_16( gt_insDev.as_dcm[2][2], s_dt, 15);
    a90e:	80 91 10 24 	lds	r24, 0x2410
    a912:	90 91 11 24 	lds	r25, 0x2411
    a916:	9e 01       	movw	r18, r28
    a918:	20 50       	subi	r18, 0x00	; 0
    a91a:	3e 4f       	sbci	r19, 0xFE	; 254
    a91c:	f9 01       	movw	r30, r18
    a91e:	20 81       	ld	r18, Z
    a920:	31 81       	ldd	r19, Z+1	; 0x01
    a922:	b9 01       	movw	r22, r18
    a924:	4f e0       	ldi	r20, 0x0F	; 15
    a926:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    a92a:	9c 01       	movw	r18, r24
    a92c:	ce 01       	movw	r24, r28
    a92e:	8a 5b       	subi	r24, 0xBA	; 186
    a930:	9f 4f       	sbci	r25, 0xFF	; 255
    a932:	fc 01       	movw	r30, r24
    a934:	20 83       	st	Z, r18
    a936:	31 83       	std	Z+1, r19	; 0x01

   as_phi[0][6] = -(int16_t)(((int32_t)as_phi[0][3]*(int32_t)pi_gyr[0]) >> 15);
    a938:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a93a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    a93c:	aa 27       	eor	r26, r26
    a93e:	97 fd       	sbrc	r25, 7
    a940:	a0 95       	com	r26
    a942:	ba 2f       	mov	r27, r26
    a944:	9e 01       	movw	r18, r28
    a946:	22 50       	subi	r18, 0x02	; 2
    a948:	3e 4f       	sbci	r19, 0xFE	; 254
    a94a:	f9 01       	movw	r30, r18
    a94c:	20 81       	ld	r18, Z
    a94e:	31 81       	ldd	r19, Z+1	; 0x01
    a950:	f9 01       	movw	r30, r18
    a952:	20 81       	ld	r18, Z
    a954:	31 81       	ldd	r19, Z+1	; 0x01
    a956:	42 81       	ldd	r20, Z+2	; 0x02
    a958:	53 81       	ldd	r21, Z+3	; 0x03
    a95a:	bc 01       	movw	r22, r24
    a95c:	cd 01       	movw	r24, r26
    a95e:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a962:	dc 01       	movw	r26, r24
    a964:	cb 01       	movw	r24, r22
    a966:	07 2e       	mov	r0, r23
    a968:	7f e0       	ldi	r23, 0x0F	; 15
    a96a:	b5 95       	asr	r27
    a96c:	a7 95       	ror	r26
    a96e:	97 95       	ror	r25
    a970:	87 95       	ror	r24
    a972:	7a 95       	dec	r23
    a974:	d1 f7       	brne	.-12     	; 0xa96a <eSKalmanFilterPredict+0x24a>
    a976:	70 2d       	mov	r23, r0
    a978:	90 95       	com	r25
    a97a:	81 95       	neg	r24
    a97c:	9f 4f       	sbci	r25, 0xFF	; 255
    a97e:	8c a3       	lds	r24, 0x5c
    a980:	9d a3       	lds	r25, 0x5d
   as_phi[0][7] = -(int16_t)(((int32_t)as_phi[0][4]*(int32_t)pi_gyr[1]) >> 15);
    a982:	88 a1       	lds	r24, 0x48
    a984:	99 a1       	lds	r25, 0x49
    a986:	aa 27       	eor	r26, r26
    a988:	97 fd       	sbrc	r25, 7
    a98a:	a0 95       	com	r26
    a98c:	ba 2f       	mov	r27, r26
    a98e:	9e 01       	movw	r18, r28
    a990:	22 50       	subi	r18, 0x02	; 2
    a992:	3e 4f       	sbci	r19, 0xFE	; 254
    a994:	f9 01       	movw	r30, r18
    a996:	20 81       	ld	r18, Z
    a998:	31 81       	ldd	r19, Z+1	; 0x01
    a99a:	2c 5f       	subi	r18, 0xFC	; 252
    a99c:	3f 4f       	sbci	r19, 0xFF	; 255
    a99e:	f9 01       	movw	r30, r18
    a9a0:	20 81       	ld	r18, Z
    a9a2:	31 81       	ldd	r19, Z+1	; 0x01
    a9a4:	42 81       	ldd	r20, Z+2	; 0x02
    a9a6:	53 81       	ldd	r21, Z+3	; 0x03
    a9a8:	bc 01       	movw	r22, r24
    a9aa:	cd 01       	movw	r24, r26
    a9ac:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a9b0:	dc 01       	movw	r26, r24
    a9b2:	cb 01       	movw	r24, r22
    a9b4:	07 2e       	mov	r0, r23
    a9b6:	7f e0       	ldi	r23, 0x0F	; 15
    a9b8:	b5 95       	asr	r27
    a9ba:	a7 95       	ror	r26
    a9bc:	97 95       	ror	r25
    a9be:	87 95       	ror	r24
    a9c0:	7a 95       	dec	r23
    a9c2:	d1 f7       	brne	.-12     	; 0xa9b8 <eSKalmanFilterPredict+0x298>
    a9c4:	70 2d       	mov	r23, r0
    a9c6:	90 95       	com	r25
    a9c8:	81 95       	neg	r24
    a9ca:	9f 4f       	sbci	r25, 0xFF	; 255
    a9cc:	8e a3       	lds	r24, 0x5e
    a9ce:	9f a3       	lds	r25, 0x5f
   as_phi[0][8] = -(int16_t)(((int32_t)as_phi[0][5]*(int32_t)pi_gyr[2]) >> 15);
    a9d0:	8a a1       	lds	r24, 0x4a
    a9d2:	9b a1       	lds	r25, 0x4b
    a9d4:	aa 27       	eor	r26, r26
    a9d6:	97 fd       	sbrc	r25, 7
    a9d8:	a0 95       	com	r26
    a9da:	ba 2f       	mov	r27, r26
    a9dc:	9e 01       	movw	r18, r28
    a9de:	22 50       	subi	r18, 0x02	; 2
    a9e0:	3e 4f       	sbci	r19, 0xFE	; 254
    a9e2:	f9 01       	movw	r30, r18
    a9e4:	20 81       	ld	r18, Z
    a9e6:	31 81       	ldd	r19, Z+1	; 0x01
    a9e8:	28 5f       	subi	r18, 0xF8	; 248
    a9ea:	3f 4f       	sbci	r19, 0xFF	; 255
    a9ec:	f9 01       	movw	r30, r18
    a9ee:	20 81       	ld	r18, Z
    a9f0:	31 81       	ldd	r19, Z+1	; 0x01
    a9f2:	42 81       	ldd	r20, Z+2	; 0x02
    a9f4:	53 81       	ldd	r21, Z+3	; 0x03
    a9f6:	bc 01       	movw	r22, r24
    a9f8:	cd 01       	movw	r24, r26
    a9fa:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    a9fe:	dc 01       	movw	r26, r24
    aa00:	cb 01       	movw	r24, r22
    aa02:	07 2e       	mov	r0, r23
    aa04:	7f e0       	ldi	r23, 0x0F	; 15
    aa06:	b5 95       	asr	r27
    aa08:	a7 95       	ror	r26
    aa0a:	97 95       	ror	r25
    aa0c:	87 95       	ror	r24
    aa0e:	7a 95       	dec	r23
    aa10:	d1 f7       	brne	.-12     	; 0xaa06 <eSKalmanFilterPredict+0x2e6>
    aa12:	70 2d       	mov	r23, r0
    aa14:	90 95       	com	r25
    aa16:	81 95       	neg	r24
    aa18:	9f 4f       	sbci	r25, 0xFF	; 255
    aa1a:	88 a7       	lds	r24, 0x78
    aa1c:	99 a7       	lds	r25, 0x79
   as_phi[1][6] = -(int16_t)(((int32_t)as_phi[1][3]*(int32_t)pi_gyr[0]) >> 15);
    aa1e:	88 a9       	sts	0x48, r24
    aa20:	99 a9       	sts	0x49, r25
    aa22:	aa 27       	eor	r26, r26
    aa24:	97 fd       	sbrc	r25, 7
    aa26:	a0 95       	com	r26
    aa28:	ba 2f       	mov	r27, r26
    aa2a:	9e 01       	movw	r18, r28
    aa2c:	22 50       	subi	r18, 0x02	; 2
    aa2e:	3e 4f       	sbci	r19, 0xFE	; 254
    aa30:	f9 01       	movw	r30, r18
    aa32:	20 81       	ld	r18, Z
    aa34:	31 81       	ldd	r19, Z+1	; 0x01
    aa36:	f9 01       	movw	r30, r18
    aa38:	20 81       	ld	r18, Z
    aa3a:	31 81       	ldd	r19, Z+1	; 0x01
    aa3c:	42 81       	ldd	r20, Z+2	; 0x02
    aa3e:	53 81       	ldd	r21, Z+3	; 0x03
    aa40:	bc 01       	movw	r22, r24
    aa42:	cd 01       	movw	r24, r26
    aa44:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    aa48:	dc 01       	movw	r26, r24
    aa4a:	cb 01       	movw	r24, r22
    aa4c:	07 2e       	mov	r0, r23
    aa4e:	7f e0       	ldi	r23, 0x0F	; 15
    aa50:	b5 95       	asr	r27
    aa52:	a7 95       	ror	r26
    aa54:	97 95       	ror	r25
    aa56:	87 95       	ror	r24
    aa58:	7a 95       	dec	r23
    aa5a:	d1 f7       	brne	.-12     	; 0xaa50 <eSKalmanFilterPredict+0x330>
    aa5c:	70 2d       	mov	r23, r0
    aa5e:	90 95       	com	r25
    aa60:	81 95       	neg	r24
    aa62:	9f 4f       	sbci	r25, 0xFF	; 255
    aa64:	8e ab       	sts	0x5e, r24
    aa66:	9f ab       	sts	0x5f, r25
   as_phi[1][7] = -(int16_t)(((int32_t)as_phi[1][4]*(int32_t)pi_gyr[1]) >> 15);
    aa68:	8a a9       	sts	0x4a, r24
    aa6a:	9b a9       	sts	0x4b, r25
    aa6c:	aa 27       	eor	r26, r26
    aa6e:	97 fd       	sbrc	r25, 7
    aa70:	a0 95       	com	r26
    aa72:	ba 2f       	mov	r27, r26
    aa74:	9e 01       	movw	r18, r28
    aa76:	22 50       	subi	r18, 0x02	; 2
    aa78:	3e 4f       	sbci	r19, 0xFE	; 254
    aa7a:	f9 01       	movw	r30, r18
    aa7c:	20 81       	ld	r18, Z
    aa7e:	31 81       	ldd	r19, Z+1	; 0x01
    aa80:	2c 5f       	subi	r18, 0xFC	; 252
    aa82:	3f 4f       	sbci	r19, 0xFF	; 255
    aa84:	f9 01       	movw	r30, r18
    aa86:	20 81       	ld	r18, Z
    aa88:	31 81       	ldd	r19, Z+1	; 0x01
    aa8a:	42 81       	ldd	r20, Z+2	; 0x02
    aa8c:	53 81       	ldd	r21, Z+3	; 0x03
    aa8e:	bc 01       	movw	r22, r24
    aa90:	cd 01       	movw	r24, r26
    aa92:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    aa96:	dc 01       	movw	r26, r24
    aa98:	cb 01       	movw	r24, r22
    aa9a:	07 2e       	mov	r0, r23
    aa9c:	7f e0       	ldi	r23, 0x0F	; 15
    aa9e:	b5 95       	asr	r27
    aaa0:	a7 95       	ror	r26
    aaa2:	97 95       	ror	r25
    aaa4:	87 95       	ror	r24
    aaa6:	7a 95       	dec	r23
    aaa8:	d1 f7       	brne	.-12     	; 0xaa9e <eSKalmanFilterPredict+0x37e>
    aaaa:	70 2d       	mov	r23, r0
    aaac:	90 95       	com	r25
    aaae:	81 95       	neg	r24
    aab0:	9f 4f       	sbci	r25, 0xFF	; 255
    aab2:	88 af       	sts	0x78, r24
    aab4:	99 af       	sts	0x79, r25
   as_phi[1][8] = -(int16_t)(((int32_t)as_phi[1][5]*(int32_t)pi_gyr[2]) >> 15);
    aab6:	8c a9       	sts	0x4c, r24
    aab8:	9d a9       	sts	0x4d, r25
    aaba:	aa 27       	eor	r26, r26
    aabc:	97 fd       	sbrc	r25, 7
    aabe:	a0 95       	com	r26
    aac0:	ba 2f       	mov	r27, r26
    aac2:	9e 01       	movw	r18, r28
    aac4:	22 50       	subi	r18, 0x02	; 2
    aac6:	3e 4f       	sbci	r19, 0xFE	; 254
    aac8:	f9 01       	movw	r30, r18
    aaca:	20 81       	ld	r18, Z
    aacc:	31 81       	ldd	r19, Z+1	; 0x01
    aace:	28 5f       	subi	r18, 0xF8	; 248
    aad0:	3f 4f       	sbci	r19, 0xFF	; 255
    aad2:	f9 01       	movw	r30, r18
    aad4:	20 81       	ld	r18, Z
    aad6:	31 81       	ldd	r19, Z+1	; 0x01
    aad8:	42 81       	ldd	r20, Z+2	; 0x02
    aada:	53 81       	ldd	r21, Z+3	; 0x03
    aadc:	bc 01       	movw	r22, r24
    aade:	cd 01       	movw	r24, r26
    aae0:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    aae4:	dc 01       	movw	r26, r24
    aae6:	cb 01       	movw	r24, r22
    aae8:	07 2e       	mov	r0, r23
    aaea:	7f e0       	ldi	r23, 0x0F	; 15
    aaec:	b5 95       	asr	r27
    aaee:	a7 95       	ror	r26
    aaf0:	97 95       	ror	r25
    aaf2:	87 95       	ror	r24
    aaf4:	7a 95       	dec	r23
    aaf6:	d1 f7       	brne	.-12     	; 0xaaec <eSKalmanFilterPredict+0x3cc>
    aaf8:	70 2d       	mov	r23, r0
    aafa:	90 95       	com	r25
    aafc:	81 95       	neg	r24
    aafe:	9f 4f       	sbci	r25, 0xFF	; 255
    ab00:	8a af       	sts	0x7a, r24
    ab02:	9b af       	sts	0x7b, r25
   as_phi[2][6] = -(int16_t)(((int32_t)as_phi[2][3]*(int32_t)pi_gyr[0]) >> 15);
    ab04:	ce 01       	movw	r24, r28
    ab06:	8e 5b       	subi	r24, 0xBE	; 190
    ab08:	9f 4f       	sbci	r25, 0xFF	; 255
    ab0a:	fc 01       	movw	r30, r24
    ab0c:	80 81       	ld	r24, Z
    ab0e:	91 81       	ldd	r25, Z+1	; 0x01
    ab10:	aa 27       	eor	r26, r26
    ab12:	97 fd       	sbrc	r25, 7
    ab14:	a0 95       	com	r26
    ab16:	ba 2f       	mov	r27, r26
    ab18:	9e 01       	movw	r18, r28
    ab1a:	22 50       	subi	r18, 0x02	; 2
    ab1c:	3e 4f       	sbci	r19, 0xFE	; 254
    ab1e:	f9 01       	movw	r30, r18
    ab20:	20 81       	ld	r18, Z
    ab22:	31 81       	ldd	r19, Z+1	; 0x01
    ab24:	f9 01       	movw	r30, r18
    ab26:	20 81       	ld	r18, Z
    ab28:	31 81       	ldd	r19, Z+1	; 0x01
    ab2a:	42 81       	ldd	r20, Z+2	; 0x02
    ab2c:	53 81       	ldd	r21, Z+3	; 0x03
    ab2e:	bc 01       	movw	r22, r24
    ab30:	cd 01       	movw	r24, r26
    ab32:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    ab36:	dc 01       	movw	r26, r24
    ab38:	cb 01       	movw	r24, r22
    ab3a:	07 2e       	mov	r0, r23
    ab3c:	7f e0       	ldi	r23, 0x0F	; 15
    ab3e:	b5 95       	asr	r27
    ab40:	a7 95       	ror	r26
    ab42:	97 95       	ror	r25
    ab44:	87 95       	ror	r24
    ab46:	7a 95       	dec	r23
    ab48:	d1 f7       	brne	.-12     	; 0xab3e <eSKalmanFilterPredict+0x41e>
    ab4a:	70 2d       	mov	r23, r0
    ab4c:	22 27       	eor	r18, r18
    ab4e:	33 27       	eor	r19, r19
    ab50:	28 1b       	sub	r18, r24
    ab52:	39 0b       	sbc	r19, r25
    ab54:	ce 01       	movw	r24, r28
    ab56:	88 5b       	subi	r24, 0xB8	; 184
    ab58:	9f 4f       	sbci	r25, 0xFF	; 255
    ab5a:	fc 01       	movw	r30, r24
    ab5c:	20 83       	st	Z, r18
    ab5e:	31 83       	std	Z+1, r19	; 0x01
   as_phi[2][7] = -(int16_t)(((int32_t)as_phi[2][4]*(int32_t)pi_gyr[1]) >> 15);
    ab60:	ce 01       	movw	r24, r28
    ab62:	8c 5b       	subi	r24, 0xBC	; 188
    ab64:	9f 4f       	sbci	r25, 0xFF	; 255
    ab66:	fc 01       	movw	r30, r24
    ab68:	80 81       	ld	r24, Z
    ab6a:	91 81       	ldd	r25, Z+1	; 0x01
    ab6c:	aa 27       	eor	r26, r26
    ab6e:	97 fd       	sbrc	r25, 7
    ab70:	a0 95       	com	r26
    ab72:	ba 2f       	mov	r27, r26
    ab74:	9e 01       	movw	r18, r28
    ab76:	22 50       	subi	r18, 0x02	; 2
    ab78:	3e 4f       	sbci	r19, 0xFE	; 254
    ab7a:	f9 01       	movw	r30, r18
    ab7c:	20 81       	ld	r18, Z
    ab7e:	31 81       	ldd	r19, Z+1	; 0x01
    ab80:	2c 5f       	subi	r18, 0xFC	; 252
    ab82:	3f 4f       	sbci	r19, 0xFF	; 255
    ab84:	f9 01       	movw	r30, r18
    ab86:	20 81       	ld	r18, Z
    ab88:	31 81       	ldd	r19, Z+1	; 0x01
    ab8a:	42 81       	ldd	r20, Z+2	; 0x02
    ab8c:	53 81       	ldd	r21, Z+3	; 0x03
    ab8e:	bc 01       	movw	r22, r24
    ab90:	cd 01       	movw	r24, r26
    ab92:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    ab96:	dc 01       	movw	r26, r24
    ab98:	cb 01       	movw	r24, r22
    ab9a:	07 2e       	mov	r0, r23
    ab9c:	7f e0       	ldi	r23, 0x0F	; 15
    ab9e:	b5 95       	asr	r27
    aba0:	a7 95       	ror	r26
    aba2:	97 95       	ror	r25
    aba4:	87 95       	ror	r24
    aba6:	7a 95       	dec	r23
    aba8:	d1 f7       	brne	.-12     	; 0xab9e <eSKalmanFilterPredict+0x47e>
    abaa:	70 2d       	mov	r23, r0
    abac:	22 27       	eor	r18, r18
    abae:	33 27       	eor	r19, r19
    abb0:	28 1b       	sub	r18, r24
    abb2:	39 0b       	sbc	r19, r25
    abb4:	ce 01       	movw	r24, r28
    abb6:	86 5b       	subi	r24, 0xB6	; 182
    abb8:	9f 4f       	sbci	r25, 0xFF	; 255
    abba:	fc 01       	movw	r30, r24
    abbc:	20 83       	st	Z, r18
    abbe:	31 83       	std	Z+1, r19	; 0x01
   as_phi[2][8] = -(int16_t)(((int32_t)as_phi[2][5]*(int32_t)pi_gyr[2]) >> 15);
    abc0:	ce 01       	movw	r24, r28
    abc2:	8a 5b       	subi	r24, 0xBA	; 186
    abc4:	9f 4f       	sbci	r25, 0xFF	; 255
    abc6:	fc 01       	movw	r30, r24
    abc8:	80 81       	ld	r24, Z
    abca:	91 81       	ldd	r25, Z+1	; 0x01
    abcc:	aa 27       	eor	r26, r26
    abce:	97 fd       	sbrc	r25, 7
    abd0:	a0 95       	com	r26
    abd2:	ba 2f       	mov	r27, r26
    abd4:	9e 01       	movw	r18, r28
    abd6:	22 50       	subi	r18, 0x02	; 2
    abd8:	3e 4f       	sbci	r19, 0xFE	; 254
    abda:	f9 01       	movw	r30, r18
    abdc:	20 81       	ld	r18, Z
    abde:	31 81       	ldd	r19, Z+1	; 0x01
    abe0:	28 5f       	subi	r18, 0xF8	; 248
    abe2:	3f 4f       	sbci	r19, 0xFF	; 255
    abe4:	f9 01       	movw	r30, r18
    abe6:	20 81       	ld	r18, Z
    abe8:	31 81       	ldd	r19, Z+1	; 0x01
    abea:	42 81       	ldd	r20, Z+2	; 0x02
    abec:	53 81       	ldd	r21, Z+3	; 0x03
    abee:	bc 01       	movw	r22, r24
    abf0:	cd 01       	movw	r24, r26
    abf2:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
    abf6:	dc 01       	movw	r26, r24
    abf8:	cb 01       	movw	r24, r22
    abfa:	07 2e       	mov	r0, r23
    abfc:	7f e0       	ldi	r23, 0x0F	; 15
    abfe:	b5 95       	asr	r27
    ac00:	a7 95       	ror	r26
    ac02:	97 95       	ror	r25
    ac04:	87 95       	ror	r24
    ac06:	7a 95       	dec	r23
    ac08:	d1 f7       	brne	.-12     	; 0xabfe <eSKalmanFilterPredict+0x4de>
    ac0a:	70 2d       	mov	r23, r0
    ac0c:	22 27       	eor	r18, r18
    ac0e:	33 27       	eor	r19, r19
    ac10:	28 1b       	sub	r18, r24
    ac12:	39 0b       	sbc	r19, r25
    ac14:	ce 01       	movw	r24, r28
    ac16:	84 5b       	subi	r24, 0xB4	; 180
    ac18:	9f 4f       	sbci	r25, 0xFF	; 255
    ac1a:	fc 01       	movw	r30, r24
    ac1c:	20 83       	st	Z, r18
    ac1e:	31 83       	std	Z+1, r19	; 0x01

   /*------------------------------------------------------------------------*
    * phi*P
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_phi[0][0],
    ac20:	ce 01       	movw	r24, r28
    ac22:	48 96       	adiw	r24, 0x18	; 24
    ac24:	2f e3       	ldi	r18, 0x3F	; 63
    ac26:	3a e2       	ldi	r19, 0x2A	; 42
                        9,
                        9,
                        &gt_insDev.as_P[0][0],
                        9,
                        9,
                        &as_tmp[0][0],
    ac28:	fe 01       	movw	r30, r28
    ac2a:	e6 54       	subi	r30, 0x46	; 70
    ac2c:	ff 4f       	sbci	r31, 0xFF	; 255
   as_phi[2][8] = -(int16_t)(((int32_t)as_phi[2][5]*(int32_t)pi_gyr[2]) >> 15);

   /*------------------------------------------------------------------------*
    * phi*P
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_phi[0][0],
    ac2e:	69 e0       	ldi	r22, 0x09	; 9
    ac30:	49 e0       	ldi	r20, 0x09	; 9
    ac32:	09 e0       	ldi	r16, 0x09	; 9
    ac34:	0f 2e       	mov	r0, r31
    ac36:	f9 e0       	ldi	r31, 0x09	; 9
    ac38:	ef 2e       	mov	r14, r31
    ac3a:	f0 2d       	mov	r31, r0
    ac3c:	6f 01       	movw	r12, r30
    ac3e:	aa 24       	eor	r10, r10
    ac40:	a3 94       	inc	r10
    ac42:	0f 2e       	mov	r0, r31
    ac44:	ff e0       	ldi	r31, 0x0F	; 15
    ac46:	8f 2e       	mov	r8, r31
    ac48:	f0 2d       	mov	r31, r0
    ac4a:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        9,
                        &as_tmp[0][0],
                        1,
                        15);

   utl_matTrans16( &as_phi[0][0],
    ac4e:	ce 01       	movw	r24, r28
    ac50:	48 96       	adiw	r24, 0x18	; 24
                   &as_tmp2[0][0],
    ac52:	9e 01       	movw	r18, r28
    ac54:	24 5a       	subi	r18, 0xA4	; 164
    ac56:	3e 4f       	sbci	r19, 0xFE	; 254
                        9,
                        &as_tmp[0][0],
                        1,
                        15);

   utl_matTrans16( &as_phi[0][0],
    ac58:	b9 01       	movw	r22, r18
    ac5a:	49 e0       	ldi	r20, 0x09	; 9
    ac5c:	29 e0       	ldi	r18, 0x09	; 9
    ac5e:	0e 94 ec e1 	call	0x1c3d8	; 0x1c3d8 <utl_matTrans16>
                   9);

   /*------------------------------------------------------------------------*
    * phi*P*phi'
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp[0][0],
    ac62:	ce 01       	movw	r24, r28
    ac64:	86 54       	subi	r24, 0x46	; 70
    ac66:	9f 4f       	sbci	r25, 0xFF	; 255
                        9,
                        9,
                        &as_tmp2[0][0],
    ac68:	9e 01       	movw	r18, r28
    ac6a:	24 5a       	subi	r18, 0xA4	; 164
    ac6c:	3e 4f       	sbci	r19, 0xFE	; 254
                   9);

   /*------------------------------------------------------------------------*
    * phi*P*phi'
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp[0][0],
    ac6e:	ef e3       	ldi	r30, 0x3F	; 63
    ac70:	fa e2       	ldi	r31, 0x2A	; 42
    ac72:	69 e0       	ldi	r22, 0x09	; 9
    ac74:	49 e0       	ldi	r20, 0x09	; 9
    ac76:	09 e0       	ldi	r16, 0x09	; 9
    ac78:	0f 2e       	mov	r0, r31
    ac7a:	f9 e0       	ldi	r31, 0x09	; 9
    ac7c:	ef 2e       	mov	r14, r31
    ac7e:	f0 2d       	mov	r31, r0
    ac80:	6f 01       	movw	r12, r30
    ac82:	aa 24       	eor	r10, r10
    ac84:	a3 94       	inc	r10
    ac86:	0f 2e       	mov	r0, r31
    ac88:	ff e0       	ldi	r31, 0x0F	; 15
    ac8a:	8f 2e       	mov	r8, r31
    ac8c:	f0 2d       	mov	r31, r0
    ac8e:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        15);

   /*------------------------------------------------------------------------*
    * P = phi*P*phi' + Q
    *------------------------------------------------------------------------*/
   for( c_index = 0; c_index < 9; c_index++)
    ac92:	19 82       	std	Y+1, r1	; 0x01
    ac94:	75 c0       	rjmp	.+234    	; 0xad80 <eSKalmanFilterPredict+0x660>

      /*---------------------------------------------------------------------*
       * Limit the growth of the error covariance matrix in order to
       * maintain 16-bit math.
       *---------------------------------------------------------------------*/
      i_temp = (int32_t)gt_insDev.as_P[c_index][c_index] + (int32_t)as_Q[c_index];
    ac96:	89 81       	ldd	r24, Y+1	; 0x01
    ac98:	28 2f       	mov	r18, r24
    ac9a:	33 27       	eor	r19, r19
    ac9c:	27 fd       	sbrc	r18, 7
    ac9e:	30 95       	com	r19
    aca0:	89 81       	ldd	r24, Y+1	; 0x01
    aca2:	48 2f       	mov	r20, r24
    aca4:	55 27       	eor	r21, r21
    aca6:	47 fd       	sbrc	r20, 7
    aca8:	50 95       	com	r21
    acaa:	c9 01       	movw	r24, r18
    acac:	88 0f       	add	r24, r24
    acae:	99 1f       	adc	r25, r25
    acb0:	88 0f       	add	r24, r24
    acb2:	99 1f       	adc	r25, r25
    acb4:	88 0f       	add	r24, r24
    acb6:	99 1f       	adc	r25, r25
    acb8:	82 0f       	add	r24, r18
    acba:	93 1f       	adc	r25, r19
    acbc:	84 0f       	add	r24, r20
    acbe:	95 1f       	adc	r25, r21
    acc0:	8c 5d       	subi	r24, 0xDC	; 220
    acc2:	9c 4f       	sbci	r25, 0xFC	; 252
    acc4:	88 0f       	add	r24, r24
    acc6:	99 1f       	adc	r25, r25
    acc8:	89 50       	subi	r24, 0x09	; 9
    acca:	9c 4d       	sbci	r25, 0xDC	; 220
    accc:	fc 01       	movw	r30, r24
    acce:	80 81       	ld	r24, Z
    acd0:	91 81       	ldd	r25, Z+1	; 0x01
    acd2:	9c 01       	movw	r18, r24
    acd4:	44 27       	eor	r20, r20
    acd6:	37 fd       	sbrc	r19, 7
    acd8:	40 95       	com	r20
    acda:	54 2f       	mov	r21, r20
    acdc:	89 81       	ldd	r24, Y+1	; 0x01
    acde:	99 27       	eor	r25, r25
    ace0:	87 fd       	sbrc	r24, 7
    ace2:	90 95       	com	r25
    ace4:	88 0f       	add	r24, r24
    ace6:	99 1f       	adc	r25, r25
    ace8:	be 01       	movw	r22, r28
    acea:	6f 5f       	subi	r22, 0xFF	; 255
    acec:	7f 4f       	sbci	r23, 0xFF	; 255
    acee:	86 0f       	add	r24, r22
    acf0:	97 1f       	adc	r25, r23
    acf2:	05 96       	adiw	r24, 0x05	; 5
    acf4:	fc 01       	movw	r30, r24
    acf6:	80 81       	ld	r24, Z
    acf8:	91 81       	ldd	r25, Z+1	; 0x01
    acfa:	aa 27       	eor	r26, r26
    acfc:	97 fd       	sbrc	r25, 7
    acfe:	a0 95       	com	r26
    ad00:	ba 2f       	mov	r27, r26
    ad02:	82 0f       	add	r24, r18
    ad04:	93 1f       	adc	r25, r19
    ad06:	a4 1f       	adc	r26, r20
    ad08:	b5 1f       	adc	r27, r21
    ad0a:	8a 83       	std	Y+2, r24	; 0x02
    ad0c:	9b 83       	std	Y+3, r25	; 0x03
    ad0e:	ac 83       	std	Y+4, r26	; 0x04
    ad10:	bd 83       	std	Y+5, r27	; 0x05
      if( i_temp > 8192)
    ad12:	8a 81       	ldd	r24, Y+2	; 0x02
    ad14:	9b 81       	ldd	r25, Y+3	; 0x03
    ad16:	ac 81       	ldd	r26, Y+4	; 0x04
    ad18:	bd 81       	ldd	r27, Y+5	; 0x05
    ad1a:	81 30       	cpi	r24, 0x01	; 1
    ad1c:	f0 e2       	ldi	r31, 0x20	; 32
    ad1e:	9f 07       	cpc	r25, r31
    ad20:	f0 e0       	ldi	r31, 0x00	; 0
    ad22:	af 07       	cpc	r26, r31
    ad24:	f0 e0       	ldi	r31, 0x00	; 0
    ad26:	bf 07       	cpc	r27, r31
    ad28:	44 f0       	brlt	.+16     	; 0xad3a <eSKalmanFilterPredict+0x61a>
         i_temp = 8192;
    ad2a:	80 e0       	ldi	r24, 0x00	; 0
    ad2c:	90 e2       	ldi	r25, 0x20	; 32
    ad2e:	a0 e0       	ldi	r26, 0x00	; 0
    ad30:	b0 e0       	ldi	r27, 0x00	; 0
    ad32:	8a 83       	std	Y+2, r24	; 0x02
    ad34:	9b 83       	std	Y+3, r25	; 0x03
    ad36:	ac 83       	std	Y+4, r26	; 0x04
    ad38:	bd 83       	std	Y+5, r27	; 0x05
      gt_insDev.as_P[c_index][c_index] = (int16_t)i_temp;
    ad3a:	89 81       	ldd	r24, Y+1	; 0x01
    ad3c:	28 2f       	mov	r18, r24
    ad3e:	33 27       	eor	r19, r19
    ad40:	27 fd       	sbrc	r18, 7
    ad42:	30 95       	com	r19
    ad44:	89 81       	ldd	r24, Y+1	; 0x01
    ad46:	68 2f       	mov	r22, r24
    ad48:	77 27       	eor	r23, r23
    ad4a:	67 fd       	sbrc	r22, 7
    ad4c:	70 95       	com	r23
    ad4e:	4a 81       	ldd	r20, Y+2	; 0x02
    ad50:	5b 81       	ldd	r21, Y+3	; 0x03
    ad52:	c9 01       	movw	r24, r18
    ad54:	88 0f       	add	r24, r24
    ad56:	99 1f       	adc	r25, r25
    ad58:	88 0f       	add	r24, r24
    ad5a:	99 1f       	adc	r25, r25
    ad5c:	88 0f       	add	r24, r24
    ad5e:	99 1f       	adc	r25, r25
    ad60:	82 0f       	add	r24, r18
    ad62:	93 1f       	adc	r25, r19
    ad64:	86 0f       	add	r24, r22
    ad66:	97 1f       	adc	r25, r23
    ad68:	8c 5d       	subi	r24, 0xDC	; 220
    ad6a:	9c 4f       	sbci	r25, 0xFC	; 252
    ad6c:	88 0f       	add	r24, r24
    ad6e:	99 1f       	adc	r25, r25
    ad70:	89 50       	subi	r24, 0x09	; 9
    ad72:	9c 4d       	sbci	r25, 0xDC	; 220
    ad74:	fc 01       	movw	r30, r24
    ad76:	40 83       	st	Z, r20
    ad78:	51 83       	std	Z+1, r21	; 0x01
                        15);

   /*------------------------------------------------------------------------*
    * P = phi*P*phi' + Q
    *------------------------------------------------------------------------*/
   for( c_index = 0; c_index < 9; c_index++)
    ad7a:	89 81       	ldd	r24, Y+1	; 0x01
    ad7c:	8f 5f       	subi	r24, 0xFF	; 255
    ad7e:	89 83       	std	Y+1, r24	; 0x01
    ad80:	89 81       	ldd	r24, Y+1	; 0x01
    ad82:	89 30       	cpi	r24, 0x09	; 9
    ad84:	0c f4       	brge	.+2      	; 0xad88 <eSKalmanFilterPredict+0x668>
    ad86:	87 cf       	rjmp	.-242    	; 0xac96 <eSKalmanFilterPredict+0x576>
         i_temp = 8192;
      gt_insDev.as_P[c_index][c_index] = (int16_t)i_temp;

   }

}/*End eSKalmanFilterPredict*/
    ad88:	cf 5f       	subi	r28, 0xFF	; 255
    ad8a:	dd 4f       	sbci	r29, 0xFD	; 253
    ad8c:	cd bf       	out	0x3d, r28	; 61
    ad8e:	de bf       	out	0x3e, r29	; 62
    ad90:	df 91       	pop	r29
    ad92:	cf 91       	pop	r28
    ad94:	0f 91       	pop	r16
    ad96:	ef 90       	pop	r14
    ad98:	df 90       	pop	r13
    ad9a:	cf 90       	pop	r12
    ad9c:	af 90       	pop	r10
    ad9e:	8f 90       	pop	r8
    ada0:	08 95       	ret

0000ada2 <eSKalmanFilterCorrect>:
static inline void eSKalmanFilterCorrect( int16_t *ps_deltaZ,
                                          int16_t *ps_deltaAtt,
                                          int16_t *ps_deltaGBias,
                                          int16_t *ps_deltaGScale,
                                          int16_t s_dt)
{
    ada2:	8f 92       	push	r8
    ada4:	af 92       	push	r10
    ada6:	cf 92       	push	r12
    ada8:	df 92       	push	r13
    adaa:	ef 92       	push	r14
    adac:	0f 93       	push	r16
    adae:	1f 93       	push	r17
    adb0:	cf 93       	push	r28
    adb2:	df 93       	push	r29
    adb4:	cd b7       	in	r28, 0x3d	; 61
    adb6:	de b7       	in	r29, 0x3e	; 62
    adb8:	ca 56       	subi	r28, 0x6A	; 106
    adba:	d2 40       	sbci	r29, 0x02	; 2
    adbc:	cd bf       	out	0x3d, r28	; 61
    adbe:	de bf       	out	0x3e, r29	; 62
    adc0:	fe 01       	movw	r30, r28
    adc2:	ef 59       	subi	r30, 0x9F	; 159
    adc4:	fd 4f       	sbci	r31, 0xFD	; 253
    adc6:	80 83       	st	Z, r24
    adc8:	91 83       	std	Z+1, r25	; 0x01
    adca:	ce 01       	movw	r24, r28
    adcc:	8d 59       	subi	r24, 0x9D	; 157
    adce:	9d 4f       	sbci	r25, 0xFD	; 253
    add0:	fc 01       	movw	r30, r24
    add2:	60 83       	st	Z, r22
    add4:	71 83       	std	Z+1, r23	; 0x01
    add6:	ce 01       	movw	r24, r28
    add8:	8b 59       	subi	r24, 0x9B	; 155
    adda:	9d 4f       	sbci	r25, 0xFD	; 253
    addc:	fc 01       	movw	r30, r24
    adde:	40 83       	st	Z, r20
    ade0:	51 83       	std	Z+1, r21	; 0x01
    ade2:	ce 01       	movw	r24, r28
    ade4:	89 59       	subi	r24, 0x99	; 153
    ade6:	9d 4f       	sbci	r25, 0xFD	; 253
    ade8:	fc 01       	movw	r30, r24
    adea:	20 83       	st	Z, r18
    adec:	31 83       	std	Z+1, r19	; 0x01
    adee:	ce 01       	movw	r24, r28
    adf0:	87 59       	subi	r24, 0x97	; 151
    adf2:	9d 4f       	sbci	r25, 0xFD	; 253
    adf4:	fc 01       	movw	r30, r24
    adf6:	00 83       	st	Z, r16
    adf8:	11 83       	std	Z+1, r17	; 0x01
   int16_t as_tmpP[9][9];
   int32_t ai_T[3];
   int32_t i_tmp;
   int8_t c_count;
   uint8_t c_index;
   int16_t *ps_res = &gt_insDev.as_res[0];
    adfa:	8d ee       	ldi	r24, 0xED	; 237
    adfc:	9a e2       	ldi	r25, 0x2A	; 42
    adfe:	8f 83       	std	Y+7, r24	; 0x07
    ae00:	98 87       	std	Y+8, r25	; 0x08
    * Update the measurement noise estimate. Whenever there is a large
    * amount of acceleration we want to ignore correcting the DCM since the
    * accelerometer is measuring specific force instead of gravity.
    * Similar to [3] eq 10.61
    *------------------------------------------------------------------------*/
   if( gt_insDev.c_platMovingCount > 0)
    ae02:	80 91 f3 2a 	lds	r24, 0x2AF3
    ae06:	18 16       	cp	r1, r24
    ae08:	2c f5       	brge	.+74     	; 0xae54 <eSKalmanFilterCorrect+0xb2>
   {
      ai_R[0] = 3276700;
    ae0a:	9e 01       	movw	r18, r28
    ae0c:	21 5c       	subi	r18, 0xC1	; 193
    ae0e:	3f 4f       	sbci	r19, 0xFF	; 255
    ae10:	8c e9       	ldi	r24, 0x9C	; 156
    ae12:	9f ef       	ldi	r25, 0xFF	; 255
    ae14:	a1 e3       	ldi	r26, 0x31	; 49
    ae16:	b0 e0       	ldi	r27, 0x00	; 0
    ae18:	f9 01       	movw	r30, r18
    ae1a:	80 83       	st	Z, r24
    ae1c:	91 83       	std	Z+1, r25	; 0x01
    ae1e:	a2 83       	std	Z+2, r26	; 0x02
    ae20:	b3 83       	std	Z+3, r27	; 0x03
      ai_R[1] = 3276700;
    ae22:	9e 01       	movw	r18, r28
    ae24:	2d 5b       	subi	r18, 0xBD	; 189
    ae26:	3f 4f       	sbci	r19, 0xFF	; 255
    ae28:	8c e9       	ldi	r24, 0x9C	; 156
    ae2a:	9f ef       	ldi	r25, 0xFF	; 255
    ae2c:	a1 e3       	ldi	r26, 0x31	; 49
    ae2e:	b0 e0       	ldi	r27, 0x00	; 0
    ae30:	f9 01       	movw	r30, r18
    ae32:	80 83       	st	Z, r24
    ae34:	91 83       	std	Z+1, r25	; 0x01
    ae36:	a2 83       	std	Z+2, r26	; 0x02
    ae38:	b3 83       	std	Z+3, r27	; 0x03
      ai_R[2] = 3276700;
    ae3a:	9e 01       	movw	r18, r28
    ae3c:	29 5b       	subi	r18, 0xB9	; 185
    ae3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ae40:	8c e9       	ldi	r24, 0x9C	; 156
    ae42:	9f ef       	ldi	r25, 0xFF	; 255
    ae44:	a1 e3       	ldi	r26, 0x31	; 49
    ae46:	b0 e0       	ldi	r27, 0x00	; 0
    ae48:	f9 01       	movw	r30, r18
    ae4a:	80 83       	st	Z, r24
    ae4c:	91 83       	std	Z+1, r25	; 0x01
    ae4e:	a2 83       	std	Z+2, r26	; 0x02
    ae50:	b3 83       	std	Z+3, r27	; 0x03
    ae52:	57 c0       	rjmp	.+174    	; 0xaf02 <eSKalmanFilterCorrect+0x160>
   }
   else /*Not moving*/
   {

      if( gt_insDev.b_rollMeasError == true)
    ae54:	80 91 f4 2a 	lds	r24, 0x2AF4
    ae58:	88 23       	and	r24, r24
    ae5a:	69 f0       	breq	.+26     	; 0xae76 <eSKalmanFilterCorrect+0xd4>
         ai_R[0] = 3276700;
    ae5c:	9e 01       	movw	r18, r28
    ae5e:	21 5c       	subi	r18, 0xC1	; 193
    ae60:	3f 4f       	sbci	r19, 0xFF	; 255
    ae62:	8c e9       	ldi	r24, 0x9C	; 156
    ae64:	9f ef       	ldi	r25, 0xFF	; 255
    ae66:	a1 e3       	ldi	r26, 0x31	; 49
    ae68:	b0 e0       	ldi	r27, 0x00	; 0
    ae6a:	f9 01       	movw	r30, r18
    ae6c:	80 83       	st	Z, r24
    ae6e:	91 83       	std	Z+1, r25	; 0x01
    ae70:	a2 83       	std	Z+2, r26	; 0x02
    ae72:	b3 83       	std	Z+3, r27	; 0x03
    ae74:	0c c0       	rjmp	.+24     	; 0xae8e <eSKalmanFilterCorrect+0xec>
      else
         ai_R[0] = INS_ROLL_PITCH_MEAS_NOISE;
    ae76:	9e 01       	movw	r18, r28
    ae78:	21 5c       	subi	r18, 0xC1	; 193
    ae7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae7c:	80 e0       	ldi	r24, 0x00	; 0
    ae7e:	94 e0       	ldi	r25, 0x04	; 4
    ae80:	a0 e0       	ldi	r26, 0x00	; 0
    ae82:	b0 e0       	ldi	r27, 0x00	; 0
    ae84:	f9 01       	movw	r30, r18
    ae86:	80 83       	st	Z, r24
    ae88:	91 83       	std	Z+1, r25	; 0x01
    ae8a:	a2 83       	std	Z+2, r26	; 0x02
    ae8c:	b3 83       	std	Z+3, r27	; 0x03

      if( gt_insDev.b_pitchMeasError == true)
    ae8e:	80 91 f5 2a 	lds	r24, 0x2AF5
    ae92:	88 23       	and	r24, r24
    ae94:	69 f0       	breq	.+26     	; 0xaeb0 <eSKalmanFilterCorrect+0x10e>
         ai_R[1] = 3276700;
    ae96:	9e 01       	movw	r18, r28
    ae98:	2d 5b       	subi	r18, 0xBD	; 189
    ae9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae9c:	8c e9       	ldi	r24, 0x9C	; 156
    ae9e:	9f ef       	ldi	r25, 0xFF	; 255
    aea0:	a1 e3       	ldi	r26, 0x31	; 49
    aea2:	b0 e0       	ldi	r27, 0x00	; 0
    aea4:	f9 01       	movw	r30, r18
    aea6:	80 83       	st	Z, r24
    aea8:	91 83       	std	Z+1, r25	; 0x01
    aeaa:	a2 83       	std	Z+2, r26	; 0x02
    aeac:	b3 83       	std	Z+3, r27	; 0x03
    aeae:	0c c0       	rjmp	.+24     	; 0xaec8 <eSKalmanFilterCorrect+0x126>
      else
         ai_R[1] = INS_ROLL_PITCH_MEAS_NOISE;
    aeb0:	9e 01       	movw	r18, r28
    aeb2:	2d 5b       	subi	r18, 0xBD	; 189
    aeb4:	3f 4f       	sbci	r19, 0xFF	; 255
    aeb6:	80 e0       	ldi	r24, 0x00	; 0
    aeb8:	94 e0       	ldi	r25, 0x04	; 4
    aeba:	a0 e0       	ldi	r26, 0x00	; 0
    aebc:	b0 e0       	ldi	r27, 0x00	; 0
    aebe:	f9 01       	movw	r30, r18
    aec0:	80 83       	st	Z, r24
    aec2:	91 83       	std	Z+1, r25	; 0x01
    aec4:	a2 83       	std	Z+2, r26	; 0x02
    aec6:	b3 83       	std	Z+3, r27	; 0x03

      if( gt_insDev.b_yawMeasError == true)
    aec8:	80 91 f6 2a 	lds	r24, 0x2AF6
    aecc:	88 23       	and	r24, r24
    aece:	69 f0       	breq	.+26     	; 0xaeea <eSKalmanFilterCorrect+0x148>
         ai_R[2] = 3276700;
    aed0:	9e 01       	movw	r18, r28
    aed2:	29 5b       	subi	r18, 0xB9	; 185
    aed4:	3f 4f       	sbci	r19, 0xFF	; 255
    aed6:	8c e9       	ldi	r24, 0x9C	; 156
    aed8:	9f ef       	ldi	r25, 0xFF	; 255
    aeda:	a1 e3       	ldi	r26, 0x31	; 49
    aedc:	b0 e0       	ldi	r27, 0x00	; 0
    aede:	f9 01       	movw	r30, r18
    aee0:	80 83       	st	Z, r24
    aee2:	91 83       	std	Z+1, r25	; 0x01
    aee4:	a2 83       	std	Z+2, r26	; 0x02
    aee6:	b3 83       	std	Z+3, r27	; 0x03
    aee8:	0c c0       	rjmp	.+24     	; 0xaf02 <eSKalmanFilterCorrect+0x160>
      else
         ai_R[2] = INS_YAW_MEAS_NOISE;
    aeea:	9e 01       	movw	r18, r28
    aeec:	29 5b       	subi	r18, 0xB9	; 185
    aeee:	3f 4f       	sbci	r19, 0xFF	; 255
    aef0:	80 e0       	ldi	r24, 0x00	; 0
    aef2:	94 e0       	ldi	r25, 0x04	; 4
    aef4:	a0 e0       	ldi	r26, 0x00	; 0
    aef6:	b0 e0       	ldi	r27, 0x00	; 0
    aef8:	f9 01       	movw	r30, r18
    aefa:	80 83       	st	Z, r24
    aefc:	91 83       	std	Z+1, r25	; 0x01
    aefe:	a2 83       	std	Z+2, r26	; 0x02
    af00:	b3 83       	std	Z+3, r27	; 0x03
    *
    * [2] eq 17 with the magnetometer yaw term added
    * [3] eq's 10.42 and 10.45 are combined with the Rbn term removed
    *  and ge/me terms negated.
    *------------------------------------------------------------------------*/
   as_H00[0][0] = 0;
    af02:	ce 01       	movw	r24, r28
    af04:	85 5b       	subi	r24, 0xB5	; 181
    af06:	9f 4f       	sbci	r25, 0xFF	; 255
    af08:	fc 01       	movw	r30, r24
    af0a:	10 82       	st	Z, r1
    af0c:	11 82       	std	Z+1, r1	; 0x01
   as_H00[0][1] = -32768;
    af0e:	ce 01       	movw	r24, r28
    af10:	85 5b       	subi	r24, 0xB5	; 181
    af12:	9f 4f       	sbci	r25, 0xFF	; 255
    af14:	20 e0       	ldi	r18, 0x00	; 0
    af16:	30 e8       	ldi	r19, 0x80	; 128
    af18:	fc 01       	movw	r30, r24
    af1a:	22 83       	std	Z+2, r18	; 0x02
    af1c:	33 83       	std	Z+3, r19	; 0x03
   as_H00[0][2] = 0;
    af1e:	ce 01       	movw	r24, r28
    af20:	85 5b       	subi	r24, 0xB5	; 181
    af22:	9f 4f       	sbci	r25, 0xFF	; 255
    af24:	fc 01       	movw	r30, r24
    af26:	14 82       	std	Z+4, r1	; 0x04
    af28:	15 82       	std	Z+5, r1	; 0x05
   as_H00[1][0] = 32767;
    af2a:	ce 01       	movw	r24, r28
    af2c:	85 5b       	subi	r24, 0xB5	; 181
    af2e:	9f 4f       	sbci	r25, 0xFF	; 255
    af30:	2f ef       	ldi	r18, 0xFF	; 255
    af32:	3f e7       	ldi	r19, 0x7F	; 127
    af34:	fc 01       	movw	r30, r24
    af36:	26 83       	std	Z+6, r18	; 0x06
    af38:	37 83       	std	Z+7, r19	; 0x07
   as_H00[1][1] = 0;
    af3a:	ce 01       	movw	r24, r28
    af3c:	85 5b       	subi	r24, 0xB5	; 181
    af3e:	9f 4f       	sbci	r25, 0xFF	; 255
    af40:	fc 01       	movw	r30, r24
    af42:	10 86       	std	Z+8, r1	; 0x08
    af44:	11 86       	std	Z+9, r1	; 0x09
   as_H00[1][2] = 0;
    af46:	ce 01       	movw	r24, r28
    af48:	85 5b       	subi	r24, 0xB5	; 181
    af4a:	9f 4f       	sbci	r25, 0xFF	; 255
    af4c:	fc 01       	movw	r30, r24
    af4e:	12 86       	std	Z+10, r1	; 0x0a
    af50:	13 86       	std	Z+11, r1	; 0x0b
   as_H00[2][0] = 0;
    af52:	ce 01       	movw	r24, r28
    af54:	85 5b       	subi	r24, 0xB5	; 181
    af56:	9f 4f       	sbci	r25, 0xFF	; 255
    af58:	fc 01       	movw	r30, r24
    af5a:	14 86       	std	Z+12, r1	; 0x0c
    af5c:	15 86       	std	Z+13, r1	; 0x0d
   as_H00[2][1] = 0;
    af5e:	ce 01       	movw	r24, r28
    af60:	85 5b       	subi	r24, 0xB5	; 181
    af62:	9f 4f       	sbci	r25, 0xFF	; 255
    af64:	fc 01       	movw	r30, r24
    af66:	16 86       	std	Z+14, r1	; 0x0e
    af68:	17 86       	std	Z+15, r1	; 0x0f
   as_H00[2][2] = -32768;
    af6a:	ce 01       	movw	r24, r28
    af6c:	85 5b       	subi	r24, 0xB5	; 181
    af6e:	9f 4f       	sbci	r25, 0xFF	; 255
    af70:	20 e0       	ldi	r18, 0x00	; 0
    af72:	30 e8       	ldi	r19, 0x80	; 128
    af74:	fc 01       	movw	r30, r24
    af76:	20 8b       	std	Z+16, r18	; 0x10
    af78:	31 8b       	std	Z+17, r19	; 0x11

   /*------------------------------------------------------------------------*
    * Compute H'
    *------------------------------------------------------------------------*/
   as_H00T[0][0] = 0;
    af7a:	ce 01       	movw	r24, r28
    af7c:	83 5a       	subi	r24, 0xA3	; 163
    af7e:	9f 4f       	sbci	r25, 0xFF	; 255
    af80:	fc 01       	movw	r30, r24
    af82:	10 82       	st	Z, r1
    af84:	11 82       	std	Z+1, r1	; 0x01
   as_H00T[0][1] = 32767;
    af86:	ce 01       	movw	r24, r28
    af88:	83 5a       	subi	r24, 0xA3	; 163
    af8a:	9f 4f       	sbci	r25, 0xFF	; 255
    af8c:	2f ef       	ldi	r18, 0xFF	; 255
    af8e:	3f e7       	ldi	r19, 0x7F	; 127
    af90:	fc 01       	movw	r30, r24
    af92:	22 83       	std	Z+2, r18	; 0x02
    af94:	33 83       	std	Z+3, r19	; 0x03
   as_H00T[0][2] = 0;
    af96:	ce 01       	movw	r24, r28
    af98:	83 5a       	subi	r24, 0xA3	; 163
    af9a:	9f 4f       	sbci	r25, 0xFF	; 255
    af9c:	fc 01       	movw	r30, r24
    af9e:	14 82       	std	Z+4, r1	; 0x04
    afa0:	15 82       	std	Z+5, r1	; 0x05
   as_H00T[1][0] = -32768;
    afa2:	ce 01       	movw	r24, r28
    afa4:	83 5a       	subi	r24, 0xA3	; 163
    afa6:	9f 4f       	sbci	r25, 0xFF	; 255
    afa8:	20 e0       	ldi	r18, 0x00	; 0
    afaa:	30 e8       	ldi	r19, 0x80	; 128
    afac:	fc 01       	movw	r30, r24
    afae:	26 83       	std	Z+6, r18	; 0x06
    afb0:	37 83       	std	Z+7, r19	; 0x07
   as_H00T[1][1] = 0;
    afb2:	ce 01       	movw	r24, r28
    afb4:	83 5a       	subi	r24, 0xA3	; 163
    afb6:	9f 4f       	sbci	r25, 0xFF	; 255
    afb8:	fc 01       	movw	r30, r24
    afba:	10 86       	std	Z+8, r1	; 0x08
    afbc:	11 86       	std	Z+9, r1	; 0x09
   as_H00T[1][2] = 0;
    afbe:	ce 01       	movw	r24, r28
    afc0:	83 5a       	subi	r24, 0xA3	; 163
    afc2:	9f 4f       	sbci	r25, 0xFF	; 255
    afc4:	fc 01       	movw	r30, r24
    afc6:	12 86       	std	Z+10, r1	; 0x0a
    afc8:	13 86       	std	Z+11, r1	; 0x0b
   as_H00T[2][0] = 0;
    afca:	ce 01       	movw	r24, r28
    afcc:	83 5a       	subi	r24, 0xA3	; 163
    afce:	9f 4f       	sbci	r25, 0xFF	; 255
    afd0:	fc 01       	movw	r30, r24
    afd2:	14 86       	std	Z+12, r1	; 0x0c
    afd4:	15 86       	std	Z+13, r1	; 0x0d
   as_H00T[2][1] = 0;
    afd6:	ce 01       	movw	r24, r28
    afd8:	83 5a       	subi	r24, 0xA3	; 163
    afda:	9f 4f       	sbci	r25, 0xFF	; 255
    afdc:	fc 01       	movw	r30, r24
    afde:	16 86       	std	Z+14, r1	; 0x0e
    afe0:	17 86       	std	Z+15, r1	; 0x0f
   as_H00T[2][2] = -32768;
    afe2:	ce 01       	movw	r24, r28
    afe4:	83 5a       	subi	r24, 0xA3	; 163
    afe6:	9f 4f       	sbci	r25, 0xFF	; 255
    afe8:	20 e0       	ldi	r18, 0x00	; 0
    afea:	30 e8       	ldi	r19, 0x80	; 128
    afec:	fc 01       	movw	r30, r24
    afee:	20 8b       	std	Z+16, r18	; 0x10
    aff0:	31 8b       	std	Z+17, r19	; 0x11

   utl_matTrans16( &as_H00[0][0],
    aff2:	ce 01       	movw	r24, r28
    aff4:	85 5b       	subi	r24, 0xB5	; 181
    aff6:	9f 4f       	sbci	r25, 0xFF	; 255
                   &as_H00T[0][0],
    aff8:	9e 01       	movw	r18, r28
    affa:	23 5a       	subi	r18, 0xA3	; 163
    affc:	3f 4f       	sbci	r19, 0xFF	; 255
   as_H00T[1][2] = 0;
   as_H00T[2][0] = 0;
   as_H00T[2][1] = 0;
   as_H00T[2][2] = -32768;

   utl_matTrans16( &as_H00[0][0],
    affe:	b9 01       	movw	r22, r18
    b000:	43 e0       	ldi	r20, 0x03	; 3
    b002:	23 e0       	ldi	r18, 0x03	; 3
    b004:	0e 94 ec e1 	call	0x1c3d8	; 0x1c3d8 <utl_matTrans16>
                   &as_H00T[0][0],
                   3,
                   3);

   as_tmp[0][0] = gt_insDev.as_P[0][0];
    b008:	20 91 3f 2a 	lds	r18, 0x2A3F
    b00c:	30 91 40 2a 	lds	r19, 0x2A40
    b010:	ce 01       	movw	r24, r28
    b012:	81 59       	subi	r24, 0x91	; 145
    b014:	9f 4f       	sbci	r25, 0xFF	; 255
    b016:	fc 01       	movw	r30, r24
    b018:	20 83       	st	Z, r18
    b01a:	31 83       	std	Z+1, r19	; 0x01
   as_tmp[0][1] = gt_insDev.as_P[0][1];
    b01c:	20 91 41 2a 	lds	r18, 0x2A41
    b020:	30 91 42 2a 	lds	r19, 0x2A42
    b024:	ce 01       	movw	r24, r28
    b026:	81 59       	subi	r24, 0x91	; 145
    b028:	9f 4f       	sbci	r25, 0xFF	; 255
    b02a:	fc 01       	movw	r30, r24
    b02c:	22 83       	std	Z+2, r18	; 0x02
    b02e:	33 83       	std	Z+3, r19	; 0x03
   as_tmp[0][2] = gt_insDev.as_P[0][2];
    b030:	20 91 43 2a 	lds	r18, 0x2A43
    b034:	30 91 44 2a 	lds	r19, 0x2A44
    b038:	ce 01       	movw	r24, r28
    b03a:	81 59       	subi	r24, 0x91	; 145
    b03c:	9f 4f       	sbci	r25, 0xFF	; 255
    b03e:	fc 01       	movw	r30, r24
    b040:	24 83       	std	Z+4, r18	; 0x04
    b042:	35 83       	std	Z+5, r19	; 0x05
   as_tmp[1][0] = gt_insDev.as_P[1][0];
    b044:	20 91 51 2a 	lds	r18, 0x2A51
    b048:	30 91 52 2a 	lds	r19, 0x2A52
    b04c:	ce 01       	movw	r24, r28
    b04e:	81 59       	subi	r24, 0x91	; 145
    b050:	9f 4f       	sbci	r25, 0xFF	; 255
    b052:	fc 01       	movw	r30, r24
    b054:	26 83       	std	Z+6, r18	; 0x06
    b056:	37 83       	std	Z+7, r19	; 0x07
   as_tmp[1][1] = gt_insDev.as_P[1][1];
    b058:	20 91 53 2a 	lds	r18, 0x2A53
    b05c:	30 91 54 2a 	lds	r19, 0x2A54
    b060:	ce 01       	movw	r24, r28
    b062:	81 59       	subi	r24, 0x91	; 145
    b064:	9f 4f       	sbci	r25, 0xFF	; 255
    b066:	fc 01       	movw	r30, r24
    b068:	20 87       	std	Z+8, r18	; 0x08
    b06a:	31 87       	std	Z+9, r19	; 0x09
   as_tmp[1][2] = gt_insDev.as_P[1][2];
    b06c:	20 91 55 2a 	lds	r18, 0x2A55
    b070:	30 91 56 2a 	lds	r19, 0x2A56
    b074:	ce 01       	movw	r24, r28
    b076:	81 59       	subi	r24, 0x91	; 145
    b078:	9f 4f       	sbci	r25, 0xFF	; 255
    b07a:	fc 01       	movw	r30, r24
    b07c:	22 87       	std	Z+10, r18	; 0x0a
    b07e:	33 87       	std	Z+11, r19	; 0x0b
   as_tmp[2][0] = gt_insDev.as_P[2][0];
    b080:	20 91 63 2a 	lds	r18, 0x2A63
    b084:	30 91 64 2a 	lds	r19, 0x2A64
    b088:	ce 01       	movw	r24, r28
    b08a:	81 59       	subi	r24, 0x91	; 145
    b08c:	9f 4f       	sbci	r25, 0xFF	; 255
    b08e:	fc 01       	movw	r30, r24
    b090:	24 87       	std	Z+12, r18	; 0x0c
    b092:	35 87       	std	Z+13, r19	; 0x0d
   as_tmp[2][1] = gt_insDev.as_P[2][1];
    b094:	20 91 65 2a 	lds	r18, 0x2A65
    b098:	30 91 66 2a 	lds	r19, 0x2A66
    b09c:	ce 01       	movw	r24, r28
    b09e:	81 59       	subi	r24, 0x91	; 145
    b0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    b0a2:	fc 01       	movw	r30, r24
    b0a4:	26 87       	std	Z+14, r18	; 0x0e
    b0a6:	37 87       	std	Z+15, r19	; 0x0f
   as_tmp[2][2] = gt_insDev.as_P[2][2];
    b0a8:	20 91 67 2a 	lds	r18, 0x2A67
    b0ac:	30 91 68 2a 	lds	r19, 0x2A68
    b0b0:	ce 01       	movw	r24, r28
    b0b2:	81 59       	subi	r24, 0x91	; 145
    b0b4:	9f 4f       	sbci	r25, 0xFF	; 255
    b0b6:	fc 01       	movw	r30, r24
    b0b8:	20 8b       	std	Z+16, r18	; 0x10
    b0ba:	31 8b       	std	Z+17, r19	; 0x11
    *                | PHT00 |
    * Perform P*H' = | PHT10 |  where PHT00 through PHT20 are 3x3 matrix'
    *                | PHT20 |  this operation is simplified due to the fact
    * that the first 3x3 matrix of H' is the only non-zero matrix.
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp[0][0],
    b0bc:	ce 01       	movw	r24, r28
    b0be:	81 59       	subi	r24, 0x91	; 145
    b0c0:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00T[0][0],
    b0c2:	9e 01       	movw	r18, r28
    b0c4:	23 5a       	subi	r18, 0xA3	; 163
    b0c6:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp1[0][0],
    b0c8:	fe 01       	movw	r30, r28
    b0ca:	ef 57       	subi	r30, 0x7F	; 127
    b0cc:	ff 4f       	sbci	r31, 0xFF	; 255
    *                | PHT00 |
    * Perform P*H' = | PHT10 |  where PHT00 through PHT20 are 3x3 matrix'
    *                | PHT20 |  this operation is simplified due to the fact
    * that the first 3x3 matrix of H' is the only non-zero matrix.
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp[0][0],
    b0ce:	63 e0       	ldi	r22, 0x03	; 3
    b0d0:	43 e0       	ldi	r20, 0x03	; 3
    b0d2:	03 e0       	ldi	r16, 0x03	; 3
    b0d4:	0f 2e       	mov	r0, r31
    b0d6:	f3 e0       	ldi	r31, 0x03	; 3
    b0d8:	ef 2e       	mov	r14, r31
    b0da:	f0 2d       	mov	r31, r0
    b0dc:	6f 01       	movw	r12, r30
    b0de:	aa 24       	eor	r10, r10
    b0e0:	a3 94       	inc	r10
    b0e2:	0f 2e       	mov	r0, r31
    b0e4:	ff e0       	ldi	r31, 0x0F	; 15
    b0e6:	8f 2e       	mov	r8, r31
    b0e8:	f0 2d       	mov	r31, r0
    b0ea:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_tmp1[0][0],
                        1,
                        15);

   as_tmp[0][0] = gt_insDev.as_P[3][0];
    b0ee:	20 91 75 2a 	lds	r18, 0x2A75
    b0f2:	30 91 76 2a 	lds	r19, 0x2A76
    b0f6:	ce 01       	movw	r24, r28
    b0f8:	81 59       	subi	r24, 0x91	; 145
    b0fa:	9f 4f       	sbci	r25, 0xFF	; 255
    b0fc:	fc 01       	movw	r30, r24
    b0fe:	20 83       	st	Z, r18
    b100:	31 83       	std	Z+1, r19	; 0x01
   as_tmp[0][1] = gt_insDev.as_P[3][1];
    b102:	20 91 77 2a 	lds	r18, 0x2A77
    b106:	30 91 78 2a 	lds	r19, 0x2A78
    b10a:	ce 01       	movw	r24, r28
    b10c:	81 59       	subi	r24, 0x91	; 145
    b10e:	9f 4f       	sbci	r25, 0xFF	; 255
    b110:	fc 01       	movw	r30, r24
    b112:	22 83       	std	Z+2, r18	; 0x02
    b114:	33 83       	std	Z+3, r19	; 0x03
   as_tmp[0][2] = gt_insDev.as_P[3][2];
    b116:	20 91 79 2a 	lds	r18, 0x2A79
    b11a:	30 91 7a 2a 	lds	r19, 0x2A7A
    b11e:	ce 01       	movw	r24, r28
    b120:	81 59       	subi	r24, 0x91	; 145
    b122:	9f 4f       	sbci	r25, 0xFF	; 255
    b124:	fc 01       	movw	r30, r24
    b126:	24 83       	std	Z+4, r18	; 0x04
    b128:	35 83       	std	Z+5, r19	; 0x05
   as_tmp[1][0] = gt_insDev.as_P[4][0];
    b12a:	20 91 87 2a 	lds	r18, 0x2A87
    b12e:	30 91 88 2a 	lds	r19, 0x2A88
    b132:	ce 01       	movw	r24, r28
    b134:	81 59       	subi	r24, 0x91	; 145
    b136:	9f 4f       	sbci	r25, 0xFF	; 255
    b138:	fc 01       	movw	r30, r24
    b13a:	26 83       	std	Z+6, r18	; 0x06
    b13c:	37 83       	std	Z+7, r19	; 0x07
   as_tmp[1][1] = gt_insDev.as_P[4][1];
    b13e:	20 91 89 2a 	lds	r18, 0x2A89
    b142:	30 91 8a 2a 	lds	r19, 0x2A8A
    b146:	ce 01       	movw	r24, r28
    b148:	81 59       	subi	r24, 0x91	; 145
    b14a:	9f 4f       	sbci	r25, 0xFF	; 255
    b14c:	fc 01       	movw	r30, r24
    b14e:	20 87       	std	Z+8, r18	; 0x08
    b150:	31 87       	std	Z+9, r19	; 0x09
   as_tmp[1][2] = gt_insDev.as_P[4][2];
    b152:	20 91 8b 2a 	lds	r18, 0x2A8B
    b156:	30 91 8c 2a 	lds	r19, 0x2A8C
    b15a:	ce 01       	movw	r24, r28
    b15c:	81 59       	subi	r24, 0x91	; 145
    b15e:	9f 4f       	sbci	r25, 0xFF	; 255
    b160:	fc 01       	movw	r30, r24
    b162:	22 87       	std	Z+10, r18	; 0x0a
    b164:	33 87       	std	Z+11, r19	; 0x0b
   as_tmp[2][0] = gt_insDev.as_P[5][0];
    b166:	20 91 99 2a 	lds	r18, 0x2A99
    b16a:	30 91 9a 2a 	lds	r19, 0x2A9A
    b16e:	ce 01       	movw	r24, r28
    b170:	81 59       	subi	r24, 0x91	; 145
    b172:	9f 4f       	sbci	r25, 0xFF	; 255
    b174:	fc 01       	movw	r30, r24
    b176:	24 87       	std	Z+12, r18	; 0x0c
    b178:	35 87       	std	Z+13, r19	; 0x0d
   as_tmp[2][1] = gt_insDev.as_P[5][1];
    b17a:	20 91 9b 2a 	lds	r18, 0x2A9B
    b17e:	30 91 9c 2a 	lds	r19, 0x2A9C
    b182:	ce 01       	movw	r24, r28
    b184:	81 59       	subi	r24, 0x91	; 145
    b186:	9f 4f       	sbci	r25, 0xFF	; 255
    b188:	fc 01       	movw	r30, r24
    b18a:	26 87       	std	Z+14, r18	; 0x0e
    b18c:	37 87       	std	Z+15, r19	; 0x0f
   as_tmp[2][2] = gt_insDev.as_P[5][2];
    b18e:	20 91 9d 2a 	lds	r18, 0x2A9D
    b192:	30 91 9e 2a 	lds	r19, 0x2A9E
    b196:	ce 01       	movw	r24, r28
    b198:	81 59       	subi	r24, 0x91	; 145
    b19a:	9f 4f       	sbci	r25, 0xFF	; 255
    b19c:	fc 01       	movw	r30, r24
    b19e:	20 8b       	std	Z+16, r18	; 0x10
    b1a0:	31 8b       	std	Z+17, r19	; 0x11

   utl_matMult16x16_16( &as_tmp[0][0],
    b1a2:	ce 01       	movw	r24, r28
    b1a4:	81 59       	subi	r24, 0x91	; 145
    b1a6:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00T[0][0],
    b1a8:	9e 01       	movw	r18, r28
    b1aa:	23 5a       	subi	r18, 0xA3	; 163
    b1ac:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp2[0][0],
    b1ae:	fe 01       	movw	r30, r28
    b1b0:	ed 56       	subi	r30, 0x6D	; 109
    b1b2:	ff 4f       	sbci	r31, 0xFF	; 255
   as_tmp[1][2] = gt_insDev.as_P[4][2];
   as_tmp[2][0] = gt_insDev.as_P[5][0];
   as_tmp[2][1] = gt_insDev.as_P[5][1];
   as_tmp[2][2] = gt_insDev.as_P[5][2];

   utl_matMult16x16_16( &as_tmp[0][0],
    b1b4:	63 e0       	ldi	r22, 0x03	; 3
    b1b6:	43 e0       	ldi	r20, 0x03	; 3
    b1b8:	03 e0       	ldi	r16, 0x03	; 3
    b1ba:	0f 2e       	mov	r0, r31
    b1bc:	f3 e0       	ldi	r31, 0x03	; 3
    b1be:	ef 2e       	mov	r14, r31
    b1c0:	f0 2d       	mov	r31, r0
    b1c2:	6f 01       	movw	r12, r30
    b1c4:	aa 24       	eor	r10, r10
    b1c6:	a3 94       	inc	r10
    b1c8:	0f 2e       	mov	r0, r31
    b1ca:	ff e0       	ldi	r31, 0x0F	; 15
    b1cc:	8f 2e       	mov	r8, r31
    b1ce:	f0 2d       	mov	r31, r0
    b1d0:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_tmp2[0][0],
                        1,
                        15);

   as_tmp[0][0] = gt_insDev.as_P[6][0];
    b1d4:	20 91 ab 2a 	lds	r18, 0x2AAB
    b1d8:	30 91 ac 2a 	lds	r19, 0x2AAC
    b1dc:	ce 01       	movw	r24, r28
    b1de:	81 59       	subi	r24, 0x91	; 145
    b1e0:	9f 4f       	sbci	r25, 0xFF	; 255
    b1e2:	fc 01       	movw	r30, r24
    b1e4:	20 83       	st	Z, r18
    b1e6:	31 83       	std	Z+1, r19	; 0x01
   as_tmp[0][1] = gt_insDev.as_P[6][1];
    b1e8:	20 91 ad 2a 	lds	r18, 0x2AAD
    b1ec:	30 91 ae 2a 	lds	r19, 0x2AAE
    b1f0:	ce 01       	movw	r24, r28
    b1f2:	81 59       	subi	r24, 0x91	; 145
    b1f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b1f6:	fc 01       	movw	r30, r24
    b1f8:	22 83       	std	Z+2, r18	; 0x02
    b1fa:	33 83       	std	Z+3, r19	; 0x03
   as_tmp[0][2] = gt_insDev.as_P[6][2];
    b1fc:	20 91 af 2a 	lds	r18, 0x2AAF
    b200:	30 91 b0 2a 	lds	r19, 0x2AB0
    b204:	ce 01       	movw	r24, r28
    b206:	81 59       	subi	r24, 0x91	; 145
    b208:	9f 4f       	sbci	r25, 0xFF	; 255
    b20a:	fc 01       	movw	r30, r24
    b20c:	24 83       	std	Z+4, r18	; 0x04
    b20e:	35 83       	std	Z+5, r19	; 0x05
   as_tmp[1][0] = gt_insDev.as_P[7][0];
    b210:	20 91 bd 2a 	lds	r18, 0x2ABD
    b214:	30 91 be 2a 	lds	r19, 0x2ABE
    b218:	ce 01       	movw	r24, r28
    b21a:	81 59       	subi	r24, 0x91	; 145
    b21c:	9f 4f       	sbci	r25, 0xFF	; 255
    b21e:	fc 01       	movw	r30, r24
    b220:	26 83       	std	Z+6, r18	; 0x06
    b222:	37 83       	std	Z+7, r19	; 0x07
   as_tmp[1][1] = gt_insDev.as_P[7][1];
    b224:	20 91 bf 2a 	lds	r18, 0x2ABF
    b228:	30 91 c0 2a 	lds	r19, 0x2AC0
    b22c:	ce 01       	movw	r24, r28
    b22e:	81 59       	subi	r24, 0x91	; 145
    b230:	9f 4f       	sbci	r25, 0xFF	; 255
    b232:	fc 01       	movw	r30, r24
    b234:	20 87       	std	Z+8, r18	; 0x08
    b236:	31 87       	std	Z+9, r19	; 0x09
   as_tmp[1][2] = gt_insDev.as_P[7][2];
    b238:	20 91 c1 2a 	lds	r18, 0x2AC1
    b23c:	30 91 c2 2a 	lds	r19, 0x2AC2
    b240:	ce 01       	movw	r24, r28
    b242:	81 59       	subi	r24, 0x91	; 145
    b244:	9f 4f       	sbci	r25, 0xFF	; 255
    b246:	fc 01       	movw	r30, r24
    b248:	22 87       	std	Z+10, r18	; 0x0a
    b24a:	33 87       	std	Z+11, r19	; 0x0b
   as_tmp[2][0] = gt_insDev.as_P[8][0];
    b24c:	20 91 cf 2a 	lds	r18, 0x2ACF
    b250:	30 91 d0 2a 	lds	r19, 0x2AD0
    b254:	ce 01       	movw	r24, r28
    b256:	81 59       	subi	r24, 0x91	; 145
    b258:	9f 4f       	sbci	r25, 0xFF	; 255
    b25a:	fc 01       	movw	r30, r24
    b25c:	24 87       	std	Z+12, r18	; 0x0c
    b25e:	35 87       	std	Z+13, r19	; 0x0d
   as_tmp[2][1] = gt_insDev.as_P[8][1];
    b260:	20 91 d1 2a 	lds	r18, 0x2AD1
    b264:	30 91 d2 2a 	lds	r19, 0x2AD2
    b268:	ce 01       	movw	r24, r28
    b26a:	81 59       	subi	r24, 0x91	; 145
    b26c:	9f 4f       	sbci	r25, 0xFF	; 255
    b26e:	fc 01       	movw	r30, r24
    b270:	26 87       	std	Z+14, r18	; 0x0e
    b272:	37 87       	std	Z+15, r19	; 0x0f
   as_tmp[2][2] = gt_insDev.as_P[8][2];
    b274:	20 91 d3 2a 	lds	r18, 0x2AD3
    b278:	30 91 d4 2a 	lds	r19, 0x2AD4
    b27c:	ce 01       	movw	r24, r28
    b27e:	81 59       	subi	r24, 0x91	; 145
    b280:	9f 4f       	sbci	r25, 0xFF	; 255
    b282:	fc 01       	movw	r30, r24
    b284:	20 8b       	std	Z+16, r18	; 0x10
    b286:	31 8b       	std	Z+17, r19	; 0x11

   utl_matMult16x16_16( &as_tmp[0][0],
    b288:	ce 01       	movw	r24, r28
    b28a:	81 59       	subi	r24, 0x91	; 145
    b28c:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00T[0][0],
    b28e:	9e 01       	movw	r18, r28
    b290:	23 5a       	subi	r18, 0xA3	; 163
    b292:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp3[0][0],
    b294:	fe 01       	movw	r30, r28
    b296:	eb 55       	subi	r30, 0x5B	; 91
    b298:	ff 4f       	sbci	r31, 0xFF	; 255
   as_tmp[1][2] = gt_insDev.as_P[7][2];
   as_tmp[2][0] = gt_insDev.as_P[8][0];
   as_tmp[2][1] = gt_insDev.as_P[8][1];
   as_tmp[2][2] = gt_insDev.as_P[8][2];

   utl_matMult16x16_16( &as_tmp[0][0],
    b29a:	63 e0       	ldi	r22, 0x03	; 3
    b29c:	43 e0       	ldi	r20, 0x03	; 3
    b29e:	03 e0       	ldi	r16, 0x03	; 3
    b2a0:	0f 2e       	mov	r0, r31
    b2a2:	f3 e0       	ldi	r31, 0x03	; 3
    b2a4:	ef 2e       	mov	r14, r31
    b2a6:	f0 2d       	mov	r31, r0
    b2a8:	6f 01       	movw	r12, r30
    b2aa:	aa 24       	eor	r10, r10
    b2ac:	a3 94       	inc	r10
    b2ae:	0f 2e       	mov	r0, r31
    b2b0:	ff e0       	ldi	r31, 0x0F	; 15
    b2b2:	8f 2e       	mov	r8, r31
    b2b4:	f0 2d       	mov	r31, r0
    b2b6:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        15);

   /*------------------------------------------------------------------------*
    * Compute H*P*H'
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_H00[0][0],
    b2ba:	ce 01       	movw	r24, r28
    b2bc:	85 5b       	subi	r24, 0xB5	; 181
    b2be:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_tmp1[0][0],
    b2c0:	9e 01       	movw	r18, r28
    b2c2:	2f 57       	subi	r18, 0x7F	; 127
    b2c4:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp[0][0],
    b2c6:	fe 01       	movw	r30, r28
    b2c8:	e1 59       	subi	r30, 0x91	; 145
    b2ca:	ff 4f       	sbci	r31, 0xFF	; 255
                        15);

   /*------------------------------------------------------------------------*
    * Compute H*P*H'
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_H00[0][0],
    b2cc:	63 e0       	ldi	r22, 0x03	; 3
    b2ce:	43 e0       	ldi	r20, 0x03	; 3
    b2d0:	03 e0       	ldi	r16, 0x03	; 3
    b2d2:	0f 2e       	mov	r0, r31
    b2d4:	f3 e0       	ldi	r31, 0x03	; 3
    b2d6:	ef 2e       	mov	r14, r31
    b2d8:	f0 2d       	mov	r31, r0
    b2da:	6f 01       	movw	r12, r30
    b2dc:	aa 24       	eor	r10, r10
    b2de:	a3 94       	inc	r10
    b2e0:	0f 2e       	mov	r0, r31
    b2e2:	ff e0       	ldi	r31, 0x0F	; 15
    b2e4:	8f 2e       	mov	r8, r31
    b2e6:	f0 2d       	mov	r31, r0
    b2e8:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        15);

   /*------------------------------------------------------------------------*
    * Compute H*P*H' + R
    *------------------------------------------------------------------------*/
   ai_T[0] = (int32_t)as_tmp[0][0] + (int32_t)ai_R[0];
    b2ec:	ce 01       	movw	r24, r28
    b2ee:	81 59       	subi	r24, 0x91	; 145
    b2f0:	9f 4f       	sbci	r25, 0xFF	; 255
    b2f2:	fc 01       	movw	r30, r24
    b2f4:	80 81       	ld	r24, Z
    b2f6:	91 81       	ldd	r25, Z+1	; 0x01
    b2f8:	9c 01       	movw	r18, r24
    b2fa:	44 27       	eor	r20, r20
    b2fc:	37 fd       	sbrc	r19, 7
    b2fe:	40 95       	com	r20
    b300:	54 2f       	mov	r21, r20
    b302:	ce 01       	movw	r24, r28
    b304:	cf 96       	adiw	r24, 0x3f	; 63
    b306:	fc 01       	movw	r30, r24
    b308:	80 81       	ld	r24, Z
    b30a:	91 81       	ldd	r25, Z+1	; 0x01
    b30c:	a2 81       	ldd	r26, Z+2	; 0x02
    b30e:	b3 81       	ldd	r27, Z+3	; 0x03
    b310:	82 0f       	add	r24, r18
    b312:	93 1f       	adc	r25, r19
    b314:	a4 1f       	adc	r26, r20
    b316:	b5 1f       	adc	r27, r21
    b318:	9e 01       	movw	r18, r28
    b31a:	2f 5c       	subi	r18, 0xCF	; 207
    b31c:	3d 4f       	sbci	r19, 0xFD	; 253
    b31e:	f9 01       	movw	r30, r18
    b320:	80 83       	st	Z, r24
    b322:	91 83       	std	Z+1, r25	; 0x01
    b324:	a2 83       	std	Z+2, r26	; 0x02
    b326:	b3 83       	std	Z+3, r27	; 0x03
   ai_T[1] = (int32_t)as_tmp[1][1] + (int32_t)ai_R[1];
    b328:	ce 01       	movw	r24, r28
    b32a:	81 59       	subi	r24, 0x91	; 145
    b32c:	9f 4f       	sbci	r25, 0xFF	; 255
    b32e:	fc 01       	movw	r30, r24
    b330:	80 85       	ldd	r24, Z+8	; 0x08
    b332:	91 85       	ldd	r25, Z+9	; 0x09
    b334:	9c 01       	movw	r18, r24
    b336:	44 27       	eor	r20, r20
    b338:	37 fd       	sbrc	r19, 7
    b33a:	40 95       	com	r20
    b33c:	54 2f       	mov	r21, r20
    b33e:	ce 01       	movw	r24, r28
    b340:	8d 5b       	subi	r24, 0xBD	; 189
    b342:	9f 4f       	sbci	r25, 0xFF	; 255
    b344:	fc 01       	movw	r30, r24
    b346:	80 81       	ld	r24, Z
    b348:	91 81       	ldd	r25, Z+1	; 0x01
    b34a:	a2 81       	ldd	r26, Z+2	; 0x02
    b34c:	b3 81       	ldd	r27, Z+3	; 0x03
    b34e:	82 0f       	add	r24, r18
    b350:	93 1f       	adc	r25, r19
    b352:	a4 1f       	adc	r26, r20
    b354:	b5 1f       	adc	r27, r21
    b356:	9e 01       	movw	r18, r28
    b358:	2f 5c       	subi	r18, 0xCF	; 207
    b35a:	3d 4f       	sbci	r19, 0xFD	; 253
    b35c:	f9 01       	movw	r30, r18
    b35e:	84 83       	std	Z+4, r24	; 0x04
    b360:	95 83       	std	Z+5, r25	; 0x05
    b362:	a6 83       	std	Z+6, r26	; 0x06
    b364:	b7 83       	std	Z+7, r27	; 0x07
   ai_T[2] = (int32_t)as_tmp[2][2] + (int32_t)ai_R[2];
    b366:	ce 01       	movw	r24, r28
    b368:	81 59       	subi	r24, 0x91	; 145
    b36a:	9f 4f       	sbci	r25, 0xFF	; 255
    b36c:	fc 01       	movw	r30, r24
    b36e:	80 89       	ldd	r24, Z+16	; 0x10
    b370:	91 89       	ldd	r25, Z+17	; 0x11
    b372:	9c 01       	movw	r18, r24
    b374:	44 27       	eor	r20, r20
    b376:	37 fd       	sbrc	r19, 7
    b378:	40 95       	com	r20
    b37a:	54 2f       	mov	r21, r20
    b37c:	ce 01       	movw	r24, r28
    b37e:	89 5b       	subi	r24, 0xB9	; 185
    b380:	9f 4f       	sbci	r25, 0xFF	; 255
    b382:	fc 01       	movw	r30, r24
    b384:	80 81       	ld	r24, Z
    b386:	91 81       	ldd	r25, Z+1	; 0x01
    b388:	a2 81       	ldd	r26, Z+2	; 0x02
    b38a:	b3 81       	ldd	r27, Z+3	; 0x03
    b38c:	82 0f       	add	r24, r18
    b38e:	93 1f       	adc	r25, r19
    b390:	a4 1f       	adc	r26, r20
    b392:	b5 1f       	adc	r27, r21
    b394:	9e 01       	movw	r18, r28
    b396:	2f 5c       	subi	r18, 0xCF	; 207
    b398:	3d 4f       	sbci	r19, 0xFD	; 253
    b39a:	f9 01       	movw	r30, r18
    b39c:	80 87       	std	Z+8, r24	; 0x08
    b39e:	91 87       	std	Z+9, r25	; 0x09
    b3a0:	a2 87       	std	Z+10, r26	; 0x0a
    b3a2:	b3 87       	std	Z+11, r27	; 0x0b

   /*------------------------------------------------------------------------*
    * Since the off diagonal elements of H*P*H' are small, they are
    * ignored in order to avoid a matrix inverse operation.
    *------------------------------------------------------------------------*/
   i_tmp = (((int32_t)1<<15)*(int32_t)1024) / ai_T[0]; /*Q10*/
    b3a4:	ce 01       	movw	r24, r28
    b3a6:	8f 5c       	subi	r24, 0xCF	; 207
    b3a8:	9d 4f       	sbci	r25, 0xFD	; 253
    b3aa:	fc 01       	movw	r30, r24
    b3ac:	20 81       	ld	r18, Z
    b3ae:	31 81       	ldd	r19, Z+1	; 0x01
    b3b0:	42 81       	ldd	r20, Z+2	; 0x02
    b3b2:	53 81       	ldd	r21, Z+3	; 0x03
    b3b4:	80 e0       	ldi	r24, 0x00	; 0
    b3b6:	90 e0       	ldi	r25, 0x00	; 0
    b3b8:	a0 e0       	ldi	r26, 0x00	; 0
    b3ba:	b2 e0       	ldi	r27, 0x02	; 2
    b3bc:	bc 01       	movw	r22, r24
    b3be:	cd 01       	movw	r24, r26
    b3c0:	0e 94 62 fa 	call	0x1f4c4	; 0x1f4c4 <__divmodsi4>
    b3c4:	29 83       	std	Y+1, r18	; 0x01
    b3c6:	3a 83       	std	Y+2, r19	; 0x02
    b3c8:	4b 83       	std	Y+3, r20	; 0x03
    b3ca:	5c 83       	std	Y+4, r21	; 0x04

   if( i_tmp > 32767)
    b3cc:	89 81       	ldd	r24, Y+1	; 0x01
    b3ce:	9a 81       	ldd	r25, Y+2	; 0x02
    b3d0:	ab 81       	ldd	r26, Y+3	; 0x03
    b3d2:	bc 81       	ldd	r27, Y+4	; 0x04
    b3d4:	80 30       	cpi	r24, 0x00	; 0
    b3d6:	f0 e8       	ldi	r31, 0x80	; 128
    b3d8:	9f 07       	cpc	r25, r31
    b3da:	f0 e0       	ldi	r31, 0x00	; 0
    b3dc:	af 07       	cpc	r26, r31
    b3de:	f0 e0       	ldi	r31, 0x00	; 0
    b3e0:	bf 07       	cpc	r27, r31
    b3e2:	44 f0       	brlt	.+16     	; 0xb3f4 <eSKalmanFilterCorrect+0x652>
      i_tmp = 32767;
    b3e4:	8f ef       	ldi	r24, 0xFF	; 255
    b3e6:	9f e7       	ldi	r25, 0x7F	; 127
    b3e8:	a0 e0       	ldi	r26, 0x00	; 0
    b3ea:	b0 e0       	ldi	r27, 0x00	; 0
    b3ec:	89 83       	std	Y+1, r24	; 0x01
    b3ee:	9a 83       	std	Y+2, r25	; 0x02
    b3f0:	ab 83       	std	Y+3, r26	; 0x03
    b3f2:	bc 83       	std	Y+4, r27	; 0x04

   as_tmp[0][0] = i_tmp;
    b3f4:	29 81       	ldd	r18, Y+1	; 0x01
    b3f6:	3a 81       	ldd	r19, Y+2	; 0x02
    b3f8:	ce 01       	movw	r24, r28
    b3fa:	81 59       	subi	r24, 0x91	; 145
    b3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b3fe:	fc 01       	movw	r30, r24
    b400:	20 83       	st	Z, r18
    b402:	31 83       	std	Z+1, r19	; 0x01

   i_tmp = (((int32_t)1<<15)*(int32_t)1024) / ai_T[1]; /*Q10*/
    b404:	ce 01       	movw	r24, r28
    b406:	8f 5c       	subi	r24, 0xCF	; 207
    b408:	9d 4f       	sbci	r25, 0xFD	; 253
    b40a:	fc 01       	movw	r30, r24
    b40c:	24 81       	ldd	r18, Z+4	; 0x04
    b40e:	35 81       	ldd	r19, Z+5	; 0x05
    b410:	46 81       	ldd	r20, Z+6	; 0x06
    b412:	57 81       	ldd	r21, Z+7	; 0x07
    b414:	80 e0       	ldi	r24, 0x00	; 0
    b416:	90 e0       	ldi	r25, 0x00	; 0
    b418:	a0 e0       	ldi	r26, 0x00	; 0
    b41a:	b2 e0       	ldi	r27, 0x02	; 2
    b41c:	bc 01       	movw	r22, r24
    b41e:	cd 01       	movw	r24, r26
    b420:	0e 94 62 fa 	call	0x1f4c4	; 0x1f4c4 <__divmodsi4>
    b424:	29 83       	std	Y+1, r18	; 0x01
    b426:	3a 83       	std	Y+2, r19	; 0x02
    b428:	4b 83       	std	Y+3, r20	; 0x03
    b42a:	5c 83       	std	Y+4, r21	; 0x04

   if( i_tmp > 32767)
    b42c:	89 81       	ldd	r24, Y+1	; 0x01
    b42e:	9a 81       	ldd	r25, Y+2	; 0x02
    b430:	ab 81       	ldd	r26, Y+3	; 0x03
    b432:	bc 81       	ldd	r27, Y+4	; 0x04
    b434:	80 30       	cpi	r24, 0x00	; 0
    b436:	f0 e8       	ldi	r31, 0x80	; 128
    b438:	9f 07       	cpc	r25, r31
    b43a:	f0 e0       	ldi	r31, 0x00	; 0
    b43c:	af 07       	cpc	r26, r31
    b43e:	f0 e0       	ldi	r31, 0x00	; 0
    b440:	bf 07       	cpc	r27, r31
    b442:	44 f0       	brlt	.+16     	; 0xb454 <eSKalmanFilterCorrect+0x6b2>
      i_tmp = 32767;
    b444:	8f ef       	ldi	r24, 0xFF	; 255
    b446:	9f e7       	ldi	r25, 0x7F	; 127
    b448:	a0 e0       	ldi	r26, 0x00	; 0
    b44a:	b0 e0       	ldi	r27, 0x00	; 0
    b44c:	89 83       	std	Y+1, r24	; 0x01
    b44e:	9a 83       	std	Y+2, r25	; 0x02
    b450:	ab 83       	std	Y+3, r26	; 0x03
    b452:	bc 83       	std	Y+4, r27	; 0x04

   as_tmp[1][1] = i_tmp;
    b454:	29 81       	ldd	r18, Y+1	; 0x01
    b456:	3a 81       	ldd	r19, Y+2	; 0x02
    b458:	ce 01       	movw	r24, r28
    b45a:	81 59       	subi	r24, 0x91	; 145
    b45c:	9f 4f       	sbci	r25, 0xFF	; 255
    b45e:	fc 01       	movw	r30, r24
    b460:	20 87       	std	Z+8, r18	; 0x08
    b462:	31 87       	std	Z+9, r19	; 0x09

   i_tmp = (((int32_t)1<<15)*(int32_t)1024) / ai_T[2]; /*Q10*/
    b464:	ce 01       	movw	r24, r28
    b466:	8f 5c       	subi	r24, 0xCF	; 207
    b468:	9d 4f       	sbci	r25, 0xFD	; 253
    b46a:	fc 01       	movw	r30, r24
    b46c:	20 85       	ldd	r18, Z+8	; 0x08
    b46e:	31 85       	ldd	r19, Z+9	; 0x09
    b470:	42 85       	ldd	r20, Z+10	; 0x0a
    b472:	53 85       	ldd	r21, Z+11	; 0x0b
    b474:	80 e0       	ldi	r24, 0x00	; 0
    b476:	90 e0       	ldi	r25, 0x00	; 0
    b478:	a0 e0       	ldi	r26, 0x00	; 0
    b47a:	b2 e0       	ldi	r27, 0x02	; 2
    b47c:	bc 01       	movw	r22, r24
    b47e:	cd 01       	movw	r24, r26
    b480:	0e 94 62 fa 	call	0x1f4c4	; 0x1f4c4 <__divmodsi4>
    b484:	29 83       	std	Y+1, r18	; 0x01
    b486:	3a 83       	std	Y+2, r19	; 0x02
    b488:	4b 83       	std	Y+3, r20	; 0x03
    b48a:	5c 83       	std	Y+4, r21	; 0x04

   if( i_tmp > 32767)
    b48c:	89 81       	ldd	r24, Y+1	; 0x01
    b48e:	9a 81       	ldd	r25, Y+2	; 0x02
    b490:	ab 81       	ldd	r26, Y+3	; 0x03
    b492:	bc 81       	ldd	r27, Y+4	; 0x04
    b494:	80 30       	cpi	r24, 0x00	; 0
    b496:	f0 e8       	ldi	r31, 0x80	; 128
    b498:	9f 07       	cpc	r25, r31
    b49a:	f0 e0       	ldi	r31, 0x00	; 0
    b49c:	af 07       	cpc	r26, r31
    b49e:	f0 e0       	ldi	r31, 0x00	; 0
    b4a0:	bf 07       	cpc	r27, r31
    b4a2:	44 f0       	brlt	.+16     	; 0xb4b4 <eSKalmanFilterCorrect+0x712>
      i_tmp = 32767;
    b4a4:	8f ef       	ldi	r24, 0xFF	; 255
    b4a6:	9f e7       	ldi	r25, 0x7F	; 127
    b4a8:	a0 e0       	ldi	r26, 0x00	; 0
    b4aa:	b0 e0       	ldi	r27, 0x00	; 0
    b4ac:	89 83       	std	Y+1, r24	; 0x01
    b4ae:	9a 83       	std	Y+2, r25	; 0x02
    b4b0:	ab 83       	std	Y+3, r26	; 0x03
    b4b2:	bc 83       	std	Y+4, r27	; 0x04

   as_tmp[2][2] = i_tmp;
    b4b4:	29 81       	ldd	r18, Y+1	; 0x01
    b4b6:	3a 81       	ldd	r19, Y+2	; 0x02
    b4b8:	ce 01       	movw	r24, r28
    b4ba:	81 59       	subi	r24, 0x91	; 145
    b4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    b4be:	fc 01       	movw	r30, r24
    b4c0:	20 8b       	std	Z+16, r18	; 0x10
    b4c2:	31 8b       	std	Z+17, r19	; 0x11
   /*------------------------------------------------------------------------*
    * Update the Kalman gain
    * K = (P*H')/(H*P*H'+ R)
    * [1] eq 3.15
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp1[0][0], /*Q15*/
    b4c4:	ce 01       	movw	r24, r28
    b4c6:	8f 57       	subi	r24, 0x7F	; 127
    b4c8:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_tmp[0][0],  /*Q10*/
    b4ca:	9e 01       	movw	r18, r28
    b4cc:	21 59       	subi	r18, 0x91	; 145
    b4ce:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_K00[0][0],  /*Q15*/
    b4d0:	fe 01       	movw	r30, r28
    b4d2:	e9 54       	subi	r30, 0x49	; 73
    b4d4:	ff 4f       	sbci	r31, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * Update the Kalman gain
    * K = (P*H')/(H*P*H'+ R)
    * [1] eq 3.15
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_tmp1[0][0], /*Q15*/
    b4d6:	63 e0       	ldi	r22, 0x03	; 3
    b4d8:	43 e0       	ldi	r20, 0x03	; 3
    b4da:	03 e0       	ldi	r16, 0x03	; 3
    b4dc:	0f 2e       	mov	r0, r31
    b4de:	f3 e0       	ldi	r31, 0x03	; 3
    b4e0:	ef 2e       	mov	r14, r31
    b4e2:	f0 2d       	mov	r31, r0
    b4e4:	6f 01       	movw	r12, r30
    b4e6:	aa 24       	eor	r10, r10
    b4e8:	0f 2e       	mov	r0, r31
    b4ea:	fa e0       	ldi	r31, 0x0A	; 10
    b4ec:	8f 2e       	mov	r8, r31
    b4ee:	f0 2d       	mov	r31, r0
    b4f0:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_K00[0][0],  /*Q15*/
                        0,
                        10);

   utl_matMult16x16_16( &as_tmp2[0][0], /*Q15*/
    b4f4:	ce 01       	movw	r24, r28
    b4f6:	8d 56       	subi	r24, 0x6D	; 109
    b4f8:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_tmp[0][0],  /*Q10*/
    b4fa:	9e 01       	movw	r18, r28
    b4fc:	21 59       	subi	r18, 0x91	; 145
    b4fe:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_K10[0][0],  /*Q15*/
    b500:	fe 01       	movw	r30, r28
    b502:	e7 53       	subi	r30, 0x37	; 55
    b504:	ff 4f       	sbci	r31, 0xFF	; 255
                        3,
                        &as_K00[0][0],  /*Q15*/
                        0,
                        10);

   utl_matMult16x16_16( &as_tmp2[0][0], /*Q15*/
    b506:	63 e0       	ldi	r22, 0x03	; 3
    b508:	43 e0       	ldi	r20, 0x03	; 3
    b50a:	03 e0       	ldi	r16, 0x03	; 3
    b50c:	0f 2e       	mov	r0, r31
    b50e:	f3 e0       	ldi	r31, 0x03	; 3
    b510:	ef 2e       	mov	r14, r31
    b512:	f0 2d       	mov	r31, r0
    b514:	6f 01       	movw	r12, r30
    b516:	aa 24       	eor	r10, r10
    b518:	0f 2e       	mov	r0, r31
    b51a:	fa e0       	ldi	r31, 0x0A	; 10
    b51c:	8f 2e       	mov	r8, r31
    b51e:	f0 2d       	mov	r31, r0
    b520:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_K10[0][0],  /*Q15*/
                        0,
                        10);

   utl_matMult16x16_16( &as_tmp3[0][0], /*Q15*/
    b524:	ce 01       	movw	r24, r28
    b526:	8b 55       	subi	r24, 0x5B	; 91
    b528:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_tmp[0][0],  /*Q10*/
    b52a:	9e 01       	movw	r18, r28
    b52c:	21 59       	subi	r18, 0x91	; 145
    b52e:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_K20[0][0],  /*Q15*/
    b530:	fe 01       	movw	r30, r28
    b532:	e5 52       	subi	r30, 0x25	; 37
    b534:	ff 4f       	sbci	r31, 0xFF	; 255
                        3,
                        &as_K10[0][0],  /*Q15*/
                        0,
                        10);

   utl_matMult16x16_16( &as_tmp3[0][0], /*Q15*/
    b536:	63 e0       	ldi	r22, 0x03	; 3
    b538:	43 e0       	ldi	r20, 0x03	; 3
    b53a:	03 e0       	ldi	r16, 0x03	; 3
    b53c:	0f 2e       	mov	r0, r31
    b53e:	f3 e0       	ldi	r31, 0x03	; 3
    b540:	ef 2e       	mov	r14, r31
    b542:	f0 2d       	mov	r31, r0
    b544:	6f 01       	movw	r12, r30
    b546:	aa 24       	eor	r10, r10
    b548:	0f 2e       	mov	r0, r31
    b54a:	fa e0       	ldi	r31, 0x0A	; 10
    b54c:	8f 2e       	mov	r8, r31
    b54e:	f0 2d       	mov	r31, r0
    b550:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
   /*------------------------------------------------------------------------*
    * Update the state vector estimate ignoring the previous xk term
    * since this is an error-state Kalman filter
    * [1] eq 3.16 and section 3.2.6
    *------------------------------------------------------------------------*/
   i_tmp = 0;
    b554:	19 82       	std	Y+1, r1	; 0x01
    b556:	1a 82       	std	Y+2, r1	; 0x02
    b558:	1b 82       	std	Y+3, r1	; 0x03
    b55a:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[0][0], ps_deltaZ[0], i_tmp, 1);
    b55c:	ce 01       	movw	r24, r28
    b55e:	89 54       	subi	r24, 0x49	; 73
    b560:	9f 4f       	sbci	r25, 0xFF	; 255
    b562:	fc 01       	movw	r30, r24
    b564:	80 81       	ld	r24, Z
    b566:	91 81       	ldd	r25, Z+1	; 0x01
    b568:	9e 01       	movw	r18, r28
    b56a:	2f 59       	subi	r18, 0x9F	; 159
    b56c:	3d 4f       	sbci	r19, 0xFD	; 253
    b56e:	f9 01       	movw	r30, r18
    b570:	20 81       	ld	r18, Z
    b572:	31 81       	ldd	r19, Z+1	; 0x01
    b574:	f9 01       	movw	r30, r18
    b576:	60 81       	ld	r22, Z
    b578:	71 81       	ldd	r23, Z+1	; 0x01
    b57a:	29 81       	ldd	r18, Y+1	; 0x01
    b57c:	3a 81       	ldd	r19, Y+2	; 0x02
    b57e:	4b 81       	ldd	r20, Y+3	; 0x03
    b580:	5c 81       	ldd	r21, Y+4	; 0x04
    b582:	01 e0       	ldi	r16, 0x01	; 1
    b584:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b588:	dc 01       	movw	r26, r24
    b58a:	cb 01       	movw	r24, r22
    b58c:	89 83       	std	Y+1, r24	; 0x01
    b58e:	9a 83       	std	Y+2, r25	; 0x02
    b590:	ab 83       	std	Y+3, r26	; 0x03
    b592:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[0][1], ps_deltaZ[1], i_tmp, 1);
    b594:	ce 01       	movw	r24, r28
    b596:	89 54       	subi	r24, 0x49	; 73
    b598:	9f 4f       	sbci	r25, 0xFF	; 255
    b59a:	fc 01       	movw	r30, r24
    b59c:	82 81       	ldd	r24, Z+2	; 0x02
    b59e:	93 81       	ldd	r25, Z+3	; 0x03
    b5a0:	9e 01       	movw	r18, r28
    b5a2:	2f 59       	subi	r18, 0x9F	; 159
    b5a4:	3d 4f       	sbci	r19, 0xFD	; 253
    b5a6:	f9 01       	movw	r30, r18
    b5a8:	20 81       	ld	r18, Z
    b5aa:	31 81       	ldd	r19, Z+1	; 0x01
    b5ac:	2e 5f       	subi	r18, 0xFE	; 254
    b5ae:	3f 4f       	sbci	r19, 0xFF	; 255
    b5b0:	f9 01       	movw	r30, r18
    b5b2:	60 81       	ld	r22, Z
    b5b4:	71 81       	ldd	r23, Z+1	; 0x01
    b5b6:	29 81       	ldd	r18, Y+1	; 0x01
    b5b8:	3a 81       	ldd	r19, Y+2	; 0x02
    b5ba:	4b 81       	ldd	r20, Y+3	; 0x03
    b5bc:	5c 81       	ldd	r21, Y+4	; 0x04
    b5be:	01 e0       	ldi	r16, 0x01	; 1
    b5c0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b5c4:	dc 01       	movw	r26, r24
    b5c6:	cb 01       	movw	r24, r22
    b5c8:	89 83       	std	Y+1, r24	; 0x01
    b5ca:	9a 83       	std	Y+2, r25	; 0x02
    b5cc:	ab 83       	std	Y+3, r26	; 0x03
    b5ce:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[0][2], ps_deltaZ[2], i_tmp, 1);
    b5d0:	ce 01       	movw	r24, r28
    b5d2:	89 54       	subi	r24, 0x49	; 73
    b5d4:	9f 4f       	sbci	r25, 0xFF	; 255
    b5d6:	fc 01       	movw	r30, r24
    b5d8:	84 81       	ldd	r24, Z+4	; 0x04
    b5da:	95 81       	ldd	r25, Z+5	; 0x05
    b5dc:	9e 01       	movw	r18, r28
    b5de:	2f 59       	subi	r18, 0x9F	; 159
    b5e0:	3d 4f       	sbci	r19, 0xFD	; 253
    b5e2:	f9 01       	movw	r30, r18
    b5e4:	20 81       	ld	r18, Z
    b5e6:	31 81       	ldd	r19, Z+1	; 0x01
    b5e8:	2c 5f       	subi	r18, 0xFC	; 252
    b5ea:	3f 4f       	sbci	r19, 0xFF	; 255
    b5ec:	f9 01       	movw	r30, r18
    b5ee:	60 81       	ld	r22, Z
    b5f0:	71 81       	ldd	r23, Z+1	; 0x01
    b5f2:	29 81       	ldd	r18, Y+1	; 0x01
    b5f4:	3a 81       	ldd	r19, Y+2	; 0x02
    b5f6:	4b 81       	ldd	r20, Y+3	; 0x03
    b5f8:	5c 81       	ldd	r21, Y+4	; 0x04
    b5fa:	01 e0       	ldi	r16, 0x01	; 1
    b5fc:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b600:	dc 01       	movw	r26, r24
    b602:	cb 01       	movw	r24, r22
    b604:	89 83       	std	Y+1, r24	; 0x01
    b606:	9a 83       	std	Y+2, r25	; 0x02
    b608:	ab 83       	std	Y+3, r26	; 0x03
    b60a:	bc 83       	std	Y+4, r27	; 0x04
    b60c:	89 81       	ldd	r24, Y+1	; 0x01
    b60e:	9a 81       	ldd	r25, Y+2	; 0x02
    b610:	ab 81       	ldd	r26, Y+3	; 0x03
    b612:	bc 81       	ldd	r27, Y+4	; 0x04
    b614:	89 87       	std	Y+9, r24	; 0x09
    b616:	9a 87       	std	Y+10, r25	; 0x0a
    b618:	ab 87       	std	Y+11, r26	; 0x0b
    b61a:	bc 87       	std	Y+12, r27	; 0x0c
    b61c:	8e e0       	ldi	r24, 0x0E	; 14
    b61e:	8d 87       	std	Y+13, r24	; 0x0d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    b620:	81 e0       	ldi	r24, 0x01	; 1
    b622:	8e 87       	std	Y+14, r24	; 0x0e

      if( i_x < 0)
    b624:	89 85       	ldd	r24, Y+9	; 0x09
    b626:	9a 85       	ldd	r25, Y+10	; 0x0a
    b628:	ab 85       	ldd	r26, Y+11	; 0x0b
    b62a:	bc 85       	ldd	r27, Y+12	; 0x0c
    b62c:	bb 23       	and	r27, r27
    b62e:	8c f4       	brge	.+34     	; 0xb652 <eSKalmanFilterCorrect+0x8b0>
      {
         i_x = -i_x;
    b630:	89 85       	ldd	r24, Y+9	; 0x09
    b632:	9a 85       	ldd	r25, Y+10	; 0x0a
    b634:	ab 85       	ldd	r26, Y+11	; 0x0b
    b636:	bc 85       	ldd	r27, Y+12	; 0x0c
    b638:	b0 95       	com	r27
    b63a:	a0 95       	com	r26
    b63c:	90 95       	com	r25
    b63e:	81 95       	neg	r24
    b640:	9f 4f       	sbci	r25, 0xFF	; 255
    b642:	af 4f       	sbci	r26, 0xFF	; 255
    b644:	bf 4f       	sbci	r27, 0xFF	; 255
    b646:	89 87       	std	Y+9, r24	; 0x09
    b648:	9a 87       	std	Y+10, r25	; 0x0a
    b64a:	ab 87       	std	Y+11, r26	; 0x0b
    b64c:	bc 87       	std	Y+12, r27	; 0x0c
         c_sign = -1;
    b64e:	8f ef       	ldi	r24, 0xFF	; 255
    b650:	8e 87       	std	Y+14, r24	; 0x0e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    b652:	8d 85       	ldd	r24, Y+13	; 0x0d
    b654:	89 30       	cpi	r24, 0x09	; 9
    b656:	94 f1       	brlt	.+100    	; 0xb6bc <eSKalmanFilterCorrect+0x91a>
    b658:	8d 85       	ldd	r24, Y+13	; 0x0d
    b65a:	81 31       	cpi	r24, 0x11	; 17
    b65c:	7c f5       	brge	.+94     	; 0xb6bc <eSKalmanFilterCorrect+0x91a>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    b65e:	8d 85       	ldd	r24, Y+13	; 0x0d
    b660:	99 27       	eor	r25, r25
    b662:	87 fd       	sbrc	r24, 7
    b664:	90 95       	com	r25
    b666:	20 e1       	ldi	r18, 0x10	; 16
    b668:	30 e0       	ldi	r19, 0x00	; 0
    b66a:	28 1b       	sub	r18, r24
    b66c:	39 0b       	sbc	r19, r25
    b66e:	89 85       	ldd	r24, Y+9	; 0x09
    b670:	9a 85       	ldd	r25, Y+10	; 0x0a
    b672:	ab 85       	ldd	r26, Y+11	; 0x0b
    b674:	bc 85       	ldd	r27, Y+12	; 0x0c
    b676:	04 c0       	rjmp	.+8      	; 0xb680 <eSKalmanFilterCorrect+0x8de>
    b678:	88 0f       	add	r24, r24
    b67a:	99 1f       	adc	r25, r25
    b67c:	aa 1f       	adc	r26, r26
    b67e:	bb 1f       	adc	r27, r27
    b680:	2a 95       	dec	r18
    b682:	d2 f7       	brpl	.-12     	; 0xb678 <eSKalmanFilterCorrect+0x8d6>
    b684:	9e 01       	movw	r18, r28
    b686:	23 5a       	subi	r18, 0xA3	; 163
    b688:	3d 4f       	sbci	r19, 0xFD	; 253
    b68a:	f9 01       	movw	r30, r18
    b68c:	80 83       	st	Z, r24
    b68e:	91 83       	std	Z+1, r25	; 0x01
    b690:	a2 83       	std	Z+2, r26	; 0x02
    b692:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    b694:	8e 85       	ldd	r24, Y+14	; 0x0e
    b696:	8f 3f       	cpi	r24, 0xFF	; 255
    b698:	51 f4       	brne	.+20     	; 0xb6ae <eSKalmanFilterCorrect+0x90c>
              return -t_tWord.as_word16[1];
    b69a:	ce 01       	movw	r24, r28
    b69c:	83 5a       	subi	r24, 0xA3	; 163
    b69e:	9d 4f       	sbci	r25, 0xFD	; 253
    b6a0:	fc 01       	movw	r30, r24
    b6a2:	82 81       	ldd	r24, Z+2	; 0x02
    b6a4:	93 81       	ldd	r25, Z+3	; 0x03
    b6a6:	90 95       	com	r25
    b6a8:	81 95       	neg	r24
    b6aa:	9f 4f       	sbci	r25, 0xFF	; 255
    b6ac:	27 c0       	rjmp	.+78     	; 0xb6fc <eSKalmanFilterCorrect+0x95a>
           else
            return t_tWord.as_word16[1];
    b6ae:	ce 01       	movw	r24, r28
    b6b0:	83 5a       	subi	r24, 0xA3	; 163
    b6b2:	9d 4f       	sbci	r25, 0xFD	; 253
    b6b4:	fc 01       	movw	r30, r24
    b6b6:	82 81       	ldd	r24, Z+2	; 0x02
    b6b8:	93 81       	ldd	r25, Z+3	; 0x03
    b6ba:	20 c0       	rjmp	.+64     	; 0xb6fc <eSKalmanFilterCorrect+0x95a>
      }

      i_x = i_x >> c_n;
    b6bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    b6be:	28 2f       	mov	r18, r24
    b6c0:	33 27       	eor	r19, r19
    b6c2:	27 fd       	sbrc	r18, 7
    b6c4:	30 95       	com	r19
    b6c6:	89 85       	ldd	r24, Y+9	; 0x09
    b6c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b6ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    b6cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    b6ce:	02 2e       	mov	r0, r18
    b6d0:	04 c0       	rjmp	.+8      	; 0xb6da <eSKalmanFilterCorrect+0x938>
    b6d2:	b5 95       	asr	r27
    b6d4:	a7 95       	ror	r26
    b6d6:	97 95       	ror	r25
    b6d8:	87 95       	ror	r24
    b6da:	0a 94       	dec	r0
    b6dc:	d2 f7       	brpl	.-12     	; 0xb6d2 <eSKalmanFilterCorrect+0x930>
    b6de:	89 87       	std	Y+9, r24	; 0x09
    b6e0:	9a 87       	std	Y+10, r25	; 0x0a
    b6e2:	ab 87       	std	Y+11, r26	; 0x0b
    b6e4:	bc 87       	std	Y+12, r27	; 0x0c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    b6e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    b6e8:	8f 3f       	cpi	r24, 0xFF	; 255
    b6ea:	31 f4       	brne	.+12     	; 0xb6f8 <eSKalmanFilterCorrect+0x956>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    b6ec:	89 85       	ldd	r24, Y+9	; 0x09
    b6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    b6f0:	90 95       	com	r25
    b6f2:	81 95       	neg	r24
    b6f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b6f6:	02 c0       	rjmp	.+4      	; 0xb6fc <eSKalmanFilterCorrect+0x95a>
       else
           return (int16_t)i_x;
    b6f8:	89 85       	ldd	r24, Y+9	; 0x09
    b6fa:	9a 85       	ldd	r25, Y+10	; 0x0a
   ps_deltaAtt[0] = utl_rShft32_16( i_tmp, 14); /*Q15*/
    b6fc:	9c 01       	movw	r18, r24
    b6fe:	ce 01       	movw	r24, r28
    b700:	8d 59       	subi	r24, 0x9D	; 157
    b702:	9d 4f       	sbci	r25, 0xFD	; 253
    b704:	fc 01       	movw	r30, r24
    b706:	80 81       	ld	r24, Z
    b708:	91 81       	ldd	r25, Z+1	; 0x01
    b70a:	fc 01       	movw	r30, r24
    b70c:	20 83       	st	Z, r18
    b70e:	31 83       	std	Z+1, r19	; 0x01
   i_tmp = 0;
    b710:	19 82       	std	Y+1, r1	; 0x01
    b712:	1a 82       	std	Y+2, r1	; 0x02
    b714:	1b 82       	std	Y+3, r1	; 0x03
    b716:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[1][0], ps_deltaZ[0], i_tmp, 1);
    b718:	ce 01       	movw	r24, r28
    b71a:	89 54       	subi	r24, 0x49	; 73
    b71c:	9f 4f       	sbci	r25, 0xFF	; 255
    b71e:	fc 01       	movw	r30, r24
    b720:	86 81       	ldd	r24, Z+6	; 0x06
    b722:	97 81       	ldd	r25, Z+7	; 0x07
    b724:	9e 01       	movw	r18, r28
    b726:	2f 59       	subi	r18, 0x9F	; 159
    b728:	3d 4f       	sbci	r19, 0xFD	; 253
    b72a:	f9 01       	movw	r30, r18
    b72c:	20 81       	ld	r18, Z
    b72e:	31 81       	ldd	r19, Z+1	; 0x01
    b730:	f9 01       	movw	r30, r18
    b732:	60 81       	ld	r22, Z
    b734:	71 81       	ldd	r23, Z+1	; 0x01
    b736:	29 81       	ldd	r18, Y+1	; 0x01
    b738:	3a 81       	ldd	r19, Y+2	; 0x02
    b73a:	4b 81       	ldd	r20, Y+3	; 0x03
    b73c:	5c 81       	ldd	r21, Y+4	; 0x04
    b73e:	01 e0       	ldi	r16, 0x01	; 1
    b740:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b744:	dc 01       	movw	r26, r24
    b746:	cb 01       	movw	r24, r22
    b748:	89 83       	std	Y+1, r24	; 0x01
    b74a:	9a 83       	std	Y+2, r25	; 0x02
    b74c:	ab 83       	std	Y+3, r26	; 0x03
    b74e:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[1][1], ps_deltaZ[1], i_tmp, 1);
    b750:	ce 01       	movw	r24, r28
    b752:	89 54       	subi	r24, 0x49	; 73
    b754:	9f 4f       	sbci	r25, 0xFF	; 255
    b756:	fc 01       	movw	r30, r24
    b758:	80 85       	ldd	r24, Z+8	; 0x08
    b75a:	91 85       	ldd	r25, Z+9	; 0x09
    b75c:	9e 01       	movw	r18, r28
    b75e:	2f 59       	subi	r18, 0x9F	; 159
    b760:	3d 4f       	sbci	r19, 0xFD	; 253
    b762:	f9 01       	movw	r30, r18
    b764:	20 81       	ld	r18, Z
    b766:	31 81       	ldd	r19, Z+1	; 0x01
    b768:	2e 5f       	subi	r18, 0xFE	; 254
    b76a:	3f 4f       	sbci	r19, 0xFF	; 255
    b76c:	f9 01       	movw	r30, r18
    b76e:	60 81       	ld	r22, Z
    b770:	71 81       	ldd	r23, Z+1	; 0x01
    b772:	29 81       	ldd	r18, Y+1	; 0x01
    b774:	3a 81       	ldd	r19, Y+2	; 0x02
    b776:	4b 81       	ldd	r20, Y+3	; 0x03
    b778:	5c 81       	ldd	r21, Y+4	; 0x04
    b77a:	01 e0       	ldi	r16, 0x01	; 1
    b77c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b780:	dc 01       	movw	r26, r24
    b782:	cb 01       	movw	r24, r22
    b784:	89 83       	std	Y+1, r24	; 0x01
    b786:	9a 83       	std	Y+2, r25	; 0x02
    b788:	ab 83       	std	Y+3, r26	; 0x03
    b78a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[1][2], ps_deltaZ[2], i_tmp, 1);
    b78c:	ce 01       	movw	r24, r28
    b78e:	89 54       	subi	r24, 0x49	; 73
    b790:	9f 4f       	sbci	r25, 0xFF	; 255
    b792:	fc 01       	movw	r30, r24
    b794:	82 85       	ldd	r24, Z+10	; 0x0a
    b796:	93 85       	ldd	r25, Z+11	; 0x0b
    b798:	9e 01       	movw	r18, r28
    b79a:	2f 59       	subi	r18, 0x9F	; 159
    b79c:	3d 4f       	sbci	r19, 0xFD	; 253
    b79e:	f9 01       	movw	r30, r18
    b7a0:	20 81       	ld	r18, Z
    b7a2:	31 81       	ldd	r19, Z+1	; 0x01
    b7a4:	2c 5f       	subi	r18, 0xFC	; 252
    b7a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b7a8:	f9 01       	movw	r30, r18
    b7aa:	60 81       	ld	r22, Z
    b7ac:	71 81       	ldd	r23, Z+1	; 0x01
    b7ae:	29 81       	ldd	r18, Y+1	; 0x01
    b7b0:	3a 81       	ldd	r19, Y+2	; 0x02
    b7b2:	4b 81       	ldd	r20, Y+3	; 0x03
    b7b4:	5c 81       	ldd	r21, Y+4	; 0x04
    b7b6:	01 e0       	ldi	r16, 0x01	; 1
    b7b8:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b7bc:	dc 01       	movw	r26, r24
    b7be:	cb 01       	movw	r24, r22
    b7c0:	89 83       	std	Y+1, r24	; 0x01
    b7c2:	9a 83       	std	Y+2, r25	; 0x02
    b7c4:	ab 83       	std	Y+3, r26	; 0x03
    b7c6:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaAtt[1] = utl_rShft32_16( i_tmp, 14); /*Q15*/
    b7c8:	ce 01       	movw	r24, r28
    b7ca:	8d 59       	subi	r24, 0x9D	; 157
    b7cc:	9d 4f       	sbci	r25, 0xFD	; 253
    b7ce:	fc 01       	movw	r30, r24
    b7d0:	80 81       	ld	r24, Z
    b7d2:	91 81       	ldd	r25, Z+1	; 0x01
    b7d4:	9c 01       	movw	r18, r24
    b7d6:	2e 5f       	subi	r18, 0xFE	; 254
    b7d8:	3f 4f       	sbci	r19, 0xFF	; 255
    b7da:	89 81       	ldd	r24, Y+1	; 0x01
    b7dc:	9a 81       	ldd	r25, Y+2	; 0x02
    b7de:	ab 81       	ldd	r26, Y+3	; 0x03
    b7e0:	bc 81       	ldd	r27, Y+4	; 0x04
    b7e2:	8f 87       	std	Y+15, r24	; 0x0f
    b7e4:	98 8b       	std	Y+16, r25	; 0x10
    b7e6:	a9 8b       	std	Y+17, r26	; 0x11
    b7e8:	ba 8b       	std	Y+18, r27	; 0x12
    b7ea:	8e e0       	ldi	r24, 0x0E	; 14
    b7ec:	8b 8b       	std	Y+19, r24	; 0x13
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    b7ee:	81 e0       	ldi	r24, 0x01	; 1
    b7f0:	8c 8b       	std	Y+20, r24	; 0x14

      if( i_x < 0)
    b7f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    b7f4:	98 89       	ldd	r25, Y+16	; 0x10
    b7f6:	a9 89       	ldd	r26, Y+17	; 0x11
    b7f8:	ba 89       	ldd	r27, Y+18	; 0x12
    b7fa:	bb 23       	and	r27, r27
    b7fc:	8c f4       	brge	.+34     	; 0xb820 <eSKalmanFilterCorrect+0xa7e>
      {
         i_x = -i_x;
    b7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    b800:	98 89       	ldd	r25, Y+16	; 0x10
    b802:	a9 89       	ldd	r26, Y+17	; 0x11
    b804:	ba 89       	ldd	r27, Y+18	; 0x12
    b806:	b0 95       	com	r27
    b808:	a0 95       	com	r26
    b80a:	90 95       	com	r25
    b80c:	81 95       	neg	r24
    b80e:	9f 4f       	sbci	r25, 0xFF	; 255
    b810:	af 4f       	sbci	r26, 0xFF	; 255
    b812:	bf 4f       	sbci	r27, 0xFF	; 255
    b814:	8f 87       	std	Y+15, r24	; 0x0f
    b816:	98 8b       	std	Y+16, r25	; 0x10
    b818:	a9 8b       	std	Y+17, r26	; 0x11
    b81a:	ba 8b       	std	Y+18, r27	; 0x12
         c_sign = -1;
    b81c:	8f ef       	ldi	r24, 0xFF	; 255
    b81e:	8c 8b       	std	Y+20, r24	; 0x14
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    b820:	8b 89       	ldd	r24, Y+19	; 0x13
    b822:	89 30       	cpi	r24, 0x09	; 9
    b824:	94 f1       	brlt	.+100    	; 0xb88a <eSKalmanFilterCorrect+0xae8>
    b826:	8b 89       	ldd	r24, Y+19	; 0x13
    b828:	81 31       	cpi	r24, 0x11	; 17
    b82a:	7c f5       	brge	.+94     	; 0xb88a <eSKalmanFilterCorrect+0xae8>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    b82c:	8b 89       	ldd	r24, Y+19	; 0x13
    b82e:	99 27       	eor	r25, r25
    b830:	87 fd       	sbrc	r24, 7
    b832:	90 95       	com	r25
    b834:	40 e1       	ldi	r20, 0x10	; 16
    b836:	50 e0       	ldi	r21, 0x00	; 0
    b838:	48 1b       	sub	r20, r24
    b83a:	59 0b       	sbc	r21, r25
    b83c:	8f 85       	ldd	r24, Y+15	; 0x0f
    b83e:	98 89       	ldd	r25, Y+16	; 0x10
    b840:	a9 89       	ldd	r26, Y+17	; 0x11
    b842:	ba 89       	ldd	r27, Y+18	; 0x12
    b844:	04 c0       	rjmp	.+8      	; 0xb84e <eSKalmanFilterCorrect+0xaac>
    b846:	88 0f       	add	r24, r24
    b848:	99 1f       	adc	r25, r25
    b84a:	aa 1f       	adc	r26, r26
    b84c:	bb 1f       	adc	r27, r27
    b84e:	4a 95       	dec	r20
    b850:	d2 f7       	brpl	.-12     	; 0xb846 <eSKalmanFilterCorrect+0xaa4>
    b852:	ae 01       	movw	r20, r28
    b854:	47 5a       	subi	r20, 0xA7	; 167
    b856:	5d 4f       	sbci	r21, 0xFD	; 253
    b858:	fa 01       	movw	r30, r20
    b85a:	80 83       	st	Z, r24
    b85c:	91 83       	std	Z+1, r25	; 0x01
    b85e:	a2 83       	std	Z+2, r26	; 0x02
    b860:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    b862:	8c 89       	ldd	r24, Y+20	; 0x14
    b864:	8f 3f       	cpi	r24, 0xFF	; 255
    b866:	51 f4       	brne	.+20     	; 0xb87c <eSKalmanFilterCorrect+0xada>
              return -t_tWord.as_word16[1];
    b868:	ce 01       	movw	r24, r28
    b86a:	87 5a       	subi	r24, 0xA7	; 167
    b86c:	9d 4f       	sbci	r25, 0xFD	; 253
    b86e:	fc 01       	movw	r30, r24
    b870:	82 81       	ldd	r24, Z+2	; 0x02
    b872:	93 81       	ldd	r25, Z+3	; 0x03
    b874:	90 95       	com	r25
    b876:	81 95       	neg	r24
    b878:	9f 4f       	sbci	r25, 0xFF	; 255
    b87a:	27 c0       	rjmp	.+78     	; 0xb8ca <eSKalmanFilterCorrect+0xb28>
           else
            return t_tWord.as_word16[1];
    b87c:	ce 01       	movw	r24, r28
    b87e:	87 5a       	subi	r24, 0xA7	; 167
    b880:	9d 4f       	sbci	r25, 0xFD	; 253
    b882:	fc 01       	movw	r30, r24
    b884:	82 81       	ldd	r24, Z+2	; 0x02
    b886:	93 81       	ldd	r25, Z+3	; 0x03
    b888:	20 c0       	rjmp	.+64     	; 0xb8ca <eSKalmanFilterCorrect+0xb28>
      }

      i_x = i_x >> c_n;
    b88a:	8b 89       	ldd	r24, Y+19	; 0x13
    b88c:	48 2f       	mov	r20, r24
    b88e:	55 27       	eor	r21, r21
    b890:	47 fd       	sbrc	r20, 7
    b892:	50 95       	com	r21
    b894:	8f 85       	ldd	r24, Y+15	; 0x0f
    b896:	98 89       	ldd	r25, Y+16	; 0x10
    b898:	a9 89       	ldd	r26, Y+17	; 0x11
    b89a:	ba 89       	ldd	r27, Y+18	; 0x12
    b89c:	04 2e       	mov	r0, r20
    b89e:	04 c0       	rjmp	.+8      	; 0xb8a8 <eSKalmanFilterCorrect+0xb06>
    b8a0:	b5 95       	asr	r27
    b8a2:	a7 95       	ror	r26
    b8a4:	97 95       	ror	r25
    b8a6:	87 95       	ror	r24
    b8a8:	0a 94       	dec	r0
    b8aa:	d2 f7       	brpl	.-12     	; 0xb8a0 <eSKalmanFilterCorrect+0xafe>
    b8ac:	8f 87       	std	Y+15, r24	; 0x0f
    b8ae:	98 8b       	std	Y+16, r25	; 0x10
    b8b0:	a9 8b       	std	Y+17, r26	; 0x11
    b8b2:	ba 8b       	std	Y+18, r27	; 0x12
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    b8b4:	8c 89       	ldd	r24, Y+20	; 0x14
    b8b6:	8f 3f       	cpi	r24, 0xFF	; 255
    b8b8:	31 f4       	brne	.+12     	; 0xb8c6 <eSKalmanFilterCorrect+0xb24>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    b8ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    b8bc:	98 89       	ldd	r25, Y+16	; 0x10
    b8be:	90 95       	com	r25
    b8c0:	81 95       	neg	r24
    b8c2:	9f 4f       	sbci	r25, 0xFF	; 255
    b8c4:	02 c0       	rjmp	.+4      	; 0xb8ca <eSKalmanFilterCorrect+0xb28>
       else
           return (int16_t)i_x;
    b8c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    b8c8:	98 89       	ldd	r25, Y+16	; 0x10
    b8ca:	f9 01       	movw	r30, r18
    b8cc:	80 83       	st	Z, r24
    b8ce:	91 83       	std	Z+1, r25	; 0x01
   i_tmp = 0;
    b8d0:	19 82       	std	Y+1, r1	; 0x01
    b8d2:	1a 82       	std	Y+2, r1	; 0x02
    b8d4:	1b 82       	std	Y+3, r1	; 0x03
    b8d6:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[2][0], ps_deltaZ[0], i_tmp, 1);
    b8d8:	ce 01       	movw	r24, r28
    b8da:	89 54       	subi	r24, 0x49	; 73
    b8dc:	9f 4f       	sbci	r25, 0xFF	; 255
    b8de:	fc 01       	movw	r30, r24
    b8e0:	84 85       	ldd	r24, Z+12	; 0x0c
    b8e2:	95 85       	ldd	r25, Z+13	; 0x0d
    b8e4:	9e 01       	movw	r18, r28
    b8e6:	2f 59       	subi	r18, 0x9F	; 159
    b8e8:	3d 4f       	sbci	r19, 0xFD	; 253
    b8ea:	f9 01       	movw	r30, r18
    b8ec:	20 81       	ld	r18, Z
    b8ee:	31 81       	ldd	r19, Z+1	; 0x01
    b8f0:	f9 01       	movw	r30, r18
    b8f2:	60 81       	ld	r22, Z
    b8f4:	71 81       	ldd	r23, Z+1	; 0x01
    b8f6:	29 81       	ldd	r18, Y+1	; 0x01
    b8f8:	3a 81       	ldd	r19, Y+2	; 0x02
    b8fa:	4b 81       	ldd	r20, Y+3	; 0x03
    b8fc:	5c 81       	ldd	r21, Y+4	; 0x04
    b8fe:	01 e0       	ldi	r16, 0x01	; 1
    b900:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b904:	dc 01       	movw	r26, r24
    b906:	cb 01       	movw	r24, r22
    b908:	89 83       	std	Y+1, r24	; 0x01
    b90a:	9a 83       	std	Y+2, r25	; 0x02
    b90c:	ab 83       	std	Y+3, r26	; 0x03
    b90e:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[2][1], ps_deltaZ[1], i_tmp, 1);
    b910:	ce 01       	movw	r24, r28
    b912:	89 54       	subi	r24, 0x49	; 73
    b914:	9f 4f       	sbci	r25, 0xFF	; 255
    b916:	fc 01       	movw	r30, r24
    b918:	86 85       	ldd	r24, Z+14	; 0x0e
    b91a:	97 85       	ldd	r25, Z+15	; 0x0f
    b91c:	9e 01       	movw	r18, r28
    b91e:	2f 59       	subi	r18, 0x9F	; 159
    b920:	3d 4f       	sbci	r19, 0xFD	; 253
    b922:	f9 01       	movw	r30, r18
    b924:	20 81       	ld	r18, Z
    b926:	31 81       	ldd	r19, Z+1	; 0x01
    b928:	2e 5f       	subi	r18, 0xFE	; 254
    b92a:	3f 4f       	sbci	r19, 0xFF	; 255
    b92c:	f9 01       	movw	r30, r18
    b92e:	60 81       	ld	r22, Z
    b930:	71 81       	ldd	r23, Z+1	; 0x01
    b932:	29 81       	ldd	r18, Y+1	; 0x01
    b934:	3a 81       	ldd	r19, Y+2	; 0x02
    b936:	4b 81       	ldd	r20, Y+3	; 0x03
    b938:	5c 81       	ldd	r21, Y+4	; 0x04
    b93a:	01 e0       	ldi	r16, 0x01	; 1
    b93c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b940:	dc 01       	movw	r26, r24
    b942:	cb 01       	movw	r24, r22
    b944:	89 83       	std	Y+1, r24	; 0x01
    b946:	9a 83       	std	Y+2, r25	; 0x02
    b948:	ab 83       	std	Y+3, r26	; 0x03
    b94a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K00[2][2], ps_deltaZ[2], i_tmp, 1);
    b94c:	ce 01       	movw	r24, r28
    b94e:	89 54       	subi	r24, 0x49	; 73
    b950:	9f 4f       	sbci	r25, 0xFF	; 255
    b952:	fc 01       	movw	r30, r24
    b954:	80 89       	ldd	r24, Z+16	; 0x10
    b956:	91 89       	ldd	r25, Z+17	; 0x11
    b958:	9e 01       	movw	r18, r28
    b95a:	2f 59       	subi	r18, 0x9F	; 159
    b95c:	3d 4f       	sbci	r19, 0xFD	; 253
    b95e:	f9 01       	movw	r30, r18
    b960:	20 81       	ld	r18, Z
    b962:	31 81       	ldd	r19, Z+1	; 0x01
    b964:	2c 5f       	subi	r18, 0xFC	; 252
    b966:	3f 4f       	sbci	r19, 0xFF	; 255
    b968:	f9 01       	movw	r30, r18
    b96a:	60 81       	ld	r22, Z
    b96c:	71 81       	ldd	r23, Z+1	; 0x01
    b96e:	29 81       	ldd	r18, Y+1	; 0x01
    b970:	3a 81       	ldd	r19, Y+2	; 0x02
    b972:	4b 81       	ldd	r20, Y+3	; 0x03
    b974:	5c 81       	ldd	r21, Y+4	; 0x04
    b976:	01 e0       	ldi	r16, 0x01	; 1
    b978:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    b97c:	dc 01       	movw	r26, r24
    b97e:	cb 01       	movw	r24, r22
    b980:	89 83       	std	Y+1, r24	; 0x01
    b982:	9a 83       	std	Y+2, r25	; 0x02
    b984:	ab 83       	std	Y+3, r26	; 0x03
    b986:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaAtt[2] = utl_rShft32_16( i_tmp, 14); /*Q15*/
    b988:	ce 01       	movw	r24, r28
    b98a:	8d 59       	subi	r24, 0x9D	; 157
    b98c:	9d 4f       	sbci	r25, 0xFD	; 253
    b98e:	fc 01       	movw	r30, r24
    b990:	80 81       	ld	r24, Z
    b992:	91 81       	ldd	r25, Z+1	; 0x01
    b994:	9c 01       	movw	r18, r24
    b996:	2c 5f       	subi	r18, 0xFC	; 252
    b998:	3f 4f       	sbci	r19, 0xFF	; 255
    b99a:	89 81       	ldd	r24, Y+1	; 0x01
    b99c:	9a 81       	ldd	r25, Y+2	; 0x02
    b99e:	ab 81       	ldd	r26, Y+3	; 0x03
    b9a0:	bc 81       	ldd	r27, Y+4	; 0x04
    b9a2:	8d 8b       	std	Y+21, r24	; 0x15
    b9a4:	9e 8b       	std	Y+22, r25	; 0x16
    b9a6:	af 8b       	std	Y+23, r26	; 0x17
    b9a8:	b8 8f       	std	Y+24, r27	; 0x18
    b9aa:	8e e0       	ldi	r24, 0x0E	; 14
    b9ac:	89 8f       	std	Y+25, r24	; 0x19
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    b9ae:	81 e0       	ldi	r24, 0x01	; 1
    b9b0:	8a 8f       	std	Y+26, r24	; 0x1a

      if( i_x < 0)
    b9b2:	8d 89       	ldd	r24, Y+21	; 0x15
    b9b4:	9e 89       	ldd	r25, Y+22	; 0x16
    b9b6:	af 89       	ldd	r26, Y+23	; 0x17
    b9b8:	b8 8d       	ldd	r27, Y+24	; 0x18
    b9ba:	bb 23       	and	r27, r27
    b9bc:	8c f4       	brge	.+34     	; 0xb9e0 <eSKalmanFilterCorrect+0xc3e>
      {
         i_x = -i_x;
    b9be:	8d 89       	ldd	r24, Y+21	; 0x15
    b9c0:	9e 89       	ldd	r25, Y+22	; 0x16
    b9c2:	af 89       	ldd	r26, Y+23	; 0x17
    b9c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    b9c6:	b0 95       	com	r27
    b9c8:	a0 95       	com	r26
    b9ca:	90 95       	com	r25
    b9cc:	81 95       	neg	r24
    b9ce:	9f 4f       	sbci	r25, 0xFF	; 255
    b9d0:	af 4f       	sbci	r26, 0xFF	; 255
    b9d2:	bf 4f       	sbci	r27, 0xFF	; 255
    b9d4:	8d 8b       	std	Y+21, r24	; 0x15
    b9d6:	9e 8b       	std	Y+22, r25	; 0x16
    b9d8:	af 8b       	std	Y+23, r26	; 0x17
    b9da:	b8 8f       	std	Y+24, r27	; 0x18
         c_sign = -1;
    b9dc:	8f ef       	ldi	r24, 0xFF	; 255
    b9de:	8a 8f       	std	Y+26, r24	; 0x1a
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    b9e0:	89 8d       	ldd	r24, Y+25	; 0x19
    b9e2:	89 30       	cpi	r24, 0x09	; 9
    b9e4:	94 f1       	brlt	.+100    	; 0xba4a <eSKalmanFilterCorrect+0xca8>
    b9e6:	89 8d       	ldd	r24, Y+25	; 0x19
    b9e8:	81 31       	cpi	r24, 0x11	; 17
    b9ea:	7c f5       	brge	.+94     	; 0xba4a <eSKalmanFilterCorrect+0xca8>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    b9ec:	89 8d       	ldd	r24, Y+25	; 0x19
    b9ee:	99 27       	eor	r25, r25
    b9f0:	87 fd       	sbrc	r24, 7
    b9f2:	90 95       	com	r25
    b9f4:	40 e1       	ldi	r20, 0x10	; 16
    b9f6:	50 e0       	ldi	r21, 0x00	; 0
    b9f8:	48 1b       	sub	r20, r24
    b9fa:	59 0b       	sbc	r21, r25
    b9fc:	8d 89       	ldd	r24, Y+21	; 0x15
    b9fe:	9e 89       	ldd	r25, Y+22	; 0x16
    ba00:	af 89       	ldd	r26, Y+23	; 0x17
    ba02:	b8 8d       	ldd	r27, Y+24	; 0x18
    ba04:	04 c0       	rjmp	.+8      	; 0xba0e <eSKalmanFilterCorrect+0xc6c>
    ba06:	88 0f       	add	r24, r24
    ba08:	99 1f       	adc	r25, r25
    ba0a:	aa 1f       	adc	r26, r26
    ba0c:	bb 1f       	adc	r27, r27
    ba0e:	4a 95       	dec	r20
    ba10:	d2 f7       	brpl	.-12     	; 0xba06 <eSKalmanFilterCorrect+0xc64>
    ba12:	ae 01       	movw	r20, r28
    ba14:	4b 5a       	subi	r20, 0xAB	; 171
    ba16:	5d 4f       	sbci	r21, 0xFD	; 253
    ba18:	fa 01       	movw	r30, r20
    ba1a:	80 83       	st	Z, r24
    ba1c:	91 83       	std	Z+1, r25	; 0x01
    ba1e:	a2 83       	std	Z+2, r26	; 0x02
    ba20:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    ba22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ba24:	8f 3f       	cpi	r24, 0xFF	; 255
    ba26:	51 f4       	brne	.+20     	; 0xba3c <eSKalmanFilterCorrect+0xc9a>
              return -t_tWord.as_word16[1];
    ba28:	ce 01       	movw	r24, r28
    ba2a:	8b 5a       	subi	r24, 0xAB	; 171
    ba2c:	9d 4f       	sbci	r25, 0xFD	; 253
    ba2e:	fc 01       	movw	r30, r24
    ba30:	82 81       	ldd	r24, Z+2	; 0x02
    ba32:	93 81       	ldd	r25, Z+3	; 0x03
    ba34:	90 95       	com	r25
    ba36:	81 95       	neg	r24
    ba38:	9f 4f       	sbci	r25, 0xFF	; 255
    ba3a:	27 c0       	rjmp	.+78     	; 0xba8a <eSKalmanFilterCorrect+0xce8>
           else
            return t_tWord.as_word16[1];
    ba3c:	ce 01       	movw	r24, r28
    ba3e:	8b 5a       	subi	r24, 0xAB	; 171
    ba40:	9d 4f       	sbci	r25, 0xFD	; 253
    ba42:	fc 01       	movw	r30, r24
    ba44:	82 81       	ldd	r24, Z+2	; 0x02
    ba46:	93 81       	ldd	r25, Z+3	; 0x03
    ba48:	20 c0       	rjmp	.+64     	; 0xba8a <eSKalmanFilterCorrect+0xce8>
      }

      i_x = i_x >> c_n;
    ba4a:	89 8d       	ldd	r24, Y+25	; 0x19
    ba4c:	48 2f       	mov	r20, r24
    ba4e:	55 27       	eor	r21, r21
    ba50:	47 fd       	sbrc	r20, 7
    ba52:	50 95       	com	r21
    ba54:	8d 89       	ldd	r24, Y+21	; 0x15
    ba56:	9e 89       	ldd	r25, Y+22	; 0x16
    ba58:	af 89       	ldd	r26, Y+23	; 0x17
    ba5a:	b8 8d       	ldd	r27, Y+24	; 0x18
    ba5c:	04 2e       	mov	r0, r20
    ba5e:	04 c0       	rjmp	.+8      	; 0xba68 <eSKalmanFilterCorrect+0xcc6>
    ba60:	b5 95       	asr	r27
    ba62:	a7 95       	ror	r26
    ba64:	97 95       	ror	r25
    ba66:	87 95       	ror	r24
    ba68:	0a 94       	dec	r0
    ba6a:	d2 f7       	brpl	.-12     	; 0xba60 <eSKalmanFilterCorrect+0xcbe>
    ba6c:	8d 8b       	std	Y+21, r24	; 0x15
    ba6e:	9e 8b       	std	Y+22, r25	; 0x16
    ba70:	af 8b       	std	Y+23, r26	; 0x17
    ba72:	b8 8f       	std	Y+24, r27	; 0x18
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    ba74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ba76:	8f 3f       	cpi	r24, 0xFF	; 255
    ba78:	31 f4       	brne	.+12     	; 0xba86 <eSKalmanFilterCorrect+0xce4>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    ba7a:	8d 89       	ldd	r24, Y+21	; 0x15
    ba7c:	9e 89       	ldd	r25, Y+22	; 0x16
    ba7e:	90 95       	com	r25
    ba80:	81 95       	neg	r24
    ba82:	9f 4f       	sbci	r25, 0xFF	; 255
    ba84:	02 c0       	rjmp	.+4      	; 0xba8a <eSKalmanFilterCorrect+0xce8>
       else
           return (int16_t)i_x;
    ba86:	8d 89       	ldd	r24, Y+21	; 0x15
    ba88:	9e 89       	ldd	r25, Y+22	; 0x16
    ba8a:	f9 01       	movw	r30, r18
    ba8c:	80 83       	st	Z, r24
    ba8e:	91 83       	std	Z+1, r25	; 0x01

   i_tmp = 0;
    ba90:	19 82       	std	Y+1, r1	; 0x01
    ba92:	1a 82       	std	Y+2, r1	; 0x02
    ba94:	1b 82       	std	Y+3, r1	; 0x03
    ba96:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[0][0], ps_deltaZ[0], i_tmp, 0);
    ba98:	ce 01       	movw	r24, r28
    ba9a:	87 53       	subi	r24, 0x37	; 55
    ba9c:	9f 4f       	sbci	r25, 0xFF	; 255
    ba9e:	fc 01       	movw	r30, r24
    baa0:	80 81       	ld	r24, Z
    baa2:	91 81       	ldd	r25, Z+1	; 0x01
    baa4:	9e 01       	movw	r18, r28
    baa6:	2f 59       	subi	r18, 0x9F	; 159
    baa8:	3d 4f       	sbci	r19, 0xFD	; 253
    baaa:	f9 01       	movw	r30, r18
    baac:	20 81       	ld	r18, Z
    baae:	31 81       	ldd	r19, Z+1	; 0x01
    bab0:	f9 01       	movw	r30, r18
    bab2:	60 81       	ld	r22, Z
    bab4:	71 81       	ldd	r23, Z+1	; 0x01
    bab6:	29 81       	ldd	r18, Y+1	; 0x01
    bab8:	3a 81       	ldd	r19, Y+2	; 0x02
    baba:	4b 81       	ldd	r20, Y+3	; 0x03
    babc:	5c 81       	ldd	r21, Y+4	; 0x04
    babe:	00 e0       	ldi	r16, 0x00	; 0
    bac0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bac4:	dc 01       	movw	r26, r24
    bac6:	cb 01       	movw	r24, r22
    bac8:	89 83       	std	Y+1, r24	; 0x01
    baca:	9a 83       	std	Y+2, r25	; 0x02
    bacc:	ab 83       	std	Y+3, r26	; 0x03
    bace:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[0][1], ps_deltaZ[1], i_tmp, 0);
    bad0:	ce 01       	movw	r24, r28
    bad2:	87 53       	subi	r24, 0x37	; 55
    bad4:	9f 4f       	sbci	r25, 0xFF	; 255
    bad6:	fc 01       	movw	r30, r24
    bad8:	82 81       	ldd	r24, Z+2	; 0x02
    bada:	93 81       	ldd	r25, Z+3	; 0x03
    badc:	9e 01       	movw	r18, r28
    bade:	2f 59       	subi	r18, 0x9F	; 159
    bae0:	3d 4f       	sbci	r19, 0xFD	; 253
    bae2:	f9 01       	movw	r30, r18
    bae4:	20 81       	ld	r18, Z
    bae6:	31 81       	ldd	r19, Z+1	; 0x01
    bae8:	2e 5f       	subi	r18, 0xFE	; 254
    baea:	3f 4f       	sbci	r19, 0xFF	; 255
    baec:	f9 01       	movw	r30, r18
    baee:	60 81       	ld	r22, Z
    baf0:	71 81       	ldd	r23, Z+1	; 0x01
    baf2:	29 81       	ldd	r18, Y+1	; 0x01
    baf4:	3a 81       	ldd	r19, Y+2	; 0x02
    baf6:	4b 81       	ldd	r20, Y+3	; 0x03
    baf8:	5c 81       	ldd	r21, Y+4	; 0x04
    bafa:	00 e0       	ldi	r16, 0x00	; 0
    bafc:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bb00:	dc 01       	movw	r26, r24
    bb02:	cb 01       	movw	r24, r22
    bb04:	89 83       	std	Y+1, r24	; 0x01
    bb06:	9a 83       	std	Y+2, r25	; 0x02
    bb08:	ab 83       	std	Y+3, r26	; 0x03
    bb0a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[0][2], ps_deltaZ[2], i_tmp, 0);
    bb0c:	ce 01       	movw	r24, r28
    bb0e:	87 53       	subi	r24, 0x37	; 55
    bb10:	9f 4f       	sbci	r25, 0xFF	; 255
    bb12:	fc 01       	movw	r30, r24
    bb14:	84 81       	ldd	r24, Z+4	; 0x04
    bb16:	95 81       	ldd	r25, Z+5	; 0x05
    bb18:	9e 01       	movw	r18, r28
    bb1a:	2f 59       	subi	r18, 0x9F	; 159
    bb1c:	3d 4f       	sbci	r19, 0xFD	; 253
    bb1e:	f9 01       	movw	r30, r18
    bb20:	20 81       	ld	r18, Z
    bb22:	31 81       	ldd	r19, Z+1	; 0x01
    bb24:	2c 5f       	subi	r18, 0xFC	; 252
    bb26:	3f 4f       	sbci	r19, 0xFF	; 255
    bb28:	f9 01       	movw	r30, r18
    bb2a:	60 81       	ld	r22, Z
    bb2c:	71 81       	ldd	r23, Z+1	; 0x01
    bb2e:	29 81       	ldd	r18, Y+1	; 0x01
    bb30:	3a 81       	ldd	r19, Y+2	; 0x02
    bb32:	4b 81       	ldd	r20, Y+3	; 0x03
    bb34:	5c 81       	ldd	r21, Y+4	; 0x04
    bb36:	00 e0       	ldi	r16, 0x00	; 0
    bb38:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bb3c:	dc 01       	movw	r26, r24
    bb3e:	cb 01       	movw	r24, r22
    bb40:	89 83       	std	Y+1, r24	; 0x01
    bb42:	9a 83       	std	Y+2, r25	; 0x02
    bb44:	ab 83       	std	Y+3, r26	; 0x03
    bb46:	bc 83       	std	Y+4, r27	; 0x04
    bb48:	89 81       	ldd	r24, Y+1	; 0x01
    bb4a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb4c:	ab 81       	ldd	r26, Y+3	; 0x03
    bb4e:	bc 81       	ldd	r27, Y+4	; 0x04
    bb50:	8b 8f       	std	Y+27, r24	; 0x1b
    bb52:	9c 8f       	std	Y+28, r25	; 0x1c
    bb54:	ad 8f       	std	Y+29, r26	; 0x1d
    bb56:	be 8f       	std	Y+30, r27	; 0x1e
    bb58:	8f e0       	ldi	r24, 0x0F	; 15
    bb5a:	8f 8f       	std	Y+31, r24	; 0x1f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    bb5c:	81 e0       	ldi	r24, 0x01	; 1
    bb5e:	88 a3       	lds	r24, 0x58

      if( i_x < 0)
    bb60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb64:	ad 8d       	ldd	r26, Y+29	; 0x1d
    bb66:	be 8d       	ldd	r27, Y+30	; 0x1e
    bb68:	bb 23       	and	r27, r27
    bb6a:	8c f4       	brge	.+34     	; 0xbb8e <eSKalmanFilterCorrect+0xdec>
      {
         i_x = -i_x;
    bb6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb70:	ad 8d       	ldd	r26, Y+29	; 0x1d
    bb72:	be 8d       	ldd	r27, Y+30	; 0x1e
    bb74:	b0 95       	com	r27
    bb76:	a0 95       	com	r26
    bb78:	90 95       	com	r25
    bb7a:	81 95       	neg	r24
    bb7c:	9f 4f       	sbci	r25, 0xFF	; 255
    bb7e:	af 4f       	sbci	r26, 0xFF	; 255
    bb80:	bf 4f       	sbci	r27, 0xFF	; 255
    bb82:	8b 8f       	std	Y+27, r24	; 0x1b
    bb84:	9c 8f       	std	Y+28, r25	; 0x1c
    bb86:	ad 8f       	std	Y+29, r26	; 0x1d
    bb88:	be 8f       	std	Y+30, r27	; 0x1e
         c_sign = -1;
    bb8a:	8f ef       	ldi	r24, 0xFF	; 255
    bb8c:	88 a3       	lds	r24, 0x58
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    bb8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    bb90:	89 30       	cpi	r24, 0x09	; 9
    bb92:	94 f1       	brlt	.+100    	; 0xbbf8 <eSKalmanFilterCorrect+0xe56>
    bb94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    bb96:	81 31       	cpi	r24, 0x11	; 17
    bb98:	7c f5       	brge	.+94     	; 0xbbf8 <eSKalmanFilterCorrect+0xe56>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    bb9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    bb9c:	99 27       	eor	r25, r25
    bb9e:	87 fd       	sbrc	r24, 7
    bba0:	90 95       	com	r25
    bba2:	20 e1       	ldi	r18, 0x10	; 16
    bba4:	30 e0       	ldi	r19, 0x00	; 0
    bba6:	28 1b       	sub	r18, r24
    bba8:	39 0b       	sbc	r19, r25
    bbaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bbac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bbae:	ad 8d       	ldd	r26, Y+29	; 0x1d
    bbb0:	be 8d       	ldd	r27, Y+30	; 0x1e
    bbb2:	04 c0       	rjmp	.+8      	; 0xbbbc <eSKalmanFilterCorrect+0xe1a>
    bbb4:	88 0f       	add	r24, r24
    bbb6:	99 1f       	adc	r25, r25
    bbb8:	aa 1f       	adc	r26, r26
    bbba:	bb 1f       	adc	r27, r27
    bbbc:	2a 95       	dec	r18
    bbbe:	d2 f7       	brpl	.-12     	; 0xbbb4 <eSKalmanFilterCorrect+0xe12>
    bbc0:	9e 01       	movw	r18, r28
    bbc2:	2f 5a       	subi	r18, 0xAF	; 175
    bbc4:	3d 4f       	sbci	r19, 0xFD	; 253
    bbc6:	f9 01       	movw	r30, r18
    bbc8:	80 83       	st	Z, r24
    bbca:	91 83       	std	Z+1, r25	; 0x01
    bbcc:	a2 83       	std	Z+2, r26	; 0x02
    bbce:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    bbd0:	88 a1       	lds	r24, 0x48
    bbd2:	8f 3f       	cpi	r24, 0xFF	; 255
    bbd4:	51 f4       	brne	.+20     	; 0xbbea <eSKalmanFilterCorrect+0xe48>
              return -t_tWord.as_word16[1];
    bbd6:	ce 01       	movw	r24, r28
    bbd8:	8f 5a       	subi	r24, 0xAF	; 175
    bbda:	9d 4f       	sbci	r25, 0xFD	; 253
    bbdc:	fc 01       	movw	r30, r24
    bbde:	82 81       	ldd	r24, Z+2	; 0x02
    bbe0:	93 81       	ldd	r25, Z+3	; 0x03
    bbe2:	90 95       	com	r25
    bbe4:	81 95       	neg	r24
    bbe6:	9f 4f       	sbci	r25, 0xFF	; 255
    bbe8:	27 c0       	rjmp	.+78     	; 0xbc38 <eSKalmanFilterCorrect+0xe96>
           else
            return t_tWord.as_word16[1];
    bbea:	ce 01       	movw	r24, r28
    bbec:	8f 5a       	subi	r24, 0xAF	; 175
    bbee:	9d 4f       	sbci	r25, 0xFD	; 253
    bbf0:	fc 01       	movw	r30, r24
    bbf2:	82 81       	ldd	r24, Z+2	; 0x02
    bbf4:	93 81       	ldd	r25, Z+3	; 0x03
    bbf6:	20 c0       	rjmp	.+64     	; 0xbc38 <eSKalmanFilterCorrect+0xe96>
      }

      i_x = i_x >> c_n;
    bbf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    bbfa:	28 2f       	mov	r18, r24
    bbfc:	33 27       	eor	r19, r19
    bbfe:	27 fd       	sbrc	r18, 7
    bc00:	30 95       	com	r19
    bc02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bc04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bc06:	ad 8d       	ldd	r26, Y+29	; 0x1d
    bc08:	be 8d       	ldd	r27, Y+30	; 0x1e
    bc0a:	02 2e       	mov	r0, r18
    bc0c:	04 c0       	rjmp	.+8      	; 0xbc16 <eSKalmanFilterCorrect+0xe74>
    bc0e:	b5 95       	asr	r27
    bc10:	a7 95       	ror	r26
    bc12:	97 95       	ror	r25
    bc14:	87 95       	ror	r24
    bc16:	0a 94       	dec	r0
    bc18:	d2 f7       	brpl	.-12     	; 0xbc0e <eSKalmanFilterCorrect+0xe6c>
    bc1a:	8b 8f       	std	Y+27, r24	; 0x1b
    bc1c:	9c 8f       	std	Y+28, r25	; 0x1c
    bc1e:	ad 8f       	std	Y+29, r26	; 0x1d
    bc20:	be 8f       	std	Y+30, r27	; 0x1e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    bc22:	88 a1       	lds	r24, 0x48
    bc24:	8f 3f       	cpi	r24, 0xFF	; 255
    bc26:	31 f4       	brne	.+12     	; 0xbc34 <eSKalmanFilterCorrect+0xe92>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    bc28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bc2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bc2c:	90 95       	com	r25
    bc2e:	81 95       	neg	r24
    bc30:	9f 4f       	sbci	r25, 0xFF	; 255
    bc32:	02 c0       	rjmp	.+4      	; 0xbc38 <eSKalmanFilterCorrect+0xe96>
       else
           return (int16_t)i_x;
    bc34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bc36:	9c 8d       	ldd	r25, Y+28	; 0x1c
   ps_deltaGBias[0] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    bc38:	9c 01       	movw	r18, r24
    bc3a:	ce 01       	movw	r24, r28
    bc3c:	8b 59       	subi	r24, 0x9B	; 155
    bc3e:	9d 4f       	sbci	r25, 0xFD	; 253
    bc40:	fc 01       	movw	r30, r24
    bc42:	80 81       	ld	r24, Z
    bc44:	91 81       	ldd	r25, Z+1	; 0x01
    bc46:	fc 01       	movw	r30, r24
    bc48:	20 83       	st	Z, r18
    bc4a:	31 83       	std	Z+1, r19	; 0x01
   i_tmp = 0;
    bc4c:	19 82       	std	Y+1, r1	; 0x01
    bc4e:	1a 82       	std	Y+2, r1	; 0x02
    bc50:	1b 82       	std	Y+3, r1	; 0x03
    bc52:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[1][0], ps_deltaZ[0], i_tmp, 0);
    bc54:	ce 01       	movw	r24, r28
    bc56:	87 53       	subi	r24, 0x37	; 55
    bc58:	9f 4f       	sbci	r25, 0xFF	; 255
    bc5a:	fc 01       	movw	r30, r24
    bc5c:	86 81       	ldd	r24, Z+6	; 0x06
    bc5e:	97 81       	ldd	r25, Z+7	; 0x07
    bc60:	9e 01       	movw	r18, r28
    bc62:	2f 59       	subi	r18, 0x9F	; 159
    bc64:	3d 4f       	sbci	r19, 0xFD	; 253
    bc66:	f9 01       	movw	r30, r18
    bc68:	20 81       	ld	r18, Z
    bc6a:	31 81       	ldd	r19, Z+1	; 0x01
    bc6c:	f9 01       	movw	r30, r18
    bc6e:	60 81       	ld	r22, Z
    bc70:	71 81       	ldd	r23, Z+1	; 0x01
    bc72:	29 81       	ldd	r18, Y+1	; 0x01
    bc74:	3a 81       	ldd	r19, Y+2	; 0x02
    bc76:	4b 81       	ldd	r20, Y+3	; 0x03
    bc78:	5c 81       	ldd	r21, Y+4	; 0x04
    bc7a:	00 e0       	ldi	r16, 0x00	; 0
    bc7c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bc80:	dc 01       	movw	r26, r24
    bc82:	cb 01       	movw	r24, r22
    bc84:	89 83       	std	Y+1, r24	; 0x01
    bc86:	9a 83       	std	Y+2, r25	; 0x02
    bc88:	ab 83       	std	Y+3, r26	; 0x03
    bc8a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[1][1], ps_deltaZ[1], i_tmp, 0);
    bc8c:	ce 01       	movw	r24, r28
    bc8e:	87 53       	subi	r24, 0x37	; 55
    bc90:	9f 4f       	sbci	r25, 0xFF	; 255
    bc92:	fc 01       	movw	r30, r24
    bc94:	80 85       	ldd	r24, Z+8	; 0x08
    bc96:	91 85       	ldd	r25, Z+9	; 0x09
    bc98:	9e 01       	movw	r18, r28
    bc9a:	2f 59       	subi	r18, 0x9F	; 159
    bc9c:	3d 4f       	sbci	r19, 0xFD	; 253
    bc9e:	f9 01       	movw	r30, r18
    bca0:	20 81       	ld	r18, Z
    bca2:	31 81       	ldd	r19, Z+1	; 0x01
    bca4:	2e 5f       	subi	r18, 0xFE	; 254
    bca6:	3f 4f       	sbci	r19, 0xFF	; 255
    bca8:	f9 01       	movw	r30, r18
    bcaa:	60 81       	ld	r22, Z
    bcac:	71 81       	ldd	r23, Z+1	; 0x01
    bcae:	29 81       	ldd	r18, Y+1	; 0x01
    bcb0:	3a 81       	ldd	r19, Y+2	; 0x02
    bcb2:	4b 81       	ldd	r20, Y+3	; 0x03
    bcb4:	5c 81       	ldd	r21, Y+4	; 0x04
    bcb6:	00 e0       	ldi	r16, 0x00	; 0
    bcb8:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bcbc:	dc 01       	movw	r26, r24
    bcbe:	cb 01       	movw	r24, r22
    bcc0:	89 83       	std	Y+1, r24	; 0x01
    bcc2:	9a 83       	std	Y+2, r25	; 0x02
    bcc4:	ab 83       	std	Y+3, r26	; 0x03
    bcc6:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[1][2], ps_deltaZ[2], i_tmp, 0);
    bcc8:	ce 01       	movw	r24, r28
    bcca:	87 53       	subi	r24, 0x37	; 55
    bccc:	9f 4f       	sbci	r25, 0xFF	; 255
    bcce:	fc 01       	movw	r30, r24
    bcd0:	82 85       	ldd	r24, Z+10	; 0x0a
    bcd2:	93 85       	ldd	r25, Z+11	; 0x0b
    bcd4:	9e 01       	movw	r18, r28
    bcd6:	2f 59       	subi	r18, 0x9F	; 159
    bcd8:	3d 4f       	sbci	r19, 0xFD	; 253
    bcda:	f9 01       	movw	r30, r18
    bcdc:	20 81       	ld	r18, Z
    bcde:	31 81       	ldd	r19, Z+1	; 0x01
    bce0:	2c 5f       	subi	r18, 0xFC	; 252
    bce2:	3f 4f       	sbci	r19, 0xFF	; 255
    bce4:	f9 01       	movw	r30, r18
    bce6:	60 81       	ld	r22, Z
    bce8:	71 81       	ldd	r23, Z+1	; 0x01
    bcea:	29 81       	ldd	r18, Y+1	; 0x01
    bcec:	3a 81       	ldd	r19, Y+2	; 0x02
    bcee:	4b 81       	ldd	r20, Y+3	; 0x03
    bcf0:	5c 81       	ldd	r21, Y+4	; 0x04
    bcf2:	00 e0       	ldi	r16, 0x00	; 0
    bcf4:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    bcf8:	dc 01       	movw	r26, r24
    bcfa:	cb 01       	movw	r24, r22
    bcfc:	89 83       	std	Y+1, r24	; 0x01
    bcfe:	9a 83       	std	Y+2, r25	; 0x02
    bd00:	ab 83       	std	Y+3, r26	; 0x03
    bd02:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaGBias[1] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    bd04:	ce 01       	movw	r24, r28
    bd06:	8b 59       	subi	r24, 0x9B	; 155
    bd08:	9d 4f       	sbci	r25, 0xFD	; 253
    bd0a:	fc 01       	movw	r30, r24
    bd0c:	80 81       	ld	r24, Z
    bd0e:	91 81       	ldd	r25, Z+1	; 0x01
    bd10:	9c 01       	movw	r18, r24
    bd12:	2e 5f       	subi	r18, 0xFE	; 254
    bd14:	3f 4f       	sbci	r19, 0xFF	; 255
    bd16:	89 81       	ldd	r24, Y+1	; 0x01
    bd18:	9a 81       	ldd	r25, Y+2	; 0x02
    bd1a:	ab 81       	ldd	r26, Y+3	; 0x03
    bd1c:	bc 81       	ldd	r27, Y+4	; 0x04
    bd1e:	89 a3       	lds	r24, 0x59
    bd20:	9a a3       	lds	r25, 0x5a
    bd22:	ab a3       	lds	r26, 0x5b
    bd24:	bc a3       	lds	r27, 0x5c
    bd26:	8f e0       	ldi	r24, 0x0F	; 15
    bd28:	8d a3       	lds	r24, 0x5d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    bd2a:	81 e0       	ldi	r24, 0x01	; 1
    bd2c:	8e a3       	lds	r24, 0x5e

      if( i_x < 0)
    bd2e:	89 a1       	lds	r24, 0x49
    bd30:	9a a1       	lds	r25, 0x4a
    bd32:	ab a1       	lds	r26, 0x4b
    bd34:	bc a1       	lds	r27, 0x4c
    bd36:	bb 23       	and	r27, r27
    bd38:	8c f4       	brge	.+34     	; 0xbd5c <eSKalmanFilterCorrect+0xfba>
      {
         i_x = -i_x;
    bd3a:	89 a1       	lds	r24, 0x49
    bd3c:	9a a1       	lds	r25, 0x4a
    bd3e:	ab a1       	lds	r26, 0x4b
    bd40:	bc a1       	lds	r27, 0x4c
    bd42:	b0 95       	com	r27
    bd44:	a0 95       	com	r26
    bd46:	90 95       	com	r25
    bd48:	81 95       	neg	r24
    bd4a:	9f 4f       	sbci	r25, 0xFF	; 255
    bd4c:	af 4f       	sbci	r26, 0xFF	; 255
    bd4e:	bf 4f       	sbci	r27, 0xFF	; 255
    bd50:	89 a3       	lds	r24, 0x59
    bd52:	9a a3       	lds	r25, 0x5a
    bd54:	ab a3       	lds	r26, 0x5b
    bd56:	bc a3       	lds	r27, 0x5c
         c_sign = -1;
    bd58:	8f ef       	ldi	r24, 0xFF	; 255
    bd5a:	8e a3       	lds	r24, 0x5e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    bd5c:	8d a1       	lds	r24, 0x4d
    bd5e:	89 30       	cpi	r24, 0x09	; 9
    bd60:	94 f1       	brlt	.+100    	; 0xbdc6 <eSKalmanFilterCorrect+0x1024>
    bd62:	8d a1       	lds	r24, 0x4d
    bd64:	81 31       	cpi	r24, 0x11	; 17
    bd66:	7c f5       	brge	.+94     	; 0xbdc6 <eSKalmanFilterCorrect+0x1024>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    bd68:	8d a1       	lds	r24, 0x4d
    bd6a:	99 27       	eor	r25, r25
    bd6c:	87 fd       	sbrc	r24, 7
    bd6e:	90 95       	com	r25
    bd70:	40 e1       	ldi	r20, 0x10	; 16
    bd72:	50 e0       	ldi	r21, 0x00	; 0
    bd74:	48 1b       	sub	r20, r24
    bd76:	59 0b       	sbc	r21, r25
    bd78:	89 a1       	lds	r24, 0x49
    bd7a:	9a a1       	lds	r25, 0x4a
    bd7c:	ab a1       	lds	r26, 0x4b
    bd7e:	bc a1       	lds	r27, 0x4c
    bd80:	04 c0       	rjmp	.+8      	; 0xbd8a <eSKalmanFilterCorrect+0xfe8>
    bd82:	88 0f       	add	r24, r24
    bd84:	99 1f       	adc	r25, r25
    bd86:	aa 1f       	adc	r26, r26
    bd88:	bb 1f       	adc	r27, r27
    bd8a:	4a 95       	dec	r20
    bd8c:	d2 f7       	brpl	.-12     	; 0xbd82 <eSKalmanFilterCorrect+0xfe0>
    bd8e:	ae 01       	movw	r20, r28
    bd90:	43 5b       	subi	r20, 0xB3	; 179
    bd92:	5d 4f       	sbci	r21, 0xFD	; 253
    bd94:	fa 01       	movw	r30, r20
    bd96:	80 83       	st	Z, r24
    bd98:	91 83       	std	Z+1, r25	; 0x01
    bd9a:	a2 83       	std	Z+2, r26	; 0x02
    bd9c:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    bd9e:	8e a1       	lds	r24, 0x4e
    bda0:	8f 3f       	cpi	r24, 0xFF	; 255
    bda2:	51 f4       	brne	.+20     	; 0xbdb8 <eSKalmanFilterCorrect+0x1016>
              return -t_tWord.as_word16[1];
    bda4:	ce 01       	movw	r24, r28
    bda6:	83 5b       	subi	r24, 0xB3	; 179
    bda8:	9d 4f       	sbci	r25, 0xFD	; 253
    bdaa:	fc 01       	movw	r30, r24
    bdac:	82 81       	ldd	r24, Z+2	; 0x02
    bdae:	93 81       	ldd	r25, Z+3	; 0x03
    bdb0:	90 95       	com	r25
    bdb2:	81 95       	neg	r24
    bdb4:	9f 4f       	sbci	r25, 0xFF	; 255
    bdb6:	27 c0       	rjmp	.+78     	; 0xbe06 <eSKalmanFilterCorrect+0x1064>
           else
            return t_tWord.as_word16[1];
    bdb8:	ce 01       	movw	r24, r28
    bdba:	83 5b       	subi	r24, 0xB3	; 179
    bdbc:	9d 4f       	sbci	r25, 0xFD	; 253
    bdbe:	fc 01       	movw	r30, r24
    bdc0:	82 81       	ldd	r24, Z+2	; 0x02
    bdc2:	93 81       	ldd	r25, Z+3	; 0x03
    bdc4:	20 c0       	rjmp	.+64     	; 0xbe06 <eSKalmanFilterCorrect+0x1064>
      }

      i_x = i_x >> c_n;
    bdc6:	8d a1       	lds	r24, 0x4d
    bdc8:	48 2f       	mov	r20, r24
    bdca:	55 27       	eor	r21, r21
    bdcc:	47 fd       	sbrc	r20, 7
    bdce:	50 95       	com	r21
    bdd0:	89 a1       	lds	r24, 0x49
    bdd2:	9a a1       	lds	r25, 0x4a
    bdd4:	ab a1       	lds	r26, 0x4b
    bdd6:	bc a1       	lds	r27, 0x4c
    bdd8:	04 2e       	mov	r0, r20
    bdda:	04 c0       	rjmp	.+8      	; 0xbde4 <eSKalmanFilterCorrect+0x1042>
    bddc:	b5 95       	asr	r27
    bdde:	a7 95       	ror	r26
    bde0:	97 95       	ror	r25
    bde2:	87 95       	ror	r24
    bde4:	0a 94       	dec	r0
    bde6:	d2 f7       	brpl	.-12     	; 0xbddc <eSKalmanFilterCorrect+0x103a>
    bde8:	89 a3       	lds	r24, 0x59
    bdea:	9a a3       	lds	r25, 0x5a
    bdec:	ab a3       	lds	r26, 0x5b
    bdee:	bc a3       	lds	r27, 0x5c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    bdf0:	8e a1       	lds	r24, 0x4e
    bdf2:	8f 3f       	cpi	r24, 0xFF	; 255
    bdf4:	31 f4       	brne	.+12     	; 0xbe02 <eSKalmanFilterCorrect+0x1060>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    bdf6:	89 a1       	lds	r24, 0x49
    bdf8:	9a a1       	lds	r25, 0x4a
    bdfa:	90 95       	com	r25
    bdfc:	81 95       	neg	r24
    bdfe:	9f 4f       	sbci	r25, 0xFF	; 255
    be00:	02 c0       	rjmp	.+4      	; 0xbe06 <eSKalmanFilterCorrect+0x1064>
       else
           return (int16_t)i_x;
    be02:	89 a1       	lds	r24, 0x49
    be04:	9a a1       	lds	r25, 0x4a
    be06:	f9 01       	movw	r30, r18
    be08:	80 83       	st	Z, r24
    be0a:	91 83       	std	Z+1, r25	; 0x01
   i_tmp = 0;
    be0c:	19 82       	std	Y+1, r1	; 0x01
    be0e:	1a 82       	std	Y+2, r1	; 0x02
    be10:	1b 82       	std	Y+3, r1	; 0x03
    be12:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[2][0], ps_deltaZ[0], i_tmp, 0);
    be14:	ce 01       	movw	r24, r28
    be16:	87 53       	subi	r24, 0x37	; 55
    be18:	9f 4f       	sbci	r25, 0xFF	; 255
    be1a:	fc 01       	movw	r30, r24
    be1c:	84 85       	ldd	r24, Z+12	; 0x0c
    be1e:	95 85       	ldd	r25, Z+13	; 0x0d
    be20:	9e 01       	movw	r18, r28
    be22:	2f 59       	subi	r18, 0x9F	; 159
    be24:	3d 4f       	sbci	r19, 0xFD	; 253
    be26:	f9 01       	movw	r30, r18
    be28:	20 81       	ld	r18, Z
    be2a:	31 81       	ldd	r19, Z+1	; 0x01
    be2c:	f9 01       	movw	r30, r18
    be2e:	60 81       	ld	r22, Z
    be30:	71 81       	ldd	r23, Z+1	; 0x01
    be32:	29 81       	ldd	r18, Y+1	; 0x01
    be34:	3a 81       	ldd	r19, Y+2	; 0x02
    be36:	4b 81       	ldd	r20, Y+3	; 0x03
    be38:	5c 81       	ldd	r21, Y+4	; 0x04
    be3a:	00 e0       	ldi	r16, 0x00	; 0
    be3c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    be40:	dc 01       	movw	r26, r24
    be42:	cb 01       	movw	r24, r22
    be44:	89 83       	std	Y+1, r24	; 0x01
    be46:	9a 83       	std	Y+2, r25	; 0x02
    be48:	ab 83       	std	Y+3, r26	; 0x03
    be4a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[2][1], ps_deltaZ[1], i_tmp, 0);
    be4c:	ce 01       	movw	r24, r28
    be4e:	87 53       	subi	r24, 0x37	; 55
    be50:	9f 4f       	sbci	r25, 0xFF	; 255
    be52:	fc 01       	movw	r30, r24
    be54:	86 85       	ldd	r24, Z+14	; 0x0e
    be56:	97 85       	ldd	r25, Z+15	; 0x0f
    be58:	9e 01       	movw	r18, r28
    be5a:	2f 59       	subi	r18, 0x9F	; 159
    be5c:	3d 4f       	sbci	r19, 0xFD	; 253
    be5e:	f9 01       	movw	r30, r18
    be60:	20 81       	ld	r18, Z
    be62:	31 81       	ldd	r19, Z+1	; 0x01
    be64:	2e 5f       	subi	r18, 0xFE	; 254
    be66:	3f 4f       	sbci	r19, 0xFF	; 255
    be68:	f9 01       	movw	r30, r18
    be6a:	60 81       	ld	r22, Z
    be6c:	71 81       	ldd	r23, Z+1	; 0x01
    be6e:	29 81       	ldd	r18, Y+1	; 0x01
    be70:	3a 81       	ldd	r19, Y+2	; 0x02
    be72:	4b 81       	ldd	r20, Y+3	; 0x03
    be74:	5c 81       	ldd	r21, Y+4	; 0x04
    be76:	00 e0       	ldi	r16, 0x00	; 0
    be78:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    be7c:	dc 01       	movw	r26, r24
    be7e:	cb 01       	movw	r24, r22
    be80:	89 83       	std	Y+1, r24	; 0x01
    be82:	9a 83       	std	Y+2, r25	; 0x02
    be84:	ab 83       	std	Y+3, r26	; 0x03
    be86:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K10[2][2], ps_deltaZ[2], i_tmp, 0);
    be88:	ce 01       	movw	r24, r28
    be8a:	87 53       	subi	r24, 0x37	; 55
    be8c:	9f 4f       	sbci	r25, 0xFF	; 255
    be8e:	fc 01       	movw	r30, r24
    be90:	80 89       	ldd	r24, Z+16	; 0x10
    be92:	91 89       	ldd	r25, Z+17	; 0x11
    be94:	9e 01       	movw	r18, r28
    be96:	2f 59       	subi	r18, 0x9F	; 159
    be98:	3d 4f       	sbci	r19, 0xFD	; 253
    be9a:	f9 01       	movw	r30, r18
    be9c:	20 81       	ld	r18, Z
    be9e:	31 81       	ldd	r19, Z+1	; 0x01
    bea0:	2c 5f       	subi	r18, 0xFC	; 252
    bea2:	3f 4f       	sbci	r19, 0xFF	; 255
    bea4:	f9 01       	movw	r30, r18
    bea6:	60 81       	ld	r22, Z
    bea8:	71 81       	ldd	r23, Z+1	; 0x01
    beaa:	29 81       	ldd	r18, Y+1	; 0x01
    beac:	3a 81       	ldd	r19, Y+2	; 0x02
    beae:	4b 81       	ldd	r20, Y+3	; 0x03
    beb0:	5c 81       	ldd	r21, Y+4	; 0x04
    beb2:	00 e0       	ldi	r16, 0x00	; 0
    beb4:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    beb8:	dc 01       	movw	r26, r24
    beba:	cb 01       	movw	r24, r22
    bebc:	89 83       	std	Y+1, r24	; 0x01
    bebe:	9a 83       	std	Y+2, r25	; 0x02
    bec0:	ab 83       	std	Y+3, r26	; 0x03
    bec2:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaGBias[2] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    bec4:	ce 01       	movw	r24, r28
    bec6:	8b 59       	subi	r24, 0x9B	; 155
    bec8:	9d 4f       	sbci	r25, 0xFD	; 253
    beca:	fc 01       	movw	r30, r24
    becc:	80 81       	ld	r24, Z
    bece:	91 81       	ldd	r25, Z+1	; 0x01
    bed0:	9c 01       	movw	r18, r24
    bed2:	2c 5f       	subi	r18, 0xFC	; 252
    bed4:	3f 4f       	sbci	r19, 0xFF	; 255
    bed6:	89 81       	ldd	r24, Y+1	; 0x01
    bed8:	9a 81       	ldd	r25, Y+2	; 0x02
    beda:	ab 81       	ldd	r26, Y+3	; 0x03
    bedc:	bc 81       	ldd	r27, Y+4	; 0x04
    bede:	8f a3       	lds	r24, 0x5f
    bee0:	98 a7       	lds	r25, 0x78
    bee2:	a9 a7       	lds	r26, 0x79
    bee4:	ba a7       	lds	r27, 0x7a
    bee6:	8f e0       	ldi	r24, 0x0F	; 15
    bee8:	8b a7       	lds	r24, 0x7b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    beea:	81 e0       	ldi	r24, 0x01	; 1
    beec:	8c a7       	lds	r24, 0x7c

      if( i_x < 0)
    beee:	8f a1       	lds	r24, 0x4f
    bef0:	98 a5       	lds	r25, 0x68
    bef2:	a9 a5       	lds	r26, 0x69
    bef4:	ba a5       	lds	r27, 0x6a
    bef6:	bb 23       	and	r27, r27
    bef8:	8c f4       	brge	.+34     	; 0xbf1c <eSKalmanFilterCorrect+0x117a>
      {
         i_x = -i_x;
    befa:	8f a1       	lds	r24, 0x4f
    befc:	98 a5       	lds	r25, 0x68
    befe:	a9 a5       	lds	r26, 0x69
    bf00:	ba a5       	lds	r27, 0x6a
    bf02:	b0 95       	com	r27
    bf04:	a0 95       	com	r26
    bf06:	90 95       	com	r25
    bf08:	81 95       	neg	r24
    bf0a:	9f 4f       	sbci	r25, 0xFF	; 255
    bf0c:	af 4f       	sbci	r26, 0xFF	; 255
    bf0e:	bf 4f       	sbci	r27, 0xFF	; 255
    bf10:	8f a3       	lds	r24, 0x5f
    bf12:	98 a7       	lds	r25, 0x78
    bf14:	a9 a7       	lds	r26, 0x79
    bf16:	ba a7       	lds	r27, 0x7a
         c_sign = -1;
    bf18:	8f ef       	ldi	r24, 0xFF	; 255
    bf1a:	8c a7       	lds	r24, 0x7c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    bf1c:	8b a5       	lds	r24, 0x6b
    bf1e:	89 30       	cpi	r24, 0x09	; 9
    bf20:	94 f1       	brlt	.+100    	; 0xbf86 <eSKalmanFilterCorrect+0x11e4>
    bf22:	8b a5       	lds	r24, 0x6b
    bf24:	81 31       	cpi	r24, 0x11	; 17
    bf26:	7c f5       	brge	.+94     	; 0xbf86 <eSKalmanFilterCorrect+0x11e4>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    bf28:	8b a5       	lds	r24, 0x6b
    bf2a:	99 27       	eor	r25, r25
    bf2c:	87 fd       	sbrc	r24, 7
    bf2e:	90 95       	com	r25
    bf30:	40 e1       	ldi	r20, 0x10	; 16
    bf32:	50 e0       	ldi	r21, 0x00	; 0
    bf34:	48 1b       	sub	r20, r24
    bf36:	59 0b       	sbc	r21, r25
    bf38:	8f a1       	lds	r24, 0x4f
    bf3a:	98 a5       	lds	r25, 0x68
    bf3c:	a9 a5       	lds	r26, 0x69
    bf3e:	ba a5       	lds	r27, 0x6a
    bf40:	04 c0       	rjmp	.+8      	; 0xbf4a <eSKalmanFilterCorrect+0x11a8>
    bf42:	88 0f       	add	r24, r24
    bf44:	99 1f       	adc	r25, r25
    bf46:	aa 1f       	adc	r26, r26
    bf48:	bb 1f       	adc	r27, r27
    bf4a:	4a 95       	dec	r20
    bf4c:	d2 f7       	brpl	.-12     	; 0xbf42 <eSKalmanFilterCorrect+0x11a0>
    bf4e:	ae 01       	movw	r20, r28
    bf50:	47 5b       	subi	r20, 0xB7	; 183
    bf52:	5d 4f       	sbci	r21, 0xFD	; 253
    bf54:	fa 01       	movw	r30, r20
    bf56:	80 83       	st	Z, r24
    bf58:	91 83       	std	Z+1, r25	; 0x01
    bf5a:	a2 83       	std	Z+2, r26	; 0x02
    bf5c:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    bf5e:	8c a5       	lds	r24, 0x6c
    bf60:	8f 3f       	cpi	r24, 0xFF	; 255
    bf62:	51 f4       	brne	.+20     	; 0xbf78 <eSKalmanFilterCorrect+0x11d6>
              return -t_tWord.as_word16[1];
    bf64:	ce 01       	movw	r24, r28
    bf66:	87 5b       	subi	r24, 0xB7	; 183
    bf68:	9d 4f       	sbci	r25, 0xFD	; 253
    bf6a:	fc 01       	movw	r30, r24
    bf6c:	82 81       	ldd	r24, Z+2	; 0x02
    bf6e:	93 81       	ldd	r25, Z+3	; 0x03
    bf70:	90 95       	com	r25
    bf72:	81 95       	neg	r24
    bf74:	9f 4f       	sbci	r25, 0xFF	; 255
    bf76:	27 c0       	rjmp	.+78     	; 0xbfc6 <eSKalmanFilterCorrect+0x1224>
           else
            return t_tWord.as_word16[1];
    bf78:	ce 01       	movw	r24, r28
    bf7a:	87 5b       	subi	r24, 0xB7	; 183
    bf7c:	9d 4f       	sbci	r25, 0xFD	; 253
    bf7e:	fc 01       	movw	r30, r24
    bf80:	82 81       	ldd	r24, Z+2	; 0x02
    bf82:	93 81       	ldd	r25, Z+3	; 0x03
    bf84:	20 c0       	rjmp	.+64     	; 0xbfc6 <eSKalmanFilterCorrect+0x1224>
      }

      i_x = i_x >> c_n;
    bf86:	8b a5       	lds	r24, 0x6b
    bf88:	48 2f       	mov	r20, r24
    bf8a:	55 27       	eor	r21, r21
    bf8c:	47 fd       	sbrc	r20, 7
    bf8e:	50 95       	com	r21
    bf90:	8f a1       	lds	r24, 0x4f
    bf92:	98 a5       	lds	r25, 0x68
    bf94:	a9 a5       	lds	r26, 0x69
    bf96:	ba a5       	lds	r27, 0x6a
    bf98:	04 2e       	mov	r0, r20
    bf9a:	04 c0       	rjmp	.+8      	; 0xbfa4 <eSKalmanFilterCorrect+0x1202>
    bf9c:	b5 95       	asr	r27
    bf9e:	a7 95       	ror	r26
    bfa0:	97 95       	ror	r25
    bfa2:	87 95       	ror	r24
    bfa4:	0a 94       	dec	r0
    bfa6:	d2 f7       	brpl	.-12     	; 0xbf9c <eSKalmanFilterCorrect+0x11fa>
    bfa8:	8f a3       	lds	r24, 0x5f
    bfaa:	98 a7       	lds	r25, 0x78
    bfac:	a9 a7       	lds	r26, 0x79
    bfae:	ba a7       	lds	r27, 0x7a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    bfb0:	8c a5       	lds	r24, 0x6c
    bfb2:	8f 3f       	cpi	r24, 0xFF	; 255
    bfb4:	31 f4       	brne	.+12     	; 0xbfc2 <eSKalmanFilterCorrect+0x1220>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    bfb6:	8f a1       	lds	r24, 0x4f
    bfb8:	98 a5       	lds	r25, 0x68
    bfba:	90 95       	com	r25
    bfbc:	81 95       	neg	r24
    bfbe:	9f 4f       	sbci	r25, 0xFF	; 255
    bfc0:	02 c0       	rjmp	.+4      	; 0xbfc6 <eSKalmanFilterCorrect+0x1224>
       else
           return (int16_t)i_x;
    bfc2:	8f a1       	lds	r24, 0x4f
    bfc4:	98 a5       	lds	r25, 0x68
    bfc6:	f9 01       	movw	r30, r18
    bfc8:	80 83       	st	Z, r24
    bfca:	91 83       	std	Z+1, r25	; 0x01

   i_tmp = 0;
    bfcc:	19 82       	std	Y+1, r1	; 0x01
    bfce:	1a 82       	std	Y+2, r1	; 0x02
    bfd0:	1b 82       	std	Y+3, r1	; 0x03
    bfd2:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[0][0], ps_deltaZ[0], i_tmp, 0);
    bfd4:	ce 01       	movw	r24, r28
    bfd6:	85 52       	subi	r24, 0x25	; 37
    bfd8:	9f 4f       	sbci	r25, 0xFF	; 255
    bfda:	fc 01       	movw	r30, r24
    bfdc:	80 81       	ld	r24, Z
    bfde:	91 81       	ldd	r25, Z+1	; 0x01
    bfe0:	9e 01       	movw	r18, r28
    bfe2:	2f 59       	subi	r18, 0x9F	; 159
    bfe4:	3d 4f       	sbci	r19, 0xFD	; 253
    bfe6:	f9 01       	movw	r30, r18
    bfe8:	20 81       	ld	r18, Z
    bfea:	31 81       	ldd	r19, Z+1	; 0x01
    bfec:	f9 01       	movw	r30, r18
    bfee:	60 81       	ld	r22, Z
    bff0:	71 81       	ldd	r23, Z+1	; 0x01
    bff2:	29 81       	ldd	r18, Y+1	; 0x01
    bff4:	3a 81       	ldd	r19, Y+2	; 0x02
    bff6:	4b 81       	ldd	r20, Y+3	; 0x03
    bff8:	5c 81       	ldd	r21, Y+4	; 0x04
    bffa:	00 e0       	ldi	r16, 0x00	; 0
    bffc:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c000:	dc 01       	movw	r26, r24
    c002:	cb 01       	movw	r24, r22
    c004:	89 83       	std	Y+1, r24	; 0x01
    c006:	9a 83       	std	Y+2, r25	; 0x02
    c008:	ab 83       	std	Y+3, r26	; 0x03
    c00a:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[0][1], ps_deltaZ[1], i_tmp, 0);
    c00c:	ce 01       	movw	r24, r28
    c00e:	85 52       	subi	r24, 0x25	; 37
    c010:	9f 4f       	sbci	r25, 0xFF	; 255
    c012:	fc 01       	movw	r30, r24
    c014:	82 81       	ldd	r24, Z+2	; 0x02
    c016:	93 81       	ldd	r25, Z+3	; 0x03
    c018:	9e 01       	movw	r18, r28
    c01a:	2f 59       	subi	r18, 0x9F	; 159
    c01c:	3d 4f       	sbci	r19, 0xFD	; 253
    c01e:	f9 01       	movw	r30, r18
    c020:	20 81       	ld	r18, Z
    c022:	31 81       	ldd	r19, Z+1	; 0x01
    c024:	2e 5f       	subi	r18, 0xFE	; 254
    c026:	3f 4f       	sbci	r19, 0xFF	; 255
    c028:	f9 01       	movw	r30, r18
    c02a:	60 81       	ld	r22, Z
    c02c:	71 81       	ldd	r23, Z+1	; 0x01
    c02e:	29 81       	ldd	r18, Y+1	; 0x01
    c030:	3a 81       	ldd	r19, Y+2	; 0x02
    c032:	4b 81       	ldd	r20, Y+3	; 0x03
    c034:	5c 81       	ldd	r21, Y+4	; 0x04
    c036:	00 e0       	ldi	r16, 0x00	; 0
    c038:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c03c:	dc 01       	movw	r26, r24
    c03e:	cb 01       	movw	r24, r22
    c040:	89 83       	std	Y+1, r24	; 0x01
    c042:	9a 83       	std	Y+2, r25	; 0x02
    c044:	ab 83       	std	Y+3, r26	; 0x03
    c046:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[0][2], ps_deltaZ[2], i_tmp, 0);
    c048:	ce 01       	movw	r24, r28
    c04a:	85 52       	subi	r24, 0x25	; 37
    c04c:	9f 4f       	sbci	r25, 0xFF	; 255
    c04e:	fc 01       	movw	r30, r24
    c050:	84 81       	ldd	r24, Z+4	; 0x04
    c052:	95 81       	ldd	r25, Z+5	; 0x05
    c054:	9e 01       	movw	r18, r28
    c056:	2f 59       	subi	r18, 0x9F	; 159
    c058:	3d 4f       	sbci	r19, 0xFD	; 253
    c05a:	f9 01       	movw	r30, r18
    c05c:	20 81       	ld	r18, Z
    c05e:	31 81       	ldd	r19, Z+1	; 0x01
    c060:	2c 5f       	subi	r18, 0xFC	; 252
    c062:	3f 4f       	sbci	r19, 0xFF	; 255
    c064:	f9 01       	movw	r30, r18
    c066:	60 81       	ld	r22, Z
    c068:	71 81       	ldd	r23, Z+1	; 0x01
    c06a:	29 81       	ldd	r18, Y+1	; 0x01
    c06c:	3a 81       	ldd	r19, Y+2	; 0x02
    c06e:	4b 81       	ldd	r20, Y+3	; 0x03
    c070:	5c 81       	ldd	r21, Y+4	; 0x04
    c072:	00 e0       	ldi	r16, 0x00	; 0
    c074:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c078:	dc 01       	movw	r26, r24
    c07a:	cb 01       	movw	r24, r22
    c07c:	89 83       	std	Y+1, r24	; 0x01
    c07e:	9a 83       	std	Y+2, r25	; 0x02
    c080:	ab 83       	std	Y+3, r26	; 0x03
    c082:	bc 83       	std	Y+4, r27	; 0x04
    c084:	89 81       	ldd	r24, Y+1	; 0x01
    c086:	9a 81       	ldd	r25, Y+2	; 0x02
    c088:	ab 81       	ldd	r26, Y+3	; 0x03
    c08a:	bc 81       	ldd	r27, Y+4	; 0x04
    c08c:	8d a7       	lds	r24, 0x7d
    c08e:	9e a7       	lds	r25, 0x7e
    c090:	af a7       	lds	r26, 0x7f
    c092:	b8 ab       	sts	0x58, r27
    c094:	8f e0       	ldi	r24, 0x0F	; 15
    c096:	89 ab       	sts	0x59, r24
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    c098:	81 e0       	ldi	r24, 0x01	; 1
    c09a:	8a ab       	sts	0x5a, r24

      if( i_x < 0)
    c09c:	8d a5       	lds	r24, 0x6d
    c09e:	9e a5       	lds	r25, 0x6e
    c0a0:	af a5       	lds	r26, 0x6f
    c0a2:	b8 a9       	sts	0x48, r27
    c0a4:	bb 23       	and	r27, r27
    c0a6:	8c f4       	brge	.+34     	; 0xc0ca <eSKalmanFilterCorrect+0x1328>
      {
         i_x = -i_x;
    c0a8:	8d a5       	lds	r24, 0x6d
    c0aa:	9e a5       	lds	r25, 0x6e
    c0ac:	af a5       	lds	r26, 0x6f
    c0ae:	b8 a9       	sts	0x48, r27
    c0b0:	b0 95       	com	r27
    c0b2:	a0 95       	com	r26
    c0b4:	90 95       	com	r25
    c0b6:	81 95       	neg	r24
    c0b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c0ba:	af 4f       	sbci	r26, 0xFF	; 255
    c0bc:	bf 4f       	sbci	r27, 0xFF	; 255
    c0be:	8d a7       	lds	r24, 0x7d
    c0c0:	9e a7       	lds	r25, 0x7e
    c0c2:	af a7       	lds	r26, 0x7f
    c0c4:	b8 ab       	sts	0x58, r27
         c_sign = -1;
    c0c6:	8f ef       	ldi	r24, 0xFF	; 255
    c0c8:	8a ab       	sts	0x5a, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    c0ca:	89 a9       	sts	0x49, r24
    c0cc:	89 30       	cpi	r24, 0x09	; 9
    c0ce:	94 f1       	brlt	.+100    	; 0xc134 <eSKalmanFilterCorrect+0x1392>
    c0d0:	89 a9       	sts	0x49, r24
    c0d2:	81 31       	cpi	r24, 0x11	; 17
    c0d4:	7c f5       	brge	.+94     	; 0xc134 <eSKalmanFilterCorrect+0x1392>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    c0d6:	89 a9       	sts	0x49, r24
    c0d8:	99 27       	eor	r25, r25
    c0da:	87 fd       	sbrc	r24, 7
    c0dc:	90 95       	com	r25
    c0de:	20 e1       	ldi	r18, 0x10	; 16
    c0e0:	30 e0       	ldi	r19, 0x00	; 0
    c0e2:	28 1b       	sub	r18, r24
    c0e4:	39 0b       	sbc	r19, r25
    c0e6:	8d a5       	lds	r24, 0x6d
    c0e8:	9e a5       	lds	r25, 0x6e
    c0ea:	af a5       	lds	r26, 0x6f
    c0ec:	b8 a9       	sts	0x48, r27
    c0ee:	04 c0       	rjmp	.+8      	; 0xc0f8 <eSKalmanFilterCorrect+0x1356>
    c0f0:	88 0f       	add	r24, r24
    c0f2:	99 1f       	adc	r25, r25
    c0f4:	aa 1f       	adc	r26, r26
    c0f6:	bb 1f       	adc	r27, r27
    c0f8:	2a 95       	dec	r18
    c0fa:	d2 f7       	brpl	.-12     	; 0xc0f0 <eSKalmanFilterCorrect+0x134e>
    c0fc:	9e 01       	movw	r18, r28
    c0fe:	2b 5b       	subi	r18, 0xBB	; 187
    c100:	3d 4f       	sbci	r19, 0xFD	; 253
    c102:	f9 01       	movw	r30, r18
    c104:	80 83       	st	Z, r24
    c106:	91 83       	std	Z+1, r25	; 0x01
    c108:	a2 83       	std	Z+2, r26	; 0x02
    c10a:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    c10c:	8a a9       	sts	0x4a, r24
    c10e:	8f 3f       	cpi	r24, 0xFF	; 255
    c110:	51 f4       	brne	.+20     	; 0xc126 <eSKalmanFilterCorrect+0x1384>
              return -t_tWord.as_word16[1];
    c112:	ce 01       	movw	r24, r28
    c114:	8b 5b       	subi	r24, 0xBB	; 187
    c116:	9d 4f       	sbci	r25, 0xFD	; 253
    c118:	fc 01       	movw	r30, r24
    c11a:	82 81       	ldd	r24, Z+2	; 0x02
    c11c:	93 81       	ldd	r25, Z+3	; 0x03
    c11e:	90 95       	com	r25
    c120:	81 95       	neg	r24
    c122:	9f 4f       	sbci	r25, 0xFF	; 255
    c124:	27 c0       	rjmp	.+78     	; 0xc174 <eSKalmanFilterCorrect+0x13d2>
           else
            return t_tWord.as_word16[1];
    c126:	ce 01       	movw	r24, r28
    c128:	8b 5b       	subi	r24, 0xBB	; 187
    c12a:	9d 4f       	sbci	r25, 0xFD	; 253
    c12c:	fc 01       	movw	r30, r24
    c12e:	82 81       	ldd	r24, Z+2	; 0x02
    c130:	93 81       	ldd	r25, Z+3	; 0x03
    c132:	20 c0       	rjmp	.+64     	; 0xc174 <eSKalmanFilterCorrect+0x13d2>
      }

      i_x = i_x >> c_n;
    c134:	89 a9       	sts	0x49, r24
    c136:	28 2f       	mov	r18, r24
    c138:	33 27       	eor	r19, r19
    c13a:	27 fd       	sbrc	r18, 7
    c13c:	30 95       	com	r19
    c13e:	8d a5       	lds	r24, 0x6d
    c140:	9e a5       	lds	r25, 0x6e
    c142:	af a5       	lds	r26, 0x6f
    c144:	b8 a9       	sts	0x48, r27
    c146:	02 2e       	mov	r0, r18
    c148:	04 c0       	rjmp	.+8      	; 0xc152 <eSKalmanFilterCorrect+0x13b0>
    c14a:	b5 95       	asr	r27
    c14c:	a7 95       	ror	r26
    c14e:	97 95       	ror	r25
    c150:	87 95       	ror	r24
    c152:	0a 94       	dec	r0
    c154:	d2 f7       	brpl	.-12     	; 0xc14a <eSKalmanFilterCorrect+0x13a8>
    c156:	8d a7       	lds	r24, 0x7d
    c158:	9e a7       	lds	r25, 0x7e
    c15a:	af a7       	lds	r26, 0x7f
    c15c:	b8 ab       	sts	0x58, r27
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    c15e:	8a a9       	sts	0x4a, r24
    c160:	8f 3f       	cpi	r24, 0xFF	; 255
    c162:	31 f4       	brne	.+12     	; 0xc170 <eSKalmanFilterCorrect+0x13ce>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    c164:	8d a5       	lds	r24, 0x6d
    c166:	9e a5       	lds	r25, 0x6e
    c168:	90 95       	com	r25
    c16a:	81 95       	neg	r24
    c16c:	9f 4f       	sbci	r25, 0xFF	; 255
    c16e:	02 c0       	rjmp	.+4      	; 0xc174 <eSKalmanFilterCorrect+0x13d2>
       else
           return (int16_t)i_x;
    c170:	8d a5       	lds	r24, 0x6d
    c172:	9e a5       	lds	r25, 0x6e
   ps_deltaGScale[0] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    c174:	9c 01       	movw	r18, r24
    c176:	ce 01       	movw	r24, r28
    c178:	89 59       	subi	r24, 0x99	; 153
    c17a:	9d 4f       	sbci	r25, 0xFD	; 253
    c17c:	fc 01       	movw	r30, r24
    c17e:	80 81       	ld	r24, Z
    c180:	91 81       	ldd	r25, Z+1	; 0x01
    c182:	fc 01       	movw	r30, r24
    c184:	20 83       	st	Z, r18
    c186:	31 83       	std	Z+1, r19	; 0x01
   i_tmp = 0;
    c188:	19 82       	std	Y+1, r1	; 0x01
    c18a:	1a 82       	std	Y+2, r1	; 0x02
    c18c:	1b 82       	std	Y+3, r1	; 0x03
    c18e:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[1][0], ps_deltaZ[0], i_tmp, 0);
    c190:	ce 01       	movw	r24, r28
    c192:	85 52       	subi	r24, 0x25	; 37
    c194:	9f 4f       	sbci	r25, 0xFF	; 255
    c196:	fc 01       	movw	r30, r24
    c198:	86 81       	ldd	r24, Z+6	; 0x06
    c19a:	97 81       	ldd	r25, Z+7	; 0x07
    c19c:	9e 01       	movw	r18, r28
    c19e:	2f 59       	subi	r18, 0x9F	; 159
    c1a0:	3d 4f       	sbci	r19, 0xFD	; 253
    c1a2:	f9 01       	movw	r30, r18
    c1a4:	20 81       	ld	r18, Z
    c1a6:	31 81       	ldd	r19, Z+1	; 0x01
    c1a8:	f9 01       	movw	r30, r18
    c1aa:	60 81       	ld	r22, Z
    c1ac:	71 81       	ldd	r23, Z+1	; 0x01
    c1ae:	29 81       	ldd	r18, Y+1	; 0x01
    c1b0:	3a 81       	ldd	r19, Y+2	; 0x02
    c1b2:	4b 81       	ldd	r20, Y+3	; 0x03
    c1b4:	5c 81       	ldd	r21, Y+4	; 0x04
    c1b6:	00 e0       	ldi	r16, 0x00	; 0
    c1b8:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c1bc:	dc 01       	movw	r26, r24
    c1be:	cb 01       	movw	r24, r22
    c1c0:	89 83       	std	Y+1, r24	; 0x01
    c1c2:	9a 83       	std	Y+2, r25	; 0x02
    c1c4:	ab 83       	std	Y+3, r26	; 0x03
    c1c6:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[1][1], ps_deltaZ[1], i_tmp, 0);
    c1c8:	ce 01       	movw	r24, r28
    c1ca:	85 52       	subi	r24, 0x25	; 37
    c1cc:	9f 4f       	sbci	r25, 0xFF	; 255
    c1ce:	fc 01       	movw	r30, r24
    c1d0:	80 85       	ldd	r24, Z+8	; 0x08
    c1d2:	91 85       	ldd	r25, Z+9	; 0x09
    c1d4:	9e 01       	movw	r18, r28
    c1d6:	2f 59       	subi	r18, 0x9F	; 159
    c1d8:	3d 4f       	sbci	r19, 0xFD	; 253
    c1da:	f9 01       	movw	r30, r18
    c1dc:	20 81       	ld	r18, Z
    c1de:	31 81       	ldd	r19, Z+1	; 0x01
    c1e0:	2e 5f       	subi	r18, 0xFE	; 254
    c1e2:	3f 4f       	sbci	r19, 0xFF	; 255
    c1e4:	f9 01       	movw	r30, r18
    c1e6:	60 81       	ld	r22, Z
    c1e8:	71 81       	ldd	r23, Z+1	; 0x01
    c1ea:	29 81       	ldd	r18, Y+1	; 0x01
    c1ec:	3a 81       	ldd	r19, Y+2	; 0x02
    c1ee:	4b 81       	ldd	r20, Y+3	; 0x03
    c1f0:	5c 81       	ldd	r21, Y+4	; 0x04
    c1f2:	00 e0       	ldi	r16, 0x00	; 0
    c1f4:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c1f8:	dc 01       	movw	r26, r24
    c1fa:	cb 01       	movw	r24, r22
    c1fc:	89 83       	std	Y+1, r24	; 0x01
    c1fe:	9a 83       	std	Y+2, r25	; 0x02
    c200:	ab 83       	std	Y+3, r26	; 0x03
    c202:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[1][2], ps_deltaZ[2], i_tmp, 0);
    c204:	ce 01       	movw	r24, r28
    c206:	85 52       	subi	r24, 0x25	; 37
    c208:	9f 4f       	sbci	r25, 0xFF	; 255
    c20a:	fc 01       	movw	r30, r24
    c20c:	82 85       	ldd	r24, Z+10	; 0x0a
    c20e:	93 85       	ldd	r25, Z+11	; 0x0b
    c210:	9e 01       	movw	r18, r28
    c212:	2f 59       	subi	r18, 0x9F	; 159
    c214:	3d 4f       	sbci	r19, 0xFD	; 253
    c216:	f9 01       	movw	r30, r18
    c218:	20 81       	ld	r18, Z
    c21a:	31 81       	ldd	r19, Z+1	; 0x01
    c21c:	2c 5f       	subi	r18, 0xFC	; 252
    c21e:	3f 4f       	sbci	r19, 0xFF	; 255
    c220:	f9 01       	movw	r30, r18
    c222:	60 81       	ld	r22, Z
    c224:	71 81       	ldd	r23, Z+1	; 0x01
    c226:	29 81       	ldd	r18, Y+1	; 0x01
    c228:	3a 81       	ldd	r19, Y+2	; 0x02
    c22a:	4b 81       	ldd	r20, Y+3	; 0x03
    c22c:	5c 81       	ldd	r21, Y+4	; 0x04
    c22e:	00 e0       	ldi	r16, 0x00	; 0
    c230:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c234:	dc 01       	movw	r26, r24
    c236:	cb 01       	movw	r24, r22
    c238:	89 83       	std	Y+1, r24	; 0x01
    c23a:	9a 83       	std	Y+2, r25	; 0x02
    c23c:	ab 83       	std	Y+3, r26	; 0x03
    c23e:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaGScale[1] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    c240:	ce 01       	movw	r24, r28
    c242:	89 59       	subi	r24, 0x99	; 153
    c244:	9d 4f       	sbci	r25, 0xFD	; 253
    c246:	fc 01       	movw	r30, r24
    c248:	80 81       	ld	r24, Z
    c24a:	91 81       	ldd	r25, Z+1	; 0x01
    c24c:	9c 01       	movw	r18, r24
    c24e:	2e 5f       	subi	r18, 0xFE	; 254
    c250:	3f 4f       	sbci	r19, 0xFF	; 255
    c252:	89 81       	ldd	r24, Y+1	; 0x01
    c254:	9a 81       	ldd	r25, Y+2	; 0x02
    c256:	ab 81       	ldd	r26, Y+3	; 0x03
    c258:	bc 81       	ldd	r27, Y+4	; 0x04
    c25a:	8b ab       	sts	0x5b, r24
    c25c:	9c ab       	sts	0x5c, r25
    c25e:	ad ab       	sts	0x5d, r26
    c260:	be ab       	sts	0x5e, r27
    c262:	8f e0       	ldi	r24, 0x0F	; 15
    c264:	8f ab       	sts	0x5f, r24
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    c266:	81 e0       	ldi	r24, 0x01	; 1
    c268:	88 af       	sts	0x78, r24

      if( i_x < 0)
    c26a:	8b a9       	sts	0x4b, r24
    c26c:	9c a9       	sts	0x4c, r25
    c26e:	ad a9       	sts	0x4d, r26
    c270:	be a9       	sts	0x4e, r27
    c272:	bb 23       	and	r27, r27
    c274:	8c f4       	brge	.+34     	; 0xc298 <eSKalmanFilterCorrect+0x14f6>
      {
         i_x = -i_x;
    c276:	8b a9       	sts	0x4b, r24
    c278:	9c a9       	sts	0x4c, r25
    c27a:	ad a9       	sts	0x4d, r26
    c27c:	be a9       	sts	0x4e, r27
    c27e:	b0 95       	com	r27
    c280:	a0 95       	com	r26
    c282:	90 95       	com	r25
    c284:	81 95       	neg	r24
    c286:	9f 4f       	sbci	r25, 0xFF	; 255
    c288:	af 4f       	sbci	r26, 0xFF	; 255
    c28a:	bf 4f       	sbci	r27, 0xFF	; 255
    c28c:	8b ab       	sts	0x5b, r24
    c28e:	9c ab       	sts	0x5c, r25
    c290:	ad ab       	sts	0x5d, r26
    c292:	be ab       	sts	0x5e, r27
         c_sign = -1;
    c294:	8f ef       	ldi	r24, 0xFF	; 255
    c296:	88 af       	sts	0x78, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    c298:	8f a9       	sts	0x4f, r24
    c29a:	89 30       	cpi	r24, 0x09	; 9
    c29c:	94 f1       	brlt	.+100    	; 0xc302 <eSKalmanFilterCorrect+0x1560>
    c29e:	8f a9       	sts	0x4f, r24
    c2a0:	81 31       	cpi	r24, 0x11	; 17
    c2a2:	7c f5       	brge	.+94     	; 0xc302 <eSKalmanFilterCorrect+0x1560>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    c2a4:	8f a9       	sts	0x4f, r24
    c2a6:	99 27       	eor	r25, r25
    c2a8:	87 fd       	sbrc	r24, 7
    c2aa:	90 95       	com	r25
    c2ac:	40 e1       	ldi	r20, 0x10	; 16
    c2ae:	50 e0       	ldi	r21, 0x00	; 0
    c2b0:	48 1b       	sub	r20, r24
    c2b2:	59 0b       	sbc	r21, r25
    c2b4:	8b a9       	sts	0x4b, r24
    c2b6:	9c a9       	sts	0x4c, r25
    c2b8:	ad a9       	sts	0x4d, r26
    c2ba:	be a9       	sts	0x4e, r27
    c2bc:	04 c0       	rjmp	.+8      	; 0xc2c6 <eSKalmanFilterCorrect+0x1524>
    c2be:	88 0f       	add	r24, r24
    c2c0:	99 1f       	adc	r25, r25
    c2c2:	aa 1f       	adc	r26, r26
    c2c4:	bb 1f       	adc	r27, r27
    c2c6:	4a 95       	dec	r20
    c2c8:	d2 f7       	brpl	.-12     	; 0xc2be <eSKalmanFilterCorrect+0x151c>
    c2ca:	ae 01       	movw	r20, r28
    c2cc:	4f 5b       	subi	r20, 0xBF	; 191
    c2ce:	5d 4f       	sbci	r21, 0xFD	; 253
    c2d0:	fa 01       	movw	r30, r20
    c2d2:	80 83       	st	Z, r24
    c2d4:	91 83       	std	Z+1, r25	; 0x01
    c2d6:	a2 83       	std	Z+2, r26	; 0x02
    c2d8:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    c2da:	88 ad       	sts	0x68, r24
    c2dc:	8f 3f       	cpi	r24, 0xFF	; 255
    c2de:	51 f4       	brne	.+20     	; 0xc2f4 <eSKalmanFilterCorrect+0x1552>
              return -t_tWord.as_word16[1];
    c2e0:	ce 01       	movw	r24, r28
    c2e2:	8f 5b       	subi	r24, 0xBF	; 191
    c2e4:	9d 4f       	sbci	r25, 0xFD	; 253
    c2e6:	fc 01       	movw	r30, r24
    c2e8:	82 81       	ldd	r24, Z+2	; 0x02
    c2ea:	93 81       	ldd	r25, Z+3	; 0x03
    c2ec:	90 95       	com	r25
    c2ee:	81 95       	neg	r24
    c2f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c2f2:	27 c0       	rjmp	.+78     	; 0xc342 <eSKalmanFilterCorrect+0x15a0>
           else
            return t_tWord.as_word16[1];
    c2f4:	ce 01       	movw	r24, r28
    c2f6:	8f 5b       	subi	r24, 0xBF	; 191
    c2f8:	9d 4f       	sbci	r25, 0xFD	; 253
    c2fa:	fc 01       	movw	r30, r24
    c2fc:	82 81       	ldd	r24, Z+2	; 0x02
    c2fe:	93 81       	ldd	r25, Z+3	; 0x03
    c300:	20 c0       	rjmp	.+64     	; 0xc342 <eSKalmanFilterCorrect+0x15a0>
      }

      i_x = i_x >> c_n;
    c302:	8f a9       	sts	0x4f, r24
    c304:	48 2f       	mov	r20, r24
    c306:	55 27       	eor	r21, r21
    c308:	47 fd       	sbrc	r20, 7
    c30a:	50 95       	com	r21
    c30c:	8b a9       	sts	0x4b, r24
    c30e:	9c a9       	sts	0x4c, r25
    c310:	ad a9       	sts	0x4d, r26
    c312:	be a9       	sts	0x4e, r27
    c314:	04 2e       	mov	r0, r20
    c316:	04 c0       	rjmp	.+8      	; 0xc320 <eSKalmanFilterCorrect+0x157e>
    c318:	b5 95       	asr	r27
    c31a:	a7 95       	ror	r26
    c31c:	97 95       	ror	r25
    c31e:	87 95       	ror	r24
    c320:	0a 94       	dec	r0
    c322:	d2 f7       	brpl	.-12     	; 0xc318 <eSKalmanFilterCorrect+0x1576>
    c324:	8b ab       	sts	0x5b, r24
    c326:	9c ab       	sts	0x5c, r25
    c328:	ad ab       	sts	0x5d, r26
    c32a:	be ab       	sts	0x5e, r27
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    c32c:	88 ad       	sts	0x68, r24
    c32e:	8f 3f       	cpi	r24, 0xFF	; 255
    c330:	31 f4       	brne	.+12     	; 0xc33e <eSKalmanFilterCorrect+0x159c>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    c332:	8b a9       	sts	0x4b, r24
    c334:	9c a9       	sts	0x4c, r25
    c336:	90 95       	com	r25
    c338:	81 95       	neg	r24
    c33a:	9f 4f       	sbci	r25, 0xFF	; 255
    c33c:	02 c0       	rjmp	.+4      	; 0xc342 <eSKalmanFilterCorrect+0x15a0>
       else
           return (int16_t)i_x;
    c33e:	8b a9       	sts	0x4b, r24
    c340:	9c a9       	sts	0x4c, r25
    c342:	f9 01       	movw	r30, r18
    c344:	80 83       	st	Z, r24
    c346:	91 83       	std	Z+1, r25	; 0x01
   i_tmp = 0;
    c348:	19 82       	std	Y+1, r1	; 0x01
    c34a:	1a 82       	std	Y+2, r1	; 0x02
    c34c:	1b 82       	std	Y+3, r1	; 0x03
    c34e:	1c 82       	std	Y+4, r1	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[2][0], ps_deltaZ[0], i_tmp, 0);
    c350:	ce 01       	movw	r24, r28
    c352:	85 52       	subi	r24, 0x25	; 37
    c354:	9f 4f       	sbci	r25, 0xFF	; 255
    c356:	fc 01       	movw	r30, r24
    c358:	84 85       	ldd	r24, Z+12	; 0x0c
    c35a:	95 85       	ldd	r25, Z+13	; 0x0d
    c35c:	9e 01       	movw	r18, r28
    c35e:	2f 59       	subi	r18, 0x9F	; 159
    c360:	3d 4f       	sbci	r19, 0xFD	; 253
    c362:	f9 01       	movw	r30, r18
    c364:	20 81       	ld	r18, Z
    c366:	31 81       	ldd	r19, Z+1	; 0x01
    c368:	f9 01       	movw	r30, r18
    c36a:	60 81       	ld	r22, Z
    c36c:	71 81       	ldd	r23, Z+1	; 0x01
    c36e:	29 81       	ldd	r18, Y+1	; 0x01
    c370:	3a 81       	ldd	r19, Y+2	; 0x02
    c372:	4b 81       	ldd	r20, Y+3	; 0x03
    c374:	5c 81       	ldd	r21, Y+4	; 0x04
    c376:	00 e0       	ldi	r16, 0x00	; 0
    c378:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c37c:	dc 01       	movw	r26, r24
    c37e:	cb 01       	movw	r24, r22
    c380:	89 83       	std	Y+1, r24	; 0x01
    c382:	9a 83       	std	Y+2, r25	; 0x02
    c384:	ab 83       	std	Y+3, r26	; 0x03
    c386:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[2][1], ps_deltaZ[1], i_tmp, 0);
    c388:	ce 01       	movw	r24, r28
    c38a:	85 52       	subi	r24, 0x25	; 37
    c38c:	9f 4f       	sbci	r25, 0xFF	; 255
    c38e:	fc 01       	movw	r30, r24
    c390:	86 85       	ldd	r24, Z+14	; 0x0e
    c392:	97 85       	ldd	r25, Z+15	; 0x0f
    c394:	9e 01       	movw	r18, r28
    c396:	2f 59       	subi	r18, 0x9F	; 159
    c398:	3d 4f       	sbci	r19, 0xFD	; 253
    c39a:	f9 01       	movw	r30, r18
    c39c:	20 81       	ld	r18, Z
    c39e:	31 81       	ldd	r19, Z+1	; 0x01
    c3a0:	2e 5f       	subi	r18, 0xFE	; 254
    c3a2:	3f 4f       	sbci	r19, 0xFF	; 255
    c3a4:	f9 01       	movw	r30, r18
    c3a6:	60 81       	ld	r22, Z
    c3a8:	71 81       	ldd	r23, Z+1	; 0x01
    c3aa:	29 81       	ldd	r18, Y+1	; 0x01
    c3ac:	3a 81       	ldd	r19, Y+2	; 0x02
    c3ae:	4b 81       	ldd	r20, Y+3	; 0x03
    c3b0:	5c 81       	ldd	r21, Y+4	; 0x04
    c3b2:	00 e0       	ldi	r16, 0x00	; 0
    c3b4:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c3b8:	dc 01       	movw	r26, r24
    c3ba:	cb 01       	movw	r24, r22
    c3bc:	89 83       	std	Y+1, r24	; 0x01
    c3be:	9a 83       	std	Y+2, r25	; 0x02
    c3c0:	ab 83       	std	Y+3, r26	; 0x03
    c3c2:	bc 83       	std	Y+4, r27	; 0x04
   i_tmp = utl_mac16x16_32( as_K20[2][2], ps_deltaZ[2], i_tmp, 0);
    c3c4:	ce 01       	movw	r24, r28
    c3c6:	85 52       	subi	r24, 0x25	; 37
    c3c8:	9f 4f       	sbci	r25, 0xFF	; 255
    c3ca:	fc 01       	movw	r30, r24
    c3cc:	80 89       	ldd	r24, Z+16	; 0x10
    c3ce:	91 89       	ldd	r25, Z+17	; 0x11
    c3d0:	9e 01       	movw	r18, r28
    c3d2:	2f 59       	subi	r18, 0x9F	; 159
    c3d4:	3d 4f       	sbci	r19, 0xFD	; 253
    c3d6:	f9 01       	movw	r30, r18
    c3d8:	20 81       	ld	r18, Z
    c3da:	31 81       	ldd	r19, Z+1	; 0x01
    c3dc:	2c 5f       	subi	r18, 0xFC	; 252
    c3de:	3f 4f       	sbci	r19, 0xFF	; 255
    c3e0:	f9 01       	movw	r30, r18
    c3e2:	60 81       	ld	r22, Z
    c3e4:	71 81       	ldd	r23, Z+1	; 0x01
    c3e6:	29 81       	ldd	r18, Y+1	; 0x01
    c3e8:	3a 81       	ldd	r19, Y+2	; 0x02
    c3ea:	4b 81       	ldd	r20, Y+3	; 0x03
    c3ec:	5c 81       	ldd	r21, Y+4	; 0x04
    c3ee:	00 e0       	ldi	r16, 0x00	; 0
    c3f0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    c3f4:	dc 01       	movw	r26, r24
    c3f6:	cb 01       	movw	r24, r22
    c3f8:	89 83       	std	Y+1, r24	; 0x01
    c3fa:	9a 83       	std	Y+2, r25	; 0x02
    c3fc:	ab 83       	std	Y+3, r26	; 0x03
    c3fe:	bc 83       	std	Y+4, r27	; 0x04
   ps_deltaGScale[2] = utl_rShft32_16( i_tmp, 15); /*Q15*/
    c400:	ce 01       	movw	r24, r28
    c402:	89 59       	subi	r24, 0x99	; 153
    c404:	9d 4f       	sbci	r25, 0xFD	; 253
    c406:	fc 01       	movw	r30, r24
    c408:	80 81       	ld	r24, Z
    c40a:	91 81       	ldd	r25, Z+1	; 0x01
    c40c:	9c 01       	movw	r18, r24
    c40e:	2c 5f       	subi	r18, 0xFC	; 252
    c410:	3f 4f       	sbci	r19, 0xFF	; 255
    c412:	89 81       	ldd	r24, Y+1	; 0x01
    c414:	9a 81       	ldd	r25, Y+2	; 0x02
    c416:	ab 81       	ldd	r26, Y+3	; 0x03
    c418:	bc 81       	ldd	r27, Y+4	; 0x04
    c41a:	89 af       	sts	0x79, r24
    c41c:	9a af       	sts	0x7a, r25
    c41e:	ab af       	sts	0x7b, r26
    c420:	bc af       	sts	0x7c, r27
    c422:	8f e0       	ldi	r24, 0x0F	; 15
    c424:	8d af       	sts	0x7d, r24
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    c426:	81 e0       	ldi	r24, 0x01	; 1
    c428:	8e af       	sts	0x7e, r24

      if( i_x < 0)
    c42a:	89 ad       	sts	0x69, r24
    c42c:	9a ad       	sts	0x6a, r25
    c42e:	ab ad       	sts	0x6b, r26
    c430:	bc ad       	sts	0x6c, r27
    c432:	bb 23       	and	r27, r27
    c434:	8c f4       	brge	.+34     	; 0xc458 <eSKalmanFilterCorrect+0x16b6>
      {
         i_x = -i_x;
    c436:	89 ad       	sts	0x69, r24
    c438:	9a ad       	sts	0x6a, r25
    c43a:	ab ad       	sts	0x6b, r26
    c43c:	bc ad       	sts	0x6c, r27
    c43e:	b0 95       	com	r27
    c440:	a0 95       	com	r26
    c442:	90 95       	com	r25
    c444:	81 95       	neg	r24
    c446:	9f 4f       	sbci	r25, 0xFF	; 255
    c448:	af 4f       	sbci	r26, 0xFF	; 255
    c44a:	bf 4f       	sbci	r27, 0xFF	; 255
    c44c:	89 af       	sts	0x79, r24
    c44e:	9a af       	sts	0x7a, r25
    c450:	ab af       	sts	0x7b, r26
    c452:	bc af       	sts	0x7c, r27
         c_sign = -1;
    c454:	8f ef       	ldi	r24, 0xFF	; 255
    c456:	8e af       	sts	0x7e, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    c458:	8d ad       	sts	0x6d, r24
    c45a:	89 30       	cpi	r24, 0x09	; 9
    c45c:	94 f1       	brlt	.+100    	; 0xc4c2 <eSKalmanFilterCorrect+0x1720>
    c45e:	8d ad       	sts	0x6d, r24
    c460:	81 31       	cpi	r24, 0x11	; 17
    c462:	7c f5       	brge	.+94     	; 0xc4c2 <eSKalmanFilterCorrect+0x1720>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    c464:	8d ad       	sts	0x6d, r24
    c466:	99 27       	eor	r25, r25
    c468:	87 fd       	sbrc	r24, 7
    c46a:	90 95       	com	r25
    c46c:	40 e1       	ldi	r20, 0x10	; 16
    c46e:	50 e0       	ldi	r21, 0x00	; 0
    c470:	48 1b       	sub	r20, r24
    c472:	59 0b       	sbc	r21, r25
    c474:	89 ad       	sts	0x69, r24
    c476:	9a ad       	sts	0x6a, r25
    c478:	ab ad       	sts	0x6b, r26
    c47a:	bc ad       	sts	0x6c, r27
    c47c:	04 c0       	rjmp	.+8      	; 0xc486 <eSKalmanFilterCorrect+0x16e4>
    c47e:	88 0f       	add	r24, r24
    c480:	99 1f       	adc	r25, r25
    c482:	aa 1f       	adc	r26, r26
    c484:	bb 1f       	adc	r27, r27
    c486:	4a 95       	dec	r20
    c488:	d2 f7       	brpl	.-12     	; 0xc47e <eSKalmanFilterCorrect+0x16dc>
    c48a:	ae 01       	movw	r20, r28
    c48c:	43 5c       	subi	r20, 0xC3	; 195
    c48e:	5d 4f       	sbci	r21, 0xFD	; 253
    c490:	fa 01       	movw	r30, r20
    c492:	80 83       	st	Z, r24
    c494:	91 83       	std	Z+1, r25	; 0x01
    c496:	a2 83       	std	Z+2, r26	; 0x02
    c498:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    c49a:	8e ad       	sts	0x6e, r24
    c49c:	8f 3f       	cpi	r24, 0xFF	; 255
    c49e:	51 f4       	brne	.+20     	; 0xc4b4 <eSKalmanFilterCorrect+0x1712>
              return -t_tWord.as_word16[1];
    c4a0:	ce 01       	movw	r24, r28
    c4a2:	83 5c       	subi	r24, 0xC3	; 195
    c4a4:	9d 4f       	sbci	r25, 0xFD	; 253
    c4a6:	fc 01       	movw	r30, r24
    c4a8:	82 81       	ldd	r24, Z+2	; 0x02
    c4aa:	93 81       	ldd	r25, Z+3	; 0x03
    c4ac:	90 95       	com	r25
    c4ae:	81 95       	neg	r24
    c4b0:	9f 4f       	sbci	r25, 0xFF	; 255
    c4b2:	27 c0       	rjmp	.+78     	; 0xc502 <eSKalmanFilterCorrect+0x1760>
           else
            return t_tWord.as_word16[1];
    c4b4:	ce 01       	movw	r24, r28
    c4b6:	83 5c       	subi	r24, 0xC3	; 195
    c4b8:	9d 4f       	sbci	r25, 0xFD	; 253
    c4ba:	fc 01       	movw	r30, r24
    c4bc:	82 81       	ldd	r24, Z+2	; 0x02
    c4be:	93 81       	ldd	r25, Z+3	; 0x03
    c4c0:	20 c0       	rjmp	.+64     	; 0xc502 <eSKalmanFilterCorrect+0x1760>
      }

      i_x = i_x >> c_n;
    c4c2:	8d ad       	sts	0x6d, r24
    c4c4:	48 2f       	mov	r20, r24
    c4c6:	55 27       	eor	r21, r21
    c4c8:	47 fd       	sbrc	r20, 7
    c4ca:	50 95       	com	r21
    c4cc:	89 ad       	sts	0x69, r24
    c4ce:	9a ad       	sts	0x6a, r25
    c4d0:	ab ad       	sts	0x6b, r26
    c4d2:	bc ad       	sts	0x6c, r27
    c4d4:	04 2e       	mov	r0, r20
    c4d6:	04 c0       	rjmp	.+8      	; 0xc4e0 <eSKalmanFilterCorrect+0x173e>
    c4d8:	b5 95       	asr	r27
    c4da:	a7 95       	ror	r26
    c4dc:	97 95       	ror	r25
    c4de:	87 95       	ror	r24
    c4e0:	0a 94       	dec	r0
    c4e2:	d2 f7       	brpl	.-12     	; 0xc4d8 <eSKalmanFilterCorrect+0x1736>
    c4e4:	89 af       	sts	0x79, r24
    c4e6:	9a af       	sts	0x7a, r25
    c4e8:	ab af       	sts	0x7b, r26
    c4ea:	bc af       	sts	0x7c, r27
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    c4ec:	8e ad       	sts	0x6e, r24
    c4ee:	8f 3f       	cpi	r24, 0xFF	; 255
    c4f0:	31 f4       	brne	.+12     	; 0xc4fe <eSKalmanFilterCorrect+0x175c>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    c4f2:	89 ad       	sts	0x69, r24
    c4f4:	9a ad       	sts	0x6a, r25
    c4f6:	90 95       	com	r25
    c4f8:	81 95       	neg	r24
    c4fa:	9f 4f       	sbci	r25, 0xFF	; 255
    c4fc:	02 c0       	rjmp	.+4      	; 0xc502 <eSKalmanFilterCorrect+0x1760>
       else
           return (int16_t)i_x;
    c4fe:	89 ad       	sts	0x69, r24
    c500:	9a ad       	sts	0x6a, r25
    c502:	f9 01       	movw	r30, r18
    c504:	80 83       	st	Z, r24
    c506:	91 83       	std	Z+1, r25	; 0x01
   /*------------------------------------------------------------------------*
    * Correct the error covariance matrix
    * P = (eye(9)-K*H)*P;
    * [1] eq 3.17
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_K00[0][0], /*Q15*/
    c508:	ce 01       	movw	r24, r28
    c50a:	89 54       	subi	r24, 0x49	; 73
    c50c:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00[0][0], /*Q15*/
    c50e:	9e 01       	movw	r18, r28
    c510:	25 5b       	subi	r18, 0xB5	; 181
    c512:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp1[0][0],/*Q15*/
    c514:	fe 01       	movw	r30, r28
    c516:	ef 57       	subi	r30, 0x7F	; 127
    c518:	ff 4f       	sbci	r31, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * Correct the error covariance matrix
    * P = (eye(9)-K*H)*P;
    * [1] eq 3.17
    *------------------------------------------------------------------------*/
   utl_matMult16x16_16( &as_K00[0][0], /*Q15*/
    c51a:	63 e0       	ldi	r22, 0x03	; 3
    c51c:	43 e0       	ldi	r20, 0x03	; 3
    c51e:	03 e0       	ldi	r16, 0x03	; 3
    c520:	0f 2e       	mov	r0, r31
    c522:	f3 e0       	ldi	r31, 0x03	; 3
    c524:	ef 2e       	mov	r14, r31
    c526:	f0 2d       	mov	r31, r0
    c528:	6f 01       	movw	r12, r30
    c52a:	aa 24       	eor	r10, r10
    c52c:	0f 2e       	mov	r0, r31
    c52e:	ff e0       	ldi	r31, 0x0F	; 15
    c530:	8f 2e       	mov	r8, r31
    c532:	f0 2d       	mov	r31, r0
    c534:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_tmp1[0][0],/*Q15*/
                        0,
                        15);

   utl_matMult16x16_16( &as_K10[0][0], /*Q15*/
    c538:	ce 01       	movw	r24, r28
    c53a:	87 53       	subi	r24, 0x37	; 55
    c53c:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00[0][0], /*Q15*/
    c53e:	9e 01       	movw	r18, r28
    c540:	25 5b       	subi	r18, 0xB5	; 181
    c542:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp2[0][0],/*Q15*/
    c544:	fe 01       	movw	r30, r28
    c546:	ed 56       	subi	r30, 0x6D	; 109
    c548:	ff 4f       	sbci	r31, 0xFF	; 255
                        3,
                        &as_tmp1[0][0],/*Q15*/
                        0,
                        15);

   utl_matMult16x16_16( &as_K10[0][0], /*Q15*/
    c54a:	63 e0       	ldi	r22, 0x03	; 3
    c54c:	43 e0       	ldi	r20, 0x03	; 3
    c54e:	03 e0       	ldi	r16, 0x03	; 3
    c550:	0f 2e       	mov	r0, r31
    c552:	f3 e0       	ldi	r31, 0x03	; 3
    c554:	ef 2e       	mov	r14, r31
    c556:	f0 2d       	mov	r31, r0
    c558:	6f 01       	movw	r12, r30
    c55a:	aa 24       	eor	r10, r10
    c55c:	0f 2e       	mov	r0, r31
    c55e:	ff e0       	ldi	r31, 0x0F	; 15
    c560:	8f 2e       	mov	r8, r31
    c562:	f0 2d       	mov	r31, r0
    c564:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_tmp2[0][0],/*Q15*/
                        0,
                        15);

   utl_matMult16x16_16( &as_K20[0][0], /*Q15*/
    c568:	ce 01       	movw	r24, r28
    c56a:	85 52       	subi	r24, 0x25	; 37
    c56c:	9f 4f       	sbci	r25, 0xFF	; 255
                        3,
                        3,
                        &as_H00[0][0], /*Q15*/
    c56e:	9e 01       	movw	r18, r28
    c570:	25 5b       	subi	r18, 0xB5	; 181
    c572:	3f 4f       	sbci	r19, 0xFF	; 255
                        3,
                        3,
                        &as_tmp3[0][0],/*Q15*/
    c574:	fe 01       	movw	r30, r28
    c576:	eb 55       	subi	r30, 0x5B	; 91
    c578:	ff 4f       	sbci	r31, 0xFF	; 255
                        3,
                        &as_tmp2[0][0],/*Q15*/
                        0,
                        15);

   utl_matMult16x16_16( &as_K20[0][0], /*Q15*/
    c57a:	63 e0       	ldi	r22, 0x03	; 3
    c57c:	43 e0       	ldi	r20, 0x03	; 3
    c57e:	03 e0       	ldi	r16, 0x03	; 3
    c580:	0f 2e       	mov	r0, r31
    c582:	f3 e0       	ldi	r31, 0x03	; 3
    c584:	ef 2e       	mov	r14, r31
    c586:	f0 2d       	mov	r31, r0
    c588:	6f 01       	movw	r12, r30
    c58a:	aa 24       	eor	r10, r10
    c58c:	0f 2e       	mov	r0, r31
    c58e:	ff e0       	ldi	r31, 0x0F	; 15
    c590:	8f 2e       	mov	r8, r31
    c592:	f0 2d       	mov	r31, r0
    c594:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        3,
                        &as_tmp3[0][0],/*Q15*/
                        0,
                        15);

   memset( (void *)as_eyeMinusKH, 0, sizeof( as_eyeMinusKH));
    c598:	ce 01       	movw	r24, r28
    c59a:	83 51       	subi	r24, 0x13	; 19
    c59c:	9f 4f       	sbci	r25, 0xFF	; 255
    c59e:	22 ea       	ldi	r18, 0xA2	; 162
    c5a0:	fc 01       	movw	r30, r24
    c5a2:	32 2f       	mov	r19, r18
    c5a4:	11 92       	st	Z+, r1
    c5a6:	3a 95       	dec	r19
    c5a8:	e9 f7       	brne	.-6      	; 0xc5a4 <eSKalmanFilterCorrect+0x1802>
   for( c_count = 0; c_count < 9; c_count++)
    c5aa:	1d 82       	std	Y+5, r1	; 0x05
    c5ac:	24 c0       	rjmp	.+72     	; 0xc5f6 <eSKalmanFilterCorrect+0x1854>
      as_eyeMinusKH[c_count][c_count] = 32767;
    c5ae:	8d 81       	ldd	r24, Y+5	; 0x05
    c5b0:	28 2f       	mov	r18, r24
    c5b2:	33 27       	eor	r19, r19
    c5b4:	27 fd       	sbrc	r18, 7
    c5b6:	30 95       	com	r19
    c5b8:	8d 81       	ldd	r24, Y+5	; 0x05
    c5ba:	68 2f       	mov	r22, r24
    c5bc:	77 27       	eor	r23, r23
    c5be:	67 fd       	sbrc	r22, 7
    c5c0:	70 95       	com	r23
    c5c2:	ae 01       	movw	r20, r28
    c5c4:	43 51       	subi	r20, 0x13	; 19
    c5c6:	5f 4f       	sbci	r21, 0xFF	; 255
    c5c8:	c9 01       	movw	r24, r18
    c5ca:	88 0f       	add	r24, r24
    c5cc:	99 1f       	adc	r25, r25
    c5ce:	88 0f       	add	r24, r24
    c5d0:	99 1f       	adc	r25, r25
    c5d2:	88 0f       	add	r24, r24
    c5d4:	99 1f       	adc	r25, r25
    c5d6:	82 0f       	add	r24, r18
    c5d8:	93 1f       	adc	r25, r19
    c5da:	86 0f       	add	r24, r22
    c5dc:	97 1f       	adc	r25, r23
    c5de:	88 0f       	add	r24, r24
    c5e0:	99 1f       	adc	r25, r25
    c5e2:	84 0f       	add	r24, r20
    c5e4:	95 1f       	adc	r25, r21
    c5e6:	2f ef       	ldi	r18, 0xFF	; 255
    c5e8:	3f e7       	ldi	r19, 0x7F	; 127
    c5ea:	fc 01       	movw	r30, r24
    c5ec:	20 83       	st	Z, r18
    c5ee:	31 83       	std	Z+1, r19	; 0x01
                        &as_tmp3[0][0],/*Q15*/
                        0,
                        15);

   memset( (void *)as_eyeMinusKH, 0, sizeof( as_eyeMinusKH));
   for( c_count = 0; c_count < 9; c_count++)
    c5f0:	8d 81       	ldd	r24, Y+5	; 0x05
    c5f2:	8f 5f       	subi	r24, 0xFF	; 255
    c5f4:	8d 83       	std	Y+5, r24	; 0x05
    c5f6:	8d 81       	ldd	r24, Y+5	; 0x05
    c5f8:	89 30       	cpi	r24, 0x09	; 9
    c5fa:	cc f2       	brlt	.-78     	; 0xc5ae <eSKalmanFilterCorrect+0x180c>
      as_eyeMinusKH[c_count][c_count] = 32767;

   as_eyeMinusKH[0][0] -= as_tmp1[0][0];
    c5fc:	ce 01       	movw	r24, r28
    c5fe:	83 51       	subi	r24, 0x13	; 19
    c600:	9f 4f       	sbci	r25, 0xFF	; 255
    c602:	fc 01       	movw	r30, r24
    c604:	20 81       	ld	r18, Z
    c606:	31 81       	ldd	r19, Z+1	; 0x01
    c608:	ce 01       	movw	r24, r28
    c60a:	8f 57       	subi	r24, 0x7F	; 127
    c60c:	9f 4f       	sbci	r25, 0xFF	; 255
    c60e:	fc 01       	movw	r30, r24
    c610:	80 81       	ld	r24, Z
    c612:	91 81       	ldd	r25, Z+1	; 0x01
    c614:	28 1b       	sub	r18, r24
    c616:	39 0b       	sbc	r19, r25
    c618:	ce 01       	movw	r24, r28
    c61a:	83 51       	subi	r24, 0x13	; 19
    c61c:	9f 4f       	sbci	r25, 0xFF	; 255
    c61e:	fc 01       	movw	r30, r24
    c620:	20 83       	st	Z, r18
    c622:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[0][1] -= as_tmp1[0][1];
    c624:	ce 01       	movw	r24, r28
    c626:	83 51       	subi	r24, 0x13	; 19
    c628:	9f 4f       	sbci	r25, 0xFF	; 255
    c62a:	fc 01       	movw	r30, r24
    c62c:	22 81       	ldd	r18, Z+2	; 0x02
    c62e:	33 81       	ldd	r19, Z+3	; 0x03
    c630:	ce 01       	movw	r24, r28
    c632:	8f 57       	subi	r24, 0x7F	; 127
    c634:	9f 4f       	sbci	r25, 0xFF	; 255
    c636:	fc 01       	movw	r30, r24
    c638:	82 81       	ldd	r24, Z+2	; 0x02
    c63a:	93 81       	ldd	r25, Z+3	; 0x03
    c63c:	28 1b       	sub	r18, r24
    c63e:	39 0b       	sbc	r19, r25
    c640:	ce 01       	movw	r24, r28
    c642:	83 51       	subi	r24, 0x13	; 19
    c644:	9f 4f       	sbci	r25, 0xFF	; 255
    c646:	fc 01       	movw	r30, r24
    c648:	22 83       	std	Z+2, r18	; 0x02
    c64a:	33 83       	std	Z+3, r19	; 0x03
   as_eyeMinusKH[0][2] -= as_tmp1[0][2];
    c64c:	ce 01       	movw	r24, r28
    c64e:	83 51       	subi	r24, 0x13	; 19
    c650:	9f 4f       	sbci	r25, 0xFF	; 255
    c652:	fc 01       	movw	r30, r24
    c654:	24 81       	ldd	r18, Z+4	; 0x04
    c656:	35 81       	ldd	r19, Z+5	; 0x05
    c658:	ce 01       	movw	r24, r28
    c65a:	8f 57       	subi	r24, 0x7F	; 127
    c65c:	9f 4f       	sbci	r25, 0xFF	; 255
    c65e:	fc 01       	movw	r30, r24
    c660:	84 81       	ldd	r24, Z+4	; 0x04
    c662:	95 81       	ldd	r25, Z+5	; 0x05
    c664:	28 1b       	sub	r18, r24
    c666:	39 0b       	sbc	r19, r25
    c668:	ce 01       	movw	r24, r28
    c66a:	83 51       	subi	r24, 0x13	; 19
    c66c:	9f 4f       	sbci	r25, 0xFF	; 255
    c66e:	fc 01       	movw	r30, r24
    c670:	24 83       	std	Z+4, r18	; 0x04
    c672:	35 83       	std	Z+5, r19	; 0x05
   as_eyeMinusKH[1][0] -= as_tmp1[1][0];
    c674:	ce 01       	movw	r24, r28
    c676:	83 51       	subi	r24, 0x13	; 19
    c678:	9f 4f       	sbci	r25, 0xFF	; 255
    c67a:	fc 01       	movw	r30, r24
    c67c:	22 89       	ldd	r18, Z+18	; 0x12
    c67e:	33 89       	ldd	r19, Z+19	; 0x13
    c680:	ce 01       	movw	r24, r28
    c682:	8f 57       	subi	r24, 0x7F	; 127
    c684:	9f 4f       	sbci	r25, 0xFF	; 255
    c686:	fc 01       	movw	r30, r24
    c688:	86 81       	ldd	r24, Z+6	; 0x06
    c68a:	97 81       	ldd	r25, Z+7	; 0x07
    c68c:	28 1b       	sub	r18, r24
    c68e:	39 0b       	sbc	r19, r25
    c690:	ce 01       	movw	r24, r28
    c692:	83 51       	subi	r24, 0x13	; 19
    c694:	9f 4f       	sbci	r25, 0xFF	; 255
    c696:	fc 01       	movw	r30, r24
    c698:	22 8b       	std	Z+18, r18	; 0x12
    c69a:	33 8b       	std	Z+19, r19	; 0x13
   as_eyeMinusKH[1][1] -= as_tmp1[1][1];
    c69c:	ce 01       	movw	r24, r28
    c69e:	83 51       	subi	r24, 0x13	; 19
    c6a0:	9f 4f       	sbci	r25, 0xFF	; 255
    c6a2:	fc 01       	movw	r30, r24
    c6a4:	24 89       	ldd	r18, Z+20	; 0x14
    c6a6:	35 89       	ldd	r19, Z+21	; 0x15
    c6a8:	ce 01       	movw	r24, r28
    c6aa:	8f 57       	subi	r24, 0x7F	; 127
    c6ac:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ae:	fc 01       	movw	r30, r24
    c6b0:	80 85       	ldd	r24, Z+8	; 0x08
    c6b2:	91 85       	ldd	r25, Z+9	; 0x09
    c6b4:	28 1b       	sub	r18, r24
    c6b6:	39 0b       	sbc	r19, r25
    c6b8:	ce 01       	movw	r24, r28
    c6ba:	83 51       	subi	r24, 0x13	; 19
    c6bc:	9f 4f       	sbci	r25, 0xFF	; 255
    c6be:	fc 01       	movw	r30, r24
    c6c0:	24 8b       	std	Z+20, r18	; 0x14
    c6c2:	35 8b       	std	Z+21, r19	; 0x15
   as_eyeMinusKH[1][2] -= as_tmp1[1][2];
    c6c4:	ce 01       	movw	r24, r28
    c6c6:	83 51       	subi	r24, 0x13	; 19
    c6c8:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ca:	fc 01       	movw	r30, r24
    c6cc:	26 89       	ldd	r18, Z+22	; 0x16
    c6ce:	37 89       	ldd	r19, Z+23	; 0x17
    c6d0:	ce 01       	movw	r24, r28
    c6d2:	8f 57       	subi	r24, 0x7F	; 127
    c6d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c6d6:	fc 01       	movw	r30, r24
    c6d8:	82 85       	ldd	r24, Z+10	; 0x0a
    c6da:	93 85       	ldd	r25, Z+11	; 0x0b
    c6dc:	28 1b       	sub	r18, r24
    c6de:	39 0b       	sbc	r19, r25
    c6e0:	ce 01       	movw	r24, r28
    c6e2:	83 51       	subi	r24, 0x13	; 19
    c6e4:	9f 4f       	sbci	r25, 0xFF	; 255
    c6e6:	fc 01       	movw	r30, r24
    c6e8:	26 8b       	std	Z+22, r18	; 0x16
    c6ea:	37 8b       	std	Z+23, r19	; 0x17
   as_eyeMinusKH[2][0] -= as_tmp1[2][0];
    c6ec:	ce 01       	movw	r24, r28
    c6ee:	83 51       	subi	r24, 0x13	; 19
    c6f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c6f2:	fc 01       	movw	r30, r24
    c6f4:	24 a1       	lds	r18, 0x44
    c6f6:	35 a1       	lds	r19, 0x45
    c6f8:	ce 01       	movw	r24, r28
    c6fa:	8f 57       	subi	r24, 0x7F	; 127
    c6fc:	9f 4f       	sbci	r25, 0xFF	; 255
    c6fe:	fc 01       	movw	r30, r24
    c700:	84 85       	ldd	r24, Z+12	; 0x0c
    c702:	95 85       	ldd	r25, Z+13	; 0x0d
    c704:	28 1b       	sub	r18, r24
    c706:	39 0b       	sbc	r19, r25
    c708:	ce 01       	movw	r24, r28
    c70a:	83 51       	subi	r24, 0x13	; 19
    c70c:	9f 4f       	sbci	r25, 0xFF	; 255
    c70e:	fc 01       	movw	r30, r24
    c710:	24 a3       	lds	r18, 0x54
    c712:	35 a3       	lds	r19, 0x55
   as_eyeMinusKH[2][1] -= as_tmp1[2][1];
    c714:	ce 01       	movw	r24, r28
    c716:	83 51       	subi	r24, 0x13	; 19
    c718:	9f 4f       	sbci	r25, 0xFF	; 255
    c71a:	fc 01       	movw	r30, r24
    c71c:	26 a1       	lds	r18, 0x46
    c71e:	37 a1       	lds	r19, 0x47
    c720:	ce 01       	movw	r24, r28
    c722:	8f 57       	subi	r24, 0x7F	; 127
    c724:	9f 4f       	sbci	r25, 0xFF	; 255
    c726:	fc 01       	movw	r30, r24
    c728:	86 85       	ldd	r24, Z+14	; 0x0e
    c72a:	97 85       	ldd	r25, Z+15	; 0x0f
    c72c:	28 1b       	sub	r18, r24
    c72e:	39 0b       	sbc	r19, r25
    c730:	ce 01       	movw	r24, r28
    c732:	83 51       	subi	r24, 0x13	; 19
    c734:	9f 4f       	sbci	r25, 0xFF	; 255
    c736:	fc 01       	movw	r30, r24
    c738:	26 a3       	lds	r18, 0x56
    c73a:	37 a3       	lds	r19, 0x57
   as_eyeMinusKH[2][2] -= as_tmp1[2][2];
    c73c:	ce 01       	movw	r24, r28
    c73e:	83 51       	subi	r24, 0x13	; 19
    c740:	9f 4f       	sbci	r25, 0xFF	; 255
    c742:	fc 01       	movw	r30, r24
    c744:	20 a5       	lds	r18, 0x60
    c746:	31 a5       	lds	r19, 0x61
    c748:	ce 01       	movw	r24, r28
    c74a:	8f 57       	subi	r24, 0x7F	; 127
    c74c:	9f 4f       	sbci	r25, 0xFF	; 255
    c74e:	fc 01       	movw	r30, r24
    c750:	80 89       	ldd	r24, Z+16	; 0x10
    c752:	91 89       	ldd	r25, Z+17	; 0x11
    c754:	28 1b       	sub	r18, r24
    c756:	39 0b       	sbc	r19, r25
    c758:	ce 01       	movw	r24, r28
    c75a:	83 51       	subi	r24, 0x13	; 19
    c75c:	9f 4f       	sbci	r25, 0xFF	; 255
    c75e:	fc 01       	movw	r30, r24
    c760:	20 a7       	lds	r18, 0x70
    c762:	31 a7       	lds	r19, 0x71

   as_eyeMinusKH[3][0] -= as_tmp2[0][0];
    c764:	ce 01       	movw	r24, r28
    c766:	83 51       	subi	r24, 0x13	; 19
    c768:	9f 4f       	sbci	r25, 0xFF	; 255
    c76a:	fc 01       	movw	r30, r24
    c76c:	26 a9       	sts	0x46, r18
    c76e:	37 a9       	sts	0x47, r19
    c770:	ce 01       	movw	r24, r28
    c772:	8d 56       	subi	r24, 0x6D	; 109
    c774:	9f 4f       	sbci	r25, 0xFF	; 255
    c776:	fc 01       	movw	r30, r24
    c778:	80 81       	ld	r24, Z
    c77a:	91 81       	ldd	r25, Z+1	; 0x01
    c77c:	28 1b       	sub	r18, r24
    c77e:	39 0b       	sbc	r19, r25
    c780:	ce 01       	movw	r24, r28
    c782:	83 51       	subi	r24, 0x13	; 19
    c784:	9f 4f       	sbci	r25, 0xFF	; 255
    c786:	fc 01       	movw	r30, r24
    c788:	26 ab       	sts	0x56, r18
    c78a:	37 ab       	sts	0x57, r19
   as_eyeMinusKH[3][1] -= as_tmp2[0][1];
    c78c:	ce 01       	movw	r24, r28
    c78e:	83 51       	subi	r24, 0x13	; 19
    c790:	9f 4f       	sbci	r25, 0xFF	; 255
    c792:	fc 01       	movw	r30, r24
    c794:	20 ad       	sts	0x60, r18
    c796:	31 ad       	sts	0x61, r19
    c798:	ce 01       	movw	r24, r28
    c79a:	8d 56       	subi	r24, 0x6D	; 109
    c79c:	9f 4f       	sbci	r25, 0xFF	; 255
    c79e:	fc 01       	movw	r30, r24
    c7a0:	82 81       	ldd	r24, Z+2	; 0x02
    c7a2:	93 81       	ldd	r25, Z+3	; 0x03
    c7a4:	28 1b       	sub	r18, r24
    c7a6:	39 0b       	sbc	r19, r25
    c7a8:	ce 01       	movw	r24, r28
    c7aa:	83 51       	subi	r24, 0x13	; 19
    c7ac:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ae:	fc 01       	movw	r30, r24
    c7b0:	20 af       	sts	0x70, r18
    c7b2:	31 af       	sts	0x71, r19
   as_eyeMinusKH[3][2] -= as_tmp2[0][2];
    c7b4:	ce 01       	movw	r24, r28
    c7b6:	83 51       	subi	r24, 0x13	; 19
    c7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ba:	fc 01       	movw	r30, r24
    c7bc:	22 ad       	sts	0x62, r18
    c7be:	33 ad       	sts	0x63, r19
    c7c0:	ce 01       	movw	r24, r28
    c7c2:	8d 56       	subi	r24, 0x6D	; 109
    c7c4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7c6:	fc 01       	movw	r30, r24
    c7c8:	84 81       	ldd	r24, Z+4	; 0x04
    c7ca:	95 81       	ldd	r25, Z+5	; 0x05
    c7cc:	28 1b       	sub	r18, r24
    c7ce:	39 0b       	sbc	r19, r25
    c7d0:	ce 01       	movw	r24, r28
    c7d2:	83 51       	subi	r24, 0x13	; 19
    c7d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7d6:	fc 01       	movw	r30, r24
    c7d8:	22 af       	sts	0x72, r18
    c7da:	33 af       	sts	0x73, r19
   as_eyeMinusKH[4][0] -= as_tmp2[1][0];
    c7dc:	ce 01       	movw	r24, r28
    c7de:	83 51       	subi	r24, 0x13	; 19
    c7e0:	9f 4f       	sbci	r25, 0xFF	; 255
    c7e2:	88 5b       	subi	r24, 0xB8	; 184
    c7e4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7e6:	fc 01       	movw	r30, r24
    c7e8:	20 81       	ld	r18, Z
    c7ea:	31 81       	ldd	r19, Z+1	; 0x01
    c7ec:	ce 01       	movw	r24, r28
    c7ee:	8d 56       	subi	r24, 0x6D	; 109
    c7f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c7f2:	fc 01       	movw	r30, r24
    c7f4:	86 81       	ldd	r24, Z+6	; 0x06
    c7f6:	97 81       	ldd	r25, Z+7	; 0x07
    c7f8:	28 1b       	sub	r18, r24
    c7fa:	39 0b       	sbc	r19, r25
    c7fc:	ce 01       	movw	r24, r28
    c7fe:	83 51       	subi	r24, 0x13	; 19
    c800:	9f 4f       	sbci	r25, 0xFF	; 255
    c802:	88 5b       	subi	r24, 0xB8	; 184
    c804:	9f 4f       	sbci	r25, 0xFF	; 255
    c806:	fc 01       	movw	r30, r24
    c808:	20 83       	st	Z, r18
    c80a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[4][1] -= as_tmp2[1][1];
    c80c:	ce 01       	movw	r24, r28
    c80e:	83 51       	subi	r24, 0x13	; 19
    c810:	9f 4f       	sbci	r25, 0xFF	; 255
    c812:	86 5b       	subi	r24, 0xB6	; 182
    c814:	9f 4f       	sbci	r25, 0xFF	; 255
    c816:	fc 01       	movw	r30, r24
    c818:	20 81       	ld	r18, Z
    c81a:	31 81       	ldd	r19, Z+1	; 0x01
    c81c:	ce 01       	movw	r24, r28
    c81e:	8d 56       	subi	r24, 0x6D	; 109
    c820:	9f 4f       	sbci	r25, 0xFF	; 255
    c822:	fc 01       	movw	r30, r24
    c824:	80 85       	ldd	r24, Z+8	; 0x08
    c826:	91 85       	ldd	r25, Z+9	; 0x09
    c828:	28 1b       	sub	r18, r24
    c82a:	39 0b       	sbc	r19, r25
    c82c:	ce 01       	movw	r24, r28
    c82e:	83 51       	subi	r24, 0x13	; 19
    c830:	9f 4f       	sbci	r25, 0xFF	; 255
    c832:	86 5b       	subi	r24, 0xB6	; 182
    c834:	9f 4f       	sbci	r25, 0xFF	; 255
    c836:	fc 01       	movw	r30, r24
    c838:	20 83       	st	Z, r18
    c83a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[4][2] -= as_tmp2[1][2];
    c83c:	ce 01       	movw	r24, r28
    c83e:	83 51       	subi	r24, 0x13	; 19
    c840:	9f 4f       	sbci	r25, 0xFF	; 255
    c842:	84 5b       	subi	r24, 0xB4	; 180
    c844:	9f 4f       	sbci	r25, 0xFF	; 255
    c846:	fc 01       	movw	r30, r24
    c848:	20 81       	ld	r18, Z
    c84a:	31 81       	ldd	r19, Z+1	; 0x01
    c84c:	ce 01       	movw	r24, r28
    c84e:	8d 56       	subi	r24, 0x6D	; 109
    c850:	9f 4f       	sbci	r25, 0xFF	; 255
    c852:	fc 01       	movw	r30, r24
    c854:	82 85       	ldd	r24, Z+10	; 0x0a
    c856:	93 85       	ldd	r25, Z+11	; 0x0b
    c858:	28 1b       	sub	r18, r24
    c85a:	39 0b       	sbc	r19, r25
    c85c:	ce 01       	movw	r24, r28
    c85e:	83 51       	subi	r24, 0x13	; 19
    c860:	9f 4f       	sbci	r25, 0xFF	; 255
    c862:	84 5b       	subi	r24, 0xB4	; 180
    c864:	9f 4f       	sbci	r25, 0xFF	; 255
    c866:	fc 01       	movw	r30, r24
    c868:	20 83       	st	Z, r18
    c86a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[5][0] -= as_tmp2[2][0];
    c86c:	ce 01       	movw	r24, r28
    c86e:	83 51       	subi	r24, 0x13	; 19
    c870:	9f 4f       	sbci	r25, 0xFF	; 255
    c872:	86 5a       	subi	r24, 0xA6	; 166
    c874:	9f 4f       	sbci	r25, 0xFF	; 255
    c876:	fc 01       	movw	r30, r24
    c878:	20 81       	ld	r18, Z
    c87a:	31 81       	ldd	r19, Z+1	; 0x01
    c87c:	ce 01       	movw	r24, r28
    c87e:	8d 56       	subi	r24, 0x6D	; 109
    c880:	9f 4f       	sbci	r25, 0xFF	; 255
    c882:	fc 01       	movw	r30, r24
    c884:	84 85       	ldd	r24, Z+12	; 0x0c
    c886:	95 85       	ldd	r25, Z+13	; 0x0d
    c888:	28 1b       	sub	r18, r24
    c88a:	39 0b       	sbc	r19, r25
    c88c:	ce 01       	movw	r24, r28
    c88e:	83 51       	subi	r24, 0x13	; 19
    c890:	9f 4f       	sbci	r25, 0xFF	; 255
    c892:	86 5a       	subi	r24, 0xA6	; 166
    c894:	9f 4f       	sbci	r25, 0xFF	; 255
    c896:	fc 01       	movw	r30, r24
    c898:	20 83       	st	Z, r18
    c89a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[5][1] -= as_tmp2[2][1];
    c89c:	ce 01       	movw	r24, r28
    c89e:	83 51       	subi	r24, 0x13	; 19
    c8a0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8a2:	84 5a       	subi	r24, 0xA4	; 164
    c8a4:	9f 4f       	sbci	r25, 0xFF	; 255
    c8a6:	fc 01       	movw	r30, r24
    c8a8:	20 81       	ld	r18, Z
    c8aa:	31 81       	ldd	r19, Z+1	; 0x01
    c8ac:	ce 01       	movw	r24, r28
    c8ae:	8d 56       	subi	r24, 0x6D	; 109
    c8b0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8b2:	fc 01       	movw	r30, r24
    c8b4:	86 85       	ldd	r24, Z+14	; 0x0e
    c8b6:	97 85       	ldd	r25, Z+15	; 0x0f
    c8b8:	28 1b       	sub	r18, r24
    c8ba:	39 0b       	sbc	r19, r25
    c8bc:	ce 01       	movw	r24, r28
    c8be:	83 51       	subi	r24, 0x13	; 19
    c8c0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8c2:	84 5a       	subi	r24, 0xA4	; 164
    c8c4:	9f 4f       	sbci	r25, 0xFF	; 255
    c8c6:	fc 01       	movw	r30, r24
    c8c8:	20 83       	st	Z, r18
    c8ca:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[5][2] -= as_tmp2[2][2];
    c8cc:	ce 01       	movw	r24, r28
    c8ce:	83 51       	subi	r24, 0x13	; 19
    c8d0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8d2:	82 5a       	subi	r24, 0xA2	; 162
    c8d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c8d6:	fc 01       	movw	r30, r24
    c8d8:	20 81       	ld	r18, Z
    c8da:	31 81       	ldd	r19, Z+1	; 0x01
    c8dc:	ce 01       	movw	r24, r28
    c8de:	8d 56       	subi	r24, 0x6D	; 109
    c8e0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8e2:	fc 01       	movw	r30, r24
    c8e4:	80 89       	ldd	r24, Z+16	; 0x10
    c8e6:	91 89       	ldd	r25, Z+17	; 0x11
    c8e8:	28 1b       	sub	r18, r24
    c8ea:	39 0b       	sbc	r19, r25
    c8ec:	ce 01       	movw	r24, r28
    c8ee:	83 51       	subi	r24, 0x13	; 19
    c8f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c8f2:	82 5a       	subi	r24, 0xA2	; 162
    c8f4:	9f 4f       	sbci	r25, 0xFF	; 255
    c8f6:	fc 01       	movw	r30, r24
    c8f8:	20 83       	st	Z, r18
    c8fa:	31 83       	std	Z+1, r19	; 0x01

   as_eyeMinusKH[6][0] -= as_tmp3[0][0];
    c8fc:	ce 01       	movw	r24, r28
    c8fe:	83 51       	subi	r24, 0x13	; 19
    c900:	9f 4f       	sbci	r25, 0xFF	; 255
    c902:	84 59       	subi	r24, 0x94	; 148
    c904:	9f 4f       	sbci	r25, 0xFF	; 255
    c906:	fc 01       	movw	r30, r24
    c908:	20 81       	ld	r18, Z
    c90a:	31 81       	ldd	r19, Z+1	; 0x01
    c90c:	ce 01       	movw	r24, r28
    c90e:	8b 55       	subi	r24, 0x5B	; 91
    c910:	9f 4f       	sbci	r25, 0xFF	; 255
    c912:	fc 01       	movw	r30, r24
    c914:	80 81       	ld	r24, Z
    c916:	91 81       	ldd	r25, Z+1	; 0x01
    c918:	28 1b       	sub	r18, r24
    c91a:	39 0b       	sbc	r19, r25
    c91c:	ce 01       	movw	r24, r28
    c91e:	83 51       	subi	r24, 0x13	; 19
    c920:	9f 4f       	sbci	r25, 0xFF	; 255
    c922:	84 59       	subi	r24, 0x94	; 148
    c924:	9f 4f       	sbci	r25, 0xFF	; 255
    c926:	fc 01       	movw	r30, r24
    c928:	20 83       	st	Z, r18
    c92a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[6][1] -= as_tmp3[0][1];
    c92c:	ce 01       	movw	r24, r28
    c92e:	83 51       	subi	r24, 0x13	; 19
    c930:	9f 4f       	sbci	r25, 0xFF	; 255
    c932:	82 59       	subi	r24, 0x92	; 146
    c934:	9f 4f       	sbci	r25, 0xFF	; 255
    c936:	fc 01       	movw	r30, r24
    c938:	20 81       	ld	r18, Z
    c93a:	31 81       	ldd	r19, Z+1	; 0x01
    c93c:	ce 01       	movw	r24, r28
    c93e:	8b 55       	subi	r24, 0x5B	; 91
    c940:	9f 4f       	sbci	r25, 0xFF	; 255
    c942:	fc 01       	movw	r30, r24
    c944:	82 81       	ldd	r24, Z+2	; 0x02
    c946:	93 81       	ldd	r25, Z+3	; 0x03
    c948:	28 1b       	sub	r18, r24
    c94a:	39 0b       	sbc	r19, r25
    c94c:	ce 01       	movw	r24, r28
    c94e:	83 51       	subi	r24, 0x13	; 19
    c950:	9f 4f       	sbci	r25, 0xFF	; 255
    c952:	82 59       	subi	r24, 0x92	; 146
    c954:	9f 4f       	sbci	r25, 0xFF	; 255
    c956:	fc 01       	movw	r30, r24
    c958:	20 83       	st	Z, r18
    c95a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[6][2] -= as_tmp3[0][2];
    c95c:	ce 01       	movw	r24, r28
    c95e:	83 51       	subi	r24, 0x13	; 19
    c960:	9f 4f       	sbci	r25, 0xFF	; 255
    c962:	80 59       	subi	r24, 0x90	; 144
    c964:	9f 4f       	sbci	r25, 0xFF	; 255
    c966:	fc 01       	movw	r30, r24
    c968:	20 81       	ld	r18, Z
    c96a:	31 81       	ldd	r19, Z+1	; 0x01
    c96c:	ce 01       	movw	r24, r28
    c96e:	8b 55       	subi	r24, 0x5B	; 91
    c970:	9f 4f       	sbci	r25, 0xFF	; 255
    c972:	fc 01       	movw	r30, r24
    c974:	84 81       	ldd	r24, Z+4	; 0x04
    c976:	95 81       	ldd	r25, Z+5	; 0x05
    c978:	28 1b       	sub	r18, r24
    c97a:	39 0b       	sbc	r19, r25
    c97c:	ce 01       	movw	r24, r28
    c97e:	83 51       	subi	r24, 0x13	; 19
    c980:	9f 4f       	sbci	r25, 0xFF	; 255
    c982:	80 59       	subi	r24, 0x90	; 144
    c984:	9f 4f       	sbci	r25, 0xFF	; 255
    c986:	fc 01       	movw	r30, r24
    c988:	20 83       	st	Z, r18
    c98a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[7][0] -= as_tmp3[1][0];
    c98c:	ce 01       	movw	r24, r28
    c98e:	83 51       	subi	r24, 0x13	; 19
    c990:	9f 4f       	sbci	r25, 0xFF	; 255
    c992:	82 58       	subi	r24, 0x82	; 130
    c994:	9f 4f       	sbci	r25, 0xFF	; 255
    c996:	fc 01       	movw	r30, r24
    c998:	20 81       	ld	r18, Z
    c99a:	31 81       	ldd	r19, Z+1	; 0x01
    c99c:	ce 01       	movw	r24, r28
    c99e:	8b 55       	subi	r24, 0x5B	; 91
    c9a0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9a2:	fc 01       	movw	r30, r24
    c9a4:	86 81       	ldd	r24, Z+6	; 0x06
    c9a6:	97 81       	ldd	r25, Z+7	; 0x07
    c9a8:	28 1b       	sub	r18, r24
    c9aa:	39 0b       	sbc	r19, r25
    c9ac:	ce 01       	movw	r24, r28
    c9ae:	83 51       	subi	r24, 0x13	; 19
    c9b0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9b2:	82 58       	subi	r24, 0x82	; 130
    c9b4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9b6:	fc 01       	movw	r30, r24
    c9b8:	20 83       	st	Z, r18
    c9ba:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[7][1] -= as_tmp3[1][1];
    c9bc:	ce 01       	movw	r24, r28
    c9be:	83 51       	subi	r24, 0x13	; 19
    c9c0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9c2:	80 58       	subi	r24, 0x80	; 128
    c9c4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9c6:	fc 01       	movw	r30, r24
    c9c8:	20 81       	ld	r18, Z
    c9ca:	31 81       	ldd	r19, Z+1	; 0x01
    c9cc:	ce 01       	movw	r24, r28
    c9ce:	8b 55       	subi	r24, 0x5B	; 91
    c9d0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9d2:	fc 01       	movw	r30, r24
    c9d4:	80 85       	ldd	r24, Z+8	; 0x08
    c9d6:	91 85       	ldd	r25, Z+9	; 0x09
    c9d8:	28 1b       	sub	r18, r24
    c9da:	39 0b       	sbc	r19, r25
    c9dc:	ce 01       	movw	r24, r28
    c9de:	83 51       	subi	r24, 0x13	; 19
    c9e0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9e2:	80 58       	subi	r24, 0x80	; 128
    c9e4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9e6:	fc 01       	movw	r30, r24
    c9e8:	20 83       	st	Z, r18
    c9ea:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[7][2] -= as_tmp3[1][2];
    c9ec:	ce 01       	movw	r24, r28
    c9ee:	83 51       	subi	r24, 0x13	; 19
    c9f0:	9f 4f       	sbci	r25, 0xFF	; 255
    c9f2:	8e 57       	subi	r24, 0x7E	; 126
    c9f4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9f6:	fc 01       	movw	r30, r24
    c9f8:	20 81       	ld	r18, Z
    c9fa:	31 81       	ldd	r19, Z+1	; 0x01
    c9fc:	ce 01       	movw	r24, r28
    c9fe:	8b 55       	subi	r24, 0x5B	; 91
    ca00:	9f 4f       	sbci	r25, 0xFF	; 255
    ca02:	fc 01       	movw	r30, r24
    ca04:	82 85       	ldd	r24, Z+10	; 0x0a
    ca06:	93 85       	ldd	r25, Z+11	; 0x0b
    ca08:	28 1b       	sub	r18, r24
    ca0a:	39 0b       	sbc	r19, r25
    ca0c:	ce 01       	movw	r24, r28
    ca0e:	83 51       	subi	r24, 0x13	; 19
    ca10:	9f 4f       	sbci	r25, 0xFF	; 255
    ca12:	8e 57       	subi	r24, 0x7E	; 126
    ca14:	9f 4f       	sbci	r25, 0xFF	; 255
    ca16:	fc 01       	movw	r30, r24
    ca18:	20 83       	st	Z, r18
    ca1a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[8][0] -= as_tmp3[2][0];
    ca1c:	ce 01       	movw	r24, r28
    ca1e:	83 51       	subi	r24, 0x13	; 19
    ca20:	9f 4f       	sbci	r25, 0xFF	; 255
    ca22:	80 57       	subi	r24, 0x70	; 112
    ca24:	9f 4f       	sbci	r25, 0xFF	; 255
    ca26:	fc 01       	movw	r30, r24
    ca28:	20 81       	ld	r18, Z
    ca2a:	31 81       	ldd	r19, Z+1	; 0x01
    ca2c:	ce 01       	movw	r24, r28
    ca2e:	8b 55       	subi	r24, 0x5B	; 91
    ca30:	9f 4f       	sbci	r25, 0xFF	; 255
    ca32:	fc 01       	movw	r30, r24
    ca34:	84 85       	ldd	r24, Z+12	; 0x0c
    ca36:	95 85       	ldd	r25, Z+13	; 0x0d
    ca38:	28 1b       	sub	r18, r24
    ca3a:	39 0b       	sbc	r19, r25
    ca3c:	ce 01       	movw	r24, r28
    ca3e:	83 51       	subi	r24, 0x13	; 19
    ca40:	9f 4f       	sbci	r25, 0xFF	; 255
    ca42:	80 57       	subi	r24, 0x70	; 112
    ca44:	9f 4f       	sbci	r25, 0xFF	; 255
    ca46:	fc 01       	movw	r30, r24
    ca48:	20 83       	st	Z, r18
    ca4a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[8][1] -= as_tmp3[2][1];
    ca4c:	ce 01       	movw	r24, r28
    ca4e:	83 51       	subi	r24, 0x13	; 19
    ca50:	9f 4f       	sbci	r25, 0xFF	; 255
    ca52:	8e 56       	subi	r24, 0x6E	; 110
    ca54:	9f 4f       	sbci	r25, 0xFF	; 255
    ca56:	fc 01       	movw	r30, r24
    ca58:	20 81       	ld	r18, Z
    ca5a:	31 81       	ldd	r19, Z+1	; 0x01
    ca5c:	ce 01       	movw	r24, r28
    ca5e:	8b 55       	subi	r24, 0x5B	; 91
    ca60:	9f 4f       	sbci	r25, 0xFF	; 255
    ca62:	fc 01       	movw	r30, r24
    ca64:	86 85       	ldd	r24, Z+14	; 0x0e
    ca66:	97 85       	ldd	r25, Z+15	; 0x0f
    ca68:	28 1b       	sub	r18, r24
    ca6a:	39 0b       	sbc	r19, r25
    ca6c:	ce 01       	movw	r24, r28
    ca6e:	83 51       	subi	r24, 0x13	; 19
    ca70:	9f 4f       	sbci	r25, 0xFF	; 255
    ca72:	8e 56       	subi	r24, 0x6E	; 110
    ca74:	9f 4f       	sbci	r25, 0xFF	; 255
    ca76:	fc 01       	movw	r30, r24
    ca78:	20 83       	st	Z, r18
    ca7a:	31 83       	std	Z+1, r19	; 0x01
   as_eyeMinusKH[8][2] -= as_tmp3[2][2];
    ca7c:	ce 01       	movw	r24, r28
    ca7e:	83 51       	subi	r24, 0x13	; 19
    ca80:	9f 4f       	sbci	r25, 0xFF	; 255
    ca82:	8c 56       	subi	r24, 0x6C	; 108
    ca84:	9f 4f       	sbci	r25, 0xFF	; 255
    ca86:	fc 01       	movw	r30, r24
    ca88:	20 81       	ld	r18, Z
    ca8a:	31 81       	ldd	r19, Z+1	; 0x01
    ca8c:	ce 01       	movw	r24, r28
    ca8e:	8b 55       	subi	r24, 0x5B	; 91
    ca90:	9f 4f       	sbci	r25, 0xFF	; 255
    ca92:	fc 01       	movw	r30, r24
    ca94:	80 89       	ldd	r24, Z+16	; 0x10
    ca96:	91 89       	ldd	r25, Z+17	; 0x11
    ca98:	28 1b       	sub	r18, r24
    ca9a:	39 0b       	sbc	r19, r25
    ca9c:	ce 01       	movw	r24, r28
    ca9e:	83 51       	subi	r24, 0x13	; 19
    caa0:	9f 4f       	sbci	r25, 0xFF	; 255
    caa2:	8c 56       	subi	r24, 0x6C	; 108
    caa4:	9f 4f       	sbci	r25, 0xFF	; 255
    caa6:	fc 01       	movw	r30, r24
    caa8:	20 83       	st	Z, r18
    caaa:	31 83       	std	Z+1, r19	; 0x01

   memcpy( (void *)as_tmpP, (void *)gt_insDev.as_P, sizeof( as_tmpP));
    caac:	ce 01       	movw	r24, r28
    caae:	81 57       	subi	r24, 0x71	; 113
    cab0:	9e 4f       	sbci	r25, 0xFE	; 254
    cab2:	2f e3       	ldi	r18, 0x3F	; 63
    cab4:	3a e2       	ldi	r19, 0x2A	; 42
    cab6:	42 ea       	ldi	r20, 0xA2	; 162
    cab8:	f9 01       	movw	r30, r18
    caba:	00 80       	ld	r0, Z
    cabc:	2f 5f       	subi	r18, 0xFF	; 255
    cabe:	3f 4f       	sbci	r19, 0xFF	; 255
    cac0:	fc 01       	movw	r30, r24
    cac2:	00 82       	st	Z, r0
    cac4:	01 96       	adiw	r24, 0x01	; 1
    cac6:	41 50       	subi	r20, 0x01	; 1
    cac8:	44 23       	and	r20, r20
    caca:	b1 f7       	brne	.-20     	; 0xcab8 <eSKalmanFilterCorrect+0x1d16>
   utl_matMult16x16_16( &as_eyeMinusKH[0][0],  /*Q15*/
    cacc:	ce 01       	movw	r24, r28
    cace:	83 51       	subi	r24, 0x13	; 19
    cad0:	9f 4f       	sbci	r25, 0xFF	; 255
                        9,
                        9,
                        &as_tmpP[0][0],        /*Q15*/
    cad2:	9e 01       	movw	r18, r28
    cad4:	21 57       	subi	r18, 0x71	; 113
    cad6:	3e 4f       	sbci	r19, 0xFE	; 254
   as_eyeMinusKH[8][0] -= as_tmp3[2][0];
   as_eyeMinusKH[8][1] -= as_tmp3[2][1];
   as_eyeMinusKH[8][2] -= as_tmp3[2][2];

   memcpy( (void *)as_tmpP, (void *)gt_insDev.as_P, sizeof( as_tmpP));
   utl_matMult16x16_16( &as_eyeMinusKH[0][0],  /*Q15*/
    cad8:	ef e3       	ldi	r30, 0x3F	; 63
    cada:	fa e2       	ldi	r31, 0x2A	; 42
    cadc:	69 e0       	ldi	r22, 0x09	; 9
    cade:	49 e0       	ldi	r20, 0x09	; 9
    cae0:	09 e0       	ldi	r16, 0x09	; 9
    cae2:	0f 2e       	mov	r0, r31
    cae4:	f9 e0       	ldi	r31, 0x09	; 9
    cae6:	ef 2e       	mov	r14, r31
    cae8:	f0 2d       	mov	r31, r0
    caea:	6f 01       	movw	r12, r30
    caec:	aa 24       	eor	r10, r10
    caee:	68 94       	set
    caf0:	a1 f8       	bld	r10, 1
    caf2:	0f 2e       	mov	r0, r31
    caf4:	ff e0       	ldi	r31, 0x0F	; 15
    caf6:	8f 2e       	mov	r8, r31
    caf8:	f0 2d       	mov	r31, r0
    cafa:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        9,
                        &gt_insDev.as_P[0][0], /*Q15*/
                        2,
                        15);

   for( c_index = 0; c_index < 9; c_index++)
    cafe:	1e 82       	std	Y+6, r1	; 0x06
    cb00:	57 c0       	rjmp	.+174    	; 0xcbb0 <eSKalmanFilterCorrect+0x1e0e>
   {
      /*Ignore rounding errors, anything greater is a loss of lock*/
      if( (gt_insDev.as_P[c_index][c_index] < 0) && (gt_insDev.as_P[c_index][c_index] > -5))
    cb02:	8e 81       	ldd	r24, Y+6	; 0x06
    cb04:	28 2f       	mov	r18, r24
    cb06:	30 e0       	ldi	r19, 0x00	; 0
    cb08:	8e 81       	ldd	r24, Y+6	; 0x06
    cb0a:	48 2f       	mov	r20, r24
    cb0c:	50 e0       	ldi	r21, 0x00	; 0
    cb0e:	c9 01       	movw	r24, r18
    cb10:	88 0f       	add	r24, r24
    cb12:	99 1f       	adc	r25, r25
    cb14:	88 0f       	add	r24, r24
    cb16:	99 1f       	adc	r25, r25
    cb18:	88 0f       	add	r24, r24
    cb1a:	99 1f       	adc	r25, r25
    cb1c:	82 0f       	add	r24, r18
    cb1e:	93 1f       	adc	r25, r19
    cb20:	84 0f       	add	r24, r20
    cb22:	95 1f       	adc	r25, r21
    cb24:	8c 5d       	subi	r24, 0xDC	; 220
    cb26:	9c 4f       	sbci	r25, 0xFC	; 252
    cb28:	88 0f       	add	r24, r24
    cb2a:	99 1f       	adc	r25, r25
    cb2c:	89 50       	subi	r24, 0x09	; 9
    cb2e:	9c 4d       	sbci	r25, 0xDC	; 220
    cb30:	fc 01       	movw	r30, r24
    cb32:	80 81       	ld	r24, Z
    cb34:	91 81       	ldd	r25, Z+1	; 0x01
    cb36:	99 23       	and	r25, r25
    cb38:	c4 f5       	brge	.+112    	; 0xcbaa <eSKalmanFilterCorrect+0x1e08>
    cb3a:	8e 81       	ldd	r24, Y+6	; 0x06
    cb3c:	28 2f       	mov	r18, r24
    cb3e:	30 e0       	ldi	r19, 0x00	; 0
    cb40:	8e 81       	ldd	r24, Y+6	; 0x06
    cb42:	48 2f       	mov	r20, r24
    cb44:	50 e0       	ldi	r21, 0x00	; 0
    cb46:	c9 01       	movw	r24, r18
    cb48:	88 0f       	add	r24, r24
    cb4a:	99 1f       	adc	r25, r25
    cb4c:	88 0f       	add	r24, r24
    cb4e:	99 1f       	adc	r25, r25
    cb50:	88 0f       	add	r24, r24
    cb52:	99 1f       	adc	r25, r25
    cb54:	82 0f       	add	r24, r18
    cb56:	93 1f       	adc	r25, r19
    cb58:	84 0f       	add	r24, r20
    cb5a:	95 1f       	adc	r25, r21
    cb5c:	8c 5d       	subi	r24, 0xDC	; 220
    cb5e:	9c 4f       	sbci	r25, 0xFC	; 252
    cb60:	88 0f       	add	r24, r24
    cb62:	99 1f       	adc	r25, r25
    cb64:	89 50       	subi	r24, 0x09	; 9
    cb66:	9c 4d       	sbci	r25, 0xDC	; 220
    cb68:	fc 01       	movw	r30, r24
    cb6a:	80 81       	ld	r24, Z
    cb6c:	91 81       	ldd	r25, Z+1	; 0x01
    cb6e:	ff ef       	ldi	r31, 0xFF	; 255
    cb70:	8c 3f       	cpi	r24, 0xFC	; 252
    cb72:	9f 07       	cpc	r25, r31
    cb74:	d4 f0       	brlt	.+52     	; 0xcbaa <eSKalmanFilterCorrect+0x1e08>
      {
         gt_insDev.as_P[c_index][c_index] = 0;
    cb76:	8e 81       	ldd	r24, Y+6	; 0x06
    cb78:	28 2f       	mov	r18, r24
    cb7a:	30 e0       	ldi	r19, 0x00	; 0
    cb7c:	8e 81       	ldd	r24, Y+6	; 0x06
    cb7e:	48 2f       	mov	r20, r24
    cb80:	50 e0       	ldi	r21, 0x00	; 0
    cb82:	c9 01       	movw	r24, r18
    cb84:	88 0f       	add	r24, r24
    cb86:	99 1f       	adc	r25, r25
    cb88:	88 0f       	add	r24, r24
    cb8a:	99 1f       	adc	r25, r25
    cb8c:	88 0f       	add	r24, r24
    cb8e:	99 1f       	adc	r25, r25
    cb90:	82 0f       	add	r24, r18
    cb92:	93 1f       	adc	r25, r19
    cb94:	84 0f       	add	r24, r20
    cb96:	95 1f       	adc	r25, r21
    cb98:	8c 5d       	subi	r24, 0xDC	; 220
    cb9a:	9c 4f       	sbci	r25, 0xFC	; 252
    cb9c:	88 0f       	add	r24, r24
    cb9e:	99 1f       	adc	r25, r25
    cba0:	89 50       	subi	r24, 0x09	; 9
    cba2:	9c 4d       	sbci	r25, 0xDC	; 220
    cba4:	fc 01       	movw	r30, r24
    cba6:	10 82       	st	Z, r1
    cba8:	11 82       	std	Z+1, r1	; 0x01
                        9,
                        &gt_insDev.as_P[0][0], /*Q15*/
                        2,
                        15);

   for( c_index = 0; c_index < 9; c_index++)
    cbaa:	8e 81       	ldd	r24, Y+6	; 0x06
    cbac:	8f 5f       	subi	r24, 0xFF	; 255
    cbae:	8e 83       	std	Y+6, r24	; 0x06
    cbb0:	8e 81       	ldd	r24, Y+6	; 0x06
    cbb2:	89 30       	cpi	r24, 0x09	; 9
    cbb4:	08 f4       	brcc	.+2      	; 0xcbb8 <eSKalmanFilterCorrect+0x1e16>
    cbb6:	a5 cf       	rjmp	.-182    	; 0xcb02 <eSKalmanFilterCorrect+0x1d60>
         gt_insDev.as_P[c_index][c_index] = 0;
      }

   }/*End for( c_index = 0; c_index < 9; c_index++)*/

}/*End eSKalmanFilterCorrect*/
    cbb8:	c6 59       	subi	r28, 0x96	; 150
    cbba:	dd 4f       	sbci	r29, 0xFD	; 253
    cbbc:	cd bf       	out	0x3d, r28	; 61
    cbbe:	de bf       	out	0x3e, r29	; 62
    cbc0:	df 91       	pop	r29
    cbc2:	cf 91       	pop	r28
    cbc4:	1f 91       	pop	r17
    cbc6:	0f 91       	pop	r16
    cbc8:	ef 90       	pop	r14
    cbca:	df 90       	pop	r13
    cbcc:	cf 90       	pop	r12
    cbce:	af 90       	pop	r10
    cbd0:	8f 90       	pop	r8
    cbd2:	08 95       	ret

0000cbd4 <formMeasInnov>:
 * 10.5.1.3 of [3].
 *---------------------------------------------------------------------------*/
static inline void formMeasInnov( int16_t *ps_acc,
                                  int16_t *ps_mag,
                                  int16_t *ps_deltaZ)
{
    cbd4:	0f 93       	push	r16
    cbd6:	cf 93       	push	r28
    cbd8:	df 93       	push	r29
    cbda:	cd b7       	in	r28, 0x3d	; 61
    cbdc:	de b7       	in	r29, 0x3e	; 62
    cbde:	ea 97       	sbiw	r28, 0x3a	; 58
    cbe0:	cd bf       	out	0x3d, r28	; 61
    cbe2:	de bf       	out	0x3e, r29	; 62
    cbe4:	8d ab       	sts	0x5d, r24
    cbe6:	9e ab       	sts	0x5e, r25
    cbe8:	6f ab       	sts	0x5f, r22
    cbea:	78 af       	sts	0x78, r23
    cbec:	49 af       	sts	0x79, r20
    cbee:	5a af       	sts	0x7a, r21
    * magnetic field vector, 1 tesla should = 32767. For the time being
    * scale these values so that they are Q0.12 - if gt_insDev.t_accel.
    * s_calGravity = gt_insDev.t_mag.s_calMagFieldStr then this step can
    * be ignored.
    *------------------------------------------------------------------------*/
   as_acc2[0] = utl_div16x16_16( ps_acc[0], gt_insDev.t_accel.s_calGravity,
    cbf0:	8d a9       	sts	0x4d, r24
    cbf2:	9e a9       	sts	0x4e, r25
    cbf4:	fc 01       	movw	r30, r24
    cbf6:	80 81       	ld	r24, Z
    cbf8:	91 81       	ldd	r25, Z+1	; 0x01
    cbfa:	20 91 65 24 	lds	r18, 0x2465
    cbfe:	30 91 66 24 	lds	r19, 0x2466
    cc02:	b9 01       	movw	r22, r18
    cc04:	4c e0       	ldi	r20, 0x0C	; 12
    cc06:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cc0a:	8d 8f       	std	Y+29, r24	; 0x1d
    cc0c:	9e 8f       	std	Y+30, r25	; 0x1e
   12); /*Q12*/
   as_acc2[1] = utl_div16x16_16( ps_acc[1], gt_insDev.t_accel.s_calGravity,
    cc0e:	8d a9       	sts	0x4d, r24
    cc10:	9e a9       	sts	0x4e, r25
    cc12:	02 96       	adiw	r24, 0x02	; 2
    cc14:	fc 01       	movw	r30, r24
    cc16:	80 81       	ld	r24, Z
    cc18:	91 81       	ldd	r25, Z+1	; 0x01
    cc1a:	20 91 65 24 	lds	r18, 0x2465
    cc1e:	30 91 66 24 	lds	r19, 0x2466
    cc22:	b9 01       	movw	r22, r18
    cc24:	4c e0       	ldi	r20, 0x0C	; 12
    cc26:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cc2a:	8f 8f       	std	Y+31, r24	; 0x1f
    cc2c:	98 a3       	lds	r25, 0x58
   12); /*Q12*/
   as_acc2[2] = utl_div16x16_16( ps_acc[2], gt_insDev.t_accel.s_calGravity,
    cc2e:	8d a9       	sts	0x4d, r24
    cc30:	9e a9       	sts	0x4e, r25
    cc32:	04 96       	adiw	r24, 0x04	; 4
    cc34:	fc 01       	movw	r30, r24
    cc36:	80 81       	ld	r24, Z
    cc38:	91 81       	ldd	r25, Z+1	; 0x01
    cc3a:	20 91 65 24 	lds	r18, 0x2465
    cc3e:	30 91 66 24 	lds	r19, 0x2466
    cc42:	b9 01       	movw	r22, r18
    cc44:	4c e0       	ldi	r20, 0x0C	; 12
    cc46:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cc4a:	89 a3       	lds	r24, 0x59
    cc4c:	9a a3       	lds	r25, 0x5a
   12); /*Q12*/

   as_mag2[0] = utl_div16x16_16( ps_mag[0], gt_insDev.t_mag.s_calMagFieldStr,
    cc4e:	8f a9       	sts	0x4f, r24
    cc50:	98 ad       	sts	0x68, r25
    cc52:	fc 01       	movw	r30, r24
    cc54:	80 81       	ld	r24, Z
    cc56:	91 81       	ldd	r25, Z+1	; 0x01
    cc58:	20 91 30 24 	lds	r18, 0x2430
    cc5c:	30 91 31 24 	lds	r19, 0x2431
    cc60:	b9 01       	movw	r22, r18
    cc62:	4c e0       	ldi	r20, 0x0C	; 12
    cc64:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cc68:	8b a3       	lds	r24, 0x5b
    cc6a:	9c a3       	lds	r25, 0x5c
   12); /*Q12*/
   as_mag2[1] = utl_div16x16_16( ps_mag[1], gt_insDev.t_mag.s_calMagFieldStr,
    cc6c:	8f a9       	sts	0x4f, r24
    cc6e:	98 ad       	sts	0x68, r25
    cc70:	02 96       	adiw	r24, 0x02	; 2
    cc72:	fc 01       	movw	r30, r24
    cc74:	80 81       	ld	r24, Z
    cc76:	91 81       	ldd	r25, Z+1	; 0x01
    cc78:	20 91 30 24 	lds	r18, 0x2430
    cc7c:	30 91 31 24 	lds	r19, 0x2431
    cc80:	b9 01       	movw	r22, r18
    cc82:	4c e0       	ldi	r20, 0x0C	; 12
    cc84:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cc88:	8d a3       	lds	r24, 0x5d
    cc8a:	9e a3       	lds	r25, 0x5e
   12); /*Q12*/
   as_mag2[2] = utl_div16x16_16( ps_mag[2], gt_insDev.t_mag.s_calMagFieldStr,
    cc8c:	8f a9       	sts	0x4f, r24
    cc8e:	98 ad       	sts	0x68, r25
    cc90:	04 96       	adiw	r24, 0x04	; 4
    cc92:	fc 01       	movw	r30, r24
    cc94:	80 81       	ld	r24, Z
    cc96:	91 81       	ldd	r25, Z+1	; 0x01
    cc98:	20 91 30 24 	lds	r18, 0x2430
    cc9c:	30 91 31 24 	lds	r19, 0x2431
    cca0:	b9 01       	movw	r22, r18
    cca2:	4c e0       	ldi	r20, 0x0C	; 12
    cca4:	0e 94 19 e0 	call	0x1c032	; 0x1c032 <utl_div16x16_16>
    cca8:	8f a3       	lds	r24, 0x5f
    ccaa:	98 a7       	lds	r25, 0x78
   12); /*Q12*/

   /*------------------------------------------------------------------------*
    * Calculate the x and y gravity vector components in the navigation frame.
    *------------------------------------------------------------------------*/
   i_temp = 0;
    ccac:	19 82       	std	Y+1, r1	; 0x01
    ccae:	1a 82       	std	Y+2, r1	; 0x02
    ccb0:	1b 82       	std	Y+3, r1	; 0x03
    ccb2:	1c 82       	std	Y+4, r1	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[0][0], as_acc2[0], i_temp, 1);
    ccb4:	80 91 00 24 	lds	r24, 0x2400
    ccb8:	90 91 01 24 	lds	r25, 0x2401
    ccbc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    ccbe:	7e 8d       	ldd	r23, Y+30	; 0x1e
    ccc0:	29 81       	ldd	r18, Y+1	; 0x01
    ccc2:	3a 81       	ldd	r19, Y+2	; 0x02
    ccc4:	4b 81       	ldd	r20, Y+3	; 0x03
    ccc6:	5c 81       	ldd	r21, Y+4	; 0x04
    ccc8:	01 e0       	ldi	r16, 0x01	; 1
    ccca:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ccce:	dc 01       	movw	r26, r24
    ccd0:	cb 01       	movw	r24, r22
    ccd2:	89 83       	std	Y+1, r24	; 0x01
    ccd4:	9a 83       	std	Y+2, r25	; 0x02
    ccd6:	ab 83       	std	Y+3, r26	; 0x03
    ccd8:	bc 83       	std	Y+4, r27	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[0][1], as_acc2[1], i_temp, 1);
    ccda:	80 91 02 24 	lds	r24, 0x2402
    ccde:	90 91 03 24 	lds	r25, 0x2403
    cce2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    cce4:	78 a1       	lds	r23, 0x48
    cce6:	29 81       	ldd	r18, Y+1	; 0x01
    cce8:	3a 81       	ldd	r19, Y+2	; 0x02
    ccea:	4b 81       	ldd	r20, Y+3	; 0x03
    ccec:	5c 81       	ldd	r21, Y+4	; 0x04
    ccee:	01 e0       	ldi	r16, 0x01	; 1
    ccf0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ccf4:	dc 01       	movw	r26, r24
    ccf6:	cb 01       	movw	r24, r22
    ccf8:	89 83       	std	Y+1, r24	; 0x01
    ccfa:	9a 83       	std	Y+2, r25	; 0x02
    ccfc:	ab 83       	std	Y+3, r26	; 0x03
    ccfe:	bc 83       	std	Y+4, r27	; 0x04
   s_gravX = utl_rShft32_16( utl_mac16x16_32( gt_insDev.as_dcm[0][2],
    cd00:	80 91 04 24 	lds	r24, 0x2404
    cd04:	90 91 05 24 	lds	r25, 0x2405
    cd08:	69 a1       	lds	r22, 0x49
    cd0a:	7a a1       	lds	r23, 0x4a
    cd0c:	29 81       	ldd	r18, Y+1	; 0x01
    cd0e:	3a 81       	ldd	r19, Y+2	; 0x02
    cd10:	4b 81       	ldd	r20, Y+3	; 0x03
    cd12:	5c 81       	ldd	r21, Y+4	; 0x04
    cd14:	01 e0       	ldi	r16, 0x01	; 1
    cd16:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    cd1a:	dc 01       	movw	r26, r24
    cd1c:	cb 01       	movw	r24, r22
    cd1e:	8b 87       	std	Y+11, r24	; 0x0b
    cd20:	9c 87       	std	Y+12, r25	; 0x0c
    cd22:	ad 87       	std	Y+13, r26	; 0x0d
    cd24:	be 87       	std	Y+14, r27	; 0x0e
    cd26:	8b e0       	ldi	r24, 0x0B	; 11
    cd28:	8f 87       	std	Y+15, r24	; 0x0f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    cd2a:	81 e0       	ldi	r24, 0x01	; 1
    cd2c:	88 8b       	std	Y+16, r24	; 0x10

      if( i_x < 0)
    cd2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    cd30:	9c 85       	ldd	r25, Y+12	; 0x0c
    cd32:	ad 85       	ldd	r26, Y+13	; 0x0d
    cd34:	be 85       	ldd	r27, Y+14	; 0x0e
    cd36:	bb 23       	and	r27, r27
    cd38:	8c f4       	brge	.+34     	; 0xcd5c <formMeasInnov+0x188>
      {
         i_x = -i_x;
    cd3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    cd3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    cd3e:	ad 85       	ldd	r26, Y+13	; 0x0d
    cd40:	be 85       	ldd	r27, Y+14	; 0x0e
    cd42:	b0 95       	com	r27
    cd44:	a0 95       	com	r26
    cd46:	90 95       	com	r25
    cd48:	81 95       	neg	r24
    cd4a:	9f 4f       	sbci	r25, 0xFF	; 255
    cd4c:	af 4f       	sbci	r26, 0xFF	; 255
    cd4e:	bf 4f       	sbci	r27, 0xFF	; 255
    cd50:	8b 87       	std	Y+11, r24	; 0x0b
    cd52:	9c 87       	std	Y+12, r25	; 0x0c
    cd54:	ad 87       	std	Y+13, r26	; 0x0d
    cd56:	be 87       	std	Y+14, r27	; 0x0e
         c_sign = -1;
    cd58:	8f ef       	ldi	r24, 0xFF	; 255
    cd5a:	88 8b       	std	Y+16, r24	; 0x10
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    cd5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    cd5e:	89 30       	cpi	r24, 0x09	; 9
    cd60:	3c f1       	brlt	.+78     	; 0xcdb0 <formMeasInnov+0x1dc>
    cd62:	8f 85       	ldd	r24, Y+15	; 0x0f
    cd64:	81 31       	cpi	r24, 0x11	; 17
    cd66:	24 f5       	brge	.+72     	; 0xcdb0 <formMeasInnov+0x1dc>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    cd68:	8f 85       	ldd	r24, Y+15	; 0x0f
    cd6a:	99 27       	eor	r25, r25
    cd6c:	87 fd       	sbrc	r24, 7
    cd6e:	90 95       	com	r25
    cd70:	20 e1       	ldi	r18, 0x10	; 16
    cd72:	30 e0       	ldi	r19, 0x00	; 0
    cd74:	28 1b       	sub	r18, r24
    cd76:	39 0b       	sbc	r19, r25
    cd78:	8b 85       	ldd	r24, Y+11	; 0x0b
    cd7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    cd7c:	ad 85       	ldd	r26, Y+13	; 0x0d
    cd7e:	be 85       	ldd	r27, Y+14	; 0x0e
    cd80:	02 2e       	mov	r0, r18
    cd82:	04 c0       	rjmp	.+8      	; 0xcd8c <formMeasInnov+0x1b8>
    cd84:	88 0f       	add	r24, r24
    cd86:	99 1f       	adc	r25, r25
    cd88:	aa 1f       	adc	r26, r26
    cd8a:	bb 1f       	adc	r27, r27
    cd8c:	0a 94       	dec	r0
    cd8e:	d2 f7       	brpl	.-12     	; 0xcd84 <formMeasInnov+0x1b0>
    cd90:	89 ab       	sts	0x59, r24
    cd92:	9a ab       	sts	0x5a, r25
    cd94:	ab ab       	sts	0x5b, r26
    cd96:	bc ab       	sts	0x5c, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    cd98:	88 89       	ldd	r24, Y+16	; 0x10
    cd9a:	8f 3f       	cpi	r24, 0xFF	; 255
    cd9c:	31 f4       	brne	.+12     	; 0xcdaa <formMeasInnov+0x1d6>
              return -t_tWord.as_word16[1];
    cd9e:	8b a9       	sts	0x4b, r24
    cda0:	9c a9       	sts	0x4c, r25
    cda2:	90 95       	com	r25
    cda4:	81 95       	neg	r24
    cda6:	9f 4f       	sbci	r25, 0xFF	; 255
    cda8:	23 c0       	rjmp	.+70     	; 0xcdf0 <formMeasInnov+0x21c>
           else
            return t_tWord.as_word16[1];
    cdaa:	8b a9       	sts	0x4b, r24
    cdac:	9c a9       	sts	0x4c, r25
    cdae:	20 c0       	rjmp	.+64     	; 0xcdf0 <formMeasInnov+0x21c>
      }

      i_x = i_x >> c_n;
    cdb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    cdb2:	28 2f       	mov	r18, r24
    cdb4:	33 27       	eor	r19, r19
    cdb6:	27 fd       	sbrc	r18, 7
    cdb8:	30 95       	com	r19
    cdba:	8b 85       	ldd	r24, Y+11	; 0x0b
    cdbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    cdbe:	ad 85       	ldd	r26, Y+13	; 0x0d
    cdc0:	be 85       	ldd	r27, Y+14	; 0x0e
    cdc2:	02 2e       	mov	r0, r18
    cdc4:	04 c0       	rjmp	.+8      	; 0xcdce <formMeasInnov+0x1fa>
    cdc6:	b5 95       	asr	r27
    cdc8:	a7 95       	ror	r26
    cdca:	97 95       	ror	r25
    cdcc:	87 95       	ror	r24
    cdce:	0a 94       	dec	r0
    cdd0:	d2 f7       	brpl	.-12     	; 0xcdc6 <formMeasInnov+0x1f2>
    cdd2:	8b 87       	std	Y+11, r24	; 0x0b
    cdd4:	9c 87       	std	Y+12, r25	; 0x0c
    cdd6:	ad 87       	std	Y+13, r26	; 0x0d
    cdd8:	be 87       	std	Y+14, r27	; 0x0e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    cdda:	88 89       	ldd	r24, Y+16	; 0x10
    cddc:	8f 3f       	cpi	r24, 0xFF	; 255
    cdde:	31 f4       	brne	.+12     	; 0xcdec <formMeasInnov+0x218>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    cde0:	8b 85       	ldd	r24, Y+11	; 0x0b
    cde2:	9c 85       	ldd	r25, Y+12	; 0x0c
    cde4:	90 95       	com	r25
    cde6:	81 95       	neg	r24
    cde8:	9f 4f       	sbci	r25, 0xFF	; 255
    cdea:	02 c0       	rjmp	.+4      	; 0xcdf0 <formMeasInnov+0x21c>
       else
           return (int16_t)i_x;
    cdec:	8b 85       	ldd	r24, Y+11	; 0x0b
    cdee:	9c 85       	ldd	r25, Y+12	; 0x0c
    cdf0:	8d 83       	std	Y+5, r24	; 0x05
    cdf2:	9e 83       	std	Y+6, r25	; 0x06
   as_acc2[2], i_temp, 1),  11); /*Q12 to Q15*/

   i_temp = 0;
    cdf4:	19 82       	std	Y+1, r1	; 0x01
    cdf6:	1a 82       	std	Y+2, r1	; 0x02
    cdf8:	1b 82       	std	Y+3, r1	; 0x03
    cdfa:	1c 82       	std	Y+4, r1	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[1][0], as_acc2[0], i_temp, 1);
    cdfc:	80 91 06 24 	lds	r24, 0x2406
    ce00:	90 91 07 24 	lds	r25, 0x2407
    ce04:	6d 8d       	ldd	r22, Y+29	; 0x1d
    ce06:	7e 8d       	ldd	r23, Y+30	; 0x1e
    ce08:	29 81       	ldd	r18, Y+1	; 0x01
    ce0a:	3a 81       	ldd	r19, Y+2	; 0x02
    ce0c:	4b 81       	ldd	r20, Y+3	; 0x03
    ce0e:	5c 81       	ldd	r21, Y+4	; 0x04
    ce10:	01 e0       	ldi	r16, 0x01	; 1
    ce12:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ce16:	dc 01       	movw	r26, r24
    ce18:	cb 01       	movw	r24, r22
    ce1a:	89 83       	std	Y+1, r24	; 0x01
    ce1c:	9a 83       	std	Y+2, r25	; 0x02
    ce1e:	ab 83       	std	Y+3, r26	; 0x03
    ce20:	bc 83       	std	Y+4, r27	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[1][1], as_acc2[1], i_temp, 1);
    ce22:	80 91 08 24 	lds	r24, 0x2408
    ce26:	90 91 09 24 	lds	r25, 0x2409
    ce2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    ce2c:	78 a1       	lds	r23, 0x48
    ce2e:	29 81       	ldd	r18, Y+1	; 0x01
    ce30:	3a 81       	ldd	r19, Y+2	; 0x02
    ce32:	4b 81       	ldd	r20, Y+3	; 0x03
    ce34:	5c 81       	ldd	r21, Y+4	; 0x04
    ce36:	01 e0       	ldi	r16, 0x01	; 1
    ce38:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ce3c:	dc 01       	movw	r26, r24
    ce3e:	cb 01       	movw	r24, r22
    ce40:	89 83       	std	Y+1, r24	; 0x01
    ce42:	9a 83       	std	Y+2, r25	; 0x02
    ce44:	ab 83       	std	Y+3, r26	; 0x03
    ce46:	bc 83       	std	Y+4, r27	; 0x04
   s_gravY = utl_rShft32_16( utl_mac16x16_32( gt_insDev.as_dcm[1][2],
    ce48:	80 91 0a 24 	lds	r24, 0x240A
    ce4c:	90 91 0b 24 	lds	r25, 0x240B
    ce50:	69 a1       	lds	r22, 0x49
    ce52:	7a a1       	lds	r23, 0x4a
    ce54:	29 81       	ldd	r18, Y+1	; 0x01
    ce56:	3a 81       	ldd	r19, Y+2	; 0x02
    ce58:	4b 81       	ldd	r20, Y+3	; 0x03
    ce5a:	5c 81       	ldd	r21, Y+4	; 0x04
    ce5c:	01 e0       	ldi	r16, 0x01	; 1
    ce5e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ce62:	dc 01       	movw	r26, r24
    ce64:	cb 01       	movw	r24, r22
    ce66:	89 8b       	std	Y+17, r24	; 0x11
    ce68:	9a 8b       	std	Y+18, r25	; 0x12
    ce6a:	ab 8b       	std	Y+19, r26	; 0x13
    ce6c:	bc 8b       	std	Y+20, r27	; 0x14
    ce6e:	8b e0       	ldi	r24, 0x0B	; 11
    ce70:	8d 8b       	std	Y+21, r24	; 0x15
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    ce72:	81 e0       	ldi	r24, 0x01	; 1
    ce74:	8e 8b       	std	Y+22, r24	; 0x16

      if( i_x < 0)
    ce76:	89 89       	ldd	r24, Y+17	; 0x11
    ce78:	9a 89       	ldd	r25, Y+18	; 0x12
    ce7a:	ab 89       	ldd	r26, Y+19	; 0x13
    ce7c:	bc 89       	ldd	r27, Y+20	; 0x14
    ce7e:	bb 23       	and	r27, r27
    ce80:	8c f4       	brge	.+34     	; 0xcea4 <formMeasInnov+0x2d0>
      {
         i_x = -i_x;
    ce82:	89 89       	ldd	r24, Y+17	; 0x11
    ce84:	9a 89       	ldd	r25, Y+18	; 0x12
    ce86:	ab 89       	ldd	r26, Y+19	; 0x13
    ce88:	bc 89       	ldd	r27, Y+20	; 0x14
    ce8a:	b0 95       	com	r27
    ce8c:	a0 95       	com	r26
    ce8e:	90 95       	com	r25
    ce90:	81 95       	neg	r24
    ce92:	9f 4f       	sbci	r25, 0xFF	; 255
    ce94:	af 4f       	sbci	r26, 0xFF	; 255
    ce96:	bf 4f       	sbci	r27, 0xFF	; 255
    ce98:	89 8b       	std	Y+17, r24	; 0x11
    ce9a:	9a 8b       	std	Y+18, r25	; 0x12
    ce9c:	ab 8b       	std	Y+19, r26	; 0x13
    ce9e:	bc 8b       	std	Y+20, r27	; 0x14
         c_sign = -1;
    cea0:	8f ef       	ldi	r24, 0xFF	; 255
    cea2:	8e 8b       	std	Y+22, r24	; 0x16
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    cea4:	8d 89       	ldd	r24, Y+21	; 0x15
    cea6:	89 30       	cpi	r24, 0x09	; 9
    cea8:	3c f1       	brlt	.+78     	; 0xcef8 <formMeasInnov+0x324>
    ceaa:	8d 89       	ldd	r24, Y+21	; 0x15
    ceac:	81 31       	cpi	r24, 0x11	; 17
    ceae:	24 f5       	brge	.+72     	; 0xcef8 <formMeasInnov+0x324>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    ceb0:	8d 89       	ldd	r24, Y+21	; 0x15
    ceb2:	99 27       	eor	r25, r25
    ceb4:	87 fd       	sbrc	r24, 7
    ceb6:	90 95       	com	r25
    ceb8:	20 e1       	ldi	r18, 0x10	; 16
    ceba:	30 e0       	ldi	r19, 0x00	; 0
    cebc:	28 1b       	sub	r18, r24
    cebe:	39 0b       	sbc	r19, r25
    cec0:	89 89       	ldd	r24, Y+17	; 0x11
    cec2:	9a 89       	ldd	r25, Y+18	; 0x12
    cec4:	ab 89       	ldd	r26, Y+19	; 0x13
    cec6:	bc 89       	ldd	r27, Y+20	; 0x14
    cec8:	02 2e       	mov	r0, r18
    ceca:	04 c0       	rjmp	.+8      	; 0xced4 <formMeasInnov+0x300>
    cecc:	88 0f       	add	r24, r24
    cece:	99 1f       	adc	r25, r25
    ced0:	aa 1f       	adc	r26, r26
    ced2:	bb 1f       	adc	r27, r27
    ced4:	0a 94       	dec	r0
    ced6:	d2 f7       	brpl	.-12     	; 0xcecc <formMeasInnov+0x2f8>
    ced8:	8d a7       	lds	r24, 0x7d
    ceda:	9e a7       	lds	r25, 0x7e
    cedc:	af a7       	lds	r26, 0x7f
    cede:	b8 ab       	sts	0x58, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    cee0:	8e 89       	ldd	r24, Y+22	; 0x16
    cee2:	8f 3f       	cpi	r24, 0xFF	; 255
    cee4:	31 f4       	brne	.+12     	; 0xcef2 <formMeasInnov+0x31e>
              return -t_tWord.as_word16[1];
    cee6:	8f a5       	lds	r24, 0x6f
    cee8:	98 a9       	sts	0x48, r25
    ceea:	90 95       	com	r25
    ceec:	81 95       	neg	r24
    ceee:	9f 4f       	sbci	r25, 0xFF	; 255
    cef0:	23 c0       	rjmp	.+70     	; 0xcf38 <formMeasInnov+0x364>
           else
            return t_tWord.as_word16[1];
    cef2:	8f a5       	lds	r24, 0x6f
    cef4:	98 a9       	sts	0x48, r25
    cef6:	20 c0       	rjmp	.+64     	; 0xcf38 <formMeasInnov+0x364>
      }

      i_x = i_x >> c_n;
    cef8:	8d 89       	ldd	r24, Y+21	; 0x15
    cefa:	28 2f       	mov	r18, r24
    cefc:	33 27       	eor	r19, r19
    cefe:	27 fd       	sbrc	r18, 7
    cf00:	30 95       	com	r19
    cf02:	89 89       	ldd	r24, Y+17	; 0x11
    cf04:	9a 89       	ldd	r25, Y+18	; 0x12
    cf06:	ab 89       	ldd	r26, Y+19	; 0x13
    cf08:	bc 89       	ldd	r27, Y+20	; 0x14
    cf0a:	02 2e       	mov	r0, r18
    cf0c:	04 c0       	rjmp	.+8      	; 0xcf16 <formMeasInnov+0x342>
    cf0e:	b5 95       	asr	r27
    cf10:	a7 95       	ror	r26
    cf12:	97 95       	ror	r25
    cf14:	87 95       	ror	r24
    cf16:	0a 94       	dec	r0
    cf18:	d2 f7       	brpl	.-12     	; 0xcf0e <formMeasInnov+0x33a>
    cf1a:	89 8b       	std	Y+17, r24	; 0x11
    cf1c:	9a 8b       	std	Y+18, r25	; 0x12
    cf1e:	ab 8b       	std	Y+19, r26	; 0x13
    cf20:	bc 8b       	std	Y+20, r27	; 0x14
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    cf22:	8e 89       	ldd	r24, Y+22	; 0x16
    cf24:	8f 3f       	cpi	r24, 0xFF	; 255
    cf26:	31 f4       	brne	.+12     	; 0xcf34 <formMeasInnov+0x360>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    cf28:	89 89       	ldd	r24, Y+17	; 0x11
    cf2a:	9a 89       	ldd	r25, Y+18	; 0x12
    cf2c:	90 95       	com	r25
    cf2e:	81 95       	neg	r24
    cf30:	9f 4f       	sbci	r25, 0xFF	; 255
    cf32:	02 c0       	rjmp	.+4      	; 0xcf38 <formMeasInnov+0x364>
       else
           return (int16_t)i_x;
    cf34:	89 89       	ldd	r24, Y+17	; 0x11
    cf36:	9a 89       	ldd	r25, Y+18	; 0x12
    cf38:	8f 83       	std	Y+7, r24	; 0x07
    cf3a:	98 87       	std	Y+8, r25	; 0x08
   as_acc2[2], i_temp, 1), 11); /*Q12 to Q15*/

   /*------------------------------------------------------------------------*
    * Calculate the y magnetic field vector component in the navigation frame.
    *------------------------------------------------------------------------*/
   i_temp = 0;
    cf3c:	19 82       	std	Y+1, r1	; 0x01
    cf3e:	1a 82       	std	Y+2, r1	; 0x02
    cf40:	1b 82       	std	Y+3, r1	; 0x03
    cf42:	1c 82       	std	Y+4, r1	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[1][0], as_mag2[0], i_temp, 1);
    cf44:	80 91 06 24 	lds	r24, 0x2406
    cf48:	90 91 07 24 	lds	r25, 0x2407
    cf4c:	6b a1       	lds	r22, 0x4b
    cf4e:	7c a1       	lds	r23, 0x4c
    cf50:	29 81       	ldd	r18, Y+1	; 0x01
    cf52:	3a 81       	ldd	r19, Y+2	; 0x02
    cf54:	4b 81       	ldd	r20, Y+3	; 0x03
    cf56:	5c 81       	ldd	r21, Y+4	; 0x04
    cf58:	01 e0       	ldi	r16, 0x01	; 1
    cf5a:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    cf5e:	dc 01       	movw	r26, r24
    cf60:	cb 01       	movw	r24, r22
    cf62:	89 83       	std	Y+1, r24	; 0x01
    cf64:	9a 83       	std	Y+2, r25	; 0x02
    cf66:	ab 83       	std	Y+3, r26	; 0x03
    cf68:	bc 83       	std	Y+4, r27	; 0x04
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[1][1], as_mag2[1], i_temp, 1);
    cf6a:	80 91 08 24 	lds	r24, 0x2408
    cf6e:	90 91 09 24 	lds	r25, 0x2409
    cf72:	6d a1       	lds	r22, 0x4d
    cf74:	7e a1       	lds	r23, 0x4e
    cf76:	29 81       	ldd	r18, Y+1	; 0x01
    cf78:	3a 81       	ldd	r19, Y+2	; 0x02
    cf7a:	4b 81       	ldd	r20, Y+3	; 0x03
    cf7c:	5c 81       	ldd	r21, Y+4	; 0x04
    cf7e:	01 e0       	ldi	r16, 0x01	; 1
    cf80:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    cf84:	dc 01       	movw	r26, r24
    cf86:	cb 01       	movw	r24, r22
    cf88:	89 83       	std	Y+1, r24	; 0x01
    cf8a:	9a 83       	std	Y+2, r25	; 0x02
    cf8c:	ab 83       	std	Y+3, r26	; 0x03
    cf8e:	bc 83       	std	Y+4, r27	; 0x04
   s_magY = utl_rShft32_16( utl_mac16x16_32( gt_insDev.as_dcm[1][2],
    cf90:	80 91 0a 24 	lds	r24, 0x240A
    cf94:	90 91 0b 24 	lds	r25, 0x240B
    cf98:	6f a1       	lds	r22, 0x4f
    cf9a:	78 a5       	lds	r23, 0x68
    cf9c:	29 81       	ldd	r18, Y+1	; 0x01
    cf9e:	3a 81       	ldd	r19, Y+2	; 0x02
    cfa0:	4b 81       	ldd	r20, Y+3	; 0x03
    cfa2:	5c 81       	ldd	r21, Y+4	; 0x04
    cfa4:	01 e0       	ldi	r16, 0x01	; 1
    cfa6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    cfaa:	dc 01       	movw	r26, r24
    cfac:	cb 01       	movw	r24, r22
    cfae:	8f 8b       	std	Y+23, r24	; 0x17
    cfb0:	98 8f       	std	Y+24, r25	; 0x18
    cfb2:	a9 8f       	std	Y+25, r26	; 0x19
    cfb4:	ba 8f       	std	Y+26, r27	; 0x1a
    cfb6:	8b e0       	ldi	r24, 0x0B	; 11
    cfb8:	8b 8f       	std	Y+27, r24	; 0x1b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    cfba:	81 e0       	ldi	r24, 0x01	; 1
    cfbc:	8c 8f       	std	Y+28, r24	; 0x1c

      if( i_x < 0)
    cfbe:	8f 89       	ldd	r24, Y+23	; 0x17
    cfc0:	98 8d       	ldd	r25, Y+24	; 0x18
    cfc2:	a9 8d       	ldd	r26, Y+25	; 0x19
    cfc4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    cfc6:	bb 23       	and	r27, r27
    cfc8:	8c f4       	brge	.+34     	; 0xcfec <formMeasInnov+0x418>
      {
         i_x = -i_x;
    cfca:	8f 89       	ldd	r24, Y+23	; 0x17
    cfcc:	98 8d       	ldd	r25, Y+24	; 0x18
    cfce:	a9 8d       	ldd	r26, Y+25	; 0x19
    cfd0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    cfd2:	b0 95       	com	r27
    cfd4:	a0 95       	com	r26
    cfd6:	90 95       	com	r25
    cfd8:	81 95       	neg	r24
    cfda:	9f 4f       	sbci	r25, 0xFF	; 255
    cfdc:	af 4f       	sbci	r26, 0xFF	; 255
    cfde:	bf 4f       	sbci	r27, 0xFF	; 255
    cfe0:	8f 8b       	std	Y+23, r24	; 0x17
    cfe2:	98 8f       	std	Y+24, r25	; 0x18
    cfe4:	a9 8f       	std	Y+25, r26	; 0x19
    cfe6:	ba 8f       	std	Y+26, r27	; 0x1a
         c_sign = -1;
    cfe8:	8f ef       	ldi	r24, 0xFF	; 255
    cfea:	8c 8f       	std	Y+28, r24	; 0x1c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    cfec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cfee:	89 30       	cpi	r24, 0x09	; 9
    cff0:	3c f1       	brlt	.+78     	; 0xd040 <formMeasInnov+0x46c>
    cff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cff4:	81 31       	cpi	r24, 0x11	; 17
    cff6:	24 f5       	brge	.+72     	; 0xd040 <formMeasInnov+0x46c>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    cff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cffa:	99 27       	eor	r25, r25
    cffc:	87 fd       	sbrc	r24, 7
    cffe:	90 95       	com	r25
    d000:	20 e1       	ldi	r18, 0x10	; 16
    d002:	30 e0       	ldi	r19, 0x00	; 0
    d004:	28 1b       	sub	r18, r24
    d006:	39 0b       	sbc	r19, r25
    d008:	8f 89       	ldd	r24, Y+23	; 0x17
    d00a:	98 8d       	ldd	r25, Y+24	; 0x18
    d00c:	a9 8d       	ldd	r26, Y+25	; 0x19
    d00e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d010:	02 2e       	mov	r0, r18
    d012:	04 c0       	rjmp	.+8      	; 0xd01c <formMeasInnov+0x448>
    d014:	88 0f       	add	r24, r24
    d016:	99 1f       	adc	r25, r25
    d018:	aa 1f       	adc	r26, r26
    d01a:	bb 1f       	adc	r27, r27
    d01c:	0a 94       	dec	r0
    d01e:	d2 f7       	brpl	.-12     	; 0xd014 <formMeasInnov+0x440>
    d020:	89 a7       	lds	r24, 0x79
    d022:	9a a7       	lds	r25, 0x7a
    d024:	ab a7       	lds	r26, 0x7b
    d026:	bc a7       	lds	r27, 0x7c

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d028:	8c 8d       	ldd	r24, Y+28	; 0x1c
    d02a:	8f 3f       	cpi	r24, 0xFF	; 255
    d02c:	31 f4       	brne	.+12     	; 0xd03a <formMeasInnov+0x466>
              return -t_tWord.as_word16[1];
    d02e:	8b a5       	lds	r24, 0x6b
    d030:	9c a5       	lds	r25, 0x6c
    d032:	90 95       	com	r25
    d034:	81 95       	neg	r24
    d036:	9f 4f       	sbci	r25, 0xFF	; 255
    d038:	23 c0       	rjmp	.+70     	; 0xd080 <formMeasInnov+0x4ac>
           else
            return t_tWord.as_word16[1];
    d03a:	8b a5       	lds	r24, 0x6b
    d03c:	9c a5       	lds	r25, 0x6c
    d03e:	20 c0       	rjmp	.+64     	; 0xd080 <formMeasInnov+0x4ac>
      }

      i_x = i_x >> c_n;
    d040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d042:	28 2f       	mov	r18, r24
    d044:	33 27       	eor	r19, r19
    d046:	27 fd       	sbrc	r18, 7
    d048:	30 95       	com	r19
    d04a:	8f 89       	ldd	r24, Y+23	; 0x17
    d04c:	98 8d       	ldd	r25, Y+24	; 0x18
    d04e:	a9 8d       	ldd	r26, Y+25	; 0x19
    d050:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d052:	02 2e       	mov	r0, r18
    d054:	04 c0       	rjmp	.+8      	; 0xd05e <formMeasInnov+0x48a>
    d056:	b5 95       	asr	r27
    d058:	a7 95       	ror	r26
    d05a:	97 95       	ror	r25
    d05c:	87 95       	ror	r24
    d05e:	0a 94       	dec	r0
    d060:	d2 f7       	brpl	.-12     	; 0xd056 <formMeasInnov+0x482>
    d062:	8f 8b       	std	Y+23, r24	; 0x17
    d064:	98 8f       	std	Y+24, r25	; 0x18
    d066:	a9 8f       	std	Y+25, r26	; 0x19
    d068:	ba 8f       	std	Y+26, r27	; 0x1a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d06a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    d06c:	8f 3f       	cpi	r24, 0xFF	; 255
    d06e:	31 f4       	brne	.+12     	; 0xd07c <formMeasInnov+0x4a8>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d070:	8f 89       	ldd	r24, Y+23	; 0x17
    d072:	98 8d       	ldd	r25, Y+24	; 0x18
    d074:	90 95       	com	r25
    d076:	81 95       	neg	r24
    d078:	9f 4f       	sbci	r25, 0xFF	; 255
    d07a:	02 c0       	rjmp	.+4      	; 0xd080 <formMeasInnov+0x4ac>
       else
           return (int16_t)i_x;
    d07c:	8f 89       	ldd	r24, Y+23	; 0x17
    d07e:	98 8d       	ldd	r25, Y+24	; 0x18
    d080:	89 87       	std	Y+9, r24	; 0x09
    d082:	9a 87       	std	Y+10, r25	; 0x0a

   /*------------------------------------------------------------------------*
    * Form the error innovation vector which is the x and y components of
    * g_calibrated - g_nav and the y component of m_calibrated - m_nav.
    *------------------------------------------------------------------------*/
   ps_deltaZ[0] = -s_gravX;
    d084:	8d 81       	ldd	r24, Y+5	; 0x05
    d086:	9e 81       	ldd	r25, Y+6	; 0x06
    d088:	22 27       	eor	r18, r18
    d08a:	33 27       	eor	r19, r19
    d08c:	28 1b       	sub	r18, r24
    d08e:	39 0b       	sbc	r19, r25
    d090:	89 ad       	sts	0x69, r24
    d092:	9a ad       	sts	0x6a, r25
    d094:	fc 01       	movw	r30, r24
    d096:	20 83       	st	Z, r18
    d098:	31 83       	std	Z+1, r19	; 0x01
   ps_deltaZ[1] = -s_gravY;
    d09a:	89 ad       	sts	0x69, r24
    d09c:	9a ad       	sts	0x6a, r25
    d09e:	02 96       	adiw	r24, 0x02	; 2
    d0a0:	2f 81       	ldd	r18, Y+7	; 0x07
    d0a2:	38 85       	ldd	r19, Y+8	; 0x08
    d0a4:	30 95       	com	r19
    d0a6:	21 95       	neg	r18
    d0a8:	3f 4f       	sbci	r19, 0xFF	; 255
    d0aa:	fc 01       	movw	r30, r24
    d0ac:	20 83       	st	Z, r18
    d0ae:	31 83       	std	Z+1, r19	; 0x01
   ps_deltaZ[2] = -s_magY;
    d0b0:	89 ad       	sts	0x69, r24
    d0b2:	9a ad       	sts	0x6a, r25
    d0b4:	04 96       	adiw	r24, 0x04	; 4
    d0b6:	29 85       	ldd	r18, Y+9	; 0x09
    d0b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    d0ba:	30 95       	com	r19
    d0bc:	21 95       	neg	r18
    d0be:	3f 4f       	sbci	r19, 0xFF	; 255
    d0c0:	fc 01       	movw	r30, r24
    d0c2:	20 83       	st	Z, r18
    d0c4:	31 83       	std	Z+1, r19	; 0x01

}/*End formMeasInnov*/
    d0c6:	ea 96       	adiw	r28, 0x3a	; 58
    d0c8:	cd bf       	out	0x3d, r28	; 61
    d0ca:	de bf       	out	0x3e, r29	; 62
    d0cc:	df 91       	pop	r29
    d0ce:	cf 91       	pop	r28
    d0d0:	0f 91       	pop	r16
    d0d2:	08 95       	ret

0000d0d4 <limitGyroRot>:
/*---------------------------------------------------------------------------*
 * Due to the fact that the code is not setup to handle phase changes > pi,
 * Limit the amount of phase rotation detected by the gyro in a given 'dt'.
 *---------------------------------------------------------------------------*/
static inline int16_t limitGyroRot( int32_t i_rot)
{
    d0d4:	cf 93       	push	r28
    d0d6:	df 93       	push	r29
    d0d8:	00 d0       	rcall	.+0      	; 0xd0da <limitGyroRot+0x6>
    d0da:	0f 92       	push	r0
    d0dc:	cd b7       	in	r28, 0x3d	; 61
    d0de:	de b7       	in	r29, 0x3e	; 62
    d0e0:	69 83       	std	Y+1, r22	; 0x01
    d0e2:	7a 83       	std	Y+2, r23	; 0x02
    d0e4:	8b 83       	std	Y+3, r24	; 0x03
    d0e6:	9c 83       	std	Y+4, r25	; 0x04
   if( i_rot > UTL_MATH_FXDPNT_PI)
    d0e8:	89 81       	ldd	r24, Y+1	; 0x01
    d0ea:	9a 81       	ldd	r25, Y+2	; 0x02
    d0ec:	ab 81       	ldd	r26, Y+3	; 0x03
    d0ee:	bc 81       	ldd	r27, Y+4	; 0x04
    d0f0:	80 30       	cpi	r24, 0x00	; 0
    d0f2:	20 e8       	ldi	r18, 0x80	; 128
    d0f4:	92 07       	cpc	r25, r18
    d0f6:	20 e0       	ldi	r18, 0x00	; 0
    d0f8:	a2 07       	cpc	r26, r18
    d0fa:	20 e0       	ldi	r18, 0x00	; 0
    d0fc:	b2 07       	cpc	r27, r18
    d0fe:	1c f0       	brlt	.+6      	; 0xd106 <limitGyroRot+0x32>
      return UTL_MATH_FXDPNT_PI;
    d100:	8f ef       	ldi	r24, 0xFF	; 255
    d102:	9f e7       	ldi	r25, 0x7F	; 127
    d104:	11 c0       	rjmp	.+34     	; 0xd128 <limitGyroRot+0x54>
   else if( i_rot < UTL_MATH_FXDPNT_NEGATIVE_PI)
    d106:	89 81       	ldd	r24, Y+1	; 0x01
    d108:	9a 81       	ldd	r25, Y+2	; 0x02
    d10a:	ab 81       	ldd	r26, Y+3	; 0x03
    d10c:	bc 81       	ldd	r27, Y+4	; 0x04
    d10e:	80 30       	cpi	r24, 0x00	; 0
    d110:	20 e8       	ldi	r18, 0x80	; 128
    d112:	92 07       	cpc	r25, r18
    d114:	2f ef       	ldi	r18, 0xFF	; 255
    d116:	a2 07       	cpc	r26, r18
    d118:	2f ef       	ldi	r18, 0xFF	; 255
    d11a:	b2 07       	cpc	r27, r18
    d11c:	1c f4       	brge	.+6      	; 0xd124 <limitGyroRot+0x50>
      return UTL_MATH_FXDPNT_NEGATIVE_PI;
    d11e:	80 e0       	ldi	r24, 0x00	; 0
    d120:	90 e8       	ldi	r25, 0x80	; 128
    d122:	02 c0       	rjmp	.+4      	; 0xd128 <limitGyroRot+0x54>

   return (int16_t)i_rot;
    d124:	89 81       	ldd	r24, Y+1	; 0x01
    d126:	9a 81       	ldd	r25, Y+2	; 0x02

}/*End limitGyroRot*/
    d128:	24 96       	adiw	r28, 0x04	; 4
    d12a:	cd bf       	out	0x3d, r28	; 61
    d12c:	de bf       	out	0x3e, r29	; 62
    d12e:	df 91       	pop	r29
    d130:	cf 91       	pop	r28
    d132:	08 95       	ret

0000d134 <dcmNormalize>:

/*---------------------------------------------------------------------------*
 * Normalize the DCM according to eq's 18, 19, 20, and 21 of [4]
 *---------------------------------------------------------------------------*/
static inline void dcmNormalize( void)
{
    d134:	cf 92       	push	r12
    d136:	ef 92       	push	r14
    d138:	ff 92       	push	r15
    d13a:	0f 93       	push	r16
    d13c:	1f 93       	push	r17
    d13e:	cf 93       	push	r28
    d140:	df 93       	push	r29
    d142:	cd b7       	in	r28, 0x3d	; 61
    d144:	de b7       	in	r29, 0x3e	; 62
    d146:	c7 59       	subi	r28, 0x97	; 151
    d148:	d0 40       	sbci	r29, 0x00	; 0
    d14a:	cd bf       	out	0x3d, r28	; 61
    d14c:	de bf       	out	0x3e, r29	; 62
   int16_t s_errOvrTwo = 0;
    d14e:	19 82       	std	Y+1, r1	; 0x01
    d150:	1a 82       	std	Y+2, r1	; 0x02
   int16_t as_yOrth[3];
   int16_t as_zOrth[3];
   int32_t i_scalerX;
   int32_t i_scalerY;
   int32_t i_scalerZ;
   int32_t i_temp = 0;
    d152:	1b 82       	std	Y+3, r1	; 0x03
    d154:	1c 82       	std	Y+4, r1	; 0x04
    d156:	1d 82       	std	Y+5, r1	; 0x05
    d158:	1e 82       	std	Y+6, r1	; 0x06

   i_temp = 0;
    d15a:	1b 82       	std	Y+3, r1	; 0x03
    d15c:	1c 82       	std	Y+4, r1	; 0x04
    d15e:	1d 82       	std	Y+5, r1	; 0x05
    d160:	1e 82       	std	Y+6, r1	; 0x06
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[0][0], gt_insDev.as_dcm[1][0],
    d162:	80 91 00 24 	lds	r24, 0x2400
    d166:	90 91 01 24 	lds	r25, 0x2401
    d16a:	60 91 06 24 	lds	r22, 0x2406
    d16e:	70 91 07 24 	lds	r23, 0x2407
    d172:	2b 81       	ldd	r18, Y+3	; 0x03
    d174:	3c 81       	ldd	r19, Y+4	; 0x04
    d176:	4d 81       	ldd	r20, Y+5	; 0x05
    d178:	5e 81       	ldd	r21, Y+6	; 0x06
    d17a:	02 e0       	ldi	r16, 0x02	; 2
    d17c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d180:	dc 01       	movw	r26, r24
    d182:	cb 01       	movw	r24, r22
    d184:	8b 83       	std	Y+3, r24	; 0x03
    d186:	9c 83       	std	Y+4, r25	; 0x04
    d188:	ad 83       	std	Y+5, r26	; 0x05
    d18a:	be 83       	std	Y+6, r27	; 0x06
   i_temp, 2);
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[0][1], gt_insDev.as_dcm[1][1],
    d18c:	80 91 02 24 	lds	r24, 0x2402
    d190:	90 91 03 24 	lds	r25, 0x2403
    d194:	60 91 08 24 	lds	r22, 0x2408
    d198:	70 91 09 24 	lds	r23, 0x2409
    d19c:	2b 81       	ldd	r18, Y+3	; 0x03
    d19e:	3c 81       	ldd	r19, Y+4	; 0x04
    d1a0:	4d 81       	ldd	r20, Y+5	; 0x05
    d1a2:	5e 81       	ldd	r21, Y+6	; 0x06
    d1a4:	02 e0       	ldi	r16, 0x02	; 2
    d1a6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d1aa:	dc 01       	movw	r26, r24
    d1ac:	cb 01       	movw	r24, r22
    d1ae:	8b 83       	std	Y+3, r24	; 0x03
    d1b0:	9c 83       	std	Y+4, r25	; 0x04
    d1b2:	ad 83       	std	Y+5, r26	; 0x05
    d1b4:	be 83       	std	Y+6, r27	; 0x06
   i_temp, 2);
   i_temp = utl_mac16x16_32( gt_insDev.as_dcm[0][2], gt_insDev.as_dcm[1][2],
    d1b6:	80 91 04 24 	lds	r24, 0x2404
    d1ba:	90 91 05 24 	lds	r25, 0x2405
    d1be:	60 91 0a 24 	lds	r22, 0x240A
    d1c2:	70 91 0b 24 	lds	r23, 0x240B
    d1c6:	2b 81       	ldd	r18, Y+3	; 0x03
    d1c8:	3c 81       	ldd	r19, Y+4	; 0x04
    d1ca:	4d 81       	ldd	r20, Y+5	; 0x05
    d1cc:	5e 81       	ldd	r21, Y+6	; 0x06
    d1ce:	02 e0       	ldi	r16, 0x02	; 2
    d1d0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d1d4:	dc 01       	movw	r26, r24
    d1d6:	cb 01       	movw	r24, r22
    d1d8:	8b 83       	std	Y+3, r24	; 0x03
    d1da:	9c 83       	std	Y+4, r25	; 0x04
    d1dc:	ad 83       	std	Y+5, r26	; 0x05
    d1de:	be 83       	std	Y+6, r27	; 0x06
    d1e0:	8b 81       	ldd	r24, Y+3	; 0x03
    d1e2:	9c 81       	ldd	r25, Y+4	; 0x04
    d1e4:	ad 81       	ldd	r26, Y+5	; 0x05
    d1e6:	be 81       	ldd	r27, Y+6	; 0x06
    d1e8:	8b 8b       	std	Y+19, r24	; 0x13
    d1ea:	9c 8b       	std	Y+20, r25	; 0x14
    d1ec:	ad 8b       	std	Y+21, r26	; 0x15
    d1ee:	be 8b       	std	Y+22, r27	; 0x16
    d1f0:	8e e0       	ldi	r24, 0x0E	; 14
    d1f2:	8f 8b       	std	Y+23, r24	; 0x17
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d1f4:	81 e0       	ldi	r24, 0x01	; 1
    d1f6:	88 8f       	std	Y+24, r24	; 0x18

      if( i_x < 0)
    d1f8:	8b 89       	ldd	r24, Y+19	; 0x13
    d1fa:	9c 89       	ldd	r25, Y+20	; 0x14
    d1fc:	ad 89       	ldd	r26, Y+21	; 0x15
    d1fe:	be 89       	ldd	r27, Y+22	; 0x16
    d200:	bb 23       	and	r27, r27
    d202:	8c f4       	brge	.+34     	; 0xd226 <dcmNormalize+0xf2>
      {
         i_x = -i_x;
    d204:	8b 89       	ldd	r24, Y+19	; 0x13
    d206:	9c 89       	ldd	r25, Y+20	; 0x14
    d208:	ad 89       	ldd	r26, Y+21	; 0x15
    d20a:	be 89       	ldd	r27, Y+22	; 0x16
    d20c:	b0 95       	com	r27
    d20e:	a0 95       	com	r26
    d210:	90 95       	com	r25
    d212:	81 95       	neg	r24
    d214:	9f 4f       	sbci	r25, 0xFF	; 255
    d216:	af 4f       	sbci	r26, 0xFF	; 255
    d218:	bf 4f       	sbci	r27, 0xFF	; 255
    d21a:	8b 8b       	std	Y+19, r24	; 0x13
    d21c:	9c 8b       	std	Y+20, r25	; 0x14
    d21e:	ad 8b       	std	Y+21, r26	; 0x15
    d220:	be 8b       	std	Y+22, r27	; 0x16
         c_sign = -1;
    d222:	8f ef       	ldi	r24, 0xFF	; 255
    d224:	88 8f       	std	Y+24, r24	; 0x18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d226:	8f 89       	ldd	r24, Y+23	; 0x17
    d228:	89 30       	cpi	r24, 0x09	; 9
    d22a:	94 f1       	brlt	.+100    	; 0xd290 <dcmNormalize+0x15c>
    d22c:	8f 89       	ldd	r24, Y+23	; 0x17
    d22e:	81 31       	cpi	r24, 0x11	; 17
    d230:	7c f5       	brge	.+94     	; 0xd290 <dcmNormalize+0x15c>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d232:	8f 89       	ldd	r24, Y+23	; 0x17
    d234:	99 27       	eor	r25, r25
    d236:	87 fd       	sbrc	r24, 7
    d238:	90 95       	com	r25
    d23a:	20 e1       	ldi	r18, 0x10	; 16
    d23c:	30 e0       	ldi	r19, 0x00	; 0
    d23e:	28 1b       	sub	r18, r24
    d240:	39 0b       	sbc	r19, r25
    d242:	8b 89       	ldd	r24, Y+19	; 0x13
    d244:	9c 89       	ldd	r25, Y+20	; 0x14
    d246:	ad 89       	ldd	r26, Y+21	; 0x15
    d248:	be 89       	ldd	r27, Y+22	; 0x16
    d24a:	04 c0       	rjmp	.+8      	; 0xd254 <dcmNormalize+0x120>
    d24c:	88 0f       	add	r24, r24
    d24e:	99 1f       	adc	r25, r25
    d250:	aa 1f       	adc	r26, r26
    d252:	bb 1f       	adc	r27, r27
    d254:	2a 95       	dec	r18
    d256:	d2 f7       	brpl	.-12     	; 0xd24c <dcmNormalize+0x118>
    d258:	9e 01       	movw	r18, r28
    d25a:	2c 56       	subi	r18, 0x6C	; 108
    d25c:	3f 4f       	sbci	r19, 0xFF	; 255
    d25e:	f9 01       	movw	r30, r18
    d260:	80 83       	st	Z, r24
    d262:	91 83       	std	Z+1, r25	; 0x01
    d264:	a2 83       	std	Z+2, r26	; 0x02
    d266:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d268:	88 8d       	ldd	r24, Y+24	; 0x18
    d26a:	8f 3f       	cpi	r24, 0xFF	; 255
    d26c:	51 f4       	brne	.+20     	; 0xd282 <dcmNormalize+0x14e>
              return -t_tWord.as_word16[1];
    d26e:	ce 01       	movw	r24, r28
    d270:	8c 56       	subi	r24, 0x6C	; 108
    d272:	9f 4f       	sbci	r25, 0xFF	; 255
    d274:	fc 01       	movw	r30, r24
    d276:	82 81       	ldd	r24, Z+2	; 0x02
    d278:	93 81       	ldd	r25, Z+3	; 0x03
    d27a:	90 95       	com	r25
    d27c:	81 95       	neg	r24
    d27e:	9f 4f       	sbci	r25, 0xFF	; 255
    d280:	27 c0       	rjmp	.+78     	; 0xd2d0 <dcmNormalize+0x19c>
           else
            return t_tWord.as_word16[1];
    d282:	ce 01       	movw	r24, r28
    d284:	8c 56       	subi	r24, 0x6C	; 108
    d286:	9f 4f       	sbci	r25, 0xFF	; 255
    d288:	fc 01       	movw	r30, r24
    d28a:	82 81       	ldd	r24, Z+2	; 0x02
    d28c:	93 81       	ldd	r25, Z+3	; 0x03
    d28e:	20 c0       	rjmp	.+64     	; 0xd2d0 <dcmNormalize+0x19c>
      }

      i_x = i_x >> c_n;
    d290:	8f 89       	ldd	r24, Y+23	; 0x17
    d292:	28 2f       	mov	r18, r24
    d294:	33 27       	eor	r19, r19
    d296:	27 fd       	sbrc	r18, 7
    d298:	30 95       	com	r19
    d29a:	8b 89       	ldd	r24, Y+19	; 0x13
    d29c:	9c 89       	ldd	r25, Y+20	; 0x14
    d29e:	ad 89       	ldd	r26, Y+21	; 0x15
    d2a0:	be 89       	ldd	r27, Y+22	; 0x16
    d2a2:	02 2e       	mov	r0, r18
    d2a4:	04 c0       	rjmp	.+8      	; 0xd2ae <dcmNormalize+0x17a>
    d2a6:	b5 95       	asr	r27
    d2a8:	a7 95       	ror	r26
    d2aa:	97 95       	ror	r25
    d2ac:	87 95       	ror	r24
    d2ae:	0a 94       	dec	r0
    d2b0:	d2 f7       	brpl	.-12     	; 0xd2a6 <dcmNormalize+0x172>
    d2b2:	8b 8b       	std	Y+19, r24	; 0x13
    d2b4:	9c 8b       	std	Y+20, r25	; 0x14
    d2b6:	ad 8b       	std	Y+21, r26	; 0x15
    d2b8:	be 8b       	std	Y+22, r27	; 0x16
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d2ba:	88 8d       	ldd	r24, Y+24	; 0x18
    d2bc:	8f 3f       	cpi	r24, 0xFF	; 255
    d2be:	31 f4       	brne	.+12     	; 0xd2cc <dcmNormalize+0x198>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d2c0:	8b 89       	ldd	r24, Y+19	; 0x13
    d2c2:	9c 89       	ldd	r25, Y+20	; 0x14
    d2c4:	90 95       	com	r25
    d2c6:	81 95       	neg	r24
    d2c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d2ca:	02 c0       	rjmp	.+4      	; 0xd2d0 <dcmNormalize+0x19c>
       else
           return (int16_t)i_x;
    d2cc:	8b 89       	ldd	r24, Y+19	; 0x13
    d2ce:	9c 89       	ldd	r25, Y+20	; 0x14
   i_temp, 2);
   s_errOvrTwo = utl_rShft32_16( i_temp, 14); /*Q15*/
    d2d0:	89 83       	std	Y+1, r24	; 0x01
    d2d2:	9a 83       	std	Y+2, r25	; 0x02

   i_temp = (int32_t)gt_insDev.as_dcm[0][0] << 15;
    d2d4:	80 91 00 24 	lds	r24, 0x2400
    d2d8:	90 91 01 24 	lds	r25, 0x2401
    d2dc:	aa 27       	eor	r26, r26
    d2de:	97 fd       	sbrc	r25, 7
    d2e0:	a0 95       	com	r26
    d2e2:	ba 2f       	mov	r27, r26
    d2e4:	07 2e       	mov	r0, r23
    d2e6:	7f e0       	ldi	r23, 0x0F	; 15
    d2e8:	88 0f       	add	r24, r24
    d2ea:	99 1f       	adc	r25, r25
    d2ec:	aa 1f       	adc	r26, r26
    d2ee:	bb 1f       	adc	r27, r27
    d2f0:	7a 95       	dec	r23
    d2f2:	d1 f7       	brne	.-12     	; 0xd2e8 <dcmNormalize+0x1b4>
    d2f4:	70 2d       	mov	r23, r0
    d2f6:	8b 83       	std	Y+3, r24	; 0x03
    d2f8:	9c 83       	std	Y+4, r25	; 0x04
    d2fa:	ad 83       	std	Y+5, r26	; 0x05
    d2fc:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[1][0], i_temp, 0);
    d2fe:	89 81       	ldd	r24, Y+1	; 0x01
    d300:	9a 81       	ldd	r25, Y+2	; 0x02
    d302:	90 95       	com	r25
    d304:	81 95       	neg	r24
    d306:	9f 4f       	sbci	r25, 0xFF	; 255
    d308:	60 91 06 24 	lds	r22, 0x2406
    d30c:	70 91 07 24 	lds	r23, 0x2407
    d310:	2b 81       	ldd	r18, Y+3	; 0x03
    d312:	3c 81       	ldd	r19, Y+4	; 0x04
    d314:	4d 81       	ldd	r20, Y+5	; 0x05
    d316:	5e 81       	ldd	r21, Y+6	; 0x06
    d318:	00 e0       	ldi	r16, 0x00	; 0
    d31a:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d31e:	dc 01       	movw	r26, r24
    d320:	cb 01       	movw	r24, r22
    d322:	8b 83       	std	Y+3, r24	; 0x03
    d324:	9c 83       	std	Y+4, r25	; 0x04
    d326:	ad 83       	std	Y+5, r26	; 0x05
    d328:	be 83       	std	Y+6, r27	; 0x06
    d32a:	8b 81       	ldd	r24, Y+3	; 0x03
    d32c:	9c 81       	ldd	r25, Y+4	; 0x04
    d32e:	ad 81       	ldd	r26, Y+5	; 0x05
    d330:	be 81       	ldd	r27, Y+6	; 0x06
    d332:	89 8f       	std	Y+25, r24	; 0x19
    d334:	9a 8f       	std	Y+26, r25	; 0x1a
    d336:	ab 8f       	std	Y+27, r26	; 0x1b
    d338:	bc 8f       	std	Y+28, r27	; 0x1c
    d33a:	80 e1       	ldi	r24, 0x10	; 16
    d33c:	8d 8f       	std	Y+29, r24	; 0x1d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d33e:	81 e0       	ldi	r24, 0x01	; 1
    d340:	8e 8f       	std	Y+30, r24	; 0x1e

      if( i_x < 0)
    d342:	89 8d       	ldd	r24, Y+25	; 0x19
    d344:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d346:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d348:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d34a:	bb 23       	and	r27, r27
    d34c:	8c f4       	brge	.+34     	; 0xd370 <dcmNormalize+0x23c>
      {
         i_x = -i_x;
    d34e:	89 8d       	ldd	r24, Y+25	; 0x19
    d350:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d352:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d354:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d356:	b0 95       	com	r27
    d358:	a0 95       	com	r26
    d35a:	90 95       	com	r25
    d35c:	81 95       	neg	r24
    d35e:	9f 4f       	sbci	r25, 0xFF	; 255
    d360:	af 4f       	sbci	r26, 0xFF	; 255
    d362:	bf 4f       	sbci	r27, 0xFF	; 255
    d364:	89 8f       	std	Y+25, r24	; 0x19
    d366:	9a 8f       	std	Y+26, r25	; 0x1a
    d368:	ab 8f       	std	Y+27, r26	; 0x1b
    d36a:	bc 8f       	std	Y+28, r27	; 0x1c
         c_sign = -1;
    d36c:	8f ef       	ldi	r24, 0xFF	; 255
    d36e:	8e 8f       	std	Y+30, r24	; 0x1e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d372:	89 30       	cpi	r24, 0x09	; 9
    d374:	94 f1       	brlt	.+100    	; 0xd3da <dcmNormalize+0x2a6>
    d376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d378:	81 31       	cpi	r24, 0x11	; 17
    d37a:	7c f5       	brge	.+94     	; 0xd3da <dcmNormalize+0x2a6>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d37c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d37e:	99 27       	eor	r25, r25
    d380:	87 fd       	sbrc	r24, 7
    d382:	90 95       	com	r25
    d384:	20 e1       	ldi	r18, 0x10	; 16
    d386:	30 e0       	ldi	r19, 0x00	; 0
    d388:	28 1b       	sub	r18, r24
    d38a:	39 0b       	sbc	r19, r25
    d38c:	89 8d       	ldd	r24, Y+25	; 0x19
    d38e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d390:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d392:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d394:	04 c0       	rjmp	.+8      	; 0xd39e <dcmNormalize+0x26a>
    d396:	88 0f       	add	r24, r24
    d398:	99 1f       	adc	r25, r25
    d39a:	aa 1f       	adc	r26, r26
    d39c:	bb 1f       	adc	r27, r27
    d39e:	2a 95       	dec	r18
    d3a0:	d2 f7       	brpl	.-12     	; 0xd396 <dcmNormalize+0x262>
    d3a2:	9e 01       	movw	r18, r28
    d3a4:	20 57       	subi	r18, 0x70	; 112
    d3a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d3a8:	f9 01       	movw	r30, r18
    d3aa:	80 83       	st	Z, r24
    d3ac:	91 83       	std	Z+1, r25	; 0x01
    d3ae:	a2 83       	std	Z+2, r26	; 0x02
    d3b0:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d3b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    d3b4:	8f 3f       	cpi	r24, 0xFF	; 255
    d3b6:	51 f4       	brne	.+20     	; 0xd3cc <dcmNormalize+0x298>
              return -t_tWord.as_word16[1];
    d3b8:	ce 01       	movw	r24, r28
    d3ba:	80 57       	subi	r24, 0x70	; 112
    d3bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d3be:	fc 01       	movw	r30, r24
    d3c0:	82 81       	ldd	r24, Z+2	; 0x02
    d3c2:	93 81       	ldd	r25, Z+3	; 0x03
    d3c4:	90 95       	com	r25
    d3c6:	81 95       	neg	r24
    d3c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d3ca:	27 c0       	rjmp	.+78     	; 0xd41a <dcmNormalize+0x2e6>
           else
            return t_tWord.as_word16[1];
    d3cc:	ce 01       	movw	r24, r28
    d3ce:	80 57       	subi	r24, 0x70	; 112
    d3d0:	9f 4f       	sbci	r25, 0xFF	; 255
    d3d2:	fc 01       	movw	r30, r24
    d3d4:	82 81       	ldd	r24, Z+2	; 0x02
    d3d6:	93 81       	ldd	r25, Z+3	; 0x03
    d3d8:	20 c0       	rjmp	.+64     	; 0xd41a <dcmNormalize+0x2e6>
      }

      i_x = i_x >> c_n;
    d3da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d3dc:	28 2f       	mov	r18, r24
    d3de:	33 27       	eor	r19, r19
    d3e0:	27 fd       	sbrc	r18, 7
    d3e2:	30 95       	com	r19
    d3e4:	89 8d       	ldd	r24, Y+25	; 0x19
    d3e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d3e8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d3ea:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d3ec:	02 2e       	mov	r0, r18
    d3ee:	04 c0       	rjmp	.+8      	; 0xd3f8 <dcmNormalize+0x2c4>
    d3f0:	b5 95       	asr	r27
    d3f2:	a7 95       	ror	r26
    d3f4:	97 95       	ror	r25
    d3f6:	87 95       	ror	r24
    d3f8:	0a 94       	dec	r0
    d3fa:	d2 f7       	brpl	.-12     	; 0xd3f0 <dcmNormalize+0x2bc>
    d3fc:	89 8f       	std	Y+25, r24	; 0x19
    d3fe:	9a 8f       	std	Y+26, r25	; 0x1a
    d400:	ab 8f       	std	Y+27, r26	; 0x1b
    d402:	bc 8f       	std	Y+28, r27	; 0x1c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d404:	8e 8d       	ldd	r24, Y+30	; 0x1e
    d406:	8f 3f       	cpi	r24, 0xFF	; 255
    d408:	31 f4       	brne	.+12     	; 0xd416 <dcmNormalize+0x2e2>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d40a:	89 8d       	ldd	r24, Y+25	; 0x19
    d40c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    d40e:	90 95       	com	r25
    d410:	81 95       	neg	r24
    d412:	9f 4f       	sbci	r25, 0xFF	; 255
    d414:	02 c0       	rjmp	.+4      	; 0xd41a <dcmNormalize+0x2e6>
       else
           return (int16_t)i_x;
    d416:	89 8d       	ldd	r24, Y+25	; 0x19
    d418:	9a 8d       	ldd	r25, Y+26	; 0x1a
   as_xOrth[0] = utl_rShft32_16( i_temp, 16); /*Q14*/
    d41a:	9c 01       	movw	r18, r24
    d41c:	ce 01       	movw	r24, r28
    d41e:	82 5a       	subi	r24, 0xA2	; 162
    d420:	9f 4f       	sbci	r25, 0xFF	; 255
    d422:	fc 01       	movw	r30, r24
    d424:	20 83       	st	Z, r18
    d426:	31 83       	std	Z+1, r19	; 0x01
   i_temp = (int32_t)gt_insDev.as_dcm[0][1] << 15;
    d428:	80 91 02 24 	lds	r24, 0x2402
    d42c:	90 91 03 24 	lds	r25, 0x2403
    d430:	aa 27       	eor	r26, r26
    d432:	97 fd       	sbrc	r25, 7
    d434:	a0 95       	com	r26
    d436:	ba 2f       	mov	r27, r26
    d438:	07 2e       	mov	r0, r23
    d43a:	7f e0       	ldi	r23, 0x0F	; 15
    d43c:	88 0f       	add	r24, r24
    d43e:	99 1f       	adc	r25, r25
    d440:	aa 1f       	adc	r26, r26
    d442:	bb 1f       	adc	r27, r27
    d444:	7a 95       	dec	r23
    d446:	d1 f7       	brne	.-12     	; 0xd43c <dcmNormalize+0x308>
    d448:	70 2d       	mov	r23, r0
    d44a:	8b 83       	std	Y+3, r24	; 0x03
    d44c:	9c 83       	std	Y+4, r25	; 0x04
    d44e:	ad 83       	std	Y+5, r26	; 0x05
    d450:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[1][1], i_temp, 0);
    d452:	89 81       	ldd	r24, Y+1	; 0x01
    d454:	9a 81       	ldd	r25, Y+2	; 0x02
    d456:	90 95       	com	r25
    d458:	81 95       	neg	r24
    d45a:	9f 4f       	sbci	r25, 0xFF	; 255
    d45c:	60 91 08 24 	lds	r22, 0x2408
    d460:	70 91 09 24 	lds	r23, 0x2409
    d464:	2b 81       	ldd	r18, Y+3	; 0x03
    d466:	3c 81       	ldd	r19, Y+4	; 0x04
    d468:	4d 81       	ldd	r20, Y+5	; 0x05
    d46a:	5e 81       	ldd	r21, Y+6	; 0x06
    d46c:	00 e0       	ldi	r16, 0x00	; 0
    d46e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d472:	dc 01       	movw	r26, r24
    d474:	cb 01       	movw	r24, r22
    d476:	8b 83       	std	Y+3, r24	; 0x03
    d478:	9c 83       	std	Y+4, r25	; 0x04
    d47a:	ad 83       	std	Y+5, r26	; 0x05
    d47c:	be 83       	std	Y+6, r27	; 0x06
    d47e:	8b 81       	ldd	r24, Y+3	; 0x03
    d480:	9c 81       	ldd	r25, Y+4	; 0x04
    d482:	ad 81       	ldd	r26, Y+5	; 0x05
    d484:	be 81       	ldd	r27, Y+6	; 0x06
    d486:	8f 8f       	std	Y+31, r24	; 0x1f
    d488:	98 a3       	lds	r25, 0x58
    d48a:	a9 a3       	lds	r26, 0x59
    d48c:	ba a3       	lds	r27, 0x5a
    d48e:	80 e1       	ldi	r24, 0x10	; 16
    d490:	8b a3       	lds	r24, 0x5b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d492:	81 e0       	ldi	r24, 0x01	; 1
    d494:	8c a3       	lds	r24, 0x5c

      if( i_x < 0)
    d496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d498:	98 a1       	lds	r25, 0x48
    d49a:	a9 a1       	lds	r26, 0x49
    d49c:	ba a1       	lds	r27, 0x4a
    d49e:	bb 23       	and	r27, r27
    d4a0:	8c f4       	brge	.+34     	; 0xd4c4 <dcmNormalize+0x390>
      {
         i_x = -i_x;
    d4a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d4a4:	98 a1       	lds	r25, 0x48
    d4a6:	a9 a1       	lds	r26, 0x49
    d4a8:	ba a1       	lds	r27, 0x4a
    d4aa:	b0 95       	com	r27
    d4ac:	a0 95       	com	r26
    d4ae:	90 95       	com	r25
    d4b0:	81 95       	neg	r24
    d4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d4b4:	af 4f       	sbci	r26, 0xFF	; 255
    d4b6:	bf 4f       	sbci	r27, 0xFF	; 255
    d4b8:	8f 8f       	std	Y+31, r24	; 0x1f
    d4ba:	98 a3       	lds	r25, 0x58
    d4bc:	a9 a3       	lds	r26, 0x59
    d4be:	ba a3       	lds	r27, 0x5a
         c_sign = -1;
    d4c0:	8f ef       	ldi	r24, 0xFF	; 255
    d4c2:	8c a3       	lds	r24, 0x5c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d4c4:	8b a1       	lds	r24, 0x4b
    d4c6:	89 30       	cpi	r24, 0x09	; 9
    d4c8:	94 f1       	brlt	.+100    	; 0xd52e <dcmNormalize+0x3fa>
    d4ca:	8b a1       	lds	r24, 0x4b
    d4cc:	81 31       	cpi	r24, 0x11	; 17
    d4ce:	7c f5       	brge	.+94     	; 0xd52e <dcmNormalize+0x3fa>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d4d0:	8b a1       	lds	r24, 0x4b
    d4d2:	99 27       	eor	r25, r25
    d4d4:	87 fd       	sbrc	r24, 7
    d4d6:	90 95       	com	r25
    d4d8:	20 e1       	ldi	r18, 0x10	; 16
    d4da:	30 e0       	ldi	r19, 0x00	; 0
    d4dc:	28 1b       	sub	r18, r24
    d4de:	39 0b       	sbc	r19, r25
    d4e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d4e2:	98 a1       	lds	r25, 0x48
    d4e4:	a9 a1       	lds	r26, 0x49
    d4e6:	ba a1       	lds	r27, 0x4a
    d4e8:	04 c0       	rjmp	.+8      	; 0xd4f2 <dcmNormalize+0x3be>
    d4ea:	88 0f       	add	r24, r24
    d4ec:	99 1f       	adc	r25, r25
    d4ee:	aa 1f       	adc	r26, r26
    d4f0:	bb 1f       	adc	r27, r27
    d4f2:	2a 95       	dec	r18
    d4f4:	d2 f7       	brpl	.-12     	; 0xd4ea <dcmNormalize+0x3b6>
    d4f6:	9e 01       	movw	r18, r28
    d4f8:	24 57       	subi	r18, 0x74	; 116
    d4fa:	3f 4f       	sbci	r19, 0xFF	; 255
    d4fc:	f9 01       	movw	r30, r18
    d4fe:	80 83       	st	Z, r24
    d500:	91 83       	std	Z+1, r25	; 0x01
    d502:	a2 83       	std	Z+2, r26	; 0x02
    d504:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d506:	8c a1       	lds	r24, 0x4c
    d508:	8f 3f       	cpi	r24, 0xFF	; 255
    d50a:	51 f4       	brne	.+20     	; 0xd520 <dcmNormalize+0x3ec>
              return -t_tWord.as_word16[1];
    d50c:	ce 01       	movw	r24, r28
    d50e:	84 57       	subi	r24, 0x74	; 116
    d510:	9f 4f       	sbci	r25, 0xFF	; 255
    d512:	fc 01       	movw	r30, r24
    d514:	82 81       	ldd	r24, Z+2	; 0x02
    d516:	93 81       	ldd	r25, Z+3	; 0x03
    d518:	90 95       	com	r25
    d51a:	81 95       	neg	r24
    d51c:	9f 4f       	sbci	r25, 0xFF	; 255
    d51e:	27 c0       	rjmp	.+78     	; 0xd56e <dcmNormalize+0x43a>
           else
            return t_tWord.as_word16[1];
    d520:	ce 01       	movw	r24, r28
    d522:	84 57       	subi	r24, 0x74	; 116
    d524:	9f 4f       	sbci	r25, 0xFF	; 255
    d526:	fc 01       	movw	r30, r24
    d528:	82 81       	ldd	r24, Z+2	; 0x02
    d52a:	93 81       	ldd	r25, Z+3	; 0x03
    d52c:	20 c0       	rjmp	.+64     	; 0xd56e <dcmNormalize+0x43a>
      }

      i_x = i_x >> c_n;
    d52e:	8b a1       	lds	r24, 0x4b
    d530:	28 2f       	mov	r18, r24
    d532:	33 27       	eor	r19, r19
    d534:	27 fd       	sbrc	r18, 7
    d536:	30 95       	com	r19
    d538:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d53a:	98 a1       	lds	r25, 0x48
    d53c:	a9 a1       	lds	r26, 0x49
    d53e:	ba a1       	lds	r27, 0x4a
    d540:	02 2e       	mov	r0, r18
    d542:	04 c0       	rjmp	.+8      	; 0xd54c <dcmNormalize+0x418>
    d544:	b5 95       	asr	r27
    d546:	a7 95       	ror	r26
    d548:	97 95       	ror	r25
    d54a:	87 95       	ror	r24
    d54c:	0a 94       	dec	r0
    d54e:	d2 f7       	brpl	.-12     	; 0xd544 <dcmNormalize+0x410>
    d550:	8f 8f       	std	Y+31, r24	; 0x1f
    d552:	98 a3       	lds	r25, 0x58
    d554:	a9 a3       	lds	r26, 0x59
    d556:	ba a3       	lds	r27, 0x5a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d558:	8c a1       	lds	r24, 0x4c
    d55a:	8f 3f       	cpi	r24, 0xFF	; 255
    d55c:	31 f4       	brne	.+12     	; 0xd56a <dcmNormalize+0x436>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d55e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d560:	98 a1       	lds	r25, 0x48
    d562:	90 95       	com	r25
    d564:	81 95       	neg	r24
    d566:	9f 4f       	sbci	r25, 0xFF	; 255
    d568:	02 c0       	rjmp	.+4      	; 0xd56e <dcmNormalize+0x43a>
       else
           return (int16_t)i_x;
    d56a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d56c:	98 a1       	lds	r25, 0x48
   as_xOrth[1] = utl_rShft32_16( i_temp, 16); /*Q14*/
    d56e:	9c 01       	movw	r18, r24
    d570:	ce 01       	movw	r24, r28
    d572:	82 5a       	subi	r24, 0xA2	; 162
    d574:	9f 4f       	sbci	r25, 0xFF	; 255
    d576:	fc 01       	movw	r30, r24
    d578:	22 83       	std	Z+2, r18	; 0x02
    d57a:	33 83       	std	Z+3, r19	; 0x03
   i_temp = (int32_t)gt_insDev.as_dcm[0][2] << 15;
    d57c:	80 91 04 24 	lds	r24, 0x2404
    d580:	90 91 05 24 	lds	r25, 0x2405
    d584:	aa 27       	eor	r26, r26
    d586:	97 fd       	sbrc	r25, 7
    d588:	a0 95       	com	r26
    d58a:	ba 2f       	mov	r27, r26
    d58c:	07 2e       	mov	r0, r23
    d58e:	7f e0       	ldi	r23, 0x0F	; 15
    d590:	88 0f       	add	r24, r24
    d592:	99 1f       	adc	r25, r25
    d594:	aa 1f       	adc	r26, r26
    d596:	bb 1f       	adc	r27, r27
    d598:	7a 95       	dec	r23
    d59a:	d1 f7       	brne	.-12     	; 0xd590 <dcmNormalize+0x45c>
    d59c:	70 2d       	mov	r23, r0
    d59e:	8b 83       	std	Y+3, r24	; 0x03
    d5a0:	9c 83       	std	Y+4, r25	; 0x04
    d5a2:	ad 83       	std	Y+5, r26	; 0x05
    d5a4:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[1][2], i_temp, 0);
    d5a6:	89 81       	ldd	r24, Y+1	; 0x01
    d5a8:	9a 81       	ldd	r25, Y+2	; 0x02
    d5aa:	90 95       	com	r25
    d5ac:	81 95       	neg	r24
    d5ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d5b0:	60 91 0a 24 	lds	r22, 0x240A
    d5b4:	70 91 0b 24 	lds	r23, 0x240B
    d5b8:	2b 81       	ldd	r18, Y+3	; 0x03
    d5ba:	3c 81       	ldd	r19, Y+4	; 0x04
    d5bc:	4d 81       	ldd	r20, Y+5	; 0x05
    d5be:	5e 81       	ldd	r21, Y+6	; 0x06
    d5c0:	00 e0       	ldi	r16, 0x00	; 0
    d5c2:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d5c6:	dc 01       	movw	r26, r24
    d5c8:	cb 01       	movw	r24, r22
    d5ca:	8b 83       	std	Y+3, r24	; 0x03
    d5cc:	9c 83       	std	Y+4, r25	; 0x04
    d5ce:	ad 83       	std	Y+5, r26	; 0x05
    d5d0:	be 83       	std	Y+6, r27	; 0x06
    d5d2:	8b 81       	ldd	r24, Y+3	; 0x03
    d5d4:	9c 81       	ldd	r25, Y+4	; 0x04
    d5d6:	ad 81       	ldd	r26, Y+5	; 0x05
    d5d8:	be 81       	ldd	r27, Y+6	; 0x06
    d5da:	8d a3       	lds	r24, 0x5d
    d5dc:	9e a3       	lds	r25, 0x5e
    d5de:	af a3       	lds	r26, 0x5f
    d5e0:	b8 a7       	lds	r27, 0x78
    d5e2:	80 e1       	ldi	r24, 0x10	; 16
    d5e4:	89 a7       	lds	r24, 0x79
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d5e6:	81 e0       	ldi	r24, 0x01	; 1
    d5e8:	8a a7       	lds	r24, 0x7a

      if( i_x < 0)
    d5ea:	8d a1       	lds	r24, 0x4d
    d5ec:	9e a1       	lds	r25, 0x4e
    d5ee:	af a1       	lds	r26, 0x4f
    d5f0:	b8 a5       	lds	r27, 0x68
    d5f2:	bb 23       	and	r27, r27
    d5f4:	8c f4       	brge	.+34     	; 0xd618 <dcmNormalize+0x4e4>
      {
         i_x = -i_x;
    d5f6:	8d a1       	lds	r24, 0x4d
    d5f8:	9e a1       	lds	r25, 0x4e
    d5fa:	af a1       	lds	r26, 0x4f
    d5fc:	b8 a5       	lds	r27, 0x68
    d5fe:	b0 95       	com	r27
    d600:	a0 95       	com	r26
    d602:	90 95       	com	r25
    d604:	81 95       	neg	r24
    d606:	9f 4f       	sbci	r25, 0xFF	; 255
    d608:	af 4f       	sbci	r26, 0xFF	; 255
    d60a:	bf 4f       	sbci	r27, 0xFF	; 255
    d60c:	8d a3       	lds	r24, 0x5d
    d60e:	9e a3       	lds	r25, 0x5e
    d610:	af a3       	lds	r26, 0x5f
    d612:	b8 a7       	lds	r27, 0x78
         c_sign = -1;
    d614:	8f ef       	ldi	r24, 0xFF	; 255
    d616:	8a a7       	lds	r24, 0x7a
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d618:	89 a5       	lds	r24, 0x69
    d61a:	89 30       	cpi	r24, 0x09	; 9
    d61c:	94 f1       	brlt	.+100    	; 0xd682 <dcmNormalize+0x54e>
    d61e:	89 a5       	lds	r24, 0x69
    d620:	81 31       	cpi	r24, 0x11	; 17
    d622:	7c f5       	brge	.+94     	; 0xd682 <dcmNormalize+0x54e>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d624:	89 a5       	lds	r24, 0x69
    d626:	99 27       	eor	r25, r25
    d628:	87 fd       	sbrc	r24, 7
    d62a:	90 95       	com	r25
    d62c:	20 e1       	ldi	r18, 0x10	; 16
    d62e:	30 e0       	ldi	r19, 0x00	; 0
    d630:	28 1b       	sub	r18, r24
    d632:	39 0b       	sbc	r19, r25
    d634:	8d a1       	lds	r24, 0x4d
    d636:	9e a1       	lds	r25, 0x4e
    d638:	af a1       	lds	r26, 0x4f
    d63a:	b8 a5       	lds	r27, 0x68
    d63c:	04 c0       	rjmp	.+8      	; 0xd646 <dcmNormalize+0x512>
    d63e:	88 0f       	add	r24, r24
    d640:	99 1f       	adc	r25, r25
    d642:	aa 1f       	adc	r26, r26
    d644:	bb 1f       	adc	r27, r27
    d646:	2a 95       	dec	r18
    d648:	d2 f7       	brpl	.-12     	; 0xd63e <dcmNormalize+0x50a>
    d64a:	9e 01       	movw	r18, r28
    d64c:	28 57       	subi	r18, 0x78	; 120
    d64e:	3f 4f       	sbci	r19, 0xFF	; 255
    d650:	f9 01       	movw	r30, r18
    d652:	80 83       	st	Z, r24
    d654:	91 83       	std	Z+1, r25	; 0x01
    d656:	a2 83       	std	Z+2, r26	; 0x02
    d658:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d65a:	8a a5       	lds	r24, 0x6a
    d65c:	8f 3f       	cpi	r24, 0xFF	; 255
    d65e:	51 f4       	brne	.+20     	; 0xd674 <dcmNormalize+0x540>
              return -t_tWord.as_word16[1];
    d660:	ce 01       	movw	r24, r28
    d662:	88 57       	subi	r24, 0x78	; 120
    d664:	9f 4f       	sbci	r25, 0xFF	; 255
    d666:	fc 01       	movw	r30, r24
    d668:	82 81       	ldd	r24, Z+2	; 0x02
    d66a:	93 81       	ldd	r25, Z+3	; 0x03
    d66c:	90 95       	com	r25
    d66e:	81 95       	neg	r24
    d670:	9f 4f       	sbci	r25, 0xFF	; 255
    d672:	27 c0       	rjmp	.+78     	; 0xd6c2 <dcmNormalize+0x58e>
           else
            return t_tWord.as_word16[1];
    d674:	ce 01       	movw	r24, r28
    d676:	88 57       	subi	r24, 0x78	; 120
    d678:	9f 4f       	sbci	r25, 0xFF	; 255
    d67a:	fc 01       	movw	r30, r24
    d67c:	82 81       	ldd	r24, Z+2	; 0x02
    d67e:	93 81       	ldd	r25, Z+3	; 0x03
    d680:	20 c0       	rjmp	.+64     	; 0xd6c2 <dcmNormalize+0x58e>
      }

      i_x = i_x >> c_n;
    d682:	89 a5       	lds	r24, 0x69
    d684:	28 2f       	mov	r18, r24
    d686:	33 27       	eor	r19, r19
    d688:	27 fd       	sbrc	r18, 7
    d68a:	30 95       	com	r19
    d68c:	8d a1       	lds	r24, 0x4d
    d68e:	9e a1       	lds	r25, 0x4e
    d690:	af a1       	lds	r26, 0x4f
    d692:	b8 a5       	lds	r27, 0x68
    d694:	02 2e       	mov	r0, r18
    d696:	04 c0       	rjmp	.+8      	; 0xd6a0 <dcmNormalize+0x56c>
    d698:	b5 95       	asr	r27
    d69a:	a7 95       	ror	r26
    d69c:	97 95       	ror	r25
    d69e:	87 95       	ror	r24
    d6a0:	0a 94       	dec	r0
    d6a2:	d2 f7       	brpl	.-12     	; 0xd698 <dcmNormalize+0x564>
    d6a4:	8d a3       	lds	r24, 0x5d
    d6a6:	9e a3       	lds	r25, 0x5e
    d6a8:	af a3       	lds	r26, 0x5f
    d6aa:	b8 a7       	lds	r27, 0x78
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d6ac:	8a a5       	lds	r24, 0x6a
    d6ae:	8f 3f       	cpi	r24, 0xFF	; 255
    d6b0:	31 f4       	brne	.+12     	; 0xd6be <dcmNormalize+0x58a>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d6b2:	8d a1       	lds	r24, 0x4d
    d6b4:	9e a1       	lds	r25, 0x4e
    d6b6:	90 95       	com	r25
    d6b8:	81 95       	neg	r24
    d6ba:	9f 4f       	sbci	r25, 0xFF	; 255
    d6bc:	02 c0       	rjmp	.+4      	; 0xd6c2 <dcmNormalize+0x58e>
       else
           return (int16_t)i_x;
    d6be:	8d a1       	lds	r24, 0x4d
    d6c0:	9e a1       	lds	r25, 0x4e
   as_xOrth[2] = utl_rShft32_16( i_temp, 16); /*Q14*/
    d6c2:	9c 01       	movw	r18, r24
    d6c4:	ce 01       	movw	r24, r28
    d6c6:	82 5a       	subi	r24, 0xA2	; 162
    d6c8:	9f 4f       	sbci	r25, 0xFF	; 255
    d6ca:	fc 01       	movw	r30, r24
    d6cc:	24 83       	std	Z+4, r18	; 0x04
    d6ce:	35 83       	std	Z+5, r19	; 0x05

   i_temp = (int32_t)gt_insDev.as_dcm[1][0] << 15;
    d6d0:	80 91 06 24 	lds	r24, 0x2406
    d6d4:	90 91 07 24 	lds	r25, 0x2407
    d6d8:	aa 27       	eor	r26, r26
    d6da:	97 fd       	sbrc	r25, 7
    d6dc:	a0 95       	com	r26
    d6de:	ba 2f       	mov	r27, r26
    d6e0:	07 2e       	mov	r0, r23
    d6e2:	7f e0       	ldi	r23, 0x0F	; 15
    d6e4:	88 0f       	add	r24, r24
    d6e6:	99 1f       	adc	r25, r25
    d6e8:	aa 1f       	adc	r26, r26
    d6ea:	bb 1f       	adc	r27, r27
    d6ec:	7a 95       	dec	r23
    d6ee:	d1 f7       	brne	.-12     	; 0xd6e4 <dcmNormalize+0x5b0>
    d6f0:	70 2d       	mov	r23, r0
    d6f2:	8b 83       	std	Y+3, r24	; 0x03
    d6f4:	9c 83       	std	Y+4, r25	; 0x04
    d6f6:	ad 83       	std	Y+5, r26	; 0x05
    d6f8:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[0][0], i_temp, 0);
    d6fa:	89 81       	ldd	r24, Y+1	; 0x01
    d6fc:	9a 81       	ldd	r25, Y+2	; 0x02
    d6fe:	90 95       	com	r25
    d700:	81 95       	neg	r24
    d702:	9f 4f       	sbci	r25, 0xFF	; 255
    d704:	60 91 00 24 	lds	r22, 0x2400
    d708:	70 91 01 24 	lds	r23, 0x2401
    d70c:	2b 81       	ldd	r18, Y+3	; 0x03
    d70e:	3c 81       	ldd	r19, Y+4	; 0x04
    d710:	4d 81       	ldd	r20, Y+5	; 0x05
    d712:	5e 81       	ldd	r21, Y+6	; 0x06
    d714:	00 e0       	ldi	r16, 0x00	; 0
    d716:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d71a:	dc 01       	movw	r26, r24
    d71c:	cb 01       	movw	r24, r22
    d71e:	8b 83       	std	Y+3, r24	; 0x03
    d720:	9c 83       	std	Y+4, r25	; 0x04
    d722:	ad 83       	std	Y+5, r26	; 0x05
    d724:	be 83       	std	Y+6, r27	; 0x06
    d726:	8b 81       	ldd	r24, Y+3	; 0x03
    d728:	9c 81       	ldd	r25, Y+4	; 0x04
    d72a:	ad 81       	ldd	r26, Y+5	; 0x05
    d72c:	be 81       	ldd	r27, Y+6	; 0x06
    d72e:	8b a7       	lds	r24, 0x7b
    d730:	9c a7       	lds	r25, 0x7c
    d732:	ad a7       	lds	r26, 0x7d
    d734:	be a7       	lds	r27, 0x7e
    d736:	80 e1       	ldi	r24, 0x10	; 16
    d738:	8f a7       	lds	r24, 0x7f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d73a:	81 e0       	ldi	r24, 0x01	; 1
    d73c:	88 ab       	sts	0x58, r24

      if( i_x < 0)
    d73e:	8b a5       	lds	r24, 0x6b
    d740:	9c a5       	lds	r25, 0x6c
    d742:	ad a5       	lds	r26, 0x6d
    d744:	be a5       	lds	r27, 0x6e
    d746:	bb 23       	and	r27, r27
    d748:	8c f4       	brge	.+34     	; 0xd76c <dcmNormalize+0x638>
      {
         i_x = -i_x;
    d74a:	8b a5       	lds	r24, 0x6b
    d74c:	9c a5       	lds	r25, 0x6c
    d74e:	ad a5       	lds	r26, 0x6d
    d750:	be a5       	lds	r27, 0x6e
    d752:	b0 95       	com	r27
    d754:	a0 95       	com	r26
    d756:	90 95       	com	r25
    d758:	81 95       	neg	r24
    d75a:	9f 4f       	sbci	r25, 0xFF	; 255
    d75c:	af 4f       	sbci	r26, 0xFF	; 255
    d75e:	bf 4f       	sbci	r27, 0xFF	; 255
    d760:	8b a7       	lds	r24, 0x7b
    d762:	9c a7       	lds	r25, 0x7c
    d764:	ad a7       	lds	r26, 0x7d
    d766:	be a7       	lds	r27, 0x7e
         c_sign = -1;
    d768:	8f ef       	ldi	r24, 0xFF	; 255
    d76a:	88 ab       	sts	0x58, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d76c:	8f a5       	lds	r24, 0x6f
    d76e:	89 30       	cpi	r24, 0x09	; 9
    d770:	94 f1       	brlt	.+100    	; 0xd7d6 <dcmNormalize+0x6a2>
    d772:	8f a5       	lds	r24, 0x6f
    d774:	81 31       	cpi	r24, 0x11	; 17
    d776:	7c f5       	brge	.+94     	; 0xd7d6 <dcmNormalize+0x6a2>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d778:	8f a5       	lds	r24, 0x6f
    d77a:	99 27       	eor	r25, r25
    d77c:	87 fd       	sbrc	r24, 7
    d77e:	90 95       	com	r25
    d780:	20 e1       	ldi	r18, 0x10	; 16
    d782:	30 e0       	ldi	r19, 0x00	; 0
    d784:	28 1b       	sub	r18, r24
    d786:	39 0b       	sbc	r19, r25
    d788:	8b a5       	lds	r24, 0x6b
    d78a:	9c a5       	lds	r25, 0x6c
    d78c:	ad a5       	lds	r26, 0x6d
    d78e:	be a5       	lds	r27, 0x6e
    d790:	04 c0       	rjmp	.+8      	; 0xd79a <dcmNormalize+0x666>
    d792:	88 0f       	add	r24, r24
    d794:	99 1f       	adc	r25, r25
    d796:	aa 1f       	adc	r26, r26
    d798:	bb 1f       	adc	r27, r27
    d79a:	2a 95       	dec	r18
    d79c:	d2 f7       	brpl	.-12     	; 0xd792 <dcmNormalize+0x65e>
    d79e:	9e 01       	movw	r18, r28
    d7a0:	2c 57       	subi	r18, 0x7C	; 124
    d7a2:	3f 4f       	sbci	r19, 0xFF	; 255
    d7a4:	f9 01       	movw	r30, r18
    d7a6:	80 83       	st	Z, r24
    d7a8:	91 83       	std	Z+1, r25	; 0x01
    d7aa:	a2 83       	std	Z+2, r26	; 0x02
    d7ac:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d7ae:	88 a9       	sts	0x48, r24
    d7b0:	8f 3f       	cpi	r24, 0xFF	; 255
    d7b2:	51 f4       	brne	.+20     	; 0xd7c8 <dcmNormalize+0x694>
              return -t_tWord.as_word16[1];
    d7b4:	ce 01       	movw	r24, r28
    d7b6:	8c 57       	subi	r24, 0x7C	; 124
    d7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    d7ba:	fc 01       	movw	r30, r24
    d7bc:	82 81       	ldd	r24, Z+2	; 0x02
    d7be:	93 81       	ldd	r25, Z+3	; 0x03
    d7c0:	90 95       	com	r25
    d7c2:	81 95       	neg	r24
    d7c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d7c6:	27 c0       	rjmp	.+78     	; 0xd816 <dcmNormalize+0x6e2>
           else
            return t_tWord.as_word16[1];
    d7c8:	ce 01       	movw	r24, r28
    d7ca:	8c 57       	subi	r24, 0x7C	; 124
    d7cc:	9f 4f       	sbci	r25, 0xFF	; 255
    d7ce:	fc 01       	movw	r30, r24
    d7d0:	82 81       	ldd	r24, Z+2	; 0x02
    d7d2:	93 81       	ldd	r25, Z+3	; 0x03
    d7d4:	20 c0       	rjmp	.+64     	; 0xd816 <dcmNormalize+0x6e2>
      }

      i_x = i_x >> c_n;
    d7d6:	8f a5       	lds	r24, 0x6f
    d7d8:	28 2f       	mov	r18, r24
    d7da:	33 27       	eor	r19, r19
    d7dc:	27 fd       	sbrc	r18, 7
    d7de:	30 95       	com	r19
    d7e0:	8b a5       	lds	r24, 0x6b
    d7e2:	9c a5       	lds	r25, 0x6c
    d7e4:	ad a5       	lds	r26, 0x6d
    d7e6:	be a5       	lds	r27, 0x6e
    d7e8:	02 2e       	mov	r0, r18
    d7ea:	04 c0       	rjmp	.+8      	; 0xd7f4 <dcmNormalize+0x6c0>
    d7ec:	b5 95       	asr	r27
    d7ee:	a7 95       	ror	r26
    d7f0:	97 95       	ror	r25
    d7f2:	87 95       	ror	r24
    d7f4:	0a 94       	dec	r0
    d7f6:	d2 f7       	brpl	.-12     	; 0xd7ec <dcmNormalize+0x6b8>
    d7f8:	8b a7       	lds	r24, 0x7b
    d7fa:	9c a7       	lds	r25, 0x7c
    d7fc:	ad a7       	lds	r26, 0x7d
    d7fe:	be a7       	lds	r27, 0x7e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d800:	88 a9       	sts	0x48, r24
    d802:	8f 3f       	cpi	r24, 0xFF	; 255
    d804:	31 f4       	brne	.+12     	; 0xd812 <dcmNormalize+0x6de>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d806:	8b a5       	lds	r24, 0x6b
    d808:	9c a5       	lds	r25, 0x6c
    d80a:	90 95       	com	r25
    d80c:	81 95       	neg	r24
    d80e:	9f 4f       	sbci	r25, 0xFF	; 255
    d810:	02 c0       	rjmp	.+4      	; 0xd816 <dcmNormalize+0x6e2>
       else
           return (int16_t)i_x;
    d812:	8b a5       	lds	r24, 0x6b
    d814:	9c a5       	lds	r25, 0x6c
   as_yOrth[0] = utl_rShft32_16( i_temp, 16); /*Q14*/
    d816:	9c 01       	movw	r18, r24
    d818:	ce 01       	movw	r24, r28
    d81a:	8c 59       	subi	r24, 0x9C	; 156
    d81c:	9f 4f       	sbci	r25, 0xFF	; 255
    d81e:	fc 01       	movw	r30, r24
    d820:	20 83       	st	Z, r18
    d822:	31 83       	std	Z+1, r19	; 0x01
   i_temp = (int32_t)gt_insDev.as_dcm[1][1] << 15;
    d824:	80 91 08 24 	lds	r24, 0x2408
    d828:	90 91 09 24 	lds	r25, 0x2409
    d82c:	aa 27       	eor	r26, r26
    d82e:	97 fd       	sbrc	r25, 7
    d830:	a0 95       	com	r26
    d832:	ba 2f       	mov	r27, r26
    d834:	07 2e       	mov	r0, r23
    d836:	7f e0       	ldi	r23, 0x0F	; 15
    d838:	88 0f       	add	r24, r24
    d83a:	99 1f       	adc	r25, r25
    d83c:	aa 1f       	adc	r26, r26
    d83e:	bb 1f       	adc	r27, r27
    d840:	7a 95       	dec	r23
    d842:	d1 f7       	brne	.-12     	; 0xd838 <dcmNormalize+0x704>
    d844:	70 2d       	mov	r23, r0
    d846:	8b 83       	std	Y+3, r24	; 0x03
    d848:	9c 83       	std	Y+4, r25	; 0x04
    d84a:	ad 83       	std	Y+5, r26	; 0x05
    d84c:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[0][1], i_temp, 0);
    d84e:	89 81       	ldd	r24, Y+1	; 0x01
    d850:	9a 81       	ldd	r25, Y+2	; 0x02
    d852:	90 95       	com	r25
    d854:	81 95       	neg	r24
    d856:	9f 4f       	sbci	r25, 0xFF	; 255
    d858:	60 91 02 24 	lds	r22, 0x2402
    d85c:	70 91 03 24 	lds	r23, 0x2403
    d860:	2b 81       	ldd	r18, Y+3	; 0x03
    d862:	3c 81       	ldd	r19, Y+4	; 0x04
    d864:	4d 81       	ldd	r20, Y+5	; 0x05
    d866:	5e 81       	ldd	r21, Y+6	; 0x06
    d868:	00 e0       	ldi	r16, 0x00	; 0
    d86a:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d86e:	dc 01       	movw	r26, r24
    d870:	cb 01       	movw	r24, r22
    d872:	8b 83       	std	Y+3, r24	; 0x03
    d874:	9c 83       	std	Y+4, r25	; 0x04
    d876:	ad 83       	std	Y+5, r26	; 0x05
    d878:	be 83       	std	Y+6, r27	; 0x06
    d87a:	8b 81       	ldd	r24, Y+3	; 0x03
    d87c:	9c 81       	ldd	r25, Y+4	; 0x04
    d87e:	ad 81       	ldd	r26, Y+5	; 0x05
    d880:	be 81       	ldd	r27, Y+6	; 0x06
    d882:	89 ab       	sts	0x59, r24
    d884:	9a ab       	sts	0x5a, r25
    d886:	ab ab       	sts	0x5b, r26
    d888:	bc ab       	sts	0x5c, r27
    d88a:	80 e1       	ldi	r24, 0x10	; 16
    d88c:	8d ab       	sts	0x5d, r24
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d88e:	81 e0       	ldi	r24, 0x01	; 1
    d890:	8e ab       	sts	0x5e, r24

      if( i_x < 0)
    d892:	89 a9       	sts	0x49, r24
    d894:	9a a9       	sts	0x4a, r25
    d896:	ab a9       	sts	0x4b, r26
    d898:	bc a9       	sts	0x4c, r27
    d89a:	bb 23       	and	r27, r27
    d89c:	8c f4       	brge	.+34     	; 0xd8c0 <dcmNormalize+0x78c>
      {
         i_x = -i_x;
    d89e:	89 a9       	sts	0x49, r24
    d8a0:	9a a9       	sts	0x4a, r25
    d8a2:	ab a9       	sts	0x4b, r26
    d8a4:	bc a9       	sts	0x4c, r27
    d8a6:	b0 95       	com	r27
    d8a8:	a0 95       	com	r26
    d8aa:	90 95       	com	r25
    d8ac:	81 95       	neg	r24
    d8ae:	9f 4f       	sbci	r25, 0xFF	; 255
    d8b0:	af 4f       	sbci	r26, 0xFF	; 255
    d8b2:	bf 4f       	sbci	r27, 0xFF	; 255
    d8b4:	89 ab       	sts	0x59, r24
    d8b6:	9a ab       	sts	0x5a, r25
    d8b8:	ab ab       	sts	0x5b, r26
    d8ba:	bc ab       	sts	0x5c, r27
         c_sign = -1;
    d8bc:	8f ef       	ldi	r24, 0xFF	; 255
    d8be:	8e ab       	sts	0x5e, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    d8c0:	8d a9       	sts	0x4d, r24
    d8c2:	89 30       	cpi	r24, 0x09	; 9
    d8c4:	94 f1       	brlt	.+100    	; 0xd92a <dcmNormalize+0x7f6>
    d8c6:	8d a9       	sts	0x4d, r24
    d8c8:	81 31       	cpi	r24, 0x11	; 17
    d8ca:	7c f5       	brge	.+94     	; 0xd92a <dcmNormalize+0x7f6>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    d8cc:	8d a9       	sts	0x4d, r24
    d8ce:	99 27       	eor	r25, r25
    d8d0:	87 fd       	sbrc	r24, 7
    d8d2:	90 95       	com	r25
    d8d4:	20 e1       	ldi	r18, 0x10	; 16
    d8d6:	30 e0       	ldi	r19, 0x00	; 0
    d8d8:	28 1b       	sub	r18, r24
    d8da:	39 0b       	sbc	r19, r25
    d8dc:	89 a9       	sts	0x49, r24
    d8de:	9a a9       	sts	0x4a, r25
    d8e0:	ab a9       	sts	0x4b, r26
    d8e2:	bc a9       	sts	0x4c, r27
    d8e4:	04 c0       	rjmp	.+8      	; 0xd8ee <dcmNormalize+0x7ba>
    d8e6:	88 0f       	add	r24, r24
    d8e8:	99 1f       	adc	r25, r25
    d8ea:	aa 1f       	adc	r26, r26
    d8ec:	bb 1f       	adc	r27, r27
    d8ee:	2a 95       	dec	r18
    d8f0:	d2 f7       	brpl	.-12     	; 0xd8e6 <dcmNormalize+0x7b2>
    d8f2:	9e 01       	movw	r18, r28
    d8f4:	20 58       	subi	r18, 0x80	; 128
    d8f6:	3f 4f       	sbci	r19, 0xFF	; 255
    d8f8:	f9 01       	movw	r30, r18
    d8fa:	80 83       	st	Z, r24
    d8fc:	91 83       	std	Z+1, r25	; 0x01
    d8fe:	a2 83       	std	Z+2, r26	; 0x02
    d900:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    d902:	8e a9       	sts	0x4e, r24
    d904:	8f 3f       	cpi	r24, 0xFF	; 255
    d906:	51 f4       	brne	.+20     	; 0xd91c <dcmNormalize+0x7e8>
              return -t_tWord.as_word16[1];
    d908:	ce 01       	movw	r24, r28
    d90a:	80 58       	subi	r24, 0x80	; 128
    d90c:	9f 4f       	sbci	r25, 0xFF	; 255
    d90e:	fc 01       	movw	r30, r24
    d910:	82 81       	ldd	r24, Z+2	; 0x02
    d912:	93 81       	ldd	r25, Z+3	; 0x03
    d914:	90 95       	com	r25
    d916:	81 95       	neg	r24
    d918:	9f 4f       	sbci	r25, 0xFF	; 255
    d91a:	27 c0       	rjmp	.+78     	; 0xd96a <dcmNormalize+0x836>
           else
            return t_tWord.as_word16[1];
    d91c:	ce 01       	movw	r24, r28
    d91e:	80 58       	subi	r24, 0x80	; 128
    d920:	9f 4f       	sbci	r25, 0xFF	; 255
    d922:	fc 01       	movw	r30, r24
    d924:	82 81       	ldd	r24, Z+2	; 0x02
    d926:	93 81       	ldd	r25, Z+3	; 0x03
    d928:	20 c0       	rjmp	.+64     	; 0xd96a <dcmNormalize+0x836>
      }

      i_x = i_x >> c_n;
    d92a:	8d a9       	sts	0x4d, r24
    d92c:	28 2f       	mov	r18, r24
    d92e:	33 27       	eor	r19, r19
    d930:	27 fd       	sbrc	r18, 7
    d932:	30 95       	com	r19
    d934:	89 a9       	sts	0x49, r24
    d936:	9a a9       	sts	0x4a, r25
    d938:	ab a9       	sts	0x4b, r26
    d93a:	bc a9       	sts	0x4c, r27
    d93c:	02 2e       	mov	r0, r18
    d93e:	04 c0       	rjmp	.+8      	; 0xd948 <dcmNormalize+0x814>
    d940:	b5 95       	asr	r27
    d942:	a7 95       	ror	r26
    d944:	97 95       	ror	r25
    d946:	87 95       	ror	r24
    d948:	0a 94       	dec	r0
    d94a:	d2 f7       	brpl	.-12     	; 0xd940 <dcmNormalize+0x80c>
    d94c:	89 ab       	sts	0x59, r24
    d94e:	9a ab       	sts	0x5a, r25
    d950:	ab ab       	sts	0x5b, r26
    d952:	bc ab       	sts	0x5c, r27
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    d954:	8e a9       	sts	0x4e, r24
    d956:	8f 3f       	cpi	r24, 0xFF	; 255
    d958:	31 f4       	brne	.+12     	; 0xd966 <dcmNormalize+0x832>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    d95a:	89 a9       	sts	0x49, r24
    d95c:	9a a9       	sts	0x4a, r25
    d95e:	90 95       	com	r25
    d960:	81 95       	neg	r24
    d962:	9f 4f       	sbci	r25, 0xFF	; 255
    d964:	02 c0       	rjmp	.+4      	; 0xd96a <dcmNormalize+0x836>
       else
           return (int16_t)i_x;
    d966:	89 a9       	sts	0x49, r24
    d968:	9a a9       	sts	0x4a, r25
   as_yOrth[1] = utl_rShft32_16( i_temp, 16); /*Q14*/
    d96a:	9c 01       	movw	r18, r24
    d96c:	ce 01       	movw	r24, r28
    d96e:	8c 59       	subi	r24, 0x9C	; 156
    d970:	9f 4f       	sbci	r25, 0xFF	; 255
    d972:	fc 01       	movw	r30, r24
    d974:	22 83       	std	Z+2, r18	; 0x02
    d976:	33 83       	std	Z+3, r19	; 0x03
   i_temp = (int32_t)gt_insDev.as_dcm[1][2] << 15;
    d978:	80 91 0a 24 	lds	r24, 0x240A
    d97c:	90 91 0b 24 	lds	r25, 0x240B
    d980:	aa 27       	eor	r26, r26
    d982:	97 fd       	sbrc	r25, 7
    d984:	a0 95       	com	r26
    d986:	ba 2f       	mov	r27, r26
    d988:	07 2e       	mov	r0, r23
    d98a:	7f e0       	ldi	r23, 0x0F	; 15
    d98c:	88 0f       	add	r24, r24
    d98e:	99 1f       	adc	r25, r25
    d990:	aa 1f       	adc	r26, r26
    d992:	bb 1f       	adc	r27, r27
    d994:	7a 95       	dec	r23
    d996:	d1 f7       	brne	.-12     	; 0xd98c <dcmNormalize+0x858>
    d998:	70 2d       	mov	r23, r0
    d99a:	8b 83       	std	Y+3, r24	; 0x03
    d99c:	9c 83       	std	Y+4, r25	; 0x04
    d99e:	ad 83       	std	Y+5, r26	; 0x05
    d9a0:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -s_errOvrTwo, gt_insDev.as_dcm[0][2], i_temp, 0);
    d9a2:	89 81       	ldd	r24, Y+1	; 0x01
    d9a4:	9a 81       	ldd	r25, Y+2	; 0x02
    d9a6:	90 95       	com	r25
    d9a8:	81 95       	neg	r24
    d9aa:	9f 4f       	sbci	r25, 0xFF	; 255
    d9ac:	60 91 04 24 	lds	r22, 0x2404
    d9b0:	70 91 05 24 	lds	r23, 0x2405
    d9b4:	2b 81       	ldd	r18, Y+3	; 0x03
    d9b6:	3c 81       	ldd	r19, Y+4	; 0x04
    d9b8:	4d 81       	ldd	r20, Y+5	; 0x05
    d9ba:	5e 81       	ldd	r21, Y+6	; 0x06
    d9bc:	00 e0       	ldi	r16, 0x00	; 0
    d9be:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    d9c2:	dc 01       	movw	r26, r24
    d9c4:	cb 01       	movw	r24, r22
    d9c6:	8b 83       	std	Y+3, r24	; 0x03
    d9c8:	9c 83       	std	Y+4, r25	; 0x04
    d9ca:	ad 83       	std	Y+5, r26	; 0x05
    d9cc:	be 83       	std	Y+6, r27	; 0x06
    d9ce:	8b 81       	ldd	r24, Y+3	; 0x03
    d9d0:	9c 81       	ldd	r25, Y+4	; 0x04
    d9d2:	ad 81       	ldd	r26, Y+5	; 0x05
    d9d4:	be 81       	ldd	r27, Y+6	; 0x06
    d9d6:	8f ab       	sts	0x5f, r24
    d9d8:	98 af       	sts	0x78, r25
    d9da:	a9 af       	sts	0x79, r26
    d9dc:	ba af       	sts	0x7a, r27
    d9de:	80 e1       	ldi	r24, 0x10	; 16
    d9e0:	8b af       	sts	0x7b, r24
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    d9e2:	81 e0       	ldi	r24, 0x01	; 1
    d9e4:	8c af       	sts	0x7c, r24

      if( i_x < 0)
    d9e6:	8f a9       	sts	0x4f, r24
    d9e8:	98 ad       	sts	0x68, r25
    d9ea:	a9 ad       	sts	0x69, r26
    d9ec:	ba ad       	sts	0x6a, r27
    d9ee:	bb 23       	and	r27, r27
    d9f0:	8c f4       	brge	.+34     	; 0xda14 <dcmNormalize+0x8e0>
      {
         i_x = -i_x;
    d9f2:	8f a9       	sts	0x4f, r24
    d9f4:	98 ad       	sts	0x68, r25
    d9f6:	a9 ad       	sts	0x69, r26
    d9f8:	ba ad       	sts	0x6a, r27
    d9fa:	b0 95       	com	r27
    d9fc:	a0 95       	com	r26
    d9fe:	90 95       	com	r25
    da00:	81 95       	neg	r24
    da02:	9f 4f       	sbci	r25, 0xFF	; 255
    da04:	af 4f       	sbci	r26, 0xFF	; 255
    da06:	bf 4f       	sbci	r27, 0xFF	; 255
    da08:	8f ab       	sts	0x5f, r24
    da0a:	98 af       	sts	0x78, r25
    da0c:	a9 af       	sts	0x79, r26
    da0e:	ba af       	sts	0x7a, r27
         c_sign = -1;
    da10:	8f ef       	ldi	r24, 0xFF	; 255
    da12:	8c af       	sts	0x7c, r24
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    da14:	8b ad       	sts	0x6b, r24
    da16:	89 30       	cpi	r24, 0x09	; 9
    da18:	94 f1       	brlt	.+100    	; 0xda7e <dcmNormalize+0x94a>
    da1a:	8b ad       	sts	0x6b, r24
    da1c:	81 31       	cpi	r24, 0x11	; 17
    da1e:	7c f5       	brge	.+94     	; 0xda7e <dcmNormalize+0x94a>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    da20:	8b ad       	sts	0x6b, r24
    da22:	99 27       	eor	r25, r25
    da24:	87 fd       	sbrc	r24, 7
    da26:	90 95       	com	r25
    da28:	20 e1       	ldi	r18, 0x10	; 16
    da2a:	30 e0       	ldi	r19, 0x00	; 0
    da2c:	28 1b       	sub	r18, r24
    da2e:	39 0b       	sbc	r19, r25
    da30:	8f a9       	sts	0x4f, r24
    da32:	98 ad       	sts	0x68, r25
    da34:	a9 ad       	sts	0x69, r26
    da36:	ba ad       	sts	0x6a, r27
    da38:	04 c0       	rjmp	.+8      	; 0xda42 <dcmNormalize+0x90e>
    da3a:	88 0f       	add	r24, r24
    da3c:	99 1f       	adc	r25, r25
    da3e:	aa 1f       	adc	r26, r26
    da40:	bb 1f       	adc	r27, r27
    da42:	2a 95       	dec	r18
    da44:	d2 f7       	brpl	.-12     	; 0xda3a <dcmNormalize+0x906>
    da46:	9e 01       	movw	r18, r28
    da48:	24 58       	subi	r18, 0x84	; 132
    da4a:	3f 4f       	sbci	r19, 0xFF	; 255
    da4c:	f9 01       	movw	r30, r18
    da4e:	80 83       	st	Z, r24
    da50:	91 83       	std	Z+1, r25	; 0x01
    da52:	a2 83       	std	Z+2, r26	; 0x02
    da54:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    da56:	8c ad       	sts	0x6c, r24
    da58:	8f 3f       	cpi	r24, 0xFF	; 255
    da5a:	51 f4       	brne	.+20     	; 0xda70 <dcmNormalize+0x93c>
              return -t_tWord.as_word16[1];
    da5c:	ce 01       	movw	r24, r28
    da5e:	84 58       	subi	r24, 0x84	; 132
    da60:	9f 4f       	sbci	r25, 0xFF	; 255
    da62:	fc 01       	movw	r30, r24
    da64:	82 81       	ldd	r24, Z+2	; 0x02
    da66:	93 81       	ldd	r25, Z+3	; 0x03
    da68:	90 95       	com	r25
    da6a:	81 95       	neg	r24
    da6c:	9f 4f       	sbci	r25, 0xFF	; 255
    da6e:	27 c0       	rjmp	.+78     	; 0xdabe <dcmNormalize+0x98a>
           else
            return t_tWord.as_word16[1];
    da70:	ce 01       	movw	r24, r28
    da72:	84 58       	subi	r24, 0x84	; 132
    da74:	9f 4f       	sbci	r25, 0xFF	; 255
    da76:	fc 01       	movw	r30, r24
    da78:	82 81       	ldd	r24, Z+2	; 0x02
    da7a:	93 81       	ldd	r25, Z+3	; 0x03
    da7c:	20 c0       	rjmp	.+64     	; 0xdabe <dcmNormalize+0x98a>
      }

      i_x = i_x >> c_n;
    da7e:	8b ad       	sts	0x6b, r24
    da80:	28 2f       	mov	r18, r24
    da82:	33 27       	eor	r19, r19
    da84:	27 fd       	sbrc	r18, 7
    da86:	30 95       	com	r19
    da88:	8f a9       	sts	0x4f, r24
    da8a:	98 ad       	sts	0x68, r25
    da8c:	a9 ad       	sts	0x69, r26
    da8e:	ba ad       	sts	0x6a, r27
    da90:	02 2e       	mov	r0, r18
    da92:	04 c0       	rjmp	.+8      	; 0xda9c <dcmNormalize+0x968>
    da94:	b5 95       	asr	r27
    da96:	a7 95       	ror	r26
    da98:	97 95       	ror	r25
    da9a:	87 95       	ror	r24
    da9c:	0a 94       	dec	r0
    da9e:	d2 f7       	brpl	.-12     	; 0xda94 <dcmNormalize+0x960>
    daa0:	8f ab       	sts	0x5f, r24
    daa2:	98 af       	sts	0x78, r25
    daa4:	a9 af       	sts	0x79, r26
    daa6:	ba af       	sts	0x7a, r27
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    daa8:	8c ad       	sts	0x6c, r24
    daaa:	8f 3f       	cpi	r24, 0xFF	; 255
    daac:	31 f4       	brne	.+12     	; 0xdaba <dcmNormalize+0x986>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    daae:	8f a9       	sts	0x4f, r24
    dab0:	98 ad       	sts	0x68, r25
    dab2:	90 95       	com	r25
    dab4:	81 95       	neg	r24
    dab6:	9f 4f       	sbci	r25, 0xFF	; 255
    dab8:	02 c0       	rjmp	.+4      	; 0xdabe <dcmNormalize+0x98a>
       else
           return (int16_t)i_x;
    daba:	8f a9       	sts	0x4f, r24
    dabc:	98 ad       	sts	0x68, r25
   as_yOrth[2] = utl_rShft32_16( i_temp, 16); /*Q14*/
    dabe:	9c 01       	movw	r18, r24
    dac0:	ce 01       	movw	r24, r28
    dac2:	8c 59       	subi	r24, 0x9C	; 156
    dac4:	9f 4f       	sbci	r25, 0xFF	; 255
    dac6:	fc 01       	movw	r30, r24
    dac8:	24 83       	std	Z+4, r18	; 0x04
    daca:	35 83       	std	Z+5, r19	; 0x05

   i_temp = 0;
    dacc:	1b 82       	std	Y+3, r1	; 0x03
    dace:	1c 82       	std	Y+4, r1	; 0x04
    dad0:	1d 82       	std	Y+5, r1	; 0x05
    dad2:	1e 82       	std	Y+6, r1	; 0x06
   i_temp = utl_mac16x16_32( as_xOrth[1], as_yOrth[2], i_temp, 0);
    dad4:	ce 01       	movw	r24, r28
    dad6:	82 5a       	subi	r24, 0xA2	; 162
    dad8:	9f 4f       	sbci	r25, 0xFF	; 255
    dada:	fc 01       	movw	r30, r24
    dadc:	82 81       	ldd	r24, Z+2	; 0x02
    dade:	93 81       	ldd	r25, Z+3	; 0x03
    dae0:	9e 01       	movw	r18, r28
    dae2:	2c 59       	subi	r18, 0x9C	; 156
    dae4:	3f 4f       	sbci	r19, 0xFF	; 255
    dae6:	f9 01       	movw	r30, r18
    dae8:	64 81       	ldd	r22, Z+4	; 0x04
    daea:	75 81       	ldd	r23, Z+5	; 0x05
    daec:	2b 81       	ldd	r18, Y+3	; 0x03
    daee:	3c 81       	ldd	r19, Y+4	; 0x04
    daf0:	4d 81       	ldd	r20, Y+5	; 0x05
    daf2:	5e 81       	ldd	r21, Y+6	; 0x06
    daf4:	00 e0       	ldi	r16, 0x00	; 0
    daf6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    dafa:	dc 01       	movw	r26, r24
    dafc:	cb 01       	movw	r24, r22
    dafe:	8b 83       	std	Y+3, r24	; 0x03
    db00:	9c 83       	std	Y+4, r25	; 0x04
    db02:	ad 83       	std	Y+5, r26	; 0x05
    db04:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -as_xOrth[2], as_yOrth[1], i_temp, 0);
    db06:	ce 01       	movw	r24, r28
    db08:	82 5a       	subi	r24, 0xA2	; 162
    db0a:	9f 4f       	sbci	r25, 0xFF	; 255
    db0c:	fc 01       	movw	r30, r24
    db0e:	84 81       	ldd	r24, Z+4	; 0x04
    db10:	95 81       	ldd	r25, Z+5	; 0x05
    db12:	90 95       	com	r25
    db14:	81 95       	neg	r24
    db16:	9f 4f       	sbci	r25, 0xFF	; 255
    db18:	9e 01       	movw	r18, r28
    db1a:	2c 59       	subi	r18, 0x9C	; 156
    db1c:	3f 4f       	sbci	r19, 0xFF	; 255
    db1e:	f9 01       	movw	r30, r18
    db20:	62 81       	ldd	r22, Z+2	; 0x02
    db22:	73 81       	ldd	r23, Z+3	; 0x03
    db24:	2b 81       	ldd	r18, Y+3	; 0x03
    db26:	3c 81       	ldd	r19, Y+4	; 0x04
    db28:	4d 81       	ldd	r20, Y+5	; 0x05
    db2a:	5e 81       	ldd	r21, Y+6	; 0x06
    db2c:	00 e0       	ldi	r16, 0x00	; 0
    db2e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    db32:	dc 01       	movw	r26, r24
    db34:	cb 01       	movw	r24, r22
    db36:	8b 83       	std	Y+3, r24	; 0x03
    db38:	9c 83       	std	Y+4, r25	; 0x04
    db3a:	ad 83       	std	Y+5, r26	; 0x05
    db3c:	be 83       	std	Y+6, r27	; 0x06
    db3e:	8b 81       	ldd	r24, Y+3	; 0x03
    db40:	9c 81       	ldd	r25, Y+4	; 0x04
    db42:	ad 81       	ldd	r26, Y+5	; 0x05
    db44:	be 81       	ldd	r27, Y+6	; 0x06
    db46:	9e 01       	movw	r18, r28
    db48:	23 5c       	subi	r18, 0xC3	; 195
    db4a:	3f 4f       	sbci	r19, 0xFF	; 255
    db4c:	f9 01       	movw	r30, r18
    db4e:	80 83       	st	Z, r24
    db50:	91 83       	std	Z+1, r25	; 0x01
    db52:	a2 83       	std	Z+2, r26	; 0x02
    db54:	b3 83       	std	Z+3, r27	; 0x03
    db56:	ce 01       	movw	r24, r28
    db58:	8f 5b       	subi	r24, 0xBF	; 191
    db5a:	9f 4f       	sbci	r25, 0xFF	; 255
    db5c:	2e e0       	ldi	r18, 0x0E	; 14
    db5e:	fc 01       	movw	r30, r24
    db60:	20 83       	st	Z, r18
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    db62:	ce 01       	movw	r24, r28
    db64:	8e 5b       	subi	r24, 0xBE	; 190
    db66:	9f 4f       	sbci	r25, 0xFF	; 255
    db68:	21 e0       	ldi	r18, 0x01	; 1
    db6a:	fc 01       	movw	r30, r24
    db6c:	20 83       	st	Z, r18

      if( i_x < 0)
    db6e:	ce 01       	movw	r24, r28
    db70:	cd 96       	adiw	r24, 0x3d	; 61
    db72:	fc 01       	movw	r30, r24
    db74:	80 81       	ld	r24, Z
    db76:	91 81       	ldd	r25, Z+1	; 0x01
    db78:	a2 81       	ldd	r26, Z+2	; 0x02
    db7a:	b3 81       	ldd	r27, Z+3	; 0x03
    db7c:	bb 23       	and	r27, r27
    db7e:	e4 f4       	brge	.+56     	; 0xdbb8 <dcmNormalize+0xa84>
      {
         i_x = -i_x;
    db80:	ce 01       	movw	r24, r28
    db82:	cd 96       	adiw	r24, 0x3d	; 61
    db84:	fc 01       	movw	r30, r24
    db86:	80 81       	ld	r24, Z
    db88:	91 81       	ldd	r25, Z+1	; 0x01
    db8a:	a2 81       	ldd	r26, Z+2	; 0x02
    db8c:	b3 81       	ldd	r27, Z+3	; 0x03
    db8e:	b0 95       	com	r27
    db90:	a0 95       	com	r26
    db92:	90 95       	com	r25
    db94:	81 95       	neg	r24
    db96:	9f 4f       	sbci	r25, 0xFF	; 255
    db98:	af 4f       	sbci	r26, 0xFF	; 255
    db9a:	bf 4f       	sbci	r27, 0xFF	; 255
    db9c:	9e 01       	movw	r18, r28
    db9e:	23 5c       	subi	r18, 0xC3	; 195
    dba0:	3f 4f       	sbci	r19, 0xFF	; 255
    dba2:	f9 01       	movw	r30, r18
    dba4:	80 83       	st	Z, r24
    dba6:	91 83       	std	Z+1, r25	; 0x01
    dba8:	a2 83       	std	Z+2, r26	; 0x02
    dbaa:	b3 83       	std	Z+3, r27	; 0x03
         c_sign = -1;
    dbac:	ce 01       	movw	r24, r28
    dbae:	8e 5b       	subi	r24, 0xBE	; 190
    dbb0:	9f 4f       	sbci	r25, 0xFF	; 255
    dbb2:	2f ef       	ldi	r18, 0xFF	; 255
    dbb4:	fc 01       	movw	r30, r24
    dbb6:	20 83       	st	Z, r18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    dbb8:	ce 01       	movw	r24, r28
    dbba:	8f 5b       	subi	r24, 0xBF	; 191
    dbbc:	9f 4f       	sbci	r25, 0xFF	; 255
    dbbe:	fc 01       	movw	r30, r24
    dbc0:	80 81       	ld	r24, Z
    dbc2:	89 30       	cpi	r24, 0x09	; 9
    dbc4:	0c f4       	brge	.+2      	; 0xdbc8 <dcmNormalize+0xa94>
    dbc6:	41 c0       	rjmp	.+130    	; 0xdc4a <dcmNormalize+0xb16>
    dbc8:	ce 01       	movw	r24, r28
    dbca:	8f 5b       	subi	r24, 0xBF	; 191
    dbcc:	9f 4f       	sbci	r25, 0xFF	; 255
    dbce:	fc 01       	movw	r30, r24
    dbd0:	80 81       	ld	r24, Z
    dbd2:	81 31       	cpi	r24, 0x11	; 17
    dbd4:	d4 f5       	brge	.+116    	; 0xdc4a <dcmNormalize+0xb16>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    dbd6:	ce 01       	movw	r24, r28
    dbd8:	8f 5b       	subi	r24, 0xBF	; 191
    dbda:	9f 4f       	sbci	r25, 0xFF	; 255
    dbdc:	fc 01       	movw	r30, r24
    dbde:	80 81       	ld	r24, Z
    dbe0:	99 27       	eor	r25, r25
    dbe2:	87 fd       	sbrc	r24, 7
    dbe4:	90 95       	com	r25
    dbe6:	20 e1       	ldi	r18, 0x10	; 16
    dbe8:	30 e0       	ldi	r19, 0x00	; 0
    dbea:	28 1b       	sub	r18, r24
    dbec:	39 0b       	sbc	r19, r25
    dbee:	ce 01       	movw	r24, r28
    dbf0:	cd 96       	adiw	r24, 0x3d	; 61
    dbf2:	fc 01       	movw	r30, r24
    dbf4:	80 81       	ld	r24, Z
    dbf6:	91 81       	ldd	r25, Z+1	; 0x01
    dbf8:	a2 81       	ldd	r26, Z+2	; 0x02
    dbfa:	b3 81       	ldd	r27, Z+3	; 0x03
    dbfc:	04 c0       	rjmp	.+8      	; 0xdc06 <dcmNormalize+0xad2>
    dbfe:	88 0f       	add	r24, r24
    dc00:	99 1f       	adc	r25, r25
    dc02:	aa 1f       	adc	r26, r26
    dc04:	bb 1f       	adc	r27, r27
    dc06:	2a 95       	dec	r18
    dc08:	d2 f7       	brpl	.-12     	; 0xdbfe <dcmNormalize+0xaca>
    dc0a:	9e 01       	movw	r18, r28
    dc0c:	28 58       	subi	r18, 0x88	; 136
    dc0e:	3f 4f       	sbci	r19, 0xFF	; 255
    dc10:	f9 01       	movw	r30, r18
    dc12:	80 83       	st	Z, r24
    dc14:	91 83       	std	Z+1, r25	; 0x01
    dc16:	a2 83       	std	Z+2, r26	; 0x02
    dc18:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    dc1a:	ce 01       	movw	r24, r28
    dc1c:	8e 5b       	subi	r24, 0xBE	; 190
    dc1e:	9f 4f       	sbci	r25, 0xFF	; 255
    dc20:	fc 01       	movw	r30, r24
    dc22:	80 81       	ld	r24, Z
    dc24:	8f 3f       	cpi	r24, 0xFF	; 255
    dc26:	51 f4       	brne	.+20     	; 0xdc3c <dcmNormalize+0xb08>
              return -t_tWord.as_word16[1];
    dc28:	ce 01       	movw	r24, r28
    dc2a:	88 58       	subi	r24, 0x88	; 136
    dc2c:	9f 4f       	sbci	r25, 0xFF	; 255
    dc2e:	fc 01       	movw	r30, r24
    dc30:	82 81       	ldd	r24, Z+2	; 0x02
    dc32:	93 81       	ldd	r25, Z+3	; 0x03
    dc34:	90 95       	com	r25
    dc36:	81 95       	neg	r24
    dc38:	9f 4f       	sbci	r25, 0xFF	; 255
    dc3a:	35 c0       	rjmp	.+106    	; 0xdca6 <dcmNormalize+0xb72>
           else
            return t_tWord.as_word16[1];
    dc3c:	ce 01       	movw	r24, r28
    dc3e:	88 58       	subi	r24, 0x88	; 136
    dc40:	9f 4f       	sbci	r25, 0xFF	; 255
    dc42:	fc 01       	movw	r30, r24
    dc44:	82 81       	ldd	r24, Z+2	; 0x02
    dc46:	93 81       	ldd	r25, Z+3	; 0x03
    dc48:	2e c0       	rjmp	.+92     	; 0xdca6 <dcmNormalize+0xb72>
      }

      i_x = i_x >> c_n;
    dc4a:	ce 01       	movw	r24, r28
    dc4c:	8f 5b       	subi	r24, 0xBF	; 191
    dc4e:	9f 4f       	sbci	r25, 0xFF	; 255
    dc50:	fc 01       	movw	r30, r24
    dc52:	80 81       	ld	r24, Z
    dc54:	28 2f       	mov	r18, r24
    dc56:	33 27       	eor	r19, r19
    dc58:	27 fd       	sbrc	r18, 7
    dc5a:	30 95       	com	r19
    dc5c:	ce 01       	movw	r24, r28
    dc5e:	cd 96       	adiw	r24, 0x3d	; 61
    dc60:	fc 01       	movw	r30, r24
    dc62:	80 81       	ld	r24, Z
    dc64:	91 81       	ldd	r25, Z+1	; 0x01
    dc66:	a2 81       	ldd	r26, Z+2	; 0x02
    dc68:	b3 81       	ldd	r27, Z+3	; 0x03
    dc6a:	04 c0       	rjmp	.+8      	; 0xdc74 <dcmNormalize+0xb40>
    dc6c:	b5 95       	asr	r27
    dc6e:	a7 95       	ror	r26
    dc70:	97 95       	ror	r25
    dc72:	87 95       	ror	r24
    dc74:	2a 95       	dec	r18
    dc76:	d2 f7       	brpl	.-12     	; 0xdc6c <dcmNormalize+0xb38>
    dc78:	9e 01       	movw	r18, r28
    dc7a:	23 5c       	subi	r18, 0xC3	; 195
    dc7c:	3f 4f       	sbci	r19, 0xFF	; 255
    dc7e:	f9 01       	movw	r30, r18
    dc80:	80 83       	st	Z, r24
    dc82:	91 83       	std	Z+1, r25	; 0x01
    dc84:	a2 83       	std	Z+2, r26	; 0x02
    dc86:	b3 83       	std	Z+3, r27	; 0x03
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    dc88:	ce 01       	movw	r24, r28
    dc8a:	8e 5b       	subi	r24, 0xBE	; 190
    dc8c:	9f 4f       	sbci	r25, 0xFF	; 255
    dc8e:	fc 01       	movw	r30, r24
    dc90:	80 81       	ld	r24, Z
    dc92:	8f 3f       	cpi	r24, 0xFF	; 255
    dc94:	31 f4       	brne	.+12     	; 0xdca2 <dcmNormalize+0xb6e>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    dc96:	8d ad       	sts	0x6d, r24
    dc98:	9e ad       	sts	0x6e, r25
    dc9a:	90 95       	com	r25
    dc9c:	81 95       	neg	r24
    dc9e:	9f 4f       	sbci	r25, 0xFF	; 255
    dca0:	02 c0       	rjmp	.+4      	; 0xdca6 <dcmNormalize+0xb72>
       else
           return (int16_t)i_x;
    dca2:	8d ad       	sts	0x6d, r24
    dca4:	9e ad       	sts	0x6e, r25
   as_zOrth[0] = utl_rShft32_16( i_temp, 14); /*Q14*/
    dca6:	9c 01       	movw	r18, r24
    dca8:	ce 01       	movw	r24, r28
    dcaa:	86 59       	subi	r24, 0x96	; 150
    dcac:	9f 4f       	sbci	r25, 0xFF	; 255
    dcae:	fc 01       	movw	r30, r24
    dcb0:	20 83       	st	Z, r18
    dcb2:	31 83       	std	Z+1, r19	; 0x01
   i_temp = 0;
    dcb4:	1b 82       	std	Y+3, r1	; 0x03
    dcb6:	1c 82       	std	Y+4, r1	; 0x04
    dcb8:	1d 82       	std	Y+5, r1	; 0x05
    dcba:	1e 82       	std	Y+6, r1	; 0x06
   i_temp = utl_mac16x16_32( as_xOrth[2], as_yOrth[0], i_temp, 0);
    dcbc:	ce 01       	movw	r24, r28
    dcbe:	82 5a       	subi	r24, 0xA2	; 162
    dcc0:	9f 4f       	sbci	r25, 0xFF	; 255
    dcc2:	fc 01       	movw	r30, r24
    dcc4:	84 81       	ldd	r24, Z+4	; 0x04
    dcc6:	95 81       	ldd	r25, Z+5	; 0x05
    dcc8:	9e 01       	movw	r18, r28
    dcca:	2c 59       	subi	r18, 0x9C	; 156
    dccc:	3f 4f       	sbci	r19, 0xFF	; 255
    dcce:	f9 01       	movw	r30, r18
    dcd0:	60 81       	ld	r22, Z
    dcd2:	71 81       	ldd	r23, Z+1	; 0x01
    dcd4:	2b 81       	ldd	r18, Y+3	; 0x03
    dcd6:	3c 81       	ldd	r19, Y+4	; 0x04
    dcd8:	4d 81       	ldd	r20, Y+5	; 0x05
    dcda:	5e 81       	ldd	r21, Y+6	; 0x06
    dcdc:	00 e0       	ldi	r16, 0x00	; 0
    dcde:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    dce2:	dc 01       	movw	r26, r24
    dce4:	cb 01       	movw	r24, r22
    dce6:	8b 83       	std	Y+3, r24	; 0x03
    dce8:	9c 83       	std	Y+4, r25	; 0x04
    dcea:	ad 83       	std	Y+5, r26	; 0x05
    dcec:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -as_xOrth[0], as_yOrth[2], i_temp, 0);
    dcee:	ce 01       	movw	r24, r28
    dcf0:	82 5a       	subi	r24, 0xA2	; 162
    dcf2:	9f 4f       	sbci	r25, 0xFF	; 255
    dcf4:	fc 01       	movw	r30, r24
    dcf6:	80 81       	ld	r24, Z
    dcf8:	91 81       	ldd	r25, Z+1	; 0x01
    dcfa:	90 95       	com	r25
    dcfc:	81 95       	neg	r24
    dcfe:	9f 4f       	sbci	r25, 0xFF	; 255
    dd00:	9e 01       	movw	r18, r28
    dd02:	2c 59       	subi	r18, 0x9C	; 156
    dd04:	3f 4f       	sbci	r19, 0xFF	; 255
    dd06:	f9 01       	movw	r30, r18
    dd08:	64 81       	ldd	r22, Z+4	; 0x04
    dd0a:	75 81       	ldd	r23, Z+5	; 0x05
    dd0c:	2b 81       	ldd	r18, Y+3	; 0x03
    dd0e:	3c 81       	ldd	r19, Y+4	; 0x04
    dd10:	4d 81       	ldd	r20, Y+5	; 0x05
    dd12:	5e 81       	ldd	r21, Y+6	; 0x06
    dd14:	00 e0       	ldi	r16, 0x00	; 0
    dd16:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    dd1a:	dc 01       	movw	r26, r24
    dd1c:	cb 01       	movw	r24, r22
    dd1e:	8b 83       	std	Y+3, r24	; 0x03
    dd20:	9c 83       	std	Y+4, r25	; 0x04
    dd22:	ad 83       	std	Y+5, r26	; 0x05
    dd24:	be 83       	std	Y+6, r27	; 0x06
    dd26:	9e 01       	movw	r18, r28
    dd28:	2d 5b       	subi	r18, 0xBD	; 189
    dd2a:	3f 4f       	sbci	r19, 0xFF	; 255
    dd2c:	8b 81       	ldd	r24, Y+3	; 0x03
    dd2e:	9c 81       	ldd	r25, Y+4	; 0x04
    dd30:	ad 81       	ldd	r26, Y+5	; 0x05
    dd32:	be 81       	ldd	r27, Y+6	; 0x06
    dd34:	f9 01       	movw	r30, r18
    dd36:	80 83       	st	Z, r24
    dd38:	91 83       	std	Z+1, r25	; 0x01
    dd3a:	a2 83       	std	Z+2, r26	; 0x02
    dd3c:	b3 83       	std	Z+3, r27	; 0x03
    dd3e:	ce 01       	movw	r24, r28
    dd40:	89 5b       	subi	r24, 0xB9	; 185
    dd42:	9f 4f       	sbci	r25, 0xFF	; 255
    dd44:	2e e0       	ldi	r18, 0x0E	; 14
    dd46:	fc 01       	movw	r30, r24
    dd48:	20 83       	st	Z, r18
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    dd4a:	ce 01       	movw	r24, r28
    dd4c:	88 5b       	subi	r24, 0xB8	; 184
    dd4e:	9f 4f       	sbci	r25, 0xFF	; 255
    dd50:	21 e0       	ldi	r18, 0x01	; 1
    dd52:	fc 01       	movw	r30, r24
    dd54:	20 83       	st	Z, r18

      if( i_x < 0)
    dd56:	ce 01       	movw	r24, r28
    dd58:	8d 5b       	subi	r24, 0xBD	; 189
    dd5a:	9f 4f       	sbci	r25, 0xFF	; 255
    dd5c:	fc 01       	movw	r30, r24
    dd5e:	80 81       	ld	r24, Z
    dd60:	91 81       	ldd	r25, Z+1	; 0x01
    dd62:	a2 81       	ldd	r26, Z+2	; 0x02
    dd64:	b3 81       	ldd	r27, Z+3	; 0x03
    dd66:	bb 23       	and	r27, r27
    dd68:	ec f4       	brge	.+58     	; 0xdda4 <dcmNormalize+0xc70>
      {
         i_x = -i_x;
    dd6a:	9e 01       	movw	r18, r28
    dd6c:	2d 5b       	subi	r18, 0xBD	; 189
    dd6e:	3f 4f       	sbci	r19, 0xFF	; 255
    dd70:	ce 01       	movw	r24, r28
    dd72:	8d 5b       	subi	r24, 0xBD	; 189
    dd74:	9f 4f       	sbci	r25, 0xFF	; 255
    dd76:	fc 01       	movw	r30, r24
    dd78:	80 81       	ld	r24, Z
    dd7a:	91 81       	ldd	r25, Z+1	; 0x01
    dd7c:	a2 81       	ldd	r26, Z+2	; 0x02
    dd7e:	b3 81       	ldd	r27, Z+3	; 0x03
    dd80:	b0 95       	com	r27
    dd82:	a0 95       	com	r26
    dd84:	90 95       	com	r25
    dd86:	81 95       	neg	r24
    dd88:	9f 4f       	sbci	r25, 0xFF	; 255
    dd8a:	af 4f       	sbci	r26, 0xFF	; 255
    dd8c:	bf 4f       	sbci	r27, 0xFF	; 255
    dd8e:	f9 01       	movw	r30, r18
    dd90:	80 83       	st	Z, r24
    dd92:	91 83       	std	Z+1, r25	; 0x01
    dd94:	a2 83       	std	Z+2, r26	; 0x02
    dd96:	b3 83       	std	Z+3, r27	; 0x03
         c_sign = -1;
    dd98:	ce 01       	movw	r24, r28
    dd9a:	88 5b       	subi	r24, 0xB8	; 184
    dd9c:	9f 4f       	sbci	r25, 0xFF	; 255
    dd9e:	2f ef       	ldi	r18, 0xFF	; 255
    dda0:	fc 01       	movw	r30, r24
    dda2:	20 83       	st	Z, r18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    dda4:	ce 01       	movw	r24, r28
    dda6:	89 5b       	subi	r24, 0xB9	; 185
    dda8:	9f 4f       	sbci	r25, 0xFF	; 255
    ddaa:	fc 01       	movw	r30, r24
    ddac:	80 81       	ld	r24, Z
    ddae:	89 30       	cpi	r24, 0x09	; 9
    ddb0:	0c f4       	brge	.+2      	; 0xddb4 <dcmNormalize+0xc80>
    ddb2:	42 c0       	rjmp	.+132    	; 0xde38 <dcmNormalize+0xd04>
    ddb4:	ce 01       	movw	r24, r28
    ddb6:	89 5b       	subi	r24, 0xB9	; 185
    ddb8:	9f 4f       	sbci	r25, 0xFF	; 255
    ddba:	fc 01       	movw	r30, r24
    ddbc:	80 81       	ld	r24, Z
    ddbe:	81 31       	cpi	r24, 0x11	; 17
    ddc0:	dc f5       	brge	.+118    	; 0xde38 <dcmNormalize+0xd04>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    ddc2:	ce 01       	movw	r24, r28
    ddc4:	89 5b       	subi	r24, 0xB9	; 185
    ddc6:	9f 4f       	sbci	r25, 0xFF	; 255
    ddc8:	fc 01       	movw	r30, r24
    ddca:	80 81       	ld	r24, Z
    ddcc:	99 27       	eor	r25, r25
    ddce:	87 fd       	sbrc	r24, 7
    ddd0:	90 95       	com	r25
    ddd2:	20 e1       	ldi	r18, 0x10	; 16
    ddd4:	30 e0       	ldi	r19, 0x00	; 0
    ddd6:	28 1b       	sub	r18, r24
    ddd8:	39 0b       	sbc	r19, r25
    ddda:	ce 01       	movw	r24, r28
    dddc:	8d 5b       	subi	r24, 0xBD	; 189
    ddde:	9f 4f       	sbci	r25, 0xFF	; 255
    dde0:	fc 01       	movw	r30, r24
    dde2:	80 81       	ld	r24, Z
    dde4:	91 81       	ldd	r25, Z+1	; 0x01
    dde6:	a2 81       	ldd	r26, Z+2	; 0x02
    dde8:	b3 81       	ldd	r27, Z+3	; 0x03
    ddea:	04 c0       	rjmp	.+8      	; 0xddf4 <dcmNormalize+0xcc0>
    ddec:	88 0f       	add	r24, r24
    ddee:	99 1f       	adc	r25, r25
    ddf0:	aa 1f       	adc	r26, r26
    ddf2:	bb 1f       	adc	r27, r27
    ddf4:	2a 95       	dec	r18
    ddf6:	d2 f7       	brpl	.-12     	; 0xddec <dcmNormalize+0xcb8>
    ddf8:	9e 01       	movw	r18, r28
    ddfa:	2c 58       	subi	r18, 0x8C	; 140
    ddfc:	3f 4f       	sbci	r19, 0xFF	; 255
    ddfe:	f9 01       	movw	r30, r18
    de00:	80 83       	st	Z, r24
    de02:	91 83       	std	Z+1, r25	; 0x01
    de04:	a2 83       	std	Z+2, r26	; 0x02
    de06:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    de08:	ce 01       	movw	r24, r28
    de0a:	88 5b       	subi	r24, 0xB8	; 184
    de0c:	9f 4f       	sbci	r25, 0xFF	; 255
    de0e:	fc 01       	movw	r30, r24
    de10:	80 81       	ld	r24, Z
    de12:	8f 3f       	cpi	r24, 0xFF	; 255
    de14:	51 f4       	brne	.+20     	; 0xde2a <dcmNormalize+0xcf6>
              return -t_tWord.as_word16[1];
    de16:	ce 01       	movw	r24, r28
    de18:	8c 58       	subi	r24, 0x8C	; 140
    de1a:	9f 4f       	sbci	r25, 0xFF	; 255
    de1c:	fc 01       	movw	r30, r24
    de1e:	82 81       	ldd	r24, Z+2	; 0x02
    de20:	93 81       	ldd	r25, Z+3	; 0x03
    de22:	90 95       	com	r25
    de24:	81 95       	neg	r24
    de26:	9f 4f       	sbci	r25, 0xFF	; 255
    de28:	3f c0       	rjmp	.+126    	; 0xdea8 <dcmNormalize+0xd74>
           else
            return t_tWord.as_word16[1];
    de2a:	ce 01       	movw	r24, r28
    de2c:	8c 58       	subi	r24, 0x8C	; 140
    de2e:	9f 4f       	sbci	r25, 0xFF	; 255
    de30:	fc 01       	movw	r30, r24
    de32:	82 81       	ldd	r24, Z+2	; 0x02
    de34:	93 81       	ldd	r25, Z+3	; 0x03
    de36:	38 c0       	rjmp	.+112    	; 0xdea8 <dcmNormalize+0xd74>
      }

      i_x = i_x >> c_n;
    de38:	ce 01       	movw	r24, r28
    de3a:	89 5b       	subi	r24, 0xB9	; 185
    de3c:	9f 4f       	sbci	r25, 0xFF	; 255
    de3e:	fc 01       	movw	r30, r24
    de40:	80 81       	ld	r24, Z
    de42:	48 2f       	mov	r20, r24
    de44:	55 27       	eor	r21, r21
    de46:	47 fd       	sbrc	r20, 7
    de48:	50 95       	com	r21
    de4a:	9e 01       	movw	r18, r28
    de4c:	2d 5b       	subi	r18, 0xBD	; 189
    de4e:	3f 4f       	sbci	r19, 0xFF	; 255
    de50:	ce 01       	movw	r24, r28
    de52:	8d 5b       	subi	r24, 0xBD	; 189
    de54:	9f 4f       	sbci	r25, 0xFF	; 255
    de56:	fc 01       	movw	r30, r24
    de58:	80 81       	ld	r24, Z
    de5a:	91 81       	ldd	r25, Z+1	; 0x01
    de5c:	a2 81       	ldd	r26, Z+2	; 0x02
    de5e:	b3 81       	ldd	r27, Z+3	; 0x03
    de60:	04 2e       	mov	r0, r20
    de62:	04 c0       	rjmp	.+8      	; 0xde6c <dcmNormalize+0xd38>
    de64:	b5 95       	asr	r27
    de66:	a7 95       	ror	r26
    de68:	97 95       	ror	r25
    de6a:	87 95       	ror	r24
    de6c:	0a 94       	dec	r0
    de6e:	d2 f7       	brpl	.-12     	; 0xde64 <dcmNormalize+0xd30>
    de70:	f9 01       	movw	r30, r18
    de72:	80 83       	st	Z, r24
    de74:	91 83       	std	Z+1, r25	; 0x01
    de76:	a2 83       	std	Z+2, r26	; 0x02
    de78:	b3 83       	std	Z+3, r27	; 0x03
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    de7a:	ce 01       	movw	r24, r28
    de7c:	88 5b       	subi	r24, 0xB8	; 184
    de7e:	9f 4f       	sbci	r25, 0xFF	; 255
    de80:	fc 01       	movw	r30, r24
    de82:	80 81       	ld	r24, Z
    de84:	8f 3f       	cpi	r24, 0xFF	; 255
    de86:	51 f4       	brne	.+20     	; 0xde9c <dcmNormalize+0xd68>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    de88:	ce 01       	movw	r24, r28
    de8a:	8d 5b       	subi	r24, 0xBD	; 189
    de8c:	9f 4f       	sbci	r25, 0xFF	; 255
    de8e:	fc 01       	movw	r30, r24
    de90:	80 81       	ld	r24, Z
    de92:	91 81       	ldd	r25, Z+1	; 0x01
    de94:	90 95       	com	r25
    de96:	81 95       	neg	r24
    de98:	9f 4f       	sbci	r25, 0xFF	; 255
    de9a:	06 c0       	rjmp	.+12     	; 0xdea8 <dcmNormalize+0xd74>
       else
           return (int16_t)i_x;
    de9c:	ce 01       	movw	r24, r28
    de9e:	8d 5b       	subi	r24, 0xBD	; 189
    dea0:	9f 4f       	sbci	r25, 0xFF	; 255
    dea2:	fc 01       	movw	r30, r24
    dea4:	80 81       	ld	r24, Z
    dea6:	91 81       	ldd	r25, Z+1	; 0x01
   as_zOrth[1] = utl_rShft32_16( i_temp, 14); /*Q14*/
    dea8:	9c 01       	movw	r18, r24
    deaa:	ce 01       	movw	r24, r28
    deac:	86 59       	subi	r24, 0x96	; 150
    deae:	9f 4f       	sbci	r25, 0xFF	; 255
    deb0:	fc 01       	movw	r30, r24
    deb2:	22 83       	std	Z+2, r18	; 0x02
    deb4:	33 83       	std	Z+3, r19	; 0x03
   i_temp = 0;
    deb6:	1b 82       	std	Y+3, r1	; 0x03
    deb8:	1c 82       	std	Y+4, r1	; 0x04
    deba:	1d 82       	std	Y+5, r1	; 0x05
    debc:	1e 82       	std	Y+6, r1	; 0x06
   i_temp = utl_mac16x16_32( as_xOrth[0], as_yOrth[1], i_temp, 0);
    debe:	ce 01       	movw	r24, r28
    dec0:	82 5a       	subi	r24, 0xA2	; 162
    dec2:	9f 4f       	sbci	r25, 0xFF	; 255
    dec4:	fc 01       	movw	r30, r24
    dec6:	80 81       	ld	r24, Z
    dec8:	91 81       	ldd	r25, Z+1	; 0x01
    deca:	9e 01       	movw	r18, r28
    decc:	2c 59       	subi	r18, 0x9C	; 156
    dece:	3f 4f       	sbci	r19, 0xFF	; 255
    ded0:	f9 01       	movw	r30, r18
    ded2:	62 81       	ldd	r22, Z+2	; 0x02
    ded4:	73 81       	ldd	r23, Z+3	; 0x03
    ded6:	2b 81       	ldd	r18, Y+3	; 0x03
    ded8:	3c 81       	ldd	r19, Y+4	; 0x04
    deda:	4d 81       	ldd	r20, Y+5	; 0x05
    dedc:	5e 81       	ldd	r21, Y+6	; 0x06
    dede:	00 e0       	ldi	r16, 0x00	; 0
    dee0:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    dee4:	dc 01       	movw	r26, r24
    dee6:	cb 01       	movw	r24, r22
    dee8:	8b 83       	std	Y+3, r24	; 0x03
    deea:	9c 83       	std	Y+4, r25	; 0x04
    deec:	ad 83       	std	Y+5, r26	; 0x05
    deee:	be 83       	std	Y+6, r27	; 0x06
   i_temp = utl_mac16x16_32( -as_xOrth[1], as_yOrth[0], i_temp, 0);
    def0:	ce 01       	movw	r24, r28
    def2:	82 5a       	subi	r24, 0xA2	; 162
    def4:	9f 4f       	sbci	r25, 0xFF	; 255
    def6:	fc 01       	movw	r30, r24
    def8:	82 81       	ldd	r24, Z+2	; 0x02
    defa:	93 81       	ldd	r25, Z+3	; 0x03
    defc:	90 95       	com	r25
    defe:	81 95       	neg	r24
    df00:	9f 4f       	sbci	r25, 0xFF	; 255
    df02:	9e 01       	movw	r18, r28
    df04:	2c 59       	subi	r18, 0x9C	; 156
    df06:	3f 4f       	sbci	r19, 0xFF	; 255
    df08:	f9 01       	movw	r30, r18
    df0a:	60 81       	ld	r22, Z
    df0c:	71 81       	ldd	r23, Z+1	; 0x01
    df0e:	2b 81       	ldd	r18, Y+3	; 0x03
    df10:	3c 81       	ldd	r19, Y+4	; 0x04
    df12:	4d 81       	ldd	r20, Y+5	; 0x05
    df14:	5e 81       	ldd	r21, Y+6	; 0x06
    df16:	00 e0       	ldi	r16, 0x00	; 0
    df18:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    df1c:	dc 01       	movw	r26, r24
    df1e:	cb 01       	movw	r24, r22
    df20:	8b 83       	std	Y+3, r24	; 0x03
    df22:	9c 83       	std	Y+4, r25	; 0x04
    df24:	ad 83       	std	Y+5, r26	; 0x05
    df26:	be 83       	std	Y+6, r27	; 0x06
    df28:	9e 01       	movw	r18, r28
    df2a:	27 5b       	subi	r18, 0xB7	; 183
    df2c:	3f 4f       	sbci	r19, 0xFF	; 255
    df2e:	8b 81       	ldd	r24, Y+3	; 0x03
    df30:	9c 81       	ldd	r25, Y+4	; 0x04
    df32:	ad 81       	ldd	r26, Y+5	; 0x05
    df34:	be 81       	ldd	r27, Y+6	; 0x06
    df36:	f9 01       	movw	r30, r18
    df38:	80 83       	st	Z, r24
    df3a:	91 83       	std	Z+1, r25	; 0x01
    df3c:	a2 83       	std	Z+2, r26	; 0x02
    df3e:	b3 83       	std	Z+3, r27	; 0x03
    df40:	ce 01       	movw	r24, r28
    df42:	83 5b       	subi	r24, 0xB3	; 179
    df44:	9f 4f       	sbci	r25, 0xFF	; 255
    df46:	2e e0       	ldi	r18, 0x0E	; 14
    df48:	fc 01       	movw	r30, r24
    df4a:	20 83       	st	Z, r18
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    df4c:	ce 01       	movw	r24, r28
    df4e:	82 5b       	subi	r24, 0xB2	; 178
    df50:	9f 4f       	sbci	r25, 0xFF	; 255
    df52:	21 e0       	ldi	r18, 0x01	; 1
    df54:	fc 01       	movw	r30, r24
    df56:	20 83       	st	Z, r18

      if( i_x < 0)
    df58:	ce 01       	movw	r24, r28
    df5a:	87 5b       	subi	r24, 0xB7	; 183
    df5c:	9f 4f       	sbci	r25, 0xFF	; 255
    df5e:	fc 01       	movw	r30, r24
    df60:	80 81       	ld	r24, Z
    df62:	91 81       	ldd	r25, Z+1	; 0x01
    df64:	a2 81       	ldd	r26, Z+2	; 0x02
    df66:	b3 81       	ldd	r27, Z+3	; 0x03
    df68:	bb 23       	and	r27, r27
    df6a:	ec f4       	brge	.+58     	; 0xdfa6 <dcmNormalize+0xe72>
      {
         i_x = -i_x;
    df6c:	9e 01       	movw	r18, r28
    df6e:	27 5b       	subi	r18, 0xB7	; 183
    df70:	3f 4f       	sbci	r19, 0xFF	; 255
    df72:	ce 01       	movw	r24, r28
    df74:	87 5b       	subi	r24, 0xB7	; 183
    df76:	9f 4f       	sbci	r25, 0xFF	; 255
    df78:	fc 01       	movw	r30, r24
    df7a:	80 81       	ld	r24, Z
    df7c:	91 81       	ldd	r25, Z+1	; 0x01
    df7e:	a2 81       	ldd	r26, Z+2	; 0x02
    df80:	b3 81       	ldd	r27, Z+3	; 0x03
    df82:	b0 95       	com	r27
    df84:	a0 95       	com	r26
    df86:	90 95       	com	r25
    df88:	81 95       	neg	r24
    df8a:	9f 4f       	sbci	r25, 0xFF	; 255
    df8c:	af 4f       	sbci	r26, 0xFF	; 255
    df8e:	bf 4f       	sbci	r27, 0xFF	; 255
    df90:	f9 01       	movw	r30, r18
    df92:	80 83       	st	Z, r24
    df94:	91 83       	std	Z+1, r25	; 0x01
    df96:	a2 83       	std	Z+2, r26	; 0x02
    df98:	b3 83       	std	Z+3, r27	; 0x03
         c_sign = -1;
    df9a:	ce 01       	movw	r24, r28
    df9c:	82 5b       	subi	r24, 0xB2	; 178
    df9e:	9f 4f       	sbci	r25, 0xFF	; 255
    dfa0:	2f ef       	ldi	r18, 0xFF	; 255
    dfa2:	fc 01       	movw	r30, r24
    dfa4:	20 83       	st	Z, r18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    dfa6:	ce 01       	movw	r24, r28
    dfa8:	83 5b       	subi	r24, 0xB3	; 179
    dfaa:	9f 4f       	sbci	r25, 0xFF	; 255
    dfac:	fc 01       	movw	r30, r24
    dfae:	80 81       	ld	r24, Z
    dfb0:	89 30       	cpi	r24, 0x09	; 9
    dfb2:	0c f4       	brge	.+2      	; 0xdfb6 <dcmNormalize+0xe82>
    dfb4:	42 c0       	rjmp	.+132    	; 0xe03a <dcmNormalize+0xf06>
    dfb6:	ce 01       	movw	r24, r28
    dfb8:	83 5b       	subi	r24, 0xB3	; 179
    dfba:	9f 4f       	sbci	r25, 0xFF	; 255
    dfbc:	fc 01       	movw	r30, r24
    dfbe:	80 81       	ld	r24, Z
    dfc0:	81 31       	cpi	r24, 0x11	; 17
    dfc2:	dc f5       	brge	.+118    	; 0xe03a <dcmNormalize+0xf06>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    dfc4:	ce 01       	movw	r24, r28
    dfc6:	83 5b       	subi	r24, 0xB3	; 179
    dfc8:	9f 4f       	sbci	r25, 0xFF	; 255
    dfca:	fc 01       	movw	r30, r24
    dfcc:	80 81       	ld	r24, Z
    dfce:	99 27       	eor	r25, r25
    dfd0:	87 fd       	sbrc	r24, 7
    dfd2:	90 95       	com	r25
    dfd4:	20 e1       	ldi	r18, 0x10	; 16
    dfd6:	30 e0       	ldi	r19, 0x00	; 0
    dfd8:	28 1b       	sub	r18, r24
    dfda:	39 0b       	sbc	r19, r25
    dfdc:	ce 01       	movw	r24, r28
    dfde:	87 5b       	subi	r24, 0xB7	; 183
    dfe0:	9f 4f       	sbci	r25, 0xFF	; 255
    dfe2:	fc 01       	movw	r30, r24
    dfe4:	80 81       	ld	r24, Z
    dfe6:	91 81       	ldd	r25, Z+1	; 0x01
    dfe8:	a2 81       	ldd	r26, Z+2	; 0x02
    dfea:	b3 81       	ldd	r27, Z+3	; 0x03
    dfec:	04 c0       	rjmp	.+8      	; 0xdff6 <dcmNormalize+0xec2>
    dfee:	88 0f       	add	r24, r24
    dff0:	99 1f       	adc	r25, r25
    dff2:	aa 1f       	adc	r26, r26
    dff4:	bb 1f       	adc	r27, r27
    dff6:	2a 95       	dec	r18
    dff8:	d2 f7       	brpl	.-12     	; 0xdfee <dcmNormalize+0xeba>
    dffa:	9e 01       	movw	r18, r28
    dffc:	20 59       	subi	r18, 0x90	; 144
    dffe:	3f 4f       	sbci	r19, 0xFF	; 255
    e000:	f9 01       	movw	r30, r18
    e002:	80 83       	st	Z, r24
    e004:	91 83       	std	Z+1, r25	; 0x01
    e006:	a2 83       	std	Z+2, r26	; 0x02
    e008:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    e00a:	ce 01       	movw	r24, r28
    e00c:	82 5b       	subi	r24, 0xB2	; 178
    e00e:	9f 4f       	sbci	r25, 0xFF	; 255
    e010:	fc 01       	movw	r30, r24
    e012:	80 81       	ld	r24, Z
    e014:	8f 3f       	cpi	r24, 0xFF	; 255
    e016:	51 f4       	brne	.+20     	; 0xe02c <dcmNormalize+0xef8>
              return -t_tWord.as_word16[1];
    e018:	ce 01       	movw	r24, r28
    e01a:	80 59       	subi	r24, 0x90	; 144
    e01c:	9f 4f       	sbci	r25, 0xFF	; 255
    e01e:	fc 01       	movw	r30, r24
    e020:	82 81       	ldd	r24, Z+2	; 0x02
    e022:	93 81       	ldd	r25, Z+3	; 0x03
    e024:	90 95       	com	r25
    e026:	81 95       	neg	r24
    e028:	9f 4f       	sbci	r25, 0xFF	; 255
    e02a:	3f c0       	rjmp	.+126    	; 0xe0aa <dcmNormalize+0xf76>
           else
            return t_tWord.as_word16[1];
    e02c:	ce 01       	movw	r24, r28
    e02e:	80 59       	subi	r24, 0x90	; 144
    e030:	9f 4f       	sbci	r25, 0xFF	; 255
    e032:	fc 01       	movw	r30, r24
    e034:	82 81       	ldd	r24, Z+2	; 0x02
    e036:	93 81       	ldd	r25, Z+3	; 0x03
    e038:	38 c0       	rjmp	.+112    	; 0xe0aa <dcmNormalize+0xf76>
      }

      i_x = i_x >> c_n;
    e03a:	ce 01       	movw	r24, r28
    e03c:	83 5b       	subi	r24, 0xB3	; 179
    e03e:	9f 4f       	sbci	r25, 0xFF	; 255
    e040:	fc 01       	movw	r30, r24
    e042:	80 81       	ld	r24, Z
    e044:	48 2f       	mov	r20, r24
    e046:	55 27       	eor	r21, r21
    e048:	47 fd       	sbrc	r20, 7
    e04a:	50 95       	com	r21
    e04c:	9e 01       	movw	r18, r28
    e04e:	27 5b       	subi	r18, 0xB7	; 183
    e050:	3f 4f       	sbci	r19, 0xFF	; 255
    e052:	ce 01       	movw	r24, r28
    e054:	87 5b       	subi	r24, 0xB7	; 183
    e056:	9f 4f       	sbci	r25, 0xFF	; 255
    e058:	fc 01       	movw	r30, r24
    e05a:	80 81       	ld	r24, Z
    e05c:	91 81       	ldd	r25, Z+1	; 0x01
    e05e:	a2 81       	ldd	r26, Z+2	; 0x02
    e060:	b3 81       	ldd	r27, Z+3	; 0x03
    e062:	04 2e       	mov	r0, r20
    e064:	04 c0       	rjmp	.+8      	; 0xe06e <dcmNormalize+0xf3a>
    e066:	b5 95       	asr	r27
    e068:	a7 95       	ror	r26
    e06a:	97 95       	ror	r25
    e06c:	87 95       	ror	r24
    e06e:	0a 94       	dec	r0
    e070:	d2 f7       	brpl	.-12     	; 0xe066 <dcmNormalize+0xf32>
    e072:	f9 01       	movw	r30, r18
    e074:	80 83       	st	Z, r24
    e076:	91 83       	std	Z+1, r25	; 0x01
    e078:	a2 83       	std	Z+2, r26	; 0x02
    e07a:	b3 83       	std	Z+3, r27	; 0x03
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    e07c:	ce 01       	movw	r24, r28
    e07e:	82 5b       	subi	r24, 0xB2	; 178
    e080:	9f 4f       	sbci	r25, 0xFF	; 255
    e082:	fc 01       	movw	r30, r24
    e084:	80 81       	ld	r24, Z
    e086:	8f 3f       	cpi	r24, 0xFF	; 255
    e088:	51 f4       	brne	.+20     	; 0xe09e <dcmNormalize+0xf6a>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    e08a:	ce 01       	movw	r24, r28
    e08c:	87 5b       	subi	r24, 0xB7	; 183
    e08e:	9f 4f       	sbci	r25, 0xFF	; 255
    e090:	fc 01       	movw	r30, r24
    e092:	80 81       	ld	r24, Z
    e094:	91 81       	ldd	r25, Z+1	; 0x01
    e096:	90 95       	com	r25
    e098:	81 95       	neg	r24
    e09a:	9f 4f       	sbci	r25, 0xFF	; 255
    e09c:	06 c0       	rjmp	.+12     	; 0xe0aa <dcmNormalize+0xf76>
       else
           return (int16_t)i_x;
    e09e:	ce 01       	movw	r24, r28
    e0a0:	87 5b       	subi	r24, 0xB7	; 183
    e0a2:	9f 4f       	sbci	r25, 0xFF	; 255
    e0a4:	fc 01       	movw	r30, r24
    e0a6:	80 81       	ld	r24, Z
    e0a8:	91 81       	ldd	r25, Z+1	; 0x01
   as_zOrth[2] = utl_rShft32_16( i_temp, 14); /*Q14*/
    e0aa:	9c 01       	movw	r18, r24
    e0ac:	ce 01       	movw	r24, r28
    e0ae:	86 59       	subi	r24, 0x96	; 150
    e0b0:	9f 4f       	sbci	r25, 0xFF	; 255
    e0b2:	fc 01       	movw	r30, r24
    e0b4:	24 83       	std	Z+4, r18	; 0x04
    e0b6:	35 83       	std	Z+5, r19	; 0x05

   i_scalerX = utl_vMult16x16_32( as_xOrth, as_xOrth, 0, 3, 1, 13);   /*Q14*/
    e0b8:	ce 01       	movw	r24, r28
    e0ba:	82 5a       	subi	r24, 0xA2	; 162
    e0bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e0be:	9e 01       	movw	r18, r28
    e0c0:	22 5a       	subi	r18, 0xA2	; 162
    e0c2:	3f 4f       	sbci	r19, 0xFF	; 255
    e0c4:	b9 01       	movw	r22, r18
    e0c6:	20 e0       	ldi	r18, 0x00	; 0
    e0c8:	30 e0       	ldi	r19, 0x00	; 0
    e0ca:	a9 01       	movw	r20, r18
    e0cc:	03 e0       	ldi	r16, 0x03	; 3
    e0ce:	10 e0       	ldi	r17, 0x00	; 0
    e0d0:	ee 24       	eor	r14, r14
    e0d2:	e3 94       	inc	r14
    e0d4:	0f 2e       	mov	r0, r31
    e0d6:	fd e0       	ldi	r31, 0x0D	; 13
    e0d8:	cf 2e       	mov	r12, r31
    e0da:	f0 2d       	mov	r31, r0
    e0dc:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <utl_vMult16x16_32>
    e0e0:	dc 01       	movw	r26, r24
    e0e2:	cb 01       	movw	r24, r22
    e0e4:	8f 83       	std	Y+7, r24	; 0x07
    e0e6:	98 87       	std	Y+8, r25	; 0x08
    e0e8:	a9 87       	std	Y+9, r26	; 0x09
    e0ea:	ba 87       	std	Y+10, r27	; 0x0a
   i_scalerX = utl_hardLimit32_32(((int32_t)16383*(int32_t)3 -
    e0ec:	2d ef       	ldi	r18, 0xFD	; 253
    e0ee:	3f eb       	ldi	r19, 0xBF	; 191
    e0f0:	40 e0       	ldi	r20, 0x00	; 0
    e0f2:	50 e0       	ldi	r21, 0x00	; 0
    e0f4:	8f 81       	ldd	r24, Y+7	; 0x07
    e0f6:	98 85       	ldd	r25, Y+8	; 0x08
    e0f8:	a9 85       	ldd	r26, Y+9	; 0x09
    e0fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    e0fc:	79 01       	movw	r14, r18
    e0fe:	8a 01       	movw	r16, r20
    e100:	e8 1a       	sub	r14, r24
    e102:	f9 0a       	sbc	r15, r25
    e104:	0a 0b       	sbc	r16, r26
    e106:	1b 0b       	sbc	r17, r27
    e108:	d8 01       	movw	r26, r16
    e10a:	c7 01       	movw	r24, r14
    e10c:	b5 95       	asr	r27
    e10e:	a7 95       	ror	r26
    e110:	97 95       	ror	r25
    e112:	87 95       	ror	r24
    e114:	9e 01       	movw	r18, r28
    e116:	21 5b       	subi	r18, 0xB1	; 177
    e118:	3f 4f       	sbci	r19, 0xFF	; 255
    e11a:	f9 01       	movw	r30, r18
    e11c:	80 83       	st	Z, r24
    e11e:	91 83       	std	Z+1, r25	; 0x01
    e120:	a2 83       	std	Z+2, r26	; 0x02
    e122:	b3 83       	std	Z+3, r27	; 0x03
    e124:	ce 01       	movw	r24, r28
    e126:	8d 5a       	subi	r24, 0xAD	; 173
    e128:	9f 4f       	sbci	r25, 0xFF	; 255
    e12a:	2f e0       	ldi	r18, 0x0F	; 15
    e12c:	fc 01       	movw	r30, r24
    e12e:	20 83       	st	Z, r18
   }/*End utl_abs32_32*/

   static inline int32_t __attribute__((always_inline)) \
   utl_hardLimit32_32( int32_t i_x, int8_t c_n)
   {
      if( i_x > (((int32_t)1 << c_n) - 1))
    e130:	ce 01       	movw	r24, r28
    e132:	8d 5a       	subi	r24, 0xAD	; 173
    e134:	9f 4f       	sbci	r25, 0xFF	; 255
    e136:	fc 01       	movw	r30, r24
    e138:	80 81       	ld	r24, Z
    e13a:	28 2f       	mov	r18, r24
    e13c:	33 27       	eor	r19, r19
    e13e:	27 fd       	sbrc	r18, 7
    e140:	30 95       	com	r19
    e142:	81 e0       	ldi	r24, 0x01	; 1
    e144:	90 e0       	ldi	r25, 0x00	; 0
    e146:	a0 e0       	ldi	r26, 0x00	; 0
    e148:	b0 e0       	ldi	r27, 0x00	; 0
    e14a:	04 c0       	rjmp	.+8      	; 0xe154 <dcmNormalize+0x1020>
    e14c:	88 0f       	add	r24, r24
    e14e:	99 1f       	adc	r25, r25
    e150:	aa 1f       	adc	r26, r26
    e152:	bb 1f       	adc	r27, r27
    e154:	2a 95       	dec	r18
    e156:	d2 f7       	brpl	.-12     	; 0xe14c <dcmNormalize+0x1018>
    e158:	01 97       	sbiw	r24, 0x01	; 1
    e15a:	a1 09       	sbc	r26, r1
    e15c:	b1 09       	sbc	r27, r1
    e15e:	9e 01       	movw	r18, r28
    e160:	21 5b       	subi	r18, 0xB1	; 177
    e162:	3f 4f       	sbci	r19, 0xFF	; 255
    e164:	f9 01       	movw	r30, r18
    e166:	20 81       	ld	r18, Z
    e168:	31 81       	ldd	r19, Z+1	; 0x01
    e16a:	42 81       	ldd	r20, Z+2	; 0x02
    e16c:	53 81       	ldd	r21, Z+3	; 0x03
    e16e:	82 17       	cp	r24, r18
    e170:	93 07       	cpc	r25, r19
    e172:	a4 07       	cpc	r26, r20
    e174:	b5 07       	cpc	r27, r21
    e176:	cc f4       	brge	.+50     	; 0xe1aa <dcmNormalize+0x1076>
       {
          return (((int32_t)1 << c_n) - 1);
    e178:	ce 01       	movw	r24, r28
    e17a:	8d 5a       	subi	r24, 0xAD	; 173
    e17c:	9f 4f       	sbci	r25, 0xFF	; 255
    e17e:	fc 01       	movw	r30, r24
    e180:	80 81       	ld	r24, Z
    e182:	28 2f       	mov	r18, r24
    e184:	33 27       	eor	r19, r19
    e186:	27 fd       	sbrc	r18, 7
    e188:	30 95       	com	r19
    e18a:	81 e0       	ldi	r24, 0x01	; 1
    e18c:	90 e0       	ldi	r25, 0x00	; 0
    e18e:	a0 e0       	ldi	r26, 0x00	; 0
    e190:	b0 e0       	ldi	r27, 0x00	; 0
    e192:	02 2e       	mov	r0, r18
    e194:	04 c0       	rjmp	.+8      	; 0xe19e <dcmNormalize+0x106a>
    e196:	88 0f       	add	r24, r24
    e198:	99 1f       	adc	r25, r25
    e19a:	aa 1f       	adc	r26, r26
    e19c:	bb 1f       	adc	r27, r27
    e19e:	0a 94       	dec	r0
    e1a0:	d2 f7       	brpl	.-12     	; 0xe196 <dcmNormalize+0x1062>
    e1a2:	01 97       	sbiw	r24, 0x01	; 1
    e1a4:	a1 09       	sbc	r26, r1
    e1a6:	b1 09       	sbc	r27, r1
    e1a8:	4d c0       	rjmp	.+154    	; 0xe244 <dcmNormalize+0x1110>
      }
       else if( i_x < -((int32_t)1 << c_n))
    e1aa:	ce 01       	movw	r24, r28
    e1ac:	8d 5a       	subi	r24, 0xAD	; 173
    e1ae:	9f 4f       	sbci	r25, 0xFF	; 255
    e1b0:	fc 01       	movw	r30, r24
    e1b2:	80 81       	ld	r24, Z
    e1b4:	28 2f       	mov	r18, r24
    e1b6:	33 27       	eor	r19, r19
    e1b8:	27 fd       	sbrc	r18, 7
    e1ba:	30 95       	com	r19
    e1bc:	81 e0       	ldi	r24, 0x01	; 1
    e1be:	90 e0       	ldi	r25, 0x00	; 0
    e1c0:	a0 e0       	ldi	r26, 0x00	; 0
    e1c2:	b0 e0       	ldi	r27, 0x00	; 0
    e1c4:	04 c0       	rjmp	.+8      	; 0xe1ce <dcmNormalize+0x109a>
    e1c6:	88 0f       	add	r24, r24
    e1c8:	99 1f       	adc	r25, r25
    e1ca:	aa 1f       	adc	r26, r26
    e1cc:	bb 1f       	adc	r27, r27
    e1ce:	2a 95       	dec	r18
    e1d0:	d2 f7       	brpl	.-12     	; 0xe1c6 <dcmNormalize+0x1092>
    e1d2:	b0 95       	com	r27
    e1d4:	a0 95       	com	r26
    e1d6:	90 95       	com	r25
    e1d8:	81 95       	neg	r24
    e1da:	9f 4f       	sbci	r25, 0xFF	; 255
    e1dc:	af 4f       	sbci	r26, 0xFF	; 255
    e1de:	bf 4f       	sbci	r27, 0xFF	; 255
    e1e0:	9e 01       	movw	r18, r28
    e1e2:	21 5b       	subi	r18, 0xB1	; 177
    e1e4:	3f 4f       	sbci	r19, 0xFF	; 255
    e1e6:	f9 01       	movw	r30, r18
    e1e8:	20 81       	ld	r18, Z
    e1ea:	31 81       	ldd	r19, Z+1	; 0x01
    e1ec:	42 81       	ldd	r20, Z+2	; 0x02
    e1ee:	53 81       	ldd	r21, Z+3	; 0x03
    e1f0:	28 17       	cp	r18, r24
    e1f2:	39 07       	cpc	r19, r25
    e1f4:	4a 07       	cpc	r20, r26
    e1f6:	5b 07       	cpc	r21, r27
    e1f8:	ec f4       	brge	.+58     	; 0xe234 <dcmNormalize+0x1100>
       {
         return -((int32_t)1 << c_n);
    e1fa:	ce 01       	movw	r24, r28
    e1fc:	8d 5a       	subi	r24, 0xAD	; 173
    e1fe:	9f 4f       	sbci	r25, 0xFF	; 255
    e200:	fc 01       	movw	r30, r24
    e202:	80 81       	ld	r24, Z
    e204:	28 2f       	mov	r18, r24
    e206:	33 27       	eor	r19, r19
    e208:	27 fd       	sbrc	r18, 7
    e20a:	30 95       	com	r19
    e20c:	81 e0       	ldi	r24, 0x01	; 1
    e20e:	90 e0       	ldi	r25, 0x00	; 0
    e210:	a0 e0       	ldi	r26, 0x00	; 0
    e212:	b0 e0       	ldi	r27, 0x00	; 0
    e214:	02 2e       	mov	r0, r18
    e216:	04 c0       	rjmp	.+8      	; 0xe220 <dcmNormalize+0x10ec>
    e218:	88 0f       	add	r24, r24
    e21a:	99 1f       	adc	r25, r25
    e21c:	aa 1f       	adc	r26, r26
    e21e:	bb 1f       	adc	r27, r27
    e220:	0a 94       	dec	r0
    e222:	d2 f7       	brpl	.-12     	; 0xe218 <dcmNormalize+0x10e4>
    e224:	b0 95       	com	r27
    e226:	a0 95       	com	r26
    e228:	90 95       	com	r25
    e22a:	81 95       	neg	r24
    e22c:	9f 4f       	sbci	r25, 0xFF	; 255
    e22e:	af 4f       	sbci	r26, 0xFF	; 255
    e230:	bf 4f       	sbci	r27, 0xFF	; 255
    e232:	08 c0       	rjmp	.+16     	; 0xe244 <dcmNormalize+0x1110>
      }

      return i_x;
    e234:	ce 01       	movw	r24, r28
    e236:	81 5b       	subi	r24, 0xB1	; 177
    e238:	9f 4f       	sbci	r25, 0xFF	; 255
    e23a:	fc 01       	movw	r30, r24
    e23c:	80 81       	ld	r24, Z
    e23e:	91 81       	ldd	r25, Z+1	; 0x01
    e240:	a2 81       	ldd	r26, Z+2	; 0x02
    e242:	b3 81       	ldd	r27, Z+3	; 0x03
    e244:	8f 83       	std	Y+7, r24	; 0x07
    e246:	98 87       	std	Y+8, r25	; 0x08
    e248:	a9 87       	std	Y+9, r26	; 0x09
    e24a:	ba 87       	std	Y+10, r27	; 0x0a
   i_scalerX) >> 1, 15); /*Q14 number*/

   i_scalerY = utl_vMult16x16_32( as_yOrth, as_yOrth, 0, 3, 1, 13);   /*Q14*/
    e24c:	ce 01       	movw	r24, r28
    e24e:	8c 59       	subi	r24, 0x9C	; 156
    e250:	9f 4f       	sbci	r25, 0xFF	; 255
    e252:	9e 01       	movw	r18, r28
    e254:	2c 59       	subi	r18, 0x9C	; 156
    e256:	3f 4f       	sbci	r19, 0xFF	; 255
    e258:	b9 01       	movw	r22, r18
    e25a:	20 e0       	ldi	r18, 0x00	; 0
    e25c:	30 e0       	ldi	r19, 0x00	; 0
    e25e:	a9 01       	movw	r20, r18
    e260:	03 e0       	ldi	r16, 0x03	; 3
    e262:	10 e0       	ldi	r17, 0x00	; 0
    e264:	ee 24       	eor	r14, r14
    e266:	e3 94       	inc	r14
    e268:	0f 2e       	mov	r0, r31
    e26a:	fd e0       	ldi	r31, 0x0D	; 13
    e26c:	cf 2e       	mov	r12, r31
    e26e:	f0 2d       	mov	r31, r0
    e270:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <utl_vMult16x16_32>
    e274:	dc 01       	movw	r26, r24
    e276:	cb 01       	movw	r24, r22
    e278:	8b 87       	std	Y+11, r24	; 0x0b
    e27a:	9c 87       	std	Y+12, r25	; 0x0c
    e27c:	ad 87       	std	Y+13, r26	; 0x0d
    e27e:	be 87       	std	Y+14, r27	; 0x0e
   i_scalerY = utl_hardLimit32_32(((int32_t)16383*(int32_t)3 -
    e280:	2d ef       	ldi	r18, 0xFD	; 253
    e282:	3f eb       	ldi	r19, 0xBF	; 191
    e284:	40 e0       	ldi	r20, 0x00	; 0
    e286:	50 e0       	ldi	r21, 0x00	; 0
    e288:	8b 85       	ldd	r24, Y+11	; 0x0b
    e28a:	9c 85       	ldd	r25, Y+12	; 0x0c
    e28c:	ad 85       	ldd	r26, Y+13	; 0x0d
    e28e:	be 85       	ldd	r27, Y+14	; 0x0e
    e290:	79 01       	movw	r14, r18
    e292:	8a 01       	movw	r16, r20
    e294:	e8 1a       	sub	r14, r24
    e296:	f9 0a       	sbc	r15, r25
    e298:	0a 0b       	sbc	r16, r26
    e29a:	1b 0b       	sbc	r17, r27
    e29c:	d8 01       	movw	r26, r16
    e29e:	c7 01       	movw	r24, r14
    e2a0:	b5 95       	asr	r27
    e2a2:	a7 95       	ror	r26
    e2a4:	97 95       	ror	r25
    e2a6:	87 95       	ror	r24
    e2a8:	9e 01       	movw	r18, r28
    e2aa:	2c 5a       	subi	r18, 0xAC	; 172
    e2ac:	3f 4f       	sbci	r19, 0xFF	; 255
    e2ae:	f9 01       	movw	r30, r18
    e2b0:	80 83       	st	Z, r24
    e2b2:	91 83       	std	Z+1, r25	; 0x01
    e2b4:	a2 83       	std	Z+2, r26	; 0x02
    e2b6:	b3 83       	std	Z+3, r27	; 0x03
    e2b8:	ce 01       	movw	r24, r28
    e2ba:	88 5a       	subi	r24, 0xA8	; 168
    e2bc:	9f 4f       	sbci	r25, 0xFF	; 255
    e2be:	2f e0       	ldi	r18, 0x0F	; 15
    e2c0:	fc 01       	movw	r30, r24
    e2c2:	20 83       	st	Z, r18
   }/*End utl_abs32_32*/

   static inline int32_t __attribute__((always_inline)) \
   utl_hardLimit32_32( int32_t i_x, int8_t c_n)
   {
      if( i_x > (((int32_t)1 << c_n) - 1))
    e2c4:	ce 01       	movw	r24, r28
    e2c6:	88 5a       	subi	r24, 0xA8	; 168
    e2c8:	9f 4f       	sbci	r25, 0xFF	; 255
    e2ca:	fc 01       	movw	r30, r24
    e2cc:	80 81       	ld	r24, Z
    e2ce:	28 2f       	mov	r18, r24
    e2d0:	33 27       	eor	r19, r19
    e2d2:	27 fd       	sbrc	r18, 7
    e2d4:	30 95       	com	r19
    e2d6:	81 e0       	ldi	r24, 0x01	; 1
    e2d8:	90 e0       	ldi	r25, 0x00	; 0
    e2da:	a0 e0       	ldi	r26, 0x00	; 0
    e2dc:	b0 e0       	ldi	r27, 0x00	; 0
    e2de:	04 c0       	rjmp	.+8      	; 0xe2e8 <dcmNormalize+0x11b4>
    e2e0:	88 0f       	add	r24, r24
    e2e2:	99 1f       	adc	r25, r25
    e2e4:	aa 1f       	adc	r26, r26
    e2e6:	bb 1f       	adc	r27, r27
    e2e8:	2a 95       	dec	r18
    e2ea:	d2 f7       	brpl	.-12     	; 0xe2e0 <dcmNormalize+0x11ac>
    e2ec:	01 97       	sbiw	r24, 0x01	; 1
    e2ee:	a1 09       	sbc	r26, r1
    e2f0:	b1 09       	sbc	r27, r1
    e2f2:	9e 01       	movw	r18, r28
    e2f4:	2c 5a       	subi	r18, 0xAC	; 172
    e2f6:	3f 4f       	sbci	r19, 0xFF	; 255
    e2f8:	f9 01       	movw	r30, r18
    e2fa:	20 81       	ld	r18, Z
    e2fc:	31 81       	ldd	r19, Z+1	; 0x01
    e2fe:	42 81       	ldd	r20, Z+2	; 0x02
    e300:	53 81       	ldd	r21, Z+3	; 0x03
    e302:	82 17       	cp	r24, r18
    e304:	93 07       	cpc	r25, r19
    e306:	a4 07       	cpc	r26, r20
    e308:	b5 07       	cpc	r27, r21
    e30a:	cc f4       	brge	.+50     	; 0xe33e <dcmNormalize+0x120a>
       {
          return (((int32_t)1 << c_n) - 1);
    e30c:	ce 01       	movw	r24, r28
    e30e:	88 5a       	subi	r24, 0xA8	; 168
    e310:	9f 4f       	sbci	r25, 0xFF	; 255
    e312:	fc 01       	movw	r30, r24
    e314:	80 81       	ld	r24, Z
    e316:	28 2f       	mov	r18, r24
    e318:	33 27       	eor	r19, r19
    e31a:	27 fd       	sbrc	r18, 7
    e31c:	30 95       	com	r19
    e31e:	81 e0       	ldi	r24, 0x01	; 1
    e320:	90 e0       	ldi	r25, 0x00	; 0
    e322:	a0 e0       	ldi	r26, 0x00	; 0
    e324:	b0 e0       	ldi	r27, 0x00	; 0
    e326:	02 2e       	mov	r0, r18
    e328:	04 c0       	rjmp	.+8      	; 0xe332 <dcmNormalize+0x11fe>
    e32a:	88 0f       	add	r24, r24
    e32c:	99 1f       	adc	r25, r25
    e32e:	aa 1f       	adc	r26, r26
    e330:	bb 1f       	adc	r27, r27
    e332:	0a 94       	dec	r0
    e334:	d2 f7       	brpl	.-12     	; 0xe32a <dcmNormalize+0x11f6>
    e336:	01 97       	sbiw	r24, 0x01	; 1
    e338:	a1 09       	sbc	r26, r1
    e33a:	b1 09       	sbc	r27, r1
    e33c:	4d c0       	rjmp	.+154    	; 0xe3d8 <dcmNormalize+0x12a4>
      }
       else if( i_x < -((int32_t)1 << c_n))
    e33e:	ce 01       	movw	r24, r28
    e340:	88 5a       	subi	r24, 0xA8	; 168
    e342:	9f 4f       	sbci	r25, 0xFF	; 255
    e344:	fc 01       	movw	r30, r24
    e346:	80 81       	ld	r24, Z
    e348:	28 2f       	mov	r18, r24
    e34a:	33 27       	eor	r19, r19
    e34c:	27 fd       	sbrc	r18, 7
    e34e:	30 95       	com	r19
    e350:	81 e0       	ldi	r24, 0x01	; 1
    e352:	90 e0       	ldi	r25, 0x00	; 0
    e354:	a0 e0       	ldi	r26, 0x00	; 0
    e356:	b0 e0       	ldi	r27, 0x00	; 0
    e358:	04 c0       	rjmp	.+8      	; 0xe362 <dcmNormalize+0x122e>
    e35a:	88 0f       	add	r24, r24
    e35c:	99 1f       	adc	r25, r25
    e35e:	aa 1f       	adc	r26, r26
    e360:	bb 1f       	adc	r27, r27
    e362:	2a 95       	dec	r18
    e364:	d2 f7       	brpl	.-12     	; 0xe35a <dcmNormalize+0x1226>
    e366:	b0 95       	com	r27
    e368:	a0 95       	com	r26
    e36a:	90 95       	com	r25
    e36c:	81 95       	neg	r24
    e36e:	9f 4f       	sbci	r25, 0xFF	; 255
    e370:	af 4f       	sbci	r26, 0xFF	; 255
    e372:	bf 4f       	sbci	r27, 0xFF	; 255
    e374:	9e 01       	movw	r18, r28
    e376:	2c 5a       	subi	r18, 0xAC	; 172
    e378:	3f 4f       	sbci	r19, 0xFF	; 255
    e37a:	f9 01       	movw	r30, r18
    e37c:	20 81       	ld	r18, Z
    e37e:	31 81       	ldd	r19, Z+1	; 0x01
    e380:	42 81       	ldd	r20, Z+2	; 0x02
    e382:	53 81       	ldd	r21, Z+3	; 0x03
    e384:	28 17       	cp	r18, r24
    e386:	39 07       	cpc	r19, r25
    e388:	4a 07       	cpc	r20, r26
    e38a:	5b 07       	cpc	r21, r27
    e38c:	ec f4       	brge	.+58     	; 0xe3c8 <dcmNormalize+0x1294>
       {
         return -((int32_t)1 << c_n);
    e38e:	ce 01       	movw	r24, r28
    e390:	88 5a       	subi	r24, 0xA8	; 168
    e392:	9f 4f       	sbci	r25, 0xFF	; 255
    e394:	fc 01       	movw	r30, r24
    e396:	80 81       	ld	r24, Z
    e398:	28 2f       	mov	r18, r24
    e39a:	33 27       	eor	r19, r19
    e39c:	27 fd       	sbrc	r18, 7
    e39e:	30 95       	com	r19
    e3a0:	81 e0       	ldi	r24, 0x01	; 1
    e3a2:	90 e0       	ldi	r25, 0x00	; 0
    e3a4:	a0 e0       	ldi	r26, 0x00	; 0
    e3a6:	b0 e0       	ldi	r27, 0x00	; 0
    e3a8:	02 2e       	mov	r0, r18
    e3aa:	04 c0       	rjmp	.+8      	; 0xe3b4 <dcmNormalize+0x1280>
    e3ac:	88 0f       	add	r24, r24
    e3ae:	99 1f       	adc	r25, r25
    e3b0:	aa 1f       	adc	r26, r26
    e3b2:	bb 1f       	adc	r27, r27
    e3b4:	0a 94       	dec	r0
    e3b6:	d2 f7       	brpl	.-12     	; 0xe3ac <dcmNormalize+0x1278>
    e3b8:	b0 95       	com	r27
    e3ba:	a0 95       	com	r26
    e3bc:	90 95       	com	r25
    e3be:	81 95       	neg	r24
    e3c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e3c2:	af 4f       	sbci	r26, 0xFF	; 255
    e3c4:	bf 4f       	sbci	r27, 0xFF	; 255
    e3c6:	08 c0       	rjmp	.+16     	; 0xe3d8 <dcmNormalize+0x12a4>
      }

      return i_x;
    e3c8:	ce 01       	movw	r24, r28
    e3ca:	8c 5a       	subi	r24, 0xAC	; 172
    e3cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e3ce:	fc 01       	movw	r30, r24
    e3d0:	80 81       	ld	r24, Z
    e3d2:	91 81       	ldd	r25, Z+1	; 0x01
    e3d4:	a2 81       	ldd	r26, Z+2	; 0x02
    e3d6:	b3 81       	ldd	r27, Z+3	; 0x03
    e3d8:	8b 87       	std	Y+11, r24	; 0x0b
    e3da:	9c 87       	std	Y+12, r25	; 0x0c
    e3dc:	ad 87       	std	Y+13, r26	; 0x0d
    e3de:	be 87       	std	Y+14, r27	; 0x0e
   i_scalerY) >> 1, 15); /*Q14 number*/

   i_scalerZ = utl_vMult16x16_32( as_zOrth, as_zOrth, 0, 3, 1, 13);   /*Q14*/
    e3e0:	ce 01       	movw	r24, r28
    e3e2:	86 59       	subi	r24, 0x96	; 150
    e3e4:	9f 4f       	sbci	r25, 0xFF	; 255
    e3e6:	9e 01       	movw	r18, r28
    e3e8:	26 59       	subi	r18, 0x96	; 150
    e3ea:	3f 4f       	sbci	r19, 0xFF	; 255
    e3ec:	b9 01       	movw	r22, r18
    e3ee:	20 e0       	ldi	r18, 0x00	; 0
    e3f0:	30 e0       	ldi	r19, 0x00	; 0
    e3f2:	a9 01       	movw	r20, r18
    e3f4:	03 e0       	ldi	r16, 0x03	; 3
    e3f6:	10 e0       	ldi	r17, 0x00	; 0
    e3f8:	ee 24       	eor	r14, r14
    e3fa:	e3 94       	inc	r14
    e3fc:	0f 2e       	mov	r0, r31
    e3fe:	fd e0       	ldi	r31, 0x0D	; 13
    e400:	cf 2e       	mov	r12, r31
    e402:	f0 2d       	mov	r31, r0
    e404:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <utl_vMult16x16_32>
    e408:	dc 01       	movw	r26, r24
    e40a:	cb 01       	movw	r24, r22
    e40c:	8f 87       	std	Y+15, r24	; 0x0f
    e40e:	98 8b       	std	Y+16, r25	; 0x10
    e410:	a9 8b       	std	Y+17, r26	; 0x11
    e412:	ba 8b       	std	Y+18, r27	; 0x12
   i_scalerZ = utl_hardLimit32_32(((int32_t)16383*(int32_t)3 -
    e414:	2d ef       	ldi	r18, 0xFD	; 253
    e416:	3f eb       	ldi	r19, 0xBF	; 191
    e418:	40 e0       	ldi	r20, 0x00	; 0
    e41a:	50 e0       	ldi	r21, 0x00	; 0
    e41c:	8f 85       	ldd	r24, Y+15	; 0x0f
    e41e:	98 89       	ldd	r25, Y+16	; 0x10
    e420:	a9 89       	ldd	r26, Y+17	; 0x11
    e422:	ba 89       	ldd	r27, Y+18	; 0x12
    e424:	79 01       	movw	r14, r18
    e426:	8a 01       	movw	r16, r20
    e428:	e8 1a       	sub	r14, r24
    e42a:	f9 0a       	sbc	r15, r25
    e42c:	0a 0b       	sbc	r16, r26
    e42e:	1b 0b       	sbc	r17, r27
    e430:	d8 01       	movw	r26, r16
    e432:	c7 01       	movw	r24, r14
    e434:	b5 95       	asr	r27
    e436:	a7 95       	ror	r26
    e438:	97 95       	ror	r25
    e43a:	87 95       	ror	r24
    e43c:	9e 01       	movw	r18, r28
    e43e:	27 5a       	subi	r18, 0xA7	; 167
    e440:	3f 4f       	sbci	r19, 0xFF	; 255
    e442:	f9 01       	movw	r30, r18
    e444:	80 83       	st	Z, r24
    e446:	91 83       	std	Z+1, r25	; 0x01
    e448:	a2 83       	std	Z+2, r26	; 0x02
    e44a:	b3 83       	std	Z+3, r27	; 0x03
    e44c:	ce 01       	movw	r24, r28
    e44e:	83 5a       	subi	r24, 0xA3	; 163
    e450:	9f 4f       	sbci	r25, 0xFF	; 255
    e452:	2f e0       	ldi	r18, 0x0F	; 15
    e454:	fc 01       	movw	r30, r24
    e456:	20 83       	st	Z, r18
   }/*End utl_abs32_32*/

   static inline int32_t __attribute__((always_inline)) \
   utl_hardLimit32_32( int32_t i_x, int8_t c_n)
   {
      if( i_x > (((int32_t)1 << c_n) - 1))
    e458:	ce 01       	movw	r24, r28
    e45a:	83 5a       	subi	r24, 0xA3	; 163
    e45c:	9f 4f       	sbci	r25, 0xFF	; 255
    e45e:	fc 01       	movw	r30, r24
    e460:	80 81       	ld	r24, Z
    e462:	28 2f       	mov	r18, r24
    e464:	33 27       	eor	r19, r19
    e466:	27 fd       	sbrc	r18, 7
    e468:	30 95       	com	r19
    e46a:	81 e0       	ldi	r24, 0x01	; 1
    e46c:	90 e0       	ldi	r25, 0x00	; 0
    e46e:	a0 e0       	ldi	r26, 0x00	; 0
    e470:	b0 e0       	ldi	r27, 0x00	; 0
    e472:	04 c0       	rjmp	.+8      	; 0xe47c <dcmNormalize+0x1348>
    e474:	88 0f       	add	r24, r24
    e476:	99 1f       	adc	r25, r25
    e478:	aa 1f       	adc	r26, r26
    e47a:	bb 1f       	adc	r27, r27
    e47c:	2a 95       	dec	r18
    e47e:	d2 f7       	brpl	.-12     	; 0xe474 <dcmNormalize+0x1340>
    e480:	01 97       	sbiw	r24, 0x01	; 1
    e482:	a1 09       	sbc	r26, r1
    e484:	b1 09       	sbc	r27, r1
    e486:	9e 01       	movw	r18, r28
    e488:	27 5a       	subi	r18, 0xA7	; 167
    e48a:	3f 4f       	sbci	r19, 0xFF	; 255
    e48c:	f9 01       	movw	r30, r18
    e48e:	20 81       	ld	r18, Z
    e490:	31 81       	ldd	r19, Z+1	; 0x01
    e492:	42 81       	ldd	r20, Z+2	; 0x02
    e494:	53 81       	ldd	r21, Z+3	; 0x03
    e496:	82 17       	cp	r24, r18
    e498:	93 07       	cpc	r25, r19
    e49a:	a4 07       	cpc	r26, r20
    e49c:	b5 07       	cpc	r27, r21
    e49e:	cc f4       	brge	.+50     	; 0xe4d2 <dcmNormalize+0x139e>
       {
          return (((int32_t)1 << c_n) - 1);
    e4a0:	ce 01       	movw	r24, r28
    e4a2:	83 5a       	subi	r24, 0xA3	; 163
    e4a4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4a6:	fc 01       	movw	r30, r24
    e4a8:	80 81       	ld	r24, Z
    e4aa:	28 2f       	mov	r18, r24
    e4ac:	33 27       	eor	r19, r19
    e4ae:	27 fd       	sbrc	r18, 7
    e4b0:	30 95       	com	r19
    e4b2:	81 e0       	ldi	r24, 0x01	; 1
    e4b4:	90 e0       	ldi	r25, 0x00	; 0
    e4b6:	a0 e0       	ldi	r26, 0x00	; 0
    e4b8:	b0 e0       	ldi	r27, 0x00	; 0
    e4ba:	02 2e       	mov	r0, r18
    e4bc:	04 c0       	rjmp	.+8      	; 0xe4c6 <dcmNormalize+0x1392>
    e4be:	88 0f       	add	r24, r24
    e4c0:	99 1f       	adc	r25, r25
    e4c2:	aa 1f       	adc	r26, r26
    e4c4:	bb 1f       	adc	r27, r27
    e4c6:	0a 94       	dec	r0
    e4c8:	d2 f7       	brpl	.-12     	; 0xe4be <dcmNormalize+0x138a>
    e4ca:	01 97       	sbiw	r24, 0x01	; 1
    e4cc:	a1 09       	sbc	r26, r1
    e4ce:	b1 09       	sbc	r27, r1
    e4d0:	4d c0       	rjmp	.+154    	; 0xe56c <dcmNormalize+0x1438>
      }
       else if( i_x < -((int32_t)1 << c_n))
    e4d2:	ce 01       	movw	r24, r28
    e4d4:	83 5a       	subi	r24, 0xA3	; 163
    e4d6:	9f 4f       	sbci	r25, 0xFF	; 255
    e4d8:	fc 01       	movw	r30, r24
    e4da:	80 81       	ld	r24, Z
    e4dc:	28 2f       	mov	r18, r24
    e4de:	33 27       	eor	r19, r19
    e4e0:	27 fd       	sbrc	r18, 7
    e4e2:	30 95       	com	r19
    e4e4:	81 e0       	ldi	r24, 0x01	; 1
    e4e6:	90 e0       	ldi	r25, 0x00	; 0
    e4e8:	a0 e0       	ldi	r26, 0x00	; 0
    e4ea:	b0 e0       	ldi	r27, 0x00	; 0
    e4ec:	04 c0       	rjmp	.+8      	; 0xe4f6 <dcmNormalize+0x13c2>
    e4ee:	88 0f       	add	r24, r24
    e4f0:	99 1f       	adc	r25, r25
    e4f2:	aa 1f       	adc	r26, r26
    e4f4:	bb 1f       	adc	r27, r27
    e4f6:	2a 95       	dec	r18
    e4f8:	d2 f7       	brpl	.-12     	; 0xe4ee <dcmNormalize+0x13ba>
    e4fa:	b0 95       	com	r27
    e4fc:	a0 95       	com	r26
    e4fe:	90 95       	com	r25
    e500:	81 95       	neg	r24
    e502:	9f 4f       	sbci	r25, 0xFF	; 255
    e504:	af 4f       	sbci	r26, 0xFF	; 255
    e506:	bf 4f       	sbci	r27, 0xFF	; 255
    e508:	9e 01       	movw	r18, r28
    e50a:	27 5a       	subi	r18, 0xA7	; 167
    e50c:	3f 4f       	sbci	r19, 0xFF	; 255
    e50e:	f9 01       	movw	r30, r18
    e510:	20 81       	ld	r18, Z
    e512:	31 81       	ldd	r19, Z+1	; 0x01
    e514:	42 81       	ldd	r20, Z+2	; 0x02
    e516:	53 81       	ldd	r21, Z+3	; 0x03
    e518:	28 17       	cp	r18, r24
    e51a:	39 07       	cpc	r19, r25
    e51c:	4a 07       	cpc	r20, r26
    e51e:	5b 07       	cpc	r21, r27
    e520:	ec f4       	brge	.+58     	; 0xe55c <dcmNormalize+0x1428>
       {
         return -((int32_t)1 << c_n);
    e522:	ce 01       	movw	r24, r28
    e524:	83 5a       	subi	r24, 0xA3	; 163
    e526:	9f 4f       	sbci	r25, 0xFF	; 255
    e528:	fc 01       	movw	r30, r24
    e52a:	80 81       	ld	r24, Z
    e52c:	28 2f       	mov	r18, r24
    e52e:	33 27       	eor	r19, r19
    e530:	27 fd       	sbrc	r18, 7
    e532:	30 95       	com	r19
    e534:	81 e0       	ldi	r24, 0x01	; 1
    e536:	90 e0       	ldi	r25, 0x00	; 0
    e538:	a0 e0       	ldi	r26, 0x00	; 0
    e53a:	b0 e0       	ldi	r27, 0x00	; 0
    e53c:	02 2e       	mov	r0, r18
    e53e:	04 c0       	rjmp	.+8      	; 0xe548 <dcmNormalize+0x1414>
    e540:	88 0f       	add	r24, r24
    e542:	99 1f       	adc	r25, r25
    e544:	aa 1f       	adc	r26, r26
    e546:	bb 1f       	adc	r27, r27
    e548:	0a 94       	dec	r0
    e54a:	d2 f7       	brpl	.-12     	; 0xe540 <dcmNormalize+0x140c>
    e54c:	b0 95       	com	r27
    e54e:	a0 95       	com	r26
    e550:	90 95       	com	r25
    e552:	81 95       	neg	r24
    e554:	9f 4f       	sbci	r25, 0xFF	; 255
    e556:	af 4f       	sbci	r26, 0xFF	; 255
    e558:	bf 4f       	sbci	r27, 0xFF	; 255
    e55a:	08 c0       	rjmp	.+16     	; 0xe56c <dcmNormalize+0x1438>
      }

      return i_x;
    e55c:	ce 01       	movw	r24, r28
    e55e:	87 5a       	subi	r24, 0xA7	; 167
    e560:	9f 4f       	sbci	r25, 0xFF	; 255
    e562:	fc 01       	movw	r30, r24
    e564:	80 81       	ld	r24, Z
    e566:	91 81       	ldd	r25, Z+1	; 0x01
    e568:	a2 81       	ldd	r26, Z+2	; 0x02
    e56a:	b3 81       	ldd	r27, Z+3	; 0x03
    e56c:	8f 87       	std	Y+15, r24	; 0x0f
    e56e:	98 8b       	std	Y+16, r25	; 0x10
    e570:	a9 8b       	std	Y+17, r26	; 0x11
    e572:	ba 8b       	std	Y+18, r27	; 0x12
   i_scalerZ) >> 1, 15); /*Q14 number*/

   gt_insDev.as_dcm[0][0] = utl_mult16x16_32( i_scalerX, as_xOrth[0], \
    e574:	8f 81       	ldd	r24, Y+7	; 0x07
    e576:	98 85       	ldd	r25, Y+8	; 0x08
    e578:	9e 01       	movw	r18, r28
    e57a:	22 5a       	subi	r18, 0xA2	; 162
    e57c:	3f 4f       	sbci	r19, 0xFF	; 255
    e57e:	f9 01       	movw	r30, r18
    e580:	20 81       	ld	r18, Z
    e582:	31 81       	ldd	r19, Z+1	; 0x01
    e584:	b9 01       	movw	r22, r18
    e586:	4d e0       	ldi	r20, 0x0D	; 13
    e588:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e58c:	dc 01       	movw	r26, r24
    e58e:	cb 01       	movw	r24, r22
    e590:	80 93 00 24 	sts	0x2400, r24
    e594:	90 93 01 24 	sts	0x2401, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[0][1] = utl_mult16x16_32( i_scalerX, as_xOrth[1], \
    e598:	8f 81       	ldd	r24, Y+7	; 0x07
    e59a:	98 85       	ldd	r25, Y+8	; 0x08
    e59c:	9e 01       	movw	r18, r28
    e59e:	22 5a       	subi	r18, 0xA2	; 162
    e5a0:	3f 4f       	sbci	r19, 0xFF	; 255
    e5a2:	f9 01       	movw	r30, r18
    e5a4:	22 81       	ldd	r18, Z+2	; 0x02
    e5a6:	33 81       	ldd	r19, Z+3	; 0x03
    e5a8:	b9 01       	movw	r22, r18
    e5aa:	4d e0       	ldi	r20, 0x0D	; 13
    e5ac:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e5b0:	dc 01       	movw	r26, r24
    e5b2:	cb 01       	movw	r24, r22
    e5b4:	80 93 02 24 	sts	0x2402, r24
    e5b8:	90 93 03 24 	sts	0x2403, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[0][2] = utl_mult16x16_32( i_scalerX, as_xOrth[2], \
    e5bc:	8f 81       	ldd	r24, Y+7	; 0x07
    e5be:	98 85       	ldd	r25, Y+8	; 0x08
    e5c0:	9e 01       	movw	r18, r28
    e5c2:	22 5a       	subi	r18, 0xA2	; 162
    e5c4:	3f 4f       	sbci	r19, 0xFF	; 255
    e5c6:	f9 01       	movw	r30, r18
    e5c8:	24 81       	ldd	r18, Z+4	; 0x04
    e5ca:	35 81       	ldd	r19, Z+5	; 0x05
    e5cc:	b9 01       	movw	r22, r18
    e5ce:	4d e0       	ldi	r20, 0x0D	; 13
    e5d0:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e5d4:	dc 01       	movw	r26, r24
    e5d6:	cb 01       	movw	r24, r22
    e5d8:	80 93 04 24 	sts	0x2404, r24
    e5dc:	90 93 05 24 	sts	0x2405, r25
   13); /*Q14 to Q15*/

   gt_insDev.as_dcm[1][0] = utl_mult16x16_32( i_scalerY, as_yOrth[0], \
    e5e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    e5e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    e5e4:	9e 01       	movw	r18, r28
    e5e6:	2c 59       	subi	r18, 0x9C	; 156
    e5e8:	3f 4f       	sbci	r19, 0xFF	; 255
    e5ea:	f9 01       	movw	r30, r18
    e5ec:	20 81       	ld	r18, Z
    e5ee:	31 81       	ldd	r19, Z+1	; 0x01
    e5f0:	b9 01       	movw	r22, r18
    e5f2:	4d e0       	ldi	r20, 0x0D	; 13
    e5f4:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e5f8:	dc 01       	movw	r26, r24
    e5fa:	cb 01       	movw	r24, r22
    e5fc:	80 93 06 24 	sts	0x2406, r24
    e600:	90 93 07 24 	sts	0x2407, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[1][1] = utl_mult16x16_32( i_scalerY, as_yOrth[1], \
    e604:	8b 85       	ldd	r24, Y+11	; 0x0b
    e606:	9c 85       	ldd	r25, Y+12	; 0x0c
    e608:	9e 01       	movw	r18, r28
    e60a:	2c 59       	subi	r18, 0x9C	; 156
    e60c:	3f 4f       	sbci	r19, 0xFF	; 255
    e60e:	f9 01       	movw	r30, r18
    e610:	22 81       	ldd	r18, Z+2	; 0x02
    e612:	33 81       	ldd	r19, Z+3	; 0x03
    e614:	b9 01       	movw	r22, r18
    e616:	4d e0       	ldi	r20, 0x0D	; 13
    e618:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e61c:	dc 01       	movw	r26, r24
    e61e:	cb 01       	movw	r24, r22
    e620:	80 93 08 24 	sts	0x2408, r24
    e624:	90 93 09 24 	sts	0x2409, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[1][2] = utl_mult16x16_32( i_scalerY, as_yOrth[2], \
    e628:	8b 85       	ldd	r24, Y+11	; 0x0b
    e62a:	9c 85       	ldd	r25, Y+12	; 0x0c
    e62c:	9e 01       	movw	r18, r28
    e62e:	2c 59       	subi	r18, 0x9C	; 156
    e630:	3f 4f       	sbci	r19, 0xFF	; 255
    e632:	f9 01       	movw	r30, r18
    e634:	24 81       	ldd	r18, Z+4	; 0x04
    e636:	35 81       	ldd	r19, Z+5	; 0x05
    e638:	b9 01       	movw	r22, r18
    e63a:	4d e0       	ldi	r20, 0x0D	; 13
    e63c:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e640:	dc 01       	movw	r26, r24
    e642:	cb 01       	movw	r24, r22
    e644:	80 93 0a 24 	sts	0x240A, r24
    e648:	90 93 0b 24 	sts	0x240B, r25
   13); /*Q14 to Q15*/

   gt_insDev.as_dcm[2][0] = utl_mult16x16_32( i_scalerZ, as_zOrth[0], \
    e64c:	8f 85       	ldd	r24, Y+15	; 0x0f
    e64e:	98 89       	ldd	r25, Y+16	; 0x10
    e650:	9e 01       	movw	r18, r28
    e652:	26 59       	subi	r18, 0x96	; 150
    e654:	3f 4f       	sbci	r19, 0xFF	; 255
    e656:	f9 01       	movw	r30, r18
    e658:	20 81       	ld	r18, Z
    e65a:	31 81       	ldd	r19, Z+1	; 0x01
    e65c:	b9 01       	movw	r22, r18
    e65e:	4d e0       	ldi	r20, 0x0D	; 13
    e660:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e664:	dc 01       	movw	r26, r24
    e666:	cb 01       	movw	r24, r22
    e668:	80 93 0c 24 	sts	0x240C, r24
    e66c:	90 93 0d 24 	sts	0x240D, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[2][1] = utl_mult16x16_32( i_scalerZ, as_zOrth[1], \
    e670:	8f 85       	ldd	r24, Y+15	; 0x0f
    e672:	98 89       	ldd	r25, Y+16	; 0x10
    e674:	9e 01       	movw	r18, r28
    e676:	26 59       	subi	r18, 0x96	; 150
    e678:	3f 4f       	sbci	r19, 0xFF	; 255
    e67a:	f9 01       	movw	r30, r18
    e67c:	22 81       	ldd	r18, Z+2	; 0x02
    e67e:	33 81       	ldd	r19, Z+3	; 0x03
    e680:	b9 01       	movw	r22, r18
    e682:	4d e0       	ldi	r20, 0x0D	; 13
    e684:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e688:	dc 01       	movw	r26, r24
    e68a:	cb 01       	movw	r24, r22
    e68c:	80 93 0e 24 	sts	0x240E, r24
    e690:	90 93 0f 24 	sts	0x240F, r25
   13); /*Q14 to Q15*/
   gt_insDev.as_dcm[2][2] = utl_mult16x16_32( i_scalerZ, as_zOrth[2], \
    e694:	8f 85       	ldd	r24, Y+15	; 0x0f
    e696:	98 89       	ldd	r25, Y+16	; 0x10
    e698:	9e 01       	movw	r18, r28
    e69a:	26 59       	subi	r18, 0x96	; 150
    e69c:	3f 4f       	sbci	r19, 0xFF	; 255
    e69e:	f9 01       	movw	r30, r18
    e6a0:	24 81       	ldd	r18, Z+4	; 0x04
    e6a2:	35 81       	ldd	r19, Z+5	; 0x05
    e6a4:	b9 01       	movw	r22, r18
    e6a6:	4d e0       	ldi	r20, 0x0D	; 13
    e6a8:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    e6ac:	dc 01       	movw	r26, r24
    e6ae:	cb 01       	movw	r24, r22
    e6b0:	80 93 10 24 	sts	0x2410, r24
    e6b4:	90 93 11 24 	sts	0x2411, r25
   13); /*Q14 to Q15*/

}/*End dcmNormalize*/
    e6b8:	c9 56       	subi	r28, 0x69	; 105
    e6ba:	df 4f       	sbci	r29, 0xFF	; 255
    e6bc:	cd bf       	out	0x3d, r28	; 61
    e6be:	de bf       	out	0x3e, r29	; 62
    e6c0:	df 91       	pop	r29
    e6c2:	cf 91       	pop	r28
    e6c4:	1f 91       	pop	r17
    e6c6:	0f 91       	pop	r16
    e6c8:	ff 90       	pop	r15
    e6ca:	ef 90       	pop	r14
    e6cc:	cf 90       	pop	r12
    e6ce:	08 95       	ret

0000e6d0 <dcmIntegration>:
 * Perform DCM integration according to eq 5.6 and 5.7 of [1]
 *---------------------------------------------------------------------------*/
static inline void dcmIntegration( int32_t *pi_gyr,
                                   int16_t *ps_dPhase,
                                   int16_t s_dt)
{
    e6d0:	8f 92       	push	r8
    e6d2:	af 92       	push	r10
    e6d4:	cf 92       	push	r12
    e6d6:	df 92       	push	r13
    e6d8:	ef 92       	push	r14
    e6da:	ff 92       	push	r15
    e6dc:	0f 93       	push	r16
    e6de:	cf 93       	push	r28
    e6e0:	df 93       	push	r29
    e6e2:	cd b7       	in	r28, 0x3d	; 61
    e6e4:	de b7       	in	r29, 0x3e	; 62
    e6e6:	ac 97       	sbiw	r28, 0x2c	; 44
    e6e8:	cd bf       	out	0x3d, r28	; 61
    e6ea:	de bf       	out	0x3e, r29	; 62
    e6ec:	8f a3       	lds	r24, 0x5f
    e6ee:	98 a7       	lds	r25, 0x78
    e6f0:	69 a7       	lds	r22, 0x79
    e6f2:	7a a7       	lds	r23, 0x7a
    e6f4:	4b a7       	lds	r20, 0x7b
    e6f6:	5c a7       	lds	r21, 0x7c
   int16_t as_skew[3][3];
   int16_t as_tempDcm[3][3];
   int8_t c_row;
   int8_t c_col;

   ps_dPhase[0] = limitGyroRot( utl_mult32x32_32( pi_gyr[0], \
    e6f8:	8f a1       	lds	r24, 0x4f
    e6fa:	98 a5       	lds	r25, 0x68
    e6fc:	fc 01       	movw	r30, r24
    e6fe:	80 81       	ld	r24, Z
    e700:	91 81       	ldd	r25, Z+1	; 0x01
    e702:	a2 81       	ldd	r26, Z+2	; 0x02
    e704:	b3 81       	ldd	r27, Z+3	; 0x03
    e706:	2b a5       	lds	r18, 0x6b
    e708:	3c a5       	lds	r19, 0x6c
    e70a:	44 27       	eor	r20, r20
    e70c:	37 fd       	sbrc	r19, 7
    e70e:	40 95       	com	r20
    e710:	54 2f       	mov	r21, r20
    e712:	bc 01       	movw	r22, r24
    e714:	cd 01       	movw	r24, r26
    e716:	00 e1       	ldi	r16, 0x10	; 16
    e718:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    e71c:	dc 01       	movw	r26, r24
    e71e:	cb 01       	movw	r24, r22
    e720:	bc 01       	movw	r22, r24
    e722:	cd 01       	movw	r24, r26
    e724:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <limitGyroRot>
    e728:	9c 01       	movw	r18, r24
    e72a:	89 a5       	lds	r24, 0x69
    e72c:	9a a5       	lds	r25, 0x6a
    e72e:	fc 01       	movw	r30, r24
    e730:	20 83       	st	Z, r18
    e732:	31 83       	std	Z+1, r19	; 0x01
   (int32_t)s_dt, 16)); /*Q14*/
   ps_dPhase[1] = limitGyroRot( utl_mult32x32_32( pi_gyr[1], \
    e734:	89 a5       	lds	r24, 0x69
    e736:	9a a5       	lds	r25, 0x6a
    e738:	ee 24       	eor	r14, r14
    e73a:	ff 24       	eor	r15, r15
    e73c:	68 94       	set
    e73e:	e1 f8       	bld	r14, 1
    e740:	e8 0e       	add	r14, r24
    e742:	f9 1e       	adc	r15, r25
    e744:	8f a1       	lds	r24, 0x4f
    e746:	98 a5       	lds	r25, 0x68
    e748:	04 96       	adiw	r24, 0x04	; 4
    e74a:	fc 01       	movw	r30, r24
    e74c:	80 81       	ld	r24, Z
    e74e:	91 81       	ldd	r25, Z+1	; 0x01
    e750:	a2 81       	ldd	r26, Z+2	; 0x02
    e752:	b3 81       	ldd	r27, Z+3	; 0x03
    e754:	2b a5       	lds	r18, 0x6b
    e756:	3c a5       	lds	r19, 0x6c
    e758:	44 27       	eor	r20, r20
    e75a:	37 fd       	sbrc	r19, 7
    e75c:	40 95       	com	r20
    e75e:	54 2f       	mov	r21, r20
    e760:	bc 01       	movw	r22, r24
    e762:	cd 01       	movw	r24, r26
    e764:	00 e1       	ldi	r16, 0x10	; 16
    e766:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    e76a:	dc 01       	movw	r26, r24
    e76c:	cb 01       	movw	r24, r22
    e76e:	bc 01       	movw	r22, r24
    e770:	cd 01       	movw	r24, r26
    e772:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <limitGyroRot>
    e776:	f7 01       	movw	r30, r14
    e778:	80 83       	st	Z, r24
    e77a:	91 83       	std	Z+1, r25	; 0x01
   (int32_t)s_dt, 16)); /*Q14*/
   ps_dPhase[2] = limitGyroRot( utl_mult32x32_32( pi_gyr[2], \
    e77c:	89 a5       	lds	r24, 0x69
    e77e:	9a a5       	lds	r25, 0x6a
    e780:	ee 24       	eor	r14, r14
    e782:	ff 24       	eor	r15, r15
    e784:	68 94       	set
    e786:	e2 f8       	bld	r14, 2
    e788:	e8 0e       	add	r14, r24
    e78a:	f9 1e       	adc	r15, r25
    e78c:	8f a1       	lds	r24, 0x4f
    e78e:	98 a5       	lds	r25, 0x68
    e790:	08 96       	adiw	r24, 0x08	; 8
    e792:	fc 01       	movw	r30, r24
    e794:	80 81       	ld	r24, Z
    e796:	91 81       	ldd	r25, Z+1	; 0x01
    e798:	a2 81       	ldd	r26, Z+2	; 0x02
    e79a:	b3 81       	ldd	r27, Z+3	; 0x03
    e79c:	2b a5       	lds	r18, 0x6b
    e79e:	3c a5       	lds	r19, 0x6c
    e7a0:	44 27       	eor	r20, r20
    e7a2:	37 fd       	sbrc	r19, 7
    e7a4:	40 95       	com	r20
    e7a6:	54 2f       	mov	r21, r20
    e7a8:	bc 01       	movw	r22, r24
    e7aa:	cd 01       	movw	r24, r26
    e7ac:	00 e1       	ldi	r16, 0x10	; 16
    e7ae:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    e7b2:	dc 01       	movw	r26, r24
    e7b4:	cb 01       	movw	r24, r22
    e7b6:	bc 01       	movw	r22, r24
    e7b8:	cd 01       	movw	r24, r26
    e7ba:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <limitGyroRot>
    e7be:	f7 01       	movw	r30, r14
    e7c0:	80 83       	st	Z, r24
    e7c2:	91 83       	std	Z+1, r25	; 0x01
   (int32_t)s_dt, 16)); /*Q14*/

   as_skew[0][0] = 16383;//32767;
    e7c4:	8f ef       	ldi	r24, 0xFF	; 255
    e7c6:	9f e3       	ldi	r25, 0x3F	; 63
    e7c8:	8b 83       	std	Y+3, r24	; 0x03
    e7ca:	9c 83       	std	Y+4, r25	; 0x04
   as_skew[0][1] = -ps_dPhase[2];
    e7cc:	89 a5       	lds	r24, 0x69
    e7ce:	9a a5       	lds	r25, 0x6a
    e7d0:	04 96       	adiw	r24, 0x04	; 4
    e7d2:	fc 01       	movw	r30, r24
    e7d4:	80 81       	ld	r24, Z
    e7d6:	91 81       	ldd	r25, Z+1	; 0x01
    e7d8:	90 95       	com	r25
    e7da:	81 95       	neg	r24
    e7dc:	9f 4f       	sbci	r25, 0xFF	; 255
    e7de:	8d 83       	std	Y+5, r24	; 0x05
    e7e0:	9e 83       	std	Y+6, r25	; 0x06
   as_skew[0][2] = ps_dPhase[1];
    e7e2:	89 a5       	lds	r24, 0x69
    e7e4:	9a a5       	lds	r25, 0x6a
    e7e6:	fc 01       	movw	r30, r24
    e7e8:	82 81       	ldd	r24, Z+2	; 0x02
    e7ea:	93 81       	ldd	r25, Z+3	; 0x03
    e7ec:	8f 83       	std	Y+7, r24	; 0x07
    e7ee:	98 87       	std	Y+8, r25	; 0x08

   as_skew[1][0] = ps_dPhase[2];
    e7f0:	89 a5       	lds	r24, 0x69
    e7f2:	9a a5       	lds	r25, 0x6a
    e7f4:	fc 01       	movw	r30, r24
    e7f6:	84 81       	ldd	r24, Z+4	; 0x04
    e7f8:	95 81       	ldd	r25, Z+5	; 0x05
    e7fa:	89 87       	std	Y+9, r24	; 0x09
    e7fc:	9a 87       	std	Y+10, r25	; 0x0a
   as_skew[1][1] = 16383;//32767;
    e7fe:	8f ef       	ldi	r24, 0xFF	; 255
    e800:	9f e3       	ldi	r25, 0x3F	; 63
    e802:	8b 87       	std	Y+11, r24	; 0x0b
    e804:	9c 87       	std	Y+12, r25	; 0x0c
   as_skew[1][2] = -ps_dPhase[0];
    e806:	89 a5       	lds	r24, 0x69
    e808:	9a a5       	lds	r25, 0x6a
    e80a:	fc 01       	movw	r30, r24
    e80c:	80 81       	ld	r24, Z
    e80e:	91 81       	ldd	r25, Z+1	; 0x01
    e810:	90 95       	com	r25
    e812:	81 95       	neg	r24
    e814:	9f 4f       	sbci	r25, 0xFF	; 255
    e816:	8d 87       	std	Y+13, r24	; 0x0d
    e818:	9e 87       	std	Y+14, r25	; 0x0e

   as_skew[2][0] = -ps_dPhase[1];
    e81a:	89 a5       	lds	r24, 0x69
    e81c:	9a a5       	lds	r25, 0x6a
    e81e:	02 96       	adiw	r24, 0x02	; 2
    e820:	fc 01       	movw	r30, r24
    e822:	80 81       	ld	r24, Z
    e824:	91 81       	ldd	r25, Z+1	; 0x01
    e826:	90 95       	com	r25
    e828:	81 95       	neg	r24
    e82a:	9f 4f       	sbci	r25, 0xFF	; 255
    e82c:	8f 87       	std	Y+15, r24	; 0x0f
    e82e:	98 8b       	std	Y+16, r25	; 0x10
   as_skew[2][1] = ps_dPhase[0];
    e830:	89 a5       	lds	r24, 0x69
    e832:	9a a5       	lds	r25, 0x6a
    e834:	fc 01       	movw	r30, r24
    e836:	80 81       	ld	r24, Z
    e838:	91 81       	ldd	r25, Z+1	; 0x01
    e83a:	89 8b       	std	Y+17, r24	; 0x11
    e83c:	9a 8b       	std	Y+18, r25	; 0x12
   as_skew[2][2] = 16383;//32767;
    e83e:	8f ef       	ldi	r24, 0xFF	; 255
    e840:	9f e3       	ldi	r25, 0x3F	; 63
    e842:	8b 8b       	std	Y+19, r24	; 0x13
    e844:	9c 8b       	std	Y+20, r25	; 0x14

   /*------------------------------------------------------------------------*
    * Scale the DCM so that its a Q1.14 value, in order to prevent an
    * overflow in the matrix multiply routine.
    *------------------------------------------------------------------------*/
   as_tempDcm[0][0] = gt_insDev.as_dcm[0][0] >> 1;
    e846:	80 91 00 24 	lds	r24, 0x2400
    e84a:	90 91 01 24 	lds	r25, 0x2401
    e84e:	95 95       	asr	r25
    e850:	87 95       	ror	r24
    e852:	8d 8b       	std	Y+21, r24	; 0x15
    e854:	9e 8b       	std	Y+22, r25	; 0x16
   as_tempDcm[0][1] = gt_insDev.as_dcm[0][1] >> 1;
    e856:	80 91 02 24 	lds	r24, 0x2402
    e85a:	90 91 03 24 	lds	r25, 0x2403
    e85e:	95 95       	asr	r25
    e860:	87 95       	ror	r24
    e862:	8f 8b       	std	Y+23, r24	; 0x17
    e864:	98 8f       	std	Y+24, r25	; 0x18
   as_tempDcm[0][2] = gt_insDev.as_dcm[0][2] >> 1;
    e866:	80 91 04 24 	lds	r24, 0x2404
    e86a:	90 91 05 24 	lds	r25, 0x2405
    e86e:	95 95       	asr	r25
    e870:	87 95       	ror	r24
    e872:	89 8f       	std	Y+25, r24	; 0x19
    e874:	9a 8f       	std	Y+26, r25	; 0x1a
   as_tempDcm[1][0] = gt_insDev.as_dcm[1][0] >> 1;
    e876:	80 91 06 24 	lds	r24, 0x2406
    e87a:	90 91 07 24 	lds	r25, 0x2407
    e87e:	95 95       	asr	r25
    e880:	87 95       	ror	r24
    e882:	8b 8f       	std	Y+27, r24	; 0x1b
    e884:	9c 8f       	std	Y+28, r25	; 0x1c
   as_tempDcm[1][1] = gt_insDev.as_dcm[1][1] >> 1;
    e886:	80 91 08 24 	lds	r24, 0x2408
    e88a:	90 91 09 24 	lds	r25, 0x2409
    e88e:	95 95       	asr	r25
    e890:	87 95       	ror	r24
    e892:	8d 8f       	std	Y+29, r24	; 0x1d
    e894:	9e 8f       	std	Y+30, r25	; 0x1e
   as_tempDcm[1][2] = gt_insDev.as_dcm[1][2] >> 1;
    e896:	80 91 0a 24 	lds	r24, 0x240A
    e89a:	90 91 0b 24 	lds	r25, 0x240B
    e89e:	95 95       	asr	r25
    e8a0:	87 95       	ror	r24
    e8a2:	8f 8f       	std	Y+31, r24	; 0x1f
    e8a4:	98 a3       	lds	r25, 0x58
   as_tempDcm[2][0] = gt_insDev.as_dcm[2][0] >> 1;
    e8a6:	80 91 0c 24 	lds	r24, 0x240C
    e8aa:	90 91 0d 24 	lds	r25, 0x240D
    e8ae:	95 95       	asr	r25
    e8b0:	87 95       	ror	r24
    e8b2:	89 a3       	lds	r24, 0x59
    e8b4:	9a a3       	lds	r25, 0x5a
   as_tempDcm[2][1] = gt_insDev.as_dcm[2][1] >> 1;
    e8b6:	80 91 0e 24 	lds	r24, 0x240E
    e8ba:	90 91 0f 24 	lds	r25, 0x240F
    e8be:	95 95       	asr	r25
    e8c0:	87 95       	ror	r24
    e8c2:	8b a3       	lds	r24, 0x5b
    e8c4:	9c a3       	lds	r25, 0x5c
   as_tempDcm[2][2] = gt_insDev.as_dcm[2][2] >> 1;
    e8c6:	80 91 10 24 	lds	r24, 0x2410
    e8ca:	90 91 11 24 	lds	r25, 0x2411
    e8ce:	95 95       	asr	r25
    e8d0:	87 95       	ror	r24
    e8d2:	8d a3       	lds	r24, 0x5d
    e8d4:	9e a3       	lds	r25, 0x5e

   utl_matMult16x16_16( &as_tempDcm[0][0],
    e8d6:	ce 01       	movw	r24, r28
    e8d8:	45 96       	adiw	r24, 0x15	; 21
                        3,
                        3,
                        &as_skew[0][0],
    e8da:	9e 01       	movw	r18, r28
    e8dc:	2d 5f       	subi	r18, 0xFD	; 253
    e8de:	3f 4f       	sbci	r19, 0xFF	; 255
   as_tempDcm[1][2] = gt_insDev.as_dcm[1][2] >> 1;
   as_tempDcm[2][0] = gt_insDev.as_dcm[2][0] >> 1;
   as_tempDcm[2][1] = gt_insDev.as_dcm[2][1] >> 1;
   as_tempDcm[2][2] = gt_insDev.as_dcm[2][2] >> 1;

   utl_matMult16x16_16( &as_tempDcm[0][0],
    e8e0:	e0 e0       	ldi	r30, 0x00	; 0
    e8e2:	f4 e2       	ldi	r31, 0x24	; 36
    e8e4:	63 e0       	ldi	r22, 0x03	; 3
    e8e6:	43 e0       	ldi	r20, 0x03	; 3
    e8e8:	03 e0       	ldi	r16, 0x03	; 3
    e8ea:	0f 2e       	mov	r0, r31
    e8ec:	f3 e0       	ldi	r31, 0x03	; 3
    e8ee:	ef 2e       	mov	r14, r31
    e8f0:	f0 2d       	mov	r31, r0
    e8f2:	6f 01       	movw	r12, r30
    e8f4:	aa 24       	eor	r10, r10
    e8f6:	0f 2e       	mov	r0, r31
    e8f8:	fe e0       	ldi	r31, 0x0E	; 14
    e8fa:	8f 2e       	mov	r8, r31
    e8fc:	f0 2d       	mov	r31, r0
    e8fe:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        14);

   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
    e902:	19 82       	std	Y+1, r1	; 0x01
    e904:	ac c0       	rjmp	.+344    	; 0xea5e <dcmIntegration+0x38e>
   {
      for( c_col = 0; c_col < 3; c_col++)
    e906:	1a 82       	std	Y+2, r1	; 0x02
    e908:	a3 c0       	rjmp	.+326    	; 0xea50 <dcmIntegration+0x380>
      {
         if( gt_insDev.as_dcm[c_row][c_col] > 16383)
    e90a:	89 81       	ldd	r24, Y+1	; 0x01
    e90c:	28 2f       	mov	r18, r24
    e90e:	33 27       	eor	r19, r19
    e910:	27 fd       	sbrc	r18, 7
    e912:	30 95       	com	r19
    e914:	8a 81       	ldd	r24, Y+2	; 0x02
    e916:	48 2f       	mov	r20, r24
    e918:	55 27       	eor	r21, r21
    e91a:	47 fd       	sbrc	r20, 7
    e91c:	50 95       	com	r21
    e91e:	c9 01       	movw	r24, r18
    e920:	88 0f       	add	r24, r24
    e922:	99 1f       	adc	r25, r25
    e924:	82 0f       	add	r24, r18
    e926:	93 1f       	adc	r25, r19
    e928:	84 0f       	add	r24, r20
    e92a:	95 1f       	adc	r25, r21
    e92c:	88 0f       	add	r24, r24
    e92e:	99 1f       	adc	r25, r25
    e930:	80 50       	subi	r24, 0x00	; 0
    e932:	9c 4d       	sbci	r25, 0xDC	; 220
    e934:	fc 01       	movw	r30, r24
    e936:	80 81       	ld	r24, Z
    e938:	91 81       	ldd	r25, Z+1	; 0x01
    e93a:	f0 e4       	ldi	r31, 0x40	; 64
    e93c:	80 30       	cpi	r24, 0x00	; 0
    e93e:	9f 07       	cpc	r25, r31
    e940:	dc f0       	brlt	.+54     	; 0xe978 <dcmIntegration+0x2a8>
            gt_insDev.as_dcm[c_row][c_col] = 16383;
    e942:	89 81       	ldd	r24, Y+1	; 0x01
    e944:	28 2f       	mov	r18, r24
    e946:	33 27       	eor	r19, r19
    e948:	27 fd       	sbrc	r18, 7
    e94a:	30 95       	com	r19
    e94c:	8a 81       	ldd	r24, Y+2	; 0x02
    e94e:	48 2f       	mov	r20, r24
    e950:	55 27       	eor	r21, r21
    e952:	47 fd       	sbrc	r20, 7
    e954:	50 95       	com	r21
    e956:	c9 01       	movw	r24, r18
    e958:	88 0f       	add	r24, r24
    e95a:	99 1f       	adc	r25, r25
    e95c:	82 0f       	add	r24, r18
    e95e:	93 1f       	adc	r25, r19
    e960:	84 0f       	add	r24, r20
    e962:	95 1f       	adc	r25, r21
    e964:	88 0f       	add	r24, r24
    e966:	99 1f       	adc	r25, r25
    e968:	80 50       	subi	r24, 0x00	; 0
    e96a:	9c 4d       	sbci	r25, 0xDC	; 220
    e96c:	2f ef       	ldi	r18, 0xFF	; 255
    e96e:	3f e3       	ldi	r19, 0x3F	; 63
    e970:	fc 01       	movw	r30, r24
    e972:	20 83       	st	Z, r18
    e974:	31 83       	std	Z+1, r19	; 0x01
    e976:	36 c0       	rjmp	.+108    	; 0xe9e4 <dcmIntegration+0x314>
         else if( gt_insDev.as_dcm[c_row][c_col] < -16384)
    e978:	89 81       	ldd	r24, Y+1	; 0x01
    e97a:	28 2f       	mov	r18, r24
    e97c:	33 27       	eor	r19, r19
    e97e:	27 fd       	sbrc	r18, 7
    e980:	30 95       	com	r19
    e982:	8a 81       	ldd	r24, Y+2	; 0x02
    e984:	48 2f       	mov	r20, r24
    e986:	55 27       	eor	r21, r21
    e988:	47 fd       	sbrc	r20, 7
    e98a:	50 95       	com	r21
    e98c:	c9 01       	movw	r24, r18
    e98e:	88 0f       	add	r24, r24
    e990:	99 1f       	adc	r25, r25
    e992:	82 0f       	add	r24, r18
    e994:	93 1f       	adc	r25, r19
    e996:	84 0f       	add	r24, r20
    e998:	95 1f       	adc	r25, r21
    e99a:	88 0f       	add	r24, r24
    e99c:	99 1f       	adc	r25, r25
    e99e:	80 50       	subi	r24, 0x00	; 0
    e9a0:	9c 4d       	sbci	r25, 0xDC	; 220
    e9a2:	fc 01       	movw	r30, r24
    e9a4:	80 81       	ld	r24, Z
    e9a6:	91 81       	ldd	r25, Z+1	; 0x01
    e9a8:	f0 ec       	ldi	r31, 0xC0	; 192
    e9aa:	80 30       	cpi	r24, 0x00	; 0
    e9ac:	9f 07       	cpc	r25, r31
    e9ae:	d4 f4       	brge	.+52     	; 0xe9e4 <dcmIntegration+0x314>
            gt_insDev.as_dcm[c_row][c_col] = -16384;
    e9b0:	89 81       	ldd	r24, Y+1	; 0x01
    e9b2:	28 2f       	mov	r18, r24
    e9b4:	33 27       	eor	r19, r19
    e9b6:	27 fd       	sbrc	r18, 7
    e9b8:	30 95       	com	r19
    e9ba:	8a 81       	ldd	r24, Y+2	; 0x02
    e9bc:	48 2f       	mov	r20, r24
    e9be:	55 27       	eor	r21, r21
    e9c0:	47 fd       	sbrc	r20, 7
    e9c2:	50 95       	com	r21
    e9c4:	c9 01       	movw	r24, r18
    e9c6:	88 0f       	add	r24, r24
    e9c8:	99 1f       	adc	r25, r25
    e9ca:	82 0f       	add	r24, r18
    e9cc:	93 1f       	adc	r25, r19
    e9ce:	84 0f       	add	r24, r20
    e9d0:	95 1f       	adc	r25, r21
    e9d2:	88 0f       	add	r24, r24
    e9d4:	99 1f       	adc	r25, r25
    e9d6:	80 50       	subi	r24, 0x00	; 0
    e9d8:	9c 4d       	sbci	r25, 0xDC	; 220
    e9da:	20 e0       	ldi	r18, 0x00	; 0
    e9dc:	30 ec       	ldi	r19, 0xC0	; 192
    e9de:	fc 01       	movw	r30, r24
    e9e0:	20 83       	st	Z, r18
    e9e2:	31 83       	std	Z+1, r19	; 0x01

         gt_insDev.as_dcm[c_row][c_col] = gt_insDev.as_dcm[c_row][c_col] << 1;
    e9e4:	89 81       	ldd	r24, Y+1	; 0x01
    e9e6:	28 2f       	mov	r18, r24
    e9e8:	33 27       	eor	r19, r19
    e9ea:	27 fd       	sbrc	r18, 7
    e9ec:	30 95       	com	r19
    e9ee:	8a 81       	ldd	r24, Y+2	; 0x02
    e9f0:	68 2f       	mov	r22, r24
    e9f2:	77 27       	eor	r23, r23
    e9f4:	67 fd       	sbrc	r22, 7
    e9f6:	70 95       	com	r23
    e9f8:	89 81       	ldd	r24, Y+1	; 0x01
    e9fa:	48 2f       	mov	r20, r24
    e9fc:	55 27       	eor	r21, r21
    e9fe:	47 fd       	sbrc	r20, 7
    ea00:	50 95       	com	r21
    ea02:	8a 81       	ldd	r24, Y+2	; 0x02
    ea04:	e8 2f       	mov	r30, r24
    ea06:	ff 27       	eor	r31, r31
    ea08:	e7 fd       	sbrc	r30, 7
    ea0a:	f0 95       	com	r31
    ea0c:	ca 01       	movw	r24, r20
    ea0e:	88 0f       	add	r24, r24
    ea10:	99 1f       	adc	r25, r25
    ea12:	84 0f       	add	r24, r20
    ea14:	95 1f       	adc	r25, r21
    ea16:	8e 0f       	add	r24, r30
    ea18:	9f 1f       	adc	r25, r31
    ea1a:	88 0f       	add	r24, r24
    ea1c:	99 1f       	adc	r25, r25
    ea1e:	80 50       	subi	r24, 0x00	; 0
    ea20:	9c 4d       	sbci	r25, 0xDC	; 220
    ea22:	fc 01       	movw	r30, r24
    ea24:	80 81       	ld	r24, Z
    ea26:	91 81       	ldd	r25, Z+1	; 0x01
    ea28:	ac 01       	movw	r20, r24
    ea2a:	44 0f       	add	r20, r20
    ea2c:	55 1f       	adc	r21, r21
    ea2e:	c9 01       	movw	r24, r18
    ea30:	88 0f       	add	r24, r24
    ea32:	99 1f       	adc	r25, r25
    ea34:	82 0f       	add	r24, r18
    ea36:	93 1f       	adc	r25, r19
    ea38:	86 0f       	add	r24, r22
    ea3a:	97 1f       	adc	r25, r23
    ea3c:	88 0f       	add	r24, r24
    ea3e:	99 1f       	adc	r25, r25
    ea40:	80 50       	subi	r24, 0x00	; 0
    ea42:	9c 4d       	sbci	r25, 0xDC	; 220
    ea44:	fc 01       	movw	r30, r24
    ea46:	40 83       	st	Z, r20
    ea48:	51 83       	std	Z+1, r21	; 0x01
   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
   {
      for( c_col = 0; c_col < 3; c_col++)
    ea4a:	8a 81       	ldd	r24, Y+2	; 0x02
    ea4c:	8f 5f       	subi	r24, 0xFF	; 255
    ea4e:	8a 83       	std	Y+2, r24	; 0x02
    ea50:	8a 81       	ldd	r24, Y+2	; 0x02
    ea52:	83 30       	cpi	r24, 0x03	; 3
    ea54:	0c f4       	brge	.+2      	; 0xea58 <dcmIntegration+0x388>
    ea56:	59 cf       	rjmp	.-334    	; 0xe90a <dcmIntegration+0x23a>
                        14);

   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
    ea58:	89 81       	ldd	r24, Y+1	; 0x01
    ea5a:	8f 5f       	subi	r24, 0xFF	; 255
    ea5c:	89 83       	std	Y+1, r24	; 0x01
    ea5e:	89 81       	ldd	r24, Y+1	; 0x01
    ea60:	83 30       	cpi	r24, 0x03	; 3
    ea62:	0c f4       	brge	.+2      	; 0xea66 <dcmIntegration+0x396>
    ea64:	50 cf       	rjmp	.-352    	; 0xe906 <dcmIntegration+0x236>
         gt_insDev.as_dcm[c_row][c_col] = gt_insDev.as_dcm[c_row][c_col] << 1;

      }
   }

}/*End dcmIntegration*/
    ea66:	ac 96       	adiw	r28, 0x2c	; 44
    ea68:	cd bf       	out	0x3d, r28	; 61
    ea6a:	de bf       	out	0x3e, r29	; 62
    ea6c:	df 91       	pop	r29
    ea6e:	cf 91       	pop	r28
    ea70:	0f 91       	pop	r16
    ea72:	ff 90       	pop	r15
    ea74:	ef 90       	pop	r14
    ea76:	df 90       	pop	r13
    ea78:	cf 90       	pop	r12
    ea7a:	af 90       	pop	r10
    ea7c:	8f 90       	pop	r8
    ea7e:	08 95       	ret

0000ea80 <dcmCorrect>:

/*---------------------------------------------------------------------------*
 * Perform DCM correction according to eq eq 12.7 of [1]
 *---------------------------------------------------------------------------*/
static inline void dcmCorrect( int16_t *ps_err)
{
    ea80:	8f 92       	push	r8
    ea82:	af 92       	push	r10
    ea84:	cf 92       	push	r12
    ea86:	df 92       	push	r13
    ea88:	ef 92       	push	r14
    ea8a:	0f 93       	push	r16
    ea8c:	cf 93       	push	r28
    ea8e:	df 93       	push	r29
    ea90:	cd b7       	in	r28, 0x3d	; 61
    ea92:	de b7       	in	r29, 0x3e	; 62
    ea94:	a8 97       	sbiw	r28, 0x28	; 40
    ea96:	cd bf       	out	0x3d, r28	; 61
    ea98:	de bf       	out	0x3e, r29	; 62
    ea9a:	8f a3       	lds	r24, 0x5f
    ea9c:	98 a7       	lds	r25, 0x78
   int16_t as_skew[3][3];
   int16_t as_tempDcm[3][3];
   int8_t c_row;
   int8_t c_col;

   as_skew[0][0] = 16383;
    ea9e:	8f ef       	ldi	r24, 0xFF	; 255
    eaa0:	9f e3       	ldi	r25, 0x3F	; 63
    eaa2:	8b 83       	std	Y+3, r24	; 0x03
    eaa4:	9c 83       	std	Y+4, r25	; 0x04
   as_skew[0][1] = ps_err[2]>>1;
    eaa6:	8f a1       	lds	r24, 0x4f
    eaa8:	98 a5       	lds	r25, 0x68
    eaaa:	04 96       	adiw	r24, 0x04	; 4
    eaac:	fc 01       	movw	r30, r24
    eaae:	80 81       	ld	r24, Z
    eab0:	91 81       	ldd	r25, Z+1	; 0x01
    eab2:	95 95       	asr	r25
    eab4:	87 95       	ror	r24
    eab6:	8d 83       	std	Y+5, r24	; 0x05
    eab8:	9e 83       	std	Y+6, r25	; 0x06
   as_skew[0][2] = -ps_err[1]>>1;
    eaba:	8f a1       	lds	r24, 0x4f
    eabc:	98 a5       	lds	r25, 0x68
    eabe:	02 96       	adiw	r24, 0x02	; 2
    eac0:	fc 01       	movw	r30, r24
    eac2:	80 81       	ld	r24, Z
    eac4:	91 81       	ldd	r25, Z+1	; 0x01
    eac6:	90 95       	com	r25
    eac8:	81 95       	neg	r24
    eaca:	9f 4f       	sbci	r25, 0xFF	; 255
    eacc:	95 95       	asr	r25
    eace:	87 95       	ror	r24
    ead0:	8f 83       	std	Y+7, r24	; 0x07
    ead2:	98 87       	std	Y+8, r25	; 0x08
   as_skew[1][0] = -ps_err[2]>>1;
    ead4:	8f a1       	lds	r24, 0x4f
    ead6:	98 a5       	lds	r25, 0x68
    ead8:	04 96       	adiw	r24, 0x04	; 4
    eada:	fc 01       	movw	r30, r24
    eadc:	80 81       	ld	r24, Z
    eade:	91 81       	ldd	r25, Z+1	; 0x01
    eae0:	90 95       	com	r25
    eae2:	81 95       	neg	r24
    eae4:	9f 4f       	sbci	r25, 0xFF	; 255
    eae6:	95 95       	asr	r25
    eae8:	87 95       	ror	r24
    eaea:	89 87       	std	Y+9, r24	; 0x09
    eaec:	9a 87       	std	Y+10, r25	; 0x0a
   as_skew[1][1] = 16383;
    eaee:	8f ef       	ldi	r24, 0xFF	; 255
    eaf0:	9f e3       	ldi	r25, 0x3F	; 63
    eaf2:	8b 87       	std	Y+11, r24	; 0x0b
    eaf4:	9c 87       	std	Y+12, r25	; 0x0c
   as_skew[1][2] = ps_err[0]>>1;
    eaf6:	8f a1       	lds	r24, 0x4f
    eaf8:	98 a5       	lds	r25, 0x68
    eafa:	fc 01       	movw	r30, r24
    eafc:	80 81       	ld	r24, Z
    eafe:	91 81       	ldd	r25, Z+1	; 0x01
    eb00:	95 95       	asr	r25
    eb02:	87 95       	ror	r24
    eb04:	8d 87       	std	Y+13, r24	; 0x0d
    eb06:	9e 87       	std	Y+14, r25	; 0x0e
   as_skew[2][0] = ps_err[1]>>1;
    eb08:	8f a1       	lds	r24, 0x4f
    eb0a:	98 a5       	lds	r25, 0x68
    eb0c:	02 96       	adiw	r24, 0x02	; 2
    eb0e:	fc 01       	movw	r30, r24
    eb10:	80 81       	ld	r24, Z
    eb12:	91 81       	ldd	r25, Z+1	; 0x01
    eb14:	95 95       	asr	r25
    eb16:	87 95       	ror	r24
    eb18:	8f 87       	std	Y+15, r24	; 0x0f
    eb1a:	98 8b       	std	Y+16, r25	; 0x10
   as_skew[2][1] = -ps_err[0]>>1;
    eb1c:	8f a1       	lds	r24, 0x4f
    eb1e:	98 a5       	lds	r25, 0x68
    eb20:	fc 01       	movw	r30, r24
    eb22:	80 81       	ld	r24, Z
    eb24:	91 81       	ldd	r25, Z+1	; 0x01
    eb26:	90 95       	com	r25
    eb28:	81 95       	neg	r24
    eb2a:	9f 4f       	sbci	r25, 0xFF	; 255
    eb2c:	95 95       	asr	r25
    eb2e:	87 95       	ror	r24
    eb30:	89 8b       	std	Y+17, r24	; 0x11
    eb32:	9a 8b       	std	Y+18, r25	; 0x12
   as_skew[2][2] = 16383;
    eb34:	8f ef       	ldi	r24, 0xFF	; 255
    eb36:	9f e3       	ldi	r25, 0x3F	; 63
    eb38:	8b 8b       	std	Y+19, r24	; 0x13
    eb3a:	9c 8b       	std	Y+20, r25	; 0x14

   /*------------------------------------------------------------------------*
    * Scale the DCM so that its a Q1.14 value, in order to prevent an
    * overflow in the matrix multiply routine.
    *------------------------------------------------------------------------*/
   as_tempDcm[0][0] = gt_insDev.as_dcm[0][0] >> 1;
    eb3c:	80 91 00 24 	lds	r24, 0x2400
    eb40:	90 91 01 24 	lds	r25, 0x2401
    eb44:	95 95       	asr	r25
    eb46:	87 95       	ror	r24
    eb48:	8d 8b       	std	Y+21, r24	; 0x15
    eb4a:	9e 8b       	std	Y+22, r25	; 0x16
   as_tempDcm[0][1] = gt_insDev.as_dcm[0][1] >> 1;
    eb4c:	80 91 02 24 	lds	r24, 0x2402
    eb50:	90 91 03 24 	lds	r25, 0x2403
    eb54:	95 95       	asr	r25
    eb56:	87 95       	ror	r24
    eb58:	8f 8b       	std	Y+23, r24	; 0x17
    eb5a:	98 8f       	std	Y+24, r25	; 0x18
   as_tempDcm[0][2] = gt_insDev.as_dcm[0][2] >> 1;
    eb5c:	80 91 04 24 	lds	r24, 0x2404
    eb60:	90 91 05 24 	lds	r25, 0x2405
    eb64:	95 95       	asr	r25
    eb66:	87 95       	ror	r24
    eb68:	89 8f       	std	Y+25, r24	; 0x19
    eb6a:	9a 8f       	std	Y+26, r25	; 0x1a
   as_tempDcm[1][0] = gt_insDev.as_dcm[1][0] >> 1;
    eb6c:	80 91 06 24 	lds	r24, 0x2406
    eb70:	90 91 07 24 	lds	r25, 0x2407
    eb74:	95 95       	asr	r25
    eb76:	87 95       	ror	r24
    eb78:	8b 8f       	std	Y+27, r24	; 0x1b
    eb7a:	9c 8f       	std	Y+28, r25	; 0x1c
   as_tempDcm[1][1] = gt_insDev.as_dcm[1][1] >> 1;
    eb7c:	80 91 08 24 	lds	r24, 0x2408
    eb80:	90 91 09 24 	lds	r25, 0x2409
    eb84:	95 95       	asr	r25
    eb86:	87 95       	ror	r24
    eb88:	8d 8f       	std	Y+29, r24	; 0x1d
    eb8a:	9e 8f       	std	Y+30, r25	; 0x1e
   as_tempDcm[1][2] = gt_insDev.as_dcm[1][2] >> 1;
    eb8c:	80 91 0a 24 	lds	r24, 0x240A
    eb90:	90 91 0b 24 	lds	r25, 0x240B
    eb94:	95 95       	asr	r25
    eb96:	87 95       	ror	r24
    eb98:	8f 8f       	std	Y+31, r24	; 0x1f
    eb9a:	98 a3       	lds	r25, 0x58
   as_tempDcm[2][0] = gt_insDev.as_dcm[2][0] >> 1;
    eb9c:	80 91 0c 24 	lds	r24, 0x240C
    eba0:	90 91 0d 24 	lds	r25, 0x240D
    eba4:	95 95       	asr	r25
    eba6:	87 95       	ror	r24
    eba8:	89 a3       	lds	r24, 0x59
    ebaa:	9a a3       	lds	r25, 0x5a
   as_tempDcm[2][1] = gt_insDev.as_dcm[2][1] >> 1;
    ebac:	80 91 0e 24 	lds	r24, 0x240E
    ebb0:	90 91 0f 24 	lds	r25, 0x240F
    ebb4:	95 95       	asr	r25
    ebb6:	87 95       	ror	r24
    ebb8:	8b a3       	lds	r24, 0x5b
    ebba:	9c a3       	lds	r25, 0x5c
   as_tempDcm[2][2] = gt_insDev.as_dcm[2][2] >> 1;
    ebbc:	80 91 10 24 	lds	r24, 0x2410
    ebc0:	90 91 11 24 	lds	r25, 0x2411
    ebc4:	95 95       	asr	r25
    ebc6:	87 95       	ror	r24
    ebc8:	8d a3       	lds	r24, 0x5d
    ebca:	9e a3       	lds	r25, 0x5e

   utl_matMult16x16_16( &as_skew[0][0],
    ebcc:	ce 01       	movw	r24, r28
    ebce:	03 96       	adiw	r24, 0x03	; 3
                        3,
                        3,
                        &as_tempDcm[0][0],
    ebd0:	9e 01       	movw	r18, r28
    ebd2:	2b 5e       	subi	r18, 0xEB	; 235
    ebd4:	3f 4f       	sbci	r19, 0xFF	; 255
   as_tempDcm[1][2] = gt_insDev.as_dcm[1][2] >> 1;
   as_tempDcm[2][0] = gt_insDev.as_dcm[2][0] >> 1;
   as_tempDcm[2][1] = gt_insDev.as_dcm[2][1] >> 1;
   as_tempDcm[2][2] = gt_insDev.as_dcm[2][2] >> 1;

   utl_matMult16x16_16( &as_skew[0][0],
    ebd6:	e0 e0       	ldi	r30, 0x00	; 0
    ebd8:	f4 e2       	ldi	r31, 0x24	; 36
    ebda:	63 e0       	ldi	r22, 0x03	; 3
    ebdc:	43 e0       	ldi	r20, 0x03	; 3
    ebde:	03 e0       	ldi	r16, 0x03	; 3
    ebe0:	0f 2e       	mov	r0, r31
    ebe2:	f3 e0       	ldi	r31, 0x03	; 3
    ebe4:	ef 2e       	mov	r14, r31
    ebe6:	f0 2d       	mov	r31, r0
    ebe8:	6f 01       	movw	r12, r30
    ebea:	aa 24       	eor	r10, r10
    ebec:	0f 2e       	mov	r0, r31
    ebee:	fe e0       	ldi	r31, 0x0E	; 14
    ebf0:	8f 2e       	mov	r8, r31
    ebf2:	f0 2d       	mov	r31, r0
    ebf4:	0e 94 06 e1 	call	0x1c20c	; 0x1c20c <utl_matMult16x16_16>
                        14);

   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
    ebf8:	19 82       	std	Y+1, r1	; 0x01
    ebfa:	ac c0       	rjmp	.+344    	; 0xed54 <dcmCorrect+0x2d4>
   {
      for( c_col = 0; c_col < 3; c_col++)
    ebfc:	1a 82       	std	Y+2, r1	; 0x02
    ebfe:	a3 c0       	rjmp	.+326    	; 0xed46 <dcmCorrect+0x2c6>
      {
         if( gt_insDev.as_dcm[c_row][c_col] > 16383)
    ec00:	89 81       	ldd	r24, Y+1	; 0x01
    ec02:	28 2f       	mov	r18, r24
    ec04:	33 27       	eor	r19, r19
    ec06:	27 fd       	sbrc	r18, 7
    ec08:	30 95       	com	r19
    ec0a:	8a 81       	ldd	r24, Y+2	; 0x02
    ec0c:	48 2f       	mov	r20, r24
    ec0e:	55 27       	eor	r21, r21
    ec10:	47 fd       	sbrc	r20, 7
    ec12:	50 95       	com	r21
    ec14:	c9 01       	movw	r24, r18
    ec16:	88 0f       	add	r24, r24
    ec18:	99 1f       	adc	r25, r25
    ec1a:	82 0f       	add	r24, r18
    ec1c:	93 1f       	adc	r25, r19
    ec1e:	84 0f       	add	r24, r20
    ec20:	95 1f       	adc	r25, r21
    ec22:	88 0f       	add	r24, r24
    ec24:	99 1f       	adc	r25, r25
    ec26:	80 50       	subi	r24, 0x00	; 0
    ec28:	9c 4d       	sbci	r25, 0xDC	; 220
    ec2a:	fc 01       	movw	r30, r24
    ec2c:	80 81       	ld	r24, Z
    ec2e:	91 81       	ldd	r25, Z+1	; 0x01
    ec30:	f0 e4       	ldi	r31, 0x40	; 64
    ec32:	80 30       	cpi	r24, 0x00	; 0
    ec34:	9f 07       	cpc	r25, r31
    ec36:	dc f0       	brlt	.+54     	; 0xec6e <dcmCorrect+0x1ee>
            gt_insDev.as_dcm[c_row][c_col] = 16383;
    ec38:	89 81       	ldd	r24, Y+1	; 0x01
    ec3a:	28 2f       	mov	r18, r24
    ec3c:	33 27       	eor	r19, r19
    ec3e:	27 fd       	sbrc	r18, 7
    ec40:	30 95       	com	r19
    ec42:	8a 81       	ldd	r24, Y+2	; 0x02
    ec44:	48 2f       	mov	r20, r24
    ec46:	55 27       	eor	r21, r21
    ec48:	47 fd       	sbrc	r20, 7
    ec4a:	50 95       	com	r21
    ec4c:	c9 01       	movw	r24, r18
    ec4e:	88 0f       	add	r24, r24
    ec50:	99 1f       	adc	r25, r25
    ec52:	82 0f       	add	r24, r18
    ec54:	93 1f       	adc	r25, r19
    ec56:	84 0f       	add	r24, r20
    ec58:	95 1f       	adc	r25, r21
    ec5a:	88 0f       	add	r24, r24
    ec5c:	99 1f       	adc	r25, r25
    ec5e:	80 50       	subi	r24, 0x00	; 0
    ec60:	9c 4d       	sbci	r25, 0xDC	; 220
    ec62:	2f ef       	ldi	r18, 0xFF	; 255
    ec64:	3f e3       	ldi	r19, 0x3F	; 63
    ec66:	fc 01       	movw	r30, r24
    ec68:	20 83       	st	Z, r18
    ec6a:	31 83       	std	Z+1, r19	; 0x01
    ec6c:	36 c0       	rjmp	.+108    	; 0xecda <dcmCorrect+0x25a>
         else if( gt_insDev.as_dcm[c_row][c_col] < -16384)
    ec6e:	89 81       	ldd	r24, Y+1	; 0x01
    ec70:	28 2f       	mov	r18, r24
    ec72:	33 27       	eor	r19, r19
    ec74:	27 fd       	sbrc	r18, 7
    ec76:	30 95       	com	r19
    ec78:	8a 81       	ldd	r24, Y+2	; 0x02
    ec7a:	48 2f       	mov	r20, r24
    ec7c:	55 27       	eor	r21, r21
    ec7e:	47 fd       	sbrc	r20, 7
    ec80:	50 95       	com	r21
    ec82:	c9 01       	movw	r24, r18
    ec84:	88 0f       	add	r24, r24
    ec86:	99 1f       	adc	r25, r25
    ec88:	82 0f       	add	r24, r18
    ec8a:	93 1f       	adc	r25, r19
    ec8c:	84 0f       	add	r24, r20
    ec8e:	95 1f       	adc	r25, r21
    ec90:	88 0f       	add	r24, r24
    ec92:	99 1f       	adc	r25, r25
    ec94:	80 50       	subi	r24, 0x00	; 0
    ec96:	9c 4d       	sbci	r25, 0xDC	; 220
    ec98:	fc 01       	movw	r30, r24
    ec9a:	80 81       	ld	r24, Z
    ec9c:	91 81       	ldd	r25, Z+1	; 0x01
    ec9e:	f0 ec       	ldi	r31, 0xC0	; 192
    eca0:	80 30       	cpi	r24, 0x00	; 0
    eca2:	9f 07       	cpc	r25, r31
    eca4:	d4 f4       	brge	.+52     	; 0xecda <dcmCorrect+0x25a>
            gt_insDev.as_dcm[c_row][c_col] = -16384;
    eca6:	89 81       	ldd	r24, Y+1	; 0x01
    eca8:	28 2f       	mov	r18, r24
    ecaa:	33 27       	eor	r19, r19
    ecac:	27 fd       	sbrc	r18, 7
    ecae:	30 95       	com	r19
    ecb0:	8a 81       	ldd	r24, Y+2	; 0x02
    ecb2:	48 2f       	mov	r20, r24
    ecb4:	55 27       	eor	r21, r21
    ecb6:	47 fd       	sbrc	r20, 7
    ecb8:	50 95       	com	r21
    ecba:	c9 01       	movw	r24, r18
    ecbc:	88 0f       	add	r24, r24
    ecbe:	99 1f       	adc	r25, r25
    ecc0:	82 0f       	add	r24, r18
    ecc2:	93 1f       	adc	r25, r19
    ecc4:	84 0f       	add	r24, r20
    ecc6:	95 1f       	adc	r25, r21
    ecc8:	88 0f       	add	r24, r24
    ecca:	99 1f       	adc	r25, r25
    eccc:	80 50       	subi	r24, 0x00	; 0
    ecce:	9c 4d       	sbci	r25, 0xDC	; 220
    ecd0:	20 e0       	ldi	r18, 0x00	; 0
    ecd2:	30 ec       	ldi	r19, 0xC0	; 192
    ecd4:	fc 01       	movw	r30, r24
    ecd6:	20 83       	st	Z, r18
    ecd8:	31 83       	std	Z+1, r19	; 0x01

         gt_insDev.as_dcm[c_row][c_col] = gt_insDev.as_dcm[c_row][c_col] << 1;
    ecda:	89 81       	ldd	r24, Y+1	; 0x01
    ecdc:	28 2f       	mov	r18, r24
    ecde:	33 27       	eor	r19, r19
    ece0:	27 fd       	sbrc	r18, 7
    ece2:	30 95       	com	r19
    ece4:	8a 81       	ldd	r24, Y+2	; 0x02
    ece6:	68 2f       	mov	r22, r24
    ece8:	77 27       	eor	r23, r23
    ecea:	67 fd       	sbrc	r22, 7
    ecec:	70 95       	com	r23
    ecee:	89 81       	ldd	r24, Y+1	; 0x01
    ecf0:	48 2f       	mov	r20, r24
    ecf2:	55 27       	eor	r21, r21
    ecf4:	47 fd       	sbrc	r20, 7
    ecf6:	50 95       	com	r21
    ecf8:	8a 81       	ldd	r24, Y+2	; 0x02
    ecfa:	e8 2f       	mov	r30, r24
    ecfc:	ff 27       	eor	r31, r31
    ecfe:	e7 fd       	sbrc	r30, 7
    ed00:	f0 95       	com	r31
    ed02:	ca 01       	movw	r24, r20
    ed04:	88 0f       	add	r24, r24
    ed06:	99 1f       	adc	r25, r25
    ed08:	84 0f       	add	r24, r20
    ed0a:	95 1f       	adc	r25, r21
    ed0c:	8e 0f       	add	r24, r30
    ed0e:	9f 1f       	adc	r25, r31
    ed10:	88 0f       	add	r24, r24
    ed12:	99 1f       	adc	r25, r25
    ed14:	80 50       	subi	r24, 0x00	; 0
    ed16:	9c 4d       	sbci	r25, 0xDC	; 220
    ed18:	fc 01       	movw	r30, r24
    ed1a:	80 81       	ld	r24, Z
    ed1c:	91 81       	ldd	r25, Z+1	; 0x01
    ed1e:	ac 01       	movw	r20, r24
    ed20:	44 0f       	add	r20, r20
    ed22:	55 1f       	adc	r21, r21
    ed24:	c9 01       	movw	r24, r18
    ed26:	88 0f       	add	r24, r24
    ed28:	99 1f       	adc	r25, r25
    ed2a:	82 0f       	add	r24, r18
    ed2c:	93 1f       	adc	r25, r19
    ed2e:	86 0f       	add	r24, r22
    ed30:	97 1f       	adc	r25, r23
    ed32:	88 0f       	add	r24, r24
    ed34:	99 1f       	adc	r25, r25
    ed36:	80 50       	subi	r24, 0x00	; 0
    ed38:	9c 4d       	sbci	r25, 0xDC	; 220
    ed3a:	fc 01       	movw	r30, r24
    ed3c:	40 83       	st	Z, r20
    ed3e:	51 83       	std	Z+1, r21	; 0x01
   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
   {
      for( c_col = 0; c_col < 3; c_col++)
    ed40:	8a 81       	ldd	r24, Y+2	; 0x02
    ed42:	8f 5f       	subi	r24, 0xFF	; 255
    ed44:	8a 83       	std	Y+2, r24	; 0x02
    ed46:	8a 81       	ldd	r24, Y+2	; 0x02
    ed48:	83 30       	cpi	r24, 0x03	; 3
    ed4a:	0c f4       	brge	.+2      	; 0xed4e <dcmCorrect+0x2ce>
    ed4c:	59 cf       	rjmp	.-334    	; 0xec00 <dcmCorrect+0x180>
                        14);

   /*------------------------------------------------------------------------*
    * Hard limit and scale the DCM back to a Q15 number...
    *------------------------------------------------------------------------*/
   for( c_row = 0; c_row < 3; c_row++)
    ed4e:	89 81       	ldd	r24, Y+1	; 0x01
    ed50:	8f 5f       	subi	r24, 0xFF	; 255
    ed52:	89 83       	std	Y+1, r24	; 0x01
    ed54:	89 81       	ldd	r24, Y+1	; 0x01
    ed56:	83 30       	cpi	r24, 0x03	; 3
    ed58:	0c f4       	brge	.+2      	; 0xed5c <dcmCorrect+0x2dc>
    ed5a:	50 cf       	rjmp	.-352    	; 0xebfc <dcmCorrect+0x17c>

         gt_insDev.as_dcm[c_row][c_col] = gt_insDev.as_dcm[c_row][c_col] << 1;
      }
   }

}/*End dcmIntegration*/
    ed5c:	a8 96       	adiw	r28, 0x28	; 40
    ed5e:	cd bf       	out	0x3d, r28	; 61
    ed60:	de bf       	out	0x3e, r29	; 62
    ed62:	df 91       	pop	r29
    ed64:	cf 91       	pop	r28
    ed66:	0f 91       	pop	r16
    ed68:	ef 90       	pop	r14
    ed6a:	df 90       	pop	r13
    ed6c:	cf 90       	pop	r12
    ed6e:	af 90       	pop	r10
    ed70:	8f 90       	pop	r8
    ed72:	08 95       	ret

0000ed74 <dcmInit>:

/*---------------------------------------------------------------------------*
 * Perform DCM initialization according to eq 2.15 of [1]
 *---------------------------------------------------------------------------*/
static void dcmInit( int16_t *ps_att)
{
    ed74:	0f 93       	push	r16
    ed76:	1f 93       	push	r17
    ed78:	cf 93       	push	r28
    ed7a:	df 93       	push	r29
    ed7c:	cd b7       	in	r28, 0x3d	; 61
    ed7e:	de b7       	in	r29, 0x3e	; 62
    ed80:	e6 97       	sbiw	r28, 0x36	; 54
    ed82:	cd bf       	out	0x3d, r28	; 61
    ed84:	de bf       	out	0x3e, r29	; 62
    ed86:	8d ab       	sts	0x5d, r24
    ed88:	9e ab       	sts	0x5e, r25
   int16_t s_roll  = ps_att[0];
    ed8a:	8d a9       	sts	0x4d, r24
    ed8c:	9e a9       	sts	0x4e, r25
    ed8e:	fc 01       	movw	r30, r24
    ed90:	80 81       	ld	r24, Z
    ed92:	91 81       	ldd	r25, Z+1	; 0x01
    ed94:	89 83       	std	Y+1, r24	; 0x01
    ed96:	9a 83       	std	Y+2, r25	; 0x02
   int16_t s_pitch = ps_att[1];
    ed98:	8d a9       	sts	0x4d, r24
    ed9a:	9e a9       	sts	0x4e, r25
    ed9c:	fc 01       	movw	r30, r24
    ed9e:	82 81       	ldd	r24, Z+2	; 0x02
    eda0:	93 81       	ldd	r25, Z+3	; 0x03
    eda2:	8b 83       	std	Y+3, r24	; 0x03
    eda4:	9c 83       	std	Y+4, r25	; 0x04
   int16_t s_yaw   = ps_att[2];
    eda6:	8d a9       	sts	0x4d, r24
    eda8:	9e a9       	sts	0x4e, r25
    edaa:	fc 01       	movw	r30, r24
    edac:	84 81       	ldd	r24, Z+4	; 0x04
    edae:	95 81       	ldd	r25, Z+5	; 0x05
    edb0:	8d 83       	std	Y+5, r24	; 0x05
    edb2:	9e 83       	std	Y+6, r25	; 0x06
   int16_t s_temp;
   int32_t i_temp2;

   gt_insDev.as_dcm[0][0] = utl_mult16x16_16( utl_cos16_16(s_pitch),
    edb4:	8b 81       	ldd	r24, Y+3	; 0x03
    edb6:	9c 81       	ldd	r25, Y+4	; 0x04
    edb8:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    edbc:	8c 01       	movw	r16, r24
    edbe:	8d 81       	ldd	r24, Y+5	; 0x05
    edc0:	9e 81       	ldd	r25, Y+6	; 0x06
    edc2:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    edc6:	9c 01       	movw	r18, r24
    edc8:	c8 01       	movw	r24, r16
    edca:	b9 01       	movw	r22, r18
    edcc:	4f e0       	ldi	r20, 0x0F	; 15
    edce:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    edd2:	80 93 00 24 	sts	0x2400, r24
    edd6:	90 93 01 24 	sts	0x2401, r25
   utl_cos16_16(s_yaw), 15);

   s_temp = utl_mult16x16_16( utl_sin16_16(s_roll), utl_sin16_16(s_pitch), 15);
    edda:	89 81       	ldd	r24, Y+1	; 0x01
    eddc:	9a 81       	ldd	r25, Y+2	; 0x02
    edde:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    ede2:	8c 01       	movw	r16, r24
    ede4:	8b 81       	ldd	r24, Y+3	; 0x03
    ede6:	9c 81       	ldd	r25, Y+4	; 0x04
    ede8:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    edec:	9c 01       	movw	r18, r24
    edee:	c8 01       	movw	r24, r16
    edf0:	b9 01       	movw	r22, r18
    edf2:	4f e0       	ldi	r20, 0x0F	; 15
    edf4:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    edf8:	8f 83       	std	Y+7, r24	; 0x07
    edfa:	98 87       	std	Y+8, r25	; 0x08
   i_temp2 = 0;
    edfc:	19 86       	std	Y+9, r1	; 0x09
    edfe:	1a 86       	std	Y+10, r1	; 0x0a
    ee00:	1b 86       	std	Y+11, r1	; 0x0b
    ee02:	1c 86       	std	Y+12, r1	; 0x0c
   i_temp2 = -utl_mac16x16_32( utl_cos16_16(s_roll), utl_sin16_16(s_yaw), i_temp2, 1);
    ee04:	89 81       	ldd	r24, Y+1	; 0x01
    ee06:	9a 81       	ldd	r25, Y+2	; 0x02
    ee08:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    ee0c:	8c 01       	movw	r16, r24
    ee0e:	8d 81       	ldd	r24, Y+5	; 0x05
    ee10:	9e 81       	ldd	r25, Y+6	; 0x06
    ee12:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    ee16:	bc 01       	movw	r22, r24
    ee18:	29 85       	ldd	r18, Y+9	; 0x09
    ee1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    ee1c:	4b 85       	ldd	r20, Y+11	; 0x0b
    ee1e:	5c 85       	ldd	r21, Y+12	; 0x0c
    ee20:	c8 01       	movw	r24, r16
    ee22:	01 e0       	ldi	r16, 0x01	; 1
    ee24:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ee28:	dc 01       	movw	r26, r24
    ee2a:	cb 01       	movw	r24, r22
    ee2c:	b0 95       	com	r27
    ee2e:	a0 95       	com	r26
    ee30:	90 95       	com	r25
    ee32:	81 95       	neg	r24
    ee34:	9f 4f       	sbci	r25, 0xFF	; 255
    ee36:	af 4f       	sbci	r26, 0xFF	; 255
    ee38:	bf 4f       	sbci	r27, 0xFF	; 255
    ee3a:	89 87       	std	Y+9, r24	; 0x09
    ee3c:	9a 87       	std	Y+10, r25	; 0x0a
    ee3e:	ab 87       	std	Y+11, r26	; 0x0b
    ee40:	bc 87       	std	Y+12, r27	; 0x0c
   i_temp2 = utl_mac16x16_32( s_temp, utl_cos16_16(s_yaw), i_temp2, 1);
    ee42:	8d 81       	ldd	r24, Y+5	; 0x05
    ee44:	9e 81       	ldd	r25, Y+6	; 0x06
    ee46:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    ee4a:	bc 01       	movw	r22, r24
    ee4c:	8f 81       	ldd	r24, Y+7	; 0x07
    ee4e:	98 85       	ldd	r25, Y+8	; 0x08
    ee50:	29 85       	ldd	r18, Y+9	; 0x09
    ee52:	3a 85       	ldd	r19, Y+10	; 0x0a
    ee54:	4b 85       	ldd	r20, Y+11	; 0x0b
    ee56:	5c 85       	ldd	r21, Y+12	; 0x0c
    ee58:	01 e0       	ldi	r16, 0x01	; 1
    ee5a:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ee5e:	dc 01       	movw	r26, r24
    ee60:	cb 01       	movw	r24, r22
    ee62:	89 87       	std	Y+9, r24	; 0x09
    ee64:	9a 87       	std	Y+10, r25	; 0x0a
    ee66:	ab 87       	std	Y+11, r26	; 0x0b
    ee68:	bc 87       	std	Y+12, r27	; 0x0c
    ee6a:	89 85       	ldd	r24, Y+9	; 0x09
    ee6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ee6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    ee70:	bc 85       	ldd	r27, Y+12	; 0x0c
    ee72:	8d 87       	std	Y+13, r24	; 0x0d
    ee74:	9e 87       	std	Y+14, r25	; 0x0e
    ee76:	af 87       	std	Y+15, r26	; 0x0f
    ee78:	b8 8b       	std	Y+16, r27	; 0x10
    ee7a:	8e e0       	ldi	r24, 0x0E	; 14
    ee7c:	89 8b       	std	Y+17, r24	; 0x11
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    ee7e:	81 e0       	ldi	r24, 0x01	; 1
    ee80:	8a 8b       	std	Y+18, r24	; 0x12

      if( i_x < 0)
    ee82:	8d 85       	ldd	r24, Y+13	; 0x0d
    ee84:	9e 85       	ldd	r25, Y+14	; 0x0e
    ee86:	af 85       	ldd	r26, Y+15	; 0x0f
    ee88:	b8 89       	ldd	r27, Y+16	; 0x10
    ee8a:	bb 23       	and	r27, r27
    ee8c:	8c f4       	brge	.+34     	; 0xeeb0 <dcmInit+0x13c>
      {
         i_x = -i_x;
    ee8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    ee90:	9e 85       	ldd	r25, Y+14	; 0x0e
    ee92:	af 85       	ldd	r26, Y+15	; 0x0f
    ee94:	b8 89       	ldd	r27, Y+16	; 0x10
    ee96:	b0 95       	com	r27
    ee98:	a0 95       	com	r26
    ee9a:	90 95       	com	r25
    ee9c:	81 95       	neg	r24
    ee9e:	9f 4f       	sbci	r25, 0xFF	; 255
    eea0:	af 4f       	sbci	r26, 0xFF	; 255
    eea2:	bf 4f       	sbci	r27, 0xFF	; 255
    eea4:	8d 87       	std	Y+13, r24	; 0x0d
    eea6:	9e 87       	std	Y+14, r25	; 0x0e
    eea8:	af 87       	std	Y+15, r26	; 0x0f
    eeaa:	b8 8b       	std	Y+16, r27	; 0x10
         c_sign = -1;
    eeac:	8f ef       	ldi	r24, 0xFF	; 255
    eeae:	8a 8b       	std	Y+18, r24	; 0x12
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    eeb0:	89 89       	ldd	r24, Y+17	; 0x11
    eeb2:	89 30       	cpi	r24, 0x09	; 9
    eeb4:	3c f1       	brlt	.+78     	; 0xef04 <dcmInit+0x190>
    eeb6:	89 89       	ldd	r24, Y+17	; 0x11
    eeb8:	81 31       	cpi	r24, 0x11	; 17
    eeba:	24 f5       	brge	.+72     	; 0xef04 <dcmInit+0x190>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    eebc:	89 89       	ldd	r24, Y+17	; 0x11
    eebe:	99 27       	eor	r25, r25
    eec0:	87 fd       	sbrc	r24, 7
    eec2:	90 95       	com	r25
    eec4:	20 e1       	ldi	r18, 0x10	; 16
    eec6:	30 e0       	ldi	r19, 0x00	; 0
    eec8:	28 1b       	sub	r18, r24
    eeca:	39 0b       	sbc	r19, r25
    eecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    eece:	9e 85       	ldd	r25, Y+14	; 0x0e
    eed0:	af 85       	ldd	r26, Y+15	; 0x0f
    eed2:	b8 89       	ldd	r27, Y+16	; 0x10
    eed4:	02 2e       	mov	r0, r18
    eed6:	04 c0       	rjmp	.+8      	; 0xeee0 <dcmInit+0x16c>
    eed8:	88 0f       	add	r24, r24
    eeda:	99 1f       	adc	r25, r25
    eedc:	aa 1f       	adc	r26, r26
    eede:	bb 1f       	adc	r27, r27
    eee0:	0a 94       	dec	r0
    eee2:	d2 f7       	brpl	.-12     	; 0xeed8 <dcmInit+0x164>
    eee4:	89 ab       	sts	0x59, r24
    eee6:	9a ab       	sts	0x5a, r25
    eee8:	ab ab       	sts	0x5b, r26
    eeea:	bc ab       	sts	0x5c, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    eeec:	8a 89       	ldd	r24, Y+18	; 0x12
    eeee:	8f 3f       	cpi	r24, 0xFF	; 255
    eef0:	31 f4       	brne	.+12     	; 0xeefe <dcmInit+0x18a>
              return -t_tWord.as_word16[1];
    eef2:	8b a9       	sts	0x4b, r24
    eef4:	9c a9       	sts	0x4c, r25
    eef6:	90 95       	com	r25
    eef8:	81 95       	neg	r24
    eefa:	9f 4f       	sbci	r25, 0xFF	; 255
    eefc:	23 c0       	rjmp	.+70     	; 0xef44 <dcmInit+0x1d0>
           else
            return t_tWord.as_word16[1];
    eefe:	8b a9       	sts	0x4b, r24
    ef00:	9c a9       	sts	0x4c, r25
    ef02:	20 c0       	rjmp	.+64     	; 0xef44 <dcmInit+0x1d0>
      }

      i_x = i_x >> c_n;
    ef04:	89 89       	ldd	r24, Y+17	; 0x11
    ef06:	28 2f       	mov	r18, r24
    ef08:	33 27       	eor	r19, r19
    ef0a:	27 fd       	sbrc	r18, 7
    ef0c:	30 95       	com	r19
    ef0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    ef10:	9e 85       	ldd	r25, Y+14	; 0x0e
    ef12:	af 85       	ldd	r26, Y+15	; 0x0f
    ef14:	b8 89       	ldd	r27, Y+16	; 0x10
    ef16:	02 2e       	mov	r0, r18
    ef18:	04 c0       	rjmp	.+8      	; 0xef22 <dcmInit+0x1ae>
    ef1a:	b5 95       	asr	r27
    ef1c:	a7 95       	ror	r26
    ef1e:	97 95       	ror	r25
    ef20:	87 95       	ror	r24
    ef22:	0a 94       	dec	r0
    ef24:	d2 f7       	brpl	.-12     	; 0xef1a <dcmInit+0x1a6>
    ef26:	8d 87       	std	Y+13, r24	; 0x0d
    ef28:	9e 87       	std	Y+14, r25	; 0x0e
    ef2a:	af 87       	std	Y+15, r26	; 0x0f
    ef2c:	b8 8b       	std	Y+16, r27	; 0x10
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    ef2e:	8a 89       	ldd	r24, Y+18	; 0x12
    ef30:	8f 3f       	cpi	r24, 0xFF	; 255
    ef32:	31 f4       	brne	.+12     	; 0xef40 <dcmInit+0x1cc>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    ef34:	8d 85       	ldd	r24, Y+13	; 0x0d
    ef36:	9e 85       	ldd	r25, Y+14	; 0x0e
    ef38:	90 95       	com	r25
    ef3a:	81 95       	neg	r24
    ef3c:	9f 4f       	sbci	r25, 0xFF	; 255
    ef3e:	02 c0       	rjmp	.+4      	; 0xef44 <dcmInit+0x1d0>
       else
           return (int16_t)i_x;
    ef40:	8d 85       	ldd	r24, Y+13	; 0x0d
    ef42:	9e 85       	ldd	r25, Y+14	; 0x0e
   gt_insDev.as_dcm[0][1] = utl_rShft32_16( i_temp2, 14);
    ef44:	80 93 02 24 	sts	0x2402, r24
    ef48:	90 93 03 24 	sts	0x2403, r25

   s_temp = utl_mult16x16_16( utl_cos16_16(s_roll), utl_sin16_16(s_pitch), 15);
    ef4c:	89 81       	ldd	r24, Y+1	; 0x01
    ef4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ef50:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    ef54:	8c 01       	movw	r16, r24
    ef56:	8b 81       	ldd	r24, Y+3	; 0x03
    ef58:	9c 81       	ldd	r25, Y+4	; 0x04
    ef5a:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    ef5e:	9c 01       	movw	r18, r24
    ef60:	c8 01       	movw	r24, r16
    ef62:	b9 01       	movw	r22, r18
    ef64:	4f e0       	ldi	r20, 0x0F	; 15
    ef66:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    ef6a:	8f 83       	std	Y+7, r24	; 0x07
    ef6c:	98 87       	std	Y+8, r25	; 0x08
   i_temp2 = 0;
    ef6e:	19 86       	std	Y+9, r1	; 0x09
    ef70:	1a 86       	std	Y+10, r1	; 0x0a
    ef72:	1b 86       	std	Y+11, r1	; 0x0b
    ef74:	1c 86       	std	Y+12, r1	; 0x0c
   i_temp2 = utl_mac16x16_32( utl_sin16_16(s_roll), utl_sin16_16(s_yaw), i_temp2, 1);
    ef76:	89 81       	ldd	r24, Y+1	; 0x01
    ef78:	9a 81       	ldd	r25, Y+2	; 0x02
    ef7a:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    ef7e:	8c 01       	movw	r16, r24
    ef80:	8d 81       	ldd	r24, Y+5	; 0x05
    ef82:	9e 81       	ldd	r25, Y+6	; 0x06
    ef84:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    ef88:	bc 01       	movw	r22, r24
    ef8a:	29 85       	ldd	r18, Y+9	; 0x09
    ef8c:	3a 85       	ldd	r19, Y+10	; 0x0a
    ef8e:	4b 85       	ldd	r20, Y+11	; 0x0b
    ef90:	5c 85       	ldd	r21, Y+12	; 0x0c
    ef92:	c8 01       	movw	r24, r16
    ef94:	01 e0       	ldi	r16, 0x01	; 1
    ef96:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ef9a:	dc 01       	movw	r26, r24
    ef9c:	cb 01       	movw	r24, r22
    ef9e:	89 87       	std	Y+9, r24	; 0x09
    efa0:	9a 87       	std	Y+10, r25	; 0x0a
    efa2:	ab 87       	std	Y+11, r26	; 0x0b
    efa4:	bc 87       	std	Y+12, r27	; 0x0c
   i_temp2 = utl_mac16x16_32( s_temp, utl_cos16_16(s_yaw), i_temp2, 1);
    efa6:	8d 81       	ldd	r24, Y+5	; 0x05
    efa8:	9e 81       	ldd	r25, Y+6	; 0x06
    efaa:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    efae:	bc 01       	movw	r22, r24
    efb0:	8f 81       	ldd	r24, Y+7	; 0x07
    efb2:	98 85       	ldd	r25, Y+8	; 0x08
    efb4:	29 85       	ldd	r18, Y+9	; 0x09
    efb6:	3a 85       	ldd	r19, Y+10	; 0x0a
    efb8:	4b 85       	ldd	r20, Y+11	; 0x0b
    efba:	5c 85       	ldd	r21, Y+12	; 0x0c
    efbc:	01 e0       	ldi	r16, 0x01	; 1
    efbe:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    efc2:	dc 01       	movw	r26, r24
    efc4:	cb 01       	movw	r24, r22
    efc6:	89 87       	std	Y+9, r24	; 0x09
    efc8:	9a 87       	std	Y+10, r25	; 0x0a
    efca:	ab 87       	std	Y+11, r26	; 0x0b
    efcc:	bc 87       	std	Y+12, r27	; 0x0c
    efce:	89 85       	ldd	r24, Y+9	; 0x09
    efd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    efd2:	ab 85       	ldd	r26, Y+11	; 0x0b
    efd4:	bc 85       	ldd	r27, Y+12	; 0x0c
    efd6:	8b 8b       	std	Y+19, r24	; 0x13
    efd8:	9c 8b       	std	Y+20, r25	; 0x14
    efda:	ad 8b       	std	Y+21, r26	; 0x15
    efdc:	be 8b       	std	Y+22, r27	; 0x16
    efde:	8e e0       	ldi	r24, 0x0E	; 14
    efe0:	8f 8b       	std	Y+23, r24	; 0x17
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    efe2:	81 e0       	ldi	r24, 0x01	; 1
    efe4:	88 8f       	std	Y+24, r24	; 0x18

      if( i_x < 0)
    efe6:	8b 89       	ldd	r24, Y+19	; 0x13
    efe8:	9c 89       	ldd	r25, Y+20	; 0x14
    efea:	ad 89       	ldd	r26, Y+21	; 0x15
    efec:	be 89       	ldd	r27, Y+22	; 0x16
    efee:	bb 23       	and	r27, r27
    eff0:	8c f4       	brge	.+34     	; 0xf014 <dcmInit+0x2a0>
      {
         i_x = -i_x;
    eff2:	8b 89       	ldd	r24, Y+19	; 0x13
    eff4:	9c 89       	ldd	r25, Y+20	; 0x14
    eff6:	ad 89       	ldd	r26, Y+21	; 0x15
    eff8:	be 89       	ldd	r27, Y+22	; 0x16
    effa:	b0 95       	com	r27
    effc:	a0 95       	com	r26
    effe:	90 95       	com	r25
    f000:	81 95       	neg	r24
    f002:	9f 4f       	sbci	r25, 0xFF	; 255
    f004:	af 4f       	sbci	r26, 0xFF	; 255
    f006:	bf 4f       	sbci	r27, 0xFF	; 255
    f008:	8b 8b       	std	Y+19, r24	; 0x13
    f00a:	9c 8b       	std	Y+20, r25	; 0x14
    f00c:	ad 8b       	std	Y+21, r26	; 0x15
    f00e:	be 8b       	std	Y+22, r27	; 0x16
         c_sign = -1;
    f010:	8f ef       	ldi	r24, 0xFF	; 255
    f012:	88 8f       	std	Y+24, r24	; 0x18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    f014:	8f 89       	ldd	r24, Y+23	; 0x17
    f016:	89 30       	cpi	r24, 0x09	; 9
    f018:	3c f1       	brlt	.+78     	; 0xf068 <dcmInit+0x2f4>
    f01a:	8f 89       	ldd	r24, Y+23	; 0x17
    f01c:	81 31       	cpi	r24, 0x11	; 17
    f01e:	24 f5       	brge	.+72     	; 0xf068 <dcmInit+0x2f4>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    f020:	8f 89       	ldd	r24, Y+23	; 0x17
    f022:	99 27       	eor	r25, r25
    f024:	87 fd       	sbrc	r24, 7
    f026:	90 95       	com	r25
    f028:	20 e1       	ldi	r18, 0x10	; 16
    f02a:	30 e0       	ldi	r19, 0x00	; 0
    f02c:	28 1b       	sub	r18, r24
    f02e:	39 0b       	sbc	r19, r25
    f030:	8b 89       	ldd	r24, Y+19	; 0x13
    f032:	9c 89       	ldd	r25, Y+20	; 0x14
    f034:	ad 89       	ldd	r26, Y+21	; 0x15
    f036:	be 89       	ldd	r27, Y+22	; 0x16
    f038:	02 2e       	mov	r0, r18
    f03a:	04 c0       	rjmp	.+8      	; 0xf044 <dcmInit+0x2d0>
    f03c:	88 0f       	add	r24, r24
    f03e:	99 1f       	adc	r25, r25
    f040:	aa 1f       	adc	r26, r26
    f042:	bb 1f       	adc	r27, r27
    f044:	0a 94       	dec	r0
    f046:	d2 f7       	brpl	.-12     	; 0xf03c <dcmInit+0x2c8>
    f048:	8d a7       	lds	r24, 0x7d
    f04a:	9e a7       	lds	r25, 0x7e
    f04c:	af a7       	lds	r26, 0x7f
    f04e:	b8 ab       	sts	0x58, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    f050:	88 8d       	ldd	r24, Y+24	; 0x18
    f052:	8f 3f       	cpi	r24, 0xFF	; 255
    f054:	31 f4       	brne	.+12     	; 0xf062 <dcmInit+0x2ee>
              return -t_tWord.as_word16[1];
    f056:	8f a5       	lds	r24, 0x6f
    f058:	98 a9       	sts	0x48, r25
    f05a:	90 95       	com	r25
    f05c:	81 95       	neg	r24
    f05e:	9f 4f       	sbci	r25, 0xFF	; 255
    f060:	23 c0       	rjmp	.+70     	; 0xf0a8 <dcmInit+0x334>
           else
            return t_tWord.as_word16[1];
    f062:	8f a5       	lds	r24, 0x6f
    f064:	98 a9       	sts	0x48, r25
    f066:	20 c0       	rjmp	.+64     	; 0xf0a8 <dcmInit+0x334>
      }

      i_x = i_x >> c_n;
    f068:	8f 89       	ldd	r24, Y+23	; 0x17
    f06a:	28 2f       	mov	r18, r24
    f06c:	33 27       	eor	r19, r19
    f06e:	27 fd       	sbrc	r18, 7
    f070:	30 95       	com	r19
    f072:	8b 89       	ldd	r24, Y+19	; 0x13
    f074:	9c 89       	ldd	r25, Y+20	; 0x14
    f076:	ad 89       	ldd	r26, Y+21	; 0x15
    f078:	be 89       	ldd	r27, Y+22	; 0x16
    f07a:	02 2e       	mov	r0, r18
    f07c:	04 c0       	rjmp	.+8      	; 0xf086 <dcmInit+0x312>
    f07e:	b5 95       	asr	r27
    f080:	a7 95       	ror	r26
    f082:	97 95       	ror	r25
    f084:	87 95       	ror	r24
    f086:	0a 94       	dec	r0
    f088:	d2 f7       	brpl	.-12     	; 0xf07e <dcmInit+0x30a>
    f08a:	8b 8b       	std	Y+19, r24	; 0x13
    f08c:	9c 8b       	std	Y+20, r25	; 0x14
    f08e:	ad 8b       	std	Y+21, r26	; 0x15
    f090:	be 8b       	std	Y+22, r27	; 0x16
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    f092:	88 8d       	ldd	r24, Y+24	; 0x18
    f094:	8f 3f       	cpi	r24, 0xFF	; 255
    f096:	31 f4       	brne	.+12     	; 0xf0a4 <dcmInit+0x330>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    f098:	8b 89       	ldd	r24, Y+19	; 0x13
    f09a:	9c 89       	ldd	r25, Y+20	; 0x14
    f09c:	90 95       	com	r25
    f09e:	81 95       	neg	r24
    f0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    f0a2:	02 c0       	rjmp	.+4      	; 0xf0a8 <dcmInit+0x334>
       else
           return (int16_t)i_x;
    f0a4:	8b 89       	ldd	r24, Y+19	; 0x13
    f0a6:	9c 89       	ldd	r25, Y+20	; 0x14
   gt_insDev.as_dcm[0][2] = utl_rShft32_16( i_temp2, 14);
    f0a8:	80 93 04 24 	sts	0x2404, r24
    f0ac:	90 93 05 24 	sts	0x2405, r25

   gt_insDev.as_dcm[1][0] = utl_mult16x16_16( utl_cos16_16(s_pitch),
    f0b0:	8b 81       	ldd	r24, Y+3	; 0x03
    f0b2:	9c 81       	ldd	r25, Y+4	; 0x04
    f0b4:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f0b8:	8c 01       	movw	r16, r24
    f0ba:	8d 81       	ldd	r24, Y+5	; 0x05
    f0bc:	9e 81       	ldd	r25, Y+6	; 0x06
    f0be:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f0c2:	9c 01       	movw	r18, r24
    f0c4:	c8 01       	movw	r24, r16
    f0c6:	b9 01       	movw	r22, r18
    f0c8:	4f e0       	ldi	r20, 0x0F	; 15
    f0ca:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    f0ce:	80 93 06 24 	sts	0x2406, r24
    f0d2:	90 93 07 24 	sts	0x2407, r25
   utl_sin16_16(s_yaw), 15);

   s_temp = utl_mult16x16_16( utl_sin16_16(s_roll), utl_sin16_16(s_pitch), 15);
    f0d6:	89 81       	ldd	r24, Y+1	; 0x01
    f0d8:	9a 81       	ldd	r25, Y+2	; 0x02
    f0da:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f0de:	8c 01       	movw	r16, r24
    f0e0:	8b 81       	ldd	r24, Y+3	; 0x03
    f0e2:	9c 81       	ldd	r25, Y+4	; 0x04
    f0e4:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f0e8:	9c 01       	movw	r18, r24
    f0ea:	c8 01       	movw	r24, r16
    f0ec:	b9 01       	movw	r22, r18
    f0ee:	4f e0       	ldi	r20, 0x0F	; 15
    f0f0:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    f0f4:	8f 83       	std	Y+7, r24	; 0x07
    f0f6:	98 87       	std	Y+8, r25	; 0x08
   i_temp2 = 0;
    f0f8:	19 86       	std	Y+9, r1	; 0x09
    f0fa:	1a 86       	std	Y+10, r1	; 0x0a
    f0fc:	1b 86       	std	Y+11, r1	; 0x0b
    f0fe:	1c 86       	std	Y+12, r1	; 0x0c
   i_temp2 = utl_mac16x16_32( utl_cos16_16(s_roll), utl_cos16_16(s_yaw), i_temp2, 1);
    f100:	89 81       	ldd	r24, Y+1	; 0x01
    f102:	9a 81       	ldd	r25, Y+2	; 0x02
    f104:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f108:	8c 01       	movw	r16, r24
    f10a:	8d 81       	ldd	r24, Y+5	; 0x05
    f10c:	9e 81       	ldd	r25, Y+6	; 0x06
    f10e:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f112:	bc 01       	movw	r22, r24
    f114:	29 85       	ldd	r18, Y+9	; 0x09
    f116:	3a 85       	ldd	r19, Y+10	; 0x0a
    f118:	4b 85       	ldd	r20, Y+11	; 0x0b
    f11a:	5c 85       	ldd	r21, Y+12	; 0x0c
    f11c:	c8 01       	movw	r24, r16
    f11e:	01 e0       	ldi	r16, 0x01	; 1
    f120:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f124:	dc 01       	movw	r26, r24
    f126:	cb 01       	movw	r24, r22
    f128:	89 87       	std	Y+9, r24	; 0x09
    f12a:	9a 87       	std	Y+10, r25	; 0x0a
    f12c:	ab 87       	std	Y+11, r26	; 0x0b
    f12e:	bc 87       	std	Y+12, r27	; 0x0c
   i_temp2 = utl_mac16x16_32( s_temp, utl_sin16_16(s_yaw), i_temp2, 1);
    f130:	8d 81       	ldd	r24, Y+5	; 0x05
    f132:	9e 81       	ldd	r25, Y+6	; 0x06
    f134:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f138:	bc 01       	movw	r22, r24
    f13a:	8f 81       	ldd	r24, Y+7	; 0x07
    f13c:	98 85       	ldd	r25, Y+8	; 0x08
    f13e:	29 85       	ldd	r18, Y+9	; 0x09
    f140:	3a 85       	ldd	r19, Y+10	; 0x0a
    f142:	4b 85       	ldd	r20, Y+11	; 0x0b
    f144:	5c 85       	ldd	r21, Y+12	; 0x0c
    f146:	01 e0       	ldi	r16, 0x01	; 1
    f148:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f14c:	dc 01       	movw	r26, r24
    f14e:	cb 01       	movw	r24, r22
    f150:	89 87       	std	Y+9, r24	; 0x09
    f152:	9a 87       	std	Y+10, r25	; 0x0a
    f154:	ab 87       	std	Y+11, r26	; 0x0b
    f156:	bc 87       	std	Y+12, r27	; 0x0c
    f158:	89 85       	ldd	r24, Y+9	; 0x09
    f15a:	9a 85       	ldd	r25, Y+10	; 0x0a
    f15c:	ab 85       	ldd	r26, Y+11	; 0x0b
    f15e:	bc 85       	ldd	r27, Y+12	; 0x0c
    f160:	89 8f       	std	Y+25, r24	; 0x19
    f162:	9a 8f       	std	Y+26, r25	; 0x1a
    f164:	ab 8f       	std	Y+27, r26	; 0x1b
    f166:	bc 8f       	std	Y+28, r27	; 0x1c
    f168:	8e e0       	ldi	r24, 0x0E	; 14
    f16a:	8d 8f       	std	Y+29, r24	; 0x1d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    f16c:	81 e0       	ldi	r24, 0x01	; 1
    f16e:	8e 8f       	std	Y+30, r24	; 0x1e

      if( i_x < 0)
    f170:	89 8d       	ldd	r24, Y+25	; 0x19
    f172:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f174:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f176:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f178:	bb 23       	and	r27, r27
    f17a:	8c f4       	brge	.+34     	; 0xf19e <dcmInit+0x42a>
      {
         i_x = -i_x;
    f17c:	89 8d       	ldd	r24, Y+25	; 0x19
    f17e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f180:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f182:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f184:	b0 95       	com	r27
    f186:	a0 95       	com	r26
    f188:	90 95       	com	r25
    f18a:	81 95       	neg	r24
    f18c:	9f 4f       	sbci	r25, 0xFF	; 255
    f18e:	af 4f       	sbci	r26, 0xFF	; 255
    f190:	bf 4f       	sbci	r27, 0xFF	; 255
    f192:	89 8f       	std	Y+25, r24	; 0x19
    f194:	9a 8f       	std	Y+26, r25	; 0x1a
    f196:	ab 8f       	std	Y+27, r26	; 0x1b
    f198:	bc 8f       	std	Y+28, r27	; 0x1c
         c_sign = -1;
    f19a:	8f ef       	ldi	r24, 0xFF	; 255
    f19c:	8e 8f       	std	Y+30, r24	; 0x1e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    f19e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f1a0:	89 30       	cpi	r24, 0x09	; 9
    f1a2:	3c f1       	brlt	.+78     	; 0xf1f2 <dcmInit+0x47e>
    f1a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f1a6:	81 31       	cpi	r24, 0x11	; 17
    f1a8:	24 f5       	brge	.+72     	; 0xf1f2 <dcmInit+0x47e>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    f1aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f1ac:	99 27       	eor	r25, r25
    f1ae:	87 fd       	sbrc	r24, 7
    f1b0:	90 95       	com	r25
    f1b2:	20 e1       	ldi	r18, 0x10	; 16
    f1b4:	30 e0       	ldi	r19, 0x00	; 0
    f1b6:	28 1b       	sub	r18, r24
    f1b8:	39 0b       	sbc	r19, r25
    f1ba:	89 8d       	ldd	r24, Y+25	; 0x19
    f1bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f1be:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f1c0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f1c2:	02 2e       	mov	r0, r18
    f1c4:	04 c0       	rjmp	.+8      	; 0xf1ce <dcmInit+0x45a>
    f1c6:	88 0f       	add	r24, r24
    f1c8:	99 1f       	adc	r25, r25
    f1ca:	aa 1f       	adc	r26, r26
    f1cc:	bb 1f       	adc	r27, r27
    f1ce:	0a 94       	dec	r0
    f1d0:	d2 f7       	brpl	.-12     	; 0xf1c6 <dcmInit+0x452>
    f1d2:	89 a7       	lds	r24, 0x79
    f1d4:	9a a7       	lds	r25, 0x7a
    f1d6:	ab a7       	lds	r26, 0x7b
    f1d8:	bc a7       	lds	r27, 0x7c

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    f1da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    f1dc:	8f 3f       	cpi	r24, 0xFF	; 255
    f1de:	31 f4       	brne	.+12     	; 0xf1ec <dcmInit+0x478>
              return -t_tWord.as_word16[1];
    f1e0:	8b a5       	lds	r24, 0x6b
    f1e2:	9c a5       	lds	r25, 0x6c
    f1e4:	90 95       	com	r25
    f1e6:	81 95       	neg	r24
    f1e8:	9f 4f       	sbci	r25, 0xFF	; 255
    f1ea:	23 c0       	rjmp	.+70     	; 0xf232 <dcmInit+0x4be>
           else
            return t_tWord.as_word16[1];
    f1ec:	8b a5       	lds	r24, 0x6b
    f1ee:	9c a5       	lds	r25, 0x6c
    f1f0:	20 c0       	rjmp	.+64     	; 0xf232 <dcmInit+0x4be>
      }

      i_x = i_x >> c_n;
    f1f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f1f4:	28 2f       	mov	r18, r24
    f1f6:	33 27       	eor	r19, r19
    f1f8:	27 fd       	sbrc	r18, 7
    f1fa:	30 95       	com	r19
    f1fc:	89 8d       	ldd	r24, Y+25	; 0x19
    f1fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f200:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f202:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f204:	02 2e       	mov	r0, r18
    f206:	04 c0       	rjmp	.+8      	; 0xf210 <dcmInit+0x49c>
    f208:	b5 95       	asr	r27
    f20a:	a7 95       	ror	r26
    f20c:	97 95       	ror	r25
    f20e:	87 95       	ror	r24
    f210:	0a 94       	dec	r0
    f212:	d2 f7       	brpl	.-12     	; 0xf208 <dcmInit+0x494>
    f214:	89 8f       	std	Y+25, r24	; 0x19
    f216:	9a 8f       	std	Y+26, r25	; 0x1a
    f218:	ab 8f       	std	Y+27, r26	; 0x1b
    f21a:	bc 8f       	std	Y+28, r27	; 0x1c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    f21c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    f21e:	8f 3f       	cpi	r24, 0xFF	; 255
    f220:	31 f4       	brne	.+12     	; 0xf22e <dcmInit+0x4ba>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    f222:	89 8d       	ldd	r24, Y+25	; 0x19
    f224:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f226:	90 95       	com	r25
    f228:	81 95       	neg	r24
    f22a:	9f 4f       	sbci	r25, 0xFF	; 255
    f22c:	02 c0       	rjmp	.+4      	; 0xf232 <dcmInit+0x4be>
       else
           return (int16_t)i_x;
    f22e:	89 8d       	ldd	r24, Y+25	; 0x19
    f230:	9a 8d       	ldd	r25, Y+26	; 0x1a
   gt_insDev.as_dcm[1][1] = utl_rShft32_16( i_temp2, 14);
    f232:	80 93 08 24 	sts	0x2408, r24
    f236:	90 93 09 24 	sts	0x2409, r25

   s_temp = utl_mult16x16_16( utl_cos16_16(s_roll), utl_sin16_16(s_pitch), 15);
    f23a:	89 81       	ldd	r24, Y+1	; 0x01
    f23c:	9a 81       	ldd	r25, Y+2	; 0x02
    f23e:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f242:	8c 01       	movw	r16, r24
    f244:	8b 81       	ldd	r24, Y+3	; 0x03
    f246:	9c 81       	ldd	r25, Y+4	; 0x04
    f248:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f24c:	9c 01       	movw	r18, r24
    f24e:	c8 01       	movw	r24, r16
    f250:	b9 01       	movw	r22, r18
    f252:	4f e0       	ldi	r20, 0x0F	; 15
    f254:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    f258:	8f 83       	std	Y+7, r24	; 0x07
    f25a:	98 87       	std	Y+8, r25	; 0x08
   i_temp2 = 0;
    f25c:	19 86       	std	Y+9, r1	; 0x09
    f25e:	1a 86       	std	Y+10, r1	; 0x0a
    f260:	1b 86       	std	Y+11, r1	; 0x0b
    f262:	1c 86       	std	Y+12, r1	; 0x0c
   i_temp2 = -utl_mac16x16_32( utl_sin16_16(s_roll), utl_cos16_16(s_yaw), i_temp2, 1);
    f264:	89 81       	ldd	r24, Y+1	; 0x01
    f266:	9a 81       	ldd	r25, Y+2	; 0x02
    f268:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f26c:	8c 01       	movw	r16, r24
    f26e:	8d 81       	ldd	r24, Y+5	; 0x05
    f270:	9e 81       	ldd	r25, Y+6	; 0x06
    f272:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f276:	bc 01       	movw	r22, r24
    f278:	29 85       	ldd	r18, Y+9	; 0x09
    f27a:	3a 85       	ldd	r19, Y+10	; 0x0a
    f27c:	4b 85       	ldd	r20, Y+11	; 0x0b
    f27e:	5c 85       	ldd	r21, Y+12	; 0x0c
    f280:	c8 01       	movw	r24, r16
    f282:	01 e0       	ldi	r16, 0x01	; 1
    f284:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f288:	dc 01       	movw	r26, r24
    f28a:	cb 01       	movw	r24, r22
    f28c:	b0 95       	com	r27
    f28e:	a0 95       	com	r26
    f290:	90 95       	com	r25
    f292:	81 95       	neg	r24
    f294:	9f 4f       	sbci	r25, 0xFF	; 255
    f296:	af 4f       	sbci	r26, 0xFF	; 255
    f298:	bf 4f       	sbci	r27, 0xFF	; 255
    f29a:	89 87       	std	Y+9, r24	; 0x09
    f29c:	9a 87       	std	Y+10, r25	; 0x0a
    f29e:	ab 87       	std	Y+11, r26	; 0x0b
    f2a0:	bc 87       	std	Y+12, r27	; 0x0c
   i_temp2 = utl_mac16x16_32( s_temp, utl_sin16_16(s_yaw), i_temp2, 1);
    f2a2:	8d 81       	ldd	r24, Y+5	; 0x05
    f2a4:	9e 81       	ldd	r25, Y+6	; 0x06
    f2a6:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f2aa:	bc 01       	movw	r22, r24
    f2ac:	8f 81       	ldd	r24, Y+7	; 0x07
    f2ae:	98 85       	ldd	r25, Y+8	; 0x08
    f2b0:	29 85       	ldd	r18, Y+9	; 0x09
    f2b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    f2b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    f2b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    f2b8:	01 e0       	ldi	r16, 0x01	; 1
    f2ba:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f2be:	dc 01       	movw	r26, r24
    f2c0:	cb 01       	movw	r24, r22
    f2c2:	89 87       	std	Y+9, r24	; 0x09
    f2c4:	9a 87       	std	Y+10, r25	; 0x0a
    f2c6:	ab 87       	std	Y+11, r26	; 0x0b
    f2c8:	bc 87       	std	Y+12, r27	; 0x0c
    f2ca:	89 85       	ldd	r24, Y+9	; 0x09
    f2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    f2ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    f2d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    f2d2:	8f 8f       	std	Y+31, r24	; 0x1f
    f2d4:	98 a3       	lds	r25, 0x58
    f2d6:	a9 a3       	lds	r26, 0x59
    f2d8:	ba a3       	lds	r27, 0x5a
    f2da:	8e e0       	ldi	r24, 0x0E	; 14
    f2dc:	8b a3       	lds	r24, 0x5b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    f2de:	81 e0       	ldi	r24, 0x01	; 1
    f2e0:	8c a3       	lds	r24, 0x5c

      if( i_x < 0)
    f2e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f2e4:	98 a1       	lds	r25, 0x48
    f2e6:	a9 a1       	lds	r26, 0x49
    f2e8:	ba a1       	lds	r27, 0x4a
    f2ea:	bb 23       	and	r27, r27
    f2ec:	8c f4       	brge	.+34     	; 0xf310 <dcmInit+0x59c>
      {
         i_x = -i_x;
    f2ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f2f0:	98 a1       	lds	r25, 0x48
    f2f2:	a9 a1       	lds	r26, 0x49
    f2f4:	ba a1       	lds	r27, 0x4a
    f2f6:	b0 95       	com	r27
    f2f8:	a0 95       	com	r26
    f2fa:	90 95       	com	r25
    f2fc:	81 95       	neg	r24
    f2fe:	9f 4f       	sbci	r25, 0xFF	; 255
    f300:	af 4f       	sbci	r26, 0xFF	; 255
    f302:	bf 4f       	sbci	r27, 0xFF	; 255
    f304:	8f 8f       	std	Y+31, r24	; 0x1f
    f306:	98 a3       	lds	r25, 0x58
    f308:	a9 a3       	lds	r26, 0x59
    f30a:	ba a3       	lds	r27, 0x5a
         c_sign = -1;
    f30c:	8f ef       	ldi	r24, 0xFF	; 255
    f30e:	8c a3       	lds	r24, 0x5c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    f310:	8b a1       	lds	r24, 0x4b
    f312:	89 30       	cpi	r24, 0x09	; 9
    f314:	3c f1       	brlt	.+78     	; 0xf364 <dcmInit+0x5f0>
    f316:	8b a1       	lds	r24, 0x4b
    f318:	81 31       	cpi	r24, 0x11	; 17
    f31a:	24 f5       	brge	.+72     	; 0xf364 <dcmInit+0x5f0>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    f31c:	8b a1       	lds	r24, 0x4b
    f31e:	99 27       	eor	r25, r25
    f320:	87 fd       	sbrc	r24, 7
    f322:	90 95       	com	r25
    f324:	20 e1       	ldi	r18, 0x10	; 16
    f326:	30 e0       	ldi	r19, 0x00	; 0
    f328:	28 1b       	sub	r18, r24
    f32a:	39 0b       	sbc	r19, r25
    f32c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f32e:	98 a1       	lds	r25, 0x48
    f330:	a9 a1       	lds	r26, 0x49
    f332:	ba a1       	lds	r27, 0x4a
    f334:	02 2e       	mov	r0, r18
    f336:	04 c0       	rjmp	.+8      	; 0xf340 <dcmInit+0x5cc>
    f338:	88 0f       	add	r24, r24
    f33a:	99 1f       	adc	r25, r25
    f33c:	aa 1f       	adc	r26, r26
    f33e:	bb 1f       	adc	r27, r27
    f340:	0a 94       	dec	r0
    f342:	d2 f7       	brpl	.-12     	; 0xf338 <dcmInit+0x5c4>
    f344:	8d a3       	lds	r24, 0x5d
    f346:	9e a3       	lds	r25, 0x5e
    f348:	af a3       	lds	r26, 0x5f
    f34a:	b8 a7       	lds	r27, 0x78

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    f34c:	8c a1       	lds	r24, 0x4c
    f34e:	8f 3f       	cpi	r24, 0xFF	; 255
    f350:	31 f4       	brne	.+12     	; 0xf35e <dcmInit+0x5ea>
              return -t_tWord.as_word16[1];
    f352:	8f a1       	lds	r24, 0x4f
    f354:	98 a5       	lds	r25, 0x68
    f356:	90 95       	com	r25
    f358:	81 95       	neg	r24
    f35a:	9f 4f       	sbci	r25, 0xFF	; 255
    f35c:	23 c0       	rjmp	.+70     	; 0xf3a4 <dcmInit+0x630>
           else
            return t_tWord.as_word16[1];
    f35e:	8f a1       	lds	r24, 0x4f
    f360:	98 a5       	lds	r25, 0x68
    f362:	20 c0       	rjmp	.+64     	; 0xf3a4 <dcmInit+0x630>
      }

      i_x = i_x >> c_n;
    f364:	8b a1       	lds	r24, 0x4b
    f366:	28 2f       	mov	r18, r24
    f368:	33 27       	eor	r19, r19
    f36a:	27 fd       	sbrc	r18, 7
    f36c:	30 95       	com	r19
    f36e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f370:	98 a1       	lds	r25, 0x48
    f372:	a9 a1       	lds	r26, 0x49
    f374:	ba a1       	lds	r27, 0x4a
    f376:	02 2e       	mov	r0, r18
    f378:	04 c0       	rjmp	.+8      	; 0xf382 <dcmInit+0x60e>
    f37a:	b5 95       	asr	r27
    f37c:	a7 95       	ror	r26
    f37e:	97 95       	ror	r25
    f380:	87 95       	ror	r24
    f382:	0a 94       	dec	r0
    f384:	d2 f7       	brpl	.-12     	; 0xf37a <dcmInit+0x606>
    f386:	8f 8f       	std	Y+31, r24	; 0x1f
    f388:	98 a3       	lds	r25, 0x58
    f38a:	a9 a3       	lds	r26, 0x59
    f38c:	ba a3       	lds	r27, 0x5a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    f38e:	8c a1       	lds	r24, 0x4c
    f390:	8f 3f       	cpi	r24, 0xFF	; 255
    f392:	31 f4       	brne	.+12     	; 0xf3a0 <dcmInit+0x62c>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    f394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f396:	98 a1       	lds	r25, 0x48
    f398:	90 95       	com	r25
    f39a:	81 95       	neg	r24
    f39c:	9f 4f       	sbci	r25, 0xFF	; 255
    f39e:	02 c0       	rjmp	.+4      	; 0xf3a4 <dcmInit+0x630>
       else
           return (int16_t)i_x;
    f3a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    f3a2:	98 a1       	lds	r25, 0x48
   gt_insDev.as_dcm[1][2] = utl_rShft32_16( i_temp2, 14);
    f3a4:	80 93 0a 24 	sts	0x240A, r24
    f3a8:	90 93 0b 24 	sts	0x240B, r25

   gt_insDev.as_dcm[2][0] = -utl_sin16_16(s_pitch);
    f3ac:	8b 81       	ldd	r24, Y+3	; 0x03
    f3ae:	9c 81       	ldd	r25, Y+4	; 0x04
    f3b0:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f3b4:	90 95       	com	r25
    f3b6:	81 95       	neg	r24
    f3b8:	9f 4f       	sbci	r25, 0xFF	; 255
    f3ba:	80 93 0c 24 	sts	0x240C, r24
    f3be:	90 93 0d 24 	sts	0x240D, r25
   gt_insDev.as_dcm[2][1] = utl_mult16x16_16( utl_sin16_16(s_roll),
    f3c2:	89 81       	ldd	r24, Y+1	; 0x01
    f3c4:	9a 81       	ldd	r25, Y+2	; 0x02
    f3c6:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f3ca:	8c 01       	movw	r16, r24
    f3cc:	8b 81       	ldd	r24, Y+3	; 0x03
    f3ce:	9c 81       	ldd	r25, Y+4	; 0x04
    f3d0:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f3d4:	9c 01       	movw	r18, r24
    f3d6:	c8 01       	movw	r24, r16
    f3d8:	b9 01       	movw	r22, r18
    f3da:	4f e0       	ldi	r20, 0x0F	; 15
    f3dc:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    f3e0:	80 93 0e 24 	sts	0x240E, r24
    f3e4:	90 93 0f 24 	sts	0x240F, r25
   utl_cos16_16(s_pitch), 15);
   gt_insDev.as_dcm[2][2] = utl_mult16x16_16( utl_cos16_16(s_roll),
    f3e8:	89 81       	ldd	r24, Y+1	; 0x01
    f3ea:	9a 81       	ldd	r25, Y+2	; 0x02
    f3ec:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f3f0:	8c 01       	movw	r16, r24
    f3f2:	8b 81       	ldd	r24, Y+3	; 0x03
    f3f4:	9c 81       	ldd	r25, Y+4	; 0x04
    f3f6:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f3fa:	9c 01       	movw	r18, r24
    f3fc:	c8 01       	movw	r24, r16
    f3fe:	b9 01       	movw	r22, r18
    f400:	4f e0       	ldi	r20, 0x0F	; 15
    f402:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
    f406:	80 93 10 24 	sts	0x2410, r24
    f40a:	90 93 11 24 	sts	0x2411, r25
   utl_cos16_16(s_pitch), 15);

}/*End dcmInit*/
    f40e:	e6 96       	adiw	r28, 0x36	; 54
    f410:	cd bf       	out	0x3d, r28	; 61
    f412:	de bf       	out	0x3e, r29	; 62
    f414:	df 91       	pop	r29
    f416:	cf 91       	pop	r28
    f418:	1f 91       	pop	r17
    f41a:	0f 91       	pop	r16
    f41c:	08 95       	ret

0000f41e <dcmToEuler>:

/*---------------------------------------------------------------------------*
 * Convert from DCM representation to Euler using eq 2.17 of [1]
 *---------------------------------------------------------------------------*/
static inline void dcmToEuler( int16_t *ps_att)
{
    f41e:	ef 92       	push	r14
    f420:	ff 92       	push	r15
    f422:	0f 93       	push	r16
    f424:	1f 93       	push	r17
    f426:	cf 93       	push	r28
    f428:	df 93       	push	r29
    f42a:	cd b7       	in	r28, 0x3d	; 61
    f42c:	de b7       	in	r29, 0x3e	; 62
    f42e:	2a 97       	sbiw	r28, 0x0a	; 10
    f430:	cd bf       	out	0x3d, r28	; 61
    f432:	de bf       	out	0x3e, r29	; 62
    f434:	89 87       	std	Y+9, r24	; 0x09
    f436:	9a 87       	std	Y+10, r25	; 0x0a
   int32_t i_temp;
   int32_t i_temp2;

   ps_att[0] = utl_atan2_16( gt_insDev.as_dcm[2][1], gt_insDev.as_dcm[2][2]);
    f438:	80 91 0e 24 	lds	r24, 0x240E
    f43c:	90 91 0f 24 	lds	r25, 0x240F
    f440:	20 91 10 24 	lds	r18, 0x2410
    f444:	30 91 11 24 	lds	r19, 0x2411
    f448:	b9 01       	movw	r22, r18
    f44a:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    f44e:	9c 01       	movw	r18, r24
    f450:	89 85       	ldd	r24, Y+9	; 0x09
    f452:	9a 85       	ldd	r25, Y+10	; 0x0a
    f454:	fc 01       	movw	r30, r24
    f456:	20 83       	st	Z, r18
    f458:	31 83       	std	Z+1, r19	; 0x01
   /*------------------------------------------------------------------------*
    * In order to get accurate results when the 'x' is small in the sqrt x,
    * the value of x is shifted up by 10.
    * y = sqrt( 1 - dcm[2][0]*dcm[2][0])
    *------------------------------------------------------------------------*/
   i_temp2 = utl_mult16x16_32( gt_insDev.as_dcm[2][0], gt_insDev.as_dcm[2][0],
    f45a:	80 91 0c 24 	lds	r24, 0x240C
    f45e:	90 91 0d 24 	lds	r25, 0x240D
    f462:	20 91 0c 24 	lds	r18, 0x240C
    f466:	30 91 0d 24 	lds	r19, 0x240D
    f46a:	b9 01       	movw	r22, r18
    f46c:	45 e0       	ldi	r20, 0x05	; 5
    f46e:	0e 94 8f de 	call	0x1bd1e	; 0x1bd1e <utl_mult16x16_32>
    f472:	dc 01       	movw	r26, r24
    f474:	cb 01       	movw	r24, r22
    f476:	8d 83       	std	Y+5, r24	; 0x05
    f478:	9e 83       	std	Y+6, r25	; 0x06
    f47a:	af 83       	std	Y+7, r26	; 0x07
    f47c:	b8 87       	std	Y+8, r27	; 0x08
   5);

   i_temp = (((int32_t)1 << 25) - 1) - i_temp2;
    f47e:	2f ef       	ldi	r18, 0xFF	; 255
    f480:	3f ef       	ldi	r19, 0xFF	; 255
    f482:	4f ef       	ldi	r20, 0xFF	; 255
    f484:	51 e0       	ldi	r21, 0x01	; 1
    f486:	8d 81       	ldd	r24, Y+5	; 0x05
    f488:	9e 81       	ldd	r25, Y+6	; 0x06
    f48a:	af 81       	ldd	r26, Y+7	; 0x07
    f48c:	b8 85       	ldd	r27, Y+8	; 0x08
    f48e:	79 01       	movw	r14, r18
    f490:	8a 01       	movw	r16, r20
    f492:	e8 1a       	sub	r14, r24
    f494:	f9 0a       	sbc	r15, r25
    f496:	0a 0b       	sbc	r16, r26
    f498:	1b 0b       	sbc	r17, r27
    f49a:	d8 01       	movw	r26, r16
    f49c:	c7 01       	movw	r24, r14
    f49e:	89 83       	std	Y+1, r24	; 0x01
    f4a0:	9a 83       	std	Y+2, r25	; 0x02
    f4a2:	ab 83       	std	Y+3, r26	; 0x03
    f4a4:	bc 83       	std	Y+4, r27	; 0x04

   i_temp = utl_sqrt32_32( i_temp, 15) >> 5;
    f4a6:	89 81       	ldd	r24, Y+1	; 0x01
    f4a8:	9a 81       	ldd	r25, Y+2	; 0x02
    f4aa:	ab 81       	ldd	r26, Y+3	; 0x03
    f4ac:	bc 81       	ldd	r27, Y+4	; 0x04
    f4ae:	bc 01       	movw	r22, r24
    f4b0:	cd 01       	movw	r24, r26
    f4b2:	4f e0       	ldi	r20, 0x0F	; 15
    f4b4:	0e 94 06 dc 	call	0x1b80c	; 0x1b80c <utl_sqrt32_32>
    f4b8:	dc 01       	movw	r26, r24
    f4ba:	cb 01       	movw	r24, r22
    f4bc:	68 94       	set
    f4be:	14 f8       	bld	r1, 4
    f4c0:	b6 95       	lsr	r27
    f4c2:	a7 95       	ror	r26
    f4c4:	97 95       	ror	r25
    f4c6:	87 95       	ror	r24
    f4c8:	16 94       	lsr	r1
    f4ca:	d1 f7       	brne	.-12     	; 0xf4c0 <dcmToEuler+0xa2>
    f4cc:	89 83       	std	Y+1, r24	; 0x01
    f4ce:	9a 83       	std	Y+2, r25	; 0x02
    f4d0:	ab 83       	std	Y+3, r26	; 0x03
    f4d2:	bc 83       	std	Y+4, r27	; 0x04

   if( i_temp > 32767)
    f4d4:	89 81       	ldd	r24, Y+1	; 0x01
    f4d6:	9a 81       	ldd	r25, Y+2	; 0x02
    f4d8:	ab 81       	ldd	r26, Y+3	; 0x03
    f4da:	bc 81       	ldd	r27, Y+4	; 0x04
    f4dc:	80 30       	cpi	r24, 0x00	; 0
    f4de:	00 e8       	ldi	r16, 0x80	; 128
    f4e0:	90 07       	cpc	r25, r16
    f4e2:	00 e0       	ldi	r16, 0x00	; 0
    f4e4:	a0 07       	cpc	r26, r16
    f4e6:	00 e0       	ldi	r16, 0x00	; 0
    f4e8:	b0 07       	cpc	r27, r16
    f4ea:	44 f0       	brlt	.+16     	; 0xf4fc <dcmToEuler+0xde>
      i_temp = 32767;
    f4ec:	8f ef       	ldi	r24, 0xFF	; 255
    f4ee:	9f e7       	ldi	r25, 0x7F	; 127
    f4f0:	a0 e0       	ldi	r26, 0x00	; 0
    f4f2:	b0 e0       	ldi	r27, 0x00	; 0
    f4f4:	89 83       	std	Y+1, r24	; 0x01
    f4f6:	9a 83       	std	Y+2, r25	; 0x02
    f4f8:	ab 83       	std	Y+3, r26	; 0x03
    f4fa:	bc 83       	std	Y+4, r27	; 0x04

   ps_att[1] = -utl_atan2_16( gt_insDev.as_dcm[2][0], i_temp);
    f4fc:	89 85       	ldd	r24, Y+9	; 0x09
    f4fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    f500:	8c 01       	movw	r16, r24
    f502:	0e 5f       	subi	r16, 0xFE	; 254
    f504:	1f 4f       	sbci	r17, 0xFF	; 255
    f506:	80 91 0c 24 	lds	r24, 0x240C
    f50a:	90 91 0d 24 	lds	r25, 0x240D
    f50e:	29 81       	ldd	r18, Y+1	; 0x01
    f510:	3a 81       	ldd	r19, Y+2	; 0x02
    f512:	b9 01       	movw	r22, r18
    f514:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    f518:	90 95       	com	r25
    f51a:	81 95       	neg	r24
    f51c:	9f 4f       	sbci	r25, 0xFF	; 255
    f51e:	f8 01       	movw	r30, r16
    f520:	80 83       	st	Z, r24
    f522:	91 83       	std	Z+1, r25	; 0x01
   ps_att[2] = utl_atan2_16( gt_insDev.as_dcm[1][0], gt_insDev.as_dcm[0][0]);
    f524:	89 85       	ldd	r24, Y+9	; 0x09
    f526:	9a 85       	ldd	r25, Y+10	; 0x0a
    f528:	8c 01       	movw	r16, r24
    f52a:	0c 5f       	subi	r16, 0xFC	; 252
    f52c:	1f 4f       	sbci	r17, 0xFF	; 255
    f52e:	80 91 06 24 	lds	r24, 0x2406
    f532:	90 91 07 24 	lds	r25, 0x2407
    f536:	20 91 00 24 	lds	r18, 0x2400
    f53a:	30 91 01 24 	lds	r19, 0x2401
    f53e:	b9 01       	movw	r22, r18
    f540:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    f544:	f8 01       	movw	r30, r16
    f546:	80 83       	st	Z, r24
    f548:	91 83       	std	Z+1, r25	; 0x01

}/*End dcmToEuler*/
    f54a:	2a 96       	adiw	r28, 0x0a	; 10
    f54c:	cd bf       	out	0x3d, r28	; 61
    f54e:	de bf       	out	0x3e, r29	; 62
    f550:	df 91       	pop	r29
    f552:	cf 91       	pop	r28
    f554:	1f 91       	pop	r17
    f556:	0f 91       	pop	r16
    f558:	ff 90       	pop	r15
    f55a:	ef 90       	pop	r14
    f55c:	08 95       	ret

0000f55e <gyroDegToRad>:

static inline void gyroDegToRad( int16_t *ps_gyDeg,
                                 int32_t *pi_gyRad)
{
    f55e:	ef 92       	push	r14
    f560:	ff 92       	push	r15
    f562:	0f 93       	push	r16
    f564:	cf 93       	push	r28
    f566:	df 93       	push	r29
    f568:	00 d0       	rcall	.+0      	; 0xf56a <gyroDegToRad+0xc>
    f56a:	0f 92       	push	r0
    f56c:	cd b7       	in	r28, 0x3d	; 61
    f56e:	de b7       	in	r29, 0x3e	; 62
    f570:	89 83       	std	Y+1, r24	; 0x01
    f572:	9a 83       	std	Y+2, r25	; 0x02
    f574:	6b 83       	std	Y+3, r22	; 0x03
    f576:	7c 83       	std	Y+4, r23	; 0x04
    * scaling, this error will be corrected by the Kalman filter's estimate of
    * the axis scale factors. Additionally, the truncation is treated as
    * additional system (process) noise within the Kalman filter algorithm.
    * Q16.15 number
    *------------------------------------------------------------------------*/
   pi_gyRad[0] = utl_mult32x32_32( (int32_t)ps_gyDeg[0],
    f578:	89 81       	ldd	r24, Y+1	; 0x01
    f57a:	9a 81       	ldd	r25, Y+2	; 0x02
    f57c:	fc 01       	movw	r30, r24
    f57e:	80 81       	ld	r24, Z
    f580:	91 81       	ldd	r25, Z+1	; 0x01
    f582:	aa 27       	eor	r26, r26
    f584:	97 fd       	sbrc	r25, 7
    f586:	a0 95       	com	r26
    f588:	ba 2f       	mov	r27, r26
    f58a:	bc 01       	movw	r22, r24
    f58c:	cd 01       	movw	r24, r26
    f58e:	20 ed       	ldi	r18, 0xD0	; 208
    f590:	35 e4       	ldi	r19, 0x45	; 69
    f592:	40 e0       	ldi	r20, 0x00	; 0
    f594:	50 e0       	ldi	r21, 0x00	; 0
    f596:	09 e0       	ldi	r16, 0x09	; 9
    f598:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    f59c:	dc 01       	movw	r26, r24
    f59e:	cb 01       	movw	r24, r22
    f5a0:	2b 81       	ldd	r18, Y+3	; 0x03
    f5a2:	3c 81       	ldd	r19, Y+4	; 0x04
    f5a4:	f9 01       	movw	r30, r18
    f5a6:	80 83       	st	Z, r24
    f5a8:	91 83       	std	Z+1, r25	; 0x01
    f5aa:	a2 83       	std	Z+2, r26	; 0x02
    f5ac:	b3 83       	std	Z+3, r27	; 0x03
   (int32_t)INS_GYRO_CONV_FACTOR, 9);
   pi_gyRad[1] = utl_mult32x32_32( (int32_t)ps_gyDeg[1],
    f5ae:	8b 81       	ldd	r24, Y+3	; 0x03
    f5b0:	9c 81       	ldd	r25, Y+4	; 0x04
    f5b2:	ee 24       	eor	r14, r14
    f5b4:	ff 24       	eor	r15, r15
    f5b6:	68 94       	set
    f5b8:	e2 f8       	bld	r14, 2
    f5ba:	e8 0e       	add	r14, r24
    f5bc:	f9 1e       	adc	r15, r25
    f5be:	89 81       	ldd	r24, Y+1	; 0x01
    f5c0:	9a 81       	ldd	r25, Y+2	; 0x02
    f5c2:	02 96       	adiw	r24, 0x02	; 2
    f5c4:	fc 01       	movw	r30, r24
    f5c6:	80 81       	ld	r24, Z
    f5c8:	91 81       	ldd	r25, Z+1	; 0x01
    f5ca:	aa 27       	eor	r26, r26
    f5cc:	97 fd       	sbrc	r25, 7
    f5ce:	a0 95       	com	r26
    f5d0:	ba 2f       	mov	r27, r26
    f5d2:	bc 01       	movw	r22, r24
    f5d4:	cd 01       	movw	r24, r26
    f5d6:	20 ed       	ldi	r18, 0xD0	; 208
    f5d8:	35 e4       	ldi	r19, 0x45	; 69
    f5da:	40 e0       	ldi	r20, 0x00	; 0
    f5dc:	50 e0       	ldi	r21, 0x00	; 0
    f5de:	09 e0       	ldi	r16, 0x09	; 9
    f5e0:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    f5e4:	dc 01       	movw	r26, r24
    f5e6:	cb 01       	movw	r24, r22
    f5e8:	f7 01       	movw	r30, r14
    f5ea:	80 83       	st	Z, r24
    f5ec:	91 83       	std	Z+1, r25	; 0x01
    f5ee:	a2 83       	std	Z+2, r26	; 0x02
    f5f0:	b3 83       	std	Z+3, r27	; 0x03
   (int32_t)INS_GYRO_CONV_FACTOR, 9);
   pi_gyRad[2] = utl_mult32x32_32( (int32_t)ps_gyDeg[2],
    f5f2:	8b 81       	ldd	r24, Y+3	; 0x03
    f5f4:	9c 81       	ldd	r25, Y+4	; 0x04
    f5f6:	ee 24       	eor	r14, r14
    f5f8:	ff 24       	eor	r15, r15
    f5fa:	68 94       	set
    f5fc:	e3 f8       	bld	r14, 3
    f5fe:	e8 0e       	add	r14, r24
    f600:	f9 1e       	adc	r15, r25
    f602:	89 81       	ldd	r24, Y+1	; 0x01
    f604:	9a 81       	ldd	r25, Y+2	; 0x02
    f606:	04 96       	adiw	r24, 0x04	; 4
    f608:	fc 01       	movw	r30, r24
    f60a:	80 81       	ld	r24, Z
    f60c:	91 81       	ldd	r25, Z+1	; 0x01
    f60e:	aa 27       	eor	r26, r26
    f610:	97 fd       	sbrc	r25, 7
    f612:	a0 95       	com	r26
    f614:	ba 2f       	mov	r27, r26
    f616:	bc 01       	movw	r22, r24
    f618:	cd 01       	movw	r24, r26
    f61a:	20 ed       	ldi	r18, 0xD0	; 208
    f61c:	35 e4       	ldi	r19, 0x45	; 69
    f61e:	40 e0       	ldi	r20, 0x00	; 0
    f620:	50 e0       	ldi	r21, 0x00	; 0
    f622:	09 e0       	ldi	r16, 0x09	; 9
    f624:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
    f628:	dc 01       	movw	r26, r24
    f62a:	cb 01       	movw	r24, r22
    f62c:	f7 01       	movw	r30, r14
    f62e:	80 83       	st	Z, r24
    f630:	91 83       	std	Z+1, r25	; 0x01
    f632:	a2 83       	std	Z+2, r26	; 0x02
    f634:	b3 83       	std	Z+3, r27	; 0x03
   (int32_t)INS_GYRO_CONV_FACTOR, 9);

}/*End gyroDegToRad*/
    f636:	24 96       	adiw	r28, 0x04	; 4
    f638:	cd bf       	out	0x3d, r28	; 61
    f63a:	de bf       	out	0x3e, r29	; 62
    f63c:	df 91       	pop	r29
    f63e:	cf 91       	pop	r28
    f640:	0f 91       	pop	r16
    f642:	ff 90       	pop	r15
    f644:	ef 90       	pop	r14
    f646:	08 95       	ret

0000f648 <readSensors>:

static inline void readSensors( int16_t *ps_mag,
                                int16_t *ps_gyr,
                                int16_t *ps_acc)
{
    f648:	cf 93       	push	r28
    f64a:	df 93       	push	r29
    f64c:	00 d0       	rcall	.+0      	; 0xf64e <readSensors+0x6>
    f64e:	00 d0       	rcall	.+0      	; 0xf650 <readSensors+0x8>
    f650:	cd b7       	in	r28, 0x3d	; 61
    f652:	de b7       	in	r29, 0x3e	; 62
    f654:	89 83       	std	Y+1, r24	; 0x01
    f656:	9a 83       	std	Y+2, r25	; 0x02
    f658:	6b 83       	std	Y+3, r22	; 0x03
    f65a:	7c 83       	std	Y+4, r23	; 0x04
    f65c:	4d 83       	std	Y+5, r20	; 0x05
    f65e:	5e 83       	std	Y+6, r21	; 0x06
   getMagMeas( ps_mag);
    f660:	89 81       	ldd	r24, Y+1	; 0x01
    f662:	9a 81       	ldd	r25, Y+2	; 0x02
    f664:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <getMagMeas>
	getGyroMeas( ps_gyr);
    f668:	8b 81       	ldd	r24, Y+3	; 0x03
    f66a:	9c 81       	ldd	r25, Y+4	; 0x04
    f66c:	0e 94 37 44 	call	0x886e	; 0x886e <getGyroMeas>
	getAccelMeas( ps_acc);
    f670:	8d 81       	ldd	r24, Y+5	; 0x05
    f672:	9e 81       	ldd	r25, Y+6	; 0x06
    f674:	0e 94 a1 44 	call	0x8942	; 0x8942 <getAccelMeas>

}/*End readSensors*/
    f678:	26 96       	adiw	r28, 0x06	; 6
    f67a:	cd bf       	out	0x3d, r28	; 61
    f67c:	de bf       	out	0x3e, r29	; 62
    f67e:	df 91       	pop	r29
    f680:	cf 91       	pop	r28
    f682:	08 95       	ret

0000f684 <getRawAttitude>:
 * magnetometer using eq's 10.14 and 10.15 of [3] and eq 10.6 of [1].
 *---------------------------------------------------------------------------*/
static inline void getRawAttitude( int16_t *ps_acc,
                                   int16_t *ps_mag,
                                   int16_t *ps_att)
{
    f684:	0f 93       	push	r16
    f686:	1f 93       	push	r17
    f688:	cf 93       	push	r28
    f68a:	df 93       	push	r29
    f68c:	cd b7       	in	r28, 0x3d	; 61
    f68e:	de b7       	in	r29, 0x3e	; 62
    f690:	e6 97       	sbiw	r28, 0x36	; 54
    f692:	cd bf       	out	0x3d, r28	; 61
    f694:	de bf       	out	0x3e, r29	; 62
    f696:	89 ab       	sts	0x59, r24
    f698:	9a ab       	sts	0x5a, r25
    f69a:	6b ab       	sts	0x5b, r22
    f69c:	7c ab       	sts	0x5c, r23
    f69e:	4d ab       	sts	0x5d, r20
    f6a0:	5e ab       	sts	0x5e, r21
   int16_t s_cosPitch;
   int16_t s_sinPitch;
   int16_t s_magX;
   int16_t s_magY;
   int16_t s_temp1;
   int32_t i_temp2 = 0;
    f6a2:	19 82       	std	Y+1, r1	; 0x01
    f6a4:	1a 82       	std	Y+2, r1	; 0x02
    f6a6:	1b 82       	std	Y+3, r1	; 0x03
    f6a8:	1c 82       	std	Y+4, r1	; 0x04

   /*------------------------------------------------------------------------*
    * Calculate the roll...
    *------------------------------------------------------------------------*/
   ps_att[0] = utl_atan2_16( ps_acc[1], ps_acc[2]);
    f6aa:	89 a9       	sts	0x49, r24
    f6ac:	9a a9       	sts	0x4a, r25
    f6ae:	02 96       	adiw	r24, 0x02	; 2
    f6b0:	fc 01       	movw	r30, r24
    f6b2:	80 81       	ld	r24, Z
    f6b4:	91 81       	ldd	r25, Z+1	; 0x01
    f6b6:	29 a9       	sts	0x49, r18
    f6b8:	3a a9       	sts	0x4a, r19
    f6ba:	2c 5f       	subi	r18, 0xFC	; 252
    f6bc:	3f 4f       	sbci	r19, 0xFF	; 255
    f6be:	f9 01       	movw	r30, r18
    f6c0:	20 81       	ld	r18, Z
    f6c2:	31 81       	ldd	r19, Z+1	; 0x01
    f6c4:	b9 01       	movw	r22, r18
    f6c6:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    f6ca:	9c 01       	movw	r18, r24
    f6cc:	8d a9       	sts	0x4d, r24
    f6ce:	9e a9       	sts	0x4e, r25
    f6d0:	fc 01       	movw	r30, r24
    f6d2:	20 83       	st	Z, r18
    f6d4:	31 83       	std	Z+1, r19	; 0x01

   i_temp2 = utl_mac16x16_32( ps_acc[1], ps_acc[1], i_temp2, 0);
    f6d6:	89 a9       	sts	0x49, r24
    f6d8:	9a a9       	sts	0x4a, r25
    f6da:	02 96       	adiw	r24, 0x02	; 2
    f6dc:	fc 01       	movw	r30, r24
    f6de:	80 81       	ld	r24, Z
    f6e0:	91 81       	ldd	r25, Z+1	; 0x01
    f6e2:	29 a9       	sts	0x49, r18
    f6e4:	3a a9       	sts	0x4a, r19
    f6e6:	2e 5f       	subi	r18, 0xFE	; 254
    f6e8:	3f 4f       	sbci	r19, 0xFF	; 255
    f6ea:	f9 01       	movw	r30, r18
    f6ec:	60 81       	ld	r22, Z
    f6ee:	71 81       	ldd	r23, Z+1	; 0x01
    f6f0:	29 81       	ldd	r18, Y+1	; 0x01
    f6f2:	3a 81       	ldd	r19, Y+2	; 0x02
    f6f4:	4b 81       	ldd	r20, Y+3	; 0x03
    f6f6:	5c 81       	ldd	r21, Y+4	; 0x04
    f6f8:	00 e0       	ldi	r16, 0x00	; 0
    f6fa:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f6fe:	dc 01       	movw	r26, r24
    f700:	cb 01       	movw	r24, r22
    f702:	89 83       	std	Y+1, r24	; 0x01
    f704:	9a 83       	std	Y+2, r25	; 0x02
    f706:	ab 83       	std	Y+3, r26	; 0x03
    f708:	bc 83       	std	Y+4, r27	; 0x04
   i_temp2 = utl_mac16x16_32( ps_acc[2], ps_acc[2], i_temp2, 0);
    f70a:	89 a9       	sts	0x49, r24
    f70c:	9a a9       	sts	0x4a, r25
    f70e:	04 96       	adiw	r24, 0x04	; 4
    f710:	fc 01       	movw	r30, r24
    f712:	80 81       	ld	r24, Z
    f714:	91 81       	ldd	r25, Z+1	; 0x01
    f716:	29 a9       	sts	0x49, r18
    f718:	3a a9       	sts	0x4a, r19
    f71a:	2c 5f       	subi	r18, 0xFC	; 252
    f71c:	3f 4f       	sbci	r19, 0xFF	; 255
    f71e:	f9 01       	movw	r30, r18
    f720:	60 81       	ld	r22, Z
    f722:	71 81       	ldd	r23, Z+1	; 0x01
    f724:	29 81       	ldd	r18, Y+1	; 0x01
    f726:	3a 81       	ldd	r19, Y+2	; 0x02
    f728:	4b 81       	ldd	r20, Y+3	; 0x03
    f72a:	5c 81       	ldd	r21, Y+4	; 0x04
    f72c:	00 e0       	ldi	r16, 0x00	; 0
    f72e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f732:	dc 01       	movw	r26, r24
    f734:	cb 01       	movw	r24, r22
    f736:	89 83       	std	Y+1, r24	; 0x01
    f738:	9a 83       	std	Y+2, r25	; 0x02
    f73a:	ab 83       	std	Y+3, r26	; 0x03
    f73c:	bc 83       	std	Y+4, r27	; 0x04

   i_temp2 = (int32_t)(i_temp2 >> 5);
    f73e:	89 81       	ldd	r24, Y+1	; 0x01
    f740:	9a 81       	ldd	r25, Y+2	; 0x02
    f742:	ab 81       	ldd	r26, Y+3	; 0x03
    f744:	bc 81       	ldd	r27, Y+4	; 0x04
    f746:	68 94       	set
    f748:	14 f8       	bld	r1, 4
    f74a:	b5 95       	asr	r27
    f74c:	a7 95       	ror	r26
    f74e:	97 95       	ror	r25
    f750:	87 95       	ror	r24
    f752:	16 94       	lsr	r1
    f754:	d1 f7       	brne	.-12     	; 0xf74a <getRawAttitude+0xc6>
    f756:	89 83       	std	Y+1, r24	; 0x01
    f758:	9a 83       	std	Y+2, r25	; 0x02
    f75a:	ab 83       	std	Y+3, r26	; 0x03
    f75c:	bc 83       	std	Y+4, r27	; 0x04

   i_temp2 = utl_sqrt32_32( i_temp2, 15) >> 5;
    f75e:	89 81       	ldd	r24, Y+1	; 0x01
    f760:	9a 81       	ldd	r25, Y+2	; 0x02
    f762:	ab 81       	ldd	r26, Y+3	; 0x03
    f764:	bc 81       	ldd	r27, Y+4	; 0x04
    f766:	bc 01       	movw	r22, r24
    f768:	cd 01       	movw	r24, r26
    f76a:	4f e0       	ldi	r20, 0x0F	; 15
    f76c:	0e 94 06 dc 	call	0x1b80c	; 0x1b80c <utl_sqrt32_32>
    f770:	dc 01       	movw	r26, r24
    f772:	cb 01       	movw	r24, r22
    f774:	68 94       	set
    f776:	14 f8       	bld	r1, 4
    f778:	b6 95       	lsr	r27
    f77a:	a7 95       	ror	r26
    f77c:	97 95       	ror	r25
    f77e:	87 95       	ror	r24
    f780:	16 94       	lsr	r1
    f782:	d1 f7       	brne	.-12     	; 0xf778 <getRawAttitude+0xf4>
    f784:	89 83       	std	Y+1, r24	; 0x01
    f786:	9a 83       	std	Y+2, r25	; 0x02
    f788:	ab 83       	std	Y+3, r26	; 0x03
    f78a:	bc 83       	std	Y+4, r27	; 0x04

   /*------------------------------------------------------------------------*
    * Calculate the pitch...
    *------------------------------------------------------------------------*/
   ps_att[1] = utl_atan2_16( -ps_acc[0], (int16_t)i_temp2);
    f78c:	8d a9       	sts	0x4d, r24
    f78e:	9e a9       	sts	0x4e, r25
    f790:	8c 01       	movw	r16, r24
    f792:	0e 5f       	subi	r16, 0xFE	; 254
    f794:	1f 4f       	sbci	r17, 0xFF	; 255
    f796:	89 a9       	sts	0x49, r24
    f798:	9a a9       	sts	0x4a, r25
    f79a:	fc 01       	movw	r30, r24
    f79c:	80 81       	ld	r24, Z
    f79e:	91 81       	ldd	r25, Z+1	; 0x01
    f7a0:	90 95       	com	r25
    f7a2:	81 95       	neg	r24
    f7a4:	9f 4f       	sbci	r25, 0xFF	; 255
    f7a6:	29 81       	ldd	r18, Y+1	; 0x01
    f7a8:	3a 81       	ldd	r19, Y+2	; 0x02
    f7aa:	b9 01       	movw	r22, r18
    f7ac:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    f7b0:	f8 01       	movw	r30, r16
    f7b2:	80 83       	st	Z, r24
    f7b4:	91 83       	std	Z+1, r25	; 0x01

   s_cosRoll = utl_cos16_16( ps_att[0]);
    f7b6:	8d a9       	sts	0x4d, r24
    f7b8:	9e a9       	sts	0x4e, r25
    f7ba:	fc 01       	movw	r30, r24
    f7bc:	80 81       	ld	r24, Z
    f7be:	91 81       	ldd	r25, Z+1	; 0x01
    f7c0:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f7c4:	8d 83       	std	Y+5, r24	; 0x05
    f7c6:	9e 83       	std	Y+6, r25	; 0x06
   s_sinRoll = utl_sin16_16( ps_att[0]);
    f7c8:	8d a9       	sts	0x4d, r24
    f7ca:	9e a9       	sts	0x4e, r25
    f7cc:	fc 01       	movw	r30, r24
    f7ce:	80 81       	ld	r24, Z
    f7d0:	91 81       	ldd	r25, Z+1	; 0x01
    f7d2:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f7d6:	8f 83       	std	Y+7, r24	; 0x07
    f7d8:	98 87       	std	Y+8, r25	; 0x08

   s_cosPitch = utl_cos16_16( ps_att[1]);
    f7da:	8d a9       	sts	0x4d, r24
    f7dc:	9e a9       	sts	0x4e, r25
    f7de:	02 96       	adiw	r24, 0x02	; 2
    f7e0:	fc 01       	movw	r30, r24
    f7e2:	80 81       	ld	r24, Z
    f7e4:	91 81       	ldd	r25, Z+1	; 0x01
    f7e6:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
    f7ea:	89 87       	std	Y+9, r24	; 0x09
    f7ec:	9a 87       	std	Y+10, r25	; 0x0a
   s_sinPitch = utl_sin16_16( ps_att[1]);
    f7ee:	8d a9       	sts	0x4d, r24
    f7f0:	9e a9       	sts	0x4e, r25
    f7f2:	02 96       	adiw	r24, 0x02	; 2
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	80 81       	ld	r24, Z
    f7f8:	91 81       	ldd	r25, Z+1	; 0x01
    f7fa:	0e 94 f2 db 	call	0x1b7e4	; 0x1b7e4 <utl_sin16_16>
    f7fe:	8b 87       	std	Y+11, r24	; 0x0b
    f800:	9c 87       	std	Y+12, r25	; 0x0c

   i_temp2 = 0;
    f802:	19 82       	std	Y+1, r1	; 0x01
    f804:	1a 82       	std	Y+2, r1	; 0x02
    f806:	1b 82       	std	Y+3, r1	; 0x03
    f808:	1c 82       	std	Y+4, r1	; 0x04
   i_temp2 = utl_mac16x16_32( ps_mag[1], s_sinRoll, i_temp2, 0);
    f80a:	8b a9       	sts	0x4b, r24
    f80c:	9c a9       	sts	0x4c, r25
    f80e:	02 96       	adiw	r24, 0x02	; 2
    f810:	fc 01       	movw	r30, r24
    f812:	80 81       	ld	r24, Z
    f814:	91 81       	ldd	r25, Z+1	; 0x01
    f816:	6f 81       	ldd	r22, Y+7	; 0x07
    f818:	78 85       	ldd	r23, Y+8	; 0x08
    f81a:	29 81       	ldd	r18, Y+1	; 0x01
    f81c:	3a 81       	ldd	r19, Y+2	; 0x02
    f81e:	4b 81       	ldd	r20, Y+3	; 0x03
    f820:	5c 81       	ldd	r21, Y+4	; 0x04
    f822:	00 e0       	ldi	r16, 0x00	; 0
    f824:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f828:	dc 01       	movw	r26, r24
    f82a:	cb 01       	movw	r24, r22
    f82c:	89 83       	std	Y+1, r24	; 0x01
    f82e:	9a 83       	std	Y+2, r25	; 0x02
    f830:	ab 83       	std	Y+3, r26	; 0x03
    f832:	bc 83       	std	Y+4, r27	; 0x04
   i_temp2 = utl_mac16x16_32( ps_mag[2], s_cosRoll, i_temp2, 0);
    f834:	8b a9       	sts	0x4b, r24
    f836:	9c a9       	sts	0x4c, r25
    f838:	04 96       	adiw	r24, 0x04	; 4
    f83a:	fc 01       	movw	r30, r24
    f83c:	80 81       	ld	r24, Z
    f83e:	91 81       	ldd	r25, Z+1	; 0x01
    f840:	6d 81       	ldd	r22, Y+5	; 0x05
    f842:	7e 81       	ldd	r23, Y+6	; 0x06
    f844:	29 81       	ldd	r18, Y+1	; 0x01
    f846:	3a 81       	ldd	r19, Y+2	; 0x02
    f848:	4b 81       	ldd	r20, Y+3	; 0x03
    f84a:	5c 81       	ldd	r21, Y+4	; 0x04
    f84c:	00 e0       	ldi	r16, 0x00	; 0
    f84e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f852:	dc 01       	movw	r26, r24
    f854:	cb 01       	movw	r24, r22
    f856:	89 83       	std	Y+1, r24	; 0x01
    f858:	9a 83       	std	Y+2, r25	; 0x02
    f85a:	ab 83       	std	Y+3, r26	; 0x03
    f85c:	bc 83       	std	Y+4, r27	; 0x04
    f85e:	89 81       	ldd	r24, Y+1	; 0x01
    f860:	9a 81       	ldd	r25, Y+2	; 0x02
    f862:	ab 81       	ldd	r26, Y+3	; 0x03
    f864:	bc 81       	ldd	r27, Y+4	; 0x04
    f866:	8b 8b       	std	Y+19, r24	; 0x13
    f868:	9c 8b       	std	Y+20, r25	; 0x14
    f86a:	ad 8b       	std	Y+21, r26	; 0x15
    f86c:	be 8b       	std	Y+22, r27	; 0x16
    f86e:	8f e0       	ldi	r24, 0x0F	; 15
    f870:	8f 8b       	std	Y+23, r24	; 0x17
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    f872:	81 e0       	ldi	r24, 0x01	; 1
    f874:	88 8f       	std	Y+24, r24	; 0x18

      if( i_x < 0)
    f876:	8b 89       	ldd	r24, Y+19	; 0x13
    f878:	9c 89       	ldd	r25, Y+20	; 0x14
    f87a:	ad 89       	ldd	r26, Y+21	; 0x15
    f87c:	be 89       	ldd	r27, Y+22	; 0x16
    f87e:	bb 23       	and	r27, r27
    f880:	8c f4       	brge	.+34     	; 0xf8a4 <getRawAttitude+0x220>
      {
         i_x = -i_x;
    f882:	8b 89       	ldd	r24, Y+19	; 0x13
    f884:	9c 89       	ldd	r25, Y+20	; 0x14
    f886:	ad 89       	ldd	r26, Y+21	; 0x15
    f888:	be 89       	ldd	r27, Y+22	; 0x16
    f88a:	b0 95       	com	r27
    f88c:	a0 95       	com	r26
    f88e:	90 95       	com	r25
    f890:	81 95       	neg	r24
    f892:	9f 4f       	sbci	r25, 0xFF	; 255
    f894:	af 4f       	sbci	r26, 0xFF	; 255
    f896:	bf 4f       	sbci	r27, 0xFF	; 255
    f898:	8b 8b       	std	Y+19, r24	; 0x13
    f89a:	9c 8b       	std	Y+20, r25	; 0x14
    f89c:	ad 8b       	std	Y+21, r26	; 0x15
    f89e:	be 8b       	std	Y+22, r27	; 0x16
         c_sign = -1;
    f8a0:	8f ef       	ldi	r24, 0xFF	; 255
    f8a2:	88 8f       	std	Y+24, r24	; 0x18
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    f8a4:	8f 89       	ldd	r24, Y+23	; 0x17
    f8a6:	89 30       	cpi	r24, 0x09	; 9
    f8a8:	3c f1       	brlt	.+78     	; 0xf8f8 <getRawAttitude+0x274>
    f8aa:	8f 89       	ldd	r24, Y+23	; 0x17
    f8ac:	81 31       	cpi	r24, 0x11	; 17
    f8ae:	24 f5       	brge	.+72     	; 0xf8f8 <getRawAttitude+0x274>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    f8b0:	8f 89       	ldd	r24, Y+23	; 0x17
    f8b2:	99 27       	eor	r25, r25
    f8b4:	87 fd       	sbrc	r24, 7
    f8b6:	90 95       	com	r25
    f8b8:	20 e1       	ldi	r18, 0x10	; 16
    f8ba:	30 e0       	ldi	r19, 0x00	; 0
    f8bc:	28 1b       	sub	r18, r24
    f8be:	39 0b       	sbc	r19, r25
    f8c0:	8b 89       	ldd	r24, Y+19	; 0x13
    f8c2:	9c 89       	ldd	r25, Y+20	; 0x14
    f8c4:	ad 89       	ldd	r26, Y+21	; 0x15
    f8c6:	be 89       	ldd	r27, Y+22	; 0x16
    f8c8:	02 2e       	mov	r0, r18
    f8ca:	04 c0       	rjmp	.+8      	; 0xf8d4 <getRawAttitude+0x250>
    f8cc:	88 0f       	add	r24, r24
    f8ce:	99 1f       	adc	r25, r25
    f8d0:	aa 1f       	adc	r26, r26
    f8d2:	bb 1f       	adc	r27, r27
    f8d4:	0a 94       	dec	r0
    f8d6:	d2 f7       	brpl	.-12     	; 0xf8cc <getRawAttitude+0x248>
    f8d8:	8d a7       	lds	r24, 0x7d
    f8da:	9e a7       	lds	r25, 0x7e
    f8dc:	af a7       	lds	r26, 0x7f
    f8de:	b8 ab       	sts	0x58, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    f8e0:	88 8d       	ldd	r24, Y+24	; 0x18
    f8e2:	8f 3f       	cpi	r24, 0xFF	; 255
    f8e4:	31 f4       	brne	.+12     	; 0xf8f2 <getRawAttitude+0x26e>
              return -t_tWord.as_word16[1];
    f8e6:	8f a5       	lds	r24, 0x6f
    f8e8:	98 a9       	sts	0x48, r25
    f8ea:	90 95       	com	r25
    f8ec:	81 95       	neg	r24
    f8ee:	9f 4f       	sbci	r25, 0xFF	; 255
    f8f0:	23 c0       	rjmp	.+70     	; 0xf938 <getRawAttitude+0x2b4>
           else
            return t_tWord.as_word16[1];
    f8f2:	8f a5       	lds	r24, 0x6f
    f8f4:	98 a9       	sts	0x48, r25
    f8f6:	20 c0       	rjmp	.+64     	; 0xf938 <getRawAttitude+0x2b4>
      }

      i_x = i_x >> c_n;
    f8f8:	8f 89       	ldd	r24, Y+23	; 0x17
    f8fa:	28 2f       	mov	r18, r24
    f8fc:	33 27       	eor	r19, r19
    f8fe:	27 fd       	sbrc	r18, 7
    f900:	30 95       	com	r19
    f902:	8b 89       	ldd	r24, Y+19	; 0x13
    f904:	9c 89       	ldd	r25, Y+20	; 0x14
    f906:	ad 89       	ldd	r26, Y+21	; 0x15
    f908:	be 89       	ldd	r27, Y+22	; 0x16
    f90a:	02 2e       	mov	r0, r18
    f90c:	04 c0       	rjmp	.+8      	; 0xf916 <getRawAttitude+0x292>
    f90e:	b5 95       	asr	r27
    f910:	a7 95       	ror	r26
    f912:	97 95       	ror	r25
    f914:	87 95       	ror	r24
    f916:	0a 94       	dec	r0
    f918:	d2 f7       	brpl	.-12     	; 0xf90e <getRawAttitude+0x28a>
    f91a:	8b 8b       	std	Y+19, r24	; 0x13
    f91c:	9c 8b       	std	Y+20, r25	; 0x14
    f91e:	ad 8b       	std	Y+21, r26	; 0x15
    f920:	be 8b       	std	Y+22, r27	; 0x16
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    f922:	88 8d       	ldd	r24, Y+24	; 0x18
    f924:	8f 3f       	cpi	r24, 0xFF	; 255
    f926:	31 f4       	brne	.+12     	; 0xf934 <getRawAttitude+0x2b0>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    f928:	8b 89       	ldd	r24, Y+19	; 0x13
    f92a:	9c 89       	ldd	r25, Y+20	; 0x14
    f92c:	90 95       	com	r25
    f92e:	81 95       	neg	r24
    f930:	9f 4f       	sbci	r25, 0xFF	; 255
    f932:	02 c0       	rjmp	.+4      	; 0xf938 <getRawAttitude+0x2b4>
       else
           return (int16_t)i_x;
    f934:	8b 89       	ldd	r24, Y+19	; 0x13
    f936:	9c 89       	ldd	r25, Y+20	; 0x14
   s_temp1 = utl_rShft32_16( i_temp2, 15); /*Q18*/
    f938:	8d 87       	std	Y+13, r24	; 0x0d
    f93a:	9e 87       	std	Y+14, r25	; 0x0e

   i_temp2 = 0;
    f93c:	19 82       	std	Y+1, r1	; 0x01
    f93e:	1a 82       	std	Y+2, r1	; 0x02
    f940:	1b 82       	std	Y+3, r1	; 0x03
    f942:	1c 82       	std	Y+4, r1	; 0x04
   i_temp2 = utl_mac16x16_32( ps_mag[0], s_cosPitch, i_temp2, 0);
    f944:	8b a9       	sts	0x4b, r24
    f946:	9c a9       	sts	0x4c, r25
    f948:	fc 01       	movw	r30, r24
    f94a:	80 81       	ld	r24, Z
    f94c:	91 81       	ldd	r25, Z+1	; 0x01
    f94e:	69 85       	ldd	r22, Y+9	; 0x09
    f950:	7a 85       	ldd	r23, Y+10	; 0x0a
    f952:	29 81       	ldd	r18, Y+1	; 0x01
    f954:	3a 81       	ldd	r19, Y+2	; 0x02
    f956:	4b 81       	ldd	r20, Y+3	; 0x03
    f958:	5c 81       	ldd	r21, Y+4	; 0x04
    f95a:	00 e0       	ldi	r16, 0x00	; 0
    f95c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f960:	dc 01       	movw	r26, r24
    f962:	cb 01       	movw	r24, r22
    f964:	89 83       	std	Y+1, r24	; 0x01
    f966:	9a 83       	std	Y+2, r25	; 0x02
    f968:	ab 83       	std	Y+3, r26	; 0x03
    f96a:	bc 83       	std	Y+4, r27	; 0x04
   i_temp2 = utl_mac16x16_32( s_sinPitch, s_temp1, i_temp2, 0);
    f96c:	8b 85       	ldd	r24, Y+11	; 0x0b
    f96e:	9c 85       	ldd	r25, Y+12	; 0x0c
    f970:	6d 85       	ldd	r22, Y+13	; 0x0d
    f972:	7e 85       	ldd	r23, Y+14	; 0x0e
    f974:	29 81       	ldd	r18, Y+1	; 0x01
    f976:	3a 81       	ldd	r19, Y+2	; 0x02
    f978:	4b 81       	ldd	r20, Y+3	; 0x03
    f97a:	5c 81       	ldd	r21, Y+4	; 0x04
    f97c:	00 e0       	ldi	r16, 0x00	; 0
    f97e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    f982:	dc 01       	movw	r26, r24
    f984:	cb 01       	movw	r24, r22
    f986:	89 83       	std	Y+1, r24	; 0x01
    f988:	9a 83       	std	Y+2, r25	; 0x02
    f98a:	ab 83       	std	Y+3, r26	; 0x03
    f98c:	bc 83       	std	Y+4, r27	; 0x04
    f98e:	89 81       	ldd	r24, Y+1	; 0x01
    f990:	9a 81       	ldd	r25, Y+2	; 0x02
    f992:	ab 81       	ldd	r26, Y+3	; 0x03
    f994:	bc 81       	ldd	r27, Y+4	; 0x04
    f996:	89 8f       	std	Y+25, r24	; 0x19
    f998:	9a 8f       	std	Y+26, r25	; 0x1a
    f99a:	ab 8f       	std	Y+27, r26	; 0x1b
    f99c:	bc 8f       	std	Y+28, r27	; 0x1c
    f99e:	89 e0       	ldi	r24, 0x09	; 9
    f9a0:	8d 8f       	std	Y+29, r24	; 0x1d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    f9a2:	81 e0       	ldi	r24, 0x01	; 1
    f9a4:	8e 8f       	std	Y+30, r24	; 0x1e

      if( i_x < 0)
    f9a6:	89 8d       	ldd	r24, Y+25	; 0x19
    f9a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f9aa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f9ac:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f9ae:	bb 23       	and	r27, r27
    f9b0:	8c f4       	brge	.+34     	; 0xf9d4 <getRawAttitude+0x350>
      {
         i_x = -i_x;
    f9b2:	89 8d       	ldd	r24, Y+25	; 0x19
    f9b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f9b6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f9b8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f9ba:	b0 95       	com	r27
    f9bc:	a0 95       	com	r26
    f9be:	90 95       	com	r25
    f9c0:	81 95       	neg	r24
    f9c2:	9f 4f       	sbci	r25, 0xFF	; 255
    f9c4:	af 4f       	sbci	r26, 0xFF	; 255
    f9c6:	bf 4f       	sbci	r27, 0xFF	; 255
    f9c8:	89 8f       	std	Y+25, r24	; 0x19
    f9ca:	9a 8f       	std	Y+26, r25	; 0x1a
    f9cc:	ab 8f       	std	Y+27, r26	; 0x1b
    f9ce:	bc 8f       	std	Y+28, r27	; 0x1c
         c_sign = -1;
    f9d0:	8f ef       	ldi	r24, 0xFF	; 255
    f9d2:	8e 8f       	std	Y+30, r24	; 0x1e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    f9d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f9d6:	89 30       	cpi	r24, 0x09	; 9
    f9d8:	3c f1       	brlt	.+78     	; 0xfa28 <getRawAttitude+0x3a4>
    f9da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f9dc:	81 31       	cpi	r24, 0x11	; 17
    f9de:	24 f5       	brge	.+72     	; 0xfa28 <getRawAttitude+0x3a4>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    f9e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    f9e2:	99 27       	eor	r25, r25
    f9e4:	87 fd       	sbrc	r24, 7
    f9e6:	90 95       	com	r25
    f9e8:	20 e1       	ldi	r18, 0x10	; 16
    f9ea:	30 e0       	ldi	r19, 0x00	; 0
    f9ec:	28 1b       	sub	r18, r24
    f9ee:	39 0b       	sbc	r19, r25
    f9f0:	89 8d       	ldd	r24, Y+25	; 0x19
    f9f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    f9f4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    f9f6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    f9f8:	02 2e       	mov	r0, r18
    f9fa:	04 c0       	rjmp	.+8      	; 0xfa04 <getRawAttitude+0x380>
    f9fc:	88 0f       	add	r24, r24
    f9fe:	99 1f       	adc	r25, r25
    fa00:	aa 1f       	adc	r26, r26
    fa02:	bb 1f       	adc	r27, r27
    fa04:	0a 94       	dec	r0
    fa06:	d2 f7       	brpl	.-12     	; 0xf9fc <getRawAttitude+0x378>
    fa08:	89 a7       	lds	r24, 0x79
    fa0a:	9a a7       	lds	r25, 0x7a
    fa0c:	ab a7       	lds	r26, 0x7b
    fa0e:	bc a7       	lds	r27, 0x7c

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    fa10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fa12:	8f 3f       	cpi	r24, 0xFF	; 255
    fa14:	31 f4       	brne	.+12     	; 0xfa22 <getRawAttitude+0x39e>
              return -t_tWord.as_word16[1];
    fa16:	8b a5       	lds	r24, 0x6b
    fa18:	9c a5       	lds	r25, 0x6c
    fa1a:	90 95       	com	r25
    fa1c:	81 95       	neg	r24
    fa1e:	9f 4f       	sbci	r25, 0xFF	; 255
    fa20:	23 c0       	rjmp	.+70     	; 0xfa68 <getRawAttitude+0x3e4>
           else
            return t_tWord.as_word16[1];
    fa22:	8b a5       	lds	r24, 0x6b
    fa24:	9c a5       	lds	r25, 0x6c
    fa26:	20 c0       	rjmp	.+64     	; 0xfa68 <getRawAttitude+0x3e4>
      }

      i_x = i_x >> c_n;
    fa28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    fa2a:	28 2f       	mov	r18, r24
    fa2c:	33 27       	eor	r19, r19
    fa2e:	27 fd       	sbrc	r18, 7
    fa30:	30 95       	com	r19
    fa32:	89 8d       	ldd	r24, Y+25	; 0x19
    fa34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    fa36:	ab 8d       	ldd	r26, Y+27	; 0x1b
    fa38:	bc 8d       	ldd	r27, Y+28	; 0x1c
    fa3a:	02 2e       	mov	r0, r18
    fa3c:	04 c0       	rjmp	.+8      	; 0xfa46 <getRawAttitude+0x3c2>
    fa3e:	b5 95       	asr	r27
    fa40:	a7 95       	ror	r26
    fa42:	97 95       	ror	r25
    fa44:	87 95       	ror	r24
    fa46:	0a 94       	dec	r0
    fa48:	d2 f7       	brpl	.-12     	; 0xfa3e <getRawAttitude+0x3ba>
    fa4a:	89 8f       	std	Y+25, r24	; 0x19
    fa4c:	9a 8f       	std	Y+26, r25	; 0x1a
    fa4e:	ab 8f       	std	Y+27, r26	; 0x1b
    fa50:	bc 8f       	std	Y+28, r27	; 0x1c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    fa52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fa54:	8f 3f       	cpi	r24, 0xFF	; 255
    fa56:	31 f4       	brne	.+12     	; 0xfa64 <getRawAttitude+0x3e0>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    fa58:	89 8d       	ldd	r24, Y+25	; 0x19
    fa5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    fa5c:	90 95       	com	r25
    fa5e:	81 95       	neg	r24
    fa60:	9f 4f       	sbci	r25, 0xFF	; 255
    fa62:	02 c0       	rjmp	.+4      	; 0xfa68 <getRawAttitude+0x3e4>
       else
           return (int16_t)i_x;
    fa64:	89 8d       	ldd	r24, Y+25	; 0x19
    fa66:	9a 8d       	ldd	r25, Y+26	; 0x1a
   s_magX = utl_rShft32_16( i_temp2, 9); /*Q21*/
    fa68:	8f 87       	std	Y+15, r24	; 0x0f
    fa6a:	98 8b       	std	Y+16, r25	; 0x10

   i_temp2 = 0;
    fa6c:	19 82       	std	Y+1, r1	; 0x01
    fa6e:	1a 82       	std	Y+2, r1	; 0x02
    fa70:	1b 82       	std	Y+3, r1	; 0x03
    fa72:	1c 82       	std	Y+4, r1	; 0x04
   i_temp2 = utl_mac16x16_32( -ps_mag[1], s_cosRoll, i_temp2, 0);
    fa74:	8b a9       	sts	0x4b, r24
    fa76:	9c a9       	sts	0x4c, r25
    fa78:	02 96       	adiw	r24, 0x02	; 2
    fa7a:	fc 01       	movw	r30, r24
    fa7c:	80 81       	ld	r24, Z
    fa7e:	91 81       	ldd	r25, Z+1	; 0x01
    fa80:	90 95       	com	r25
    fa82:	81 95       	neg	r24
    fa84:	9f 4f       	sbci	r25, 0xFF	; 255
    fa86:	6d 81       	ldd	r22, Y+5	; 0x05
    fa88:	7e 81       	ldd	r23, Y+6	; 0x06
    fa8a:	29 81       	ldd	r18, Y+1	; 0x01
    fa8c:	3a 81       	ldd	r19, Y+2	; 0x02
    fa8e:	4b 81       	ldd	r20, Y+3	; 0x03
    fa90:	5c 81       	ldd	r21, Y+4	; 0x04
    fa92:	00 e0       	ldi	r16, 0x00	; 0
    fa94:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fa98:	dc 01       	movw	r26, r24
    fa9a:	cb 01       	movw	r24, r22
    fa9c:	89 83       	std	Y+1, r24	; 0x01
    fa9e:	9a 83       	std	Y+2, r25	; 0x02
    faa0:	ab 83       	std	Y+3, r26	; 0x03
    faa2:	bc 83       	std	Y+4, r27	; 0x04
   i_temp2 = utl_mac16x16_32( ps_mag[2], s_sinRoll, i_temp2, 0);
    faa4:	8b a9       	sts	0x4b, r24
    faa6:	9c a9       	sts	0x4c, r25
    faa8:	04 96       	adiw	r24, 0x04	; 4
    faaa:	fc 01       	movw	r30, r24
    faac:	80 81       	ld	r24, Z
    faae:	91 81       	ldd	r25, Z+1	; 0x01
    fab0:	6f 81       	ldd	r22, Y+7	; 0x07
    fab2:	78 85       	ldd	r23, Y+8	; 0x08
    fab4:	29 81       	ldd	r18, Y+1	; 0x01
    fab6:	3a 81       	ldd	r19, Y+2	; 0x02
    fab8:	4b 81       	ldd	r20, Y+3	; 0x03
    faba:	5c 81       	ldd	r21, Y+4	; 0x04
    fabc:	00 e0       	ldi	r16, 0x00	; 0
    fabe:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fac2:	dc 01       	movw	r26, r24
    fac4:	cb 01       	movw	r24, r22
    fac6:	89 83       	std	Y+1, r24	; 0x01
    fac8:	9a 83       	std	Y+2, r25	; 0x02
    faca:	ab 83       	std	Y+3, r26	; 0x03
    facc:	bc 83       	std	Y+4, r27	; 0x04
    face:	89 81       	ldd	r24, Y+1	; 0x01
    fad0:	9a 81       	ldd	r25, Y+2	; 0x02
    fad2:	ab 81       	ldd	r26, Y+3	; 0x03
    fad4:	bc 81       	ldd	r27, Y+4	; 0x04
    fad6:	8f 8f       	std	Y+31, r24	; 0x1f
    fad8:	98 a3       	lds	r25, 0x58
    fada:	a9 a3       	lds	r26, 0x59
    fadc:	ba a3       	lds	r27, 0x5a
    fade:	89 e0       	ldi	r24, 0x09	; 9
    fae0:	8b a3       	lds	r24, 0x5b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    fae2:	81 e0       	ldi	r24, 0x01	; 1
    fae4:	8c a3       	lds	r24, 0x5c

      if( i_x < 0)
    fae6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fae8:	98 a1       	lds	r25, 0x48
    faea:	a9 a1       	lds	r26, 0x49
    faec:	ba a1       	lds	r27, 0x4a
    faee:	bb 23       	and	r27, r27
    faf0:	8c f4       	brge	.+34     	; 0xfb14 <getRawAttitude+0x490>
      {
         i_x = -i_x;
    faf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    faf4:	98 a1       	lds	r25, 0x48
    faf6:	a9 a1       	lds	r26, 0x49
    faf8:	ba a1       	lds	r27, 0x4a
    fafa:	b0 95       	com	r27
    fafc:	a0 95       	com	r26
    fafe:	90 95       	com	r25
    fb00:	81 95       	neg	r24
    fb02:	9f 4f       	sbci	r25, 0xFF	; 255
    fb04:	af 4f       	sbci	r26, 0xFF	; 255
    fb06:	bf 4f       	sbci	r27, 0xFF	; 255
    fb08:	8f 8f       	std	Y+31, r24	; 0x1f
    fb0a:	98 a3       	lds	r25, 0x58
    fb0c:	a9 a3       	lds	r26, 0x59
    fb0e:	ba a3       	lds	r27, 0x5a
         c_sign = -1;
    fb10:	8f ef       	ldi	r24, 0xFF	; 255
    fb12:	8c a3       	lds	r24, 0x5c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    fb14:	8b a1       	lds	r24, 0x4b
    fb16:	89 30       	cpi	r24, 0x09	; 9
    fb18:	3c f1       	brlt	.+78     	; 0xfb68 <getRawAttitude+0x4e4>
    fb1a:	8b a1       	lds	r24, 0x4b
    fb1c:	81 31       	cpi	r24, 0x11	; 17
    fb1e:	24 f5       	brge	.+72     	; 0xfb68 <getRawAttitude+0x4e4>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    fb20:	8b a1       	lds	r24, 0x4b
    fb22:	99 27       	eor	r25, r25
    fb24:	87 fd       	sbrc	r24, 7
    fb26:	90 95       	com	r25
    fb28:	20 e1       	ldi	r18, 0x10	; 16
    fb2a:	30 e0       	ldi	r19, 0x00	; 0
    fb2c:	28 1b       	sub	r18, r24
    fb2e:	39 0b       	sbc	r19, r25
    fb30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fb32:	98 a1       	lds	r25, 0x48
    fb34:	a9 a1       	lds	r26, 0x49
    fb36:	ba a1       	lds	r27, 0x4a
    fb38:	02 2e       	mov	r0, r18
    fb3a:	04 c0       	rjmp	.+8      	; 0xfb44 <getRawAttitude+0x4c0>
    fb3c:	88 0f       	add	r24, r24
    fb3e:	99 1f       	adc	r25, r25
    fb40:	aa 1f       	adc	r26, r26
    fb42:	bb 1f       	adc	r27, r27
    fb44:	0a 94       	dec	r0
    fb46:	d2 f7       	brpl	.-12     	; 0xfb3c <getRawAttitude+0x4b8>
    fb48:	8d a3       	lds	r24, 0x5d
    fb4a:	9e a3       	lds	r25, 0x5e
    fb4c:	af a3       	lds	r26, 0x5f
    fb4e:	b8 a7       	lds	r27, 0x78

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    fb50:	8c a1       	lds	r24, 0x4c
    fb52:	8f 3f       	cpi	r24, 0xFF	; 255
    fb54:	31 f4       	brne	.+12     	; 0xfb62 <getRawAttitude+0x4de>
              return -t_tWord.as_word16[1];
    fb56:	8f a1       	lds	r24, 0x4f
    fb58:	98 a5       	lds	r25, 0x68
    fb5a:	90 95       	com	r25
    fb5c:	81 95       	neg	r24
    fb5e:	9f 4f       	sbci	r25, 0xFF	; 255
    fb60:	23 c0       	rjmp	.+70     	; 0xfba8 <getRawAttitude+0x524>
           else
            return t_tWord.as_word16[1];
    fb62:	8f a1       	lds	r24, 0x4f
    fb64:	98 a5       	lds	r25, 0x68
    fb66:	20 c0       	rjmp	.+64     	; 0xfba8 <getRawAttitude+0x524>
      }

      i_x = i_x >> c_n;
    fb68:	8b a1       	lds	r24, 0x4b
    fb6a:	28 2f       	mov	r18, r24
    fb6c:	33 27       	eor	r19, r19
    fb6e:	27 fd       	sbrc	r18, 7
    fb70:	30 95       	com	r19
    fb72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fb74:	98 a1       	lds	r25, 0x48
    fb76:	a9 a1       	lds	r26, 0x49
    fb78:	ba a1       	lds	r27, 0x4a
    fb7a:	02 2e       	mov	r0, r18
    fb7c:	04 c0       	rjmp	.+8      	; 0xfb86 <getRawAttitude+0x502>
    fb7e:	b5 95       	asr	r27
    fb80:	a7 95       	ror	r26
    fb82:	97 95       	ror	r25
    fb84:	87 95       	ror	r24
    fb86:	0a 94       	dec	r0
    fb88:	d2 f7       	brpl	.-12     	; 0xfb7e <getRawAttitude+0x4fa>
    fb8a:	8f 8f       	std	Y+31, r24	; 0x1f
    fb8c:	98 a3       	lds	r25, 0x58
    fb8e:	a9 a3       	lds	r26, 0x59
    fb90:	ba a3       	lds	r27, 0x5a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    fb92:	8c a1       	lds	r24, 0x4c
    fb94:	8f 3f       	cpi	r24, 0xFF	; 255
    fb96:	31 f4       	brne	.+12     	; 0xfba4 <getRawAttitude+0x520>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    fb98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fb9a:	98 a1       	lds	r25, 0x48
    fb9c:	90 95       	com	r25
    fb9e:	81 95       	neg	r24
    fba0:	9f 4f       	sbci	r25, 0xFF	; 255
    fba2:	02 c0       	rjmp	.+4      	; 0xfba8 <getRawAttitude+0x524>
       else
           return (int16_t)i_x;
    fba4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    fba6:	98 a1       	lds	r25, 0x48
   s_magY = utl_rShft32_16(i_temp2, 9);    /*Q21*/
    fba8:	89 8b       	std	Y+17, r24	; 0x11
    fbaa:	9a 8b       	std	Y+18, r25	; 0x12

   /*------------------------------------------------------------------------*
    * Calculate the yaw...
    *------------------------------------------------------------------------*/
   ps_att[2] = utl_atan2_16( s_magY, s_magX);
    fbac:	8d a9       	sts	0x4d, r24
    fbae:	9e a9       	sts	0x4e, r25
    fbb0:	8c 01       	movw	r16, r24
    fbb2:	0c 5f       	subi	r16, 0xFC	; 252
    fbb4:	1f 4f       	sbci	r17, 0xFF	; 255
    fbb6:	89 89       	ldd	r24, Y+17	; 0x11
    fbb8:	9a 89       	ldd	r25, Y+18	; 0x12
    fbba:	2f 85       	ldd	r18, Y+15	; 0x0f
    fbbc:	38 89       	ldd	r19, Y+16	; 0x10
    fbbe:	b9 01       	movw	r22, r18
    fbc0:	0e 94 e8 dc 	call	0x1b9d0	; 0x1b9d0 <utl_atan2_16>
    fbc4:	f8 01       	movw	r30, r16
    fbc6:	80 83       	st	Z, r24
    fbc8:	91 83       	std	Z+1, r25	; 0x01

}/*End getRawAttitude*/
    fbca:	e6 96       	adiw	r28, 0x36	; 54
    fbcc:	cd bf       	out	0x3d, r28	; 61
    fbce:	de bf       	out	0x3e, r29	; 62
    fbd0:	df 91       	pop	r29
    fbd2:	cf 91       	pop	r28
    fbd4:	1f 91       	pop	r17
    fbd6:	0f 91       	pop	r16
    fbd8:	08 95       	ret

0000fbda <calcAvrDynamics>:

static inline void calcAvrDynamics( int16_t *ps_acc,
                                    int16_t *ps_dPhase)
{
    fbda:	ef 92       	push	r14
    fbdc:	ff 92       	push	r15
    fbde:	0f 93       	push	r16
    fbe0:	1f 93       	push	r17
    fbe2:	cf 93       	push	r28
    fbe4:	df 93       	push	r29
    fbe6:	cd b7       	in	r28, 0x3d	; 61
    fbe8:	de b7       	in	r29, 0x3e	; 62
    fbea:	e6 97       	sbiw	r28, 0x36	; 54
    fbec:	cd bf       	out	0x3d, r28	; 61
    fbee:	de bf       	out	0x3e, r29	; 62
    fbf0:	8b ab       	sts	0x5b, r24
    fbf2:	9c ab       	sts	0x5c, r25
    fbf4:	6d ab       	sts	0x5d, r22
    fbf6:	7e ab       	sts	0x5e, r23
   int32_t i_sum = 0;
    fbf8:	1d 82       	std	Y+5, r1	; 0x05
    fbfa:	1e 82       	std	Y+6, r1	; 0x06
    fbfc:	1f 82       	std	Y+7, r1	; 0x07
    fbfe:	18 86       	std	Y+8, r1	; 0x08
   int32_t i_deltaPhase = 0;
    fc00:	19 86       	std	Y+9, r1	; 0x09
    fc02:	1a 86       	std	Y+10, r1	; 0x0a
    fc04:	1b 86       	std	Y+11, r1	; 0x0b
    fc06:	1c 86       	std	Y+12, r1	; 0x0c
   int32_t i_tmp = 0;
    fc08:	1d 86       	std	Y+13, r1	; 0x0d
    fc0a:	1e 86       	std	Y+14, r1	; 0x0e
    fc0c:	1f 86       	std	Y+15, r1	; 0x0f
    fc0e:	18 8a       	std	Y+16, r1	; 0x10
   int32_t i_spForce = 0;
    fc10:	19 82       	std	Y+1, r1	; 0x01
    fc12:	1a 82       	std	Y+2, r1	; 0x02
    fc14:	1b 82       	std	Y+3, r1	; 0x03
    fc16:	1c 82       	std	Y+4, r1	; 0x04

   /*-------------------------------------------------------------------------*
    * specific force = abs(sqrt( x^2+y^2+z^2) - gravity)
    *-------------------------------------------------------------------------*/
   i_sum = 0;
    fc18:	1d 82       	std	Y+5, r1	; 0x05
    fc1a:	1e 82       	std	Y+6, r1	; 0x06
    fc1c:	1f 82       	std	Y+7, r1	; 0x07
    fc1e:	18 86       	std	Y+8, r1	; 0x08
   i_sum = utl_mac16x16_32( ps_acc[0], ps_acc[0], i_sum, 0);
    fc20:	8b a9       	sts	0x4b, r24
    fc22:	9c a9       	sts	0x4c, r25
    fc24:	fc 01       	movw	r30, r24
    fc26:	80 81       	ld	r24, Z
    fc28:	91 81       	ldd	r25, Z+1	; 0x01
    fc2a:	2b a9       	sts	0x4b, r18
    fc2c:	3c a9       	sts	0x4c, r19
    fc2e:	f9 01       	movw	r30, r18
    fc30:	60 81       	ld	r22, Z
    fc32:	71 81       	ldd	r23, Z+1	; 0x01
    fc34:	2d 81       	ldd	r18, Y+5	; 0x05
    fc36:	3e 81       	ldd	r19, Y+6	; 0x06
    fc38:	4f 81       	ldd	r20, Y+7	; 0x07
    fc3a:	58 85       	ldd	r21, Y+8	; 0x08
    fc3c:	00 e0       	ldi	r16, 0x00	; 0
    fc3e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fc42:	dc 01       	movw	r26, r24
    fc44:	cb 01       	movw	r24, r22
    fc46:	8d 83       	std	Y+5, r24	; 0x05
    fc48:	9e 83       	std	Y+6, r25	; 0x06
    fc4a:	af 83       	std	Y+7, r26	; 0x07
    fc4c:	b8 87       	std	Y+8, r27	; 0x08
   i_sum = utl_mac16x16_32( ps_acc[1], ps_acc[1], i_sum, 0);
    fc4e:	8b a9       	sts	0x4b, r24
    fc50:	9c a9       	sts	0x4c, r25
    fc52:	02 96       	adiw	r24, 0x02	; 2
    fc54:	fc 01       	movw	r30, r24
    fc56:	80 81       	ld	r24, Z
    fc58:	91 81       	ldd	r25, Z+1	; 0x01
    fc5a:	2b a9       	sts	0x4b, r18
    fc5c:	3c a9       	sts	0x4c, r19
    fc5e:	2e 5f       	subi	r18, 0xFE	; 254
    fc60:	3f 4f       	sbci	r19, 0xFF	; 255
    fc62:	f9 01       	movw	r30, r18
    fc64:	60 81       	ld	r22, Z
    fc66:	71 81       	ldd	r23, Z+1	; 0x01
    fc68:	2d 81       	ldd	r18, Y+5	; 0x05
    fc6a:	3e 81       	ldd	r19, Y+6	; 0x06
    fc6c:	4f 81       	ldd	r20, Y+7	; 0x07
    fc6e:	58 85       	ldd	r21, Y+8	; 0x08
    fc70:	00 e0       	ldi	r16, 0x00	; 0
    fc72:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fc76:	dc 01       	movw	r26, r24
    fc78:	cb 01       	movw	r24, r22
    fc7a:	8d 83       	std	Y+5, r24	; 0x05
    fc7c:	9e 83       	std	Y+6, r25	; 0x06
    fc7e:	af 83       	std	Y+7, r26	; 0x07
    fc80:	b8 87       	std	Y+8, r27	; 0x08
   i_sum = utl_mac16x16_32( ps_acc[2], ps_acc[2], i_sum, 0);
    fc82:	8b a9       	sts	0x4b, r24
    fc84:	9c a9       	sts	0x4c, r25
    fc86:	04 96       	adiw	r24, 0x04	; 4
    fc88:	fc 01       	movw	r30, r24
    fc8a:	80 81       	ld	r24, Z
    fc8c:	91 81       	ldd	r25, Z+1	; 0x01
    fc8e:	2b a9       	sts	0x4b, r18
    fc90:	3c a9       	sts	0x4c, r19
    fc92:	2c 5f       	subi	r18, 0xFC	; 252
    fc94:	3f 4f       	sbci	r19, 0xFF	; 255
    fc96:	f9 01       	movw	r30, r18
    fc98:	60 81       	ld	r22, Z
    fc9a:	71 81       	ldd	r23, Z+1	; 0x01
    fc9c:	2d 81       	ldd	r18, Y+5	; 0x05
    fc9e:	3e 81       	ldd	r19, Y+6	; 0x06
    fca0:	4f 81       	ldd	r20, Y+7	; 0x07
    fca2:	58 85       	ldd	r21, Y+8	; 0x08
    fca4:	00 e0       	ldi	r16, 0x00	; 0
    fca6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fcaa:	dc 01       	movw	r26, r24
    fcac:	cb 01       	movw	r24, r22
    fcae:	8d 83       	std	Y+5, r24	; 0x05
    fcb0:	9e 83       	std	Y+6, r25	; 0x06
    fcb2:	af 83       	std	Y+7, r26	; 0x07
    fcb4:	b8 87       	std	Y+8, r27	; 0x08
   i_spForce = utl_abs32_32( utl_sqrt32_32( i_sum, 0) - gt_insDev.t_accel.
    fcb6:	8d 81       	ldd	r24, Y+5	; 0x05
    fcb8:	9e 81       	ldd	r25, Y+6	; 0x06
    fcba:	af 81       	ldd	r26, Y+7	; 0x07
    fcbc:	b8 85       	ldd	r27, Y+8	; 0x08
    fcbe:	bc 01       	movw	r22, r24
    fcc0:	cd 01       	movw	r24, r26
    fcc2:	40 e0       	ldi	r20, 0x00	; 0
    fcc4:	0e 94 06 dc 	call	0x1b80c	; 0x1b80c <utl_sqrt32_32>
    fcc8:	9b 01       	movw	r18, r22
    fcca:	ac 01       	movw	r20, r24
    fccc:	80 91 65 24 	lds	r24, 0x2465
    fcd0:	90 91 66 24 	lds	r25, 0x2466
    fcd4:	aa 27       	eor	r26, r26
    fcd6:	97 fd       	sbrc	r25, 7
    fcd8:	a0 95       	com	r26
    fcda:	ba 2f       	mov	r27, r26
    fcdc:	79 01       	movw	r14, r18
    fcde:	8a 01       	movw	r16, r20
    fce0:	e8 1a       	sub	r14, r24
    fce2:	f9 0a       	sbc	r15, r25
    fce4:	0a 0b       	sbc	r16, r26
    fce6:	1b 0b       	sbc	r17, r27
    fce8:	d8 01       	movw	r26, r16
    fcea:	c7 01       	movw	r24, r14
    fcec:	89 8b       	std	Y+17, r24	; 0x11
    fcee:	9a 8b       	std	Y+18, r25	; 0x12
    fcf0:	ab 8b       	std	Y+19, r26	; 0x13
    fcf2:	bc 8b       	std	Y+20, r27	; 0x14
    * Inline functions
    *------------------------------------------------------------------------*/
   static inline int32_t __attribute__((always_inline)) \
   utl_abs32_32( int32_t i_y)
   {
      if( i_y < 0)
    fcf4:	89 89       	ldd	r24, Y+17	; 0x11
    fcf6:	9a 89       	ldd	r25, Y+18	; 0x12
    fcf8:	ab 89       	ldd	r26, Y+19	; 0x13
    fcfa:	bc 89       	ldd	r27, Y+20	; 0x14
    fcfc:	bb 23       	and	r27, r27
    fcfe:	7c f4       	brge	.+30     	; 0xfd1e <calcAvrDynamics+0x144>
         i_y = -i_y;
    fd00:	89 89       	ldd	r24, Y+17	; 0x11
    fd02:	9a 89       	ldd	r25, Y+18	; 0x12
    fd04:	ab 89       	ldd	r26, Y+19	; 0x13
    fd06:	bc 89       	ldd	r27, Y+20	; 0x14
    fd08:	b0 95       	com	r27
    fd0a:	a0 95       	com	r26
    fd0c:	90 95       	com	r25
    fd0e:	81 95       	neg	r24
    fd10:	9f 4f       	sbci	r25, 0xFF	; 255
    fd12:	af 4f       	sbci	r26, 0xFF	; 255
    fd14:	bf 4f       	sbci	r27, 0xFF	; 255
    fd16:	89 8b       	std	Y+17, r24	; 0x11
    fd18:	9a 8b       	std	Y+18, r25	; 0x12
    fd1a:	ab 8b       	std	Y+19, r26	; 0x13
    fd1c:	bc 8b       	std	Y+20, r27	; 0x14

      return i_y;
    fd1e:	89 89       	ldd	r24, Y+17	; 0x11
    fd20:	9a 89       	ldd	r25, Y+18	; 0x12
    fd22:	ab 89       	ldd	r26, Y+19	; 0x13
    fd24:	bc 89       	ldd	r27, Y+20	; 0x14
    fd26:	89 83       	std	Y+1, r24	; 0x01
    fd28:	9a 83       	std	Y+2, r25	; 0x02
    fd2a:	ab 83       	std	Y+3, r26	; 0x03
    fd2c:	bc 83       	std	Y+4, r27	; 0x04
   s_calGravity);

   /*-------------------------------------------------------------------------*
    * Hard limit to maintain 16-bit math...
    *-------------------------------------------------------------------------*/
   if( i_spForce > 32767)
    fd2e:	89 81       	ldd	r24, Y+1	; 0x01
    fd30:	9a 81       	ldd	r25, Y+2	; 0x02
    fd32:	ab 81       	ldd	r26, Y+3	; 0x03
    fd34:	bc 81       	ldd	r27, Y+4	; 0x04
    fd36:	80 30       	cpi	r24, 0x00	; 0
    fd38:	00 e8       	ldi	r16, 0x80	; 128
    fd3a:	90 07       	cpc	r25, r16
    fd3c:	00 e0       	ldi	r16, 0x00	; 0
    fd3e:	a0 07       	cpc	r26, r16
    fd40:	00 e0       	ldi	r16, 0x00	; 0
    fd42:	b0 07       	cpc	r27, r16
    fd44:	44 f0       	brlt	.+16     	; 0xfd56 <calcAvrDynamics+0x17c>
      i_spForce = 32767;
    fd46:	8f ef       	ldi	r24, 0xFF	; 255
    fd48:	9f e7       	ldi	r25, 0x7F	; 127
    fd4a:	a0 e0       	ldi	r26, 0x00	; 0
    fd4c:	b0 e0       	ldi	r27, 0x00	; 0
    fd4e:	89 83       	std	Y+1, r24	; 0x01
    fd50:	9a 83       	std	Y+2, r25	; 0x02
    fd52:	ab 83       	std	Y+3, r26	; 0x03
    fd54:	bc 83       	std	Y+4, r27	; 0x04
   /*-------------------------------------------------------------------------*
    * Average the specific force over a period of f = 1/(1 - alpha) frames
    * where alpha = .8, or 5 frames.
    * Q11
    *-------------------------------------------------------------------------*/
   i_tmp = 0;
    fd56:	1d 86       	std	Y+13, r1	; 0x0d
    fd58:	1e 86       	std	Y+14, r1	; 0x0e
    fd5a:	1f 86       	std	Y+15, r1	; 0x0f
    fd5c:	18 8a       	std	Y+16, r1	; 0x10
   i_tmp = utl_mac16x16_32( gt_insDev.t_accel.s_avrSpecForce, 1637, i_tmp, 0);
    fd5e:	80 91 68 24 	lds	r24, 0x2468
    fd62:	90 91 69 24 	lds	r25, 0x2469
    fd66:	2d 85       	ldd	r18, Y+13	; 0x0d
    fd68:	3e 85       	ldd	r19, Y+14	; 0x0e
    fd6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd6c:	58 89       	ldd	r21, Y+16	; 0x10
    fd6e:	65 e6       	ldi	r22, 0x65	; 101
    fd70:	76 e0       	ldi	r23, 0x06	; 6
    fd72:	00 e0       	ldi	r16, 0x00	; 0
    fd74:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fd78:	dc 01       	movw	r26, r24
    fd7a:	cb 01       	movw	r24, r22
    fd7c:	8d 87       	std	Y+13, r24	; 0x0d
    fd7e:	9e 87       	std	Y+14, r25	; 0x0e
    fd80:	af 87       	std	Y+15, r26	; 0x0f
    fd82:	b8 8b       	std	Y+16, r27	; 0x10
   i_tmp = utl_mac16x16_32( i_spForce, 410, i_tmp, 0);
    fd84:	89 81       	ldd	r24, Y+1	; 0x01
    fd86:	9a 81       	ldd	r25, Y+2	; 0x02
    fd88:	2d 85       	ldd	r18, Y+13	; 0x0d
    fd8a:	3e 85       	ldd	r19, Y+14	; 0x0e
    fd8c:	4f 85       	ldd	r20, Y+15	; 0x0f
    fd8e:	58 89       	ldd	r21, Y+16	; 0x10
    fd90:	6a e9       	ldi	r22, 0x9A	; 154
    fd92:	71 e0       	ldi	r23, 0x01	; 1
    fd94:	00 e0       	ldi	r16, 0x00	; 0
    fd96:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fd9a:	dc 01       	movw	r26, r24
    fd9c:	cb 01       	movw	r24, r22
    fd9e:	8d 87       	std	Y+13, r24	; 0x0d
    fda0:	9e 87       	std	Y+14, r25	; 0x0e
    fda2:	af 87       	std	Y+15, r26	; 0x0f
    fda4:	b8 8b       	std	Y+16, r27	; 0x10
    fda6:	8d 85       	ldd	r24, Y+13	; 0x0d
    fda8:	9e 85       	ldd	r25, Y+14	; 0x0e
    fdaa:	af 85       	ldd	r26, Y+15	; 0x0f
    fdac:	b8 89       	ldd	r27, Y+16	; 0x10
    fdae:	8d 8b       	std	Y+21, r24	; 0x15
    fdb0:	9e 8b       	std	Y+22, r25	; 0x16
    fdb2:	af 8b       	std	Y+23, r26	; 0x17
    fdb4:	b8 8f       	std	Y+24, r27	; 0x18
    fdb6:	8b e0       	ldi	r24, 0x0B	; 11
    fdb8:	89 8f       	std	Y+25, r24	; 0x19
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    fdba:	81 e0       	ldi	r24, 0x01	; 1
    fdbc:	8a 8f       	std	Y+26, r24	; 0x1a

      if( i_x < 0)
    fdbe:	8d 89       	ldd	r24, Y+21	; 0x15
    fdc0:	9e 89       	ldd	r25, Y+22	; 0x16
    fdc2:	af 89       	ldd	r26, Y+23	; 0x17
    fdc4:	b8 8d       	ldd	r27, Y+24	; 0x18
    fdc6:	bb 23       	and	r27, r27
    fdc8:	8c f4       	brge	.+34     	; 0xfdec <calcAvrDynamics+0x212>
      {
         i_x = -i_x;
    fdca:	8d 89       	ldd	r24, Y+21	; 0x15
    fdcc:	9e 89       	ldd	r25, Y+22	; 0x16
    fdce:	af 89       	ldd	r26, Y+23	; 0x17
    fdd0:	b8 8d       	ldd	r27, Y+24	; 0x18
    fdd2:	b0 95       	com	r27
    fdd4:	a0 95       	com	r26
    fdd6:	90 95       	com	r25
    fdd8:	81 95       	neg	r24
    fdda:	9f 4f       	sbci	r25, 0xFF	; 255
    fddc:	af 4f       	sbci	r26, 0xFF	; 255
    fdde:	bf 4f       	sbci	r27, 0xFF	; 255
    fde0:	8d 8b       	std	Y+21, r24	; 0x15
    fde2:	9e 8b       	std	Y+22, r25	; 0x16
    fde4:	af 8b       	std	Y+23, r26	; 0x17
    fde6:	b8 8f       	std	Y+24, r27	; 0x18
         c_sign = -1;
    fde8:	8f ef       	ldi	r24, 0xFF	; 255
    fdea:	8a 8f       	std	Y+26, r24	; 0x1a
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    fdec:	89 8d       	ldd	r24, Y+25	; 0x19
    fdee:	89 30       	cpi	r24, 0x09	; 9
    fdf0:	3c f1       	brlt	.+78     	; 0xfe40 <calcAvrDynamics+0x266>
    fdf2:	89 8d       	ldd	r24, Y+25	; 0x19
    fdf4:	81 31       	cpi	r24, 0x11	; 17
    fdf6:	24 f5       	brge	.+72     	; 0xfe40 <calcAvrDynamics+0x266>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    fdf8:	89 8d       	ldd	r24, Y+25	; 0x19
    fdfa:	99 27       	eor	r25, r25
    fdfc:	87 fd       	sbrc	r24, 7
    fdfe:	90 95       	com	r25
    fe00:	20 e1       	ldi	r18, 0x10	; 16
    fe02:	30 e0       	ldi	r19, 0x00	; 0
    fe04:	28 1b       	sub	r18, r24
    fe06:	39 0b       	sbc	r19, r25
    fe08:	8d 89       	ldd	r24, Y+21	; 0x15
    fe0a:	9e 89       	ldd	r25, Y+22	; 0x16
    fe0c:	af 89       	ldd	r26, Y+23	; 0x17
    fe0e:	b8 8d       	ldd	r27, Y+24	; 0x18
    fe10:	02 2e       	mov	r0, r18
    fe12:	04 c0       	rjmp	.+8      	; 0xfe1c <calcAvrDynamics+0x242>
    fe14:	88 0f       	add	r24, r24
    fe16:	99 1f       	adc	r25, r25
    fe18:	aa 1f       	adc	r26, r26
    fe1a:	bb 1f       	adc	r27, r27
    fe1c:	0a 94       	dec	r0
    fe1e:	d2 f7       	brpl	.-12     	; 0xfe14 <calcAvrDynamics+0x23a>
    fe20:	8f a7       	lds	r24, 0x7f
    fe22:	98 ab       	sts	0x58, r25
    fe24:	a9 ab       	sts	0x59, r26
    fe26:	ba ab       	sts	0x5a, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    fe28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    fe2a:	8f 3f       	cpi	r24, 0xFF	; 255
    fe2c:	31 f4       	brne	.+12     	; 0xfe3a <calcAvrDynamics+0x260>
              return -t_tWord.as_word16[1];
    fe2e:	89 a9       	sts	0x49, r24
    fe30:	9a a9       	sts	0x4a, r25
    fe32:	90 95       	com	r25
    fe34:	81 95       	neg	r24
    fe36:	9f 4f       	sbci	r25, 0xFF	; 255
    fe38:	23 c0       	rjmp	.+70     	; 0xfe80 <calcAvrDynamics+0x2a6>
           else
            return t_tWord.as_word16[1];
    fe3a:	89 a9       	sts	0x49, r24
    fe3c:	9a a9       	sts	0x4a, r25
    fe3e:	20 c0       	rjmp	.+64     	; 0xfe80 <calcAvrDynamics+0x2a6>
      }

      i_x = i_x >> c_n;
    fe40:	89 8d       	ldd	r24, Y+25	; 0x19
    fe42:	28 2f       	mov	r18, r24
    fe44:	33 27       	eor	r19, r19
    fe46:	27 fd       	sbrc	r18, 7
    fe48:	30 95       	com	r19
    fe4a:	8d 89       	ldd	r24, Y+21	; 0x15
    fe4c:	9e 89       	ldd	r25, Y+22	; 0x16
    fe4e:	af 89       	ldd	r26, Y+23	; 0x17
    fe50:	b8 8d       	ldd	r27, Y+24	; 0x18
    fe52:	02 2e       	mov	r0, r18
    fe54:	04 c0       	rjmp	.+8      	; 0xfe5e <calcAvrDynamics+0x284>
    fe56:	b5 95       	asr	r27
    fe58:	a7 95       	ror	r26
    fe5a:	97 95       	ror	r25
    fe5c:	87 95       	ror	r24
    fe5e:	0a 94       	dec	r0
    fe60:	d2 f7       	brpl	.-12     	; 0xfe56 <calcAvrDynamics+0x27c>
    fe62:	8d 8b       	std	Y+21, r24	; 0x15
    fe64:	9e 8b       	std	Y+22, r25	; 0x16
    fe66:	af 8b       	std	Y+23, r26	; 0x17
    fe68:	b8 8f       	std	Y+24, r27	; 0x18
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    fe6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    fe6c:	8f 3f       	cpi	r24, 0xFF	; 255
    fe6e:	31 f4       	brne	.+12     	; 0xfe7c <calcAvrDynamics+0x2a2>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    fe70:	8d 89       	ldd	r24, Y+21	; 0x15
    fe72:	9e 89       	ldd	r25, Y+22	; 0x16
    fe74:	90 95       	com	r25
    fe76:	81 95       	neg	r24
    fe78:	9f 4f       	sbci	r25, 0xFF	; 255
    fe7a:	02 c0       	rjmp	.+4      	; 0xfe80 <calcAvrDynamics+0x2a6>
       else
           return (int16_t)i_x;
    fe7c:	8d 89       	ldd	r24, Y+21	; 0x15
    fe7e:	9e 89       	ldd	r25, Y+22	; 0x16

   gt_insDev.t_accel.s_avrSpecForce = utl_rShft32_16( i_tmp, 11);
    fe80:	80 93 68 24 	sts	0x2468, r24
    fe84:	90 93 69 24 	sts	0x2469, r25

   /*-------------------------------------------------------------------------*
    * magnitude of phase change = sqrt( x^2+y^2+z^2)
    *-------------------------------------------------------------------------*/
   i_deltaPhase = 0;
    fe88:	19 86       	std	Y+9, r1	; 0x09
    fe8a:	1a 86       	std	Y+10, r1	; 0x0a
    fe8c:	1b 86       	std	Y+11, r1	; 0x0b
    fe8e:	1c 86       	std	Y+12, r1	; 0x0c
   i_deltaPhase = utl_mac16x16_32( ps_dPhase[0], ps_dPhase[0], i_deltaPhase, 0);
    fe90:	8d a9       	sts	0x4d, r24
    fe92:	9e a9       	sts	0x4e, r25
    fe94:	fc 01       	movw	r30, r24
    fe96:	80 81       	ld	r24, Z
    fe98:	91 81       	ldd	r25, Z+1	; 0x01
    fe9a:	2d a9       	sts	0x4d, r18
    fe9c:	3e a9       	sts	0x4e, r19
    fe9e:	f9 01       	movw	r30, r18
    fea0:	60 81       	ld	r22, Z
    fea2:	71 81       	ldd	r23, Z+1	; 0x01
    fea4:	29 85       	ldd	r18, Y+9	; 0x09
    fea6:	3a 85       	ldd	r19, Y+10	; 0x0a
    fea8:	4b 85       	ldd	r20, Y+11	; 0x0b
    feaa:	5c 85       	ldd	r21, Y+12	; 0x0c
    feac:	00 e0       	ldi	r16, 0x00	; 0
    feae:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    feb2:	dc 01       	movw	r26, r24
    feb4:	cb 01       	movw	r24, r22
    feb6:	89 87       	std	Y+9, r24	; 0x09
    feb8:	9a 87       	std	Y+10, r25	; 0x0a
    feba:	ab 87       	std	Y+11, r26	; 0x0b
    febc:	bc 87       	std	Y+12, r27	; 0x0c
   i_deltaPhase = utl_mac16x16_32( ps_dPhase[1], ps_dPhase[1], i_deltaPhase, 0);
    febe:	8d a9       	sts	0x4d, r24
    fec0:	9e a9       	sts	0x4e, r25
    fec2:	02 96       	adiw	r24, 0x02	; 2
    fec4:	fc 01       	movw	r30, r24
    fec6:	80 81       	ld	r24, Z
    fec8:	91 81       	ldd	r25, Z+1	; 0x01
    feca:	2d a9       	sts	0x4d, r18
    fecc:	3e a9       	sts	0x4e, r19
    fece:	2e 5f       	subi	r18, 0xFE	; 254
    fed0:	3f 4f       	sbci	r19, 0xFF	; 255
    fed2:	f9 01       	movw	r30, r18
    fed4:	60 81       	ld	r22, Z
    fed6:	71 81       	ldd	r23, Z+1	; 0x01
    fed8:	29 85       	ldd	r18, Y+9	; 0x09
    feda:	3a 85       	ldd	r19, Y+10	; 0x0a
    fedc:	4b 85       	ldd	r20, Y+11	; 0x0b
    fede:	5c 85       	ldd	r21, Y+12	; 0x0c
    fee0:	00 e0       	ldi	r16, 0x00	; 0
    fee2:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    fee6:	dc 01       	movw	r26, r24
    fee8:	cb 01       	movw	r24, r22
    feea:	89 87       	std	Y+9, r24	; 0x09
    feec:	9a 87       	std	Y+10, r25	; 0x0a
    feee:	ab 87       	std	Y+11, r26	; 0x0b
    fef0:	bc 87       	std	Y+12, r27	; 0x0c
   i_deltaPhase = utl_mac16x16_32( ps_dPhase[2], ps_dPhase[2], i_deltaPhase, 0);
    fef2:	8d a9       	sts	0x4d, r24
    fef4:	9e a9       	sts	0x4e, r25
    fef6:	04 96       	adiw	r24, 0x04	; 4
    fef8:	fc 01       	movw	r30, r24
    fefa:	80 81       	ld	r24, Z
    fefc:	91 81       	ldd	r25, Z+1	; 0x01
    fefe:	2d a9       	sts	0x4d, r18
    ff00:	3e a9       	sts	0x4e, r19
    ff02:	2c 5f       	subi	r18, 0xFC	; 252
    ff04:	3f 4f       	sbci	r19, 0xFF	; 255
    ff06:	f9 01       	movw	r30, r18
    ff08:	60 81       	ld	r22, Z
    ff0a:	71 81       	ldd	r23, Z+1	; 0x01
    ff0c:	29 85       	ldd	r18, Y+9	; 0x09
    ff0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    ff10:	4b 85       	ldd	r20, Y+11	; 0x0b
    ff12:	5c 85       	ldd	r21, Y+12	; 0x0c
    ff14:	00 e0       	ldi	r16, 0x00	; 0
    ff16:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
    ff1a:	dc 01       	movw	r26, r24
    ff1c:	cb 01       	movw	r24, r22
    ff1e:	89 87       	std	Y+9, r24	; 0x09
    ff20:	9a 87       	std	Y+10, r25	; 0x0a
    ff22:	ab 87       	std	Y+11, r26	; 0x0b
    ff24:	bc 87       	std	Y+12, r27	; 0x0c
    ff26:	89 85       	ldd	r24, Y+9	; 0x09
    ff28:	9a 85       	ldd	r25, Y+10	; 0x0a
    ff2a:	ab 85       	ldd	r26, Y+11	; 0x0b
    ff2c:	bc 85       	ldd	r27, Y+12	; 0x0c
    ff2e:	8b 8f       	std	Y+27, r24	; 0x1b
    ff30:	9c 8f       	std	Y+28, r25	; 0x1c
    ff32:	ad 8f       	std	Y+29, r26	; 0x1d
    ff34:	be 8f       	std	Y+30, r27	; 0x1e
    ff36:	8e e0       	ldi	r24, 0x0E	; 14
    ff38:	8f 8f       	std	Y+31, r24	; 0x1f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
    ff3a:	81 e0       	ldi	r24, 0x01	; 1
    ff3c:	88 a3       	lds	r24, 0x58

      if( i_x < 0)
    ff3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ff40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ff42:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ff44:	be 8d       	ldd	r27, Y+30	; 0x1e
    ff46:	bb 23       	and	r27, r27
    ff48:	8c f4       	brge	.+34     	; 0xff6c <calcAvrDynamics+0x392>
      {
         i_x = -i_x;
    ff4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ff4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ff4e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ff50:	be 8d       	ldd	r27, Y+30	; 0x1e
    ff52:	b0 95       	com	r27
    ff54:	a0 95       	com	r26
    ff56:	90 95       	com	r25
    ff58:	81 95       	neg	r24
    ff5a:	9f 4f       	sbci	r25, 0xFF	; 255
    ff5c:	af 4f       	sbci	r26, 0xFF	; 255
    ff5e:	bf 4f       	sbci	r27, 0xFF	; 255
    ff60:	8b 8f       	std	Y+27, r24	; 0x1b
    ff62:	9c 8f       	std	Y+28, r25	; 0x1c
    ff64:	ad 8f       	std	Y+29, r26	; 0x1d
    ff66:	be 8f       	std	Y+30, r27	; 0x1e
         c_sign = -1;
    ff68:	8f ef       	ldi	r24, 0xFF	; 255
    ff6a:	88 a3       	lds	r24, 0x58
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
    ff6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ff6e:	89 30       	cpi	r24, 0x09	; 9
    ff70:	3c f1       	brlt	.+78     	; 0xffc0 <calcAvrDynamics+0x3e6>
    ff72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ff74:	81 31       	cpi	r24, 0x11	; 17
    ff76:	24 f5       	brge	.+72     	; 0xffc0 <calcAvrDynamics+0x3e6>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
    ff78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ff7a:	99 27       	eor	r25, r25
    ff7c:	87 fd       	sbrc	r24, 7
    ff7e:	90 95       	com	r25
    ff80:	20 e1       	ldi	r18, 0x10	; 16
    ff82:	30 e0       	ldi	r19, 0x00	; 0
    ff84:	28 1b       	sub	r18, r24
    ff86:	39 0b       	sbc	r19, r25
    ff88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ff8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ff8c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ff8e:	be 8d       	ldd	r27, Y+30	; 0x1e
    ff90:	02 2e       	mov	r0, r18
    ff92:	04 c0       	rjmp	.+8      	; 0xff9c <calcAvrDynamics+0x3c2>
    ff94:	88 0f       	add	r24, r24
    ff96:	99 1f       	adc	r25, r25
    ff98:	aa 1f       	adc	r26, r26
    ff9a:	bb 1f       	adc	r27, r27
    ff9c:	0a 94       	dec	r0
    ff9e:	d2 f7       	brpl	.-12     	; 0xff94 <calcAvrDynamics+0x3ba>
    ffa0:	8b a7       	lds	r24, 0x7b
    ffa2:	9c a7       	lds	r25, 0x7c
    ffa4:	ad a7       	lds	r26, 0x7d
    ffa6:	be a7       	lds	r27, 0x7e

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
    ffa8:	88 a1       	lds	r24, 0x48
    ffaa:	8f 3f       	cpi	r24, 0xFF	; 255
    ffac:	31 f4       	brne	.+12     	; 0xffba <calcAvrDynamics+0x3e0>
              return -t_tWord.as_word16[1];
    ffae:	8d a5       	lds	r24, 0x6d
    ffb0:	9e a5       	lds	r25, 0x6e
    ffb2:	90 95       	com	r25
    ffb4:	81 95       	neg	r24
    ffb6:	9f 4f       	sbci	r25, 0xFF	; 255
    ffb8:	23 c0       	rjmp	.+70     	; 0x10000 <calcAvrDynamics+0x426>
           else
            return t_tWord.as_word16[1];
    ffba:	8d a5       	lds	r24, 0x6d
    ffbc:	9e a5       	lds	r25, 0x6e
    ffbe:	20 c0       	rjmp	.+64     	; 0x10000 <calcAvrDynamics+0x426>
      }

      i_x = i_x >> c_n;
    ffc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ffc2:	28 2f       	mov	r18, r24
    ffc4:	33 27       	eor	r19, r19
    ffc6:	27 fd       	sbrc	r18, 7
    ffc8:	30 95       	com	r19
    ffca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ffcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ffce:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ffd0:	be 8d       	ldd	r27, Y+30	; 0x1e
    ffd2:	02 2e       	mov	r0, r18
    ffd4:	04 c0       	rjmp	.+8      	; 0xffde <calcAvrDynamics+0x404>
    ffd6:	b5 95       	asr	r27
    ffd8:	a7 95       	ror	r26
    ffda:	97 95       	ror	r25
    ffdc:	87 95       	ror	r24
    ffde:	0a 94       	dec	r0
    ffe0:	d2 f7       	brpl	.-12     	; 0xffd6 <calcAvrDynamics+0x3fc>
    ffe2:	8b 8f       	std	Y+27, r24	; 0x1b
    ffe4:	9c 8f       	std	Y+28, r25	; 0x1c
    ffe6:	ad 8f       	std	Y+29, r26	; 0x1d
    ffe8:	be 8f       	std	Y+30, r27	; 0x1e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
    ffea:	88 a1       	lds	r24, 0x48
    ffec:	8f 3f       	cpi	r24, 0xFF	; 255
    ffee:	31 f4       	brne	.+12     	; 0xfffc <calcAvrDynamics+0x422>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
    fff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    fff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    fff4:	90 95       	com	r25
    fff6:	81 95       	neg	r24
    fff8:	9f 4f       	sbci	r25, 0xFF	; 255
    fffa:	02 c0       	rjmp	.+4      	; 0x10000 <calcAvrDynamics+0x426>
       else
           return (int16_t)i_x;
    fffc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    fffe:	9c 8d       	ldd	r25, Y+28	; 0x1c
   i_deltaPhase = utl_rShft32_16( i_deltaPhase, 14);
   10000:	aa 27       	eor	r26, r26
   10002:	97 fd       	sbrc	r25, 7
   10004:	a0 95       	com	r26
   10006:	ba 2f       	mov	r27, r26
   10008:	89 87       	std	Y+9, r24	; 0x09
   1000a:	9a 87       	std	Y+10, r25	; 0x0a
   1000c:	ab 87       	std	Y+11, r26	; 0x0b
   1000e:	bc 87       	std	Y+12, r27	; 0x0c
   i_deltaPhase = utl_sqrt32_32( i_deltaPhase, 14);
   10010:	89 85       	ldd	r24, Y+9	; 0x09
   10012:	9a 85       	ldd	r25, Y+10	; 0x0a
   10014:	ab 85       	ldd	r26, Y+11	; 0x0b
   10016:	bc 85       	ldd	r27, Y+12	; 0x0c
   10018:	bc 01       	movw	r22, r24
   1001a:	cd 01       	movw	r24, r26
   1001c:	4e e0       	ldi	r20, 0x0E	; 14
   1001e:	0e 94 06 dc 	call	0x1b80c	; 0x1b80c <utl_sqrt32_32>
   10022:	dc 01       	movw	r26, r24
   10024:	cb 01       	movw	r24, r22
   10026:	89 87       	std	Y+9, r24	; 0x09
   10028:	9a 87       	std	Y+10, r25	; 0x0a
   1002a:	ab 87       	std	Y+11, r26	; 0x0b
   1002c:	bc 87       	std	Y+12, r27	; 0x0c
   /*-------------------------------------------------------------------------*
    * Average the phase change over a period of f = 1/(1 - alpha) frames
    * where alpha = .8, or 5 frames.
    * Q11
    *-------------------------------------------------------------------------*/
   i_tmp = 0;
   1002e:	1d 86       	std	Y+13, r1	; 0x0d
   10030:	1e 86       	std	Y+14, r1	; 0x0e
   10032:	1f 86       	std	Y+15, r1	; 0x0f
   10034:	18 8a       	std	Y+16, r1	; 0x10
   i_tmp = utl_mac16x16_32( gt_insDev.t_gyro.s_avrDPhase, 1637, i_tmp, 0);
   10036:	80 91 45 24 	lds	r24, 0x2445
   1003a:	90 91 46 24 	lds	r25, 0x2446
   1003e:	2d 85       	ldd	r18, Y+13	; 0x0d
   10040:	3e 85       	ldd	r19, Y+14	; 0x0e
   10042:	4f 85       	ldd	r20, Y+15	; 0x0f
   10044:	58 89       	ldd	r21, Y+16	; 0x10
   10046:	65 e6       	ldi	r22, 0x65	; 101
   10048:	76 e0       	ldi	r23, 0x06	; 6
   1004a:	00 e0       	ldi	r16, 0x00	; 0
   1004c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10050:	dc 01       	movw	r26, r24
   10052:	cb 01       	movw	r24, r22
   10054:	8d 87       	std	Y+13, r24	; 0x0d
   10056:	9e 87       	std	Y+14, r25	; 0x0e
   10058:	af 87       	std	Y+15, r26	; 0x0f
   1005a:	b8 8b       	std	Y+16, r27	; 0x10
   i_tmp = utl_mac16x16_32( i_deltaPhase, 410, i_tmp, 0);
   1005c:	89 85       	ldd	r24, Y+9	; 0x09
   1005e:	9a 85       	ldd	r25, Y+10	; 0x0a
   10060:	2d 85       	ldd	r18, Y+13	; 0x0d
   10062:	3e 85       	ldd	r19, Y+14	; 0x0e
   10064:	4f 85       	ldd	r20, Y+15	; 0x0f
   10066:	58 89       	ldd	r21, Y+16	; 0x10
   10068:	6a e9       	ldi	r22, 0x9A	; 154
   1006a:	71 e0       	ldi	r23, 0x01	; 1
   1006c:	00 e0       	ldi	r16, 0x00	; 0
   1006e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10072:	dc 01       	movw	r26, r24
   10074:	cb 01       	movw	r24, r22
   10076:	8d 87       	std	Y+13, r24	; 0x0d
   10078:	9e 87       	std	Y+14, r25	; 0x0e
   1007a:	af 87       	std	Y+15, r26	; 0x0f
   1007c:	b8 8b       	std	Y+16, r27	; 0x10
   1007e:	8d 85       	ldd	r24, Y+13	; 0x0d
   10080:	9e 85       	ldd	r25, Y+14	; 0x0e
   10082:	af 85       	ldd	r26, Y+15	; 0x0f
   10084:	b8 89       	ldd	r27, Y+16	; 0x10
   10086:	89 a3       	lds	r24, 0x59
   10088:	9a a3       	lds	r25, 0x5a
   1008a:	ab a3       	lds	r26, 0x5b
   1008c:	bc a3       	lds	r27, 0x5c
   1008e:	8b e0       	ldi	r24, 0x0B	; 11
   10090:	8d a3       	lds	r24, 0x5d
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10092:	81 e0       	ldi	r24, 0x01	; 1
   10094:	8e a3       	lds	r24, 0x5e

      if( i_x < 0)
   10096:	89 a1       	lds	r24, 0x49
   10098:	9a a1       	lds	r25, 0x4a
   1009a:	ab a1       	lds	r26, 0x4b
   1009c:	bc a1       	lds	r27, 0x4c
   1009e:	bb 23       	and	r27, r27
   100a0:	8c f4       	brge	.+34     	; 0x100c4 <calcAvrDynamics+0x4ea>
      {
         i_x = -i_x;
   100a2:	89 a1       	lds	r24, 0x49
   100a4:	9a a1       	lds	r25, 0x4a
   100a6:	ab a1       	lds	r26, 0x4b
   100a8:	bc a1       	lds	r27, 0x4c
   100aa:	b0 95       	com	r27
   100ac:	a0 95       	com	r26
   100ae:	90 95       	com	r25
   100b0:	81 95       	neg	r24
   100b2:	9f 4f       	sbci	r25, 0xFF	; 255
   100b4:	af 4f       	sbci	r26, 0xFF	; 255
   100b6:	bf 4f       	sbci	r27, 0xFF	; 255
   100b8:	89 a3       	lds	r24, 0x59
   100ba:	9a a3       	lds	r25, 0x5a
   100bc:	ab a3       	lds	r26, 0x5b
   100be:	bc a3       	lds	r27, 0x5c
         c_sign = -1;
   100c0:	8f ef       	ldi	r24, 0xFF	; 255
   100c2:	8e a3       	lds	r24, 0x5e
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   100c4:	8d a1       	lds	r24, 0x4d
   100c6:	89 30       	cpi	r24, 0x09	; 9
   100c8:	3c f1       	brlt	.+78     	; 0x10118 <calcAvrDynamics+0x53e>
   100ca:	8d a1       	lds	r24, 0x4d
   100cc:	81 31       	cpi	r24, 0x11	; 17
   100ce:	24 f5       	brge	.+72     	; 0x10118 <calcAvrDynamics+0x53e>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   100d0:	8d a1       	lds	r24, 0x4d
   100d2:	99 27       	eor	r25, r25
   100d4:	87 fd       	sbrc	r24, 7
   100d6:	90 95       	com	r25
   100d8:	20 e1       	ldi	r18, 0x10	; 16
   100da:	30 e0       	ldi	r19, 0x00	; 0
   100dc:	28 1b       	sub	r18, r24
   100de:	39 0b       	sbc	r19, r25
   100e0:	89 a1       	lds	r24, 0x49
   100e2:	9a a1       	lds	r25, 0x4a
   100e4:	ab a1       	lds	r26, 0x4b
   100e6:	bc a1       	lds	r27, 0x4c
   100e8:	02 2e       	mov	r0, r18
   100ea:	04 c0       	rjmp	.+8      	; 0x100f4 <calcAvrDynamics+0x51a>
   100ec:	88 0f       	add	r24, r24
   100ee:	99 1f       	adc	r25, r25
   100f0:	aa 1f       	adc	r26, r26
   100f2:	bb 1f       	adc	r27, r27
   100f4:	0a 94       	dec	r0
   100f6:	d2 f7       	brpl	.-12     	; 0x100ec <calcAvrDynamics+0x512>
   100f8:	8f a3       	lds	r24, 0x5f
   100fa:	98 a7       	lds	r25, 0x78
   100fc:	a9 a7       	lds	r26, 0x79
   100fe:	ba a7       	lds	r27, 0x7a

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   10100:	8e a1       	lds	r24, 0x4e
   10102:	8f 3f       	cpi	r24, 0xFF	; 255
   10104:	31 f4       	brne	.+12     	; 0x10112 <calcAvrDynamics+0x538>
              return -t_tWord.as_word16[1];
   10106:	89 a5       	lds	r24, 0x69
   10108:	9a a5       	lds	r25, 0x6a
   1010a:	90 95       	com	r25
   1010c:	81 95       	neg	r24
   1010e:	9f 4f       	sbci	r25, 0xFF	; 255
   10110:	23 c0       	rjmp	.+70     	; 0x10158 <calcAvrDynamics+0x57e>
           else
            return t_tWord.as_word16[1];
   10112:	89 a5       	lds	r24, 0x69
   10114:	9a a5       	lds	r25, 0x6a
   10116:	20 c0       	rjmp	.+64     	; 0x10158 <calcAvrDynamics+0x57e>
      }

      i_x = i_x >> c_n;
   10118:	8d a1       	lds	r24, 0x4d
   1011a:	28 2f       	mov	r18, r24
   1011c:	33 27       	eor	r19, r19
   1011e:	27 fd       	sbrc	r18, 7
   10120:	30 95       	com	r19
   10122:	89 a1       	lds	r24, 0x49
   10124:	9a a1       	lds	r25, 0x4a
   10126:	ab a1       	lds	r26, 0x4b
   10128:	bc a1       	lds	r27, 0x4c
   1012a:	02 2e       	mov	r0, r18
   1012c:	04 c0       	rjmp	.+8      	; 0x10136 <calcAvrDynamics+0x55c>
   1012e:	b5 95       	asr	r27
   10130:	a7 95       	ror	r26
   10132:	97 95       	ror	r25
   10134:	87 95       	ror	r24
   10136:	0a 94       	dec	r0
   10138:	d2 f7       	brpl	.-12     	; 0x1012e <calcAvrDynamics+0x554>
   1013a:	89 a3       	lds	r24, 0x59
   1013c:	9a a3       	lds	r25, 0x5a
   1013e:	ab a3       	lds	r26, 0x5b
   10140:	bc a3       	lds	r27, 0x5c
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   10142:	8e a1       	lds	r24, 0x4e
   10144:	8f 3f       	cpi	r24, 0xFF	; 255
   10146:	31 f4       	brne	.+12     	; 0x10154 <calcAvrDynamics+0x57a>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10148:	89 a1       	lds	r24, 0x49
   1014a:	9a a1       	lds	r25, 0x4a
   1014c:	90 95       	com	r25
   1014e:	81 95       	neg	r24
   10150:	9f 4f       	sbci	r25, 0xFF	; 255
   10152:	02 c0       	rjmp	.+4      	; 0x10158 <calcAvrDynamics+0x57e>
       else
           return (int16_t)i_x;
   10154:	89 a1       	lds	r24, 0x49
   10156:	9a a1       	lds	r25, 0x4a

   gt_insDev.t_gyro.s_avrDPhase = utl_rShft32_16( i_tmp, 11);
   10158:	80 93 45 24 	sts	0x2445, r24
   1015c:	90 93 46 24 	sts	0x2446, r25

   if( gt_insDev.c_platMovingCount > 0)
   10160:	80 91 f3 2a 	lds	r24, 0x2AF3
   10164:	18 16       	cp	r1, r24
   10166:	2c f4       	brge	.+10     	; 0x10172 <calcAvrDynamics+0x598>
      gt_insDev.c_platMovingCount -=1;
   10168:	80 91 f3 2a 	lds	r24, 0x2AF3
   1016c:	81 50       	subi	r24, 0x01	; 1
   1016e:	80 93 f3 2a 	sts	0x2AF3, r24

   if( (((gt_insDev.t_accel.s_avrSpecForce >
   10172:	20 91 68 24 	lds	r18, 0x2468
   10176:	30 91 69 24 	lds	r19, 0x2469
       (gt_insDev.t_accel.s_calGravity >> 2)) ||
   1017a:	80 91 65 24 	lds	r24, 0x2465
   1017e:	90 91 66 24 	lds	r25, 0x2466
   10182:	95 95       	asr	r25
   10184:	87 95       	ror	r24
   10186:	95 95       	asr	r25
   10188:	87 95       	ror	r24
   gt_insDev.t_gyro.s_avrDPhase = utl_rShft32_16( i_tmp, 11);

   if( gt_insDev.c_platMovingCount > 0)
      gt_insDev.c_platMovingCount -=1;

   if( (((gt_insDev.t_accel.s_avrSpecForce >
   1018a:	82 17       	cp	r24, r18
   1018c:	93 07       	cpc	r25, r19
   1018e:	14 f1       	brlt	.+68     	; 0x101d4 <calcAvrDynamics+0x5fa>
       (gt_insDev.t_accel.s_calGravity >> 2)) ||
       (i_spForce > (gt_insDev.t_accel.s_calGravity >> 2)) ||
   10190:	80 91 65 24 	lds	r24, 0x2465
   10194:	90 91 66 24 	lds	r25, 0x2466
   10198:	95 95       	asr	r25
   1019a:	87 95       	ror	r24
   1019c:	95 95       	asr	r25
   1019e:	87 95       	ror	r24
   101a0:	9c 01       	movw	r18, r24
   101a2:	44 27       	eor	r20, r20
   101a4:	37 fd       	sbrc	r19, 7
   101a6:	40 95       	com	r20
   101a8:	54 2f       	mov	r21, r20

   if( gt_insDev.c_platMovingCount > 0)
      gt_insDev.c_platMovingCount -=1;

   if( (((gt_insDev.t_accel.s_avrSpecForce >
       (gt_insDev.t_accel.s_calGravity >> 2)) ||
   101aa:	89 81       	ldd	r24, Y+1	; 0x01
   101ac:	9a 81       	ldd	r25, Y+2	; 0x02
   101ae:	ab 81       	ldd	r26, Y+3	; 0x03
   101b0:	bc 81       	ldd	r27, Y+4	; 0x04
   101b2:	28 17       	cp	r18, r24
   101b4:	39 07       	cpc	r19, r25
   101b6:	4a 07       	cpc	r20, r26
   101b8:	5b 07       	cpc	r21, r27
   101ba:	64 f0       	brlt	.+24     	; 0x101d4 <calcAvrDynamics+0x5fa>
       (i_spForce > (gt_insDev.t_accel.s_calGravity >> 2)) ||
   101bc:	89 85       	ldd	r24, Y+9	; 0x09
   101be:	9a 85       	ldd	r25, Y+10	; 0x0a
   101c0:	ab 85       	ldd	r26, Y+11	; 0x0b
   101c2:	bc 85       	ldd	r27, Y+12	; 0x0c
   101c4:	88 37       	cpi	r24, 0x78	; 120
   101c6:	f4 e0       	ldi	r31, 0x04	; 4
   101c8:	9f 07       	cpc	r25, r31
   101ca:	f0 e0       	ldi	r31, 0x00	; 0
   101cc:	af 07       	cpc	r26, r31
   101ce:	f0 e0       	ldi	r31, 0x00	; 0
   101d0:	bf 07       	cpc	r27, r31
   101d2:	3c f0       	brlt	.+14     	; 0x101e2 <calcAvrDynamics+0x608>
       (i_deltaPhase > INS_MAX_DELTA_PHASE_RAD_FXDPT))
       && (gt_insDev.c_initialLockCount == INS_KALMAN_LOCK_WAIT)))
   101d4:	80 91 fa 2a 	lds	r24, 0x2AFA
   101d8:	84 36       	cpi	r24, 0x64	; 100
   101da:	19 f4       	brne	.+6      	; 0x101e2 <calcAvrDynamics+0x608>
   {
      gt_insDev.c_platMovingCount = 2;
   101dc:	82 e0       	ldi	r24, 0x02	; 2
   101de:	80 93 f3 2a 	sts	0x2AF3, r24
   }

}/*End calcAvrDynamics*/
   101e2:	e6 96       	adiw	r28, 0x36	; 54
   101e4:	cd bf       	out	0x3d, r28	; 61
   101e6:	de bf       	out	0x3e, r29	; 62
   101e8:	df 91       	pop	r29
   101ea:	cf 91       	pop	r28
   101ec:	1f 91       	pop	r17
   101ee:	0f 91       	pop	r16
   101f0:	ff 90       	pop	r15
   101f2:	ef 90       	pop	r14
   101f4:	08 95       	ret

000101f6 <getAttitudeInDeg>:

static void getAttitudeInDeg( int16_t *ps_att,
                              int16_t *ps_attDeg)
{
   101f6:	0f 93       	push	r16
   101f8:	1f 93       	push	r17
   101fa:	cf 93       	push	r28
   101fc:	df 93       	push	r29
   101fe:	cd b7       	in	r28, 0x3d	; 61
   10200:	de b7       	in	r29, 0x3e	; 62
   10202:	a2 97       	sbiw	r28, 0x22	; 34
   10204:	cd bf       	out	0x3d, r28	; 61
   10206:	de bf       	out	0x3e, r29	; 62
   10208:	8f 8f       	std	Y+31, r24	; 0x1f
   1020a:	98 a3       	lds	r25, 0x58
   1020c:	69 a3       	lds	r22, 0x59
   1020e:	7a a3       	lds	r23, 0x5a
   ps_attDeg[0] = utl_rShft32_16((int32_t)ps_att[0]*(int32_t)180, 15);
   10210:	8f 8d       	ldd	r24, Y+31	; 0x1f
   10212:	98 a1       	lds	r25, 0x48
   10214:	fc 01       	movw	r30, r24
   10216:	80 81       	ld	r24, Z
   10218:	91 81       	ldd	r25, Z+1	; 0x01
   1021a:	aa 27       	eor	r26, r26
   1021c:	97 fd       	sbrc	r25, 7
   1021e:	a0 95       	com	r26
   10220:	ba 2f       	mov	r27, r26
   10222:	24 eb       	ldi	r18, 0xB4	; 180
   10224:	30 e0       	ldi	r19, 0x00	; 0
   10226:	40 e0       	ldi	r20, 0x00	; 0
   10228:	50 e0       	ldi	r21, 0x00	; 0
   1022a:	bc 01       	movw	r22, r24
   1022c:	cd 01       	movw	r24, r26
   1022e:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   10232:	dc 01       	movw	r26, r24
   10234:	cb 01       	movw	r24, r22
   10236:	89 83       	std	Y+1, r24	; 0x01
   10238:	9a 83       	std	Y+2, r25	; 0x02
   1023a:	ab 83       	std	Y+3, r26	; 0x03
   1023c:	bc 83       	std	Y+4, r27	; 0x04
   1023e:	8f e0       	ldi	r24, 0x0F	; 15
   10240:	8d 83       	std	Y+5, r24	; 0x05
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10242:	81 e0       	ldi	r24, 0x01	; 1
   10244:	8e 83       	std	Y+6, r24	; 0x06

      if( i_x < 0)
   10246:	89 81       	ldd	r24, Y+1	; 0x01
   10248:	9a 81       	ldd	r25, Y+2	; 0x02
   1024a:	ab 81       	ldd	r26, Y+3	; 0x03
   1024c:	bc 81       	ldd	r27, Y+4	; 0x04
   1024e:	bb 23       	and	r27, r27
   10250:	8c f4       	brge	.+34     	; 0x10274 <getAttitudeInDeg+0x7e>
      {
         i_x = -i_x;
   10252:	89 81       	ldd	r24, Y+1	; 0x01
   10254:	9a 81       	ldd	r25, Y+2	; 0x02
   10256:	ab 81       	ldd	r26, Y+3	; 0x03
   10258:	bc 81       	ldd	r27, Y+4	; 0x04
   1025a:	b0 95       	com	r27
   1025c:	a0 95       	com	r26
   1025e:	90 95       	com	r25
   10260:	81 95       	neg	r24
   10262:	9f 4f       	sbci	r25, 0xFF	; 255
   10264:	af 4f       	sbci	r26, 0xFF	; 255
   10266:	bf 4f       	sbci	r27, 0xFF	; 255
   10268:	89 83       	std	Y+1, r24	; 0x01
   1026a:	9a 83       	std	Y+2, r25	; 0x02
   1026c:	ab 83       	std	Y+3, r26	; 0x03
   1026e:	bc 83       	std	Y+4, r27	; 0x04
         c_sign = -1;
   10270:	8f ef       	ldi	r24, 0xFF	; 255
   10272:	8e 83       	std	Y+6, r24	; 0x06
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10274:	8d 81       	ldd	r24, Y+5	; 0x05
   10276:	89 30       	cpi	r24, 0x09	; 9
   10278:	3c f1       	brlt	.+78     	; 0x102c8 <getAttitudeInDeg+0xd2>
   1027a:	8d 81       	ldd	r24, Y+5	; 0x05
   1027c:	81 31       	cpi	r24, 0x11	; 17
   1027e:	24 f5       	brge	.+72     	; 0x102c8 <getAttitudeInDeg+0xd2>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10280:	8d 81       	ldd	r24, Y+5	; 0x05
   10282:	99 27       	eor	r25, r25
   10284:	87 fd       	sbrc	r24, 7
   10286:	90 95       	com	r25
   10288:	20 e1       	ldi	r18, 0x10	; 16
   1028a:	30 e0       	ldi	r19, 0x00	; 0
   1028c:	28 1b       	sub	r18, r24
   1028e:	39 0b       	sbc	r19, r25
   10290:	89 81       	ldd	r24, Y+1	; 0x01
   10292:	9a 81       	ldd	r25, Y+2	; 0x02
   10294:	ab 81       	ldd	r26, Y+3	; 0x03
   10296:	bc 81       	ldd	r27, Y+4	; 0x04
   10298:	02 2e       	mov	r0, r18
   1029a:	04 c0       	rjmp	.+8      	; 0x102a4 <getAttitudeInDeg+0xae>
   1029c:	88 0f       	add	r24, r24
   1029e:	99 1f       	adc	r25, r25
   102a0:	aa 1f       	adc	r26, r26
   102a2:	bb 1f       	adc	r27, r27
   102a4:	0a 94       	dec	r0
   102a6:	d2 f7       	brpl	.-12     	; 0x1029c <getAttitudeInDeg+0xa6>
   102a8:	8b 8f       	std	Y+27, r24	; 0x1b
   102aa:	9c 8f       	std	Y+28, r25	; 0x1c
   102ac:	ad 8f       	std	Y+29, r26	; 0x1d
   102ae:	be 8f       	std	Y+30, r27	; 0x1e

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   102b0:	8e 81       	ldd	r24, Y+6	; 0x06
   102b2:	8f 3f       	cpi	r24, 0xFF	; 255
   102b4:	31 f4       	brne	.+12     	; 0x102c2 <getAttitudeInDeg+0xcc>
              return -t_tWord.as_word16[1];
   102b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
   102b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
   102ba:	90 95       	com	r25
   102bc:	81 95       	neg	r24
   102be:	9f 4f       	sbci	r25, 0xFF	; 255
   102c0:	23 c0       	rjmp	.+70     	; 0x10308 <getAttitudeInDeg+0x112>
           else
            return t_tWord.as_word16[1];
   102c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
   102c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
   102c6:	20 c0       	rjmp	.+64     	; 0x10308 <getAttitudeInDeg+0x112>
      }

      i_x = i_x >> c_n;
   102c8:	8d 81       	ldd	r24, Y+5	; 0x05
   102ca:	28 2f       	mov	r18, r24
   102cc:	33 27       	eor	r19, r19
   102ce:	27 fd       	sbrc	r18, 7
   102d0:	30 95       	com	r19
   102d2:	89 81       	ldd	r24, Y+1	; 0x01
   102d4:	9a 81       	ldd	r25, Y+2	; 0x02
   102d6:	ab 81       	ldd	r26, Y+3	; 0x03
   102d8:	bc 81       	ldd	r27, Y+4	; 0x04
   102da:	02 2e       	mov	r0, r18
   102dc:	04 c0       	rjmp	.+8      	; 0x102e6 <getAttitudeInDeg+0xf0>
   102de:	b5 95       	asr	r27
   102e0:	a7 95       	ror	r26
   102e2:	97 95       	ror	r25
   102e4:	87 95       	ror	r24
   102e6:	0a 94       	dec	r0
   102e8:	d2 f7       	brpl	.-12     	; 0x102de <getAttitudeInDeg+0xe8>
   102ea:	89 83       	std	Y+1, r24	; 0x01
   102ec:	9a 83       	std	Y+2, r25	; 0x02
   102ee:	ab 83       	std	Y+3, r26	; 0x03
   102f0:	bc 83       	std	Y+4, r27	; 0x04
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   102f2:	8e 81       	ldd	r24, Y+6	; 0x06
   102f4:	8f 3f       	cpi	r24, 0xFF	; 255
   102f6:	31 f4       	brne	.+12     	; 0x10304 <getAttitudeInDeg+0x10e>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   102f8:	89 81       	ldd	r24, Y+1	; 0x01
   102fa:	9a 81       	ldd	r25, Y+2	; 0x02
   102fc:	90 95       	com	r25
   102fe:	81 95       	neg	r24
   10300:	9f 4f       	sbci	r25, 0xFF	; 255
   10302:	02 c0       	rjmp	.+4      	; 0x10308 <getAttitudeInDeg+0x112>
       else
           return (int16_t)i_x;
   10304:	89 81       	ldd	r24, Y+1	; 0x01
   10306:	9a 81       	ldd	r25, Y+2	; 0x02
   10308:	9c 01       	movw	r18, r24
   1030a:	89 a1       	lds	r24, 0x49
   1030c:	9a a1       	lds	r25, 0x4a
   1030e:	fc 01       	movw	r30, r24
   10310:	20 83       	st	Z, r18
   10312:	31 83       	std	Z+1, r19	; 0x01
   ps_attDeg[1] = utl_rShft32_16((int32_t)ps_att[1]*(int32_t)180, 15);
   10314:	89 a1       	lds	r24, 0x49
   10316:	9a a1       	lds	r25, 0x4a
   10318:	8c 01       	movw	r16, r24
   1031a:	0e 5f       	subi	r16, 0xFE	; 254
   1031c:	1f 4f       	sbci	r17, 0xFF	; 255
   1031e:	8f 8d       	ldd	r24, Y+31	; 0x1f
   10320:	98 a1       	lds	r25, 0x48
   10322:	02 96       	adiw	r24, 0x02	; 2
   10324:	fc 01       	movw	r30, r24
   10326:	80 81       	ld	r24, Z
   10328:	91 81       	ldd	r25, Z+1	; 0x01
   1032a:	aa 27       	eor	r26, r26
   1032c:	97 fd       	sbrc	r25, 7
   1032e:	a0 95       	com	r26
   10330:	ba 2f       	mov	r27, r26
   10332:	24 eb       	ldi	r18, 0xB4	; 180
   10334:	30 e0       	ldi	r19, 0x00	; 0
   10336:	40 e0       	ldi	r20, 0x00	; 0
   10338:	50 e0       	ldi	r21, 0x00	; 0
   1033a:	bc 01       	movw	r22, r24
   1033c:	cd 01       	movw	r24, r26
   1033e:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   10342:	dc 01       	movw	r26, r24
   10344:	cb 01       	movw	r24, r22
   10346:	8f 83       	std	Y+7, r24	; 0x07
   10348:	98 87       	std	Y+8, r25	; 0x08
   1034a:	a9 87       	std	Y+9, r26	; 0x09
   1034c:	ba 87       	std	Y+10, r27	; 0x0a
   1034e:	8f e0       	ldi	r24, 0x0F	; 15
   10350:	8b 87       	std	Y+11, r24	; 0x0b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10352:	81 e0       	ldi	r24, 0x01	; 1
   10354:	8c 87       	std	Y+12, r24	; 0x0c

      if( i_x < 0)
   10356:	8f 81       	ldd	r24, Y+7	; 0x07
   10358:	98 85       	ldd	r25, Y+8	; 0x08
   1035a:	a9 85       	ldd	r26, Y+9	; 0x09
   1035c:	ba 85       	ldd	r27, Y+10	; 0x0a
   1035e:	bb 23       	and	r27, r27
   10360:	8c f4       	brge	.+34     	; 0x10384 <getAttitudeInDeg+0x18e>
      {
         i_x = -i_x;
   10362:	8f 81       	ldd	r24, Y+7	; 0x07
   10364:	98 85       	ldd	r25, Y+8	; 0x08
   10366:	a9 85       	ldd	r26, Y+9	; 0x09
   10368:	ba 85       	ldd	r27, Y+10	; 0x0a
   1036a:	b0 95       	com	r27
   1036c:	a0 95       	com	r26
   1036e:	90 95       	com	r25
   10370:	81 95       	neg	r24
   10372:	9f 4f       	sbci	r25, 0xFF	; 255
   10374:	af 4f       	sbci	r26, 0xFF	; 255
   10376:	bf 4f       	sbci	r27, 0xFF	; 255
   10378:	8f 83       	std	Y+7, r24	; 0x07
   1037a:	98 87       	std	Y+8, r25	; 0x08
   1037c:	a9 87       	std	Y+9, r26	; 0x09
   1037e:	ba 87       	std	Y+10, r27	; 0x0a
         c_sign = -1;
   10380:	8f ef       	ldi	r24, 0xFF	; 255
   10382:	8c 87       	std	Y+12, r24	; 0x0c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10384:	8b 85       	ldd	r24, Y+11	; 0x0b
   10386:	89 30       	cpi	r24, 0x09	; 9
   10388:	3c f1       	brlt	.+78     	; 0x103d8 <getAttitudeInDeg+0x1e2>
   1038a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1038c:	81 31       	cpi	r24, 0x11	; 17
   1038e:	24 f5       	brge	.+72     	; 0x103d8 <getAttitudeInDeg+0x1e2>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10390:	8b 85       	ldd	r24, Y+11	; 0x0b
   10392:	99 27       	eor	r25, r25
   10394:	87 fd       	sbrc	r24, 7
   10396:	90 95       	com	r25
   10398:	20 e1       	ldi	r18, 0x10	; 16
   1039a:	30 e0       	ldi	r19, 0x00	; 0
   1039c:	28 1b       	sub	r18, r24
   1039e:	39 0b       	sbc	r19, r25
   103a0:	8f 81       	ldd	r24, Y+7	; 0x07
   103a2:	98 85       	ldd	r25, Y+8	; 0x08
   103a4:	a9 85       	ldd	r26, Y+9	; 0x09
   103a6:	ba 85       	ldd	r27, Y+10	; 0x0a
   103a8:	02 2e       	mov	r0, r18
   103aa:	04 c0       	rjmp	.+8      	; 0x103b4 <getAttitudeInDeg+0x1be>
   103ac:	88 0f       	add	r24, r24
   103ae:	99 1f       	adc	r25, r25
   103b0:	aa 1f       	adc	r26, r26
   103b2:	bb 1f       	adc	r27, r27
   103b4:	0a 94       	dec	r0
   103b6:	d2 f7       	brpl	.-12     	; 0x103ac <getAttitudeInDeg+0x1b6>
   103b8:	8f 8b       	std	Y+23, r24	; 0x17
   103ba:	98 8f       	std	Y+24, r25	; 0x18
   103bc:	a9 8f       	std	Y+25, r26	; 0x19
   103be:	ba 8f       	std	Y+26, r27	; 0x1a

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   103c0:	8c 85       	ldd	r24, Y+12	; 0x0c
   103c2:	8f 3f       	cpi	r24, 0xFF	; 255
   103c4:	31 f4       	brne	.+12     	; 0x103d2 <getAttitudeInDeg+0x1dc>
              return -t_tWord.as_word16[1];
   103c6:	89 8d       	ldd	r24, Y+25	; 0x19
   103c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
   103ca:	90 95       	com	r25
   103cc:	81 95       	neg	r24
   103ce:	9f 4f       	sbci	r25, 0xFF	; 255
   103d0:	23 c0       	rjmp	.+70     	; 0x10418 <getAttitudeInDeg+0x222>
           else
            return t_tWord.as_word16[1];
   103d2:	89 8d       	ldd	r24, Y+25	; 0x19
   103d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
   103d6:	20 c0       	rjmp	.+64     	; 0x10418 <getAttitudeInDeg+0x222>
      }

      i_x = i_x >> c_n;
   103d8:	8b 85       	ldd	r24, Y+11	; 0x0b
   103da:	28 2f       	mov	r18, r24
   103dc:	33 27       	eor	r19, r19
   103de:	27 fd       	sbrc	r18, 7
   103e0:	30 95       	com	r19
   103e2:	8f 81       	ldd	r24, Y+7	; 0x07
   103e4:	98 85       	ldd	r25, Y+8	; 0x08
   103e6:	a9 85       	ldd	r26, Y+9	; 0x09
   103e8:	ba 85       	ldd	r27, Y+10	; 0x0a
   103ea:	02 2e       	mov	r0, r18
   103ec:	04 c0       	rjmp	.+8      	; 0x103f6 <getAttitudeInDeg+0x200>
   103ee:	b5 95       	asr	r27
   103f0:	a7 95       	ror	r26
   103f2:	97 95       	ror	r25
   103f4:	87 95       	ror	r24
   103f6:	0a 94       	dec	r0
   103f8:	d2 f7       	brpl	.-12     	; 0x103ee <getAttitudeInDeg+0x1f8>
   103fa:	8f 83       	std	Y+7, r24	; 0x07
   103fc:	98 87       	std	Y+8, r25	; 0x08
   103fe:	a9 87       	std	Y+9, r26	; 0x09
   10400:	ba 87       	std	Y+10, r27	; 0x0a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   10402:	8c 85       	ldd	r24, Y+12	; 0x0c
   10404:	8f 3f       	cpi	r24, 0xFF	; 255
   10406:	31 f4       	brne	.+12     	; 0x10414 <getAttitudeInDeg+0x21e>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10408:	8f 81       	ldd	r24, Y+7	; 0x07
   1040a:	98 85       	ldd	r25, Y+8	; 0x08
   1040c:	90 95       	com	r25
   1040e:	81 95       	neg	r24
   10410:	9f 4f       	sbci	r25, 0xFF	; 255
   10412:	02 c0       	rjmp	.+4      	; 0x10418 <getAttitudeInDeg+0x222>
       else
           return (int16_t)i_x;
   10414:	8f 81       	ldd	r24, Y+7	; 0x07
   10416:	98 85       	ldd	r25, Y+8	; 0x08
   10418:	f8 01       	movw	r30, r16
   1041a:	80 83       	st	Z, r24
   1041c:	91 83       	std	Z+1, r25	; 0x01
   ps_attDeg[2] = utl_rShft32_16((int32_t)ps_att[2]*(int32_t)180, 15);
   1041e:	89 a1       	lds	r24, 0x49
   10420:	9a a1       	lds	r25, 0x4a
   10422:	8c 01       	movw	r16, r24
   10424:	0c 5f       	subi	r16, 0xFC	; 252
   10426:	1f 4f       	sbci	r17, 0xFF	; 255
   10428:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1042a:	98 a1       	lds	r25, 0x48
   1042c:	04 96       	adiw	r24, 0x04	; 4
   1042e:	fc 01       	movw	r30, r24
   10430:	80 81       	ld	r24, Z
   10432:	91 81       	ldd	r25, Z+1	; 0x01
   10434:	aa 27       	eor	r26, r26
   10436:	97 fd       	sbrc	r25, 7
   10438:	a0 95       	com	r26
   1043a:	ba 2f       	mov	r27, r26
   1043c:	24 eb       	ldi	r18, 0xB4	; 180
   1043e:	30 e0       	ldi	r19, 0x00	; 0
   10440:	40 e0       	ldi	r20, 0x00	; 0
   10442:	50 e0       	ldi	r21, 0x00	; 0
   10444:	bc 01       	movw	r22, r24
   10446:	cd 01       	movw	r24, r26
   10448:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1044c:	dc 01       	movw	r26, r24
   1044e:	cb 01       	movw	r24, r22
   10450:	8d 87       	std	Y+13, r24	; 0x0d
   10452:	9e 87       	std	Y+14, r25	; 0x0e
   10454:	af 87       	std	Y+15, r26	; 0x0f
   10456:	b8 8b       	std	Y+16, r27	; 0x10
   10458:	8f e0       	ldi	r24, 0x0F	; 15
   1045a:	89 8b       	std	Y+17, r24	; 0x11
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   1045c:	81 e0       	ldi	r24, 0x01	; 1
   1045e:	8a 8b       	std	Y+18, r24	; 0x12

      if( i_x < 0)
   10460:	8d 85       	ldd	r24, Y+13	; 0x0d
   10462:	9e 85       	ldd	r25, Y+14	; 0x0e
   10464:	af 85       	ldd	r26, Y+15	; 0x0f
   10466:	b8 89       	ldd	r27, Y+16	; 0x10
   10468:	bb 23       	and	r27, r27
   1046a:	8c f4       	brge	.+34     	; 0x1048e <getAttitudeInDeg+0x298>
      {
         i_x = -i_x;
   1046c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1046e:	9e 85       	ldd	r25, Y+14	; 0x0e
   10470:	af 85       	ldd	r26, Y+15	; 0x0f
   10472:	b8 89       	ldd	r27, Y+16	; 0x10
   10474:	b0 95       	com	r27
   10476:	a0 95       	com	r26
   10478:	90 95       	com	r25
   1047a:	81 95       	neg	r24
   1047c:	9f 4f       	sbci	r25, 0xFF	; 255
   1047e:	af 4f       	sbci	r26, 0xFF	; 255
   10480:	bf 4f       	sbci	r27, 0xFF	; 255
   10482:	8d 87       	std	Y+13, r24	; 0x0d
   10484:	9e 87       	std	Y+14, r25	; 0x0e
   10486:	af 87       	std	Y+15, r26	; 0x0f
   10488:	b8 8b       	std	Y+16, r27	; 0x10
         c_sign = -1;
   1048a:	8f ef       	ldi	r24, 0xFF	; 255
   1048c:	8a 8b       	std	Y+18, r24	; 0x12
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   1048e:	89 89       	ldd	r24, Y+17	; 0x11
   10490:	89 30       	cpi	r24, 0x09	; 9
   10492:	3c f1       	brlt	.+78     	; 0x104e2 <getAttitudeInDeg+0x2ec>
   10494:	89 89       	ldd	r24, Y+17	; 0x11
   10496:	81 31       	cpi	r24, 0x11	; 17
   10498:	24 f5       	brge	.+72     	; 0x104e2 <getAttitudeInDeg+0x2ec>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   1049a:	89 89       	ldd	r24, Y+17	; 0x11
   1049c:	99 27       	eor	r25, r25
   1049e:	87 fd       	sbrc	r24, 7
   104a0:	90 95       	com	r25
   104a2:	20 e1       	ldi	r18, 0x10	; 16
   104a4:	30 e0       	ldi	r19, 0x00	; 0
   104a6:	28 1b       	sub	r18, r24
   104a8:	39 0b       	sbc	r19, r25
   104aa:	8d 85       	ldd	r24, Y+13	; 0x0d
   104ac:	9e 85       	ldd	r25, Y+14	; 0x0e
   104ae:	af 85       	ldd	r26, Y+15	; 0x0f
   104b0:	b8 89       	ldd	r27, Y+16	; 0x10
   104b2:	02 2e       	mov	r0, r18
   104b4:	04 c0       	rjmp	.+8      	; 0x104be <getAttitudeInDeg+0x2c8>
   104b6:	88 0f       	add	r24, r24
   104b8:	99 1f       	adc	r25, r25
   104ba:	aa 1f       	adc	r26, r26
   104bc:	bb 1f       	adc	r27, r27
   104be:	0a 94       	dec	r0
   104c0:	d2 f7       	brpl	.-12     	; 0x104b6 <getAttitudeInDeg+0x2c0>
   104c2:	8b 8b       	std	Y+19, r24	; 0x13
   104c4:	9c 8b       	std	Y+20, r25	; 0x14
   104c6:	ad 8b       	std	Y+21, r26	; 0x15
   104c8:	be 8b       	std	Y+22, r27	; 0x16

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   104ca:	8a 89       	ldd	r24, Y+18	; 0x12
   104cc:	8f 3f       	cpi	r24, 0xFF	; 255
   104ce:	31 f4       	brne	.+12     	; 0x104dc <getAttitudeInDeg+0x2e6>
              return -t_tWord.as_word16[1];
   104d0:	8d 89       	ldd	r24, Y+21	; 0x15
   104d2:	9e 89       	ldd	r25, Y+22	; 0x16
   104d4:	90 95       	com	r25
   104d6:	81 95       	neg	r24
   104d8:	9f 4f       	sbci	r25, 0xFF	; 255
   104da:	23 c0       	rjmp	.+70     	; 0x10522 <getAttitudeInDeg+0x32c>
           else
            return t_tWord.as_word16[1];
   104dc:	8d 89       	ldd	r24, Y+21	; 0x15
   104de:	9e 89       	ldd	r25, Y+22	; 0x16
   104e0:	20 c0       	rjmp	.+64     	; 0x10522 <getAttitudeInDeg+0x32c>
      }

      i_x = i_x >> c_n;
   104e2:	89 89       	ldd	r24, Y+17	; 0x11
   104e4:	28 2f       	mov	r18, r24
   104e6:	33 27       	eor	r19, r19
   104e8:	27 fd       	sbrc	r18, 7
   104ea:	30 95       	com	r19
   104ec:	8d 85       	ldd	r24, Y+13	; 0x0d
   104ee:	9e 85       	ldd	r25, Y+14	; 0x0e
   104f0:	af 85       	ldd	r26, Y+15	; 0x0f
   104f2:	b8 89       	ldd	r27, Y+16	; 0x10
   104f4:	02 2e       	mov	r0, r18
   104f6:	04 c0       	rjmp	.+8      	; 0x10500 <getAttitudeInDeg+0x30a>
   104f8:	b5 95       	asr	r27
   104fa:	a7 95       	ror	r26
   104fc:	97 95       	ror	r25
   104fe:	87 95       	ror	r24
   10500:	0a 94       	dec	r0
   10502:	d2 f7       	brpl	.-12     	; 0x104f8 <getAttitudeInDeg+0x302>
   10504:	8d 87       	std	Y+13, r24	; 0x0d
   10506:	9e 87       	std	Y+14, r25	; 0x0e
   10508:	af 87       	std	Y+15, r26	; 0x0f
   1050a:	b8 8b       	std	Y+16, r27	; 0x10
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   1050c:	8a 89       	ldd	r24, Y+18	; 0x12
   1050e:	8f 3f       	cpi	r24, 0xFF	; 255
   10510:	31 f4       	brne	.+12     	; 0x1051e <getAttitudeInDeg+0x328>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10512:	8d 85       	ldd	r24, Y+13	; 0x0d
   10514:	9e 85       	ldd	r25, Y+14	; 0x0e
   10516:	90 95       	com	r25
   10518:	81 95       	neg	r24
   1051a:	9f 4f       	sbci	r25, 0xFF	; 255
   1051c:	02 c0       	rjmp	.+4      	; 0x10522 <getAttitudeInDeg+0x32c>
       else
           return (int16_t)i_x;
   1051e:	8d 85       	ldd	r24, Y+13	; 0x0d
   10520:	9e 85       	ldd	r25, Y+14	; 0x0e
   10522:	f8 01       	movw	r30, r16
   10524:	80 83       	st	Z, r24
   10526:	91 83       	std	Z+1, r25	; 0x01

}/*End getAttitudeInDeg*/
   10528:	a2 96       	adiw	r28, 0x22	; 34
   1052a:	cd bf       	out	0x3d, r28	; 61
   1052c:	de bf       	out	0x3e, r29	; 62
   1052e:	df 91       	pop	r29
   10530:	cf 91       	pop	r28
   10532:	1f 91       	pop	r17
   10534:	0f 91       	pop	r16
   10536:	08 95       	ret

00010538 <applyCalibration>:

static void applyCalibration( int16_t *ps_smp,
                              int16_t *ps_R,
                              int16_t *ps_scale,
                              int16_t *ps_bias)
{
   10538:	0f 93       	push	r16
   1053a:	cf 93       	push	r28
   1053c:	df 93       	push	r29
   1053e:	cd b7       	in	r28, 0x3d	; 61
   10540:	de b7       	in	r29, 0x3e	; 62
   10542:	ce 54       	subi	r28, 0x4E	; 78
   10544:	d0 40       	sbci	r29, 0x00	; 0
   10546:	cd bf       	out	0x3d, r28	; 61
   10548:	de bf       	out	0x3e, r29	; 62
   1054a:	fe 01       	movw	r30, r28
   1054c:	e9 5b       	subi	r30, 0xB9	; 185
   1054e:	ff 4f       	sbci	r31, 0xFF	; 255
   10550:	80 83       	st	Z, r24
   10552:	91 83       	std	Z+1, r25	; 0x01
   10554:	ce 01       	movw	r24, r28
   10556:	87 5b       	subi	r24, 0xB7	; 183
   10558:	9f 4f       	sbci	r25, 0xFF	; 255
   1055a:	fc 01       	movw	r30, r24
   1055c:	60 83       	st	Z, r22
   1055e:	71 83       	std	Z+1, r23	; 0x01
   10560:	ce 01       	movw	r24, r28
   10562:	85 5b       	subi	r24, 0xB5	; 181
   10564:	9f 4f       	sbci	r25, 0xFF	; 255
   10566:	fc 01       	movw	r30, r24
   10568:	40 83       	st	Z, r20
   1056a:	51 83       	std	Z+1, r21	; 0x01
   1056c:	ce 01       	movw	r24, r28
   1056e:	83 5b       	subi	r24, 0xB3	; 179
   10570:	9f 4f       	sbci	r25, 0xFF	; 255
   10572:	fc 01       	movw	r30, r24
   10574:	20 83       	st	Z, r18
   10576:	31 83       	std	Z+1, r19	; 0x01
   int32_t i_sum;

   /*---------------------------------------------------------------------------*
    * Remove bias.
    *---------------------------------------------------------------------------*/
   ps_smp[0] -= ps_bias[0];
   10578:	ce 01       	movw	r24, r28
   1057a:	89 5b       	subi	r24, 0xB9	; 185
   1057c:	9f 4f       	sbci	r25, 0xFF	; 255
   1057e:	fc 01       	movw	r30, r24
   10580:	80 81       	ld	r24, Z
   10582:	91 81       	ldd	r25, Z+1	; 0x01
   10584:	fc 01       	movw	r30, r24
   10586:	20 81       	ld	r18, Z
   10588:	31 81       	ldd	r19, Z+1	; 0x01
   1058a:	ce 01       	movw	r24, r28
   1058c:	83 5b       	subi	r24, 0xB3	; 179
   1058e:	9f 4f       	sbci	r25, 0xFF	; 255
   10590:	fc 01       	movw	r30, r24
   10592:	80 81       	ld	r24, Z
   10594:	91 81       	ldd	r25, Z+1	; 0x01
   10596:	fc 01       	movw	r30, r24
   10598:	80 81       	ld	r24, Z
   1059a:	91 81       	ldd	r25, Z+1	; 0x01
   1059c:	28 1b       	sub	r18, r24
   1059e:	39 0b       	sbc	r19, r25
   105a0:	ce 01       	movw	r24, r28
   105a2:	89 5b       	subi	r24, 0xB9	; 185
   105a4:	9f 4f       	sbci	r25, 0xFF	; 255
   105a6:	fc 01       	movw	r30, r24
   105a8:	80 81       	ld	r24, Z
   105aa:	91 81       	ldd	r25, Z+1	; 0x01
   105ac:	fc 01       	movw	r30, r24
   105ae:	20 83       	st	Z, r18
   105b0:	31 83       	std	Z+1, r19	; 0x01
   ps_smp[1] -= ps_bias[1];
   105b2:	ce 01       	movw	r24, r28
   105b4:	89 5b       	subi	r24, 0xB9	; 185
   105b6:	9f 4f       	sbci	r25, 0xFF	; 255
   105b8:	fc 01       	movw	r30, r24
   105ba:	80 81       	ld	r24, Z
   105bc:	91 81       	ldd	r25, Z+1	; 0x01
   105be:	02 96       	adiw	r24, 0x02	; 2
   105c0:	9e 01       	movw	r18, r28
   105c2:	29 5b       	subi	r18, 0xB9	; 185
   105c4:	3f 4f       	sbci	r19, 0xFF	; 255
   105c6:	f9 01       	movw	r30, r18
   105c8:	20 81       	ld	r18, Z
   105ca:	31 81       	ldd	r19, Z+1	; 0x01
   105cc:	2e 5f       	subi	r18, 0xFE	; 254
   105ce:	3f 4f       	sbci	r19, 0xFF	; 255
   105d0:	f9 01       	movw	r30, r18
   105d2:	40 81       	ld	r20, Z
   105d4:	51 81       	ldd	r21, Z+1	; 0x01
   105d6:	9e 01       	movw	r18, r28
   105d8:	23 5b       	subi	r18, 0xB3	; 179
   105da:	3f 4f       	sbci	r19, 0xFF	; 255
   105dc:	f9 01       	movw	r30, r18
   105de:	20 81       	ld	r18, Z
   105e0:	31 81       	ldd	r19, Z+1	; 0x01
   105e2:	2e 5f       	subi	r18, 0xFE	; 254
   105e4:	3f 4f       	sbci	r19, 0xFF	; 255
   105e6:	f9 01       	movw	r30, r18
   105e8:	20 81       	ld	r18, Z
   105ea:	31 81       	ldd	r19, Z+1	; 0x01
   105ec:	ba 01       	movw	r22, r20
   105ee:	62 1b       	sub	r22, r18
   105f0:	73 0b       	sbc	r23, r19
   105f2:	9b 01       	movw	r18, r22
   105f4:	fc 01       	movw	r30, r24
   105f6:	20 83       	st	Z, r18
   105f8:	31 83       	std	Z+1, r19	; 0x01
   ps_smp[2] -= ps_bias[2];
   105fa:	ce 01       	movw	r24, r28
   105fc:	89 5b       	subi	r24, 0xB9	; 185
   105fe:	9f 4f       	sbci	r25, 0xFF	; 255
   10600:	fc 01       	movw	r30, r24
   10602:	80 81       	ld	r24, Z
   10604:	91 81       	ldd	r25, Z+1	; 0x01
   10606:	04 96       	adiw	r24, 0x04	; 4
   10608:	9e 01       	movw	r18, r28
   1060a:	29 5b       	subi	r18, 0xB9	; 185
   1060c:	3f 4f       	sbci	r19, 0xFF	; 255
   1060e:	f9 01       	movw	r30, r18
   10610:	20 81       	ld	r18, Z
   10612:	31 81       	ldd	r19, Z+1	; 0x01
   10614:	2c 5f       	subi	r18, 0xFC	; 252
   10616:	3f 4f       	sbci	r19, 0xFF	; 255
   10618:	f9 01       	movw	r30, r18
   1061a:	40 81       	ld	r20, Z
   1061c:	51 81       	ldd	r21, Z+1	; 0x01
   1061e:	9e 01       	movw	r18, r28
   10620:	23 5b       	subi	r18, 0xB3	; 179
   10622:	3f 4f       	sbci	r19, 0xFF	; 255
   10624:	f9 01       	movw	r30, r18
   10626:	20 81       	ld	r18, Z
   10628:	31 81       	ldd	r19, Z+1	; 0x01
   1062a:	2c 5f       	subi	r18, 0xFC	; 252
   1062c:	3f 4f       	sbci	r19, 0xFF	; 255
   1062e:	f9 01       	movw	r30, r18
   10630:	20 81       	ld	r18, Z
   10632:	31 81       	ldd	r19, Z+1	; 0x01
   10634:	ba 01       	movw	r22, r20
   10636:	62 1b       	sub	r22, r18
   10638:	73 0b       	sbc	r23, r19
   1063a:	9b 01       	movw	r18, r22
   1063c:	fc 01       	movw	r30, r24
   1063e:	20 83       	st	Z, r18
   10640:	31 83       	std	Z+1, r19	; 0x01

   /*---------------------------------------------------------------------------*
    * Rotate the sample to align with the calculated ellipsoid principle axis.
    *---------------------------------------------------------------------------*/
   i_sum = 0;
   10642:	19 82       	std	Y+1, r1	; 0x01
   10644:	1a 82       	std	Y+2, r1	; 0x02
   10646:	1b 82       	std	Y+3, r1	; 0x03
   10648:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[0], ps_R[0], i_sum, 1);
   1064a:	ce 01       	movw	r24, r28
   1064c:	89 5b       	subi	r24, 0xB9	; 185
   1064e:	9f 4f       	sbci	r25, 0xFF	; 255
   10650:	fc 01       	movw	r30, r24
   10652:	80 81       	ld	r24, Z
   10654:	91 81       	ldd	r25, Z+1	; 0x01
   10656:	fc 01       	movw	r30, r24
   10658:	80 81       	ld	r24, Z
   1065a:	91 81       	ldd	r25, Z+1	; 0x01
   1065c:	9e 01       	movw	r18, r28
   1065e:	27 5b       	subi	r18, 0xB7	; 183
   10660:	3f 4f       	sbci	r19, 0xFF	; 255
   10662:	f9 01       	movw	r30, r18
   10664:	20 81       	ld	r18, Z
   10666:	31 81       	ldd	r19, Z+1	; 0x01
   10668:	f9 01       	movw	r30, r18
   1066a:	60 81       	ld	r22, Z
   1066c:	71 81       	ldd	r23, Z+1	; 0x01
   1066e:	29 81       	ldd	r18, Y+1	; 0x01
   10670:	3a 81       	ldd	r19, Y+2	; 0x02
   10672:	4b 81       	ldd	r20, Y+3	; 0x03
   10674:	5c 81       	ldd	r21, Y+4	; 0x04
   10676:	01 e0       	ldi	r16, 0x01	; 1
   10678:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   1067c:	dc 01       	movw	r26, r24
   1067e:	cb 01       	movw	r24, r22
   10680:	89 83       	std	Y+1, r24	; 0x01
   10682:	9a 83       	std	Y+2, r25	; 0x02
   10684:	ab 83       	std	Y+3, r26	; 0x03
   10686:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[1], ps_R[1], i_sum, 1);
   10688:	ce 01       	movw	r24, r28
   1068a:	89 5b       	subi	r24, 0xB9	; 185
   1068c:	9f 4f       	sbci	r25, 0xFF	; 255
   1068e:	fc 01       	movw	r30, r24
   10690:	80 81       	ld	r24, Z
   10692:	91 81       	ldd	r25, Z+1	; 0x01
   10694:	02 96       	adiw	r24, 0x02	; 2
   10696:	fc 01       	movw	r30, r24
   10698:	80 81       	ld	r24, Z
   1069a:	91 81       	ldd	r25, Z+1	; 0x01
   1069c:	9e 01       	movw	r18, r28
   1069e:	27 5b       	subi	r18, 0xB7	; 183
   106a0:	3f 4f       	sbci	r19, 0xFF	; 255
   106a2:	f9 01       	movw	r30, r18
   106a4:	20 81       	ld	r18, Z
   106a6:	31 81       	ldd	r19, Z+1	; 0x01
   106a8:	2e 5f       	subi	r18, 0xFE	; 254
   106aa:	3f 4f       	sbci	r19, 0xFF	; 255
   106ac:	f9 01       	movw	r30, r18
   106ae:	60 81       	ld	r22, Z
   106b0:	71 81       	ldd	r23, Z+1	; 0x01
   106b2:	29 81       	ldd	r18, Y+1	; 0x01
   106b4:	3a 81       	ldd	r19, Y+2	; 0x02
   106b6:	4b 81       	ldd	r20, Y+3	; 0x03
   106b8:	5c 81       	ldd	r21, Y+4	; 0x04
   106ba:	01 e0       	ldi	r16, 0x01	; 1
   106bc:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   106c0:	dc 01       	movw	r26, r24
   106c2:	cb 01       	movw	r24, r22
   106c4:	89 83       	std	Y+1, r24	; 0x01
   106c6:	9a 83       	std	Y+2, r25	; 0x02
   106c8:	ab 83       	std	Y+3, r26	; 0x03
   106ca:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[2], ps_R[2], i_sum, 1);
   106cc:	ce 01       	movw	r24, r28
   106ce:	89 5b       	subi	r24, 0xB9	; 185
   106d0:	9f 4f       	sbci	r25, 0xFF	; 255
   106d2:	fc 01       	movw	r30, r24
   106d4:	80 81       	ld	r24, Z
   106d6:	91 81       	ldd	r25, Z+1	; 0x01
   106d8:	04 96       	adiw	r24, 0x04	; 4
   106da:	fc 01       	movw	r30, r24
   106dc:	80 81       	ld	r24, Z
   106de:	91 81       	ldd	r25, Z+1	; 0x01
   106e0:	9e 01       	movw	r18, r28
   106e2:	27 5b       	subi	r18, 0xB7	; 183
   106e4:	3f 4f       	sbci	r19, 0xFF	; 255
   106e6:	f9 01       	movw	r30, r18
   106e8:	20 81       	ld	r18, Z
   106ea:	31 81       	ldd	r19, Z+1	; 0x01
   106ec:	2c 5f       	subi	r18, 0xFC	; 252
   106ee:	3f 4f       	sbci	r19, 0xFF	; 255
   106f0:	f9 01       	movw	r30, r18
   106f2:	60 81       	ld	r22, Z
   106f4:	71 81       	ldd	r23, Z+1	; 0x01
   106f6:	29 81       	ldd	r18, Y+1	; 0x01
   106f8:	3a 81       	ldd	r19, Y+2	; 0x02
   106fa:	4b 81       	ldd	r20, Y+3	; 0x03
   106fc:	5c 81       	ldd	r21, Y+4	; 0x04
   106fe:	01 e0       	ldi	r16, 0x01	; 1
   10700:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10704:	dc 01       	movw	r26, r24
   10706:	cb 01       	movw	r24, r22
   10708:	89 83       	std	Y+1, r24	; 0x01
   1070a:	9a 83       	std	Y+2, r25	; 0x02
   1070c:	ab 83       	std	Y+3, r26	; 0x03
   1070e:	bc 83       	std	Y+4, r27	; 0x04
   10710:	89 81       	ldd	r24, Y+1	; 0x01
   10712:	9a 81       	ldd	r25, Y+2	; 0x02
   10714:	ab 81       	ldd	r26, Y+3	; 0x03
   10716:	bc 81       	ldd	r27, Y+4	; 0x04
   10718:	8d 83       	std	Y+5, r24	; 0x05
   1071a:	9e 83       	std	Y+6, r25	; 0x06
   1071c:	af 83       	std	Y+7, r26	; 0x07
   1071e:	b8 87       	std	Y+8, r27	; 0x08
   10720:	8e e0       	ldi	r24, 0x0E	; 14
   10722:	89 87       	std	Y+9, r24	; 0x09
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10724:	81 e0       	ldi	r24, 0x01	; 1
   10726:	8a 87       	std	Y+10, r24	; 0x0a

      if( i_x < 0)
   10728:	8d 81       	ldd	r24, Y+5	; 0x05
   1072a:	9e 81       	ldd	r25, Y+6	; 0x06
   1072c:	af 81       	ldd	r26, Y+7	; 0x07
   1072e:	b8 85       	ldd	r27, Y+8	; 0x08
   10730:	bb 23       	and	r27, r27
   10732:	8c f4       	brge	.+34     	; 0x10756 <applyCalibration+0x21e>
      {
         i_x = -i_x;
   10734:	8d 81       	ldd	r24, Y+5	; 0x05
   10736:	9e 81       	ldd	r25, Y+6	; 0x06
   10738:	af 81       	ldd	r26, Y+7	; 0x07
   1073a:	b8 85       	ldd	r27, Y+8	; 0x08
   1073c:	b0 95       	com	r27
   1073e:	a0 95       	com	r26
   10740:	90 95       	com	r25
   10742:	81 95       	neg	r24
   10744:	9f 4f       	sbci	r25, 0xFF	; 255
   10746:	af 4f       	sbci	r26, 0xFF	; 255
   10748:	bf 4f       	sbci	r27, 0xFF	; 255
   1074a:	8d 83       	std	Y+5, r24	; 0x05
   1074c:	9e 83       	std	Y+6, r25	; 0x06
   1074e:	af 83       	std	Y+7, r26	; 0x07
   10750:	b8 87       	std	Y+8, r27	; 0x08
         c_sign = -1;
   10752:	8f ef       	ldi	r24, 0xFF	; 255
   10754:	8a 87       	std	Y+10, r24	; 0x0a
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10756:	89 85       	ldd	r24, Y+9	; 0x09
   10758:	89 30       	cpi	r24, 0x09	; 9
   1075a:	94 f1       	brlt	.+100    	; 0x107c0 <applyCalibration+0x288>
   1075c:	89 85       	ldd	r24, Y+9	; 0x09
   1075e:	81 31       	cpi	r24, 0x11	; 17
   10760:	7c f5       	brge	.+94     	; 0x107c0 <applyCalibration+0x288>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10762:	89 85       	ldd	r24, Y+9	; 0x09
   10764:	99 27       	eor	r25, r25
   10766:	87 fd       	sbrc	r24, 7
   10768:	90 95       	com	r25
   1076a:	20 e1       	ldi	r18, 0x10	; 16
   1076c:	30 e0       	ldi	r19, 0x00	; 0
   1076e:	28 1b       	sub	r18, r24
   10770:	39 0b       	sbc	r19, r25
   10772:	8d 81       	ldd	r24, Y+5	; 0x05
   10774:	9e 81       	ldd	r25, Y+6	; 0x06
   10776:	af 81       	ldd	r26, Y+7	; 0x07
   10778:	b8 85       	ldd	r27, Y+8	; 0x08
   1077a:	04 c0       	rjmp	.+8      	; 0x10784 <applyCalibration+0x24c>
   1077c:	88 0f       	add	r24, r24
   1077e:	99 1f       	adc	r25, r25
   10780:	aa 1f       	adc	r26, r26
   10782:	bb 1f       	adc	r27, r27
   10784:	2a 95       	dec	r18
   10786:	d2 f7       	brpl	.-12     	; 0x1077c <applyCalibration+0x244>
   10788:	9e 01       	movw	r18, r28
   1078a:	2d 5b       	subi	r18, 0xBD	; 189
   1078c:	3f 4f       	sbci	r19, 0xFF	; 255
   1078e:	f9 01       	movw	r30, r18
   10790:	80 83       	st	Z, r24
   10792:	91 83       	std	Z+1, r25	; 0x01
   10794:	a2 83       	std	Z+2, r26	; 0x02
   10796:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   10798:	8a 85       	ldd	r24, Y+10	; 0x0a
   1079a:	8f 3f       	cpi	r24, 0xFF	; 255
   1079c:	51 f4       	brne	.+20     	; 0x107b2 <applyCalibration+0x27a>
              return -t_tWord.as_word16[1];
   1079e:	ce 01       	movw	r24, r28
   107a0:	8d 5b       	subi	r24, 0xBD	; 189
   107a2:	9f 4f       	sbci	r25, 0xFF	; 255
   107a4:	fc 01       	movw	r30, r24
   107a6:	82 81       	ldd	r24, Z+2	; 0x02
   107a8:	93 81       	ldd	r25, Z+3	; 0x03
   107aa:	90 95       	com	r25
   107ac:	81 95       	neg	r24
   107ae:	9f 4f       	sbci	r25, 0xFF	; 255
   107b0:	27 c0       	rjmp	.+78     	; 0x10800 <applyCalibration+0x2c8>
           else
            return t_tWord.as_word16[1];
   107b2:	ce 01       	movw	r24, r28
   107b4:	8d 5b       	subi	r24, 0xBD	; 189
   107b6:	9f 4f       	sbci	r25, 0xFF	; 255
   107b8:	fc 01       	movw	r30, r24
   107ba:	82 81       	ldd	r24, Z+2	; 0x02
   107bc:	93 81       	ldd	r25, Z+3	; 0x03
   107be:	20 c0       	rjmp	.+64     	; 0x10800 <applyCalibration+0x2c8>
      }

      i_x = i_x >> c_n;
   107c0:	89 85       	ldd	r24, Y+9	; 0x09
   107c2:	28 2f       	mov	r18, r24
   107c4:	33 27       	eor	r19, r19
   107c6:	27 fd       	sbrc	r18, 7
   107c8:	30 95       	com	r19
   107ca:	8d 81       	ldd	r24, Y+5	; 0x05
   107cc:	9e 81       	ldd	r25, Y+6	; 0x06
   107ce:	af 81       	ldd	r26, Y+7	; 0x07
   107d0:	b8 85       	ldd	r27, Y+8	; 0x08
   107d2:	02 2e       	mov	r0, r18
   107d4:	04 c0       	rjmp	.+8      	; 0x107de <applyCalibration+0x2a6>
   107d6:	b5 95       	asr	r27
   107d8:	a7 95       	ror	r26
   107da:	97 95       	ror	r25
   107dc:	87 95       	ror	r24
   107de:	0a 94       	dec	r0
   107e0:	d2 f7       	brpl	.-12     	; 0x107d6 <applyCalibration+0x29e>
   107e2:	8d 83       	std	Y+5, r24	; 0x05
   107e4:	9e 83       	std	Y+6, r25	; 0x06
   107e6:	af 83       	std	Y+7, r26	; 0x07
   107e8:	b8 87       	std	Y+8, r27	; 0x08
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   107ea:	8a 85       	ldd	r24, Y+10	; 0x0a
   107ec:	8f 3f       	cpi	r24, 0xFF	; 255
   107ee:	31 f4       	brne	.+12     	; 0x107fc <applyCalibration+0x2c4>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   107f0:	8d 81       	ldd	r24, Y+5	; 0x05
   107f2:	9e 81       	ldd	r25, Y+6	; 0x06
   107f4:	90 95       	com	r25
   107f6:	81 95       	neg	r24
   107f8:	9f 4f       	sbci	r25, 0xFF	; 255
   107fa:	02 c0       	rjmp	.+4      	; 0x10800 <applyCalibration+0x2c8>
       else
           return (int16_t)i_x;
   107fc:	8d 81       	ldd	r24, Y+5	; 0x05
   107fe:	9e 81       	ldd	r25, Y+6	; 0x06
   as_temp[0] = utl_rShft32_16( i_sum, 14);
   10800:	89 a7       	lds	r24, 0x79
   10802:	9a a7       	lds	r25, 0x7a

   i_sum = 0;
   10804:	19 82       	std	Y+1, r1	; 0x01
   10806:	1a 82       	std	Y+2, r1	; 0x02
   10808:	1b 82       	std	Y+3, r1	; 0x03
   1080a:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[0], ps_R[1*3 + 0], i_sum, 1);
   1080c:	ce 01       	movw	r24, r28
   1080e:	89 5b       	subi	r24, 0xB9	; 185
   10810:	9f 4f       	sbci	r25, 0xFF	; 255
   10812:	fc 01       	movw	r30, r24
   10814:	80 81       	ld	r24, Z
   10816:	91 81       	ldd	r25, Z+1	; 0x01
   10818:	fc 01       	movw	r30, r24
   1081a:	80 81       	ld	r24, Z
   1081c:	91 81       	ldd	r25, Z+1	; 0x01
   1081e:	9e 01       	movw	r18, r28
   10820:	27 5b       	subi	r18, 0xB7	; 183
   10822:	3f 4f       	sbci	r19, 0xFF	; 255
   10824:	f9 01       	movw	r30, r18
   10826:	20 81       	ld	r18, Z
   10828:	31 81       	ldd	r19, Z+1	; 0x01
   1082a:	2a 5f       	subi	r18, 0xFA	; 250
   1082c:	3f 4f       	sbci	r19, 0xFF	; 255
   1082e:	f9 01       	movw	r30, r18
   10830:	60 81       	ld	r22, Z
   10832:	71 81       	ldd	r23, Z+1	; 0x01
   10834:	29 81       	ldd	r18, Y+1	; 0x01
   10836:	3a 81       	ldd	r19, Y+2	; 0x02
   10838:	4b 81       	ldd	r20, Y+3	; 0x03
   1083a:	5c 81       	ldd	r21, Y+4	; 0x04
   1083c:	01 e0       	ldi	r16, 0x01	; 1
   1083e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10842:	dc 01       	movw	r26, r24
   10844:	cb 01       	movw	r24, r22
   10846:	89 83       	std	Y+1, r24	; 0x01
   10848:	9a 83       	std	Y+2, r25	; 0x02
   1084a:	ab 83       	std	Y+3, r26	; 0x03
   1084c:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[1], ps_R[1*3 + 1], i_sum, 1);
   1084e:	ce 01       	movw	r24, r28
   10850:	89 5b       	subi	r24, 0xB9	; 185
   10852:	9f 4f       	sbci	r25, 0xFF	; 255
   10854:	fc 01       	movw	r30, r24
   10856:	80 81       	ld	r24, Z
   10858:	91 81       	ldd	r25, Z+1	; 0x01
   1085a:	02 96       	adiw	r24, 0x02	; 2
   1085c:	fc 01       	movw	r30, r24
   1085e:	80 81       	ld	r24, Z
   10860:	91 81       	ldd	r25, Z+1	; 0x01
   10862:	9e 01       	movw	r18, r28
   10864:	27 5b       	subi	r18, 0xB7	; 183
   10866:	3f 4f       	sbci	r19, 0xFF	; 255
   10868:	f9 01       	movw	r30, r18
   1086a:	20 81       	ld	r18, Z
   1086c:	31 81       	ldd	r19, Z+1	; 0x01
   1086e:	28 5f       	subi	r18, 0xF8	; 248
   10870:	3f 4f       	sbci	r19, 0xFF	; 255
   10872:	f9 01       	movw	r30, r18
   10874:	60 81       	ld	r22, Z
   10876:	71 81       	ldd	r23, Z+1	; 0x01
   10878:	29 81       	ldd	r18, Y+1	; 0x01
   1087a:	3a 81       	ldd	r19, Y+2	; 0x02
   1087c:	4b 81       	ldd	r20, Y+3	; 0x03
   1087e:	5c 81       	ldd	r21, Y+4	; 0x04
   10880:	01 e0       	ldi	r16, 0x01	; 1
   10882:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10886:	dc 01       	movw	r26, r24
   10888:	cb 01       	movw	r24, r22
   1088a:	89 83       	std	Y+1, r24	; 0x01
   1088c:	9a 83       	std	Y+2, r25	; 0x02
   1088e:	ab 83       	std	Y+3, r26	; 0x03
   10890:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[2], ps_R[1*3 + 2], i_sum, 1);
   10892:	ce 01       	movw	r24, r28
   10894:	89 5b       	subi	r24, 0xB9	; 185
   10896:	9f 4f       	sbci	r25, 0xFF	; 255
   10898:	fc 01       	movw	r30, r24
   1089a:	80 81       	ld	r24, Z
   1089c:	91 81       	ldd	r25, Z+1	; 0x01
   1089e:	04 96       	adiw	r24, 0x04	; 4
   108a0:	fc 01       	movw	r30, r24
   108a2:	80 81       	ld	r24, Z
   108a4:	91 81       	ldd	r25, Z+1	; 0x01
   108a6:	9e 01       	movw	r18, r28
   108a8:	27 5b       	subi	r18, 0xB7	; 183
   108aa:	3f 4f       	sbci	r19, 0xFF	; 255
   108ac:	f9 01       	movw	r30, r18
   108ae:	20 81       	ld	r18, Z
   108b0:	31 81       	ldd	r19, Z+1	; 0x01
   108b2:	26 5f       	subi	r18, 0xF6	; 246
   108b4:	3f 4f       	sbci	r19, 0xFF	; 255
   108b6:	f9 01       	movw	r30, r18
   108b8:	60 81       	ld	r22, Z
   108ba:	71 81       	ldd	r23, Z+1	; 0x01
   108bc:	29 81       	ldd	r18, Y+1	; 0x01
   108be:	3a 81       	ldd	r19, Y+2	; 0x02
   108c0:	4b 81       	ldd	r20, Y+3	; 0x03
   108c2:	5c 81       	ldd	r21, Y+4	; 0x04
   108c4:	01 e0       	ldi	r16, 0x01	; 1
   108c6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   108ca:	dc 01       	movw	r26, r24
   108cc:	cb 01       	movw	r24, r22
   108ce:	89 83       	std	Y+1, r24	; 0x01
   108d0:	9a 83       	std	Y+2, r25	; 0x02
   108d2:	ab 83       	std	Y+3, r26	; 0x03
   108d4:	bc 83       	std	Y+4, r27	; 0x04
   108d6:	89 81       	ldd	r24, Y+1	; 0x01
   108d8:	9a 81       	ldd	r25, Y+2	; 0x02
   108da:	ab 81       	ldd	r26, Y+3	; 0x03
   108dc:	bc 81       	ldd	r27, Y+4	; 0x04
   108de:	8b 87       	std	Y+11, r24	; 0x0b
   108e0:	9c 87       	std	Y+12, r25	; 0x0c
   108e2:	ad 87       	std	Y+13, r26	; 0x0d
   108e4:	be 87       	std	Y+14, r27	; 0x0e
   108e6:	8e e0       	ldi	r24, 0x0E	; 14
   108e8:	8f 87       	std	Y+15, r24	; 0x0f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   108ea:	81 e0       	ldi	r24, 0x01	; 1
   108ec:	88 8b       	std	Y+16, r24	; 0x10

      if( i_x < 0)
   108ee:	8b 85       	ldd	r24, Y+11	; 0x0b
   108f0:	9c 85       	ldd	r25, Y+12	; 0x0c
   108f2:	ad 85       	ldd	r26, Y+13	; 0x0d
   108f4:	be 85       	ldd	r27, Y+14	; 0x0e
   108f6:	bb 23       	and	r27, r27
   108f8:	8c f4       	brge	.+34     	; 0x1091c <applyCalibration+0x3e4>
      {
         i_x = -i_x;
   108fa:	8b 85       	ldd	r24, Y+11	; 0x0b
   108fc:	9c 85       	ldd	r25, Y+12	; 0x0c
   108fe:	ad 85       	ldd	r26, Y+13	; 0x0d
   10900:	be 85       	ldd	r27, Y+14	; 0x0e
   10902:	b0 95       	com	r27
   10904:	a0 95       	com	r26
   10906:	90 95       	com	r25
   10908:	81 95       	neg	r24
   1090a:	9f 4f       	sbci	r25, 0xFF	; 255
   1090c:	af 4f       	sbci	r26, 0xFF	; 255
   1090e:	bf 4f       	sbci	r27, 0xFF	; 255
   10910:	8b 87       	std	Y+11, r24	; 0x0b
   10912:	9c 87       	std	Y+12, r25	; 0x0c
   10914:	ad 87       	std	Y+13, r26	; 0x0d
   10916:	be 87       	std	Y+14, r27	; 0x0e
         c_sign = -1;
   10918:	8f ef       	ldi	r24, 0xFF	; 255
   1091a:	88 8b       	std	Y+16, r24	; 0x10
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   1091c:	8f 85       	ldd	r24, Y+15	; 0x0f
   1091e:	89 30       	cpi	r24, 0x09	; 9
   10920:	84 f1       	brlt	.+96     	; 0x10982 <applyCalibration+0x44a>
   10922:	8f 85       	ldd	r24, Y+15	; 0x0f
   10924:	81 31       	cpi	r24, 0x11	; 17
   10926:	6c f5       	brge	.+90     	; 0x10982 <applyCalibration+0x44a>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10928:	8f 85       	ldd	r24, Y+15	; 0x0f
   1092a:	99 27       	eor	r25, r25
   1092c:	87 fd       	sbrc	r24, 7
   1092e:	90 95       	com	r25
   10930:	20 e1       	ldi	r18, 0x10	; 16
   10932:	30 e0       	ldi	r19, 0x00	; 0
   10934:	28 1b       	sub	r18, r24
   10936:	39 0b       	sbc	r19, r25
   10938:	8b 85       	ldd	r24, Y+11	; 0x0b
   1093a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1093c:	ad 85       	ldd	r26, Y+13	; 0x0d
   1093e:	be 85       	ldd	r27, Y+14	; 0x0e
   10940:	04 c0       	rjmp	.+8      	; 0x1094a <applyCalibration+0x412>
   10942:	88 0f       	add	r24, r24
   10944:	99 1f       	adc	r25, r25
   10946:	aa 1f       	adc	r26, r26
   10948:	bb 1f       	adc	r27, r27
   1094a:	2a 95       	dec	r18
   1094c:	d2 f7       	brpl	.-12     	; 0x10942 <applyCalibration+0x40a>
   1094e:	9e 01       	movw	r18, r28
   10950:	21 5c       	subi	r18, 0xC1	; 193
   10952:	3f 4f       	sbci	r19, 0xFF	; 255
   10954:	f9 01       	movw	r30, r18
   10956:	80 83       	st	Z, r24
   10958:	91 83       	std	Z+1, r25	; 0x01
   1095a:	a2 83       	std	Z+2, r26	; 0x02
   1095c:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   1095e:	88 89       	ldd	r24, Y+16	; 0x10
   10960:	8f 3f       	cpi	r24, 0xFF	; 255
   10962:	49 f4       	brne	.+18     	; 0x10976 <applyCalibration+0x43e>
              return -t_tWord.as_word16[1];
   10964:	ce 01       	movw	r24, r28
   10966:	cf 96       	adiw	r24, 0x3f	; 63
   10968:	fc 01       	movw	r30, r24
   1096a:	82 81       	ldd	r24, Z+2	; 0x02
   1096c:	93 81       	ldd	r25, Z+3	; 0x03
   1096e:	90 95       	com	r25
   10970:	81 95       	neg	r24
   10972:	9f 4f       	sbci	r25, 0xFF	; 255
   10974:	26 c0       	rjmp	.+76     	; 0x109c2 <applyCalibration+0x48a>
           else
            return t_tWord.as_word16[1];
   10976:	ce 01       	movw	r24, r28
   10978:	cf 96       	adiw	r24, 0x3f	; 63
   1097a:	fc 01       	movw	r30, r24
   1097c:	82 81       	ldd	r24, Z+2	; 0x02
   1097e:	93 81       	ldd	r25, Z+3	; 0x03
   10980:	20 c0       	rjmp	.+64     	; 0x109c2 <applyCalibration+0x48a>
      }

      i_x = i_x >> c_n;
   10982:	8f 85       	ldd	r24, Y+15	; 0x0f
   10984:	28 2f       	mov	r18, r24
   10986:	33 27       	eor	r19, r19
   10988:	27 fd       	sbrc	r18, 7
   1098a:	30 95       	com	r19
   1098c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1098e:	9c 85       	ldd	r25, Y+12	; 0x0c
   10990:	ad 85       	ldd	r26, Y+13	; 0x0d
   10992:	be 85       	ldd	r27, Y+14	; 0x0e
   10994:	02 2e       	mov	r0, r18
   10996:	04 c0       	rjmp	.+8      	; 0x109a0 <applyCalibration+0x468>
   10998:	b5 95       	asr	r27
   1099a:	a7 95       	ror	r26
   1099c:	97 95       	ror	r25
   1099e:	87 95       	ror	r24
   109a0:	0a 94       	dec	r0
   109a2:	d2 f7       	brpl	.-12     	; 0x10998 <applyCalibration+0x460>
   109a4:	8b 87       	std	Y+11, r24	; 0x0b
   109a6:	9c 87       	std	Y+12, r25	; 0x0c
   109a8:	ad 87       	std	Y+13, r26	; 0x0d
   109aa:	be 87       	std	Y+14, r27	; 0x0e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   109ac:	88 89       	ldd	r24, Y+16	; 0x10
   109ae:	8f 3f       	cpi	r24, 0xFF	; 255
   109b0:	31 f4       	brne	.+12     	; 0x109be <applyCalibration+0x486>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   109b2:	8b 85       	ldd	r24, Y+11	; 0x0b
   109b4:	9c 85       	ldd	r25, Y+12	; 0x0c
   109b6:	90 95       	com	r25
   109b8:	81 95       	neg	r24
   109ba:	9f 4f       	sbci	r25, 0xFF	; 255
   109bc:	02 c0       	rjmp	.+4      	; 0x109c2 <applyCalibration+0x48a>
       else
           return (int16_t)i_x;
   109be:	8b 85       	ldd	r24, Y+11	; 0x0b
   109c0:	9c 85       	ldd	r25, Y+12	; 0x0c
   as_temp[1] = utl_rShft32_16( i_sum, 14);
   109c2:	8b a7       	lds	r24, 0x7b
   109c4:	9c a7       	lds	r25, 0x7c

   i_sum = 0;
   109c6:	19 82       	std	Y+1, r1	; 0x01
   109c8:	1a 82       	std	Y+2, r1	; 0x02
   109ca:	1b 82       	std	Y+3, r1	; 0x03
   109cc:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[0], ps_R[2*3 + 0], i_sum, 1);
   109ce:	ce 01       	movw	r24, r28
   109d0:	89 5b       	subi	r24, 0xB9	; 185
   109d2:	9f 4f       	sbci	r25, 0xFF	; 255
   109d4:	fc 01       	movw	r30, r24
   109d6:	80 81       	ld	r24, Z
   109d8:	91 81       	ldd	r25, Z+1	; 0x01
   109da:	fc 01       	movw	r30, r24
   109dc:	80 81       	ld	r24, Z
   109de:	91 81       	ldd	r25, Z+1	; 0x01
   109e0:	9e 01       	movw	r18, r28
   109e2:	27 5b       	subi	r18, 0xB7	; 183
   109e4:	3f 4f       	sbci	r19, 0xFF	; 255
   109e6:	f9 01       	movw	r30, r18
   109e8:	20 81       	ld	r18, Z
   109ea:	31 81       	ldd	r19, Z+1	; 0x01
   109ec:	24 5f       	subi	r18, 0xF4	; 244
   109ee:	3f 4f       	sbci	r19, 0xFF	; 255
   109f0:	f9 01       	movw	r30, r18
   109f2:	60 81       	ld	r22, Z
   109f4:	71 81       	ldd	r23, Z+1	; 0x01
   109f6:	29 81       	ldd	r18, Y+1	; 0x01
   109f8:	3a 81       	ldd	r19, Y+2	; 0x02
   109fa:	4b 81       	ldd	r20, Y+3	; 0x03
   109fc:	5c 81       	ldd	r21, Y+4	; 0x04
   109fe:	01 e0       	ldi	r16, 0x01	; 1
   10a00:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10a04:	dc 01       	movw	r26, r24
   10a06:	cb 01       	movw	r24, r22
   10a08:	89 83       	std	Y+1, r24	; 0x01
   10a0a:	9a 83       	std	Y+2, r25	; 0x02
   10a0c:	ab 83       	std	Y+3, r26	; 0x03
   10a0e:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[1], ps_R[2*3 + 1], i_sum, 1);
   10a10:	ce 01       	movw	r24, r28
   10a12:	89 5b       	subi	r24, 0xB9	; 185
   10a14:	9f 4f       	sbci	r25, 0xFF	; 255
   10a16:	fc 01       	movw	r30, r24
   10a18:	80 81       	ld	r24, Z
   10a1a:	91 81       	ldd	r25, Z+1	; 0x01
   10a1c:	02 96       	adiw	r24, 0x02	; 2
   10a1e:	fc 01       	movw	r30, r24
   10a20:	80 81       	ld	r24, Z
   10a22:	91 81       	ldd	r25, Z+1	; 0x01
   10a24:	9e 01       	movw	r18, r28
   10a26:	27 5b       	subi	r18, 0xB7	; 183
   10a28:	3f 4f       	sbci	r19, 0xFF	; 255
   10a2a:	f9 01       	movw	r30, r18
   10a2c:	20 81       	ld	r18, Z
   10a2e:	31 81       	ldd	r19, Z+1	; 0x01
   10a30:	22 5f       	subi	r18, 0xF2	; 242
   10a32:	3f 4f       	sbci	r19, 0xFF	; 255
   10a34:	f9 01       	movw	r30, r18
   10a36:	60 81       	ld	r22, Z
   10a38:	71 81       	ldd	r23, Z+1	; 0x01
   10a3a:	29 81       	ldd	r18, Y+1	; 0x01
   10a3c:	3a 81       	ldd	r19, Y+2	; 0x02
   10a3e:	4b 81       	ldd	r20, Y+3	; 0x03
   10a40:	5c 81       	ldd	r21, Y+4	; 0x04
   10a42:	01 e0       	ldi	r16, 0x01	; 1
   10a44:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10a48:	dc 01       	movw	r26, r24
   10a4a:	cb 01       	movw	r24, r22
   10a4c:	89 83       	std	Y+1, r24	; 0x01
   10a4e:	9a 83       	std	Y+2, r25	; 0x02
   10a50:	ab 83       	std	Y+3, r26	; 0x03
   10a52:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( ps_smp[2], ps_R[2*3 + 2], i_sum, 1);
   10a54:	ce 01       	movw	r24, r28
   10a56:	89 5b       	subi	r24, 0xB9	; 185
   10a58:	9f 4f       	sbci	r25, 0xFF	; 255
   10a5a:	fc 01       	movw	r30, r24
   10a5c:	80 81       	ld	r24, Z
   10a5e:	91 81       	ldd	r25, Z+1	; 0x01
   10a60:	04 96       	adiw	r24, 0x04	; 4
   10a62:	fc 01       	movw	r30, r24
   10a64:	80 81       	ld	r24, Z
   10a66:	91 81       	ldd	r25, Z+1	; 0x01
   10a68:	9e 01       	movw	r18, r28
   10a6a:	27 5b       	subi	r18, 0xB7	; 183
   10a6c:	3f 4f       	sbci	r19, 0xFF	; 255
   10a6e:	f9 01       	movw	r30, r18
   10a70:	20 81       	ld	r18, Z
   10a72:	31 81       	ldd	r19, Z+1	; 0x01
   10a74:	20 5f       	subi	r18, 0xF0	; 240
   10a76:	3f 4f       	sbci	r19, 0xFF	; 255
   10a78:	f9 01       	movw	r30, r18
   10a7a:	60 81       	ld	r22, Z
   10a7c:	71 81       	ldd	r23, Z+1	; 0x01
   10a7e:	29 81       	ldd	r18, Y+1	; 0x01
   10a80:	3a 81       	ldd	r19, Y+2	; 0x02
   10a82:	4b 81       	ldd	r20, Y+3	; 0x03
   10a84:	5c 81       	ldd	r21, Y+4	; 0x04
   10a86:	01 e0       	ldi	r16, 0x01	; 1
   10a88:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10a8c:	dc 01       	movw	r26, r24
   10a8e:	cb 01       	movw	r24, r22
   10a90:	89 83       	std	Y+1, r24	; 0x01
   10a92:	9a 83       	std	Y+2, r25	; 0x02
   10a94:	ab 83       	std	Y+3, r26	; 0x03
   10a96:	bc 83       	std	Y+4, r27	; 0x04
   10a98:	89 81       	ldd	r24, Y+1	; 0x01
   10a9a:	9a 81       	ldd	r25, Y+2	; 0x02
   10a9c:	ab 81       	ldd	r26, Y+3	; 0x03
   10a9e:	bc 81       	ldd	r27, Y+4	; 0x04
   10aa0:	89 8b       	std	Y+17, r24	; 0x11
   10aa2:	9a 8b       	std	Y+18, r25	; 0x12
   10aa4:	ab 8b       	std	Y+19, r26	; 0x13
   10aa6:	bc 8b       	std	Y+20, r27	; 0x14
   10aa8:	8e e0       	ldi	r24, 0x0E	; 14
   10aaa:	8d 8b       	std	Y+21, r24	; 0x15
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10aac:	81 e0       	ldi	r24, 0x01	; 1
   10aae:	8e 8b       	std	Y+22, r24	; 0x16

      if( i_x < 0)
   10ab0:	89 89       	ldd	r24, Y+17	; 0x11
   10ab2:	9a 89       	ldd	r25, Y+18	; 0x12
   10ab4:	ab 89       	ldd	r26, Y+19	; 0x13
   10ab6:	bc 89       	ldd	r27, Y+20	; 0x14
   10ab8:	bb 23       	and	r27, r27
   10aba:	8c f4       	brge	.+34     	; 0x10ade <applyCalibration+0x5a6>
      {
         i_x = -i_x;
   10abc:	89 89       	ldd	r24, Y+17	; 0x11
   10abe:	9a 89       	ldd	r25, Y+18	; 0x12
   10ac0:	ab 89       	ldd	r26, Y+19	; 0x13
   10ac2:	bc 89       	ldd	r27, Y+20	; 0x14
   10ac4:	b0 95       	com	r27
   10ac6:	a0 95       	com	r26
   10ac8:	90 95       	com	r25
   10aca:	81 95       	neg	r24
   10acc:	9f 4f       	sbci	r25, 0xFF	; 255
   10ace:	af 4f       	sbci	r26, 0xFF	; 255
   10ad0:	bf 4f       	sbci	r27, 0xFF	; 255
   10ad2:	89 8b       	std	Y+17, r24	; 0x11
   10ad4:	9a 8b       	std	Y+18, r25	; 0x12
   10ad6:	ab 8b       	std	Y+19, r26	; 0x13
   10ad8:	bc 8b       	std	Y+20, r27	; 0x14
         c_sign = -1;
   10ada:	8f ef       	ldi	r24, 0xFF	; 255
   10adc:	8e 8b       	std	Y+22, r24	; 0x16
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10ade:	8d 89       	ldd	r24, Y+21	; 0x15
   10ae0:	89 30       	cpi	r24, 0x09	; 9
   10ae2:	3c f1       	brlt	.+78     	; 0x10b32 <applyCalibration+0x5fa>
   10ae4:	8d 89       	ldd	r24, Y+21	; 0x15
   10ae6:	81 31       	cpi	r24, 0x11	; 17
   10ae8:	24 f5       	brge	.+72     	; 0x10b32 <applyCalibration+0x5fa>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10aea:	8d 89       	ldd	r24, Y+21	; 0x15
   10aec:	99 27       	eor	r25, r25
   10aee:	87 fd       	sbrc	r24, 7
   10af0:	90 95       	com	r25
   10af2:	20 e1       	ldi	r18, 0x10	; 16
   10af4:	30 e0       	ldi	r19, 0x00	; 0
   10af6:	28 1b       	sub	r18, r24
   10af8:	39 0b       	sbc	r19, r25
   10afa:	89 89       	ldd	r24, Y+17	; 0x11
   10afc:	9a 89       	ldd	r25, Y+18	; 0x12
   10afe:	ab 89       	ldd	r26, Y+19	; 0x13
   10b00:	bc 89       	ldd	r27, Y+20	; 0x14
   10b02:	02 2e       	mov	r0, r18
   10b04:	04 c0       	rjmp	.+8      	; 0x10b0e <applyCalibration+0x5d6>
   10b06:	88 0f       	add	r24, r24
   10b08:	99 1f       	adc	r25, r25
   10b0a:	aa 1f       	adc	r26, r26
   10b0c:	bb 1f       	adc	r27, r27
   10b0e:	0a 94       	dec	r0
   10b10:	d2 f7       	brpl	.-12     	; 0x10b06 <applyCalibration+0x5ce>
   10b12:	8b af       	sts	0x7b, r24
   10b14:	9c af       	sts	0x7c, r25
   10b16:	ad af       	sts	0x7d, r26
   10b18:	be af       	sts	0x7e, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   10b1a:	8e 89       	ldd	r24, Y+22	; 0x16
   10b1c:	8f 3f       	cpi	r24, 0xFF	; 255
   10b1e:	31 f4       	brne	.+12     	; 0x10b2c <applyCalibration+0x5f4>
              return -t_tWord.as_word16[1];
   10b20:	8d ad       	sts	0x6d, r24
   10b22:	9e ad       	sts	0x6e, r25
   10b24:	90 95       	com	r25
   10b26:	81 95       	neg	r24
   10b28:	9f 4f       	sbci	r25, 0xFF	; 255
   10b2a:	23 c0       	rjmp	.+70     	; 0x10b72 <applyCalibration+0x63a>
           else
            return t_tWord.as_word16[1];
   10b2c:	8d ad       	sts	0x6d, r24
   10b2e:	9e ad       	sts	0x6e, r25
   10b30:	20 c0       	rjmp	.+64     	; 0x10b72 <applyCalibration+0x63a>
      }

      i_x = i_x >> c_n;
   10b32:	8d 89       	ldd	r24, Y+21	; 0x15
   10b34:	28 2f       	mov	r18, r24
   10b36:	33 27       	eor	r19, r19
   10b38:	27 fd       	sbrc	r18, 7
   10b3a:	30 95       	com	r19
   10b3c:	89 89       	ldd	r24, Y+17	; 0x11
   10b3e:	9a 89       	ldd	r25, Y+18	; 0x12
   10b40:	ab 89       	ldd	r26, Y+19	; 0x13
   10b42:	bc 89       	ldd	r27, Y+20	; 0x14
   10b44:	02 2e       	mov	r0, r18
   10b46:	04 c0       	rjmp	.+8      	; 0x10b50 <applyCalibration+0x618>
   10b48:	b5 95       	asr	r27
   10b4a:	a7 95       	ror	r26
   10b4c:	97 95       	ror	r25
   10b4e:	87 95       	ror	r24
   10b50:	0a 94       	dec	r0
   10b52:	d2 f7       	brpl	.-12     	; 0x10b48 <applyCalibration+0x610>
   10b54:	89 8b       	std	Y+17, r24	; 0x11
   10b56:	9a 8b       	std	Y+18, r25	; 0x12
   10b58:	ab 8b       	std	Y+19, r26	; 0x13
   10b5a:	bc 8b       	std	Y+20, r27	; 0x14
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   10b5c:	8e 89       	ldd	r24, Y+22	; 0x16
   10b5e:	8f 3f       	cpi	r24, 0xFF	; 255
   10b60:	31 f4       	brne	.+12     	; 0x10b6e <applyCalibration+0x636>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10b62:	89 89       	ldd	r24, Y+17	; 0x11
   10b64:	9a 89       	ldd	r25, Y+18	; 0x12
   10b66:	90 95       	com	r25
   10b68:	81 95       	neg	r24
   10b6a:	9f 4f       	sbci	r25, 0xFF	; 255
   10b6c:	02 c0       	rjmp	.+4      	; 0x10b72 <applyCalibration+0x63a>
       else
           return (int16_t)i_x;
   10b6e:	89 89       	ldd	r24, Y+17	; 0x11
   10b70:	9a 89       	ldd	r25, Y+18	; 0x12
   as_temp[2] = utl_rShft32_16( i_sum, 14);
   10b72:	8d a7       	lds	r24, 0x7d
   10b74:	9e a7       	lds	r25, 0x7e

   /*---------------------------------------------------------------------------*
    * Scale the sample so that its axis are aligned.
    *---------------------------------------------------------------------------*/
   as_temp[0] = utl_mult16x16_16( as_temp[0], ps_scale[0],
   10b76:	89 a5       	lds	r24, 0x69
   10b78:	9a a5       	lds	r25, 0x6a
   10b7a:	9e 01       	movw	r18, r28
   10b7c:	25 5b       	subi	r18, 0xB5	; 181
   10b7e:	3f 4f       	sbci	r19, 0xFF	; 255
   10b80:	f9 01       	movw	r30, r18
   10b82:	20 81       	ld	r18, Z
   10b84:	31 81       	ldd	r19, Z+1	; 0x01
   10b86:	f9 01       	movw	r30, r18
   10b88:	20 81       	ld	r18, Z
   10b8a:	31 81       	ldd	r19, Z+1	; 0x01
   10b8c:	b9 01       	movw	r22, r18
   10b8e:	4d e0       	ldi	r20, 0x0D	; 13
   10b90:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
   10b94:	89 a7       	lds	r24, 0x79
   10b96:	9a a7       	lds	r25, 0x7a
   INS_AXIS_SCALE_Q_FACTOR);
   as_temp[1] = utl_mult16x16_16( as_temp[1], ps_scale[1],
   10b98:	8b a5       	lds	r24, 0x6b
   10b9a:	9c a5       	lds	r25, 0x6c
   10b9c:	9e 01       	movw	r18, r28
   10b9e:	25 5b       	subi	r18, 0xB5	; 181
   10ba0:	3f 4f       	sbci	r19, 0xFF	; 255
   10ba2:	f9 01       	movw	r30, r18
   10ba4:	20 81       	ld	r18, Z
   10ba6:	31 81       	ldd	r19, Z+1	; 0x01
   10ba8:	2e 5f       	subi	r18, 0xFE	; 254
   10baa:	3f 4f       	sbci	r19, 0xFF	; 255
   10bac:	f9 01       	movw	r30, r18
   10bae:	20 81       	ld	r18, Z
   10bb0:	31 81       	ldd	r19, Z+1	; 0x01
   10bb2:	b9 01       	movw	r22, r18
   10bb4:	4d e0       	ldi	r20, 0x0D	; 13
   10bb6:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
   10bba:	8b a7       	lds	r24, 0x7b
   10bbc:	9c a7       	lds	r25, 0x7c
   INS_AXIS_SCALE_Q_FACTOR);
   as_temp[2] = utl_mult16x16_16( as_temp[2], ps_scale[2],
   10bbe:	8d a5       	lds	r24, 0x6d
   10bc0:	9e a5       	lds	r25, 0x6e
   10bc2:	9e 01       	movw	r18, r28
   10bc4:	25 5b       	subi	r18, 0xB5	; 181
   10bc6:	3f 4f       	sbci	r19, 0xFF	; 255
   10bc8:	f9 01       	movw	r30, r18
   10bca:	20 81       	ld	r18, Z
   10bcc:	31 81       	ldd	r19, Z+1	; 0x01
   10bce:	2c 5f       	subi	r18, 0xFC	; 252
   10bd0:	3f 4f       	sbci	r19, 0xFF	; 255
   10bd2:	f9 01       	movw	r30, r18
   10bd4:	20 81       	ld	r18, Z
   10bd6:	31 81       	ldd	r19, Z+1	; 0x01
   10bd8:	b9 01       	movw	r22, r18
   10bda:	4d e0       	ldi	r20, 0x0D	; 13
   10bdc:	0e 94 29 de 	call	0x1bc52	; 0x1bc52 <utl_mult16x16_16>
   10be0:	8d a7       	lds	r24, 0x7d
   10be2:	9e a7       	lds	r25, 0x7e
   INS_AXIS_SCALE_Q_FACTOR);

   /*---------------------------------------------------------------------------*
    * Rotate the sample back to its original position.
    *---------------------------------------------------------------------------*/
   i_sum = 0;
   10be4:	19 82       	std	Y+1, r1	; 0x01
   10be6:	1a 82       	std	Y+2, r1	; 0x02
   10be8:	1b 82       	std	Y+3, r1	; 0x03
   10bea:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( as_temp[0], ps_R[0*3 + 0], i_sum, 1);
   10bec:	89 a5       	lds	r24, 0x69
   10bee:	9a a5       	lds	r25, 0x6a
   10bf0:	9e 01       	movw	r18, r28
   10bf2:	27 5b       	subi	r18, 0xB7	; 183
   10bf4:	3f 4f       	sbci	r19, 0xFF	; 255
   10bf6:	f9 01       	movw	r30, r18
   10bf8:	20 81       	ld	r18, Z
   10bfa:	31 81       	ldd	r19, Z+1	; 0x01
   10bfc:	f9 01       	movw	r30, r18
   10bfe:	60 81       	ld	r22, Z
   10c00:	71 81       	ldd	r23, Z+1	; 0x01
   10c02:	29 81       	ldd	r18, Y+1	; 0x01
   10c04:	3a 81       	ldd	r19, Y+2	; 0x02
   10c06:	4b 81       	ldd	r20, Y+3	; 0x03
   10c08:	5c 81       	ldd	r21, Y+4	; 0x04
   10c0a:	01 e0       	ldi	r16, 0x01	; 1
   10c0c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10c10:	dc 01       	movw	r26, r24
   10c12:	cb 01       	movw	r24, r22
   10c14:	89 83       	std	Y+1, r24	; 0x01
   10c16:	9a 83       	std	Y+2, r25	; 0x02
   10c18:	ab 83       	std	Y+3, r26	; 0x03
   10c1a:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[1], ps_R[1*3 + 0], i_sum, 1);
   10c1c:	8b a5       	lds	r24, 0x6b
   10c1e:	9c a5       	lds	r25, 0x6c
   10c20:	9e 01       	movw	r18, r28
   10c22:	27 5b       	subi	r18, 0xB7	; 183
   10c24:	3f 4f       	sbci	r19, 0xFF	; 255
   10c26:	f9 01       	movw	r30, r18
   10c28:	20 81       	ld	r18, Z
   10c2a:	31 81       	ldd	r19, Z+1	; 0x01
   10c2c:	2a 5f       	subi	r18, 0xFA	; 250
   10c2e:	3f 4f       	sbci	r19, 0xFF	; 255
   10c30:	f9 01       	movw	r30, r18
   10c32:	60 81       	ld	r22, Z
   10c34:	71 81       	ldd	r23, Z+1	; 0x01
   10c36:	29 81       	ldd	r18, Y+1	; 0x01
   10c38:	3a 81       	ldd	r19, Y+2	; 0x02
   10c3a:	4b 81       	ldd	r20, Y+3	; 0x03
   10c3c:	5c 81       	ldd	r21, Y+4	; 0x04
   10c3e:	01 e0       	ldi	r16, 0x01	; 1
   10c40:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10c44:	dc 01       	movw	r26, r24
   10c46:	cb 01       	movw	r24, r22
   10c48:	89 83       	std	Y+1, r24	; 0x01
   10c4a:	9a 83       	std	Y+2, r25	; 0x02
   10c4c:	ab 83       	std	Y+3, r26	; 0x03
   10c4e:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[2], ps_R[2*3 + 0], i_sum, 1);
   10c50:	8d a5       	lds	r24, 0x6d
   10c52:	9e a5       	lds	r25, 0x6e
   10c54:	9e 01       	movw	r18, r28
   10c56:	27 5b       	subi	r18, 0xB7	; 183
   10c58:	3f 4f       	sbci	r19, 0xFF	; 255
   10c5a:	f9 01       	movw	r30, r18
   10c5c:	20 81       	ld	r18, Z
   10c5e:	31 81       	ldd	r19, Z+1	; 0x01
   10c60:	24 5f       	subi	r18, 0xF4	; 244
   10c62:	3f 4f       	sbci	r19, 0xFF	; 255
   10c64:	f9 01       	movw	r30, r18
   10c66:	60 81       	ld	r22, Z
   10c68:	71 81       	ldd	r23, Z+1	; 0x01
   10c6a:	29 81       	ldd	r18, Y+1	; 0x01
   10c6c:	3a 81       	ldd	r19, Y+2	; 0x02
   10c6e:	4b 81       	ldd	r20, Y+3	; 0x03
   10c70:	5c 81       	ldd	r21, Y+4	; 0x04
   10c72:	01 e0       	ldi	r16, 0x01	; 1
   10c74:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10c78:	dc 01       	movw	r26, r24
   10c7a:	cb 01       	movw	r24, r22
   10c7c:	89 83       	std	Y+1, r24	; 0x01
   10c7e:	9a 83       	std	Y+2, r25	; 0x02
   10c80:	ab 83       	std	Y+3, r26	; 0x03
   10c82:	bc 83       	std	Y+4, r27	; 0x04
   10c84:	89 81       	ldd	r24, Y+1	; 0x01
   10c86:	9a 81       	ldd	r25, Y+2	; 0x02
   10c88:	ab 81       	ldd	r26, Y+3	; 0x03
   10c8a:	bc 81       	ldd	r27, Y+4	; 0x04
   10c8c:	8f 8b       	std	Y+23, r24	; 0x17
   10c8e:	98 8f       	std	Y+24, r25	; 0x18
   10c90:	a9 8f       	std	Y+25, r26	; 0x19
   10c92:	ba 8f       	std	Y+26, r27	; 0x1a
   10c94:	8e e0       	ldi	r24, 0x0E	; 14
   10c96:	8b 8f       	std	Y+27, r24	; 0x1b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10c98:	81 e0       	ldi	r24, 0x01	; 1
   10c9a:	8c 8f       	std	Y+28, r24	; 0x1c

      if( i_x < 0)
   10c9c:	8f 89       	ldd	r24, Y+23	; 0x17
   10c9e:	98 8d       	ldd	r25, Y+24	; 0x18
   10ca0:	a9 8d       	ldd	r26, Y+25	; 0x19
   10ca2:	ba 8d       	ldd	r27, Y+26	; 0x1a
   10ca4:	bb 23       	and	r27, r27
   10ca6:	8c f4       	brge	.+34     	; 0x10cca <applyCalibration+0x792>
      {
         i_x = -i_x;
   10ca8:	8f 89       	ldd	r24, Y+23	; 0x17
   10caa:	98 8d       	ldd	r25, Y+24	; 0x18
   10cac:	a9 8d       	ldd	r26, Y+25	; 0x19
   10cae:	ba 8d       	ldd	r27, Y+26	; 0x1a
   10cb0:	b0 95       	com	r27
   10cb2:	a0 95       	com	r26
   10cb4:	90 95       	com	r25
   10cb6:	81 95       	neg	r24
   10cb8:	9f 4f       	sbci	r25, 0xFF	; 255
   10cba:	af 4f       	sbci	r26, 0xFF	; 255
   10cbc:	bf 4f       	sbci	r27, 0xFF	; 255
   10cbe:	8f 8b       	std	Y+23, r24	; 0x17
   10cc0:	98 8f       	std	Y+24, r25	; 0x18
   10cc2:	a9 8f       	std	Y+25, r26	; 0x19
   10cc4:	ba 8f       	std	Y+26, r27	; 0x1a
         c_sign = -1;
   10cc6:	8f ef       	ldi	r24, 0xFF	; 255
   10cc8:	8c 8f       	std	Y+28, r24	; 0x1c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10ccc:	89 30       	cpi	r24, 0x09	; 9
   10cce:	3c f1       	brlt	.+78     	; 0x10d1e <applyCalibration+0x7e6>
   10cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10cd2:	81 31       	cpi	r24, 0x11	; 17
   10cd4:	24 f5       	brge	.+72     	; 0x10d1e <applyCalibration+0x7e6>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10cd8:	99 27       	eor	r25, r25
   10cda:	87 fd       	sbrc	r24, 7
   10cdc:	90 95       	com	r25
   10cde:	20 e1       	ldi	r18, 0x10	; 16
   10ce0:	30 e0       	ldi	r19, 0x00	; 0
   10ce2:	28 1b       	sub	r18, r24
   10ce4:	39 0b       	sbc	r19, r25
   10ce6:	8f 89       	ldd	r24, Y+23	; 0x17
   10ce8:	98 8d       	ldd	r25, Y+24	; 0x18
   10cea:	a9 8d       	ldd	r26, Y+25	; 0x19
   10cec:	ba 8d       	ldd	r27, Y+26	; 0x1a
   10cee:	02 2e       	mov	r0, r18
   10cf0:	04 c0       	rjmp	.+8      	; 0x10cfa <applyCalibration+0x7c2>
   10cf2:	88 0f       	add	r24, r24
   10cf4:	99 1f       	adc	r25, r25
   10cf6:	aa 1f       	adc	r26, r26
   10cf8:	bb 1f       	adc	r27, r27
   10cfa:	0a 94       	dec	r0
   10cfc:	d2 f7       	brpl	.-12     	; 0x10cf2 <applyCalibration+0x7ba>
   10cfe:	8f ab       	sts	0x5f, r24
   10d00:	98 af       	sts	0x78, r25
   10d02:	a9 af       	sts	0x79, r26
   10d04:	ba af       	sts	0x7a, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   10d06:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10d08:	8f 3f       	cpi	r24, 0xFF	; 255
   10d0a:	31 f4       	brne	.+12     	; 0x10d18 <applyCalibration+0x7e0>
              return -t_tWord.as_word16[1];
   10d0c:	89 ad       	sts	0x69, r24
   10d0e:	9a ad       	sts	0x6a, r25
   10d10:	90 95       	com	r25
   10d12:	81 95       	neg	r24
   10d14:	9f 4f       	sbci	r25, 0xFF	; 255
   10d16:	23 c0       	rjmp	.+70     	; 0x10d5e <applyCalibration+0x826>
           else
            return t_tWord.as_word16[1];
   10d18:	89 ad       	sts	0x69, r24
   10d1a:	9a ad       	sts	0x6a, r25
   10d1c:	20 c0       	rjmp	.+64     	; 0x10d5e <applyCalibration+0x826>
      }

      i_x = i_x >> c_n;
   10d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10d20:	28 2f       	mov	r18, r24
   10d22:	33 27       	eor	r19, r19
   10d24:	27 fd       	sbrc	r18, 7
   10d26:	30 95       	com	r19
   10d28:	8f 89       	ldd	r24, Y+23	; 0x17
   10d2a:	98 8d       	ldd	r25, Y+24	; 0x18
   10d2c:	a9 8d       	ldd	r26, Y+25	; 0x19
   10d2e:	ba 8d       	ldd	r27, Y+26	; 0x1a
   10d30:	02 2e       	mov	r0, r18
   10d32:	04 c0       	rjmp	.+8      	; 0x10d3c <applyCalibration+0x804>
   10d34:	b5 95       	asr	r27
   10d36:	a7 95       	ror	r26
   10d38:	97 95       	ror	r25
   10d3a:	87 95       	ror	r24
   10d3c:	0a 94       	dec	r0
   10d3e:	d2 f7       	brpl	.-12     	; 0x10d34 <applyCalibration+0x7fc>
   10d40:	8f 8b       	std	Y+23, r24	; 0x17
   10d42:	98 8f       	std	Y+24, r25	; 0x18
   10d44:	a9 8f       	std	Y+25, r26	; 0x19
   10d46:	ba 8f       	std	Y+26, r27	; 0x1a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   10d48:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10d4a:	8f 3f       	cpi	r24, 0xFF	; 255
   10d4c:	31 f4       	brne	.+12     	; 0x10d5a <applyCalibration+0x822>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10d4e:	8f 89       	ldd	r24, Y+23	; 0x17
   10d50:	98 8d       	ldd	r25, Y+24	; 0x18
   10d52:	90 95       	com	r25
   10d54:	81 95       	neg	r24
   10d56:	9f 4f       	sbci	r25, 0xFF	; 255
   10d58:	02 c0       	rjmp	.+4      	; 0x10d5e <applyCalibration+0x826>
       else
           return (int16_t)i_x;
   10d5a:	8f 89       	ldd	r24, Y+23	; 0x17
   10d5c:	98 8d       	ldd	r25, Y+24	; 0x18
   ps_smp[0] = utl_rShft32_16( i_sum, 14);
   10d5e:	9c 01       	movw	r18, r24
   10d60:	ce 01       	movw	r24, r28
   10d62:	89 5b       	subi	r24, 0xB9	; 185
   10d64:	9f 4f       	sbci	r25, 0xFF	; 255
   10d66:	fc 01       	movw	r30, r24
   10d68:	80 81       	ld	r24, Z
   10d6a:	91 81       	ldd	r25, Z+1	; 0x01
   10d6c:	fc 01       	movw	r30, r24
   10d6e:	20 83       	st	Z, r18
   10d70:	31 83       	std	Z+1, r19	; 0x01

   i_sum = 0;
   10d72:	19 82       	std	Y+1, r1	; 0x01
   10d74:	1a 82       	std	Y+2, r1	; 0x02
   10d76:	1b 82       	std	Y+3, r1	; 0x03
   10d78:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( as_temp[0], ps_R[0*3 + 1], i_sum, 1);
   10d7a:	89 a5       	lds	r24, 0x69
   10d7c:	9a a5       	lds	r25, 0x6a
   10d7e:	9e 01       	movw	r18, r28
   10d80:	27 5b       	subi	r18, 0xB7	; 183
   10d82:	3f 4f       	sbci	r19, 0xFF	; 255
   10d84:	f9 01       	movw	r30, r18
   10d86:	20 81       	ld	r18, Z
   10d88:	31 81       	ldd	r19, Z+1	; 0x01
   10d8a:	2e 5f       	subi	r18, 0xFE	; 254
   10d8c:	3f 4f       	sbci	r19, 0xFF	; 255
   10d8e:	f9 01       	movw	r30, r18
   10d90:	60 81       	ld	r22, Z
   10d92:	71 81       	ldd	r23, Z+1	; 0x01
   10d94:	29 81       	ldd	r18, Y+1	; 0x01
   10d96:	3a 81       	ldd	r19, Y+2	; 0x02
   10d98:	4b 81       	ldd	r20, Y+3	; 0x03
   10d9a:	5c 81       	ldd	r21, Y+4	; 0x04
   10d9c:	01 e0       	ldi	r16, 0x01	; 1
   10d9e:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10da2:	dc 01       	movw	r26, r24
   10da4:	cb 01       	movw	r24, r22
   10da6:	89 83       	std	Y+1, r24	; 0x01
   10da8:	9a 83       	std	Y+2, r25	; 0x02
   10daa:	ab 83       	std	Y+3, r26	; 0x03
   10dac:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[1], ps_R[1*3 + 1], i_sum, 1);
   10dae:	8b a5       	lds	r24, 0x6b
   10db0:	9c a5       	lds	r25, 0x6c
   10db2:	9e 01       	movw	r18, r28
   10db4:	27 5b       	subi	r18, 0xB7	; 183
   10db6:	3f 4f       	sbci	r19, 0xFF	; 255
   10db8:	f9 01       	movw	r30, r18
   10dba:	20 81       	ld	r18, Z
   10dbc:	31 81       	ldd	r19, Z+1	; 0x01
   10dbe:	28 5f       	subi	r18, 0xF8	; 248
   10dc0:	3f 4f       	sbci	r19, 0xFF	; 255
   10dc2:	f9 01       	movw	r30, r18
   10dc4:	60 81       	ld	r22, Z
   10dc6:	71 81       	ldd	r23, Z+1	; 0x01
   10dc8:	29 81       	ldd	r18, Y+1	; 0x01
   10dca:	3a 81       	ldd	r19, Y+2	; 0x02
   10dcc:	4b 81       	ldd	r20, Y+3	; 0x03
   10dce:	5c 81       	ldd	r21, Y+4	; 0x04
   10dd0:	01 e0       	ldi	r16, 0x01	; 1
   10dd2:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10dd6:	dc 01       	movw	r26, r24
   10dd8:	cb 01       	movw	r24, r22
   10dda:	89 83       	std	Y+1, r24	; 0x01
   10ddc:	9a 83       	std	Y+2, r25	; 0x02
   10dde:	ab 83       	std	Y+3, r26	; 0x03
   10de0:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[2], ps_R[2*3 + 1], i_sum, 1);
   10de2:	8d a5       	lds	r24, 0x6d
   10de4:	9e a5       	lds	r25, 0x6e
   10de6:	9e 01       	movw	r18, r28
   10de8:	27 5b       	subi	r18, 0xB7	; 183
   10dea:	3f 4f       	sbci	r19, 0xFF	; 255
   10dec:	f9 01       	movw	r30, r18
   10dee:	20 81       	ld	r18, Z
   10df0:	31 81       	ldd	r19, Z+1	; 0x01
   10df2:	22 5f       	subi	r18, 0xF2	; 242
   10df4:	3f 4f       	sbci	r19, 0xFF	; 255
   10df6:	f9 01       	movw	r30, r18
   10df8:	60 81       	ld	r22, Z
   10dfa:	71 81       	ldd	r23, Z+1	; 0x01
   10dfc:	29 81       	ldd	r18, Y+1	; 0x01
   10dfe:	3a 81       	ldd	r19, Y+2	; 0x02
   10e00:	4b 81       	ldd	r20, Y+3	; 0x03
   10e02:	5c 81       	ldd	r21, Y+4	; 0x04
   10e04:	01 e0       	ldi	r16, 0x01	; 1
   10e06:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10e0a:	dc 01       	movw	r26, r24
   10e0c:	cb 01       	movw	r24, r22
   10e0e:	89 83       	std	Y+1, r24	; 0x01
   10e10:	9a 83       	std	Y+2, r25	; 0x02
   10e12:	ab 83       	std	Y+3, r26	; 0x03
   10e14:	bc 83       	std	Y+4, r27	; 0x04
   ps_smp[1] = utl_rShft32_16( i_sum, 14);
   10e16:	ce 01       	movw	r24, r28
   10e18:	89 5b       	subi	r24, 0xB9	; 185
   10e1a:	9f 4f       	sbci	r25, 0xFF	; 255
   10e1c:	fc 01       	movw	r30, r24
   10e1e:	80 81       	ld	r24, Z
   10e20:	91 81       	ldd	r25, Z+1	; 0x01
   10e22:	9c 01       	movw	r18, r24
   10e24:	2e 5f       	subi	r18, 0xFE	; 254
   10e26:	3f 4f       	sbci	r19, 0xFF	; 255
   10e28:	89 81       	ldd	r24, Y+1	; 0x01
   10e2a:	9a 81       	ldd	r25, Y+2	; 0x02
   10e2c:	ab 81       	ldd	r26, Y+3	; 0x03
   10e2e:	bc 81       	ldd	r27, Y+4	; 0x04
   10e30:	8d 8f       	std	Y+29, r24	; 0x1d
   10e32:	9e 8f       	std	Y+30, r25	; 0x1e
   10e34:	af 8f       	std	Y+31, r26	; 0x1f
   10e36:	b8 a3       	lds	r27, 0x58
   10e38:	8e e0       	ldi	r24, 0x0E	; 14
   10e3a:	89 a3       	lds	r24, 0x59
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10e3c:	81 e0       	ldi	r24, 0x01	; 1
   10e3e:	8a a3       	lds	r24, 0x5a

      if( i_x < 0)
   10e40:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10e42:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10e44:	af 8d       	ldd	r26, Y+31	; 0x1f
   10e46:	b8 a1       	lds	r27, 0x48
   10e48:	bb 23       	and	r27, r27
   10e4a:	8c f4       	brge	.+34     	; 0x10e6e <applyCalibration+0x936>
      {
         i_x = -i_x;
   10e4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10e4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10e50:	af 8d       	ldd	r26, Y+31	; 0x1f
   10e52:	b8 a1       	lds	r27, 0x48
   10e54:	b0 95       	com	r27
   10e56:	a0 95       	com	r26
   10e58:	90 95       	com	r25
   10e5a:	81 95       	neg	r24
   10e5c:	9f 4f       	sbci	r25, 0xFF	; 255
   10e5e:	af 4f       	sbci	r26, 0xFF	; 255
   10e60:	bf 4f       	sbci	r27, 0xFF	; 255
   10e62:	8d 8f       	std	Y+29, r24	; 0x1d
   10e64:	9e 8f       	std	Y+30, r25	; 0x1e
   10e66:	af 8f       	std	Y+31, r26	; 0x1f
   10e68:	b8 a3       	lds	r27, 0x58
         c_sign = -1;
   10e6a:	8f ef       	ldi	r24, 0xFF	; 255
   10e6c:	8a a3       	lds	r24, 0x5a
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   10e6e:	89 a1       	lds	r24, 0x49
   10e70:	89 30       	cpi	r24, 0x09	; 9
   10e72:	3c f1       	brlt	.+78     	; 0x10ec2 <applyCalibration+0x98a>
   10e74:	89 a1       	lds	r24, 0x49
   10e76:	81 31       	cpi	r24, 0x11	; 17
   10e78:	24 f5       	brge	.+72     	; 0x10ec2 <applyCalibration+0x98a>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   10e7a:	89 a1       	lds	r24, 0x49
   10e7c:	99 27       	eor	r25, r25
   10e7e:	87 fd       	sbrc	r24, 7
   10e80:	90 95       	com	r25
   10e82:	40 e1       	ldi	r20, 0x10	; 16
   10e84:	50 e0       	ldi	r21, 0x00	; 0
   10e86:	48 1b       	sub	r20, r24
   10e88:	59 0b       	sbc	r21, r25
   10e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10e8e:	af 8d       	ldd	r26, Y+31	; 0x1f
   10e90:	b8 a1       	lds	r27, 0x48
   10e92:	04 2e       	mov	r0, r20
   10e94:	04 c0       	rjmp	.+8      	; 0x10e9e <applyCalibration+0x966>
   10e96:	88 0f       	add	r24, r24
   10e98:	99 1f       	adc	r25, r25
   10e9a:	aa 1f       	adc	r26, r26
   10e9c:	bb 1f       	adc	r27, r27
   10e9e:	0a 94       	dec	r0
   10ea0:	d2 f7       	brpl	.-12     	; 0x10e96 <applyCalibration+0x95e>
   10ea2:	8b ab       	sts	0x5b, r24
   10ea4:	9c ab       	sts	0x5c, r25
   10ea6:	ad ab       	sts	0x5d, r26
   10ea8:	be ab       	sts	0x5e, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   10eaa:	8a a1       	lds	r24, 0x4a
   10eac:	8f 3f       	cpi	r24, 0xFF	; 255
   10eae:	31 f4       	brne	.+12     	; 0x10ebc <applyCalibration+0x984>
              return -t_tWord.as_word16[1];
   10eb0:	8d a9       	sts	0x4d, r24
   10eb2:	9e a9       	sts	0x4e, r25
   10eb4:	90 95       	com	r25
   10eb6:	81 95       	neg	r24
   10eb8:	9f 4f       	sbci	r25, 0xFF	; 255
   10eba:	23 c0       	rjmp	.+70     	; 0x10f02 <applyCalibration+0x9ca>
           else
            return t_tWord.as_word16[1];
   10ebc:	8d a9       	sts	0x4d, r24
   10ebe:	9e a9       	sts	0x4e, r25
   10ec0:	20 c0       	rjmp	.+64     	; 0x10f02 <applyCalibration+0x9ca>
      }

      i_x = i_x >> c_n;
   10ec2:	89 a1       	lds	r24, 0x49
   10ec4:	48 2f       	mov	r20, r24
   10ec6:	55 27       	eor	r21, r21
   10ec8:	47 fd       	sbrc	r20, 7
   10eca:	50 95       	com	r21
   10ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10ece:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10ed0:	af 8d       	ldd	r26, Y+31	; 0x1f
   10ed2:	b8 a1       	lds	r27, 0x48
   10ed4:	04 2e       	mov	r0, r20
   10ed6:	04 c0       	rjmp	.+8      	; 0x10ee0 <applyCalibration+0x9a8>
   10ed8:	b5 95       	asr	r27
   10eda:	a7 95       	ror	r26
   10edc:	97 95       	ror	r25
   10ede:	87 95       	ror	r24
   10ee0:	0a 94       	dec	r0
   10ee2:	d2 f7       	brpl	.-12     	; 0x10ed8 <applyCalibration+0x9a0>
   10ee4:	8d 8f       	std	Y+29, r24	; 0x1d
   10ee6:	9e 8f       	std	Y+30, r25	; 0x1e
   10ee8:	af 8f       	std	Y+31, r26	; 0x1f
   10eea:	b8 a3       	lds	r27, 0x58
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   10eec:	8a a1       	lds	r24, 0x4a
   10eee:	8f 3f       	cpi	r24, 0xFF	; 255
   10ef0:	31 f4       	brne	.+12     	; 0x10efe <applyCalibration+0x9c6>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   10ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10ef4:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10ef6:	90 95       	com	r25
   10ef8:	81 95       	neg	r24
   10efa:	9f 4f       	sbci	r25, 0xFF	; 255
   10efc:	02 c0       	rjmp	.+4      	; 0x10f02 <applyCalibration+0x9ca>
       else
           return (int16_t)i_x;
   10efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10f02:	f9 01       	movw	r30, r18
   10f04:	80 83       	st	Z, r24
   10f06:	91 83       	std	Z+1, r25	; 0x01

   i_sum = 0;
   10f08:	19 82       	std	Y+1, r1	; 0x01
   10f0a:	1a 82       	std	Y+2, r1	; 0x02
   10f0c:	1b 82       	std	Y+3, r1	; 0x03
   10f0e:	1c 82       	std	Y+4, r1	; 0x04
   i_sum = utl_mac16x16_32( as_temp[0], ps_R[0*3 + 2], i_sum, 1);
   10f10:	89 a5       	lds	r24, 0x69
   10f12:	9a a5       	lds	r25, 0x6a
   10f14:	9e 01       	movw	r18, r28
   10f16:	27 5b       	subi	r18, 0xB7	; 183
   10f18:	3f 4f       	sbci	r19, 0xFF	; 255
   10f1a:	f9 01       	movw	r30, r18
   10f1c:	20 81       	ld	r18, Z
   10f1e:	31 81       	ldd	r19, Z+1	; 0x01
   10f20:	2c 5f       	subi	r18, 0xFC	; 252
   10f22:	3f 4f       	sbci	r19, 0xFF	; 255
   10f24:	f9 01       	movw	r30, r18
   10f26:	60 81       	ld	r22, Z
   10f28:	71 81       	ldd	r23, Z+1	; 0x01
   10f2a:	29 81       	ldd	r18, Y+1	; 0x01
   10f2c:	3a 81       	ldd	r19, Y+2	; 0x02
   10f2e:	4b 81       	ldd	r20, Y+3	; 0x03
   10f30:	5c 81       	ldd	r21, Y+4	; 0x04
   10f32:	01 e0       	ldi	r16, 0x01	; 1
   10f34:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10f38:	dc 01       	movw	r26, r24
   10f3a:	cb 01       	movw	r24, r22
   10f3c:	89 83       	std	Y+1, r24	; 0x01
   10f3e:	9a 83       	std	Y+2, r25	; 0x02
   10f40:	ab 83       	std	Y+3, r26	; 0x03
   10f42:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[1], ps_R[1*3 + 2], i_sum, 1);
   10f44:	8b a5       	lds	r24, 0x6b
   10f46:	9c a5       	lds	r25, 0x6c
   10f48:	9e 01       	movw	r18, r28
   10f4a:	27 5b       	subi	r18, 0xB7	; 183
   10f4c:	3f 4f       	sbci	r19, 0xFF	; 255
   10f4e:	f9 01       	movw	r30, r18
   10f50:	20 81       	ld	r18, Z
   10f52:	31 81       	ldd	r19, Z+1	; 0x01
   10f54:	26 5f       	subi	r18, 0xF6	; 246
   10f56:	3f 4f       	sbci	r19, 0xFF	; 255
   10f58:	f9 01       	movw	r30, r18
   10f5a:	60 81       	ld	r22, Z
   10f5c:	71 81       	ldd	r23, Z+1	; 0x01
   10f5e:	29 81       	ldd	r18, Y+1	; 0x01
   10f60:	3a 81       	ldd	r19, Y+2	; 0x02
   10f62:	4b 81       	ldd	r20, Y+3	; 0x03
   10f64:	5c 81       	ldd	r21, Y+4	; 0x04
   10f66:	01 e0       	ldi	r16, 0x01	; 1
   10f68:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10f6c:	dc 01       	movw	r26, r24
   10f6e:	cb 01       	movw	r24, r22
   10f70:	89 83       	std	Y+1, r24	; 0x01
   10f72:	9a 83       	std	Y+2, r25	; 0x02
   10f74:	ab 83       	std	Y+3, r26	; 0x03
   10f76:	bc 83       	std	Y+4, r27	; 0x04
   i_sum = utl_mac16x16_32( as_temp[2], ps_R[2*3 + 2], i_sum, 1);
   10f78:	8d a5       	lds	r24, 0x6d
   10f7a:	9e a5       	lds	r25, 0x6e
   10f7c:	9e 01       	movw	r18, r28
   10f7e:	27 5b       	subi	r18, 0xB7	; 183
   10f80:	3f 4f       	sbci	r19, 0xFF	; 255
   10f82:	f9 01       	movw	r30, r18
   10f84:	20 81       	ld	r18, Z
   10f86:	31 81       	ldd	r19, Z+1	; 0x01
   10f88:	20 5f       	subi	r18, 0xF0	; 240
   10f8a:	3f 4f       	sbci	r19, 0xFF	; 255
   10f8c:	f9 01       	movw	r30, r18
   10f8e:	60 81       	ld	r22, Z
   10f90:	71 81       	ldd	r23, Z+1	; 0x01
   10f92:	29 81       	ldd	r18, Y+1	; 0x01
   10f94:	3a 81       	ldd	r19, Y+2	; 0x02
   10f96:	4b 81       	ldd	r20, Y+3	; 0x03
   10f98:	5c 81       	ldd	r21, Y+4	; 0x04
   10f9a:	01 e0       	ldi	r16, 0x01	; 1
   10f9c:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   10fa0:	dc 01       	movw	r26, r24
   10fa2:	cb 01       	movw	r24, r22
   10fa4:	89 83       	std	Y+1, r24	; 0x01
   10fa6:	9a 83       	std	Y+2, r25	; 0x02
   10fa8:	ab 83       	std	Y+3, r26	; 0x03
   10faa:	bc 83       	std	Y+4, r27	; 0x04
   ps_smp[2] = utl_rShft32_16( i_sum, 14);
   10fac:	ce 01       	movw	r24, r28
   10fae:	89 5b       	subi	r24, 0xB9	; 185
   10fb0:	9f 4f       	sbci	r25, 0xFF	; 255
   10fb2:	fc 01       	movw	r30, r24
   10fb4:	80 81       	ld	r24, Z
   10fb6:	91 81       	ldd	r25, Z+1	; 0x01
   10fb8:	9c 01       	movw	r18, r24
   10fba:	2c 5f       	subi	r18, 0xFC	; 252
   10fbc:	3f 4f       	sbci	r19, 0xFF	; 255
   10fbe:	89 81       	ldd	r24, Y+1	; 0x01
   10fc0:	9a 81       	ldd	r25, Y+2	; 0x02
   10fc2:	ab 81       	ldd	r26, Y+3	; 0x03
   10fc4:	bc 81       	ldd	r27, Y+4	; 0x04
   10fc6:	8b a3       	lds	r24, 0x5b
   10fc8:	9c a3       	lds	r25, 0x5c
   10fca:	ad a3       	lds	r26, 0x5d
   10fcc:	be a3       	lds	r27, 0x5e
   10fce:	8e e0       	ldi	r24, 0x0E	; 14
   10fd0:	8f a3       	lds	r24, 0x5f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   10fd2:	81 e0       	ldi	r24, 0x01	; 1
   10fd4:	88 a7       	lds	r24, 0x78

      if( i_x < 0)
   10fd6:	8b a1       	lds	r24, 0x4b
   10fd8:	9c a1       	lds	r25, 0x4c
   10fda:	ad a1       	lds	r26, 0x4d
   10fdc:	be a1       	lds	r27, 0x4e
   10fde:	bb 23       	and	r27, r27
   10fe0:	8c f4       	brge	.+34     	; 0x11004 <applyCalibration+0xacc>
      {
         i_x = -i_x;
   10fe2:	8b a1       	lds	r24, 0x4b
   10fe4:	9c a1       	lds	r25, 0x4c
   10fe6:	ad a1       	lds	r26, 0x4d
   10fe8:	be a1       	lds	r27, 0x4e
   10fea:	b0 95       	com	r27
   10fec:	a0 95       	com	r26
   10fee:	90 95       	com	r25
   10ff0:	81 95       	neg	r24
   10ff2:	9f 4f       	sbci	r25, 0xFF	; 255
   10ff4:	af 4f       	sbci	r26, 0xFF	; 255
   10ff6:	bf 4f       	sbci	r27, 0xFF	; 255
   10ff8:	8b a3       	lds	r24, 0x5b
   10ffa:	9c a3       	lds	r25, 0x5c
   10ffc:	ad a3       	lds	r26, 0x5d
   10ffe:	be a3       	lds	r27, 0x5e
         c_sign = -1;
   11000:	8f ef       	ldi	r24, 0xFF	; 255
   11002:	88 a7       	lds	r24, 0x78
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   11004:	8f a1       	lds	r24, 0x4f
   11006:	89 30       	cpi	r24, 0x09	; 9
   11008:	3c f1       	brlt	.+78     	; 0x11058 <applyCalibration+0xb20>
   1100a:	8f a1       	lds	r24, 0x4f
   1100c:	81 31       	cpi	r24, 0x11	; 17
   1100e:	24 f5       	brge	.+72     	; 0x11058 <applyCalibration+0xb20>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   11010:	8f a1       	lds	r24, 0x4f
   11012:	99 27       	eor	r25, r25
   11014:	87 fd       	sbrc	r24, 7
   11016:	90 95       	com	r25
   11018:	40 e1       	ldi	r20, 0x10	; 16
   1101a:	50 e0       	ldi	r21, 0x00	; 0
   1101c:	48 1b       	sub	r20, r24
   1101e:	59 0b       	sbc	r21, r25
   11020:	8b a1       	lds	r24, 0x4b
   11022:	9c a1       	lds	r25, 0x4c
   11024:	ad a1       	lds	r26, 0x4d
   11026:	be a1       	lds	r27, 0x4e
   11028:	04 2e       	mov	r0, r20
   1102a:	04 c0       	rjmp	.+8      	; 0x11034 <applyCalibration+0xafc>
   1102c:	88 0f       	add	r24, r24
   1102e:	99 1f       	adc	r25, r25
   11030:	aa 1f       	adc	r26, r26
   11032:	bb 1f       	adc	r27, r27
   11034:	0a 94       	dec	r0
   11036:	d2 f7       	brpl	.-12     	; 0x1102c <applyCalibration+0xaf4>
   11038:	8f a7       	lds	r24, 0x7f
   1103a:	98 ab       	sts	0x58, r25
   1103c:	a9 ab       	sts	0x59, r26
   1103e:	ba ab       	sts	0x5a, r27

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   11040:	88 a5       	lds	r24, 0x68
   11042:	8f 3f       	cpi	r24, 0xFF	; 255
   11044:	31 f4       	brne	.+12     	; 0x11052 <applyCalibration+0xb1a>
              return -t_tWord.as_word16[1];
   11046:	89 a9       	sts	0x49, r24
   11048:	9a a9       	sts	0x4a, r25
   1104a:	90 95       	com	r25
   1104c:	81 95       	neg	r24
   1104e:	9f 4f       	sbci	r25, 0xFF	; 255
   11050:	23 c0       	rjmp	.+70     	; 0x11098 <applyCalibration+0xb60>
           else
            return t_tWord.as_word16[1];
   11052:	89 a9       	sts	0x49, r24
   11054:	9a a9       	sts	0x4a, r25
   11056:	20 c0       	rjmp	.+64     	; 0x11098 <applyCalibration+0xb60>
      }

      i_x = i_x >> c_n;
   11058:	8f a1       	lds	r24, 0x4f
   1105a:	48 2f       	mov	r20, r24
   1105c:	55 27       	eor	r21, r21
   1105e:	47 fd       	sbrc	r20, 7
   11060:	50 95       	com	r21
   11062:	8b a1       	lds	r24, 0x4b
   11064:	9c a1       	lds	r25, 0x4c
   11066:	ad a1       	lds	r26, 0x4d
   11068:	be a1       	lds	r27, 0x4e
   1106a:	04 2e       	mov	r0, r20
   1106c:	04 c0       	rjmp	.+8      	; 0x11076 <applyCalibration+0xb3e>
   1106e:	b5 95       	asr	r27
   11070:	a7 95       	ror	r26
   11072:	97 95       	ror	r25
   11074:	87 95       	ror	r24
   11076:	0a 94       	dec	r0
   11078:	d2 f7       	brpl	.-12     	; 0x1106e <applyCalibration+0xb36>
   1107a:	8b a3       	lds	r24, 0x5b
   1107c:	9c a3       	lds	r25, 0x5c
   1107e:	ad a3       	lds	r26, 0x5d
   11080:	be a3       	lds	r27, 0x5e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   11082:	88 a5       	lds	r24, 0x68
   11084:	8f 3f       	cpi	r24, 0xFF	; 255
   11086:	31 f4       	brne	.+12     	; 0x11094 <applyCalibration+0xb5c>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   11088:	8b a1       	lds	r24, 0x4b
   1108a:	9c a1       	lds	r25, 0x4c
   1108c:	90 95       	com	r25
   1108e:	81 95       	neg	r24
   11090:	9f 4f       	sbci	r25, 0xFF	; 255
   11092:	02 c0       	rjmp	.+4      	; 0x11098 <applyCalibration+0xb60>
       else
           return (int16_t)i_x;
   11094:	8b a1       	lds	r24, 0x4b
   11096:	9c a1       	lds	r25, 0x4c
   11098:	f9 01       	movw	r30, r18
   1109a:	80 83       	st	Z, r24
   1109c:	91 83       	std	Z+1, r25	; 0x01

}/*End applyCalibration*/
   1109e:	c2 5b       	subi	r28, 0xB2	; 178
   110a0:	df 4f       	sbci	r29, 0xFF	; 255
   110a2:	cd bf       	out	0x3d, r28	; 61
   110a4:	de bf       	out	0x3e, r29	; 62
   110a6:	df 91       	pop	r29
   110a8:	cf 91       	pop	r28
   110aa:	0f 91       	pop	r16
   110ac:	08 95       	ret

000110ae <checkForTrackingErrors>:

static inline void checkForTrackingErrors( void)
{
   110ae:	ef 92       	push	r14
   110b0:	ff 92       	push	r15
   110b2:	0f 93       	push	r16
   110b4:	1f 93       	push	r17
   110b6:	cf 93       	push	r28
   110b8:	df 93       	push	r29
   110ba:	0f 92       	push	r0
   110bc:	cd b7       	in	r28, 0x3d	; 61
   110be:	de b7       	in	r29, 0x3e	; 62
   uint8_t c_index;

   gt_insDev.b_lossOfLock = false;
   110c0:	10 92 f7 2a 	sts	0x2AF7, r1

   if( gt_insDev.c_initialLockCount == INS_KALMAN_LOCK_WAIT)
   110c4:	80 91 fa 2a 	lds	r24, 0x2AFA
   110c8:	84 36       	cpi	r24, 0x64	; 100
   110ca:	09 f0       	breq	.+2      	; 0x110ce <checkForTrackingErrors+0x20>
   110cc:	e7 c0       	rjmp	.+462    	; 0x1129c <checkForTrackingErrors+0x1ee>
   {

      if( gt_insDev.as_res[0] > (((int32_t)(gt_insDev.ai_avrRes[0] >>
   110ce:	80 91 ed 2a 	lds	r24, 0x2AED
   110d2:	90 91 ee 2a 	lds	r25, 0x2AEE
   110d6:	7c 01       	movw	r14, r24
   110d8:	00 27       	eor	r16, r16
   110da:	f7 fc       	sbrc	r15, 7
   110dc:	00 95       	com	r16
   110de:	10 2f       	mov	r17, r16
   110e0:	80 91 e1 2a 	lds	r24, 0x2AE1
   110e4:	90 91 e2 2a 	lds	r25, 0x2AE2
   110e8:	a0 91 e3 2a 	lds	r26, 0x2AE3
   110ec:	b0 91 e4 2a 	lds	r27, 0x2AE4
   110f0:	9c 01       	movw	r18, r24
   110f2:	ad 01       	movw	r20, r26
   110f4:	68 94       	set
   110f6:	13 f8       	bld	r1, 3
   110f8:	55 95       	asr	r21
   110fa:	47 95       	ror	r20
   110fc:	37 95       	ror	r19
   110fe:	27 95       	ror	r18
   11100:	16 94       	lsr	r1
   11102:	d1 f7       	brne	.-12     	; 0x110f8 <checkForTrackingErrors+0x4a>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
   11104:	da 01       	movw	r26, r20
   11106:	c9 01       	movw	r24, r18
   11108:	88 0f       	add	r24, r24
   1110a:	99 1f       	adc	r25, r25
   1110c:	aa 1f       	adc	r26, r26
   1110e:	bb 1f       	adc	r27, r27
   11110:	88 0f       	add	r24, r24
   11112:	99 1f       	adc	r25, r25
   11114:	aa 1f       	adc	r26, r26
   11116:	bb 1f       	adc	r27, r27
   11118:	82 0f       	add	r24, r18
   1111a:	93 1f       	adc	r25, r19
   1111c:	a4 1f       	adc	r26, r20
   1111e:	b5 1f       	adc	r27, r21
   gt_insDev.b_lossOfLock = false;

   if( gt_insDev.c_initialLockCount == INS_KALMAN_LOCK_WAIT)
   {

      if( gt_insDev.as_res[0] > (((int32_t)(gt_insDev.ai_avrRes[0] >>
   11120:	8e 15       	cp	r24, r14
   11122:	9f 05       	cpc	r25, r15
   11124:	a0 07       	cpc	r26, r16
   11126:	b1 07       	cpc	r27, r17
   11128:	24 f4       	brge	.+8      	; 0x11132 <checkForTrackingErrors+0x84>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
         gt_insDev.b_rollMeasError = true;
   1112a:	81 e0       	ldi	r24, 0x01	; 1
   1112c:	80 93 f4 2a 	sts	0x2AF4, r24
   11130:	02 c0       	rjmp	.+4      	; 0x11136 <checkForTrackingErrors+0x88>
      else
         gt_insDev.b_rollMeasError = false;
   11132:	10 92 f4 2a 	sts	0x2AF4, r1

      if( gt_insDev.as_res[1] > (((int32_t)(gt_insDev.ai_avrRes[1] >>
   11136:	80 91 ef 2a 	lds	r24, 0x2AEF
   1113a:	90 91 f0 2a 	lds	r25, 0x2AF0
   1113e:	7c 01       	movw	r14, r24
   11140:	00 27       	eor	r16, r16
   11142:	f7 fc       	sbrc	r15, 7
   11144:	00 95       	com	r16
   11146:	10 2f       	mov	r17, r16
   11148:	80 91 e5 2a 	lds	r24, 0x2AE5
   1114c:	90 91 e6 2a 	lds	r25, 0x2AE6
   11150:	a0 91 e7 2a 	lds	r26, 0x2AE7
   11154:	b0 91 e8 2a 	lds	r27, 0x2AE8
   11158:	9c 01       	movw	r18, r24
   1115a:	ad 01       	movw	r20, r26
   1115c:	68 94       	set
   1115e:	13 f8       	bld	r1, 3
   11160:	55 95       	asr	r21
   11162:	47 95       	ror	r20
   11164:	37 95       	ror	r19
   11166:	27 95       	ror	r18
   11168:	16 94       	lsr	r1
   1116a:	d1 f7       	brne	.-12     	; 0x11160 <checkForTrackingErrors+0xb2>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
   1116c:	da 01       	movw	r26, r20
   1116e:	c9 01       	movw	r24, r18
   11170:	88 0f       	add	r24, r24
   11172:	99 1f       	adc	r25, r25
   11174:	aa 1f       	adc	r26, r26
   11176:	bb 1f       	adc	r27, r27
   11178:	88 0f       	add	r24, r24
   1117a:	99 1f       	adc	r25, r25
   1117c:	aa 1f       	adc	r26, r26
   1117e:	bb 1f       	adc	r27, r27
   11180:	82 0f       	add	r24, r18
   11182:	93 1f       	adc	r25, r19
   11184:	a4 1f       	adc	r26, r20
   11186:	b5 1f       	adc	r27, r21
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
         gt_insDev.b_rollMeasError = true;
      else
         gt_insDev.b_rollMeasError = false;

      if( gt_insDev.as_res[1] > (((int32_t)(gt_insDev.ai_avrRes[1] >>
   11188:	8e 15       	cp	r24, r14
   1118a:	9f 05       	cpc	r25, r15
   1118c:	a0 07       	cpc	r26, r16
   1118e:	b1 07       	cpc	r27, r17
   11190:	24 f4       	brge	.+8      	; 0x1119a <checkForTrackingErrors+0xec>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
         gt_insDev.b_pitchMeasError = true;
   11192:	81 e0       	ldi	r24, 0x01	; 1
   11194:	80 93 f5 2a 	sts	0x2AF5, r24
   11198:	02 c0       	rjmp	.+4      	; 0x1119e <checkForTrackingErrors+0xf0>
      else
         gt_insDev.b_pitchMeasError = false;
   1119a:	10 92 f5 2a 	sts	0x2AF5, r1

      if( gt_insDev.as_res[2] > (((int32_t)(gt_insDev.ai_avrRes[2] >>
   1119e:	80 91 f1 2a 	lds	r24, 0x2AF1
   111a2:	90 91 f2 2a 	lds	r25, 0x2AF2
   111a6:	7c 01       	movw	r14, r24
   111a8:	00 27       	eor	r16, r16
   111aa:	f7 fc       	sbrc	r15, 7
   111ac:	00 95       	com	r16
   111ae:	10 2f       	mov	r17, r16
   111b0:	80 91 e9 2a 	lds	r24, 0x2AE9
   111b4:	90 91 ea 2a 	lds	r25, 0x2AEA
   111b8:	a0 91 eb 2a 	lds	r26, 0x2AEB
   111bc:	b0 91 ec 2a 	lds	r27, 0x2AEC
   111c0:	9c 01       	movw	r18, r24
   111c2:	ad 01       	movw	r20, r26
   111c4:	68 94       	set
   111c6:	13 f8       	bld	r1, 3
   111c8:	55 95       	asr	r21
   111ca:	47 95       	ror	r20
   111cc:	37 95       	ror	r19
   111ce:	27 95       	ror	r18
   111d0:	16 94       	lsr	r1
   111d2:	d1 f7       	brne	.-12     	; 0x111c8 <checkForTrackingErrors+0x11a>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
   111d4:	da 01       	movw	r26, r20
   111d6:	c9 01       	movw	r24, r18
   111d8:	88 0f       	add	r24, r24
   111da:	99 1f       	adc	r25, r25
   111dc:	aa 1f       	adc	r26, r26
   111de:	bb 1f       	adc	r27, r27
   111e0:	88 0f       	add	r24, r24
   111e2:	99 1f       	adc	r25, r25
   111e4:	aa 1f       	adc	r26, r26
   111e6:	bb 1f       	adc	r27, r27
   111e8:	82 0f       	add	r24, r18
   111ea:	93 1f       	adc	r25, r19
   111ec:	a4 1f       	adc	r26, r20
   111ee:	b5 1f       	adc	r27, r21
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
         gt_insDev.b_pitchMeasError = true;
      else
         gt_insDev.b_pitchMeasError = false;

      if( gt_insDev.as_res[2] > (((int32_t)(gt_insDev.ai_avrRes[2] >>
   111f0:	8e 15       	cp	r24, r14
   111f2:	9f 05       	cpc	r25, r15
   111f4:	a0 07       	cpc	r26, r16
   111f6:	b1 07       	cpc	r27, r17
   111f8:	24 f4       	brge	.+8      	; 0x11202 <checkForTrackingErrors+0x154>
          INS_ATT_RES_VAR_EXTRA_RES))*(int32_t)INS_RES_MEAS_ERROR_SCALER))
         gt_insDev.b_yawMeasError = true;
   111fa:	81 e0       	ldi	r24, 0x01	; 1
   111fc:	80 93 f6 2a 	sts	0x2AF6, r24
   11200:	02 c0       	rjmp	.+4      	; 0x11206 <checkForTrackingErrors+0x158>
      else
         gt_insDev.b_yawMeasError = false;
   11202:	10 92 f6 2a 	sts	0x2AF6, r1

      /*-------------------------------------------------------------------------*
       * Has there been a measurement error for an extended period of time, if so
       * then declare loss-of-lock.
       *-------------------------------------------------------------------------*/
      if( gt_insDev.b_rollMeasError ||
   11206:	80 91 f4 2a 	lds	r24, 0x2AF4
   1120a:	88 23       	and	r24, r24
   1120c:	41 f4       	brne	.+16     	; 0x1121e <checkForTrackingErrors+0x170>
          gt_insDev.b_pitchMeasError ||
   1120e:	80 91 f5 2a 	lds	r24, 0x2AF5

      /*-------------------------------------------------------------------------*
       * Has there been a measurement error for an extended period of time, if so
       * then declare loss-of-lock.
       *-------------------------------------------------------------------------*/
      if( gt_insDev.b_rollMeasError ||
   11212:	88 23       	and	r24, r24
   11214:	21 f4       	brne	.+8      	; 0x1121e <checkForTrackingErrors+0x170>
          gt_insDev.b_pitchMeasError ||
          gt_insDev.b_yawMeasError)
   11216:	80 91 f6 2a 	lds	r24, 0x2AF6
      /*-------------------------------------------------------------------------*
       * Has there been a measurement error for an extended period of time, if so
       * then declare loss-of-lock.
       *-------------------------------------------------------------------------*/
      if( gt_insDev.b_rollMeasError ||
          gt_insDev.b_pitchMeasError ||
   1121a:	88 23       	and	r24, r24
   1121c:	a1 f0       	breq	.+40     	; 0x11246 <checkForTrackingErrors+0x198>
          gt_insDev.b_yawMeasError)
      {
         gt_insDev.s_measErrorCount++;
   1121e:	80 91 f8 2a 	lds	r24, 0x2AF8
   11222:	90 91 f9 2a 	lds	r25, 0x2AF9
   11226:	01 96       	adiw	r24, 0x01	; 1
   11228:	80 93 f8 2a 	sts	0x2AF8, r24
   1122c:	90 93 f9 2a 	sts	0x2AF9, r25
         if( gt_insDev.s_measErrorCount == INS_KALMAN_LOSS_LOCK_COUNT)
   11230:	80 91 f8 2a 	lds	r24, 0x2AF8
   11234:	90 91 f9 2a 	lds	r25, 0x2AF9
   11238:	80 34       	cpi	r24, 0x40	; 64
   1123a:	91 05       	cpc	r25, r1
   1123c:	41 f4       	brne	.+16     	; 0x1124e <checkForTrackingErrors+0x1a0>
            gt_insDev.b_lossOfLock = true;
   1123e:	81 e0       	ldi	r24, 0x01	; 1
   11240:	80 93 f7 2a 	sts	0x2AF7, r24
      if( gt_insDev.b_rollMeasError ||
          gt_insDev.b_pitchMeasError ||
          gt_insDev.b_yawMeasError)
      {
         gt_insDev.s_measErrorCount++;
         if( gt_insDev.s_measErrorCount == INS_KALMAN_LOSS_LOCK_COUNT)
   11244:	04 c0       	rjmp	.+8      	; 0x1124e <checkForTrackingErrors+0x1a0>
            gt_insDev.b_lossOfLock = true;
      }
      else
         gt_insDev.s_measErrorCount = 0;
   11246:	10 92 f8 2a 	sts	0x2AF8, r1
   1124a:	10 92 f9 2a 	sts	0x2AF9, r1

      for( c_index = 0; c_index < 9; c_index++)
   1124e:	19 82       	std	Y+1, r1	; 0x01
   11250:	22 c0       	rjmp	.+68     	; 0x11296 <checkForTrackingErrors+0x1e8>
          * The off-diagonal entities are the "covariances" and can be
          * negative, however the diagonal values are the variances of the
          * attitude, gyro bias, and gyro scale factor - do not allow these
          * to go negative.
          *---------------------------------------------------------------------*/
         if( gt_insDev.as_P[c_index][c_index] < 0)
   11252:	89 81       	ldd	r24, Y+1	; 0x01
   11254:	28 2f       	mov	r18, r24
   11256:	30 e0       	ldi	r19, 0x00	; 0
   11258:	89 81       	ldd	r24, Y+1	; 0x01
   1125a:	48 2f       	mov	r20, r24
   1125c:	50 e0       	ldi	r21, 0x00	; 0
   1125e:	c9 01       	movw	r24, r18
   11260:	88 0f       	add	r24, r24
   11262:	99 1f       	adc	r25, r25
   11264:	88 0f       	add	r24, r24
   11266:	99 1f       	adc	r25, r25
   11268:	88 0f       	add	r24, r24
   1126a:	99 1f       	adc	r25, r25
   1126c:	82 0f       	add	r24, r18
   1126e:	93 1f       	adc	r25, r19
   11270:	84 0f       	add	r24, r20
   11272:	95 1f       	adc	r25, r21
   11274:	8c 5d       	subi	r24, 0xDC	; 220
   11276:	9c 4f       	sbci	r25, 0xFC	; 252
   11278:	88 0f       	add	r24, r24
   1127a:	99 1f       	adc	r25, r25
   1127c:	89 50       	subi	r24, 0x09	; 9
   1127e:	9c 4d       	sbci	r25, 0xDC	; 220
   11280:	fc 01       	movw	r30, r24
   11282:	80 81       	ld	r24, Z
   11284:	91 81       	ldd	r25, Z+1	; 0x01
   11286:	99 23       	and	r25, r25
   11288:	1c f4       	brge	.+6      	; 0x11290 <checkForTrackingErrors+0x1e2>
         {
            gt_insDev.b_lossOfLock = true;
   1128a:	81 e0       	ldi	r24, 0x01	; 1
   1128c:	80 93 f7 2a 	sts	0x2AF7, r24
            gt_insDev.b_lossOfLock = true;
      }
      else
         gt_insDev.s_measErrorCount = 0;

      for( c_index = 0; c_index < 9; c_index++)
   11290:	89 81       	ldd	r24, Y+1	; 0x01
   11292:	8f 5f       	subi	r24, 0xFF	; 255
   11294:	89 83       	std	Y+1, r24	; 0x01
   11296:	89 81       	ldd	r24, Y+1	; 0x01
   11298:	89 30       	cpi	r24, 0x09	; 9
   1129a:	d8 f2       	brcs	.-74     	; 0x11252 <checkForTrackingErrors+0x1a4>

      }

   }/*End if( gt_insDev.c_initialLockCount == INS_KALMAN_LOCK_WAIT)*/

}/*End checkForTrackingErrors*/
   1129c:	0f 90       	pop	r0
   1129e:	df 91       	pop	r29
   112a0:	cf 91       	pop	r28
   112a2:	1f 91       	pop	r17
   112a4:	0f 91       	pop	r16
   112a6:	ff 90       	pop	r15
   112a8:	ef 90       	pop	r14
   112aa:	08 95       	ret

000112ac <insReset>:

static void insReset( void)
{
   gt_insDev.t_gyro.as_bias[0] = gt_insDev.t_gyro.as_calBias[0];
   112ac:	80 91 39 24 	lds	r24, 0x2439
   112b0:	90 91 3a 24 	lds	r25, 0x243A
   112b4:	80 93 33 24 	sts	0x2433, r24
   112b8:	90 93 34 24 	sts	0x2434, r25
   gt_insDev.t_gyro.as_bias[1] = gt_insDev.t_gyro.as_calBias[1];
   112bc:	80 91 3b 24 	lds	r24, 0x243B
   112c0:	90 91 3c 24 	lds	r25, 0x243C
   112c4:	80 93 35 24 	sts	0x2435, r24
   112c8:	90 93 36 24 	sts	0x2436, r25
   gt_insDev.t_gyro.as_bias[2] = gt_insDev.t_gyro.as_calBias[2];
   112cc:	80 91 3d 24 	lds	r24, 0x243D
   112d0:	90 91 3e 24 	lds	r25, 0x243E
   112d4:	80 93 37 24 	sts	0x2437, r24
   112d8:	90 93 38 24 	sts	0x2438, r25

   gt_insDev.t_gyro.as_scale[0] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR)
   112dc:	8f ef       	ldi	r24, 0xFF	; 255
   112de:	9f e1       	ldi	r25, 0x1F	; 31
   112e0:	80 93 3f 24 	sts	0x243F, r24
   112e4:	90 93 40 24 	sts	0x2440, r25
   - 1;
   gt_insDev.t_gyro.as_scale[1] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR)
   112e8:	8f ef       	ldi	r24, 0xFF	; 255
   112ea:	9f e1       	ldi	r25, 0x1F	; 31
   112ec:	80 93 41 24 	sts	0x2441, r24
   112f0:	90 93 42 24 	sts	0x2442, r25
   - 1;
   gt_insDev.t_gyro.as_scale[2] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR)
   112f4:	8f ef       	ldi	r24, 0xFF	; 255
   112f6:	9f e1       	ldi	r25, 0x1F	; 31
   112f8:	80 93 43 24 	sts	0x2443, r24
   112fc:	90 93 44 24 	sts	0x2444, r25
   - 1;

   gt_insDev.t_accel.s_avrSpecForce = 0;
   11300:	10 92 68 24 	sts	0x2468, r1
   11304:	10 92 69 24 	sts	0x2469, r1
   gt_insDev.t_gyro.s_avrDPhase = 0;
   11308:	10 92 45 24 	sts	0x2445, r1
   1130c:	10 92 46 24 	sts	0x2446, r1
   gt_insDev.c_platMovingCount = 0;
   11310:	10 92 f3 2a 	sts	0x2AF3, r1
   gt_insDev.c_initialLockCount = 0;
   11314:	10 92 fa 2a 	sts	0x2AFA, r1
   gt_insDev.b_rollMeasError = false;
   11318:	10 92 f4 2a 	sts	0x2AF4, r1
   gt_insDev.b_pitchMeasError = false;
   1131c:	10 92 f5 2a 	sts	0x2AF5, r1
   gt_insDev.b_yawMeasError = false;
   11320:	10 92 f6 2a 	sts	0x2AF6, r1
   gt_insDev.b_lossOfLock = false;
   11324:	10 92 f7 2a 	sts	0x2AF7, r1
   gt_insDev.s_measErrorCount = 0;
   11328:	10 92 f8 2a 	sts	0x2AF8, r1
   1132c:	10 92 f9 2a 	sts	0x2AF9, r1

   gt_insDev.ai_avrRes[0] = 0;
   11330:	10 92 e1 2a 	sts	0x2AE1, r1
   11334:	10 92 e2 2a 	sts	0x2AE2, r1
   11338:	10 92 e3 2a 	sts	0x2AE3, r1
   1133c:	10 92 e4 2a 	sts	0x2AE4, r1
   gt_insDev.ai_avrRes[1] = 0;
   11340:	10 92 e5 2a 	sts	0x2AE5, r1
   11344:	10 92 e6 2a 	sts	0x2AE6, r1
   11348:	10 92 e7 2a 	sts	0x2AE7, r1
   1134c:	10 92 e8 2a 	sts	0x2AE8, r1
   gt_insDev.ai_avrRes[2] = 0;
   11350:	10 92 e9 2a 	sts	0x2AE9, r1
   11354:	10 92 ea 2a 	sts	0x2AEA, r1
   11358:	10 92 eb 2a 	sts	0x2AEB, r1
   1135c:	10 92 ec 2a 	sts	0x2AEC, r1

   dcmInit( gt_insDev.as_rawAtt);
   11360:	80 e7       	ldi	r24, 0x70	; 112
   11362:	94 e2       	ldi	r25, 0x24	; 36
   11364:	0e 94 ba 76 	call	0xed74	; 0xed74 <dcmInit>
   eSKalmanFilterInit();
   11368:	0e 94 34 52 	call	0xa468	; 0xa468 <eSKalmanFilterInit>

}/*End insReset*/
   1136c:	08 95       	ret

0001136e <dcmUpdate>:

static void dcmUpdate( void)
{
   1136e:	af 92       	push	r10
   11370:	bf 92       	push	r11
   11372:	cf 92       	push	r12
   11374:	df 92       	push	r13
   11376:	ef 92       	push	r14
   11378:	ff 92       	push	r15
   1137a:	0f 93       	push	r16
   1137c:	1f 93       	push	r17
   1137e:	cf 93       	push	r28
   11380:	df 93       	push	r29
   11382:	cd b7       	in	r28, 0x3d	; 61
   11384:	de b7       	in	r29, 0x3e	; 62
   11386:	cd 5d       	subi	r28, 0xDD	; 221
   11388:	d0 40       	sbci	r29, 0x00	; 0
   1138a:	cd bf       	out	0x3d, r28	; 61
   1138c:	de bf       	out	0x3e, r29	; 62
   int32_t i_sum;

   /*------------------------------------------------------------------------*
    * Acquire new sensor data.
    *------------------------------------------------------------------------*/
   readSensors( as_mag,
   1138e:	8c e5       	ldi	r24, 0x5C	; 92
   11390:	9b e2       	ldi	r25, 0x2B	; 43
   11392:	42 e6       	ldi	r20, 0x62	; 98
   11394:	5b e2       	ldi	r21, 0x2B	; 43
                as_gyr,
                as_acc);
   11396:	9e 01       	movw	r18, r28
   11398:	23 5e       	subi	r18, 0xE3	; 227
   1139a:	3f 4f       	sbci	r19, 0xFF	; 255
   int32_t i_sum;

   /*------------------------------------------------------------------------*
    * Acquire new sensor data.
    *------------------------------------------------------------------------*/
   readSensors( as_mag,
   1139c:	ba 01       	movw	r22, r20
   1139e:	a9 01       	movw	r20, r18
   113a0:	0e 94 24 7b 	call	0xf648	; 0xf648 <readSensors>
                as_acc);

   /*------------------------------------------------------------------------*
    * Convert the gyro measurement into rad/sec where 1 rad = 32767.
    *------------------------------------------------------------------------*/
   gyroDegToRad( as_gyr,
   113a4:	82 e6       	ldi	r24, 0x62	; 98
   113a6:	9b e2       	ldi	r25, 0x2B	; 43
   113a8:	28 e6       	ldi	r18, 0x68	; 104
   113aa:	3b e2       	ldi	r19, 0x2B	; 43
   113ac:	b9 01       	movw	r22, r18
   113ae:	0e 94 af 7a 	call	0xf55e	; 0xf55e <gyroDegToRad>

   /*------------------------------------------------------------------------*
    * If there has been a valid magnetometer calibration compensate for axis
    * misalignment and bias...
    *------------------------------------------------------------------------*/
   if( gt_insDev.t_mag.t_cal == INS_CAL_COMPLETE)
   113b2:	80 91 32 24 	lds	r24, 0x2432
   113b6:	82 30       	cpi	r24, 0x02	; 2
   113b8:	51 f4       	brne	.+20     	; 0x113ce <dcmUpdate+0x60>
   {
      applyCalibration( as_mag,
   113ba:	8c e5       	ldi	r24, 0x5C	; 92
   113bc:	9b e2       	ldi	r25, 0x2B	; 43
   113be:	62 e1       	ldi	r22, 0x12	; 18
   113c0:	74 e2       	ldi	r23, 0x24	; 36
   113c2:	44 e2       	ldi	r20, 0x24	; 36
   113c4:	54 e2       	ldi	r21, 0x24	; 36
   113c6:	2a e2       	ldi	r18, 0x2A	; 42
   113c8:	34 e2       	ldi	r19, 0x24	; 36
   113ca:	0e 94 9c 82 	call	0x10538	; 0x10538 <applyCalibration>

   /*------------------------------------------------------------------------*
    * If there has been a valid accelerometer calibration compensate for axis
    * misalignment and bias...
    *------------------------------------------------------------------------*/
   if( gt_insDev.t_accel.t_cal == INS_CAL_COMPLETE)
   113ce:	80 91 67 24 	lds	r24, 0x2467
   113d2:	82 30       	cpi	r24, 0x02	; 2
   113d4:	51 f4       	brne	.+20     	; 0x113ea <dcmUpdate+0x7c>
   {
      applyCalibration( as_acc,
   113d6:	ce 01       	movw	r24, r28
   113d8:	4d 96       	adiw	r24, 0x1d	; 29
   113da:	67 e4       	ldi	r22, 0x47	; 71
   113dc:	74 e2       	ldi	r23, 0x24	; 36
   113de:	49 e5       	ldi	r20, 0x59	; 89
   113e0:	54 e2       	ldi	r21, 0x24	; 36
   113e2:	2f e5       	ldi	r18, 0x5F	; 95
   113e4:	34 e2       	ldi	r19, 0x24	; 36
   113e6:	0e 94 9c 82 	call	0x10538	; 0x10538 <applyCalibration>

   /*------------------------------------------------------------------------*
    * Correct for gyro bias and misalignment using the parameters estimated by
    * the error-state Kalman filter.
    *------------------------------------------------------------------------*/
   ai_gyr[0] = ai_gyr[0] - (int32_t)gt_insDev.t_gyro.as_bias[0];
   113ea:	20 91 68 2b 	lds	r18, 0x2B68
   113ee:	30 91 69 2b 	lds	r19, 0x2B69
   113f2:	40 91 6a 2b 	lds	r20, 0x2B6A
   113f6:	50 91 6b 2b 	lds	r21, 0x2B6B
   113fa:	80 91 33 24 	lds	r24, 0x2433
   113fe:	90 91 34 24 	lds	r25, 0x2434
   11402:	aa 27       	eor	r26, r26
   11404:	97 fd       	sbrc	r25, 7
   11406:	a0 95       	com	r26
   11408:	ba 2f       	mov	r27, r26
   1140a:	79 01       	movw	r14, r18
   1140c:	8a 01       	movw	r16, r20
   1140e:	e8 1a       	sub	r14, r24
   11410:	f9 0a       	sbc	r15, r25
   11412:	0a 0b       	sbc	r16, r26
   11414:	1b 0b       	sbc	r17, r27
   11416:	d8 01       	movw	r26, r16
   11418:	c7 01       	movw	r24, r14
   1141a:	80 93 68 2b 	sts	0x2B68, r24
   1141e:	90 93 69 2b 	sts	0x2B69, r25
   11422:	a0 93 6a 2b 	sts	0x2B6A, r26
   11426:	b0 93 6b 2b 	sts	0x2B6B, r27
   ai_gyr[0] = utl_mult32x32_32( ai_gyr[0], (int32_t)gt_insDev.t_gyro.
   1142a:	80 91 68 2b 	lds	r24, 0x2B68
   1142e:	90 91 69 2b 	lds	r25, 0x2B69
   11432:	a0 91 6a 2b 	lds	r26, 0x2B6A
   11436:	b0 91 6b 2b 	lds	r27, 0x2B6B
   as_scale[0], INS_AXIS_SCALE_Q_FACTOR);
   1143a:	20 91 3f 24 	lds	r18, 0x243F
   1143e:	30 91 40 24 	lds	r19, 0x2440
   /*------------------------------------------------------------------------*
    * Correct for gyro bias and misalignment using the parameters estimated by
    * the error-state Kalman filter.
    *------------------------------------------------------------------------*/
   ai_gyr[0] = ai_gyr[0] - (int32_t)gt_insDev.t_gyro.as_bias[0];
   ai_gyr[0] = utl_mult32x32_32( ai_gyr[0], (int32_t)gt_insDev.t_gyro.
   11442:	44 27       	eor	r20, r20
   11444:	37 fd       	sbrc	r19, 7
   11446:	40 95       	com	r20
   11448:	54 2f       	mov	r21, r20
   1144a:	bc 01       	movw	r22, r24
   1144c:	cd 01       	movw	r24, r26
   1144e:	0d e0       	ldi	r16, 0x0D	; 13
   11450:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
   11454:	dc 01       	movw	r26, r24
   11456:	cb 01       	movw	r24, r22
   11458:	80 93 68 2b 	sts	0x2B68, r24
   1145c:	90 93 69 2b 	sts	0x2B69, r25
   11460:	a0 93 6a 2b 	sts	0x2B6A, r26
   11464:	b0 93 6b 2b 	sts	0x2B6B, r27
   as_scale[0], INS_AXIS_SCALE_Q_FACTOR);

   ai_gyr[1] = ai_gyr[1] - (int32_t)gt_insDev.t_gyro.as_bias[1];
   11468:	20 91 6c 2b 	lds	r18, 0x2B6C
   1146c:	30 91 6d 2b 	lds	r19, 0x2B6D
   11470:	40 91 6e 2b 	lds	r20, 0x2B6E
   11474:	50 91 6f 2b 	lds	r21, 0x2B6F
   11478:	80 91 35 24 	lds	r24, 0x2435
   1147c:	90 91 36 24 	lds	r25, 0x2436
   11480:	aa 27       	eor	r26, r26
   11482:	97 fd       	sbrc	r25, 7
   11484:	a0 95       	com	r26
   11486:	ba 2f       	mov	r27, r26
   11488:	79 01       	movw	r14, r18
   1148a:	8a 01       	movw	r16, r20
   1148c:	e8 1a       	sub	r14, r24
   1148e:	f9 0a       	sbc	r15, r25
   11490:	0a 0b       	sbc	r16, r26
   11492:	1b 0b       	sbc	r17, r27
   11494:	d8 01       	movw	r26, r16
   11496:	c7 01       	movw	r24, r14
   11498:	80 93 6c 2b 	sts	0x2B6C, r24
   1149c:	90 93 6d 2b 	sts	0x2B6D, r25
   114a0:	a0 93 6e 2b 	sts	0x2B6E, r26
   114a4:	b0 93 6f 2b 	sts	0x2B6F, r27
   ai_gyr[1] = utl_mult32x32_32( ai_gyr[1], (int32_t)gt_insDev.t_gyro.
   114a8:	80 91 6c 2b 	lds	r24, 0x2B6C
   114ac:	90 91 6d 2b 	lds	r25, 0x2B6D
   114b0:	a0 91 6e 2b 	lds	r26, 0x2B6E
   114b4:	b0 91 6f 2b 	lds	r27, 0x2B6F
   as_scale[1], INS_AXIS_SCALE_Q_FACTOR);
   114b8:	20 91 41 24 	lds	r18, 0x2441
   114bc:	30 91 42 24 	lds	r19, 0x2442
   ai_gyr[0] = ai_gyr[0] - (int32_t)gt_insDev.t_gyro.as_bias[0];
   ai_gyr[0] = utl_mult32x32_32( ai_gyr[0], (int32_t)gt_insDev.t_gyro.
   as_scale[0], INS_AXIS_SCALE_Q_FACTOR);

   ai_gyr[1] = ai_gyr[1] - (int32_t)gt_insDev.t_gyro.as_bias[1];
   ai_gyr[1] = utl_mult32x32_32( ai_gyr[1], (int32_t)gt_insDev.t_gyro.
   114c0:	44 27       	eor	r20, r20
   114c2:	37 fd       	sbrc	r19, 7
   114c4:	40 95       	com	r20
   114c6:	54 2f       	mov	r21, r20
   114c8:	bc 01       	movw	r22, r24
   114ca:	cd 01       	movw	r24, r26
   114cc:	0d e0       	ldi	r16, 0x0D	; 13
   114ce:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
   114d2:	dc 01       	movw	r26, r24
   114d4:	cb 01       	movw	r24, r22
   114d6:	80 93 6c 2b 	sts	0x2B6C, r24
   114da:	90 93 6d 2b 	sts	0x2B6D, r25
   114de:	a0 93 6e 2b 	sts	0x2B6E, r26
   114e2:	b0 93 6f 2b 	sts	0x2B6F, r27
   as_scale[1], INS_AXIS_SCALE_Q_FACTOR);

   ai_gyr[2] = ai_gyr[2] - (int32_t)gt_insDev.t_gyro.as_bias[2];
   114e6:	20 91 70 2b 	lds	r18, 0x2B70
   114ea:	30 91 71 2b 	lds	r19, 0x2B71
   114ee:	40 91 72 2b 	lds	r20, 0x2B72
   114f2:	50 91 73 2b 	lds	r21, 0x2B73
   114f6:	80 91 37 24 	lds	r24, 0x2437
   114fa:	90 91 38 24 	lds	r25, 0x2438
   114fe:	aa 27       	eor	r26, r26
   11500:	97 fd       	sbrc	r25, 7
   11502:	a0 95       	com	r26
   11504:	ba 2f       	mov	r27, r26
   11506:	79 01       	movw	r14, r18
   11508:	8a 01       	movw	r16, r20
   1150a:	e8 1a       	sub	r14, r24
   1150c:	f9 0a       	sbc	r15, r25
   1150e:	0a 0b       	sbc	r16, r26
   11510:	1b 0b       	sbc	r17, r27
   11512:	d8 01       	movw	r26, r16
   11514:	c7 01       	movw	r24, r14
   11516:	80 93 70 2b 	sts	0x2B70, r24
   1151a:	90 93 71 2b 	sts	0x2B71, r25
   1151e:	a0 93 72 2b 	sts	0x2B72, r26
   11522:	b0 93 73 2b 	sts	0x2B73, r27
   ai_gyr[2] = utl_mult32x32_32( ai_gyr[2], (int32_t)gt_insDev.t_gyro.
   11526:	80 91 70 2b 	lds	r24, 0x2B70
   1152a:	90 91 71 2b 	lds	r25, 0x2B71
   1152e:	a0 91 72 2b 	lds	r26, 0x2B72
   11532:	b0 91 73 2b 	lds	r27, 0x2B73
   as_scale[2], INS_AXIS_SCALE_Q_FACTOR);
   11536:	20 91 43 24 	lds	r18, 0x2443
   1153a:	30 91 44 24 	lds	r19, 0x2444
   ai_gyr[1] = ai_gyr[1] - (int32_t)gt_insDev.t_gyro.as_bias[1];
   ai_gyr[1] = utl_mult32x32_32( ai_gyr[1], (int32_t)gt_insDev.t_gyro.
   as_scale[1], INS_AXIS_SCALE_Q_FACTOR);

   ai_gyr[2] = ai_gyr[2] - (int32_t)gt_insDev.t_gyro.as_bias[2];
   ai_gyr[2] = utl_mult32x32_32( ai_gyr[2], (int32_t)gt_insDev.t_gyro.
   1153e:	44 27       	eor	r20, r20
   11540:	37 fd       	sbrc	r19, 7
   11542:	40 95       	com	r20
   11544:	54 2f       	mov	r21, r20
   11546:	bc 01       	movw	r22, r24
   11548:	cd 01       	movw	r24, r26
   1154a:	0d e0       	ldi	r16, 0x0D	; 13
   1154c:	0e 94 d9 de 	call	0x1bdb2	; 0x1bdb2 <utl_mult32x32_32>
   11550:	dc 01       	movw	r26, r24
   11552:	cb 01       	movw	r24, r22
   11554:	80 93 70 2b 	sts	0x2B70, r24
   11558:	90 93 71 2b 	sts	0x2B71, r25
   1155c:	a0 93 72 2b 	sts	0x2B72, r26
   11560:	b0 93 73 2b 	sts	0x2B73, r27
   as_scale[2], INS_AXIS_SCALE_Q_FACTOR);

   t_time = arb_sysTimeNow();
   11564:	ce 01       	movw	r24, r28
   11566:	89 5b       	subi	r24, 0xB9	; 185
   11568:	9f 4f       	sbci	r25, 0xFF	; 255
   1156a:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
   i_dt = t_time.i_usec - gt_insDev.i_lastTime;
   1156e:	ce 01       	movw	r24, r28
   11570:	89 5b       	subi	r24, 0xB9	; 185
   11572:	9f 4f       	sbci	r25, 0xFF	; 255
   11574:	dc 01       	movw	r26, r24
   11576:	55 96       	adiw	r26, 0x15	; 21
   11578:	2d 91       	ld	r18, X+
   1157a:	3d 91       	ld	r19, X+
   1157c:	4d 91       	ld	r20, X+
   1157e:	5c 91       	ld	r21, X
   11580:	58 97       	sbiw	r26, 0x18	; 24
   11582:	80 91 76 24 	lds	r24, 0x2476
   11586:	90 91 77 24 	lds	r25, 0x2477
   1158a:	a0 91 78 24 	lds	r26, 0x2478
   1158e:	b0 91 79 24 	lds	r27, 0x2479
   11592:	79 01       	movw	r14, r18
   11594:	8a 01       	movw	r16, r20
   11596:	e8 1a       	sub	r14, r24
   11598:	f9 0a       	sbc	r15, r25
   1159a:	0a 0b       	sbc	r16, r26
   1159c:	1b 0b       	sbc	r17, r27
   1159e:	d8 01       	movw	r26, r16
   115a0:	c7 01       	movw	r24, r14
   115a2:	89 83       	std	Y+1, r24	; 0x01
   115a4:	9a 83       	std	Y+2, r25	; 0x02
   115a6:	ab 83       	std	Y+3, r26	; 0x03
   115a8:	bc 83       	std	Y+4, r27	; 0x04
   if( i_dt < 0)
   115aa:	89 81       	ldd	r24, Y+1	; 0x01
   115ac:	9a 81       	ldd	r25, Y+2	; 0x02
   115ae:	ab 81       	ldd	r26, Y+3	; 0x03
   115b0:	bc 81       	ldd	r27, Y+4	; 0x04
   115b2:	bb 23       	and	r27, r27
   115b4:	64 f4       	brge	.+24     	; 0x115ce <dcmUpdate+0x260>
      i_dt += 1000000; /*Modulo the number of usec in 1 second*/
   115b6:	89 81       	ldd	r24, Y+1	; 0x01
   115b8:	9a 81       	ldd	r25, Y+2	; 0x02
   115ba:	ab 81       	ldd	r26, Y+3	; 0x03
   115bc:	bc 81       	ldd	r27, Y+4	; 0x04
   115be:	80 5c       	subi	r24, 0xC0	; 192
   115c0:	9d 4b       	sbci	r25, 0xBD	; 189
   115c2:	a0 4f       	sbci	r26, 0xF0	; 240
   115c4:	bf 4f       	sbci	r27, 0xFF	; 255
   115c6:	89 83       	std	Y+1, r24	; 0x01
   115c8:	9a 83       	std	Y+2, r25	; 0x02
   115ca:	ab 83       	std	Y+3, r26	; 0x03
   115cc:	bc 83       	std	Y+4, r27	; 0x04

   /*------------------------------------------------------------------------*
    * Store the last time the algorithm updated.
    *------------------------------------------------------------------------*/
   gt_insDev.i_lastTime = t_time.i_usec;
   115ce:	ce 01       	movw	r24, r28
   115d0:	89 5b       	subi	r24, 0xB9	; 185
   115d2:	9f 4f       	sbci	r25, 0xFF	; 255
   115d4:	fc 01       	movw	r30, r24
   115d6:	85 89       	ldd	r24, Z+21	; 0x15
   115d8:	96 89       	ldd	r25, Z+22	; 0x16
   115da:	a7 89       	ldd	r26, Z+23	; 0x17
   115dc:	b0 8d       	ldd	r27, Z+24	; 0x18
   115de:	80 93 76 24 	sts	0x2476, r24
   115e2:	90 93 77 24 	sts	0x2477, r25
   115e6:	a0 93 78 24 	sts	0x2478, r26
   115ea:	b0 93 79 24 	sts	0x2479, r27

   /*------------------------------------------------------------------------*
    * Update the DCM and error-state Kalman filter time step.
    *------------------------------------------------------------------------*/
   s_dt = (int16_t)(((float)i_dt/1000000)*32768.0f);
   115ee:	69 81       	ldd	r22, Y+1	; 0x01
   115f0:	7a 81       	ldd	r23, Y+2	; 0x02
   115f2:	8b 81       	ldd	r24, Y+3	; 0x03
   115f4:	9c 81       	ldd	r25, Y+4	; 0x04
   115f6:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   115fa:	dc 01       	movw	r26, r24
   115fc:	cb 01       	movw	r24, r22
   115fe:	bc 01       	movw	r22, r24
   11600:	cd 01       	movw	r24, r26
   11602:	20 e0       	ldi	r18, 0x00	; 0
   11604:	34 e2       	ldi	r19, 0x24	; 36
   11606:	44 e7       	ldi	r20, 0x74	; 116
   11608:	59 e4       	ldi	r21, 0x49	; 73
   1160a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1160e:	dc 01       	movw	r26, r24
   11610:	cb 01       	movw	r24, r22
   11612:	bc 01       	movw	r22, r24
   11614:	cd 01       	movw	r24, r26
   11616:	20 e0       	ldi	r18, 0x00	; 0
   11618:	30 e0       	ldi	r19, 0x00	; 0
   1161a:	40 e0       	ldi	r20, 0x00	; 0
   1161c:	57 e4       	ldi	r21, 0x47	; 71
   1161e:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   11622:	dc 01       	movw	r26, r24
   11624:	cb 01       	movw	r24, r22
   11626:	bc 01       	movw	r22, r24
   11628:	cd 01       	movw	r24, r26
   1162a:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   1162e:	dc 01       	movw	r26, r24
   11630:	cb 01       	movw	r24, r22
   11632:	8d 83       	std	Y+5, r24	; 0x05
   11634:	9e 83       	std	Y+6, r25	; 0x06

   /*------------------------------------------------------------------------*
    * Perform DCM integration according to eq 5.6 and 5.7 of [1].
    *------------------------------------------------------------------------*/
   dcmIntegration( ai_gyr,
   11636:	88 e6       	ldi	r24, 0x68	; 104
   11638:	9b e2       	ldi	r25, 0x2B	; 43
                   as_dPhase, /*The delta movement over the last dt. Q1.14*/
   1163a:	ae 01       	movw	r20, r28
   1163c:	4f 5b       	subi	r20, 0xBF	; 191
   1163e:	5f 4f       	sbci	r21, 0xFF	; 255
   s_dt = (int16_t)(((float)i_dt/1000000)*32768.0f);

   /*------------------------------------------------------------------------*
    * Perform DCM integration according to eq 5.6 and 5.7 of [1].
    *------------------------------------------------------------------------*/
   dcmIntegration( ai_gyr,
   11640:	2d 81       	ldd	r18, Y+5	; 0x05
   11642:	3e 81       	ldd	r19, Y+6	; 0x06
   11644:	ba 01       	movw	r22, r20
   11646:	a9 01       	movw	r20, r18
   11648:	0e 94 68 73 	call	0xe6d0	; 0xe6d0 <dcmIntegration>
                   s_dt);     /*dt in Q0.15 format*/

   /*------------------------------------------------------------------------*
    * Normalize the DCM according to eq's 18, 19, 20, and 21 of [4].
    *------------------------------------------------------------------------*/
   dcmNormalize();
   1164c:	0e 94 9a 68 	call	0xd134	; 0xd134 <dcmNormalize>

   /*------------------------------------------------------------------------*
    * Convert from DCM representation to Euler attitude using eq 2.17 of [1].
    *------------------------------------------------------------------------*/
   dcmToEuler( gt_insDev.as_dcmAttitude);
   11650:	8a e6       	ldi	r24, 0x6A	; 106
   11652:	94 e2       	ldi	r25, 0x24	; 36
   11654:	0e 94 0f 7a 	call	0xf41e	; 0xf41e <dcmToEuler>

   /*------------------------------------------------------------------------*
    * Get the "raw" attitude as determined by the accelerometer and
    * magnetometer using eq's 10.14 and 10.15 of [3] and eq 10.6 of [1].
    *------------------------------------------------------------------------*/
   getRawAttitude( as_acc,
   11658:	ce 01       	movw	r24, r28
   1165a:	4d 96       	adiw	r24, 0x1d	; 29
   1165c:	4c e5       	ldi	r20, 0x5C	; 92
   1165e:	5b e2       	ldi	r21, 0x2B	; 43
   11660:	20 e7       	ldi	r18, 0x70	; 112
   11662:	34 e2       	ldi	r19, 0x24	; 36
   11664:	ba 01       	movw	r22, r20
   11666:	a9 01       	movw	r20, r18
   11668:	0e 94 42 7b 	call	0xf684	; 0xf684 <getRawAttitude>

   /*------------------------------------------------------------------------*
    * Calculate the specific force of the acceleration vector and the
    * average amount of rotation per time step dt.
    *------------------------------------------------------------------------*/
   calcAvrDynamics( as_acc,
   1166c:	ce 01       	movw	r24, r28
   1166e:	4d 96       	adiw	r24, 0x1d	; 29
                    as_dPhase);
   11670:	9e 01       	movw	r18, r28
   11672:	2f 5b       	subi	r18, 0xBF	; 191
   11674:	3f 4f       	sbci	r19, 0xFF	; 255

   /*------------------------------------------------------------------------*
    * Calculate the specific force of the acceleration vector and the
    * average amount of rotation per time step dt.
    *------------------------------------------------------------------------*/
   calcAvrDynamics( as_acc,
   11676:	b9 01       	movw	r22, r18
   11678:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <calcAvrDynamics>

   /*------------------------------------------------------------------------*
    * Update the Kalman filter measurement error during times of low system
    * dynamics.
    *------------------------------------------------------------------------*/
   eSKalmanResVarEst( gt_insDev.as_rawAtt);
   1167c:	80 e7       	ldi	r24, 0x70	; 112
   1167e:	94 e2       	ldi	r25, 0x24	; 36
   11680:	0e 94 4e 50 	call	0xa09c	; 0xa09c <eSKalmanResVarEst>
    * Form the error-state Kalman filter measurement innovation based on the
    * gravity vector and magnetic field vector, where deltaZ is the attitude
    * error measurement based on the set of 'unlabeled' eq's in section
    * 10.5.1.2 and 10.5.1.3 of [3].
    *------------------------------------------------------------------------*/
   formMeasInnov( as_acc,
   11684:	ce 01       	movw	r24, r28
   11686:	4d 96       	adiw	r24, 0x1d	; 29
   11688:	4c e5       	ldi	r20, 0x5C	; 92
   1168a:	5b e2       	ldi	r21, 0x2B	; 43
                  as_mag,
                  as_deltaZ);
   1168c:	9e 01       	movw	r18, r28
   1168e:	2d 5d       	subi	r18, 0xDD	; 221
   11690:	3f 4f       	sbci	r19, 0xFF	; 255
    * Form the error-state Kalman filter measurement innovation based on the
    * gravity vector and magnetic field vector, where deltaZ is the attitude
    * error measurement based on the set of 'unlabeled' eq's in section
    * 10.5.1.2 and 10.5.1.3 of [3].
    *------------------------------------------------------------------------*/
   formMeasInnov( as_acc,
   11692:	ba 01       	movw	r22, r20
   11694:	a9 01       	movw	r20, r18
   11696:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <formMeasInnov>
                  as_mag,
                  as_deltaZ);

   checkForTrackingErrors();
   1169a:	0e 94 57 88 	call	0x110ae	; 0x110ae <checkForTrackingErrors>

   /*------------------------------------------------------------------------*
    * Increase the uncertainty in the error covariance matrix.
    *------------------------------------------------------------------------*/
   eSKalmanFilterPredict( ai_gyr,
   1169e:	88 e6       	ldi	r24, 0x68	; 104
   116a0:	9b e2       	ldi	r25, 0x2B	; 43
   116a2:	2d 81       	ldd	r18, Y+5	; 0x05
   116a4:	3e 81       	ldd	r19, Y+6	; 0x06
   116a6:	b9 01       	movw	r22, r18
   116a8:	0e 94 90 53 	call	0xa720	; 0xa720 <eSKalmanFilterPredict>
   /*------------------------------------------------------------------------*
    * Apply Kalman filter correction to the error covariance matrix and
    * estimate the error in the attitude, gyro bias, and gyro axis scale
    * factors.
    *------------------------------------------------------------------------*/
   eSKalmanFilterCorrect( as_deltaZ,
   116ac:	ce 01       	movw	r24, r28
   116ae:	83 96       	adiw	r24, 0x23	; 35
                          as_deltaAtt,
   116b0:	be 01       	movw	r22, r28
   116b2:	67 5d       	subi	r22, 0xD7	; 215
   116b4:	7f 4f       	sbci	r23, 0xFF	; 255
                          as_deltaGBias,
   116b6:	ae 01       	movw	r20, r28
   116b8:	4b 5c       	subi	r20, 0xCB	; 203
   116ba:	5f 4f       	sbci	r21, 0xFF	; 255
                          as_deltaGScale,
   116bc:	9e 01       	movw	r18, r28
   116be:	21 5d       	subi	r18, 0xD1	; 209
   116c0:	3f 4f       	sbci	r19, 0xFF	; 255
   /*------------------------------------------------------------------------*
    * Apply Kalman filter correction to the error covariance matrix and
    * estimate the error in the attitude, gyro bias, and gyro axis scale
    * factors.
    *------------------------------------------------------------------------*/
   eSKalmanFilterCorrect( as_deltaZ,
   116c2:	ed 81       	ldd	r30, Y+5	; 0x05
   116c4:	fe 81       	ldd	r31, Y+6	; 0x06
   116c6:	8f 01       	movw	r16, r30
   116c8:	0e 94 d1 56 	call	0xada2	; 0xada2 <eSKalmanFilterCorrect>
                          as_deltaAtt,
                          as_deltaGBias,
                          as_deltaGScale,
                          s_dt);

   if( (as_deltaGScale[0] < 0) && (as_deltaGScale[0] > -5))
   116cc:	8f a5       	lds	r24, 0x6f
   116ce:	98 a9       	sts	0x48, r25
   116d0:	99 23       	and	r25, r25
   116d2:	44 f4       	brge	.+16     	; 0x116e4 <dcmUpdate+0x376>
   116d4:	8f a5       	lds	r24, 0x6f
   116d6:	98 a9       	sts	0x48, r25
   116d8:	ff ef       	ldi	r31, 0xFF	; 255
   116da:	8c 3f       	cpi	r24, 0xFC	; 252
   116dc:	9f 07       	cpc	r25, r31
   116de:	14 f0       	brlt	.+4      	; 0x116e4 <dcmUpdate+0x376>
      as_deltaGScale[0] = 0;
   116e0:	1f a6       	lds	r17, 0xbf
   116e2:	18 aa       	sts	0x98, r17

   if( (as_deltaGScale[1] < 0) && (as_deltaGScale[1] > -5))
   116e4:	89 a9       	sts	0x49, r24
   116e6:	9a a9       	sts	0x4a, r25
   116e8:	99 23       	and	r25, r25
   116ea:	44 f4       	brge	.+16     	; 0x116fc <dcmUpdate+0x38e>
   116ec:	89 a9       	sts	0x49, r24
   116ee:	9a a9       	sts	0x4a, r25
   116f0:	0f ef       	ldi	r16, 0xFF	; 255
   116f2:	8c 3f       	cpi	r24, 0xFC	; 252
   116f4:	90 07       	cpc	r25, r16
   116f6:	14 f0       	brlt	.+4      	; 0x116fc <dcmUpdate+0x38e>
      as_deltaGScale[1] = 0;
   116f8:	19 aa       	sts	0x99, r17
   116fa:	1a aa       	sts	0x9a, r17

   if( (as_deltaGScale[2] < 0) && (as_deltaGScale[2] > -5))
   116fc:	8b a9       	sts	0x4b, r24
   116fe:	9c a9       	sts	0x4c, r25
   11700:	99 23       	and	r25, r25
   11702:	44 f4       	brge	.+16     	; 0x11714 <dcmUpdate+0x3a6>
   11704:	8b a9       	sts	0x4b, r24
   11706:	9c a9       	sts	0x4c, r25
   11708:	1f ef       	ldi	r17, 0xFF	; 255
   1170a:	8c 3f       	cpi	r24, 0xFC	; 252
   1170c:	91 07       	cpc	r25, r17
   1170e:	14 f0       	brlt	.+4      	; 0x11714 <dcmUpdate+0x3a6>
      as_deltaGScale[2] = 0;
   11710:	1b aa       	sts	0x9b, r17
   11712:	1c aa       	sts	0x9c, r17

   /*------------------------------------------------------------------------*
    * Update the gyro bias and scale factor parameters based on the error
    * calculated by the Kalman filter
    *------------------------------------------------------------------------*/
   gt_insDev.t_gyro.as_bias[0] += as_deltaGBias[0];
   11714:	20 91 33 24 	lds	r18, 0x2433
   11718:	30 91 34 24 	lds	r19, 0x2434
   1171c:	8d a9       	sts	0x4d, r24
   1171e:	9e a9       	sts	0x4e, r25
   11720:	82 0f       	add	r24, r18
   11722:	93 1f       	adc	r25, r19
   11724:	80 93 33 24 	sts	0x2433, r24
   11728:	90 93 34 24 	sts	0x2434, r25
   gt_insDev.t_gyro.as_bias[1] += as_deltaGBias[1];
   1172c:	20 91 35 24 	lds	r18, 0x2435
   11730:	30 91 36 24 	lds	r19, 0x2436
   11734:	8f a9       	sts	0x4f, r24
   11736:	98 ad       	sts	0x68, r25
   11738:	82 0f       	add	r24, r18
   1173a:	93 1f       	adc	r25, r19
   1173c:	80 93 35 24 	sts	0x2435, r24
   11740:	90 93 36 24 	sts	0x2436, r25
   gt_insDev.t_gyro.as_bias[2] += as_deltaGBias[2];
   11744:	20 91 37 24 	lds	r18, 0x2437
   11748:	30 91 38 24 	lds	r19, 0x2438
   1174c:	89 ad       	sts	0x69, r24
   1174e:	9a ad       	sts	0x6a, r25
   11750:	82 0f       	add	r24, r18
   11752:	93 1f       	adc	r25, r19
   11754:	80 93 37 24 	sts	0x2437, r24
   11758:	90 93 38 24 	sts	0x2438, r25

   /*------------------------------------------------------------------------*
    * Since, gt_insDev.t_gyro.as_scale is a Q13, it needs to be scaled up to
    * a Q15 before accumulating the error.
    *------------------------------------------------------------------------*/
   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[0] << 2) +
   1175c:	80 91 3f 24 	lds	r24, 0x243F
   11760:	90 91 40 24 	lds	r25, 0x2440
   11764:	aa 27       	eor	r26, r26
   11766:	97 fd       	sbrc	r25, 7
   11768:	a0 95       	com	r26
   1176a:	ba 2f       	mov	r27, r26
   1176c:	9c 01       	movw	r18, r24
   1176e:	ad 01       	movw	r20, r26
   11770:	22 0f       	add	r18, r18
   11772:	33 1f       	adc	r19, r19
   11774:	44 1f       	adc	r20, r20
   11776:	55 1f       	adc	r21, r21
   11778:	22 0f       	add	r18, r18
   1177a:	33 1f       	adc	r19, r19
   1177c:	44 1f       	adc	r20, r20
   1177e:	55 1f       	adc	r21, r21
   ((int32_t)as_deltaGScale[0]); /*Q15 + Q15*/
   11780:	8f a5       	lds	r24, 0x6f
   11782:	98 a9       	sts	0x48, r25
   11784:	aa 27       	eor	r26, r26
   11786:	97 fd       	sbrc	r25, 7
   11788:	a0 95       	com	r26
   1178a:	ba 2f       	mov	r27, r26

   /*------------------------------------------------------------------------*
    * Since, gt_insDev.t_gyro.as_scale is a Q13, it needs to be scaled up to
    * a Q15 before accumulating the error.
    *------------------------------------------------------------------------*/
   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[0] << 2) +
   1178c:	82 0f       	add	r24, r18
   1178e:	93 1f       	adc	r25, r19
   11790:	a4 1f       	adc	r26, r20
   11792:	b5 1f       	adc	r27, r21
   11794:	8f 83       	std	Y+7, r24	; 0x07
   11796:	98 87       	std	Y+8, r25	; 0x08
   11798:	a9 87       	std	Y+9, r26	; 0x09
   1179a:	ba 87       	std	Y+10, r27	; 0x0a
   1179c:	8f 81       	ldd	r24, Y+7	; 0x07
   1179e:	98 85       	ldd	r25, Y+8	; 0x08
   117a0:	a9 85       	ldd	r26, Y+9	; 0x09
   117a2:	ba 85       	ldd	r27, Y+10	; 0x0a
   117a4:	8b 87       	std	Y+11, r24	; 0x0b
   117a6:	9c 87       	std	Y+12, r25	; 0x0c
   117a8:	ad 87       	std	Y+13, r26	; 0x0d
   117aa:	be 87       	std	Y+14, r27	; 0x0e
   117ac:	82 e0       	ldi	r24, 0x02	; 2
   117ae:	8f 87       	std	Y+15, r24	; 0x0f
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   117b0:	81 e0       	ldi	r24, 0x01	; 1
   117b2:	88 8b       	std	Y+16, r24	; 0x10

      if( i_x < 0)
   117b4:	8b 85       	ldd	r24, Y+11	; 0x0b
   117b6:	9c 85       	ldd	r25, Y+12	; 0x0c
   117b8:	ad 85       	ldd	r26, Y+13	; 0x0d
   117ba:	be 85       	ldd	r27, Y+14	; 0x0e
   117bc:	bb 23       	and	r27, r27
   117be:	8c f4       	brge	.+34     	; 0x117e2 <dcmUpdate+0x474>
      {
         i_x = -i_x;
   117c0:	8b 85       	ldd	r24, Y+11	; 0x0b
   117c2:	9c 85       	ldd	r25, Y+12	; 0x0c
   117c4:	ad 85       	ldd	r26, Y+13	; 0x0d
   117c6:	be 85       	ldd	r27, Y+14	; 0x0e
   117c8:	b0 95       	com	r27
   117ca:	a0 95       	com	r26
   117cc:	90 95       	com	r25
   117ce:	81 95       	neg	r24
   117d0:	9f 4f       	sbci	r25, 0xFF	; 255
   117d2:	af 4f       	sbci	r26, 0xFF	; 255
   117d4:	bf 4f       	sbci	r27, 0xFF	; 255
   117d6:	8b 87       	std	Y+11, r24	; 0x0b
   117d8:	9c 87       	std	Y+12, r25	; 0x0c
   117da:	ad 87       	std	Y+13, r26	; 0x0d
   117dc:	be 87       	std	Y+14, r27	; 0x0e
         c_sign = -1;
   117de:	8f ef       	ldi	r24, 0xFF	; 255
   117e0:	88 8b       	std	Y+16, r24	; 0x10
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   117e2:	8f 85       	ldd	r24, Y+15	; 0x0f
   117e4:	89 30       	cpi	r24, 0x09	; 9
   117e6:	a4 f1       	brlt	.+104    	; 0x11850 <dcmUpdate+0x4e2>
   117e8:	8f 85       	ldd	r24, Y+15	; 0x0f
   117ea:	81 31       	cpi	r24, 0x11	; 17
   117ec:	8c f5       	brge	.+98     	; 0x11850 <dcmUpdate+0x4e2>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   117ee:	8f 85       	ldd	r24, Y+15	; 0x0f
   117f0:	99 27       	eor	r25, r25
   117f2:	87 fd       	sbrc	r24, 7
   117f4:	90 95       	com	r25
   117f6:	20 e1       	ldi	r18, 0x10	; 16
   117f8:	30 e0       	ldi	r19, 0x00	; 0
   117fa:	28 1b       	sub	r18, r24
   117fc:	39 0b       	sbc	r19, r25
   117fe:	8b 85       	ldd	r24, Y+11	; 0x0b
   11800:	9c 85       	ldd	r25, Y+12	; 0x0c
   11802:	ad 85       	ldd	r26, Y+13	; 0x0d
   11804:	be 85       	ldd	r27, Y+14	; 0x0e
   11806:	04 c0       	rjmp	.+8      	; 0x11810 <dcmUpdate+0x4a2>
   11808:	88 0f       	add	r24, r24
   1180a:	99 1f       	adc	r25, r25
   1180c:	aa 1f       	adc	r26, r26
   1180e:	bb 1f       	adc	r27, r27
   11810:	2a 95       	dec	r18
   11812:	d2 f7       	brpl	.-12     	; 0x11808 <dcmUpdate+0x49a>
   11814:	9e 01       	movw	r18, r28
   11816:	28 59       	subi	r18, 0x98	; 152
   11818:	3f 4f       	sbci	r19, 0xFF	; 255
   1181a:	f9 01       	movw	r30, r18
   1181c:	80 83       	st	Z, r24
   1181e:	91 83       	std	Z+1, r25	; 0x01
   11820:	a2 83       	std	Z+2, r26	; 0x02
   11822:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   11824:	88 89       	ldd	r24, Y+16	; 0x10
   11826:	8f 3f       	cpi	r24, 0xFF	; 255
   11828:	61 f4       	brne	.+24     	; 0x11842 <dcmUpdate+0x4d4>
              return -t_tWord.as_word16[1];
   1182a:	ce 01       	movw	r24, r28
   1182c:	88 59       	subi	r24, 0x98	; 152
   1182e:	9f 4f       	sbci	r25, 0xFF	; 255
   11830:	dc 01       	movw	r26, r24
   11832:	12 96       	adiw	r26, 0x02	; 2
   11834:	8d 91       	ld	r24, X+
   11836:	9c 91       	ld	r25, X
   11838:	13 97       	sbiw	r26, 0x03	; 3
   1183a:	90 95       	com	r25
   1183c:	81 95       	neg	r24
   1183e:	9f 4f       	sbci	r25, 0xFF	; 255
   11840:	27 c0       	rjmp	.+78     	; 0x11890 <dcmUpdate+0x522>
           else
            return t_tWord.as_word16[1];
   11842:	ce 01       	movw	r24, r28
   11844:	88 59       	subi	r24, 0x98	; 152
   11846:	9f 4f       	sbci	r25, 0xFF	; 255
   11848:	fc 01       	movw	r30, r24
   1184a:	82 81       	ldd	r24, Z+2	; 0x02
   1184c:	93 81       	ldd	r25, Z+3	; 0x03
   1184e:	20 c0       	rjmp	.+64     	; 0x11890 <dcmUpdate+0x522>
      }

      i_x = i_x >> c_n;
   11850:	8f 85       	ldd	r24, Y+15	; 0x0f
   11852:	28 2f       	mov	r18, r24
   11854:	33 27       	eor	r19, r19
   11856:	27 fd       	sbrc	r18, 7
   11858:	30 95       	com	r19
   1185a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1185c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1185e:	ad 85       	ldd	r26, Y+13	; 0x0d
   11860:	be 85       	ldd	r27, Y+14	; 0x0e
   11862:	02 2e       	mov	r0, r18
   11864:	04 c0       	rjmp	.+8      	; 0x1186e <dcmUpdate+0x500>
   11866:	b5 95       	asr	r27
   11868:	a7 95       	ror	r26
   1186a:	97 95       	ror	r25
   1186c:	87 95       	ror	r24
   1186e:	0a 94       	dec	r0
   11870:	d2 f7       	brpl	.-12     	; 0x11866 <dcmUpdate+0x4f8>
   11872:	8b 87       	std	Y+11, r24	; 0x0b
   11874:	9c 87       	std	Y+12, r25	; 0x0c
   11876:	ad 87       	std	Y+13, r26	; 0x0d
   11878:	be 87       	std	Y+14, r27	; 0x0e
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   1187a:	88 89       	ldd	r24, Y+16	; 0x10
   1187c:	8f 3f       	cpi	r24, 0xFF	; 255
   1187e:	31 f4       	brne	.+12     	; 0x1188c <dcmUpdate+0x51e>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   11880:	8b 85       	ldd	r24, Y+11	; 0x0b
   11882:	9c 85       	ldd	r25, Y+12	; 0x0c
   11884:	90 95       	com	r25
   11886:	81 95       	neg	r24
   11888:	9f 4f       	sbci	r25, 0xFF	; 255
   1188a:	02 c0       	rjmp	.+4      	; 0x11890 <dcmUpdate+0x522>
       else
           return (int16_t)i_x;
   1188c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1188e:	9c 85       	ldd	r25, Y+12	; 0x0c
   ((int32_t)as_deltaGScale[0]); /*Q15 + Q15*/
   gt_insDev.t_gyro.as_scale[0] = utl_rShft32_16( i_sum, 2); /*Q15 to Q13*/
   11890:	80 93 3f 24 	sts	0x243F, r24
   11894:	90 93 40 24 	sts	0x2440, r25

   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[1] << 2) +
   11898:	80 91 41 24 	lds	r24, 0x2441
   1189c:	90 91 42 24 	lds	r25, 0x2442
   118a0:	aa 27       	eor	r26, r26
   118a2:	97 fd       	sbrc	r25, 7
   118a4:	a0 95       	com	r26
   118a6:	ba 2f       	mov	r27, r26
   118a8:	9c 01       	movw	r18, r24
   118aa:	ad 01       	movw	r20, r26
   118ac:	22 0f       	add	r18, r18
   118ae:	33 1f       	adc	r19, r19
   118b0:	44 1f       	adc	r20, r20
   118b2:	55 1f       	adc	r21, r21
   118b4:	22 0f       	add	r18, r18
   118b6:	33 1f       	adc	r19, r19
   118b8:	44 1f       	adc	r20, r20
   118ba:	55 1f       	adc	r21, r21
   ((int32_t)as_deltaGScale[1]); /*Q15 + Q15*/
   118bc:	89 a9       	sts	0x49, r24
   118be:	9a a9       	sts	0x4a, r25
   118c0:	aa 27       	eor	r26, r26
   118c2:	97 fd       	sbrc	r25, 7
   118c4:	a0 95       	com	r26
   118c6:	ba 2f       	mov	r27, r26
    *------------------------------------------------------------------------*/
   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[0] << 2) +
   ((int32_t)as_deltaGScale[0]); /*Q15 + Q15*/
   gt_insDev.t_gyro.as_scale[0] = utl_rShft32_16( i_sum, 2); /*Q15 to Q13*/

   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[1] << 2) +
   118c8:	82 0f       	add	r24, r18
   118ca:	93 1f       	adc	r25, r19
   118cc:	a4 1f       	adc	r26, r20
   118ce:	b5 1f       	adc	r27, r21
   118d0:	8f 83       	std	Y+7, r24	; 0x07
   118d2:	98 87       	std	Y+8, r25	; 0x08
   118d4:	a9 87       	std	Y+9, r26	; 0x09
   118d6:	ba 87       	std	Y+10, r27	; 0x0a
   118d8:	8f 81       	ldd	r24, Y+7	; 0x07
   118da:	98 85       	ldd	r25, Y+8	; 0x08
   118dc:	a9 85       	ldd	r26, Y+9	; 0x09
   118de:	ba 85       	ldd	r27, Y+10	; 0x0a
   118e0:	89 8b       	std	Y+17, r24	; 0x11
   118e2:	9a 8b       	std	Y+18, r25	; 0x12
   118e4:	ab 8b       	std	Y+19, r26	; 0x13
   118e6:	bc 8b       	std	Y+20, r27	; 0x14
   118e8:	82 e0       	ldi	r24, 0x02	; 2
   118ea:	8d 8b       	std	Y+21, r24	; 0x15
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   118ec:	81 e0       	ldi	r24, 0x01	; 1
   118ee:	8e 8b       	std	Y+22, r24	; 0x16

      if( i_x < 0)
   118f0:	89 89       	ldd	r24, Y+17	; 0x11
   118f2:	9a 89       	ldd	r25, Y+18	; 0x12
   118f4:	ab 89       	ldd	r26, Y+19	; 0x13
   118f6:	bc 89       	ldd	r27, Y+20	; 0x14
   118f8:	bb 23       	and	r27, r27
   118fa:	8c f4       	brge	.+34     	; 0x1191e <dcmUpdate+0x5b0>
      {
         i_x = -i_x;
   118fc:	89 89       	ldd	r24, Y+17	; 0x11
   118fe:	9a 89       	ldd	r25, Y+18	; 0x12
   11900:	ab 89       	ldd	r26, Y+19	; 0x13
   11902:	bc 89       	ldd	r27, Y+20	; 0x14
   11904:	b0 95       	com	r27
   11906:	a0 95       	com	r26
   11908:	90 95       	com	r25
   1190a:	81 95       	neg	r24
   1190c:	9f 4f       	sbci	r25, 0xFF	; 255
   1190e:	af 4f       	sbci	r26, 0xFF	; 255
   11910:	bf 4f       	sbci	r27, 0xFF	; 255
   11912:	89 8b       	std	Y+17, r24	; 0x11
   11914:	9a 8b       	std	Y+18, r25	; 0x12
   11916:	ab 8b       	std	Y+19, r26	; 0x13
   11918:	bc 8b       	std	Y+20, r27	; 0x14
         c_sign = -1;
   1191a:	8f ef       	ldi	r24, 0xFF	; 255
   1191c:	8e 8b       	std	Y+22, r24	; 0x16
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   1191e:	8d 89       	ldd	r24, Y+21	; 0x15
   11920:	89 30       	cpi	r24, 0x09	; 9
   11922:	a4 f1       	brlt	.+104    	; 0x1198c <dcmUpdate+0x61e>
   11924:	8d 89       	ldd	r24, Y+21	; 0x15
   11926:	81 31       	cpi	r24, 0x11	; 17
   11928:	8c f5       	brge	.+98     	; 0x1198c <dcmUpdate+0x61e>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   1192a:	8d 89       	ldd	r24, Y+21	; 0x15
   1192c:	99 27       	eor	r25, r25
   1192e:	87 fd       	sbrc	r24, 7
   11930:	90 95       	com	r25
   11932:	20 e1       	ldi	r18, 0x10	; 16
   11934:	30 e0       	ldi	r19, 0x00	; 0
   11936:	28 1b       	sub	r18, r24
   11938:	39 0b       	sbc	r19, r25
   1193a:	89 89       	ldd	r24, Y+17	; 0x11
   1193c:	9a 89       	ldd	r25, Y+18	; 0x12
   1193e:	ab 89       	ldd	r26, Y+19	; 0x13
   11940:	bc 89       	ldd	r27, Y+20	; 0x14
   11942:	04 c0       	rjmp	.+8      	; 0x1194c <dcmUpdate+0x5de>
   11944:	88 0f       	add	r24, r24
   11946:	99 1f       	adc	r25, r25
   11948:	aa 1f       	adc	r26, r26
   1194a:	bb 1f       	adc	r27, r27
   1194c:	2a 95       	dec	r18
   1194e:	d2 f7       	brpl	.-12     	; 0x11944 <dcmUpdate+0x5d6>
   11950:	9e 01       	movw	r18, r28
   11952:	2c 59       	subi	r18, 0x9C	; 156
   11954:	3f 4f       	sbci	r19, 0xFF	; 255
   11956:	f9 01       	movw	r30, r18
   11958:	80 83       	st	Z, r24
   1195a:	91 83       	std	Z+1, r25	; 0x01
   1195c:	a2 83       	std	Z+2, r26	; 0x02
   1195e:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   11960:	8e 89       	ldd	r24, Y+22	; 0x16
   11962:	8f 3f       	cpi	r24, 0xFF	; 255
   11964:	61 f4       	brne	.+24     	; 0x1197e <dcmUpdate+0x610>
              return -t_tWord.as_word16[1];
   11966:	ce 01       	movw	r24, r28
   11968:	8c 59       	subi	r24, 0x9C	; 156
   1196a:	9f 4f       	sbci	r25, 0xFF	; 255
   1196c:	dc 01       	movw	r26, r24
   1196e:	12 96       	adiw	r26, 0x02	; 2
   11970:	8d 91       	ld	r24, X+
   11972:	9c 91       	ld	r25, X
   11974:	13 97       	sbiw	r26, 0x03	; 3
   11976:	90 95       	com	r25
   11978:	81 95       	neg	r24
   1197a:	9f 4f       	sbci	r25, 0xFF	; 255
   1197c:	27 c0       	rjmp	.+78     	; 0x119cc <dcmUpdate+0x65e>
           else
            return t_tWord.as_word16[1];
   1197e:	ce 01       	movw	r24, r28
   11980:	8c 59       	subi	r24, 0x9C	; 156
   11982:	9f 4f       	sbci	r25, 0xFF	; 255
   11984:	fc 01       	movw	r30, r24
   11986:	82 81       	ldd	r24, Z+2	; 0x02
   11988:	93 81       	ldd	r25, Z+3	; 0x03
   1198a:	20 c0       	rjmp	.+64     	; 0x119cc <dcmUpdate+0x65e>
      }

      i_x = i_x >> c_n;
   1198c:	8d 89       	ldd	r24, Y+21	; 0x15
   1198e:	28 2f       	mov	r18, r24
   11990:	33 27       	eor	r19, r19
   11992:	27 fd       	sbrc	r18, 7
   11994:	30 95       	com	r19
   11996:	89 89       	ldd	r24, Y+17	; 0x11
   11998:	9a 89       	ldd	r25, Y+18	; 0x12
   1199a:	ab 89       	ldd	r26, Y+19	; 0x13
   1199c:	bc 89       	ldd	r27, Y+20	; 0x14
   1199e:	02 2e       	mov	r0, r18
   119a0:	04 c0       	rjmp	.+8      	; 0x119aa <dcmUpdate+0x63c>
   119a2:	b5 95       	asr	r27
   119a4:	a7 95       	ror	r26
   119a6:	97 95       	ror	r25
   119a8:	87 95       	ror	r24
   119aa:	0a 94       	dec	r0
   119ac:	d2 f7       	brpl	.-12     	; 0x119a2 <dcmUpdate+0x634>
   119ae:	89 8b       	std	Y+17, r24	; 0x11
   119b0:	9a 8b       	std	Y+18, r25	; 0x12
   119b2:	ab 8b       	std	Y+19, r26	; 0x13
   119b4:	bc 8b       	std	Y+20, r27	; 0x14
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   119b6:	8e 89       	ldd	r24, Y+22	; 0x16
   119b8:	8f 3f       	cpi	r24, 0xFF	; 255
   119ba:	31 f4       	brne	.+12     	; 0x119c8 <dcmUpdate+0x65a>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   119bc:	89 89       	ldd	r24, Y+17	; 0x11
   119be:	9a 89       	ldd	r25, Y+18	; 0x12
   119c0:	90 95       	com	r25
   119c2:	81 95       	neg	r24
   119c4:	9f 4f       	sbci	r25, 0xFF	; 255
   119c6:	02 c0       	rjmp	.+4      	; 0x119cc <dcmUpdate+0x65e>
       else
           return (int16_t)i_x;
   119c8:	89 89       	ldd	r24, Y+17	; 0x11
   119ca:	9a 89       	ldd	r25, Y+18	; 0x12
   ((int32_t)as_deltaGScale[1]); /*Q15 + Q15*/
   gt_insDev.t_gyro.as_scale[1] = utl_rShft32_16( i_sum, 2); /*Q15 to Q13*/
   119cc:	80 93 41 24 	sts	0x2441, r24
   119d0:	90 93 42 24 	sts	0x2442, r25

   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[2] << 2) +
   119d4:	80 91 43 24 	lds	r24, 0x2443
   119d8:	90 91 44 24 	lds	r25, 0x2444
   119dc:	aa 27       	eor	r26, r26
   119de:	97 fd       	sbrc	r25, 7
   119e0:	a0 95       	com	r26
   119e2:	ba 2f       	mov	r27, r26
   119e4:	9c 01       	movw	r18, r24
   119e6:	ad 01       	movw	r20, r26
   119e8:	22 0f       	add	r18, r18
   119ea:	33 1f       	adc	r19, r19
   119ec:	44 1f       	adc	r20, r20
   119ee:	55 1f       	adc	r21, r21
   119f0:	22 0f       	add	r18, r18
   119f2:	33 1f       	adc	r19, r19
   119f4:	44 1f       	adc	r20, r20
   119f6:	55 1f       	adc	r21, r21
   ((int32_t)as_deltaGScale[2]); /*Q15 + Q15*/
   119f8:	8b a9       	sts	0x4b, r24
   119fa:	9c a9       	sts	0x4c, r25
   119fc:	aa 27       	eor	r26, r26
   119fe:	97 fd       	sbrc	r25, 7
   11a00:	a0 95       	com	r26
   11a02:	ba 2f       	mov	r27, r26

   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[1] << 2) +
   ((int32_t)as_deltaGScale[1]); /*Q15 + Q15*/
   gt_insDev.t_gyro.as_scale[1] = utl_rShft32_16( i_sum, 2); /*Q15 to Q13*/

   i_sum = ((int32_t)gt_insDev.t_gyro.as_scale[2] << 2) +
   11a04:	82 0f       	add	r24, r18
   11a06:	93 1f       	adc	r25, r19
   11a08:	a4 1f       	adc	r26, r20
   11a0a:	b5 1f       	adc	r27, r21
   11a0c:	8f 83       	std	Y+7, r24	; 0x07
   11a0e:	98 87       	std	Y+8, r25	; 0x08
   11a10:	a9 87       	std	Y+9, r26	; 0x09
   11a12:	ba 87       	std	Y+10, r27	; 0x0a
   11a14:	8f 81       	ldd	r24, Y+7	; 0x07
   11a16:	98 85       	ldd	r25, Y+8	; 0x08
   11a18:	a9 85       	ldd	r26, Y+9	; 0x09
   11a1a:	ba 85       	ldd	r27, Y+10	; 0x0a
   11a1c:	8f 8b       	std	Y+23, r24	; 0x17
   11a1e:	98 8f       	std	Y+24, r25	; 0x18
   11a20:	a9 8f       	std	Y+25, r26	; 0x19
   11a22:	ba 8f       	std	Y+26, r27	; 0x1a
   11a24:	82 e0       	ldi	r24, 0x02	; 2
   11a26:	8b 8f       	std	Y+27, r24	; 0x1b
    *------------------------------------------------------------------------*/
   static inline int16_t __attribute__((always_inline)) \
   utl_rShft32_16( int32_t i_x, int8_t c_n)
   {
      t_typePunn t_tWord;
      int8_t c_sign = 1;
   11a28:	81 e0       	ldi	r24, 0x01	; 1
   11a2a:	8c 8f       	std	Y+28, r24	; 0x1c

      if( i_x < 0)
   11a2c:	8f 89       	ldd	r24, Y+23	; 0x17
   11a2e:	98 8d       	ldd	r25, Y+24	; 0x18
   11a30:	a9 8d       	ldd	r26, Y+25	; 0x19
   11a32:	ba 8d       	ldd	r27, Y+26	; 0x1a
   11a34:	bb 23       	and	r27, r27
   11a36:	8c f4       	brge	.+34     	; 0x11a5a <dcmUpdate+0x6ec>
      {
         i_x = -i_x;
   11a38:	8f 89       	ldd	r24, Y+23	; 0x17
   11a3a:	98 8d       	ldd	r25, Y+24	; 0x18
   11a3c:	a9 8d       	ldd	r26, Y+25	; 0x19
   11a3e:	ba 8d       	ldd	r27, Y+26	; 0x1a
   11a40:	b0 95       	com	r27
   11a42:	a0 95       	com	r26
   11a44:	90 95       	com	r25
   11a46:	81 95       	neg	r24
   11a48:	9f 4f       	sbci	r25, 0xFF	; 255
   11a4a:	af 4f       	sbci	r26, 0xFF	; 255
   11a4c:	bf 4f       	sbci	r27, 0xFF	; 255
   11a4e:	8f 8b       	std	Y+23, r24	; 0x17
   11a50:	98 8f       	std	Y+24, r25	; 0x18
   11a52:	a9 8f       	std	Y+25, r26	; 0x19
   11a54:	ba 8f       	std	Y+26, r27	; 0x1a
         c_sign = -1;
   11a56:	8f ef       	ldi	r24, 0xFF	; 255
   11a58:	8c 8f       	std	Y+28, r24	; 0x1c
       *      = UPPER[(0x0400 0000) << 1]
       *      = UPPER[0x0800 0000]
       *      = 0x0800
       * In this example the pivot point is the second 16-bit word.
       *---------------------------------------------------------------------*/
      if( (c_n > 8) && (c_n <= 16)) /*Pivot-point = second 16-bit word...*/
   11a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11a5c:	89 30       	cpi	r24, 0x09	; 9
   11a5e:	a4 f1       	brlt	.+104    	; 0x11ac8 <dcmUpdate+0x75a>
   11a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11a62:	81 31       	cpi	r24, 0x11	; 17
   11a64:	8c f5       	brge	.+98     	; 0x11ac8 <dcmUpdate+0x75a>
      {
         /*------------------------------------------------------------------*
          * The least number of shifts occur if the first 16-bit word is
          * shifted up into the second 16-bit word...
          *------------------------------------------------------------------*/
         t_tWord.i_word32 = i_x << (16 - c_n);
   11a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11a68:	99 27       	eor	r25, r25
   11a6a:	87 fd       	sbrc	r24, 7
   11a6c:	90 95       	com	r25
   11a6e:	20 e1       	ldi	r18, 0x10	; 16
   11a70:	30 e0       	ldi	r19, 0x00	; 0
   11a72:	28 1b       	sub	r18, r24
   11a74:	39 0b       	sbc	r19, r25
   11a76:	8f 89       	ldd	r24, Y+23	; 0x17
   11a78:	98 8d       	ldd	r25, Y+24	; 0x18
   11a7a:	a9 8d       	ldd	r26, Y+25	; 0x19
   11a7c:	ba 8d       	ldd	r27, Y+26	; 0x1a
   11a7e:	04 c0       	rjmp	.+8      	; 0x11a88 <dcmUpdate+0x71a>
   11a80:	88 0f       	add	r24, r24
   11a82:	99 1f       	adc	r25, r25
   11a84:	aa 1f       	adc	r26, r26
   11a86:	bb 1f       	adc	r27, r27
   11a88:	2a 95       	dec	r18
   11a8a:	d2 f7       	brpl	.-12     	; 0x11a80 <dcmUpdate+0x712>
   11a8c:	9e 01       	movw	r18, r28
   11a8e:	20 5a       	subi	r18, 0xA0	; 160
   11a90:	3f 4f       	sbci	r19, 0xFF	; 255
   11a92:	f9 01       	movw	r30, r18
   11a94:	80 83       	st	Z, r24
   11a96:	91 83       	std	Z+1, r25	; 0x01
   11a98:	a2 83       	std	Z+2, r26	; 0x02
   11a9a:	b3 83       	std	Z+3, r27	; 0x03

         /*------------------------------------------------------------------*
          * Use ptr's in order to return a 16-bit word starting from the
          * location of the second 16-bit word.
          *------------------------------------------------------------------*/
         if( c_sign == -1)
   11a9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   11a9e:	8f 3f       	cpi	r24, 0xFF	; 255
   11aa0:	61 f4       	brne	.+24     	; 0x11aba <dcmUpdate+0x74c>
              return -t_tWord.as_word16[1];
   11aa2:	ce 01       	movw	r24, r28
   11aa4:	80 5a       	subi	r24, 0xA0	; 160
   11aa6:	9f 4f       	sbci	r25, 0xFF	; 255
   11aa8:	dc 01       	movw	r26, r24
   11aaa:	12 96       	adiw	r26, 0x02	; 2
   11aac:	8d 91       	ld	r24, X+
   11aae:	9c 91       	ld	r25, X
   11ab0:	13 97       	sbiw	r26, 0x03	; 3
   11ab2:	90 95       	com	r25
   11ab4:	81 95       	neg	r24
   11ab6:	9f 4f       	sbci	r25, 0xFF	; 255
   11ab8:	27 c0       	rjmp	.+78     	; 0x11b08 <dcmUpdate+0x79a>
           else
            return t_tWord.as_word16[1];
   11aba:	ce 01       	movw	r24, r28
   11abc:	80 5a       	subi	r24, 0xA0	; 160
   11abe:	9f 4f       	sbci	r25, 0xFF	; 255
   11ac0:	fc 01       	movw	r30, r24
   11ac2:	82 81       	ldd	r24, Z+2	; 0x02
   11ac4:	93 81       	ldd	r25, Z+3	; 0x03
   11ac6:	20 c0       	rjmp	.+64     	; 0x11b08 <dcmUpdate+0x79a>
      }

      i_x = i_x >> c_n;
   11ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   11aca:	28 2f       	mov	r18, r24
   11acc:	33 27       	eor	r19, r19
   11ace:	27 fd       	sbrc	r18, 7
   11ad0:	30 95       	com	r19
   11ad2:	8f 89       	ldd	r24, Y+23	; 0x17
   11ad4:	98 8d       	ldd	r25, Y+24	; 0x18
   11ad6:	a9 8d       	ldd	r26, Y+25	; 0x19
   11ad8:	ba 8d       	ldd	r27, Y+26	; 0x1a
   11ada:	02 2e       	mov	r0, r18
   11adc:	04 c0       	rjmp	.+8      	; 0x11ae6 <dcmUpdate+0x778>
   11ade:	b5 95       	asr	r27
   11ae0:	a7 95       	ror	r26
   11ae2:	97 95       	ror	r25
   11ae4:	87 95       	ror	r24
   11ae6:	0a 94       	dec	r0
   11ae8:	d2 f7       	brpl	.-12     	; 0x11ade <dcmUpdate+0x770>
   11aea:	8f 8b       	std	Y+23, r24	; 0x17
   11aec:	98 8f       	std	Y+24, r25	; 0x18
   11aee:	a9 8f       	std	Y+25, r26	; 0x19
   11af0:	ba 8f       	std	Y+26, r27	; 0x1a
      /*---------------------------------------------------------------------*
       * The least number of shifts occur if the 32-bit word is shifted down
       * and a 16-bit word is returned starting from the location of the first
       * 16-bit word.
       *---------------------------------------------------------------------*/
      if( c_sign == -1)
   11af2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   11af4:	8f 3f       	cpi	r24, 0xFF	; 255
   11af6:	31 f4       	brne	.+12     	; 0x11b04 <dcmUpdate+0x796>
         return -(int16_t)i_x; /*Pivot-point = first 16-bit word...*/
   11af8:	8f 89       	ldd	r24, Y+23	; 0x17
   11afa:	98 8d       	ldd	r25, Y+24	; 0x18
   11afc:	90 95       	com	r25
   11afe:	81 95       	neg	r24
   11b00:	9f 4f       	sbci	r25, 0xFF	; 255
   11b02:	02 c0       	rjmp	.+4      	; 0x11b08 <dcmUpdate+0x79a>
       else
           return (int16_t)i_x;
   11b04:	8f 89       	ldd	r24, Y+23	; 0x17
   11b06:	98 8d       	ldd	r25, Y+24	; 0x18
   ((int32_t)as_deltaGScale[2]); /*Q15 + Q15*/
   gt_insDev.t_gyro.as_scale[2] = utl_rShft32_16( i_sum, 2); /*Q15 to Q13*/
   11b08:	80 93 43 24 	sts	0x2443, r24
   11b0c:	90 93 44 24 	sts	0x2444, r25

   /*------------------------------------------------------------------------*
    * Perform DCM correction according to eq eq 12.7 of [1]
    *------------------------------------------------------------------------*/
   dcmCorrect( as_deltaAtt);
   11b10:	ce 01       	movw	r24, r28
   11b12:	89 96       	adiw	r24, 0x29	; 41
   11b14:	0e 94 40 75 	call	0xea80	; 0xea80 <dcmCorrect>

   if( gt_insDev.c_initialLockCount < INS_KALMAN_LOCK_WAIT)
   11b18:	80 91 fa 2a 	lds	r24, 0x2AFA
   11b1c:	84 36       	cpi	r24, 0x64	; 100
   11b1e:	28 f4       	brcc	.+10     	; 0x11b2a <dcmUpdate+0x7bc>
      gt_insDev.c_initialLockCount++;
   11b20:	80 91 fa 2a 	lds	r24, 0x2AFA
   11b24:	8f 5f       	subi	r24, 0xFF	; 255
   11b26:	80 93 fa 2a 	sts	0x2AFA, r24

   /*------------------------------------------------------------------------*
    * Has the Kalman filter lost lock? If so, then reinitialize the DCM
    * based on raw attitude and heading.
    *------------------------------------------------------------------------*/
   if( gt_insDev.b_lossOfLock == true)
   11b2a:	80 91 f7 2a 	lds	r24, 0x2AF7
   11b2e:	88 23       	and	r24, r24
   11b30:	11 f0       	breq	.+4      	; 0x11b36 <dcmUpdate+0x7c8>
   {
      insReset();
   11b32:	0e 94 56 89 	call	0x112ac	; 0x112ac <insReset>
{
 char ac_buff[100];
 int16_t as_att1[3];
 int16_t as_att2[3];

 gc_debugUpdateCount++;
   11b36:	80 91 f6 23 	lds	r24, 0x23F6
   11b3a:	8f 5f       	subi	r24, 0xFF	; 255
   11b3c:	80 93 f6 23 	sts	0x23F6, r24

 if( gc_debugUpdateCount == 5)
   11b40:	80 91 f6 23 	lds	r24, 0x23F6
   11b44:	85 30       	cpi	r24, 0x05	; 5
   11b46:	09 f0       	breq	.+2      	; 0x11b4a <dcmUpdate+0x7dc>
   11b48:	1d c1       	rjmp	.+570    	; 0x11d84 <dcmUpdate+0xa16>
 {
    gc_debugUpdateCount = 0;
   11b4a:	10 92 f6 23 	sts	0x23F6, r1
    as_acc[0], as_acc[1],  as_acc[2]);
    arb_printf( PRINTF_DBG_HIGH,
                ac_buff);
#endif

    getAttitudeInDeg( gt_insDev.as_dcmAttitude,
   11b4e:	8a e6       	ldi	r24, 0x6A	; 106
   11b50:	94 e2       	ldi	r25, 0x24	; 36
                      as_att1);
   11b52:	9e 01       	movw	r18, r28
   11b54:	24 59       	subi	r18, 0x94	; 148
   11b56:	3f 4f       	sbci	r19, 0xFF	; 255
    as_acc[0], as_acc[1],  as_acc[2]);
    arb_printf( PRINTF_DBG_HIGH,
                ac_buff);
#endif

    getAttitudeInDeg( gt_insDev.as_dcmAttitude,
   11b58:	b9 01       	movw	r22, r18
   11b5a:	0e 94 fb 80 	call	0x101f6	; 0x101f6 <getAttitudeInDeg>
                      as_att1);

    getAttitudeInDeg( gt_insDev.as_rawAtt,
   11b5e:	80 e7       	ldi	r24, 0x70	; 112
   11b60:	94 e2       	ldi	r25, 0x24	; 36
                      as_att2);
   11b62:	9e 01       	movw	r18, r28
   11b64:	2e 58       	subi	r18, 0x8E	; 142
   11b66:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

    getAttitudeInDeg( gt_insDev.as_dcmAttitude,
                      as_att1);

    getAttitudeInDeg( gt_insDev.as_rawAtt,
   11b68:	b9 01       	movw	r22, r18
   11b6a:	0e 94 fb 80 	call	0x101f6	; 0x101f6 <getAttitudeInDeg>
                      as_att2);

    sprintf_P( (char *)ac_buff, PSTR("roll = [%4d,%4d], pitch = [%4d,%4d], yaw = [%4d,%4d], dynamics = %d\r"),
   11b6e:	0f 2e       	mov	r0, r31
   11b70:	f3 e2       	ldi	r31, 0x23	; 35
   11b72:	cf 2e       	mov	r12, r31
   11b74:	f2 e0       	ldi	r31, 0x02	; 2
   11b76:	df 2e       	mov	r13, r31
   11b78:	f0 2d       	mov	r31, r0
   11b7a:	ce 01       	movw	r24, r28
   11b7c:	8e 58       	subi	r24, 0x8E	; 142
   11b7e:	9f 4f       	sbci	r25, 0xFF	; 255
   11b80:	dc 01       	movw	r26, r24
   11b82:	ed 90       	ld	r14, X+
   11b84:	fc 90       	ld	r15, X
   11b86:	ce 01       	movw	r24, r28
   11b88:	84 59       	subi	r24, 0x94	; 148
   11b8a:	9f 4f       	sbci	r25, 0xFF	; 255
   11b8c:	fc 01       	movw	r30, r24
   11b8e:	00 81       	ld	r16, Z
   11b90:	11 81       	ldd	r17, Z+1	; 0x01
   11b92:	ce 01       	movw	r24, r28
   11b94:	8e 58       	subi	r24, 0x8E	; 142
   11b96:	9f 4f       	sbci	r25, 0xFF	; 255
   11b98:	fc 01       	movw	r30, r24
   11b9a:	a2 81       	ldd	r26, Z+2	; 0x02
   11b9c:	b3 81       	ldd	r27, Z+3	; 0x03
   11b9e:	ce 01       	movw	r24, r28
   11ba0:	84 59       	subi	r24, 0x94	; 148
   11ba2:	9f 4f       	sbci	r25, 0xFF	; 255
   11ba4:	fc 01       	movw	r30, r24
   11ba6:	02 80       	ldd	r0, Z+2	; 0x02
   11ba8:	f3 81       	ldd	r31, Z+3	; 0x03
   11baa:	e0 2d       	mov	r30, r0
   11bac:	c4 52       	subi	r28, 0x24	; 36
   11bae:	df 4f       	sbci	r29, 0xFF	; 255
   11bb0:	e8 83       	st	Y, r30
   11bb2:	f9 83       	std	Y+1, r31	; 0x01
   11bb4:	cc 5d       	subi	r28, 0xDC	; 220
   11bb6:	d0 40       	sbci	r29, 0x00	; 0
   11bb8:	ce 01       	movw	r24, r28
   11bba:	8e 58       	subi	r24, 0x8E	; 142
   11bbc:	9f 4f       	sbci	r25, 0xFF	; 255
   11bbe:	fc 01       	movw	r30, r24
   11bc0:	64 81       	ldd	r22, Z+4	; 0x04
   11bc2:	75 81       	ldd	r23, Z+5	; 0x05
   11bc4:	ce 01       	movw	r24, r28
   11bc6:	84 59       	subi	r24, 0x94	; 148
   11bc8:	9f 4f       	sbci	r25, 0xFF	; 255
   11bca:	fc 01       	movw	r30, r24
   11bcc:	44 81       	ldd	r20, Z+4	; 0x04
   11bce:	55 81       	ldd	r21, Z+5	; 0x05
    as_att2[0], as_att1[0],  as_att2[1], as_att1[1], as_att2[2], as_att1[2], gt_insDev.c_platMovingCount);
   11bd0:	80 91 f3 2a 	lds	r24, 0x2AF3
                      as_att1);

    getAttitudeInDeg( gt_insDev.as_rawAtt,
                      as_att2);

    sprintf_P( (char *)ac_buff, PSTR("roll = [%4d,%4d], pitch = [%4d,%4d], yaw = [%4d,%4d], dynamics = %d\r"),
   11bd4:	28 2f       	mov	r18, r24
   11bd6:	33 27       	eor	r19, r19
   11bd8:	27 fd       	sbrc	r18, 7
   11bda:	30 95       	com	r19
   11bdc:	8d b7       	in	r24, 0x3d	; 61
   11bde:	9e b7       	in	r25, 0x3e	; 62
   11be0:	42 97       	sbiw	r24, 0x12	; 18
   11be2:	8d bf       	out	0x3d, r24	; 61
   11be4:	9e bf       	out	0x3e, r25	; 62
   11be6:	8d b7       	in	r24, 0x3d	; 61
   11be8:	9e b7       	in	r25, 0x3e	; 62
   11bea:	01 96       	adiw	r24, 0x01	; 1
   11bec:	0f 2e       	mov	r0, r31
   11bee:	f8 e7       	ldi	r31, 0x78	; 120
   11bf0:	af 2e       	mov	r10, r31
   11bf2:	bb 24       	eor	r11, r11
   11bf4:	f0 2d       	mov	r31, r0
   11bf6:	ac 0e       	add	r10, r28
   11bf8:	bd 1e       	adc	r11, r29
   11bfa:	fc 01       	movw	r30, r24
   11bfc:	a0 82       	st	Z, r10
   11bfe:	b1 82       	std	Z+1, r11	; 0x01
   11c00:	fc 01       	movw	r30, r24
   11c02:	c2 82       	std	Z+2, r12	; 0x02
   11c04:	d3 82       	std	Z+3, r13	; 0x03
   11c06:	fc 01       	movw	r30, r24
   11c08:	e4 82       	std	Z+4, r14	; 0x04
   11c0a:	f5 82       	std	Z+5, r15	; 0x05
   11c0c:	fc 01       	movw	r30, r24
   11c0e:	06 83       	std	Z+6, r16	; 0x06
   11c10:	17 83       	std	Z+7, r17	; 0x07
   11c12:	fc 01       	movw	r30, r24
   11c14:	a0 87       	std	Z+8, r26	; 0x08
   11c16:	b1 87       	std	Z+9, r27	; 0x09
   11c18:	c4 52       	subi	r28, 0x24	; 36
   11c1a:	df 4f       	sbci	r29, 0xFF	; 255
   11c1c:	e8 81       	ld	r30, Y
   11c1e:	f9 81       	ldd	r31, Y+1	; 0x01
   11c20:	cc 5d       	subi	r28, 0xDC	; 220
   11c22:	d0 40       	sbci	r29, 0x00	; 0
   11c24:	dc 01       	movw	r26, r24
   11c26:	1a 96       	adiw	r26, 0x0a	; 10
   11c28:	ed 93       	st	X+, r30
   11c2a:	fc 93       	st	X, r31
   11c2c:	1b 97       	sbiw	r26, 0x0b	; 11
   11c2e:	dc 01       	movw	r26, r24
   11c30:	1c 96       	adiw	r26, 0x0c	; 12
   11c32:	6d 93       	st	X+, r22
   11c34:	7c 93       	st	X, r23
   11c36:	1d 97       	sbiw	r26, 0x0d	; 13
   11c38:	fc 01       	movw	r30, r24
   11c3a:	46 87       	std	Z+14, r20	; 0x0e
   11c3c:	57 87       	std	Z+15, r21	; 0x0f
   11c3e:	dc 01       	movw	r26, r24
   11c40:	50 96       	adiw	r26, 0x10	; 16
   11c42:	2d 93       	st	X+, r18
   11c44:	3c 93       	st	X, r19
   11c46:	51 97       	sbiw	r26, 0x11	; 17
   11c48:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   11c4c:	ed b7       	in	r30, 0x3d	; 61
   11c4e:	fe b7       	in	r31, 0x3e	; 62
   11c50:	72 96       	adiw	r30, 0x12	; 18
   11c52:	ed bf       	out	0x3d, r30	; 61
   11c54:	fe bf       	out	0x3e, r31	; 62
    as_att2[0], as_att1[0],  as_att2[1], as_att1[1], as_att2[2], as_att1[2], gt_insDev.c_platMovingCount);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
                ac_buff);
   11c56:	9e 01       	movw	r18, r28
   11c58:	28 58       	subi	r18, 0x88	; 136
   11c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    getAttitudeInDeg( gt_insDev.as_rawAtt,
                      as_att2);

    sprintf_P( (char *)ac_buff, PSTR("roll = [%4d,%4d], pitch = [%4d,%4d], yaw = [%4d,%4d], dynamics = %d\r"),
    as_att2[0], as_att1[0],  as_att2[1], as_att1[1], as_att2[2], as_att1[2], gt_insDev.c_platMovingCount);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
   11c5c:	84 e4       	ldi	r24, 0x44	; 68
   11c5e:	b9 01       	movw	r22, r18
   11c60:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
                ac_buff);

    sprintf_P( (char *)ac_buff, PSTR("gyro scale x = %4d, gyro scale y = %4d, gyro scale z = %4d\r"),
   11c64:	08 e6       	ldi	r16, 0x68	; 104
   11c66:	12 e0       	ldi	r17, 0x02	; 2
   11c68:	c4 52       	subi	r28, 0x24	; 36
   11c6a:	df 4f       	sbci	r29, 0xFF	; 255
   11c6c:	08 83       	st	Y, r16
   11c6e:	19 83       	std	Y+1, r17	; 0x01
   11c70:	cc 5d       	subi	r28, 0xDC	; 220
   11c72:	d0 40       	sbci	r29, 0x00	; 0
   11c74:	60 91 3f 24 	lds	r22, 0x243F
   11c78:	70 91 40 24 	lds	r23, 0x2440
   11c7c:	40 91 41 24 	lds	r20, 0x2441
   11c80:	50 91 42 24 	lds	r21, 0x2442
   11c84:	20 91 43 24 	lds	r18, 0x2443
   11c88:	30 91 44 24 	lds	r19, 0x2444
   11c8c:	8d b7       	in	r24, 0x3d	; 61
   11c8e:	9e b7       	in	r25, 0x3e	; 62
   11c90:	0a 97       	sbiw	r24, 0x0a	; 10
   11c92:	8d bf       	out	0x3d, r24	; 61
   11c94:	9e bf       	out	0x3e, r25	; 62
   11c96:	8d b7       	in	r24, 0x3d	; 61
   11c98:	9e b7       	in	r25, 0x3e	; 62
   11c9a:	01 96       	adiw	r24, 0x01	; 1
   11c9c:	de 01       	movw	r26, r28
   11c9e:	a8 58       	subi	r26, 0x88	; 136
   11ca0:	bf 4f       	sbci	r27, 0xFF	; 255
   11ca2:	fc 01       	movw	r30, r24
   11ca4:	a0 83       	st	Z, r26
   11ca6:	b1 83       	std	Z+1, r27	; 0x01
   11ca8:	c4 52       	subi	r28, 0x24	; 36
   11caa:	df 4f       	sbci	r29, 0xFF	; 255
   11cac:	e8 81       	ld	r30, Y
   11cae:	f9 81       	ldd	r31, Y+1	; 0x01
   11cb0:	cc 5d       	subi	r28, 0xDC	; 220
   11cb2:	d0 40       	sbci	r29, 0x00	; 0
   11cb4:	dc 01       	movw	r26, r24
   11cb6:	12 96       	adiw	r26, 0x02	; 2
   11cb8:	ed 93       	st	X+, r30
   11cba:	fc 93       	st	X, r31
   11cbc:	13 97       	sbiw	r26, 0x03	; 3
   11cbe:	dc 01       	movw	r26, r24
   11cc0:	14 96       	adiw	r26, 0x04	; 4
   11cc2:	6d 93       	st	X+, r22
   11cc4:	7c 93       	st	X, r23
   11cc6:	15 97       	sbiw	r26, 0x05	; 5
   11cc8:	fc 01       	movw	r30, r24
   11cca:	46 83       	std	Z+6, r20	; 0x06
   11ccc:	57 83       	std	Z+7, r21	; 0x07
   11cce:	dc 01       	movw	r26, r24
   11cd0:	18 96       	adiw	r26, 0x08	; 8
   11cd2:	2d 93       	st	X+, r18
   11cd4:	3c 93       	st	X, r19
   11cd6:	19 97       	sbiw	r26, 0x09	; 9
   11cd8:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   11cdc:	ed b7       	in	r30, 0x3d	; 61
   11cde:	fe b7       	in	r31, 0x3e	; 62
   11ce0:	3a 96       	adiw	r30, 0x0a	; 10
   11ce2:	ed bf       	out	0x3d, r30	; 61
   11ce4:	fe bf       	out	0x3e, r31	; 62
    gt_insDev.t_gyro.as_scale[0], gt_insDev.t_gyro.as_scale[1],  gt_insDev.t_gyro.as_scale[2]);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
                ac_buff);
   11ce6:	9e 01       	movw	r18, r28
   11ce8:	28 58       	subi	r18, 0x88	; 136
   11cea:	3f 4f       	sbci	r19, 0xFF	; 255
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
                ac_buff);

    sprintf_P( (char *)ac_buff, PSTR("gyro scale x = %4d, gyro scale y = %4d, gyro scale z = %4d\r"),
    gt_insDev.t_gyro.as_scale[0], gt_insDev.t_gyro.as_scale[1],  gt_insDev.t_gyro.as_scale[2]);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
   11cec:	84 e4       	ldi	r24, 0x44	; 68
   11cee:	b9 01       	movw	r22, r18
   11cf0:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
                ac_buff);

    sprintf_P( (char *)ac_buff, PSTR("gyro bias x = %4d, gyro bias y = %4d, gyro bias z = %4d\r"),
   11cf4:	04 ea       	ldi	r16, 0xA4	; 164
   11cf6:	12 e0       	ldi	r17, 0x02	; 2
   11cf8:	c4 52       	subi	r28, 0x24	; 36
   11cfa:	df 4f       	sbci	r29, 0xFF	; 255
   11cfc:	08 83       	st	Y, r16
   11cfe:	19 83       	std	Y+1, r17	; 0x01
   11d00:	cc 5d       	subi	r28, 0xDC	; 220
   11d02:	d0 40       	sbci	r29, 0x00	; 0
   11d04:	60 91 33 24 	lds	r22, 0x2433
   11d08:	70 91 34 24 	lds	r23, 0x2434
   11d0c:	40 91 35 24 	lds	r20, 0x2435
   11d10:	50 91 36 24 	lds	r21, 0x2436
   11d14:	20 91 37 24 	lds	r18, 0x2437
   11d18:	30 91 38 24 	lds	r19, 0x2438
   11d1c:	8d b7       	in	r24, 0x3d	; 61
   11d1e:	9e b7       	in	r25, 0x3e	; 62
   11d20:	0a 97       	sbiw	r24, 0x0a	; 10
   11d22:	8d bf       	out	0x3d, r24	; 61
   11d24:	9e bf       	out	0x3e, r25	; 62
   11d26:	8d b7       	in	r24, 0x3d	; 61
   11d28:	9e b7       	in	r25, 0x3e	; 62
   11d2a:	01 96       	adiw	r24, 0x01	; 1
   11d2c:	de 01       	movw	r26, r28
   11d2e:	a8 58       	subi	r26, 0x88	; 136
   11d30:	bf 4f       	sbci	r27, 0xFF	; 255
   11d32:	fc 01       	movw	r30, r24
   11d34:	a0 83       	st	Z, r26
   11d36:	b1 83       	std	Z+1, r27	; 0x01
   11d38:	c4 52       	subi	r28, 0x24	; 36
   11d3a:	df 4f       	sbci	r29, 0xFF	; 255
   11d3c:	e8 81       	ld	r30, Y
   11d3e:	f9 81       	ldd	r31, Y+1	; 0x01
   11d40:	cc 5d       	subi	r28, 0xDC	; 220
   11d42:	d0 40       	sbci	r29, 0x00	; 0
   11d44:	dc 01       	movw	r26, r24
   11d46:	12 96       	adiw	r26, 0x02	; 2
   11d48:	ed 93       	st	X+, r30
   11d4a:	fc 93       	st	X, r31
   11d4c:	13 97       	sbiw	r26, 0x03	; 3
   11d4e:	dc 01       	movw	r26, r24
   11d50:	14 96       	adiw	r26, 0x04	; 4
   11d52:	6d 93       	st	X+, r22
   11d54:	7c 93       	st	X, r23
   11d56:	15 97       	sbiw	r26, 0x05	; 5
   11d58:	fc 01       	movw	r30, r24
   11d5a:	46 83       	std	Z+6, r20	; 0x06
   11d5c:	57 83       	std	Z+7, r21	; 0x07
   11d5e:	dc 01       	movw	r26, r24
   11d60:	18 96       	adiw	r26, 0x08	; 8
   11d62:	2d 93       	st	X+, r18
   11d64:	3c 93       	st	X, r19
   11d66:	19 97       	sbiw	r26, 0x09	; 9
   11d68:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   11d6c:	ed b7       	in	r30, 0x3d	; 61
   11d6e:	fe b7       	in	r31, 0x3e	; 62
   11d70:	3a 96       	adiw	r30, 0x0a	; 10
   11d72:	ed bf       	out	0x3d, r30	; 61
   11d74:	fe bf       	out	0x3e, r31	; 62
    gt_insDev.t_gyro.as_bias[0], gt_insDev.t_gyro.as_bias[1],  gt_insDev.t_gyro.as_bias[2]);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
                ac_buff);
   11d76:	9e 01       	movw	r18, r28
   11d78:	28 58       	subi	r18, 0x88	; 136
   11d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
                ac_buff);

    sprintf_P( (char *)ac_buff, PSTR("gyro bias x = %4d, gyro bias y = %4d, gyro bias z = %4d\r"),
    gt_insDev.t_gyro.as_bias[0], gt_insDev.t_gyro.as_bias[1],  gt_insDev.t_gyro.as_bias[2]);
    arb_printf( PRINTF_DBG_HIGH | PRINTF_DBG_SHOW_TIME,
   11d7c:	84 e4       	ldi	r24, 0x44	; 68
   11d7e:	b9 01       	movw	r22, r18
   11d80:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>

 }

}

}
   11d84:	c3 52       	subi	r28, 0x23	; 35
   11d86:	df 4f       	sbci	r29, 0xFF	; 255
   11d88:	cd bf       	out	0x3d, r28	; 61
   11d8a:	de bf       	out	0x3e, r29	; 62
   11d8c:	df 91       	pop	r29
   11d8e:	cf 91       	pop	r28
   11d90:	1f 91       	pop	r17
   11d92:	0f 91       	pop	r16
   11d94:	ff 90       	pop	r15
   11d96:	ef 90       	pop	r14
   11d98:	df 90       	pop	r13
   11d9a:	cf 90       	pop	r12
   11d9c:	bf 90       	pop	r11
   11d9e:	af 90       	pop	r10
   11da0:	08 95       	ret

00011da2 <insOpen>:

static t_error insOpen( t_DEVHANDLE t_handle)
{
   11da2:	cf 93       	push	r28
   11da4:	df 93       	push	r29
   11da6:	0f 92       	push	r0
   11da8:	0f 92       	push	r0
   11daa:	cd b7       	in	r28, 0x3d	; 61
   11dac:	de b7       	in	r29, 0x3e	; 62
   11dae:	89 83       	std	Y+1, r24	; 0x01
   11db0:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_insDev.t_mutex,
   11db2:	80 91 f7 23 	lds	r24, 0x23F7
   11db6:	90 91 f8 23 	lds	r25, 0x23F8
   11dba:	60 e0       	ldi	r22, 0x00	; 0
   11dbc:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_insDev.c_numUsers++;
   11dc0:	80 91 fb 23 	lds	r24, 0x23FB
   11dc4:	8f 5f       	subi	r24, 0xFF	; 255
   11dc6:	80 93 fb 23 	sts	0x23FB, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_insDev.t_mutex);
   11dca:	80 91 f7 23 	lds	r24, 0x23F7
   11dce:	90 91 f8 23 	lds	r25, 0x23F8
   11dd2:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return ARB_PASSED;
   11dd6:	80 e0       	ldi	r24, 0x00	; 0

}/*End insOpen*/
   11dd8:	0f 90       	pop	r0
   11dda:	0f 90       	pop	r0
   11ddc:	df 91       	pop	r29
   11dde:	cf 91       	pop	r28
   11de0:	08 95       	ret

00011de2 <insRead>:

static int16_t insRead( t_DEVHANDLE t_handle,
                        int8_t *pc_buff,
                        uint16_t s_size)
{
   11de2:	cf 93       	push	r28
   11de4:	df 93       	push	r29
   11de6:	cd b7       	in	r28, 0x3d	; 61
   11de8:	de b7       	in	r29, 0x3e	; 62
   11dea:	28 97       	sbiw	r28, 0x08	; 8
   11dec:	cd bf       	out	0x3d, r28	; 61
   11dee:	de bf       	out	0x3e, r29	; 62
   11df0:	8b 83       	std	Y+3, r24	; 0x03
   11df2:	9c 83       	std	Y+4, r25	; 0x04
   11df4:	6d 83       	std	Y+5, r22	; 0x05
   11df6:	7e 83       	std	Y+6, r23	; 0x06
   11df8:	4f 83       	std	Y+7, r20	; 0x07
   11dfa:	58 87       	std	Y+8, r21	; 0x08
   int16_t s_return = (int16_t)ARB_PASSED;
   11dfc:	19 82       	std	Y+1, r1	; 0x01
   11dfe:	1a 82       	std	Y+2, r1	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_insDev.t_mutex,
   11e00:	80 91 f7 23 	lds	r24, 0x23F7
   11e04:	90 91 f8 23 	lds	r25, 0x23F8
   11e08:	60 e0       	ldi	r22, 0x00	; 0
   11e0a:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_insDev.t_mutex);
   11e0e:	80 91 f7 23 	lds	r24, 0x23F7
   11e12:	90 91 f8 23 	lds	r25, 0x23F8
   11e16:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return s_return;
   11e1a:	89 81       	ldd	r24, Y+1	; 0x01
   11e1c:	9a 81       	ldd	r25, Y+2	; 0x02

}/*End insRead*/
   11e1e:	28 96       	adiw	r28, 0x08	; 8
   11e20:	cd bf       	out	0x3d, r28	; 61
   11e22:	de bf       	out	0x3e, r29	; 62
   11e24:	df 91       	pop	r29
   11e26:	cf 91       	pop	r28
   11e28:	08 95       	ret

00011e2a <insWrite>:

static int16_t insWrite( t_DEVHANDLE t_handle,
                         int8_t *pc_buff,
                         uint16_t s_size)
{
   11e2a:	cf 93       	push	r28
   11e2c:	df 93       	push	r29
   11e2e:	cd b7       	in	r28, 0x3d	; 61
   11e30:	de b7       	in	r29, 0x3e	; 62
   11e32:	28 97       	sbiw	r28, 0x08	; 8
   11e34:	cd bf       	out	0x3d, r28	; 61
   11e36:	de bf       	out	0x3e, r29	; 62
   11e38:	8b 83       	std	Y+3, r24	; 0x03
   11e3a:	9c 83       	std	Y+4, r25	; 0x04
   11e3c:	6d 83       	std	Y+5, r22	; 0x05
   11e3e:	7e 83       	std	Y+6, r23	; 0x06
   11e40:	4f 83       	std	Y+7, r20	; 0x07
   11e42:	58 87       	std	Y+8, r21	; 0x08
   int16_t s_return = (int16_t)ARB_PASSED;
   11e44:	19 82       	std	Y+1, r1	; 0x01
   11e46:	1a 82       	std	Y+2, r1	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_insDev.t_mutex,
   11e48:	80 91 f7 23 	lds	r24, 0x23F7
   11e4c:	90 91 f8 23 	lds	r25, 0x23F8
   11e50:	60 e0       	ldi	r22, 0x00	; 0
   11e52:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_insDev.t_mutex);
   11e56:	80 91 f7 23 	lds	r24, 0x23F7
   11e5a:	90 91 f8 23 	lds	r25, 0x23F8
   11e5e:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return s_return;
   11e62:	89 81       	ldd	r24, Y+1	; 0x01
   11e64:	9a 81       	ldd	r25, Y+2	; 0x02

}/*End insWrite*/
   11e66:	28 96       	adiw	r28, 0x08	; 8
   11e68:	cd bf       	out	0x3d, r28	; 61
   11e6a:	de bf       	out	0x3e, r29	; 62
   11e6c:	df 91       	pop	r29
   11e6e:	cf 91       	pop	r28
   11e70:	08 95       	ret

00011e72 <insIoctl>:

static int32_t insIoctl( t_DEVHANDLE t_handle,
                         uint16_t s_command,
                         int32_t  i_arguments)
{
   11e72:	cf 92       	push	r12
   11e74:	df 92       	push	r13
   11e76:	ef 92       	push	r14
   11e78:	ff 92       	push	r15
   11e7a:	0f 93       	push	r16
   11e7c:	1f 93       	push	r17
   11e7e:	cf 93       	push	r28
   11e80:	df 93       	push	r29
   11e82:	cd b7       	in	r28, 0x3d	; 61
   11e84:	de b7       	in	r29, 0x3e	; 62
   11e86:	cc 58       	subi	r28, 0x8C	; 140
   11e88:	d0 40       	sbci	r29, 0x00	; 0
   11e8a:	cd bf       	out	0x3d, r28	; 61
   11e8c:	de bf       	out	0x3e, r29	; 62
   11e8e:	fe 01       	movw	r30, r28
   11e90:	eb 57       	subi	r30, 0x7B	; 123
   11e92:	ff 4f       	sbci	r31, 0xFF	; 255
   11e94:	80 83       	st	Z, r24
   11e96:	91 83       	std	Z+1, r25	; 0x01
   11e98:	ce 01       	movw	r24, r28
   11e9a:	89 57       	subi	r24, 0x79	; 121
   11e9c:	9f 4f       	sbci	r25, 0xFF	; 255
   11e9e:	fc 01       	movw	r30, r24
   11ea0:	60 83       	st	Z, r22
   11ea2:	71 83       	std	Z+1, r23	; 0x01
   11ea4:	ce 01       	movw	r24, r28
   11ea6:	87 57       	subi	r24, 0x77	; 119
   11ea8:	9f 4f       	sbci	r25, 0xFF	; 255
   11eaa:	fc 01       	movw	r30, r24
   11eac:	20 83       	st	Z, r18
   11eae:	31 83       	std	Z+1, r19	; 0x01
   11eb0:	42 83       	std	Z+2, r20	; 0x02
   11eb2:	53 83       	std	Z+3, r21	; 0x03
   int32_t i_return = (int32_t)INS_PASSED;
   11eb4:	19 82       	std	Y+1, r1	; 0x01
   11eb6:	1a 82       	std	Y+2, r1	; 0x02
   11eb8:	1b 82       	std	Y+3, r1	; 0x03
   11eba:	1c 82       	std	Y+4, r1	; 0x04
   int16_t as_acc[3];

   /*-----------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *-----------------------------------------------------------------------*/
   arb_wait( gt_insDev.t_mutex,
   11ebc:	80 91 f7 23 	lds	r24, 0x23F7
   11ec0:	90 91 f8 23 	lds	r25, 0x23F8
   11ec4:	60 e0       	ldi	r22, 0x00	; 0
   11ec6:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   switch( (t_insCmd)s_command)
   11eca:	ce 01       	movw	r24, r28
   11ecc:	89 57       	subi	r24, 0x79	; 121
   11ece:	9f 4f       	sbci	r25, 0xFF	; 255
   11ed0:	fc 01       	movw	r30, r24
   11ed2:	80 81       	ld	r24, Z
   11ed4:	88 2f       	mov	r24, r24
   11ed6:	90 e0       	ldi	r25, 0x00	; 0
   11ed8:	85 30       	cpi	r24, 0x05	; 5
   11eda:	91 05       	cpc	r25, r1
   11edc:	11 f4       	brne	.+4      	; 0x11ee2 <insIoctl+0x70>
   11ede:	0c 94 38 9b 	jmp	0x13670	; 0x13670 <insIoctl+0x17fe>
   11ee2:	86 30       	cpi	r24, 0x06	; 6
   11ee4:	91 05       	cpc	r25, r1
   11ee6:	ec f4       	brge	.+58     	; 0x11f22 <insIoctl+0xb0>
   11ee8:	82 30       	cpi	r24, 0x02	; 2
   11eea:	91 05       	cpc	r25, r1
   11eec:	11 f4       	brne	.+4      	; 0x11ef2 <insIoctl+0x80>
   11eee:	0c 94 dd 98 	jmp	0x131ba	; 0x131ba <insIoctl+0x1348>
   11ef2:	83 30       	cpi	r24, 0x03	; 3
   11ef4:	91 05       	cpc	r25, r1
   11ef6:	4c f4       	brge	.+18     	; 0x11f0a <insIoctl+0x98>
   11ef8:	00 97       	sbiw	r24, 0x00	; 0
   11efa:	09 f4       	brne	.+2      	; 0x11efe <insIoctl+0x8c>
   11efc:	ca c1       	rjmp	.+916    	; 0x12292 <insIoctl+0x420>
   11efe:	81 30       	cpi	r24, 0x01	; 1
   11f00:	91 05       	cpc	r25, r1
   11f02:	09 f4       	brne	.+2      	; 0x11f06 <insIoctl+0x94>
   11f04:	78 c7       	rjmp	.+3824   	; 0x12df6 <insIoctl+0xf84>
   11f06:	0c 94 53 9b 	jmp	0x136a6	; 0x136a6 <insIoctl+0x1834>
   11f0a:	83 30       	cpi	r24, 0x03	; 3
   11f0c:	91 05       	cpc	r25, r1
   11f0e:	11 f4       	brne	.+4      	; 0x11f14 <insIoctl+0xa2>
   11f10:	0c 94 cb 9a 	jmp	0x13596	; 0x13596 <insIoctl+0x1724>
   11f14:	84 30       	cpi	r24, 0x04	; 4
   11f16:	91 05       	cpc	r25, r1
   11f18:	11 f4       	brne	.+4      	; 0x11f1e <insIoctl+0xac>
   11f1a:	0c 94 04 9b 	jmp	0x13608	; 0x13608 <insIoctl+0x1796>
   11f1e:	0c 94 53 9b 	jmp	0x136a6	; 0x136a6 <insIoctl+0x1834>
   11f22:	89 30       	cpi	r24, 0x09	; 9
   11f24:	91 05       	cpc	r25, r1
   11f26:	09 f4       	brne	.+2      	; 0x11f2a <insIoctl+0xb8>
   11f28:	a2 c2       	rjmp	.+1348   	; 0x1246e <insIoctl+0x5fc>
   11f2a:	8a 30       	cpi	r24, 0x0A	; 10
   11f2c:	91 05       	cpc	r25, r1
   11f2e:	4c f4       	brge	.+18     	; 0x11f42 <insIoctl+0xd0>
   11f30:	86 30       	cpi	r24, 0x06	; 6
   11f32:	91 05       	cpc	r25, r1
   11f34:	f9 f0       	breq	.+62     	; 0x11f74 <insIoctl+0x102>
   11f36:	88 30       	cpi	r24, 0x08	; 8
   11f38:	91 05       	cpc	r25, r1
   11f3a:	09 f4       	brne	.+2      	; 0x11f3e <insIoctl+0xcc>
   11f3c:	9c c2       	rjmp	.+1336   	; 0x12476 <insIoctl+0x604>
   11f3e:	0c 94 53 9b 	jmp	0x136a6	; 0x136a6 <insIoctl+0x1834>
   11f42:	8a 30       	cpi	r24, 0x0A	; 10
   11f44:	91 05       	cpc	r25, r1
   11f46:	09 f4       	brne	.+2      	; 0x11f4a <insIoctl+0xd8>
   11f48:	47 c7       	rjmp	.+3726   	; 0x12dd8 <insIoctl+0xf66>
   11f4a:	8b 30       	cpi	r24, 0x0B	; 11
   11f4c:	91 05       	cpc	r25, r1
   11f4e:	11 f0       	breq	.+4      	; 0x11f54 <insIoctl+0xe2>
   11f50:	0c 94 53 9b 	jmp	0x136a6	; 0x136a6 <insIoctl+0x1834>
   {
      case INS_RESET:
         gt_insDev.as_rawAtt[0] = 0;
   11f54:	10 92 70 24 	sts	0x2470, r1
   11f58:	10 92 71 24 	sts	0x2471, r1
         gt_insDev.as_rawAtt[1] = 0;
   11f5c:	10 92 72 24 	sts	0x2472, r1
   11f60:	10 92 73 24 	sts	0x2473, r1
         gt_insDev.as_rawAtt[2] = 0;
   11f64:	10 92 74 24 	sts	0x2474, r1
   11f68:	10 92 75 24 	sts	0x2475, r1
         insReset();
   11f6c:	0e 94 56 89 	call	0x112ac	; 0x112ac <insReset>
      break;
   11f70:	0c 94 5f 9b 	jmp	0x136be	; 0x136be <insIoctl+0x184c>

      case INS_GET_STATE_EST:
      {
         t_currentMeas *pt_currentMeas = (t_currentMeas *)((uint16_t)i_arguments);
   11f74:	ce 01       	movw	r24, r28
   11f76:	87 57       	subi	r24, 0x77	; 119
   11f78:	9f 4f       	sbci	r25, 0xFF	; 255
   11f7a:	fc 01       	movw	r30, r24
   11f7c:	80 81       	ld	r24, Z
   11f7e:	91 81       	ldd	r25, Z+1	; 0x01
   11f80:	89 8b       	std	Y+17, r24	; 0x11
   11f82:	9a 8b       	std	Y+18, r25	; 0x12

         pt_currentMeas->f_corrRoll  = ((float)gt_insDev.as_dcmAttitude[0]*180.0f)/32768.0f;
   11f84:	80 91 6a 24 	lds	r24, 0x246A
   11f88:	90 91 6b 24 	lds	r25, 0x246B
   11f8c:	aa 27       	eor	r26, r26
   11f8e:	97 fd       	sbrc	r25, 7
   11f90:	a0 95       	com	r26
   11f92:	ba 2f       	mov	r27, r26
   11f94:	bc 01       	movw	r22, r24
   11f96:	cd 01       	movw	r24, r26
   11f98:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   11f9c:	dc 01       	movw	r26, r24
   11f9e:	cb 01       	movw	r24, r22
   11fa0:	bc 01       	movw	r22, r24
   11fa2:	cd 01       	movw	r24, r26
   11fa4:	20 e0       	ldi	r18, 0x00	; 0
   11fa6:	30 e0       	ldi	r19, 0x00	; 0
   11fa8:	44 e3       	ldi	r20, 0x34	; 52
   11faa:	53 e4       	ldi	r21, 0x43	; 67
   11fac:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   11fb0:	dc 01       	movw	r26, r24
   11fb2:	cb 01       	movw	r24, r22
   11fb4:	bc 01       	movw	r22, r24
   11fb6:	cd 01       	movw	r24, r26
   11fb8:	20 e0       	ldi	r18, 0x00	; 0
   11fba:	30 e0       	ldi	r19, 0x00	; 0
   11fbc:	40 e0       	ldi	r20, 0x00	; 0
   11fbe:	57 e4       	ldi	r21, 0x47	; 71
   11fc0:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   11fc4:	dc 01       	movw	r26, r24
   11fc6:	cb 01       	movw	r24, r22
   11fc8:	29 89       	ldd	r18, Y+17	; 0x11
   11fca:	3a 89       	ldd	r19, Y+18	; 0x12
   11fcc:	f9 01       	movw	r30, r18
   11fce:	80 83       	st	Z, r24
   11fd0:	91 83       	std	Z+1, r25	; 0x01
   11fd2:	a2 83       	std	Z+2, r26	; 0x02
   11fd4:	b3 83       	std	Z+3, r27	; 0x03
         pt_currentMeas->f_corrPitch = ((float)gt_insDev.as_dcmAttitude[1]*180.0f)/32768.0f;
   11fd6:	80 91 6c 24 	lds	r24, 0x246C
   11fda:	90 91 6d 24 	lds	r25, 0x246D
   11fde:	aa 27       	eor	r26, r26
   11fe0:	97 fd       	sbrc	r25, 7
   11fe2:	a0 95       	com	r26
   11fe4:	ba 2f       	mov	r27, r26
   11fe6:	bc 01       	movw	r22, r24
   11fe8:	cd 01       	movw	r24, r26
   11fea:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   11fee:	dc 01       	movw	r26, r24
   11ff0:	cb 01       	movw	r24, r22
   11ff2:	bc 01       	movw	r22, r24
   11ff4:	cd 01       	movw	r24, r26
   11ff6:	20 e0       	ldi	r18, 0x00	; 0
   11ff8:	30 e0       	ldi	r19, 0x00	; 0
   11ffa:	44 e3       	ldi	r20, 0x34	; 52
   11ffc:	53 e4       	ldi	r21, 0x43	; 67
   11ffe:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12002:	dc 01       	movw	r26, r24
   12004:	cb 01       	movw	r24, r22
   12006:	bc 01       	movw	r22, r24
   12008:	cd 01       	movw	r24, r26
   1200a:	20 e0       	ldi	r18, 0x00	; 0
   1200c:	30 e0       	ldi	r19, 0x00	; 0
   1200e:	40 e0       	ldi	r20, 0x00	; 0
   12010:	57 e4       	ldi	r21, 0x47	; 71
   12012:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12016:	dc 01       	movw	r26, r24
   12018:	cb 01       	movw	r24, r22
   1201a:	29 89       	ldd	r18, Y+17	; 0x11
   1201c:	3a 89       	ldd	r19, Y+18	; 0x12
   1201e:	f9 01       	movw	r30, r18
   12020:	84 83       	std	Z+4, r24	; 0x04
   12022:	95 83       	std	Z+5, r25	; 0x05
   12024:	a6 83       	std	Z+6, r26	; 0x06
   12026:	b7 83       	std	Z+7, r27	; 0x07
         pt_currentMeas->f_corrYaw   = ((float)gt_insDev.as_dcmAttitude[2]*180.0f)/32768.0f;
   12028:	80 91 6e 24 	lds	r24, 0x246E
   1202c:	90 91 6f 24 	lds	r25, 0x246F
   12030:	aa 27       	eor	r26, r26
   12032:	97 fd       	sbrc	r25, 7
   12034:	a0 95       	com	r26
   12036:	ba 2f       	mov	r27, r26
   12038:	bc 01       	movw	r22, r24
   1203a:	cd 01       	movw	r24, r26
   1203c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12040:	dc 01       	movw	r26, r24
   12042:	cb 01       	movw	r24, r22
   12044:	bc 01       	movw	r22, r24
   12046:	cd 01       	movw	r24, r26
   12048:	20 e0       	ldi	r18, 0x00	; 0
   1204a:	30 e0       	ldi	r19, 0x00	; 0
   1204c:	44 e3       	ldi	r20, 0x34	; 52
   1204e:	53 e4       	ldi	r21, 0x43	; 67
   12050:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12054:	dc 01       	movw	r26, r24
   12056:	cb 01       	movw	r24, r22
   12058:	bc 01       	movw	r22, r24
   1205a:	cd 01       	movw	r24, r26
   1205c:	20 e0       	ldi	r18, 0x00	; 0
   1205e:	30 e0       	ldi	r19, 0x00	; 0
   12060:	40 e0       	ldi	r20, 0x00	; 0
   12062:	57 e4       	ldi	r21, 0x47	; 71
   12064:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12068:	dc 01       	movw	r26, r24
   1206a:	cb 01       	movw	r24, r22
   1206c:	29 89       	ldd	r18, Y+17	; 0x11
   1206e:	3a 89       	ldd	r19, Y+18	; 0x12
   12070:	f9 01       	movw	r30, r18
   12072:	80 87       	std	Z+8, r24	; 0x08
   12074:	91 87       	std	Z+9, r25	; 0x09
   12076:	a2 87       	std	Z+10, r26	; 0x0a
   12078:	b3 87       	std	Z+11, r27	; 0x0b

         pt_currentMeas->f_rawRoll   = ((float)gt_insDev.as_rawAtt[0]*180.0f)/32768.0f;
   1207a:	80 91 70 24 	lds	r24, 0x2470
   1207e:	90 91 71 24 	lds	r25, 0x2471
   12082:	aa 27       	eor	r26, r26
   12084:	97 fd       	sbrc	r25, 7
   12086:	a0 95       	com	r26
   12088:	ba 2f       	mov	r27, r26
   1208a:	bc 01       	movw	r22, r24
   1208c:	cd 01       	movw	r24, r26
   1208e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12092:	dc 01       	movw	r26, r24
   12094:	cb 01       	movw	r24, r22
   12096:	bc 01       	movw	r22, r24
   12098:	cd 01       	movw	r24, r26
   1209a:	20 e0       	ldi	r18, 0x00	; 0
   1209c:	30 e0       	ldi	r19, 0x00	; 0
   1209e:	44 e3       	ldi	r20, 0x34	; 52
   120a0:	53 e4       	ldi	r21, 0x43	; 67
   120a2:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   120a6:	dc 01       	movw	r26, r24
   120a8:	cb 01       	movw	r24, r22
   120aa:	bc 01       	movw	r22, r24
   120ac:	cd 01       	movw	r24, r26
   120ae:	20 e0       	ldi	r18, 0x00	; 0
   120b0:	30 e0       	ldi	r19, 0x00	; 0
   120b2:	40 e0       	ldi	r20, 0x00	; 0
   120b4:	57 e4       	ldi	r21, 0x47	; 71
   120b6:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   120ba:	dc 01       	movw	r26, r24
   120bc:	cb 01       	movw	r24, r22
   120be:	29 89       	ldd	r18, Y+17	; 0x11
   120c0:	3a 89       	ldd	r19, Y+18	; 0x12
   120c2:	f9 01       	movw	r30, r18
   120c4:	84 87       	std	Z+12, r24	; 0x0c
   120c6:	95 87       	std	Z+13, r25	; 0x0d
   120c8:	a6 87       	std	Z+14, r26	; 0x0e
   120ca:	b7 87       	std	Z+15, r27	; 0x0f
         pt_currentMeas->f_rawPitch  = ((float)gt_insDev.as_rawAtt[1]*180.0f)/32768.0f;
   120cc:	80 91 72 24 	lds	r24, 0x2472
   120d0:	90 91 73 24 	lds	r25, 0x2473
   120d4:	aa 27       	eor	r26, r26
   120d6:	97 fd       	sbrc	r25, 7
   120d8:	a0 95       	com	r26
   120da:	ba 2f       	mov	r27, r26
   120dc:	bc 01       	movw	r22, r24
   120de:	cd 01       	movw	r24, r26
   120e0:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   120e4:	dc 01       	movw	r26, r24
   120e6:	cb 01       	movw	r24, r22
   120e8:	bc 01       	movw	r22, r24
   120ea:	cd 01       	movw	r24, r26
   120ec:	20 e0       	ldi	r18, 0x00	; 0
   120ee:	30 e0       	ldi	r19, 0x00	; 0
   120f0:	44 e3       	ldi	r20, 0x34	; 52
   120f2:	53 e4       	ldi	r21, 0x43	; 67
   120f4:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   120f8:	dc 01       	movw	r26, r24
   120fa:	cb 01       	movw	r24, r22
   120fc:	bc 01       	movw	r22, r24
   120fe:	cd 01       	movw	r24, r26
   12100:	20 e0       	ldi	r18, 0x00	; 0
   12102:	30 e0       	ldi	r19, 0x00	; 0
   12104:	40 e0       	ldi	r20, 0x00	; 0
   12106:	57 e4       	ldi	r21, 0x47	; 71
   12108:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1210c:	dc 01       	movw	r26, r24
   1210e:	cb 01       	movw	r24, r22
   12110:	29 89       	ldd	r18, Y+17	; 0x11
   12112:	3a 89       	ldd	r19, Y+18	; 0x12
   12114:	f9 01       	movw	r30, r18
   12116:	80 8b       	std	Z+16, r24	; 0x10
   12118:	91 8b       	std	Z+17, r25	; 0x11
   1211a:	a2 8b       	std	Z+18, r26	; 0x12
   1211c:	b3 8b       	std	Z+19, r27	; 0x13
         pt_currentMeas->f_rawYaw    = ((float)gt_insDev.as_rawAtt[2]*180.0f)/32768.0f;
   1211e:	80 91 74 24 	lds	r24, 0x2474
   12122:	90 91 75 24 	lds	r25, 0x2475
   12126:	aa 27       	eor	r26, r26
   12128:	97 fd       	sbrc	r25, 7
   1212a:	a0 95       	com	r26
   1212c:	ba 2f       	mov	r27, r26
   1212e:	bc 01       	movw	r22, r24
   12130:	cd 01       	movw	r24, r26
   12132:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12136:	dc 01       	movw	r26, r24
   12138:	cb 01       	movw	r24, r22
   1213a:	bc 01       	movw	r22, r24
   1213c:	cd 01       	movw	r24, r26
   1213e:	20 e0       	ldi	r18, 0x00	; 0
   12140:	30 e0       	ldi	r19, 0x00	; 0
   12142:	44 e3       	ldi	r20, 0x34	; 52
   12144:	53 e4       	ldi	r21, 0x43	; 67
   12146:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1214a:	dc 01       	movw	r26, r24
   1214c:	cb 01       	movw	r24, r22
   1214e:	bc 01       	movw	r22, r24
   12150:	cd 01       	movw	r24, r26
   12152:	20 e0       	ldi	r18, 0x00	; 0
   12154:	30 e0       	ldi	r19, 0x00	; 0
   12156:	40 e0       	ldi	r20, 0x00	; 0
   12158:	57 e4       	ldi	r21, 0x47	; 71
   1215a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1215e:	dc 01       	movw	r26, r24
   12160:	cb 01       	movw	r24, r22
   12162:	29 89       	ldd	r18, Y+17	; 0x11
   12164:	3a 89       	ldd	r19, Y+18	; 0x12
   12166:	f9 01       	movw	r30, r18
   12168:	84 8b       	std	Z+20, r24	; 0x14
   1216a:	95 8b       	std	Z+21, r25	; 0x15
   1216c:	a6 8b       	std	Z+22, r26	; 0x16
   1216e:	b7 8b       	std	Z+23, r27	; 0x17
         pt_currentMeas->f_platMovingCount = (float)gt_insDev.c_platMovingCount;
   12170:	80 91 f3 2a 	lds	r24, 0x2AF3
   12174:	99 27       	eor	r25, r25
   12176:	87 fd       	sbrc	r24, 7
   12178:	90 95       	com	r25
   1217a:	a9 2f       	mov	r26, r25
   1217c:	b9 2f       	mov	r27, r25
   1217e:	bc 01       	movw	r22, r24
   12180:	cd 01       	movw	r24, r26
   12182:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12186:	dc 01       	movw	r26, r24
   12188:	cb 01       	movw	r24, r22
   1218a:	29 89       	ldd	r18, Y+17	; 0x11
   1218c:	3a 89       	ldd	r19, Y+18	; 0x12
   1218e:	f9 01       	movw	r30, r18
   12190:	80 8f       	std	Z+24, r24	; 0x18
   12192:	91 8f       	std	Z+25, r25	; 0x19
   12194:	a2 8f       	std	Z+26, r26	; 0x1a
   12196:	b3 8f       	std	Z+27, r27	; 0x1b
         pt_currentMeas->af_avrResMag[0] = ((float)gt_insDev.ai_avrRes[0]*180.0f)/
   12198:	80 91 e1 2a 	lds	r24, 0x2AE1
   1219c:	90 91 e2 2a 	lds	r25, 0x2AE2
   121a0:	a0 91 e3 2a 	lds	r26, 0x2AE3
   121a4:	b0 91 e4 2a 	lds	r27, 0x2AE4
   121a8:	bc 01       	movw	r22, r24
   121aa:	cd 01       	movw	r24, r26
   121ac:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   121b0:	dc 01       	movw	r26, r24
   121b2:	cb 01       	movw	r24, r22
   121b4:	bc 01       	movw	r22, r24
   121b6:	cd 01       	movw	r24, r26
   121b8:	20 e0       	ldi	r18, 0x00	; 0
   121ba:	30 e0       	ldi	r19, 0x00	; 0
   121bc:	44 e3       	ldi	r20, 0x34	; 52
   121be:	53 e4       	ldi	r21, 0x43	; 67
   121c0:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   121c4:	dc 01       	movw	r26, r24
   121c6:	cb 01       	movw	r24, r22
   121c8:	bc 01       	movw	r22, r24
   121ca:	cd 01       	movw	r24, r26
   121cc:	20 e0       	ldi	r18, 0x00	; 0
   121ce:	30 e0       	ldi	r19, 0x00	; 0
   121d0:	40 e0       	ldi	r20, 0x00	; 0
   121d2:	59 e4       	ldi	r21, 0x49	; 73
   121d4:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   121d8:	dc 01       	movw	r26, r24
   121da:	cb 01       	movw	r24, r22
   121dc:	29 89       	ldd	r18, Y+17	; 0x11
   121de:	3a 89       	ldd	r19, Y+18	; 0x12
   121e0:	f9 01       	movw	r30, r18
   121e2:	84 8f       	std	Z+28, r24	; 0x1c
   121e4:	95 8f       	std	Z+29, r25	; 0x1d
   121e6:	a6 8f       	std	Z+30, r26	; 0x1e
   121e8:	b7 8f       	std	Z+31, r27	; 0x1f
         ((float)((int32_t)1<<(15+INS_ATT_RES_VAR_EXTRA_RES)));
         pt_currentMeas->af_avrResMag[1] = ((float)gt_insDev.ai_avrRes[1]*180.0f)/
   121ea:	80 91 e5 2a 	lds	r24, 0x2AE5
   121ee:	90 91 e6 2a 	lds	r25, 0x2AE6
   121f2:	a0 91 e7 2a 	lds	r26, 0x2AE7
   121f6:	b0 91 e8 2a 	lds	r27, 0x2AE8
   121fa:	bc 01       	movw	r22, r24
   121fc:	cd 01       	movw	r24, r26
   121fe:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12202:	dc 01       	movw	r26, r24
   12204:	cb 01       	movw	r24, r22
   12206:	bc 01       	movw	r22, r24
   12208:	cd 01       	movw	r24, r26
   1220a:	20 e0       	ldi	r18, 0x00	; 0
   1220c:	30 e0       	ldi	r19, 0x00	; 0
   1220e:	44 e3       	ldi	r20, 0x34	; 52
   12210:	53 e4       	ldi	r21, 0x43	; 67
   12212:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12216:	dc 01       	movw	r26, r24
   12218:	cb 01       	movw	r24, r22
   1221a:	bc 01       	movw	r22, r24
   1221c:	cd 01       	movw	r24, r26
   1221e:	20 e0       	ldi	r18, 0x00	; 0
   12220:	30 e0       	ldi	r19, 0x00	; 0
   12222:	40 e0       	ldi	r20, 0x00	; 0
   12224:	59 e4       	ldi	r21, 0x49	; 73
   12226:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1222a:	dc 01       	movw	r26, r24
   1222c:	cb 01       	movw	r24, r22
   1222e:	29 89       	ldd	r18, Y+17	; 0x11
   12230:	3a 89       	ldd	r19, Y+18	; 0x12
   12232:	f9 01       	movw	r30, r18
   12234:	80 a3       	lds	r24, 0x50
   12236:	91 a3       	lds	r25, 0x51
   12238:	a2 a3       	lds	r26, 0x52
   1223a:	b3 a3       	lds	r27, 0x53
         ((float)((int32_t)1<<(15+INS_ATT_RES_VAR_EXTRA_RES)));
         pt_currentMeas->af_avrResMag[2] = ((float)gt_insDev.ai_avrRes[2]*180.0f)/
   1223c:	80 91 e9 2a 	lds	r24, 0x2AE9
   12240:	90 91 ea 2a 	lds	r25, 0x2AEA
   12244:	a0 91 eb 2a 	lds	r26, 0x2AEB
   12248:	b0 91 ec 2a 	lds	r27, 0x2AEC
   1224c:	bc 01       	movw	r22, r24
   1224e:	cd 01       	movw	r24, r26
   12250:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12254:	dc 01       	movw	r26, r24
   12256:	cb 01       	movw	r24, r22
   12258:	bc 01       	movw	r22, r24
   1225a:	cd 01       	movw	r24, r26
   1225c:	20 e0       	ldi	r18, 0x00	; 0
   1225e:	30 e0       	ldi	r19, 0x00	; 0
   12260:	44 e3       	ldi	r20, 0x34	; 52
   12262:	53 e4       	ldi	r21, 0x43	; 67
   12264:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12268:	dc 01       	movw	r26, r24
   1226a:	cb 01       	movw	r24, r22
   1226c:	bc 01       	movw	r22, r24
   1226e:	cd 01       	movw	r24, r26
   12270:	20 e0       	ldi	r18, 0x00	; 0
   12272:	30 e0       	ldi	r19, 0x00	; 0
   12274:	40 e0       	ldi	r20, 0x00	; 0
   12276:	59 e4       	ldi	r21, 0x49	; 73
   12278:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1227c:	dc 01       	movw	r26, r24
   1227e:	cb 01       	movw	r24, r22
   12280:	29 89       	ldd	r18, Y+17	; 0x11
   12282:	3a 89       	ldd	r19, Y+18	; 0x12
   12284:	f9 01       	movw	r30, r18
   12286:	84 a3       	lds	r24, 0x54
   12288:	95 a3       	lds	r25, 0x55
   1228a:	a6 a3       	lds	r26, 0x56
   1228c:	b7 a3       	lds	r27, 0x57
         ((float)((int32_t)1<<(15+INS_ATT_RES_VAR_EXTRA_RES)));
      }
      break;/*End case INS_GET_STATE_EST:*/
   1228e:	0c 94 5f 9b 	jmp	0x136be	; 0x136be <insIoctl+0x184c>
      case INS_SENS_STARTUP:

         /*------------------------------------------------------------------*
          * Configure the magnetometer for continuous measurements
          *------------------------------------------------------------------*/
         ac_data[0] = 0x02;
   12292:	82 e0       	ldi	r24, 0x02	; 2
   12294:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x00;
   12296:	1a a2       	lds	r17, 0x9a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12298:	80 91 fe 23 	lds	r24, 0x23FE
   1229c:	90 91 ff 23 	lds	r25, 0x23FF
   122a0:	9e 01       	movw	r18, r28
   122a2:	2f 5d       	subi	r18, 0xDF	; 223
   122a4:	3f 4f       	sbci	r19, 0xFF	; 255
   122a6:	b9 01       	movw	r22, r18
   122a8:	42 e0       	ldi	r20, 0x02	; 2
   122aa:	50 e0       	ldi	r21, 0x00	; 0
   122ac:	2e e1       	ldi	r18, 0x1E	; 30
   122ae:	0a e0       	ldi	r16, 0x0A	; 10
   122b0:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   122b4:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_MAGN_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   122b8:	8a e0       	ldi	r24, 0x0A	; 10
   122ba:	90 e0       	ldi	r25, 0x00	; 0
   122bc:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Configure the magnetometer for a 50Hz update rate
          *------------------------------------------------------------------*/
         ac_data[0] = 0x00;
   122c0:	19 a2       	lds	r17, 0x99
         ac_data[1] = 0x18;
   122c2:	88 e1       	ldi	r24, 0x18	; 24
   122c4:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   122c6:	80 91 fe 23 	lds	r24, 0x23FE
   122ca:	90 91 ff 23 	lds	r25, 0x23FF
   122ce:	9e 01       	movw	r18, r28
   122d0:	2f 5d       	subi	r18, 0xDF	; 223
   122d2:	3f 4f       	sbci	r19, 0xFF	; 255
   122d4:	b9 01       	movw	r22, r18
   122d6:	42 e0       	ldi	r20, 0x02	; 2
   122d8:	50 e0       	ldi	r21, 0x00	; 0
   122da:	2e e1       	ldi	r18, 0x1E	; 30
   122dc:	0a e0       	ldi	r16, 0x0A	; 10
   122de:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   122e2:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_MAGN_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   122e6:	8a e0       	ldi	r24, 0x0A	; 10
   122e8:	90 e0       	ldi	r25, 0x00	; 0
   122ea:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Configure the accelerometer for stand-by mode while its config
          * is being changed.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x2D;
   122ee:	8d e2       	ldi	r24, 0x2D	; 45
   122f0:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x00;
   122f2:	1a a2       	lds	r17, 0x9a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   122f4:	80 91 fe 23 	lds	r24, 0x23FE
   122f8:	90 91 ff 23 	lds	r25, 0x23FF
   122fc:	9e 01       	movw	r18, r28
   122fe:	2f 5d       	subi	r18, 0xDF	; 223
   12300:	3f 4f       	sbci	r19, 0xFF	; 255
   12302:	b9 01       	movw	r22, r18
   12304:	42 e0       	ldi	r20, 0x02	; 2
   12306:	50 e0       	ldi	r21, 0x00	; 0
   12308:	23 e5       	ldi	r18, 0x53	; 83
   1230a:	0a e0       	ldi	r16, 0x0A	; 10
   1230c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   12310:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_ACCEL_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12314:	8a e0       	ldi	r24, 0x0A	; 10
   12316:	90 e0       	ldi	r25, 0x00	; 0
   12318:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Configure the accelerometer for full measurement resolution.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x2D;
   1231c:	8d e2       	ldi	r24, 0x2D	; 45
   1231e:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x08;
   12320:	88 e0       	ldi	r24, 0x08	; 8
   12322:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12324:	80 91 fe 23 	lds	r24, 0x23FE
   12328:	90 91 ff 23 	lds	r25, 0x23FF
   1232c:	9e 01       	movw	r18, r28
   1232e:	2f 5d       	subi	r18, 0xDF	; 223
   12330:	3f 4f       	sbci	r19, 0xFF	; 255
   12332:	b9 01       	movw	r22, r18
   12334:	42 e0       	ldi	r20, 0x02	; 2
   12336:	50 e0       	ldi	r21, 0x00	; 0
   12338:	23 e5       	ldi	r18, 0x53	; 83
   1233a:	0a e0       	ldi	r16, 0x0A	; 10
   1233c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   12340:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_ACCEL_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12344:	8a e0       	ldi	r24, 0x0A	; 10
   12346:	90 e0       	ldi	r25, 0x00	; 0
   12348:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Configure the accelerometer for a 50Hz output rate.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x2C;
   1234c:	8c e2       	ldi	r24, 0x2C	; 44
   1234e:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x09;
   12350:	89 e0       	ldi	r24, 0x09	; 9
   12352:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12354:	80 91 fe 23 	lds	r24, 0x23FE
   12358:	90 91 ff 23 	lds	r25, 0x23FF
   1235c:	9e 01       	movw	r18, r28
   1235e:	2f 5d       	subi	r18, 0xDF	; 223
   12360:	3f 4f       	sbci	r19, 0xFF	; 255
   12362:	b9 01       	movw	r22, r18
   12364:	42 e0       	ldi	r20, 0x02	; 2
   12366:	50 e0       	ldi	r21, 0x00	; 0
   12368:	23 e5       	ldi	r18, 0x53	; 83
   1236a:	0a e0       	ldi	r16, 0x0A	; 10
   1236c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   12370:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_ACCEL_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12374:	8a e0       	ldi	r24, 0x0A	; 10
   12376:	90 e0       	ldi	r25, 0x00	; 0
   12378:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Put the accelerometer into measurement mode.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x2D;
   1237c:	8d e2       	ldi	r24, 0x2D	; 45
   1237e:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x08;
   12380:	88 e0       	ldi	r24, 0x08	; 8
   12382:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12384:	80 91 fe 23 	lds	r24, 0x23FE
   12388:	90 91 ff 23 	lds	r25, 0x23FF
   1238c:	9e 01       	movw	r18, r28
   1238e:	2f 5d       	subi	r18, 0xDF	; 223
   12390:	3f 4f       	sbci	r19, 0xFF	; 255
   12392:	b9 01       	movw	r22, r18
   12394:	42 e0       	ldi	r20, 0x02	; 2
   12396:	50 e0       	ldi	r21, 0x00	; 0
   12398:	23 e5       	ldi	r18, 0x53	; 83
   1239a:	0a e0       	ldi	r16, 0x0A	; 10
   1239c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   123a0:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_ACCEL_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   123a4:	8a e0       	ldi	r24, 0x0A	; 10
   123a6:	90 e0       	ldi	r25, 0x00	; 0
   123a8:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Reset the gyro to defaults...
          *------------------------------------------------------------------*/
         ac_data[0] = 0x3E;
   123ac:	8e e3       	ldi	r24, 0x3E	; 62
   123ae:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x80;
   123b0:	80 e8       	ldi	r24, 0x80	; 128
   123b2:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   123b4:	80 91 fe 23 	lds	r24, 0x23FE
   123b8:	90 91 ff 23 	lds	r25, 0x23FF
   123bc:	9e 01       	movw	r18, r28
   123be:	2f 5d       	subi	r18, 0xDF	; 223
   123c0:	3f 4f       	sbci	r19, 0xFF	; 255
   123c2:	b9 01       	movw	r22, r18
   123c4:	42 e0       	ldi	r20, 0x02	; 2
   123c6:	50 e0       	ldi	r21, 0x00	; 0
   123c8:	28 e6       	ldi	r18, 0x68	; 104
   123ca:	0a e0       	ldi	r16, 0x0A	; 10
   123cc:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   123d0:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_GYRO_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   123d4:	8a e0       	ldi	r24, 0x0A	; 10
   123d6:	90 e0       	ldi	r25, 0x00	; 0
   123d8:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Set the resolution to full scale and low-pass filter BW to 42Hz.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x16;
   123dc:	86 e1       	ldi	r24, 0x16	; 22
   123de:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x1B;
   123e0:	8b e1       	ldi	r24, 0x1B	; 27
   123e2:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   123e4:	80 91 fe 23 	lds	r24, 0x23FE
   123e8:	90 91 ff 23 	lds	r25, 0x23FF
   123ec:	9e 01       	movw	r18, r28
   123ee:	2f 5d       	subi	r18, 0xDF	; 223
   123f0:	3f 4f       	sbci	r19, 0xFF	; 255
   123f2:	b9 01       	movw	r22, r18
   123f4:	42 e0       	ldi	r20, 0x02	; 2
   123f6:	50 e0       	ldi	r21, 0x00	; 0
   123f8:	28 e6       	ldi	r18, 0x68	; 104
   123fa:	0a e0       	ldi	r16, 0x0A	; 10
   123fc:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   12400:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_GYRO_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12404:	8a e0       	ldi	r24, 0x0A	; 10
   12406:	90 e0       	ldi	r25, 0x00	; 0
   12408:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Set gyro update rate to 50Hz
          *------------------------------------------------------------------*/
         ac_data[0] = 0x15;
   1240c:	85 e1       	ldi	r24, 0x15	; 21
   1240e:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x0A;
   12410:	8a e0       	ldi	r24, 0x0A	; 10
   12412:	8a a3       	lds	r24, 0x5a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12414:	80 91 fe 23 	lds	r24, 0x23FE
   12418:	90 91 ff 23 	lds	r25, 0x23FF
   1241c:	9e 01       	movw	r18, r28
   1241e:	2f 5d       	subi	r18, 0xDF	; 223
   12420:	3f 4f       	sbci	r19, 0xFF	; 255
   12422:	b9 01       	movw	r22, r18
   12424:	42 e0       	ldi	r20, 0x02	; 2
   12426:	50 e0       	ldi	r21, 0x00	; 0
   12428:	28 e6       	ldi	r18, 0x68	; 104
   1242a:	0a e0       	ldi	r16, 0x0A	; 10
   1242c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   12430:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_GYRO_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12434:	8a e0       	ldi	r24, 0x0A	; 10
   12436:	90 e0       	ldi	r25, 0x00	; 0
   12438:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         /*------------------------------------------------------------------*
          * Tell the gyro to use the z axis as its PLL reference.
          *------------------------------------------------------------------*/
         ac_data[0] = 0x3E;
   1243c:	8e e3       	ldi	r24, 0x3E	; 62
   1243e:	89 a3       	lds	r24, 0x59
         ac_data[1] = 0x00;
   12440:	1a a2       	lds	r17, 0x9a
         t_err = hal_twiMasterWrite( gt_insDev.t_tHandle,
   12442:	80 91 fe 23 	lds	r24, 0x23FE
   12446:	90 91 ff 23 	lds	r25, 0x23FF
   1244a:	9e 01       	movw	r18, r28
   1244c:	2f 5d       	subi	r18, 0xDF	; 223
   1244e:	3f 4f       	sbci	r19, 0xFF	; 255
   12450:	b9 01       	movw	r22, r18
   12452:	42 e0       	ldi	r20, 0x02	; 2
   12454:	50 e0       	ldi	r21, 0x00	; 0
   12456:	28 e6       	ldi	r18, 0x68	; 104
   12458:	0a e0       	ldi	r16, 0x0A	; 10
   1245a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <hal_twiMasterWrite>
   1245e:	80 93 5b 2b 	sts	0x2B5B, r24
                                     ac_data,
                                     2,
                                     (uint8_t)INS_GYRO_ADDRESS,
                                     INS_MAX_TWI_RETRIES);

         arb_sleep( 10);
   12462:	8a e0       	ldi	r24, 0x0A	; 10
   12464:	90 e0       	ldi	r25, 0x00	; 0
   12466:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

      break;/*End case INS_SENS_STARTUP:*/
   1246a:	0c 94 5f 9b 	jmp	0x136be	; 0x136be <insIoctl+0x184c>

      case INS_UPDATE:

         dcmUpdate();
   1246e:	0e 94 b7 89 	call	0x1136e	; 0x1136e <dcmUpdate>

      break;
   12472:	0c 94 5f 9b 	jmp	0x136be	; 0x136be <insIoctl+0x184c>
       * performed using floating point arithmetic.
       *---------------------------------------------------------------------*/
      case INS_DCM_INIT:
      {
         int32_t i_index;
         float af_avrMag[3] = {0.0f,0.0f,0.0f};
   12476:	9e 01       	movw	r18, r28
   12478:	27 5b       	subi	r18, 0xB7	; 183
   1247a:	3f 4f       	sbci	r19, 0xFF	; 255
   1247c:	80 e0       	ldi	r24, 0x00	; 0
   1247e:	90 e0       	ldi	r25, 0x00	; 0
   12480:	dc 01       	movw	r26, r24
   12482:	f9 01       	movw	r30, r18
   12484:	80 83       	st	Z, r24
   12486:	91 83       	std	Z+1, r25	; 0x01
   12488:	a2 83       	std	Z+2, r26	; 0x02
   1248a:	b3 83       	std	Z+3, r27	; 0x03
   1248c:	9e 01       	movw	r18, r28
   1248e:	27 5b       	subi	r18, 0xB7	; 183
   12490:	3f 4f       	sbci	r19, 0xFF	; 255
   12492:	80 e0       	ldi	r24, 0x00	; 0
   12494:	90 e0       	ldi	r25, 0x00	; 0
   12496:	dc 01       	movw	r26, r24
   12498:	f9 01       	movw	r30, r18
   1249a:	84 83       	std	Z+4, r24	; 0x04
   1249c:	95 83       	std	Z+5, r25	; 0x05
   1249e:	a6 83       	std	Z+6, r26	; 0x06
   124a0:	b7 83       	std	Z+7, r27	; 0x07
   124a2:	9e 01       	movw	r18, r28
   124a4:	27 5b       	subi	r18, 0xB7	; 183
   124a6:	3f 4f       	sbci	r19, 0xFF	; 255
   124a8:	80 e0       	ldi	r24, 0x00	; 0
   124aa:	90 e0       	ldi	r25, 0x00	; 0
   124ac:	dc 01       	movw	r26, r24
   124ae:	f9 01       	movw	r30, r18
   124b0:	80 87       	std	Z+8, r24	; 0x08
   124b2:	91 87       	std	Z+9, r25	; 0x09
   124b4:	a2 87       	std	Z+10, r26	; 0x0a
   124b6:	b3 87       	std	Z+11, r27	; 0x0b
         float af_avrGyr[3] = {0.0f,0.0f,0.0f};
   124b8:	9e 01       	movw	r18, r28
   124ba:	2b 5a       	subi	r18, 0xAB	; 171
   124bc:	3f 4f       	sbci	r19, 0xFF	; 255
   124be:	80 e0       	ldi	r24, 0x00	; 0
   124c0:	90 e0       	ldi	r25, 0x00	; 0
   124c2:	dc 01       	movw	r26, r24
   124c4:	f9 01       	movw	r30, r18
   124c6:	80 83       	st	Z, r24
   124c8:	91 83       	std	Z+1, r25	; 0x01
   124ca:	a2 83       	std	Z+2, r26	; 0x02
   124cc:	b3 83       	std	Z+3, r27	; 0x03
   124ce:	9e 01       	movw	r18, r28
   124d0:	2b 5a       	subi	r18, 0xAB	; 171
   124d2:	3f 4f       	sbci	r19, 0xFF	; 255
   124d4:	80 e0       	ldi	r24, 0x00	; 0
   124d6:	90 e0       	ldi	r25, 0x00	; 0
   124d8:	dc 01       	movw	r26, r24
   124da:	f9 01       	movw	r30, r18
   124dc:	84 83       	std	Z+4, r24	; 0x04
   124de:	95 83       	std	Z+5, r25	; 0x05
   124e0:	a6 83       	std	Z+6, r26	; 0x06
   124e2:	b7 83       	std	Z+7, r27	; 0x07
   124e4:	9e 01       	movw	r18, r28
   124e6:	2b 5a       	subi	r18, 0xAB	; 171
   124e8:	3f 4f       	sbci	r19, 0xFF	; 255
   124ea:	80 e0       	ldi	r24, 0x00	; 0
   124ec:	90 e0       	ldi	r25, 0x00	; 0
   124ee:	dc 01       	movw	r26, r24
   124f0:	f9 01       	movw	r30, r18
   124f2:	80 87       	std	Z+8, r24	; 0x08
   124f4:	91 87       	std	Z+9, r25	; 0x09
   124f6:	a2 87       	std	Z+10, r26	; 0x0a
   124f8:	b3 87       	std	Z+11, r27	; 0x0b
         float af_avrAcc[3] = {0.0f,0.0f,0.0f};
   124fa:	9e 01       	movw	r18, r28
   124fc:	2f 59       	subi	r18, 0x9F	; 159
   124fe:	3f 4f       	sbci	r19, 0xFF	; 255
   12500:	80 e0       	ldi	r24, 0x00	; 0
   12502:	90 e0       	ldi	r25, 0x00	; 0
   12504:	dc 01       	movw	r26, r24
   12506:	f9 01       	movw	r30, r18
   12508:	80 83       	st	Z, r24
   1250a:	91 83       	std	Z+1, r25	; 0x01
   1250c:	a2 83       	std	Z+2, r26	; 0x02
   1250e:	b3 83       	std	Z+3, r27	; 0x03
   12510:	9e 01       	movw	r18, r28
   12512:	2f 59       	subi	r18, 0x9F	; 159
   12514:	3f 4f       	sbci	r19, 0xFF	; 255
   12516:	80 e0       	ldi	r24, 0x00	; 0
   12518:	90 e0       	ldi	r25, 0x00	; 0
   1251a:	dc 01       	movw	r26, r24
   1251c:	f9 01       	movw	r30, r18
   1251e:	84 83       	std	Z+4, r24	; 0x04
   12520:	95 83       	std	Z+5, r25	; 0x05
   12522:	a6 83       	std	Z+6, r26	; 0x06
   12524:	b7 83       	std	Z+7, r27	; 0x07
   12526:	9e 01       	movw	r18, r28
   12528:	2f 59       	subi	r18, 0x9F	; 159
   1252a:	3f 4f       	sbci	r19, 0xFF	; 255
   1252c:	80 e0       	ldi	r24, 0x00	; 0
   1252e:	90 e0       	ldi	r25, 0x00	; 0
   12530:	dc 01       	movw	r26, r24
   12532:	f9 01       	movw	r30, r18
   12534:	80 87       	std	Z+8, r24	; 0x08
   12536:	91 87       	std	Z+9, r25	; 0x09
   12538:	a2 87       	std	Z+10, r26	; 0x0a
   1253a:	b3 87       	std	Z+11, r27	; 0x0b
         float f_mag;

         for( i_index = 0; i_index < INS_DCM_INIT_MAX_SAMP_TO_AVRG; i_index++)
   1253c:	1d 82       	std	Y+5, r1	; 0x05
   1253e:	1e 82       	std	Y+6, r1	; 0x06
   12540:	1f 82       	std	Y+7, r1	; 0x07
   12542:	18 86       	std	Y+8, r1	; 0x08
   12544:	7b c1       	rjmp	.+758    	; 0x1283c <insIoctl+0x9ca>
         {

            /*---------------------------------------------------------------*
             * Acquire new sensor data.
             *---------------------------------------------------------------*/
            readSensors( as_mag,
   12546:	ce 01       	movw	r24, r28
   12548:	8b 96       	adiw	r24, 0x2b	; 43
                         as_gyr,
   1254a:	ae 01       	movw	r20, r28
   1254c:	4f 5c       	subi	r20, 0xCF	; 207
   1254e:	5f 4f       	sbci	r21, 0xFF	; 255
                         as_acc);
   12550:	9e 01       	movw	r18, r28
   12552:	2d 5b       	subi	r18, 0xBD	; 189
   12554:	3f 4f       	sbci	r19, 0xFF	; 255
         {

            /*---------------------------------------------------------------*
             * Acquire new sensor data.
             *---------------------------------------------------------------*/
            readSensors( as_mag,
   12556:	ba 01       	movw	r22, r20
   12558:	a9 01       	movw	r20, r18
   1255a:	0e 94 24 7b 	call	0xf648	; 0xf648 <readSensors>

            /*---------------------------------------------------------------*
             * If there has been a valid calibration compensate for axis
             * misalignment and bias...
             *---------------------------------------------------------------*/
            if( gt_insDev.t_mag.t_cal == INS_CAL_COMPLETE)
   1255e:	80 91 32 24 	lds	r24, 0x2432
   12562:	82 30       	cpi	r24, 0x02	; 2
   12564:	51 f4       	brne	.+20     	; 0x1257a <insIoctl+0x708>
            {
               applyCalibration( as_mag,
   12566:	ce 01       	movw	r24, r28
   12568:	8b 96       	adiw	r24, 0x2b	; 43
   1256a:	62 e1       	ldi	r22, 0x12	; 18
   1256c:	74 e2       	ldi	r23, 0x24	; 36
   1256e:	44 e2       	ldi	r20, 0x24	; 36
   12570:	54 e2       	ldi	r21, 0x24	; 36
   12572:	2a e2       	ldi	r18, 0x2A	; 42
   12574:	34 e2       	ldi	r19, 0x24	; 36
   12576:	0e 94 9c 82 	call	0x10538	; 0x10538 <applyCalibration>

            /*---------------------------------------------------------------*
             * If there has been a valid accelerometer calibration compensate
             * for axis misalignment and bias...
             *---------------------------------------------------------------*/
            if( gt_insDev.t_accel.t_cal == INS_CAL_COMPLETE)
   1257a:	80 91 67 24 	lds	r24, 0x2467
   1257e:	82 30       	cpi	r24, 0x02	; 2
   12580:	59 f4       	brne	.+22     	; 0x12598 <insIoctl+0x726>
            {
               applyCalibration( as_acc,
   12582:	ce 01       	movw	r24, r28
   12584:	8d 5b       	subi	r24, 0xBD	; 189
   12586:	9f 4f       	sbci	r25, 0xFF	; 255
   12588:	67 e4       	ldi	r22, 0x47	; 71
   1258a:	74 e2       	ldi	r23, 0x24	; 36
   1258c:	49 e5       	ldi	r20, 0x59	; 89
   1258e:	54 e2       	ldi	r21, 0x24	; 36
   12590:	2f e5       	ldi	r18, 0x5F	; 95
   12592:	34 e2       	ldi	r19, 0x24	; 36
   12594:	0e 94 9c 82 	call	0x10538	; 0x10538 <applyCalibration>
            }/*End if( gt_insDev.t_accel.t_cal == INS_CAL_COMPLETE)*/

            /*---------------------------------------------------------------*
             * Accumulate sensor readings...
             *---------------------------------------------------------------*/
            af_avrMag[0] += (float)as_mag[0];
   12598:	ce 01       	movw	r24, r28
   1259a:	87 5b       	subi	r24, 0xB7	; 183
   1259c:	9f 4f       	sbci	r25, 0xFF	; 255
   1259e:	fc 01       	movw	r30, r24
   125a0:	e0 80       	ld	r14, Z
   125a2:	f1 80       	ldd	r15, Z+1	; 0x01
   125a4:	02 81       	ldd	r16, Z+2	; 0x02
   125a6:	13 81       	ldd	r17, Z+3	; 0x03
   125a8:	8b a5       	lds	r24, 0x6b
   125aa:	9c a5       	lds	r25, 0x6c
   125ac:	aa 27       	eor	r26, r26
   125ae:	97 fd       	sbrc	r25, 7
   125b0:	a0 95       	com	r26
   125b2:	ba 2f       	mov	r27, r26
   125b4:	bc 01       	movw	r22, r24
   125b6:	cd 01       	movw	r24, r26
   125b8:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   125bc:	9b 01       	movw	r18, r22
   125be:	ac 01       	movw	r20, r24
   125c0:	c8 01       	movw	r24, r16
   125c2:	b7 01       	movw	r22, r14
   125c4:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   125c8:	dc 01       	movw	r26, r24
   125ca:	cb 01       	movw	r24, r22
   125cc:	9e 01       	movw	r18, r28
   125ce:	27 5b       	subi	r18, 0xB7	; 183
   125d0:	3f 4f       	sbci	r19, 0xFF	; 255
   125d2:	f9 01       	movw	r30, r18
   125d4:	80 83       	st	Z, r24
   125d6:	91 83       	std	Z+1, r25	; 0x01
   125d8:	a2 83       	std	Z+2, r26	; 0x02
   125da:	b3 83       	std	Z+3, r27	; 0x03
            af_avrMag[1] += (float)as_mag[1];
   125dc:	ce 01       	movw	r24, r28
   125de:	87 5b       	subi	r24, 0xB7	; 183
   125e0:	9f 4f       	sbci	r25, 0xFF	; 255
   125e2:	fc 01       	movw	r30, r24
   125e4:	e4 80       	ldd	r14, Z+4	; 0x04
   125e6:	f5 80       	ldd	r15, Z+5	; 0x05
   125e8:	06 81       	ldd	r16, Z+6	; 0x06
   125ea:	17 81       	ldd	r17, Z+7	; 0x07
   125ec:	8d a5       	lds	r24, 0x6d
   125ee:	9e a5       	lds	r25, 0x6e
   125f0:	aa 27       	eor	r26, r26
   125f2:	97 fd       	sbrc	r25, 7
   125f4:	a0 95       	com	r26
   125f6:	ba 2f       	mov	r27, r26
   125f8:	bc 01       	movw	r22, r24
   125fa:	cd 01       	movw	r24, r26
   125fc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12600:	9b 01       	movw	r18, r22
   12602:	ac 01       	movw	r20, r24
   12604:	c8 01       	movw	r24, r16
   12606:	b7 01       	movw	r22, r14
   12608:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1260c:	dc 01       	movw	r26, r24
   1260e:	cb 01       	movw	r24, r22
   12610:	9e 01       	movw	r18, r28
   12612:	27 5b       	subi	r18, 0xB7	; 183
   12614:	3f 4f       	sbci	r19, 0xFF	; 255
   12616:	f9 01       	movw	r30, r18
   12618:	84 83       	std	Z+4, r24	; 0x04
   1261a:	95 83       	std	Z+5, r25	; 0x05
   1261c:	a6 83       	std	Z+6, r26	; 0x06
   1261e:	b7 83       	std	Z+7, r27	; 0x07
            af_avrMag[2] += (float)as_mag[2];
   12620:	ce 01       	movw	r24, r28
   12622:	87 5b       	subi	r24, 0xB7	; 183
   12624:	9f 4f       	sbci	r25, 0xFF	; 255
   12626:	fc 01       	movw	r30, r24
   12628:	e0 84       	ldd	r14, Z+8	; 0x08
   1262a:	f1 84       	ldd	r15, Z+9	; 0x09
   1262c:	02 85       	ldd	r16, Z+10	; 0x0a
   1262e:	13 85       	ldd	r17, Z+11	; 0x0b
   12630:	8f a5       	lds	r24, 0x6f
   12632:	98 a9       	sts	0x48, r25
   12634:	aa 27       	eor	r26, r26
   12636:	97 fd       	sbrc	r25, 7
   12638:	a0 95       	com	r26
   1263a:	ba 2f       	mov	r27, r26
   1263c:	bc 01       	movw	r22, r24
   1263e:	cd 01       	movw	r24, r26
   12640:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12644:	9b 01       	movw	r18, r22
   12646:	ac 01       	movw	r20, r24
   12648:	c8 01       	movw	r24, r16
   1264a:	b7 01       	movw	r22, r14
   1264c:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12650:	dc 01       	movw	r26, r24
   12652:	cb 01       	movw	r24, r22
   12654:	9e 01       	movw	r18, r28
   12656:	27 5b       	subi	r18, 0xB7	; 183
   12658:	3f 4f       	sbci	r19, 0xFF	; 255
   1265a:	f9 01       	movw	r30, r18
   1265c:	80 87       	std	Z+8, r24	; 0x08
   1265e:	91 87       	std	Z+9, r25	; 0x09
   12660:	a2 87       	std	Z+10, r26	; 0x0a
   12662:	b3 87       	std	Z+11, r27	; 0x0b

            /*---------------------------------------------------------------*
             * Convert the gyro measurement into rad/sec where 1 rad = 32767
             *---------------------------------------------------------------*/
            gyroDegToRad( as_gyr,
   12664:	ce 01       	movw	r24, r28
   12666:	c1 96       	adiw	r24, 0x31	; 49
                          ai_gyr);
   12668:	9e 01       	movw	r18, r28
   1266a:	29 5c       	subi	r18, 0xC9	; 201
   1266c:	3f 4f       	sbci	r19, 0xFF	; 255
            af_avrMag[2] += (float)as_mag[2];

            /*---------------------------------------------------------------*
             * Convert the gyro measurement into rad/sec where 1 rad = 32767
             *---------------------------------------------------------------*/
            gyroDegToRad( as_gyr,
   1266e:	b9 01       	movw	r22, r18
   12670:	0e 94 af 7a 	call	0xf55e	; 0xf55e <gyroDegToRad>
                          ai_gyr);

            af_avrGyr[0] += (float)ai_gyr[0];
   12674:	ce 01       	movw	r24, r28
   12676:	8b 5a       	subi	r24, 0xAB	; 171
   12678:	9f 4f       	sbci	r25, 0xFF	; 255
   1267a:	fc 01       	movw	r30, r24
   1267c:	e0 80       	ld	r14, Z
   1267e:	f1 80       	ldd	r15, Z+1	; 0x01
   12680:	02 81       	ldd	r16, Z+2	; 0x02
   12682:	13 81       	ldd	r17, Z+3	; 0x03
   12684:	8f a9       	sts	0x4f, r24
   12686:	98 ad       	sts	0x68, r25
   12688:	a9 ad       	sts	0x69, r26
   1268a:	ba ad       	sts	0x6a, r27
   1268c:	bc 01       	movw	r22, r24
   1268e:	cd 01       	movw	r24, r26
   12690:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12694:	9b 01       	movw	r18, r22
   12696:	ac 01       	movw	r20, r24
   12698:	c8 01       	movw	r24, r16
   1269a:	b7 01       	movw	r22, r14
   1269c:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   126a0:	dc 01       	movw	r26, r24
   126a2:	cb 01       	movw	r24, r22
   126a4:	9e 01       	movw	r18, r28
   126a6:	2b 5a       	subi	r18, 0xAB	; 171
   126a8:	3f 4f       	sbci	r19, 0xFF	; 255
   126aa:	f9 01       	movw	r30, r18
   126ac:	80 83       	st	Z, r24
   126ae:	91 83       	std	Z+1, r25	; 0x01
   126b0:	a2 83       	std	Z+2, r26	; 0x02
   126b2:	b3 83       	std	Z+3, r27	; 0x03
            af_avrGyr[1] += (float)ai_gyr[1];
   126b4:	ce 01       	movw	r24, r28
   126b6:	8b 5a       	subi	r24, 0xAB	; 171
   126b8:	9f 4f       	sbci	r25, 0xFF	; 255
   126ba:	fc 01       	movw	r30, r24
   126bc:	e4 80       	ldd	r14, Z+4	; 0x04
   126be:	f5 80       	ldd	r15, Z+5	; 0x05
   126c0:	06 81       	ldd	r16, Z+6	; 0x06
   126c2:	17 81       	ldd	r17, Z+7	; 0x07
   126c4:	8b ad       	sts	0x6b, r24
   126c6:	9c ad       	sts	0x6c, r25
   126c8:	ad ad       	sts	0x6d, r26
   126ca:	be ad       	sts	0x6e, r27
   126cc:	bc 01       	movw	r22, r24
   126ce:	cd 01       	movw	r24, r26
   126d0:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   126d4:	9b 01       	movw	r18, r22
   126d6:	ac 01       	movw	r20, r24
   126d8:	c8 01       	movw	r24, r16
   126da:	b7 01       	movw	r22, r14
   126dc:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   126e0:	dc 01       	movw	r26, r24
   126e2:	cb 01       	movw	r24, r22
   126e4:	9e 01       	movw	r18, r28
   126e6:	2b 5a       	subi	r18, 0xAB	; 171
   126e8:	3f 4f       	sbci	r19, 0xFF	; 255
   126ea:	f9 01       	movw	r30, r18
   126ec:	84 83       	std	Z+4, r24	; 0x04
   126ee:	95 83       	std	Z+5, r25	; 0x05
   126f0:	a6 83       	std	Z+6, r26	; 0x06
   126f2:	b7 83       	std	Z+7, r27	; 0x07
            af_avrGyr[2] += (float)ai_gyr[2];
   126f4:	ce 01       	movw	r24, r28
   126f6:	8b 5a       	subi	r24, 0xAB	; 171
   126f8:	9f 4f       	sbci	r25, 0xFF	; 255
   126fa:	fc 01       	movw	r30, r24
   126fc:	e0 84       	ldd	r14, Z+8	; 0x08
   126fe:	f1 84       	ldd	r15, Z+9	; 0x09
   12700:	02 85       	ldd	r16, Z+10	; 0x0a
   12702:	13 85       	ldd	r17, Z+11	; 0x0b
   12704:	ce 01       	movw	r24, r28
   12706:	cf 96       	adiw	r24, 0x3f	; 63
   12708:	fc 01       	movw	r30, r24
   1270a:	80 81       	ld	r24, Z
   1270c:	91 81       	ldd	r25, Z+1	; 0x01
   1270e:	a2 81       	ldd	r26, Z+2	; 0x02
   12710:	b3 81       	ldd	r27, Z+3	; 0x03
   12712:	bc 01       	movw	r22, r24
   12714:	cd 01       	movw	r24, r26
   12716:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1271a:	9b 01       	movw	r18, r22
   1271c:	ac 01       	movw	r20, r24
   1271e:	c8 01       	movw	r24, r16
   12720:	b7 01       	movw	r22, r14
   12722:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12726:	dc 01       	movw	r26, r24
   12728:	cb 01       	movw	r24, r22
   1272a:	9e 01       	movw	r18, r28
   1272c:	2b 5a       	subi	r18, 0xAB	; 171
   1272e:	3f 4f       	sbci	r19, 0xFF	; 255
   12730:	f9 01       	movw	r30, r18
   12732:	80 87       	std	Z+8, r24	; 0x08
   12734:	91 87       	std	Z+9, r25	; 0x09
   12736:	a2 87       	std	Z+10, r26	; 0x0a
   12738:	b3 87       	std	Z+11, r27	; 0x0b

            af_avrAcc[0] += (float)as_acc[0];
   1273a:	ce 01       	movw	r24, r28
   1273c:	8f 59       	subi	r24, 0x9F	; 159
   1273e:	9f 4f       	sbci	r25, 0xFF	; 255
   12740:	fc 01       	movw	r30, r24
   12742:	e0 80       	ld	r14, Z
   12744:	f1 80       	ldd	r15, Z+1	; 0x01
   12746:	02 81       	ldd	r16, Z+2	; 0x02
   12748:	13 81       	ldd	r17, Z+3	; 0x03
   1274a:	ce 01       	movw	r24, r28
   1274c:	8d 5b       	subi	r24, 0xBD	; 189
   1274e:	9f 4f       	sbci	r25, 0xFF	; 255
   12750:	fc 01       	movw	r30, r24
   12752:	80 81       	ld	r24, Z
   12754:	91 81       	ldd	r25, Z+1	; 0x01
   12756:	aa 27       	eor	r26, r26
   12758:	97 fd       	sbrc	r25, 7
   1275a:	a0 95       	com	r26
   1275c:	ba 2f       	mov	r27, r26
   1275e:	bc 01       	movw	r22, r24
   12760:	cd 01       	movw	r24, r26
   12762:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12766:	9b 01       	movw	r18, r22
   12768:	ac 01       	movw	r20, r24
   1276a:	c8 01       	movw	r24, r16
   1276c:	b7 01       	movw	r22, r14
   1276e:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12772:	dc 01       	movw	r26, r24
   12774:	cb 01       	movw	r24, r22
   12776:	9e 01       	movw	r18, r28
   12778:	2f 59       	subi	r18, 0x9F	; 159
   1277a:	3f 4f       	sbci	r19, 0xFF	; 255
   1277c:	f9 01       	movw	r30, r18
   1277e:	80 83       	st	Z, r24
   12780:	91 83       	std	Z+1, r25	; 0x01
   12782:	a2 83       	std	Z+2, r26	; 0x02
   12784:	b3 83       	std	Z+3, r27	; 0x03
            af_avrAcc[1] += (float)as_acc[1];
   12786:	ce 01       	movw	r24, r28
   12788:	8f 59       	subi	r24, 0x9F	; 159
   1278a:	9f 4f       	sbci	r25, 0xFF	; 255
   1278c:	fc 01       	movw	r30, r24
   1278e:	e4 80       	ldd	r14, Z+4	; 0x04
   12790:	f5 80       	ldd	r15, Z+5	; 0x05
   12792:	06 81       	ldd	r16, Z+6	; 0x06
   12794:	17 81       	ldd	r17, Z+7	; 0x07
   12796:	ce 01       	movw	r24, r28
   12798:	8d 5b       	subi	r24, 0xBD	; 189
   1279a:	9f 4f       	sbci	r25, 0xFF	; 255
   1279c:	fc 01       	movw	r30, r24
   1279e:	82 81       	ldd	r24, Z+2	; 0x02
   127a0:	93 81       	ldd	r25, Z+3	; 0x03
   127a2:	aa 27       	eor	r26, r26
   127a4:	97 fd       	sbrc	r25, 7
   127a6:	a0 95       	com	r26
   127a8:	ba 2f       	mov	r27, r26
   127aa:	bc 01       	movw	r22, r24
   127ac:	cd 01       	movw	r24, r26
   127ae:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   127b2:	9b 01       	movw	r18, r22
   127b4:	ac 01       	movw	r20, r24
   127b6:	c8 01       	movw	r24, r16
   127b8:	b7 01       	movw	r22, r14
   127ba:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   127be:	dc 01       	movw	r26, r24
   127c0:	cb 01       	movw	r24, r22
   127c2:	9e 01       	movw	r18, r28
   127c4:	2f 59       	subi	r18, 0x9F	; 159
   127c6:	3f 4f       	sbci	r19, 0xFF	; 255
   127c8:	f9 01       	movw	r30, r18
   127ca:	84 83       	std	Z+4, r24	; 0x04
   127cc:	95 83       	std	Z+5, r25	; 0x05
   127ce:	a6 83       	std	Z+6, r26	; 0x06
   127d0:	b7 83       	std	Z+7, r27	; 0x07
            af_avrAcc[2] += (float)as_acc[2];
   127d2:	ce 01       	movw	r24, r28
   127d4:	8f 59       	subi	r24, 0x9F	; 159
   127d6:	9f 4f       	sbci	r25, 0xFF	; 255
   127d8:	fc 01       	movw	r30, r24
   127da:	e0 84       	ldd	r14, Z+8	; 0x08
   127dc:	f1 84       	ldd	r15, Z+9	; 0x09
   127de:	02 85       	ldd	r16, Z+10	; 0x0a
   127e0:	13 85       	ldd	r17, Z+11	; 0x0b
   127e2:	ce 01       	movw	r24, r28
   127e4:	8d 5b       	subi	r24, 0xBD	; 189
   127e6:	9f 4f       	sbci	r25, 0xFF	; 255
   127e8:	fc 01       	movw	r30, r24
   127ea:	84 81       	ldd	r24, Z+4	; 0x04
   127ec:	95 81       	ldd	r25, Z+5	; 0x05
   127ee:	aa 27       	eor	r26, r26
   127f0:	97 fd       	sbrc	r25, 7
   127f2:	a0 95       	com	r26
   127f4:	ba 2f       	mov	r27, r26
   127f6:	bc 01       	movw	r22, r24
   127f8:	cd 01       	movw	r24, r26
   127fa:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   127fe:	9b 01       	movw	r18, r22
   12800:	ac 01       	movw	r20, r24
   12802:	c8 01       	movw	r24, r16
   12804:	b7 01       	movw	r22, r14
   12806:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1280a:	dc 01       	movw	r26, r24
   1280c:	cb 01       	movw	r24, r22
   1280e:	9e 01       	movw	r18, r28
   12810:	2f 59       	subi	r18, 0x9F	; 159
   12812:	3f 4f       	sbci	r19, 0xFF	; 255
   12814:	f9 01       	movw	r30, r18
   12816:	80 87       	std	Z+8, r24	; 0x08
   12818:	91 87       	std	Z+9, r25	; 0x09
   1281a:	a2 87       	std	Z+10, r26	; 0x0a
   1281c:	b3 87       	std	Z+11, r27	; 0x0b

				arb_sleep( INS_DT_SLEEP);
   1281e:	85 e0       	ldi	r24, 0x05	; 5
   12820:	90 e0       	ldi	r25, 0x00	; 0
   12822:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>
         float af_avrMag[3] = {0.0f,0.0f,0.0f};
         float af_avrGyr[3] = {0.0f,0.0f,0.0f};
         float af_avrAcc[3] = {0.0f,0.0f,0.0f};
         float f_mag;

         for( i_index = 0; i_index < INS_DCM_INIT_MAX_SAMP_TO_AVRG; i_index++)
   12826:	8d 81       	ldd	r24, Y+5	; 0x05
   12828:	9e 81       	ldd	r25, Y+6	; 0x06
   1282a:	af 81       	ldd	r26, Y+7	; 0x07
   1282c:	b8 85       	ldd	r27, Y+8	; 0x08
   1282e:	01 96       	adiw	r24, 0x01	; 1
   12830:	a1 1d       	adc	r26, r1
   12832:	b1 1d       	adc	r27, r1
   12834:	8d 83       	std	Y+5, r24	; 0x05
   12836:	9e 83       	std	Y+6, r25	; 0x06
   12838:	af 83       	std	Y+7, r26	; 0x07
   1283a:	b8 87       	std	Y+8, r27	; 0x08
   1283c:	8d 81       	ldd	r24, Y+5	; 0x05
   1283e:	9e 81       	ldd	r25, Y+6	; 0x06
   12840:	af 81       	ldd	r26, Y+7	; 0x07
   12842:	b8 85       	ldd	r27, Y+8	; 0x08
   12844:	8a 30       	cpi	r24, 0x0A	; 10
   12846:	91 05       	cpc	r25, r1
   12848:	a1 05       	cpc	r26, r1
   1284a:	b1 05       	cpc	r27, r1
   1284c:	0c f4       	brge	.+2      	; 0x12850 <insIoctl+0x9de>
   1284e:	7b ce       	rjmp	.-778    	; 0x12546 <insIoctl+0x6d4>

         /*------------------------------------------------------------------*
          * Calculate the magnitude of the average magnetic field vector.
          * eq 10.17 of [3]
          *------------------------------------------------------------------*/
         af_avrMag[0] = af_avrMag[0] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   12850:	ce 01       	movw	r24, r28
   12852:	87 5b       	subi	r24, 0xB7	; 183
   12854:	9f 4f       	sbci	r25, 0xFF	; 255
   12856:	fc 01       	movw	r30, r24
   12858:	80 81       	ld	r24, Z
   1285a:	91 81       	ldd	r25, Z+1	; 0x01
   1285c:	a2 81       	ldd	r26, Z+2	; 0x02
   1285e:	b3 81       	ldd	r27, Z+3	; 0x03
   12860:	bc 01       	movw	r22, r24
   12862:	cd 01       	movw	r24, r26
   12864:	20 e0       	ldi	r18, 0x00	; 0
   12866:	30 e0       	ldi	r19, 0x00	; 0
   12868:	40 e2       	ldi	r20, 0x20	; 32
   1286a:	51 e4       	ldi	r21, 0x41	; 65
   1286c:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12870:	dc 01       	movw	r26, r24
   12872:	cb 01       	movw	r24, r22
   12874:	9e 01       	movw	r18, r28
   12876:	27 5b       	subi	r18, 0xB7	; 183
   12878:	3f 4f       	sbci	r19, 0xFF	; 255
   1287a:	f9 01       	movw	r30, r18
   1287c:	80 83       	st	Z, r24
   1287e:	91 83       	std	Z+1, r25	; 0x01
   12880:	a2 83       	std	Z+2, r26	; 0x02
   12882:	b3 83       	std	Z+3, r27	; 0x03
         af_avrMag[1] = af_avrMag[1] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   12884:	ce 01       	movw	r24, r28
   12886:	87 5b       	subi	r24, 0xB7	; 183
   12888:	9f 4f       	sbci	r25, 0xFF	; 255
   1288a:	fc 01       	movw	r30, r24
   1288c:	84 81       	ldd	r24, Z+4	; 0x04
   1288e:	95 81       	ldd	r25, Z+5	; 0x05
   12890:	a6 81       	ldd	r26, Z+6	; 0x06
   12892:	b7 81       	ldd	r27, Z+7	; 0x07
   12894:	bc 01       	movw	r22, r24
   12896:	cd 01       	movw	r24, r26
   12898:	20 e0       	ldi	r18, 0x00	; 0
   1289a:	30 e0       	ldi	r19, 0x00	; 0
   1289c:	40 e2       	ldi	r20, 0x20	; 32
   1289e:	51 e4       	ldi	r21, 0x41	; 65
   128a0:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   128a4:	dc 01       	movw	r26, r24
   128a6:	cb 01       	movw	r24, r22
   128a8:	9e 01       	movw	r18, r28
   128aa:	27 5b       	subi	r18, 0xB7	; 183
   128ac:	3f 4f       	sbci	r19, 0xFF	; 255
   128ae:	f9 01       	movw	r30, r18
   128b0:	84 83       	std	Z+4, r24	; 0x04
   128b2:	95 83       	std	Z+5, r25	; 0x05
   128b4:	a6 83       	std	Z+6, r26	; 0x06
   128b6:	b7 83       	std	Z+7, r27	; 0x07
         af_avrMag[2] = af_avrMag[2] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   128b8:	ce 01       	movw	r24, r28
   128ba:	87 5b       	subi	r24, 0xB7	; 183
   128bc:	9f 4f       	sbci	r25, 0xFF	; 255
   128be:	fc 01       	movw	r30, r24
   128c0:	80 85       	ldd	r24, Z+8	; 0x08
   128c2:	91 85       	ldd	r25, Z+9	; 0x09
   128c4:	a2 85       	ldd	r26, Z+10	; 0x0a
   128c6:	b3 85       	ldd	r27, Z+11	; 0x0b
   128c8:	bc 01       	movw	r22, r24
   128ca:	cd 01       	movw	r24, r26
   128cc:	20 e0       	ldi	r18, 0x00	; 0
   128ce:	30 e0       	ldi	r19, 0x00	; 0
   128d0:	40 e2       	ldi	r20, 0x20	; 32
   128d2:	51 e4       	ldi	r21, 0x41	; 65
   128d4:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   128d8:	dc 01       	movw	r26, r24
   128da:	cb 01       	movw	r24, r22
   128dc:	9e 01       	movw	r18, r28
   128de:	27 5b       	subi	r18, 0xB7	; 183
   128e0:	3f 4f       	sbci	r19, 0xFF	; 255
   128e2:	f9 01       	movw	r30, r18
   128e4:	80 87       	std	Z+8, r24	; 0x08
   128e6:	91 87       	std	Z+9, r25	; 0x09
   128e8:	a2 87       	std	Z+10, r26	; 0x0a
   128ea:	b3 87       	std	Z+11, r27	; 0x0b

         f_mag = sqrtf( af_avrMag[0]*af_avrMag[0] + af_avrMag[1]*af_avrMag[1] +
   128ec:	ce 01       	movw	r24, r28
   128ee:	87 5b       	subi	r24, 0xB7	; 183
   128f0:	9f 4f       	sbci	r25, 0xFF	; 255
   128f2:	fc 01       	movw	r30, r24
   128f4:	80 81       	ld	r24, Z
   128f6:	91 81       	ldd	r25, Z+1	; 0x01
   128f8:	a2 81       	ldd	r26, Z+2	; 0x02
   128fa:	b3 81       	ldd	r27, Z+3	; 0x03
   128fc:	9e 01       	movw	r18, r28
   128fe:	27 5b       	subi	r18, 0xB7	; 183
   12900:	3f 4f       	sbci	r19, 0xFF	; 255
   12902:	f9 01       	movw	r30, r18
   12904:	20 81       	ld	r18, Z
   12906:	31 81       	ldd	r19, Z+1	; 0x01
   12908:	42 81       	ldd	r20, Z+2	; 0x02
   1290a:	53 81       	ldd	r21, Z+3	; 0x03
   1290c:	bc 01       	movw	r22, r24
   1290e:	cd 01       	movw	r24, r26
   12910:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12914:	dc 01       	movw	r26, r24
   12916:	cb 01       	movw	r24, r22
   12918:	7c 01       	movw	r14, r24
   1291a:	8d 01       	movw	r16, r26
   1291c:	ce 01       	movw	r24, r28
   1291e:	87 5b       	subi	r24, 0xB7	; 183
   12920:	9f 4f       	sbci	r25, 0xFF	; 255
   12922:	fc 01       	movw	r30, r24
   12924:	84 81       	ldd	r24, Z+4	; 0x04
   12926:	95 81       	ldd	r25, Z+5	; 0x05
   12928:	a6 81       	ldd	r26, Z+6	; 0x06
   1292a:	b7 81       	ldd	r27, Z+7	; 0x07
   1292c:	9e 01       	movw	r18, r28
   1292e:	27 5b       	subi	r18, 0xB7	; 183
   12930:	3f 4f       	sbci	r19, 0xFF	; 255
   12932:	f9 01       	movw	r30, r18
   12934:	24 81       	ldd	r18, Z+4	; 0x04
   12936:	35 81       	ldd	r19, Z+5	; 0x05
   12938:	46 81       	ldd	r20, Z+6	; 0x06
   1293a:	57 81       	ldd	r21, Z+7	; 0x07
   1293c:	bc 01       	movw	r22, r24
   1293e:	cd 01       	movw	r24, r26
   12940:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12944:	dc 01       	movw	r26, r24
   12946:	cb 01       	movw	r24, r22
   12948:	9c 01       	movw	r18, r24
   1294a:	ad 01       	movw	r20, r26
   1294c:	c8 01       	movw	r24, r16
   1294e:	b7 01       	movw	r22, r14
   12950:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12954:	dc 01       	movw	r26, r24
   12956:	cb 01       	movw	r24, r22
   12958:	7c 01       	movw	r14, r24
   1295a:	8d 01       	movw	r16, r26
         af_avrMag[2]*af_avrMag[2]);
   1295c:	ce 01       	movw	r24, r28
   1295e:	87 5b       	subi	r24, 0xB7	; 183
   12960:	9f 4f       	sbci	r25, 0xFF	; 255
   12962:	fc 01       	movw	r30, r24
   12964:	80 85       	ldd	r24, Z+8	; 0x08
   12966:	91 85       	ldd	r25, Z+9	; 0x09
   12968:	a2 85       	ldd	r26, Z+10	; 0x0a
   1296a:	b3 85       	ldd	r27, Z+11	; 0x0b
   1296c:	9e 01       	movw	r18, r28
   1296e:	27 5b       	subi	r18, 0xB7	; 183
   12970:	3f 4f       	sbci	r19, 0xFF	; 255
   12972:	f9 01       	movw	r30, r18
   12974:	20 85       	ldd	r18, Z+8	; 0x08
   12976:	31 85       	ldd	r19, Z+9	; 0x09
   12978:	42 85       	ldd	r20, Z+10	; 0x0a
   1297a:	53 85       	ldd	r21, Z+11	; 0x0b
   1297c:	bc 01       	movw	r22, r24
   1297e:	cd 01       	movw	r24, r26
   12980:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12984:	dc 01       	movw	r26, r24
   12986:	cb 01       	movw	r24, r22
   12988:	9c 01       	movw	r18, r24
   1298a:	ad 01       	movw	r20, r26
          *------------------------------------------------------------------*/
         af_avrMag[0] = af_avrMag[0] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
         af_avrMag[1] = af_avrMag[1] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
         af_avrMag[2] = af_avrMag[2] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;

         f_mag = sqrtf( af_avrMag[0]*af_avrMag[0] + af_avrMag[1]*af_avrMag[1] +
   1298c:	c8 01       	movw	r24, r16
   1298e:	b7 01       	movw	r22, r14
   12990:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12994:	dc 01       	movw	r26, r24
   12996:	cb 01       	movw	r24, r22
   12998:	bc 01       	movw	r22, r24
   1299a:	cd 01       	movw	r24, r26
   1299c:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
   129a0:	dc 01       	movw	r26, r24
   129a2:	cb 01       	movw	r24, r22
   129a4:	8b 8b       	std	Y+19, r24	; 0x13
   129a6:	9c 8b       	std	Y+20, r25	; 0x14
   129a8:	ad 8b       	std	Y+21, r26	; 0x15
   129aa:	be 8b       	std	Y+22, r27	; 0x16
         af_avrMag[2]*af_avrMag[2]);

         gt_insDev.t_mag.s_calMagFieldStr = (int16_t)f_mag;
   129ac:	6b 89       	ldd	r22, Y+19	; 0x13
   129ae:	7c 89       	ldd	r23, Y+20	; 0x14
   129b0:	8d 89       	ldd	r24, Y+21	; 0x15
   129b2:	9e 89       	ldd	r25, Y+22	; 0x16
   129b4:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   129b8:	dc 01       	movw	r26, r24
   129ba:	cb 01       	movw	r24, r22
   129bc:	80 93 30 24 	sts	0x2430, r24
   129c0:	90 93 31 24 	sts	0x2431, r25

         /*------------------------------------------------------------------*
          * If the remainder than round up...
          *------------------------------------------------------------------*/
         if( (f_mag - (float)gt_insDev.t_mag.s_calMagFieldStr) > .5f)
   129c4:	80 91 30 24 	lds	r24, 0x2430
   129c8:	90 91 31 24 	lds	r25, 0x2431
   129cc:	aa 27       	eor	r26, r26
   129ce:	97 fd       	sbrc	r25, 7
   129d0:	a0 95       	com	r26
   129d2:	ba 2f       	mov	r27, r26
   129d4:	bc 01       	movw	r22, r24
   129d6:	cd 01       	movw	r24, r26
   129d8:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   129dc:	9b 01       	movw	r18, r22
   129de:	ac 01       	movw	r20, r24
   129e0:	6b 89       	ldd	r22, Y+19	; 0x13
   129e2:	7c 89       	ldd	r23, Y+20	; 0x14
   129e4:	8d 89       	ldd	r24, Y+21	; 0x15
   129e6:	9e 89       	ldd	r25, Y+22	; 0x16
   129e8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
   129ec:	dc 01       	movw	r26, r24
   129ee:	cb 01       	movw	r24, r22
   129f0:	11 e0       	ldi	r17, 0x01	; 1
   129f2:	bc 01       	movw	r22, r24
   129f4:	cd 01       	movw	r24, r26
   129f6:	20 e0       	ldi	r18, 0x00	; 0
   129f8:	30 e0       	ldi	r19, 0x00	; 0
   129fa:	40 e0       	ldi	r20, 0x00	; 0
   129fc:	5f e3       	ldi	r21, 0x3F	; 63
   129fe:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
   12a02:	18 16       	cp	r1, r24
   12a04:	0c f0       	brlt	.+2      	; 0x12a08 <insIoctl+0xb96>
   12a06:	10 e0       	ldi	r17, 0x00	; 0
   12a08:	11 23       	and	r17, r17
   12a0a:	49 f0       	breq	.+18     	; 0x12a1e <insIoctl+0xbac>
            gt_insDev.t_mag.s_calMagFieldStr += 1;
   12a0c:	80 91 30 24 	lds	r24, 0x2430
   12a10:	90 91 31 24 	lds	r25, 0x2431
   12a14:	01 96       	adiw	r24, 0x01	; 1
   12a16:	80 93 30 24 	sts	0x2430, r24
   12a1a:	90 93 31 24 	sts	0x2431, r25

         /*------------------------------------------------------------------*
          * Calculate the average gyro bias vector.
          *------------------------------------------------------------------*/
         gt_insDev.t_gyro.as_bias[0] = (int16_t)(af_avrGyr[0] /
   12a1e:	ce 01       	movw	r24, r28
   12a20:	8b 5a       	subi	r24, 0xAB	; 171
   12a22:	9f 4f       	sbci	r25, 0xFF	; 255
   12a24:	fc 01       	movw	r30, r24
   12a26:	80 81       	ld	r24, Z
   12a28:	91 81       	ldd	r25, Z+1	; 0x01
   12a2a:	a2 81       	ldd	r26, Z+2	; 0x02
   12a2c:	b3 81       	ldd	r27, Z+3	; 0x03
   12a2e:	bc 01       	movw	r22, r24
   12a30:	cd 01       	movw	r24, r26
   12a32:	20 e0       	ldi	r18, 0x00	; 0
   12a34:	30 e0       	ldi	r19, 0x00	; 0
   12a36:	40 e2       	ldi	r20, 0x20	; 32
   12a38:	51 e4       	ldi	r21, 0x41	; 65
   12a3a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12a3e:	dc 01       	movw	r26, r24
   12a40:	cb 01       	movw	r24, r22
   12a42:	bc 01       	movw	r22, r24
   12a44:	cd 01       	movw	r24, r26
   12a46:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12a4a:	dc 01       	movw	r26, r24
   12a4c:	cb 01       	movw	r24, r22
   12a4e:	80 93 33 24 	sts	0x2433, r24
   12a52:	90 93 34 24 	sts	0x2434, r25
         INS_DCM_INIT_MAX_SAMP_TO_AVRG);
         gt_insDev.t_gyro.as_bias[1] = (int16_t)(af_avrGyr[1] /
   12a56:	ce 01       	movw	r24, r28
   12a58:	8b 5a       	subi	r24, 0xAB	; 171
   12a5a:	9f 4f       	sbci	r25, 0xFF	; 255
   12a5c:	fc 01       	movw	r30, r24
   12a5e:	84 81       	ldd	r24, Z+4	; 0x04
   12a60:	95 81       	ldd	r25, Z+5	; 0x05
   12a62:	a6 81       	ldd	r26, Z+6	; 0x06
   12a64:	b7 81       	ldd	r27, Z+7	; 0x07
   12a66:	bc 01       	movw	r22, r24
   12a68:	cd 01       	movw	r24, r26
   12a6a:	20 e0       	ldi	r18, 0x00	; 0
   12a6c:	30 e0       	ldi	r19, 0x00	; 0
   12a6e:	40 e2       	ldi	r20, 0x20	; 32
   12a70:	51 e4       	ldi	r21, 0x41	; 65
   12a72:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12a76:	dc 01       	movw	r26, r24
   12a78:	cb 01       	movw	r24, r22
   12a7a:	bc 01       	movw	r22, r24
   12a7c:	cd 01       	movw	r24, r26
   12a7e:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12a82:	dc 01       	movw	r26, r24
   12a84:	cb 01       	movw	r24, r22
   12a86:	80 93 35 24 	sts	0x2435, r24
   12a8a:	90 93 36 24 	sts	0x2436, r25
         INS_DCM_INIT_MAX_SAMP_TO_AVRG);
         gt_insDev.t_gyro.as_bias[2] = (int16_t)(af_avrGyr[2] /
   12a8e:	ce 01       	movw	r24, r28
   12a90:	8b 5a       	subi	r24, 0xAB	; 171
   12a92:	9f 4f       	sbci	r25, 0xFF	; 255
   12a94:	fc 01       	movw	r30, r24
   12a96:	80 85       	ldd	r24, Z+8	; 0x08
   12a98:	91 85       	ldd	r25, Z+9	; 0x09
   12a9a:	a2 85       	ldd	r26, Z+10	; 0x0a
   12a9c:	b3 85       	ldd	r27, Z+11	; 0x0b
   12a9e:	bc 01       	movw	r22, r24
   12aa0:	cd 01       	movw	r24, r26
   12aa2:	20 e0       	ldi	r18, 0x00	; 0
   12aa4:	30 e0       	ldi	r19, 0x00	; 0
   12aa6:	40 e2       	ldi	r20, 0x20	; 32
   12aa8:	51 e4       	ldi	r21, 0x41	; 65
   12aaa:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12aae:	dc 01       	movw	r26, r24
   12ab0:	cb 01       	movw	r24, r22
   12ab2:	bc 01       	movw	r22, r24
   12ab4:	cd 01       	movw	r24, r26
   12ab6:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12aba:	dc 01       	movw	r26, r24
   12abc:	cb 01       	movw	r24, r22
   12abe:	80 93 37 24 	sts	0x2437, r24
   12ac2:	90 93 38 24 	sts	0x2438, r25

         /*------------------------------------------------------------------*
          * Save a copy of the bias to be used in case the Kalman filter is
          * reset after encountering a runtime error.
          *------------------------------------------------------------------*/
         gt_insDev.t_gyro.as_calBias[0] = gt_insDev.t_gyro.as_bias[0];
   12ac6:	80 91 33 24 	lds	r24, 0x2433
   12aca:	90 91 34 24 	lds	r25, 0x2434
   12ace:	80 93 39 24 	sts	0x2439, r24
   12ad2:	90 93 3a 24 	sts	0x243A, r25
         gt_insDev.t_gyro.as_calBias[1] = gt_insDev.t_gyro.as_bias[1];
   12ad6:	80 91 35 24 	lds	r24, 0x2435
   12ada:	90 91 36 24 	lds	r25, 0x2436
   12ade:	80 93 3b 24 	sts	0x243B, r24
   12ae2:	90 93 3c 24 	sts	0x243C, r25
         gt_insDev.t_gyro.as_calBias[2] = gt_insDev.t_gyro.as_bias[2];
   12ae6:	80 91 37 24 	lds	r24, 0x2437
   12aea:	90 91 38 24 	lds	r25, 0x2438
   12aee:	80 93 3d 24 	sts	0x243D, r24
   12af2:	90 93 3e 24 	sts	0x243E, r25

         /*------------------------------------------------------------------*
          * Calculate the magnitude of the average gravity vector.
          * eq 10.13 of [3]
          *------------------------------------------------------------------*/
         af_avrAcc[0] = af_avrAcc[0] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   12af6:	ce 01       	movw	r24, r28
   12af8:	8f 59       	subi	r24, 0x9F	; 159
   12afa:	9f 4f       	sbci	r25, 0xFF	; 255
   12afc:	fc 01       	movw	r30, r24
   12afe:	80 81       	ld	r24, Z
   12b00:	91 81       	ldd	r25, Z+1	; 0x01
   12b02:	a2 81       	ldd	r26, Z+2	; 0x02
   12b04:	b3 81       	ldd	r27, Z+3	; 0x03
   12b06:	bc 01       	movw	r22, r24
   12b08:	cd 01       	movw	r24, r26
   12b0a:	20 e0       	ldi	r18, 0x00	; 0
   12b0c:	30 e0       	ldi	r19, 0x00	; 0
   12b0e:	40 e2       	ldi	r20, 0x20	; 32
   12b10:	51 e4       	ldi	r21, 0x41	; 65
   12b12:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12b16:	dc 01       	movw	r26, r24
   12b18:	cb 01       	movw	r24, r22
   12b1a:	9e 01       	movw	r18, r28
   12b1c:	2f 59       	subi	r18, 0x9F	; 159
   12b1e:	3f 4f       	sbci	r19, 0xFF	; 255
   12b20:	f9 01       	movw	r30, r18
   12b22:	80 83       	st	Z, r24
   12b24:	91 83       	std	Z+1, r25	; 0x01
   12b26:	a2 83       	std	Z+2, r26	; 0x02
   12b28:	b3 83       	std	Z+3, r27	; 0x03
         af_avrAcc[1] = af_avrAcc[1] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   12b2a:	ce 01       	movw	r24, r28
   12b2c:	8f 59       	subi	r24, 0x9F	; 159
   12b2e:	9f 4f       	sbci	r25, 0xFF	; 255
   12b30:	fc 01       	movw	r30, r24
   12b32:	84 81       	ldd	r24, Z+4	; 0x04
   12b34:	95 81       	ldd	r25, Z+5	; 0x05
   12b36:	a6 81       	ldd	r26, Z+6	; 0x06
   12b38:	b7 81       	ldd	r27, Z+7	; 0x07
   12b3a:	bc 01       	movw	r22, r24
   12b3c:	cd 01       	movw	r24, r26
   12b3e:	20 e0       	ldi	r18, 0x00	; 0
   12b40:	30 e0       	ldi	r19, 0x00	; 0
   12b42:	40 e2       	ldi	r20, 0x20	; 32
   12b44:	51 e4       	ldi	r21, 0x41	; 65
   12b46:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12b4a:	dc 01       	movw	r26, r24
   12b4c:	cb 01       	movw	r24, r22
   12b4e:	9e 01       	movw	r18, r28
   12b50:	2f 59       	subi	r18, 0x9F	; 159
   12b52:	3f 4f       	sbci	r19, 0xFF	; 255
   12b54:	f9 01       	movw	r30, r18
   12b56:	84 83       	std	Z+4, r24	; 0x04
   12b58:	95 83       	std	Z+5, r25	; 0x05
   12b5a:	a6 83       	std	Z+6, r26	; 0x06
   12b5c:	b7 83       	std	Z+7, r27	; 0x07
         af_avrAcc[2] = af_avrAcc[2] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
   12b5e:	ce 01       	movw	r24, r28
   12b60:	8f 59       	subi	r24, 0x9F	; 159
   12b62:	9f 4f       	sbci	r25, 0xFF	; 255
   12b64:	fc 01       	movw	r30, r24
   12b66:	80 85       	ldd	r24, Z+8	; 0x08
   12b68:	91 85       	ldd	r25, Z+9	; 0x09
   12b6a:	a2 85       	ldd	r26, Z+10	; 0x0a
   12b6c:	b3 85       	ldd	r27, Z+11	; 0x0b
   12b6e:	bc 01       	movw	r22, r24
   12b70:	cd 01       	movw	r24, r26
   12b72:	20 e0       	ldi	r18, 0x00	; 0
   12b74:	30 e0       	ldi	r19, 0x00	; 0
   12b76:	40 e2       	ldi	r20, 0x20	; 32
   12b78:	51 e4       	ldi	r21, 0x41	; 65
   12b7a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12b7e:	dc 01       	movw	r26, r24
   12b80:	cb 01       	movw	r24, r22
   12b82:	9e 01       	movw	r18, r28
   12b84:	2f 59       	subi	r18, 0x9F	; 159
   12b86:	3f 4f       	sbci	r19, 0xFF	; 255
   12b88:	f9 01       	movw	r30, r18
   12b8a:	80 87       	std	Z+8, r24	; 0x08
   12b8c:	91 87       	std	Z+9, r25	; 0x09
   12b8e:	a2 87       	std	Z+10, r26	; 0x0a
   12b90:	b3 87       	std	Z+11, r27	; 0x0b

         f_mag = sqrtf( af_avrAcc[0]*af_avrAcc[0] + af_avrAcc[1]*af_avrAcc[1] +
   12b92:	ce 01       	movw	r24, r28
   12b94:	8f 59       	subi	r24, 0x9F	; 159
   12b96:	9f 4f       	sbci	r25, 0xFF	; 255
   12b98:	fc 01       	movw	r30, r24
   12b9a:	80 81       	ld	r24, Z
   12b9c:	91 81       	ldd	r25, Z+1	; 0x01
   12b9e:	a2 81       	ldd	r26, Z+2	; 0x02
   12ba0:	b3 81       	ldd	r27, Z+3	; 0x03
   12ba2:	9e 01       	movw	r18, r28
   12ba4:	2f 59       	subi	r18, 0x9F	; 159
   12ba6:	3f 4f       	sbci	r19, 0xFF	; 255
   12ba8:	f9 01       	movw	r30, r18
   12baa:	20 81       	ld	r18, Z
   12bac:	31 81       	ldd	r19, Z+1	; 0x01
   12bae:	42 81       	ldd	r20, Z+2	; 0x02
   12bb0:	53 81       	ldd	r21, Z+3	; 0x03
   12bb2:	bc 01       	movw	r22, r24
   12bb4:	cd 01       	movw	r24, r26
   12bb6:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12bba:	dc 01       	movw	r26, r24
   12bbc:	cb 01       	movw	r24, r22
   12bbe:	7c 01       	movw	r14, r24
   12bc0:	8d 01       	movw	r16, r26
   12bc2:	ce 01       	movw	r24, r28
   12bc4:	8f 59       	subi	r24, 0x9F	; 159
   12bc6:	9f 4f       	sbci	r25, 0xFF	; 255
   12bc8:	fc 01       	movw	r30, r24
   12bca:	84 81       	ldd	r24, Z+4	; 0x04
   12bcc:	95 81       	ldd	r25, Z+5	; 0x05
   12bce:	a6 81       	ldd	r26, Z+6	; 0x06
   12bd0:	b7 81       	ldd	r27, Z+7	; 0x07
   12bd2:	9e 01       	movw	r18, r28
   12bd4:	2f 59       	subi	r18, 0x9F	; 159
   12bd6:	3f 4f       	sbci	r19, 0xFF	; 255
   12bd8:	f9 01       	movw	r30, r18
   12bda:	24 81       	ldd	r18, Z+4	; 0x04
   12bdc:	35 81       	ldd	r19, Z+5	; 0x05
   12bde:	46 81       	ldd	r20, Z+6	; 0x06
   12be0:	57 81       	ldd	r21, Z+7	; 0x07
   12be2:	bc 01       	movw	r22, r24
   12be4:	cd 01       	movw	r24, r26
   12be6:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12bea:	dc 01       	movw	r26, r24
   12bec:	cb 01       	movw	r24, r22
   12bee:	9c 01       	movw	r18, r24
   12bf0:	ad 01       	movw	r20, r26
   12bf2:	c8 01       	movw	r24, r16
   12bf4:	b7 01       	movw	r22, r14
   12bf6:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12bfa:	dc 01       	movw	r26, r24
   12bfc:	cb 01       	movw	r24, r22
   12bfe:	7c 01       	movw	r14, r24
   12c00:	8d 01       	movw	r16, r26
         af_avrAcc[2]*af_avrAcc[2]);
   12c02:	ce 01       	movw	r24, r28
   12c04:	8f 59       	subi	r24, 0x9F	; 159
   12c06:	9f 4f       	sbci	r25, 0xFF	; 255
   12c08:	fc 01       	movw	r30, r24
   12c0a:	80 85       	ldd	r24, Z+8	; 0x08
   12c0c:	91 85       	ldd	r25, Z+9	; 0x09
   12c0e:	a2 85       	ldd	r26, Z+10	; 0x0a
   12c10:	b3 85       	ldd	r27, Z+11	; 0x0b
   12c12:	9e 01       	movw	r18, r28
   12c14:	2f 59       	subi	r18, 0x9F	; 159
   12c16:	3f 4f       	sbci	r19, 0xFF	; 255
   12c18:	f9 01       	movw	r30, r18
   12c1a:	20 85       	ldd	r18, Z+8	; 0x08
   12c1c:	31 85       	ldd	r19, Z+9	; 0x09
   12c1e:	42 85       	ldd	r20, Z+10	; 0x0a
   12c20:	53 85       	ldd	r21, Z+11	; 0x0b
   12c22:	bc 01       	movw	r22, r24
   12c24:	cd 01       	movw	r24, r26
   12c26:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   12c2a:	dc 01       	movw	r26, r24
   12c2c:	cb 01       	movw	r24, r22
   12c2e:	9c 01       	movw	r18, r24
   12c30:	ad 01       	movw	r20, r26
          *------------------------------------------------------------------*/
         af_avrAcc[0] = af_avrAcc[0] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
         af_avrAcc[1] = af_avrAcc[1] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;
         af_avrAcc[2] = af_avrAcc[2] / INS_DCM_INIT_MAX_SAMP_TO_AVRG;

         f_mag = sqrtf( af_avrAcc[0]*af_avrAcc[0] + af_avrAcc[1]*af_avrAcc[1] +
   12c32:	c8 01       	movw	r24, r16
   12c34:	b7 01       	movw	r22, r14
   12c36:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12c3a:	dc 01       	movw	r26, r24
   12c3c:	cb 01       	movw	r24, r22
   12c3e:	bc 01       	movw	r22, r24
   12c40:	cd 01       	movw	r24, r26
   12c42:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
   12c46:	dc 01       	movw	r26, r24
   12c48:	cb 01       	movw	r24, r22
   12c4a:	8b 8b       	std	Y+19, r24	; 0x13
   12c4c:	9c 8b       	std	Y+20, r25	; 0x14
   12c4e:	ad 8b       	std	Y+21, r26	; 0x15
   12c50:	be 8b       	std	Y+22, r27	; 0x16
         af_avrAcc[2]*af_avrAcc[2]);

         gt_insDev.t_accel.s_calGravity = (int16_t)f_mag;
   12c52:	6b 89       	ldd	r22, Y+19	; 0x13
   12c54:	7c 89       	ldd	r23, Y+20	; 0x14
   12c56:	8d 89       	ldd	r24, Y+21	; 0x15
   12c58:	9e 89       	ldd	r25, Y+22	; 0x16
   12c5a:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12c5e:	dc 01       	movw	r26, r24
   12c60:	cb 01       	movw	r24, r22
   12c62:	80 93 65 24 	sts	0x2465, r24
   12c66:	90 93 66 24 	sts	0x2466, r25

         /*------------------------------------------------------------------*
          * If remainder, than round up...
          *------------------------------------------------------------------*/
         if( (f_mag - (float)gt_insDev.t_accel.s_calGravity) > .5f)
   12c6a:	80 91 65 24 	lds	r24, 0x2465
   12c6e:	90 91 66 24 	lds	r25, 0x2466
   12c72:	aa 27       	eor	r26, r26
   12c74:	97 fd       	sbrc	r25, 7
   12c76:	a0 95       	com	r26
   12c78:	ba 2f       	mov	r27, r26
   12c7a:	bc 01       	movw	r22, r24
   12c7c:	cd 01       	movw	r24, r26
   12c7e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12c82:	9b 01       	movw	r18, r22
   12c84:	ac 01       	movw	r20, r24
   12c86:	6b 89       	ldd	r22, Y+19	; 0x13
   12c88:	7c 89       	ldd	r23, Y+20	; 0x14
   12c8a:	8d 89       	ldd	r24, Y+21	; 0x15
   12c8c:	9e 89       	ldd	r25, Y+22	; 0x16
   12c8e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
   12c92:	dc 01       	movw	r26, r24
   12c94:	cb 01       	movw	r24, r22
   12c96:	11 e0       	ldi	r17, 0x01	; 1
   12c98:	bc 01       	movw	r22, r24
   12c9a:	cd 01       	movw	r24, r26
   12c9c:	20 e0       	ldi	r18, 0x00	; 0
   12c9e:	30 e0       	ldi	r19, 0x00	; 0
   12ca0:	40 e0       	ldi	r20, 0x00	; 0
   12ca2:	5f e3       	ldi	r21, 0x3F	; 63
   12ca4:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
   12ca8:	18 16       	cp	r1, r24
   12caa:	0c f0       	brlt	.+2      	; 0x12cae <insIoctl+0xe3c>
   12cac:	10 e0       	ldi	r17, 0x00	; 0
   12cae:	11 23       	and	r17, r17
   12cb0:	49 f0       	breq	.+18     	; 0x12cc4 <insIoctl+0xe52>
            gt_insDev.t_accel.s_calGravity += 1;
   12cb2:	80 91 65 24 	lds	r24, 0x2465
   12cb6:	90 91 66 24 	lds	r25, 0x2466
   12cba:	01 96       	adiw	r24, 0x01	; 1
   12cbc:	80 93 65 24 	sts	0x2465, r24
   12cc0:	90 93 66 24 	sts	0x2466, r25
         /*------------------------------------------------------------------*
          * Get the raw attitude using the average accelerometer and
          * magnetometer readings.
          * eq's 10.14, 10.15 and 10.18 of [3]
          *------------------------------------------------------------------*/
         as_acc[0] = (int16_t)af_avrAcc[0];
   12cc4:	ce 01       	movw	r24, r28
   12cc6:	8f 59       	subi	r24, 0x9F	; 159
   12cc8:	9f 4f       	sbci	r25, 0xFF	; 255
   12cca:	fc 01       	movw	r30, r24
   12ccc:	80 81       	ld	r24, Z
   12cce:	91 81       	ldd	r25, Z+1	; 0x01
   12cd0:	a2 81       	ldd	r26, Z+2	; 0x02
   12cd2:	b3 81       	ldd	r27, Z+3	; 0x03
   12cd4:	bc 01       	movw	r22, r24
   12cd6:	cd 01       	movw	r24, r26
   12cd8:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12cdc:	dc 01       	movw	r26, r24
   12cde:	cb 01       	movw	r24, r22
   12ce0:	9c 01       	movw	r18, r24
   12ce2:	ce 01       	movw	r24, r28
   12ce4:	8d 5b       	subi	r24, 0xBD	; 189
   12ce6:	9f 4f       	sbci	r25, 0xFF	; 255
   12ce8:	fc 01       	movw	r30, r24
   12cea:	20 83       	st	Z, r18
   12cec:	31 83       	std	Z+1, r19	; 0x01
         as_acc[1] = (int16_t)af_avrAcc[1];
   12cee:	ce 01       	movw	r24, r28
   12cf0:	8f 59       	subi	r24, 0x9F	; 159
   12cf2:	9f 4f       	sbci	r25, 0xFF	; 255
   12cf4:	fc 01       	movw	r30, r24
   12cf6:	84 81       	ldd	r24, Z+4	; 0x04
   12cf8:	95 81       	ldd	r25, Z+5	; 0x05
   12cfa:	a6 81       	ldd	r26, Z+6	; 0x06
   12cfc:	b7 81       	ldd	r27, Z+7	; 0x07
   12cfe:	bc 01       	movw	r22, r24
   12d00:	cd 01       	movw	r24, r26
   12d02:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12d06:	dc 01       	movw	r26, r24
   12d08:	cb 01       	movw	r24, r22
   12d0a:	9c 01       	movw	r18, r24
   12d0c:	ce 01       	movw	r24, r28
   12d0e:	8d 5b       	subi	r24, 0xBD	; 189
   12d10:	9f 4f       	sbci	r25, 0xFF	; 255
   12d12:	fc 01       	movw	r30, r24
   12d14:	22 83       	std	Z+2, r18	; 0x02
   12d16:	33 83       	std	Z+3, r19	; 0x03
         as_acc[2] = (int16_t)af_avrAcc[2];
   12d18:	ce 01       	movw	r24, r28
   12d1a:	8f 59       	subi	r24, 0x9F	; 159
   12d1c:	9f 4f       	sbci	r25, 0xFF	; 255
   12d1e:	fc 01       	movw	r30, r24
   12d20:	80 85       	ldd	r24, Z+8	; 0x08
   12d22:	91 85       	ldd	r25, Z+9	; 0x09
   12d24:	a2 85       	ldd	r26, Z+10	; 0x0a
   12d26:	b3 85       	ldd	r27, Z+11	; 0x0b
   12d28:	bc 01       	movw	r22, r24
   12d2a:	cd 01       	movw	r24, r26
   12d2c:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12d30:	dc 01       	movw	r26, r24
   12d32:	cb 01       	movw	r24, r22
   12d34:	9c 01       	movw	r18, r24
   12d36:	ce 01       	movw	r24, r28
   12d38:	8d 5b       	subi	r24, 0xBD	; 189
   12d3a:	9f 4f       	sbci	r25, 0xFF	; 255
   12d3c:	fc 01       	movw	r30, r24
   12d3e:	24 83       	std	Z+4, r18	; 0x04
   12d40:	35 83       	std	Z+5, r19	; 0x05

         as_mag[0] = (int16_t)af_avrMag[0];
   12d42:	ce 01       	movw	r24, r28
   12d44:	87 5b       	subi	r24, 0xB7	; 183
   12d46:	9f 4f       	sbci	r25, 0xFF	; 255
   12d48:	fc 01       	movw	r30, r24
   12d4a:	80 81       	ld	r24, Z
   12d4c:	91 81       	ldd	r25, Z+1	; 0x01
   12d4e:	a2 81       	ldd	r26, Z+2	; 0x02
   12d50:	b3 81       	ldd	r27, Z+3	; 0x03
   12d52:	bc 01       	movw	r22, r24
   12d54:	cd 01       	movw	r24, r26
   12d56:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12d5a:	dc 01       	movw	r26, r24
   12d5c:	cb 01       	movw	r24, r22
   12d5e:	8b a7       	lds	r24, 0x7b
   12d60:	9c a7       	lds	r25, 0x7c
         as_mag[1] = (int16_t)af_avrMag[1];
   12d62:	ce 01       	movw	r24, r28
   12d64:	87 5b       	subi	r24, 0xB7	; 183
   12d66:	9f 4f       	sbci	r25, 0xFF	; 255
   12d68:	fc 01       	movw	r30, r24
   12d6a:	84 81       	ldd	r24, Z+4	; 0x04
   12d6c:	95 81       	ldd	r25, Z+5	; 0x05
   12d6e:	a6 81       	ldd	r26, Z+6	; 0x06
   12d70:	b7 81       	ldd	r27, Z+7	; 0x07
   12d72:	bc 01       	movw	r22, r24
   12d74:	cd 01       	movw	r24, r26
   12d76:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12d7a:	dc 01       	movw	r26, r24
   12d7c:	cb 01       	movw	r24, r22
   12d7e:	8d a7       	lds	r24, 0x7d
   12d80:	9e a7       	lds	r25, 0x7e
         as_mag[2] = (int16_t)af_avrMag[2];
   12d82:	ce 01       	movw	r24, r28
   12d84:	87 5b       	subi	r24, 0xB7	; 183
   12d86:	9f 4f       	sbci	r25, 0xFF	; 255
   12d88:	fc 01       	movw	r30, r24
   12d8a:	80 85       	ldd	r24, Z+8	; 0x08
   12d8c:	91 85       	ldd	r25, Z+9	; 0x09
   12d8e:	a2 85       	ldd	r26, Z+10	; 0x0a
   12d90:	b3 85       	ldd	r27, Z+11	; 0x0b
   12d92:	bc 01       	movw	r22, r24
   12d94:	cd 01       	movw	r24, r26
   12d96:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12d9a:	dc 01       	movw	r26, r24
   12d9c:	cb 01       	movw	r24, r22
   12d9e:	8f a7       	lds	r24, 0x7f
   12da0:	98 ab       	sts	0x58, r25

         getRawAttitude( as_acc,
   12da2:	ce 01       	movw	r24, r28
   12da4:	8d 5b       	subi	r24, 0xBD	; 189
   12da6:	9f 4f       	sbci	r25, 0xFF	; 255
                         as_mag,
   12da8:	ae 01       	movw	r20, r28
   12daa:	45 5d       	subi	r20, 0xD5	; 213
   12dac:	5f 4f       	sbci	r21, 0xFF	; 255

         as_mag[0] = (int16_t)af_avrMag[0];
         as_mag[1] = (int16_t)af_avrMag[1];
         as_mag[2] = (int16_t)af_avrMag[2];

         getRawAttitude( as_acc,
   12dae:	20 e7       	ldi	r18, 0x70	; 112
   12db0:	34 e2       	ldi	r19, 0x24	; 36
   12db2:	ba 01       	movw	r22, r20
   12db4:	a9 01       	movw	r20, r18
   12db6:	0e 94 42 7b 	call	0xf684	; 0xf684 <getRawAttitude>
                         gt_insDev.as_rawAtt);

         /*------------------------------------------------------------------*
          * Initialize the DCM using eq 2.15 of [1].
          *------------------------------------------------------------------*/
         dcmInit( gt_insDev.as_rawAtt);
   12dba:	80 e7       	ldi	r24, 0x70	; 112
   12dbc:	94 e2       	ldi	r25, 0x24	; 36
   12dbe:	0e 94 ba 76 	call	0xed74	; 0xed74 <dcmInit>
         eSKalmanFilterInit();
   12dc2:	0e 94 34 52 	call	0xa468	; 0xa468 <eSKalmanFilterInit>

         i_return = (int32_t)INS_CAL_COMPLETE;
   12dc6:	82 e0       	ldi	r24, 0x02	; 2
   12dc8:	90 e0       	ldi	r25, 0x00	; 0
   12dca:	a0 e0       	ldi	r26, 0x00	; 0
   12dcc:	b0 e0       	ldi	r27, 0x00	; 0
   12dce:	89 83       	std	Y+1, r24	; 0x01
   12dd0:	9a 83       	std	Y+2, r25	; 0x02
   12dd2:	ab 83       	std	Y+3, r26	; 0x03
   12dd4:	bc 83       	std	Y+4, r27	; 0x04

      }
      break;/*End case INS_DCM_INIT:*/
   12dd6:	73 c4       	rjmp	.+2278   	; 0x136be <insIoctl+0x184c>

      case INS_RESET_CAL:
         gt_insDev.t_mag.t_cal = INS_CAL_FAILED;
   12dd8:	10 92 32 24 	sts	0x2432, r1
         gt_insDev.t_accel.t_cal = INS_CAL_FAILED;
   12ddc:	10 92 67 24 	sts	0x2467, r1
         i_return = (int32_t)gt_insDev.t_mag.t_cal;
   12de0:	80 91 32 24 	lds	r24, 0x2432
   12de4:	88 2f       	mov	r24, r24
   12de6:	90 e0       	ldi	r25, 0x00	; 0
   12de8:	a0 e0       	ldi	r26, 0x00	; 0
   12dea:	b0 e0       	ldi	r27, 0x00	; 0
   12dec:	89 83       	std	Y+1, r24	; 0x01
   12dee:	9a 83       	std	Y+2, r25	; 0x02
   12df0:	ab 83       	std	Y+3, r26	; 0x03
   12df2:	bc 83       	std	Y+4, r27	; 0x04
      break;/*End case INS_RESET_CAL:*/
   12df4:	64 c4       	rjmp	.+2248   	; 0x136be <insIoctl+0x184c>

      case INS_CALIBRATE_MAG:
      {
         int16_t *ps_results;
         int32_t i_index;
         float af_avrMag[3] = {0.0f,0.0f,0.0f};
   12df6:	9e 01       	movw	r18, r28
   12df8:	23 59       	subi	r18, 0x93	; 147
   12dfa:	3f 4f       	sbci	r19, 0xFF	; 255
   12dfc:	80 e0       	ldi	r24, 0x00	; 0
   12dfe:	90 e0       	ldi	r25, 0x00	; 0
   12e00:	dc 01       	movw	r26, r24
   12e02:	f9 01       	movw	r30, r18
   12e04:	80 83       	st	Z, r24
   12e06:	91 83       	std	Z+1, r25	; 0x01
   12e08:	a2 83       	std	Z+2, r26	; 0x02
   12e0a:	b3 83       	std	Z+3, r27	; 0x03
   12e0c:	9e 01       	movw	r18, r28
   12e0e:	23 59       	subi	r18, 0x93	; 147
   12e10:	3f 4f       	sbci	r19, 0xFF	; 255
   12e12:	80 e0       	ldi	r24, 0x00	; 0
   12e14:	90 e0       	ldi	r25, 0x00	; 0
   12e16:	dc 01       	movw	r26, r24
   12e18:	f9 01       	movw	r30, r18
   12e1a:	84 83       	std	Z+4, r24	; 0x04
   12e1c:	95 83       	std	Z+5, r25	; 0x05
   12e1e:	a6 83       	std	Z+6, r26	; 0x06
   12e20:	b7 83       	std	Z+7, r27	; 0x07
   12e22:	9e 01       	movw	r18, r28
   12e24:	23 59       	subi	r18, 0x93	; 147
   12e26:	3f 4f       	sbci	r19, 0xFF	; 255
   12e28:	80 e0       	ldi	r24, 0x00	; 0
   12e2a:	90 e0       	ldi	r25, 0x00	; 0
   12e2c:	dc 01       	movw	r26, r24
   12e2e:	f9 01       	movw	r30, r18
   12e30:	80 87       	std	Z+8, r24	; 0x08
   12e32:	91 87       	std	Z+9, r25	; 0x09
   12e34:	a2 87       	std	Z+10, r26	; 0x0a
   12e36:	b3 87       	std	Z+11, r27	; 0x0b

         if( gt_insDev.t_mag.t_cal != INS_CAL_IN_PROGRESS)
   12e38:	80 91 32 24 	lds	r24, 0x2432
   12e3c:	81 30       	cpi	r24, 0x01	; 1
   12e3e:	29 f0       	breq	.+10     	; 0x12e4a <insIoctl+0xfd8>
         {
            gt_insDev.t_mag.t_cal = INS_CAL_IN_PROGRESS;
   12e40:	81 e0       	ldi	r24, 0x01	; 1
   12e42:	80 93 32 24 	sts	0x2432, r24
            gt_insDev.c_HWrtPtr = 0;
   12e46:	10 92 3e 2a 	sts	0x2A3E, r1
         }

         i_return = (int32_t)gt_insDev.t_mag.t_cal;
   12e4a:	80 91 32 24 	lds	r24, 0x2432
   12e4e:	88 2f       	mov	r24, r24
   12e50:	90 e0       	ldi	r25, 0x00	; 0
   12e52:	a0 e0       	ldi	r26, 0x00	; 0
   12e54:	b0 e0       	ldi	r27, 0x00	; 0
   12e56:	89 83       	std	Y+1, r24	; 0x01
   12e58:	9a 83       	std	Y+2, r25	; 0x02
   12e5a:	ab 83       	std	Y+3, r26	; 0x03
   12e5c:	bc 83       	std	Y+4, r27	; 0x04

         if( gt_insDev.c_HWrtPtr < INS_MAX_CAL_SAMPLES)
   12e5e:	80 91 3e 2a 	lds	r24, 0x2A3E
   12e62:	80 31       	cpi	r24, 0x10	; 16
   12e64:	0c f0       	brlt	.+2      	; 0x12e68 <insIoctl+0xff6>
   12e66:	75 c1       	rjmp	.+746    	; 0x13152 <insIoctl+0x12e0>
         {
            for( i_index = 0; i_index < 10; i_index++)
   12e68:	19 86       	std	Y+9, r1	; 0x09
   12e6a:	1a 86       	std	Y+10, r1	; 0x0a
   12e6c:	1b 86       	std	Y+11, r1	; 0x0b
   12e6e:	1c 86       	std	Y+12, r1	; 0x0c
   12e70:	81 c0       	rjmp	.+258    	; 0x12f74 <insIoctl+0x1102>
            {
               /*------------------------------------------------------------*
                * Acquire new sensor data.
                *------------------------------------------------------------*/
               readSensors( as_mag,
   12e72:	ce 01       	movw	r24, r28
   12e74:	8b 96       	adiw	r24, 0x2b	; 43
                            as_gyr,
   12e76:	ae 01       	movw	r20, r28
   12e78:	4f 5c       	subi	r20, 0xCF	; 207
   12e7a:	5f 4f       	sbci	r21, 0xFF	; 255
                            as_acc);
   12e7c:	9e 01       	movw	r18, r28
   12e7e:	2d 5b       	subi	r18, 0xBD	; 189
   12e80:	3f 4f       	sbci	r19, 0xFF	; 255
            for( i_index = 0; i_index < 10; i_index++)
            {
               /*------------------------------------------------------------*
                * Acquire new sensor data.
                *------------------------------------------------------------*/
               readSensors( as_mag,
   12e82:	ba 01       	movw	r22, r20
   12e84:	a9 01       	movw	r20, r18
   12e86:	0e 94 24 7b 	call	0xf648	; 0xf648 <readSensors>
                            as_gyr,
                            as_acc);

               af_avrMag[0] += (float)as_mag[0];
   12e8a:	ce 01       	movw	r24, r28
   12e8c:	83 59       	subi	r24, 0x93	; 147
   12e8e:	9f 4f       	sbci	r25, 0xFF	; 255
   12e90:	fc 01       	movw	r30, r24
   12e92:	e0 80       	ld	r14, Z
   12e94:	f1 80       	ldd	r15, Z+1	; 0x01
   12e96:	02 81       	ldd	r16, Z+2	; 0x02
   12e98:	13 81       	ldd	r17, Z+3	; 0x03
   12e9a:	8b a5       	lds	r24, 0x6b
   12e9c:	9c a5       	lds	r25, 0x6c
   12e9e:	aa 27       	eor	r26, r26
   12ea0:	97 fd       	sbrc	r25, 7
   12ea2:	a0 95       	com	r26
   12ea4:	ba 2f       	mov	r27, r26
   12ea6:	bc 01       	movw	r22, r24
   12ea8:	cd 01       	movw	r24, r26
   12eaa:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12eae:	9b 01       	movw	r18, r22
   12eb0:	ac 01       	movw	r20, r24
   12eb2:	c8 01       	movw	r24, r16
   12eb4:	b7 01       	movw	r22, r14
   12eb6:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12eba:	dc 01       	movw	r26, r24
   12ebc:	cb 01       	movw	r24, r22
   12ebe:	9e 01       	movw	r18, r28
   12ec0:	23 59       	subi	r18, 0x93	; 147
   12ec2:	3f 4f       	sbci	r19, 0xFF	; 255
   12ec4:	f9 01       	movw	r30, r18
   12ec6:	80 83       	st	Z, r24
   12ec8:	91 83       	std	Z+1, r25	; 0x01
   12eca:	a2 83       	std	Z+2, r26	; 0x02
   12ecc:	b3 83       	std	Z+3, r27	; 0x03
               af_avrMag[1] += (float)as_mag[1];
   12ece:	ce 01       	movw	r24, r28
   12ed0:	83 59       	subi	r24, 0x93	; 147
   12ed2:	9f 4f       	sbci	r25, 0xFF	; 255
   12ed4:	fc 01       	movw	r30, r24
   12ed6:	e4 80       	ldd	r14, Z+4	; 0x04
   12ed8:	f5 80       	ldd	r15, Z+5	; 0x05
   12eda:	06 81       	ldd	r16, Z+6	; 0x06
   12edc:	17 81       	ldd	r17, Z+7	; 0x07
   12ede:	8d a5       	lds	r24, 0x6d
   12ee0:	9e a5       	lds	r25, 0x6e
   12ee2:	aa 27       	eor	r26, r26
   12ee4:	97 fd       	sbrc	r25, 7
   12ee6:	a0 95       	com	r26
   12ee8:	ba 2f       	mov	r27, r26
   12eea:	bc 01       	movw	r22, r24
   12eec:	cd 01       	movw	r24, r26
   12eee:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12ef2:	9b 01       	movw	r18, r22
   12ef4:	ac 01       	movw	r20, r24
   12ef6:	c8 01       	movw	r24, r16
   12ef8:	b7 01       	movw	r22, r14
   12efa:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12efe:	dc 01       	movw	r26, r24
   12f00:	cb 01       	movw	r24, r22
   12f02:	9e 01       	movw	r18, r28
   12f04:	23 59       	subi	r18, 0x93	; 147
   12f06:	3f 4f       	sbci	r19, 0xFF	; 255
   12f08:	f9 01       	movw	r30, r18
   12f0a:	84 83       	std	Z+4, r24	; 0x04
   12f0c:	95 83       	std	Z+5, r25	; 0x05
   12f0e:	a6 83       	std	Z+6, r26	; 0x06
   12f10:	b7 83       	std	Z+7, r27	; 0x07
               af_avrMag[2] += (float)as_mag[2];
   12f12:	ce 01       	movw	r24, r28
   12f14:	83 59       	subi	r24, 0x93	; 147
   12f16:	9f 4f       	sbci	r25, 0xFF	; 255
   12f18:	fc 01       	movw	r30, r24
   12f1a:	e0 84       	ldd	r14, Z+8	; 0x08
   12f1c:	f1 84       	ldd	r15, Z+9	; 0x09
   12f1e:	02 85       	ldd	r16, Z+10	; 0x0a
   12f20:	13 85       	ldd	r17, Z+11	; 0x0b
   12f22:	8f a5       	lds	r24, 0x6f
   12f24:	98 a9       	sts	0x48, r25
   12f26:	aa 27       	eor	r26, r26
   12f28:	97 fd       	sbrc	r25, 7
   12f2a:	a0 95       	com	r26
   12f2c:	ba 2f       	mov	r27, r26
   12f2e:	bc 01       	movw	r22, r24
   12f30:	cd 01       	movw	r24, r26
   12f32:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12f36:	9b 01       	movw	r18, r22
   12f38:	ac 01       	movw	r20, r24
   12f3a:	c8 01       	movw	r24, r16
   12f3c:	b7 01       	movw	r22, r14
   12f3e:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   12f42:	dc 01       	movw	r26, r24
   12f44:	cb 01       	movw	r24, r22
   12f46:	9e 01       	movw	r18, r28
   12f48:	23 59       	subi	r18, 0x93	; 147
   12f4a:	3f 4f       	sbci	r19, 0xFF	; 255
   12f4c:	f9 01       	movw	r30, r18
   12f4e:	80 87       	std	Z+8, r24	; 0x08
   12f50:	91 87       	std	Z+9, r25	; 0x09
   12f52:	a2 87       	std	Z+10, r26	; 0x0a
   12f54:	b3 87       	std	Z+11, r27	; 0x0b

   				arb_sleep( INS_DT_SLEEP);
   12f56:	85 e0       	ldi	r24, 0x05	; 5
   12f58:	90 e0       	ldi	r25, 0x00	; 0
   12f5a:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         i_return = (int32_t)gt_insDev.t_mag.t_cal;

         if( gt_insDev.c_HWrtPtr < INS_MAX_CAL_SAMPLES)
         {
            for( i_index = 0; i_index < 10; i_index++)
   12f5e:	89 85       	ldd	r24, Y+9	; 0x09
   12f60:	9a 85       	ldd	r25, Y+10	; 0x0a
   12f62:	ab 85       	ldd	r26, Y+11	; 0x0b
   12f64:	bc 85       	ldd	r27, Y+12	; 0x0c
   12f66:	01 96       	adiw	r24, 0x01	; 1
   12f68:	a1 1d       	adc	r26, r1
   12f6a:	b1 1d       	adc	r27, r1
   12f6c:	89 87       	std	Y+9, r24	; 0x09
   12f6e:	9a 87       	std	Y+10, r25	; 0x0a
   12f70:	ab 87       	std	Y+11, r26	; 0x0b
   12f72:	bc 87       	std	Y+12, r27	; 0x0c
   12f74:	89 85       	ldd	r24, Y+9	; 0x09
   12f76:	9a 85       	ldd	r25, Y+10	; 0x0a
   12f78:	ab 85       	ldd	r26, Y+11	; 0x0b
   12f7a:	bc 85       	ldd	r27, Y+12	; 0x0c
   12f7c:	8a 30       	cpi	r24, 0x0A	; 10
   12f7e:	91 05       	cpc	r25, r1
   12f80:	a1 05       	cpc	r26, r1
   12f82:	b1 05       	cpc	r27, r1
   12f84:	0c f4       	brge	.+2      	; 0x12f88 <insIoctl+0x1116>
   12f86:	75 cf       	rjmp	.-278    	; 0x12e72 <insIoctl+0x1000>
               af_avrMag[2] += (float)as_mag[2];

   				arb_sleep( INS_DT_SLEEP);
            }

            gas_H[gt_insDev.c_HWrtPtr][0] = (int16_t)(af_avrMag[0] / i_index);
   12f88:	80 91 3e 2a 	lds	r24, 0x2A3E
   12f8c:	c8 2e       	mov	r12, r24
   12f8e:	dd 24       	eor	r13, r13
   12f90:	c7 fc       	sbrc	r12, 7
   12f92:	d0 94       	com	r13
   12f94:	ce 01       	movw	r24, r28
   12f96:	83 59       	subi	r24, 0x93	; 147
   12f98:	9f 4f       	sbci	r25, 0xFF	; 255
   12f9a:	fc 01       	movw	r30, r24
   12f9c:	e0 80       	ld	r14, Z
   12f9e:	f1 80       	ldd	r15, Z+1	; 0x01
   12fa0:	02 81       	ldd	r16, Z+2	; 0x02
   12fa2:	13 81       	ldd	r17, Z+3	; 0x03
   12fa4:	69 85       	ldd	r22, Y+9	; 0x09
   12fa6:	7a 85       	ldd	r23, Y+10	; 0x0a
   12fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
   12faa:	9c 85       	ldd	r25, Y+12	; 0x0c
   12fac:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   12fb0:	9b 01       	movw	r18, r22
   12fb2:	ac 01       	movw	r20, r24
   12fb4:	c8 01       	movw	r24, r16
   12fb6:	b7 01       	movw	r22, r14
   12fb8:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   12fbc:	dc 01       	movw	r26, r24
   12fbe:	cb 01       	movw	r24, r22
   12fc0:	bc 01       	movw	r22, r24
   12fc2:	cd 01       	movw	r24, r26
   12fc4:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   12fc8:	dc 01       	movw	r26, r24
   12fca:	cb 01       	movw	r24, r22
   12fcc:	9c 01       	movw	r18, r24
   12fce:	c6 01       	movw	r24, r12
   12fd0:	88 0f       	add	r24, r24
   12fd2:	99 1f       	adc	r25, r25
   12fd4:	8c 0d       	add	r24, r12
   12fd6:	9d 1d       	adc	r25, r13
   12fd8:	88 0f       	add	r24, r24
   12fda:	99 1f       	adc	r25, r25
   12fdc:	85 50       	subi	r24, 0x05	; 5
   12fde:	95 4d       	sbci	r25, 0xD5	; 213
   12fe0:	fc 01       	movw	r30, r24
   12fe2:	20 83       	st	Z, r18
   12fe4:	31 83       	std	Z+1, r19	; 0x01
            gas_H[gt_insDev.c_HWrtPtr][1] = (int16_t)(af_avrMag[1] / i_index);
   12fe6:	80 91 3e 2a 	lds	r24, 0x2A3E
   12fea:	c8 2e       	mov	r12, r24
   12fec:	dd 24       	eor	r13, r13
   12fee:	c7 fc       	sbrc	r12, 7
   12ff0:	d0 94       	com	r13
   12ff2:	ce 01       	movw	r24, r28
   12ff4:	83 59       	subi	r24, 0x93	; 147
   12ff6:	9f 4f       	sbci	r25, 0xFF	; 255
   12ff8:	fc 01       	movw	r30, r24
   12ffa:	e4 80       	ldd	r14, Z+4	; 0x04
   12ffc:	f5 80       	ldd	r15, Z+5	; 0x05
   12ffe:	06 81       	ldd	r16, Z+6	; 0x06
   13000:	17 81       	ldd	r17, Z+7	; 0x07
   13002:	69 85       	ldd	r22, Y+9	; 0x09
   13004:	7a 85       	ldd	r23, Y+10	; 0x0a
   13006:	8b 85       	ldd	r24, Y+11	; 0x0b
   13008:	9c 85       	ldd	r25, Y+12	; 0x0c
   1300a:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1300e:	9b 01       	movw	r18, r22
   13010:	ac 01       	movw	r20, r24
   13012:	c8 01       	movw	r24, r16
   13014:	b7 01       	movw	r22, r14
   13016:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1301a:	dc 01       	movw	r26, r24
   1301c:	cb 01       	movw	r24, r22
   1301e:	bc 01       	movw	r22, r24
   13020:	cd 01       	movw	r24, r26
   13022:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   13026:	dc 01       	movw	r26, r24
   13028:	cb 01       	movw	r24, r22
   1302a:	9c 01       	movw	r18, r24
   1302c:	c6 01       	movw	r24, r12
   1302e:	88 0f       	add	r24, r24
   13030:	99 1f       	adc	r25, r25
   13032:	8c 0d       	add	r24, r12
   13034:	9d 1d       	adc	r25, r13
   13036:	88 0f       	add	r24, r24
   13038:	99 1f       	adc	r25, r25
   1303a:	83 50       	subi	r24, 0x03	; 3
   1303c:	95 4d       	sbci	r25, 0xD5	; 213
   1303e:	fc 01       	movw	r30, r24
   13040:	20 83       	st	Z, r18
   13042:	31 83       	std	Z+1, r19	; 0x01
            gas_H[gt_insDev.c_HWrtPtr][2] = (int16_t)(af_avrMag[2] / i_index);
   13044:	80 91 3e 2a 	lds	r24, 0x2A3E
   13048:	c8 2e       	mov	r12, r24
   1304a:	dd 24       	eor	r13, r13
   1304c:	c7 fc       	sbrc	r12, 7
   1304e:	d0 94       	com	r13
   13050:	ce 01       	movw	r24, r28
   13052:	83 59       	subi	r24, 0x93	; 147
   13054:	9f 4f       	sbci	r25, 0xFF	; 255
   13056:	fc 01       	movw	r30, r24
   13058:	e0 84       	ldd	r14, Z+8	; 0x08
   1305a:	f1 84       	ldd	r15, Z+9	; 0x09
   1305c:	02 85       	ldd	r16, Z+10	; 0x0a
   1305e:	13 85       	ldd	r17, Z+11	; 0x0b
   13060:	69 85       	ldd	r22, Y+9	; 0x09
   13062:	7a 85       	ldd	r23, Y+10	; 0x0a
   13064:	8b 85       	ldd	r24, Y+11	; 0x0b
   13066:	9c 85       	ldd	r25, Y+12	; 0x0c
   13068:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1306c:	9b 01       	movw	r18, r22
   1306e:	ac 01       	movw	r20, r24
   13070:	c8 01       	movw	r24, r16
   13072:	b7 01       	movw	r22, r14
   13074:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   13078:	dc 01       	movw	r26, r24
   1307a:	cb 01       	movw	r24, r22
   1307c:	bc 01       	movw	r22, r24
   1307e:	cd 01       	movw	r24, r26
   13080:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   13084:	dc 01       	movw	r26, r24
   13086:	cb 01       	movw	r24, r22
   13088:	9c 01       	movw	r18, r24
   1308a:	c6 01       	movw	r24, r12
   1308c:	88 0f       	add	r24, r24
   1308e:	99 1f       	adc	r25, r25
   13090:	8c 0d       	add	r24, r12
   13092:	9d 1d       	adc	r25, r13
   13094:	88 0f       	add	r24, r24
   13096:	99 1f       	adc	r25, r25
   13098:	81 50       	subi	r24, 0x01	; 1
   1309a:	95 4d       	sbci	r25, 0xD5	; 213
   1309c:	fc 01       	movw	r30, r24
   1309e:	20 83       	st	Z, r18
   130a0:	31 83       	std	Z+1, r19	; 0x01

            /*---------------------------------------------------------------*
             * Return the current reading...
             *---------------------------------------------------------------*/
            ps_results = (int16_t *)((int16_t)i_arguments);
   130a2:	ce 01       	movw	r24, r28
   130a4:	87 57       	subi	r24, 0x77	; 119
   130a6:	9f 4f       	sbci	r25, 0xFF	; 255
   130a8:	fc 01       	movw	r30, r24
   130aa:	80 81       	ld	r24, Z
   130ac:	91 81       	ldd	r25, Z+1	; 0x01
   130ae:	8f 8b       	std	Y+23, r24	; 0x17
   130b0:	98 8f       	std	Y+24, r25	; 0x18
            ps_results[0] = gas_H[gt_insDev.c_HWrtPtr][0];
   130b2:	80 91 3e 2a 	lds	r24, 0x2A3E
   130b6:	28 2f       	mov	r18, r24
   130b8:	33 27       	eor	r19, r19
   130ba:	27 fd       	sbrc	r18, 7
   130bc:	30 95       	com	r19
   130be:	c9 01       	movw	r24, r18
   130c0:	88 0f       	add	r24, r24
   130c2:	99 1f       	adc	r25, r25
   130c4:	82 0f       	add	r24, r18
   130c6:	93 1f       	adc	r25, r19
   130c8:	88 0f       	add	r24, r24
   130ca:	99 1f       	adc	r25, r25
   130cc:	85 50       	subi	r24, 0x05	; 5
   130ce:	95 4d       	sbci	r25, 0xD5	; 213
   130d0:	fc 01       	movw	r30, r24
   130d2:	20 81       	ld	r18, Z
   130d4:	31 81       	ldd	r19, Z+1	; 0x01
   130d6:	8f 89       	ldd	r24, Y+23	; 0x17
   130d8:	98 8d       	ldd	r25, Y+24	; 0x18
   130da:	fc 01       	movw	r30, r24
   130dc:	20 83       	st	Z, r18
   130de:	31 83       	std	Z+1, r19	; 0x01
            ps_results[1] = gas_H[gt_insDev.c_HWrtPtr][1];
   130e0:	8f 89       	ldd	r24, Y+23	; 0x17
   130e2:	98 8d       	ldd	r25, Y+24	; 0x18
   130e4:	ac 01       	movw	r20, r24
   130e6:	4e 5f       	subi	r20, 0xFE	; 254
   130e8:	5f 4f       	sbci	r21, 0xFF	; 255
   130ea:	80 91 3e 2a 	lds	r24, 0x2A3E
   130ee:	28 2f       	mov	r18, r24
   130f0:	33 27       	eor	r19, r19
   130f2:	27 fd       	sbrc	r18, 7
   130f4:	30 95       	com	r19
   130f6:	c9 01       	movw	r24, r18
   130f8:	88 0f       	add	r24, r24
   130fa:	99 1f       	adc	r25, r25
   130fc:	82 0f       	add	r24, r18
   130fe:	93 1f       	adc	r25, r19
   13100:	88 0f       	add	r24, r24
   13102:	99 1f       	adc	r25, r25
   13104:	83 50       	subi	r24, 0x03	; 3
   13106:	95 4d       	sbci	r25, 0xD5	; 213
   13108:	fc 01       	movw	r30, r24
   1310a:	80 81       	ld	r24, Z
   1310c:	91 81       	ldd	r25, Z+1	; 0x01
   1310e:	fa 01       	movw	r30, r20
   13110:	80 83       	st	Z, r24
   13112:	91 83       	std	Z+1, r25	; 0x01
            ps_results[2] = gas_H[gt_insDev.c_HWrtPtr][2];
   13114:	8f 89       	ldd	r24, Y+23	; 0x17
   13116:	98 8d       	ldd	r25, Y+24	; 0x18
   13118:	ac 01       	movw	r20, r24
   1311a:	4c 5f       	subi	r20, 0xFC	; 252
   1311c:	5f 4f       	sbci	r21, 0xFF	; 255
   1311e:	80 91 3e 2a 	lds	r24, 0x2A3E
   13122:	28 2f       	mov	r18, r24
   13124:	33 27       	eor	r19, r19
   13126:	27 fd       	sbrc	r18, 7
   13128:	30 95       	com	r19
   1312a:	c9 01       	movw	r24, r18
   1312c:	88 0f       	add	r24, r24
   1312e:	99 1f       	adc	r25, r25
   13130:	82 0f       	add	r24, r18
   13132:	93 1f       	adc	r25, r19
   13134:	88 0f       	add	r24, r24
   13136:	99 1f       	adc	r25, r25
   13138:	81 50       	subi	r24, 0x01	; 1
   1313a:	95 4d       	sbci	r25, 0xD5	; 213
   1313c:	fc 01       	movw	r30, r24
   1313e:	80 81       	ld	r24, Z
   13140:	91 81       	ldd	r25, Z+1	; 0x01
   13142:	fa 01       	movw	r30, r20
   13144:	80 83       	st	Z, r24
   13146:	91 83       	std	Z+1, r25	; 0x01

            gt_insDev.c_HWrtPtr++;
   13148:	80 91 3e 2a 	lds	r24, 0x2A3E
   1314c:	8f 5f       	subi	r24, 0xFF	; 255
   1314e:	80 93 3e 2a 	sts	0x2A3E, r24

         }/*End if( (*pc_HWrtPtr) < INS_MAX_CAL_SAMPLES)*/

	      if( gt_insDev.c_HWrtPtr == INS_MAX_CAL_SAMPLES)
   13152:	80 91 3e 2a 	lds	r24, 0x2A3E
   13156:	80 31       	cpi	r24, 0x10	; 16
   13158:	09 f0       	breq	.+2      	; 0x1315c <insIoctl+0x12ea>
   1315a:	ae c2       	rjmp	.+1372   	; 0x136b8 <insIoctl+0x1846>
         {

            if( ellipsoidFit( &gt_insDev.t_mag.as_R[0][0],
   1315c:	82 e1       	ldi	r24, 0x12	; 18
   1315e:	94 e2       	ldi	r25, 0x24	; 36
   13160:	4a e2       	ldi	r20, 0x2A	; 42
   13162:	54 e2       	ldi	r21, 0x24	; 36
   13164:	24 e2       	ldi	r18, 0x24	; 36
   13166:	34 e2       	ldi	r19, 0x24	; 36
   13168:	ba 01       	movw	r22, r20
   1316a:	a9 01       	movw	r20, r18
   1316c:	20 e0       	ldi	r18, 0x00	; 0
   1316e:	32 e0       	ldi	r19, 0x02	; 2
   13170:	0e 94 01 45 	call	0x8a02	; 0x8a02 <ellipsoidFit>
   13174:	88 23       	and	r24, r24
   13176:	a1 f0       	breq	.+40     	; 0x131a0 <insIoctl+0x132e>
                              &gt_insDev.t_mag.as_bias[0],
							         &gt_insDev.t_mag.as_scale[0],
                              INS_MAX_CAL_MAG_ENV))
            {
               gt_insDev.t_mag.s_calMagFieldStr = INS_MAX_CAL_MAG_ENV;
   13178:	80 e0       	ldi	r24, 0x00	; 0
   1317a:	92 e0       	ldi	r25, 0x02	; 2
   1317c:	80 93 30 24 	sts	0x2430, r24
   13180:	90 93 31 24 	sts	0x2431, r25
               gt_insDev.t_mag.t_cal = INS_CAL_COMPLETE;
   13184:	82 e0       	ldi	r24, 0x02	; 2
   13186:	80 93 32 24 	sts	0x2432, r24
               i_return = (int32_t)gt_insDev.t_mag.t_cal;
   1318a:	80 91 32 24 	lds	r24, 0x2432
   1318e:	88 2f       	mov	r24, r24
   13190:	90 e0       	ldi	r25, 0x00	; 0
   13192:	a0 e0       	ldi	r26, 0x00	; 0
   13194:	b0 e0       	ldi	r27, 0x00	; 0
   13196:	89 83       	std	Y+1, r24	; 0x01
   13198:	9a 83       	std	Y+2, r25	; 0x02
   1319a:	ab 83       	std	Y+3, r26	; 0x03
   1319c:	bc 83       	std	Y+4, r27	; 0x04
               i_return = (int32_t)gt_insDev.t_mag.t_cal;
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End INS_CALIBRATE_MAG*/
   1319e:	8c c2       	rjmp	.+1304   	; 0x136b8 <insIoctl+0x1846>
               gt_insDev.t_mag.t_cal = INS_CAL_COMPLETE;
               i_return = (int32_t)gt_insDev.t_mag.t_cal;
            }
            else
            {
               gt_insDev.t_mag.t_cal = INS_CAL_FAILED;
   131a0:	10 92 32 24 	sts	0x2432, r1
               i_return = (int32_t)gt_insDev.t_mag.t_cal;
   131a4:	80 91 32 24 	lds	r24, 0x2432
   131a8:	88 2f       	mov	r24, r24
   131aa:	90 e0       	ldi	r25, 0x00	; 0
   131ac:	a0 e0       	ldi	r26, 0x00	; 0
   131ae:	b0 e0       	ldi	r27, 0x00	; 0
   131b0:	89 83       	std	Y+1, r24	; 0x01
   131b2:	9a 83       	std	Y+2, r25	; 0x02
   131b4:	ab 83       	std	Y+3, r26	; 0x03
   131b6:	bc 83       	std	Y+4, r27	; 0x04
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End INS_CALIBRATE_MAG*/
   131b8:	7f c2       	rjmp	.+1278   	; 0x136b8 <insIoctl+0x1846>

      case INS_CALIBRATE_ACCEL:
      {
         int32_t i_index;
         float af_avrAcc[3] = {0.0f,0.0f,0.0f};
   131ba:	9e 01       	movw	r18, r28
   131bc:	27 58       	subi	r18, 0x87	; 135
   131be:	3f 4f       	sbci	r19, 0xFF	; 255
   131c0:	80 e0       	ldi	r24, 0x00	; 0
   131c2:	90 e0       	ldi	r25, 0x00	; 0
   131c4:	dc 01       	movw	r26, r24
   131c6:	f9 01       	movw	r30, r18
   131c8:	80 83       	st	Z, r24
   131ca:	91 83       	std	Z+1, r25	; 0x01
   131cc:	a2 83       	std	Z+2, r26	; 0x02
   131ce:	b3 83       	std	Z+3, r27	; 0x03
   131d0:	9e 01       	movw	r18, r28
   131d2:	27 58       	subi	r18, 0x87	; 135
   131d4:	3f 4f       	sbci	r19, 0xFF	; 255
   131d6:	80 e0       	ldi	r24, 0x00	; 0
   131d8:	90 e0       	ldi	r25, 0x00	; 0
   131da:	dc 01       	movw	r26, r24
   131dc:	f9 01       	movw	r30, r18
   131de:	84 83       	std	Z+4, r24	; 0x04
   131e0:	95 83       	std	Z+5, r25	; 0x05
   131e2:	a6 83       	std	Z+6, r26	; 0x06
   131e4:	b7 83       	std	Z+7, r27	; 0x07
   131e6:	9e 01       	movw	r18, r28
   131e8:	27 58       	subi	r18, 0x87	; 135
   131ea:	3f 4f       	sbci	r19, 0xFF	; 255
   131ec:	80 e0       	ldi	r24, 0x00	; 0
   131ee:	90 e0       	ldi	r25, 0x00	; 0
   131f0:	dc 01       	movw	r26, r24
   131f2:	f9 01       	movw	r30, r18
   131f4:	80 87       	std	Z+8, r24	; 0x08
   131f6:	91 87       	std	Z+9, r25	; 0x09
   131f8:	a2 87       	std	Z+10, r26	; 0x0a
   131fa:	b3 87       	std	Z+11, r27	; 0x0b
         int16_t *ps_results;

         if( gt_insDev.t_accel.t_cal != INS_CAL_IN_PROGRESS)
   131fc:	80 91 67 24 	lds	r24, 0x2467
   13200:	81 30       	cpi	r24, 0x01	; 1
   13202:	29 f0       	breq	.+10     	; 0x1320e <insIoctl+0x139c>
         {
            gt_insDev.t_accel.t_cal = INS_CAL_IN_PROGRESS;
   13204:	81 e0       	ldi	r24, 0x01	; 1
   13206:	80 93 67 24 	sts	0x2467, r24
            gt_insDev.c_HWrtPtr = 0;
   1320a:	10 92 3e 2a 	sts	0x2A3E, r1
         }

         i_return = (int32_t)gt_insDev.t_accel.t_cal;
   1320e:	80 91 67 24 	lds	r24, 0x2467
   13212:	88 2f       	mov	r24, r24
   13214:	90 e0       	ldi	r25, 0x00	; 0
   13216:	a0 e0       	ldi	r26, 0x00	; 0
   13218:	b0 e0       	ldi	r27, 0x00	; 0
   1321a:	89 83       	std	Y+1, r24	; 0x01
   1321c:	9a 83       	std	Y+2, r25	; 0x02
   1321e:	ab 83       	std	Y+3, r26	; 0x03
   13220:	bc 83       	std	Y+4, r27	; 0x04

         if( gt_insDev.c_HWrtPtr < INS_MAX_CAL_SAMPLES)
   13222:	80 91 3e 2a 	lds	r24, 0x2A3E
   13226:	80 31       	cpi	r24, 0x10	; 16
   13228:	0c f0       	brlt	.+2      	; 0x1322c <insIoctl+0x13ba>
   1322a:	81 c1       	rjmp	.+770    	; 0x1352e <insIoctl+0x16bc>
         {
            for( i_index = 0; i_index < 10; i_index++)
   1322c:	1d 86       	std	Y+13, r1	; 0x0d
   1322e:	1e 86       	std	Y+14, r1	; 0x0e
   13230:	1f 86       	std	Y+15, r1	; 0x0f
   13232:	18 8a       	std	Y+16, r1	; 0x10
   13234:	8d c0       	rjmp	.+282    	; 0x13350 <insIoctl+0x14de>
            {
               /*------------------------------------------------------------*
                * Acquire new sensor data.
                *------------------------------------------------------------*/
               readSensors( as_mag,
   13236:	ce 01       	movw	r24, r28
   13238:	8b 96       	adiw	r24, 0x2b	; 43
                            as_gyr,
   1323a:	ae 01       	movw	r20, r28
   1323c:	4f 5c       	subi	r20, 0xCF	; 207
   1323e:	5f 4f       	sbci	r21, 0xFF	; 255
                            as_acc);
   13240:	9e 01       	movw	r18, r28
   13242:	2d 5b       	subi	r18, 0xBD	; 189
   13244:	3f 4f       	sbci	r19, 0xFF	; 255
            for( i_index = 0; i_index < 10; i_index++)
            {
               /*------------------------------------------------------------*
                * Acquire new sensor data.
                *------------------------------------------------------------*/
               readSensors( as_mag,
   13246:	ba 01       	movw	r22, r20
   13248:	a9 01       	movw	r20, r18
   1324a:	0e 94 24 7b 	call	0xf648	; 0xf648 <readSensors>
                            as_gyr,
                            as_acc);

               af_avrAcc[0] += (float)as_acc[0];
   1324e:	ce 01       	movw	r24, r28
   13250:	87 58       	subi	r24, 0x87	; 135
   13252:	9f 4f       	sbci	r25, 0xFF	; 255
   13254:	fc 01       	movw	r30, r24
   13256:	e0 80       	ld	r14, Z
   13258:	f1 80       	ldd	r15, Z+1	; 0x01
   1325a:	02 81       	ldd	r16, Z+2	; 0x02
   1325c:	13 81       	ldd	r17, Z+3	; 0x03
   1325e:	ce 01       	movw	r24, r28
   13260:	8d 5b       	subi	r24, 0xBD	; 189
   13262:	9f 4f       	sbci	r25, 0xFF	; 255
   13264:	fc 01       	movw	r30, r24
   13266:	80 81       	ld	r24, Z
   13268:	91 81       	ldd	r25, Z+1	; 0x01
   1326a:	aa 27       	eor	r26, r26
   1326c:	97 fd       	sbrc	r25, 7
   1326e:	a0 95       	com	r26
   13270:	ba 2f       	mov	r27, r26
   13272:	bc 01       	movw	r22, r24
   13274:	cd 01       	movw	r24, r26
   13276:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1327a:	9b 01       	movw	r18, r22
   1327c:	ac 01       	movw	r20, r24
   1327e:	c8 01       	movw	r24, r16
   13280:	b7 01       	movw	r22, r14
   13282:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   13286:	dc 01       	movw	r26, r24
   13288:	cb 01       	movw	r24, r22
   1328a:	9e 01       	movw	r18, r28
   1328c:	27 58       	subi	r18, 0x87	; 135
   1328e:	3f 4f       	sbci	r19, 0xFF	; 255
   13290:	f9 01       	movw	r30, r18
   13292:	80 83       	st	Z, r24
   13294:	91 83       	std	Z+1, r25	; 0x01
   13296:	a2 83       	std	Z+2, r26	; 0x02
   13298:	b3 83       	std	Z+3, r27	; 0x03
               af_avrAcc[1] += (float)as_acc[1];
   1329a:	ce 01       	movw	r24, r28
   1329c:	87 58       	subi	r24, 0x87	; 135
   1329e:	9f 4f       	sbci	r25, 0xFF	; 255
   132a0:	fc 01       	movw	r30, r24
   132a2:	e4 80       	ldd	r14, Z+4	; 0x04
   132a4:	f5 80       	ldd	r15, Z+5	; 0x05
   132a6:	06 81       	ldd	r16, Z+6	; 0x06
   132a8:	17 81       	ldd	r17, Z+7	; 0x07
   132aa:	ce 01       	movw	r24, r28
   132ac:	8d 5b       	subi	r24, 0xBD	; 189
   132ae:	9f 4f       	sbci	r25, 0xFF	; 255
   132b0:	fc 01       	movw	r30, r24
   132b2:	82 81       	ldd	r24, Z+2	; 0x02
   132b4:	93 81       	ldd	r25, Z+3	; 0x03
   132b6:	aa 27       	eor	r26, r26
   132b8:	97 fd       	sbrc	r25, 7
   132ba:	a0 95       	com	r26
   132bc:	ba 2f       	mov	r27, r26
   132be:	bc 01       	movw	r22, r24
   132c0:	cd 01       	movw	r24, r26
   132c2:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   132c6:	9b 01       	movw	r18, r22
   132c8:	ac 01       	movw	r20, r24
   132ca:	c8 01       	movw	r24, r16
   132cc:	b7 01       	movw	r22, r14
   132ce:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   132d2:	dc 01       	movw	r26, r24
   132d4:	cb 01       	movw	r24, r22
   132d6:	9e 01       	movw	r18, r28
   132d8:	27 58       	subi	r18, 0x87	; 135
   132da:	3f 4f       	sbci	r19, 0xFF	; 255
   132dc:	f9 01       	movw	r30, r18
   132de:	84 83       	std	Z+4, r24	; 0x04
   132e0:	95 83       	std	Z+5, r25	; 0x05
   132e2:	a6 83       	std	Z+6, r26	; 0x06
   132e4:	b7 83       	std	Z+7, r27	; 0x07
               af_avrAcc[2] += (float)as_acc[2];
   132e6:	ce 01       	movw	r24, r28
   132e8:	87 58       	subi	r24, 0x87	; 135
   132ea:	9f 4f       	sbci	r25, 0xFF	; 255
   132ec:	fc 01       	movw	r30, r24
   132ee:	e0 84       	ldd	r14, Z+8	; 0x08
   132f0:	f1 84       	ldd	r15, Z+9	; 0x09
   132f2:	02 85       	ldd	r16, Z+10	; 0x0a
   132f4:	13 85       	ldd	r17, Z+11	; 0x0b
   132f6:	ce 01       	movw	r24, r28
   132f8:	8d 5b       	subi	r24, 0xBD	; 189
   132fa:	9f 4f       	sbci	r25, 0xFF	; 255
   132fc:	fc 01       	movw	r30, r24
   132fe:	84 81       	ldd	r24, Z+4	; 0x04
   13300:	95 81       	ldd	r25, Z+5	; 0x05
   13302:	aa 27       	eor	r26, r26
   13304:	97 fd       	sbrc	r25, 7
   13306:	a0 95       	com	r26
   13308:	ba 2f       	mov	r27, r26
   1330a:	bc 01       	movw	r22, r24
   1330c:	cd 01       	movw	r24, r26
   1330e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   13312:	9b 01       	movw	r18, r22
   13314:	ac 01       	movw	r20, r24
   13316:	c8 01       	movw	r24, r16
   13318:	b7 01       	movw	r22, r14
   1331a:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1331e:	dc 01       	movw	r26, r24
   13320:	cb 01       	movw	r24, r22
   13322:	9e 01       	movw	r18, r28
   13324:	27 58       	subi	r18, 0x87	; 135
   13326:	3f 4f       	sbci	r19, 0xFF	; 255
   13328:	f9 01       	movw	r30, r18
   1332a:	80 87       	std	Z+8, r24	; 0x08
   1332c:	91 87       	std	Z+9, r25	; 0x09
   1332e:	a2 87       	std	Z+10, r26	; 0x0a
   13330:	b3 87       	std	Z+11, r27	; 0x0b

   				arb_sleep( INS_DT_SLEEP);
   13332:	85 e0       	ldi	r24, 0x05	; 5
   13334:	90 e0       	ldi	r25, 0x00	; 0
   13336:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

         i_return = (int32_t)gt_insDev.t_accel.t_cal;

         if( gt_insDev.c_HWrtPtr < INS_MAX_CAL_SAMPLES)
         {
            for( i_index = 0; i_index < 10; i_index++)
   1333a:	8d 85       	ldd	r24, Y+13	; 0x0d
   1333c:	9e 85       	ldd	r25, Y+14	; 0x0e
   1333e:	af 85       	ldd	r26, Y+15	; 0x0f
   13340:	b8 89       	ldd	r27, Y+16	; 0x10
   13342:	01 96       	adiw	r24, 0x01	; 1
   13344:	a1 1d       	adc	r26, r1
   13346:	b1 1d       	adc	r27, r1
   13348:	8d 87       	std	Y+13, r24	; 0x0d
   1334a:	9e 87       	std	Y+14, r25	; 0x0e
   1334c:	af 87       	std	Y+15, r26	; 0x0f
   1334e:	b8 8b       	std	Y+16, r27	; 0x10
   13350:	8d 85       	ldd	r24, Y+13	; 0x0d
   13352:	9e 85       	ldd	r25, Y+14	; 0x0e
   13354:	af 85       	ldd	r26, Y+15	; 0x0f
   13356:	b8 89       	ldd	r27, Y+16	; 0x10
   13358:	8a 30       	cpi	r24, 0x0A	; 10
   1335a:	91 05       	cpc	r25, r1
   1335c:	a1 05       	cpc	r26, r1
   1335e:	b1 05       	cpc	r27, r1
   13360:	0c f4       	brge	.+2      	; 0x13364 <insIoctl+0x14f2>
   13362:	69 cf       	rjmp	.-302    	; 0x13236 <insIoctl+0x13c4>
               af_avrAcc[2] += (float)as_acc[2];

   				arb_sleep( INS_DT_SLEEP);
            }

            gas_H[gt_insDev.c_HWrtPtr][0] = (int16_t)(af_avrAcc[0] / i_index);
   13364:	80 91 3e 2a 	lds	r24, 0x2A3E
   13368:	c8 2e       	mov	r12, r24
   1336a:	dd 24       	eor	r13, r13
   1336c:	c7 fc       	sbrc	r12, 7
   1336e:	d0 94       	com	r13
   13370:	ce 01       	movw	r24, r28
   13372:	87 58       	subi	r24, 0x87	; 135
   13374:	9f 4f       	sbci	r25, 0xFF	; 255
   13376:	fc 01       	movw	r30, r24
   13378:	e0 80       	ld	r14, Z
   1337a:	f1 80       	ldd	r15, Z+1	; 0x01
   1337c:	02 81       	ldd	r16, Z+2	; 0x02
   1337e:	13 81       	ldd	r17, Z+3	; 0x03
   13380:	6d 85       	ldd	r22, Y+13	; 0x0d
   13382:	7e 85       	ldd	r23, Y+14	; 0x0e
   13384:	8f 85       	ldd	r24, Y+15	; 0x0f
   13386:	98 89       	ldd	r25, Y+16	; 0x10
   13388:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1338c:	9b 01       	movw	r18, r22
   1338e:	ac 01       	movw	r20, r24
   13390:	c8 01       	movw	r24, r16
   13392:	b7 01       	movw	r22, r14
   13394:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   13398:	dc 01       	movw	r26, r24
   1339a:	cb 01       	movw	r24, r22
   1339c:	bc 01       	movw	r22, r24
   1339e:	cd 01       	movw	r24, r26
   133a0:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   133a4:	dc 01       	movw	r26, r24
   133a6:	cb 01       	movw	r24, r22
   133a8:	9c 01       	movw	r18, r24
   133aa:	c6 01       	movw	r24, r12
   133ac:	88 0f       	add	r24, r24
   133ae:	99 1f       	adc	r25, r25
   133b0:	8c 0d       	add	r24, r12
   133b2:	9d 1d       	adc	r25, r13
   133b4:	88 0f       	add	r24, r24
   133b6:	99 1f       	adc	r25, r25
   133b8:	85 50       	subi	r24, 0x05	; 5
   133ba:	95 4d       	sbci	r25, 0xD5	; 213
   133bc:	fc 01       	movw	r30, r24
   133be:	20 83       	st	Z, r18
   133c0:	31 83       	std	Z+1, r19	; 0x01
            gas_H[gt_insDev.c_HWrtPtr][1] = (int16_t)(af_avrAcc[1] / i_index);
   133c2:	80 91 3e 2a 	lds	r24, 0x2A3E
   133c6:	c8 2e       	mov	r12, r24
   133c8:	dd 24       	eor	r13, r13
   133ca:	c7 fc       	sbrc	r12, 7
   133cc:	d0 94       	com	r13
   133ce:	ce 01       	movw	r24, r28
   133d0:	87 58       	subi	r24, 0x87	; 135
   133d2:	9f 4f       	sbci	r25, 0xFF	; 255
   133d4:	fc 01       	movw	r30, r24
   133d6:	e4 80       	ldd	r14, Z+4	; 0x04
   133d8:	f5 80       	ldd	r15, Z+5	; 0x05
   133da:	06 81       	ldd	r16, Z+6	; 0x06
   133dc:	17 81       	ldd	r17, Z+7	; 0x07
   133de:	6d 85       	ldd	r22, Y+13	; 0x0d
   133e0:	7e 85       	ldd	r23, Y+14	; 0x0e
   133e2:	8f 85       	ldd	r24, Y+15	; 0x0f
   133e4:	98 89       	ldd	r25, Y+16	; 0x10
   133e6:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   133ea:	9b 01       	movw	r18, r22
   133ec:	ac 01       	movw	r20, r24
   133ee:	c8 01       	movw	r24, r16
   133f0:	b7 01       	movw	r22, r14
   133f2:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   133f6:	dc 01       	movw	r26, r24
   133f8:	cb 01       	movw	r24, r22
   133fa:	bc 01       	movw	r22, r24
   133fc:	cd 01       	movw	r24, r26
   133fe:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   13402:	dc 01       	movw	r26, r24
   13404:	cb 01       	movw	r24, r22
   13406:	9c 01       	movw	r18, r24
   13408:	c6 01       	movw	r24, r12
   1340a:	88 0f       	add	r24, r24
   1340c:	99 1f       	adc	r25, r25
   1340e:	8c 0d       	add	r24, r12
   13410:	9d 1d       	adc	r25, r13
   13412:	88 0f       	add	r24, r24
   13414:	99 1f       	adc	r25, r25
   13416:	83 50       	subi	r24, 0x03	; 3
   13418:	95 4d       	sbci	r25, 0xD5	; 213
   1341a:	fc 01       	movw	r30, r24
   1341c:	20 83       	st	Z, r18
   1341e:	31 83       	std	Z+1, r19	; 0x01
            gas_H[gt_insDev.c_HWrtPtr][2] = (int16_t)(af_avrAcc[2] / i_index);
   13420:	80 91 3e 2a 	lds	r24, 0x2A3E
   13424:	c8 2e       	mov	r12, r24
   13426:	dd 24       	eor	r13, r13
   13428:	c7 fc       	sbrc	r12, 7
   1342a:	d0 94       	com	r13
   1342c:	ce 01       	movw	r24, r28
   1342e:	87 58       	subi	r24, 0x87	; 135
   13430:	9f 4f       	sbci	r25, 0xFF	; 255
   13432:	fc 01       	movw	r30, r24
   13434:	e0 84       	ldd	r14, Z+8	; 0x08
   13436:	f1 84       	ldd	r15, Z+9	; 0x09
   13438:	02 85       	ldd	r16, Z+10	; 0x0a
   1343a:	13 85       	ldd	r17, Z+11	; 0x0b
   1343c:	6d 85       	ldd	r22, Y+13	; 0x0d
   1343e:	7e 85       	ldd	r23, Y+14	; 0x0e
   13440:	8f 85       	ldd	r24, Y+15	; 0x0f
   13442:	98 89       	ldd	r25, Y+16	; 0x10
   13444:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   13448:	9b 01       	movw	r18, r22
   1344a:	ac 01       	movw	r20, r24
   1344c:	c8 01       	movw	r24, r16
   1344e:	b7 01       	movw	r22, r14
   13450:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   13454:	dc 01       	movw	r26, r24
   13456:	cb 01       	movw	r24, r22
   13458:	bc 01       	movw	r22, r24
   1345a:	cd 01       	movw	r24, r26
   1345c:	0e 94 cd f2 	call	0x1e59a	; 0x1e59a <__fixsfsi>
   13460:	dc 01       	movw	r26, r24
   13462:	cb 01       	movw	r24, r22
   13464:	9c 01       	movw	r18, r24
   13466:	c6 01       	movw	r24, r12
   13468:	88 0f       	add	r24, r24
   1346a:	99 1f       	adc	r25, r25
   1346c:	8c 0d       	add	r24, r12
   1346e:	9d 1d       	adc	r25, r13
   13470:	88 0f       	add	r24, r24
   13472:	99 1f       	adc	r25, r25
   13474:	81 50       	subi	r24, 0x01	; 1
   13476:	95 4d       	sbci	r25, 0xD5	; 213
   13478:	fc 01       	movw	r30, r24
   1347a:	20 83       	st	Z, r18
   1347c:	31 83       	std	Z+1, r19	; 0x01

            /*---------------------------------------------------------------*
             * Return the current reading...
             *---------------------------------------------------------------*/
            ps_results = (int16_t *)((int16_t)i_arguments);
   1347e:	ce 01       	movw	r24, r28
   13480:	87 57       	subi	r24, 0x77	; 119
   13482:	9f 4f       	sbci	r25, 0xFF	; 255
   13484:	fc 01       	movw	r30, r24
   13486:	80 81       	ld	r24, Z
   13488:	91 81       	ldd	r25, Z+1	; 0x01
   1348a:	89 8f       	std	Y+25, r24	; 0x19
   1348c:	9a 8f       	std	Y+26, r25	; 0x1a
            ps_results[0] = gas_H[gt_insDev.c_HWrtPtr][0];
   1348e:	80 91 3e 2a 	lds	r24, 0x2A3E
   13492:	28 2f       	mov	r18, r24
   13494:	33 27       	eor	r19, r19
   13496:	27 fd       	sbrc	r18, 7
   13498:	30 95       	com	r19
   1349a:	c9 01       	movw	r24, r18
   1349c:	88 0f       	add	r24, r24
   1349e:	99 1f       	adc	r25, r25
   134a0:	82 0f       	add	r24, r18
   134a2:	93 1f       	adc	r25, r19
   134a4:	88 0f       	add	r24, r24
   134a6:	99 1f       	adc	r25, r25
   134a8:	85 50       	subi	r24, 0x05	; 5
   134aa:	95 4d       	sbci	r25, 0xD5	; 213
   134ac:	fc 01       	movw	r30, r24
   134ae:	20 81       	ld	r18, Z
   134b0:	31 81       	ldd	r19, Z+1	; 0x01
   134b2:	89 8d       	ldd	r24, Y+25	; 0x19
   134b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
   134b6:	fc 01       	movw	r30, r24
   134b8:	20 83       	st	Z, r18
   134ba:	31 83       	std	Z+1, r19	; 0x01
            ps_results[1] = gas_H[gt_insDev.c_HWrtPtr][1];
   134bc:	89 8d       	ldd	r24, Y+25	; 0x19
   134be:	9a 8d       	ldd	r25, Y+26	; 0x1a
   134c0:	ac 01       	movw	r20, r24
   134c2:	4e 5f       	subi	r20, 0xFE	; 254
   134c4:	5f 4f       	sbci	r21, 0xFF	; 255
   134c6:	80 91 3e 2a 	lds	r24, 0x2A3E
   134ca:	28 2f       	mov	r18, r24
   134cc:	33 27       	eor	r19, r19
   134ce:	27 fd       	sbrc	r18, 7
   134d0:	30 95       	com	r19
   134d2:	c9 01       	movw	r24, r18
   134d4:	88 0f       	add	r24, r24
   134d6:	99 1f       	adc	r25, r25
   134d8:	82 0f       	add	r24, r18
   134da:	93 1f       	adc	r25, r19
   134dc:	88 0f       	add	r24, r24
   134de:	99 1f       	adc	r25, r25
   134e0:	83 50       	subi	r24, 0x03	; 3
   134e2:	95 4d       	sbci	r25, 0xD5	; 213
   134e4:	fc 01       	movw	r30, r24
   134e6:	80 81       	ld	r24, Z
   134e8:	91 81       	ldd	r25, Z+1	; 0x01
   134ea:	fa 01       	movw	r30, r20
   134ec:	80 83       	st	Z, r24
   134ee:	91 83       	std	Z+1, r25	; 0x01
            ps_results[2] = gas_H[gt_insDev.c_HWrtPtr][2];
   134f0:	89 8d       	ldd	r24, Y+25	; 0x19
   134f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
   134f4:	ac 01       	movw	r20, r24
   134f6:	4c 5f       	subi	r20, 0xFC	; 252
   134f8:	5f 4f       	sbci	r21, 0xFF	; 255
   134fa:	80 91 3e 2a 	lds	r24, 0x2A3E
   134fe:	28 2f       	mov	r18, r24
   13500:	33 27       	eor	r19, r19
   13502:	27 fd       	sbrc	r18, 7
   13504:	30 95       	com	r19
   13506:	c9 01       	movw	r24, r18
   13508:	88 0f       	add	r24, r24
   1350a:	99 1f       	adc	r25, r25
   1350c:	82 0f       	add	r24, r18
   1350e:	93 1f       	adc	r25, r19
   13510:	88 0f       	add	r24, r24
   13512:	99 1f       	adc	r25, r25
   13514:	81 50       	subi	r24, 0x01	; 1
   13516:	95 4d       	sbci	r25, 0xD5	; 213
   13518:	fc 01       	movw	r30, r24
   1351a:	80 81       	ld	r24, Z
   1351c:	91 81       	ldd	r25, Z+1	; 0x01
   1351e:	fa 01       	movw	r30, r20
   13520:	80 83       	st	Z, r24
   13522:	91 83       	std	Z+1, r25	; 0x01

            gt_insDev.c_HWrtPtr++;
   13524:	80 91 3e 2a 	lds	r24, 0x2A3E
   13528:	8f 5f       	subi	r24, 0xFF	; 255
   1352a:	80 93 3e 2a 	sts	0x2A3E, r24

         }/*End if( (*pc_HWrtPtr) < INS_MAX_CAL_SAMPLES)*/

	      if( gt_insDev.c_HWrtPtr == INS_MAX_CAL_SAMPLES)
   1352e:	80 91 3e 2a 	lds	r24, 0x2A3E
   13532:	80 31       	cpi	r24, 0x10	; 16
   13534:	09 f0       	breq	.+2      	; 0x13538 <insIoctl+0x16c6>
   13536:	c2 c0       	rjmp	.+388    	; 0x136bc <insIoctl+0x184a>
         {
            if( ellipsoidFit( &gt_insDev.t_accel.as_R[0][0],
   13538:	87 e4       	ldi	r24, 0x47	; 71
   1353a:	94 e2       	ldi	r25, 0x24	; 36
   1353c:	4f e5       	ldi	r20, 0x5F	; 95
   1353e:	54 e2       	ldi	r21, 0x24	; 36
   13540:	29 e5       	ldi	r18, 0x59	; 89
   13542:	34 e2       	ldi	r19, 0x24	; 36
   13544:	ba 01       	movw	r22, r20
   13546:	a9 01       	movw	r20, r18
   13548:	20 e0       	ldi	r18, 0x00	; 0
   1354a:	31 e0       	ldi	r19, 0x01	; 1
   1354c:	0e 94 01 45 	call	0x8a02	; 0x8a02 <ellipsoidFit>
   13550:	88 23       	and	r24, r24
   13552:	a1 f0       	breq	.+40     	; 0x1357c <insIoctl+0x170a>
                              &gt_insDev.t_accel.as_bias[0],
							         &gt_insDev.t_accel.as_scale[0],
                              INS_MAX_CAL_GRAV_ENV))
            {
               gt_insDev.t_accel.s_calGravity = INS_MAX_CAL_GRAV_ENV;
   13554:	80 e0       	ldi	r24, 0x00	; 0
   13556:	91 e0       	ldi	r25, 0x01	; 1
   13558:	80 93 65 24 	sts	0x2465, r24
   1355c:	90 93 66 24 	sts	0x2466, r25
               gt_insDev.t_accel.t_cal = INS_CAL_COMPLETE;
   13560:	82 e0       	ldi	r24, 0x02	; 2
   13562:	80 93 67 24 	sts	0x2467, r24
               i_return = (int32_t)gt_insDev.t_accel.t_cal;
   13566:	80 91 67 24 	lds	r24, 0x2467
   1356a:	88 2f       	mov	r24, r24
   1356c:	90 e0       	ldi	r25, 0x00	; 0
   1356e:	a0 e0       	ldi	r26, 0x00	; 0
   13570:	b0 e0       	ldi	r27, 0x00	; 0
   13572:	89 83       	std	Y+1, r24	; 0x01
   13574:	9a 83       	std	Y+2, r25	; 0x02
   13576:	ab 83       	std	Y+3, r26	; 0x03
   13578:	bc 83       	std	Y+4, r27	; 0x04
               i_return = (int32_t)gt_insDev.t_accel.t_cal;
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End case INS_CALIBRATE_ACCEL:*/
   1357a:	a0 c0       	rjmp	.+320    	; 0x136bc <insIoctl+0x184a>
               gt_insDev.t_accel.t_cal = INS_CAL_COMPLETE;
               i_return = (int32_t)gt_insDev.t_accel.t_cal;
            }
            else
            {
               gt_insDev.t_accel.t_cal = INS_CAL_FAILED;
   1357c:	10 92 67 24 	sts	0x2467, r1
               i_return = (int32_t)gt_insDev.t_accel.t_cal;
   13580:	80 91 67 24 	lds	r24, 0x2467
   13584:	88 2f       	mov	r24, r24
   13586:	90 e0       	ldi	r25, 0x00	; 0
   13588:	a0 e0       	ldi	r26, 0x00	; 0
   1358a:	b0 e0       	ldi	r27, 0x00	; 0
   1358c:	89 83       	std	Y+1, r24	; 0x01
   1358e:	9a 83       	std	Y+2, r25	; 0x02
   13590:	ab 83       	std	Y+3, r26	; 0x03
   13592:	bc 83       	std	Y+4, r27	; 0x04
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End case INS_CALIBRATE_ACCEL:*/
   13594:	93 c0       	rjmp	.+294    	; 0x136bc <insIoctl+0x184a>

      case INS_GET_MAG_CALIBRATION:
      {
		   t_ellipsoidCal *pt_magCal;

         pt_magCal = (t_ellipsoidCal *)((int16_t)i_arguments);
   13596:	ce 01       	movw	r24, r28
   13598:	87 57       	subi	r24, 0x77	; 119
   1359a:	9f 4f       	sbci	r25, 0xFF	; 255
   1359c:	fc 01       	movw	r30, r24
   1359e:	80 81       	ld	r24, Z
   135a0:	91 81       	ldd	r25, Z+1	; 0x01
   135a2:	8b 8f       	std	Y+27, r24	; 0x1b
   135a4:	9c 8f       	std	Y+28, r25	; 0x1c
         pt_magCal->t_status = gt_insDev.t_mag.t_cal;
   135a6:	20 91 32 24 	lds	r18, 0x2432
   135aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135ae:	fc 01       	movw	r30, r24
   135b0:	20 83       	st	Z, r18
         pt_magCal->ps_bias  = &gt_insDev.t_mag.as_bias[0];
   135b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135b6:	2a e2       	ldi	r18, 0x2A	; 42
   135b8:	34 e2       	ldi	r19, 0x24	; 36
   135ba:	fc 01       	movw	r30, r24
   135bc:	23 83       	std	Z+3, r18	; 0x03
   135be:	34 83       	std	Z+4, r19	; 0x04
		   pt_magCal->ps_scale = &gt_insDev.t_mag.as_scale[0];
   135c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135c4:	24 e2       	ldi	r18, 0x24	; 36
   135c6:	34 e2       	ldi	r19, 0x24	; 36
   135c8:	fc 01       	movw	r30, r24
   135ca:	25 83       	std	Z+5, r18	; 0x05
   135cc:	36 83       	std	Z+6, r19	; 0x06
         pt_magCal->ps_R     = &gt_insDev.t_mag.as_R[0][0];
   135ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135d2:	22 e1       	ldi	r18, 0x12	; 18
   135d4:	34 e2       	ldi	r19, 0x24	; 36
   135d6:	fc 01       	movw	r30, r24
   135d8:	21 83       	std	Z+1, r18	; 0x01
   135da:	32 83       	std	Z+2, r19	; 0x02
		   pt_magCal->c_n      = INS_AXIS_SCALE_Q_FACTOR;
   135dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135de:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135e0:	2d e0       	ldi	r18, 0x0D	; 13
   135e2:	fc 01       	movw	r30, r24
   135e4:	27 83       	std	Z+7, r18	; 0x07
		   pt_magCal->c_n      = INS_AXIS_SCALE_Q_FACTOR;
   135e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135ea:	2d e0       	ldi	r18, 0x0D	; 13
   135ec:	fc 01       	movw	r30, r24
   135ee:	27 83       	std	Z+7, r18	; 0x07
         pt_magCal->s_env    = INS_MAX_CAL_MAG_ENV;
   135f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   135f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
   135f4:	20 e0       	ldi	r18, 0x00	; 0
   135f6:	32 e0       	ldi	r19, 0x02	; 2
   135f8:	fc 01       	movw	r30, r24
   135fa:	20 87       	std	Z+8, r18	; 0x08
   135fc:	31 87       	std	Z+9, r19	; 0x09

		   i_return = (int32_t)ARB_PASSED;
   135fe:	19 82       	std	Y+1, r1	; 0x01
   13600:	1a 82       	std	Y+2, r1	; 0x02
   13602:	1b 82       	std	Y+3, r1	; 0x03
   13604:	1c 82       	std	Y+4, r1	; 0x04
	   }
      break;/*End case INS_GET_MAG_CALIBRATION:*/
   13606:	5b c0       	rjmp	.+182    	; 0x136be <insIoctl+0x184c>

      case INS_GET_ACCEL_CALIBRATION:
      {
		   t_ellipsoidCal *pt_accelCal;

         pt_accelCal = (t_ellipsoidCal *)((int16_t)i_arguments);
   13608:	ce 01       	movw	r24, r28
   1360a:	87 57       	subi	r24, 0x77	; 119
   1360c:	9f 4f       	sbci	r25, 0xFF	; 255
   1360e:	fc 01       	movw	r30, r24
   13610:	80 81       	ld	r24, Z
   13612:	91 81       	ldd	r25, Z+1	; 0x01
   13614:	8d 8f       	std	Y+29, r24	; 0x1d
   13616:	9e 8f       	std	Y+30, r25	; 0x1e
         pt_accelCal->t_status = gt_insDev.t_accel.t_cal;
   13618:	20 91 67 24 	lds	r18, 0x2467
   1361c:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1361e:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13620:	fc 01       	movw	r30, r24
   13622:	20 83       	st	Z, r18
         pt_accelCal->ps_bias  = &gt_insDev.t_accel.as_bias[0];
   13624:	8d 8d       	ldd	r24, Y+29	; 0x1d
   13626:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13628:	2f e5       	ldi	r18, 0x5F	; 95
   1362a:	34 e2       	ldi	r19, 0x24	; 36
   1362c:	fc 01       	movw	r30, r24
   1362e:	23 83       	std	Z+3, r18	; 0x03
   13630:	34 83       	std	Z+4, r19	; 0x04
		   pt_accelCal->ps_scale = &gt_insDev.t_accel.as_scale[0];
   13632:	8d 8d       	ldd	r24, Y+29	; 0x1d
   13634:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13636:	29 e5       	ldi	r18, 0x59	; 89
   13638:	34 e2       	ldi	r19, 0x24	; 36
   1363a:	fc 01       	movw	r30, r24
   1363c:	25 83       	std	Z+5, r18	; 0x05
   1363e:	36 83       	std	Z+6, r19	; 0x06
         pt_accelCal->ps_R     = &gt_insDev.t_accel.as_R[0][0];
   13640:	8d 8d       	ldd	r24, Y+29	; 0x1d
   13642:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13644:	27 e4       	ldi	r18, 0x47	; 71
   13646:	34 e2       	ldi	r19, 0x24	; 36
   13648:	fc 01       	movw	r30, r24
   1364a:	21 83       	std	Z+1, r18	; 0x01
   1364c:	32 83       	std	Z+2, r19	; 0x02
		   pt_accelCal->c_n      = INS_AXIS_SCALE_Q_FACTOR;
   1364e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   13650:	9e 8d       	ldd	r25, Y+30	; 0x1e
   13652:	2d e0       	ldi	r18, 0x0D	; 13
   13654:	fc 01       	movw	r30, r24
   13656:	27 83       	std	Z+7, r18	; 0x07
         pt_accelCal->s_env    = INS_MAX_CAL_GRAV_ENV;
   13658:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1365a:	9e 8d       	ldd	r25, Y+30	; 0x1e
   1365c:	20 e0       	ldi	r18, 0x00	; 0
   1365e:	31 e0       	ldi	r19, 0x01	; 1
   13660:	fc 01       	movw	r30, r24
   13662:	20 87       	std	Z+8, r18	; 0x08
   13664:	31 87       	std	Z+9, r19	; 0x09

		   i_return = (int32_t)ARB_PASSED;
   13666:	19 82       	std	Y+1, r1	; 0x01
   13668:	1a 82       	std	Y+2, r1	; 0x02
   1366a:	1b 82       	std	Y+3, r1	; 0x03
   1366c:	1c 82       	std	Y+4, r1	; 0x04
	   }
      break;/*End case INS_GET_ACCEL_CALIBRATION:*/
   1366e:	27 c0       	rjmp	.+78     	; 0x136be <insIoctl+0x184c>

      case INS_GET_GYRO_CALIBRATION:
      {
		   t_ellipsoidCal *pt_gyroCal;

         pt_gyroCal = (t_ellipsoidCal *)((int16_t)i_arguments);
   13670:	ce 01       	movw	r24, r28
   13672:	87 57       	subi	r24, 0x77	; 119
   13674:	9f 4f       	sbci	r25, 0xFF	; 255
   13676:	fc 01       	movw	r30, r24
   13678:	80 81       	ld	r24, Z
   1367a:	91 81       	ldd	r25, Z+1	; 0x01
   1367c:	8f 8f       	std	Y+31, r24	; 0x1f
   1367e:	98 a3       	lds	r25, 0x58
         pt_gyroCal->ps_scale = &gt_insDev.t_gyro.as_scale[0];
   13680:	8f 8d       	ldd	r24, Y+31	; 0x1f
   13682:	98 a1       	lds	r25, 0x48
   13684:	2f e3       	ldi	r18, 0x3F	; 63
   13686:	34 e2       	ldi	r19, 0x24	; 36
   13688:	fc 01       	movw	r30, r24
   1368a:	25 83       	std	Z+5, r18	; 0x05
   1368c:	36 83       	std	Z+6, r19	; 0x06
         pt_gyroCal->ps_bias  = &gt_insDev.t_gyro.as_bias[0];
   1368e:	8f 8d       	ldd	r24, Y+31	; 0x1f
   13690:	98 a1       	lds	r25, 0x48
   13692:	23 e3       	ldi	r18, 0x33	; 51
   13694:	34 e2       	ldi	r19, 0x24	; 36
   13696:	fc 01       	movw	r30, r24
   13698:	23 83       	std	Z+3, r18	; 0x03
   1369a:	34 83       	std	Z+4, r19	; 0x04

		   i_return = (int32_t)ARB_PASSED;
   1369c:	19 82       	std	Y+1, r1	; 0x01
   1369e:	1a 82       	std	Y+2, r1	; 0x02
   136a0:	1b 82       	std	Y+3, r1	; 0x03
   136a2:	1c 82       	std	Y+4, r1	; 0x04
	   }
      break;/*End case INS_GET_GYRO_CALIBRATION:*/
   136a4:	0c c0       	rjmp	.+24     	; 0x136be <insIoctl+0x184c>

      default:

         i_return = (int32_t)ARB_INVALID_CMD;
   136a6:	8b ef       	ldi	r24, 0xFB	; 251
   136a8:	9f ef       	ldi	r25, 0xFF	; 255
   136aa:	af ef       	ldi	r26, 0xFF	; 255
   136ac:	bf ef       	ldi	r27, 0xFF	; 255
   136ae:	89 83       	std	Y+1, r24	; 0x01
   136b0:	9a 83       	std	Y+2, r25	; 0x02
   136b2:	ab 83       	std	Y+3, r26	; 0x03
   136b4:	bc 83       	std	Y+4, r27	; 0x04

      break;
   136b6:	03 c0       	rjmp	.+6      	; 0x136be <insIoctl+0x184c>
               i_return = (int32_t)gt_insDev.t_mag.t_cal;
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End INS_CALIBRATE_MAG*/
   136b8:	00 00       	nop
   136ba:	01 c0       	rjmp	.+2      	; 0x136be <insIoctl+0x184c>
               i_return = (int32_t)gt_insDev.t_accel.t_cal;
            }

         }/*End if( (*pc_HWrtPtr) == INS_MAX_CAL_SAMPLES)*/
      }
      break;/*End case INS_CALIBRATE_ACCEL:*/
   136bc:	00 00       	nop
   }/*End switch( (t_insCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_insDev.t_mutex);
   136be:	80 91 f7 23 	lds	r24, 0x23F7
   136c2:	90 91 f8 23 	lds	r25, 0x23F8
   136c6:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return i_return;
   136ca:	89 81       	ldd	r24, Y+1	; 0x01
   136cc:	9a 81       	ldd	r25, Y+2	; 0x02
   136ce:	ab 81       	ldd	r26, Y+3	; 0x03
   136d0:	bc 81       	ldd	r27, Y+4	; 0x04

}/*End insIoctl*/
   136d2:	bc 01       	movw	r22, r24
   136d4:	cd 01       	movw	r24, r26
   136d6:	c4 57       	subi	r28, 0x74	; 116
   136d8:	df 4f       	sbci	r29, 0xFF	; 255
   136da:	cd bf       	out	0x3d, r28	; 61
   136dc:	de bf       	out	0x3e, r29	; 62
   136de:	df 91       	pop	r29
   136e0:	cf 91       	pop	r28
   136e2:	1f 91       	pop	r17
   136e4:	0f 91       	pop	r16
   136e6:	ff 90       	pop	r15
   136e8:	ef 90       	pop	r14
   136ea:	df 90       	pop	r13
   136ec:	cf 90       	pop	r12
   136ee:	08 95       	ret

000136f0 <insClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
static t_error insClose( t_DEVHANDLE t_handle)
{
   136f0:	cf 93       	push	r28
   136f2:	df 93       	push	r29
   136f4:	0f 92       	push	r0
   136f6:	0f 92       	push	r0
   136f8:	cd b7       	in	r28, 0x3d	; 61
   136fa:	de b7       	in	r29, 0x3e	; 62
   136fc:	89 83       	std	Y+1, r24	; 0x01
   136fe:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_insDev.t_mutex,
   13700:	80 91 f7 23 	lds	r24, 0x23F7
   13704:	90 91 f8 23 	lds	r25, 0x23F8
   13708:	60 e0       	ldi	r22, 0x00	; 0
   1370a:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   /*------------------------------------------------------------------------*
    * Keep track of the number of user-space applications using the driver.
    *------------------------------------------------------------------------*/
   gt_insDev.c_numUsers--;
   1370e:	80 91 fb 23 	lds	r24, 0x23FB
   13712:	81 50       	subi	r24, 0x01	; 1
   13714:	80 93 fb 23 	sts	0x23FB, r24
    *------------------------------------------------------------------------*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_insDev.t_mutex);
   13718:	80 91 f7 23 	lds	r24, 0x23F7
   1371c:	90 91 f8 23 	lds	r25, 0x23F8
   13720:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return ARB_PASSED;
   13724:	80 e0       	ldi	r24, 0x00	; 0

}/*End insClose*/
   13726:	0f 90       	pop	r0
   13728:	0f 90       	pop	r0
   1372a:	df 91       	pop	r29
   1372c:	cf 91       	pop	r28
   1372e:	08 95       	ret

00013730 <drv_insInit>:

t_error drv_insInit( void)
{
   13730:	0f 93       	push	r16
   13732:	1f 93       	push	r17
   13734:	cf 93       	push	r28
   13736:	df 93       	push	r29
   13738:	cd b7       	in	r28, 0x3d	; 61
   1373a:	de b7       	in	r29, 0x3e	; 62
   1373c:	2b 97       	sbiw	r28, 0x0b	; 11
   1373e:	cd bf       	out	0x3d, r28	; 61
   13740:	de bf       	out	0x3e, r29	; 62
   t_error t_err = ARB_PASSED;
   13742:	19 82       	std	Y+1, r1	; 0x01
   13744:	86 e0       	ldi	r24, 0x06	; 6
   13746:	8a 83       	std	Y+2, r24	; 0x02
   13748:	1b 82       	std	Y+3, r1	; 0x03
   1374a:	8a 81       	ldd	r24, Y+2	; 0x02
   1374c:	88 2f       	mov	r24, r24
   1374e:	90 e0       	ldi	r25, 0x00	; 0
   13750:	38 2f       	mov	r19, r24
   13752:	22 27       	eor	r18, r18
   13754:	8b 81       	ldd	r24, Y+3	; 0x03
   13756:	88 2f       	mov	r24, r24
   13758:	90 e0       	ldi	r25, 0x00	; 0
   1375a:	82 2b       	or	r24, r18
   1375c:	93 2b       	or	r25, r19
   t_twiConfig  t_tConf;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "insDevice0",
   1375e:	ac 01       	movw	r20, r24
   13760:	80 e5       	ldi	r24, 0x50	; 80
   13762:	90 e2       	ldi	r25, 0x20	; 32
   13764:	26 e4       	ldi	r18, 0x46	; 70
   13766:	30 e2       	ldi	r19, 0x20	; 32
   13768:	ba 01       	movw	r22, r20
   1376a:	a9 01       	movw	r20, r18
   1376c:	0e 94 13 bf 	call	0x17e26	; 0x17e26 <arb_registerDevice>
   13770:	89 83       	std	Y+1, r24	; 0x01
                               arb_createDevId( INS_MAJOR_NUMBER, 0),
                               &gt_insDevOps);

   if( t_err < 0)
   13772:	89 81       	ldd	r24, Y+1	; 0x01
   13774:	88 23       	and	r24, r24
   13776:	0c f4       	brge	.+2      	; 0x1377a <drv_insInit+0x4a>
   13778:	54 c1       	rjmp	.+680    	; 0x13a22 <drv_insInit+0x2f2>
   }

   /*------------------------------------------------------------------------*
    * Make sure the top level data structure is reset...
    *------------------------------------------------------------------------*/
   memset( (void *)&gt_insDev, 0, sizeof( gt_insDev));
   1377a:	24 e0       	ldi	r18, 0x04	; 4
   1377c:	37 e0       	ldi	r19, 0x07	; 7
   1377e:	87 ef       	ldi	r24, 0xF7	; 247
   13780:	93 e2       	ldi	r25, 0x23	; 35
   13782:	fc 01       	movw	r30, r24
   13784:	a9 01       	movw	r20, r18
   13786:	11 92       	st	Z+, r1
   13788:	41 50       	subi	r20, 0x01	; 1
   1378a:	50 40       	sbci	r21, 0x00	; 0
   1378c:	e1 f7       	brne	.-8      	; 0x13786 <drv_insInit+0x56>

   gt_insDev.t_mutex = arb_semaphoreCreate( MUTEX);
   1378e:	82 e0       	ldi	r24, 0x02	; 2
   13790:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
   13794:	80 93 f7 23 	sts	0x23F7, r24
   13798:	90 93 f8 23 	sts	0x23F8, r25

   if( gt_insDev.t_mutex < 0)
   1379c:	80 91 f7 23 	lds	r24, 0x23F7
   137a0:	90 91 f8 23 	lds	r25, 0x23F8
   137a4:	99 23       	and	r25, r25
   137a6:	34 f4       	brge	.+12     	; 0x137b4 <drv_insInit+0x84>
   {
      t_err = (t_error)gt_insDev.t_mutex;
   137a8:	80 91 f7 23 	lds	r24, 0x23F7
   137ac:	90 91 f8 23 	lds	r25, 0x23F8
   137b0:	89 83       	std	Y+1, r24	; 0x01
      goto failed2;
   137b2:	32 c1       	rjmp	.+612    	; 0x13a18 <drv_insInit+0x2e8>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. We will use this semaphore for
    * signaling the user-space program when a measurement has finished.
    *------------------------------------------------------------------------*/
   gt_insDev.t_rxBlockingSem = arb_semaphoreCreate( COUNTING);
   137b4:	80 e0       	ldi	r24, 0x00	; 0
   137b6:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
   137ba:	80 93 f9 23 	sts	0x23F9, r24
   137be:	90 93 fa 23 	sts	0x23FA, r25

   if( gt_insDev.t_rxBlockingSem < 0)
   137c2:	80 91 f9 23 	lds	r24, 0x23F9
   137c6:	90 91 fa 23 	lds	r25, 0x23FA
   137ca:	99 23       	and	r25, r25
   137cc:	34 f4       	brge	.+12     	; 0x137da <drv_insInit+0xaa>
   {
      t_err = (t_error)gt_insDev.t_rxBlockingSem;
   137ce:	80 91 f9 23 	lds	r24, 0x23F9
   137d2:	90 91 fa 23 	lds	r25, 0x23FA
   137d6:	89 83       	std	Y+1, r24	; 0x01
      goto failed3;
   137d8:	19 c1       	rjmp	.+562    	; 0x13a0c <drv_insInit+0x2dc>
   }/*End if( gt_insDev.t_rxBlockingSem < 0)*/

   /*------------------------------------------------------------------------*
    * Request access to the INS TWI channel...
    *------------------------------------------------------------------------*/
   gt_insDev.t_tHandle = hal_requestTwiChannel( INS_TWI);
   137da:	81 e0       	ldi	r24, 0x01	; 1
   137dc:	0e 94 6e 14 	call	0x28dc	; 0x28dc <hal_requestTwiChannel>
   137e0:	80 93 fe 23 	sts	0x23FE, r24
   137e4:	90 93 ff 23 	sts	0x23FF, r25

   if( gt_insDev.t_tHandle < 0)
   137e8:	80 91 fe 23 	lds	r24, 0x23FE
   137ec:	90 91 ff 23 	lds	r25, 0x23FF
   137f0:	99 23       	and	r25, r25
   137f2:	1c f4       	brge	.+6      	; 0x137fa <drv_insInit+0xca>
   {
      t_err = ARB_HAL_ERROR;
   137f4:	86 ef       	ldi	r24, 0xF6	; 246
   137f6:	89 83       	std	Y+1, r24	; 0x01
      goto failed4;
   137f8:	03 c1       	rjmp	.+518    	; 0x13a00 <drv_insInit+0x2d0>
   }

   /*------------------------------------------------------------------------*
    * Configure the INS TWI channel as master...
    *------------------------------------------------------------------------*/
   t_tConf.t_mode = TWI_MASTER;
   137fa:	1c 82       	std	Y+4, r1	; 0x04
   t_tConf.i_baud = INS_TWI_BAUD_RATE;
   137fc:	80 e8       	ldi	r24, 0x80	; 128
   137fe:	9a e1       	ldi	r25, 0x1A	; 26
   13800:	a6 e0       	ldi	r26, 0x06	; 6
   13802:	b0 e0       	ldi	r27, 0x00	; 0
   13804:	8d 83       	std	Y+5, r24	; 0x05
   13806:	9e 83       	std	Y+6, r25	; 0x06
   13808:	af 83       	std	Y+7, r26	; 0x07
   1380a:	b8 87       	std	Y+8, r27	; 0x08

   t_err = hal_configureTwiChannel( gt_insDev.t_tHandle, t_tConf);
   1380c:	80 91 fe 23 	lds	r24, 0x23FE
   13810:	90 91 ff 23 	lds	r25, 0x23FF
   13814:	0c 81       	ldd	r16, Y+4	; 0x04
   13816:	1d 81       	ldd	r17, Y+5	; 0x05
   13818:	2e 81       	ldd	r18, Y+6	; 0x06
   1381a:	3f 81       	ldd	r19, Y+7	; 0x07
   1381c:	48 85       	ldd	r20, Y+8	; 0x08
   1381e:	59 85       	ldd	r21, Y+9	; 0x09
   13820:	6a 85       	ldd	r22, Y+10	; 0x0a
   13822:	7b 85       	ldd	r23, Y+11	; 0x0b
   13824:	0e 94 08 15 	call	0x2a10	; 0x2a10 <hal_configureTwiChannel>
   13828:	89 83       	std	Y+1, r24	; 0x01

   if( t_err < 0)
   1382a:	89 81       	ldd	r24, Y+1	; 0x01
   1382c:	88 23       	and	r24, r24
   1382e:	54 f4       	brge	.+20     	; 0x13844 <drv_insInit+0x114>
   {
      t_err = ARB_HAL_ERROR;
   13830:	86 ef       	ldi	r24, 0xF6	; 246
   13832:	89 83       	std	Y+1, r24	; 0x01
      goto failed5;
   13834:	00 00       	nop

   return ARB_PASSED;

failed5:

   hal_releaseTwiChannel( gt_insDev.t_tHandle);
   13836:	80 91 fe 23 	lds	r24, 0x23FE
   1383a:	90 91 ff 23 	lds	r25, 0x23FF
   1383e:	0e 94 c2 14 	call	0x2984	; 0x2984 <hal_releaseTwiChannel>
   13842:	de c0       	rjmp	.+444    	; 0x13a00 <drv_insInit+0x2d0>
   }

   /*------------------------------------------------------------------------*
    * We dont have any users attached to this device.
    *------------------------------------------------------------------------*/
   gt_insDev.c_numUsers = 0;
   13844:	10 92 fb 23 	sts	0x23FB, r1

   /*------------------------------------------------------------------------*
    * Initialize the gyro axis scale factor to 1.
    *------------------------------------------------------------------------*/
   gt_insDev.t_gyro.as_scale[0] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR) - 1;
   13848:	8f ef       	ldi	r24, 0xFF	; 255
   1384a:	9f e1       	ldi	r25, 0x1F	; 31
   1384c:	80 93 3f 24 	sts	0x243F, r24
   13850:	90 93 40 24 	sts	0x2440, r25
   gt_insDev.t_gyro.as_scale[1] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR) - 1;
   13854:	8f ef       	ldi	r24, 0xFF	; 255
   13856:	9f e1       	ldi	r25, 0x1F	; 31
   13858:	80 93 41 24 	sts	0x2441, r24
   1385c:	90 93 42 24 	sts	0x2442, r25
   gt_insDev.t_gyro.as_scale[2] = ((int16_t)1 << INS_AXIS_SCALE_Q_FACTOR) - 1;
   13860:	8f ef       	ldi	r24, 0xFF	; 255
   13862:	9f e1       	ldi	r25, 0x1F	; 31
   13864:	80 93 43 24 	sts	0x2443, r24
   13868:	90 93 44 24 	sts	0x2444, r25

   /*------------------------------------------------------------------------*
    * Recall calibration parameters from eeprom.
    *------------------------------------------------------------------------*/
   gt_insDev.t_mag.as_R[0][0] = 18815;
   1386c:	8f e7       	ldi	r24, 0x7F	; 127
   1386e:	99 e4       	ldi	r25, 0x49	; 73
   13870:	80 93 12 24 	sts	0x2412, r24
   13874:	90 93 13 24 	sts	0x2413, r25
   gt_insDev.t_mag.as_R[0][1] = 26566;
   13878:	86 ec       	ldi	r24, 0xC6	; 198
   1387a:	97 e6       	ldi	r25, 0x67	; 103
   1387c:	80 93 14 24 	sts	0x2414, r24
   13880:	90 93 15 24 	sts	0x2415, r25
   gt_insDev.t_mag.as_R[0][2] = 3719;
   13884:	87 e8       	ldi	r24, 0x87	; 135
   13886:	9e e0       	ldi	r25, 0x0E	; 14
   13888:	80 93 16 24 	sts	0x2416, r24
   1388c:	90 93 17 24 	sts	0x2417, r25
   gt_insDev.t_mag.as_R[1][0] = 26608;
   13890:	80 ef       	ldi	r24, 0xF0	; 240
   13892:	97 e6       	ldi	r25, 0x67	; 103
   13894:	80 93 18 24 	sts	0x2418, r24
   13898:	90 93 19 24 	sts	0x2419, r25
   gt_insDev.t_mag.as_R[1][1] = -19060;
   1389c:	8c e8       	ldi	r24, 0x8C	; 140
   1389e:	95 eb       	ldi	r25, 0xB5	; 181
   138a0:	80 93 1a 24 	sts	0x241A, r24
   138a4:	90 93 1b 24 	sts	0x241B, r25
   gt_insDev.t_mag.as_R[1][2] = 1538;
   138a8:	82 e0       	ldi	r24, 0x02	; 2
   138aa:	96 e0       	ldi	r25, 0x06	; 6
   138ac:	80 93 1c 24 	sts	0x241C, r24
   138b0:	90 93 1d 24 	sts	0x241D, r25
   gt_insDev.t_mag.as_R[2][0] = -3410;
   138b4:	8e ea       	ldi	r24, 0xAE	; 174
   138b6:	92 ef       	ldi	r25, 0xF2	; 242
   138b8:	80 93 1e 24 	sts	0x241E, r24
   138bc:	90 93 1f 24 	sts	0x241F, r25
   gt_insDev.t_mag.as_R[2][1] = -2136;
   138c0:	88 ea       	ldi	r24, 0xA8	; 168
   138c2:	97 ef       	ldi	r25, 0xF7	; 247
   138c4:	80 93 20 24 	sts	0x2420, r24
   138c8:	90 93 21 24 	sts	0x2421, r25
   gt_insDev.t_mag.as_R[2][2] = 32518;
   138cc:	86 e0       	ldi	r24, 0x06	; 6
   138ce:	9f e7       	ldi	r25, 0x7F	; 127
   138d0:	80 93 22 24 	sts	0x2422, r24
   138d4:	90 93 23 24 	sts	0x2423, r25

   gt_insDev.t_mag.as_scale[0] = 6260;
   138d8:	84 e7       	ldi	r24, 0x74	; 116
   138da:	98 e1       	ldi	r25, 0x18	; 24
   138dc:	80 93 24 24 	sts	0x2424, r24
   138e0:	90 93 25 24 	sts	0x2425, r25
   gt_insDev.t_mag.as_scale[1] = 6386;
   138e4:	82 ef       	ldi	r24, 0xF2	; 242
   138e6:	98 e1       	ldi	r25, 0x18	; 24
   138e8:	80 93 26 24 	sts	0x2426, r24
   138ec:	90 93 27 24 	sts	0x2427, r25
   gt_insDev.t_mag.as_scale[2] = 7104;
   138f0:	80 ec       	ldi	r24, 0xC0	; 192
   138f2:	9b e1       	ldi	r25, 0x1B	; 27
   138f4:	80 93 28 24 	sts	0x2428, r24
   138f8:	90 93 29 24 	sts	0x2429, r25

   gt_insDev.t_mag.as_bias[0] = -112;
   138fc:	80 e9       	ldi	r24, 0x90	; 144
   138fe:	9f ef       	ldi	r25, 0xFF	; 255
   13900:	80 93 2a 24 	sts	0x242A, r24
   13904:	90 93 2b 24 	sts	0x242B, r25
   gt_insDev.t_mag.as_bias[1] = 32;
   13908:	80 e2       	ldi	r24, 0x20	; 32
   1390a:	90 e0       	ldi	r25, 0x00	; 0
   1390c:	80 93 2c 24 	sts	0x242C, r24
   13910:	90 93 2d 24 	sts	0x242D, r25
   gt_insDev.t_mag.as_bias[2] = -6;
   13914:	8a ef       	ldi	r24, 0xFA	; 250
   13916:	9f ef       	ldi	r25, 0xFF	; 255
   13918:	80 93 2e 24 	sts	0x242E, r24
   1391c:	90 93 2f 24 	sts	0x242F, r25

   gt_insDev.t_accel.as_R[0][0] = 23610;
   13920:	8a e3       	ldi	r24, 0x3A	; 58
   13922:	9c e5       	ldi	r25, 0x5C	; 92
   13924:	80 93 47 24 	sts	0x2447, r24
   13928:	90 93 48 24 	sts	0x2448, r25
   gt_insDev.t_accel.as_R[0][1] = 2907;
   1392c:	8b e5       	ldi	r24, 0x5B	; 91
   1392e:	9b e0       	ldi	r25, 0x0B	; 11
   13930:	80 93 49 24 	sts	0x2449, r24
   13934:	90 93 4a 24 	sts	0x244A, r25
   gt_insDev.t_accel.as_R[0][2] = 22533;
   13938:	85 e0       	ldi	r24, 0x05	; 5
   1393a:	98 e5       	ldi	r25, 0x58	; 88
   1393c:	80 93 4b 24 	sts	0x244B, r24
   13940:	90 93 4c 24 	sts	0x244C, r25
   gt_insDev.t_accel.as_R[1][0] = 22716;
   13944:	8c eb       	ldi	r24, 0xBC	; 188
   13946:	98 e5       	ldi	r25, 0x58	; 88
   13948:	80 93 4d 24 	sts	0x244D, r24
   1394c:	90 93 4e 24 	sts	0x244E, r25
   gt_insDev.t_accel.as_R[1][1] = -2416;
   13950:	80 e9       	ldi	r24, 0x90	; 144
   13952:	96 ef       	ldi	r25, 0xF6	; 246
   13954:	80 93 4f 24 	sts	0x244F, r24
   13958:	90 93 50 24 	sts	0x2450, r25
   gt_insDev.t_accel.as_R[1][2] = -23490;
   1395c:	8e e3       	ldi	r24, 0x3E	; 62
   1395e:	94 ea       	ldi	r25, 0xA4	; 164
   13960:	80 93 51 24 	sts	0x2451, r24
   13964:	90 93 52 24 	sts	0x2452, r25
   gt_insDev.t_accel.as_R[2][0] = 422;
   13968:	86 ea       	ldi	r24, 0xA6	; 166
   1396a:	91 e0       	ldi	r25, 0x01	; 1
   1396c:	80 93 53 24 	sts	0x2453, r24
   13970:	90 93 54 24 	sts	0x2454, r25
   gt_insDev.t_accel.as_R[2][1] = -32548;
   13974:	8c ed       	ldi	r24, 0xDC	; 220
   13976:	90 e8       	ldi	r25, 0x80	; 128
   13978:	80 93 55 24 	sts	0x2455, r24
   1397c:	90 93 56 24 	sts	0x2456, r25
   gt_insDev.t_accel.as_R[2][2] = 3753;
   13980:	89 ea       	ldi	r24, 0xA9	; 169
   13982:	9e e0       	ldi	r25, 0x0E	; 14
   13984:	80 93 57 24 	sts	0x2457, r24
   13988:	90 93 58 24 	sts	0x2458, r25

   gt_insDev.t_accel.as_scale[0] = 7486;
   1398c:	8e e3       	ldi	r24, 0x3E	; 62
   1398e:	9d e1       	ldi	r25, 0x1D	; 29
   13990:	80 93 59 24 	sts	0x2459, r24
   13994:	90 93 5a 24 	sts	0x245A, r25
   gt_insDev.t_accel.as_scale[1] = 8247;
   13998:	87 e3       	ldi	r24, 0x37	; 55
   1399a:	90 e2       	ldi	r25, 0x20	; 32
   1399c:	80 93 5b 24 	sts	0x245B, r24
   139a0:	90 93 5c 24 	sts	0x245C, r25
   gt_insDev.t_accel.as_scale[2] = 8551;
   139a4:	87 e6       	ldi	r24, 0x67	; 103
   139a6:	91 e2       	ldi	r25, 0x21	; 33
   139a8:	80 93 5d 24 	sts	0x245D, r24
   139ac:	90 93 5e 24 	sts	0x245E, r25

   gt_insDev.t_accel.as_bias[0] = -7;
   139b0:	89 ef       	ldi	r24, 0xF9	; 249
   139b2:	9f ef       	ldi	r25, 0xFF	; 255
   139b4:	80 93 5f 24 	sts	0x245F, r24
   139b8:	90 93 60 24 	sts	0x2460, r25
   gt_insDev.t_accel.as_bias[1] = 20;
   139bc:	84 e1       	ldi	r24, 0x14	; 20
   139be:	90 e0       	ldi	r25, 0x00	; 0
   139c0:	80 93 61 24 	sts	0x2461, r24
   139c4:	90 93 62 24 	sts	0x2462, r25
   gt_insDev.t_accel.as_bias[2] = -27;
   139c8:	85 ee       	ldi	r24, 0xE5	; 229
   139ca:	9f ef       	ldi	r25, 0xFF	; 255
   139cc:	80 93 63 24 	sts	0x2463, r24
   139d0:	90 93 64 24 	sts	0x2464, r25

   gt_insDev.t_mag.s_calMagFieldStr = INS_MAX_CAL_MAG_ENV;
   139d4:	80 e0       	ldi	r24, 0x00	; 0
   139d6:	92 e0       	ldi	r25, 0x02	; 2
   139d8:	80 93 30 24 	sts	0x2430, r24
   139dc:	90 93 31 24 	sts	0x2431, r25
   gt_insDev.t_accel.s_calGravity   = INS_MAX_CAL_GRAV_ENV;
   139e0:	80 e0       	ldi	r24, 0x00	; 0
   139e2:	91 e0       	ldi	r25, 0x01	; 1
   139e4:	80 93 65 24 	sts	0x2465, r24
   139e8:	90 93 66 24 	sts	0x2466, r25

   gt_insDev.t_mag.t_cal = INS_CAL_COMPLETE;
   139ec:	82 e0       	ldi	r24, 0x02	; 2
   139ee:	80 93 32 24 	sts	0x2432, r24
   gt_insDev.t_accel.t_cal = INS_CAL_COMPLETE;
   139f2:	82 e0       	ldi	r24, 0x02	; 2
   139f4:	80 93 67 24 	sts	0x2467, r24

   eSKalmanFilterInit();
   139f8:	0e 94 34 52 	call	0xa468	; 0xa468 <eSKalmanFilterInit>

   return ARB_PASSED;
   139fc:	80 e0       	ldi	r24, 0x00	; 0
   139fe:	13 c0       	rjmp	.+38     	; 0x13a26 <drv_insInit+0x2f6>

   hal_releaseTwiChannel( gt_insDev.t_tHandle);

failed4:

   arb_semaphoreDestroy( gt_insDev.t_rxBlockingSem);
   13a00:	80 91 f9 23 	lds	r24, 0x23F9
   13a04:	90 91 fa 23 	lds	r25, 0x23FA
   13a08:	0e 94 f8 cd 	call	0x19bf0	; 0x19bf0 <arb_semaphoreDestroy>

failed3:

   arb_semaphoreDestroy( gt_insDev.t_mutex);
   13a0c:	80 91 f7 23 	lds	r24, 0x23F7
   13a10:	90 91 f8 23 	lds	r25, 0x23F8
   13a14:	0e 94 f8 cd 	call	0x19bf0	; 0x19bf0 <arb_semaphoreDestroy>

failed2:

   arb_destroyDevice( "insDevice0");
   13a18:	80 e5       	ldi	r24, 0x50	; 80
   13a1a:	90 e2       	ldi	r25, 0x20	; 32
   13a1c:	0e 94 b4 bf 	call	0x17f68	; 0x17f68 <arb_destroyDevice>
   13a20:	01 c0       	rjmp	.+2      	; 0x13a24 <drv_insInit+0x2f4>
                               arb_createDevId( INS_MAJOR_NUMBER, 0),
                               &gt_insDevOps);

   if( t_err < 0)
   {
      goto failed1;
   13a22:	00 00       	nop

   arb_destroyDevice( "insDevice0");

failed1:

   return t_err;
   13a24:	89 81       	ldd	r24, Y+1	; 0x01

}/*End drv_insInit*/
   13a26:	2b 96       	adiw	r28, 0x0b	; 11
   13a28:	cd bf       	out	0x3d, r28	; 61
   13a2a:	de bf       	out	0x3e, r29	; 62
   13a2c:	df 91       	pop	r29
   13a2e:	cf 91       	pop	r28
   13a30:	1f 91       	pop	r17
   13a32:	0f 91       	pop	r16
   13a34:	08 95       	ret

00013a36 <signalClose>:

/*---------------------------------------------------------------------------*
 * Remove this particular file attached to this device
 *---------------------------------------------------------------------------*/
t_error signalClose( t_DEVHANDLE t_devHandle)
{
   13a36:	cf 93       	push	r28
   13a38:	df 93       	push	r29
   13a3a:	0f 92       	push	r0
   13a3c:	0f 92       	push	r0
   13a3e:	cd b7       	in	r28, 0x3d	; 61
   13a40:	de b7       	in	r29, 0x3e	; 62
   13a42:	89 83       	std	Y+1, r24	; 0x01
   13a44:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
   13a46:	80 91 74 2b 	lds	r24, 0x2B74
   13a4a:	90 91 75 2b 	lds	r25, 0x2B75
   13a4e:	60 e0       	ldi	r22, 0x00	; 0
   13a50:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   gt_signalDev.c_numUsers--;
   13a54:	80 91 7b 2b 	lds	r24, 0x2B7B
   13a58:	81 50       	subi	r24, 0x01	; 1
   13a5a:	80 93 7b 2b 	sts	0x2B7B, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
   13a5e:	80 91 74 2b 	lds	r24, 0x2B74
   13a62:	90 91 75 2b 	lds	r25, 0x2B75
   13a66:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return ARB_PASSED;

}/*End signalClose*/
   13a6a:	80 e0       	ldi	r24, 0x00	; 0
   13a6c:	0f 90       	pop	r0
   13a6e:	0f 90       	pop	r0
   13a70:	df 91       	pop	r29
   13a72:	cf 91       	pop	r28
   13a74:	08 95       	ret

00013a76 <signalIoctl>:
}/*End signalOpen*/

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   13a76:	cf 92       	push	r12
   13a78:	df 92       	push	r13
   13a7a:	ef 92       	push	r14
   13a7c:	ff 92       	push	r15
   13a7e:	1f 93       	push	r17
   13a80:	cf 93       	push	r28
   13a82:	df 93       	push	r29
   13a84:	0f 92       	push	r0
   13a86:	0f 92       	push	r0
   13a88:	cd b7       	in	r28, 0x3d	; 61
   13a8a:	de b7       	in	r29, 0x3e	; 62
   13a8c:	89 83       	std	Y+1, r24	; 0x01
   13a8e:	9a 83       	std	Y+2, r25	; 0x02
   13a90:	16 2f       	mov	r17, r22
   int32_t i_return = (int32_t)ARB_PASSED;

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
   13a92:	80 91 74 2b 	lds	r24, 0x2B74
   13a96:	90 91 75 2b 	lds	r25, 0x2B75
   13a9a:	60 e0       	ldi	r22, 0x00	; 0
   13a9c:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   switch( (t_signalCmd)s_command)
   13aa0:	15 30       	cpi	r17, 0x05	; 5
   13aa2:	09 f4       	brne	.+2      	; 0x13aa6 <signalIoctl+0x30>
   13aa4:	ea c3       	rjmp	.+2004   	; 0x1427a <signalIoctl+0x804>
   13aa6:	16 30       	cpi	r17, 0x06	; 6
   13aa8:	a0 f4       	brcc	.+40     	; 0x13ad2 <signalIoctl+0x5c>
   13aaa:	12 30       	cpi	r17, 0x02	; 2
   13aac:	09 f4       	brne	.+2      	; 0x13ab0 <signalIoctl+0x3a>
   13aae:	bd c1       	rjmp	.+890    	; 0x13e2a <signalIoctl+0x3b4>
   13ab0:	13 30       	cpi	r17, 0x03	; 3
   13ab2:	38 f4       	brcc	.+14     	; 0x13ac2 <signalIoctl+0x4c>
   13ab4:	11 23       	and	r17, r17
   13ab6:	31 f1       	breq	.+76     	; 0x13b04 <signalIoctl+0x8e>
   13ab8:	11 30       	cpi	r17, 0x01	; 1
   13aba:	11 f0       	breq	.+4      	; 0x13ac0 <signalIoctl+0x4a>
   13abc:	0c 94 0d a6 	jmp	0x14c1a	; 0x14c1a <signalIoctl+0x11a4>
   13ac0:	ed c0       	rjmp	.+474    	; 0x13c9c <signalIoctl+0x226>
   13ac2:	13 30       	cpi	r17, 0x03	; 3
   13ac4:	09 f4       	brne	.+2      	; 0x13ac8 <signalIoctl+0x52>
   13ac6:	6d c2       	rjmp	.+1242   	; 0x13fa2 <signalIoctl+0x52c>
   13ac8:	14 30       	cpi	r17, 0x04	; 4
   13aca:	11 f0       	breq	.+4      	; 0x13ad0 <signalIoctl+0x5a>
   13acc:	0c 94 0d a6 	jmp	0x14c1a	; 0x14c1a <signalIoctl+0x11a4>
   13ad0:	24 c3       	rjmp	.+1608   	; 0x1411a <signalIoctl+0x6a4>
   13ad2:	18 30       	cpi	r17, 0x08	; 8
   13ad4:	09 f4       	brne	.+2      	; 0x13ad8 <signalIoctl+0x62>
   13ad6:	e1 c5       	rjmp	.+3010   	; 0x1469a <signalIoctl+0xc24>
   13ad8:	19 30       	cpi	r17, 0x09	; 9
   13ada:	40 f4       	brcc	.+16     	; 0x13aec <signalIoctl+0x76>
   13adc:	16 30       	cpi	r17, 0x06	; 6
   13ade:	09 f4       	brne	.+2      	; 0x13ae2 <signalIoctl+0x6c>
   13ae0:	7c c4       	rjmp	.+2296   	; 0x143da <signalIoctl+0x964>
   13ae2:	17 30       	cpi	r17, 0x07	; 7
   13ae4:	11 f0       	breq	.+4      	; 0x13aea <signalIoctl+0x74>
   13ae6:	0c 94 0d a6 	jmp	0x14c1a	; 0x14c1a <signalIoctl+0x11a4>
   13aea:	27 c5       	rjmp	.+2638   	; 0x1453a <signalIoctl+0xac4>
   13aec:	1a 30       	cpi	r17, 0x0A	; 10
   13aee:	09 f4       	brne	.+2      	; 0x13af2 <signalIoctl+0x7c>
   13af0:	34 c7       	rjmp	.+3688   	; 0x1495a <signalIoctl+0xee4>
   13af2:	1a 30       	cpi	r17, 0x0A	; 10
   13af4:	08 f4       	brcc	.+2      	; 0x13af8 <signalIoctl+0x82>
   13af6:	81 c6       	rjmp	.+3330   	; 0x147fa <signalIoctl+0xd84>
   13af8:	1b 30       	cpi	r17, 0x0B	; 11
   13afa:	11 f0       	breq	.+4      	; 0x13b00 <signalIoctl+0x8a>
   13afc:	0c 94 0d a6 	jmp	0x14c1a	; 0x14c1a <signalIoctl+0x11a4>
   13b00:	0c 94 5d a5 	jmp	0x14aba	; 0x14aba <signalIoctl+0x1044>
   {
      case RED_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
   13b04:	80 91 77 2b 	lds	r24, 0x2B77
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   13b08:	90 91 76 2b 	lds	r25, 0x2B76
   13b0c:	95 30       	cpi	r25, 0x05	; 5
   13b0e:	09 f4       	brne	.+2      	; 0x13b12 <signalIoctl+0x9c>
   13b10:	71 c0       	rjmp	.+226    	; 0x13bf4 <signalIoctl+0x17e>
   13b12:	96 30       	cpi	r25, 0x06	; 6
   13b14:	a0 f4       	brcc	.+40     	; 0x13b3e <signalIoctl+0xc8>
   13b16:	92 30       	cpi	r25, 0x02	; 2
   13b18:	09 f4       	brne	.+2      	; 0x13b1c <signalIoctl+0xa6>
   13b1a:	42 c0       	rjmp	.+132    	; 0x13ba0 <signalIoctl+0x12a>
   13b1c:	93 30       	cpi	r25, 0x03	; 3
   13b1e:	38 f4       	brcc	.+14     	; 0x13b2e <signalIoctl+0xb8>
   13b20:	99 23       	and	r25, r25
   13b22:	11 f1       	breq	.+68     	; 0x13b68 <signalIoctl+0xf2>
   13b24:	91 30       	cpi	r25, 0x01	; 1
   13b26:	11 f0       	breq	.+4      	; 0x13b2c <signalIoctl+0xb6>
   13b28:	0c 94 16 a6 	jmp	0x14c2c	; 0x14c2c <signalIoctl+0x11b6>
   13b2c:	2b c0       	rjmp	.+86     	; 0x13b84 <signalIoctl+0x10e>
   13b2e:	93 30       	cpi	r25, 0x03	; 3
   13b30:	09 f4       	brne	.+2      	; 0x13b34 <signalIoctl+0xbe>
   13b32:	44 c0       	rjmp	.+136    	; 0x13bbc <signalIoctl+0x146>
   13b34:	94 30       	cpi	r25, 0x04	; 4
   13b36:	11 f0       	breq	.+4      	; 0x13b3c <signalIoctl+0xc6>
   13b38:	0c 94 16 a6 	jmp	0x14c2c	; 0x14c2c <signalIoctl+0x11b6>
   13b3c:	4d c0       	rjmp	.+154    	; 0x13bd8 <signalIoctl+0x162>
   13b3e:	98 30       	cpi	r25, 0x08	; 8
   13b40:	09 f4       	brne	.+2      	; 0x13b44 <signalIoctl+0xce>
   13b42:	82 c0       	rjmp	.+260    	; 0x13c48 <signalIoctl+0x1d2>
   13b44:	99 30       	cpi	r25, 0x09	; 9
   13b46:	40 f4       	brcc	.+16     	; 0x13b58 <signalIoctl+0xe2>
   13b48:	96 30       	cpi	r25, 0x06	; 6
   13b4a:	09 f4       	brne	.+2      	; 0x13b4e <signalIoctl+0xd8>
   13b4c:	61 c0       	rjmp	.+194    	; 0x13c10 <signalIoctl+0x19a>
   13b4e:	97 30       	cpi	r25, 0x07	; 7
   13b50:	11 f0       	breq	.+4      	; 0x13b56 <signalIoctl+0xe0>
   13b52:	0c 94 16 a6 	jmp	0x14c2c	; 0x14c2c <signalIoctl+0x11b6>
   13b56:	6a c0       	rjmp	.+212    	; 0x13c2c <signalIoctl+0x1b6>
   13b58:	99 30       	cpi	r25, 0x09	; 9
   13b5a:	09 f4       	brne	.+2      	; 0x13b5e <signalIoctl+0xe8>
   13b5c:	83 c0       	rjmp	.+262    	; 0x13c64 <signalIoctl+0x1ee>
   13b5e:	9a 30       	cpi	r25, 0x0A	; 10
   13b60:	11 f0       	breq	.+4      	; 0x13b66 <signalIoctl+0xf0>
   13b62:	0c 94 16 a6 	jmp	0x14c2c	; 0x14c2c <signalIoctl+0x11b6>
   13b66:	8c c0       	rjmp	.+280    	; 0x13c80 <signalIoctl+0x20a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   13b68:	90 91 00 06 	lds	r25, 0x0600
   13b6c:	98 23       	and	r25, r24
   13b6e:	11 f4       	brne	.+4      	; 0x13b74 <signalIoctl+0xfe>
   13b70:	0c 94 1a a6 	jmp	0x14c34	; 0x14c34 <signalIoctl+0x11be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
   13b74:	e0 e0       	ldi	r30, 0x00	; 0
   13b76:	f6 e0       	ldi	r31, 0x06	; 6
   13b78:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   13b7a:	cc 24       	eor	r12, r12
   13b7c:	dd 24       	eor	r13, r13
   13b7e:	76 01       	movw	r14, r12
   13b80:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   13b84:	90 91 20 06 	lds	r25, 0x0620
   13b88:	98 23       	and	r25, r24
   13b8a:	11 f4       	brne	.+4      	; 0x13b90 <signalIoctl+0x11a>
   13b8c:	0c 94 1e a6 	jmp	0x14c3c	; 0x14c3c <signalIoctl+0x11c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
   13b90:	e0 e2       	ldi	r30, 0x20	; 32
   13b92:	f6 e0       	ldi	r31, 0x06	; 6
   13b94:	86 83       	std	Z+6, r24	; 0x06
   13b96:	cc 24       	eor	r12, r12
   13b98:	dd 24       	eor	r13, r13
   13b9a:	76 01       	movw	r14, r12
   13b9c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   13ba0:	90 91 40 06 	lds	r25, 0x0640
   13ba4:	98 23       	and	r25, r24
   13ba6:	11 f4       	brne	.+4      	; 0x13bac <signalIoctl+0x136>
   13ba8:	0c 94 22 a6 	jmp	0x14c44	; 0x14c44 <signalIoctl+0x11ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
   13bac:	e0 e4       	ldi	r30, 0x40	; 64
   13bae:	f6 e0       	ldi	r31, 0x06	; 6
   13bb0:	86 83       	std	Z+6, r24	; 0x06
   13bb2:	cc 24       	eor	r12, r12
   13bb4:	dd 24       	eor	r13, r13
   13bb6:	76 01       	movw	r14, r12
   13bb8:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   13bbc:	90 91 60 06 	lds	r25, 0x0660
   13bc0:	98 23       	and	r25, r24
   13bc2:	11 f4       	brne	.+4      	; 0x13bc8 <signalIoctl+0x152>
   13bc4:	0c 94 26 a6 	jmp	0x14c4c	; 0x14c4c <signalIoctl+0x11d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
   13bc8:	e0 e6       	ldi	r30, 0x60	; 96
   13bca:	f6 e0       	ldi	r31, 0x06	; 6
   13bcc:	86 83       	std	Z+6, r24	; 0x06
   13bce:	cc 24       	eor	r12, r12
   13bd0:	dd 24       	eor	r13, r13
   13bd2:	76 01       	movw	r14, r12
   13bd4:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   13bd8:	90 91 80 06 	lds	r25, 0x0680
   13bdc:	98 23       	and	r25, r24
   13bde:	11 f4       	brne	.+4      	; 0x13be4 <signalIoctl+0x16e>
   13be0:	0c 94 2a a6 	jmp	0x14c54	; 0x14c54 <signalIoctl+0x11de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
   13be4:	e0 e8       	ldi	r30, 0x80	; 128
   13be6:	f6 e0       	ldi	r31, 0x06	; 6
   13be8:	86 83       	std	Z+6, r24	; 0x06
   13bea:	cc 24       	eor	r12, r12
   13bec:	dd 24       	eor	r13, r13
   13bee:	76 01       	movw	r14, r12
   13bf0:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   13bf4:	90 91 a0 06 	lds	r25, 0x06A0
   13bf8:	98 23       	and	r25, r24
   13bfa:	11 f4       	brne	.+4      	; 0x13c00 <signalIoctl+0x18a>
   13bfc:	0c 94 2e a6 	jmp	0x14c5c	; 0x14c5c <signalIoctl+0x11e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
   13c00:	e0 ea       	ldi	r30, 0xA0	; 160
   13c02:	f6 e0       	ldi	r31, 0x06	; 6
   13c04:	86 83       	std	Z+6, r24	; 0x06
   13c06:	cc 24       	eor	r12, r12
   13c08:	dd 24       	eor	r13, r13
   13c0a:	76 01       	movw	r14, r12
   13c0c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   13c10:	90 91 e0 06 	lds	r25, 0x06E0
   13c14:	98 23       	and	r25, r24
   13c16:	11 f4       	brne	.+4      	; 0x13c1c <signalIoctl+0x1a6>
   13c18:	0c 94 32 a6 	jmp	0x14c64	; 0x14c64 <signalIoctl+0x11ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
   13c1c:	e0 ee       	ldi	r30, 0xE0	; 224
   13c1e:	f6 e0       	ldi	r31, 0x06	; 6
   13c20:	86 83       	std	Z+6, r24	; 0x06
   13c22:	cc 24       	eor	r12, r12
   13c24:	dd 24       	eor	r13, r13
   13c26:	76 01       	movw	r14, r12
   13c28:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   13c2c:	90 91 00 07 	lds	r25, 0x0700
   13c30:	98 23       	and	r25, r24
   13c32:	11 f4       	brne	.+4      	; 0x13c38 <signalIoctl+0x1c2>
   13c34:	0c 94 36 a6 	jmp	0x14c6c	; 0x14c6c <signalIoctl+0x11f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
   13c38:	e0 e0       	ldi	r30, 0x00	; 0
   13c3a:	f7 e0       	ldi	r31, 0x07	; 7
   13c3c:	86 83       	std	Z+6, r24	; 0x06
   13c3e:	cc 24       	eor	r12, r12
   13c40:	dd 24       	eor	r13, r13
   13c42:	76 01       	movw	r14, r12
   13c44:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   13c48:	90 91 20 07 	lds	r25, 0x0720
   13c4c:	98 23       	and	r25, r24
   13c4e:	11 f4       	brne	.+4      	; 0x13c54 <signalIoctl+0x1de>
   13c50:	0c 94 3a a6 	jmp	0x14c74	; 0x14c74 <signalIoctl+0x11fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
   13c54:	e0 e2       	ldi	r30, 0x20	; 32
   13c56:	f7 e0       	ldi	r31, 0x07	; 7
   13c58:	86 83       	std	Z+6, r24	; 0x06
   13c5a:	cc 24       	eor	r12, r12
   13c5c:	dd 24       	eor	r13, r13
   13c5e:	76 01       	movw	r14, r12
   13c60:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   13c64:	90 91 c0 07 	lds	r25, 0x07C0
   13c68:	98 23       	and	r25, r24
   13c6a:	11 f4       	brne	.+4      	; 0x13c70 <signalIoctl+0x1fa>
   13c6c:	0c 94 3e a6 	jmp	0x14c7c	; 0x14c7c <signalIoctl+0x1206>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
   13c70:	e0 ec       	ldi	r30, 0xC0	; 192
   13c72:	f7 e0       	ldi	r31, 0x07	; 7
   13c74:	86 83       	std	Z+6, r24	; 0x06
   13c76:	cc 24       	eor	r12, r12
   13c78:	dd 24       	eor	r13, r13
   13c7a:	76 01       	movw	r14, r12
   13c7c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   13c80:	90 91 e0 07 	lds	r25, 0x07E0
   13c84:	98 23       	and	r25, r24
   13c86:	11 f4       	brne	.+4      	; 0x13c8c <signalIoctl+0x216>
   13c88:	0c 94 42 a6 	jmp	0x14c84	; 0x14c84 <signalIoctl+0x120e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
   13c8c:	e0 ee       	ldi	r30, 0xE0	; 224
   13c8e:	f7 e0       	ldi	r31, 0x07	; 7
   13c90:	86 83       	std	Z+6, r24	; 0x06
   13c92:	cc 24       	eor	r12, r12
   13c94:	dd 24       	eor	r13, r13
   13c96:	76 01       	movw	r14, r12
   13c98:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>

      break;/*End case RED_LED_ON:*/

      case RED_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
   13c9c:	80 91 77 2b 	lds	r24, 0x2B77
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   13ca0:	90 91 76 2b 	lds	r25, 0x2B76
   13ca4:	95 30       	cpi	r25, 0x05	; 5
   13ca6:	09 f4       	brne	.+2      	; 0x13caa <signalIoctl+0x234>
   13ca8:	71 c0       	rjmp	.+226    	; 0x13d8c <signalIoctl+0x316>
   13caa:	96 30       	cpi	r25, 0x06	; 6
   13cac:	a0 f4       	brcc	.+40     	; 0x13cd6 <signalIoctl+0x260>
   13cae:	92 30       	cpi	r25, 0x02	; 2
   13cb0:	09 f4       	brne	.+2      	; 0x13cb4 <signalIoctl+0x23e>
   13cb2:	42 c0       	rjmp	.+132    	; 0x13d38 <signalIoctl+0x2c2>
   13cb4:	93 30       	cpi	r25, 0x03	; 3
   13cb6:	38 f4       	brcc	.+14     	; 0x13cc6 <signalIoctl+0x250>
   13cb8:	99 23       	and	r25, r25
   13cba:	11 f1       	breq	.+68     	; 0x13d00 <signalIoctl+0x28a>
   13cbc:	91 30       	cpi	r25, 0x01	; 1
   13cbe:	11 f0       	breq	.+4      	; 0x13cc4 <signalIoctl+0x24e>
   13cc0:	0c 94 46 a6 	jmp	0x14c8c	; 0x14c8c <signalIoctl+0x1216>
   13cc4:	2b c0       	rjmp	.+86     	; 0x13d1c <signalIoctl+0x2a6>
   13cc6:	93 30       	cpi	r25, 0x03	; 3
   13cc8:	09 f4       	brne	.+2      	; 0x13ccc <signalIoctl+0x256>
   13cca:	44 c0       	rjmp	.+136    	; 0x13d54 <signalIoctl+0x2de>
   13ccc:	94 30       	cpi	r25, 0x04	; 4
   13cce:	11 f0       	breq	.+4      	; 0x13cd4 <signalIoctl+0x25e>
   13cd0:	0c 94 46 a6 	jmp	0x14c8c	; 0x14c8c <signalIoctl+0x1216>
   13cd4:	4d c0       	rjmp	.+154    	; 0x13d70 <signalIoctl+0x2fa>
   13cd6:	98 30       	cpi	r25, 0x08	; 8
   13cd8:	09 f4       	brne	.+2      	; 0x13cdc <signalIoctl+0x266>
   13cda:	80 c0       	rjmp	.+256    	; 0x13ddc <signalIoctl+0x366>
   13cdc:	99 30       	cpi	r25, 0x09	; 9
   13cde:	40 f4       	brcc	.+16     	; 0x13cf0 <signalIoctl+0x27a>
   13ce0:	96 30       	cpi	r25, 0x06	; 6
   13ce2:	09 f4       	brne	.+2      	; 0x13ce6 <signalIoctl+0x270>
   13ce4:	61 c0       	rjmp	.+194    	; 0x13da8 <signalIoctl+0x332>
   13ce6:	97 30       	cpi	r25, 0x07	; 7
   13ce8:	11 f0       	breq	.+4      	; 0x13cee <signalIoctl+0x278>
   13cea:	0c 94 46 a6 	jmp	0x14c8c	; 0x14c8c <signalIoctl+0x1216>
   13cee:	69 c0       	rjmp	.+210    	; 0x13dc2 <signalIoctl+0x34c>
   13cf0:	99 30       	cpi	r25, 0x09	; 9
   13cf2:	09 f4       	brne	.+2      	; 0x13cf6 <signalIoctl+0x280>
   13cf4:	80 c0       	rjmp	.+256    	; 0x13df6 <signalIoctl+0x380>
   13cf6:	9a 30       	cpi	r25, 0x0A	; 10
   13cf8:	11 f0       	breq	.+4      	; 0x13cfe <signalIoctl+0x288>
   13cfa:	0c 94 46 a6 	jmp	0x14c8c	; 0x14c8c <signalIoctl+0x1216>
   13cfe:	88 c0       	rjmp	.+272    	; 0x13e10 <signalIoctl+0x39a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   13d00:	90 91 00 06 	lds	r25, 0x0600
   13d04:	98 23       	and	r25, r24
   13d06:	11 f4       	brne	.+4      	; 0x13d0c <signalIoctl+0x296>
   13d08:	0c 94 4a a6 	jmp	0x14c94	; 0x14c94 <signalIoctl+0x121e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
   13d0c:	e0 e0       	ldi	r30, 0x00	; 0
   13d0e:	f6 e0       	ldi	r31, 0x06	; 6
   13d10:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   13d12:	cc 24       	eor	r12, r12
   13d14:	dd 24       	eor	r13, r13
   13d16:	76 01       	movw	r14, r12
   13d18:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   13d1c:	90 91 20 06 	lds	r25, 0x0620
   13d20:	98 23       	and	r25, r24
   13d22:	11 f4       	brne	.+4      	; 0x13d28 <signalIoctl+0x2b2>
   13d24:	0c 94 4e a6 	jmp	0x14c9c	; 0x14c9c <signalIoctl+0x1226>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
   13d28:	e0 e2       	ldi	r30, 0x20	; 32
   13d2a:	f6 e0       	ldi	r31, 0x06	; 6
   13d2c:	85 83       	std	Z+5, r24	; 0x05
   13d2e:	cc 24       	eor	r12, r12
   13d30:	dd 24       	eor	r13, r13
   13d32:	76 01       	movw	r14, r12
   13d34:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   13d38:	90 91 40 06 	lds	r25, 0x0640
   13d3c:	98 23       	and	r25, r24
   13d3e:	11 f4       	brne	.+4      	; 0x13d44 <signalIoctl+0x2ce>
   13d40:	0c 94 52 a6 	jmp	0x14ca4	; 0x14ca4 <signalIoctl+0x122e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
   13d44:	e0 e4       	ldi	r30, 0x40	; 64
   13d46:	f6 e0       	ldi	r31, 0x06	; 6
   13d48:	85 83       	std	Z+5, r24	; 0x05
   13d4a:	cc 24       	eor	r12, r12
   13d4c:	dd 24       	eor	r13, r13
   13d4e:	76 01       	movw	r14, r12
   13d50:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   13d54:	90 91 60 06 	lds	r25, 0x0660
   13d58:	98 23       	and	r25, r24
   13d5a:	11 f4       	brne	.+4      	; 0x13d60 <signalIoctl+0x2ea>
   13d5c:	0c 94 56 a6 	jmp	0x14cac	; 0x14cac <signalIoctl+0x1236>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
   13d60:	e0 e6       	ldi	r30, 0x60	; 96
   13d62:	f6 e0       	ldi	r31, 0x06	; 6
   13d64:	85 83       	std	Z+5, r24	; 0x05
   13d66:	cc 24       	eor	r12, r12
   13d68:	dd 24       	eor	r13, r13
   13d6a:	76 01       	movw	r14, r12
   13d6c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   13d70:	90 91 80 06 	lds	r25, 0x0680
   13d74:	98 23       	and	r25, r24
   13d76:	11 f4       	brne	.+4      	; 0x13d7c <signalIoctl+0x306>
   13d78:	0c 94 5a a6 	jmp	0x14cb4	; 0x14cb4 <signalIoctl+0x123e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
   13d7c:	e0 e8       	ldi	r30, 0x80	; 128
   13d7e:	f6 e0       	ldi	r31, 0x06	; 6
   13d80:	85 83       	std	Z+5, r24	; 0x05
   13d82:	cc 24       	eor	r12, r12
   13d84:	dd 24       	eor	r13, r13
   13d86:	76 01       	movw	r14, r12
   13d88:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   13d8c:	90 91 a0 06 	lds	r25, 0x06A0
   13d90:	98 23       	and	r25, r24
   13d92:	11 f4       	brne	.+4      	; 0x13d98 <signalIoctl+0x322>
   13d94:	0c 94 5e a6 	jmp	0x14cbc	; 0x14cbc <signalIoctl+0x1246>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
   13d98:	e0 ea       	ldi	r30, 0xA0	; 160
   13d9a:	f6 e0       	ldi	r31, 0x06	; 6
   13d9c:	85 83       	std	Z+5, r24	; 0x05
   13d9e:	cc 24       	eor	r12, r12
   13da0:	dd 24       	eor	r13, r13
   13da2:	76 01       	movw	r14, r12
   13da4:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   13da8:	90 91 e0 06 	lds	r25, 0x06E0
   13dac:	98 23       	and	r25, r24
   13dae:	09 f4       	brne	.+2      	; 0x13db2 <signalIoctl+0x33c>
   13db0:	89 c7       	rjmp	.+3858   	; 0x14cc4 <signalIoctl+0x124e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
   13db2:	e0 ee       	ldi	r30, 0xE0	; 224
   13db4:	f6 e0       	ldi	r31, 0x06	; 6
   13db6:	85 83       	std	Z+5, r24	; 0x05
   13db8:	cc 24       	eor	r12, r12
   13dba:	dd 24       	eor	r13, r13
   13dbc:	76 01       	movw	r14, r12
   13dbe:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   13dc2:	90 91 00 07 	lds	r25, 0x0700
   13dc6:	98 23       	and	r25, r24
   13dc8:	09 f4       	brne	.+2      	; 0x13dcc <signalIoctl+0x356>
   13dca:	80 c7       	rjmp	.+3840   	; 0x14ccc <signalIoctl+0x1256>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
   13dcc:	e0 e0       	ldi	r30, 0x00	; 0
   13dce:	f7 e0       	ldi	r31, 0x07	; 7
   13dd0:	85 83       	std	Z+5, r24	; 0x05
   13dd2:	cc 24       	eor	r12, r12
   13dd4:	dd 24       	eor	r13, r13
   13dd6:	76 01       	movw	r14, r12
   13dd8:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   13ddc:	90 91 20 07 	lds	r25, 0x0720
   13de0:	98 23       	and	r25, r24
   13de2:	09 f4       	brne	.+2      	; 0x13de6 <signalIoctl+0x370>
   13de4:	77 c7       	rjmp	.+3822   	; 0x14cd4 <signalIoctl+0x125e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
   13de6:	e0 e2       	ldi	r30, 0x20	; 32
   13de8:	f7 e0       	ldi	r31, 0x07	; 7
   13dea:	85 83       	std	Z+5, r24	; 0x05
   13dec:	cc 24       	eor	r12, r12
   13dee:	dd 24       	eor	r13, r13
   13df0:	76 01       	movw	r14, r12
   13df2:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   13df6:	90 91 c0 07 	lds	r25, 0x07C0
   13dfa:	98 23       	and	r25, r24
   13dfc:	09 f4       	brne	.+2      	; 0x13e00 <signalIoctl+0x38a>
   13dfe:	6e c7       	rjmp	.+3804   	; 0x14cdc <signalIoctl+0x1266>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
   13e00:	e0 ec       	ldi	r30, 0xC0	; 192
   13e02:	f7 e0       	ldi	r31, 0x07	; 7
   13e04:	85 83       	std	Z+5, r24	; 0x05
   13e06:	cc 24       	eor	r12, r12
   13e08:	dd 24       	eor	r13, r13
   13e0a:	76 01       	movw	r14, r12
   13e0c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   13e10:	90 91 e0 07 	lds	r25, 0x07E0
   13e14:	98 23       	and	r25, r24
   13e16:	09 f4       	brne	.+2      	; 0x13e1a <signalIoctl+0x3a4>
   13e18:	65 c7       	rjmp	.+3786   	; 0x14ce4 <signalIoctl+0x126e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
   13e1a:	e0 ee       	ldi	r30, 0xE0	; 224
   13e1c:	f7 e0       	ldi	r31, 0x07	; 7
   13e1e:	85 83       	std	Z+5, r24	; 0x05
   13e20:	cc 24       	eor	r12, r12
   13e22:	dd 24       	eor	r13, r13
   13e24:	76 01       	movw	r14, r12
   13e26:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>

      break;/*End case RED_LED_OFF:*/

      case RED_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
   13e2a:	80 91 77 2b 	lds	r24, 0x2B77
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   13e2e:	90 91 76 2b 	lds	r25, 0x2B76
   13e32:	95 30       	cpi	r25, 0x05	; 5
   13e34:	09 f4       	brne	.+2      	; 0x13e38 <signalIoctl+0x3c2>
   13e36:	67 c0       	rjmp	.+206    	; 0x13f06 <signalIoctl+0x490>
   13e38:	96 30       	cpi	r25, 0x06	; 6
   13e3a:	88 f4       	brcc	.+34     	; 0x13e5e <signalIoctl+0x3e8>
   13e3c:	92 30       	cpi	r25, 0x02	; 2
   13e3e:	e1 f1       	breq	.+120    	; 0x13eb8 <signalIoctl+0x442>
   13e40:	93 30       	cpi	r25, 0x03	; 3
   13e42:	30 f4       	brcc	.+12     	; 0x13e50 <signalIoctl+0x3da>
   13e44:	99 23       	and	r25, r25
   13e46:	f1 f0       	breq	.+60     	; 0x13e84 <signalIoctl+0x40e>
   13e48:	91 30       	cpi	r25, 0x01	; 1
   13e4a:	09 f0       	breq	.+2      	; 0x13e4e <signalIoctl+0x3d8>
   13e4c:	4f c7       	rjmp	.+3742   	; 0x14cec <signalIoctl+0x1276>
   13e4e:	27 c0       	rjmp	.+78     	; 0x13e9e <signalIoctl+0x428>
   13e50:	93 30       	cpi	r25, 0x03	; 3
   13e52:	09 f4       	brne	.+2      	; 0x13e56 <signalIoctl+0x3e0>
   13e54:	3e c0       	rjmp	.+124    	; 0x13ed2 <signalIoctl+0x45c>
   13e56:	94 30       	cpi	r25, 0x04	; 4
   13e58:	09 f0       	breq	.+2      	; 0x13e5c <signalIoctl+0x3e6>
   13e5a:	48 c7       	rjmp	.+3728   	; 0x14cec <signalIoctl+0x1276>
   13e5c:	47 c0       	rjmp	.+142    	; 0x13eec <signalIoctl+0x476>
   13e5e:	98 30       	cpi	r25, 0x08	; 8
   13e60:	09 f4       	brne	.+2      	; 0x13e64 <signalIoctl+0x3ee>
   13e62:	78 c0       	rjmp	.+240    	; 0x13f54 <signalIoctl+0x4de>
   13e64:	99 30       	cpi	r25, 0x09	; 9
   13e66:	38 f4       	brcc	.+14     	; 0x13e76 <signalIoctl+0x400>
   13e68:	96 30       	cpi	r25, 0x06	; 6
   13e6a:	09 f4       	brne	.+2      	; 0x13e6e <signalIoctl+0x3f8>
   13e6c:	59 c0       	rjmp	.+178    	; 0x13f20 <signalIoctl+0x4aa>
   13e6e:	97 30       	cpi	r25, 0x07	; 7
   13e70:	09 f0       	breq	.+2      	; 0x13e74 <signalIoctl+0x3fe>
   13e72:	3c c7       	rjmp	.+3704   	; 0x14cec <signalIoctl+0x1276>
   13e74:	62 c0       	rjmp	.+196    	; 0x13f3a <signalIoctl+0x4c4>
   13e76:	99 30       	cpi	r25, 0x09	; 9
   13e78:	09 f4       	brne	.+2      	; 0x13e7c <signalIoctl+0x406>
   13e7a:	79 c0       	rjmp	.+242    	; 0x13f6e <signalIoctl+0x4f8>
   13e7c:	9a 30       	cpi	r25, 0x0A	; 10
   13e7e:	09 f0       	breq	.+2      	; 0x13e82 <signalIoctl+0x40c>
   13e80:	35 c7       	rjmp	.+3690   	; 0x14cec <signalIoctl+0x1276>
   13e82:	82 c0       	rjmp	.+260    	; 0x13f88 <signalIoctl+0x512>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   13e84:	90 91 00 06 	lds	r25, 0x0600
   13e88:	98 23       	and	r25, r24
   13e8a:	09 f4       	brne	.+2      	; 0x13e8e <signalIoctl+0x418>
   13e8c:	33 c7       	rjmp	.+3686   	; 0x14cf4 <signalIoctl+0x127e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
   13e8e:	e0 e0       	ldi	r30, 0x00	; 0
   13e90:	f6 e0       	ldi	r31, 0x06	; 6
   13e92:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   13e94:	cc 24       	eor	r12, r12
   13e96:	dd 24       	eor	r13, r13
   13e98:	76 01       	movw	r14, r12
   13e9a:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   13e9e:	90 91 20 06 	lds	r25, 0x0620
   13ea2:	98 23       	and	r25, r24
   13ea4:	09 f4       	brne	.+2      	; 0x13ea8 <signalIoctl+0x432>
   13ea6:	2a c7       	rjmp	.+3668   	; 0x14cfc <signalIoctl+0x1286>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
   13ea8:	e0 e2       	ldi	r30, 0x20	; 32
   13eaa:	f6 e0       	ldi	r31, 0x06	; 6
   13eac:	87 83       	std	Z+7, r24	; 0x07
   13eae:	cc 24       	eor	r12, r12
   13eb0:	dd 24       	eor	r13, r13
   13eb2:	76 01       	movw	r14, r12
   13eb4:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   13eb8:	90 91 40 06 	lds	r25, 0x0640
   13ebc:	98 23       	and	r25, r24
   13ebe:	09 f4       	brne	.+2      	; 0x13ec2 <signalIoctl+0x44c>
   13ec0:	21 c7       	rjmp	.+3650   	; 0x14d04 <signalIoctl+0x128e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
   13ec2:	e0 e4       	ldi	r30, 0x40	; 64
   13ec4:	f6 e0       	ldi	r31, 0x06	; 6
   13ec6:	87 83       	std	Z+7, r24	; 0x07
   13ec8:	cc 24       	eor	r12, r12
   13eca:	dd 24       	eor	r13, r13
   13ecc:	76 01       	movw	r14, r12
   13ece:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   13ed2:	90 91 60 06 	lds	r25, 0x0660
   13ed6:	98 23       	and	r25, r24
   13ed8:	09 f4       	brne	.+2      	; 0x13edc <signalIoctl+0x466>
   13eda:	18 c7       	rjmp	.+3632   	; 0x14d0c <signalIoctl+0x1296>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
   13edc:	e0 e6       	ldi	r30, 0x60	; 96
   13ede:	f6 e0       	ldi	r31, 0x06	; 6
   13ee0:	87 83       	std	Z+7, r24	; 0x07
   13ee2:	cc 24       	eor	r12, r12
   13ee4:	dd 24       	eor	r13, r13
   13ee6:	76 01       	movw	r14, r12
   13ee8:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   13eec:	90 91 80 06 	lds	r25, 0x0680
   13ef0:	98 23       	and	r25, r24
   13ef2:	09 f4       	brne	.+2      	; 0x13ef6 <signalIoctl+0x480>
   13ef4:	0f c7       	rjmp	.+3614   	; 0x14d14 <signalIoctl+0x129e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
   13ef6:	e0 e8       	ldi	r30, 0x80	; 128
   13ef8:	f6 e0       	ldi	r31, 0x06	; 6
   13efa:	87 83       	std	Z+7, r24	; 0x07
   13efc:	cc 24       	eor	r12, r12
   13efe:	dd 24       	eor	r13, r13
   13f00:	76 01       	movw	r14, r12
   13f02:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   13f06:	90 91 a0 06 	lds	r25, 0x06A0
   13f0a:	98 23       	and	r25, r24
   13f0c:	09 f4       	brne	.+2      	; 0x13f10 <signalIoctl+0x49a>
   13f0e:	06 c7       	rjmp	.+3596   	; 0x14d1c <signalIoctl+0x12a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
   13f10:	e0 ea       	ldi	r30, 0xA0	; 160
   13f12:	f6 e0       	ldi	r31, 0x06	; 6
   13f14:	87 83       	std	Z+7, r24	; 0x07
   13f16:	cc 24       	eor	r12, r12
   13f18:	dd 24       	eor	r13, r13
   13f1a:	76 01       	movw	r14, r12
   13f1c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   13f20:	90 91 e0 06 	lds	r25, 0x06E0
   13f24:	98 23       	and	r25, r24
   13f26:	09 f4       	brne	.+2      	; 0x13f2a <signalIoctl+0x4b4>
   13f28:	fd c6       	rjmp	.+3578   	; 0x14d24 <signalIoctl+0x12ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   13f2a:	e0 ee       	ldi	r30, 0xE0	; 224
   13f2c:	f6 e0       	ldi	r31, 0x06	; 6
   13f2e:	87 83       	std	Z+7, r24	; 0x07
   13f30:	cc 24       	eor	r12, r12
   13f32:	dd 24       	eor	r13, r13
   13f34:	76 01       	movw	r14, r12
   13f36:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   13f3a:	90 91 00 07 	lds	r25, 0x0700
   13f3e:	98 23       	and	r25, r24
   13f40:	09 f4       	brne	.+2      	; 0x13f44 <signalIoctl+0x4ce>
   13f42:	f4 c6       	rjmp	.+3560   	; 0x14d2c <signalIoctl+0x12b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
   13f44:	e0 e0       	ldi	r30, 0x00	; 0
   13f46:	f7 e0       	ldi	r31, 0x07	; 7
   13f48:	87 83       	std	Z+7, r24	; 0x07
   13f4a:	cc 24       	eor	r12, r12
   13f4c:	dd 24       	eor	r13, r13
   13f4e:	76 01       	movw	r14, r12
   13f50:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   13f54:	90 91 20 07 	lds	r25, 0x0720
   13f58:	98 23       	and	r25, r24
   13f5a:	09 f4       	brne	.+2      	; 0x13f5e <signalIoctl+0x4e8>
   13f5c:	eb c6       	rjmp	.+3542   	; 0x14d34 <signalIoctl+0x12be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
   13f5e:	e0 e2       	ldi	r30, 0x20	; 32
   13f60:	f7 e0       	ldi	r31, 0x07	; 7
   13f62:	87 83       	std	Z+7, r24	; 0x07
   13f64:	cc 24       	eor	r12, r12
   13f66:	dd 24       	eor	r13, r13
   13f68:	76 01       	movw	r14, r12
   13f6a:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   13f6e:	90 91 c0 07 	lds	r25, 0x07C0
   13f72:	98 23       	and	r25, r24
   13f74:	09 f4       	brne	.+2      	; 0x13f78 <signalIoctl+0x502>
   13f76:	e2 c6       	rjmp	.+3524   	; 0x14d3c <signalIoctl+0x12c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
   13f78:	e0 ec       	ldi	r30, 0xC0	; 192
   13f7a:	f7 e0       	ldi	r31, 0x07	; 7
   13f7c:	87 83       	std	Z+7, r24	; 0x07
   13f7e:	cc 24       	eor	r12, r12
   13f80:	dd 24       	eor	r13, r13
   13f82:	76 01       	movw	r14, r12
   13f84:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   13f88:	90 91 e0 07 	lds	r25, 0x07E0
   13f8c:	98 23       	and	r25, r24
   13f8e:	09 f4       	brne	.+2      	; 0x13f92 <signalIoctl+0x51c>
   13f90:	d9 c6       	rjmp	.+3506   	; 0x14d44 <signalIoctl+0x12ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
   13f92:	e0 ee       	ldi	r30, 0xE0	; 224
   13f94:	f7 e0       	ldi	r31, 0x07	; 7
   13f96:	87 83       	std	Z+7, r24	; 0x07
   13f98:	cc 24       	eor	r12, r12
   13f9a:	dd 24       	eor	r13, r13
   13f9c:	76 01       	movw	r14, r12
   13f9e:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>

      break;/*End case RED_LED_TOGGLE:*/

      case GREEN_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
   13fa2:	80 91 79 2b 	lds	r24, 0x2B79
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   13fa6:	90 91 76 2b 	lds	r25, 0x2B76
   13faa:	95 30       	cpi	r25, 0x05	; 5
   13fac:	09 f4       	brne	.+2      	; 0x13fb0 <signalIoctl+0x53a>
   13fae:	67 c0       	rjmp	.+206    	; 0x1407e <signalIoctl+0x608>
   13fb0:	96 30       	cpi	r25, 0x06	; 6
   13fb2:	88 f4       	brcc	.+34     	; 0x13fd6 <signalIoctl+0x560>
   13fb4:	92 30       	cpi	r25, 0x02	; 2
   13fb6:	e1 f1       	breq	.+120    	; 0x14030 <signalIoctl+0x5ba>
   13fb8:	93 30       	cpi	r25, 0x03	; 3
   13fba:	30 f4       	brcc	.+12     	; 0x13fc8 <signalIoctl+0x552>
   13fbc:	99 23       	and	r25, r25
   13fbe:	f1 f0       	breq	.+60     	; 0x13ffc <signalIoctl+0x586>
   13fc0:	91 30       	cpi	r25, 0x01	; 1
   13fc2:	09 f0       	breq	.+2      	; 0x13fc6 <signalIoctl+0x550>
   13fc4:	c3 c6       	rjmp	.+3462   	; 0x14d4c <signalIoctl+0x12d6>
   13fc6:	27 c0       	rjmp	.+78     	; 0x14016 <signalIoctl+0x5a0>
   13fc8:	93 30       	cpi	r25, 0x03	; 3
   13fca:	09 f4       	brne	.+2      	; 0x13fce <signalIoctl+0x558>
   13fcc:	3e c0       	rjmp	.+124    	; 0x1404a <signalIoctl+0x5d4>
   13fce:	94 30       	cpi	r25, 0x04	; 4
   13fd0:	09 f0       	breq	.+2      	; 0x13fd4 <signalIoctl+0x55e>
   13fd2:	bc c6       	rjmp	.+3448   	; 0x14d4c <signalIoctl+0x12d6>
   13fd4:	47 c0       	rjmp	.+142    	; 0x14064 <signalIoctl+0x5ee>
   13fd6:	98 30       	cpi	r25, 0x08	; 8
   13fd8:	09 f4       	brne	.+2      	; 0x13fdc <signalIoctl+0x566>
   13fda:	78 c0       	rjmp	.+240    	; 0x140cc <signalIoctl+0x656>
   13fdc:	99 30       	cpi	r25, 0x09	; 9
   13fde:	38 f4       	brcc	.+14     	; 0x13fee <signalIoctl+0x578>
   13fe0:	96 30       	cpi	r25, 0x06	; 6
   13fe2:	09 f4       	brne	.+2      	; 0x13fe6 <signalIoctl+0x570>
   13fe4:	59 c0       	rjmp	.+178    	; 0x14098 <signalIoctl+0x622>
   13fe6:	97 30       	cpi	r25, 0x07	; 7
   13fe8:	09 f0       	breq	.+2      	; 0x13fec <signalIoctl+0x576>
   13fea:	b0 c6       	rjmp	.+3424   	; 0x14d4c <signalIoctl+0x12d6>
   13fec:	62 c0       	rjmp	.+196    	; 0x140b2 <signalIoctl+0x63c>
   13fee:	99 30       	cpi	r25, 0x09	; 9
   13ff0:	09 f4       	brne	.+2      	; 0x13ff4 <signalIoctl+0x57e>
   13ff2:	79 c0       	rjmp	.+242    	; 0x140e6 <signalIoctl+0x670>
   13ff4:	9a 30       	cpi	r25, 0x0A	; 10
   13ff6:	09 f0       	breq	.+2      	; 0x13ffa <signalIoctl+0x584>
   13ff8:	a9 c6       	rjmp	.+3410   	; 0x14d4c <signalIoctl+0x12d6>
   13ffa:	82 c0       	rjmp	.+260    	; 0x14100 <signalIoctl+0x68a>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   13ffc:	90 91 00 06 	lds	r25, 0x0600
   14000:	98 23       	and	r25, r24
   14002:	09 f4       	brne	.+2      	; 0x14006 <signalIoctl+0x590>
   14004:	a7 c6       	rjmp	.+3406   	; 0x14d54 <signalIoctl+0x12de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
   14006:	e0 e0       	ldi	r30, 0x00	; 0
   14008:	f6 e0       	ldi	r31, 0x06	; 6
   1400a:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   1400c:	cc 24       	eor	r12, r12
   1400e:	dd 24       	eor	r13, r13
   14010:	76 01       	movw	r14, r12
   14012:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   14016:	90 91 20 06 	lds	r25, 0x0620
   1401a:	98 23       	and	r25, r24
   1401c:	09 f4       	brne	.+2      	; 0x14020 <signalIoctl+0x5aa>
   1401e:	9e c6       	rjmp	.+3388   	; 0x14d5c <signalIoctl+0x12e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
   14020:	e0 e2       	ldi	r30, 0x20	; 32
   14022:	f6 e0       	ldi	r31, 0x06	; 6
   14024:	86 83       	std	Z+6, r24	; 0x06
   14026:	cc 24       	eor	r12, r12
   14028:	dd 24       	eor	r13, r13
   1402a:	76 01       	movw	r14, r12
   1402c:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14030:	90 91 40 06 	lds	r25, 0x0640
   14034:	98 23       	and	r25, r24
   14036:	09 f4       	brne	.+2      	; 0x1403a <signalIoctl+0x5c4>
   14038:	95 c6       	rjmp	.+3370   	; 0x14d64 <signalIoctl+0x12ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
   1403a:	e0 e4       	ldi	r30, 0x40	; 64
   1403c:	f6 e0       	ldi	r31, 0x06	; 6
   1403e:	86 83       	std	Z+6, r24	; 0x06
   14040:	cc 24       	eor	r12, r12
   14042:	dd 24       	eor	r13, r13
   14044:	76 01       	movw	r14, r12
   14046:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1404a:	90 91 60 06 	lds	r25, 0x0660
   1404e:	98 23       	and	r25, r24
   14050:	09 f4       	brne	.+2      	; 0x14054 <signalIoctl+0x5de>
   14052:	8c c6       	rjmp	.+3352   	; 0x14d6c <signalIoctl+0x12f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
   14054:	e0 e6       	ldi	r30, 0x60	; 96
   14056:	f6 e0       	ldi	r31, 0x06	; 6
   14058:	86 83       	std	Z+6, r24	; 0x06
   1405a:	cc 24       	eor	r12, r12
   1405c:	dd 24       	eor	r13, r13
   1405e:	76 01       	movw	r14, r12
   14060:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14064:	90 91 80 06 	lds	r25, 0x0680
   14068:	98 23       	and	r25, r24
   1406a:	09 f4       	brne	.+2      	; 0x1406e <signalIoctl+0x5f8>
   1406c:	83 c6       	rjmp	.+3334   	; 0x14d74 <signalIoctl+0x12fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
   1406e:	e0 e8       	ldi	r30, 0x80	; 128
   14070:	f6 e0       	ldi	r31, 0x06	; 6
   14072:	86 83       	std	Z+6, r24	; 0x06
   14074:	cc 24       	eor	r12, r12
   14076:	dd 24       	eor	r13, r13
   14078:	76 01       	movw	r14, r12
   1407a:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   1407e:	90 91 a0 06 	lds	r25, 0x06A0
   14082:	98 23       	and	r25, r24
   14084:	09 f4       	brne	.+2      	; 0x14088 <signalIoctl+0x612>
   14086:	7a c6       	rjmp	.+3316   	; 0x14d7c <signalIoctl+0x1306>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
   14088:	e0 ea       	ldi	r30, 0xA0	; 160
   1408a:	f6 e0       	ldi	r31, 0x06	; 6
   1408c:	86 83       	std	Z+6, r24	; 0x06
   1408e:	cc 24       	eor	r12, r12
   14090:	dd 24       	eor	r13, r13
   14092:	76 01       	movw	r14, r12
   14094:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14098:	90 91 e0 06 	lds	r25, 0x06E0
   1409c:	98 23       	and	r25, r24
   1409e:	09 f4       	brne	.+2      	; 0x140a2 <signalIoctl+0x62c>
   140a0:	71 c6       	rjmp	.+3298   	; 0x14d84 <signalIoctl+0x130e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
   140a2:	e0 ee       	ldi	r30, 0xE0	; 224
   140a4:	f6 e0       	ldi	r31, 0x06	; 6
   140a6:	86 83       	std	Z+6, r24	; 0x06
   140a8:	cc 24       	eor	r12, r12
   140aa:	dd 24       	eor	r13, r13
   140ac:	76 01       	movw	r14, r12
   140ae:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   140b2:	90 91 00 07 	lds	r25, 0x0700
   140b6:	98 23       	and	r25, r24
   140b8:	09 f4       	brne	.+2      	; 0x140bc <signalIoctl+0x646>
   140ba:	68 c6       	rjmp	.+3280   	; 0x14d8c <signalIoctl+0x1316>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
   140bc:	e0 e0       	ldi	r30, 0x00	; 0
   140be:	f7 e0       	ldi	r31, 0x07	; 7
   140c0:	86 83       	std	Z+6, r24	; 0x06
   140c2:	cc 24       	eor	r12, r12
   140c4:	dd 24       	eor	r13, r13
   140c6:	76 01       	movw	r14, r12
   140c8:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   140cc:	90 91 20 07 	lds	r25, 0x0720
   140d0:	98 23       	and	r25, r24
   140d2:	09 f4       	brne	.+2      	; 0x140d6 <signalIoctl+0x660>
   140d4:	5f c6       	rjmp	.+3262   	; 0x14d94 <signalIoctl+0x131e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
   140d6:	e0 e2       	ldi	r30, 0x20	; 32
   140d8:	f7 e0       	ldi	r31, 0x07	; 7
   140da:	86 83       	std	Z+6, r24	; 0x06
   140dc:	cc 24       	eor	r12, r12
   140de:	dd 24       	eor	r13, r13
   140e0:	76 01       	movw	r14, r12
   140e2:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   140e6:	90 91 c0 07 	lds	r25, 0x07C0
   140ea:	98 23       	and	r25, r24
   140ec:	09 f4       	brne	.+2      	; 0x140f0 <signalIoctl+0x67a>
   140ee:	56 c6       	rjmp	.+3244   	; 0x14d9c <signalIoctl+0x1326>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
   140f0:	e0 ec       	ldi	r30, 0xC0	; 192
   140f2:	f7 e0       	ldi	r31, 0x07	; 7
   140f4:	86 83       	std	Z+6, r24	; 0x06
   140f6:	cc 24       	eor	r12, r12
   140f8:	dd 24       	eor	r13, r13
   140fa:	76 01       	movw	r14, r12
   140fc:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14100:	90 91 e0 07 	lds	r25, 0x07E0
   14104:	98 23       	and	r25, r24
   14106:	09 f4       	brne	.+2      	; 0x1410a <signalIoctl+0x694>
   14108:	4d c6       	rjmp	.+3226   	; 0x14da4 <signalIoctl+0x132e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
   1410a:	e0 ee       	ldi	r30, 0xE0	; 224
   1410c:	f7 e0       	ldi	r31, 0x07	; 7
   1410e:	86 83       	std	Z+6, r24	; 0x06
   14110:	cc 24       	eor	r12, r12
   14112:	dd 24       	eor	r13, r13
   14114:	76 01       	movw	r14, r12
   14116:	0c 94 55 a8 	jmp	0x150aa	; 0x150aa <signalIoctl+0x1634>

      break;/*End case GREEN_LED_ON:*/

      case GREEN_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
   1411a:	80 91 79 2b 	lds	r24, 0x2B79
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   1411e:	90 91 76 2b 	lds	r25, 0x2B76
   14122:	95 30       	cpi	r25, 0x05	; 5
   14124:	09 f4       	brne	.+2      	; 0x14128 <signalIoctl+0x6b2>
   14126:	61 c0       	rjmp	.+194    	; 0x141ea <signalIoctl+0x774>
   14128:	96 30       	cpi	r25, 0x06	; 6
   1412a:	80 f4       	brcc	.+32     	; 0x1414c <signalIoctl+0x6d6>
   1412c:	92 30       	cpi	r25, 0x02	; 2
   1412e:	c9 f1       	breq	.+114    	; 0x141a2 <signalIoctl+0x72c>
   14130:	93 30       	cpi	r25, 0x03	; 3
   14132:	30 f4       	brcc	.+12     	; 0x14140 <signalIoctl+0x6ca>
   14134:	99 23       	and	r25, r25
   14136:	e9 f0       	breq	.+58     	; 0x14172 <signalIoctl+0x6fc>
   14138:	91 30       	cpi	r25, 0x01	; 1
   1413a:	09 f0       	breq	.+2      	; 0x1413e <signalIoctl+0x6c8>
   1413c:	37 c6       	rjmp	.+3182   	; 0x14dac <signalIoctl+0x1336>
   1413e:	25 c0       	rjmp	.+74     	; 0x1418a <signalIoctl+0x714>
   14140:	93 30       	cpi	r25, 0x03	; 3
   14142:	d9 f1       	breq	.+118    	; 0x141ba <signalIoctl+0x744>
   14144:	94 30       	cpi	r25, 0x04	; 4
   14146:	09 f0       	breq	.+2      	; 0x1414a <signalIoctl+0x6d4>
   14148:	31 c6       	rjmp	.+3170   	; 0x14dac <signalIoctl+0x1336>
   1414a:	43 c0       	rjmp	.+134    	; 0x141d2 <signalIoctl+0x75c>
   1414c:	98 30       	cpi	r25, 0x08	; 8
   1414e:	09 f4       	brne	.+2      	; 0x14152 <signalIoctl+0x6dc>
   14150:	70 c0       	rjmp	.+224    	; 0x14232 <signalIoctl+0x7bc>
   14152:	99 30       	cpi	r25, 0x09	; 9
   14154:	38 f4       	brcc	.+14     	; 0x14164 <signalIoctl+0x6ee>
   14156:	96 30       	cpi	r25, 0x06	; 6
   14158:	09 f4       	brne	.+2      	; 0x1415c <signalIoctl+0x6e6>
   1415a:	53 c0       	rjmp	.+166    	; 0x14202 <signalIoctl+0x78c>
   1415c:	97 30       	cpi	r25, 0x07	; 7
   1415e:	09 f0       	breq	.+2      	; 0x14162 <signalIoctl+0x6ec>
   14160:	25 c6       	rjmp	.+3146   	; 0x14dac <signalIoctl+0x1336>
   14162:	5b c0       	rjmp	.+182    	; 0x1421a <signalIoctl+0x7a4>
   14164:	99 30       	cpi	r25, 0x09	; 9
   14166:	09 f4       	brne	.+2      	; 0x1416a <signalIoctl+0x6f4>
   14168:	70 c0       	rjmp	.+224    	; 0x1424a <signalIoctl+0x7d4>
   1416a:	9a 30       	cpi	r25, 0x0A	; 10
   1416c:	09 f0       	breq	.+2      	; 0x14170 <signalIoctl+0x6fa>
   1416e:	1e c6       	rjmp	.+3132   	; 0x14dac <signalIoctl+0x1336>
   14170:	78 c0       	rjmp	.+240    	; 0x14262 <signalIoctl+0x7ec>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   14172:	90 91 00 06 	lds	r25, 0x0600
   14176:	98 23       	and	r25, r24
   14178:	09 f4       	brne	.+2      	; 0x1417c <signalIoctl+0x706>
   1417a:	1c c6       	rjmp	.+3128   	; 0x14db4 <signalIoctl+0x133e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
   1417c:	e0 e0       	ldi	r30, 0x00	; 0
   1417e:	f6 e0       	ldi	r31, 0x06	; 6
   14180:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14182:	cc 24       	eor	r12, r12
   14184:	dd 24       	eor	r13, r13
   14186:	76 01       	movw	r14, r12
   14188:	90 c7       	rjmp	.+3872   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   1418a:	90 91 20 06 	lds	r25, 0x0620
   1418e:	98 23       	and	r25, r24
   14190:	09 f4       	brne	.+2      	; 0x14194 <signalIoctl+0x71e>
   14192:	14 c6       	rjmp	.+3112   	; 0x14dbc <signalIoctl+0x1346>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
   14194:	e0 e2       	ldi	r30, 0x20	; 32
   14196:	f6 e0       	ldi	r31, 0x06	; 6
   14198:	85 83       	std	Z+5, r24	; 0x05
   1419a:	cc 24       	eor	r12, r12
   1419c:	dd 24       	eor	r13, r13
   1419e:	76 01       	movw	r14, r12
   141a0:	84 c7       	rjmp	.+3848   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   141a2:	90 91 40 06 	lds	r25, 0x0640
   141a6:	98 23       	and	r25, r24
   141a8:	09 f4       	brne	.+2      	; 0x141ac <signalIoctl+0x736>
   141aa:	0c c6       	rjmp	.+3096   	; 0x14dc4 <signalIoctl+0x134e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
   141ac:	e0 e4       	ldi	r30, 0x40	; 64
   141ae:	f6 e0       	ldi	r31, 0x06	; 6
   141b0:	85 83       	std	Z+5, r24	; 0x05
   141b2:	cc 24       	eor	r12, r12
   141b4:	dd 24       	eor	r13, r13
   141b6:	76 01       	movw	r14, r12
   141b8:	78 c7       	rjmp	.+3824   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   141ba:	90 91 60 06 	lds	r25, 0x0660
   141be:	98 23       	and	r25, r24
   141c0:	09 f4       	brne	.+2      	; 0x141c4 <signalIoctl+0x74e>
   141c2:	04 c6       	rjmp	.+3080   	; 0x14dcc <signalIoctl+0x1356>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
   141c4:	e0 e6       	ldi	r30, 0x60	; 96
   141c6:	f6 e0       	ldi	r31, 0x06	; 6
   141c8:	85 83       	std	Z+5, r24	; 0x05
   141ca:	cc 24       	eor	r12, r12
   141cc:	dd 24       	eor	r13, r13
   141ce:	76 01       	movw	r14, r12
   141d0:	6c c7       	rjmp	.+3800   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   141d2:	90 91 80 06 	lds	r25, 0x0680
   141d6:	98 23       	and	r25, r24
   141d8:	09 f4       	brne	.+2      	; 0x141dc <signalIoctl+0x766>
   141da:	fc c5       	rjmp	.+3064   	; 0x14dd4 <signalIoctl+0x135e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
   141dc:	e0 e8       	ldi	r30, 0x80	; 128
   141de:	f6 e0       	ldi	r31, 0x06	; 6
   141e0:	85 83       	std	Z+5, r24	; 0x05
   141e2:	cc 24       	eor	r12, r12
   141e4:	dd 24       	eor	r13, r13
   141e6:	76 01       	movw	r14, r12
   141e8:	60 c7       	rjmp	.+3776   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   141ea:	90 91 a0 06 	lds	r25, 0x06A0
   141ee:	98 23       	and	r25, r24
   141f0:	09 f4       	brne	.+2      	; 0x141f4 <signalIoctl+0x77e>
   141f2:	f4 c5       	rjmp	.+3048   	; 0x14ddc <signalIoctl+0x1366>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
   141f4:	e0 ea       	ldi	r30, 0xA0	; 160
   141f6:	f6 e0       	ldi	r31, 0x06	; 6
   141f8:	85 83       	std	Z+5, r24	; 0x05
   141fa:	cc 24       	eor	r12, r12
   141fc:	dd 24       	eor	r13, r13
   141fe:	76 01       	movw	r14, r12
   14200:	54 c7       	rjmp	.+3752   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14202:	90 91 e0 06 	lds	r25, 0x06E0
   14206:	98 23       	and	r25, r24
   14208:	09 f4       	brne	.+2      	; 0x1420c <signalIoctl+0x796>
   1420a:	ec c5       	rjmp	.+3032   	; 0x14de4 <signalIoctl+0x136e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
   1420c:	e0 ee       	ldi	r30, 0xE0	; 224
   1420e:	f6 e0       	ldi	r31, 0x06	; 6
   14210:	85 83       	std	Z+5, r24	; 0x05
   14212:	cc 24       	eor	r12, r12
   14214:	dd 24       	eor	r13, r13
   14216:	76 01       	movw	r14, r12
   14218:	48 c7       	rjmp	.+3728   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   1421a:	90 91 00 07 	lds	r25, 0x0700
   1421e:	98 23       	and	r25, r24
   14220:	09 f4       	brne	.+2      	; 0x14224 <signalIoctl+0x7ae>
   14222:	e4 c5       	rjmp	.+3016   	; 0x14dec <signalIoctl+0x1376>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
   14224:	e0 e0       	ldi	r30, 0x00	; 0
   14226:	f7 e0       	ldi	r31, 0x07	; 7
   14228:	85 83       	std	Z+5, r24	; 0x05
   1422a:	cc 24       	eor	r12, r12
   1422c:	dd 24       	eor	r13, r13
   1422e:	76 01       	movw	r14, r12
   14230:	3c c7       	rjmp	.+3704   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14232:	90 91 20 07 	lds	r25, 0x0720
   14236:	98 23       	and	r25, r24
   14238:	09 f4       	brne	.+2      	; 0x1423c <signalIoctl+0x7c6>
   1423a:	dc c5       	rjmp	.+3000   	; 0x14df4 <signalIoctl+0x137e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
   1423c:	e0 e2       	ldi	r30, 0x20	; 32
   1423e:	f7 e0       	ldi	r31, 0x07	; 7
   14240:	85 83       	std	Z+5, r24	; 0x05
   14242:	cc 24       	eor	r12, r12
   14244:	dd 24       	eor	r13, r13
   14246:	76 01       	movw	r14, r12
   14248:	30 c7       	rjmp	.+3680   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   1424a:	90 91 c0 07 	lds	r25, 0x07C0
   1424e:	98 23       	and	r25, r24
   14250:	09 f4       	brne	.+2      	; 0x14254 <signalIoctl+0x7de>
   14252:	d4 c5       	rjmp	.+2984   	; 0x14dfc <signalIoctl+0x1386>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
   14254:	e0 ec       	ldi	r30, 0xC0	; 192
   14256:	f7 e0       	ldi	r31, 0x07	; 7
   14258:	85 83       	std	Z+5, r24	; 0x05
   1425a:	cc 24       	eor	r12, r12
   1425c:	dd 24       	eor	r13, r13
   1425e:	76 01       	movw	r14, r12
   14260:	24 c7       	rjmp	.+3656   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14262:	90 91 e0 07 	lds	r25, 0x07E0
   14266:	98 23       	and	r25, r24
   14268:	09 f4       	brne	.+2      	; 0x1426c <signalIoctl+0x7f6>
   1426a:	cc c5       	rjmp	.+2968   	; 0x14e04 <signalIoctl+0x138e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
   1426c:	e0 ee       	ldi	r30, 0xE0	; 224
   1426e:	f7 e0       	ldi	r31, 0x07	; 7
   14270:	85 83       	std	Z+5, r24	; 0x05
   14272:	cc 24       	eor	r12, r12
   14274:	dd 24       	eor	r13, r13
   14276:	76 01       	movw	r14, r12
   14278:	18 c7       	rjmp	.+3632   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case GREEN_LED_OFF:*/

      case GREEN_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
   1427a:	80 91 79 2b 	lds	r24, 0x2B79
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   1427e:	90 91 76 2b 	lds	r25, 0x2B76
   14282:	95 30       	cpi	r25, 0x05	; 5
   14284:	09 f4       	brne	.+2      	; 0x14288 <signalIoctl+0x812>
   14286:	61 c0       	rjmp	.+194    	; 0x1434a <signalIoctl+0x8d4>
   14288:	96 30       	cpi	r25, 0x06	; 6
   1428a:	80 f4       	brcc	.+32     	; 0x142ac <signalIoctl+0x836>
   1428c:	92 30       	cpi	r25, 0x02	; 2
   1428e:	c9 f1       	breq	.+114    	; 0x14302 <signalIoctl+0x88c>
   14290:	93 30       	cpi	r25, 0x03	; 3
   14292:	30 f4       	brcc	.+12     	; 0x142a0 <signalIoctl+0x82a>
   14294:	99 23       	and	r25, r25
   14296:	e9 f0       	breq	.+58     	; 0x142d2 <signalIoctl+0x85c>
   14298:	91 30       	cpi	r25, 0x01	; 1
   1429a:	09 f0       	breq	.+2      	; 0x1429e <signalIoctl+0x828>
   1429c:	b7 c5       	rjmp	.+2926   	; 0x14e0c <signalIoctl+0x1396>
   1429e:	25 c0       	rjmp	.+74     	; 0x142ea <signalIoctl+0x874>
   142a0:	93 30       	cpi	r25, 0x03	; 3
   142a2:	d9 f1       	breq	.+118    	; 0x1431a <signalIoctl+0x8a4>
   142a4:	94 30       	cpi	r25, 0x04	; 4
   142a6:	09 f0       	breq	.+2      	; 0x142aa <signalIoctl+0x834>
   142a8:	b1 c5       	rjmp	.+2914   	; 0x14e0c <signalIoctl+0x1396>
   142aa:	43 c0       	rjmp	.+134    	; 0x14332 <signalIoctl+0x8bc>
   142ac:	98 30       	cpi	r25, 0x08	; 8
   142ae:	09 f4       	brne	.+2      	; 0x142b2 <signalIoctl+0x83c>
   142b0:	70 c0       	rjmp	.+224    	; 0x14392 <signalIoctl+0x91c>
   142b2:	99 30       	cpi	r25, 0x09	; 9
   142b4:	38 f4       	brcc	.+14     	; 0x142c4 <signalIoctl+0x84e>
   142b6:	96 30       	cpi	r25, 0x06	; 6
   142b8:	09 f4       	brne	.+2      	; 0x142bc <signalIoctl+0x846>
   142ba:	53 c0       	rjmp	.+166    	; 0x14362 <signalIoctl+0x8ec>
   142bc:	97 30       	cpi	r25, 0x07	; 7
   142be:	09 f0       	breq	.+2      	; 0x142c2 <signalIoctl+0x84c>
   142c0:	a5 c5       	rjmp	.+2890   	; 0x14e0c <signalIoctl+0x1396>
   142c2:	5b c0       	rjmp	.+182    	; 0x1437a <signalIoctl+0x904>
   142c4:	99 30       	cpi	r25, 0x09	; 9
   142c6:	09 f4       	brne	.+2      	; 0x142ca <signalIoctl+0x854>
   142c8:	70 c0       	rjmp	.+224    	; 0x143aa <signalIoctl+0x934>
   142ca:	9a 30       	cpi	r25, 0x0A	; 10
   142cc:	09 f0       	breq	.+2      	; 0x142d0 <signalIoctl+0x85a>
   142ce:	9e c5       	rjmp	.+2876   	; 0x14e0c <signalIoctl+0x1396>
   142d0:	78 c0       	rjmp	.+240    	; 0x143c2 <signalIoctl+0x94c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   142d2:	90 91 00 06 	lds	r25, 0x0600
   142d6:	98 23       	and	r25, r24
   142d8:	09 f4       	brne	.+2      	; 0x142dc <signalIoctl+0x866>
   142da:	9c c5       	rjmp	.+2872   	; 0x14e14 <signalIoctl+0x139e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
   142dc:	e0 e0       	ldi	r30, 0x00	; 0
   142de:	f6 e0       	ldi	r31, 0x06	; 6
   142e0:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   142e2:	cc 24       	eor	r12, r12
   142e4:	dd 24       	eor	r13, r13
   142e6:	76 01       	movw	r14, r12
   142e8:	e0 c6       	rjmp	.+3520   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   142ea:	90 91 20 06 	lds	r25, 0x0620
   142ee:	98 23       	and	r25, r24
   142f0:	09 f4       	brne	.+2      	; 0x142f4 <signalIoctl+0x87e>
   142f2:	94 c5       	rjmp	.+2856   	; 0x14e1c <signalIoctl+0x13a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
   142f4:	e0 e2       	ldi	r30, 0x20	; 32
   142f6:	f6 e0       	ldi	r31, 0x06	; 6
   142f8:	87 83       	std	Z+7, r24	; 0x07
   142fa:	cc 24       	eor	r12, r12
   142fc:	dd 24       	eor	r13, r13
   142fe:	76 01       	movw	r14, r12
   14300:	d4 c6       	rjmp	.+3496   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14302:	90 91 40 06 	lds	r25, 0x0640
   14306:	98 23       	and	r25, r24
   14308:	09 f4       	brne	.+2      	; 0x1430c <signalIoctl+0x896>
   1430a:	8c c5       	rjmp	.+2840   	; 0x14e24 <signalIoctl+0x13ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
   1430c:	e0 e4       	ldi	r30, 0x40	; 64
   1430e:	f6 e0       	ldi	r31, 0x06	; 6
   14310:	87 83       	std	Z+7, r24	; 0x07
   14312:	cc 24       	eor	r12, r12
   14314:	dd 24       	eor	r13, r13
   14316:	76 01       	movw	r14, r12
   14318:	c8 c6       	rjmp	.+3472   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1431a:	90 91 60 06 	lds	r25, 0x0660
   1431e:	98 23       	and	r25, r24
   14320:	09 f4       	brne	.+2      	; 0x14324 <signalIoctl+0x8ae>
   14322:	84 c5       	rjmp	.+2824   	; 0x14e2c <signalIoctl+0x13b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
   14324:	e0 e6       	ldi	r30, 0x60	; 96
   14326:	f6 e0       	ldi	r31, 0x06	; 6
   14328:	87 83       	std	Z+7, r24	; 0x07
   1432a:	cc 24       	eor	r12, r12
   1432c:	dd 24       	eor	r13, r13
   1432e:	76 01       	movw	r14, r12
   14330:	bc c6       	rjmp	.+3448   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14332:	90 91 80 06 	lds	r25, 0x0680
   14336:	98 23       	and	r25, r24
   14338:	09 f4       	brne	.+2      	; 0x1433c <signalIoctl+0x8c6>
   1433a:	7c c5       	rjmp	.+2808   	; 0x14e34 <signalIoctl+0x13be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
   1433c:	e0 e8       	ldi	r30, 0x80	; 128
   1433e:	f6 e0       	ldi	r31, 0x06	; 6
   14340:	87 83       	std	Z+7, r24	; 0x07
   14342:	cc 24       	eor	r12, r12
   14344:	dd 24       	eor	r13, r13
   14346:	76 01       	movw	r14, r12
   14348:	b0 c6       	rjmp	.+3424   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   1434a:	90 91 a0 06 	lds	r25, 0x06A0
   1434e:	98 23       	and	r25, r24
   14350:	09 f4       	brne	.+2      	; 0x14354 <signalIoctl+0x8de>
   14352:	74 c5       	rjmp	.+2792   	; 0x14e3c <signalIoctl+0x13c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
   14354:	e0 ea       	ldi	r30, 0xA0	; 160
   14356:	f6 e0       	ldi	r31, 0x06	; 6
   14358:	87 83       	std	Z+7, r24	; 0x07
   1435a:	cc 24       	eor	r12, r12
   1435c:	dd 24       	eor	r13, r13
   1435e:	76 01       	movw	r14, r12
   14360:	a4 c6       	rjmp	.+3400   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14362:	90 91 e0 06 	lds	r25, 0x06E0
   14366:	98 23       	and	r25, r24
   14368:	09 f4       	brne	.+2      	; 0x1436c <signalIoctl+0x8f6>
   1436a:	6c c5       	rjmp	.+2776   	; 0x14e44 <signalIoctl+0x13ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   1436c:	e0 ee       	ldi	r30, 0xE0	; 224
   1436e:	f6 e0       	ldi	r31, 0x06	; 6
   14370:	87 83       	std	Z+7, r24	; 0x07
   14372:	cc 24       	eor	r12, r12
   14374:	dd 24       	eor	r13, r13
   14376:	76 01       	movw	r14, r12
   14378:	98 c6       	rjmp	.+3376   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   1437a:	90 91 00 07 	lds	r25, 0x0700
   1437e:	98 23       	and	r25, r24
   14380:	09 f4       	brne	.+2      	; 0x14384 <signalIoctl+0x90e>
   14382:	64 c5       	rjmp	.+2760   	; 0x14e4c <signalIoctl+0x13d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
   14384:	e0 e0       	ldi	r30, 0x00	; 0
   14386:	f7 e0       	ldi	r31, 0x07	; 7
   14388:	87 83       	std	Z+7, r24	; 0x07
   1438a:	cc 24       	eor	r12, r12
   1438c:	dd 24       	eor	r13, r13
   1438e:	76 01       	movw	r14, r12
   14390:	8c c6       	rjmp	.+3352   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14392:	90 91 20 07 	lds	r25, 0x0720
   14396:	98 23       	and	r25, r24
   14398:	09 f4       	brne	.+2      	; 0x1439c <signalIoctl+0x926>
   1439a:	5c c5       	rjmp	.+2744   	; 0x14e54 <signalIoctl+0x13de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
   1439c:	e0 e2       	ldi	r30, 0x20	; 32
   1439e:	f7 e0       	ldi	r31, 0x07	; 7
   143a0:	87 83       	std	Z+7, r24	; 0x07
   143a2:	cc 24       	eor	r12, r12
   143a4:	dd 24       	eor	r13, r13
   143a6:	76 01       	movw	r14, r12
   143a8:	80 c6       	rjmp	.+3328   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   143aa:	90 91 c0 07 	lds	r25, 0x07C0
   143ae:	98 23       	and	r25, r24
   143b0:	09 f4       	brne	.+2      	; 0x143b4 <signalIoctl+0x93e>
   143b2:	54 c5       	rjmp	.+2728   	; 0x14e5c <signalIoctl+0x13e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
   143b4:	e0 ec       	ldi	r30, 0xC0	; 192
   143b6:	f7 e0       	ldi	r31, 0x07	; 7
   143b8:	87 83       	std	Z+7, r24	; 0x07
   143ba:	cc 24       	eor	r12, r12
   143bc:	dd 24       	eor	r13, r13
   143be:	76 01       	movw	r14, r12
   143c0:	74 c6       	rjmp	.+3304   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   143c2:	90 91 e0 07 	lds	r25, 0x07E0
   143c6:	98 23       	and	r25, r24
   143c8:	09 f4       	brne	.+2      	; 0x143cc <signalIoctl+0x956>
   143ca:	4c c5       	rjmp	.+2712   	; 0x14e64 <signalIoctl+0x13ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
   143cc:	e0 ee       	ldi	r30, 0xE0	; 224
   143ce:	f7 e0       	ldi	r31, 0x07	; 7
   143d0:	87 83       	std	Z+7, r24	; 0x07
   143d2:	cc 24       	eor	r12, r12
   143d4:	dd 24       	eor	r13, r13
   143d6:	76 01       	movw	r14, r12
   143d8:	68 c6       	rjmp	.+3280   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case GREEN_LED_TOGGLE:*/

      case YELLOW_LED_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
   143da:	80 91 78 2b 	lds	r24, 0x2B78
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   143de:	90 91 76 2b 	lds	r25, 0x2B76
   143e2:	95 30       	cpi	r25, 0x05	; 5
   143e4:	09 f4       	brne	.+2      	; 0x143e8 <signalIoctl+0x972>
   143e6:	61 c0       	rjmp	.+194    	; 0x144aa <signalIoctl+0xa34>
   143e8:	96 30       	cpi	r25, 0x06	; 6
   143ea:	80 f4       	brcc	.+32     	; 0x1440c <signalIoctl+0x996>
   143ec:	92 30       	cpi	r25, 0x02	; 2
   143ee:	c9 f1       	breq	.+114    	; 0x14462 <signalIoctl+0x9ec>
   143f0:	93 30       	cpi	r25, 0x03	; 3
   143f2:	30 f4       	brcc	.+12     	; 0x14400 <signalIoctl+0x98a>
   143f4:	99 23       	and	r25, r25
   143f6:	e9 f0       	breq	.+58     	; 0x14432 <signalIoctl+0x9bc>
   143f8:	91 30       	cpi	r25, 0x01	; 1
   143fa:	09 f0       	breq	.+2      	; 0x143fe <signalIoctl+0x988>
   143fc:	37 c5       	rjmp	.+2670   	; 0x14e6c <signalIoctl+0x13f6>
   143fe:	25 c0       	rjmp	.+74     	; 0x1444a <signalIoctl+0x9d4>
   14400:	93 30       	cpi	r25, 0x03	; 3
   14402:	d9 f1       	breq	.+118    	; 0x1447a <signalIoctl+0xa04>
   14404:	94 30       	cpi	r25, 0x04	; 4
   14406:	09 f0       	breq	.+2      	; 0x1440a <signalIoctl+0x994>
   14408:	31 c5       	rjmp	.+2658   	; 0x14e6c <signalIoctl+0x13f6>
   1440a:	43 c0       	rjmp	.+134    	; 0x14492 <signalIoctl+0xa1c>
   1440c:	98 30       	cpi	r25, 0x08	; 8
   1440e:	09 f4       	brne	.+2      	; 0x14412 <signalIoctl+0x99c>
   14410:	70 c0       	rjmp	.+224    	; 0x144f2 <signalIoctl+0xa7c>
   14412:	99 30       	cpi	r25, 0x09	; 9
   14414:	38 f4       	brcc	.+14     	; 0x14424 <signalIoctl+0x9ae>
   14416:	96 30       	cpi	r25, 0x06	; 6
   14418:	09 f4       	brne	.+2      	; 0x1441c <signalIoctl+0x9a6>
   1441a:	53 c0       	rjmp	.+166    	; 0x144c2 <signalIoctl+0xa4c>
   1441c:	97 30       	cpi	r25, 0x07	; 7
   1441e:	09 f0       	breq	.+2      	; 0x14422 <signalIoctl+0x9ac>
   14420:	25 c5       	rjmp	.+2634   	; 0x14e6c <signalIoctl+0x13f6>
   14422:	5b c0       	rjmp	.+182    	; 0x144da <signalIoctl+0xa64>
   14424:	99 30       	cpi	r25, 0x09	; 9
   14426:	09 f4       	brne	.+2      	; 0x1442a <signalIoctl+0x9b4>
   14428:	70 c0       	rjmp	.+224    	; 0x1450a <signalIoctl+0xa94>
   1442a:	9a 30       	cpi	r25, 0x0A	; 10
   1442c:	09 f0       	breq	.+2      	; 0x14430 <signalIoctl+0x9ba>
   1442e:	1e c5       	rjmp	.+2620   	; 0x14e6c <signalIoctl+0x13f6>
   14430:	78 c0       	rjmp	.+240    	; 0x14522 <signalIoctl+0xaac>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   14432:	90 91 00 06 	lds	r25, 0x0600
   14436:	98 23       	and	r25, r24
   14438:	09 f4       	brne	.+2      	; 0x1443c <signalIoctl+0x9c6>
   1443a:	1c c5       	rjmp	.+2616   	; 0x14e74 <signalIoctl+0x13fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
   1443c:	e0 e0       	ldi	r30, 0x00	; 0
   1443e:	f6 e0       	ldi	r31, 0x06	; 6
   14440:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14442:	cc 24       	eor	r12, r12
   14444:	dd 24       	eor	r13, r13
   14446:	76 01       	movw	r14, r12
   14448:	30 c6       	rjmp	.+3168   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   1444a:	90 91 20 06 	lds	r25, 0x0620
   1444e:	98 23       	and	r25, r24
   14450:	09 f4       	brne	.+2      	; 0x14454 <signalIoctl+0x9de>
   14452:	14 c5       	rjmp	.+2600   	; 0x14e7c <signalIoctl+0x1406>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
   14454:	e0 e2       	ldi	r30, 0x20	; 32
   14456:	f6 e0       	ldi	r31, 0x06	; 6
   14458:	86 83       	std	Z+6, r24	; 0x06
   1445a:	cc 24       	eor	r12, r12
   1445c:	dd 24       	eor	r13, r13
   1445e:	76 01       	movw	r14, r12
   14460:	24 c6       	rjmp	.+3144   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14462:	90 91 40 06 	lds	r25, 0x0640
   14466:	98 23       	and	r25, r24
   14468:	09 f4       	brne	.+2      	; 0x1446c <signalIoctl+0x9f6>
   1446a:	0c c5       	rjmp	.+2584   	; 0x14e84 <signalIoctl+0x140e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
   1446c:	e0 e4       	ldi	r30, 0x40	; 64
   1446e:	f6 e0       	ldi	r31, 0x06	; 6
   14470:	86 83       	std	Z+6, r24	; 0x06
   14472:	cc 24       	eor	r12, r12
   14474:	dd 24       	eor	r13, r13
   14476:	76 01       	movw	r14, r12
   14478:	18 c6       	rjmp	.+3120   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1447a:	90 91 60 06 	lds	r25, 0x0660
   1447e:	98 23       	and	r25, r24
   14480:	09 f4       	brne	.+2      	; 0x14484 <signalIoctl+0xa0e>
   14482:	04 c5       	rjmp	.+2568   	; 0x14e8c <signalIoctl+0x1416>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
   14484:	e0 e6       	ldi	r30, 0x60	; 96
   14486:	f6 e0       	ldi	r31, 0x06	; 6
   14488:	86 83       	std	Z+6, r24	; 0x06
   1448a:	cc 24       	eor	r12, r12
   1448c:	dd 24       	eor	r13, r13
   1448e:	76 01       	movw	r14, r12
   14490:	0c c6       	rjmp	.+3096   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14492:	90 91 80 06 	lds	r25, 0x0680
   14496:	98 23       	and	r25, r24
   14498:	09 f4       	brne	.+2      	; 0x1449c <signalIoctl+0xa26>
   1449a:	fc c4       	rjmp	.+2552   	; 0x14e94 <signalIoctl+0x141e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
   1449c:	e0 e8       	ldi	r30, 0x80	; 128
   1449e:	f6 e0       	ldi	r31, 0x06	; 6
   144a0:	86 83       	std	Z+6, r24	; 0x06
   144a2:	cc 24       	eor	r12, r12
   144a4:	dd 24       	eor	r13, r13
   144a6:	76 01       	movw	r14, r12
   144a8:	00 c6       	rjmp	.+3072   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   144aa:	90 91 a0 06 	lds	r25, 0x06A0
   144ae:	98 23       	and	r25, r24
   144b0:	09 f4       	brne	.+2      	; 0x144b4 <signalIoctl+0xa3e>
   144b2:	f4 c4       	rjmp	.+2536   	; 0x14e9c <signalIoctl+0x1426>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
   144b4:	e0 ea       	ldi	r30, 0xA0	; 160
   144b6:	f6 e0       	ldi	r31, 0x06	; 6
   144b8:	86 83       	std	Z+6, r24	; 0x06
   144ba:	cc 24       	eor	r12, r12
   144bc:	dd 24       	eor	r13, r13
   144be:	76 01       	movw	r14, r12
   144c0:	f4 c5       	rjmp	.+3048   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   144c2:	90 91 e0 06 	lds	r25, 0x06E0
   144c6:	98 23       	and	r25, r24
   144c8:	09 f4       	brne	.+2      	; 0x144cc <signalIoctl+0xa56>
   144ca:	ec c4       	rjmp	.+2520   	; 0x14ea4 <signalIoctl+0x142e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
   144cc:	e0 ee       	ldi	r30, 0xE0	; 224
   144ce:	f6 e0       	ldi	r31, 0x06	; 6
   144d0:	86 83       	std	Z+6, r24	; 0x06
   144d2:	cc 24       	eor	r12, r12
   144d4:	dd 24       	eor	r13, r13
   144d6:	76 01       	movw	r14, r12
   144d8:	e8 c5       	rjmp	.+3024   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   144da:	90 91 00 07 	lds	r25, 0x0700
   144de:	98 23       	and	r25, r24
   144e0:	09 f4       	brne	.+2      	; 0x144e4 <signalIoctl+0xa6e>
   144e2:	e4 c4       	rjmp	.+2504   	; 0x14eac <signalIoctl+0x1436>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
   144e4:	e0 e0       	ldi	r30, 0x00	; 0
   144e6:	f7 e0       	ldi	r31, 0x07	; 7
   144e8:	86 83       	std	Z+6, r24	; 0x06
   144ea:	cc 24       	eor	r12, r12
   144ec:	dd 24       	eor	r13, r13
   144ee:	76 01       	movw	r14, r12
   144f0:	dc c5       	rjmp	.+3000   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   144f2:	90 91 20 07 	lds	r25, 0x0720
   144f6:	98 23       	and	r25, r24
   144f8:	09 f4       	brne	.+2      	; 0x144fc <signalIoctl+0xa86>
   144fa:	dc c4       	rjmp	.+2488   	; 0x14eb4 <signalIoctl+0x143e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
   144fc:	e0 e2       	ldi	r30, 0x20	; 32
   144fe:	f7 e0       	ldi	r31, 0x07	; 7
   14500:	86 83       	std	Z+6, r24	; 0x06
   14502:	cc 24       	eor	r12, r12
   14504:	dd 24       	eor	r13, r13
   14506:	76 01       	movw	r14, r12
   14508:	d0 c5       	rjmp	.+2976   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   1450a:	90 91 c0 07 	lds	r25, 0x07C0
   1450e:	98 23       	and	r25, r24
   14510:	09 f4       	brne	.+2      	; 0x14514 <signalIoctl+0xa9e>
   14512:	d4 c4       	rjmp	.+2472   	; 0x14ebc <signalIoctl+0x1446>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
   14514:	e0 ec       	ldi	r30, 0xC0	; 192
   14516:	f7 e0       	ldi	r31, 0x07	; 7
   14518:	86 83       	std	Z+6, r24	; 0x06
   1451a:	cc 24       	eor	r12, r12
   1451c:	dd 24       	eor	r13, r13
   1451e:	76 01       	movw	r14, r12
   14520:	c4 c5       	rjmp	.+2952   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14522:	90 91 e0 07 	lds	r25, 0x07E0
   14526:	98 23       	and	r25, r24
   14528:	09 f4       	brne	.+2      	; 0x1452c <signalIoctl+0xab6>
   1452a:	cc c4       	rjmp	.+2456   	; 0x14ec4 <signalIoctl+0x144e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
   1452c:	e0 ee       	ldi	r30, 0xE0	; 224
   1452e:	f7 e0       	ldi	r31, 0x07	; 7
   14530:	86 83       	std	Z+6, r24	; 0x06
   14532:	cc 24       	eor	r12, r12
   14534:	dd 24       	eor	r13, r13
   14536:	76 01       	movw	r14, r12
   14538:	b8 c5       	rjmp	.+2928   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_ON:*/

      case YELLOW_LED_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
   1453a:	80 91 78 2b 	lds	r24, 0x2B78
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   1453e:	90 91 76 2b 	lds	r25, 0x2B76
   14542:	95 30       	cpi	r25, 0x05	; 5
   14544:	09 f4       	brne	.+2      	; 0x14548 <signalIoctl+0xad2>
   14546:	61 c0       	rjmp	.+194    	; 0x1460a <signalIoctl+0xb94>
   14548:	96 30       	cpi	r25, 0x06	; 6
   1454a:	80 f4       	brcc	.+32     	; 0x1456c <signalIoctl+0xaf6>
   1454c:	92 30       	cpi	r25, 0x02	; 2
   1454e:	c9 f1       	breq	.+114    	; 0x145c2 <signalIoctl+0xb4c>
   14550:	93 30       	cpi	r25, 0x03	; 3
   14552:	30 f4       	brcc	.+12     	; 0x14560 <signalIoctl+0xaea>
   14554:	99 23       	and	r25, r25
   14556:	e9 f0       	breq	.+58     	; 0x14592 <signalIoctl+0xb1c>
   14558:	91 30       	cpi	r25, 0x01	; 1
   1455a:	09 f0       	breq	.+2      	; 0x1455e <signalIoctl+0xae8>
   1455c:	b7 c4       	rjmp	.+2414   	; 0x14ecc <signalIoctl+0x1456>
   1455e:	25 c0       	rjmp	.+74     	; 0x145aa <signalIoctl+0xb34>
   14560:	93 30       	cpi	r25, 0x03	; 3
   14562:	d9 f1       	breq	.+118    	; 0x145da <signalIoctl+0xb64>
   14564:	94 30       	cpi	r25, 0x04	; 4
   14566:	09 f0       	breq	.+2      	; 0x1456a <signalIoctl+0xaf4>
   14568:	b1 c4       	rjmp	.+2402   	; 0x14ecc <signalIoctl+0x1456>
   1456a:	43 c0       	rjmp	.+134    	; 0x145f2 <signalIoctl+0xb7c>
   1456c:	98 30       	cpi	r25, 0x08	; 8
   1456e:	09 f4       	brne	.+2      	; 0x14572 <signalIoctl+0xafc>
   14570:	70 c0       	rjmp	.+224    	; 0x14652 <signalIoctl+0xbdc>
   14572:	99 30       	cpi	r25, 0x09	; 9
   14574:	38 f4       	brcc	.+14     	; 0x14584 <signalIoctl+0xb0e>
   14576:	96 30       	cpi	r25, 0x06	; 6
   14578:	09 f4       	brne	.+2      	; 0x1457c <signalIoctl+0xb06>
   1457a:	53 c0       	rjmp	.+166    	; 0x14622 <signalIoctl+0xbac>
   1457c:	97 30       	cpi	r25, 0x07	; 7
   1457e:	09 f0       	breq	.+2      	; 0x14582 <signalIoctl+0xb0c>
   14580:	a5 c4       	rjmp	.+2378   	; 0x14ecc <signalIoctl+0x1456>
   14582:	5b c0       	rjmp	.+182    	; 0x1463a <signalIoctl+0xbc4>
   14584:	99 30       	cpi	r25, 0x09	; 9
   14586:	09 f4       	brne	.+2      	; 0x1458a <signalIoctl+0xb14>
   14588:	70 c0       	rjmp	.+224    	; 0x1466a <signalIoctl+0xbf4>
   1458a:	9a 30       	cpi	r25, 0x0A	; 10
   1458c:	09 f0       	breq	.+2      	; 0x14590 <signalIoctl+0xb1a>
   1458e:	9e c4       	rjmp	.+2364   	; 0x14ecc <signalIoctl+0x1456>
   14590:	78 c0       	rjmp	.+240    	; 0x14682 <signalIoctl+0xc0c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   14592:	90 91 00 06 	lds	r25, 0x0600
   14596:	98 23       	and	r25, r24
   14598:	09 f4       	brne	.+2      	; 0x1459c <signalIoctl+0xb26>
   1459a:	9c c4       	rjmp	.+2360   	; 0x14ed4 <signalIoctl+0x145e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
   1459c:	e0 e0       	ldi	r30, 0x00	; 0
   1459e:	f6 e0       	ldi	r31, 0x06	; 6
   145a0:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   145a2:	cc 24       	eor	r12, r12
   145a4:	dd 24       	eor	r13, r13
   145a6:	76 01       	movw	r14, r12
   145a8:	80 c5       	rjmp	.+2816   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   145aa:	90 91 20 06 	lds	r25, 0x0620
   145ae:	98 23       	and	r25, r24
   145b0:	09 f4       	brne	.+2      	; 0x145b4 <signalIoctl+0xb3e>
   145b2:	94 c4       	rjmp	.+2344   	; 0x14edc <signalIoctl+0x1466>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
   145b4:	e0 e2       	ldi	r30, 0x20	; 32
   145b6:	f6 e0       	ldi	r31, 0x06	; 6
   145b8:	85 83       	std	Z+5, r24	; 0x05
   145ba:	cc 24       	eor	r12, r12
   145bc:	dd 24       	eor	r13, r13
   145be:	76 01       	movw	r14, r12
   145c0:	74 c5       	rjmp	.+2792   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   145c2:	90 91 40 06 	lds	r25, 0x0640
   145c6:	98 23       	and	r25, r24
   145c8:	09 f4       	brne	.+2      	; 0x145cc <signalIoctl+0xb56>
   145ca:	8c c4       	rjmp	.+2328   	; 0x14ee4 <signalIoctl+0x146e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
   145cc:	e0 e4       	ldi	r30, 0x40	; 64
   145ce:	f6 e0       	ldi	r31, 0x06	; 6
   145d0:	85 83       	std	Z+5, r24	; 0x05
   145d2:	cc 24       	eor	r12, r12
   145d4:	dd 24       	eor	r13, r13
   145d6:	76 01       	movw	r14, r12
   145d8:	68 c5       	rjmp	.+2768   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   145da:	90 91 60 06 	lds	r25, 0x0660
   145de:	98 23       	and	r25, r24
   145e0:	09 f4       	brne	.+2      	; 0x145e4 <signalIoctl+0xb6e>
   145e2:	84 c4       	rjmp	.+2312   	; 0x14eec <signalIoctl+0x1476>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
   145e4:	e0 e6       	ldi	r30, 0x60	; 96
   145e6:	f6 e0       	ldi	r31, 0x06	; 6
   145e8:	85 83       	std	Z+5, r24	; 0x05
   145ea:	cc 24       	eor	r12, r12
   145ec:	dd 24       	eor	r13, r13
   145ee:	76 01       	movw	r14, r12
   145f0:	5c c5       	rjmp	.+2744   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   145f2:	90 91 80 06 	lds	r25, 0x0680
   145f6:	98 23       	and	r25, r24
   145f8:	09 f4       	brne	.+2      	; 0x145fc <signalIoctl+0xb86>
   145fa:	7c c4       	rjmp	.+2296   	; 0x14ef4 <signalIoctl+0x147e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
   145fc:	e0 e8       	ldi	r30, 0x80	; 128
   145fe:	f6 e0       	ldi	r31, 0x06	; 6
   14600:	85 83       	std	Z+5, r24	; 0x05
   14602:	cc 24       	eor	r12, r12
   14604:	dd 24       	eor	r13, r13
   14606:	76 01       	movw	r14, r12
   14608:	50 c5       	rjmp	.+2720   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   1460a:	90 91 a0 06 	lds	r25, 0x06A0
   1460e:	98 23       	and	r25, r24
   14610:	09 f4       	brne	.+2      	; 0x14614 <signalIoctl+0xb9e>
   14612:	74 c4       	rjmp	.+2280   	; 0x14efc <signalIoctl+0x1486>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
   14614:	e0 ea       	ldi	r30, 0xA0	; 160
   14616:	f6 e0       	ldi	r31, 0x06	; 6
   14618:	85 83       	std	Z+5, r24	; 0x05
   1461a:	cc 24       	eor	r12, r12
   1461c:	dd 24       	eor	r13, r13
   1461e:	76 01       	movw	r14, r12
   14620:	44 c5       	rjmp	.+2696   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14622:	90 91 e0 06 	lds	r25, 0x06E0
   14626:	98 23       	and	r25, r24
   14628:	09 f4       	brne	.+2      	; 0x1462c <signalIoctl+0xbb6>
   1462a:	6c c4       	rjmp	.+2264   	; 0x14f04 <signalIoctl+0x148e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
   1462c:	e0 ee       	ldi	r30, 0xE0	; 224
   1462e:	f6 e0       	ldi	r31, 0x06	; 6
   14630:	85 83       	std	Z+5, r24	; 0x05
   14632:	cc 24       	eor	r12, r12
   14634:	dd 24       	eor	r13, r13
   14636:	76 01       	movw	r14, r12
   14638:	38 c5       	rjmp	.+2672   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   1463a:	90 91 00 07 	lds	r25, 0x0700
   1463e:	98 23       	and	r25, r24
   14640:	09 f4       	brne	.+2      	; 0x14644 <signalIoctl+0xbce>
   14642:	64 c4       	rjmp	.+2248   	; 0x14f0c <signalIoctl+0x1496>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
   14644:	e0 e0       	ldi	r30, 0x00	; 0
   14646:	f7 e0       	ldi	r31, 0x07	; 7
   14648:	85 83       	std	Z+5, r24	; 0x05
   1464a:	cc 24       	eor	r12, r12
   1464c:	dd 24       	eor	r13, r13
   1464e:	76 01       	movw	r14, r12
   14650:	2c c5       	rjmp	.+2648   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14652:	90 91 20 07 	lds	r25, 0x0720
   14656:	98 23       	and	r25, r24
   14658:	09 f4       	brne	.+2      	; 0x1465c <signalIoctl+0xbe6>
   1465a:	5c c4       	rjmp	.+2232   	; 0x14f14 <signalIoctl+0x149e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
   1465c:	e0 e2       	ldi	r30, 0x20	; 32
   1465e:	f7 e0       	ldi	r31, 0x07	; 7
   14660:	85 83       	std	Z+5, r24	; 0x05
   14662:	cc 24       	eor	r12, r12
   14664:	dd 24       	eor	r13, r13
   14666:	76 01       	movw	r14, r12
   14668:	20 c5       	rjmp	.+2624   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   1466a:	90 91 c0 07 	lds	r25, 0x07C0
   1466e:	98 23       	and	r25, r24
   14670:	09 f4       	brne	.+2      	; 0x14674 <signalIoctl+0xbfe>
   14672:	54 c4       	rjmp	.+2216   	; 0x14f1c <signalIoctl+0x14a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
   14674:	e0 ec       	ldi	r30, 0xC0	; 192
   14676:	f7 e0       	ldi	r31, 0x07	; 7
   14678:	85 83       	std	Z+5, r24	; 0x05
   1467a:	cc 24       	eor	r12, r12
   1467c:	dd 24       	eor	r13, r13
   1467e:	76 01       	movw	r14, r12
   14680:	14 c5       	rjmp	.+2600   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14682:	90 91 e0 07 	lds	r25, 0x07E0
   14686:	98 23       	and	r25, r24
   14688:	09 f4       	brne	.+2      	; 0x1468c <signalIoctl+0xc16>
   1468a:	4c c4       	rjmp	.+2200   	; 0x14f24 <signalIoctl+0x14ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
   1468c:	e0 ee       	ldi	r30, 0xE0	; 224
   1468e:	f7 e0       	ldi	r31, 0x07	; 7
   14690:	85 83       	std	Z+5, r24	; 0x05
   14692:	cc 24       	eor	r12, r12
   14694:	dd 24       	eor	r13, r13
   14696:	76 01       	movw	r14, r12
   14698:	08 c5       	rjmp	.+2576   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_OFF:*/

      case YELLOW_LED_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
   1469a:	80 91 78 2b 	lds	r24, 0x2B78
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   1469e:	90 91 76 2b 	lds	r25, 0x2B76
   146a2:	95 30       	cpi	r25, 0x05	; 5
   146a4:	09 f4       	brne	.+2      	; 0x146a8 <signalIoctl+0xc32>
   146a6:	61 c0       	rjmp	.+194    	; 0x1476a <signalIoctl+0xcf4>
   146a8:	96 30       	cpi	r25, 0x06	; 6
   146aa:	80 f4       	brcc	.+32     	; 0x146cc <signalIoctl+0xc56>
   146ac:	92 30       	cpi	r25, 0x02	; 2
   146ae:	c9 f1       	breq	.+114    	; 0x14722 <signalIoctl+0xcac>
   146b0:	93 30       	cpi	r25, 0x03	; 3
   146b2:	30 f4       	brcc	.+12     	; 0x146c0 <signalIoctl+0xc4a>
   146b4:	99 23       	and	r25, r25
   146b6:	e9 f0       	breq	.+58     	; 0x146f2 <signalIoctl+0xc7c>
   146b8:	91 30       	cpi	r25, 0x01	; 1
   146ba:	09 f0       	breq	.+2      	; 0x146be <signalIoctl+0xc48>
   146bc:	37 c4       	rjmp	.+2158   	; 0x14f2c <signalIoctl+0x14b6>
   146be:	25 c0       	rjmp	.+74     	; 0x1470a <signalIoctl+0xc94>
   146c0:	93 30       	cpi	r25, 0x03	; 3
   146c2:	d9 f1       	breq	.+118    	; 0x1473a <signalIoctl+0xcc4>
   146c4:	94 30       	cpi	r25, 0x04	; 4
   146c6:	09 f0       	breq	.+2      	; 0x146ca <signalIoctl+0xc54>
   146c8:	31 c4       	rjmp	.+2146   	; 0x14f2c <signalIoctl+0x14b6>
   146ca:	43 c0       	rjmp	.+134    	; 0x14752 <signalIoctl+0xcdc>
   146cc:	98 30       	cpi	r25, 0x08	; 8
   146ce:	09 f4       	brne	.+2      	; 0x146d2 <signalIoctl+0xc5c>
   146d0:	70 c0       	rjmp	.+224    	; 0x147b2 <signalIoctl+0xd3c>
   146d2:	99 30       	cpi	r25, 0x09	; 9
   146d4:	38 f4       	brcc	.+14     	; 0x146e4 <signalIoctl+0xc6e>
   146d6:	96 30       	cpi	r25, 0x06	; 6
   146d8:	09 f4       	brne	.+2      	; 0x146dc <signalIoctl+0xc66>
   146da:	53 c0       	rjmp	.+166    	; 0x14782 <signalIoctl+0xd0c>
   146dc:	97 30       	cpi	r25, 0x07	; 7
   146de:	09 f0       	breq	.+2      	; 0x146e2 <signalIoctl+0xc6c>
   146e0:	25 c4       	rjmp	.+2122   	; 0x14f2c <signalIoctl+0x14b6>
   146e2:	5b c0       	rjmp	.+182    	; 0x1479a <signalIoctl+0xd24>
   146e4:	99 30       	cpi	r25, 0x09	; 9
   146e6:	09 f4       	brne	.+2      	; 0x146ea <signalIoctl+0xc74>
   146e8:	70 c0       	rjmp	.+224    	; 0x147ca <signalIoctl+0xd54>
   146ea:	9a 30       	cpi	r25, 0x0A	; 10
   146ec:	09 f0       	breq	.+2      	; 0x146f0 <signalIoctl+0xc7a>
   146ee:	1e c4       	rjmp	.+2108   	; 0x14f2c <signalIoctl+0x14b6>
   146f0:	78 c0       	rjmp	.+240    	; 0x147e2 <signalIoctl+0xd6c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   146f2:	90 91 00 06 	lds	r25, 0x0600
   146f6:	98 23       	and	r25, r24
   146f8:	09 f4       	brne	.+2      	; 0x146fc <signalIoctl+0xc86>
   146fa:	1c c4       	rjmp	.+2104   	; 0x14f34 <signalIoctl+0x14be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
   146fc:	e0 e0       	ldi	r30, 0x00	; 0
   146fe:	f6 e0       	ldi	r31, 0x06	; 6
   14700:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14702:	cc 24       	eor	r12, r12
   14704:	dd 24       	eor	r13, r13
   14706:	76 01       	movw	r14, r12
   14708:	d0 c4       	rjmp	.+2464   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   1470a:	90 91 20 06 	lds	r25, 0x0620
   1470e:	98 23       	and	r25, r24
   14710:	09 f4       	brne	.+2      	; 0x14714 <signalIoctl+0xc9e>
   14712:	14 c4       	rjmp	.+2088   	; 0x14f3c <signalIoctl+0x14c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
   14714:	e0 e2       	ldi	r30, 0x20	; 32
   14716:	f6 e0       	ldi	r31, 0x06	; 6
   14718:	87 83       	std	Z+7, r24	; 0x07
   1471a:	cc 24       	eor	r12, r12
   1471c:	dd 24       	eor	r13, r13
   1471e:	76 01       	movw	r14, r12
   14720:	c4 c4       	rjmp	.+2440   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14722:	90 91 40 06 	lds	r25, 0x0640
   14726:	98 23       	and	r25, r24
   14728:	09 f4       	brne	.+2      	; 0x1472c <signalIoctl+0xcb6>
   1472a:	0c c4       	rjmp	.+2072   	; 0x14f44 <signalIoctl+0x14ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
   1472c:	e0 e4       	ldi	r30, 0x40	; 64
   1472e:	f6 e0       	ldi	r31, 0x06	; 6
   14730:	87 83       	std	Z+7, r24	; 0x07
   14732:	cc 24       	eor	r12, r12
   14734:	dd 24       	eor	r13, r13
   14736:	76 01       	movw	r14, r12
   14738:	b8 c4       	rjmp	.+2416   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1473a:	90 91 60 06 	lds	r25, 0x0660
   1473e:	98 23       	and	r25, r24
   14740:	09 f4       	brne	.+2      	; 0x14744 <signalIoctl+0xcce>
   14742:	04 c4       	rjmp	.+2056   	; 0x14f4c <signalIoctl+0x14d6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
   14744:	e0 e6       	ldi	r30, 0x60	; 96
   14746:	f6 e0       	ldi	r31, 0x06	; 6
   14748:	87 83       	std	Z+7, r24	; 0x07
   1474a:	cc 24       	eor	r12, r12
   1474c:	dd 24       	eor	r13, r13
   1474e:	76 01       	movw	r14, r12
   14750:	ac c4       	rjmp	.+2392   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14752:	90 91 80 06 	lds	r25, 0x0680
   14756:	98 23       	and	r25, r24
   14758:	09 f4       	brne	.+2      	; 0x1475c <signalIoctl+0xce6>
   1475a:	fc c3       	rjmp	.+2040   	; 0x14f54 <signalIoctl+0x14de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
   1475c:	e0 e8       	ldi	r30, 0x80	; 128
   1475e:	f6 e0       	ldi	r31, 0x06	; 6
   14760:	87 83       	std	Z+7, r24	; 0x07
   14762:	cc 24       	eor	r12, r12
   14764:	dd 24       	eor	r13, r13
   14766:	76 01       	movw	r14, r12
   14768:	a0 c4       	rjmp	.+2368   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   1476a:	90 91 a0 06 	lds	r25, 0x06A0
   1476e:	98 23       	and	r25, r24
   14770:	09 f4       	brne	.+2      	; 0x14774 <signalIoctl+0xcfe>
   14772:	f4 c3       	rjmp	.+2024   	; 0x14f5c <signalIoctl+0x14e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
   14774:	e0 ea       	ldi	r30, 0xA0	; 160
   14776:	f6 e0       	ldi	r31, 0x06	; 6
   14778:	87 83       	std	Z+7, r24	; 0x07
   1477a:	cc 24       	eor	r12, r12
   1477c:	dd 24       	eor	r13, r13
   1477e:	76 01       	movw	r14, r12
   14780:	94 c4       	rjmp	.+2344   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14782:	90 91 e0 06 	lds	r25, 0x06E0
   14786:	98 23       	and	r25, r24
   14788:	09 f4       	brne	.+2      	; 0x1478c <signalIoctl+0xd16>
   1478a:	ec c3       	rjmp	.+2008   	; 0x14f64 <signalIoctl+0x14ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   1478c:	e0 ee       	ldi	r30, 0xE0	; 224
   1478e:	f6 e0       	ldi	r31, 0x06	; 6
   14790:	87 83       	std	Z+7, r24	; 0x07
   14792:	cc 24       	eor	r12, r12
   14794:	dd 24       	eor	r13, r13
   14796:	76 01       	movw	r14, r12
   14798:	88 c4       	rjmp	.+2320   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   1479a:	90 91 00 07 	lds	r25, 0x0700
   1479e:	98 23       	and	r25, r24
   147a0:	09 f4       	brne	.+2      	; 0x147a4 <signalIoctl+0xd2e>
   147a2:	e4 c3       	rjmp	.+1992   	; 0x14f6c <signalIoctl+0x14f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
   147a4:	e0 e0       	ldi	r30, 0x00	; 0
   147a6:	f7 e0       	ldi	r31, 0x07	; 7
   147a8:	87 83       	std	Z+7, r24	; 0x07
   147aa:	cc 24       	eor	r12, r12
   147ac:	dd 24       	eor	r13, r13
   147ae:	76 01       	movw	r14, r12
   147b0:	7c c4       	rjmp	.+2296   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   147b2:	90 91 20 07 	lds	r25, 0x0720
   147b6:	98 23       	and	r25, r24
   147b8:	09 f4       	brne	.+2      	; 0x147bc <signalIoctl+0xd46>
   147ba:	dc c3       	rjmp	.+1976   	; 0x14f74 <signalIoctl+0x14fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
   147bc:	e0 e2       	ldi	r30, 0x20	; 32
   147be:	f7 e0       	ldi	r31, 0x07	; 7
   147c0:	87 83       	std	Z+7, r24	; 0x07
   147c2:	cc 24       	eor	r12, r12
   147c4:	dd 24       	eor	r13, r13
   147c6:	76 01       	movw	r14, r12
   147c8:	70 c4       	rjmp	.+2272   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   147ca:	90 91 c0 07 	lds	r25, 0x07C0
   147ce:	98 23       	and	r25, r24
   147d0:	09 f4       	brne	.+2      	; 0x147d4 <signalIoctl+0xd5e>
   147d2:	d4 c3       	rjmp	.+1960   	; 0x14f7c <signalIoctl+0x1506>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
   147d4:	e0 ec       	ldi	r30, 0xC0	; 192
   147d6:	f7 e0       	ldi	r31, 0x07	; 7
   147d8:	87 83       	std	Z+7, r24	; 0x07
   147da:	cc 24       	eor	r12, r12
   147dc:	dd 24       	eor	r13, r13
   147de:	76 01       	movw	r14, r12
   147e0:	64 c4       	rjmp	.+2248   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   147e2:	90 91 e0 07 	lds	r25, 0x07E0
   147e6:	98 23       	and	r25, r24
   147e8:	09 f4       	brne	.+2      	; 0x147ec <signalIoctl+0xd76>
   147ea:	cc c3       	rjmp	.+1944   	; 0x14f84 <signalIoctl+0x150e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
   147ec:	e0 ee       	ldi	r30, 0xE0	; 224
   147ee:	f7 e0       	ldi	r31, 0x07	; 7
   147f0:	87 83       	std	Z+7, r24	; 0x07
   147f2:	cc 24       	eor	r12, r12
   147f4:	dd 24       	eor	r13, r13
   147f6:	76 01       	movw	r14, r12
   147f8:	58 c4       	rjmp	.+2224   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case YELLOW_LED_TOGGLE:*/

      case ALL_LEDS_ON:

         hal_gpioOff( gt_signalDev.c_signalPort,
   147fa:	80 91 7a 2b 	lds	r24, 0x2B7A
   t_gpioPort t_port, uint8_t    c_pin)
   {

      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   147fe:	90 91 76 2b 	lds	r25, 0x2B76
   14802:	95 30       	cpi	r25, 0x05	; 5
   14804:	09 f4       	brne	.+2      	; 0x14808 <signalIoctl+0xd92>
   14806:	61 c0       	rjmp	.+194    	; 0x148ca <signalIoctl+0xe54>
   14808:	96 30       	cpi	r25, 0x06	; 6
   1480a:	80 f4       	brcc	.+32     	; 0x1482c <signalIoctl+0xdb6>
   1480c:	92 30       	cpi	r25, 0x02	; 2
   1480e:	c9 f1       	breq	.+114    	; 0x14882 <signalIoctl+0xe0c>
   14810:	93 30       	cpi	r25, 0x03	; 3
   14812:	30 f4       	brcc	.+12     	; 0x14820 <signalIoctl+0xdaa>
   14814:	99 23       	and	r25, r25
   14816:	e9 f0       	breq	.+58     	; 0x14852 <signalIoctl+0xddc>
   14818:	91 30       	cpi	r25, 0x01	; 1
   1481a:	09 f0       	breq	.+2      	; 0x1481e <signalIoctl+0xda8>
   1481c:	b7 c3       	rjmp	.+1902   	; 0x14f8c <signalIoctl+0x1516>
   1481e:	25 c0       	rjmp	.+74     	; 0x1486a <signalIoctl+0xdf4>
   14820:	93 30       	cpi	r25, 0x03	; 3
   14822:	d9 f1       	breq	.+118    	; 0x1489a <signalIoctl+0xe24>
   14824:	94 30       	cpi	r25, 0x04	; 4
   14826:	09 f0       	breq	.+2      	; 0x1482a <signalIoctl+0xdb4>
   14828:	b1 c3       	rjmp	.+1890   	; 0x14f8c <signalIoctl+0x1516>
   1482a:	43 c0       	rjmp	.+134    	; 0x148b2 <signalIoctl+0xe3c>
   1482c:	98 30       	cpi	r25, 0x08	; 8
   1482e:	09 f4       	brne	.+2      	; 0x14832 <signalIoctl+0xdbc>
   14830:	70 c0       	rjmp	.+224    	; 0x14912 <signalIoctl+0xe9c>
   14832:	99 30       	cpi	r25, 0x09	; 9
   14834:	38 f4       	brcc	.+14     	; 0x14844 <signalIoctl+0xdce>
   14836:	96 30       	cpi	r25, 0x06	; 6
   14838:	09 f4       	brne	.+2      	; 0x1483c <signalIoctl+0xdc6>
   1483a:	53 c0       	rjmp	.+166    	; 0x148e2 <signalIoctl+0xe6c>
   1483c:	97 30       	cpi	r25, 0x07	; 7
   1483e:	09 f0       	breq	.+2      	; 0x14842 <signalIoctl+0xdcc>
   14840:	a5 c3       	rjmp	.+1866   	; 0x14f8c <signalIoctl+0x1516>
   14842:	5b c0       	rjmp	.+182    	; 0x148fa <signalIoctl+0xe84>
   14844:	99 30       	cpi	r25, 0x09	; 9
   14846:	09 f4       	brne	.+2      	; 0x1484a <signalIoctl+0xdd4>
   14848:	70 c0       	rjmp	.+224    	; 0x1492a <signalIoctl+0xeb4>
   1484a:	9a 30       	cpi	r25, 0x0A	; 10
   1484c:	09 f0       	breq	.+2      	; 0x14850 <signalIoctl+0xdda>
   1484e:	9e c3       	rjmp	.+1852   	; 0x14f8c <signalIoctl+0x1516>
   14850:	78 c0       	rjmp	.+240    	; 0x14942 <signalIoctl+0xecc>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   14852:	90 91 00 06 	lds	r25, 0x0600
   14856:	98 23       	and	r25, r24
   14858:	09 f4       	brne	.+2      	; 0x1485c <signalIoctl+0xde6>
   1485a:	9c c3       	rjmp	.+1848   	; 0x14f94 <signalIoctl+0x151e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTCLR = c_pin;
   1485c:	e0 e0       	ldi	r30, 0x00	; 0
   1485e:	f6 e0       	ldi	r31, 0x06	; 6
   14860:	86 83       	std	Z+6, r24	; 0x06

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14862:	cc 24       	eor	r12, r12
   14864:	dd 24       	eor	r13, r13
   14866:	76 01       	movw	r14, r12
   14868:	20 c4       	rjmp	.+2112   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   1486a:	90 91 20 06 	lds	r25, 0x0620
   1486e:	98 23       	and	r25, r24
   14870:	09 f4       	brne	.+2      	; 0x14874 <signalIoctl+0xdfe>
   14872:	94 c3       	rjmp	.+1832   	; 0x14f9c <signalIoctl+0x1526>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTCLR = c_pin;
   14874:	e0 e2       	ldi	r30, 0x20	; 32
   14876:	f6 e0       	ldi	r31, 0x06	; 6
   14878:	86 83       	std	Z+6, r24	; 0x06
   1487a:	cc 24       	eor	r12, r12
   1487c:	dd 24       	eor	r13, r13
   1487e:	76 01       	movw	r14, r12
   14880:	14 c4       	rjmp	.+2088   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14882:	90 91 40 06 	lds	r25, 0x0640
   14886:	98 23       	and	r25, r24
   14888:	09 f4       	brne	.+2      	; 0x1488c <signalIoctl+0xe16>
   1488a:	8c c3       	rjmp	.+1816   	; 0x14fa4 <signalIoctl+0x152e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTCLR = c_pin;
   1488c:	e0 e4       	ldi	r30, 0x40	; 64
   1488e:	f6 e0       	ldi	r31, 0x06	; 6
   14890:	86 83       	std	Z+6, r24	; 0x06
   14892:	cc 24       	eor	r12, r12
   14894:	dd 24       	eor	r13, r13
   14896:	76 01       	movw	r14, r12
   14898:	08 c4       	rjmp	.+2064   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1489a:	90 91 60 06 	lds	r25, 0x0660
   1489e:	98 23       	and	r25, r24
   148a0:	09 f4       	brne	.+2      	; 0x148a4 <signalIoctl+0xe2e>
   148a2:	84 c3       	rjmp	.+1800   	; 0x14fac <signalIoctl+0x1536>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTCLR = c_pin;
   148a4:	e0 e6       	ldi	r30, 0x60	; 96
   148a6:	f6 e0       	ldi	r31, 0x06	; 6
   148a8:	86 83       	std	Z+6, r24	; 0x06
   148aa:	cc 24       	eor	r12, r12
   148ac:	dd 24       	eor	r13, r13
   148ae:	76 01       	movw	r14, r12
   148b0:	fc c3       	rjmp	.+2040   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   148b2:	90 91 80 06 	lds	r25, 0x0680
   148b6:	98 23       	and	r25, r24
   148b8:	09 f4       	brne	.+2      	; 0x148bc <signalIoctl+0xe46>
   148ba:	7c c3       	rjmp	.+1784   	; 0x14fb4 <signalIoctl+0x153e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTCLR = c_pin;
   148bc:	e0 e8       	ldi	r30, 0x80	; 128
   148be:	f6 e0       	ldi	r31, 0x06	; 6
   148c0:	86 83       	std	Z+6, r24	; 0x06
   148c2:	cc 24       	eor	r12, r12
   148c4:	dd 24       	eor	r13, r13
   148c6:	76 01       	movw	r14, r12
   148c8:	f0 c3       	rjmp	.+2016   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   148ca:	90 91 a0 06 	lds	r25, 0x06A0
   148ce:	98 23       	and	r25, r24
   148d0:	09 f4       	brne	.+2      	; 0x148d4 <signalIoctl+0xe5e>
   148d2:	74 c3       	rjmp	.+1768   	; 0x14fbc <signalIoctl+0x1546>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTCLR = c_pin;
   148d4:	e0 ea       	ldi	r30, 0xA0	; 160
   148d6:	f6 e0       	ldi	r31, 0x06	; 6
   148d8:	86 83       	std	Z+6, r24	; 0x06
   148da:	cc 24       	eor	r12, r12
   148dc:	dd 24       	eor	r13, r13
   148de:	76 01       	movw	r14, r12
   148e0:	e4 c3       	rjmp	.+1992   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   148e2:	90 91 e0 06 	lds	r25, 0x06E0
   148e6:	98 23       	and	r25, r24
   148e8:	09 f4       	brne	.+2      	; 0x148ec <signalIoctl+0xe76>
   148ea:	6c c3       	rjmp	.+1752   	; 0x14fc4 <signalIoctl+0x154e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTCLR = c_pin;
   148ec:	e0 ee       	ldi	r30, 0xE0	; 224
   148ee:	f6 e0       	ldi	r31, 0x06	; 6
   148f0:	86 83       	std	Z+6, r24	; 0x06
   148f2:	cc 24       	eor	r12, r12
   148f4:	dd 24       	eor	r13, r13
   148f6:	76 01       	movw	r14, r12
   148f8:	d8 c3       	rjmp	.+1968   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   148fa:	90 91 00 07 	lds	r25, 0x0700
   148fe:	98 23       	and	r25, r24
   14900:	09 f4       	brne	.+2      	; 0x14904 <signalIoctl+0xe8e>
   14902:	64 c3       	rjmp	.+1736   	; 0x14fcc <signalIoctl+0x1556>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTCLR = c_pin;
   14904:	e0 e0       	ldi	r30, 0x00	; 0
   14906:	f7 e0       	ldi	r31, 0x07	; 7
   14908:	86 83       	std	Z+6, r24	; 0x06
   1490a:	cc 24       	eor	r12, r12
   1490c:	dd 24       	eor	r13, r13
   1490e:	76 01       	movw	r14, r12
   14910:	cc c3       	rjmp	.+1944   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14912:	90 91 20 07 	lds	r25, 0x0720
   14916:	98 23       	and	r25, r24
   14918:	09 f4       	brne	.+2      	; 0x1491c <signalIoctl+0xea6>
   1491a:	5c c3       	rjmp	.+1720   	; 0x14fd4 <signalIoctl+0x155e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTCLR = c_pin;
   1491c:	e0 e2       	ldi	r30, 0x20	; 32
   1491e:	f7 e0       	ldi	r31, 0x07	; 7
   14920:	86 83       	std	Z+6, r24	; 0x06
   14922:	cc 24       	eor	r12, r12
   14924:	dd 24       	eor	r13, r13
   14926:	76 01       	movw	r14, r12
   14928:	c0 c3       	rjmp	.+1920   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   1492a:	90 91 c0 07 	lds	r25, 0x07C0
   1492e:	98 23       	and	r25, r24
   14930:	09 f4       	brne	.+2      	; 0x14934 <signalIoctl+0xebe>
   14932:	54 c3       	rjmp	.+1704   	; 0x14fdc <signalIoctl+0x1566>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTCLR = c_pin;
   14934:	e0 ec       	ldi	r30, 0xC0	; 192
   14936:	f7 e0       	ldi	r31, 0x07	; 7
   14938:	86 83       	std	Z+6, r24	; 0x06
   1493a:	cc 24       	eor	r12, r12
   1493c:	dd 24       	eor	r13, r13
   1493e:	76 01       	movw	r14, r12
   14940:	b4 c3       	rjmp	.+1896   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14942:	90 91 e0 07 	lds	r25, 0x07E0
   14946:	98 23       	and	r25, r24
   14948:	09 f4       	brne	.+2      	; 0x1494c <signalIoctl+0xed6>
   1494a:	4c c3       	rjmp	.+1688   	; 0x14fe4 <signalIoctl+0x156e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTCLR = c_pin;
   1494c:	e0 ee       	ldi	r30, 0xE0	; 224
   1494e:	f7 e0       	ldi	r31, 0x07	; 7
   14950:	86 83       	std	Z+6, r24	; 0x06
   14952:	cc 24       	eor	r12, r12
   14954:	dd 24       	eor	r13, r13
   14956:	76 01       	movw	r14, r12
   14958:	a8 c3       	rjmp	.+1872   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_ON:*/

      case ALL_LEDS_OFF:

         hal_gpioOn( gt_signalDev.c_signalPort,
   1495a:	80 91 7a 2b 	lds	r24, 0x2B7A
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   1495e:	90 91 76 2b 	lds	r25, 0x2B76
   14962:	95 30       	cpi	r25, 0x05	; 5
   14964:	09 f4       	brne	.+2      	; 0x14968 <signalIoctl+0xef2>
   14966:	61 c0       	rjmp	.+194    	; 0x14a2a <signalIoctl+0xfb4>
   14968:	96 30       	cpi	r25, 0x06	; 6
   1496a:	80 f4       	brcc	.+32     	; 0x1498c <signalIoctl+0xf16>
   1496c:	92 30       	cpi	r25, 0x02	; 2
   1496e:	c9 f1       	breq	.+114    	; 0x149e2 <signalIoctl+0xf6c>
   14970:	93 30       	cpi	r25, 0x03	; 3
   14972:	30 f4       	brcc	.+12     	; 0x14980 <signalIoctl+0xf0a>
   14974:	99 23       	and	r25, r25
   14976:	e9 f0       	breq	.+58     	; 0x149b2 <signalIoctl+0xf3c>
   14978:	91 30       	cpi	r25, 0x01	; 1
   1497a:	09 f0       	breq	.+2      	; 0x1497e <signalIoctl+0xf08>
   1497c:	37 c3       	rjmp	.+1646   	; 0x14fec <signalIoctl+0x1576>
   1497e:	25 c0       	rjmp	.+74     	; 0x149ca <signalIoctl+0xf54>
   14980:	93 30       	cpi	r25, 0x03	; 3
   14982:	d9 f1       	breq	.+118    	; 0x149fa <signalIoctl+0xf84>
   14984:	94 30       	cpi	r25, 0x04	; 4
   14986:	09 f0       	breq	.+2      	; 0x1498a <signalIoctl+0xf14>
   14988:	31 c3       	rjmp	.+1634   	; 0x14fec <signalIoctl+0x1576>
   1498a:	43 c0       	rjmp	.+134    	; 0x14a12 <signalIoctl+0xf9c>
   1498c:	98 30       	cpi	r25, 0x08	; 8
   1498e:	09 f4       	brne	.+2      	; 0x14992 <signalIoctl+0xf1c>
   14990:	70 c0       	rjmp	.+224    	; 0x14a72 <signalIoctl+0xffc>
   14992:	99 30       	cpi	r25, 0x09	; 9
   14994:	38 f4       	brcc	.+14     	; 0x149a4 <signalIoctl+0xf2e>
   14996:	96 30       	cpi	r25, 0x06	; 6
   14998:	09 f4       	brne	.+2      	; 0x1499c <signalIoctl+0xf26>
   1499a:	53 c0       	rjmp	.+166    	; 0x14a42 <signalIoctl+0xfcc>
   1499c:	97 30       	cpi	r25, 0x07	; 7
   1499e:	09 f0       	breq	.+2      	; 0x149a2 <signalIoctl+0xf2c>
   149a0:	25 c3       	rjmp	.+1610   	; 0x14fec <signalIoctl+0x1576>
   149a2:	5b c0       	rjmp	.+182    	; 0x14a5a <signalIoctl+0xfe4>
   149a4:	99 30       	cpi	r25, 0x09	; 9
   149a6:	09 f4       	brne	.+2      	; 0x149aa <signalIoctl+0xf34>
   149a8:	70 c0       	rjmp	.+224    	; 0x14a8a <signalIoctl+0x1014>
   149aa:	9a 30       	cpi	r25, 0x0A	; 10
   149ac:	09 f0       	breq	.+2      	; 0x149b0 <signalIoctl+0xf3a>
   149ae:	1e c3       	rjmp	.+1596   	; 0x14fec <signalIoctl+0x1576>
   149b0:	78 c0       	rjmp	.+240    	; 0x14aa2 <signalIoctl+0x102c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   149b2:	90 91 00 06 	lds	r25, 0x0600
   149b6:	98 23       	and	r25, r24
   149b8:	09 f4       	brne	.+2      	; 0x149bc <signalIoctl+0xf46>
   149ba:	1c c3       	rjmp	.+1592   	; 0x14ff4 <signalIoctl+0x157e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
   149bc:	e0 e0       	ldi	r30, 0x00	; 0
   149be:	f6 e0       	ldi	r31, 0x06	; 6
   149c0:	85 83       	std	Z+5, r24	; 0x05

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   149c2:	cc 24       	eor	r12, r12
   149c4:	dd 24       	eor	r13, r13
   149c6:	76 01       	movw	r14, r12
   149c8:	70 c3       	rjmp	.+1760   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   149ca:	90 91 20 06 	lds	r25, 0x0620
   149ce:	98 23       	and	r25, r24
   149d0:	09 f4       	brne	.+2      	; 0x149d4 <signalIoctl+0xf5e>
   149d2:	14 c3       	rjmp	.+1576   	; 0x14ffc <signalIoctl+0x1586>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
   149d4:	e0 e2       	ldi	r30, 0x20	; 32
   149d6:	f6 e0       	ldi	r31, 0x06	; 6
   149d8:	85 83       	std	Z+5, r24	; 0x05
   149da:	cc 24       	eor	r12, r12
   149dc:	dd 24       	eor	r13, r13
   149de:	76 01       	movw	r14, r12
   149e0:	64 c3       	rjmp	.+1736   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   149e2:	90 91 40 06 	lds	r25, 0x0640
   149e6:	98 23       	and	r25, r24
   149e8:	09 f4       	brne	.+2      	; 0x149ec <signalIoctl+0xf76>
   149ea:	0c c3       	rjmp	.+1560   	; 0x15004 <signalIoctl+0x158e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
   149ec:	e0 e4       	ldi	r30, 0x40	; 64
   149ee:	f6 e0       	ldi	r31, 0x06	; 6
   149f0:	85 83       	std	Z+5, r24	; 0x05
   149f2:	cc 24       	eor	r12, r12
   149f4:	dd 24       	eor	r13, r13
   149f6:	76 01       	movw	r14, r12
   149f8:	58 c3       	rjmp	.+1712   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   149fa:	90 91 60 06 	lds	r25, 0x0660
   149fe:	98 23       	and	r25, r24
   14a00:	09 f4       	brne	.+2      	; 0x14a04 <signalIoctl+0xf8e>
   14a02:	04 c3       	rjmp	.+1544   	; 0x1500c <signalIoctl+0x1596>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
   14a04:	e0 e6       	ldi	r30, 0x60	; 96
   14a06:	f6 e0       	ldi	r31, 0x06	; 6
   14a08:	85 83       	std	Z+5, r24	; 0x05
   14a0a:	cc 24       	eor	r12, r12
   14a0c:	dd 24       	eor	r13, r13
   14a0e:	76 01       	movw	r14, r12
   14a10:	4c c3       	rjmp	.+1688   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14a12:	90 91 80 06 	lds	r25, 0x0680
   14a16:	98 23       	and	r25, r24
   14a18:	09 f4       	brne	.+2      	; 0x14a1c <signalIoctl+0xfa6>
   14a1a:	fc c2       	rjmp	.+1528   	; 0x15014 <signalIoctl+0x159e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
   14a1c:	e0 e8       	ldi	r30, 0x80	; 128
   14a1e:	f6 e0       	ldi	r31, 0x06	; 6
   14a20:	85 83       	std	Z+5, r24	; 0x05
   14a22:	cc 24       	eor	r12, r12
   14a24:	dd 24       	eor	r13, r13
   14a26:	76 01       	movw	r14, r12
   14a28:	40 c3       	rjmp	.+1664   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   14a2a:	90 91 a0 06 	lds	r25, 0x06A0
   14a2e:	98 23       	and	r25, r24
   14a30:	09 f4       	brne	.+2      	; 0x14a34 <signalIoctl+0xfbe>
   14a32:	f4 c2       	rjmp	.+1512   	; 0x1501c <signalIoctl+0x15a6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
   14a34:	e0 ea       	ldi	r30, 0xA0	; 160
   14a36:	f6 e0       	ldi	r31, 0x06	; 6
   14a38:	85 83       	std	Z+5, r24	; 0x05
   14a3a:	cc 24       	eor	r12, r12
   14a3c:	dd 24       	eor	r13, r13
   14a3e:	76 01       	movw	r14, r12
   14a40:	34 c3       	rjmp	.+1640   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14a42:	90 91 e0 06 	lds	r25, 0x06E0
   14a46:	98 23       	and	r25, r24
   14a48:	09 f4       	brne	.+2      	; 0x14a4c <signalIoctl+0xfd6>
   14a4a:	ec c2       	rjmp	.+1496   	; 0x15024 <signalIoctl+0x15ae>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
   14a4c:	e0 ee       	ldi	r30, 0xE0	; 224
   14a4e:	f6 e0       	ldi	r31, 0x06	; 6
   14a50:	85 83       	std	Z+5, r24	; 0x05
   14a52:	cc 24       	eor	r12, r12
   14a54:	dd 24       	eor	r13, r13
   14a56:	76 01       	movw	r14, r12
   14a58:	28 c3       	rjmp	.+1616   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   14a5a:	90 91 00 07 	lds	r25, 0x0700
   14a5e:	98 23       	and	r25, r24
   14a60:	09 f4       	brne	.+2      	; 0x14a64 <signalIoctl+0xfee>
   14a62:	e4 c2       	rjmp	.+1480   	; 0x1502c <signalIoctl+0x15b6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
   14a64:	e0 e0       	ldi	r30, 0x00	; 0
   14a66:	f7 e0       	ldi	r31, 0x07	; 7
   14a68:	85 83       	std	Z+5, r24	; 0x05
   14a6a:	cc 24       	eor	r12, r12
   14a6c:	dd 24       	eor	r13, r13
   14a6e:	76 01       	movw	r14, r12
   14a70:	1c c3       	rjmp	.+1592   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14a72:	90 91 20 07 	lds	r25, 0x0720
   14a76:	98 23       	and	r25, r24
   14a78:	09 f4       	brne	.+2      	; 0x14a7c <signalIoctl+0x1006>
   14a7a:	dc c2       	rjmp	.+1464   	; 0x15034 <signalIoctl+0x15be>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
   14a7c:	e0 e2       	ldi	r30, 0x20	; 32
   14a7e:	f7 e0       	ldi	r31, 0x07	; 7
   14a80:	85 83       	std	Z+5, r24	; 0x05
   14a82:	cc 24       	eor	r12, r12
   14a84:	dd 24       	eor	r13, r13
   14a86:	76 01       	movw	r14, r12
   14a88:	10 c3       	rjmp	.+1568   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   14a8a:	90 91 c0 07 	lds	r25, 0x07C0
   14a8e:	98 23       	and	r25, r24
   14a90:	09 f4       	brne	.+2      	; 0x14a94 <signalIoctl+0x101e>
   14a92:	d4 c2       	rjmp	.+1448   	; 0x1503c <signalIoctl+0x15c6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
   14a94:	e0 ec       	ldi	r30, 0xC0	; 192
   14a96:	f7 e0       	ldi	r31, 0x07	; 7
   14a98:	85 83       	std	Z+5, r24	; 0x05
   14a9a:	cc 24       	eor	r12, r12
   14a9c:	dd 24       	eor	r13, r13
   14a9e:	76 01       	movw	r14, r12
   14aa0:	04 c3       	rjmp	.+1544   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14aa2:	90 91 e0 07 	lds	r25, 0x07E0
   14aa6:	98 23       	and	r25, r24
   14aa8:	09 f4       	brne	.+2      	; 0x14aac <signalIoctl+0x1036>
   14aaa:	cc c2       	rjmp	.+1432   	; 0x15044 <signalIoctl+0x15ce>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
   14aac:	e0 ee       	ldi	r30, 0xE0	; 224
   14aae:	f7 e0       	ldi	r31, 0x07	; 7
   14ab0:	85 83       	std	Z+5, r24	; 0x05
   14ab2:	cc 24       	eor	r12, r12
   14ab4:	dd 24       	eor	r13, r13
   14ab6:	76 01       	movw	r14, r12
   14ab8:	f8 c2       	rjmp	.+1520   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_OFF:*/

      case ALL_LEDS_TOGGLE:

         hal_gpioToggle( gt_signalDev.c_signalPort,
   14aba:	80 91 7a 2b 	lds	r24, 0x2B7A
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioToggle(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   14abe:	90 91 76 2b 	lds	r25, 0x2B76
   14ac2:	95 30       	cpi	r25, 0x05	; 5
   14ac4:	09 f4       	brne	.+2      	; 0x14ac8 <signalIoctl+0x1052>
   14ac6:	61 c0       	rjmp	.+194    	; 0x14b8a <signalIoctl+0x1114>
   14ac8:	96 30       	cpi	r25, 0x06	; 6
   14aca:	80 f4       	brcc	.+32     	; 0x14aec <signalIoctl+0x1076>
   14acc:	92 30       	cpi	r25, 0x02	; 2
   14ace:	c9 f1       	breq	.+114    	; 0x14b42 <signalIoctl+0x10cc>
   14ad0:	93 30       	cpi	r25, 0x03	; 3
   14ad2:	30 f4       	brcc	.+12     	; 0x14ae0 <signalIoctl+0x106a>
   14ad4:	99 23       	and	r25, r25
   14ad6:	e9 f0       	breq	.+58     	; 0x14b12 <signalIoctl+0x109c>
   14ad8:	91 30       	cpi	r25, 0x01	; 1
   14ada:	09 f0       	breq	.+2      	; 0x14ade <signalIoctl+0x1068>
   14adc:	b7 c2       	rjmp	.+1390   	; 0x1504c <signalIoctl+0x15d6>
   14ade:	25 c0       	rjmp	.+74     	; 0x14b2a <signalIoctl+0x10b4>
   14ae0:	93 30       	cpi	r25, 0x03	; 3
   14ae2:	d9 f1       	breq	.+118    	; 0x14b5a <signalIoctl+0x10e4>
   14ae4:	94 30       	cpi	r25, 0x04	; 4
   14ae6:	09 f0       	breq	.+2      	; 0x14aea <signalIoctl+0x1074>
   14ae8:	b1 c2       	rjmp	.+1378   	; 0x1504c <signalIoctl+0x15d6>
   14aea:	43 c0       	rjmp	.+134    	; 0x14b72 <signalIoctl+0x10fc>
   14aec:	98 30       	cpi	r25, 0x08	; 8
   14aee:	09 f4       	brne	.+2      	; 0x14af2 <signalIoctl+0x107c>
   14af0:	70 c0       	rjmp	.+224    	; 0x14bd2 <signalIoctl+0x115c>
   14af2:	99 30       	cpi	r25, 0x09	; 9
   14af4:	38 f4       	brcc	.+14     	; 0x14b04 <signalIoctl+0x108e>
   14af6:	96 30       	cpi	r25, 0x06	; 6
   14af8:	09 f4       	brne	.+2      	; 0x14afc <signalIoctl+0x1086>
   14afa:	53 c0       	rjmp	.+166    	; 0x14ba2 <signalIoctl+0x112c>
   14afc:	97 30       	cpi	r25, 0x07	; 7
   14afe:	09 f0       	breq	.+2      	; 0x14b02 <signalIoctl+0x108c>
   14b00:	a5 c2       	rjmp	.+1354   	; 0x1504c <signalIoctl+0x15d6>
   14b02:	5b c0       	rjmp	.+182    	; 0x14bba <signalIoctl+0x1144>
   14b04:	99 30       	cpi	r25, 0x09	; 9
   14b06:	09 f4       	brne	.+2      	; 0x14b0a <signalIoctl+0x1094>
   14b08:	70 c0       	rjmp	.+224    	; 0x14bea <signalIoctl+0x1174>
   14b0a:	9a 30       	cpi	r25, 0x0A	; 10
   14b0c:	09 f0       	breq	.+2      	; 0x14b10 <signalIoctl+0x109a>
   14b0e:	9e c2       	rjmp	.+1340   	; 0x1504c <signalIoctl+0x15d6>
   14b10:	78 c0       	rjmp	.+240    	; 0x14c02 <signalIoctl+0x118c>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   14b12:	90 91 00 06 	lds	r25, 0x0600
   14b16:	98 23       	and	r25, r24
   14b18:	09 f4       	brne	.+2      	; 0x14b1c <signalIoctl+0x10a6>
   14b1a:	9c c2       	rjmp	.+1336   	; 0x15054 <signalIoctl+0x15de>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTTGL = c_pin;
   14b1c:	e0 e0       	ldi	r30, 0x00	; 0
   14b1e:	f6 e0       	ldi	r31, 0x06	; 6
   14b20:	87 83       	std	Z+7, r24	; 0x07

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14b22:	cc 24       	eor	r12, r12
   14b24:	dd 24       	eor	r13, r13
   14b26:	76 01       	movw	r14, r12
   14b28:	c0 c2       	rjmp	.+1408   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   14b2a:	90 91 20 06 	lds	r25, 0x0620
   14b2e:	98 23       	and	r25, r24
   14b30:	09 f4       	brne	.+2      	; 0x14b34 <signalIoctl+0x10be>
   14b32:	94 c2       	rjmp	.+1320   	; 0x1505c <signalIoctl+0x15e6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTTGL = c_pin;
   14b34:	e0 e2       	ldi	r30, 0x20	; 32
   14b36:	f6 e0       	ldi	r31, 0x06	; 6
   14b38:	87 83       	std	Z+7, r24	; 0x07
   14b3a:	cc 24       	eor	r12, r12
   14b3c:	dd 24       	eor	r13, r13
   14b3e:	76 01       	movw	r14, r12
   14b40:	b4 c2       	rjmp	.+1384   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   14b42:	90 91 40 06 	lds	r25, 0x0640
   14b46:	98 23       	and	r25, r24
   14b48:	09 f4       	brne	.+2      	; 0x14b4c <signalIoctl+0x10d6>
   14b4a:	8c c2       	rjmp	.+1304   	; 0x15064 <signalIoctl+0x15ee>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTTGL = c_pin;
   14b4c:	e0 e4       	ldi	r30, 0x40	; 64
   14b4e:	f6 e0       	ldi	r31, 0x06	; 6
   14b50:	87 83       	std	Z+7, r24	; 0x07
   14b52:	cc 24       	eor	r12, r12
   14b54:	dd 24       	eor	r13, r13
   14b56:	76 01       	movw	r14, r12
   14b58:	a8 c2       	rjmp	.+1360   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   14b5a:	90 91 60 06 	lds	r25, 0x0660
   14b5e:	98 23       	and	r25, r24
   14b60:	09 f4       	brne	.+2      	; 0x14b64 <signalIoctl+0x10ee>
   14b62:	84 c2       	rjmp	.+1288   	; 0x1506c <signalIoctl+0x15f6>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTTGL = c_pin;
   14b64:	e0 e6       	ldi	r30, 0x60	; 96
   14b66:	f6 e0       	ldi	r31, 0x06	; 6
   14b68:	87 83       	std	Z+7, r24	; 0x07
   14b6a:	cc 24       	eor	r12, r12
   14b6c:	dd 24       	eor	r13, r13
   14b6e:	76 01       	movw	r14, r12
   14b70:	9c c2       	rjmp	.+1336   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   14b72:	90 91 80 06 	lds	r25, 0x0680
   14b76:	98 23       	and	r25, r24
   14b78:	09 f4       	brne	.+2      	; 0x14b7c <signalIoctl+0x1106>
   14b7a:	7c c2       	rjmp	.+1272   	; 0x15074 <signalIoctl+0x15fe>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTTGL = c_pin;
   14b7c:	e0 e8       	ldi	r30, 0x80	; 128
   14b7e:	f6 e0       	ldi	r31, 0x06	; 6
   14b80:	87 83       	std	Z+7, r24	; 0x07
   14b82:	cc 24       	eor	r12, r12
   14b84:	dd 24       	eor	r13, r13
   14b86:	76 01       	movw	r14, r12
   14b88:	90 c2       	rjmp	.+1312   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   14b8a:	90 91 a0 06 	lds	r25, 0x06A0
   14b8e:	98 23       	and	r25, r24
   14b90:	09 f4       	brne	.+2      	; 0x14b94 <signalIoctl+0x111e>
   14b92:	74 c2       	rjmp	.+1256   	; 0x1507c <signalIoctl+0x1606>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTTGL = c_pin;
   14b94:	e0 ea       	ldi	r30, 0xA0	; 160
   14b96:	f6 e0       	ldi	r31, 0x06	; 6
   14b98:	87 83       	std	Z+7, r24	; 0x07
   14b9a:	cc 24       	eor	r12, r12
   14b9c:	dd 24       	eor	r13, r13
   14b9e:	76 01       	movw	r14, r12
   14ba0:	84 c2       	rjmp	.+1288   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   14ba2:	90 91 e0 06 	lds	r25, 0x06E0
   14ba6:	98 23       	and	r25, r24
   14ba8:	09 f4       	brne	.+2      	; 0x14bac <signalIoctl+0x1136>
   14baa:	6c c2       	rjmp	.+1240   	; 0x15084 <signalIoctl+0x160e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTTGL = c_pin;
   14bac:	e0 ee       	ldi	r30, 0xE0	; 224
   14bae:	f6 e0       	ldi	r31, 0x06	; 6
   14bb0:	87 83       	std	Z+7, r24	; 0x07
   14bb2:	cc 24       	eor	r12, r12
   14bb4:	dd 24       	eor	r13, r13
   14bb6:	76 01       	movw	r14, r12
   14bb8:	78 c2       	rjmp	.+1264   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   14bba:	90 91 00 07 	lds	r25, 0x0700
   14bbe:	98 23       	and	r25, r24
   14bc0:	09 f4       	brne	.+2      	; 0x14bc4 <signalIoctl+0x114e>
   14bc2:	64 c2       	rjmp	.+1224   	; 0x1508c <signalIoctl+0x1616>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTTGL = c_pin;
   14bc4:	e0 e0       	ldi	r30, 0x00	; 0
   14bc6:	f7 e0       	ldi	r31, 0x07	; 7
   14bc8:	87 83       	std	Z+7, r24	; 0x07
   14bca:	cc 24       	eor	r12, r12
   14bcc:	dd 24       	eor	r13, r13
   14bce:	76 01       	movw	r14, r12
   14bd0:	6c c2       	rjmp	.+1240   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   14bd2:	90 91 20 07 	lds	r25, 0x0720
   14bd6:	98 23       	and	r25, r24
   14bd8:	09 f4       	brne	.+2      	; 0x14bdc <signalIoctl+0x1166>
   14bda:	5c c2       	rjmp	.+1208   	; 0x15094 <signalIoctl+0x161e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTTGL = c_pin;
   14bdc:	e0 e2       	ldi	r30, 0x20	; 32
   14bde:	f7 e0       	ldi	r31, 0x07	; 7
   14be0:	87 83       	std	Z+7, r24	; 0x07
   14be2:	cc 24       	eor	r12, r12
   14be4:	dd 24       	eor	r13, r13
   14be6:	76 01       	movw	r14, r12
   14be8:	60 c2       	rjmp	.+1216   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   14bea:	90 91 c0 07 	lds	r25, 0x07C0
   14bee:	98 23       	and	r25, r24
   14bf0:	09 f4       	brne	.+2      	; 0x14bf4 <signalIoctl+0x117e>
   14bf2:	54 c2       	rjmp	.+1192   	; 0x1509c <signalIoctl+0x1626>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTTGL = c_pin;
   14bf4:	e0 ec       	ldi	r30, 0xC0	; 192
   14bf6:	f7 e0       	ldi	r31, 0x07	; 7
   14bf8:	87 83       	std	Z+7, r24	; 0x07
   14bfa:	cc 24       	eor	r12, r12
   14bfc:	dd 24       	eor	r13, r13
   14bfe:	76 01       	movw	r14, r12
   14c00:	54 c2       	rjmp	.+1192   	; 0x150aa <signalIoctl+0x1634>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   14c02:	90 91 e0 07 	lds	r25, 0x07E0
   14c06:	98 23       	and	r25, r24
   14c08:	09 f4       	brne	.+2      	; 0x14c0c <signalIoctl+0x1196>
   14c0a:	4c c2       	rjmp	.+1176   	; 0x150a4 <signalIoctl+0x162e>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTTGL = c_pin;
   14c0c:	e0 ee       	ldi	r30, 0xE0	; 224
   14c0e:	f7 e0       	ldi	r31, 0x07	; 7
   14c10:	87 83       	std	Z+7, r24	; 0x07
   14c12:	cc 24       	eor	r12, r12
   14c14:	dd 24       	eor	r13, r13
   14c16:	76 01       	movw	r14, r12
   14c18:	48 c2       	rjmp	.+1168   	; 0x150aa <signalIoctl+0x1634>

      break;/*End case ALL_LEDS_TOGGLE:*/

      default:

         i_return = (int32_t)ARB_INVALID_CMD;
   14c1a:	8b ef       	ldi	r24, 0xFB	; 251
   14c1c:	c8 2e       	mov	r12, r24
   14c1e:	8f ef       	ldi	r24, 0xFF	; 255
   14c20:	d8 2e       	mov	r13, r24
   14c22:	8f ef       	ldi	r24, 0xFF	; 255
   14c24:	e8 2e       	mov	r14, r24
   14c26:	8f ef       	ldi	r24, 0xFF	; 255
   14c28:	f8 2e       	mov	r15, r24
   14c2a:	3f c2       	rjmp	.+1150   	; 0x150aa <signalIoctl+0x1634>

int32_t signalIoctl( t_DEVHANDLE t_devHandle,
                     uint16_t s_command,
                     int32_t  i_arguments)
{
   int32_t i_return = (int32_t)ARB_PASSED;
   14c2c:	cc 24       	eor	r12, r12
   14c2e:	dd 24       	eor	r13, r13
   14c30:	76 01       	movw	r14, r12
   14c32:	3b c2       	rjmp	.+1142   	; 0x150aa <signalIoctl+0x1634>
   14c34:	cc 24       	eor	r12, r12
   14c36:	dd 24       	eor	r13, r13
   14c38:	76 01       	movw	r14, r12
   14c3a:	37 c2       	rjmp	.+1134   	; 0x150aa <signalIoctl+0x1634>
   14c3c:	cc 24       	eor	r12, r12
   14c3e:	dd 24       	eor	r13, r13
   14c40:	76 01       	movw	r14, r12
   14c42:	33 c2       	rjmp	.+1126   	; 0x150aa <signalIoctl+0x1634>
   14c44:	cc 24       	eor	r12, r12
   14c46:	dd 24       	eor	r13, r13
   14c48:	76 01       	movw	r14, r12
   14c4a:	2f c2       	rjmp	.+1118   	; 0x150aa <signalIoctl+0x1634>
   14c4c:	cc 24       	eor	r12, r12
   14c4e:	dd 24       	eor	r13, r13
   14c50:	76 01       	movw	r14, r12
   14c52:	2b c2       	rjmp	.+1110   	; 0x150aa <signalIoctl+0x1634>
   14c54:	cc 24       	eor	r12, r12
   14c56:	dd 24       	eor	r13, r13
   14c58:	76 01       	movw	r14, r12
   14c5a:	27 c2       	rjmp	.+1102   	; 0x150aa <signalIoctl+0x1634>
   14c5c:	cc 24       	eor	r12, r12
   14c5e:	dd 24       	eor	r13, r13
   14c60:	76 01       	movw	r14, r12
   14c62:	23 c2       	rjmp	.+1094   	; 0x150aa <signalIoctl+0x1634>
   14c64:	cc 24       	eor	r12, r12
   14c66:	dd 24       	eor	r13, r13
   14c68:	76 01       	movw	r14, r12
   14c6a:	1f c2       	rjmp	.+1086   	; 0x150aa <signalIoctl+0x1634>
   14c6c:	cc 24       	eor	r12, r12
   14c6e:	dd 24       	eor	r13, r13
   14c70:	76 01       	movw	r14, r12
   14c72:	1b c2       	rjmp	.+1078   	; 0x150aa <signalIoctl+0x1634>
   14c74:	cc 24       	eor	r12, r12
   14c76:	dd 24       	eor	r13, r13
   14c78:	76 01       	movw	r14, r12
   14c7a:	17 c2       	rjmp	.+1070   	; 0x150aa <signalIoctl+0x1634>
   14c7c:	cc 24       	eor	r12, r12
   14c7e:	dd 24       	eor	r13, r13
   14c80:	76 01       	movw	r14, r12
   14c82:	13 c2       	rjmp	.+1062   	; 0x150aa <signalIoctl+0x1634>
   14c84:	cc 24       	eor	r12, r12
   14c86:	dd 24       	eor	r13, r13
   14c88:	76 01       	movw	r14, r12
   14c8a:	0f c2       	rjmp	.+1054   	; 0x150aa <signalIoctl+0x1634>
   14c8c:	cc 24       	eor	r12, r12
   14c8e:	dd 24       	eor	r13, r13
   14c90:	76 01       	movw	r14, r12
   14c92:	0b c2       	rjmp	.+1046   	; 0x150aa <signalIoctl+0x1634>
   14c94:	cc 24       	eor	r12, r12
   14c96:	dd 24       	eor	r13, r13
   14c98:	76 01       	movw	r14, r12
   14c9a:	07 c2       	rjmp	.+1038   	; 0x150aa <signalIoctl+0x1634>
   14c9c:	cc 24       	eor	r12, r12
   14c9e:	dd 24       	eor	r13, r13
   14ca0:	76 01       	movw	r14, r12
   14ca2:	03 c2       	rjmp	.+1030   	; 0x150aa <signalIoctl+0x1634>
   14ca4:	cc 24       	eor	r12, r12
   14ca6:	dd 24       	eor	r13, r13
   14ca8:	76 01       	movw	r14, r12
   14caa:	ff c1       	rjmp	.+1022   	; 0x150aa <signalIoctl+0x1634>
   14cac:	cc 24       	eor	r12, r12
   14cae:	dd 24       	eor	r13, r13
   14cb0:	76 01       	movw	r14, r12
   14cb2:	fb c1       	rjmp	.+1014   	; 0x150aa <signalIoctl+0x1634>
   14cb4:	cc 24       	eor	r12, r12
   14cb6:	dd 24       	eor	r13, r13
   14cb8:	76 01       	movw	r14, r12
   14cba:	f7 c1       	rjmp	.+1006   	; 0x150aa <signalIoctl+0x1634>
   14cbc:	cc 24       	eor	r12, r12
   14cbe:	dd 24       	eor	r13, r13
   14cc0:	76 01       	movw	r14, r12
   14cc2:	f3 c1       	rjmp	.+998    	; 0x150aa <signalIoctl+0x1634>
   14cc4:	cc 24       	eor	r12, r12
   14cc6:	dd 24       	eor	r13, r13
   14cc8:	76 01       	movw	r14, r12
   14cca:	ef c1       	rjmp	.+990    	; 0x150aa <signalIoctl+0x1634>
   14ccc:	cc 24       	eor	r12, r12
   14cce:	dd 24       	eor	r13, r13
   14cd0:	76 01       	movw	r14, r12
   14cd2:	eb c1       	rjmp	.+982    	; 0x150aa <signalIoctl+0x1634>
   14cd4:	cc 24       	eor	r12, r12
   14cd6:	dd 24       	eor	r13, r13
   14cd8:	76 01       	movw	r14, r12
   14cda:	e7 c1       	rjmp	.+974    	; 0x150aa <signalIoctl+0x1634>
   14cdc:	cc 24       	eor	r12, r12
   14cde:	dd 24       	eor	r13, r13
   14ce0:	76 01       	movw	r14, r12
   14ce2:	e3 c1       	rjmp	.+966    	; 0x150aa <signalIoctl+0x1634>
   14ce4:	cc 24       	eor	r12, r12
   14ce6:	dd 24       	eor	r13, r13
   14ce8:	76 01       	movw	r14, r12
   14cea:	df c1       	rjmp	.+958    	; 0x150aa <signalIoctl+0x1634>
   14cec:	cc 24       	eor	r12, r12
   14cee:	dd 24       	eor	r13, r13
   14cf0:	76 01       	movw	r14, r12
   14cf2:	db c1       	rjmp	.+950    	; 0x150aa <signalIoctl+0x1634>
   14cf4:	cc 24       	eor	r12, r12
   14cf6:	dd 24       	eor	r13, r13
   14cf8:	76 01       	movw	r14, r12
   14cfa:	d7 c1       	rjmp	.+942    	; 0x150aa <signalIoctl+0x1634>
   14cfc:	cc 24       	eor	r12, r12
   14cfe:	dd 24       	eor	r13, r13
   14d00:	76 01       	movw	r14, r12
   14d02:	d3 c1       	rjmp	.+934    	; 0x150aa <signalIoctl+0x1634>
   14d04:	cc 24       	eor	r12, r12
   14d06:	dd 24       	eor	r13, r13
   14d08:	76 01       	movw	r14, r12
   14d0a:	cf c1       	rjmp	.+926    	; 0x150aa <signalIoctl+0x1634>
   14d0c:	cc 24       	eor	r12, r12
   14d0e:	dd 24       	eor	r13, r13
   14d10:	76 01       	movw	r14, r12
   14d12:	cb c1       	rjmp	.+918    	; 0x150aa <signalIoctl+0x1634>
   14d14:	cc 24       	eor	r12, r12
   14d16:	dd 24       	eor	r13, r13
   14d18:	76 01       	movw	r14, r12
   14d1a:	c7 c1       	rjmp	.+910    	; 0x150aa <signalIoctl+0x1634>
   14d1c:	cc 24       	eor	r12, r12
   14d1e:	dd 24       	eor	r13, r13
   14d20:	76 01       	movw	r14, r12
   14d22:	c3 c1       	rjmp	.+902    	; 0x150aa <signalIoctl+0x1634>
   14d24:	cc 24       	eor	r12, r12
   14d26:	dd 24       	eor	r13, r13
   14d28:	76 01       	movw	r14, r12
   14d2a:	bf c1       	rjmp	.+894    	; 0x150aa <signalIoctl+0x1634>
   14d2c:	cc 24       	eor	r12, r12
   14d2e:	dd 24       	eor	r13, r13
   14d30:	76 01       	movw	r14, r12
   14d32:	bb c1       	rjmp	.+886    	; 0x150aa <signalIoctl+0x1634>
   14d34:	cc 24       	eor	r12, r12
   14d36:	dd 24       	eor	r13, r13
   14d38:	76 01       	movw	r14, r12
   14d3a:	b7 c1       	rjmp	.+878    	; 0x150aa <signalIoctl+0x1634>
   14d3c:	cc 24       	eor	r12, r12
   14d3e:	dd 24       	eor	r13, r13
   14d40:	76 01       	movw	r14, r12
   14d42:	b3 c1       	rjmp	.+870    	; 0x150aa <signalIoctl+0x1634>
   14d44:	cc 24       	eor	r12, r12
   14d46:	dd 24       	eor	r13, r13
   14d48:	76 01       	movw	r14, r12
   14d4a:	af c1       	rjmp	.+862    	; 0x150aa <signalIoctl+0x1634>
   14d4c:	cc 24       	eor	r12, r12
   14d4e:	dd 24       	eor	r13, r13
   14d50:	76 01       	movw	r14, r12
   14d52:	ab c1       	rjmp	.+854    	; 0x150aa <signalIoctl+0x1634>
   14d54:	cc 24       	eor	r12, r12
   14d56:	dd 24       	eor	r13, r13
   14d58:	76 01       	movw	r14, r12
   14d5a:	a7 c1       	rjmp	.+846    	; 0x150aa <signalIoctl+0x1634>
   14d5c:	cc 24       	eor	r12, r12
   14d5e:	dd 24       	eor	r13, r13
   14d60:	76 01       	movw	r14, r12
   14d62:	a3 c1       	rjmp	.+838    	; 0x150aa <signalIoctl+0x1634>
   14d64:	cc 24       	eor	r12, r12
   14d66:	dd 24       	eor	r13, r13
   14d68:	76 01       	movw	r14, r12
   14d6a:	9f c1       	rjmp	.+830    	; 0x150aa <signalIoctl+0x1634>
   14d6c:	cc 24       	eor	r12, r12
   14d6e:	dd 24       	eor	r13, r13
   14d70:	76 01       	movw	r14, r12
   14d72:	9b c1       	rjmp	.+822    	; 0x150aa <signalIoctl+0x1634>
   14d74:	cc 24       	eor	r12, r12
   14d76:	dd 24       	eor	r13, r13
   14d78:	76 01       	movw	r14, r12
   14d7a:	97 c1       	rjmp	.+814    	; 0x150aa <signalIoctl+0x1634>
   14d7c:	cc 24       	eor	r12, r12
   14d7e:	dd 24       	eor	r13, r13
   14d80:	76 01       	movw	r14, r12
   14d82:	93 c1       	rjmp	.+806    	; 0x150aa <signalIoctl+0x1634>
   14d84:	cc 24       	eor	r12, r12
   14d86:	dd 24       	eor	r13, r13
   14d88:	76 01       	movw	r14, r12
   14d8a:	8f c1       	rjmp	.+798    	; 0x150aa <signalIoctl+0x1634>
   14d8c:	cc 24       	eor	r12, r12
   14d8e:	dd 24       	eor	r13, r13
   14d90:	76 01       	movw	r14, r12
   14d92:	8b c1       	rjmp	.+790    	; 0x150aa <signalIoctl+0x1634>
   14d94:	cc 24       	eor	r12, r12
   14d96:	dd 24       	eor	r13, r13
   14d98:	76 01       	movw	r14, r12
   14d9a:	87 c1       	rjmp	.+782    	; 0x150aa <signalIoctl+0x1634>
   14d9c:	cc 24       	eor	r12, r12
   14d9e:	dd 24       	eor	r13, r13
   14da0:	76 01       	movw	r14, r12
   14da2:	83 c1       	rjmp	.+774    	; 0x150aa <signalIoctl+0x1634>
   14da4:	cc 24       	eor	r12, r12
   14da6:	dd 24       	eor	r13, r13
   14da8:	76 01       	movw	r14, r12
   14daa:	7f c1       	rjmp	.+766    	; 0x150aa <signalIoctl+0x1634>
   14dac:	cc 24       	eor	r12, r12
   14dae:	dd 24       	eor	r13, r13
   14db0:	76 01       	movw	r14, r12
   14db2:	7b c1       	rjmp	.+758    	; 0x150aa <signalIoctl+0x1634>
   14db4:	cc 24       	eor	r12, r12
   14db6:	dd 24       	eor	r13, r13
   14db8:	76 01       	movw	r14, r12
   14dba:	77 c1       	rjmp	.+750    	; 0x150aa <signalIoctl+0x1634>
   14dbc:	cc 24       	eor	r12, r12
   14dbe:	dd 24       	eor	r13, r13
   14dc0:	76 01       	movw	r14, r12
   14dc2:	73 c1       	rjmp	.+742    	; 0x150aa <signalIoctl+0x1634>
   14dc4:	cc 24       	eor	r12, r12
   14dc6:	dd 24       	eor	r13, r13
   14dc8:	76 01       	movw	r14, r12
   14dca:	6f c1       	rjmp	.+734    	; 0x150aa <signalIoctl+0x1634>
   14dcc:	cc 24       	eor	r12, r12
   14dce:	dd 24       	eor	r13, r13
   14dd0:	76 01       	movw	r14, r12
   14dd2:	6b c1       	rjmp	.+726    	; 0x150aa <signalIoctl+0x1634>
   14dd4:	cc 24       	eor	r12, r12
   14dd6:	dd 24       	eor	r13, r13
   14dd8:	76 01       	movw	r14, r12
   14dda:	67 c1       	rjmp	.+718    	; 0x150aa <signalIoctl+0x1634>
   14ddc:	cc 24       	eor	r12, r12
   14dde:	dd 24       	eor	r13, r13
   14de0:	76 01       	movw	r14, r12
   14de2:	63 c1       	rjmp	.+710    	; 0x150aa <signalIoctl+0x1634>
   14de4:	cc 24       	eor	r12, r12
   14de6:	dd 24       	eor	r13, r13
   14de8:	76 01       	movw	r14, r12
   14dea:	5f c1       	rjmp	.+702    	; 0x150aa <signalIoctl+0x1634>
   14dec:	cc 24       	eor	r12, r12
   14dee:	dd 24       	eor	r13, r13
   14df0:	76 01       	movw	r14, r12
   14df2:	5b c1       	rjmp	.+694    	; 0x150aa <signalIoctl+0x1634>
   14df4:	cc 24       	eor	r12, r12
   14df6:	dd 24       	eor	r13, r13
   14df8:	76 01       	movw	r14, r12
   14dfa:	57 c1       	rjmp	.+686    	; 0x150aa <signalIoctl+0x1634>
   14dfc:	cc 24       	eor	r12, r12
   14dfe:	dd 24       	eor	r13, r13
   14e00:	76 01       	movw	r14, r12
   14e02:	53 c1       	rjmp	.+678    	; 0x150aa <signalIoctl+0x1634>
   14e04:	cc 24       	eor	r12, r12
   14e06:	dd 24       	eor	r13, r13
   14e08:	76 01       	movw	r14, r12
   14e0a:	4f c1       	rjmp	.+670    	; 0x150aa <signalIoctl+0x1634>
   14e0c:	cc 24       	eor	r12, r12
   14e0e:	dd 24       	eor	r13, r13
   14e10:	76 01       	movw	r14, r12
   14e12:	4b c1       	rjmp	.+662    	; 0x150aa <signalIoctl+0x1634>
   14e14:	cc 24       	eor	r12, r12
   14e16:	dd 24       	eor	r13, r13
   14e18:	76 01       	movw	r14, r12
   14e1a:	47 c1       	rjmp	.+654    	; 0x150aa <signalIoctl+0x1634>
   14e1c:	cc 24       	eor	r12, r12
   14e1e:	dd 24       	eor	r13, r13
   14e20:	76 01       	movw	r14, r12
   14e22:	43 c1       	rjmp	.+646    	; 0x150aa <signalIoctl+0x1634>
   14e24:	cc 24       	eor	r12, r12
   14e26:	dd 24       	eor	r13, r13
   14e28:	76 01       	movw	r14, r12
   14e2a:	3f c1       	rjmp	.+638    	; 0x150aa <signalIoctl+0x1634>
   14e2c:	cc 24       	eor	r12, r12
   14e2e:	dd 24       	eor	r13, r13
   14e30:	76 01       	movw	r14, r12
   14e32:	3b c1       	rjmp	.+630    	; 0x150aa <signalIoctl+0x1634>
   14e34:	cc 24       	eor	r12, r12
   14e36:	dd 24       	eor	r13, r13
   14e38:	76 01       	movw	r14, r12
   14e3a:	37 c1       	rjmp	.+622    	; 0x150aa <signalIoctl+0x1634>
   14e3c:	cc 24       	eor	r12, r12
   14e3e:	dd 24       	eor	r13, r13
   14e40:	76 01       	movw	r14, r12
   14e42:	33 c1       	rjmp	.+614    	; 0x150aa <signalIoctl+0x1634>
   14e44:	cc 24       	eor	r12, r12
   14e46:	dd 24       	eor	r13, r13
   14e48:	76 01       	movw	r14, r12
   14e4a:	2f c1       	rjmp	.+606    	; 0x150aa <signalIoctl+0x1634>
   14e4c:	cc 24       	eor	r12, r12
   14e4e:	dd 24       	eor	r13, r13
   14e50:	76 01       	movw	r14, r12
   14e52:	2b c1       	rjmp	.+598    	; 0x150aa <signalIoctl+0x1634>
   14e54:	cc 24       	eor	r12, r12
   14e56:	dd 24       	eor	r13, r13
   14e58:	76 01       	movw	r14, r12
   14e5a:	27 c1       	rjmp	.+590    	; 0x150aa <signalIoctl+0x1634>
   14e5c:	cc 24       	eor	r12, r12
   14e5e:	dd 24       	eor	r13, r13
   14e60:	76 01       	movw	r14, r12
   14e62:	23 c1       	rjmp	.+582    	; 0x150aa <signalIoctl+0x1634>
   14e64:	cc 24       	eor	r12, r12
   14e66:	dd 24       	eor	r13, r13
   14e68:	76 01       	movw	r14, r12
   14e6a:	1f c1       	rjmp	.+574    	; 0x150aa <signalIoctl+0x1634>
   14e6c:	cc 24       	eor	r12, r12
   14e6e:	dd 24       	eor	r13, r13
   14e70:	76 01       	movw	r14, r12
   14e72:	1b c1       	rjmp	.+566    	; 0x150aa <signalIoctl+0x1634>
   14e74:	cc 24       	eor	r12, r12
   14e76:	dd 24       	eor	r13, r13
   14e78:	76 01       	movw	r14, r12
   14e7a:	17 c1       	rjmp	.+558    	; 0x150aa <signalIoctl+0x1634>
   14e7c:	cc 24       	eor	r12, r12
   14e7e:	dd 24       	eor	r13, r13
   14e80:	76 01       	movw	r14, r12
   14e82:	13 c1       	rjmp	.+550    	; 0x150aa <signalIoctl+0x1634>
   14e84:	cc 24       	eor	r12, r12
   14e86:	dd 24       	eor	r13, r13
   14e88:	76 01       	movw	r14, r12
   14e8a:	0f c1       	rjmp	.+542    	; 0x150aa <signalIoctl+0x1634>
   14e8c:	cc 24       	eor	r12, r12
   14e8e:	dd 24       	eor	r13, r13
   14e90:	76 01       	movw	r14, r12
   14e92:	0b c1       	rjmp	.+534    	; 0x150aa <signalIoctl+0x1634>
   14e94:	cc 24       	eor	r12, r12
   14e96:	dd 24       	eor	r13, r13
   14e98:	76 01       	movw	r14, r12
   14e9a:	07 c1       	rjmp	.+526    	; 0x150aa <signalIoctl+0x1634>
   14e9c:	cc 24       	eor	r12, r12
   14e9e:	dd 24       	eor	r13, r13
   14ea0:	76 01       	movw	r14, r12
   14ea2:	03 c1       	rjmp	.+518    	; 0x150aa <signalIoctl+0x1634>
   14ea4:	cc 24       	eor	r12, r12
   14ea6:	dd 24       	eor	r13, r13
   14ea8:	76 01       	movw	r14, r12
   14eaa:	ff c0       	rjmp	.+510    	; 0x150aa <signalIoctl+0x1634>
   14eac:	cc 24       	eor	r12, r12
   14eae:	dd 24       	eor	r13, r13
   14eb0:	76 01       	movw	r14, r12
   14eb2:	fb c0       	rjmp	.+502    	; 0x150aa <signalIoctl+0x1634>
   14eb4:	cc 24       	eor	r12, r12
   14eb6:	dd 24       	eor	r13, r13
   14eb8:	76 01       	movw	r14, r12
   14eba:	f7 c0       	rjmp	.+494    	; 0x150aa <signalIoctl+0x1634>
   14ebc:	cc 24       	eor	r12, r12
   14ebe:	dd 24       	eor	r13, r13
   14ec0:	76 01       	movw	r14, r12
   14ec2:	f3 c0       	rjmp	.+486    	; 0x150aa <signalIoctl+0x1634>
   14ec4:	cc 24       	eor	r12, r12
   14ec6:	dd 24       	eor	r13, r13
   14ec8:	76 01       	movw	r14, r12
   14eca:	ef c0       	rjmp	.+478    	; 0x150aa <signalIoctl+0x1634>
   14ecc:	cc 24       	eor	r12, r12
   14ece:	dd 24       	eor	r13, r13
   14ed0:	76 01       	movw	r14, r12
   14ed2:	eb c0       	rjmp	.+470    	; 0x150aa <signalIoctl+0x1634>
   14ed4:	cc 24       	eor	r12, r12
   14ed6:	dd 24       	eor	r13, r13
   14ed8:	76 01       	movw	r14, r12
   14eda:	e7 c0       	rjmp	.+462    	; 0x150aa <signalIoctl+0x1634>
   14edc:	cc 24       	eor	r12, r12
   14ede:	dd 24       	eor	r13, r13
   14ee0:	76 01       	movw	r14, r12
   14ee2:	e3 c0       	rjmp	.+454    	; 0x150aa <signalIoctl+0x1634>
   14ee4:	cc 24       	eor	r12, r12
   14ee6:	dd 24       	eor	r13, r13
   14ee8:	76 01       	movw	r14, r12
   14eea:	df c0       	rjmp	.+446    	; 0x150aa <signalIoctl+0x1634>
   14eec:	cc 24       	eor	r12, r12
   14eee:	dd 24       	eor	r13, r13
   14ef0:	76 01       	movw	r14, r12
   14ef2:	db c0       	rjmp	.+438    	; 0x150aa <signalIoctl+0x1634>
   14ef4:	cc 24       	eor	r12, r12
   14ef6:	dd 24       	eor	r13, r13
   14ef8:	76 01       	movw	r14, r12
   14efa:	d7 c0       	rjmp	.+430    	; 0x150aa <signalIoctl+0x1634>
   14efc:	cc 24       	eor	r12, r12
   14efe:	dd 24       	eor	r13, r13
   14f00:	76 01       	movw	r14, r12
   14f02:	d3 c0       	rjmp	.+422    	; 0x150aa <signalIoctl+0x1634>
   14f04:	cc 24       	eor	r12, r12
   14f06:	dd 24       	eor	r13, r13
   14f08:	76 01       	movw	r14, r12
   14f0a:	cf c0       	rjmp	.+414    	; 0x150aa <signalIoctl+0x1634>
   14f0c:	cc 24       	eor	r12, r12
   14f0e:	dd 24       	eor	r13, r13
   14f10:	76 01       	movw	r14, r12
   14f12:	cb c0       	rjmp	.+406    	; 0x150aa <signalIoctl+0x1634>
   14f14:	cc 24       	eor	r12, r12
   14f16:	dd 24       	eor	r13, r13
   14f18:	76 01       	movw	r14, r12
   14f1a:	c7 c0       	rjmp	.+398    	; 0x150aa <signalIoctl+0x1634>
   14f1c:	cc 24       	eor	r12, r12
   14f1e:	dd 24       	eor	r13, r13
   14f20:	76 01       	movw	r14, r12
   14f22:	c3 c0       	rjmp	.+390    	; 0x150aa <signalIoctl+0x1634>
   14f24:	cc 24       	eor	r12, r12
   14f26:	dd 24       	eor	r13, r13
   14f28:	76 01       	movw	r14, r12
   14f2a:	bf c0       	rjmp	.+382    	; 0x150aa <signalIoctl+0x1634>
   14f2c:	cc 24       	eor	r12, r12
   14f2e:	dd 24       	eor	r13, r13
   14f30:	76 01       	movw	r14, r12
   14f32:	bb c0       	rjmp	.+374    	; 0x150aa <signalIoctl+0x1634>
   14f34:	cc 24       	eor	r12, r12
   14f36:	dd 24       	eor	r13, r13
   14f38:	76 01       	movw	r14, r12
   14f3a:	b7 c0       	rjmp	.+366    	; 0x150aa <signalIoctl+0x1634>
   14f3c:	cc 24       	eor	r12, r12
   14f3e:	dd 24       	eor	r13, r13
   14f40:	76 01       	movw	r14, r12
   14f42:	b3 c0       	rjmp	.+358    	; 0x150aa <signalIoctl+0x1634>
   14f44:	cc 24       	eor	r12, r12
   14f46:	dd 24       	eor	r13, r13
   14f48:	76 01       	movw	r14, r12
   14f4a:	af c0       	rjmp	.+350    	; 0x150aa <signalIoctl+0x1634>
   14f4c:	cc 24       	eor	r12, r12
   14f4e:	dd 24       	eor	r13, r13
   14f50:	76 01       	movw	r14, r12
   14f52:	ab c0       	rjmp	.+342    	; 0x150aa <signalIoctl+0x1634>
   14f54:	cc 24       	eor	r12, r12
   14f56:	dd 24       	eor	r13, r13
   14f58:	76 01       	movw	r14, r12
   14f5a:	a7 c0       	rjmp	.+334    	; 0x150aa <signalIoctl+0x1634>
   14f5c:	cc 24       	eor	r12, r12
   14f5e:	dd 24       	eor	r13, r13
   14f60:	76 01       	movw	r14, r12
   14f62:	a3 c0       	rjmp	.+326    	; 0x150aa <signalIoctl+0x1634>
   14f64:	cc 24       	eor	r12, r12
   14f66:	dd 24       	eor	r13, r13
   14f68:	76 01       	movw	r14, r12
   14f6a:	9f c0       	rjmp	.+318    	; 0x150aa <signalIoctl+0x1634>
   14f6c:	cc 24       	eor	r12, r12
   14f6e:	dd 24       	eor	r13, r13
   14f70:	76 01       	movw	r14, r12
   14f72:	9b c0       	rjmp	.+310    	; 0x150aa <signalIoctl+0x1634>
   14f74:	cc 24       	eor	r12, r12
   14f76:	dd 24       	eor	r13, r13
   14f78:	76 01       	movw	r14, r12
   14f7a:	97 c0       	rjmp	.+302    	; 0x150aa <signalIoctl+0x1634>
   14f7c:	cc 24       	eor	r12, r12
   14f7e:	dd 24       	eor	r13, r13
   14f80:	76 01       	movw	r14, r12
   14f82:	93 c0       	rjmp	.+294    	; 0x150aa <signalIoctl+0x1634>
   14f84:	cc 24       	eor	r12, r12
   14f86:	dd 24       	eor	r13, r13
   14f88:	76 01       	movw	r14, r12
   14f8a:	8f c0       	rjmp	.+286    	; 0x150aa <signalIoctl+0x1634>
   14f8c:	cc 24       	eor	r12, r12
   14f8e:	dd 24       	eor	r13, r13
   14f90:	76 01       	movw	r14, r12
   14f92:	8b c0       	rjmp	.+278    	; 0x150aa <signalIoctl+0x1634>
   14f94:	cc 24       	eor	r12, r12
   14f96:	dd 24       	eor	r13, r13
   14f98:	76 01       	movw	r14, r12
   14f9a:	87 c0       	rjmp	.+270    	; 0x150aa <signalIoctl+0x1634>
   14f9c:	cc 24       	eor	r12, r12
   14f9e:	dd 24       	eor	r13, r13
   14fa0:	76 01       	movw	r14, r12
   14fa2:	83 c0       	rjmp	.+262    	; 0x150aa <signalIoctl+0x1634>
   14fa4:	cc 24       	eor	r12, r12
   14fa6:	dd 24       	eor	r13, r13
   14fa8:	76 01       	movw	r14, r12
   14faa:	7f c0       	rjmp	.+254    	; 0x150aa <signalIoctl+0x1634>
   14fac:	cc 24       	eor	r12, r12
   14fae:	dd 24       	eor	r13, r13
   14fb0:	76 01       	movw	r14, r12
   14fb2:	7b c0       	rjmp	.+246    	; 0x150aa <signalIoctl+0x1634>
   14fb4:	cc 24       	eor	r12, r12
   14fb6:	dd 24       	eor	r13, r13
   14fb8:	76 01       	movw	r14, r12
   14fba:	77 c0       	rjmp	.+238    	; 0x150aa <signalIoctl+0x1634>
   14fbc:	cc 24       	eor	r12, r12
   14fbe:	dd 24       	eor	r13, r13
   14fc0:	76 01       	movw	r14, r12
   14fc2:	73 c0       	rjmp	.+230    	; 0x150aa <signalIoctl+0x1634>
   14fc4:	cc 24       	eor	r12, r12
   14fc6:	dd 24       	eor	r13, r13
   14fc8:	76 01       	movw	r14, r12
   14fca:	6f c0       	rjmp	.+222    	; 0x150aa <signalIoctl+0x1634>
   14fcc:	cc 24       	eor	r12, r12
   14fce:	dd 24       	eor	r13, r13
   14fd0:	76 01       	movw	r14, r12
   14fd2:	6b c0       	rjmp	.+214    	; 0x150aa <signalIoctl+0x1634>
   14fd4:	cc 24       	eor	r12, r12
   14fd6:	dd 24       	eor	r13, r13
   14fd8:	76 01       	movw	r14, r12
   14fda:	67 c0       	rjmp	.+206    	; 0x150aa <signalIoctl+0x1634>
   14fdc:	cc 24       	eor	r12, r12
   14fde:	dd 24       	eor	r13, r13
   14fe0:	76 01       	movw	r14, r12
   14fe2:	63 c0       	rjmp	.+198    	; 0x150aa <signalIoctl+0x1634>
   14fe4:	cc 24       	eor	r12, r12
   14fe6:	dd 24       	eor	r13, r13
   14fe8:	76 01       	movw	r14, r12
   14fea:	5f c0       	rjmp	.+190    	; 0x150aa <signalIoctl+0x1634>
   14fec:	cc 24       	eor	r12, r12
   14fee:	dd 24       	eor	r13, r13
   14ff0:	76 01       	movw	r14, r12
   14ff2:	5b c0       	rjmp	.+182    	; 0x150aa <signalIoctl+0x1634>
   14ff4:	cc 24       	eor	r12, r12
   14ff6:	dd 24       	eor	r13, r13
   14ff8:	76 01       	movw	r14, r12
   14ffa:	57 c0       	rjmp	.+174    	; 0x150aa <signalIoctl+0x1634>
   14ffc:	cc 24       	eor	r12, r12
   14ffe:	dd 24       	eor	r13, r13
   15000:	76 01       	movw	r14, r12
   15002:	53 c0       	rjmp	.+166    	; 0x150aa <signalIoctl+0x1634>
   15004:	cc 24       	eor	r12, r12
   15006:	dd 24       	eor	r13, r13
   15008:	76 01       	movw	r14, r12
   1500a:	4f c0       	rjmp	.+158    	; 0x150aa <signalIoctl+0x1634>
   1500c:	cc 24       	eor	r12, r12
   1500e:	dd 24       	eor	r13, r13
   15010:	76 01       	movw	r14, r12
   15012:	4b c0       	rjmp	.+150    	; 0x150aa <signalIoctl+0x1634>
   15014:	cc 24       	eor	r12, r12
   15016:	dd 24       	eor	r13, r13
   15018:	76 01       	movw	r14, r12
   1501a:	47 c0       	rjmp	.+142    	; 0x150aa <signalIoctl+0x1634>
   1501c:	cc 24       	eor	r12, r12
   1501e:	dd 24       	eor	r13, r13
   15020:	76 01       	movw	r14, r12
   15022:	43 c0       	rjmp	.+134    	; 0x150aa <signalIoctl+0x1634>
   15024:	cc 24       	eor	r12, r12
   15026:	dd 24       	eor	r13, r13
   15028:	76 01       	movw	r14, r12
   1502a:	3f c0       	rjmp	.+126    	; 0x150aa <signalIoctl+0x1634>
   1502c:	cc 24       	eor	r12, r12
   1502e:	dd 24       	eor	r13, r13
   15030:	76 01       	movw	r14, r12
   15032:	3b c0       	rjmp	.+118    	; 0x150aa <signalIoctl+0x1634>
   15034:	cc 24       	eor	r12, r12
   15036:	dd 24       	eor	r13, r13
   15038:	76 01       	movw	r14, r12
   1503a:	37 c0       	rjmp	.+110    	; 0x150aa <signalIoctl+0x1634>
   1503c:	cc 24       	eor	r12, r12
   1503e:	dd 24       	eor	r13, r13
   15040:	76 01       	movw	r14, r12
   15042:	33 c0       	rjmp	.+102    	; 0x150aa <signalIoctl+0x1634>
   15044:	cc 24       	eor	r12, r12
   15046:	dd 24       	eor	r13, r13
   15048:	76 01       	movw	r14, r12
   1504a:	2f c0       	rjmp	.+94     	; 0x150aa <signalIoctl+0x1634>
   1504c:	cc 24       	eor	r12, r12
   1504e:	dd 24       	eor	r13, r13
   15050:	76 01       	movw	r14, r12
   15052:	2b c0       	rjmp	.+86     	; 0x150aa <signalIoctl+0x1634>
   15054:	cc 24       	eor	r12, r12
   15056:	dd 24       	eor	r13, r13
   15058:	76 01       	movw	r14, r12
   1505a:	27 c0       	rjmp	.+78     	; 0x150aa <signalIoctl+0x1634>
   1505c:	cc 24       	eor	r12, r12
   1505e:	dd 24       	eor	r13, r13
   15060:	76 01       	movw	r14, r12
   15062:	23 c0       	rjmp	.+70     	; 0x150aa <signalIoctl+0x1634>
   15064:	cc 24       	eor	r12, r12
   15066:	dd 24       	eor	r13, r13
   15068:	76 01       	movw	r14, r12
   1506a:	1f c0       	rjmp	.+62     	; 0x150aa <signalIoctl+0x1634>
   1506c:	cc 24       	eor	r12, r12
   1506e:	dd 24       	eor	r13, r13
   15070:	76 01       	movw	r14, r12
   15072:	1b c0       	rjmp	.+54     	; 0x150aa <signalIoctl+0x1634>
   15074:	cc 24       	eor	r12, r12
   15076:	dd 24       	eor	r13, r13
   15078:	76 01       	movw	r14, r12
   1507a:	17 c0       	rjmp	.+46     	; 0x150aa <signalIoctl+0x1634>
   1507c:	cc 24       	eor	r12, r12
   1507e:	dd 24       	eor	r13, r13
   15080:	76 01       	movw	r14, r12
   15082:	13 c0       	rjmp	.+38     	; 0x150aa <signalIoctl+0x1634>
   15084:	cc 24       	eor	r12, r12
   15086:	dd 24       	eor	r13, r13
   15088:	76 01       	movw	r14, r12
   1508a:	0f c0       	rjmp	.+30     	; 0x150aa <signalIoctl+0x1634>
   1508c:	cc 24       	eor	r12, r12
   1508e:	dd 24       	eor	r13, r13
   15090:	76 01       	movw	r14, r12
   15092:	0b c0       	rjmp	.+22     	; 0x150aa <signalIoctl+0x1634>
   15094:	cc 24       	eor	r12, r12
   15096:	dd 24       	eor	r13, r13
   15098:	76 01       	movw	r14, r12
   1509a:	07 c0       	rjmp	.+14     	; 0x150aa <signalIoctl+0x1634>
   1509c:	cc 24       	eor	r12, r12
   1509e:	dd 24       	eor	r13, r13
   150a0:	76 01       	movw	r14, r12
   150a2:	03 c0       	rjmp	.+6      	; 0x150aa <signalIoctl+0x1634>
   150a4:	cc 24       	eor	r12, r12
   150a6:	dd 24       	eor	r13, r13
   150a8:	76 01       	movw	r14, r12
   }/*End switch( (t_signalCmd)s_command)*/

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
   150aa:	80 91 74 2b 	lds	r24, 0x2B74
   150ae:	90 91 75 2b 	lds	r25, 0x2B75
   150b2:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return i_return;

}/*End signalIoctl*/
   150b6:	b6 01       	movw	r22, r12
   150b8:	c7 01       	movw	r24, r14
   150ba:	0f 90       	pop	r0
   150bc:	0f 90       	pop	r0
   150be:	df 91       	pop	r29
   150c0:	cf 91       	pop	r28
   150c2:	1f 91       	pop	r17
   150c4:	ff 90       	pop	r15
   150c6:	ef 90       	pop	r14
   150c8:	df 90       	pop	r13
   150ca:	cf 90       	pop	r12
   150cc:	08 95       	ret

000150ce <signalOpen>:

/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
t_error signalOpen( t_DEVHANDLE t_devHandle)
{
   150ce:	cf 93       	push	r28
   150d0:	df 93       	push	r29
   150d2:	0f 92       	push	r0
   150d4:	0f 92       	push	r0
   150d6:	cd b7       	in	r28, 0x3d	; 61
   150d8:	de b7       	in	r29, 0x3e	; 62
   150da:	89 83       	std	Y+1, r24	; 0x01
   150dc:	9a 83       	std	Y+2, r25	; 0x02

   /*------------------------------------------------------------------------*
    * We are going to access global memory or a register, so perform lock
    *------------------------------------------------------------------------*/
   arb_wait( gt_signalDev.t_mutex,
   150de:	80 91 74 2b 	lds	r24, 0x2B74
   150e2:	90 91 75 2b 	lds	r25, 0x2B75
   150e6:	60 e0       	ldi	r22, 0x00	; 0
   150e8:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
             0);

   gt_signalDev.c_numUsers++;
   150ec:	80 91 7b 2b 	lds	r24, 0x2B7B
   150f0:	8f 5f       	subi	r24, 0xFF	; 255
   150f2:	80 93 7b 2b 	sts	0x2B7B, r24

   /*------------------------------------------------------------------------*
    * Release the lock
    *------------------------------------------------------------------------*/
   arb_signal( gt_signalDev.t_mutex);
   150f6:	80 91 74 2b 	lds	r24, 0x2B74
   150fa:	90 91 75 2b 	lds	r25, 0x2B75
   150fe:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

   return ARB_PASSED;

}/*End signalOpen*/
   15102:	80 e0       	ldi	r24, 0x00	; 0
   15104:	0f 90       	pop	r0
   15106:	0f 90       	pop	r0
   15108:	df 91       	pop	r29
   1510a:	cf 91       	pop	r28
   1510c:	08 95       	ret

0001510e <drv_signalInit>:
   return ARB_PASSED;

}/*End signalClose*/

t_error drv_signalInit( t_signalSetup t_setup)
{
   1510e:	0f 93       	push	r16
   15110:	1f 93       	push	r17
   15112:	cf 93       	push	r28
   15114:	df 93       	push	r29
   15116:	cd b7       	in	r28, 0x3d	; 61
   15118:	de b7       	in	r29, 0x3e	; 62
   1511a:	2a 97       	sbiw	r28, 0x0a	; 10
   1511c:	cd bf       	out	0x3d, r28	; 61
   1511e:	de bf       	out	0x3e, r29	; 62
   15120:	14 2f       	mov	r17, r20
   15122:	4e 83       	std	Y+6, r20	; 0x06
   15124:	5f 83       	std	Y+7, r21	; 0x07
   15126:	68 87       	std	Y+8, r22	; 0x08
   15128:	79 87       	std	Y+9, r23	; 0x09
   1512a:	8a 87       	std	Y+10, r24	; 0x0a
   1512c:	78 2f       	mov	r23, r24
   int8_t c_index;

   /*------------------------------------------------------------------------*
    * Make sure the kernel is aware that a new device has been loaded.
    *------------------------------------------------------------------------*/
   t_err = arb_registerDevice( "signalDevice0",
   1512e:	8b e5       	ldi	r24, 0x5B	; 91
   15130:	90 e2       	ldi	r25, 0x20	; 32
   15132:	60 e0       	ldi	r22, 0x00	; 0
   15134:	49 e6       	ldi	r20, 0x69	; 105
   15136:	50 e2       	ldi	r21, 0x20	; 32
   15138:	0e 94 13 bf 	call	0x17e26	; 0x17e26 <arb_registerDevice>
   1513c:	08 2f       	mov	r16, r24
                               arb_createDevId( t_setup.c_majorNum,
                               0),
                               &gat_signalDevOps);

   if( t_err < 0)
   1513e:	87 fd       	sbrc	r24, 7
   15140:	bd c0       	rjmp	.+378    	; 0x152bc <drv_signalInit+0x1ae>

   /*------------------------------------------------------------------------*
    * Request a semaphore from the kernel. Since the signal port is a shared
    * resource we need to have all actions on it be mutually exclusive.
    *------------------------------------------------------------------------*/
   gt_signalDev.t_mutex = arb_semaphoreCreate( MUTEX);
   15142:	82 e0       	ldi	r24, 0x02	; 2
   15144:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
   15148:	80 93 74 2b 	sts	0x2B74, r24
   1514c:	90 93 75 2b 	sts	0x2B75, r25

   if( gt_signalDev.t_mutex < 0)
   15150:	20 91 74 2b 	lds	r18, 0x2B74
   15154:	30 91 75 2b 	lds	r19, 0x2B75
   15158:	37 ff       	sbrs	r19, 7
   1515a:	06 c0       	rjmp	.+12     	; 0x15168 <drv_signalInit+0x5a>
   {
      t_err = (t_error)gt_signalDev.t_mutex;
   1515c:	80 91 74 2b 	lds	r24, 0x2B74
   15160:	90 91 75 2b 	lds	r25, 0x2B75
   15164:	08 2f       	mov	r16, r24
      goto failed2;
   15166:	a4 c0       	rjmp	.+328    	; 0x152b0 <drv_signalInit+0x1a2>
   }/*End if( gt_signalDev.t_mutex < 0)*/

   /*------------------------------------------------------------------------*
    * We dont have any users attached to this device
    *------------------------------------------------------------------------*/
   gt_signalDev.c_numUsers = 0;
   15168:	10 92 7b 2b 	sts	0x2B7B, r1

   /*------------------------------------------------------------------------*
    * Configure the pins that control the led's...
    *------------------------------------------------------------------------*/
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   1516c:	10 93 76 2b 	sts	0x2B76, r17
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
      t_setup.ac_ledPins[c_index];
   15170:	3f 81       	ldd	r19, Y+7	; 0x07
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
   15172:	30 93 77 2b 	sts	0x2B77, r19
      t_setup.ac_ledPins[c_index];
   15176:	88 85       	ldd	r24, Y+8	; 0x08
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
   15178:	80 93 78 2b 	sts	0x2B78, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
   1517c:	38 2b       	or	r19, r24
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
      t_setup.ac_ledPins[c_index];
   1517e:	89 85       	ldd	r24, Y+9	; 0x09
   gt_signalDev.c_signalPort = t_setup.c_signalPort;
   gt_signalDev.c_allLedMask = 0;

   for( c_index = 0; c_index < SIGNAL_MAX_LEDS; c_index++)
   {
      gt_signalDev.ac_ledPins[c_index] =
   15180:	80 93 79 2b 	sts	0x2B79, r24
      t_setup.ac_ledPins[c_index];
      gt_signalDev.c_allLedMask |= t_setup.ac_ledPins[c_index];
   15184:	38 2b       	or	r19, r24
   15186:	30 93 7a 2b 	sts	0x2B7A, r19
   }

   t_conf.c_inputMask    = 0;
   1518a:	19 82       	std	Y+1, r1	; 0x01
   t_conf.c_outputMask   = gt_signalDev.c_allLedMask;
   1518c:	3a 83       	std	Y+2, r19	; 0x02
   t_conf.b_setOutputLow = false;
   1518e:	1b 82       	std	Y+3, r1	; 0x03
   t_conf.t_outConf      = TOTEM;
   15190:	1d 82       	std	Y+5, r1	; 0x05

   if( hal_configureGpioPort( t_setup.c_signalPort, t_conf) < 0)
   15192:	81 2f       	mov	r24, r17
   15194:	20 e0       	ldi	r18, 0x00	; 0
   15196:	40 e0       	ldi	r20, 0x00	; 0
   15198:	5c 81       	ldd	r21, Y+4	; 0x04
   1519a:	60 e0       	ldi	r22, 0x00	; 0
   1519c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <hal_configureGpioPort>
   151a0:	87 fd       	sbrc	r24, 7
   151a2:	7f c0       	rjmp	.+254    	; 0x152a2 <drv_signalInit+0x194>
   }

   /*------------------------------------------------------------------------*
    * Make sure the LED's are off - logic high is off...
    *------------------------------------------------------------------------*/
   hal_gpioOn( gt_signalDev.c_signalPort,
   151a4:	80 91 7a 2b 	lds	r24, 0x2B7A
   static inline t_gpioError __attribute__ ( (always_inline)) hal_gpioOn(
   t_gpioPort t_port, uint8_t    c_pin)
   {
      t_gpioError t_err = GPIO_PASSED;

      switch( t_port)
   151a8:	90 91 76 2b 	lds	r25, 0x2B76
   151ac:	95 30       	cpi	r25, 0x05	; 5
   151ae:	09 f4       	brne	.+2      	; 0x151b2 <drv_signalInit+0xa4>
   151b0:	4d c0       	rjmp	.+154    	; 0x1524c <drv_signalInit+0x13e>
   151b2:	96 30       	cpi	r25, 0x06	; 6
   151b4:	80 f4       	brcc	.+32     	; 0x151d6 <drv_signalInit+0xc8>
   151b6:	92 30       	cpi	r25, 0x02	; 2
   151b8:	89 f1       	breq	.+98     	; 0x1521c <drv_signalInit+0x10e>
   151ba:	93 30       	cpi	r25, 0x03	; 3
   151bc:	30 f4       	brcc	.+12     	; 0x151ca <drv_signalInit+0xbc>
   151be:	99 23       	and	r25, r25
   151c0:	e9 f0       	breq	.+58     	; 0x151fc <drv_signalInit+0xee>
   151c2:	91 30       	cpi	r25, 0x01	; 1
   151c4:	09 f0       	breq	.+2      	; 0x151c8 <drv_signalInit+0xba>
   151c6:	79 c0       	rjmp	.+242    	; 0x152ba <drv_signalInit+0x1ac>
   151c8:	21 c0       	rjmp	.+66     	; 0x1520c <drv_signalInit+0xfe>
   151ca:	93 30       	cpi	r25, 0x03	; 3
   151cc:	79 f1       	breq	.+94     	; 0x1522c <drv_signalInit+0x11e>
   151ce:	94 30       	cpi	r25, 0x04	; 4
   151d0:	09 f0       	breq	.+2      	; 0x151d4 <drv_signalInit+0xc6>
   151d2:	73 c0       	rjmp	.+230    	; 0x152ba <drv_signalInit+0x1ac>
   151d4:	33 c0       	rjmp	.+102    	; 0x1523c <drv_signalInit+0x12e>
   151d6:	98 30       	cpi	r25, 0x08	; 8
   151d8:	09 f4       	brne	.+2      	; 0x151dc <drv_signalInit+0xce>
   151da:	4d c0       	rjmp	.+154    	; 0x15276 <drv_signalInit+0x168>
   151dc:	99 30       	cpi	r25, 0x09	; 9
   151de:	38 f4       	brcc	.+14     	; 0x151ee <drv_signalInit+0xe0>
   151e0:	96 30       	cpi	r25, 0x06	; 6
   151e2:	09 f4       	brne	.+2      	; 0x151e6 <drv_signalInit+0xd8>
   151e4:	3a c0       	rjmp	.+116    	; 0x1525a <drv_signalInit+0x14c>
   151e6:	97 30       	cpi	r25, 0x07	; 7
   151e8:	09 f0       	breq	.+2      	; 0x151ec <drv_signalInit+0xde>
   151ea:	67 c0       	rjmp	.+206    	; 0x152ba <drv_signalInit+0x1ac>
   151ec:	3d c0       	rjmp	.+122    	; 0x15268 <drv_signalInit+0x15a>
   151ee:	99 30       	cpi	r25, 0x09	; 9
   151f0:	09 f4       	brne	.+2      	; 0x151f4 <drv_signalInit+0xe6>
   151f2:	48 c0       	rjmp	.+144    	; 0x15284 <drv_signalInit+0x176>
   151f4:	9a 30       	cpi	r25, 0x0A	; 10
   151f6:	09 f0       	breq	.+2      	; 0x151fa <drv_signalInit+0xec>
   151f8:	60 c0       	rjmp	.+192    	; 0x152ba <drv_signalInit+0x1ac>
   151fa:	4b c0       	rjmp	.+150    	; 0x15292 <drv_signalInit+0x184>
         case GPIO_PORTA:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTA.DIR & c_pin))
   151fc:	90 91 00 06 	lds	r25, 0x0600
   15200:	98 23       	and	r25, r24
   15202:	09 f4       	brne	.+2      	; 0x15206 <drv_signalInit+0xf8>
   15204:	5a c0       	rjmp	.+180    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTA.OUTSET = c_pin;
   15206:	e0 e0       	ldi	r30, 0x00	; 0
   15208:	f6 e0       	ldi	r31, 0x06	; 6
   1520a:	49 c0       	rjmp	.+146    	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTB:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTB.DIR & c_pin))
   1520c:	90 91 20 06 	lds	r25, 0x0620
   15210:	98 23       	and	r25, r24
   15212:	09 f4       	brne	.+2      	; 0x15216 <drv_signalInit+0x108>
   15214:	52 c0       	rjmp	.+164    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTB.OUTSET = c_pin;
   15216:	e0 e2       	ldi	r30, 0x20	; 32
   15218:	f6 e0       	ldi	r31, 0x06	; 6
   1521a:	41 c0       	rjmp	.+130    	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTC:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTC.DIR & c_pin))
   1521c:	90 91 40 06 	lds	r25, 0x0640
   15220:	98 23       	and	r25, r24
   15222:	09 f4       	brne	.+2      	; 0x15226 <drv_signalInit+0x118>
   15224:	4a c0       	rjmp	.+148    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTC.OUTSET = c_pin;
   15226:	e0 e4       	ldi	r30, 0x40	; 64
   15228:	f6 e0       	ldi	r31, 0x06	; 6
   1522a:	39 c0       	rjmp	.+114    	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTD:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTD.DIR & c_pin))
   1522c:	90 91 60 06 	lds	r25, 0x0660
   15230:	98 23       	and	r25, r24
   15232:	09 f4       	brne	.+2      	; 0x15236 <drv_signalInit+0x128>
   15234:	42 c0       	rjmp	.+132    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTD.OUTSET = c_pin;
   15236:	e0 e6       	ldi	r30, 0x60	; 96
   15238:	f6 e0       	ldi	r31, 0x06	; 6
   1523a:	31 c0       	rjmp	.+98     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTE:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTE.DIR & c_pin))
   1523c:	90 91 80 06 	lds	r25, 0x0680
   15240:	98 23       	and	r25, r24
   15242:	09 f4       	brne	.+2      	; 0x15246 <drv_signalInit+0x138>
   15244:	3a c0       	rjmp	.+116    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTE.OUTSET = c_pin;
   15246:	e0 e8       	ldi	r30, 0x80	; 128
   15248:	f6 e0       	ldi	r31, 0x06	; 6
   1524a:	29 c0       	rjmp	.+82     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTF:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTF.DIR & c_pin))
   1524c:	90 91 a0 06 	lds	r25, 0x06A0
   15250:	98 23       	and	r25, r24
   15252:	99 f1       	breq	.+102    	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTF.OUTSET = c_pin;
   15254:	e0 ea       	ldi	r30, 0xA0	; 160
   15256:	f6 e0       	ldi	r31, 0x06	; 6
   15258:	22 c0       	rjmp	.+68     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTH:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTH.DIR & c_pin))
   1525a:	90 91 e0 06 	lds	r25, 0x06E0
   1525e:	98 23       	and	r25, r24
   15260:	61 f1       	breq	.+88     	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTH.OUTSET = c_pin;
   15262:	e0 ee       	ldi	r30, 0xE0	; 224
   15264:	f6 e0       	ldi	r31, 0x06	; 6
   15266:	1b c0       	rjmp	.+54     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTJ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTJ.DIR & c_pin))
   15268:	90 91 00 07 	lds	r25, 0x0700
   1526c:	98 23       	and	r25, r24
   1526e:	29 f1       	breq	.+74     	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTJ.OUTSET = c_pin;
   15270:	e0 e0       	ldi	r30, 0x00	; 0
   15272:	f7 e0       	ldi	r31, 0x07	; 7
   15274:	14 c0       	rjmp	.+40     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTK:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTK.DIR & c_pin))
   15276:	90 91 20 07 	lds	r25, 0x0720
   1527a:	98 23       	and	r25, r24
   1527c:	f1 f0       	breq	.+60     	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTK.OUTSET = c_pin;
   1527e:	e0 e2       	ldi	r30, 0x20	; 32
   15280:	f7 e0       	ldi	r31, 0x07	; 7
   15282:	0d c0       	rjmp	.+26     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTQ:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTQ.DIR & c_pin))
   15284:	90 91 c0 07 	lds	r25, 0x07C0
   15288:	98 23       	and	r25, r24
   1528a:	b9 f0       	breq	.+46     	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTQ.OUTSET = c_pin;
   1528c:	e0 ec       	ldi	r30, 0xC0	; 192
   1528e:	f7 e0       	ldi	r31, 0x07	; 7
   15290:	06 c0       	rjmp	.+12     	; 0x1529e <drv_signalInit+0x190>
         case GPIO_PORTR:

            /*---------------------------------------------------------------*
             * Make sure the requested pin is configured as an output
             *---------------------------------------------------------------*/
            if( !(PORTR.DIR & c_pin))
   15292:	90 91 e0 07 	lds	r25, 0x07E0
   15296:	98 23       	and	r25, r24
   15298:	81 f0       	breq	.+32     	; 0x152ba <drv_signalInit+0x1ac>
               t_err = GPIO_PIN_IS_INPUT;
            else
               PORTR.OUTSET = c_pin;
   1529a:	e0 ee       	ldi	r30, 0xE0	; 224
   1529c:	f7 e0       	ldi	r31, 0x07	; 7
   1529e:	85 83       	std	Z+5, r24	; 0x05
   152a0:	0c c0       	rjmp	.+24     	; 0x152ba <drv_signalInit+0x1ac>

   return ARB_PASSED;

failed3:

   arb_semaphoreDestroy( gt_signalDev.t_mutex);
   152a2:	80 91 74 2b 	lds	r24, 0x2B74
   152a6:	90 91 75 2b 	lds	r25, 0x2B75
   152aa:	0e 94 f8 cd 	call	0x19bf0	; 0x19bf0 <arb_semaphoreDestroy>
   t_conf.b_setOutputLow = false;
   t_conf.t_outConf      = TOTEM;

   if( hal_configureGpioPort( t_setup.c_signalPort, t_conf) < 0)
   {
      t_err = ARB_HAL_ERROR;
   152ae:	06 ef       	ldi	r16, 0xF6	; 246

   arb_semaphoreDestroy( gt_signalDev.t_mutex);

failed2:

   arb_destroyDevice( "signalDevice0");
   152b0:	8b e5       	ldi	r24, 0x5B	; 91
   152b2:	90 e2       	ldi	r25, 0x20	; 32
   152b4:	0e 94 b4 bf 	call	0x17f68	; 0x17f68 <arb_destroyDevice>
   152b8:	01 c0       	rjmp	.+2      	; 0x152bc <drv_signalInit+0x1ae>
    * Make sure the LED's are off - logic high is off...
    *------------------------------------------------------------------------*/
   hal_gpioOn( gt_signalDev.c_signalPort,
               gt_signalDev.c_allLedMask);

   return ARB_PASSED;
   152ba:	00 e0       	ldi	r16, 0x00	; 0

failed1:

   return t_err;

}/*End drv_signalInit*/
   152bc:	80 2f       	mov	r24, r16
   152be:	2a 96       	adiw	r28, 0x0a	; 10
   152c0:	cd bf       	out	0x3d, r28	; 61
   152c2:	de bf       	out	0x3e, r29	; 62
   152c4:	df 91       	pop	r29
   152c6:	cf 91       	pop	r28
   152c8:	1f 91       	pop	r17
   152ca:	0f 91       	pop	r16
   152cc:	08 95       	ret

000152ce <usr_appInit>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
void usr_appInit( void)
{
   152ce:	0f 93       	push	r16
   152d0:	1f 93       	push	r17
   152d2:	cf 93       	push	r28
   152d4:	df 93       	push	r29
   152d6:	cd b7       	in	r28, 0x3d	; 61
   152d8:	de b7       	in	r29, 0x3e	; 62
   152da:	2b 97       	sbiw	r28, 0x0b	; 11
   152dc:	cd bf       	out	0x3d, r28	; 61
   152de:	de bf       	out	0x3e, r29	; 62
    * Register the console driver with the kernel.
    *------------------------------------------------------------------------*/
   /*------------------------------------------------------------------------*
    * Register the console driver with the kernel.
    *------------------------------------------------------------------------*/
   t_conSetup.c_uartId   = UART_1;
   152e0:	1a 86       	std	Y+10, r1	; 0x0a
   t_conSetup.i_baudRate = 115200;
   152e2:	80 e0       	ldi	r24, 0x00	; 0
   152e4:	92 ec       	ldi	r25, 0xC2	; 194
   152e6:	a1 e0       	ldi	r26, 0x01	; 1
   152e8:	b0 e0       	ldi	r27, 0x00	; 0
   152ea:	48 2f       	mov	r20, r24
   152ec:	8e 83       	std	Y+6, r24	; 0x06
   152ee:	9f 83       	std	Y+7, r25	; 0x07
   152f0:	a8 87       	std	Y+8, r26	; 0x08
   152f2:	b9 87       	std	Y+9, r27	; 0x09
   t_conSetup.c_majorNum = 1;
   152f4:	11 e0       	ldi	r17, 0x01	; 1
   152f6:	1b 87       	std	Y+11, r17	; 0x0b
   if( drv_consoleInit( t_conSetup) < 0)
   152f8:	5f 81       	ldd	r21, Y+7	; 0x07
   152fa:	68 85       	ldd	r22, Y+8	; 0x08
   152fc:	79 85       	ldd	r23, Y+9	; 0x09
   152fe:	80 e0       	ldi	r24, 0x00	; 0
   15300:	91 e0       	ldi	r25, 0x01	; 1
   15302:	0e 94 ec 42 	call	0x85d8	; 0x85d8 <drv_consoleInit>
   15306:	87 fd       	sbrc	r24, 7
   15308:	33 c0       	rjmp	.+102    	; 0x15370 <usr_appInit+0xa2>
      exit(0);

   /*------------------------------------------------------------------------*
    * Register the LED signaling driver with the kernel.
    *------------------------------------------------------------------------*/
   t_sigSetup.c_signalPort  = GPIO_PORTK;
   1530a:	88 e0       	ldi	r24, 0x08	; 8
   1530c:	89 83       	std	Y+1, r24	; 0x01
   t_sigSetup.ac_ledPins[0] = PIN_0; /*Red LED pin*/
   1530e:	1a 83       	std	Y+2, r17	; 0x02
   t_sigSetup.ac_ledPins[1] = PIN_1; /*Yellow LED pin*/
   15310:	82 e0       	ldi	r24, 0x02	; 2
   15312:	8b 83       	std	Y+3, r24	; 0x03
   t_sigSetup.ac_ledPins[2] = PIN_2; /*Green LED pin*/
   15314:	94 e0       	ldi	r25, 0x04	; 4
   15316:	9c 83       	std	Y+4, r25	; 0x04
   t_sigSetup.c_majorNum    = 2;
   15318:	8d 83       	std	Y+5, r24	; 0x05

   if( drv_signalInit( t_sigSetup) < 0)
   1531a:	48 e0       	ldi	r20, 0x08	; 8
   1531c:	51 e0       	ldi	r21, 0x01	; 1
   1531e:	62 e0       	ldi	r22, 0x02	; 2
   15320:	74 e0       	ldi	r23, 0x04	; 4
   15322:	0e 94 87 a8 	call	0x1510e	; 0x1510e <drv_signalInit>
   15326:	87 fd       	sbrc	r24, 7
   15328:	23 c0       	rjmp	.+70     	; 0x15370 <usr_appInit+0xa2>

   /*------------------------------------------------------------------------*
    * Register the INS driver with the kernel. The driver uses a TWI on
    * PIN_0 and PIN_1 (of PORT D).
    *------------------------------------------------------------------------*/
   if( drv_insInit() < 0)
   1532a:	0e 94 98 9b 	call	0x13730	; 0x13730 <drv_insInit>
   1532e:	87 fd       	sbrc	r24, 7
   15330:	1f c0       	rjmp	.+62     	; 0x15370 <usr_appInit+0xa2>
   usr_driverRegistration();

   /*------------------------------------------------------------------------*
    * Initialize the debug interface.
    *------------------------------------------------------------------------*/
   if( arb_printfInit( "consoleDevice0",
   15332:	83 e7       	ldi	r24, 0x73	; 115
   15334:	90 e2       	ldi	r25, 0x20	; 32
   15336:	6c e2       	ldi	r22, 0x2C	; 44
   15338:	71 e0       	ldi	r23, 0x01	; 1
   1533a:	40 e0       	ldi	r20, 0x00	; 0
   1533c:	50 e0       	ldi	r21, 0x00	; 0
   1533e:	0e 94 bb c2 	call	0x18576	; 0x18576 <arb_printfInit>
   15342:	87 fd       	sbrc	r24, 7
   15344:	15 c0       	rjmp	.+42     	; 0x15370 <usr_appInit+0xa2>
   }

   /*------------------------------------------------------------------------*
    * Initialize the console interface.
    *------------------------------------------------------------------------*/
   if( arb_consoleInit( "consoleDevice0",
   15346:	83 e7       	ldi	r24, 0x73	; 115
   15348:	90 e2       	ldi	r25, 0x20	; 32
   1534a:	62 e8       	ldi	r22, 0x82	; 130
   1534c:	70 e2       	ldi	r23, 0x20	; 32
   1534e:	40 e0       	ldi	r20, 0x00	; 0
   15350:	54 e0       	ldi	r21, 0x04	; 4
   15352:	2e ef       	ldi	r18, 0xFE	; 254
   15354:	07 ec       	ldi	r16, 0xC7	; 199
   15356:	1c ea       	ldi	r17, 0xAC	; 172
   15358:	0e 94 98 bc 	call	0x17930	; 0x17930 <arb_consoleInit>
   1535c:	87 fd       	sbrc	r24, 7
   1535e:	08 c0       	rjmp	.+16     	; 0x15370 <usr_appInit+0xa2>
   }

   /*------------------------------------------------------------------------*
    * Initialize the scheduler specifically for this application.
    *------------------------------------------------------------------------*/
   if( arb_schedulerInit( PRIORITY,
   15360:	81 e0       	ldi	r24, 0x01	; 1
   15362:	60 e8       	ldi	r22, 0x80	; 128
   15364:	71 e0       	ldi	r23, 0x01	; 1
   15366:	4e e1       	ldi	r20, 0x1E	; 30
   15368:	0e 94 dc c6 	call	0x18db8	; 0x18db8 <arb_schedulerInit>
   1536c:	87 ff       	sbrs	r24, 7
   1536e:	04 c0       	rjmp	.+8      	; 0x15378 <usr_appInit+0xaa>
                          ARB_STACK_384B,
                          TIMER_7) < 0)
   {
      exit(0);
   15370:	80 e0       	ldi	r24, 0x00	; 0
   15372:	90 e0       	ldi	r25, 0x00	; 0
   15374:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <exit>
    * Enable global interrupts, configure the CPU frequency, and register
    * drivers with the kernel for this particular computing platform.
    *------------------------------------------------------------------------*/
   usr_platformInit();

   usr_navigationInit();
   15378:	0e 94 87 b2 	call	0x1650e	; 0x1650e <usr_navigationInit>

   /*------------------------------------------------------------------------*
    * Once we have exited this function the OS will begin running.
    *------------------------------------------------------------------------*/

}/*End usr_appInit*/
   1537c:	2b 96       	adiw	r28, 0x0b	; 11
   1537e:	cd bf       	out	0x3d, r28	; 61
   15380:	de bf       	out	0x3e, r29	; 62
   15382:	df 91       	pop	r29
   15384:	cf 91       	pop	r28
   15386:	1f 91       	pop	r17
   15388:	0f 91       	pop	r16
   1538a:	08 95       	ret

0001538c <usr_sensorCal>:
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_sensorCal( t_DEVHANDLE t_consoleHndl,
                           t_navState t_calState,
                           int8_t *pc_buff)
{
   1538c:	4f 92       	push	r4
   1538e:	5f 92       	push	r5
   15390:	6f 92       	push	r6
   15392:	7f 92       	push	r7
   15394:	8f 92       	push	r8
   15396:	9f 92       	push	r9
   15398:	af 92       	push	r10
   1539a:	bf 92       	push	r11
   1539c:	cf 92       	push	r12
   1539e:	df 92       	push	r13
   153a0:	ef 92       	push	r14
   153a2:	ff 92       	push	r15
   153a4:	0f 93       	push	r16
   153a6:	1f 93       	push	r17
   153a8:	cf 93       	push	r28
   153aa:	df 93       	push	r29
   153ac:	cd b7       	in	r28, 0x3d	; 61
   153ae:	de b7       	in	r29, 0x3e	; 62
   153b0:	c4 54       	subi	r28, 0x44	; 68
   153b2:	d0 40       	sbci	r29, 0x00	; 0
   153b4:	cd bf       	out	0x3d, r28	; 61
   153b6:	de bf       	out	0x3e, r29	; 62
   153b8:	25 96       	adiw	r28, 0x05	; 5
   153ba:	8e af       	sts	0x7e, r24
   153bc:	9f af       	sts	0x7f, r25
   153be:	25 97       	sbiw	r28, 0x05	; 5
   153c0:	e6 2e       	mov	r14, r22
   153c2:	8a 01       	movw	r16, r20
   float af_bias[3];

   /*------------------------------------------------------------------------*
    * Make sure the navigation thread is in the IDLE state.
    *------------------------------------------------------------------------*/
   while( usr_navGetState() != NAV_IDLE)
   153c4:	07 c0       	rjmp	.+14     	; 0x153d4 <usr_sensorCal+0x48>
   {
      usr_navSetState( NAV_IDLE);
   153c6:	80 e0       	ldi	r24, 0x00	; 0
   153c8:	0e 94 d1 ae 	call	0x15da2	; 0x15da2 <usr_navSetState>
      arb_sleep( ARB_TICKS_PER_SECOND >> 1); /*.5sec update rate*/
   153cc:	82 e3       	ldi	r24, 0x32	; 50
   153ce:	90 e0       	ldi	r25, 0x00	; 0
   153d0:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>
   float af_bias[3];

   /*------------------------------------------------------------------------*
    * Make sure the navigation thread is in the IDLE state.
    *------------------------------------------------------------------------*/
   while( usr_navGetState() != NAV_IDLE)
   153d4:	0e 94 f3 ae 	call	0x15de6	; 0x15de6 <usr_navGetState>
   153d8:	88 23       	and	r24, r24
   153da:	a9 f7       	brne	.-22     	; 0x153c6 <usr_sensorCal+0x3a>
   {
      usr_navSetState( NAV_IDLE);
      arb_sleep( ARB_TICKS_PER_SECOND >> 1); /*.5sec update rate*/
   }

   switch( t_calState)
   153dc:	23 e0       	ldi	r18, 0x03	; 3
   153de:	e2 16       	cp	r14, r18
   153e0:	29 f0       	breq	.+10     	; 0x153ec <usr_sensorCal+0x60>
   153e2:	34 e0       	ldi	r19, 0x04	; 4
   153e4:	e3 16       	cp	r14, r19
   153e6:	09 f0       	breq	.+2      	; 0x153ea <usr_sensorCal+0x5e>
   153e8:	8b c1       	rjmp	.+790    	; 0x15700 <usr_sensorCal+0x374>
   153ea:	c4 c0       	rjmp	.+392    	; 0x15574 <usr_sensorCal+0x1e8>
   153ec:	ff 24       	eor	r15, r15
      case NAV_MAG_CAL:

         do
      	{

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #collect Rotate device to a new location, press enter when ready\r\n"));
   153ee:	25 e0       	ldi	r18, 0x05	; 5
   153f0:	62 2e       	mov	r6, r18
   153f2:	23 e0       	ldi	r18, 0x03	; 3
   153f4:	72 2e       	mov	r7, r18
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   153f6:	30 e5       	ldi	r19, 0x50	; 80
   153f8:	43 2e       	mov	r4, r19
   153fa:	33 e0       	ldi	r19, 0x03	; 3
   153fc:	53 2e       	mov	r5, r19
   153fe:	0f 2e       	mov	r0, r31
   15400:	f0 e0       	ldi	r31, 0x00	; 0
   15402:	8f 2e       	mov	r8, r31
   15404:	f0 e0       	ldi	r31, 0x00	; 0
   15406:	9f 2e       	mov	r9, r31
   15408:	f0 e8       	ldi	r31, 0x80	; 128
   1540a:	af 2e       	mov	r10, r31
   1540c:	f1 e4       	ldi	r31, 0x41	; 65
   1540e:	bf 2e       	mov	r11, r31
   15410:	f0 2d       	mov	r31, r0
      case NAV_MAG_CAL:

         do
      	{

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #collect Rotate device to a new location, press enter when ready\r\n"));
   15412:	00 d0       	rcall	.+0      	; 0x15414 <usr_sensorCal+0x88>
   15414:	0f 92       	push	r0
   15416:	ad b7       	in	r26, 0x3d	; 61
   15418:	be b7       	in	r27, 0x3e	; 62
   1541a:	11 96       	adiw	r26, 0x01	; 1
   1541c:	0d 93       	st	X+, r16
   1541e:	1c 93       	st	X, r17
   15420:	12 97       	sbiw	r26, 0x02	; 2
   15422:	13 96       	adiw	r26, 0x03	; 3
   15424:	6d 92       	st	X+, r6
   15426:	7c 92       	st	X, r7
   15428:	14 97       	sbiw	r26, 0x04	; 4
   1542a:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   1542e:	ac 01       	movw	r20, r24

            arb_write( t_consoleHndl,
   15430:	25 96       	adiw	r28, 0x05	; 5
   15432:	8e ad       	sts	0x6e, r24
   15434:	9f ad       	sts	0x6f, r25
   15436:	25 97       	sbiw	r28, 0x05	; 5
   15438:	0f 90       	pop	r0
   1543a:	0f 90       	pop	r0
   1543c:	0f 90       	pop	r0
   1543e:	0f 90       	pop	r0
   15440:	b8 01       	movw	r22, r16
   15442:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                       s_size);

            /*---------------------------------------------------------------*
             * Wait here until enter has been pressed...
             *---------------------------------------------------------------*/
            s_size = arb_read( t_consoleHndl,
   15446:	25 96       	adiw	r28, 0x05	; 5
   15448:	8e ad       	sts	0x6e, r24
   1544a:	9f ad       	sts	0x6f, r25
   1544c:	25 97       	sbiw	r28, 0x05	; 5
   1544e:	b8 01       	movw	r22, r16
   15450:	42 e0       	ldi	r20, 0x02	; 2
   15452:	50 e0       	ldi	r21, 0x00	; 0
   15454:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <arb_read>
                               (int16_t)sizeof(pc_buff));

            /*---------------------------------------------------------------*
             * Does the user want to cancel the calibration?
             *---------------------------------------------------------------*/
            if( pc_buff[0] == 'q')
   15458:	f8 01       	movw	r30, r16
   1545a:	80 81       	ld	r24, Z
   1545c:	81 37       	cpi	r24, 0x71	; 113
   1545e:	09 f4       	brne	.+2      	; 0x15462 <usr_sensorCal+0xd6>
   15460:	c3 c0       	rjmp	.+390    	; 0x155e8 <usr_sensorCal+0x25c>
            }/*End if( pc_buff[0] == 'q')*/

            /*---------------------------------------------------------------*
             * Tell the INS driver to acquire the first measurement...
             *---------------------------------------------------------------*/
            usr_navSetState( NAV_MAG_CAL);
   15462:	83 e0       	ldi	r24, 0x03	; 3
   15464:	0e 94 d1 ae 	call	0x15da2	; 0x15da2 <usr_navSetState>

            /*---------------------------------------------------------------*
             * Wait until a new sample is acquired...
             *---------------------------------------------------------------*/
            usr_navWaitCalSample();
   15468:	0e 94 0a af 	call	0x15e14	; 0x15e14 <usr_navWaitCalSample>

            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);
   1546c:	ce 01       	movw	r24, r28
   1546e:	01 96       	adiw	r24, 0x01	; 1
   15470:	0e 94 f6 ae 	call	0x15dec	; 0x15dec <usr_navGetCalSample>

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   15474:	2d b7       	in	r18, 0x3d	; 61
   15476:	3e b7       	in	r19, 0x3e	; 62
   15478:	28 51       	subi	r18, 0x18	; 24
   1547a:	30 40       	sbci	r19, 0x00	; 0
   1547c:	2d bf       	out	0x3d, r18	; 61
   1547e:	3e bf       	out	0x3e, r19	; 62
   15480:	cd b6       	in	r12, 0x3d	; 61
   15482:	de b6       	in	r13, 0x3e	; 62
   15484:	08 94       	sec
   15486:	c1 1c       	adc	r12, r1
   15488:	d1 1c       	adc	r13, r1
   1548a:	ad b7       	in	r26, 0x3d	; 61
   1548c:	be b7       	in	r27, 0x3e	; 62
   1548e:	11 96       	adiw	r26, 0x01	; 1
   15490:	0d 93       	st	X+, r16
   15492:	1c 93       	st	X, r17
   15494:	12 97       	sbiw	r26, 0x02	; 2
   15496:	f6 01       	movw	r30, r12
   15498:	42 82       	std	Z+2, r4	; 0x02
   1549a:	53 82       	std	Z+3, r5	; 0x03
                                (float)as_xyz[0]/INS_MAX_CAL_MAG_ENV,
   1549c:	69 81       	ldd	r22, Y+1	; 0x01
   1549e:	7a 81       	ldd	r23, Y+2	; 0x02
   154a0:	88 27       	eor	r24, r24
   154a2:	77 fd       	sbrc	r23, 7
   154a4:	80 95       	com	r24
   154a6:	98 2f       	mov	r25, r24
   154a8:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   154ac:	20 e0       	ldi	r18, 0x00	; 0
   154ae:	30 e0       	ldi	r19, 0x00	; 0
   154b0:	40 e0       	ldi	r20, 0x00	; 0
   154b2:	5b e3       	ldi	r21, 0x3B	; 59
   154b4:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   154b8:	dc 01       	movw	r26, r24
   154ba:	cb 01       	movw	r24, r22
   154bc:	f6 01       	movw	r30, r12
   154be:	84 83       	std	Z+4, r24	; 0x04
   154c0:	95 83       	std	Z+5, r25	; 0x05
   154c2:	a6 83       	std	Z+6, r26	; 0x06
   154c4:	b7 83       	std	Z+7, r27	; 0x07
                                (float)as_xyz[0]/INS_MAX_CAL_MAG_ENV,
                                (float)as_xyz[1]/INS_MAX_CAL_MAG_ENV,
   154c6:	6b 81       	ldd	r22, Y+3	; 0x03
   154c8:	7c 81       	ldd	r23, Y+4	; 0x04
   154ca:	88 27       	eor	r24, r24
   154cc:	77 fd       	sbrc	r23, 7
   154ce:	80 95       	com	r24
   154d0:	98 2f       	mov	r25, r24
   154d2:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   154d6:	20 e0       	ldi	r18, 0x00	; 0
   154d8:	30 e0       	ldi	r19, 0x00	; 0
   154da:	40 e0       	ldi	r20, 0x00	; 0
   154dc:	5b e3       	ldi	r21, 0x3B	; 59
   154de:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   154e2:	dc 01       	movw	r26, r24
   154e4:	cb 01       	movw	r24, r22
   154e6:	f6 01       	movw	r30, r12
   154e8:	80 87       	std	Z+8, r24	; 0x08
   154ea:	91 87       	std	Z+9, r25	; 0x09
   154ec:	a2 87       	std	Z+10, r26	; 0x0a
   154ee:	b3 87       	std	Z+11, r27	; 0x0b
                                (float)as_xyz[0]/INS_MAX_CAL_MAG_ENV,
                                (float)as_xyz[1]/INS_MAX_CAL_MAG_ENV,
                                (float)as_xyz[2]/INS_MAX_CAL_MAG_ENV,
   154f0:	6d 81       	ldd	r22, Y+5	; 0x05
   154f2:	7e 81       	ldd	r23, Y+6	; 0x06
   154f4:	88 27       	eor	r24, r24
   154f6:	77 fd       	sbrc	r23, 7
   154f8:	80 95       	com	r24
   154fa:	98 2f       	mov	r25, r24
   154fc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   15500:	20 e0       	ldi	r18, 0x00	; 0
   15502:	30 e0       	ldi	r19, 0x00	; 0
   15504:	40 e0       	ldi	r20, 0x00	; 0
   15506:	5b e3       	ldi	r21, 0x3B	; 59
   15508:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1550c:	dc 01       	movw	r26, r24
   1550e:	cb 01       	movw	r24, r22
   15510:	f6 01       	movw	r30, r12
   15512:	84 87       	std	Z+12, r24	; 0x0c
   15514:	95 87       	std	Z+13, r25	; 0x0d
   15516:	a6 87       	std	Z+14, r26	; 0x0e
   15518:	b7 87       	std	Z+15, r27	; 0x0f
   1551a:	6f 2d       	mov	r22, r15
   1551c:	77 27       	eor	r23, r23
   1551e:	67 fd       	sbrc	r22, 7
   15520:	70 95       	com	r23
   15522:	87 2f       	mov	r24, r23
   15524:	97 2f       	mov	r25, r23
   15526:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1552a:	dc 01       	movw	r26, r24
   1552c:	cb 01       	movw	r24, r22
   1552e:	f6 01       	movw	r30, r12
   15530:	80 8b       	std	Z+16, r24	; 0x10
   15532:	91 8b       	std	Z+17, r25	; 0x11
   15534:	a2 8b       	std	Z+18, r26	; 0x12
   15536:	b3 8b       	std	Z+19, r27	; 0x13
   15538:	84 8a       	std	Z+20, r8	; 0x14
   1553a:	95 8a       	std	Z+21, r9	; 0x15
   1553c:	a6 8a       	std	Z+22, r10	; 0x16
   1553e:	b7 8a       	std	Z+23, r11	; 0x17
   15540:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   15544:	ac 01       	movw	r20, r24
                                (float)as_xyz[1]/INS_MAX_CAL_MAG_ENV,
                                (float)as_xyz[2]/INS_MAX_CAL_MAG_ENV,
                                (float)c_index,
                                (float)INS_MAX_CAL_SAMPLES);

            arb_write( t_consoleHndl,
   15546:	25 96       	adiw	r28, 0x05	; 5
   15548:	8e ad       	sts	0x6e, r24
   1554a:	9f ad       	sts	0x6f, r25
   1554c:	25 97       	sbiw	r28, 0x05	; 5
   1554e:	ed b7       	in	r30, 0x3d	; 61
   15550:	fe b7       	in	r31, 0x3e	; 62
   15552:	78 96       	adiw	r30, 0x18	; 24
   15554:	ed bf       	out	0x3d, r30	; 61
   15556:	fe bf       	out	0x3e, r31	; 62
   15558:	b8 01       	movw	r22, r16
   1555a:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                       pc_buff,
                       s_size);

            arb_sleep( 10);
   1555e:	8a e0       	ldi	r24, 0x0A	; 10
   15560:	90 e0       	ldi	r25, 0x00	; 0
   15562:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

            c_index++;
   15566:	f3 94       	inc	r15

         }while( usr_navGetState() == NAV_CAL_SAMP_COMP);
   15568:	0e 94 f3 ae 	call	0x15de6	; 0x15de6 <usr_navGetState>
   1556c:	82 30       	cpi	r24, 0x02	; 2
   1556e:	09 f4       	brne	.+2      	; 0x15572 <usr_sensorCal+0x1e6>
   15570:	50 cf       	rjmp	.-352    	; 0x15412 <usr_sensorCal+0x86>
   15572:	c6 c0       	rjmp	.+396    	; 0x15700 <usr_sensorCal+0x374>
   {
      usr_navSetState( NAV_IDLE);
      arb_sleep( ARB_TICKS_PER_SECOND >> 1); /*.5sec update rate*/
   }

   switch( t_calState)
   15574:	ff 24       	eor	r15, r15
      case NAV_ACCEL_CAL:

         do
      	{

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #collect Rotate device to a new location, press enter when ready\r\n"));
   15576:	85 e7       	ldi	r24, 0x75	; 117
   15578:	68 2e       	mov	r6, r24
   1557a:	83 e0       	ldi	r24, 0x03	; 3
   1557c:	78 2e       	mov	r7, r24
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   1557e:	90 ec       	ldi	r25, 0xC0	; 192
   15580:	49 2e       	mov	r4, r25
   15582:	93 e0       	ldi	r25, 0x03	; 3
   15584:	59 2e       	mov	r5, r25
   15586:	0f 2e       	mov	r0, r31
   15588:	f0 e0       	ldi	r31, 0x00	; 0
   1558a:	8f 2e       	mov	r8, r31
   1558c:	f0 e0       	ldi	r31, 0x00	; 0
   1558e:	9f 2e       	mov	r9, r31
   15590:	f0 e8       	ldi	r31, 0x80	; 128
   15592:	af 2e       	mov	r10, r31
   15594:	f1 e4       	ldi	r31, 0x41	; 65
   15596:	bf 2e       	mov	r11, r31
   15598:	f0 2d       	mov	r31, r0
      case NAV_ACCEL_CAL:

         do
      	{

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #collect Rotate device to a new location, press enter when ready\r\n"));
   1559a:	00 d0       	rcall	.+0      	; 0x1559c <usr_sensorCal+0x210>
   1559c:	0f 92       	push	r0
   1559e:	ad b7       	in	r26, 0x3d	; 61
   155a0:	be b7       	in	r27, 0x3e	; 62
   155a2:	11 96       	adiw	r26, 0x01	; 1
   155a4:	0d 93       	st	X+, r16
   155a6:	1c 93       	st	X, r17
   155a8:	12 97       	sbiw	r26, 0x02	; 2
   155aa:	13 96       	adiw	r26, 0x03	; 3
   155ac:	6d 92       	st	X+, r6
   155ae:	7c 92       	st	X, r7
   155b0:	14 97       	sbiw	r26, 0x04	; 4
   155b2:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   155b6:	ac 01       	movw	r20, r24

            arb_write( t_consoleHndl,
   155b8:	25 96       	adiw	r28, 0x05	; 5
   155ba:	8e ad       	sts	0x6e, r24
   155bc:	9f ad       	sts	0x6f, r25
   155be:	25 97       	sbiw	r28, 0x05	; 5
   155c0:	0f 90       	pop	r0
   155c2:	0f 90       	pop	r0
   155c4:	0f 90       	pop	r0
   155c6:	0f 90       	pop	r0
   155c8:	b8 01       	movw	r22, r16
   155ca:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                       s_size);

            /*---------------------------------------------------------------*
             * Wait here until enter has been pressed...
             *---------------------------------------------------------------*/
            s_size = arb_read( t_consoleHndl,
   155ce:	25 96       	adiw	r28, 0x05	; 5
   155d0:	8e ad       	sts	0x6e, r24
   155d2:	9f ad       	sts	0x6f, r25
   155d4:	25 97       	sbiw	r28, 0x05	; 5
   155d6:	b8 01       	movw	r22, r16
   155d8:	42 e0       	ldi	r20, 0x02	; 2
   155da:	50 e0       	ldi	r21, 0x00	; 0
   155dc:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <arb_read>
                               (int16_t)sizeof(pc_buff));

            /*---------------------------------------------------------------*
             * Does the user want to cancel the calibration?
             *---------------------------------------------------------------*/
            if( pc_buff[0] == 'q')
   155e0:	f8 01       	movw	r30, r16
   155e2:	80 81       	ld	r24, Z
   155e4:	81 37       	cpi	r24, 0x71	; 113
   155e6:	21 f4       	brne	.+8      	; 0x155f0 <usr_sensorCal+0x264>
            {
               usr_navSetState( NAV_IDLE);
   155e8:	80 e0       	ldi	r24, 0x00	; 0
   155ea:	0e 94 d1 ae 	call	0x15da2	; 0x15da2 <usr_navSetState>
               break;
   155ee:	88 c0       	rjmp	.+272    	; 0x15700 <usr_sensorCal+0x374>
            }/*End if( pc_buff[0] == 'q')*/

            /*---------------------------------------------------------------*
             * Tell the INS driver to acquire the first measurement...
             *---------------------------------------------------------------*/
            usr_navSetState( NAV_ACCEL_CAL);
   155f0:	84 e0       	ldi	r24, 0x04	; 4
   155f2:	0e 94 d1 ae 	call	0x15da2	; 0x15da2 <usr_navSetState>

            /*---------------------------------------------------------------*
             * Wait until a new sample is acquired...
             *---------------------------------------------------------------*/
            usr_navWaitCalSample();
   155f6:	0e 94 0a af 	call	0x15e14	; 0x15e14 <usr_navWaitCalSample>

            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);
   155fa:	ce 01       	movw	r24, r28
   155fc:	01 96       	adiw	r24, 0x01	; 1
   155fe:	0e 94 f6 ae 	call	0x15dec	; 0x15dec <usr_navGetCalSample>

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   15602:	2d b7       	in	r18, 0x3d	; 61
   15604:	3e b7       	in	r19, 0x3e	; 62
   15606:	28 51       	subi	r18, 0x18	; 24
   15608:	30 40       	sbci	r19, 0x00	; 0
   1560a:	2d bf       	out	0x3d, r18	; 61
   1560c:	3e bf       	out	0x3e, r19	; 62
   1560e:	cd b6       	in	r12, 0x3d	; 61
   15610:	de b6       	in	r13, 0x3e	; 62
   15612:	08 94       	sec
   15614:	c1 1c       	adc	r12, r1
   15616:	d1 1c       	adc	r13, r1
   15618:	ad b7       	in	r26, 0x3d	; 61
   1561a:	be b7       	in	r27, 0x3e	; 62
   1561c:	11 96       	adiw	r26, 0x01	; 1
   1561e:	0d 93       	st	X+, r16
   15620:	1c 93       	st	X, r17
   15622:	12 97       	sbiw	r26, 0x02	; 2
   15624:	f6 01       	movw	r30, r12
   15626:	42 82       	std	Z+2, r4	; 0x02
   15628:	53 82       	std	Z+3, r5	; 0x03
                                (float)as_xyz[0]/INS_MAX_CAL_GRAV_ENV,
   1562a:	69 81       	ldd	r22, Y+1	; 0x01
   1562c:	7a 81       	ldd	r23, Y+2	; 0x02
   1562e:	88 27       	eor	r24, r24
   15630:	77 fd       	sbrc	r23, 7
   15632:	80 95       	com	r24
   15634:	98 2f       	mov	r25, r24
   15636:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   1563a:	20 e0       	ldi	r18, 0x00	; 0
   1563c:	30 e0       	ldi	r19, 0x00	; 0
   1563e:	40 e8       	ldi	r20, 0x80	; 128
   15640:	5b e3       	ldi	r21, 0x3B	; 59
   15642:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   15646:	dc 01       	movw	r26, r24
   15648:	cb 01       	movw	r24, r22
   1564a:	f6 01       	movw	r30, r12
   1564c:	84 83       	std	Z+4, r24	; 0x04
   1564e:	95 83       	std	Z+5, r25	; 0x05
   15650:	a6 83       	std	Z+6, r26	; 0x06
   15652:	b7 83       	std	Z+7, r27	; 0x07
                                (float)as_xyz[0]/INS_MAX_CAL_GRAV_ENV,
                                (float)as_xyz[1]/INS_MAX_CAL_GRAV_ENV,
   15654:	6b 81       	ldd	r22, Y+3	; 0x03
   15656:	7c 81       	ldd	r23, Y+4	; 0x04
   15658:	88 27       	eor	r24, r24
   1565a:	77 fd       	sbrc	r23, 7
   1565c:	80 95       	com	r24
   1565e:	98 2f       	mov	r25, r24
   15660:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   15664:	20 e0       	ldi	r18, 0x00	; 0
   15666:	30 e0       	ldi	r19, 0x00	; 0
   15668:	40 e8       	ldi	r20, 0x80	; 128
   1566a:	5b e3       	ldi	r21, 0x3B	; 59
   1566c:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   15670:	dc 01       	movw	r26, r24
   15672:	cb 01       	movw	r24, r22
   15674:	f6 01       	movw	r30, r12
   15676:	80 87       	std	Z+8, r24	; 0x08
   15678:	91 87       	std	Z+9, r25	; 0x09
   1567a:	a2 87       	std	Z+10, r26	; 0x0a
   1567c:	b3 87       	std	Z+11, r27	; 0x0b
                                (float)as_xyz[0]/INS_MAX_CAL_GRAV_ENV,
                                (float)as_xyz[1]/INS_MAX_CAL_GRAV_ENV,
                                (float)as_xyz[2]/INS_MAX_CAL_GRAV_ENV,
   1567e:	6d 81       	ldd	r22, Y+5	; 0x05
   15680:	7e 81       	ldd	r23, Y+6	; 0x06
   15682:	88 27       	eor	r24, r24
   15684:	77 fd       	sbrc	r23, 7
   15686:	80 95       	com	r24
   15688:	98 2f       	mov	r25, r24
   1568a:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
            /*---------------------------------------------------------------*
             * Read back the sample that was just gathered.
             *---------------------------------------------------------------*/
            usr_navGetCalSample( as_xyz);

            s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #cal3dpoint %f %f %f %f %f\r\n"),
   1568e:	20 e0       	ldi	r18, 0x00	; 0
   15690:	30 e0       	ldi	r19, 0x00	; 0
   15692:	40 e8       	ldi	r20, 0x80	; 128
   15694:	5b e3       	ldi	r21, 0x3B	; 59
   15696:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1569a:	dc 01       	movw	r26, r24
   1569c:	cb 01       	movw	r24, r22
   1569e:	f6 01       	movw	r30, r12
   156a0:	84 87       	std	Z+12, r24	; 0x0c
   156a2:	95 87       	std	Z+13, r25	; 0x0d
   156a4:	a6 87       	std	Z+14, r26	; 0x0e
   156a6:	b7 87       	std	Z+15, r27	; 0x0f
   156a8:	6f 2d       	mov	r22, r15
   156aa:	77 27       	eor	r23, r23
   156ac:	67 fd       	sbrc	r22, 7
   156ae:	70 95       	com	r23
   156b0:	87 2f       	mov	r24, r23
   156b2:	97 2f       	mov	r25, r23
   156b4:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   156b8:	dc 01       	movw	r26, r24
   156ba:	cb 01       	movw	r24, r22
   156bc:	f6 01       	movw	r30, r12
   156be:	80 8b       	std	Z+16, r24	; 0x10
   156c0:	91 8b       	std	Z+17, r25	; 0x11
   156c2:	a2 8b       	std	Z+18, r26	; 0x12
   156c4:	b3 8b       	std	Z+19, r27	; 0x13
   156c6:	84 8a       	std	Z+20, r8	; 0x14
   156c8:	95 8a       	std	Z+21, r9	; 0x15
   156ca:	a6 8a       	std	Z+22, r10	; 0x16
   156cc:	b7 8a       	std	Z+23, r11	; 0x17
   156ce:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   156d2:	ac 01       	movw	r20, r24
                                (float)as_xyz[1]/INS_MAX_CAL_GRAV_ENV,
                                (float)as_xyz[2]/INS_MAX_CAL_GRAV_ENV,
                                (float)c_index,
                                (float)INS_MAX_CAL_SAMPLES);

            arb_write( t_consoleHndl,
   156d4:	25 96       	adiw	r28, 0x05	; 5
   156d6:	8e ad       	sts	0x6e, r24
   156d8:	9f ad       	sts	0x6f, r25
   156da:	25 97       	sbiw	r28, 0x05	; 5
   156dc:	ed b7       	in	r30, 0x3d	; 61
   156de:	fe b7       	in	r31, 0x3e	; 62
   156e0:	78 96       	adiw	r30, 0x18	; 24
   156e2:	ed bf       	out	0x3d, r30	; 61
   156e4:	fe bf       	out	0x3e, r31	; 62
   156e6:	b8 01       	movw	r22, r16
   156e8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                       pc_buff,
                       s_size);

            arb_sleep( 10);
   156ec:	8a e0       	ldi	r24, 0x0A	; 10
   156ee:	90 e0       	ldi	r25, 0x00	; 0
   156f0:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

            c_index++;
   156f4:	f3 94       	inc	r15

         }while( usr_navGetState() == NAV_CAL_SAMP_COMP);
   156f6:	0e 94 f3 ae 	call	0x15de6	; 0x15de6 <usr_navGetState>
   156fa:	82 30       	cpi	r24, 0x02	; 2
   156fc:	09 f4       	brne	.+2      	; 0x15700 <usr_sensorCal+0x374>
   156fe:	4d cf       	rjmp	.-358    	; 0x1559a <usr_sensorCal+0x20e>

      break;

   }/*End switch( t_calState)*/

	if( usr_navGetCalStatus() == INS_CAL_COMPLETE)
   15700:	0e 94 12 af 	call	0x15e24	; 0x15e24 <usr_navGetCalStatus>
   15704:	82 30       	cpi	r24, 0x02	; 2
   15706:	09 f0       	breq	.+2      	; 0x1570a <usr_sensorCal+0x37e>
   15708:	15 c1       	rjmp	.+554    	; 0x15934 <usr_sensorCal+0x5a8>
	{
      if( t_calState == NAV_MAG_CAL)
   1570a:	f3 e0       	ldi	r31, 0x03	; 3
   1570c:	ef 16       	cp	r14, r31
   1570e:	59 f4       	brne	.+22     	; 0x15726 <usr_sensorCal+0x39a>
      {
         /*------------------------------------------------------------------*
          * Get the current calibration parameters...
          *------------------------------------------------------------------*/
         usr_navGetMagCal( &af_R[0][0],
   15710:	ce 01       	movw	r24, r28
   15712:	4f 96       	adiw	r24, 0x1f	; 31
   15714:	be 01       	movw	r22, r28
   15716:	6d 5e       	subi	r22, 0xED	; 237
   15718:	7f 4f       	sbci	r23, 0xFF	; 255
   1571a:	ae 01       	movw	r20, r28
   1571c:	49 5f       	subi	r20, 0xF9	; 249
   1571e:	5f 4f       	sbci	r21, 0xFF	; 255
   15720:	0e 94 15 af 	call	0x15e2a	; 0x15e2a <usr_navGetMagCal>
   15724:	0d c0       	rjmp	.+26     	; 0x15740 <usr_sensorCal+0x3b4>
                           af_scale,
					            af_bias);

		}/*End if( t_calState == NAV_MAG_CAL)*/
      else if( t_calState == NAV_ACCEL_CAL)
   15726:	24 e0       	ldi	r18, 0x04	; 4
   15728:	e2 16       	cp	r14, r18
   1572a:	51 f4       	brne	.+20     	; 0x15740 <usr_sensorCal+0x3b4>
      {
         usr_navGetAccelCal( &af_R[0][0],
   1572c:	ce 01       	movw	r24, r28
   1572e:	4f 96       	adiw	r24, 0x1f	; 31
   15730:	be 01       	movw	r22, r28
   15732:	6d 5e       	subi	r22, 0xED	; 237
   15734:	7f 4f       	sbci	r23, 0xFF	; 255
   15736:	ae 01       	movw	r20, r28
   15738:	49 5f       	subi	r20, 0xF9	; 249
   1573a:	5f 4f       	sbci	r21, 0xFF	; 255
   1573c:	0e 94 be b0 	call	0x1617c	; 0x1617c <usr_navGetAccelCal>
                             af_scale,
					              af_bias);

      }/*End else if( t_calState == NAV_ACCEL_CAL)*/

		s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #calrotmatrix %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f\r\n"),
   15740:	8d b7       	in	r24, 0x3d	; 61
   15742:	9e b7       	in	r25, 0x3e	; 62
   15744:	88 97       	sbiw	r24, 0x28	; 40
   15746:	8d bf       	out	0x3d, r24	; 61
   15748:	9e bf       	out	0x3e, r25	; 62
   1574a:	ed b7       	in	r30, 0x3d	; 61
   1574c:	fe b7       	in	r31, 0x3e	; 62
   1574e:	31 96       	adiw	r30, 0x01	; 1
   15750:	ad b7       	in	r26, 0x3d	; 61
   15752:	be b7       	in	r27, 0x3e	; 62
   15754:	11 96       	adiw	r26, 0x01	; 1
   15756:	0d 93       	st	X+, r16
   15758:	1c 93       	st	X, r17
   1575a:	12 97       	sbiw	r26, 0x02	; 2
   1575c:	85 ee       	ldi	r24, 0xE5	; 229
   1575e:	93 e0       	ldi	r25, 0x03	; 3
   15760:	82 83       	std	Z+2, r24	; 0x02
   15762:	93 83       	std	Z+3, r25	; 0x03
   15764:	8f 8d       	ldd	r24, Y+31	; 0x1f
   15766:	98 a1       	lds	r25, 0x48
   15768:	a9 a1       	lds	r26, 0x49
   1576a:	ba a1       	lds	r27, 0x4a
   1576c:	84 83       	std	Z+4, r24	; 0x04
   1576e:	95 83       	std	Z+5, r25	; 0x05
   15770:	a6 83       	std	Z+6, r26	; 0x06
   15772:	b7 83       	std	Z+7, r27	; 0x07
   15774:	8b a1       	lds	r24, 0x4b
   15776:	9c a1       	lds	r25, 0x4c
   15778:	ad a1       	lds	r26, 0x4d
   1577a:	be a1       	lds	r27, 0x4e
   1577c:	80 87       	std	Z+8, r24	; 0x08
   1577e:	91 87       	std	Z+9, r25	; 0x09
   15780:	a2 87       	std	Z+10, r26	; 0x0a
   15782:	b3 87       	std	Z+11, r27	; 0x0b
   15784:	8f a1       	lds	r24, 0x4f
   15786:	98 a5       	lds	r25, 0x68
   15788:	a9 a5       	lds	r26, 0x69
   1578a:	ba a5       	lds	r27, 0x6a
   1578c:	84 87       	std	Z+12, r24	; 0x0c
   1578e:	95 87       	std	Z+13, r25	; 0x0d
   15790:	a6 87       	std	Z+14, r26	; 0x0e
   15792:	b7 87       	std	Z+15, r27	; 0x0f
   15794:	8b a5       	lds	r24, 0x6b
   15796:	9c a5       	lds	r25, 0x6c
   15798:	ad a5       	lds	r26, 0x6d
   1579a:	be a5       	lds	r27, 0x6e
   1579c:	80 8b       	std	Z+16, r24	; 0x10
   1579e:	91 8b       	std	Z+17, r25	; 0x11
   157a0:	a2 8b       	std	Z+18, r26	; 0x12
   157a2:	b3 8b       	std	Z+19, r27	; 0x13
   157a4:	8f a5       	lds	r24, 0x6f
   157a6:	98 a9       	sts	0x48, r25
   157a8:	a9 a9       	sts	0x49, r26
   157aa:	ba a9       	sts	0x4a, r27
   157ac:	84 8b       	std	Z+20, r24	; 0x14
   157ae:	95 8b       	std	Z+21, r25	; 0x15
   157b0:	a6 8b       	std	Z+22, r26	; 0x16
   157b2:	b7 8b       	std	Z+23, r27	; 0x17
   157b4:	8b a9       	sts	0x4b, r24
   157b6:	9c a9       	sts	0x4c, r25
   157b8:	ad a9       	sts	0x4d, r26
   157ba:	be a9       	sts	0x4e, r27
   157bc:	80 8f       	std	Z+24, r24	; 0x18
   157be:	91 8f       	std	Z+25, r25	; 0x19
   157c0:	a2 8f       	std	Z+26, r26	; 0x1a
   157c2:	b3 8f       	std	Z+27, r27	; 0x1b
   157c4:	8f a9       	sts	0x4f, r24
   157c6:	98 ad       	sts	0x68, r25
   157c8:	a9 ad       	sts	0x69, r26
   157ca:	ba ad       	sts	0x6a, r27
   157cc:	84 8f       	std	Z+28, r24	; 0x1c
   157ce:	95 8f       	std	Z+29, r25	; 0x1d
   157d0:	a6 8f       	std	Z+30, r26	; 0x1e
   157d2:	b7 8f       	std	Z+31, r27	; 0x1f
   157d4:	8b ad       	sts	0x6b, r24
   157d6:	9c ad       	sts	0x6c, r25
   157d8:	ad ad       	sts	0x6d, r26
   157da:	be ad       	sts	0x6e, r27
   157dc:	80 a3       	lds	r24, 0x50
   157de:	91 a3       	lds	r25, 0x51
   157e0:	a2 a3       	lds	r26, 0x52
   157e2:	b3 a3       	lds	r27, 0x53
   157e4:	23 96       	adiw	r28, 0x03	; 3
   157e6:	8c ad       	sts	0x6c, r24
   157e8:	9d ad       	sts	0x6d, r25
   157ea:	ae ad       	sts	0x6e, r26
   157ec:	bf ad       	sts	0x6f, r27
   157ee:	23 97       	sbiw	r28, 0x03	; 3
   157f0:	84 a3       	lds	r24, 0x54
   157f2:	95 a3       	lds	r25, 0x55
   157f4:	a6 a3       	lds	r26, 0x56
   157f6:	b7 a3       	lds	r27, 0x57
   157f8:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   157fc:	ac 01       	movw	r20, r24
		af_R[0][0], af_R[0][1], af_R[0][2], af_R[1][0], af_R[1][1], af_R[1][2], af_R[2][0], af_R[2][1], af_R[2][2]);

      arb_write( t_consoleHndl,
   157fe:	25 96       	adiw	r28, 0x05	; 5
   15800:	8e ad       	sts	0x6e, r24
   15802:	9f ad       	sts	0x6f, r25
   15804:	25 97       	sbiw	r28, 0x05	; 5
   15806:	ed b7       	in	r30, 0x3d	; 61
   15808:	fe b7       	in	r31, 0x3e	; 62
   1580a:	b8 96       	adiw	r30, 0x28	; 40
   1580c:	ed bf       	out	0x3d, r30	; 61
   1580e:	fe bf       	out	0x3e, r31	; 62
   15810:	b8 01       	movw	r22, r16
   15812:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                 pc_buff,
                 s_size);

      arb_sleep( 10);
   15816:	8a e0       	ldi	r24, 0x0A	; 10
   15818:	90 e0       	ldi	r25, 0x00	; 0
   1581a:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

		s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #axisscale %.4f %.4f %.4f\r\n"),
   1581e:	2d b7       	in	r18, 0x3d	; 61
   15820:	3e b7       	in	r19, 0x3e	; 62
   15822:	20 51       	subi	r18, 0x10	; 16
   15824:	30 40       	sbci	r19, 0x00	; 0
   15826:	2d bf       	out	0x3d, r18	; 61
   15828:	3e bf       	out	0x3e, r19	; 62
   1582a:	ed b7       	in	r30, 0x3d	; 61
   1582c:	fe b7       	in	r31, 0x3e	; 62
   1582e:	31 96       	adiw	r30, 0x01	; 1
   15830:	ad b7       	in	r26, 0x3d	; 61
   15832:	be b7       	in	r27, 0x3e	; 62
   15834:	11 96       	adiw	r26, 0x01	; 1
   15836:	0d 93       	st	X+, r16
   15838:	1c 93       	st	X, r17
   1583a:	12 97       	sbiw	r26, 0x02	; 2
   1583c:	8a e2       	ldi	r24, 0x2A	; 42
   1583e:	94 e0       	ldi	r25, 0x04	; 4
   15840:	82 83       	std	Z+2, r24	; 0x02
   15842:	93 83       	std	Z+3, r25	; 0x03
   15844:	8b 89       	ldd	r24, Y+19	; 0x13
   15846:	9c 89       	ldd	r25, Y+20	; 0x14
   15848:	ad 89       	ldd	r26, Y+21	; 0x15
   1584a:	be 89       	ldd	r27, Y+22	; 0x16
   1584c:	84 83       	std	Z+4, r24	; 0x04
   1584e:	95 83       	std	Z+5, r25	; 0x05
   15850:	a6 83       	std	Z+6, r26	; 0x06
   15852:	b7 83       	std	Z+7, r27	; 0x07
   15854:	8f 89       	ldd	r24, Y+23	; 0x17
   15856:	98 8d       	ldd	r25, Y+24	; 0x18
   15858:	a9 8d       	ldd	r26, Y+25	; 0x19
   1585a:	ba 8d       	ldd	r27, Y+26	; 0x1a
   1585c:	80 87       	std	Z+8, r24	; 0x08
   1585e:	91 87       	std	Z+9, r25	; 0x09
   15860:	a2 87       	std	Z+10, r26	; 0x0a
   15862:	b3 87       	std	Z+11, r27	; 0x0b
   15864:	8b 8d       	ldd	r24, Y+27	; 0x1b
   15866:	9c 8d       	ldd	r25, Y+28	; 0x1c
   15868:	ad 8d       	ldd	r26, Y+29	; 0x1d
   1586a:	be 8d       	ldd	r27, Y+30	; 0x1e
   1586c:	84 87       	std	Z+12, r24	; 0x0c
   1586e:	95 87       	std	Z+13, r25	; 0x0d
   15870:	a6 87       	std	Z+14, r26	; 0x0e
   15872:	b7 87       	std	Z+15, r27	; 0x0f
   15874:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   15878:	ac 01       	movw	r20, r24
		af_scale[0], af_scale[1], af_scale[2]);

      arb_write( t_consoleHndl,
   1587a:	25 96       	adiw	r28, 0x05	; 5
   1587c:	8e ad       	sts	0x6e, r24
   1587e:	9f ad       	sts	0x6f, r25
   15880:	25 97       	sbiw	r28, 0x05	; 5
   15882:	ed b7       	in	r30, 0x3d	; 61
   15884:	fe b7       	in	r31, 0x3e	; 62
   15886:	70 96       	adiw	r30, 0x10	; 16
   15888:	ed bf       	out	0x3d, r30	; 61
   1588a:	fe bf       	out	0x3e, r31	; 62
   1588c:	b8 01       	movw	r22, r16
   1588e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                 pc_buff,
                 s_size);

      arb_sleep( 10);
   15892:	8a e0       	ldi	r24, 0x0A	; 10
   15894:	90 e0       	ldi	r25, 0x00	; 0
   15896:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

		s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #axisbias %.4f %.4f %.4f\r\n"),
   1589a:	2d b7       	in	r18, 0x3d	; 61
   1589c:	3e b7       	in	r19, 0x3e	; 62
   1589e:	20 51       	subi	r18, 0x10	; 16
   158a0:	30 40       	sbci	r19, 0x00	; 0
   158a2:	2d bf       	out	0x3d, r18	; 61
   158a4:	3e bf       	out	0x3e, r19	; 62
   158a6:	ed b7       	in	r30, 0x3d	; 61
   158a8:	fe b7       	in	r31, 0x3e	; 62
   158aa:	31 96       	adiw	r30, 0x01	; 1
   158ac:	ad b7       	in	r26, 0x3d	; 61
   158ae:	be b7       	in	r27, 0x3e	; 62
   158b0:	11 96       	adiw	r26, 0x01	; 1
   158b2:	0d 93       	st	X+, r16
   158b4:	1c 93       	st	X, r17
   158b6:	12 97       	sbiw	r26, 0x02	; 2
   158b8:	8e e4       	ldi	r24, 0x4E	; 78
   158ba:	94 e0       	ldi	r25, 0x04	; 4
   158bc:	82 83       	std	Z+2, r24	; 0x02
   158be:	93 83       	std	Z+3, r25	; 0x03
   158c0:	8f 81       	ldd	r24, Y+7	; 0x07
   158c2:	98 85       	ldd	r25, Y+8	; 0x08
   158c4:	a9 85       	ldd	r26, Y+9	; 0x09
   158c6:	ba 85       	ldd	r27, Y+10	; 0x0a
   158c8:	84 83       	std	Z+4, r24	; 0x04
   158ca:	95 83       	std	Z+5, r25	; 0x05
   158cc:	a6 83       	std	Z+6, r26	; 0x06
   158ce:	b7 83       	std	Z+7, r27	; 0x07
   158d0:	8b 85       	ldd	r24, Y+11	; 0x0b
   158d2:	9c 85       	ldd	r25, Y+12	; 0x0c
   158d4:	ad 85       	ldd	r26, Y+13	; 0x0d
   158d6:	be 85       	ldd	r27, Y+14	; 0x0e
   158d8:	80 87       	std	Z+8, r24	; 0x08
   158da:	91 87       	std	Z+9, r25	; 0x09
   158dc:	a2 87       	std	Z+10, r26	; 0x0a
   158de:	b3 87       	std	Z+11, r27	; 0x0b
   158e0:	8f 85       	ldd	r24, Y+15	; 0x0f
   158e2:	98 89       	ldd	r25, Y+16	; 0x10
   158e4:	a9 89       	ldd	r26, Y+17	; 0x11
   158e6:	ba 89       	ldd	r27, Y+18	; 0x12
   158e8:	84 87       	std	Z+12, r24	; 0x0c
   158ea:	95 87       	std	Z+13, r25	; 0x0d
   158ec:	a6 87       	std	Z+14, r26	; 0x0e
   158ee:	b7 87       	std	Z+15, r27	; 0x0f
   158f0:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   158f4:	ac 01       	movw	r20, r24
		af_bias[0], af_bias[1], af_bias[2]);

      arb_write( t_consoleHndl,
   158f6:	25 96       	adiw	r28, 0x05	; 5
   158f8:	8e ad       	sts	0x6e, r24
   158fa:	9f ad       	sts	0x6f, r25
   158fc:	25 97       	sbiw	r28, 0x05	; 5
   158fe:	ed b7       	in	r30, 0x3d	; 61
   15900:	fe b7       	in	r31, 0x3e	; 62
   15902:	70 96       	adiw	r30, 0x10	; 16
   15904:	ed bf       	out	0x3d, r30	; 61
   15906:	fe bf       	out	0x3e, r31	; 62
   15908:	b8 01       	movw	r22, r16
   1590a:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                 pc_buff,
                 s_size);

      arb_sleep( 10);
   1590e:	8a e0       	ldi	r24, 0x0A	; 10
   15910:	90 e0       	ldi	r25, 0x00	; 0
   15912:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>

      s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #result passed\r\n"));
   15916:	00 d0       	rcall	.+0      	; 0x15918 <usr_sensorCal+0x58c>
   15918:	0f 92       	push	r0
   1591a:	ad b7       	in	r26, 0x3d	; 61
   1591c:	be b7       	in	r27, 0x3e	; 62
   1591e:	11 96       	adiw	r26, 0x01	; 1
   15920:	0d 93       	st	X+, r16
   15922:	1c 93       	st	X, r17
   15924:	12 97       	sbiw	r26, 0x02	; 2
   15926:	81 e7       	ldi	r24, 0x71	; 113
   15928:	94 e0       	ldi	r25, 0x04	; 4
   1592a:	13 96       	adiw	r26, 0x03	; 3
   1592c:	8d 93       	st	X+, r24
   1592e:	9c 93       	st	X, r25
   15930:	14 97       	sbiw	r26, 0x04	; 4
   15932:	0a c0       	rjmp	.+20     	; 0x15948 <usr_sensorCal+0x5bc>


	}/*End if( usr_navGetCalStatus() == INS_CAL_COMPLETE)*/
	else
	{
		s_size = sprintf_P( (char *)pc_buff, PSTR("#calmsg #result failed\r\n"));
   15934:	00 d0       	rcall	.+0      	; 0x15936 <usr_sensorCal+0x5aa>
   15936:	0f 92       	push	r0
   15938:	ed b7       	in	r30, 0x3d	; 61
   1593a:	fe b7       	in	r31, 0x3e	; 62
   1593c:	01 83       	std	Z+1, r16	; 0x01
   1593e:	12 83       	std	Z+2, r17	; 0x02
   15940:	8a e8       	ldi	r24, 0x8A	; 138
   15942:	94 e0       	ldi	r25, 0x04	; 4
   15944:	83 83       	std	Z+3, r24	; 0x03
   15946:	94 83       	std	Z+4, r25	; 0x04
   15948:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   1594c:	ac 01       	movw	r20, r24

      arb_write( t_consoleHndl,
   1594e:	25 96       	adiw	r28, 0x05	; 5
   15950:	8e ad       	sts	0x6e, r24
   15952:	9f ad       	sts	0x6f, r25
   15954:	25 97       	sbiw	r28, 0x05	; 5
   15956:	0f 90       	pop	r0
   15958:	0f 90       	pop	r0
   1595a:	0f 90       	pop	r0
   1595c:	0f 90       	pop	r0
   1595e:	b8 01       	movw	r22, r16
   15960:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
                 pc_buff,
                 s_size);
	}

}/*End usr_sensorCal*/
   15964:	cc 5b       	subi	r28, 0xBC	; 188
   15966:	df 4f       	sbci	r29, 0xFF	; 255
   15968:	cd bf       	out	0x3d, r28	; 61
   1596a:	de bf       	out	0x3e, r29	; 62
   1596c:	df 91       	pop	r29
   1596e:	cf 91       	pop	r28
   15970:	1f 91       	pop	r17
   15972:	0f 91       	pop	r16
   15974:	ff 90       	pop	r15
   15976:	ef 90       	pop	r14
   15978:	df 90       	pop	r13
   1597a:	cf 90       	pop	r12
   1597c:	bf 90       	pop	r11
   1597e:	af 90       	pop	r10
   15980:	9f 90       	pop	r9
   15982:	8f 90       	pop	r8
   15984:	7f 90       	pop	r7
   15986:	6f 90       	pop	r6
   15988:	5f 90       	pop	r5
   1598a:	4f 90       	pop	r4
   1598c:	08 95       	ret

0001598e <usr_console>:

bool usr_console( t_DEVHANDLE t_consoleHndl,
                  int8_t *pc_buff,
                  t_consoleTokHndl *pt_tokHndl)
{
   1598e:	cf 92       	push	r12
   15990:	df 92       	push	r13
   15992:	ff 92       	push	r15
   15994:	0f 93       	push	r16
   15996:	1f 93       	push	r17
   15998:	cf 93       	push	r28
   1599a:	df 93       	push	r29
   1599c:	cd b7       	in	r28, 0x3d	; 61
   1599e:	de b7       	in	r29, 0x3e	; 62
   159a0:	aa 97       	sbiw	r28, 0x2a	; 42
   159a2:	cd bf       	out	0x3d, r28	; 61
   159a4:	de bf       	out	0x3e, r29	; 62
   159a6:	89 a7       	lds	r24, 0x79
   159a8:	9a a7       	lds	r25, 0x7a
   159aa:	6b 01       	movw	r12, r22
   159ac:	14 2f       	mov	r17, r20
   159ae:	05 2f       	mov	r16, r21

   bool b_success = true; /*A valid command was found...*/

   if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sas") == 0) /*Set active state*/
   159b0:	84 2f       	mov	r24, r20
   159b2:	95 2f       	mov	r25, r21
   159b4:	6c e8       	ldi	r22, 0x8C	; 140
   159b6:	70 e2       	ldi	r23, 0x20	; 32
   159b8:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   159bc:	00 97       	sbiw	r24, 0x00	; 0
   159be:	11 f4       	brne	.+4      	; 0x159c4 <usr_console+0x36>
   {
      usr_navSetState( NAV_ACTIVE);
   159c0:	86 e0       	ldi	r24, 0x06	; 6
   159c2:	09 c0       	rjmp	.+18     	; 0x159d6 <usr_console+0x48>
   }/*End if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sam") == 0)*/
   else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sis") == 0) /*Set idle state*/
   159c4:	81 2f       	mov	r24, r17
   159c6:	90 2f       	mov	r25, r16
   159c8:	60 e9       	ldi	r22, 0x90	; 144
   159ca:	70 e2       	ldi	r23, 0x20	; 32
   159cc:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   159d0:	00 97       	sbiw	r24, 0x00	; 0
   159d2:	21 f4       	brne	.+8      	; 0x159dc <usr_console+0x4e>
   {
      usr_navSetState( NAV_ACCEL_CAL);
   159d4:	84 e0       	ldi	r24, 0x04	; 4
   159d6:	0e 94 d1 ae 	call	0x15da2	; 0x15da2 <usr_navSetState>
   159da:	b3 c0       	rjmp	.+358    	; 0x15b42 <usr_console+0x1b4>
   }/*End else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sim") == 0)*/
   else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sdi") == 0) /*Set DCM init*/
   159dc:	81 2f       	mov	r24, r17
   159de:	90 2f       	mov	r25, r16
   159e0:	64 e9       	ldi	r22, 0x94	; 148
   159e2:	70 e2       	ldi	r23, 0x20	; 32
   159e4:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   159e8:	00 97       	sbiw	r24, 0x00	; 0
   159ea:	11 f4       	brne	.+4      	; 0x159f0 <usr_console+0x62>
   {
      usr_navSetState( NAV_DCM_INIT);
   159ec:	85 e0       	ldi	r24, 0x05	; 5
   159ee:	f3 cf       	rjmp	.-26     	; 0x159d6 <usr_console+0x48>
   }/*End else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "sim") == 0)*/
   else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "pmc") == 0) /*Perform mag cal*/
   159f0:	81 2f       	mov	r24, r17
   159f2:	90 2f       	mov	r25, r16
   159f4:	68 e9       	ldi	r22, 0x98	; 152
   159f6:	70 e2       	ldi	r23, 0x20	; 32
   159f8:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   159fc:	00 97       	sbiw	r24, 0x00	; 0
   159fe:	21 f4       	brne	.+8      	; 0x15a08 <usr_console+0x7a>
   {
      usr_sensorCal( t_consoleHndl,
   15a00:	89 a5       	lds	r24, 0x69
   15a02:	9a a5       	lds	r25, 0x6a
   15a04:	63 e0       	ldi	r22, 0x03	; 3
   15a06:	0b c0       	rjmp	.+22     	; 0x15a1e <usr_console+0x90>
                     NAV_MAG_CAL,
                     pc_buff);
   }/*Emd if( strcmp( (char *)pt_tokHndl->ac_tok[0], "pmc") == 0)*/
   else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "pac") == 0) /*Perform accel cal*/
   15a08:	81 2f       	mov	r24, r17
   15a0a:	90 2f       	mov	r25, r16
   15a0c:	6c e9       	ldi	r22, 0x9C	; 156
   15a0e:	70 e2       	ldi	r23, 0x20	; 32
   15a10:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   15a14:	00 97       	sbiw	r24, 0x00	; 0
   15a16:	39 f4       	brne	.+14     	; 0x15a26 <usr_console+0x98>
   {
      usr_sensorCal( t_consoleHndl,
   15a18:	89 a5       	lds	r24, 0x69
   15a1a:	9a a5       	lds	r25, 0x6a
   15a1c:	64 e0       	ldi	r22, 0x04	; 4
   15a1e:	a6 01       	movw	r20, r12
   15a20:	0e 94 c6 a9 	call	0x1538c	; 0x1538c <usr_sensorCal>
   15a24:	8e c0       	rjmp	.+284    	; 0x15b42 <usr_console+0x1b4>
                     NAV_ACCEL_CAL,
                     pc_buff);
   }/*End else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "pac") == 0)*/
   else if( strcmp( (char *)pt_tokHndl->ac_tok[0], "gsd") == 0) /*Get state data*/
   15a26:	81 2f       	mov	r24, r17
   15a28:	90 2f       	mov	r25, r16
   15a2a:	60 ea       	ldi	r22, 0xA0	; 160
   15a2c:	70 e2       	ldi	r23, 0x20	; 32
   15a2e:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   15a32:	00 97       	sbiw	r24, 0x00	; 0
   15a34:	09 f0       	breq	.+2      	; 0x15a38 <usr_console+0xaa>
   15a36:	87 c0       	rjmp	.+270    	; 0x15b46 <usr_console+0x1b8>
   {
      t_currentMeas t_meas;
      uint16_t s_size;
      t_navState t_state = usr_navGetState();
   15a38:	0e 94 f3 ae 	call	0x15de6	; 0x15de6 <usr_navGetState>
   15a3c:	f8 2e       	mov	r15, r24

      usr_navGetStateEst( &t_meas);
   15a3e:	ce 01       	movw	r24, r28
   15a40:	01 96       	adiw	r24, 0x01	; 1
   15a42:	0e 94 67 b2 	call	0x164ce	; 0x164ce <usr_navGetStateEst>

      /*---------------------------------------------------------------------*
       * Return "Current State Data"
       *---------------------------------------------------------------------*/
		s_size = sprintf_P( (char *)pc_buff,
   15a46:	2d b7       	in	r18, 0x3d	; 61
   15a48:	3e b7       	in	r19, 0x3e	; 62
   15a4a:	20 53       	subi	r18, 0x30	; 48
   15a4c:	30 40       	sbci	r19, 0x00	; 0
   15a4e:	2d bf       	out	0x3d, r18	; 61
   15a50:	3e bf       	out	0x3e, r19	; 62
   15a52:	0d b7       	in	r16, 0x3d	; 61
   15a54:	1e b7       	in	r17, 0x3e	; 62
   15a56:	0f 5f       	subi	r16, 0xFF	; 255
   15a58:	1f 4f       	sbci	r17, 0xFF	; 255
   15a5a:	ed b7       	in	r30, 0x3d	; 61
   15a5c:	fe b7       	in	r31, 0x3e	; 62
   15a5e:	c1 82       	std	Z+1, r12	; 0x01
   15a60:	d2 82       	std	Z+2, r13	; 0x02
   15a62:	8d ed       	ldi	r24, 0xDD	; 221
   15a64:	92 e0       	ldi	r25, 0x02	; 2
   15a66:	f8 01       	movw	r30, r16
   15a68:	82 83       	std	Z+2, r24	; 0x02
   15a6a:	93 83       	std	Z+3, r25	; 0x03
   15a6c:	89 81       	ldd	r24, Y+1	; 0x01
   15a6e:	9a 81       	ldd	r25, Y+2	; 0x02
   15a70:	ab 81       	ldd	r26, Y+3	; 0x03
   15a72:	bc 81       	ldd	r27, Y+4	; 0x04
   15a74:	84 83       	std	Z+4, r24	; 0x04
   15a76:	95 83       	std	Z+5, r25	; 0x05
   15a78:	a6 83       	std	Z+6, r26	; 0x06
   15a7a:	b7 83       	std	Z+7, r27	; 0x07
   15a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
   15a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
   15a80:	af 85       	ldd	r26, Y+15	; 0x0f
   15a82:	b8 89       	ldd	r27, Y+16	; 0x10
   15a84:	80 87       	std	Z+8, r24	; 0x08
   15a86:	91 87       	std	Z+9, r25	; 0x09
   15a88:	a2 87       	std	Z+10, r26	; 0x0a
   15a8a:	b3 87       	std	Z+11, r27	; 0x0b
   15a8c:	8d 81       	ldd	r24, Y+5	; 0x05
   15a8e:	9e 81       	ldd	r25, Y+6	; 0x06
   15a90:	af 81       	ldd	r26, Y+7	; 0x07
   15a92:	b8 85       	ldd	r27, Y+8	; 0x08
   15a94:	84 87       	std	Z+12, r24	; 0x0c
   15a96:	95 87       	std	Z+13, r25	; 0x0d
   15a98:	a6 87       	std	Z+14, r26	; 0x0e
   15a9a:	b7 87       	std	Z+15, r27	; 0x0f
   15a9c:	89 89       	ldd	r24, Y+17	; 0x11
   15a9e:	9a 89       	ldd	r25, Y+18	; 0x12
   15aa0:	ab 89       	ldd	r26, Y+19	; 0x13
   15aa2:	bc 89       	ldd	r27, Y+20	; 0x14
   15aa4:	80 8b       	std	Z+16, r24	; 0x10
   15aa6:	91 8b       	std	Z+17, r25	; 0x11
   15aa8:	a2 8b       	std	Z+18, r26	; 0x12
   15aaa:	b3 8b       	std	Z+19, r27	; 0x13
   15aac:	89 85       	ldd	r24, Y+9	; 0x09
   15aae:	9a 85       	ldd	r25, Y+10	; 0x0a
   15ab0:	ab 85       	ldd	r26, Y+11	; 0x0b
   15ab2:	bc 85       	ldd	r27, Y+12	; 0x0c
   15ab4:	84 8b       	std	Z+20, r24	; 0x14
   15ab6:	95 8b       	std	Z+21, r25	; 0x15
   15ab8:	a6 8b       	std	Z+22, r26	; 0x16
   15aba:	b7 8b       	std	Z+23, r27	; 0x17
   15abc:	8d 89       	ldd	r24, Y+21	; 0x15
   15abe:	9e 89       	ldd	r25, Y+22	; 0x16
   15ac0:	af 89       	ldd	r26, Y+23	; 0x17
   15ac2:	b8 8d       	ldd	r27, Y+24	; 0x18
   15ac4:	80 8f       	std	Z+24, r24	; 0x18
   15ac6:	91 8f       	std	Z+25, r25	; 0x19
   15ac8:	a2 8f       	std	Z+26, r26	; 0x1a
   15aca:	b3 8f       	std	Z+27, r27	; 0x1b
   15acc:	89 8d       	ldd	r24, Y+25	; 0x19
   15ace:	9a 8d       	ldd	r25, Y+26	; 0x1a
   15ad0:	ab 8d       	ldd	r26, Y+27	; 0x1b
   15ad2:	bc 8d       	ldd	r27, Y+28	; 0x1c
   15ad4:	84 8f       	std	Z+28, r24	; 0x1c
   15ad6:	95 8f       	std	Z+29, r25	; 0x1d
   15ad8:	a6 8f       	std	Z+30, r26	; 0x1e
   15ada:	b7 8f       	std	Z+31, r27	; 0x1f
   15adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
   15ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
   15ae0:	af 8d       	ldd	r26, Y+31	; 0x1f
   15ae2:	b8 a1       	lds	r27, 0x48
   15ae4:	80 a3       	lds	r24, 0x50
   15ae6:	91 a3       	lds	r25, 0x51
   15ae8:	a2 a3       	lds	r26, 0x52
   15aea:	b3 a3       	lds	r27, 0x53
   15aec:	89 a1       	lds	r24, 0x49
   15aee:	9a a1       	lds	r25, 0x4a
   15af0:	ab a1       	lds	r26, 0x4b
   15af2:	bc a1       	lds	r27, 0x4c
   15af4:	84 a3       	lds	r24, 0x54
   15af6:	95 a3       	lds	r25, 0x55
   15af8:	a6 a3       	lds	r26, 0x56
   15afa:	b7 a3       	lds	r27, 0x57
   15afc:	4d a1       	lds	r20, 0x4d
   15afe:	5e a1       	lds	r21, 0x4e
   15b00:	6f a1       	lds	r22, 0x4f
   15b02:	78 a5       	lds	r23, 0x68
   15b04:	40 a7       	lds	r20, 0x70
   15b06:	51 a7       	lds	r21, 0x71
   15b08:	62 a7       	lds	r22, 0x72
   15b0a:	73 a7       	lds	r23, 0x73
   15b0c:	6f 2d       	mov	r22, r15
   15b0e:	70 e0       	ldi	r23, 0x00	; 0
   15b10:	80 e0       	ldi	r24, 0x00	; 0
   15b12:	90 e0       	ldi	r25, 0x00	; 0
   15b14:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   15b18:	dc 01       	movw	r26, r24
   15b1a:	cb 01       	movw	r24, r22
   15b1c:	f8 01       	movw	r30, r16
   15b1e:	84 a7       	lds	r24, 0x74
   15b20:	95 a7       	lds	r25, 0x75
   15b22:	a6 a7       	lds	r26, 0x76
   15b24:	b7 a7       	lds	r27, 0x77
   15b26:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   15b2a:	ac 01       	movw	r20, r24
                          t_meas.af_avrResMag[0],
                          t_meas.af_avrResMag[1],
                          t_meas.af_avrResMag[2],
                          (float)t_state);

		arb_write( t_consoleHndl,
   15b2c:	89 a5       	lds	r24, 0x69
   15b2e:	9a a5       	lds	r25, 0x6a
   15b30:	2d b7       	in	r18, 0x3d	; 61
   15b32:	3e b7       	in	r19, 0x3e	; 62
   15b34:	20 5d       	subi	r18, 0xD0	; 208
   15b36:	3f 4f       	sbci	r19, 0xFF	; 255
   15b38:	2d bf       	out	0x3d, r18	; 61
   15b3a:	3e bf       	out	0x3e, r19	; 62
   15b3c:	b6 01       	movw	r22, r12
   15b3e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
bool usr_console( t_DEVHANDLE t_consoleHndl,
                  int8_t *pc_buff,
                  t_consoleTokHndl *pt_tokHndl)
{

   bool b_success = true; /*A valid command was found...*/
   15b42:	81 e0       	ldi	r24, 0x01	; 1
   15b44:	01 c0       	rjmp	.+2      	; 0x15b48 <usr_console+0x1ba>
		           pc_buff,
		           s_size);
   }
   else /*Unrecognized message*/
   {
      b_success = false;
   15b46:	80 e0       	ldi	r24, 0x00	; 0
   /*------------------------------------------------------------------------*
    * Return control over the console to the kernel...
    *------------------------------------------------------------------------*/
   return b_success;

}/*End arb_console*/
   15b48:	aa 96       	adiw	r28, 0x2a	; 42
   15b4a:	cd bf       	out	0x3d, r28	; 61
   15b4c:	de bf       	out	0x3e, r29	; 62
   15b4e:	df 91       	pop	r29
   15b50:	cf 91       	pop	r28
   15b52:	1f 91       	pop	r17
   15b54:	0f 91       	pop	r16
   15b56:	ff 90       	pop	r15
   15b58:	df 90       	pop	r13
   15b5a:	cf 90       	pop	r12
   15b5c:	08 95       	ret

00015b5e <usr_navError>:
}/*End usr_navActive*/

static void usr_navError( int32_t i_stateData,
                          uint8_t c_prevState)
{
   if( c_prevState != NAV_ERROR)
   15b5e:	47 30       	cpi	r20, 0x07	; 7
   15b60:	29 f0       	breq	.+10     	; 0x15b6c <usr_navError+0xe>
   {
      gt_navStruct.t_curState = NAV_ERROR;
   15b62:	87 e0       	ldi	r24, 0x07	; 7
   15b64:	80 93 7f 2b 	sts	0x2B7F, r24

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15b68:	40 93 7e 2b 	sts	0x2B7E, r20
   15b6c:	08 95       	ret

00015b6e <usr_navActive>:

}/*End usr_navDcmInit*/

static void usr_navActive( int32_t i_stateData,
                           uint8_t c_prevState)
{
   15b6e:	cf 93       	push	r28
   15b70:	df 93       	push	r29
   15b72:	cd b7       	in	r28, 0x3d	; 61
   15b74:	de b7       	in	r29, 0x3e	; 62
   15b76:	e2 97       	sbiw	r28, 0x32	; 50
   15b78:	cd bf       	out	0x3d, r28	; 61
   15b7a:	de bf       	out	0x3e, r29	; 62
   volatile t_sysTime time1,time2;

   if( c_prevState != NAV_ACTIVE)
   15b7c:	46 30       	cpi	r20, 0x06	; 6
   15b7e:	29 f0       	breq	.+10     	; 0x15b8a <usr_navActive+0x1c>
   {
      gt_navStruct.t_curState = NAV_ACTIVE;
   15b80:	86 e0       	ldi	r24, 0x06	; 6
   15b82:	80 93 7f 2b 	sts	0x2B7F, r24

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15b86:	40 93 7e 2b 	sts	0x2B7E, r20

   }/*End if( c_prevState != NAV_ACTIVE)*/

   time1 = arb_sysTimeNow();
   15b8a:	ce 01       	movw	r24, r28
   15b8c:	4a 96       	adiw	r24, 0x1a	; 26
   15b8e:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
   arb_ioctl( gt_navStruct.t_insHndl,
   15b92:	80 91 81 2b 	lds	r24, 0x2B81
   15b96:	90 91 82 2b 	lds	r25, 0x2B82
   15b9a:	69 e0       	ldi	r22, 0x09	; 9
   15b9c:	70 e0       	ldi	r23, 0x00	; 0
   15b9e:	20 e0       	ldi	r18, 0x00	; 0
   15ba0:	30 e0       	ldi	r19, 0x00	; 0
   15ba2:	a9 01       	movw	r20, r18
   15ba4:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
               INS_UPDATE,
               0);
   time2 = arb_sysTimeNow();
   15ba8:	ce 01       	movw	r24, r28
   15baa:	01 96       	adiw	r24, 0x01	; 1
   15bac:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>

}/*End usr_navActive*/
   15bb0:	e2 96       	adiw	r28, 0x32	; 50
   15bb2:	cd bf       	out	0x3d, r28	; 61
   15bb4:	de bf       	out	0x3e, r29	; 62
   15bb6:	df 91       	pop	r29
   15bb8:	cf 91       	pop	r28
   15bba:	08 95       	ret

00015bbc <usr_navigation>:
   t_stmnError t_stErr;

   /*------------------------------------------------------------------------*
    * Bring the INS sensors out of reset...
    *------------------------------------------------------------------------*/
   arb_ioctl( gt_navStruct.t_insHndl,
   15bbc:	80 91 81 2b 	lds	r24, 0x2B81
   15bc0:	90 91 82 2b 	lds	r25, 0x2B82
   15bc4:	60 e0       	ldi	r22, 0x00	; 0
   15bc6:	70 e0       	ldi	r23, 0x00	; 0
   15bc8:	20 e0       	ldi	r18, 0x00	; 0
   15bca:	30 e0       	ldi	r19, 0x00	; 0
   15bcc:	a9 01       	movw	r20, r18
   15bce:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   while( RUN_FOREVER)
   {
      /*---------------------------------------------------------------------*
       * Global data is being accessed, apply lock...
       *---------------------------------------------------------------------*/
      arb_wait( gt_navStruct.t_mutex, 0);
   15bd2:	80 91 87 2b 	lds	r24, 0x2B87
   15bd6:	90 91 88 2b 	lds	r25, 0x2B88
   15bda:	60 e0       	ldi	r22, 0x00	; 0
   15bdc:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>

      /*---------------------------------------------------------------------*
       * Transition to the next state...
       *---------------------------------------------------------------------*/
      t_stErr = utl_stMnEngine( gt_navStruct.t_stateMn);
   15be0:	80 91 7c 2b 	lds	r24, 0x2B7C
   15be4:	90 91 7d 2b 	lds	r25, 0x2B7D
   15be8:	0e 94 f4 ec 	call	0x1d9e8	; 0x1d9e8 <utl_stMnEngine>

      /*---------------------------------------------------------------------*
       * unlock...
       *---------------------------------------------------------------------*/
      arb_signal( gt_navStruct.t_mutex);
   15bec:	80 91 87 2b 	lds	r24, 0x2B87
   15bf0:	90 91 88 2b 	lds	r25, 0x2B88
   15bf4:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

      /*---------------------------------------------------------------------*
       * Allow other threads to run...
       *---------------------------------------------------------------------*/
      arb_sleep( NAV_UPDATE_RATE_DT);
   15bf8:	83 e0       	ldi	r24, 0x03	; 3
   15bfa:	90 e0       	ldi	r25, 0x00	; 0
   15bfc:	0e 94 b0 d4 	call	0x1a960	; 0x1a960 <arb_sleep>
   15c00:	e8 cf       	rjmp	.-48     	; 0x15bd2 <usr_navigation+0x16>

00015c02 <usr_navCalComplete>:

static void usr_navCalComplete( int32_t i_stateData,
                                uint8_t c_prevState)
{

   if( c_prevState != NAV_CAL_COMPLETE)
   15c02:	41 30       	cpi	r20, 0x01	; 1
   15c04:	59 f0       	breq	.+22     	; 0x15c1c <usr_navCalComplete+0x1a>
   {
      gt_navStruct.t_curState = NAV_CAL_COMPLETE;
   15c06:	81 e0       	ldi	r24, 0x01	; 1
   15c08:	80 93 7f 2b 	sts	0x2B7F, r24

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15c0c:	40 93 7e 2b 	sts	0x2B7E, r20

      /*---------------------------------------------------------------------*
       * Signal the console letting it know a sample has been captured.
       *---------------------------------------------------------------------*/
      arb_signal(gt_navStruct.t_signal);
   15c10:	80 91 89 2b 	lds	r24, 0x2B89
   15c14:	90 91 8a 2b 	lds	r25, 0x2B8A
   15c18:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>
   15c1c:	08 95       	ret

00015c1e <usr_navCalSampComp>:

static void usr_navCalSampComp( int32_t i_stateData,
                                uint8_t c_prevState)
{

   if( c_prevState != NAV_CAL_SAMP_COMP)
   15c1e:	42 30       	cpi	r20, 0x02	; 2
   15c20:	59 f0       	breq	.+22     	; 0x15c38 <usr_navCalSampComp+0x1a>
   {
      gt_navStruct.t_curState = NAV_CAL_SAMP_COMP;
   15c22:	82 e0       	ldi	r24, 0x02	; 2
   15c24:	80 93 7f 2b 	sts	0x2B7F, r24

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15c28:	40 93 7e 2b 	sts	0x2B7E, r20

      /*---------------------------------------------------------------------*
       * Signal the console letting it know a sample has been captured.
       *---------------------------------------------------------------------*/
      arb_signal(gt_navStruct.t_signal);
   15c2c:	80 91 89 2b 	lds	r24, 0x2B89
   15c30:	90 91 8a 2b 	lds	r25, 0x2B8A
   15c34:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>
   15c38:	08 95       	ret

00015c3a <usr_navIdle>:
/*---------------------------------------------------------------------------*
 * Private Function Definitions
 *---------------------------------------------------------------------------*/
static void usr_navIdle( int32_t i_stateData,
                         uint8_t c_prevState)
{
   15c3a:	cf 93       	push	r28
   15c3c:	c4 2f       	mov	r28, r20
   gt_navStruct.t_curState = NAV_IDLE;
   15c3e:	10 92 7f 2b 	sts	0x2B7F, r1

   if( c_prevState != NAV_IDLE)
   15c42:	44 23       	and	r20, r20
   15c44:	c1 f0       	breq	.+48     	; 0x15c76 <usr_navIdle+0x3c>
   {
      gt_navStruct.t_curState = NAV_IDLE;

      arb_ioctl( gt_navStruct.t_signalHndl,
   15c46:	80 91 83 2b 	lds	r24, 0x2B83
   15c4a:	90 91 84 2b 	lds	r25, 0x2B84
   15c4e:	68 e0       	ldi	r22, 0x08	; 8
   15c50:	70 e0       	ldi	r23, 0x00	; 0
   15c52:	20 e0       	ldi	r18, 0x00	; 0
   15c54:	30 e0       	ldi	r19, 0x00	; 0
   15c56:	a9 01       	movw	r20, r18
   15c58:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
                 YELLOW_LED_TOGGLE,
                 0);

      arb_ioctl( gt_navStruct.t_insHndl,
   15c5c:	80 91 81 2b 	lds	r24, 0x2B81
   15c60:	90 91 82 2b 	lds	r25, 0x2B82
   15c64:	6b e0       	ldi	r22, 0x0B	; 11
   15c66:	70 e0       	ldi	r23, 0x00	; 0
   15c68:	20 e0       	ldi	r18, 0x00	; 0
   15c6a:	30 e0       	ldi	r19, 0x00	; 0
   15c6c:	a9 01       	movw	r20, r18
   15c6e:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
                 0);

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15c72:	c0 93 7e 2b 	sts	0x2B7E, r28

   }/*End if( c_prevState != NAV_IDLE)*/

}/*End usr_navIdle*/
   15c76:	cf 91       	pop	r28
   15c78:	08 95       	ret

00015c7a <usr_navDcmInit>:
}/*End usr_navAccelCal*/

static void usr_navDcmInit( int32_t i_stateData,
                            uint8_t c_prevState)
{
   if( c_prevState != NAV_DCM_INIT)
   15c7a:	45 30       	cpi	r20, 0x05	; 5
   15c7c:	29 f0       	breq	.+10     	; 0x15c88 <usr_navDcmInit+0xe>
   {
      gt_navStruct.t_curState = NAV_DCM_INIT;
   15c7e:	85 e0       	ldi	r24, 0x05	; 5
   15c80:	80 93 7f 2b 	sts	0x2B7F, r24

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15c84:	40 93 7e 2b 	sts	0x2B7E, r20

   }/*End if( c_prevState != NAV_DCM_INIT)*/

   if( arb_ioctl( gt_navStruct.t_insHndl,
   15c88:	80 91 81 2b 	lds	r24, 0x2B81
   15c8c:	90 91 82 2b 	lds	r25, 0x2B82
   15c90:	68 e0       	ldi	r22, 0x08	; 8
   15c92:	70 e0       	ldi	r23, 0x00	; 0
   15c94:	20 e0       	ldi	r18, 0x00	; 0
   15c96:	30 e0       	ldi	r19, 0x00	; 0
   15c98:	a9 01       	movw	r20, r18
   15c9a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   15c9e:	dc 01       	movw	r26, r24
   15ca0:	cb 01       	movw	r24, r22
   15ca2:	82 30       	cpi	r24, 0x02	; 2
   15ca4:	91 05       	cpc	r25, r1
   15ca6:	a1 05       	cpc	r26, r1
   15ca8:	b1 05       	cpc	r27, r1
   15caa:	51 f4       	brne	.+20     	; 0x15cc0 <usr_navDcmInit+0x46>
                  INS_DCM_INIT,
                  0) == INS_CAL_COMPLETE)
   {
      utl_stMnChangeState( gt_navStruct.t_stateMn,
   15cac:	80 91 7c 2b 	lds	r24, 0x2B7C
   15cb0:	90 91 7d 2b 	lds	r25, 0x2B7D
   15cb4:	66 e0       	ldi	r22, 0x06	; 6
   15cb6:	20 e0       	ldi	r18, 0x00	; 0
   15cb8:	30 e0       	ldi	r19, 0x00	; 0
   15cba:	a9 01       	movw	r20, r18
   15cbc:	0e 94 aa ec 	call	0x1d954	; 0x1d954 <utl_stMnChangeState>
   15cc0:	08 95       	ret

00015cc2 <usr_navAccelCal>:

}/*End usr_navMagCal*/

static void usr_navAccelCal( int32_t i_stateData,
                             uint8_t c_prevState)
{
   15cc2:	cf 93       	push	r28
   15cc4:	c4 2f       	mov	r28, r20

   if( c_prevState != NAV_ACCEL_CAL)
   15cc6:	44 30       	cpi	r20, 0x04	; 4
   15cc8:	a1 f0       	breq	.+40     	; 0x15cf2 <usr_navAccelCal+0x30>
   {
      gt_navStruct.t_curState = NAV_ACCEL_CAL;
   15cca:	84 e0       	ldi	r24, 0x04	; 4
   15ccc:	80 93 7f 2b 	sts	0x2B7F, r24

      if( c_prevState != NAV_CAL_SAMP_COMP)
   15cd0:	42 30       	cpi	r20, 0x02	; 2
   15cd2:	69 f0       	breq	.+26     	; 0x15cee <usr_navAccelCal+0x2c>
         gt_navStruct.t_calStatus = (t_insCalStatus)arb_ioctl( gt_navStruct.
   15cd4:	80 91 81 2b 	lds	r24, 0x2B81
   15cd8:	90 91 82 2b 	lds	r25, 0x2B82
   15cdc:	6a e0       	ldi	r22, 0x0A	; 10
   15cde:	70 e0       	ldi	r23, 0x00	; 0
   15ce0:	20 e0       	ldi	r18, 0x00	; 0
   15ce2:	30 e0       	ldi	r19, 0x00	; 0
   15ce4:	a9 01       	movw	r20, r18
   15ce6:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   15cea:	60 93 80 2b 	sts	0x2B80, r22
                                                               0);

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15cee:	c0 93 7e 2b 	sts	0x2B7E, r28
    * called, a new sample is acquired. When INS_MAX_CAL_SAMPLES have been
    * stored the accelerometer bias, principle axis, and axis scale factors
    * are estimated using an ellipsoid fit algorithm.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_calStatus =
   (t_insCalStatus)arb_ioctl( gt_navStruct.
   15cf2:	80 91 81 2b 	lds	r24, 0x2B81
   15cf6:	90 91 82 2b 	lds	r25, 0x2B82
   15cfa:	62 e0       	ldi	r22, 0x02	; 2
   15cfc:	70 e0       	ldi	r23, 0x00	; 0
   15cfe:	2b e8       	ldi	r18, 0x8B	; 139
   15d00:	3b e2       	ldi	r19, 0x2B	; 43
   15d02:	44 27       	eor	r20, r20
   15d04:	37 fd       	sbrc	r19, 7
   15d06:	40 95       	com	r20
   15d08:	54 2f       	mov	r21, r20
   15d0a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
    * Tell the INS driver to calibrate the accelerometer Each time ioctl gets
    * called, a new sample is acquired. When INS_MAX_CAL_SAMPLES have been
    * stored the accelerometer bias, principle axis, and axis scale factors
    * are estimated using an ellipsoid fit algorithm.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_calStatus =
   15d0e:	60 93 80 2b 	sts	0x2B80, r22
    * Put the state machine back into IDLE and wait for an external
    * application to tell us to acquire the next sample.
    *------------------------------------------------------------------------*/
   if( gt_navStruct.t_calStatus == INS_CAL_IN_PROGRESS)
   {
      utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d12:	80 91 7c 2b 	lds	r24, 0x2B7C
   15d16:	90 91 7d 2b 	lds	r25, 0x2B7D

   /*------------------------------------------------------------------------*
    * Put the state machine back into IDLE and wait for an external
    * application to tell us to acquire the next sample.
    *------------------------------------------------------------------------*/
   if( gt_navStruct.t_calStatus == INS_CAL_IN_PROGRESS)
   15d1a:	61 30       	cpi	r22, 0x01	; 1
   15d1c:	11 f4       	brne	.+4      	; 0x15d22 <usr_navAccelCal+0x60>
   {
      utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d1e:	62 e0       	ldi	r22, 0x02	; 2
   15d20:	01 c0       	rjmp	.+2      	; 0x15d24 <usr_navAccelCal+0x62>
                           (uint8_t)NAV_CAL_SAMP_COMP,
                           0);
   }/*End if( t_calStatus == INS_CAL_COMPLETE)*/
   else
   {
      utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d22:	61 e0       	ldi	r22, 0x01	; 1
   15d24:	20 e0       	ldi	r18, 0x00	; 0
   15d26:	30 e0       	ldi	r19, 0x00	; 0
   15d28:	a9 01       	movw	r20, r18
   15d2a:	0e 94 aa ec 	call	0x1d954	; 0x1d954 <utl_stMnChangeState>
                           (uint8_t)NAV_CAL_COMPLETE,
                           0);
   }

}/*End usr_navAccelCal*/
   15d2e:	cf 91       	pop	r28
   15d30:	08 95       	ret

00015d32 <usr_navMagCal>:

}/*End usr_navCalComplete*/

static void usr_navMagCal( int32_t i_stateData,
                           uint8_t c_prevState)
{
   15d32:	cf 93       	push	r28
   15d34:	c4 2f       	mov	r28, r20
   t_stmnError t_err;

   if( c_prevState != NAV_MAG_CAL)
   15d36:	43 30       	cpi	r20, 0x03	; 3
   15d38:	a1 f0       	breq	.+40     	; 0x15d62 <usr_navMagCal+0x30>
   {
      gt_navStruct.t_curState = NAV_MAG_CAL;
   15d3a:	83 e0       	ldi	r24, 0x03	; 3
   15d3c:	80 93 7f 2b 	sts	0x2B7F, r24

      if( c_prevState != NAV_CAL_SAMP_COMP)
   15d40:	42 30       	cpi	r20, 0x02	; 2
   15d42:	69 f0       	breq	.+26     	; 0x15d5e <usr_navMagCal+0x2c>
         gt_navStruct.t_calStatus = (t_insCalStatus)arb_ioctl( gt_navStruct.
   15d44:	80 91 81 2b 	lds	r24, 0x2B81
   15d48:	90 91 82 2b 	lds	r25, 0x2B82
   15d4c:	6a e0       	ldi	r22, 0x0A	; 10
   15d4e:	70 e0       	ldi	r23, 0x00	; 0
   15d50:	20 e0       	ldi	r18, 0x00	; 0
   15d52:	30 e0       	ldi	r19, 0x00	; 0
   15d54:	a9 01       	movw	r20, r18
   15d56:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   15d5a:	60 93 80 2b 	sts	0x2B80, r22
                                                               0);

      /*---------------------------------------------------------------------*
       * Keep track of where we came from...
       *---------------------------------------------------------------------*/
      gt_navStruct.t_prevState = (t_navState)c_prevState;
   15d5e:	c0 93 7e 2b 	sts	0x2B7E, r28
    * called, a new sample is acquired. When INS_MAX_CAL_SAMPLES have been
    * stored the magnetometer bias, principle axis, and axis scale factors are
    * estimated using an ellipsoid fit algorithm.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_calStatus =
   (t_insCalStatus)arb_ioctl( gt_navStruct.
   15d62:	80 91 81 2b 	lds	r24, 0x2B81
   15d66:	90 91 82 2b 	lds	r25, 0x2B82
   15d6a:	61 e0       	ldi	r22, 0x01	; 1
   15d6c:	70 e0       	ldi	r23, 0x00	; 0
   15d6e:	2b e8       	ldi	r18, 0x8B	; 139
   15d70:	3b e2       	ldi	r19, 0x2B	; 43
   15d72:	44 27       	eor	r20, r20
   15d74:	37 fd       	sbrc	r19, 7
   15d76:	40 95       	com	r20
   15d78:	54 2f       	mov	r21, r20
   15d7a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
    * Tell the INS driver to calibrate the magnetometer. Each time ioctl gets
    * called, a new sample is acquired. When INS_MAX_CAL_SAMPLES have been
    * stored the magnetometer bias, principle axis, and axis scale factors are
    * estimated using an ellipsoid fit algorithm.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_calStatus =
   15d7e:	60 93 80 2b 	sts	0x2B80, r22
    * Put the state machine back into IDLE and wait for an external
    * application to tell us to acquire the next sample.
    *------------------------------------------------------------------------*/
   if( gt_navStruct.t_calStatus == INS_CAL_IN_PROGRESS)
   {
      t_err = utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d82:	80 91 7c 2b 	lds	r24, 0x2B7C
   15d86:	90 91 7d 2b 	lds	r25, 0x2B7D

   /*------------------------------------------------------------------------*
    * Put the state machine back into IDLE and wait for an external
    * application to tell us to acquire the next sample.
    *------------------------------------------------------------------------*/
   if( gt_navStruct.t_calStatus == INS_CAL_IN_PROGRESS)
   15d8a:	61 30       	cpi	r22, 0x01	; 1
   15d8c:	11 f4       	brne	.+4      	; 0x15d92 <usr_navMagCal+0x60>
   {
      t_err = utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d8e:	62 e0       	ldi	r22, 0x02	; 2
   15d90:	01 c0       	rjmp	.+2      	; 0x15d94 <usr_navMagCal+0x62>
                                    (uint8_t)NAV_CAL_SAMP_COMP,
                                    0);
   }/*End if( t_calStatus == INS_CAL_COMPLETE)*/
   else
   {
      utl_stMnChangeState( gt_navStruct.t_stateMn,
   15d92:	61 e0       	ldi	r22, 0x01	; 1
   15d94:	20 e0       	ldi	r18, 0x00	; 0
   15d96:	30 e0       	ldi	r19, 0x00	; 0
   15d98:	a9 01       	movw	r20, r18
   15d9a:	0e 94 aa ec 	call	0x1d954	; 0x1d954 <utl_stMnChangeState>
                           (uint8_t)NAV_CAL_COMPLETE,
                           0);
   }

}/*End usr_navMagCal*/
   15d9e:	cf 91       	pop	r28
   15da0:	08 95       	ret

00015da2 <usr_navSetState>:

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
bool usr_navSetState( t_navState t_nxtState)
{
   15da2:	cf 93       	push	r28
   15da4:	c8 2f       	mov	r28, r24
    t_stmnError t_err;

   /*------------------------------------------------------------------------*
    * Global data is being accessed, apply lock...
    *------------------------------------------------------------------------*/
   arb_wait( gt_navStruct.t_mutex, 0);
   15da6:	20 91 87 2b 	lds	r18, 0x2B87
   15daa:	30 91 88 2b 	lds	r19, 0x2B88
   15dae:	c9 01       	movw	r24, r18
   15db0:	60 e0       	ldi	r22, 0x00	; 0
   15db2:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>

   t_err = utl_stMnChangeState( gt_navStruct.t_stateMn,
   15db6:	20 91 7c 2b 	lds	r18, 0x2B7C
   15dba:	30 91 7d 2b 	lds	r19, 0x2B7D
   15dbe:	c9 01       	movw	r24, r18
   15dc0:	6c 2f       	mov	r22, r28
   15dc2:	20 e0       	ldi	r18, 0x00	; 0
   15dc4:	30 e0       	ldi	r19, 0x00	; 0
   15dc6:	a9 01       	movw	r20, r18
   15dc8:	0e 94 aa ec 	call	0x1d954	; 0x1d954 <utl_stMnChangeState>
   15dcc:	c8 2f       	mov	r28, r24
   }

   /*------------------------------------------------------------------------*
    * unlock...
    *------------------------------------------------------------------------*/
   arb_signal( gt_navStruct.t_mutex);
   15dce:	20 91 87 2b 	lds	r18, 0x2B87
   15dd2:	30 91 88 2b 	lds	r19, 0x2B88
   15dd6:	c9 01       	movw	r24, r18
   15dd8:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>
}/*End usr_navigation*/

/*---------------------------------------------------------------------------*
 * Public Function Definitions
 *---------------------------------------------------------------------------*/
bool usr_navSetState( t_navState t_nxtState)
   15ddc:	81 e0       	ldi	r24, 0x01	; 1
   15dde:	c1 11       	cpse	r28, r1
   15de0:	80 e0       	ldi	r24, 0x00	; 0
    *------------------------------------------------------------------------*/
   arb_signal( gt_navStruct.t_mutex);

   return b_success;

}/*End usr_navSetState*/
   15de2:	cf 91       	pop	r28
   15de4:	08 95       	ret

00015de6 <usr_navGetState>:

t_navState usr_navGetState( void)
{
   return gt_navStruct.t_curState;
}/*End usr_navGetState*/
   15de6:	80 91 7f 2b 	lds	r24, 0x2B7F
   15dea:	08 95       	ret

00015dec <usr_navGetCalSample>:

void usr_navGetCalSample( int16_t *ps_calSample)
{
   15dec:	fc 01       	movw	r30, r24
   ps_calSample[0] = gt_navStruct.as_cal[0];
   15dee:	80 91 8b 2b 	lds	r24, 0x2B8B
   15df2:	90 91 8c 2b 	lds	r25, 0x2B8C
   15df6:	80 83       	st	Z, r24
   15df8:	91 83       	std	Z+1, r25	; 0x01
   ps_calSample[1] = gt_navStruct.as_cal[1];
   15dfa:	80 91 8d 2b 	lds	r24, 0x2B8D
   15dfe:	90 91 8e 2b 	lds	r25, 0x2B8E
   15e02:	82 83       	std	Z+2, r24	; 0x02
   15e04:	93 83       	std	Z+3, r25	; 0x03
   ps_calSample[2] = gt_navStruct.as_cal[2];
   15e06:	80 91 8f 2b 	lds	r24, 0x2B8F
   15e0a:	90 91 90 2b 	lds	r25, 0x2B90
   15e0e:	84 83       	std	Z+4, r24	; 0x04
   15e10:	95 83       	std	Z+5, r25	; 0x05
}/*End usr_navGetCalSample*/
   15e12:	08 95       	ret

00015e14 <usr_navWaitCalSample>:

void usr_navWaitCalSample( void)
{
   arb_wait(gt_navStruct.t_signal, 0);
   15e14:	80 91 89 2b 	lds	r24, 0x2B89
   15e18:	90 91 8a 2b 	lds	r25, 0x2B8A
   15e1c:	60 e0       	ldi	r22, 0x00	; 0
   15e1e:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>
}/*End usr_navWaitCalSample*/
   15e22:	08 95       	ret

00015e24 <usr_navGetCalStatus>:

t_insCalStatus usr_navGetCalStatus( void)
{
   return gt_navStruct.t_calStatus;
}/*End usr_navGetCalStatus*/
   15e24:	80 91 80 2b 	lds	r24, 0x2B80
   15e28:	08 95       	ret

00015e2a <usr_navGetMagCal>:

void usr_navGetMagCal( float *pf_R,
                       float *pf_scale,
					        float *pf_bias)
{
   15e2a:	6f 92       	push	r6
   15e2c:	7f 92       	push	r7
   15e2e:	8f 92       	push	r8
   15e30:	9f 92       	push	r9
   15e32:	af 92       	push	r10
   15e34:	bf 92       	push	r11
   15e36:	cf 92       	push	r12
   15e38:	df 92       	push	r13
   15e3a:	ef 92       	push	r14
   15e3c:	ff 92       	push	r15
   15e3e:	0f 93       	push	r16
   15e40:	1f 93       	push	r17
   15e42:	cf 93       	push	r28
   15e44:	df 93       	push	r29
   15e46:	cd b7       	in	r28, 0x3d	; 61
   15e48:	de b7       	in	r29, 0x3e	; 62
   15e4a:	2a 97       	sbiw	r28, 0x0a	; 10
   15e4c:	cd bf       	out	0x3d, r28	; 61
   15e4e:	de bf       	out	0x3e, r29	; 62
   15e50:	5c 01       	movw	r10, r24
   15e52:	3b 01       	movw	r6, r22
   15e54:	4a 01       	movw	r8, r20
	int32_t i_result;
	t_ellipsoidCal t_magCal;

   i_result = arb_ioctl( gt_navStruct.t_insHndl,
   15e56:	80 91 81 2b 	lds	r24, 0x2B81
   15e5a:	90 91 82 2b 	lds	r25, 0x2B82
   15e5e:	9e 01       	movw	r18, r28
   15e60:	2f 5f       	subi	r18, 0xFF	; 255
   15e62:	3f 4f       	sbci	r19, 0xFF	; 255
   15e64:	44 27       	eor	r20, r20
   15e66:	37 fd       	sbrc	r19, 7
   15e68:	40 95       	com	r20
   15e6a:	54 2f       	mov	r21, r20
   15e6c:	63 e0       	ldi	r22, 0x03	; 3
   15e6e:	70 e0       	ldi	r23, 0x00	; 0
   15e70:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
                         INS_GET_MAG_CALIBRATION,
                         (int32_t)(int16_t)&t_magCal);

   if( t_magCal.t_status == INS_CAL_COMPLETE)
   15e74:	89 81       	ldd	r24, Y+1	; 0x01
   15e76:	82 30       	cpi	r24, 0x02	; 2
   15e78:	09 f0       	breq	.+2      	; 0x15e7c <usr_navGetMagCal+0x52>
   15e7a:	5f c1       	rjmp	.+702    	; 0x1613a <usr_navGetMagCal+0x310>
   {
   	pf_bias[0] = (float)t_magCal.ps_bias[0] / t_magCal.s_env;
   15e7c:	0c 81       	ldd	r16, Y+4	; 0x04
   15e7e:	1d 81       	ldd	r17, Y+5	; 0x05
   15e80:	69 85       	ldd	r22, Y+9	; 0x09
   15e82:	7a 85       	ldd	r23, Y+10	; 0x0a
   15e84:	88 27       	eor	r24, r24
   15e86:	77 fd       	sbrc	r23, 7
   15e88:	80 95       	com	r24
   15e8a:	98 2f       	mov	r25, r24
   15e8c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15e90:	6b 01       	movw	r12, r22
   15e92:	7c 01       	movw	r14, r24
   15e94:	f8 01       	movw	r30, r16
   15e96:	60 81       	ld	r22, Z
   15e98:	71 81       	ldd	r23, Z+1	; 0x01
   15e9a:	88 27       	eor	r24, r24
   15e9c:	77 fd       	sbrc	r23, 7
   15e9e:	80 95       	com	r24
   15ea0:	98 2f       	mov	r25, r24
   15ea2:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15ea6:	a7 01       	movw	r20, r14
   15ea8:	96 01       	movw	r18, r12
   15eaa:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15eae:	dc 01       	movw	r26, r24
   15eb0:	cb 01       	movw	r24, r22
   15eb2:	f4 01       	movw	r30, r8
   15eb4:	80 83       	st	Z, r24
   15eb6:	91 83       	std	Z+1, r25	; 0x01
   15eb8:	a2 83       	std	Z+2, r26	; 0x02
   15eba:	b3 83       	std	Z+3, r27	; 0x03
   	pf_bias[1] = (float)t_magCal.ps_bias[1] / t_magCal.s_env;
   15ebc:	f8 01       	movw	r30, r16
   15ebe:	62 81       	ldd	r22, Z+2	; 0x02
   15ec0:	73 81       	ldd	r23, Z+3	; 0x03
   15ec2:	88 27       	eor	r24, r24
   15ec4:	77 fd       	sbrc	r23, 7
   15ec6:	80 95       	com	r24
   15ec8:	98 2f       	mov	r25, r24
   15eca:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15ece:	a7 01       	movw	r20, r14
   15ed0:	96 01       	movw	r18, r12
   15ed2:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15ed6:	dc 01       	movw	r26, r24
   15ed8:	cb 01       	movw	r24, r22
   15eda:	f4 01       	movw	r30, r8
   15edc:	84 83       	std	Z+4, r24	; 0x04
   15ede:	95 83       	std	Z+5, r25	; 0x05
   15ee0:	a6 83       	std	Z+6, r26	; 0x06
   15ee2:	b7 83       	std	Z+7, r27	; 0x07
   	pf_bias[2] = (float)t_magCal.ps_bias[2] / t_magCal.s_env;
   15ee4:	f8 01       	movw	r30, r16
   15ee6:	64 81       	ldd	r22, Z+4	; 0x04
   15ee8:	75 81       	ldd	r23, Z+5	; 0x05
   15eea:	88 27       	eor	r24, r24
   15eec:	77 fd       	sbrc	r23, 7
   15eee:	80 95       	com	r24
   15ef0:	98 2f       	mov	r25, r24
   15ef2:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15ef6:	a7 01       	movw	r20, r14
   15ef8:	96 01       	movw	r18, r12
   15efa:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15efe:	dc 01       	movw	r26, r24
   15f00:	cb 01       	movw	r24, r22
   15f02:	f4 01       	movw	r30, r8
   15f04:	80 87       	std	Z+8, r24	; 0x08
   15f06:	91 87       	std	Z+9, r25	; 0x09
   15f08:	a2 87       	std	Z+10, r26	; 0x0a
   15f0a:	b3 87       	std	Z+11, r27	; 0x0b

   	pf_scale[0] = (float)t_magCal.ps_scale[0] / ((int16_t)1<<t_magCal.c_n);
   15f0c:	0e 81       	ldd	r16, Y+6	; 0x06
   15f0e:	1f 81       	ldd	r17, Y+7	; 0x07
   15f10:	61 e0       	ldi	r22, 0x01	; 1
   15f12:	70 e0       	ldi	r23, 0x00	; 0
   15f14:	08 84       	ldd	r0, Y+8	; 0x08
   15f16:	02 c0       	rjmp	.+4      	; 0x15f1c <usr_navGetMagCal+0xf2>
   15f18:	66 0f       	add	r22, r22
   15f1a:	77 1f       	adc	r23, r23
   15f1c:	0a 94       	dec	r0
   15f1e:	e2 f7       	brpl	.-8      	; 0x15f18 <usr_navGetMagCal+0xee>
   15f20:	88 27       	eor	r24, r24
   15f22:	77 fd       	sbrc	r23, 7
   15f24:	80 95       	com	r24
   15f26:	98 2f       	mov	r25, r24
   15f28:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15f2c:	6b 01       	movw	r12, r22
   15f2e:	7c 01       	movw	r14, r24
   15f30:	f8 01       	movw	r30, r16
   15f32:	60 81       	ld	r22, Z
   15f34:	71 81       	ldd	r23, Z+1	; 0x01
   15f36:	88 27       	eor	r24, r24
   15f38:	77 fd       	sbrc	r23, 7
   15f3a:	80 95       	com	r24
   15f3c:	98 2f       	mov	r25, r24
   15f3e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15f42:	a7 01       	movw	r20, r14
   15f44:	96 01       	movw	r18, r12
   15f46:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15f4a:	dc 01       	movw	r26, r24
   15f4c:	cb 01       	movw	r24, r22
   15f4e:	f3 01       	movw	r30, r6
   15f50:	80 83       	st	Z, r24
   15f52:	91 83       	std	Z+1, r25	; 0x01
   15f54:	a2 83       	std	Z+2, r26	; 0x02
   15f56:	b3 83       	std	Z+3, r27	; 0x03
   	pf_scale[1] = (float)t_magCal.ps_scale[1] / ((int16_t)1<<t_magCal.c_n);
   15f58:	f8 01       	movw	r30, r16
   15f5a:	62 81       	ldd	r22, Z+2	; 0x02
   15f5c:	73 81       	ldd	r23, Z+3	; 0x03
   15f5e:	88 27       	eor	r24, r24
   15f60:	77 fd       	sbrc	r23, 7
   15f62:	80 95       	com	r24
   15f64:	98 2f       	mov	r25, r24
   15f66:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15f6a:	a7 01       	movw	r20, r14
   15f6c:	96 01       	movw	r18, r12
   15f6e:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15f72:	dc 01       	movw	r26, r24
   15f74:	cb 01       	movw	r24, r22
   15f76:	f3 01       	movw	r30, r6
   15f78:	84 83       	std	Z+4, r24	; 0x04
   15f7a:	95 83       	std	Z+5, r25	; 0x05
   15f7c:	a6 83       	std	Z+6, r26	; 0x06
   15f7e:	b7 83       	std	Z+7, r27	; 0x07
   	pf_scale[2] = (float)t_magCal.ps_scale[2] / ((int16_t)1<<t_magCal.c_n);
   15f80:	f8 01       	movw	r30, r16
   15f82:	64 81       	ldd	r22, Z+4	; 0x04
   15f84:	75 81       	ldd	r23, Z+5	; 0x05
   15f86:	88 27       	eor	r24, r24
   15f88:	77 fd       	sbrc	r23, 7
   15f8a:	80 95       	com	r24
   15f8c:	98 2f       	mov	r25, r24
   15f8e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15f92:	a7 01       	movw	r20, r14
   15f94:	96 01       	movw	r18, r12
   15f96:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15f9a:	dc 01       	movw	r26, r24
   15f9c:	cb 01       	movw	r24, r22
   15f9e:	f3 01       	movw	r30, r6
   15fa0:	80 87       	std	Z+8, r24	; 0x08
   15fa2:	91 87       	std	Z+9, r25	; 0x09
   15fa4:	a2 87       	std	Z+10, r26	; 0x0a
   15fa6:	b3 87       	std	Z+11, r27	; 0x0b

   	pf_R[0] = (float)t_magCal.ps_R[0] / 32767.0;
   15fa8:	0a 81       	ldd	r16, Y+2	; 0x02
   15faa:	1b 81       	ldd	r17, Y+3	; 0x03
   15fac:	f8 01       	movw	r30, r16
   15fae:	60 81       	ld	r22, Z
   15fb0:	71 81       	ldd	r23, Z+1	; 0x01
   15fb2:	88 27       	eor	r24, r24
   15fb4:	77 fd       	sbrc	r23, 7
   15fb6:	80 95       	com	r24
   15fb8:	98 2f       	mov	r25, r24
   15fba:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15fbe:	20 e0       	ldi	r18, 0x00	; 0
   15fc0:	3e ef       	ldi	r19, 0xFE	; 254
   15fc2:	4f ef       	ldi	r20, 0xFF	; 255
   15fc4:	56 e4       	ldi	r21, 0x46	; 70
   15fc6:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15fca:	dc 01       	movw	r26, r24
   15fcc:	cb 01       	movw	r24, r22
   15fce:	f5 01       	movw	r30, r10
   15fd0:	80 83       	st	Z, r24
   15fd2:	91 83       	std	Z+1, r25	; 0x01
   15fd4:	a2 83       	std	Z+2, r26	; 0x02
   15fd6:	b3 83       	std	Z+3, r27	; 0x03
   	pf_R[1] = (float)t_magCal.ps_R[1] / 32767.0;
   15fd8:	f8 01       	movw	r30, r16
   15fda:	62 81       	ldd	r22, Z+2	; 0x02
   15fdc:	73 81       	ldd	r23, Z+3	; 0x03
   15fde:	88 27       	eor	r24, r24
   15fe0:	77 fd       	sbrc	r23, 7
   15fe2:	80 95       	com	r24
   15fe4:	98 2f       	mov	r25, r24
   15fe6:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   15fea:	20 e0       	ldi	r18, 0x00	; 0
   15fec:	3e ef       	ldi	r19, 0xFE	; 254
   15fee:	4f ef       	ldi	r20, 0xFF	; 255
   15ff0:	56 e4       	ldi	r21, 0x46	; 70
   15ff2:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   15ff6:	dc 01       	movw	r26, r24
   15ff8:	cb 01       	movw	r24, r22
   15ffa:	f5 01       	movw	r30, r10
   15ffc:	84 83       	std	Z+4, r24	; 0x04
   15ffe:	95 83       	std	Z+5, r25	; 0x05
   16000:	a6 83       	std	Z+6, r26	; 0x06
   16002:	b7 83       	std	Z+7, r27	; 0x07
   	pf_R[2] = (float)t_magCal.ps_R[2] / 32767.0;
   16004:	f8 01       	movw	r30, r16
   16006:	64 81       	ldd	r22, Z+4	; 0x04
   16008:	75 81       	ldd	r23, Z+5	; 0x05
   1600a:	88 27       	eor	r24, r24
   1600c:	77 fd       	sbrc	r23, 7
   1600e:	80 95       	com	r24
   16010:	98 2f       	mov	r25, r24
   16012:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16016:	20 e0       	ldi	r18, 0x00	; 0
   16018:	3e ef       	ldi	r19, 0xFE	; 254
   1601a:	4f ef       	ldi	r20, 0xFF	; 255
   1601c:	56 e4       	ldi	r21, 0x46	; 70
   1601e:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16022:	dc 01       	movw	r26, r24
   16024:	cb 01       	movw	r24, r22
   16026:	f5 01       	movw	r30, r10
   16028:	80 87       	std	Z+8, r24	; 0x08
   1602a:	91 87       	std	Z+9, r25	; 0x09
   1602c:	a2 87       	std	Z+10, r26	; 0x0a
   1602e:	b3 87       	std	Z+11, r27	; 0x0b
   	pf_R[3] = (float)t_magCal.ps_R[3] / 32767.0;
   16030:	f8 01       	movw	r30, r16
   16032:	66 81       	ldd	r22, Z+6	; 0x06
   16034:	77 81       	ldd	r23, Z+7	; 0x07
   16036:	88 27       	eor	r24, r24
   16038:	77 fd       	sbrc	r23, 7
   1603a:	80 95       	com	r24
   1603c:	98 2f       	mov	r25, r24
   1603e:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16042:	20 e0       	ldi	r18, 0x00	; 0
   16044:	3e ef       	ldi	r19, 0xFE	; 254
   16046:	4f ef       	ldi	r20, 0xFF	; 255
   16048:	56 e4       	ldi	r21, 0x46	; 70
   1604a:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1604e:	dc 01       	movw	r26, r24
   16050:	cb 01       	movw	r24, r22
   16052:	f5 01       	movw	r30, r10
   16054:	84 87       	std	Z+12, r24	; 0x0c
   16056:	95 87       	std	Z+13, r25	; 0x0d
   16058:	a6 87       	std	Z+14, r26	; 0x0e
   1605a:	b7 87       	std	Z+15, r27	; 0x0f
   	pf_R[4] = (float)t_magCal.ps_R[4] / 32767.0;
   1605c:	f8 01       	movw	r30, r16
   1605e:	60 85       	ldd	r22, Z+8	; 0x08
   16060:	71 85       	ldd	r23, Z+9	; 0x09
   16062:	88 27       	eor	r24, r24
   16064:	77 fd       	sbrc	r23, 7
   16066:	80 95       	com	r24
   16068:	98 2f       	mov	r25, r24
   1606a:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1606e:	20 e0       	ldi	r18, 0x00	; 0
   16070:	3e ef       	ldi	r19, 0xFE	; 254
   16072:	4f ef       	ldi	r20, 0xFF	; 255
   16074:	56 e4       	ldi	r21, 0x46	; 70
   16076:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1607a:	dc 01       	movw	r26, r24
   1607c:	cb 01       	movw	r24, r22
   1607e:	f5 01       	movw	r30, r10
   16080:	80 8b       	std	Z+16, r24	; 0x10
   16082:	91 8b       	std	Z+17, r25	; 0x11
   16084:	a2 8b       	std	Z+18, r26	; 0x12
   16086:	b3 8b       	std	Z+19, r27	; 0x13
   	pf_R[5] = (float)t_magCal.ps_R[5] / 32767.0;
   16088:	f8 01       	movw	r30, r16
   1608a:	62 85       	ldd	r22, Z+10	; 0x0a
   1608c:	73 85       	ldd	r23, Z+11	; 0x0b
   1608e:	88 27       	eor	r24, r24
   16090:	77 fd       	sbrc	r23, 7
   16092:	80 95       	com	r24
   16094:	98 2f       	mov	r25, r24
   16096:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1609a:	20 e0       	ldi	r18, 0x00	; 0
   1609c:	3e ef       	ldi	r19, 0xFE	; 254
   1609e:	4f ef       	ldi	r20, 0xFF	; 255
   160a0:	56 e4       	ldi	r21, 0x46	; 70
   160a2:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   160a6:	dc 01       	movw	r26, r24
   160a8:	cb 01       	movw	r24, r22
   160aa:	f5 01       	movw	r30, r10
   160ac:	84 8b       	std	Z+20, r24	; 0x14
   160ae:	95 8b       	std	Z+21, r25	; 0x15
   160b0:	a6 8b       	std	Z+22, r26	; 0x16
   160b2:	b7 8b       	std	Z+23, r27	; 0x17
   	pf_R[6] = (float)t_magCal.ps_R[6] / 32767.0;
   160b4:	f8 01       	movw	r30, r16
   160b6:	64 85       	ldd	r22, Z+12	; 0x0c
   160b8:	75 85       	ldd	r23, Z+13	; 0x0d
   160ba:	88 27       	eor	r24, r24
   160bc:	77 fd       	sbrc	r23, 7
   160be:	80 95       	com	r24
   160c0:	98 2f       	mov	r25, r24
   160c2:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   160c6:	20 e0       	ldi	r18, 0x00	; 0
   160c8:	3e ef       	ldi	r19, 0xFE	; 254
   160ca:	4f ef       	ldi	r20, 0xFF	; 255
   160cc:	56 e4       	ldi	r21, 0x46	; 70
   160ce:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   160d2:	dc 01       	movw	r26, r24
   160d4:	cb 01       	movw	r24, r22
   160d6:	f5 01       	movw	r30, r10
   160d8:	80 8f       	std	Z+24, r24	; 0x18
   160da:	91 8f       	std	Z+25, r25	; 0x19
   160dc:	a2 8f       	std	Z+26, r26	; 0x1a
   160de:	b3 8f       	std	Z+27, r27	; 0x1b
   	pf_R[7] = (float)t_magCal.ps_R[7] / 32767.0;
   160e0:	f8 01       	movw	r30, r16
   160e2:	66 85       	ldd	r22, Z+14	; 0x0e
   160e4:	77 85       	ldd	r23, Z+15	; 0x0f
   160e6:	88 27       	eor	r24, r24
   160e8:	77 fd       	sbrc	r23, 7
   160ea:	80 95       	com	r24
   160ec:	98 2f       	mov	r25, r24
   160ee:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   160f2:	20 e0       	ldi	r18, 0x00	; 0
   160f4:	3e ef       	ldi	r19, 0xFE	; 254
   160f6:	4f ef       	ldi	r20, 0xFF	; 255
   160f8:	56 e4       	ldi	r21, 0x46	; 70
   160fa:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   160fe:	dc 01       	movw	r26, r24
   16100:	cb 01       	movw	r24, r22
   16102:	f5 01       	movw	r30, r10
   16104:	84 8f       	std	Z+28, r24	; 0x1c
   16106:	95 8f       	std	Z+29, r25	; 0x1d
   16108:	a6 8f       	std	Z+30, r26	; 0x1e
   1610a:	b7 8f       	std	Z+31, r27	; 0x1f
   	pf_R[8] = (float)t_magCal.ps_R[8] / 32767.0;
   1610c:	f8 01       	movw	r30, r16
   1610e:	60 89       	ldd	r22, Z+16	; 0x10
   16110:	71 89       	ldd	r23, Z+17	; 0x11
   16112:	88 27       	eor	r24, r24
   16114:	77 fd       	sbrc	r23, 7
   16116:	80 95       	com	r24
   16118:	98 2f       	mov	r25, r24
   1611a:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1611e:	20 e0       	ldi	r18, 0x00	; 0
   16120:	3e ef       	ldi	r19, 0xFE	; 254
   16122:	4f ef       	ldi	r20, 0xFF	; 255
   16124:	56 e4       	ldi	r21, 0x46	; 70
   16126:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1612a:	dc 01       	movw	r26, r24
   1612c:	cb 01       	movw	r24, r22
   1612e:	f5 01       	movw	r30, r10
   16130:	80 a3       	lds	r24, 0x50
   16132:	91 a3       	lds	r25, 0x51
   16134:	a2 a3       	lds	r26, 0x52
   16136:	b3 a3       	lds	r27, 0x53
   16138:	0f c0       	rjmp	.+30     	; 0x16158 <usr_navGetMagCal+0x32e>
	}
   else
   {
      memset( (void *)pf_bias, 0, 3*sizeof( float));
   1613a:	8c e0       	ldi	r24, 0x0C	; 12
   1613c:	f4 01       	movw	r30, r8
   1613e:	98 2f       	mov	r25, r24
   16140:	11 92       	st	Z+, r1
   16142:	9a 95       	dec	r25
   16144:	e9 f7       	brne	.-6      	; 0x16140 <usr_navGetMagCal+0x316>
      memset( (void *)pf_scale, 0, 3*sizeof( float));
   16146:	f3 01       	movw	r30, r6
   16148:	11 92       	st	Z+, r1
   1614a:	8a 95       	dec	r24
   1614c:	e9 f7       	brne	.-6      	; 0x16148 <usr_navGetMagCal+0x31e>
      memset( (void *)pf_R, 0, 9*sizeof( float));
   1614e:	84 e2       	ldi	r24, 0x24	; 36
   16150:	f5 01       	movw	r30, r10
   16152:	11 92       	st	Z+, r1
   16154:	8a 95       	dec	r24
   16156:	e9 f7       	brne	.-6      	; 0x16152 <usr_navGetMagCal+0x328>
   }

}/*End usr_navGetMagCal*/
   16158:	2a 96       	adiw	r28, 0x0a	; 10
   1615a:	cd bf       	out	0x3d, r28	; 61
   1615c:	de bf       	out	0x3e, r29	; 62
   1615e:	df 91       	pop	r29
   16160:	cf 91       	pop	r28
   16162:	1f 91       	pop	r17
   16164:	0f 91       	pop	r16
   16166:	ff 90       	pop	r15
   16168:	ef 90       	pop	r14
   1616a:	df 90       	pop	r13
   1616c:	cf 90       	pop	r12
   1616e:	bf 90       	pop	r11
   16170:	af 90       	pop	r10
   16172:	9f 90       	pop	r9
   16174:	8f 90       	pop	r8
   16176:	7f 90       	pop	r7
   16178:	6f 90       	pop	r6
   1617a:	08 95       	ret

0001617c <usr_navGetAccelCal>:

void usr_navGetAccelCal( float *pf_R,
                         float *pf_scale,
					          float *pf_bias)
{
   1617c:	6f 92       	push	r6
   1617e:	7f 92       	push	r7
   16180:	8f 92       	push	r8
   16182:	9f 92       	push	r9
   16184:	af 92       	push	r10
   16186:	bf 92       	push	r11
   16188:	cf 92       	push	r12
   1618a:	df 92       	push	r13
   1618c:	ef 92       	push	r14
   1618e:	ff 92       	push	r15
   16190:	0f 93       	push	r16
   16192:	1f 93       	push	r17
   16194:	cf 93       	push	r28
   16196:	df 93       	push	r29
   16198:	cd b7       	in	r28, 0x3d	; 61
   1619a:	de b7       	in	r29, 0x3e	; 62
   1619c:	2a 97       	sbiw	r28, 0x0a	; 10
   1619e:	cd bf       	out	0x3d, r28	; 61
   161a0:	de bf       	out	0x3e, r29	; 62
   161a2:	5c 01       	movw	r10, r24
   161a4:	3b 01       	movw	r6, r22
   161a6:	4a 01       	movw	r8, r20
	int32_t i_result;
	t_ellipsoidCal t_accelCal;

   i_result = arb_ioctl( gt_navStruct.t_insHndl,
   161a8:	80 91 81 2b 	lds	r24, 0x2B81
   161ac:	90 91 82 2b 	lds	r25, 0x2B82
   161b0:	9e 01       	movw	r18, r28
   161b2:	2f 5f       	subi	r18, 0xFF	; 255
   161b4:	3f 4f       	sbci	r19, 0xFF	; 255
   161b6:	44 27       	eor	r20, r20
   161b8:	37 fd       	sbrc	r19, 7
   161ba:	40 95       	com	r20
   161bc:	54 2f       	mov	r21, r20
   161be:	64 e0       	ldi	r22, 0x04	; 4
   161c0:	70 e0       	ldi	r23, 0x00	; 0
   161c2:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
                         INS_GET_ACCEL_CALIBRATION,
                         (int32_t)(int16_t)&t_accelCal);

   if( t_accelCal.t_status == INS_CAL_COMPLETE)
   161c6:	89 81       	ldd	r24, Y+1	; 0x01
   161c8:	82 30       	cpi	r24, 0x02	; 2
   161ca:	09 f0       	breq	.+2      	; 0x161ce <usr_navGetAccelCal+0x52>
   161cc:	5f c1       	rjmp	.+702    	; 0x1648c <usr_navGetAccelCal+0x310>
   {

   	pf_bias[0] = (float)t_accelCal.ps_bias[0] / t_accelCal.s_env;
   161ce:	0c 81       	ldd	r16, Y+4	; 0x04
   161d0:	1d 81       	ldd	r17, Y+5	; 0x05
   161d2:	69 85       	ldd	r22, Y+9	; 0x09
   161d4:	7a 85       	ldd	r23, Y+10	; 0x0a
   161d6:	88 27       	eor	r24, r24
   161d8:	77 fd       	sbrc	r23, 7
   161da:	80 95       	com	r24
   161dc:	98 2f       	mov	r25, r24
   161de:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   161e2:	6b 01       	movw	r12, r22
   161e4:	7c 01       	movw	r14, r24
   161e6:	f8 01       	movw	r30, r16
   161e8:	60 81       	ld	r22, Z
   161ea:	71 81       	ldd	r23, Z+1	; 0x01
   161ec:	88 27       	eor	r24, r24
   161ee:	77 fd       	sbrc	r23, 7
   161f0:	80 95       	com	r24
   161f2:	98 2f       	mov	r25, r24
   161f4:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   161f8:	a7 01       	movw	r20, r14
   161fa:	96 01       	movw	r18, r12
   161fc:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16200:	dc 01       	movw	r26, r24
   16202:	cb 01       	movw	r24, r22
   16204:	f4 01       	movw	r30, r8
   16206:	80 83       	st	Z, r24
   16208:	91 83       	std	Z+1, r25	; 0x01
   1620a:	a2 83       	std	Z+2, r26	; 0x02
   1620c:	b3 83       	std	Z+3, r27	; 0x03
   	pf_bias[1] = (float)t_accelCal.ps_bias[1] / t_accelCal.s_env;
   1620e:	f8 01       	movw	r30, r16
   16210:	62 81       	ldd	r22, Z+2	; 0x02
   16212:	73 81       	ldd	r23, Z+3	; 0x03
   16214:	88 27       	eor	r24, r24
   16216:	77 fd       	sbrc	r23, 7
   16218:	80 95       	com	r24
   1621a:	98 2f       	mov	r25, r24
   1621c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16220:	a7 01       	movw	r20, r14
   16222:	96 01       	movw	r18, r12
   16224:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16228:	dc 01       	movw	r26, r24
   1622a:	cb 01       	movw	r24, r22
   1622c:	f4 01       	movw	r30, r8
   1622e:	84 83       	std	Z+4, r24	; 0x04
   16230:	95 83       	std	Z+5, r25	; 0x05
   16232:	a6 83       	std	Z+6, r26	; 0x06
   16234:	b7 83       	std	Z+7, r27	; 0x07
   	pf_bias[2] = (float)t_accelCal.ps_bias[2] / t_accelCal.s_env;
   16236:	f8 01       	movw	r30, r16
   16238:	64 81       	ldd	r22, Z+4	; 0x04
   1623a:	75 81       	ldd	r23, Z+5	; 0x05
   1623c:	88 27       	eor	r24, r24
   1623e:	77 fd       	sbrc	r23, 7
   16240:	80 95       	com	r24
   16242:	98 2f       	mov	r25, r24
   16244:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16248:	a7 01       	movw	r20, r14
   1624a:	96 01       	movw	r18, r12
   1624c:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16250:	dc 01       	movw	r26, r24
   16252:	cb 01       	movw	r24, r22
   16254:	f4 01       	movw	r30, r8
   16256:	80 87       	std	Z+8, r24	; 0x08
   16258:	91 87       	std	Z+9, r25	; 0x09
   1625a:	a2 87       	std	Z+10, r26	; 0x0a
   1625c:	b3 87       	std	Z+11, r27	; 0x0b

   	pf_scale[0] = (float)t_accelCal.ps_scale[0] / ((int16_t)1<<t_accelCal.c_n);
   1625e:	0e 81       	ldd	r16, Y+6	; 0x06
   16260:	1f 81       	ldd	r17, Y+7	; 0x07
   16262:	61 e0       	ldi	r22, 0x01	; 1
   16264:	70 e0       	ldi	r23, 0x00	; 0
   16266:	08 84       	ldd	r0, Y+8	; 0x08
   16268:	02 c0       	rjmp	.+4      	; 0x1626e <usr_navGetAccelCal+0xf2>
   1626a:	66 0f       	add	r22, r22
   1626c:	77 1f       	adc	r23, r23
   1626e:	0a 94       	dec	r0
   16270:	e2 f7       	brpl	.-8      	; 0x1626a <usr_navGetAccelCal+0xee>
   16272:	88 27       	eor	r24, r24
   16274:	77 fd       	sbrc	r23, 7
   16276:	80 95       	com	r24
   16278:	98 2f       	mov	r25, r24
   1627a:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1627e:	6b 01       	movw	r12, r22
   16280:	7c 01       	movw	r14, r24
   16282:	f8 01       	movw	r30, r16
   16284:	60 81       	ld	r22, Z
   16286:	71 81       	ldd	r23, Z+1	; 0x01
   16288:	88 27       	eor	r24, r24
   1628a:	77 fd       	sbrc	r23, 7
   1628c:	80 95       	com	r24
   1628e:	98 2f       	mov	r25, r24
   16290:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16294:	a7 01       	movw	r20, r14
   16296:	96 01       	movw	r18, r12
   16298:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1629c:	dc 01       	movw	r26, r24
   1629e:	cb 01       	movw	r24, r22
   162a0:	f3 01       	movw	r30, r6
   162a2:	80 83       	st	Z, r24
   162a4:	91 83       	std	Z+1, r25	; 0x01
   162a6:	a2 83       	std	Z+2, r26	; 0x02
   162a8:	b3 83       	std	Z+3, r27	; 0x03
   	pf_scale[1] = (float)t_accelCal.ps_scale[1] / ((int16_t)1<<t_accelCal.c_n);
   162aa:	f8 01       	movw	r30, r16
   162ac:	62 81       	ldd	r22, Z+2	; 0x02
   162ae:	73 81       	ldd	r23, Z+3	; 0x03
   162b0:	88 27       	eor	r24, r24
   162b2:	77 fd       	sbrc	r23, 7
   162b4:	80 95       	com	r24
   162b6:	98 2f       	mov	r25, r24
   162b8:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   162bc:	a7 01       	movw	r20, r14
   162be:	96 01       	movw	r18, r12
   162c0:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   162c4:	dc 01       	movw	r26, r24
   162c6:	cb 01       	movw	r24, r22
   162c8:	f3 01       	movw	r30, r6
   162ca:	84 83       	std	Z+4, r24	; 0x04
   162cc:	95 83       	std	Z+5, r25	; 0x05
   162ce:	a6 83       	std	Z+6, r26	; 0x06
   162d0:	b7 83       	std	Z+7, r27	; 0x07
   	pf_scale[2] = (float)t_accelCal.ps_scale[2] / ((int16_t)1<<t_accelCal.c_n);
   162d2:	f8 01       	movw	r30, r16
   162d4:	64 81       	ldd	r22, Z+4	; 0x04
   162d6:	75 81       	ldd	r23, Z+5	; 0x05
   162d8:	88 27       	eor	r24, r24
   162da:	77 fd       	sbrc	r23, 7
   162dc:	80 95       	com	r24
   162de:	98 2f       	mov	r25, r24
   162e0:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   162e4:	a7 01       	movw	r20, r14
   162e6:	96 01       	movw	r18, r12
   162e8:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   162ec:	dc 01       	movw	r26, r24
   162ee:	cb 01       	movw	r24, r22
   162f0:	f3 01       	movw	r30, r6
   162f2:	80 87       	std	Z+8, r24	; 0x08
   162f4:	91 87       	std	Z+9, r25	; 0x09
   162f6:	a2 87       	std	Z+10, r26	; 0x0a
   162f8:	b3 87       	std	Z+11, r27	; 0x0b

   	pf_R[0] = (float)t_accelCal.ps_R[0] / 32767.0;
   162fa:	0a 81       	ldd	r16, Y+2	; 0x02
   162fc:	1b 81       	ldd	r17, Y+3	; 0x03
   162fe:	f8 01       	movw	r30, r16
   16300:	60 81       	ld	r22, Z
   16302:	71 81       	ldd	r23, Z+1	; 0x01
   16304:	88 27       	eor	r24, r24
   16306:	77 fd       	sbrc	r23, 7
   16308:	80 95       	com	r24
   1630a:	98 2f       	mov	r25, r24
   1630c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16310:	20 e0       	ldi	r18, 0x00	; 0
   16312:	3e ef       	ldi	r19, 0xFE	; 254
   16314:	4f ef       	ldi	r20, 0xFF	; 255
   16316:	56 e4       	ldi	r21, 0x46	; 70
   16318:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1631c:	dc 01       	movw	r26, r24
   1631e:	cb 01       	movw	r24, r22
   16320:	f5 01       	movw	r30, r10
   16322:	80 83       	st	Z, r24
   16324:	91 83       	std	Z+1, r25	; 0x01
   16326:	a2 83       	std	Z+2, r26	; 0x02
   16328:	b3 83       	std	Z+3, r27	; 0x03
   	pf_R[1] = (float)t_accelCal.ps_R[1] / 32767.0;
   1632a:	f8 01       	movw	r30, r16
   1632c:	62 81       	ldd	r22, Z+2	; 0x02
   1632e:	73 81       	ldd	r23, Z+3	; 0x03
   16330:	88 27       	eor	r24, r24
   16332:	77 fd       	sbrc	r23, 7
   16334:	80 95       	com	r24
   16336:	98 2f       	mov	r25, r24
   16338:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   1633c:	20 e0       	ldi	r18, 0x00	; 0
   1633e:	3e ef       	ldi	r19, 0xFE	; 254
   16340:	4f ef       	ldi	r20, 0xFF	; 255
   16342:	56 e4       	ldi	r21, 0x46	; 70
   16344:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16348:	dc 01       	movw	r26, r24
   1634a:	cb 01       	movw	r24, r22
   1634c:	f5 01       	movw	r30, r10
   1634e:	84 83       	std	Z+4, r24	; 0x04
   16350:	95 83       	std	Z+5, r25	; 0x05
   16352:	a6 83       	std	Z+6, r26	; 0x06
   16354:	b7 83       	std	Z+7, r27	; 0x07
   	pf_R[2] = (float)t_accelCal.ps_R[2] / 32767.0;
   16356:	f8 01       	movw	r30, r16
   16358:	64 81       	ldd	r22, Z+4	; 0x04
   1635a:	75 81       	ldd	r23, Z+5	; 0x05
   1635c:	88 27       	eor	r24, r24
   1635e:	77 fd       	sbrc	r23, 7
   16360:	80 95       	com	r24
   16362:	98 2f       	mov	r25, r24
   16364:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16368:	20 e0       	ldi	r18, 0x00	; 0
   1636a:	3e ef       	ldi	r19, 0xFE	; 254
   1636c:	4f ef       	ldi	r20, 0xFF	; 255
   1636e:	56 e4       	ldi	r21, 0x46	; 70
   16370:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16374:	dc 01       	movw	r26, r24
   16376:	cb 01       	movw	r24, r22
   16378:	f5 01       	movw	r30, r10
   1637a:	80 87       	std	Z+8, r24	; 0x08
   1637c:	91 87       	std	Z+9, r25	; 0x09
   1637e:	a2 87       	std	Z+10, r26	; 0x0a
   16380:	b3 87       	std	Z+11, r27	; 0x0b
   	pf_R[3] = (float)t_accelCal.ps_R[3] / 32767.0;
   16382:	f8 01       	movw	r30, r16
   16384:	66 81       	ldd	r22, Z+6	; 0x06
   16386:	77 81       	ldd	r23, Z+7	; 0x07
   16388:	88 27       	eor	r24, r24
   1638a:	77 fd       	sbrc	r23, 7
   1638c:	80 95       	com	r24
   1638e:	98 2f       	mov	r25, r24
   16390:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16394:	20 e0       	ldi	r18, 0x00	; 0
   16396:	3e ef       	ldi	r19, 0xFE	; 254
   16398:	4f ef       	ldi	r20, 0xFF	; 255
   1639a:	56 e4       	ldi	r21, 0x46	; 70
   1639c:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   163a0:	dc 01       	movw	r26, r24
   163a2:	cb 01       	movw	r24, r22
   163a4:	f5 01       	movw	r30, r10
   163a6:	84 87       	std	Z+12, r24	; 0x0c
   163a8:	95 87       	std	Z+13, r25	; 0x0d
   163aa:	a6 87       	std	Z+14, r26	; 0x0e
   163ac:	b7 87       	std	Z+15, r27	; 0x0f
   	pf_R[4] = (float)t_accelCal.ps_R[4] / 32767.0;
   163ae:	f8 01       	movw	r30, r16
   163b0:	60 85       	ldd	r22, Z+8	; 0x08
   163b2:	71 85       	ldd	r23, Z+9	; 0x09
   163b4:	88 27       	eor	r24, r24
   163b6:	77 fd       	sbrc	r23, 7
   163b8:	80 95       	com	r24
   163ba:	98 2f       	mov	r25, r24
   163bc:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   163c0:	20 e0       	ldi	r18, 0x00	; 0
   163c2:	3e ef       	ldi	r19, 0xFE	; 254
   163c4:	4f ef       	ldi	r20, 0xFF	; 255
   163c6:	56 e4       	ldi	r21, 0x46	; 70
   163c8:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   163cc:	dc 01       	movw	r26, r24
   163ce:	cb 01       	movw	r24, r22
   163d0:	f5 01       	movw	r30, r10
   163d2:	80 8b       	std	Z+16, r24	; 0x10
   163d4:	91 8b       	std	Z+17, r25	; 0x11
   163d6:	a2 8b       	std	Z+18, r26	; 0x12
   163d8:	b3 8b       	std	Z+19, r27	; 0x13
   	pf_R[5] = (float)t_accelCal.ps_R[5] / 32767.0;
   163da:	f8 01       	movw	r30, r16
   163dc:	62 85       	ldd	r22, Z+10	; 0x0a
   163de:	73 85       	ldd	r23, Z+11	; 0x0b
   163e0:	88 27       	eor	r24, r24
   163e2:	77 fd       	sbrc	r23, 7
   163e4:	80 95       	com	r24
   163e6:	98 2f       	mov	r25, r24
   163e8:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   163ec:	20 e0       	ldi	r18, 0x00	; 0
   163ee:	3e ef       	ldi	r19, 0xFE	; 254
   163f0:	4f ef       	ldi	r20, 0xFF	; 255
   163f2:	56 e4       	ldi	r21, 0x46	; 70
   163f4:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   163f8:	dc 01       	movw	r26, r24
   163fa:	cb 01       	movw	r24, r22
   163fc:	f5 01       	movw	r30, r10
   163fe:	84 8b       	std	Z+20, r24	; 0x14
   16400:	95 8b       	std	Z+21, r25	; 0x15
   16402:	a6 8b       	std	Z+22, r26	; 0x16
   16404:	b7 8b       	std	Z+23, r27	; 0x17
   	pf_R[6] = (float)t_accelCal.ps_R[6] / 32767.0;
   16406:	f8 01       	movw	r30, r16
   16408:	64 85       	ldd	r22, Z+12	; 0x0c
   1640a:	75 85       	ldd	r23, Z+13	; 0x0d
   1640c:	88 27       	eor	r24, r24
   1640e:	77 fd       	sbrc	r23, 7
   16410:	80 95       	com	r24
   16412:	98 2f       	mov	r25, r24
   16414:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16418:	20 e0       	ldi	r18, 0x00	; 0
   1641a:	3e ef       	ldi	r19, 0xFE	; 254
   1641c:	4f ef       	ldi	r20, 0xFF	; 255
   1641e:	56 e4       	ldi	r21, 0x46	; 70
   16420:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16424:	dc 01       	movw	r26, r24
   16426:	cb 01       	movw	r24, r22
   16428:	f5 01       	movw	r30, r10
   1642a:	80 8f       	std	Z+24, r24	; 0x18
   1642c:	91 8f       	std	Z+25, r25	; 0x19
   1642e:	a2 8f       	std	Z+26, r26	; 0x1a
   16430:	b3 8f       	std	Z+27, r27	; 0x1b
   	pf_R[7] = (float)t_accelCal.ps_R[7] / 32767.0;
   16432:	f8 01       	movw	r30, r16
   16434:	66 85       	ldd	r22, Z+14	; 0x0e
   16436:	77 85       	ldd	r23, Z+15	; 0x0f
   16438:	88 27       	eor	r24, r24
   1643a:	77 fd       	sbrc	r23, 7
   1643c:	80 95       	com	r24
   1643e:	98 2f       	mov	r25, r24
   16440:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16444:	20 e0       	ldi	r18, 0x00	; 0
   16446:	3e ef       	ldi	r19, 0xFE	; 254
   16448:	4f ef       	ldi	r20, 0xFF	; 255
   1644a:	56 e4       	ldi	r21, 0x46	; 70
   1644c:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   16450:	dc 01       	movw	r26, r24
   16452:	cb 01       	movw	r24, r22
   16454:	f5 01       	movw	r30, r10
   16456:	84 8f       	std	Z+28, r24	; 0x1c
   16458:	95 8f       	std	Z+29, r25	; 0x1d
   1645a:	a6 8f       	std	Z+30, r26	; 0x1e
   1645c:	b7 8f       	std	Z+31, r27	; 0x1f
   	pf_R[8] = (float)t_accelCal.ps_R[8] / 32767.0;
   1645e:	f8 01       	movw	r30, r16
   16460:	60 89       	ldd	r22, Z+16	; 0x10
   16462:	71 89       	ldd	r23, Z+17	; 0x11
   16464:	88 27       	eor	r24, r24
   16466:	77 fd       	sbrc	r23, 7
   16468:	80 95       	com	r24
   1646a:	98 2f       	mov	r25, r24
   1646c:	0e 94 00 f3 	call	0x1e600	; 0x1e600 <__floatsisf>
   16470:	20 e0       	ldi	r18, 0x00	; 0
   16472:	3e ef       	ldi	r19, 0xFE	; 254
   16474:	4f ef       	ldi	r20, 0xFF	; 255
   16476:	56 e4       	ldi	r21, 0x46	; 70
   16478:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1647c:	dc 01       	movw	r26, r24
   1647e:	cb 01       	movw	r24, r22
   16480:	f5 01       	movw	r30, r10
   16482:	80 a3       	lds	r24, 0x50
   16484:	91 a3       	lds	r25, 0x51
   16486:	a2 a3       	lds	r26, 0x52
   16488:	b3 a3       	lds	r27, 0x53
   1648a:	0f c0       	rjmp	.+30     	; 0x164aa <usr_navGetAccelCal+0x32e>
	}
   else
   {
      memset( (void *)pf_bias, 0, 3*sizeof( float));
   1648c:	8c e0       	ldi	r24, 0x0C	; 12
   1648e:	f4 01       	movw	r30, r8
   16490:	98 2f       	mov	r25, r24
   16492:	11 92       	st	Z+, r1
   16494:	9a 95       	dec	r25
   16496:	e9 f7       	brne	.-6      	; 0x16492 <usr_navGetAccelCal+0x316>
      memset( (void *)pf_scale, 0, 3*sizeof( float));
   16498:	f3 01       	movw	r30, r6
   1649a:	11 92       	st	Z+, r1
   1649c:	8a 95       	dec	r24
   1649e:	e9 f7       	brne	.-6      	; 0x1649a <usr_navGetAccelCal+0x31e>
      memset( (void *)pf_R, 0, 9*sizeof( float));
   164a0:	84 e2       	ldi	r24, 0x24	; 36
   164a2:	f5 01       	movw	r30, r10
   164a4:	11 92       	st	Z+, r1
   164a6:	8a 95       	dec	r24
   164a8:	e9 f7       	brne	.-6      	; 0x164a4 <usr_navGetAccelCal+0x328>
   }

}/*End usr_navGetAccelCal*/
   164aa:	2a 96       	adiw	r28, 0x0a	; 10
   164ac:	cd bf       	out	0x3d, r28	; 61
   164ae:	de bf       	out	0x3e, r29	; 62
   164b0:	df 91       	pop	r29
   164b2:	cf 91       	pop	r28
   164b4:	1f 91       	pop	r17
   164b6:	0f 91       	pop	r16
   164b8:	ff 90       	pop	r15
   164ba:	ef 90       	pop	r14
   164bc:	df 90       	pop	r13
   164be:	cf 90       	pop	r12
   164c0:	bf 90       	pop	r11
   164c2:	af 90       	pop	r10
   164c4:	9f 90       	pop	r9
   164c6:	8f 90       	pop	r8
   164c8:	7f 90       	pop	r7
   164ca:	6f 90       	pop	r6
   164cc:	08 95       	ret

000164ce <usr_navGetStateEst>:

void usr_navGetStateEst( t_currentMeas *pt_currentMeas)
{
   164ce:	cf 93       	push	r28
   164d0:	df 93       	push	r29
   164d2:	ec 01       	movw	r28, r24
   int32_t i_result;

   /*------------------------------------------------------------------------*
    * Global data is being accessed, apply lock...
    *------------------------------------------------------------------------*/
   arb_wait( gt_navStruct.t_mutex, 0);
   164d4:	80 91 87 2b 	lds	r24, 0x2B87
   164d8:	90 91 88 2b 	lds	r25, 0x2B88
   164dc:	60 e0       	ldi	r22, 0x00	; 0
   164de:	0e 94 74 cb 	call	0x196e8	; 0x196e8 <arb_wait>

   i_result = arb_ioctl( gt_navStruct.t_insHndl,
   164e2:	80 91 81 2b 	lds	r24, 0x2B81
   164e6:	90 91 82 2b 	lds	r25, 0x2B82
   164ea:	9e 01       	movw	r18, r28
   164ec:	44 27       	eor	r20, r20
   164ee:	37 fd       	sbrc	r19, 7
   164f0:	40 95       	com	r20
   164f2:	54 2f       	mov	r21, r20
   164f4:	66 e0       	ldi	r22, 0x06	; 6
   164f6:	70 e0       	ldi	r23, 0x00	; 0
   164f8:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
                         INS_GET_STATE_EST,
                         (int32_t)(int16_t)pt_currentMeas);

   arb_signal( gt_navStruct.t_mutex);
   164fc:	80 91 87 2b 	lds	r24, 0x2B87
   16500:	90 91 88 2b 	lds	r25, 0x2B88
   16504:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <arb_signal>

}/*End usr_navGetStateEst*/
   16508:	df 91       	pop	r29
   1650a:	cf 91       	pop	r28
   1650c:	08 95       	ret

0001650e <usr_navigationInit>:
                        &ac_transMap[0][0]);

}/*End usr_navStateMachineInit*/

void usr_navigationInit( void)
{
   1650e:	0f 93       	push	r16
   16510:	cf 93       	push	r28
   16512:	df 93       	push	r29
   16514:	cd b7       	in	r28, 0x3d	; 61
   16516:	de b7       	in	r29, 0x3e	; 62
   16518:	c0 54       	subi	r28, 0x40	; 64
   1651a:	d0 40       	sbci	r29, 0x00	; 0
   1651c:	cd bf       	out	0x3d, r28	; 61
   1651e:	de bf       	out	0x3e, r29	; 62

   /*------------------------------------------------------------------------*
    * Initialize the top-level navigation object.
    *------------------------------------------------------------------------*/
   memset( (void *)&gt_navStruct, 0, sizeof( t_navStruct));
   16520:	85 e1       	ldi	r24, 0x15	; 21
   16522:	ec e7       	ldi	r30, 0x7C	; 124
   16524:	fb e2       	ldi	r31, 0x2B	; 43
   16526:	df 01       	movw	r26, r30
   16528:	1d 92       	st	X+, r1
   1652a:	8a 95       	dec	r24
   1652c:	e9 f7       	brne	.-6      	; 0x16528 <usr_navigationInit+0x1a>

   /*------------------------------------------------------------------------*
    * Create a new thread.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_navThread = arb_threadCreate( usr_navigation,
   1652e:	8e ed       	ldi	r24, 0xDE	; 222
   16530:	9d ea       	ldi	r25, 0xAD	; 173
   16532:	61 e0       	ldi	r22, 0x01	; 1
   16534:	70 e0       	ldi	r23, 0x00	; 0
   16536:	40 e0       	ldi	r20, 0x00	; 0
   16538:	50 e0       	ldi	r21, 0x00	; 0
   1653a:	20 e0       	ldi	r18, 0x00	; 0
   1653c:	36 e0       	ldi	r19, 0x06	; 6
   1653e:	00 e0       	ldi	r16, 0x00	; 0
   16540:	0e 94 d6 d4 	call	0x1a9ac	; 0x1a9ac <arb_threadCreate>
   16544:	80 93 85 2b 	sts	0x2B85, r24
   16548:	90 93 86 2b 	sts	0x2B86, r25
                                                1,
                                                0,
                                                ARB_STACK_1536B,
                                                0);

   if( gt_navStruct.t_navThread < 0)
   1654c:	80 91 85 2b 	lds	r24, 0x2B85
   16550:	90 91 86 2b 	lds	r25, 0x2B86
   16554:	97 fd       	sbrc	r25, 7
   16556:	d3 c0       	rjmp	.+422    	; 0x166fe <usr_navigationInit+0x1f0>
   }/*End if( gt_navStruct.t_navThread < 0)*/

   /*------------------------------------------------------------------------*
    * Open a handle to the INS driver.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_insHndl = arb_open( "insDevice0",
   16558:	84 ea       	ldi	r24, 0xA4	; 164
   1655a:	90 e2       	ldi	r25, 0x20	; 32
   1655c:	63 e0       	ldi	r22, 0x03	; 3
   1655e:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   16562:	80 93 81 2b 	sts	0x2B81, r24
   16566:	90 93 82 2b 	sts	0x2B82, r25
                                      ARB_O_READ |
                                      ARB_O_WRITE);

   if( gt_navStruct.t_insHndl < 0)
   1656a:	80 91 81 2b 	lds	r24, 0x2B81
   1656e:	90 91 82 2b 	lds	r25, 0x2B82
   16572:	97 fd       	sbrc	r25, 7
   16574:	c4 c0       	rjmp	.+392    	; 0x166fe <usr_navigationInit+0x1f0>
      exit(0);

   gt_navStruct.t_signalHndl = arb_open( "signalDevice0",
   16576:	8f ea       	ldi	r24, 0xAF	; 175
   16578:	90 e2       	ldi	r25, 0x20	; 32
   1657a:	63 e0       	ldi	r22, 0x03	; 3
   1657c:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   16580:	80 93 83 2b 	sts	0x2B83, r24
   16584:	90 93 84 2b 	sts	0x2B84, r25
                                         ARB_O_READ |
                                         ARB_O_WRITE);

   if( gt_navStruct.t_signalHndl < 0)
   16588:	80 91 83 2b 	lds	r24, 0x2B83
   1658c:	90 91 84 2b 	lds	r25, 0x2B84
   16590:	97 fd       	sbrc	r25, 7
   16592:	b5 c0       	rjmp	.+362    	; 0x166fe <usr_navigationInit+0x1f0>
   uint8_t ac_transMap[NAV_NUM_STATES][NAV_NUM_STATES];

   /*------------------------------------------------------------------------*
    * Request access to a new state-machine object.
    *------------------------------------------------------------------------*/
   gt_navStruct.t_stateMn = utl_requestStMnObject( NAV_NUM_STATES,
   16594:	88 e0       	ldi	r24, 0x08	; 8
   16596:	65 e0       	ldi	r22, 0x05	; 5
   16598:	0e 94 a4 ed 	call	0x1db48	; 0x1db48 <utl_requestStMnObject>
   1659c:	80 93 7c 2b 	sts	0x2B7C, r24
   165a0:	90 93 7d 2b 	sts	0x2B7D, r25
                                                   NAV_DCM_INIT);
   if( gt_navStruct.t_stateMn < 0)
   165a4:	80 91 7c 2b 	lds	r24, 0x2B7C
   165a8:	90 91 7d 2b 	lds	r25, 0x2B7D
   165ac:	97 fd       	sbrc	r25, 7
   165ae:	a7 c0       	rjmp	.+334    	; 0x166fe <usr_navigationInit+0x1f0>
      exit(0);

   /*------------------------------------------------------------------------*
    * Store the call-back function for each possible state transition.
    *------------------------------------------------------------------------*/
   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   165b0:	80 91 7c 2b 	lds	r24, 0x2B7C
   165b4:	90 91 7d 2b 	lds	r25, 0x2B7D
   165b8:	6d e1       	ldi	r22, 0x1D	; 29
   165ba:	7e ea       	ldi	r23, 0xAE	; 174
   165bc:	40 e0       	ldi	r20, 0x00	; 0
   165be:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   165c2:	87 fd       	sbrc	r24, 7
   165c4:	9c c0       	rjmp	.+312    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_IDLE) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   165c6:	80 91 7c 2b 	lds	r24, 0x2B7C
   165ca:	90 91 7d 2b 	lds	r25, 0x2B7D
   165ce:	69 e9       	ldi	r22, 0x99	; 153
   165d0:	7e ea       	ldi	r23, 0xAE	; 174
   165d2:	43 e0       	ldi	r20, 0x03	; 3
   165d4:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   165d8:	87 fd       	sbrc	r24, 7
   165da:	91 c0       	rjmp	.+290    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_MAG_CAL) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   165dc:	80 91 7c 2b 	lds	r24, 0x2B7C
   165e0:	90 91 7d 2b 	lds	r25, 0x2B7D
   165e4:	61 e6       	ldi	r22, 0x61	; 97
   165e6:	7e ea       	ldi	r23, 0xAE	; 174
   165e8:	44 e0       	ldi	r20, 0x04	; 4
   165ea:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   165ee:	87 fd       	sbrc	r24, 7
   165f0:	86 c0       	rjmp	.+268    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_ACCEL_CAL) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   165f2:	80 91 7c 2b 	lds	r24, 0x2B7C
   165f6:	90 91 7d 2b 	lds	r25, 0x2B7D
   165fa:	6d e3       	ldi	r22, 0x3D	; 61
   165fc:	7e ea       	ldi	r23, 0xAE	; 174
   165fe:	45 e0       	ldi	r20, 0x05	; 5
   16600:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   16604:	87 fd       	sbrc	r24, 7
   16606:	7b c0       	rjmp	.+246    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_DCM_INIT) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   16608:	80 91 7c 2b 	lds	r24, 0x2B7C
   1660c:	90 91 7d 2b 	lds	r25, 0x2B7D
   16610:	67 eb       	ldi	r22, 0xB7	; 183
   16612:	7d ea       	ldi	r23, 0xAD	; 173
   16614:	46 e0       	ldi	r20, 0x06	; 6
   16616:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   1661a:	87 fd       	sbrc	r24, 7
   1661c:	70 c0       	rjmp	.+224    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_ACTIVE) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   1661e:	80 91 7c 2b 	lds	r24, 0x2B7C
   16622:	90 91 7d 2b 	lds	r25, 0x2B7D
   16626:	6f ea       	ldi	r22, 0xAF	; 175
   16628:	7d ea       	ldi	r23, 0xAD	; 173
   1662a:	47 e0       	ldi	r20, 0x07	; 7
   1662c:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   16630:	87 fd       	sbrc	r24, 7
   16632:	65 c0       	rjmp	.+202    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_ERROR) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   16634:	80 91 7c 2b 	lds	r24, 0x2B7C
   16638:	90 91 7d 2b 	lds	r25, 0x2B7D
   1663c:	6f e0       	ldi	r22, 0x0F	; 15
   1663e:	7e ea       	ldi	r23, 0xAE	; 174
   16640:	42 e0       	ldi	r20, 0x02	; 2
   16642:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   16646:	87 fd       	sbrc	r24, 7
   16648:	5a c0       	rjmp	.+180    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_CAL_SAMP_COMP) < 0)
   {
      exit(0);
   }

   if( utl_stMnPopFunMap( gt_navStruct.t_stateMn,
   1664a:	80 91 7c 2b 	lds	r24, 0x2B7C
   1664e:	90 91 7d 2b 	lds	r25, 0x2B7D
   16652:	61 e0       	ldi	r22, 0x01	; 1
   16654:	7e ea       	ldi	r23, 0xAE	; 174
   16656:	41 e0       	ldi	r20, 0x01	; 1
   16658:	0e 94 26 ed 	call	0x1da4c	; 0x1da4c <utl_stMnPopFunMap>
   1665c:	87 fd       	sbrc	r24, 7
   1665e:	4f c0       	rjmp	.+158    	; 0x166fe <usr_navigationInit+0x1f0>
                          (uint8_t)NAV_CAL_COMPLETE) < 0)
   {
      exit(0);
   }

   memset( (void *)ac_transMap, 0, sizeof( ac_transMap));
   16660:	be 01       	movw	r22, r28
   16662:	6f 5f       	subi	r22, 0xFF	; 255
   16664:	7f 4f       	sbci	r23, 0xFF	; 255
   16666:	80 e4       	ldi	r24, 0x40	; 64
   16668:	fb 01       	movw	r30, r22
   1666a:	11 92       	st	Z+, r1
   1666c:	8a 95       	dec	r24
   1666e:	e9 f7       	brne	.-6      	; 0x1666a <usr_navigationInit+0x15c>

   /*------------------------------------------------------------------------*
    * Define all possible state transitions...
    *------------------------------------------------------------------------*/
   ac_transMap[NAV_IDLE][NAV_IDLE]      = 1;
   16670:	81 e0       	ldi	r24, 0x01	; 1
   16672:	89 83       	std	Y+1, r24	; 0x01
   ac_transMap[NAV_IDLE][NAV_MAG_CAL]   = 1;
   16674:	8c 83       	std	Y+4, r24	; 0x04
   ac_transMap[NAV_IDLE][NAV_ACCEL_CAL] = 1;
   16676:	8d 83       	std	Y+5, r24	; 0x05
   ac_transMap[NAV_IDLE][NAV_DCM_INIT]  = 1;
   16678:	8e 83       	std	Y+6, r24	; 0x06
   ac_transMap[NAV_IDLE][NAV_ACTIVE]    = 1;
   1667a:	8f 83       	std	Y+7, r24	; 0x07

   ac_transMap[NAV_MAG_CAL][NAV_MAG_CAL]       = 1;
   1667c:	8c 8f       	std	Y+28, r24	; 0x1c
   ac_transMap[NAV_MAG_CAL][NAV_IDLE]          = 1;
   1667e:	89 8f       	std	Y+25, r24	; 0x19
   ac_transMap[NAV_MAG_CAL][NAV_ERROR]         = 1;
   16680:	88 a3       	lds	r24, 0x58
   ac_transMap[NAV_MAG_CAL][NAV_CAL_SAMP_COMP] = 1;
   16682:	8b 8f       	std	Y+27, r24	; 0x1b
   ac_transMap[NAV_MAG_CAL][NAV_CAL_COMPLETE]  = 1;
   16684:	8a 8f       	std	Y+26, r24	; 0x1a

   ac_transMap[NAV_ACCEL_CAL][NAV_ACCEL_CAL]     = 1;
   16686:	8d a3       	lds	r24, 0x5d
   ac_transMap[NAV_ACCEL_CAL][NAV_IDLE]          = 1;
   16688:	89 a3       	lds	r24, 0x59
   ac_transMap[NAV_ACCEL_CAL][NAV_ERROR]         = 1;
   1668a:	88 a7       	lds	r24, 0x78
   ac_transMap[NAV_ACCEL_CAL][NAV_CAL_SAMP_COMP] = 1;
   1668c:	8b a3       	lds	r24, 0x5b
   ac_transMap[NAV_ACCEL_CAL][NAV_CAL_COMPLETE]  = 1;
   1668e:	8a a3       	lds	r24, 0x5a

   ac_transMap[NAV_DCM_INIT][NAV_DCM_INIT] = 1;
   16690:	8e a7       	lds	r24, 0x7e
   ac_transMap[NAV_DCM_INIT][NAV_ACTIVE]   = 1;
   16692:	8f a7       	lds	r24, 0x7f
   ac_transMap[NAV_DCM_INIT][NAV_ERROR]    = 1;
   16694:	88 ab       	sts	0x58, r24
   ac_transMap[NAV_DCM_INIT][NAV_IDLE]     = 1;
   16696:	89 a7       	lds	r24, 0x79

   ac_transMap[NAV_ERROR][NAV_ERROR]     = 1;
   16698:	21 96       	adiw	r28, 0x01	; 1
   1669a:	8f af       	sts	0x7f, r24
   1669c:	21 97       	sbiw	r28, 0x01	; 1
   ac_transMap[NAV_ERROR][NAV_MAG_CAL]   = 1;
   1669e:	8c af       	sts	0x7c, r24
   ac_transMap[NAV_ERROR][NAV_ACCEL_CAL] = 1;
   166a0:	8d af       	sts	0x7d, r24
   ac_transMap[NAV_ERROR][NAV_DCM_INIT]  = 1;
   166a2:	8e af       	sts	0x7e, r24
   ac_transMap[NAV_ERROR][NAV_ACTIVE]    = 1;
   166a4:	8f af       	sts	0x7f, r24
   ac_transMap[NAV_ERROR][NAV_IDLE]      = 1;
   166a6:	89 af       	sts	0x79, r24

   ac_transMap[NAV_ACTIVE][NAV_ACTIVE] = 1;
   166a8:	8f ab       	sts	0x5f, r24
   ac_transMap[NAV_ACTIVE][NAV_IDLE]   = 1;
   166aa:	89 ab       	sts	0x59, r24
   ac_transMap[NAV_ACTIVE][NAV_ERROR]  = 1;
   166ac:	88 af       	sts	0x78, r24

   ac_transMap[NAV_CAL_COMPLETE][NAV_CAL_COMPLETE] = 1;
   166ae:	8a 87       	std	Y+10, r24	; 0x0a
   ac_transMap[NAV_CAL_COMPLETE][NAV_DCM_INIT]     = 1;
   166b0:	8e 87       	std	Y+14, r24	; 0x0e
   ac_transMap[NAV_CAL_COMPLETE][NAV_ACTIVE]       = 1;
   166b2:	8f 87       	std	Y+15, r24	; 0x0f
   ac_transMap[NAV_CAL_COMPLETE][NAV_IDLE]         = 1;
   166b4:	89 87       	std	Y+9, r24	; 0x09

   ac_transMap[NAV_CAL_SAMP_COMP][NAV_CAL_SAMP_COMP] = 1;
   166b6:	8b 8b       	std	Y+19, r24	; 0x13
   ac_transMap[NAV_CAL_SAMP_COMP][NAV_MAG_CAL]       = 1;
   166b8:	8c 8b       	std	Y+20, r24	; 0x14
   ac_transMap[NAV_CAL_SAMP_COMP][NAV_ACCEL_CAL]     = 1;
   166ba:	8d 8b       	std	Y+21, r24	; 0x15
   ac_transMap[NAV_CAL_SAMP_COMP][NAV_IDLE]          = 1;
   166bc:	89 8b       	std	Y+17, r24	; 0x11

   /*------------------------------------------------------------------------*
    * Store the state transition map.
    *------------------------------------------------------------------------*/
   utl_stMnPopTransMap( gt_navStruct.t_stateMn,
   166be:	80 91 7c 2b 	lds	r24, 0x2B7C
   166c2:	90 91 7d 2b 	lds	r25, 0x2B7D
   166c6:	0e 94 5e ed 	call	0x1dabc	; 0x1dabc <utl_stMnPopTransMap>
   if( gt_navStruct.t_signalHndl < 0)
      exit(0);

   usr_navStateMachineInit();

   gt_navStruct.t_mutex = arb_semaphoreCreate( MUTEX);
   166ca:	82 e0       	ldi	r24, 0x02	; 2
   166cc:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
   166d0:	80 93 87 2b 	sts	0x2B87, r24
   166d4:	90 93 88 2b 	sts	0x2B88, r25

   if( gt_navStruct.t_mutex < 0)
   166d8:	80 91 87 2b 	lds	r24, 0x2B87
   166dc:	90 91 88 2b 	lds	r25, 0x2B88
   166e0:	97 fd       	sbrc	r25, 7
   166e2:	0d c0       	rjmp	.+26     	; 0x166fe <usr_navigationInit+0x1f0>
      exit(0);

   gt_navStruct.t_signal = arb_semaphoreCreate( SIGNAL);
   166e4:	81 e0       	ldi	r24, 0x01	; 1
   166e6:	0e 94 a4 cd 	call	0x19b48	; 0x19b48 <arb_semaphoreCreate>
   166ea:	80 93 89 2b 	sts	0x2B89, r24
   166ee:	90 93 8a 2b 	sts	0x2B8A, r25

   if( gt_navStruct.t_signal < 0)
   166f2:	80 91 89 2b 	lds	r24, 0x2B89
   166f6:	90 91 8a 2b 	lds	r25, 0x2B8A
   166fa:	97 ff       	sbrs	r25, 7
   166fc:	04 c0       	rjmp	.+8      	; 0x16706 <usr_navigationInit+0x1f8>
      exit(0);
   166fe:	80 e0       	ldi	r24, 0x00	; 0
   16700:	90 e0       	ldi	r25, 0x00	; 0
   16702:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <exit>

}/*End usr_navigationInit*/
   16706:	c0 5c       	subi	r28, 0xC0	; 192
   16708:	df 4f       	sbci	r29, 0xFF	; 255
   1670a:	cd bf       	out	0x3d, r28	; 61
   1670c:	de bf       	out	0x3e, r29	; 62
   1670e:	df 91       	pop	r29
   16710:	cf 91       	pop	r28
   16712:	0f 91       	pop	r16
   16714:	08 95       	ret

00016716 <arb_console>:
   16716:	cf 93       	push	r28
   16718:	df 93       	push	r29
   1671a:	cd b7       	in	r28, 0x3d	; 61
   1671c:	de b7       	in	r29, 0x3e	; 62
   1671e:	cd 50       	subi	r28, 0x0D	; 13
   16720:	d2 40       	sbci	r29, 0x02	; 2
   16722:	cd bf       	out	0x3d, r28	; 61
   16724:	de bf       	out	0x3e, r29	; 62
   16726:	de 01       	movw	r26, r28
   16728:	5a 96       	adiw	r26, 0x1a	; 26
   1672a:	ea e8       	ldi	r30, 0x8A	; 138
   1672c:	f1 e2       	ldi	r31, 0x21	; 33
   1672e:	81 e3       	ldi	r24, 0x31	; 49
   16730:	01 90       	ld	r0, Z+
   16732:	0d 92       	st	X+, r0
   16734:	81 50       	subi	r24, 0x01	; 1
   16736:	e1 f7       	brne	.-8      	; 0x16730 <arb_console+0x1a>
   16738:	80 91 a9 2b 	lds	r24, 0x2BA9
   1673c:	90 91 aa 2b 	lds	r25, 0x2BAA
   16740:	66 e0       	ldi	r22, 0x06	; 6
   16742:	70 e0       	ldi	r23, 0x00	; 0
   16744:	20 e0       	ldi	r18, 0x00	; 0
   16746:	30 e0       	ldi	r19, 0x00	; 0
   16748:	a9 01       	movw	r20, r18
   1674a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   1674e:	80 91 a9 2b 	lds	r24, 0x2BA9
   16752:	90 91 aa 2b 	lds	r25, 0x2BAA
   16756:	67 e0       	ldi	r22, 0x07	; 7
   16758:	70 e0       	ldi	r23, 0x00	; 0
   1675a:	20 e3       	ldi	r18, 0x30	; 48
   1675c:	30 e0       	ldi	r19, 0x00	; 0
   1675e:	40 e0       	ldi	r20, 0x00	; 0
   16760:	50 e0       	ldi	r21, 0x00	; 0
   16762:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   16766:	80 91 a9 2b 	lds	r24, 0x2BA9
   1676a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1676e:	68 e0       	ldi	r22, 0x08	; 8
   16770:	70 e0       	ldi	r23, 0x00	; 0
   16772:	22 e3       	ldi	r18, 0x32	; 50
   16774:	30 e0       	ldi	r19, 0x00	; 0
   16776:	40 e0       	ldi	r20, 0x00	; 0
   16778:	50 e0       	ldi	r21, 0x00	; 0
   1677a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   1677e:	80 91 a9 2b 	lds	r24, 0x2BA9
   16782:	90 91 aa 2b 	lds	r25, 0x2BAA
   16786:	69 e0       	ldi	r22, 0x09	; 9
   16788:	70 e0       	ldi	r23, 0x00	; 0
   1678a:	21 e3       	ldi	r18, 0x31	; 49
   1678c:	30 e0       	ldi	r19, 0x00	; 0
   1678e:	40 e0       	ldi	r20, 0x00	; 0
   16790:	50 e0       	ldi	r21, 0x00	; 0
   16792:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   16796:	80 91 a9 2b 	lds	r24, 0x2BA9
   1679a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1679e:	be 01       	movw	r22, r28
   167a0:	66 5e       	subi	r22, 0xE6	; 230
   167a2:	7f 4f       	sbci	r23, 0xFF	; 255
   167a4:	41 e3       	ldi	r20, 0x31	; 49
   167a6:	50 e0       	ldi	r21, 0x00	; 0
   167a8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   167ac:	80 91 a9 2b 	lds	r24, 0x2BA9
   167b0:	90 91 aa 2b 	lds	r25, 0x2BAA
   167b4:	69 e0       	ldi	r22, 0x09	; 9
   167b6:	70 e0       	ldi	r23, 0x00	; 0
   167b8:	27 e3       	ldi	r18, 0x37	; 55
   167ba:	30 e0       	ldi	r19, 0x00	; 0
   167bc:	40 e0       	ldi	r20, 0x00	; 0
   167be:	50 e0       	ldi	r21, 0x00	; 0
   167c0:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   167c4:	80 91 a9 2b 	lds	r24, 0x2BA9
   167c8:	90 91 aa 2b 	lds	r25, 0x2BAA
   167cc:	64 e0       	ldi	r22, 0x04	; 4
   167ce:	70 e0       	ldi	r23, 0x00	; 0
   167d0:	20 e0       	ldi	r18, 0x00	; 0
   167d2:	30 e0       	ldi	r19, 0x00	; 0
   167d4:	a9 01       	movw	r20, r18
   167d6:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   167da:	8e 01       	movw	r16, r28
   167dc:	05 5b       	subi	r16, 0xB5	; 181
   167de:	1f 4f       	sbci	r17, 0xFF	; 255
   167e0:	c8 51       	subi	r28, 0x18	; 24
   167e2:	de 4f       	sbci	r29, 0xFE	; 254
   167e4:	08 83       	st	Y, r16
   167e6:	19 83       	std	Y+1, r17	; 0x01
   167e8:	c8 5e       	subi	r28, 0xE8	; 232
   167ea:	d1 40       	sbci	r29, 0x01	; 1
   167ec:	0b e4       	ldi	r16, 0x4B	; 75
   167ee:	10 e0       	ldi	r17, 0x00	; 0
   167f0:	0c 0f       	add	r16, r28
   167f2:	1d 1f       	adc	r17, r29
   167f4:	00 5f       	subi	r16, 0xF0	; 240
   167f6:	1f 4f       	sbci	r17, 0xFF	; 255
   167f8:	ce 50       	subi	r28, 0x0E	; 14
   167fa:	de 4f       	sbci	r29, 0xFE	; 254
   167fc:	08 83       	st	Y, r16
   167fe:	19 83       	std	Y+1, r17	; 0x01
   16800:	c2 5f       	subi	r28, 0xF2	; 242
   16802:	d1 40       	sbci	r29, 0x01	; 1
   16804:	78 01       	movw	r14, r16
   16806:	00 e0       	ldi	r16, 0x00	; 0
   16808:	10 e0       	ldi	r17, 0x00	; 0
   1680a:	c2 51       	subi	r28, 0x12	; 18
   1680c:	de 4f       	sbci	r29, 0xFE	; 254
   1680e:	e8 82       	st	Y, r14
   16810:	f9 82       	std	Y+1, r15	; 0x01
   16812:	0a 83       	std	Y+2, r16	; 0x02
   16814:	1b 83       	std	Y+3, r17	; 0x03
   16816:	ce 5e       	subi	r28, 0xEE	; 238
   16818:	d1 40       	sbci	r29, 0x01	; 1
   1681a:	28 ed       	ldi	r18, 0xD8	; 216
   1681c:	33 e2       	ldi	r19, 0x23	; 35
   1681e:	c9 01       	movw	r24, r18
   16820:	a0 e0       	ldi	r26, 0x00	; 0
   16822:	b0 e0       	ldi	r27, 0x00	; 0
   16824:	00 e0       	ldi	r16, 0x00	; 0
   16826:	10 e2       	ldi	r17, 0x20	; 32
   16828:	78 01       	movw	r14, r16
   1682a:	00 e0       	ldi	r16, 0x00	; 0
   1682c:	10 e0       	ldi	r17, 0x00	; 0
   1682e:	cc 50       	subi	r28, 0x0C	; 12
   16830:	de 4f       	sbci	r29, 0xFE	; 254
   16832:	e8 82       	st	Y, r14
   16834:	f9 82       	std	Y+1, r15	; 0x01
   16836:	0a 83       	std	Y+2, r16	; 0x02
   16838:	1b 83       	std	Y+3, r17	; 0x03
   1683a:	c4 5f       	subi	r28, 0xF4	; 244
   1683c:	d1 40       	sbci	r29, 0x01	; 1
   1683e:	9c 01       	movw	r18, r24
   16840:	ad 01       	movw	r20, r26
   16842:	2e 19       	sub	r18, r14
   16844:	3f 09       	sbc	r19, r15
   16846:	40 0b       	sbc	r20, r16
   16848:	51 0b       	sbc	r21, r17
   1684a:	c8 50       	subi	r28, 0x08	; 8
   1684c:	de 4f       	sbci	r29, 0xFE	; 254
   1684e:	28 83       	st	Y, r18
   16850:	39 83       	std	Y+1, r19	; 0x01
   16852:	4a 83       	std	Y+2, r20	; 0x02
   16854:	5b 83       	std	Y+3, r21	; 0x03
   16856:	c8 5f       	subi	r28, 0xF8	; 248
   16858:	d1 40       	sbci	r29, 0x01	; 1
   1685a:	0e e3       	ldi	r16, 0x3E	; 62
   1685c:	1c e2       	ldi	r17, 0x2C	; 44
   1685e:	78 01       	movw	r14, r16
   16860:	00 e0       	ldi	r16, 0x00	; 0
   16862:	10 e0       	ldi	r17, 0x00	; 0
   16864:	c4 50       	subi	r28, 0x04	; 4
   16866:	de 4f       	sbci	r29, 0xFE	; 254
   16868:	e8 82       	st	Y, r14
   1686a:	f9 82       	std	Y+1, r15	; 0x01
   1686c:	0a 83       	std	Y+2, r16	; 0x02
   1686e:	1b 83       	std	Y+3, r17	; 0x03
   16870:	cc 5f       	subi	r28, 0xFC	; 252
   16872:	d1 40       	sbci	r29, 0x01	; 1
   16874:	e8 1a       	sub	r14, r24
   16876:	f9 0a       	sbc	r15, r25
   16878:	0a 0b       	sbc	r16, r26
   1687a:	1b 0b       	sbc	r17, r27
   1687c:	c0 50       	subi	r28, 0x00	; 0
   1687e:	de 4f       	sbci	r29, 0xFE	; 254
   16880:	e8 82       	st	Y, r14
   16882:	f9 82       	std	Y+1, r15	; 0x01
   16884:	0a 83       	std	Y+2, r16	; 0x02
   16886:	1b 83       	std	Y+3, r17	; 0x03
   16888:	c0 50       	subi	r28, 0x00	; 0
   1688a:	d2 40       	sbci	r29, 0x02	; 2
   1688c:	2e 0d       	add	r18, r14
   1688e:	3f 1d       	adc	r19, r15
   16890:	40 1f       	adc	r20, r16
   16892:	51 1f       	adc	r21, r17
   16894:	cb 5f       	subi	r28, 0xFB	; 251
   16896:	dd 4f       	sbci	r29, 0xFD	; 253
   16898:	28 83       	st	Y, r18
   1689a:	39 83       	std	Y+1, r19	; 0x01
   1689c:	4a 83       	std	Y+2, r20	; 0x02
   1689e:	5b 83       	std	Y+3, r21	; 0x03
   168a0:	c5 50       	subi	r28, 0x05	; 5
   168a2:	d2 40       	sbci	r29, 0x02	; 2
   168a4:	80 91 a9 2b 	lds	r24, 0x2BA9
   168a8:	90 91 aa 2b 	lds	r25, 0x2BAA
   168ac:	c8 51       	subi	r28, 0x18	; 24
   168ae:	de 4f       	sbci	r29, 0xFE	; 254
   168b0:	e8 80       	ld	r14, Y
   168b2:	f9 80       	ldd	r15, Y+1	; 0x01
   168b4:	c8 5e       	subi	r28, 0xE8	; 232
   168b6:	d1 40       	sbci	r29, 0x01	; 1
   168b8:	17 01       	movw	r2, r14
   168ba:	44 24       	eor	r4, r4
   168bc:	55 24       	eor	r5, r5
   168be:	63 e0       	ldi	r22, 0x03	; 3
   168c0:	70 e0       	ldi	r23, 0x00	; 0
   168c2:	a2 01       	movw	r20, r4
   168c4:	91 01       	movw	r18, r2
   168c6:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   168ca:	6b 3f       	cpi	r22, 0xFB	; 251
   168cc:	79 f4       	brne	.+30     	; 0x168ec <arb_console+0x1d6>
   168ce:	00 d0       	rcall	.+0      	; 0x168d0 <arb_console+0x1ba>
   168d0:	0f 92       	push	r0
   168d2:	8e 01       	movw	r16, r28
   168d4:	04 54       	subi	r16, 0x44	; 68
   168d6:	1f 4f       	sbci	r17, 0xFF	; 255
   168d8:	ad b7       	in	r26, 0x3d	; 61
   168da:	be b7       	in	r27, 0x3e	; 62
   168dc:	11 96       	adiw	r26, 0x01	; 1
   168de:	0d 93       	st	X+, r16
   168e0:	1c 93       	st	X, r17
   168e2:	12 97       	sbiw	r26, 0x02	; 2
   168e4:	83 ea       	ldi	r24, 0xA3	; 163
   168e6:	94 e0       	ldi	r25, 0x04	; 4
   168e8:	0c 94 79 bc 	jmp	0x178f2	; 0x178f2 <arb_console+0x11dc>
   168ec:	6a 3f       	cpi	r22, 0xFA	; 250
   168ee:	71 f4       	brne	.+28     	; 0x1690c <arb_console+0x1f6>
   168f0:	00 d0       	rcall	.+0      	; 0x168f2 <arb_console+0x1dc>
   168f2:	0f 92       	push	r0
   168f4:	8e 01       	movw	r16, r28
   168f6:	04 54       	subi	r16, 0x44	; 68
   168f8:	1f 4f       	sbci	r17, 0xFF	; 255
   168fa:	ed b7       	in	r30, 0x3d	; 61
   168fc:	fe b7       	in	r31, 0x3e	; 62
   168fe:	01 83       	std	Z+1, r16	; 0x01
   16900:	12 83       	std	Z+2, r17	; 0x02
   16902:	88 eb       	ldi	r24, 0xB8	; 184
   16904:	94 e0       	ldi	r25, 0x04	; 4
   16906:	83 83       	std	Z+3, r24	; 0x03
   16908:	94 83       	std	Z+4, r25	; 0x04
   1690a:	f7 c7       	rjmp	.+4078   	; 0x178fa <arb_console+0x11e4>
   1690c:	ce 01       	movw	r24, r28
   1690e:	85 5b       	subi	r24, 0xB5	; 181
   16910:	9f 4f       	sbci	r25, 0xFF	; 255
   16912:	63 ed       	ldi	r22, 0xD3	; 211
   16914:	74 e0       	ldi	r23, 0x04	; 4
   16916:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   1691a:	00 97       	sbiw	r24, 0x00	; 0
   1691c:	69 f5       	brne	.+90     	; 0x16978 <arb_console+0x262>
   1691e:	c5 54       	subi	r28, 0x45	; 69
   16920:	df 4f       	sbci	r29, 0xFF	; 255
   16922:	88 81       	ld	r24, Y
   16924:	cb 5b       	subi	r28, 0xBB	; 187
   16926:	d0 40       	sbci	r29, 0x00	; 0
   16928:	84 30       	cpi	r24, 0x04	; 4
   1692a:	31 f5       	brne	.+76     	; 0x16978 <arb_console+0x262>
   1692c:	8b e4       	ldi	r24, 0x4B	; 75
   1692e:	90 e0       	ldi	r25, 0x00	; 0
   16930:	8c 0f       	add	r24, r28
   16932:	9d 1f       	adc	r25, r29
   16934:	40 96       	adiw	r24, 0x10	; 16
   16936:	0e 94 eb f5 	call	0x1ebd6	; 0x1ebd6 <atoi>
   1693a:	08 2f       	mov	r16, r24
   1693c:	8b e4       	ldi	r24, 0x4B	; 75
   1693e:	90 e0       	ldi	r25, 0x00	; 0
   16940:	8c 0f       	add	r24, r28
   16942:	9d 1f       	adc	r25, r29
   16944:	80 96       	adiw	r24, 0x20	; 32
   16946:	0e 94 eb f5 	call	0x1ebd6	; 0x1ebd6 <atoi>
   1694a:	68 2f       	mov	r22, r24
   1694c:	8b e4       	ldi	r24, 0x4B	; 75
   1694e:	90 e0       	ldi	r25, 0x00	; 0
   16950:	8c 0f       	add	r24, r28
   16952:	9d 1f       	adc	r25, r29
   16954:	c0 96       	adiw	r24, 0x30	; 48
   16956:	c7 5f       	subi	r28, 0xF7	; 247
   16958:	dd 4f       	sbci	r29, 0xFD	; 253
   1695a:	68 83       	st	Y, r22
   1695c:	c9 50       	subi	r28, 0x09	; 9
   1695e:	d2 40       	sbci	r29, 0x02	; 2
   16960:	0e 94 eb f5 	call	0x1ebd6	; 0x1ebd6 <atoi>
   16964:	48 2f       	mov	r20, r24
   16966:	80 2f       	mov	r24, r16
   16968:	c7 5f       	subi	r28, 0xF7	; 247
   1696a:	dd 4f       	sbci	r29, 0xFD	; 253
   1696c:	68 81       	ld	r22, Y
   1696e:	c9 50       	subi	r28, 0x09	; 9
   16970:	d2 40       	sbci	r29, 0x02	; 2
   16972:	0e 94 aa d2 	call	0x1a554	; 0x1a554 <arb_setSysTime>
   16976:	cf c7       	rjmp	.+3998   	; 0x17916 <arb_console+0x1200>
   16978:	ce 01       	movw	r24, r28
   1697a:	85 5b       	subi	r24, 0xB5	; 181
   1697c:	9f 4f       	sbci	r25, 0xFF	; 255
   1697e:	67 ed       	ldi	r22, 0xD7	; 215
   16980:	74 e0       	ldi	r23, 0x04	; 4
   16982:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   16986:	00 97       	sbiw	r24, 0x00	; 0
   16988:	09 f0       	breq	.+2      	; 0x1698c <arb_console+0x276>
   1698a:	7a c1       	rjmp	.+756    	; 0x16c80 <arb_console+0x56a>
   1698c:	00 d0       	rcall	.+0      	; 0x1698e <arb_console+0x278>
   1698e:	0f 92       	push	r0
   16990:	8e 01       	movw	r16, r28
   16992:	04 54       	subi	r16, 0x44	; 68
   16994:	1f 4f       	sbci	r17, 0xFF	; 255
   16996:	ad b7       	in	r26, 0x3d	; 61
   16998:	be b7       	in	r27, 0x3e	; 62
   1699a:	11 96       	adiw	r26, 0x01	; 1
   1699c:	0d 93       	st	X+, r16
   1699e:	1c 93       	st	X, r17
   169a0:	12 97       	sbiw	r26, 0x02	; 2
   169a2:	85 e1       	ldi	r24, 0x15	; 21
   169a4:	95 e0       	ldi	r25, 0x05	; 5
   169a6:	13 96       	adiw	r26, 0x03	; 3
   169a8:	8d 93       	st	X+, r24
   169aa:	9c 93       	st	X, r25
   169ac:	14 97       	sbiw	r26, 0x04	; 4
   169ae:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   169b2:	ac 01       	movw	r20, r24
   169b4:	80 91 a9 2b 	lds	r24, 0x2BA9
   169b8:	90 91 aa 2b 	lds	r25, 0x2BAA
   169bc:	0f 90       	pop	r0
   169be:	0f 90       	pop	r0
   169c0:	0f 90       	pop	r0
   169c2:	0f 90       	pop	r0
   169c4:	b8 01       	movw	r22, r16
   169c6:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   169ca:	00 d0       	rcall	.+0      	; 0x169cc <arb_console+0x2b6>
   169cc:	0f 92       	push	r0
   169ce:	ed b7       	in	r30, 0x3d	; 61
   169d0:	fe b7       	in	r31, 0x3e	; 62
   169d2:	01 83       	std	Z+1, r16	; 0x01
   169d4:	12 83       	std	Z+2, r17	; 0x02
   169d6:	82 e6       	ldi	r24, 0x62	; 98
   169d8:	95 e0       	ldi	r25, 0x05	; 5
   169da:	83 83       	std	Z+3, r24	; 0x03
   169dc:	94 83       	std	Z+4, r25	; 0x04
   169de:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   169e2:	ac 01       	movw	r20, r24
   169e4:	80 91 a9 2b 	lds	r24, 0x2BA9
   169e8:	90 91 aa 2b 	lds	r25, 0x2BAA
   169ec:	0f 90       	pop	r0
   169ee:	0f 90       	pop	r0
   169f0:	0f 90       	pop	r0
   169f2:	0f 90       	pop	r0
   169f4:	b8 01       	movw	r22, r16
   169f6:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   169fa:	00 d0       	rcall	.+0      	; 0x169fc <arb_console+0x2e6>
   169fc:	0f 92       	push	r0
   169fe:	ad b7       	in	r26, 0x3d	; 61
   16a00:	be b7       	in	r27, 0x3e	; 62
   16a02:	11 96       	adiw	r26, 0x01	; 1
   16a04:	0d 93       	st	X+, r16
   16a06:	1c 93       	st	X, r17
   16a08:	12 97       	sbiw	r26, 0x02	; 2
   16a0a:	8f ea       	ldi	r24, 0xAF	; 175
   16a0c:	95 e0       	ldi	r25, 0x05	; 5
   16a0e:	13 96       	adiw	r26, 0x03	; 3
   16a10:	8d 93       	st	X+, r24
   16a12:	9c 93       	st	X, r25
   16a14:	14 97       	sbiw	r26, 0x04	; 4
   16a16:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16a1a:	ac 01       	movw	r20, r24
   16a1c:	80 91 a9 2b 	lds	r24, 0x2BA9
   16a20:	90 91 aa 2b 	lds	r25, 0x2BAA
   16a24:	0f 90       	pop	r0
   16a26:	0f 90       	pop	r0
   16a28:	0f 90       	pop	r0
   16a2a:	0f 90       	pop	r0
   16a2c:	b8 01       	movw	r22, r16
   16a2e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16a32:	00 d0       	rcall	.+0      	; 0x16a34 <arb_console+0x31e>
   16a34:	0f 92       	push	r0
   16a36:	ed b7       	in	r30, 0x3d	; 61
   16a38:	fe b7       	in	r31, 0x3e	; 62
   16a3a:	01 83       	std	Z+1, r16	; 0x01
   16a3c:	12 83       	std	Z+2, r17	; 0x02
   16a3e:	8c ef       	ldi	r24, 0xFC	; 252
   16a40:	95 e0       	ldi	r25, 0x05	; 5
   16a42:	83 83       	std	Z+3, r24	; 0x03
   16a44:	94 83       	std	Z+4, r25	; 0x04
   16a46:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16a4a:	ac 01       	movw	r20, r24
   16a4c:	80 91 a9 2b 	lds	r24, 0x2BA9
   16a50:	90 91 aa 2b 	lds	r25, 0x2BAA
   16a54:	0f 90       	pop	r0
   16a56:	0f 90       	pop	r0
   16a58:	0f 90       	pop	r0
   16a5a:	0f 90       	pop	r0
   16a5c:	b8 01       	movw	r22, r16
   16a5e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16a62:	00 d0       	rcall	.+0      	; 0x16a64 <arb_console+0x34e>
   16a64:	0f 92       	push	r0
   16a66:	ad b7       	in	r26, 0x3d	; 61
   16a68:	be b7       	in	r27, 0x3e	; 62
   16a6a:	11 96       	adiw	r26, 0x01	; 1
   16a6c:	0d 93       	st	X+, r16
   16a6e:	1c 93       	st	X, r17
   16a70:	12 97       	sbiw	r26, 0x02	; 2
   16a72:	89 e4       	ldi	r24, 0x49	; 73
   16a74:	96 e0       	ldi	r25, 0x06	; 6
   16a76:	13 96       	adiw	r26, 0x03	; 3
   16a78:	8d 93       	st	X+, r24
   16a7a:	9c 93       	st	X, r25
   16a7c:	14 97       	sbiw	r26, 0x04	; 4
   16a7e:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16a82:	ac 01       	movw	r20, r24
   16a84:	80 91 a9 2b 	lds	r24, 0x2BA9
   16a88:	90 91 aa 2b 	lds	r25, 0x2BAA
   16a8c:	0f 90       	pop	r0
   16a8e:	0f 90       	pop	r0
   16a90:	0f 90       	pop	r0
   16a92:	0f 90       	pop	r0
   16a94:	b8 01       	movw	r22, r16
   16a96:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16a9a:	00 d0       	rcall	.+0      	; 0x16a9c <arb_console+0x386>
   16a9c:	0f 92       	push	r0
   16a9e:	ed b7       	in	r30, 0x3d	; 61
   16aa0:	fe b7       	in	r31, 0x3e	; 62
   16aa2:	01 83       	std	Z+1, r16	; 0x01
   16aa4:	12 83       	std	Z+2, r17	; 0x02
   16aa6:	86 e9       	ldi	r24, 0x96	; 150
   16aa8:	96 e0       	ldi	r25, 0x06	; 6
   16aaa:	83 83       	std	Z+3, r24	; 0x03
   16aac:	94 83       	std	Z+4, r25	; 0x04
   16aae:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16ab2:	ac 01       	movw	r20, r24
   16ab4:	80 91 a9 2b 	lds	r24, 0x2BA9
   16ab8:	90 91 aa 2b 	lds	r25, 0x2BAA
   16abc:	0f 90       	pop	r0
   16abe:	0f 90       	pop	r0
   16ac0:	0f 90       	pop	r0
   16ac2:	0f 90       	pop	r0
   16ac4:	b8 01       	movw	r22, r16
   16ac6:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16aca:	00 d0       	rcall	.+0      	; 0x16acc <arb_console+0x3b6>
   16acc:	0f 92       	push	r0
   16ace:	ad b7       	in	r26, 0x3d	; 61
   16ad0:	be b7       	in	r27, 0x3e	; 62
   16ad2:	11 96       	adiw	r26, 0x01	; 1
   16ad4:	0d 93       	st	X+, r16
   16ad6:	1c 93       	st	X, r17
   16ad8:	12 97       	sbiw	r26, 0x02	; 2
   16ada:	83 ee       	ldi	r24, 0xE3	; 227
   16adc:	96 e0       	ldi	r25, 0x06	; 6
   16ade:	13 96       	adiw	r26, 0x03	; 3
   16ae0:	8d 93       	st	X+, r24
   16ae2:	9c 93       	st	X, r25
   16ae4:	14 97       	sbiw	r26, 0x04	; 4
   16ae6:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16aea:	ac 01       	movw	r20, r24
   16aec:	80 91 a9 2b 	lds	r24, 0x2BA9
   16af0:	90 91 aa 2b 	lds	r25, 0x2BAA
   16af4:	0f 90       	pop	r0
   16af6:	0f 90       	pop	r0
   16af8:	0f 90       	pop	r0
   16afa:	0f 90       	pop	r0
   16afc:	b8 01       	movw	r22, r16
   16afe:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16b02:	00 d0       	rcall	.+0      	; 0x16b04 <arb_console+0x3ee>
   16b04:	0f 92       	push	r0
   16b06:	ed b7       	in	r30, 0x3d	; 61
   16b08:	fe b7       	in	r31, 0x3e	; 62
   16b0a:	01 83       	std	Z+1, r16	; 0x01
   16b0c:	12 83       	std	Z+2, r17	; 0x02
   16b0e:	80 e3       	ldi	r24, 0x30	; 48
   16b10:	97 e0       	ldi	r25, 0x07	; 7
   16b12:	83 83       	std	Z+3, r24	; 0x03
   16b14:	94 83       	std	Z+4, r25	; 0x04
   16b16:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16b1a:	ac 01       	movw	r20, r24
   16b1c:	80 91 a9 2b 	lds	r24, 0x2BA9
   16b20:	90 91 aa 2b 	lds	r25, 0x2BAA
   16b24:	0f 90       	pop	r0
   16b26:	0f 90       	pop	r0
   16b28:	0f 90       	pop	r0
   16b2a:	0f 90       	pop	r0
   16b2c:	b8 01       	movw	r22, r16
   16b2e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16b32:	00 d0       	rcall	.+0      	; 0x16b34 <arb_console+0x41e>
   16b34:	0f 92       	push	r0
   16b36:	ad b7       	in	r26, 0x3d	; 61
   16b38:	be b7       	in	r27, 0x3e	; 62
   16b3a:	11 96       	adiw	r26, 0x01	; 1
   16b3c:	0d 93       	st	X+, r16
   16b3e:	1c 93       	st	X, r17
   16b40:	12 97       	sbiw	r26, 0x02	; 2
   16b42:	8d e7       	ldi	r24, 0x7D	; 125
   16b44:	97 e0       	ldi	r25, 0x07	; 7
   16b46:	13 96       	adiw	r26, 0x03	; 3
   16b48:	8d 93       	st	X+, r24
   16b4a:	9c 93       	st	X, r25
   16b4c:	14 97       	sbiw	r26, 0x04	; 4
   16b4e:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16b52:	ac 01       	movw	r20, r24
   16b54:	80 91 a9 2b 	lds	r24, 0x2BA9
   16b58:	90 91 aa 2b 	lds	r25, 0x2BAA
   16b5c:	0f 90       	pop	r0
   16b5e:	0f 90       	pop	r0
   16b60:	0f 90       	pop	r0
   16b62:	0f 90       	pop	r0
   16b64:	b8 01       	movw	r22, r16
   16b66:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16b6a:	00 d0       	rcall	.+0      	; 0x16b6c <arb_console+0x456>
   16b6c:	0f 92       	push	r0
   16b6e:	ed b7       	in	r30, 0x3d	; 61
   16b70:	fe b7       	in	r31, 0x3e	; 62
   16b72:	01 83       	std	Z+1, r16	; 0x01
   16b74:	12 83       	std	Z+2, r17	; 0x02
   16b76:	8a ec       	ldi	r24, 0xCA	; 202
   16b78:	97 e0       	ldi	r25, 0x07	; 7
   16b7a:	83 83       	std	Z+3, r24	; 0x03
   16b7c:	94 83       	std	Z+4, r25	; 0x04
   16b7e:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16b82:	ac 01       	movw	r20, r24
   16b84:	80 91 a9 2b 	lds	r24, 0x2BA9
   16b88:	90 91 aa 2b 	lds	r25, 0x2BAA
   16b8c:	0f 90       	pop	r0
   16b8e:	0f 90       	pop	r0
   16b90:	0f 90       	pop	r0
   16b92:	0f 90       	pop	r0
   16b94:	b8 01       	movw	r22, r16
   16b96:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16b9a:	00 d0       	rcall	.+0      	; 0x16b9c <arb_console+0x486>
   16b9c:	0f 92       	push	r0
   16b9e:	ad b7       	in	r26, 0x3d	; 61
   16ba0:	be b7       	in	r27, 0x3e	; 62
   16ba2:	11 96       	adiw	r26, 0x01	; 1
   16ba4:	0d 93       	st	X+, r16
   16ba6:	1c 93       	st	X, r17
   16ba8:	12 97       	sbiw	r26, 0x02	; 2
   16baa:	87 e1       	ldi	r24, 0x17	; 23
   16bac:	98 e0       	ldi	r25, 0x08	; 8
   16bae:	13 96       	adiw	r26, 0x03	; 3
   16bb0:	8d 93       	st	X+, r24
   16bb2:	9c 93       	st	X, r25
   16bb4:	14 97       	sbiw	r26, 0x04	; 4
   16bb6:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16bba:	ac 01       	movw	r20, r24
   16bbc:	80 91 a9 2b 	lds	r24, 0x2BA9
   16bc0:	90 91 aa 2b 	lds	r25, 0x2BAA
   16bc4:	0f 90       	pop	r0
   16bc6:	0f 90       	pop	r0
   16bc8:	0f 90       	pop	r0
   16bca:	0f 90       	pop	r0
   16bcc:	b8 01       	movw	r22, r16
   16bce:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16bd2:	00 d0       	rcall	.+0      	; 0x16bd4 <arb_console+0x4be>
   16bd4:	0f 92       	push	r0
   16bd6:	ed b7       	in	r30, 0x3d	; 61
   16bd8:	fe b7       	in	r31, 0x3e	; 62
   16bda:	01 83       	std	Z+1, r16	; 0x01
   16bdc:	12 83       	std	Z+2, r17	; 0x02
   16bde:	84 e6       	ldi	r24, 0x64	; 100
   16be0:	98 e0       	ldi	r25, 0x08	; 8
   16be2:	83 83       	std	Z+3, r24	; 0x03
   16be4:	94 83       	std	Z+4, r25	; 0x04
   16be6:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16bea:	ac 01       	movw	r20, r24
   16bec:	80 91 a9 2b 	lds	r24, 0x2BA9
   16bf0:	90 91 aa 2b 	lds	r25, 0x2BAA
   16bf4:	0f 90       	pop	r0
   16bf6:	0f 90       	pop	r0
   16bf8:	0f 90       	pop	r0
   16bfa:	0f 90       	pop	r0
   16bfc:	b8 01       	movw	r22, r16
   16bfe:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16c02:	00 d0       	rcall	.+0      	; 0x16c04 <arb_console+0x4ee>
   16c04:	0f 92       	push	r0
   16c06:	ad b7       	in	r26, 0x3d	; 61
   16c08:	be b7       	in	r27, 0x3e	; 62
   16c0a:	11 96       	adiw	r26, 0x01	; 1
   16c0c:	0d 93       	st	X+, r16
   16c0e:	1c 93       	st	X, r17
   16c10:	12 97       	sbiw	r26, 0x02	; 2
   16c12:	81 eb       	ldi	r24, 0xB1	; 177
   16c14:	98 e0       	ldi	r25, 0x08	; 8
   16c16:	13 96       	adiw	r26, 0x03	; 3
   16c18:	8d 93       	st	X+, r24
   16c1a:	9c 93       	st	X, r25
   16c1c:	14 97       	sbiw	r26, 0x04	; 4
   16c1e:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16c22:	ac 01       	movw	r20, r24
   16c24:	80 91 a9 2b 	lds	r24, 0x2BA9
   16c28:	90 91 aa 2b 	lds	r25, 0x2BAA
   16c2c:	0f 90       	pop	r0
   16c2e:	0f 90       	pop	r0
   16c30:	0f 90       	pop	r0
   16c32:	0f 90       	pop	r0
   16c34:	b8 01       	movw	r22, r16
   16c36:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16c3a:	00 d0       	rcall	.+0      	; 0x16c3c <arb_console+0x526>
   16c3c:	0f 92       	push	r0
   16c3e:	ed b7       	in	r30, 0x3d	; 61
   16c40:	fe b7       	in	r31, 0x3e	; 62
   16c42:	01 83       	std	Z+1, r16	; 0x01
   16c44:	12 83       	std	Z+2, r17	; 0x02
   16c46:	8e ef       	ldi	r24, 0xFE	; 254
   16c48:	98 e0       	ldi	r25, 0x08	; 8
   16c4a:	83 83       	std	Z+3, r24	; 0x03
   16c4c:	94 83       	std	Z+4, r25	; 0x04
   16c4e:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16c52:	ac 01       	movw	r20, r24
   16c54:	80 91 a9 2b 	lds	r24, 0x2BA9
   16c58:	90 91 aa 2b 	lds	r25, 0x2BAA
   16c5c:	0f 90       	pop	r0
   16c5e:	0f 90       	pop	r0
   16c60:	0f 90       	pop	r0
   16c62:	0f 90       	pop	r0
   16c64:	b8 01       	movw	r22, r16
   16c66:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16c6a:	00 d0       	rcall	.+0      	; 0x16c6c <arb_console+0x556>
   16c6c:	0f 92       	push	r0
   16c6e:	ad b7       	in	r26, 0x3d	; 61
   16c70:	be b7       	in	r27, 0x3e	; 62
   16c72:	11 96       	adiw	r26, 0x01	; 1
   16c74:	0d 93       	st	X+, r16
   16c76:	1c 93       	st	X, r17
   16c78:	12 97       	sbiw	r26, 0x02	; 2
   16c7a:	8b e4       	ldi	r24, 0x4B	; 75
   16c7c:	99 e0       	ldi	r25, 0x09	; 9
   16c7e:	39 c6       	rjmp	.+3186   	; 0x178f2 <arb_console+0x11dc>
   16c80:	ce 01       	movw	r24, r28
   16c82:	85 5b       	subi	r24, 0xB5	; 181
   16c84:	9f 4f       	sbci	r25, 0xFF	; 255
   16c86:	6c ed       	ldi	r22, 0xDC	; 220
   16c88:	74 e0       	ldi	r23, 0x04	; 4
   16c8a:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   16c8e:	00 97       	sbiw	r24, 0x00	; 0
   16c90:	09 f0       	breq	.+2      	; 0x16c94 <arb_console+0x57e>
   16c92:	69 c0       	rjmp	.+210    	; 0x16d66 <arb_console+0x650>
   16c94:	c5 54       	subi	r28, 0x45	; 69
   16c96:	df 4f       	sbci	r29, 0xFF	; 255
   16c98:	88 81       	ld	r24, Y
   16c9a:	cb 5b       	subi	r28, 0xBB	; 187
   16c9c:	d0 40       	sbci	r29, 0x00	; 0
   16c9e:	82 30       	cpi	r24, 0x02	; 2
   16ca0:	09 f0       	breq	.+2      	; 0x16ca4 <arb_console+0x58e>
   16ca2:	61 c0       	rjmp	.+194    	; 0x16d66 <arb_console+0x650>
   16ca4:	6c 96       	adiw	r28, 0x1c	; 28
   16ca6:	8f ad       	sts	0x6f, r24
   16ca8:	6c 97       	sbiw	r28, 0x1c	; 28
   16caa:	4c eb       	ldi	r20, 0xBC	; 188
   16cac:	e4 2e       	mov	r14, r20
   16cae:	f1 2c       	mov	r15, r1
   16cb0:	ec 0e       	add	r14, r28
   16cb2:	fd 1e       	adc	r15, r29
   16cb4:	80 33       	cpi	r24, 0x30	; 48
   16cb6:	d9 f0       	breq	.+54     	; 0x16cee <arb_console+0x5d8>
   16cb8:	81 33       	cpi	r24, 0x31	; 49
   16cba:	d9 f0       	breq	.+54     	; 0x16cf2 <arb_console+0x5dc>
   16cbc:	82 33       	cpi	r24, 0x32	; 50
   16cbe:	d9 f0       	breq	.+54     	; 0x16cf6 <arb_console+0x5e0>
   16cc0:	00 d0       	rcall	.+0      	; 0x16cc2 <arb_console+0x5ac>
   16cc2:	0f 92       	push	r0
   16cc4:	ed b7       	in	r30, 0x3d	; 61
   16cc6:	fe b7       	in	r31, 0x3e	; 62
   16cc8:	e1 82       	std	Z+1, r14	; 0x01
   16cca:	f2 82       	std	Z+2, r15	; 0x02
   16ccc:	88 e9       	ldi	r24, 0x98	; 152
   16cce:	99 e0       	ldi	r25, 0x09	; 9
   16cd0:	83 83       	std	Z+3, r24	; 0x03
   16cd2:	94 83       	std	Z+4, r25	; 0x04
   16cd4:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16cd8:	ac 01       	movw	r20, r24
   16cda:	80 91 a9 2b 	lds	r24, 0x2BA9
   16cde:	90 91 aa 2b 	lds	r25, 0x2BAA
   16ce2:	0f 90       	pop	r0
   16ce4:	0f 90       	pop	r0
   16ce6:	0f 90       	pop	r0
   16ce8:	0f 90       	pop	r0
   16cea:	b7 01       	movw	r22, r14
   16cec:	12 c6       	rjmp	.+3108   	; 0x17912 <arb_console+0x11fc>
   16cee:	01 e0       	ldi	r16, 0x01	; 1
   16cf0:	03 c0       	rjmp	.+6      	; 0x16cf8 <arb_console+0x5e2>
   16cf2:	02 e0       	ldi	r16, 0x02	; 2
   16cf4:	01 c0       	rjmp	.+2      	; 0x16cf8 <arb_console+0x5e2>
   16cf6:	04 e0       	ldi	r16, 0x04	; 4
   16cf8:	00 d0       	rcall	.+0      	; 0x16cfa <arb_console+0x5e4>
   16cfa:	0f 92       	push	r0
   16cfc:	ad b7       	in	r26, 0x3d	; 61
   16cfe:	be b7       	in	r27, 0x3e	; 62
   16d00:	11 96       	adiw	r26, 0x01	; 1
   16d02:	ed 92       	st	X+, r14
   16d04:	fc 92       	st	X, r15
   16d06:	12 97       	sbiw	r26, 0x02	; 2
   16d08:	88 ea       	ldi	r24, 0xA8	; 168
   16d0a:	99 e0       	ldi	r25, 0x09	; 9
   16d0c:	13 96       	adiw	r26, 0x03	; 3
   16d0e:	8d 93       	st	X+, r24
   16d10:	9c 93       	st	X, r25
   16d12:	14 97       	sbiw	r26, 0x04	; 4
   16d14:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16d18:	ac 01       	movw	r20, r24
   16d1a:	80 91 a9 2b 	lds	r24, 0x2BA9
   16d1e:	90 91 aa 2b 	lds	r25, 0x2BAA
   16d22:	0f 90       	pop	r0
   16d24:	0f 90       	pop	r0
   16d26:	0f 90       	pop	r0
   16d28:	0f 90       	pop	r0
   16d2a:	b7 01       	movw	r22, r14
   16d2c:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16d30:	80 91 a9 2b 	lds	r24, 0x2BA9
   16d34:	90 91 aa 2b 	lds	r25, 0x2BAA
   16d38:	63 e0       	ldi	r22, 0x03	; 3
   16d3a:	70 e0       	ldi	r23, 0x00	; 0
   16d3c:	a2 01       	movw	r20, r4
   16d3e:	91 01       	movw	r18, r2
   16d40:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   16d44:	80 2f       	mov	r24, r16
   16d46:	0e 94 41 c0 	call	0x18082	; 0x18082 <arb_setPrintfDbgLevel>
   16d4a:	80 91 a9 2b 	lds	r24, 0x2BA9
   16d4e:	90 91 aa 2b 	lds	r25, 0x2BAA
   16d52:	63 e0       	ldi	r22, 0x03	; 3
   16d54:	70 e0       	ldi	r23, 0x00	; 0
   16d56:	a2 01       	movw	r20, r4
   16d58:	91 01       	movw	r18, r2
   16d5a:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   16d5e:	80 e2       	ldi	r24, 0x20	; 32
   16d60:	0e 94 41 c0 	call	0x18082	; 0x18082 <arb_setPrintfDbgLevel>
   16d64:	d8 c5       	rjmp	.+2992   	; 0x17916 <arb_console+0x1200>
   16d66:	ce 01       	movw	r24, r28
   16d68:	85 5b       	subi	r24, 0xB5	; 181
   16d6a:	9f 4f       	sbci	r25, 0xFF	; 255
   16d6c:	60 ee       	ldi	r22, 0xE0	; 224
   16d6e:	74 e0       	ldi	r23, 0x04	; 4
   16d70:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   16d74:	00 97       	sbiw	r24, 0x00	; 0
   16d76:	09 f0       	breq	.+2      	; 0x16d7a <arb_console+0x664>
   16d78:	d2 c0       	rjmp	.+420    	; 0x16f1e <arb_console+0x808>
   16d7a:	c5 54       	subi	r28, 0x45	; 69
   16d7c:	df 4f       	sbci	r29, 0xFF	; 255
   16d7e:	88 81       	ld	r24, Y
   16d80:	cb 5b       	subi	r28, 0xBB	; 187
   16d82:	d0 40       	sbci	r29, 0x00	; 0
   16d84:	81 30       	cpi	r24, 0x01	; 1
   16d86:	09 f0       	breq	.+2      	; 0x16d8a <arb_console+0x674>
   16d88:	ca c0       	rjmp	.+404    	; 0x16f1e <arb_console+0x808>
   16d8a:	0e 94 38 bd 	call	0x17a70	; 0x17a70 <arb_getDeviceList>
   16d8e:	8b 83       	std	Y+3, r24	; 0x03
   16d90:	9c 83       	std	Y+4, r25	; 0x04
   16d92:	00 d0       	rcall	.+0      	; 0x16d94 <arb_console+0x67e>
   16d94:	0f 92       	push	r0
   16d96:	8e 01       	movw	r16, r28
   16d98:	04 54       	subi	r16, 0x44	; 68
   16d9a:	1f 4f       	sbci	r17, 0xFF	; 255
   16d9c:	ed b7       	in	r30, 0x3d	; 61
   16d9e:	fe b7       	in	r31, 0x3e	; 62
   16da0:	01 83       	std	Z+1, r16	; 0x01
   16da2:	12 83       	std	Z+2, r17	; 0x02
   16da4:	80 e0       	ldi	r24, 0x00	; 0
   16da6:	9a e0       	ldi	r25, 0x0A	; 10
   16da8:	83 83       	std	Z+3, r24	; 0x03
   16daa:	94 83       	std	Z+4, r25	; 0x04
   16dac:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16db0:	ac 01       	movw	r20, r24
   16db2:	80 91 a9 2b 	lds	r24, 0x2BA9
   16db6:	90 91 aa 2b 	lds	r25, 0x2BAA
   16dba:	0f 90       	pop	r0
   16dbc:	0f 90       	pop	r0
   16dbe:	0f 90       	pop	r0
   16dc0:	0f 90       	pop	r0
   16dc2:	b8 01       	movw	r22, r16
   16dc4:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16dc8:	00 d0       	rcall	.+0      	; 0x16dca <arb_console+0x6b4>
   16dca:	0f 92       	push	r0
   16dcc:	ad b7       	in	r26, 0x3d	; 61
   16dce:	be b7       	in	r27, 0x3e	; 62
   16dd0:	11 96       	adiw	r26, 0x01	; 1
   16dd2:	0d 93       	st	X+, r16
   16dd4:	1c 93       	st	X, r17
   16dd6:	12 97       	sbiw	r26, 0x02	; 2
   16dd8:	82 e4       	ldi	r24, 0x42	; 66
   16dda:	9a e0       	ldi	r25, 0x0A	; 10
   16ddc:	13 96       	adiw	r26, 0x03	; 3
   16dde:	8d 93       	st	X+, r24
   16de0:	9c 93       	st	X, r25
   16de2:	14 97       	sbiw	r26, 0x04	; 4
   16de4:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16de8:	ac 01       	movw	r20, r24
   16dea:	80 91 a9 2b 	lds	r24, 0x2BA9
   16dee:	90 91 aa 2b 	lds	r25, 0x2BAA
   16df2:	0f 90       	pop	r0
   16df4:	0f 90       	pop	r0
   16df6:	0f 90       	pop	r0
   16df8:	0f 90       	pop	r0
   16dfa:	b8 01       	movw	r22, r16
   16dfc:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16e00:	00 d0       	rcall	.+0      	; 0x16e02 <arb_console+0x6ec>
   16e02:	0f 92       	push	r0
   16e04:	ed b7       	in	r30, 0x3d	; 61
   16e06:	fe b7       	in	r31, 0x3e	; 62
   16e08:	01 83       	std	Z+1, r16	; 0x01
   16e0a:	12 83       	std	Z+2, r17	; 0x02
   16e0c:	84 e8       	ldi	r24, 0x84	; 132
   16e0e:	9a e0       	ldi	r25, 0x0A	; 10
   16e10:	83 83       	std	Z+3, r24	; 0x03
   16e12:	94 83       	std	Z+4, r25	; 0x04
   16e14:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16e18:	ac 01       	movw	r20, r24
   16e1a:	80 91 a9 2b 	lds	r24, 0x2BA9
   16e1e:	90 91 aa 2b 	lds	r25, 0x2BAA
   16e22:	0f 90       	pop	r0
   16e24:	0f 90       	pop	r0
   16e26:	0f 90       	pop	r0
   16e28:	0f 90       	pop	r0
   16e2a:	b8 01       	movw	r22, r16
   16e2c:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16e30:	eb 81       	ldd	r30, Y+3	; 0x03
   16e32:	fc 81       	ldd	r31, Y+4	; 0x04
   16e34:	c2 80       	ldd	r12, Z+2	; 0x02
   16e36:	d3 80       	ldd	r13, Z+3	; 0x03
   16e38:	eb 81       	ldd	r30, Y+3	; 0x03
   16e3a:	fc 81       	ldd	r31, Y+4	; 0x04
   16e3c:	80 85       	ldd	r24, Z+8	; 0x08
   16e3e:	91 85       	ldd	r25, Z+9	; 0x09
   16e40:	89 83       	std	Y+1, r24	; 0x01
   16e42:	9a 83       	std	Y+2, r25	; 0x02
   16e44:	e0 2e       	mov	r14, r16
   16e46:	01 2f       	mov	r16, r17
   16e48:	36 ec       	ldi	r19, 0xC6	; 198
   16e4a:	83 2e       	mov	r8, r19
   16e4c:	3a e0       	ldi	r19, 0x0A	; 10
   16e4e:	93 2e       	mov	r9, r19
   16e50:	44 c0       	rjmp	.+136    	; 0x16eda <arb_console+0x7c4>
   16e52:	e9 81       	ldd	r30, Y+1	; 0x01
   16e54:	fa 81       	ldd	r31, Y+2	; 0x02
   16e56:	80 81       	ld	r24, Z
   16e58:	91 81       	ldd	r25, Z+1	; 0x01
   16e5a:	dc 01       	movw	r26, r24
   16e5c:	2d 91       	ld	r18, X+
   16e5e:	3c 91       	ld	r19, X
   16e60:	fc 01       	movw	r30, r24
   16e62:	41 91       	ld	r20, Z+
   16e64:	51 91       	ld	r21, Z+
   16e66:	3f 01       	movw	r6, r30
   16e68:	6d b7       	in	r22, 0x3d	; 61
   16e6a:	7e b7       	in	r23, 0x3e	; 62
   16e6c:	6c 50       	subi	r22, 0x0C	; 12
   16e6e:	70 40       	sbci	r23, 0x00	; 0
   16e70:	6d bf       	out	0x3d, r22	; 61
   16e72:	7e bf       	out	0x3e, r23	; 62
   16e74:	ed b7       	in	r30, 0x3d	; 61
   16e76:	fe b7       	in	r31, 0x3e	; 62
   16e78:	31 96       	adiw	r30, 0x01	; 1
   16e7a:	ad b7       	in	r26, 0x3d	; 61
   16e7c:	be b7       	in	r27, 0x3e	; 62
   16e7e:	11 96       	adiw	r26, 0x01	; 1
   16e80:	ec 92       	st	X, r14
   16e82:	11 97       	sbiw	r26, 0x01	; 1
   16e84:	12 96       	adiw	r26, 0x02	; 2
   16e86:	0c 93       	st	X, r16
   16e88:	82 82       	std	Z+2, r8	; 0x02
   16e8a:	93 82       	std	Z+3, r9	; 0x03
   16e8c:	64 82       	std	Z+4, r6	; 0x04
   16e8e:	75 82       	std	Z+5, r7	; 0x05
   16e90:	36 83       	std	Z+6, r19	; 0x06
   16e92:	17 82       	std	Z+7, r1	; 0x07
   16e94:	40 87       	std	Z+8, r20	; 0x08
   16e96:	11 86       	std	Z+9, r1	; 0x09
   16e98:	dc 01       	movw	r26, r24
   16e9a:	52 96       	adiw	r26, 0x12	; 18
   16e9c:	8c 91       	ld	r24, X
   16e9e:	99 27       	eor	r25, r25
   16ea0:	87 fd       	sbrc	r24, 7
   16ea2:	90 95       	com	r25
   16ea4:	82 87       	std	Z+10, r24	; 0x0a
   16ea6:	93 87       	std	Z+11, r25	; 0x0b
   16ea8:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16eac:	ac 01       	movw	r20, r24
   16eae:	80 91 a9 2b 	lds	r24, 0x2BA9
   16eb2:	90 91 aa 2b 	lds	r25, 0x2BAA
   16eb6:	ed b7       	in	r30, 0x3d	; 61
   16eb8:	fe b7       	in	r31, 0x3e	; 62
   16eba:	3c 96       	adiw	r30, 0x0c	; 12
   16ebc:	ed bf       	out	0x3d, r30	; 61
   16ebe:	fe bf       	out	0x3e, r31	; 62
   16ec0:	6e 2d       	mov	r22, r14
   16ec2:	70 2f       	mov	r23, r16
   16ec4:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   16ec8:	08 94       	sec
   16eca:	c1 08       	sbc	r12, r1
   16ecc:	d1 08       	sbc	r13, r1
   16ece:	e9 81       	ldd	r30, Y+1	; 0x01
   16ed0:	fa 81       	ldd	r31, Y+2	; 0x02
   16ed2:	80 85       	ldd	r24, Z+8	; 0x08
   16ed4:	91 85       	ldd	r25, Z+9	; 0x09
   16ed6:	89 83       	std	Y+1, r24	; 0x01
   16ed8:	9a 83       	std	Y+2, r25	; 0x02
   16eda:	c1 14       	cp	r12, r1
   16edc:	d1 04       	cpc	r13, r1
   16ede:	09 f0       	breq	.+2      	; 0x16ee2 <arb_console+0x7cc>
   16ee0:	b8 cf       	rjmp	.-144    	; 0x16e52 <arb_console+0x73c>
   16ee2:	00 d0       	rcall	.+0      	; 0x16ee4 <arb_console+0x7ce>
   16ee4:	0f 92       	push	r0
   16ee6:	ad b7       	in	r26, 0x3d	; 61
   16ee8:	be b7       	in	r27, 0x3e	; 62
   16eea:	11 96       	adiw	r26, 0x01	; 1
   16eec:	ec 92       	st	X, r14
   16eee:	11 97       	sbiw	r26, 0x01	; 1
   16ef0:	12 96       	adiw	r26, 0x02	; 2
   16ef2:	0c 93       	st	X, r16
   16ef4:	12 97       	sbiw	r26, 0x02	; 2
   16ef6:	8f ef       	ldi	r24, 0xFF	; 255
   16ef8:	9a e0       	ldi	r25, 0x0A	; 10
   16efa:	13 96       	adiw	r26, 0x03	; 3
   16efc:	8d 93       	st	X+, r24
   16efe:	9c 93       	st	X, r25
   16f00:	14 97       	sbiw	r26, 0x04	; 4
   16f02:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   16f06:	ac 01       	movw	r20, r24
   16f08:	80 91 a9 2b 	lds	r24, 0x2BA9
   16f0c:	90 91 aa 2b 	lds	r25, 0x2BAA
   16f10:	0f 90       	pop	r0
   16f12:	0f 90       	pop	r0
   16f14:	0f 90       	pop	r0
   16f16:	0f 90       	pop	r0
   16f18:	6e 2d       	mov	r22, r14
   16f1a:	70 2f       	mov	r23, r16
   16f1c:	fa c4       	rjmp	.+2548   	; 0x17912 <arb_console+0x11fc>
   16f1e:	ce 01       	movw	r24, r28
   16f20:	85 5b       	subi	r24, 0xB5	; 181
   16f22:	9f 4f       	sbci	r25, 0xFF	; 255
   16f24:	64 ee       	ldi	r22, 0xE4	; 228
   16f26:	74 e0       	ldi	r23, 0x04	; 4
   16f28:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   16f2c:	00 97       	sbiw	r24, 0x00	; 0
   16f2e:	09 f0       	breq	.+2      	; 0x16f32 <arb_console+0x81c>
   16f30:	e0 c2       	rjmp	.+1472   	; 0x174f2 <arb_console+0xddc>
   16f32:	c5 54       	subi	r28, 0x45	; 69
   16f34:	df 4f       	sbci	r29, 0xFF	; 255
   16f36:	88 81       	ld	r24, Y
   16f38:	cb 5b       	subi	r28, 0xBB	; 187
   16f3a:	d0 40       	sbci	r29, 0x00	; 0
   16f3c:	81 30       	cpi	r24, 0x01	; 1
   16f3e:	09 f0       	breq	.+2      	; 0x16f42 <arb_console+0x82c>
   16f40:	d8 c2       	rjmp	.+1456   	; 0x174f2 <arb_console+0xddc>
   16f42:	80 91 3a 2c 	lds	r24, 0x2C3A
   16f46:	90 91 3b 2c 	lds	r25, 0x2C3B
   16f4a:	a0 e0       	ldi	r26, 0x00	; 0
   16f4c:	b0 e0       	ldi	r27, 0x00	; 0
   16f4e:	4c 01       	movw	r8, r24
   16f50:	5d 01       	movw	r10, r26
   16f52:	c4 50       	subi	r28, 0x04	; 4
   16f54:	de 4f       	sbci	r29, 0xFE	; 254
   16f56:	e8 80       	ld	r14, Y
   16f58:	f9 80       	ldd	r15, Y+1	; 0x01
   16f5a:	0a 81       	ldd	r16, Y+2	; 0x02
   16f5c:	1b 81       	ldd	r17, Y+3	; 0x03
   16f5e:	cc 5f       	subi	r28, 0xFC	; 252
   16f60:	d1 40       	sbci	r29, 0x01	; 1
   16f62:	8e 18       	sub	r8, r14
   16f64:	9f 08       	sbc	r9, r15
   16f66:	a0 0a       	sbc	r10, r16
   16f68:	b1 0a       	sbc	r11, r17
   16f6a:	2f ef       	ldi	r18, 0xFF	; 255
   16f6c:	c2 2e       	mov	r12, r18
   16f6e:	2f e3       	ldi	r18, 0x3F	; 63
   16f70:	d2 2e       	mov	r13, r18
   16f72:	e1 2c       	mov	r14, r1
   16f74:	f1 2c       	mov	r15, r1
   16f76:	97 01       	movw	r18, r14
   16f78:	86 01       	movw	r16, r12
   16f7a:	08 1b       	sub	r16, r24
   16f7c:	19 0b       	sbc	r17, r25
   16f7e:	2a 0b       	sbc	r18, r26
   16f80:	3b 0b       	sbc	r19, r27
   16f82:	80 91 69 23 	lds	r24, 0x2369
   16f86:	90 91 6a 23 	lds	r25, 0x236A
   16f8a:	a0 e0       	ldi	r26, 0x00	; 0
   16f8c:	b0 e0       	ldi	r27, 0x00	; 0
   16f8e:	08 1b       	sub	r16, r24
   16f90:	19 0b       	sbc	r17, r25
   16f92:	2a 0b       	sbc	r18, r26
   16f94:	3b 0b       	sbc	r19, r27
   16f96:	c6 51       	subi	r28, 0x16	; 22
   16f98:	de 4f       	sbci	r29, 0xFE	; 254
   16f9a:	08 83       	st	Y, r16
   16f9c:	19 83       	std	Y+1, r17	; 0x01
   16f9e:	2a 83       	std	Y+2, r18	; 0x02
   16fa0:	3b 83       	std	Y+3, r19	; 0x03
   16fa2:	ca 5e       	subi	r28, 0xEA	; 234
   16fa4:	d1 40       	sbci	r29, 0x01	; 1
   16fa6:	cb 5f       	subi	r28, 0xFB	; 251
   16fa8:	dd 4f       	sbci	r29, 0xFD	; 253
   16faa:	48 80       	ld	r4, Y
   16fac:	59 80       	ldd	r5, Y+1	; 0x01
   16fae:	6a 80       	ldd	r6, Y+2	; 0x02
   16fb0:	7b 80       	ldd	r7, Y+3	; 0x03
   16fb2:	c5 50       	subi	r28, 0x05	; 5
   16fb4:	d2 40       	sbci	r29, 0x02	; 2
   16fb6:	48 0c       	add	r4, r8
   16fb8:	59 1c       	adc	r5, r9
   16fba:	6a 1c       	adc	r6, r10
   16fbc:	7b 1c       	adc	r7, r11
   16fbe:	c3 01       	movw	r24, r6
   16fc0:	b2 01       	movw	r22, r4
   16fc2:	24 e6       	ldi	r18, 0x64	; 100
   16fc4:	30 e0       	ldi	r19, 0x00	; 0
   16fc6:	40 e0       	ldi	r20, 0x00	; 0
   16fc8:	50 e0       	ldi	r21, 0x00	; 0
   16fca:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   16fce:	c6 5f       	subi	r28, 0xF6	; 246
   16fd0:	dd 4f       	sbci	r29, 0xFD	; 253
   16fd2:	68 83       	st	Y, r22
   16fd4:	79 83       	std	Y+1, r23	; 0x01
   16fd6:	8a 83       	std	Y+2, r24	; 0x02
   16fd8:	9b 83       	std	Y+3, r25	; 0x03
   16fda:	ca 50       	subi	r28, 0x0A	; 10
   16fdc:	d2 40       	sbci	r29, 0x02	; 2
   16fde:	a7 01       	movw	r20, r14
   16fe0:	96 01       	movw	r18, r12
   16fe2:	cc 50       	subi	r28, 0x0C	; 12
   16fe4:	de 4f       	sbci	r29, 0xFE	; 254
   16fe6:	68 81       	ld	r22, Y
   16fe8:	79 81       	ldd	r23, Y+1	; 0x01
   16fea:	8a 81       	ldd	r24, Y+2	; 0x02
   16fec:	9b 81       	ldd	r25, Y+3	; 0x03
   16fee:	c4 5f       	subi	r28, 0xF4	; 244
   16ff0:	d1 40       	sbci	r29, 0x01	; 1
   16ff2:	26 1b       	sub	r18, r22
   16ff4:	37 0b       	sbc	r19, r23
   16ff6:	48 0b       	sbc	r20, r24
   16ff8:	59 0b       	sbc	r21, r25
   16ffa:	c6 5f       	subi	r28, 0xF6	; 246
   16ffc:	dd 4f       	sbci	r29, 0xFD	; 253
   16ffe:	68 81       	ld	r22, Y
   17000:	79 81       	ldd	r23, Y+1	; 0x01
   17002:	8a 81       	ldd	r24, Y+2	; 0x02
   17004:	9b 81       	ldd	r25, Y+3	; 0x03
   17006:	ca 50       	subi	r28, 0x0A	; 10
   17008:	d2 40       	sbci	r29, 0x02	; 2
   1700a:	0e 94 62 fa 	call	0x1f4c4	; 0x1f4c4 <__divmodsi4>
   1700e:	69 01       	movw	r12, r18
   17010:	7a 01       	movw	r14, r20
   17012:	00 d0       	rcall	.+0      	; 0x17014 <arb_console+0x8fe>
   17014:	0f 92       	push	r0
   17016:	8e 01       	movw	r16, r28
   17018:	04 54       	subi	r16, 0x44	; 68
   1701a:	1f 4f       	sbci	r17, 0xFF	; 255
   1701c:	ad b7       	in	r26, 0x3d	; 61
   1701e:	be b7       	in	r27, 0x3e	; 62
   17020:	11 96       	adiw	r26, 0x01	; 1
   17022:	0d 93       	st	X+, r16
   17024:	1c 93       	st	X, r17
   17026:	12 97       	sbiw	r26, 0x02	; 2
   17028:	81 e4       	ldi	r24, 0x41	; 65
   1702a:	9b e0       	ldi	r25, 0x0B	; 11
   1702c:	13 96       	adiw	r26, 0x03	; 3
   1702e:	8d 93       	st	X+, r24
   17030:	9c 93       	st	X, r25
   17032:	14 97       	sbiw	r26, 0x04	; 4
   17034:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17038:	ac 01       	movw	r20, r24
   1703a:	80 91 a9 2b 	lds	r24, 0x2BA9
   1703e:	90 91 aa 2b 	lds	r25, 0x2BAA
   17042:	0f 90       	pop	r0
   17044:	0f 90       	pop	r0
   17046:	0f 90       	pop	r0
   17048:	0f 90       	pop	r0
   1704a:	b8 01       	movw	r22, r16
   1704c:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17050:	00 d0       	rcall	.+0      	; 0x17052 <arb_console+0x93c>
   17052:	0f 92       	push	r0
   17054:	ed b7       	in	r30, 0x3d	; 61
   17056:	fe b7       	in	r31, 0x3e	; 62
   17058:	01 83       	std	Z+1, r16	; 0x01
   1705a:	12 83       	std	Z+2, r17	; 0x02
   1705c:	8f e6       	ldi	r24, 0x6F	; 111
   1705e:	9b e0       	ldi	r25, 0x0B	; 11
   17060:	83 83       	std	Z+3, r24	; 0x03
   17062:	94 83       	std	Z+4, r25	; 0x04
   17064:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17068:	ac 01       	movw	r20, r24
   1706a:	80 91 a9 2b 	lds	r24, 0x2BA9
   1706e:	90 91 aa 2b 	lds	r25, 0x2BAA
   17072:	0f 90       	pop	r0
   17074:	0f 90       	pop	r0
   17076:	0f 90       	pop	r0
   17078:	0f 90       	pop	r0
   1707a:	b8 01       	movw	r22, r16
   1707c:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17080:	00 d0       	rcall	.+0      	; 0x17082 <arb_console+0x96c>
   17082:	0f 92       	push	r0
   17084:	ad b7       	in	r26, 0x3d	; 61
   17086:	be b7       	in	r27, 0x3e	; 62
   17088:	11 96       	adiw	r26, 0x01	; 1
   1708a:	0d 93       	st	X+, r16
   1708c:	1c 93       	st	X, r17
   1708e:	12 97       	sbiw	r26, 0x02	; 2
   17090:	8d e9       	ldi	r24, 0x9D	; 157
   17092:	9b e0       	ldi	r25, 0x0B	; 11
   17094:	13 96       	adiw	r26, 0x03	; 3
   17096:	8d 93       	st	X+, r24
   17098:	9c 93       	st	X, r25
   1709a:	14 97       	sbiw	r26, 0x04	; 4
   1709c:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   170a0:	ac 01       	movw	r20, r24
   170a2:	80 91 a9 2b 	lds	r24, 0x2BA9
   170a6:	90 91 aa 2b 	lds	r25, 0x2BAA
   170aa:	0f 90       	pop	r0
   170ac:	0f 90       	pop	r0
   170ae:	0f 90       	pop	r0
   170b0:	0f 90       	pop	r0
   170b2:	b8 01       	movw	r22, r16
   170b4:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   170b8:	ed b7       	in	r30, 0x3d	; 61
   170ba:	fe b7       	in	r31, 0x3e	; 62
   170bc:	3a 97       	sbiw	r30, 0x0a	; 10
   170be:	ed bf       	out	0x3d, r30	; 61
   170c0:	fe bf       	out	0x3e, r31	; 62
   170c2:	31 96       	adiw	r30, 0x01	; 1
   170c4:	ad b7       	in	r26, 0x3d	; 61
   170c6:	be b7       	in	r27, 0x3e	; 62
   170c8:	11 96       	adiw	r26, 0x01	; 1
   170ca:	0d 93       	st	X+, r16
   170cc:	1c 93       	st	X, r17
   170ce:	12 97       	sbiw	r26, 0x02	; 2
   170d0:	8b ec       	ldi	r24, 0xCB	; 203
   170d2:	9b e0       	ldi	r25, 0x0B	; 11
   170d4:	82 83       	std	Z+2, r24	; 0x02
   170d6:	93 83       	std	Z+3, r25	; 0x03
   170d8:	20 e0       	ldi	r18, 0x00	; 0
   170da:	30 e2       	ldi	r19, 0x20	; 32
   170dc:	24 83       	std	Z+4, r18	; 0x04
   170de:	35 83       	std	Z+5, r19	; 0x05
   170e0:	c8 50       	subi	r28, 0x08	; 8
   170e2:	de 4f       	sbci	r29, 0xFE	; 254
   170e4:	48 81       	ld	r20, Y
   170e6:	59 81       	ldd	r21, Y+1	; 0x01
   170e8:	6a 81       	ldd	r22, Y+2	; 0x02
   170ea:	7b 81       	ldd	r23, Y+3	; 0x03
   170ec:	c8 5f       	subi	r28, 0xF8	; 248
   170ee:	d1 40       	sbci	r29, 0x01	; 1
   170f0:	46 83       	std	Z+6, r20	; 0x06
   170f2:	57 83       	std	Z+7, r21	; 0x07
   170f4:	60 87       	std	Z+8, r22	; 0x08
   170f6:	71 87       	std	Z+9, r23	; 0x09
   170f8:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   170fc:	ac 01       	movw	r20, r24
   170fe:	80 91 a9 2b 	lds	r24, 0x2BA9
   17102:	90 91 aa 2b 	lds	r25, 0x2BAA
   17106:	6d b7       	in	r22, 0x3d	; 61
   17108:	7e b7       	in	r23, 0x3e	; 62
   1710a:	66 5f       	subi	r22, 0xF6	; 246
   1710c:	7f 4f       	sbci	r23, 0xFF	; 255
   1710e:	6d bf       	out	0x3d, r22	; 61
   17110:	7e bf       	out	0x3e, r23	; 62
   17112:	b8 01       	movw	r22, r16
   17114:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17118:	8d b7       	in	r24, 0x3d	; 61
   1711a:	9e b7       	in	r25, 0x3e	; 62
   1711c:	0a 97       	sbiw	r24, 0x0a	; 10
   1711e:	8d bf       	out	0x3d, r24	; 61
   17120:	9e bf       	out	0x3e, r25	; 62
   17122:	ed b7       	in	r30, 0x3d	; 61
   17124:	fe b7       	in	r31, 0x3e	; 62
   17126:	31 96       	adiw	r30, 0x01	; 1
   17128:	ad b7       	in	r26, 0x3d	; 61
   1712a:	be b7       	in	r27, 0x3e	; 62
   1712c:	11 96       	adiw	r26, 0x01	; 1
   1712e:	0d 93       	st	X+, r16
   17130:	1c 93       	st	X, r17
   17132:	12 97       	sbiw	r26, 0x02	; 2
   17134:	8e ee       	ldi	r24, 0xEE	; 238
   17136:	9b e0       	ldi	r25, 0x0B	; 11
   17138:	82 83       	std	Z+2, r24	; 0x02
   1713a:	93 83       	std	Z+3, r25	; 0x03
   1713c:	28 ed       	ldi	r18, 0xD8	; 216
   1713e:	33 e2       	ldi	r19, 0x23	; 35
   17140:	24 83       	std	Z+4, r18	; 0x04
   17142:	35 83       	std	Z+5, r19	; 0x05
   17144:	c0 50       	subi	r28, 0x00	; 0
   17146:	de 4f       	sbci	r29, 0xFE	; 254
   17148:	48 81       	ld	r20, Y
   1714a:	59 81       	ldd	r21, Y+1	; 0x01
   1714c:	6a 81       	ldd	r22, Y+2	; 0x02
   1714e:	7b 81       	ldd	r23, Y+3	; 0x03
   17150:	c0 50       	subi	r28, 0x00	; 0
   17152:	d2 40       	sbci	r29, 0x02	; 2
   17154:	46 83       	std	Z+6, r20	; 0x06
   17156:	57 83       	std	Z+7, r21	; 0x07
   17158:	60 87       	std	Z+8, r22	; 0x08
   1715a:	71 87       	std	Z+9, r23	; 0x09
   1715c:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17160:	ac 01       	movw	r20, r24
   17162:	80 91 a9 2b 	lds	r24, 0x2BA9
   17166:	90 91 aa 2b 	lds	r25, 0x2BAA
   1716a:	6d b7       	in	r22, 0x3d	; 61
   1716c:	7e b7       	in	r23, 0x3e	; 62
   1716e:	66 5f       	subi	r22, 0xF6	; 246
   17170:	7f 4f       	sbci	r23, 0xFF	; 255
   17172:	6d bf       	out	0x3d, r22	; 61
   17174:	7e bf       	out	0x3e, r23	; 62
   17176:	b8 01       	movw	r22, r16
   17178:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1717c:	8d b7       	in	r24, 0x3d	; 61
   1717e:	9e b7       	in	r25, 0x3e	; 62
   17180:	0a 97       	sbiw	r24, 0x0a	; 10
   17182:	8d bf       	out	0x3d, r24	; 61
   17184:	9e bf       	out	0x3e, r25	; 62
   17186:	ed b7       	in	r30, 0x3d	; 61
   17188:	fe b7       	in	r31, 0x3e	; 62
   1718a:	31 96       	adiw	r30, 0x01	; 1
   1718c:	ad b7       	in	r26, 0x3d	; 61
   1718e:	be b7       	in	r27, 0x3e	; 62
   17190:	11 96       	adiw	r26, 0x01	; 1
   17192:	0d 93       	st	X+, r16
   17194:	1c 93       	st	X, r17
   17196:	12 97       	sbiw	r26, 0x02	; 2
   17198:	81 e1       	ldi	r24, 0x11	; 17
   1719a:	9c e0       	ldi	r25, 0x0C	; 12
   1719c:	82 83       	std	Z+2, r24	; 0x02
   1719e:	93 83       	std	Z+3, r25	; 0x03
   171a0:	2e e3       	ldi	r18, 0x3E	; 62
   171a2:	3c e2       	ldi	r19, 0x2C	; 44
   171a4:	24 83       	std	Z+4, r18	; 0x04
   171a6:	35 83       	std	Z+5, r19	; 0x05
   171a8:	86 82       	std	Z+6, r8	; 0x06
   171aa:	97 82       	std	Z+7, r9	; 0x07
   171ac:	a0 86       	std	Z+8, r10	; 0x08
   171ae:	b1 86       	std	Z+9, r11	; 0x09
   171b0:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   171b4:	ac 01       	movw	r20, r24
   171b6:	80 91 a9 2b 	lds	r24, 0x2BA9
   171ba:	90 91 aa 2b 	lds	r25, 0x2BAA
   171be:	6d b7       	in	r22, 0x3d	; 61
   171c0:	7e b7       	in	r23, 0x3e	; 62
   171c2:	66 5f       	subi	r22, 0xF6	; 246
   171c4:	7f 4f       	sbci	r23, 0xFF	; 255
   171c6:	6d bf       	out	0x3d, r22	; 61
   171c8:	7e bf       	out	0x3e, r23	; 62
   171ca:	b8 01       	movw	r22, r16
   171cc:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   171d0:	00 d0       	rcall	.+0      	; 0x171d2 <arb_console+0xabc>
   171d2:	0f 92       	push	r0
   171d4:	ad b7       	in	r26, 0x3d	; 61
   171d6:	be b7       	in	r27, 0x3e	; 62
   171d8:	11 96       	adiw	r26, 0x01	; 1
   171da:	0d 93       	st	X+, r16
   171dc:	1c 93       	st	X, r17
   171de:	12 97       	sbiw	r26, 0x02	; 2
   171e0:	84 e3       	ldi	r24, 0x34	; 52
   171e2:	9c e0       	ldi	r25, 0x0C	; 12
   171e4:	13 96       	adiw	r26, 0x03	; 3
   171e6:	8d 93       	st	X+, r24
   171e8:	9c 93       	st	X, r25
   171ea:	14 97       	sbiw	r26, 0x04	; 4
   171ec:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   171f0:	ac 01       	movw	r20, r24
   171f2:	80 91 a9 2b 	lds	r24, 0x2BA9
   171f6:	90 91 aa 2b 	lds	r25, 0x2BAA
   171fa:	0f 90       	pop	r0
   171fc:	0f 90       	pop	r0
   171fe:	0f 90       	pop	r0
   17200:	0f 90       	pop	r0
   17202:	b8 01       	movw	r22, r16
   17204:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17208:	ed b7       	in	r30, 0x3d	; 61
   1720a:	fe b7       	in	r31, 0x3e	; 62
   1720c:	38 97       	sbiw	r30, 0x08	; 8
   1720e:	ed bf       	out	0x3d, r30	; 61
   17210:	fe bf       	out	0x3e, r31	; 62
   17212:	31 96       	adiw	r30, 0x01	; 1
   17214:	ad b7       	in	r26, 0x3d	; 61
   17216:	be b7       	in	r27, 0x3e	; 62
   17218:	11 96       	adiw	r26, 0x01	; 1
   1721a:	0d 93       	st	X+, r16
   1721c:	1c 93       	st	X, r17
   1721e:	12 97       	sbiw	r26, 0x02	; 2
   17220:	82 e6       	ldi	r24, 0x62	; 98
   17222:	9c e0       	ldi	r25, 0x0C	; 12
   17224:	82 83       	std	Z+2, r24	; 0x02
   17226:	93 83       	std	Z+3, r25	; 0x03
   17228:	44 82       	std	Z+4, r4	; 0x04
   1722a:	55 82       	std	Z+5, r5	; 0x05
   1722c:	66 82       	std	Z+6, r6	; 0x06
   1722e:	77 82       	std	Z+7, r7	; 0x07
   17230:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17234:	ac 01       	movw	r20, r24
   17236:	80 91 a9 2b 	lds	r24, 0x2BA9
   1723a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1723e:	ed b7       	in	r30, 0x3d	; 61
   17240:	fe b7       	in	r31, 0x3e	; 62
   17242:	38 96       	adiw	r30, 0x08	; 8
   17244:	ed bf       	out	0x3d, r30	; 61
   17246:	fe bf       	out	0x3e, r31	; 62
   17248:	b8 01       	movw	r22, r16
   1724a:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1724e:	2d b7       	in	r18, 0x3d	; 61
   17250:	3e b7       	in	r19, 0x3e	; 62
   17252:	28 50       	subi	r18, 0x08	; 8
   17254:	30 40       	sbci	r19, 0x00	; 0
   17256:	2d bf       	out	0x3d, r18	; 61
   17258:	3e bf       	out	0x3e, r19	; 62
   1725a:	ed b7       	in	r30, 0x3d	; 61
   1725c:	fe b7       	in	r31, 0x3e	; 62
   1725e:	31 96       	adiw	r30, 0x01	; 1
   17260:	ad b7       	in	r26, 0x3d	; 61
   17262:	be b7       	in	r27, 0x3e	; 62
   17264:	11 96       	adiw	r26, 0x01	; 1
   17266:	0d 93       	st	X+, r16
   17268:	1c 93       	st	X, r17
   1726a:	12 97       	sbiw	r26, 0x02	; 2
   1726c:	87 e8       	ldi	r24, 0x87	; 135
   1726e:	9c e0       	ldi	r25, 0x0C	; 12
   17270:	82 83       	std	Z+2, r24	; 0x02
   17272:	93 83       	std	Z+3, r25	; 0x03
   17274:	c4 82       	std	Z+4, r12	; 0x04
   17276:	d5 82       	std	Z+5, r13	; 0x05
   17278:	e6 82       	std	Z+6, r14	; 0x06
   1727a:	f7 82       	std	Z+7, r15	; 0x07
   1727c:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17280:	ac 01       	movw	r20, r24
   17282:	80 91 a9 2b 	lds	r24, 0x2BA9
   17286:	90 91 aa 2b 	lds	r25, 0x2BAA
   1728a:	ed b7       	in	r30, 0x3d	; 61
   1728c:	fe b7       	in	r31, 0x3e	; 62
   1728e:	38 96       	adiw	r30, 0x08	; 8
   17290:	ed bf       	out	0x3d, r30	; 61
   17292:	fe bf       	out	0x3e, r31	; 62
   17294:	b8 01       	movw	r22, r16
   17296:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1729a:	00 d0       	rcall	.+0      	; 0x1729c <arb_console+0xb86>
   1729c:	0f 92       	push	r0
   1729e:	ad b7       	in	r26, 0x3d	; 61
   172a0:	be b7       	in	r27, 0x3e	; 62
   172a2:	11 96       	adiw	r26, 0x01	; 1
   172a4:	0d 93       	st	X+, r16
   172a6:	1c 93       	st	X, r17
   172a8:	12 97       	sbiw	r26, 0x02	; 2
   172aa:	8e ea       	ldi	r24, 0xAE	; 174
   172ac:	9c e0       	ldi	r25, 0x0C	; 12
   172ae:	13 96       	adiw	r26, 0x03	; 3
   172b0:	8d 93       	st	X+, r24
   172b2:	9c 93       	st	X, r25
   172b4:	14 97       	sbiw	r26, 0x04	; 4
   172b6:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   172ba:	ac 01       	movw	r20, r24
   172bc:	80 91 a9 2b 	lds	r24, 0x2BA9
   172c0:	90 91 aa 2b 	lds	r25, 0x2BAA
   172c4:	0f 90       	pop	r0
   172c6:	0f 90       	pop	r0
   172c8:	0f 90       	pop	r0
   172ca:	0f 90       	pop	r0
   172cc:	b8 01       	movw	r22, r16
   172ce:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   172d2:	ed b7       	in	r30, 0x3d	; 61
   172d4:	fe b7       	in	r31, 0x3e	; 62
   172d6:	38 97       	sbiw	r30, 0x08	; 8
   172d8:	ed bf       	out	0x3d, r30	; 61
   172da:	fe bf       	out	0x3e, r31	; 62
   172dc:	31 96       	adiw	r30, 0x01	; 1
   172de:	ad b7       	in	r26, 0x3d	; 61
   172e0:	be b7       	in	r27, 0x3e	; 62
   172e2:	11 96       	adiw	r26, 0x01	; 1
   172e4:	0d 93       	st	X+, r16
   172e6:	1c 93       	st	X, r17
   172e8:	12 97       	sbiw	r26, 0x02	; 2
   172ea:	8c ed       	ldi	r24, 0xDC	; 220
   172ec:	9c e0       	ldi	r25, 0x0C	; 12
   172ee:	82 83       	std	Z+2, r24	; 0x02
   172f0:	93 83       	std	Z+3, r25	; 0x03
   172f2:	c6 51       	subi	r28, 0x16	; 22
   172f4:	de 4f       	sbci	r29, 0xFE	; 254
   172f6:	28 81       	ld	r18, Y
   172f8:	39 81       	ldd	r19, Y+1	; 0x01
   172fa:	4a 81       	ldd	r20, Y+2	; 0x02
   172fc:	5b 81       	ldd	r21, Y+3	; 0x03
   172fe:	ca 5e       	subi	r28, 0xEA	; 234
   17300:	d1 40       	sbci	r29, 0x01	; 1
   17302:	24 83       	std	Z+4, r18	; 0x04
   17304:	35 83       	std	Z+5, r19	; 0x05
   17306:	46 83       	std	Z+6, r20	; 0x06
   17308:	57 83       	std	Z+7, r21	; 0x07
   1730a:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   1730e:	ac 01       	movw	r20, r24
   17310:	80 91 a9 2b 	lds	r24, 0x2BA9
   17314:	90 91 aa 2b 	lds	r25, 0x2BAA
   17318:	6d b7       	in	r22, 0x3d	; 61
   1731a:	7e b7       	in	r23, 0x3e	; 62
   1731c:	68 5f       	subi	r22, 0xF8	; 248
   1731e:	7f 4f       	sbci	r23, 0xFF	; 255
   17320:	6d bf       	out	0x3d, r22	; 61
   17322:	7e bf       	out	0x3e, r23	; 62
   17324:	b8 01       	movw	r22, r16
   17326:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1732a:	8d b7       	in	r24, 0x3d	; 61
   1732c:	9e b7       	in	r25, 0x3e	; 62
   1732e:	08 97       	sbiw	r24, 0x08	; 8
   17330:	8d bf       	out	0x3d, r24	; 61
   17332:	9e bf       	out	0x3e, r25	; 62
   17334:	ed b7       	in	r30, 0x3d	; 61
   17336:	fe b7       	in	r31, 0x3e	; 62
   17338:	31 96       	adiw	r30, 0x01	; 1
   1733a:	ad b7       	in	r26, 0x3d	; 61
   1733c:	be b7       	in	r27, 0x3e	; 62
   1733e:	11 96       	adiw	r26, 0x01	; 1
   17340:	0d 93       	st	X+, r16
   17342:	1c 93       	st	X, r17
   17344:	12 97       	sbiw	r26, 0x02	; 2
   17346:	81 e0       	ldi	r24, 0x01	; 1
   17348:	9d e0       	ldi	r25, 0x0D	; 13
   1734a:	82 83       	std	Z+2, r24	; 0x02
   1734c:	93 83       	std	Z+3, r25	; 0x03
   1734e:	84 e6       	ldi	r24, 0x64	; 100
   17350:	90 e0       	ldi	r25, 0x00	; 0
   17352:	a0 e0       	ldi	r26, 0x00	; 0
   17354:	b0 e0       	ldi	r27, 0x00	; 0
   17356:	8c 19       	sub	r24, r12
   17358:	9d 09       	sbc	r25, r13
   1735a:	ae 09       	sbc	r26, r14
   1735c:	bf 09       	sbc	r27, r15
   1735e:	84 83       	std	Z+4, r24	; 0x04
   17360:	95 83       	std	Z+5, r25	; 0x05
   17362:	a6 83       	std	Z+6, r26	; 0x06
   17364:	b7 83       	std	Z+7, r27	; 0x07
   17366:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   1736a:	ac 01       	movw	r20, r24
   1736c:	80 91 a9 2b 	lds	r24, 0x2BA9
   17370:	90 91 aa 2b 	lds	r25, 0x2BAA
   17374:	ed b7       	in	r30, 0x3d	; 61
   17376:	fe b7       	in	r31, 0x3e	; 62
   17378:	38 96       	adiw	r30, 0x08	; 8
   1737a:	ed bf       	out	0x3d, r30	; 61
   1737c:	fe bf       	out	0x3e, r31	; 62
   1737e:	b8 01       	movw	r22, r16
   17380:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17384:	00 d0       	rcall	.+0      	; 0x17386 <arb_console+0xc70>
   17386:	0f 92       	push	r0
   17388:	ad b7       	in	r26, 0x3d	; 61
   1738a:	be b7       	in	r27, 0x3e	; 62
   1738c:	11 96       	adiw	r26, 0x01	; 1
   1738e:	0d 93       	st	X+, r16
   17390:	1c 93       	st	X, r17
   17392:	12 97       	sbiw	r26, 0x02	; 2
   17394:	88 e2       	ldi	r24, 0x28	; 40
   17396:	9d e0       	ldi	r25, 0x0D	; 13
   17398:	13 96       	adiw	r26, 0x03	; 3
   1739a:	8d 93       	st	X+, r24
   1739c:	9c 93       	st	X, r25
   1739e:	14 97       	sbiw	r26, 0x04	; 4
   173a0:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   173a4:	ac 01       	movw	r20, r24
   173a6:	80 91 a9 2b 	lds	r24, 0x2BA9
   173aa:	90 91 aa 2b 	lds	r25, 0x2BAA
   173ae:	0f 90       	pop	r0
   173b0:	0f 90       	pop	r0
   173b2:	0f 90       	pop	r0
   173b4:	0f 90       	pop	r0
   173b6:	b8 01       	movw	r22, r16
   173b8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   173bc:	0e 94 16 c8 	call	0x1902c	; 0x1902c <arb_getOneMinLoadingEst>
   173c0:	ed b7       	in	r30, 0x3d	; 61
   173c2:	fe b7       	in	r31, 0x3e	; 62
   173c4:	38 97       	sbiw	r30, 0x08	; 8
   173c6:	ed bf       	out	0x3d, r30	; 61
   173c8:	fe bf       	out	0x3e, r31	; 62
   173ca:	ed b6       	in	r14, 0x3d	; 61
   173cc:	fe b6       	in	r15, 0x3e	; 62
   173ce:	08 94       	sec
   173d0:	e1 1c       	adc	r14, r1
   173d2:	f1 1c       	adc	r15, r1
   173d4:	01 83       	std	Z+1, r16	; 0x01
   173d6:	12 83       	std	Z+2, r17	; 0x02
   173d8:	26 e5       	ldi	r18, 0x56	; 86
   173da:	3d e0       	ldi	r19, 0x0D	; 13
   173dc:	d7 01       	movw	r26, r14
   173de:	12 96       	adiw	r26, 0x02	; 2
   173e0:	2d 93       	st	X+, r18
   173e2:	3c 93       	st	X, r19
   173e4:	13 97       	sbiw	r26, 0x03	; 3
   173e6:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   173ea:	20 e0       	ldi	r18, 0x00	; 0
   173ec:	30 e0       	ldi	r19, 0x00	; 0
   173ee:	48 ec       	ldi	r20, 0xC8	; 200
   173f0:	52 e4       	ldi	r21, 0x42	; 66
   173f2:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   173f6:	20 e0       	ldi	r18, 0x00	; 0
   173f8:	30 e0       	ldi	r19, 0x00	; 0
   173fa:	40 e0       	ldi	r20, 0x00	; 0
   173fc:	58 e3       	ldi	r21, 0x38	; 56
   173fe:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   17402:	dc 01       	movw	r26, r24
   17404:	cb 01       	movw	r24, r22
   17406:	f7 01       	movw	r30, r14
   17408:	84 83       	std	Z+4, r24	; 0x04
   1740a:	95 83       	std	Z+5, r25	; 0x05
   1740c:	a6 83       	std	Z+6, r26	; 0x06
   1740e:	b7 83       	std	Z+7, r27	; 0x07
   17410:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17414:	ac 01       	movw	r20, r24
   17416:	80 91 a9 2b 	lds	r24, 0x2BA9
   1741a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1741e:	2d b7       	in	r18, 0x3d	; 61
   17420:	3e b7       	in	r19, 0x3e	; 62
   17422:	28 5f       	subi	r18, 0xF8	; 248
   17424:	3f 4f       	sbci	r19, 0xFF	; 255
   17426:	2d bf       	out	0x3d, r18	; 61
   17428:	3e bf       	out	0x3e, r19	; 62
   1742a:	b8 01       	movw	r22, r16
   1742c:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17430:	00 d0       	rcall	.+0      	; 0x17432 <arb_console+0xd1c>
   17432:	0f 92       	push	r0
   17434:	ad b7       	in	r26, 0x3d	; 61
   17436:	be b7       	in	r27, 0x3e	; 62
   17438:	11 96       	adiw	r26, 0x01	; 1
   1743a:	0d 93       	st	X+, r16
   1743c:	1c 93       	st	X, r17
   1743e:	12 97       	sbiw	r26, 0x02	; 2
   17440:	8f e7       	ldi	r24, 0x7F	; 127
   17442:	9d e0       	ldi	r25, 0x0D	; 13
   17444:	13 96       	adiw	r26, 0x03	; 3
   17446:	8d 93       	st	X+, r24
   17448:	9c 93       	st	X, r25
   1744a:	14 97       	sbiw	r26, 0x04	; 4
   1744c:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   17450:	ac 01       	movw	r20, r24
   17452:	80 91 a9 2b 	lds	r24, 0x2BA9
   17456:	90 91 aa 2b 	lds	r25, 0x2BAA
   1745a:	0f 90       	pop	r0
   1745c:	0f 90       	pop	r0
   1745e:	0f 90       	pop	r0
   17460:	0f 90       	pop	r0
   17462:	b8 01       	movw	r22, r16
   17464:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17468:	0e 94 1f c8 	call	0x1903e	; 0x1903e <arb_getFiveMinLoadingEst>
   1746c:	ed b7       	in	r30, 0x3d	; 61
   1746e:	fe b7       	in	r31, 0x3e	; 62
   17470:	38 97       	sbiw	r30, 0x08	; 8
   17472:	ed bf       	out	0x3d, r30	; 61
   17474:	fe bf       	out	0x3e, r31	; 62
   17476:	ed b6       	in	r14, 0x3d	; 61
   17478:	fe b6       	in	r15, 0x3e	; 62
   1747a:	08 94       	sec
   1747c:	e1 1c       	adc	r14, r1
   1747e:	f1 1c       	adc	r15, r1
   17480:	01 83       	std	Z+1, r16	; 0x01
   17482:	12 83       	std	Z+2, r17	; 0x02
   17484:	2d ea       	ldi	r18, 0xAD	; 173
   17486:	3d e0       	ldi	r19, 0x0D	; 13
   17488:	d7 01       	movw	r26, r14
   1748a:	12 96       	adiw	r26, 0x02	; 2
   1748c:	2d 93       	st	X+, r18
   1748e:	3c 93       	st	X, r19
   17490:	13 97       	sbiw	r26, 0x03	; 3
   17492:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   17496:	20 e0       	ldi	r18, 0x00	; 0
   17498:	30 e0       	ldi	r19, 0x00	; 0
   1749a:	48 ec       	ldi	r20, 0xC8	; 200
   1749c:	52 e4       	ldi	r21, 0x42	; 66
   1749e:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   174a2:	20 e0       	ldi	r18, 0x00	; 0
   174a4:	30 e0       	ldi	r19, 0x00	; 0
   174a6:	40 e0       	ldi	r20, 0x00	; 0
   174a8:	58 e3       	ldi	r21, 0x38	; 56
   174aa:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   174ae:	dc 01       	movw	r26, r24
   174b0:	cb 01       	movw	r24, r22
   174b2:	f7 01       	movw	r30, r14
   174b4:	84 83       	std	Z+4, r24	; 0x04
   174b6:	95 83       	std	Z+5, r25	; 0x05
   174b8:	a6 83       	std	Z+6, r26	; 0x06
   174ba:	b7 83       	std	Z+7, r27	; 0x07
   174bc:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   174c0:	ac 01       	movw	r20, r24
   174c2:	80 91 a9 2b 	lds	r24, 0x2BA9
   174c6:	90 91 aa 2b 	lds	r25, 0x2BAA
   174ca:	2d b7       	in	r18, 0x3d	; 61
   174cc:	3e b7       	in	r19, 0x3e	; 62
   174ce:	28 5f       	subi	r18, 0xF8	; 248
   174d0:	3f 4f       	sbci	r19, 0xFF	; 255
   174d2:	2d bf       	out	0x3d, r18	; 61
   174d4:	3e bf       	out	0x3e, r19	; 62
   174d6:	b8 01       	movw	r22, r16
   174d8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   174dc:	00 d0       	rcall	.+0      	; 0x174de <arb_console+0xdc8>
   174de:	0f 92       	push	r0
   174e0:	ad b7       	in	r26, 0x3d	; 61
   174e2:	be b7       	in	r27, 0x3e	; 62
   174e4:	11 96       	adiw	r26, 0x01	; 1
   174e6:	0d 93       	st	X+, r16
   174e8:	1c 93       	st	X, r17
   174ea:	12 97       	sbiw	r26, 0x02	; 2
   174ec:	86 ed       	ldi	r24, 0xD6	; 214
   174ee:	9d e0       	ldi	r25, 0x0D	; 13
   174f0:	00 c2       	rjmp	.+1024   	; 0x178f2 <arb_console+0x11dc>
   174f2:	ce 01       	movw	r24, r28
   174f4:	85 5b       	subi	r24, 0xB5	; 181
   174f6:	9f 4f       	sbci	r25, 0xFF	; 255
   174f8:	68 ee       	ldi	r22, 0xE8	; 232
   174fa:	74 e0       	ldi	r23, 0x04	; 4
   174fc:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   17500:	00 97       	sbiw	r24, 0x00	; 0
   17502:	71 f4       	brne	.+28     	; 0x17520 <arb_console+0xe0a>
   17504:	c5 54       	subi	r28, 0x45	; 69
   17506:	df 4f       	sbci	r29, 0xFF	; 255
   17508:	88 81       	ld	r24, Y
   1750a:	cb 5b       	subi	r28, 0xBB	; 187
   1750c:	d0 40       	sbci	r29, 0x00	; 0
   1750e:	81 30       	cpi	r24, 0x01	; 1
   17510:	39 f4       	brne	.+14     	; 0x17520 <arb_console+0xe0a>
   17512:	80 91 ab 2b 	lds	r24, 0x2BAB
   17516:	90 91 ac 2b 	lds	r25, 0x2BAC
   1751a:	65 e0       	ldi	r22, 0x05	; 5
   1751c:	70 e0       	ldi	r23, 0x00	; 0
   1751e:	23 c0       	rjmp	.+70     	; 0x17566 <arb_console+0xe50>
   17520:	ce 01       	movw	r24, r28
   17522:	85 5b       	subi	r24, 0xB5	; 181
   17524:	9f 4f       	sbci	r25, 0xFF	; 255
   17526:	6b ee       	ldi	r22, 0xEB	; 235
   17528:	74 e0       	ldi	r23, 0x04	; 4
   1752a:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   1752e:	00 97       	sbiw	r24, 0x00	; 0
   17530:	51 f5       	brne	.+84     	; 0x17586 <arb_console+0xe70>
   17532:	c5 54       	subi	r28, 0x45	; 69
   17534:	df 4f       	sbci	r29, 0xFF	; 255
   17536:	88 81       	ld	r24, Y
   17538:	cb 5b       	subi	r28, 0xBB	; 187
   1753a:	d0 40       	sbci	r29, 0x00	; 0
   1753c:	82 30       	cpi	r24, 0x02	; 2
   1753e:	19 f5       	brne	.+70     	; 0x17586 <arb_console+0xe70>
   17540:	0b e4       	ldi	r16, 0x4B	; 75
   17542:	10 e0       	ldi	r17, 0x00	; 0
   17544:	0c 0f       	add	r16, r28
   17546:	1d 1f       	adc	r17, r29
   17548:	00 5f       	subi	r16, 0xF0	; 240
   1754a:	1f 4f       	sbci	r17, 0xFF	; 255
   1754c:	c8 01       	movw	r24, r16
   1754e:	6e ee       	ldi	r22, 0xEE	; 238
   17550:	74 e0       	ldi	r23, 0x04	; 4
   17552:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   17556:	00 97       	sbiw	r24, 0x00	; 0
   17558:	61 f4       	brne	.+24     	; 0x17572 <arb_console+0xe5c>
   1755a:	80 91 ab 2b 	lds	r24, 0x2BAB
   1755e:	90 91 ac 2b 	lds	r25, 0x2BAC
   17562:	61 e0       	ldi	r22, 0x01	; 1
   17564:	70 e0       	ldi	r23, 0x00	; 0
   17566:	20 e0       	ldi	r18, 0x00	; 0
   17568:	30 e0       	ldi	r19, 0x00	; 0
   1756a:	a9 01       	movw	r20, r18
   1756c:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   17570:	d2 c1       	rjmp	.+932    	; 0x17916 <arb_console+0x1200>
   17572:	80 91 ab 2b 	lds	r24, 0x2BAB
   17576:	90 91 ac 2b 	lds	r25, 0x2BAC
   1757a:	98 01       	movw	r18, r16
   1757c:	40 e0       	ldi	r20, 0x00	; 0
   1757e:	50 e0       	ldi	r21, 0x00	; 0
   17580:	68 e0       	ldi	r22, 0x08	; 8
   17582:	70 e0       	ldi	r23, 0x00	; 0
   17584:	f3 cf       	rjmp	.-26     	; 0x1756c <arb_console+0xe56>
   17586:	ce 01       	movw	r24, r28
   17588:	85 5b       	subi	r24, 0xB5	; 181
   1758a:	9f 4f       	sbci	r25, 0xFF	; 255
   1758c:	61 ef       	ldi	r22, 0xF1	; 241
   1758e:	74 e0       	ldi	r23, 0x04	; 4
   17590:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   17594:	00 97       	sbiw	r24, 0x00	; 0
   17596:	b1 f4       	brne	.+44     	; 0x175c4 <arb_console+0xeae>
   17598:	c5 54       	subi	r28, 0x45	; 69
   1759a:	df 4f       	sbci	r29, 0xFF	; 255
   1759c:	88 81       	ld	r24, Y
   1759e:	cb 5b       	subi	r28, 0xBB	; 187
   175a0:	d0 40       	sbci	r29, 0x00	; 0
   175a2:	82 30       	cpi	r24, 0x02	; 2
   175a4:	79 f4       	brne	.+30     	; 0x175c4 <arb_console+0xeae>
   175a6:	80 91 ab 2b 	lds	r24, 0x2BAB
   175aa:	90 91 ac 2b 	lds	r25, 0x2BAC
   175ae:	67 e0       	ldi	r22, 0x07	; 7
   175b0:	70 e0       	ldi	r23, 0x00	; 0
   175b2:	c2 51       	subi	r28, 0x12	; 18
   175b4:	de 4f       	sbci	r29, 0xFE	; 254
   175b6:	28 81       	ld	r18, Y
   175b8:	39 81       	ldd	r19, Y+1	; 0x01
   175ba:	4a 81       	ldd	r20, Y+2	; 0x02
   175bc:	5b 81       	ldd	r21, Y+3	; 0x03
   175be:	ce 5e       	subi	r28, 0xEE	; 238
   175c0:	d1 40       	sbci	r29, 0x01	; 1
   175c2:	d4 cf       	rjmp	.-88     	; 0x1756c <arb_console+0xe56>
   175c4:	ce 01       	movw	r24, r28
   175c6:	85 5b       	subi	r24, 0xB5	; 181
   175c8:	9f 4f       	sbci	r25, 0xFF	; 255
   175ca:	67 ef       	ldi	r22, 0xF7	; 247
   175cc:	74 e0       	ldi	r23, 0x04	; 4
   175ce:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   175d2:	00 97       	sbiw	r24, 0x00	; 0
   175d4:	b1 f4       	brne	.+44     	; 0x17602 <arb_console+0xeec>
   175d6:	c5 54       	subi	r28, 0x45	; 69
   175d8:	df 4f       	sbci	r29, 0xFF	; 255
   175da:	88 81       	ld	r24, Y
   175dc:	cb 5b       	subi	r28, 0xBB	; 187
   175de:	d0 40       	sbci	r29, 0x00	; 0
   175e0:	82 30       	cpi	r24, 0x02	; 2
   175e2:	79 f4       	brne	.+30     	; 0x17602 <arb_console+0xeec>
   175e4:	80 91 ab 2b 	lds	r24, 0x2BAB
   175e8:	90 91 ac 2b 	lds	r25, 0x2BAC
   175ec:	2b e4       	ldi	r18, 0x4B	; 75
   175ee:	30 e0       	ldi	r19, 0x00	; 0
   175f0:	2c 0f       	add	r18, r28
   175f2:	3d 1f       	adc	r19, r29
   175f4:	20 5f       	subi	r18, 0xF0	; 240
   175f6:	3f 4f       	sbci	r19, 0xFF	; 255
   175f8:	40 e0       	ldi	r20, 0x00	; 0
   175fa:	50 e0       	ldi	r21, 0x00	; 0
   175fc:	66 e0       	ldi	r22, 0x06	; 6
   175fe:	70 e0       	ldi	r23, 0x00	; 0
   17600:	b5 cf       	rjmp	.-150    	; 0x1756c <arb_console+0xe56>
   17602:	ce 01       	movw	r24, r28
   17604:	85 5b       	subi	r24, 0xB5	; 181
   17606:	9f 4f       	sbci	r25, 0xFF	; 255
   17608:	6d ef       	ldi	r22, 0xFD	; 253
   1760a:	74 e0       	ldi	r23, 0x04	; 4
   1760c:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   17610:	00 97       	sbiw	r24, 0x00	; 0
   17612:	09 f0       	breq	.+2      	; 0x17616 <arb_console+0xf00>
   17614:	4d c0       	rjmp	.+154    	; 0x176b0 <arb_console+0xf9a>
   17616:	c5 54       	subi	r28, 0x45	; 69
   17618:	df 4f       	sbci	r29, 0xFF	; 255
   1761a:	88 81       	ld	r24, Y
   1761c:	cb 5b       	subi	r28, 0xBB	; 187
   1761e:	d0 40       	sbci	r29, 0x00	; 0
   17620:	82 30       	cpi	r24, 0x02	; 2
   17622:	09 f0       	breq	.+2      	; 0x17626 <arb_console+0xf10>
   17624:	45 c0       	rjmp	.+138    	; 0x176b0 <arb_console+0xf9a>
   17626:	80 91 ab 2b 	lds	r24, 0x2BAB
   1762a:	90 91 ac 2b 	lds	r25, 0x2BAC
   1762e:	69 e0       	ldi	r22, 0x09	; 9
   17630:	70 e0       	ldi	r23, 0x00	; 0
   17632:	c2 51       	subi	r28, 0x12	; 18
   17634:	de 4f       	sbci	r29, 0xFE	; 254
   17636:	28 81       	ld	r18, Y
   17638:	39 81       	ldd	r19, Y+1	; 0x01
   1763a:	4a 81       	ldd	r20, Y+2	; 0x02
   1763c:	5b 81       	ldd	r21, Y+3	; 0x03
   1763e:	ce 5e       	subi	r28, 0xEE	; 238
   17640:	d1 40       	sbci	r29, 0x01	; 1
   17642:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   17646:	66 23       	and	r22, r22
   17648:	09 f0       	breq	.+2      	; 0x1764c <arb_console+0xf36>
   1764a:	65 c1       	rjmp	.+714    	; 0x17916 <arb_console+0x1200>
   1764c:	80 91 a9 2b 	lds	r24, 0x2BA9
   17650:	90 91 aa 2b 	lds	r25, 0x2BAA
   17654:	65 e0       	ldi	r22, 0x05	; 5
   17656:	70 e0       	ldi	r23, 0x00	; 0
   17658:	c2 51       	subi	r28, 0x12	; 18
   1765a:	de 4f       	sbci	r29, 0xFE	; 254
   1765c:	28 81       	ld	r18, Y
   1765e:	39 81       	ldd	r19, Y+1	; 0x01
   17660:	4a 81       	ldd	r20, Y+2	; 0x02
   17662:	5b 81       	ldd	r21, Y+3	; 0x03
   17664:	ce 5e       	subi	r28, 0xEE	; 238
   17666:	d1 40       	sbci	r29, 0x01	; 1
   17668:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   1766c:	ce 50       	subi	r28, 0x0E	; 14
   1766e:	de 4f       	sbci	r29, 0xFE	; 254
   17670:	88 81       	ld	r24, Y
   17672:	99 81       	ldd	r25, Y+1	; 0x01
   17674:	c2 5f       	subi	r28, 0xF2	; 242
   17676:	d1 40       	sbci	r29, 0x01	; 1
   17678:	60 e0       	ldi	r22, 0x00	; 0
   1767a:	75 e0       	ldi	r23, 0x05	; 5
   1767c:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   17680:	00 97       	sbiw	r24, 0x00	; 0
   17682:	59 f4       	brne	.+22     	; 0x1769a <arb_console+0xf84>
   17684:	80 91 a9 2b 	lds	r24, 0x2BA9
   17688:	90 91 aa 2b 	lds	r25, 0x2BAA
   1768c:	68 e0       	ldi	r22, 0x08	; 8
   1768e:	70 e0       	ldi	r23, 0x00	; 0
   17690:	22 e3       	ldi	r18, 0x32	; 50
   17692:	30 e0       	ldi	r19, 0x00	; 0
   17694:	40 e0       	ldi	r20, 0x00	; 0
   17696:	50 e0       	ldi	r21, 0x00	; 0
   17698:	69 cf       	rjmp	.-302    	; 0x1756c <arb_console+0xe56>
   1769a:	80 91 a9 2b 	lds	r24, 0x2BA9
   1769e:	90 91 aa 2b 	lds	r25, 0x2BAA
   176a2:	68 e0       	ldi	r22, 0x08	; 8
   176a4:	70 e0       	ldi	r23, 0x00	; 0
   176a6:	21 e3       	ldi	r18, 0x31	; 49
   176a8:	30 e0       	ldi	r19, 0x00	; 0
   176aa:	40 e0       	ldi	r20, 0x00	; 0
   176ac:	50 e0       	ldi	r21, 0x00	; 0
   176ae:	5e cf       	rjmp	.-324    	; 0x1756c <arb_console+0xe56>
   176b0:	ce 01       	movw	r24, r28
   176b2:	85 5b       	subi	r24, 0xB5	; 181
   176b4:	9f 4f       	sbci	r25, 0xFF	; 255
   176b6:	62 e0       	ldi	r22, 0x02	; 2
   176b8:	75 e0       	ldi	r23, 0x05	; 5
   176ba:	0e 94 e4 f6 	call	0x1edc8	; 0x1edc8 <strcasecmp_P>
   176be:	00 97       	sbiw	r24, 0x00	; 0
   176c0:	09 f0       	breq	.+2      	; 0x176c4 <arb_console+0xfae>
   176c2:	f9 c0       	rjmp	.+498    	; 0x178b6 <arb_console+0x11a0>
   176c4:	c5 54       	subi	r28, 0x45	; 69
   176c6:	df 4f       	sbci	r29, 0xFF	; 255
   176c8:	88 81       	ld	r24, Y
   176ca:	cb 5b       	subi	r28, 0xBB	; 187
   176cc:	d0 40       	sbci	r29, 0x00	; 0
   176ce:	82 30       	cpi	r24, 0x02	; 2
   176d0:	09 f0       	breq	.+2      	; 0x176d4 <arb_console+0xfbe>
   176d2:	f1 c0       	rjmp	.+482    	; 0x178b6 <arb_console+0x11a0>
   176d4:	19 8e       	std	Y+25, r1	; 0x19
   176d6:	80 91 ab 2b 	lds	r24, 0x2BAB
   176da:	90 91 ac 2b 	lds	r25, 0x2BAC
   176de:	0e 94 64 be 	call	0x17cc8	; 0x17cc8 <arb_getDevName>
   176e2:	ed b7       	in	r30, 0x3d	; 61
   176e4:	fe b7       	in	r31, 0x3e	; 62
   176e6:	38 97       	sbiw	r30, 0x08	; 8
   176e8:	ed bf       	out	0x3d, r30	; 61
   176ea:	fe bf       	out	0x3e, r31	; 62
   176ec:	31 96       	adiw	r30, 0x01	; 1
   176ee:	ac eb       	ldi	r26, 0xBC	; 188
   176f0:	ea 2e       	mov	r14, r26
   176f2:	f1 2c       	mov	r15, r1
   176f4:	ec 0e       	add	r14, r28
   176f6:	fd 1e       	adc	r15, r29
   176f8:	ad b7       	in	r26, 0x3d	; 61
   176fa:	be b7       	in	r27, 0x3e	; 62
   176fc:	11 96       	adiw	r26, 0x01	; 1
   176fe:	ed 92       	st	X+, r14
   17700:	fc 92       	st	X, r15
   17702:	12 97       	sbiw	r26, 0x02	; 2
   17704:	22 e8       	ldi	r18, 0x82	; 130
   17706:	31 e2       	ldi	r19, 0x21	; 33
   17708:	22 83       	std	Z+2, r18	; 0x02
   1770a:	33 83       	std	Z+3, r19	; 0x03
   1770c:	84 83       	std	Z+4, r24	; 0x04
   1770e:	95 83       	std	Z+5, r25	; 0x05
   17710:	8b e4       	ldi	r24, 0x4B	; 75
   17712:	90 e0       	ldi	r25, 0x00	; 0
   17714:	8c 0f       	add	r24, r28
   17716:	9d 1f       	adc	r25, r29
   17718:	40 96       	adiw	r24, 0x10	; 16
   1771a:	86 83       	std	Z+6, r24	; 0x06
   1771c:	97 83       	std	Z+7, r25	; 0x07
   1771e:	0e 94 ba f7 	call	0x1ef74	; 0x1ef74 <sprintf>
   17722:	ed b7       	in	r30, 0x3d	; 61
   17724:	fe b7       	in	r31, 0x3e	; 62
   17726:	38 96       	adiw	r30, 0x08	; 8
   17728:	ed bf       	out	0x3d, r30	; 61
   1772a:	fe bf       	out	0x3e, r31	; 62
   1772c:	c7 01       	movw	r24, r14
   1772e:	61 e0       	ldi	r22, 0x01	; 1
   17730:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   17734:	89 83       	std	Y+1, r24	; 0x01
   17736:	9a 83       	std	Y+2, r25	; 0x02
   17738:	89 81       	ldd	r24, Y+1	; 0x01
   1773a:	9a 81       	ldd	r25, Y+2	; 0x02
   1773c:	18 16       	cp	r1, r24
   1773e:	19 06       	cpc	r1, r25
   17740:	0c f0       	brlt	.+2      	; 0x17744 <arb_console+0x102e>
   17742:	e9 c0       	rjmp	.+466    	; 0x17916 <arb_console+0x1200>
   17744:	89 81       	ldd	r24, Y+1	; 0x01
   17746:	9a 81       	ldd	r25, Y+2	; 0x02
   17748:	6a e0       	ldi	r22, 0x0A	; 10
   1774a:	70 e0       	ldi	r23, 0x00	; 0
   1774c:	20 e0       	ldi	r18, 0x00	; 0
   1774e:	30 e0       	ldi	r19, 0x00	; 0
   17750:	a9 01       	movw	r20, r18
   17752:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   17756:	4b 01       	movw	r8, r22
   17758:	5c 01       	movw	r10, r24
   1775a:	00 e0       	ldi	r16, 0x00	; 0
   1775c:	e5 e0       	ldi	r30, 0x05	; 5
   1775e:	ce 2e       	mov	r12, r30
   17760:	d1 2c       	mov	r13, r1
   17762:	cc 0e       	add	r12, r28
   17764:	dd 1e       	adc	r13, r29
   17766:	c6 51       	subi	r28, 0x16	; 22
   17768:	de 4f       	sbci	r29, 0xFE	; 254
   1776a:	e8 82       	st	Y, r14
   1776c:	ca 5e       	subi	r28, 0xEA	; 234
   1776e:	d1 40       	sbci	r29, 0x01	; 1
   17770:	cc 5f       	subi	r28, 0xFC	; 252
   17772:	dd 4f       	sbci	r29, 0xFD	; 253
   17774:	f8 82       	st	Y, r15
   17776:	c4 50       	subi	r28, 0x04	; 4
   17778:	d2 40       	sbci	r29, 0x02	; 2
   1777a:	89 81       	ldd	r24, Y+1	; 0x01
   1777c:	9a 81       	ldd	r25, Y+2	; 0x02
   1777e:	b6 01       	movw	r22, r12
   17780:	44 e1       	ldi	r20, 0x14	; 20
   17782:	50 e0       	ldi	r21, 0x00	; 0
   17784:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <arb_read>
   17788:	7c 01       	movw	r14, r24
   1778a:	c6 01       	movw	r24, r12
   1778c:	6a e0       	ldi	r22, 0x0A	; 10
   1778e:	70 e0       	ldi	r23, 0x00	; 0
   17790:	0e 94 2a f7 	call	0x1ee54	; 0x1ee54 <strchr>
   17794:	3c 01       	movw	r6, r24
   17796:	00 97       	sbiw	r24, 0x00	; 0
   17798:	09 f4       	brne	.+2      	; 0x1779c <arb_console+0x1086>
   1779a:	6a c0       	rjmp	.+212    	; 0x17870 <arb_console+0x115a>
   1779c:	0f 5f       	subi	r16, 0xFF	; 255
   1779e:	04 31       	cpi	r16, 0x14	; 20
   177a0:	09 f0       	breq	.+2      	; 0x177a4 <arb_console+0x108e>
   177a2:	66 c0       	rjmp	.+204    	; 0x17870 <arb_console+0x115a>
   177a4:	8c 01       	movw	r16, r24
   177a6:	0c 19       	sub	r16, r12
   177a8:	1d 09       	sbc	r17, r13
   177aa:	10 16       	cp	r1, r16
   177ac:	11 06       	cpc	r1, r17
   177ae:	54 f4       	brge	.+20     	; 0x177c4 <arb_console+0x10ae>
   177b0:	80 91 a9 2b 	lds	r24, 0x2BA9
   177b4:	90 91 aa 2b 	lds	r25, 0x2BAA
   177b8:	a8 01       	movw	r20, r16
   177ba:	4f 5f       	subi	r20, 0xFF	; 255
   177bc:	5f 4f       	sbci	r21, 0xFF	; 255
   177be:	b6 01       	movw	r22, r12
   177c0:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   177c4:	00 d0       	rcall	.+0      	; 0x177c6 <arb_console+0x10b0>
   177c6:	0f 92       	push	r0
   177c8:	c6 51       	subi	r28, 0x16	; 22
   177ca:	de 4f       	sbci	r29, 0xFE	; 254
   177cc:	e8 81       	ld	r30, Y
   177ce:	ca 5e       	subi	r28, 0xEA	; 234
   177d0:	d1 40       	sbci	r29, 0x01	; 1
   177d2:	ad b7       	in	r26, 0x3d	; 61
   177d4:	be b7       	in	r27, 0x3e	; 62
   177d6:	11 96       	adiw	r26, 0x01	; 1
   177d8:	ec 93       	st	X, r30
   177da:	11 97       	sbiw	r26, 0x01	; 1
   177dc:	cc 5f       	subi	r28, 0xFC	; 252
   177de:	dd 4f       	sbci	r29, 0xFD	; 253
   177e0:	f8 81       	ld	r31, Y
   177e2:	c4 50       	subi	r28, 0x04	; 4
   177e4:	d2 40       	sbci	r29, 0x02	; 2
   177e6:	12 96       	adiw	r26, 0x02	; 2
   177e8:	fc 93       	st	X, r31
   177ea:	12 97       	sbiw	r26, 0x02	; 2
   177ec:	24 e0       	ldi	r18, 0x04	; 4
   177ee:	3e e0       	ldi	r19, 0x0E	; 14
   177f0:	13 96       	adiw	r26, 0x03	; 3
   177f2:	2d 93       	st	X+, r18
   177f4:	3c 93       	st	X, r19
   177f6:	14 97       	sbiw	r26, 0x04	; 4
   177f8:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   177fc:	ac 01       	movw	r20, r24
   177fe:	80 91 a9 2b 	lds	r24, 0x2BA9
   17802:	90 91 aa 2b 	lds	r25, 0x2BAA
   17806:	0f 90       	pop	r0
   17808:	0f 90       	pop	r0
   1780a:	0f 90       	pop	r0
   1780c:	0f 90       	pop	r0
   1780e:	c6 51       	subi	r28, 0x16	; 22
   17810:	de 4f       	sbci	r29, 0xFE	; 254
   17812:	68 81       	ld	r22, Y
   17814:	ca 5e       	subi	r28, 0xEA	; 234
   17816:	d1 40       	sbci	r29, 0x01	; 1
   17818:	cc 5f       	subi	r28, 0xFC	; 252
   1781a:	dd 4f       	sbci	r29, 0xFD	; 253
   1781c:	78 81       	ld	r23, Y
   1781e:	c4 50       	subi	r28, 0x04	; 4
   17820:	d2 40       	sbci	r29, 0x02	; 2
   17822:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17826:	80 91 a9 2b 	lds	r24, 0x2BA9
   1782a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1782e:	63 e0       	ldi	r22, 0x03	; 3
   17830:	70 e0       	ldi	r23, 0x00	; 0
   17832:	a2 01       	movw	r20, r4
   17834:	91 01       	movw	r18, r2
   17836:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   1783a:	ce 01       	movw	r24, r28
   1783c:	85 5b       	subi	r24, 0xB5	; 181
   1783e:	9f 4f       	sbci	r25, 0xFF	; 255
   17840:	68 e8       	ldi	r22, 0x88	; 136
   17842:	71 e2       	ldi	r23, 0x21	; 33
   17844:	0e 94 17 f7 	call	0x1ee2e	; 0x1ee2e <strcasecmp>
   17848:	00 97       	sbiw	r24, 0x00	; 0
   1784a:	81 f1       	breq	.+96     	; 0x178ac <arb_console+0x1196>
   1784c:	a8 01       	movw	r20, r16
   1784e:	40 95       	com	r20
   17850:	50 95       	com	r21
   17852:	4e 0d       	add	r20, r14
   17854:	5f 1d       	adc	r21, r15
   17856:	14 16       	cp	r1, r20
   17858:	15 06       	cpc	r1, r21
   1785a:	c4 f4       	brge	.+48     	; 0x1788c <arb_console+0x1176>
   1785c:	80 91 a9 2b 	lds	r24, 0x2BA9
   17860:	90 91 aa 2b 	lds	r25, 0x2BAA
   17864:	b3 01       	movw	r22, r6
   17866:	6f 5f       	subi	r22, 0xFF	; 255
   17868:	7f 4f       	sbci	r23, 0xFF	; 255
   1786a:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1786e:	0e c0       	rjmp	.+28     	; 0x1788c <arb_console+0x1176>
   17870:	04 31       	cpi	r16, 0x14	; 20
   17872:	60 f4       	brcc	.+24     	; 0x1788c <arb_console+0x1176>
   17874:	1e 14       	cp	r1, r14
   17876:	1f 04       	cpc	r1, r15
   17878:	54 f4       	brge	.+20     	; 0x1788e <arb_console+0x1178>
   1787a:	80 91 a9 2b 	lds	r24, 0x2BA9
   1787e:	90 91 aa 2b 	lds	r25, 0x2BAA
   17882:	b6 01       	movw	r22, r12
   17884:	a7 01       	movw	r20, r14
   17886:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1788a:	01 c0       	rjmp	.+2      	; 0x1788e <arb_console+0x1178>
   1788c:	00 e0       	ldi	r16, 0x00	; 0
   1788e:	c7 01       	movw	r24, r14
   17890:	aa 27       	eor	r26, r26
   17892:	97 fd       	sbrc	r25, 7
   17894:	a0 95       	com	r26
   17896:	ba 2f       	mov	r27, r26
   17898:	88 1a       	sub	r8, r24
   1789a:	99 0a       	sbc	r9, r25
   1789c:	aa 0a       	sbc	r10, r26
   1789e:	bb 0a       	sbc	r11, r27
   178a0:	18 14       	cp	r1, r8
   178a2:	19 04       	cpc	r1, r9
   178a4:	1a 04       	cpc	r1, r10
   178a6:	1b 04       	cpc	r1, r11
   178a8:	0c f4       	brge	.+2      	; 0x178ac <arb_console+0x1196>
   178aa:	67 cf       	rjmp	.-306    	; 0x1777a <arb_console+0x1064>
   178ac:	89 81       	ldd	r24, Y+1	; 0x01
   178ae:	9a 81       	ldd	r25, Y+2	; 0x02
   178b0:	0e 94 d0 be 	call	0x17da0	; 0x17da0 <arb_close>
   178b4:	30 c0       	rjmp	.+96     	; 0x17916 <arb_console+0x1200>
   178b6:	e0 91 ad 2b 	lds	r30, 0x2BAD
   178ba:	f0 91 ae 2b 	lds	r31, 0x2BAE
   178be:	30 97       	sbiw	r30, 0x00	; 0
   178c0:	51 f1       	breq	.+84     	; 0x17916 <arb_console+0x1200>
   178c2:	80 91 a9 2b 	lds	r24, 0x2BA9
   178c6:	90 91 aa 2b 	lds	r25, 0x2BAA
   178ca:	8e 01       	movw	r16, r28
   178cc:	04 54       	subi	r16, 0x44	; 68
   178ce:	1f 4f       	sbci	r17, 0xFF	; 255
   178d0:	b8 01       	movw	r22, r16
   178d2:	ae 01       	movw	r20, r28
   178d4:	45 5b       	subi	r20, 0xB5	; 181
   178d6:	5f 4f       	sbci	r21, 0xFF	; 255
   178d8:	19 95       	eicall
   178da:	88 23       	and	r24, r24
   178dc:	e1 f4       	brne	.+56     	; 0x17916 <arb_console+0x1200>
   178de:	00 d0       	rcall	.+0      	; 0x178e0 <arb_console+0x11ca>
   178e0:	0f 92       	push	r0
   178e2:	ad b7       	in	r26, 0x3d	; 61
   178e4:	be b7       	in	r27, 0x3e	; 62
   178e6:	11 96       	adiw	r26, 0x01	; 1
   178e8:	0d 93       	st	X+, r16
   178ea:	1c 93       	st	X, r17
   178ec:	12 97       	sbiw	r26, 0x02	; 2
   178ee:	87 e0       	ldi	r24, 0x07	; 7
   178f0:	95 e0       	ldi	r25, 0x05	; 5
   178f2:	13 96       	adiw	r26, 0x03	; 3
   178f4:	8d 93       	st	X+, r24
   178f6:	9c 93       	st	X, r25
   178f8:	14 97       	sbiw	r26, 0x04	; 4
   178fa:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   178fe:	ac 01       	movw	r20, r24
   17900:	80 91 a9 2b 	lds	r24, 0x2BA9
   17904:	90 91 aa 2b 	lds	r25, 0x2BAA
   17908:	0f 90       	pop	r0
   1790a:	0f 90       	pop	r0
   1790c:	0f 90       	pop	r0
   1790e:	0f 90       	pop	r0
   17910:	b8 01       	movw	r22, r16
   17912:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   17916:	80 91 a9 2b 	lds	r24, 0x2BA9
   1791a:	90 91 aa 2b 	lds	r25, 0x2BAA
   1791e:	64 e0       	ldi	r22, 0x04	; 4
   17920:	70 e0       	ldi	r23, 0x00	; 0
   17922:	20 e0       	ldi	r18, 0x00	; 0
   17924:	30 e0       	ldi	r19, 0x00	; 0
   17926:	a9 01       	movw	r20, r18
   17928:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   1792c:	0c 94 52 b4 	jmp	0x168a4	; 0x168a4 <arb_console+0x18e>

00017930 <arb_consoleInit>:
   17930:	cf 92       	push	r12
   17932:	df 92       	push	r13
   17934:	ef 92       	push	r14
   17936:	ff 92       	push	r15
   17938:	0f 93       	push	r16
   1793a:	1f 93       	push	r17
   1793c:	cf 93       	push	r28
   1793e:	df 93       	push	r29
   17940:	7c 01       	movw	r14, r24
   17942:	6b 01       	movw	r12, r22
   17944:	da 01       	movw	r26, r20
   17946:	e2 2f       	mov	r30, r18
   17948:	e8 01       	movw	r28, r16
   1794a:	8b e8       	ldi	r24, 0x8B	; 139
   1794c:	93 eb       	ldi	r25, 0xB3	; 179
   1794e:	61 e0       	ldi	r22, 0x01	; 1
   17950:	70 e0       	ldi	r23, 0x00	; 0
   17952:	40 e0       	ldi	r20, 0x00	; 0
   17954:	50 e0       	ldi	r21, 0x00	; 0
   17956:	9d 01       	movw	r18, r26
   17958:	0e 2f       	mov	r16, r30
   1795a:	0e 94 d6 d4 	call	0x1a9ac	; 0x1a9ac <arb_threadCreate>
   1795e:	80 93 a7 2b 	sts	0x2BA7, r24
   17962:	90 93 a8 2b 	sts	0x2BA8, r25
   17966:	80 91 a7 2b 	lds	r24, 0x2BA7
   1796a:	90 91 a8 2b 	lds	r25, 0x2BA8
   1796e:	97 ff       	sbrs	r25, 7
   17970:	05 c0       	rjmp	.+10     	; 0x1797c <arb_consoleInit+0x4c>
   17972:	80 91 a7 2b 	lds	r24, 0x2BA7
   17976:	90 91 a8 2b 	lds	r25, 0x2BA8
   1797a:	38 c0       	rjmp	.+112    	; 0x179ec <arb_consoleInit+0xbc>
   1797c:	c7 01       	movw	r24, r14
   1797e:	63 e0       	ldi	r22, 0x03	; 3
   17980:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   17984:	80 93 a9 2b 	sts	0x2BA9, r24
   17988:	90 93 aa 2b 	sts	0x2BAA, r25
   1798c:	80 91 a9 2b 	lds	r24, 0x2BA9
   17990:	90 91 aa 2b 	lds	r25, 0x2BAA
   17994:	97 ff       	sbrs	r25, 7
   17996:	05 c0       	rjmp	.+10     	; 0x179a2 <arb_consoleInit+0x72>
   17998:	80 91 a9 2b 	lds	r24, 0x2BA9
   1799c:	90 91 aa 2b 	lds	r25, 0x2BAA
   179a0:	25 c0       	rjmp	.+74     	; 0x179ec <arb_consoleInit+0xbc>
   179a2:	c0 93 ad 2b 	sts	0x2BAD, r28
   179a6:	d0 93 ae 2b 	sts	0x2BAE, r29
   179aa:	c6 01       	movw	r24, r12
   179ac:	63 e0       	ldi	r22, 0x03	; 3
   179ae:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   179b2:	80 93 ab 2b 	sts	0x2BAB, r24
   179b6:	90 93 ac 2b 	sts	0x2BAC, r25
   179ba:	80 91 ab 2b 	lds	r24, 0x2BAB
   179be:	90 91 ac 2b 	lds	r25, 0x2BAC
   179c2:	2f ef       	ldi	r18, 0xFF	; 255
   179c4:	87 3f       	cpi	r24, 0xF7	; 247
   179c6:	92 07       	cpc	r25, r18
   179c8:	29 f4       	brne	.+10     	; 0x179d4 <arb_consoleInit+0xa4>
   179ca:	10 92 ab 2b 	sts	0x2BAB, r1
   179ce:	10 92 ac 2b 	sts	0x2BAC, r1
   179d2:	0b c0       	rjmp	.+22     	; 0x179ea <arb_consoleInit+0xba>
   179d4:	80 91 ab 2b 	lds	r24, 0x2BAB
   179d8:	90 91 ac 2b 	lds	r25, 0x2BAC
   179dc:	97 ff       	sbrs	r25, 7
   179de:	05 c0       	rjmp	.+10     	; 0x179ea <arb_consoleInit+0xba>
   179e0:	80 91 ab 2b 	lds	r24, 0x2BAB
   179e4:	90 91 ac 2b 	lds	r25, 0x2BAC
   179e8:	01 c0       	rjmp	.+2      	; 0x179ec <arb_consoleInit+0xbc>
   179ea:	80 e0       	ldi	r24, 0x00	; 0
   179ec:	df 91       	pop	r29
   179ee:	cf 91       	pop	r28
   179f0:	1f 91       	pop	r17
   179f2:	0f 91       	pop	r16
   179f4:	ff 90       	pop	r15
   179f6:	ef 90       	pop	r14
   179f8:	df 90       	pop	r13
   179fa:	cf 90       	pop	r12
   179fc:	08 95       	ret

000179fe <arb_getDeviceLinkByName>:
   179fe:	ef 92       	push	r14
   17a00:	ff 92       	push	r15
   17a02:	0f 93       	push	r16
   17a04:	1f 93       	push	r17
   17a06:	cf 93       	push	r28
   17a08:	df 93       	push	r29
   17a0a:	0f 92       	push	r0
   17a0c:	0f 92       	push	r0
   17a0e:	cd b7       	in	r28, 0x3d	; 61
   17a10:	de b7       	in	r29, 0x3e	; 62
   17a12:	7c 01       	movw	r14, r24
   17a14:	e0 91 cb 21 	lds	r30, 0x21CB
   17a18:	f0 91 cc 21 	lds	r31, 0x21CC
   17a1c:	02 81       	ldd	r16, Z+2	; 0x02
   17a1e:	13 81       	ldd	r17, Z+3	; 0x03
   17a20:	e0 91 cb 21 	lds	r30, 0x21CB
   17a24:	f0 91 cc 21 	lds	r31, 0x21CC
   17a28:	11 c0       	rjmp	.+34     	; 0x17a4c <arb_getDeviceLinkByName+0x4e>
   17a2a:	e9 81       	ldd	r30, Y+1	; 0x01
   17a2c:	fa 81       	ldd	r31, Y+2	; 0x02
   17a2e:	80 81       	ld	r24, Z
   17a30:	91 81       	ldd	r25, Z+1	; 0x01
   17a32:	02 96       	adiw	r24, 0x02	; 2
   17a34:	b7 01       	movw	r22, r14
   17a36:	0e 94 35 f7 	call	0x1ee6a	; 0x1ee6a <strcmp>
   17a3a:	00 97       	sbiw	r24, 0x00	; 0
   17a3c:	19 f4       	brne	.+6      	; 0x17a44 <arb_getDeviceLinkByName+0x46>
   17a3e:	89 81       	ldd	r24, Y+1	; 0x01
   17a40:	9a 81       	ldd	r25, Y+2	; 0x02
   17a42:	0d c0       	rjmp	.+26     	; 0x17a5e <arb_getDeviceLinkByName+0x60>
   17a44:	01 50       	subi	r16, 0x01	; 1
   17a46:	10 40       	sbci	r17, 0x00	; 0
   17a48:	e9 81       	ldd	r30, Y+1	; 0x01
   17a4a:	fa 81       	ldd	r31, Y+2	; 0x02
   17a4c:	80 85       	ldd	r24, Z+8	; 0x08
   17a4e:	91 85       	ldd	r25, Z+9	; 0x09
   17a50:	89 83       	std	Y+1, r24	; 0x01
   17a52:	9a 83       	std	Y+2, r25	; 0x02
   17a54:	10 16       	cp	r1, r16
   17a56:	11 06       	cpc	r1, r17
   17a58:	44 f3       	brlt	.-48     	; 0x17a2a <arb_getDeviceLinkByName+0x2c>
   17a5a:	87 ef       	ldi	r24, 0xF7	; 247
   17a5c:	9f ef       	ldi	r25, 0xFF	; 255
   17a5e:	0f 90       	pop	r0
   17a60:	0f 90       	pop	r0
   17a62:	df 91       	pop	r29
   17a64:	cf 91       	pop	r28
   17a66:	1f 91       	pop	r17
   17a68:	0f 91       	pop	r16
   17a6a:	ff 90       	pop	r15
   17a6c:	ef 90       	pop	r14
   17a6e:	08 95       	ret

00017a70 <arb_getDeviceList>:
   17a70:	80 91 cb 21 	lds	r24, 0x21CB
   17a74:	90 91 cc 21 	lds	r25, 0x21CC
   17a78:	08 95       	ret

00017a7a <arb_open>:
   17a7a:	9f 92       	push	r9
   17a7c:	af 92       	push	r10
   17a7e:	bf 92       	push	r11
   17a80:	cf 92       	push	r12
   17a82:	df 92       	push	r13
   17a84:	ef 92       	push	r14
   17a86:	ff 92       	push	r15
   17a88:	0f 93       	push	r16
   17a8a:	1f 93       	push	r17
   17a8c:	cf 93       	push	r28
   17a8e:	df 93       	push	r29
   17a90:	cd b7       	in	r28, 0x3d	; 61
   17a92:	de b7       	in	r29, 0x3e	; 62
   17a94:	25 97       	sbiw	r28, 0x05	; 5
   17a96:	cd bf       	out	0x3d, r28	; 61
   17a98:	de bf       	out	0x3e, r29	; 62
   17a9a:	96 2e       	mov	r9, r22
   17a9c:	2f b7       	in	r18, 0x3f	; 63
   17a9e:	29 83       	std	Y+1, r18	; 0x01
   17aa0:	f8 94       	cli
   17aa2:	dc 01       	movw	r26, r24
   17aa4:	0d 90       	ld	r0, X+
   17aa6:	00 20       	and	r0, r0
   17aa8:	e9 f7       	brne	.-6      	; 0x17aa4 <arb_open+0x2a>
   17aaa:	6d 01       	movw	r12, r26
   17aac:	08 94       	sec
   17aae:	c1 08       	sbc	r12, r1
   17ab0:	d1 08       	sbc	r13, r1
   17ab2:	c8 1a       	sub	r12, r24
   17ab4:	d9 0a       	sbc	r13, r25
   17ab6:	6b eb       	ldi	r22, 0xBB	; 187
   17ab8:	71 e2       	ldi	r23, 0x21	; 33
   17aba:	0e 94 02 f7 	call	0x1ee04	; 0x1ee04 <strtok>
   17abe:	f8 2e       	mov	r15, r24
   17ac0:	e9 2e       	mov	r14, r25
   17ac2:	e8 2f       	mov	r30, r24
   17ac4:	f9 2f       	mov	r31, r25
   17ac6:	df 01       	movw	r26, r30
   17ac8:	0d 90       	ld	r0, X+
   17aca:	00 20       	and	r0, r0
   17acc:	e9 f7       	brne	.-6      	; 0x17ac8 <arb_open+0x4e>
   17ace:	8d 01       	movw	r16, r26
   17ad0:	01 50       	subi	r16, 0x01	; 1
   17ad2:	10 40       	sbci	r17, 0x00	; 0
   17ad4:	0e 1b       	sub	r16, r30
   17ad6:	1f 0b       	sbc	r17, r31
   17ad8:	80 e0       	ldi	r24, 0x00	; 0
   17ada:	90 e0       	ldi	r25, 0x00	; 0
   17adc:	6b eb       	ldi	r22, 0xBB	; 187
   17ade:	71 e2       	ldi	r23, 0x21	; 33
   17ae0:	0e 94 02 f7 	call	0x1ee04	; 0x1ee04 <strtok>
   17ae4:	5c 01       	movw	r10, r24
   17ae6:	dc 01       	movw	r26, r24
   17ae8:	0d 90       	ld	r0, X+
   17aea:	00 20       	and	r0, r0
   17aec:	e9 f7       	brne	.-6      	; 0x17ae8 <arb_open+0x6e>
   17aee:	11 97       	sbiw	r26, 0x01	; 1
   17af0:	a8 1b       	sub	r26, r24
   17af2:	b9 0b       	sbc	r27, r25
   17af4:	00 95       	com	r16
   17af6:	10 95       	com	r17
   17af8:	0c 0d       	add	r16, r12
   17afa:	1d 1d       	adc	r17, r13
   17afc:	a0 17       	cp	r26, r16
   17afe:	b1 07       	cpc	r27, r17
   17b00:	34 f4       	brge	.+12     	; 0x17b0e <arb_open+0x94>
   17b02:	00 97       	sbiw	r24, 0x00	; 0
   17b04:	21 f0       	breq	.+8      	; 0x17b0e <arb_open+0x94>
   17b06:	a8 0f       	add	r26, r24
   17b08:	b9 1f       	adc	r27, r25
   17b0a:	8f e2       	ldi	r24, 0x2F	; 47
   17b0c:	8c 93       	st	X, r24
   17b0e:	8f 2d       	mov	r24, r15
   17b10:	9e 2d       	mov	r25, r14
   17b12:	0e 94 ff bc 	call	0x179fe	; 0x179fe <arb_getDeviceLinkByName>
   17b16:	8c 83       	std	Y+4, r24	; 0x04
   17b18:	9d 83       	std	Y+5, r25	; 0x05
   17b1a:	8c 81       	ldd	r24, Y+4	; 0x04
   17b1c:	9d 81       	ldd	r25, Y+5	; 0x05
   17b1e:	bf ef       	ldi	r27, 0xFF	; 255
   17b20:	87 3f       	cpi	r24, 0xF7	; 247
   17b22:	9b 07       	cpc	r25, r27
   17b24:	29 f4       	brne	.+10     	; 0x17b30 <arb_open+0xb6>
   17b26:	89 81       	ldd	r24, Y+1	; 0x01
   17b28:	8f bf       	out	0x3f, r24	; 63
   17b2a:	87 ef       	ldi	r24, 0xF7	; 247
   17b2c:	9f ef       	ldi	r25, 0xFF	; 255
   17b2e:	5f c0       	rjmp	.+190    	; 0x17bee <arb_open+0x174>
   17b30:	89 e0       	ldi	r24, 0x09	; 9
   17b32:	90 e0       	ldi	r25, 0x00	; 0
   17b34:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   17b38:	8a 83       	std	Y+2, r24	; 0x02
   17b3a:	9b 83       	std	Y+3, r25	; 0x03
   17b3c:	8a 81       	ldd	r24, Y+2	; 0x02
   17b3e:	9b 81       	ldd	r25, Y+3	; 0x03
   17b40:	97 ff       	sbrs	r25, 7
   17b42:	05 c0       	rjmp	.+10     	; 0x17b4e <arb_open+0xd4>
   17b44:	89 81       	ldd	r24, Y+1	; 0x01
   17b46:	8f bf       	out	0x3f, r24	; 63
   17b48:	8f ef       	ldi	r24, 0xFF	; 255
   17b4a:	9f ef       	ldi	r25, 0xFF	; 255
   17b4c:	50 c0       	rjmp	.+160    	; 0x17bee <arb_open+0x174>
   17b4e:	ec 81       	ldd	r30, Y+4	; 0x04
   17b50:	fd 81       	ldd	r31, Y+5	; 0x05
   17b52:	01 90       	ld	r0, Z+
   17b54:	f0 81       	ld	r31, Z
   17b56:	e0 2d       	mov	r30, r0
   17b58:	aa 81       	ldd	r26, Y+2	; 0x02
   17b5a:	bb 81       	ldd	r27, Y+3	; 0x03
   17b5c:	0d 91       	ld	r16, X+
   17b5e:	1c 91       	ld	r17, X
   17b60:	89 e0       	ldi	r24, 0x09	; 9
   17b62:	d8 01       	movw	r26, r16
   17b64:	1d 92       	st	X+, r1
   17b66:	8a 95       	dec	r24
   17b68:	e9 f7       	brne	.-6      	; 0x17b64 <arb_open+0xea>
   17b6a:	82 89       	ldd	r24, Z+18	; 0x12
   17b6c:	8f 5f       	subi	r24, 0xFF	; 255
   17b6e:	82 8b       	std	Z+18, r24	; 0x12
   17b70:	d8 01       	movw	r26, r16
   17b72:	ed 93       	st	X+, r30
   17b74:	fc 93       	st	X, r31
   17b76:	11 97       	sbiw	r26, 0x01	; 1
   17b78:	14 96       	adiw	r26, 0x04	; 4
   17b7a:	9c 92       	st	X, r9
   17b7c:	14 97       	sbiw	r26, 0x04	; 4
   17b7e:	12 96       	adiw	r26, 0x02	; 2
   17b80:	ad 92       	st	X+, r10
   17b82:	bc 92       	st	X, r11
   17b84:	13 97       	sbiw	r26, 0x03	; 3
   17b86:	80 91 bd 21 	lds	r24, 0x21BD
   17b8a:	90 91 be 21 	lds	r25, 0x21BE
   17b8e:	6a 81       	ldd	r22, Y+2	; 0x02
   17b90:	7b 81       	ldd	r23, Y+3	; 0x03
   17b92:	41 e0       	ldi	r20, 0x01	; 1
   17b94:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   17b98:	89 81       	ldd	r24, Y+1	; 0x01
   17b9a:	8f bf       	out	0x3f, r24	; 63
   17b9c:	d8 01       	movw	r26, r16
   17b9e:	ed 91       	ld	r30, X+
   17ba0:	fc 91       	ld	r31, X
   17ba2:	11 97       	sbiw	r26, 0x01	; 1
   17ba4:	03 88       	ldd	r0, Z+19	; 0x13
   17ba6:	f4 89       	ldd	r31, Z+20	; 0x14
   17ba8:	e0 2d       	mov	r30, r0
   17baa:	30 97       	sbiw	r30, 0x00	; 0
   17bac:	f1 f0       	breq	.+60     	; 0x17bea <arb_open+0x170>
   17bae:	01 90       	ld	r0, Z+
   17bb0:	f0 81       	ld	r31, Z
   17bb2:	e0 2d       	mov	r30, r0
   17bb4:	c8 01       	movw	r24, r16
   17bb6:	19 95       	eicall
   17bb8:	f8 2e       	mov	r15, r24
   17bba:	87 ff       	sbrs	r24, 7
   17bbc:	13 c0       	rjmp	.+38     	; 0x17be4 <arb_open+0x16a>
   17bbe:	d8 01       	movw	r26, r16
   17bc0:	ed 91       	ld	r30, X+
   17bc2:	fc 91       	ld	r31, X
   17bc4:	82 89       	ldd	r24, Z+18	; 0x12
   17bc6:	81 50       	subi	r24, 0x01	; 1
   17bc8:	82 8b       	std	Z+18, r24	; 0x12
   17bca:	80 91 bd 21 	lds	r24, 0x21BD
   17bce:	90 91 be 21 	lds	r25, 0x21BE
   17bd2:	6a 81       	ldd	r22, Y+2	; 0x02
   17bd4:	7b 81       	ldd	r23, Y+3	; 0x03
   17bd6:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   17bda:	8f 2d       	mov	r24, r15
   17bdc:	99 27       	eor	r25, r25
   17bde:	87 fd       	sbrc	r24, 7
   17be0:	90 95       	com	r25
   17be2:	05 c0       	rjmp	.+10     	; 0x17bee <arb_open+0x174>
   17be4:	8a 81       	ldd	r24, Y+2	; 0x02
   17be6:	9b 81       	ldd	r25, Y+3	; 0x03
   17be8:	02 c0       	rjmp	.+4      	; 0x17bee <arb_open+0x174>
   17bea:	8d ef       	ldi	r24, 0xFD	; 253
   17bec:	9f ef       	ldi	r25, 0xFF	; 255
   17bee:	25 96       	adiw	r28, 0x05	; 5
   17bf0:	cd bf       	out	0x3d, r28	; 61
   17bf2:	de bf       	out	0x3e, r29	; 62
   17bf4:	df 91       	pop	r29
   17bf6:	cf 91       	pop	r28
   17bf8:	1f 91       	pop	r17
   17bfa:	0f 91       	pop	r16
   17bfc:	ff 90       	pop	r15
   17bfe:	ef 90       	pop	r14
   17c00:	df 90       	pop	r13
   17c02:	cf 90       	pop	r12
   17c04:	bf 90       	pop	r11
   17c06:	af 90       	pop	r10
   17c08:	9f 90       	pop	r9
   17c0a:	08 95       	ret

00017c0c <arb_read>:
   17c0c:	cf 93       	push	r28
   17c0e:	df 93       	push	r29
   17c10:	0f 92       	push	r0
   17c12:	0f 92       	push	r0
   17c14:	cd b7       	in	r28, 0x3d	; 61
   17c16:	de b7       	in	r29, 0x3e	; 62
   17c18:	89 83       	std	Y+1, r24	; 0x01
   17c1a:	9a 83       	std	Y+2, r25	; 0x02
   17c1c:	e9 81       	ldd	r30, Y+1	; 0x01
   17c1e:	fa 81       	ldd	r31, Y+2	; 0x02
   17c20:	a0 81       	ld	r26, Z
   17c22:	b1 81       	ldd	r27, Z+1	; 0x01
   17c24:	e9 81       	ldd	r30, Y+1	; 0x01
   17c26:	fa 81       	ldd	r31, Y+2	; 0x02
   17c28:	20 91 bd 21 	lds	r18, 0x21BD
   17c2c:	30 91 be 21 	lds	r19, 0x21BE
   17c30:	84 81       	ldd	r24, Z+4	; 0x04
   17c32:	95 81       	ldd	r25, Z+5	; 0x05
   17c34:	82 17       	cp	r24, r18
   17c36:	93 07       	cpc	r25, r19
   17c38:	71 f4       	brne	.+28     	; 0x17c56 <arb_read+0x4a>
   17c3a:	ed 91       	ld	r30, X+
   17c3c:	fc 91       	ld	r31, X
   17c3e:	11 97       	sbiw	r26, 0x01	; 1
   17c40:	03 88       	ldd	r0, Z+19	; 0x13
   17c42:	f4 89       	ldd	r31, Z+20	; 0x14
   17c44:	e0 2d       	mov	r30, r0
   17c46:	30 97       	sbiw	r30, 0x00	; 0
   17c48:	49 f0       	breq	.+18     	; 0x17c5c <arb_read+0x50>
   17c4a:	02 80       	ldd	r0, Z+2	; 0x02
   17c4c:	f3 81       	ldd	r31, Z+3	; 0x03
   17c4e:	e0 2d       	mov	r30, r0
   17c50:	cd 01       	movw	r24, r26
   17c52:	19 95       	eicall
   17c54:	05 c0       	rjmp	.+10     	; 0x17c60 <arb_read+0x54>
   17c56:	89 ef       	ldi	r24, 0xF9	; 249
   17c58:	9f ef       	ldi	r25, 0xFF	; 255
   17c5a:	02 c0       	rjmp	.+4      	; 0x17c60 <arb_read+0x54>
   17c5c:	8d ef       	ldi	r24, 0xFD	; 253
   17c5e:	9f ef       	ldi	r25, 0xFF	; 255
   17c60:	0f 90       	pop	r0
   17c62:	0f 90       	pop	r0
   17c64:	df 91       	pop	r29
   17c66:	cf 91       	pop	r28
   17c68:	08 95       	ret

00017c6a <arb_write>:
   17c6a:	cf 93       	push	r28
   17c6c:	df 93       	push	r29
   17c6e:	0f 92       	push	r0
   17c70:	0f 92       	push	r0
   17c72:	cd b7       	in	r28, 0x3d	; 61
   17c74:	de b7       	in	r29, 0x3e	; 62
   17c76:	89 83       	std	Y+1, r24	; 0x01
   17c78:	9a 83       	std	Y+2, r25	; 0x02
   17c7a:	e9 81       	ldd	r30, Y+1	; 0x01
   17c7c:	fa 81       	ldd	r31, Y+2	; 0x02
   17c7e:	a0 81       	ld	r26, Z
   17c80:	b1 81       	ldd	r27, Z+1	; 0x01
   17c82:	e9 81       	ldd	r30, Y+1	; 0x01
   17c84:	fa 81       	ldd	r31, Y+2	; 0x02
   17c86:	20 91 bd 21 	lds	r18, 0x21BD
   17c8a:	30 91 be 21 	lds	r19, 0x21BE
   17c8e:	84 81       	ldd	r24, Z+4	; 0x04
   17c90:	95 81       	ldd	r25, Z+5	; 0x05
   17c92:	82 17       	cp	r24, r18
   17c94:	93 07       	cpc	r25, r19
   17c96:	71 f4       	brne	.+28     	; 0x17cb4 <arb_write+0x4a>
   17c98:	ed 91       	ld	r30, X+
   17c9a:	fc 91       	ld	r31, X
   17c9c:	11 97       	sbiw	r26, 0x01	; 1
   17c9e:	03 88       	ldd	r0, Z+19	; 0x13
   17ca0:	f4 89       	ldd	r31, Z+20	; 0x14
   17ca2:	e0 2d       	mov	r30, r0
   17ca4:	30 97       	sbiw	r30, 0x00	; 0
   17ca6:	49 f0       	breq	.+18     	; 0x17cba <arb_write+0x50>
   17ca8:	04 80       	ldd	r0, Z+4	; 0x04
   17caa:	f5 81       	ldd	r31, Z+5	; 0x05
   17cac:	e0 2d       	mov	r30, r0
   17cae:	cd 01       	movw	r24, r26
   17cb0:	19 95       	eicall
   17cb2:	05 c0       	rjmp	.+10     	; 0x17cbe <arb_write+0x54>
   17cb4:	89 ef       	ldi	r24, 0xF9	; 249
   17cb6:	9f ef       	ldi	r25, 0xFF	; 255
   17cb8:	02 c0       	rjmp	.+4      	; 0x17cbe <arb_write+0x54>
   17cba:	8d ef       	ldi	r24, 0xFD	; 253
   17cbc:	9f ef       	ldi	r25, 0xFF	; 255
   17cbe:	0f 90       	pop	r0
   17cc0:	0f 90       	pop	r0
   17cc2:	df 91       	pop	r29
   17cc4:	cf 91       	pop	r28
   17cc6:	08 95       	ret

00017cc8 <arb_getDevName>:
   17cc8:	cf 93       	push	r28
   17cca:	df 93       	push	r29
   17ccc:	0f 92       	push	r0
   17cce:	0f 92       	push	r0
   17cd0:	cd b7       	in	r28, 0x3d	; 61
   17cd2:	de b7       	in	r29, 0x3e	; 62
   17cd4:	89 83       	std	Y+1, r24	; 0x01
   17cd6:	9a 83       	std	Y+2, r25	; 0x02
   17cd8:	e9 81       	ldd	r30, Y+1	; 0x01
   17cda:	fa 81       	ldd	r31, Y+2	; 0x02
   17cdc:	01 90       	ld	r0, Z+
   17cde:	f0 81       	ld	r31, Z
   17ce0:	e0 2d       	mov	r30, r0
   17ce2:	a9 81       	ldd	r26, Y+1	; 0x01
   17ce4:	ba 81       	ldd	r27, Y+2	; 0x02
   17ce6:	80 91 bd 21 	lds	r24, 0x21BD
   17cea:	90 91 be 21 	lds	r25, 0x21BE
   17cee:	14 96       	adiw	r26, 0x04	; 4
   17cf0:	2d 91       	ld	r18, X+
   17cf2:	3c 91       	ld	r19, X
   17cf4:	15 97       	sbiw	r26, 0x05	; 5
   17cf6:	28 17       	cp	r18, r24
   17cf8:	39 07       	cpc	r19, r25
   17cfa:	21 f4       	brne	.+8      	; 0x17d04 <arb_getDevName+0x3c>
   17cfc:	80 81       	ld	r24, Z
   17cfe:	91 81       	ldd	r25, Z+1	; 0x01
   17d00:	02 96       	adiw	r24, 0x02	; 2
   17d02:	02 c0       	rjmp	.+4      	; 0x17d08 <arb_getDevName+0x40>
   17d04:	80 e0       	ldi	r24, 0x00	; 0
   17d06:	90 e0       	ldi	r25, 0x00	; 0
   17d08:	0f 90       	pop	r0
   17d0a:	0f 90       	pop	r0
   17d0c:	df 91       	pop	r29
   17d0e:	cf 91       	pop	r28
   17d10:	08 95       	ret

00017d12 <arb_ioctl>:
   17d12:	cf 92       	push	r12
   17d14:	df 92       	push	r13
   17d16:	ef 92       	push	r14
   17d18:	ff 92       	push	r15
   17d1a:	0f 93       	push	r16
   17d1c:	1f 93       	push	r17
   17d1e:	cf 93       	push	r28
   17d20:	df 93       	push	r29
   17d22:	0f 92       	push	r0
   17d24:	0f 92       	push	r0
   17d26:	cd b7       	in	r28, 0x3d	; 61
   17d28:	de b7       	in	r29, 0x3e	; 62
   17d2a:	89 83       	std	Y+1, r24	; 0x01
   17d2c:	9a 83       	std	Y+2, r25	; 0x02
   17d2e:	69 01       	movw	r12, r18
   17d30:	7a 01       	movw	r14, r20
   17d32:	e9 81       	ldd	r30, Y+1	; 0x01
   17d34:	fa 81       	ldd	r31, Y+2	; 0x02
   17d36:	80 81       	ld	r24, Z
   17d38:	91 81       	ldd	r25, Z+1	; 0x01
   17d3a:	e9 81       	ldd	r30, Y+1	; 0x01
   17d3c:	fa 81       	ldd	r31, Y+2	; 0x02
   17d3e:	40 91 bd 21 	lds	r20, 0x21BD
   17d42:	50 91 be 21 	lds	r21, 0x21BE
   17d46:	24 81       	ldd	r18, Z+4	; 0x04
   17d48:	35 81       	ldd	r19, Z+5	; 0x05
   17d4a:	24 17       	cp	r18, r20
   17d4c:	35 07       	cpc	r19, r21
   17d4e:	91 f4       	brne	.+36     	; 0x17d74 <arb_ioctl+0x62>
   17d50:	dc 01       	movw	r26, r24
   17d52:	ed 91       	ld	r30, X+
   17d54:	fc 91       	ld	r31, X
   17d56:	11 97       	sbiw	r26, 0x01	; 1
   17d58:	03 88       	ldd	r0, Z+19	; 0x13
   17d5a:	f4 89       	ldd	r31, Z+20	; 0x14
   17d5c:	e0 2d       	mov	r30, r0
   17d5e:	30 97       	sbiw	r30, 0x00	; 0
   17d60:	71 f0       	breq	.+28     	; 0x17d7e <arb_ioctl+0x6c>
   17d62:	06 80       	ldd	r0, Z+6	; 0x06
   17d64:	f7 81       	ldd	r31, Z+7	; 0x07
   17d66:	e0 2d       	mov	r30, r0
   17d68:	a7 01       	movw	r20, r14
   17d6a:	96 01       	movw	r18, r12
   17d6c:	19 95       	eicall
   17d6e:	8b 01       	movw	r16, r22
   17d70:	9c 01       	movw	r18, r24
   17d72:	09 c0       	rjmp	.+18     	; 0x17d86 <arb_ioctl+0x74>
   17d74:	09 ef       	ldi	r16, 0xF9	; 249
   17d76:	1f ef       	ldi	r17, 0xFF	; 255
   17d78:	2f ef       	ldi	r18, 0xFF	; 255
   17d7a:	3f ef       	ldi	r19, 0xFF	; 255
   17d7c:	04 c0       	rjmp	.+8      	; 0x17d86 <arb_ioctl+0x74>
   17d7e:	0d ef       	ldi	r16, 0xFD	; 253
   17d80:	1f ef       	ldi	r17, 0xFF	; 255
   17d82:	2f ef       	ldi	r18, 0xFF	; 255
   17d84:	3f ef       	ldi	r19, 0xFF	; 255
   17d86:	b8 01       	movw	r22, r16
   17d88:	c9 01       	movw	r24, r18
   17d8a:	0f 90       	pop	r0
   17d8c:	0f 90       	pop	r0
   17d8e:	df 91       	pop	r29
   17d90:	cf 91       	pop	r28
   17d92:	1f 91       	pop	r17
   17d94:	0f 91       	pop	r16
   17d96:	ff 90       	pop	r15
   17d98:	ef 90       	pop	r14
   17d9a:	df 90       	pop	r13
   17d9c:	cf 90       	pop	r12
   17d9e:	08 95       	ret

00017da0 <arb_close>:
   17da0:	0f 93       	push	r16
   17da2:	1f 93       	push	r17
   17da4:	cf 93       	push	r28
   17da6:	df 93       	push	r29
   17da8:	0f 92       	push	r0
   17daa:	0f 92       	push	r0
   17dac:	cd b7       	in	r28, 0x3d	; 61
   17dae:	de b7       	in	r29, 0x3e	; 62
   17db0:	89 83       	std	Y+1, r24	; 0x01
   17db2:	9a 83       	std	Y+2, r25	; 0x02
   17db4:	e9 81       	ldd	r30, Y+1	; 0x01
   17db6:	fa 81       	ldd	r31, Y+2	; 0x02
   17db8:	00 81       	ld	r16, Z
   17dba:	11 81       	ldd	r17, Z+1	; 0x01
   17dbc:	e9 81       	ldd	r30, Y+1	; 0x01
   17dbe:	fa 81       	ldd	r31, Y+2	; 0x02
   17dc0:	80 91 bd 21 	lds	r24, 0x21BD
   17dc4:	90 91 be 21 	lds	r25, 0x21BE
   17dc8:	24 81       	ldd	r18, Z+4	; 0x04
   17dca:	35 81       	ldd	r19, Z+5	; 0x05
   17dcc:	28 17       	cp	r18, r24
   17dce:	39 07       	cpc	r19, r25
   17dd0:	01 f5       	brne	.+64     	; 0x17e12 <arb_close+0x72>
   17dd2:	d8 01       	movw	r26, r16
   17dd4:	ed 91       	ld	r30, X+
   17dd6:	fc 91       	ld	r31, X
   17dd8:	11 97       	sbiw	r26, 0x01	; 1
   17dda:	03 88       	ldd	r0, Z+19	; 0x13
   17ddc:	f4 89       	ldd	r31, Z+20	; 0x14
   17dde:	e0 2d       	mov	r30, r0
   17de0:	30 97       	sbiw	r30, 0x00	; 0
   17de2:	c9 f0       	breq	.+50     	; 0x17e16 <arb_close+0x76>
   17de4:	00 84       	ldd	r0, Z+8	; 0x08
   17de6:	f1 85       	ldd	r31, Z+9	; 0x09
   17de8:	e0 2d       	mov	r30, r0
   17dea:	c8 01       	movw	r24, r16
   17dec:	19 95       	eicall
   17dee:	87 fd       	sbrc	r24, 7
   17df0:	13 c0       	rjmp	.+38     	; 0x17e18 <arb_close+0x78>
   17df2:	d8 01       	movw	r26, r16
   17df4:	ed 91       	ld	r30, X+
   17df6:	fc 91       	ld	r31, X
   17df8:	82 89       	ldd	r24, Z+18	; 0x12
   17dfa:	81 50       	subi	r24, 0x01	; 1
   17dfc:	82 8b       	std	Z+18, r24	; 0x12
   17dfe:	80 91 bd 21 	lds	r24, 0x21BD
   17e02:	90 91 be 21 	lds	r25, 0x21BE
   17e06:	69 81       	ldd	r22, Y+1	; 0x01
   17e08:	7a 81       	ldd	r23, Y+2	; 0x02
   17e0a:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   17e0e:	80 e0       	ldi	r24, 0x00	; 0
   17e10:	03 c0       	rjmp	.+6      	; 0x17e18 <arb_close+0x78>
   17e12:	89 ef       	ldi	r24, 0xF9	; 249
   17e14:	01 c0       	rjmp	.+2      	; 0x17e18 <arb_close+0x78>
   17e16:	8d ef       	ldi	r24, 0xFD	; 253
   17e18:	0f 90       	pop	r0
   17e1a:	0f 90       	pop	r0
   17e1c:	df 91       	pop	r29
   17e1e:	cf 91       	pop	r28
   17e20:	1f 91       	pop	r17
   17e22:	0f 91       	pop	r16
   17e24:	08 95       	ret

00017e26 <arb_registerDevice>:
   17e26:	ef 92       	push	r14
   17e28:	ff 92       	push	r15
   17e2a:	0f 93       	push	r16
   17e2c:	1f 93       	push	r17
   17e2e:	cf 93       	push	r28
   17e30:	df 93       	push	r29
   17e32:	cd b7       	in	r28, 0x3d	; 61
   17e34:	de b7       	in	r29, 0x3e	; 62
   17e36:	29 97       	sbiw	r28, 0x09	; 9
   17e38:	cd bf       	out	0x3d, r28	; 61
   17e3a:	de bf       	out	0x3e, r29	; 62
   17e3c:	18 2f       	mov	r17, r24
   17e3e:	09 2f       	mov	r16, r25
   17e40:	68 87       	std	Y+8, r22	; 0x08
   17e42:	79 87       	std	Y+9, r23	; 0x09
   17e44:	7a 01       	movw	r14, r20
   17e46:	8f b7       	in	r24, 0x3f	; 63
   17e48:	89 83       	std	Y+1, r24	; 0x01
   17e4a:	f8 94       	cli
   17e4c:	a1 2f       	mov	r26, r17
   17e4e:	b9 2f       	mov	r27, r25
   17e50:	fd 01       	movw	r30, r26
   17e52:	01 90       	ld	r0, Z+
   17e54:	00 20       	and	r0, r0
   17e56:	e9 f7       	brne	.-6      	; 0x17e52 <arb_registerDevice+0x2c>
   17e58:	31 97       	sbiw	r30, 0x01	; 1
   17e5a:	ea 1b       	sub	r30, r26
   17e5c:	fb 0b       	sbc	r31, r27
   17e5e:	e1 31       	cpi	r30, 0x11	; 17
   17e60:	f1 05       	cpc	r31, r1
   17e62:	20 f0       	brcs	.+8      	; 0x17e6c <arb_registerDevice+0x46>
   17e64:	89 81       	ldd	r24, Y+1	; 0x01
   17e66:	8f bf       	out	0x3f, r24	; 63
   17e68:	8c ef       	ldi	r24, 0xFC	; 252
   17e6a:	74 c0       	rjmp	.+232    	; 0x17f54 <arb_registerDevice+0x12e>
   17e6c:	81 2f       	mov	r24, r17
   17e6e:	0e 94 ff bc 	call	0x179fe	; 0x179fe <arb_getDeviceLinkByName>
   17e72:	8e 83       	std	Y+6, r24	; 0x06
   17e74:	9f 83       	std	Y+7, r25	; 0x07
   17e76:	88 85       	ldd	r24, Y+8	; 0x08
   17e78:	99 85       	ldd	r25, Y+9	; 0x09
   17e7a:	78 2f       	mov	r23, r24
   17e7c:	69 2f       	mov	r22, r25
   17e7e:	e0 91 cb 21 	lds	r30, 0x21CB
   17e82:	f0 91 cc 21 	lds	r31, 0x21CC
   17e86:	42 81       	ldd	r20, Z+2	; 0x02
   17e88:	53 81       	ldd	r21, Z+3	; 0x03
   17e8a:	e0 91 cb 21 	lds	r30, 0x21CB
   17e8e:	f0 91 cc 21 	lds	r31, 0x21CC
   17e92:	13 c0       	rjmp	.+38     	; 0x17eba <arb_registerDevice+0x94>
   17e94:	ea 81       	ldd	r30, Y+2	; 0x02
   17e96:	fb 81       	ldd	r31, Y+3	; 0x03
   17e98:	01 90       	ld	r0, Z+
   17e9a:	f0 81       	ld	r31, Z
   17e9c:	e0 2d       	mov	r30, r0
   17e9e:	20 81       	ld	r18, Z
   17ea0:	31 81       	ldd	r19, Z+1	; 0x01
   17ea2:	87 2f       	mov	r24, r23
   17ea4:	96 2f       	mov	r25, r22
   17ea6:	28 17       	cp	r18, r24
   17ea8:	39 07       	cpc	r19, r25
   17eaa:	19 f4       	brne	.+6      	; 0x17eb2 <arb_registerDevice+0x8c>
   17eac:	8a 81       	ldd	r24, Y+2	; 0x02
   17eae:	9b 81       	ldd	r25, Y+3	; 0x03
   17eb0:	0d c0       	rjmp	.+26     	; 0x17ecc <arb_registerDevice+0xa6>
   17eb2:	41 50       	subi	r20, 0x01	; 1
   17eb4:	50 40       	sbci	r21, 0x00	; 0
   17eb6:	ea 81       	ldd	r30, Y+2	; 0x02
   17eb8:	fb 81       	ldd	r31, Y+3	; 0x03
   17eba:	80 85       	ldd	r24, Z+8	; 0x08
   17ebc:	91 85       	ldd	r25, Z+9	; 0x09
   17ebe:	8a 83       	std	Y+2, r24	; 0x02
   17ec0:	9b 83       	std	Y+3, r25	; 0x03
   17ec2:	14 16       	cp	r1, r20
   17ec4:	15 06       	cpc	r1, r21
   17ec6:	34 f3       	brlt	.-52     	; 0x17e94 <arb_registerDevice+0x6e>
   17ec8:	87 ef       	ldi	r24, 0xF7	; 247
   17eca:	9f ef       	ldi	r25, 0xFF	; 255
   17ecc:	8c 83       	std	Y+4, r24	; 0x04
   17ece:	9d 83       	std	Y+5, r25	; 0x05
   17ed0:	8e 81       	ldd	r24, Y+6	; 0x06
   17ed2:	9f 81       	ldd	r25, Y+7	; 0x07
   17ed4:	2f ef       	ldi	r18, 0xFF	; 255
   17ed6:	87 3f       	cpi	r24, 0xF7	; 247
   17ed8:	92 07       	cpc	r25, r18
   17eda:	c9 f5       	brne	.+114    	; 0x17f4e <arb_registerDevice+0x128>
   17edc:	8c 81       	ldd	r24, Y+4	; 0x04
   17ede:	9d 81       	ldd	r25, Y+5	; 0x05
   17ee0:	af ef       	ldi	r26, 0xFF	; 255
   17ee2:	87 3f       	cpi	r24, 0xF7	; 247
   17ee4:	9a 07       	cpc	r25, r26
   17ee6:	99 f5       	brne	.+102    	; 0x17f4e <arb_registerDevice+0x128>
   17ee8:	85 e1       	ldi	r24, 0x15	; 21
   17eea:	90 e0       	ldi	r25, 0x00	; 0
   17eec:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   17ef0:	8e 83       	std	Y+6, r24	; 0x06
   17ef2:	9f 83       	std	Y+7, r25	; 0x07
   17ef4:	8e 81       	ldd	r24, Y+6	; 0x06
   17ef6:	9f 81       	ldd	r25, Y+7	; 0x07
   17ef8:	97 ff       	sbrs	r25, 7
   17efa:	04 c0       	rjmp	.+8      	; 0x17f04 <arb_registerDevice+0xde>
   17efc:	89 81       	ldd	r24, Y+1	; 0x01
   17efe:	8f bf       	out	0x3f, r24	; 63
   17f00:	8f ef       	ldi	r24, 0xFF	; 255
   17f02:	28 c0       	rjmp	.+80     	; 0x17f54 <arb_registerDevice+0x12e>
   17f04:	ee 81       	ldd	r30, Y+6	; 0x06
   17f06:	ff 81       	ldd	r31, Y+7	; 0x07
   17f08:	01 90       	ld	r0, Z+
   17f0a:	f0 81       	ld	r31, Z
   17f0c:	e0 2d       	mov	r30, r0
   17f0e:	88 85       	ldd	r24, Y+8	; 0x08
   17f10:	99 85       	ldd	r25, Y+9	; 0x09
   17f12:	25 e1       	ldi	r18, 0x15	; 21
   17f14:	df 01       	movw	r26, r30
   17f16:	1d 92       	st	X+, r1
   17f18:	2a 95       	dec	r18
   17f1a:	e9 f7       	brne	.-6      	; 0x17f16 <arb_registerDevice+0xf0>
   17f1c:	80 83       	st	Z, r24
   17f1e:	91 83       	std	Z+1, r25	; 0x01
   17f20:	e3 8a       	std	Z+19, r14	; 0x13
   17f22:	f4 8a       	std	Z+20, r15	; 0x14
   17f24:	cf 01       	movw	r24, r30
   17f26:	02 96       	adiw	r24, 0x02	; 2
   17f28:	61 2f       	mov	r22, r17
   17f2a:	70 2f       	mov	r23, r16
   17f2c:	40 e1       	ldi	r20, 0x10	; 16
   17f2e:	50 e0       	ldi	r21, 0x00	; 0
   17f30:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <strncpy>
   17f34:	80 91 cb 21 	lds	r24, 0x21CB
   17f38:	90 91 cc 21 	lds	r25, 0x21CC
   17f3c:	6e 81       	ldd	r22, Y+6	; 0x06
   17f3e:	7f 81       	ldd	r23, Y+7	; 0x07
   17f40:	41 e0       	ldi	r20, 0x01	; 1
   17f42:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   17f46:	89 81       	ldd	r24, Y+1	; 0x01
   17f48:	8f bf       	out	0x3f, r24	; 63
   17f4a:	80 e0       	ldi	r24, 0x00	; 0
   17f4c:	03 c0       	rjmp	.+6      	; 0x17f54 <arb_registerDevice+0x12e>
   17f4e:	89 81       	ldd	r24, Y+1	; 0x01
   17f50:	8f bf       	out	0x3f, r24	; 63
   17f52:	8e ef       	ldi	r24, 0xFE	; 254
   17f54:	29 96       	adiw	r28, 0x09	; 9
   17f56:	cd bf       	out	0x3d, r28	; 61
   17f58:	de bf       	out	0x3e, r29	; 62
   17f5a:	df 91       	pop	r29
   17f5c:	cf 91       	pop	r28
   17f5e:	1f 91       	pop	r17
   17f60:	0f 91       	pop	r16
   17f62:	ff 90       	pop	r15
   17f64:	ef 90       	pop	r14
   17f66:	08 95       	ret

00017f68 <arb_destroyDevice>:
   17f68:	ef 92       	push	r14
   17f6a:	ff 92       	push	r15
   17f6c:	0f 93       	push	r16
   17f6e:	1f 93       	push	r17
   17f70:	cf 93       	push	r28
   17f72:	df 93       	push	r29
   17f74:	0f 92       	push	r0
   17f76:	cd b7       	in	r28, 0x3d	; 61
   17f78:	de b7       	in	r29, 0x3e	; 62
   17f7a:	2f b7       	in	r18, 0x3f	; 63
   17f7c:	29 83       	std	Y+1, r18	; 0x01
   17f7e:	f8 94       	cli
   17f80:	0e 94 ff bc 	call	0x179fe	; 0x179fe <arb_getDeviceLinkByName>
   17f84:	80 93 b3 2b 	sts	0x2BB3, r24
   17f88:	90 93 b4 2b 	sts	0x2BB4, r25
   17f8c:	80 91 b3 2b 	lds	r24, 0x2BB3
   17f90:	90 91 b4 2b 	lds	r25, 0x2BB4
   17f94:	2f ef       	ldi	r18, 0xFF	; 255
   17f96:	87 3f       	cpi	r24, 0xF7	; 247
   17f98:	92 07       	cpc	r25, r18
   17f9a:	21 f4       	brne	.+8      	; 0x17fa4 <arb_destroyDevice+0x3c>
   17f9c:	89 81       	ldd	r24, Y+1	; 0x01
   17f9e:	8f bf       	out	0x3f, r24	; 63
   17fa0:	87 ef       	ldi	r24, 0xF7	; 247
   17fa2:	57 c0       	rjmp	.+174    	; 0x18052 <arb_destroyDevice+0xea>
   17fa4:	e0 91 b3 2b 	lds	r30, 0x2BB3
   17fa8:	f0 91 b4 2b 	lds	r31, 0x2BB4
   17fac:	e0 80       	ld	r14, Z
   17fae:	f1 80       	ldd	r15, Z+1	; 0x01
   17fb0:	e0 91 bd 21 	lds	r30, 0x21BD
   17fb4:	f0 91 be 21 	lds	r31, 0x21BE
   17fb8:	02 81       	ldd	r16, Z+2	; 0x02
   17fba:	13 81       	ldd	r17, Z+3	; 0x03
   17fbc:	e0 91 bd 21 	lds	r30, 0x21BD
   17fc0:	f0 91 be 21 	lds	r31, 0x21BE
   17fc4:	30 c0       	rjmp	.+96     	; 0x18026 <arb_destroyDevice+0xbe>
   17fc6:	e0 91 b1 2b 	lds	r30, 0x2BB1
   17fca:	f0 91 b2 2b 	lds	r31, 0x2BB2
   17fce:	01 90       	ld	r0, Z+
   17fd0:	f0 81       	ld	r31, Z
   17fd2:	e0 2d       	mov	r30, r0
   17fd4:	a0 91 b1 2b 	lds	r26, 0x2BB1
   17fd8:	b0 91 b2 2b 	lds	r27, 0x2BB2
   17fdc:	1a 96       	adiw	r26, 0x0a	; 10
   17fde:	8d 91       	ld	r24, X+
   17fe0:	9c 91       	ld	r25, X
   17fe2:	1b 97       	sbiw	r26, 0x0b	; 11
   17fe4:	80 93 af 2b 	sts	0x2BAF, r24
   17fe8:	90 93 b0 2b 	sts	0x2BB0, r25
   17fec:	80 81       	ld	r24, Z
   17fee:	91 81       	ldd	r25, Z+1	; 0x01
   17ff0:	8e 15       	cp	r24, r14
   17ff2:	9f 05       	cpc	r25, r15
   17ff4:	91 f4       	brne	.+36     	; 0x1801a <arb_destroyDevice+0xb2>
   17ff6:	80 91 bd 21 	lds	r24, 0x21BD
   17ffa:	90 91 be 21 	lds	r25, 0x21BE
   17ffe:	60 91 b1 2b 	lds	r22, 0x2BB1
   18002:	70 91 b2 2b 	lds	r23, 0x2BB2
   18006:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   1800a:	80 91 af 2b 	lds	r24, 0x2BAF
   1800e:	90 91 b0 2b 	lds	r25, 0x2BB0
   18012:	80 93 b1 2b 	sts	0x2BB1, r24
   18016:	90 93 b2 2b 	sts	0x2BB2, r25
   1801a:	01 50       	subi	r16, 0x01	; 1
   1801c:	10 40       	sbci	r17, 0x00	; 0
   1801e:	e0 91 b1 2b 	lds	r30, 0x2BB1
   18022:	f0 91 b2 2b 	lds	r31, 0x2BB2
   18026:	80 85       	ldd	r24, Z+8	; 0x08
   18028:	91 85       	ldd	r25, Z+9	; 0x09
   1802a:	80 93 b1 2b 	sts	0x2BB1, r24
   1802e:	90 93 b2 2b 	sts	0x2BB2, r25
   18032:	10 16       	cp	r1, r16
   18034:	11 06       	cpc	r1, r17
   18036:	3c f2       	brlt	.-114    	; 0x17fc6 <arb_destroyDevice+0x5e>
   18038:	80 91 cb 21 	lds	r24, 0x21CB
   1803c:	90 91 cc 21 	lds	r25, 0x21CC
   18040:	60 91 b3 2b 	lds	r22, 0x2BB3
   18044:	70 91 b4 2b 	lds	r23, 0x2BB4
   18048:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   1804c:	89 81       	ldd	r24, Y+1	; 0x01
   1804e:	8f bf       	out	0x3f, r24	; 63
   18050:	80 e0       	ldi	r24, 0x00	; 0
   18052:	0f 90       	pop	r0
   18054:	df 91       	pop	r29
   18056:	cf 91       	pop	r28
   18058:	1f 91       	pop	r17
   1805a:	0f 91       	pop	r16
   1805c:	ff 90       	pop	r15
   1805e:	ef 90       	pop	r14
   18060:	08 95       	ret

00018062 <main>:
   18062:	60 e0       	ldi	r22, 0x00	; 0
   18064:	78 e4       	ldi	r23, 0x48	; 72
   18066:	88 ee       	ldi	r24, 0xE8	; 232
   18068:	91 e0       	ldi	r25, 0x01	; 1
   1806a:	0e 94 e6 24 	call	0x49cc	; 0x49cc <hal_setCpuFreq>
   1806e:	84 e0       	ldi	r24, 0x04	; 4
   18070:	0e 94 33 2c 	call	0x5866	; 0x5866 <hal_configureIntLevel>
   18074:	0e 94 67 a9 	call	0x152ce	; 0x152ce <usr_appInit>
   18078:	0e 94 3e c7 	call	0x18e7c	; 0x18e7c <arb_schedulerStart>
   1807c:	80 e0       	ldi	r24, 0x00	; 0
   1807e:	90 e0       	ldi	r25, 0x00	; 0
   18080:	08 95       	ret

00018082 <arb_setPrintfDbgLevel>:
   18082:	80 93 bb 2b 	sts	0x2BBB, r24
   18086:	84 30       	cpi	r24, 0x04	; 4
   18088:	59 f0       	breq	.+22     	; 0x180a0 <arb_setPrintfDbgLevel+0x1e>
   1808a:	85 30       	cpi	r24, 0x05	; 5
   1808c:	20 f4       	brcc	.+8      	; 0x18096 <arb_setPrintfDbgLevel+0x14>
   1808e:	81 50       	subi	r24, 0x01	; 1
   18090:	82 30       	cpi	r24, 0x02	; 2
   18092:	18 f4       	brcc	.+6      	; 0x1809a <arb_setPrintfDbgLevel+0x18>
   18094:	05 c0       	rjmp	.+10     	; 0x180a0 <arb_setPrintfDbgLevel+0x1e>
   18096:	80 32       	cpi	r24, 0x20	; 32
   18098:	19 f0       	breq	.+6      	; 0x180a0 <arb_setPrintfDbgLevel+0x1e>
   1809a:	84 e0       	ldi	r24, 0x04	; 4
   1809c:	80 93 bb 2b 	sts	0x2BBB, r24
   180a0:	80 e0       	ldi	r24, 0x00	; 0
   180a2:	08 95       	ret

000180a4 <arb_printf>:
   180a4:	8f 92       	push	r8
   180a6:	9f 92       	push	r9
   180a8:	af 92       	push	r10
   180aa:	bf 92       	push	r11
   180ac:	cf 92       	push	r12
   180ae:	df 92       	push	r13
   180b0:	ef 92       	push	r14
   180b2:	ff 92       	push	r15
   180b4:	0f 93       	push	r16
   180b6:	1f 93       	push	r17
   180b8:	cf 93       	push	r28
   180ba:	df 93       	push	r29
   180bc:	cd b7       	in	r28, 0x3d	; 61
   180be:	de b7       	in	r29, 0x3e	; 62
   180c0:	ae 97       	sbiw	r28, 0x2e	; 46
   180c2:	cd bf       	out	0x3d, r28	; 61
   180c4:	de bf       	out	0x3e, r29	; 62
   180c6:	b6 2e       	mov	r11, r22
   180c8:	a7 2e       	mov	r10, r23
   180ca:	9f b7       	in	r25, 0x3f	; 63
   180cc:	99 83       	std	Y+1, r25	; 0x01
   180ce:	f8 94       	cli
   180d0:	88 2e       	mov	r8, r24
   180d2:	99 24       	eor	r9, r9
   180d4:	86 ff       	sbrs	r24, 6
   180d6:	0c c1       	rjmp	.+536    	; 0x182f0 <arb_printf+0x24c>
   180d8:	94 01       	movw	r18, r8
   180da:	27 70       	andi	r18, 0x07	; 7
   180dc:	30 70       	andi	r19, 0x00	; 0
   180de:	80 91 bb 2b 	lds	r24, 0x2BBB
   180e2:	90 e0       	ldi	r25, 0x00	; 0
   180e4:	28 17       	cp	r18, r24
   180e6:	39 07       	cpc	r19, r25
   180e8:	0c f4       	brge	.+2      	; 0x180ec <arb_printf+0x48>
   180ea:	02 c1       	rjmp	.+516    	; 0x182f0 <arb_printf+0x24c>
   180ec:	ce 01       	movw	r24, r28
   180ee:	46 96       	adiw	r24, 0x16	; 22
   180f0:	0e 94 29 d1 	call	0x1a252	; 0x1a252 <arb_sysTimeNow>
   180f4:	28 a5       	lds	r18, 0x68
   180f6:	f9 a4       	lds	r31, 0xa9
   180f8:	ca a4       	lds	r28, 0xaa
   180fa:	ce 01       	movw	r24, r28
   180fc:	02 96       	adiw	r24, 0x02	; 2
   180fe:	2a 30       	cpi	r18, 0x0A	; 10
   18100:	70 f4       	brcc	.+28     	; 0x1811e <arb_printf+0x7a>
   18102:	00 d0       	rcall	.+0      	; 0x18104 <arb_printf+0x60>
   18104:	00 d0       	rcall	.+0      	; 0x18106 <arb_printf+0x62>
   18106:	ed b7       	in	r30, 0x3d	; 61
   18108:	fe b7       	in	r31, 0x3e	; 62
   1810a:	31 96       	adiw	r30, 0x01	; 1
   1810c:	ad b7       	in	r26, 0x3d	; 61
   1810e:	be b7       	in	r27, 0x3e	; 62
   18110:	11 96       	adiw	r26, 0x01	; 1
   18112:	8d 93       	st	X+, r24
   18114:	9c 93       	st	X, r25
   18116:	12 97       	sbiw	r26, 0x02	; 2
   18118:	8e e2       	ldi	r24, 0x2E	; 46
   1811a:	9e e0       	ldi	r25, 0x0E	; 14
   1811c:	0d c0       	rjmp	.+26     	; 0x18138 <arb_printf+0x94>
   1811e:	00 d0       	rcall	.+0      	; 0x18120 <arb_printf+0x7c>
   18120:	00 d0       	rcall	.+0      	; 0x18122 <arb_printf+0x7e>
   18122:	ed b7       	in	r30, 0x3d	; 61
   18124:	fe b7       	in	r31, 0x3e	; 62
   18126:	31 96       	adiw	r30, 0x01	; 1
   18128:	ad b7       	in	r26, 0x3d	; 61
   1812a:	be b7       	in	r27, 0x3e	; 62
   1812c:	11 96       	adiw	r26, 0x01	; 1
   1812e:	8d 93       	st	X+, r24
   18130:	9c 93       	st	X, r25
   18132:	12 97       	sbiw	r26, 0x02	; 2
   18134:	85 e3       	ldi	r24, 0x35	; 53
   18136:	9e e0       	ldi	r25, 0x0E	; 14
   18138:	82 83       	std	Z+2, r24	; 0x02
   1813a:	93 83       	std	Z+3, r25	; 0x03
   1813c:	24 83       	std	Z+4, r18	; 0x04
   1813e:	15 82       	std	Z+5, r1	; 0x05
   18140:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   18144:	8c 01       	movw	r16, r24
   18146:	8d b7       	in	r24, 0x3d	; 61
   18148:	9e b7       	in	r25, 0x3e	; 62
   1814a:	06 96       	adiw	r24, 0x06	; 6
   1814c:	8d bf       	out	0x3d, r24	; 61
   1814e:	9e bf       	out	0x3e, r25	; 62
   18150:	99 e0       	ldi	r25, 0x09	; 9
   18152:	9f 15       	cp	r25, r15
   18154:	a0 f0       	brcs	.+40     	; 0x1817e <arb_printf+0xda>
   18156:	00 d0       	rcall	.+0      	; 0x18158 <arb_printf+0xb4>
   18158:	00 d0       	rcall	.+0      	; 0x1815a <arb_printf+0xb6>
   1815a:	ed b7       	in	r30, 0x3d	; 61
   1815c:	fe b7       	in	r31, 0x3e	; 62
   1815e:	31 96       	adiw	r30, 0x01	; 1
   18160:	82 e0       	ldi	r24, 0x02	; 2
   18162:	90 e0       	ldi	r25, 0x00	; 0
   18164:	8c 0f       	add	r24, r28
   18166:	9d 1f       	adc	r25, r29
   18168:	80 0f       	add	r24, r16
   1816a:	91 1f       	adc	r25, r17
   1816c:	ad b7       	in	r26, 0x3d	; 61
   1816e:	be b7       	in	r27, 0x3e	; 62
   18170:	11 96       	adiw	r26, 0x01	; 1
   18172:	8d 93       	st	X+, r24
   18174:	9c 93       	st	X, r25
   18176:	12 97       	sbiw	r26, 0x02	; 2
   18178:	8b e3       	ldi	r24, 0x3B	; 59
   1817a:	9e e0       	ldi	r25, 0x0E	; 14
   1817c:	13 c0       	rjmp	.+38     	; 0x181a4 <arb_printf+0x100>
   1817e:	00 d0       	rcall	.+0      	; 0x18180 <arb_printf+0xdc>
   18180:	00 d0       	rcall	.+0      	; 0x18182 <arb_printf+0xde>
   18182:	ed b7       	in	r30, 0x3d	; 61
   18184:	fe b7       	in	r31, 0x3e	; 62
   18186:	31 96       	adiw	r30, 0x01	; 1
   18188:	82 e0       	ldi	r24, 0x02	; 2
   1818a:	90 e0       	ldi	r25, 0x00	; 0
   1818c:	8c 0f       	add	r24, r28
   1818e:	9d 1f       	adc	r25, r29
   18190:	80 0f       	add	r24, r16
   18192:	91 1f       	adc	r25, r17
   18194:	ad b7       	in	r26, 0x3d	; 61
   18196:	be b7       	in	r27, 0x3e	; 62
   18198:	11 96       	adiw	r26, 0x01	; 1
   1819a:	8d 93       	st	X+, r24
   1819c:	9c 93       	st	X, r25
   1819e:	12 97       	sbiw	r26, 0x02	; 2
   181a0:	81 e4       	ldi	r24, 0x41	; 65
   181a2:	9e e0       	ldi	r25, 0x0E	; 14
   181a4:	82 83       	std	Z+2, r24	; 0x02
   181a6:	93 83       	std	Z+3, r25	; 0x03
   181a8:	f4 82       	std	Z+4, r15	; 0x04
   181aa:	15 82       	std	Z+5, r1	; 0x05
   181ac:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   181b0:	08 0f       	add	r16, r24
   181b2:	19 1f       	adc	r17, r25
   181b4:	8d b7       	in	r24, 0x3d	; 61
   181b6:	9e b7       	in	r25, 0x3e	; 62
   181b8:	06 96       	adiw	r24, 0x06	; 6
   181ba:	8d bf       	out	0x3d, r24	; 61
   181bc:	9e bf       	out	0x3e, r25	; 62
   181be:	99 e0       	ldi	r25, 0x09	; 9
   181c0:	9c 15       	cp	r25, r12
   181c2:	a0 f0       	brcs	.+40     	; 0x181ec <arb_printf+0x148>
   181c4:	00 d0       	rcall	.+0      	; 0x181c6 <arb_printf+0x122>
   181c6:	00 d0       	rcall	.+0      	; 0x181c8 <arb_printf+0x124>
   181c8:	ed b7       	in	r30, 0x3d	; 61
   181ca:	fe b7       	in	r31, 0x3e	; 62
   181cc:	31 96       	adiw	r30, 0x01	; 1
   181ce:	82 e0       	ldi	r24, 0x02	; 2
   181d0:	90 e0       	ldi	r25, 0x00	; 0
   181d2:	8c 0f       	add	r24, r28
   181d4:	9d 1f       	adc	r25, r29
   181d6:	80 0f       	add	r24, r16
   181d8:	91 1f       	adc	r25, r17
   181da:	ad b7       	in	r26, 0x3d	; 61
   181dc:	be b7       	in	r27, 0x3e	; 62
   181de:	11 96       	adiw	r26, 0x01	; 1
   181e0:	8d 93       	st	X+, r24
   181e2:	9c 93       	st	X, r25
   181e4:	12 97       	sbiw	r26, 0x02	; 2
   181e6:	86 e4       	ldi	r24, 0x46	; 70
   181e8:	9e e0       	ldi	r25, 0x0E	; 14
   181ea:	13 c0       	rjmp	.+38     	; 0x18212 <arb_printf+0x16e>
   181ec:	00 d0       	rcall	.+0      	; 0x181ee <arb_printf+0x14a>
   181ee:	00 d0       	rcall	.+0      	; 0x181f0 <arb_printf+0x14c>
   181f0:	ed b7       	in	r30, 0x3d	; 61
   181f2:	fe b7       	in	r31, 0x3e	; 62
   181f4:	31 96       	adiw	r30, 0x01	; 1
   181f6:	82 e0       	ldi	r24, 0x02	; 2
   181f8:	90 e0       	ldi	r25, 0x00	; 0
   181fa:	8c 0f       	add	r24, r28
   181fc:	9d 1f       	adc	r25, r29
   181fe:	80 0f       	add	r24, r16
   18200:	91 1f       	adc	r25, r17
   18202:	ad b7       	in	r26, 0x3d	; 61
   18204:	be b7       	in	r27, 0x3e	; 62
   18206:	11 96       	adiw	r26, 0x01	; 1
   18208:	8d 93       	st	X+, r24
   1820a:	9c 93       	st	X, r25
   1820c:	12 97       	sbiw	r26, 0x02	; 2
   1820e:	8c e4       	ldi	r24, 0x4C	; 76
   18210:	9e e0       	ldi	r25, 0x0E	; 14
   18212:	82 83       	std	Z+2, r24	; 0x02
   18214:	93 83       	std	Z+3, r25	; 0x03
   18216:	c4 82       	std	Z+4, r12	; 0x04
   18218:	15 82       	std	Z+5, r1	; 0x05
   1821a:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   1821e:	08 0f       	add	r16, r24
   18220:	19 1f       	adc	r17, r25
   18222:	8d b7       	in	r24, 0x3d	; 61
   18224:	9e b7       	in	r25, 0x3e	; 62
   18226:	06 96       	adiw	r24, 0x06	; 6
   18228:	8d bf       	out	0x3d, r24	; 61
   1822a:	9e bf       	out	0x3e, r25	; 62
   1822c:	6b a5       	lds	r22, 0x6b
   1822e:	7c a5       	lds	r23, 0x6c
   18230:	8d a5       	lds	r24, 0x6d
   18232:	9e a5       	lds	r25, 0x6e
   18234:	28 ee       	ldi	r18, 0xE8	; 232
   18236:	33 e0       	ldi	r19, 0x03	; 3
   18238:	40 e0       	ldi	r20, 0x00	; 0
   1823a:	50 e0       	ldi	r21, 0x00	; 0
   1823c:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   18240:	69 01       	movw	r12, r18
   18242:	7a 01       	movw	r14, r20
   18244:	2a 30       	cpi	r18, 0x0A	; 10
   18246:	31 05       	cpc	r19, r1
   18248:	94 f4       	brge	.+36     	; 0x1826e <arb_printf+0x1ca>
   1824a:	00 d0       	rcall	.+0      	; 0x1824c <arb_printf+0x1a8>
   1824c:	00 d0       	rcall	.+0      	; 0x1824e <arb_printf+0x1aa>
   1824e:	ed b7       	in	r30, 0x3d	; 61
   18250:	fe b7       	in	r31, 0x3e	; 62
   18252:	31 96       	adiw	r30, 0x01	; 1
   18254:	ce 01       	movw	r24, r28
   18256:	02 96       	adiw	r24, 0x02	; 2
   18258:	80 0f       	add	r24, r16
   1825a:	91 1f       	adc	r25, r17
   1825c:	ad b7       	in	r26, 0x3d	; 61
   1825e:	be b7       	in	r27, 0x3e	; 62
   18260:	11 96       	adiw	r26, 0x01	; 1
   18262:	8d 93       	st	X+, r24
   18264:	9c 93       	st	X, r25
   18266:	12 97       	sbiw	r26, 0x02	; 2
   18268:	81 e5       	ldi	r24, 0x51	; 81
   1826a:	9e e0       	ldi	r25, 0x0E	; 14
   1826c:	2a c0       	rjmp	.+84     	; 0x182c2 <arb_printf+0x21e>
   1826e:	24 36       	cpi	r18, 0x64	; 100
   18270:	31 05       	cpc	r19, r1
   18272:	94 f4       	brge	.+36     	; 0x18298 <arb_printf+0x1f4>
   18274:	00 d0       	rcall	.+0      	; 0x18276 <arb_printf+0x1d2>
   18276:	00 d0       	rcall	.+0      	; 0x18278 <arb_printf+0x1d4>
   18278:	ed b7       	in	r30, 0x3d	; 61
   1827a:	fe b7       	in	r31, 0x3e	; 62
   1827c:	31 96       	adiw	r30, 0x01	; 1
   1827e:	ce 01       	movw	r24, r28
   18280:	02 96       	adiw	r24, 0x02	; 2
   18282:	80 0f       	add	r24, r16
   18284:	91 1f       	adc	r25, r17
   18286:	ad b7       	in	r26, 0x3d	; 61
   18288:	be b7       	in	r27, 0x3e	; 62
   1828a:	11 96       	adiw	r26, 0x01	; 1
   1828c:	8d 93       	st	X+, r24
   1828e:	9c 93       	st	X, r25
   18290:	12 97       	sbiw	r26, 0x02	; 2
   18292:	8a e5       	ldi	r24, 0x5A	; 90
   18294:	9e e0       	ldi	r25, 0x0E	; 14
   18296:	15 c0       	rjmp	.+42     	; 0x182c2 <arb_printf+0x21e>
   18298:	a3 e0       	ldi	r26, 0x03	; 3
   1829a:	28 3e       	cpi	r18, 0xE8	; 232
   1829c:	3a 07       	cpc	r19, r26
   1829e:	f4 f4       	brge	.+60     	; 0x182dc <arb_printf+0x238>
   182a0:	00 d0       	rcall	.+0      	; 0x182a2 <arb_printf+0x1fe>
   182a2:	00 d0       	rcall	.+0      	; 0x182a4 <arb_printf+0x200>
   182a4:	ed b7       	in	r30, 0x3d	; 61
   182a6:	fe b7       	in	r31, 0x3e	; 62
   182a8:	31 96       	adiw	r30, 0x01	; 1
   182aa:	ce 01       	movw	r24, r28
   182ac:	02 96       	adiw	r24, 0x02	; 2
   182ae:	80 0f       	add	r24, r16
   182b0:	91 1f       	adc	r25, r17
   182b2:	ad b7       	in	r26, 0x3d	; 61
   182b4:	be b7       	in	r27, 0x3e	; 62
   182b6:	11 96       	adiw	r26, 0x01	; 1
   182b8:	8d 93       	st	X+, r24
   182ba:	9c 93       	st	X, r25
   182bc:	12 97       	sbiw	r26, 0x02	; 2
   182be:	82 e6       	ldi	r24, 0x62	; 98
   182c0:	9e e0       	ldi	r25, 0x0E	; 14
   182c2:	82 83       	std	Z+2, r24	; 0x02
   182c4:	93 83       	std	Z+3, r25	; 0x03
   182c6:	c4 82       	std	Z+4, r12	; 0x04
   182c8:	d5 82       	std	Z+5, r13	; 0x05
   182ca:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   182ce:	08 0f       	add	r16, r24
   182d0:	19 1f       	adc	r17, r25
   182d2:	8d b7       	in	r24, 0x3d	; 61
   182d4:	9e b7       	in	r25, 0x3e	; 62
   182d6:	06 96       	adiw	r24, 0x06	; 6
   182d8:	8d bf       	out	0x3d, r24	; 61
   182da:	9e bf       	out	0x3e, r25	; 62
   182dc:	80 91 b9 2b 	lds	r24, 0x2BB9
   182e0:	90 91 ba 2b 	lds	r25, 0x2BBA
   182e4:	be 01       	movw	r22, r28
   182e6:	6e 5f       	subi	r22, 0xFE	; 254
   182e8:	7f 4f       	sbci	r23, 0xFF	; 255
   182ea:	a8 01       	movw	r20, r16
   182ec:	0e 94 94 d7 	call	0x1af28	; 0x1af28 <utl_writeBlock>
   182f0:	97 e0       	ldi	r25, 0x07	; 7
   182f2:	89 22       	and	r8, r25
   182f4:	99 24       	eor	r9, r9
   182f6:	80 91 bb 2b 	lds	r24, 0x2BBB
   182fa:	90 e0       	ldi	r25, 0x00	; 0
   182fc:	88 16       	cp	r8, r24
   182fe:	99 06       	cpc	r9, r25
   18300:	d4 f0       	brlt	.+52     	; 0x18336 <arb_printf+0x292>
   18302:	80 91 b9 2b 	lds	r24, 0x2BB9
   18306:	90 91 ba 2b 	lds	r25, 0x2BBA
   1830a:	eb 2d       	mov	r30, r11
   1830c:	fa 2d       	mov	r31, r10
   1830e:	df 01       	movw	r26, r30
   18310:	0d 90       	ld	r0, X+
   18312:	00 20       	and	r0, r0
   18314:	e9 f7       	brne	.-6      	; 0x18310 <arb_printf+0x26c>
   18316:	ad 01       	movw	r20, r26
   18318:	41 50       	subi	r20, 0x01	; 1
   1831a:	50 40       	sbci	r21, 0x00	; 0
   1831c:	4e 1b       	sub	r20, r30
   1831e:	5f 0b       	sbc	r21, r31
   18320:	6b 2d       	mov	r22, r11
   18322:	7a 2d       	mov	r23, r10
   18324:	0e 94 94 d7 	call	0x1af28	; 0x1af28 <utl_writeBlock>
   18328:	80 91 b9 2b 	lds	r24, 0x2BB9
   1832c:	90 91 ba 2b 	lds	r25, 0x2BBA
   18330:	6a e0       	ldi	r22, 0x0A	; 10
   18332:	0e 94 2f d7 	call	0x1ae5e	; 0x1ae5e <utl_writeByte>
   18336:	89 81       	ldd	r24, Y+1	; 0x01
   18338:	8f bf       	out	0x3f, r24	; 63
   1833a:	ae 96       	adiw	r28, 0x2e	; 46
   1833c:	cd bf       	out	0x3d, r28	; 61
   1833e:	de bf       	out	0x3e, r29	; 62
   18340:	df 91       	pop	r29
   18342:	cf 91       	pop	r28
   18344:	1f 91       	pop	r17
   18346:	0f 91       	pop	r16
   18348:	ff 90       	pop	r15
   1834a:	ef 90       	pop	r14
   1834c:	df 90       	pop	r13
   1834e:	cf 90       	pop	r12
   18350:	bf 90       	pop	r11
   18352:	af 90       	pop	r10
   18354:	9f 90       	pop	r9
   18356:	8f 90       	pop	r8
   18358:	08 95       	ret

0001835a <arb_printfFlushBuf>:
   1835a:	6f 92       	push	r6
   1835c:	7f 92       	push	r7
   1835e:	8f 92       	push	r8
   18360:	9f 92       	push	r9
   18362:	af 92       	push	r10
   18364:	bf 92       	push	r11
   18366:	cf 92       	push	r12
   18368:	df 92       	push	r13
   1836a:	ef 92       	push	r14
   1836c:	ff 92       	push	r15
   1836e:	0f 93       	push	r16
   18370:	1f 93       	push	r17
   18372:	cf 93       	push	r28
   18374:	df 93       	push	r29
   18376:	cd b7       	in	r28, 0x3d	; 61
   18378:	de b7       	in	r29, 0x3e	; 62
   1837a:	66 97       	sbiw	r28, 0x16	; 22
   1837c:	cd bf       	out	0x3d, r28	; 61
   1837e:	de bf       	out	0x3e, r29	; 62
   18380:	8f b7       	in	r24, 0x3f	; 63
   18382:	8a 83       	std	Y+2, r24	; 0x02
   18384:	f8 94       	cli
   18386:	80 91 b9 2b 	lds	r24, 0x2BB9
   1838a:	90 91 ba 2b 	lds	r25, 0x2BBA
   1838e:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <utl_getBufferPtr>
   18392:	4c 01       	movw	r8, r24
   18394:	80 91 b9 2b 	lds	r24, 0x2BB9
   18398:	90 91 ba 2b 	lds	r25, 0x2BBA
   1839c:	0e 94 f3 d6 	call	0x1ade6	; 0x1ade6 <utl_getBufferFullLevel>
   183a0:	6c 01       	movw	r12, r24
   183a2:	80 91 b9 2b 	lds	r24, 0x2BB9
   183a6:	90 91 ba 2b 	lds	r25, 0x2BBA
   183aa:	0e 94 07 d7 	call	0x1ae0e	; 0x1ae0e <utl_getBufferSize>
   183ae:	8c 01       	movw	r16, r24
   183b0:	80 91 b9 2b 	lds	r24, 0x2BB9
   183b4:	90 91 ba 2b 	lds	r25, 0x2BBA
   183b8:	0e 94 80 d7 	call	0x1af00	; 0x1af00 <utl_getBufRdPtr>
   183bc:	2a 81       	ldd	r18, Y+2	; 0x02
   183be:	2f bf       	out	0x3f, r18	; 63
   183c0:	c0 16       	cp	r12, r16
   183c2:	d1 06       	cpc	r13, r17
   183c4:	cc f1       	brlt	.+114    	; 0x18438 <arb_printfFlushBuf+0xde>
   183c6:	80 91 b5 2b 	lds	r24, 0x2BB5
   183ca:	90 91 b6 2b 	lds	r25, 0x2BB6
   183ce:	b4 01       	movw	r22, r8
   183d0:	a8 01       	movw	r20, r16
   183d2:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   183d6:	80 91 bc 2b 	lds	r24, 0x2BBC
   183da:	88 23       	and	r24, r24
   183dc:	19 f1       	breq	.+70     	; 0x18424 <arb_printfFlushBuf+0xca>
   183de:	80 91 b7 2b 	lds	r24, 0x2BB7
   183e2:	90 91 b8 2b 	lds	r25, 0x2BB8
   183e6:	b4 01       	movw	r22, r8
   183e8:	a8 01       	movw	r20, r16
   183ea:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   183ee:	80 17       	cp	r24, r16
   183f0:	91 07       	cpc	r25, r17
   183f2:	c1 f0       	breq	.+48     	; 0x18424 <arb_printfFlushBuf+0xca>
   183f4:	8e 01       	movw	r16, r28
   183f6:	0d 5f       	subi	r16, 0xFD	; 253
   183f8:	1f 4f       	sbci	r17, 0xFF	; 255
   183fa:	c8 01       	movw	r24, r16
   183fc:	69 ed       	ldi	r22, 0xD9	; 217
   183fe:	71 e2       	ldi	r23, 0x21	; 33
   18400:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <strcpy>
   18404:	80 91 b5 2b 	lds	r24, 0x2BB5
   18408:	90 91 b6 2b 	lds	r25, 0x2BB6
   1840c:	f8 01       	movw	r30, r16
   1840e:	01 90       	ld	r0, Z+
   18410:	00 20       	and	r0, r0
   18412:	e9 f7       	brne	.-6      	; 0x1840e <arb_printfFlushBuf+0xb4>
   18414:	af 01       	movw	r20, r30
   18416:	41 50       	subi	r20, 0x01	; 1
   18418:	50 40       	sbci	r21, 0x00	; 0
   1841a:	40 1b       	sub	r20, r16
   1841c:	51 0b       	sbc	r21, r17
   1841e:	b8 01       	movw	r22, r16
   18420:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   18424:	8f b7       	in	r24, 0x3f	; 63
   18426:	89 83       	std	Y+1, r24	; 0x01
   18428:	f8 94       	cli
   1842a:	80 91 b9 2b 	lds	r24, 0x2BB9
   1842e:	90 91 ba 2b 	lds	r25, 0x2BBA
   18432:	0e 94 6f d8 	call	0x1b0de	; 0x1b0de <ult_resetBuffer>
   18436:	8b c0       	rjmp	.+278    	; 0x1854e <arb_printfFlushBuf+0x1f4>
   18438:	1c 14       	cp	r1, r12
   1843a:	1d 04       	cpc	r1, r13
   1843c:	0c f0       	brlt	.+2      	; 0x18440 <arb_printfFlushBuf+0xe6>
   1843e:	89 c0       	rjmp	.+274    	; 0x18552 <arb_printfFlushBuf+0x1f8>
   18440:	08 1b       	sub	r16, r24
   18442:	19 0b       	sbc	r17, r25
   18444:	74 01       	movw	r14, r8
   18446:	e8 0e       	add	r14, r24
   18448:	f9 1e       	adc	r15, r25
   1844a:	80 91 b5 2b 	lds	r24, 0x2BB5
   1844e:	90 91 b6 2b 	lds	r25, 0x2BB6
   18452:	b7 01       	movw	r22, r14
   18454:	0c 15       	cp	r16, r12
   18456:	1d 05       	cpc	r17, r13
   18458:	0c f0       	brlt	.+2      	; 0x1845c <arb_printfFlushBuf+0x102>
   1845a:	45 c0       	rjmp	.+138    	; 0x184e6 <arb_printfFlushBuf+0x18c>
   1845c:	a8 01       	movw	r20, r16
   1845e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   18462:	80 91 b5 2b 	lds	r24, 0x2BB5
   18466:	90 91 b6 2b 	lds	r25, 0x2BB6
   1846a:	56 01       	movw	r10, r12
   1846c:	a0 1a       	sub	r10, r16
   1846e:	b1 0a       	sbc	r11, r17
   18470:	7a 2c       	mov	r7, r10
   18472:	6b 2c       	mov	r6, r11
   18474:	b4 01       	movw	r22, r8
   18476:	a5 01       	movw	r20, r10
   18478:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1847c:	80 91 bc 2b 	lds	r24, 0x2BBC
   18480:	88 23       	and	r24, r24
   18482:	09 f4       	brne	.+2      	; 0x18486 <arb_printfFlushBuf+0x12c>
   18484:	5a c0       	rjmp	.+180    	; 0x1853a <arb_printfFlushBuf+0x1e0>
   18486:	80 91 b7 2b 	lds	r24, 0x2BB7
   1848a:	90 91 b8 2b 	lds	r25, 0x2BB8
   1848e:	b7 01       	movw	r22, r14
   18490:	a8 01       	movw	r20, r16
   18492:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   18496:	80 17       	cp	r24, r16
   18498:	91 07       	cpc	r25, r17
   1849a:	c1 f0       	breq	.+48     	; 0x184cc <arb_printfFlushBuf+0x172>
   1849c:	8e 01       	movw	r16, r28
   1849e:	0d 5f       	subi	r16, 0xFD	; 253
   184a0:	1f 4f       	sbci	r17, 0xFF	; 255
   184a2:	c8 01       	movw	r24, r16
   184a4:	69 ed       	ldi	r22, 0xD9	; 217
   184a6:	71 e2       	ldi	r23, 0x21	; 33
   184a8:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <strcpy>
   184ac:	80 91 b5 2b 	lds	r24, 0x2BB5
   184b0:	90 91 b6 2b 	lds	r25, 0x2BB6
   184b4:	f8 01       	movw	r30, r16
   184b6:	01 90       	ld	r0, Z+
   184b8:	00 20       	and	r0, r0
   184ba:	e9 f7       	brne	.-6      	; 0x184b6 <arb_printfFlushBuf+0x15c>
   184bc:	af 01       	movw	r20, r30
   184be:	41 50       	subi	r20, 0x01	; 1
   184c0:	50 40       	sbci	r21, 0x00	; 0
   184c2:	40 1b       	sub	r20, r16
   184c4:	51 0b       	sbc	r21, r17
   184c6:	b8 01       	movw	r22, r16
   184c8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   184cc:	80 91 b7 2b 	lds	r24, 0x2BB7
   184d0:	90 91 b8 2b 	lds	r25, 0x2BB8
   184d4:	b4 01       	movw	r22, r8
   184d6:	47 2d       	mov	r20, r7
   184d8:	56 2d       	mov	r21, r6
   184da:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   184de:	8a 15       	cp	r24, r10
   184e0:	9b 05       	cpc	r25, r11
   184e2:	99 f4       	brne	.+38     	; 0x1850a <arb_printfFlushBuf+0x1b0>
   184e4:	2a c0       	rjmp	.+84     	; 0x1853a <arb_printfFlushBuf+0x1e0>
   184e6:	a6 01       	movw	r20, r12
   184e8:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   184ec:	80 91 bc 2b 	lds	r24, 0x2BBC
   184f0:	88 23       	and	r24, r24
   184f2:	19 f1       	breq	.+70     	; 0x1853a <arb_printfFlushBuf+0x1e0>
   184f4:	80 91 b7 2b 	lds	r24, 0x2BB7
   184f8:	90 91 b8 2b 	lds	r25, 0x2BB8
   184fc:	b7 01       	movw	r22, r14
   184fe:	a6 01       	movw	r20, r12
   18500:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   18504:	8c 15       	cp	r24, r12
   18506:	9d 05       	cpc	r25, r13
   18508:	c1 f0       	breq	.+48     	; 0x1853a <arb_printfFlushBuf+0x1e0>
   1850a:	8e 01       	movw	r16, r28
   1850c:	0d 5f       	subi	r16, 0xFD	; 253
   1850e:	1f 4f       	sbci	r17, 0xFF	; 255
   18510:	c8 01       	movw	r24, r16
   18512:	69 ed       	ldi	r22, 0xD9	; 217
   18514:	71 e2       	ldi	r23, 0x21	; 33
   18516:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <strcpy>
   1851a:	80 91 b5 2b 	lds	r24, 0x2BB5
   1851e:	90 91 b6 2b 	lds	r25, 0x2BB6
   18522:	f8 01       	movw	r30, r16
   18524:	01 90       	ld	r0, Z+
   18526:	00 20       	and	r0, r0
   18528:	e9 f7       	brne	.-6      	; 0x18524 <arb_printfFlushBuf+0x1ca>
   1852a:	af 01       	movw	r20, r30
   1852c:	41 50       	subi	r20, 0x01	; 1
   1852e:	50 40       	sbci	r21, 0x00	; 0
   18530:	40 1b       	sub	r20, r16
   18532:	51 0b       	sbc	r21, r17
   18534:	b8 01       	movw	r22, r16
   18536:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <arb_write>
   1853a:	8f b7       	in	r24, 0x3f	; 63
   1853c:	89 83       	std	Y+1, r24	; 0x01
   1853e:	f8 94       	cli
   18540:	80 91 b9 2b 	lds	r24, 0x2BB9
   18544:	90 91 ba 2b 	lds	r25, 0x2BBA
   18548:	b6 01       	movw	r22, r12
   1854a:	0e 94 59 d7 	call	0x1aeb2	; 0x1aeb2 <utl_incrBufRdPtr>
   1854e:	89 81       	ldd	r24, Y+1	; 0x01
   18550:	8f bf       	out	0x3f, r24	; 63
   18552:	66 96       	adiw	r28, 0x16	; 22
   18554:	cd bf       	out	0x3d, r28	; 61
   18556:	de bf       	out	0x3e, r29	; 62
   18558:	df 91       	pop	r29
   1855a:	cf 91       	pop	r28
   1855c:	1f 91       	pop	r17
   1855e:	0f 91       	pop	r16
   18560:	ff 90       	pop	r15
   18562:	ef 90       	pop	r14
   18564:	df 90       	pop	r13
   18566:	cf 90       	pop	r12
   18568:	bf 90       	pop	r11
   1856a:	af 90       	pop	r10
   1856c:	9f 90       	pop	r9
   1856e:	8f 90       	pop	r8
   18570:	7f 90       	pop	r7
   18572:	6f 90       	pop	r6
   18574:	08 95       	ret

00018576 <arb_printfInit>:
   18576:	0f 93       	push	r16
   18578:	1f 93       	push	r17
   1857a:	cf 93       	push	r28
   1857c:	df 93       	push	r29
   1857e:	8b 01       	movw	r16, r22
   18580:	ea 01       	movw	r28, r20
   18582:	20 e2       	ldi	r18, 0x20	; 32
   18584:	20 93 bb 2b 	sts	0x2BBB, r18
   18588:	10 92 bc 2b 	sts	0x2BBC, r1
   1858c:	63 e0       	ldi	r22, 0x03	; 3
   1858e:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   18592:	80 93 b5 2b 	sts	0x2BB5, r24
   18596:	90 93 b6 2b 	sts	0x2BB6, r25
   1859a:	80 91 b5 2b 	lds	r24, 0x2BB5
   1859e:	90 91 b6 2b 	lds	r25, 0x2BB6
   185a2:	97 ff       	sbrs	r25, 7
   185a4:	05 c0       	rjmp	.+10     	; 0x185b0 <arb_printfInit+0x3a>
   185a6:	80 91 b5 2b 	lds	r24, 0x2BB5
   185aa:	90 91 b6 2b 	lds	r25, 0x2BB6
   185ae:	37 c0       	rjmp	.+110    	; 0x1861e <arb_printfInit+0xa8>
   185b0:	20 97       	sbiw	r28, 0x00	; 0
   185b2:	29 f1       	breq	.+74     	; 0x185fe <arb_printfInit+0x88>
   185b4:	ce 01       	movw	r24, r28
   185b6:	6a e4       	ldi	r22, 0x4A	; 74
   185b8:	0e 94 3d bd 	call	0x17a7a	; 0x17a7a <arb_open>
   185bc:	80 93 b7 2b 	sts	0x2BB7, r24
   185c0:	90 93 b8 2b 	sts	0x2BB8, r25
   185c4:	80 91 b7 2b 	lds	r24, 0x2BB7
   185c8:	90 91 b8 2b 	lds	r25, 0x2BB8
   185cc:	97 ff       	sbrs	r25, 7
   185ce:	05 c0       	rjmp	.+10     	; 0x185da <arb_printfInit+0x64>
   185d0:	80 91 b7 2b 	lds	r24, 0x2BB7
   185d4:	90 91 b8 2b 	lds	r25, 0x2BB8
   185d8:	22 c0       	rjmp	.+68     	; 0x1861e <arb_printfInit+0xa8>
   185da:	80 91 b7 2b 	lds	r24, 0x2BB7
   185de:	90 91 b8 2b 	lds	r25, 0x2BB8
   185e2:	62 e0       	ldi	r22, 0x02	; 2
   185e4:	70 e0       	ldi	r23, 0x00	; 0
   185e6:	20 e0       	ldi	r18, 0x00	; 0
   185e8:	30 e0       	ldi	r19, 0x00	; 0
   185ea:	a9 01       	movw	r20, r18
   185ec:	0e 94 89 be 	call	0x17d12	; 0x17d12 <arb_ioctl>
   185f0:	dc 01       	movw	r26, r24
   185f2:	cb 01       	movw	r24, r22
   185f4:	b7 fd       	sbrc	r27, 7
   185f6:	12 c0       	rjmp	.+36     	; 0x1861c <arb_printfInit+0xa6>
   185f8:	81 e0       	ldi	r24, 0x01	; 1
   185fa:	80 93 bc 2b 	sts	0x2BBC, r24
   185fe:	c8 01       	movw	r24, r16
   18600:	0e 94 87 d8 	call	0x1b10e	; 0x1b10e <utl_createBuffer>
   18604:	80 93 b9 2b 	sts	0x2BB9, r24
   18608:	90 93 ba 2b 	sts	0x2BBA, r25
   1860c:	80 91 b9 2b 	lds	r24, 0x2BB9
   18610:	90 91 ba 2b 	lds	r25, 0x2BBA
   18614:	89 2f       	mov	r24, r25
   18616:	88 0f       	add	r24, r24
   18618:	88 0b       	sbc	r24, r24
   1861a:	01 c0       	rjmp	.+2      	; 0x1861e <arb_printfInit+0xa8>
   1861c:	80 ef       	ldi	r24, 0xF0	; 240
   1861e:	df 91       	pop	r29
   18620:	cf 91       	pop	r28
   18622:	1f 91       	pop	r17
   18624:	0f 91       	pop	r16
   18626:	08 95       	ret

00018628 <arb_roundRobinScheduler>:
   18628:	2f 92       	push	r2
   1862a:	3f 92       	push	r3
   1862c:	4f 92       	push	r4
   1862e:	5f 92       	push	r5
   18630:	6f 92       	push	r6
   18632:	7f 92       	push	r7
   18634:	8f 92       	push	r8
   18636:	9f 92       	push	r9
   18638:	af 92       	push	r10
   1863a:	bf 92       	push	r11
   1863c:	cf 92       	push	r12
   1863e:	df 92       	push	r13
   18640:	ef 92       	push	r14
   18642:	ff 92       	push	r15
   18644:	0f 93       	push	r16
   18646:	1f 93       	push	r17
   18648:	cf 93       	push	r28
   1864a:	df 93       	push	r29
   1864c:	cd b7       	in	r28, 0x3d	; 61
   1864e:	de b7       	in	r29, 0x3e	; 62
   18650:	28 97       	sbiw	r28, 0x08	; 8
   18652:	cd bf       	out	0x3d, r28	; 61
   18654:	de bf       	out	0x3e, r29	; 62
   18656:	e0 91 2c 22 	lds	r30, 0x222C
   1865a:	f0 91 2d 22 	lds	r31, 0x222D
   1865e:	86 81       	ldd	r24, Z+6	; 0x06
   18660:	97 81       	ldd	r25, Z+7	; 0x07
   18662:	8b 83       	std	Y+3, r24	; 0x03
   18664:	9c 83       	std	Y+4, r25	; 0x04
   18666:	80 91 bf 2b 	lds	r24, 0x2BBF
   1866a:	88 23       	and	r24, r24
   1866c:	09 f4       	brne	.+2      	; 0x18670 <arb_roundRobinScheduler+0x48>
   1866e:	98 c1       	rjmp	.+816    	; 0x189a0 <arb_roundRobinScheduler+0x378>
   18670:	eb 81       	ldd	r30, Y+3	; 0x03
   18672:	fc 81       	ldd	r31, Y+4	; 0x04
   18674:	80 85       	ldd	r24, Z+8	; 0x08
   18676:	91 85       	ldd	r25, Z+9	; 0x09
   18678:	8b 83       	std	Y+3, r24	; 0x03
   1867a:	9c 83       	std	Y+4, r25	; 0x04
   1867c:	eb 81       	ldd	r30, Y+3	; 0x03
   1867e:	fc 81       	ldd	r31, Y+4	; 0x04
   18680:	01 90       	ld	r0, Z+
   18682:	f0 81       	ld	r31, Z
   18684:	e0 2d       	mov	r30, r0
   18686:	81 81       	ldd	r24, Z+1	; 0x01
   18688:	83 30       	cpi	r24, 0x03	; 3
   1868a:	91 f3       	breq	.-28     	; 0x18670 <arb_roundRobinScheduler+0x48>
   1868c:	a0 91 2c 22 	lds	r26, 0x222C
   18690:	b0 91 2d 22 	lds	r27, 0x222D
   18694:	8b 81       	ldd	r24, Y+3	; 0x03
   18696:	9c 81       	ldd	r25, Y+4	; 0x04
   18698:	16 96       	adiw	r26, 0x06	; 6
   1869a:	8d 93       	st	X+, r24
   1869c:	9c 93       	st	X, r25
   1869e:	17 97       	sbiw	r26, 0x07	; 7
   186a0:	e0 93 bd 2b 	sts	0x2BBD, r30
   186a4:	f0 93 be 2b 	sts	0x2BBE, r31
   186a8:	81 e0       	ldi	r24, 0x01	; 1
   186aa:	81 83       	std	Z+1, r24	; 0x01
   186ac:	e0 91 2c 22 	lds	r30, 0x222C
   186b0:	f0 91 2d 22 	lds	r31, 0x222D
   186b4:	42 81       	ldd	r20, Z+2	; 0x02
   186b6:	53 81       	ldd	r21, Z+3	; 0x03
   186b8:	e0 91 2c 22 	lds	r30, 0x222C
   186bc:	f0 91 2d 22 	lds	r31, 0x222D
   186c0:	80 85       	ldd	r24, Z+8	; 0x08
   186c2:	91 85       	ldd	r25, Z+9	; 0x09
   186c4:	89 83       	std	Y+1, r24	; 0x01
   186c6:	9a 83       	std	Y+2, r25	; 0x02
   186c8:	80 91 ca 2b 	lds	r24, 0x2BCA
   186cc:	90 91 cb 2b 	lds	r25, 0x2BCB
   186d0:	a0 91 cc 2b 	lds	r26, 0x2BCC
   186d4:	b0 91 cd 2b 	lds	r27, 0x2BCD
   186d8:	16 c0       	rjmp	.+44     	; 0x18706 <arb_roundRobinScheduler+0xde>
   186da:	e9 81       	ldd	r30, Y+1	; 0x01
   186dc:	fa 81       	ldd	r31, Y+2	; 0x02
   186de:	01 90       	ld	r0, Z+
   186e0:	f0 81       	ld	r31, Z
   186e2:	e0 2d       	mov	r30, r0
   186e4:	21 81       	ldd	r18, Z+1	; 0x01
   186e6:	22 30       	cpi	r18, 0x02	; 2
   186e8:	30 f4       	brcc	.+12     	; 0x186f6 <arb_roundRobinScheduler+0xce>
   186ea:	22 81       	ldd	r18, Z+2	; 0x02
   186ec:	2f 3f       	cpi	r18, 0xFF	; 255
   186ee:	19 f0       	breq	.+6      	; 0x186f6 <arb_roundRobinScheduler+0xce>
   186f0:	01 96       	adiw	r24, 0x01	; 1
   186f2:	a1 1d       	adc	r26, r1
   186f4:	b1 1d       	adc	r27, r1
   186f6:	41 50       	subi	r20, 0x01	; 1
   186f8:	50 40       	sbci	r21, 0x00	; 0
   186fa:	e9 81       	ldd	r30, Y+1	; 0x01
   186fc:	fa 81       	ldd	r31, Y+2	; 0x02
   186fe:	20 85       	ldd	r18, Z+8	; 0x08
   18700:	31 85       	ldd	r19, Z+9	; 0x09
   18702:	29 83       	std	Y+1, r18	; 0x01
   18704:	3a 83       	std	Y+2, r19	; 0x02
   18706:	41 15       	cp	r20, r1
   18708:	51 05       	cpc	r21, r1
   1870a:	39 f7       	brne	.-50     	; 0x186da <arb_roundRobinScheduler+0xb2>
   1870c:	80 93 ca 2b 	sts	0x2BCA, r24
   18710:	90 93 cb 2b 	sts	0x2BCB, r25
   18714:	a0 93 cc 2b 	sts	0x2BCC, r26
   18718:	b0 93 cd 2b 	sts	0x2BCD, r27
   1871c:	20 91 c0 2b 	lds	r18, 0x2BC0
   18720:	30 91 c1 2b 	lds	r19, 0x2BC1
   18724:	2f 5f       	subi	r18, 0xFF	; 255
   18726:	3f 4f       	sbci	r19, 0xFF	; 255
   18728:	20 93 c0 2b 	sts	0x2BC0, r18
   1872c:	30 93 c1 2b 	sts	0x2BC1, r19
   18730:	41 e0       	ldi	r20, 0x01	; 1
   18732:	24 3f       	cpi	r18, 0xF4	; 244
   18734:	34 07       	cpc	r19, r20
   18736:	09 f0       	breq	.+2      	; 0x1873a <arb_roundRobinScheduler+0x112>
   18738:	33 c1       	rjmp	.+614    	; 0x189a0 <arb_roundRobinScheduler+0x378>
   1873a:	bc 01       	movw	r22, r24
   1873c:	cd 01       	movw	r24, r26
   1873e:	2f e0       	ldi	r18, 0x0F	; 15
   18740:	66 0f       	add	r22, r22
   18742:	77 1f       	adc	r23, r23
   18744:	88 1f       	adc	r24, r24
   18746:	99 1f       	adc	r25, r25
   18748:	2a 95       	dec	r18
   1874a:	d1 f7       	brne	.-12     	; 0x18740 <arb_roundRobinScheduler+0x118>
   1874c:	24 ef       	ldi	r18, 0xF4	; 244
   1874e:	31 e0       	ldi	r19, 0x01	; 1
   18750:	40 e0       	ldi	r20, 0x00	; 0
   18752:	50 e0       	ldi	r21, 0x00	; 0
   18754:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   18758:	2d 83       	std	Y+5, r18	; 0x05
   1875a:	3e 83       	std	Y+6, r19	; 0x06
   1875c:	4f 83       	std	Y+7, r20	; 0x07
   1875e:	58 87       	std	Y+8, r21	; 0x08
   18760:	10 92 ca 2b 	sts	0x2BCA, r1
   18764:	10 92 cb 2b 	sts	0x2BCB, r1
   18768:	10 92 cc 2b 	sts	0x2BCC, r1
   1876c:	10 92 cd 2b 	sts	0x2BCD, r1
   18770:	10 92 c0 2b 	sts	0x2BC0, r1
   18774:	10 92 c1 2b 	sts	0x2BC1, r1
   18778:	60 91 c2 2b 	lds	r22, 0x2BC2
   1877c:	70 91 c3 2b 	lds	r23, 0x2BC3
   18780:	80 91 c4 2b 	lds	r24, 0x2BC4
   18784:	90 91 c5 2b 	lds	r25, 0x2BC5
   18788:	25 e5       	ldi	r18, 0x55	; 85
   1878a:	35 e7       	ldi	r19, 0x75	; 117
   1878c:	40 e0       	ldi	r20, 0x00	; 0
   1878e:	50 e0       	ldi	r21, 0x00	; 0
   18790:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   18794:	dc 01       	movw	r26, r24
   18796:	cb 01       	movw	r24, r22
   18798:	9c 01       	movw	r18, r24
   1879a:	ad 01       	movw	r20, r26
   1879c:	60 e0       	ldi	r22, 0x00	; 0
   1879e:	70 e0       	ldi	r23, 0x00	; 0
   187a0:	cb 01       	movw	r24, r22
   187a2:	32 2e       	mov	r3, r18
   187a4:	e0 e4       	ldi	r30, 0x40	; 64
   187a6:	ee 2e       	mov	r14, r30
   187a8:	e3 0e       	add	r14, r19
   187aa:	f1 e0       	ldi	r31, 0x01	; 1
   187ac:	e3 16       	cp	r14, r19
   187ae:	08 f0       	brcs	.+2      	; 0x187b2 <arb_roundRobinScheduler+0x18a>
   187b0:	f0 e0       	ldi	r31, 0x00	; 0
   187b2:	ff 2e       	mov	r15, r31
   187b4:	f4 0e       	add	r15, r20
   187b6:	01 e0       	ldi	r16, 0x01	; 1
   187b8:	f4 16       	cp	r15, r20
   187ba:	08 f0       	brcs	.+2      	; 0x187be <arb_roundRobinScheduler+0x196>
   187bc:	00 e0       	ldi	r16, 0x00	; 0
   187be:	05 0f       	add	r16, r21
   187c0:	e1 e0       	ldi	r30, 0x01	; 1
   187c2:	05 17       	cp	r16, r21
   187c4:	08 f0       	brcs	.+2      	; 0x187c8 <arb_roundRobinScheduler+0x1a0>
   187c6:	e0 e0       	ldi	r30, 0x00	; 0
   187c8:	2e 2e       	mov	r2, r30
   187ca:	11 e0       	ldi	r17, 0x01	; 1
   187cc:	16 16       	cp	r1, r22
   187ce:	08 f0       	brcs	.+2      	; 0x187d2 <arb_roundRobinScheduler+0x1aa>
   187d0:	10 e0       	ldi	r17, 0x00	; 0
   187d2:	55 24       	eor	r5, r5
   187d4:	53 94       	inc	r5
   187d6:	17 16       	cp	r1, r23
   187d8:	08 f0       	brcs	.+2      	; 0x187dc <arb_roundRobinScheduler+0x1b4>
   187da:	55 24       	eor	r5, r5
   187dc:	44 24       	eor	r4, r4
   187de:	43 94       	inc	r4
   187e0:	18 16       	cp	r1, r24
   187e2:	08 f0       	brcs	.+2      	; 0x187e6 <arb_roundRobinScheduler+0x1be>
   187e4:	44 24       	eor	r4, r4
   187e6:	6d 81       	ldd	r22, Y+5	; 0x05
   187e8:	7e 81       	ldd	r23, Y+6	; 0x06
   187ea:	8f 81       	ldd	r24, Y+7	; 0x07
   187ec:	98 85       	ldd	r25, Y+8	; 0x08
   187ee:	2b ea       	ldi	r18, 0xAB	; 171
   187f0:	3a e0       	ldi	r19, 0x0A	; 10
   187f2:	40 e0       	ldi	r20, 0x00	; 0
   187f4:	50 e0       	ldi	r21, 0x00	; 0
   187f6:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   187fa:	dc 01       	movw	r26, r24
   187fc:	cb 01       	movw	r24, r22
   187fe:	3c 01       	movw	r6, r24
   18800:	4d 01       	movw	r8, r26
   18802:	23 2d       	mov	r18, r3
   18804:	28 0f       	add	r18, r24
   18806:	31 e0       	ldi	r19, 0x01	; 1
   18808:	23 15       	cp	r18, r3
   1880a:	08 f0       	brcs	.+2      	; 0x1880e <arb_roundRobinScheduler+0x1e6>
   1880c:	30 e0       	ldi	r19, 0x00	; 0
   1880e:	8e 2d       	mov	r24, r14
   18810:	87 0d       	add	r24, r7
   18812:	41 e0       	ldi	r20, 0x01	; 1
   18814:	8e 15       	cp	r24, r14
   18816:	08 f0       	brcs	.+2      	; 0x1881a <arb_roundRobinScheduler+0x1f2>
   18818:	40 e0       	ldi	r20, 0x00	; 0
   1881a:	38 0f       	add	r19, r24
   1881c:	91 e0       	ldi	r25, 0x01	; 1
   1881e:	38 17       	cp	r19, r24
   18820:	08 f0       	brcs	.+2      	; 0x18824 <arb_roundRobinScheduler+0x1fc>
   18822:	90 e0       	ldi	r25, 0x00	; 0
   18824:	49 2b       	or	r20, r25
   18826:	8f 2d       	mov	r24, r15
   18828:	88 0d       	add	r24, r8
   1882a:	51 e0       	ldi	r21, 0x01	; 1
   1882c:	8f 15       	cp	r24, r15
   1882e:	08 f0       	brcs	.+2      	; 0x18832 <arb_roundRobinScheduler+0x20a>
   18830:	50 e0       	ldi	r21, 0x00	; 0
   18832:	48 0f       	add	r20, r24
   18834:	91 e0       	ldi	r25, 0x01	; 1
   18836:	48 17       	cp	r20, r24
   18838:	08 f0       	brcs	.+2      	; 0x1883c <arb_roundRobinScheduler+0x214>
   1883a:	90 e0       	ldi	r25, 0x00	; 0
   1883c:	59 2b       	or	r21, r25
   1883e:	80 2f       	mov	r24, r16
   18840:	89 0d       	add	r24, r9
   18842:	61 e0       	ldi	r22, 0x01	; 1
   18844:	80 17       	cp	r24, r16
   18846:	08 f0       	brcs	.+2      	; 0x1884a <arb_roundRobinScheduler+0x222>
   18848:	60 e0       	ldi	r22, 0x00	; 0
   1884a:	58 0f       	add	r21, r24
   1884c:	91 e0       	ldi	r25, 0x01	; 1
   1884e:	58 17       	cp	r21, r24
   18850:	08 f0       	brcs	.+2      	; 0x18854 <arb_roundRobinScheduler+0x22c>
   18852:	90 e0       	ldi	r25, 0x00	; 0
   18854:	69 2b       	or	r22, r25
   18856:	62 0d       	add	r22, r2
   18858:	71 e0       	ldi	r23, 0x01	; 1
   1885a:	62 15       	cp	r22, r2
   1885c:	08 f0       	brcs	.+2      	; 0x18860 <arb_roundRobinScheduler+0x238>
   1885e:	70 e0       	ldi	r23, 0x00	; 0
   18860:	71 0f       	add	r23, r17
   18862:	81 e0       	ldi	r24, 0x01	; 1
   18864:	71 17       	cp	r23, r17
   18866:	08 f0       	brcs	.+2      	; 0x1886a <arb_roundRobinScheduler+0x242>
   18868:	80 e0       	ldi	r24, 0x00	; 0
   1886a:	85 0d       	add	r24, r5
   1886c:	91 e0       	ldi	r25, 0x01	; 1
   1886e:	85 15       	cp	r24, r5
   18870:	08 f0       	brcs	.+2      	; 0x18874 <arb_roundRobinScheduler+0x24c>
   18872:	90 e0       	ldi	r25, 0x00	; 0
   18874:	94 0d       	add	r25, r4
   18876:	0f e0       	ldi	r16, 0x0F	; 15
   18878:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__lshrdi3>
   1887c:	20 93 c2 2b 	sts	0x2BC2, r18
   18880:	30 93 c3 2b 	sts	0x2BC3, r19
   18884:	40 93 c4 2b 	sts	0x2BC4, r20
   18888:	50 93 c5 2b 	sts	0x2BC5, r21
   1888c:	60 91 c6 2b 	lds	r22, 0x2BC6
   18890:	70 91 c7 2b 	lds	r23, 0x2BC7
   18894:	80 91 c8 2b 	lds	r24, 0x2BC8
   18898:	90 91 c9 2b 	lds	r25, 0x2BC9
   1889c:	2d ed       	ldi	r18, 0xDD	; 221
   1889e:	3d e7       	ldi	r19, 0x7D	; 125
   188a0:	40 e0       	ldi	r20, 0x00	; 0
   188a2:	50 e0       	ldi	r21, 0x00	; 0
   188a4:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   188a8:	dc 01       	movw	r26, r24
   188aa:	cb 01       	movw	r24, r22
   188ac:	9c 01       	movw	r18, r24
   188ae:	ad 01       	movw	r20, r26
   188b0:	60 e0       	ldi	r22, 0x00	; 0
   188b2:	70 e0       	ldi	r23, 0x00	; 0
   188b4:	cb 01       	movw	r24, r22
   188b6:	32 2e       	mov	r3, r18
   188b8:	90 e4       	ldi	r25, 0x40	; 64
   188ba:	e9 2e       	mov	r14, r25
   188bc:	e3 0e       	add	r14, r19
   188be:	f1 e0       	ldi	r31, 0x01	; 1
   188c0:	e3 16       	cp	r14, r19
   188c2:	08 f0       	brcs	.+2      	; 0x188c6 <arb_roundRobinScheduler+0x29e>
   188c4:	f0 e0       	ldi	r31, 0x00	; 0
   188c6:	ff 2e       	mov	r15, r31
   188c8:	f4 0e       	add	r15, r20
   188ca:	01 e0       	ldi	r16, 0x01	; 1
   188cc:	f4 16       	cp	r15, r20
   188ce:	08 f0       	brcs	.+2      	; 0x188d2 <arb_roundRobinScheduler+0x2aa>
   188d0:	00 e0       	ldi	r16, 0x00	; 0
   188d2:	05 0f       	add	r16, r21
   188d4:	e1 e0       	ldi	r30, 0x01	; 1
   188d6:	05 17       	cp	r16, r21
   188d8:	08 f0       	brcs	.+2      	; 0x188dc <arb_roundRobinScheduler+0x2b4>
   188da:	e0 e0       	ldi	r30, 0x00	; 0
   188dc:	2e 2e       	mov	r2, r30
   188de:	11 e0       	ldi	r17, 0x01	; 1
   188e0:	16 16       	cp	r1, r22
   188e2:	08 f0       	brcs	.+2      	; 0x188e6 <arb_roundRobinScheduler+0x2be>
   188e4:	10 e0       	ldi	r17, 0x00	; 0
   188e6:	55 24       	eor	r5, r5
   188e8:	53 94       	inc	r5
   188ea:	17 16       	cp	r1, r23
   188ec:	08 f0       	brcs	.+2      	; 0x188f0 <arb_roundRobinScheduler+0x2c8>
   188ee:	55 24       	eor	r5, r5
   188f0:	44 24       	eor	r4, r4
   188f2:	43 94       	inc	r4
   188f4:	18 16       	cp	r1, r24
   188f6:	08 f0       	brcs	.+2      	; 0x188fa <arb_roundRobinScheduler+0x2d2>
   188f8:	44 24       	eor	r4, r4
   188fa:	6d 81       	ldd	r22, Y+5	; 0x05
   188fc:	7e 81       	ldd	r23, Y+6	; 0x06
   188fe:	8f 81       	ldd	r24, Y+7	; 0x07
   18900:	98 85       	ldd	r25, Y+8	; 0x08
   18902:	23 e2       	ldi	r18, 0x23	; 35
   18904:	32 e0       	ldi	r19, 0x02	; 2
   18906:	40 e0       	ldi	r20, 0x00	; 0
   18908:	50 e0       	ldi	r21, 0x00	; 0
   1890a:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1890e:	dc 01       	movw	r26, r24
   18910:	cb 01       	movw	r24, r22
   18912:	3c 01       	movw	r6, r24
   18914:	4d 01       	movw	r8, r26
   18916:	23 2d       	mov	r18, r3
   18918:	28 0f       	add	r18, r24
   1891a:	31 e0       	ldi	r19, 0x01	; 1
   1891c:	23 15       	cp	r18, r3
   1891e:	08 f0       	brcs	.+2      	; 0x18922 <arb_roundRobinScheduler+0x2fa>
   18920:	30 e0       	ldi	r19, 0x00	; 0
   18922:	8e 2d       	mov	r24, r14
   18924:	87 0d       	add	r24, r7
   18926:	41 e0       	ldi	r20, 0x01	; 1
   18928:	8e 15       	cp	r24, r14
   1892a:	08 f0       	brcs	.+2      	; 0x1892e <arb_roundRobinScheduler+0x306>
   1892c:	40 e0       	ldi	r20, 0x00	; 0
   1892e:	38 0f       	add	r19, r24
   18930:	91 e0       	ldi	r25, 0x01	; 1
   18932:	38 17       	cp	r19, r24
   18934:	08 f0       	brcs	.+2      	; 0x18938 <arb_roundRobinScheduler+0x310>
   18936:	90 e0       	ldi	r25, 0x00	; 0
   18938:	49 2b       	or	r20, r25
   1893a:	8f 2d       	mov	r24, r15
   1893c:	88 0d       	add	r24, r8
   1893e:	51 e0       	ldi	r21, 0x01	; 1
   18940:	8f 15       	cp	r24, r15
   18942:	08 f0       	brcs	.+2      	; 0x18946 <arb_roundRobinScheduler+0x31e>
   18944:	50 e0       	ldi	r21, 0x00	; 0
   18946:	48 0f       	add	r20, r24
   18948:	91 e0       	ldi	r25, 0x01	; 1
   1894a:	48 17       	cp	r20, r24
   1894c:	08 f0       	brcs	.+2      	; 0x18950 <arb_roundRobinScheduler+0x328>
   1894e:	90 e0       	ldi	r25, 0x00	; 0
   18950:	59 2b       	or	r21, r25
   18952:	80 2f       	mov	r24, r16
   18954:	89 0d       	add	r24, r9
   18956:	61 e0       	ldi	r22, 0x01	; 1
   18958:	80 17       	cp	r24, r16
   1895a:	08 f0       	brcs	.+2      	; 0x1895e <arb_roundRobinScheduler+0x336>
   1895c:	60 e0       	ldi	r22, 0x00	; 0
   1895e:	58 0f       	add	r21, r24
   18960:	91 e0       	ldi	r25, 0x01	; 1
   18962:	58 17       	cp	r21, r24
   18964:	08 f0       	brcs	.+2      	; 0x18968 <arb_roundRobinScheduler+0x340>
   18966:	90 e0       	ldi	r25, 0x00	; 0
   18968:	69 2b       	or	r22, r25
   1896a:	62 0d       	add	r22, r2
   1896c:	71 e0       	ldi	r23, 0x01	; 1
   1896e:	62 15       	cp	r22, r2
   18970:	08 f0       	brcs	.+2      	; 0x18974 <arb_roundRobinScheduler+0x34c>
   18972:	70 e0       	ldi	r23, 0x00	; 0
   18974:	71 0f       	add	r23, r17
   18976:	81 e0       	ldi	r24, 0x01	; 1
   18978:	71 17       	cp	r23, r17
   1897a:	08 f0       	brcs	.+2      	; 0x1897e <arb_roundRobinScheduler+0x356>
   1897c:	80 e0       	ldi	r24, 0x00	; 0
   1897e:	85 0d       	add	r24, r5
   18980:	91 e0       	ldi	r25, 0x01	; 1
   18982:	85 15       	cp	r24, r5
   18984:	08 f0       	brcs	.+2      	; 0x18988 <arb_roundRobinScheduler+0x360>
   18986:	90 e0       	ldi	r25, 0x00	; 0
   18988:	94 0d       	add	r25, r4
   1898a:	0f e0       	ldi	r16, 0x0F	; 15
   1898c:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__lshrdi3>
   18990:	20 93 c6 2b 	sts	0x2BC6, r18
   18994:	30 93 c7 2b 	sts	0x2BC7, r19
   18998:	40 93 c8 2b 	sts	0x2BC8, r20
   1899c:	50 93 c9 2b 	sts	0x2BC9, r21
   189a0:	28 96       	adiw	r28, 0x08	; 8
   189a2:	cd bf       	out	0x3d, r28	; 61
   189a4:	de bf       	out	0x3e, r29	; 62
   189a6:	df 91       	pop	r29
   189a8:	cf 91       	pop	r28
   189aa:	1f 91       	pop	r17
   189ac:	0f 91       	pop	r16
   189ae:	ff 90       	pop	r15
   189b0:	ef 90       	pop	r14
   189b2:	df 90       	pop	r13
   189b4:	cf 90       	pop	r12
   189b6:	bf 90       	pop	r11
   189b8:	af 90       	pop	r10
   189ba:	9f 90       	pop	r9
   189bc:	8f 90       	pop	r8
   189be:	7f 90       	pop	r7
   189c0:	6f 90       	pop	r6
   189c2:	5f 90       	pop	r5
   189c4:	4f 90       	pop	r4
   189c6:	3f 90       	pop	r3
   189c8:	2f 90       	pop	r2
   189ca:	08 95       	ret

000189cc <arb_priorityScheduler>:
   189cc:	2f 92       	push	r2
   189ce:	3f 92       	push	r3
   189d0:	4f 92       	push	r4
   189d2:	5f 92       	push	r5
   189d4:	6f 92       	push	r6
   189d6:	7f 92       	push	r7
   189d8:	8f 92       	push	r8
   189da:	9f 92       	push	r9
   189dc:	af 92       	push	r10
   189de:	bf 92       	push	r11
   189e0:	cf 92       	push	r12
   189e2:	df 92       	push	r13
   189e4:	ef 92       	push	r14
   189e6:	ff 92       	push	r15
   189e8:	0f 93       	push	r16
   189ea:	1f 93       	push	r17
   189ec:	cf 93       	push	r28
   189ee:	df 93       	push	r29
   189f0:	cd b7       	in	r28, 0x3d	; 61
   189f2:	de b7       	in	r29, 0x3e	; 62
   189f4:	2a 97       	sbiw	r28, 0x0a	; 10
   189f6:	cd bf       	out	0x3d, r28	; 61
   189f8:	de bf       	out	0x3e, r29	; 62
   189fa:	80 91 bf 2b 	lds	r24, 0x2BBF
   189fe:	88 23       	and	r24, r24
   18a00:	09 f4       	brne	.+2      	; 0x18a04 <arb_priorityScheduler+0x38>
   18a02:	c4 c1       	rjmp	.+904    	; 0x18d8c <arb_priorityScheduler+0x3c0>
   18a04:	e0 91 2c 22 	lds	r30, 0x222C
   18a08:	f0 91 2d 22 	lds	r31, 0x222D
   18a0c:	80 85       	ldd	r24, Z+8	; 0x08
   18a0e:	91 85       	ldd	r25, Z+9	; 0x09
   18a10:	8b 83       	std	Y+3, r24	; 0x03
   18a12:	9c 83       	std	Y+4, r25	; 0x04
   18a14:	eb 81       	ldd	r30, Y+3	; 0x03
   18a16:	fc 81       	ldd	r31, Y+4	; 0x04
   18a18:	01 90       	ld	r0, Z+
   18a1a:	f0 81       	ld	r31, Z
   18a1c:	e0 2d       	mov	r30, r0
   18a1e:	42 81       	ldd	r20, Z+2	; 0x02
   18a20:	50 e0       	ldi	r21, 0x00	; 0
   18a22:	e0 91 2c 22 	lds	r30, 0x222C
   18a26:	f0 91 2d 22 	lds	r31, 0x222D
   18a2a:	22 81       	ldd	r18, Z+2	; 0x02
   18a2c:	33 81       	ldd	r19, Z+3	; 0x03
   18a2e:	e0 91 2c 22 	lds	r30, 0x222C
   18a32:	f0 91 2d 22 	lds	r31, 0x222D
   18a36:	16 c0       	rjmp	.+44     	; 0x18a64 <arb_priorityScheduler+0x98>
   18a38:	ed 81       	ldd	r30, Y+5	; 0x05
   18a3a:	fe 81       	ldd	r31, Y+6	; 0x06
   18a3c:	01 90       	ld	r0, Z+
   18a3e:	f0 81       	ld	r31, Z
   18a40:	e0 2d       	mov	r30, r0
   18a42:	82 81       	ldd	r24, Z+2	; 0x02
   18a44:	90 e0       	ldi	r25, 0x00	; 0
   18a46:	84 17       	cp	r24, r20
   18a48:	95 07       	cpc	r25, r21
   18a4a:	40 f4       	brcc	.+16     	; 0x18a5c <arb_priorityScheduler+0x90>
   18a4c:	61 81       	ldd	r22, Z+1	; 0x01
   18a4e:	63 30       	cpi	r22, 0x03	; 3
   18a50:	29 f0       	breq	.+10     	; 0x18a5c <arb_priorityScheduler+0x90>
   18a52:	4d 81       	ldd	r20, Y+5	; 0x05
   18a54:	5e 81       	ldd	r21, Y+6	; 0x06
   18a56:	4b 83       	std	Y+3, r20	; 0x03
   18a58:	5c 83       	std	Y+4, r21	; 0x04
   18a5a:	ac 01       	movw	r20, r24
   18a5c:	21 50       	subi	r18, 0x01	; 1
   18a5e:	30 40       	sbci	r19, 0x00	; 0
   18a60:	ed 81       	ldd	r30, Y+5	; 0x05
   18a62:	fe 81       	ldd	r31, Y+6	; 0x06
   18a64:	80 85       	ldd	r24, Z+8	; 0x08
   18a66:	91 85       	ldd	r25, Z+9	; 0x09
   18a68:	8d 83       	std	Y+5, r24	; 0x05
   18a6a:	9e 83       	std	Y+6, r25	; 0x06
   18a6c:	21 15       	cp	r18, r1
   18a6e:	31 05       	cpc	r19, r1
   18a70:	19 f7       	brne	.-58     	; 0x18a38 <arb_priorityScheduler+0x6c>
   18a72:	e0 91 2c 22 	lds	r30, 0x222C
   18a76:	f0 91 2d 22 	lds	r31, 0x222D
   18a7a:	8b 81       	ldd	r24, Y+3	; 0x03
   18a7c:	9c 81       	ldd	r25, Y+4	; 0x04
   18a7e:	86 83       	std	Z+6, r24	; 0x06
   18a80:	97 83       	std	Z+7, r25	; 0x07
   18a82:	eb 81       	ldd	r30, Y+3	; 0x03
   18a84:	fc 81       	ldd	r31, Y+4	; 0x04
   18a86:	01 90       	ld	r0, Z+
   18a88:	f0 81       	ld	r31, Z
   18a8a:	e0 2d       	mov	r30, r0
   18a8c:	e0 93 bd 2b 	sts	0x2BBD, r30
   18a90:	f0 93 be 2b 	sts	0x2BBE, r31
   18a94:	81 e0       	ldi	r24, 0x01	; 1
   18a96:	81 83       	std	Z+1, r24	; 0x01
   18a98:	e0 91 2c 22 	lds	r30, 0x222C
   18a9c:	f0 91 2d 22 	lds	r31, 0x222D
   18aa0:	42 81       	ldd	r20, Z+2	; 0x02
   18aa2:	53 81       	ldd	r21, Z+3	; 0x03
   18aa4:	e0 91 2c 22 	lds	r30, 0x222C
   18aa8:	f0 91 2d 22 	lds	r31, 0x222D
   18aac:	80 85       	ldd	r24, Z+8	; 0x08
   18aae:	91 85       	ldd	r25, Z+9	; 0x09
   18ab0:	89 83       	std	Y+1, r24	; 0x01
   18ab2:	9a 83       	std	Y+2, r25	; 0x02
   18ab4:	80 91 ca 2b 	lds	r24, 0x2BCA
   18ab8:	90 91 cb 2b 	lds	r25, 0x2BCB
   18abc:	a0 91 cc 2b 	lds	r26, 0x2BCC
   18ac0:	b0 91 cd 2b 	lds	r27, 0x2BCD
   18ac4:	16 c0       	rjmp	.+44     	; 0x18af2 <arb_priorityScheduler+0x126>
   18ac6:	e9 81       	ldd	r30, Y+1	; 0x01
   18ac8:	fa 81       	ldd	r31, Y+2	; 0x02
   18aca:	01 90       	ld	r0, Z+
   18acc:	f0 81       	ld	r31, Z
   18ace:	e0 2d       	mov	r30, r0
   18ad0:	21 81       	ldd	r18, Z+1	; 0x01
   18ad2:	22 30       	cpi	r18, 0x02	; 2
   18ad4:	30 f4       	brcc	.+12     	; 0x18ae2 <arb_priorityScheduler+0x116>
   18ad6:	22 81       	ldd	r18, Z+2	; 0x02
   18ad8:	2f 3f       	cpi	r18, 0xFF	; 255
   18ada:	19 f0       	breq	.+6      	; 0x18ae2 <arb_priorityScheduler+0x116>
   18adc:	01 96       	adiw	r24, 0x01	; 1
   18ade:	a1 1d       	adc	r26, r1
   18ae0:	b1 1d       	adc	r27, r1
   18ae2:	41 50       	subi	r20, 0x01	; 1
   18ae4:	50 40       	sbci	r21, 0x00	; 0
   18ae6:	e9 81       	ldd	r30, Y+1	; 0x01
   18ae8:	fa 81       	ldd	r31, Y+2	; 0x02
   18aea:	20 85       	ldd	r18, Z+8	; 0x08
   18aec:	31 85       	ldd	r19, Z+9	; 0x09
   18aee:	29 83       	std	Y+1, r18	; 0x01
   18af0:	3a 83       	std	Y+2, r19	; 0x02
   18af2:	41 15       	cp	r20, r1
   18af4:	51 05       	cpc	r21, r1
   18af6:	39 f7       	brne	.-50     	; 0x18ac6 <arb_priorityScheduler+0xfa>
   18af8:	80 93 ca 2b 	sts	0x2BCA, r24
   18afc:	90 93 cb 2b 	sts	0x2BCB, r25
   18b00:	a0 93 cc 2b 	sts	0x2BCC, r26
   18b04:	b0 93 cd 2b 	sts	0x2BCD, r27
   18b08:	20 91 c0 2b 	lds	r18, 0x2BC0
   18b0c:	30 91 c1 2b 	lds	r19, 0x2BC1
   18b10:	2f 5f       	subi	r18, 0xFF	; 255
   18b12:	3f 4f       	sbci	r19, 0xFF	; 255
   18b14:	20 93 c0 2b 	sts	0x2BC0, r18
   18b18:	30 93 c1 2b 	sts	0x2BC1, r19
   18b1c:	41 e0       	ldi	r20, 0x01	; 1
   18b1e:	24 3f       	cpi	r18, 0xF4	; 244
   18b20:	34 07       	cpc	r19, r20
   18b22:	09 f0       	breq	.+2      	; 0x18b26 <arb_priorityScheduler+0x15a>
   18b24:	33 c1       	rjmp	.+614    	; 0x18d8c <arb_priorityScheduler+0x3c0>
   18b26:	bc 01       	movw	r22, r24
   18b28:	cd 01       	movw	r24, r26
   18b2a:	1f e0       	ldi	r17, 0x0F	; 15
   18b2c:	66 0f       	add	r22, r22
   18b2e:	77 1f       	adc	r23, r23
   18b30:	88 1f       	adc	r24, r24
   18b32:	99 1f       	adc	r25, r25
   18b34:	1a 95       	dec	r17
   18b36:	d1 f7       	brne	.-12     	; 0x18b2c <arb_priorityScheduler+0x160>
   18b38:	24 ef       	ldi	r18, 0xF4	; 244
   18b3a:	31 e0       	ldi	r19, 0x01	; 1
   18b3c:	40 e0       	ldi	r20, 0x00	; 0
   18b3e:	50 e0       	ldi	r21, 0x00	; 0
   18b40:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   18b44:	2f 83       	std	Y+7, r18	; 0x07
   18b46:	38 87       	std	Y+8, r19	; 0x08
   18b48:	49 87       	std	Y+9, r20	; 0x09
   18b4a:	5a 87       	std	Y+10, r21	; 0x0a
   18b4c:	10 92 ca 2b 	sts	0x2BCA, r1
   18b50:	10 92 cb 2b 	sts	0x2BCB, r1
   18b54:	10 92 cc 2b 	sts	0x2BCC, r1
   18b58:	10 92 cd 2b 	sts	0x2BCD, r1
   18b5c:	10 92 c0 2b 	sts	0x2BC0, r1
   18b60:	10 92 c1 2b 	sts	0x2BC1, r1
   18b64:	60 91 c2 2b 	lds	r22, 0x2BC2
   18b68:	70 91 c3 2b 	lds	r23, 0x2BC3
   18b6c:	80 91 c4 2b 	lds	r24, 0x2BC4
   18b70:	90 91 c5 2b 	lds	r25, 0x2BC5
   18b74:	25 e5       	ldi	r18, 0x55	; 85
   18b76:	35 e7       	ldi	r19, 0x75	; 117
   18b78:	40 e0       	ldi	r20, 0x00	; 0
   18b7a:	50 e0       	ldi	r21, 0x00	; 0
   18b7c:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   18b80:	dc 01       	movw	r26, r24
   18b82:	cb 01       	movw	r24, r22
   18b84:	9c 01       	movw	r18, r24
   18b86:	ad 01       	movw	r20, r26
   18b88:	60 e0       	ldi	r22, 0x00	; 0
   18b8a:	70 e0       	ldi	r23, 0x00	; 0
   18b8c:	cb 01       	movw	r24, r22
   18b8e:	32 2e       	mov	r3, r18
   18b90:	00 e4       	ldi	r16, 0x40	; 64
   18b92:	e0 2e       	mov	r14, r16
   18b94:	e3 0e       	add	r14, r19
   18b96:	f1 e0       	ldi	r31, 0x01	; 1
   18b98:	e3 16       	cp	r14, r19
   18b9a:	08 f0       	brcs	.+2      	; 0x18b9e <arb_priorityScheduler+0x1d2>
   18b9c:	f0 e0       	ldi	r31, 0x00	; 0
   18b9e:	ff 2e       	mov	r15, r31
   18ba0:	f4 0e       	add	r15, r20
   18ba2:	01 e0       	ldi	r16, 0x01	; 1
   18ba4:	f4 16       	cp	r15, r20
   18ba6:	08 f0       	brcs	.+2      	; 0x18baa <arb_priorityScheduler+0x1de>
   18ba8:	00 e0       	ldi	r16, 0x00	; 0
   18baa:	05 0f       	add	r16, r21
   18bac:	e1 e0       	ldi	r30, 0x01	; 1
   18bae:	05 17       	cp	r16, r21
   18bb0:	08 f0       	brcs	.+2      	; 0x18bb4 <arb_priorityScheduler+0x1e8>
   18bb2:	e0 e0       	ldi	r30, 0x00	; 0
   18bb4:	2e 2e       	mov	r2, r30
   18bb6:	11 e0       	ldi	r17, 0x01	; 1
   18bb8:	16 16       	cp	r1, r22
   18bba:	08 f0       	brcs	.+2      	; 0x18bbe <arb_priorityScheduler+0x1f2>
   18bbc:	10 e0       	ldi	r17, 0x00	; 0
   18bbe:	55 24       	eor	r5, r5
   18bc0:	53 94       	inc	r5
   18bc2:	17 16       	cp	r1, r23
   18bc4:	08 f0       	brcs	.+2      	; 0x18bc8 <arb_priorityScheduler+0x1fc>
   18bc6:	55 24       	eor	r5, r5
   18bc8:	44 24       	eor	r4, r4
   18bca:	43 94       	inc	r4
   18bcc:	18 16       	cp	r1, r24
   18bce:	08 f0       	brcs	.+2      	; 0x18bd2 <arb_priorityScheduler+0x206>
   18bd0:	44 24       	eor	r4, r4
   18bd2:	6f 81       	ldd	r22, Y+7	; 0x07
   18bd4:	78 85       	ldd	r23, Y+8	; 0x08
   18bd6:	89 85       	ldd	r24, Y+9	; 0x09
   18bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
   18bda:	2b ea       	ldi	r18, 0xAB	; 171
   18bdc:	3a e0       	ldi	r19, 0x0A	; 10
   18bde:	40 e0       	ldi	r20, 0x00	; 0
   18be0:	50 e0       	ldi	r21, 0x00	; 0
   18be2:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   18be6:	dc 01       	movw	r26, r24
   18be8:	cb 01       	movw	r24, r22
   18bea:	3c 01       	movw	r6, r24
   18bec:	4d 01       	movw	r8, r26
   18bee:	23 2d       	mov	r18, r3
   18bf0:	28 0f       	add	r18, r24
   18bf2:	31 e0       	ldi	r19, 0x01	; 1
   18bf4:	23 15       	cp	r18, r3
   18bf6:	08 f0       	brcs	.+2      	; 0x18bfa <arb_priorityScheduler+0x22e>
   18bf8:	30 e0       	ldi	r19, 0x00	; 0
   18bfa:	8e 2d       	mov	r24, r14
   18bfc:	87 0d       	add	r24, r7
   18bfe:	41 e0       	ldi	r20, 0x01	; 1
   18c00:	8e 15       	cp	r24, r14
   18c02:	08 f0       	brcs	.+2      	; 0x18c06 <arb_priorityScheduler+0x23a>
   18c04:	40 e0       	ldi	r20, 0x00	; 0
   18c06:	38 0f       	add	r19, r24
   18c08:	91 e0       	ldi	r25, 0x01	; 1
   18c0a:	38 17       	cp	r19, r24
   18c0c:	08 f0       	brcs	.+2      	; 0x18c10 <arb_priorityScheduler+0x244>
   18c0e:	90 e0       	ldi	r25, 0x00	; 0
   18c10:	49 2b       	or	r20, r25
   18c12:	8f 2d       	mov	r24, r15
   18c14:	88 0d       	add	r24, r8
   18c16:	51 e0       	ldi	r21, 0x01	; 1
   18c18:	8f 15       	cp	r24, r15
   18c1a:	08 f0       	brcs	.+2      	; 0x18c1e <arb_priorityScheduler+0x252>
   18c1c:	50 e0       	ldi	r21, 0x00	; 0
   18c1e:	48 0f       	add	r20, r24
   18c20:	91 e0       	ldi	r25, 0x01	; 1
   18c22:	48 17       	cp	r20, r24
   18c24:	08 f0       	brcs	.+2      	; 0x18c28 <arb_priorityScheduler+0x25c>
   18c26:	90 e0       	ldi	r25, 0x00	; 0
   18c28:	59 2b       	or	r21, r25
   18c2a:	80 2f       	mov	r24, r16
   18c2c:	89 0d       	add	r24, r9
   18c2e:	61 e0       	ldi	r22, 0x01	; 1
   18c30:	80 17       	cp	r24, r16
   18c32:	08 f0       	brcs	.+2      	; 0x18c36 <arb_priorityScheduler+0x26a>
   18c34:	60 e0       	ldi	r22, 0x00	; 0
   18c36:	58 0f       	add	r21, r24
   18c38:	91 e0       	ldi	r25, 0x01	; 1
   18c3a:	58 17       	cp	r21, r24
   18c3c:	08 f0       	brcs	.+2      	; 0x18c40 <arb_priorityScheduler+0x274>
   18c3e:	90 e0       	ldi	r25, 0x00	; 0
   18c40:	69 2b       	or	r22, r25
   18c42:	62 0d       	add	r22, r2
   18c44:	71 e0       	ldi	r23, 0x01	; 1
   18c46:	62 15       	cp	r22, r2
   18c48:	08 f0       	brcs	.+2      	; 0x18c4c <arb_priorityScheduler+0x280>
   18c4a:	70 e0       	ldi	r23, 0x00	; 0
   18c4c:	71 0f       	add	r23, r17
   18c4e:	81 e0       	ldi	r24, 0x01	; 1
   18c50:	71 17       	cp	r23, r17
   18c52:	08 f0       	brcs	.+2      	; 0x18c56 <arb_priorityScheduler+0x28a>
   18c54:	80 e0       	ldi	r24, 0x00	; 0
   18c56:	85 0d       	add	r24, r5
   18c58:	91 e0       	ldi	r25, 0x01	; 1
   18c5a:	85 15       	cp	r24, r5
   18c5c:	08 f0       	brcs	.+2      	; 0x18c60 <arb_priorityScheduler+0x294>
   18c5e:	90 e0       	ldi	r25, 0x00	; 0
   18c60:	94 0d       	add	r25, r4
   18c62:	0f e0       	ldi	r16, 0x0F	; 15
   18c64:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__lshrdi3>
   18c68:	20 93 c2 2b 	sts	0x2BC2, r18
   18c6c:	30 93 c3 2b 	sts	0x2BC3, r19
   18c70:	40 93 c4 2b 	sts	0x2BC4, r20
   18c74:	50 93 c5 2b 	sts	0x2BC5, r21
   18c78:	60 91 c6 2b 	lds	r22, 0x2BC6
   18c7c:	70 91 c7 2b 	lds	r23, 0x2BC7
   18c80:	80 91 c8 2b 	lds	r24, 0x2BC8
   18c84:	90 91 c9 2b 	lds	r25, 0x2BC9
   18c88:	2d ed       	ldi	r18, 0xDD	; 221
   18c8a:	3d e7       	ldi	r19, 0x7D	; 125
   18c8c:	40 e0       	ldi	r20, 0x00	; 0
   18c8e:	50 e0       	ldi	r21, 0x00	; 0
   18c90:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   18c94:	dc 01       	movw	r26, r24
   18c96:	cb 01       	movw	r24, r22
   18c98:	9c 01       	movw	r18, r24
   18c9a:	ad 01       	movw	r20, r26
   18c9c:	60 e0       	ldi	r22, 0x00	; 0
   18c9e:	70 e0       	ldi	r23, 0x00	; 0
   18ca0:	cb 01       	movw	r24, r22
   18ca2:	32 2e       	mov	r3, r18
   18ca4:	f0 e4       	ldi	r31, 0x40	; 64
   18ca6:	ef 2e       	mov	r14, r31
   18ca8:	e3 0e       	add	r14, r19
   18caa:	f1 e0       	ldi	r31, 0x01	; 1
   18cac:	e3 16       	cp	r14, r19
   18cae:	08 f0       	brcs	.+2      	; 0x18cb2 <arb_priorityScheduler+0x2e6>
   18cb0:	f0 e0       	ldi	r31, 0x00	; 0
   18cb2:	ff 2e       	mov	r15, r31
   18cb4:	f4 0e       	add	r15, r20
   18cb6:	01 e0       	ldi	r16, 0x01	; 1
   18cb8:	f4 16       	cp	r15, r20
   18cba:	08 f0       	brcs	.+2      	; 0x18cbe <arb_priorityScheduler+0x2f2>
   18cbc:	00 e0       	ldi	r16, 0x00	; 0
   18cbe:	05 0f       	add	r16, r21
   18cc0:	e1 e0       	ldi	r30, 0x01	; 1
   18cc2:	05 17       	cp	r16, r21
   18cc4:	08 f0       	brcs	.+2      	; 0x18cc8 <arb_priorityScheduler+0x2fc>
   18cc6:	e0 e0       	ldi	r30, 0x00	; 0
   18cc8:	2e 2e       	mov	r2, r30
   18cca:	11 e0       	ldi	r17, 0x01	; 1
   18ccc:	16 16       	cp	r1, r22
   18cce:	08 f0       	brcs	.+2      	; 0x18cd2 <arb_priorityScheduler+0x306>
   18cd0:	10 e0       	ldi	r17, 0x00	; 0
   18cd2:	55 24       	eor	r5, r5
   18cd4:	53 94       	inc	r5
   18cd6:	17 16       	cp	r1, r23
   18cd8:	08 f0       	brcs	.+2      	; 0x18cdc <arb_priorityScheduler+0x310>
   18cda:	55 24       	eor	r5, r5
   18cdc:	44 24       	eor	r4, r4
   18cde:	43 94       	inc	r4
   18ce0:	18 16       	cp	r1, r24
   18ce2:	08 f0       	brcs	.+2      	; 0x18ce6 <arb_priorityScheduler+0x31a>
   18ce4:	44 24       	eor	r4, r4
   18ce6:	6f 81       	ldd	r22, Y+7	; 0x07
   18ce8:	78 85       	ldd	r23, Y+8	; 0x08
   18cea:	89 85       	ldd	r24, Y+9	; 0x09
   18cec:	9a 85       	ldd	r25, Y+10	; 0x0a
   18cee:	23 e2       	ldi	r18, 0x23	; 35
   18cf0:	32 e0       	ldi	r19, 0x02	; 2
   18cf2:	40 e0       	ldi	r20, 0x00	; 0
   18cf4:	50 e0       	ldi	r21, 0x00	; 0
   18cf6:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   18cfa:	dc 01       	movw	r26, r24
   18cfc:	cb 01       	movw	r24, r22
   18cfe:	3c 01       	movw	r6, r24
   18d00:	4d 01       	movw	r8, r26
   18d02:	23 2d       	mov	r18, r3
   18d04:	28 0f       	add	r18, r24
   18d06:	31 e0       	ldi	r19, 0x01	; 1
   18d08:	23 15       	cp	r18, r3
   18d0a:	08 f0       	brcs	.+2      	; 0x18d0e <arb_priorityScheduler+0x342>
   18d0c:	30 e0       	ldi	r19, 0x00	; 0
   18d0e:	8e 2d       	mov	r24, r14
   18d10:	87 0d       	add	r24, r7
   18d12:	41 e0       	ldi	r20, 0x01	; 1
   18d14:	8e 15       	cp	r24, r14
   18d16:	08 f0       	brcs	.+2      	; 0x18d1a <arb_priorityScheduler+0x34e>
   18d18:	40 e0       	ldi	r20, 0x00	; 0
   18d1a:	38 0f       	add	r19, r24
   18d1c:	91 e0       	ldi	r25, 0x01	; 1
   18d1e:	38 17       	cp	r19, r24
   18d20:	08 f0       	brcs	.+2      	; 0x18d24 <arb_priorityScheduler+0x358>
   18d22:	90 e0       	ldi	r25, 0x00	; 0
   18d24:	49 2b       	or	r20, r25
   18d26:	8f 2d       	mov	r24, r15
   18d28:	88 0d       	add	r24, r8
   18d2a:	51 e0       	ldi	r21, 0x01	; 1
   18d2c:	8f 15       	cp	r24, r15
   18d2e:	08 f0       	brcs	.+2      	; 0x18d32 <arb_priorityScheduler+0x366>
   18d30:	50 e0       	ldi	r21, 0x00	; 0
   18d32:	48 0f       	add	r20, r24
   18d34:	91 e0       	ldi	r25, 0x01	; 1
   18d36:	48 17       	cp	r20, r24
   18d38:	08 f0       	brcs	.+2      	; 0x18d3c <arb_priorityScheduler+0x370>
   18d3a:	90 e0       	ldi	r25, 0x00	; 0
   18d3c:	59 2b       	or	r21, r25
   18d3e:	80 2f       	mov	r24, r16
   18d40:	89 0d       	add	r24, r9
   18d42:	61 e0       	ldi	r22, 0x01	; 1
   18d44:	80 17       	cp	r24, r16
   18d46:	08 f0       	brcs	.+2      	; 0x18d4a <arb_priorityScheduler+0x37e>
   18d48:	60 e0       	ldi	r22, 0x00	; 0
   18d4a:	58 0f       	add	r21, r24
   18d4c:	91 e0       	ldi	r25, 0x01	; 1
   18d4e:	58 17       	cp	r21, r24
   18d50:	08 f0       	brcs	.+2      	; 0x18d54 <arb_priorityScheduler+0x388>
   18d52:	90 e0       	ldi	r25, 0x00	; 0
   18d54:	69 2b       	or	r22, r25
   18d56:	62 0d       	add	r22, r2
   18d58:	71 e0       	ldi	r23, 0x01	; 1
   18d5a:	62 15       	cp	r22, r2
   18d5c:	08 f0       	brcs	.+2      	; 0x18d60 <arb_priorityScheduler+0x394>
   18d5e:	70 e0       	ldi	r23, 0x00	; 0
   18d60:	71 0f       	add	r23, r17
   18d62:	81 e0       	ldi	r24, 0x01	; 1
   18d64:	71 17       	cp	r23, r17
   18d66:	08 f0       	brcs	.+2      	; 0x18d6a <arb_priorityScheduler+0x39e>
   18d68:	80 e0       	ldi	r24, 0x00	; 0
   18d6a:	85 0d       	add	r24, r5
   18d6c:	91 e0       	ldi	r25, 0x01	; 1
   18d6e:	85 15       	cp	r24, r5
   18d70:	08 f0       	brcs	.+2      	; 0x18d74 <arb_priorityScheduler+0x3a8>
   18d72:	90 e0       	ldi	r25, 0x00	; 0
   18d74:	94 0d       	add	r25, r4
   18d76:	0f e0       	ldi	r16, 0x0F	; 15
   18d78:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__lshrdi3>
   18d7c:	20 93 c6 2b 	sts	0x2BC6, r18
   18d80:	30 93 c7 2b 	sts	0x2BC7, r19
   18d84:	40 93 c8 2b 	sts	0x2BC8, r20
   18d88:	50 93 c9 2b 	sts	0x2BC9, r21
   18d8c:	2a 96       	adiw	r28, 0x0a	; 10
   18d8e:	cd bf       	out	0x3d, r28	; 61
   18d90:	de bf       	out	0x3e, r29	; 62
   18d92:	df 91       	pop	r29
   18d94:	cf 91       	pop	r28
   18d96:	1f 91       	pop	r17
   18d98:	0f 91       	pop	r16
   18d9a:	ff 90       	pop	r15
   18d9c:	ef 90       	pop	r14
   18d9e:	df 90       	pop	r13
   18da0:	cf 90       	pop	r12
   18da2:	bf 90       	pop	r11
   18da4:	af 90       	pop	r10
   18da6:	9f 90       	pop	r9
   18da8:	8f 90       	pop	r8
   18daa:	7f 90       	pop	r7
   18dac:	6f 90       	pop	r6
   18dae:	5f 90       	pop	r5
   18db0:	4f 90       	pop	r4
   18db2:	3f 90       	pop	r3
   18db4:	2f 90       	pop	r2
   18db6:	08 95       	ret

00018db8 <arb_schedulerInit>:
   18db8:	ef 92       	push	r14
   18dba:	ff 92       	push	r15
   18dbc:	1f 93       	push	r17
   18dbe:	cf 93       	push	r28
   18dc0:	df 93       	push	r29
   18dc2:	0f 92       	push	r0
   18dc4:	0f 92       	push	r0
   18dc6:	cd b7       	in	r28, 0x3d	; 61
   18dc8:	de b7       	in	r29, 0x3e	; 62
   18dca:	18 2f       	mov	r17, r24
   18dcc:	7b 01       	movw	r14, r22
   18dce:	84 2f       	mov	r24, r20
   18dd0:	10 92 bf 2b 	sts	0x2BBF, r1
   18dd4:	10 92 c2 2b 	sts	0x2BC2, r1
   18dd8:	10 92 c3 2b 	sts	0x2BC3, r1
   18ddc:	10 92 c4 2b 	sts	0x2BC4, r1
   18de0:	10 92 c5 2b 	sts	0x2BC5, r1
   18de4:	10 92 c6 2b 	sts	0x2BC6, r1
   18de8:	10 92 c7 2b 	sts	0x2BC7, r1
   18dec:	10 92 c8 2b 	sts	0x2BC8, r1
   18df0:	10 92 c9 2b 	sts	0x2BC9, r1
   18df4:	10 92 c0 2b 	sts	0x2BC0, r1
   18df8:	10 92 c1 2b 	sts	0x2BC1, r1
   18dfc:	10 92 ca 2b 	sts	0x2BCA, r1
   18e00:	10 92 cb 2b 	sts	0x2BCB, r1
   18e04:	10 92 cc 2b 	sts	0x2BCC, r1
   18e08:	10 92 cd 2b 	sts	0x2BCD, r1
   18e0c:	f8 94       	cli
   18e0e:	0e 94 08 d3 	call	0x1a610	; 0x1a610 <arb_sysTimerInit>
   18e12:	c7 01       	movw	r24, r14
   18e14:	6f ef       	ldi	r22, 0xFF	; 255
   18e16:	0e 94 bd d6 	call	0x1ad7a	; 0x1ad7a <arb_idleInit>
   18e1a:	89 83       	std	Y+1, r24	; 0x01
   18e1c:	9a 83       	std	Y+2, r25	; 0x02
   18e1e:	89 81       	ldd	r24, Y+1	; 0x01
   18e20:	9a 81       	ldd	r25, Y+2	; 0x02
   18e22:	97 ff       	sbrs	r25, 7
   18e24:	08 c0       	rjmp	.+16     	; 0x18e36 <arb_schedulerInit+0x7e>
   18e26:	84 e0       	ldi	r24, 0x04	; 4
   18e28:	6a ee       	ldi	r22, 0xEA	; 234
   18e2a:	71 e2       	ldi	r23, 0x21	; 33
   18e2c:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
   18e30:	89 81       	ldd	r24, Y+1	; 0x01
   18e32:	9a 81       	ldd	r25, Y+2	; 0x02
   18e34:	1b c0       	rjmp	.+54     	; 0x18e6c <arb_schedulerInit+0xb4>
   18e36:	e0 91 2c 22 	lds	r30, 0x222C
   18e3a:	f0 91 2d 22 	lds	r31, 0x222D
   18e3e:	89 81       	ldd	r24, Y+1	; 0x01
   18e40:	9a 81       	ldd	r25, Y+2	; 0x02
   18e42:	86 83       	std	Z+6, r24	; 0x06
   18e44:	97 83       	std	Z+7, r25	; 0x07
   18e46:	11 23       	and	r17, r17
   18e48:	29 f0       	breq	.+10     	; 0x18e54 <arb_schedulerInit+0x9c>
   18e4a:	11 30       	cpi	r17, 0x01	; 1
   18e4c:	19 f4       	brne	.+6      	; 0x18e54 <arb_schedulerInit+0x9c>
   18e4e:	86 ee       	ldi	r24, 0xE6	; 230
   18e50:	94 ec       	ldi	r25, 0xC4	; 196
   18e52:	02 c0       	rjmp	.+4      	; 0x18e58 <arb_schedulerInit+0xa0>
   18e54:	84 e1       	ldi	r24, 0x14	; 20
   18e56:	93 ec       	ldi	r25, 0xC3	; 195
   18e58:	80 93 36 2c 	sts	0x2C36, r24
   18e5c:	90 93 37 2c 	sts	0x2C37, r25
   18e60:	84 e0       	ldi	r24, 0x04	; 4
   18e62:	65 e0       	ldi	r22, 0x05	; 5
   18e64:	72 e2       	ldi	r23, 0x22	; 34
   18e66:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
   18e6a:	80 e0       	ldi	r24, 0x00	; 0
   18e6c:	0f 90       	pop	r0
   18e6e:	0f 90       	pop	r0
   18e70:	df 91       	pop	r29
   18e72:	cf 91       	pop	r28
   18e74:	1f 91       	pop	r17
   18e76:	ff 90       	pop	r15
   18e78:	ef 90       	pop	r14
   18e7a:	08 95       	ret

00018e7c <arb_schedulerStart>:
   18e7c:	ef 92       	push	r14
   18e7e:	ff 92       	push	r15
   18e80:	0f 93       	push	r16
   18e82:	1f 93       	push	r17
   18e84:	cf 93       	push	r28
   18e86:	df 93       	push	r29
   18e88:	cd b7       	in	r28, 0x3d	; 61
   18e8a:	de b7       	in	r29, 0x3e	; 62
   18e8c:	e3 97       	sbiw	r28, 0x33	; 51
   18e8e:	cd bf       	out	0x3d, r28	; 61
   18e90:	de bf       	out	0x3e, r29	; 62
   18e92:	11 e0       	ldi	r17, 0x01	; 1
   18e94:	10 93 bf 2b 	sts	0x2BBF, r17
   18e98:	0e 94 f7 d2 	call	0x1a5ee	; 0x1a5ee <arb_sysTimerStart>
   18e9c:	87 ff       	sbrs	r24, 7
   18e9e:	26 c0       	rjmp	.+76     	; 0x18eec <arb_schedulerStart+0x70>
   18ea0:	00 d0       	rcall	.+0      	; 0x18ea2 <arb_schedulerStart+0x26>
   18ea2:	00 d0       	rcall	.+0      	; 0x18ea4 <arb_schedulerStart+0x28>
   18ea4:	ed b7       	in	r30, 0x3d	; 61
   18ea6:	fe b7       	in	r31, 0x3e	; 62
   18ea8:	31 96       	adiw	r30, 0x01	; 1
   18eaa:	8e 01       	movw	r16, r28
   18eac:	0e 5f       	subi	r16, 0xFE	; 254
   18eae:	1f 4f       	sbci	r17, 0xFF	; 255
   18eb0:	ad b7       	in	r26, 0x3d	; 61
   18eb2:	be b7       	in	r27, 0x3e	; 62
   18eb4:	11 96       	adiw	r26, 0x01	; 1
   18eb6:	0d 93       	st	X+, r16
   18eb8:	1c 93       	st	X, r17
   18eba:	12 97       	sbiw	r26, 0x02	; 2
   18ebc:	29 e6       	ldi	r18, 0x69	; 105
   18ebe:	3e e0       	ldi	r19, 0x0E	; 14
   18ec0:	22 83       	std	Z+2, r18	; 0x02
   18ec2:	33 83       	std	Z+3, r19	; 0x03
   18ec4:	99 27       	eor	r25, r25
   18ec6:	87 fd       	sbrc	r24, 7
   18ec8:	90 95       	com	r25
   18eca:	84 83       	std	Z+4, r24	; 0x04
   18ecc:	95 83       	std	Z+5, r25	; 0x05
   18ece:	0e 94 e3 f7 	call	0x1efc6	; 0x1efc6 <sprintf_P>
   18ed2:	8d b7       	in	r24, 0x3d	; 61
   18ed4:	9e b7       	in	r25, 0x3e	; 62
   18ed6:	06 96       	adiw	r24, 0x06	; 6
   18ed8:	8d bf       	out	0x3d, r24	; 61
   18eda:	9e bf       	out	0x3e, r25	; 62
   18edc:	84 e0       	ldi	r24, 0x04	; 4
   18ede:	b8 01       	movw	r22, r16
   18ee0:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
   18ee4:	80 e0       	ldi	r24, 0x00	; 0
   18ee6:	90 e0       	ldi	r25, 0x00	; 0
   18ee8:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <exit>
   18eec:	e0 91 2c 22 	lds	r30, 0x222C
   18ef0:	f0 91 2d 22 	lds	r31, 0x222D
   18ef4:	06 80       	ldd	r0, Z+6	; 0x06
   18ef6:	f7 81       	ldd	r31, Z+7	; 0x07
   18ef8:	e0 2d       	mov	r30, r0
   18efa:	01 90       	ld	r0, Z+
   18efc:	f0 81       	ld	r31, Z
   18efe:	e0 2d       	mov	r30, r0
   18f00:	e0 93 ce 2b 	sts	0x2BCE, r30
   18f04:	f0 93 cf 2b 	sts	0x2BCF, r31
   18f08:	11 83       	std	Z+1, r17	; 0x01
   18f0a:	80 e2       	ldi	r24, 0x20	; 32
   18f0c:	0e 94 41 c0 	call	0x18082	; 0x18082 <arb_setPrintfDbgLevel>
   18f10:	0e 94 dd 24 	call	0x49ba	; 0x49ba <hal_getCpuFreq>
   18f14:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   18f18:	20 e0       	ldi	r18, 0x00	; 0
   18f1a:	30 e0       	ldi	r19, 0x00	; 0
   18f1c:	4a e7       	ldi	r20, 0x7A	; 122
   18f1e:	55 e4       	ldi	r21, 0x45	; 69
   18f20:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   18f24:	20 e0       	ldi	r18, 0x00	; 0
   18f26:	30 e0       	ldi	r19, 0x00	; 0
   18f28:	4a e7       	ldi	r20, 0x7A	; 122
   18f2a:	54 e4       	ldi	r21, 0x44	; 68
   18f2c:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   18f30:	7b 01       	movw	r14, r22
   18f32:	18 2f       	mov	r17, r24
   18f34:	09 2f       	mov	r16, r25
   18f36:	8f b7       	in	r24, 0x3f	; 63
   18f38:	89 83       	std	Y+1, r24	; 0x01
   18f3a:	f8 94       	cli
   18f3c:	98 01       	movw	r18, r16
   18f3e:	8e 2d       	mov	r24, r14
   18f40:	9f 2d       	mov	r25, r15
   18f42:	a3 2f       	mov	r26, r19
   18f44:	b2 2f       	mov	r27, r18
   18f46:	bc 01       	movw	r22, r24
   18f48:	cd 01       	movw	r24, r26
   18f4a:	20 e0       	ldi	r18, 0x00	; 0
   18f4c:	30 e0       	ldi	r19, 0x00	; 0
   18f4e:	40 e8       	ldi	r20, 0x80	; 128
   18f50:	5f e3       	ldi	r21, 0x3F	; 63
   18f52:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
   18f56:	87 fd       	sbrc	r24, 7
   18f58:	23 c0       	rjmp	.+70     	; 0x18fa0 <arb_schedulerStart+0x124>
   18f5a:	98 01       	movw	r18, r16
   18f5c:	8e 2d       	mov	r24, r14
   18f5e:	9f 2d       	mov	r25, r15
   18f60:	a3 2f       	mov	r26, r19
   18f62:	b2 2f       	mov	r27, r18
   18f64:	bc 01       	movw	r22, r24
   18f66:	cd 01       	movw	r24, r26
   18f68:	20 e0       	ldi	r18, 0x00	; 0
   18f6a:	3f ef       	ldi	r19, 0xFF	; 255
   18f6c:	4f e7       	ldi	r20, 0x7F	; 127
   18f6e:	57 e4       	ldi	r21, 0x47	; 71
   18f70:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
   18f74:	18 16       	cp	r1, r24
   18f76:	54 f4       	brge	.+20     	; 0x18f8c <arb_schedulerStart+0x110>
   18f78:	80 e1       	ldi	r24, 0x10	; 16
   18f7a:	97 e2       	ldi	r25, 0x27	; 39
   18f7c:	20 e2       	ldi	r18, 0x20	; 32
   18f7e:	33 e0       	ldi	r19, 0x03	; 3
   18f80:	f9 01       	movw	r30, r18
   18f82:	31 97       	sbiw	r30, 0x01	; 1
   18f84:	f1 f7       	brne	.-4      	; 0x18f82 <arb_schedulerStart+0x106>
   18f86:	01 97       	sbiw	r24, 0x01	; 1
   18f88:	d9 f7       	brne	.-10     	; 0x18f80 <arb_schedulerStart+0x104>
   18f8a:	11 c0       	rjmp	.+34     	; 0x18fae <arb_schedulerStart+0x132>
   18f8c:	98 01       	movw	r18, r16
   18f8e:	8e 2d       	mov	r24, r14
   18f90:	9f 2d       	mov	r25, r15
   18f92:	a3 2f       	mov	r26, r19
   18f94:	b2 2f       	mov	r27, r18
   18f96:	bc 01       	movw	r22, r24
   18f98:	cd 01       	movw	r24, r26
   18f9a:	0e 94 d2 f2 	call	0x1e5a4	; 0x1e5a4 <__fixunssfsi>
   18f9e:	02 c0       	rjmp	.+4      	; 0x18fa4 <arb_schedulerStart+0x128>
   18fa0:	61 e0       	ldi	r22, 0x01	; 1
   18fa2:	70 e0       	ldi	r23, 0x00	; 0
   18fa4:	cb 01       	movw	r24, r22
   18fa6:	01 97       	sbiw	r24, 0x01	; 1
   18fa8:	f1 f7       	brne	.-4      	; 0x18fa6 <arb_schedulerStart+0x12a>
   18faa:	89 81       	ldd	r24, Y+1	; 0x01
   18fac:	8f bf       	out	0x3f, r24	; 63
   18fae:	e0 91 2c 22 	lds	r30, 0x222C
   18fb2:	f0 91 2d 22 	lds	r31, 0x222D
   18fb6:	06 80       	ldd	r0, Z+6	; 0x06
   18fb8:	f7 81       	ldd	r31, Z+7	; 0x07
   18fba:	e0 2d       	mov	r30, r0
   18fbc:	01 90       	ld	r0, Z+
   18fbe:	f0 81       	ld	r31, Z
   18fc0:	e0 2d       	mov	r30, r0
   18fc2:	e0 93 38 2c 	sts	0x2C38, r30
   18fc6:	f0 93 39 2c 	sts	0x2C39, r31
   18fca:	81 85       	ldd	r24, Z+9	; 0x09
   18fcc:	8d bf       	out	0x3d, r24	; 61
   18fce:	82 85       	ldd	r24, Z+10	; 0x0a
   18fd0:	8e bf       	out	0x3e, r24	; 62
   18fd2:	ff 91       	pop	r31
   18fd4:	ef 91       	pop	r30
   18fd6:	df 91       	pop	r29
   18fd8:	cf 91       	pop	r28
   18fda:	bf 91       	pop	r27
   18fdc:	af 91       	pop	r26
   18fde:	9f 91       	pop	r25
   18fe0:	8f 91       	pop	r24
   18fe2:	7f 91       	pop	r23
   18fe4:	6f 91       	pop	r22
   18fe6:	5f 91       	pop	r21
   18fe8:	4f 91       	pop	r20
   18fea:	3f 91       	pop	r19
   18fec:	2f 91       	pop	r18
   18fee:	1f 91       	pop	r17
   18ff0:	0f 91       	pop	r16
   18ff2:	ff 90       	pop	r15
   18ff4:	ef 90       	pop	r14
   18ff6:	df 90       	pop	r13
   18ff8:	cf 90       	pop	r12
   18ffa:	bf 90       	pop	r11
   18ffc:	af 90       	pop	r10
   18ffe:	9f 90       	pop	r9
   19000:	8f 90       	pop	r8
   19002:	7f 90       	pop	r7
   19004:	6f 90       	pop	r6
   19006:	5f 90       	pop	r5
   19008:	4f 90       	pop	r4
   1900a:	3f 90       	pop	r3
   1900c:	2f 90       	pop	r2
   1900e:	1f 90       	pop	r1
   19010:	0f 90       	pop	r0
   19012:	0f be       	out	0x3f, r0	; 63
   19014:	0f 90       	pop	r0
   19016:	08 95       	ret
   19018:	e3 96       	adiw	r28, 0x33	; 51
   1901a:	cd bf       	out	0x3d, r28	; 61
   1901c:	de bf       	out	0x3e, r29	; 62
   1901e:	df 91       	pop	r29
   19020:	cf 91       	pop	r28
   19022:	1f 91       	pop	r17
   19024:	0f 91       	pop	r16
   19026:	ff 90       	pop	r15
   19028:	ef 90       	pop	r14
   1902a:	08 95       	ret

0001902c <arb_getOneMinLoadingEst>:
   1902c:	60 91 c2 2b 	lds	r22, 0x2BC2
   19030:	70 91 c3 2b 	lds	r23, 0x2BC3
   19034:	80 91 c4 2b 	lds	r24, 0x2BC4
   19038:	90 91 c5 2b 	lds	r25, 0x2BC5
   1903c:	08 95       	ret

0001903e <arb_getFiveMinLoadingEst>:
   1903e:	60 91 c6 2b 	lds	r22, 0x2BC6
   19042:	70 91 c7 2b 	lds	r23, 0x2BC7
   19046:	80 91 c8 2b 	lds	r24, 0x2BC8
   1904a:	90 91 c9 2b 	lds	r25, 0x2BC9
   1904e:	08 95       	ret

00019050 <arb_yieldFromSignalActiveInt>:
   19050:	0f 92       	push	r0
   19052:	0f b6       	in	r0, 0x3f	; 63
   19054:	0f 93       	push	r16
   19056:	00 2d       	mov	r16, r0
   19058:	00 68       	ori	r16, 0x80	; 128
   1905a:	00 2e       	mov	r0, r16
   1905c:	0f 91       	pop	r16
   1905e:	0f 92       	push	r0
   19060:	1f 92       	push	r1
   19062:	11 24       	eor	r1, r1
   19064:	2f 92       	push	r2
   19066:	3f 92       	push	r3
   19068:	4f 92       	push	r4
   1906a:	5f 92       	push	r5
   1906c:	6f 92       	push	r6
   1906e:	7f 92       	push	r7
   19070:	8f 92       	push	r8
   19072:	9f 92       	push	r9
   19074:	af 92       	push	r10
   19076:	bf 92       	push	r11
   19078:	cf 92       	push	r12
   1907a:	df 92       	push	r13
   1907c:	ef 92       	push	r14
   1907e:	ff 92       	push	r15
   19080:	0f 93       	push	r16
   19082:	1f 93       	push	r17
   19084:	2f 93       	push	r18
   19086:	3f 93       	push	r19
   19088:	4f 93       	push	r20
   1908a:	5f 93       	push	r21
   1908c:	6f 93       	push	r22
   1908e:	7f 93       	push	r23
   19090:	8f 93       	push	r24
   19092:	9f 93       	push	r25
   19094:	af 93       	push	r26
   19096:	bf 93       	push	r27
   19098:	cf 93       	push	r28
   1909a:	df 93       	push	r29
   1909c:	ef 93       	push	r30
   1909e:	ff 93       	push	r31
   190a0:	e0 91 2c 22 	lds	r30, 0x222C
   190a4:	f0 91 2d 22 	lds	r31, 0x222D
   190a8:	06 80       	ldd	r0, Z+6	; 0x06
   190aa:	f7 81       	ldd	r31, Z+7	; 0x07
   190ac:	e0 2d       	mov	r30, r0
   190ae:	01 90       	ld	r0, Z+
   190b0:	f0 81       	ld	r31, Z
   190b2:	e0 2d       	mov	r30, r0
   190b4:	e0 93 38 2c 	sts	0x2C38, r30
   190b8:	f0 93 39 2c 	sts	0x2C39, r31
   190bc:	2d b7       	in	r18, 0x3d	; 61
   190be:	30 e0       	ldi	r19, 0x00	; 0
   190c0:	21 87       	std	Z+9, r18	; 0x09
   190c2:	32 87       	std	Z+10, r19	; 0x0a
   190c4:	4e b7       	in	r20, 0x3e	; 62
   190c6:	94 2f       	mov	r25, r20
   190c8:	80 e0       	ldi	r24, 0x00	; 0
   190ca:	82 2b       	or	r24, r18
   190cc:	93 2b       	or	r25, r19
   190ce:	81 87       	std	Z+9, r24	; 0x09
   190d0:	92 87       	std	Z+10, r25	; 0x0a
   190d2:	8f ef       	ldi	r24, 0xFF	; 255
   190d4:	8d bf       	out	0x3d, r24	; 61
   190d6:	8f e3       	ldi	r24, 0x3F	; 63
   190d8:	8e bf       	out	0x3e, r24	; 62
   190da:	c0 91 3d 00 	lds	r28, 0x003D
   190de:	d0 91 3e 00 	lds	r29, 0x003E
   190e2:	e0 91 2c 22 	lds	r30, 0x222C
   190e6:	f0 91 2d 22 	lds	r31, 0x222D
   190ea:	06 80       	ldd	r0, Z+6	; 0x06
   190ec:	f7 81       	ldd	r31, Z+7	; 0x07
   190ee:	e0 2d       	mov	r30, r0
   190f0:	01 90       	ld	r0, Z+
   190f2:	f0 81       	ld	r31, Z
   190f4:	e0 2d       	mov	r30, r0
   190f6:	e0 93 d2 2b 	sts	0x2BD2, r30
   190fa:	f0 93 d3 2b 	sts	0x2BD3, r31
   190fe:	03 84       	ldd	r0, Z+11	; 0x0b
   19100:	f4 85       	ldd	r31, Z+12	; 0x0c
   19102:	e0 2d       	mov	r30, r0
   19104:	80 81       	ld	r24, Z
   19106:	91 81       	ldd	r25, Z+1	; 0x01
   19108:	2e ed       	ldi	r18, 0xDE	; 222
   1910a:	8d 3a       	cpi	r24, 0xAD	; 173
   1910c:	92 07       	cpc	r25, r18
   1910e:	11 f0       	breq	.+4      	; 0x19114 <arb_yieldFromSignalActiveInt+0xc4>
   19110:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   19114:	e0 91 36 2c 	lds	r30, 0x2C36
   19118:	f0 91 37 2c 	lds	r31, 0x2C37
   1911c:	19 95       	eicall
   1911e:	e0 91 2c 22 	lds	r30, 0x222C
   19122:	f0 91 2d 22 	lds	r31, 0x222D
   19126:	06 80       	ldd	r0, Z+6	; 0x06
   19128:	f7 81       	ldd	r31, Z+7	; 0x07
   1912a:	e0 2d       	mov	r30, r0
   1912c:	01 90       	ld	r0, Z+
   1912e:	f0 81       	ld	r31, Z
   19130:	e0 2d       	mov	r30, r0
   19132:	e0 93 38 2c 	sts	0x2C38, r30
   19136:	f0 93 39 2c 	sts	0x2C39, r31
   1913a:	81 85       	ldd	r24, Z+9	; 0x09
   1913c:	8d bf       	out	0x3d, r24	; 61
   1913e:	82 85       	ldd	r24, Z+10	; 0x0a
   19140:	8e bf       	out	0x3e, r24	; 62
   19142:	ff 91       	pop	r31
   19144:	ef 91       	pop	r30
   19146:	df 91       	pop	r29
   19148:	cf 91       	pop	r28
   1914a:	bf 91       	pop	r27
   1914c:	af 91       	pop	r26
   1914e:	9f 91       	pop	r25
   19150:	8f 91       	pop	r24
   19152:	7f 91       	pop	r23
   19154:	6f 91       	pop	r22
   19156:	5f 91       	pop	r21
   19158:	4f 91       	pop	r20
   1915a:	3f 91       	pop	r19
   1915c:	2f 91       	pop	r18
   1915e:	1f 91       	pop	r17
   19160:	0f 91       	pop	r16
   19162:	ff 90       	pop	r15
   19164:	ef 90       	pop	r14
   19166:	df 90       	pop	r13
   19168:	cf 90       	pop	r12
   1916a:	bf 90       	pop	r11
   1916c:	af 90       	pop	r10
   1916e:	9f 90       	pop	r9
   19170:	8f 90       	pop	r8
   19172:	7f 90       	pop	r7
   19174:	6f 90       	pop	r6
   19176:	5f 90       	pop	r5
   19178:	4f 90       	pop	r4
   1917a:	3f 90       	pop	r3
   1917c:	2f 90       	pop	r2
   1917e:	1f 90       	pop	r1
   19180:	0f 90       	pop	r0
   19182:	0f be       	out	0x3f, r0	; 63
   19184:	0f 90       	pop	r0
   19186:	18 95       	reti

00019188 <arb_yieldFromSignalIntsOn>:
   19188:	0f 92       	push	r0
   1918a:	0f b6       	in	r0, 0x3f	; 63
   1918c:	0f 93       	push	r16
   1918e:	00 2d       	mov	r16, r0
   19190:	00 68       	ori	r16, 0x80	; 128
   19192:	00 2e       	mov	r0, r16
   19194:	0f 91       	pop	r16
   19196:	0f 92       	push	r0
   19198:	1f 92       	push	r1
   1919a:	11 24       	eor	r1, r1
   1919c:	2f 92       	push	r2
   1919e:	3f 92       	push	r3
   191a0:	4f 92       	push	r4
   191a2:	5f 92       	push	r5
   191a4:	6f 92       	push	r6
   191a6:	7f 92       	push	r7
   191a8:	8f 92       	push	r8
   191aa:	9f 92       	push	r9
   191ac:	af 92       	push	r10
   191ae:	bf 92       	push	r11
   191b0:	cf 92       	push	r12
   191b2:	df 92       	push	r13
   191b4:	ef 92       	push	r14
   191b6:	ff 92       	push	r15
   191b8:	0f 93       	push	r16
   191ba:	1f 93       	push	r17
   191bc:	2f 93       	push	r18
   191be:	3f 93       	push	r19
   191c0:	4f 93       	push	r20
   191c2:	5f 93       	push	r21
   191c4:	6f 93       	push	r22
   191c6:	7f 93       	push	r23
   191c8:	8f 93       	push	r24
   191ca:	9f 93       	push	r25
   191cc:	af 93       	push	r26
   191ce:	bf 93       	push	r27
   191d0:	cf 93       	push	r28
   191d2:	df 93       	push	r29
   191d4:	ef 93       	push	r30
   191d6:	ff 93       	push	r31
   191d8:	e0 91 2c 22 	lds	r30, 0x222C
   191dc:	f0 91 2d 22 	lds	r31, 0x222D
   191e0:	06 80       	ldd	r0, Z+6	; 0x06
   191e2:	f7 81       	ldd	r31, Z+7	; 0x07
   191e4:	e0 2d       	mov	r30, r0
   191e6:	01 90       	ld	r0, Z+
   191e8:	f0 81       	ld	r31, Z
   191ea:	e0 2d       	mov	r30, r0
   191ec:	e0 93 38 2c 	sts	0x2C38, r30
   191f0:	f0 93 39 2c 	sts	0x2C39, r31
   191f4:	2d b7       	in	r18, 0x3d	; 61
   191f6:	30 e0       	ldi	r19, 0x00	; 0
   191f8:	21 87       	std	Z+9, r18	; 0x09
   191fa:	32 87       	std	Z+10, r19	; 0x0a
   191fc:	4e b7       	in	r20, 0x3e	; 62
   191fe:	94 2f       	mov	r25, r20
   19200:	80 e0       	ldi	r24, 0x00	; 0
   19202:	82 2b       	or	r24, r18
   19204:	93 2b       	or	r25, r19
   19206:	81 87       	std	Z+9, r24	; 0x09
   19208:	92 87       	std	Z+10, r25	; 0x0a
   1920a:	8f ef       	ldi	r24, 0xFF	; 255
   1920c:	8d bf       	out	0x3d, r24	; 61
   1920e:	8f e3       	ldi	r24, 0x3F	; 63
   19210:	8e bf       	out	0x3e, r24	; 62
   19212:	c0 91 3d 00 	lds	r28, 0x003D
   19216:	d0 91 3e 00 	lds	r29, 0x003E
   1921a:	e0 91 2c 22 	lds	r30, 0x222C
   1921e:	f0 91 2d 22 	lds	r31, 0x222D
   19222:	06 80       	ldd	r0, Z+6	; 0x06
   19224:	f7 81       	ldd	r31, Z+7	; 0x07
   19226:	e0 2d       	mov	r30, r0
   19228:	01 90       	ld	r0, Z+
   1922a:	f0 81       	ld	r31, Z
   1922c:	e0 2d       	mov	r30, r0
   1922e:	e0 93 d2 2b 	sts	0x2BD2, r30
   19232:	f0 93 d3 2b 	sts	0x2BD3, r31
   19236:	03 84       	ldd	r0, Z+11	; 0x0b
   19238:	f4 85       	ldd	r31, Z+12	; 0x0c
   1923a:	e0 2d       	mov	r30, r0
   1923c:	80 81       	ld	r24, Z
   1923e:	91 81       	ldd	r25, Z+1	; 0x01
   19240:	2e ed       	ldi	r18, 0xDE	; 222
   19242:	8d 3a       	cpi	r24, 0xAD	; 173
   19244:	92 07       	cpc	r25, r18
   19246:	11 f0       	breq	.+4      	; 0x1924c <arb_yieldFromSignalIntsOn+0xc4>
   19248:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1924c:	e0 91 36 2c 	lds	r30, 0x2C36
   19250:	f0 91 37 2c 	lds	r31, 0x2C37
   19254:	19 95       	eicall
   19256:	e0 91 2c 22 	lds	r30, 0x222C
   1925a:	f0 91 2d 22 	lds	r31, 0x222D
   1925e:	06 80       	ldd	r0, Z+6	; 0x06
   19260:	f7 81       	ldd	r31, Z+7	; 0x07
   19262:	e0 2d       	mov	r30, r0
   19264:	01 90       	ld	r0, Z+
   19266:	f0 81       	ld	r31, Z
   19268:	e0 2d       	mov	r30, r0
   1926a:	e0 93 38 2c 	sts	0x2C38, r30
   1926e:	f0 93 39 2c 	sts	0x2C39, r31
   19272:	81 85       	ldd	r24, Z+9	; 0x09
   19274:	8d bf       	out	0x3d, r24	; 61
   19276:	82 85       	ldd	r24, Z+10	; 0x0a
   19278:	8e bf       	out	0x3e, r24	; 62
   1927a:	ff 91       	pop	r31
   1927c:	ef 91       	pop	r30
   1927e:	df 91       	pop	r29
   19280:	cf 91       	pop	r28
   19282:	bf 91       	pop	r27
   19284:	af 91       	pop	r26
   19286:	9f 91       	pop	r25
   19288:	8f 91       	pop	r24
   1928a:	7f 91       	pop	r23
   1928c:	6f 91       	pop	r22
   1928e:	5f 91       	pop	r21
   19290:	4f 91       	pop	r20
   19292:	3f 91       	pop	r19
   19294:	2f 91       	pop	r18
   19296:	1f 91       	pop	r17
   19298:	0f 91       	pop	r16
   1929a:	ff 90       	pop	r15
   1929c:	ef 90       	pop	r14
   1929e:	df 90       	pop	r13
   192a0:	cf 90       	pop	r12
   192a2:	bf 90       	pop	r11
   192a4:	af 90       	pop	r10
   192a6:	9f 90       	pop	r9
   192a8:	8f 90       	pop	r8
   192aa:	7f 90       	pop	r7
   192ac:	6f 90       	pop	r6
   192ae:	5f 90       	pop	r5
   192b0:	4f 90       	pop	r4
   192b2:	3f 90       	pop	r3
   192b4:	2f 90       	pop	r2
   192b6:	1f 90       	pop	r1
   192b8:	0f 90       	pop	r0
   192ba:	0f be       	out	0x3f, r0	; 63
   192bc:	0f 90       	pop	r0
   192be:	08 95       	ret

000192c0 <arb_yieldFromSignalIntsOff>:
   192c0:	0f 92       	push	r0
   192c2:	0f b6       	in	r0, 0x3f	; 63
   192c4:	0f 92       	push	r0
   192c6:	1f 92       	push	r1
   192c8:	11 24       	eor	r1, r1
   192ca:	2f 92       	push	r2
   192cc:	3f 92       	push	r3
   192ce:	4f 92       	push	r4
   192d0:	5f 92       	push	r5
   192d2:	6f 92       	push	r6
   192d4:	7f 92       	push	r7
   192d6:	8f 92       	push	r8
   192d8:	9f 92       	push	r9
   192da:	af 92       	push	r10
   192dc:	bf 92       	push	r11
   192de:	cf 92       	push	r12
   192e0:	df 92       	push	r13
   192e2:	ef 92       	push	r14
   192e4:	ff 92       	push	r15
   192e6:	0f 93       	push	r16
   192e8:	1f 93       	push	r17
   192ea:	2f 93       	push	r18
   192ec:	3f 93       	push	r19
   192ee:	4f 93       	push	r20
   192f0:	5f 93       	push	r21
   192f2:	6f 93       	push	r22
   192f4:	7f 93       	push	r23
   192f6:	8f 93       	push	r24
   192f8:	9f 93       	push	r25
   192fa:	af 93       	push	r26
   192fc:	bf 93       	push	r27
   192fe:	cf 93       	push	r28
   19300:	df 93       	push	r29
   19302:	ef 93       	push	r30
   19304:	ff 93       	push	r31
   19306:	e0 91 2c 22 	lds	r30, 0x222C
   1930a:	f0 91 2d 22 	lds	r31, 0x222D
   1930e:	06 80       	ldd	r0, Z+6	; 0x06
   19310:	f7 81       	ldd	r31, Z+7	; 0x07
   19312:	e0 2d       	mov	r30, r0
   19314:	01 90       	ld	r0, Z+
   19316:	f0 81       	ld	r31, Z
   19318:	e0 2d       	mov	r30, r0
   1931a:	e0 93 38 2c 	sts	0x2C38, r30
   1931e:	f0 93 39 2c 	sts	0x2C39, r31
   19322:	2d b7       	in	r18, 0x3d	; 61
   19324:	30 e0       	ldi	r19, 0x00	; 0
   19326:	21 87       	std	Z+9, r18	; 0x09
   19328:	32 87       	std	Z+10, r19	; 0x0a
   1932a:	4e b7       	in	r20, 0x3e	; 62
   1932c:	94 2f       	mov	r25, r20
   1932e:	80 e0       	ldi	r24, 0x00	; 0
   19330:	82 2b       	or	r24, r18
   19332:	93 2b       	or	r25, r19
   19334:	81 87       	std	Z+9, r24	; 0x09
   19336:	92 87       	std	Z+10, r25	; 0x0a
   19338:	8f ef       	ldi	r24, 0xFF	; 255
   1933a:	8d bf       	out	0x3d, r24	; 61
   1933c:	8f e3       	ldi	r24, 0x3F	; 63
   1933e:	8e bf       	out	0x3e, r24	; 62
   19340:	c0 91 3d 00 	lds	r28, 0x003D
   19344:	d0 91 3e 00 	lds	r29, 0x003E
   19348:	e0 91 2c 22 	lds	r30, 0x222C
   1934c:	f0 91 2d 22 	lds	r31, 0x222D
   19350:	06 80       	ldd	r0, Z+6	; 0x06
   19352:	f7 81       	ldd	r31, Z+7	; 0x07
   19354:	e0 2d       	mov	r30, r0
   19356:	01 90       	ld	r0, Z+
   19358:	f0 81       	ld	r31, Z
   1935a:	e0 2d       	mov	r30, r0
   1935c:	e0 93 d2 2b 	sts	0x2BD2, r30
   19360:	f0 93 d3 2b 	sts	0x2BD3, r31
   19364:	03 84       	ldd	r0, Z+11	; 0x0b
   19366:	f4 85       	ldd	r31, Z+12	; 0x0c
   19368:	e0 2d       	mov	r30, r0
   1936a:	80 81       	ld	r24, Z
   1936c:	91 81       	ldd	r25, Z+1	; 0x01
   1936e:	2e ed       	ldi	r18, 0xDE	; 222
   19370:	8d 3a       	cpi	r24, 0xAD	; 173
   19372:	92 07       	cpc	r25, r18
   19374:	11 f0       	breq	.+4      	; 0x1937a <arb_yieldFromSignalIntsOff+0xba>
   19376:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1937a:	e0 91 36 2c 	lds	r30, 0x2C36
   1937e:	f0 91 37 2c 	lds	r31, 0x2C37
   19382:	19 95       	eicall
   19384:	e0 91 2c 22 	lds	r30, 0x222C
   19388:	f0 91 2d 22 	lds	r31, 0x222D
   1938c:	06 80       	ldd	r0, Z+6	; 0x06
   1938e:	f7 81       	ldd	r31, Z+7	; 0x07
   19390:	e0 2d       	mov	r30, r0
   19392:	01 90       	ld	r0, Z+
   19394:	f0 81       	ld	r31, Z
   19396:	e0 2d       	mov	r30, r0
   19398:	e0 93 38 2c 	sts	0x2C38, r30
   1939c:	f0 93 39 2c 	sts	0x2C39, r31
   193a0:	81 85       	ldd	r24, Z+9	; 0x09
   193a2:	8d bf       	out	0x3d, r24	; 61
   193a4:	82 85       	ldd	r24, Z+10	; 0x0a
   193a6:	8e bf       	out	0x3e, r24	; 62
   193a8:	ff 91       	pop	r31
   193aa:	ef 91       	pop	r30
   193ac:	df 91       	pop	r29
   193ae:	cf 91       	pop	r28
   193b0:	bf 91       	pop	r27
   193b2:	af 91       	pop	r26
   193b4:	9f 91       	pop	r25
   193b6:	8f 91       	pop	r24
   193b8:	7f 91       	pop	r23
   193ba:	6f 91       	pop	r22
   193bc:	5f 91       	pop	r21
   193be:	4f 91       	pop	r20
   193c0:	3f 91       	pop	r19
   193c2:	2f 91       	pop	r18
   193c4:	1f 91       	pop	r17
   193c6:	0f 91       	pop	r16
   193c8:	ff 90       	pop	r15
   193ca:	ef 90       	pop	r14
   193cc:	df 90       	pop	r13
   193ce:	cf 90       	pop	r12
   193d0:	bf 90       	pop	r11
   193d2:	af 90       	pop	r10
   193d4:	9f 90       	pop	r9
   193d6:	8f 90       	pop	r8
   193d8:	7f 90       	pop	r7
   193da:	6f 90       	pop	r6
   193dc:	5f 90       	pop	r5
   193de:	4f 90       	pop	r4
   193e0:	3f 90       	pop	r3
   193e2:	2f 90       	pop	r2
   193e4:	1f 90       	pop	r1
   193e6:	0f 90       	pop	r0
   193e8:	0f be       	out	0x3f, r0	; 63
   193ea:	0f 90       	pop	r0
   193ec:	08 95       	ret

000193ee <arb_yieldFromWaitIntsOn>:
   193ee:	0f 92       	push	r0
   193f0:	0f b6       	in	r0, 0x3f	; 63
   193f2:	0f 93       	push	r16
   193f4:	00 2d       	mov	r16, r0
   193f6:	00 68       	ori	r16, 0x80	; 128
   193f8:	00 2e       	mov	r0, r16
   193fa:	0f 91       	pop	r16
   193fc:	0f 92       	push	r0
   193fe:	1f 92       	push	r1
   19400:	11 24       	eor	r1, r1
   19402:	2f 92       	push	r2
   19404:	3f 92       	push	r3
   19406:	4f 92       	push	r4
   19408:	5f 92       	push	r5
   1940a:	6f 92       	push	r6
   1940c:	7f 92       	push	r7
   1940e:	8f 92       	push	r8
   19410:	9f 92       	push	r9
   19412:	af 92       	push	r10
   19414:	bf 92       	push	r11
   19416:	cf 92       	push	r12
   19418:	df 92       	push	r13
   1941a:	ef 92       	push	r14
   1941c:	ff 92       	push	r15
   1941e:	0f 93       	push	r16
   19420:	1f 93       	push	r17
   19422:	2f 93       	push	r18
   19424:	3f 93       	push	r19
   19426:	4f 93       	push	r20
   19428:	5f 93       	push	r21
   1942a:	6f 93       	push	r22
   1942c:	7f 93       	push	r23
   1942e:	8f 93       	push	r24
   19430:	9f 93       	push	r25
   19432:	af 93       	push	r26
   19434:	bf 93       	push	r27
   19436:	cf 93       	push	r28
   19438:	df 93       	push	r29
   1943a:	ef 93       	push	r30
   1943c:	ff 93       	push	r31
   1943e:	e0 91 2c 22 	lds	r30, 0x222C
   19442:	f0 91 2d 22 	lds	r31, 0x222D
   19446:	06 80       	ldd	r0, Z+6	; 0x06
   19448:	f7 81       	ldd	r31, Z+7	; 0x07
   1944a:	e0 2d       	mov	r30, r0
   1944c:	01 90       	ld	r0, Z+
   1944e:	f0 81       	ld	r31, Z
   19450:	e0 2d       	mov	r30, r0
   19452:	e0 93 38 2c 	sts	0x2C38, r30
   19456:	f0 93 39 2c 	sts	0x2C39, r31
   1945a:	2d b7       	in	r18, 0x3d	; 61
   1945c:	30 e0       	ldi	r19, 0x00	; 0
   1945e:	21 87       	std	Z+9, r18	; 0x09
   19460:	32 87       	std	Z+10, r19	; 0x0a
   19462:	4e b7       	in	r20, 0x3e	; 62
   19464:	94 2f       	mov	r25, r20
   19466:	80 e0       	ldi	r24, 0x00	; 0
   19468:	82 2b       	or	r24, r18
   1946a:	93 2b       	or	r25, r19
   1946c:	81 87       	std	Z+9, r24	; 0x09
   1946e:	92 87       	std	Z+10, r25	; 0x0a
   19470:	8f ef       	ldi	r24, 0xFF	; 255
   19472:	8d bf       	out	0x3d, r24	; 61
   19474:	8f e3       	ldi	r24, 0x3F	; 63
   19476:	8e bf       	out	0x3e, r24	; 62
   19478:	c0 91 3d 00 	lds	r28, 0x003D
   1947c:	d0 91 3e 00 	lds	r29, 0x003E
   19480:	e0 91 2c 22 	lds	r30, 0x222C
   19484:	f0 91 2d 22 	lds	r31, 0x222D
   19488:	06 80       	ldd	r0, Z+6	; 0x06
   1948a:	f7 81       	ldd	r31, Z+7	; 0x07
   1948c:	e0 2d       	mov	r30, r0
   1948e:	01 90       	ld	r0, Z+
   19490:	f0 81       	ld	r31, Z
   19492:	e0 2d       	mov	r30, r0
   19494:	e0 93 d2 2b 	sts	0x2BD2, r30
   19498:	f0 93 d3 2b 	sts	0x2BD3, r31
   1949c:	03 84       	ldd	r0, Z+11	; 0x0b
   1949e:	f4 85       	ldd	r31, Z+12	; 0x0c
   194a0:	e0 2d       	mov	r30, r0
   194a2:	80 81       	ld	r24, Z
   194a4:	91 81       	ldd	r25, Z+1	; 0x01
   194a6:	2e ed       	ldi	r18, 0xDE	; 222
   194a8:	8d 3a       	cpi	r24, 0xAD	; 173
   194aa:	92 07       	cpc	r25, r18
   194ac:	11 f0       	breq	.+4      	; 0x194b2 <arb_yieldFromWaitIntsOn+0xc4>
   194ae:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   194b2:	e0 91 d2 2b 	lds	r30, 0x2BD2
   194b6:	f0 91 d3 2b 	lds	r31, 0x2BD3
   194ba:	82 e0       	ldi	r24, 0x02	; 2
   194bc:	81 83       	std	Z+1, r24	; 0x01
   194be:	80 91 2c 22 	lds	r24, 0x222C
   194c2:	90 91 2d 22 	lds	r25, 0x222D
   194c6:	e0 91 2c 22 	lds	r30, 0x222C
   194ca:	f0 91 2d 22 	lds	r31, 0x222D
   194ce:	66 81       	ldd	r22, Z+6	; 0x06
   194d0:	77 81       	ldd	r23, Z+7	; 0x07
   194d2:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   194d6:	80 93 d4 2b 	sts	0x2BD4, r24
   194da:	e0 91 d0 2b 	lds	r30, 0x2BD0
   194de:	f0 91 d1 2b 	lds	r31, 0x2BD1
   194e2:	83 81       	ldd	r24, Z+3	; 0x03
   194e4:	94 81       	ldd	r25, Z+4	; 0x04
   194e6:	e0 91 2c 22 	lds	r30, 0x222C
   194ea:	f0 91 2d 22 	lds	r31, 0x222D
   194ee:	66 81       	ldd	r22, Z+6	; 0x06
   194f0:	77 81       	ldd	r23, Z+7	; 0x07
   194f2:	41 e0       	ldi	r20, 0x01	; 1
   194f4:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   194f8:	80 93 d4 2b 	sts	0x2BD4, r24
   194fc:	e0 91 36 2c 	lds	r30, 0x2C36
   19500:	f0 91 37 2c 	lds	r31, 0x2C37
   19504:	19 95       	eicall
   19506:	e0 91 2c 22 	lds	r30, 0x222C
   1950a:	f0 91 2d 22 	lds	r31, 0x222D
   1950e:	06 80       	ldd	r0, Z+6	; 0x06
   19510:	f7 81       	ldd	r31, Z+7	; 0x07
   19512:	e0 2d       	mov	r30, r0
   19514:	01 90       	ld	r0, Z+
   19516:	f0 81       	ld	r31, Z
   19518:	e0 2d       	mov	r30, r0
   1951a:	e0 93 38 2c 	sts	0x2C38, r30
   1951e:	f0 93 39 2c 	sts	0x2C39, r31
   19522:	81 85       	ldd	r24, Z+9	; 0x09
   19524:	8d bf       	out	0x3d, r24	; 61
   19526:	82 85       	ldd	r24, Z+10	; 0x0a
   19528:	8e bf       	out	0x3e, r24	; 62
   1952a:	ff 91       	pop	r31
   1952c:	ef 91       	pop	r30
   1952e:	df 91       	pop	r29
   19530:	cf 91       	pop	r28
   19532:	bf 91       	pop	r27
   19534:	af 91       	pop	r26
   19536:	9f 91       	pop	r25
   19538:	8f 91       	pop	r24
   1953a:	7f 91       	pop	r23
   1953c:	6f 91       	pop	r22
   1953e:	5f 91       	pop	r21
   19540:	4f 91       	pop	r20
   19542:	3f 91       	pop	r19
   19544:	2f 91       	pop	r18
   19546:	1f 91       	pop	r17
   19548:	0f 91       	pop	r16
   1954a:	ff 90       	pop	r15
   1954c:	ef 90       	pop	r14
   1954e:	df 90       	pop	r13
   19550:	cf 90       	pop	r12
   19552:	bf 90       	pop	r11
   19554:	af 90       	pop	r10
   19556:	9f 90       	pop	r9
   19558:	8f 90       	pop	r8
   1955a:	7f 90       	pop	r7
   1955c:	6f 90       	pop	r6
   1955e:	5f 90       	pop	r5
   19560:	4f 90       	pop	r4
   19562:	3f 90       	pop	r3
   19564:	2f 90       	pop	r2
   19566:	1f 90       	pop	r1
   19568:	0f 90       	pop	r0
   1956a:	0f be       	out	0x3f, r0	; 63
   1956c:	0f 90       	pop	r0
   1956e:	08 95       	ret

00019570 <arb_yieldFromWaitIntsOff>:
   19570:	0f 92       	push	r0
   19572:	0f b6       	in	r0, 0x3f	; 63
   19574:	0f 92       	push	r0
   19576:	1f 92       	push	r1
   19578:	11 24       	eor	r1, r1
   1957a:	2f 92       	push	r2
   1957c:	3f 92       	push	r3
   1957e:	4f 92       	push	r4
   19580:	5f 92       	push	r5
   19582:	6f 92       	push	r6
   19584:	7f 92       	push	r7
   19586:	8f 92       	push	r8
   19588:	9f 92       	push	r9
   1958a:	af 92       	push	r10
   1958c:	bf 92       	push	r11
   1958e:	cf 92       	push	r12
   19590:	df 92       	push	r13
   19592:	ef 92       	push	r14
   19594:	ff 92       	push	r15
   19596:	0f 93       	push	r16
   19598:	1f 93       	push	r17
   1959a:	2f 93       	push	r18
   1959c:	3f 93       	push	r19
   1959e:	4f 93       	push	r20
   195a0:	5f 93       	push	r21
   195a2:	6f 93       	push	r22
   195a4:	7f 93       	push	r23
   195a6:	8f 93       	push	r24
   195a8:	9f 93       	push	r25
   195aa:	af 93       	push	r26
   195ac:	bf 93       	push	r27
   195ae:	cf 93       	push	r28
   195b0:	df 93       	push	r29
   195b2:	ef 93       	push	r30
   195b4:	ff 93       	push	r31
   195b6:	e0 91 2c 22 	lds	r30, 0x222C
   195ba:	f0 91 2d 22 	lds	r31, 0x222D
   195be:	06 80       	ldd	r0, Z+6	; 0x06
   195c0:	f7 81       	ldd	r31, Z+7	; 0x07
   195c2:	e0 2d       	mov	r30, r0
   195c4:	01 90       	ld	r0, Z+
   195c6:	f0 81       	ld	r31, Z
   195c8:	e0 2d       	mov	r30, r0
   195ca:	e0 93 38 2c 	sts	0x2C38, r30
   195ce:	f0 93 39 2c 	sts	0x2C39, r31
   195d2:	2d b7       	in	r18, 0x3d	; 61
   195d4:	30 e0       	ldi	r19, 0x00	; 0
   195d6:	21 87       	std	Z+9, r18	; 0x09
   195d8:	32 87       	std	Z+10, r19	; 0x0a
   195da:	4e b7       	in	r20, 0x3e	; 62
   195dc:	94 2f       	mov	r25, r20
   195de:	80 e0       	ldi	r24, 0x00	; 0
   195e0:	82 2b       	or	r24, r18
   195e2:	93 2b       	or	r25, r19
   195e4:	81 87       	std	Z+9, r24	; 0x09
   195e6:	92 87       	std	Z+10, r25	; 0x0a
   195e8:	8f ef       	ldi	r24, 0xFF	; 255
   195ea:	8d bf       	out	0x3d, r24	; 61
   195ec:	8f e3       	ldi	r24, 0x3F	; 63
   195ee:	8e bf       	out	0x3e, r24	; 62
   195f0:	c0 91 3d 00 	lds	r28, 0x003D
   195f4:	d0 91 3e 00 	lds	r29, 0x003E
   195f8:	e0 91 2c 22 	lds	r30, 0x222C
   195fc:	f0 91 2d 22 	lds	r31, 0x222D
   19600:	06 80       	ldd	r0, Z+6	; 0x06
   19602:	f7 81       	ldd	r31, Z+7	; 0x07
   19604:	e0 2d       	mov	r30, r0
   19606:	01 90       	ld	r0, Z+
   19608:	f0 81       	ld	r31, Z
   1960a:	e0 2d       	mov	r30, r0
   1960c:	e0 93 d2 2b 	sts	0x2BD2, r30
   19610:	f0 93 d3 2b 	sts	0x2BD3, r31
   19614:	03 84       	ldd	r0, Z+11	; 0x0b
   19616:	f4 85       	ldd	r31, Z+12	; 0x0c
   19618:	e0 2d       	mov	r30, r0
   1961a:	80 81       	ld	r24, Z
   1961c:	91 81       	ldd	r25, Z+1	; 0x01
   1961e:	2e ed       	ldi	r18, 0xDE	; 222
   19620:	8d 3a       	cpi	r24, 0xAD	; 173
   19622:	92 07       	cpc	r25, r18
   19624:	11 f0       	breq	.+4      	; 0x1962a <arb_yieldFromWaitIntsOff+0xba>
   19626:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1962a:	e0 91 d2 2b 	lds	r30, 0x2BD2
   1962e:	f0 91 d3 2b 	lds	r31, 0x2BD3
   19632:	82 e0       	ldi	r24, 0x02	; 2
   19634:	81 83       	std	Z+1, r24	; 0x01
   19636:	80 91 2c 22 	lds	r24, 0x222C
   1963a:	90 91 2d 22 	lds	r25, 0x222D
   1963e:	e0 91 2c 22 	lds	r30, 0x222C
   19642:	f0 91 2d 22 	lds	r31, 0x222D
   19646:	66 81       	ldd	r22, Z+6	; 0x06
   19648:	77 81       	ldd	r23, Z+7	; 0x07
   1964a:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   1964e:	80 93 d4 2b 	sts	0x2BD4, r24
   19652:	e0 91 d0 2b 	lds	r30, 0x2BD0
   19656:	f0 91 d1 2b 	lds	r31, 0x2BD1
   1965a:	83 81       	ldd	r24, Z+3	; 0x03
   1965c:	94 81       	ldd	r25, Z+4	; 0x04
   1965e:	e0 91 2c 22 	lds	r30, 0x222C
   19662:	f0 91 2d 22 	lds	r31, 0x222D
   19666:	66 81       	ldd	r22, Z+6	; 0x06
   19668:	77 81       	ldd	r23, Z+7	; 0x07
   1966a:	41 e0       	ldi	r20, 0x01	; 1
   1966c:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19670:	80 93 d4 2b 	sts	0x2BD4, r24
   19674:	e0 91 36 2c 	lds	r30, 0x2C36
   19678:	f0 91 37 2c 	lds	r31, 0x2C37
   1967c:	19 95       	eicall
   1967e:	e0 91 2c 22 	lds	r30, 0x222C
   19682:	f0 91 2d 22 	lds	r31, 0x222D
   19686:	06 80       	ldd	r0, Z+6	; 0x06
   19688:	f7 81       	ldd	r31, Z+7	; 0x07
   1968a:	e0 2d       	mov	r30, r0
   1968c:	01 90       	ld	r0, Z+
   1968e:	f0 81       	ld	r31, Z
   19690:	e0 2d       	mov	r30, r0
   19692:	e0 93 38 2c 	sts	0x2C38, r30
   19696:	f0 93 39 2c 	sts	0x2C39, r31
   1969a:	81 85       	ldd	r24, Z+9	; 0x09
   1969c:	8d bf       	out	0x3d, r24	; 61
   1969e:	82 85       	ldd	r24, Z+10	; 0x0a
   196a0:	8e bf       	out	0x3e, r24	; 62
   196a2:	ff 91       	pop	r31
   196a4:	ef 91       	pop	r30
   196a6:	df 91       	pop	r29
   196a8:	cf 91       	pop	r28
   196aa:	bf 91       	pop	r27
   196ac:	af 91       	pop	r26
   196ae:	9f 91       	pop	r25
   196b0:	8f 91       	pop	r24
   196b2:	7f 91       	pop	r23
   196b4:	6f 91       	pop	r22
   196b6:	5f 91       	pop	r21
   196b8:	4f 91       	pop	r20
   196ba:	3f 91       	pop	r19
   196bc:	2f 91       	pop	r18
   196be:	1f 91       	pop	r17
   196c0:	0f 91       	pop	r16
   196c2:	ff 90       	pop	r15
   196c4:	ef 90       	pop	r14
   196c6:	df 90       	pop	r13
   196c8:	cf 90       	pop	r12
   196ca:	bf 90       	pop	r11
   196cc:	af 90       	pop	r10
   196ce:	9f 90       	pop	r9
   196d0:	8f 90       	pop	r8
   196d2:	7f 90       	pop	r7
   196d4:	6f 90       	pop	r6
   196d6:	5f 90       	pop	r5
   196d8:	4f 90       	pop	r4
   196da:	3f 90       	pop	r3
   196dc:	2f 90       	pop	r2
   196de:	1f 90       	pop	r1
   196e0:	0f 90       	pop	r0
   196e2:	0f be       	out	0x3f, r0	; 63
   196e4:	0f 90       	pop	r0
   196e6:	08 95       	ret

000196e8 <arb_wait>:
   196e8:	cf 93       	push	r28
   196ea:	df 93       	push	r29
   196ec:	0f 92       	push	r0
   196ee:	0f 92       	push	r0
   196f0:	cd b7       	in	r28, 0x3d	; 61
   196f2:	de b7       	in	r29, 0x3e	; 62
   196f4:	89 83       	std	Y+1, r24	; 0x01
   196f6:	9a 83       	std	Y+2, r25	; 0x02
   196f8:	0f b6       	in	r0, 0x3f	; 63
   196fa:	07 fe       	sbrs	r0, 7
   196fc:	31 c0       	rjmp	.+98     	; 0x19760 <arb_wait+0x78>
   196fe:	f8 94       	cli
   19700:	e9 81       	ldd	r30, Y+1	; 0x01
   19702:	fa 81       	ldd	r31, Y+2	; 0x02
   19704:	80 91 1d 22 	lds	r24, 0x221D
   19708:	90 91 1e 22 	lds	r25, 0x221E
   1970c:	24 81       	ldd	r18, Z+4	; 0x04
   1970e:	35 81       	ldd	r19, Z+5	; 0x05
   19710:	28 17       	cp	r18, r24
   19712:	39 07       	cpc	r19, r25
   19714:	11 f0       	breq	.+4      	; 0x1971a <arb_wait+0x32>
   19716:	78 94       	sei
   19718:	4f c0       	rjmp	.+158    	; 0x197b8 <arb_wait+0xd0>
   1971a:	e9 81       	ldd	r30, Y+1	; 0x01
   1971c:	fa 81       	ldd	r31, Y+2	; 0x02
   1971e:	01 90       	ld	r0, Z+
   19720:	f0 81       	ld	r31, Z
   19722:	e0 2d       	mov	r30, r0
   19724:	e0 93 d0 2b 	sts	0x2BD0, r30
   19728:	f0 93 d1 2b 	sts	0x2BD1, r31
   1972c:	81 81       	ldd	r24, Z+1	; 0x01
   1972e:	92 81       	ldd	r25, Z+2	; 0x02
   19730:	66 23       	and	r22, r22
   19732:	61 f4       	brne	.+24     	; 0x1974c <arb_wait+0x64>
   19734:	01 97       	sbiw	r24, 0x01	; 1
   19736:	81 83       	std	Z+1, r24	; 0x01
   19738:	92 83       	std	Z+2, r25	; 0x02
   1973a:	97 ff       	sbrs	r25, 7
   1973c:	0d c0       	rjmp	.+26     	; 0x19758 <arb_wait+0x70>
   1973e:	80 91 2c 22 	lds	r24, 0x222C
   19742:	90 91 2d 22 	lds	r25, 0x222D
   19746:	0e 94 f7 c9 	call	0x193ee	; 0x193ee <arb_yieldFromWaitIntsOn>
   1974a:	2d c0       	rjmp	.+90     	; 0x197a6 <arb_wait+0xbe>
   1974c:	18 16       	cp	r1, r24
   1974e:	19 06       	cpc	r1, r25
   19750:	2c f4       	brge	.+10     	; 0x1975c <arb_wait+0x74>
   19752:	01 97       	sbiw	r24, 0x01	; 1
   19754:	81 83       	std	Z+1, r24	; 0x01
   19756:	92 83       	std	Z+2, r25	; 0x02
   19758:	78 94       	sei
   1975a:	25 c0       	rjmp	.+74     	; 0x197a6 <arb_wait+0xbe>
   1975c:	78 94       	sei
   1975e:	2e c0       	rjmp	.+92     	; 0x197bc <arb_wait+0xd4>
   19760:	e9 81       	ldd	r30, Y+1	; 0x01
   19762:	fa 81       	ldd	r31, Y+2	; 0x02
   19764:	80 91 1d 22 	lds	r24, 0x221D
   19768:	90 91 1e 22 	lds	r25, 0x221E
   1976c:	24 81       	ldd	r18, Z+4	; 0x04
   1976e:	35 81       	ldd	r19, Z+5	; 0x05
   19770:	28 17       	cp	r18, r24
   19772:	39 07       	cpc	r19, r25
   19774:	09 f5       	brne	.+66     	; 0x197b8 <arb_wait+0xd0>
   19776:	e9 81       	ldd	r30, Y+1	; 0x01
   19778:	fa 81       	ldd	r31, Y+2	; 0x02
   1977a:	01 90       	ld	r0, Z+
   1977c:	f0 81       	ld	r31, Z
   1977e:	e0 2d       	mov	r30, r0
   19780:	e0 93 d0 2b 	sts	0x2BD0, r30
   19784:	f0 93 d1 2b 	sts	0x2BD1, r31
   19788:	81 81       	ldd	r24, Z+1	; 0x01
   1978a:	92 81       	ldd	r25, Z+2	; 0x02
   1978c:	66 23       	and	r22, r22
   1978e:	69 f4       	brne	.+26     	; 0x197aa <arb_wait+0xc2>
   19790:	01 97       	sbiw	r24, 0x01	; 1
   19792:	81 83       	std	Z+1, r24	; 0x01
   19794:	92 83       	std	Z+2, r25	; 0x02
   19796:	97 ff       	sbrs	r25, 7
   19798:	06 c0       	rjmp	.+12     	; 0x197a6 <arb_wait+0xbe>
   1979a:	80 91 2c 22 	lds	r24, 0x222C
   1979e:	90 91 2d 22 	lds	r25, 0x222D
   197a2:	0e 94 b8 ca 	call	0x19570	; 0x19570 <arb_yieldFromWaitIntsOff>
   197a6:	80 e0       	ldi	r24, 0x00	; 0
   197a8:	0a c0       	rjmp	.+20     	; 0x197be <arb_wait+0xd6>
   197aa:	18 16       	cp	r1, r24
   197ac:	19 06       	cpc	r1, r25
   197ae:	34 f4       	brge	.+12     	; 0x197bc <arb_wait+0xd4>
   197b0:	01 97       	sbiw	r24, 0x01	; 1
   197b2:	81 83       	std	Z+1, r24	; 0x01
   197b4:	92 83       	std	Z+2, r25	; 0x02
   197b6:	f7 cf       	rjmp	.-18     	; 0x197a6 <arb_wait+0xbe>
   197b8:	89 ef       	ldi	r24, 0xF9	; 249
   197ba:	01 c0       	rjmp	.+2      	; 0x197be <arb_wait+0xd6>
   197bc:	83 ef       	ldi	r24, 0xF3	; 243
   197be:	0f 90       	pop	r0
   197c0:	0f 90       	pop	r0
   197c2:	df 91       	pop	r29
   197c4:	cf 91       	pop	r28
   197c6:	08 95       	ret

000197c8 <arb_signal>:
   197c8:	0f 93       	push	r16
   197ca:	1f 93       	push	r17
   197cc:	cf 93       	push	r28
   197ce:	df 93       	push	r29
   197d0:	cd b7       	in	r28, 0x3d	; 61
   197d2:	de b7       	in	r29, 0x3e	; 62
   197d4:	28 97       	sbiw	r28, 0x08	; 8
   197d6:	cd bf       	out	0x3d, r28	; 61
   197d8:	de bf       	out	0x3e, r29	; 62
   197da:	8f 83       	std	Y+7, r24	; 0x07
   197dc:	98 87       	std	Y+8, r25	; 0x08
   197de:	0f b6       	in	r0, 0x3f	; 63
   197e0:	07 fe       	sbrs	r0, 7
   197e2:	d9 c0       	rjmp	.+434    	; 0x19996 <arb_signal+0x1ce>
   197e4:	f8 94       	cli
   197e6:	ef 81       	ldd	r30, Y+7	; 0x07
   197e8:	f8 85       	ldd	r31, Y+8	; 0x08
   197ea:	80 91 1d 22 	lds	r24, 0x221D
   197ee:	90 91 1e 22 	lds	r25, 0x221E
   197f2:	24 81       	ldd	r18, Z+4	; 0x04
   197f4:	35 81       	ldd	r19, Z+5	; 0x05
   197f6:	28 17       	cp	r18, r24
   197f8:	39 07       	cpc	r19, r25
   197fa:	11 f0       	breq	.+4      	; 0x19800 <arb_signal+0x38>
   197fc:	78 94       	sei
   197fe:	99 c1       	rjmp	.+818    	; 0x19b32 <arb_signal+0x36a>
   19800:	ef 81       	ldd	r30, Y+7	; 0x07
   19802:	f8 85       	ldd	r31, Y+8	; 0x08
   19804:	01 90       	ld	r0, Z+
   19806:	f0 81       	ld	r31, Z
   19808:	e0 2d       	mov	r30, r0
   1980a:	e0 93 d0 2b 	sts	0x2BD0, r30
   1980e:	f0 93 d1 2b 	sts	0x2BD1, r31
   19812:	81 81       	ldd	r24, Z+1	; 0x01
   19814:	92 81       	ldd	r25, Z+2	; 0x02
   19816:	01 96       	adiw	r24, 0x01	; 1
   19818:	81 83       	std	Z+1, r24	; 0x01
   1981a:	92 83       	std	Z+2, r25	; 0x02
   1981c:	18 16       	cp	r1, r24
   1981e:	19 06       	cpc	r1, r25
   19820:	0c f4       	brge	.+2      	; 0x19824 <arb_signal+0x5c>
   19822:	b7 c0       	rjmp	.+366    	; 0x19992 <arb_signal+0x1ca>
   19824:	a3 81       	ldd	r26, Z+3	; 0x03
   19826:	b4 81       	ldd	r27, Z+4	; 0x04
   19828:	12 96       	adiw	r26, 0x02	; 2
   1982a:	8d 91       	ld	r24, X+
   1982c:	9c 91       	ld	r25, X
   1982e:	13 97       	sbiw	r26, 0x03	; 3
   19830:	00 97       	sbiw	r24, 0x00	; 0
   19832:	09 f4       	brne	.+2      	; 0x19836 <arb_signal+0x6e>
   19834:	ae c0       	rjmp	.+348    	; 0x19992 <arb_signal+0x1ca>
   19836:	a3 81       	ldd	r26, Z+3	; 0x03
   19838:	b4 81       	ldd	r27, Z+4	; 0x04
   1983a:	18 96       	adiw	r26, 0x08	; 8
   1983c:	8d 91       	ld	r24, X+
   1983e:	9c 91       	ld	r25, X
   19840:	19 97       	sbiw	r26, 0x09	; 9
   19842:	8b 83       	std	Y+3, r24	; 0x03
   19844:	9c 83       	std	Y+4, r25	; 0x04
   19846:	ab 81       	ldd	r26, Y+3	; 0x03
   19848:	bc 81       	ldd	r27, Y+4	; 0x04
   1984a:	0d 90       	ld	r0, X+
   1984c:	bc 91       	ld	r27, X
   1984e:	a0 2d       	mov	r26, r0
   19850:	12 96       	adiw	r26, 0x02	; 2
   19852:	2c 91       	ld	r18, X
   19854:	30 e0       	ldi	r19, 0x00	; 0
   19856:	a3 81       	ldd	r26, Z+3	; 0x03
   19858:	b4 81       	ldd	r27, Z+4	; 0x04
   1985a:	12 96       	adiw	r26, 0x02	; 2
   1985c:	4d 91       	ld	r20, X+
   1985e:	5c 91       	ld	r21, X
   19860:	13 97       	sbiw	r26, 0x03	; 3
   19862:	a3 81       	ldd	r26, Z+3	; 0x03
   19864:	b4 81       	ldd	r27, Z+4	; 0x04
   19866:	15 c0       	rjmp	.+42     	; 0x19892 <arb_signal+0xca>
   19868:	ad 81       	ldd	r26, Y+5	; 0x05
   1986a:	be 81       	ldd	r27, Y+6	; 0x06
   1986c:	0d 90       	ld	r0, X+
   1986e:	bc 91       	ld	r27, X
   19870:	a0 2d       	mov	r26, r0
   19872:	12 96       	adiw	r26, 0x02	; 2
   19874:	8c 91       	ld	r24, X
   19876:	12 97       	sbiw	r26, 0x02	; 2
   19878:	90 e0       	ldi	r25, 0x00	; 0
   1987a:	82 17       	cp	r24, r18
   1987c:	93 07       	cpc	r25, r19
   1987e:	28 f4       	brcc	.+10     	; 0x1988a <arb_signal+0xc2>
   19880:	2d 81       	ldd	r18, Y+5	; 0x05
   19882:	3e 81       	ldd	r19, Y+6	; 0x06
   19884:	2b 83       	std	Y+3, r18	; 0x03
   19886:	3c 83       	std	Y+4, r19	; 0x04
   19888:	9c 01       	movw	r18, r24
   1988a:	41 50       	subi	r20, 0x01	; 1
   1988c:	50 40       	sbci	r21, 0x00	; 0
   1988e:	ad 81       	ldd	r26, Y+5	; 0x05
   19890:	be 81       	ldd	r27, Y+6	; 0x06
   19892:	18 96       	adiw	r26, 0x08	; 8
   19894:	8d 91       	ld	r24, X+
   19896:	9c 91       	ld	r25, X
   19898:	19 97       	sbiw	r26, 0x09	; 9
   1989a:	8d 83       	std	Y+5, r24	; 0x05
   1989c:	9e 83       	std	Y+6, r25	; 0x06
   1989e:	41 15       	cp	r20, r1
   198a0:	51 05       	cpc	r21, r1
   198a2:	11 f7       	brne	.-60     	; 0x19868 <arb_signal+0xa0>
   198a4:	80 81       	ld	r24, Z
   198a6:	81 30       	cpi	r24, 0x01	; 1
   198a8:	b9 f0       	breq	.+46     	; 0x198d8 <arb_signal+0x110>
   198aa:	ab 81       	ldd	r26, Y+3	; 0x03
   198ac:	bc 81       	ldd	r27, Y+4	; 0x04
   198ae:	0d 90       	ld	r0, X+
   198b0:	bc 91       	ld	r27, X
   198b2:	a0 2d       	mov	r26, r0
   198b4:	11 96       	adiw	r26, 0x01	; 1
   198b6:	1c 92       	st	X, r1
   198b8:	83 81       	ldd	r24, Z+3	; 0x03
   198ba:	94 81       	ldd	r25, Z+4	; 0x04
   198bc:	6b 81       	ldd	r22, Y+3	; 0x03
   198be:	7c 81       	ldd	r23, Y+4	; 0x04
   198c0:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   198c4:	80 91 2c 22 	lds	r24, 0x222C
   198c8:	90 91 2d 22 	lds	r25, 0x222D
   198cc:	6b 81       	ldd	r22, Y+3	; 0x03
   198ce:	7c 81       	ldd	r23, Y+4	; 0x04
   198d0:	41 e0       	ldi	r20, 0x01	; 1
   198d2:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   198d6:	3d c0       	rjmp	.+122    	; 0x19952 <arb_signal+0x18a>
   198d8:	a3 81       	ldd	r26, Z+3	; 0x03
   198da:	b4 81       	ldd	r27, Z+4	; 0x04
   198dc:	12 96       	adiw	r26, 0x02	; 2
   198de:	0d 91       	ld	r16, X+
   198e0:	1c 91       	ld	r17, X
   198e2:	13 97       	sbiw	r26, 0x03	; 3
   198e4:	03 80       	ldd	r0, Z+3	; 0x03
   198e6:	f4 81       	ldd	r31, Z+4	; 0x04
   198e8:	e0 2d       	mov	r30, r0
   198ea:	26 c0       	rjmp	.+76     	; 0x19938 <arb_signal+0x170>
   198ec:	ad 81       	ldd	r26, Y+5	; 0x05
   198ee:	be 81       	ldd	r27, Y+6	; 0x06
   198f0:	0d 90       	ld	r0, X+
   198f2:	bc 91       	ld	r27, X
   198f4:	a0 2d       	mov	r26, r0
   198f6:	11 96       	adiw	r26, 0x01	; 1
   198f8:	1c 92       	st	X, r1
   198fa:	ad 81       	ldd	r26, Y+5	; 0x05
   198fc:	be 81       	ldd	r27, Y+6	; 0x06
   198fe:	1a 96       	adiw	r26, 0x0a	; 10
   19900:	8d 91       	ld	r24, X+
   19902:	9c 91       	ld	r25, X
   19904:	1b 97       	sbiw	r26, 0x0b	; 11
   19906:	89 83       	std	Y+1, r24	; 0x01
   19908:	9a 83       	std	Y+2, r25	; 0x02
   1990a:	83 81       	ldd	r24, Z+3	; 0x03
   1990c:	94 81       	ldd	r25, Z+4	; 0x04
   1990e:	6d 81       	ldd	r22, Y+5	; 0x05
   19910:	7e 81       	ldd	r23, Y+6	; 0x06
   19912:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   19916:	80 91 2c 22 	lds	r24, 0x222C
   1991a:	90 91 2d 22 	lds	r25, 0x222D
   1991e:	6d 81       	ldd	r22, Y+5	; 0x05
   19920:	7e 81       	ldd	r23, Y+6	; 0x06
   19922:	41 e0       	ldi	r20, 0x01	; 1
   19924:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19928:	89 81       	ldd	r24, Y+1	; 0x01
   1992a:	9a 81       	ldd	r25, Y+2	; 0x02
   1992c:	8d 83       	std	Y+5, r24	; 0x05
   1992e:	9e 83       	std	Y+6, r25	; 0x06
   19930:	01 50       	subi	r16, 0x01	; 1
   19932:	10 40       	sbci	r17, 0x00	; 0
   19934:	ed 81       	ldd	r30, Y+5	; 0x05
   19936:	fe 81       	ldd	r31, Y+6	; 0x06
   19938:	80 85       	ldd	r24, Z+8	; 0x08
   1993a:	91 85       	ldd	r25, Z+9	; 0x09
   1993c:	8d 83       	std	Y+5, r24	; 0x05
   1993e:	9e 83       	std	Y+6, r25	; 0x06
   19940:	e0 91 d0 2b 	lds	r30, 0x2BD0
   19944:	f0 91 d1 2b 	lds	r31, 0x2BD1
   19948:	01 15       	cp	r16, r1
   1994a:	11 05       	cpc	r17, r1
   1994c:	79 f6       	brne	.-98     	; 0x198ec <arb_signal+0x124>
   1994e:	11 82       	std	Z+1, r1	; 0x01
   19950:	12 82       	std	Z+2, r1	; 0x02
   19952:	ab 81       	ldd	r26, Y+3	; 0x03
   19954:	bc 81       	ldd	r27, Y+4	; 0x04
   19956:	e0 91 2c 22 	lds	r30, 0x222C
   1995a:	f0 91 2d 22 	lds	r31, 0x222D
   1995e:	06 80       	ldd	r0, Z+6	; 0x06
   19960:	f7 81       	ldd	r31, Z+7	; 0x07
   19962:	e0 2d       	mov	r30, r0
   19964:	01 90       	ld	r0, Z+
   19966:	f0 81       	ld	r31, Z
   19968:	e0 2d       	mov	r30, r0
   1996a:	0d 90       	ld	r0, X+
   1996c:	bc 91       	ld	r27, X
   1996e:	a0 2d       	mov	r26, r0
   19970:	12 96       	adiw	r26, 0x02	; 2
   19972:	9c 91       	ld	r25, X
   19974:	12 97       	sbiw	r26, 0x02	; 2
   19976:	82 81       	ldd	r24, Z+2	; 0x02
   19978:	89 17       	cp	r24, r25
   1997a:	58 f0       	brcs	.+22     	; 0x19992 <arb_signal+0x1ca>
   1997c:	11 82       	std	Z+1, r1	; 0x01
   1997e:	80 91 a0 00 	lds	r24, 0x00A0
   19982:	88 23       	and	r24, r24
   19984:	19 f0       	breq	.+6      	; 0x1998c <arb_signal+0x1c4>
   19986:	0e 94 28 c8 	call	0x19050	; 0x19050 <arb_yieldFromSignalActiveInt>
   1998a:	d5 c0       	rjmp	.+426    	; 0x19b36 <arb_signal+0x36e>
   1998c:	0e 94 c4 c8 	call	0x19188	; 0x19188 <arb_yieldFromSignalIntsOn>
   19990:	d2 c0       	rjmp	.+420    	; 0x19b36 <arb_signal+0x36e>
   19992:	78 94       	sei
   19994:	d0 c0       	rjmp	.+416    	; 0x19b36 <arb_signal+0x36e>
   19996:	ef 81       	ldd	r30, Y+7	; 0x07
   19998:	f8 85       	ldd	r31, Y+8	; 0x08
   1999a:	80 91 1d 22 	lds	r24, 0x221D
   1999e:	90 91 1e 22 	lds	r25, 0x221E
   199a2:	24 81       	ldd	r18, Z+4	; 0x04
   199a4:	35 81       	ldd	r19, Z+5	; 0x05
   199a6:	28 17       	cp	r18, r24
   199a8:	39 07       	cpc	r19, r25
   199aa:	09 f0       	breq	.+2      	; 0x199ae <arb_signal+0x1e6>
   199ac:	c2 c0       	rjmp	.+388    	; 0x19b32 <arb_signal+0x36a>
   199ae:	ef 81       	ldd	r30, Y+7	; 0x07
   199b0:	f8 85       	ldd	r31, Y+8	; 0x08
   199b2:	01 90       	ld	r0, Z+
   199b4:	f0 81       	ld	r31, Z
   199b6:	e0 2d       	mov	r30, r0
   199b8:	e0 93 d0 2b 	sts	0x2BD0, r30
   199bc:	f0 93 d1 2b 	sts	0x2BD1, r31
   199c0:	81 81       	ldd	r24, Z+1	; 0x01
   199c2:	92 81       	ldd	r25, Z+2	; 0x02
   199c4:	01 96       	adiw	r24, 0x01	; 1
   199c6:	81 83       	std	Z+1, r24	; 0x01
   199c8:	92 83       	std	Z+2, r25	; 0x02
   199ca:	18 16       	cp	r1, r24
   199cc:	19 06       	cpc	r1, r25
   199ce:	0c f4       	brge	.+2      	; 0x199d2 <arb_signal+0x20a>
   199d0:	b2 c0       	rjmp	.+356    	; 0x19b36 <arb_signal+0x36e>
   199d2:	a3 81       	ldd	r26, Z+3	; 0x03
   199d4:	b4 81       	ldd	r27, Z+4	; 0x04
   199d6:	12 96       	adiw	r26, 0x02	; 2
   199d8:	8d 91       	ld	r24, X+
   199da:	9c 91       	ld	r25, X
   199dc:	13 97       	sbiw	r26, 0x03	; 3
   199de:	00 97       	sbiw	r24, 0x00	; 0
   199e0:	09 f4       	brne	.+2      	; 0x199e4 <arb_signal+0x21c>
   199e2:	a9 c0       	rjmp	.+338    	; 0x19b36 <arb_signal+0x36e>
   199e4:	a3 81       	ldd	r26, Z+3	; 0x03
   199e6:	b4 81       	ldd	r27, Z+4	; 0x04
   199e8:	18 96       	adiw	r26, 0x08	; 8
   199ea:	8d 91       	ld	r24, X+
   199ec:	9c 91       	ld	r25, X
   199ee:	19 97       	sbiw	r26, 0x09	; 9
   199f0:	8b 83       	std	Y+3, r24	; 0x03
   199f2:	9c 83       	std	Y+4, r25	; 0x04
   199f4:	ab 81       	ldd	r26, Y+3	; 0x03
   199f6:	bc 81       	ldd	r27, Y+4	; 0x04
   199f8:	0d 90       	ld	r0, X+
   199fa:	bc 91       	ld	r27, X
   199fc:	a0 2d       	mov	r26, r0
   199fe:	12 96       	adiw	r26, 0x02	; 2
   19a00:	2c 91       	ld	r18, X
   19a02:	30 e0       	ldi	r19, 0x00	; 0
   19a04:	a3 81       	ldd	r26, Z+3	; 0x03
   19a06:	b4 81       	ldd	r27, Z+4	; 0x04
   19a08:	12 96       	adiw	r26, 0x02	; 2
   19a0a:	4d 91       	ld	r20, X+
   19a0c:	5c 91       	ld	r21, X
   19a0e:	13 97       	sbiw	r26, 0x03	; 3
   19a10:	a3 81       	ldd	r26, Z+3	; 0x03
   19a12:	b4 81       	ldd	r27, Z+4	; 0x04
   19a14:	15 c0       	rjmp	.+42     	; 0x19a40 <arb_signal+0x278>
   19a16:	ad 81       	ldd	r26, Y+5	; 0x05
   19a18:	be 81       	ldd	r27, Y+6	; 0x06
   19a1a:	0d 90       	ld	r0, X+
   19a1c:	bc 91       	ld	r27, X
   19a1e:	a0 2d       	mov	r26, r0
   19a20:	12 96       	adiw	r26, 0x02	; 2
   19a22:	8c 91       	ld	r24, X
   19a24:	12 97       	sbiw	r26, 0x02	; 2
   19a26:	90 e0       	ldi	r25, 0x00	; 0
   19a28:	82 17       	cp	r24, r18
   19a2a:	93 07       	cpc	r25, r19
   19a2c:	28 f4       	brcc	.+10     	; 0x19a38 <arb_signal+0x270>
   19a2e:	2d 81       	ldd	r18, Y+5	; 0x05
   19a30:	3e 81       	ldd	r19, Y+6	; 0x06
   19a32:	2b 83       	std	Y+3, r18	; 0x03
   19a34:	3c 83       	std	Y+4, r19	; 0x04
   19a36:	9c 01       	movw	r18, r24
   19a38:	41 50       	subi	r20, 0x01	; 1
   19a3a:	50 40       	sbci	r21, 0x00	; 0
   19a3c:	ad 81       	ldd	r26, Y+5	; 0x05
   19a3e:	be 81       	ldd	r27, Y+6	; 0x06
   19a40:	18 96       	adiw	r26, 0x08	; 8
   19a42:	8d 91       	ld	r24, X+
   19a44:	9c 91       	ld	r25, X
   19a46:	19 97       	sbiw	r26, 0x09	; 9
   19a48:	8d 83       	std	Y+5, r24	; 0x05
   19a4a:	9e 83       	std	Y+6, r25	; 0x06
   19a4c:	41 15       	cp	r20, r1
   19a4e:	51 05       	cpc	r21, r1
   19a50:	11 f7       	brne	.-60     	; 0x19a16 <arb_signal+0x24e>
   19a52:	80 81       	ld	r24, Z
   19a54:	81 30       	cpi	r24, 0x01	; 1
   19a56:	b9 f0       	breq	.+46     	; 0x19a86 <arb_signal+0x2be>
   19a58:	ab 81       	ldd	r26, Y+3	; 0x03
   19a5a:	bc 81       	ldd	r27, Y+4	; 0x04
   19a5c:	0d 90       	ld	r0, X+
   19a5e:	bc 91       	ld	r27, X
   19a60:	a0 2d       	mov	r26, r0
   19a62:	11 96       	adiw	r26, 0x01	; 1
   19a64:	1c 92       	st	X, r1
   19a66:	83 81       	ldd	r24, Z+3	; 0x03
   19a68:	94 81       	ldd	r25, Z+4	; 0x04
   19a6a:	6b 81       	ldd	r22, Y+3	; 0x03
   19a6c:	7c 81       	ldd	r23, Y+4	; 0x04
   19a6e:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   19a72:	80 91 2c 22 	lds	r24, 0x222C
   19a76:	90 91 2d 22 	lds	r25, 0x222D
   19a7a:	6b 81       	ldd	r22, Y+3	; 0x03
   19a7c:	7c 81       	ldd	r23, Y+4	; 0x04
   19a7e:	41 e0       	ldi	r20, 0x01	; 1
   19a80:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19a84:	3d c0       	rjmp	.+122    	; 0x19b00 <arb_signal+0x338>
   19a86:	a3 81       	ldd	r26, Z+3	; 0x03
   19a88:	b4 81       	ldd	r27, Z+4	; 0x04
   19a8a:	12 96       	adiw	r26, 0x02	; 2
   19a8c:	0d 91       	ld	r16, X+
   19a8e:	1c 91       	ld	r17, X
   19a90:	13 97       	sbiw	r26, 0x03	; 3
   19a92:	03 80       	ldd	r0, Z+3	; 0x03
   19a94:	f4 81       	ldd	r31, Z+4	; 0x04
   19a96:	e0 2d       	mov	r30, r0
   19a98:	26 c0       	rjmp	.+76     	; 0x19ae6 <arb_signal+0x31e>
   19a9a:	ad 81       	ldd	r26, Y+5	; 0x05
   19a9c:	be 81       	ldd	r27, Y+6	; 0x06
   19a9e:	0d 90       	ld	r0, X+
   19aa0:	bc 91       	ld	r27, X
   19aa2:	a0 2d       	mov	r26, r0
   19aa4:	11 96       	adiw	r26, 0x01	; 1
   19aa6:	1c 92       	st	X, r1
   19aa8:	ad 81       	ldd	r26, Y+5	; 0x05
   19aaa:	be 81       	ldd	r27, Y+6	; 0x06
   19aac:	1a 96       	adiw	r26, 0x0a	; 10
   19aae:	8d 91       	ld	r24, X+
   19ab0:	9c 91       	ld	r25, X
   19ab2:	1b 97       	sbiw	r26, 0x0b	; 11
   19ab4:	89 83       	std	Y+1, r24	; 0x01
   19ab6:	9a 83       	std	Y+2, r25	; 0x02
   19ab8:	83 81       	ldd	r24, Z+3	; 0x03
   19aba:	94 81       	ldd	r25, Z+4	; 0x04
   19abc:	6d 81       	ldd	r22, Y+5	; 0x05
   19abe:	7e 81       	ldd	r23, Y+6	; 0x06
   19ac0:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   19ac4:	80 91 2c 22 	lds	r24, 0x222C
   19ac8:	90 91 2d 22 	lds	r25, 0x222D
   19acc:	6d 81       	ldd	r22, Y+5	; 0x05
   19ace:	7e 81       	ldd	r23, Y+6	; 0x06
   19ad0:	41 e0       	ldi	r20, 0x01	; 1
   19ad2:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19ad6:	89 81       	ldd	r24, Y+1	; 0x01
   19ad8:	9a 81       	ldd	r25, Y+2	; 0x02
   19ada:	8d 83       	std	Y+5, r24	; 0x05
   19adc:	9e 83       	std	Y+6, r25	; 0x06
   19ade:	01 50       	subi	r16, 0x01	; 1
   19ae0:	10 40       	sbci	r17, 0x00	; 0
   19ae2:	ed 81       	ldd	r30, Y+5	; 0x05
   19ae4:	fe 81       	ldd	r31, Y+6	; 0x06
   19ae6:	80 85       	ldd	r24, Z+8	; 0x08
   19ae8:	91 85       	ldd	r25, Z+9	; 0x09
   19aea:	8d 83       	std	Y+5, r24	; 0x05
   19aec:	9e 83       	std	Y+6, r25	; 0x06
   19aee:	e0 91 d0 2b 	lds	r30, 0x2BD0
   19af2:	f0 91 d1 2b 	lds	r31, 0x2BD1
   19af6:	01 15       	cp	r16, r1
   19af8:	11 05       	cpc	r17, r1
   19afa:	79 f6       	brne	.-98     	; 0x19a9a <arb_signal+0x2d2>
   19afc:	11 82       	std	Z+1, r1	; 0x01
   19afe:	12 82       	std	Z+2, r1	; 0x02
   19b00:	ab 81       	ldd	r26, Y+3	; 0x03
   19b02:	bc 81       	ldd	r27, Y+4	; 0x04
   19b04:	e0 91 2c 22 	lds	r30, 0x222C
   19b08:	f0 91 2d 22 	lds	r31, 0x222D
   19b0c:	06 80       	ldd	r0, Z+6	; 0x06
   19b0e:	f7 81       	ldd	r31, Z+7	; 0x07
   19b10:	e0 2d       	mov	r30, r0
   19b12:	01 90       	ld	r0, Z+
   19b14:	f0 81       	ld	r31, Z
   19b16:	e0 2d       	mov	r30, r0
   19b18:	0d 90       	ld	r0, X+
   19b1a:	bc 91       	ld	r27, X
   19b1c:	a0 2d       	mov	r26, r0
   19b1e:	12 96       	adiw	r26, 0x02	; 2
   19b20:	9c 91       	ld	r25, X
   19b22:	12 97       	sbiw	r26, 0x02	; 2
   19b24:	82 81       	ldd	r24, Z+2	; 0x02
   19b26:	89 17       	cp	r24, r25
   19b28:	30 f0       	brcs	.+12     	; 0x19b36 <arb_signal+0x36e>
   19b2a:	11 82       	std	Z+1, r1	; 0x01
   19b2c:	0e 94 60 c9 	call	0x192c0	; 0x192c0 <arb_yieldFromSignalIntsOff>
   19b30:	02 c0       	rjmp	.+4      	; 0x19b36 <arb_signal+0x36e>
   19b32:	89 ef       	ldi	r24, 0xF9	; 249
   19b34:	01 c0       	rjmp	.+2      	; 0x19b38 <arb_signal+0x370>
   19b36:	80 e0       	ldi	r24, 0x00	; 0
   19b38:	28 96       	adiw	r28, 0x08	; 8
   19b3a:	cd bf       	out	0x3d, r28	; 61
   19b3c:	de bf       	out	0x3e, r29	; 62
   19b3e:	df 91       	pop	r29
   19b40:	cf 91       	pop	r28
   19b42:	1f 91       	pop	r17
   19b44:	0f 91       	pop	r16
   19b46:	08 95       	ret

00019b48 <arb_semaphoreCreate>:
   19b48:	ff 92       	push	r15
   19b4a:	0f 93       	push	r16
   19b4c:	1f 93       	push	r17
   19b4e:	cf 93       	push	r28
   19b50:	df 93       	push	r29
   19b52:	00 d0       	rcall	.+0      	; 0x19b54 <arb_semaphoreCreate+0xc>
   19b54:	cd b7       	in	r28, 0x3d	; 61
   19b56:	de b7       	in	r29, 0x3e	; 62
   19b58:	f8 2e       	mov	r15, r24
   19b5a:	8f b7       	in	r24, 0x3f	; 63
   19b5c:	89 83       	std	Y+1, r24	; 0x01
   19b5e:	f8 94       	cli
   19b60:	85 e0       	ldi	r24, 0x05	; 5
   19b62:	90 e0       	ldi	r25, 0x00	; 0
   19b64:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   19b68:	8a 83       	std	Y+2, r24	; 0x02
   19b6a:	9b 83       	std	Y+3, r25	; 0x03
   19b6c:	8a 81       	ldd	r24, Y+2	; 0x02
   19b6e:	9b 81       	ldd	r25, Y+3	; 0x03
   19b70:	97 fd       	sbrc	r25, 7
   19b72:	1e c0       	rjmp	.+60     	; 0x19bb0 <arb_semaphoreCreate+0x68>
   19b74:	80 91 1d 22 	lds	r24, 0x221D
   19b78:	90 91 1e 22 	lds	r25, 0x221E
   19b7c:	6a 81       	ldd	r22, Y+2	; 0x02
   19b7e:	7b 81       	ldd	r23, Y+3	; 0x03
   19b80:	41 e0       	ldi	r20, 0x01	; 1
   19b82:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19b86:	ea 81       	ldd	r30, Y+2	; 0x02
   19b88:	fb 81       	ldd	r31, Y+3	; 0x03
   19b8a:	00 81       	ld	r16, Z
   19b8c:	11 81       	ldd	r17, Z+1	; 0x01
   19b8e:	0e 94 f7 d8 	call	0x1b1ee	; 0x1b1ee <utl_createContainer>
   19b92:	f8 01       	movw	r30, r16
   19b94:	83 83       	std	Z+3, r24	; 0x03
   19b96:	94 83       	std	Z+4, r25	; 0x04
   19b98:	83 81       	ldd	r24, Z+3	; 0x03
   19b9a:	94 81       	ldd	r25, Z+4	; 0x04
   19b9c:	97 ff       	sbrs	r25, 7
   19b9e:	0d c0       	rjmp	.+26     	; 0x19bba <arb_semaphoreCreate+0x72>
   19ba0:	80 91 1d 22 	lds	r24, 0x221D
   19ba4:	90 91 1e 22 	lds	r25, 0x221E
   19ba8:	6a 81       	ldd	r22, Y+2	; 0x02
   19baa:	7b 81       	ldd	r23, Y+3	; 0x03
   19bac:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   19bb0:	89 81       	ldd	r24, Y+1	; 0x01
   19bb2:	8f bf       	out	0x3f, r24	; 63
   19bb4:	8f ef       	ldi	r24, 0xFF	; 255
   19bb6:	9f ef       	ldi	r25, 0xFF	; 255
   19bb8:	12 c0       	rjmp	.+36     	; 0x19bde <arb_semaphoreCreate+0x96>
   19bba:	f8 01       	movw	r30, r16
   19bbc:	f0 82       	st	Z, r15
   19bbe:	f2 e0       	ldi	r31, 0x02	; 2
   19bc0:	ff 16       	cp	r15, r31
   19bc2:	31 f4       	brne	.+12     	; 0x19bd0 <arb_semaphoreCreate+0x88>
   19bc4:	81 e0       	ldi	r24, 0x01	; 1
   19bc6:	90 e0       	ldi	r25, 0x00	; 0
   19bc8:	f8 01       	movw	r30, r16
   19bca:	81 83       	std	Z+1, r24	; 0x01
   19bcc:	92 83       	std	Z+2, r25	; 0x02
   19bce:	03 c0       	rjmp	.+6      	; 0x19bd6 <arb_semaphoreCreate+0x8e>
   19bd0:	f8 01       	movw	r30, r16
   19bd2:	11 82       	std	Z+1, r1	; 0x01
   19bd4:	12 82       	std	Z+2, r1	; 0x02
   19bd6:	89 81       	ldd	r24, Y+1	; 0x01
   19bd8:	8f bf       	out	0x3f, r24	; 63
   19bda:	8a 81       	ldd	r24, Y+2	; 0x02
   19bdc:	9b 81       	ldd	r25, Y+3	; 0x03
   19bde:	23 96       	adiw	r28, 0x03	; 3
   19be0:	cd bf       	out	0x3d, r28	; 61
   19be2:	de bf       	out	0x3e, r29	; 62
   19be4:	df 91       	pop	r29
   19be6:	cf 91       	pop	r28
   19be8:	1f 91       	pop	r17
   19bea:	0f 91       	pop	r16
   19bec:	ff 90       	pop	r15
   19bee:	08 95       	ret

00019bf0 <arb_semaphoreDestroy>:
   19bf0:	ef 92       	push	r14
   19bf2:	ff 92       	push	r15
   19bf4:	0f 93       	push	r16
   19bf6:	1f 93       	push	r17
   19bf8:	cf 93       	push	r28
   19bfa:	df 93       	push	r29
   19bfc:	cd b7       	in	r28, 0x3d	; 61
   19bfe:	de b7       	in	r29, 0x3e	; 62
   19c00:	27 97       	sbiw	r28, 0x07	; 7
   19c02:	cd bf       	out	0x3d, r28	; 61
   19c04:	de bf       	out	0x3e, r29	; 62
   19c06:	8e 83       	std	Y+6, r24	; 0x06
   19c08:	9f 83       	std	Y+7, r25	; 0x07
   19c0a:	8f b7       	in	r24, 0x3f	; 63
   19c0c:	89 83       	std	Y+1, r24	; 0x01
   19c0e:	f8 94       	cli
   19c10:	ee 81       	ldd	r30, Y+6	; 0x06
   19c12:	ff 81       	ldd	r31, Y+7	; 0x07
   19c14:	80 91 1d 22 	lds	r24, 0x221D
   19c18:	90 91 1e 22 	lds	r25, 0x221E
   19c1c:	24 81       	ldd	r18, Z+4	; 0x04
   19c1e:	35 81       	ldd	r19, Z+5	; 0x05
   19c20:	28 17       	cp	r18, r24
   19c22:	39 07       	cpc	r19, r25
   19c24:	21 f0       	breq	.+8      	; 0x19c2e <arb_semaphoreDestroy+0x3e>
   19c26:	89 81       	ldd	r24, Y+1	; 0x01
   19c28:	8f bf       	out	0x3f, r24	; 63
   19c2a:	89 ef       	ldi	r24, 0xF9	; 249
   19c2c:	4e c0       	rjmp	.+156    	; 0x19cca <arb_semaphoreDestroy+0xda>
   19c2e:	ee 81       	ldd	r30, Y+6	; 0x06
   19c30:	ff 81       	ldd	r31, Y+7	; 0x07
   19c32:	00 81       	ld	r16, Z
   19c34:	11 81       	ldd	r17, Z+1	; 0x01
   19c36:	d8 01       	movw	r26, r16
   19c38:	13 96       	adiw	r26, 0x03	; 3
   19c3a:	ed 91       	ld	r30, X+
   19c3c:	fc 91       	ld	r31, X
   19c3e:	14 97       	sbiw	r26, 0x04	; 4
   19c40:	e2 80       	ldd	r14, Z+2	; 0x02
   19c42:	f3 80       	ldd	r15, Z+3	; 0x03
   19c44:	13 96       	adiw	r26, 0x03	; 3
   19c46:	ed 91       	ld	r30, X+
   19c48:	fc 91       	ld	r31, X
   19c4a:	14 97       	sbiw	r26, 0x04	; 4
   19c4c:	25 c0       	rjmp	.+74     	; 0x19c98 <arb_semaphoreDestroy+0xa8>
   19c4e:	ec 81       	ldd	r30, Y+4	; 0x04
   19c50:	fd 81       	ldd	r31, Y+5	; 0x05
   19c52:	01 90       	ld	r0, Z+
   19c54:	f0 81       	ld	r31, Z
   19c56:	e0 2d       	mov	r30, r0
   19c58:	11 82       	std	Z+1, r1	; 0x01
   19c5a:	ec 81       	ldd	r30, Y+4	; 0x04
   19c5c:	fd 81       	ldd	r31, Y+5	; 0x05
   19c5e:	82 85       	ldd	r24, Z+10	; 0x0a
   19c60:	93 85       	ldd	r25, Z+11	; 0x0b
   19c62:	8a 83       	std	Y+2, r24	; 0x02
   19c64:	9b 83       	std	Y+3, r25	; 0x03
   19c66:	f8 01       	movw	r30, r16
   19c68:	83 81       	ldd	r24, Z+3	; 0x03
   19c6a:	94 81       	ldd	r25, Z+4	; 0x04
   19c6c:	6c 81       	ldd	r22, Y+4	; 0x04
   19c6e:	7d 81       	ldd	r23, Y+5	; 0x05
   19c70:	0e 94 03 db 	call	0x1b606	; 0x1b606 <utl_removeLink>
   19c74:	80 91 2c 22 	lds	r24, 0x222C
   19c78:	90 91 2d 22 	lds	r25, 0x222D
   19c7c:	6c 81       	ldd	r22, Y+4	; 0x04
   19c7e:	7d 81       	ldd	r23, Y+5	; 0x05
   19c80:	41 e0       	ldi	r20, 0x01	; 1
   19c82:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   19c86:	8a 81       	ldd	r24, Y+2	; 0x02
   19c88:	9b 81       	ldd	r25, Y+3	; 0x03
   19c8a:	8c 83       	std	Y+4, r24	; 0x04
   19c8c:	9d 83       	std	Y+5, r25	; 0x05
   19c8e:	08 94       	sec
   19c90:	e1 08       	sbc	r14, r1
   19c92:	f1 08       	sbc	r15, r1
   19c94:	ec 81       	ldd	r30, Y+4	; 0x04
   19c96:	fd 81       	ldd	r31, Y+5	; 0x05
   19c98:	80 85       	ldd	r24, Z+8	; 0x08
   19c9a:	91 85       	ldd	r25, Z+9	; 0x09
   19c9c:	8c 83       	std	Y+4, r24	; 0x04
   19c9e:	9d 83       	std	Y+5, r25	; 0x05
   19ca0:	e1 14       	cp	r14, r1
   19ca2:	f1 04       	cpc	r15, r1
   19ca4:	a1 f6       	brne	.-88     	; 0x19c4e <arb_semaphoreDestroy+0x5e>
   19ca6:	d8 01       	movw	r26, r16
   19ca8:	13 96       	adiw	r26, 0x03	; 3
   19caa:	8d 91       	ld	r24, X+
   19cac:	9c 91       	ld	r25, X
   19cae:	14 97       	sbiw	r26, 0x04	; 4
   19cb0:	0e 94 3a d9 	call	0x1b274	; 0x1b274 <utl_destroyContainer>
   19cb4:	80 91 1d 22 	lds	r24, 0x221D
   19cb8:	90 91 1e 22 	lds	r25, 0x221E
   19cbc:	6e 81       	ldd	r22, Y+6	; 0x06
   19cbe:	7f 81       	ldd	r23, Y+7	; 0x07
   19cc0:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   19cc4:	89 81       	ldd	r24, Y+1	; 0x01
   19cc6:	8f bf       	out	0x3f, r24	; 63
   19cc8:	80 e0       	ldi	r24, 0x00	; 0
   19cca:	27 96       	adiw	r28, 0x07	; 7
   19ccc:	cd bf       	out	0x3d, r28	; 61
   19cce:	de bf       	out	0x3e, r29	; 62
   19cd0:	df 91       	pop	r29
   19cd2:	cf 91       	pop	r28
   19cd4:	1f 91       	pop	r17
   19cd6:	0f 91       	pop	r16
   19cd8:	ff 90       	pop	r15
   19cda:	ef 90       	pop	r14
   19cdc:	08 95       	ret

00019cde <updateSystemTime>:
   19cde:	cf 92       	push	r12
   19ce0:	df 92       	push	r13
   19ce2:	ef 92       	push	r14
   19ce4:	ff 92       	push	r15
   19ce6:	cf 93       	push	r28
   19ce8:	df 93       	push	r29
   19cea:	90 91 dd 2b 	lds	r25, 0x2BDD
   19cee:	80 91 de 2b 	lds	r24, 0x2BDE
   19cf2:	30 91 df 2b 	lds	r19, 0x2BDF
   19cf6:	20 91 e0 2b 	lds	r18, 0x2BE0
   19cfa:	a0 91 e1 2b 	lds	r26, 0x2BE1
   19cfe:	f0 91 e2 2b 	lds	r31, 0x2BE2
   19d02:	e0 91 e3 2b 	lds	r30, 0x2BE3
   19d06:	b0 91 e4 2b 	lds	r27, 0x2BE4
   19d0a:	69 2f       	mov	r22, r25
   19d0c:	69 57       	subi	r22, 0x79	; 121
   19d0e:	51 e0       	ldi	r21, 0x01	; 1
   19d10:	69 17       	cp	r22, r25
   19d12:	08 f0       	brcs	.+2      	; 0x19d16 <updateSystemTime+0x38>
   19d14:	50 e0       	ldi	r21, 0x00	; 0
   19d16:	98 2f       	mov	r25, r24
   19d18:	9d 5e       	subi	r25, 0xED	; 237
   19d1a:	41 e0       	ldi	r20, 0x01	; 1
   19d1c:	98 17       	cp	r25, r24
   19d1e:	08 f0       	brcs	.+2      	; 0x19d22 <updateSystemTime+0x44>
   19d20:	40 e0       	ldi	r20, 0x00	; 0
   19d22:	59 0f       	add	r21, r25
   19d24:	81 e0       	ldi	r24, 0x01	; 1
   19d26:	59 17       	cp	r21, r25
   19d28:	08 f0       	brcs	.+2      	; 0x19d2c <updateSystemTime+0x4e>
   19d2a:	80 e0       	ldi	r24, 0x00	; 0
   19d2c:	84 2b       	or	r24, r20
   19d2e:	83 0f       	add	r24, r19
   19d30:	41 e0       	ldi	r20, 0x01	; 1
   19d32:	83 17       	cp	r24, r19
   19d34:	08 f0       	brcs	.+2      	; 0x19d38 <updateSystemTime+0x5a>
   19d36:	40 e0       	ldi	r20, 0x00	; 0
   19d38:	42 0f       	add	r20, r18
   19d3a:	31 e0       	ldi	r19, 0x01	; 1
   19d3c:	42 17       	cp	r20, r18
   19d3e:	08 f0       	brcs	.+2      	; 0x19d42 <updateSystemTime+0x64>
   19d40:	30 e0       	ldi	r19, 0x00	; 0
   19d42:	3a 0f       	add	r19, r26
   19d44:	21 e0       	ldi	r18, 0x01	; 1
   19d46:	3a 17       	cp	r19, r26
   19d48:	08 f0       	brcs	.+2      	; 0x19d4c <updateSystemTime+0x6e>
   19d4a:	20 e0       	ldi	r18, 0x00	; 0
   19d4c:	2f 0f       	add	r18, r31
   19d4e:	91 e0       	ldi	r25, 0x01	; 1
   19d50:	2f 17       	cp	r18, r31
   19d52:	08 f0       	brcs	.+2      	; 0x19d56 <updateSystemTime+0x78>
   19d54:	90 e0       	ldi	r25, 0x00	; 0
   19d56:	9e 0f       	add	r25, r30
   19d58:	71 e0       	ldi	r23, 0x01	; 1
   19d5a:	9e 17       	cp	r25, r30
   19d5c:	08 f0       	brcs	.+2      	; 0x19d60 <updateSystemTime+0x82>
   19d5e:	70 e0       	ldi	r23, 0x00	; 0
   19d60:	7b 0f       	add	r23, r27
   19d62:	60 93 dd 2b 	sts	0x2BDD, r22
   19d66:	50 93 de 2b 	sts	0x2BDE, r21
   19d6a:	80 93 df 2b 	sts	0x2BDF, r24
   19d6e:	40 93 e0 2b 	sts	0x2BE0, r20
   19d72:	30 93 e1 2b 	sts	0x2BE1, r19
   19d76:	20 93 e2 2b 	sts	0x2BE2, r18
   19d7a:	90 93 e3 2b 	sts	0x2BE3, r25
   19d7e:	70 93 e4 2b 	sts	0x2BE4, r23
   19d82:	60 91 ea 2b 	lds	r22, 0x2BEA
   19d86:	70 91 eb 2b 	lds	r23, 0x2BEB
   19d8a:	80 91 ec 2b 	lds	r24, 0x2BEC
   19d8e:	90 91 ed 2b 	lds	r25, 0x2BED
   19d92:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   19d96:	20 e0       	ldi	r18, 0x00	; 0
   19d98:	30 e4       	ldi	r19, 0x40	; 64
   19d9a:	4c e1       	ldi	r20, 0x1C	; 28
   19d9c:	56 e4       	ldi	r21, 0x46	; 70
   19d9e:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   19da2:	0e 94 d2 f2 	call	0x1e5a4	; 0x1e5a4 <__fixunssfsi>
   19da6:	6b 01       	movw	r12, r22
   19da8:	7c 01       	movw	r14, r24
   19daa:	60 93 ea 2b 	sts	0x2BEA, r22
   19dae:	70 93 eb 2b 	sts	0x2BEB, r23
   19db2:	80 93 ec 2b 	sts	0x2BEC, r24
   19db6:	90 93 ed 2b 	sts	0x2BED, r25
   19dba:	c5 ed       	ldi	r28, 0xD5	; 213
   19dbc:	db e2       	ldi	r29, 0x2B	; 43
   19dbe:	20 91 d5 2b 	lds	r18, 0x2BD5
   19dc2:	30 91 d6 2b 	lds	r19, 0x2BD6
   19dc6:	40 91 d7 2b 	lds	r20, 0x2BD7
   19dca:	50 91 d8 2b 	lds	r21, 0x2BD8
   19dce:	60 91 d9 2b 	lds	r22, 0x2BD9
   19dd2:	70 91 da 2b 	lds	r23, 0x2BDA
   19dd6:	80 91 db 2b 	lds	r24, 0x2BDB
   19dda:	90 91 dc 2b 	lds	r25, 0x2BDC
   19dde:	0e 94 3b f3 	call	0x1e676	; 0x1e676 <__floatundisf>
   19de2:	20 e0       	ldi	r18, 0x00	; 0
   19de4:	30 e0       	ldi	r19, 0x00	; 0
   19de6:	40 e2       	ldi	r20, 0x20	; 32
   19de8:	51 e4       	ldi	r21, 0x41	; 65
   19dea:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   19dee:	0e 94 98 f2 	call	0x1e530	; 0x1e530 <__fixunssfdi>
   19df2:	20 93 d5 2b 	sts	0x2BD5, r18
   19df6:	39 83       	std	Y+1, r19	; 0x01
   19df8:	4a 83       	std	Y+2, r20	; 0x02
   19dfa:	5b 83       	std	Y+3, r21	; 0x03
   19dfc:	6c 83       	std	Y+4, r22	; 0x04
   19dfe:	7d 83       	std	Y+5, r23	; 0x05
   19e00:	8e 83       	std	Y+6, r24	; 0x06
   19e02:	9f 83       	std	Y+7, r25	; 0x07
   19e04:	99 23       	and	r25, r25
   19e06:	a9 f4       	brne	.+42     	; 0x19e32 <updateSystemTime+0x154>
   19e08:	88 23       	and	r24, r24
   19e0a:	99 f4       	brne	.+38     	; 0x19e32 <updateSystemTime+0x154>
   19e0c:	77 23       	and	r23, r23
   19e0e:	89 f4       	brne	.+34     	; 0x19e32 <updateSystemTime+0x154>
   19e10:	66 23       	and	r22, r22
   19e12:	79 f4       	brne	.+30     	; 0x19e32 <updateSystemTime+0x154>
   19e14:	55 23       	and	r21, r21
   19e16:	69 f4       	brne	.+26     	; 0x19e32 <updateSystemTime+0x154>
   19e18:	47 33       	cpi	r20, 0x37	; 55
   19e1a:	58 f4       	brcc	.+22     	; 0x19e32 <updateSystemTime+0x154>
   19e1c:	46 33       	cpi	r20, 0x36	; 54
   19e1e:	09 f0       	breq	.+2      	; 0x19e22 <updateSystemTime+0x144>
   19e20:	6c c0       	rjmp	.+216    	; 0x19efa <updateSystemTime+0x21c>
   19e22:	3f 3e       	cpi	r19, 0xEF	; 239
   19e24:	30 f4       	brcc	.+12     	; 0x19e32 <updateSystemTime+0x154>
   19e26:	3e 3e       	cpi	r19, 0xEE	; 238
   19e28:	09 f0       	breq	.+2      	; 0x19e2c <updateSystemTime+0x14e>
   19e2a:	67 c0       	rjmp	.+206    	; 0x19efa <updateSystemTime+0x21c>
   19e2c:	20 38       	cpi	r18, 0x80	; 128
   19e2e:	08 f4       	brcc	.+2      	; 0x19e32 <updateSystemTime+0x154>
   19e30:	64 c0       	rjmp	.+200    	; 0x19efa <updateSystemTime+0x21c>
   19e32:	a2 2f       	mov	r26, r18
   19e34:	a0 58       	subi	r26, 0x80	; 128
   19e36:	b1 e0       	ldi	r27, 0x01	; 1
   19e38:	a2 17       	cp	r26, r18
   19e3a:	08 f0       	brcs	.+2      	; 0x19e3e <updateSystemTime+0x160>
   19e3c:	b0 e0       	ldi	r27, 0x00	; 0
   19e3e:	e3 2f       	mov	r30, r19
   19e40:	ef 5e       	subi	r30, 0xEF	; 239
   19e42:	21 e0       	ldi	r18, 0x01	; 1
   19e44:	e3 17       	cp	r30, r19
   19e46:	08 f0       	brcs	.+2      	; 0x19e4a <updateSystemTime+0x16c>
   19e48:	20 e0       	ldi	r18, 0x00	; 0
   19e4a:	be 0f       	add	r27, r30
   19e4c:	31 e0       	ldi	r19, 0x01	; 1
   19e4e:	be 17       	cp	r27, r30
   19e50:	08 f0       	brcs	.+2      	; 0x19e54 <updateSystemTime+0x176>
   19e52:	30 e0       	ldi	r19, 0x00	; 0
   19e54:	23 2b       	or	r18, r19
   19e56:	e4 2f       	mov	r30, r20
   19e58:	e7 53       	subi	r30, 0x37	; 55
   19e5a:	31 e0       	ldi	r19, 0x01	; 1
   19e5c:	e4 17       	cp	r30, r20
   19e5e:	08 f0       	brcs	.+2      	; 0x19e62 <updateSystemTime+0x184>
   19e60:	30 e0       	ldi	r19, 0x00	; 0
   19e62:	f2 2f       	mov	r31, r18
   19e64:	fe 0f       	add	r31, r30
   19e66:	21 e0       	ldi	r18, 0x01	; 1
   19e68:	fe 17       	cp	r31, r30
   19e6a:	08 f0       	brcs	.+2      	; 0x19e6e <updateSystemTime+0x190>
   19e6c:	20 e0       	ldi	r18, 0x00	; 0
   19e6e:	32 2b       	or	r19, r18
   19e70:	45 2f       	mov	r20, r21
   19e72:	41 50       	subi	r20, 0x01	; 1
   19e74:	21 e0       	ldi	r18, 0x01	; 1
   19e76:	45 17       	cp	r20, r21
   19e78:	08 f0       	brcs	.+2      	; 0x19e7c <updateSystemTime+0x19e>
   19e7a:	20 e0       	ldi	r18, 0x00	; 0
   19e7c:	e3 2f       	mov	r30, r19
   19e7e:	e4 0f       	add	r30, r20
   19e80:	31 e0       	ldi	r19, 0x01	; 1
   19e82:	e4 17       	cp	r30, r20
   19e84:	08 f0       	brcs	.+2      	; 0x19e88 <updateSystemTime+0x1aa>
   19e86:	30 e0       	ldi	r19, 0x00	; 0
   19e88:	23 2b       	or	r18, r19
   19e8a:	46 2f       	mov	r20, r22
   19e8c:	41 50       	subi	r20, 0x01	; 1
   19e8e:	31 e0       	ldi	r19, 0x01	; 1
   19e90:	46 17       	cp	r20, r22
   19e92:	08 f0       	brcs	.+2      	; 0x19e96 <updateSystemTime+0x1b8>
   19e94:	30 e0       	ldi	r19, 0x00	; 0
   19e96:	62 2f       	mov	r22, r18
   19e98:	64 0f       	add	r22, r20
   19e9a:	21 e0       	ldi	r18, 0x01	; 1
   19e9c:	64 17       	cp	r22, r20
   19e9e:	08 f0       	brcs	.+2      	; 0x19ea2 <updateSystemTime+0x1c4>
   19ea0:	20 e0       	ldi	r18, 0x00	; 0
   19ea2:	32 2b       	or	r19, r18
   19ea4:	47 2f       	mov	r20, r23
   19ea6:	41 50       	subi	r20, 0x01	; 1
   19ea8:	21 e0       	ldi	r18, 0x01	; 1
   19eaa:	47 17       	cp	r20, r23
   19eac:	08 f0       	brcs	.+2      	; 0x19eb0 <updateSystemTime+0x1d2>
   19eae:	20 e0       	ldi	r18, 0x00	; 0
   19eb0:	34 0f       	add	r19, r20
   19eb2:	51 e0       	ldi	r21, 0x01	; 1
   19eb4:	34 17       	cp	r19, r20
   19eb6:	08 f0       	brcs	.+2      	; 0x19eba <updateSystemTime+0x1dc>
   19eb8:	50 e0       	ldi	r21, 0x00	; 0
   19eba:	25 2b       	or	r18, r21
   19ebc:	48 2f       	mov	r20, r24
   19ebe:	41 50       	subi	r20, 0x01	; 1
   19ec0:	71 e0       	ldi	r23, 0x01	; 1
   19ec2:	48 17       	cp	r20, r24
   19ec4:	08 f0       	brcs	.+2      	; 0x19ec8 <updateSystemTime+0x1ea>
   19ec6:	70 e0       	ldi	r23, 0x00	; 0
   19ec8:	52 2f       	mov	r21, r18
   19eca:	54 0f       	add	r21, r20
   19ecc:	81 e0       	ldi	r24, 0x01	; 1
   19ece:	54 17       	cp	r21, r20
   19ed0:	08 f0       	brcs	.+2      	; 0x19ed4 <updateSystemTime+0x1f6>
   19ed2:	80 e0       	ldi	r24, 0x00	; 0
   19ed4:	87 2b       	or	r24, r23
   19ed6:	91 50       	subi	r25, 0x01	; 1
   19ed8:	89 0f       	add	r24, r25
   19eda:	a0 93 d5 2b 	sts	0x2BD5, r26
   19ede:	b0 93 d6 2b 	sts	0x2BD6, r27
   19ee2:	f0 93 d7 2b 	sts	0x2BD7, r31
   19ee6:	e0 93 d8 2b 	sts	0x2BD8, r30
   19eea:	60 93 d9 2b 	sts	0x2BD9, r22
   19eee:	30 93 da 2b 	sts	0x2BDA, r19
   19ef2:	50 93 db 2b 	sts	0x2BDB, r21
   19ef6:	80 93 dc 2b 	sts	0x2BDC, r24
   19efa:	80 e4       	ldi	r24, 0x40	; 64
   19efc:	c8 16       	cp	r12, r24
   19efe:	82 e4       	ldi	r24, 0x42	; 66
   19f00:	d8 06       	cpc	r13, r24
   19f02:	8f e0       	ldi	r24, 0x0F	; 15
   19f04:	e8 06       	cpc	r14, r24
   19f06:	80 e0       	ldi	r24, 0x00	; 0
   19f08:	f8 06       	cpc	r15, r24
   19f0a:	90 f1       	brcs	.+100    	; 0x19f70 <updateSystemTime+0x292>
   19f0c:	d7 01       	movw	r26, r14
   19f0e:	c6 01       	movw	r24, r12
   19f10:	80 54       	subi	r24, 0x40	; 64
   19f12:	92 44       	sbci	r25, 0x42	; 66
   19f14:	af 40       	sbci	r26, 0x0F	; 15
   19f16:	b0 40       	sbci	r27, 0x00	; 0
   19f18:	80 93 ea 2b 	sts	0x2BEA, r24
   19f1c:	90 93 eb 2b 	sts	0x2BEB, r25
   19f20:	a0 93 ec 2b 	sts	0x2BEC, r26
   19f24:	b0 93 ed 2b 	sts	0x2BED, r27
   19f28:	80 91 e9 2b 	lds	r24, 0x2BE9
   19f2c:	8f 5f       	subi	r24, 0xFF	; 255
   19f2e:	80 93 e9 2b 	sts	0x2BE9, r24
   19f32:	8c 33       	cpi	r24, 0x3C	; 60
   19f34:	e9 f4       	brne	.+58     	; 0x19f70 <updateSystemTime+0x292>
   19f36:	10 92 e9 2b 	sts	0x2BE9, r1
   19f3a:	80 91 e8 2b 	lds	r24, 0x2BE8
   19f3e:	8f 5f       	subi	r24, 0xFF	; 255
   19f40:	80 93 e8 2b 	sts	0x2BE8, r24
   19f44:	8c 33       	cpi	r24, 0x3C	; 60
   19f46:	a1 f4       	brne	.+40     	; 0x19f70 <updateSystemTime+0x292>
   19f48:	10 92 e8 2b 	sts	0x2BE8, r1
   19f4c:	80 91 e7 2b 	lds	r24, 0x2BE7
   19f50:	8f 5f       	subi	r24, 0xFF	; 255
   19f52:	80 93 e7 2b 	sts	0x2BE7, r24
   19f56:	88 31       	cpi	r24, 0x18	; 24
   19f58:	59 f4       	brne	.+22     	; 0x19f70 <updateSystemTime+0x292>
   19f5a:	10 92 e7 2b 	sts	0x2BE7, r1
   19f5e:	80 91 e5 2b 	lds	r24, 0x2BE5
   19f62:	90 91 e6 2b 	lds	r25, 0x2BE6
   19f66:	01 96       	adiw	r24, 0x01	; 1
   19f68:	80 93 e5 2b 	sts	0x2BE5, r24
   19f6c:	90 93 e6 2b 	sts	0x2BE6, r25
   19f70:	df 91       	pop	r29
   19f72:	cf 91       	pop	r28
   19f74:	ff 90       	pop	r15
   19f76:	ef 90       	pop	r14
   19f78:	df 90       	pop	r13
   19f7a:	cf 90       	pop	r12
   19f7c:	08 95       	ret

00019f7e <sysTimerInterrupt>:
   19f7e:	f8 94       	cli
   19f80:	0f 92       	push	r0
   19f82:	0f b6       	in	r0, 0x3f	; 63
   19f84:	0f 93       	push	r16
   19f86:	00 2d       	mov	r16, r0
   19f88:	00 68       	ori	r16, 0x80	; 128
   19f8a:	00 2e       	mov	r0, r16
   19f8c:	0f 91       	pop	r16
   19f8e:	0f 92       	push	r0
   19f90:	1f 92       	push	r1
   19f92:	11 24       	eor	r1, r1
   19f94:	2f 92       	push	r2
   19f96:	3f 92       	push	r3
   19f98:	4f 92       	push	r4
   19f9a:	5f 92       	push	r5
   19f9c:	6f 92       	push	r6
   19f9e:	7f 92       	push	r7
   19fa0:	8f 92       	push	r8
   19fa2:	9f 92       	push	r9
   19fa4:	af 92       	push	r10
   19fa6:	bf 92       	push	r11
   19fa8:	cf 92       	push	r12
   19faa:	df 92       	push	r13
   19fac:	ef 92       	push	r14
   19fae:	ff 92       	push	r15
   19fb0:	0f 93       	push	r16
   19fb2:	1f 93       	push	r17
   19fb4:	2f 93       	push	r18
   19fb6:	3f 93       	push	r19
   19fb8:	4f 93       	push	r20
   19fba:	5f 93       	push	r21
   19fbc:	6f 93       	push	r22
   19fbe:	7f 93       	push	r23
   19fc0:	8f 93       	push	r24
   19fc2:	9f 93       	push	r25
   19fc4:	af 93       	push	r26
   19fc6:	bf 93       	push	r27
   19fc8:	cf 93       	push	r28
   19fca:	df 93       	push	r29
   19fcc:	ef 93       	push	r30
   19fce:	ff 93       	push	r31
   19fd0:	e0 91 2c 22 	lds	r30, 0x222C
   19fd4:	f0 91 2d 22 	lds	r31, 0x222D
   19fd8:	06 80       	ldd	r0, Z+6	; 0x06
   19fda:	f7 81       	ldd	r31, Z+7	; 0x07
   19fdc:	e0 2d       	mov	r30, r0
   19fde:	01 90       	ld	r0, Z+
   19fe0:	f0 81       	ld	r31, Z
   19fe2:	e0 2d       	mov	r30, r0
   19fe4:	e0 93 38 2c 	sts	0x2C38, r30
   19fe8:	f0 93 39 2c 	sts	0x2C39, r31
   19fec:	2d b7       	in	r18, 0x3d	; 61
   19fee:	30 e0       	ldi	r19, 0x00	; 0
   19ff0:	21 87       	std	Z+9, r18	; 0x09
   19ff2:	32 87       	std	Z+10, r19	; 0x0a
   19ff4:	4e b7       	in	r20, 0x3e	; 62
   19ff6:	94 2f       	mov	r25, r20
   19ff8:	80 e0       	ldi	r24, 0x00	; 0
   19ffa:	82 2b       	or	r24, r18
   19ffc:	93 2b       	or	r25, r19
   19ffe:	81 87       	std	Z+9, r24	; 0x09
   1a000:	92 87       	std	Z+10, r25	; 0x0a
   1a002:	8f ef       	ldi	r24, 0xFF	; 255
   1a004:	8d bf       	out	0x3d, r24	; 61
   1a006:	8f e3       	ldi	r24, 0x3F	; 63
   1a008:	8e bf       	out	0x3e, r24	; 62
   1a00a:	c0 91 3d 00 	lds	r28, 0x003D
   1a00e:	d0 91 3e 00 	lds	r29, 0x003E
   1a012:	e0 91 2c 22 	lds	r30, 0x222C
   1a016:	f0 91 2d 22 	lds	r31, 0x222D
   1a01a:	06 80       	ldd	r0, Z+6	; 0x06
   1a01c:	f7 81       	ldd	r31, Z+7	; 0x07
   1a01e:	e0 2d       	mov	r30, r0
   1a020:	01 90       	ld	r0, Z+
   1a022:	f0 81       	ld	r31, Z
   1a024:	e0 2d       	mov	r30, r0
   1a026:	e0 93 f1 2b 	sts	0x2BF1, r30
   1a02a:	f0 93 f2 2b 	sts	0x2BF2, r31
   1a02e:	03 84       	ldd	r0, Z+11	; 0x0b
   1a030:	f4 85       	ldd	r31, Z+12	; 0x0c
   1a032:	e0 2d       	mov	r30, r0
   1a034:	80 81       	ld	r24, Z
   1a036:	91 81       	ldd	r25, Z+1	; 0x01
   1a038:	2e ed       	ldi	r18, 0xDE	; 222
   1a03a:	8d 3a       	cpi	r24, 0xAD	; 173
   1a03c:	92 07       	cpc	r25, r18
   1a03e:	11 f0       	breq	.+4      	; 0x1a044 <sysTimerInterrupt+0xc6>
   1a040:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1a044:	e0 91 f1 2b 	lds	r30, 0x2BF1
   1a048:	f0 91 f2 2b 	lds	r31, 0x2BF2
   1a04c:	11 82       	std	Z+1, r1	; 0x01
   1a04e:	80 91 2b 22 	lds	r24, 0x222B
   1a052:	88 23       	and	r24, r24
   1a054:	11 f0       	breq	.+4      	; 0x1a05a <sysTimerInterrupt+0xdc>
   1a056:	0e 94 6f ce 	call	0x19cde	; 0x19cde <updateSystemTime>
   1a05a:	81 e0       	ldi	r24, 0x01	; 1
   1a05c:	80 93 2b 22 	sts	0x222B, r24
   1a060:	0e 94 7f d4 	call	0x1a8fe	; 0x1a8fe <arb_updateSleepingThreads>
   1a064:	e0 91 36 2c 	lds	r30, 0x2C36
   1a068:	f0 91 37 2c 	lds	r31, 0x2C37
   1a06c:	19 95       	eicall
   1a06e:	e0 91 2c 22 	lds	r30, 0x222C
   1a072:	f0 91 2d 22 	lds	r31, 0x222D
   1a076:	06 80       	ldd	r0, Z+6	; 0x06
   1a078:	f7 81       	ldd	r31, Z+7	; 0x07
   1a07a:	e0 2d       	mov	r30, r0
   1a07c:	01 90       	ld	r0, Z+
   1a07e:	f0 81       	ld	r31, Z
   1a080:	e0 2d       	mov	r30, r0
   1a082:	e0 93 38 2c 	sts	0x2C38, r30
   1a086:	f0 93 39 2c 	sts	0x2C39, r31
   1a08a:	81 85       	ldd	r24, Z+9	; 0x09
   1a08c:	8d bf       	out	0x3d, r24	; 61
   1a08e:	82 85       	ldd	r24, Z+10	; 0x0a
   1a090:	8e bf       	out	0x3e, r24	; 62
   1a092:	ff 91       	pop	r31
   1a094:	ef 91       	pop	r30
   1a096:	df 91       	pop	r29
   1a098:	cf 91       	pop	r28
   1a09a:	bf 91       	pop	r27
   1a09c:	af 91       	pop	r26
   1a09e:	9f 91       	pop	r25
   1a0a0:	8f 91       	pop	r24
   1a0a2:	7f 91       	pop	r23
   1a0a4:	6f 91       	pop	r22
   1a0a6:	5f 91       	pop	r21
   1a0a8:	4f 91       	pop	r20
   1a0aa:	3f 91       	pop	r19
   1a0ac:	2f 91       	pop	r18
   1a0ae:	1f 91       	pop	r17
   1a0b0:	0f 91       	pop	r16
   1a0b2:	ff 90       	pop	r15
   1a0b4:	ef 90       	pop	r14
   1a0b6:	df 90       	pop	r13
   1a0b8:	cf 90       	pop	r12
   1a0ba:	bf 90       	pop	r11
   1a0bc:	af 90       	pop	r10
   1a0be:	9f 90       	pop	r9
   1a0c0:	8f 90       	pop	r8
   1a0c2:	7f 90       	pop	r7
   1a0c4:	6f 90       	pop	r6
   1a0c6:	5f 90       	pop	r5
   1a0c8:	4f 90       	pop	r4
   1a0ca:	3f 90       	pop	r3
   1a0cc:	2f 90       	pop	r2
   1a0ce:	1f 90       	pop	r1
   1a0d0:	0f 90       	pop	r0
   1a0d2:	0f be       	out	0x3f, r0	; 63
   1a0d4:	0f 90       	pop	r0
   1a0d6:	18 95       	reti

0001a0d8 <arb_sysMsecNow>:
   1a0d8:	20 91 d5 2b 	lds	r18, 0x2BD5
   1a0dc:	30 91 d6 2b 	lds	r19, 0x2BD6
   1a0e0:	40 91 d7 2b 	lds	r20, 0x2BD7
   1a0e4:	50 91 d8 2b 	lds	r21, 0x2BD8
   1a0e8:	60 91 d9 2b 	lds	r22, 0x2BD9
   1a0ec:	70 91 da 2b 	lds	r23, 0x2BDA
   1a0f0:	80 91 db 2b 	lds	r24, 0x2BDB
   1a0f4:	90 91 dc 2b 	lds	r25, 0x2BDC
   1a0f8:	08 95       	ret

0001a0fa <arb_sysMsecDelta>:
   1a0fa:	af 92       	push	r10
   1a0fc:	bf 92       	push	r11
   1a0fe:	cf 92       	push	r12
   1a100:	df 92       	push	r13
   1a102:	ef 92       	push	r14
   1a104:	ff 92       	push	r15
   1a106:	0f 93       	push	r16
   1a108:	1f 93       	push	r17
   1a10a:	cf 93       	push	r28
   1a10c:	df 93       	push	r29
   1a10e:	e2 2f       	mov	r30, r18
   1a110:	ea 19       	sub	r30, r10
   1a112:	ae 2e       	mov	r10, r30
   1a114:	f1 e0       	ldi	r31, 0x01	; 1
   1a116:	2e 17       	cp	r18, r30
   1a118:	08 f0       	brcs	.+2      	; 0x1a11c <arb_sysMsecDelta+0x22>
   1a11a:	f0 e0       	ldi	r31, 0x00	; 0
   1a11c:	23 2f       	mov	r18, r19
   1a11e:	2b 19       	sub	r18, r11
   1a120:	e1 e0       	ldi	r30, 0x01	; 1
   1a122:	32 17       	cp	r19, r18
   1a124:	08 f0       	brcs	.+2      	; 0x1a128 <arb_sysMsecDelta+0x2e>
   1a126:	e0 e0       	ldi	r30, 0x00	; 0
   1a128:	d2 2f       	mov	r29, r18
   1a12a:	df 1b       	sub	r29, r31
   1a12c:	31 e0       	ldi	r19, 0x01	; 1
   1a12e:	2d 17       	cp	r18, r29
   1a130:	08 f0       	brcs	.+2      	; 0x1a134 <arb_sysMsecDelta+0x3a>
   1a132:	30 e0       	ldi	r19, 0x00	; 0
   1a134:	e3 2b       	or	r30, r19
   1a136:	34 2f       	mov	r19, r20
   1a138:	3c 19       	sub	r19, r12
   1a13a:	21 e0       	ldi	r18, 0x01	; 1
   1a13c:	43 17       	cp	r20, r19
   1a13e:	08 f0       	brcs	.+2      	; 0x1a142 <arb_sysMsecDelta+0x48>
   1a140:	20 e0       	ldi	r18, 0x00	; 0
   1a142:	c3 2f       	mov	r28, r19
   1a144:	ce 1b       	sub	r28, r30
   1a146:	41 e0       	ldi	r20, 0x01	; 1
   1a148:	3c 17       	cp	r19, r28
   1a14a:	08 f0       	brcs	.+2      	; 0x1a14e <arb_sysMsecDelta+0x54>
   1a14c:	40 e0       	ldi	r20, 0x00	; 0
   1a14e:	24 2b       	or	r18, r20
   1a150:	45 2f       	mov	r20, r21
   1a152:	4d 19       	sub	r20, r13
   1a154:	31 e0       	ldi	r19, 0x01	; 1
   1a156:	54 17       	cp	r21, r20
   1a158:	08 f0       	brcs	.+2      	; 0x1a15c <arb_sysMsecDelta+0x62>
   1a15a:	30 e0       	ldi	r19, 0x00	; 0
   1a15c:	d4 2e       	mov	r13, r20
   1a15e:	d2 1a       	sub	r13, r18
   1a160:	21 e0       	ldi	r18, 0x01	; 1
   1a162:	4d 15       	cp	r20, r13
   1a164:	08 f0       	brcs	.+2      	; 0x1a168 <arb_sysMsecDelta+0x6e>
   1a166:	20 e0       	ldi	r18, 0x00	; 0
   1a168:	32 2b       	or	r19, r18
   1a16a:	46 2f       	mov	r20, r22
   1a16c:	4e 19       	sub	r20, r14
   1a16e:	21 e0       	ldi	r18, 0x01	; 1
   1a170:	64 17       	cp	r22, r20
   1a172:	08 f0       	brcs	.+2      	; 0x1a176 <arb_sysMsecDelta+0x7c>
   1a174:	20 e0       	ldi	r18, 0x00	; 0
   1a176:	b4 2f       	mov	r27, r20
   1a178:	b3 1b       	sub	r27, r19
   1a17a:	31 e0       	ldi	r19, 0x01	; 1
   1a17c:	4b 17       	cp	r20, r27
   1a17e:	08 f0       	brcs	.+2      	; 0x1a182 <arb_sysMsecDelta+0x88>
   1a180:	30 e0       	ldi	r19, 0x00	; 0
   1a182:	23 2b       	or	r18, r19
   1a184:	47 2f       	mov	r20, r23
   1a186:	4f 19       	sub	r20, r15
   1a188:	31 e0       	ldi	r19, 0x01	; 1
   1a18a:	74 17       	cp	r23, r20
   1a18c:	08 f0       	brcs	.+2      	; 0x1a190 <arb_sysMsecDelta+0x96>
   1a18e:	30 e0       	ldi	r19, 0x00	; 0
   1a190:	a4 2f       	mov	r26, r20
   1a192:	a2 1b       	sub	r26, r18
   1a194:	21 e0       	ldi	r18, 0x01	; 1
   1a196:	4a 17       	cp	r20, r26
   1a198:	08 f0       	brcs	.+2      	; 0x1a19c <arb_sysMsecDelta+0xa2>
   1a19a:	20 e0       	ldi	r18, 0x00	; 0
   1a19c:	32 2b       	or	r19, r18
   1a19e:	48 2f       	mov	r20, r24
   1a1a0:	40 1b       	sub	r20, r16
   1a1a2:	21 e0       	ldi	r18, 0x01	; 1
   1a1a4:	84 17       	cp	r24, r20
   1a1a6:	08 f0       	brcs	.+2      	; 0x1a1aa <arb_sysMsecDelta+0xb0>
   1a1a8:	20 e0       	ldi	r18, 0x00	; 0
   1a1aa:	f4 2f       	mov	r31, r20
   1a1ac:	f3 1b       	sub	r31, r19
   1a1ae:	81 e0       	ldi	r24, 0x01	; 1
   1a1b0:	4f 17       	cp	r20, r31
   1a1b2:	08 f0       	brcs	.+2      	; 0x1a1b6 <arb_sysMsecDelta+0xbc>
   1a1b4:	80 e0       	ldi	r24, 0x00	; 0
   1a1b6:	28 2b       	or	r18, r24
   1a1b8:	e9 2f       	mov	r30, r25
   1a1ba:	e1 1b       	sub	r30, r17
   1a1bc:	e2 1b       	sub	r30, r18
   1a1be:	2a 2d       	mov	r18, r10
   1a1c0:	3d 2f       	mov	r19, r29
   1a1c2:	4c 2f       	mov	r20, r28
   1a1c4:	5d 2d       	mov	r21, r13
   1a1c6:	6b 2f       	mov	r22, r27
   1a1c8:	7a 2f       	mov	r23, r26
   1a1ca:	8f 2f       	mov	r24, r31
   1a1cc:	9e 2f       	mov	r25, r30
   1a1ce:	e7 ff       	sbrs	r30, 7
   1a1d0:	32 c0       	rjmp	.+100    	; 0x1a236 <arb_sysMsecDelta+0x13c>
   1a1d2:	20 58       	subi	r18, 0x80	; 128
   1a1d4:	31 e0       	ldi	r19, 0x01	; 1
   1a1d6:	2a 15       	cp	r18, r10
   1a1d8:	08 f0       	brcs	.+2      	; 0x1a1dc <arb_sysMsecDelta+0xe2>
   1a1da:	30 e0       	ldi	r19, 0x00	; 0
   1a1dc:	8d 2f       	mov	r24, r29
   1a1de:	82 51       	subi	r24, 0x12	; 18
   1a1e0:	41 e0       	ldi	r20, 0x01	; 1
   1a1e2:	8d 17       	cp	r24, r29
   1a1e4:	08 f0       	brcs	.+2      	; 0x1a1e8 <arb_sysMsecDelta+0xee>
   1a1e6:	40 e0       	ldi	r20, 0x00	; 0
   1a1e8:	38 0f       	add	r19, r24
   1a1ea:	91 e0       	ldi	r25, 0x01	; 1
   1a1ec:	38 17       	cp	r19, r24
   1a1ee:	08 f0       	brcs	.+2      	; 0x1a1f2 <arb_sysMsecDelta+0xf8>
   1a1f0:	90 e0       	ldi	r25, 0x00	; 0
   1a1f2:	49 2b       	or	r20, r25
   1a1f4:	8c 2f       	mov	r24, r28
   1a1f6:	8a 5c       	subi	r24, 0xCA	; 202
   1a1f8:	51 e0       	ldi	r21, 0x01	; 1
   1a1fa:	8c 17       	cp	r24, r28
   1a1fc:	08 f0       	brcs	.+2      	; 0x1a200 <arb_sysMsecDelta+0x106>
   1a1fe:	50 e0       	ldi	r21, 0x00	; 0
   1a200:	48 0f       	add	r20, r24
   1a202:	91 e0       	ldi	r25, 0x01	; 1
   1a204:	48 17       	cp	r20, r24
   1a206:	08 f0       	brcs	.+2      	; 0x1a20a <arb_sysMsecDelta+0x110>
   1a208:	90 e0       	ldi	r25, 0x00	; 0
   1a20a:	59 2b       	or	r21, r25
   1a20c:	5d 0d       	add	r21, r13
   1a20e:	61 e0       	ldi	r22, 0x01	; 1
   1a210:	5d 15       	cp	r21, r13
   1a212:	08 f0       	brcs	.+2      	; 0x1a216 <arb_sysMsecDelta+0x11c>
   1a214:	60 e0       	ldi	r22, 0x00	; 0
   1a216:	6b 0f       	add	r22, r27
   1a218:	71 e0       	ldi	r23, 0x01	; 1
   1a21a:	6b 17       	cp	r22, r27
   1a21c:	08 f0       	brcs	.+2      	; 0x1a220 <arb_sysMsecDelta+0x126>
   1a21e:	70 e0       	ldi	r23, 0x00	; 0
   1a220:	7a 0f       	add	r23, r26
   1a222:	81 e0       	ldi	r24, 0x01	; 1
   1a224:	7a 17       	cp	r23, r26
   1a226:	08 f0       	brcs	.+2      	; 0x1a22a <arb_sysMsecDelta+0x130>
   1a228:	80 e0       	ldi	r24, 0x00	; 0
   1a22a:	8f 0f       	add	r24, r31
   1a22c:	91 e0       	ldi	r25, 0x01	; 1
   1a22e:	8f 17       	cp	r24, r31
   1a230:	08 f0       	brcs	.+2      	; 0x1a234 <arb_sysMsecDelta+0x13a>
   1a232:	90 e0       	ldi	r25, 0x00	; 0
   1a234:	9e 0f       	add	r25, r30
   1a236:	df 91       	pop	r29
   1a238:	cf 91       	pop	r28
   1a23a:	1f 91       	pop	r17
   1a23c:	0f 91       	pop	r16
   1a23e:	ff 90       	pop	r15
   1a240:	ef 90       	pop	r14
   1a242:	df 90       	pop	r13
   1a244:	cf 90       	pop	r12
   1a246:	bf 90       	pop	r11
   1a248:	af 90       	pop	r10
   1a24a:	08 95       	ret

0001a24c <arb_sysTimerEnabled>:
   1a24c:	80 91 f0 2b 	lds	r24, 0x2BF0
   1a250:	08 95       	ret

0001a252 <arb_sysTimeNow>:
   1a252:	2f 92       	push	r2
   1a254:	3f 92       	push	r3
   1a256:	4f 92       	push	r4
   1a258:	5f 92       	push	r5
   1a25a:	6f 92       	push	r6
   1a25c:	7f 92       	push	r7
   1a25e:	8f 92       	push	r8
   1a260:	9f 92       	push	r9
   1a262:	af 92       	push	r10
   1a264:	bf 92       	push	r11
   1a266:	cf 92       	push	r12
   1a268:	df 92       	push	r13
   1a26a:	ef 92       	push	r14
   1a26c:	ff 92       	push	r15
   1a26e:	0f 93       	push	r16
   1a270:	1f 93       	push	r17
   1a272:	cf 93       	push	r28
   1a274:	df 93       	push	r29
   1a276:	cd b7       	in	r28, 0x3d	; 61
   1a278:	de b7       	in	r29, 0x3e	; 62
   1a27a:	2c 97       	sbiw	r28, 0x0c	; 12
   1a27c:	cd bf       	out	0x3d, r28	; 61
   1a27e:	de bf       	out	0x3e, r29	; 62
   1a280:	8c 01       	movw	r16, r24
   1a282:	8f b7       	in	r24, 0x3f	; 63
   1a284:	89 83       	std	Y+1, r24	; 0x01
   1a286:	f8 94       	cli
   1a288:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a28c:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a290:	64 e0       	ldi	r22, 0x04	; 4
   1a292:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <hal_getIntStatus>
   1a296:	18 16       	cp	r1, r24
   1a298:	19 06       	cpc	r1, r25
   1a29a:	24 f4       	brge	.+8      	; 0x1a2a4 <arb_sysTimeNow+0x52>
   1a29c:	10 92 2b 22 	sts	0x222B, r1
   1a2a0:	0e 94 6f ce 	call	0x19cde	; 0x19cde <updateSystemTime>
   1a2a4:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a2a8:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a2ac:	0e 94 d6 38 	call	0x71ac	; 0x71ac <hal_getTimerCount>
   1a2b0:	4b 01       	movw	r8, r22
   1a2b2:	aa 24       	eor	r10, r10
   1a2b4:	bb 24       	eor	r11, r11
   1a2b6:	cc 24       	eor	r12, r12
   1a2b8:	dd 24       	eor	r13, r13
   1a2ba:	76 01       	movw	r14, r12
   1a2bc:	30 90 dd 2b 	lds	r3, 0x2BDD
   1a2c0:	90 91 de 2b 	lds	r25, 0x2BDE
   1a2c4:	f0 91 df 2b 	lds	r31, 0x2BDF
   1a2c8:	e0 91 e0 2b 	lds	r30, 0x2BE0
   1a2cc:	50 91 e1 2b 	lds	r21, 0x2BE1
   1a2d0:	40 91 e2 2b 	lds	r20, 0x2BE2
   1a2d4:	30 91 e3 2b 	lds	r19, 0x2BE3
   1a2d8:	20 91 e4 2b 	lds	r18, 0x2BE4
   1a2dc:	38 0c       	add	r3, r8
   1a2de:	a1 e0       	ldi	r26, 0x01	; 1
   1a2e0:	38 14       	cp	r3, r8
   1a2e2:	08 f0       	brcs	.+2      	; 0x1a2e6 <arb_sysTimeNow+0x94>
   1a2e4:	a0 e0       	ldi	r26, 0x00	; 0
   1a2e6:	99 0d       	add	r25, r9
   1a2e8:	81 e0       	ldi	r24, 0x01	; 1
   1a2ea:	99 15       	cp	r25, r9
   1a2ec:	08 f0       	brcs	.+2      	; 0x1a2f0 <arb_sysTimeNow+0x9e>
   1a2ee:	80 e0       	ldi	r24, 0x00	; 0
   1a2f0:	a9 0f       	add	r26, r25
   1a2f2:	aa 83       	std	Y+2, r26	; 0x02
   1a2f4:	a1 e0       	ldi	r26, 0x01	; 1
   1a2f6:	ba 81       	ldd	r27, Y+2	; 0x02
   1a2f8:	b9 17       	cp	r27, r25
   1a2fa:	08 f0       	brcs	.+2      	; 0x1a2fe <arb_sysTimeNow+0xac>
   1a2fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a2fe:	8a 2b       	or	r24, r26
   1a300:	91 e0       	ldi	r25, 0x01	; 1
   1a302:	fa 15       	cp	r31, r10
   1a304:	08 f0       	brcs	.+2      	; 0x1a308 <arb_sysTimeNow+0xb6>
   1a306:	90 e0       	ldi	r25, 0x00	; 0
   1a308:	8f 0f       	add	r24, r31
   1a30a:	8b 83       	std	Y+3, r24	; 0x03
   1a30c:	81 e0       	ldi	r24, 0x01	; 1
   1a30e:	ab 81       	ldd	r26, Y+3	; 0x03
   1a310:	af 17       	cp	r26, r31
   1a312:	08 f0       	brcs	.+2      	; 0x1a316 <arb_sysTimeNow+0xc4>
   1a314:	80 e0       	ldi	r24, 0x00	; 0
   1a316:	98 2b       	or	r25, r24
   1a318:	81 e0       	ldi	r24, 0x01	; 1
   1a31a:	eb 15       	cp	r30, r11
   1a31c:	08 f0       	brcs	.+2      	; 0x1a320 <arb_sysTimeNow+0xce>
   1a31e:	80 e0       	ldi	r24, 0x00	; 0
   1a320:	9e 0f       	add	r25, r30
   1a322:	9c 83       	std	Y+4, r25	; 0x04
   1a324:	91 e0       	ldi	r25, 0x01	; 1
   1a326:	bc 81       	ldd	r27, Y+4	; 0x04
   1a328:	be 17       	cp	r27, r30
   1a32a:	08 f0       	brcs	.+2      	; 0x1a32e <arb_sysTimeNow+0xdc>
   1a32c:	90 e0       	ldi	r25, 0x00	; 0
   1a32e:	89 2b       	or	r24, r25
   1a330:	91 e0       	ldi	r25, 0x01	; 1
   1a332:	5c 15       	cp	r21, r12
   1a334:	08 f0       	brcs	.+2      	; 0x1a338 <arb_sysTimeNow+0xe6>
   1a336:	90 e0       	ldi	r25, 0x00	; 0
   1a338:	85 0f       	add	r24, r21
   1a33a:	8d 83       	std	Y+5, r24	; 0x05
   1a33c:	81 e0       	ldi	r24, 0x01	; 1
   1a33e:	ed 81       	ldd	r30, Y+5	; 0x05
   1a340:	e5 17       	cp	r30, r21
   1a342:	08 f0       	brcs	.+2      	; 0x1a346 <arb_sysTimeNow+0xf4>
   1a344:	80 e0       	ldi	r24, 0x00	; 0
   1a346:	98 2b       	or	r25, r24
   1a348:	81 e0       	ldi	r24, 0x01	; 1
   1a34a:	4d 15       	cp	r20, r13
   1a34c:	08 f0       	brcs	.+2      	; 0x1a350 <arb_sysTimeNow+0xfe>
   1a34e:	80 e0       	ldi	r24, 0x00	; 0
   1a350:	94 0f       	add	r25, r20
   1a352:	9e 83       	std	Y+6, r25	; 0x06
   1a354:	91 e0       	ldi	r25, 0x01	; 1
   1a356:	fe 81       	ldd	r31, Y+6	; 0x06
   1a358:	f4 17       	cp	r31, r20
   1a35a:	08 f0       	brcs	.+2      	; 0x1a35e <arb_sysTimeNow+0x10c>
   1a35c:	90 e0       	ldi	r25, 0x00	; 0
   1a35e:	89 2b       	or	r24, r25
   1a360:	91 e0       	ldi	r25, 0x01	; 1
   1a362:	3e 15       	cp	r19, r14
   1a364:	08 f0       	brcs	.+2      	; 0x1a368 <arb_sysTimeNow+0x116>
   1a366:	90 e0       	ldi	r25, 0x00	; 0
   1a368:	83 0f       	add	r24, r19
   1a36a:	8f 83       	std	Y+7, r24	; 0x07
   1a36c:	81 e0       	ldi	r24, 0x01	; 1
   1a36e:	4f 81       	ldd	r20, Y+7	; 0x07
   1a370:	43 17       	cp	r20, r19
   1a372:	08 f0       	brcs	.+2      	; 0x1a376 <arb_sysTimeNow+0x124>
   1a374:	80 e0       	ldi	r24, 0x00	; 0
   1a376:	29 2e       	mov	r2, r25
   1a378:	28 2a       	or	r2, r24
   1a37a:	22 0e       	add	r2, r18
   1a37c:	50 91 e9 2b 	lds	r21, 0x2BE9
   1a380:	58 87       	std	Y+8, r21	; 0x08
   1a382:	80 91 e8 2b 	lds	r24, 0x2BE8
   1a386:	89 87       	std	Y+9, r24	; 0x09
   1a388:	90 91 e7 2b 	lds	r25, 0x2BE7
   1a38c:	9a 87       	std	Y+10, r25	; 0x0a
   1a38e:	a0 91 e5 2b 	lds	r26, 0x2BE5
   1a392:	b0 91 e6 2b 	lds	r27, 0x2BE6
   1a396:	ab 87       	std	Y+11, r26	; 0x0b
   1a398:	bc 87       	std	Y+12, r27	; 0x0c
   1a39a:	cb 01       	movw	r24, r22
   1a39c:	a0 e0       	ldi	r26, 0x00	; 0
   1a39e:	b0 e0       	ldi	r27, 0x00	; 0
   1a3a0:	88 0f       	add	r24, r24
   1a3a2:	99 1f       	adc	r25, r25
   1a3a4:	aa 1f       	adc	r26, r26
   1a3a6:	bb 1f       	adc	r27, r27
   1a3a8:	40 90 ea 2b 	lds	r4, 0x2BEA
   1a3ac:	50 90 eb 2b 	lds	r5, 0x2BEB
   1a3b0:	60 90 ec 2b 	lds	r6, 0x2BEC
   1a3b4:	70 90 ed 2b 	lds	r7, 0x2BED
   1a3b8:	48 0e       	add	r4, r24
   1a3ba:	59 1e       	adc	r5, r25
   1a3bc:	6a 1e       	adc	r6, r26
   1a3be:	7b 1e       	adc	r7, r27
   1a3c0:	bc 01       	movw	r22, r24
   1a3c2:	cd 01       	movw	r24, r26
   1a3c4:	28 ee       	ldi	r18, 0xE8	; 232
   1a3c6:	33 e0       	ldi	r19, 0x03	; 3
   1a3c8:	40 e0       	ldi	r20, 0x00	; 0
   1a3ca:	50 e0       	ldi	r21, 0x00	; 0
   1a3cc:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   1a3d0:	49 01       	movw	r8, r18
   1a3d2:	5a 01       	movw	r10, r20
   1a3d4:	cc 24       	eor	r12, r12
   1a3d6:	dd 24       	eor	r13, r13
   1a3d8:	76 01       	movw	r14, r12
   1a3da:	80 91 d5 2b 	lds	r24, 0x2BD5
   1a3de:	20 91 d6 2b 	lds	r18, 0x2BD6
   1a3e2:	90 91 d7 2b 	lds	r25, 0x2BD7
   1a3e6:	f0 91 d8 2b 	lds	r31, 0x2BD8
   1a3ea:	50 91 d9 2b 	lds	r21, 0x2BD9
   1a3ee:	40 91 da 2b 	lds	r20, 0x2BDA
   1a3f2:	30 91 db 2b 	lds	r19, 0x2BDB
   1a3f6:	a0 91 dc 2b 	lds	r26, 0x2BDC
   1a3fa:	88 0d       	add	r24, r8
   1a3fc:	e1 e0       	ldi	r30, 0x01	; 1
   1a3fe:	88 15       	cp	r24, r8
   1a400:	08 f0       	brcs	.+2      	; 0x1a404 <arb_sysTimeNow+0x1b2>
   1a402:	e0 e0       	ldi	r30, 0x00	; 0
   1a404:	29 0d       	add	r18, r9
   1a406:	71 e0       	ldi	r23, 0x01	; 1
   1a408:	29 15       	cp	r18, r9
   1a40a:	08 f0       	brcs	.+2      	; 0x1a40e <arb_sysTimeNow+0x1bc>
   1a40c:	70 e0       	ldi	r23, 0x00	; 0
   1a40e:	e2 0f       	add	r30, r18
   1a410:	61 e0       	ldi	r22, 0x01	; 1
   1a412:	e2 17       	cp	r30, r18
   1a414:	08 f0       	brcs	.+2      	; 0x1a418 <arb_sysTimeNow+0x1c6>
   1a416:	60 e0       	ldi	r22, 0x00	; 0
   1a418:	76 2b       	or	r23, r22
   1a41a:	9a 0d       	add	r25, r10
   1a41c:	61 e0       	ldi	r22, 0x01	; 1
   1a41e:	9a 15       	cp	r25, r10
   1a420:	08 f0       	brcs	.+2      	; 0x1a424 <arb_sysTimeNow+0x1d2>
   1a422:	60 e0       	ldi	r22, 0x00	; 0
   1a424:	79 0f       	add	r23, r25
   1a426:	21 e0       	ldi	r18, 0x01	; 1
   1a428:	79 17       	cp	r23, r25
   1a42a:	08 f0       	brcs	.+2      	; 0x1a42e <arb_sysTimeNow+0x1dc>
   1a42c:	20 e0       	ldi	r18, 0x00	; 0
   1a42e:	62 2b       	or	r22, r18
   1a430:	2b 2d       	mov	r18, r11
   1a432:	2f 0f       	add	r18, r31
   1a434:	91 e0       	ldi	r25, 0x01	; 1
   1a436:	2b 15       	cp	r18, r11
   1a438:	08 f0       	brcs	.+2      	; 0x1a43c <arb_sysTimeNow+0x1ea>
   1a43a:	90 e0       	ldi	r25, 0x00	; 0
   1a43c:	62 0f       	add	r22, r18
   1a43e:	f1 e0       	ldi	r31, 0x01	; 1
   1a440:	62 17       	cp	r22, r18
   1a442:	08 f0       	brcs	.+2      	; 0x1a446 <arb_sysTimeNow+0x1f4>
   1a444:	f0 e0       	ldi	r31, 0x00	; 0
   1a446:	9f 2b       	or	r25, r31
   1a448:	21 e0       	ldi	r18, 0x01	; 1
   1a44a:	5c 15       	cp	r21, r12
   1a44c:	08 f0       	brcs	.+2      	; 0x1a450 <arb_sysTimeNow+0x1fe>
   1a44e:	20 e0       	ldi	r18, 0x00	; 0
   1a450:	f9 2f       	mov	r31, r25
   1a452:	f5 0f       	add	r31, r21
   1a454:	91 e0       	ldi	r25, 0x01	; 1
   1a456:	f5 17       	cp	r31, r21
   1a458:	08 f0       	brcs	.+2      	; 0x1a45c <arb_sysTimeNow+0x20a>
   1a45a:	90 e0       	ldi	r25, 0x00	; 0
   1a45c:	29 2b       	or	r18, r25
   1a45e:	91 e0       	ldi	r25, 0x01	; 1
   1a460:	4d 15       	cp	r20, r13
   1a462:	08 f0       	brcs	.+2      	; 0x1a466 <arb_sysTimeNow+0x214>
   1a464:	90 e0       	ldi	r25, 0x00	; 0
   1a466:	24 0f       	add	r18, r20
   1a468:	51 e0       	ldi	r21, 0x01	; 1
   1a46a:	24 17       	cp	r18, r20
   1a46c:	08 f0       	brcs	.+2      	; 0x1a470 <arb_sysTimeNow+0x21e>
   1a46e:	50 e0       	ldi	r21, 0x00	; 0
   1a470:	95 2b       	or	r25, r21
   1a472:	41 e0       	ldi	r20, 0x01	; 1
   1a474:	3e 15       	cp	r19, r14
   1a476:	08 f0       	brcs	.+2      	; 0x1a47a <arb_sysTimeNow+0x228>
   1a478:	40 e0       	ldi	r20, 0x00	; 0
   1a47a:	93 0f       	add	r25, r19
   1a47c:	51 e0       	ldi	r21, 0x01	; 1
   1a47e:	93 17       	cp	r25, r19
   1a480:	08 f0       	brcs	.+2      	; 0x1a484 <arb_sysTimeNow+0x232>
   1a482:	50 e0       	ldi	r21, 0x00	; 0
   1a484:	45 2b       	or	r20, r21
   1a486:	4a 0f       	add	r20, r26
   1a488:	39 81       	ldd	r19, Y+1	; 0x01
   1a48a:	3f bf       	out	0x3f, r19	; 63
   1a48c:	d8 01       	movw	r26, r16
   1a48e:	8c 93       	st	X, r24
   1a490:	11 96       	adiw	r26, 0x01	; 1
   1a492:	ec 93       	st	X, r30
   1a494:	11 97       	sbiw	r26, 0x01	; 1
   1a496:	12 96       	adiw	r26, 0x02	; 2
   1a498:	7c 93       	st	X, r23
   1a49a:	12 97       	sbiw	r26, 0x02	; 2
   1a49c:	13 96       	adiw	r26, 0x03	; 3
   1a49e:	6c 93       	st	X, r22
   1a4a0:	13 97       	sbiw	r26, 0x03	; 3
   1a4a2:	14 96       	adiw	r26, 0x04	; 4
   1a4a4:	fc 93       	st	X, r31
   1a4a6:	14 97       	sbiw	r26, 0x04	; 4
   1a4a8:	15 96       	adiw	r26, 0x05	; 5
   1a4aa:	2c 93       	st	X, r18
   1a4ac:	15 97       	sbiw	r26, 0x05	; 5
   1a4ae:	16 96       	adiw	r26, 0x06	; 6
   1a4b0:	9c 93       	st	X, r25
   1a4b2:	16 97       	sbiw	r26, 0x06	; 6
   1a4b4:	17 96       	adiw	r26, 0x07	; 7
   1a4b6:	4c 93       	st	X, r20
   1a4b8:	17 97       	sbiw	r26, 0x07	; 7
   1a4ba:	18 96       	adiw	r26, 0x08	; 8
   1a4bc:	3c 92       	st	X, r3
   1a4be:	18 97       	sbiw	r26, 0x08	; 8
   1a4c0:	ea 81       	ldd	r30, Y+2	; 0x02
   1a4c2:	19 96       	adiw	r26, 0x09	; 9
   1a4c4:	ec 93       	st	X, r30
   1a4c6:	19 97       	sbiw	r26, 0x09	; 9
   1a4c8:	fb 81       	ldd	r31, Y+3	; 0x03
   1a4ca:	1a 96       	adiw	r26, 0x0a	; 10
   1a4cc:	fc 93       	st	X, r31
   1a4ce:	1a 97       	sbiw	r26, 0x0a	; 10
   1a4d0:	4c 81       	ldd	r20, Y+4	; 0x04
   1a4d2:	1b 96       	adiw	r26, 0x0b	; 11
   1a4d4:	4c 93       	st	X, r20
   1a4d6:	1b 97       	sbiw	r26, 0x0b	; 11
   1a4d8:	5d 81       	ldd	r21, Y+5	; 0x05
   1a4da:	1c 96       	adiw	r26, 0x0c	; 12
   1a4dc:	5c 93       	st	X, r21
   1a4de:	1c 97       	sbiw	r26, 0x0c	; 12
   1a4e0:	8e 81       	ldd	r24, Y+6	; 0x06
   1a4e2:	1d 96       	adiw	r26, 0x0d	; 13
   1a4e4:	8c 93       	st	X, r24
   1a4e6:	1d 97       	sbiw	r26, 0x0d	; 13
   1a4e8:	9f 81       	ldd	r25, Y+7	; 0x07
   1a4ea:	1e 96       	adiw	r26, 0x0e	; 14
   1a4ec:	9c 93       	st	X, r25
   1a4ee:	1e 97       	sbiw	r26, 0x0e	; 14
   1a4f0:	1f 96       	adiw	r26, 0x0f	; 15
   1a4f2:	2c 92       	st	X, r2
   1a4f4:	1f 97       	sbiw	r26, 0x0f	; 15
   1a4f6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4f8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4fa:	50 96       	adiw	r26, 0x10	; 16
   1a4fc:	ed 93       	st	X+, r30
   1a4fe:	fc 93       	st	X, r31
   1a500:	51 97       	sbiw	r26, 0x11	; 17
   1a502:	fa 85       	ldd	r31, Y+10	; 0x0a
   1a504:	52 96       	adiw	r26, 0x12	; 18
   1a506:	fc 93       	st	X, r31
   1a508:	52 97       	sbiw	r26, 0x12	; 18
   1a50a:	49 85       	ldd	r20, Y+9	; 0x09
   1a50c:	53 96       	adiw	r26, 0x13	; 19
   1a50e:	4c 93       	st	X, r20
   1a510:	53 97       	sbiw	r26, 0x13	; 19
   1a512:	58 85       	ldd	r21, Y+8	; 0x08
   1a514:	54 96       	adiw	r26, 0x14	; 20
   1a516:	5c 93       	st	X, r21
   1a518:	54 97       	sbiw	r26, 0x14	; 20
   1a51a:	55 96       	adiw	r26, 0x15	; 21
   1a51c:	4d 92       	st	X+, r4
   1a51e:	5d 92       	st	X+, r5
   1a520:	6d 92       	st	X+, r6
   1a522:	7c 92       	st	X, r7
   1a524:	58 97       	sbiw	r26, 0x18	; 24
   1a526:	c8 01       	movw	r24, r16
   1a528:	2c 96       	adiw	r28, 0x0c	; 12
   1a52a:	cd bf       	out	0x3d, r28	; 61
   1a52c:	de bf       	out	0x3e, r29	; 62
   1a52e:	df 91       	pop	r29
   1a530:	cf 91       	pop	r28
   1a532:	1f 91       	pop	r17
   1a534:	0f 91       	pop	r16
   1a536:	ff 90       	pop	r15
   1a538:	ef 90       	pop	r14
   1a53a:	df 90       	pop	r13
   1a53c:	cf 90       	pop	r12
   1a53e:	bf 90       	pop	r11
   1a540:	af 90       	pop	r10
   1a542:	9f 90       	pop	r9
   1a544:	8f 90       	pop	r8
   1a546:	7f 90       	pop	r7
   1a548:	6f 90       	pop	r6
   1a54a:	5f 90       	pop	r5
   1a54c:	4f 90       	pop	r4
   1a54e:	3f 90       	pop	r3
   1a550:	2f 90       	pop	r2
   1a552:	08 95       	ret

0001a554 <arb_setSysTime>:
   1a554:	cf 93       	push	r28
   1a556:	df 93       	push	r29
   1a558:	0f 92       	push	r0
   1a55a:	cd b7       	in	r28, 0x3d	; 61
   1a55c:	de b7       	in	r29, 0x3e	; 62
   1a55e:	9f b7       	in	r25, 0x3f	; 63
   1a560:	99 83       	std	Y+1, r25	; 0x01
   1a562:	f8 94       	cli
   1a564:	10 92 dd 2b 	sts	0x2BDD, r1
   1a568:	10 92 de 2b 	sts	0x2BDE, r1
   1a56c:	10 92 df 2b 	sts	0x2BDF, r1
   1a570:	10 92 e0 2b 	sts	0x2BE0, r1
   1a574:	10 92 e1 2b 	sts	0x2BE1, r1
   1a578:	10 92 e2 2b 	sts	0x2BE2, r1
   1a57c:	10 92 e3 2b 	sts	0x2BE3, r1
   1a580:	10 92 e4 2b 	sts	0x2BE4, r1
   1a584:	e5 ed       	ldi	r30, 0xD5	; 213
   1a586:	fb e2       	ldi	r31, 0x2B	; 43
   1a588:	10 82       	st	Z, r1
   1a58a:	11 82       	std	Z+1, r1	; 0x01
   1a58c:	12 82       	std	Z+2, r1	; 0x02
   1a58e:	13 82       	std	Z+3, r1	; 0x03
   1a590:	14 82       	std	Z+4, r1	; 0x04
   1a592:	15 82       	std	Z+5, r1	; 0x05
   1a594:	16 82       	std	Z+6, r1	; 0x06
   1a596:	17 82       	std	Z+7, r1	; 0x07
   1a598:	44 8b       	std	Z+20, r20	; 0x14
   1a59a:	63 8b       	std	Z+19, r22	; 0x13
   1a59c:	82 8b       	std	Z+18, r24	; 0x12
   1a59e:	10 8a       	std	Z+16, r1	; 0x10
   1a5a0:	11 8a       	std	Z+17, r1	; 0x11
   1a5a2:	89 81       	ldd	r24, Y+1	; 0x01
   1a5a4:	8f bf       	out	0x3f, r24	; 63
   1a5a6:	0f 90       	pop	r0
   1a5a8:	df 91       	pop	r29
   1a5aa:	cf 91       	pop	r28
   1a5ac:	08 95       	ret

0001a5ae <arb_resetSysTime>:
   1a5ae:	10 92 dd 2b 	sts	0x2BDD, r1
   1a5b2:	10 92 de 2b 	sts	0x2BDE, r1
   1a5b6:	10 92 df 2b 	sts	0x2BDF, r1
   1a5ba:	10 92 e0 2b 	sts	0x2BE0, r1
   1a5be:	10 92 e1 2b 	sts	0x2BE1, r1
   1a5c2:	10 92 e2 2b 	sts	0x2BE2, r1
   1a5c6:	10 92 e3 2b 	sts	0x2BE3, r1
   1a5ca:	10 92 e4 2b 	sts	0x2BE4, r1
   1a5ce:	e5 ed       	ldi	r30, 0xD5	; 213
   1a5d0:	fb e2       	ldi	r31, 0x2B	; 43
   1a5d2:	10 82       	st	Z, r1
   1a5d4:	11 82       	std	Z+1, r1	; 0x01
   1a5d6:	12 82       	std	Z+2, r1	; 0x02
   1a5d8:	13 82       	std	Z+3, r1	; 0x03
   1a5da:	14 82       	std	Z+4, r1	; 0x04
   1a5dc:	15 82       	std	Z+5, r1	; 0x05
   1a5de:	16 82       	std	Z+6, r1	; 0x06
   1a5e0:	17 82       	std	Z+7, r1	; 0x07
   1a5e2:	14 8a       	std	Z+20, r1	; 0x14
   1a5e4:	13 8a       	std	Z+19, r1	; 0x13
   1a5e6:	12 8a       	std	Z+18, r1	; 0x12
   1a5e8:	10 8a       	std	Z+16, r1	; 0x10
   1a5ea:	11 8a       	std	Z+17, r1	; 0x11
   1a5ec:	08 95       	ret

0001a5ee <arb_sysTimerStart>:
   1a5ee:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a5f2:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a5f6:	0e 94 57 38 	call	0x70ae	; 0x70ae <hal_startTimer>
   1a5fa:	87 fd       	sbrc	r24, 7
   1a5fc:	07 c0       	rjmp	.+14     	; 0x1a60c <arb_sysTimerStart+0x1e>
   1a5fe:	81 e0       	ldi	r24, 0x01	; 1
   1a600:	80 93 f0 2b 	sts	0x2BF0, r24
   1a604:	80 93 2b 22 	sts	0x222B, r24
   1a608:	80 e0       	ldi	r24, 0x00	; 0
   1a60a:	08 95       	ret
   1a60c:	86 ef       	ldi	r24, 0xF6	; 246
   1a60e:	08 95       	ret

0001a610 <arb_sysTimerInit>:
   1a610:	cf 93       	push	r28
   1a612:	df 93       	push	r29
   1a614:	cd b7       	in	r28, 0x3d	; 61
   1a616:	de b7       	in	r29, 0x3e	; 62
   1a618:	27 97       	sbiw	r28, 0x07	; 7
   1a61a:	cd bf       	out	0x3d, r28	; 61
   1a61c:	de bf       	out	0x3e, r29	; 62
   1a61e:	8f 83       	std	Y+7, r24	; 0x07
   1a620:	0e 94 d7 d2 	call	0x1a5ae	; 0x1a5ae <arb_resetSysTime>
   1a624:	8f 81       	ldd	r24, Y+7	; 0x07
   1a626:	0e 94 7d 35 	call	0x6afa	; 0x6afa <hal_requestTimer>
   1a62a:	80 93 ee 2b 	sts	0x2BEE, r24
   1a62e:	90 93 ef 2b 	sts	0x2BEF, r25
   1a632:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a636:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a63a:	97 fd       	sbrc	r25, 7
   1a63c:	23 c0       	rjmp	.+70     	; 0x1a684 <arb_sysTimerInit+0x74>
   1a63e:	19 82       	std	Y+1, r1	; 0x01
   1a640:	1a 82       	std	Y+2, r1	; 0x02
   1a642:	8a e0       	ldi	r24, 0x0A	; 10
   1a644:	97 ed       	ldi	r25, 0xD7	; 215
   1a646:	a3 e2       	ldi	r26, 0x23	; 35
   1a648:	bc e3       	ldi	r27, 0x3C	; 60
   1a64a:	8b 83       	std	Y+3, r24	; 0x03
   1a64c:	9c 83       	std	Y+4, r25	; 0x04
   1a64e:	ad 83       	std	Y+5, r26	; 0x05
   1a650:	be 83       	std	Y+6, r27	; 0x06
   1a652:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a656:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a65a:	20 e0       	ldi	r18, 0x00	; 0
   1a65c:	30 e0       	ldi	r19, 0x00	; 0
   1a65e:	4b 81       	ldd	r20, Y+3	; 0x03
   1a660:	5c 81       	ldd	r21, Y+4	; 0x04
   1a662:	6d 81       	ldd	r22, Y+5	; 0x05
   1a664:	7e 81       	ldd	r23, Y+6	; 0x06
   1a666:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <hal_configureTimer>
   1a66a:	87 fd       	sbrc	r24, 7
   1a66c:	0b c0       	rjmp	.+22     	; 0x1a684 <arb_sysTimerInit+0x74>
   1a66e:	80 91 ee 2b 	lds	r24, 0x2BEE
   1a672:	90 91 ef 2b 	lds	r25, 0x2BEF
   1a676:	64 e0       	ldi	r22, 0x04	; 4
   1a678:	4f eb       	ldi	r20, 0xBF	; 191
   1a67a:	5f ec       	ldi	r21, 0xCF	; 207
   1a67c:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <hal_requestTimerInterrupt>
   1a680:	87 ff       	sbrs	r24, 7
   1a682:	04 c0       	rjmp	.+8      	; 0x1a68c <arb_sysTimerInit+0x7c>
   1a684:	80 e0       	ldi	r24, 0x00	; 0
   1a686:	90 e0       	ldi	r25, 0x00	; 0
   1a688:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <exit>
   1a68c:	27 96       	adiw	r28, 0x07	; 7
   1a68e:	cd bf       	out	0x3d, r28	; 61
   1a690:	de bf       	out	0x3e, r29	; 62
   1a692:	df 91       	pop	r29
   1a694:	cf 91       	pop	r28
   1a696:	08 95       	ret

0001a698 <arb_yieldFromSleepIntsOn>:
   1a698:	0f 92       	push	r0
   1a69a:	0f b6       	in	r0, 0x3f	; 63
   1a69c:	0f 93       	push	r16
   1a69e:	00 2d       	mov	r16, r0
   1a6a0:	00 68       	ori	r16, 0x80	; 128
   1a6a2:	00 2e       	mov	r0, r16
   1a6a4:	0f 91       	pop	r16
   1a6a6:	0f 92       	push	r0
   1a6a8:	1f 92       	push	r1
   1a6aa:	11 24       	eor	r1, r1
   1a6ac:	2f 92       	push	r2
   1a6ae:	3f 92       	push	r3
   1a6b0:	4f 92       	push	r4
   1a6b2:	5f 92       	push	r5
   1a6b4:	6f 92       	push	r6
   1a6b6:	7f 92       	push	r7
   1a6b8:	8f 92       	push	r8
   1a6ba:	9f 92       	push	r9
   1a6bc:	af 92       	push	r10
   1a6be:	bf 92       	push	r11
   1a6c0:	cf 92       	push	r12
   1a6c2:	df 92       	push	r13
   1a6c4:	ef 92       	push	r14
   1a6c6:	ff 92       	push	r15
   1a6c8:	0f 93       	push	r16
   1a6ca:	1f 93       	push	r17
   1a6cc:	2f 93       	push	r18
   1a6ce:	3f 93       	push	r19
   1a6d0:	4f 93       	push	r20
   1a6d2:	5f 93       	push	r21
   1a6d4:	6f 93       	push	r22
   1a6d6:	7f 93       	push	r23
   1a6d8:	8f 93       	push	r24
   1a6da:	9f 93       	push	r25
   1a6dc:	af 93       	push	r26
   1a6de:	bf 93       	push	r27
   1a6e0:	cf 93       	push	r28
   1a6e2:	df 93       	push	r29
   1a6e4:	ef 93       	push	r30
   1a6e6:	ff 93       	push	r31
   1a6e8:	e0 91 2c 22 	lds	r30, 0x222C
   1a6ec:	f0 91 2d 22 	lds	r31, 0x222D
   1a6f0:	06 80       	ldd	r0, Z+6	; 0x06
   1a6f2:	f7 81       	ldd	r31, Z+7	; 0x07
   1a6f4:	e0 2d       	mov	r30, r0
   1a6f6:	01 90       	ld	r0, Z+
   1a6f8:	f0 81       	ld	r31, Z
   1a6fa:	e0 2d       	mov	r30, r0
   1a6fc:	e0 93 38 2c 	sts	0x2C38, r30
   1a700:	f0 93 39 2c 	sts	0x2C39, r31
   1a704:	2d b7       	in	r18, 0x3d	; 61
   1a706:	30 e0       	ldi	r19, 0x00	; 0
   1a708:	21 87       	std	Z+9, r18	; 0x09
   1a70a:	32 87       	std	Z+10, r19	; 0x0a
   1a70c:	4e b7       	in	r20, 0x3e	; 62
   1a70e:	94 2f       	mov	r25, r20
   1a710:	80 e0       	ldi	r24, 0x00	; 0
   1a712:	82 2b       	or	r24, r18
   1a714:	93 2b       	or	r25, r19
   1a716:	81 87       	std	Z+9, r24	; 0x09
   1a718:	92 87       	std	Z+10, r25	; 0x0a
   1a71a:	8f ef       	ldi	r24, 0xFF	; 255
   1a71c:	8d bf       	out	0x3d, r24	; 61
   1a71e:	8f e3       	ldi	r24, 0x3F	; 63
   1a720:	8e bf       	out	0x3e, r24	; 62
   1a722:	c0 91 3d 00 	lds	r28, 0x003D
   1a726:	d0 91 3e 00 	lds	r29, 0x003E
   1a72a:	e0 91 2c 22 	lds	r30, 0x222C
   1a72e:	f0 91 2d 22 	lds	r31, 0x222D
   1a732:	06 80       	ldd	r0, Z+6	; 0x06
   1a734:	f7 81       	ldd	r31, Z+7	; 0x07
   1a736:	e0 2d       	mov	r30, r0
   1a738:	01 90       	ld	r0, Z+
   1a73a:	f0 81       	ld	r31, Z
   1a73c:	e0 2d       	mov	r30, r0
   1a73e:	e0 93 f3 2b 	sts	0x2BF3, r30
   1a742:	f0 93 f4 2b 	sts	0x2BF4, r31
   1a746:	03 84       	ldd	r0, Z+11	; 0x0b
   1a748:	f4 85       	ldd	r31, Z+12	; 0x0c
   1a74a:	e0 2d       	mov	r30, r0
   1a74c:	80 81       	ld	r24, Z
   1a74e:	91 81       	ldd	r25, Z+1	; 0x01
   1a750:	2e ed       	ldi	r18, 0xDE	; 222
   1a752:	8d 3a       	cpi	r24, 0xAD	; 173
   1a754:	92 07       	cpc	r25, r18
   1a756:	11 f0       	breq	.+4      	; 0x1a75c <arb_yieldFromSleepIntsOn+0xc4>
   1a758:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1a75c:	e0 91 36 2c 	lds	r30, 0x2C36
   1a760:	f0 91 37 2c 	lds	r31, 0x2C37
   1a764:	19 95       	eicall
   1a766:	e0 91 2c 22 	lds	r30, 0x222C
   1a76a:	f0 91 2d 22 	lds	r31, 0x222D
   1a76e:	06 80       	ldd	r0, Z+6	; 0x06
   1a770:	f7 81       	ldd	r31, Z+7	; 0x07
   1a772:	e0 2d       	mov	r30, r0
   1a774:	01 90       	ld	r0, Z+
   1a776:	f0 81       	ld	r31, Z
   1a778:	e0 2d       	mov	r30, r0
   1a77a:	e0 93 38 2c 	sts	0x2C38, r30
   1a77e:	f0 93 39 2c 	sts	0x2C39, r31
   1a782:	81 85       	ldd	r24, Z+9	; 0x09
   1a784:	8d bf       	out	0x3d, r24	; 61
   1a786:	82 85       	ldd	r24, Z+10	; 0x0a
   1a788:	8e bf       	out	0x3e, r24	; 62
   1a78a:	ff 91       	pop	r31
   1a78c:	ef 91       	pop	r30
   1a78e:	df 91       	pop	r29
   1a790:	cf 91       	pop	r28
   1a792:	bf 91       	pop	r27
   1a794:	af 91       	pop	r26
   1a796:	9f 91       	pop	r25
   1a798:	8f 91       	pop	r24
   1a79a:	7f 91       	pop	r23
   1a79c:	6f 91       	pop	r22
   1a79e:	5f 91       	pop	r21
   1a7a0:	4f 91       	pop	r20
   1a7a2:	3f 91       	pop	r19
   1a7a4:	2f 91       	pop	r18
   1a7a6:	1f 91       	pop	r17
   1a7a8:	0f 91       	pop	r16
   1a7aa:	ff 90       	pop	r15
   1a7ac:	ef 90       	pop	r14
   1a7ae:	df 90       	pop	r13
   1a7b0:	cf 90       	pop	r12
   1a7b2:	bf 90       	pop	r11
   1a7b4:	af 90       	pop	r10
   1a7b6:	9f 90       	pop	r9
   1a7b8:	8f 90       	pop	r8
   1a7ba:	7f 90       	pop	r7
   1a7bc:	6f 90       	pop	r6
   1a7be:	5f 90       	pop	r5
   1a7c0:	4f 90       	pop	r4
   1a7c2:	3f 90       	pop	r3
   1a7c4:	2f 90       	pop	r2
   1a7c6:	1f 90       	pop	r1
   1a7c8:	0f 90       	pop	r0
   1a7ca:	0f be       	out	0x3f, r0	; 63
   1a7cc:	0f 90       	pop	r0
   1a7ce:	08 95       	ret

0001a7d0 <arb_yieldFromSleepIntsOff>:
   1a7d0:	0f 92       	push	r0
   1a7d2:	0f b6       	in	r0, 0x3f	; 63
   1a7d4:	0f 92       	push	r0
   1a7d6:	1f 92       	push	r1
   1a7d8:	11 24       	eor	r1, r1
   1a7da:	2f 92       	push	r2
   1a7dc:	3f 92       	push	r3
   1a7de:	4f 92       	push	r4
   1a7e0:	5f 92       	push	r5
   1a7e2:	6f 92       	push	r6
   1a7e4:	7f 92       	push	r7
   1a7e6:	8f 92       	push	r8
   1a7e8:	9f 92       	push	r9
   1a7ea:	af 92       	push	r10
   1a7ec:	bf 92       	push	r11
   1a7ee:	cf 92       	push	r12
   1a7f0:	df 92       	push	r13
   1a7f2:	ef 92       	push	r14
   1a7f4:	ff 92       	push	r15
   1a7f6:	0f 93       	push	r16
   1a7f8:	1f 93       	push	r17
   1a7fa:	2f 93       	push	r18
   1a7fc:	3f 93       	push	r19
   1a7fe:	4f 93       	push	r20
   1a800:	5f 93       	push	r21
   1a802:	6f 93       	push	r22
   1a804:	7f 93       	push	r23
   1a806:	8f 93       	push	r24
   1a808:	9f 93       	push	r25
   1a80a:	af 93       	push	r26
   1a80c:	bf 93       	push	r27
   1a80e:	cf 93       	push	r28
   1a810:	df 93       	push	r29
   1a812:	ef 93       	push	r30
   1a814:	ff 93       	push	r31
   1a816:	e0 91 2c 22 	lds	r30, 0x222C
   1a81a:	f0 91 2d 22 	lds	r31, 0x222D
   1a81e:	06 80       	ldd	r0, Z+6	; 0x06
   1a820:	f7 81       	ldd	r31, Z+7	; 0x07
   1a822:	e0 2d       	mov	r30, r0
   1a824:	01 90       	ld	r0, Z+
   1a826:	f0 81       	ld	r31, Z
   1a828:	e0 2d       	mov	r30, r0
   1a82a:	e0 93 38 2c 	sts	0x2C38, r30
   1a82e:	f0 93 39 2c 	sts	0x2C39, r31
   1a832:	2d b7       	in	r18, 0x3d	; 61
   1a834:	30 e0       	ldi	r19, 0x00	; 0
   1a836:	21 87       	std	Z+9, r18	; 0x09
   1a838:	32 87       	std	Z+10, r19	; 0x0a
   1a83a:	4e b7       	in	r20, 0x3e	; 62
   1a83c:	94 2f       	mov	r25, r20
   1a83e:	80 e0       	ldi	r24, 0x00	; 0
   1a840:	82 2b       	or	r24, r18
   1a842:	93 2b       	or	r25, r19
   1a844:	81 87       	std	Z+9, r24	; 0x09
   1a846:	92 87       	std	Z+10, r25	; 0x0a
   1a848:	8f ef       	ldi	r24, 0xFF	; 255
   1a84a:	8d bf       	out	0x3d, r24	; 61
   1a84c:	8f e3       	ldi	r24, 0x3F	; 63
   1a84e:	8e bf       	out	0x3e, r24	; 62
   1a850:	c0 91 3d 00 	lds	r28, 0x003D
   1a854:	d0 91 3e 00 	lds	r29, 0x003E
   1a858:	e0 91 2c 22 	lds	r30, 0x222C
   1a85c:	f0 91 2d 22 	lds	r31, 0x222D
   1a860:	06 80       	ldd	r0, Z+6	; 0x06
   1a862:	f7 81       	ldd	r31, Z+7	; 0x07
   1a864:	e0 2d       	mov	r30, r0
   1a866:	01 90       	ld	r0, Z+
   1a868:	f0 81       	ld	r31, Z
   1a86a:	e0 2d       	mov	r30, r0
   1a86c:	e0 93 f3 2b 	sts	0x2BF3, r30
   1a870:	f0 93 f4 2b 	sts	0x2BF4, r31
   1a874:	03 84       	ldd	r0, Z+11	; 0x0b
   1a876:	f4 85       	ldd	r31, Z+12	; 0x0c
   1a878:	e0 2d       	mov	r30, r0
   1a87a:	80 81       	ld	r24, Z
   1a87c:	91 81       	ldd	r25, Z+1	; 0x01
   1a87e:	2e ed       	ldi	r18, 0xDE	; 222
   1a880:	8d 3a       	cpi	r24, 0xAD	; 173
   1a882:	92 07       	cpc	r25, r18
   1a884:	11 f0       	breq	.+4      	; 0x1a88a <arb_yieldFromSleepIntsOff+0xba>
   1a886:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1a88a:	e0 91 36 2c 	lds	r30, 0x2C36
   1a88e:	f0 91 37 2c 	lds	r31, 0x2C37
   1a892:	19 95       	eicall
   1a894:	e0 91 2c 22 	lds	r30, 0x222C
   1a898:	f0 91 2d 22 	lds	r31, 0x222D
   1a89c:	06 80       	ldd	r0, Z+6	; 0x06
   1a89e:	f7 81       	ldd	r31, Z+7	; 0x07
   1a8a0:	e0 2d       	mov	r30, r0
   1a8a2:	01 90       	ld	r0, Z+
   1a8a4:	f0 81       	ld	r31, Z
   1a8a6:	e0 2d       	mov	r30, r0
   1a8a8:	e0 93 38 2c 	sts	0x2C38, r30
   1a8ac:	f0 93 39 2c 	sts	0x2C39, r31
   1a8b0:	81 85       	ldd	r24, Z+9	; 0x09
   1a8b2:	8d bf       	out	0x3d, r24	; 61
   1a8b4:	82 85       	ldd	r24, Z+10	; 0x0a
   1a8b6:	8e bf       	out	0x3e, r24	; 62
   1a8b8:	ff 91       	pop	r31
   1a8ba:	ef 91       	pop	r30
   1a8bc:	df 91       	pop	r29
   1a8be:	cf 91       	pop	r28
   1a8c0:	bf 91       	pop	r27
   1a8c2:	af 91       	pop	r26
   1a8c4:	9f 91       	pop	r25
   1a8c6:	8f 91       	pop	r24
   1a8c8:	7f 91       	pop	r23
   1a8ca:	6f 91       	pop	r22
   1a8cc:	5f 91       	pop	r21
   1a8ce:	4f 91       	pop	r20
   1a8d0:	3f 91       	pop	r19
   1a8d2:	2f 91       	pop	r18
   1a8d4:	1f 91       	pop	r17
   1a8d6:	0f 91       	pop	r16
   1a8d8:	ff 90       	pop	r15
   1a8da:	ef 90       	pop	r14
   1a8dc:	df 90       	pop	r13
   1a8de:	cf 90       	pop	r12
   1a8e0:	bf 90       	pop	r11
   1a8e2:	af 90       	pop	r10
   1a8e4:	9f 90       	pop	r9
   1a8e6:	8f 90       	pop	r8
   1a8e8:	7f 90       	pop	r7
   1a8ea:	6f 90       	pop	r6
   1a8ec:	5f 90       	pop	r5
   1a8ee:	4f 90       	pop	r4
   1a8f0:	3f 90       	pop	r3
   1a8f2:	2f 90       	pop	r2
   1a8f4:	1f 90       	pop	r1
   1a8f6:	0f 90       	pop	r0
   1a8f8:	0f be       	out	0x3f, r0	; 63
   1a8fa:	0f 90       	pop	r0
   1a8fc:	08 95       	ret

0001a8fe <arb_updateSleepingThreads>:
   1a8fe:	cf 93       	push	r28
   1a900:	df 93       	push	r29
   1a902:	0f 92       	push	r0
   1a904:	0f 92       	push	r0
   1a906:	cd b7       	in	r28, 0x3d	; 61
   1a908:	de b7       	in	r29, 0x3e	; 62
   1a90a:	e0 91 2c 22 	lds	r30, 0x222C
   1a90e:	f0 91 2d 22 	lds	r31, 0x222D
   1a912:	82 81       	ldd	r24, Z+2	; 0x02
   1a914:	93 81       	ldd	r25, Z+3	; 0x03
   1a916:	e0 91 2c 22 	lds	r30, 0x222C
   1a91a:	f0 91 2d 22 	lds	r31, 0x222D
   1a91e:	15 c0       	rjmp	.+42     	; 0x1a94a <arb_updateSleepingThreads+0x4c>
   1a920:	e9 81       	ldd	r30, Y+1	; 0x01
   1a922:	fa 81       	ldd	r31, Y+2	; 0x02
   1a924:	01 90       	ld	r0, Z+
   1a926:	f0 81       	ld	r31, Z
   1a928:	e0 2d       	mov	r30, r0
   1a92a:	21 81       	ldd	r18, Z+1	; 0x01
   1a92c:	23 30       	cpi	r18, 0x03	; 3
   1a92e:	51 f4       	brne	.+20     	; 0x1a944 <arb_updateSleepingThreads+0x46>
   1a930:	23 81       	ldd	r18, Z+3	; 0x03
   1a932:	34 81       	ldd	r19, Z+4	; 0x04
   1a934:	21 50       	subi	r18, 0x01	; 1
   1a936:	30 40       	sbci	r19, 0x00	; 0
   1a938:	23 83       	std	Z+3, r18	; 0x03
   1a93a:	34 83       	std	Z+4, r19	; 0x04
   1a93c:	21 15       	cp	r18, r1
   1a93e:	31 05       	cpc	r19, r1
   1a940:	09 f4       	brne	.+2      	; 0x1a944 <arb_updateSleepingThreads+0x46>
   1a942:	11 82       	std	Z+1, r1	; 0x01
   1a944:	01 97       	sbiw	r24, 0x01	; 1
   1a946:	e9 81       	ldd	r30, Y+1	; 0x01
   1a948:	fa 81       	ldd	r31, Y+2	; 0x02
   1a94a:	20 85       	ldd	r18, Z+8	; 0x08
   1a94c:	31 85       	ldd	r19, Z+9	; 0x09
   1a94e:	29 83       	std	Y+1, r18	; 0x01
   1a950:	3a 83       	std	Y+2, r19	; 0x02
   1a952:	00 97       	sbiw	r24, 0x00	; 0
   1a954:	29 f7       	brne	.-54     	; 0x1a920 <arb_updateSleepingThreads+0x22>
   1a956:	0f 90       	pop	r0
   1a958:	0f 90       	pop	r0
   1a95a:	df 91       	pop	r29
   1a95c:	cf 91       	pop	r28
   1a95e:	08 95       	ret

0001a960 <arb_sleep>:
   1a960:	0f b6       	in	r0, 0x3f	; 63
   1a962:	07 fe       	sbrs	r0, 7
   1a964:	12 c0       	rjmp	.+36     	; 0x1a98a <arb_sleep+0x2a>
   1a966:	f8 94       	cli
   1a968:	e0 91 2c 22 	lds	r30, 0x222C
   1a96c:	f0 91 2d 22 	lds	r31, 0x222D
   1a970:	06 80       	ldd	r0, Z+6	; 0x06
   1a972:	f7 81       	ldd	r31, Z+7	; 0x07
   1a974:	e0 2d       	mov	r30, r0
   1a976:	01 90       	ld	r0, Z+
   1a978:	f0 81       	ld	r31, Z
   1a97a:	e0 2d       	mov	r30, r0
   1a97c:	83 83       	std	Z+3, r24	; 0x03
   1a97e:	94 83       	std	Z+4, r25	; 0x04
   1a980:	83 e0       	ldi	r24, 0x03	; 3
   1a982:	81 83       	std	Z+1, r24	; 0x01
   1a984:	0e 94 4c d3 	call	0x1a698	; 0x1a698 <arb_yieldFromSleepIntsOn>
   1a988:	08 95       	ret
   1a98a:	e0 91 2c 22 	lds	r30, 0x222C
   1a98e:	f0 91 2d 22 	lds	r31, 0x222D
   1a992:	06 80       	ldd	r0, Z+6	; 0x06
   1a994:	f7 81       	ldd	r31, Z+7	; 0x07
   1a996:	e0 2d       	mov	r30, r0
   1a998:	01 90       	ld	r0, Z+
   1a99a:	f0 81       	ld	r31, Z
   1a99c:	e0 2d       	mov	r30, r0
   1a99e:	83 83       	std	Z+3, r24	; 0x03
   1a9a0:	94 83       	std	Z+4, r25	; 0x04
   1a9a2:	83 e0       	ldi	r24, 0x03	; 3
   1a9a4:	81 83       	std	Z+1, r24	; 0x01
   1a9a6:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <arb_yieldFromSleepIntsOff>
   1a9aa:	08 95       	ret

0001a9ac <arb_threadCreate>:
   1a9ac:	4f 92       	push	r4
   1a9ae:	5f 92       	push	r5
   1a9b0:	6f 92       	push	r6
   1a9b2:	7f 92       	push	r7
   1a9b4:	8f 92       	push	r8
   1a9b6:	9f 92       	push	r9
   1a9b8:	af 92       	push	r10
   1a9ba:	bf 92       	push	r11
   1a9bc:	cf 92       	push	r12
   1a9be:	df 92       	push	r13
   1a9c0:	ef 92       	push	r14
   1a9c2:	ff 92       	push	r15
   1a9c4:	0f 93       	push	r16
   1a9c6:	1f 93       	push	r17
   1a9c8:	cf 93       	push	r28
   1a9ca:	df 93       	push	r29
   1a9cc:	00 d0       	rcall	.+0      	; 0x1a9ce <arb_threadCreate+0x22>
   1a9ce:	cd b7       	in	r28, 0x3d	; 61
   1a9d0:	de b7       	in	r29, 0x3e	; 62
   1a9d2:	2c 01       	movw	r4, r24
   1a9d4:	4b 01       	movw	r8, r22
   1a9d6:	3a 01       	movw	r6, r20
   1a9d8:	59 01       	movw	r10, r18
   1a9da:	e0 2e       	mov	r14, r16
   1a9dc:	8f b7       	in	r24, 0x3f	; 63
   1a9de:	89 83       	std	Y+1, r24	; 0x01
   1a9e0:	f8 94       	cli
   1a9e2:	e0 91 2c 22 	lds	r30, 0x222C
   1a9e6:	f0 91 2d 22 	lds	r31, 0x222D
   1a9ea:	22 81       	ldd	r18, Z+2	; 0x02
   1a9ec:	33 81       	ldd	r19, Z+3	; 0x03
   1a9ee:	e0 91 2c 22 	lds	r30, 0x222C
   1a9f2:	f0 91 2d 22 	lds	r31, 0x222D
   1a9f6:	11 c0       	rjmp	.+34     	; 0x1aa1a <arb_threadCreate+0x6e>
   1a9f8:	ea 81       	ldd	r30, Y+2	; 0x02
   1a9fa:	fb 81       	ldd	r31, Y+3	; 0x03
   1a9fc:	01 90       	ld	r0, Z+
   1a9fe:	f0 81       	ld	r31, Z
   1aa00:	e0 2d       	mov	r30, r0
   1aa02:	82 81       	ldd	r24, Z+2	; 0x02
   1aa04:	8e 15       	cp	r24, r14
   1aa06:	29 f4       	brne	.+10     	; 0x1aa12 <arb_threadCreate+0x66>
   1aa08:	89 81       	ldd	r24, Y+1	; 0x01
   1aa0a:	8f bf       	out	0x3f, r24	; 63
   1aa0c:	88 ef       	ldi	r24, 0xF8	; 248
   1aa0e:	9f ef       	ldi	r25, 0xFF	; 255
   1aa10:	54 c0       	rjmp	.+168    	; 0x1aaba <arb_threadCreate+0x10e>
   1aa12:	21 50       	subi	r18, 0x01	; 1
   1aa14:	30 40       	sbci	r19, 0x00	; 0
   1aa16:	ea 81       	ldd	r30, Y+2	; 0x02
   1aa18:	fb 81       	ldd	r31, Y+3	; 0x03
   1aa1a:	80 85       	ldd	r24, Z+8	; 0x08
   1aa1c:	91 85       	ldd	r25, Z+9	; 0x09
   1aa1e:	8a 83       	std	Y+2, r24	; 0x02
   1aa20:	9b 83       	std	Y+3, r25	; 0x03
   1aa22:	21 15       	cp	r18, r1
   1aa24:	31 05       	cpc	r19, r1
   1aa26:	41 f7       	brne	.-48     	; 0x1a9f8 <arb_threadCreate+0x4c>
   1aa28:	c5 01       	movw	r24, r10
   1aa2a:	ca 96       	adiw	r24, 0x3a	; 58
   1aa2c:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   1aa30:	8a 83       	std	Y+2, r24	; 0x02
   1aa32:	9b 83       	std	Y+3, r25	; 0x03
   1aa34:	8a 81       	ldd	r24, Y+2	; 0x02
   1aa36:	9b 81       	ldd	r25, Y+3	; 0x03
   1aa38:	97 ff       	sbrs	r25, 7
   1aa3a:	05 c0       	rjmp	.+10     	; 0x1aa46 <arb_threadCreate+0x9a>
   1aa3c:	89 81       	ldd	r24, Y+1	; 0x01
   1aa3e:	8f bf       	out	0x3f, r24	; 63
   1aa40:	8f ef       	ldi	r24, 0xFF	; 255
   1aa42:	9f ef       	ldi	r25, 0xFF	; 255
   1aa44:	3a c0       	rjmp	.+116    	; 0x1aaba <arb_threadCreate+0x10e>
   1aa46:	ea 81       	ldd	r30, Y+2	; 0x02
   1aa48:	fb 81       	ldd	r31, Y+3	; 0x03
   1aa4a:	c0 80       	ld	r12, Z
   1aa4c:	d1 80       	ldd	r13, Z+1	; 0x01
   1aa4e:	c6 01       	movw	r24, r12
   1aa50:	0d 96       	adiw	r24, 0x0d	; 13
   1aa52:	f6 01       	movw	r30, r12
   1aa54:	83 87       	std	Z+11, r24	; 0x0b
   1aa56:	94 87       	std	Z+12, r25	; 0x0c
   1aa58:	2d ea       	ldi	r18, 0xAD	; 173
   1aa5a:	3e ed       	ldi	r19, 0xDE	; 222
   1aa5c:	25 87       	std	Z+13, r18	; 0x0d
   1aa5e:	36 87       	std	Z+14, r19	; 0x0e
   1aa60:	85 83       	std	Z+5, r24	; 0x05
   1aa62:	96 83       	std	Z+6, r25	; 0x06
   1aa64:	85 01       	movw	r16, r10
   1aa66:	04 5d       	subi	r16, 0xD4	; 212
   1aa68:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa6a:	08 0f       	add	r16, r24
   1aa6c:	19 1f       	adc	r17, r25
   1aa6e:	07 83       	std	Z+7, r16	; 0x07
   1aa70:	10 87       	std	Z+8, r17	; 0x08
   1aa72:	e2 82       	std	Z+2, r14	; 0x02
   1aa74:	84 e0       	ldi	r24, 0x04	; 4
   1aa76:	81 83       	std	Z+1, r24	; 0x01
   1aa78:	13 82       	std	Z+3, r1	; 0x03
   1aa7a:	14 82       	std	Z+4, r1	; 0x04
   1aa7c:	89 e0       	ldi	r24, 0x09	; 9
   1aa7e:	e8 2e       	mov	r14, r24
   1aa80:	f1 2c       	mov	r15, r1
   1aa82:	ec 0c       	add	r14, r12
   1aa84:	fd 1c       	adc	r15, r13
   1aa86:	c2 01       	movw	r24, r4
   1aa88:	b4 01       	movw	r22, r8
   1aa8a:	a3 01       	movw	r20, r6
   1aa8c:	98 01       	movw	r18, r16
   1aa8e:	0e 94 71 d5 	call	0x1aae2	; 0x1aae2 <hal_initThreadStack>
   1aa92:	e0 91 2c 22 	lds	r30, 0x222C
   1aa96:	f0 91 2d 22 	lds	r31, 0x222D
   1aa9a:	82 81       	ldd	r24, Z+2	; 0x02
   1aa9c:	f6 01       	movw	r30, r12
   1aa9e:	80 83       	st	Z, r24
   1aaa0:	80 91 2c 22 	lds	r24, 0x222C
   1aaa4:	90 91 2d 22 	lds	r25, 0x222D
   1aaa8:	6a 81       	ldd	r22, Y+2	; 0x02
   1aaaa:	7b 81       	ldd	r23, Y+3	; 0x03
   1aaac:	41 e0       	ldi	r20, 0x01	; 1
   1aaae:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   1aab2:	89 81       	ldd	r24, Y+1	; 0x01
   1aab4:	8f bf       	out	0x3f, r24	; 63
   1aab6:	8a 81       	ldd	r24, Y+2	; 0x02
   1aab8:	9b 81       	ldd	r25, Y+3	; 0x03
   1aaba:	23 96       	adiw	r28, 0x03	; 3
   1aabc:	cd bf       	out	0x3d, r28	; 61
   1aabe:	de bf       	out	0x3e, r29	; 62
   1aac0:	df 91       	pop	r29
   1aac2:	cf 91       	pop	r28
   1aac4:	1f 91       	pop	r17
   1aac6:	0f 91       	pop	r16
   1aac8:	ff 90       	pop	r15
   1aaca:	ef 90       	pop	r14
   1aacc:	df 90       	pop	r13
   1aace:	cf 90       	pop	r12
   1aad0:	bf 90       	pop	r11
   1aad2:	af 90       	pop	r10
   1aad4:	9f 90       	pop	r9
   1aad6:	8f 90       	pop	r8
   1aad8:	7f 90       	pop	r7
   1aada:	6f 90       	pop	r6
   1aadc:	5f 90       	pop	r5
   1aade:	4f 90       	pop	r4
   1aae0:	08 95       	ret

0001aae2 <hal_initThreadStack>:
   1aae2:	ef 92       	push	r14
   1aae4:	ff 92       	push	r15
   1aae6:	0f 93       	push	r16
   1aae8:	1f 93       	push	r17
   1aaea:	cf 93       	push	r28
   1aaec:	df 93       	push	r29
   1aaee:	e7 01       	movw	r28, r14
   1aaf0:	a0 e0       	ldi	r26, 0x00	; 0
   1aaf2:	b0 e0       	ldi	r27, 0x00	; 0
   1aaf4:	ba 2f       	mov	r27, r26
   1aaf6:	a9 2f       	mov	r26, r25
   1aaf8:	98 2f       	mov	r25, r24
   1aafa:	88 27       	eor	r24, r24
   1aafc:	f9 01       	movw	r30, r18
   1aafe:	10 82       	st	Z, r1
   1ab00:	31 97       	sbiw	r30, 0x01	; 1
   1ab02:	90 83       	st	Z, r25
   1ab04:	f9 01       	movw	r30, r18
   1ab06:	32 97       	sbiw	r30, 0x02	; 2
   1ab08:	a0 83       	st	Z, r26
   1ab0a:	f9 01       	movw	r30, r18
   1ab0c:	33 97       	sbiw	r30, 0x03	; 3
   1ab0e:	10 82       	st	Z, r1
   1ab10:	f9 01       	movw	r30, r18
   1ab12:	34 97       	sbiw	r30, 0x04	; 4
   1ab14:	10 82       	st	Z, r1
   1ab16:	f9 01       	movw	r30, r18
   1ab18:	35 97       	sbiw	r30, 0x05	; 5
   1ab1a:	80 e8       	ldi	r24, 0x80	; 128
   1ab1c:	80 83       	st	Z, r24
   1ab1e:	f9 01       	movw	r30, r18
   1ab20:	36 97       	sbiw	r30, 0x06	; 6
   1ab22:	10 82       	st	Z, r1
   1ab24:	f9 01       	movw	r30, r18
   1ab26:	37 97       	sbiw	r30, 0x07	; 7
   1ab28:	10 82       	st	Z, r1
   1ab2a:	f9 01       	movw	r30, r18
   1ab2c:	38 97       	sbiw	r30, 0x08	; 8
   1ab2e:	10 82       	st	Z, r1
   1ab30:	f9 01       	movw	r30, r18
   1ab32:	39 97       	sbiw	r30, 0x09	; 9
   1ab34:	10 82       	st	Z, r1
   1ab36:	f9 01       	movw	r30, r18
   1ab38:	3a 97       	sbiw	r30, 0x0a	; 10
   1ab3a:	10 82       	st	Z, r1
   1ab3c:	f9 01       	movw	r30, r18
   1ab3e:	3b 97       	sbiw	r30, 0x0b	; 11
   1ab40:	10 82       	st	Z, r1
   1ab42:	f9 01       	movw	r30, r18
   1ab44:	3c 97       	sbiw	r30, 0x0c	; 12
   1ab46:	10 82       	st	Z, r1
   1ab48:	f9 01       	movw	r30, r18
   1ab4a:	3d 97       	sbiw	r30, 0x0d	; 13
   1ab4c:	10 82       	st	Z, r1
   1ab4e:	f9 01       	movw	r30, r18
   1ab50:	3e 97       	sbiw	r30, 0x0e	; 14
   1ab52:	10 82       	st	Z, r1
   1ab54:	f9 01       	movw	r30, r18
   1ab56:	3f 97       	sbiw	r30, 0x0f	; 15
   1ab58:	10 82       	st	Z, r1
   1ab5a:	f9 01       	movw	r30, r18
   1ab5c:	70 97       	sbiw	r30, 0x10	; 16
   1ab5e:	10 82       	st	Z, r1
   1ab60:	f9 01       	movw	r30, r18
   1ab62:	71 97       	sbiw	r30, 0x11	; 17
   1ab64:	10 82       	st	Z, r1
   1ab66:	f9 01       	movw	r30, r18
   1ab68:	72 97       	sbiw	r30, 0x12	; 18
   1ab6a:	10 82       	st	Z, r1
   1ab6c:	f9 01       	movw	r30, r18
   1ab6e:	73 97       	sbiw	r30, 0x13	; 19
   1ab70:	10 82       	st	Z, r1
   1ab72:	f9 01       	movw	r30, r18
   1ab74:	74 97       	sbiw	r30, 0x14	; 20
   1ab76:	10 82       	st	Z, r1
   1ab78:	f9 01       	movw	r30, r18
   1ab7a:	75 97       	sbiw	r30, 0x15	; 21
   1ab7c:	10 82       	st	Z, r1
   1ab7e:	f9 01       	movw	r30, r18
   1ab80:	76 97       	sbiw	r30, 0x16	; 22
   1ab82:	10 82       	st	Z, r1
   1ab84:	f9 01       	movw	r30, r18
   1ab86:	77 97       	sbiw	r30, 0x17	; 23
   1ab88:	10 82       	st	Z, r1
   1ab8a:	f9 01       	movw	r30, r18
   1ab8c:	78 97       	sbiw	r30, 0x18	; 24
   1ab8e:	10 82       	st	Z, r1
   1ab90:	f9 01       	movw	r30, r18
   1ab92:	79 97       	sbiw	r30, 0x19	; 25
   1ab94:	10 82       	st	Z, r1
   1ab96:	f9 01       	movw	r30, r18
   1ab98:	7a 97       	sbiw	r30, 0x1a	; 26
   1ab9a:	10 82       	st	Z, r1
   1ab9c:	f9 01       	movw	r30, r18
   1ab9e:	7b 97       	sbiw	r30, 0x1b	; 27
   1aba0:	40 83       	st	Z, r20
   1aba2:	f9 01       	movw	r30, r18
   1aba4:	7c 97       	sbiw	r30, 0x1c	; 28
   1aba6:	50 83       	st	Z, r21
   1aba8:	f9 01       	movw	r30, r18
   1abaa:	7d 97       	sbiw	r30, 0x1d	; 29
   1abac:	60 83       	st	Z, r22
   1abae:	f9 01       	movw	r30, r18
   1abb0:	7e 97       	sbiw	r30, 0x1e	; 30
   1abb2:	70 83       	st	Z, r23
   1abb4:	f9 01       	movw	r30, r18
   1abb6:	7f 97       	sbiw	r30, 0x1f	; 31
   1abb8:	10 82       	st	Z, r1
   1abba:	f9 01       	movw	r30, r18
   1abbc:	b0 97       	sbiw	r30, 0x20	; 32
   1abbe:	10 82       	st	Z, r1
   1abc0:	f9 01       	movw	r30, r18
   1abc2:	b1 97       	sbiw	r30, 0x21	; 33
   1abc4:	00 83       	st	Z, r16
   1abc6:	f9 01       	movw	r30, r18
   1abc8:	b2 97       	sbiw	r30, 0x22	; 34
   1abca:	10 83       	st	Z, r17
   1abcc:	f9 01       	movw	r30, r18
   1abce:	b3 97       	sbiw	r30, 0x23	; 35
   1abd0:	10 82       	st	Z, r1
   1abd2:	f9 01       	movw	r30, r18
   1abd4:	b4 97       	sbiw	r30, 0x24	; 36
   1abd6:	10 82       	st	Z, r1
   1abd8:	25 52       	subi	r18, 0x25	; 37
   1abda:	30 40       	sbci	r19, 0x00	; 0
   1abdc:	28 83       	st	Y, r18
   1abde:	39 83       	std	Y+1, r19	; 0x01
   1abe0:	df 91       	pop	r29
   1abe2:	cf 91       	pop	r28
   1abe4:	1f 91       	pop	r17
   1abe6:	0f 91       	pop	r16
   1abe8:	ff 90       	pop	r15
   1abea:	ef 90       	pop	r14
   1abec:	08 95       	ret

0001abee <arb_stackOverflow>:
   1abee:	cf 93       	push	r28
   1abf0:	df 93       	push	r29
   1abf2:	0f 92       	push	r0
   1abf4:	cd b7       	in	r28, 0x3d	; 61
   1abf6:	de b7       	in	r29, 0x3e	; 62
   1abf8:	8f b7       	in	r24, 0x3f	; 63
   1abfa:	89 83       	std	Y+1, r24	; 0x01
   1abfc:	f8 94       	cli
   1abfe:	84 e0       	ldi	r24, 0x04	; 4
   1ac00:	0e 94 41 c0 	call	0x18082	; 0x18082 <arb_setPrintfDbgLevel>
   1ac04:	00 d0       	rcall	.+0      	; 0x1ac06 <arb_stackOverflow+0x18>
   1ac06:	00 d0       	rcall	.+0      	; 0x1ac08 <arb_stackOverflow+0x1a>
   1ac08:	ed b7       	in	r30, 0x3d	; 61
   1ac0a:	fe b7       	in	r31, 0x3e	; 62
   1ac0c:	31 96       	adiw	r30, 0x01	; 1
   1ac0e:	05 ef       	ldi	r16, 0xF5	; 245
   1ac10:	1b e2       	ldi	r17, 0x2B	; 43
   1ac12:	ad b7       	in	r26, 0x3d	; 61
   1ac14:	be b7       	in	r27, 0x3e	; 62
   1ac16:	11 96       	adiw	r26, 0x01	; 1
   1ac18:	0d 93       	st	X+, r16
   1ac1a:	1c 93       	st	X, r17
   1ac1c:	12 97       	sbiw	r26, 0x02	; 2
   1ac1e:	8a e3       	ldi	r24, 0x3A	; 58
   1ac20:	92 e2       	ldi	r25, 0x22	; 34
   1ac22:	82 83       	std	Z+2, r24	; 0x02
   1ac24:	93 83       	std	Z+3, r25	; 0x03
   1ac26:	a0 91 bd 2b 	lds	r26, 0x2BBD
   1ac2a:	b0 91 be 2b 	lds	r27, 0x2BBE
   1ac2e:	8c 91       	ld	r24, X
   1ac30:	84 83       	std	Z+4, r24	; 0x04
   1ac32:	15 82       	std	Z+5, r1	; 0x05
   1ac34:	0e 94 ba f7 	call	0x1ef74	; 0x1ef74 <sprintf>
   1ac38:	8d b7       	in	r24, 0x3d	; 61
   1ac3a:	9e b7       	in	r25, 0x3e	; 62
   1ac3c:	06 96       	adiw	r24, 0x06	; 6
   1ac3e:	8d bf       	out	0x3d, r24	; 61
   1ac40:	9e bf       	out	0x3e, r25	; 62
   1ac42:	84 e4       	ldi	r24, 0x44	; 68
   1ac44:	b8 01       	movw	r22, r16
   1ac46:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
   1ac4a:	0e 94 ad c1 	call	0x1835a	; 0x1835a <arb_printfFlushBuf>
   1ac4e:	80 e0       	ldi	r24, 0x00	; 0
   1ac50:	90 e0       	ldi	r25, 0x00	; 0
   1ac52:	0e 94 09 f6 	call	0x1ec12	; 0x1ec12 <exit>

0001ac56 <arb_idle>:
   1ac56:	cf 93       	push	r28
   1ac58:	df 93       	push	r29
   1ac5a:	cd b7       	in	r28, 0x3d	; 61
   1ac5c:	de b7       	in	r29, 0x3e	; 62
   1ac5e:	c8 56       	subi	r28, 0x68	; 104
   1ac60:	d0 40       	sbci	r29, 0x00	; 0
   1ac62:	cd bf       	out	0x3d, r28	; 61
   1ac64:	de bf       	out	0x3e, r29	; 62
   1ac66:	80 91 15 2c 	lds	r24, 0x2C15
   1ac6a:	90 91 16 2c 	lds	r25, 0x2C16
   1ac6e:	0e 94 6b 3d 	call	0x7ad6	; 0x7ad6 <hal_wdEnable>
   1ac72:	44 24       	eor	r4, r4
   1ac74:	55 24       	eor	r5, r5
   1ac76:	32 01       	movw	r6, r4
   1ac78:	33 24       	eor	r3, r3
   1ac7a:	22 24       	eor	r2, r2
   1ac7c:	a6 96       	adiw	r28, 0x26	; 38
   1ac7e:	1f ae       	sts	0xbf, r17
   1ac80:	a6 97       	sbiw	r28, 0x26	; 38
   1ac82:	a7 96       	adiw	r28, 0x27	; 39
   1ac84:	1f ae       	sts	0xbf, r17
   1ac86:	a7 97       	sbiw	r28, 0x27	; 39
   1ac88:	a8 96       	adiw	r28, 0x28	; 40
   1ac8a:	1f ae       	sts	0xbf, r17
   1ac8c:	a8 97       	sbiw	r28, 0x28	; 40
   1ac8e:	a9 96       	adiw	r28, 0x29	; 41
   1ac90:	1f ae       	sts	0xbf, r17
   1ac92:	a9 97       	sbiw	r28, 0x29	; 41
   1ac94:	99 24       	eor	r9, r9
   1ac96:	88 24       	eor	r8, r8
   1ac98:	0e 94 6c d0 	call	0x1a0d8	; 0x1a0d8 <arb_sysMsecNow>
   1ac9c:	a3 2c       	mov	r10, r3
   1ac9e:	b2 2c       	mov	r11, r2
   1aca0:	a6 96       	adiw	r28, 0x26	; 38
   1aca2:	cf ac       	sts	0xaf, r28
   1aca4:	a6 97       	sbiw	r28, 0x26	; 38
   1aca6:	a7 96       	adiw	r28, 0x27	; 39
   1aca8:	df ac       	sts	0xaf, r29
   1acaa:	a7 97       	sbiw	r28, 0x27	; 39
   1acac:	a8 96       	adiw	r28, 0x28	; 40
   1acae:	ef ac       	sts	0xaf, r30
   1acb0:	a8 97       	sbiw	r28, 0x28	; 40
   1acb2:	a9 96       	adiw	r28, 0x29	; 41
   1acb4:	ff ac       	sts	0xaf, r31
   1acb6:	a9 97       	sbiw	r28, 0x29	; 41
   1acb8:	09 2d       	mov	r16, r9
   1acba:	18 2d       	mov	r17, r8
   1acbc:	0e 94 7d d0 	call	0x1a0fa	; 0x1a0fa <arb_sysMsecDelta>
   1acc0:	99 23       	and	r25, r25
   1acc2:	91 f4       	brne	.+36     	; 0x1ace8 <arb_idle+0x92>
   1acc4:	88 23       	and	r24, r24
   1acc6:	81 f4       	brne	.+32     	; 0x1ace8 <arb_idle+0x92>
   1acc8:	77 23       	and	r23, r23
   1acca:	71 f4       	brne	.+28     	; 0x1ace8 <arb_idle+0x92>
   1accc:	66 23       	and	r22, r22
   1acce:	61 f4       	brne	.+24     	; 0x1ace8 <arb_idle+0x92>
   1acd0:	55 23       	and	r21, r21
   1acd2:	51 f4       	brne	.+20     	; 0x1ace8 <arb_idle+0x92>
   1acd4:	44 23       	and	r20, r20
   1acd6:	41 f4       	brne	.+16     	; 0x1ace8 <arb_idle+0x92>
   1acd8:	38 30       	cpi	r19, 0x08	; 8
   1acda:	30 f4       	brcc	.+12     	; 0x1ace8 <arb_idle+0x92>
   1acdc:	37 30       	cpi	r19, 0x07	; 7
   1acde:	09 f0       	breq	.+2      	; 0x1ace2 <arb_idle+0x8c>
   1ace0:	49 c0       	rjmp	.+146    	; 0x1ad74 <arb_idle+0x11e>
   1ace2:	20 3d       	cpi	r18, 0xD0	; 208
   1ace4:	08 f4       	brcc	.+2      	; 0x1ace8 <arb_idle+0x92>
   1ace6:	46 c0       	rjmp	.+140    	; 0x1ad74 <arb_idle+0x11e>
   1ace8:	08 94       	sec
   1acea:	41 1c       	adc	r4, r1
   1acec:	51 1c       	adc	r5, r1
   1acee:	61 1c       	adc	r6, r1
   1acf0:	71 1c       	adc	r7, r1
   1acf2:	0e 94 6c d0 	call	0x1a0d8	; 0x1a0d8 <arb_sysMsecNow>
   1acf6:	32 2e       	mov	r3, r18
   1acf8:	23 2e       	mov	r2, r19
   1acfa:	a6 96       	adiw	r28, 0x26	; 38
   1acfc:	4f af       	sts	0x7f, r20
   1acfe:	a6 97       	sbiw	r28, 0x26	; 38
   1ad00:	a7 96       	adiw	r28, 0x27	; 39
   1ad02:	5f af       	sts	0x7f, r21
   1ad04:	a7 97       	sbiw	r28, 0x27	; 39
   1ad06:	a8 96       	adiw	r28, 0x28	; 40
   1ad08:	6f af       	sts	0x7f, r22
   1ad0a:	a8 97       	sbiw	r28, 0x28	; 40
   1ad0c:	a9 96       	adiw	r28, 0x29	; 41
   1ad0e:	7f af       	sts	0x7f, r23
   1ad10:	a9 97       	sbiw	r28, 0x29	; 41
   1ad12:	98 2e       	mov	r9, r24
   1ad14:	89 2e       	mov	r8, r25
   1ad16:	8d b7       	in	r24, 0x3d	; 61
   1ad18:	9e b7       	in	r25, 0x3e	; 62
   1ad1a:	08 97       	sbiw	r24, 0x08	; 8
   1ad1c:	8d bf       	out	0x3d, r24	; 61
   1ad1e:	9e bf       	out	0x3e, r25	; 62
   1ad20:	0d b7       	in	r16, 0x3d	; 61
   1ad22:	1e b7       	in	r17, 0x3e	; 62
   1ad24:	0f 5f       	subi	r16, 0xFF	; 255
   1ad26:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad28:	81 e0       	ldi	r24, 0x01	; 1
   1ad2a:	90 e0       	ldi	r25, 0x00	; 0
   1ad2c:	8c 0f       	add	r24, r28
   1ad2e:	9d 1f       	adc	r25, r29
   1ad30:	ed b7       	in	r30, 0x3d	; 61
   1ad32:	fe b7       	in	r31, 0x3e	; 62
   1ad34:	81 83       	std	Z+1, r24	; 0x01
   1ad36:	92 83       	std	Z+2, r25	; 0x02
   1ad38:	89 e5       	ldi	r24, 0x59	; 89
   1ad3a:	92 e2       	ldi	r25, 0x22	; 34
   1ad3c:	f8 01       	movw	r30, r16
   1ad3e:	82 83       	std	Z+2, r24	; 0x02
   1ad40:	93 83       	std	Z+3, r25	; 0x03
   1ad42:	c3 01       	movw	r24, r6
   1ad44:	b2 01       	movw	r22, r4
   1ad46:	0e 94 fe f2 	call	0x1e5fc	; 0x1e5fc <__floatunsisf>
   1ad4a:	dc 01       	movw	r26, r24
   1ad4c:	cb 01       	movw	r24, r22
   1ad4e:	f8 01       	movw	r30, r16
   1ad50:	84 83       	std	Z+4, r24	; 0x04
   1ad52:	95 83       	std	Z+5, r25	; 0x05
   1ad54:	a6 83       	std	Z+6, r26	; 0x06
   1ad56:	b7 83       	std	Z+7, r27	; 0x07
   1ad58:	0e 94 ba f7 	call	0x1ef74	; 0x1ef74 <sprintf>
   1ad5c:	8d b7       	in	r24, 0x3d	; 61
   1ad5e:	9e b7       	in	r25, 0x3e	; 62
   1ad60:	08 96       	adiw	r24, 0x08	; 8
   1ad62:	8d bf       	out	0x3d, r24	; 61
   1ad64:	9e bf       	out	0x3e, r25	; 62
   1ad66:	81 e4       	ldi	r24, 0x41	; 65
   1ad68:	be 01       	movw	r22, r28
   1ad6a:	6f 5f       	subi	r22, 0xFF	; 255
   1ad6c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad6e:	0e 94 52 c0 	call	0x180a4	; 0x180a4 <arb_printf>
   1ad72:	a8 95       	wdr
   1ad74:	0e 94 ad c1 	call	0x1835a	; 0x1835a <arb_printfFlushBuf>
   1ad78:	8f cf       	rjmp	.-226    	; 0x1ac98 <arb_idle+0x42>

0001ad7a <arb_idleInit>:
   1ad7a:	0f 93       	push	r16
   1ad7c:	9c 01       	movw	r18, r24
   1ad7e:	06 2f       	mov	r16, r22
   1ad80:	8b e2       	ldi	r24, 0x2B	; 43
   1ad82:	96 ed       	ldi	r25, 0xD6	; 214
   1ad84:	6a ea       	ldi	r22, 0xAA	; 170
   1ad86:	70 e0       	ldi	r23, 0x00	; 0
   1ad88:	4b eb       	ldi	r20, 0xBB	; 187
   1ad8a:	50 e0       	ldi	r21, 0x00	; 0
   1ad8c:	0e 94 d6 d4 	call	0x1a9ac	; 0x1a9ac <arb_threadCreate>
   1ad90:	80 93 13 2c 	sts	0x2C13, r24
   1ad94:	90 93 14 2c 	sts	0x2C14, r25
   1ad98:	80 91 13 2c 	lds	r24, 0x2C13
   1ad9c:	90 91 14 2c 	lds	r25, 0x2C14
   1ada0:	97 fd       	sbrc	r25, 7
   1ada2:	18 c0       	rjmp	.+48     	; 0x1add4 <arb_idleInit+0x5a>
   1ada4:	0e 94 34 3c 	call	0x7868	; 0x7868 <hal_requestWdAccess>
   1ada8:	80 93 15 2c 	sts	0x2C15, r24
   1adac:	90 93 16 2c 	sts	0x2C16, r25
   1adb0:	80 91 15 2c 	lds	r24, 0x2C15
   1adb4:	90 91 16 2c 	lds	r25, 0x2C16
   1adb8:	97 fd       	sbrc	r25, 7
   1adba:	11 c0       	rjmp	.+34     	; 0x1adde <arb_idleInit+0x64>
   1adbc:	80 91 15 2c 	lds	r24, 0x2C15
   1adc0:	90 91 16 2c 	lds	r25, 0x2C16
   1adc4:	40 e4       	ldi	r20, 0x40	; 64
   1adc6:	5f e1       	ldi	r21, 0x1F	; 31
   1adc8:	60 e0       	ldi	r22, 0x00	; 0
   1adca:	70 e0       	ldi	r23, 0x00	; 0
   1adcc:	0e 94 a3 3c 	call	0x7946	; 0x7946 <hal_configureWd>
   1add0:	88 23       	and	r24, r24
   1add2:	29 f4       	brne	.+10     	; 0x1adde <arb_idleInit+0x64>
   1add4:	80 91 13 2c 	lds	r24, 0x2C13
   1add8:	90 91 14 2c 	lds	r25, 0x2C14
   1addc:	02 c0       	rjmp	.+4      	; 0x1ade2 <arb_idleInit+0x68>
   1adde:	86 ef       	ldi	r24, 0xF6	; 246
   1ade0:	9f ef       	ldi	r25, 0xFF	; 255
   1ade2:	0f 91       	pop	r16
   1ade4:	08 95       	ret

0001ade6 <utl_getBufferFullLevel>:
   1ade6:	cf 93       	push	r28
   1ade8:	df 93       	push	r29
   1adea:	0f 92       	push	r0
   1adec:	0f 92       	push	r0
   1adee:	cd b7       	in	r28, 0x3d	; 61
   1adf0:	de b7       	in	r29, 0x3e	; 62
   1adf2:	89 83       	std	Y+1, r24	; 0x01
   1adf4:	9a 83       	std	Y+2, r25	; 0x02
   1adf6:	e9 81       	ldd	r30, Y+1	; 0x01
   1adf8:	fa 81       	ldd	r31, Y+2	; 0x02
   1adfa:	01 90       	ld	r0, Z+
   1adfc:	f0 81       	ld	r31, Z
   1adfe:	e0 2d       	mov	r30, r0
   1ae00:	84 81       	ldd	r24, Z+4	; 0x04
   1ae02:	95 81       	ldd	r25, Z+5	; 0x05
   1ae04:	0f 90       	pop	r0
   1ae06:	0f 90       	pop	r0
   1ae08:	df 91       	pop	r29
   1ae0a:	cf 91       	pop	r28
   1ae0c:	08 95       	ret

0001ae0e <utl_getBufferSize>:
   1ae0e:	cf 93       	push	r28
   1ae10:	df 93       	push	r29
   1ae12:	0f 92       	push	r0
   1ae14:	0f 92       	push	r0
   1ae16:	cd b7       	in	r28, 0x3d	; 61
   1ae18:	de b7       	in	r29, 0x3e	; 62
   1ae1a:	89 83       	std	Y+1, r24	; 0x01
   1ae1c:	9a 83       	std	Y+2, r25	; 0x02
   1ae1e:	e9 81       	ldd	r30, Y+1	; 0x01
   1ae20:	fa 81       	ldd	r31, Y+2	; 0x02
   1ae22:	01 90       	ld	r0, Z+
   1ae24:	f0 81       	ld	r31, Z
   1ae26:	e0 2d       	mov	r30, r0
   1ae28:	86 81       	ldd	r24, Z+6	; 0x06
   1ae2a:	97 81       	ldd	r25, Z+7	; 0x07
   1ae2c:	0f 90       	pop	r0
   1ae2e:	0f 90       	pop	r0
   1ae30:	df 91       	pop	r29
   1ae32:	cf 91       	pop	r28
   1ae34:	08 95       	ret

0001ae36 <utl_getBufferPtr>:
   1ae36:	cf 93       	push	r28
   1ae38:	df 93       	push	r29
   1ae3a:	0f 92       	push	r0
   1ae3c:	0f 92       	push	r0
   1ae3e:	cd b7       	in	r28, 0x3d	; 61
   1ae40:	de b7       	in	r29, 0x3e	; 62
   1ae42:	89 83       	std	Y+1, r24	; 0x01
   1ae44:	9a 83       	std	Y+2, r25	; 0x02
   1ae46:	e9 81       	ldd	r30, Y+1	; 0x01
   1ae48:	fa 81       	ldd	r31, Y+2	; 0x02
   1ae4a:	01 90       	ld	r0, Z+
   1ae4c:	f0 81       	ld	r31, Z
   1ae4e:	e0 2d       	mov	r30, r0
   1ae50:	80 85       	ldd	r24, Z+8	; 0x08
   1ae52:	91 85       	ldd	r25, Z+9	; 0x09
   1ae54:	0f 90       	pop	r0
   1ae56:	0f 90       	pop	r0
   1ae58:	df 91       	pop	r29
   1ae5a:	cf 91       	pop	r28
   1ae5c:	08 95       	ret

0001ae5e <utl_writeByte>:
   1ae5e:	cf 93       	push	r28
   1ae60:	df 93       	push	r29
   1ae62:	0f 92       	push	r0
   1ae64:	0f 92       	push	r0
   1ae66:	cd b7       	in	r28, 0x3d	; 61
   1ae68:	de b7       	in	r29, 0x3e	; 62
   1ae6a:	89 83       	std	Y+1, r24	; 0x01
   1ae6c:	9a 83       	std	Y+2, r25	; 0x02
   1ae6e:	e9 81       	ldd	r30, Y+1	; 0x01
   1ae70:	fa 81       	ldd	r31, Y+2	; 0x02
   1ae72:	01 90       	ld	r0, Z+
   1ae74:	f0 81       	ld	r31, Z
   1ae76:	e0 2d       	mov	r30, r0
   1ae78:	a0 85       	ldd	r26, Z+8	; 0x08
   1ae7a:	b1 85       	ldd	r27, Z+9	; 0x09
   1ae7c:	80 81       	ld	r24, Z
   1ae7e:	91 81       	ldd	r25, Z+1	; 0x01
   1ae80:	a8 0f       	add	r26, r24
   1ae82:	b9 1f       	adc	r27, r25
   1ae84:	6c 93       	st	X, r22
   1ae86:	80 81       	ld	r24, Z
   1ae88:	91 81       	ldd	r25, Z+1	; 0x01
   1ae8a:	01 96       	adiw	r24, 0x01	; 1
   1ae8c:	80 83       	st	Z, r24
   1ae8e:	91 83       	std	Z+1, r25	; 0x01
   1ae90:	26 81       	ldd	r18, Z+6	; 0x06
   1ae92:	37 81       	ldd	r19, Z+7	; 0x07
   1ae94:	82 17       	cp	r24, r18
   1ae96:	93 07       	cpc	r25, r19
   1ae98:	11 f4       	brne	.+4      	; 0x1ae9e <utl_writeByte+0x40>
   1ae9a:	10 82       	st	Z, r1
   1ae9c:	11 82       	std	Z+1, r1	; 0x01
   1ae9e:	84 81       	ldd	r24, Z+4	; 0x04
   1aea0:	95 81       	ldd	r25, Z+5	; 0x05
   1aea2:	01 96       	adiw	r24, 0x01	; 1
   1aea4:	84 83       	std	Z+4, r24	; 0x04
   1aea6:	95 83       	std	Z+5, r25	; 0x05
   1aea8:	0f 90       	pop	r0
   1aeaa:	0f 90       	pop	r0
   1aeac:	df 91       	pop	r29
   1aeae:	cf 91       	pop	r28
   1aeb0:	08 95       	ret

0001aeb2 <utl_incrBufRdPtr>:
   1aeb2:	cf 93       	push	r28
   1aeb4:	df 93       	push	r29
   1aeb6:	0f 92       	push	r0
   1aeb8:	0f 92       	push	r0
   1aeba:	cd b7       	in	r28, 0x3d	; 61
   1aebc:	de b7       	in	r29, 0x3e	; 62
   1aebe:	89 83       	std	Y+1, r24	; 0x01
   1aec0:	9a 83       	std	Y+2, r25	; 0x02
   1aec2:	e9 81       	ldd	r30, Y+1	; 0x01
   1aec4:	fa 81       	ldd	r31, Y+2	; 0x02
   1aec6:	01 90       	ld	r0, Z+
   1aec8:	f0 81       	ld	r31, Z
   1aeca:	e0 2d       	mov	r30, r0
   1aecc:	82 81       	ldd	r24, Z+2	; 0x02
   1aece:	93 81       	ldd	r25, Z+3	; 0x03
   1aed0:	86 0f       	add	r24, r22
   1aed2:	97 1f       	adc	r25, r23
   1aed4:	82 83       	std	Z+2, r24	; 0x02
   1aed6:	93 83       	std	Z+3, r25	; 0x03
   1aed8:	26 81       	ldd	r18, Z+6	; 0x06
   1aeda:	37 81       	ldd	r19, Z+7	; 0x07
   1aedc:	82 17       	cp	r24, r18
   1aede:	93 07       	cpc	r25, r19
   1aee0:	20 f0       	brcs	.+8      	; 0x1aeea <utl_incrBufRdPtr+0x38>
   1aee2:	82 1b       	sub	r24, r18
   1aee4:	93 0b       	sbc	r25, r19
   1aee6:	82 83       	std	Z+2, r24	; 0x02
   1aee8:	93 83       	std	Z+3, r25	; 0x03
   1aeea:	84 81       	ldd	r24, Z+4	; 0x04
   1aeec:	95 81       	ldd	r25, Z+5	; 0x05
   1aeee:	86 1b       	sub	r24, r22
   1aef0:	97 0b       	sbc	r25, r23
   1aef2:	84 83       	std	Z+4, r24	; 0x04
   1aef4:	95 83       	std	Z+5, r25	; 0x05
   1aef6:	0f 90       	pop	r0
   1aef8:	0f 90       	pop	r0
   1aefa:	df 91       	pop	r29
   1aefc:	cf 91       	pop	r28
   1aefe:	08 95       	ret

0001af00 <utl_getBufRdPtr>:
   1af00:	cf 93       	push	r28
   1af02:	df 93       	push	r29
   1af04:	0f 92       	push	r0
   1af06:	0f 92       	push	r0
   1af08:	cd b7       	in	r28, 0x3d	; 61
   1af0a:	de b7       	in	r29, 0x3e	; 62
   1af0c:	89 83       	std	Y+1, r24	; 0x01
   1af0e:	9a 83       	std	Y+2, r25	; 0x02
   1af10:	e9 81       	ldd	r30, Y+1	; 0x01
   1af12:	fa 81       	ldd	r31, Y+2	; 0x02
   1af14:	01 90       	ld	r0, Z+
   1af16:	f0 81       	ld	r31, Z
   1af18:	e0 2d       	mov	r30, r0
   1af1a:	82 81       	ldd	r24, Z+2	; 0x02
   1af1c:	93 81       	ldd	r25, Z+3	; 0x03
   1af1e:	0f 90       	pop	r0
   1af20:	0f 90       	pop	r0
   1af22:	df 91       	pop	r29
   1af24:	cf 91       	pop	r28
   1af26:	08 95       	ret

0001af28 <utl_writeBlock>:
   1af28:	8f 92       	push	r8
   1af2a:	9f 92       	push	r9
   1af2c:	af 92       	push	r10
   1af2e:	bf 92       	push	r11
   1af30:	cf 92       	push	r12
   1af32:	df 92       	push	r13
   1af34:	ef 92       	push	r14
   1af36:	ff 92       	push	r15
   1af38:	0f 93       	push	r16
   1af3a:	1f 93       	push	r17
   1af3c:	cf 93       	push	r28
   1af3e:	df 93       	push	r29
   1af40:	0f 92       	push	r0
   1af42:	0f 92       	push	r0
   1af44:	cd b7       	in	r28, 0x3d	; 61
   1af46:	de b7       	in	r29, 0x3e	; 62
   1af48:	89 83       	std	Y+1, r24	; 0x01
   1af4a:	9a 83       	std	Y+2, r25	; 0x02
   1af4c:	5b 01       	movw	r10, r22
   1af4e:	6a 01       	movw	r12, r20
   1af50:	e9 81       	ldd	r30, Y+1	; 0x01
   1af52:	fa 81       	ldd	r31, Y+2	; 0x02
   1af54:	e0 80       	ld	r14, Z
   1af56:	f1 80       	ldd	r15, Z+1	; 0x01
   1af58:	f7 01       	movw	r30, r14
   1af5a:	80 84       	ldd	r8, Z+8	; 0x08
   1af5c:	91 84       	ldd	r9, Z+9	; 0x09
   1af5e:	80 81       	ld	r24, Z
   1af60:	91 81       	ldd	r25, Z+1	; 0x01
   1af62:	06 81       	ldd	r16, Z+6	; 0x06
   1af64:	17 81       	ldd	r17, Z+7	; 0x07
   1af66:	08 1b       	sub	r16, r24
   1af68:	19 0b       	sbc	r17, r25
   1af6a:	88 0d       	add	r24, r8
   1af6c:	99 1d       	adc	r25, r9
   1af6e:	04 17       	cp	r16, r20
   1af70:	15 07       	cpc	r17, r21
   1af72:	50 f4       	brcc	.+20     	; 0x1af88 <utl_writeBlock+0x60>
   1af74:	a8 01       	movw	r20, r16
   1af76:	0e 94 07 f7 	call	0x1ee0e	; 0x1ee0e <memcpy>
   1af7a:	a6 01       	movw	r20, r12
   1af7c:	40 1b       	sub	r20, r16
   1af7e:	51 0b       	sbc	r21, r17
   1af80:	b5 01       	movw	r22, r10
   1af82:	60 0f       	add	r22, r16
   1af84:	71 1f       	adc	r23, r17
   1af86:	c4 01       	movw	r24, r8
   1af88:	0e 94 07 f7 	call	0x1ee0e	; 0x1ee0e <memcpy>
   1af8c:	f7 01       	movw	r30, r14
   1af8e:	80 81       	ld	r24, Z
   1af90:	91 81       	ldd	r25, Z+1	; 0x01
   1af92:	8c 0d       	add	r24, r12
   1af94:	9d 1d       	adc	r25, r13
   1af96:	80 83       	st	Z, r24
   1af98:	91 83       	std	Z+1, r25	; 0x01
   1af9a:	26 81       	ldd	r18, Z+6	; 0x06
   1af9c:	37 81       	ldd	r19, Z+7	; 0x07
   1af9e:	82 17       	cp	r24, r18
   1afa0:	93 07       	cpc	r25, r19
   1afa2:	20 f0       	brcs	.+8      	; 0x1afac <utl_writeBlock+0x84>
   1afa4:	82 1b       	sub	r24, r18
   1afa6:	93 0b       	sbc	r25, r19
   1afa8:	80 83       	st	Z, r24
   1afaa:	91 83       	std	Z+1, r25	; 0x01
   1afac:	f7 01       	movw	r30, r14
   1afae:	84 81       	ldd	r24, Z+4	; 0x04
   1afb0:	95 81       	ldd	r25, Z+5	; 0x05
   1afb2:	8c 0d       	add	r24, r12
   1afb4:	9d 1d       	adc	r25, r13
   1afb6:	84 83       	std	Z+4, r24	; 0x04
   1afb8:	95 83       	std	Z+5, r25	; 0x05
   1afba:	0f 90       	pop	r0
   1afbc:	0f 90       	pop	r0
   1afbe:	df 91       	pop	r29
   1afc0:	cf 91       	pop	r28
   1afc2:	1f 91       	pop	r17
   1afc4:	0f 91       	pop	r16
   1afc6:	ff 90       	pop	r15
   1afc8:	ef 90       	pop	r14
   1afca:	df 90       	pop	r13
   1afcc:	cf 90       	pop	r12
   1afce:	bf 90       	pop	r11
   1afd0:	af 90       	pop	r10
   1afd2:	9f 90       	pop	r9
   1afd4:	8f 90       	pop	r8
   1afd6:	08 95       	ret

0001afd8 <utl_buffEraseTailByte>:
   1afd8:	cf 93       	push	r28
   1afda:	df 93       	push	r29
   1afdc:	0f 92       	push	r0
   1afde:	0f 92       	push	r0
   1afe0:	cd b7       	in	r28, 0x3d	; 61
   1afe2:	de b7       	in	r29, 0x3e	; 62
   1afe4:	89 83       	std	Y+1, r24	; 0x01
   1afe6:	9a 83       	std	Y+2, r25	; 0x02
   1afe8:	e9 81       	ldd	r30, Y+1	; 0x01
   1afea:	fa 81       	ldd	r31, Y+2	; 0x02
   1afec:	01 90       	ld	r0, Z+
   1afee:	f0 81       	ld	r31, Z
   1aff0:	e0 2d       	mov	r30, r0
   1aff2:	80 81       	ld	r24, Z
   1aff4:	91 81       	ldd	r25, Z+1	; 0x01
   1aff6:	01 97       	sbiw	r24, 0x01	; 1
   1aff8:	80 83       	st	Z, r24
   1affa:	91 83       	std	Z+1, r25	; 0x01
   1affc:	97 ff       	sbrs	r25, 7
   1affe:	05 c0       	rjmp	.+10     	; 0x1b00a <utl_buffEraseTailByte+0x32>
   1b000:	86 81       	ldd	r24, Z+6	; 0x06
   1b002:	97 81       	ldd	r25, Z+7	; 0x07
   1b004:	01 97       	sbiw	r24, 0x01	; 1
   1b006:	80 83       	st	Z, r24
   1b008:	91 83       	std	Z+1, r25	; 0x01
   1b00a:	a0 85       	ldd	r26, Z+8	; 0x08
   1b00c:	b1 85       	ldd	r27, Z+9	; 0x09
   1b00e:	80 81       	ld	r24, Z
   1b010:	91 81       	ldd	r25, Z+1	; 0x01
   1b012:	a8 0f       	add	r26, r24
   1b014:	b9 1f       	adc	r27, r25
   1b016:	1c 92       	st	X, r1
   1b018:	84 81       	ldd	r24, Z+4	; 0x04
   1b01a:	95 81       	ldd	r25, Z+5	; 0x05
   1b01c:	01 97       	sbiw	r24, 0x01	; 1
   1b01e:	84 83       	std	Z+4, r24	; 0x04
   1b020:	95 83       	std	Z+5, r25	; 0x05
   1b022:	0f 90       	pop	r0
   1b024:	0f 90       	pop	r0
   1b026:	df 91       	pop	r29
   1b028:	cf 91       	pop	r28
   1b02a:	08 95       	ret

0001b02c <utl_readBlock>:
   1b02c:	8f 92       	push	r8
   1b02e:	9f 92       	push	r9
   1b030:	af 92       	push	r10
   1b032:	bf 92       	push	r11
   1b034:	cf 92       	push	r12
   1b036:	df 92       	push	r13
   1b038:	ef 92       	push	r14
   1b03a:	ff 92       	push	r15
   1b03c:	0f 93       	push	r16
   1b03e:	1f 93       	push	r17
   1b040:	cf 93       	push	r28
   1b042:	df 93       	push	r29
   1b044:	0f 92       	push	r0
   1b046:	0f 92       	push	r0
   1b048:	cd b7       	in	r28, 0x3d	; 61
   1b04a:	de b7       	in	r29, 0x3e	; 62
   1b04c:	89 83       	std	Y+1, r24	; 0x01
   1b04e:	9a 83       	std	Y+2, r25	; 0x02
   1b050:	6b 01       	movw	r12, r22
   1b052:	5a 01       	movw	r10, r20
   1b054:	e9 81       	ldd	r30, Y+1	; 0x01
   1b056:	fa 81       	ldd	r31, Y+2	; 0x02
   1b058:	e0 80       	ld	r14, Z
   1b05a:	f1 80       	ldd	r15, Z+1	; 0x01
   1b05c:	f7 01       	movw	r30, r14
   1b05e:	80 84       	ldd	r8, Z+8	; 0x08
   1b060:	91 84       	ldd	r9, Z+9	; 0x09
   1b062:	62 81       	ldd	r22, Z+2	; 0x02
   1b064:	73 81       	ldd	r23, Z+3	; 0x03
   1b066:	06 81       	ldd	r16, Z+6	; 0x06
   1b068:	17 81       	ldd	r17, Z+7	; 0x07
   1b06a:	06 1b       	sub	r16, r22
   1b06c:	17 0b       	sbc	r17, r23
   1b06e:	68 0d       	add	r22, r8
   1b070:	79 1d       	adc	r23, r9
   1b072:	c6 01       	movw	r24, r12
   1b074:	04 17       	cp	r16, r20
   1b076:	15 07       	cpc	r17, r21
   1b078:	50 f4       	brcc	.+20     	; 0x1b08e <utl_readBlock+0x62>
   1b07a:	a8 01       	movw	r20, r16
   1b07c:	0e 94 07 f7 	call	0x1ee0e	; 0x1ee0e <memcpy>
   1b080:	c6 01       	movw	r24, r12
   1b082:	80 0f       	add	r24, r16
   1b084:	91 1f       	adc	r25, r17
   1b086:	a5 01       	movw	r20, r10
   1b088:	40 1b       	sub	r20, r16
   1b08a:	51 0b       	sbc	r21, r17
   1b08c:	b4 01       	movw	r22, r8
   1b08e:	0e 94 07 f7 	call	0x1ee0e	; 0x1ee0e <memcpy>
   1b092:	f7 01       	movw	r30, r14
   1b094:	82 81       	ldd	r24, Z+2	; 0x02
   1b096:	93 81       	ldd	r25, Z+3	; 0x03
   1b098:	8a 0d       	add	r24, r10
   1b09a:	9b 1d       	adc	r25, r11
   1b09c:	82 83       	std	Z+2, r24	; 0x02
   1b09e:	93 83       	std	Z+3, r25	; 0x03
   1b0a0:	26 81       	ldd	r18, Z+6	; 0x06
   1b0a2:	37 81       	ldd	r19, Z+7	; 0x07
   1b0a4:	82 17       	cp	r24, r18
   1b0a6:	93 07       	cpc	r25, r19
   1b0a8:	20 f0       	brcs	.+8      	; 0x1b0b2 <utl_readBlock+0x86>
   1b0aa:	82 1b       	sub	r24, r18
   1b0ac:	93 0b       	sbc	r25, r19
   1b0ae:	82 83       	std	Z+2, r24	; 0x02
   1b0b0:	93 83       	std	Z+3, r25	; 0x03
   1b0b2:	f7 01       	movw	r30, r14
   1b0b4:	84 81       	ldd	r24, Z+4	; 0x04
   1b0b6:	95 81       	ldd	r25, Z+5	; 0x05
   1b0b8:	8a 19       	sub	r24, r10
   1b0ba:	9b 09       	sbc	r25, r11
   1b0bc:	84 83       	std	Z+4, r24	; 0x04
   1b0be:	95 83       	std	Z+5, r25	; 0x05
   1b0c0:	0f 90       	pop	r0
   1b0c2:	0f 90       	pop	r0
   1b0c4:	df 91       	pop	r29
   1b0c6:	cf 91       	pop	r28
   1b0c8:	1f 91       	pop	r17
   1b0ca:	0f 91       	pop	r16
   1b0cc:	ff 90       	pop	r15
   1b0ce:	ef 90       	pop	r14
   1b0d0:	df 90       	pop	r13
   1b0d2:	cf 90       	pop	r12
   1b0d4:	bf 90       	pop	r11
   1b0d6:	af 90       	pop	r10
   1b0d8:	9f 90       	pop	r9
   1b0da:	8f 90       	pop	r8
   1b0dc:	08 95       	ret

0001b0de <ult_resetBuffer>:
   1b0de:	cf 93       	push	r28
   1b0e0:	df 93       	push	r29
   1b0e2:	0f 92       	push	r0
   1b0e4:	0f 92       	push	r0
   1b0e6:	cd b7       	in	r28, 0x3d	; 61
   1b0e8:	de b7       	in	r29, 0x3e	; 62
   1b0ea:	89 83       	std	Y+1, r24	; 0x01
   1b0ec:	9a 83       	std	Y+2, r25	; 0x02
   1b0ee:	e9 81       	ldd	r30, Y+1	; 0x01
   1b0f0:	fa 81       	ldd	r31, Y+2	; 0x02
   1b0f2:	01 90       	ld	r0, Z+
   1b0f4:	f0 81       	ld	r31, Z
   1b0f6:	e0 2d       	mov	r30, r0
   1b0f8:	12 82       	std	Z+2, r1	; 0x02
   1b0fa:	13 82       	std	Z+3, r1	; 0x03
   1b0fc:	10 82       	st	Z, r1
   1b0fe:	11 82       	std	Z+1, r1	; 0x01
   1b100:	14 82       	std	Z+4, r1	; 0x04
   1b102:	15 82       	std	Z+5, r1	; 0x05
   1b104:	0f 90       	pop	r0
   1b106:	0f 90       	pop	r0
   1b108:	df 91       	pop	r29
   1b10a:	cf 91       	pop	r28
   1b10c:	08 95       	ret

0001b10e <utl_createBuffer>:
   1b10e:	ef 92       	push	r14
   1b110:	ff 92       	push	r15
   1b112:	0f 93       	push	r16
   1b114:	1f 93       	push	r17
   1b116:	cf 93       	push	r28
   1b118:	df 93       	push	r29
   1b11a:	00 d0       	rcall	.+0      	; 0x1b11c <utl_createBuffer+0xe>
   1b11c:	0f 92       	push	r0
   1b11e:	cd b7       	in	r28, 0x3d	; 61
   1b120:	de b7       	in	r29, 0x3e	; 62
   1b122:	59 2f       	mov	r21, r25
   1b124:	9f b7       	in	r25, 0x3f	; 63
   1b126:	99 83       	std	Y+1, r25	; 0x01
   1b128:	f8 94       	cli
   1b12a:	e8 2e       	mov	r14, r24
   1b12c:	f5 2e       	mov	r15, r21
   1b12e:	c7 01       	movw	r24, r14
   1b130:	0a 96       	adiw	r24, 0x0a	; 10
   1b132:	5c 83       	std	Y+4, r21	; 0x04
   1b134:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   1b138:	8a 83       	std	Y+2, r24	; 0x02
   1b13a:	9b 83       	std	Y+3, r25	; 0x03
   1b13c:	8a 81       	ldd	r24, Y+2	; 0x02
   1b13e:	9b 81       	ldd	r25, Y+3	; 0x03
   1b140:	5c 81       	ldd	r21, Y+4	; 0x04
   1b142:	97 ff       	sbrs	r25, 7
   1b144:	05 c0       	rjmp	.+10     	; 0x1b150 <utl_createBuffer+0x42>
   1b146:	89 81       	ldd	r24, Y+1	; 0x01
   1b148:	8f bf       	out	0x3f, r24	; 63
   1b14a:	8f ef       	ldi	r24, 0xFF	; 255
   1b14c:	9f ef       	ldi	r25, 0xFF	; 255
   1b14e:	24 c0       	rjmp	.+72     	; 0x1b198 <utl_createBuffer+0x8a>
   1b150:	ea 81       	ldd	r30, Y+2	; 0x02
   1b152:	fb 81       	ldd	r31, Y+3	; 0x03
   1b154:	00 81       	ld	r16, Z
   1b156:	11 81       	ldd	r17, Z+1	; 0x01
   1b158:	f8 01       	movw	r30, r16
   1b15a:	10 82       	st	Z, r1
   1b15c:	11 82       	std	Z+1, r1	; 0x01
   1b15e:	12 82       	std	Z+2, r1	; 0x02
   1b160:	13 82       	std	Z+3, r1	; 0x03
   1b162:	14 82       	std	Z+4, r1	; 0x04
   1b164:	15 82       	std	Z+5, r1	; 0x05
   1b166:	c8 01       	movw	r24, r16
   1b168:	0a 96       	adiw	r24, 0x0a	; 10
   1b16a:	80 87       	std	Z+8, r24	; 0x08
   1b16c:	91 87       	std	Z+9, r25	; 0x09
   1b16e:	60 e0       	ldi	r22, 0x00	; 0
   1b170:	70 e0       	ldi	r23, 0x00	; 0
   1b172:	4e 2d       	mov	r20, r14
   1b174:	0e 94 10 f7 	call	0x1ee20	; 0x1ee20 <memset>
   1b178:	f8 01       	movw	r30, r16
   1b17a:	e6 82       	std	Z+6, r14	; 0x06
   1b17c:	f7 82       	std	Z+7, r15	; 0x07
   1b17e:	80 91 77 22 	lds	r24, 0x2277
   1b182:	90 91 78 22 	lds	r25, 0x2278
   1b186:	6a 81       	ldd	r22, Y+2	; 0x02
   1b188:	7b 81       	ldd	r23, Y+3	; 0x03
   1b18a:	41 e0       	ldi	r20, 0x01	; 1
   1b18c:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   1b190:	89 81       	ldd	r24, Y+1	; 0x01
   1b192:	8f bf       	out	0x3f, r24	; 63
   1b194:	8a 81       	ldd	r24, Y+2	; 0x02
   1b196:	9b 81       	ldd	r25, Y+3	; 0x03
   1b198:	24 96       	adiw	r28, 0x04	; 4
   1b19a:	cd bf       	out	0x3d, r28	; 61
   1b19c:	de bf       	out	0x3e, r29	; 62
   1b19e:	df 91       	pop	r29
   1b1a0:	cf 91       	pop	r28
   1b1a2:	1f 91       	pop	r17
   1b1a4:	0f 91       	pop	r16
   1b1a6:	ff 90       	pop	r15
   1b1a8:	ef 90       	pop	r14
   1b1aa:	08 95       	ret

0001b1ac <utl_destroyBuffer>:
   1b1ac:	cf 93       	push	r28
   1b1ae:	df 93       	push	r29
   1b1b0:	00 d0       	rcall	.+0      	; 0x1b1b2 <utl_destroyBuffer+0x6>
   1b1b2:	cd b7       	in	r28, 0x3d	; 61
   1b1b4:	de b7       	in	r29, 0x3e	; 62
   1b1b6:	8a 83       	std	Y+2, r24	; 0x02
   1b1b8:	9b 83       	std	Y+3, r25	; 0x03
   1b1ba:	8f b7       	in	r24, 0x3f	; 63
   1b1bc:	89 83       	std	Y+1, r24	; 0x01
   1b1be:	f8 94       	cli
   1b1c0:	80 91 77 22 	lds	r24, 0x2277
   1b1c4:	90 91 78 22 	lds	r25, 0x2278
   1b1c8:	6a 81       	ldd	r22, Y+2	; 0x02
   1b1ca:	7b 81       	ldd	r23, Y+3	; 0x03
   1b1cc:	0e 94 51 da 	call	0x1b4a2	; 0x1b4a2 <utl_destroyLink>
   1b1d0:	87 ff       	sbrs	r24, 7
   1b1d2:	04 c0       	rjmp	.+8      	; 0x1b1dc <utl_destroyBuffer+0x30>
   1b1d4:	89 81       	ldd	r24, Y+1	; 0x01
   1b1d6:	8f bf       	out	0x3f, r24	; 63
   1b1d8:	8d ef       	ldi	r24, 0xFD	; 253
   1b1da:	03 c0       	rjmp	.+6      	; 0x1b1e2 <utl_destroyBuffer+0x36>
   1b1dc:	89 81       	ldd	r24, Y+1	; 0x01
   1b1de:	8f bf       	out	0x3f, r24	; 63
   1b1e0:	80 e0       	ldi	r24, 0x00	; 0
   1b1e2:	23 96       	adiw	r28, 0x03	; 3
   1b1e4:	cd bf       	out	0x3d, r28	; 61
   1b1e6:	de bf       	out	0x3e, r29	; 62
   1b1e8:	df 91       	pop	r29
   1b1ea:	cf 91       	pop	r28
   1b1ec:	08 95       	ret

0001b1ee <utl_createContainer>:
   1b1ee:	cf 93       	push	r28
   1b1f0:	df 93       	push	r29
   1b1f2:	00 d0       	rcall	.+0      	; 0x1b1f4 <utl_createContainer+0x6>
   1b1f4:	cd b7       	in	r28, 0x3d	; 61
   1b1f6:	de b7       	in	r29, 0x3e	; 62
   1b1f8:	8f b7       	in	r24, 0x3f	; 63
   1b1fa:	89 83       	std	Y+1, r24	; 0x01
   1b1fc:	f8 94       	cli
   1b1fe:	8c e0       	ldi	r24, 0x0C	; 12
   1b200:	90 e0       	ldi	r25, 0x00	; 0
   1b202:	be 01       	movw	r22, r28
   1b204:	6e 5f       	subi	r22, 0xFE	; 254
   1b206:	7f 4f       	sbci	r23, 0xFF	; 255
   1b208:	0e 94 c9 f9 	call	0x1f392	; 0x1f392 <arb_malloc>
   1b20c:	ea 81       	ldd	r30, Y+2	; 0x02
   1b20e:	fb 81       	ldd	r31, Y+3	; 0x03
   1b210:	30 97       	sbiw	r30, 0x00	; 0
   1b212:	29 f4       	brne	.+10     	; 0x1b21e <utl_createContainer+0x30>
   1b214:	89 81       	ldd	r24, Y+1	; 0x01
   1b216:	8f bf       	out	0x3f, r24	; 63
   1b218:	8f ef       	ldi	r24, 0xFF	; 255
   1b21a:	9f ef       	ldi	r25, 0xFF	; 255
   1b21c:	25 c0       	rjmp	.+74     	; 0x1b268 <utl_createContainer+0x7a>
   1b21e:	8e ed       	ldi	r24, 0xDE	; 222
   1b220:	9a ef       	ldi	r25, 0xFA	; 250
   1b222:	80 83       	st	Z, r24
   1b224:	91 83       	std	Z+1, r25	; 0x01
   1b226:	12 82       	std	Z+2, r1	; 0x02
   1b228:	13 82       	std	Z+3, r1	; 0x03
   1b22a:	8c e0       	ldi	r24, 0x0C	; 12
   1b22c:	90 e0       	ldi	r25, 0x00	; 0
   1b22e:	84 83       	std	Z+4, r24	; 0x04
   1b230:	95 83       	std	Z+5, r25	; 0x05
   1b232:	10 86       	std	Z+8, r1	; 0x08
   1b234:	11 86       	std	Z+9, r1	; 0x09
   1b236:	12 86       	std	Z+10, r1	; 0x0a
   1b238:	13 86       	std	Z+11, r1	; 0x0b
   1b23a:	80 91 17 2c 	lds	r24, 0x2C17
   1b23e:	90 91 18 2c 	lds	r25, 0x2C18
   1b242:	a0 91 19 2c 	lds	r26, 0x2C19
   1b246:	b0 91 1a 2c 	lds	r27, 0x2C1A
   1b24a:	0c 96       	adiw	r24, 0x0c	; 12
   1b24c:	a1 1d       	adc	r26, r1
   1b24e:	b1 1d       	adc	r27, r1
   1b250:	80 93 17 2c 	sts	0x2C17, r24
   1b254:	90 93 18 2c 	sts	0x2C18, r25
   1b258:	a0 93 19 2c 	sts	0x2C19, r26
   1b25c:	b0 93 1a 2c 	sts	0x2C1A, r27
   1b260:	89 81       	ldd	r24, Y+1	; 0x01
   1b262:	8f bf       	out	0x3f, r24	; 63
   1b264:	8a 81       	ldd	r24, Y+2	; 0x02
   1b266:	9b 81       	ldd	r25, Y+3	; 0x03
   1b268:	23 96       	adiw	r28, 0x03	; 3
   1b26a:	cd bf       	out	0x3d, r28	; 61
   1b26c:	de bf       	out	0x3e, r29	; 62
   1b26e:	df 91       	pop	r29
   1b270:	cf 91       	pop	r28
   1b272:	08 95       	ret

0001b274 <utl_destroyContainer>:
   1b274:	cf 93       	push	r28
   1b276:	df 93       	push	r29
   1b278:	cd b7       	in	r28, 0x3d	; 61
   1b27a:	de b7       	in	r29, 0x3e	; 62
   1b27c:	25 97       	sbiw	r28, 0x05	; 5
   1b27e:	cd bf       	out	0x3d, r28	; 61
   1b280:	de bf       	out	0x3e, r29	; 62
   1b282:	8c 83       	std	Y+4, r24	; 0x04
   1b284:	9d 83       	std	Y+5, r25	; 0x05
   1b286:	8f b7       	in	r24, 0x3f	; 63
   1b288:	89 83       	std	Y+1, r24	; 0x01
   1b28a:	f8 94       	cli
   1b28c:	ec 81       	ldd	r30, Y+4	; 0x04
   1b28e:	fd 81       	ldd	r31, Y+5	; 0x05
   1b290:	ea 83       	std	Y+2, r30	; 0x02
   1b292:	fb 83       	std	Y+3, r31	; 0x03
   1b294:	80 81       	ld	r24, Z
   1b296:	91 81       	ldd	r25, Z+1	; 0x01
   1b298:	2a ef       	ldi	r18, 0xFA	; 250
   1b29a:	8e 3d       	cpi	r24, 0xDE	; 222
   1b29c:	92 07       	cpc	r25, r18
   1b29e:	39 f5       	brne	.+78     	; 0x1b2ee <utl_destroyContainer+0x7a>
   1b2a0:	44 81       	ldd	r20, Z+4	; 0x04
   1b2a2:	55 81       	ldd	r21, Z+5	; 0x05
   1b2a4:	60 e0       	ldi	r22, 0x00	; 0
   1b2a6:	70 e0       	ldi	r23, 0x00	; 0
   1b2a8:	80 91 17 2c 	lds	r24, 0x2C17
   1b2ac:	90 91 18 2c 	lds	r25, 0x2C18
   1b2b0:	a0 91 19 2c 	lds	r26, 0x2C19
   1b2b4:	b0 91 1a 2c 	lds	r27, 0x2C1A
   1b2b8:	84 1b       	sub	r24, r20
   1b2ba:	95 0b       	sbc	r25, r21
   1b2bc:	a6 0b       	sbc	r26, r22
   1b2be:	b7 0b       	sbc	r27, r23
   1b2c0:	80 93 17 2c 	sts	0x2C17, r24
   1b2c4:	90 93 18 2c 	sts	0x2C18, r25
   1b2c8:	a0 93 19 2c 	sts	0x2C19, r26
   1b2cc:	b0 93 1a 2c 	sts	0x2C1A, r27
   1b2d0:	ce 01       	movw	r24, r28
   1b2d2:	02 96       	adiw	r24, 0x02	; 2
   1b2d4:	0e 94 fd f9 	call	0x1f3fa	; 0x1f3fa <arb_free>
   1b2d8:	ea 81       	ldd	r30, Y+2	; 0x02
   1b2da:	fb 81       	ldd	r31, Y+3	; 0x03
   1b2dc:	8c e0       	ldi	r24, 0x0C	; 12
   1b2de:	df 01       	movw	r26, r30
   1b2e0:	1d 92       	st	X+, r1
   1b2e2:	8a 95       	dec	r24
   1b2e4:	e9 f7       	brne	.-6      	; 0x1b2e0 <utl_destroyContainer+0x6c>
   1b2e6:	89 81       	ldd	r24, Y+1	; 0x01
   1b2e8:	8f bf       	out	0x3f, r24	; 63
   1b2ea:	80 e0       	ldi	r24, 0x00	; 0
   1b2ec:	03 c0       	rjmp	.+6      	; 0x1b2f4 <utl_destroyContainer+0x80>
   1b2ee:	89 81       	ldd	r24, Y+1	; 0x01
   1b2f0:	8f bf       	out	0x3f, r24	; 63
   1b2f2:	8d ef       	ldi	r24, 0xFD	; 253
   1b2f4:	25 96       	adiw	r28, 0x05	; 5
   1b2f6:	cd bf       	out	0x3d, r28	; 61
   1b2f8:	de bf       	out	0x3e, r29	; 62
   1b2fa:	df 91       	pop	r29
   1b2fc:	cf 91       	pop	r28
   1b2fe:	08 95       	ret

0001b300 <utl_createLink>:
   1b300:	0f 93       	push	r16
   1b302:	1f 93       	push	r17
   1b304:	cf 93       	push	r28
   1b306:	df 93       	push	r29
   1b308:	cd b7       	in	r28, 0x3d	; 61
   1b30a:	de b7       	in	r29, 0x3e	; 62
   1b30c:	25 97       	sbiw	r28, 0x05	; 5
   1b30e:	cd bf       	out	0x3d, r28	; 61
   1b310:	de bf       	out	0x3e, r29	; 62
   1b312:	8c 01       	movw	r16, r24
   1b314:	8f b7       	in	r24, 0x3f	; 63
   1b316:	89 83       	std	Y+1, r24	; 0x01
   1b318:	f8 94       	cli
   1b31a:	8c e0       	ldi	r24, 0x0C	; 12
   1b31c:	90 e0       	ldi	r25, 0x00	; 0
   1b31e:	be 01       	movw	r22, r28
   1b320:	6c 5f       	subi	r22, 0xFC	; 252
   1b322:	7f 4f       	sbci	r23, 0xFF	; 255
   1b324:	0e 94 c9 f9 	call	0x1f392	; 0x1f392 <arb_malloc>
   1b328:	8c 81       	ldd	r24, Y+4	; 0x04
   1b32a:	9d 81       	ldd	r25, Y+5	; 0x05
   1b32c:	00 97       	sbiw	r24, 0x00	; 0
   1b32e:	71 f0       	breq	.+28     	; 0x1b34c <utl_createLink+0x4c>
   1b330:	c8 01       	movw	r24, r16
   1b332:	be 01       	movw	r22, r28
   1b334:	6e 5f       	subi	r22, 0xFE	; 254
   1b336:	7f 4f       	sbci	r23, 0xFF	; 255
   1b338:	0e 94 c9 f9 	call	0x1f392	; 0x1f392 <arb_malloc>
   1b33c:	8a 81       	ldd	r24, Y+2	; 0x02
   1b33e:	9b 81       	ldd	r25, Y+3	; 0x03
   1b340:	00 97       	sbiw	r24, 0x00	; 0
   1b342:	49 f4       	brne	.+18     	; 0x1b356 <utl_createLink+0x56>
   1b344:	ce 01       	movw	r24, r28
   1b346:	04 96       	adiw	r24, 0x04	; 4
   1b348:	0e 94 fd f9 	call	0x1f3fa	; 0x1f3fa <arb_free>
   1b34c:	89 81       	ldd	r24, Y+1	; 0x01
   1b34e:	8f bf       	out	0x3f, r24	; 63
   1b350:	8f ef       	ldi	r24, 0xFF	; 255
   1b352:	9f ef       	ldi	r25, 0xFF	; 255
   1b354:	31 c0       	rjmp	.+98     	; 0x1b3b8 <utl_createLink+0xb8>
   1b356:	6f ef       	ldi	r22, 0xFF	; 255
   1b358:	70 e0       	ldi	r23, 0x00	; 0
   1b35a:	a8 01       	movw	r20, r16
   1b35c:	0e 94 10 f7 	call	0x1ee20	; 0x1ee20 <memset>
   1b360:	ec 81       	ldd	r30, Y+4	; 0x04
   1b362:	fd 81       	ldd	r31, Y+5	; 0x05
   1b364:	8a 81       	ldd	r24, Y+2	; 0x02
   1b366:	9b 81       	ldd	r25, Y+3	; 0x03
   1b368:	80 83       	st	Z, r24
   1b36a:	91 83       	std	Z+1, r25	; 0x01
   1b36c:	14 82       	std	Z+4, r1	; 0x04
   1b36e:	15 82       	std	Z+5, r1	; 0x05
   1b370:	02 83       	std	Z+2, r16	; 0x02
   1b372:	13 83       	std	Z+3, r17	; 0x03
   1b374:	04 5f       	subi	r16, 0xF4	; 244
   1b376:	1f 4f       	sbci	r17, 0xFF	; 255
   1b378:	06 83       	std	Z+6, r16	; 0x06
   1b37a:	17 83       	std	Z+7, r17	; 0x07
   1b37c:	10 86       	std	Z+8, r1	; 0x08
   1b37e:	11 86       	std	Z+9, r1	; 0x09
   1b380:	12 86       	std	Z+10, r1	; 0x0a
   1b382:	13 86       	std	Z+11, r1	; 0x0b
   1b384:	20 e0       	ldi	r18, 0x00	; 0
   1b386:	30 e0       	ldi	r19, 0x00	; 0
   1b388:	80 91 17 2c 	lds	r24, 0x2C17
   1b38c:	90 91 18 2c 	lds	r25, 0x2C18
   1b390:	a0 91 19 2c 	lds	r26, 0x2C19
   1b394:	b0 91 1a 2c 	lds	r27, 0x2C1A
   1b398:	80 0f       	add	r24, r16
   1b39a:	91 1f       	adc	r25, r17
   1b39c:	a2 1f       	adc	r26, r18
   1b39e:	b3 1f       	adc	r27, r19
   1b3a0:	80 93 17 2c 	sts	0x2C17, r24
   1b3a4:	90 93 18 2c 	sts	0x2C18, r25
   1b3a8:	a0 93 19 2c 	sts	0x2C19, r26
   1b3ac:	b0 93 1a 2c 	sts	0x2C1A, r27
   1b3b0:	89 81       	ldd	r24, Y+1	; 0x01
   1b3b2:	8f bf       	out	0x3f, r24	; 63
   1b3b4:	8c 81       	ldd	r24, Y+4	; 0x04
   1b3b6:	9d 81       	ldd	r25, Y+5	; 0x05
   1b3b8:	25 96       	adiw	r28, 0x05	; 5
   1b3ba:	cd bf       	out	0x3d, r28	; 61
   1b3bc:	de bf       	out	0x3e, r29	; 62
   1b3be:	df 91       	pop	r29
   1b3c0:	cf 91       	pop	r28
   1b3c2:	1f 91       	pop	r17
   1b3c4:	0f 91       	pop	r16
   1b3c6:	08 95       	ret

0001b3c8 <utl_insertLink>:
   1b3c8:	cf 93       	push	r28
   1b3ca:	df 93       	push	r29
   1b3cc:	cd b7       	in	r28, 0x3d	; 61
   1b3ce:	de b7       	in	r29, 0x3e	; 62
   1b3d0:	25 97       	sbiw	r28, 0x05	; 5
   1b3d2:	cd bf       	out	0x3d, r28	; 61
   1b3d4:	de bf       	out	0x3e, r29	; 62
   1b3d6:	8a 83       	std	Y+2, r24	; 0x02
   1b3d8:	9b 83       	std	Y+3, r25	; 0x03
   1b3da:	6c 83       	std	Y+4, r22	; 0x04
   1b3dc:	7d 83       	std	Y+5, r23	; 0x05
   1b3de:	8f b7       	in	r24, 0x3f	; 63
   1b3e0:	89 83       	std	Y+1, r24	; 0x01
   1b3e2:	f8 94       	cli
   1b3e4:	2a 81       	ldd	r18, Y+2	; 0x02
   1b3e6:	3b 81       	ldd	r19, Y+3	; 0x03
   1b3e8:	f9 01       	movw	r30, r18
   1b3ea:	80 81       	ld	r24, Z
   1b3ec:	91 81       	ldd	r25, Z+1	; 0x01
   1b3ee:	fa ef       	ldi	r31, 0xFA	; 250
   1b3f0:	8e 3d       	cpi	r24, 0xDE	; 222
   1b3f2:	9f 07       	cpc	r25, r31
   1b3f4:	09 f0       	breq	.+2      	; 0x1b3f8 <utl_insertLink+0x30>
   1b3f6:	4c c0       	rjmp	.+152    	; 0x1b490 <utl_insertLink+0xc8>
   1b3f8:	8c 81       	ldd	r24, Y+4	; 0x04
   1b3fa:	9d 81       	ldd	r25, Y+5	; 0x05
   1b3fc:	fc 01       	movw	r30, r24
   1b3fe:	64 81       	ldd	r22, Z+4	; 0x04
   1b400:	75 81       	ldd	r23, Z+5	; 0x05
   1b402:	61 15       	cp	r22, r1
   1b404:	71 05       	cpc	r23, r1
   1b406:	21 f0       	breq	.+8      	; 0x1b410 <utl_insertLink+0x48>
   1b408:	89 81       	ldd	r24, Y+1	; 0x01
   1b40a:	8f bf       	out	0x3f, r24	; 63
   1b40c:	8c ef       	ldi	r24, 0xFC	; 252
   1b40e:	43 c0       	rjmp	.+134    	; 0x1b496 <utl_insertLink+0xce>
   1b410:	6a 81       	ldd	r22, Y+2	; 0x02
   1b412:	7b 81       	ldd	r23, Y+3	; 0x03
   1b414:	fc 01       	movw	r30, r24
   1b416:	64 83       	std	Z+4, r22	; 0x04
   1b418:	75 83       	std	Z+5, r23	; 0x05
   1b41a:	f9 01       	movw	r30, r18
   1b41c:	a0 85       	ldd	r26, Z+8	; 0x08
   1b41e:	b1 85       	ldd	r27, Z+9	; 0x09
   1b420:	62 85       	ldd	r22, Z+10	; 0x0a
   1b422:	73 85       	ldd	r23, Z+11	; 0x0b
   1b424:	fc 01       	movw	r30, r24
   1b426:	10 97       	sbiw	r26, 0x00	; 0
   1b428:	59 f4       	brne	.+22     	; 0x1b440 <utl_insertLink+0x78>
   1b42a:	61 15       	cp	r22, r1
   1b42c:	71 05       	cpc	r23, r1
   1b42e:	41 f4       	brne	.+16     	; 0x1b440 <utl_insertLink+0x78>
   1b430:	82 87       	std	Z+10, r24	; 0x0a
   1b432:	93 87       	std	Z+11, r25	; 0x0b
   1b434:	80 87       	std	Z+8, r24	; 0x08
   1b436:	91 87       	std	Z+9, r25	; 0x09
   1b438:	f9 01       	movw	r30, r18
   1b43a:	80 87       	std	Z+8, r24	; 0x08
   1b43c:	91 87       	std	Z+9, r25	; 0x09
   1b43e:	0e c0       	rjmp	.+28     	; 0x1b45c <utl_insertLink+0x94>
   1b440:	62 87       	std	Z+10, r22	; 0x0a
   1b442:	73 87       	std	Z+11, r23	; 0x0b
   1b444:	a0 87       	std	Z+8, r26	; 0x08
   1b446:	b1 87       	std	Z+9, r27	; 0x09
   1b448:	1a 96       	adiw	r26, 0x0a	; 10
   1b44a:	8d 93       	st	X+, r24
   1b44c:	9c 93       	st	X, r25
   1b44e:	1b 97       	sbiw	r26, 0x0b	; 11
   1b450:	fb 01       	movw	r30, r22
   1b452:	80 87       	std	Z+8, r24	; 0x08
   1b454:	91 87       	std	Z+9, r25	; 0x09
   1b456:	f9 01       	movw	r30, r18
   1b458:	44 23       	and	r20, r20
   1b45a:	19 f0       	breq	.+6      	; 0x1b462 <utl_insertLink+0x9a>
   1b45c:	82 87       	std	Z+10, r24	; 0x0a
   1b45e:	93 87       	std	Z+11, r25	; 0x0b
   1b460:	02 c0       	rjmp	.+4      	; 0x1b466 <utl_insertLink+0x9e>
   1b462:	80 87       	std	Z+8, r24	; 0x08
   1b464:	91 87       	std	Z+9, r25	; 0x09
   1b466:	f9 01       	movw	r30, r18
   1b468:	42 81       	ldd	r20, Z+2	; 0x02
   1b46a:	53 81       	ldd	r21, Z+3	; 0x03
   1b46c:	4f 5f       	subi	r20, 0xFF	; 255
   1b46e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b470:	42 83       	std	Z+2, r20	; 0x02
   1b472:	53 83       	std	Z+3, r21	; 0x03
   1b474:	44 81       	ldd	r20, Z+4	; 0x04
   1b476:	55 81       	ldd	r21, Z+5	; 0x05
   1b478:	fc 01       	movw	r30, r24
   1b47a:	86 81       	ldd	r24, Z+6	; 0x06
   1b47c:	97 81       	ldd	r25, Z+7	; 0x07
   1b47e:	48 0f       	add	r20, r24
   1b480:	59 1f       	adc	r21, r25
   1b482:	f9 01       	movw	r30, r18
   1b484:	44 83       	std	Z+4, r20	; 0x04
   1b486:	55 83       	std	Z+5, r21	; 0x05
   1b488:	89 81       	ldd	r24, Y+1	; 0x01
   1b48a:	8f bf       	out	0x3f, r24	; 63
   1b48c:	80 e0       	ldi	r24, 0x00	; 0
   1b48e:	03 c0       	rjmp	.+6      	; 0x1b496 <utl_insertLink+0xce>
   1b490:	89 81       	ldd	r24, Y+1	; 0x01
   1b492:	8f bf       	out	0x3f, r24	; 63
   1b494:	8d ef       	ldi	r24, 0xFD	; 253
   1b496:	25 96       	adiw	r28, 0x05	; 5
   1b498:	cd bf       	out	0x3d, r28	; 61
   1b49a:	de bf       	out	0x3e, r29	; 62
   1b49c:	df 91       	pop	r29
   1b49e:	cf 91       	pop	r28
   1b4a0:	08 95       	ret

0001b4a2 <utl_destroyLink>:
   1b4a2:	0f 93       	push	r16
   1b4a4:	1f 93       	push	r17
   1b4a6:	cf 93       	push	r28
   1b4a8:	df 93       	push	r29
   1b4aa:	cd b7       	in	r28, 0x3d	; 61
   1b4ac:	de b7       	in	r29, 0x3e	; 62
   1b4ae:	27 97       	sbiw	r28, 0x07	; 7
   1b4b0:	cd bf       	out	0x3d, r28	; 61
   1b4b2:	de bf       	out	0x3e, r29	; 62
   1b4b4:	8c 83       	std	Y+4, r24	; 0x04
   1b4b6:	9d 83       	std	Y+5, r25	; 0x05
   1b4b8:	6e 83       	std	Y+6, r22	; 0x06
   1b4ba:	7f 83       	std	Y+7, r23	; 0x07
   1b4bc:	8f b7       	in	r24, 0x3f	; 63
   1b4be:	89 83       	std	Y+1, r24	; 0x01
   1b4c0:	f8 94       	cli
   1b4c2:	4c 81       	ldd	r20, Y+4	; 0x04
   1b4c4:	5d 81       	ldd	r21, Y+5	; 0x05
   1b4c6:	da 01       	movw	r26, r20
   1b4c8:	8d 91       	ld	r24, X+
   1b4ca:	9c 91       	ld	r25, X
   1b4cc:	11 97       	sbiw	r26, 0x01	; 1
   1b4ce:	ba ef       	ldi	r27, 0xFA	; 250
   1b4d0:	8e 3d       	cpi	r24, 0xDE	; 222
   1b4d2:	9b 07       	cpc	r25, r27
   1b4d4:	09 f0       	breq	.+2      	; 0x1b4d8 <utl_destroyLink+0x36>
   1b4d6:	8c c0       	rjmp	.+280    	; 0x1b5f0 <utl_destroyLink+0x14e>
   1b4d8:	6e 81       	ldd	r22, Y+6	; 0x06
   1b4da:	7f 81       	ldd	r23, Y+7	; 0x07
   1b4dc:	6a 83       	std	Y+2, r22	; 0x02
   1b4de:	7b 83       	std	Y+3, r23	; 0x03
   1b4e0:	ee 81       	ldd	r30, Y+6	; 0x06
   1b4e2:	ff 81       	ldd	r31, Y+7	; 0x07
   1b4e4:	2c 81       	ldd	r18, Y+4	; 0x04
   1b4e6:	3d 81       	ldd	r19, Y+5	; 0x05
   1b4e8:	84 81       	ldd	r24, Z+4	; 0x04
   1b4ea:	95 81       	ldd	r25, Z+5	; 0x05
   1b4ec:	82 17       	cp	r24, r18
   1b4ee:	93 07       	cpc	r25, r19
   1b4f0:	21 f0       	breq	.+8      	; 0x1b4fa <utl_destroyLink+0x58>
   1b4f2:	89 81       	ldd	r24, Y+1	; 0x01
   1b4f4:	8f bf       	out	0x3f, r24	; 63
   1b4f6:	8e ef       	ldi	r24, 0xFE	; 254
   1b4f8:	7e c0       	rjmp	.+252    	; 0x1b5f6 <utl_destroyLink+0x154>
   1b4fa:	fb 01       	movw	r30, r22
   1b4fc:	22 85       	ldd	r18, Z+10	; 0x0a
   1b4fe:	33 85       	ldd	r19, Z+11	; 0x0b
   1b500:	20 93 1b 2c 	sts	0x2C1B, r18
   1b504:	30 93 1c 2c 	sts	0x2C1C, r19
   1b508:	00 84       	ldd	r0, Z+8	; 0x08
   1b50a:	f1 85       	ldd	r31, Z+9	; 0x09
   1b50c:	e0 2d       	mov	r30, r0
   1b50e:	e0 93 1d 2c 	sts	0x2C1D, r30
   1b512:	f0 93 1e 2c 	sts	0x2C1E, r31
   1b516:	6e 17       	cp	r22, r30
   1b518:	7f 07       	cpc	r23, r31
   1b51a:	e9 f0       	breq	.+58     	; 0x1b556 <utl_destroyLink+0xb4>
   1b51c:	d9 01       	movw	r26, r18
   1b51e:	18 96       	adiw	r26, 0x08	; 8
   1b520:	ed 93       	st	X+, r30
   1b522:	fc 93       	st	X, r31
   1b524:	19 97       	sbiw	r26, 0x09	; 9
   1b526:	22 87       	std	Z+10, r18	; 0x0a
   1b528:	33 87       	std	Z+11, r19	; 0x0b
   1b52a:	da 01       	movw	r26, r20
   1b52c:	18 96       	adiw	r26, 0x08	; 8
   1b52e:	8d 91       	ld	r24, X+
   1b530:	9c 91       	ld	r25, X
   1b532:	19 97       	sbiw	r26, 0x09	; 9
   1b534:	68 17       	cp	r22, r24
   1b536:	79 07       	cpc	r23, r25
   1b538:	29 f4       	brne	.+10     	; 0x1b544 <utl_destroyLink+0xa2>
   1b53a:	18 96       	adiw	r26, 0x08	; 8
   1b53c:	ed 93       	st	X+, r30
   1b53e:	fc 93       	st	X, r31
   1b540:	19 97       	sbiw	r26, 0x09	; 9
   1b542:	12 c0       	rjmp	.+36     	; 0x1b568 <utl_destroyLink+0xc6>
   1b544:	fa 01       	movw	r30, r20
   1b546:	82 85       	ldd	r24, Z+10	; 0x0a
   1b548:	93 85       	ldd	r25, Z+11	; 0x0b
   1b54a:	68 17       	cp	r22, r24
   1b54c:	79 07       	cpc	r23, r25
   1b54e:	61 f4       	brne	.+24     	; 0x1b568 <utl_destroyLink+0xc6>
   1b550:	22 87       	std	Z+10, r18	; 0x0a
   1b552:	33 87       	std	Z+11, r19	; 0x0b
   1b554:	09 c0       	rjmp	.+18     	; 0x1b568 <utl_destroyLink+0xc6>
   1b556:	da 01       	movw	r26, r20
   1b558:	18 96       	adiw	r26, 0x08	; 8
   1b55a:	1d 92       	st	X+, r1
   1b55c:	1c 92       	st	X, r1
   1b55e:	19 97       	sbiw	r26, 0x09	; 9
   1b560:	1a 96       	adiw	r26, 0x0a	; 10
   1b562:	1d 92       	st	X+, r1
   1b564:	1c 92       	st	X, r1
   1b566:	1b 97       	sbiw	r26, 0x0b	; 11
   1b568:	fa 01       	movw	r30, r20
   1b56a:	82 81       	ldd	r24, Z+2	; 0x02
   1b56c:	93 81       	ldd	r25, Z+3	; 0x03
   1b56e:	01 97       	sbiw	r24, 0x01	; 1
   1b570:	82 83       	std	Z+2, r24	; 0x02
   1b572:	93 83       	std	Z+3, r25	; 0x03
   1b574:	db 01       	movw	r26, r22
   1b576:	16 96       	adiw	r26, 0x06	; 6
   1b578:	2d 91       	ld	r18, X+
   1b57a:	3c 91       	ld	r19, X
   1b57c:	17 97       	sbiw	r26, 0x07	; 7
   1b57e:	84 81       	ldd	r24, Z+4	; 0x04
   1b580:	95 81       	ldd	r25, Z+5	; 0x05
   1b582:	82 1b       	sub	r24, r18
   1b584:	93 0b       	sbc	r25, r19
   1b586:	84 83       	std	Z+4, r24	; 0x04
   1b588:	95 83       	std	Z+5, r25	; 0x05
   1b58a:	89 01       	movw	r16, r18
   1b58c:	20 e0       	ldi	r18, 0x00	; 0
   1b58e:	30 e0       	ldi	r19, 0x00	; 0
   1b590:	80 91 17 2c 	lds	r24, 0x2C17
   1b594:	90 91 18 2c 	lds	r25, 0x2C18
   1b598:	a0 91 19 2c 	lds	r26, 0x2C19
   1b59c:	b0 91 1a 2c 	lds	r27, 0x2C1A
   1b5a0:	80 1b       	sub	r24, r16
   1b5a2:	91 0b       	sbc	r25, r17
   1b5a4:	a2 0b       	sbc	r26, r18
   1b5a6:	b3 0b       	sbc	r27, r19
   1b5a8:	80 93 17 2c 	sts	0x2C17, r24
   1b5ac:	90 93 18 2c 	sts	0x2C18, r25
   1b5b0:	a0 93 19 2c 	sts	0x2C19, r26
   1b5b4:	b0 93 1a 2c 	sts	0x2C1A, r27
   1b5b8:	cb 01       	movw	r24, r22
   1b5ba:	0e 94 fd f9 	call	0x1f3fa	; 0x1f3fa <arb_free>
   1b5be:	ea 81       	ldd	r30, Y+2	; 0x02
   1b5c0:	fb 81       	ldd	r31, Y+3	; 0x03
   1b5c2:	42 81       	ldd	r20, Z+2	; 0x02
   1b5c4:	53 81       	ldd	r21, Z+3	; 0x03
   1b5c6:	80 81       	ld	r24, Z
   1b5c8:	91 81       	ldd	r25, Z+1	; 0x01
   1b5ca:	60 e0       	ldi	r22, 0x00	; 0
   1b5cc:	70 e0       	ldi	r23, 0x00	; 0
   1b5ce:	0e 94 10 f7 	call	0x1ee20	; 0x1ee20 <memset>
   1b5d2:	ce 01       	movw	r24, r28
   1b5d4:	02 96       	adiw	r24, 0x02	; 2
   1b5d6:	0e 94 fd f9 	call	0x1f3fa	; 0x1f3fa <arb_free>
   1b5da:	ea 81       	ldd	r30, Y+2	; 0x02
   1b5dc:	fb 81       	ldd	r31, Y+3	; 0x03
   1b5de:	8c e0       	ldi	r24, 0x0C	; 12
   1b5e0:	df 01       	movw	r26, r30
   1b5e2:	1d 92       	st	X+, r1
   1b5e4:	8a 95       	dec	r24
   1b5e6:	e9 f7       	brne	.-6      	; 0x1b5e2 <utl_destroyLink+0x140>
   1b5e8:	89 81       	ldd	r24, Y+1	; 0x01
   1b5ea:	8f bf       	out	0x3f, r24	; 63
   1b5ec:	80 e0       	ldi	r24, 0x00	; 0
   1b5ee:	03 c0       	rjmp	.+6      	; 0x1b5f6 <utl_destroyLink+0x154>
   1b5f0:	89 81       	ldd	r24, Y+1	; 0x01
   1b5f2:	8f bf       	out	0x3f, r24	; 63
   1b5f4:	8d ef       	ldi	r24, 0xFD	; 253
   1b5f6:	27 96       	adiw	r28, 0x07	; 7
   1b5f8:	cd bf       	out	0x3d, r28	; 61
   1b5fa:	de bf       	out	0x3e, r29	; 62
   1b5fc:	df 91       	pop	r29
   1b5fe:	cf 91       	pop	r28
   1b600:	1f 91       	pop	r17
   1b602:	0f 91       	pop	r16
   1b604:	08 95       	ret

0001b606 <utl_removeLink>:
   1b606:	cf 93       	push	r28
   1b608:	df 93       	push	r29
   1b60a:	cd b7       	in	r28, 0x3d	; 61
   1b60c:	de b7       	in	r29, 0x3e	; 62
   1b60e:	25 97       	sbiw	r28, 0x05	; 5
   1b610:	cd bf       	out	0x3d, r28	; 61
   1b612:	de bf       	out	0x3e, r29	; 62
   1b614:	8a 83       	std	Y+2, r24	; 0x02
   1b616:	9b 83       	std	Y+3, r25	; 0x03
   1b618:	6c 83       	std	Y+4, r22	; 0x04
   1b61a:	7d 83       	std	Y+5, r23	; 0x05
   1b61c:	8f b7       	in	r24, 0x3f	; 63
   1b61e:	89 83       	std	Y+1, r24	; 0x01
   1b620:	f8 94       	cli
   1b622:	4a 81       	ldd	r20, Y+2	; 0x02
   1b624:	5b 81       	ldd	r21, Y+3	; 0x03
   1b626:	da 01       	movw	r26, r20
   1b628:	8d 91       	ld	r24, X+
   1b62a:	9c 91       	ld	r25, X
   1b62c:	11 97       	sbiw	r26, 0x01	; 1
   1b62e:	ba ef       	ldi	r27, 0xFA	; 250
   1b630:	8e 3d       	cpi	r24, 0xDE	; 222
   1b632:	9b 07       	cpc	r25, r27
   1b634:	09 f0       	breq	.+2      	; 0x1b638 <utl_removeLink+0x32>
   1b636:	67 c0       	rjmp	.+206    	; 0x1b706 <utl_removeLink+0x100>
   1b638:	2c 81       	ldd	r18, Y+4	; 0x04
   1b63a:	3d 81       	ldd	r19, Y+5	; 0x05
   1b63c:	ec 81       	ldd	r30, Y+4	; 0x04
   1b63e:	fd 81       	ldd	r31, Y+5	; 0x05
   1b640:	6a 81       	ldd	r22, Y+2	; 0x02
   1b642:	7b 81       	ldd	r23, Y+3	; 0x03
   1b644:	84 81       	ldd	r24, Z+4	; 0x04
   1b646:	95 81       	ldd	r25, Z+5	; 0x05
   1b648:	86 17       	cp	r24, r22
   1b64a:	97 07       	cpc	r25, r23
   1b64c:	21 f0       	breq	.+8      	; 0x1b656 <utl_removeLink+0x50>
   1b64e:	89 81       	ldd	r24, Y+1	; 0x01
   1b650:	8f bf       	out	0x3f, r24	; 63
   1b652:	8e ef       	ldi	r24, 0xFE	; 254
   1b654:	5b c0       	rjmp	.+182    	; 0x1b70c <utl_removeLink+0x106>
   1b656:	f9 01       	movw	r30, r18
   1b658:	14 82       	std	Z+4, r1	; 0x04
   1b65a:	15 82       	std	Z+5, r1	; 0x05
   1b65c:	62 85       	ldd	r22, Z+10	; 0x0a
   1b65e:	73 85       	ldd	r23, Z+11	; 0x0b
   1b660:	60 93 1f 2c 	sts	0x2C1F, r22
   1b664:	70 93 20 2c 	sts	0x2C20, r23
   1b668:	00 84       	ldd	r0, Z+8	; 0x08
   1b66a:	f1 85       	ldd	r31, Z+9	; 0x09
   1b66c:	e0 2d       	mov	r30, r0
   1b66e:	e0 93 21 2c 	sts	0x2C21, r30
   1b672:	f0 93 22 2c 	sts	0x2C22, r31
   1b676:	2e 17       	cp	r18, r30
   1b678:	3f 07       	cpc	r19, r31
   1b67a:	e9 f0       	breq	.+58     	; 0x1b6b6 <utl_removeLink+0xb0>
   1b67c:	db 01       	movw	r26, r22
   1b67e:	18 96       	adiw	r26, 0x08	; 8
   1b680:	ed 93       	st	X+, r30
   1b682:	fc 93       	st	X, r31
   1b684:	19 97       	sbiw	r26, 0x09	; 9
   1b686:	62 87       	std	Z+10, r22	; 0x0a
   1b688:	73 87       	std	Z+11, r23	; 0x0b
   1b68a:	da 01       	movw	r26, r20
   1b68c:	18 96       	adiw	r26, 0x08	; 8
   1b68e:	8d 91       	ld	r24, X+
   1b690:	9c 91       	ld	r25, X
   1b692:	19 97       	sbiw	r26, 0x09	; 9
   1b694:	28 17       	cp	r18, r24
   1b696:	39 07       	cpc	r19, r25
   1b698:	29 f4       	brne	.+10     	; 0x1b6a4 <utl_removeLink+0x9e>
   1b69a:	18 96       	adiw	r26, 0x08	; 8
   1b69c:	ed 93       	st	X+, r30
   1b69e:	fc 93       	st	X, r31
   1b6a0:	19 97       	sbiw	r26, 0x09	; 9
   1b6a2:	12 c0       	rjmp	.+36     	; 0x1b6c8 <utl_removeLink+0xc2>
   1b6a4:	fa 01       	movw	r30, r20
   1b6a6:	82 85       	ldd	r24, Z+10	; 0x0a
   1b6a8:	93 85       	ldd	r25, Z+11	; 0x0b
   1b6aa:	28 17       	cp	r18, r24
   1b6ac:	39 07       	cpc	r19, r25
   1b6ae:	61 f4       	brne	.+24     	; 0x1b6c8 <utl_removeLink+0xc2>
   1b6b0:	62 87       	std	Z+10, r22	; 0x0a
   1b6b2:	73 87       	std	Z+11, r23	; 0x0b
   1b6b4:	09 c0       	rjmp	.+18     	; 0x1b6c8 <utl_removeLink+0xc2>
   1b6b6:	da 01       	movw	r26, r20
   1b6b8:	18 96       	adiw	r26, 0x08	; 8
   1b6ba:	1d 92       	st	X+, r1
   1b6bc:	1c 92       	st	X, r1
   1b6be:	19 97       	sbiw	r26, 0x09	; 9
   1b6c0:	1a 96       	adiw	r26, 0x0a	; 10
   1b6c2:	1d 92       	st	X+, r1
   1b6c4:	1c 92       	st	X, r1
   1b6c6:	1b 97       	sbiw	r26, 0x0b	; 11
   1b6c8:	f9 01       	movw	r30, r18
   1b6ca:	14 82       	std	Z+4, r1	; 0x04
   1b6cc:	15 82       	std	Z+5, r1	; 0x05
   1b6ce:	10 86       	std	Z+8, r1	; 0x08
   1b6d0:	11 86       	std	Z+9, r1	; 0x09
   1b6d2:	12 86       	std	Z+10, r1	; 0x0a
   1b6d4:	13 86       	std	Z+11, r1	; 0x0b
   1b6d6:	da 01       	movw	r26, r20
   1b6d8:	12 96       	adiw	r26, 0x02	; 2
   1b6da:	8d 91       	ld	r24, X+
   1b6dc:	9c 91       	ld	r25, X
   1b6de:	13 97       	sbiw	r26, 0x03	; 3
   1b6e0:	01 97       	sbiw	r24, 0x01	; 1
   1b6e2:	12 96       	adiw	r26, 0x02	; 2
   1b6e4:	8d 93       	st	X+, r24
   1b6e6:	9c 93       	st	X, r25
   1b6e8:	13 97       	sbiw	r26, 0x03	; 3
   1b6ea:	14 96       	adiw	r26, 0x04	; 4
   1b6ec:	8d 91       	ld	r24, X+
   1b6ee:	9c 91       	ld	r25, X
   1b6f0:	15 97       	sbiw	r26, 0x05	; 5
   1b6f2:	26 81       	ldd	r18, Z+6	; 0x06
   1b6f4:	37 81       	ldd	r19, Z+7	; 0x07
   1b6f6:	82 1b       	sub	r24, r18
   1b6f8:	93 0b       	sbc	r25, r19
   1b6fa:	14 96       	adiw	r26, 0x04	; 4
   1b6fc:	8d 93       	st	X+, r24
   1b6fe:	9c 93       	st	X, r25
   1b700:	15 97       	sbiw	r26, 0x05	; 5
   1b702:	80 e0       	ldi	r24, 0x00	; 0
   1b704:	03 c0       	rjmp	.+6      	; 0x1b70c <utl_removeLink+0x106>
   1b706:	89 81       	ldd	r24, Y+1	; 0x01
   1b708:	8f bf       	out	0x3f, r24	; 63
   1b70a:	8d ef       	ldi	r24, 0xFD	; 253
   1b70c:	25 96       	adiw	r28, 0x05	; 5
   1b70e:	cd bf       	out	0x3d, r28	; 61
   1b710:	de bf       	out	0x3e, r29	; 62
   1b712:	df 91       	pop	r29
   1b714:	cf 91       	pop	r28
   1b716:	08 95       	ret

0001b718 <utl_cos16_16>:
   1b718:	cf 92       	push	r12
   1b71a:	df 92       	push	r13
   1b71c:	ef 92       	push	r14
   1b71e:	ff 92       	push	r15
   1b720:	0f 93       	push	r16
   1b722:	1f 93       	push	r17
   1b724:	ac 01       	movw	r20, r24
   1b726:	05 2f       	mov	r16, r21
   1b728:	02 95       	swap	r16
   1b72a:	0f 70       	andi	r16, 0x0F	; 15
   1b72c:	20 2f       	mov	r18, r16
   1b72e:	30 e0       	ldi	r19, 0x00	; 0
   1b730:	f9 01       	movw	r30, r18
   1b732:	ee 0f       	add	r30, r30
   1b734:	ff 1f       	adc	r31, r31
   1b736:	e3 54       	subi	r30, 0x43	; 67
   1b738:	fd 4d       	sbci	r31, 0xDD	; 221
   1b73a:	80 81       	ld	r24, Z
   1b73c:	91 81       	ldd	r25, Z+1	; 0x01
   1b73e:	6c 01       	movw	r12, r24
   1b740:	ee 24       	eor	r14, r14
   1b742:	d7 fc       	sbrc	r13, 7
   1b744:	e0 94       	com	r14
   1b746:	fe 2c       	mov	r15, r14
   1b748:	f9 01       	movw	r30, r18
   1b74a:	ee 0f       	add	r30, r30
   1b74c:	ff 1f       	adc	r31, r31
   1b74e:	e1 54       	subi	r30, 0x41	; 65
   1b750:	fd 4d       	sbci	r31, 0xDD	; 221
   1b752:	60 81       	ld	r22, Z
   1b754:	71 81       	ldd	r23, Z+1	; 0x01
   1b756:	68 1b       	sub	r22, r24
   1b758:	79 0b       	sbc	r23, r25
   1b75a:	88 27       	eor	r24, r24
   1b75c:	77 fd       	sbrc	r23, 7
   1b75e:	80 95       	com	r24
   1b760:	98 2f       	mov	r25, r24
   1b762:	10 e0       	ldi	r17, 0x00	; 0
   1b764:	20 e0       	ldi	r18, 0x00	; 0
   1b766:	30 e0       	ldi	r19, 0x00	; 0
   1b768:	ac e0       	ldi	r26, 0x0C	; 12
   1b76a:	00 0f       	add	r16, r16
   1b76c:	11 1f       	adc	r17, r17
   1b76e:	22 1f       	adc	r18, r18
   1b770:	33 1f       	adc	r19, r19
   1b772:	aa 95       	dec	r26
   1b774:	d1 f7       	brne	.-12     	; 0x1b76a <utl_cos16_16+0x52>
   1b776:	40 1b       	sub	r20, r16
   1b778:	51 0b       	sbc	r21, r17
   1b77a:	fa 01       	movw	r30, r20
   1b77c:	9f 01       	movw	r18, r30
   1b77e:	44 27       	eor	r20, r20
   1b780:	37 fd       	sbrc	r19, 7
   1b782:	40 95       	com	r20
   1b784:	54 2f       	mov	r21, r20
   1b786:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1b78a:	dc 01       	movw	r26, r24
   1b78c:	cb 01       	movw	r24, r22
   1b78e:	b7 ff       	sbrs	r27, 7
   1b790:	09 c0       	rjmp	.+18     	; 0x1b7a4 <utl_cos16_16+0x8c>
   1b792:	b0 95       	com	r27
   1b794:	a0 95       	com	r26
   1b796:	90 95       	com	r25
   1b798:	81 95       	neg	r24
   1b79a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b79c:	af 4f       	sbci	r26, 0xFF	; 255
   1b79e:	bf 4f       	sbci	r27, 0xFF	; 255
   1b7a0:	2f ef       	ldi	r18, 0xFF	; 255
   1b7a2:	01 c0       	rjmp	.+2      	; 0x1b7a6 <utl_cos16_16+0x8e>
   1b7a4:	21 e0       	ldi	r18, 0x01	; 1
   1b7a6:	44 e0       	ldi	r20, 0x04	; 4
   1b7a8:	88 0f       	add	r24, r24
   1b7aa:	99 1f       	adc	r25, r25
   1b7ac:	aa 1f       	adc	r26, r26
   1b7ae:	bb 1f       	adc	r27, r27
   1b7b0:	4a 95       	dec	r20
   1b7b2:	d1 f7       	brne	.-12     	; 0x1b7a8 <utl_cos16_16+0x90>
   1b7b4:	2f 3f       	cpi	r18, 0xFF	; 255
   1b7b6:	29 f4       	brne	.+10     	; 0x1b7c2 <utl_cos16_16+0xaa>
   1b7b8:	44 27       	eor	r20, r20
   1b7ba:	55 27       	eor	r21, r21
   1b7bc:	4a 1b       	sub	r20, r26
   1b7be:	5b 0b       	sbc	r21, r27
   1b7c0:	01 c0       	rjmp	.+2      	; 0x1b7c4 <utl_cos16_16+0xac>
   1b7c2:	ad 01       	movw	r20, r26
   1b7c4:	66 27       	eor	r22, r22
   1b7c6:	57 fd       	sbrc	r21, 7
   1b7c8:	60 95       	com	r22
   1b7ca:	76 2f       	mov	r23, r22
   1b7cc:	4c 0d       	add	r20, r12
   1b7ce:	5d 1d       	adc	r21, r13
   1b7d0:	6e 1d       	adc	r22, r14
   1b7d2:	7f 1d       	adc	r23, r15
   1b7d4:	ca 01       	movw	r24, r20
   1b7d6:	1f 91       	pop	r17
   1b7d8:	0f 91       	pop	r16
   1b7da:	ff 90       	pop	r15
   1b7dc:	ef 90       	pop	r14
   1b7de:	df 90       	pop	r13
   1b7e0:	cf 90       	pop	r12
   1b7e2:	08 95       	ret

0001b7e4 <utl_sin16_16>:
   1b7e4:	ac 01       	movw	r20, r24
   1b7e6:	60 e0       	ldi	r22, 0x00	; 0
   1b7e8:	70 e0       	ldi	r23, 0x00	; 0
   1b7ea:	db 01       	movw	r26, r22
   1b7ec:	ca 01       	movw	r24, r20
   1b7ee:	80 50       	subi	r24, 0x00	; 0
   1b7f0:	90 44       	sbci	r25, 0x40	; 64
   1b7f2:	a0 40       	sbci	r26, 0x00	; 0
   1b7f4:	b0 40       	sbci	r27, 0x00	; 0
   1b7f6:	b7 ff       	sbrs	r27, 7
   1b7f8:	06 c0       	rjmp	.+12     	; 0x1b806 <utl_sin16_16+0x22>
   1b7fa:	db 01       	movw	r26, r22
   1b7fc:	ca 01       	movw	r24, r20
   1b7fe:	80 50       	subi	r24, 0x00	; 0
   1b800:	90 44       	sbci	r25, 0x40	; 64
   1b802:	af 4f       	sbci	r26, 0xFF	; 255
   1b804:	bf 4f       	sbci	r27, 0xFF	; 255
   1b806:	0e 94 8c db 	call	0x1b718	; 0x1b718 <utl_cos16_16>
   1b80a:	08 95       	ret

0001b80c <utl_sqrt32_32>:
   1b80c:	8f 92       	push	r8
   1b80e:	9f 92       	push	r9
   1b810:	af 92       	push	r10
   1b812:	bf 92       	push	r11
   1b814:	cf 92       	push	r12
   1b816:	df 92       	push	r13
   1b818:	ef 92       	push	r14
   1b81a:	ff 92       	push	r15
   1b81c:	0f 93       	push	r16
   1b81e:	1f 93       	push	r17
   1b820:	cf 93       	push	r28
   1b822:	df 93       	push	r29
   1b824:	6b 01       	movw	r12, r22
   1b826:	7c 01       	movw	r14, r24
   1b828:	d4 2f       	mov	r29, r20
   1b82a:	61 15       	cp	r22, r1
   1b82c:	71 05       	cpc	r23, r1
   1b82e:	81 05       	cpc	r24, r1
   1b830:	91 05       	cpc	r25, r1
   1b832:	09 f4       	brne	.+2      	; 0x1b836 <utl_sqrt32_32+0x2a>
   1b834:	bb c0       	rjmp	.+374    	; 0x1b9ac <utl_sqrt32_32+0x1a0>
   1b836:	c0 e0       	ldi	r28, 0x00	; 0
   1b838:	05 c0       	rjmp	.+10     	; 0x1b844 <utl_sqrt32_32+0x38>
   1b83a:	cc 0c       	add	r12, r12
   1b83c:	dd 1c       	adc	r13, r13
   1b83e:	ee 1c       	adc	r14, r14
   1b840:	ff 1c       	adc	r15, r15
   1b842:	cf 5f       	subi	r28, 0xFF	; 255
   1b844:	81 e0       	ldi	r24, 0x01	; 1
   1b846:	c8 16       	cp	r12, r24
   1b848:	80 e2       	ldi	r24, 0x20	; 32
   1b84a:	d8 06       	cpc	r13, r24
   1b84c:	80 e0       	ldi	r24, 0x00	; 0
   1b84e:	e8 06       	cpc	r14, r24
   1b850:	80 e0       	ldi	r24, 0x00	; 0
   1b852:	f8 06       	cpc	r15, r24
   1b854:	90 f3       	brcs	.-28     	; 0x1b83a <utl_sqrt32_32+0x2e>
   1b856:	05 c0       	rjmp	.+10     	; 0x1b862 <utl_sqrt32_32+0x56>
   1b858:	f6 94       	lsr	r15
   1b85a:	e7 94       	ror	r14
   1b85c:	d7 94       	ror	r13
   1b85e:	c7 94       	ror	r12
   1b860:	c1 50       	subi	r28, 0x01	; 1
   1b862:	80 e0       	ldi	r24, 0x00	; 0
   1b864:	c8 16       	cp	r12, r24
   1b866:	88 e8       	ldi	r24, 0x88	; 136
   1b868:	d8 06       	cpc	r13, r24
   1b86a:	80 e0       	ldi	r24, 0x00	; 0
   1b86c:	e8 06       	cpc	r14, r24
   1b86e:	80 e0       	ldi	r24, 0x00	; 0
   1b870:	f8 06       	cpc	r15, r24
   1b872:	90 f7       	brcc	.-28     	; 0x1b858 <utl_sqrt32_32+0x4c>
   1b874:	c6 01       	movw	r24, r12
   1b876:	80 50       	subi	r24, 0x00	; 0
   1b878:	90 42       	sbci	r25, 0x20	; 32
   1b87a:	89 2f       	mov	r24, r25
   1b87c:	99 27       	eor	r25, r25
   1b87e:	86 95       	lsr	r24
   1b880:	86 95       	lsr	r24
   1b882:	86 95       	lsr	r24
   1b884:	8c 01       	movw	r16, r24
   1b886:	20 e0       	ldi	r18, 0x00	; 0
   1b888:	30 e0       	ldi	r19, 0x00	; 0
   1b88a:	fc 01       	movw	r30, r24
   1b88c:	ee 0f       	add	r30, r30
   1b88e:	ff 1f       	adc	r31, r31
   1b890:	e1 52       	subi	r30, 0x21	; 33
   1b892:	fd 4d       	sbci	r31, 0xDD	; 221
   1b894:	40 81       	ld	r20, Z
   1b896:	51 81       	ldd	r21, Z+1	; 0x01
   1b898:	4a 01       	movw	r8, r20
   1b89a:	aa 24       	eor	r10, r10
   1b89c:	bb 24       	eor	r11, r11
   1b89e:	d9 01       	movw	r26, r18
   1b8a0:	c8 01       	movw	r24, r16
   1b8a2:	01 96       	adiw	r24, 0x01	; 1
   1b8a4:	a1 1d       	adc	r26, r1
   1b8a6:	b1 1d       	adc	r27, r1
   1b8a8:	fc 01       	movw	r30, r24
   1b8aa:	ee 0f       	add	r30, r30
   1b8ac:	ff 1f       	adc	r31, r31
   1b8ae:	e1 52       	subi	r30, 0x21	; 33
   1b8b0:	fd 4d       	sbci	r31, 0xDD	; 221
   1b8b2:	60 81       	ld	r22, Z
   1b8b4:	71 81       	ldd	r23, Z+1	; 0x01
   1b8b6:	64 1b       	sub	r22, r20
   1b8b8:	75 0b       	sbc	r23, r21
   1b8ba:	88 27       	eor	r24, r24
   1b8bc:	77 fd       	sbrc	r23, 7
   1b8be:	80 95       	com	r24
   1b8c0:	98 2f       	mov	r25, r24
   1b8c2:	0c 5f       	subi	r16, 0xFC	; 252
   1b8c4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b8c6:	2f 4f       	sbci	r18, 0xFF	; 255
   1b8c8:	3f 4f       	sbci	r19, 0xFF	; 255
   1b8ca:	ab e0       	ldi	r26, 0x0B	; 11
   1b8cc:	00 0f       	add	r16, r16
   1b8ce:	11 1f       	adc	r17, r17
   1b8d0:	22 1f       	adc	r18, r18
   1b8d2:	33 1f       	adc	r19, r19
   1b8d4:	aa 95       	dec	r26
   1b8d6:	d1 f7       	brne	.-12     	; 0x1b8cc <utl_sqrt32_32+0xc0>
   1b8d8:	c0 1a       	sub	r12, r16
   1b8da:	d1 0a       	sbc	r13, r17
   1b8dc:	96 01       	movw	r18, r12
   1b8de:	44 27       	eor	r20, r20
   1b8e0:	37 fd       	sbrc	r19, 7
   1b8e2:	40 95       	com	r20
   1b8e4:	54 2f       	mov	r21, r20
   1b8e6:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1b8ea:	dc 01       	movw	r26, r24
   1b8ec:	cb 01       	movw	r24, r22
   1b8ee:	b7 ff       	sbrs	r27, 7
   1b8f0:	09 c0       	rjmp	.+18     	; 0x1b904 <utl_sqrt32_32+0xf8>
   1b8f2:	b0 95       	com	r27
   1b8f4:	a0 95       	com	r26
   1b8f6:	90 95       	com	r25
   1b8f8:	81 95       	neg	r24
   1b8fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1b8fc:	af 4f       	sbci	r26, 0xFF	; 255
   1b8fe:	bf 4f       	sbci	r27, 0xFF	; 255
   1b900:	2f ef       	ldi	r18, 0xFF	; 255
   1b902:	01 c0       	rjmp	.+2      	; 0x1b906 <utl_sqrt32_32+0xfa>
   1b904:	21 e0       	ldi	r18, 0x01	; 1
   1b906:	f5 e0       	ldi	r31, 0x05	; 5
   1b908:	88 0f       	add	r24, r24
   1b90a:	99 1f       	adc	r25, r25
   1b90c:	aa 1f       	adc	r26, r26
   1b90e:	bb 1f       	adc	r27, r27
   1b910:	fa 95       	dec	r31
   1b912:	d1 f7       	brne	.-12     	; 0x1b908 <utl_sqrt32_32+0xfc>
   1b914:	2f 3f       	cpi	r18, 0xFF	; 255
   1b916:	29 f4       	brne	.+10     	; 0x1b922 <utl_sqrt32_32+0x116>
   1b918:	cc 24       	eor	r12, r12
   1b91a:	dd 24       	eor	r13, r13
   1b91c:	ca 1a       	sub	r12, r26
   1b91e:	db 0a       	sbc	r13, r27
   1b920:	01 c0       	rjmp	.+2      	; 0x1b924 <utl_sqrt32_32+0x118>
   1b922:	6d 01       	movw	r12, r26
   1b924:	ee 24       	eor	r14, r14
   1b926:	d7 fc       	sbrc	r13, 7
   1b928:	e0 94       	com	r14
   1b92a:	fe 2c       	mov	r15, r14
   1b92c:	c8 0c       	add	r12, r8
   1b92e:	d9 1c       	adc	r13, r9
   1b930:	ea 1c       	adc	r14, r10
   1b932:	fb 1c       	adc	r15, r11
   1b934:	cd 1b       	sub	r28, r29
   1b936:	c1 5f       	subi	r28, 0xF1	; 241
   1b938:	1c 16       	cp	r1, r28
   1b93a:	e4 f4       	brge	.+56     	; 0x1b974 <utl_sqrt32_32+0x168>
   1b93c:	cf 30       	cpi	r28, 0x0F	; 15
   1b93e:	0c f0       	brlt	.+2      	; 0x1b942 <utl_sqrt32_32+0x136>
   1b940:	ce e0       	ldi	r28, 0x0E	; 14
   1b942:	dd 27       	eor	r29, r29
   1b944:	c7 fd       	sbrc	r28, 7
   1b946:	d0 95       	com	r29
   1b948:	cc 0f       	add	r28, r28
   1b94a:	dd 1f       	adc	r29, r29
   1b94c:	c7 50       	subi	r28, 0x07	; 7
   1b94e:	dd 4d       	sbci	r29, 0xDD	; 221
   1b950:	68 81       	ld	r22, Y
   1b952:	79 81       	ldd	r23, Y+1	; 0x01
   1b954:	80 e0       	ldi	r24, 0x00	; 0
   1b956:	90 e0       	ldi	r25, 0x00	; 0
   1b958:	a7 01       	movw	r20, r14
   1b95a:	96 01       	movw	r18, r12
   1b95c:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1b960:	6b 01       	movw	r12, r22
   1b962:	7c 01       	movw	r14, r24
   1b964:	ef e0       	ldi	r30, 0x0F	; 15
   1b966:	f5 94       	asr	r15
   1b968:	e7 94       	ror	r14
   1b96a:	d7 94       	ror	r13
   1b96c:	c7 94       	ror	r12
   1b96e:	ea 95       	dec	r30
   1b970:	d1 f7       	brne	.-12     	; 0x1b966 <utl_sqrt32_32+0x15a>
   1b972:	1f c0       	rjmp	.+62     	; 0x1b9b2 <utl_sqrt32_32+0x1a6>
   1b974:	cc 23       	and	r28, r28
   1b976:	e9 f0       	breq	.+58     	; 0x1b9b2 <utl_sqrt32_32+0x1a6>
   1b978:	c1 95       	neg	r28
   1b97a:	cf 30       	cpi	r28, 0x0F	; 15
   1b97c:	0c f0       	brlt	.+2      	; 0x1b980 <utl_sqrt32_32+0x174>
   1b97e:	ce e0       	ldi	r28, 0x0E	; 14
   1b980:	dd 27       	eor	r29, r29
   1b982:	c7 fd       	sbrc	r28, 7
   1b984:	d0 95       	com	r29
   1b986:	cc 0f       	add	r28, r28
   1b988:	dd 1f       	adc	r29, r29
   1b98a:	cb 5e       	subi	r28, 0xEB	; 235
   1b98c:	dc 4d       	sbci	r29, 0xDC	; 220
   1b98e:	28 81       	ld	r18, Y
   1b990:	39 81       	ldd	r19, Y+1	; 0x01
   1b992:	40 e0       	ldi	r20, 0x00	; 0
   1b994:	50 e0       	ldi	r21, 0x00	; 0
   1b996:	c7 01       	movw	r24, r14
   1b998:	b6 01       	movw	r22, r12
   1b99a:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1b99e:	c7 2e       	mov	r12, r23
   1b9a0:	d8 2e       	mov	r13, r24
   1b9a2:	e9 2e       	mov	r14, r25
   1b9a4:	ff 24       	eor	r15, r15
   1b9a6:	e7 fc       	sbrc	r14, 7
   1b9a8:	fa 94       	dec	r15
   1b9aa:	03 c0       	rjmp	.+6      	; 0x1b9b2 <utl_sqrt32_32+0x1a6>
   1b9ac:	cc 24       	eor	r12, r12
   1b9ae:	dd 24       	eor	r13, r13
   1b9b0:	76 01       	movw	r14, r12
   1b9b2:	b6 01       	movw	r22, r12
   1b9b4:	c7 01       	movw	r24, r14
   1b9b6:	df 91       	pop	r29
   1b9b8:	cf 91       	pop	r28
   1b9ba:	1f 91       	pop	r17
   1b9bc:	0f 91       	pop	r16
   1b9be:	ff 90       	pop	r15
   1b9c0:	ef 90       	pop	r14
   1b9c2:	df 90       	pop	r13
   1b9c4:	cf 90       	pop	r12
   1b9c6:	bf 90       	pop	r11
   1b9c8:	af 90       	pop	r10
   1b9ca:	9f 90       	pop	r9
   1b9cc:	8f 90       	pop	r8
   1b9ce:	08 95       	ret

0001b9d0 <utl_atan2_16>:
   1b9d0:	6f 92       	push	r6
   1b9d2:	7f 92       	push	r7
   1b9d4:	8f 92       	push	r8
   1b9d6:	9f 92       	push	r9
   1b9d8:	af 92       	push	r10
   1b9da:	bf 92       	push	r11
   1b9dc:	cf 92       	push	r12
   1b9de:	df 92       	push	r13
   1b9e0:	ef 92       	push	r14
   1b9e2:	ff 92       	push	r15
   1b9e4:	0f 93       	push	r16
   1b9e6:	1f 93       	push	r17
   1b9e8:	cf 93       	push	r28
   1b9ea:	df 93       	push	r29
   1b9ec:	8c 01       	movw	r16, r24
   1b9ee:	3b 01       	movw	r6, r22
   1b9f0:	cb 01       	movw	r24, r22
   1b9f2:	aa 27       	eor	r26, r26
   1b9f4:	97 fd       	sbrc	r25, 7
   1b9f6:	a0 95       	com	r26
   1b9f8:	ba 2f       	mov	r27, r26
   1b9fa:	b7 ff       	sbrs	r27, 7
   1b9fc:	07 c0       	rjmp	.+14     	; 0x1ba0c <utl_atan2_16+0x3c>
   1b9fe:	b0 95       	com	r27
   1ba00:	a0 95       	com	r26
   1ba02:	90 95       	com	r25
   1ba04:	81 95       	neg	r24
   1ba06:	9f 4f       	sbci	r25, 0xFF	; 255
   1ba08:	af 4f       	sbci	r26, 0xFF	; 255
   1ba0a:	bf 4f       	sbci	r27, 0xFF	; 255
   1ba0c:	ec 01       	movw	r28, r24
   1ba0e:	68 01       	movw	r12, r16
   1ba10:	ee 24       	eor	r14, r14
   1ba12:	d7 fc       	sbrc	r13, 7
   1ba14:	e0 94       	com	r14
   1ba16:	fe 2c       	mov	r15, r14
   1ba18:	f7 fe       	sbrs	r15, 7
   1ba1a:	08 c0       	rjmp	.+16     	; 0x1ba2c <utl_atan2_16+0x5c>
   1ba1c:	f0 94       	com	r15
   1ba1e:	e0 94       	com	r14
   1ba20:	d0 94       	com	r13
   1ba22:	c0 94       	com	r12
   1ba24:	c1 1c       	adc	r12, r1
   1ba26:	d1 1c       	adc	r13, r1
   1ba28:	e1 1c       	adc	r14, r1
   1ba2a:	f1 1c       	adc	r15, r1
   1ba2c:	cc 15       	cp	r28, r12
   1ba2e:	dd 05       	cpc	r29, r13
   1ba30:	08 f4       	brcc	.+2      	; 0x1ba34 <utl_atan2_16+0x64>
   1ba32:	71 c0       	rjmp	.+226    	; 0x1bb16 <utl_atan2_16+0x146>
   1ba34:	b6 01       	movw	r22, r12
   1ba36:	80 e0       	ldi	r24, 0x00	; 0
   1ba38:	90 e0       	ldi	r25, 0x00	; 0
   1ba3a:	2f ef       	ldi	r18, 0xFF	; 255
   1ba3c:	3f e7       	ldi	r19, 0x7F	; 127
   1ba3e:	40 e0       	ldi	r20, 0x00	; 0
   1ba40:	50 e0       	ldi	r21, 0x00	; 0
   1ba42:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1ba46:	9e 01       	movw	r18, r28
   1ba48:	2f 5f       	subi	r18, 0xFF	; 255
   1ba4a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ba4c:	40 e0       	ldi	r20, 0x00	; 0
   1ba4e:	50 e0       	ldi	r21, 0x00	; 0
   1ba50:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   1ba54:	e9 01       	movw	r28, r18
   1ba56:	f9 01       	movw	r30, r18
   1ba58:	ef 2f       	mov	r30, r31
   1ba5a:	ff 27       	eor	r31, r31
   1ba5c:	e6 95       	lsr	r30
   1ba5e:	e6 95       	lsr	r30
   1ba60:	e6 95       	lsr	r30
   1ba62:	af 01       	movw	r20, r30
   1ba64:	60 e0       	ldi	r22, 0x00	; 0
   1ba66:	70 e0       	ldi	r23, 0x00	; 0
   1ba68:	ee 0f       	add	r30, r30
   1ba6a:	ff 1f       	adc	r31, r31
   1ba6c:	ed 5c       	subi	r30, 0xCD	; 205
   1ba6e:	fc 4d       	sbci	r31, 0xDC	; 220
   1ba70:	20 81       	ld	r18, Z
   1ba72:	31 81       	ldd	r19, Z+1	; 0x01
   1ba74:	49 01       	movw	r8, r18
   1ba76:	aa 24       	eor	r10, r10
   1ba78:	bb 24       	eor	r11, r11
   1ba7a:	db 01       	movw	r26, r22
   1ba7c:	ca 01       	movw	r24, r20
   1ba7e:	01 96       	adiw	r24, 0x01	; 1
   1ba80:	a1 1d       	adc	r26, r1
   1ba82:	b1 1d       	adc	r27, r1
   1ba84:	88 0f       	add	r24, r24
   1ba86:	99 1f       	adc	r25, r25
   1ba88:	8d 5c       	subi	r24, 0xCD	; 205
   1ba8a:	9c 4d       	sbci	r25, 0xDC	; 220
   1ba8c:	fc 01       	movw	r30, r24
   1ba8e:	c0 80       	ld	r12, Z
   1ba90:	d1 80       	ldd	r13, Z+1	; 0x01
   1ba92:	c2 1a       	sub	r12, r18
   1ba94:	d3 0a       	sbc	r13, r19
   1ba96:	ee 24       	eor	r14, r14
   1ba98:	d7 fc       	sbrc	r13, 7
   1ba9a:	e0 94       	com	r14
   1ba9c:	fe 2c       	mov	r15, r14
   1ba9e:	db 01       	movw	r26, r22
   1baa0:	ca 01       	movw	r24, r20
   1baa2:	07 2e       	mov	r0, r23
   1baa4:	7b e0       	ldi	r23, 0x0B	; 11
   1baa6:	88 0f       	add	r24, r24
   1baa8:	99 1f       	adc	r25, r25
   1baaa:	aa 1f       	adc	r26, r26
   1baac:	bb 1f       	adc	r27, r27
   1baae:	7a 95       	dec	r23
   1bab0:	d1 f7       	brne	.-12     	; 0x1baa6 <utl_atan2_16+0xd6>
   1bab2:	70 2d       	mov	r23, r0
   1bab4:	9e 01       	movw	r18, r28
   1bab6:	28 1b       	sub	r18, r24
   1bab8:	39 0b       	sbc	r19, r25
   1baba:	44 27       	eor	r20, r20
   1babc:	37 fd       	sbrc	r19, 7
   1babe:	40 95       	com	r20
   1bac0:	54 2f       	mov	r21, r20
   1bac2:	c7 01       	movw	r24, r14
   1bac4:	b6 01       	movw	r22, r12
   1bac6:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1baca:	dc 01       	movw	r26, r24
   1bacc:	cb 01       	movw	r24, r22
   1bace:	b7 ff       	sbrs	r27, 7
   1bad0:	09 c0       	rjmp	.+18     	; 0x1bae4 <utl_atan2_16+0x114>
   1bad2:	b0 95       	com	r27
   1bad4:	a0 95       	com	r26
   1bad6:	90 95       	com	r25
   1bad8:	81 95       	neg	r24
   1bada:	9f 4f       	sbci	r25, 0xFF	; 255
   1badc:	af 4f       	sbci	r26, 0xFF	; 255
   1bade:	bf 4f       	sbci	r27, 0xFF	; 255
   1bae0:	2f ef       	ldi	r18, 0xFF	; 255
   1bae2:	01 c0       	rjmp	.+2      	; 0x1bae6 <utl_atan2_16+0x116>
   1bae4:	21 e0       	ldi	r18, 0x01	; 1
   1bae6:	35 e0       	ldi	r19, 0x05	; 5
   1bae8:	88 0f       	add	r24, r24
   1baea:	99 1f       	adc	r25, r25
   1baec:	aa 1f       	adc	r26, r26
   1baee:	bb 1f       	adc	r27, r27
   1baf0:	3a 95       	dec	r19
   1baf2:	d1 f7       	brne	.-12     	; 0x1bae8 <utl_atan2_16+0x118>
   1baf4:	2f 3f       	cpi	r18, 0xFF	; 255
   1baf6:	29 f4       	brne	.+10     	; 0x1bb02 <utl_atan2_16+0x132>
   1baf8:	88 27       	eor	r24, r24
   1bafa:	99 27       	eor	r25, r25
   1bafc:	8a 1b       	sub	r24, r26
   1bafe:	9b 0b       	sbc	r25, r27
   1bb00:	01 c0       	rjmp	.+2      	; 0x1bb04 <utl_atan2_16+0x134>
   1bb02:	cd 01       	movw	r24, r26
   1bb04:	aa 27       	eor	r26, r26
   1bb06:	97 fd       	sbrc	r25, 7
   1bb08:	a0 95       	com	r26
   1bb0a:	ba 2f       	mov	r27, r26
   1bb0c:	88 0d       	add	r24, r8
   1bb0e:	99 1d       	adc	r25, r9
   1bb10:	aa 1d       	adc	r26, r10
   1bb12:	bb 1d       	adc	r27, r11
   1bb14:	75 c0       	rjmp	.+234    	; 0x1bc00 <utl_atan2_16+0x230>
   1bb16:	be 01       	movw	r22, r28
   1bb18:	80 e0       	ldi	r24, 0x00	; 0
   1bb1a:	90 e0       	ldi	r25, 0x00	; 0
   1bb1c:	2f ef       	ldi	r18, 0xFF	; 255
   1bb1e:	3f e7       	ldi	r19, 0x7F	; 127
   1bb20:	40 e0       	ldi	r20, 0x00	; 0
   1bb22:	50 e0       	ldi	r21, 0x00	; 0
   1bb24:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1bb28:	96 01       	movw	r18, r12
   1bb2a:	2f 5f       	subi	r18, 0xFF	; 255
   1bb2c:	3f 4f       	sbci	r19, 0xFF	; 255
   1bb2e:	40 e0       	ldi	r20, 0x00	; 0
   1bb30:	50 e0       	ldi	r21, 0x00	; 0
   1bb32:	0e 94 40 fa 	call	0x1f480	; 0x1f480 <__udivmodsi4>
   1bb36:	e9 01       	movw	r28, r18
   1bb38:	f9 01       	movw	r30, r18
   1bb3a:	ef 2f       	mov	r30, r31
   1bb3c:	ff 27       	eor	r31, r31
   1bb3e:	e6 95       	lsr	r30
   1bb40:	e6 95       	lsr	r30
   1bb42:	e6 95       	lsr	r30
   1bb44:	af 01       	movw	r20, r30
   1bb46:	60 e0       	ldi	r22, 0x00	; 0
   1bb48:	70 e0       	ldi	r23, 0x00	; 0
   1bb4a:	ee 0f       	add	r30, r30
   1bb4c:	ff 1f       	adc	r31, r31
   1bb4e:	ed 5c       	subi	r30, 0xCD	; 205
   1bb50:	fc 4d       	sbci	r31, 0xDC	; 220
   1bb52:	20 81       	ld	r18, Z
   1bb54:	31 81       	ldd	r19, Z+1	; 0x01
   1bb56:	49 01       	movw	r8, r18
   1bb58:	aa 24       	eor	r10, r10
   1bb5a:	bb 24       	eor	r11, r11
   1bb5c:	db 01       	movw	r26, r22
   1bb5e:	ca 01       	movw	r24, r20
   1bb60:	01 96       	adiw	r24, 0x01	; 1
   1bb62:	a1 1d       	adc	r26, r1
   1bb64:	b1 1d       	adc	r27, r1
   1bb66:	88 0f       	add	r24, r24
   1bb68:	99 1f       	adc	r25, r25
   1bb6a:	8d 5c       	subi	r24, 0xCD	; 205
   1bb6c:	9c 4d       	sbci	r25, 0xDC	; 220
   1bb6e:	fc 01       	movw	r30, r24
   1bb70:	c0 80       	ld	r12, Z
   1bb72:	d1 80       	ldd	r13, Z+1	; 0x01
   1bb74:	c2 1a       	sub	r12, r18
   1bb76:	d3 0a       	sbc	r13, r19
   1bb78:	ee 24       	eor	r14, r14
   1bb7a:	d7 fc       	sbrc	r13, 7
   1bb7c:	e0 94       	com	r14
   1bb7e:	fe 2c       	mov	r15, r14
   1bb80:	db 01       	movw	r26, r22
   1bb82:	ca 01       	movw	r24, r20
   1bb84:	07 2e       	mov	r0, r23
   1bb86:	7b e0       	ldi	r23, 0x0B	; 11
   1bb88:	88 0f       	add	r24, r24
   1bb8a:	99 1f       	adc	r25, r25
   1bb8c:	aa 1f       	adc	r26, r26
   1bb8e:	bb 1f       	adc	r27, r27
   1bb90:	7a 95       	dec	r23
   1bb92:	d1 f7       	brne	.-12     	; 0x1bb88 <utl_atan2_16+0x1b8>
   1bb94:	70 2d       	mov	r23, r0
   1bb96:	9e 01       	movw	r18, r28
   1bb98:	28 1b       	sub	r18, r24
   1bb9a:	39 0b       	sbc	r19, r25
   1bb9c:	44 27       	eor	r20, r20
   1bb9e:	37 fd       	sbrc	r19, 7
   1bba0:	40 95       	com	r20
   1bba2:	54 2f       	mov	r21, r20
   1bba4:	c7 01       	movw	r24, r14
   1bba6:	b6 01       	movw	r22, r12
   1bba8:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1bbac:	dc 01       	movw	r26, r24
   1bbae:	cb 01       	movw	r24, r22
   1bbb0:	b7 ff       	sbrs	r27, 7
   1bbb2:	09 c0       	rjmp	.+18     	; 0x1bbc6 <utl_atan2_16+0x1f6>
   1bbb4:	b0 95       	com	r27
   1bbb6:	a0 95       	com	r26
   1bbb8:	90 95       	com	r25
   1bbba:	81 95       	neg	r24
   1bbbc:	9f 4f       	sbci	r25, 0xFF	; 255
   1bbbe:	af 4f       	sbci	r26, 0xFF	; 255
   1bbc0:	bf 4f       	sbci	r27, 0xFF	; 255
   1bbc2:	2f ef       	ldi	r18, 0xFF	; 255
   1bbc4:	01 c0       	rjmp	.+2      	; 0x1bbc8 <utl_atan2_16+0x1f8>
   1bbc6:	21 e0       	ldi	r18, 0x01	; 1
   1bbc8:	35 e0       	ldi	r19, 0x05	; 5
   1bbca:	88 0f       	add	r24, r24
   1bbcc:	99 1f       	adc	r25, r25
   1bbce:	aa 1f       	adc	r26, r26
   1bbd0:	bb 1f       	adc	r27, r27
   1bbd2:	3a 95       	dec	r19
   1bbd4:	d1 f7       	brne	.-12     	; 0x1bbca <utl_atan2_16+0x1fa>
   1bbd6:	2f 3f       	cpi	r18, 0xFF	; 255
   1bbd8:	29 f4       	brne	.+10     	; 0x1bbe4 <utl_atan2_16+0x214>
   1bbda:	88 27       	eor	r24, r24
   1bbdc:	99 27       	eor	r25, r25
   1bbde:	8a 1b       	sub	r24, r26
   1bbe0:	9b 0b       	sbc	r25, r27
   1bbe2:	01 c0       	rjmp	.+2      	; 0x1bbe6 <utl_atan2_16+0x216>
   1bbe4:	cd 01       	movw	r24, r26
   1bbe6:	aa 27       	eor	r26, r26
   1bbe8:	97 fd       	sbrc	r25, 7
   1bbea:	a0 95       	com	r26
   1bbec:	ba 2f       	mov	r27, r26
   1bbee:	88 0d       	add	r24, r8
   1bbf0:	99 1d       	adc	r25, r9
   1bbf2:	aa 1d       	adc	r26, r10
   1bbf4:	bb 1d       	adc	r27, r11
   1bbf6:	9c 01       	movw	r18, r24
   1bbf8:	8f ef       	ldi	r24, 0xFF	; 255
   1bbfa:	9f e3       	ldi	r25, 0x3F	; 63
   1bbfc:	82 1b       	sub	r24, r18
   1bbfe:	93 0b       	sbc	r25, r19
   1bc00:	77 fe       	sbrs	r7, 7
   1bc02:	09 c0       	rjmp	.+18     	; 0x1bc16 <utl_atan2_16+0x246>
   1bc04:	17 fd       	sbrc	r17, 7
   1bc06:	0d c0       	rjmp	.+26     	; 0x1bc22 <utl_atan2_16+0x252>
   1bc08:	2f ef       	ldi	r18, 0xFF	; 255
   1bc0a:	3f e7       	ldi	r19, 0x7F	; 127
   1bc0c:	a9 01       	movw	r20, r18
   1bc0e:	48 1b       	sub	r20, r24
   1bc10:	59 0b       	sbc	r21, r25
   1bc12:	ca 01       	movw	r24, r20
   1bc14:	0f c0       	rjmp	.+30     	; 0x1bc34 <utl_atan2_16+0x264>
   1bc16:	61 14       	cp	r6, r1
   1bc18:	71 04       	cpc	r7, r1
   1bc1a:	31 f4       	brne	.+12     	; 0x1bc28 <utl_atan2_16+0x258>
   1bc1c:	10 16       	cp	r1, r16
   1bc1e:	11 06       	cpc	r1, r17
   1bc20:	4c f0       	brlt	.+18     	; 0x1bc34 <utl_atan2_16+0x264>
   1bc22:	80 50       	subi	r24, 0x00	; 0
   1bc24:	90 48       	sbci	r25, 0x80	; 128
   1bc26:	06 c0       	rjmp	.+12     	; 0x1bc34 <utl_atan2_16+0x264>
   1bc28:	10 16       	cp	r1, r16
   1bc2a:	11 06       	cpc	r1, r17
   1bc2c:	1c f0       	brlt	.+6      	; 0x1bc34 <utl_atan2_16+0x264>
   1bc2e:	90 95       	com	r25
   1bc30:	81 95       	neg	r24
   1bc32:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc34:	df 91       	pop	r29
   1bc36:	cf 91       	pop	r28
   1bc38:	1f 91       	pop	r17
   1bc3a:	0f 91       	pop	r16
   1bc3c:	ff 90       	pop	r15
   1bc3e:	ef 90       	pop	r14
   1bc40:	df 90       	pop	r13
   1bc42:	cf 90       	pop	r12
   1bc44:	bf 90       	pop	r11
   1bc46:	af 90       	pop	r10
   1bc48:	9f 90       	pop	r9
   1bc4a:	8f 90       	pop	r8
   1bc4c:	7f 90       	pop	r7
   1bc4e:	6f 90       	pop	r6
   1bc50:	08 95       	ret

0001bc52 <utl_mult16x16_16>:
   1bc52:	0f 93       	push	r16
   1bc54:	1f 93       	push	r17
   1bc56:	cf 93       	push	r28
   1bc58:	df 93       	push	r29
   1bc5a:	c4 2f       	mov	r28, r20
   1bc5c:	aa 27       	eor	r26, r26
   1bc5e:	97 fd       	sbrc	r25, 7
   1bc60:	a0 95       	com	r26
   1bc62:	ba 2f       	mov	r27, r26
   1bc64:	9b 01       	movw	r18, r22
   1bc66:	44 27       	eor	r20, r20
   1bc68:	37 fd       	sbrc	r19, 7
   1bc6a:	40 95       	com	r20
   1bc6c:	54 2f       	mov	r21, r20
   1bc6e:	bc 01       	movw	r22, r24
   1bc70:	cd 01       	movw	r24, r26
   1bc72:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1bc76:	ab 01       	movw	r20, r22
   1bc78:	bc 01       	movw	r22, r24
   1bc7a:	77 ff       	sbrs	r23, 7
   1bc7c:	09 c0       	rjmp	.+18     	; 0x1bc90 <utl_mult16x16_16+0x3e>
   1bc7e:	70 95       	com	r23
   1bc80:	60 95       	com	r22
   1bc82:	50 95       	com	r21
   1bc84:	41 95       	neg	r20
   1bc86:	5f 4f       	sbci	r21, 0xFF	; 255
   1bc88:	6f 4f       	sbci	r22, 0xFF	; 255
   1bc8a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bc8c:	df ef       	ldi	r29, 0xFF	; 255
   1bc8e:	01 c0       	rjmp	.+2      	; 0x1bc92 <utl_mult16x16_16+0x40>
   1bc90:	d1 e0       	ldi	r29, 0x01	; 1
   1bc92:	2c 2f       	mov	r18, r28
   1bc94:	33 27       	eor	r19, r19
   1bc96:	27 fd       	sbrc	r18, 7
   1bc98:	30 95       	com	r19
   1bc9a:	f9 01       	movw	r30, r18
   1bc9c:	31 97       	sbiw	r30, 0x01	; 1
   1bc9e:	81 e0       	ldi	r24, 0x01	; 1
   1bca0:	90 e0       	ldi	r25, 0x00	; 0
   1bca2:	a0 e0       	ldi	r26, 0x00	; 0
   1bca4:	b0 e0       	ldi	r27, 0x00	; 0
   1bca6:	04 c0       	rjmp	.+8      	; 0x1bcb0 <utl_mult16x16_16+0x5e>
   1bca8:	88 0f       	add	r24, r24
   1bcaa:	99 1f       	adc	r25, r25
   1bcac:	aa 1f       	adc	r26, r26
   1bcae:	bb 1f       	adc	r27, r27
   1bcb0:	ea 95       	dec	r30
   1bcb2:	d2 f7       	brpl	.-12     	; 0x1bca8 <utl_mult16x16_16+0x56>
   1bcb4:	84 0f       	add	r24, r20
   1bcb6:	95 1f       	adc	r25, r21
   1bcb8:	a6 1f       	adc	r26, r22
   1bcba:	b7 1f       	adc	r27, r23
   1bcbc:	4c 2f       	mov	r20, r28
   1bcbe:	49 50       	subi	r20, 0x09	; 9
   1bcc0:	48 30       	cpi	r20, 0x08	; 8
   1bcc2:	c0 f4       	brcc	.+48     	; 0x1bcf4 <utl_mult16x16_16+0xa2>
   1bcc4:	40 e1       	ldi	r20, 0x10	; 16
   1bcc6:	50 e0       	ldi	r21, 0x00	; 0
   1bcc8:	42 1b       	sub	r20, r18
   1bcca:	53 0b       	sbc	r21, r19
   1bccc:	8c 01       	movw	r16, r24
   1bcce:	9d 01       	movw	r18, r26
   1bcd0:	04 c0       	rjmp	.+8      	; 0x1bcda <utl_mult16x16_16+0x88>
   1bcd2:	00 0f       	add	r16, r16
   1bcd4:	11 1f       	adc	r17, r17
   1bcd6:	22 1f       	adc	r18, r18
   1bcd8:	33 1f       	adc	r19, r19
   1bcda:	4a 95       	dec	r20
   1bcdc:	d2 f7       	brpl	.-12     	; 0x1bcd2 <utl_mult16x16_16+0x80>
   1bcde:	b9 01       	movw	r22, r18
   1bce0:	a8 01       	movw	r20, r16
   1bce2:	df 3f       	cpi	r29, 0xFF	; 255
   1bce4:	29 f4       	brne	.+10     	; 0x1bcf0 <utl_mult16x16_16+0x9e>
   1bce6:	cc 27       	eor	r28, r28
   1bce8:	dd 27       	eor	r29, r29
   1bcea:	c6 1b       	sub	r28, r22
   1bcec:	d7 0b       	sbc	r29, r23
   1bcee:	11 c0       	rjmp	.+34     	; 0x1bd12 <utl_mult16x16_16+0xc0>
   1bcf0:	eb 01       	movw	r28, r22
   1bcf2:	0f c0       	rjmp	.+30     	; 0x1bd12 <utl_mult16x16_16+0xc0>
   1bcf4:	04 c0       	rjmp	.+8      	; 0x1bcfe <utl_mult16x16_16+0xac>
   1bcf6:	b5 95       	asr	r27
   1bcf8:	a7 95       	ror	r26
   1bcfa:	97 95       	ror	r25
   1bcfc:	87 95       	ror	r24
   1bcfe:	ca 95       	dec	r28
   1bd00:	d2 f7       	brpl	.-12     	; 0x1bcf6 <utl_mult16x16_16+0xa4>
   1bd02:	df 3f       	cpi	r29, 0xFF	; 255
   1bd04:	29 f4       	brne	.+10     	; 0x1bd10 <utl_mult16x16_16+0xbe>
   1bd06:	cc 27       	eor	r28, r28
   1bd08:	dd 27       	eor	r29, r29
   1bd0a:	c8 1b       	sub	r28, r24
   1bd0c:	d9 0b       	sbc	r29, r25
   1bd0e:	01 c0       	rjmp	.+2      	; 0x1bd12 <utl_mult16x16_16+0xc0>
   1bd10:	ec 01       	movw	r28, r24
   1bd12:	ce 01       	movw	r24, r28
   1bd14:	df 91       	pop	r29
   1bd16:	cf 91       	pop	r28
   1bd18:	1f 91       	pop	r17
   1bd1a:	0f 91       	pop	r16
   1bd1c:	08 95       	ret

0001bd1e <utl_mult16x16_32>:
   1bd1e:	0f 93       	push	r16
   1bd20:	1f 93       	push	r17
   1bd22:	cf 93       	push	r28
   1bd24:	c4 2f       	mov	r28, r20
   1bd26:	aa 27       	eor	r26, r26
   1bd28:	97 fd       	sbrc	r25, 7
   1bd2a:	a0 95       	com	r26
   1bd2c:	ba 2f       	mov	r27, r26
   1bd2e:	9b 01       	movw	r18, r22
   1bd30:	44 27       	eor	r20, r20
   1bd32:	37 fd       	sbrc	r19, 7
   1bd34:	40 95       	com	r20
   1bd36:	54 2f       	mov	r21, r20
   1bd38:	bc 01       	movw	r22, r24
   1bd3a:	cd 01       	movw	r24, r26
   1bd3c:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1bd40:	dc 01       	movw	r26, r24
   1bd42:	cb 01       	movw	r24, r22
   1bd44:	4c 2f       	mov	r20, r28
   1bd46:	55 27       	eor	r21, r21
   1bd48:	47 fd       	sbrc	r20, 7
   1bd4a:	50 95       	com	r21
   1bd4c:	41 50       	subi	r20, 0x01	; 1
   1bd4e:	50 40       	sbci	r21, 0x00	; 0
   1bd50:	01 e0       	ldi	r16, 0x01	; 1
   1bd52:	10 e0       	ldi	r17, 0x00	; 0
   1bd54:	20 e0       	ldi	r18, 0x00	; 0
   1bd56:	30 e0       	ldi	r19, 0x00	; 0
   1bd58:	04 c0       	rjmp	.+8      	; 0x1bd62 <utl_mult16x16_32+0x44>
   1bd5a:	00 0f       	add	r16, r16
   1bd5c:	11 1f       	adc	r17, r17
   1bd5e:	22 1f       	adc	r18, r18
   1bd60:	33 1f       	adc	r19, r19
   1bd62:	4a 95       	dec	r20
   1bd64:	d2 f7       	brpl	.-12     	; 0x1bd5a <utl_mult16x16_32+0x3c>
   1bd66:	b7 ff       	sbrs	r27, 7
   1bd68:	13 c0       	rjmp	.+38     	; 0x1bd90 <utl_mult16x16_32+0x72>
   1bd6a:	08 1b       	sub	r16, r24
   1bd6c:	19 0b       	sbc	r17, r25
   1bd6e:	2a 0b       	sbc	r18, r26
   1bd70:	3b 0b       	sbc	r19, r27
   1bd72:	04 c0       	rjmp	.+8      	; 0x1bd7c <utl_mult16x16_32+0x5e>
   1bd74:	35 95       	asr	r19
   1bd76:	27 95       	ror	r18
   1bd78:	17 95       	ror	r17
   1bd7a:	07 95       	ror	r16
   1bd7c:	ca 95       	dec	r28
   1bd7e:	d2 f7       	brpl	.-12     	; 0x1bd74 <utl_mult16x16_32+0x56>
   1bd80:	30 95       	com	r19
   1bd82:	20 95       	com	r18
   1bd84:	10 95       	com	r17
   1bd86:	01 95       	neg	r16
   1bd88:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd8a:	2f 4f       	sbci	r18, 0xFF	; 255
   1bd8c:	3f 4f       	sbci	r19, 0xFF	; 255
   1bd8e:	0b c0       	rjmp	.+22     	; 0x1bda6 <utl_mult16x16_32+0x88>
   1bd90:	08 0f       	add	r16, r24
   1bd92:	19 1f       	adc	r17, r25
   1bd94:	2a 1f       	adc	r18, r26
   1bd96:	3b 1f       	adc	r19, r27
   1bd98:	04 c0       	rjmp	.+8      	; 0x1bda2 <utl_mult16x16_32+0x84>
   1bd9a:	35 95       	asr	r19
   1bd9c:	27 95       	ror	r18
   1bd9e:	17 95       	ror	r17
   1bda0:	07 95       	ror	r16
   1bda2:	ca 95       	dec	r28
   1bda4:	d2 f7       	brpl	.-12     	; 0x1bd9a <utl_mult16x16_32+0x7c>
   1bda6:	b8 01       	movw	r22, r16
   1bda8:	c9 01       	movw	r24, r18
   1bdaa:	cf 91       	pop	r28
   1bdac:	1f 91       	pop	r17
   1bdae:	0f 91       	pop	r16
   1bdb0:	08 95       	ret

0001bdb2 <utl_mult32x32_32>:
   1bdb2:	4f 92       	push	r4
   1bdb4:	5f 92       	push	r5
   1bdb6:	6f 92       	push	r6
   1bdb8:	7f 92       	push	r7
   1bdba:	8f 92       	push	r8
   1bdbc:	9f 92       	push	r9
   1bdbe:	af 92       	push	r10
   1bdc0:	bf 92       	push	r11
   1bdc2:	cf 92       	push	r12
   1bdc4:	df 92       	push	r13
   1bdc6:	ef 92       	push	r14
   1bdc8:	ff 92       	push	r15
   1bdca:	0f 93       	push	r16
   1bdcc:	1f 93       	push	r17
   1bdce:	cf 93       	push	r28
   1bdd0:	df 93       	push	r29
   1bdd2:	00 d0       	rcall	.+0      	; 0x1bdd4 <utl_mult32x32_32+0x22>
   1bdd4:	0f 92       	push	r0
   1bdd6:	cd b7       	in	r28, 0x3d	; 61
   1bdd8:	de b7       	in	r29, 0x3e	; 62
   1bdda:	dc 01       	movw	r26, r24
   1bddc:	cb 01       	movw	r24, r22
   1bdde:	29 01       	movw	r4, r18
   1bde0:	3a 01       	movw	r6, r20
   1bde2:	90 2e       	mov	r9, r16
   1bde4:	6c 01       	movw	r12, r24
   1bde6:	7d 01       	movw	r14, r26
   1bde8:	ff 0c       	add	r15, r15
   1bdea:	cc 08       	sbc	r12, r12
   1bdec:	dc 2c       	mov	r13, r12
   1bdee:	76 01       	movw	r14, r12
   1bdf0:	55 0f       	add	r21, r21
   1bdf2:	22 0b       	sbc	r18, r18
   1bdf4:	32 2f       	mov	r19, r18
   1bdf6:	a9 01       	movw	r20, r18
   1bdf8:	29 83       	std	Y+1, r18	; 0x01
   1bdfa:	3a 83       	std	Y+2, r19	; 0x02
   1bdfc:	4b 83       	std	Y+3, r20	; 0x03
   1bdfe:	5c 83       	std	Y+4, r21	; 0x04
   1be00:	9c 01       	movw	r18, r24
   1be02:	ad 01       	movw	r20, r26
   1be04:	6c 2d       	mov	r22, r12
   1be06:	7c 2d       	mov	r23, r12
   1be08:	8c 2d       	mov	r24, r12
   1be0a:	9c 2d       	mov	r25, r12
   1be0c:	52 01       	movw	r10, r4
   1be0e:	63 01       	movw	r12, r6
   1be10:	e9 80       	ldd	r14, Y+1	; 0x01
   1be12:	fe 2c       	mov	r15, r14
   1be14:	0e 2d       	mov	r16, r14
   1be16:	1e 2d       	mov	r17, r14
   1be18:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <__muldi3>
   1be1c:	c2 2e       	mov	r12, r18
   1be1e:	43 2e       	mov	r4, r19
   1be20:	84 2e       	mov	r8, r20
   1be22:	f5 2e       	mov	r15, r21
   1be24:	e6 2e       	mov	r14, r22
   1be26:	d7 2e       	mov	r13, r23
   1be28:	b8 2e       	mov	r11, r24
   1be2a:	a9 2e       	mov	r10, r25
   1be2c:	09 2d       	mov	r16, r9
   1be2e:	11 27       	eor	r17, r17
   1be30:	07 fd       	sbrc	r16, 7
   1be32:	10 95       	com	r17
   1be34:	01 50       	subi	r16, 0x01	; 1
   1be36:	10 40       	sbci	r17, 0x00	; 0
   1be38:	21 e0       	ldi	r18, 0x01	; 1
   1be3a:	30 e0       	ldi	r19, 0x00	; 0
   1be3c:	40 e0       	ldi	r20, 0x00	; 0
   1be3e:	50 e0       	ldi	r21, 0x00	; 0
   1be40:	60 e0       	ldi	r22, 0x00	; 0
   1be42:	70 e0       	ldi	r23, 0x00	; 0
   1be44:	80 e0       	ldi	r24, 0x00	; 0
   1be46:	90 e0       	ldi	r25, 0x00	; 0
   1be48:	a7 fc       	sbrc	r10, 7
   1be4a:	08 c0       	rjmp	.+16     	; 0x1be5c <utl_mult32x32_32+0xaa>
   1be4c:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__ashldi3>
   1be50:	2c 0d       	add	r18, r12
   1be52:	a1 e0       	ldi	r26, 0x01	; 1
   1be54:	2c 15       	cp	r18, r12
   1be56:	08 f4       	brcc	.+2      	; 0x1be5a <utl_mult32x32_32+0xa8>
   1be58:	82 c0       	rjmp	.+260    	; 0x1bf5e <utl_mult32x32_32+0x1ac>
   1be5a:	80 c0       	rjmp	.+256    	; 0x1bf5c <utl_mult32x32_32+0x1aa>
   1be5c:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <__ashldi3>
   1be60:	a2 2f       	mov	r26, r18
   1be62:	ac 19       	sub	r26, r12
   1be64:	e1 e0       	ldi	r30, 0x01	; 1
   1be66:	2a 17       	cp	r18, r26
   1be68:	08 f0       	brcs	.+2      	; 0x1be6c <utl_mult32x32_32+0xba>
   1be6a:	e0 e0       	ldi	r30, 0x00	; 0
   1be6c:	23 2f       	mov	r18, r19
   1be6e:	24 19       	sub	r18, r4
   1be70:	f1 e0       	ldi	r31, 0x01	; 1
   1be72:	32 17       	cp	r19, r18
   1be74:	08 f0       	brcs	.+2      	; 0x1be78 <utl_mult32x32_32+0xc6>
   1be76:	f0 e0       	ldi	r31, 0x00	; 0
   1be78:	32 2f       	mov	r19, r18
   1be7a:	3e 1b       	sub	r19, r30
   1be7c:	e1 e0       	ldi	r30, 0x01	; 1
   1be7e:	23 17       	cp	r18, r19
   1be80:	08 f0       	brcs	.+2      	; 0x1be84 <utl_mult32x32_32+0xd2>
   1be82:	e0 e0       	ldi	r30, 0x00	; 0
   1be84:	fe 2b       	or	r31, r30
   1be86:	24 2f       	mov	r18, r20
   1be88:	28 19       	sub	r18, r8
   1be8a:	e1 e0       	ldi	r30, 0x01	; 1
   1be8c:	42 17       	cp	r20, r18
   1be8e:	08 f0       	brcs	.+2      	; 0x1be92 <utl_mult32x32_32+0xe0>
   1be90:	e0 e0       	ldi	r30, 0x00	; 0
   1be92:	42 2f       	mov	r20, r18
   1be94:	4f 1b       	sub	r20, r31
   1be96:	f1 e0       	ldi	r31, 0x01	; 1
   1be98:	24 17       	cp	r18, r20
   1be9a:	08 f0       	brcs	.+2      	; 0x1be9e <utl_mult32x32_32+0xec>
   1be9c:	f0 e0       	ldi	r31, 0x00	; 0
   1be9e:	ef 2b       	or	r30, r31
   1bea0:	25 2f       	mov	r18, r21
   1bea2:	2f 19       	sub	r18, r15
   1bea4:	f1 e0       	ldi	r31, 0x01	; 1
   1bea6:	52 17       	cp	r21, r18
   1bea8:	08 f0       	brcs	.+2      	; 0x1beac <utl_mult32x32_32+0xfa>
   1beaa:	f0 e0       	ldi	r31, 0x00	; 0
   1beac:	52 2f       	mov	r21, r18
   1beae:	5e 1b       	sub	r21, r30
   1beb0:	e1 e0       	ldi	r30, 0x01	; 1
   1beb2:	25 17       	cp	r18, r21
   1beb4:	08 f0       	brcs	.+2      	; 0x1beb8 <utl_mult32x32_32+0x106>
   1beb6:	e0 e0       	ldi	r30, 0x00	; 0
   1beb8:	fe 2b       	or	r31, r30
   1beba:	26 2f       	mov	r18, r22
   1bebc:	2e 19       	sub	r18, r14
   1bebe:	e1 e0       	ldi	r30, 0x01	; 1
   1bec0:	62 17       	cp	r22, r18
   1bec2:	08 f0       	brcs	.+2      	; 0x1bec6 <utl_mult32x32_32+0x114>
   1bec4:	e0 e0       	ldi	r30, 0x00	; 0
   1bec6:	62 2f       	mov	r22, r18
   1bec8:	6f 1b       	sub	r22, r31
   1beca:	f1 e0       	ldi	r31, 0x01	; 1
   1becc:	26 17       	cp	r18, r22
   1bece:	08 f0       	brcs	.+2      	; 0x1bed2 <utl_mult32x32_32+0x120>
   1bed0:	f0 e0       	ldi	r31, 0x00	; 0
   1bed2:	ef 2b       	or	r30, r31
   1bed4:	27 2f       	mov	r18, r23
   1bed6:	2d 19       	sub	r18, r13
   1bed8:	f1 e0       	ldi	r31, 0x01	; 1
   1beda:	72 17       	cp	r23, r18
   1bedc:	08 f0       	brcs	.+2      	; 0x1bee0 <utl_mult32x32_32+0x12e>
   1bede:	f0 e0       	ldi	r31, 0x00	; 0
   1bee0:	72 2f       	mov	r23, r18
   1bee2:	7e 1b       	sub	r23, r30
   1bee4:	e1 e0       	ldi	r30, 0x01	; 1
   1bee6:	27 17       	cp	r18, r23
   1bee8:	08 f0       	brcs	.+2      	; 0x1beec <utl_mult32x32_32+0x13a>
   1beea:	e0 e0       	ldi	r30, 0x00	; 0
   1beec:	fe 2b       	or	r31, r30
   1beee:	28 2f       	mov	r18, r24
   1bef0:	2b 19       	sub	r18, r11
   1bef2:	e1 e0       	ldi	r30, 0x01	; 1
   1bef4:	82 17       	cp	r24, r18
   1bef6:	08 f0       	brcs	.+2      	; 0x1befa <utl_mult32x32_32+0x148>
   1bef8:	e0 e0       	ldi	r30, 0x00	; 0
   1befa:	82 2f       	mov	r24, r18
   1befc:	8f 1b       	sub	r24, r31
   1befe:	f1 e0       	ldi	r31, 0x01	; 1
   1bf00:	28 17       	cp	r18, r24
   1bf02:	08 f0       	brcs	.+2      	; 0x1bf06 <utl_mult32x32_32+0x154>
   1bf04:	f0 e0       	ldi	r31, 0x00	; 0
   1bf06:	ef 2b       	or	r30, r31
   1bf08:	9a 19       	sub	r25, r10
   1bf0a:	2a 2f       	mov	r18, r26
   1bf0c:	9e 1b       	sub	r25, r30
   1bf0e:	09 2d       	mov	r16, r9
   1bf10:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <__ashrdi3>
   1bf14:	21 95       	neg	r18
   1bf16:	81 e0       	ldi	r24, 0x01	; 1
   1bf18:	12 16       	cp	r1, r18
   1bf1a:	08 f0       	brcs	.+2      	; 0x1bf1e <utl_mult32x32_32+0x16c>
   1bf1c:	80 e0       	ldi	r24, 0x00	; 0
   1bf1e:	31 95       	neg	r19
   1bf20:	61 e0       	ldi	r22, 0x01	; 1
   1bf22:	13 16       	cp	r1, r19
   1bf24:	08 f0       	brcs	.+2      	; 0x1bf28 <utl_mult32x32_32+0x176>
   1bf26:	60 e0       	ldi	r22, 0x00	; 0
   1bf28:	73 2f       	mov	r23, r19
   1bf2a:	78 1b       	sub	r23, r24
   1bf2c:	81 e0       	ldi	r24, 0x01	; 1
   1bf2e:	37 17       	cp	r19, r23
   1bf30:	08 f0       	brcs	.+2      	; 0x1bf34 <utl_mult32x32_32+0x182>
   1bf32:	80 e0       	ldi	r24, 0x00	; 0
   1bf34:	68 2b       	or	r22, r24
   1bf36:	41 95       	neg	r20
   1bf38:	81 e0       	ldi	r24, 0x01	; 1
   1bf3a:	14 16       	cp	r1, r20
   1bf3c:	08 f0       	brcs	.+2      	; 0x1bf40 <utl_mult32x32_32+0x18e>
   1bf3e:	80 e0       	ldi	r24, 0x00	; 0
   1bf40:	34 2f       	mov	r19, r20
   1bf42:	36 1b       	sub	r19, r22
   1bf44:	63 2f       	mov	r22, r19
   1bf46:	31 e0       	ldi	r19, 0x01	; 1
   1bf48:	46 17       	cp	r20, r22
   1bf4a:	08 f0       	brcs	.+2      	; 0x1bf4e <utl_mult32x32_32+0x19c>
   1bf4c:	30 e0       	ldi	r19, 0x00	; 0
   1bf4e:	83 2b       	or	r24, r19
   1bf50:	95 2f       	mov	r25, r21
   1bf52:	91 95       	neg	r25
   1bf54:	37 2f       	mov	r19, r23
   1bf56:	46 2f       	mov	r20, r22
   1bf58:	98 1b       	sub	r25, r24
   1bf5a:	55 c0       	rjmp	.+170    	; 0x1c006 <utl_mult32x32_32+0x254>
   1bf5c:	a0 e0       	ldi	r26, 0x00	; 0
   1bf5e:	e4 2d       	mov	r30, r4
   1bf60:	e3 0f       	add	r30, r19
   1bf62:	f1 e0       	ldi	r31, 0x01	; 1
   1bf64:	e4 15       	cp	r30, r4
   1bf66:	08 f0       	brcs	.+2      	; 0x1bf6a <utl_mult32x32_32+0x1b8>
   1bf68:	f0 e0       	ldi	r31, 0x00	; 0
   1bf6a:	3a 2f       	mov	r19, r26
   1bf6c:	3e 0f       	add	r19, r30
   1bf6e:	a1 e0       	ldi	r26, 0x01	; 1
   1bf70:	3e 17       	cp	r19, r30
   1bf72:	08 f0       	brcs	.+2      	; 0x1bf76 <utl_mult32x32_32+0x1c4>
   1bf74:	a0 e0       	ldi	r26, 0x00	; 0
   1bf76:	fa 2b       	or	r31, r26
   1bf78:	a8 2d       	mov	r26, r8
   1bf7a:	a4 0f       	add	r26, r20
   1bf7c:	e1 e0       	ldi	r30, 0x01	; 1
   1bf7e:	a8 15       	cp	r26, r8
   1bf80:	08 f0       	brcs	.+2      	; 0x1bf84 <utl_mult32x32_32+0x1d2>
   1bf82:	e0 e0       	ldi	r30, 0x00	; 0
   1bf84:	4f 2f       	mov	r20, r31
   1bf86:	4a 0f       	add	r20, r26
   1bf88:	f1 e0       	ldi	r31, 0x01	; 1
   1bf8a:	4a 17       	cp	r20, r26
   1bf8c:	08 f0       	brcs	.+2      	; 0x1bf90 <utl_mult32x32_32+0x1de>
   1bf8e:	f0 e0       	ldi	r31, 0x00	; 0
   1bf90:	ef 2b       	or	r30, r31
   1bf92:	af 2d       	mov	r26, r15
   1bf94:	a5 0f       	add	r26, r21
   1bf96:	f1 e0       	ldi	r31, 0x01	; 1
   1bf98:	af 15       	cp	r26, r15
   1bf9a:	08 f0       	brcs	.+2      	; 0x1bf9e <utl_mult32x32_32+0x1ec>
   1bf9c:	f0 e0       	ldi	r31, 0x00	; 0
   1bf9e:	5e 2f       	mov	r21, r30
   1bfa0:	5a 0f       	add	r21, r26
   1bfa2:	e1 e0       	ldi	r30, 0x01	; 1
   1bfa4:	5a 17       	cp	r21, r26
   1bfa6:	08 f0       	brcs	.+2      	; 0x1bfaa <utl_mult32x32_32+0x1f8>
   1bfa8:	e0 e0       	ldi	r30, 0x00	; 0
   1bfaa:	fe 2b       	or	r31, r30
   1bfac:	ae 2d       	mov	r26, r14
   1bfae:	a6 0f       	add	r26, r22
   1bfb0:	e1 e0       	ldi	r30, 0x01	; 1
   1bfb2:	ae 15       	cp	r26, r14
   1bfb4:	08 f0       	brcs	.+2      	; 0x1bfb8 <utl_mult32x32_32+0x206>
   1bfb6:	e0 e0       	ldi	r30, 0x00	; 0
   1bfb8:	6f 2f       	mov	r22, r31
   1bfba:	6a 0f       	add	r22, r26
   1bfbc:	f1 e0       	ldi	r31, 0x01	; 1
   1bfbe:	6a 17       	cp	r22, r26
   1bfc0:	08 f0       	brcs	.+2      	; 0x1bfc4 <utl_mult32x32_32+0x212>
   1bfc2:	f0 e0       	ldi	r31, 0x00	; 0
   1bfc4:	ef 2b       	or	r30, r31
   1bfc6:	ad 2d       	mov	r26, r13
   1bfc8:	a7 0f       	add	r26, r23
   1bfca:	f1 e0       	ldi	r31, 0x01	; 1
   1bfcc:	ad 15       	cp	r26, r13
   1bfce:	08 f0       	brcs	.+2      	; 0x1bfd2 <utl_mult32x32_32+0x220>
   1bfd0:	f0 e0       	ldi	r31, 0x00	; 0
   1bfd2:	7e 2f       	mov	r23, r30
   1bfd4:	7a 0f       	add	r23, r26
   1bfd6:	e1 e0       	ldi	r30, 0x01	; 1
   1bfd8:	7a 17       	cp	r23, r26
   1bfda:	08 f0       	brcs	.+2      	; 0x1bfde <utl_mult32x32_32+0x22c>
   1bfdc:	e0 e0       	ldi	r30, 0x00	; 0
   1bfde:	fe 2b       	or	r31, r30
   1bfe0:	ab 2d       	mov	r26, r11
   1bfe2:	a8 0f       	add	r26, r24
   1bfe4:	e1 e0       	ldi	r30, 0x01	; 1
   1bfe6:	ab 15       	cp	r26, r11
   1bfe8:	08 f0       	brcs	.+2      	; 0x1bfec <utl_mult32x32_32+0x23a>
   1bfea:	e0 e0       	ldi	r30, 0x00	; 0
   1bfec:	8f 2f       	mov	r24, r31
   1bfee:	8a 0f       	add	r24, r26
   1bff0:	f1 e0       	ldi	r31, 0x01	; 1
   1bff2:	8a 17       	cp	r24, r26
   1bff4:	08 f0       	brcs	.+2      	; 0x1bff8 <utl_mult32x32_32+0x246>
   1bff6:	f0 e0       	ldi	r31, 0x00	; 0
   1bff8:	ef 2b       	or	r30, r31
   1bffa:	9a 0d       	add	r25, r10
   1bffc:	9e 0f       	add	r25, r30
   1bffe:	09 2d       	mov	r16, r9
   1c000:	0e 94 5f 3f 	call	0x7ebe	; 0x7ebe <__ashrdi3>
   1c004:	95 2f       	mov	r25, r21
   1c006:	b9 01       	movw	r22, r18
   1c008:	84 2f       	mov	r24, r20
   1c00a:	24 96       	adiw	r28, 0x04	; 4
   1c00c:	cd bf       	out	0x3d, r28	; 61
   1c00e:	de bf       	out	0x3e, r29	; 62
   1c010:	df 91       	pop	r29
   1c012:	cf 91       	pop	r28
   1c014:	1f 91       	pop	r17
   1c016:	0f 91       	pop	r16
   1c018:	ff 90       	pop	r15
   1c01a:	ef 90       	pop	r14
   1c01c:	df 90       	pop	r13
   1c01e:	cf 90       	pop	r12
   1c020:	bf 90       	pop	r11
   1c022:	af 90       	pop	r10
   1c024:	9f 90       	pop	r9
   1c026:	8f 90       	pop	r8
   1c028:	7f 90       	pop	r7
   1c02a:	6f 90       	pop	r6
   1c02c:	5f 90       	pop	r5
   1c02e:	4f 90       	pop	r4
   1c030:	08 95       	ret

0001c032 <utl_div16x16_16>:
   1c032:	aa 27       	eor	r26, r26
   1c034:	97 fd       	sbrc	r25, 7
   1c036:	a0 95       	com	r26
   1c038:	ba 2f       	mov	r27, r26
   1c03a:	04 c0       	rjmp	.+8      	; 0x1c044 <utl_div16x16_16+0x12>
   1c03c:	88 0f       	add	r24, r24
   1c03e:	99 1f       	adc	r25, r25
   1c040:	aa 1f       	adc	r26, r26
   1c042:	bb 1f       	adc	r27, r27
   1c044:	4a 95       	dec	r20
   1c046:	d2 f7       	brpl	.-12     	; 0x1c03c <utl_div16x16_16+0xa>
   1c048:	9b 01       	movw	r18, r22
   1c04a:	44 27       	eor	r20, r20
   1c04c:	37 fd       	sbrc	r19, 7
   1c04e:	40 95       	com	r20
   1c050:	54 2f       	mov	r21, r20
   1c052:	bc 01       	movw	r22, r24
   1c054:	cd 01       	movw	r24, r26
   1c056:	0e 94 62 fa 	call	0x1f4c4	; 0x1f4c4 <__divmodsi4>
   1c05a:	c9 01       	movw	r24, r18
   1c05c:	08 95       	ret

0001c05e <utl_mac16x16_32>:
   1c05e:	cf 92       	push	r12
   1c060:	df 92       	push	r13
   1c062:	ef 92       	push	r14
   1c064:	ff 92       	push	r15
   1c066:	0f 93       	push	r16
   1c068:	fb 01       	movw	r30, r22
   1c06a:	69 01       	movw	r12, r18
   1c06c:	7a 01       	movw	r14, r20
   1c06e:	9c 01       	movw	r18, r24
   1c070:	b9 01       	movw	r22, r18
   1c072:	88 27       	eor	r24, r24
   1c074:	77 fd       	sbrc	r23, 7
   1c076:	80 95       	com	r24
   1c078:	98 2f       	mov	r25, r24
   1c07a:	9f 01       	movw	r18, r30
   1c07c:	44 27       	eor	r20, r20
   1c07e:	37 fd       	sbrc	r19, 7
   1c080:	40 95       	com	r20
   1c082:	54 2f       	mov	r21, r20
   1c084:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1c088:	dc 01       	movw	r26, r24
   1c08a:	cb 01       	movw	r24, r22
   1c08c:	b7 ff       	sbrs	r27, 7
   1c08e:	16 c0       	rjmp	.+44     	; 0x1c0bc <utl_mac16x16_32+0x5e>
   1c090:	b0 95       	com	r27
   1c092:	a0 95       	com	r26
   1c094:	90 95       	com	r25
   1c096:	81 95       	neg	r24
   1c098:	9f 4f       	sbci	r25, 0xFF	; 255
   1c09a:	af 4f       	sbci	r26, 0xFF	; 255
   1c09c:	bf 4f       	sbci	r27, 0xFF	; 255
   1c09e:	04 c0       	rjmp	.+8      	; 0x1c0a8 <utl_mac16x16_32+0x4a>
   1c0a0:	b5 95       	asr	r27
   1c0a2:	a7 95       	ror	r26
   1c0a4:	97 95       	ror	r25
   1c0a6:	87 95       	ror	r24
   1c0a8:	0a 95       	dec	r16
   1c0aa:	d2 f7       	brpl	.-12     	; 0x1c0a0 <utl_mac16x16_32+0x42>
   1c0ac:	b0 95       	com	r27
   1c0ae:	a0 95       	com	r26
   1c0b0:	90 95       	com	r25
   1c0b2:	81 95       	neg	r24
   1c0b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0b6:	af 4f       	sbci	r26, 0xFF	; 255
   1c0b8:	bf 4f       	sbci	r27, 0xFF	; 255
   1c0ba:	07 c0       	rjmp	.+14     	; 0x1c0ca <utl_mac16x16_32+0x6c>
   1c0bc:	04 c0       	rjmp	.+8      	; 0x1c0c6 <utl_mac16x16_32+0x68>
   1c0be:	b5 95       	asr	r27
   1c0c0:	a7 95       	ror	r26
   1c0c2:	97 95       	ror	r25
   1c0c4:	87 95       	ror	r24
   1c0c6:	0a 95       	dec	r16
   1c0c8:	d2 f7       	brpl	.-12     	; 0x1c0be <utl_mac16x16_32+0x60>
   1c0ca:	c8 0e       	add	r12, r24
   1c0cc:	d9 1e       	adc	r13, r25
   1c0ce:	ea 1e       	adc	r14, r26
   1c0d0:	fb 1e       	adc	r15, r27
   1c0d2:	b6 01       	movw	r22, r12
   1c0d4:	c7 01       	movw	r24, r14
   1c0d6:	0f 91       	pop	r16
   1c0d8:	ff 90       	pop	r15
   1c0da:	ef 90       	pop	r14
   1c0dc:	df 90       	pop	r13
   1c0de:	cf 90       	pop	r12
   1c0e0:	08 95       	ret

0001c0e2 <utl_vMult16x16_32>:
   1c0e2:	4f 92       	push	r4
   1c0e4:	5f 92       	push	r5
   1c0e6:	6f 92       	push	r6
   1c0e8:	7f 92       	push	r7
   1c0ea:	8f 92       	push	r8
   1c0ec:	9f 92       	push	r9
   1c0ee:	af 92       	push	r10
   1c0f0:	bf 92       	push	r11
   1c0f2:	cf 92       	push	r12
   1c0f4:	ef 92       	push	r14
   1c0f6:	0f 93       	push	r16
   1c0f8:	1f 93       	push	r17
   1c0fa:	cf 93       	push	r28
   1c0fc:	df 93       	push	r29
   1c0fe:	49 01       	movw	r8, r18
   1c100:	5a 01       	movw	r10, r20
   1c102:	28 01       	movw	r4, r16
   1c104:	ec 01       	movw	r28, r24
   1c106:	3b 01       	movw	r6, r22
   1c108:	00 e0       	ldi	r16, 0x00	; 0
   1c10a:	10 e0       	ldi	r17, 0x00	; 0
   1c10c:	3b c0       	rjmp	.+118    	; 0x1c184 <utl_vMult16x16_32+0xa2>
   1c10e:	89 91       	ld	r24, Y+
   1c110:	99 91       	ld	r25, Y+
   1c112:	f3 01       	movw	r30, r6
   1c114:	21 91       	ld	r18, Z+
   1c116:	31 91       	ld	r19, Z+
   1c118:	3f 01       	movw	r6, r30
   1c11a:	ac 01       	movw	r20, r24
   1c11c:	ba 01       	movw	r22, r20
   1c11e:	88 27       	eor	r24, r24
   1c120:	77 fd       	sbrc	r23, 7
   1c122:	80 95       	com	r24
   1c124:	98 2f       	mov	r25, r24
   1c126:	44 27       	eor	r20, r20
   1c128:	37 fd       	sbrc	r19, 7
   1c12a:	40 95       	com	r20
   1c12c:	54 2f       	mov	r21, r20
   1c12e:	0e 94 21 fa 	call	0x1f442	; 0x1f442 <__mulsi3>
   1c132:	dc 01       	movw	r26, r24
   1c134:	cb 01       	movw	r24, r22
   1c136:	b7 ff       	sbrs	r27, 7
   1c138:	17 c0       	rjmp	.+46     	; 0x1c168 <utl_vMult16x16_32+0x86>
   1c13a:	b0 95       	com	r27
   1c13c:	a0 95       	com	r26
   1c13e:	90 95       	com	r25
   1c140:	81 95       	neg	r24
   1c142:	9f 4f       	sbci	r25, 0xFF	; 255
   1c144:	af 4f       	sbci	r26, 0xFF	; 255
   1c146:	bf 4f       	sbci	r27, 0xFF	; 255
   1c148:	0e 2c       	mov	r0, r14
   1c14a:	04 c0       	rjmp	.+8      	; 0x1c154 <utl_vMult16x16_32+0x72>
   1c14c:	b5 95       	asr	r27
   1c14e:	a7 95       	ror	r26
   1c150:	97 95       	ror	r25
   1c152:	87 95       	ror	r24
   1c154:	0a 94       	dec	r0
   1c156:	d2 f7       	brpl	.-12     	; 0x1c14c <utl_vMult16x16_32+0x6a>
   1c158:	b0 95       	com	r27
   1c15a:	a0 95       	com	r26
   1c15c:	90 95       	com	r25
   1c15e:	81 95       	neg	r24
   1c160:	9f 4f       	sbci	r25, 0xFF	; 255
   1c162:	af 4f       	sbci	r26, 0xFF	; 255
   1c164:	bf 4f       	sbci	r27, 0xFF	; 255
   1c166:	08 c0       	rjmp	.+16     	; 0x1c178 <utl_vMult16x16_32+0x96>
   1c168:	0e 2c       	mov	r0, r14
   1c16a:	04 c0       	rjmp	.+8      	; 0x1c174 <utl_vMult16x16_32+0x92>
   1c16c:	b5 95       	asr	r27
   1c16e:	a7 95       	ror	r26
   1c170:	97 95       	ror	r25
   1c172:	87 95       	ror	r24
   1c174:	0a 94       	dec	r0
   1c176:	d2 f7       	brpl	.-12     	; 0x1c16c <utl_vMult16x16_32+0x8a>
   1c178:	88 0e       	add	r8, r24
   1c17a:	99 1e       	adc	r9, r25
   1c17c:	aa 1e       	adc	r10, r26
   1c17e:	bb 1e       	adc	r11, r27
   1c180:	0f 5f       	subi	r16, 0xFF	; 255
   1c182:	1f 4f       	sbci	r17, 0xFF	; 255
   1c184:	04 15       	cp	r16, r4
   1c186:	15 05       	cpc	r17, r5
   1c188:	14 f2       	brlt	.-124    	; 0x1c10e <utl_vMult16x16_32+0x2c>
   1c18a:	8c 2d       	mov	r24, r12
   1c18c:	99 27       	eor	r25, r25
   1c18e:	87 fd       	sbrc	r24, 7
   1c190:	90 95       	com	r25
   1c192:	01 97       	sbiw	r24, 0x01	; 1
   1c194:	01 e0       	ldi	r16, 0x01	; 1
   1c196:	10 e0       	ldi	r17, 0x00	; 0
   1c198:	20 e0       	ldi	r18, 0x00	; 0
   1c19a:	30 e0       	ldi	r19, 0x00	; 0
   1c19c:	04 c0       	rjmp	.+8      	; 0x1c1a6 <utl_vMult16x16_32+0xc4>
   1c19e:	00 0f       	add	r16, r16
   1c1a0:	11 1f       	adc	r17, r17
   1c1a2:	22 1f       	adc	r18, r18
   1c1a4:	33 1f       	adc	r19, r19
   1c1a6:	8a 95       	dec	r24
   1c1a8:	d2 f7       	brpl	.-12     	; 0x1c19e <utl_vMult16x16_32+0xbc>
   1c1aa:	b7 fe       	sbrs	r11, 7
   1c1ac:	13 c0       	rjmp	.+38     	; 0x1c1d4 <utl_vMult16x16_32+0xf2>
   1c1ae:	08 19       	sub	r16, r8
   1c1b0:	19 09       	sbc	r17, r9
   1c1b2:	2a 09       	sbc	r18, r10
   1c1b4:	3b 09       	sbc	r19, r11
   1c1b6:	04 c0       	rjmp	.+8      	; 0x1c1c0 <utl_vMult16x16_32+0xde>
   1c1b8:	35 95       	asr	r19
   1c1ba:	27 95       	ror	r18
   1c1bc:	17 95       	ror	r17
   1c1be:	07 95       	ror	r16
   1c1c0:	ca 94       	dec	r12
   1c1c2:	d2 f7       	brpl	.-12     	; 0x1c1b8 <utl_vMult16x16_32+0xd6>
   1c1c4:	30 95       	com	r19
   1c1c6:	20 95       	com	r18
   1c1c8:	10 95       	com	r17
   1c1ca:	01 95       	neg	r16
   1c1cc:	1f 4f       	sbci	r17, 0xFF	; 255
   1c1ce:	2f 4f       	sbci	r18, 0xFF	; 255
   1c1d0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c1d2:	0b c0       	rjmp	.+22     	; 0x1c1ea <utl_vMult16x16_32+0x108>
   1c1d4:	08 0d       	add	r16, r8
   1c1d6:	19 1d       	adc	r17, r9
   1c1d8:	2a 1d       	adc	r18, r10
   1c1da:	3b 1d       	adc	r19, r11
   1c1dc:	04 c0       	rjmp	.+8      	; 0x1c1e6 <utl_vMult16x16_32+0x104>
   1c1de:	35 95       	asr	r19
   1c1e0:	27 95       	ror	r18
   1c1e2:	17 95       	ror	r17
   1c1e4:	07 95       	ror	r16
   1c1e6:	ca 94       	dec	r12
   1c1e8:	d2 f7       	brpl	.-12     	; 0x1c1de <utl_vMult16x16_32+0xfc>
   1c1ea:	b8 01       	movw	r22, r16
   1c1ec:	c9 01       	movw	r24, r18
   1c1ee:	df 91       	pop	r29
   1c1f0:	cf 91       	pop	r28
   1c1f2:	1f 91       	pop	r17
   1c1f4:	0f 91       	pop	r16
   1c1f6:	ef 90       	pop	r14
   1c1f8:	cf 90       	pop	r12
   1c1fa:	bf 90       	pop	r11
   1c1fc:	af 90       	pop	r10
   1c1fe:	9f 90       	pop	r9
   1c200:	8f 90       	pop	r8
   1c202:	7f 90       	pop	r7
   1c204:	6f 90       	pop	r6
   1c206:	5f 90       	pop	r5
   1c208:	4f 90       	pop	r4
   1c20a:	08 95       	ret

0001c20c <utl_matMult16x16_16>:
   1c20c:	2f 92       	push	r2
   1c20e:	3f 92       	push	r3
   1c210:	4f 92       	push	r4
   1c212:	5f 92       	push	r5
   1c214:	6f 92       	push	r6
   1c216:	7f 92       	push	r7
   1c218:	8f 92       	push	r8
   1c21a:	9f 92       	push	r9
   1c21c:	af 92       	push	r10
   1c21e:	cf 92       	push	r12
   1c220:	df 92       	push	r13
   1c222:	ef 92       	push	r14
   1c224:	ff 92       	push	r15
   1c226:	0f 93       	push	r16
   1c228:	1f 93       	push	r17
   1c22a:	cf 93       	push	r28
   1c22c:	df 93       	push	r29
   1c22e:	cd b7       	in	r28, 0x3d	; 61
   1c230:	de b7       	in	r29, 0x3e	; 62
   1c232:	64 97       	sbiw	r28, 0x14	; 20
   1c234:	cd bf       	out	0x3d, r28	; 61
   1c236:	de bf       	out	0x3e, r29	; 62
   1c238:	46 2e       	mov	r4, r22
   1c23a:	54 2e       	mov	r5, r20
   1c23c:	40 17       	cp	r20, r16
   1c23e:	09 f0       	breq	.+2      	; 0x1c242 <utl_matMult16x16_16+0x36>
   1c240:	b5 c0       	rjmp	.+362    	; 0x1c3ac <utl_matMult16x16_16+0x1a0>
   1c242:	6e 2c       	mov	r6, r14
   1c244:	77 24       	eor	r7, r7
   1c246:	67 fc       	sbrc	r6, 7
   1c248:	70 94       	com	r7
   1c24a:	66 0c       	add	r6, r6
   1c24c:	77 1c       	adc	r7, r7
   1c24e:	65 2d       	mov	r22, r5
   1c250:	77 27       	eor	r23, r23
   1c252:	67 fd       	sbrc	r22, 7
   1c254:	70 95       	com	r23
   1c256:	66 0f       	add	r22, r22
   1c258:	77 1f       	adc	r23, r23
   1c25a:	6d 83       	std	Y+5, r22	; 0x05
   1c25c:	7e 83       	std	Y+6, r23	; 0x06
   1c25e:	89 83       	std	Y+1, r24	; 0x01
   1c260:	9a 83       	std	Y+2, r25	; 0x02
   1c262:	2c 2c       	mov	r2, r12
   1c264:	3d 2c       	mov	r3, r13
   1c266:	1f 82       	std	Y+7, r1	; 0x07
   1c268:	18 86       	std	Y+8, r1	; 0x08
   1c26a:	99 24       	eor	r9, r9
   1c26c:	c9 01       	movw	r24, r18
   1c26e:	86 19       	sub	r24, r6
   1c270:	97 09       	sbc	r25, r7
   1c272:	82 19       	sub	r24, r2
   1c274:	93 09       	sbc	r25, r3
   1c276:	89 87       	std	Y+9, r24	; 0x09
   1c278:	9a 87       	std	Y+10, r25	; 0x0a
   1c27a:	8a 18       	sub	r8, r10
   1c27c:	17 ef       	ldi	r17, 0xF7	; 247
   1c27e:	c1 2e       	mov	r12, r17
   1c280:	c8 0c       	add	r12, r8
   1c282:	88 2d       	mov	r24, r8
   1c284:	99 27       	eor	r25, r25
   1c286:	87 fd       	sbrc	r24, 7
   1c288:	90 95       	com	r25
   1c28a:	e0 e1       	ldi	r30, 0x10	; 16
   1c28c:	f0 e0       	ldi	r31, 0x00	; 0
   1c28e:	e8 1b       	sub	r30, r24
   1c290:	f9 0b       	sbc	r31, r25
   1c292:	eb 87       	std	Y+11, r30	; 0x0b
   1c294:	fc 87       	std	Y+12, r31	; 0x0c
   1c296:	86 c0       	rjmp	.+268    	; 0x1c3a4 <utl_matMult16x16_16+0x198>
   1c298:	ef 85       	ldd	r30, Y+15	; 0x0f
   1c29a:	f8 89       	ldd	r31, Y+16	; 0x10
   1c29c:	e6 0d       	add	r30, r6
   1c29e:	f7 1d       	adc	r31, r7
   1c2a0:	60 81       	ld	r22, Z
   1c2a2:	71 81       	ldd	r23, Z+1	; 0x01
   1c2a4:	ed 85       	ldd	r30, Y+13	; 0x0d
   1c2a6:	fe 85       	ldd	r31, Y+14	; 0x0e
   1c2a8:	81 91       	ld	r24, Z+
   1c2aa:	91 91       	ld	r25, Z+
   1c2ac:	ed 87       	std	Y+13, r30	; 0x0d
   1c2ae:	fe 87       	std	Y+14, r31	; 0x0e
   1c2b0:	a9 01       	movw	r20, r18
   1c2b2:	98 01       	movw	r18, r16
   1c2b4:	0a 2d       	mov	r16, r10
   1c2b6:	0e 94 2f e0 	call	0x1c05e	; 0x1c05e <utl_mac16x16_32>
   1c2ba:	8b 01       	movw	r16, r22
   1c2bc:	9c 01       	movw	r18, r24
   1c2be:	f3 94       	inc	r15
   1c2c0:	62 0c       	add	r6, r2
   1c2c2:	73 1c       	adc	r7, r3
   1c2c4:	f5 14       	cp	r15, r5
   1c2c6:	44 f3       	brlt	.-48     	; 0x1c298 <utl_matMult16x16_16+0x8c>
   1c2c8:	37 ff       	sbrs	r19, 7
   1c2ca:	09 c0       	rjmp	.+18     	; 0x1c2de <utl_matMult16x16_16+0xd2>
   1c2cc:	30 95       	com	r19
   1c2ce:	20 95       	com	r18
   1c2d0:	10 95       	com	r17
   1c2d2:	01 95       	neg	r16
   1c2d4:	1f 4f       	sbci	r17, 0xFF	; 255
   1c2d6:	2f 4f       	sbci	r18, 0xFF	; 255
   1c2d8:	3f 4f       	sbci	r19, 0xFF	; 255
   1c2da:	4f ef       	ldi	r20, 0xFF	; 255
   1c2dc:	01 c0       	rjmp	.+2      	; 0x1c2e0 <utl_matMult16x16_16+0xd4>
   1c2de:	41 e0       	ldi	r20, 0x01	; 1
   1c2e0:	f7 e0       	ldi	r31, 0x07	; 7
   1c2e2:	d9 01       	movw	r26, r18
   1c2e4:	c8 01       	movw	r24, r16
   1c2e6:	fc 15       	cp	r31, r12
   1c2e8:	88 f0       	brcs	.+34     	; 0x1c30c <utl_matMult16x16_16+0x100>
   1c2ea:	0b 84       	ldd	r0, Y+11	; 0x0b
   1c2ec:	04 c0       	rjmp	.+8      	; 0x1c2f6 <utl_matMult16x16_16+0xea>
   1c2ee:	88 0f       	add	r24, r24
   1c2f0:	99 1f       	adc	r25, r25
   1c2f2:	aa 1f       	adc	r26, r26
   1c2f4:	bb 1f       	adc	r27, r27
   1c2f6:	0a 94       	dec	r0
   1c2f8:	d2 f7       	brpl	.-12     	; 0x1c2ee <utl_matMult16x16_16+0xe2>
   1c2fa:	4f 3f       	cpi	r20, 0xFF	; 255
   1c2fc:	29 f4       	brne	.+10     	; 0x1c308 <utl_matMult16x16_16+0xfc>
   1c2fe:	88 27       	eor	r24, r24
   1c300:	99 27       	eor	r25, r25
   1c302:	8a 1b       	sub	r24, r26
   1c304:	9b 0b       	sbc	r25, r27
   1c306:	0f c0       	rjmp	.+30     	; 0x1c326 <utl_matMult16x16_16+0x11a>
   1c308:	cd 01       	movw	r24, r26
   1c30a:	0d c0       	rjmp	.+26     	; 0x1c326 <utl_matMult16x16_16+0x11a>
   1c30c:	08 2c       	mov	r0, r8
   1c30e:	04 c0       	rjmp	.+8      	; 0x1c318 <utl_matMult16x16_16+0x10c>
   1c310:	b5 95       	asr	r27
   1c312:	a7 95       	ror	r26
   1c314:	97 95       	ror	r25
   1c316:	87 95       	ror	r24
   1c318:	0a 94       	dec	r0
   1c31a:	d2 f7       	brpl	.-12     	; 0x1c310 <utl_matMult16x16_16+0x104>
   1c31c:	4f 3f       	cpi	r20, 0xFF	; 255
   1c31e:	19 f4       	brne	.+6      	; 0x1c326 <utl_matMult16x16_16+0x11a>
   1c320:	90 95       	com	r25
   1c322:	81 95       	neg	r24
   1c324:	9f 4f       	sbci	r25, 0xFF	; 255
   1c326:	eb 81       	ldd	r30, Y+3	; 0x03
   1c328:	fc 81       	ldd	r31, Y+4	; 0x04
   1c32a:	81 93       	st	Z+, r24
   1c32c:	91 93       	st	Z+, r25
   1c32e:	eb 83       	std	Y+3, r30	; 0x03
   1c330:	fc 83       	std	Y+4, r31	; 0x04
   1c332:	d3 94       	inc	r13
   1c334:	0e c0       	rjmp	.+28     	; 0x1c352 <utl_matMult16x16_16+0x146>
   1c336:	2b 82       	std	Y+3, r2	; 0x03
   1c338:	3c 82       	std	Y+4, r3	; 0x04
   1c33a:	dd 24       	eor	r13, r13
   1c33c:	29 85       	ldd	r18, Y+9	; 0x09
   1c33e:	3a 85       	ldd	r19, Y+10	; 0x0a
   1c340:	4f 81       	ldd	r20, Y+7	; 0x07
   1c342:	58 85       	ldd	r21, Y+8	; 0x08
   1c344:	24 0f       	add	r18, r20
   1c346:	35 1f       	adc	r19, r21
   1c348:	29 8b       	std	Y+17, r18	; 0x11
   1c34a:	3a 8b       	std	Y+18, r19	; 0x12
   1c34c:	2b 8a       	std	Y+19, r2	; 0x13
   1c34e:	3c 8a       	std	Y+20, r3	; 0x14
   1c350:	13 01       	movw	r2, r6
   1c352:	de 14       	cp	r13, r14
   1c354:	9c f4       	brge	.+38     	; 0x1c37c <utl_matMult16x16_16+0x170>
   1c356:	69 81       	ldd	r22, Y+1	; 0x01
   1c358:	7a 81       	ldd	r23, Y+2	; 0x02
   1c35a:	6d 87       	std	Y+13, r22	; 0x0d
   1c35c:	7e 87       	std	Y+14, r23	; 0x0e
   1c35e:	66 24       	eor	r6, r6
   1c360:	77 24       	eor	r7, r7
   1c362:	00 e0       	ldi	r16, 0x00	; 0
   1c364:	10 e0       	ldi	r17, 0x00	; 0
   1c366:	98 01       	movw	r18, r16
   1c368:	ff 24       	eor	r15, r15
   1c36a:	8b 81       	ldd	r24, Y+3	; 0x03
   1c36c:	9c 81       	ldd	r25, Y+4	; 0x04
   1c36e:	e9 89       	ldd	r30, Y+17	; 0x11
   1c370:	fa 89       	ldd	r31, Y+18	; 0x12
   1c372:	8e 0f       	add	r24, r30
   1c374:	9f 1f       	adc	r25, r31
   1c376:	8f 87       	std	Y+15, r24	; 0x0f
   1c378:	98 8b       	std	Y+16, r25	; 0x10
   1c37a:	a2 cf       	rjmp	.-188    	; 0x1c2c0 <utl_matMult16x16_16+0xb4>
   1c37c:	31 01       	movw	r6, r2
   1c37e:	2b 88       	ldd	r2, Y+19	; 0x13
   1c380:	3c 88       	ldd	r3, Y+20	; 0x14
   1c382:	93 94       	inc	r9
   1c384:	26 0c       	add	r2, r6
   1c386:	37 1c       	adc	r3, r7
   1c388:	29 81       	ldd	r18, Y+1	; 0x01
   1c38a:	3a 81       	ldd	r19, Y+2	; 0x02
   1c38c:	4d 81       	ldd	r20, Y+5	; 0x05
   1c38e:	5e 81       	ldd	r21, Y+6	; 0x06
   1c390:	24 0f       	add	r18, r20
   1c392:	35 1f       	adc	r19, r21
   1c394:	29 83       	std	Y+1, r18	; 0x01
   1c396:	3a 83       	std	Y+2, r19	; 0x02
   1c398:	6f 81       	ldd	r22, Y+7	; 0x07
   1c39a:	78 85       	ldd	r23, Y+8	; 0x08
   1c39c:	66 19       	sub	r22, r6
   1c39e:	77 09       	sbc	r23, r7
   1c3a0:	6f 83       	std	Y+7, r22	; 0x07
   1c3a2:	78 87       	std	Y+8, r23	; 0x08
   1c3a4:	94 14       	cp	r9, r4
   1c3a6:	3c f2       	brlt	.-114    	; 0x1c336 <utl_matMult16x16_16+0x12a>
   1c3a8:	81 e0       	ldi	r24, 0x01	; 1
   1c3aa:	01 c0       	rjmp	.+2      	; 0x1c3ae <utl_matMult16x16_16+0x1a2>
   1c3ac:	80 e0       	ldi	r24, 0x00	; 0
   1c3ae:	64 96       	adiw	r28, 0x14	; 20
   1c3b0:	cd bf       	out	0x3d, r28	; 61
   1c3b2:	de bf       	out	0x3e, r29	; 62
   1c3b4:	df 91       	pop	r29
   1c3b6:	cf 91       	pop	r28
   1c3b8:	1f 91       	pop	r17
   1c3ba:	0f 91       	pop	r16
   1c3bc:	ff 90       	pop	r15
   1c3be:	ef 90       	pop	r14
   1c3c0:	df 90       	pop	r13
   1c3c2:	cf 90       	pop	r12
   1c3c4:	af 90       	pop	r10
   1c3c6:	9f 90       	pop	r9
   1c3c8:	8f 90       	pop	r8
   1c3ca:	7f 90       	pop	r7
   1c3cc:	6f 90       	pop	r6
   1c3ce:	5f 90       	pop	r5
   1c3d0:	4f 90       	pop	r4
   1c3d2:	3f 90       	pop	r3
   1c3d4:	2f 90       	pop	r2
   1c3d6:	08 95       	ret

0001c3d8 <utl_matTrans16>:
   1c3d8:	8f 92       	push	r8
   1c3da:	9f 92       	push	r9
   1c3dc:	af 92       	push	r10
   1c3de:	bf 92       	push	r11
   1c3e0:	cf 92       	push	r12
   1c3e2:	df 92       	push	r13
   1c3e4:	ef 92       	push	r14
   1c3e6:	ff 92       	push	r15
   1c3e8:	0f 93       	push	r16
   1c3ea:	1f 93       	push	r17
   1c3ec:	cf 93       	push	r28
   1c3ee:	df 93       	push	r29
   1c3f0:	eb 01       	movw	r28, r22
   1c3f2:	c2 2e       	mov	r12, r18
   1c3f4:	dd 24       	eor	r13, r13
   1c3f6:	c7 fc       	sbrc	r12, 7
   1c3f8:	d0 94       	com	r13
   1c3fa:	cc 0c       	add	r12, r12
   1c3fc:	dd 1c       	adc	r13, r13
   1c3fe:	dc 01       	movw	r26, r24
   1c400:	ee 24       	eor	r14, r14
   1c402:	ff 24       	eor	r15, r15
   1c404:	30 e0       	ldi	r19, 0x00	; 0
   1c406:	64 2f       	mov	r22, r20
   1c408:	77 27       	eor	r23, r23
   1c40a:	67 fd       	sbrc	r22, 7
   1c40c:	70 95       	com	r23
   1c40e:	66 0f       	add	r22, r22
   1c410:	77 1f       	adc	r23, r23
   1c412:	c6 1b       	sub	r28, r22
   1c414:	d7 0b       	sbc	r29, r23
   1c416:	15 c0       	rjmp	.+42     	; 0x1c442 <utl_matTrans16+0x6a>
   1c418:	f5 01       	movw	r30, r10
   1c41a:	81 90       	ld	r8, Z+
   1c41c:	91 90       	ld	r9, Z+
   1c41e:	5f 01       	movw	r10, r30
   1c420:	fc 01       	movw	r30, r24
   1c422:	e0 0f       	add	r30, r16
   1c424:	f1 1f       	adc	r31, r17
   1c426:	80 82       	st	Z, r8
   1c428:	91 82       	std	Z+1, r9	; 0x01
   1c42a:	5f 5f       	subi	r21, 0xFF	; 255
   1c42c:	06 0f       	add	r16, r22
   1c42e:	17 1f       	adc	r17, r23
   1c430:	52 17       	cp	r21, r18
   1c432:	94 f3       	brlt	.-28     	; 0x1c418 <utl_matTrans16+0x40>
   1c434:	3f 5f       	subi	r19, 0xFF	; 255
   1c436:	ac 0d       	add	r26, r12
   1c438:	bd 1d       	adc	r27, r13
   1c43a:	82 e0       	ldi	r24, 0x02	; 2
   1c43c:	90 e0       	ldi	r25, 0x00	; 0
   1c43e:	e8 0e       	add	r14, r24
   1c440:	f9 1e       	adc	r15, r25
   1c442:	34 17       	cp	r19, r20
   1c444:	44 f4       	brge	.+16     	; 0x1c456 <utl_matTrans16+0x7e>
   1c446:	5d 01       	movw	r10, r26
   1c448:	00 e0       	ldi	r16, 0x00	; 0
   1c44a:	10 e0       	ldi	r17, 0x00	; 0
   1c44c:	50 e0       	ldi	r21, 0x00	; 0
   1c44e:	ce 01       	movw	r24, r28
   1c450:	8e 0d       	add	r24, r14
   1c452:	9f 1d       	adc	r25, r15
   1c454:	eb cf       	rjmp	.-42     	; 0x1c42c <utl_matTrans16+0x54>
   1c456:	df 91       	pop	r29
   1c458:	cf 91       	pop	r28
   1c45a:	1f 91       	pop	r17
   1c45c:	0f 91       	pop	r16
   1c45e:	ff 90       	pop	r15
   1c460:	ef 90       	pop	r14
   1c462:	df 90       	pop	r13
   1c464:	cf 90       	pop	r12
   1c466:	bf 90       	pop	r11
   1c468:	af 90       	pop	r10
   1c46a:	9f 90       	pop	r9
   1c46c:	8f 90       	pop	r8
   1c46e:	08 95       	ret

0001c470 <utl_matMultF>:
   1c470:	2f 92       	push	r2
   1c472:	3f 92       	push	r3
   1c474:	4f 92       	push	r4
   1c476:	5f 92       	push	r5
   1c478:	6f 92       	push	r6
   1c47a:	7f 92       	push	r7
   1c47c:	8f 92       	push	r8
   1c47e:	af 92       	push	r10
   1c480:	bf 92       	push	r11
   1c482:	cf 92       	push	r12
   1c484:	df 92       	push	r13
   1c486:	ef 92       	push	r14
   1c488:	ff 92       	push	r15
   1c48a:	0f 93       	push	r16
   1c48c:	1f 93       	push	r17
   1c48e:	cf 93       	push	r28
   1c490:	df 93       	push	r29
   1c492:	cd b7       	in	r28, 0x3d	; 61
   1c494:	de b7       	in	r29, 0x3e	; 62
   1c496:	6c 97       	sbiw	r28, 0x1c	; 28
   1c498:	cd bf       	out	0x3d, r28	; 61
   1c49a:	de bf       	out	0x3e, r29	; 62
   1c49c:	4d 8b       	std	Y+21, r20	; 0x15
   1c49e:	5e 8b       	std	Y+22, r21	; 0x16
   1c4a0:	6f 8b       	std	Y+23, r22	; 0x17
   1c4a2:	78 8f       	std	Y+24, r23	; 0x18
   1c4a4:	0f 87       	std	Y+15, r16	; 0x0f
   1c4a6:	18 8b       	std	Y+16, r17	; 0x10
   1c4a8:	29 8b       	std	Y+17, r18	; 0x11
   1c4aa:	3a 8b       	std	Y+18, r19	; 0x12
   1c4ac:	b6 01       	movw	r22, r12
   1c4ae:	a5 01       	movw	r20, r10
   1c4b0:	3d a9       	sts	0x4d, r19
   1c4b2:	2e a9       	sts	0x4e, r18
   1c4b4:	af 84       	ldd	r10, Y+15	; 0x0f
   1c4b6:	b8 88       	ldd	r11, Y+16	; 0x10
   1c4b8:	c9 88       	ldd	r12, Y+17	; 0x11
   1c4ba:	da 88       	ldd	r13, Y+18	; 0x12
   1c4bc:	a4 16       	cp	r10, r20
   1c4be:	b5 06       	cpc	r11, r21
   1c4c0:	c6 06       	cpc	r12, r22
   1c4c2:	d7 06       	cpc	r13, r23
   1c4c4:	09 f0       	breq	.+2      	; 0x1c4c8 <utl_matMultF+0x58>
   1c4c6:	c1 c0       	rjmp	.+386    	; 0x1c64a <utl_matMultF+0x1da>
   1c4c8:	c9 a8       	sts	0x89, r28
   1c4ca:	da a8       	sts	0x8a, r29
   1c4cc:	cc 0c       	add	r12, r12
   1c4ce:	dd 1c       	adc	r13, r13
   1c4d0:	cc 0c       	add	r12, r12
   1c4d2:	dd 1c       	adc	r13, r13
   1c4d4:	cd 86       	std	Y+13, r12	; 0x0d
   1c4d6:	de 86       	std	Y+14, r13	; 0x0e
   1c4d8:	39 83       	std	Y+1, r19	; 0x01
   1c4da:	2a 83       	std	Y+2, r18	; 0x02
   1c4dc:	aa 0c       	add	r10, r10
   1c4de:	bb 1c       	adc	r11, r11
   1c4e0:	aa 0c       	add	r10, r10
   1c4e2:	bb 1c       	adc	r11, r11
   1c4e4:	ab 8a       	std	Y+19, r10	; 0x13
   1c4e6:	bc 8a       	std	Y+20, r11	; 0x14
   1c4e8:	8b 83       	std	Y+3, r24	; 0x03
   1c4ea:	9c 83       	std	Y+4, r25	; 0x04
   1c4ec:	1f 82       	std	Y+7, r1	; 0x07
   1c4ee:	18 86       	std	Y+8, r1	; 0x08
   1c4f0:	19 86       	std	Y+9, r1	; 0x09
   1c4f2:	1a 86       	std	Y+10, r1	; 0x0a
   1c4f4:	87 01       	movw	r16, r14
   1c4f6:	0c 19       	sub	r16, r12
   1c4f8:	1d 09       	sbc	r17, r13
   1c4fa:	0b 8f       	std	Y+27, r16	; 0x1b
   1c4fc:	1c 8f       	std	Y+28, r17	; 0x1c
   1c4fe:	95 c0       	rjmp	.+298    	; 0x1c62a <utl_matMultF+0x1ba>
   1c500:	eb 81       	ldd	r30, Y+3	; 0x03
   1c502:	fc 81       	ldd	r31, Y+4	; 0x04
   1c504:	2b 85       	ldd	r18, Y+11	; 0x0b
   1c506:	3c 85       	ldd	r19, Y+12	; 0x0c
   1c508:	e2 0f       	add	r30, r18
   1c50a:	f3 1f       	adc	r31, r19
   1c50c:	a9 8d       	ldd	r26, Y+25	; 0x19
   1c50e:	ba 8d       	ldd	r27, Y+26	; 0x1a
   1c510:	4d 81       	ldd	r20, Y+5	; 0x05
   1c512:	5e 81       	ldd	r21, Y+6	; 0x06
   1c514:	a4 0f       	add	r26, r20
   1c516:	b5 1f       	adc	r27, r21
   1c518:	60 81       	ld	r22, Z
   1c51a:	71 81       	ldd	r23, Z+1	; 0x01
   1c51c:	82 81       	ldd	r24, Z+2	; 0x02
   1c51e:	93 81       	ldd	r25, Z+3	; 0x03
   1c520:	2d 91       	ld	r18, X+
   1c522:	3d 91       	ld	r19, X+
   1c524:	4d 91       	ld	r20, X+
   1c526:	5c 91       	ld	r21, X
   1c528:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1c52c:	9b 01       	movw	r18, r22
   1c52e:	ac 01       	movw	r20, r24
   1c530:	62 2d       	mov	r22, r2
   1c532:	7b 2d       	mov	r23, r11
   1c534:	ea 2d       	mov	r30, r10
   1c536:	f8 2d       	mov	r31, r8
   1c538:	cb 01       	movw	r24, r22
   1c53a:	df 01       	movw	r26, r30
   1c53c:	bc 01       	movw	r22, r24
   1c53e:	cd 01       	movw	r24, r26
   1c540:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1c544:	26 2e       	mov	r2, r22
   1c546:	b7 2e       	mov	r11, r23
   1c548:	a8 2e       	mov	r10, r24
   1c54a:	89 2e       	mov	r8, r25
   1c54c:	08 94       	sec
   1c54e:	c1 1c       	adc	r12, r1
   1c550:	d1 1c       	adc	r13, r1
   1c552:	e1 1c       	adc	r14, r1
   1c554:	f1 1c       	adc	r15, r1
   1c556:	8b 85       	ldd	r24, Y+11	; 0x0b
   1c558:	9c 85       	ldd	r25, Y+12	; 0x0c
   1c55a:	04 96       	adiw	r24, 0x04	; 4
   1c55c:	8b 87       	std	Y+11, r24	; 0x0b
   1c55e:	9c 87       	std	Y+12, r25	; 0x0c
   1c560:	ad 81       	ldd	r26, Y+5	; 0x05
   1c562:	be 81       	ldd	r27, Y+6	; 0x06
   1c564:	2d 85       	ldd	r18, Y+13	; 0x0d
   1c566:	3e 85       	ldd	r19, Y+14	; 0x0e
   1c568:	a2 0f       	add	r26, r18
   1c56a:	b3 1f       	adc	r27, r19
   1c56c:	ad 83       	std	Y+5, r26	; 0x05
   1c56e:	be 83       	std	Y+6, r27	; 0x06
   1c570:	8f 85       	ldd	r24, Y+15	; 0x0f
   1c572:	98 89       	ldd	r25, Y+16	; 0x10
   1c574:	a9 89       	ldd	r26, Y+17	; 0x11
   1c576:	ba 89       	ldd	r27, Y+18	; 0x12
   1c578:	c8 16       	cp	r12, r24
   1c57a:	d9 06       	cpc	r13, r25
   1c57c:	ea 06       	cpc	r14, r26
   1c57e:	fb 06       	cpc	r15, r27
   1c580:	0c f4       	brge	.+2      	; 0x1c584 <utl_matMultF+0x114>
   1c582:	be cf       	rjmp	.-132    	; 0x1c500 <utl_matMultF+0x90>
   1c584:	e9 81       	ldd	r30, Y+1	; 0x01
   1c586:	fa 81       	ldd	r31, Y+2	; 0x02
   1c588:	e0 0f       	add	r30, r16
   1c58a:	f1 1f       	adc	r31, r17
   1c58c:	22 2d       	mov	r18, r2
   1c58e:	3b 2d       	mov	r19, r11
   1c590:	4a 2d       	mov	r20, r10
   1c592:	58 2d       	mov	r21, r8
   1c594:	c9 01       	movw	r24, r18
   1c596:	da 01       	movw	r26, r20
   1c598:	80 83       	st	Z, r24
   1c59a:	91 83       	std	Z+1, r25	; 0x01
   1c59c:	a2 83       	std	Z+2, r26	; 0x02
   1c59e:	b3 83       	std	Z+3, r27	; 0x03
   1c5a0:	08 94       	sec
   1c5a2:	41 1c       	adc	r4, r1
   1c5a4:	51 1c       	adc	r5, r1
   1c5a6:	61 1c       	adc	r6, r1
   1c5a8:	71 1c       	adc	r7, r1
   1c5aa:	0c 5f       	subi	r16, 0xFC	; 252
   1c5ac:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5ae:	06 c0       	rjmp	.+12     	; 0x1c5bc <utl_matMultF+0x14c>
   1c5b0:	22 24       	eor	r2, r2
   1c5b2:	33 24       	eor	r3, r3
   1c5b4:	44 24       	eor	r4, r4
   1c5b6:	55 24       	eor	r5, r5
   1c5b8:	32 01       	movw	r6, r4
   1c5ba:	81 01       	movw	r16, r2
   1c5bc:	a9 a8       	sts	0x89, r26
   1c5be:	ba a8       	sts	0x8a, r27
   1c5c0:	cb a8       	sts	0x8b, r28
   1c5c2:	dc a8       	sts	0x8c, r29
   1c5c4:	4a 14       	cp	r4, r10
   1c5c6:	5b 04       	cpc	r5, r11
   1c5c8:	6c 04       	cpc	r6, r12
   1c5ca:	7d 04       	cpc	r7, r13
   1c5cc:	94 f4       	brge	.+36     	; 0x1c5f2 <utl_matMultF+0x182>
   1c5ce:	1d 82       	std	Y+5, r1	; 0x05
   1c5d0:	1e 82       	std	Y+6, r1	; 0x06
   1c5d2:	1b 86       	std	Y+11, r1	; 0x0b
   1c5d4:	1c 86       	std	Y+12, r1	; 0x0c
   1c5d6:	22 24       	eor	r2, r2
   1c5d8:	bb 24       	eor	r11, r11
   1c5da:	aa 24       	eor	r10, r10
   1c5dc:	88 24       	eor	r8, r8
   1c5de:	cc 24       	eor	r12, r12
   1c5e0:	dd 24       	eor	r13, r13
   1c5e2:	76 01       	movw	r14, r12
   1c5e4:	2b 8d       	ldd	r18, Y+27	; 0x1b
   1c5e6:	3c 8d       	ldd	r19, Y+28	; 0x1c
   1c5e8:	20 0f       	add	r18, r16
   1c5ea:	31 1f       	adc	r19, r17
   1c5ec:	29 8f       	std	Y+25, r18	; 0x19
   1c5ee:	3a 8f       	std	Y+26, r19	; 0x1a
   1c5f0:	b7 cf       	rjmp	.-146    	; 0x1c560 <utl_matMultF+0xf0>
   1c5f2:	0f 81       	ldd	r16, Y+7	; 0x07
   1c5f4:	18 85       	ldd	r17, Y+8	; 0x08
   1c5f6:	29 85       	ldd	r18, Y+9	; 0x09
   1c5f8:	3a 85       	ldd	r19, Y+10	; 0x0a
   1c5fa:	0f 5f       	subi	r16, 0xFF	; 255
   1c5fc:	1f 4f       	sbci	r17, 0xFF	; 255
   1c5fe:	2f 4f       	sbci	r18, 0xFF	; 255
   1c600:	3f 4f       	sbci	r19, 0xFF	; 255
   1c602:	0f 83       	std	Y+7, r16	; 0x07
   1c604:	18 87       	std	Y+8, r17	; 0x08
   1c606:	29 87       	std	Y+9, r18	; 0x09
   1c608:	3a 87       	std	Y+10, r19	; 0x0a
   1c60a:	a9 80       	ldd	r10, Y+1	; 0x01
   1c60c:	ba 80       	ldd	r11, Y+2	; 0x02
   1c60e:	cd 84       	ldd	r12, Y+13	; 0x0d
   1c610:	de 84       	ldd	r13, Y+14	; 0x0e
   1c612:	ac 0c       	add	r10, r12
   1c614:	bd 1c       	adc	r11, r13
   1c616:	a9 82       	std	Y+1, r10	; 0x01
   1c618:	ba 82       	std	Y+2, r11	; 0x02
   1c61a:	0b 81       	ldd	r16, Y+3	; 0x03
   1c61c:	1c 81       	ldd	r17, Y+4	; 0x04
   1c61e:	ab 88       	ldd	r10, Y+19	; 0x13
   1c620:	bc 88       	ldd	r11, Y+20	; 0x14
   1c622:	0a 0d       	add	r16, r10
   1c624:	1b 1d       	adc	r17, r11
   1c626:	0b 83       	std	Y+3, r16	; 0x03
   1c628:	1c 83       	std	Y+4, r17	; 0x04
   1c62a:	0f 81       	ldd	r16, Y+7	; 0x07
   1c62c:	18 85       	ldd	r17, Y+8	; 0x08
   1c62e:	29 85       	ldd	r18, Y+9	; 0x09
   1c630:	3a 85       	ldd	r19, Y+10	; 0x0a
   1c632:	8d 89       	ldd	r24, Y+21	; 0x15
   1c634:	9e 89       	ldd	r25, Y+22	; 0x16
   1c636:	af 89       	ldd	r26, Y+23	; 0x17
   1c638:	b8 8d       	ldd	r27, Y+24	; 0x18
   1c63a:	08 17       	cp	r16, r24
   1c63c:	19 07       	cpc	r17, r25
   1c63e:	2a 07       	cpc	r18, r26
   1c640:	3b 07       	cpc	r19, r27
   1c642:	0c f4       	brge	.+2      	; 0x1c646 <utl_matMultF+0x1d6>
   1c644:	b5 cf       	rjmp	.-150    	; 0x1c5b0 <utl_matMultF+0x140>
   1c646:	81 e0       	ldi	r24, 0x01	; 1
   1c648:	01 c0       	rjmp	.+2      	; 0x1c64c <utl_matMultF+0x1dc>
   1c64a:	80 e0       	ldi	r24, 0x00	; 0
   1c64c:	6c 96       	adiw	r28, 0x1c	; 28
   1c64e:	cd bf       	out	0x3d, r28	; 61
   1c650:	de bf       	out	0x3e, r29	; 62
   1c652:	df 91       	pop	r29
   1c654:	cf 91       	pop	r28
   1c656:	1f 91       	pop	r17
   1c658:	0f 91       	pop	r16
   1c65a:	ff 90       	pop	r15
   1c65c:	ef 90       	pop	r14
   1c65e:	df 90       	pop	r13
   1c660:	cf 90       	pop	r12
   1c662:	bf 90       	pop	r11
   1c664:	af 90       	pop	r10
   1c666:	8f 90       	pop	r8
   1c668:	7f 90       	pop	r7
   1c66a:	6f 90       	pop	r6
   1c66c:	5f 90       	pop	r5
   1c66e:	4f 90       	pop	r4
   1c670:	3f 90       	pop	r3
   1c672:	2f 90       	pop	r2
   1c674:	08 95       	ret

0001c676 <utl_matInvF>:
   1c676:	2f 92       	push	r2
   1c678:	3f 92       	push	r3
   1c67a:	4f 92       	push	r4
   1c67c:	5f 92       	push	r5
   1c67e:	6f 92       	push	r6
   1c680:	7f 92       	push	r7
   1c682:	8f 92       	push	r8
   1c684:	9f 92       	push	r9
   1c686:	af 92       	push	r10
   1c688:	bf 92       	push	r11
   1c68a:	cf 92       	push	r12
   1c68c:	df 92       	push	r13
   1c68e:	ef 92       	push	r14
   1c690:	ff 92       	push	r15
   1c692:	0f 93       	push	r16
   1c694:	1f 93       	push	r17
   1c696:	cf 93       	push	r28
   1c698:	df 93       	push	r29
   1c69a:	cd b7       	in	r28, 0x3d	; 61
   1c69c:	de b7       	in	r29, 0x3e	; 62
   1c69e:	cc 5a       	subi	r28, 0xAC	; 172
   1c6a0:	d2 40       	sbci	r29, 0x02	; 2
   1c6a2:	cd bf       	out	0x3d, r28	; 61
   1c6a4:	de bf       	out	0x3e, r29	; 62
   1c6a6:	c7 55       	subi	r28, 0x57	; 87
   1c6a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6aa:	68 83       	st	Y, r22
   1c6ac:	c9 5a       	subi	r28, 0xA9	; 169
   1c6ae:	d2 40       	sbci	r29, 0x02	; 2
   1c6b0:	c6 55       	subi	r28, 0x56	; 86
   1c6b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6b4:	78 83       	st	Y, r23
   1c6b6:	ca 5a       	subi	r28, 0xAA	; 170
   1c6b8:	d2 40       	sbci	r29, 0x02	; 2
   1c6ba:	c7 57       	subi	r28, 0x77	; 119
   1c6bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6be:	28 83       	st	Y, r18
   1c6c0:	39 83       	std	Y+1, r19	; 0x01
   1c6c2:	4a 83       	std	Y+2, r20	; 0x02
   1c6c4:	5b 83       	std	Y+3, r21	; 0x03
   1c6c6:	c9 58       	subi	r28, 0x89	; 137
   1c6c8:	d2 40       	sbci	r29, 0x02	; 2
   1c6ca:	22 0f       	add	r18, r18
   1c6cc:	33 1f       	adc	r19, r19
   1c6ce:	44 1f       	adc	r20, r20
   1c6d0:	55 1f       	adc	r21, r21
   1c6d2:	cf 56       	subi	r28, 0x6F	; 111
   1c6d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6d6:	28 83       	st	Y, r18
   1c6d8:	39 83       	std	Y+1, r19	; 0x01
   1c6da:	4a 83       	std	Y+2, r20	; 0x02
   1c6dc:	5b 83       	std	Y+3, r21	; 0x03
   1c6de:	c1 59       	subi	r28, 0x91	; 145
   1c6e0:	d2 40       	sbci	r29, 0x02	; 2
   1c6e2:	23 31       	cpi	r18, 0x13	; 19
   1c6e4:	31 05       	cpc	r19, r1
   1c6e6:	41 05       	cpc	r20, r1
   1c6e8:	51 05       	cpc	r21, r1
   1c6ea:	0c f0       	brlt	.+2      	; 0x1c6ee <utl_matInvF+0x78>
   1c6ec:	21 c4       	rjmp	.+2114   	; 0x1cf30 <utl_matInvF+0x8ba>
   1c6ee:	c7 57       	subi	r28, 0x77	; 119
   1c6f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c6f2:	88 80       	ld	r8, Y
   1c6f4:	99 80       	ldd	r9, Y+1	; 0x01
   1c6f6:	c9 58       	subi	r28, 0x89	; 137
   1c6f8:	d2 40       	sbci	r29, 0x02	; 2
   1c6fa:	88 0c       	add	r8, r8
   1c6fc:	99 1c       	adc	r9, r9
   1c6fe:	88 0c       	add	r8, r8
   1c700:	99 1c       	adc	r9, r9
   1c702:	c5 56       	subi	r28, 0x65	; 101
   1c704:	dd 4f       	sbci	r29, 0xFD	; 253
   1c706:	88 82       	st	Y, r8
   1c708:	99 82       	std	Y+1, r9	; 0x01
   1c70a:	cb 59       	subi	r28, 0x9B	; 155
   1c70c:	d2 40       	sbci	r29, 0x02	; 2
   1c70e:	8c 01       	movw	r16, r24
   1c710:	5e 01       	movw	r10, r28
   1c712:	08 94       	sec
   1c714:	a1 1c       	adc	r10, r1
   1c716:	b1 1c       	adc	r11, r1
   1c718:	40 e0       	ldi	r20, 0x00	; 0
   1c71a:	50 e0       	ldi	r21, 0x00	; 0
   1c71c:	ba 01       	movw	r22, r20
   1c71e:	95 01       	movw	r18, r10
   1c720:	c7 57       	subi	r28, 0x77	; 119
   1c722:	dd 4f       	sbci	r29, 0xFD	; 253
   1c724:	48 80       	ld	r4, Y
   1c726:	59 80       	ldd	r5, Y+1	; 0x01
   1c728:	6a 80       	ldd	r6, Y+2	; 0x02
   1c72a:	7b 80       	ldd	r7, Y+3	; 0x03
   1c72c:	c9 58       	subi	r28, 0x89	; 137
   1c72e:	d2 40       	sbci	r29, 0x02	; 2
   1c730:	33 c0       	rjmp	.+102    	; 0x1c798 <utl_matInvF+0x122>
   1c732:	68 01       	movw	r12, r16
   1c734:	c2 0e       	add	r12, r18
   1c736:	d3 1e       	adc	r13, r19
   1c738:	f7 01       	movw	r30, r14
   1c73a:	e2 0f       	add	r30, r18
   1c73c:	f3 1f       	adc	r31, r19
   1c73e:	80 80       	ld	r8, Z
   1c740:	91 80       	ldd	r9, Z+1	; 0x01
   1c742:	a2 80       	ldd	r10, Z+2	; 0x02
   1c744:	b3 80       	ldd	r11, Z+3	; 0x03
   1c746:	f6 01       	movw	r30, r12
   1c748:	80 82       	st	Z, r8
   1c74a:	91 82       	std	Z+1, r9	; 0x01
   1c74c:	a2 82       	std	Z+2, r10	; 0x02
   1c74e:	b3 82       	std	Z+3, r11	; 0x03
   1c750:	01 96       	adiw	r24, 0x01	; 1
   1c752:	a1 1d       	adc	r26, r1
   1c754:	b1 1d       	adc	r27, r1
   1c756:	2c 5f       	subi	r18, 0xFC	; 252
   1c758:	3f 4f       	sbci	r19, 0xFF	; 255
   1c75a:	09 c0       	rjmp	.+18     	; 0x1c76e <utl_matInvF+0xf8>
   1c75c:	ee 24       	eor	r14, r14
   1c75e:	ff 24       	eor	r15, r15
   1c760:	80 e0       	ldi	r24, 0x00	; 0
   1c762:	90 e0       	ldi	r25, 0x00	; 0
   1c764:	dc 01       	movw	r26, r24
   1c766:	f9 01       	movw	r30, r18
   1c768:	97 01       	movw	r18, r14
   1c76a:	78 01       	movw	r14, r16
   1c76c:	8f 01       	movw	r16, r30
   1c76e:	84 15       	cp	r24, r4
   1c770:	95 05       	cpc	r25, r5
   1c772:	a6 05       	cpc	r26, r6
   1c774:	b7 05       	cpc	r27, r7
   1c776:	ec f2       	brlt	.-70     	; 0x1c732 <utl_matInvF+0xbc>
   1c778:	98 01       	movw	r18, r16
   1c77a:	87 01       	movw	r16, r14
   1c77c:	4f 5f       	subi	r20, 0xFF	; 255
   1c77e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c780:	6f 4f       	sbci	r22, 0xFF	; 255
   1c782:	7f 4f       	sbci	r23, 0xFF	; 255
   1c784:	c5 56       	subi	r28, 0x65	; 101
   1c786:	dd 4f       	sbci	r29, 0xFD	; 253
   1c788:	88 80       	ld	r8, Y
   1c78a:	99 80       	ldd	r9, Y+1	; 0x01
   1c78c:	cb 59       	subi	r28, 0x9B	; 155
   1c78e:	d2 40       	sbci	r29, 0x02	; 2
   1c790:	08 0d       	add	r16, r8
   1c792:	19 1d       	adc	r17, r9
   1c794:	28 5b       	subi	r18, 0xB8	; 184
   1c796:	3f 4f       	sbci	r19, 0xFF	; 255
   1c798:	44 15       	cp	r20, r4
   1c79a:	55 05       	cpc	r21, r5
   1c79c:	66 05       	cpc	r22, r6
   1c79e:	77 05       	cpc	r23, r7
   1c7a0:	ec f2       	brlt	.-70     	; 0x1c75c <utl_matInvF+0xe6>
   1c7a2:	aa 24       	eor	r10, r10
   1c7a4:	bb 24       	eor	r11, r11
   1c7a6:	00 e0       	ldi	r16, 0x00	; 0
   1c7a8:	10 e0       	ldi	r17, 0x00	; 0
   1c7aa:	98 01       	movw	r18, r16
   1c7ac:	c5 56       	subi	r28, 0x65	; 101
   1c7ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1c7b0:	e8 80       	ld	r14, Y
   1c7b2:	f9 80       	ldd	r15, Y+1	; 0x01
   1c7b4:	cb 59       	subi	r28, 0x9B	; 155
   1c7b6:	d2 40       	sbci	r29, 0x02	; 2
   1c7b8:	41 e0       	ldi	r20, 0x01	; 1
   1c7ba:	c4 2e       	mov	r12, r20
   1c7bc:	d1 2c       	mov	r13, r1
   1c7be:	cc 0e       	add	r12, r28
   1c7c0:	dd 1e       	adc	r13, r29
   1c7c2:	ec 0c       	add	r14, r12
   1c7c4:	fd 1c       	adc	r15, r13
   1c7c6:	0f 2e       	mov	r0, r31
   1c7c8:	f0 e0       	ldi	r31, 0x00	; 0
   1c7ca:	4f 2e       	mov	r4, r31
   1c7cc:	f0 e0       	ldi	r31, 0x00	; 0
   1c7ce:	5f 2e       	mov	r5, r31
   1c7d0:	f0 e0       	ldi	r31, 0x00	; 0
   1c7d2:	6f 2e       	mov	r6, r31
   1c7d4:	f0 e0       	ldi	r31, 0x00	; 0
   1c7d6:	7f 2e       	mov	r7, r31
   1c7d8:	f0 2d       	mov	r31, r0
   1c7da:	67 01       	movw	r12, r14
   1c7dc:	5d c0       	rjmp	.+186    	; 0x1c898 <utl_matInvF+0x222>
   1c7de:	db 01       	movw	r26, r22
   1c7e0:	ca 01       	movw	r24, r20
   1c7e2:	c7 57       	subi	r28, 0x77	; 119
   1c7e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c7e6:	a8 80       	ld	r10, Y
   1c7e8:	b9 80       	ldd	r11, Y+1	; 0x01
   1c7ea:	ca 80       	ldd	r12, Y+2	; 0x02
   1c7ec:	db 80       	ldd	r13, Y+3	; 0x03
   1c7ee:	c9 58       	subi	r28, 0x89	; 137
   1c7f0:	d2 40       	sbci	r29, 0x02	; 2
   1c7f2:	8a 19       	sub	r24, r10
   1c7f4:	9b 09       	sbc	r25, r11
   1c7f6:	ac 09       	sbc	r26, r12
   1c7f8:	bd 09       	sbc	r27, r13
   1c7fa:	f4 01       	movw	r30, r8
   1c7fc:	ee 0d       	add	r30, r14
   1c7fe:	ff 1d       	adc	r31, r15
   1c800:	08 17       	cp	r16, r24
   1c802:	19 07       	cpc	r17, r25
   1c804:	2a 07       	cpc	r18, r26
   1c806:	3b 07       	cpc	r19, r27
   1c808:	49 f4       	brne	.+18     	; 0x1c81c <utl_matInvF+0x1a6>
   1c80a:	80 e0       	ldi	r24, 0x00	; 0
   1c80c:	90 e0       	ldi	r25, 0x00	; 0
   1c80e:	a0 e8       	ldi	r26, 0x80	; 128
   1c810:	bf e3       	ldi	r27, 0x3F	; 63
   1c812:	80 83       	st	Z, r24
   1c814:	91 83       	std	Z+1, r25	; 0x01
   1c816:	a2 83       	std	Z+2, r26	; 0x02
   1c818:	b3 83       	std	Z+3, r27	; 0x03
   1c81a:	04 c0       	rjmp	.+8      	; 0x1c824 <utl_matInvF+0x1ae>
   1c81c:	40 82       	st	Z, r4
   1c81e:	51 82       	std	Z+1, r5	; 0x01
   1c820:	62 82       	std	Z+2, r6	; 0x02
   1c822:	73 82       	std	Z+3, r7	; 0x03
   1c824:	4f 5f       	subi	r20, 0xFF	; 255
   1c826:	5f 4f       	sbci	r21, 0xFF	; 255
   1c828:	6f 4f       	sbci	r22, 0xFF	; 255
   1c82a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c82c:	a4 e0       	ldi	r26, 0x04	; 4
   1c82e:	b0 e0       	ldi	r27, 0x00	; 0
   1c830:	ea 0e       	add	r14, r26
   1c832:	fb 1e       	adc	r15, r27
   1c834:	14 c0       	rjmp	.+40     	; 0x1c85e <utl_matInvF+0x1e8>
   1c836:	c7 57       	subi	r28, 0x77	; 119
   1c838:	dd 4f       	sbci	r29, 0xFD	; 253
   1c83a:	48 81       	ld	r20, Y
   1c83c:	59 81       	ldd	r21, Y+1	; 0x01
   1c83e:	6a 81       	ldd	r22, Y+2	; 0x02
   1c840:	7b 81       	ldd	r23, Y+3	; 0x03
   1c842:	c9 58       	subi	r28, 0x89	; 137
   1c844:	d2 40       	sbci	r29, 0x02	; 2
   1c846:	ee 24       	eor	r14, r14
   1c848:	ff 24       	eor	r15, r15
   1c84a:	46 01       	movw	r8, r12
   1c84c:	8a 0c       	add	r8, r10
   1c84e:	9b 1c       	adc	r9, r11
   1c850:	15 01       	movw	r2, r10
   1c852:	c3 57       	subi	r28, 0x73	; 115
   1c854:	dd 4f       	sbci	r29, 0xFD	; 253
   1c856:	c8 82       	st	Y, r12
   1c858:	d9 82       	std	Y+1, r13	; 0x01
   1c85a:	cd 58       	subi	r28, 0x8D	; 141
   1c85c:	d2 40       	sbci	r29, 0x02	; 2
   1c85e:	cf 56       	subi	r28, 0x6F	; 111
   1c860:	dd 4f       	sbci	r29, 0xFD	; 253
   1c862:	a8 80       	ld	r10, Y
   1c864:	b9 80       	ldd	r11, Y+1	; 0x01
   1c866:	ca 80       	ldd	r12, Y+2	; 0x02
   1c868:	db 80       	ldd	r13, Y+3	; 0x03
   1c86a:	c1 59       	subi	r28, 0x91	; 145
   1c86c:	d2 40       	sbci	r29, 0x02	; 2
   1c86e:	4a 15       	cp	r20, r10
   1c870:	5b 05       	cpc	r21, r11
   1c872:	6c 05       	cpc	r22, r12
   1c874:	7d 05       	cpc	r23, r13
   1c876:	0c f4       	brge	.+2      	; 0x1c87a <utl_matInvF+0x204>
   1c878:	b2 cf       	rjmp	.-156    	; 0x1c7de <utl_matInvF+0x168>
   1c87a:	51 01       	movw	r10, r2
   1c87c:	c3 57       	subi	r28, 0x73	; 115
   1c87e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c880:	c8 80       	ld	r12, Y
   1c882:	d9 80       	ldd	r13, Y+1	; 0x01
   1c884:	cd 58       	subi	r28, 0x8D	; 141
   1c886:	d2 40       	sbci	r29, 0x02	; 2
   1c888:	0f 5f       	subi	r16, 0xFF	; 255
   1c88a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c88c:	2f 4f       	sbci	r18, 0xFF	; 255
   1c88e:	3f 4f       	sbci	r19, 0xFF	; 255
   1c890:	48 e4       	ldi	r20, 0x48	; 72
   1c892:	50 e0       	ldi	r21, 0x00	; 0
   1c894:	a4 0e       	add	r10, r20
   1c896:	b5 1e       	adc	r11, r21
   1c898:	c7 57       	subi	r28, 0x77	; 119
   1c89a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c89c:	88 81       	ld	r24, Y
   1c89e:	99 81       	ldd	r25, Y+1	; 0x01
   1c8a0:	aa 81       	ldd	r26, Y+2	; 0x02
   1c8a2:	bb 81       	ldd	r27, Y+3	; 0x03
   1c8a4:	c9 58       	subi	r28, 0x89	; 137
   1c8a6:	d2 40       	sbci	r29, 0x02	; 2
   1c8a8:	08 17       	cp	r16, r24
   1c8aa:	19 07       	cpc	r17, r25
   1c8ac:	2a 07       	cpc	r18, r26
   1c8ae:	3b 07       	cpc	r19, r27
   1c8b0:	14 f2       	brlt	.-124    	; 0x1c836 <utl_matInvF+0x1c0>
   1c8b2:	de 01       	movw	r26, r28
   1c8b4:	a7 5b       	subi	r26, 0xB7	; 183
   1c8b6:	bf 4f       	sbci	r27, 0xFF	; 255
   1c8b8:	cb 55       	subi	r28, 0x5B	; 91
   1c8ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1c8bc:	a8 83       	st	Y, r26
   1c8be:	b9 83       	std	Y+1, r27	; 0x01
   1c8c0:	c5 5a       	subi	r28, 0xA5	; 165
   1c8c2:	d2 40       	sbci	r29, 0x02	; 2
   1c8c4:	fe 01       	movw	r30, r28
   1c8c6:	31 96       	adiw	r30, 0x01	; 1
   1c8c8:	c9 55       	subi	r28, 0x59	; 89
   1c8ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1c8cc:	e8 83       	st	Y, r30
   1c8ce:	f9 83       	std	Y+1, r31	; 0x01
   1c8d0:	c7 5a       	subi	r28, 0xA7	; 167
   1c8d2:	d2 40       	sbci	r29, 0x02	; 2
   1c8d4:	cf 55       	subi	r28, 0x5F	; 95
   1c8d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c8d8:	e8 83       	st	Y, r30
   1c8da:	f9 83       	std	Y+1, r31	; 0x01
   1c8dc:	c1 5a       	subi	r28, 0xA1	; 161
   1c8de:	d2 40       	sbci	r29, 0x02	; 2
   1c8e0:	cb 56       	subi	r28, 0x6B	; 107
   1c8e2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c8e4:	18 82       	st	Y, r1
   1c8e6:	19 82       	std	Y+1, r1	; 0x01
   1c8e8:	c5 59       	subi	r28, 0x95	; 149
   1c8ea:	d2 40       	sbci	r29, 0x02	; 2
   1c8ec:	48 eb       	ldi	r20, 0xB8	; 184
   1c8ee:	5f ef       	ldi	r21, 0xFF	; 255
   1c8f0:	cd 55       	subi	r28, 0x5D	; 93
   1c8f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c8f4:	48 83       	st	Y, r20
   1c8f6:	59 83       	std	Y+1, r21	; 0x01
   1c8f8:	c3 5a       	subi	r28, 0xA3	; 163
   1c8fa:	d2 40       	sbci	r29, 0x02	; 2
   1c8fc:	91 e0       	ldi	r25, 0x01	; 1
   1c8fe:	89 2e       	mov	r8, r25
   1c900:	91 2c       	mov	r9, r1
   1c902:	a1 2c       	mov	r10, r1
   1c904:	b1 2c       	mov	r11, r1
   1c906:	c3 56       	subi	r28, 0x63	; 99
   1c908:	dd 4f       	sbci	r29, 0xFD	; 253
   1c90a:	88 82       	st	Y, r8
   1c90c:	99 82       	std	Y+1, r9	; 0x01
   1c90e:	aa 82       	std	Y+2, r10	; 0x02
   1c910:	bb 82       	std	Y+3, r11	; 0x03
   1c912:	cd 59       	subi	r28, 0x9D	; 157
   1c914:	d2 40       	sbci	r29, 0x02	; 2
   1c916:	88 24       	eor	r8, r8
   1c918:	99 24       	eor	r9, r9
   1c91a:	54 01       	movw	r10, r8
   1c91c:	92 c2       	rjmp	.+1316   	; 0x1ce42 <utl_matInvF+0x7cc>
   1c91e:	cf 55       	subi	r28, 0x5F	; 95
   1c920:	dd 4f       	sbci	r29, 0xFD	; 253
   1c922:	a8 81       	ld	r26, Y
   1c924:	b9 81       	ldd	r27, Y+1	; 0x01
   1c926:	c1 5a       	subi	r28, 0xA1	; 161
   1c928:	d2 40       	sbci	r29, 0x02	; 2
   1c92a:	6d 91       	ld	r22, X+
   1c92c:	7d 91       	ld	r23, X+
   1c92e:	8d 91       	ld	r24, X+
   1c930:	9c 91       	ld	r25, X
   1c932:	20 e0       	ldi	r18, 0x00	; 0
   1c934:	30 e0       	ldi	r19, 0x00	; 0
   1c936:	a9 01       	movw	r20, r18
   1c938:	0e 94 27 f2 	call	0x1e44e	; 0x1e44e <__cmpsf2>
   1c93c:	88 23       	and	r24, r24
   1c93e:	09 f0       	breq	.+2      	; 0x1c942 <utl_matInvF+0x2cc>
   1c940:	78 c0       	rjmp	.+240    	; 0x1ca32 <utl_matInvF+0x3bc>
   1c942:	c3 56       	subi	r28, 0x63	; 99
   1c944:	dd 4f       	sbci	r29, 0xFD	; 253
   1c946:	28 81       	ld	r18, Y
   1c948:	39 81       	ldd	r19, Y+1	; 0x01
   1c94a:	4a 81       	ldd	r20, Y+2	; 0x02
   1c94c:	5b 81       	ldd	r21, Y+3	; 0x03
   1c94e:	cd 59       	subi	r28, 0x9D	; 157
   1c950:	d2 40       	sbci	r29, 0x02	; 2
   1c952:	c7 57       	subi	r28, 0x77	; 119
   1c954:	dd 4f       	sbci	r29, 0xFD	; 253
   1c956:	88 81       	ld	r24, Y
   1c958:	99 81       	ldd	r25, Y+1	; 0x01
   1c95a:	aa 81       	ldd	r26, Y+2	; 0x02
   1c95c:	bb 81       	ldd	r27, Y+3	; 0x03
   1c95e:	c9 58       	subi	r28, 0x89	; 137
   1c960:	d2 40       	sbci	r29, 0x02	; 2
   1c962:	28 17       	cp	r18, r24
   1c964:	39 07       	cpc	r19, r25
   1c966:	4a 07       	cpc	r20, r26
   1c968:	5b 07       	cpc	r21, r27
   1c96a:	09 f4       	brne	.+2      	; 0x1c96e <utl_matInvF+0x2f8>
   1c96c:	e1 c2       	rjmp	.+1474   	; 0x1cf30 <utl_matInvF+0x8ba>
   1c96e:	cb 55       	subi	r28, 0x5B	; 91
   1c970:	dd 4f       	sbci	r29, 0xFD	; 253
   1c972:	e8 81       	ld	r30, Y
   1c974:	f9 81       	ldd	r31, Y+1	; 0x01
   1c976:	c5 5a       	subi	r28, 0xA5	; 165
   1c978:	d2 40       	sbci	r29, 0x02	; 2
   1c97a:	80 81       	ld	r24, Z
   1c97c:	91 81       	ldd	r25, Z+1	; 0x01
   1c97e:	a2 81       	ldd	r26, Z+2	; 0x02
   1c980:	b3 81       	ldd	r27, Z+3	; 0x03
   1c982:	bc 01       	movw	r22, r24
   1c984:	cd 01       	movw	r24, r26
   1c986:	9f 77       	andi	r25, 0x7F	; 127
   1c988:	25 e9       	ldi	r18, 0x95	; 149
   1c98a:	3f eb       	ldi	r19, 0xBF	; 191
   1c98c:	46 ed       	ldi	r20, 0xD6	; 214
   1c98e:	53 e3       	ldi	r21, 0x33	; 51
   1c990:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
   1c994:	18 16       	cp	r1, r24
   1c996:	0c f0       	brlt	.+2      	; 0x1c99a <utl_matInvF+0x324>
   1c998:	cb c2       	rjmp	.+1430   	; 0x1cf30 <utl_matInvF+0x8ba>
   1c99a:	c3 56       	subi	r28, 0x63	; 99
   1c99c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c99e:	c8 80       	ld	r12, Y
   1c9a0:	d9 80       	ldd	r13, Y+1	; 0x01
   1c9a2:	cd 59       	subi	r28, 0x9D	; 157
   1c9a4:	d2 40       	sbci	r29, 0x02	; 2
   1c9a6:	28 e4       	ldi	r18, 0x48	; 72
   1c9a8:	30 e0       	ldi	r19, 0x00	; 0
   1c9aa:	c2 9e       	mul	r12, r18
   1c9ac:	f0 01       	movw	r30, r0
   1c9ae:	c3 9e       	mul	r12, r19
   1c9b0:	f0 0d       	add	r31, r0
   1c9b2:	d2 9e       	mul	r13, r18
   1c9b4:	f0 0d       	add	r31, r0
   1c9b6:	11 24       	eor	r1, r1
   1c9b8:	41 e0       	ldi	r20, 0x01	; 1
   1c9ba:	50 e0       	ldi	r21, 0x00	; 0
   1c9bc:	4c 0f       	add	r20, r28
   1c9be:	5d 1f       	adc	r21, r29
   1c9c0:	e4 0f       	add	r30, r20
   1c9c2:	f5 1f       	adc	r31, r21
   1c9c4:	40 e0       	ldi	r20, 0x00	; 0
   1c9c6:	50 e0       	ldi	r21, 0x00	; 0
   1c9c8:	ba 01       	movw	r22, r20
   1c9ca:	26 c0       	rjmp	.+76     	; 0x1ca18 <utl_matInvF+0x3a2>
   1c9cc:	cd 55       	subi	r28, 0x5D	; 93
   1c9ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1c9d0:	a8 81       	ld	r26, Y
   1c9d2:	b9 81       	ldd	r27, Y+1	; 0x01
   1c9d4:	c3 5a       	subi	r28, 0xA3	; 163
   1c9d6:	d2 40       	sbci	r29, 0x02	; 2
   1c9d8:	ae 0f       	add	r26, r30
   1c9da:	bf 1f       	adc	r27, r31
   1c9dc:	cb 56       	subi	r28, 0x6B	; 107
   1c9de:	dd 4f       	sbci	r29, 0xFD	; 253
   1c9e0:	c8 80       	ld	r12, Y
   1c9e2:	d9 80       	ldd	r13, Y+1	; 0x01
   1c9e4:	c5 59       	subi	r28, 0x95	; 149
   1c9e6:	d2 40       	sbci	r29, 0x02	; 2
   1c9e8:	ac 0d       	add	r26, r12
   1c9ea:	bd 1d       	adc	r27, r13
   1c9ec:	cd 90       	ld	r12, X+
   1c9ee:	dd 90       	ld	r13, X+
   1c9f0:	ed 90       	ld	r14, X+
   1c9f2:	fc 90       	ld	r15, X
   1c9f4:	13 97       	sbiw	r26, 0x03	; 3
   1c9f6:	00 81       	ld	r16, Z
   1c9f8:	11 81       	ldd	r17, Z+1	; 0x01
   1c9fa:	22 81       	ldd	r18, Z+2	; 0x02
   1c9fc:	33 81       	ldd	r19, Z+3	; 0x03
   1c9fe:	0d 93       	st	X+, r16
   1ca00:	1d 93       	st	X+, r17
   1ca02:	2d 93       	st	X+, r18
   1ca04:	3c 93       	st	X, r19
   1ca06:	13 97       	sbiw	r26, 0x03	; 3
   1ca08:	c1 92       	st	Z+, r12
   1ca0a:	d1 92       	st	Z+, r13
   1ca0c:	e1 92       	st	Z+, r14
   1ca0e:	f1 92       	st	Z+, r15
   1ca10:	4f 5f       	subi	r20, 0xFF	; 255
   1ca12:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca14:	6f 4f       	sbci	r22, 0xFF	; 255
   1ca16:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca18:	cf 56       	subi	r28, 0x6F	; 111
   1ca1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ca1c:	88 81       	ld	r24, Y
   1ca1e:	99 81       	ldd	r25, Y+1	; 0x01
   1ca20:	aa 81       	ldd	r26, Y+2	; 0x02
   1ca22:	bb 81       	ldd	r27, Y+3	; 0x03
   1ca24:	c1 59       	subi	r28, 0x91	; 145
   1ca26:	d2 40       	sbci	r29, 0x02	; 2
   1ca28:	48 17       	cp	r20, r24
   1ca2a:	59 07       	cpc	r21, r25
   1ca2c:	6a 07       	cpc	r22, r26
   1ca2e:	7b 07       	cpc	r23, r27
   1ca30:	6c f2       	brlt	.-102    	; 0x1c9cc <utl_matInvF+0x356>
   1ca32:	60 e0       	ldi	r22, 0x00	; 0
   1ca34:	70 e0       	ldi	r23, 0x00	; 0
   1ca36:	80 e8       	ldi	r24, 0x80	; 128
   1ca38:	9f e3       	ldi	r25, 0x3F	; 63
   1ca3a:	cf 55       	subi	r28, 0x5F	; 95
   1ca3c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ca3e:	a8 81       	ld	r26, Y
   1ca40:	b9 81       	ldd	r27, Y+1	; 0x01
   1ca42:	c1 5a       	subi	r28, 0xA1	; 161
   1ca44:	d2 40       	sbci	r29, 0x02	; 2
   1ca46:	2d 91       	ld	r18, X+
   1ca48:	3d 91       	ld	r19, X+
   1ca4a:	4d 91       	ld	r20, X+
   1ca4c:	5c 91       	ld	r21, X
   1ca4e:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1ca52:	36 2e       	mov	r3, r22
   1ca54:	27 2e       	mov	r2, r23
   1ca56:	c3 57       	subi	r28, 0x73	; 115
   1ca58:	dd 4f       	sbci	r29, 0xFD	; 253
   1ca5a:	88 83       	st	Y, r24
   1ca5c:	cd 58       	subi	r28, 0x8D	; 141
   1ca5e:	d2 40       	sbci	r29, 0x02	; 2
   1ca60:	c9 56       	subi	r28, 0x69	; 105
   1ca62:	dd 4f       	sbci	r29, 0xFD	; 253
   1ca64:	98 83       	st	Y, r25
   1ca66:	c7 59       	subi	r28, 0x97	; 151
   1ca68:	d2 40       	sbci	r29, 0x02	; 2
   1ca6a:	ec e4       	ldi	r30, 0x4C	; 76
   1ca6c:	f0 e0       	ldi	r31, 0x00	; 0
   1ca6e:	8e 9e       	mul	r8, r30
   1ca70:	80 01       	movw	r16, r0
   1ca72:	8f 9e       	mul	r8, r31
   1ca74:	10 0d       	add	r17, r0
   1ca76:	9e 9e       	mul	r9, r30
   1ca78:	10 0d       	add	r17, r0
   1ca7a:	11 24       	eor	r1, r1
   1ca7c:	81 e0       	ldi	r24, 0x01	; 1
   1ca7e:	c8 2e       	mov	r12, r24
   1ca80:	d1 2c       	mov	r13, r1
   1ca82:	cc 0e       	add	r12, r28
   1ca84:	dd 1e       	adc	r13, r29
   1ca86:	0c 0d       	add	r16, r12
   1ca88:	1d 1d       	adc	r17, r13
   1ca8a:	75 01       	movw	r14, r10
   1ca8c:	64 01       	movw	r12, r8
   1ca8e:	24 c0       	rjmp	.+72     	; 0x1cad8 <utl_matInvF+0x462>
   1ca90:	d8 01       	movw	r26, r16
   1ca92:	6d 91       	ld	r22, X+
   1ca94:	7d 91       	ld	r23, X+
   1ca96:	8d 91       	ld	r24, X+
   1ca98:	9c 91       	ld	r25, X
   1ca9a:	23 2d       	mov	r18, r3
   1ca9c:	32 2d       	mov	r19, r2
   1ca9e:	c3 57       	subi	r28, 0x73	; 115
   1caa0:	dd 4f       	sbci	r29, 0xFD	; 253
   1caa2:	48 81       	ld	r20, Y
   1caa4:	cd 58       	subi	r28, 0x8D	; 141
   1caa6:	d2 40       	sbci	r29, 0x02	; 2
   1caa8:	c9 56       	subi	r28, 0x69	; 105
   1caaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1caac:	58 81       	ld	r21, Y
   1caae:	c7 59       	subi	r28, 0x97	; 151
   1cab0:	d2 40       	sbci	r29, 0x02	; 2
   1cab2:	29 01       	movw	r4, r18
   1cab4:	3a 01       	movw	r6, r20
   1cab6:	a3 01       	movw	r20, r6
   1cab8:	92 01       	movw	r18, r4
   1caba:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1cabe:	dc 01       	movw	r26, r24
   1cac0:	cb 01       	movw	r24, r22
   1cac2:	f8 01       	movw	r30, r16
   1cac4:	81 93       	st	Z+, r24
   1cac6:	91 93       	st	Z+, r25
   1cac8:	a1 93       	st	Z+, r26
   1caca:	b1 93       	st	Z+, r27
   1cacc:	8f 01       	movw	r16, r30
   1cace:	08 94       	sec
   1cad0:	c1 1c       	adc	r12, r1
   1cad2:	d1 1c       	adc	r13, r1
   1cad4:	e1 1c       	adc	r14, r1
   1cad6:	f1 1c       	adc	r15, r1
   1cad8:	cf 56       	subi	r28, 0x6F	; 111
   1cada:	dd 4f       	sbci	r29, 0xFD	; 253
   1cadc:	28 81       	ld	r18, Y
   1cade:	39 81       	ldd	r19, Y+1	; 0x01
   1cae0:	4a 81       	ldd	r20, Y+2	; 0x02
   1cae2:	5b 81       	ldd	r21, Y+3	; 0x03
   1cae4:	c1 59       	subi	r28, 0x91	; 145
   1cae6:	d2 40       	sbci	r29, 0x02	; 2
   1cae8:	c2 16       	cp	r12, r18
   1caea:	d3 06       	cpc	r13, r19
   1caec:	e4 06       	cpc	r14, r20
   1caee:	f5 06       	cpc	r15, r21
   1caf0:	7c f2       	brlt	.-98     	; 0x1ca90 <utl_matInvF+0x41a>
   1caf2:	22 24       	eor	r2, r2
   1caf4:	33 24       	eor	r3, r3
   1caf6:	c3 57       	subi	r28, 0x73	; 115
   1caf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1cafa:	18 82       	st	Y, r1
   1cafc:	19 82       	std	Y+1, r1	; 0x01
   1cafe:	cd 58       	subi	r28, 0x8D	; 141
   1cb00:	d2 40       	sbci	r29, 0x02	; 2
   1cb02:	44 24       	eor	r4, r4
   1cb04:	55 24       	eor	r5, r5
   1cb06:	32 01       	movw	r6, r4
   1cb08:	8a c0       	rjmp	.+276    	; 0x1cc1e <utl_matInvF+0x5a8>
   1cb0a:	c9 55       	subi	r28, 0x59	; 89
   1cb0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1cb0e:	e8 81       	ld	r30, Y
   1cb10:	f9 81       	ldd	r31, Y+1	; 0x01
   1cb12:	c7 5a       	subi	r28, 0xA7	; 167
   1cb14:	d2 40       	sbci	r29, 0x02	; 2
   1cb16:	c3 57       	subi	r28, 0x73	; 115
   1cb18:	dd 4f       	sbci	r29, 0xFD	; 253
   1cb1a:	c8 80       	ld	r12, Y
   1cb1c:	d9 80       	ldd	r13, Y+1	; 0x01
   1cb1e:	cd 58       	subi	r28, 0x8D	; 141
   1cb20:	d2 40       	sbci	r29, 0x02	; 2
   1cb22:	ec 0d       	add	r30, r12
   1cb24:	fd 1d       	adc	r31, r13
   1cb26:	80 81       	ld	r24, Z
   1cb28:	91 81       	ldd	r25, Z+1	; 0x01
   1cb2a:	a2 81       	ldd	r26, Z+2	; 0x02
   1cb2c:	b3 81       	ldd	r27, Z+3	; 0x03
   1cb2e:	9c 01       	movw	r18, r24
   1cb30:	ad 01       	movw	r20, r26
   1cb32:	50 58       	subi	r21, 0x80	; 128
   1cb34:	c9 56       	subi	r28, 0x69	; 105
   1cb36:	dd 4f       	sbci	r29, 0xFD	; 253
   1cb38:	28 83       	st	Y, r18
   1cb3a:	39 83       	std	Y+1, r19	; 0x01
   1cb3c:	4a 83       	std	Y+2, r20	; 0x02
   1cb3e:	5b 83       	std	Y+3, r21	; 0x03
   1cb40:	c7 59       	subi	r28, 0x97	; 151
   1cb42:	d2 40       	sbci	r29, 0x02	; 2
   1cb44:	c2 01       	movw	r24, r4
   1cb46:	88 0f       	add	r24, r24
   1cb48:	99 1f       	adc	r25, r25
   1cb4a:	8c 01       	movw	r16, r24
   1cb4c:	63 e0       	ldi	r22, 0x03	; 3
   1cb4e:	00 0f       	add	r16, r16
   1cb50:	11 1f       	adc	r17, r17
   1cb52:	6a 95       	dec	r22
   1cb54:	e1 f7       	brne	.-8      	; 0x1cb4e <utl_matInvF+0x4d8>
   1cb56:	08 0f       	add	r16, r24
   1cb58:	19 1f       	adc	r17, r25
   1cb5a:	08 0d       	add	r16, r8
   1cb5c:	19 1d       	adc	r17, r9
   1cb5e:	00 0f       	add	r16, r16
   1cb60:	11 1f       	adc	r17, r17
   1cb62:	00 0f       	add	r16, r16
   1cb64:	11 1f       	adc	r17, r17
   1cb66:	41 e0       	ldi	r20, 0x01	; 1
   1cb68:	50 e0       	ldi	r21, 0x00	; 0
   1cb6a:	4c 0f       	add	r20, r28
   1cb6c:	5d 1f       	adc	r21, r29
   1cb6e:	04 0f       	add	r16, r20
   1cb70:	15 1f       	adc	r17, r21
   1cb72:	75 01       	movw	r14, r10
   1cb74:	64 01       	movw	r12, r8
   1cb76:	2f c0       	rjmp	.+94     	; 0x1cbd6 <utl_matInvF+0x560>
   1cb78:	f8 01       	movw	r30, r16
   1cb7a:	e2 0d       	add	r30, r2
   1cb7c:	f3 1d       	adc	r31, r3
   1cb7e:	cb 56       	subi	r28, 0x6B	; 107
   1cb80:	dd 4f       	sbci	r29, 0xFD	; 253
   1cb82:	88 81       	ld	r24, Y
   1cb84:	99 81       	ldd	r25, Y+1	; 0x01
   1cb86:	c5 59       	subi	r28, 0x95	; 149
   1cb88:	d2 40       	sbci	r29, 0x02	; 2
   1cb8a:	e8 0f       	add	r30, r24
   1cb8c:	f9 1f       	adc	r31, r25
   1cb8e:	c9 56       	subi	r28, 0x69	; 105
   1cb90:	dd 4f       	sbci	r29, 0xFD	; 253
   1cb92:	68 81       	ld	r22, Y
   1cb94:	79 81       	ldd	r23, Y+1	; 0x01
   1cb96:	8a 81       	ldd	r24, Y+2	; 0x02
   1cb98:	9b 81       	ldd	r25, Y+3	; 0x03
   1cb9a:	c7 59       	subi	r28, 0x97	; 151
   1cb9c:	d2 40       	sbci	r29, 0x02	; 2
   1cb9e:	20 81       	ld	r18, Z
   1cba0:	31 81       	ldd	r19, Z+1	; 0x01
   1cba2:	42 81       	ldd	r20, Z+2	; 0x02
   1cba4:	53 81       	ldd	r21, Z+3	; 0x03
   1cba6:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1cbaa:	9b 01       	movw	r18, r22
   1cbac:	ac 01       	movw	r20, r24
   1cbae:	d8 01       	movw	r26, r16
   1cbb0:	6d 91       	ld	r22, X+
   1cbb2:	7d 91       	ld	r23, X+
   1cbb4:	8d 91       	ld	r24, X+
   1cbb6:	9c 91       	ld	r25, X
   1cbb8:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1cbbc:	dc 01       	movw	r26, r24
   1cbbe:	cb 01       	movw	r24, r22
   1cbc0:	f8 01       	movw	r30, r16
   1cbc2:	81 93       	st	Z+, r24
   1cbc4:	91 93       	st	Z+, r25
   1cbc6:	a1 93       	st	Z+, r26
   1cbc8:	b1 93       	st	Z+, r27
   1cbca:	8f 01       	movw	r16, r30
   1cbcc:	08 94       	sec
   1cbce:	c1 1c       	adc	r12, r1
   1cbd0:	d1 1c       	adc	r13, r1
   1cbd2:	e1 1c       	adc	r14, r1
   1cbd4:	f1 1c       	adc	r15, r1
   1cbd6:	cf 56       	subi	r28, 0x6F	; 111
   1cbd8:	dd 4f       	sbci	r29, 0xFD	; 253
   1cbda:	28 81       	ld	r18, Y
   1cbdc:	39 81       	ldd	r19, Y+1	; 0x01
   1cbde:	4a 81       	ldd	r20, Y+2	; 0x02
   1cbe0:	5b 81       	ldd	r21, Y+3	; 0x03
   1cbe2:	c1 59       	subi	r28, 0x91	; 145
   1cbe4:	d2 40       	sbci	r29, 0x02	; 2
   1cbe6:	c2 16       	cp	r12, r18
   1cbe8:	d3 06       	cpc	r13, r19
   1cbea:	e4 06       	cpc	r14, r20
   1cbec:	f5 06       	cpc	r15, r21
   1cbee:	24 f2       	brlt	.-120    	; 0x1cb78 <utl_matInvF+0x502>
   1cbf0:	08 94       	sec
   1cbf2:	41 1c       	adc	r4, r1
   1cbf4:	51 1c       	adc	r5, r1
   1cbf6:	61 1c       	adc	r6, r1
   1cbf8:	71 1c       	adc	r7, r1
   1cbfa:	c3 57       	subi	r28, 0x73	; 115
   1cbfc:	dd 4f       	sbci	r29, 0xFD	; 253
   1cbfe:	48 81       	ld	r20, Y
   1cc00:	59 81       	ldd	r21, Y+1	; 0x01
   1cc02:	cd 58       	subi	r28, 0x8D	; 141
   1cc04:	d2 40       	sbci	r29, 0x02	; 2
   1cc06:	48 5b       	subi	r20, 0xB8	; 184
   1cc08:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc0a:	c3 57       	subi	r28, 0x73	; 115
   1cc0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1cc0e:	48 83       	st	Y, r20
   1cc10:	59 83       	std	Y+1, r21	; 0x01
   1cc12:	cd 58       	subi	r28, 0x8D	; 141
   1cc14:	d2 40       	sbci	r29, 0x02	; 2
   1cc16:	88 eb       	ldi	r24, 0xB8	; 184
   1cc18:	9f ef       	ldi	r25, 0xFF	; 255
   1cc1a:	28 0e       	add	r2, r24
   1cc1c:	39 1e       	adc	r3, r25
   1cc1e:	48 14       	cp	r4, r8
   1cc20:	59 04       	cpc	r5, r9
   1cc22:	6a 04       	cpc	r6, r10
   1cc24:	7b 04       	cpc	r7, r11
   1cc26:	0c f4       	brge	.+2      	; 0x1cc2a <utl_matInvF+0x5b4>
   1cc28:	70 cf       	rjmp	.-288    	; 0x1cb0a <utl_matInvF+0x494>
   1cc2a:	a5 01       	movw	r20, r10
   1cc2c:	94 01       	movw	r18, r8
   1cc2e:	2f 5f       	subi	r18, 0xFF	; 255
   1cc30:	3f 4f       	sbci	r19, 0xFF	; 255
   1cc32:	4f 4f       	sbci	r20, 0xFF	; 255
   1cc34:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc36:	c3 57       	subi	r28, 0x73	; 115
   1cc38:	dd 4f       	sbci	r29, 0xFD	; 253
   1cc3a:	28 83       	st	Y, r18
   1cc3c:	39 83       	std	Y+1, r19	; 0x01
   1cc3e:	4a 83       	std	Y+2, r20	; 0x02
   1cc40:	5b 83       	std	Y+3, r21	; 0x03
   1cc42:	cd 58       	subi	r28, 0x8D	; 141
   1cc44:	d2 40       	sbci	r29, 0x02	; 2
   1cc46:	29 01       	movw	r4, r18
   1cc48:	3a 01       	movw	r6, r20
   1cc4a:	22 24       	eor	r2, r2
   1cc4c:	33 24       	eor	r3, r3
   1cc4e:	8a c0       	rjmp	.+276    	; 0x1cd64 <utl_matInvF+0x6ee>
   1cc50:	cb 55       	subi	r28, 0x5B	; 91
   1cc52:	dd 4f       	sbci	r29, 0xFD	; 253
   1cc54:	e8 81       	ld	r30, Y
   1cc56:	f9 81       	ldd	r31, Y+1	; 0x01
   1cc58:	c5 5a       	subi	r28, 0xA5	; 165
   1cc5a:	d2 40       	sbci	r29, 0x02	; 2
   1cc5c:	e2 0d       	add	r30, r2
   1cc5e:	f3 1d       	adc	r31, r3
   1cc60:	80 81       	ld	r24, Z
   1cc62:	91 81       	ldd	r25, Z+1	; 0x01
   1cc64:	a2 81       	ldd	r26, Z+2	; 0x02
   1cc66:	b3 81       	ldd	r27, Z+3	; 0x03
   1cc68:	9c 01       	movw	r18, r24
   1cc6a:	ad 01       	movw	r20, r26
   1cc6c:	50 58       	subi	r21, 0x80	; 128
   1cc6e:	c9 56       	subi	r28, 0x69	; 105
   1cc70:	dd 4f       	sbci	r29, 0xFD	; 253
   1cc72:	28 83       	st	Y, r18
   1cc74:	39 83       	std	Y+1, r19	; 0x01
   1cc76:	4a 83       	std	Y+2, r20	; 0x02
   1cc78:	5b 83       	std	Y+3, r21	; 0x03
   1cc7a:	c7 59       	subi	r28, 0x97	; 151
   1cc7c:	d2 40       	sbci	r29, 0x02	; 2
   1cc7e:	c2 01       	movw	r24, r4
   1cc80:	88 0f       	add	r24, r24
   1cc82:	99 1f       	adc	r25, r25
   1cc84:	8c 01       	movw	r16, r24
   1cc86:	73 e0       	ldi	r23, 0x03	; 3
   1cc88:	00 0f       	add	r16, r16
   1cc8a:	11 1f       	adc	r17, r17
   1cc8c:	7a 95       	dec	r23
   1cc8e:	e1 f7       	brne	.-8      	; 0x1cc88 <utl_matInvF+0x612>
   1cc90:	08 0f       	add	r16, r24
   1cc92:	19 1f       	adc	r17, r25
   1cc94:	08 0d       	add	r16, r8
   1cc96:	19 1d       	adc	r17, r9
   1cc98:	00 0f       	add	r16, r16
   1cc9a:	11 1f       	adc	r17, r17
   1cc9c:	00 0f       	add	r16, r16
   1cc9e:	11 1f       	adc	r17, r17
   1cca0:	41 e0       	ldi	r20, 0x01	; 1
   1cca2:	50 e0       	ldi	r21, 0x00	; 0
   1cca4:	4c 0f       	add	r20, r28
   1cca6:	5d 1f       	adc	r21, r29
   1cca8:	04 0f       	add	r16, r20
   1ccaa:	15 1f       	adc	r17, r21
   1ccac:	75 01       	movw	r14, r10
   1ccae:	64 01       	movw	r12, r8
   1ccb0:	cd 55       	subi	r28, 0x5D	; 93
   1ccb2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ccb4:	88 81       	ld	r24, Y
   1ccb6:	99 81       	ldd	r25, Y+1	; 0x01
   1ccb8:	c3 5a       	subi	r28, 0xA3	; 163
   1ccba:	d2 40       	sbci	r29, 0x02	; 2
   1ccbc:	82 19       	sub	r24, r2
   1ccbe:	93 09       	sbc	r25, r3
   1ccc0:	c5 55       	subi	r28, 0x55	; 85
   1ccc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ccc4:	88 83       	st	Y, r24
   1ccc6:	99 83       	std	Y+1, r25	; 0x01
   1ccc8:	cb 5a       	subi	r28, 0xAB	; 171
   1ccca:	d2 40       	sbci	r29, 0x02	; 2
   1cccc:	34 c0       	rjmp	.+104    	; 0x1cd36 <utl_matInvF+0x6c0>
   1ccce:	c5 55       	subi	r28, 0x55	; 85
   1ccd0:	dd 4f       	sbci	r29, 0xFD	; 253
   1ccd2:	e8 81       	ld	r30, Y
   1ccd4:	f9 81       	ldd	r31, Y+1	; 0x01
   1ccd6:	cb 5a       	subi	r28, 0xAB	; 171
   1ccd8:	d2 40       	sbci	r29, 0x02	; 2
   1ccda:	e0 0f       	add	r30, r16
   1ccdc:	f1 1f       	adc	r31, r17
   1ccde:	cb 56       	subi	r28, 0x6B	; 107
   1cce0:	dd 4f       	sbci	r29, 0xFD	; 253
   1cce2:	a8 81       	ld	r26, Y
   1cce4:	b9 81       	ldd	r27, Y+1	; 0x01
   1cce6:	c5 59       	subi	r28, 0x95	; 149
   1cce8:	d2 40       	sbci	r29, 0x02	; 2
   1ccea:	ea 0f       	add	r30, r26
   1ccec:	fb 1f       	adc	r31, r27
   1ccee:	c9 56       	subi	r28, 0x69	; 105
   1ccf0:	dd 4f       	sbci	r29, 0xFD	; 253
   1ccf2:	68 81       	ld	r22, Y
   1ccf4:	79 81       	ldd	r23, Y+1	; 0x01
   1ccf6:	8a 81       	ldd	r24, Y+2	; 0x02
   1ccf8:	9b 81       	ldd	r25, Y+3	; 0x03
   1ccfa:	c7 59       	subi	r28, 0x97	; 151
   1ccfc:	d2 40       	sbci	r29, 0x02	; 2
   1ccfe:	20 81       	ld	r18, Z
   1cd00:	31 81       	ldd	r19, Z+1	; 0x01
   1cd02:	42 81       	ldd	r20, Z+2	; 0x02
   1cd04:	53 81       	ldd	r21, Z+3	; 0x03
   1cd06:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1cd0a:	9b 01       	movw	r18, r22
   1cd0c:	ac 01       	movw	r20, r24
   1cd0e:	f8 01       	movw	r30, r16
   1cd10:	60 81       	ld	r22, Z
   1cd12:	71 81       	ldd	r23, Z+1	; 0x01
   1cd14:	82 81       	ldd	r24, Z+2	; 0x02
   1cd16:	93 81       	ldd	r25, Z+3	; 0x03
   1cd18:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1cd1c:	dc 01       	movw	r26, r24
   1cd1e:	cb 01       	movw	r24, r22
   1cd20:	f8 01       	movw	r30, r16
   1cd22:	81 93       	st	Z+, r24
   1cd24:	91 93       	st	Z+, r25
   1cd26:	a1 93       	st	Z+, r26
   1cd28:	b1 93       	st	Z+, r27
   1cd2a:	8f 01       	movw	r16, r30
   1cd2c:	08 94       	sec
   1cd2e:	c1 1c       	adc	r12, r1
   1cd30:	d1 1c       	adc	r13, r1
   1cd32:	e1 1c       	adc	r14, r1
   1cd34:	f1 1c       	adc	r15, r1
   1cd36:	cf 56       	subi	r28, 0x6F	; 111
   1cd38:	dd 4f       	sbci	r29, 0xFD	; 253
   1cd3a:	28 81       	ld	r18, Y
   1cd3c:	39 81       	ldd	r19, Y+1	; 0x01
   1cd3e:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd40:	5b 81       	ldd	r21, Y+3	; 0x03
   1cd42:	c1 59       	subi	r28, 0x91	; 145
   1cd44:	d2 40       	sbci	r29, 0x02	; 2
   1cd46:	c2 16       	cp	r12, r18
   1cd48:	d3 06       	cpc	r13, r19
   1cd4a:	e4 06       	cpc	r14, r20
   1cd4c:	f5 06       	cpc	r15, r21
   1cd4e:	0c f4       	brge	.+2      	; 0x1cd52 <utl_matInvF+0x6dc>
   1cd50:	be cf       	rjmp	.-132    	; 0x1ccce <utl_matInvF+0x658>
   1cd52:	08 94       	sec
   1cd54:	41 1c       	adc	r4, r1
   1cd56:	51 1c       	adc	r5, r1
   1cd58:	61 1c       	adc	r6, r1
   1cd5a:	71 1c       	adc	r7, r1
   1cd5c:	48 e4       	ldi	r20, 0x48	; 72
   1cd5e:	50 e0       	ldi	r21, 0x00	; 0
   1cd60:	24 0e       	add	r2, r20
   1cd62:	35 1e       	adc	r3, r21
   1cd64:	c7 57       	subi	r28, 0x77	; 119
   1cd66:	dd 4f       	sbci	r29, 0xFD	; 253
   1cd68:	88 81       	ld	r24, Y
   1cd6a:	99 81       	ldd	r25, Y+1	; 0x01
   1cd6c:	aa 81       	ldd	r26, Y+2	; 0x02
   1cd6e:	bb 81       	ldd	r27, Y+3	; 0x03
   1cd70:	c9 58       	subi	r28, 0x89	; 137
   1cd72:	d2 40       	sbci	r29, 0x02	; 2
   1cd74:	48 16       	cp	r4, r24
   1cd76:	59 06       	cpc	r5, r25
   1cd78:	6a 06       	cpc	r6, r26
   1cd7a:	7b 06       	cpc	r7, r27
   1cd7c:	09 f0       	breq	.+2      	; 0x1cd80 <utl_matInvF+0x70a>
   1cd7e:	68 cf       	rjmp	.-304    	; 0x1cc50 <utl_matInvF+0x5da>
   1cd80:	c3 56       	subi	r28, 0x63	; 99
   1cd82:	dd 4f       	sbci	r29, 0xFD	; 253
   1cd84:	28 81       	ld	r18, Y
   1cd86:	39 81       	ldd	r19, Y+1	; 0x01
   1cd88:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd8a:	5b 81       	ldd	r21, Y+3	; 0x03
   1cd8c:	cd 59       	subi	r28, 0x9D	; 157
   1cd8e:	d2 40       	sbci	r29, 0x02	; 2
   1cd90:	2f 5f       	subi	r18, 0xFF	; 255
   1cd92:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd94:	4f 4f       	sbci	r20, 0xFF	; 255
   1cd96:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd98:	c3 56       	subi	r28, 0x63	; 99
   1cd9a:	dd 4f       	sbci	r29, 0xFD	; 253
   1cd9c:	28 83       	st	Y, r18
   1cd9e:	39 83       	std	Y+1, r19	; 0x01
   1cda0:	4a 83       	std	Y+2, r20	; 0x02
   1cda2:	5b 83       	std	Y+3, r21	; 0x03
   1cda4:	cd 59       	subi	r28, 0x9D	; 157
   1cda6:	d2 40       	sbci	r29, 0x02	; 2
   1cda8:	cf 55       	subi	r28, 0x5F	; 95
   1cdaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1cdac:	48 81       	ld	r20, Y
   1cdae:	59 81       	ldd	r21, Y+1	; 0x01
   1cdb0:	c1 5a       	subi	r28, 0xA1	; 161
   1cdb2:	d2 40       	sbci	r29, 0x02	; 2
   1cdb4:	44 5b       	subi	r20, 0xB4	; 180
   1cdb6:	5f 4f       	sbci	r21, 0xFF	; 255
   1cdb8:	cf 55       	subi	r28, 0x5F	; 95
   1cdba:	dd 4f       	sbci	r29, 0xFD	; 253
   1cdbc:	48 83       	st	Y, r20
   1cdbe:	59 83       	std	Y+1, r21	; 0x01
   1cdc0:	c1 5a       	subi	r28, 0xA1	; 161
   1cdc2:	d2 40       	sbci	r29, 0x02	; 2
   1cdc4:	cd 55       	subi	r28, 0x5D	; 93
   1cdc6:	dd 4f       	sbci	r29, 0xFD	; 253
   1cdc8:	88 81       	ld	r24, Y
   1cdca:	99 81       	ldd	r25, Y+1	; 0x01
   1cdcc:	c3 5a       	subi	r28, 0xA3	; 163
   1cdce:	d2 40       	sbci	r29, 0x02	; 2
   1cdd0:	88 54       	subi	r24, 0x48	; 72
   1cdd2:	90 40       	sbci	r25, 0x00	; 0
   1cdd4:	cd 55       	subi	r28, 0x5D	; 93
   1cdd6:	dd 4f       	sbci	r29, 0xFD	; 253
   1cdd8:	88 83       	st	Y, r24
   1cdda:	99 83       	std	Y+1, r25	; 0x01
   1cddc:	c3 5a       	subi	r28, 0xA3	; 163
   1cdde:	d2 40       	sbci	r29, 0x02	; 2
   1cde0:	cb 56       	subi	r28, 0x6B	; 107
   1cde2:	dd 4f       	sbci	r29, 0xFD	; 253
   1cde4:	a8 81       	ld	r26, Y
   1cde6:	b9 81       	ldd	r27, Y+1	; 0x01
   1cde8:	c5 59       	subi	r28, 0x95	; 149
   1cdea:	d2 40       	sbci	r29, 0x02	; 2
   1cdec:	a8 5b       	subi	r26, 0xB8	; 184
   1cdee:	bf 4f       	sbci	r27, 0xFF	; 255
   1cdf0:	cb 56       	subi	r28, 0x6B	; 107
   1cdf2:	dd 4f       	sbci	r29, 0xFD	; 253
   1cdf4:	a8 83       	st	Y, r26
   1cdf6:	b9 83       	std	Y+1, r27	; 0x01
   1cdf8:	c5 59       	subi	r28, 0x95	; 149
   1cdfa:	d2 40       	sbci	r29, 0x02	; 2
   1cdfc:	c9 55       	subi	r28, 0x59	; 89
   1cdfe:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce00:	e8 81       	ld	r30, Y
   1ce02:	f9 81       	ldd	r31, Y+1	; 0x01
   1ce04:	c7 5a       	subi	r28, 0xA7	; 167
   1ce06:	d2 40       	sbci	r29, 0x02	; 2
   1ce08:	34 96       	adiw	r30, 0x04	; 4
   1ce0a:	c9 55       	subi	r28, 0x59	; 89
   1ce0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce0e:	e8 83       	st	Y, r30
   1ce10:	f9 83       	std	Y+1, r31	; 0x01
   1ce12:	c7 5a       	subi	r28, 0xA7	; 167
   1ce14:	d2 40       	sbci	r29, 0x02	; 2
   1ce16:	cb 55       	subi	r28, 0x5B	; 91
   1ce18:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce1a:	28 81       	ld	r18, Y
   1ce1c:	39 81       	ldd	r19, Y+1	; 0x01
   1ce1e:	c5 5a       	subi	r28, 0xA5	; 165
   1ce20:	d2 40       	sbci	r29, 0x02	; 2
   1ce22:	24 5b       	subi	r18, 0xB4	; 180
   1ce24:	3f 4f       	sbci	r19, 0xFF	; 255
   1ce26:	cb 55       	subi	r28, 0x5B	; 91
   1ce28:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce2a:	28 83       	st	Y, r18
   1ce2c:	39 83       	std	Y+1, r19	; 0x01
   1ce2e:	c5 5a       	subi	r28, 0xA5	; 165
   1ce30:	d2 40       	sbci	r29, 0x02	; 2
   1ce32:	c3 57       	subi	r28, 0x73	; 115
   1ce34:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce36:	88 80       	ld	r8, Y
   1ce38:	99 80       	ldd	r9, Y+1	; 0x01
   1ce3a:	aa 80       	ldd	r10, Y+2	; 0x02
   1ce3c:	bb 80       	ldd	r11, Y+3	; 0x03
   1ce3e:	cd 58       	subi	r28, 0x8D	; 141
   1ce40:	d2 40       	sbci	r29, 0x02	; 2
   1ce42:	c7 57       	subi	r28, 0x77	; 119
   1ce44:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce46:	88 81       	ld	r24, Y
   1ce48:	99 81       	ldd	r25, Y+1	; 0x01
   1ce4a:	aa 81       	ldd	r26, Y+2	; 0x02
   1ce4c:	bb 81       	ldd	r27, Y+3	; 0x03
   1ce4e:	c9 58       	subi	r28, 0x89	; 137
   1ce50:	d2 40       	sbci	r29, 0x02	; 2
   1ce52:	88 16       	cp	r8, r24
   1ce54:	99 06       	cpc	r9, r25
   1ce56:	aa 06       	cpc	r10, r26
   1ce58:	bb 06       	cpc	r11, r27
   1ce5a:	0c f4       	brge	.+2      	; 0x1ce5e <utl_matInvF+0x7e8>
   1ce5c:	60 cd       	rjmp	.-1344   	; 0x1c91e <utl_matInvF+0x2a8>
   1ce5e:	c7 55       	subi	r28, 0x57	; 87
   1ce60:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce62:	08 81       	ld	r16, Y
   1ce64:	c9 5a       	subi	r28, 0xA9	; 169
   1ce66:	d2 40       	sbci	r29, 0x02	; 2
   1ce68:	c6 55       	subi	r28, 0x56	; 86
   1ce6a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce6c:	18 81       	ld	r17, Y
   1ce6e:	ca 5a       	subi	r28, 0xAA	; 170
   1ce70:	d2 40       	sbci	r29, 0x02	; 2
   1ce72:	cc 24       	eor	r12, r12
   1ce74:	dd 24       	eor	r13, r13
   1ce76:	40 e0       	ldi	r20, 0x00	; 0
   1ce78:	50 e0       	ldi	r21, 0x00	; 0
   1ce7a:	ba 01       	movw	r22, r20
   1ce7c:	c5 56       	subi	r28, 0x65	; 101
   1ce7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ce80:	e8 80       	ld	r14, Y
   1ce82:	f9 80       	ldd	r15, Y+1	; 0x01
   1ce84:	cb 59       	subi	r28, 0x9B	; 155
   1ce86:	d2 40       	sbci	r29, 0x02	; 2
   1ce88:	a1 e0       	ldi	r26, 0x01	; 1
   1ce8a:	b0 e0       	ldi	r27, 0x00	; 0
   1ce8c:	ac 0f       	add	r26, r28
   1ce8e:	bd 1f       	adc	r27, r29
   1ce90:	ea 0e       	add	r14, r26
   1ce92:	fb 1e       	adc	r15, r27
   1ce94:	96 01       	movw	r18, r12
   1ce96:	67 01       	movw	r12, r14
   1ce98:	3c c0       	rjmp	.+120    	; 0x1cf12 <utl_matInvF+0x89c>
   1ce9a:	28 01       	movw	r4, r16
   1ce9c:	4e 0c       	add	r4, r14
   1ce9e:	5f 1c       	adc	r5, r15
   1cea0:	f1 01       	movw	r30, r2
   1cea2:	ee 0d       	add	r30, r14
   1cea4:	ff 1d       	adc	r31, r15
   1cea6:	80 80       	ld	r8, Z
   1cea8:	91 80       	ldd	r9, Z+1	; 0x01
   1ceaa:	a2 80       	ldd	r10, Z+2	; 0x02
   1ceac:	b3 80       	ldd	r11, Z+3	; 0x03
   1ceae:	f2 01       	movw	r30, r4
   1ceb0:	80 82       	st	Z, r8
   1ceb2:	91 82       	std	Z+1, r9	; 0x01
   1ceb4:	a2 82       	std	Z+2, r10	; 0x02
   1ceb6:	b3 82       	std	Z+3, r11	; 0x03
   1ceb8:	01 96       	adiw	r24, 0x01	; 1
   1ceba:	a1 1d       	adc	r26, r1
   1cebc:	b1 1d       	adc	r27, r1
   1cebe:	88 24       	eor	r8, r8
   1cec0:	99 24       	eor	r9, r9
   1cec2:	68 94       	set
   1cec4:	82 f8       	bld	r8, 2
   1cec6:	e8 0c       	add	r14, r8
   1cec8:	f9 1c       	adc	r15, r9
   1ceca:	08 c0       	rjmp	.+16     	; 0x1cedc <utl_matInvF+0x866>
   1cecc:	ee 24       	eor	r14, r14
   1cece:	ff 24       	eor	r15, r15
   1ced0:	80 e0       	ldi	r24, 0x00	; 0
   1ced2:	90 e0       	ldi	r25, 0x00	; 0
   1ced4:	dc 01       	movw	r26, r24
   1ced6:	16 01       	movw	r2, r12
   1ced8:	22 0e       	add	r2, r18
   1ceda:	33 1e       	adc	r3, r19
   1cedc:	c7 57       	subi	r28, 0x77	; 119
   1cede:	dd 4f       	sbci	r29, 0xFD	; 253
   1cee0:	88 80       	ld	r8, Y
   1cee2:	99 80       	ldd	r9, Y+1	; 0x01
   1cee4:	aa 80       	ldd	r10, Y+2	; 0x02
   1cee6:	bb 80       	ldd	r11, Y+3	; 0x03
   1cee8:	c9 58       	subi	r28, 0x89	; 137
   1ceea:	d2 40       	sbci	r29, 0x02	; 2
   1ceec:	88 15       	cp	r24, r8
   1ceee:	99 05       	cpc	r25, r9
   1cef0:	aa 05       	cpc	r26, r10
   1cef2:	bb 05       	cpc	r27, r11
   1cef4:	94 f2       	brlt	.-92     	; 0x1ce9a <utl_matInvF+0x824>
   1cef6:	4f 5f       	subi	r20, 0xFF	; 255
   1cef8:	5f 4f       	sbci	r21, 0xFF	; 255
   1cefa:	6f 4f       	sbci	r22, 0xFF	; 255
   1cefc:	7f 4f       	sbci	r23, 0xFF	; 255
   1cefe:	28 5b       	subi	r18, 0xB8	; 184
   1cf00:	3f 4f       	sbci	r19, 0xFF	; 255
   1cf02:	c5 56       	subi	r28, 0x65	; 101
   1cf04:	dd 4f       	sbci	r29, 0xFD	; 253
   1cf06:	a8 80       	ld	r10, Y
   1cf08:	b9 80       	ldd	r11, Y+1	; 0x01
   1cf0a:	cb 59       	subi	r28, 0x9B	; 155
   1cf0c:	d2 40       	sbci	r29, 0x02	; 2
   1cf0e:	0a 0d       	add	r16, r10
   1cf10:	1b 1d       	adc	r17, r11
   1cf12:	c7 57       	subi	r28, 0x77	; 119
   1cf14:	dd 4f       	sbci	r29, 0xFD	; 253
   1cf16:	88 80       	ld	r8, Y
   1cf18:	99 80       	ldd	r9, Y+1	; 0x01
   1cf1a:	aa 80       	ldd	r10, Y+2	; 0x02
   1cf1c:	bb 80       	ldd	r11, Y+3	; 0x03
   1cf1e:	c9 58       	subi	r28, 0x89	; 137
   1cf20:	d2 40       	sbci	r29, 0x02	; 2
   1cf22:	48 15       	cp	r20, r8
   1cf24:	59 05       	cpc	r21, r9
   1cf26:	6a 05       	cpc	r22, r10
   1cf28:	7b 05       	cpc	r23, r11
   1cf2a:	84 f2       	brlt	.-96     	; 0x1cecc <utl_matInvF+0x856>
   1cf2c:	81 e0       	ldi	r24, 0x01	; 1
   1cf2e:	01 c0       	rjmp	.+2      	; 0x1cf32 <utl_matInvF+0x8bc>
   1cf30:	80 e0       	ldi	r24, 0x00	; 0
   1cf32:	c4 55       	subi	r28, 0x54	; 84
   1cf34:	dd 4f       	sbci	r29, 0xFD	; 253
   1cf36:	cd bf       	out	0x3d, r28	; 61
   1cf38:	de bf       	out	0x3e, r29	; 62
   1cf3a:	df 91       	pop	r29
   1cf3c:	cf 91       	pop	r28
   1cf3e:	1f 91       	pop	r17
   1cf40:	0f 91       	pop	r16
   1cf42:	ff 90       	pop	r15
   1cf44:	ef 90       	pop	r14
   1cf46:	df 90       	pop	r13
   1cf48:	cf 90       	pop	r12
   1cf4a:	bf 90       	pop	r11
   1cf4c:	af 90       	pop	r10
   1cf4e:	9f 90       	pop	r9
   1cf50:	8f 90       	pop	r8
   1cf52:	7f 90       	pop	r7
   1cf54:	6f 90       	pop	r6
   1cf56:	5f 90       	pop	r5
   1cf58:	4f 90       	pop	r4
   1cf5a:	3f 90       	pop	r3
   1cf5c:	2f 90       	pop	r2
   1cf5e:	08 95       	ret

0001cf60 <utl_matTransF>:
   1cf60:	2f 92       	push	r2
   1cf62:	3f 92       	push	r3
   1cf64:	4f 92       	push	r4
   1cf66:	5f 92       	push	r5
   1cf68:	6f 92       	push	r6
   1cf6a:	7f 92       	push	r7
   1cf6c:	8f 92       	push	r8
   1cf6e:	9f 92       	push	r9
   1cf70:	af 92       	push	r10
   1cf72:	bf 92       	push	r11
   1cf74:	cf 92       	push	r12
   1cf76:	df 92       	push	r13
   1cf78:	ef 92       	push	r14
   1cf7a:	ff 92       	push	r15
   1cf7c:	0f 93       	push	r16
   1cf7e:	1f 93       	push	r17
   1cf80:	cf 93       	push	r28
   1cf82:	df 93       	push	r29
   1cf84:	cd b7       	in	r28, 0x3d	; 61
   1cf86:	de b7       	in	r29, 0x3e	; 62
   1cf88:	60 97       	sbiw	r28, 0x10	; 16
   1cf8a:	cd bf       	out	0x3d, r28	; 61
   1cf8c:	de bf       	out	0x3e, r29	; 62
   1cf8e:	2b 01       	movw	r4, r22
   1cf90:	49 01       	movw	r8, r18
   1cf92:	5a 01       	movw	r10, r20
   1cf94:	67 01       	movw	r12, r14
   1cf96:	78 01       	movw	r14, r16
   1cf98:	36 01       	movw	r6, r12
   1cf9a:	66 0c       	add	r6, r6
   1cf9c:	77 1c       	adc	r7, r7
   1cf9e:	66 0c       	add	r6, r6
   1cfa0:	77 1c       	adc	r7, r7
   1cfa2:	69 82       	std	Y+1, r6	; 0x01
   1cfa4:	7a 82       	std	Y+2, r7	; 0x02
   1cfa6:	9c 01       	movw	r18, r24
   1cfa8:	66 24       	eor	r6, r6
   1cfaa:	77 24       	eor	r7, r7
   1cfac:	40 e0       	ldi	r20, 0x00	; 0
   1cfae:	50 e0       	ldi	r21, 0x00	; 0
   1cfb0:	ba 01       	movw	r22, r20
   1cfb2:	14 01       	movw	r2, r8
   1cfb4:	22 0c       	add	r2, r2
   1cfb6:	33 1c       	adc	r3, r3
   1cfb8:	22 0c       	add	r2, r2
   1cfba:	33 1c       	adc	r3, r3
   1cfbc:	42 18       	sub	r4, r2
   1cfbe:	53 08       	sbc	r5, r3
   1cfc0:	69 86       	std	Y+9, r6	; 0x09
   1cfc2:	7a 86       	std	Y+10, r7	; 0x0a
   1cfc4:	3b c0       	rjmp	.+118    	; 0x1d03c <utl_matTransF+0xdc>
   1cfc6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1cfc8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1cfca:	e2 0f       	add	r30, r18
   1cfcc:	f3 1f       	adc	r31, r19
   1cfce:	40 80       	ld	r4, Z
   1cfd0:	51 80       	ldd	r5, Z+1	; 0x01
   1cfd2:	62 80       	ldd	r6, Z+2	; 0x02
   1cfd4:	73 80       	ldd	r7, Z+3	; 0x03
   1cfd6:	4b 82       	std	Y+3, r4	; 0x03
   1cfd8:	5c 82       	std	Y+4, r5	; 0x04
   1cfda:	6d 82       	std	Y+5, r6	; 0x05
   1cfdc:	7e 82       	std	Y+6, r7	; 0x06
   1cfde:	4f 80       	ldd	r4, Y+7	; 0x07
   1cfe0:	58 84       	ldd	r5, Y+8	; 0x08
   1cfe2:	40 0e       	add	r4, r16
   1cfe4:	51 1e       	adc	r5, r17
   1cfe6:	f2 01       	movw	r30, r4
   1cfe8:	4b 80       	ldd	r4, Y+3	; 0x03
   1cfea:	5c 80       	ldd	r5, Y+4	; 0x04
   1cfec:	6d 80       	ldd	r6, Y+5	; 0x05
   1cfee:	7e 80       	ldd	r7, Y+6	; 0x06
   1cff0:	40 82       	st	Z, r4
   1cff2:	51 82       	std	Z+1, r5	; 0x01
   1cff4:	62 82       	std	Z+2, r6	; 0x02
   1cff6:	73 82       	std	Z+3, r7	; 0x03
   1cff8:	01 96       	adiw	r24, 0x01	; 1
   1cffa:	a1 1d       	adc	r26, r1
   1cffc:	b1 1d       	adc	r27, r1
   1cffe:	2c 5f       	subi	r18, 0xFC	; 252
   1d000:	3f 4f       	sbci	r19, 0xFF	; 255
   1d002:	02 0d       	add	r16, r2
   1d004:	13 1d       	adc	r17, r3
   1d006:	8c 15       	cp	r24, r12
   1d008:	9d 05       	cpc	r25, r13
   1d00a:	ae 05       	cpc	r26, r14
   1d00c:	bf 05       	cpc	r27, r15
   1d00e:	dc f2       	brlt	.-74     	; 0x1cfc6 <utl_matTransF+0x66>
   1d010:	2b 85       	ldd	r18, Y+11	; 0x0b
   1d012:	3c 85       	ldd	r19, Y+12	; 0x0c
   1d014:	4d 84       	ldd	r4, Y+13	; 0x0d
   1d016:	5e 84       	ldd	r5, Y+14	; 0x0e
   1d018:	49 86       	std	Y+9, r4	; 0x09
   1d01a:	5a 86       	std	Y+10, r5	; 0x0a
   1d01c:	4f 84       	ldd	r4, Y+15	; 0x0f
   1d01e:	58 88       	ldd	r5, Y+16	; 0x10
   1d020:	4f 5f       	subi	r20, 0xFF	; 255
   1d022:	5f 4f       	sbci	r21, 0xFF	; 255
   1d024:	6f 4f       	sbci	r22, 0xFF	; 255
   1d026:	7f 4f       	sbci	r23, 0xFF	; 255
   1d028:	69 80       	ldd	r6, Y+1	; 0x01
   1d02a:	7a 80       	ldd	r7, Y+2	; 0x02
   1d02c:	26 0d       	add	r18, r6
   1d02e:	37 1d       	adc	r19, r7
   1d030:	09 85       	ldd	r16, Y+9	; 0x09
   1d032:	1a 85       	ldd	r17, Y+10	; 0x0a
   1d034:	0c 5f       	subi	r16, 0xFC	; 252
   1d036:	1f 4f       	sbci	r17, 0xFF	; 255
   1d038:	09 87       	std	Y+9, r16	; 0x09
   1d03a:	1a 87       	std	Y+10, r17	; 0x0a
   1d03c:	48 15       	cp	r20, r8
   1d03e:	59 05       	cpc	r21, r9
   1d040:	6a 05       	cpc	r22, r10
   1d042:	7b 05       	cpc	r23, r11
   1d044:	d4 f4       	brge	.+52     	; 0x1d07a <utl_matTransF+0x11a>
   1d046:	1b 82       	std	Y+3, r1	; 0x03
   1d048:	1c 82       	std	Y+4, r1	; 0x04
   1d04a:	66 24       	eor	r6, r6
   1d04c:	77 24       	eor	r7, r7
   1d04e:	80 e0       	ldi	r24, 0x00	; 0
   1d050:	90 e0       	ldi	r25, 0x00	; 0
   1d052:	dc 01       	movw	r26, r24
   1d054:	e9 85       	ldd	r30, Y+9	; 0x09
   1d056:	fa 85       	ldd	r31, Y+10	; 0x0a
   1d058:	e4 0d       	add	r30, r4
   1d05a:	f5 1d       	adc	r31, r5
   1d05c:	ef 83       	std	Y+7, r30	; 0x07
   1d05e:	f8 87       	std	Y+8, r31	; 0x08
   1d060:	00 e0       	ldi	r16, 0x00	; 0
   1d062:	10 e0       	ldi	r17, 0x00	; 0
   1d064:	f3 01       	movw	r30, r6
   1d066:	69 84       	ldd	r6, Y+9	; 0x09
   1d068:	7a 84       	ldd	r7, Y+10	; 0x0a
   1d06a:	6d 86       	std	Y+13, r6	; 0x0d
   1d06c:	7e 86       	std	Y+14, r7	; 0x0e
   1d06e:	2b 87       	std	Y+11, r18	; 0x0b
   1d070:	3c 87       	std	Y+12, r19	; 0x0c
   1d072:	4f 86       	std	Y+15, r4	; 0x0f
   1d074:	58 8a       	std	Y+16, r5	; 0x10
   1d076:	9f 01       	movw	r18, r30
   1d078:	c4 cf       	rjmp	.-120    	; 0x1d002 <utl_matTransF+0xa2>
   1d07a:	60 96       	adiw	r28, 0x10	; 16
   1d07c:	cd bf       	out	0x3d, r28	; 61
   1d07e:	de bf       	out	0x3e, r29	; 62
   1d080:	df 91       	pop	r29
   1d082:	cf 91       	pop	r28
   1d084:	1f 91       	pop	r17
   1d086:	0f 91       	pop	r16
   1d088:	ff 90       	pop	r15
   1d08a:	ef 90       	pop	r14
   1d08c:	df 90       	pop	r13
   1d08e:	cf 90       	pop	r12
   1d090:	bf 90       	pop	r11
   1d092:	af 90       	pop	r10
   1d094:	9f 90       	pop	r9
   1d096:	8f 90       	pop	r8
   1d098:	7f 90       	pop	r7
   1d09a:	6f 90       	pop	r6
   1d09c:	5f 90       	pop	r5
   1d09e:	4f 90       	pop	r4
   1d0a0:	3f 90       	pop	r3
   1d0a2:	2f 90       	pop	r2
   1d0a4:	08 95       	ret

0001d0a6 <utl_matEyeF>:
   1d0a6:	2f 92       	push	r2
   1d0a8:	3f 92       	push	r3
   1d0aa:	4f 92       	push	r4
   1d0ac:	5f 92       	push	r5
   1d0ae:	6f 92       	push	r6
   1d0b0:	7f 92       	push	r7
   1d0b2:	8f 92       	push	r8
   1d0b4:	9f 92       	push	r9
   1d0b6:	af 92       	push	r10
   1d0b8:	bf 92       	push	r11
   1d0ba:	cf 92       	push	r12
   1d0bc:	df 92       	push	r13
   1d0be:	ef 92       	push	r14
   1d0c0:	ff 92       	push	r15
   1d0c2:	0f 93       	push	r16
   1d0c4:	1f 93       	push	r17
   1d0c6:	cf 93       	push	r28
   1d0c8:	df 93       	push	r29
   1d0ca:	cd b7       	in	r28, 0x3d	; 61
   1d0cc:	de b7       	in	r29, 0x3e	; 62
   1d0ce:	28 97       	sbiw	r28, 0x08	; 8
   1d0d0:	cd bf       	out	0x3d, r28	; 61
   1d0d2:	de bf       	out	0x3e, r29	; 62
   1d0d4:	6a 01       	movw	r12, r20
   1d0d6:	7b 01       	movw	r14, r22
   1d0d8:	09 83       	std	Y+1, r16	; 0x01
   1d0da:	1a 83       	std	Y+2, r17	; 0x02
   1d0dc:	2b 83       	std	Y+3, r18	; 0x03
   1d0de:	3c 83       	std	Y+4, r19	; 0x04
   1d0e0:	5a 01       	movw	r10, r20
   1d0e2:	08 94       	sec
   1d0e4:	a1 1c       	adc	r10, r1
   1d0e6:	b1 1c       	adc	r11, r1
   1d0e8:	aa 0c       	add	r10, r10
   1d0ea:	bb 1c       	adc	r11, r11
   1d0ec:	aa 0c       	add	r10, r10
   1d0ee:	bb 1c       	adc	r11, r11
   1d0f0:	9c 01       	movw	r18, r24
   1d0f2:	4a 01       	movw	r8, r20
   1d0f4:	88 0c       	add	r8, r8
   1d0f6:	99 1c       	adc	r9, r9
   1d0f8:	88 0c       	add	r8, r8
   1d0fa:	99 1c       	adc	r9, r9
   1d0fc:	8c 01       	movw	r16, r24
   1d0fe:	40 e0       	ldi	r20, 0x00	; 0
   1d100:	50 e0       	ldi	r21, 0x00	; 0
   1d102:	ba 01       	movw	r22, r20
   1d104:	0f 2e       	mov	r0, r31
   1d106:	f0 e0       	ldi	r31, 0x00	; 0
   1d108:	4f 2e       	mov	r4, r31
   1d10a:	f0 e0       	ldi	r31, 0x00	; 0
   1d10c:	5f 2e       	mov	r5, r31
   1d10e:	f0 e0       	ldi	r31, 0x00	; 0
   1d110:	6f 2e       	mov	r6, r31
   1d112:	f0 e0       	ldi	r31, 0x00	; 0
   1d114:	7f 2e       	mov	r7, r31
   1d116:	f0 2d       	mov	r31, r0
   1d118:	3a c0       	rjmp	.+116    	; 0x1d18e <utl_matEyeF+0xe8>
   1d11a:	84 17       	cp	r24, r20
   1d11c:	95 07       	cpc	r25, r21
   1d11e:	a6 07       	cpc	r26, r22
   1d120:	b7 07       	cpc	r27, r23
   1d122:	51 f4       	brne	.+20     	; 0x1d138 <utl_matEyeF+0x92>
   1d124:	89 80       	ldd	r8, Y+1	; 0x01
   1d126:	9a 80       	ldd	r9, Y+2	; 0x02
   1d128:	ab 80       	ldd	r10, Y+3	; 0x03
   1d12a:	bc 80       	ldd	r11, Y+4	; 0x04
   1d12c:	f8 01       	movw	r30, r16
   1d12e:	80 82       	st	Z, r8
   1d130:	91 82       	std	Z+1, r9	; 0x01
   1d132:	a2 82       	std	Z+2, r10	; 0x02
   1d134:	b3 82       	std	Z+3, r11	; 0x03
   1d136:	07 c0       	rjmp	.+14     	; 0x1d146 <utl_matEyeF+0xa0>
   1d138:	f9 01       	movw	r30, r18
   1d13a:	e2 0d       	add	r30, r2
   1d13c:	f3 1d       	adc	r31, r3
   1d13e:	40 82       	st	Z, r4
   1d140:	51 82       	std	Z+1, r5	; 0x01
   1d142:	62 82       	std	Z+2, r6	; 0x02
   1d144:	73 82       	std	Z+3, r7	; 0x03
   1d146:	01 96       	adiw	r24, 0x01	; 1
   1d148:	a1 1d       	adc	r26, r1
   1d14a:	b1 1d       	adc	r27, r1
   1d14c:	e4 e0       	ldi	r30, 0x04	; 4
   1d14e:	8e 2e       	mov	r8, r30
   1d150:	91 2c       	mov	r9, r1
   1d152:	28 0c       	add	r2, r8
   1d154:	39 1c       	adc	r3, r9
   1d156:	0a c0       	rjmp	.+20     	; 0x1d16c <utl_matEyeF+0xc6>
   1d158:	e0 e0       	ldi	r30, 0x00	; 0
   1d15a:	f0 e0       	ldi	r31, 0x00	; 0
   1d15c:	80 e0       	ldi	r24, 0x00	; 0
   1d15e:	90 e0       	ldi	r25, 0x00	; 0
   1d160:	dc 01       	movw	r26, r24
   1d162:	1f 01       	movw	r2, r30
   1d164:	ad 82       	std	Y+5, r10	; 0x05
   1d166:	be 82       	std	Y+6, r11	; 0x06
   1d168:	8f 82       	std	Y+7, r8	; 0x07
   1d16a:	98 86       	std	Y+8, r9	; 0x08
   1d16c:	8c 15       	cp	r24, r12
   1d16e:	9d 05       	cpc	r25, r13
   1d170:	ae 05       	cpc	r26, r14
   1d172:	bf 05       	cpc	r27, r15
   1d174:	94 f2       	brlt	.-92     	; 0x1d11a <utl_matEyeF+0x74>
   1d176:	ad 80       	ldd	r10, Y+5	; 0x05
   1d178:	be 80       	ldd	r11, Y+6	; 0x06
   1d17a:	8f 80       	ldd	r8, Y+7	; 0x07
   1d17c:	98 84       	ldd	r9, Y+8	; 0x08
   1d17e:	4f 5f       	subi	r20, 0xFF	; 255
   1d180:	5f 4f       	sbci	r21, 0xFF	; 255
   1d182:	6f 4f       	sbci	r22, 0xFF	; 255
   1d184:	7f 4f       	sbci	r23, 0xFF	; 255
   1d186:	0a 0d       	add	r16, r10
   1d188:	1b 1d       	adc	r17, r11
   1d18a:	28 0d       	add	r18, r8
   1d18c:	39 1d       	adc	r19, r9
   1d18e:	4c 15       	cp	r20, r12
   1d190:	5d 05       	cpc	r21, r13
   1d192:	6e 05       	cpc	r22, r14
   1d194:	7f 05       	cpc	r23, r15
   1d196:	04 f3       	brlt	.-64     	; 0x1d158 <utl_matEyeF+0xb2>
   1d198:	28 96       	adiw	r28, 0x08	; 8
   1d19a:	cd bf       	out	0x3d, r28	; 61
   1d19c:	de bf       	out	0x3e, r29	; 62
   1d19e:	df 91       	pop	r29
   1d1a0:	cf 91       	pop	r28
   1d1a2:	1f 91       	pop	r17
   1d1a4:	0f 91       	pop	r16
   1d1a6:	ff 90       	pop	r15
   1d1a8:	ef 90       	pop	r14
   1d1aa:	df 90       	pop	r13
   1d1ac:	cf 90       	pop	r12
   1d1ae:	bf 90       	pop	r11
   1d1b0:	af 90       	pop	r10
   1d1b2:	9f 90       	pop	r9
   1d1b4:	8f 90       	pop	r8
   1d1b6:	7f 90       	pop	r7
   1d1b8:	6f 90       	pop	r6
   1d1ba:	5f 90       	pop	r5
   1d1bc:	4f 90       	pop	r4
   1d1be:	3f 90       	pop	r3
   1d1c0:	2f 90       	pop	r2
   1d1c2:	08 95       	ret

0001d1c4 <utl_normF>:
   1d1c4:	4f 92       	push	r4
   1d1c6:	5f 92       	push	r5
   1d1c8:	6f 92       	push	r6
   1d1ca:	7f 92       	push	r7
   1d1cc:	8f 92       	push	r8
   1d1ce:	9f 92       	push	r9
   1d1d0:	af 92       	push	r10
   1d1d2:	bf 92       	push	r11
   1d1d4:	cf 92       	push	r12
   1d1d6:	df 92       	push	r13
   1d1d8:	ef 92       	push	r14
   1d1da:	ff 92       	push	r15
   1d1dc:	0f 93       	push	r16
   1d1de:	1f 93       	push	r17
   1d1e0:	cf 93       	push	r28
   1d1e2:	df 93       	push	r29
   1d1e4:	2a 01       	movw	r4, r20
   1d1e6:	3b 01       	movw	r6, r22
   1d1e8:	4c 01       	movw	r8, r24
   1d1ea:	5c 01       	movw	r10, r24
   1d1ec:	cc 24       	eor	r12, r12
   1d1ee:	dd 24       	eor	r13, r13
   1d1f0:	76 01       	movw	r14, r12
   1d1f2:	00 e0       	ldi	r16, 0x00	; 0
   1d1f4:	c0 e0       	ldi	r28, 0x00	; 0
   1d1f6:	d0 e0       	ldi	r29, 0x00	; 0
   1d1f8:	10 e0       	ldi	r17, 0x00	; 0
   1d1fa:	1d c0       	rjmp	.+58     	; 0x1d236 <utl_normF+0x72>
   1d1fc:	f5 01       	movw	r30, r10
   1d1fe:	21 91       	ld	r18, Z+
   1d200:	31 91       	ld	r19, Z+
   1d202:	41 91       	ld	r20, Z+
   1d204:	51 91       	ld	r21, Z+
   1d206:	5f 01       	movw	r10, r30
   1d208:	ca 01       	movw	r24, r20
   1d20a:	b9 01       	movw	r22, r18
   1d20c:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1d210:	9b 01       	movw	r18, r22
   1d212:	ac 01       	movw	r20, r24
   1d214:	80 2f       	mov	r24, r16
   1d216:	9c 2f       	mov	r25, r28
   1d218:	ad 2f       	mov	r26, r29
   1d21a:	b1 2f       	mov	r27, r17
   1d21c:	bc 01       	movw	r22, r24
   1d21e:	cd 01       	movw	r24, r26
   1d220:	0e 94 c3 f1 	call	0x1e386	; 0x1e386 <__addsf3>
   1d224:	06 2f       	mov	r16, r22
   1d226:	c7 2f       	mov	r28, r23
   1d228:	d8 2f       	mov	r29, r24
   1d22a:	19 2f       	mov	r17, r25
   1d22c:	08 94       	sec
   1d22e:	c1 1c       	adc	r12, r1
   1d230:	d1 1c       	adc	r13, r1
   1d232:	e1 1c       	adc	r14, r1
   1d234:	f1 1c       	adc	r15, r1
   1d236:	c4 14       	cp	r12, r4
   1d238:	d5 04       	cpc	r13, r5
   1d23a:	e6 04       	cpc	r14, r6
   1d23c:	f7 04       	cpc	r15, r7
   1d23e:	f4 f2       	brlt	.-68     	; 0x1d1fc <utl_normF+0x38>
   1d240:	80 2f       	mov	r24, r16
   1d242:	9c 2f       	mov	r25, r28
   1d244:	ad 2f       	mov	r26, r29
   1d246:	b1 2f       	mov	r27, r17
   1d248:	bc 01       	movw	r22, r24
   1d24a:	cd 01       	movw	r24, r26
   1d24c:	0e 94 69 f4 	call	0x1e8d2	; 0x1e8d2 <sqrt>
   1d250:	eb 01       	movw	r28, r22
   1d252:	b8 2e       	mov	r11, r24
   1d254:	a9 2e       	mov	r10, r25
   1d256:	cc 24       	eor	r12, r12
   1d258:	dd 24       	eor	r13, r13
   1d25a:	76 01       	movw	r14, r12
   1d25c:	1b c0       	rjmp	.+54     	; 0x1d294 <utl_normF+0xd0>
   1d25e:	f4 01       	movw	r30, r8
   1d260:	60 81       	ld	r22, Z
   1d262:	71 81       	ldd	r23, Z+1	; 0x01
   1d264:	82 81       	ldd	r24, Z+2	; 0x02
   1d266:	93 81       	ldd	r25, Z+3	; 0x03
   1d268:	a5 01       	movw	r20, r10
   1d26a:	0c 2f       	mov	r16, r28
   1d26c:	1d 2f       	mov	r17, r29
   1d26e:	25 2f       	mov	r18, r21
   1d270:	3a 2d       	mov	r19, r10
   1d272:	a9 01       	movw	r20, r18
   1d274:	98 01       	movw	r18, r16
   1d276:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1d27a:	dc 01       	movw	r26, r24
   1d27c:	cb 01       	movw	r24, r22
   1d27e:	f4 01       	movw	r30, r8
   1d280:	81 93       	st	Z+, r24
   1d282:	91 93       	st	Z+, r25
   1d284:	a1 93       	st	Z+, r26
   1d286:	b1 93       	st	Z+, r27
   1d288:	4f 01       	movw	r8, r30
   1d28a:	08 94       	sec
   1d28c:	c1 1c       	adc	r12, r1
   1d28e:	d1 1c       	adc	r13, r1
   1d290:	e1 1c       	adc	r14, r1
   1d292:	f1 1c       	adc	r15, r1
   1d294:	c4 14       	cp	r12, r4
   1d296:	d5 04       	cpc	r13, r5
   1d298:	e6 04       	cpc	r14, r6
   1d29a:	f7 04       	cpc	r15, r7
   1d29c:	04 f3       	brlt	.-64     	; 0x1d25e <utl_normF+0x9a>
   1d29e:	95 01       	movw	r18, r10
   1d2a0:	8c 2f       	mov	r24, r28
   1d2a2:	9d 2f       	mov	r25, r29
   1d2a4:	a3 2f       	mov	r26, r19
   1d2a6:	ba 2d       	mov	r27, r10
   1d2a8:	bc 01       	movw	r22, r24
   1d2aa:	cd 01       	movw	r24, r26
   1d2ac:	df 91       	pop	r29
   1d2ae:	cf 91       	pop	r28
   1d2b0:	1f 91       	pop	r17
   1d2b2:	0f 91       	pop	r16
   1d2b4:	ff 90       	pop	r15
   1d2b6:	ef 90       	pop	r14
   1d2b8:	df 90       	pop	r13
   1d2ba:	cf 90       	pop	r12
   1d2bc:	bf 90       	pop	r11
   1d2be:	af 90       	pop	r10
   1d2c0:	9f 90       	pop	r9
   1d2c2:	8f 90       	pop	r8
   1d2c4:	7f 90       	pop	r7
   1d2c6:	6f 90       	pop	r6
   1d2c8:	5f 90       	pop	r5
   1d2ca:	4f 90       	pop	r4
   1d2cc:	08 95       	ret

0001d2ce <utl_matScalerMultF>:
   1d2ce:	2f 92       	push	r2
   1d2d0:	3f 92       	push	r3
   1d2d2:	4f 92       	push	r4
   1d2d4:	5f 92       	push	r5
   1d2d6:	6f 92       	push	r6
   1d2d8:	7f 92       	push	r7
   1d2da:	8f 92       	push	r8
   1d2dc:	9f 92       	push	r9
   1d2de:	af 92       	push	r10
   1d2e0:	bf 92       	push	r11
   1d2e2:	cf 92       	push	r12
   1d2e4:	df 92       	push	r13
   1d2e6:	ef 92       	push	r14
   1d2e8:	ff 92       	push	r15
   1d2ea:	0f 93       	push	r16
   1d2ec:	1f 93       	push	r17
   1d2ee:	cf 93       	push	r28
   1d2f0:	df 93       	push	r29
   1d2f2:	cd b7       	in	r28, 0x3d	; 61
   1d2f4:	de b7       	in	r29, 0x3e	; 62
   1d2f6:	2a 97       	sbiw	r28, 0x0a	; 10
   1d2f8:	cd bf       	out	0x3d, r28	; 61
   1d2fa:	de bf       	out	0x3e, r29	; 62
   1d2fc:	49 83       	std	Y+1, r20	; 0x01
   1d2fe:	5a 83       	std	Y+2, r21	; 0x02
   1d300:	6b 83       	std	Y+3, r22	; 0x03
   1d302:	7c 83       	std	Y+4, r23	; 0x04
   1d304:	28 01       	movw	r4, r16
   1d306:	39 01       	movw	r6, r18
   1d308:	cd 82       	std	Y+5, r12	; 0x05
   1d30a:	de 82       	std	Y+6, r13	; 0x06
   1d30c:	ef 82       	std	Y+7, r14	; 0x07
   1d30e:	f8 86       	std	Y+8, r15	; 0x08
   1d310:	18 01       	movw	r2, r16
   1d312:	22 0c       	add	r2, r2
   1d314:	33 1c       	adc	r3, r3
   1d316:	22 0c       	add	r2, r2
   1d318:	33 1c       	adc	r3, r3
   1d31a:	8c 01       	movw	r16, r24
   1d31c:	88 24       	eor	r8, r8
   1d31e:	99 24       	eor	r9, r9
   1d320:	54 01       	movw	r10, r8
   1d322:	2d c0       	rjmp	.+90     	; 0x1d37e <utl_matScalerMultF+0xb0>
   1d324:	a9 85       	ldd	r26, Y+9	; 0x09
   1d326:	ba 85       	ldd	r27, Y+10	; 0x0a
   1d328:	6d 91       	ld	r22, X+
   1d32a:	7d 91       	ld	r23, X+
   1d32c:	8d 91       	ld	r24, X+
   1d32e:	9c 91       	ld	r25, X
   1d330:	2d 81       	ldd	r18, Y+5	; 0x05
   1d332:	3e 81       	ldd	r19, Y+6	; 0x06
   1d334:	4f 81       	ldd	r20, Y+7	; 0x07
   1d336:	58 85       	ldd	r21, Y+8	; 0x08
   1d338:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1d33c:	dc 01       	movw	r26, r24
   1d33e:	cb 01       	movw	r24, r22
   1d340:	e9 85       	ldd	r30, Y+9	; 0x09
   1d342:	fa 85       	ldd	r31, Y+10	; 0x0a
   1d344:	81 93       	st	Z+, r24
   1d346:	91 93       	st	Z+, r25
   1d348:	a1 93       	st	Z+, r26
   1d34a:	b1 93       	st	Z+, r27
   1d34c:	e9 87       	std	Y+9, r30	; 0x09
   1d34e:	fa 87       	std	Y+10, r31	; 0x0a
   1d350:	08 94       	sec
   1d352:	c1 1c       	adc	r12, r1
   1d354:	d1 1c       	adc	r13, r1
   1d356:	e1 1c       	adc	r14, r1
   1d358:	f1 1c       	adc	r15, r1
   1d35a:	05 c0       	rjmp	.+10     	; 0x1d366 <utl_matScalerMultF+0x98>
   1d35c:	cc 24       	eor	r12, r12
   1d35e:	dd 24       	eor	r13, r13
   1d360:	76 01       	movw	r14, r12
   1d362:	09 87       	std	Y+9, r16	; 0x09
   1d364:	1a 87       	std	Y+10, r17	; 0x0a
   1d366:	c4 14       	cp	r12, r4
   1d368:	d5 04       	cpc	r13, r5
   1d36a:	e6 04       	cpc	r14, r6
   1d36c:	f7 04       	cpc	r15, r7
   1d36e:	d4 f2       	brlt	.-76     	; 0x1d324 <utl_matScalerMultF+0x56>
   1d370:	08 94       	sec
   1d372:	81 1c       	adc	r8, r1
   1d374:	91 1c       	adc	r9, r1
   1d376:	a1 1c       	adc	r10, r1
   1d378:	b1 1c       	adc	r11, r1
   1d37a:	02 0d       	add	r16, r2
   1d37c:	13 1d       	adc	r17, r3
   1d37e:	89 81       	ldd	r24, Y+1	; 0x01
   1d380:	9a 81       	ldd	r25, Y+2	; 0x02
   1d382:	ab 81       	ldd	r26, Y+3	; 0x03
   1d384:	bc 81       	ldd	r27, Y+4	; 0x04
   1d386:	88 16       	cp	r8, r24
   1d388:	99 06       	cpc	r9, r25
   1d38a:	aa 06       	cpc	r10, r26
   1d38c:	bb 06       	cpc	r11, r27
   1d38e:	34 f3       	brlt	.-52     	; 0x1d35c <utl_matScalerMultF+0x8e>
   1d390:	2a 96       	adiw	r28, 0x0a	; 10
   1d392:	cd bf       	out	0x3d, r28	; 61
   1d394:	de bf       	out	0x3e, r29	; 62
   1d396:	df 91       	pop	r29
   1d398:	cf 91       	pop	r28
   1d39a:	1f 91       	pop	r17
   1d39c:	0f 91       	pop	r16
   1d39e:	ff 90       	pop	r15
   1d3a0:	ef 90       	pop	r14
   1d3a2:	df 90       	pop	r13
   1d3a4:	cf 90       	pop	r12
   1d3a6:	bf 90       	pop	r11
   1d3a8:	af 90       	pop	r10
   1d3aa:	9f 90       	pop	r9
   1d3ac:	8f 90       	pop	r8
   1d3ae:	7f 90       	pop	r7
   1d3b0:	6f 90       	pop	r6
   1d3b2:	5f 90       	pop	r5
   1d3b4:	4f 90       	pop	r4
   1d3b6:	3f 90       	pop	r3
   1d3b8:	2f 90       	pop	r2
   1d3ba:	08 95       	ret

0001d3bc <utl_matSubF>:
   1d3bc:	2f 92       	push	r2
   1d3be:	3f 92       	push	r3
   1d3c0:	4f 92       	push	r4
   1d3c2:	5f 92       	push	r5
   1d3c4:	6f 92       	push	r6
   1d3c6:	7f 92       	push	r7
   1d3c8:	8f 92       	push	r8
   1d3ca:	9f 92       	push	r9
   1d3cc:	af 92       	push	r10
   1d3ce:	bf 92       	push	r11
   1d3d0:	cf 92       	push	r12
   1d3d2:	df 92       	push	r13
   1d3d4:	ef 92       	push	r14
   1d3d6:	ff 92       	push	r15
   1d3d8:	0f 93       	push	r16
   1d3da:	1f 93       	push	r17
   1d3dc:	cf 93       	push	r28
   1d3de:	df 93       	push	r29
   1d3e0:	cd b7       	in	r28, 0x3d	; 61
   1d3e2:	de b7       	in	r29, 0x3e	; 62
   1d3e4:	2c 97       	sbiw	r28, 0x0c	; 12
   1d3e6:	cd bf       	out	0x3d, r28	; 61
   1d3e8:	de bf       	out	0x3e, r29	; 62
   1d3ea:	2d 83       	std	Y+5, r18	; 0x05
   1d3ec:	3e 83       	std	Y+6, r19	; 0x06
   1d3ee:	4f 83       	std	Y+7, r20	; 0x07
   1d3f0:	58 87       	std	Y+8, r21	; 0x08
   1d3f2:	27 01       	movw	r4, r14
   1d3f4:	38 01       	movw	r6, r16
   1d3f6:	17 01       	movw	r2, r14
   1d3f8:	22 0c       	add	r2, r2
   1d3fa:	33 1c       	adc	r3, r3
   1d3fc:	22 0c       	add	r2, r2
   1d3fe:	33 1c       	adc	r3, r3
   1d400:	89 83       	std	Y+1, r24	; 0x01
   1d402:	9a 83       	std	Y+2, r25	; 0x02
   1d404:	6b 83       	std	Y+3, r22	; 0x03
   1d406:	7c 83       	std	Y+4, r23	; 0x04
   1d408:	86 01       	movw	r16, r12
   1d40a:	88 24       	eor	r8, r8
   1d40c:	99 24       	eor	r9, r9
   1d40e:	54 01       	movw	r10, r8
   1d410:	4b c0       	rjmp	.+150    	; 0x1d4a8 <utl_matSubF+0xec>
   1d412:	8b 85       	ldd	r24, Y+11	; 0x0b
   1d414:	9c 85       	ldd	r25, Y+12	; 0x0c
   1d416:	80 0f       	add	r24, r16
   1d418:	91 1f       	adc	r25, r17
   1d41a:	89 87       	std	Y+9, r24	; 0x09
   1d41c:	9a 87       	std	Y+10, r25	; 0x0a
   1d41e:	e9 81       	ldd	r30, Y+1	; 0x01
   1d420:	fa 81       	ldd	r31, Y+2	; 0x02
   1d422:	ab 85       	ldd	r26, Y+11	; 0x0b
   1d424:	bc 85       	ldd	r27, Y+12	; 0x0c
   1d426:	ea 0f       	add	r30, r26
   1d428:	fb 1f       	adc	r31, r27
   1d42a:	2b 81       	ldd	r18, Y+3	; 0x03
   1d42c:	3c 81       	ldd	r19, Y+4	; 0x04
   1d42e:	2a 0f       	add	r18, r26
   1d430:	3b 1f       	adc	r19, r27
   1d432:	60 81       	ld	r22, Z
   1d434:	71 81       	ldd	r23, Z+1	; 0x01
   1d436:	82 81       	ldd	r24, Z+2	; 0x02
   1d438:	93 81       	ldd	r25, Z+3	; 0x03
   1d43a:	f9 01       	movw	r30, r18
   1d43c:	20 81       	ld	r18, Z
   1d43e:	31 81       	ldd	r19, Z+1	; 0x01
   1d440:	42 81       	ldd	r20, Z+2	; 0x02
   1d442:	53 81       	ldd	r21, Z+3	; 0x03
   1d444:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
   1d448:	dc 01       	movw	r26, r24
   1d44a:	cb 01       	movw	r24, r22
   1d44c:	e9 85       	ldd	r30, Y+9	; 0x09
   1d44e:	fa 85       	ldd	r31, Y+10	; 0x0a
   1d450:	80 83       	st	Z, r24
   1d452:	91 83       	std	Z+1, r25	; 0x01
   1d454:	a2 83       	std	Z+2, r26	; 0x02
   1d456:	b3 83       	std	Z+3, r27	; 0x03
   1d458:	08 94       	sec
   1d45a:	c1 1c       	adc	r12, r1
   1d45c:	d1 1c       	adc	r13, r1
   1d45e:	e1 1c       	adc	r14, r1
   1d460:	f1 1c       	adc	r15, r1
   1d462:	8b 85       	ldd	r24, Y+11	; 0x0b
   1d464:	9c 85       	ldd	r25, Y+12	; 0x0c
   1d466:	04 96       	adiw	r24, 0x04	; 4
   1d468:	05 c0       	rjmp	.+10     	; 0x1d474 <utl_matSubF+0xb8>
   1d46a:	80 e0       	ldi	r24, 0x00	; 0
   1d46c:	90 e0       	ldi	r25, 0x00	; 0
   1d46e:	cc 24       	eor	r12, r12
   1d470:	dd 24       	eor	r13, r13
   1d472:	76 01       	movw	r14, r12
   1d474:	8b 87       	std	Y+11, r24	; 0x0b
   1d476:	9c 87       	std	Y+12, r25	; 0x0c
   1d478:	c4 14       	cp	r12, r4
   1d47a:	d5 04       	cpc	r13, r5
   1d47c:	e6 04       	cpc	r14, r6
   1d47e:	f7 04       	cpc	r15, r7
   1d480:	44 f2       	brlt	.-112    	; 0x1d412 <utl_matSubF+0x56>
   1d482:	08 94       	sec
   1d484:	81 1c       	adc	r8, r1
   1d486:	91 1c       	adc	r9, r1
   1d488:	a1 1c       	adc	r10, r1
   1d48a:	b1 1c       	adc	r11, r1
   1d48c:	a9 81       	ldd	r26, Y+1	; 0x01
   1d48e:	ba 81       	ldd	r27, Y+2	; 0x02
   1d490:	a2 0d       	add	r26, r2
   1d492:	b3 1d       	adc	r27, r3
   1d494:	a9 83       	std	Y+1, r26	; 0x01
   1d496:	ba 83       	std	Y+2, r27	; 0x02
   1d498:	eb 81       	ldd	r30, Y+3	; 0x03
   1d49a:	fc 81       	ldd	r31, Y+4	; 0x04
   1d49c:	e2 0d       	add	r30, r2
   1d49e:	f3 1d       	adc	r31, r3
   1d4a0:	eb 83       	std	Y+3, r30	; 0x03
   1d4a2:	fc 83       	std	Y+4, r31	; 0x04
   1d4a4:	02 0d       	add	r16, r2
   1d4a6:	13 1d       	adc	r17, r3
   1d4a8:	8d 81       	ldd	r24, Y+5	; 0x05
   1d4aa:	9e 81       	ldd	r25, Y+6	; 0x06
   1d4ac:	af 81       	ldd	r26, Y+7	; 0x07
   1d4ae:	b8 85       	ldd	r27, Y+8	; 0x08
   1d4b0:	88 16       	cp	r8, r24
   1d4b2:	99 06       	cpc	r9, r25
   1d4b4:	aa 06       	cpc	r10, r26
   1d4b6:	bb 06       	cpc	r11, r27
   1d4b8:	c4 f2       	brlt	.-80     	; 0x1d46a <utl_matSubF+0xae>
   1d4ba:	2c 96       	adiw	r28, 0x0c	; 12
   1d4bc:	cd bf       	out	0x3d, r28	; 61
   1d4be:	de bf       	out	0x3e, r29	; 62
   1d4c0:	df 91       	pop	r29
   1d4c2:	cf 91       	pop	r28
   1d4c4:	1f 91       	pop	r17
   1d4c6:	0f 91       	pop	r16
   1d4c8:	ff 90       	pop	r15
   1d4ca:	ef 90       	pop	r14
   1d4cc:	df 90       	pop	r13
   1d4ce:	cf 90       	pop	r12
   1d4d0:	bf 90       	pop	r11
   1d4d2:	af 90       	pop	r10
   1d4d4:	9f 90       	pop	r9
   1d4d6:	8f 90       	pop	r8
   1d4d8:	7f 90       	pop	r7
   1d4da:	6f 90       	pop	r6
   1d4dc:	5f 90       	pop	r5
   1d4de:	4f 90       	pop	r4
   1d4e0:	3f 90       	pop	r3
   1d4e2:	2f 90       	pop	r2
   1d4e4:	08 95       	ret

0001d4e6 <utl_matEigsF>:
   1d4e6:	2f 92       	push	r2
   1d4e8:	3f 92       	push	r3
   1d4ea:	4f 92       	push	r4
   1d4ec:	5f 92       	push	r5
   1d4ee:	6f 92       	push	r6
   1d4f0:	7f 92       	push	r7
   1d4f2:	8f 92       	push	r8
   1d4f4:	9f 92       	push	r9
   1d4f6:	af 92       	push	r10
   1d4f8:	bf 92       	push	r11
   1d4fa:	cf 92       	push	r12
   1d4fc:	df 92       	push	r13
   1d4fe:	ef 92       	push	r14
   1d500:	ff 92       	push	r15
   1d502:	0f 93       	push	r16
   1d504:	1f 93       	push	r17
   1d506:	cf 93       	push	r28
   1d508:	df 93       	push	r29
   1d50a:	cd b7       	in	r28, 0x3d	; 61
   1d50c:	de b7       	in	r29, 0x3e	; 62
   1d50e:	ce 5b       	subi	r28, 0xBE	; 190
   1d510:	d0 40       	sbci	r29, 0x00	; 0
   1d512:	cd bf       	out	0x3d, r28	; 61
   1d514:	de bf       	out	0x3e, r29	; 62
   1d516:	c1 55       	subi	r28, 0x51	; 81
   1d518:	df 4f       	sbci	r29, 0xFF	; 255
   1d51a:	88 83       	st	Y, r24
   1d51c:	99 83       	std	Y+1, r25	; 0x01
   1d51e:	cf 5a       	subi	r28, 0xAF	; 175
   1d520:	d0 40       	sbci	r29, 0x00	; 0
   1d522:	2a 01       	movw	r4, r20
   1d524:	3b 01       	movw	r6, r22
   1d526:	47 e0       	ldi	r20, 0x07	; 7
   1d528:	44 16       	cp	r4, r20
   1d52a:	51 04       	cpc	r5, r1
   1d52c:	61 04       	cpc	r6, r1
   1d52e:	71 04       	cpc	r7, r1
   1d530:	0c f0       	brlt	.+2      	; 0x1d534 <utl_matEigsF+0x4e>
   1d532:	f6 c1       	rjmp	.+1004   	; 0x1d920 <utl_matEigsF+0x43a>
   1d534:	c7 55       	subi	r28, 0x57	; 87
   1d536:	df 4f       	sbci	r29, 0xFF	; 255
   1d538:	18 82       	st	Y, r1
   1d53a:	19 82       	std	Y+1, r1	; 0x01
   1d53c:	c9 5a       	subi	r28, 0xA9	; 169
   1d53e:	d0 40       	sbci	r29, 0x00	; 0
   1d540:	c5 55       	subi	r28, 0x55	; 85
   1d542:	df 4f       	sbci	r29, 0xFF	; 255
   1d544:	18 82       	st	Y, r1
   1d546:	19 82       	std	Y+1, r1	; 0x01
   1d548:	1a 82       	std	Y+2, r1	; 0x02
   1d54a:	1b 82       	std	Y+3, r1	; 0x03
   1d54c:	cb 5a       	subi	r28, 0xAB	; 171
   1d54e:	d0 40       	sbci	r29, 0x00	; 0
   1d550:	99 24       	eor	r9, r9
   1d552:	88 24       	eor	r8, r8
   1d554:	33 24       	eor	r3, r3
   1d556:	22 24       	eor	r2, r2
   1d558:	c2 01       	movw	r24, r4
   1d55a:	88 0f       	add	r24, r24
   1d55c:	99 1f       	adc	r25, r25
   1d55e:	88 0f       	add	r24, r24
   1d560:	99 1f       	adc	r25, r25
   1d562:	cf 54       	subi	r28, 0x4F	; 79
   1d564:	df 4f       	sbci	r29, 0xFF	; 255
   1d566:	88 83       	st	Y, r24
   1d568:	99 83       	std	Y+1, r25	; 0x01
   1d56a:	c1 5b       	subi	r28, 0xB1	; 177
   1d56c:	d0 40       	sbci	r29, 0x00	; 0
   1d56e:	82 0f       	add	r24, r18
   1d570:	93 1f       	adc	r25, r19
   1d572:	c5 54       	subi	r28, 0x45	; 69
   1d574:	df 4f       	sbci	r29, 0xFF	; 255
   1d576:	88 83       	st	Y, r24
   1d578:	99 83       	std	Y+1, r25	; 0x01
   1d57a:	cb 5b       	subi	r28, 0xBB	; 187
   1d57c:	d0 40       	sbci	r29, 0x00	; 0
   1d57e:	cf 54       	subi	r28, 0x4F	; 79
   1d580:	df 4f       	sbci	r29, 0xFF	; 255
   1d582:	a8 81       	ld	r26, Y
   1d584:	b9 81       	ldd	r27, Y+1	; 0x01
   1d586:	c1 5b       	subi	r28, 0xB1	; 177
   1d588:	d0 40       	sbci	r29, 0x00	; 0
   1d58a:	a0 0f       	add	r26, r16
   1d58c:	b1 1f       	adc	r27, r17
   1d58e:	c3 54       	subi	r28, 0x43	; 67
   1d590:	df 4f       	sbci	r29, 0xFF	; 255
   1d592:	a8 83       	st	Y, r26
   1d594:	b9 83       	std	Y+1, r27	; 0x01
   1d596:	cd 5b       	subi	r28, 0xBD	; 189
   1d598:	d0 40       	sbci	r29, 0x00	; 0
   1d59a:	a7 c1       	rjmp	.+846    	; 0x1d8ea <utl_matEigsF+0x404>
   1d59c:	20 e0       	ldi	r18, 0x00	; 0
   1d59e:	30 e0       	ldi	r19, 0x00	; 0
   1d5a0:	40 e8       	ldi	r20, 0x80	; 128
   1d5a2:	5f e3       	ldi	r21, 0x3F	; 63
   1d5a4:	21 93       	st	Z+, r18
   1d5a6:	31 93       	st	Z+, r19
   1d5a8:	41 93       	st	Z+, r20
   1d5aa:	51 93       	st	Z+, r21
   1d5ac:	01 96       	adiw	r24, 0x01	; 1
   1d5ae:	a1 1d       	adc	r26, r1
   1d5b0:	b1 1d       	adc	r27, r1
   1d5b2:	84 15       	cp	r24, r4
   1d5b4:	95 05       	cpc	r25, r5
   1d5b6:	a6 05       	cpc	r26, r6
   1d5b8:	b7 05       	cpc	r27, r7
   1d5ba:	84 f3       	brlt	.-32     	; 0x1d59c <utl_matEigsF+0xb6>
   1d5bc:	cb 54       	subi	r28, 0x4B	; 75
   1d5be:	df 4f       	sbci	r29, 0xFF	; 255
   1d5c0:	18 82       	st	Y, r1
   1d5c2:	c5 5b       	subi	r28, 0xB5	; 181
   1d5c4:	d0 40       	sbci	r29, 0x00	; 0
   1d5c6:	ca 54       	subi	r28, 0x4A	; 74
   1d5c8:	df 4f       	sbci	r29, 0xFF	; 255
   1d5ca:	18 82       	st	Y, r1
   1d5cc:	c6 5b       	subi	r28, 0xB6	; 182
   1d5ce:	d0 40       	sbci	r29, 0x00	; 0
   1d5d0:	30 e8       	ldi	r19, 0x80	; 128
   1d5d2:	c9 54       	subi	r28, 0x49	; 73
   1d5d4:	df 4f       	sbci	r29, 0xFF	; 255
   1d5d6:	38 83       	st	Y, r19
   1d5d8:	c7 5b       	subi	r28, 0xB7	; 183
   1d5da:	d0 40       	sbci	r29, 0x00	; 0
   1d5dc:	4f e3       	ldi	r20, 0x3F	; 63
   1d5de:	c8 54       	subi	r28, 0x48	; 72
   1d5e0:	df 4f       	sbci	r29, 0xFF	; 255
   1d5e2:	48 83       	st	Y, r20
   1d5e4:	c8 5b       	subi	r28, 0xB8	; 184
   1d5e6:	d0 40       	sbci	r29, 0x00	; 0
   1d5e8:	60 e0       	ldi	r22, 0x00	; 0
   1d5ea:	70 e0       	ldi	r23, 0x00	; 0
   1d5ec:	88 ec       	ldi	r24, 0xC8	; 200
   1d5ee:	92 e4       	ldi	r25, 0x42	; 66
   1d5f0:	b3 c0       	rjmp	.+358    	; 0x1d758 <utl_matEigsF+0x272>
   1d5f2:	00 d0       	rcall	.+0      	; 0x1d5f4 <utl_matEigsF+0x10e>
   1d5f4:	00 d0       	rcall	.+0      	; 0x1d5f6 <utl_matEigsF+0x110>
   1d5f6:	81 e0       	ldi	r24, 0x01	; 1
   1d5f8:	90 e0       	ldi	r25, 0x00	; 0
   1d5fa:	a0 e0       	ldi	r26, 0x00	; 0
   1d5fc:	b0 e0       	ldi	r27, 0x00	; 0
   1d5fe:	ed b7       	in	r30, 0x3d	; 61
   1d600:	fe b7       	in	r31, 0x3e	; 62
   1d602:	81 83       	std	Z+1, r24	; 0x01
   1d604:	92 83       	std	Z+2, r25	; 0x02
   1d606:	a3 83       	std	Z+3, r26	; 0x03
   1d608:	b4 83       	std	Z+4, r27	; 0x04
   1d60a:	29 e1       	ldi	r18, 0x19	; 25
   1d60c:	30 e0       	ldi	r19, 0x00	; 0
   1d60e:	2c 0f       	add	r18, r28
   1d610:	3d 1f       	adc	r19, r29
   1d612:	25 83       	std	Z+5, r18	; 0x05
   1d614:	36 83       	std	Z+6, r19	; 0x06
   1d616:	c1 55       	subi	r28, 0x51	; 81
   1d618:	df 4f       	sbci	r29, 0xFF	; 255
   1d61a:	88 81       	ld	r24, Y
   1d61c:	99 81       	ldd	r25, Y+1	; 0x01
   1d61e:	cf 5a       	subi	r28, 0xAF	; 175
   1d620:	d0 40       	sbci	r29, 0x00	; 0
   1d622:	b3 01       	movw	r22, r6
   1d624:	a2 01       	movw	r20, r4
   1d626:	93 01       	movw	r18, r6
   1d628:	82 01       	movw	r16, r4
   1d62a:	7e 01       	movw	r14, r28
   1d62c:	08 94       	sec
   1d62e:	e1 1c       	adc	r14, r1
   1d630:	f1 1c       	adc	r15, r1
   1d632:	63 01       	movw	r12, r6
   1d634:	52 01       	movw	r10, r4
   1d636:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
   1d63a:	99 8c       	ldd	r9, Y+25	; 0x19
   1d63c:	8a 8c       	ldd	r8, Y+26	; 0x1a
   1d63e:	3b 8c       	ldd	r3, Y+27	; 0x1b
   1d640:	2c 8c       	ldd	r2, Y+28	; 0x1c
   1d642:	89 e1       	ldi	r24, 0x19	; 25
   1d644:	a8 2e       	mov	r10, r24
   1d646:	b1 2c       	mov	r11, r1
   1d648:	ac 0e       	add	r10, r28
   1d64a:	bd 1e       	adc	r11, r29
   1d64c:	4d b7       	in	r20, 0x3d	; 61
   1d64e:	5e b7       	in	r21, 0x3e	; 62
   1d650:	4a 5f       	subi	r20, 0xFA	; 250
   1d652:	5f 4f       	sbci	r21, 0xFF	; 255
   1d654:	4d bf       	out	0x3d, r20	; 61
   1d656:	5e bf       	out	0x3e, r21	; 62
   1d658:	cd 54       	subi	r28, 0x4D	; 77
   1d65a:	df 4f       	sbci	r29, 0xFF	; 255
   1d65c:	e8 82       	st	Y, r14
   1d65e:	f9 82       	std	Y+1, r15	; 0x01
   1d660:	c3 5b       	subi	r28, 0xB3	; 179
   1d662:	d0 40       	sbci	r29, 0x00	; 0
   1d664:	cc 24       	eor	r12, r12
   1d666:	dd 24       	eor	r13, r13
   1d668:	76 01       	movw	r14, r12
   1d66a:	d5 01       	movw	r26, r10
   1d66c:	6d 91       	ld	r22, X+
   1d66e:	7d 91       	ld	r23, X+
   1d670:	8d 91       	ld	r24, X+
   1d672:	9d 91       	ld	r25, X+
   1d674:	5d 01       	movw	r10, r26
   1d676:	49 2d       	mov	r20, r9
   1d678:	58 2d       	mov	r21, r8
   1d67a:	e3 2d       	mov	r30, r3
   1d67c:	f2 2d       	mov	r31, r2
   1d67e:	8a 01       	movw	r16, r20
   1d680:	9f 01       	movw	r18, r30
   1d682:	a9 01       	movw	r20, r18
   1d684:	98 01       	movw	r18, r16
   1d686:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1d68a:	dc 01       	movw	r26, r24
   1d68c:	cb 01       	movw	r24, r22
   1d68e:	cd 54       	subi	r28, 0x4D	; 77
   1d690:	df 4f       	sbci	r29, 0xFF	; 255
   1d692:	e8 81       	ld	r30, Y
   1d694:	f9 81       	ldd	r31, Y+1	; 0x01
   1d696:	c3 5b       	subi	r28, 0xB3	; 179
   1d698:	d0 40       	sbci	r29, 0x00	; 0
   1d69a:	81 93       	st	Z+, r24
   1d69c:	91 93       	st	Z+, r25
   1d69e:	a1 93       	st	Z+, r26
   1d6a0:	b1 93       	st	Z+, r27
   1d6a2:	cd 54       	subi	r28, 0x4D	; 77
   1d6a4:	df 4f       	sbci	r29, 0xFF	; 255
   1d6a6:	e8 83       	st	Y, r30
   1d6a8:	f9 83       	std	Y+1, r31	; 0x01
   1d6aa:	c3 5b       	subi	r28, 0xB3	; 179
   1d6ac:	d0 40       	sbci	r29, 0x00	; 0
   1d6ae:	08 94       	sec
   1d6b0:	c1 1c       	adc	r12, r1
   1d6b2:	d1 1c       	adc	r13, r1
   1d6b4:	e1 1c       	adc	r14, r1
   1d6b6:	f1 1c       	adc	r15, r1
   1d6b8:	c4 14       	cp	r12, r4
   1d6ba:	d5 04       	cpc	r13, r5
   1d6bc:	e6 04       	cpc	r14, r6
   1d6be:	f7 04       	cpc	r15, r7
   1d6c0:	a4 f2       	brlt	.-88     	; 0x1d66a <utl_matEigsF+0x184>
   1d6c2:	a4 01       	movw	r20, r8
   1d6c4:	91 01       	movw	r18, r2
   1d6c6:	85 2f       	mov	r24, r21
   1d6c8:	94 2f       	mov	r25, r20
   1d6ca:	a3 2f       	mov	r26, r19
   1d6cc:	b2 2f       	mov	r27, r18
   1d6ce:	bc 01       	movw	r22, r24
   1d6d0:	cd 01       	movw	r24, r26
   1d6d2:	cb 54       	subi	r28, 0x4B	; 75
   1d6d4:	df 4f       	sbci	r29, 0xFF	; 255
   1d6d6:	48 81       	ld	r20, Y
   1d6d8:	c5 5b       	subi	r28, 0xB5	; 181
   1d6da:	d0 40       	sbci	r29, 0x00	; 0
   1d6dc:	ca 54       	subi	r28, 0x4A	; 74
   1d6de:	df 4f       	sbci	r29, 0xFF	; 255
   1d6e0:	58 81       	ld	r21, Y
   1d6e2:	c6 5b       	subi	r28, 0xB6	; 182
   1d6e4:	d0 40       	sbci	r29, 0x00	; 0
   1d6e6:	c9 54       	subi	r28, 0x49	; 73
   1d6e8:	df 4f       	sbci	r29, 0xFF	; 255
   1d6ea:	e8 81       	ld	r30, Y
   1d6ec:	c7 5b       	subi	r28, 0xB7	; 183
   1d6ee:	d0 40       	sbci	r29, 0x00	; 0
   1d6f0:	c8 54       	subi	r28, 0x48	; 72
   1d6f2:	df 4f       	sbci	r29, 0xFF	; 255
   1d6f4:	f8 81       	ld	r31, Y
   1d6f6:	c8 5b       	subi	r28, 0xB8	; 184
   1d6f8:	d0 40       	sbci	r29, 0x00	; 0
   1d6fa:	8a 01       	movw	r16, r20
   1d6fc:	9f 01       	movw	r18, r30
   1d6fe:	a9 01       	movw	r20, r18
   1d700:	98 01       	movw	r18, r16
   1d702:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__subsf3>
   1d706:	49 2d       	mov	r20, r9
   1d708:	58 2d       	mov	r21, r8
   1d70a:	e3 2d       	mov	r30, r3
   1d70c:	f2 2d       	mov	r31, r2
   1d70e:	8a 01       	movw	r16, r20
   1d710:	9f 01       	movw	r18, r30
   1d712:	a9 01       	movw	r20, r18
   1d714:	98 01       	movw	r18, r16
   1d716:	0e 94 2b f2 	call	0x1e456	; 0x1e456 <__divsf3>
   1d71a:	dc 01       	movw	r26, r24
   1d71c:	cb 01       	movw	r24, r22
   1d71e:	bf 77       	andi	r27, 0x7F	; 127
   1d720:	bc 01       	movw	r22, r24
   1d722:	cd 01       	movw	r24, r26
   1d724:	20 e0       	ldi	r18, 0x00	; 0
   1d726:	30 e0       	ldi	r19, 0x00	; 0
   1d728:	48 ec       	ldi	r20, 0xC8	; 200
   1d72a:	52 e4       	ldi	r21, 0x42	; 66
   1d72c:	0e 94 02 f4 	call	0x1e804	; 0x1e804 <__mulsf3>
   1d730:	cb 54       	subi	r28, 0x4B	; 75
   1d732:	df 4f       	sbci	r29, 0xFF	; 255
   1d734:	98 82       	st	Y, r9
   1d736:	c5 5b       	subi	r28, 0xB5	; 181
   1d738:	d0 40       	sbci	r29, 0x00	; 0
   1d73a:	ca 54       	subi	r28, 0x4A	; 74
   1d73c:	df 4f       	sbci	r29, 0xFF	; 255
   1d73e:	88 82       	st	Y, r8
   1d740:	c6 5b       	subi	r28, 0xB6	; 182
   1d742:	d0 40       	sbci	r29, 0x00	; 0
   1d744:	c9 54       	subi	r28, 0x49	; 73
   1d746:	df 4f       	sbci	r29, 0xFF	; 255
   1d748:	38 82       	st	Y, r3
   1d74a:	c7 5b       	subi	r28, 0xB7	; 183
   1d74c:	d0 40       	sbci	r29, 0x00	; 0
   1d74e:	c8 54       	subi	r28, 0x48	; 72
   1d750:	df 4f       	sbci	r29, 0xFF	; 255
   1d752:	28 82       	st	Y, r2
   1d754:	c8 5b       	subi	r28, 0xB8	; 184
   1d756:	d0 40       	sbci	r29, 0x00	; 0
   1d758:	ac 01       	movw	r20, r24
   1d75a:	86 2f       	mov	r24, r22
   1d75c:	97 2f       	mov	r25, r23
   1d75e:	da 01       	movw	r26, r20
   1d760:	bc 01       	movw	r22, r24
   1d762:	cd 01       	movw	r24, r26
   1d764:	27 e1       	ldi	r18, 0x17	; 23
   1d766:	37 eb       	ldi	r19, 0xB7	; 183
   1d768:	41 ed       	ldi	r20, 0xD1	; 209
   1d76a:	58 e3       	ldi	r21, 0x38	; 56
   1d76c:	0e 94 fe f3 	call	0x1e7fc	; 0x1e7fc <__gesf2>
   1d770:	18 16       	cp	r1, r24
   1d772:	0c f4       	brge	.+2      	; 0x1d776 <utl_matEigsF+0x290>
   1d774:	3e cf       	rjmp	.-388    	; 0x1d5f2 <utl_matEigsF+0x10c>
   1d776:	c5 54       	subi	r28, 0x45	; 69
   1d778:	df 4f       	sbci	r29, 0xFF	; 255
   1d77a:	e8 81       	ld	r30, Y
   1d77c:	f9 81       	ldd	r31, Y+1	; 0x01
   1d77e:	cb 5b       	subi	r28, 0xBB	; 187
   1d780:	d0 40       	sbci	r29, 0x00	; 0
   1d782:	c7 55       	subi	r28, 0x57	; 87
   1d784:	df 4f       	sbci	r29, 0xFF	; 255
   1d786:	28 81       	ld	r18, Y
   1d788:	39 81       	ldd	r19, Y+1	; 0x01
   1d78a:	c9 5a       	subi	r28, 0xA9	; 169
   1d78c:	d0 40       	sbci	r29, 0x00	; 0
   1d78e:	e2 0f       	add	r30, r18
   1d790:	f3 1f       	adc	r31, r19
   1d792:	34 97       	sbiw	r30, 0x04	; 4
   1d794:	29 2d       	mov	r18, r9
   1d796:	38 2d       	mov	r19, r8
   1d798:	43 2d       	mov	r20, r3
   1d79a:	52 2d       	mov	r21, r2
   1d79c:	c9 01       	movw	r24, r18
   1d79e:	da 01       	movw	r26, r20
   1d7a0:	80 83       	st	Z, r24
   1d7a2:	91 83       	std	Z+1, r25	; 0x01
   1d7a4:	a2 83       	std	Z+2, r26	; 0x02
   1d7a6:	b3 83       	std	Z+3, r27	; 0x03
   1d7a8:	ce 01       	movw	r24, r28
   1d7aa:	01 96       	adiw	r24, 0x01	; 1
   1d7ac:	b3 01       	movw	r22, r6
   1d7ae:	a2 01       	movw	r20, r4
   1d7b0:	0e 94 e2 e8 	call	0x1d1c4	; 0x1d1c4 <utl_normF>
   1d7b4:	20 e0       	ldi	r18, 0x00	; 0
   1d7b6:	30 e0       	ldi	r19, 0x00	; 0
   1d7b8:	40 e0       	ldi	r20, 0x00	; 0
   1d7ba:	50 e0       	ldi	r21, 0x00	; 0
   1d7bc:	ba 01       	movw	r22, r20
   1d7be:	c3 54       	subi	r28, 0x43	; 67
   1d7c0:	df 4f       	sbci	r29, 0xFF	; 255
   1d7c2:	88 81       	ld	r24, Y
   1d7c4:	99 81       	ldd	r25, Y+1	; 0x01
   1d7c6:	cd 5b       	subi	r28, 0xBD	; 189
   1d7c8:	d0 40       	sbci	r29, 0x00	; 0
   1d7ca:	c7 55       	subi	r28, 0x57	; 87
   1d7cc:	df 4f       	sbci	r29, 0xFF	; 255
   1d7ce:	a8 81       	ld	r26, Y
   1d7d0:	b9 81       	ldd	r27, Y+1	; 0x01
   1d7d2:	c9 5a       	subi	r28, 0xA9	; 169
   1d7d4:	d0 40       	sbci	r29, 0x00	; 0
   1d7d6:	8a 0f       	add	r24, r26
   1d7d8:	9b 1f       	adc	r25, r27
   1d7da:	c7 54       	subi	r28, 0x47	; 71
   1d7dc:	df 4f       	sbci	r29, 0xFF	; 255
   1d7de:	a8 81       	ld	r26, Y
   1d7e0:	b9 81       	ldd	r27, Y+1	; 0x01
   1d7e2:	c9 5b       	subi	r28, 0xB9	; 185
   1d7e4:	d0 40       	sbci	r29, 0x00	; 0
   1d7e6:	cd 90       	ld	r12, X+
   1d7e8:	dd 90       	ld	r13, X+
   1d7ea:	ed 90       	ld	r14, X+
   1d7ec:	fd 90       	ld	r15, X+
   1d7ee:	fc 01       	movw	r30, r24
   1d7f0:	e2 0f       	add	r30, r18
   1d7f2:	f3 1f       	adc	r31, r19
   1d7f4:	34 97       	sbiw	r30, 0x04	; 4
   1d7f6:	c0 82       	st	Z, r12
   1d7f8:	d1 82       	std	Z+1, r13	; 0x01
   1d7fa:	e2 82       	std	Z+2, r14	; 0x02
   1d7fc:	f3 82       	std	Z+3, r15	; 0x03
   1d7fe:	4f 5f       	subi	r20, 0xFF	; 255
   1d800:	5f 4f       	sbci	r21, 0xFF	; 255
   1d802:	6f 4f       	sbci	r22, 0xFF	; 255
   1d804:	7f 4f       	sbci	r23, 0xFF	; 255
   1d806:	cf 54       	subi	r28, 0x4F	; 79
   1d808:	df 4f       	sbci	r29, 0xFF	; 255
   1d80a:	e8 81       	ld	r30, Y
   1d80c:	f9 81       	ldd	r31, Y+1	; 0x01
   1d80e:	c1 5b       	subi	r28, 0xB1	; 177
   1d810:	d0 40       	sbci	r29, 0x00	; 0
   1d812:	2e 0f       	add	r18, r30
   1d814:	3f 1f       	adc	r19, r31
   1d816:	44 15       	cp	r20, r4
   1d818:	55 05       	cpc	r21, r5
   1d81a:	66 05       	cpc	r22, r6
   1d81c:	77 05       	cpc	r23, r7
   1d81e:	1c f3       	brlt	.-58     	; 0x1d7e6 <utl_matEigsF+0x300>
   1d820:	00 d0       	rcall	.+0      	; 0x1d822 <utl_matEigsF+0x33c>
   1d822:	00 d0       	rcall	.+0      	; 0x1d824 <utl_matEigsF+0x33e>
   1d824:	ad b7       	in	r26, 0x3d	; 61
   1d826:	be b7       	in	r27, 0x3e	; 62
   1d828:	11 96       	adiw	r26, 0x01	; 1
   1d82a:	4d 92       	st	X+, r4
   1d82c:	5d 92       	st	X+, r5
   1d82e:	6d 92       	st	X+, r6
   1d830:	7c 92       	st	X, r7
   1d832:	14 97       	sbiw	r26, 0x04	; 4
   1d834:	e9 e1       	ldi	r30, 0x19	; 25
   1d836:	f0 e0       	ldi	r31, 0x00	; 0
   1d838:	ec 0f       	add	r30, r28
   1d83a:	fd 1f       	adc	r31, r29
   1d83c:	15 96       	adiw	r26, 0x05	; 5
   1d83e:	ed 93       	st	X+, r30
   1d840:	fc 93       	st	X, r31
   1d842:	16 97       	sbiw	r26, 0x06	; 6
   1d844:	ce 01       	movw	r24, r28
   1d846:	01 96       	adiw	r24, 0x01	; 1
   1d848:	b3 01       	movw	r22, r6
   1d84a:	a2 01       	movw	r20, r4
   1d84c:	01 e0       	ldi	r16, 0x01	; 1
   1d84e:	10 e0       	ldi	r17, 0x00	; 0
   1d850:	20 e0       	ldi	r18, 0x00	; 0
   1d852:	30 e0       	ldi	r19, 0x00	; 0
   1d854:	7c 01       	movw	r14, r24
   1d856:	aa 24       	eor	r10, r10
   1d858:	bb 24       	eor	r11, r11
   1d85a:	65 01       	movw	r12, r10
   1d85c:	a3 94       	inc	r10
   1d85e:	0e 94 38 e2 	call	0x1c470	; 0x1c470 <utl_matMultF>
   1d862:	2d b7       	in	r18, 0x3d	; 61
   1d864:	3e b7       	in	r19, 0x3e	; 62
   1d866:	2a 5f       	subi	r18, 0xFA	; 250
   1d868:	3f 4f       	sbci	r19, 0xFF	; 255
   1d86a:	2d bf       	out	0x3d, r18	; 61
   1d86c:	3e bf       	out	0x3e, r19	; 62
   1d86e:	ce 01       	movw	r24, r28
   1d870:	49 96       	adiw	r24, 0x19	; 25
   1d872:	b3 01       	movw	r22, r6
   1d874:	a2 01       	movw	r20, r4
   1d876:	93 01       	movw	r18, r6
   1d878:	82 01       	movw	r16, r4
   1d87a:	e9 2d       	mov	r30, r9
   1d87c:	f8 2d       	mov	r31, r8
   1d87e:	a3 2d       	mov	r26, r3
   1d880:	b2 2d       	mov	r27, r2
   1d882:	6f 01       	movw	r12, r30
   1d884:	7d 01       	movw	r14, r26
   1d886:	0e 94 67 e9 	call	0x1d2ce	; 0x1d2ce <utl_matScalerMultF>
   1d88a:	c1 55       	subi	r28, 0x51	; 81
   1d88c:	df 4f       	sbci	r29, 0xFF	; 255
   1d88e:	88 81       	ld	r24, Y
   1d890:	99 81       	ldd	r25, Y+1	; 0x01
   1d892:	cf 5a       	subi	r28, 0xAF	; 175
   1d894:	d0 40       	sbci	r29, 0x00	; 0
   1d896:	be 01       	movw	r22, r28
   1d898:	67 5e       	subi	r22, 0xE7	; 231
   1d89a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d89c:	a3 01       	movw	r20, r6
   1d89e:	92 01       	movw	r18, r4
   1d8a0:	83 01       	movw	r16, r6
   1d8a2:	72 01       	movw	r14, r4
   1d8a4:	6c 01       	movw	r12, r24
   1d8a6:	0e 94 de e9 	call	0x1d3bc	; 0x1d3bc <utl_matSubF>
   1d8aa:	c5 55       	subi	r28, 0x55	; 85
   1d8ac:	df 4f       	sbci	r29, 0xFF	; 255
   1d8ae:	88 81       	ld	r24, Y
   1d8b0:	99 81       	ldd	r25, Y+1	; 0x01
   1d8b2:	aa 81       	ldd	r26, Y+2	; 0x02
   1d8b4:	bb 81       	ldd	r27, Y+3	; 0x03
   1d8b6:	cb 5a       	subi	r28, 0xAB	; 171
   1d8b8:	d0 40       	sbci	r29, 0x00	; 0
   1d8ba:	01 96       	adiw	r24, 0x01	; 1
   1d8bc:	a1 1d       	adc	r26, r1
   1d8be:	b1 1d       	adc	r27, r1
   1d8c0:	c5 55       	subi	r28, 0x55	; 85
   1d8c2:	df 4f       	sbci	r29, 0xFF	; 255
   1d8c4:	88 83       	st	Y, r24
   1d8c6:	99 83       	std	Y+1, r25	; 0x01
   1d8c8:	aa 83       	std	Y+2, r26	; 0x02
   1d8ca:	bb 83       	std	Y+3, r27	; 0x03
   1d8cc:	cb 5a       	subi	r28, 0xAB	; 171
   1d8ce:	d0 40       	sbci	r29, 0x00	; 0
   1d8d0:	c7 55       	subi	r28, 0x57	; 87
   1d8d2:	df 4f       	sbci	r29, 0xFF	; 255
   1d8d4:	a8 81       	ld	r26, Y
   1d8d6:	b9 81       	ldd	r27, Y+1	; 0x01
   1d8d8:	c9 5a       	subi	r28, 0xA9	; 169
   1d8da:	d0 40       	sbci	r29, 0x00	; 0
   1d8dc:	14 97       	sbiw	r26, 0x04	; 4
   1d8de:	c7 55       	subi	r28, 0x57	; 87
   1d8e0:	df 4f       	sbci	r29, 0xFF	; 255
   1d8e2:	a8 83       	st	Y, r26
   1d8e4:	b9 83       	std	Y+1, r27	; 0x01
   1d8e6:	c9 5a       	subi	r28, 0xA9	; 169
   1d8e8:	d0 40       	sbci	r29, 0x00	; 0
   1d8ea:	c5 55       	subi	r28, 0x55	; 85
   1d8ec:	df 4f       	sbci	r29, 0xFF	; 255
   1d8ee:	28 81       	ld	r18, Y
   1d8f0:	39 81       	ldd	r19, Y+1	; 0x01
   1d8f2:	4a 81       	ldd	r20, Y+2	; 0x02
   1d8f4:	5b 81       	ldd	r21, Y+3	; 0x03
   1d8f6:	cb 5a       	subi	r28, 0xAB	; 171
   1d8f8:	d0 40       	sbci	r29, 0x00	; 0
   1d8fa:	24 15       	cp	r18, r4
   1d8fc:	35 05       	cpc	r19, r5
   1d8fe:	46 05       	cpc	r20, r6
   1d900:	57 05       	cpc	r21, r7
   1d902:	84 f4       	brge	.+32     	; 0x1d924 <utl_matEigsF+0x43e>
   1d904:	ae 01       	movw	r20, r28
   1d906:	4f 5f       	subi	r20, 0xFF	; 255
   1d908:	5f 4f       	sbci	r21, 0xFF	; 255
   1d90a:	c7 54       	subi	r28, 0x47	; 71
   1d90c:	df 4f       	sbci	r29, 0xFF	; 255
   1d90e:	48 83       	st	Y, r20
   1d910:	59 83       	std	Y+1, r21	; 0x01
   1d912:	c9 5b       	subi	r28, 0xB9	; 185
   1d914:	d0 40       	sbci	r29, 0x00	; 0
   1d916:	fa 01       	movw	r30, r20
   1d918:	80 e0       	ldi	r24, 0x00	; 0
   1d91a:	90 e0       	ldi	r25, 0x00	; 0
   1d91c:	dc 01       	movw	r26, r24
   1d91e:	3e ce       	rjmp	.-900    	; 0x1d59c <utl_matEigsF+0xb6>
   1d920:	80 e0       	ldi	r24, 0x00	; 0
   1d922:	01 c0       	rjmp	.+2      	; 0x1d926 <utl_matEigsF+0x440>
   1d924:	81 e0       	ldi	r24, 0x01	; 1
   1d926:	c2 54       	subi	r28, 0x42	; 66
   1d928:	df 4f       	sbci	r29, 0xFF	; 255
   1d92a:	cd bf       	out	0x3d, r28	; 61
   1d92c:	de bf       	out	0x3e, r29	; 62
   1d92e:	df 91       	pop	r29
   1d930:	cf 91       	pop	r28
   1d932:	1f 91       	pop	r17
   1d934:	0f 91       	pop	r16
   1d936:	ff 90       	pop	r15
   1d938:	ef 90       	pop	r14
   1d93a:	df 90       	pop	r13
   1d93c:	cf 90       	pop	r12
   1d93e:	bf 90       	pop	r11
   1d940:	af 90       	pop	r10
   1d942:	9f 90       	pop	r9
   1d944:	8f 90       	pop	r8
   1d946:	7f 90       	pop	r7
   1d948:	6f 90       	pop	r6
   1d94a:	5f 90       	pop	r5
   1d94c:	4f 90       	pop	r4
   1d94e:	3f 90       	pop	r3
   1d950:	2f 90       	pop	r2
   1d952:	08 95       	ret

0001d954 <utl_stMnChangeState>:
   1d954:	cf 92       	push	r12
   1d956:	df 92       	push	r13
   1d958:	ef 92       	push	r14
   1d95a:	ff 92       	push	r15
   1d95c:	cf 93       	push	r28
   1d95e:	df 93       	push	r29
   1d960:	0f 92       	push	r0
   1d962:	0f 92       	push	r0
   1d964:	cd b7       	in	r28, 0x3d	; 61
   1d966:	de b7       	in	r29, 0x3e	; 62
   1d968:	89 83       	std	Y+1, r24	; 0x01
   1d96a:	9a 83       	std	Y+2, r25	; 0x02
   1d96c:	69 01       	movw	r12, r18
   1d96e:	7a 01       	movw	r14, r20
   1d970:	e9 81       	ldd	r30, Y+1	; 0x01
   1d972:	fa 81       	ldd	r31, Y+2	; 0x02
   1d974:	80 91 57 23 	lds	r24, 0x2357
   1d978:	90 91 58 23 	lds	r25, 0x2358
   1d97c:	24 81       	ldd	r18, Z+4	; 0x04
   1d97e:	35 81       	ldd	r19, Z+5	; 0x05
   1d980:	28 17       	cp	r18, r24
   1d982:	39 07       	cpc	r19, r25
   1d984:	29 f5       	brne	.+74     	; 0x1d9d0 <utl_stMnChangeState+0x7c>
   1d986:	e9 81       	ldd	r30, Y+1	; 0x01
   1d988:	fa 81       	ldd	r31, Y+2	; 0x02
   1d98a:	a0 81       	ld	r26, Z
   1d98c:	b1 81       	ldd	r27, Z+1	; 0x01
   1d98e:	11 96       	adiw	r26, 0x01	; 1
   1d990:	9c 91       	ld	r25, X
   1d992:	11 97       	sbiw	r26, 0x01	; 1
   1d994:	13 96       	adiw	r26, 0x03	; 3
   1d996:	8c 91       	ld	r24, X
   1d998:	13 97       	sbiw	r26, 0x03	; 3
   1d99a:	98 9f       	mul	r25, r24
   1d99c:	c0 01       	movw	r24, r0
   1d99e:	11 24       	eor	r1, r1
   1d9a0:	26 2f       	mov	r18, r22
   1d9a2:	33 27       	eor	r19, r19
   1d9a4:	27 fd       	sbrc	r18, 7
   1d9a6:	30 95       	com	r19
   1d9a8:	1a 96       	adiw	r26, 0x0a	; 10
   1d9aa:	ed 91       	ld	r30, X+
   1d9ac:	fc 91       	ld	r31, X
   1d9ae:	1b 97       	sbiw	r26, 0x0b	; 11
   1d9b0:	e8 0f       	add	r30, r24
   1d9b2:	f9 1f       	adc	r31, r25
   1d9b4:	e2 0f       	add	r30, r18
   1d9b6:	f3 1f       	adc	r31, r19
   1d9b8:	80 81       	ld	r24, Z
   1d9ba:	88 23       	and	r24, r24
   1d9bc:	59 f0       	breq	.+22     	; 0x1d9d4 <utl_stMnChangeState+0x80>
   1d9be:	6c 93       	st	X, r22
   1d9c0:	14 96       	adiw	r26, 0x04	; 4
   1d9c2:	cd 92       	st	X+, r12
   1d9c4:	dd 92       	st	X+, r13
   1d9c6:	ed 92       	st	X+, r14
   1d9c8:	fc 92       	st	X, r15
   1d9ca:	17 97       	sbiw	r26, 0x07	; 7
   1d9cc:	80 e0       	ldi	r24, 0x00	; 0
   1d9ce:	03 c0       	rjmp	.+6      	; 0x1d9d6 <utl_stMnChangeState+0x82>
   1d9d0:	8e ef       	ldi	r24, 0xFE	; 254
   1d9d2:	01 c0       	rjmp	.+2      	; 0x1d9d6 <utl_stMnChangeState+0x82>
   1d9d4:	8d ef       	ldi	r24, 0xFD	; 253
   1d9d6:	0f 90       	pop	r0
   1d9d8:	0f 90       	pop	r0
   1d9da:	df 91       	pop	r29
   1d9dc:	cf 91       	pop	r28
   1d9de:	ff 90       	pop	r15
   1d9e0:	ef 90       	pop	r14
   1d9e2:	df 90       	pop	r13
   1d9e4:	cf 90       	pop	r12
   1d9e6:	08 95       	ret

0001d9e8 <utl_stMnEngine>:
   1d9e8:	cf 93       	push	r28
   1d9ea:	df 93       	push	r29
   1d9ec:	0f 92       	push	r0
   1d9ee:	0f 92       	push	r0
   1d9f0:	cd b7       	in	r28, 0x3d	; 61
   1d9f2:	de b7       	in	r29, 0x3e	; 62
   1d9f4:	89 83       	std	Y+1, r24	; 0x01
   1d9f6:	9a 83       	std	Y+2, r25	; 0x02
   1d9f8:	e9 81       	ldd	r30, Y+1	; 0x01
   1d9fa:	fa 81       	ldd	r31, Y+2	; 0x02
   1d9fc:	80 91 57 23 	lds	r24, 0x2357
   1da00:	90 91 58 23 	lds	r25, 0x2358
   1da04:	24 81       	ldd	r18, Z+4	; 0x04
   1da06:	35 81       	ldd	r19, Z+5	; 0x05
   1da08:	28 17       	cp	r18, r24
   1da0a:	39 07       	cpc	r19, r25
   1da0c:	c9 f4       	brne	.+50     	; 0x1da40 <utl_stMnEngine+0x58>
   1da0e:	e9 81       	ldd	r30, Y+1	; 0x01
   1da10:	fa 81       	ldd	r31, Y+2	; 0x02
   1da12:	01 90       	ld	r0, Z+
   1da14:	f0 81       	ld	r31, Z
   1da16:	e0 2d       	mov	r30, r0
   1da18:	41 81       	ldd	r20, Z+1	; 0x01
   1da1a:	42 83       	std	Z+2, r20	; 0x02
   1da1c:	80 81       	ld	r24, Z
   1da1e:	81 83       	std	Z+1, r24	; 0x01
   1da20:	90 e0       	ldi	r25, 0x00	; 0
   1da22:	88 0f       	add	r24, r24
   1da24:	99 1f       	adc	r25, r25
   1da26:	a0 85       	ldd	r26, Z+8	; 0x08
   1da28:	b1 85       	ldd	r27, Z+9	; 0x09
   1da2a:	a8 0f       	add	r26, r24
   1da2c:	b9 1f       	adc	r27, r25
   1da2e:	64 81       	ldd	r22, Z+4	; 0x04
   1da30:	75 81       	ldd	r23, Z+5	; 0x05
   1da32:	86 81       	ldd	r24, Z+6	; 0x06
   1da34:	97 81       	ldd	r25, Z+7	; 0x07
   1da36:	ed 91       	ld	r30, X+
   1da38:	fc 91       	ld	r31, X
   1da3a:	19 95       	eicall
   1da3c:	80 e0       	ldi	r24, 0x00	; 0
   1da3e:	01 c0       	rjmp	.+2      	; 0x1da42 <utl_stMnEngine+0x5a>
   1da40:	8e ef       	ldi	r24, 0xFE	; 254
   1da42:	0f 90       	pop	r0
   1da44:	0f 90       	pop	r0
   1da46:	df 91       	pop	r29
   1da48:	cf 91       	pop	r28
   1da4a:	08 95       	ret

0001da4c <utl_stMnPopFunMap>:
   1da4c:	cf 93       	push	r28
   1da4e:	df 93       	push	r29
   1da50:	00 d0       	rcall	.+0      	; 0x1da52 <utl_stMnPopFunMap+0x6>
   1da52:	cd b7       	in	r28, 0x3d	; 61
   1da54:	de b7       	in	r29, 0x3e	; 62
   1da56:	8a 83       	std	Y+2, r24	; 0x02
   1da58:	9b 83       	std	Y+3, r25	; 0x03
   1da5a:	8f b7       	in	r24, 0x3f	; 63
   1da5c:	89 83       	std	Y+1, r24	; 0x01
   1da5e:	f8 94       	cli
   1da60:	ea 81       	ldd	r30, Y+2	; 0x02
   1da62:	fb 81       	ldd	r31, Y+3	; 0x03
   1da64:	80 91 57 23 	lds	r24, 0x2357
   1da68:	90 91 58 23 	lds	r25, 0x2358
   1da6c:	24 81       	ldd	r18, Z+4	; 0x04
   1da6e:	35 81       	ldd	r19, Z+5	; 0x05
   1da70:	28 17       	cp	r18, r24
   1da72:	39 07       	cpc	r19, r25
   1da74:	21 f0       	breq	.+8      	; 0x1da7e <utl_stMnPopFunMap+0x32>
   1da76:	89 81       	ldd	r24, Y+1	; 0x01
   1da78:	8f bf       	out	0x3f, r24	; 63
   1da7a:	8e ef       	ldi	r24, 0xFE	; 254
   1da7c:	19 c0       	rjmp	.+50     	; 0x1dab0 <utl_stMnPopFunMap+0x64>
   1da7e:	ea 81       	ldd	r30, Y+2	; 0x02
   1da80:	fb 81       	ldd	r31, Y+3	; 0x03
   1da82:	01 90       	ld	r0, Z+
   1da84:	f0 81       	ld	r31, Z
   1da86:	e0 2d       	mov	r30, r0
   1da88:	83 81       	ldd	r24, Z+3	; 0x03
   1da8a:	48 17       	cp	r20, r24
   1da8c:	20 f0       	brcs	.+8      	; 0x1da96 <utl_stMnPopFunMap+0x4a>
   1da8e:	89 81       	ldd	r24, Y+1	; 0x01
   1da90:	8f bf       	out	0x3f, r24	; 63
   1da92:	8c ef       	ldi	r24, 0xFC	; 252
   1da94:	0d c0       	rjmp	.+26     	; 0x1dab0 <utl_stMnPopFunMap+0x64>
   1da96:	50 e0       	ldi	r21, 0x00	; 0
   1da98:	44 0f       	add	r20, r20
   1da9a:	55 1f       	adc	r21, r21
   1da9c:	00 84       	ldd	r0, Z+8	; 0x08
   1da9e:	f1 85       	ldd	r31, Z+9	; 0x09
   1daa0:	e0 2d       	mov	r30, r0
   1daa2:	e4 0f       	add	r30, r20
   1daa4:	f5 1f       	adc	r31, r21
   1daa6:	60 83       	st	Z, r22
   1daa8:	71 83       	std	Z+1, r23	; 0x01
   1daaa:	89 81       	ldd	r24, Y+1	; 0x01
   1daac:	8f bf       	out	0x3f, r24	; 63
   1daae:	80 e0       	ldi	r24, 0x00	; 0
   1dab0:	23 96       	adiw	r28, 0x03	; 3
   1dab2:	cd bf       	out	0x3d, r28	; 61
   1dab4:	de bf       	out	0x3e, r29	; 62
   1dab6:	df 91       	pop	r29
   1dab8:	cf 91       	pop	r28
   1daba:	08 95       	ret

0001dabc <utl_stMnPopTransMap>:
   1dabc:	cf 93       	push	r28
   1dabe:	df 93       	push	r29
   1dac0:	00 d0       	rcall	.+0      	; 0x1dac2 <utl_stMnPopTransMap+0x6>
   1dac2:	cd b7       	in	r28, 0x3d	; 61
   1dac4:	de b7       	in	r29, 0x3e	; 62
   1dac6:	8a 83       	std	Y+2, r24	; 0x02
   1dac8:	9b 83       	std	Y+3, r25	; 0x03
   1daca:	8f b7       	in	r24, 0x3f	; 63
   1dacc:	89 83       	std	Y+1, r24	; 0x01
   1dace:	f8 94       	cli
   1dad0:	ea 81       	ldd	r30, Y+2	; 0x02
   1dad2:	fb 81       	ldd	r31, Y+3	; 0x03
   1dad4:	80 91 57 23 	lds	r24, 0x2357
   1dad8:	90 91 58 23 	lds	r25, 0x2358
   1dadc:	24 81       	ldd	r18, Z+4	; 0x04
   1dade:	35 81       	ldd	r19, Z+5	; 0x05
   1dae0:	28 17       	cp	r18, r24
   1dae2:	39 07       	cpc	r19, r25
   1dae4:	21 f0       	breq	.+8      	; 0x1daee <utl_stMnPopTransMap+0x32>
   1dae6:	89 81       	ldd	r24, Y+1	; 0x01
   1dae8:	8f bf       	out	0x3f, r24	; 63
   1daea:	8e ef       	ldi	r24, 0xFE	; 254
   1daec:	27 c0       	rjmp	.+78     	; 0x1db3c <utl_stMnPopTransMap+0x80>
   1daee:	ea 81       	ldd	r30, Y+2	; 0x02
   1daf0:	fb 81       	ldd	r31, Y+3	; 0x03
   1daf2:	a0 81       	ld	r26, Z
   1daf4:	b1 81       	ldd	r27, Z+1	; 0x01
   1daf6:	20 e0       	ldi	r18, 0x00	; 0
   1daf8:	19 c0       	rjmp	.+50     	; 0x1db2c <utl_stMnPopTransMap+0x70>
   1dafa:	28 9f       	mul	r18, r24
   1dafc:	c0 01       	movw	r24, r0
   1dafe:	11 24       	eor	r1, r1
   1db00:	83 0f       	add	r24, r19
   1db02:	91 1d       	adc	r25, r1
   1db04:	fb 01       	movw	r30, r22
   1db06:	e8 0f       	add	r30, r24
   1db08:	f9 1f       	adc	r31, r25
   1db0a:	40 81       	ld	r20, Z
   1db0c:	1a 96       	adiw	r26, 0x0a	; 10
   1db0e:	ed 91       	ld	r30, X+
   1db10:	fc 91       	ld	r31, X
   1db12:	1b 97       	sbiw	r26, 0x0b	; 11
   1db14:	e8 0f       	add	r30, r24
   1db16:	f9 1f       	adc	r31, r25
   1db18:	40 83       	st	Z, r20
   1db1a:	3f 5f       	subi	r19, 0xFF	; 255
   1db1c:	01 c0       	rjmp	.+2      	; 0x1db20 <utl_stMnPopTransMap+0x64>
   1db1e:	30 e0       	ldi	r19, 0x00	; 0
   1db20:	13 96       	adiw	r26, 0x03	; 3
   1db22:	8c 91       	ld	r24, X
   1db24:	13 97       	sbiw	r26, 0x03	; 3
   1db26:	38 17       	cp	r19, r24
   1db28:	40 f3       	brcs	.-48     	; 0x1dafa <utl_stMnPopTransMap+0x3e>
   1db2a:	2f 5f       	subi	r18, 0xFF	; 255
   1db2c:	13 96       	adiw	r26, 0x03	; 3
   1db2e:	8c 91       	ld	r24, X
   1db30:	13 97       	sbiw	r26, 0x03	; 3
   1db32:	28 17       	cp	r18, r24
   1db34:	a0 f3       	brcs	.-24     	; 0x1db1e <utl_stMnPopTransMap+0x62>
   1db36:	89 81       	ldd	r24, Y+1	; 0x01
   1db38:	8f bf       	out	0x3f, r24	; 63
   1db3a:	80 e0       	ldi	r24, 0x00	; 0
   1db3c:	23 96       	adiw	r28, 0x03	; 3
   1db3e:	cd bf       	out	0x3d, r28	; 61
   1db40:	de bf       	out	0x3e, r29	; 62
   1db42:	df 91       	pop	r29
   1db44:	cf 91       	pop	r28
   1db46:	08 95       	ret

0001db48 <utl_requestStMnObject>:
   1db48:	ef 92       	push	r14
   1db4a:	ff 92       	push	r15
   1db4c:	0f 93       	push	r16
   1db4e:	1f 93       	push	r17
   1db50:	cf 93       	push	r28
   1db52:	df 93       	push	r29
   1db54:	cd b7       	in	r28, 0x3d	; 61
   1db56:	de b7       	in	r29, 0x3e	; 62
   1db58:	25 97       	sbiw	r28, 0x05	; 5
   1db5a:	cd bf       	out	0x3d, r28	; 61
   1db5c:	de bf       	out	0x3e, r29	; 62
   1db5e:	18 2f       	mov	r17, r24
   1db60:	06 2f       	mov	r16, r22
   1db62:	8f b7       	in	r24, 0x3f	; 63
   1db64:	89 83       	std	Y+1, r24	; 0x01
   1db66:	f8 94       	cli
   1db68:	61 17       	cp	r22, r17
   1db6a:	28 f0       	brcs	.+10     	; 0x1db76 <utl_requestStMnObject+0x2e>
   1db6c:	89 81       	ldd	r24, Y+1	; 0x01
   1db6e:	8f bf       	out	0x3f, r24	; 63
   1db70:	8c ef       	ldi	r24, 0xFC	; 252
   1db72:	9f ef       	ldi	r25, 0xFF	; 255
   1db74:	4e c0       	rjmp	.+156    	; 0x1dc12 <utl_requestStMnObject+0xca>
   1db76:	e1 2e       	mov	r14, r17
   1db78:	ff 24       	eor	r15, r15
   1db7a:	97 01       	movw	r18, r14
   1db7c:	22 0f       	add	r18, r18
   1db7e:	33 1f       	adc	r19, r19
   1db80:	24 5f       	subi	r18, 0xF4	; 244
   1db82:	3f 4f       	sbci	r19, 0xFF	; 255
   1db84:	11 9f       	mul	r17, r17
   1db86:	c0 01       	movw	r24, r0
   1db88:	11 24       	eor	r1, r1
   1db8a:	82 0f       	add	r24, r18
   1db8c:	93 1f       	adc	r25, r19
   1db8e:	0e 94 80 d9 	call	0x1b300	; 0x1b300 <utl_createLink>
   1db92:	8a 83       	std	Y+2, r24	; 0x02
   1db94:	9b 83       	std	Y+3, r25	; 0x03
   1db96:	8a 81       	ldd	r24, Y+2	; 0x02
   1db98:	9b 81       	ldd	r25, Y+3	; 0x03
   1db9a:	97 fd       	sbrc	r25, 7
   1db9c:	0c c0       	rjmp	.+24     	; 0x1dbb6 <utl_requestStMnObject+0x6e>
   1db9e:	80 91 57 23 	lds	r24, 0x2357
   1dba2:	90 91 58 23 	lds	r25, 0x2358
   1dba6:	6a 81       	ldd	r22, Y+2	; 0x02
   1dba8:	7b 81       	ldd	r23, Y+3	; 0x03
   1dbaa:	41 e0       	ldi	r20, 0x01	; 1
   1dbac:	0e 94 e4 d9 	call	0x1b3c8	; 0x1b3c8 <utl_insertLink>
   1dbb0:	8a 81       	ldd	r24, Y+2	; 0x02
   1dbb2:	9b 81       	ldd	r25, Y+3	; 0x03
   1dbb4:	02 c0       	rjmp	.+4      	; 0x1dbba <utl_requestStMnObject+0x72>
   1dbb6:	8f ef       	ldi	r24, 0xFF	; 255
   1dbb8:	9f ef       	ldi	r25, 0xFF	; 255
   1dbba:	8c 83       	std	Y+4, r24	; 0x04
   1dbbc:	9d 83       	std	Y+5, r25	; 0x05
   1dbbe:	8c 81       	ldd	r24, Y+4	; 0x04
   1dbc0:	9d 81       	ldd	r25, Y+5	; 0x05
   1dbc2:	97 ff       	sbrs	r25, 7
   1dbc4:	05 c0       	rjmp	.+10     	; 0x1dbd0 <utl_requestStMnObject+0x88>
   1dbc6:	89 81       	ldd	r24, Y+1	; 0x01
   1dbc8:	8f bf       	out	0x3f, r24	; 63
   1dbca:	8f ef       	ldi	r24, 0xFF	; 255
   1dbcc:	9f ef       	ldi	r25, 0xFF	; 255
   1dbce:	21 c0       	rjmp	.+66     	; 0x1dc12 <utl_requestStMnObject+0xca>
   1dbd0:	ec 81       	ldd	r30, Y+4	; 0x04
   1dbd2:	fd 81       	ldd	r31, Y+5	; 0x05
   1dbd4:	01 90       	ld	r0, Z+
   1dbd6:	f0 81       	ld	r31, Z
   1dbd8:	e0 2d       	mov	r30, r0
   1dbda:	8c e0       	ldi	r24, 0x0C	; 12
   1dbdc:	df 01       	movw	r26, r30
   1dbde:	1d 92       	st	X+, r1
   1dbe0:	8a 95       	dec	r24
   1dbe2:	e9 f7       	brne	.-6      	; 0x1dbde <utl_requestStMnObject+0x96>
   1dbe4:	cf 01       	movw	r24, r30
   1dbe6:	0c 96       	adiw	r24, 0x0c	; 12
   1dbe8:	80 87       	std	Z+8, r24	; 0x08
   1dbea:	91 87       	std	Z+9, r25	; 0x09
   1dbec:	cf 01       	movw	r24, r30
   1dbee:	08 96       	adiw	r24, 0x08	; 8
   1dbf0:	97 01       	movw	r18, r14
   1dbf2:	2e 5f       	subi	r18, 0xFE	; 254
   1dbf4:	3f 4f       	sbci	r19, 0xFF	; 255
   1dbf6:	22 0f       	add	r18, r18
   1dbf8:	33 1f       	adc	r19, r19
   1dbfa:	82 0f       	add	r24, r18
   1dbfc:	93 1f       	adc	r25, r19
   1dbfe:	82 87       	std	Z+10, r24	; 0x0a
   1dc00:	93 87       	std	Z+11, r25	; 0x0b
   1dc02:	13 83       	std	Z+3, r17	; 0x03
   1dc04:	00 83       	st	Z, r16
   1dc06:	11 83       	std	Z+1, r17	; 0x01
   1dc08:	12 83       	std	Z+2, r17	; 0x02
   1dc0a:	89 81       	ldd	r24, Y+1	; 0x01
   1dc0c:	8f bf       	out	0x3f, r24	; 63
   1dc0e:	8c 81       	ldd	r24, Y+4	; 0x04
   1dc10:	9d 81       	ldd	r25, Y+5	; 0x05
   1dc12:	25 96       	adiw	r28, 0x05	; 5
   1dc14:	cd bf       	out	0x3d, r28	; 61
   1dc16:	de bf       	out	0x3e, r29	; 62
   1dc18:	df 91       	pop	r29
   1dc1a:	cf 91       	pop	r28
   1dc1c:	1f 91       	pop	r17
   1dc1e:	0f 91       	pop	r16
   1dc20:	ff 90       	pop	r15
   1dc22:	ef 90       	pop	r14
   1dc24:	08 95       	ret

0001dc26 <vfprintf>:
   1dc26:	2f 92       	push	r2
   1dc28:	3f 92       	push	r3
   1dc2a:	4f 92       	push	r4
   1dc2c:	5f 92       	push	r5
   1dc2e:	6f 92       	push	r6
   1dc30:	7f 92       	push	r7
   1dc32:	8f 92       	push	r8
   1dc34:	9f 92       	push	r9
   1dc36:	af 92       	push	r10
   1dc38:	bf 92       	push	r11
   1dc3a:	cf 92       	push	r12
   1dc3c:	df 92       	push	r13
   1dc3e:	ef 92       	push	r14
   1dc40:	ff 92       	push	r15
   1dc42:	0f 93       	push	r16
   1dc44:	1f 93       	push	r17
   1dc46:	cf 93       	push	r28
   1dc48:	df 93       	push	r29
   1dc4a:	cd b7       	in	r28, 0x3d	; 61
   1dc4c:	de b7       	in	r29, 0x3e	; 62
   1dc4e:	65 97       	sbiw	r28, 0x15	; 21
   1dc50:	cd bf       	out	0x3d, r28	; 61
   1dc52:	de bf       	out	0x3e, r29	; 62
   1dc54:	4c 01       	movw	r8, r24
   1dc56:	6e 87       	std	Y+14, r22	; 0x0e
   1dc58:	7f 87       	std	Y+15, r23	; 0x0f
   1dc5a:	fc 01       	movw	r30, r24
   1dc5c:	16 82       	std	Z+6, r1	; 0x06
   1dc5e:	17 82       	std	Z+7, r1	; 0x07
   1dc60:	83 81       	ldd	r24, Z+3	; 0x03
   1dc62:	81 fd       	sbrc	r24, 1
   1dc64:	04 c0       	rjmp	.+8      	; 0x1dc6e <vfprintf+0x48>
   1dc66:	76 c3       	rjmp	.+1772   	; 0x1e354 <vfprintf+0x72e>
   1dc68:	4c 85       	ldd	r20, Y+12	; 0x0c
   1dc6a:	5d 85       	ldd	r21, Y+13	; 0x0d
   1dc6c:	04 c0       	rjmp	.+8      	; 0x1dc76 <vfprintf+0x50>
   1dc6e:	1e 01       	movw	r2, r28
   1dc70:	08 94       	sec
   1dc72:	21 1c       	adc	r2, r1
   1dc74:	31 1c       	adc	r3, r1
   1dc76:	f4 01       	movw	r30, r8
   1dc78:	93 81       	ldd	r25, Z+3	; 0x03
   1dc7a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1dc7c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1dc7e:	93 fd       	sbrc	r25, 3
   1dc80:	85 91       	lpm	r24, Z+
   1dc82:	93 ff       	sbrs	r25, 3
   1dc84:	81 91       	ld	r24, Z+
   1dc86:	ee 87       	std	Y+14, r30	; 0x0e
   1dc88:	ff 87       	std	Y+15, r31	; 0x0f
   1dc8a:	88 23       	and	r24, r24
   1dc8c:	09 f4       	brne	.+2      	; 0x1dc90 <vfprintf+0x6a>
   1dc8e:	5e c3       	rjmp	.+1724   	; 0x1e34c <vfprintf+0x726>
   1dc90:	85 32       	cpi	r24, 0x25	; 37
   1dc92:	41 f4       	brne	.+16     	; 0x1dca4 <vfprintf+0x7e>
   1dc94:	93 fd       	sbrc	r25, 3
   1dc96:	85 91       	lpm	r24, Z+
   1dc98:	93 ff       	sbrs	r25, 3
   1dc9a:	81 91       	ld	r24, Z+
   1dc9c:	ee 87       	std	Y+14, r30	; 0x0e
   1dc9e:	ff 87       	std	Y+15, r31	; 0x0f
   1dca0:	85 32       	cpi	r24, 0x25	; 37
   1dca2:	59 f4       	brne	.+22     	; 0x1dcba <vfprintf+0x94>
   1dca4:	90 e0       	ldi	r25, 0x00	; 0
   1dca6:	b4 01       	movw	r22, r8
   1dca8:	4c 8b       	std	Y+20, r20	; 0x14
   1dcaa:	5d 8b       	std	Y+21, r21	; 0x15
   1dcac:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1dcb0:	4c 89       	ldd	r20, Y+20	; 0x14
   1dcb2:	5d 89       	ldd	r21, Y+21	; 0x15
   1dcb4:	4c 87       	std	Y+12, r20	; 0x0c
   1dcb6:	5d 87       	std	Y+13, r21	; 0x0d
   1dcb8:	d7 cf       	rjmp	.-82     	; 0x1dc68 <vfprintf+0x42>
   1dcba:	ff 24       	eor	r15, r15
   1dcbc:	dd 24       	eor	r13, r13
   1dcbe:	10 e0       	ldi	r17, 0x00	; 0
   1dcc0:	10 32       	cpi	r17, 0x20	; 32
   1dcc2:	b0 f4       	brcc	.+44     	; 0x1dcf0 <vfprintf+0xca>
   1dcc4:	8b 32       	cpi	r24, 0x2B	; 43
   1dcc6:	69 f0       	breq	.+26     	; 0x1dce2 <vfprintf+0xbc>
   1dcc8:	8c 32       	cpi	r24, 0x2C	; 44
   1dcca:	28 f4       	brcc	.+10     	; 0x1dcd6 <vfprintf+0xb0>
   1dccc:	80 32       	cpi	r24, 0x20	; 32
   1dcce:	51 f0       	breq	.+20     	; 0x1dce4 <vfprintf+0xbe>
   1dcd0:	83 32       	cpi	r24, 0x23	; 35
   1dcd2:	71 f4       	brne	.+28     	; 0x1dcf0 <vfprintf+0xca>
   1dcd4:	0b c0       	rjmp	.+22     	; 0x1dcec <vfprintf+0xc6>
   1dcd6:	8d 32       	cpi	r24, 0x2D	; 45
   1dcd8:	39 f0       	breq	.+14     	; 0x1dce8 <vfprintf+0xc2>
   1dcda:	80 33       	cpi	r24, 0x30	; 48
   1dcdc:	49 f4       	brne	.+18     	; 0x1dcf0 <vfprintf+0xca>
   1dcde:	11 60       	ori	r17, 0x01	; 1
   1dce0:	2c c0       	rjmp	.+88     	; 0x1dd3a <vfprintf+0x114>
   1dce2:	12 60       	ori	r17, 0x02	; 2
   1dce4:	14 60       	ori	r17, 0x04	; 4
   1dce6:	29 c0       	rjmp	.+82     	; 0x1dd3a <vfprintf+0x114>
   1dce8:	18 60       	ori	r17, 0x08	; 8
   1dcea:	27 c0       	rjmp	.+78     	; 0x1dd3a <vfprintf+0x114>
   1dcec:	10 61       	ori	r17, 0x10	; 16
   1dcee:	25 c0       	rjmp	.+74     	; 0x1dd3a <vfprintf+0x114>
   1dcf0:	17 fd       	sbrc	r17, 7
   1dcf2:	2e c0       	rjmp	.+92     	; 0x1dd50 <vfprintf+0x12a>
   1dcf4:	28 2f       	mov	r18, r24
   1dcf6:	20 53       	subi	r18, 0x30	; 48
   1dcf8:	2a 30       	cpi	r18, 0x0A	; 10
   1dcfa:	98 f4       	brcc	.+38     	; 0x1dd22 <vfprintf+0xfc>
   1dcfc:	16 ff       	sbrs	r17, 6
   1dcfe:	08 c0       	rjmp	.+16     	; 0x1dd10 <vfprintf+0xea>
   1dd00:	8f 2d       	mov	r24, r15
   1dd02:	88 0f       	add	r24, r24
   1dd04:	f8 2e       	mov	r15, r24
   1dd06:	ff 0c       	add	r15, r15
   1dd08:	ff 0c       	add	r15, r15
   1dd0a:	f8 0e       	add	r15, r24
   1dd0c:	f2 0e       	add	r15, r18
   1dd0e:	15 c0       	rjmp	.+42     	; 0x1dd3a <vfprintf+0x114>
   1dd10:	8d 2d       	mov	r24, r13
   1dd12:	88 0f       	add	r24, r24
   1dd14:	d8 2e       	mov	r13, r24
   1dd16:	dd 0c       	add	r13, r13
   1dd18:	dd 0c       	add	r13, r13
   1dd1a:	d8 0e       	add	r13, r24
   1dd1c:	d2 0e       	add	r13, r18
   1dd1e:	10 62       	ori	r17, 0x20	; 32
   1dd20:	0c c0       	rjmp	.+24     	; 0x1dd3a <vfprintf+0x114>
   1dd22:	8e 32       	cpi	r24, 0x2E	; 46
   1dd24:	21 f4       	brne	.+8      	; 0x1dd2e <vfprintf+0x108>
   1dd26:	16 fd       	sbrc	r17, 6
   1dd28:	11 c3       	rjmp	.+1570   	; 0x1e34c <vfprintf+0x726>
   1dd2a:	10 64       	ori	r17, 0x40	; 64
   1dd2c:	06 c0       	rjmp	.+12     	; 0x1dd3a <vfprintf+0x114>
   1dd2e:	8c 36       	cpi	r24, 0x6C	; 108
   1dd30:	11 f4       	brne	.+4      	; 0x1dd36 <vfprintf+0x110>
   1dd32:	10 68       	ori	r17, 0x80	; 128
   1dd34:	02 c0       	rjmp	.+4      	; 0x1dd3a <vfprintf+0x114>
   1dd36:	88 36       	cpi	r24, 0x68	; 104
   1dd38:	59 f4       	brne	.+22     	; 0x1dd50 <vfprintf+0x12a>
   1dd3a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1dd3c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1dd3e:	93 fd       	sbrc	r25, 3
   1dd40:	85 91       	lpm	r24, Z+
   1dd42:	93 ff       	sbrs	r25, 3
   1dd44:	81 91       	ld	r24, Z+
   1dd46:	ee 87       	std	Y+14, r30	; 0x0e
   1dd48:	ff 87       	std	Y+15, r31	; 0x0f
   1dd4a:	88 23       	and	r24, r24
   1dd4c:	09 f0       	breq	.+2      	; 0x1dd50 <vfprintf+0x12a>
   1dd4e:	b8 cf       	rjmp	.-144    	; 0x1dcc0 <vfprintf+0x9a>
   1dd50:	98 2f       	mov	r25, r24
   1dd52:	95 54       	subi	r25, 0x45	; 69
   1dd54:	93 30       	cpi	r25, 0x03	; 3
   1dd56:	18 f4       	brcc	.+6      	; 0x1dd5e <vfprintf+0x138>
   1dd58:	10 61       	ori	r17, 0x10	; 16
   1dd5a:	80 5e       	subi	r24, 0xE0	; 224
   1dd5c:	06 c0       	rjmp	.+12     	; 0x1dd6a <vfprintf+0x144>
   1dd5e:	98 2f       	mov	r25, r24
   1dd60:	95 56       	subi	r25, 0x65	; 101
   1dd62:	93 30       	cpi	r25, 0x03	; 3
   1dd64:	08 f0       	brcs	.+2      	; 0x1dd68 <vfprintf+0x142>
   1dd66:	a2 c1       	rjmp	.+836    	; 0x1e0ac <vfprintf+0x486>
   1dd68:	1f 7e       	andi	r17, 0xEF	; 239
   1dd6a:	16 fd       	sbrc	r17, 6
   1dd6c:	02 c0       	rjmp	.+4      	; 0x1dd72 <vfprintf+0x14c>
   1dd6e:	e6 e0       	ldi	r30, 0x06	; 6
   1dd70:	fe 2e       	mov	r15, r30
   1dd72:	1f 73       	andi	r17, 0x3F	; 63
   1dd74:	85 36       	cpi	r24, 0x65	; 101
   1dd76:	11 f4       	brne	.+4      	; 0x1dd7c <vfprintf+0x156>
   1dd78:	10 64       	ori	r17, 0x40	; 64
   1dd7a:	06 c0       	rjmp	.+12     	; 0x1dd88 <vfprintf+0x162>
   1dd7c:	86 36       	cpi	r24, 0x66	; 102
   1dd7e:	11 f4       	brne	.+4      	; 0x1dd84 <vfprintf+0x15e>
   1dd80:	10 68       	ori	r17, 0x80	; 128
   1dd82:	02 c0       	rjmp	.+4      	; 0x1dd88 <vfprintf+0x162>
   1dd84:	f1 10       	cpse	r15, r1
   1dd86:	fa 94       	dec	r15
   1dd88:	17 ff       	sbrs	r17, 7
   1dd8a:	07 c0       	rjmp	.+14     	; 0x1dd9a <vfprintf+0x174>
   1dd8c:	fb e3       	ldi	r31, 0x3B	; 59
   1dd8e:	ff 15       	cp	r31, r15
   1dd90:	48 f0       	brcs	.+18     	; 0x1dda4 <vfprintf+0x17e>
   1dd92:	ef 2c       	mov	r14, r15
   1dd94:	e3 94       	inc	r14
   1dd96:	27 e0       	ldi	r18, 0x07	; 7
   1dd98:	0d c0       	rjmp	.+26     	; 0x1ddb4 <vfprintf+0x18e>
   1dd9a:	27 e0       	ldi	r18, 0x07	; 7
   1dd9c:	2f 15       	cp	r18, r15
   1dd9e:	30 f0       	brcs	.+12     	; 0x1ddac <vfprintf+0x186>
   1dda0:	2f 2d       	mov	r18, r15
   1dda2:	07 c0       	rjmp	.+14     	; 0x1ddb2 <vfprintf+0x18c>
   1dda4:	27 e0       	ldi	r18, 0x07	; 7
   1dda6:	7c e3       	ldi	r23, 0x3C	; 60
   1dda8:	e7 2e       	mov	r14, r23
   1ddaa:	04 c0       	rjmp	.+8      	; 0x1ddb4 <vfprintf+0x18e>
   1ddac:	27 e0       	ldi	r18, 0x07	; 7
   1ddae:	67 e0       	ldi	r22, 0x07	; 7
   1ddb0:	f6 2e       	mov	r15, r22
   1ddb2:	ee 24       	eor	r14, r14
   1ddb4:	ca 01       	movw	r24, r20
   1ddb6:	04 96       	adiw	r24, 0x04	; 4
   1ddb8:	8c 87       	std	Y+12, r24	; 0x0c
   1ddba:	9d 87       	std	Y+13, r25	; 0x0d
   1ddbc:	fa 01       	movw	r30, r20
   1ddbe:	60 81       	ld	r22, Z
   1ddc0:	71 81       	ldd	r23, Z+1	; 0x01
   1ddc2:	82 81       	ldd	r24, Z+2	; 0x02
   1ddc4:	93 81       	ldd	r25, Z+3	; 0x03
   1ddc6:	a1 01       	movw	r20, r2
   1ddc8:	0e 2d       	mov	r16, r14
   1ddca:	0e 94 0c f6 	call	0x1ec18	; 0x1ec18 <__ftoa_engine>
   1ddce:	5c 01       	movw	r10, r24
   1ddd0:	c9 80       	ldd	r12, Y+1	; 0x01
   1ddd2:	2c 2d       	mov	r18, r12
   1ddd4:	30 e0       	ldi	r19, 0x00	; 0
   1ddd6:	28 8b       	std	Y+16, r18	; 0x10
   1ddd8:	39 8b       	std	Y+17, r19	; 0x11
   1ddda:	c0 fe       	sbrs	r12, 0
   1dddc:	03 c0       	rjmp	.+6      	; 0x1dde4 <vfprintf+0x1be>
   1ddde:	38 89       	ldd	r19, Y+16	; 0x10
   1dde0:	33 ff       	sbrs	r19, 3
   1dde2:	06 c0       	rjmp	.+12     	; 0x1ddf0 <vfprintf+0x1ca>
   1dde4:	11 fd       	sbrc	r17, 1
   1dde6:	06 c0       	rjmp	.+12     	; 0x1ddf4 <vfprintf+0x1ce>
   1dde8:	12 ff       	sbrs	r17, 2
   1ddea:	06 c0       	rjmp	.+12     	; 0x1ddf8 <vfprintf+0x1d2>
   1ddec:	00 e2       	ldi	r16, 0x20	; 32
   1ddee:	05 c0       	rjmp	.+10     	; 0x1ddfa <vfprintf+0x1d4>
   1ddf0:	0d e2       	ldi	r16, 0x2D	; 45
   1ddf2:	03 c0       	rjmp	.+6      	; 0x1ddfa <vfprintf+0x1d4>
   1ddf4:	0b e2       	ldi	r16, 0x2B	; 43
   1ddf6:	01 c0       	rjmp	.+2      	; 0x1ddfa <vfprintf+0x1d4>
   1ddf8:	00 e0       	ldi	r16, 0x00	; 0
   1ddfa:	88 89       	ldd	r24, Y+16	; 0x10
   1ddfc:	99 89       	ldd	r25, Y+17	; 0x11
   1ddfe:	8c 70       	andi	r24, 0x0C	; 12
   1de00:	90 70       	andi	r25, 0x00	; 0
   1de02:	00 97       	sbiw	r24, 0x00	; 0
   1de04:	09 f4       	brne	.+2      	; 0x1de08 <vfprintf+0x1e2>
   1de06:	3c c0       	rjmp	.+120    	; 0x1de80 <vfprintf+0x25a>
   1de08:	00 23       	and	r16, r16
   1de0a:	11 f0       	breq	.+4      	; 0x1de10 <vfprintf+0x1ea>
   1de0c:	84 e0       	ldi	r24, 0x04	; 4
   1de0e:	01 c0       	rjmp	.+2      	; 0x1de12 <vfprintf+0x1ec>
   1de10:	83 e0       	ldi	r24, 0x03	; 3
   1de12:	8d 15       	cp	r24, r13
   1de14:	58 f4       	brcc	.+22     	; 0x1de2c <vfprintf+0x206>
   1de16:	d8 1a       	sub	r13, r24
   1de18:	13 fd       	sbrc	r17, 3
   1de1a:	09 c0       	rjmp	.+18     	; 0x1de2e <vfprintf+0x208>
   1de1c:	80 e2       	ldi	r24, 0x20	; 32
   1de1e:	90 e0       	ldi	r25, 0x00	; 0
   1de20:	b4 01       	movw	r22, r8
   1de22:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1de26:	da 94       	dec	r13
   1de28:	c9 f7       	brne	.-14     	; 0x1de1c <vfprintf+0x1f6>
   1de2a:	01 c0       	rjmp	.+2      	; 0x1de2e <vfprintf+0x208>
   1de2c:	dd 24       	eor	r13, r13
   1de2e:	00 23       	and	r16, r16
   1de30:	29 f0       	breq	.+10     	; 0x1de3c <vfprintf+0x216>
   1de32:	80 2f       	mov	r24, r16
   1de34:	90 e0       	ldi	r25, 0x00	; 0
   1de36:	b4 01       	movw	r22, r8
   1de38:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1de3c:	88 89       	ldd	r24, Y+16	; 0x10
   1de3e:	83 fd       	sbrc	r24, 3
   1de40:	05 c0       	rjmp	.+10     	; 0x1de4c <vfprintf+0x226>
   1de42:	31 e9       	ldi	r19, 0x91	; 145
   1de44:	e3 2e       	mov	r14, r19
   1de46:	3e e0       	ldi	r19, 0x0E	; 14
   1de48:	f3 2e       	mov	r15, r19
   1de4a:	11 c0       	rjmp	.+34     	; 0x1de6e <vfprintf+0x248>
   1de4c:	2d e8       	ldi	r18, 0x8D	; 141
   1de4e:	e2 2e       	mov	r14, r18
   1de50:	2e e0       	ldi	r18, 0x0E	; 14
   1de52:	f2 2e       	mov	r15, r18
   1de54:	0c c0       	rjmp	.+24     	; 0x1de6e <vfprintf+0x248>
   1de56:	01 15       	cp	r16, r1
   1de58:	11 05       	cpc	r17, r1
   1de5a:	09 f0       	breq	.+2      	; 0x1de5e <vfprintf+0x238>
   1de5c:	80 52       	subi	r24, 0x20	; 32
   1de5e:	90 e0       	ldi	r25, 0x00	; 0
   1de60:	b4 01       	movw	r22, r8
   1de62:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1de66:	08 94       	sec
   1de68:	e1 1c       	adc	r14, r1
   1de6a:	f1 1c       	adc	r15, r1
   1de6c:	04 c0       	rjmp	.+8      	; 0x1de76 <vfprintf+0x250>
   1de6e:	01 2f       	mov	r16, r17
   1de70:	10 e0       	ldi	r17, 0x00	; 0
   1de72:	00 71       	andi	r16, 0x10	; 16
   1de74:	10 70       	andi	r17, 0x00	; 0
   1de76:	f7 01       	movw	r30, r14
   1de78:	84 91       	lpm	r24, Z
   1de7a:	88 23       	and	r24, r24
   1de7c:	61 f7       	brne	.-40     	; 0x1de56 <vfprintf+0x230>
   1de7e:	63 c2       	rjmp	.+1222   	; 0x1e346 <vfprintf+0x720>
   1de80:	17 ff       	sbrs	r17, 7
   1de82:	0e c0       	rjmp	.+28     	; 0x1dea0 <vfprintf+0x27a>
   1de84:	ea 0c       	add	r14, r10
   1de86:	f8 89       	ldd	r31, Y+16	; 0x10
   1de88:	f4 ff       	sbrs	r31, 4
   1de8a:	04 c0       	rjmp	.+8      	; 0x1de94 <vfprintf+0x26e>
   1de8c:	8a 81       	ldd	r24, Y+2	; 0x02
   1de8e:	81 33       	cpi	r24, 0x31	; 49
   1de90:	09 f4       	brne	.+2      	; 0x1de94 <vfprintf+0x26e>
   1de92:	ea 94       	dec	r14
   1de94:	1e 14       	cp	r1, r14
   1de96:	4c f5       	brge	.+82     	; 0x1deea <vfprintf+0x2c4>
   1de98:	28 e0       	ldi	r18, 0x08	; 8
   1de9a:	2e 15       	cp	r18, r14
   1de9c:	48 f1       	brcs	.+82     	; 0x1def0 <vfprintf+0x2ca>
   1de9e:	2c c0       	rjmp	.+88     	; 0x1def8 <vfprintf+0x2d2>
   1dea0:	16 fd       	sbrc	r17, 6
   1dea2:	2a c0       	rjmp	.+84     	; 0x1def8 <vfprintf+0x2d2>
   1dea4:	8f 2d       	mov	r24, r15
   1dea6:	90 e0       	ldi	r25, 0x00	; 0
   1dea8:	8a 15       	cp	r24, r10
   1deaa:	9b 05       	cpc	r25, r11
   1deac:	44 f0       	brlt	.+16     	; 0x1debe <vfprintf+0x298>
   1deae:	3c ef       	ldi	r19, 0xFC	; 252
   1deb0:	a3 16       	cp	r10, r19
   1deb2:	3f ef       	ldi	r19, 0xFF	; 255
   1deb4:	b3 06       	cpc	r11, r19
   1deb6:	1c f0       	brlt	.+6      	; 0x1debe <vfprintf+0x298>
   1deb8:	10 68       	ori	r17, 0x80	; 128
   1deba:	01 c0       	rjmp	.+2      	; 0x1debe <vfprintf+0x298>
   1debc:	fa 94       	dec	r15
   1debe:	ff 20       	and	r15, r15
   1dec0:	49 f0       	breq	.+18     	; 0x1ded4 <vfprintf+0x2ae>
   1dec2:	e2 e0       	ldi	r30, 0x02	; 2
   1dec4:	f0 e0       	ldi	r31, 0x00	; 0
   1dec6:	ec 0f       	add	r30, r28
   1dec8:	fd 1f       	adc	r31, r29
   1deca:	ef 0d       	add	r30, r15
   1decc:	f1 1d       	adc	r31, r1
   1dece:	80 81       	ld	r24, Z
   1ded0:	80 33       	cpi	r24, 0x30	; 48
   1ded2:	a1 f3       	breq	.-24     	; 0x1debc <vfprintf+0x296>
   1ded4:	17 ff       	sbrs	r17, 7
   1ded6:	10 c0       	rjmp	.+32     	; 0x1def8 <vfprintf+0x2d2>
   1ded8:	ef 2c       	mov	r14, r15
   1deda:	e3 94       	inc	r14
   1dedc:	8f 2d       	mov	r24, r15
   1dede:	90 e0       	ldi	r25, 0x00	; 0
   1dee0:	a8 16       	cp	r10, r24
   1dee2:	b9 06       	cpc	r11, r25
   1dee4:	44 f4       	brge	.+16     	; 0x1def6 <vfprintf+0x2d0>
   1dee6:	fa 18       	sub	r15, r10
   1dee8:	07 c0       	rjmp	.+14     	; 0x1def8 <vfprintf+0x2d2>
   1deea:	ee 24       	eor	r14, r14
   1deec:	e3 94       	inc	r14
   1deee:	04 c0       	rjmp	.+8      	; 0x1def8 <vfprintf+0x2d2>
   1def0:	98 e0       	ldi	r25, 0x08	; 8
   1def2:	e9 2e       	mov	r14, r25
   1def4:	01 c0       	rjmp	.+2      	; 0x1def8 <vfprintf+0x2d2>
   1def6:	ff 24       	eor	r15, r15
   1def8:	17 ff       	sbrs	r17, 7
   1defa:	07 c0       	rjmp	.+14     	; 0x1df0a <vfprintf+0x2e4>
   1defc:	1a 14       	cp	r1, r10
   1defe:	1b 04       	cpc	r1, r11
   1df00:	3c f4       	brge	.+14     	; 0x1df10 <vfprintf+0x2ea>
   1df02:	95 01       	movw	r18, r10
   1df04:	2f 5f       	subi	r18, 0xFF	; 255
   1df06:	3f 4f       	sbci	r19, 0xFF	; 255
   1df08:	05 c0       	rjmp	.+10     	; 0x1df14 <vfprintf+0x2ee>
   1df0a:	25 e0       	ldi	r18, 0x05	; 5
   1df0c:	30 e0       	ldi	r19, 0x00	; 0
   1df0e:	02 c0       	rjmp	.+4      	; 0x1df14 <vfprintf+0x2ee>
   1df10:	21 e0       	ldi	r18, 0x01	; 1
   1df12:	30 e0       	ldi	r19, 0x00	; 0
   1df14:	00 23       	and	r16, r16
   1df16:	11 f0       	breq	.+4      	; 0x1df1c <vfprintf+0x2f6>
   1df18:	2f 5f       	subi	r18, 0xFF	; 255
   1df1a:	3f 4f       	sbci	r19, 0xFF	; 255
   1df1c:	ff 20       	and	r15, r15
   1df1e:	29 f0       	breq	.+10     	; 0x1df2a <vfprintf+0x304>
   1df20:	8f 2d       	mov	r24, r15
   1df22:	90 e0       	ldi	r25, 0x00	; 0
   1df24:	01 96       	adiw	r24, 0x01	; 1
   1df26:	28 0f       	add	r18, r24
   1df28:	39 1f       	adc	r19, r25
   1df2a:	8d 2d       	mov	r24, r13
   1df2c:	90 e0       	ldi	r25, 0x00	; 0
   1df2e:	28 17       	cp	r18, r24
   1df30:	39 07       	cpc	r19, r25
   1df32:	14 f4       	brge	.+4      	; 0x1df38 <vfprintf+0x312>
   1df34:	d2 1a       	sub	r13, r18
   1df36:	01 c0       	rjmp	.+2      	; 0x1df3a <vfprintf+0x314>
   1df38:	dd 24       	eor	r13, r13
   1df3a:	61 2e       	mov	r6, r17
   1df3c:	77 24       	eor	r7, r7
   1df3e:	c3 01       	movw	r24, r6
   1df40:	89 70       	andi	r24, 0x09	; 9
   1df42:	90 70       	andi	r25, 0x00	; 0
   1df44:	00 97       	sbiw	r24, 0x00	; 0
   1df46:	49 f4       	brne	.+18     	; 0x1df5a <vfprintf+0x334>
   1df48:	06 c0       	rjmp	.+12     	; 0x1df56 <vfprintf+0x330>
   1df4a:	80 e2       	ldi	r24, 0x20	; 32
   1df4c:	90 e0       	ldi	r25, 0x00	; 0
   1df4e:	b4 01       	movw	r22, r8
   1df50:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1df54:	da 94       	dec	r13
   1df56:	dd 20       	and	r13, r13
   1df58:	c1 f7       	brne	.-16     	; 0x1df4a <vfprintf+0x324>
   1df5a:	00 23       	and	r16, r16
   1df5c:	29 f0       	breq	.+10     	; 0x1df68 <vfprintf+0x342>
   1df5e:	80 2f       	mov	r24, r16
   1df60:	90 e0       	ldi	r25, 0x00	; 0
   1df62:	b4 01       	movw	r22, r8
   1df64:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1df68:	63 fc       	sbrc	r6, 3
   1df6a:	09 c0       	rjmp	.+18     	; 0x1df7e <vfprintf+0x358>
   1df6c:	06 c0       	rjmp	.+12     	; 0x1df7a <vfprintf+0x354>
   1df6e:	80 e3       	ldi	r24, 0x30	; 48
   1df70:	90 e0       	ldi	r25, 0x00	; 0
   1df72:	b4 01       	movw	r22, r8
   1df74:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1df78:	da 94       	dec	r13
   1df7a:	dd 20       	and	r13, r13
   1df7c:	c1 f7       	brne	.-16     	; 0x1df6e <vfprintf+0x348>
   1df7e:	17 ff       	sbrs	r17, 7
   1df80:	48 c0       	rjmp	.+144    	; 0x1e012 <vfprintf+0x3ec>
   1df82:	85 01       	movw	r16, r10
   1df84:	b7 fe       	sbrs	r11, 7
   1df86:	02 c0       	rjmp	.+4      	; 0x1df8c <vfprintf+0x366>
   1df88:	00 e0       	ldi	r16, 0x00	; 0
   1df8a:	10 e0       	ldi	r17, 0x00	; 0
   1df8c:	66 24       	eor	r6, r6
   1df8e:	77 24       	eor	r7, r7
   1df90:	95 01       	movw	r18, r10
   1df92:	2e 19       	sub	r18, r14
   1df94:	31 09       	sbc	r19, r1
   1df96:	2a 8b       	std	Y+18, r18	; 0x12
   1df98:	3b 8b       	std	Y+19, r19	; 0x13
   1df9a:	25 01       	movw	r4, r10
   1df9c:	40 1a       	sub	r4, r16
   1df9e:	51 0a       	sbc	r5, r17
   1dfa0:	42 0c       	add	r4, r2
   1dfa2:	53 1c       	adc	r5, r3
   1dfa4:	6f 2d       	mov	r22, r15
   1dfa6:	70 e0       	ldi	r23, 0x00	; 0
   1dfa8:	ee 24       	eor	r14, r14
   1dfaa:	ff 24       	eor	r15, r15
   1dfac:	e6 1a       	sub	r14, r22
   1dfae:	f7 0a       	sbc	r15, r23
   1dfb0:	3f ef       	ldi	r19, 0xFF	; 255
   1dfb2:	0f 3f       	cpi	r16, 0xFF	; 255
   1dfb4:	13 07       	cpc	r17, r19
   1dfb6:	29 f4       	brne	.+10     	; 0x1dfc2 <vfprintf+0x39c>
   1dfb8:	8e e2       	ldi	r24, 0x2E	; 46
   1dfba:	90 e0       	ldi	r25, 0x00	; 0
   1dfbc:	b4 01       	movw	r22, r8
   1dfbe:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1dfc2:	a0 16       	cp	r10, r16
   1dfc4:	b1 06       	cpc	r11, r17
   1dfc6:	54 f0       	brlt	.+20     	; 0x1dfdc <vfprintf+0x3b6>
   1dfc8:	2a 89       	ldd	r18, Y+18	; 0x12
   1dfca:	3b 89       	ldd	r19, Y+19	; 0x13
   1dfcc:	20 17       	cp	r18, r16
   1dfce:	31 07       	cpc	r19, r17
   1dfd0:	2c f4       	brge	.+10     	; 0x1dfdc <vfprintf+0x3b6>
   1dfd2:	f2 01       	movw	r30, r4
   1dfd4:	e6 0d       	add	r30, r6
   1dfd6:	f7 1d       	adc	r31, r7
   1dfd8:	81 81       	ldd	r24, Z+1	; 0x01
   1dfda:	01 c0       	rjmp	.+2      	; 0x1dfde <vfprintf+0x3b8>
   1dfdc:	80 e3       	ldi	r24, 0x30	; 48
   1dfde:	01 50       	subi	r16, 0x01	; 1
   1dfe0:	10 40       	sbci	r17, 0x00	; 0
   1dfe2:	08 94       	sec
   1dfe4:	61 1c       	adc	r6, r1
   1dfe6:	71 1c       	adc	r7, r1
   1dfe8:	0e 15       	cp	r16, r14
   1dfea:	1f 05       	cpc	r17, r15
   1dfec:	2c f0       	brlt	.+10     	; 0x1dff8 <vfprintf+0x3d2>
   1dfee:	90 e0       	ldi	r25, 0x00	; 0
   1dff0:	b4 01       	movw	r22, r8
   1dff2:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1dff6:	dc cf       	rjmp	.-72     	; 0x1dfb0 <vfprintf+0x38a>
   1dff8:	0a 15       	cp	r16, r10
   1dffa:	1b 05       	cpc	r17, r11
   1dffc:	41 f4       	brne	.+16     	; 0x1e00e <vfprintf+0x3e8>
   1dffe:	9a 81       	ldd	r25, Y+2	; 0x02
   1e000:	96 33       	cpi	r25, 0x36	; 54
   1e002:	20 f4       	brcc	.+8      	; 0x1e00c <vfprintf+0x3e6>
   1e004:	95 33       	cpi	r25, 0x35	; 53
   1e006:	19 f4       	brne	.+6      	; 0x1e00e <vfprintf+0x3e8>
   1e008:	38 89       	ldd	r19, Y+16	; 0x10
   1e00a:	34 ff       	sbrs	r19, 4
   1e00c:	81 e3       	ldi	r24, 0x31	; 49
   1e00e:	90 e0       	ldi	r25, 0x00	; 0
   1e010:	49 c0       	rjmp	.+146    	; 0x1e0a4 <vfprintf+0x47e>
   1e012:	8a 81       	ldd	r24, Y+2	; 0x02
   1e014:	81 33       	cpi	r24, 0x31	; 49
   1e016:	11 f0       	breq	.+4      	; 0x1e01c <vfprintf+0x3f6>
   1e018:	9f ee       	ldi	r25, 0xEF	; 239
   1e01a:	c9 22       	and	r12, r25
   1e01c:	90 e0       	ldi	r25, 0x00	; 0
   1e01e:	b4 01       	movw	r22, r8
   1e020:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e024:	ff 20       	and	r15, r15
   1e026:	89 f0       	breq	.+34     	; 0x1e04a <vfprintf+0x424>
   1e028:	8e e2       	ldi	r24, 0x2E	; 46
   1e02a:	90 e0       	ldi	r25, 0x00	; 0
   1e02c:	b4 01       	movw	r22, r8
   1e02e:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e032:	12 e0       	ldi	r17, 0x02	; 2
   1e034:	f1 01       	movw	r30, r2
   1e036:	e1 0f       	add	r30, r17
   1e038:	f1 1d       	adc	r31, r1
   1e03a:	1f 5f       	subi	r17, 0xFF	; 255
   1e03c:	80 81       	ld	r24, Z
   1e03e:	90 e0       	ldi	r25, 0x00	; 0
   1e040:	b4 01       	movw	r22, r8
   1e042:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e046:	fa 94       	dec	r15
   1e048:	a9 f7       	brne	.-22     	; 0x1e034 <vfprintf+0x40e>
   1e04a:	64 fe       	sbrs	r6, 4
   1e04c:	03 c0       	rjmp	.+6      	; 0x1e054 <vfprintf+0x42e>
   1e04e:	85 e4       	ldi	r24, 0x45	; 69
   1e050:	90 e0       	ldi	r25, 0x00	; 0
   1e052:	02 c0       	rjmp	.+4      	; 0x1e058 <vfprintf+0x432>
   1e054:	85 e6       	ldi	r24, 0x65	; 101
   1e056:	90 e0       	ldi	r25, 0x00	; 0
   1e058:	b4 01       	movw	r22, r8
   1e05a:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e05e:	b7 fc       	sbrc	r11, 7
   1e060:	05 c0       	rjmp	.+10     	; 0x1e06c <vfprintf+0x446>
   1e062:	a1 14       	cp	r10, r1
   1e064:	b1 04       	cpc	r11, r1
   1e066:	41 f4       	brne	.+16     	; 0x1e078 <vfprintf+0x452>
   1e068:	c4 fe       	sbrs	r12, 4
   1e06a:	06 c0       	rjmp	.+12     	; 0x1e078 <vfprintf+0x452>
   1e06c:	b0 94       	com	r11
   1e06e:	a1 94       	neg	r10
   1e070:	b1 08       	sbc	r11, r1
   1e072:	b3 94       	inc	r11
   1e074:	8d e2       	ldi	r24, 0x2D	; 45
   1e076:	01 c0       	rjmp	.+2      	; 0x1e07a <vfprintf+0x454>
   1e078:	8b e2       	ldi	r24, 0x2B	; 43
   1e07a:	90 e0       	ldi	r25, 0x00	; 0
   1e07c:	b4 01       	movw	r22, r8
   1e07e:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e082:	80 e3       	ldi	r24, 0x30	; 48
   1e084:	05 c0       	rjmp	.+10     	; 0x1e090 <vfprintf+0x46a>
   1e086:	8f 5f       	subi	r24, 0xFF	; 255
   1e088:	e6 ef       	ldi	r30, 0xF6	; 246
   1e08a:	ff ef       	ldi	r31, 0xFF	; 255
   1e08c:	ae 0e       	add	r10, r30
   1e08e:	bf 1e       	adc	r11, r31
   1e090:	fa e0       	ldi	r31, 0x0A	; 10
   1e092:	af 16       	cp	r10, r31
   1e094:	b1 04       	cpc	r11, r1
   1e096:	bc f7       	brge	.-18     	; 0x1e086 <vfprintf+0x460>
   1e098:	90 e0       	ldi	r25, 0x00	; 0
   1e09a:	b4 01       	movw	r22, r8
   1e09c:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e0a0:	c5 01       	movw	r24, r10
   1e0a2:	c0 96       	adiw	r24, 0x30	; 48
   1e0a4:	b4 01       	movw	r22, r8
   1e0a6:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e0aa:	4d c1       	rjmp	.+666    	; 0x1e346 <vfprintf+0x720>
   1e0ac:	83 36       	cpi	r24, 0x63	; 99
   1e0ae:	31 f0       	breq	.+12     	; 0x1e0bc <vfprintf+0x496>
   1e0b0:	83 37       	cpi	r24, 0x73	; 115
   1e0b2:	89 f0       	breq	.+34     	; 0x1e0d6 <vfprintf+0x4b0>
   1e0b4:	83 35       	cpi	r24, 0x53	; 83
   1e0b6:	09 f0       	breq	.+2      	; 0x1e0ba <vfprintf+0x494>
   1e0b8:	59 c0       	rjmp	.+178    	; 0x1e16c <vfprintf+0x546>
   1e0ba:	22 c0       	rjmp	.+68     	; 0x1e100 <vfprintf+0x4da>
   1e0bc:	9a 01       	movw	r18, r20
   1e0be:	2e 5f       	subi	r18, 0xFE	; 254
   1e0c0:	3f 4f       	sbci	r19, 0xFF	; 255
   1e0c2:	2c 87       	std	Y+12, r18	; 0x0c
   1e0c4:	3d 87       	std	Y+13, r19	; 0x0d
   1e0c6:	fa 01       	movw	r30, r20
   1e0c8:	80 81       	ld	r24, Z
   1e0ca:	89 83       	std	Y+1, r24	; 0x01
   1e0cc:	81 e0       	ldi	r24, 0x01	; 1
   1e0ce:	e8 2e       	mov	r14, r24
   1e0d0:	f1 2c       	mov	r15, r1
   1e0d2:	51 01       	movw	r10, r2
   1e0d4:	13 c0       	rjmp	.+38     	; 0x1e0fc <vfprintf+0x4d6>
   1e0d6:	9a 01       	movw	r18, r20
   1e0d8:	2e 5f       	subi	r18, 0xFE	; 254
   1e0da:	3f 4f       	sbci	r19, 0xFF	; 255
   1e0dc:	2c 87       	std	Y+12, r18	; 0x0c
   1e0de:	3d 87       	std	Y+13, r19	; 0x0d
   1e0e0:	fa 01       	movw	r30, r20
   1e0e2:	a0 80       	ld	r10, Z
   1e0e4:	b1 80       	ldd	r11, Z+1	; 0x01
   1e0e6:	16 ff       	sbrs	r17, 6
   1e0e8:	03 c0       	rjmp	.+6      	; 0x1e0f0 <vfprintf+0x4ca>
   1e0ea:	6f 2d       	mov	r22, r15
   1e0ec:	70 e0       	ldi	r23, 0x00	; 0
   1e0ee:	02 c0       	rjmp	.+4      	; 0x1e0f4 <vfprintf+0x4ce>
   1e0f0:	6f ef       	ldi	r22, 0xFF	; 255
   1e0f2:	7f ef       	ldi	r23, 0xFF	; 255
   1e0f4:	c5 01       	movw	r24, r10
   1e0f6:	0e 94 54 f7 	call	0x1eea8	; 0x1eea8 <strnlen>
   1e0fa:	7c 01       	movw	r14, r24
   1e0fc:	1f 77       	andi	r17, 0x7F	; 127
   1e0fe:	14 c0       	rjmp	.+40     	; 0x1e128 <vfprintf+0x502>
   1e100:	9a 01       	movw	r18, r20
   1e102:	2e 5f       	subi	r18, 0xFE	; 254
   1e104:	3f 4f       	sbci	r19, 0xFF	; 255
   1e106:	2c 87       	std	Y+12, r18	; 0x0c
   1e108:	3d 87       	std	Y+13, r19	; 0x0d
   1e10a:	fa 01       	movw	r30, r20
   1e10c:	a0 80       	ld	r10, Z
   1e10e:	b1 80       	ldd	r11, Z+1	; 0x01
   1e110:	16 ff       	sbrs	r17, 6
   1e112:	03 c0       	rjmp	.+6      	; 0x1e11a <vfprintf+0x4f4>
   1e114:	6f 2d       	mov	r22, r15
   1e116:	70 e0       	ldi	r23, 0x00	; 0
   1e118:	02 c0       	rjmp	.+4      	; 0x1e11e <vfprintf+0x4f8>
   1e11a:	6f ef       	ldi	r22, 0xFF	; 255
   1e11c:	7f ef       	ldi	r23, 0xFF	; 255
   1e11e:	c5 01       	movw	r24, r10
   1e120:	0e 94 f7 f6 	call	0x1edee	; 0x1edee <strnlen_P>
   1e124:	7c 01       	movw	r14, r24
   1e126:	10 68       	ori	r17, 0x80	; 128
   1e128:	13 fd       	sbrc	r17, 3
   1e12a:	1c c0       	rjmp	.+56     	; 0x1e164 <vfprintf+0x53e>
   1e12c:	06 c0       	rjmp	.+12     	; 0x1e13a <vfprintf+0x514>
   1e12e:	80 e2       	ldi	r24, 0x20	; 32
   1e130:	90 e0       	ldi	r25, 0x00	; 0
   1e132:	b4 01       	movw	r22, r8
   1e134:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e138:	da 94       	dec	r13
   1e13a:	8d 2d       	mov	r24, r13
   1e13c:	90 e0       	ldi	r25, 0x00	; 0
   1e13e:	e8 16       	cp	r14, r24
   1e140:	f9 06       	cpc	r15, r25
   1e142:	a8 f3       	brcs	.-22     	; 0x1e12e <vfprintf+0x508>
   1e144:	0f c0       	rjmp	.+30     	; 0x1e164 <vfprintf+0x53e>
   1e146:	f5 01       	movw	r30, r10
   1e148:	17 fd       	sbrc	r17, 7
   1e14a:	85 91       	lpm	r24, Z+
   1e14c:	17 ff       	sbrs	r17, 7
   1e14e:	81 91       	ld	r24, Z+
   1e150:	5f 01       	movw	r10, r30
   1e152:	90 e0       	ldi	r25, 0x00	; 0
   1e154:	b4 01       	movw	r22, r8
   1e156:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e15a:	d1 10       	cpse	r13, r1
   1e15c:	da 94       	dec	r13
   1e15e:	08 94       	sec
   1e160:	e1 08       	sbc	r14, r1
   1e162:	f1 08       	sbc	r15, r1
   1e164:	e1 14       	cp	r14, r1
   1e166:	f1 04       	cpc	r15, r1
   1e168:	71 f7       	brne	.-36     	; 0x1e146 <vfprintf+0x520>
   1e16a:	ed c0       	rjmp	.+474    	; 0x1e346 <vfprintf+0x720>
   1e16c:	84 36       	cpi	r24, 0x64	; 100
   1e16e:	11 f0       	breq	.+4      	; 0x1e174 <vfprintf+0x54e>
   1e170:	89 36       	cpi	r24, 0x69	; 105
   1e172:	71 f5       	brne	.+92     	; 0x1e1d0 <vfprintf+0x5aa>
   1e174:	9a 01       	movw	r18, r20
   1e176:	17 ff       	sbrs	r17, 7
   1e178:	0a c0       	rjmp	.+20     	; 0x1e18e <vfprintf+0x568>
   1e17a:	2c 5f       	subi	r18, 0xFC	; 252
   1e17c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e17e:	2c 87       	std	Y+12, r18	; 0x0c
   1e180:	3d 87       	std	Y+13, r19	; 0x0d
   1e182:	fa 01       	movw	r30, r20
   1e184:	80 81       	ld	r24, Z
   1e186:	91 81       	ldd	r25, Z+1	; 0x01
   1e188:	a2 81       	ldd	r26, Z+2	; 0x02
   1e18a:	b3 81       	ldd	r27, Z+3	; 0x03
   1e18c:	0b c0       	rjmp	.+22     	; 0x1e1a4 <vfprintf+0x57e>
   1e18e:	2e 5f       	subi	r18, 0xFE	; 254
   1e190:	3f 4f       	sbci	r19, 0xFF	; 255
   1e192:	2c 87       	std	Y+12, r18	; 0x0c
   1e194:	3d 87       	std	Y+13, r19	; 0x0d
   1e196:	fa 01       	movw	r30, r20
   1e198:	80 81       	ld	r24, Z
   1e19a:	91 81       	ldd	r25, Z+1	; 0x01
   1e19c:	aa 27       	eor	r26, r26
   1e19e:	97 fd       	sbrc	r25, 7
   1e1a0:	a0 95       	com	r26
   1e1a2:	ba 2f       	mov	r27, r26
   1e1a4:	01 2f       	mov	r16, r17
   1e1a6:	0f 76       	andi	r16, 0x6F	; 111
   1e1a8:	b7 ff       	sbrs	r27, 7
   1e1aa:	08 c0       	rjmp	.+16     	; 0x1e1bc <vfprintf+0x596>
   1e1ac:	b0 95       	com	r27
   1e1ae:	a0 95       	com	r26
   1e1b0:	90 95       	com	r25
   1e1b2:	81 95       	neg	r24
   1e1b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1e1b6:	af 4f       	sbci	r26, 0xFF	; 255
   1e1b8:	bf 4f       	sbci	r27, 0xFF	; 255
   1e1ba:	00 68       	ori	r16, 0x80	; 128
   1e1bc:	bc 01       	movw	r22, r24
   1e1be:	cd 01       	movw	r24, r26
   1e1c0:	a1 01       	movw	r20, r2
   1e1c2:	2a e0       	ldi	r18, 0x0A	; 10
   1e1c4:	30 e0       	ldi	r19, 0x00	; 0
   1e1c6:	0e 94 0c f8 	call	0x1f018	; 0x1f018 <__ultoa_invert>
   1e1ca:	e8 2e       	mov	r14, r24
   1e1cc:	e2 18       	sub	r14, r2
   1e1ce:	41 c0       	rjmp	.+130    	; 0x1e252 <vfprintf+0x62c>
   1e1d0:	85 37       	cpi	r24, 0x75	; 117
   1e1d2:	21 f4       	brne	.+8      	; 0x1e1dc <vfprintf+0x5b6>
   1e1d4:	1f 7e       	andi	r17, 0xEF	; 239
   1e1d6:	2a e0       	ldi	r18, 0x0A	; 10
   1e1d8:	30 e0       	ldi	r19, 0x00	; 0
   1e1da:	20 c0       	rjmp	.+64     	; 0x1e21c <vfprintf+0x5f6>
   1e1dc:	19 7f       	andi	r17, 0xF9	; 249
   1e1de:	8f 36       	cpi	r24, 0x6F	; 111
   1e1e0:	a9 f0       	breq	.+42     	; 0x1e20c <vfprintf+0x5e6>
   1e1e2:	80 37       	cpi	r24, 0x70	; 112
   1e1e4:	20 f4       	brcc	.+8      	; 0x1e1ee <vfprintf+0x5c8>
   1e1e6:	88 35       	cpi	r24, 0x58	; 88
   1e1e8:	09 f0       	breq	.+2      	; 0x1e1ec <vfprintf+0x5c6>
   1e1ea:	b0 c0       	rjmp	.+352    	; 0x1e34c <vfprintf+0x726>
   1e1ec:	0b c0       	rjmp	.+22     	; 0x1e204 <vfprintf+0x5de>
   1e1ee:	80 37       	cpi	r24, 0x70	; 112
   1e1f0:	21 f0       	breq	.+8      	; 0x1e1fa <vfprintf+0x5d4>
   1e1f2:	88 37       	cpi	r24, 0x78	; 120
   1e1f4:	09 f0       	breq	.+2      	; 0x1e1f8 <vfprintf+0x5d2>
   1e1f6:	aa c0       	rjmp	.+340    	; 0x1e34c <vfprintf+0x726>
   1e1f8:	01 c0       	rjmp	.+2      	; 0x1e1fc <vfprintf+0x5d6>
   1e1fa:	10 61       	ori	r17, 0x10	; 16
   1e1fc:	14 ff       	sbrs	r17, 4
   1e1fe:	09 c0       	rjmp	.+18     	; 0x1e212 <vfprintf+0x5ec>
   1e200:	14 60       	ori	r17, 0x04	; 4
   1e202:	07 c0       	rjmp	.+14     	; 0x1e212 <vfprintf+0x5ec>
   1e204:	14 ff       	sbrs	r17, 4
   1e206:	08 c0       	rjmp	.+16     	; 0x1e218 <vfprintf+0x5f2>
   1e208:	16 60       	ori	r17, 0x06	; 6
   1e20a:	06 c0       	rjmp	.+12     	; 0x1e218 <vfprintf+0x5f2>
   1e20c:	28 e0       	ldi	r18, 0x08	; 8
   1e20e:	30 e0       	ldi	r19, 0x00	; 0
   1e210:	05 c0       	rjmp	.+10     	; 0x1e21c <vfprintf+0x5f6>
   1e212:	20 e1       	ldi	r18, 0x10	; 16
   1e214:	30 e0       	ldi	r19, 0x00	; 0
   1e216:	02 c0       	rjmp	.+4      	; 0x1e21c <vfprintf+0x5f6>
   1e218:	20 e1       	ldi	r18, 0x10	; 16
   1e21a:	32 e0       	ldi	r19, 0x02	; 2
   1e21c:	ca 01       	movw	r24, r20
   1e21e:	17 ff       	sbrs	r17, 7
   1e220:	09 c0       	rjmp	.+18     	; 0x1e234 <vfprintf+0x60e>
   1e222:	04 96       	adiw	r24, 0x04	; 4
   1e224:	8c 87       	std	Y+12, r24	; 0x0c
   1e226:	9d 87       	std	Y+13, r25	; 0x0d
   1e228:	fa 01       	movw	r30, r20
   1e22a:	60 81       	ld	r22, Z
   1e22c:	71 81       	ldd	r23, Z+1	; 0x01
   1e22e:	82 81       	ldd	r24, Z+2	; 0x02
   1e230:	93 81       	ldd	r25, Z+3	; 0x03
   1e232:	08 c0       	rjmp	.+16     	; 0x1e244 <vfprintf+0x61e>
   1e234:	02 96       	adiw	r24, 0x02	; 2
   1e236:	8c 87       	std	Y+12, r24	; 0x0c
   1e238:	9d 87       	std	Y+13, r25	; 0x0d
   1e23a:	fa 01       	movw	r30, r20
   1e23c:	60 81       	ld	r22, Z
   1e23e:	71 81       	ldd	r23, Z+1	; 0x01
   1e240:	80 e0       	ldi	r24, 0x00	; 0
   1e242:	90 e0       	ldi	r25, 0x00	; 0
   1e244:	a1 01       	movw	r20, r2
   1e246:	0e 94 0c f8 	call	0x1f018	; 0x1f018 <__ultoa_invert>
   1e24a:	e8 2e       	mov	r14, r24
   1e24c:	e2 18       	sub	r14, r2
   1e24e:	01 2f       	mov	r16, r17
   1e250:	0f 77       	andi	r16, 0x7F	; 127
   1e252:	06 ff       	sbrs	r16, 6
   1e254:	09 c0       	rjmp	.+18     	; 0x1e268 <vfprintf+0x642>
   1e256:	0e 7f       	andi	r16, 0xFE	; 254
   1e258:	ef 14       	cp	r14, r15
   1e25a:	30 f4       	brcc	.+12     	; 0x1e268 <vfprintf+0x642>
   1e25c:	04 ff       	sbrs	r16, 4
   1e25e:	06 c0       	rjmp	.+12     	; 0x1e26c <vfprintf+0x646>
   1e260:	02 fd       	sbrc	r16, 2
   1e262:	04 c0       	rjmp	.+8      	; 0x1e26c <vfprintf+0x646>
   1e264:	0f 7e       	andi	r16, 0xEF	; 239
   1e266:	02 c0       	rjmp	.+4      	; 0x1e26c <vfprintf+0x646>
   1e268:	1e 2d       	mov	r17, r14
   1e26a:	01 c0       	rjmp	.+2      	; 0x1e26e <vfprintf+0x648>
   1e26c:	1f 2d       	mov	r17, r15
   1e26e:	80 2f       	mov	r24, r16
   1e270:	90 e0       	ldi	r25, 0x00	; 0
   1e272:	04 ff       	sbrs	r16, 4
   1e274:	0c c0       	rjmp	.+24     	; 0x1e28e <vfprintf+0x668>
   1e276:	fe 01       	movw	r30, r28
   1e278:	ee 0d       	add	r30, r14
   1e27a:	f1 1d       	adc	r31, r1
   1e27c:	20 81       	ld	r18, Z
   1e27e:	20 33       	cpi	r18, 0x30	; 48
   1e280:	11 f4       	brne	.+4      	; 0x1e286 <vfprintf+0x660>
   1e282:	09 7e       	andi	r16, 0xE9	; 233
   1e284:	09 c0       	rjmp	.+18     	; 0x1e298 <vfprintf+0x672>
   1e286:	02 ff       	sbrs	r16, 2
   1e288:	06 c0       	rjmp	.+12     	; 0x1e296 <vfprintf+0x670>
   1e28a:	1e 5f       	subi	r17, 0xFE	; 254
   1e28c:	05 c0       	rjmp	.+10     	; 0x1e298 <vfprintf+0x672>
   1e28e:	86 78       	andi	r24, 0x86	; 134
   1e290:	90 70       	andi	r25, 0x00	; 0
   1e292:	00 97       	sbiw	r24, 0x00	; 0
   1e294:	09 f0       	breq	.+2      	; 0x1e298 <vfprintf+0x672>
   1e296:	1f 5f       	subi	r17, 0xFF	; 255
   1e298:	a0 2e       	mov	r10, r16
   1e29a:	bb 24       	eor	r11, r11
   1e29c:	03 fd       	sbrc	r16, 3
   1e29e:	12 c0       	rjmp	.+36     	; 0x1e2c4 <vfprintf+0x69e>
   1e2a0:	00 ff       	sbrs	r16, 0
   1e2a2:	0d c0       	rjmp	.+26     	; 0x1e2be <vfprintf+0x698>
   1e2a4:	fe 2c       	mov	r15, r14
   1e2a6:	1d 15       	cp	r17, r13
   1e2a8:	50 f4       	brcc	.+20     	; 0x1e2be <vfprintf+0x698>
   1e2aa:	fd 0c       	add	r15, r13
   1e2ac:	f1 1a       	sub	r15, r17
   1e2ae:	1d 2d       	mov	r17, r13
   1e2b0:	06 c0       	rjmp	.+12     	; 0x1e2be <vfprintf+0x698>
   1e2b2:	80 e2       	ldi	r24, 0x20	; 32
   1e2b4:	90 e0       	ldi	r25, 0x00	; 0
   1e2b6:	b4 01       	movw	r22, r8
   1e2b8:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e2bc:	1f 5f       	subi	r17, 0xFF	; 255
   1e2be:	1d 15       	cp	r17, r13
   1e2c0:	c0 f3       	brcs	.-16     	; 0x1e2b2 <vfprintf+0x68c>
   1e2c2:	04 c0       	rjmp	.+8      	; 0x1e2cc <vfprintf+0x6a6>
   1e2c4:	1d 15       	cp	r17, r13
   1e2c6:	10 f4       	brcc	.+4      	; 0x1e2cc <vfprintf+0x6a6>
   1e2c8:	d1 1a       	sub	r13, r17
   1e2ca:	01 c0       	rjmp	.+2      	; 0x1e2ce <vfprintf+0x6a8>
   1e2cc:	dd 24       	eor	r13, r13
   1e2ce:	a4 fe       	sbrs	r10, 4
   1e2d0:	0f c0       	rjmp	.+30     	; 0x1e2f0 <vfprintf+0x6ca>
   1e2d2:	80 e3       	ldi	r24, 0x30	; 48
   1e2d4:	90 e0       	ldi	r25, 0x00	; 0
   1e2d6:	b4 01       	movw	r22, r8
   1e2d8:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e2dc:	a2 fe       	sbrs	r10, 2
   1e2de:	1f c0       	rjmp	.+62     	; 0x1e31e <vfprintf+0x6f8>
   1e2e0:	a1 fe       	sbrs	r10, 1
   1e2e2:	03 c0       	rjmp	.+6      	; 0x1e2ea <vfprintf+0x6c4>
   1e2e4:	88 e5       	ldi	r24, 0x58	; 88
   1e2e6:	90 e0       	ldi	r25, 0x00	; 0
   1e2e8:	10 c0       	rjmp	.+32     	; 0x1e30a <vfprintf+0x6e4>
   1e2ea:	88 e7       	ldi	r24, 0x78	; 120
   1e2ec:	90 e0       	ldi	r25, 0x00	; 0
   1e2ee:	0d c0       	rjmp	.+26     	; 0x1e30a <vfprintf+0x6e4>
   1e2f0:	c5 01       	movw	r24, r10
   1e2f2:	86 78       	andi	r24, 0x86	; 134
   1e2f4:	90 70       	andi	r25, 0x00	; 0
   1e2f6:	00 97       	sbiw	r24, 0x00	; 0
   1e2f8:	91 f0       	breq	.+36     	; 0x1e31e <vfprintf+0x6f8>
   1e2fa:	a1 fc       	sbrc	r10, 1
   1e2fc:	02 c0       	rjmp	.+4      	; 0x1e302 <vfprintf+0x6dc>
   1e2fe:	80 e2       	ldi	r24, 0x20	; 32
   1e300:	01 c0       	rjmp	.+2      	; 0x1e304 <vfprintf+0x6de>
   1e302:	8b e2       	ldi	r24, 0x2B	; 43
   1e304:	07 fd       	sbrc	r16, 7
   1e306:	8d e2       	ldi	r24, 0x2D	; 45
   1e308:	90 e0       	ldi	r25, 0x00	; 0
   1e30a:	b4 01       	movw	r22, r8
   1e30c:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e310:	06 c0       	rjmp	.+12     	; 0x1e31e <vfprintf+0x6f8>
   1e312:	80 e3       	ldi	r24, 0x30	; 48
   1e314:	90 e0       	ldi	r25, 0x00	; 0
   1e316:	b4 01       	movw	r22, r8
   1e318:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e31c:	fa 94       	dec	r15
   1e31e:	ef 14       	cp	r14, r15
   1e320:	c0 f3       	brcs	.-16     	; 0x1e312 <vfprintf+0x6ec>
   1e322:	ea 94       	dec	r14
   1e324:	f1 01       	movw	r30, r2
   1e326:	ee 0d       	add	r30, r14
   1e328:	f1 1d       	adc	r31, r1
   1e32a:	80 81       	ld	r24, Z
   1e32c:	90 e0       	ldi	r25, 0x00	; 0
   1e32e:	b4 01       	movw	r22, r8
   1e330:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e334:	ee 20       	and	r14, r14
   1e336:	a9 f7       	brne	.-22     	; 0x1e322 <vfprintf+0x6fc>
   1e338:	06 c0       	rjmp	.+12     	; 0x1e346 <vfprintf+0x720>
   1e33a:	80 e2       	ldi	r24, 0x20	; 32
   1e33c:	90 e0       	ldi	r25, 0x00	; 0
   1e33e:	b4 01       	movw	r22, r8
   1e340:	0e 94 8e f7 	call	0x1ef1c	; 0x1ef1c <fputc>
   1e344:	da 94       	dec	r13
   1e346:	dd 20       	and	r13, r13
   1e348:	c1 f7       	brne	.-16     	; 0x1e33a <vfprintf+0x714>
   1e34a:	8e cc       	rjmp	.-1764   	; 0x1dc68 <vfprintf+0x42>
   1e34c:	f4 01       	movw	r30, r8
   1e34e:	86 81       	ldd	r24, Z+6	; 0x06
   1e350:	97 81       	ldd	r25, Z+7	; 0x07
   1e352:	02 c0       	rjmp	.+4      	; 0x1e358 <vfprintf+0x732>
   1e354:	8f ef       	ldi	r24, 0xFF	; 255
   1e356:	9f ef       	ldi	r25, 0xFF	; 255
   1e358:	65 96       	adiw	r28, 0x15	; 21
   1e35a:	cd bf       	out	0x3d, r28	; 61
   1e35c:	de bf       	out	0x3e, r29	; 62
   1e35e:	df 91       	pop	r29
   1e360:	cf 91       	pop	r28
   1e362:	1f 91       	pop	r17
   1e364:	0f 91       	pop	r16
   1e366:	ff 90       	pop	r15
   1e368:	ef 90       	pop	r14
   1e36a:	df 90       	pop	r13
   1e36c:	cf 90       	pop	r12
   1e36e:	bf 90       	pop	r11
   1e370:	af 90       	pop	r10
   1e372:	9f 90       	pop	r9
   1e374:	8f 90       	pop	r8
   1e376:	7f 90       	pop	r7
   1e378:	6f 90       	pop	r6
   1e37a:	5f 90       	pop	r5
   1e37c:	4f 90       	pop	r4
   1e37e:	3f 90       	pop	r3
   1e380:	2f 90       	pop	r2
   1e382:	08 95       	ret

0001e384 <__subsf3>:
   1e384:	50 58       	subi	r21, 0x80	; 128

0001e386 <__addsf3>:
   1e386:	bb 27       	eor	r27, r27
   1e388:	aa 27       	eor	r26, r26
   1e38a:	0e d0       	rcall	.+28     	; 0x1e3a8 <__addsf3x>
   1e38c:	fd c1       	rjmp	.+1018   	; 0x1e788 <__fp_round>
   1e38e:	ee d1       	rcall	.+988    	; 0x1e76c <__fp_pscA>
   1e390:	30 f0       	brcs	.+12     	; 0x1e39e <__addsf3+0x18>
   1e392:	f3 d1       	rcall	.+998    	; 0x1e77a <__fp_pscB>
   1e394:	20 f0       	brcs	.+8      	; 0x1e39e <__addsf3+0x18>
   1e396:	31 f4       	brne	.+12     	; 0x1e3a4 <__addsf3+0x1e>
   1e398:	9f 3f       	cpi	r25, 0xFF	; 255
   1e39a:	11 f4       	brne	.+4      	; 0x1e3a0 <__addsf3+0x1a>
   1e39c:	1e f4       	brtc	.+6      	; 0x1e3a4 <__addsf3+0x1e>
   1e39e:	d3 c1       	rjmp	.+934    	; 0x1e746 <__fp_nan>
   1e3a0:	0e f4       	brtc	.+2      	; 0x1e3a4 <__addsf3+0x1e>
   1e3a2:	e0 95       	com	r30
   1e3a4:	e7 fb       	bst	r30, 7
   1e3a6:	c9 c1       	rjmp	.+914    	; 0x1e73a <__fp_inf>

0001e3a8 <__addsf3x>:
   1e3a8:	e9 2f       	mov	r30, r25
   1e3aa:	ff d1       	rcall	.+1022   	; 0x1e7aa <__fp_split3>
   1e3ac:	80 f3       	brcs	.-32     	; 0x1e38e <__addsf3+0x8>
   1e3ae:	ba 17       	cp	r27, r26
   1e3b0:	62 07       	cpc	r22, r18
   1e3b2:	73 07       	cpc	r23, r19
   1e3b4:	84 07       	cpc	r24, r20
   1e3b6:	95 07       	cpc	r25, r21
   1e3b8:	18 f0       	brcs	.+6      	; 0x1e3c0 <__addsf3x+0x18>
   1e3ba:	71 f4       	brne	.+28     	; 0x1e3d8 <__addsf3x+0x30>
   1e3bc:	9e f5       	brtc	.+102    	; 0x1e424 <__addsf3x+0x7c>
   1e3be:	17 c2       	rjmp	.+1070   	; 0x1e7ee <__fp_zero>
   1e3c0:	0e f4       	brtc	.+2      	; 0x1e3c4 <__addsf3x+0x1c>
   1e3c2:	e0 95       	com	r30
   1e3c4:	0b 2e       	mov	r0, r27
   1e3c6:	ba 2f       	mov	r27, r26
   1e3c8:	a0 2d       	mov	r26, r0
   1e3ca:	0b 01       	movw	r0, r22
   1e3cc:	b9 01       	movw	r22, r18
   1e3ce:	90 01       	movw	r18, r0
   1e3d0:	0c 01       	movw	r0, r24
   1e3d2:	ca 01       	movw	r24, r20
   1e3d4:	a0 01       	movw	r20, r0
   1e3d6:	11 24       	eor	r1, r1
   1e3d8:	ff 27       	eor	r31, r31
   1e3da:	59 1b       	sub	r21, r25
   1e3dc:	99 f0       	breq	.+38     	; 0x1e404 <__addsf3x+0x5c>
   1e3de:	59 3f       	cpi	r21, 0xF9	; 249
   1e3e0:	50 f4       	brcc	.+20     	; 0x1e3f6 <__addsf3x+0x4e>
   1e3e2:	50 3e       	cpi	r21, 0xE0	; 224
   1e3e4:	68 f1       	brcs	.+90     	; 0x1e440 <__addsf3x+0x98>
   1e3e6:	1a 16       	cp	r1, r26
   1e3e8:	f0 40       	sbci	r31, 0x00	; 0
   1e3ea:	a2 2f       	mov	r26, r18
   1e3ec:	23 2f       	mov	r18, r19
   1e3ee:	34 2f       	mov	r19, r20
   1e3f0:	44 27       	eor	r20, r20
   1e3f2:	58 5f       	subi	r21, 0xF8	; 248
   1e3f4:	f3 cf       	rjmp	.-26     	; 0x1e3dc <__addsf3x+0x34>
   1e3f6:	46 95       	lsr	r20
   1e3f8:	37 95       	ror	r19
   1e3fa:	27 95       	ror	r18
   1e3fc:	a7 95       	ror	r26
   1e3fe:	f0 40       	sbci	r31, 0x00	; 0
   1e400:	53 95       	inc	r21
   1e402:	c9 f7       	brne	.-14     	; 0x1e3f6 <__addsf3x+0x4e>
   1e404:	7e f4       	brtc	.+30     	; 0x1e424 <__addsf3x+0x7c>
   1e406:	1f 16       	cp	r1, r31
   1e408:	ba 0b       	sbc	r27, r26
   1e40a:	62 0b       	sbc	r22, r18
   1e40c:	73 0b       	sbc	r23, r19
   1e40e:	84 0b       	sbc	r24, r20
   1e410:	ba f0       	brmi	.+46     	; 0x1e440 <__addsf3x+0x98>
   1e412:	91 50       	subi	r25, 0x01	; 1
   1e414:	a1 f0       	breq	.+40     	; 0x1e43e <__addsf3x+0x96>
   1e416:	ff 0f       	add	r31, r31
   1e418:	bb 1f       	adc	r27, r27
   1e41a:	66 1f       	adc	r22, r22
   1e41c:	77 1f       	adc	r23, r23
   1e41e:	88 1f       	adc	r24, r24
   1e420:	c2 f7       	brpl	.-16     	; 0x1e412 <__addsf3x+0x6a>
   1e422:	0e c0       	rjmp	.+28     	; 0x1e440 <__addsf3x+0x98>
   1e424:	ba 0f       	add	r27, r26
   1e426:	62 1f       	adc	r22, r18
   1e428:	73 1f       	adc	r23, r19
   1e42a:	84 1f       	adc	r24, r20
   1e42c:	48 f4       	brcc	.+18     	; 0x1e440 <__addsf3x+0x98>
   1e42e:	87 95       	ror	r24
   1e430:	77 95       	ror	r23
   1e432:	67 95       	ror	r22
   1e434:	b7 95       	ror	r27
   1e436:	f7 95       	ror	r31
   1e438:	9e 3f       	cpi	r25, 0xFE	; 254
   1e43a:	08 f0       	brcs	.+2      	; 0x1e43e <__addsf3x+0x96>
   1e43c:	b3 cf       	rjmp	.-154    	; 0x1e3a4 <__addsf3+0x1e>
   1e43e:	93 95       	inc	r25
   1e440:	88 0f       	add	r24, r24
   1e442:	08 f0       	brcs	.+2      	; 0x1e446 <__addsf3x+0x9e>
   1e444:	99 27       	eor	r25, r25
   1e446:	ee 0f       	add	r30, r30
   1e448:	97 95       	ror	r25
   1e44a:	87 95       	ror	r24
   1e44c:	08 95       	ret

0001e44e <__cmpsf2>:
   1e44e:	51 d1       	rcall	.+674    	; 0x1e6f2 <__fp_cmp>
   1e450:	08 f4       	brcc	.+2      	; 0x1e454 <__cmpsf2+0x6>
   1e452:	81 e0       	ldi	r24, 0x01	; 1
   1e454:	08 95       	ret

0001e456 <__divsf3>:
   1e456:	0c d0       	rcall	.+24     	; 0x1e470 <__divsf3x>
   1e458:	97 c1       	rjmp	.+814    	; 0x1e788 <__fp_round>
   1e45a:	8f d1       	rcall	.+798    	; 0x1e77a <__fp_pscB>
   1e45c:	40 f0       	brcs	.+16     	; 0x1e46e <__divsf3+0x18>
   1e45e:	86 d1       	rcall	.+780    	; 0x1e76c <__fp_pscA>
   1e460:	30 f0       	brcs	.+12     	; 0x1e46e <__divsf3+0x18>
   1e462:	21 f4       	brne	.+8      	; 0x1e46c <__divsf3+0x16>
   1e464:	5f 3f       	cpi	r21, 0xFF	; 255
   1e466:	19 f0       	breq	.+6      	; 0x1e46e <__divsf3+0x18>
   1e468:	68 c1       	rjmp	.+720    	; 0x1e73a <__fp_inf>
   1e46a:	51 11       	cpse	r21, r1
   1e46c:	c1 c1       	rjmp	.+898    	; 0x1e7f0 <__fp_szero>
   1e46e:	6b c1       	rjmp	.+726    	; 0x1e746 <__fp_nan>

0001e470 <__divsf3x>:
   1e470:	9c d1       	rcall	.+824    	; 0x1e7aa <__fp_split3>
   1e472:	98 f3       	brcs	.-26     	; 0x1e45a <__divsf3+0x4>

0001e474 <__divsf3_pse>:
   1e474:	99 23       	and	r25, r25
   1e476:	c9 f3       	breq	.-14     	; 0x1e46a <__divsf3+0x14>
   1e478:	55 23       	and	r21, r21
   1e47a:	b1 f3       	breq	.-20     	; 0x1e468 <__divsf3+0x12>
   1e47c:	95 1b       	sub	r25, r21
   1e47e:	55 0b       	sbc	r21, r21
   1e480:	bb 27       	eor	r27, r27
   1e482:	aa 27       	eor	r26, r26
   1e484:	62 17       	cp	r22, r18
   1e486:	73 07       	cpc	r23, r19
   1e488:	84 07       	cpc	r24, r20
   1e48a:	38 f0       	brcs	.+14     	; 0x1e49a <__divsf3_pse+0x26>
   1e48c:	9f 5f       	subi	r25, 0xFF	; 255
   1e48e:	5f 4f       	sbci	r21, 0xFF	; 255
   1e490:	22 0f       	add	r18, r18
   1e492:	33 1f       	adc	r19, r19
   1e494:	44 1f       	adc	r20, r20
   1e496:	aa 1f       	adc	r26, r26
   1e498:	a9 f3       	breq	.-22     	; 0x1e484 <__divsf3_pse+0x10>
   1e49a:	33 d0       	rcall	.+102    	; 0x1e502 <__divsf3_pse+0x8e>
   1e49c:	0e 2e       	mov	r0, r30
   1e49e:	3a f0       	brmi	.+14     	; 0x1e4ae <__divsf3_pse+0x3a>
   1e4a0:	e0 e8       	ldi	r30, 0x80	; 128
   1e4a2:	30 d0       	rcall	.+96     	; 0x1e504 <__divsf3_pse+0x90>
   1e4a4:	91 50       	subi	r25, 0x01	; 1
   1e4a6:	50 40       	sbci	r21, 0x00	; 0
   1e4a8:	e6 95       	lsr	r30
   1e4aa:	00 1c       	adc	r0, r0
   1e4ac:	ca f7       	brpl	.-14     	; 0x1e4a0 <__divsf3_pse+0x2c>
   1e4ae:	29 d0       	rcall	.+82     	; 0x1e502 <__divsf3_pse+0x8e>
   1e4b0:	fe 2f       	mov	r31, r30
   1e4b2:	27 d0       	rcall	.+78     	; 0x1e502 <__divsf3_pse+0x8e>
   1e4b4:	66 0f       	add	r22, r22
   1e4b6:	77 1f       	adc	r23, r23
   1e4b8:	88 1f       	adc	r24, r24
   1e4ba:	bb 1f       	adc	r27, r27
   1e4bc:	26 17       	cp	r18, r22
   1e4be:	37 07       	cpc	r19, r23
   1e4c0:	48 07       	cpc	r20, r24
   1e4c2:	ab 07       	cpc	r26, r27
   1e4c4:	b0 e8       	ldi	r27, 0x80	; 128
   1e4c6:	09 f0       	breq	.+2      	; 0x1e4ca <__divsf3_pse+0x56>
   1e4c8:	bb 0b       	sbc	r27, r27
   1e4ca:	80 2d       	mov	r24, r0
   1e4cc:	bf 01       	movw	r22, r30
   1e4ce:	ff 27       	eor	r31, r31
   1e4d0:	93 58       	subi	r25, 0x83	; 131
   1e4d2:	5f 4f       	sbci	r21, 0xFF	; 255
   1e4d4:	2a f0       	brmi	.+10     	; 0x1e4e0 <__divsf3_pse+0x6c>
   1e4d6:	9e 3f       	cpi	r25, 0xFE	; 254
   1e4d8:	51 05       	cpc	r21, r1
   1e4da:	68 f0       	brcs	.+26     	; 0x1e4f6 <__divsf3_pse+0x82>
   1e4dc:	2e c1       	rjmp	.+604    	; 0x1e73a <__fp_inf>
   1e4de:	88 c1       	rjmp	.+784    	; 0x1e7f0 <__fp_szero>
   1e4e0:	5f 3f       	cpi	r21, 0xFF	; 255
   1e4e2:	ec f3       	brlt	.-6      	; 0x1e4de <__divsf3_pse+0x6a>
   1e4e4:	98 3e       	cpi	r25, 0xE8	; 232
   1e4e6:	dc f3       	brlt	.-10     	; 0x1e4de <__divsf3_pse+0x6a>
   1e4e8:	86 95       	lsr	r24
   1e4ea:	77 95       	ror	r23
   1e4ec:	67 95       	ror	r22
   1e4ee:	b7 95       	ror	r27
   1e4f0:	f7 95       	ror	r31
   1e4f2:	9f 5f       	subi	r25, 0xFF	; 255
   1e4f4:	c9 f7       	brne	.-14     	; 0x1e4e8 <__divsf3_pse+0x74>
   1e4f6:	88 0f       	add	r24, r24
   1e4f8:	91 1d       	adc	r25, r1
   1e4fa:	96 95       	lsr	r25
   1e4fc:	87 95       	ror	r24
   1e4fe:	97 f9       	bld	r25, 7
   1e500:	08 95       	ret
   1e502:	e1 e0       	ldi	r30, 0x01	; 1
   1e504:	66 0f       	add	r22, r22
   1e506:	77 1f       	adc	r23, r23
   1e508:	88 1f       	adc	r24, r24
   1e50a:	bb 1f       	adc	r27, r27
   1e50c:	62 17       	cp	r22, r18
   1e50e:	73 07       	cpc	r23, r19
   1e510:	84 07       	cpc	r24, r20
   1e512:	ba 07       	cpc	r27, r26
   1e514:	20 f0       	brcs	.+8      	; 0x1e51e <__divsf3_pse+0xaa>
   1e516:	62 1b       	sub	r22, r18
   1e518:	73 0b       	sbc	r23, r19
   1e51a:	84 0b       	sbc	r24, r20
   1e51c:	ba 0b       	sbc	r27, r26
   1e51e:	ee 1f       	adc	r30, r30
   1e520:	88 f7       	brcc	.-30     	; 0x1e504 <__divsf3_pse+0x90>
   1e522:	e0 95       	com	r30
   1e524:	08 95       	ret

0001e526 <__fixsfdi>:
   1e526:	be e3       	ldi	r27, 0x3E	; 62
   1e528:	04 d0       	rcall	.+8      	; 0x1e532 <__fixunssfdi+0x2>
   1e52a:	08 f4       	brcc	.+2      	; 0x1e52e <__fixsfdi+0x8>
   1e52c:	90 e8       	ldi	r25, 0x80	; 128
   1e52e:	08 95       	ret

0001e530 <__fixunssfdi>:
   1e530:	bf e3       	ldi	r27, 0x3F	; 63
   1e532:	22 27       	eor	r18, r18
   1e534:	33 27       	eor	r19, r19
   1e536:	a9 01       	movw	r20, r18
   1e538:	40 d1       	rcall	.+640    	; 0x1e7ba <__fp_splitA>
   1e53a:	58 f1       	brcs	.+86     	; 0x1e592 <__fixunssfdi+0x62>
   1e53c:	9f 57       	subi	r25, 0x7F	; 127
   1e53e:	40 f1       	brcs	.+80     	; 0x1e590 <__fixunssfdi+0x60>
   1e540:	b9 17       	cp	r27, r25
   1e542:	38 f1       	brcs	.+78     	; 0x1e592 <__fixunssfdi+0x62>
   1e544:	bf e3       	ldi	r27, 0x3F	; 63
   1e546:	b9 1b       	sub	r27, r25
   1e548:	99 27       	eor	r25, r25
   1e54a:	b8 50       	subi	r27, 0x08	; 8
   1e54c:	3a f4       	brpl	.+14     	; 0x1e55c <__fixunssfdi+0x2c>
   1e54e:	66 0f       	add	r22, r22
   1e550:	77 1f       	adc	r23, r23
   1e552:	88 1f       	adc	r24, r24
   1e554:	99 1f       	adc	r25, r25
   1e556:	b3 95       	inc	r27
   1e558:	d2 f3       	brmi	.-12     	; 0x1e54e <__fixunssfdi+0x1e>
   1e55a:	16 c0       	rjmp	.+44     	; 0x1e588 <__fixunssfdi+0x58>
   1e55c:	b8 50       	subi	r27, 0x08	; 8
   1e55e:	4a f0       	brmi	.+18     	; 0x1e572 <__fixunssfdi+0x42>
   1e560:	23 2f       	mov	r18, r19
   1e562:	34 2f       	mov	r19, r20
   1e564:	45 2f       	mov	r20, r21
   1e566:	56 2f       	mov	r21, r22
   1e568:	67 2f       	mov	r22, r23
   1e56a:	78 2f       	mov	r23, r24
   1e56c:	88 27       	eor	r24, r24
   1e56e:	b8 50       	subi	r27, 0x08	; 8
   1e570:	ba f7       	brpl	.-18     	; 0x1e560 <__fixunssfdi+0x30>
   1e572:	b8 5f       	subi	r27, 0xF8	; 248
   1e574:	49 f0       	breq	.+18     	; 0x1e588 <__fixunssfdi+0x58>
   1e576:	86 95       	lsr	r24
   1e578:	77 95       	ror	r23
   1e57a:	67 95       	ror	r22
   1e57c:	57 95       	ror	r21
   1e57e:	47 95       	ror	r20
   1e580:	37 95       	ror	r19
   1e582:	27 95       	ror	r18
   1e584:	ba 95       	dec	r27
   1e586:	b9 f7       	brne	.-18     	; 0x1e576 <__fixunssfdi+0x46>
   1e588:	0e f4       	brtc	.+2      	; 0x1e58c <__fixunssfdi+0x5c>
   1e58a:	e0 d0       	rcall	.+448    	; 0x1e74c <__fp_negdi>
   1e58c:	88 94       	clc
   1e58e:	08 95       	ret
   1e590:	88 94       	clc
   1e592:	60 e0       	ldi	r22, 0x00	; 0
   1e594:	70 e0       	ldi	r23, 0x00	; 0
   1e596:	cb 01       	movw	r24, r22
   1e598:	08 95       	ret

0001e59a <__fixsfsi>:
   1e59a:	04 d0       	rcall	.+8      	; 0x1e5a4 <__fixunssfsi>
   1e59c:	68 94       	set
   1e59e:	b1 11       	cpse	r27, r1
   1e5a0:	27 c1       	rjmp	.+590    	; 0x1e7f0 <__fp_szero>
   1e5a2:	08 95       	ret

0001e5a4 <__fixunssfsi>:
   1e5a4:	0a d1       	rcall	.+532    	; 0x1e7ba <__fp_splitA>
   1e5a6:	88 f0       	brcs	.+34     	; 0x1e5ca <__fixunssfsi+0x26>
   1e5a8:	9f 57       	subi	r25, 0x7F	; 127
   1e5aa:	90 f0       	brcs	.+36     	; 0x1e5d0 <__fixunssfsi+0x2c>
   1e5ac:	b9 2f       	mov	r27, r25
   1e5ae:	99 27       	eor	r25, r25
   1e5b0:	b7 51       	subi	r27, 0x17	; 23
   1e5b2:	a0 f0       	brcs	.+40     	; 0x1e5dc <__fixunssfsi+0x38>
   1e5b4:	d1 f0       	breq	.+52     	; 0x1e5ea <__fixunssfsi+0x46>
   1e5b6:	66 0f       	add	r22, r22
   1e5b8:	77 1f       	adc	r23, r23
   1e5ba:	88 1f       	adc	r24, r24
   1e5bc:	99 1f       	adc	r25, r25
   1e5be:	1a f0       	brmi	.+6      	; 0x1e5c6 <__fixunssfsi+0x22>
   1e5c0:	ba 95       	dec	r27
   1e5c2:	c9 f7       	brne	.-14     	; 0x1e5b6 <__fixunssfsi+0x12>
   1e5c4:	12 c0       	rjmp	.+36     	; 0x1e5ea <__fixunssfsi+0x46>
   1e5c6:	b1 30       	cpi	r27, 0x01	; 1
   1e5c8:	81 f0       	breq	.+32     	; 0x1e5ea <__fixunssfsi+0x46>
   1e5ca:	11 d1       	rcall	.+546    	; 0x1e7ee <__fp_zero>
   1e5cc:	b1 e0       	ldi	r27, 0x01	; 1
   1e5ce:	08 95       	ret
   1e5d0:	0e c1       	rjmp	.+540    	; 0x1e7ee <__fp_zero>
   1e5d2:	67 2f       	mov	r22, r23
   1e5d4:	78 2f       	mov	r23, r24
   1e5d6:	88 27       	eor	r24, r24
   1e5d8:	b8 5f       	subi	r27, 0xF8	; 248
   1e5da:	39 f0       	breq	.+14     	; 0x1e5ea <__fixunssfsi+0x46>
   1e5dc:	b9 3f       	cpi	r27, 0xF9	; 249
   1e5de:	cc f3       	brlt	.-14     	; 0x1e5d2 <__fixunssfsi+0x2e>
   1e5e0:	86 95       	lsr	r24
   1e5e2:	77 95       	ror	r23
   1e5e4:	67 95       	ror	r22
   1e5e6:	b3 95       	inc	r27
   1e5e8:	d9 f7       	brne	.-10     	; 0x1e5e0 <__fixunssfsi+0x3c>
   1e5ea:	3e f4       	brtc	.+14     	; 0x1e5fa <__fixunssfsi+0x56>
   1e5ec:	90 95       	com	r25
   1e5ee:	80 95       	com	r24
   1e5f0:	70 95       	com	r23
   1e5f2:	61 95       	neg	r22
   1e5f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1e5f6:	8f 4f       	sbci	r24, 0xFF	; 255
   1e5f8:	9f 4f       	sbci	r25, 0xFF	; 255
   1e5fa:	08 95       	ret

0001e5fc <__floatunsisf>:
   1e5fc:	e8 94       	clt
   1e5fe:	09 c0       	rjmp	.+18     	; 0x1e612 <__floatsisf+0x12>

0001e600 <__floatsisf>:
   1e600:	97 fb       	bst	r25, 7
   1e602:	3e f4       	brtc	.+14     	; 0x1e612 <__floatsisf+0x12>
   1e604:	90 95       	com	r25
   1e606:	80 95       	com	r24
   1e608:	70 95       	com	r23
   1e60a:	61 95       	neg	r22
   1e60c:	7f 4f       	sbci	r23, 0xFF	; 255
   1e60e:	8f 4f       	sbci	r24, 0xFF	; 255
   1e610:	9f 4f       	sbci	r25, 0xFF	; 255
   1e612:	99 23       	and	r25, r25
   1e614:	a9 f0       	breq	.+42     	; 0x1e640 <__floatsisf+0x40>
   1e616:	f9 2f       	mov	r31, r25
   1e618:	96 e9       	ldi	r25, 0x96	; 150
   1e61a:	bb 27       	eor	r27, r27
   1e61c:	93 95       	inc	r25
   1e61e:	f6 95       	lsr	r31
   1e620:	87 95       	ror	r24
   1e622:	77 95       	ror	r23
   1e624:	67 95       	ror	r22
   1e626:	b7 95       	ror	r27
   1e628:	f1 11       	cpse	r31, r1
   1e62a:	f8 cf       	rjmp	.-16     	; 0x1e61c <__floatsisf+0x1c>
   1e62c:	fa f4       	brpl	.+62     	; 0x1e66c <__floatsisf+0x6c>
   1e62e:	bb 0f       	add	r27, r27
   1e630:	11 f4       	brne	.+4      	; 0x1e636 <__floatsisf+0x36>
   1e632:	60 ff       	sbrs	r22, 0
   1e634:	1b c0       	rjmp	.+54     	; 0x1e66c <__floatsisf+0x6c>
   1e636:	6f 5f       	subi	r22, 0xFF	; 255
   1e638:	7f 4f       	sbci	r23, 0xFF	; 255
   1e63a:	8f 4f       	sbci	r24, 0xFF	; 255
   1e63c:	9f 4f       	sbci	r25, 0xFF	; 255
   1e63e:	16 c0       	rjmp	.+44     	; 0x1e66c <__floatsisf+0x6c>
   1e640:	88 23       	and	r24, r24
   1e642:	11 f0       	breq	.+4      	; 0x1e648 <__floatsisf+0x48>
   1e644:	96 e9       	ldi	r25, 0x96	; 150
   1e646:	11 c0       	rjmp	.+34     	; 0x1e66a <__floatsisf+0x6a>
   1e648:	77 23       	and	r23, r23
   1e64a:	21 f0       	breq	.+8      	; 0x1e654 <__floatsisf+0x54>
   1e64c:	9e e8       	ldi	r25, 0x8E	; 142
   1e64e:	87 2f       	mov	r24, r23
   1e650:	76 2f       	mov	r23, r22
   1e652:	05 c0       	rjmp	.+10     	; 0x1e65e <__floatsisf+0x5e>
   1e654:	66 23       	and	r22, r22
   1e656:	71 f0       	breq	.+28     	; 0x1e674 <__floatsisf+0x74>
   1e658:	96 e8       	ldi	r25, 0x86	; 134
   1e65a:	86 2f       	mov	r24, r22
   1e65c:	70 e0       	ldi	r23, 0x00	; 0
   1e65e:	60 e0       	ldi	r22, 0x00	; 0
   1e660:	2a f0       	brmi	.+10     	; 0x1e66c <__floatsisf+0x6c>
   1e662:	9a 95       	dec	r25
   1e664:	66 0f       	add	r22, r22
   1e666:	77 1f       	adc	r23, r23
   1e668:	88 1f       	adc	r24, r24
   1e66a:	da f7       	brpl	.-10     	; 0x1e662 <__floatsisf+0x62>
   1e66c:	88 0f       	add	r24, r24
   1e66e:	96 95       	lsr	r25
   1e670:	87 95       	ror	r24
   1e672:	97 f9       	bld	r25, 7
   1e674:	08 95       	ret

0001e676 <__floatundisf>:
   1e676:	e8 94       	clt

0001e678 <__fp_di2sf>:
   1e678:	f9 2f       	mov	r31, r25
   1e67a:	96 eb       	ldi	r25, 0xB6	; 182
   1e67c:	ff 23       	and	r31, r31
   1e67e:	81 f0       	breq	.+32     	; 0x1e6a0 <__fp_di2sf+0x28>
   1e680:	12 16       	cp	r1, r18
   1e682:	13 06       	cpc	r1, r19
   1e684:	14 06       	cpc	r1, r20
   1e686:	44 0b       	sbc	r20, r20
   1e688:	93 95       	inc	r25
   1e68a:	f6 95       	lsr	r31
   1e68c:	87 95       	ror	r24
   1e68e:	77 95       	ror	r23
   1e690:	67 95       	ror	r22
   1e692:	57 95       	ror	r21
   1e694:	40 40       	sbci	r20, 0x00	; 0
   1e696:	ff 23       	and	r31, r31
   1e698:	b9 f7       	brne	.-18     	; 0x1e688 <__fp_di2sf+0x10>
   1e69a:	1b c0       	rjmp	.+54     	; 0x1e6d2 <__fp_di2sf+0x5a>
   1e69c:	99 27       	eor	r25, r25
   1e69e:	08 95       	ret
   1e6a0:	88 23       	and	r24, r24
   1e6a2:	51 f4       	brne	.+20     	; 0x1e6b8 <__fp_di2sf+0x40>
   1e6a4:	98 50       	subi	r25, 0x08	; 8
   1e6a6:	d2 f7       	brpl	.-12     	; 0x1e69c <__fp_di2sf+0x24>
   1e6a8:	87 2b       	or	r24, r23
   1e6aa:	76 2f       	mov	r23, r22
   1e6ac:	65 2f       	mov	r22, r21
   1e6ae:	54 2f       	mov	r21, r20
   1e6b0:	43 2f       	mov	r20, r19
   1e6b2:	32 2f       	mov	r19, r18
   1e6b4:	20 e0       	ldi	r18, 0x00	; 0
   1e6b6:	b1 f3       	breq	.-20     	; 0x1e6a4 <__fp_di2sf+0x2c>
   1e6b8:	12 16       	cp	r1, r18
   1e6ba:	13 06       	cpc	r1, r19
   1e6bc:	14 06       	cpc	r1, r20
   1e6be:	44 0b       	sbc	r20, r20
   1e6c0:	88 23       	and	r24, r24
   1e6c2:	3a f0       	brmi	.+14     	; 0x1e6d2 <__fp_di2sf+0x5a>
   1e6c4:	9a 95       	dec	r25
   1e6c6:	44 0f       	add	r20, r20
   1e6c8:	55 1f       	adc	r21, r21
   1e6ca:	66 1f       	adc	r22, r22
   1e6cc:	77 1f       	adc	r23, r23
   1e6ce:	88 1f       	adc	r24, r24
   1e6d0:	ca f7       	brpl	.-14     	; 0x1e6c4 <__fp_di2sf+0x4c>
   1e6d2:	55 23       	and	r21, r21
   1e6d4:	4a f4       	brpl	.+18     	; 0x1e6e8 <__fp_di2sf+0x70>
   1e6d6:	44 0f       	add	r20, r20
   1e6d8:	55 1f       	adc	r21, r21
   1e6da:	11 f4       	brne	.+4      	; 0x1e6e0 <__fp_di2sf+0x68>
   1e6dc:	60 ff       	sbrs	r22, 0
   1e6de:	04 c0       	rjmp	.+8      	; 0x1e6e8 <__fp_di2sf+0x70>
   1e6e0:	6f 5f       	subi	r22, 0xFF	; 255
   1e6e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1e6e4:	8f 4f       	sbci	r24, 0xFF	; 255
   1e6e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1e6e8:	88 0f       	add	r24, r24
   1e6ea:	96 95       	lsr	r25
   1e6ec:	87 95       	ror	r24
   1e6ee:	97 f9       	bld	r25, 7
   1e6f0:	08 95       	ret

0001e6f2 <__fp_cmp>:
   1e6f2:	99 0f       	add	r25, r25
   1e6f4:	00 08       	sbc	r0, r0
   1e6f6:	55 0f       	add	r21, r21
   1e6f8:	aa 0b       	sbc	r26, r26
   1e6fa:	e0 e8       	ldi	r30, 0x80	; 128
   1e6fc:	fe ef       	ldi	r31, 0xFE	; 254
   1e6fe:	16 16       	cp	r1, r22
   1e700:	17 06       	cpc	r1, r23
   1e702:	e8 07       	cpc	r30, r24
   1e704:	f9 07       	cpc	r31, r25
   1e706:	c0 f0       	brcs	.+48     	; 0x1e738 <__fp_cmp+0x46>
   1e708:	12 16       	cp	r1, r18
   1e70a:	13 06       	cpc	r1, r19
   1e70c:	e4 07       	cpc	r30, r20
   1e70e:	f5 07       	cpc	r31, r21
   1e710:	98 f0       	brcs	.+38     	; 0x1e738 <__fp_cmp+0x46>
   1e712:	62 1b       	sub	r22, r18
   1e714:	73 0b       	sbc	r23, r19
   1e716:	84 0b       	sbc	r24, r20
   1e718:	95 0b       	sbc	r25, r21
   1e71a:	39 f4       	brne	.+14     	; 0x1e72a <__fp_cmp+0x38>
   1e71c:	0a 26       	eor	r0, r26
   1e71e:	61 f0       	breq	.+24     	; 0x1e738 <__fp_cmp+0x46>
   1e720:	23 2b       	or	r18, r19
   1e722:	24 2b       	or	r18, r20
   1e724:	25 2b       	or	r18, r21
   1e726:	21 f4       	brne	.+8      	; 0x1e730 <__fp_cmp+0x3e>
   1e728:	08 95       	ret
   1e72a:	0a 26       	eor	r0, r26
   1e72c:	09 f4       	brne	.+2      	; 0x1e730 <__fp_cmp+0x3e>
   1e72e:	a1 40       	sbci	r26, 0x01	; 1
   1e730:	a6 95       	lsr	r26
   1e732:	8f ef       	ldi	r24, 0xFF	; 255
   1e734:	81 1d       	adc	r24, r1
   1e736:	81 1d       	adc	r24, r1
   1e738:	08 95       	ret

0001e73a <__fp_inf>:
   1e73a:	97 f9       	bld	r25, 7
   1e73c:	9f 67       	ori	r25, 0x7F	; 127
   1e73e:	80 e8       	ldi	r24, 0x80	; 128
   1e740:	70 e0       	ldi	r23, 0x00	; 0
   1e742:	60 e0       	ldi	r22, 0x00	; 0
   1e744:	08 95       	ret

0001e746 <__fp_nan>:
   1e746:	9f ef       	ldi	r25, 0xFF	; 255
   1e748:	80 ec       	ldi	r24, 0xC0	; 192
   1e74a:	08 95       	ret

0001e74c <__fp_negdi>:
   1e74c:	90 95       	com	r25
   1e74e:	80 95       	com	r24
   1e750:	70 95       	com	r23
   1e752:	60 95       	com	r22
   1e754:	50 95       	com	r21
   1e756:	40 95       	com	r20
   1e758:	30 95       	com	r19
   1e75a:	21 95       	neg	r18
   1e75c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e75e:	4f 4f       	sbci	r20, 0xFF	; 255
   1e760:	5f 4f       	sbci	r21, 0xFF	; 255
   1e762:	6f 4f       	sbci	r22, 0xFF	; 255
   1e764:	7f 4f       	sbci	r23, 0xFF	; 255
   1e766:	8f 4f       	sbci	r24, 0xFF	; 255
   1e768:	9f 4f       	sbci	r25, 0xFF	; 255
   1e76a:	08 95       	ret

0001e76c <__fp_pscA>:
   1e76c:	00 24       	eor	r0, r0
   1e76e:	0a 94       	dec	r0
   1e770:	16 16       	cp	r1, r22
   1e772:	17 06       	cpc	r1, r23
   1e774:	18 06       	cpc	r1, r24
   1e776:	09 06       	cpc	r0, r25
   1e778:	08 95       	ret

0001e77a <__fp_pscB>:
   1e77a:	00 24       	eor	r0, r0
   1e77c:	0a 94       	dec	r0
   1e77e:	12 16       	cp	r1, r18
   1e780:	13 06       	cpc	r1, r19
   1e782:	14 06       	cpc	r1, r20
   1e784:	05 06       	cpc	r0, r21
   1e786:	08 95       	ret

0001e788 <__fp_round>:
   1e788:	09 2e       	mov	r0, r25
   1e78a:	03 94       	inc	r0
   1e78c:	00 0c       	add	r0, r0
   1e78e:	11 f4       	brne	.+4      	; 0x1e794 <__fp_round+0xc>
   1e790:	88 23       	and	r24, r24
   1e792:	52 f0       	brmi	.+20     	; 0x1e7a8 <__fp_round+0x20>
   1e794:	bb 0f       	add	r27, r27
   1e796:	40 f4       	brcc	.+16     	; 0x1e7a8 <__fp_round+0x20>
   1e798:	bf 2b       	or	r27, r31
   1e79a:	11 f4       	brne	.+4      	; 0x1e7a0 <__fp_round+0x18>
   1e79c:	60 ff       	sbrs	r22, 0
   1e79e:	04 c0       	rjmp	.+8      	; 0x1e7a8 <__fp_round+0x20>
   1e7a0:	6f 5f       	subi	r22, 0xFF	; 255
   1e7a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1e7a4:	8f 4f       	sbci	r24, 0xFF	; 255
   1e7a6:	9f 4f       	sbci	r25, 0xFF	; 255
   1e7a8:	08 95       	ret

0001e7aa <__fp_split3>:
   1e7aa:	57 fd       	sbrc	r21, 7
   1e7ac:	90 58       	subi	r25, 0x80	; 128
   1e7ae:	44 0f       	add	r20, r20
   1e7b0:	55 1f       	adc	r21, r21
   1e7b2:	59 f0       	breq	.+22     	; 0x1e7ca <__fp_splitA+0x10>
   1e7b4:	5f 3f       	cpi	r21, 0xFF	; 255
   1e7b6:	71 f0       	breq	.+28     	; 0x1e7d4 <__fp_splitA+0x1a>
   1e7b8:	47 95       	ror	r20

0001e7ba <__fp_splitA>:
   1e7ba:	88 0f       	add	r24, r24
   1e7bc:	97 fb       	bst	r25, 7
   1e7be:	99 1f       	adc	r25, r25
   1e7c0:	61 f0       	breq	.+24     	; 0x1e7da <__fp_splitA+0x20>
   1e7c2:	9f 3f       	cpi	r25, 0xFF	; 255
   1e7c4:	79 f0       	breq	.+30     	; 0x1e7e4 <__fp_splitA+0x2a>
   1e7c6:	87 95       	ror	r24
   1e7c8:	08 95       	ret
   1e7ca:	12 16       	cp	r1, r18
   1e7cc:	13 06       	cpc	r1, r19
   1e7ce:	14 06       	cpc	r1, r20
   1e7d0:	55 1f       	adc	r21, r21
   1e7d2:	f2 cf       	rjmp	.-28     	; 0x1e7b8 <__fp_split3+0xe>
   1e7d4:	46 95       	lsr	r20
   1e7d6:	f1 df       	rcall	.-30     	; 0x1e7ba <__fp_splitA>
   1e7d8:	08 c0       	rjmp	.+16     	; 0x1e7ea <__fp_splitA+0x30>
   1e7da:	16 16       	cp	r1, r22
   1e7dc:	17 06       	cpc	r1, r23
   1e7de:	18 06       	cpc	r1, r24
   1e7e0:	99 1f       	adc	r25, r25
   1e7e2:	f1 cf       	rjmp	.-30     	; 0x1e7c6 <__fp_splitA+0xc>
   1e7e4:	86 95       	lsr	r24
   1e7e6:	71 05       	cpc	r23, r1
   1e7e8:	61 05       	cpc	r22, r1
   1e7ea:	08 94       	sec
   1e7ec:	08 95       	ret

0001e7ee <__fp_zero>:
   1e7ee:	e8 94       	clt

0001e7f0 <__fp_szero>:
   1e7f0:	bb 27       	eor	r27, r27
   1e7f2:	66 27       	eor	r22, r22
   1e7f4:	77 27       	eor	r23, r23
   1e7f6:	cb 01       	movw	r24, r22
   1e7f8:	97 f9       	bld	r25, 7
   1e7fa:	08 95       	ret

0001e7fc <__gesf2>:
   1e7fc:	7a df       	rcall	.-268    	; 0x1e6f2 <__fp_cmp>
   1e7fe:	08 f4       	brcc	.+2      	; 0x1e802 <__gesf2+0x6>
   1e800:	8f ef       	ldi	r24, 0xFF	; 255
   1e802:	08 95       	ret

0001e804 <__mulsf3>:
   1e804:	0b d0       	rcall	.+22     	; 0x1e81c <__mulsf3x>
   1e806:	c0 cf       	rjmp	.-128    	; 0x1e788 <__fp_round>
   1e808:	b1 df       	rcall	.-158    	; 0x1e76c <__fp_pscA>
   1e80a:	28 f0       	brcs	.+10     	; 0x1e816 <__mulsf3+0x12>
   1e80c:	b6 df       	rcall	.-148    	; 0x1e77a <__fp_pscB>
   1e80e:	18 f0       	brcs	.+6      	; 0x1e816 <__mulsf3+0x12>
   1e810:	95 23       	and	r25, r21
   1e812:	09 f0       	breq	.+2      	; 0x1e816 <__mulsf3+0x12>
   1e814:	92 cf       	rjmp	.-220    	; 0x1e73a <__fp_inf>
   1e816:	97 cf       	rjmp	.-210    	; 0x1e746 <__fp_nan>
   1e818:	11 24       	eor	r1, r1
   1e81a:	ea cf       	rjmp	.-44     	; 0x1e7f0 <__fp_szero>

0001e81c <__mulsf3x>:
   1e81c:	c6 df       	rcall	.-116    	; 0x1e7aa <__fp_split3>
   1e81e:	a0 f3       	brcs	.-24     	; 0x1e808 <__mulsf3+0x4>

0001e820 <__mulsf3_pse>:
   1e820:	95 9f       	mul	r25, r21
   1e822:	d1 f3       	breq	.-12     	; 0x1e818 <__mulsf3+0x14>
   1e824:	95 0f       	add	r25, r21
   1e826:	50 e0       	ldi	r21, 0x00	; 0
   1e828:	55 1f       	adc	r21, r21
   1e82a:	62 9f       	mul	r22, r18
   1e82c:	f0 01       	movw	r30, r0
   1e82e:	72 9f       	mul	r23, r18
   1e830:	bb 27       	eor	r27, r27
   1e832:	f0 0d       	add	r31, r0
   1e834:	b1 1d       	adc	r27, r1
   1e836:	63 9f       	mul	r22, r19
   1e838:	aa 27       	eor	r26, r26
   1e83a:	f0 0d       	add	r31, r0
   1e83c:	b1 1d       	adc	r27, r1
   1e83e:	aa 1f       	adc	r26, r26
   1e840:	64 9f       	mul	r22, r20
   1e842:	66 27       	eor	r22, r22
   1e844:	b0 0d       	add	r27, r0
   1e846:	a1 1d       	adc	r26, r1
   1e848:	66 1f       	adc	r22, r22
   1e84a:	82 9f       	mul	r24, r18
   1e84c:	22 27       	eor	r18, r18
   1e84e:	b0 0d       	add	r27, r0
   1e850:	a1 1d       	adc	r26, r1
   1e852:	62 1f       	adc	r22, r18
   1e854:	73 9f       	mul	r23, r19
   1e856:	b0 0d       	add	r27, r0
   1e858:	a1 1d       	adc	r26, r1
   1e85a:	62 1f       	adc	r22, r18
   1e85c:	83 9f       	mul	r24, r19
   1e85e:	a0 0d       	add	r26, r0
   1e860:	61 1d       	adc	r22, r1
   1e862:	22 1f       	adc	r18, r18
   1e864:	74 9f       	mul	r23, r20
   1e866:	33 27       	eor	r19, r19
   1e868:	a0 0d       	add	r26, r0
   1e86a:	61 1d       	adc	r22, r1
   1e86c:	23 1f       	adc	r18, r19
   1e86e:	84 9f       	mul	r24, r20
   1e870:	60 0d       	add	r22, r0
   1e872:	21 1d       	adc	r18, r1
   1e874:	82 2f       	mov	r24, r18
   1e876:	76 2f       	mov	r23, r22
   1e878:	6a 2f       	mov	r22, r26
   1e87a:	11 24       	eor	r1, r1
   1e87c:	9f 57       	subi	r25, 0x7F	; 127
   1e87e:	50 40       	sbci	r21, 0x00	; 0
   1e880:	8a f0       	brmi	.+34     	; 0x1e8a4 <__mulsf3_pse+0x84>
   1e882:	e1 f0       	breq	.+56     	; 0x1e8bc <__mulsf3_pse+0x9c>
   1e884:	88 23       	and	r24, r24
   1e886:	4a f0       	brmi	.+18     	; 0x1e89a <__mulsf3_pse+0x7a>
   1e888:	ee 0f       	add	r30, r30
   1e88a:	ff 1f       	adc	r31, r31
   1e88c:	bb 1f       	adc	r27, r27
   1e88e:	66 1f       	adc	r22, r22
   1e890:	77 1f       	adc	r23, r23
   1e892:	88 1f       	adc	r24, r24
   1e894:	91 50       	subi	r25, 0x01	; 1
   1e896:	50 40       	sbci	r21, 0x00	; 0
   1e898:	a9 f7       	brne	.-22     	; 0x1e884 <__mulsf3_pse+0x64>
   1e89a:	9e 3f       	cpi	r25, 0xFE	; 254
   1e89c:	51 05       	cpc	r21, r1
   1e89e:	70 f0       	brcs	.+28     	; 0x1e8bc <__mulsf3_pse+0x9c>
   1e8a0:	4c cf       	rjmp	.-360    	; 0x1e73a <__fp_inf>
   1e8a2:	a6 cf       	rjmp	.-180    	; 0x1e7f0 <__fp_szero>
   1e8a4:	5f 3f       	cpi	r21, 0xFF	; 255
   1e8a6:	ec f3       	brlt	.-6      	; 0x1e8a2 <__mulsf3_pse+0x82>
   1e8a8:	98 3e       	cpi	r25, 0xE8	; 232
   1e8aa:	dc f3       	brlt	.-10     	; 0x1e8a2 <__mulsf3_pse+0x82>
   1e8ac:	86 95       	lsr	r24
   1e8ae:	77 95       	ror	r23
   1e8b0:	67 95       	ror	r22
   1e8b2:	b7 95       	ror	r27
   1e8b4:	f7 95       	ror	r31
   1e8b6:	e7 95       	ror	r30
   1e8b8:	9f 5f       	subi	r25, 0xFF	; 255
   1e8ba:	c1 f7       	brne	.-16     	; 0x1e8ac <__mulsf3_pse+0x8c>
   1e8bc:	fe 2b       	or	r31, r30
   1e8be:	88 0f       	add	r24, r24
   1e8c0:	91 1d       	adc	r25, r1
   1e8c2:	96 95       	lsr	r25
   1e8c4:	87 95       	ror	r24
   1e8c6:	97 f9       	bld	r25, 7
   1e8c8:	08 95       	ret
   1e8ca:	11 f4       	brne	.+4      	; 0x1e8d0 <__mulsf3_pse+0xb0>
   1e8cc:	0e f4       	brtc	.+2      	; 0x1e8d0 <__mulsf3_pse+0xb0>
   1e8ce:	3b cf       	rjmp	.-394    	; 0x1e746 <__fp_nan>
   1e8d0:	3e c0       	rjmp	.+124    	; 0x1e94e <__fp_mpack>

0001e8d2 <sqrt>:
   1e8d2:	73 df       	rcall	.-282    	; 0x1e7ba <__fp_splitA>
   1e8d4:	d0 f3       	brcs	.-12     	; 0x1e8ca <__mulsf3_pse+0xaa>
   1e8d6:	99 23       	and	r25, r25
   1e8d8:	d9 f3       	breq	.-10     	; 0x1e8d0 <__mulsf3_pse+0xb0>
   1e8da:	ce f3       	brts	.-14     	; 0x1e8ce <__mulsf3_pse+0xae>
   1e8dc:	9f 57       	subi	r25, 0x7F	; 127
   1e8de:	55 0b       	sbc	r21, r21
   1e8e0:	87 ff       	sbrs	r24, 7
   1e8e2:	43 d0       	rcall	.+134    	; 0x1e96a <__fp_norm2>
   1e8e4:	00 24       	eor	r0, r0
   1e8e6:	a0 e6       	ldi	r26, 0x60	; 96
   1e8e8:	40 ea       	ldi	r20, 0xA0	; 160
   1e8ea:	90 01       	movw	r18, r0
   1e8ec:	80 58       	subi	r24, 0x80	; 128
   1e8ee:	56 95       	lsr	r21
   1e8f0:	97 95       	ror	r25
   1e8f2:	28 f4       	brcc	.+10     	; 0x1e8fe <sqrt+0x2c>
   1e8f4:	80 5c       	subi	r24, 0xC0	; 192
   1e8f6:	66 0f       	add	r22, r22
   1e8f8:	77 1f       	adc	r23, r23
   1e8fa:	88 1f       	adc	r24, r24
   1e8fc:	20 f0       	brcs	.+8      	; 0x1e906 <sqrt+0x34>
   1e8fe:	26 17       	cp	r18, r22
   1e900:	37 07       	cpc	r19, r23
   1e902:	48 07       	cpc	r20, r24
   1e904:	30 f4       	brcc	.+12     	; 0x1e912 <sqrt+0x40>
   1e906:	62 1b       	sub	r22, r18
   1e908:	73 0b       	sbc	r23, r19
   1e90a:	84 0b       	sbc	r24, r20
   1e90c:	20 29       	or	r18, r0
   1e90e:	31 29       	or	r19, r1
   1e910:	4a 2b       	or	r20, r26
   1e912:	a6 95       	lsr	r26
   1e914:	17 94       	ror	r1
   1e916:	07 94       	ror	r0
   1e918:	20 25       	eor	r18, r0
   1e91a:	31 25       	eor	r19, r1
   1e91c:	4a 27       	eor	r20, r26
   1e91e:	58 f7       	brcc	.-42     	; 0x1e8f6 <sqrt+0x24>
   1e920:	66 0f       	add	r22, r22
   1e922:	77 1f       	adc	r23, r23
   1e924:	88 1f       	adc	r24, r24
   1e926:	20 f0       	brcs	.+8      	; 0x1e930 <sqrt+0x5e>
   1e928:	26 17       	cp	r18, r22
   1e92a:	37 07       	cpc	r19, r23
   1e92c:	48 07       	cpc	r20, r24
   1e92e:	30 f4       	brcc	.+12     	; 0x1e93c <sqrt+0x6a>
   1e930:	62 0b       	sbc	r22, r18
   1e932:	73 0b       	sbc	r23, r19
   1e934:	84 0b       	sbc	r24, r20
   1e936:	20 0d       	add	r18, r0
   1e938:	31 1d       	adc	r19, r1
   1e93a:	41 1d       	adc	r20, r1
   1e93c:	a0 95       	com	r26
   1e93e:	81 f7       	brne	.-32     	; 0x1e920 <sqrt+0x4e>
   1e940:	b9 01       	movw	r22, r18
   1e942:	84 2f       	mov	r24, r20
   1e944:	91 58       	subi	r25, 0x81	; 129
   1e946:	88 0f       	add	r24, r24
   1e948:	96 95       	lsr	r25
   1e94a:	87 95       	ror	r24
   1e94c:	08 95       	ret

0001e94e <__fp_mpack>:
   1e94e:	9f 3f       	cpi	r25, 0xFF	; 255
   1e950:	31 f0       	breq	.+12     	; 0x1e95e <__fp_mpack_finite+0xc>

0001e952 <__fp_mpack_finite>:
   1e952:	91 50       	subi	r25, 0x01	; 1
   1e954:	20 f4       	brcc	.+8      	; 0x1e95e <__fp_mpack_finite+0xc>
   1e956:	87 95       	ror	r24
   1e958:	77 95       	ror	r23
   1e95a:	67 95       	ror	r22
   1e95c:	b7 95       	ror	r27
   1e95e:	88 0f       	add	r24, r24
   1e960:	91 1d       	adc	r25, r1
   1e962:	96 95       	lsr	r25
   1e964:	87 95       	ror	r24
   1e966:	97 f9       	bld	r25, 7
   1e968:	08 95       	ret

0001e96a <__fp_norm2>:
   1e96a:	91 50       	subi	r25, 0x01	; 1
   1e96c:	50 40       	sbci	r21, 0x00	; 0
   1e96e:	66 0f       	add	r22, r22
   1e970:	77 1f       	adc	r23, r23
   1e972:	88 1f       	adc	r24, r24
   1e974:	d2 f7       	brpl	.-12     	; 0x1e96a <__fp_norm2>
   1e976:	08 95       	ret

0001e978 <malloc>:
   1e978:	cf 93       	push	r28
   1e97a:	df 93       	push	r29
   1e97c:	ac 01       	movw	r20, r24
   1e97e:	82 30       	cpi	r24, 0x02	; 2
   1e980:	91 05       	cpc	r25, r1
   1e982:	10 f4       	brcc	.+4      	; 0x1e988 <malloc+0x10>
   1e984:	42 e0       	ldi	r20, 0x02	; 2
   1e986:	50 e0       	ldi	r21, 0x00	; 0
   1e988:	e0 91 3c 2c 	lds	r30, 0x2C3C
   1e98c:	f0 91 3d 2c 	lds	r31, 0x2C3D
   1e990:	20 e0       	ldi	r18, 0x00	; 0
   1e992:	30 e0       	ldi	r19, 0x00	; 0
   1e994:	a0 e0       	ldi	r26, 0x00	; 0
   1e996:	b0 e0       	ldi	r27, 0x00	; 0
   1e998:	24 c0       	rjmp	.+72     	; 0x1e9e2 <malloc+0x6a>
   1e99a:	80 81       	ld	r24, Z
   1e99c:	91 81       	ldd	r25, Z+1	; 0x01
   1e99e:	84 17       	cp	r24, r20
   1e9a0:	95 07       	cpc	r25, r21
   1e9a2:	d0 f0       	brcs	.+52     	; 0x1e9d8 <malloc+0x60>
   1e9a4:	84 17       	cp	r24, r20
   1e9a6:	95 07       	cpc	r25, r21
   1e9a8:	71 f4       	brne	.+28     	; 0x1e9c6 <malloc+0x4e>
   1e9aa:	82 81       	ldd	r24, Z+2	; 0x02
   1e9ac:	93 81       	ldd	r25, Z+3	; 0x03
   1e9ae:	10 97       	sbiw	r26, 0x00	; 0
   1e9b0:	29 f0       	breq	.+10     	; 0x1e9bc <malloc+0x44>
   1e9b2:	12 96       	adiw	r26, 0x02	; 2
   1e9b4:	8d 93       	st	X+, r24
   1e9b6:	9c 93       	st	X, r25
   1e9b8:	13 97       	sbiw	r26, 0x03	; 3
   1e9ba:	2c c0       	rjmp	.+88     	; 0x1ea14 <malloc+0x9c>
   1e9bc:	80 93 3c 2c 	sts	0x2C3C, r24
   1e9c0:	90 93 3d 2c 	sts	0x2C3D, r25
   1e9c4:	27 c0       	rjmp	.+78     	; 0x1ea14 <malloc+0x9c>
   1e9c6:	21 15       	cp	r18, r1
   1e9c8:	31 05       	cpc	r19, r1
   1e9ca:	19 f0       	breq	.+6      	; 0x1e9d2 <malloc+0x5a>
   1e9cc:	82 17       	cp	r24, r18
   1e9ce:	93 07       	cpc	r25, r19
   1e9d0:	18 f4       	brcc	.+6      	; 0x1e9d8 <malloc+0x60>
   1e9d2:	9c 01       	movw	r18, r24
   1e9d4:	bd 01       	movw	r22, r26
   1e9d6:	ef 01       	movw	r28, r30
   1e9d8:	92 81       	ldd	r25, Z+2	; 0x02
   1e9da:	83 81       	ldd	r24, Z+3	; 0x03
   1e9dc:	df 01       	movw	r26, r30
   1e9de:	e9 2f       	mov	r30, r25
   1e9e0:	f8 2f       	mov	r31, r24
   1e9e2:	30 97       	sbiw	r30, 0x00	; 0
   1e9e4:	d1 f6       	brne	.-76     	; 0x1e99a <malloc+0x22>
   1e9e6:	21 15       	cp	r18, r1
   1e9e8:	31 05       	cpc	r19, r1
   1e9ea:	f9 f0       	breq	.+62     	; 0x1ea2a <malloc+0xb2>
   1e9ec:	c9 01       	movw	r24, r18
   1e9ee:	84 1b       	sub	r24, r20
   1e9f0:	95 0b       	sbc	r25, r21
   1e9f2:	84 30       	cpi	r24, 0x04	; 4
   1e9f4:	91 05       	cpc	r25, r1
   1e9f6:	80 f4       	brcc	.+32     	; 0x1ea18 <malloc+0xa0>
   1e9f8:	8a 81       	ldd	r24, Y+2	; 0x02
   1e9fa:	9b 81       	ldd	r25, Y+3	; 0x03
   1e9fc:	61 15       	cp	r22, r1
   1e9fe:	71 05       	cpc	r23, r1
   1ea00:	21 f0       	breq	.+8      	; 0x1ea0a <malloc+0x92>
   1ea02:	fb 01       	movw	r30, r22
   1ea04:	82 83       	std	Z+2, r24	; 0x02
   1ea06:	93 83       	std	Z+3, r25	; 0x03
   1ea08:	04 c0       	rjmp	.+8      	; 0x1ea12 <malloc+0x9a>
   1ea0a:	80 93 3c 2c 	sts	0x2C3C, r24
   1ea0e:	90 93 3d 2c 	sts	0x2C3D, r25
   1ea12:	fe 01       	movw	r30, r28
   1ea14:	32 96       	adiw	r30, 0x02	; 2
   1ea16:	42 c0       	rjmp	.+132    	; 0x1ea9c <malloc+0x124>
   1ea18:	fe 01       	movw	r30, r28
   1ea1a:	e8 0f       	add	r30, r24
   1ea1c:	f9 1f       	adc	r31, r25
   1ea1e:	41 93       	st	Z+, r20
   1ea20:	51 93       	st	Z+, r21
   1ea22:	02 97       	sbiw	r24, 0x02	; 2
   1ea24:	88 83       	st	Y, r24
   1ea26:	99 83       	std	Y+1, r25	; 0x01
   1ea28:	39 c0       	rjmp	.+114    	; 0x1ea9c <malloc+0x124>
   1ea2a:	80 91 3a 2c 	lds	r24, 0x2C3A
   1ea2e:	90 91 3b 2c 	lds	r25, 0x2C3B
   1ea32:	00 97       	sbiw	r24, 0x00	; 0
   1ea34:	41 f4       	brne	.+16     	; 0x1ea46 <malloc+0xce>
   1ea36:	80 91 67 23 	lds	r24, 0x2367
   1ea3a:	90 91 68 23 	lds	r25, 0x2368
   1ea3e:	80 93 3a 2c 	sts	0x2C3A, r24
   1ea42:	90 93 3b 2c 	sts	0x2C3B, r25
   1ea46:	20 91 65 23 	lds	r18, 0x2365
   1ea4a:	30 91 66 23 	lds	r19, 0x2366
   1ea4e:	21 15       	cp	r18, r1
   1ea50:	31 05       	cpc	r19, r1
   1ea52:	41 f4       	brne	.+16     	; 0x1ea64 <malloc+0xec>
   1ea54:	2d b7       	in	r18, 0x3d	; 61
   1ea56:	3e b7       	in	r19, 0x3e	; 62
   1ea58:	80 91 69 23 	lds	r24, 0x2369
   1ea5c:	90 91 6a 23 	lds	r25, 0x236A
   1ea60:	28 1b       	sub	r18, r24
   1ea62:	39 0b       	sbc	r19, r25
   1ea64:	e0 91 3a 2c 	lds	r30, 0x2C3A
   1ea68:	f0 91 3b 2c 	lds	r31, 0x2C3B
   1ea6c:	e2 17       	cp	r30, r18
   1ea6e:	f3 07       	cpc	r31, r19
   1ea70:	98 f4       	brcc	.+38     	; 0x1ea98 <malloc+0x120>
   1ea72:	2e 1b       	sub	r18, r30
   1ea74:	3f 0b       	sbc	r19, r31
   1ea76:	24 17       	cp	r18, r20
   1ea78:	35 07       	cpc	r19, r21
   1ea7a:	70 f0       	brcs	.+28     	; 0x1ea98 <malloc+0x120>
   1ea7c:	ca 01       	movw	r24, r20
   1ea7e:	02 96       	adiw	r24, 0x02	; 2
   1ea80:	28 17       	cp	r18, r24
   1ea82:	39 07       	cpc	r19, r25
   1ea84:	48 f0       	brcs	.+18     	; 0x1ea98 <malloc+0x120>
   1ea86:	8e 0f       	add	r24, r30
   1ea88:	9f 1f       	adc	r25, r31
   1ea8a:	80 93 3a 2c 	sts	0x2C3A, r24
   1ea8e:	90 93 3b 2c 	sts	0x2C3B, r25
   1ea92:	41 93       	st	Z+, r20
   1ea94:	51 93       	st	Z+, r21
   1ea96:	02 c0       	rjmp	.+4      	; 0x1ea9c <malloc+0x124>
   1ea98:	e0 e0       	ldi	r30, 0x00	; 0
   1ea9a:	f0 e0       	ldi	r31, 0x00	; 0
   1ea9c:	cf 01       	movw	r24, r30
   1ea9e:	df 91       	pop	r29
   1eaa0:	cf 91       	pop	r28
   1eaa2:	08 95       	ret

0001eaa4 <free>:
   1eaa4:	0f 93       	push	r16
   1eaa6:	1f 93       	push	r17
   1eaa8:	cf 93       	push	r28
   1eaaa:	df 93       	push	r29
   1eaac:	9c 01       	movw	r18, r24
   1eaae:	00 97       	sbiw	r24, 0x00	; 0
   1eab0:	09 f4       	brne	.+2      	; 0x1eab4 <free+0x10>
   1eab2:	8c c0       	rjmp	.+280    	; 0x1ebcc <free+0x128>
   1eab4:	dc 01       	movw	r26, r24
   1eab6:	12 97       	sbiw	r26, 0x02	; 2
   1eab8:	12 96       	adiw	r26, 0x02	; 2
   1eaba:	1d 92       	st	X+, r1
   1eabc:	1c 92       	st	X, r1
   1eabe:	13 97       	sbiw	r26, 0x03	; 3
   1eac0:	60 91 3c 2c 	lds	r22, 0x2C3C
   1eac4:	70 91 3d 2c 	lds	r23, 0x2C3D
   1eac8:	61 15       	cp	r22, r1
   1eaca:	71 05       	cpc	r23, r1
   1eacc:	89 f4       	brne	.+34     	; 0x1eaf0 <free+0x4c>
   1eace:	8d 91       	ld	r24, X+
   1ead0:	9c 91       	ld	r25, X
   1ead2:	11 97       	sbiw	r26, 0x01	; 1
   1ead4:	82 0f       	add	r24, r18
   1ead6:	93 1f       	adc	r25, r19
   1ead8:	20 91 3a 2c 	lds	r18, 0x2C3A
   1eadc:	30 91 3b 2c 	lds	r19, 0x2C3B
   1eae0:	28 17       	cp	r18, r24
   1eae2:	39 07       	cpc	r19, r25
   1eae4:	69 f5       	brne	.+90     	; 0x1eb40 <free+0x9c>
   1eae6:	a0 93 3a 2c 	sts	0x2C3A, r26
   1eaea:	b0 93 3b 2c 	sts	0x2C3B, r27
   1eaee:	6e c0       	rjmp	.+220    	; 0x1ebcc <free+0x128>
   1eaf0:	fb 01       	movw	r30, r22
   1eaf2:	40 e0       	ldi	r20, 0x00	; 0
   1eaf4:	50 e0       	ldi	r21, 0x00	; 0
   1eaf6:	01 c0       	rjmp	.+2      	; 0x1eafa <free+0x56>
   1eaf8:	fc 01       	movw	r30, r24
   1eafa:	ea 17       	cp	r30, r26
   1eafc:	fb 07       	cpc	r31, r27
   1eafe:	30 f4       	brcc	.+12     	; 0x1eb0c <free+0x68>
   1eb00:	82 81       	ldd	r24, Z+2	; 0x02
   1eb02:	93 81       	ldd	r25, Z+3	; 0x03
   1eb04:	af 01       	movw	r20, r30
   1eb06:	00 97       	sbiw	r24, 0x00	; 0
   1eb08:	b9 f7       	brne	.-18     	; 0x1eaf8 <free+0x54>
   1eb0a:	1f c0       	rjmp	.+62     	; 0x1eb4a <free+0xa6>
   1eb0c:	e9 01       	movw	r28, r18
   1eb0e:	22 97       	sbiw	r28, 0x02	; 2
   1eb10:	ea 83       	std	Y+2, r30	; 0x02
   1eb12:	fb 83       	std	Y+3, r31	; 0x03
   1eb14:	08 81       	ld	r16, Y
   1eb16:	19 81       	ldd	r17, Y+1	; 0x01
   1eb18:	c9 01       	movw	r24, r18
   1eb1a:	80 0f       	add	r24, r16
   1eb1c:	91 1f       	adc	r25, r17
   1eb1e:	8e 17       	cp	r24, r30
   1eb20:	9f 07       	cpc	r25, r31
   1eb22:	59 f4       	brne	.+22     	; 0x1eb3a <free+0x96>
   1eb24:	80 81       	ld	r24, Z
   1eb26:	91 81       	ldd	r25, Z+1	; 0x01
   1eb28:	80 0f       	add	r24, r16
   1eb2a:	91 1f       	adc	r25, r17
   1eb2c:	02 96       	adiw	r24, 0x02	; 2
   1eb2e:	88 83       	st	Y, r24
   1eb30:	99 83       	std	Y+1, r25	; 0x01
   1eb32:	82 81       	ldd	r24, Z+2	; 0x02
   1eb34:	93 81       	ldd	r25, Z+3	; 0x03
   1eb36:	8a 83       	std	Y+2, r24	; 0x02
   1eb38:	9b 83       	std	Y+3, r25	; 0x03
   1eb3a:	41 15       	cp	r20, r1
   1eb3c:	51 05       	cpc	r21, r1
   1eb3e:	29 f4       	brne	.+10     	; 0x1eb4a <free+0xa6>
   1eb40:	a0 93 3c 2c 	sts	0x2C3C, r26
   1eb44:	b0 93 3d 2c 	sts	0x2C3D, r27
   1eb48:	41 c0       	rjmp	.+130    	; 0x1ebcc <free+0x128>
   1eb4a:	fa 01       	movw	r30, r20
   1eb4c:	a2 83       	std	Z+2, r26	; 0x02
   1eb4e:	b3 83       	std	Z+3, r27	; 0x03
   1eb50:	c1 91       	ld	r28, Z+
   1eb52:	d1 91       	ld	r29, Z+
   1eb54:	ec 0f       	add	r30, r28
   1eb56:	fd 1f       	adc	r31, r29
   1eb58:	ae 17       	cp	r26, r30
   1eb5a:	bf 07       	cpc	r27, r31
   1eb5c:	81 f4       	brne	.+32     	; 0x1eb7e <free+0xda>
   1eb5e:	f9 01       	movw	r30, r18
   1eb60:	92 91       	ld	r25, -Z
   1eb62:	82 91       	ld	r24, -Z
   1eb64:	8c 0f       	add	r24, r28
   1eb66:	9d 1f       	adc	r25, r29
   1eb68:	02 96       	adiw	r24, 0x02	; 2
   1eb6a:	da 01       	movw	r26, r20
   1eb6c:	8d 93       	st	X+, r24
   1eb6e:	9c 93       	st	X, r25
   1eb70:	11 97       	sbiw	r26, 0x01	; 1
   1eb72:	82 81       	ldd	r24, Z+2	; 0x02
   1eb74:	93 81       	ldd	r25, Z+3	; 0x03
   1eb76:	12 96       	adiw	r26, 0x02	; 2
   1eb78:	8d 93       	st	X+, r24
   1eb7a:	9c 93       	st	X, r25
   1eb7c:	13 97       	sbiw	r26, 0x03	; 3
   1eb7e:	e0 e0       	ldi	r30, 0x00	; 0
   1eb80:	f0 e0       	ldi	r31, 0x00	; 0
   1eb82:	02 c0       	rjmp	.+4      	; 0x1eb88 <free+0xe4>
   1eb84:	fb 01       	movw	r30, r22
   1eb86:	bc 01       	movw	r22, r24
   1eb88:	db 01       	movw	r26, r22
   1eb8a:	12 96       	adiw	r26, 0x02	; 2
   1eb8c:	8d 91       	ld	r24, X+
   1eb8e:	9c 91       	ld	r25, X
   1eb90:	13 97       	sbiw	r26, 0x03	; 3
   1eb92:	00 97       	sbiw	r24, 0x00	; 0
   1eb94:	b9 f7       	brne	.-18     	; 0x1eb84 <free+0xe0>
   1eb96:	cb 01       	movw	r24, r22
   1eb98:	02 96       	adiw	r24, 0x02	; 2
   1eb9a:	2d 91       	ld	r18, X+
   1eb9c:	3c 91       	ld	r19, X
   1eb9e:	11 97       	sbiw	r26, 0x01	; 1
   1eba0:	82 0f       	add	r24, r18
   1eba2:	93 1f       	adc	r25, r19
   1eba4:	20 91 3a 2c 	lds	r18, 0x2C3A
   1eba8:	30 91 3b 2c 	lds	r19, 0x2C3B
   1ebac:	28 17       	cp	r18, r24
   1ebae:	39 07       	cpc	r19, r25
   1ebb0:	69 f4       	brne	.+26     	; 0x1ebcc <free+0x128>
   1ebb2:	30 97       	sbiw	r30, 0x00	; 0
   1ebb4:	29 f4       	brne	.+10     	; 0x1ebc0 <free+0x11c>
   1ebb6:	10 92 3c 2c 	sts	0x2C3C, r1
   1ebba:	10 92 3d 2c 	sts	0x2C3D, r1
   1ebbe:	02 c0       	rjmp	.+4      	; 0x1ebc4 <free+0x120>
   1ebc0:	12 82       	std	Z+2, r1	; 0x02
   1ebc2:	13 82       	std	Z+3, r1	; 0x03
   1ebc4:	60 93 3a 2c 	sts	0x2C3A, r22
   1ebc8:	70 93 3b 2c 	sts	0x2C3B, r23
   1ebcc:	df 91       	pop	r29
   1ebce:	cf 91       	pop	r28
   1ebd0:	1f 91       	pop	r17
   1ebd2:	0f 91       	pop	r16
   1ebd4:	08 95       	ret

0001ebd6 <atoi>:
   1ebd6:	fc 01       	movw	r30, r24
   1ebd8:	88 27       	eor	r24, r24
   1ebda:	99 27       	eor	r25, r25
   1ebdc:	e8 94       	clt
   1ebde:	21 91       	ld	r18, Z+
   1ebe0:	20 32       	cpi	r18, 0x20	; 32
   1ebe2:	e9 f3       	breq	.-6      	; 0x1ebde <atoi+0x8>
   1ebe4:	29 30       	cpi	r18, 0x09	; 9
   1ebe6:	10 f0       	brcs	.+4      	; 0x1ebec <atoi+0x16>
   1ebe8:	2e 30       	cpi	r18, 0x0E	; 14
   1ebea:	c8 f3       	brcs	.-14     	; 0x1ebde <atoi+0x8>
   1ebec:	2b 32       	cpi	r18, 0x2B	; 43
   1ebee:	41 f0       	breq	.+16     	; 0x1ec00 <atoi+0x2a>
   1ebf0:	2d 32       	cpi	r18, 0x2D	; 45
   1ebf2:	39 f4       	brne	.+14     	; 0x1ec02 <atoi+0x2c>
   1ebf4:	68 94       	set
   1ebf6:	04 c0       	rjmp	.+8      	; 0x1ec00 <atoi+0x2a>
   1ebf8:	0e 94 86 f7 	call	0x1ef0c	; 0x1ef0c <__mulhi_const_10>
   1ebfc:	82 0f       	add	r24, r18
   1ebfe:	91 1d       	adc	r25, r1
   1ec00:	21 91       	ld	r18, Z+
   1ec02:	20 53       	subi	r18, 0x30	; 48
   1ec04:	2a 30       	cpi	r18, 0x0A	; 10
   1ec06:	c0 f3       	brcs	.-16     	; 0x1ebf8 <atoi+0x22>
   1ec08:	1e f4       	brtc	.+6      	; 0x1ec10 <atoi+0x3a>
   1ec0a:	90 95       	com	r25
   1ec0c:	81 95       	neg	r24
   1ec0e:	9f 4f       	sbci	r25, 0xFF	; 255
   1ec10:	08 95       	ret

0001ec12 <exit>:
   1ec12:	f8 94       	cli
   1ec14:	0c 94 ae fa 	jmp	0x1f55c	; 0x1f55c <_exit>

0001ec18 <__ftoa_engine>:
   1ec18:	28 30       	cpi	r18, 0x08	; 8
   1ec1a:	08 f0       	brcs	.+2      	; 0x1ec1e <__ftoa_engine+0x6>
   1ec1c:	27 e0       	ldi	r18, 0x07	; 7
   1ec1e:	33 27       	eor	r19, r19
   1ec20:	da 01       	movw	r26, r20
   1ec22:	99 0f       	add	r25, r25
   1ec24:	31 1d       	adc	r19, r1
   1ec26:	87 fd       	sbrc	r24, 7
   1ec28:	91 60       	ori	r25, 0x01	; 1
   1ec2a:	00 96       	adiw	r24, 0x00	; 0
   1ec2c:	61 05       	cpc	r22, r1
   1ec2e:	71 05       	cpc	r23, r1
   1ec30:	39 f4       	brne	.+14     	; 0x1ec40 <__ftoa_engine+0x28>
   1ec32:	32 60       	ori	r19, 0x02	; 2
   1ec34:	2e 5f       	subi	r18, 0xFE	; 254
   1ec36:	3d 93       	st	X+, r19
   1ec38:	30 e3       	ldi	r19, 0x30	; 48
   1ec3a:	2a 95       	dec	r18
   1ec3c:	e1 f7       	brne	.-8      	; 0x1ec36 <__ftoa_engine+0x1e>
   1ec3e:	08 95       	ret
   1ec40:	9f 3f       	cpi	r25, 0xFF	; 255
   1ec42:	30 f0       	brcs	.+12     	; 0x1ec50 <__ftoa_engine+0x38>
   1ec44:	80 38       	cpi	r24, 0x80	; 128
   1ec46:	71 05       	cpc	r23, r1
   1ec48:	61 05       	cpc	r22, r1
   1ec4a:	09 f0       	breq	.+2      	; 0x1ec4e <__ftoa_engine+0x36>
   1ec4c:	3c 5f       	subi	r19, 0xFC	; 252
   1ec4e:	3c 5f       	subi	r19, 0xFC	; 252
   1ec50:	3d 93       	st	X+, r19
   1ec52:	91 30       	cpi	r25, 0x01	; 1
   1ec54:	08 f0       	brcs	.+2      	; 0x1ec58 <__ftoa_engine+0x40>
   1ec56:	80 68       	ori	r24, 0x80	; 128
   1ec58:	91 1d       	adc	r25, r1
   1ec5a:	df 93       	push	r29
   1ec5c:	cf 93       	push	r28
   1ec5e:	1f 93       	push	r17
   1ec60:	0f 93       	push	r16
   1ec62:	ff 92       	push	r15
   1ec64:	ef 92       	push	r14
   1ec66:	19 2f       	mov	r17, r25
   1ec68:	98 7f       	andi	r25, 0xF8	; 248
   1ec6a:	96 95       	lsr	r25
   1ec6c:	e9 2f       	mov	r30, r25
   1ec6e:	96 95       	lsr	r25
   1ec70:	96 95       	lsr	r25
   1ec72:	e9 0f       	add	r30, r25
   1ec74:	ff 27       	eor	r31, r31
   1ec76:	e1 51       	subi	r30, 0x11	; 17
   1ec78:	f1 4f       	sbci	r31, 0xF1	; 241
   1ec7a:	99 27       	eor	r25, r25
   1ec7c:	33 27       	eor	r19, r19
   1ec7e:	ee 24       	eor	r14, r14
   1ec80:	ff 24       	eor	r15, r15
   1ec82:	a7 01       	movw	r20, r14
   1ec84:	e7 01       	movw	r28, r14
   1ec86:	05 90       	lpm	r0, Z+
   1ec88:	08 94       	sec
   1ec8a:	07 94       	ror	r0
   1ec8c:	28 f4       	brcc	.+10     	; 0x1ec98 <__ftoa_engine+0x80>
   1ec8e:	36 0f       	add	r19, r22
   1ec90:	e7 1e       	adc	r14, r23
   1ec92:	f8 1e       	adc	r15, r24
   1ec94:	49 1f       	adc	r20, r25
   1ec96:	51 1d       	adc	r21, r1
   1ec98:	66 0f       	add	r22, r22
   1ec9a:	77 1f       	adc	r23, r23
   1ec9c:	88 1f       	adc	r24, r24
   1ec9e:	99 1f       	adc	r25, r25
   1eca0:	06 94       	lsr	r0
   1eca2:	a1 f7       	brne	.-24     	; 0x1ec8c <__ftoa_engine+0x74>
   1eca4:	05 90       	lpm	r0, Z+
   1eca6:	07 94       	ror	r0
   1eca8:	28 f4       	brcc	.+10     	; 0x1ecb4 <__ftoa_engine+0x9c>
   1ecaa:	e7 0e       	add	r14, r23
   1ecac:	f8 1e       	adc	r15, r24
   1ecae:	49 1f       	adc	r20, r25
   1ecb0:	56 1f       	adc	r21, r22
   1ecb2:	c1 1d       	adc	r28, r1
   1ecb4:	77 0f       	add	r23, r23
   1ecb6:	88 1f       	adc	r24, r24
   1ecb8:	99 1f       	adc	r25, r25
   1ecba:	66 1f       	adc	r22, r22
   1ecbc:	06 94       	lsr	r0
   1ecbe:	a1 f7       	brne	.-24     	; 0x1eca8 <__ftoa_engine+0x90>
   1ecc0:	05 90       	lpm	r0, Z+
   1ecc2:	07 94       	ror	r0
   1ecc4:	28 f4       	brcc	.+10     	; 0x1ecd0 <__ftoa_engine+0xb8>
   1ecc6:	f8 0e       	add	r15, r24
   1ecc8:	49 1f       	adc	r20, r25
   1ecca:	56 1f       	adc	r21, r22
   1eccc:	c7 1f       	adc	r28, r23
   1ecce:	d1 1d       	adc	r29, r1
   1ecd0:	88 0f       	add	r24, r24
   1ecd2:	99 1f       	adc	r25, r25
   1ecd4:	66 1f       	adc	r22, r22
   1ecd6:	77 1f       	adc	r23, r23
   1ecd8:	06 94       	lsr	r0
   1ecda:	a1 f7       	brne	.-24     	; 0x1ecc4 <__ftoa_engine+0xac>
   1ecdc:	05 90       	lpm	r0, Z+
   1ecde:	07 94       	ror	r0
   1ece0:	20 f4       	brcc	.+8      	; 0x1ecea <__ftoa_engine+0xd2>
   1ece2:	49 0f       	add	r20, r25
   1ece4:	56 1f       	adc	r21, r22
   1ece6:	c7 1f       	adc	r28, r23
   1ece8:	d8 1f       	adc	r29, r24
   1ecea:	99 0f       	add	r25, r25
   1ecec:	66 1f       	adc	r22, r22
   1ecee:	77 1f       	adc	r23, r23
   1ecf0:	88 1f       	adc	r24, r24
   1ecf2:	06 94       	lsr	r0
   1ecf4:	a9 f7       	brne	.-22     	; 0x1ece0 <__ftoa_engine+0xc8>
   1ecf6:	84 91       	lpm	r24, Z
   1ecf8:	10 95       	com	r17
   1ecfa:	17 70       	andi	r17, 0x07	; 7
   1ecfc:	41 f0       	breq	.+16     	; 0x1ed0e <__ftoa_engine+0xf6>
   1ecfe:	d6 95       	lsr	r29
   1ed00:	c7 95       	ror	r28
   1ed02:	57 95       	ror	r21
   1ed04:	47 95       	ror	r20
   1ed06:	f7 94       	ror	r15
   1ed08:	e7 94       	ror	r14
   1ed0a:	1a 95       	dec	r17
   1ed0c:	c1 f7       	brne	.-16     	; 0x1ecfe <__ftoa_engine+0xe6>
   1ed0e:	e5 e9       	ldi	r30, 0x95	; 149
   1ed10:	fe e0       	ldi	r31, 0x0E	; 14
   1ed12:	68 94       	set
   1ed14:	15 90       	lpm	r1, Z+
   1ed16:	15 91       	lpm	r17, Z+
   1ed18:	35 91       	lpm	r19, Z+
   1ed1a:	65 91       	lpm	r22, Z+
   1ed1c:	95 91       	lpm	r25, Z+
   1ed1e:	05 90       	lpm	r0, Z+
   1ed20:	7f e2       	ldi	r23, 0x2F	; 47
   1ed22:	73 95       	inc	r23
   1ed24:	e1 18       	sub	r14, r1
   1ed26:	f1 0a       	sbc	r15, r17
   1ed28:	43 0b       	sbc	r20, r19
   1ed2a:	56 0b       	sbc	r21, r22
   1ed2c:	c9 0b       	sbc	r28, r25
   1ed2e:	d0 09       	sbc	r29, r0
   1ed30:	c0 f7       	brcc	.-16     	; 0x1ed22 <__ftoa_engine+0x10a>
   1ed32:	e1 0c       	add	r14, r1
   1ed34:	f1 1e       	adc	r15, r17
   1ed36:	43 1f       	adc	r20, r19
   1ed38:	56 1f       	adc	r21, r22
   1ed3a:	c9 1f       	adc	r28, r25
   1ed3c:	d0 1d       	adc	r29, r0
   1ed3e:	7e f4       	brtc	.+30     	; 0x1ed5e <__ftoa_engine+0x146>
   1ed40:	70 33       	cpi	r23, 0x30	; 48
   1ed42:	11 f4       	brne	.+4      	; 0x1ed48 <__ftoa_engine+0x130>
   1ed44:	8a 95       	dec	r24
   1ed46:	e6 cf       	rjmp	.-52     	; 0x1ed14 <__ftoa_engine+0xfc>
   1ed48:	e8 94       	clt
   1ed4a:	01 50       	subi	r16, 0x01	; 1
   1ed4c:	30 f0       	brcs	.+12     	; 0x1ed5a <__ftoa_engine+0x142>
   1ed4e:	08 0f       	add	r16, r24
   1ed50:	0a f4       	brpl	.+2      	; 0x1ed54 <__ftoa_engine+0x13c>
   1ed52:	00 27       	eor	r16, r16
   1ed54:	02 17       	cp	r16, r18
   1ed56:	08 f4       	brcc	.+2      	; 0x1ed5a <__ftoa_engine+0x142>
   1ed58:	20 2f       	mov	r18, r16
   1ed5a:	23 95       	inc	r18
   1ed5c:	02 2f       	mov	r16, r18
   1ed5e:	7a 33       	cpi	r23, 0x3A	; 58
   1ed60:	28 f0       	brcs	.+10     	; 0x1ed6c <__ftoa_engine+0x154>
   1ed62:	79 e3       	ldi	r23, 0x39	; 57
   1ed64:	7d 93       	st	X+, r23
   1ed66:	2a 95       	dec	r18
   1ed68:	e9 f7       	brne	.-6      	; 0x1ed64 <__ftoa_engine+0x14c>
   1ed6a:	10 c0       	rjmp	.+32     	; 0x1ed8c <__ftoa_engine+0x174>
   1ed6c:	7d 93       	st	X+, r23
   1ed6e:	2a 95       	dec	r18
   1ed70:	89 f6       	brne	.-94     	; 0x1ed14 <__ftoa_engine+0xfc>
   1ed72:	06 94       	lsr	r0
   1ed74:	97 95       	ror	r25
   1ed76:	67 95       	ror	r22
   1ed78:	37 95       	ror	r19
   1ed7a:	17 95       	ror	r17
   1ed7c:	17 94       	ror	r1
   1ed7e:	e1 18       	sub	r14, r1
   1ed80:	f1 0a       	sbc	r15, r17
   1ed82:	43 0b       	sbc	r20, r19
   1ed84:	56 0b       	sbc	r21, r22
   1ed86:	c9 0b       	sbc	r28, r25
   1ed88:	d0 09       	sbc	r29, r0
   1ed8a:	98 f0       	brcs	.+38     	; 0x1edb2 <__ftoa_engine+0x19a>
   1ed8c:	23 95       	inc	r18
   1ed8e:	7e 91       	ld	r23, -X
   1ed90:	73 95       	inc	r23
   1ed92:	7a 33       	cpi	r23, 0x3A	; 58
   1ed94:	08 f0       	brcs	.+2      	; 0x1ed98 <__ftoa_engine+0x180>
   1ed96:	70 e3       	ldi	r23, 0x30	; 48
   1ed98:	7c 93       	st	X, r23
   1ed9a:	20 13       	cpse	r18, r16
   1ed9c:	b8 f7       	brcc	.-18     	; 0x1ed8c <__ftoa_engine+0x174>
   1ed9e:	7e 91       	ld	r23, -X
   1eda0:	70 61       	ori	r23, 0x10	; 16
   1eda2:	7d 93       	st	X+, r23
   1eda4:	30 f0       	brcs	.+12     	; 0x1edb2 <__ftoa_engine+0x19a>
   1eda6:	83 95       	inc	r24
   1eda8:	71 e3       	ldi	r23, 0x31	; 49
   1edaa:	7d 93       	st	X+, r23
   1edac:	70 e3       	ldi	r23, 0x30	; 48
   1edae:	2a 95       	dec	r18
   1edb0:	e1 f7       	brne	.-8      	; 0x1edaa <__ftoa_engine+0x192>
   1edb2:	11 24       	eor	r1, r1
   1edb4:	ef 90       	pop	r14
   1edb6:	ff 90       	pop	r15
   1edb8:	0f 91       	pop	r16
   1edba:	1f 91       	pop	r17
   1edbc:	cf 91       	pop	r28
   1edbe:	df 91       	pop	r29
   1edc0:	99 27       	eor	r25, r25
   1edc2:	87 fd       	sbrc	r24, 7
   1edc4:	90 95       	com	r25
   1edc6:	08 95       	ret

0001edc8 <strcasecmp_P>:
   1edc8:	fb 01       	movw	r30, r22
   1edca:	dc 01       	movw	r26, r24
   1edcc:	8d 91       	ld	r24, X+
   1edce:	81 34       	cpi	r24, 0x41	; 65
   1edd0:	1c f0       	brlt	.+6      	; 0x1edd8 <strcasecmp_P+0x10>
   1edd2:	8b 35       	cpi	r24, 0x5B	; 91
   1edd4:	0c f4       	brge	.+2      	; 0x1edd8 <strcasecmp_P+0x10>
   1edd6:	80 5e       	subi	r24, 0xE0	; 224
   1edd8:	65 91       	lpm	r22, Z+
   1edda:	61 34       	cpi	r22, 0x41	; 65
   1eddc:	1c f0       	brlt	.+6      	; 0x1ede4 <strcasecmp_P+0x1c>
   1edde:	6b 35       	cpi	r22, 0x5B	; 91
   1ede0:	0c f4       	brge	.+2      	; 0x1ede4 <strcasecmp_P+0x1c>
   1ede2:	60 5e       	subi	r22, 0xE0	; 224
   1ede4:	86 1b       	sub	r24, r22
   1ede6:	61 11       	cpse	r22, r1
   1ede8:	89 f3       	breq	.-30     	; 0x1edcc <strcasecmp_P+0x4>
   1edea:	99 0b       	sbc	r25, r25
   1edec:	08 95       	ret

0001edee <strnlen_P>:
   1edee:	fc 01       	movw	r30, r24
   1edf0:	05 90       	lpm	r0, Z+
   1edf2:	61 50       	subi	r22, 0x01	; 1
   1edf4:	70 40       	sbci	r23, 0x00	; 0
   1edf6:	01 10       	cpse	r0, r1
   1edf8:	d8 f7       	brcc	.-10     	; 0x1edf0 <strnlen_P+0x2>
   1edfa:	80 95       	com	r24
   1edfc:	90 95       	com	r25
   1edfe:	8e 0f       	add	r24, r30
   1ee00:	9f 1f       	adc	r25, r31
   1ee02:	08 95       	ret

0001ee04 <strtok>:
   1ee04:	43 e2       	ldi	r20, 0x23	; 35
   1ee06:	5c e2       	ldi	r21, 0x2C	; 44
   1ee08:	0e 94 5f f7 	call	0x1eebe	; 0x1eebe <strtok_r>
   1ee0c:	08 95       	ret

0001ee0e <memcpy>:
   1ee0e:	fb 01       	movw	r30, r22
   1ee10:	dc 01       	movw	r26, r24
   1ee12:	02 c0       	rjmp	.+4      	; 0x1ee18 <memcpy+0xa>
   1ee14:	01 90       	ld	r0, Z+
   1ee16:	0d 92       	st	X+, r0
   1ee18:	41 50       	subi	r20, 0x01	; 1
   1ee1a:	50 40       	sbci	r21, 0x00	; 0
   1ee1c:	d8 f7       	brcc	.-10     	; 0x1ee14 <memcpy+0x6>
   1ee1e:	08 95       	ret

0001ee20 <memset>:
   1ee20:	dc 01       	movw	r26, r24
   1ee22:	01 c0       	rjmp	.+2      	; 0x1ee26 <memset+0x6>
   1ee24:	6d 93       	st	X+, r22
   1ee26:	41 50       	subi	r20, 0x01	; 1
   1ee28:	50 40       	sbci	r21, 0x00	; 0
   1ee2a:	e0 f7       	brcc	.-8      	; 0x1ee24 <memset+0x4>
   1ee2c:	08 95       	ret

0001ee2e <strcasecmp>:
   1ee2e:	fb 01       	movw	r30, r22
   1ee30:	dc 01       	movw	r26, r24
   1ee32:	8d 91       	ld	r24, X+
   1ee34:	81 34       	cpi	r24, 0x41	; 65
   1ee36:	1c f0       	brlt	.+6      	; 0x1ee3e <strcasecmp+0x10>
   1ee38:	8b 35       	cpi	r24, 0x5B	; 91
   1ee3a:	0c f4       	brge	.+2      	; 0x1ee3e <strcasecmp+0x10>
   1ee3c:	80 5e       	subi	r24, 0xE0	; 224
   1ee3e:	61 91       	ld	r22, Z+
   1ee40:	61 34       	cpi	r22, 0x41	; 65
   1ee42:	1c f0       	brlt	.+6      	; 0x1ee4a <strcasecmp+0x1c>
   1ee44:	6b 35       	cpi	r22, 0x5B	; 91
   1ee46:	0c f4       	brge	.+2      	; 0x1ee4a <strcasecmp+0x1c>
   1ee48:	60 5e       	subi	r22, 0xE0	; 224
   1ee4a:	86 1b       	sub	r24, r22
   1ee4c:	61 11       	cpse	r22, r1
   1ee4e:	89 f3       	breq	.-30     	; 0x1ee32 <strcasecmp+0x4>
   1ee50:	99 0b       	sbc	r25, r25
   1ee52:	08 95       	ret

0001ee54 <strchr>:
   1ee54:	fc 01       	movw	r30, r24
   1ee56:	81 91       	ld	r24, Z+
   1ee58:	86 17       	cp	r24, r22
   1ee5a:	21 f0       	breq	.+8      	; 0x1ee64 <strchr+0x10>
   1ee5c:	88 23       	and	r24, r24
   1ee5e:	d9 f7       	brne	.-10     	; 0x1ee56 <strchr+0x2>
   1ee60:	99 27       	eor	r25, r25
   1ee62:	08 95       	ret
   1ee64:	31 97       	sbiw	r30, 0x01	; 1
   1ee66:	cf 01       	movw	r24, r30
   1ee68:	08 95       	ret

0001ee6a <strcmp>:
   1ee6a:	fb 01       	movw	r30, r22
   1ee6c:	dc 01       	movw	r26, r24
   1ee6e:	8d 91       	ld	r24, X+
   1ee70:	01 90       	ld	r0, Z+
   1ee72:	80 19       	sub	r24, r0
   1ee74:	01 10       	cpse	r0, r1
   1ee76:	d9 f3       	breq	.-10     	; 0x1ee6e <strcmp+0x4>
   1ee78:	99 0b       	sbc	r25, r25
   1ee7a:	08 95       	ret

0001ee7c <strcpy>:
   1ee7c:	fb 01       	movw	r30, r22
   1ee7e:	dc 01       	movw	r26, r24
   1ee80:	01 90       	ld	r0, Z+
   1ee82:	0d 92       	st	X+, r0
   1ee84:	00 20       	and	r0, r0
   1ee86:	e1 f7       	brne	.-8      	; 0x1ee80 <strcpy+0x4>
   1ee88:	08 95       	ret

0001ee8a <strncpy>:
   1ee8a:	fb 01       	movw	r30, r22
   1ee8c:	dc 01       	movw	r26, r24
   1ee8e:	41 50       	subi	r20, 0x01	; 1
   1ee90:	50 40       	sbci	r21, 0x00	; 0
   1ee92:	48 f0       	brcs	.+18     	; 0x1eea6 <strncpy+0x1c>
   1ee94:	01 90       	ld	r0, Z+
   1ee96:	0d 92       	st	X+, r0
   1ee98:	00 20       	and	r0, r0
   1ee9a:	c9 f7       	brne	.-14     	; 0x1ee8e <strncpy+0x4>
   1ee9c:	01 c0       	rjmp	.+2      	; 0x1eea0 <strncpy+0x16>
   1ee9e:	1d 92       	st	X+, r1
   1eea0:	41 50       	subi	r20, 0x01	; 1
   1eea2:	50 40       	sbci	r21, 0x00	; 0
   1eea4:	e0 f7       	brcc	.-8      	; 0x1ee9e <strncpy+0x14>
   1eea6:	08 95       	ret

0001eea8 <strnlen>:
   1eea8:	fc 01       	movw	r30, r24
   1eeaa:	61 50       	subi	r22, 0x01	; 1
   1eeac:	70 40       	sbci	r23, 0x00	; 0
   1eeae:	01 90       	ld	r0, Z+
   1eeb0:	01 10       	cpse	r0, r1
   1eeb2:	d8 f7       	brcc	.-10     	; 0x1eeaa <strnlen+0x2>
   1eeb4:	80 95       	com	r24
   1eeb6:	90 95       	com	r25
   1eeb8:	8e 0f       	add	r24, r30
   1eeba:	9f 1f       	adc	r25, r31
   1eebc:	08 95       	ret

0001eebe <strtok_r>:
   1eebe:	fa 01       	movw	r30, r20
   1eec0:	a1 91       	ld	r26, Z+
   1eec2:	b0 81       	ld	r27, Z
   1eec4:	00 97       	sbiw	r24, 0x00	; 0
   1eec6:	19 f4       	brne	.+6      	; 0x1eece <strtok_r+0x10>
   1eec8:	10 97       	sbiw	r26, 0x00	; 0
   1eeca:	e1 f0       	breq	.+56     	; 0x1ef04 <strtok_r+0x46>
   1eecc:	cd 01       	movw	r24, r26
   1eece:	dc 01       	movw	r26, r24
   1eed0:	cd 01       	movw	r24, r26
   1eed2:	0d 90       	ld	r0, X+
   1eed4:	00 20       	and	r0, r0
   1eed6:	11 f4       	brne	.+4      	; 0x1eedc <strtok_r+0x1e>
   1eed8:	c0 01       	movw	r24, r0
   1eeda:	13 c0       	rjmp	.+38     	; 0x1ef02 <strtok_r+0x44>
   1eedc:	fb 01       	movw	r30, r22
   1eede:	21 91       	ld	r18, Z+
   1eee0:	22 23       	and	r18, r18
   1eee2:	19 f0       	breq	.+6      	; 0x1eeea <strtok_r+0x2c>
   1eee4:	20 15       	cp	r18, r0
   1eee6:	d9 f7       	brne	.-10     	; 0x1eede <strtok_r+0x20>
   1eee8:	f3 cf       	rjmp	.-26     	; 0x1eed0 <strtok_r+0x12>
   1eeea:	fb 01       	movw	r30, r22
   1eeec:	21 91       	ld	r18, Z+
   1eeee:	20 15       	cp	r18, r0
   1eef0:	19 f4       	brne	.+6      	; 0x1eef8 <strtok_r+0x3a>
   1eef2:	1e 92       	st	-X, r1
   1eef4:	11 96       	adiw	r26, 0x01	; 1
   1eef6:	06 c0       	rjmp	.+12     	; 0x1ef04 <strtok_r+0x46>
   1eef8:	22 23       	and	r18, r18
   1eefa:	c1 f7       	brne	.-16     	; 0x1eeec <strtok_r+0x2e>
   1eefc:	0d 90       	ld	r0, X+
   1eefe:	00 20       	and	r0, r0
   1ef00:	a1 f7       	brne	.-24     	; 0x1eeea <strtok_r+0x2c>
   1ef02:	d0 01       	movw	r26, r0
   1ef04:	fa 01       	movw	r30, r20
   1ef06:	a1 93       	st	Z+, r26
   1ef08:	b0 83       	st	Z, r27
   1ef0a:	08 95       	ret

0001ef0c <__mulhi_const_10>:
   1ef0c:	7a e0       	ldi	r23, 0x0A	; 10
   1ef0e:	97 9f       	mul	r25, r23
   1ef10:	90 2d       	mov	r25, r0
   1ef12:	87 9f       	mul	r24, r23
   1ef14:	80 2d       	mov	r24, r0
   1ef16:	91 0d       	add	r25, r1
   1ef18:	11 24       	eor	r1, r1
   1ef1a:	08 95       	ret

0001ef1c <fputc>:
   1ef1c:	0f 93       	push	r16
   1ef1e:	1f 93       	push	r17
   1ef20:	cf 93       	push	r28
   1ef22:	df 93       	push	r29
   1ef24:	8c 01       	movw	r16, r24
   1ef26:	eb 01       	movw	r28, r22
   1ef28:	8b 81       	ldd	r24, Y+3	; 0x03
   1ef2a:	81 ff       	sbrs	r24, 1
   1ef2c:	1b c0       	rjmp	.+54     	; 0x1ef64 <fputc+0x48>
   1ef2e:	82 ff       	sbrs	r24, 2
   1ef30:	0d c0       	rjmp	.+26     	; 0x1ef4c <fputc+0x30>
   1ef32:	2e 81       	ldd	r18, Y+6	; 0x06
   1ef34:	3f 81       	ldd	r19, Y+7	; 0x07
   1ef36:	8c 81       	ldd	r24, Y+4	; 0x04
   1ef38:	9d 81       	ldd	r25, Y+5	; 0x05
   1ef3a:	28 17       	cp	r18, r24
   1ef3c:	39 07       	cpc	r19, r25
   1ef3e:	64 f4       	brge	.+24     	; 0x1ef58 <fputc+0x3c>
   1ef40:	e8 81       	ld	r30, Y
   1ef42:	f9 81       	ldd	r31, Y+1	; 0x01
   1ef44:	01 93       	st	Z+, r16
   1ef46:	e8 83       	st	Y, r30
   1ef48:	f9 83       	std	Y+1, r31	; 0x01
   1ef4a:	06 c0       	rjmp	.+12     	; 0x1ef58 <fputc+0x3c>
   1ef4c:	e8 85       	ldd	r30, Y+8	; 0x08
   1ef4e:	f9 85       	ldd	r31, Y+9	; 0x09
   1ef50:	80 2f       	mov	r24, r16
   1ef52:	19 95       	eicall
   1ef54:	00 97       	sbiw	r24, 0x00	; 0
   1ef56:	31 f4       	brne	.+12     	; 0x1ef64 <fputc+0x48>
   1ef58:	8e 81       	ldd	r24, Y+6	; 0x06
   1ef5a:	9f 81       	ldd	r25, Y+7	; 0x07
   1ef5c:	01 96       	adiw	r24, 0x01	; 1
   1ef5e:	8e 83       	std	Y+6, r24	; 0x06
   1ef60:	9f 83       	std	Y+7, r25	; 0x07
   1ef62:	02 c0       	rjmp	.+4      	; 0x1ef68 <fputc+0x4c>
   1ef64:	0f ef       	ldi	r16, 0xFF	; 255
   1ef66:	1f ef       	ldi	r17, 0xFF	; 255
   1ef68:	c8 01       	movw	r24, r16
   1ef6a:	df 91       	pop	r29
   1ef6c:	cf 91       	pop	r28
   1ef6e:	1f 91       	pop	r17
   1ef70:	0f 91       	pop	r16
   1ef72:	08 95       	ret

0001ef74 <sprintf>:
   1ef74:	0f 93       	push	r16
   1ef76:	1f 93       	push	r17
   1ef78:	cf 93       	push	r28
   1ef7a:	df 93       	push	r29
   1ef7c:	cd b7       	in	r28, 0x3d	; 61
   1ef7e:	de b7       	in	r29, 0x3e	; 62
   1ef80:	2e 97       	sbiw	r28, 0x0e	; 14
   1ef82:	cd bf       	out	0x3d, r28	; 61
   1ef84:	de bf       	out	0x3e, r29	; 62
   1ef86:	0e 89       	ldd	r16, Y+22	; 0x16
   1ef88:	1f 89       	ldd	r17, Y+23	; 0x17
   1ef8a:	86 e0       	ldi	r24, 0x06	; 6
   1ef8c:	8c 83       	std	Y+4, r24	; 0x04
   1ef8e:	09 83       	std	Y+1, r16	; 0x01
   1ef90:	1a 83       	std	Y+2, r17	; 0x02
   1ef92:	8f ef       	ldi	r24, 0xFF	; 255
   1ef94:	9f e7       	ldi	r25, 0x7F	; 127
   1ef96:	8d 83       	std	Y+5, r24	; 0x05
   1ef98:	9e 83       	std	Y+6, r25	; 0x06
   1ef9a:	ae 01       	movw	r20, r28
   1ef9c:	46 5e       	subi	r20, 0xE6	; 230
   1ef9e:	5f 4f       	sbci	r21, 0xFF	; 255
   1efa0:	ce 01       	movw	r24, r28
   1efa2:	01 96       	adiw	r24, 0x01	; 1
   1efa4:	68 8d       	ldd	r22, Y+24	; 0x18
   1efa6:	79 8d       	ldd	r23, Y+25	; 0x19
   1efa8:	0e 94 13 ee 	call	0x1dc26	; 0x1dc26 <vfprintf>
   1efac:	ef 81       	ldd	r30, Y+7	; 0x07
   1efae:	f8 85       	ldd	r31, Y+8	; 0x08
   1efb0:	e0 0f       	add	r30, r16
   1efb2:	f1 1f       	adc	r31, r17
   1efb4:	10 82       	st	Z, r1
   1efb6:	2e 96       	adiw	r28, 0x0e	; 14
   1efb8:	cd bf       	out	0x3d, r28	; 61
   1efba:	de bf       	out	0x3e, r29	; 62
   1efbc:	df 91       	pop	r29
   1efbe:	cf 91       	pop	r28
   1efc0:	1f 91       	pop	r17
   1efc2:	0f 91       	pop	r16
   1efc4:	08 95       	ret

0001efc6 <sprintf_P>:
   1efc6:	0f 93       	push	r16
   1efc8:	1f 93       	push	r17
   1efca:	cf 93       	push	r28
   1efcc:	df 93       	push	r29
   1efce:	cd b7       	in	r28, 0x3d	; 61
   1efd0:	de b7       	in	r29, 0x3e	; 62
   1efd2:	2e 97       	sbiw	r28, 0x0e	; 14
   1efd4:	cd bf       	out	0x3d, r28	; 61
   1efd6:	de bf       	out	0x3e, r29	; 62
   1efd8:	0e 89       	ldd	r16, Y+22	; 0x16
   1efda:	1f 89       	ldd	r17, Y+23	; 0x17
   1efdc:	8e e0       	ldi	r24, 0x0E	; 14
   1efde:	8c 83       	std	Y+4, r24	; 0x04
   1efe0:	09 83       	std	Y+1, r16	; 0x01
   1efe2:	1a 83       	std	Y+2, r17	; 0x02
   1efe4:	8f ef       	ldi	r24, 0xFF	; 255
   1efe6:	9f e7       	ldi	r25, 0x7F	; 127
   1efe8:	8d 83       	std	Y+5, r24	; 0x05
   1efea:	9e 83       	std	Y+6, r25	; 0x06
   1efec:	ae 01       	movw	r20, r28
   1efee:	46 5e       	subi	r20, 0xE6	; 230
   1eff0:	5f 4f       	sbci	r21, 0xFF	; 255
   1eff2:	ce 01       	movw	r24, r28
   1eff4:	01 96       	adiw	r24, 0x01	; 1
   1eff6:	68 8d       	ldd	r22, Y+24	; 0x18
   1eff8:	79 8d       	ldd	r23, Y+25	; 0x19
   1effa:	0e 94 13 ee 	call	0x1dc26	; 0x1dc26 <vfprintf>
   1effe:	ef 81       	ldd	r30, Y+7	; 0x07
   1f000:	f8 85       	ldd	r31, Y+8	; 0x08
   1f002:	e0 0f       	add	r30, r16
   1f004:	f1 1f       	adc	r31, r17
   1f006:	10 82       	st	Z, r1
   1f008:	2e 96       	adiw	r28, 0x0e	; 14
   1f00a:	cd bf       	out	0x3d, r28	; 61
   1f00c:	de bf       	out	0x3e, r29	; 62
   1f00e:	df 91       	pop	r29
   1f010:	cf 91       	pop	r28
   1f012:	1f 91       	pop	r17
   1f014:	0f 91       	pop	r16
   1f016:	08 95       	ret

0001f018 <__ultoa_invert>:
   1f018:	fa 01       	movw	r30, r20
   1f01a:	aa 27       	eor	r26, r26
   1f01c:	28 30       	cpi	r18, 0x08	; 8
   1f01e:	51 f1       	breq	.+84     	; 0x1f074 <__ultoa_invert+0x5c>
   1f020:	20 31       	cpi	r18, 0x10	; 16
   1f022:	81 f1       	breq	.+96     	; 0x1f084 <__ultoa_invert+0x6c>
   1f024:	e8 94       	clt
   1f026:	6f 93       	push	r22
   1f028:	6e 7f       	andi	r22, 0xFE	; 254
   1f02a:	6e 5f       	subi	r22, 0xFE	; 254
   1f02c:	7f 4f       	sbci	r23, 0xFF	; 255
   1f02e:	8f 4f       	sbci	r24, 0xFF	; 255
   1f030:	9f 4f       	sbci	r25, 0xFF	; 255
   1f032:	af 4f       	sbci	r26, 0xFF	; 255
   1f034:	b1 e0       	ldi	r27, 0x01	; 1
   1f036:	3e d0       	rcall	.+124    	; 0x1f0b4 <__ultoa_invert+0x9c>
   1f038:	b4 e0       	ldi	r27, 0x04	; 4
   1f03a:	3c d0       	rcall	.+120    	; 0x1f0b4 <__ultoa_invert+0x9c>
   1f03c:	67 0f       	add	r22, r23
   1f03e:	78 1f       	adc	r23, r24
   1f040:	89 1f       	adc	r24, r25
   1f042:	9a 1f       	adc	r25, r26
   1f044:	a1 1d       	adc	r26, r1
   1f046:	68 0f       	add	r22, r24
   1f048:	79 1f       	adc	r23, r25
   1f04a:	8a 1f       	adc	r24, r26
   1f04c:	91 1d       	adc	r25, r1
   1f04e:	a1 1d       	adc	r26, r1
   1f050:	6a 0f       	add	r22, r26
   1f052:	71 1d       	adc	r23, r1
   1f054:	81 1d       	adc	r24, r1
   1f056:	91 1d       	adc	r25, r1
   1f058:	a1 1d       	adc	r26, r1
   1f05a:	20 d0       	rcall	.+64     	; 0x1f09c <__ultoa_invert+0x84>
   1f05c:	09 f4       	brne	.+2      	; 0x1f060 <__ultoa_invert+0x48>
   1f05e:	68 94       	set
   1f060:	3f 91       	pop	r19
   1f062:	2a e0       	ldi	r18, 0x0A	; 10
   1f064:	26 9f       	mul	r18, r22
   1f066:	11 24       	eor	r1, r1
   1f068:	30 19       	sub	r19, r0
   1f06a:	30 5d       	subi	r19, 0xD0	; 208
   1f06c:	31 93       	st	Z+, r19
   1f06e:	de f6       	brtc	.-74     	; 0x1f026 <__ultoa_invert+0xe>
   1f070:	cf 01       	movw	r24, r30
   1f072:	08 95       	ret
   1f074:	46 2f       	mov	r20, r22
   1f076:	47 70       	andi	r20, 0x07	; 7
   1f078:	40 5d       	subi	r20, 0xD0	; 208
   1f07a:	41 93       	st	Z+, r20
   1f07c:	b3 e0       	ldi	r27, 0x03	; 3
   1f07e:	0f d0       	rcall	.+30     	; 0x1f09e <__ultoa_invert+0x86>
   1f080:	c9 f7       	brne	.-14     	; 0x1f074 <__ultoa_invert+0x5c>
   1f082:	f6 cf       	rjmp	.-20     	; 0x1f070 <__ultoa_invert+0x58>
   1f084:	46 2f       	mov	r20, r22
   1f086:	4f 70       	andi	r20, 0x0F	; 15
   1f088:	40 5d       	subi	r20, 0xD0	; 208
   1f08a:	4a 33       	cpi	r20, 0x3A	; 58
   1f08c:	18 f0       	brcs	.+6      	; 0x1f094 <__ultoa_invert+0x7c>
   1f08e:	49 5d       	subi	r20, 0xD9	; 217
   1f090:	31 fd       	sbrc	r19, 1
   1f092:	40 52       	subi	r20, 0x20	; 32
   1f094:	41 93       	st	Z+, r20
   1f096:	02 d0       	rcall	.+4      	; 0x1f09c <__ultoa_invert+0x84>
   1f098:	a9 f7       	brne	.-22     	; 0x1f084 <__ultoa_invert+0x6c>
   1f09a:	ea cf       	rjmp	.-44     	; 0x1f070 <__ultoa_invert+0x58>
   1f09c:	b4 e0       	ldi	r27, 0x04	; 4
   1f09e:	a6 95       	lsr	r26
   1f0a0:	97 95       	ror	r25
   1f0a2:	87 95       	ror	r24
   1f0a4:	77 95       	ror	r23
   1f0a6:	67 95       	ror	r22
   1f0a8:	ba 95       	dec	r27
   1f0aa:	c9 f7       	brne	.-14     	; 0x1f09e <__ultoa_invert+0x86>
   1f0ac:	00 97       	sbiw	r24, 0x00	; 0
   1f0ae:	61 05       	cpc	r22, r1
   1f0b0:	71 05       	cpc	r23, r1
   1f0b2:	08 95       	ret
   1f0b4:	9b 01       	movw	r18, r22
   1f0b6:	ac 01       	movw	r20, r24
   1f0b8:	0a 2e       	mov	r0, r26
   1f0ba:	06 94       	lsr	r0
   1f0bc:	57 95       	ror	r21
   1f0be:	47 95       	ror	r20
   1f0c0:	37 95       	ror	r19
   1f0c2:	27 95       	ror	r18
   1f0c4:	ba 95       	dec	r27
   1f0c6:	c9 f7       	brne	.-14     	; 0x1f0ba <__ultoa_invert+0xa2>
   1f0c8:	62 0f       	add	r22, r18
   1f0ca:	73 1f       	adc	r23, r19
   1f0cc:	84 1f       	adc	r24, r20
   1f0ce:	95 1f       	adc	r25, r21
   1f0d0:	a0 1d       	adc	r26, r0
   1f0d2:	08 95       	ret

0001f0d4 <arb_createMemIntsOn>:
   1f0d4:	0f 92       	push	r0
   1f0d6:	0f b6       	in	r0, 0x3f	; 63
   1f0d8:	0f 93       	push	r16
   1f0da:	00 2d       	mov	r16, r0
   1f0dc:	00 68       	ori	r16, 0x80	; 128
   1f0de:	00 2e       	mov	r0, r16
   1f0e0:	0f 91       	pop	r16
   1f0e2:	0f 92       	push	r0
   1f0e4:	1f 92       	push	r1
   1f0e6:	11 24       	eor	r1, r1
   1f0e8:	2f 92       	push	r2
   1f0ea:	3f 92       	push	r3
   1f0ec:	4f 92       	push	r4
   1f0ee:	5f 92       	push	r5
   1f0f0:	6f 92       	push	r6
   1f0f2:	7f 92       	push	r7
   1f0f4:	8f 92       	push	r8
   1f0f6:	9f 92       	push	r9
   1f0f8:	af 92       	push	r10
   1f0fa:	bf 92       	push	r11
   1f0fc:	cf 92       	push	r12
   1f0fe:	df 92       	push	r13
   1f100:	ef 92       	push	r14
   1f102:	ff 92       	push	r15
   1f104:	0f 93       	push	r16
   1f106:	1f 93       	push	r17
   1f108:	2f 93       	push	r18
   1f10a:	3f 93       	push	r19
   1f10c:	4f 93       	push	r20
   1f10e:	5f 93       	push	r21
   1f110:	6f 93       	push	r22
   1f112:	7f 93       	push	r23
   1f114:	8f 93       	push	r24
   1f116:	9f 93       	push	r25
   1f118:	af 93       	push	r26
   1f11a:	bf 93       	push	r27
   1f11c:	cf 93       	push	r28
   1f11e:	df 93       	push	r29
   1f120:	ef 93       	push	r30
   1f122:	ff 93       	push	r31
   1f124:	e0 91 2c 22 	lds	r30, 0x222C
   1f128:	f0 91 2d 22 	lds	r31, 0x222D
   1f12c:	06 80       	ldd	r0, Z+6	; 0x06
   1f12e:	f7 81       	ldd	r31, Z+7	; 0x07
   1f130:	e0 2d       	mov	r30, r0
   1f132:	01 90       	ld	r0, Z+
   1f134:	f0 81       	ld	r31, Z
   1f136:	e0 2d       	mov	r30, r0
   1f138:	e0 93 38 2c 	sts	0x2C38, r30
   1f13c:	f0 93 39 2c 	sts	0x2C39, r31
   1f140:	2d b7       	in	r18, 0x3d	; 61
   1f142:	30 e0       	ldi	r19, 0x00	; 0
   1f144:	21 87       	std	Z+9, r18	; 0x09
   1f146:	32 87       	std	Z+10, r19	; 0x0a
   1f148:	4e b7       	in	r20, 0x3e	; 62
   1f14a:	94 2f       	mov	r25, r20
   1f14c:	80 e0       	ldi	r24, 0x00	; 0
   1f14e:	82 2b       	or	r24, r18
   1f150:	93 2b       	or	r25, r19
   1f152:	81 87       	std	Z+9, r24	; 0x09
   1f154:	92 87       	std	Z+10, r25	; 0x0a
   1f156:	8f ef       	ldi	r24, 0xFF	; 255
   1f158:	8d bf       	out	0x3d, r24	; 61
   1f15a:	8f e3       	ldi	r24, 0x3F	; 63
   1f15c:	8e bf       	out	0x3e, r24	; 62
   1f15e:	c0 91 3d 00 	lds	r28, 0x003D
   1f162:	d0 91 3e 00 	lds	r29, 0x003E
   1f166:	e0 91 2c 22 	lds	r30, 0x222C
   1f16a:	f0 91 2d 22 	lds	r31, 0x222D
   1f16e:	06 80       	ldd	r0, Z+6	; 0x06
   1f170:	f7 81       	ldd	r31, Z+7	; 0x07
   1f172:	e0 2d       	mov	r30, r0
   1f174:	01 90       	ld	r0, Z+
   1f176:	f0 81       	ld	r31, Z
   1f178:	e0 2d       	mov	r30, r0
   1f17a:	e0 93 30 2c 	sts	0x2C30, r30
   1f17e:	f0 93 31 2c 	sts	0x2C31, r31
   1f182:	a3 85       	ldd	r26, Z+11	; 0x0b
   1f184:	b4 85       	ldd	r27, Z+12	; 0x0c
   1f186:	8d 91       	ld	r24, X+
   1f188:	9c 91       	ld	r25, X
   1f18a:	11 97       	sbiw	r26, 0x01	; 1
   1f18c:	2e ed       	ldi	r18, 0xDE	; 222
   1f18e:	8d 3a       	cpi	r24, 0xAD	; 173
   1f190:	92 07       	cpc	r25, r18
   1f192:	21 f0       	breq	.+8      	; 0x1f19c <arb_createMemIntsOn+0xc8>
   1f194:	30 97       	sbiw	r30, 0x00	; 0
   1f196:	11 f0       	breq	.+4      	; 0x1f19c <arb_createMemIntsOn+0xc8>
   1f198:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1f19c:	80 91 2f 2c 	lds	r24, 0x2C2F
   1f1a0:	88 23       	and	r24, r24
   1f1a2:	69 f0       	breq	.+26     	; 0x1f1be <arb_createMemIntsOn+0xea>
   1f1a4:	c0 91 2d 2c 	lds	r28, 0x2C2D
   1f1a8:	d0 91 2e 2c 	lds	r29, 0x2C2E
   1f1ac:	80 91 2b 2c 	lds	r24, 0x2C2B
   1f1b0:	90 91 2c 2c 	lds	r25, 0x2C2C
   1f1b4:	0e 94 bc f4 	call	0x1e978	; 0x1e978 <malloc>
   1f1b8:	88 83       	st	Y, r24
   1f1ba:	99 83       	std	Y+1, r25	; 0x01
   1f1bc:	08 c0       	rjmp	.+16     	; 0x1f1ce <arb_createMemIntsOn+0xfa>
   1f1be:	e0 91 2d 2c 	lds	r30, 0x2C2D
   1f1c2:	f0 91 2e 2c 	lds	r31, 0x2C2E
   1f1c6:	80 81       	ld	r24, Z
   1f1c8:	91 81       	ldd	r25, Z+1	; 0x01
   1f1ca:	0e 94 52 f5 	call	0x1eaa4	; 0x1eaa4 <free>
   1f1ce:	e0 91 2c 22 	lds	r30, 0x222C
   1f1d2:	f0 91 2d 22 	lds	r31, 0x222D
   1f1d6:	06 80       	ldd	r0, Z+6	; 0x06
   1f1d8:	f7 81       	ldd	r31, Z+7	; 0x07
   1f1da:	e0 2d       	mov	r30, r0
   1f1dc:	01 90       	ld	r0, Z+
   1f1de:	f0 81       	ld	r31, Z
   1f1e0:	e0 2d       	mov	r30, r0
   1f1e2:	e0 93 38 2c 	sts	0x2C38, r30
   1f1e6:	f0 93 39 2c 	sts	0x2C39, r31
   1f1ea:	81 85       	ldd	r24, Z+9	; 0x09
   1f1ec:	8d bf       	out	0x3d, r24	; 61
   1f1ee:	82 85       	ldd	r24, Z+10	; 0x0a
   1f1f0:	8e bf       	out	0x3e, r24	; 62
   1f1f2:	ff 91       	pop	r31
   1f1f4:	ef 91       	pop	r30
   1f1f6:	df 91       	pop	r29
   1f1f8:	cf 91       	pop	r28
   1f1fa:	bf 91       	pop	r27
   1f1fc:	af 91       	pop	r26
   1f1fe:	9f 91       	pop	r25
   1f200:	8f 91       	pop	r24
   1f202:	7f 91       	pop	r23
   1f204:	6f 91       	pop	r22
   1f206:	5f 91       	pop	r21
   1f208:	4f 91       	pop	r20
   1f20a:	3f 91       	pop	r19
   1f20c:	2f 91       	pop	r18
   1f20e:	1f 91       	pop	r17
   1f210:	0f 91       	pop	r16
   1f212:	ff 90       	pop	r15
   1f214:	ef 90       	pop	r14
   1f216:	df 90       	pop	r13
   1f218:	cf 90       	pop	r12
   1f21a:	bf 90       	pop	r11
   1f21c:	af 90       	pop	r10
   1f21e:	9f 90       	pop	r9
   1f220:	8f 90       	pop	r8
   1f222:	7f 90       	pop	r7
   1f224:	6f 90       	pop	r6
   1f226:	5f 90       	pop	r5
   1f228:	4f 90       	pop	r4
   1f22a:	3f 90       	pop	r3
   1f22c:	2f 90       	pop	r2
   1f22e:	1f 90       	pop	r1
   1f230:	0f 90       	pop	r0
   1f232:	0f be       	out	0x3f, r0	; 63
   1f234:	0f 90       	pop	r0
   1f236:	08 95       	ret

0001f238 <arb_createMemIntsOff>:
   1f238:	0f 92       	push	r0
   1f23a:	0f b6       	in	r0, 0x3f	; 63
   1f23c:	0f 92       	push	r0
   1f23e:	1f 92       	push	r1
   1f240:	11 24       	eor	r1, r1
   1f242:	2f 92       	push	r2
   1f244:	3f 92       	push	r3
   1f246:	4f 92       	push	r4
   1f248:	5f 92       	push	r5
   1f24a:	6f 92       	push	r6
   1f24c:	7f 92       	push	r7
   1f24e:	8f 92       	push	r8
   1f250:	9f 92       	push	r9
   1f252:	af 92       	push	r10
   1f254:	bf 92       	push	r11
   1f256:	cf 92       	push	r12
   1f258:	df 92       	push	r13
   1f25a:	ef 92       	push	r14
   1f25c:	ff 92       	push	r15
   1f25e:	0f 93       	push	r16
   1f260:	1f 93       	push	r17
   1f262:	2f 93       	push	r18
   1f264:	3f 93       	push	r19
   1f266:	4f 93       	push	r20
   1f268:	5f 93       	push	r21
   1f26a:	6f 93       	push	r22
   1f26c:	7f 93       	push	r23
   1f26e:	8f 93       	push	r24
   1f270:	9f 93       	push	r25
   1f272:	af 93       	push	r26
   1f274:	bf 93       	push	r27
   1f276:	cf 93       	push	r28
   1f278:	df 93       	push	r29
   1f27a:	ef 93       	push	r30
   1f27c:	ff 93       	push	r31
   1f27e:	e0 91 2c 22 	lds	r30, 0x222C
   1f282:	f0 91 2d 22 	lds	r31, 0x222D
   1f286:	06 80       	ldd	r0, Z+6	; 0x06
   1f288:	f7 81       	ldd	r31, Z+7	; 0x07
   1f28a:	e0 2d       	mov	r30, r0
   1f28c:	01 90       	ld	r0, Z+
   1f28e:	f0 81       	ld	r31, Z
   1f290:	e0 2d       	mov	r30, r0
   1f292:	e0 93 38 2c 	sts	0x2C38, r30
   1f296:	f0 93 39 2c 	sts	0x2C39, r31
   1f29a:	2d b7       	in	r18, 0x3d	; 61
   1f29c:	30 e0       	ldi	r19, 0x00	; 0
   1f29e:	21 87       	std	Z+9, r18	; 0x09
   1f2a0:	32 87       	std	Z+10, r19	; 0x0a
   1f2a2:	4e b7       	in	r20, 0x3e	; 62
   1f2a4:	94 2f       	mov	r25, r20
   1f2a6:	80 e0       	ldi	r24, 0x00	; 0
   1f2a8:	82 2b       	or	r24, r18
   1f2aa:	93 2b       	or	r25, r19
   1f2ac:	81 87       	std	Z+9, r24	; 0x09
   1f2ae:	92 87       	std	Z+10, r25	; 0x0a
   1f2b0:	8f ef       	ldi	r24, 0xFF	; 255
   1f2b2:	8d bf       	out	0x3d, r24	; 61
   1f2b4:	8f e3       	ldi	r24, 0x3F	; 63
   1f2b6:	8e bf       	out	0x3e, r24	; 62
   1f2b8:	c0 91 3d 00 	lds	r28, 0x003D
   1f2bc:	d0 91 3e 00 	lds	r29, 0x003E
   1f2c0:	e0 91 2c 22 	lds	r30, 0x222C
   1f2c4:	f0 91 2d 22 	lds	r31, 0x222D
   1f2c8:	06 80       	ldd	r0, Z+6	; 0x06
   1f2ca:	f7 81       	ldd	r31, Z+7	; 0x07
   1f2cc:	e0 2d       	mov	r30, r0
   1f2ce:	01 90       	ld	r0, Z+
   1f2d0:	f0 81       	ld	r31, Z
   1f2d2:	e0 2d       	mov	r30, r0
   1f2d4:	e0 93 30 2c 	sts	0x2C30, r30
   1f2d8:	f0 93 31 2c 	sts	0x2C31, r31
   1f2dc:	a3 85       	ldd	r26, Z+11	; 0x0b
   1f2de:	b4 85       	ldd	r27, Z+12	; 0x0c
   1f2e0:	8d 91       	ld	r24, X+
   1f2e2:	9c 91       	ld	r25, X
   1f2e4:	11 97       	sbiw	r26, 0x01	; 1
   1f2e6:	2e ed       	ldi	r18, 0xDE	; 222
   1f2e8:	8d 3a       	cpi	r24, 0xAD	; 173
   1f2ea:	92 07       	cpc	r25, r18
   1f2ec:	21 f0       	breq	.+8      	; 0x1f2f6 <arb_createMemIntsOff+0xbe>
   1f2ee:	30 97       	sbiw	r30, 0x00	; 0
   1f2f0:	11 f0       	breq	.+4      	; 0x1f2f6 <arb_createMemIntsOff+0xbe>
   1f2f2:	0e 94 f7 d5 	call	0x1abee	; 0x1abee <arb_stackOverflow>
   1f2f6:	80 91 2f 2c 	lds	r24, 0x2C2F
   1f2fa:	88 23       	and	r24, r24
   1f2fc:	69 f0       	breq	.+26     	; 0x1f318 <arb_createMemIntsOff+0xe0>
   1f2fe:	c0 91 2d 2c 	lds	r28, 0x2C2D
   1f302:	d0 91 2e 2c 	lds	r29, 0x2C2E
   1f306:	80 91 2b 2c 	lds	r24, 0x2C2B
   1f30a:	90 91 2c 2c 	lds	r25, 0x2C2C
   1f30e:	0e 94 bc f4 	call	0x1e978	; 0x1e978 <malloc>
   1f312:	88 83       	st	Y, r24
   1f314:	99 83       	std	Y+1, r25	; 0x01
   1f316:	08 c0       	rjmp	.+16     	; 0x1f328 <arb_createMemIntsOff+0xf0>
   1f318:	e0 91 2d 2c 	lds	r30, 0x2C2D
   1f31c:	f0 91 2e 2c 	lds	r31, 0x2C2E
   1f320:	80 81       	ld	r24, Z
   1f322:	91 81       	ldd	r25, Z+1	; 0x01
   1f324:	0e 94 52 f5 	call	0x1eaa4	; 0x1eaa4 <free>
   1f328:	e0 91 2c 22 	lds	r30, 0x222C
   1f32c:	f0 91 2d 22 	lds	r31, 0x222D
   1f330:	06 80       	ldd	r0, Z+6	; 0x06
   1f332:	f7 81       	ldd	r31, Z+7	; 0x07
   1f334:	e0 2d       	mov	r30, r0
   1f336:	01 90       	ld	r0, Z+
   1f338:	f0 81       	ld	r31, Z
   1f33a:	e0 2d       	mov	r30, r0
   1f33c:	e0 93 38 2c 	sts	0x2C38, r30
   1f340:	f0 93 39 2c 	sts	0x2C39, r31
   1f344:	81 85       	ldd	r24, Z+9	; 0x09
   1f346:	8d bf       	out	0x3d, r24	; 61
   1f348:	82 85       	ldd	r24, Z+10	; 0x0a
   1f34a:	8e bf       	out	0x3e, r24	; 62
   1f34c:	ff 91       	pop	r31
   1f34e:	ef 91       	pop	r30
   1f350:	df 91       	pop	r29
   1f352:	cf 91       	pop	r28
   1f354:	bf 91       	pop	r27
   1f356:	af 91       	pop	r26
   1f358:	9f 91       	pop	r25
   1f35a:	8f 91       	pop	r24
   1f35c:	7f 91       	pop	r23
   1f35e:	6f 91       	pop	r22
   1f360:	5f 91       	pop	r21
   1f362:	4f 91       	pop	r20
   1f364:	3f 91       	pop	r19
   1f366:	2f 91       	pop	r18
   1f368:	1f 91       	pop	r17
   1f36a:	0f 91       	pop	r16
   1f36c:	ff 90       	pop	r15
   1f36e:	ef 90       	pop	r14
   1f370:	df 90       	pop	r13
   1f372:	cf 90       	pop	r12
   1f374:	bf 90       	pop	r11
   1f376:	af 90       	pop	r10
   1f378:	9f 90       	pop	r9
   1f37a:	8f 90       	pop	r8
   1f37c:	7f 90       	pop	r7
   1f37e:	6f 90       	pop	r6
   1f380:	5f 90       	pop	r5
   1f382:	4f 90       	pop	r4
   1f384:	3f 90       	pop	r3
   1f386:	2f 90       	pop	r2
   1f388:	1f 90       	pop	r1
   1f38a:	0f 90       	pop	r0
   1f38c:	0f be       	out	0x3f, r0	; 63
   1f38e:	0f 90       	pop	r0
   1f390:	08 95       	ret

0001f392 <arb_malloc>:
   1f392:	0f 93       	push	r16
   1f394:	1f 93       	push	r17
   1f396:	cf 93       	push	r28
   1f398:	df 93       	push	r29
   1f39a:	8c 01       	movw	r16, r24
   1f39c:	eb 01       	movw	r28, r22
   1f39e:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <arb_sysTimerEnabled>
   1f3a2:	88 23       	and	r24, r24
   1f3a4:	01 f1       	breq	.+64     	; 0x1f3e6 <arb_malloc+0x54>
   1f3a6:	0f b6       	in	r0, 0x3f	; 63
   1f3a8:	07 fe       	sbrs	r0, 7
   1f3aa:	0f c0       	rjmp	.+30     	; 0x1f3ca <arb_malloc+0x38>
   1f3ac:	f8 94       	cli
   1f3ae:	81 e0       	ldi	r24, 0x01	; 1
   1f3b0:	80 93 2f 2c 	sts	0x2C2F, r24
   1f3b4:	c0 93 2d 2c 	sts	0x2C2D, r28
   1f3b8:	d0 93 2e 2c 	sts	0x2C2E, r29
   1f3bc:	00 93 2b 2c 	sts	0x2C2B, r16
   1f3c0:	10 93 2c 2c 	sts	0x2C2C, r17
   1f3c4:	0e 94 6a f8 	call	0x1f0d4	; 0x1f0d4 <arb_createMemIntsOn>
   1f3c8:	13 c0       	rjmp	.+38     	; 0x1f3f0 <arb_malloc+0x5e>
   1f3ca:	81 e0       	ldi	r24, 0x01	; 1
   1f3cc:	80 93 2f 2c 	sts	0x2C2F, r24
   1f3d0:	c0 93 2d 2c 	sts	0x2C2D, r28
   1f3d4:	d0 93 2e 2c 	sts	0x2C2E, r29
   1f3d8:	00 93 2b 2c 	sts	0x2C2B, r16
   1f3dc:	10 93 2c 2c 	sts	0x2C2C, r17
   1f3e0:	0e 94 1c f9 	call	0x1f238	; 0x1f238 <arb_createMemIntsOff>
   1f3e4:	05 c0       	rjmp	.+10     	; 0x1f3f0 <arb_malloc+0x5e>
   1f3e6:	c8 01       	movw	r24, r16
   1f3e8:	0e 94 bc f4 	call	0x1e978	; 0x1e978 <malloc>
   1f3ec:	88 83       	st	Y, r24
   1f3ee:	99 83       	std	Y+1, r25	; 0x01
   1f3f0:	df 91       	pop	r29
   1f3f2:	cf 91       	pop	r28
   1f3f4:	1f 91       	pop	r17
   1f3f6:	0f 91       	pop	r16
   1f3f8:	08 95       	ret

0001f3fa <arb_free>:
   1f3fa:	cf 93       	push	r28
   1f3fc:	df 93       	push	r29
   1f3fe:	ec 01       	movw	r28, r24
   1f400:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <arb_sysTimerEnabled>
   1f404:	88 23       	and	r24, r24
   1f406:	b1 f0       	breq	.+44     	; 0x1f434 <arb_free+0x3a>
   1f408:	0f b6       	in	r0, 0x3f	; 63
   1f40a:	07 fe       	sbrs	r0, 7
   1f40c:	0a c0       	rjmp	.+20     	; 0x1f422 <arb_free+0x28>
   1f40e:	f8 94       	cli
   1f410:	10 92 2f 2c 	sts	0x2C2F, r1
   1f414:	c0 93 2d 2c 	sts	0x2C2D, r28
   1f418:	d0 93 2e 2c 	sts	0x2C2E, r29
   1f41c:	0e 94 6a f8 	call	0x1f0d4	; 0x1f0d4 <arb_createMemIntsOn>
   1f420:	0d c0       	rjmp	.+26     	; 0x1f43c <arb_free+0x42>
   1f422:	10 92 2f 2c 	sts	0x2C2F, r1
   1f426:	c0 93 2d 2c 	sts	0x2C2D, r28
   1f42a:	d0 93 2e 2c 	sts	0x2C2E, r29
   1f42e:	0e 94 1c f9 	call	0x1f238	; 0x1f238 <arb_createMemIntsOff>
   1f432:	04 c0       	rjmp	.+8      	; 0x1f43c <arb_free+0x42>
   1f434:	88 81       	ld	r24, Y
   1f436:	99 81       	ldd	r25, Y+1	; 0x01
   1f438:	0e 94 52 f5 	call	0x1eaa4	; 0x1eaa4 <free>
   1f43c:	df 91       	pop	r29
   1f43e:	cf 91       	pop	r28
   1f440:	08 95       	ret

0001f442 <__mulsi3>:
   1f442:	62 9f       	mul	r22, r18
   1f444:	d0 01       	movw	r26, r0
   1f446:	73 9f       	mul	r23, r19
   1f448:	f0 01       	movw	r30, r0
   1f44a:	82 9f       	mul	r24, r18
   1f44c:	e0 0d       	add	r30, r0
   1f44e:	f1 1d       	adc	r31, r1
   1f450:	64 9f       	mul	r22, r20
   1f452:	e0 0d       	add	r30, r0
   1f454:	f1 1d       	adc	r31, r1
   1f456:	92 9f       	mul	r25, r18
   1f458:	f0 0d       	add	r31, r0
   1f45a:	83 9f       	mul	r24, r19
   1f45c:	f0 0d       	add	r31, r0
   1f45e:	74 9f       	mul	r23, r20
   1f460:	f0 0d       	add	r31, r0
   1f462:	65 9f       	mul	r22, r21
   1f464:	f0 0d       	add	r31, r0
   1f466:	99 27       	eor	r25, r25
   1f468:	72 9f       	mul	r23, r18
   1f46a:	b0 0d       	add	r27, r0
   1f46c:	e1 1d       	adc	r30, r1
   1f46e:	f9 1f       	adc	r31, r25
   1f470:	63 9f       	mul	r22, r19
   1f472:	b0 0d       	add	r27, r0
   1f474:	e1 1d       	adc	r30, r1
   1f476:	f9 1f       	adc	r31, r25
   1f478:	bd 01       	movw	r22, r26
   1f47a:	cf 01       	movw	r24, r30
   1f47c:	11 24       	eor	r1, r1
   1f47e:	08 95       	ret

0001f480 <__udivmodsi4>:
   1f480:	a1 e2       	ldi	r26, 0x21	; 33
   1f482:	1a 2e       	mov	r1, r26
   1f484:	aa 1b       	sub	r26, r26
   1f486:	bb 1b       	sub	r27, r27
   1f488:	fd 01       	movw	r30, r26
   1f48a:	0d c0       	rjmp	.+26     	; 0x1f4a6 <__udivmodsi4_ep>

0001f48c <__udivmodsi4_loop>:
   1f48c:	aa 1f       	adc	r26, r26
   1f48e:	bb 1f       	adc	r27, r27
   1f490:	ee 1f       	adc	r30, r30
   1f492:	ff 1f       	adc	r31, r31
   1f494:	a2 17       	cp	r26, r18
   1f496:	b3 07       	cpc	r27, r19
   1f498:	e4 07       	cpc	r30, r20
   1f49a:	f5 07       	cpc	r31, r21
   1f49c:	20 f0       	brcs	.+8      	; 0x1f4a6 <__udivmodsi4_ep>
   1f49e:	a2 1b       	sub	r26, r18
   1f4a0:	b3 0b       	sbc	r27, r19
   1f4a2:	e4 0b       	sbc	r30, r20
   1f4a4:	f5 0b       	sbc	r31, r21

0001f4a6 <__udivmodsi4_ep>:
   1f4a6:	66 1f       	adc	r22, r22
   1f4a8:	77 1f       	adc	r23, r23
   1f4aa:	88 1f       	adc	r24, r24
   1f4ac:	99 1f       	adc	r25, r25
   1f4ae:	1a 94       	dec	r1
   1f4b0:	69 f7       	brne	.-38     	; 0x1f48c <__udivmodsi4_loop>
   1f4b2:	60 95       	com	r22
   1f4b4:	70 95       	com	r23
   1f4b6:	80 95       	com	r24
   1f4b8:	90 95       	com	r25
   1f4ba:	9b 01       	movw	r18, r22
   1f4bc:	ac 01       	movw	r20, r24
   1f4be:	bd 01       	movw	r22, r26
   1f4c0:	cf 01       	movw	r24, r30
   1f4c2:	08 95       	ret

0001f4c4 <__divmodsi4>:
   1f4c4:	97 fb       	bst	r25, 7
   1f4c6:	09 2e       	mov	r0, r25
   1f4c8:	05 26       	eor	r0, r21
   1f4ca:	0e d0       	rcall	.+28     	; 0x1f4e8 <__divmodsi4_neg1>
   1f4cc:	57 fd       	sbrc	r21, 7
   1f4ce:	04 d0       	rcall	.+8      	; 0x1f4d8 <__divmodsi4_neg2>
   1f4d0:	d7 df       	rcall	.-82     	; 0x1f480 <__udivmodsi4>
   1f4d2:	0a d0       	rcall	.+20     	; 0x1f4e8 <__divmodsi4_neg1>
   1f4d4:	00 1c       	adc	r0, r0
   1f4d6:	38 f4       	brcc	.+14     	; 0x1f4e6 <__divmodsi4_exit>

0001f4d8 <__divmodsi4_neg2>:
   1f4d8:	50 95       	com	r21
   1f4da:	40 95       	com	r20
   1f4dc:	30 95       	com	r19
   1f4de:	21 95       	neg	r18
   1f4e0:	3f 4f       	sbci	r19, 0xFF	; 255
   1f4e2:	4f 4f       	sbci	r20, 0xFF	; 255
   1f4e4:	5f 4f       	sbci	r21, 0xFF	; 255

0001f4e6 <__divmodsi4_exit>:
   1f4e6:	08 95       	ret

0001f4e8 <__divmodsi4_neg1>:
   1f4e8:	f6 f7       	brtc	.-4      	; 0x1f4e6 <__divmodsi4_exit>
   1f4ea:	90 95       	com	r25
   1f4ec:	80 95       	com	r24
   1f4ee:	70 95       	com	r23
   1f4f0:	61 95       	neg	r22
   1f4f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1f4f4:	8f 4f       	sbci	r24, 0xFF	; 255
   1f4f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1f4f8:	08 95       	ret

0001f4fa <__prologue_saves__>:
   1f4fa:	2f 92       	push	r2
   1f4fc:	3f 92       	push	r3
   1f4fe:	4f 92       	push	r4
   1f500:	5f 92       	push	r5
   1f502:	6f 92       	push	r6
   1f504:	7f 92       	push	r7
   1f506:	8f 92       	push	r8
   1f508:	9f 92       	push	r9
   1f50a:	af 92       	push	r10
   1f50c:	bf 92       	push	r11
   1f50e:	cf 92       	push	r12
   1f510:	df 92       	push	r13
   1f512:	ef 92       	push	r14
   1f514:	ff 92       	push	r15
   1f516:	0f 93       	push	r16
   1f518:	1f 93       	push	r17
   1f51a:	cf 93       	push	r28
   1f51c:	df 93       	push	r29
   1f51e:	cd b7       	in	r28, 0x3d	; 61
   1f520:	de b7       	in	r29, 0x3e	; 62
   1f522:	ca 1b       	sub	r28, r26
   1f524:	db 0b       	sbc	r29, r27
   1f526:	cd bf       	out	0x3d, r28	; 61
   1f528:	de bf       	out	0x3e, r29	; 62
   1f52a:	19 94       	eijmp

0001f52c <__epilogue_restores__>:
   1f52c:	2a 88       	ldd	r2, Y+18	; 0x12
   1f52e:	39 88       	ldd	r3, Y+17	; 0x11
   1f530:	48 88       	ldd	r4, Y+16	; 0x10
   1f532:	5f 84       	ldd	r5, Y+15	; 0x0f
   1f534:	6e 84       	ldd	r6, Y+14	; 0x0e
   1f536:	7d 84       	ldd	r7, Y+13	; 0x0d
   1f538:	8c 84       	ldd	r8, Y+12	; 0x0c
   1f53a:	9b 84       	ldd	r9, Y+11	; 0x0b
   1f53c:	aa 84       	ldd	r10, Y+10	; 0x0a
   1f53e:	b9 84       	ldd	r11, Y+9	; 0x09
   1f540:	c8 84       	ldd	r12, Y+8	; 0x08
   1f542:	df 80       	ldd	r13, Y+7	; 0x07
   1f544:	ee 80       	ldd	r14, Y+6	; 0x06
   1f546:	fd 80       	ldd	r15, Y+5	; 0x05
   1f548:	0c 81       	ldd	r16, Y+4	; 0x04
   1f54a:	1b 81       	ldd	r17, Y+3	; 0x03
   1f54c:	aa 81       	ldd	r26, Y+2	; 0x02
   1f54e:	b9 81       	ldd	r27, Y+1	; 0x01
   1f550:	ce 0f       	add	r28, r30
   1f552:	d1 1d       	adc	r29, r1
   1f554:	cd bf       	out	0x3d, r28	; 61
   1f556:	de bf       	out	0x3e, r29	; 62
   1f558:	ed 01       	movw	r28, r26
   1f55a:	08 95       	ret

0001f55c <_exit>:
   1f55c:	f8 94       	cli

0001f55e <__stop_program>:
   1f55e:	ff cf       	rjmp	.-2      	; 0x1f55e <__stop_program>
